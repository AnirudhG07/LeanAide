{!`:1024 builtin := #0
`⋂₀`:110 _:110 := set.sInter #0
`↿`:1024 _:1024 := function.has_uncurry.uncurry #0
`fail!`:100 builtin := #0
`∃!`:1024 binders `,`:0 (scoped 0) := #0
`Σ`:1024 binders `,`:0 (scoped 0) := #0
`⟨`:1024 builtin := #0
`⟦`:1024 _:1 `⟧`:0 := quotient.mk #0
`[`:1024 (foldr* 0 `, ` `]`) := #0
`fun`:0 builtin := #0
`∅`:1024 := has_emptyc.emptyc
`ℝ`:1024 := real
`@@`:1024 builtin := #0
`by`:0 builtin := #0
`Σ'`:1024 binders `,`:0 (scoped 0) := #0
`if`:0 builtin := #0
`ℚ`:1024 := rat
`calc`:0 builtin := #0
`Prop`:1024 := Prop
`¬`:40 _:40 := not #0
````(`:1024 builtin := #0
`↑`:1024 _:1024 := coe #0
`show`:0 builtin := #0
`⇑`:1024 _:1024 := coe_fn #0
`.(`:1024 builtin := #0
`⌊`:1024 _:1 `⌋`:1 := int.floor #0
`⌊`:1024 _:1 `⌋₊`:1 := nat.floor #0
`ℤ`:1024 := int
`command`:1024 := tactic unit
`match`:0 builtin := #0
`{`:1024 builtin := #0
```:1024 builtin := #0
`ℕ+`:1024 := pnat
`𝒫`:100 _:100 := set.powerset #0
`↥`:1024 _:1024 := coe_sort #0
`-[1+`:1024 _:1 `]`:0 := int.neg_succ_of_nat #0
`sformat!`:100 builtin := #0
`suffices`:0 builtin := #0
`@`:1024 builtin := #0
`Sort*`:1024 builtin := #0
`Pi`:0 binders `,`:0 (scoped 0) := #0
`let`:0 builtin := #0
`ℕ`:1024 := nat
``(`:1024 builtin := #0
`assume`:0 builtin := #0
`(::)`:1024 builtin := #0
`⋂`:1024 binders `,`:0 (scoped 0) := #0
``[`:1024 builtin := #0
`⅟`:1034 := invertible.inv_of
`!`:0 _:90 := bnot #0
`∃`:1024 binders `,`:0 (scoped 0) := #0
`(`:1024 builtin := #0
`exists`:1024 binders `,`:0 (scoped 0) := #0
`‹`:1024 _:1 `›`:1 := interactive.executor.execute_explicit tactic
  (has_bind.seq (tactic.save_info (_ 1068 26)) (tactic.step tactic.assumption))
`(:`:1024 _:0 `:)`:0 builtin := #0
`Sort`:1024 builtin := #0
`sorry`:1024 builtin := #0
`trace!`:100 builtin := #0
```(`:1024 builtin := #0
`⋃₀`:110 _:110 := set.sUnion #0
`dec_trivial`:1024 := of_as_true
  (interactive.executor.execute_explicit tactic (has_bind.seq (tactic.save_info (_ 1482 41)) (tactic.step tactic.triv)))
`format!`:100 builtin := #0
`⋃`:1024 binders `,`:0 (scoped 0) := #0
`Type`:1024 builtin := #0
`⨅`:1024 binders `,`:0 (scoped 0) := #0
`⊤`:1024 := has_top.top
`#[`:1024 builtin := #0
`⌈`:1024 _:1 `⌉₊`:1 := nat.ceil #0
`⌈`:1024 _:1 `⌉`:1 := int.ceil #0
`%%`:1024 builtin := #0
`pformat!`:100 builtin := #0
`do`:0 builtin := #0
`|`:0 _:1 `|`:0 := has_abs.abs #0
`⊥`:1024 := has_bot.bot
`⨆`:1024 binders `,`:0 (scoped 0) := #0
`Type*`:1024 builtin := #0
`-`:65 _:75 := has_neg.neg #0
`._`:1024 builtin := #0
`()`:1024 builtin := #0
`have`:0 builtin := #0
`begin`:1024 builtin := #0
_ `∩`:70 _:70 := has_inter.inter #1 #0
_ `⊂`:50 _:50 := has_ssubset.ssubset #1 #0
_ `→*`:25 _:24 := monoid_hom #1 #0
_ `≥`:50 _:50 := ge #1 #0
_ `<+`:50 _:50 := list.sublist #1 #0
_ `∈`:50 _:50 := has_mem.mem #1 #0
_ `<`:50 _:50 := has_lt.lt #1 #0
_ `::ᵥ`:67 _:66 := vector.cons #1 #0
_ `>>=`:55 _:55 := has_bind.bind #1 #0
_ `=ₐ`:50 _:50 := eq (expr.alpha_eqv #1 #0) bool.tt
_ `↪o`:25 _:25 := order_embedding #1 #0
_ `on`:2 _:2 := function.on_fun #1 #0
_ `$>`:100 _:99 := functor.map_const_rev #1 #0
_ `ˣ`:1025 := units #0
_ `×`:35 _:34 := prod #1 #0
_ `<|`:1 _:0 := option.lhoare #1 #0
_ `==`:50 _:50 := heq #1 #0
_ `\`:70 _:70 := has_sdiff.sdiff #1 #0
_ `>=`:50 _:50 := ge #1 #0
_ `▸`:75 _:74 := eq.subst #1 #0
_ `<=`:50 _:50 := has_le.le #1 #0
_ `*`:70 _:70 := has_mul.mul #1 #0
_ `ᵐᵒᵖ`:1034 := mul_opposite #0
_ `>=>`:55 _:55 := fish #1 #0
_ `→r`:25 _:25 := rel_hom #1 #0
_ `∨`:30 _:29 := or #1 #0
_ `⊇`:50 _:50 := superset #1 #0
_ `<*`:60 _:60 := has_seq_left.seq_left #1 #0
_ `∘`:90 _:89 := function.comp #1 #0
_ `=?=`:50 _:50 := unification_constraint.mk #1 #0
_ `<->`:20 _:20 := iff #1 #0
_ `∣`:50 _:50 := has_dvd.dvd #1 #0
_ `^[`:1 _:1 `]`:0 := nat.iterate #1 #0
_ `⁺`:1000 := has_pos_part.pos #0
_ `≠`:50 _:50 := ne #1 #0
_ `∉`:50 _:50 := not (has_mem.mem #1 #0)
_ `::ₘ`:67 _:66 := multiset.cons #1 #0
_ `∘'`:80 _:79 := function.dcomp #1 #0
_ `^`:80 _:79 := has_pow.pow #1 #0
_ `≃*`:25 _:25 := mul_equiv #1 #0
_ `&&`:70 _:70 := band #1 #0
_ `≃r`:25 _:25 := rel_iso #1 #0
_ `|>`:1 _:0 := option.rhoare #1 #0
_ `⊔`:68 _:68 := has_sup.sup #1 #0
_ `∧`:35 _:34 := and #1 #0
_ `<+~`:50 _:50 := list.subperm #1 #0
_ `<*>`:60 _:60 := has_seq.seq #1 #0
_ `+ᵥ`:65 _:65 := has_vadd.vadd #1 #0
_ `≃+`:25 _:25 := add_equiv #1 #0
_ `;`:1 _:1 := has_andthen.andthen #1 #0
_ `↪r`:25 _:25 := rel_embedding #1 #0
_ `ᵃᵒᵖ`:1034 := add_opposite #0
_ `≃o`:25 _:25 := order_iso #1 #0
_ `>>[tactic]`:2 _:2 := interaction_monad_seq #1 #0
_ `>`:50 _:50 := gt #1 #0
_ `↔`:20 _:20 := iff #1 #0
_ `::`:67 _:66 :=
  | list.cons #1 #0
  | sym.cons #1 #0
  | sym.cons' #1 #0
_ `<:+`:50 _:50 := list.is_suffix #1 #0
_ `∪`:65 _:65 := has_union.union #1 #0
_ `||`:65 _:65 := bor #1 #0
_ `↪`:25 _:24 := function.embedding #1 #0
_ `≈`:50 _:50 := has_equiv.equiv #1 #0
_ `+`:65 _:65 := has_add.add #1 #0
_ `⁻¹`:1034 := has_inv.inv #0
_ `++`:65 _:65 := has_append.append #1 #0
_ `⊓`:69 _:69 := has_inf.inf #1 #0
_ `%`:70 _:70 := has_mod.mod #1 #0
_ `^.`:1025 builtin := #0
_ `>>`:55 _:55 := has_bind.and_then #1 #0
_ `<+:`:50 _:50 := list.is_prefix #1 #0
_ `⁻¹'o`:80 _:80 := order.preimage #1 #0
_ `•`:73 _:72 := has_scalar.smul #1 #0
_ `≟`:50 _:50 := unification_constraint.mk #1 #0
_ `\/`:30 _:29 := or #1 #0
_ `$`:1 _:0 := #1 #0
_ `<:+:`:50 _:50 := list.is_infix #1 #0
_ `→+`:25 _:24 := add_monoid_hom #1 #0
_ `→o`:25 _:24 := order_hom #1 #0
_ `⊃`:50 _:50 := ssuperset #1 #0
_ `×ˢ`:72 _:72 := has_set_prod.prod #1 #0
_ `=`:50 _:50 := eq #1 #0
_ `<|>`:2 _:1 := has_orelse.orelse #1 #0
_ `~`:50 _:50 := list.perm #1 #0
_ `<.>`:65 _:65 := mk_str_name #1 #0
_ `<$>`:100 _:99 := functor.map #1 #0
_ `''`:80 _:80 := set.image #1 #0
_ `<$`:100 _:99 := functor.map_const #1 #0
_ `≃+*`:25 _:25 := ring_equiv #1 #0
_ `⊕`:30 _:29 := sum #1 #0
_ `⁻`:1000 := has_neg_part.neg #0
_ `⇒`:40 _:39 := relator.lift_fun #1 #0
_ `-[`:1 _:1 `]-`:1 _:1 := function.combine #2 #1 #0
_ `ᶜ`:1025 := has_compl.compl #0
_ `⁻¹'`:80 _:80 := set.preimage #1 #0
_ `*>`:60 _:60 := has_seq_right.seq_right #1 #0
_ `$<`:1 _:1 := #0 #1
_ `≈[`:50 _:1 `]`:0 _:50 := @strict_weak_order.equiv _ #1 #2 #0
_ `->`:25 _:24 := #1 → #2
_ `-`:65 _:65 := has_sub.sub #1 #0
_ `/\`:35 _:34 := and #1 #0
_ `/ₚ`:70 _:70 := divp #1 #0
_ `≃`:25 _:25 := equiv #1 #0
_ `×ₗ`:35 _:34 := lex (prod #1 #0)
_ `→+*`:25 _:24 := ring_hom #1 #0
_ `>>=[tactic]`:2 _:2 := interaction_monad_bind #1 #0
_ `≤`:50 _:50 := has_le.le #1 #0
_ `⊆`:50 _:50 := has_subset.subset #1 #0
_ `/`:70 _:70 := has_div.div #1 #0