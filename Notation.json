[{"Name": "Summation",
  "Symbol": "`Σ_,_`",
  "Command": "\sum",
  "Explanation": "Denotes finite summation, `Finset.sum`. There are two uses : a. `Σ i in s,f i` denotes the summation over a set `s` of a space `α`, with `f` having domain `α`. We require `s` to be `Finset α`; b. `Σ i : α,f i` requires `Fintype α`. This is the additive version of product.",
  "Link": "https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/BigOperators/Basic.html#Finset.sum",
  "Example": "example : {α : Type v} {s : Finset α} {m : ℕ} {f : α → ℕ} (h₁ : ∀ x ∈ s, f x = m) :
   ∑ x in s, f x = card s * m"},
 {"Name": "Product",
  "Symbol": "`∏_,_`",
  "Command": "\prod",
  "Explanation": "Denotes finite summation, `Finset.prod`. There are two uses : a. `∏ i in s,f i` denotes the summation over a set `s` of a space `α`, with `f` having domain `α`. We require `s` to be `Finset α`; b. `∏ i : α,f i` requires `Fintype α`.",
  "Link": "https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/BigOperators/Basic.html#Finset.prod",
  "Example": "example : {α : Type v} {s : Finset α} {m : ℕ} {f : α → ℕ} (h₁ : ∀ x ∈ s, f x = m) :
  ∏ x in s, f x = m ^ (card s)"},
  {"Name": "Subset",
  "Symbol": "`_⊆_`",
  "Command": "\sub",
  "Explanation": "Denotes the subset relation, `HasSubset`. `a ⊆ b` implies `a` is a subset of `b`.",
  "Link": "https://leanprover-community.github.io/mathlib4_docs/Std/Classes/SetNotation.html#HasSubset",
  "Example": "example {α : Type v} {s : Set α} : s ⊆ s"},
  {"Name": "Addition",
  "Symbol": "`_+_`",
  "Command": "+",
  "Explanation": "Denotes the addition function, `HAdd`. `a + b` denotes the addition of `a` and `b` over any Types on which addition is defined. Note that `a`, `b` and `a + b` need not have the same type.",
  "Link": "https://leanprover-community.github.io/mathlib4_docs/Init/Prelude.html#HAdd",
  "Example": "example (a : Int) : a + 0 = a"},
  {"Name": "Eventually equal",
  "Symbol": "`_=ᶠ[_]_`",
  "Command": "=\^f",
  "Explanation": "Given functions `f` and `g` from `α` to `β`, and a filter `l` on `α`, `f=ᶠ[l]g` means that the set of `x` such that `f x = g x` belongs to `l`.",
  "Link": "https://leanprover-community.github.io/mathlib4_docs/Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq",
  "Example": "example {α : Type u} {s : Set α} {l : Filter α} :
  s =ᶠ[l] Set.univ ↔ s ∈ l"},
  {"Name": "Multiplicative opposite",
  "Symbol": "`_ᵐᵒᵖ`",
  "Command": "\mop",
  "Explanation": "Denotes the multiplicative opposite of a type. This is used to give a topological space structure to the units of a topological space.",
  "Link": "https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Opposites.html#MulOpposite",
  "Example": "example (α : Type u) [Nontrivial α] : Nontrivial αᵐᵒᵖ"}
]