{"docString": "If `r` is rational (`r ≠ 0`) and `x` is irrational, prove that `r+x` is irrational.", "prompts": "[{\"theorem\": \"∀ {x y : ℝ}, x < y → ∃ r, Irrational r ∧ x < r ∧ r < y\",\n  \"isProp\": true,\n  \"docString\":\n  \"There is an irrational number `r` between any two reals `x < r < y`. \"},\n {\"theorem\": \"∀ {x y : ℝ}, Irrational (x + y) → Irrational x ∨ Irrational y\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `x + y` is irrational, then at least one of `x` and `y` is irrational. \"},\n {\"theorem\":\n  \"∀ {p x : ℝ} {r : ℚ}, r ≠ 0 → (LiouvilleWith p (↑r * x) ↔ LiouvilleWith p x)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The product `r * x`, `r : ℚ`, `r ≠ 0`, is a Liouville number with exponent `p` if and only if\\n`x` satisfies the same condition. \"},\n {\"theorem\":\n  \"∀ {p x : ℝ} {r : ℚ}, r ≠ 0 → (LiouvilleWith p (x * ↑r) ↔ LiouvilleWith p x)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The product `x * r`, `r : ℚ`, `r ≠ 0`, is a Liouville number with exponent `p` if and only if\\n`x` satisfies the same condition. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {r : α → α → Prop}, Reflexive r → ∀ {x y : α}, (x ≠ y → r x y) → r x y\",\n  \"isProp\": true,\n  \"docString\":\n  \"To show a reflexive relation `r : α → α → Prop` holds over `x y : α`,\\nit suffices to show it holds when `x ≠ y`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} [inst : NormedField 𝕜] [inst_1 : CompleteSpace 𝕜] {r : 𝕜},\\n  ‖r‖ < 1 → ∑' (n : ℕ), ↑n * r ^ n = r / (1 - r) ^ 2\",\n  \"isProp\": true,\n  \"docString\": \"If `‖r‖ < 1`, then `∑' n : ℕ, n * r ^ n = r / (1 - r) ^ 2`. \"},\n {\"theorem\":\n  \"∀ {R : Type u} [self : EuclideanDomain R] (a : R) {b : R}, b ≠ 0 → ¬EuclideanDomain.r (a * b) a\",\n  \"isProp\": true,\n  \"docString\": \"An additional constraint on `r`. \"},\n {\"theorem\":\n  \"∀ {x : ℝ} (n : ℕ) (m : ℤ), x ^ n = ↑m → (¬∃ y, x = ↑y) → 0 < n → Irrational x\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `x^n`, `n > 0`, is integer and is not the `n`-th power of an integer, then\\n`x` is irrational. \"},\n {\"theorem\":\n  \"∀ {A : Type u_1} {K : Type u_2} [inst : CommRing A] [inst_1 : IsDomain A] [inst_2 : UniqueFactorizationMonoid A]\\n  [inst_3 : Field K] [inst_4 : Algebra A K] [inst_5 : IsFractionRing A K] {p : Polynomial A} {r : K},\\n  ↑(Polynomial.aeval r) p = 0 → IsFractionRing.num A r ∣ Polynomial.coeff p 0\",\n  \"isProp\": true,\n  \"docString\":\n  \"Rational root theorem part 1:\\nif `r : f.codomain` is a root of a polynomial over the ufd `A`,\\nthen the numerator of `r` divides the constant coefficient \"},\n {\"theorem\":\n  \"∀ {A : Type u_1} {K : Type u_2} [inst : CommRing A] [inst_1 : IsDomain A] [inst_2 : UniqueFactorizationMonoid A]\\n  [inst_3 : Field K] [inst_4 : Algebra A K] [inst_5 : IsFractionRing A K] {p : Polynomial A} {r : K},\\n  ↑(Polynomial.aeval r) p = 0 → ↑(IsFractionRing.den A r) ∣ Polynomial.leadingCoeff p\",\n  \"isProp\": true,\n  \"docString\":\n  \"Rational root theorem part 2:\\nif `r : f.codomain` is a root of a polynomial over the ufd `A`,\\nthen the denominator of `r` divides the leading coefficient \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} [inst : LinearOrderedField 𝕜] [inst_1 : TopologicalSpace 𝕜] [inst_2 : OrderTopology 𝕜],\\n  Filter.Tendsto (fun r => r⁻¹) Filter.atTop (nhdsWithin 0 (Set.Ioi 0))\",\n  \"isProp\": true,\n  \"docString\":\n  \"The function `r ↦ r⁻¹` tends to `0` on the right as `r → +∞`. \"},\n {\"theorem\":\n  \"∀ {R : Type u} [self : EuclideanDomain R] (a : R) {b : R}, b ≠ 0 → EuclideanDomain.r (EuclideanDomain.remainder a b) b\",\n  \"isProp\": true,\n  \"docString\": \"The relation `r` satisfies `r (a % b) b`. \"},\n {\"theorem\":\n  \"∀ {R : Type u_1} [inst : Monoid R] {S : Submonoid R} [inst_1 : OreLocalization.OreSet S] (r : R) (s : { x // x ∈ S })\\n  (t : R) (hst : ↑s * t ∈ S), r /ₒ s = r * t /ₒ { val := ↑s * t, property := hst }\",\n  \"isProp\": true,\n  \"docString\":\n  \"A fraction `r /ₒ s` is equal to its expansion by an arbitrary factor `t` if `s * t ∈ S`. \"},\n {\"theorem\":\n  \"∀ {x : ℝ} (n : ℕ) {m : ℤ} (hm : m ≠ 0) (p : ℕ) [hp : Fact (Nat.Prime p)],\\n  x ^ n = ↑m → Part.get (multiplicity (↑p) m) (_ : multiplicity.Finite (↑p) m) % n ≠ 0 → Irrational x\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `x^n = m` is an integer and `n` does not divide the `multiplicity p m`, then `x`\\nis irrational. \"},\n {\"theorem\":\n  \"∀ {α : Sort u_1} {β : Sort u_2} {r : α → α → Prop},\\n  WellFounded r →\\n    ∀ {a bot : α} {C : β → Prop} {f : α → β},\\n      (∀ (b : α), f b ≠ f bot → C (f b) → ∃ c, r c b ∧ C (f c)) → C (f a) → C (f bot)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `r` be a well-founded relation on `α`, let `f : α → β` be a function,\\nlet `C : β → Prop`, and let `bot : α`.\\nThis induction principle shows that `C (f bot)` holds, given that\\n* some `a` satisfies `C (f a)`, and\\n* for each `b` such that `f b ≠ f bot` and `C (f b)` holds, there is `c`\\n  satisfying `r c b` and `C (f c)`. \"},\n {\"theorem\":\n  \"∀ {ξ : ℝ}, Irrational ξ → ∀ (q : ℚ), ∃ q', |ξ - ↑q'| < 1 / ↑q'.den ^ 2 ∧ |ξ - ↑q'| < |ξ - ↑q|\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given any rational approximation `q` to the irrational real number `ξ`, there is\\na good rational approximation `q'` such that `|ξ - q'| < |ξ - q|`. \"},\n {\"theorem\":\n  \"∀ {R : Type u_1} [inst : Monoid R] {S : Submonoid R} [inst_1 : OreLocalization.OreSet S] {r r' r₁ r₂ : R}\\n  {s t : { x // x ∈ S }}, r * ↑t = r' * ↑t → r₁ * r * r₂ /ₒ s = r₁ * r' * r₂ /ₒ s\",\n  \"isProp\": true,\n  \"docString\":\n  \"Fractions which differ by a factor of the numerator can be proven equal if\\nthose factors expand to equal elements of `R`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {r : α → α → Prop}, Reflexive r → ∀ {x y : α}, x ≠ y → r x y ↔ r x y\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a reflexive relation `r : α → α → Prop` holds over `x y : α`,\\nthen it holds whether or not `x ≠ y`. \"},\n {\"theorem\": \"∀ {p n : ℕ}, padicValRat p ↑n = ↑(padicValNat p n)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The `p`-adic value of an integer `z ≠ 0` is its `p`-adic value as a rational. \"},\n {\"theorem\":\n  \"∀ {R : Type u} [inst : CommRing R] (P : Ideal R), Ideal.IsPrime (Ideal.map Polynomial.C P) ↔ Ideal.IsPrime P\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `P` is a prime ideal of `R`, then `P.R[x]` is a prime ideal of `R[x]`. \"}]\n", "prompt_cons": "/-- There is an irrational number `r` between any two reals `x < r < y`. -/\ntheorem ∀ {x y : ℝ}, x < y → ∃ r, Irrational r ∧ x < r ∧ r < y :=\n\n/-- If `x + y` is irrational, then at least one of `x` and `y` is irrational. -/\ntheorem ∀ {x y : ℝ}, Irrational (x + y) → Irrational x ∨ Irrational y :=\n\n/-- The product `r * x`, `r : ℚ`, `r ≠ 0`, is a Liouville number with exponent `p` if and only if\n`x` satisfies the same condition. -/\ntheorem ∀ {p x : ℝ} {r : ℚ}, r ≠ 0 → (LiouvilleWith p (↑r * x) ↔ LiouvilleWith p x) :=\n\n/-- The product `x * r`, `r : ℚ`, `r ≠ 0`, is a Liouville number with exponent `p` if and only if\n`x` satisfies the same condition. -/\ntheorem ∀ {p x : ℝ} {r : ℚ}, r ≠ 0 → (LiouvilleWith p (x * ↑r) ↔ LiouvilleWith p x) :=\n\n/-- To show a reflexive relation `r : α → α → Prop` holds over `x y : α`,\nit suffices to show it holds when `x ≠ y`. -/\ntheorem ∀ {α : Type u_1} {r : α → α → Prop}, Reflexive r → ∀ {x y : α}, (x ≠ y → r x y) → r x y :=\n\n/-- If `‖r‖ < 1`, then `∑' n : ℕ, n * r ^ n = r / (1 - r) ^ 2`. -/\ntheorem ∀ {𝕜 : Type u_1} [inst : NormedField 𝕜] [inst_1 : CompleteSpace 𝕜] {r : 𝕜},\n  ‖r‖ < 1 → ∑' (n : ℕ), ↑n * r ^ n = r / (1 - r) ^ 2 :=\n\n/-- An additional constraint on `r`. -/\ntheorem ∀ {R : Type u} [self : EuclideanDomain R] (a : R) {b : R}, b ≠ 0 → ¬EuclideanDomain.r (a * b) a :=\n\n/-- If `x^n`, `n > 0`, is integer and is not the `n`-th power of an integer, then\n`x` is irrational. -/\ntheorem ∀ {x : ℝ} (n : ℕ) (m : ℤ), x ^ n = ↑m → (¬∃ y, x = ↑y) → 0 < n → Irrational x :=\n\n/-- Rational root theorem part 1:\nif `r : f.codomain` is a root of a polynomial over the ufd `A`,\nthen the numerator of `r` divides the constant coefficient -/\ntheorem ∀ {A : Type u_1} {K : Type u_2} [inst : CommRing A] [inst_1 : IsDomain A] [inst_2 : UniqueFactorizationMonoid A]\n  [inst_3 : Field K] [inst_4 : Algebra A K] [inst_5 : IsFractionRing A K] {p : Polynomial A} {r : K},\n  ↑(Polynomial.aeval r) p = 0 → IsFractionRing.num A r ∣ Polynomial.coeff p 0 :=\n\n/-- Rational root theorem part 2:\nif `r : f.codomain` is a root of a polynomial over the ufd `A`,\nthen the denominator of `r` divides the leading coefficient -/\ntheorem ∀ {A : Type u_1} {K : Type u_2} [inst : CommRing A] [inst_1 : IsDomain A] [inst_2 : UniqueFactorizationMonoid A]\n  [inst_3 : Field K] [inst_4 : Algebra A K] [inst_5 : IsFractionRing A K] {p : Polynomial A} {r : K},\n  ↑(Polynomial.aeval r) p = 0 → ↑(IsFractionRing.den A r) ∣ Polynomial.leadingCoeff p :=\n\n/-- The function `r ↦ r⁻¹` tends to `0` on the right as `r → +∞`. -/\ntheorem ∀ {𝕜 : Type u_1} [inst : LinearOrderedField 𝕜] [inst_1 : TopologicalSpace 𝕜] [inst_2 : OrderTopology 𝕜],\n  Filter.Tendsto (fun r => r⁻¹) Filter.atTop (nhdsWithin 0 (Set.Ioi 0)) :=\n\n/-- The relation `r` satisfies `r (a % b) b`. -/\ntheorem ∀ {R : Type u} [self : EuclideanDomain R] (a : R) {b : R}, b ≠ 0 → EuclideanDomain.r (EuclideanDomain.remainder a b) b :=\n\n/-- A fraction `r /ₒ s` is equal to its expansion by an arbitrary factor `t` if `s * t ∈ S`. -/\ntheorem ∀ {R : Type u_1} [inst : Monoid R] {S : Submonoid R} [inst_1 : OreLocalization.OreSet S] (r : R) (s : { x // x ∈ S })\n  (t : R) (hst : ↑s * t ∈ S), r /ₒ s = r * t /ₒ { val := ↑s * t, property := hst } :=\n\n/-- If `x^n = m` is an integer and `n` does not divide the `multiplicity p m`, then `x`\nis irrational. -/\ntheorem ∀ {x : ℝ} (n : ℕ) {m : ℤ} (hm : m ≠ 0) (p : ℕ) [hp : Fact (Nat.Prime p)],\n  x ^ n = ↑m → Part.get (multiplicity (↑p) m) (_ : multiplicity.Finite (↑p) m) % n ≠ 0 → Irrational x :=\n\n/-- Let `r` be a well-founded relation on `α`, let `f : α → β` be a function,\nlet `C : β → Prop`, and let `bot : α`.\nThis induction principle shows that `C (f bot)` holds, given that\n* some `a` satisfies `C (f a)`, and\n* for each `b` such that `f b ≠ f bot` and `C (f b)` holds, there is `c`\n  satisfying `r c b` and `C (f c)`. -/\ntheorem ∀ {α : Sort u_1} {β : Sort u_2} {r : α → α → Prop},\n  WellFounded r →\n    ∀ {a bot : α} {C : β → Prop} {f : α → β},\n      (∀ (b : α), f b ≠ f bot → C (f b) → ∃ c, r c b ∧ C (f c)) → C (f a) → C (f bot) :=\n\n/-- Given any rational approximation `q` to the irrational real number `ξ`, there is\na good rational approximation `q'` such that `|ξ - q'| < |ξ - q|`. -/\ntheorem ∀ {ξ : ℝ}, Irrational ξ → ∀ (q : ℚ), ∃ q', |ξ - ↑q'| < 1 / ↑q'.den ^ 2 ∧ |ξ - ↑q'| < |ξ - ↑q| :=\n\n/-- Fractions which differ by a factor of the numerator can be proven equal if\nthose factors expand to equal elements of `R`. -/\ntheorem ∀ {R : Type u_1} [inst : Monoid R] {S : Submonoid R} [inst_1 : OreLocalization.OreSet S] {r r' r₁ r₂ : R}\n  {s t : { x // x ∈ S }}, r * ↑t = r' * ↑t → r₁ * r * r₂ /ₒ s = r₁ * r' * r₂ /ₒ s :=\n\n/-- If a reflexive relation `r : α → α → Prop` holds over `x y : α`,\nthen it holds whether or not `x ≠ y`. -/\ntheorem ∀ {α : Type u_1} {r : α → α → Prop}, Reflexive r → ∀ {x y : α}, x ≠ y → r x y ↔ r x y :=\n\n/-- The `p`-adic value of an integer `z ≠ 0` is its `p`-adic value as a rational. -/\ntheorem ∀ {p n : ℕ}, padicValRat p ↑n = ↑(padicValNat p n) :=\n\n/-- If `P` is a prime ideal of `R`, then `P.R[x]` is a prime ideal of `R[x]`. -/\ntheorem ∀ {R : Type u} [inst : CommRing R] (P : Ideal R), Ideal.IsPrime (Ideal.map Polynomial.C P) ↔ Ideal.IsPrime P :=\n\n/-- If `r` is rational (`r ≠ 0`) and `x` is irrational, prove that `r+x` is irrational. -/\ntheorem", "choices": ["∀ {r : ℚ} {x : ℝ}, r ≠ 0 → Irrational x → Irrational (↑r + x) ", "∀ {x : ℝ} {r : ℚ}, r ≠ 0 → Irrational x → Irrational (↑r + x) ", "∀ {x : ℝ} {r : ℚ}, r ≠ 0 → Irrational x → Irrational (↑r + x) ", "∀ {r : ℚ} {x : ℝ}, r ≠ 0 → Irrational x → Irrational (↑r + x) ", "∀ {r : ℚ} {x : ℝ}, r ≠ 0 → Irrational x → Irrational (↑r + x) ", "∀ {x : ℝ} (r : ℚ), r ≠ 0 → Irrational x → Irrational (↑r + x) ", "∀ {r x : ℝ}, Rational r → Irrational x → r ≠ 0 → Irrational (r + x) ", "∀ {r : ℚ} {x : ℝ}, r ≠ 0 → Irrational x → Irrational (↑r + x) ", "∀ {r : ℚ} {x : ℝ}, r ≠ 0 → Irrational x → Irrational (↑r + x) ", "∀ {r : ℚ} {x : ℝ}, r ≠ 0 → Irrational x → Irrational (↑r + x) "]}
{"docString": "Prove that there is no rational number whose square is `12`.", "prompts": "[{\"theorem\": \"Irrational (Real.sqrt 2)\",\n  \"isProp\": true,\n  \"docString\": \"**Irrationality of the Square Root of 2** \"},\n {\"theorem\": \"∀ {r : ℝ}, Transcendental ℚ r → Irrational r\",\n  \"isProp\": true,\n  \"docString\": \"A transcendental real number is irrational. \"},\n {\"theorem\": \"Irrational goldenConj\",\n  \"isProp\": true,\n  \"docString\": \"The conjugate of the golden ratio is irrational. \"},\n {\"theorem\": \"∀ {n m : ℕ}, m * m < n → n < (m + 1) * (m + 1) → ¬∃ t, t * t = n\",\n  \"isProp\": true,\n  \"docString\": \"There are no perfect squares strictly between m² and (m+1)² \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [self : CanonicallyOrderedCommSemiring α] {a b : α}, a * b = 0 → a = 0 ∨ b = 0\",\n  \"isProp\": true,\n  \"docString\": \"No zero divisors. \"},\n {\"theorem\":\n  \"∀ {R : Type u_1} [inst : CommRing R] {a b c : R},\\n  (∀ (s : R), discrim a b c ≠ s ^ 2) → ∀ (x : R), a * x * x + b * x + c ≠ 0\",\n  \"isProp\": true,\n  \"docString\":\n  \"A quadratic has no root if its discriminant has no square root. \"},\n {\"theorem\": \"∀ {a : ℕ}, Real.sqrt ↑a ≤ ↑(Nat.sqrt a) + 1\",\n  \"isProp\": true,\n  \"docString\":\n  \"The real square root is at most the natural square root plus one \"},\n {\"theorem\": \"∀ {a : ℕ}, ↑(Nat.sqrt a) ≤ Real.sqrt ↑a\",\n  \"isProp\": true,\n  \"docString\": \"The natural square root is at most the real square root \"},\n {\"theorem\": \"∀ {x y : ℝ}, x < y → ∃ r, Irrational r ∧ x < r ∧ r < y\",\n  \"isProp\": true,\n  \"docString\":\n  \"There is an irrational number `r` between any two reals `x < r < y`. \"},\n {\"theorem\":\n  \"∀ {F : Type u_1} [inst : Field F] [inst_1 : Fintype F] [inst_2 : DecidableEq F] {a : F},\\n  a ≠ 0 → ↑(quadraticChar F) a ^ 2 = 1\",\n  \"isProp\": true,\n  \"docString\":\n  \"The square of the quadratic character on nonzero arguments is `1`. \"},\n {\"theorem\": \"∀ (ξ : ℚ), Set.Finite {q | |ξ - q| < 1 / ↑q.den ^ 2}\",\n  \"isProp\": true,\n  \"docString\":\n  \"A rational number has only finitely many good rational approximations. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} [inst : LinearOrderedField 𝕜] [inst_1 : TopologicalSpace 𝕜] [inst_2 : OrderTopology 𝕜]\\n  [inst_3 : Archimedean 𝕜], DenseRange Rat.cast\",\n  \"isProp\": true,\n  \"docString\":\n  \"Rational numbers are dense in a linear ordered archimedean field. \"},\n {\"theorem\": \"∀ (self : ℚ), self.den ≠ 0\",\n  \"isProp\": true,\n  \"docString\": \"The denominator is nonzero. \"},\n {\"theorem\":\n  \"∀ (q : ℚ), GeneralizedContinuedFraction.Terminates (GeneralizedContinuedFraction.of q)\",\n  \"isProp\": true,\n  \"docString\": \"The continued fraction of a rational number terminates. \"},\n {\"theorem\":\n  \"∀ (a b c d x y z w : ℕ),\\n  Int.natAbs (↑a * ↑x - ↑b * ↑y - ↑c * ↑z - ↑d * ↑w) ^ 2 + Int.natAbs (↑a * ↑y + ↑b * ↑x + ↑c * ↑w - ↑d * ↑z) ^ 2 +\\n        Int.natAbs (↑a * ↑z - ↑b * ↑w + ↑c * ↑x + ↑d * ↑y) ^ 2 +\\n      Int.natAbs (↑a * ↑w + ↑b * ↑z - ↑c * ↑y + ↑d * ↑x) ^ 2 =\\n    (a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2) * (x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2)\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Euler's four-square identity**, a version for natural numbers. \"},\n {\"theorem\":\n  \"∀ {K : Type u_1} {v : K} {n : ℕ} [inst : LinearOrderedField K] [inst_1 : FloorRing K],\\n  0 ≤ GeneralizedContinuedFraction.denominators (GeneralizedContinuedFraction.of v) n\",\n  \"isProp\": true,\n  \"docString\": \"Shows that all denominators are nonnegative. \"},\n {\"theorem\": \"Irrational goldenRatio\",\n  \"isProp\": true,\n  \"docString\": \"The golden ratio is irrational. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : LinearOrderedField α] {a : α}, 2 ≤ a → (1 - 1 / a)⁻¹ ≤ 2\",\n  \"isProp\": true,\n  \"docString\": \"An inequality involving `2`. \"},\n {\"theorem\": \"∀ {m n : ℕ}, Odd n → m ∣ n → m ≠ 2\",\n  \"isProp\": true,\n  \"docString\": \"`2` is not a factor of an odd natural number. \"},\n {\"theorem\":\n  \"∀ {a b x y u v : ℕ}, a = x ^ 2 + y ^ 2 → b = u ^ 2 + v ^ 2 → ∃ r s, a * b = r ^ 2 + s ^ 2\",\n  \"isProp\": true,\n  \"docString\":\n  \"The set of natural numbers that are sums of two squares is closed under multiplication. \"}]\n", "prompt_cons": "/-- **Irrationality of the Square Root of 2** -/\ntheorem Irrational (Real.sqrt 2) :=\n\n/-- A transcendental real number is irrational. -/\ntheorem ∀ {r : ℝ}, Transcendental ℚ r → Irrational r :=\n\n/-- The conjugate of the golden ratio is irrational. -/\ntheorem Irrational goldenConj :=\n\n/-- There are no perfect squares strictly between m² and (m+1)² -/\ntheorem ∀ {n m : ℕ}, m * m < n → n < (m + 1) * (m + 1) → ¬∃ t, t * t = n :=\n\n/-- No zero divisors. -/\ntheorem ∀ {α : Type u_1} [self : CanonicallyOrderedCommSemiring α] {a b : α}, a * b = 0 → a = 0 ∨ b = 0 :=\n\n/-- A quadratic has no root if its discriminant has no square root. -/\ntheorem ∀ {R : Type u_1} [inst : CommRing R] {a b c : R},\n  (∀ (s : R), discrim a b c ≠ s ^ 2) → ∀ (x : R), a * x * x + b * x + c ≠ 0 :=\n\n/-- The real square root is at most the natural square root plus one -/\ntheorem ∀ {a : ℕ}, Real.sqrt ↑a ≤ ↑(Nat.sqrt a) + 1 :=\n\n/-- The natural square root is at most the real square root -/\ntheorem ∀ {a : ℕ}, ↑(Nat.sqrt a) ≤ Real.sqrt ↑a :=\n\n/-- There is an irrational number `r` between any two reals `x < r < y`. -/\ntheorem ∀ {x y : ℝ}, x < y → ∃ r, Irrational r ∧ x < r ∧ r < y :=\n\n/-- The square of the quadratic character on nonzero arguments is `1`. -/\ntheorem ∀ {F : Type u_1} [inst : Field F] [inst_1 : Fintype F] [inst_2 : DecidableEq F] {a : F},\n  a ≠ 0 → ↑(quadraticChar F) a ^ 2 = 1 :=\n\n/-- A rational number has only finitely many good rational approximations. -/\ntheorem ∀ (ξ : ℚ), Set.Finite {q | |ξ - q| < 1 / ↑q.den ^ 2} :=\n\n/-- Rational numbers are dense in a linear ordered archimedean field. -/\ntheorem ∀ {𝕜 : Type u_1} [inst : LinearOrderedField 𝕜] [inst_1 : TopologicalSpace 𝕜] [inst_2 : OrderTopology 𝕜]\n  [inst_3 : Archimedean 𝕜], DenseRange Rat.cast :=\n\n/-- The denominator is nonzero. -/\ntheorem ∀ (self : ℚ), self.den ≠ 0 :=\n\n/-- The continued fraction of a rational number terminates. -/\ntheorem ∀ (q : ℚ), GeneralizedContinuedFraction.Terminates (GeneralizedContinuedFraction.of q) :=\n\n/-- **Euler's four-square identity**, a version for natural numbers. -/\ntheorem ∀ (a b c d x y z w : ℕ),\n  Int.natAbs (↑a * ↑x - ↑b * ↑y - ↑c * ↑z - ↑d * ↑w) ^ 2 + Int.natAbs (↑a * ↑y + ↑b * ↑x + ↑c * ↑w - ↑d * ↑z) ^ 2 +\n        Int.natAbs (↑a * ↑z - ↑b * ↑w + ↑c * ↑x + ↑d * ↑y) ^ 2 +\n      Int.natAbs (↑a * ↑w + ↑b * ↑z - ↑c * ↑y + ↑d * ↑x) ^ 2 =\n    (a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2) * (x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2) :=\n\n/-- Shows that all denominators are nonnegative. -/\ntheorem ∀ {K : Type u_1} {v : K} {n : ℕ} [inst : LinearOrderedField K] [inst_1 : FloorRing K],\n  0 ≤ GeneralizedContinuedFraction.denominators (GeneralizedContinuedFraction.of v) n :=\n\n/-- The golden ratio is irrational. -/\ntheorem Irrational goldenRatio :=\n\n/-- An inequality involving `2`. -/\ntheorem ∀ {α : Type u_1} [inst : LinearOrderedField α] {a : α}, 2 ≤ a → (1 - 1 / a)⁻¹ ≤ 2 :=\n\n/-- `2` is not a factor of an odd natural number. -/\ntheorem ∀ {m n : ℕ}, Odd n → m ∣ n → m ≠ 2 :=\n\n/-- The set of natural numbers that are sums of two squares is closed under multiplication. -/\ntheorem ∀ {a b x y u v : ℕ}, a = x ^ 2 + y ^ 2 → b = u ^ 2 + v ^ 2 → ∃ r s, a * b = r ^ 2 + s ^ 2 :=\n\n/-- Prove that there is no rational number whose square is `12`. -/\ntheorem", "choices": ["¬∃ (q : ℚ), q * q = 12 ", "¬∃ (q : ℚ), q ^ 2 = 12 ", "¬∃ {q : ℚ}, q * q = 12 ", "¬∃ q : ℚ, q ^ 2 = 12 ", "Irrational (Real.sqrt 12) ", "¬∃ (a b : ℤ), b ≠ 0 ∧ (a * a = 12 * (b * b)) ", "¬∃ q : ℚ, q * q = 12 ", "¬∃ (q : ℚ), q ^ 2 = 12 ", "Irrational (Real.sqrt 12) ", "¬∃ q : ℚ, q * q = 12 "]}
{"docString": "Let `A` be a nonempty set of real numbers which is bounded below. Let `-A` be the set of all numbers `-x`, where `x ∈ A`. Prove that `inf A = -sup (-A)`.", "prompts": "[{\"theorem\":\n  \"∀ {α : Type u_1} [inst : ConditionallyCompleteLattice α] {s : Set α},\\n  BddBelow s → BddAbove s → Set.Nonempty s → sInf s ≤ sSup s\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a set is bounded below and above, and nonempty, its infimum is less than or equal to\\nits supremum.\"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [self : CompleteSemilatticeInf α] (s : Set α) (a : α), (∀ (b : α), b ∈ s → a ≤ b) → a ≤ sInf s\",\n  \"isProp\": true,\n  \"docString\": \"Any lower bound is less than the set infimum. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_2} {E : Type u_1} [inst : NormedField 𝕜] [inst_1 : AddCommGroup E] [inst_2 : Module 𝕜 E]\\n  {p q : Seminorm 𝕜 E} {x : E}, BddBelow (Set.range fun u => ↑p u + ↑q (x - u))\",\n  \"isProp\": true,\n  \"docString\":\n  \"Auxiliary lemma to show that the infimum of seminorms is well-defined. \"},\n {\"theorem\":\n  \"∀ {S : Set ℝ} {a : ℝ}, (∀ (x : ℝ), x ∈ S → x ≤ a) → 0 ≤ a → sSup S ≤ a\",\n  \"isProp\": true,\n  \"docString\":\n  \"As `0` is the default value for `Real.sSup` of the empty set or sets which are not bounded above, it\\nsuffices to show that all elements of `S` are bounded by a nonnegative number to show that `sSup S`\\nis bounded by this number.\\n\"},\n {\"theorem\": \"∀ (S : Set ℝ), (∀ (x : ℝ), x ∈ S → 0 ≤ x) → 0 ≤ sInf S\",\n  \"isProp\": true,\n  \"docString\":\n  \"As `0` is the default value for `Real.sInf` of the empty set, it suffices to show that `S` is\\nbounded below by `0` to show that `0 ≤ sInf S`.\\n\"},\n {\"theorem\": \"∀ {ι : Sort u_1} {f : ι → ℝ}, (∀ (i : ι), 0 ≤ f i) → 0 ≤ iInf f\",\n  \"isProp\": true,\n  \"docString\":\n  \"As `0` is the default value for `Real.sInf` of the empty set, it suffices to show that `f i` is\\nbounded below by `0` to show that `0 ≤ iInf f`.\\n\"},\n {\"theorem\":\n  \"∀ {ι : Sort u_1} {f : ι → ℝ}, (∀ (i : ι), 0 ≤ f i) → 0 ≤ ⨆ (i : ι), f i\",\n  \"isProp\": true,\n  \"docString\":\n  \"As `0` is the default value for `Real.sSup` of the empty set or sets which are not bounded above, it\\nsuffices to show that `f i` is nonnegative to show that `0 ≤ ⨆ i, f i`.\\n\"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : ConditionallyCompleteLattice α] {s t : Set α},\\n  BddBelow s → BddBelow t → Set.Nonempty (s ∩ t) → sInf s ⊔ sInf t ≤ sInf (s ∩ t)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The infimum of an intersection of two sets is bounded below by the maximum of the\\ninfima of each set, if all sets are bounded below and nonempty.\"},\n {\"theorem\": \"∀ (S : Set ℝ), (∀ (x : ℝ), x ∈ S → 0 ≤ x) → 0 ≤ sSup S\",\n  \"isProp\": true,\n  \"docString\":\n  \"As `0` is the default value for `Real.sSup` of the empty set or sets which are not bounded above, it\\nsuffices to show that `S` is bounded below by `0` to show that `0 ≤ sSup S`.\\n\"},\n {\"theorem\": \"∀ (S : Set ℝ), (∀ (x : ℝ), x ∈ S → x ≤ 0) → sInf S ≤ 0\",\n  \"isProp\": true,\n  \"docString\":\n  \"As `0` is the default value for `Real.sInf` of the empty set or sets which are not bounded below, it\\nsuffices to show that `S` is bounded above by `0` to show that `sInf S ≤ 0`.\\n\"},\n {\"theorem\":\n  \"∀ {k : Type u_1} {V : Type u_2} {P : Type u_3} [inst : Ring k] [inst_1 : AddCommGroup V] [inst_2 : Module k V]\\n  [S : AddTorsor V P] {s1 s2 : AffineSubspace k P},\\n  Set.Nonempty ↑s1 →\\n    Set.Nonempty ↑s2 →\\n      ↑s1 ∩ ↑s2 = ∅ → AffineSubspace.direction s1 ⊔ AffineSubspace.direction s2 < AffineSubspace.direction (s1 ⊔ s2)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The sup of the directions of two nonempty affine subspaces with empty intersection is less than\\nthe direction of their sup. \"},\n {\"theorem\": \"∀ (S : Set ℝ), (∀ (x : ℝ), x ∈ S → x ≤ 0) → sSup S ≤ 0\",\n  \"isProp\": true,\n  \"docString\":\n  \"As `0` is the default value for `Real.sSup` of the empty set, it suffices to show that `S` is\\nbounded above by `0` to show that `sSup S ≤ 0`.\\n\"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : LinearOrder α] {A B : Finset α}, A ⊂ B → Finset.toColex A < Finset.toColex B\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `A ⊂ B`, then `A` is less than `B` in the colex order. Note the converse does not hold, as\\n`⊆` is not a linear order. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [self : ConditionallyCompleteLinearOrderedField α] (s : Set α) (a : α), BddAbove s → a ∈ s → a ≤ sSup s\",\n  \"isProp\": true,\n  \"docString\": \"`a ≤ sSup s` for all `a ∈ s`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : ConditionallyCompleteLinearOrder α] [inst_1 : TopologicalSpace α]\\n  [inst_2 : OrderTopology α] [inst_3 : ConditionallyCompleteLinearOrder β] [inst_4 : TopologicalSpace β]\\n  [inst_5 : OrderClosedTopology β] {f : α → β} {s : Set α},\\n  ContinuousAt f (sInf s) → Antitone f → Set.Nonempty s → BddBelow s → f (sInf s) = sSup (f '' s)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If an antitone function is continuous at the infimum of a nonempty bounded below set `s`,\\nthen it sends this infimum to the supremum of the image of `s`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : LinearOrderedAddCommGroup α], Filter.Tendsto abs Filter.atBot Filter.atTop\",\n  \"isProp\": true,\n  \"docString\": \"$\\\\lim_{x\\\\to-\\\\infty}|x|=+\\\\infty$ \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : ConditionallyCompleteLinearOrder α] [inst_1 : TopologicalSpace α]\\n  [inst_2 : OrderTopology α] [inst_3 : ConditionallyCompleteLinearOrder β] [inst_4 : TopologicalSpace β]\\n  [inst_5 : OrderClosedTopology β] {f : α → β} {s : Set α},\\n  ContinuousAt f (sInf s) → Monotone f → Set.Nonempty s → BddBelow s → f (sInf s) = sInf (f '' s)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a monotone function is continuous at the infimum of a nonempty bounded below set `s`,\\nthen it sends this infimum to the infimum of the image of `s`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : ConditionallyCompleteLattice α] {s : Set α} {a : α}, IsLeast s a → sInf s = a\",\n  \"isProp\": true,\n  \"docString\": \"A least element of a set is the infimum of this set. \"},\n {\"theorem\": \"∀ {a b : EReal}, -a ≤ b ↔ -b ≤ a\",\n  \"isProp\": true,\n  \"docString\": \"`-a ≤ b ↔ -b ≤ a` on `EReal`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : Preorder α] ⦃s t : Set α⦄, s ⊆ t → BddBelow t → BddBelow s\",\n  \"isProp\": true,\n  \"docString\": \"If `s ⊆ t` and `t` is bounded below, then so is `s`. \"}]\n", "prompt_cons": "/-- If a set is bounded below and above, and nonempty, its infimum is less than or equal to\nits supremum. -/\ntheorem ∀ {α : Type u_1} [inst : ConditionallyCompleteLattice α] {s : Set α},\n  BddBelow s → BddAbove s → Set.Nonempty s → sInf s ≤ sSup s :=\n\n/-- Any lower bound is less than the set infimum. -/\ntheorem ∀ {α : Type u_1} [self : CompleteSemilatticeInf α] (s : Set α) (a : α), (∀ (b : α), b ∈ s → a ≤ b) → a ≤ sInf s :=\n\n/-- Auxiliary lemma to show that the infimum of seminorms is well-defined. -/\ntheorem ∀ {𝕜 : Type u_2} {E : Type u_1} [inst : NormedField 𝕜] [inst_1 : AddCommGroup E] [inst_2 : Module 𝕜 E]\n  {p q : Seminorm 𝕜 E} {x : E}, BddBelow (Set.range fun u => ↑p u + ↑q (x - u)) :=\n\n/-- As `0` is the default value for `Real.sSup` of the empty set or sets which are not bounded above, it\nsuffices to show that all elements of `S` are bounded by a nonnegative number to show that `sSup S`\nis bounded by this number. -/\ntheorem ∀ {S : Set ℝ} {a : ℝ}, (∀ (x : ℝ), x ∈ S → x ≤ a) → 0 ≤ a → sSup S ≤ a :=\n\n/-- As `0` is the default value for `Real.sInf` of the empty set, it suffices to show that `S` is\nbounded below by `0` to show that `0 ≤ sInf S`. -/\ntheorem ∀ (S : Set ℝ), (∀ (x : ℝ), x ∈ S → 0 ≤ x) → 0 ≤ sInf S :=\n\n/-- As `0` is the default value for `Real.sInf` of the empty set, it suffices to show that `f i` is\nbounded below by `0` to show that `0 ≤ iInf f`. -/\ntheorem ∀ {ι : Sort u_1} {f : ι → ℝ}, (∀ (i : ι), 0 ≤ f i) → 0 ≤ iInf f :=\n\n/-- As `0` is the default value for `Real.sSup` of the empty set or sets which are not bounded above, it\nsuffices to show that `f i` is nonnegative to show that `0 ≤ ⨆ i, f i`. -/\ntheorem ∀ {ι : Sort u_1} {f : ι → ℝ}, (∀ (i : ι), 0 ≤ f i) → 0 ≤ ⨆ (i : ι), f i :=\n\n/-- The infimum of an intersection of two sets is bounded below by the maximum of the\ninfima of each set, if all sets are bounded below and nonempty. -/\ntheorem ∀ {α : Type u_1} [inst : ConditionallyCompleteLattice α] {s t : Set α},\n  BddBelow s → BddBelow t → Set.Nonempty (s ∩ t) → sInf s ⊔ sInf t ≤ sInf (s ∩ t) :=\n\n/-- As `0` is the default value for `Real.sSup` of the empty set or sets which are not bounded above, it\nsuffices to show that `S` is bounded below by `0` to show that `0 ≤ sSup S`. -/\ntheorem ∀ (S : Set ℝ), (∀ (x : ℝ), x ∈ S → 0 ≤ x) → 0 ≤ sSup S :=\n\n/-- As `0` is the default value for `Real.sInf` of the empty set or sets which are not bounded below, it\nsuffices to show that `S` is bounded above by `0` to show that `sInf S ≤ 0`. -/\ntheorem ∀ (S : Set ℝ), (∀ (x : ℝ), x ∈ S → x ≤ 0) → sInf S ≤ 0 :=\n\n/-- The sup of the directions of two nonempty affine subspaces with empty intersection is less than\nthe direction of their sup. -/\ntheorem ∀ {k : Type u_1} {V : Type u_2} {P : Type u_3} [inst : Ring k] [inst_1 : AddCommGroup V] [inst_2 : Module k V]\n  [S : AddTorsor V P] {s1 s2 : AffineSubspace k P},\n  Set.Nonempty ↑s1 →\n    Set.Nonempty ↑s2 →\n      ↑s1 ∩ ↑s2 = ∅ → AffineSubspace.direction s1 ⊔ AffineSubspace.direction s2 < AffineSubspace.direction (s1 ⊔ s2) :=\n\n/-- As `0` is the default value for `Real.sSup` of the empty set, it suffices to show that `S` is\nbounded above by `0` to show that `sSup S ≤ 0`. -/\ntheorem ∀ (S : Set ℝ), (∀ (x : ℝ), x ∈ S → x ≤ 0) → sSup S ≤ 0 :=\n\n/-- If `A ⊂ B`, then `A` is less than `B` in the colex order. Note the converse does not hold, as\n`⊆` is not a linear order. -/\ntheorem ∀ {α : Type u_1} [inst : LinearOrder α] {A B : Finset α}, A ⊂ B → Finset.toColex A < Finset.toColex B :=\n\n/-- `a ≤ sSup s` for all `a ∈ s`. -/\ntheorem ∀ {α : Type u_1} [self : ConditionallyCompleteLinearOrderedField α] (s : Set α) (a : α), BddAbove s → a ∈ s → a ≤ sSup s :=\n\n/-- If an antitone function is continuous at the infimum of a nonempty bounded below set `s`,\nthen it sends this infimum to the supremum of the image of `s`. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : ConditionallyCompleteLinearOrder α] [inst_1 : TopologicalSpace α]\n  [inst_2 : OrderTopology α] [inst_3 : ConditionallyCompleteLinearOrder β] [inst_4 : TopologicalSpace β]\n  [inst_5 : OrderClosedTopology β] {f : α → β} {s : Set α},\n  ContinuousAt f (sInf s) → Antitone f → Set.Nonempty s → BddBelow s → f (sInf s) = sSup (f '' s) :=\n\n/-- $\\lim_{x\\to-\\infty}|x|=+\\infty$ -/\ntheorem ∀ {α : Type u_1} [inst : LinearOrderedAddCommGroup α], Filter.Tendsto abs Filter.atBot Filter.atTop :=\n\n/-- If a monotone function is continuous at the infimum of a nonempty bounded below set `s`,\nthen it sends this infimum to the infimum of the image of `s`. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : ConditionallyCompleteLinearOrder α] [inst_1 : TopologicalSpace α]\n  [inst_2 : OrderTopology α] [inst_3 : ConditionallyCompleteLinearOrder β] [inst_4 : TopologicalSpace β]\n  [inst_5 : OrderClosedTopology β] {f : α → β} {s : Set α},\n  ContinuousAt f (sInf s) → Monotone f → Set.Nonempty s → BddBelow s → f (sInf s) = sInf (f '' s) :=\n\n/-- A least element of a set is the infimum of this set. -/\ntheorem ∀ {α : Type u_1} [inst : ConditionallyCompleteLattice α] {s : Set α} {a : α}, IsLeast s a → sInf s = a :=\n\n/-- `-a ≤ b ↔ -b ≤ a` on `EReal`. -/\ntheorem ∀ {a b : EReal}, -a ≤ b ↔ -b ≤ a :=\n\n/-- If `s ⊆ t` and `t` is bounded below, then so is `s`. -/\ntheorem ∀ {α : Type u} [inst : Preorder α] ⦃s t : Set α⦄, s ⊆ t → BddBelow t → BddBelow s :=\n\n/-- Let `A` be a nonempty set of real numbers which is bounded below. Let `-A` be the set of all numbers `-x`, where `x ∈ A`. Prove that `inf A = -sup (-A)`. -/\ntheorem", "choices": ["∀ (A : Set ℝ), Set.Nonempty A → BddBelow A → sInf A = -sSup ((λ x, -x) '' A) ", "∀ (A : Set ℝ), BddBelow A → Set.Nonempty A → sInf A = -sSup (HasNegPart.neg ⁻¹' A) ", "∀ (A : Set ℝ), Set.Nonempty A → BddBelow A → sInf A = -sSup (-A) ", "∀ (A : Set ℝ), Set.Nonempty A → BddBelow A → sInf A = -sSup (Neg.neg '' A) ", "∀ {A : Set ℝ}, Set.Nonempty A → BddBelow A → sInf A = -sSup (-A) ", "∀ (A : Set ℝ), Set.Nonempty A → BddBelow A → sInf A = -sSup ((λ x, -x) '' A) ", "∀ (A : Set ℝ), Set.Nonempty A → BddBelow A → sInf A = -sSup (Neg.neg '' A) ", "∀ {A : Set ℝ}, Set.Nonempty A → BddBelow A → sInf A = -sSup (Neg.neg '' A) ", "∀ (A : Set ℝ), Set.Nonempty A → BddBelow A → sInf A = -sSup (Set.Image (λ (x : ℝ), -x) A) ", "forall {A : Set ℝ} (h₁ : A.nonempty) (h₂ : BddBelow A),\n  sInf A = -sSup {x | ∃ y ∈ A, x = -y} "]}
{"docString": "If `z` is a complex number, prove that there exists an `r ≥ 0` and a complex number `w` with `| w | = 1` such that `z = rw`.", "prompts": "[{\"theorem\":\n  \"∀ {K : Type u_1} [inst : IsROrC K] (z : K),\\n  List.TFAE [↑(starRingEnd K) z = z, ∃ r, ↑r = z, ↑(↑IsROrC.re z) = z, ↑IsROrC.im z = 0]\",\n  \"isProp\": true,\n  \"docString\":\n  \"There are several equivalent ways to say that a number `z` is in fact a real number. \"},\n {\"theorem\": \"∀ (z : ℂ), ↑z.re = (z + ↑(starRingEnd ℂ) z) / 2\",\n  \"isProp\": true,\n  \"docString\":\n  \"A complex number `z` plus its conjugate `conj z` is `2` times its real part. \"},\n {\"theorem\":\n  \"∀ {z : UpperHalfPlane}, z ∈ ModularGroup.fdo → ∀ (n : ℤ), 1 < ↑Complex.normSq ↑(ModularGroup.T ^ n • z)\",\n  \"isProp\": true,\n  \"docString\": \"If `z ∈ 𝒟ᵒ`, and `n : ℤ`, then `|z + n| > 1`. \"},\n {\"theorem\":\n  \"∀ {z : UpperHalfPlane}, 1 < ↑Complex.normSq ↑z → ↑Complex.normSq ↑(ModularGroup.S • z) < 1\",\n  \"isProp\": true,\n  \"docString\": \"If `1 < |z|`, then `|S • z| < 1`. \"},\n {\"theorem\": \"∀ (z : ℂ), ↑z.im = (z - ↑(starRingEnd ℂ) z) / (2 * Complex.I)\",\n  \"isProp\": true,\n  \"docString\":\n  \"A complex number `z` minus its conjugate `conj z` is `2i` times its imaginary part. \"},\n {\"theorem\":\n  \"∀ {n : ℤ}, n ≠ -1 → ∀ (c w : ℂ) (R : ℝ), (∮ (z : ℂ) in C(c, R), (z - w) ^ n) = 0\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `n ≠ -1` is an integer number, then the integral of `(z - w) ^ n` over the circle equals\\nzero. \"},\n {\"theorem\":\n  \"∀ {p : ℂ × ℂ}, 0 < p.fst.re ∨ p.fst.im ≠ 0 → ContinuousAt (fun x => x.fst ^ x.snd) p\",\n  \"isProp\": true,\n  \"docString\":\n  \"The function `z ^ w` is continuous in `(z, w)` provided that `z` does not belong to the interval\\n`(-∞, 0]` on the real line. See also `Complex.continuousAt_cpow_zero_of_re_pos` for a version that\\nworks for `z = 0` but assumes `0 < re w`. \"},\n {\"theorem\":\n  \"Filter.Tendsto cexp (Filter.comap Complex.re Filter.atBot) (nhds 0)\",\n  \"isProp\": true,\n  \"docString\": \"`Complex.exp z → 0` as `Complex.re z → -∞`.\"},\n {\"theorem\":\n  \"∀ {R : Type u_1} [inst : DivisionRing R] [inst_1 : CharZero R] {p r : R} {z : ℤ},\\n  z ≠ 0 → (z • r ∈ AddSubgroup.zmultiples p ↔ ∃ k, r - ↑k • (p / ↑z) ∈ AddSubgroup.zmultiples p)\",\n  \"isProp\": true,\n  \"docString\":\n  \"`z • r` is a multiple of `p` iff `r` is `pk/z` above a multiple of `p`, where `0 ≤ k < |z|`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_3} {E : Type u_1} {F : Type u_2} [inst : NontriviallyNormedField 𝕜] [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F]\\n  (p : FormalMultilinearSeries 𝕜 E F) {r : NNReal},\\n  r ≠ 0 →\\n    ∀ {a : ℝ},\\n      a ∈ Set.Ioo (-1) 1 →\\n        ((fun n => ‖p n‖ * ↑r ^ n) =O[Filter.atTop] fun x => a ^ x) → ↑r < FormalMultilinearSeries.radius p\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `r ≠ 0` and `‖pₙ‖ rⁿ = O(aⁿ)` for some `-1 < a < 1`, then `r < p.radius`. \"},\n {\"theorem\": \"∀ {x y : ℝ}, x < y → ∃ r, Irrational r ∧ x < r ∧ r < y\",\n  \"isProp\": true,\n  \"docString\":\n  \"There is an irrational number `r` between any two reals `x < r < y`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} [inst : NormedField 𝕜] [inst_1 : CompleteSpace 𝕜] {r : 𝕜},\\n  ‖r‖ < 1 → ∑' (n : ℕ), ↑n * r ^ n = r / (1 - r) ^ 2\",\n  \"isProp\": true,\n  \"docString\": \"If `‖r‖ < 1`, then `∑' n : ℕ, n * r ^ n = r / (1 - r) ^ 2`. \"},\n {\"theorem\":\n  \"∀ {c w : ℂ} {R : ℝ}, w ∈ Metric.ball c R → (∮ (z : ℂ) in C(c, R), (z - w)⁻¹) = 2 * ↑Real.pi * Complex.I\",\n  \"isProp\": true,\n  \"docString\":\n  \"Integral $\\\\oint_{|z-c|=R} \\\\frac{dz}{z-w} = 2πi$ whenever $|w-c| < R$. \"},\n {\"theorem\": \"riemannZeta 0 = -1 / 2\",\n  \"isProp\": true,\n  \"docString\": \"We have `ζ(0) = -1 / 2`. \"},\n {\"theorem\":\n  \"∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {c : ℂ} {r R : ℝ},\\n  0 < r →\\n    r ≤ R →\\n      ∀ {f : ℂ → E} {s : Set ℂ},\\n        Set.Countable s →\\n          ContinuousOn f (Metric.closedBall c R \\\\ Metric.ball c r) →\\n            (∀ (z : ℂ), z ∈ (Metric.ball c R \\\\ Metric.closedBall c r) \\\\ s → DifferentiableAt ℂ f z) →\\n              (∮ (z : ℂ) in C(c, R), (z - c)⁻¹ • f z) = ∮ (z : ℂ) in C(c, r), (z - c)⁻¹ • f z\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f : ℂ → E` is continuous the closed annulus `r ≤ ‖z - c‖ ≤ R`, `0 < r ≤ R`, and is complex\\ndifferentiable at all but countably many points of its interior, then the integrals of\\n`f z / (z - c)` (formally, `(z - c)⁻¹ • f z`) over the circles `‖z - c‖ = r` and `‖z - c‖ = R` are\\nequal to each other. \"},\n {\"theorem\":\n  \"∀ {c w : ℂ} {R : ℝ} {n : ℤ}, CircleIntegrable (fun z => (z - w) ^ n) c R ↔ R = 0 ∨ 0 ≤ n ∨ ¬w ∈ Metric.sphere c |R|\",\n  \"isProp\": true,\n  \"docString\":\n  \"The function `λ z, (z - w) ^ n`, `n : ℤ`, is circle integrable on the circle with center `c` and\\nradius `|R|` if and only if `R = 0` or `0 ≤ n`, or `w` does not belong to this circle. \"},\n {\"theorem\": \"∀ {p n : ℕ}, padicValRat p ↑n = ↑(padicValNat p n)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The `p`-adic value of an integer `z ≠ 0` is its `p`-adic value as a rational. \"},\n {\"theorem\":\n  \"∀ {R : Type u_1} [inst : StrictOrderedCommSemiring R] {M : Type u_2} [inst_1 : AddCommMonoid M] [inst_2 : Module R M]\\n  {x y : M}, SameRay R x y → x ≠ 0 → y ≠ 0 → ∃ r₁ r₂, 0 < r₁ ∧ 0 < r₂ ∧ r₁ • x = r₂ • y\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `x` and `y` are nonzero vectors on the same ray, then there exist positive numbers `r₁ r₂`\\nsuch that `r₁ • x = r₂ • y`. \"},\n {\"theorem\":\n  \"∀ {a b : ℝ},\\n  a ≤ 0 →\\n    ∀ {z : ℂ},\\n      |z.im| ≤ b →\\n        b ≤ Real.pi / 2 → ↑Complex.abs (cexp (↑a * (cexp z + cexp (-z)))) ≤ rexp (a * Real.cos b * rexp |z.re|)\",\n  \"isProp\": true,\n  \"docString\":\n  \"A supporting lemma for the **Phragmen-Lindelöf principle** in a horizontal strip. If `z : ℂ`\\nbelongs to a horizontal strip `|Complex.im z| ≤ b`, `b ≤ π / 2`, and `a ≤ 0`, then\\n$$\\\\left|exp^{a\\\\left(e^{z}+e^{-z}\\\\right)}\\\\right| \\\\le e^{a\\\\cos b \\\\exp^{|re z|}}.$$\\n\"},\n {\"theorem\": \"∀ (s : ℂ), riemannCompletedZeta (1 - s) = riemannCompletedZeta s\",\n  \"isProp\": true,\n  \"docString\":\n  \"Riemann zeta functional equation, formulated for `Λ`: for any complex `s` we have\\n`Λ (1 - s) = Λ s`. \"}]\n", "prompt_cons": "/-- There are several equivalent ways to say that a number `z` is in fact a real number. -/\ntheorem ∀ {K : Type u_1} [inst : IsROrC K] (z : K),\n  List.TFAE [↑(starRingEnd K) z = z, ∃ r, ↑r = z, ↑(↑IsROrC.re z) = z, ↑IsROrC.im z = 0] :=\n\n/-- A complex number `z` plus its conjugate `conj z` is `2` times its real part. -/\ntheorem ∀ (z : ℂ), ↑z.re = (z + ↑(starRingEnd ℂ) z) / 2 :=\n\n/-- If `z ∈ 𝒟ᵒ`, and `n : ℤ`, then `|z + n| > 1`. -/\ntheorem ∀ {z : UpperHalfPlane}, z ∈ ModularGroup.fdo → ∀ (n : ℤ), 1 < ↑Complex.normSq ↑(ModularGroup.T ^ n • z) :=\n\n/-- If `1 < |z|`, then `|S • z| < 1`. -/\ntheorem ∀ {z : UpperHalfPlane}, 1 < ↑Complex.normSq ↑z → ↑Complex.normSq ↑(ModularGroup.S • z) < 1 :=\n\n/-- A complex number `z` minus its conjugate `conj z` is `2i` times its imaginary part. -/\ntheorem ∀ (z : ℂ), ↑z.im = (z - ↑(starRingEnd ℂ) z) / (2 * Complex.I) :=\n\n/-- If `n ≠ -1` is an integer number, then the integral of `(z - w) ^ n` over the circle equals\nzero. -/\ntheorem ∀ {n : ℤ}, n ≠ -1 → ∀ (c w : ℂ) (R : ℝ), (∮ (z : ℂ) in C(c, R), (z - w) ^ n) = 0 :=\n\n/-- The function `z ^ w` is continuous in `(z, w)` provided that `z` does not belong to the interval\n`(-∞, 0]` on the real line. See also `Complex.continuousAt_cpow_zero_of_re_pos` for a version that\nworks for `z = 0` but assumes `0 < re w`. -/\ntheorem ∀ {p : ℂ × ℂ}, 0 < p.fst.re ∨ p.fst.im ≠ 0 → ContinuousAt (fun x => x.fst ^ x.snd) p :=\n\n/-- `Complex.exp z → 0` as `Complex.re z → -∞`. -/\ntheorem Filter.Tendsto cexp (Filter.comap Complex.re Filter.atBot) (nhds 0) :=\n\n/-- `z • r` is a multiple of `p` iff `r` is `pk/z` above a multiple of `p`, where `0 ≤ k < |z|`. -/\ntheorem ∀ {R : Type u_1} [inst : DivisionRing R] [inst_1 : CharZero R] {p r : R} {z : ℤ},\n  z ≠ 0 → (z • r ∈ AddSubgroup.zmultiples p ↔ ∃ k, r - ↑k • (p / ↑z) ∈ AddSubgroup.zmultiples p) :=\n\n/-- If `r ≠ 0` and `‖pₙ‖ rⁿ = O(aⁿ)` for some `-1 < a < 1`, then `r < p.radius`. -/\ntheorem ∀ {𝕜 : Type u_3} {E : Type u_1} {F : Type u_2} [inst : NontriviallyNormedField 𝕜] [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F]\n  (p : FormalMultilinearSeries 𝕜 E F) {r : NNReal},\n  r ≠ 0 →\n    ∀ {a : ℝ},\n      a ∈ Set.Ioo (-1) 1 →\n        ((fun n => ‖p n‖ * ↑r ^ n) =O[Filter.atTop] fun x => a ^ x) → ↑r < FormalMultilinearSeries.radius p :=\n\n/-- There is an irrational number `r` between any two reals `x < r < y`. -/\ntheorem ∀ {x y : ℝ}, x < y → ∃ r, Irrational r ∧ x < r ∧ r < y :=\n\n/-- If `‖r‖ < 1`, then `∑' n : ℕ, n * r ^ n = r / (1 - r) ^ 2`. -/\ntheorem ∀ {𝕜 : Type u_1} [inst : NormedField 𝕜] [inst_1 : CompleteSpace 𝕜] {r : 𝕜},\n  ‖r‖ < 1 → ∑' (n : ℕ), ↑n * r ^ n = r / (1 - r) ^ 2 :=\n\n/-- Integral $\\oint_{|z-c|=R} \\frac{dz}{z-w} = 2πi$ whenever $|w-c| < R$. -/\ntheorem ∀ {c w : ℂ} {R : ℝ}, w ∈ Metric.ball c R → (∮ (z : ℂ) in C(c, R), (z - w)⁻¹) = 2 * ↑Real.pi * Complex.I :=\n\n/-- We have `ζ(0) = -1 / 2`. -/\ntheorem riemannZeta 0 = -1 / 2 :=\n\n/-- If `f : ℂ → E` is continuous the closed annulus `r ≤ ‖z - c‖ ≤ R`, `0 < r ≤ R`, and is complex\ndifferentiable at all but countably many points of its interior, then the integrals of\n`f z / (z - c)` (formally, `(z - c)⁻¹ • f z`) over the circles `‖z - c‖ = r` and `‖z - c‖ = R` are\nequal to each other. -/\ntheorem ∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {c : ℂ} {r R : ℝ},\n  0 < r →\n    r ≤ R →\n      ∀ {f : ℂ → E} {s : Set ℂ},\n        Set.Countable s →\n          ContinuousOn f (Metric.closedBall c R \\ Metric.ball c r) →\n            (∀ (z : ℂ), z ∈ (Metric.ball c R \\ Metric.closedBall c r) \\ s → DifferentiableAt ℂ f z) →\n              (∮ (z : ℂ) in C(c, R), (z - c)⁻¹ • f z) = ∮ (z : ℂ) in C(c, r), (z - c)⁻¹ • f z :=\n\n/-- The function `λ z, (z - w) ^ n`, `n : ℤ`, is circle integrable on the circle with center `c` and\nradius `|R|` if and only if `R = 0` or `0 ≤ n`, or `w` does not belong to this circle. -/\ntheorem ∀ {c w : ℂ} {R : ℝ} {n : ℤ}, CircleIntegrable (fun z => (z - w) ^ n) c R ↔ R = 0 ∨ 0 ≤ n ∨ ¬w ∈ Metric.sphere c |R| :=\n\n/-- The `p`-adic value of an integer `z ≠ 0` is its `p`-adic value as a rational. -/\ntheorem ∀ {p n : ℕ}, padicValRat p ↑n = ↑(padicValNat p n) :=\n\n/-- If `x` and `y` are nonzero vectors on the same ray, then there exist positive numbers `r₁ r₂`\nsuch that `r₁ • x = r₂ • y`. -/\ntheorem ∀ {R : Type u_1} [inst : StrictOrderedCommSemiring R] {M : Type u_2} [inst_1 : AddCommMonoid M] [inst_2 : Module R M]\n  {x y : M}, SameRay R x y → x ≠ 0 → y ≠ 0 → ∃ r₁ r₂, 0 < r₁ ∧ 0 < r₂ ∧ r₁ • x = r₂ • y :=\n\n/-- A supporting lemma for the **Phragmen-Lindelöf principle** in a horizontal strip. If `z : ℂ`\nbelongs to a horizontal strip `|Complex.im z| ≤ b`, `b ≤ π / 2`, and `a ≤ 0`, then\n$$\\left|exp^{a\\left(e^{z}+e^{-z}\\right)}\\right| \\le e^{a\\cos b \\exp^{|re z|}}.$$ -/\ntheorem ∀ {a b : ℝ},\n  a ≤ 0 →\n    ∀ {z : ℂ},\n      |z.im| ≤ b →\n        b ≤ Real.pi / 2 → ↑Complex.abs (cexp (↑a * (cexp z + cexp (-z)))) ≤ rexp (a * Real.cos b * rexp |z.re|) :=\n\n/-- Riemann zeta functional equation, formulated for `Λ`: for any complex `s` we have\n`Λ (1 - s) = Λ s`. -/\ntheorem ∀ (s : ℂ), riemannCompletedZeta (1 - s) = riemannCompletedZeta s :=\n\n/-- If `z` is a complex number, prove that there exists an `r ≥ 0` and a complex number `w` with `| w | = 1` such that `z = rw`. -/\ntheorem", "choices": ["∀ (z : ℂ), ∃ (r : ℝ) (w : ℂ), 0 ≤ r ∧ w.abs = 1 ∧ z = r • w ", "∀ (z : ℂ), ∃ (r : ℝ) (w : ℂ), 0 ≤ r ∧ ↑Complex.abs w = 1 ∧ z = ↑r * w ", "∀ (z : ℂ), ∃ r w, 0 ≤ r ∧ ↑Complex.abs w = 1 ∧ z = r * w ", "∀ (z : ℂ), ∃ r w, 0 ≤ r ∧ Complex.abs w = 1 ∧ z = r * w ", "∀ (z : ℂ), ∃ r w, r ≥ 0 ∧ ↑Complex.abs w = 1 ∧ z = r * w ", "∀ (z : ℂ), ∃ r w, 0 ≤ r ∧ ↑Complex.abs w = 1 ∧ z = r * w ", "∀ (z : ℂ), ∃ (r : ℝ) (w : ℂ), r ≥ 0 ∧ ↑Complex.abs w = 1 ∧ z = r • w ", "∀ (z : ℂ), ∃ r : ℝ, ∃ w : ℂ, 0 ≤ r ∧ abs w = 1 ∧ z = r * w ", "∀ (z : ℂ), ∃ (r : ℝ) (w : ℂ), 0 ≤ r ∧ ∥w∥ = 1 ∧ z = r • w ", "∀ (z : ℂ), ∃ (r : ℝ) (w : ℂ), r ≥ 0 ∧ ↑Complex.abs w = 1 ∧ z = r • w "]}
{"docString": "If `x, y` are complex, prove that `||x|-|y|| ≤ |x-y|`.", "prompts": "[{\"theorem\":\n  \"∀ {α : Type u_1} [inst : Preorder α] {s : Set α},\\n  Set.OrdConnected s ↔ ∀ (x : α), x ∈ s → ∀ (y : α), y ∈ s → x ≤ y → Set.Icc x y ⊆ s\",\n  \"isProp\": true,\n  \"docString\": \"It suffices to prove `[[x, y]] ⊆ s` for `x y ∈ s`, `x ≤ y`. \"},\n {\"theorem\": \"∀ {α : Type u} [inst : Preorder α] {x y : α}, x = y → y ≤ x\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `x = y` then `y ≤ x`. Note: this lemma uses `y ≤ x` instead of `x ≥ y`, because `le` is used\\nalmost exclusively in mathlib. \"},\n {\"theorem\": \"∀ {a b : EReal}, -a ≤ b ↔ -b ≤ a\",\n  \"isProp\": true,\n  \"docString\": \"`-a ≤ b ↔ -b ≤ a` on `EReal`. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] [inst_2 : StrictConvexSpace ℝ E] {x y : E},\\n  ¬SameRay ℝ x y → ‖x + y‖ < ‖x‖ + ‖y‖\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a strictly convex space, if `x` and `y` are not in the same ray, then `‖x + y‖ < ‖x‖ + ‖y‖`.\\n\"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : OrderedAddCommMonoid α] [self : Archimedean α] (x : α) {y : α}, 0 < y → ∃ n, x ≤ n • y\",\n  \"isProp\": true,\n  \"docString\":\n  \"For any two elements `x`, `y` such that `0 < y`, there exists a natural number `n`\\nsuch that `x ≤ n • y`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : PseudoMetricSpace α] {s : Set α} {f : α → ℝ} (K : ℝ),\\n  (∀ (x : α), x ∈ s → ∀ (y : α), y ∈ s → f x ≤ f y + K * dist x y) → LipschitzOnWith (Real.toNNReal K) f s\",\n  \"isProp\": true,\n  \"docString\":\n  \"For functions to `ℝ`, it suffices to prove `f x ≤ f y + K * dist x y`; this version\\ndoesn't assume `0≤K`. \"},\n {\"theorem\":\n  \"∀ {F : Type u_1} [inst : NormedAddCommGroup F] [inst_1 : InnerProductSpace ℝ F] (x y : F),\\n  inner (x - y) (x - y) = inner x x - 2 * inner x y + inner y y\",\n  \"isProp\": true,\n  \"docString\": \"Expand `⟪x - y, x - y⟫_ℝ` \"},\n {\"theorem\": \"∀ {x y : ℝ}, Irrational (x + y) → Irrational x ∨ Irrational y\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `x + y` is irrational, then at least one of `x` and `y` is irrational. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : PseudoMetricSpace α] {f : α → ℝ} (K : NNReal),\\n  (∀ (x y : α), f x ≤ f y + ↑K * dist x y) → LipschitzWith K f\",\n  \"isProp\": true,\n  \"docString\":\n  \"For functions to `ℝ`, it suffices to prove `f x ≤ f y + K * dist x y`; this version\\nassumes `0≤K`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {E : Type u_2} [inst : SeminormedGroup E] {l : Filter α} {f : α → E},\\n  Filter.Tendsto (fun y => ‖f y‖) l Filter.atTop → ∀ (x : E), ∀ᶠ (y : α) in l, f y ≠ x\",\n  \"isProp\": true,\n  \"docString\": \"If `‖y‖ → ∞`, then we can assume `y ≠ x` for any fixed `x`. \"},\n {\"theorem\":\n  \"∀ {K : Type u_1} {v : K} {n : ℕ} [inst : LinearOrderedField K] [inst_1 : FloorRing K],\\n  ¬GeneralizedContinuedFraction.TerminatedAt (GeneralizedContinuedFraction.of v) n →\\n    |v - GeneralizedContinuedFraction.convergents (GeneralizedContinuedFraction.of v) n| ≤\\n      1 /\\n        (GeneralizedContinuedFraction.denominators (GeneralizedContinuedFraction.of v) n *\\n          GeneralizedContinuedFraction.denominators (GeneralizedContinuedFraction.of v) (n + 1))\",\n  \"isProp\": true,\n  \"docString\": \"Shows that `|v - Aₙ / Bₙ| ≤ 1 / (Bₙ * Bₙ₊₁)`. \"},\n {\"theorem\": \"∀ {a b : EReal}, a ≤ -b → b ≤ -a\",\n  \"isProp\": true,\n  \"docString\": \"`a ≤ -b → b ≤ -a` on ereal \"},\n {\"theorem\":\n  \"∀ {z : UpperHalfPlane}, 1 < ↑Complex.normSq ↑z → ↑Complex.normSq ↑(ModularGroup.S • z) < 1\",\n  \"isProp\": true,\n  \"docString\": \"If `1 < |z|`, then `|S • z| < 1`. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] [inst_2 : StrictConvexSpace ℝ E] {x y : E}\\n  {a b r : ℝ}, ‖x‖ ≤ r → ‖y‖ ≤ r → x ≠ y → 0 < a → 0 < b → a + b = 1 → ‖a • x + b • y‖ < r\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `x` and `y` are two distinct vectors of norm at most `r`, then a convex combination of `x`\\nand `y` with positive coefficients has norm strictly less than `r`. \"},\n {\"theorem\":\n  \"∀ {y : ℝ}, 0 < y → Filter.Tendsto (fun x => x ^ y) Filter.atTop Filter.atTop\",\n  \"isProp\": true,\n  \"docString\":\n  \"The function `x ^ y` tends to `+∞` at `+∞` for any positive real `y`. \"},\n {\"theorem\":\n  \"∀ {y : ℝ}, 0 < y → Filter.Tendsto (fun x => x ^ (-y)) Filter.atTop (nhds 0)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The function `x ^ (-y)` tends to `0` at `+∞` for any positive real `y`. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : SeminormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] {x y : E},\\n  SameRay ℝ x y → ‖x + y‖ = ‖x‖ + ‖y‖\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `x` and `y` are on the same ray, then the triangle inequality becomes the equality: the norm\\nof `x + y` is the sum of the norms of `x` and `y`. The converse is true for a strictly convex\\nspace. \"},\n {\"theorem\":\n  \"∀ (a b : NNReal) {p q : ℝ}, Real.IsConjugateExponent p q → a * b ≤ a ^ p / Real.toNNReal p + b ^ q / Real.toNNReal q\",\n  \"isProp\": true,\n  \"docString\":\n  \"Young's inequality, `ℝ≥0` version with real conjugate exponents. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] [inst_2 : StrictConvexSpace ℝ E] {x y z : E}\\n  {a b r : ℝ},\\n  x ∈ Metric.closedBall z r →\\n    y ∈ Metric.closedBall z r → x ≠ y → 0 < a → 0 < b → a + b = 1 → a • x + b • y ∈ Metric.ball z r\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `x ≠ y` belong to the same closed ball, then a convex combination of `x` and `y` with\\npositive coefficients belongs to the corresponding open ball. \"},\n {\"theorem\":\n  \"∀ {R : Type u_1} [inst : StrictOrderedCommSemiring R] {M : Type u_2} [inst_1 : AddCommMonoid M] [inst_2 : Module R M]\\n  {x y : M}, SameRay R x y → x ≠ 0 → y ≠ 0 → ∃ r₁ r₂, 0 < r₁ ∧ 0 < r₂ ∧ r₁ • x = r₂ • y\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `x` and `y` are nonzero vectors on the same ray, then there exist positive numbers `r₁ r₂`\\nsuch that `r₁ • x = r₂ • y`. \"}]\n", "prompt_cons": "/-- It suffices to prove `[[x, y]] ⊆ s` for `x y ∈ s`, `x ≤ y`. -/\ntheorem ∀ {α : Type u_1} [inst : Preorder α] {s : Set α},\n  Set.OrdConnected s ↔ ∀ (x : α), x ∈ s → ∀ (y : α), y ∈ s → x ≤ y → Set.Icc x y ⊆ s :=\n\n/-- If `x = y` then `y ≤ x`. Note: this lemma uses `y ≤ x` instead of `x ≥ y`, because `le` is used\nalmost exclusively in mathlib. -/\ntheorem ∀ {α : Type u} [inst : Preorder α] {x y : α}, x = y → y ≤ x :=\n\n/-- `-a ≤ b ↔ -b ≤ a` on `EReal`. -/\ntheorem ∀ {a b : EReal}, -a ≤ b ↔ -b ≤ a :=\n\n/-- In a strictly convex space, if `x` and `y` are not in the same ray, then `‖x + y‖ < ‖x‖ + ‖y‖`. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] [inst_2 : StrictConvexSpace ℝ E] {x y : E},\n  ¬SameRay ℝ x y → ‖x + y‖ < ‖x‖ + ‖y‖ :=\n\n/-- For any two elements `x`, `y` such that `0 < y`, there exists a natural number `n`\nsuch that `x ≤ n • y`. -/\ntheorem ∀ {α : Type u_1} [inst : OrderedAddCommMonoid α] [self : Archimedean α] (x : α) {y : α}, 0 < y → ∃ n, x ≤ n • y :=\n\n/-- For functions to `ℝ`, it suffices to prove `f x ≤ f y + K * dist x y`; this version\ndoesn't assume `0≤K`. -/\ntheorem ∀ {α : Type u} [inst : PseudoMetricSpace α] {s : Set α} {f : α → ℝ} (K : ℝ),\n  (∀ (x : α), x ∈ s → ∀ (y : α), y ∈ s → f x ≤ f y + K * dist x y) → LipschitzOnWith (Real.toNNReal K) f s :=\n\n/-- Expand `⟪x - y, x - y⟫_ℝ` -/\ntheorem ∀ {F : Type u_1} [inst : NormedAddCommGroup F] [inst_1 : InnerProductSpace ℝ F] (x y : F),\n  inner (x - y) (x - y) = inner x x - 2 * inner x y + inner y y :=\n\n/-- If `x + y` is irrational, then at least one of `x` and `y` is irrational. -/\ntheorem ∀ {x y : ℝ}, Irrational (x + y) → Irrational x ∨ Irrational y :=\n\n/-- For functions to `ℝ`, it suffices to prove `f x ≤ f y + K * dist x y`; this version\nassumes `0≤K`. -/\ntheorem ∀ {α : Type u} [inst : PseudoMetricSpace α] {f : α → ℝ} (K : NNReal),\n  (∀ (x y : α), f x ≤ f y + ↑K * dist x y) → LipschitzWith K f :=\n\n/-- If `‖y‖ → ∞`, then we can assume `y ≠ x` for any fixed `x`. -/\ntheorem ∀ {α : Type u_1} {E : Type u_2} [inst : SeminormedGroup E] {l : Filter α} {f : α → E},\n  Filter.Tendsto (fun y => ‖f y‖) l Filter.atTop → ∀ (x : E), ∀ᶠ (y : α) in l, f y ≠ x :=\n\n/-- Shows that `|v - Aₙ / Bₙ| ≤ 1 / (Bₙ * Bₙ₊₁)`. -/\ntheorem ∀ {K : Type u_1} {v : K} {n : ℕ} [inst : LinearOrderedField K] [inst_1 : FloorRing K],\n  ¬GeneralizedContinuedFraction.TerminatedAt (GeneralizedContinuedFraction.of v) n →\n    |v - GeneralizedContinuedFraction.convergents (GeneralizedContinuedFraction.of v) n| ≤\n      1 /\n        (GeneralizedContinuedFraction.denominators (GeneralizedContinuedFraction.of v) n *\n          GeneralizedContinuedFraction.denominators (GeneralizedContinuedFraction.of v) (n + 1)) :=\n\n/-- `a ≤ -b → b ≤ -a` on ereal -/\ntheorem ∀ {a b : EReal}, a ≤ -b → b ≤ -a :=\n\n/-- If `1 < |z|`, then `|S • z| < 1`. -/\ntheorem ∀ {z : UpperHalfPlane}, 1 < ↑Complex.normSq ↑z → ↑Complex.normSq ↑(ModularGroup.S • z) < 1 :=\n\n/-- If `x` and `y` are two distinct vectors of norm at most `r`, then a convex combination of `x`\nand `y` with positive coefficients has norm strictly less than `r`. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] [inst_2 : StrictConvexSpace ℝ E] {x y : E}\n  {a b r : ℝ}, ‖x‖ ≤ r → ‖y‖ ≤ r → x ≠ y → 0 < a → 0 < b → a + b = 1 → ‖a • x + b • y‖ < r :=\n\n/-- The function `x ^ y` tends to `+∞` at `+∞` for any positive real `y`. -/\ntheorem ∀ {y : ℝ}, 0 < y → Filter.Tendsto (fun x => x ^ y) Filter.atTop Filter.atTop :=\n\n/-- The function `x ^ (-y)` tends to `0` at `+∞` for any positive real `y`. -/\ntheorem ∀ {y : ℝ}, 0 < y → Filter.Tendsto (fun x => x ^ (-y)) Filter.atTop (nhds 0) :=\n\n/-- If `x` and `y` are on the same ray, then the triangle inequality becomes the equality: the norm\nof `x + y` is the sum of the norms of `x` and `y`. The converse is true for a strictly convex\nspace. -/\ntheorem ∀ {E : Type u_1} [inst : SeminormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] {x y : E},\n  SameRay ℝ x y → ‖x + y‖ = ‖x‖ + ‖y‖ :=\n\n/-- Young's inequality, `ℝ≥0` version with real conjugate exponents. -/\ntheorem ∀ (a b : NNReal) {p q : ℝ}, Real.IsConjugateExponent p q → a * b ≤ a ^ p / Real.toNNReal p + b ^ q / Real.toNNReal q :=\n\n/-- If `x ≠ y` belong to the same closed ball, then a convex combination of `x` and `y` with\npositive coefficients belongs to the corresponding open ball. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] [inst_2 : StrictConvexSpace ℝ E] {x y z : E}\n  {a b r : ℝ},\n  x ∈ Metric.closedBall z r →\n    y ∈ Metric.closedBall z r → x ≠ y → 0 < a → 0 < b → a + b = 1 → a • x + b • y ∈ Metric.ball z r :=\n\n/-- If `x` and `y` are nonzero vectors on the same ray, then there exist positive numbers `r₁ r₂`\nsuch that `r₁ • x = r₂ • y`. -/\ntheorem ∀ {R : Type u_1} [inst : StrictOrderedCommSemiring R] {M : Type u_2} [inst_1 : AddCommMonoid M] [inst_2 : Module R M]\n  {x y : M}, SameRay R x y → x ≠ 0 → y ≠ 0 → ∃ r₁ r₂, 0 < r₁ ∧ 0 < r₂ ∧ r₁ • x = r₂ • y :=\n\n/-- If `x, y` are complex, prove that `||x|-|y|| ≤ |x-y|`. -/\ntheorem", "choices": ["∀ {x y : ℂ}, abs (abs x - abs y) ≤ abs (x - y) ", "∀ {x y : ℂ}, abs (abs x - abs y) ≤ abs (x - y) ", "∀ {x y : ℂ}, |x| - |y| ≤ |x - y| ", "∀ {x y : ℂ}, abs (abs x - abs y) ≤ abs (x - y) ", "∀ {x y : ℂ}, abs (abs x - abs y) ≤ abs (x - y) ", "∀ {x y : ℂ}, abs (abs x - abs y) ≤ abs (x - y) ", "∀ {x y : ℂ}, |x| - |y| ≤ |x - y| ", "∀ {x y : ℂ}, Complex.abs (Complex.abs x - Complex.abs y) ≤ Complex.abs (x - y) ", "∀ (x y : ℂ), |x.abs - y.abs| ≤ (x - y).abs ", "∀ {x y : ℂ}, abs (abs x - abs y) ≤ abs (x - y) "]}
{"docString": "Suppose `k ≥ 3`, `x, y ∈ ℝ^k`, `|x - y| = d > 0`, and `r > 0`. Prove that if `2r > d`, there are infinitely many `z ∈ ℝ^k` such that `|z-x|=|z-y|=r`.", "prompts": "[{\"theorem\": \"∀ {x y : ℝ}, x < y → ∃ r, Irrational r ∧ x < r ∧ r < y\",\n  \"isProp\": true,\n  \"docString\":\n  \"There is an irrational number `r` between any two reals `x < r < y`. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} (d : X → X → NNReal) (dist_self : ∀ (x : X), d x x = 0) (dist_comm : ∀ (x y : X), d x y = d y x),\\n  (∀ (x₁ x₂ x₃ x₄ : X), d x₁ x₄ ≤ 2 * max (d x₁ x₂) (max (d x₂ x₃) (d x₃ x₄))) → ∀ (x y : X), ↑(d x y) ≤ 2 * dist x y\",\n  \"isProp\": true,\n  \"docString\":\n  \"Consider a function `d : X → X → ℝ≥0` such that `d x x = 0` and `d x y = d y x` for all `x`,\\n`y`. Let `dist` be the largest pseudometric distance such that `dist x y ≤ d x y`, see\\n`PseudoMetricSpace.ofPreNNDist`. Suppose that `d` satisfies the following triangle-like\\ninequality: `d x₁ x₄ ≤ 2 * max (d x₁ x₂, d x₂ x₃, d x₃ x₄)`. Then `d x y ≤ 2 * dist x y` for all\\n`x`, `y`. \"},\n {\"theorem\":\n  \"∀ {R : Type u_1} [inst : StrictOrderedCommSemiring R] {M : Type u_2} [inst_1 : AddCommMonoid M] [inst_2 : Module R M]\\n  {x y : M}, SameRay R x y → x ≠ 0 → y ≠ 0 → ∃ r₁ r₂, 0 < r₁ ∧ 0 < r₂ ∧ r₁ • x = r₂ • y\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `x` and `y` are nonzero vectors on the same ray, then there exist positive numbers `r₁ r₂`\\nsuch that `r₁ • x = r₂ • y`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {E : Type u_2} {F : Type u_3} [inst : NontriviallyNormedField 𝕜] [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F]\\n  (p : FormalMultilinearSeries 𝕜 E F) {r : NNReal},\\n  ↑r < FormalMultilinearSeries.radius p → ∃ a, a ∈ Set.Ioo 0 1 ∧ ∃ C, C > 0 ∧ ∀ (n : ℕ), ‖p n‖ * ↑r ^ n ≤ C * a ^ n\",\n  \"isProp\": true,\n  \"docString\":\n  \"For `r` strictly smaller than the radius of `p`, then `‖pₙ‖ rⁿ` tends to zero exponentially:\\nfor some `0 < a < 1` and `C > 0`, `‖p n‖ * r ^ n ≤ C * a ^ n`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {E : Type u_2} {F : Type u_3} [inst : NontriviallyNormedField 𝕜] [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F]\\n  (p : FormalMultilinearSeries 𝕜 E F) {r : NNReal},\\n  ↑r < FormalMultilinearSeries.radius p → ∃ C, C > 0 ∧ ∀ (n : ℕ), ‖p n‖ * ↑r ^ n ≤ C\",\n  \"isProp\": true,\n  \"docString\":\n  \"For `r` strictly smaller than the radius of `p`, then `‖pₙ‖ rⁿ` is bounded. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : EMetricSpace X] [inst_1 : TopologicalSpace.SecondCountableTopology X] {s : Set X}\\n  {r : ENNReal}, r < dimH s → ∃ x, x ∈ s ∧ ∀ (t : Set X), t ∈ nhdsWithin x s → r < dimH t\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `r` is less than the Hausdorff dimension of a set `s` in an (extended) metric space with\\nsecond countable topology, then there exists a point `x ∈ s` such that every neighborhood\\n`t` of `x` within `s` has Hausdorff dimension greater than `r`. \"},\n {\"theorem\":\n  \"∀ {R : Type u_1} [inst : NormedRing R] (k : ℕ) {r₁ : R} {r₂ : ℝ},\\n  ‖r₁‖ < r₂ → (fun n => ↑n ^ k * r₁ ^ n) =o[Filter.atTop] fun n => r₂ ^ n\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `‖r₁‖ < r₂`, then for any natural `k` we have `n ^ k r₁ ^ n = o (r₂ ^ n)` as `n → ∞`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {E : Type u_2} {F : Type u_3} [inst : NontriviallyNormedField 𝕜] [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F]\\n  (p : FormalMultilinearSeries 𝕜 E F) {r : NNReal},\\n  ↑r < FormalMultilinearSeries.radius p →\\n    ∃ a, a ∈ Set.Ioo 0 1 ∧ (fun n => ‖p n‖ * ↑r ^ n) =o[Filter.atTop] fun x => a ^ x\",\n  \"isProp\": true,\n  \"docString\":\n  \"For `r` strictly smaller than the radius of `p`, then `‖pₙ‖ rⁿ` tends to zero exponentially:\\nfor some `0 < a < 1`, `‖p n‖ rⁿ = o(aⁿ)`. \"},\n {\"theorem\":\n  \"∀ {z : UpperHalfPlane}, z ∈ ModularGroup.fdo → ∀ (n : ℤ), 1 < ↑Complex.normSq ↑(ModularGroup.T ^ n • z)\",\n  \"isProp\": true,\n  \"docString\": \"If `z ∈ 𝒟ᵒ`, and `n : ℤ`, then `|z + n| > 1`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : PseudoEMetricSpace α] {x : α} {s t : Set α} {r : ENNReal},\\n  x ∈ s → EMetric.hausdorffEdist s t < r → ∃ y, y ∈ t ∧ edist x y < r\",\n  \"isProp\": true,\n  \"docString\":\n  \"If the Hausdorff distance is `< r`, then any point in one of the sets has\\na corresponding point at distance `< r` in the other set \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} [inst : NormedField 𝕜] [inst_1 : CompleteSpace 𝕜] {r : 𝕜},\\n  ‖r‖ < 1 → ∑' (n : ℕ), ↑n * r ^ n = r / (1 - r) ^ 2\",\n  \"isProp\": true,\n  \"docString\": \"If `‖r‖ < 1`, then `∑' n : ℕ, n * r ^ n = r / (1 - r) ^ 2`. \"},\n {\"theorem\":\n  \"∀ {R : Type u_1} [inst : NormedRing R] (k : ℕ) {r : ℝ}, 1 < r → (fun n => ↑n ^ k) =o[Filter.atTop] fun n => r ^ n\",\n  \"isProp\": true,\n  \"docString\":\n  \"For any natural `k` and a real `r > 1` we have `n ^ k = o(r ^ n)` as `n → ∞`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {E : Type u_2} {F : Type u_3} [inst : NontriviallyNormedField 𝕜] [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F]\\n  (p : FormalMultilinearSeries 𝕜 E F) {r : NNReal},\\n  ↑r < FormalMultilinearSeries.radius p → (fun n => ‖p n‖ * ↑r ^ n) =o[Filter.atTop] fun x => 1\",\n  \"isProp\": true,\n  \"docString\":\n  \"For `r` strictly smaller than the radius of `p`, then `‖pₙ‖ rⁿ = o(1)`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : MeasurableSpace α] [inst_1 : TopologicalSpace α] {μ : MeasureTheory.Measure α}\\n  [inst_2 : MeasureTheory.Measure.OuterRegular μ] (A : Set α) (r : ENNReal),\\n  ↑↑μ A < r → ∃ U, U ⊇ A ∧ IsOpen U ∧ ↑↑μ U < r\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given `r` larger than the measure of a set `A`, there exists an open superset of `A` with\\nmeasure less than `r`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {E : Type u_2} [inst : SeminormedGroup E] {l : Filter α} {f : α → E},\\n  Filter.Tendsto (fun y => ‖f y‖) l Filter.atTop → ∀ (x : E), ∀ᶠ (y : α) in l, f y ≠ x\",\n  \"isProp\": true,\n  \"docString\": \"If `‖y‖ → ∞`, then we can assume `y ≠ x` for any fixed `x`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : PseudoMetricSpace α] {s : Set α} {x : α} {r : ℝ},\\n  Set.Nonempty s → (Metric.infDist x s < r ↔ ∃ y, y ∈ s ∧ dist x y < r)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The minimal distance to a set is `< r` iff there exists a point in this set at distance `< r` \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_3} {E : Type u_1} {F : Type u_2} [inst : NontriviallyNormedField 𝕜] [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F]\\n  (p : FormalMultilinearSeries 𝕜 E F) {r : NNReal},\\n  r ≠ 0 →\\n    ∀ {a : ℝ},\\n      a ∈ Set.Ioo (-1) 1 →\\n        ((fun n => ‖p n‖ * ↑r ^ n) =O[Filter.atTop] fun x => a ^ x) → ↑r < FormalMultilinearSeries.radius p\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `r ≠ 0` and `‖pₙ‖ rⁿ = O(aⁿ)` for some `-1 < a < 1`, then `r < p.radius`. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] [inst_2 : StrictConvexSpace ℝ E] {x y : E}\\n  {a b r : ℝ}, ‖x‖ ≤ r → ‖y‖ ≤ r → x ≠ y → 0 < a → 0 < b → a + b = 1 → ‖a • x + b • y‖ < r\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `x` and `y` are two distinct vectors of norm at most `r`, then a convex combination of `x`\\nand `y` with positive coefficients has norm strictly less than `r`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : LinearOrderedField α] [inst_1 : Archimedean α] {x y : α}, 0 < x → y < 1 → ∃ n, y ^ n < x\",\n  \"isProp\": true,\n  \"docString\":\n  \"For any `y < 1` and any positive `x`, there exists `n : ℕ` with `y ^ n < x`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : PseudoMetricSpace α] {s t : Set α} {x : α} {r : ℝ},\\n  x ∈ s → Metric.hausdorffDist s t < r → EMetric.hausdorffEdist s t ≠ ⊤ → ∃ y, y ∈ t ∧ dist x y < r\",\n  \"isProp\": true,\n  \"docString\":\n  \"If the Hausdorff distance is `< r`, then any point in one of the sets is at distance\\n`< r` of a point in the other set \"}]\n", "prompt_cons": "/-- There is an irrational number `r` between any two reals `x < r < y`. -/\ntheorem ∀ {x y : ℝ}, x < y → ∃ r, Irrational r ∧ x < r ∧ r < y :=\n\n/-- Consider a function `d : X → X → ℝ≥0` such that `d x x = 0` and `d x y = d y x` for all `x`,\n`y`. Let `dist` be the largest pseudometric distance such that `dist x y ≤ d x y`, see\n`PseudoMetricSpace.ofPreNNDist`. Suppose that `d` satisfies the following triangle-like\ninequality: `d x₁ x₄ ≤ 2 * max (d x₁ x₂, d x₂ x₃, d x₃ x₄)`. Then `d x y ≤ 2 * dist x y` for all\n`x`, `y`. -/\ntheorem ∀ {X : Type u_1} (d : X → X → NNReal) (dist_self : ∀ (x : X), d x x = 0) (dist_comm : ∀ (x y : X), d x y = d y x),\n  (∀ (x₁ x₂ x₃ x₄ : X), d x₁ x₄ ≤ 2 * max (d x₁ x₂) (max (d x₂ x₃) (d x₃ x₄))) → ∀ (x y : X), ↑(d x y) ≤ 2 * dist x y :=\n\n/-- If `x` and `y` are nonzero vectors on the same ray, then there exist positive numbers `r₁ r₂`\nsuch that `r₁ • x = r₂ • y`. -/\ntheorem ∀ {R : Type u_1} [inst : StrictOrderedCommSemiring R] {M : Type u_2} [inst_1 : AddCommMonoid M] [inst_2 : Module R M]\n  {x y : M}, SameRay R x y → x ≠ 0 → y ≠ 0 → ∃ r₁ r₂, 0 < r₁ ∧ 0 < r₂ ∧ r₁ • x = r₂ • y :=\n\n/-- For `r` strictly smaller than the radius of `p`, then `‖pₙ‖ rⁿ` tends to zero exponentially:\nfor some `0 < a < 1` and `C > 0`, `‖p n‖ * r ^ n ≤ C * a ^ n`. -/\ntheorem ∀ {𝕜 : Type u_1} {E : Type u_2} {F : Type u_3} [inst : NontriviallyNormedField 𝕜] [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F]\n  (p : FormalMultilinearSeries 𝕜 E F) {r : NNReal},\n  ↑r < FormalMultilinearSeries.radius p → ∃ a, a ∈ Set.Ioo 0 1 ∧ ∃ C, C > 0 ∧ ∀ (n : ℕ), ‖p n‖ * ↑r ^ n ≤ C * a ^ n :=\n\n/-- For `r` strictly smaller than the radius of `p`, then `‖pₙ‖ rⁿ` is bounded. -/\ntheorem ∀ {𝕜 : Type u_1} {E : Type u_2} {F : Type u_3} [inst : NontriviallyNormedField 𝕜] [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F]\n  (p : FormalMultilinearSeries 𝕜 E F) {r : NNReal},\n  ↑r < FormalMultilinearSeries.radius p → ∃ C, C > 0 ∧ ∀ (n : ℕ), ‖p n‖ * ↑r ^ n ≤ C :=\n\n/-- If `r` is less than the Hausdorff dimension of a set `s` in an (extended) metric space with\nsecond countable topology, then there exists a point `x ∈ s` such that every neighborhood\n`t` of `x` within `s` has Hausdorff dimension greater than `r`. -/\ntheorem ∀ {X : Type u_1} [inst : EMetricSpace X] [inst_1 : TopologicalSpace.SecondCountableTopology X] {s : Set X}\n  {r : ENNReal}, r < dimH s → ∃ x, x ∈ s ∧ ∀ (t : Set X), t ∈ nhdsWithin x s → r < dimH t :=\n\n/-- If `‖r₁‖ < r₂`, then for any natural `k` we have `n ^ k r₁ ^ n = o (r₂ ^ n)` as `n → ∞`. -/\ntheorem ∀ {R : Type u_1} [inst : NormedRing R] (k : ℕ) {r₁ : R} {r₂ : ℝ},\n  ‖r₁‖ < r₂ → (fun n => ↑n ^ k * r₁ ^ n) =o[Filter.atTop] fun n => r₂ ^ n :=\n\n/-- For `r` strictly smaller than the radius of `p`, then `‖pₙ‖ rⁿ` tends to zero exponentially:\nfor some `0 < a < 1`, `‖p n‖ rⁿ = o(aⁿ)`. -/\ntheorem ∀ {𝕜 : Type u_1} {E : Type u_2} {F : Type u_3} [inst : NontriviallyNormedField 𝕜] [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F]\n  (p : FormalMultilinearSeries 𝕜 E F) {r : NNReal},\n  ↑r < FormalMultilinearSeries.radius p →\n    ∃ a, a ∈ Set.Ioo 0 1 ∧ (fun n => ‖p n‖ * ↑r ^ n) =o[Filter.atTop] fun x => a ^ x :=\n\n/-- If `z ∈ 𝒟ᵒ`, and `n : ℤ`, then `|z + n| > 1`. -/\ntheorem ∀ {z : UpperHalfPlane}, z ∈ ModularGroup.fdo → ∀ (n : ℤ), 1 < ↑Complex.normSq ↑(ModularGroup.T ^ n • z) :=\n\n/-- If the Hausdorff distance is `< r`, then any point in one of the sets has\na corresponding point at distance `< r` in the other set -/\ntheorem ∀ {α : Type u} [inst : PseudoEMetricSpace α] {x : α} {s t : Set α} {r : ENNReal},\n  x ∈ s → EMetric.hausdorffEdist s t < r → ∃ y, y ∈ t ∧ edist x y < r :=\n\n/-- If `‖r‖ < 1`, then `∑' n : ℕ, n * r ^ n = r / (1 - r) ^ 2`. -/\ntheorem ∀ {𝕜 : Type u_1} [inst : NormedField 𝕜] [inst_1 : CompleteSpace 𝕜] {r : 𝕜},\n  ‖r‖ < 1 → ∑' (n : ℕ), ↑n * r ^ n = r / (1 - r) ^ 2 :=\n\n/-- For any natural `k` and a real `r > 1` we have `n ^ k = o(r ^ n)` as `n → ∞`. -/\ntheorem ∀ {R : Type u_1} [inst : NormedRing R] (k : ℕ) {r : ℝ}, 1 < r → (fun n => ↑n ^ k) =o[Filter.atTop] fun n => r ^ n :=\n\n/-- For `r` strictly smaller than the radius of `p`, then `‖pₙ‖ rⁿ = o(1)`. -/\ntheorem ∀ {𝕜 : Type u_1} {E : Type u_2} {F : Type u_3} [inst : NontriviallyNormedField 𝕜] [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F]\n  (p : FormalMultilinearSeries 𝕜 E F) {r : NNReal},\n  ↑r < FormalMultilinearSeries.radius p → (fun n => ‖p n‖ * ↑r ^ n) =o[Filter.atTop] fun x => 1 :=\n\n/-- Given `r` larger than the measure of a set `A`, there exists an open superset of `A` with\nmeasure less than `r`. -/\ntheorem ∀ {α : Type u_1} [inst : MeasurableSpace α] [inst_1 : TopologicalSpace α] {μ : MeasureTheory.Measure α}\n  [inst_2 : MeasureTheory.Measure.OuterRegular μ] (A : Set α) (r : ENNReal),\n  ↑↑μ A < r → ∃ U, U ⊇ A ∧ IsOpen U ∧ ↑↑μ U < r :=\n\n/-- If `‖y‖ → ∞`, then we can assume `y ≠ x` for any fixed `x`. -/\ntheorem ∀ {α : Type u_1} {E : Type u_2} [inst : SeminormedGroup E] {l : Filter α} {f : α → E},\n  Filter.Tendsto (fun y => ‖f y‖) l Filter.atTop → ∀ (x : E), ∀ᶠ (y : α) in l, f y ≠ x :=\n\n/-- The minimal distance to a set is `< r` iff there exists a point in this set at distance `< r` -/\ntheorem ∀ {α : Type u} [inst : PseudoMetricSpace α] {s : Set α} {x : α} {r : ℝ},\n  Set.Nonempty s → (Metric.infDist x s < r ↔ ∃ y, y ∈ s ∧ dist x y < r) :=\n\n/-- If `r ≠ 0` and `‖pₙ‖ rⁿ = O(aⁿ)` for some `-1 < a < 1`, then `r < p.radius`. -/\ntheorem ∀ {𝕜 : Type u_3} {E : Type u_1} {F : Type u_2} [inst : NontriviallyNormedField 𝕜] [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F]\n  (p : FormalMultilinearSeries 𝕜 E F) {r : NNReal},\n  r ≠ 0 →\n    ∀ {a : ℝ},\n      a ∈ Set.Ioo (-1) 1 →\n        ((fun n => ‖p n‖ * ↑r ^ n) =O[Filter.atTop] fun x => a ^ x) → ↑r < FormalMultilinearSeries.radius p :=\n\n/-- If `x` and `y` are two distinct vectors of norm at most `r`, then a convex combination of `x`\nand `y` with positive coefficients has norm strictly less than `r`. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] [inst_2 : StrictConvexSpace ℝ E] {x y : E}\n  {a b r : ℝ}, ‖x‖ ≤ r → ‖y‖ ≤ r → x ≠ y → 0 < a → 0 < b → a + b = 1 → ‖a • x + b • y‖ < r :=\n\n/-- For any `y < 1` and any positive `x`, there exists `n : ℕ` with `y ^ n < x`. -/\ntheorem ∀ {α : Type u_1} [inst : LinearOrderedField α] [inst_1 : Archimedean α] {x y : α}, 0 < x → y < 1 → ∃ n, y ^ n < x :=\n\n/-- If the Hausdorff distance is `< r`, then any point in one of the sets is at distance\n`< r` of a point in the other set -/\ntheorem ∀ {α : Type u} [inst : PseudoMetricSpace α] {s t : Set α} {x : α} {r : ℝ},\n  x ∈ s → Metric.hausdorffDist s t < r → EMetric.hausdorffEdist s t ≠ ⊤ → ∃ y, y ∈ t ∧ dist x y < r :=\n\n/-- Suppose `k ≥ 3`, `x, y ∈ ℝ^k`, `|x - y| = d > 0`, and `r > 0`. Prove that if `2r > d`, there are infinitely many `z ∈ ℝ^k` such that `|z-x|=|z-y|=r`. -/\ntheorem", "choices": ["∀ {k : ℕ} [inst : FiniteDimensional ℝ (EuclideanSpace ℝ k)] {x y : EuclideanSpace ℝ k} {r d : ℝ},\n  3 ≤ k → dist x y = d → d > 0 → r > 0 → 2 * r > d →\n  ∃ t : Set (EuclideanSpace ℝ k), Set.Infinite t ∧ ∀ z ∈ t, dist z x = r ∧ dist z y = r ", "∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] {x y : E} {r d : ℝ},\n  3 ≤ FiniteDimensional.finrank ℝ E →\n  dist x y = d → 0 < d → 0 < r → 2 * r > d → ∃ A : Set E, Set.Infinite A ∧ ∀ z, z ∈ A → dist z x = r ∧ dist z y = r ", "∀ {k : ℕ} [inst : Fact (3 ≤ k)] {x y : EuclideanSpace ℝ k} {r d : ℝ},\n  dist x y = d → 0 < d → 0 < r → 2 * r > d →\n  ∃ t : ℕ → EuclideanSpace ℝ k, StrictMono t ∧ ∀ (n : ℕ), dist (t n) x = r ∧ dist (t n) y = r ", "∀ {k : ℕ} (hk : k ≥ 3) {x y : EuclideanSpace ℝ k} {d r : ℝ},\n  dist x y = d → d > 0 → r > 0 → 2 * r > d →\n  ∃ (∞ : Set (EuclideanSpace ℝ k)), ∀ z, z ∈ ∞ ↔ dist z x = r ∧ dist z y = r ", "∀ {k : ℕ} [inst : LinearOrderedField ℝ] [inst_1 : NormedAddCommGroup (Fin k → ℝ)] [inst_2 : NormedSpace ℝ (Fin k → ℝ)]\n  {x y : Fin k → ℝ} {r d : ℝ},\n  k ≥ 3 → dist x y = d → d > 0 → r > 0 → 2 * r > d → ∃ f : ℤ → Fin k → ℝ, Function.Injective f ∧ ∀ n : ℤ, dist (f n) x = r ∧ dist (f n) y = r ", "∀ {k : ℕ} [inst : Fact (3 ≤ k)] {x y : EuclideanSpace ℝ (Finₓ k)} {r d : ℝ},\n  dist x y = d → d > 0 → r > 0 → 2 * r > d → ∃ f : ℤ → EuclideanSpace ℝ (Finₓ k), Function.Injective f ∧ ∀ n, dist (f n) x = r ∧ dist (f n) y = r ", "∀ {k : ℕ} {x y : ℝ^k}, 3 ≤ k → ∥x - y∥ > 0 → ∀ (r : ℝ), r > 0 → 2 * r > ∥x - y∥ → ∃ z : Set (ℝ^k), Set.Infinite z ∧ ∀ w ∈ z, ∥w - x∥ = r ∧ ∥w - y∥ = r ", "∀ {k : ℕ} [inst : Fact (3 ≤ k)] {x y : EuclideanSpace ℝ (Finₓ k)} {r d : ℝ},\n  dist x y = d → d > 0 → r > 0 → 2 * r > d → ∃ f : ℤ → EuclideanSpace ℝ (Finₓ k),\n    StrictMono f ∧ ∀ (n : ℤ), dist (f n) x = r ∧ dist (f n) y = r ", "∀ {k : ℕ} [inst : Fact (3 ≤ k)] {x y : Finₓ k → ℝ} {d r : ℝ},\n  dist x y = d → d > 0 → r > 0 → 2 * r > d →\n    ∃ s : Set (Finₓ k → ℝ), Set.Infinite s ∧ ∀ z ∈ s, dist x z = r ∧ dist y z = r ", "∀ {k : ℕ} [inst : Fact (3 ≤ k)] {x y : EuclideanSpace ℝ (Finₓ k)} {r d : ℝ},\n  dist x y = d → d > 0 → r > 0 → 2 * r > d → ∃ t : ℝ, ∃ h : ∀ z, z ∈ t → dist z 0 = r, Set.Infinite (t • (x - y) + x) "]}
{"docString": "If `k ≥ 2` and `𝑥 ∈ ℝ^k`, prove that there exists `𝑦 ∈ ℝ^k` such that `𝑦 ≠ 0` but `𝑥 ⋅ 𝑦 = 0`.", "prompts": "[{\"theorem\":\n  \"∀ {d : ℤ}, 0 ≤ d → ∀ (a : Pell.Solution₁ d), Pell.Solution₁.x a ≠ 0\",\n  \"isProp\": true,\n  \"docString\": \"A solution has `x ≠ 0`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {M : Type u_1} [inst : AddCommMonoid M] {f : α → M} {s : Set α},\\n  ∑ᶠ (i : α) (_ : i ∈ s), f i ≠ 0 → ∃ x, x ∈ s ∧ f x ≠ 0\",\n  \"isProp\": true,\n  \"docString\":\n  \"If the product of `f i` over `i ∈ s` is not equal to `0`, then there is some `x ∈ s`\\nsuch that `f x ≠ 0`.\"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace.SecondCountableTopology α]\\n  (m : MeasureTheory.OuterMeasure α) {s : Set α}, ↑m s ≠ 0 → ∃ x, x ∈ s ∧ ∀ (t : Set α), t ∈ nhdsWithin x s → 0 < ↑m t\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `m s ≠ 0`, then for some point `x ∈ s` and any `t ∈ 𝓝[s] x` we have `0 < m t`. \"},\n {\"theorem\":\n  \"∀ {R : Type u_1} {k : ℕ} [inst : CommRing R] [inst_1 : IsDomain R] {ζ : R},\\n  IsPrimitiveRoot ζ k → 1 < k → (Finset.sum (Finset.range k) fun i => ζ ^ i) = 0\",\n  \"isProp\": true,\n  \"docString\": \"If `1 < k` then `(∑ i in range k, ζ ^ i) = 0`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : DecidableEq α] [inst_1 : Fintype α] {𝒜 : Finset (Finset α)} {s : Finset α} {k : ℕ},\\n  s ∈ Finset.upShadow^[k] 𝒜 ↔ ∃ t, t ∈ 𝒜 ∧ t ⊆ s ∧ Finset.card t + k = Finset.card s\",\n  \"isProp\": true,\n  \"docString\":\n  \"`t ∈ ∂^k 𝒜` iff `t` is exactly `k` elements more than something in `𝒜`. \"},\n {\"theorem\":\n  \"∀ {d : ℤ} {a : Pell.Solution₁ d}, 1 < Pell.Solution₁.x a → Pell.Solution₁.y a ≠ 0\",\n  \"isProp\": true,\n  \"docString\": \"A solution with `x > 1` must have `y ≠ 0`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {M : Type u_1} [inst : CommMonoid M] {f : α → M} {s : Set α},\\n  ∏ᶠ (i : α) (_ : i ∈ s), f i ≠ 1 → ∃ x, x ∈ s ∧ f x ≠ 1\",\n  \"isProp\": true,\n  \"docString\":\n  \"If the product of `f i` over `i ∈ s` is not equal to `1`, then there is some `x ∈ s` such that\\n`f x ≠ 1`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : DecidableEq α] {𝒜 : Finset (Finset α)} {s : Finset α} {k : ℕ},\\n  s ∈ Finset.shadow^[k] 𝒜 ↔ ∃ t, t ∈ 𝒜 ∧ s ⊆ t ∧ Finset.card t = Finset.card s + k\",\n  \"isProp\": true,\n  \"docString\":\n  \"`t ∈ ∂^k 𝒜` iff `t` is exactly `k` elements less than something in `𝒜`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {𝕜₂ : Type u_2} {E : Type u_3} {F : Type u_4} [inst : SeminormedAddCommGroup E]\\n  [inst_1 : SeminormedAddCommGroup F] [inst_2 : NontriviallyNormedField 𝕜] [inst_3 : NontriviallyNormedField 𝕜₂]\\n  [inst_4 : NormedSpace 𝕜 E] [inst_5 : NormedSpace 𝕜₂ F] {σ₁₂ : 𝕜 →+* 𝕜₂} [inst_6 : RingHomIsometric σ₁₂]\\n  (f : E →SL[σ₁₂] F) (M : NNReal), (∀ (x : E), ‖x‖₊ ≠ 0 → ‖↑f x‖₊ ≤ M * ‖x‖₊) → ‖f‖₊ ≤ M\",\n  \"isProp\": true,\n  \"docString\":\n  \"If one controls the norm of every `A x`, `‖x‖₊ ≠ 0`, then one controls the norm of `A`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {𝕜₂ : Type u_2} {E : Type u_3} {F : Type u_4} [inst : SeminormedAddCommGroup E]\\n  [inst_1 : SeminormedAddCommGroup F] [inst_2 : NontriviallyNormedField 𝕜] [inst_3 : NontriviallyNormedField 𝕜₂]\\n  [inst_4 : NormedSpace 𝕜 E] [inst_5 : NormedSpace 𝕜₂ F] {σ₁₂ : 𝕜 →+* 𝕜₂} (f : E →SL[σ₁₂] F) {M : ℝ},\\n  0 ≤ M → (∀ (x : E), ‖x‖ ≠ 0 → ‖↑f x‖ ≤ M * ‖x‖) → ‖f‖ ≤ M\",\n  \"isProp\": true,\n  \"docString\":\n  \"If one controls the norm of every `A x`, `‖x‖ ≠ 0`, then one controls the norm of `A`. \"},\n {\"theorem\":\n  \"∀ (𝕜 : Type u_2) (E : Type u_1) [inst : NontriviallyNormedField 𝕜] [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] {n : ℕ}, n ≠ 1 → FormalMultilinearSeries.id 𝕜 E n = 0\",\n  \"isProp\": true,\n  \"docString\":\n  \"For `n ≠ 1`, the `n`-th coefficient of `id 𝕜 E` is zero, by definition. \"},\n {\"theorem\":\n  \"∀ {z : UpperHalfPlane}, z ∈ ModularGroup.fdo → ∀ (n : ℤ), 1 < ↑Complex.normSq ↑(ModularGroup.T ^ n • z)\",\n  \"isProp\": true,\n  \"docString\": \"If `z ∈ 𝒟ᵒ`, and `n : ℤ`, then `|z + n| > 1`. \"},\n {\"theorem\": \"∀ {a b k : ℕ}, Nat.coprime a b → k ∣ a → k ∣ b → k = 1\",\n  \"isProp\": true,\n  \"docString\": \"If `k:ℕ` divides coprime `a` and `b` then `k = 1` \"},\n {\"theorem\":\n  \"∀ {M₀ : Type u_1} [inst : MulZeroClass M₀] [inst_1 : NoZeroDivisors M₀] {a b : M₀}, 0 = a * b ↔ a = 0 ∨ b = 0\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `α` has no zero divisors, then the product of two elements equals zero iff one of them\\nequals zero. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_2} {E : Type u_1} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\\n  {K : Submodule 𝕜 E} {x y : E}, Dense ↑K → x - y ∈ Kᗮ → x = y\",\n  \"isProp\": true,\n  \"docString\": \"If `S` is dense and `x - y ∈ Kᗮ`, then `x = y`. \"},\n {\"theorem\":\n  \"∀ {M₀ : Type u_1} [inst : MulZeroClass M₀] [inst_1 : NoZeroDivisors M₀] {a b : M₀}, a * b ≠ 0 ↔ a ≠ 0 ∧ b ≠ 0\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `α` has no zero divisors, then the product of two elements is nonzero iff both of them\\nare nonzero. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\\n  {K : Submodule 𝕜 E} [inst_3 : HasOrthogonalProjection Kᗮ] {v : E}, v ∈ K → ↑(orthogonalProjection Kᗮ) v = 0\",\n  \"isProp\": true,\n  \"docString\":\n  \"The orthogonal projection onto `Kᗮ` of an element of `K` is zero. \"},\n {\"theorem\":\n  \"∀ (𝕜 : Type v) [inst : IsROrC 𝕜] {E : Type u} [inst_1 : NormedAddCommGroup E] [inst_2 : NormedSpace 𝕜 E] (x : E),\\n  x ≠ 0 → ∃ g, ‖g‖ = 1 ∧ ↑g x = ↑‖x‖\",\n  \"isProp\": true,\n  \"docString\":\n  \"Corollary of Hahn-Banach. Given a nonzero element `x` of a normed space, there exists an\\nelement of the dual space, of norm `1`, whose value on `x` is `‖x‖`. \"},\n {\"theorem\":\n  \"∀ {R : Type u_1} {M : Type u_2} [inst : Ring R] [inst_1 : AddCommGroup M] [inst_2 : Module R M] [htwo : Invertible 2]\\n  {B : BilinForm R M}, B ≠ 0 → BilinForm.IsSymm B → ∃ x, ¬BilinForm.IsOrtho B x x\",\n  \"isProp\": true,\n  \"docString\":\n  \"There exists a non-null vector with respect to any symmetric, nonzero bilinear form `B`\\non a module `M` over a ring `R` with invertible `2`, i.e. there exists some\\n`x : M` such that `B x x ≠ 0`. \"},\n {\"theorem\":\n  \"∀ {G : Type u_1} [inst : MeasurableSpace G] [inst_1 : Mul G] [inst_2 : MeasurableMul G] (μ : MeasureTheory.Measure G),\\n  (∀ (g : G) (A : Set G), MeasurableSet A → ↑↑μ ((fun h => h * g) ⁻¹' A) = ↑↑μ A) ↔\\n    MeasureTheory.Measure.IsMulRightInvariant μ\",\n  \"isProp\": true,\n  \"docString\":\n  \"An alternative way to prove that `μ` is right invariant under multiplication. \"}]\n", "prompt_cons": "/-- A solution has `x ≠ 0`. -/\ntheorem ∀ {d : ℤ}, 0 ≤ d → ∀ (a : Pell.Solution₁ d), Pell.Solution₁.x a ≠ 0 :=\n\n/-- If the product of `f i` over `i ∈ s` is not equal to `0`, then there is some `x ∈ s`\nsuch that `f x ≠ 0`. -/\ntheorem ∀ {α : Type u_2} {M : Type u_1} [inst : AddCommMonoid M] {f : α → M} {s : Set α},\n  ∑ᶠ (i : α) (_ : i ∈ s), f i ≠ 0 → ∃ x, x ∈ s ∧ f x ≠ 0 :=\n\n/-- If `m s ≠ 0`, then for some point `x ∈ s` and any `t ∈ 𝓝[s] x` we have `0 < m t`. -/\ntheorem ∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace.SecondCountableTopology α]\n  (m : MeasureTheory.OuterMeasure α) {s : Set α}, ↑m s ≠ 0 → ∃ x, x ∈ s ∧ ∀ (t : Set α), t ∈ nhdsWithin x s → 0 < ↑m t :=\n\n/-- If `1 < k` then `(∑ i in range k, ζ ^ i) = 0`. -/\ntheorem ∀ {R : Type u_1} {k : ℕ} [inst : CommRing R] [inst_1 : IsDomain R] {ζ : R},\n  IsPrimitiveRoot ζ k → 1 < k → (Finset.sum (Finset.range k) fun i => ζ ^ i) = 0 :=\n\n/-- `t ∈ ∂^k 𝒜` iff `t` is exactly `k` elements more than something in `𝒜`. -/\ntheorem ∀ {α : Type u_1} [inst : DecidableEq α] [inst_1 : Fintype α] {𝒜 : Finset (Finset α)} {s : Finset α} {k : ℕ},\n  s ∈ Finset.upShadow^[k] 𝒜 ↔ ∃ t, t ∈ 𝒜 ∧ t ⊆ s ∧ Finset.card t + k = Finset.card s :=\n\n/-- A solution with `x > 1` must have `y ≠ 0`. -/\ntheorem ∀ {d : ℤ} {a : Pell.Solution₁ d}, 1 < Pell.Solution₁.x a → Pell.Solution₁.y a ≠ 0 :=\n\n/-- If the product of `f i` over `i ∈ s` is not equal to `1`, then there is some `x ∈ s` such that\n`f x ≠ 1`. -/\ntheorem ∀ {α : Type u_2} {M : Type u_1} [inst : CommMonoid M] {f : α → M} {s : Set α},\n  ∏ᶠ (i : α) (_ : i ∈ s), f i ≠ 1 → ∃ x, x ∈ s ∧ f x ≠ 1 :=\n\n/-- `t ∈ ∂^k 𝒜` iff `t` is exactly `k` elements less than something in `𝒜`. -/\ntheorem ∀ {α : Type u_1} [inst : DecidableEq α] {𝒜 : Finset (Finset α)} {s : Finset α} {k : ℕ},\n  s ∈ Finset.shadow^[k] 𝒜 ↔ ∃ t, t ∈ 𝒜 ∧ s ⊆ t ∧ Finset.card t = Finset.card s + k :=\n\n/-- If one controls the norm of every `A x`, `‖x‖₊ ≠ 0`, then one controls the norm of `A`. -/\ntheorem ∀ {𝕜 : Type u_1} {𝕜₂ : Type u_2} {E : Type u_3} {F : Type u_4} [inst : SeminormedAddCommGroup E]\n  [inst_1 : SeminormedAddCommGroup F] [inst_2 : NontriviallyNormedField 𝕜] [inst_3 : NontriviallyNormedField 𝕜₂]\n  [inst_4 : NormedSpace 𝕜 E] [inst_5 : NormedSpace 𝕜₂ F] {σ₁₂ : 𝕜 →+* 𝕜₂} [inst_6 : RingHomIsometric σ₁₂]\n  (f : E →SL[σ₁₂] F) (M : NNReal), (∀ (x : E), ‖x‖₊ ≠ 0 → ‖↑f x‖₊ ≤ M * ‖x‖₊) → ‖f‖₊ ≤ M :=\n\n/-- If one controls the norm of every `A x`, `‖x‖ ≠ 0`, then one controls the norm of `A`. -/\ntheorem ∀ {𝕜 : Type u_1} {𝕜₂ : Type u_2} {E : Type u_3} {F : Type u_4} [inst : SeminormedAddCommGroup E]\n  [inst_1 : SeminormedAddCommGroup F] [inst_2 : NontriviallyNormedField 𝕜] [inst_3 : NontriviallyNormedField 𝕜₂]\n  [inst_4 : NormedSpace 𝕜 E] [inst_5 : NormedSpace 𝕜₂ F] {σ₁₂ : 𝕜 →+* 𝕜₂} (f : E →SL[σ₁₂] F) {M : ℝ},\n  0 ≤ M → (∀ (x : E), ‖x‖ ≠ 0 → ‖↑f x‖ ≤ M * ‖x‖) → ‖f‖ ≤ M :=\n\n/-- For `n ≠ 1`, the `n`-th coefficient of `id 𝕜 E` is zero, by definition. -/\ntheorem ∀ (𝕜 : Type u_2) (E : Type u_1) [inst : NontriviallyNormedField 𝕜] [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E] {n : ℕ}, n ≠ 1 → FormalMultilinearSeries.id 𝕜 E n = 0 :=\n\n/-- If `z ∈ 𝒟ᵒ`, and `n : ℤ`, then `|z + n| > 1`. -/\ntheorem ∀ {z : UpperHalfPlane}, z ∈ ModularGroup.fdo → ∀ (n : ℤ), 1 < ↑Complex.normSq ↑(ModularGroup.T ^ n • z) :=\n\n/-- If `k:ℕ` divides coprime `a` and `b` then `k = 1` -/\ntheorem ∀ {a b k : ℕ}, Nat.coprime a b → k ∣ a → k ∣ b → k = 1 :=\n\n/-- If `α` has no zero divisors, then the product of two elements equals zero iff one of them\nequals zero. -/\ntheorem ∀ {M₀ : Type u_1} [inst : MulZeroClass M₀] [inst_1 : NoZeroDivisors M₀] {a b : M₀}, 0 = a * b ↔ a = 0 ∨ b = 0 :=\n\n/-- If `S` is dense and `x - y ∈ Kᗮ`, then `x = y`. -/\ntheorem ∀ {𝕜 : Type u_2} {E : Type u_1} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  {K : Submodule 𝕜 E} {x y : E}, Dense ↑K → x - y ∈ Kᗮ → x = y :=\n\n/-- If `α` has no zero divisors, then the product of two elements is nonzero iff both of them\nare nonzero. -/\ntheorem ∀ {M₀ : Type u_1} [inst : MulZeroClass M₀] [inst_1 : NoZeroDivisors M₀] {a b : M₀}, a * b ≠ 0 ↔ a ≠ 0 ∧ b ≠ 0 :=\n\n/-- The orthogonal projection onto `Kᗮ` of an element of `K` is zero. -/\ntheorem ∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  {K : Submodule 𝕜 E} [inst_3 : HasOrthogonalProjection Kᗮ] {v : E}, v ∈ K → ↑(orthogonalProjection Kᗮ) v = 0 :=\n\n/-- Corollary of Hahn-Banach. Given a nonzero element `x` of a normed space, there exists an\nelement of the dual space, of norm `1`, whose value on `x` is `‖x‖`. -/\ntheorem ∀ (𝕜 : Type v) [inst : IsROrC 𝕜] {E : Type u} [inst_1 : NormedAddCommGroup E] [inst_2 : NormedSpace 𝕜 E] (x : E),\n  x ≠ 0 → ∃ g, ‖g‖ = 1 ∧ ↑g x = ↑‖x‖ :=\n\n/-- There exists a non-null vector with respect to any symmetric, nonzero bilinear form `B`\non a module `M` over a ring `R` with invertible `2`, i.e. there exists some\n`x : M` such that `B x x ≠ 0`. -/\ntheorem ∀ {R : Type u_1} {M : Type u_2} [inst : Ring R] [inst_1 : AddCommGroup M] [inst_2 : Module R M] [htwo : Invertible 2]\n  {B : BilinForm R M}, B ≠ 0 → BilinForm.IsSymm B → ∃ x, ¬BilinForm.IsOrtho B x x :=\n\n/-- An alternative way to prove that `μ` is right invariant under multiplication. -/\ntheorem ∀ {G : Type u_1} [inst : MeasurableSpace G] [inst_1 : Mul G] [inst_2 : MeasurableMul G] (μ : MeasureTheory.Measure G),\n  (∀ (g : G) (A : Set G), MeasurableSet A → ↑↑μ ((fun h => h * g) ⁻¹' A) = ↑↑μ A) ↔\n    MeasureTheory.Measure.IsMulRightInvariant μ :=\n\n/-- If `k ≥ 2` and `𝑥 ∈ ℝ^k`, prove that there exists `𝑦 ∈ ℝ^k` such that `𝑦 ≠ 0` but `𝑥 ⋅ 𝑦 = 0`. -/\ntheorem", "choices": ["∀ {k : ℕ} (x : EuclideanSpace ℝ k), 2 ≤ k → ∃ y : EuclideanSpace ℝ k, y ≠ 0 ∧ x ⋅ y = 0 ", "∀ {k : ℕ} {x : EuclideanSpace ℝ k}, k ≥ 2 → ∃ y, y ≠ 0 ∧ inner x y = 0 ", "∀ {k : ℕ} {x : Finₓ k → ℝ}, k ≥ 2 → ∃ y : Finₓ k → ℝ, y ≠ 0 ∧ Finₓ.innerProduct x y = 0 ", "∀ {k : ℕ} {x : Finₓ k → ℝ}, k ≥ 2 → ∃ y : Finₓ k → ℝ, y ≠ 0 ∧ ⟪x, y⟫ = 0 ", "∀ {k : ℕ} {x : EuclideanSpace ℝ k}, k ≥ 2 → ∃ y, y ≠ 0 ∧ x ⋅ y = 0 ", "∀ {k : ℕ} {x : EuclideanSpace ℝ k}, 2 ≤ k → ∃ y, y ≠ 0 ∧ x ⋅ y = 0 ", "∀ {k : ℕ} {x : ℝ^k}, 2 ≤ k → ∃ y : ℝ^k, y ≠ 0 ∧ (x ⋅ y = 0) ", "∀ {k : ℕ} {x : ℝ^k}, 2 ≤ k → ∃ y : ℝ^k, y ≠ 0 ∧ x ⋅ y = 0 ", "∀ {k : ℕ} {x : Finₓ k → ℝ}, 2 ≤ k → ∃ y, y ≠ 0 ∧ x ⋅ y = 0 ", "∀ {k : ℕ} (x : Finₓ k → ℝ), 2 ≤ k → ∃ y, y ≠ 0 ∧ (Finset.sum Finset.univ fun i => x i * y i) = 0 "]}
{"docString": "Suppose `a, b ∈ ℝ^k`. Find `c ∈ ℝ^k` and `r > 0` such that `|x-a|=2|x-b|` if and only if `| x - c | = r`. Prove that `3c = 4b - a` and `3r = 2 |b - a|`.", "prompts": "[{\"theorem\":\n  \"∀ {α : Type u_1} {r : α → α → Prop} [self : IsDirected α r] (a b : α), ∃ c, r a c ∧ r b c\",\n  \"isProp\": true,\n  \"docString\":\n  \"For every pair of elements `a` and `b` there is a `c` such that `r a c` and `r b c` \"},\n {\"theorem\": \"∀ {a b c : ℤ}, Fermat42.Minimal a b c → Fermat42.Minimal b a c\",\n  \"isProp\": true,\n  \"docString\":\n  \"We can swap `a` and `b` in a minimal solution to `a ^ 4 + b ^ 4 = c ^ 2`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : LinearOrderedAddCommGroup α] {a b c : α}, c ∈ Set.uIcc a b → |b - c| ≤ |b - a|\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `x ∈ [a, b]`, then the distance between `c` and `b` is less than or equal to\\nthat of `a` and `b`  \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : LinearOrderedAddCommGroup α] {a b c : α}, c ∈ Set.uIcc a b → |c - a| ≤ |b - a|\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `c ∈ [a, b]`, then the distance between `a` and `c` is less than or equal to\\nthat of `a` and `b`  \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [self : CanonicallyOrderedMonoid α] {a b : α}, a ≤ b → ∃ c, b = a * c\",\n  \"isProp\": true,\n  \"docString\": \"For `a ≤ b`, there is a `c` so `b = a * c`. \"},\n {\"theorem\":\n  \"∀ {a b c : ℤ}, Fermat42 a b c → ∃ a0 b0 c0, Fermat42.Minimal a0 b0 c0 ∧ a0 % 2 = 1 ∧ 0 < c0\",\n  \"isProp\": true,\n  \"docString\":\n  \"We can assume that a minimal solution to `a ^ 4 + b ^ 4 = c ^ 2` has\\n`a` odd and `c` positive. \"},\n {\"theorem\": \"∀ {a b k : ℕ}, Nat.coprime a b → k ∣ a → k ∣ b → k = 1\",\n  \"isProp\": true,\n  \"docString\": \"If `k:ℕ` divides coprime `a` and `b` then `k = 1` \"},\n {\"theorem\":\n  \"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\\n  [inst_3 : NormedAddTorsor V P] {s : AffineSubspace ℝ P}\\n  [inst_4 : FiniteDimensional ℝ { x // x ∈ AffineSubspace.direction s }],\\n  FiniteDimensional.finrank ℝ { x // x ∈ AffineSubspace.direction s } = 2 →\\n    ∀ {c₁ c₂ p₁ p₂ p : P},\\n      c₁ ∈ s →\\n        c₂ ∈ s →\\n          p₁ ∈ s →\\n            p₂ ∈ s →\\n              p ∈ s →\\n                ∀ {r₁ r₂ : ℝ},\\n                  c₁ ≠ c₂ →\\n                    p₁ ≠ p₂ →\\n                      dist p₁ c₁ = r₁ →\\n                        dist p₂ c₁ = r₁ →\\n                          dist p c₁ = r₁ → dist p₁ c₂ = r₂ → dist p₂ c₂ = r₂ → dist p c₂ = r₂ → p = p₁ ∨ p = p₂\",\n  \"isProp\": true,\n  \"docString\":\n  \"Distances `r₁` `r₂` of `p` from two different points `c₁` `c₂` determine at\\nmost two points `p₁` `p₂` in a two-dimensional subspace containing those points\\n(two circles intersect in at most two points). \"},\n {\"theorem\":\n  \"∀ {a b c : ℤ}, Fermat42.Minimal a b c → Fermat42.Minimal a b (-c)\",\n  \"isProp\": true,\n  \"docString\":\n  \"We can assume that a minimal solution to `a ^ 4 + b ^ 4 = c ^ 2` has positive `c`. \"},\n {\"theorem\":\n  \"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\\n  [inst_3 : NormedAddTorsor V P] [inst_4 : FiniteDimensional ℝ V],\\n  FiniteDimensional.finrank ℝ V = 2 →\\n    ∀ {c₁ c₂ p₁ p₂ p : P} {r₁ r₂ : ℝ},\\n      c₁ ≠ c₂ →\\n        p₁ ≠ p₂ →\\n          dist p₁ c₁ = r₁ →\\n            dist p₂ c₁ = r₁ → dist p c₁ = r₁ → dist p₁ c₂ = r₂ → dist p₂ c₂ = r₂ → dist p c₂ = r₂ → p = p₁ ∨ p = p₂\",\n  \"isProp\": true,\n  \"docString\":\n  \"Distances `r₁` `r₂` of `p` from two different points `c₁` `c₂` determine at\\nmost two points `p₁` `p₂` in two-dimensional space (two circles intersect in at\\nmost two points). \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [self : CircularPreorder α] {a b c : α}, btw a b c → btw b c a\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `b` is between `a` and `c`, then `c` is between `b` and `a`.\\nThis is motivated by imagining three points on a circle. \"},\n {\"theorem\": \"∀ {a b c : ℤ}, Fermat42.Minimal a b c → IsCoprime a b\",\n  \"isProp\": true,\n  \"docString\":\n  \"a minimal solution to `a ^ 4 + b ^ 4 = c ^ 2` must have `a` and `b` coprime. \"},\n {\"theorem\": \"∀ {a b : EReal}, a ≤ -b → b ≤ -a\",\n  \"isProp\": true,\n  \"docString\": \"`a ≤ -b → b ≤ -a` on ereal \"},\n {\"theorem\": \"∀ {x y : ℝ}, x < y → ∃ r, Irrational r ∧ x < r ∧ r < y\",\n  \"isProp\": true,\n  \"docString\":\n  \"There is an irrational number `r` between any two reals `x < r < y`. \"},\n {\"theorem\":\n  \"∀ {a b c : ℤ}, Fermat42 a b c → ∃ a0 b0 c0, Fermat42.Minimal a0 b0 c0 ∧ a0 % 2 = 1\",\n  \"isProp\": true,\n  \"docString\":\n  \"We can assume that a minimal solution to `a ^ 4 + b ^ 4 = c ^ 2` has `a` odd. \"},\n {\"theorem\":\n  \"∀ {a b : ℝ} {f f' : ℝ → ℝ},\\n  a ≤ b →\\n    (∀ (x : ℝ), x ∈ Set.Icc a b → HasDerivWithinAt f (f' x) (Set.Icc a b) x) →\\n      ∀ {m : ℝ}, f' a < m → m < f' b → m ∈ f' '' Set.Ioo a b\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Darboux's theorem**: if `a ≤ b` and `f' a < m < f' b`, then `f' c = m` for some\\n`c ∈ (a, b)`. \"},\n {\"theorem\": \"∀ {a b : EReal}, -a ≤ b ↔ -b ≤ a\",\n  \"isProp\": true,\n  \"docString\": \"`-a ≤ b ↔ -b ≤ a` on `EReal`. \"},\n {\"theorem\":\n  \"∀ {a b : ℝ} {f f' : ℝ → ℝ},\\n  a ≤ b →\\n    (∀ (x : ℝ), x ∈ Set.Icc a b → HasDerivWithinAt f (f' x) (Set.Icc a b) x) →\\n      ∀ {m : ℝ}, f' a ≤ m → m ≤ f' b → m ∈ f' '' Set.Icc a b\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Darboux's theorem**: if `a ≤ b` and `f' b ≤ m ≤ f' a`, then `f' c = m` for some\\n`c ∈ [a, b]`. \"},\n {\"theorem\":\n  \"∀ {a b : ℝ} {f f' : ℝ → ℝ},\\n  a ≤ b →\\n    (∀ (x : ℝ), x ∈ Set.Icc a b → HasDerivWithinAt f (f' x) (Set.Icc a b) x) →\\n      ∀ {m : ℝ}, f' a ≤ m → m ≤ f' b → m ∈ f' '' Set.Icc a b\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Darboux's theorem**: if `a ≤ b` and `f' a ≤ m ≤ f' b`, then `f' c = m` for some\\n`c ∈ [a, b]`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} [inst : NormedField 𝕜] [inst_1 : CompleteSpace 𝕜] {r : 𝕜},\\n  ‖r‖ < 1 → ∑' (n : ℕ), ↑n * r ^ n = r / (1 - r) ^ 2\",\n  \"isProp\": true,\n  \"docString\": \"If `‖r‖ < 1`, then `∑' n : ℕ, n * r ^ n = r / (1 - r) ^ 2`. \"}]\n", "prompt_cons": "/-- For every pair of elements `a` and `b` there is a `c` such that `r a c` and `r b c` -/\ntheorem ∀ {α : Type u_1} {r : α → α → Prop} [self : IsDirected α r] (a b : α), ∃ c, r a c ∧ r b c :=\n\n/-- We can swap `a` and `b` in a minimal solution to `a ^ 4 + b ^ 4 = c ^ 2`. -/\ntheorem ∀ {a b c : ℤ}, Fermat42.Minimal a b c → Fermat42.Minimal b a c :=\n\n/-- If `x ∈ [a, b]`, then the distance between `c` and `b` is less than or equal to\nthat of `a` and `b` -/\ntheorem ∀ {α : Type u_1} [inst : LinearOrderedAddCommGroup α] {a b c : α}, c ∈ Set.uIcc a b → |b - c| ≤ |b - a| :=\n\n/-- If `c ∈ [a, b]`, then the distance between `a` and `c` is less than or equal to\nthat of `a` and `b` -/\ntheorem ∀ {α : Type u_1} [inst : LinearOrderedAddCommGroup α] {a b c : α}, c ∈ Set.uIcc a b → |c - a| ≤ |b - a| :=\n\n/-- For `a ≤ b`, there is a `c` so `b = a * c`. -/\ntheorem ∀ {α : Type u_1} [self : CanonicallyOrderedMonoid α] {a b : α}, a ≤ b → ∃ c, b = a * c :=\n\n/-- We can assume that a minimal solution to `a ^ 4 + b ^ 4 = c ^ 2` has\n`a` odd and `c` positive. -/\ntheorem ∀ {a b c : ℤ}, Fermat42 a b c → ∃ a0 b0 c0, Fermat42.Minimal a0 b0 c0 ∧ a0 % 2 = 1 ∧ 0 < c0 :=\n\n/-- If `k:ℕ` divides coprime `a` and `b` then `k = 1` -/\ntheorem ∀ {a b k : ℕ}, Nat.coprime a b → k ∣ a → k ∣ b → k = 1 :=\n\n/-- Distances `r₁` `r₂` of `p` from two different points `c₁` `c₂` determine at\nmost two points `p₁` `p₂` in a two-dimensional subspace containing those points\n(two circles intersect in at most two points). -/\ntheorem ∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\n  [inst_3 : NormedAddTorsor V P] {s : AffineSubspace ℝ P}\n  [inst_4 : FiniteDimensional ℝ { x // x ∈ AffineSubspace.direction s }],\n  FiniteDimensional.finrank ℝ { x // x ∈ AffineSubspace.direction s } = 2 →\n    ∀ {c₁ c₂ p₁ p₂ p : P},\n      c₁ ∈ s →\n        c₂ ∈ s →\n          p₁ ∈ s →\n            p₂ ∈ s →\n              p ∈ s →\n                ∀ {r₁ r₂ : ℝ},\n                  c₁ ≠ c₂ →\n                    p₁ ≠ p₂ →\n                      dist p₁ c₁ = r₁ →\n                        dist p₂ c₁ = r₁ →\n                          dist p c₁ = r₁ → dist p₁ c₂ = r₂ → dist p₂ c₂ = r₂ → dist p c₂ = r₂ → p = p₁ ∨ p = p₂ :=\n\n/-- We can assume that a minimal solution to `a ^ 4 + b ^ 4 = c ^ 2` has positive `c`. -/\ntheorem ∀ {a b c : ℤ}, Fermat42.Minimal a b c → Fermat42.Minimal a b (-c) :=\n\n/-- Distances `r₁` `r₂` of `p` from two different points `c₁` `c₂` determine at\nmost two points `p₁` `p₂` in two-dimensional space (two circles intersect in at\nmost two points). -/\ntheorem ∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\n  [inst_3 : NormedAddTorsor V P] [inst_4 : FiniteDimensional ℝ V],\n  FiniteDimensional.finrank ℝ V = 2 →\n    ∀ {c₁ c₂ p₁ p₂ p : P} {r₁ r₂ : ℝ},\n      c₁ ≠ c₂ →\n        p₁ ≠ p₂ →\n          dist p₁ c₁ = r₁ →\n            dist p₂ c₁ = r₁ → dist p c₁ = r₁ → dist p₁ c₂ = r₂ → dist p₂ c₂ = r₂ → dist p c₂ = r₂ → p = p₁ ∨ p = p₂ :=\n\n/-- If `b` is between `a` and `c`, then `c` is between `b` and `a`.\nThis is motivated by imagining three points on a circle. -/\ntheorem ∀ {α : Type u_1} [self : CircularPreorder α] {a b c : α}, btw a b c → btw b c a :=\n\n/-- a minimal solution to `a ^ 4 + b ^ 4 = c ^ 2` must have `a` and `b` coprime. -/\ntheorem ∀ {a b c : ℤ}, Fermat42.Minimal a b c → IsCoprime a b :=\n\n/-- `a ≤ -b → b ≤ -a` on ereal -/\ntheorem ∀ {a b : EReal}, a ≤ -b → b ≤ -a :=\n\n/-- There is an irrational number `r` between any two reals `x < r < y`. -/\ntheorem ∀ {x y : ℝ}, x < y → ∃ r, Irrational r ∧ x < r ∧ r < y :=\n\n/-- We can assume that a minimal solution to `a ^ 4 + b ^ 4 = c ^ 2` has `a` odd. -/\ntheorem ∀ {a b c : ℤ}, Fermat42 a b c → ∃ a0 b0 c0, Fermat42.Minimal a0 b0 c0 ∧ a0 % 2 = 1 :=\n\n/-- **Darboux's theorem**: if `a ≤ b` and `f' a < m < f' b`, then `f' c = m` for some\n`c ∈ (a, b)`. -/\ntheorem ∀ {a b : ℝ} {f f' : ℝ → ℝ},\n  a ≤ b →\n    (∀ (x : ℝ), x ∈ Set.Icc a b → HasDerivWithinAt f (f' x) (Set.Icc a b) x) →\n      ∀ {m : ℝ}, f' a < m → m < f' b → m ∈ f' '' Set.Ioo a b :=\n\n/-- `-a ≤ b ↔ -b ≤ a` on `EReal`. -/\ntheorem ∀ {a b : EReal}, -a ≤ b ↔ -b ≤ a :=\n\n/-- **Darboux's theorem**: if `a ≤ b` and `f' b ≤ m ≤ f' a`, then `f' c = m` for some\n`c ∈ [a, b]`. -/\ntheorem ∀ {a b : ℝ} {f f' : ℝ → ℝ},\n  a ≤ b →\n    (∀ (x : ℝ), x ∈ Set.Icc a b → HasDerivWithinAt f (f' x) (Set.Icc a b) x) →\n      ∀ {m : ℝ}, f' a ≤ m → m ≤ f' b → m ∈ f' '' Set.Icc a b :=\n\n/-- **Darboux's theorem**: if `a ≤ b` and `f' a ≤ m ≤ f' b`, then `f' c = m` for some\n`c ∈ [a, b]`. -/\ntheorem ∀ {a b : ℝ} {f f' : ℝ → ℝ},\n  a ≤ b →\n    (∀ (x : ℝ), x ∈ Set.Icc a b → HasDerivWithinAt f (f' x) (Set.Icc a b) x) →\n      ∀ {m : ℝ}, f' a ≤ m → m ≤ f' b → m ∈ f' '' Set.Icc a b :=\n\n/-- If `‖r‖ < 1`, then `∑' n : ℕ, n * r ^ n = r / (1 - r) ^ 2`. -/\ntheorem ∀ {𝕜 : Type u_1} [inst : NormedField 𝕜] [inst_1 : CompleteSpace 𝕜] {r : 𝕜},\n  ‖r‖ < 1 → ∑' (n : ℕ), ↑n * r ^ n = r / (1 - r) ^ 2 :=\n\n/-- Suppose `a, b ∈ ℝ^k`. Find `c ∈ ℝ^k` and `r > 0` such that `|x-a|=2|x-b|` if and only if `| x - c | = r`. Prove that `3c = 4b - a` and `3r = 2 |b - a|`. -/\ntheorem", "choices": ["∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\n  [inst_3 : NormedAddTorsor V P] {a b c : P} {r : ℝ},\n  (∀ x : P, dist x a = 2 * dist x b ↔ dist x c = r) → 3 • c = 4 • b - a ∧ 3 * r = 2 * dist b a ", "∀ {V : Type u_1} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace V] [inst_3 : NormedAddTorsor V V],\n  ∀ {a b c : V} {r : ℝ},\n    (∀ x, dist x a = 2 * dist x b ↔ dist x c = r) →\n      3 • c = 4 • b - a ∧ 3 * r = 2 * dist b a ", "∀ {V : Type u_1} [inst : NormedGroup V] [inst_1 : InnerProductSpace ℝ V] {a b : V},\n  ∃ (c : V) (r : ℝ), r > 0 ∧\n    (∀ x, ∥x - a∥ = 2 * ∥x - b∥ ↔ ∥x - c∥ = r) ∧\n    (3 • c = 4 • b - a) ∧ (3 * r = 2 * ∥b - a∥) ", "∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\n  [inst_3 : NormedAddTorsor V P] {a b c : P} (r : ℝ),\n  (∀ x : P, dist x a = 2 * dist x b ↔ dist x c = r) →\n    3 • c = 4 • b - a ∧ 3 * r = 2 * dist b a ", "∀ {k a b c : ℝ} {r : ℝ},\n  (∀ (x : ℝ), |x - a| = 2 * |x - b| ↔ |x - c| = r) →\n    3 * c = 4 * b - a ∧ 3 * r = 2 * |b - a| ", "∀ {k : ℕ} {a b : Finₓ (k + 1) → ℝ},\n  ∃ c : Finₓ (k + 1) → ℝ,\n    ∃ r : ℝ,\n      (∀ x : Finₓ (k + 1) → ℝ, dist x a = 2 * dist x b ↔ dist x c = r) ∧\n        (3 • c = 4 • b - a) ∧ (3 * r = 2 * dist b a) ", "∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P] [inst_3 : NormedAddTorsor V P],\n  ∀ {a b c : P} {r : ℝ},\n    (∀ x : P, dist x a = 2 * dist x b ↔ dist x c = r) →\n      3 • c = 4 • b - a ∧ 3 * r = 2 * dist b a ", "∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\n  [inst_3 : NormedAddTorsor V P] {a b c : P} {r : ℝ},\n  (∀ x, dist x a = 2 * dist x b ↔ dist x c = r) → 3 • c = 4 • b - a ∧ 3 * r = 2 * dist b a ", "∀ {k : Type u_1} [inst : NormedGroup k] [inst_1 : NondiscreteNormedField k] {a b c : k} {r : ℝ},\n  (∀ x : k, |x - a| = 2 * |x - b| ↔ |x - c| = r) → 3 * c = 4 * b - a ∧ 3 * r = 2 * |b - a| ", "∀ {V : Type u_1} [inst : NormedGroup V] [inst_1 : NormedSpace ℝ V] {a b c : V} {r : ℝ},\n  (∀ x : V, |x - a| = 2 * |x - b| ↔ |x - c| = r) →\n  (3 • c = 4 • b - a) ∧ (3 * r = 2 * |b - a|) "]}
{"docString": "Let `X` be a metric space in which every infinite subset has a limit point. Prove that `X` is separable.", "prompts": "[{\"theorem\":\n  \"∀ {ι : Type u_1} {X : ι → Type u_2} [inst : (i : ι) → TopologicalSpace (X i)]\\n  [inst_1 : ∀ (i : ι), TopologicalSpace.SeparableSpace (X i)] [inst_2 : Countable ι],\\n  TopologicalSpace.SeparableSpace ((i : ι) → X i)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The product of a countable family of separable spaces is a separable space. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : UniformSpace X] [inst_1 : Filter.IsCountablyGenerated (uniformity X)],\\n  TopologicalSpace.PseudoMetrizableSpace X\",\n  \"isProp\": true,\n  \"docString\":\n  \"A uniform space with countably generated `𝓤 X` is pseudo metrizable. \"},\n {\"theorem\":\n  \"∀ {γ : Type w} [inst : EMetricSpace γ] {s : Set γ}, IsCompact s → ∃ t, t ⊆ s ∧ Set.Countable t ∧ s = closure t\",\n  \"isProp\": true,\n  \"docString\":\n  \"A compact set in an emetric space is separable, i.e., it is the closure of a countable set. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] {s : Set X} [inst_1 : T0Space ↑s]\\n  [inst_2 : TopologicalSpace.SecondCountableTopology ↑s], HasCountableSeparatingOn X IsOpen s\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `X` is a topological space, `s` is a set in `X` such that the induced topology is T₀ and is\\nsecond countable, then there exists a countable family of open sets in `X` that separates points\\nof `s`. \"},\n {\"theorem\":\n  \"∀ (α : Type u) [inst : MetricSpace α] [inst_1 : TopologicalSpace.SeparableSpace α], ∃ f, Isometry f\",\n  \"isProp\": true,\n  \"docString\":\n  \"Every separable metric space embeds isometrically in `ℓ^∞(ℕ)`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : PseudoEMetricSpace α] {s : Set α}, IsCompact s → ∃ t, t ⊆ s ∧ Set.Countable t ∧ s ⊆ closure t\",\n  \"isProp\": true,\n  \"docString\":\n  \"A compact set in a pseudo emetric space is separable, i.e., it is a subset of the closure of a\\ncountable set.  \"},\n {\"theorem\":\n  \"∀ {α : Type u} [t : TopologicalSpace α] [inst : DiscreteTopology α], TopologicalSpace.SeparableSpace α ↔ Countable α\",\n  \"isProp\": true,\n  \"docString\":\n  \"A topological space with discrete topology is separable iff it is countable. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : T2Space α] {s : Set α},\\n  Set.Finite s → ∃ U, (∀ (x : α), x ∈ U x ∧ IsOpen (U x)) ∧ Set.PairwiseDisjoint s U\",\n  \"isProp\": true,\n  \"docString\":\n  \"Points of a finite set can be separated by open sets from each other. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [t : TopologicalSpace α] {β : Type u_1} [inst : TopologicalSpace β]\\n  [inst_1 : TopologicalSpace.SeparableSpace α] [inst_2 : TopologicalSpace.SeparableSpace β],\\n  TopologicalSpace.SeparableSpace (α × β)\",\n  \"isProp\": true,\n  \"docString\": \"The product of two separable spaces is a separable space. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] (S : DiscreteQuotient X) [inst_1 : CompactSpace X],\\n  Finite (Quotient S.toSetoid)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `X` is a compact space, then any discrete quotient of `X` is finite. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X],\\n  (Pairwise fun x y => ∃ U, IsClopen U ∧ x ∈ U ∧ ¬y ∈ U) → IsTotallyDisconnected Set.univ\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `X` be a topological space, and suppose that for all distinct `x,y ∈ X`, there\\nis some clopen set `U` such that `x ∈ U` and `y ∉ U`. Then `X` is totally disconnected. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : PseudoMetricSpace α] {f : β → α} [inst_1 : TopologicalSpace β],\\n  Inducing f → ∀ {s : Set α}, TopologicalSpace.IsSeparable s → TopologicalSpace.IsSeparable (f ⁻¹' s)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The preimage of a separable set by an inducing map is separable. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [t : TopologicalSpace α] [inst : TopologicalSpace.SeparableSpace α] {ι : Type u_1} {s : ι → Set α}\\n  {a : Set ι},\\n  Set.PairwiseDisjoint a s →\\n    (∀ (i : ι), i ∈ a → IsOpen (s i)) → (∀ (i : ι), i ∈ a → Set.Nonempty (s i)) → Set.Countable a\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a separable space, a family of nonempty disjoint open sets is countable. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : PseudoMetricSpace α] [inst_1 : TopologicalSpace β] {f : α → β} {s : Set α},\\n  ContinuousOn f s → TopologicalSpace.IsSeparable s → TopologicalSpace.IsSeparable (f '' s)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a map is continuous on a separable set `s`, then the image of `s` is also separable. \"},\n {\"theorem\":\n  \"∀ {ι : Type u_2} {X : Type u_1} [inst : MetricSpace X] {K U : ι → Set X},\\n  (∀ (i : ι), IsClosed (K i)) →\\n    (∀ (i : ι), IsOpen (U i)) →\\n      (∀ (i : ι), K i ⊆ U i) →\\n        LocallyFinite K → ∃ δ, (∀ (x : X), 0 < ↑δ x) ∧ ∀ (i : ι) (x : X), x ∈ K i → Metric.closedBall x (↑δ x) ⊆ U i\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `X` be a metric space. Let `K : ι → Set X` be a locally finite family of closed sets, let\\n`U : ι → Set X` be a family of open sets such that `K i ⊆ U i` for all `i`. Then there exists a\\npositive continuous function `δ : C(X, ℝ)` such that for any `i` and `x ∈ K i`, we have\\n`Metric.closedBall x (δ x) ⊆ U i`. \"},\n {\"theorem\":\n  \"∀ {ι : Type u_2} {X : Type u_1} [inst : MetricSpace X] {K U : ι → Set X},\\n  (∀ (i : ι), IsClosed (K i)) →\\n    (∀ (i : ι), IsOpen (U i)) →\\n      (∀ (i : ι), K i ⊆ U i) →\\n        LocallyFinite K → ∃ δ, (∀ (x : X), 0 < ↑δ x) ∧ ∀ (i : ι) (x : X), x ∈ K i → Metric.closedBall x ↑(↑δ x) ⊆ U i\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `X` be a metric space. Let `K : ι → Set X` be a locally finite family of closed sets, let\\n`U : ι → Set X` be a family of open sets such that `K i ⊆ U i` for all `i`. Then there exists a\\npositive continuous function `δ : C(X, ℝ≥0)` such that for any `i` and `x ∈ K i`, we have\\n`Metric.closedBall x (δ x) ⊆ U i`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [t : TopologicalSpace α] [inst : TopologicalSpace.SeparableSpace α] {ι : Type u_1} {s : ι → Set α}\\n  {a : Set ι}, Set.PairwiseDisjoint a s → (∀ (i : ι), i ∈ a → Set.Nonempty (interior (s i))) → Set.Countable a\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a separable space, a family of disjoint sets with nonempty interiors is countable. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] {s : Set X} [h : HasCountableSeparatingOn X IsOpen s],\\n  HasCountableSeparatingOn X IsClosed s\",\n  \"isProp\": true,\n  \"docString\":\n  \"If there exists a countable family of open sets separating points of `s`, then there exists\\na countable family of closed sets separating points of `s`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {β : Type u_3} [inst : MeasurableSpace α] [inst_1 : TopologicalSpace β]\\n  [inst_2 : TopologicalSpace.PseudoMetrizableSpace β] [inst_3 : MeasurableSpace β] [inst_4 : BorelSpace β]\\n  {ι : Type u_1} {f : ι → α → β} {g : α → β} (u : Filter ι) [inst_5 : Filter.NeBot u]\\n  [inst_6 : Filter.IsCountablyGenerated u], (∀ (i : ι), Measurable (f i)) → Filter.Tendsto f u (nhds g) → Measurable g\",\n  \"isProp\": true,\n  \"docString\":\n  \"A limit (over a general filter) of measurable functions valued in a (pseudo) metrizable space is\\nmeasurable. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X], CompactSpace (OnePoint X)\",\n  \"isProp\": true,\n  \"docString\":\n  \"For any topological space `X`, its one point compactification is a compact space. \"}]\n", "prompt_cons": "/-- The product of a countable family of separable spaces is a separable space. -/\ntheorem ∀ {ι : Type u_1} {X : ι → Type u_2} [inst : (i : ι) → TopologicalSpace (X i)]\n  [inst_1 : ∀ (i : ι), TopologicalSpace.SeparableSpace (X i)] [inst_2 : Countable ι],\n  TopologicalSpace.SeparableSpace ((i : ι) → X i) :=\n\n/-- A uniform space with countably generated `𝓤 X` is pseudo metrizable. -/\ntheorem ∀ {X : Type u_1} [inst : UniformSpace X] [inst_1 : Filter.IsCountablyGenerated (uniformity X)],\n  TopologicalSpace.PseudoMetrizableSpace X :=\n\n/-- A compact set in an emetric space is separable, i.e., it is the closure of a countable set. -/\ntheorem ∀ {γ : Type w} [inst : EMetricSpace γ] {s : Set γ}, IsCompact s → ∃ t, t ⊆ s ∧ Set.Countable t ∧ s = closure t :=\n\n/-- If `X` is a topological space, `s` is a set in `X` such that the induced topology is T₀ and is\nsecond countable, then there exists a countable family of open sets in `X` that separates points\nof `s`. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X] {s : Set X} [inst_1 : T0Space ↑s]\n  [inst_2 : TopologicalSpace.SecondCountableTopology ↑s], HasCountableSeparatingOn X IsOpen s :=\n\n/-- Every separable metric space embeds isometrically in `ℓ^∞(ℕ)`. -/\ntheorem ∀ (α : Type u) [inst : MetricSpace α] [inst_1 : TopologicalSpace.SeparableSpace α], ∃ f, Isometry f :=\n\n/-- A compact set in a pseudo emetric space is separable, i.e., it is a subset of the closure of a\ncountable set. -/\ntheorem ∀ {α : Type u} [inst : PseudoEMetricSpace α] {s : Set α}, IsCompact s → ∃ t, t ⊆ s ∧ Set.Countable t ∧ s ⊆ closure t :=\n\n/-- A topological space with discrete topology is separable iff it is countable. -/\ntheorem ∀ {α : Type u} [t : TopologicalSpace α] [inst : DiscreteTopology α], TopologicalSpace.SeparableSpace α ↔ Countable α :=\n\n/-- Points of a finite set can be separated by open sets from each other. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : T2Space α] {s : Set α},\n  Set.Finite s → ∃ U, (∀ (x : α), x ∈ U x ∧ IsOpen (U x)) ∧ Set.PairwiseDisjoint s U :=\n\n/-- The product of two separable spaces is a separable space. -/\ntheorem ∀ {α : Type u} [t : TopologicalSpace α] {β : Type u_1} [inst : TopologicalSpace β]\n  [inst_1 : TopologicalSpace.SeparableSpace α] [inst_2 : TopologicalSpace.SeparableSpace β],\n  TopologicalSpace.SeparableSpace (α × β) :=\n\n/-- If `X` is a compact space, then any discrete quotient of `X` is finite. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X] (S : DiscreteQuotient X) [inst_1 : CompactSpace X],\n  Finite (Quotient S.toSetoid) :=\n\n/-- Let `X` be a topological space, and suppose that for all distinct `x,y ∈ X`, there\nis some clopen set `U` such that `x ∈ U` and `y ∉ U`. Then `X` is totally disconnected. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X],\n  (Pairwise fun x y => ∃ U, IsClopen U ∧ x ∈ U ∧ ¬y ∈ U) → IsTotallyDisconnected Set.univ :=\n\n/-- The preimage of a separable set by an inducing map is separable. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : PseudoMetricSpace α] {f : β → α} [inst_1 : TopologicalSpace β],\n  Inducing f → ∀ {s : Set α}, TopologicalSpace.IsSeparable s → TopologicalSpace.IsSeparable (f ⁻¹' s) :=\n\n/-- In a separable space, a family of nonempty disjoint open sets is countable. -/\ntheorem ∀ {α : Type u} [t : TopologicalSpace α] [inst : TopologicalSpace.SeparableSpace α] {ι : Type u_1} {s : ι → Set α}\n  {a : Set ι},\n  Set.PairwiseDisjoint a s →\n    (∀ (i : ι), i ∈ a → IsOpen (s i)) → (∀ (i : ι), i ∈ a → Set.Nonempty (s i)) → Set.Countable a :=\n\n/-- If a map is continuous on a separable set `s`, then the image of `s` is also separable. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : PseudoMetricSpace α] [inst_1 : TopologicalSpace β] {f : α → β} {s : Set α},\n  ContinuousOn f s → TopologicalSpace.IsSeparable s → TopologicalSpace.IsSeparable (f '' s) :=\n\n/-- Let `X` be a metric space. Let `K : ι → Set X` be a locally finite family of closed sets, let\n`U : ι → Set X` be a family of open sets such that `K i ⊆ U i` for all `i`. Then there exists a\npositive continuous function `δ : C(X, ℝ)` such that for any `i` and `x ∈ K i`, we have\n`Metric.closedBall x (δ x) ⊆ U i`. -/\ntheorem ∀ {ι : Type u_2} {X : Type u_1} [inst : MetricSpace X] {K U : ι → Set X},\n  (∀ (i : ι), IsClosed (K i)) →\n    (∀ (i : ι), IsOpen (U i)) →\n      (∀ (i : ι), K i ⊆ U i) →\n        LocallyFinite K → ∃ δ, (∀ (x : X), 0 < ↑δ x) ∧ ∀ (i : ι) (x : X), x ∈ K i → Metric.closedBall x (↑δ x) ⊆ U i :=\n\n/-- Let `X` be a metric space. Let `K : ι → Set X` be a locally finite family of closed sets, let\n`U : ι → Set X` be a family of open sets such that `K i ⊆ U i` for all `i`. Then there exists a\npositive continuous function `δ : C(X, ℝ≥0)` such that for any `i` and `x ∈ K i`, we have\n`Metric.closedBall x (δ x) ⊆ U i`. -/\ntheorem ∀ {ι : Type u_2} {X : Type u_1} [inst : MetricSpace X] {K U : ι → Set X},\n  (∀ (i : ι), IsClosed (K i)) →\n    (∀ (i : ι), IsOpen (U i)) →\n      (∀ (i : ι), K i ⊆ U i) →\n        LocallyFinite K → ∃ δ, (∀ (x : X), 0 < ↑δ x) ∧ ∀ (i : ι) (x : X), x ∈ K i → Metric.closedBall x ↑(↑δ x) ⊆ U i :=\n\n/-- In a separable space, a family of disjoint sets with nonempty interiors is countable. -/\ntheorem ∀ {α : Type u} [t : TopologicalSpace α] [inst : TopologicalSpace.SeparableSpace α] {ι : Type u_1} {s : ι → Set α}\n  {a : Set ι}, Set.PairwiseDisjoint a s → (∀ (i : ι), i ∈ a → Set.Nonempty (interior (s i))) → Set.Countable a :=\n\n/-- If there exists a countable family of open sets separating points of `s`, then there exists\na countable family of closed sets separating points of `s`. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X] {s : Set X} [h : HasCountableSeparatingOn X IsOpen s],\n  HasCountableSeparatingOn X IsClosed s :=\n\n/-- A limit (over a general filter) of measurable functions valued in a (pseudo) metrizable space is\nmeasurable. -/\ntheorem ∀ {α : Type u_2} {β : Type u_3} [inst : MeasurableSpace α] [inst_1 : TopologicalSpace β]\n  [inst_2 : TopologicalSpace.PseudoMetrizableSpace β] [inst_3 : MeasurableSpace β] [inst_4 : BorelSpace β]\n  {ι : Type u_1} {f : ι → α → β} {g : α → β} (u : Filter ι) [inst_5 : Filter.NeBot u]\n  [inst_6 : Filter.IsCountablyGenerated u], (∀ (i : ι), Measurable (f i)) → Filter.Tendsto f u (nhds g) → Measurable g :=\n\n/-- For any topological space `X`, its one point compactification is a compact space. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X], CompactSpace (OnePoint X) :=\n\n/-- Let `X` be a metric space in which every infinite subset has a limit point. Prove that `X` is separable. -/\ntheorem", "choices": ["∀ {X : Type u_1} [inst : MetricSpace X] [inst_1 : TopologicalSpace.HasCountableBasisOfCompactSubsetsWithLimit X],\n  TopologicalSpace.SeparableSpace X ", "∀ {X : Type u_1} [inst : MetricSpace X] [inst_1 : ∀ (A : Set X), Set.Infinite A → HasCountableLimitPoints A],\n  TopologicalSpace.SeparableSpace X ", "∀ {X : Type u_1} [inst : MetricSpace X] [inst_1 : TopologicalSpace.SeparableSpace X] (h : ∀ s : Set X, Set.Infinite s → ∃ x, IsLimitPoint s x),\n  TopologicalSpace.SeparableSpace X ", "∀ {X : Type u_1} [inst : MetricSpace X] [inst_1 : ∀ (s : Set X), Set.Infinite s → ∃ x, IsLimitPoint s x],\n  TopologicalSpace.SeparableSpace X ", "∀ {X : Type u_1} [inst : MetricSpace X] [inst_1 : ∀ (s : Set X), Set.Infinite s → ∃ (p : X), IsLimitPointOf s],\n  TopologicalSpace.SeparableSpace X ", "∀ (X : Type u_1) [inst : MetricSpace X] [inst_1 : TopologicalSpace X] (h : ∀ s : Set X, Set.Infinite s → Exists (fun {p} => HasMem.Mem p (closure s))),\n  TopologicalSpace.SeparableSpace X ", "∀ (X : Type u) [inst : MetricSpace X] [inst_1 : ∀ (s : Set X), Set.Infinite s → ∃ x, IsLimitPoint s x],\n  TopologicalSpace.SeparableSpace X ", "∀ {X : Type u_1} [inst : MetricSpace X] [inst_1 : TopologicalSpace.HasInfiniteSubsetLimitPoint X],\n  TopologicalSpace.SeparableSpace X ", "∀ {X : Type u_1} [inst : MetricSpace X] [inst_1 : EveryInfiniteSetHasLimitPoint X],\n  TopologicalSpace.SeparableSpace X ", "∀ {X : Type u_1} [inst : MetricSpace X] [H : ∀ (s : Set X), Set.Infinite s → Set.Nonempty (SetOf IsLimitPoint s)],\n  TopologicalSpace.SeparableSpace X "]}
{"docString": "Suppose `E⊆ℝ^k` is uncountable, and let `P` be the set of condensation points of `E`. Prove that `P` is perfect.", "prompts": "[{\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : UniformSpace α] [inst_1 : SemilatticeSup β] {K : Set α},\\n  IsComplete K → ∀ {u : β → α}, (∀ (n : β), u n ∈ K) → CauchySeq u → ∃ v, v ∈ K ∧ Filter.Tendsto u Filter.atTop (nhds v)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `K` is a complete subset, then any cauchy sequence in `K` converges to a point in `K` \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_2} {𝕜' : Type u_3} {E : Type u_4} {F : Type u_1} [inst : AddCommGroup E] [inst_1 : UniformSpace E]\\n  [inst_2 : UniformAddGroup E] [inst_3 : AddCommGroup F] [inst_4 : UniformSpace F]\\n  [inst_5 : TopologicalSpace.FirstCountableTopology E] [inst_6 : IsROrC 𝕜] [inst_7 : Module 𝕜 E]\\n  [inst_8 : ContinuousSMul 𝕜 E] [inst_9 : IsROrC 𝕜'] [inst_10 : Module 𝕜' F] [inst_11 : ContinuousSMul 𝕜' F]\\n  {σ : 𝕜 →+* 𝕜'} [inst_12 : UniformAddGroup F] (f : E →ₛₗ[σ] F),\\n  (∀ (s : Set E), Bornology.IsVonNBounded 𝕜 s → Bornology.IsVonNBounded 𝕜' (↑f '' s)) → Continuous ↑f\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `E` is first countable, then every locally bounded linear map `E →ₛₗ[σ] F` is continuous. \"},\n {\"theorem\":\n  \"∀ (F : Type u_2) [inst : Field F] (E : Type u_1) [inst_1 : Field E] [inst_2 : Algebra F E] [inst_3 : Finite E],\\n  ∃ α, F⟮α⟯ = ⊤\",\n  \"isProp\": true,\n  \"docString\": \"**Primitive element theorem** assuming E is finite. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : EMetricSpace α] {K : NNReal} {f : α → α} {s : Set α},\\n  IsComplete s →\\n    ∀ (hsf : Set.MapsTo f s s),\\n      ContractingWith K (Set.MapsTo.restrict f s s hsf) →\\n        ∀ {x : α},\\n          x ∈ s →\\n            edist x (f x) ≠ ⊤ →\\n              ∃ y,\\n                y ∈ s ∧\\n                  Function.IsFixedPt f y ∧\\n                    Filter.Tendsto (fun n => f^[n] x) Filter.atTop (nhds y) ∧\\n                      ∀ (n : ℕ), edist (f^[n] x) y ≤ edist x (f x) * ↑K ^ n / (1 - ↑K)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Banach fixed-point theorem for maps contracting on a complete subset. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {E : α → Type u_2} {p : ENNReal} [inst : (i : α) → NormedAddCommGroup (E i)] [_i : Fact (1 ≤ p)],\\n  UniformContinuous Subtype.val\",\n  \"isProp\": true,\n  \"docString\":\n  \"The coercion from `lp E p` to `∀ i, E i` is uniformly continuous. \"},\n {\"theorem\": \"∀ {p : ℕ}, (Summable fun n => 1 / ↑n ^ p) ↔ 1 < p\",\n  \"isProp\": true,\n  \"docString\": \"Summability of the `p`-series over `ℤ`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {s : Set α} {p : Filter ι},\\n  TendstoUniformlyOn F f p s → ∀ {x : α}, x ∈ s → Filter.Tendsto (fun n => F n x) p (nhds (f x))\",\n  \"isProp\": true,\n  \"docString\": \"Uniform converence implies pointwise convergence. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] {C : Set α} [inst_1 : TopologicalSpace.SecondCountableTopology α],\\n  IsClosed C → ¬Set.Countable C → ∃ D, Perfect D ∧ Set.Nonempty D ∧ D ⊆ C\",\n  \"isProp\": true,\n  \"docString\":\n  \"Any uncountable closed set in a second countable space contains a nonempty perfect subset.\"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] {C : Set α} [inst_1 : TopologicalSpace.SecondCountableTopology α],\\n  IsClosed C → ∃ V D, Set.Countable V ∧ Perfect D ∧ C = V ∪ D\",\n  \"isProp\": true,\n  \"docString\":\n  \"The **Cantor-Bendixson Theorem**: Any closed subset of a second countable space\\ncan be written as the union of a countable set and a perfect set.\"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : PseudoMetricSpace α] (s : Set α), UniformContinuous fun x => Metric.infNndist x s\",\n  \"isProp\": true,\n  \"docString\":\n  \"The minimal distance to a set (as `ℝ≥0`) is uniformly continuous in point \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {β : Type u_2} {ι : Type u_3} {m : MeasurableSpace α} [inst : MetricSpace β]\\n  {μ : MeasureTheory.Measure α} [inst_1 : SemilatticeSup ι] [inst_2 : Nonempty ι] [inst_3 : Countable ι] {f : ι → α → β}\\n  {g : α → β} [inst_4 : MeasureTheory.IsFiniteMeasure μ],\\n  (∀ (n : ι), MeasureTheory.StronglyMeasurable (f n)) →\\n    MeasureTheory.StronglyMeasurable g →\\n      (∀ᵐ (x : α) ∂μ, Filter.Tendsto (fun n => f n x) Filter.atTop (nhds (g x))) →\\n        ∀ {ε : ℝ}, 0 < ε → ∃ t, MeasurableSet t ∧ ↑↑μ t ≤ ENNReal.ofReal ε ∧ TendstoUniformlyOn f g Filter.atTop tᶜ\",\n  \"isProp\": true,\n  \"docString\": \"Egorov's theorem for finite measure spaces. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : CompactSpace α] [inst_2 : PseudoMetricSpace β]\\n  (s : Set β),\\n  IsCompact s →\\n    ∀ (A : Set (BoundedContinuousFunction α β)),\\n      IsClosed A →\\n        (∀ (f : BoundedContinuousFunction α β) (x : α), f ∈ A → ↑f x ∈ s) → (Equicontinuous fun x => ↑↑x) → IsCompact A\",\n  \"isProp\": true,\n  \"docString\":\n  \"Second version, with pointwise equicontinuity and range in a compact subset. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] {x₀ : α} {K : Set β},\\n  IsCompact K →\\n    ∀ {P : α → β → Prop},\\n      (∀ (y : β), y ∈ K → ∀ᶠ (z : α × β) in nhds (x₀, y), P z.fst z.snd) →\\n        ∀ᶠ (x : α) in nhds x₀, ∀ (y : β), y ∈ K → P x y\",\n  \"isProp\": true,\n  \"docString\":\n  \"To show that `∀ y ∈ K, P x y` holds for `x` close enough to `x₀` when `K` is compact,\\nit is sufficient to show that for all `y₀ ∈ K` there `P x y` holds for `(x, y)` close enough\\nto `(x₀, y₀)`.\\n\"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\\n  (K : Submodule 𝕜 E) [inst_3 : HasOrthogonalProjection K],\\n  ContinuousLinearMap.id 𝕜 E =\\n    ContinuousLinearMap.comp (Submodule.subtypeL K) (orthogonalProjection K) +\\n      ContinuousLinearMap.comp (Submodule.subtypeL Kᗮ) (orthogonalProjection Kᗮ)\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a complete space `E`, the projection maps onto a complete subspace `K` and its orthogonal\\ncomplement sum to the identity. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\\n  (K : Submodule 𝕜 E) [inst_3 : HasOrthogonalProjection K] (v : E), ∃ y, y ∈ K ∧ ∃ z, z ∈ Kᗮ ∧ v = y + z\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `K` is complete, any `v` in `E` can be expressed as a sum of elements of `K` and `Kᗮ`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {m0 : MeasurableSpace α} {μ : MeasureTheory.Measure α} {p : ℕ → α → Prop},\\n  ∑' (i : ℕ), ↑↑μ {x | p i x} ≠ ⊤ → ↑↑μ {x | ∃ᶠ (n : ℕ) in Filter.atTop, p n x} = 0\",\n  \"isProp\": true,\n  \"docString\":\n  \"A version of the **Borel-Cantelli lemma**: if `pᵢ` is a sequence of predicates such that\\n`∑ μ {x | pᵢ x}` is finite, then the measure of `x` such that `pᵢ x` holds frequently as `i → ∞` (or\\nequivalently, `pᵢ x` holds for infinitely many `i`) is equal to zero. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {E : Type u_2} [inst : NontriviallyNormedField 𝕜] [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] {f : 𝕜 → E} {r : ENNReal} {x : 𝕜} {p : FormalMultilinearSeries 𝕜 𝕜 E},\\n  HasFPowerSeriesOnBall f p x r →\\n    (∀ (r' : NNReal), 0 < r' → ∃ p', HasFPowerSeriesOnBall f p' x ↑r') → HasFPowerSeriesOnBall f p x ⊤\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a function `f : 𝕜 → E` has power series representation `p` on a ball of some radius and for\\neach positive radius it has some power series representation, then `p` converges to `f` on the whole\\n`𝕜`. \"},\n {\"theorem\":\n  \"∀ {p : ℕ} [inst : Fact (Nat.Prime p)] {f : CauSeq ℚ (padicNorm p)},\\n  ¬f ≈ 0 → ∃ N, ∀ (m n : ℕ), N ≤ m → N ≤ n → padicNorm p (↑f n) = padicNorm p (↑f m)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The `p`-adic norm of the entries of a nonzero Cauchy sequence of rationals is eventually\\nconstant. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : T2Space α] {s : Set α},\\n  IsCompact s →\\n    ∀ {ι : Type u_1} (t : Finset ι) (U : ι → Set α),\\n      (∀ (i : ι), i ∈ t → IsOpen (U i)) →\\n        s ⊆ ⋃ (i : ι) (_ : i ∈ t), U i →\\n          ∃ K, (∀ (i : ι), IsCompact (K i)) ∧ (∀ (i : ι), K i ⊆ U i) ∧ s = ⋃ (i : ι) (_ : i ∈ t), K i\",\n  \"isProp\": true,\n  \"docString\":\n  \"For every finite open cover `Uᵢ` of a compact set, there exists a compact cover `Kᵢ ⊆ Uᵢ`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] {C U : Set α}, Preperfect C → IsOpen U → Preperfect (U ∩ C)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The intersection of a preperfect set and an open set is preperfect. \"}]\n", "prompt_cons": "/-- If `K` is a complete subset, then any cauchy sequence in `K` converges to a point in `K` -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : UniformSpace α] [inst_1 : SemilatticeSup β] {K : Set α},\n  IsComplete K → ∀ {u : β → α}, (∀ (n : β), u n ∈ K) → CauchySeq u → ∃ v, v ∈ K ∧ Filter.Tendsto u Filter.atTop (nhds v) :=\n\n/-- If `E` is first countable, then every locally bounded linear map `E →ₛₗ[σ] F` is continuous. -/\ntheorem ∀ {𝕜 : Type u_2} {𝕜' : Type u_3} {E : Type u_4} {F : Type u_1} [inst : AddCommGroup E] [inst_1 : UniformSpace E]\n  [inst_2 : UniformAddGroup E] [inst_3 : AddCommGroup F] [inst_4 : UniformSpace F]\n  [inst_5 : TopologicalSpace.FirstCountableTopology E] [inst_6 : IsROrC 𝕜] [inst_7 : Module 𝕜 E]\n  [inst_8 : ContinuousSMul 𝕜 E] [inst_9 : IsROrC 𝕜'] [inst_10 : Module 𝕜' F] [inst_11 : ContinuousSMul 𝕜' F]\n  {σ : 𝕜 →+* 𝕜'} [inst_12 : UniformAddGroup F] (f : E →ₛₗ[σ] F),\n  (∀ (s : Set E), Bornology.IsVonNBounded 𝕜 s → Bornology.IsVonNBounded 𝕜' (↑f '' s)) → Continuous ↑f :=\n\n/-- **Primitive element theorem** assuming E is finite. -/\ntheorem ∀ (F : Type u_2) [inst : Field F] (E : Type u_1) [inst_1 : Field E] [inst_2 : Algebra F E] [inst_3 : Finite E],\n  ∃ α, F⟮α⟯ = ⊤ :=\n\n/-- Banach fixed-point theorem for maps contracting on a complete subset. -/\ntheorem ∀ {α : Type u_1} [inst : EMetricSpace α] {K : NNReal} {f : α → α} {s : Set α},\n  IsComplete s →\n    ∀ (hsf : Set.MapsTo f s s),\n      ContractingWith K (Set.MapsTo.restrict f s s hsf) →\n        ∀ {x : α},\n          x ∈ s →\n            edist x (f x) ≠ ⊤ →\n              ∃ y,\n                y ∈ s ∧\n                  Function.IsFixedPt f y ∧\n                    Filter.Tendsto (fun n => f^[n] x) Filter.atTop (nhds y) ∧\n                      ∀ (n : ℕ), edist (f^[n] x) y ≤ edist x (f x) * ↑K ^ n / (1 - ↑K) :=\n\n/-- The coercion from `lp E p` to `∀ i, E i` is uniformly continuous. -/\ntheorem ∀ {α : Type u_1} {E : α → Type u_2} {p : ENNReal} [inst : (i : α) → NormedAddCommGroup (E i)] [_i : Fact (1 ≤ p)],\n  UniformContinuous Subtype.val :=\n\n/-- Summability of the `p`-series over `ℤ`. -/\ntheorem ∀ {p : ℕ}, (Summable fun n => 1 / ↑n ^ p) ↔ 1 < p :=\n\n/-- Uniform converence implies pointwise convergence. -/\ntheorem ∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {s : Set α} {p : Filter ι},\n  TendstoUniformlyOn F f p s → ∀ {x : α}, x ∈ s → Filter.Tendsto (fun n => F n x) p (nhds (f x)) :=\n\n/-- Any uncountable closed set in a second countable space contains a nonempty perfect subset. -/\ntheorem ∀ {α : Type u_1} [inst : TopologicalSpace α] {C : Set α} [inst_1 : TopologicalSpace.SecondCountableTopology α],\n  IsClosed C → ¬Set.Countable C → ∃ D, Perfect D ∧ Set.Nonempty D ∧ D ⊆ C :=\n\n/-- The **Cantor-Bendixson Theorem**: Any closed subset of a second countable space\ncan be written as the union of a countable set and a perfect set. -/\ntheorem ∀ {α : Type u_1} [inst : TopologicalSpace α] {C : Set α} [inst_1 : TopologicalSpace.SecondCountableTopology α],\n  IsClosed C → ∃ V D, Set.Countable V ∧ Perfect D ∧ C = V ∪ D :=\n\n/-- The minimal distance to a set (as `ℝ≥0`) is uniformly continuous in point -/\ntheorem ∀ {α : Type u} [inst : PseudoMetricSpace α] (s : Set α), UniformContinuous fun x => Metric.infNndist x s :=\n\n/-- Egorov's theorem for finite measure spaces. -/\ntheorem ∀ {α : Type u_1} {β : Type u_2} {ι : Type u_3} {m : MeasurableSpace α} [inst : MetricSpace β]\n  {μ : MeasureTheory.Measure α} [inst_1 : SemilatticeSup ι] [inst_2 : Nonempty ι] [inst_3 : Countable ι] {f : ι → α → β}\n  {g : α → β} [inst_4 : MeasureTheory.IsFiniteMeasure μ],\n  (∀ (n : ι), MeasureTheory.StronglyMeasurable (f n)) →\n    MeasureTheory.StronglyMeasurable g →\n      (∀ᵐ (x : α) ∂μ, Filter.Tendsto (fun n => f n x) Filter.atTop (nhds (g x))) →\n        ∀ {ε : ℝ}, 0 < ε → ∃ t, MeasurableSet t ∧ ↑↑μ t ≤ ENNReal.ofReal ε ∧ TendstoUniformlyOn f g Filter.atTop tᶜ :=\n\n/-- Second version, with pointwise equicontinuity and range in a compact subset. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : CompactSpace α] [inst_2 : PseudoMetricSpace β]\n  (s : Set β),\n  IsCompact s →\n    ∀ (A : Set (BoundedContinuousFunction α β)),\n      IsClosed A →\n        (∀ (f : BoundedContinuousFunction α β) (x : α), f ∈ A → ↑f x ∈ s) → (Equicontinuous fun x => ↑↑x) → IsCompact A :=\n\n/-- To show that `∀ y ∈ K, P x y` holds for `x` close enough to `x₀` when `K` is compact,\nit is sufficient to show that for all `y₀ ∈ K` there `P x y` holds for `(x, y)` close enough\nto `(x₀, y₀)`. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] {x₀ : α} {K : Set β},\n  IsCompact K →\n    ∀ {P : α → β → Prop},\n      (∀ (y : β), y ∈ K → ∀ᶠ (z : α × β) in nhds (x₀, y), P z.fst z.snd) →\n        ∀ᶠ (x : α) in nhds x₀, ∀ (y : β), y ∈ K → P x y :=\n\n/-- In a complete space `E`, the projection maps onto a complete subspace `K` and its orthogonal\ncomplement sum to the identity. -/\ntheorem ∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  (K : Submodule 𝕜 E) [inst_3 : HasOrthogonalProjection K],\n  ContinuousLinearMap.id 𝕜 E =\n    ContinuousLinearMap.comp (Submodule.subtypeL K) (orthogonalProjection K) +\n      ContinuousLinearMap.comp (Submodule.subtypeL Kᗮ) (orthogonalProjection Kᗮ) :=\n\n/-- If `K` is complete, any `v` in `E` can be expressed as a sum of elements of `K` and `Kᗮ`. -/\ntheorem ∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  (K : Submodule 𝕜 E) [inst_3 : HasOrthogonalProjection K] (v : E), ∃ y, y ∈ K ∧ ∃ z, z ∈ Kᗮ ∧ v = y + z :=\n\n/-- A version of the **Borel-Cantelli lemma**: if `pᵢ` is a sequence of predicates such that\n`∑ μ {x | pᵢ x}` is finite, then the measure of `x` such that `pᵢ x` holds frequently as `i → ∞` (or\nequivalently, `pᵢ x` holds for infinitely many `i`) is equal to zero. -/\ntheorem ∀ {α : Type u_1} {m0 : MeasurableSpace α} {μ : MeasureTheory.Measure α} {p : ℕ → α → Prop},\n  ∑' (i : ℕ), ↑↑μ {x | p i x} ≠ ⊤ → ↑↑μ {x | ∃ᶠ (n : ℕ) in Filter.atTop, p n x} = 0 :=\n\n/-- If a function `f : 𝕜 → E` has power series representation `p` on a ball of some radius and for\neach positive radius it has some power series representation, then `p` converges to `f` on the whole\n`𝕜`. -/\ntheorem ∀ {𝕜 : Type u_1} {E : Type u_2} [inst : NontriviallyNormedField 𝕜] [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E] {f : 𝕜 → E} {r : ENNReal} {x : 𝕜} {p : FormalMultilinearSeries 𝕜 𝕜 E},\n  HasFPowerSeriesOnBall f p x r →\n    (∀ (r' : NNReal), 0 < r' → ∃ p', HasFPowerSeriesOnBall f p' x ↑r') → HasFPowerSeriesOnBall f p x ⊤ :=\n\n/-- The `p`-adic norm of the entries of a nonzero Cauchy sequence of rationals is eventually\nconstant. -/\ntheorem ∀ {p : ℕ} [inst : Fact (Nat.Prime p)] {f : CauSeq ℚ (padicNorm p)},\n  ¬f ≈ 0 → ∃ N, ∀ (m n : ℕ), N ≤ m → N ≤ n → padicNorm p (↑f n) = padicNorm p (↑f m) :=\n\n/-- For every finite open cover `Uᵢ` of a compact set, there exists a compact cover `Kᵢ ⊆ Uᵢ`. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : T2Space α] {s : Set α},\n  IsCompact s →\n    ∀ {ι : Type u_1} (t : Finset ι) (U : ι → Set α),\n      (∀ (i : ι), i ∈ t → IsOpen (U i)) →\n        s ⊆ ⋃ (i : ι) (_ : i ∈ t), U i →\n          ∃ K, (∀ (i : ι), IsCompact (K i)) ∧ (∀ (i : ι), K i ⊆ U i) ∧ s = ⋃ (i : ι) (_ : i ∈ t), K i :=\n\n/-- The intersection of a preperfect set and an open set is preperfect. -/\ntheorem ∀ {α : Type u_1} [inst : TopologicalSpace α] {C U : Set α}, Preperfect C → IsOpen U → Preperfect (U ∩ C) :=\n\n/-- Suppose `E⊆ℝ^k` is uncountable, and let `P` be the set of condensation points of `E`. Prove that `P` is perfect. -/\ntheorem", "choices": ["∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace.SecondCountableTopology α] [inst_2 : T2Space α],\n  ∀ {E : Set α}, Uncountable E → Preperfect (CondensationPoints α E) ", "∀ {α : Type u_1} [inst : TopologicalSpace α] {E : Set α} [inst_1 : TopologicalSpace.SecondCountableTopology α],\n  ¬Set.Countable E →\n    ∃ P, Perfect P ∧ Set.Nonempty P ∧ ∀ (x : α), IsCondensationPoint x E ↔ x ∈ P ", "forall {k : ℕ} {E : Set (Finₓ k → ℝ)}, ¬Set.Countable E →\n  let P ", "∀ {k : ℕ} {E : Set (EuclideanSpace ℝ k)},\n  ¬Set.Countable E →\n    let P ", "∀ {k : ℕ} {E : Set (Finₓ (k + 1) → ℝ)}, ¬Set.Countable E →\n  ∃ P, Perfect P ∧ P ⊆ E ∧ P = {x | ∀ (n : ℕ), ∃ r, 0 < r ∧ ClosedBall x r ∩ E ⊆ ClosedBall x r ∩ P} ", "∀ {k : ℕ} {E : Set (EuclideanSpace ℝ k)} [_inst_1 : TopologicalSpace.SecondCountableTopology (EuclideanSpace ℝ k)],\n  ¬Set.Countable E →\n    ∀ {P : Set (EuclideanSpace ℝ k)},\n      P = {x : EuclideanSpace ℝ k | Filter.IsCondensationPt x (Filter.principal E)} → Perfect P ", "forall {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace.SecondCountableTopology α] [inst_2 : LinearOrder α] [inst_3 : OrderTopology α],\n  (Exists fun [Nonempty α] => True) →\n  ∀ {E : Set α}, Set.Countable Eᶜ →\n    let P ", "∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace.SecondCountableTopology α] {C : Set α} {E : Set α},\n  IsCondensationPointOf C E →\n    ¬Set.Countable E →\n      Perfect C ", "∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace.SecondCountableTopology α] {E : Set α},\n  ¬Set.Countable E →\n    ∀ {P : Set α}, P = CondensationPoints E → Perfect P ", "∀ {α : Type u_1} [inst : TopologicalSpace α] {E : Set α} [inst_1 : TopologicalSpace.SecondCountableTopology α] [inst_2 : LinearOrder α] [inst_3 : OrderTopology α],\n  ¬Set.Countable E →\n    let P "]}
{"docString": "Prove that every closed set in a separable metric space is the union of a (possibly empty) perfect set and a set which is at most countable.", "prompts": "[{\"theorem\":\n  \"∀ {γ : Type w} [inst : EMetricSpace γ] {s : Set γ}, IsCompact s → ∃ t, t ⊆ s ∧ Set.Countable t ∧ s = closure t\",\n  \"isProp\": true,\n  \"docString\":\n  \"A compact set in an emetric space is separable, i.e., it is the closure of a countable set. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] {C : Set α} [inst_1 : TopologicalSpace.SecondCountableTopology α],\\n  IsClosed C → ¬Set.Countable C → ∃ D, Perfect D ∧ Set.Nonempty D ∧ D ⊆ C\",\n  \"isProp\": true,\n  \"docString\":\n  \"Any uncountable closed set in a second countable space contains a nonempty perfect subset.\"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : PseudoEMetricSpace α] {s : Set α}, IsCompact s → ∃ t, t ⊆ s ∧ Set.Countable t ∧ s ⊆ closure t\",\n  \"isProp\": true,\n  \"docString\":\n  \"A compact set in a pseudo emetric space is separable, i.e., it is a subset of the closure of a\\ncountable set.  \"},\n {\"theorem\":\n  \"∀ {α : Type u} [t : TopologicalSpace α] [inst : TopologicalSpace.SecondCountableTopology α] {ι : Type u_1}\\n  (s : ι → Set α), (∀ (i : ι), IsOpen (s i)) → ∃ T, Set.Countable T ∧ ⋃ (i : ι) (_ : i ∈ T), s i = ⋃ (i : ι), s i\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a second-countable space, an open set, given as a union of open sets,\\nis equal to the union of countably many of those sets. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] {C : Set α} [inst_1 : TopologicalSpace.SecondCountableTopology α],\\n  IsClosed C → ∃ V D, Set.Countable V ∧ Perfect D ∧ C = V ∪ D\",\n  \"isProp\": true,\n  \"docString\":\n  \"The **Cantor-Bendixson Theorem**: Any closed subset of a second countable space\\ncan be written as the union of a countable set and a perfect set.\"},\n {\"theorem\":\n  \"∀ {α : Type u} [t : TopologicalSpace α] [inst : TopologicalSpace.SeparableSpace α] {ι : Type u_1} {s : ι → Set α}\\n  {a : Set ι},\\n  Set.PairwiseDisjoint a s →\\n    (∀ (i : ι), i ∈ a → IsOpen (s i)) → (∀ (i : ι), i ∈ a → Set.Nonempty (s i)) → Set.Countable a\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a separable space, a family of nonempty disjoint open sets is countable. \"},\n {\"theorem\":\n  \"∀ {ι : Type u_2} {E : ι → Type u_1} [inst : (i : ι) → MetricSpace (E i)] [inst_1 : ∀ (i : ι), CompleteSpace (E i)],\\n  CompleteSpace ((i : ι) × E i)\",\n  \"isProp\": true,\n  \"docString\": \"A disjoint union of complete metric spaces is complete. \"},\n {\"theorem\":\n  \"∀ {ι : Type u_1} {X : ι → Type u_2} [inst : (i : ι) → TopologicalSpace (X i)]\\n  [inst_1 : ∀ (i : ι), TopologicalSpace.SeparableSpace (X i)] [inst_2 : Countable ι],\\n  TopologicalSpace.SeparableSpace ((i : ι) → X i)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The product of a countable family of separable spaces is a separable space. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [t : TopologicalSpace α] [inst : TopologicalSpace.SeparableSpace α] {ι : Type u_1} {s : ι → Set α}\\n  {a : Set ι}, Set.PairwiseDisjoint a s → (∀ (i : ι), i ∈ a → Set.Nonempty (interior (s i))) → Set.Countable a\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a separable space, a family of disjoint sets with nonempty interiors is countable. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {ι : Type u_1} [inst : MeasurableSpace α] (μ : MeasureTheory.Measure α) {As : ι → Set α},\\n  (∀ (i : ι), MeasurableSet (As i)) →\\n    Pairwise (Disjoint on As) → ↑↑μ (⋃ (i : ι), As i) ≠ ⊤ → Set.Countable {i | 0 < ↑↑μ (As i)}\",\n  \"isProp\": true,\n  \"docString\":\n  \"If the union of disjoint measurable sets has finite measure, then there are only\\ncountably many members of the union whose measure is positive. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {ι : Type u_1} [inst : MeasurableSpace α] (μ : MeasureTheory.Measure α) {ε : ENNReal},\\n  0 < ε →\\n    ∀ {As : ι → Set α},\\n      (∀ (i : ι), MeasurableSet (As i)) →\\n        Pairwise (Disjoint on As) → ↑↑μ (⋃ (i : ι), As i) ≠ ⊤ → Set.Finite {i | ε ≤ ↑↑μ (As i)}\",\n  \"isProp\": true,\n  \"docString\":\n  \"If the union of disjoint measurable sets has finite measure, then there are only\\nfinitely many members of the union whose measure exceeds any given positive number. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [t : TopologicalSpace α] [inst : DiscreteTopology α], TopologicalSpace.SeparableSpace α ↔ Countable α\",\n  \"isProp\": true,\n  \"docString\":\n  \"A topological space with discrete topology is separable iff it is countable. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : UniformSpace X] [inst_1 : Filter.IsCountablyGenerated (uniformity X)],\\n  TopologicalSpace.PseudoMetrizableSpace X\",\n  \"isProp\": true,\n  \"docString\":\n  \"A uniform space with countably generated `𝓤 X` is pseudo metrizable. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : PseudoMetricSpace α] {s : Set α},\\n  IsCompact s → ∀ {e : ℝ}, 0 < e → ∃ t, t ⊆ s ∧ Set.Finite t ∧ s ⊆ ⋃ (x : α) (_ : x ∈ t), Metric.ball x e\",\n  \"isProp\": true,\n  \"docString\":\n  \"Any compact set in a pseudometric space can be covered by finitely many balls of a given\\npositive radius \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : PseudoEMetricSpace X] [inst_1 : MeasurableSpace X] (μ : MeasureTheory.Measure X),\\n  MeasureTheory.Measure.InnerRegular μ IsClosed IsOpen\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a metric space (or even a pseudo emetric space), an open set can be approximated from inside\\nby closed sets. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : PseudoMetricSpace α] {s : Set α} {x : α}, Set.Nonempty s → EMetric.infEdist x s ≠ ⊤\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a metric space, the minimal edistance to a nonempty set is finite. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] {s : Set X} [h : HasCountableSeparatingOn X IsOpen s],\\n  HasCountableSeparatingOn X IsClosed s\",\n  \"isProp\": true,\n  \"docString\":\n  \"If there exists a countable family of open sets separating points of `s`, then there exists\\na countable family of closed sets separating points of `s`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace.NoetherianSpace α] {s : Set α},\\n  IsClosed s →\\n    ∃ S, Set.Finite S ∧ (∀ (t : Set α), t ∈ S → IsClosed t) ∧ (∀ (t : Set α), t ∈ S → IsIrreducible t) ∧ s = ⋃₀ S\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a Noetherian space, every closed set is a finite union of irreducible closed sets. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : MetricSpace α],\\n  (∀ (ε : ℝ), ε > 0 → ∃ β x F, ∀ (x y : α), F x = F y → dist x y ≤ ε) → TopologicalSpace.SecondCountableTopology α\",\n  \"isProp\": true,\n  \"docString\":\n  \"A metric space is second countable if one can reconstruct up to any `ε>0` any element of the\\nspace from countably many data. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] [h : TopologicalSpace.PseudoMetrizableSpace X],\\n  TopologicalSpace.FirstCountableTopology X\",\n  \"isProp\": true,\n  \"docString\": \"Every pseudo-metrizable space is first countable. \"}]\n", "prompt_cons": "/-- A compact set in an emetric space is separable, i.e., it is the closure of a countable set. -/\ntheorem ∀ {γ : Type w} [inst : EMetricSpace γ] {s : Set γ}, IsCompact s → ∃ t, t ⊆ s ∧ Set.Countable t ∧ s = closure t :=\n\n/-- Any uncountable closed set in a second countable space contains a nonempty perfect subset. -/\ntheorem ∀ {α : Type u_1} [inst : TopologicalSpace α] {C : Set α} [inst_1 : TopologicalSpace.SecondCountableTopology α],\n  IsClosed C → ¬Set.Countable C → ∃ D, Perfect D ∧ Set.Nonempty D ∧ D ⊆ C :=\n\n/-- A compact set in a pseudo emetric space is separable, i.e., it is a subset of the closure of a\ncountable set. -/\ntheorem ∀ {α : Type u} [inst : PseudoEMetricSpace α] {s : Set α}, IsCompact s → ∃ t, t ⊆ s ∧ Set.Countable t ∧ s ⊆ closure t :=\n\n/-- In a second-countable space, an open set, given as a union of open sets,\nis equal to the union of countably many of those sets. -/\ntheorem ∀ {α : Type u} [t : TopologicalSpace α] [inst : TopologicalSpace.SecondCountableTopology α] {ι : Type u_1}\n  (s : ι → Set α), (∀ (i : ι), IsOpen (s i)) → ∃ T, Set.Countable T ∧ ⋃ (i : ι) (_ : i ∈ T), s i = ⋃ (i : ι), s i :=\n\n/-- The **Cantor-Bendixson Theorem**: Any closed subset of a second countable space\ncan be written as the union of a countable set and a perfect set. -/\ntheorem ∀ {α : Type u_1} [inst : TopologicalSpace α] {C : Set α} [inst_1 : TopologicalSpace.SecondCountableTopology α],\n  IsClosed C → ∃ V D, Set.Countable V ∧ Perfect D ∧ C = V ∪ D :=\n\n/-- In a separable space, a family of nonempty disjoint open sets is countable. -/\ntheorem ∀ {α : Type u} [t : TopologicalSpace α] [inst : TopologicalSpace.SeparableSpace α] {ι : Type u_1} {s : ι → Set α}\n  {a : Set ι},\n  Set.PairwiseDisjoint a s →\n    (∀ (i : ι), i ∈ a → IsOpen (s i)) → (∀ (i : ι), i ∈ a → Set.Nonempty (s i)) → Set.Countable a :=\n\n/-- A disjoint union of complete metric spaces is complete. -/\ntheorem ∀ {ι : Type u_2} {E : ι → Type u_1} [inst : (i : ι) → MetricSpace (E i)] [inst_1 : ∀ (i : ι), CompleteSpace (E i)],\n  CompleteSpace ((i : ι) × E i) :=\n\n/-- The product of a countable family of separable spaces is a separable space. -/\ntheorem ∀ {ι : Type u_1} {X : ι → Type u_2} [inst : (i : ι) → TopologicalSpace (X i)]\n  [inst_1 : ∀ (i : ι), TopologicalSpace.SeparableSpace (X i)] [inst_2 : Countable ι],\n  TopologicalSpace.SeparableSpace ((i : ι) → X i) :=\n\n/-- In a separable space, a family of disjoint sets with nonempty interiors is countable. -/\ntheorem ∀ {α : Type u} [t : TopologicalSpace α] [inst : TopologicalSpace.SeparableSpace α] {ι : Type u_1} {s : ι → Set α}\n  {a : Set ι}, Set.PairwiseDisjoint a s → (∀ (i : ι), i ∈ a → Set.Nonempty (interior (s i))) → Set.Countable a :=\n\n/-- If the union of disjoint measurable sets has finite measure, then there are only\ncountably many members of the union whose measure is positive. -/\ntheorem ∀ {α : Type u_2} {ι : Type u_1} [inst : MeasurableSpace α] (μ : MeasureTheory.Measure α) {As : ι → Set α},\n  (∀ (i : ι), MeasurableSet (As i)) →\n    Pairwise (Disjoint on As) → ↑↑μ (⋃ (i : ι), As i) ≠ ⊤ → Set.Countable {i | 0 < ↑↑μ (As i)} :=\n\n/-- If the union of disjoint measurable sets has finite measure, then there are only\nfinitely many members of the union whose measure exceeds any given positive number. -/\ntheorem ∀ {α : Type u_2} {ι : Type u_1} [inst : MeasurableSpace α] (μ : MeasureTheory.Measure α) {ε : ENNReal},\n  0 < ε →\n    ∀ {As : ι → Set α},\n      (∀ (i : ι), MeasurableSet (As i)) →\n        Pairwise (Disjoint on As) → ↑↑μ (⋃ (i : ι), As i) ≠ ⊤ → Set.Finite {i | ε ≤ ↑↑μ (As i)} :=\n\n/-- A topological space with discrete topology is separable iff it is countable. -/\ntheorem ∀ {α : Type u} [t : TopologicalSpace α] [inst : DiscreteTopology α], TopologicalSpace.SeparableSpace α ↔ Countable α :=\n\n/-- A uniform space with countably generated `𝓤 X` is pseudo metrizable. -/\ntheorem ∀ {X : Type u_1} [inst : UniformSpace X] [inst_1 : Filter.IsCountablyGenerated (uniformity X)],\n  TopologicalSpace.PseudoMetrizableSpace X :=\n\n/-- Any compact set in a pseudometric space can be covered by finitely many balls of a given\npositive radius -/\ntheorem ∀ {α : Type u} [inst : PseudoMetricSpace α] {s : Set α},\n  IsCompact s → ∀ {e : ℝ}, 0 < e → ∃ t, t ⊆ s ∧ Set.Finite t ∧ s ⊆ ⋃ (x : α) (_ : x ∈ t), Metric.ball x e :=\n\n/-- In a metric space (or even a pseudo emetric space), an open set can be approximated from inside\nby closed sets. -/\ntheorem ∀ {X : Type u_1} [inst : PseudoEMetricSpace X] [inst_1 : MeasurableSpace X] (μ : MeasureTheory.Measure X),\n  MeasureTheory.Measure.InnerRegular μ IsClosed IsOpen :=\n\n/-- In a metric space, the minimal edistance to a nonempty set is finite. -/\ntheorem ∀ {α : Type u} [inst : PseudoMetricSpace α] {s : Set α} {x : α}, Set.Nonempty s → EMetric.infEdist x s ≠ ⊤ :=\n\n/-- If there exists a countable family of open sets separating points of `s`, then there exists\na countable family of closed sets separating points of `s`. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X] {s : Set X} [h : HasCountableSeparatingOn X IsOpen s],\n  HasCountableSeparatingOn X IsClosed s :=\n\n/-- In a Noetherian space, every closed set is a finite union of irreducible closed sets. -/\ntheorem ∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace.NoetherianSpace α] {s : Set α},\n  IsClosed s →\n    ∃ S, Set.Finite S ∧ (∀ (t : Set α), t ∈ S → IsClosed t) ∧ (∀ (t : Set α), t ∈ S → IsIrreducible t) ∧ s = ⋃₀ S :=\n\n/-- A metric space is second countable if one can reconstruct up to any `ε>0` any element of the\nspace from countably many data. -/\ntheorem ∀ {α : Type u} [inst : MetricSpace α],\n  (∀ (ε : ℝ), ε > 0 → ∃ β x F, ∀ (x y : α), F x = F y → dist x y ≤ ε) → TopologicalSpace.SecondCountableTopology α :=\n\n/-- Every pseudo-metrizable space is first countable. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X] [h : TopologicalSpace.PseudoMetrizableSpace X],\n  TopologicalSpace.FirstCountableTopology X :=\n\n/-- Prove that every closed set in a separable metric space is the union of a (possibly empty) perfect set and a set which is at most countable. -/\ntheorem", "choices": ["∀ {α : Type u} [inst : MetricSpace α] [inst_1 : TopologicalSpace.SeparableSpace α] {s : Set α},\n  IsClosed s →\n    ∃ (P : Set α), ∃ (C : Set α),\n      Perfect P ∧ Set.Countable C ∧ s = P ∪ C ", "∀ {α : Type u} [inst : MetricSpace α] [inst_2 : TopologicalSpace.SeparableSpace α] {s : Set α},\n  IsClosed s → ∃ P A, Perfect P ∧ Set.Countable A ∧ s = P ∪ A ", "∀ {α : Type u} [inst : MetricSpace α] [inst_1 : TopologicalSpace.SeparableSpace α] {s : Set α},\n  IsClosed s → ∃ P A, Perfect P ∧ Set.Countable A ∧ s = P ∪ A ", "forall {α : Type u} [inst : MetricSpace α] [TopologicalSpace.SeparableSpace α] {s : Set α},\n  IsClosed s → ∃ t, Set.Countable t ∧ s = (s \\ t) ∪ (s ∩ t) ∧ Perfect (s \\ t) ", "∀ {α : Type u} [inst : MetricSpace α] [inst_1 : TopologicalSpace.SeparableSpace α] {s : Set α},\n  IsClosed s → ∃ t₁ t₂, t₁ ⊆ s ∧ t₂ ⊆ s ∧ Perfect t₁ ∧ Set.Countable t₂ ∧ s = t₁ ∪ t₂ ", "∀ {α : Type u} [inst : MetricSpace α] [inst_2 : TopologicalSpace.SeparableSpace α] {C : Set α},\n  IsClosed C → ∃ P V, Perfect P ∧ Set.Countable V ∧ C = P ∪ V ", "∀ {α : Type u} [inst : MetricSpace α] [inst_1 : TopologicalSpace.SeparableSpace α] {s : Set α},\n  IsClosed s → ∃ t₁ t₂, Perfect t₁ ∧ Set.Countable t₂ ∧ s = t₁ ∪ t₂ ", "∀ {α : Type u} [inst : MetricSpace α] [inst_1 : TopologicalSpace.SeparableSpace α] {s : Set α},\n  IsClosed s → ∃ t₁ t₂, Perfect t₁ ∧ Set.Countable t₂ ∧ s = t₁ ∪ t₂ ", "forall {α : Type u} [inst : MetricSpace α] [inst_1 : TopologicalSpace.SeparableSpace α] {s : Set α},\n  IsClosed s → ∃ t₁ t₂, Perfect t₁ ∧ Set.Countable t₂ ∧ s = t₁ ∪ t₂ ", "∀ {α : Type u} [inst : MetricSpace α] [inst_1 : TopologicalSpace.SeparableSpace α] {s : Set α},\n  IsClosed s → ∃ t₁ t₂, Set.Countable t₁ ∧ Perfect t₂ ∧ s = t₁ ∪ t₂ "]}
{"docString": "Prove that convergence of `{s_n}` implies convergence of `{|s_n|}`.", "prompts": "[{\"theorem\":\n  \"∀ {α : Type u} [inst : Preorder α] {s t : Set α}, BddBelow s → BddBelow (s ∩ t)\",\n  \"isProp\": true,\n  \"docString\": \"If `s` is bounded, then so is `s ∩ t` \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : PseudoMetricSpace α] [inst_1 : Nonempty β] [inst_2 : SemilatticeSup β] {s : β → α}\\n  (b : β → ℝ), (∀ (n m : β), n ≤ m → dist (s n) (s m) ≤ b n) → Filter.Tendsto b Filter.atTop (nhds 0) → CauchySeq s\",\n  \"isProp\": true,\n  \"docString\":\n  \"If the distance between `s n` and `s m`, `n ≤ m` is bounded above by `b n`\\nand `b` converges to zero, then `s` is a Cauchy sequence.  \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {m : MeasurableSpace α} {μ : MeasureTheory.Measure α} {s : ℕ → Set α},\\n  ∑' (i : ℕ), ↑↑μ (s i) ≠ ⊤ → ↑↑μ (Filter.limsup s Filter.atTop) = 0\",\n  \"isProp\": true,\n  \"docString\":\n  \"One direction of the **Borel-Cantelli lemma**: if (sᵢ) is a sequence of sets such\\nthat `∑ μ sᵢ` is finite, then the limit superior of the `sᵢ` is a null set. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : Preorder α] {s : Set α},\\n  Set.OrdConnected s ↔ ∀ (x : α), x ∈ s → ∀ (y : α), y ∈ s → x ≤ y → Set.Icc x y ⊆ s\",\n  \"isProp\": true,\n  \"docString\": \"It suffices to prove `[[x, y]] ⊆ s` for `x y ∈ s`, `x ≤ y`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {s : Set α} {p : Filter ι}\\n  [inst_1 : TopologicalSpace α], IsCompact s → (TendstoLocallyUniformlyOn F f p s ↔ TendstoUniformlyOn F f p s)\",\n  \"isProp\": true,\n  \"docString\":\n  \"For a compact set `s`, locally uniform convergence on `s` is just uniform convergence on `s`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : PseudoMetricSpace α] [inst_1 : Nonempty β] [inst_2 : SemilatticeSup β] {s : β → α}\\n  (b : β → ℝ),\\n  (∀ (n m N : β), N ≤ n → N ≤ m → dist (s n) (s m) ≤ b N) → Filter.Tendsto b Filter.atTop (nhds 0) → CauchySeq s\",\n  \"isProp\": true,\n  \"docString\":\n  \"If the distance between `s n` and `s m`, `n, m ≥ N` is bounded above by `b N`\\nand `b` converges to zero, then `s` is a Cauchy sequence.  \"},\n {\"theorem\":\n  \"∀ {R : Type u} [inst : CommSemiring R] {S : Type u_1} [inst_1 : CommRing S] [inst_2 : Algebra R S] (S' : Subalgebra R S)\\n  {ι : Type u_2} (ι' : Finset ι) (s l : ι → S),\\n  (Finset.sum ι' fun i => l i * s i) = 1 →\\n    (∀ (i : ι), s i ∈ S') → (∀ (i : ι), l i ∈ S') → ∀ (x : S), (∀ (i : ι), ∃ n, s i ^ n • x ∈ S') → x ∈ S'\",\n  \"isProp\": true,\n  \"docString\":\n  \"Suppose we are given `∑ i, lᵢ * sᵢ = 1` in `S`, and `S'` a subalgebra of `S` that contains\\n`lᵢ` and `sᵢ`. To check that an `x : S` falls in `S'`, we only need to show that\\n`sᵢ ^ n • x ∈ S'` for some `n` for each `sᵢ`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : Preorder α] {s t : Set α}, BddAbove t → BddAbove (s ∩ t)\",\n  \"isProp\": true,\n  \"docString\": \"If `t` is bounded, then so is `s ∩ t` \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {s : Set α} {p : Filter ι} {c : β},\\n  Filter.Tendsto (↿F) (p ×ˢ Filter.principal s) (nhds c) ↔ TendstoUniformlyOn F (fun x => c) p s\",\n  \"isProp\": true,\n  \"docString\":\n  \"Uniform convergence on a set `s` to a constant function is equivalent to convergence in\\n`p ×ˢ 𝓟 s`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u} [inst : NontriviallyNormedField 𝕜] {E : Type uE} [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] {F : Type uF} [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] {s : Set E}\\n  {f f₁ : E → F} {n : ℕ∞} {p : E → FormalMultilinearSeries 𝕜 E F},\\n  HasFTaylorSeriesUpToOn n f p s → (∀ (x : E), x ∈ s → f₁ x = f x) → HasFTaylorSeriesUpToOn n f₁ p s\",\n  \"isProp\": true,\n  \"docString\":\n  \"If two functions coincide on a set `s`, then a Taylor series for the first one is as well a\\nTaylor series for the second one. \"},\n {\"theorem\":\n  \"∀ {R : Type u_1} [inst : NormedRing R] (k : ℕ) {r₁ : R} {r₂ : ℝ},\\n  ‖r₁‖ < r₂ → (fun n => ↑n ^ k * r₁ ^ n) =o[Filter.atTop] fun n => r₂ ^ n\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `‖r₁‖ < r₂`, then for any natural `k` we have `n ^ k r₁ ^ n = o (r₂ ^ n)` as `n → ∞`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {p : Filter ι} {g : ι → β} {b : β},\\n  Filter.Tendsto g p (nhds b) → ∀ (s : Set α), TendstoUniformlyOn (fun n x => g n) (fun x => b) p s\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a sequence `g` converges to some `b`, then the sequence of constant functions\\n`fun n ↦ fun a ↦ g n` converges to the constant function `fun a ↦ b` on any set `s` \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {β : Type u_1} [inst : MeasurableSpace α] [inst_1 : MeasurableSpace β] {μ : MeasureTheory.Measure α}\\n  {ν : MeasureTheory.Measure β} [inst_2 : MeasureTheory.SigmaFinite ν] {s : Set (α × β)},\\n  ↑↑(MeasureTheory.Measure.prod μ ν) s = 0 → (fun x => ↑↑ν (Prod.mk x ⁻¹' s)) =ᶠ[MeasureTheory.Measure.ae μ] 0\",\n  \"isProp\": true,\n  \"docString\":\n  \"Note: the converse is not true without assuming that `s` is measurable. For a counterexample,\\nsee Walter Rudin *Real and Complex Analysis*, example (c) in section 8.9. \"},\n {\"theorem\":\n  \"∀ {α : Type ua} [inst : UniformSpace α] {s : Set (α × α)},\\n  s ∈ uniformity α →\\n    ∀ (n : ℕ), ∀ᶠ (t : Set (α × α)) in Filter.smallSets (uniformity α), (fun x => compRel t x)^[n] t ⊆ s\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `s ∈ 𝓤 α`, then for any natural `n`, for a subset `t` of a sufficiently small set in `𝓤 α`,\\nwe have `t ○ t ○ ... ○ t ⊆ s` (`n` compositions). \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {s : Set α} {p : Filter ι},\\n  TendstoUniformlyOn F f p s → ∀ {x : α}, x ∈ s → Filter.Tendsto (fun n => F n x) p (nhds (f x))\",\n  \"isProp\": true,\n  \"docString\": \"Uniform converence implies pointwise convergence. \"},\n {\"theorem\":\n  \"∀ {Ω : Type u_1} {m0 : MeasurableSpace Ω} {μ : MeasureTheory.Measure Ω} [inst : MeasureTheory.IsProbabilityMeasure μ]\\n  {s : ℕ → Set Ω},\\n  (∀ (n : ℕ), MeasurableSet (s n)) →\\n    ProbabilityTheory.iIndepSet s → ∑' (n : ℕ), ↑↑μ (s n) = ⊤ → ↑↑μ (Filter.limsup s Filter.atTop) = 1\",\n  \"isProp\": true,\n  \"docString\":\n  \"**The second Borel-Cantelli lemma**: Given a sequence of independent sets `(sₙ)` such that\\n`∑ n, μ sₙ = ∞`, `limsup sₙ` has measure 1. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {m : MeasurableSpace α} {μ : MeasureTheory.Measure α} {s t : Set α},\\n  s ⊆ t → ↑↑μ t ≤ ↑↑μ s → MeasurableSet s → ↑↑μ t ≠ ⊤ → s =ᶠ[MeasureTheory.Measure.ae μ] t\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `s ⊆ t`, `μ t ≤ μ s`, `μ t ≠ ∞`, and `s` is measurable, then `s =ᵐ[μ] t`. \"},\n {\"theorem\":\n  \"∀ {τ : Type u_2} {α : Type u_3} {β : Type u_1} [inst : TopologicalSpace β] (f : Filter τ) (ϕ : τ → α → β) (s : Set α)\\n  {c : Set β},\\n  IsCompact c →\\n    (∃ v, v ∈ f ∧ closure (Set.image2 ϕ v s) ⊆ c) →\\n      ∀ {n : Set β}, IsOpen n → omegaLimit f ϕ s ⊆ n → ∃ u, u ∈ f ∧ closure (Set.image2 ϕ u s) ⊆ n\",\n  \"isProp\": true,\n  \"docString\":\n  \"A set is eventually carried into any open neighbourhood of its ω-limit:\\nif `c` is a compact set such that `closure {ϕ t x | t ∈ v, x ∈ s} ⊆ c` for some `v ∈ f`\\nand `n` is an open neighbourhood of `ω f ϕ s`, then for some `u ∈ f` we have\\n`closure {ϕ t x | t ∈ u, x ∈ s} ⊆ n`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : Preorder α] ⦃s t : Set α⦄, s ⊆ t → BddAbove t → BddAbove s\",\n  \"isProp\": true,\n  \"docString\": \"If `s ⊆ t` and `t` is bounded above, then so is `s`. \"},\n {\"theorem\":\n  \"∀ {G : Type u_1} [inst : Group G] {s : Set G}, IsNormalSubgroup s → ∀ (n : G), n ∈ s → ∀ (g : G), g * n * g⁻¹ ∈ s\",\n  \"isProp\": true,\n  \"docString\": \"The proposition that `s` is closed under conjugation. \"}]\n", "prompt_cons": "/-- If `s` is bounded, then so is `s ∩ t` -/\ntheorem ∀ {α : Type u} [inst : Preorder α] {s t : Set α}, BddBelow s → BddBelow (s ∩ t) :=\n\n/-- If the distance between `s n` and `s m`, `n ≤ m` is bounded above by `b n`\nand `b` converges to zero, then `s` is a Cauchy sequence. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : PseudoMetricSpace α] [inst_1 : Nonempty β] [inst_2 : SemilatticeSup β] {s : β → α}\n  (b : β → ℝ), (∀ (n m : β), n ≤ m → dist (s n) (s m) ≤ b n) → Filter.Tendsto b Filter.atTop (nhds 0) → CauchySeq s :=\n\n/-- One direction of the **Borel-Cantelli lemma**: if (sᵢ) is a sequence of sets such\nthat `∑ μ sᵢ` is finite, then the limit superior of the `sᵢ` is a null set. -/\ntheorem ∀ {α : Type u_1} {m : MeasurableSpace α} {μ : MeasureTheory.Measure α} {s : ℕ → Set α},\n  ∑' (i : ℕ), ↑↑μ (s i) ≠ ⊤ → ↑↑μ (Filter.limsup s Filter.atTop) = 0 :=\n\n/-- It suffices to prove `[[x, y]] ⊆ s` for `x y ∈ s`, `x ≤ y`. -/\ntheorem ∀ {α : Type u_1} [inst : Preorder α] {s : Set α},\n  Set.OrdConnected s ↔ ∀ (x : α), x ∈ s → ∀ (y : α), y ∈ s → x ≤ y → Set.Icc x y ⊆ s :=\n\n/-- For a compact set `s`, locally uniform convergence on `s` is just uniform convergence on `s`. -/\ntheorem ∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {s : Set α} {p : Filter ι}\n  [inst_1 : TopologicalSpace α], IsCompact s → (TendstoLocallyUniformlyOn F f p s ↔ TendstoUniformlyOn F f p s) :=\n\n/-- If the distance between `s n` and `s m`, `n, m ≥ N` is bounded above by `b N`\nand `b` converges to zero, then `s` is a Cauchy sequence. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : PseudoMetricSpace α] [inst_1 : Nonempty β] [inst_2 : SemilatticeSup β] {s : β → α}\n  (b : β → ℝ),\n  (∀ (n m N : β), N ≤ n → N ≤ m → dist (s n) (s m) ≤ b N) → Filter.Tendsto b Filter.atTop (nhds 0) → CauchySeq s :=\n\n/-- Suppose we are given `∑ i, lᵢ * sᵢ = 1` in `S`, and `S'` a subalgebra of `S` that contains\n`lᵢ` and `sᵢ`. To check that an `x : S` falls in `S'`, we only need to show that\n`sᵢ ^ n • x ∈ S'` for some `n` for each `sᵢ`. -/\ntheorem ∀ {R : Type u} [inst : CommSemiring R] {S : Type u_1} [inst_1 : CommRing S] [inst_2 : Algebra R S] (S' : Subalgebra R S)\n  {ι : Type u_2} (ι' : Finset ι) (s l : ι → S),\n  (Finset.sum ι' fun i => l i * s i) = 1 →\n    (∀ (i : ι), s i ∈ S') → (∀ (i : ι), l i ∈ S') → ∀ (x : S), (∀ (i : ι), ∃ n, s i ^ n • x ∈ S') → x ∈ S' :=\n\n/-- If `t` is bounded, then so is `s ∩ t` -/\ntheorem ∀ {α : Type u} [inst : Preorder α] {s t : Set α}, BddAbove t → BddAbove (s ∩ t) :=\n\n/-- Uniform convergence on a set `s` to a constant function is equivalent to convergence in\n`p ×ˢ 𝓟 s`. -/\ntheorem ∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {s : Set α} {p : Filter ι} {c : β},\n  Filter.Tendsto (↿F) (p ×ˢ Filter.principal s) (nhds c) ↔ TendstoUniformlyOn F (fun x => c) p s :=\n\n/-- If two functions coincide on a set `s`, then a Taylor series for the first one is as well a\nTaylor series for the second one. -/\ntheorem ∀ {𝕜 : Type u} [inst : NontriviallyNormedField 𝕜] {E : Type uE} [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E] {F : Type uF} [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] {s : Set E}\n  {f f₁ : E → F} {n : ℕ∞} {p : E → FormalMultilinearSeries 𝕜 E F},\n  HasFTaylorSeriesUpToOn n f p s → (∀ (x : E), x ∈ s → f₁ x = f x) → HasFTaylorSeriesUpToOn n f₁ p s :=\n\n/-- If `‖r₁‖ < r₂`, then for any natural `k` we have `n ^ k r₁ ^ n = o (r₂ ^ n)` as `n → ∞`. -/\ntheorem ∀ {R : Type u_1} [inst : NormedRing R] (k : ℕ) {r₁ : R} {r₂ : ℝ},\n  ‖r₁‖ < r₂ → (fun n => ↑n ^ k * r₁ ^ n) =o[Filter.atTop] fun n => r₂ ^ n :=\n\n/-- If a sequence `g` converges to some `b`, then the sequence of constant functions\n`fun n ↦ fun a ↦ g n` converges to the constant function `fun a ↦ b` on any set `s` -/\ntheorem ∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {p : Filter ι} {g : ι → β} {b : β},\n  Filter.Tendsto g p (nhds b) → ∀ (s : Set α), TendstoUniformlyOn (fun n x => g n) (fun x => b) p s :=\n\n/-- Note: the converse is not true without assuming that `s` is measurable. For a counterexample,\nsee Walter Rudin *Real and Complex Analysis*, example (c) in section 8.9. -/\ntheorem ∀ {α : Type u_2} {β : Type u_1} [inst : MeasurableSpace α] [inst_1 : MeasurableSpace β] {μ : MeasureTheory.Measure α}\n  {ν : MeasureTheory.Measure β} [inst_2 : MeasureTheory.SigmaFinite ν] {s : Set (α × β)},\n  ↑↑(MeasureTheory.Measure.prod μ ν) s = 0 → (fun x => ↑↑ν (Prod.mk x ⁻¹' s)) =ᶠ[MeasureTheory.Measure.ae μ] 0 :=\n\n/-- If `s ∈ 𝓤 α`, then for any natural `n`, for a subset `t` of a sufficiently small set in `𝓤 α`,\nwe have `t ○ t ○ ... ○ t ⊆ s` (`n` compositions). -/\ntheorem ∀ {α : Type ua} [inst : UniformSpace α] {s : Set (α × α)},\n  s ∈ uniformity α →\n    ∀ (n : ℕ), ∀ᶠ (t : Set (α × α)) in Filter.smallSets (uniformity α), (fun x => compRel t x)^[n] t ⊆ s :=\n\n/-- Uniform converence implies pointwise convergence. -/\ntheorem ∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {s : Set α} {p : Filter ι},\n  TendstoUniformlyOn F f p s → ∀ {x : α}, x ∈ s → Filter.Tendsto (fun n => F n x) p (nhds (f x)) :=\n\n/-- **The second Borel-Cantelli lemma**: Given a sequence of independent sets `(sₙ)` such that\n`∑ n, μ sₙ = ∞`, `limsup sₙ` has measure 1. -/\ntheorem ∀ {Ω : Type u_1} {m0 : MeasurableSpace Ω} {μ : MeasureTheory.Measure Ω} [inst : MeasureTheory.IsProbabilityMeasure μ]\n  {s : ℕ → Set Ω},\n  (∀ (n : ℕ), MeasurableSet (s n)) →\n    ProbabilityTheory.iIndepSet s → ∑' (n : ℕ), ↑↑μ (s n) = ⊤ → ↑↑μ (Filter.limsup s Filter.atTop) = 1 :=\n\n/-- If `s ⊆ t`, `μ t ≤ μ s`, `μ t ≠ ∞`, and `s` is measurable, then `s =ᵐ[μ] t`. -/\ntheorem ∀ {α : Type u_1} {m : MeasurableSpace α} {μ : MeasureTheory.Measure α} {s t : Set α},\n  s ⊆ t → ↑↑μ t ≤ ↑↑μ s → MeasurableSet s → ↑↑μ t ≠ ⊤ → s =ᶠ[MeasureTheory.Measure.ae μ] t :=\n\n/-- A set is eventually carried into any open neighbourhood of its ω-limit:\nif `c` is a compact set such that `closure {ϕ t x | t ∈ v, x ∈ s} ⊆ c` for some `v ∈ f`\nand `n` is an open neighbourhood of `ω f ϕ s`, then for some `u ∈ f` we have\n`closure {ϕ t x | t ∈ u, x ∈ s} ⊆ n`. -/\ntheorem ∀ {τ : Type u_2} {α : Type u_3} {β : Type u_1} [inst : TopologicalSpace β] (f : Filter τ) (ϕ : τ → α → β) (s : Set α)\n  {c : Set β},\n  IsCompact c →\n    (∃ v, v ∈ f ∧ closure (Set.image2 ϕ v s) ⊆ c) →\n      ∀ {n : Set β}, IsOpen n → omegaLimit f ϕ s ⊆ n → ∃ u, u ∈ f ∧ closure (Set.image2 ϕ u s) ⊆ n :=\n\n/-- If `s ⊆ t` and `t` is bounded above, then so is `s`. -/\ntheorem ∀ {α : Type u} [inst : Preorder α] ⦃s t : Set α⦄, s ⊆ t → BddAbove t → BddAbove s :=\n\n/-- The proposition that `s` is closed under conjugation. -/\ntheorem ∀ {G : Type u_1} [inst : Group G] {s : Set G}, IsNormalSubgroup s → ∀ (n : G), n ∈ s → ∀ (g : G), g * n * g⁻¹ ∈ s :=\n\n/-- Prove that convergence of `{s_n}` implies convergence of `{|s_n|}`. -/\ntheorem", "choices": ["∀ {α : Type u} [inst : LinearOrderedRing α] [inst_1 : IsAbs α] {s : ℕ → α}, Filter.Tendsto s Filter.atTop (nhds 0) → Filter.Tendsto (fun n => abs (s n)) Filter.atTop (nhds 0) ", "∀ {α : Type u} [inst : NormedGroup α] {s : ℕ → α} {a : α}, Filter.Tendsto s Filter.atTop (nhds a) → Filter.Tendsto (λ n, ∥s n∥) Filter.atTop (nhds ∥a∥) ", "∀ {α : Type u_1} [inst : LinearOrderedField α] {β : Type u_2} [inst_1 : OrderedRing β] [inst_2 : Nontrivial β] [inst_3 : CovariantClass α β β HMul.hMul LE.le] {s : α → β}, Filter.Tendsto s Filter.atTop (nhds 0) → Filter.Tendsto (λ n, abs (s n)) Filter.atTop (nhds 0) ", "∀ {α : Type u} [inst : NormedGroup α] {s : ℕ → α} {a : α}, Filter.Tendsto s Filter.atTop (nhds a) → Filter.Tendsto (λ n, ∥s n∥) Filter.atTop (nhds (∥a∥)) ", "∀ {α : Type u} [inst : NormedGroup α] {s : ℕ → α}, CauchySeq s → CauchySeq (fun n => ∥s n∥) ", "∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : LinearOrderedRing α] [inst_2 : OrderTopology α]\n  [inst_3 : TopologicalSpace β] {s : β → α} {a : α} {f : Filter β},\n  Filter.Tendsto s f (nhds a) → Filter.Tendsto (fun x => abs (s x)) f (nhds (abs a)) ", "∀ {α : Type u} [inst : NormedGroup α] {s : ℕ → α} {a : α}, Filter.Tendsto s Filter.atTop (nhds a) → Filter.Tendsto (fun n => ∥s n∥) Filter.atTop (nhds ∥a∥) ", "∀ {α : Type u} [inst : LinearOrderedRing α] {f : ℕ → α}, Filter.Tendsto f Filter.atTop (nhds 0) → Filter.Tendsto (fun n => abs (f n)) Filter.atTop (nhds 0) ", "∀ {α : Type u} {β : Type v} [inst : PseudoMetricSpace α] [inst_1 : Nonempty β] [inst_2 : SemilatticeSup β] {s : β → α}\n  (b : β → ℝ), CauchySeq s → CauchySeq (fun n => abs (s n)) ", "∀ {α : Type u} [inst : NormedField α] {u : ℕ → α} {a : α},\n  Filter.Tendsto u Filter.atTop (nhds a) → Filter.Tendsto (fun n => abs (u n)) Filter.atTop (nhds (abs a)) "]}
{"docString": "If `s_1=√2`, and `s_{n+1}=√(2+√s_n)` for `(n=1,2,3, ...)`, prove that `{s_n}` converges, and that `s_n < 2` for `n=1,2,3, ...`.", "prompts": "[{\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : PseudoMetricSpace α] [inst_1 : Nonempty β] [inst_2 : SemilatticeSup β] {s : β → α}\\n  (b : β → ℝ), (∀ (n m : β), n ≤ m → dist (s n) (s m) ≤ b n) → Filter.Tendsto b Filter.atTop (nhds 0) → CauchySeq s\",\n  \"isProp\": true,\n  \"docString\":\n  \"If the distance between `s n` and `s m`, `n ≤ m` is bounded above by `b n`\\nand `b` converges to zero, then `s` is a Cauchy sequence.  \"},\n {\"theorem\":\n  \"∀ {S : Set ℕ+} (A : Type u) {B : Type v} [inst : CommRing A] [inst_1 : CommRing B] [inst_2 : Algebra A B]\\n  [self : IsCyclotomicExtension S A B] {n : ℕ+}, n ∈ S → ∃ r, IsPrimitiveRoot r ↑n\",\n  \"isProp\": true,\n  \"docString\":\n  \"For all `n ∈ S`, there exists a primitive `n`-th root of unity in `B`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : PseudoMetricSpace α] [inst_1 : Nonempty β] [inst_2 : SemilatticeSup β] {s : β → α}\\n  (b : β → ℝ),\\n  (∀ (n m N : β), N ≤ n → N ≤ m → dist (s n) (s m) ≤ b N) → Filter.Tendsto b Filter.atTop (nhds 0) → CauchySeq s\",\n  \"isProp\": true,\n  \"docString\":\n  \"If the distance between `s n` and `s m`, `n, m ≥ N` is bounded above by `b N`\\nand `b` converges to zero, then `s` is a Cauchy sequence.  \"},\n {\"theorem\": \"∀ {p : ℕ}, (Summable fun n => 1 / ↑n ^ p) ↔ 1 < p\",\n  \"isProp\": true,\n  \"docString\":\n  \"Test for convergence of the `p`-series: the real-valued series `∑' n : ℕ, 1 / n ^ p` converges\\nif and only if `1 < p`. \"},\n {\"theorem\":\n  \"∀ (n : ℕ) {a : ℝ}, Real.sqrtTwoAddSeries (↑0 / ↑1) n ≤ 2 - (a / 2 ^ (n + 1)) ^ 2 → a < Real.pi\",\n  \"isProp\": true,\n  \"docString\":\n  \"From an upper bound on `sqrtTwoAddSeries 0 n = 2 cos (π / 2 ^ (n+1))` of the form\\n`sqrtTwoAddSeries 0 n ≤ 2 - (a / 2 ^ (n + 1)) ^ 2)`, one can deduce the lower bound `a < π`\\nthanks to basic trigonometric inequalities as expressed in `pi_gt_sqrtTwoAddSeries`. \"},\n {\"theorem\":\n  \"∀ {R : Type u_1} [inst : NormedRing R] (k : ℕ) {r₁ : R} {r₂ : ℝ},\\n  ‖r₁‖ < r₂ → (fun n => ↑n ^ k * r₁ ^ n) =o[Filter.atTop] fun n => r₂ ^ n\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `‖r₁‖ < r₂`, then for any natural `k` we have `n ^ k r₁ ^ n = o (r₂ ^ n)` as `n → ∞`. \"},\n {\"theorem\":\n  \"∀ (n : ℕ) {a : ℝ},\\n  2 - ((a - 1 / 4 ^ n) / 2 ^ (n + 1)) ^ 2 ≤ Real.sqrtTwoAddSeries (↑0 / ↑1) n → 1 / 4 ^ n ≤ a → Real.pi < a\",\n  \"isProp\": true,\n  \"docString\":\n  \"From a lower bound on `sqrtTwoAddSeries 0 n = 2 cos (π / 2 ^ (n+1))` of the form\\n`2 - ((a - 1 / 4 ^ n) / 2 ^ (n + 1)) ^ 2 ≤ sqrtTwoAddSeries 0 n`, one can deduce the upper bound\\n`π < a` thanks to basic trigonometric formulas as expressed in `pi_lt_sqrtTwoAddSeries`. \"},\n {\"theorem\": \"∀ {n : ℕ} (self : Fin n), ↑self < n\",\n  \"isProp\": true,\n  \"docString\": \"If `i : Fin n`, then `i.2` is a proof that `i.1 < n`. \"},\n {\"theorem\":\n  \"∀ {s : ℝ}, 0 < s → MeasureTheory.IntegrableOn (fun x => rexp (-x) * x ^ (s - 1)) (Set.Ioi 0)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The Euler integral for the `Γ` function converges for positive real `s`. \"},\n {\"theorem\":\n  \"∀ {R : Type u_1} [inst : NormedRing R] {r : ℝ}, 1 < r → Nat.cast =o[Filter.atTop] fun n => r ^ n\",\n  \"isProp\": true,\n  \"docString\": \"For a real `r > 1` we have `n = o(r ^ n)` as `n → ∞`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} [inst : NormedField 𝕜] [inst_1 : CompleteSpace 𝕜] {r : 𝕜},\\n  ‖r‖ < 1 → ∑' (n : ℕ), ↑n * r ^ n = r / (1 - r) ^ 2\",\n  \"isProp\": true,\n  \"docString\": \"If `‖r‖ < 1`, then `∑' n : ℕ, n * r ^ n = r / (1 - r) ^ 2`. \"},\n {\"theorem\": \"∀ {p : ℝ}, (Summable fun n => (↑n ^ p)⁻¹) ↔ 1 < p\",\n  \"isProp\": true,\n  \"docString\":\n  \"Test for convergence of the `p`-series: the real-valued series `∑' n : ℕ, (n ^ p)⁻¹` converges\\nif and only if `1 < p`. \"},\n {\"theorem\":\n  \"∀ {s : Set ℕ}, Set.Infinite s → ∀ {k : ℕ}, 0 < k → ∃ m, m ∈ s ∧ ∃ n, n ∈ s ∧ m < n ∧ m ≡ n [MOD k]\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `s` is an infinite set of natural numbers and `k > 0`, then `s` contains two elements `m < n`\\nthat are equal mod `k`. \"},\n {\"theorem\":\n  \"Filter.Tendsto (fun n => ↑n / (2 * ↑n + 1)) Filter.atTop (nhds (1 / 2))\",\n  \"isProp\": true,\n  \"docString\": \"The sequence `n / (2 * n + 1)` tends to `1/2` \"},\n {\"theorem\":\n  \"∀ {R : Type u} [inst : CommSemiring R] {S : Type u_1} [inst_1 : CommRing S] [inst_2 : Algebra R S] (S' : Subalgebra R S)\\n  {ι : Type u_2} (ι' : Finset ι) (s l : ι → S),\\n  (Finset.sum ι' fun i => l i * s i) = 1 →\\n    (∀ (i : ι), s i ∈ S') → (∀ (i : ι), l i ∈ S') → ∀ (x : S), (∀ (i : ι), ∃ n, s i ^ n • x ∈ S') → x ∈ S'\",\n  \"isProp\": true,\n  \"docString\":\n  \"Suppose we are given `∑ i, lᵢ * sᵢ = 1` in `S`, and `S'` a subalgebra of `S` that contains\\n`lᵢ` and `sᵢ`. To check that an `x : S` falls in `S'`, we only need to show that\\n`sᵢ ^ n • x ∈ S'` for some `n` for each `sᵢ`. \"},\n {\"theorem\": \"∀ (s : ℝ), (fun x => x ^ s) =o[Filter.atTop] rexp\",\n  \"isProp\": true,\n  \"docString\": \"`x ^ s = o(exp x)` as `x → ∞` for any real `s`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : ConditionallyCompleteLattice α] {s : Set α} {b : α},\\n  Set.Nonempty s → (∀ (a : α), a ∈ s → a ≤ b) → (∀ (ub : α), (∀ (a : α), a ∈ s → a ≤ ub) → b ≤ ub) → sSup s = b\",\n  \"isProp\": true,\n  \"docString\":\n  \"Introduction rule to prove that `b` is the supremum of `s`: it suffices to check that\\n1) `b` is an upper bound\\n2) every other upper bound `b'` satisfies `b ≤ b'`.\"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LinearOrder α] [inst_2 : OrderTopology α] {a b : α},\\n  a < b →\\n    ∀ (s : Set α),\\n      List.TFAE\\n        [s ∈ nhdsWithin a (Set.Ioi a), s ∈ nhdsWithin a (Set.Ioc a b), s ∈ nhdsWithin a (Set.Ioo a b),\\n          ∃ u, u ∈ Set.Ioc a b ∧ Set.Ioo a u ⊆ s, ∃ u, u ∈ Set.Ioi a ∧ Set.Ioo a u ⊆ s]\",\n  \"isProp\": true,\n  \"docString\":\n  \"The following statements are equivalent:\\n\\n0. `s` is a neighborhood of `a` within `(a, +∞)`;\\n1. `s` is a neighborhood of `a` within `(a, b]`;\\n2. `s` is a neighborhood of `a` within `(a, b)`;\\n3. `s` includes `(a, u)` for some `u ∈ (a, b]`;\\n4. `s` includes `(a, u)` for some `u > a`.\\n\"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : Preorder α] {s : Set α} {a : α}, IsLeast s a → BddBelow s\",\n  \"isProp\": true,\n  \"docString\": \"If `s` has a least element, then it is bounded below. \"},\n {\"theorem\":\n  \"∀ (n : ℕ), (∑' (i : ℕ), if n ≤ i then 2⁻¹ ^ i else 0) = 2 * 2⁻¹ ^ n\",\n  \"isProp\": true,\n  \"docString\": \"The sum of `2⁻¹ ^ i` for `n ≤ i` equals `2 * 2⁻¹ ^ n`. \"}]\n", "prompt_cons": "/-- If the distance between `s n` and `s m`, `n ≤ m` is bounded above by `b n`\nand `b` converges to zero, then `s` is a Cauchy sequence. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : PseudoMetricSpace α] [inst_1 : Nonempty β] [inst_2 : SemilatticeSup β] {s : β → α}\n  (b : β → ℝ), (∀ (n m : β), n ≤ m → dist (s n) (s m) ≤ b n) → Filter.Tendsto b Filter.atTop (nhds 0) → CauchySeq s :=\n\n/-- For all `n ∈ S`, there exists a primitive `n`-th root of unity in `B`. -/\ntheorem ∀ {S : Set ℕ+} (A : Type u) {B : Type v} [inst : CommRing A] [inst_1 : CommRing B] [inst_2 : Algebra A B]\n  [self : IsCyclotomicExtension S A B] {n : ℕ+}, n ∈ S → ∃ r, IsPrimitiveRoot r ↑n :=\n\n/-- If the distance between `s n` and `s m`, `n, m ≥ N` is bounded above by `b N`\nand `b` converges to zero, then `s` is a Cauchy sequence. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : PseudoMetricSpace α] [inst_1 : Nonempty β] [inst_2 : SemilatticeSup β] {s : β → α}\n  (b : β → ℝ),\n  (∀ (n m N : β), N ≤ n → N ≤ m → dist (s n) (s m) ≤ b N) → Filter.Tendsto b Filter.atTop (nhds 0) → CauchySeq s :=\n\n/-- Test for convergence of the `p`-series: the real-valued series `∑' n : ℕ, 1 / n ^ p` converges\nif and only if `1 < p`. -/\ntheorem ∀ {p : ℕ}, (Summable fun n => 1 / ↑n ^ p) ↔ 1 < p :=\n\n/-- From an upper bound on `sqrtTwoAddSeries 0 n = 2 cos (π / 2 ^ (n+1))` of the form\n`sqrtTwoAddSeries 0 n ≤ 2 - (a / 2 ^ (n + 1)) ^ 2)`, one can deduce the lower bound `a < π`\nthanks to basic trigonometric inequalities as expressed in `pi_gt_sqrtTwoAddSeries`. -/\ntheorem ∀ (n : ℕ) {a : ℝ}, Real.sqrtTwoAddSeries (↑0 / ↑1) n ≤ 2 - (a / 2 ^ (n + 1)) ^ 2 → a < Real.pi :=\n\n/-- If `‖r₁‖ < r₂`, then for any natural `k` we have `n ^ k r₁ ^ n = o (r₂ ^ n)` as `n → ∞`. -/\ntheorem ∀ {R : Type u_1} [inst : NormedRing R] (k : ℕ) {r₁ : R} {r₂ : ℝ},\n  ‖r₁‖ < r₂ → (fun n => ↑n ^ k * r₁ ^ n) =o[Filter.atTop] fun n => r₂ ^ n :=\n\n/-- From a lower bound on `sqrtTwoAddSeries 0 n = 2 cos (π / 2 ^ (n+1))` of the form\n`2 - ((a - 1 / 4 ^ n) / 2 ^ (n + 1)) ^ 2 ≤ sqrtTwoAddSeries 0 n`, one can deduce the upper bound\n`π < a` thanks to basic trigonometric formulas as expressed in `pi_lt_sqrtTwoAddSeries`. -/\ntheorem ∀ (n : ℕ) {a : ℝ},\n  2 - ((a - 1 / 4 ^ n) / 2 ^ (n + 1)) ^ 2 ≤ Real.sqrtTwoAddSeries (↑0 / ↑1) n → 1 / 4 ^ n ≤ a → Real.pi < a :=\n\n/-- If `i : Fin n`, then `i.2` is a proof that `i.1 < n`. -/\ntheorem ∀ {n : ℕ} (self : Fin n), ↑self < n :=\n\n/-- The Euler integral for the `Γ` function converges for positive real `s`. -/\ntheorem ∀ {s : ℝ}, 0 < s → MeasureTheory.IntegrableOn (fun x => rexp (-x) * x ^ (s - 1)) (Set.Ioi 0) :=\n\n/-- For a real `r > 1` we have `n = o(r ^ n)` as `n → ∞`. -/\ntheorem ∀ {R : Type u_1} [inst : NormedRing R] {r : ℝ}, 1 < r → Nat.cast =o[Filter.atTop] fun n => r ^ n :=\n\n/-- If `‖r‖ < 1`, then `∑' n : ℕ, n * r ^ n = r / (1 - r) ^ 2`. -/\ntheorem ∀ {𝕜 : Type u_1} [inst : NormedField 𝕜] [inst_1 : CompleteSpace 𝕜] {r : 𝕜},\n  ‖r‖ < 1 → ∑' (n : ℕ), ↑n * r ^ n = r / (1 - r) ^ 2 :=\n\n/-- Test for convergence of the `p`-series: the real-valued series `∑' n : ℕ, (n ^ p)⁻¹` converges\nif and only if `1 < p`. -/\ntheorem ∀ {p : ℝ}, (Summable fun n => (↑n ^ p)⁻¹) ↔ 1 < p :=\n\n/-- If `s` is an infinite set of natural numbers and `k > 0`, then `s` contains two elements `m < n`\nthat are equal mod `k`. -/\ntheorem ∀ {s : Set ℕ}, Set.Infinite s → ∀ {k : ℕ}, 0 < k → ∃ m, m ∈ s ∧ ∃ n, n ∈ s ∧ m < n ∧ m ≡ n [MOD k] :=\n\n/-- The sequence `n / (2 * n + 1)` tends to `1/2` -/\ntheorem Filter.Tendsto (fun n => ↑n / (2 * ↑n + 1)) Filter.atTop (nhds (1 / 2)) :=\n\n/-- Suppose we are given `∑ i, lᵢ * sᵢ = 1` in `S`, and `S'` a subalgebra of `S` that contains\n`lᵢ` and `sᵢ`. To check that an `x : S` falls in `S'`, we only need to show that\n`sᵢ ^ n • x ∈ S'` for some `n` for each `sᵢ`. -/\ntheorem ∀ {R : Type u} [inst : CommSemiring R] {S : Type u_1} [inst_1 : CommRing S] [inst_2 : Algebra R S] (S' : Subalgebra R S)\n  {ι : Type u_2} (ι' : Finset ι) (s l : ι → S),\n  (Finset.sum ι' fun i => l i * s i) = 1 →\n    (∀ (i : ι), s i ∈ S') → (∀ (i : ι), l i ∈ S') → ∀ (x : S), (∀ (i : ι), ∃ n, s i ^ n • x ∈ S') → x ∈ S' :=\n\n/-- `x ^ s = o(exp x)` as `x → ∞` for any real `s`. -/\ntheorem ∀ (s : ℝ), (fun x => x ^ s) =o[Filter.atTop] rexp :=\n\n/-- Introduction rule to prove that `b` is the supremum of `s`: it suffices to check that\n1) `b` is an upper bound\n2) every other upper bound `b'` satisfies `b ≤ b'`. -/\ntheorem ∀ {α : Type u_1} [inst : ConditionallyCompleteLattice α] {s : Set α} {b : α},\n  Set.Nonempty s → (∀ (a : α), a ∈ s → a ≤ b) → (∀ (ub : α), (∀ (a : α), a ∈ s → a ≤ ub) → b ≤ ub) → sSup s = b :=\n\n/-- The following statements are equivalent:\n\n0. `s` is a neighborhood of `a` within `(a, +∞)`;\n1. `s` is a neighborhood of `a` within `(a, b]`;\n2. `s` is a neighborhood of `a` within `(a, b)`;\n3. `s` includes `(a, u)` for some `u ∈ (a, b]`;\n4. `s` includes `(a, u)` for some `u > a`. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LinearOrder α] [inst_2 : OrderTopology α] {a b : α},\n  a < b →\n    ∀ (s : Set α),\n      List.TFAE\n        [s ∈ nhdsWithin a (Set.Ioi a), s ∈ nhdsWithin a (Set.Ioc a b), s ∈ nhdsWithin a (Set.Ioo a b),\n          ∃ u, u ∈ Set.Ioc a b ∧ Set.Ioo a u ⊆ s, ∃ u, u ∈ Set.Ioi a ∧ Set.Ioo a u ⊆ s] :=\n\n/-- If `s` has a least element, then it is bounded below. -/\ntheorem ∀ {α : Type u} [inst : Preorder α] {s : Set α} {a : α}, IsLeast s a → BddBelow s :=\n\n/-- The sum of `2⁻¹ ^ i` for `n ≤ i` equals `2 * 2⁻¹ ^ n`. -/\ntheorem ∀ (n : ℕ), (∑' (i : ℕ), if n ≤ i then 2⁻¹ ^ i else 0) = 2 * 2⁻¹ ^ n :=\n\n/-- If `s_1=√2`, and `s_{n+1}=√(2+√s_n)` for `(n=1,2,3, ...)`, prove that `{s_n}` converges, and that `s_n < 2` for `n=1,2,3, ...`. -/\ntheorem", "choices": ["∀ (n : ℕ), 0 < Real.sqrtTwoAddSeries (↑0 / ↑1) n ∧ Real.sqrtTwoAddSeries (↑0 / ↑1) n < 2 ", "s_nat_converges_lt_2 : ∀ (n : ℕ), 0 < n → Real.sqrtTwoAddSeries 0 n < 2 ", "∀ (n : ℕ), Real.sqrt (2 + Real.sqrtTwoAddSeries (↑0 / ↑1) n) < 2 ", "∀ (n : ℕ), Real.sqrt (2 + Real.sqrtTwoAddSeries (↑0 / ↑1) n) < 2 ∧ Filter.Tendsto Real.sqrtTwoAddSeries Filter.atTop (nhds 0) ", "Exists.intro (Real.sqrtTwoAddSeries (1 / 2) (Nat.succ n)) (And.intro (Real.sqrtTwoAddSeries.lt_two (Nat.succ n)) (Real.sqrtTwoAddSeries.step n))", "∀ {α : Type u} [inst : PseudoMetricSpace α] [inst_1 : Nonempty α] [inst_2 : SemilatticeSup α] {s : α → ℕ},\n  (∀ n, s (n + 1) = Real.sqrt (2 + s n)) → s 1 = Real.sqrt 2 → Filter.Liminf Filter.atTop s < 2 ", "∀ (s : ℕ → ℝ),\n  s 0 = Real.sqrt 2 → (∀ (n : ℕ), s (n + 1) = Real.sqrt (2 + Real.sqrt (s n)))\n  → Filter.Tendsto s Filter.atTop (nhds (Real.sqrt 2)) ∧ ∀ (n : ℕ), s n < 2 ", "∀ (ε : ℝ), ε > 0 → ∃ (N : ℕ), ∀ (n : ℕ), n ≥ N → abs (Real.sqrt (2 + Real.sqrt (2 + ... + Real.sqrt 2)) - 2) < ε ", "∀ {α : Type u} [inst : LinearOrderedField α] [inst_1 : FloorRing α], (∀ n, 1 ≤ n → s n < 2) ∧ Filter.Tendsto s Filter.atTop (nhds (Real.sqrt 2)) ", "∀ (s : ℕ → ℝ), (s 0 = Real.sqrt 2) → (∀ (n : ℕ), s (n + 1) = Real.sqrt (2 + Real.sqrt (s n))) → (∃ l, Filter.Tendsto s Filter.atTop (nhds l)) ∧ ∀ n, s n < 2 "]}
{"docString": "Prove that `lim_{n→∞} Σ_{i<n} a_i = ∞`, where `a_i = √(i + 1) - √i`.", "prompts": "[{\"theorem\":\n  \"∀ {J : Type w} {C : Type u} [inst : CategoryTheory.Category C] {B : C}\\n  (F : CategoryTheory.Functor (CategoryTheory.Discrete J) (CategoryTheory.Over B))\\n  [inst_1 :\\n    CategoryTheory.Limits.HasLimit (CategoryTheory.Over.ConstructProducts.widePullbackDiagramOfDiagramOver B F)],\\n  CategoryTheory.Limits.HasLimit F\",\n  \"isProp\": true,\n  \"docString\": \"Use the above equivalence to prove we have a limit. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : LinearOrderedAddCommGroup α], Filter.Tendsto abs Filter.atTop Filter.atTop\",\n  \"isProp\": true,\n  \"docString\": \"$\\\\lim_{x\\\\to+\\\\infty}|x|=+\\\\infty$ \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : AddCommMonoid α] [inst_1 : TopologicalSpace α] {a : α} {f : ℕ → α},\\n  HasSum f a → Filter.Tendsto (fun n => Finset.sum (Finset.range n) fun i => f i) Filter.atTop (nhds a)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f : ℕ → α` has sum `a`, then the partial sums `∑_{i=0}^{n-1} f i` converge to `a`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : Preorder α] [inst_1 : TopologicalSpace α] [self : SupConvergenceClass α] (a : α) (s : Set α),\\n  IsLUB s a → Filter.Tendsto CoeTC.coe Filter.atTop (nhds a)\",\n  \"isProp\": true,\n  \"docString\": \"proof that a monotone function tends to `𝓝 a` as `x → ∞` \"},\n {\"theorem\":\n  \"∀ {β : Type u_2} {F : Type u_1} [inst : NormedAddCommGroup F] [inst_1 : CompleteSpace F] {f : ℕ → β → F} {u : ℕ → ℝ},\\n  Summable u →\\n    (∀ (n : ℕ) (x : β), ‖f n x‖ ≤ u n) →\\n      TendstoUniformly (fun N x => Finset.sum (Finset.range N) fun n => f n x) (fun x => ∑' (n : ℕ), f n x) Filter.atTop\",\n  \"isProp\": true,\n  \"docString\":\n  \"An infinite sum of functions with summable sup norm is the uniform limit of its partial sums.\\nVersion with index set `ℕ`. \"},\n {\"theorem\": \"∀ {n : ℕ} (self : Fin n), ↑self < n\",\n  \"isProp\": true,\n  \"docString\": \"If `i : Fin n`, then `i.2` is a proof that `i.1 < n`. \"},\n {\"theorem\":\n  \"∀ (n : ℕ) {a : ℝ},\\n  2 - ((a - 1 / 4 ^ n) / 2 ^ (n + 1)) ^ 2 ≤ Real.sqrtTwoAddSeries (↑0 / ↑1) n → 1 / 4 ^ n ≤ a → Real.pi < a\",\n  \"isProp\": true,\n  \"docString\":\n  \"From a lower bound on `sqrtTwoAddSeries 0 n = 2 cos (π / 2 ^ (n+1))` of the form\\n`2 - ((a - 1 / 4 ^ n) / 2 ^ (n + 1)) ^ 2 ≤ sqrtTwoAddSeries 0 n`, one can deduce the upper bound\\n`π < a` thanks to basic trigonometric formulas as expressed in `pi_lt_sqrtTwoAddSeries`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {m : MeasurableSpace α} {μ : MeasureTheory.Measure α} {f : ℕ → α → ENNReal} {F : α → ENNReal},\\n  (∀ (n : ℕ), AEMeasurable (f n)) →\\n    (∀ᵐ (x : α) ∂μ, Monotone fun n => f n x) →\\n      (∀ᵐ (x : α) ∂μ, Filter.Tendsto (fun n => f n x) Filter.atTop (nhds (F x))) →\\n        Filter.Tendsto (fun n => ∫⁻ (x : α), f n x ∂μ) Filter.atTop (nhds (∫⁻ (x : α), F x ∂μ))\",\n  \"isProp\": true,\n  \"docString\": \"Monotone convergence theorem expressed with limits \"},\n {\"theorem\": \"∀ (a : ℝ), Cardinal.mk ↑(Set.Ici a) = Cardinal.continuum\",\n  \"isProp\": true,\n  \"docString\": \"The cardinality of the interval [a, ∞). \"},\n {\"theorem\":\n  \"∀ {β : Type u_1} {f g : β → NNReal} {r : NNReal}, (∀ (b : β), g b ≤ f b) → HasSum f r → ∃ p, p ≤ r ∧ HasSum g p\",\n  \"isProp\": true,\n  \"docString\": \"Comparison test of convergence of `ℝ≥0`-valued series. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} [inst : MeasurableSpace α] {ι : Type u_1} [inst_1 : Countable ι] {f : ι → α → ENNReal},\\n  (∀ (i : ι), Measurable (f i)) → Measurable fun x => ∑' (i : ι), f i x\",\n  \"isProp\": true,\n  \"docString\":\n  \"note: `ℝ≥0∞` can probably be generalized in a future version of this lemma. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : LinearOrderedAddCommGroup α], Filter.Tendsto abs Filter.atBot Filter.atTop\",\n  \"isProp\": true,\n  \"docString\": \"$\\\\lim_{x\\\\to-\\\\infty}|x|=+\\\\infty$ \"},\n {\"theorem\": \"∀ (a : ℝ), Cardinal.mk ↑(Set.Ioi a) = Cardinal.continuum\",\n  \"isProp\": true,\n  \"docString\": \"The cardinality of the interval (a, ∞). \"},\n {\"theorem\":\n  \"∀ {β : Type u_1} {F : Type u_2} [inst : NormedAddCommGroup F] [inst_1 : CompleteSpace F] {f : ℕ → β → F} {u : ℕ → ℝ},\\n  Summable u →\\n    ∀ {s : Set β},\\n      (∀ (n : ℕ) (x : β), x ∈ s → ‖f n x‖ ≤ u n) →\\n        TendstoUniformlyOn (fun N x => Finset.sum (Finset.range N) fun n => f n x) (fun x => ∑' (n : ℕ), f n x)\\n          Filter.atTop s\",\n  \"isProp\": true,\n  \"docString\":\n  \"An infinite sum of functions with summable sup norm is the uniform limit of its partial sums.\\nVersion relative to a set, with index set `ℕ`. \"},\n {\"theorem\":\n  \"∀ {z : UpperHalfPlane}, z ∈ ModularGroup.fdo → ∀ (n : ℤ), 1 < ↑Complex.normSq ↑(ModularGroup.T ^ n • z)\",\n  \"isProp\": true,\n  \"docString\": \"If `z ∈ 𝒟ᵒ`, and `n : ℤ`, then `|z + n| > 1`. \"},\n {\"theorem\":\n  \"∀ (n : ℕ) {a : ℝ}, Real.sqrtTwoAddSeries (↑0 / ↑1) n ≤ 2 - (a / 2 ^ (n + 1)) ^ 2 → a < Real.pi\",\n  \"isProp\": true,\n  \"docString\":\n  \"From an upper bound on `sqrtTwoAddSeries 0 n = 2 cos (π / 2 ^ (n+1))` of the form\\n`sqrtTwoAddSeries 0 n ≤ 2 - (a / 2 ^ (n + 1)) ^ 2)`, one can deduce the lower bound `a < π`\\nthanks to basic trigonometric inequalities as expressed in `pi_gt_sqrtTwoAddSeries`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {M : Type u_1} [inst : AddCommMonoid M] {f : α → M} {a : α}, ∑ᶠ (i : α) (_ : i ∈ {a}), f i = f a\",\n  \"isProp\": true,\n  \"docString\": \"The sum of `f i` over `i ∈ {a}` equals `f a`.\"},\n {\"theorem\":\n  \"∀ {Ω : Type u_1} {m0 : MeasurableSpace Ω} {μ : MeasureTheory.Measure Ω} [inst : MeasureTheory.IsProbabilityMeasure μ]\\n  {s : ℕ → Set Ω},\\n  (∀ (n : ℕ), MeasurableSet (s n)) →\\n    ProbabilityTheory.iIndepSet s → ∑' (n : ℕ), ↑↑μ (s n) = ⊤ → ↑↑μ (Filter.limsup s Filter.atTop) = 1\",\n  \"isProp\": true,\n  \"docString\":\n  \"**The second Borel-Cantelli lemma**: Given a sequence of independent sets `(sₙ)` such that\\n`∑ n, μ sₙ = ∞`, `limsup sₙ` has measure 1. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {p : Filter ι}\\n  {p' : Filter α} [inst_1 : Filter.NeBot p],\\n  UniformCauchySeqOnFilter F p p' →\\n    (∀ᶠ (x : α) in p', Filter.Tendsto (fun n => F n x) p (nhds (f x))) → TendstoUniformlyOnFilter F f p p'\",\n  \"isProp\": true,\n  \"docString\": \"A uniformly Cauchy sequence converges uniformly to its limit \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {β : Type u_2} [inst : AddCommGroup α] [inst_1 : UniformSpace α] [inst_2 : CompleteSpace α]\\n  {f : β → α}, Summable f ↔ CauchySeq fun s => Finset.sum s fun b => f b\",\n  \"isProp\": true,\n  \"docString\":\n  \"The **Cauchy criterion** for infinite sums, also known as the **Cauchy convergence test** \"}]\n", "prompt_cons": "/-- Use the above equivalence to prove we have a limit. -/\ntheorem ∀ {J : Type w} {C : Type u} [inst : CategoryTheory.Category C] {B : C}\n  (F : CategoryTheory.Functor (CategoryTheory.Discrete J) (CategoryTheory.Over B))\n  [inst_1 :\n    CategoryTheory.Limits.HasLimit (CategoryTheory.Over.ConstructProducts.widePullbackDiagramOfDiagramOver B F)],\n  CategoryTheory.Limits.HasLimit F :=\n\n/-- $\\lim_{x\\to+\\infty}|x|=+\\infty$ -/\ntheorem ∀ {α : Type u_1} [inst : LinearOrderedAddCommGroup α], Filter.Tendsto abs Filter.atTop Filter.atTop :=\n\n/-- If `f : ℕ → α` has sum `a`, then the partial sums `∑_{i=0}^{n-1} f i` converge to `a`. -/\ntheorem ∀ {α : Type u_1} [inst : AddCommMonoid α] [inst_1 : TopologicalSpace α] {a : α} {f : ℕ → α},\n  HasSum f a → Filter.Tendsto (fun n => Finset.sum (Finset.range n) fun i => f i) Filter.atTop (nhds a) :=\n\n/-- proof that a monotone function tends to `𝓝 a` as `x → ∞` -/\ntheorem ∀ {α : Type u_1} [inst : Preorder α] [inst_1 : TopologicalSpace α] [self : SupConvergenceClass α] (a : α) (s : Set α),\n  IsLUB s a → Filter.Tendsto CoeTC.coe Filter.atTop (nhds a) :=\n\n/-- An infinite sum of functions with summable sup norm is the uniform limit of its partial sums.\nVersion with index set `ℕ`. -/\ntheorem ∀ {β : Type u_2} {F : Type u_1} [inst : NormedAddCommGroup F] [inst_1 : CompleteSpace F] {f : ℕ → β → F} {u : ℕ → ℝ},\n  Summable u →\n    (∀ (n : ℕ) (x : β), ‖f n x‖ ≤ u n) →\n      TendstoUniformly (fun N x => Finset.sum (Finset.range N) fun n => f n x) (fun x => ∑' (n : ℕ), f n x) Filter.atTop :=\n\n/-- If `i : Fin n`, then `i.2` is a proof that `i.1 < n`. -/\ntheorem ∀ {n : ℕ} (self : Fin n), ↑self < n :=\n\n/-- From a lower bound on `sqrtTwoAddSeries 0 n = 2 cos (π / 2 ^ (n+1))` of the form\n`2 - ((a - 1 / 4 ^ n) / 2 ^ (n + 1)) ^ 2 ≤ sqrtTwoAddSeries 0 n`, one can deduce the upper bound\n`π < a` thanks to basic trigonometric formulas as expressed in `pi_lt_sqrtTwoAddSeries`. -/\ntheorem ∀ (n : ℕ) {a : ℝ},\n  2 - ((a - 1 / 4 ^ n) / 2 ^ (n + 1)) ^ 2 ≤ Real.sqrtTwoAddSeries (↑0 / ↑1) n → 1 / 4 ^ n ≤ a → Real.pi < a :=\n\n/-- Monotone convergence theorem expressed with limits -/\ntheorem ∀ {α : Type u_1} {m : MeasurableSpace α} {μ : MeasureTheory.Measure α} {f : ℕ → α → ENNReal} {F : α → ENNReal},\n  (∀ (n : ℕ), AEMeasurable (f n)) →\n    (∀ᵐ (x : α) ∂μ, Monotone fun n => f n x) →\n      (∀ᵐ (x : α) ∂μ, Filter.Tendsto (fun n => f n x) Filter.atTop (nhds (F x))) →\n        Filter.Tendsto (fun n => ∫⁻ (x : α), f n x ∂μ) Filter.atTop (nhds (∫⁻ (x : α), F x ∂μ)) :=\n\n/-- The cardinality of the interval [a, ∞). -/\ntheorem ∀ (a : ℝ), Cardinal.mk ↑(Set.Ici a) = Cardinal.continuum :=\n\n/-- Comparison test of convergence of `ℝ≥0`-valued series. -/\ntheorem ∀ {β : Type u_1} {f g : β → NNReal} {r : NNReal}, (∀ (b : β), g b ≤ f b) → HasSum f r → ∃ p, p ≤ r ∧ HasSum g p :=\n\n/-- note: `ℝ≥0∞` can probably be generalized in a future version of this lemma. -/\ntheorem ∀ {α : Type u_2} [inst : MeasurableSpace α] {ι : Type u_1} [inst_1 : Countable ι] {f : ι → α → ENNReal},\n  (∀ (i : ι), Measurable (f i)) → Measurable fun x => ∑' (i : ι), f i x :=\n\n/-- $\\lim_{x\\to-\\infty}|x|=+\\infty$ -/\ntheorem ∀ {α : Type u_1} [inst : LinearOrderedAddCommGroup α], Filter.Tendsto abs Filter.atBot Filter.atTop :=\n\n/-- The cardinality of the interval (a, ∞). -/\ntheorem ∀ (a : ℝ), Cardinal.mk ↑(Set.Ioi a) = Cardinal.continuum :=\n\n/-- An infinite sum of functions with summable sup norm is the uniform limit of its partial sums.\nVersion relative to a set, with index set `ℕ`. -/\ntheorem ∀ {β : Type u_1} {F : Type u_2} [inst : NormedAddCommGroup F] [inst_1 : CompleteSpace F] {f : ℕ → β → F} {u : ℕ → ℝ},\n  Summable u →\n    ∀ {s : Set β},\n      (∀ (n : ℕ) (x : β), x ∈ s → ‖f n x‖ ≤ u n) →\n        TendstoUniformlyOn (fun N x => Finset.sum (Finset.range N) fun n => f n x) (fun x => ∑' (n : ℕ), f n x)\n          Filter.atTop s :=\n\n/-- If `z ∈ 𝒟ᵒ`, and `n : ℤ`, then `|z + n| > 1`. -/\ntheorem ∀ {z : UpperHalfPlane}, z ∈ ModularGroup.fdo → ∀ (n : ℤ), 1 < ↑Complex.normSq ↑(ModularGroup.T ^ n • z) :=\n\n/-- From an upper bound on `sqrtTwoAddSeries 0 n = 2 cos (π / 2 ^ (n+1))` of the form\n`sqrtTwoAddSeries 0 n ≤ 2 - (a / 2 ^ (n + 1)) ^ 2)`, one can deduce the lower bound `a < π`\nthanks to basic trigonometric inequalities as expressed in `pi_gt_sqrtTwoAddSeries`. -/\ntheorem ∀ (n : ℕ) {a : ℝ}, Real.sqrtTwoAddSeries (↑0 / ↑1) n ≤ 2 - (a / 2 ^ (n + 1)) ^ 2 → a < Real.pi :=\n\n/-- The sum of `f i` over `i ∈ {a}` equals `f a`. -/\ntheorem ∀ {α : Type u_2} {M : Type u_1} [inst : AddCommMonoid M] {f : α → M} {a : α}, ∑ᶠ (i : α) (_ : i ∈ {a}), f i = f a :=\n\n/-- **The second Borel-Cantelli lemma**: Given a sequence of independent sets `(sₙ)` such that\n`∑ n, μ sₙ = ∞`, `limsup sₙ` has measure 1. -/\ntheorem ∀ {Ω : Type u_1} {m0 : MeasurableSpace Ω} {μ : MeasureTheory.Measure Ω} [inst : MeasureTheory.IsProbabilityMeasure μ]\n  {s : ℕ → Set Ω},\n  (∀ (n : ℕ), MeasurableSet (s n)) →\n    ProbabilityTheory.iIndepSet s → ∑' (n : ℕ), ↑↑μ (s n) = ⊤ → ↑↑μ (Filter.limsup s Filter.atTop) = 1 :=\n\n/-- A uniformly Cauchy sequence converges uniformly to its limit -/\ntheorem ∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {p : Filter ι}\n  {p' : Filter α} [inst_1 : Filter.NeBot p],\n  UniformCauchySeqOnFilter F p p' →\n    (∀ᶠ (x : α) in p', Filter.Tendsto (fun n => F n x) p (nhds (f x))) → TendstoUniformlyOnFilter F f p p' :=\n\n/-- The **Cauchy criterion** for infinite sums, also known as the **Cauchy convergence test** -/\ntheorem ∀ {α : Type u_1} {β : Type u_2} [inst : AddCommGroup α] [inst_1 : UniformSpace α] [inst_2 : CompleteSpace α]\n  {f : β → α}, Summable f ↔ CauchySeq fun s => Finset.sum s fun b => f b :=\n\n/-- Prove that `lim_{n→∞} Σ_{i<n} a_i = ∞`, where `a_i = √(i + 1) - √i`. -/\ntheorem", "choices": ["∀ {α : Type u_1} [inst : LinearOrderedField α], Filter.Tendsto (λ n, ∑ i in Finset.range n, (Real.sqrt (i + 1) - Real.sqrt i)) Filter.atTop Filter.atTop ", "∀ {α : Type u_1} [inst : LinearOrderedField α] [inst_1 : TopologicalSpace α] [inst_2 : OrderTopology α] [inst_3 : Archimedean α],\n  Filter.Tendsto (fun n => Finset.sum (Finset.range n) fun i => Real.sqrt (i + 1) - Real.sqrt i) Filter.atTop Filter.atTop ", "∀ {α : Type u_1} [inst : LinearOrderedField α] [inst_1 : Archimedean α],\n  Filter.Tendsto (λ n : ℕ, ∑ (i : ℕ) in Finset.range n, Real.sqrt (i + 1) - Real.sqrt i) Filter.atTop Filter.atTop ", "∀ {α : Type u_1} [inst : LinearOrderedField α] [inst_1 : Archimedean α],\n  Filter.Tendsto (fun n => Finset.sum (Finset.range n) fun i => Real.sqrt (i + 1) - Real.sqrt i) Filter.atTop Filter.atTop ", "∀ {α : Type u_1} [inst : LinearOrderedField α] [archimedean α], Filter.Tendsto (λ n : ℕ, Finset.sum (Finset.range n) (λ i => Real.sqrt (i + 1) - Real.sqrt i)) Filter.atTop Filter.atTop ", "∀ {α : Type u_1} [inst : LinearOrderedAddCommGroup α] [inst_1 : Archimedean α],\n  Filter.Tendsto (fun n => Finset.sum (Finset.range n) fun i => Real.sqrt (↑(i + 1)) - Real.sqrt ↑i) Filter.atTop Filter.atTop ", "∀ {α : Type u_1} [inst : LinearOrderedField α] [inst_1 : Archimedean α],\n  Filter.Tendsto (fun n => Finset.sum (Finset.range n) fun i => Real.sqrt (↑i + 1) - Real.sqrt ↑i) Filter.atTop Filter.atTop ", "∀ {α : Type u_1} [inst : LinearOrderedField α] [inst_1 : Archimedean α],\n  Filter.Tendsto (fun n => Finset.sum (Finset.range n) fun i => Real.sqrt (i + 1) - Real.sqrt i) Filter.atTop Filter.atTop ", "∀ {α : Type u_1} [inst : LinearOrderedField α] [inst_1 : Archimedean α],\n  Filter.Tendsto (fun n => Finset.sum (Finset.range n) (λi => (Real.sqrt (i + 1) - Real.sqrt i))) Filter.atTop Filter.atTop ", "forall {α : Type u_1} [inst : LinearOrderedField α] [inst_1 : Archimedean α],\n  Filter.Tendsto (fun n => Finset.sum (Finset.range n) fun i => sqrt (i + 1) - sqrt i) Filter.atTop Filter.atTop "]}
{"docString": "If `Σ a_n` converges, and if `{b_n}` is monotonic and bounded, prove that `Σ a_n b_n` converges.", "prompts": "[{\"theorem\":\n  \"∀ {α : Type u_1} {m : MeasurableSpace α} {μ : MeasureTheory.Measure α} {f : ℕ → α → ENNReal} {F : α → ENNReal},\\n  (∀ (n : ℕ), AEMeasurable (f n)) →\\n    (∀ᵐ (x : α) ∂μ, Monotone fun n => f n x) →\\n      (∀ᵐ (x : α) ∂μ, Filter.Tendsto (fun n => f n x) Filter.atTop (nhds (F x))) →\\n        Filter.Tendsto (fun n => ∫⁻ (x : α), f n x ∂μ) Filter.atTop (nhds (∫⁻ (x : α), F x ∂μ))\",\n  \"isProp\": true,\n  \"docString\": \"Monotone convergence theorem expressed with limits \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : Preorder α] [inst_1 : TopologicalSpace α] [self : SupConvergenceClass α] (a : α) (s : Set α),\\n  IsLUB s a → Filter.Tendsto CoeTC.coe Filter.atTop (nhds a)\",\n  \"isProp\": true,\n  \"docString\": \"proof that a monotone function tends to `𝓝 a` as `x → ∞` \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {p : Filter ι} {g : ι → β} {b : β},\\n  Filter.Tendsto g p (nhds b) → ∀ (s : Set α), TendstoUniformlyOn (fun n x => g n) (fun x => b) p s\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a sequence `g` converges to some `b`, then the sequence of constant functions\\n`fun n ↦ fun a ↦ g n` converges to the constant function `fun a ↦ b` on any set `s` \"},\n {\"theorem\":\n  \"∀ {K : Type u_1} {v : K} {n : ℕ} [inst : LinearOrderedField K] [inst_1 : FloorRing K],\\n  GeneralizedContinuedFraction.denominators (GeneralizedContinuedFraction.of v) n ≤\\n    GeneralizedContinuedFraction.denominators (GeneralizedContinuedFraction.of v) (n + 1)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Shows that the sequence of denominators is monotone, that is `Bₙ ≤ Bₙ₊₁`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : PseudoMetricSpace α] [inst_1 : Nonempty β] [inst_2 : SemilatticeSup β] {s : β → α}\\n  (b : β → ℝ), (∀ (n m : β), n ≤ m → dist (s n) (s m) ≤ b n) → Filter.Tendsto b Filter.atTop (nhds 0) → CauchySeq s\",\n  \"isProp\": true,\n  \"docString\":\n  \"If the distance between `s n` and `s m`, `n ≤ m` is bounded above by `b n`\\nand `b` converges to zero, then `s` is a Cauchy sequence.  \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : AddCommMonoid α] [inst_1 : TopologicalSpace α] {a : α} {f : ℕ → α},\\n  HasSum f a → Filter.Tendsto (fun n => Finset.sum (Finset.range n) fun i => f i) Filter.atTop (nhds a)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f : ℕ → α` has sum `a`, then the partial sums `∑_{i=0}^{n-1} f i` converge to `a`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {m : MeasurableSpace α} {μ : MeasureTheory.Measure α} {f : ℕ → α → ENNReal},\\n  (∀ (n : ℕ), Measurable (f n)) →\\n    (∀ (n : ℕ), f (Nat.succ n) ≤ᶠ[MeasureTheory.Measure.ae μ] f n) →\\n      ∫⁻ (a : α), f 0 a ∂μ ≠ ⊤ → ∫⁻ (a : α), ⨅ (n : ℕ), f n a ∂μ = ⨅ (n : ℕ), ∫⁻ (a : α), f n a ∂μ\",\n  \"isProp\": true,\n  \"docString\":\n  \"Monotone convergence theorem for nonincreasing sequences of functions \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {𝕜 : Type u_2} {E : Type u_3} {F : Type u_4} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : CompleteSpace F] {u : α → ℝ}\\n  [inst_5 : NormedSpace 𝕜 F] {f : α → E → F} {f' : α → E → E →L[𝕜] F} {x₀ : E},\\n  Summable u →\\n    (∀ (n : α) (x : E), HasFDerivAt (f n) (f' n x) x) →\\n      (∀ (n : α) (x : E), ‖f' n x‖ ≤ u n) → (Summable fun n => f n x₀) → ∀ (x : E), Summable fun n => f n x\",\n  \"isProp\": true,\n  \"docString\":\n  \"Consider a series of functions `∑' n, f n x`. If the series converges at a\\npoint, and all functions in the series are differentiable with a summable bound on the derivatives,\\nthen the series converges everywhere. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : UniformSpace α] [inst_1 : SemilatticeSup β] {u : β → α},\\n  CauchySeq u →\\n    ∀ {ι : Type u_1} {f : ι → β} {p : Filter ι} [inst_2 : Filter.NeBot p],\\n      Filter.Tendsto f p Filter.atTop →\\n        ∀ {a : α}, Filter.Tendsto (u ∘ f) p (nhds a) → Filter.Tendsto u Filter.atTop (nhds a)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a Cauchy sequence has a convergent subsequence, then it converges. \"},\n {\"theorem\":\n  \"∀ {m : ℝ} {f : ℕ → ℕ}, 1 < m → (∀ (i : ℕ), i ≤ f i) → Summable fun i => 1 / m ^ f i\",\n  \"isProp\": true,\n  \"docString\":\n  \"A series whose terms are bounded by the terms of a converging geometric series converges. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : PseudoMetricSpace α] [inst_1 : Nonempty β] [inst_2 : SemilatticeSup β] {s : β → α}\\n  (b : β → ℝ),\\n  (∀ (n m N : β), N ≤ n → N ≤ m → dist (s n) (s m) ≤ b N) → Filter.Tendsto b Filter.atTop (nhds 0) → CauchySeq s\",\n  \"isProp\": true,\n  \"docString\":\n  \"If the distance between `s n` and `s m`, `n, m ≥ N` is bounded above by `b N`\\nand `b` converges to zero, then `s` is a Cauchy sequence.  \"},\n {\"theorem\":\n  \"∀ {u : ℕ → ℝ} (h : Subadditive u),\\n  BddBelow (Set.range fun n => u n / ↑n) → Filter.Tendsto (fun n => u n / ↑n) Filter.atTop (nhds (Subadditive.lim h))\",\n  \"isProp\": true,\n  \"docString\":\n  \"Fekete's lemma: a subadditive sequence which is bounded below converges. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : ConditionallyCompleteLinearOrder α] [inst_1 : TopologicalSpace α]\\n  [inst_2 : OrderTopology α] [inst_3 : DenselyOrdered α] {f : Filter β} {u : β → α} {s : Set α},\\n  Dense s →\\n    (∀ (a : α), a ∈ s → ∀ (b : α), b ∈ s → a < b → ¬((∃ᶠ (n : β) in f, u n < a) ∧ ∃ᶠ (n : β) in f, b < u n)) →\\n      autoParam (Filter.IsBoundedUnder (fun x x_1 => x ≤ x_1) f u) _auto✝ →\\n        autoParam (Filter.IsBoundedUnder (fun x x_1 => x ≥ x_1) f u) _auto✝¹ → ∃ c, Filter.Tendsto u f (nhds c)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Assume that, for any `a < b`, a sequence can not be infinitely many times below `a` and\\nabove `b`. If it is also ultimately bounded above and below, then it has to converge. This even\\nworks if `a` and `b` are restricted to a dense subset.\\n\"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {𝕜 : Type u_2} {E : Type u_3} {F : Type u_4} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : CompleteSpace F] {u : α → ℝ}\\n  [inst_5 : NormedSpace 𝕜 F] {f : α → E → F} {f' : α → E → E →L[𝕜] F} {x₀ : E},\\n  Summable u →\\n    (∀ (n : α) (x : E), HasFDerivAt (f n) (f' n x) x) →\\n      (∀ (n : α) (x : E), ‖f' n x‖ ≤ u n) →\\n        (Summable fun n => f n x₀) → ∀ (x : E), HasFDerivAt (fun y => ∑' (n : α), f n y) (∑' (n : α), f' n x) x\",\n  \"isProp\": true,\n  \"docString\":\n  \"Consider a series of functions `∑' n, f n x`. If the series converges at a\\npoint, and all functions in the series are differentiable with a summable bound on the derivatives,\\nthen the series is differentiable and its derivative is the sum of the derivatives. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {ι : Type u_2} {x : ι → α} {f : Filter α} {l : Filter ι} [inst : Filter.IsCountablyGenerated l],\\n  (∀ (ns : ℕ → ι), Filter.Tendsto ns Filter.atTop l → ∃ ms, Filter.Tendsto (fun n => x (ns (ms n))) Filter.atTop f) →\\n    Filter.Tendsto x l f\",\n  \"isProp\": true,\n  \"docString\":\n  \"A sequence converges if every subsequence has a convergent subsequence. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {G : Type u_3} [inst : NormedAddCommGroup G] [inst_1 : NormedSpace ℝ G] {m : MeasurableSpace α}\\n  {μ : MeasureTheory.Measure α} {ι : Type u_1} [inst_2 : Countable ι] {F : ι → α → G} {f : α → G} (bound : ι → α → ℝ),\\n  (∀ (n : ι), MeasureTheory.AEStronglyMeasurable (F n) μ) →\\n    (∀ (n : ι), ∀ᵐ (a : α) ∂μ, ‖F n a‖ ≤ bound n a) →\\n      (∀ᵐ (a : α) ∂μ, Summable fun n => bound n a) →\\n        (MeasureTheory.Integrable fun a => ∑' (n : ι), bound n a) →\\n          (∀ᵐ (a : α) ∂μ, HasSum (fun n => F n a) (f a)) → HasSum (fun n => ∫ (a : α), F n a ∂μ) (∫ (a : α), f a ∂μ)\",\n  \"isProp\": true,\n  \"docString\": \"Lebesgue dominated convergence theorem for series. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {p : Filter ι}\\n  {p' : Filter α} [inst_1 : Filter.NeBot p],\\n  UniformCauchySeqOnFilter F p p' →\\n    (∀ᶠ (x : α) in p', Filter.Tendsto (fun n => F n x) p (nhds (f x))) → TendstoUniformlyOnFilter F f p p'\",\n  \"isProp\": true,\n  \"docString\": \"A uniformly Cauchy sequence converges uniformly to its limit \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} (m : MeasureTheory.OuterMeasure α) {s : ℕ → Set α},\\n  (∀ (n : ℕ), s n ⊆ s (n + 1)) →\\n    ∑' (k : ℕ), ↑m (s (k + 1) \\\\ s k) ≠ ⊤ →\\n      ∀ [inst : (i : ℕ) → DecidablePred fun x => x ∈ s i], ↑m (⋃ (n : ℕ), s n) = ⨆ (n : ℕ), ↑m (s n)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `s : ℕ → Set α` is a monotone sequence of sets such that `∑' k, m (s (k + 1) \\\\ s k) ≠ ∞`,\\nthen `m (⋃ n, s n) = ⨆ n, m (s n)`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {β : Type u_1} [inst : Add α] [inst_1 : Preorder α] [inst_2 : Preorder β] {f g : β → α}\\n  [inst_3 : CovariantClass α α (fun x x_1 => x + x_1) fun x x_1 => x ≤ x_1]\\n  [inst_4 : CovariantClass α α (Function.swap fun x x_1 => x + x_1) fun x x_1 => x < x_1],\\n  StrictMono f → Monotone g → StrictMono fun x => f x + g x\",\n  \"isProp\": true,\n  \"docString\":\n  \"The sum of a strictly monotone function and a monotone function is\\nstrictly monotone.\"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {𝕜 : Type u_3} {E : Type u_2} {F : Type u_4} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : CompleteSpace F] {u : α → ℝ}\\n  [inst_5 : NormedSpace 𝕜 F] {f : α → E → F} {f' : α → E → E →L[𝕜] F} {s : Set E} {x₀ : E},\\n  Summable u →\\n    IsOpen s →\\n      IsPreconnected s →\\n        (∀ (n : α) (x : E), x ∈ s → HasFDerivAt (f n) (f' n x) x) →\\n          (∀ (n : α) (x : E), x ∈ s → ‖f' n x‖ ≤ u n) →\\n            x₀ ∈ s → (Summable fun x => f x x₀) → ∀ {x : E}, x ∈ s → Summable fun n => f n x\",\n  \"isProp\": true,\n  \"docString\":\n  \"Consider a series of functions `∑' n, f n x` on a preconnected open set. If the series converges\\nat a point, and all functions in the series are differentiable with a summable bound on the\\nderivatives, then the series converges everywhere on the set. \"}]\n", "prompt_cons": "/-- Monotone convergence theorem expressed with limits -/\ntheorem ∀ {α : Type u_1} {m : MeasurableSpace α} {μ : MeasureTheory.Measure α} {f : ℕ → α → ENNReal} {F : α → ENNReal},\n  (∀ (n : ℕ), AEMeasurable (f n)) →\n    (∀ᵐ (x : α) ∂μ, Monotone fun n => f n x) →\n      (∀ᵐ (x : α) ∂μ, Filter.Tendsto (fun n => f n x) Filter.atTop (nhds (F x))) →\n        Filter.Tendsto (fun n => ∫⁻ (x : α), f n x ∂μ) Filter.atTop (nhds (∫⁻ (x : α), F x ∂μ)) :=\n\n/-- proof that a monotone function tends to `𝓝 a` as `x → ∞` -/\ntheorem ∀ {α : Type u_1} [inst : Preorder α] [inst_1 : TopologicalSpace α] [self : SupConvergenceClass α] (a : α) (s : Set α),\n  IsLUB s a → Filter.Tendsto CoeTC.coe Filter.atTop (nhds a) :=\n\n/-- If a sequence `g` converges to some `b`, then the sequence of constant functions\n`fun n ↦ fun a ↦ g n` converges to the constant function `fun a ↦ b` on any set `s` -/\ntheorem ∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {p : Filter ι} {g : ι → β} {b : β},\n  Filter.Tendsto g p (nhds b) → ∀ (s : Set α), TendstoUniformlyOn (fun n x => g n) (fun x => b) p s :=\n\n/-- Shows that the sequence of denominators is monotone, that is `Bₙ ≤ Bₙ₊₁`. -/\ntheorem ∀ {K : Type u_1} {v : K} {n : ℕ} [inst : LinearOrderedField K] [inst_1 : FloorRing K],\n  GeneralizedContinuedFraction.denominators (GeneralizedContinuedFraction.of v) n ≤\n    GeneralizedContinuedFraction.denominators (GeneralizedContinuedFraction.of v) (n + 1) :=\n\n/-- If the distance between `s n` and `s m`, `n ≤ m` is bounded above by `b n`\nand `b` converges to zero, then `s` is a Cauchy sequence. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : PseudoMetricSpace α] [inst_1 : Nonempty β] [inst_2 : SemilatticeSup β] {s : β → α}\n  (b : β → ℝ), (∀ (n m : β), n ≤ m → dist (s n) (s m) ≤ b n) → Filter.Tendsto b Filter.atTop (nhds 0) → CauchySeq s :=\n\n/-- If `f : ℕ → α` has sum `a`, then the partial sums `∑_{i=0}^{n-1} f i` converge to `a`. -/\ntheorem ∀ {α : Type u_1} [inst : AddCommMonoid α] [inst_1 : TopologicalSpace α] {a : α} {f : ℕ → α},\n  HasSum f a → Filter.Tendsto (fun n => Finset.sum (Finset.range n) fun i => f i) Filter.atTop (nhds a) :=\n\n/-- Monotone convergence theorem for nonincreasing sequences of functions -/\ntheorem ∀ {α : Type u_1} {m : MeasurableSpace α} {μ : MeasureTheory.Measure α} {f : ℕ → α → ENNReal},\n  (∀ (n : ℕ), Measurable (f n)) →\n    (∀ (n : ℕ), f (Nat.succ n) ≤ᶠ[MeasureTheory.Measure.ae μ] f n) →\n      ∫⁻ (a : α), f 0 a ∂μ ≠ ⊤ → ∫⁻ (a : α), ⨅ (n : ℕ), f n a ∂μ = ⨅ (n : ℕ), ∫⁻ (a : α), f n a ∂μ :=\n\n/-- Consider a series of functions `∑' n, f n x`. If the series converges at a\npoint, and all functions in the series are differentiable with a summable bound on the derivatives,\nthen the series converges everywhere. -/\ntheorem ∀ {α : Type u_1} {𝕜 : Type u_2} {E : Type u_3} {F : Type u_4} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : CompleteSpace F] {u : α → ℝ}\n  [inst_5 : NormedSpace 𝕜 F] {f : α → E → F} {f' : α → E → E →L[𝕜] F} {x₀ : E},\n  Summable u →\n    (∀ (n : α) (x : E), HasFDerivAt (f n) (f' n x) x) →\n      (∀ (n : α) (x : E), ‖f' n x‖ ≤ u n) → (Summable fun n => f n x₀) → ∀ (x : E), Summable fun n => f n x :=\n\n/-- If a Cauchy sequence has a convergent subsequence, then it converges. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : UniformSpace α] [inst_1 : SemilatticeSup β] {u : β → α},\n  CauchySeq u →\n    ∀ {ι : Type u_1} {f : ι → β} {p : Filter ι} [inst_2 : Filter.NeBot p],\n      Filter.Tendsto f p Filter.atTop →\n        ∀ {a : α}, Filter.Tendsto (u ∘ f) p (nhds a) → Filter.Tendsto u Filter.atTop (nhds a) :=\n\n/-- A series whose terms are bounded by the terms of a converging geometric series converges. -/\ntheorem ∀ {m : ℝ} {f : ℕ → ℕ}, 1 < m → (∀ (i : ℕ), i ≤ f i) → Summable fun i => 1 / m ^ f i :=\n\n/-- If the distance between `s n` and `s m`, `n, m ≥ N` is bounded above by `b N`\nand `b` converges to zero, then `s` is a Cauchy sequence. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : PseudoMetricSpace α] [inst_1 : Nonempty β] [inst_2 : SemilatticeSup β] {s : β → α}\n  (b : β → ℝ),\n  (∀ (n m N : β), N ≤ n → N ≤ m → dist (s n) (s m) ≤ b N) → Filter.Tendsto b Filter.atTop (nhds 0) → CauchySeq s :=\n\n/-- Fekete's lemma: a subadditive sequence which is bounded below converges. -/\ntheorem ∀ {u : ℕ → ℝ} (h : Subadditive u),\n  BddBelow (Set.range fun n => u n / ↑n) → Filter.Tendsto (fun n => u n / ↑n) Filter.atTop (nhds (Subadditive.lim h)) :=\n\n/-- Assume that, for any `a < b`, a sequence can not be infinitely many times below `a` and\nabove `b`. If it is also ultimately bounded above and below, then it has to converge. This even\nworks if `a` and `b` are restricted to a dense subset. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : ConditionallyCompleteLinearOrder α] [inst_1 : TopologicalSpace α]\n  [inst_2 : OrderTopology α] [inst_3 : DenselyOrdered α] {f : Filter β} {u : β → α} {s : Set α},\n  Dense s →\n    (∀ (a : α), a ∈ s → ∀ (b : α), b ∈ s → a < b → ¬((∃ᶠ (n : β) in f, u n < a) ∧ ∃ᶠ (n : β) in f, b < u n)) →\n      autoParam (Filter.IsBoundedUnder (fun x x_1 => x ≤ x_1) f u) _auto✝ →\n        autoParam (Filter.IsBoundedUnder (fun x x_1 => x ≥ x_1) f u) _auto✝¹ → ∃ c, Filter.Tendsto u f (nhds c) :=\n\n/-- Consider a series of functions `∑' n, f n x`. If the series converges at a\npoint, and all functions in the series are differentiable with a summable bound on the derivatives,\nthen the series is differentiable and its derivative is the sum of the derivatives. -/\ntheorem ∀ {α : Type u_1} {𝕜 : Type u_2} {E : Type u_3} {F : Type u_4} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : CompleteSpace F] {u : α → ℝ}\n  [inst_5 : NormedSpace 𝕜 F] {f : α → E → F} {f' : α → E → E →L[𝕜] F} {x₀ : E},\n  Summable u →\n    (∀ (n : α) (x : E), HasFDerivAt (f n) (f' n x) x) →\n      (∀ (n : α) (x : E), ‖f' n x‖ ≤ u n) →\n        (Summable fun n => f n x₀) → ∀ (x : E), HasFDerivAt (fun y => ∑' (n : α), f n y) (∑' (n : α), f' n x) x :=\n\n/-- A sequence converges if every subsequence has a convergent subsequence. -/\ntheorem ∀ {α : Type u_1} {ι : Type u_2} {x : ι → α} {f : Filter α} {l : Filter ι} [inst : Filter.IsCountablyGenerated l],\n  (∀ (ns : ℕ → ι), Filter.Tendsto ns Filter.atTop l → ∃ ms, Filter.Tendsto (fun n => x (ns (ms n))) Filter.atTop f) →\n    Filter.Tendsto x l f :=\n\n/-- Lebesgue dominated convergence theorem for series. -/\ntheorem ∀ {α : Type u_2} {G : Type u_3} [inst : NormedAddCommGroup G] [inst_1 : NormedSpace ℝ G] {m : MeasurableSpace α}\n  {μ : MeasureTheory.Measure α} {ι : Type u_1} [inst_2 : Countable ι] {F : ι → α → G} {f : α → G} (bound : ι → α → ℝ),\n  (∀ (n : ι), MeasureTheory.AEStronglyMeasurable (F n) μ) →\n    (∀ (n : ι), ∀ᵐ (a : α) ∂μ, ‖F n a‖ ≤ bound n a) →\n      (∀ᵐ (a : α) ∂μ, Summable fun n => bound n a) →\n        (MeasureTheory.Integrable fun a => ∑' (n : ι), bound n a) →\n          (∀ᵐ (a : α) ∂μ, HasSum (fun n => F n a) (f a)) → HasSum (fun n => ∫ (a : α), F n a ∂μ) (∫ (a : α), f a ∂μ) :=\n\n/-- A uniformly Cauchy sequence converges uniformly to its limit -/\ntheorem ∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {p : Filter ι}\n  {p' : Filter α} [inst_1 : Filter.NeBot p],\n  UniformCauchySeqOnFilter F p p' →\n    (∀ᶠ (x : α) in p', Filter.Tendsto (fun n => F n x) p (nhds (f x))) → TendstoUniformlyOnFilter F f p p' :=\n\n/-- If `s : ℕ → Set α` is a monotone sequence of sets such that `∑' k, m (s (k + 1) \\ s k) ≠ ∞`,\nthen `m (⋃ n, s n) = ⨆ n, m (s n)`. -/\ntheorem ∀ {α : Type u_1} (m : MeasureTheory.OuterMeasure α) {s : ℕ → Set α},\n  (∀ (n : ℕ), s n ⊆ s (n + 1)) →\n    ∑' (k : ℕ), ↑m (s (k + 1) \\ s k) ≠ ⊤ →\n      ∀ [inst : (i : ℕ) → DecidablePred fun x => x ∈ s i], ↑m (⋃ (n : ℕ), s n) = ⨆ (n : ℕ), ↑m (s n) :=\n\n/-- The sum of a strictly monotone function and a monotone function is\nstrictly monotone. -/\ntheorem ∀ {α : Type u_2} {β : Type u_1} [inst : Add α] [inst_1 : Preorder α] [inst_2 : Preorder β] {f g : β → α}\n  [inst_3 : CovariantClass α α (fun x x_1 => x + x_1) fun x x_1 => x ≤ x_1]\n  [inst_4 : CovariantClass α α (Function.swap fun x x_1 => x + x_1) fun x x_1 => x < x_1],\n  StrictMono f → Monotone g → StrictMono fun x => f x + g x :=\n\n/-- Consider a series of functions `∑' n, f n x` on a preconnected open set. If the series converges\nat a point, and all functions in the series are differentiable with a summable bound on the\nderivatives, then the series converges everywhere on the set. -/\ntheorem ∀ {α : Type u_1} {𝕜 : Type u_3} {E : Type u_2} {F : Type u_4} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : CompleteSpace F] {u : α → ℝ}\n  [inst_5 : NormedSpace 𝕜 F] {f : α → E → F} {f' : α → E → E →L[𝕜] F} {s : Set E} {x₀ : E},\n  Summable u →\n    IsOpen s →\n      IsPreconnected s →\n        (∀ (n : α) (x : E), x ∈ s → HasFDerivAt (f n) (f' n x) x) →\n          (∀ (n : α) (x : E), x ∈ s → ‖f' n x‖ ≤ u n) →\n            x₀ ∈ s → (Summable fun x => f x x₀) → ∀ {x : E}, x ∈ s → Summable fun n => f n x :=\n\n/-- If `Σ a_n` converges, and if `{b_n}` is monotonic and bounded, prove that `Σ a_n b_n` converges. -/\ntheorem", "choices": ["∀ {α : Type u_1} {β : Type u_2} [inst : OrderedCommMonoid α] [inst_1 : OrderedCommMonoid β] {f : ℕ → α} {g : ℕ → β},\n  Summable f →\n    (∀ (n : ℕ), g n ≤ g (n + 1)) →\n      BddAbove (Set.Range g) →\n        Summable fun n => f n * g n ", "∀ {α : Type u_1} {β : Type u_2} [inst : OrderedCommMonoid α] [inst_1 : LinearOrderedCommMonoid β] {a : ℕ → α} {b : ℕ → β},\n  Summable a → Monotone b → BddAbove (Set.Range b) → Summable (fun n => a n * b n) ", "∀ {α : Type u_1} {β : Type u_2} [inst : OrderedCommMonoid α] [inst_1 : LinearOrderedCommRing β] {ua : α →+ ℝ} {u : ℕ → α}\n  {ub : β →+ ℝ} {v : ℕ → β},\n  Filter.Tendsto (fun n => ua (u n)) Filter.atTop (nhds 0) →\n    (Monotone v ∧ Bounded (Set.Range v)) →\n      Filter.Tendsto (fun n => (ua (u n)).toReal * ub (v n).toReal) Filter.atTop (nhds 0) ", "∀ {α : Type u_1} [inst : LinearOrderedField α] {a b : ℕ → α},\n  Summable a → BddAbove (Set.Range b) → BddBelow (Set.Range b) → Monotone b → Summable (λ n, a n * b n) ", "∀ {α : Type u_1} {β : Type u_2} [inst : OrderedCancelAddCommMonoid β] [inst_1 : TopologicalSpace β] {a b : ℕ → β} {c : β},\n  HasSum a c →\n    BddAbove (Set.Range b) →\n      Monotone b → HasSum (fun n => a n * b n) (c * b 0) ", "∀ {α : Type u_1} {β : Type u_2} [inst : LinearOrderedField α] [inst_1 : OrderedAddCommMonoid β] {a : ℕ → α} {b : ℕ → β},\n  HasSum a (∑' (n : ℕ), a n) →\n    Monotone b →\n      BddAbove (Set.Range b) →\n        HasSum (fun n => a n * b n) (∑' (n : ℕ), a n * b n) ", "∀ {α : Type u_1} {β : Type u_2} [inst : OrderedCommMonoid α] [inst_1 : LinearOrderedAddCommMonoid β]\n  [inst_2 : TopologicalSpace β] [inst_3 : OrderClosedTopology β] {f g : ℕ → α} {B : α},\n  HasSum f B → Monotone g → BddAbove (Set.Range g) → HasSum (fun n => f n * g n) (B * g 0) ", "∀ {α : Type u_1} {β : Type u_2} [inst : LinearOrderedField α] [inst_1 : TopologicalSpace α] [inst_2 : OrderTopology α]\n  {f : ℕ → α} {g : ℕ → β} [inst_3 : LinearOrderedAddCommMonoid β] {a : α} {b : β},\n  HasSum f a →\n    Monotone g →\n      BddAbove (Set.Range g) →\n        BddBelow (Set.Range g) → HasSum (fun n => f n * g n) (a * b) ", "forall {α : Type u_1} {β : Type u_2} [inst : OrderedCommMonoid α] [inst_1 : OrderedCommMonoid β] {a : ℕ → α} {b : ℕ → β},\n  Summable a →\n    BddBelow (Set.range b) →\n      BddAbove (Set.range b) →\n        Monotone b →\n          Summable fun n => a n * b n ", "forall {α : Type u_1} {β : Type u_2} [inst : OrderedCommMonoid α] [inst_1 : OrderedCommMonoid β]\n  {a : ℕ → α} {b : ℕ → β} {l : α},\n  HasSum a l → Monotone b → BddAbove (Set.Range b) → HasSum (fun n => a n * b n) (l * b 0) "]}
{"docString": "Suppose `{p_n}` is a Cauchy sequence in a metric space `X`, and some sequence `{p_{n l}}` converges to a point `p ∈ X`. Prove that the full sequence `{p_n}` converges to `p`.", "prompts": "[{\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : UniformSpace α] [inst_1 : SemilatticeSup β] [inst_2 : CompleteSpace α] {u : β → α},\\n  CauchySeq u → ∃ x, Filter.Tendsto u Filter.atTop (nhds x)\",\n  \"isProp\": true,\n  \"docString\": \"A Cauchy sequence in a complete space converges \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {E : α → Type u_2} {p : ENNReal} [inst : (i : α) → NormedAddCommGroup (E i)] [_i : Fact (1 ≤ p)]\\n  {F : ℕ → { x // x ∈ lp E p }},\\n  CauchySeq F →\\n    ∀ {f : { x // x ∈ lp E p }},\\n      Filter.Tendsto (id fun i => ↑(F i)) Filter.atTop (nhds ↑f) → Filter.Tendsto F Filter.atTop (nhds f)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a sequence is Cauchy in the `lp E p` topology and pointwise convergent to an element `f` of\\n`lp E p`, then it converges to `f` in the `lp E p` topology. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {p : Filter ι}\\n  {p' : Filter α} [inst_1 : Filter.NeBot p],\\n  UniformCauchySeqOnFilter F p p' →\\n    (∀ᶠ (x : α) in p', Filter.Tendsto (fun n => F n x) p (nhds (f x))) → TendstoUniformlyOnFilter F f p p'\",\n  \"isProp\": true,\n  \"docString\": \"A uniformly Cauchy sequence converges uniformly to its limit \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {𝕜₂ : Type u_2} {F : Type u_4} [inst : NormedAddCommGroup F] [inst_1 : NontriviallyNormedField 𝕜]\\n  [inst_2 : NontriviallyNormedField 𝕜₂] [inst_3 : NormedSpace 𝕜₂ F] {σ₁₂ : 𝕜 →+* 𝕜₂} {E' : Type u_3}\\n  [inst_4 : SeminormedAddCommGroup E'] [inst_5 : NormedSpace 𝕜 E'] [inst_6 : RingHomIsometric σ₁₂]\\n  {f : ℕ → E' →SL[σ₁₂] F} {g : E' →SL[σ₁₂] F},\\n  Filter.Tendsto (fun n x => ↑(f n) x) Filter.atTop (nhds ↑g) → CauchySeq f → Filter.Tendsto f Filter.atTop (nhds g)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a Cauchy sequence of continuous linear map converges to a continuous linear map pointwise,\\nthen it converges to the same map in norm. This lemma is used to prove that the space of continuous\\nlinear maps is complete provided that the codomain is a complete space. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_2} {E : Type u_3} {F : Type u_1} [inst : NontriviallyNormedField 𝕜] [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] [inst_5 : CompleteSpace F]\\n  (p : FormalMultilinearSeries 𝕜 E F),\\n  0 < FormalMultilinearSeries.radius p →\\n    HasFPowerSeriesOnBall (FormalMultilinearSeries.sum p) p 0 (FormalMultilinearSeries.radius p)\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a complete space, the sum of a converging power series `p` admits `p` as a power series.\\nThis is not totally obvious as we need to check the convergence of the series. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : UniformSpace α] [inst_1 : SemilatticeSup β] {K : Set α},\\n  IsComplete K → ∀ {u : β → α}, (∀ (n : β), u n ∈ K) → CauchySeq u → ∃ v, v ∈ K ∧ Filter.Tendsto u Filter.atTop (nhds v)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `K` is a complete subset, then any cauchy sequence in `K` converges to a point in `K` \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : PseudoMetricSpace α] [inst_1 : Nonempty β] [inst_2 : SemilatticeSup β] {s : β → α}\\n  (b : β → ℝ), (∀ (n m : β), n ≤ m → dist (s n) (s m) ≤ b n) → Filter.Tendsto b Filter.atTop (nhds 0) → CauchySeq s\",\n  \"isProp\": true,\n  \"docString\":\n  \"If the distance between `s n` and `s m`, `n ≤ m` is bounded above by `b n`\\nand `b` converges to zero, then `s` is a Cauchy sequence.  \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : UniformSpace α] [inst_1 : SemilatticeSup β] {u : β → α},\\n  CauchySeq u →\\n    ∀ {ι : Type u_1} {f : ι → β} {p : Filter ι} [inst_2 : Filter.NeBot p],\\n      Filter.Tendsto f p Filter.atTop →\\n        ∀ {a : α}, Filter.Tendsto (u ∘ f) p (nhds a) → Filter.Tendsto u Filter.atTop (nhds a)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a Cauchy sequence has a convergent subsequence, then it converges. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {ι : Type u_3} {E : Type u_2} {m : MeasurableSpace α} {μ : MeasureTheory.Measure α}\\n  [inst : NormedAddCommGroup E] {p : ENNReal} [hp : Fact (1 ≤ p)] {f : ι → { x // x ∈ MeasureTheory.Lp E p }}\\n  {g : { x // x ∈ MeasureTheory.Lp E p }} {l : Filter ι},\\n  Filter.Tendsto f l (nhds g) → MeasureTheory.TendstoInMeasure μ (fun n => ↑↑(f n)) l ↑↑g\",\n  \"isProp\": true,\n  \"docString\": \"Convergence in Lp implies convergence in measure. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : PseudoMetricSpace α] [inst_1 : Nonempty β] [inst_2 : SemilatticeSup β] {u : β → α},\\n  CauchySeq u ↔ ∀ (ε : ℝ), ε > 0 → ∃ N, ∀ (m : β), m ≥ N → ∀ (n : β), n ≥ N → dist (u m) (u n) < ε\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a pseudometric space, Cauchy sequences are characterized by the fact that, eventually,\\nthe distance between its elements is arbitrarily small \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : PseudoMetricSpace α] [inst_1 : Nonempty β] [inst_2 : SemilatticeSup β] {s : β → α}\\n  (b : β → ℝ),\\n  (∀ (n m N : β), N ≤ n → N ≤ m → dist (s n) (s m) ≤ b N) → Filter.Tendsto b Filter.atTop (nhds 0) → CauchySeq s\",\n  \"isProp\": true,\n  \"docString\":\n  \"If the distance between `s n` and `s m`, `n, m ≥ N` is bounded above by `b N`\\nand `b` converges to zero, then `s` is a Cauchy sequence.  \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : PseudoMetricSpace α] [inst_1 : Nonempty β] [inst_2 : SemilatticeSup β]\\n  {γ : Type u_1} {F : β → γ → α} {s : Set γ},\\n  UniformCauchySeqOn F Filter.atTop s ↔\\n    ∀ (ε : ℝ), ε > 0 → ∃ N, ∀ (m : β), m ≥ N → ∀ (n : β), n ≥ N → ∀ (x : γ), x ∈ s → dist (F m x) (F n x) < ε\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a pseudometric space, uniform Cauchy sequences are characterized by the fact that,\\neventually, the distance between all its elements is uniformly, arbitrarily small \"},\n {\"theorem\":\n  \"∀ {p : ℕ} [inst : Fact (Nat.Prime p)] {f : CauSeq ℚ (padicNorm p)},\\n  ¬f ≈ 0 → ∃ N, ∀ (m n : ℕ), N ≤ m → N ≤ n → padicNorm p (↑f n) = padicNorm p (↑f m)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The `p`-adic norm of the entries of a nonzero Cauchy sequence of rationals is eventually\\nconstant. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : PseudoMetricSpace α] (B : ℕ → ℝ),\\n  (∀ (n : ℕ), 0 < B n) →\\n    (∀ (u : ℕ → α),\\n        (∀ (N n m : ℕ), N ≤ n → N ≤ m → dist (u n) (u m) < B N) → ∃ x, Filter.Tendsto u Filter.atTop (nhds x)) →\\n      CompleteSpace α\",\n  \"isProp\": true,\n  \"docString\":\n  \"A very useful criterion to show that a space is complete is to show that all sequences\\nwhich satisfy a bound of the form `dist (u n) (u m) < B N` for all `n m ≥ N` are\\nconverging. This is often applied for `B N = 2^{-N}`, i.e., with a very fast convergence to\\n`0`, which makes it possible to use arguments of converging series, while this is impossible\\nto do in general for arbitrary Cauchy sequences. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {β : Type u_2} {m : MeasurableSpace α} (μ : MeasureTheory.Measure α) [inst : NormedAddCommGroup β]\\n  {p : ENNReal} {f : ℕ → α → β} {g : α → β} [inst_1 : MeasureTheory.IsFiniteMeasure μ],\\n  1 ≤ p →\\n    p ≠ ⊤ →\\n      (∀ (n : ℕ), MeasureTheory.AEStronglyMeasurable (f n) μ) →\\n        MeasureTheory.Memℒp g p →\\n          MeasureTheory.UnifIntegrable f p μ →\\n            MeasureTheory.TendstoInMeasure μ f Filter.atTop g →\\n              Filter.Tendsto (fun n => MeasureTheory.snorm (f n - g) p μ) Filter.atTop (nhds 0)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Forward direction of Vitali's convergence theorem: if `f` is a sequence of uniformly integrable\\nfunctions that converge in measure to some function `g` in a finite measure space, then `f`\\nconverge in Lp to `g`. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : PseudoMetricSpace X] [inst_1 : ProperSpace X] {s : Set X},\\n  Metric.Bounded s →\\n    ∀ {x : ℕ → X},\\n      (∀ (n : ℕ), x n ∈ s) → ∃ a, a ∈ closure s ∧ ∃ φ, StrictMono φ ∧ Filter.Tendsto (x ∘ φ) Filter.atTop (nhds a)\",\n  \"isProp\": true,\n  \"docString\":\n  \"A version of Bolzano-Weistrass: in a proper metric space (eg. $ℝ^n$),\\nevery bounded sequence has a converging subsequence. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {s : Set α} {p : Filter ι},\\n  TendstoUniformlyOn F f p s → UniformCauchySeqOn F p s\",\n  \"isProp\": true,\n  \"docString\": \"A sequence that converges uniformly is also uniformly Cauchy \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {s : Set α} {p : Filter ι},\\n  TendstoUniformlyOn F f p s → ∀ {x : α}, x ∈ s → Filter.Tendsto (fun n => F n x) p (nhds (f x))\",\n  \"isProp\": true,\n  \"docString\": \"Uniform converence implies pointwise convergence. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : PseudoMetricSpace α] [inst_1 : Nonempty β] [inst_2 : SemilatticeSup β] {u : β → α},\\n  CauchySeq u ↔ ∀ (ε : ℝ), ε > 0 → ∃ N, ∀ (n : β), n ≥ N → dist (u n) (u N) < ε\",\n  \"isProp\": true,\n  \"docString\":\n  \"A variation around the pseudometric characterization of Cauchy sequences \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : LinearOrderedField α] {β : Type u_2} [inst_1 : Ring β] {abv : β → α}\\n  [inst_2 : IsAbsoluteValue abv] [self : CauSeq.IsComplete β abv] (s : CauSeq β abv), ∃ b, s ≈ CauSeq.const abv b\",\n  \"isProp\": true,\n  \"docString\": \"Every Cauchy sequence has a limit. \"}]\n", "prompt_cons": "/-- A Cauchy sequence in a complete space converges -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : UniformSpace α] [inst_1 : SemilatticeSup β] [inst_2 : CompleteSpace α] {u : β → α},\n  CauchySeq u → ∃ x, Filter.Tendsto u Filter.atTop (nhds x) :=\n\n/-- If a sequence is Cauchy in the `lp E p` topology and pointwise convergent to an element `f` of\n`lp E p`, then it converges to `f` in the `lp E p` topology. -/\ntheorem ∀ {α : Type u_1} {E : α → Type u_2} {p : ENNReal} [inst : (i : α) → NormedAddCommGroup (E i)] [_i : Fact (1 ≤ p)]\n  {F : ℕ → { x // x ∈ lp E p }},\n  CauchySeq F →\n    ∀ {f : { x // x ∈ lp E p }},\n      Filter.Tendsto (id fun i => ↑(F i)) Filter.atTop (nhds ↑f) → Filter.Tendsto F Filter.atTop (nhds f) :=\n\n/-- A uniformly Cauchy sequence converges uniformly to its limit -/\ntheorem ∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {p : Filter ι}\n  {p' : Filter α} [inst_1 : Filter.NeBot p],\n  UniformCauchySeqOnFilter F p p' →\n    (∀ᶠ (x : α) in p', Filter.Tendsto (fun n => F n x) p (nhds (f x))) → TendstoUniformlyOnFilter F f p p' :=\n\n/-- If a Cauchy sequence of continuous linear map converges to a continuous linear map pointwise,\nthen it converges to the same map in norm. This lemma is used to prove that the space of continuous\nlinear maps is complete provided that the codomain is a complete space. -/\ntheorem ∀ {𝕜 : Type u_1} {𝕜₂ : Type u_2} {F : Type u_4} [inst : NormedAddCommGroup F] [inst_1 : NontriviallyNormedField 𝕜]\n  [inst_2 : NontriviallyNormedField 𝕜₂] [inst_3 : NormedSpace 𝕜₂ F] {σ₁₂ : 𝕜 →+* 𝕜₂} {E' : Type u_3}\n  [inst_4 : SeminormedAddCommGroup E'] [inst_5 : NormedSpace 𝕜 E'] [inst_6 : RingHomIsometric σ₁₂]\n  {f : ℕ → E' →SL[σ₁₂] F} {g : E' →SL[σ₁₂] F},\n  Filter.Tendsto (fun n x => ↑(f n) x) Filter.atTop (nhds ↑g) → CauchySeq f → Filter.Tendsto f Filter.atTop (nhds g) :=\n\n/-- In a complete space, the sum of a converging power series `p` admits `p` as a power series.\nThis is not totally obvious as we need to check the convergence of the series. -/\ntheorem ∀ {𝕜 : Type u_2} {E : Type u_3} {F : Type u_1} [inst : NontriviallyNormedField 𝕜] [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] [inst_5 : CompleteSpace F]\n  (p : FormalMultilinearSeries 𝕜 E F),\n  0 < FormalMultilinearSeries.radius p →\n    HasFPowerSeriesOnBall (FormalMultilinearSeries.sum p) p 0 (FormalMultilinearSeries.radius p) :=\n\n/-- If `K` is a complete subset, then any cauchy sequence in `K` converges to a point in `K` -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : UniformSpace α] [inst_1 : SemilatticeSup β] {K : Set α},\n  IsComplete K → ∀ {u : β → α}, (∀ (n : β), u n ∈ K) → CauchySeq u → ∃ v, v ∈ K ∧ Filter.Tendsto u Filter.atTop (nhds v) :=\n\n/-- If the distance between `s n` and `s m`, `n ≤ m` is bounded above by `b n`\nand `b` converges to zero, then `s` is a Cauchy sequence. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : PseudoMetricSpace α] [inst_1 : Nonempty β] [inst_2 : SemilatticeSup β] {s : β → α}\n  (b : β → ℝ), (∀ (n m : β), n ≤ m → dist (s n) (s m) ≤ b n) → Filter.Tendsto b Filter.atTop (nhds 0) → CauchySeq s :=\n\n/-- If a Cauchy sequence has a convergent subsequence, then it converges. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : UniformSpace α] [inst_1 : SemilatticeSup β] {u : β → α},\n  CauchySeq u →\n    ∀ {ι : Type u_1} {f : ι → β} {p : Filter ι} [inst_2 : Filter.NeBot p],\n      Filter.Tendsto f p Filter.atTop →\n        ∀ {a : α}, Filter.Tendsto (u ∘ f) p (nhds a) → Filter.Tendsto u Filter.atTop (nhds a) :=\n\n/-- Convergence in Lp implies convergence in measure. -/\ntheorem ∀ {α : Type u_1} {ι : Type u_3} {E : Type u_2} {m : MeasurableSpace α} {μ : MeasureTheory.Measure α}\n  [inst : NormedAddCommGroup E] {p : ENNReal} [hp : Fact (1 ≤ p)] {f : ι → { x // x ∈ MeasureTheory.Lp E p }}\n  {g : { x // x ∈ MeasureTheory.Lp E p }} {l : Filter ι},\n  Filter.Tendsto f l (nhds g) → MeasureTheory.TendstoInMeasure μ (fun n => ↑↑(f n)) l ↑↑g :=\n\n/-- In a pseudometric space, Cauchy sequences are characterized by the fact that, eventually,\nthe distance between its elements is arbitrarily small -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : PseudoMetricSpace α] [inst_1 : Nonempty β] [inst_2 : SemilatticeSup β] {u : β → α},\n  CauchySeq u ↔ ∀ (ε : ℝ), ε > 0 → ∃ N, ∀ (m : β), m ≥ N → ∀ (n : β), n ≥ N → dist (u m) (u n) < ε :=\n\n/-- If the distance between `s n` and `s m`, `n, m ≥ N` is bounded above by `b N`\nand `b` converges to zero, then `s` is a Cauchy sequence. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : PseudoMetricSpace α] [inst_1 : Nonempty β] [inst_2 : SemilatticeSup β] {s : β → α}\n  (b : β → ℝ),\n  (∀ (n m N : β), N ≤ n → N ≤ m → dist (s n) (s m) ≤ b N) → Filter.Tendsto b Filter.atTop (nhds 0) → CauchySeq s :=\n\n/-- In a pseudometric space, uniform Cauchy sequences are characterized by the fact that,\neventually, the distance between all its elements is uniformly, arbitrarily small -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : PseudoMetricSpace α] [inst_1 : Nonempty β] [inst_2 : SemilatticeSup β]\n  {γ : Type u_1} {F : β → γ → α} {s : Set γ},\n  UniformCauchySeqOn F Filter.atTop s ↔\n    ∀ (ε : ℝ), ε > 0 → ∃ N, ∀ (m : β), m ≥ N → ∀ (n : β), n ≥ N → ∀ (x : γ), x ∈ s → dist (F m x) (F n x) < ε :=\n\n/-- The `p`-adic norm of the entries of a nonzero Cauchy sequence of rationals is eventually\nconstant. -/\ntheorem ∀ {p : ℕ} [inst : Fact (Nat.Prime p)] {f : CauSeq ℚ (padicNorm p)},\n  ¬f ≈ 0 → ∃ N, ∀ (m n : ℕ), N ≤ m → N ≤ n → padicNorm p (↑f n) = padicNorm p (↑f m) :=\n\n/-- A very useful criterion to show that a space is complete is to show that all sequences\nwhich satisfy a bound of the form `dist (u n) (u m) < B N` for all `n m ≥ N` are\nconverging. This is often applied for `B N = 2^{-N}`, i.e., with a very fast convergence to\n`0`, which makes it possible to use arguments of converging series, while this is impossible\nto do in general for arbitrary Cauchy sequences. -/\ntheorem ∀ {α : Type u} [inst : PseudoMetricSpace α] (B : ℕ → ℝ),\n  (∀ (n : ℕ), 0 < B n) →\n    (∀ (u : ℕ → α),\n        (∀ (N n m : ℕ), N ≤ n → N ≤ m → dist (u n) (u m) < B N) → ∃ x, Filter.Tendsto u Filter.atTop (nhds x)) →\n      CompleteSpace α :=\n\n/-- Forward direction of Vitali's convergence theorem: if `f` is a sequence of uniformly integrable\nfunctions that converge in measure to some function `g` in a finite measure space, then `f`\nconverge in Lp to `g`. -/\ntheorem ∀ {α : Type u_1} {β : Type u_2} {m : MeasurableSpace α} (μ : MeasureTheory.Measure α) [inst : NormedAddCommGroup β]\n  {p : ENNReal} {f : ℕ → α → β} {g : α → β} [inst_1 : MeasureTheory.IsFiniteMeasure μ],\n  1 ≤ p →\n    p ≠ ⊤ →\n      (∀ (n : ℕ), MeasureTheory.AEStronglyMeasurable (f n) μ) →\n        MeasureTheory.Memℒp g p →\n          MeasureTheory.UnifIntegrable f p μ →\n            MeasureTheory.TendstoInMeasure μ f Filter.atTop g →\n              Filter.Tendsto (fun n => MeasureTheory.snorm (f n - g) p μ) Filter.atTop (nhds 0) :=\n\n/-- A version of Bolzano-Weistrass: in a proper metric space (eg. $ℝ^n$),\nevery bounded sequence has a converging subsequence. -/\ntheorem ∀ {X : Type u_1} [inst : PseudoMetricSpace X] [inst_1 : ProperSpace X] {s : Set X},\n  Metric.Bounded s →\n    ∀ {x : ℕ → X},\n      (∀ (n : ℕ), x n ∈ s) → ∃ a, a ∈ closure s ∧ ∃ φ, StrictMono φ ∧ Filter.Tendsto (x ∘ φ) Filter.atTop (nhds a) :=\n\n/-- A sequence that converges uniformly is also uniformly Cauchy -/\ntheorem ∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {s : Set α} {p : Filter ι},\n  TendstoUniformlyOn F f p s → UniformCauchySeqOn F p s :=\n\n/-- Uniform converence implies pointwise convergence. -/\ntheorem ∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {s : Set α} {p : Filter ι},\n  TendstoUniformlyOn F f p s → ∀ {x : α}, x ∈ s → Filter.Tendsto (fun n => F n x) p (nhds (f x)) :=\n\n/-- A variation around the pseudometric characterization of Cauchy sequences -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : PseudoMetricSpace α] [inst_1 : Nonempty β] [inst_2 : SemilatticeSup β] {u : β → α},\n  CauchySeq u ↔ ∀ (ε : ℝ), ε > 0 → ∃ N, ∀ (n : β), n ≥ N → dist (u n) (u N) < ε :=\n\n/-- Every Cauchy sequence has a limit. -/\ntheorem ∀ {α : Type u_1} [inst : LinearOrderedField α] {β : Type u_2} [inst_1 : Ring β] {abv : β → α}\n  [inst_2 : IsAbsoluteValue abv] [self : CauSeq.IsComplete β abv] (s : CauSeq β abv), ∃ b, s ≈ CauSeq.const abv b :=\n\n/-- Suppose `{p_n}` is a Cauchy sequence in a metric space `X`, and some sequence `{p_{n l}}` converges to a point `p ∈ X`. Prove that the full sequence `{p_n}` converges to `p`. -/\ntheorem", "choices": ["∀ {α : Type u} {β : Type v} [inst : UniformSpace α] [inst_1 : SemilatticeSup β] {u : β → α},\n  CauchySeq u →\n    ∀ {ι : Type u_1} {l : ι → β} {p : Filter ι} [inst_2 : Filter.NeBot p],\n      Filter.Tendsto l p Filter.atTop →\n        ∀ {a : α}, Filter.Tendsto (u ∘ l) p (nhds a) → Filter.Tendsto u Filter.atTop (nhds a) ", "∀ {α : Type u} {β : Type v} [inst : MetricSpace α] [inst_1 : SemilatticeSup β] {u : β → α},\n  CauchySeq u →\n    ∀ {ι : Type u_1} {f : ι → β} {p : Filter ι} [inst_2 : Filter.NeBot p],\n      Filter.Tendsto f p Filter.atTop →\n        ∀ {a : α}, Filter.Tendsto (u ∘ f) p (nhds a) → Filter.Tendsto u Filter.atTop (nhds a) ", "∀ {α : Type u} {β : Type v} [inst : MetricSpace α] [inst_1 : Nonempty β] [inst_2 : SemilatticeSup β] {u : β → α},\n  CauchySeq u →\n    ∀ {ι : Type u_1} {f : ι → β} {p : Filter ι} [inst_3 : Filter.NeBot p],\n      Filter.Tendsto f p Filter.atTop →\n        ∀ {a : α}, Filter.Tendsto (u ∘ f) p (nhds a) → Filter.Tendsto u Filter.atTop (nhds a) ", "∀ {α : Type u} {β : Type v} [inst : PseudoMetricSpace α] [inst_1 : Nonempty β] [inst_2 : SemilatticeSup β] {u : β → α},\n  CauchySeq u →\n    ∀ {ι : Type u_1} {f : ι → β} {p : Filter ι} [inst_3 : Filter.NeBot p],\n      Filter.Tendsto f p Filter.atTop →\n        ∀ {a : α}, Filter.Tendsto (u ∘ f) p (nhds a) → Filter.Tendsto u Filter.atTop (nhds a) ", "∀ {α : Type u} {β : Type v} [inst : MetricSpace α] [inst_1 : Nonempty β] [inst_2 : SemilatticeSup β] {u : β → α},\n  CauchySeq u →\n    ∀ {ι : Type u_1} {f : ι → β} {p : Filter ι} [inst_3 : Filter.NeBot p],\n      Filter.Tendsto f p Filter.atTop →\n        ∀ {a : α}, Filter.Tendsto (u ∘ f) p (nhds a) → Filter.Tendsto u Filter.atTop (nhds a) ", "∀ {α : Type u} {β : Type v} [inst : MetricSpace α] [inst_1 : Nonempty β] [inst_2 : SemilatticeSup β] {u : β → α},\n  CauchySeq u →\n    ∀ {ι : Type u_1} {f : ι → β} {p : Filter ι} [inst_3 : Filter.NeBot p],\n      Filter.Tendsto f p Filter.atTop →\n        ∀ {a : α}, Filter.Tendsto (u ∘ f) p (nhds a) → Filter.Tendsto u Filter.atTop (nhds a) ", "∀ {α : Type u} {β : Type v} [inst : PseudoMetricSpace α] [inst_1 : Nonempty β] [inst_2 : SemilatticeSup β] {u : β → α}\n  {ι : Type*} {f : ι → β} {p : Filter ι} [inst_3 : Filter.NeBot p],\n  CauchySeq u →\n    Filter.Tendsto f p Filter.atTop →\n      ∀ {a : α}, Filter.Tendsto (u ∘ f) p (nhds a) → Filter.Tendsto u Filter.atTop (nhds a) ", "∀ {α : Type u} {β : Type v} [inst : MetricSpace α] [inst_1 : Nonempty β] [inst_2 : SemilatticeSup β] {u : β → α},\n  CauchySeq u →\n    ∀ {ι : Type u_1} {f : ι → β} {p : Filter ι} [inst_3 : Filter.NeBot p],\n      Filter.Tendsto f p Filter.atTop →\n        ∀ {a : α}, Filter.Tendsto (u ∘ f) p (nhds a) → Filter.Tendsto u Filter.atTop (nhds a) ", "∀ {α : Type u} {β : Type v} [inst : MetricSpace α] [inst_1 : Nonempty β] [inst_2 : SemilatticeSup β] {u : β → α},\n  CauchySeq u →\n    ∀ {ι : Type u_1} {f : ι → β} {p : Filter ι} [inst_3 : Filter.NeBot p],\n      Filter.Tendsto f p Filter.atTop →\n        ∀ {a : α}, Filter.Tendsto (u ∘ f) p (nhds a) → Filter.Tendsto u Filter.atTop (nhds a) ", "∀ {α : Type u} {β : Type v} [inst : MetricSpace α] [inst_1 : SemilatticeSup β] {u : β → α},\n  CauchySeq u →\n    ∀ {ι : Type u_1} {f : ι → β} {p : Filter ι} [inst_2 : Filter.NeBot p],\n      Filter.Tendsto f p Filter.atTop →\n        ∀ {a : α}, Filter.Tendsto (u ∘ f) p (nhds a) → Filter.Tendsto u Filter.atTop (nhds a) "]}
{"docString": "Suppose `X` is a nonempty complete metric space, and `{G_n}` is a sequence of dense open sets of `X`. Prove Baire's theorem, namely, that `∩_{n=1}^{∞} G_n` is not empty.", "prompts": "[{\"theorem\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : BaireSpace α] {S : Set (Set α)},\\n  (∀ (s : Set α), s ∈ S → IsOpen s) → Set.Countable S → (∀ (s : Set α), s ∈ S → Dense s) → Dense (⋂₀ S)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Baire theorem: a countable intersection of dense open sets is dense. Formulated here with ⋂₀. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : BaireSpace α] {S : Set (Set α)},\\n  (∀ (s : Set α), s ∈ S → IsGδ s) → Set.Countable S → (∀ (s : Set α), s ∈ S → Dense s) → Dense (⋂₀ S)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Baire theorem: a countable intersection of dense Gδ sets is dense. Formulated here with ⋂₀. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {β : Type u_2} [inst : TopologicalSpace α] [inst_1 : BaireSpace α] [inst_2 : Nonempty α]\\n  [inst_3 : Encodable β] {f : β → Set α},\\n  (∀ (s : β), IsClosed (f s)) → ⋃ (s : β), f s = Set.univ → ∃ s, Set.Nonempty (interior (f s))\",\n  \"isProp\": true,\n  \"docString\":\n  \"One of the most useful consequences of Baire theorem: if a countable union of closed sets\\ncovers the space, then one of the sets has nonempty interior. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : BaireSpace α] {S : Set (Set α)},\\n  (∀ (s : Set α), s ∈ S → IsClosed s) →\\n    Set.Countable S → ⋃₀ S = Set.univ → Dense (⋃ (s : Set α) (_ : s ∈ S), interior s)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Baire theorem: if countably many closed sets cover the whole space, then their interiors\\nare dense. Formulated here with `⋃₀`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {β : Type u_1} [inst : TopologicalSpace α] [inst_1 : BaireSpace α] {S : Set β} {f : β → Set α},\\n  (∀ (s : β), s ∈ S → IsClosed (f s)) →\\n    Set.Countable S → ⋃ (s : β) (_ : s ∈ S), f s = Set.univ → Dense (⋃ (s : β) (_ : s ∈ S), interior (f s))\",\n  \"isProp\": true,\n  \"docString\":\n  \"Baire theorem: if countably many closed sets cover the whole space, then their interiors\\nare dense. Formulated here with an index set which is a countable set in any type. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {β : Type u_1} [inst : TopologicalSpace α] [inst_1 : BaireSpace α] {S : Set β} {f : β → Set α},\\n  (∀ (s : β), s ∈ S → IsOpen (f s)) →\\n    Set.Countable S → (∀ (s : β), s ∈ S → Dense (f s)) → Dense (⋂ (s : β) (_ : s ∈ S), f s)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Baire theorem: a countable intersection of dense open sets is dense. Formulated here with\\nan index set which is a countable set in any type. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {β : Type u_1} [inst : TopologicalSpace α] [inst_1 : BaireSpace α] {S : Set β}\\n  {f : (x : β) → x ∈ S → Set α},\\n  (∀ (s : β) (H : s ∈ S), IsGδ (f s H)) →\\n    Set.Countable S → (∀ (s : β) (H : s ∈ S), Dense (f s H)) → Dense (⋂ (s : β) (h : s ∈ S), f s h)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Baire theorem: a countable intersection of dense Gδ sets is dense. Formulated here with\\nan index set which is a countable set in any type. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : BaireSpace α] {s t : Set α},\\n  IsGδ s → IsGδ t → Dense s → Dense t → Dense (s ∩ t)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Baire theorem: the intersection of two dense Gδ sets is dense. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {β : Type u_1} [inst : TopologicalSpace α] [inst_1 : BaireSpace α] [inst_2 : Encodable β]\\n  {f : β → Set α}, (∀ (s : β), IsOpen (f s)) → (∀ (s : β), Dense (f s)) → Dense (⋂ (s : β), f s)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Baire theorem: a countable intersection of dense open sets is dense. Formulated here with\\nan index set which is an encodable type. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : PreirreducibleSpace α] {s : Set α},\\n  IsOpen s → Set.Nonempty s → Dense s\",\n  \"isProp\": true,\n  \"docString\": \"In a (pre)irreducible space, a nonempty open set is dense. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {β : Type u_1} [inst : TopologicalSpace α] [inst_1 : BaireSpace α] [inst_2 : Encodable β]\\n  {f : β → Set α}, (∀ (s : β), IsClosed (f s)) → ⋃ (s : β), f s = Set.univ → Dense (⋃ (s : β), interior (f s))\",\n  \"isProp\": true,\n  \"docString\":\n  \"Baire theorem: if countably many closed sets cover the whole space, then their interiors\\nare dense. Formulated here with an index set which is an encodable type. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {β : Type u_1} [inst : TopologicalSpace α] [inst_1 : BaireSpace α] [inst_2 : Encodable β]\\n  {f : β → Set α}, (∀ (s : β), IsGδ (f s)) → (∀ (s : β), Dense (f s)) → Dense (⋂ (s : β), f s)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Baire theorem: a countable intersection of dense Gδ sets is dense. Formulated here with\\nan index set which is an encodable type. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : NoncompactSpace X],\\n  Filter.NeBot (nhdsWithin OnePoint.infty {OnePoint.infty}ᶜ)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `X` is a non-compact space, then `∞` is not an isolated point of `OnePoint X`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] [inst_2 : Nonempty α],\\n  Nonempty (TopologicalSpace.PositiveCompacts α)\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a nonempty locally compact space, there exists a compact set with nonempty interior. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {s : Set α},\\n  Dense s ↔ ∀ (U : Set α), IsOpen U → Set.Nonempty U → Set.Nonempty (U ∩ s)\",\n  \"isProp\": true,\n  \"docString\":\n  \"A set is dense if and only if it has a nonempty intersection with each nonempty open set. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : PseudoMetricSpace α] {s : Set α} [inst_1 : ProperSpace α],\\n  Metric.Bounded s → IsCompact (closure s)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The **Heine–Borel theorem**: In a proper space, the closure of a bounded set is compact. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : MetricSpace α] {C : Set α},\\n  Perfect C → Set.Nonempty C → ∀ [inst_1 : CompleteSpace α], ∃ f, Set.range f ⊆ C ∧ Continuous f ∧ Function.Injective f\",\n  \"isProp\": true,\n  \"docString\":\n  \"Any nonempty perfect set in a complete metric space admits a continuous injection\\nfrom the Cantor space, `ℕ → Bool`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {β : Type u_1} [inst : ConditionallyCompleteLattice α] [inst_1 : SemilatticeSup β] {f g : β → α},\\n  (Antitone fun n => Set.Icc (f n) (g n)) → (∀ (n : β), f n ≤ g n) → ⨆ (n : β), f n ∈ ⋂ (n : β), Set.Icc (f n) (g n)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Nested intervals lemma: if `[f n, g n]` is an antitone sequence of nonempty\\nclosed intervals, then `⨆ n, f n` belongs to all the intervals `[f n, g n]`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_3} [inst : NontriviallyNormedField 𝕜] {E : Type u_1} [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] {F : Type u_2} [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] (f : E →L[𝕜] F)\\n  [inst_5 : CompleteSpace F],\\n  Function.Surjective ↑f → ∃ C, C ≥ 0 ∧ ∀ (y : F), ∃ x, dist (↑f x) y ≤ 1 / 2 * ‖y‖ ∧ ‖x‖ ≤ C * ‖y‖\",\n  \"isProp\": true,\n  \"docString\":\n  \"First step of the proof of the Banach open mapping theorem (using completeness of `F`):\\nby Baire's theorem, there exists a ball in `E` whose image closure has nonempty interior.\\nRescaling everything, it follows that any `y ∈ F` is arbitrarily well approached by\\nimages of elements of norm at most `C * ‖y‖`.\\nFor further use, we will only need such an element whose image\\nis within distance `‖y‖/2` of `y`, to apply an iterative process. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {S U : Set α},\\n  IsPreirreducible S → IsOpen U → Set.Nonempty (S ∩ U) → S ⊆ closure (S ∩ U)\",\n  \"isProp\": true,\n  \"docString\":\n  \"A nonempty open subset of a preirreducible subspace is dense in the subspace. \"}]\n", "prompt_cons": "/-- Baire theorem: a countable intersection of dense open sets is dense. Formulated here with ⋂₀. -/\ntheorem ∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : BaireSpace α] {S : Set (Set α)},\n  (∀ (s : Set α), s ∈ S → IsOpen s) → Set.Countable S → (∀ (s : Set α), s ∈ S → Dense s) → Dense (⋂₀ S) :=\n\n/-- Baire theorem: a countable intersection of dense Gδ sets is dense. Formulated here with ⋂₀. -/\ntheorem ∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : BaireSpace α] {S : Set (Set α)},\n  (∀ (s : Set α), s ∈ S → IsGδ s) → Set.Countable S → (∀ (s : Set α), s ∈ S → Dense s) → Dense (⋂₀ S) :=\n\n/-- One of the most useful consequences of Baire theorem: if a countable union of closed sets\ncovers the space, then one of the sets has nonempty interior. -/\ntheorem ∀ {α : Type u_1} {β : Type u_2} [inst : TopologicalSpace α] [inst_1 : BaireSpace α] [inst_2 : Nonempty α]\n  [inst_3 : Encodable β] {f : β → Set α},\n  (∀ (s : β), IsClosed (f s)) → ⋃ (s : β), f s = Set.univ → ∃ s, Set.Nonempty (interior (f s)) :=\n\n/-- Baire theorem: if countably many closed sets cover the whole space, then their interiors\nare dense. Formulated here with `⋃₀`. -/\ntheorem ∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : BaireSpace α] {S : Set (Set α)},\n  (∀ (s : Set α), s ∈ S → IsClosed s) →\n    Set.Countable S → ⋃₀ S = Set.univ → Dense (⋃ (s : Set α) (_ : s ∈ S), interior s) :=\n\n/-- Baire theorem: if countably many closed sets cover the whole space, then their interiors\nare dense. Formulated here with an index set which is a countable set in any type. -/\ntheorem ∀ {α : Type u_2} {β : Type u_1} [inst : TopologicalSpace α] [inst_1 : BaireSpace α] {S : Set β} {f : β → Set α},\n  (∀ (s : β), s ∈ S → IsClosed (f s)) →\n    Set.Countable S → ⋃ (s : β) (_ : s ∈ S), f s = Set.univ → Dense (⋃ (s : β) (_ : s ∈ S), interior (f s)) :=\n\n/-- Baire theorem: a countable intersection of dense open sets is dense. Formulated here with\nan index set which is a countable set in any type. -/\ntheorem ∀ {α : Type u_2} {β : Type u_1} [inst : TopologicalSpace α] [inst_1 : BaireSpace α] {S : Set β} {f : β → Set α},\n  (∀ (s : β), s ∈ S → IsOpen (f s)) →\n    Set.Countable S → (∀ (s : β), s ∈ S → Dense (f s)) → Dense (⋂ (s : β) (_ : s ∈ S), f s) :=\n\n/-- Baire theorem: a countable intersection of dense Gδ sets is dense. Formulated here with\nan index set which is a countable set in any type. -/\ntheorem ∀ {α : Type u_2} {β : Type u_1} [inst : TopologicalSpace α] [inst_1 : BaireSpace α] {S : Set β}\n  {f : (x : β) → x ∈ S → Set α},\n  (∀ (s : β) (H : s ∈ S), IsGδ (f s H)) →\n    Set.Countable S → (∀ (s : β) (H : s ∈ S), Dense (f s H)) → Dense (⋂ (s : β) (h : s ∈ S), f s h) :=\n\n/-- Baire theorem: the intersection of two dense Gδ sets is dense. -/\ntheorem ∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : BaireSpace α] {s t : Set α},\n  IsGδ s → IsGδ t → Dense s → Dense t → Dense (s ∩ t) :=\n\n/-- Baire theorem: a countable intersection of dense open sets is dense. Formulated here with\nan index set which is an encodable type. -/\ntheorem ∀ {α : Type u_2} {β : Type u_1} [inst : TopologicalSpace α] [inst_1 : BaireSpace α] [inst_2 : Encodable β]\n  {f : β → Set α}, (∀ (s : β), IsOpen (f s)) → (∀ (s : β), Dense (f s)) → Dense (⋂ (s : β), f s) :=\n\n/-- In a (pre)irreducible space, a nonempty open set is dense. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : PreirreducibleSpace α] {s : Set α},\n  IsOpen s → Set.Nonempty s → Dense s :=\n\n/-- Baire theorem: if countably many closed sets cover the whole space, then their interiors\nare dense. Formulated here with an index set which is an encodable type. -/\ntheorem ∀ {α : Type u_2} {β : Type u_1} [inst : TopologicalSpace α] [inst_1 : BaireSpace α] [inst_2 : Encodable β]\n  {f : β → Set α}, (∀ (s : β), IsClosed (f s)) → ⋃ (s : β), f s = Set.univ → Dense (⋃ (s : β), interior (f s)) :=\n\n/-- Baire theorem: a countable intersection of dense Gδ sets is dense. Formulated here with\nan index set which is an encodable type. -/\ntheorem ∀ {α : Type u_2} {β : Type u_1} [inst : TopologicalSpace α] [inst_1 : BaireSpace α] [inst_2 : Encodable β]\n  {f : β → Set α}, (∀ (s : β), IsGδ (f s)) → (∀ (s : β), Dense (f s)) → Dense (⋂ (s : β), f s) :=\n\n/-- If `X` is a non-compact space, then `∞` is not an isolated point of `OnePoint X`. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : NoncompactSpace X],\n  Filter.NeBot (nhdsWithin OnePoint.infty {OnePoint.infty}ᶜ) :=\n\n/-- In a nonempty locally compact space, there exists a compact set with nonempty interior. -/\ntheorem ∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] [inst_2 : Nonempty α],\n  Nonempty (TopologicalSpace.PositiveCompacts α) :=\n\n/-- A set is dense if and only if it has a nonempty intersection with each nonempty open set. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] {s : Set α},\n  Dense s ↔ ∀ (U : Set α), IsOpen U → Set.Nonempty U → Set.Nonempty (U ∩ s) :=\n\n/-- The **Heine–Borel theorem**: In a proper space, the closure of a bounded set is compact. -/\ntheorem ∀ {α : Type u} [inst : PseudoMetricSpace α] {s : Set α} [inst_1 : ProperSpace α],\n  Metric.Bounded s → IsCompact (closure s) :=\n\n/-- Any nonempty perfect set in a complete metric space admits a continuous injection\nfrom the Cantor space, `ℕ → Bool`. -/\ntheorem ∀ {α : Type u_1} [inst : MetricSpace α] {C : Set α},\n  Perfect C → Set.Nonempty C → ∀ [inst_1 : CompleteSpace α], ∃ f, Set.range f ⊆ C ∧ Continuous f ∧ Function.Injective f :=\n\n/-- Nested intervals lemma: if `[f n, g n]` is an antitone sequence of nonempty\nclosed intervals, then `⨆ n, f n` belongs to all the intervals `[f n, g n]`. -/\ntheorem ∀ {α : Type u_2} {β : Type u_1} [inst : ConditionallyCompleteLattice α] [inst_1 : SemilatticeSup β] {f g : β → α},\n  (Antitone fun n => Set.Icc (f n) (g n)) → (∀ (n : β), f n ≤ g n) → ⨆ (n : β), f n ∈ ⋂ (n : β), Set.Icc (f n) (g n) :=\n\n/-- First step of the proof of the Banach open mapping theorem (using completeness of `F`):\nby Baire's theorem, there exists a ball in `E` whose image closure has nonempty interior.\nRescaling everything, it follows that any `y ∈ F` is arbitrarily well approached by\nimages of elements of norm at most `C * ‖y‖`.\nFor further use, we will only need such an element whose image\nis within distance `‖y‖/2` of `y`, to apply an iterative process. -/\ntheorem ∀ {𝕜 : Type u_3} [inst : NontriviallyNormedField 𝕜] {E : Type u_1} [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E] {F : Type u_2} [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] (f : E →L[𝕜] F)\n  [inst_5 : CompleteSpace F],\n  Function.Surjective ↑f → ∃ C, C ≥ 0 ∧ ∀ (y : F), ∃ x, dist (↑f x) y ≤ 1 / 2 * ‖y‖ ∧ ‖x‖ ≤ C * ‖y‖ :=\n\n/-- A nonempty open subset of a preirreducible subspace is dense in the subspace. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] {S U : Set α},\n  IsPreirreducible S → IsOpen U → Set.Nonempty (S ∩ U) → S ⊆ closure (S ∩ U) :=\n\n/-- Suppose `X` is a nonempty complete metric space, and `{G_n}` is a sequence of dense open sets of `X`. Prove Baire's theorem, namely, that `∩_{n=1}^{∞} G_n` is not empty. -/\ntheorem", "choices": ["∀ {X : Type u_1} [inst : MetricSpace X] [inst_1 : CompleteSpace X] {β : Type u_2} [inst_2 : Encodable β]\n  {G : β → Set X}, (∀ (n : β), IsOpen (G n)) → (∀ (n : β), Dense (G n)) → Set.Nonempty (⋂ (n : β), G n) ", "∀ {α : Type u_1} [inst : MetricSpace α] [inst_1 : CompleteSpace α] {G : ℕ → Set α},\n  (∀ (n : ℕ), IsOpen (G n)) → (∀ (n : ℕ), Dense (G n)) → Set.Nonempty (⋂ (n : ℕ), G n) ", "∀ {X : Type u_1} [inst : MetricSpace X] [inst_1 : CompleteSpace X] [inst_2 : Nonempty X] {G : ℕ → Set X},\n  (∀ n, IsOpen (G n) ∧ Dense (G n)) → Set.Nonempty (⋂ (n : ℕ), G n) ", "forall {α : Type u_1} [inst : MetricSpace α] [inst_1 : CompleteSpace α] {f : ℕ → Set α},\n  (∀ (n : ℕ), IsOpen (f n) ∧ Dense (f n)) → Set.Nonempty (⋂ (n : ℕ), f n) ", "forall {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : BaireSpace α] {S : ℕ → Set α},\n  (∀ n, IsOpen (S n)) → (∀ n, Dense (S n)) → Set.Nonempty (⋂ n, S n) ", "∀ {X : Type u_1} [inst : MetricSpace X] [inst_1 : CompleteSpace X] {G : ℕ → Set X},\n  (∀ n, IsOpen (G n) ∧ Dense (G n)) → Set.Nonempty (⋂ (n : ℕ), G n) ", "∀ {α : Type u_2} [inst : MetricSpace α] [inst_1 : CompleteSpace α] {β : Type u_1} [inst_2 : Encodable β]\n  {f : β → Set α}, (∀ (s : β), IsOpen (f s)) → (∀ (s : β), Dense (f s)) → Set.Nonempty (⋂ (s : β), f s) ", "forall {X : Type u_1} [inst : MetricSpace X] [inst_1 : CompleteSpace X] {G : ℕ → Set X},\n  (∀ (n : ℕ), IsOpen (G n)) → (∀ (n : ℕ), Dense (G n)) → Set.Nonempty (⋂ (n : ℕ), G n) ", "forall {X : Type u_1} [inst : MetricSpace X] [inst_1 : CompleteSpace X] {G : ℕ → Set X},\n  (∀ n, IsOpen (G n)) → (∀ n, Dense (G n)) → Set.Nonempty (⋂ (n : ℕ), G n) ", "forall {X : Type u_1} [inst : MetricSpace X] [inst_1 : CompleteSpace X] [inst_2 : Nonempty X] {G : ℕ → Set X},\n  (∀ (n : ℕ), IsOpen (G n)) → (∀ (n : ℕ), Dense (G n)) → Set.Nonempty (⋂ (n : ℕ), G n) "]}
{"docString": "If `f` is a continuous mapping of a metric space `X` into a metric space `Y`, prove that `f(∂E) ⊆ ∂f(E)` for every set `E ⊆ X`. (`∂E` denotes the closure of `E`).", "prompts": "[{\"theorem\":\n  \"∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {n : ℕ∞} {s : Set ℂ}\\n  {f : ℂ → E}, DifferentiableOn ℂ f s → IsOpen s → ContDiffOn ℂ n f s\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f : ℂ → E` is complex differentiable on some open set `s`, then it is continuously\\ndifferentiable on `s`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_3} [inst : NontriviallyNormedField 𝕜] {E : Type u_1} [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] {F : Type u_2} [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F]\\n  [inst_5 : CompleteSpace F] [inst_6 : CompleteSpace E] (g : E →ₗ[𝕜] F),\\n  (∀ (u : ℕ → E) (x : E) (y : F),\\n      Filter.Tendsto u Filter.atTop (nhds x) → Filter.Tendsto (↑g ∘ u) Filter.atTop (nhds y) → y = ↑g x) →\\n    Continuous ↑g\",\n  \"isProp\": true,\n  \"docString\":\n  \"A useful form of the **closed graph theorem** : let `f` be a linear map between two Banach\\nspaces. To show that `f` is continuous, it suffices to show that for any convergent sequence\\n`uₙ ⟶ x`, if `f(uₙ) ⟶ y` then `y = f(x)`. \"},\n {\"theorem\":\n  \"∀ {ι : Type u_2} {X : Type u_1} [inst : MetricSpace X] {K U : ι → Set X},\\n  (∀ (i : ι), IsClosed (K i)) →\\n    (∀ (i : ι), IsOpen (U i)) →\\n      (∀ (i : ι), K i ⊆ U i) →\\n        LocallyFinite K → ∃ δ, (∀ (x : X), 0 < ↑δ x) ∧ ∀ (i : ι) (x : X), x ∈ K i → Metric.closedBall x (↑δ x) ⊆ U i\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `X` be a metric space. Let `K : ι → Set X` be a locally finite family of closed sets, let\\n`U : ι → Set X` be a family of open sets such that `K i ⊆ U i` for all `i`. Then there exists a\\npositive continuous function `δ : C(X, ℝ)` such that for any `i` and `x ∈ K i`, we have\\n`Metric.closedBall x (δ x) ⊆ U i`. \"},\n {\"theorem\":\n  \"∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {f : ℂ → E},\\n  Differentiable ℂ f → ∀ {n : ℕ∞}, ContDiff ℂ n f\",\n  \"isProp\": true,\n  \"docString\":\n  \"A complex differentiable function `f : ℂ → E` is continuously differentiable at every point. \"},\n {\"theorem\":\n  \"∀ {ι : Type u_2} {X : Type u_1} [inst : MetricSpace X] {K U : ι → Set X},\\n  (∀ (i : ι), IsClosed (K i)) →\\n    (∀ (i : ι), IsOpen (U i)) →\\n      (∀ (i : ι), K i ⊆ U i) →\\n        LocallyFinite K → ∃ δ, (∀ (x : X), 0 < ↑δ x) ∧ ∀ (i : ι) (x : X), x ∈ K i → Metric.closedBall x ↑(↑δ x) ⊆ U i\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `X` be a metric space. Let `K : ι → Set X` be a locally finite family of closed sets, let\\n`U : ι → Set X` be a family of open sets such that `K i ⊆ U i` for all `i`. Then there exists a\\npositive continuous function `δ : C(X, ℝ≥0)` such that for any `i` and `x ∈ K i`, we have\\n`Metric.closedBall x (δ x) ⊆ U i`. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : CompleteSpace E] [inst_2 : NormedSpace ℝ E] {f f' : ℝ → E}\\n  {a b : ℝ},\\n  a ≤ b →\\n    ContinuousOn f (Set.Icc a b) →\\n      (∀ (x : ℝ), x ∈ Set.Ioo a b → HasDerivAt f (f' x) x) →\\n        IntervalIntegrable f' MeasureTheory.volume a b → ∫ (y : ℝ) in a..b, f' y = f b - f a\",\n  \"isProp\": true,\n  \"docString\":\n  \"Fundamental theorem of calculus-2: If `f : ℝ → E` is continuous on `[a, b]` (where `a ≤ b`) and\\nhas a derivative at `f' x` for all `x` in `(a, b)`, and `f'` is integrable on `[a, b]`, then\\n`∫ y in a..b, f' y` equals `f b - f a`. \"},\n {\"theorem\":\n  \"∀ {X : Type u_2} {E : Type u_1} [inst : TopologicalSpace X] [inst_1 : AddCommGroup E] [inst_2 : Module ℝ E]\\n  [inst_3 : NormalSpace X] [inst_4 : ParacompactSpace X] [inst_5 : TopologicalSpace E] [inst_6 : ContinuousAdd E]\\n  [inst_7 : ContinuousSMul ℝ E] {t : X → Set E},\\n  (∀ (x : X), Convex ℝ (t x)) →\\n    (∀ (x : X), ∃ U, U ∈ nhds x ∧ ∃ g, ContinuousOn g U ∧ ∀ (y : X), y ∈ U → g y ∈ t y) → ∃ g, ∀ (x : X), ↑g x ∈ t x\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `X` be a normal paracompact topological space (e.g., any extended metric space). Let `E` be\\na topological real vector space. Let `t : X → Set E` be a family of convex sets. Suppose that for\\neach point `x : X`, there exists a neighborhood `U ∈ 𝓝 X` and a function `g : X → E` that is\\ncontinuous on `U` and sends each `y ∈ U` to a point of `t y`. Then there exists a continuous map\\n`g : C(X, E)` such that `g x ∈ t x` for all `x`. See also\\n`exists_continuous_forall_mem_convex_of_local_const`. \"},\n {\"theorem\":\n  \"∀ {ι : Type u_2} {X : Type u_1} [inst : EMetricSpace X] {K U : ι → Set X},\\n  (∀ (i : ι), IsClosed (K i)) →\\n    (∀ (i : ι), IsOpen (U i)) →\\n      (∀ (i : ι), K i ⊆ U i) →\\n        LocallyFinite K → ∃ δ, (∀ (x : X), 0 < ↑δ x) ∧ ∀ (i : ι) (x : X), x ∈ K i → EMetric.closedBall x (↑δ x) ⊆ U i\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `X` be an extended metric space. Let `K : ι → Set X` be a locally finite family of closed\\nsets, let `U : ι → Set X` be a family of open sets such that `K i ⊆ U i` for all `i`. Then there\\nexists a positive continuous function `δ : C(X, ℝ≥0∞)` such that for any `i` and `x ∈ K i`,\\nwe have `EMetric.closedBall x (δ x) ⊆ U i`. \"},\n {\"theorem\":\n  \"∀ {ι : Type u_2} {X : Type u_1} [inst : EMetricSpace X] {K U : ι → Set X},\\n  (∀ (i : ι), IsClosed (K i)) →\\n    (∀ (i : ι), IsOpen (U i)) →\\n      (∀ (i : ι), K i ⊆ U i) →\\n        LocallyFinite K →\\n          ∃ δ, (∀ (x : X), 0 < ↑δ x) ∧ ∀ (i : ι) (x : X), x ∈ K i → EMetric.closedBall x (ENNReal.ofReal (↑δ x)) ⊆ U i\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `X` be an extended metric space. Let `K : ι → Set X` be a locally finite family of closed\\nsets, let `U : ι → Set X` be a family of open sets such that `K i ⊆ U i` for all `i`. Then there\\nexists a positive continuous function `δ : C(X, ℝ)` such that for any `i` and `x ∈ K i`,\\nwe have `EMetric.closedBall x (ENNReal.ofReal (δ x)) ⊆ U i`. \"},\n {\"theorem\":\n  \"∀ {ι : Type u_2} {X : Type u_1} [inst : EMetricSpace X] {K U : ι → Set X},\\n  (∀ (i : ι), IsClosed (K i)) →\\n    (∀ (i : ι), IsOpen (U i)) →\\n      (∀ (i : ι), K i ⊆ U i) →\\n        LocallyFinite K → ∃ δ, (∀ (x : X), 0 < ↑δ x) ∧ ∀ (i : ι) (x : X), x ∈ K i → EMetric.closedBall x ↑(↑δ x) ⊆ U i\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `X` be an extended metric space. Let `K : ι → Set X` be a locally finite family of closed\\nsets, let `U : ι → Set X` be a family of open sets such that `K i ⊆ U i` for all `i`. Then there\\nexists a positive continuous function `δ : C(X, ℝ≥0)` such that for any `i` and `x ∈ K i`,\\nwe have `EMetric.closedBall x (δ x) ⊆ U i`. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} {E : Type u_2} [inst : MeasurableSpace X] [inst_1 : TopologicalSpace X] [inst_2 : NormedAddCommGroup E]\\n  {f : X → E} {μ : MeasureTheory.Measure X} [inst_3 : OpensMeasurableSpace X]\\n  [inst_4 : MeasureTheory.IsLocallyFiniteMeasure μ] [inst_5 : SecondCountableTopologyEither X E],\\n  Continuous f → MeasureTheory.LocallyIntegrable f\",\n  \"isProp\": true,\n  \"docString\":\n  \"A continuous function `f` is locally integrable with respect to any locally finite measure. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] [inst_2 : NormalSpace Y]\\n  (f : BoundedContinuousFunction X ℝ) (e : C(X, Y)),\\n  ClosedEmbedding ↑e → ∃ g, ‖g‖ ≤ ‖f‖ / 3 ∧ dist (BoundedContinuousFunction.compContinuous g e) f ≤ 2 / 3 * ‖f‖\",\n  \"isProp\": true,\n  \"docString\":\n  \"One step in the proof of the Tietze extension theorem. If `e : C(X, Y)` is a closed embedding\\nof a topological space into a normal topological space and `f : X →ᵇ ℝ` is a bounded continuous\\nfunction, then there exists a bounded continuous function `g : Y →ᵇ ℝ` of the norm `‖g‖ ≤ ‖f‖ / 3`\\nsuch that the distance between `g ∘ e` and `f` is at most `(2 / 3) * ‖f‖`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} {γ : Type u_1} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β]\\n  [inst_2 : TopologicalSpace γ] [inst_3 : DiscreteTopology α] {f : α → β → γ},\\n  (∀ (a : α), Continuous (f a)) → Continuous (Function.uncurry f)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a function `f x y` is such that `y ↦ f x y` is continuous for all `x`, and `x` lives in a\\ndiscrete space, then `f` is continuous. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {β : Type u_2} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] {s : Set α} {t : Set β}\\n  {f : α → β}, Set.MapsTo f s t → Continuous f → IsClosed t → Set.MapsTo f (closure s) t\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a continuous map `f` maps `s` to a closed set `t`, then it maps `closure s` to `t`. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] [tY : TopologicalSpace Y] [inst_1 : DiscreteTopology Y]\\n  {f : X → Y}, Embedding f → DiscreteTopology X\",\n  \"isProp\": true,\n  \"docString\":\n  \"The topology induced under an inclusion `f : X → Y` from the discrete topological space `Y`\\nis the discrete topology on `X`. \"},\n {\"theorem\":\n  \"∀ {ι : Type u} {X : Type v} [inst : TopologicalSpace X] {E : Type u_1} [inst_1 : AddCommMonoid E]\\n  [inst_2 : SMulWithZero ℝ E] [inst_3 : TopologicalSpace E] [inst_4 : ContinuousSMul ℝ E] {s : Set X}\\n  (f : PartitionOfUnity ι X s) [inst_5 : ContinuousAdd E] {g : ι → X → E},\\n  (∀ (i : ι) (x : X), x ∈ tsupport ↑(↑f i) → ContinuousAt (g i) x) → Continuous fun x => ∑ᶠ (i : ι), ↑(↑f i) x • g i x\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` is a partition of unity on a set `s : Set X` and `g : ι → X → E` is a family of functions\\nsuch that each `g i` is continuous at every point of the topological support of `f i`, then the sum\\n`fun x ↦ ∑ᶠ i, f i x • g i x` is continuous on the whole space. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {f f' : ℂ → E}\\n  {c : ℂ} {R : ℝ},\\n  (∀ (z : ℂ), z ∈ Metric.sphere c |R| → HasDerivWithinAt f (f' z) (Metric.sphere c |R|) z) →\\n    (∮ (z : ℂ) in C(c, R), f' z) = 0\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f' : ℂ → E` is a derivative of a complex differentiable function on the circle\\n`Metric.sphere c |R|`, then `∮ z in C(c, R), f' z = 0`. \"},\n {\"theorem\":\n  \"∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {R : NNReal} {c : ℂ}\\n  {f : ℂ → E} {s : Set ℂ},\\n  Set.Countable s →\\n    ContinuousOn f (Metric.closedBall c ↑R) →\\n      (∀ (z : ℂ), z ∈ Metric.ball c ↑R \\\\ s → DifferentiableAt ℂ f z) →\\n        0 < R → HasFPowerSeriesOnBall f (cauchyPowerSeries f c ↑R) c ↑R\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f : ℂ → E` is continuous on a closed ball of positive radius and is differentiable at all\\nbut countably many points of the corresponding open ball, then it is analytic on the open ball with\\ncoefficients of the power series given by Cauchy integral formulas. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {f f' : ℂ → E}\\n  {c : ℂ} {R : ℝ},\\n  0 ≤ R →\\n    (∀ (z : ℂ), z ∈ Metric.sphere c R → HasDerivWithinAt f (f' z) (Metric.sphere c R) z) →\\n      (∮ (z : ℂ) in C(c, R), f' z) = 0\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f' : ℂ → E` is a derivative of a complex differentiable function on the circle\\n`Metric.sphere c R`, then `∮ z in C(c, R), f' z = 0`. \"},\n {\"theorem\":\n  \"∀ {D : Set ℝ},\\n  Convex ℝ D →\\n    ∀ {f : ℝ → ℝ},\\n      ContinuousOn f D →\\n        DifferentiableOn ℝ f (interior D) →\\n          ∀ {C : (fun x => ℝ) 1},\\n            (∀ (x : ℝ), x ∈ interior D → C ≤ deriv f x) →\\n              ∀ (x : ℝ), x ∈ D → ∀ (y : ℝ), y ∈ D → x ≤ y → C * (y - x) ≤ f y - f x\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `f` be a function continuous on a convex (or, equivalently, connected) subset `D`\\nof the real line. If `f` is differentiable on the interior of `D` and `C ≤ f'`, then\\n`f` grows at least as fast as `C * x` on `D`, i.e., `C * (y - x) ≤ f y - f x` whenever `x, y ∈ D`,\\n`x ≤ y`. \"}]\n", "prompt_cons": "/-- If `f : ℂ → E` is complex differentiable on some open set `s`, then it is continuously\ndifferentiable on `s`. -/\ntheorem ∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {n : ℕ∞} {s : Set ℂ}\n  {f : ℂ → E}, DifferentiableOn ℂ f s → IsOpen s → ContDiffOn ℂ n f s :=\n\n/-- A useful form of the **closed graph theorem** : let `f` be a linear map between two Banach\nspaces. To show that `f` is continuous, it suffices to show that for any convergent sequence\n`uₙ ⟶ x`, if `f(uₙ) ⟶ y` then `y = f(x)`. -/\ntheorem ∀ {𝕜 : Type u_3} [inst : NontriviallyNormedField 𝕜] {E : Type u_1} [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E] {F : Type u_2} [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F]\n  [inst_5 : CompleteSpace F] [inst_6 : CompleteSpace E] (g : E →ₗ[𝕜] F),\n  (∀ (u : ℕ → E) (x : E) (y : F),\n      Filter.Tendsto u Filter.atTop (nhds x) → Filter.Tendsto (↑g ∘ u) Filter.atTop (nhds y) → y = ↑g x) →\n    Continuous ↑g :=\n\n/-- Let `X` be a metric space. Let `K : ι → Set X` be a locally finite family of closed sets, let\n`U : ι → Set X` be a family of open sets such that `K i ⊆ U i` for all `i`. Then there exists a\npositive continuous function `δ : C(X, ℝ)` such that for any `i` and `x ∈ K i`, we have\n`Metric.closedBall x (δ x) ⊆ U i`. -/\ntheorem ∀ {ι : Type u_2} {X : Type u_1} [inst : MetricSpace X] {K U : ι → Set X},\n  (∀ (i : ι), IsClosed (K i)) →\n    (∀ (i : ι), IsOpen (U i)) →\n      (∀ (i : ι), K i ⊆ U i) →\n        LocallyFinite K → ∃ δ, (∀ (x : X), 0 < ↑δ x) ∧ ∀ (i : ι) (x : X), x ∈ K i → Metric.closedBall x (↑δ x) ⊆ U i :=\n\n/-- A complex differentiable function `f : ℂ → E` is continuously differentiable at every point. -/\ntheorem ∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {f : ℂ → E},\n  Differentiable ℂ f → ∀ {n : ℕ∞}, ContDiff ℂ n f :=\n\n/-- Let `X` be a metric space. Let `K : ι → Set X` be a locally finite family of closed sets, let\n`U : ι → Set X` be a family of open sets such that `K i ⊆ U i` for all `i`. Then there exists a\npositive continuous function `δ : C(X, ℝ≥0)` such that for any `i` and `x ∈ K i`, we have\n`Metric.closedBall x (δ x) ⊆ U i`. -/\ntheorem ∀ {ι : Type u_2} {X : Type u_1} [inst : MetricSpace X] {K U : ι → Set X},\n  (∀ (i : ι), IsClosed (K i)) →\n    (∀ (i : ι), IsOpen (U i)) →\n      (∀ (i : ι), K i ⊆ U i) →\n        LocallyFinite K → ∃ δ, (∀ (x : X), 0 < ↑δ x) ∧ ∀ (i : ι) (x : X), x ∈ K i → Metric.closedBall x ↑(↑δ x) ⊆ U i :=\n\n/-- Fundamental theorem of calculus-2: If `f : ℝ → E` is continuous on `[a, b]` (where `a ≤ b`) and\nhas a derivative at `f' x` for all `x` in `(a, b)`, and `f'` is integrable on `[a, b]`, then\n`∫ y in a..b, f' y` equals `f b - f a`. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : CompleteSpace E] [inst_2 : NormedSpace ℝ E] {f f' : ℝ → E}\n  {a b : ℝ},\n  a ≤ b →\n    ContinuousOn f (Set.Icc a b) →\n      (∀ (x : ℝ), x ∈ Set.Ioo a b → HasDerivAt f (f' x) x) →\n        IntervalIntegrable f' MeasureTheory.volume a b → ∫ (y : ℝ) in a..b, f' y = f b - f a :=\n\n/-- Let `X` be a normal paracompact topological space (e.g., any extended metric space). Let `E` be\na topological real vector space. Let `t : X → Set E` be a family of convex sets. Suppose that for\neach point `x : X`, there exists a neighborhood `U ∈ 𝓝 X` and a function `g : X → E` that is\ncontinuous on `U` and sends each `y ∈ U` to a point of `t y`. Then there exists a continuous map\n`g : C(X, E)` such that `g x ∈ t x` for all `x`. See also\n`exists_continuous_forall_mem_convex_of_local_const`. -/\ntheorem ∀ {X : Type u_2} {E : Type u_1} [inst : TopologicalSpace X] [inst_1 : AddCommGroup E] [inst_2 : Module ℝ E]\n  [inst_3 : NormalSpace X] [inst_4 : ParacompactSpace X] [inst_5 : TopologicalSpace E] [inst_6 : ContinuousAdd E]\n  [inst_7 : ContinuousSMul ℝ E] {t : X → Set E},\n  (∀ (x : X), Convex ℝ (t x)) →\n    (∀ (x : X), ∃ U, U ∈ nhds x ∧ ∃ g, ContinuousOn g U ∧ ∀ (y : X), y ∈ U → g y ∈ t y) → ∃ g, ∀ (x : X), ↑g x ∈ t x :=\n\n/-- Let `X` be an extended metric space. Let `K : ι → Set X` be a locally finite family of closed\nsets, let `U : ι → Set X` be a family of open sets such that `K i ⊆ U i` for all `i`. Then there\nexists a positive continuous function `δ : C(X, ℝ≥0∞)` such that for any `i` and `x ∈ K i`,\nwe have `EMetric.closedBall x (δ x) ⊆ U i`. -/\ntheorem ∀ {ι : Type u_2} {X : Type u_1} [inst : EMetricSpace X] {K U : ι → Set X},\n  (∀ (i : ι), IsClosed (K i)) →\n    (∀ (i : ι), IsOpen (U i)) →\n      (∀ (i : ι), K i ⊆ U i) →\n        LocallyFinite K → ∃ δ, (∀ (x : X), 0 < ↑δ x) ∧ ∀ (i : ι) (x : X), x ∈ K i → EMetric.closedBall x (↑δ x) ⊆ U i :=\n\n/-- Let `X` be an extended metric space. Let `K : ι → Set X` be a locally finite family of closed\nsets, let `U : ι → Set X` be a family of open sets such that `K i ⊆ U i` for all `i`. Then there\nexists a positive continuous function `δ : C(X, ℝ)` such that for any `i` and `x ∈ K i`,\nwe have `EMetric.closedBall x (ENNReal.ofReal (δ x)) ⊆ U i`. -/\ntheorem ∀ {ι : Type u_2} {X : Type u_1} [inst : EMetricSpace X] {K U : ι → Set X},\n  (∀ (i : ι), IsClosed (K i)) →\n    (∀ (i : ι), IsOpen (U i)) →\n      (∀ (i : ι), K i ⊆ U i) →\n        LocallyFinite K →\n          ∃ δ, (∀ (x : X), 0 < ↑δ x) ∧ ∀ (i : ι) (x : X), x ∈ K i → EMetric.closedBall x (ENNReal.ofReal (↑δ x)) ⊆ U i :=\n\n/-- Let `X` be an extended metric space. Let `K : ι → Set X` be a locally finite family of closed\nsets, let `U : ι → Set X` be a family of open sets such that `K i ⊆ U i` for all `i`. Then there\nexists a positive continuous function `δ : C(X, ℝ≥0)` such that for any `i` and `x ∈ K i`,\nwe have `EMetric.closedBall x (δ x) ⊆ U i`. -/\ntheorem ∀ {ι : Type u_2} {X : Type u_1} [inst : EMetricSpace X] {K U : ι → Set X},\n  (∀ (i : ι), IsClosed (K i)) →\n    (∀ (i : ι), IsOpen (U i)) →\n      (∀ (i : ι), K i ⊆ U i) →\n        LocallyFinite K → ∃ δ, (∀ (x : X), 0 < ↑δ x) ∧ ∀ (i : ι) (x : X), x ∈ K i → EMetric.closedBall x ↑(↑δ x) ⊆ U i :=\n\n/-- A continuous function `f` is locally integrable with respect to any locally finite measure. -/\ntheorem ∀ {X : Type u_1} {E : Type u_2} [inst : MeasurableSpace X] [inst_1 : TopologicalSpace X] [inst_2 : NormedAddCommGroup E]\n  {f : X → E} {μ : MeasureTheory.Measure X} [inst_3 : OpensMeasurableSpace X]\n  [inst_4 : MeasureTheory.IsLocallyFiniteMeasure μ] [inst_5 : SecondCountableTopologyEither X E],\n  Continuous f → MeasureTheory.LocallyIntegrable f :=\n\n/-- One step in the proof of the Tietze extension theorem. If `e : C(X, Y)` is a closed embedding\nof a topological space into a normal topological space and `f : X →ᵇ ℝ` is a bounded continuous\nfunction, then there exists a bounded continuous function `g : Y →ᵇ ℝ` of the norm `‖g‖ ≤ ‖f‖ / 3`\nsuch that the distance between `g ∘ e` and `f` is at most `(2 / 3) * ‖f‖`. -/\ntheorem ∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] [inst_2 : NormalSpace Y]\n  (f : BoundedContinuousFunction X ℝ) (e : C(X, Y)),\n  ClosedEmbedding ↑e → ∃ g, ‖g‖ ≤ ‖f‖ / 3 ∧ dist (BoundedContinuousFunction.compContinuous g e) f ≤ 2 / 3 * ‖f‖ :=\n\n/-- If a function `f x y` is such that `y ↦ f x y` is continuous for all `x`, and `x` lives in a\ndiscrete space, then `f` is continuous. -/\ntheorem ∀ {α : Type u} {β : Type v} {γ : Type u_1} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β]\n  [inst_2 : TopologicalSpace γ] [inst_3 : DiscreteTopology α] {f : α → β → γ},\n  (∀ (a : α), Continuous (f a)) → Continuous (Function.uncurry f) :=\n\n/-- If a continuous map `f` maps `s` to a closed set `t`, then it maps `closure s` to `t`. -/\ntheorem ∀ {α : Type u_1} {β : Type u_2} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] {s : Set α} {t : Set β}\n  {f : α → β}, Set.MapsTo f s t → Continuous f → IsClosed t → Set.MapsTo f (closure s) t :=\n\n/-- The topology induced under an inclusion `f : X → Y` from the discrete topological space `Y`\nis the discrete topology on `X`. -/\ntheorem ∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] [tY : TopologicalSpace Y] [inst_1 : DiscreteTopology Y]\n  {f : X → Y}, Embedding f → DiscreteTopology X :=\n\n/-- If `f` is a partition of unity on a set `s : Set X` and `g : ι → X → E` is a family of functions\nsuch that each `g i` is continuous at every point of the topological support of `f i`, then the sum\n`fun x ↦ ∑ᶠ i, f i x • g i x` is continuous on the whole space. -/\ntheorem ∀ {ι : Type u} {X : Type v} [inst : TopologicalSpace X] {E : Type u_1} [inst_1 : AddCommMonoid E]\n  [inst_2 : SMulWithZero ℝ E] [inst_3 : TopologicalSpace E] [inst_4 : ContinuousSMul ℝ E] {s : Set X}\n  (f : PartitionOfUnity ι X s) [inst_5 : ContinuousAdd E] {g : ι → X → E},\n  (∀ (i : ι) (x : X), x ∈ tsupport ↑(↑f i) → ContinuousAt (g i) x) → Continuous fun x => ∑ᶠ (i : ι), ↑(↑f i) x • g i x :=\n\n/-- If `f' : ℂ → E` is a derivative of a complex differentiable function on the circle\n`Metric.sphere c |R|`, then `∮ z in C(c, R), f' z = 0`. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {f f' : ℂ → E}\n  {c : ℂ} {R : ℝ},\n  (∀ (z : ℂ), z ∈ Metric.sphere c |R| → HasDerivWithinAt f (f' z) (Metric.sphere c |R|) z) →\n    (∮ (z : ℂ) in C(c, R), f' z) = 0 :=\n\n/-- If `f : ℂ → E` is continuous on a closed ball of positive radius and is differentiable at all\nbut countably many points of the corresponding open ball, then it is analytic on the open ball with\ncoefficients of the power series given by Cauchy integral formulas. -/\ntheorem ∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {R : NNReal} {c : ℂ}\n  {f : ℂ → E} {s : Set ℂ},\n  Set.Countable s →\n    ContinuousOn f (Metric.closedBall c ↑R) →\n      (∀ (z : ℂ), z ∈ Metric.ball c ↑R \\ s → DifferentiableAt ℂ f z) →\n        0 < R → HasFPowerSeriesOnBall f (cauchyPowerSeries f c ↑R) c ↑R :=\n\n/-- If `f' : ℂ → E` is a derivative of a complex differentiable function on the circle\n`Metric.sphere c R`, then `∮ z in C(c, R), f' z = 0`. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {f f' : ℂ → E}\n  {c : ℂ} {R : ℝ},\n  0 ≤ R →\n    (∀ (z : ℂ), z ∈ Metric.sphere c R → HasDerivWithinAt f (f' z) (Metric.sphere c R) z) →\n      (∮ (z : ℂ) in C(c, R), f' z) = 0 :=\n\n/-- Let `f` be a function continuous on a convex (or, equivalently, connected) subset `D`\nof the real line. If `f` is differentiable on the interior of `D` and `C ≤ f'`, then\n`f` grows at least as fast as `C * x` on `D`, i.e., `C * (y - x) ≤ f y - f x` whenever `x, y ∈ D`,\n`x ≤ y`. -/\ntheorem ∀ {D : Set ℝ},\n  Convex ℝ D →\n    ∀ {f : ℝ → ℝ},\n      ContinuousOn f D →\n        DifferentiableOn ℝ f (interior D) →\n          ∀ {C : (fun x => ℝ) 1},\n            (∀ (x : ℝ), x ∈ interior D → C ≤ deriv f x) →\n              ∀ (x : ℝ), x ∈ D → ∀ (y : ℝ), y ∈ D → x ≤ y → C * (y - x) ≤ f y - f x :=\n\n/-- If `f` is a continuous mapping of a metric space `X` into a metric space `Y`, prove that `f(∂E) ⊆ ∂f(E)` for every set `E ⊆ X`. (`∂E` denotes the closure of `E`). -/\ntheorem", "choices": ["∀ {X : Type u_1} {Y : Type u_2} [inst : MetricSpace X] [inst_1 : MetricSpace Y] {E : Set X} {f : X → Y},\n  Continuous f → Set.MapsTo f (closure E) (closure (f '' E)) ", "forall {X : Type u} {Y : Type v} [inst : MetricSpace X] [inst_1 : MetricSpace Y]\n  {f : X → Y} {E : Set X},\n    Continuous f → Set.MapsTo f (closure E) (closure (f '' E)) ", "forall {X : Type u_1} {Y : Type u_2} [inst : MetricSpace X] [inst_1 : MetricSpace Y] {f : X → Y} {E : Set X},\n  Continuous f → IsClosed E → Set.MapsTo f (∂E) (∂(Set.Image f E)) ", "forall {X Y : Type u} [inst : EmetricSpace X] [inst_1 : EmetricSpace Y] {f : X → Y} {E : Set X},\n  Continuous f → Set.MapsTo f (closure E) (closure (f '' E)) ", "∀ {X : Type u} {Y : Type v} [inst : MetricSpace X] [inst_1 : MetricSpace Y] {f : X → Y} {E : Set X},\n  Continuous f → Set.MapsTo f (closure E) (closure (f '' E)) ", "forall {X : Type u_1} {Y : Type u_2} [inst : MetricSpace X] [inst_1 : MetricSpace Y] (f : X → Y) (E : Set X),\n  Continuous f → Set.MapsTo f (closure E) (closure (f '' E)) ", " ∀ {X : Type u_1} {Y : Type u_2} [inst : MetricSpace X] [inst_1 : MetricSpace Y] {f : X → Y} {E : Set X},\n  Continuous f → Set.MapsTo f (closure E) (closure (f '' E)) ", "∀ {X : Type u} {Y : Type v} [inst : MetricSpace X] [inst_1 : MetricSpace Y] {f : X → Y} {E : Set X},\n  Continuous f → Set.MapsTo f (closure E) (closure (f '' E)) ", "forall {X Y : Type} [inst : MetricSpace X] [inst_1 : MetricSpace Y] {f : X → Y} {E : Set X},\n  Continuous f → Set.MapsTo f (closure E) (closure (Set.Image f E)) ", "∀ {X : Type u_1} {Y : Type u_2} [inst : MetricSpace X] [inst_1 : MetricSpace Y] {f : X → Y} {E : Set X},\n  Continuous f → Set.MapsTo f (closure E) (closure (f '' E)) "]}
{"docString": "Let `f` and `g` be continuous mappings of a metric space `X` into a metric space `Y`, and let `E` be a dense subset of `X`. Prove that `f(E)` is dense in `f(X)`.", "prompts": "[{\"theorem\":\n  \"∀ {X : Type u_2} {E : Type u_1} [inst : TopologicalSpace X] [inst_1 : AddCommGroup E] [inst_2 : Module ℝ E]\\n  [inst_3 : NormalSpace X] [inst_4 : ParacompactSpace X] [inst_5 : TopologicalSpace E] [inst_6 : ContinuousAdd E]\\n  [inst_7 : ContinuousSMul ℝ E] {t : X → Set E},\\n  (∀ (x : X), Convex ℝ (t x)) →\\n    (∀ (x : X), ∃ U, U ∈ nhds x ∧ ∃ g, ContinuousOn g U ∧ ∀ (y : X), y ∈ U → g y ∈ t y) → ∃ g, ∀ (x : X), ↑g x ∈ t x\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `X` be a normal paracompact topological space (e.g., any extended metric space). Let `E` be\\na topological real vector space. Let `t : X → Set E` be a family of convex sets. Suppose that for\\neach point `x : X`, there exists a neighborhood `U ∈ 𝓝 X` and a function `g : X → E` that is\\ncontinuous on `U` and sends each `y ∈ U` to a point of `t y`. Then there exists a continuous map\\n`g : C(X, E)` such that `g x ∈ t x` for all `x`. See also\\n`exists_continuous_forall_mem_convex_of_local_const`. \"},\n {\"theorem\":\n  \"∀ {X : Type u_2} {E : Type u_1} [inst : TopologicalSpace X] [inst_1 : AddCommGroup E] [inst_2 : Module ℝ E]\\n  [inst_3 : NormalSpace X] [inst_4 : ParacompactSpace X] [inst_5 : TopologicalSpace E] [inst_6 : ContinuousAdd E]\\n  [inst_7 : ContinuousSMul ℝ E] {t : X → Set E},\\n  (∀ (x : X), Convex ℝ (t x)) → (∀ (x : X), ∃ c, ∀ᶠ (y : X) in nhds x, c ∈ t y) → ∃ g, ∀ (x : X), ↑g x ∈ t x\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `X` be a normal paracompact topological space (e.g., any extended metric space). Let `E` be\\na topological real vector space. Let `t : X → Set E` be a family of convex sets. Suppose that for\\neach point `x : X`, there exists a vector `c : E` that belongs to `t y` for all `y` in a\\nneighborhood of `x`. Then there exists a continuous map `g : C(X, E)` such that `g x ∈ t x` for all\\n`x`. See also `exists_continuous_forall_mem_convex_of_local`. \"},\n {\"theorem\":\n  \"∀ {E : Type u_2} {F : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E]\\n  [inst_2 : FiniteDimensional ℝ E] [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace ℝ F]\\n  [inst_5 : FiniteDimensional ℝ F] {f : E → F} {s t : Set E},\\n  ContDiffOn ℝ 1 f s → Convex ℝ s → t ⊆ s → dimH t < ↑(FiniteDimensional.finrank ℝ F) → Dense (f '' t)ᶜ\",\n  \"isProp\": true,\n  \"docString\":\n  \"A particular case of Sard's Theorem. Let `f : E → F` be a map between finite dimensional real\\nvector spaces. Suppose that `f` is `C¹` smooth on a convex set `s` of Hausdorff dimension strictly\\nless than the dimension of `F`. Then the complement of the image `f '' s` is dense in `F`. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] [inst_2 : NormalSpace Y]\\n  (f : BoundedContinuousFunction X ℝ) (e : C(X, Y)),\\n  ClosedEmbedding ↑e → ∃ g, ‖g‖ ≤ ‖f‖ / 3 ∧ dist (BoundedContinuousFunction.compContinuous g e) f ≤ 2 / 3 * ‖f‖\",\n  \"isProp\": true,\n  \"docString\":\n  \"One step in the proof of the Tietze extension theorem. If `e : C(X, Y)` is a closed embedding\\nof a topological space into a normal topological space and `f : X →ᵇ ℝ` is a bounded continuous\\nfunction, then there exists a bounded continuous function `g : Y →ᵇ ℝ` of the norm `‖g‖ ≤ ‖f‖ / 3`\\nsuch that the distance between `g ∘ e` and `f` is at most `(2 / 3) * ‖f‖`. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] [inst_2 : NormalSpace Y]\\n  (f : C(X, ℝ)) (e : X → Y), ClosedEmbedding e → ∃ g, ↑g ∘ e = ↑f\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Tietze extension theorem** for real-valued continuous maps, a version for a closed\\nembedding. Let `e` be a closed embedding of a nonempty topological space `X` into a normal\\ntopological space `Y`. Let `f` be a continuous real-valued function on `X`. Then there exists a\\ncontinuous real-valued function `g : C(Y, ℝ)` such that `g ∘ e = f`. \"},\n {\"theorem\":\n  \"∀ {ι : Type u} {X : Type v} [inst : TopologicalSpace X] {E : Type u_1} [inst_1 : AddCommMonoid E]\\n  [inst_2 : SMulWithZero ℝ E] [inst_3 : TopologicalSpace E] [inst_4 : ContinuousSMul ℝ E] {s : Set X}\\n  (f : PartitionOfUnity ι X s) {g : X → E} {i : ι},\\n  (∀ (x : X), x ∈ tsupport ↑(↑f i) → ContinuousAt g x) → Continuous fun x => ↑(↑f i) x • g x\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` is a partition of unity on `s : Set X` and `g : X → E` is continuous at every point of\\nthe topological support of some `f i`, then `fun x ↦ f i x • g x` is continuous on the whole space.\\n\"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_3} [inst : NontriviallyNormedField 𝕜] {E : Type u_1} [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] {F : Type u_2} [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F]\\n  [inst_5 : CompleteSpace F] [inst_6 : CompleteSpace E] (g : E →ₗ[𝕜] F),\\n  (∀ (u : ℕ → E) (x : E) (y : F),\\n      Filter.Tendsto u Filter.atTop (nhds x) → Filter.Tendsto (↑g ∘ u) Filter.atTop (nhds y) → y = ↑g x) →\\n    Continuous ↑g\",\n  \"isProp\": true,\n  \"docString\":\n  \"A useful form of the **closed graph theorem** : let `f` be a linear map between two Banach\\nspaces. To show that `f` is continuous, it suffices to show that for any convergent sequence\\n`uₙ ⟶ x`, if `f(uₙ) ⟶ y` then `y = f(x)`. \"},\n {\"theorem\":\n  \"∀ {ι : Type u} {X : Type v} [inst : TopologicalSpace X] {E : Type u_1} [inst_1 : AddCommMonoid E]\\n  [inst_2 : SMulWithZero ℝ E] [inst_3 : TopologicalSpace E] [inst_4 : ContinuousSMul ℝ E] {s : Set X}\\n  (f : PartitionOfUnity ι X s) [inst_5 : ContinuousAdd E] {g : ι → X → E},\\n  (∀ (i : ι) (x : X), x ∈ tsupport ↑(↑f i) → ContinuousAt (g i) x) → Continuous fun x => ∑ᶠ (i : ι), ↑(↑f i) x • g i x\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` is a partition of unity on a set `s : Set X` and `g : ι → X → E` is a family of functions\\nsuch that each `g i` is continuous at every point of the topological support of `f i`, then the sum\\n`fun x ↦ ∑ᶠ i, f i x • g i x` is continuous on the whole space. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : Preorder α] [t : OrderClosedTopology α]\\n  [inst_2 : TopologicalSpace β] {f g : β → α} {s : Set β},\\n  IsClosed s → ContinuousOn f s → ContinuousOn g s → IsClosed {x | x ∈ s ∧ f x ≤ g x}\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `s` is a closed set and two functions `f` and `g` are continuous on `s`,\\nthen the set `{x ∈ s | f x ≤ g x}` is a closed set. \"},\n {\"theorem\":\n  \"∀ {X : Type u_2} {Y : Type u_1} {β : Type u_3} [inst : TopologicalSpace X] [inst_1 : PolishSpace X]\\n  [inst_2 : MeasurableSpace X] [inst : BorelSpace X] [inst : TopologicalSpace Y] [inst_3 : T2Space Y]\\n  [inst_4 : MeasurableSpace Y] [inst_5 : OpensMeasurableSpace Y] [inst_6 : MeasurableSpace β]\\n  [inst : TopologicalSpace.SecondCountableTopology Y] {f : X → Y},\\n  Measurable f → Function.Surjective f → ∀ {g : Y → β}, Measurable (g ∘ f) ↔ Measurable g\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f : X → Y` is a surjective Borel measurable map from a Polish space to a topological space\\nwith second countable topology, then for any measurable space `α` and `g : Y → α`, the composition\\n`g ∘ f` is measurable if and only if `g` is measurable. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {β : Type u_3} {γ : Type u_1} [inst : MeasurableSpace α] [inst_1 : MeasurableSpace β]\\n  [inst_2 : MeasurableSpace γ] {μ : MeasureTheory.Measure α} {ν : MeasureTheory.Measure β} {f : α → γ} {g : β → γ}\\n  [inst_3 : TopologicalSpace γ] [inst_4 : TopologicalSpace.MetrizableSpace γ] [inst_5 : BorelSpace γ],\\n  ProbabilityTheory.IdentDistrib f g → MeasureTheory.AEStronglyMeasurable f μ → MeasureTheory.AEStronglyMeasurable g ν\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` and `g` are identically distributed and `f` is a.e. strongly measurable, so is `g`. \"},\n {\"theorem\":\n  \"∀ {Y : Type u_1} [inst : TopologicalSpace Y] [inst_1 : NormalSpace Y] {s : Set Y} (f : C(↑s, ℝ)),\\n  IsClosed s → ∃ g, ContinuousMap.restrict s g = f\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Tietze extension theorem** for real-valued continuous maps, a version for a closed set. Let\\n`s` be a closed set in a normal topological space `Y`. Let `f` be a continuous real-valued function\\non `s`. Then there exists a continuous real-valued function `g : C(Y, ℝ)` such that\\n`g.restrict s = f`. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] [inst_2 : NormalSpace Y]\\n  (f : BoundedContinuousFunction X ℝ) (e : C(X, Y)),\\n  ClosedEmbedding ↑e → ∃ g, ‖g‖ = ‖f‖ ∧ BoundedContinuousFunction.compContinuous g e = f\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Tietze extension theorem** for real-valued bounded continuous maps, a version with a closed\\nembedding and bundled composition. If `e : C(X, Y)` is a closed embedding of a topological space\\ninto a normal topological space and `f : X →ᵇ ℝ` is a bounded continuous function, then there exists\\na bounded continuous function `g : Y →ᵇ ℝ` of the same norm such that `g ∘ e = f`. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] [inst_2 : NormalSpace Y]\\n  [inst_3 : Nonempty X] (f : BoundedContinuousFunction X ℝ) {e : X → Y},\\n  ClosedEmbedding e → ∃ g, (∀ (y : Y), ∃ x₁ x₂, ↑g y ∈ Set.Icc (↑f x₁) (↑f x₂)) ∧ ↑g ∘ e = ↑f\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Tietze extension theorem** for real-valued bounded continuous maps, a version for a closed\\nembedding. Let `e` be a closed embedding of a nonempty topological space `X` into a normal\\ntopological space `Y`. Let `f` be a bounded continuous real-valued function on `X`. Then there\\nexists a bounded continuous function `g : Y →ᵇ ℝ` such that `g ∘ e = f` and each value `g y` belongs\\nto a closed interval `[f x₁, f x₂]` for some `x₁` and `x₂`.  \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] [inst_2 : T2Space α] {s : Set β},\\n  Dense s → ∀ {f g : β → α}, Continuous f → Continuous g → Set.EqOn f g s → f = g\",\n  \"isProp\": true,\n  \"docString\":\n  \"If two continuous functions are equal on a dense set, then they are equal. \"},\n {\"theorem\":\n  \"∀ {X : Type u_2} {Y : Type u_1} {β : Type u_3} [inst : TopologicalSpace X] [inst_1 : PolishSpace X]\\n  [inst_2 : MeasurableSpace X] [inst : BorelSpace X] [inst : TopologicalSpace Y] [inst_3 : T2Space Y]\\n  [inst_4 : MeasurableSpace Y] [inst_5 : OpensMeasurableSpace Y] [inst_6 : MeasurableSpace β] {f : X → Y}\\n  [inst : TopologicalSpace.SecondCountableTopology ↑(Set.range f)],\\n  Measurable f → ∀ {g : Y → β}, Measurable (g ∘ f) ↔ Measurable (Set.restrict (Set.range f) g)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f : X → Y` is a Borel measurable map from a Polish space to a topological space with second\\ncountable topology, then for any measurable space `β` and `g : Y → β`, the composition `g ∘ f` is\\nmeasurable if and only if the restriction of `g` to the range of `f` is measurable. \"},\n {\"theorem\":\n  \"∀ {f g : ℝ → ℝ} {a b : ℝ},\\n  a < b →\\n    ContinuousOn f (Set.Icc a b) →\\n      ContinuousOn g (Set.Icc a b) →\\n        (∀ (x : ℝ), x ∈ Set.Ioc a b → f x ≤ g x) →\\n          (∃ c, c ∈ Set.Icc a b ∧ f c < g c) → ∫ (x : ℝ) in a..b, f x < ∫ (x : ℝ) in a..b, g x\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` and `g` are continuous on `[a, b]`, `a < b`, `f x ≤ g x` on this interval, and\\n`f c < g c` at some point `c ∈ [a, b]`, then `∫ x in a..b, f x < ∫ x in a..b, g x`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {s : Set α} {x : α}\\n  {p : Filter ι} {g : ι → α} [inst_1 : TopologicalSpace α],\\n  TendstoUniformlyOn F f p s →\\n    ContinuousWithinAt f s x → Filter.Tendsto g p (nhdsWithin x s) → Filter.Tendsto (fun n => F n (g n)) p (nhds (f x))\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `Fₙ` tends uniformly to `f` on a set `s`, and `gₙ` tends to `x` within `s`, then `Fₙ gₙ`\\ntends to `f x` if `f` is continuous at `x` within `s`. \"},\n {\"theorem\":\n  \"∀ {X : Type u_2} {E : Type u_1} [inst : MeasurableSpace X] [inst_1 : TopologicalSpace X] [inst_2 : NormedAddCommGroup E]\\n  {f : X → E} {μ : MeasureTheory.Measure X} [inst_3 : NormedSpace ℝ E] [inst_4 : OpensMeasurableSpace X]\\n  [inst_5 : T2Space X],\\n  MeasureTheory.LocallyIntegrable f →\\n    ∀ {g : X → ℝ}, Continuous g → HasCompactSupport g → MeasureTheory.Integrable fun x => g x • f x\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` is locally integrable and `g` is continuous with compact support,\\nthen `g • f` is integrable. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {E : Type u_2} {m : MeasurableSpace α} {μ : MeasureTheory.Measure α} [inst : MetricSpace E]\\n  {f : ℕ → α → E} {g : α → E},\\n  MeasureTheory.TendstoInMeasure μ f Filter.atTop g →\\n    ∃ ns, StrictMono ns ∧ ∀ᵐ (x : α) ∂μ, Filter.Tendsto (fun i => f (ns i) x) Filter.atTop (nhds (g x))\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` is a sequence of functions which converges in measure to `g`, then there exists a\\nsubsequence of `f` which converges a.e. to `g`. \"}]\n", "prompt_cons": "/-- Let `X` be a normal paracompact topological space (e.g., any extended metric space). Let `E` be\na topological real vector space. Let `t : X → Set E` be a family of convex sets. Suppose that for\neach point `x : X`, there exists a neighborhood `U ∈ 𝓝 X` and a function `g : X → E` that is\ncontinuous on `U` and sends each `y ∈ U` to a point of `t y`. Then there exists a continuous map\n`g : C(X, E)` such that `g x ∈ t x` for all `x`. See also\n`exists_continuous_forall_mem_convex_of_local_const`. -/\ntheorem ∀ {X : Type u_2} {E : Type u_1} [inst : TopologicalSpace X] [inst_1 : AddCommGroup E] [inst_2 : Module ℝ E]\n  [inst_3 : NormalSpace X] [inst_4 : ParacompactSpace X] [inst_5 : TopologicalSpace E] [inst_6 : ContinuousAdd E]\n  [inst_7 : ContinuousSMul ℝ E] {t : X → Set E},\n  (∀ (x : X), Convex ℝ (t x)) →\n    (∀ (x : X), ∃ U, U ∈ nhds x ∧ ∃ g, ContinuousOn g U ∧ ∀ (y : X), y ∈ U → g y ∈ t y) → ∃ g, ∀ (x : X), ↑g x ∈ t x :=\n\n/-- Let `X` be a normal paracompact topological space (e.g., any extended metric space). Let `E` be\na topological real vector space. Let `t : X → Set E` be a family of convex sets. Suppose that for\neach point `x : X`, there exists a vector `c : E` that belongs to `t y` for all `y` in a\nneighborhood of `x`. Then there exists a continuous map `g : C(X, E)` such that `g x ∈ t x` for all\n`x`. See also `exists_continuous_forall_mem_convex_of_local`. -/\ntheorem ∀ {X : Type u_2} {E : Type u_1} [inst : TopologicalSpace X] [inst_1 : AddCommGroup E] [inst_2 : Module ℝ E]\n  [inst_3 : NormalSpace X] [inst_4 : ParacompactSpace X] [inst_5 : TopologicalSpace E] [inst_6 : ContinuousAdd E]\n  [inst_7 : ContinuousSMul ℝ E] {t : X → Set E},\n  (∀ (x : X), Convex ℝ (t x)) → (∀ (x : X), ∃ c, ∀ᶠ (y : X) in nhds x, c ∈ t y) → ∃ g, ∀ (x : X), ↑g x ∈ t x :=\n\n/-- A particular case of Sard's Theorem. Let `f : E → F` be a map between finite dimensional real\nvector spaces. Suppose that `f` is `C¹` smooth on a convex set `s` of Hausdorff dimension strictly\nless than the dimension of `F`. Then the complement of the image `f '' s` is dense in `F`. -/\ntheorem ∀ {E : Type u_2} {F : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E]\n  [inst_2 : FiniteDimensional ℝ E] [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace ℝ F]\n  [inst_5 : FiniteDimensional ℝ F] {f : E → F} {s t : Set E},\n  ContDiffOn ℝ 1 f s → Convex ℝ s → t ⊆ s → dimH t < ↑(FiniteDimensional.finrank ℝ F) → Dense (f '' t)ᶜ :=\n\n/-- One step in the proof of the Tietze extension theorem. If `e : C(X, Y)` is a closed embedding\nof a topological space into a normal topological space and `f : X →ᵇ ℝ` is a bounded continuous\nfunction, then there exists a bounded continuous function `g : Y →ᵇ ℝ` of the norm `‖g‖ ≤ ‖f‖ / 3`\nsuch that the distance between `g ∘ e` and `f` is at most `(2 / 3) * ‖f‖`. -/\ntheorem ∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] [inst_2 : NormalSpace Y]\n  (f : BoundedContinuousFunction X ℝ) (e : C(X, Y)),\n  ClosedEmbedding ↑e → ∃ g, ‖g‖ ≤ ‖f‖ / 3 ∧ dist (BoundedContinuousFunction.compContinuous g e) f ≤ 2 / 3 * ‖f‖ :=\n\n/-- **Tietze extension theorem** for real-valued continuous maps, a version for a closed\nembedding. Let `e` be a closed embedding of a nonempty topological space `X` into a normal\ntopological space `Y`. Let `f` be a continuous real-valued function on `X`. Then there exists a\ncontinuous real-valued function `g : C(Y, ℝ)` such that `g ∘ e = f`. -/\ntheorem ∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] [inst_2 : NormalSpace Y]\n  (f : C(X, ℝ)) (e : X → Y), ClosedEmbedding e → ∃ g, ↑g ∘ e = ↑f :=\n\n/-- If `f` is a partition of unity on `s : Set X` and `g : X → E` is continuous at every point of\nthe topological support of some `f i`, then `fun x ↦ f i x • g x` is continuous on the whole space. -/\ntheorem ∀ {ι : Type u} {X : Type v} [inst : TopologicalSpace X] {E : Type u_1} [inst_1 : AddCommMonoid E]\n  [inst_2 : SMulWithZero ℝ E] [inst_3 : TopologicalSpace E] [inst_4 : ContinuousSMul ℝ E] {s : Set X}\n  (f : PartitionOfUnity ι X s) {g : X → E} {i : ι},\n  (∀ (x : X), x ∈ tsupport ↑(↑f i) → ContinuousAt g x) → Continuous fun x => ↑(↑f i) x • g x :=\n\n/-- A useful form of the **closed graph theorem** : let `f` be a linear map between two Banach\nspaces. To show that `f` is continuous, it suffices to show that for any convergent sequence\n`uₙ ⟶ x`, if `f(uₙ) ⟶ y` then `y = f(x)`. -/\ntheorem ∀ {𝕜 : Type u_3} [inst : NontriviallyNormedField 𝕜] {E : Type u_1} [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E] {F : Type u_2} [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F]\n  [inst_5 : CompleteSpace F] [inst_6 : CompleteSpace E] (g : E →ₗ[𝕜] F),\n  (∀ (u : ℕ → E) (x : E) (y : F),\n      Filter.Tendsto u Filter.atTop (nhds x) → Filter.Tendsto (↑g ∘ u) Filter.atTop (nhds y) → y = ↑g x) →\n    Continuous ↑g :=\n\n/-- If `f` is a partition of unity on a set `s : Set X` and `g : ι → X → E` is a family of functions\nsuch that each `g i` is continuous at every point of the topological support of `f i`, then the sum\n`fun x ↦ ∑ᶠ i, f i x • g i x` is continuous on the whole space. -/\ntheorem ∀ {ι : Type u} {X : Type v} [inst : TopologicalSpace X] {E : Type u_1} [inst_1 : AddCommMonoid E]\n  [inst_2 : SMulWithZero ℝ E] [inst_3 : TopologicalSpace E] [inst_4 : ContinuousSMul ℝ E] {s : Set X}\n  (f : PartitionOfUnity ι X s) [inst_5 : ContinuousAdd E] {g : ι → X → E},\n  (∀ (i : ι) (x : X), x ∈ tsupport ↑(↑f i) → ContinuousAt (g i) x) → Continuous fun x => ∑ᶠ (i : ι), ↑(↑f i) x • g i x :=\n\n/-- If `s` is a closed set and two functions `f` and `g` are continuous on `s`,\nthen the set `{x ∈ s | f x ≤ g x}` is a closed set. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : Preorder α] [t : OrderClosedTopology α]\n  [inst_2 : TopologicalSpace β] {f g : β → α} {s : Set β},\n  IsClosed s → ContinuousOn f s → ContinuousOn g s → IsClosed {x | x ∈ s ∧ f x ≤ g x} :=\n\n/-- If `f : X → Y` is a surjective Borel measurable map from a Polish space to a topological space\nwith second countable topology, then for any measurable space `α` and `g : Y → α`, the composition\n`g ∘ f` is measurable if and only if `g` is measurable. -/\ntheorem ∀ {X : Type u_2} {Y : Type u_1} {β : Type u_3} [inst : TopologicalSpace X] [inst_1 : PolishSpace X]\n  [inst_2 : MeasurableSpace X] [inst : BorelSpace X] [inst : TopologicalSpace Y] [inst_3 : T2Space Y]\n  [inst_4 : MeasurableSpace Y] [inst_5 : OpensMeasurableSpace Y] [inst_6 : MeasurableSpace β]\n  [inst : TopologicalSpace.SecondCountableTopology Y] {f : X → Y},\n  Measurable f → Function.Surjective f → ∀ {g : Y → β}, Measurable (g ∘ f) ↔ Measurable g :=\n\n/-- If `f` and `g` are identically distributed and `f` is a.e. strongly measurable, so is `g`. -/\ntheorem ∀ {α : Type u_2} {β : Type u_3} {γ : Type u_1} [inst : MeasurableSpace α] [inst_1 : MeasurableSpace β]\n  [inst_2 : MeasurableSpace γ] {μ : MeasureTheory.Measure α} {ν : MeasureTheory.Measure β} {f : α → γ} {g : β → γ}\n  [inst_3 : TopologicalSpace γ] [inst_4 : TopologicalSpace.MetrizableSpace γ] [inst_5 : BorelSpace γ],\n  ProbabilityTheory.IdentDistrib f g → MeasureTheory.AEStronglyMeasurable f μ → MeasureTheory.AEStronglyMeasurable g ν :=\n\n/-- **Tietze extension theorem** for real-valued continuous maps, a version for a closed set. Let\n`s` be a closed set in a normal topological space `Y`. Let `f` be a continuous real-valued function\non `s`. Then there exists a continuous real-valued function `g : C(Y, ℝ)` such that\n`g.restrict s = f`. -/\ntheorem ∀ {Y : Type u_1} [inst : TopologicalSpace Y] [inst_1 : NormalSpace Y] {s : Set Y} (f : C(↑s, ℝ)),\n  IsClosed s → ∃ g, ContinuousMap.restrict s g = f :=\n\n/-- **Tietze extension theorem** for real-valued bounded continuous maps, a version with a closed\nembedding and bundled composition. If `e : C(X, Y)` is a closed embedding of a topological space\ninto a normal topological space and `f : X →ᵇ ℝ` is a bounded continuous function, then there exists\na bounded continuous function `g : Y →ᵇ ℝ` of the same norm such that `g ∘ e = f`. -/\ntheorem ∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] [inst_2 : NormalSpace Y]\n  (f : BoundedContinuousFunction X ℝ) (e : C(X, Y)),\n  ClosedEmbedding ↑e → ∃ g, ‖g‖ = ‖f‖ ∧ BoundedContinuousFunction.compContinuous g e = f :=\n\n/-- **Tietze extension theorem** for real-valued bounded continuous maps, a version for a closed\nembedding. Let `e` be a closed embedding of a nonempty topological space `X` into a normal\ntopological space `Y`. Let `f` be a bounded continuous real-valued function on `X`. Then there\nexists a bounded continuous function `g : Y →ᵇ ℝ` such that `g ∘ e = f` and each value `g y` belongs\nto a closed interval `[f x₁, f x₂]` for some `x₁` and `x₂`. -/\ntheorem ∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] [inst_2 : NormalSpace Y]\n  [inst_3 : Nonempty X] (f : BoundedContinuousFunction X ℝ) {e : X → Y},\n  ClosedEmbedding e → ∃ g, (∀ (y : Y), ∃ x₁ x₂, ↑g y ∈ Set.Icc (↑f x₁) (↑f x₂)) ∧ ↑g ∘ e = ↑f :=\n\n/-- If two continuous functions are equal on a dense set, then they are equal. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] [inst_2 : T2Space α] {s : Set β},\n  Dense s → ∀ {f g : β → α}, Continuous f → Continuous g → Set.EqOn f g s → f = g :=\n\n/-- If `f : X → Y` is a Borel measurable map from a Polish space to a topological space with second\ncountable topology, then for any measurable space `β` and `g : Y → β`, the composition `g ∘ f` is\nmeasurable if and only if the restriction of `g` to the range of `f` is measurable. -/\ntheorem ∀ {X : Type u_2} {Y : Type u_1} {β : Type u_3} [inst : TopologicalSpace X] [inst_1 : PolishSpace X]\n  [inst_2 : MeasurableSpace X] [inst : BorelSpace X] [inst : TopologicalSpace Y] [inst_3 : T2Space Y]\n  [inst_4 : MeasurableSpace Y] [inst_5 : OpensMeasurableSpace Y] [inst_6 : MeasurableSpace β] {f : X → Y}\n  [inst : TopologicalSpace.SecondCountableTopology ↑(Set.range f)],\n  Measurable f → ∀ {g : Y → β}, Measurable (g ∘ f) ↔ Measurable (Set.restrict (Set.range f) g) :=\n\n/-- If `f` and `g` are continuous on `[a, b]`, `a < b`, `f x ≤ g x` on this interval, and\n`f c < g c` at some point `c ∈ [a, b]`, then `∫ x in a..b, f x < ∫ x in a..b, g x`. -/\ntheorem ∀ {f g : ℝ → ℝ} {a b : ℝ},\n  a < b →\n    ContinuousOn f (Set.Icc a b) →\n      ContinuousOn g (Set.Icc a b) →\n        (∀ (x : ℝ), x ∈ Set.Ioc a b → f x ≤ g x) →\n          (∃ c, c ∈ Set.Icc a b ∧ f c < g c) → ∫ (x : ℝ) in a..b, f x < ∫ (x : ℝ) in a..b, g x :=\n\n/-- If `Fₙ` tends uniformly to `f` on a set `s`, and `gₙ` tends to `x` within `s`, then `Fₙ gₙ`\ntends to `f x` if `f` is continuous at `x` within `s`. -/\ntheorem ∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {s : Set α} {x : α}\n  {p : Filter ι} {g : ι → α} [inst_1 : TopologicalSpace α],\n  TendstoUniformlyOn F f p s →\n    ContinuousWithinAt f s x → Filter.Tendsto g p (nhdsWithin x s) → Filter.Tendsto (fun n => F n (g n)) p (nhds (f x)) :=\n\n/-- If `f` is locally integrable and `g` is continuous with compact support,\nthen `g • f` is integrable. -/\ntheorem ∀ {X : Type u_2} {E : Type u_1} [inst : MeasurableSpace X] [inst_1 : TopologicalSpace X] [inst_2 : NormedAddCommGroup E]\n  {f : X → E} {μ : MeasureTheory.Measure X} [inst_3 : NormedSpace ℝ E] [inst_4 : OpensMeasurableSpace X]\n  [inst_5 : T2Space X],\n  MeasureTheory.LocallyIntegrable f →\n    ∀ {g : X → ℝ}, Continuous g → HasCompactSupport g → MeasureTheory.Integrable fun x => g x • f x :=\n\n/-- If `f` is a sequence of functions which converges in measure to `g`, then there exists a\nsubsequence of `f` which converges a.e. to `g`. -/\ntheorem ∀ {α : Type u_1} {E : Type u_2} {m : MeasurableSpace α} {μ : MeasureTheory.Measure α} [inst : MetricSpace E]\n  {f : ℕ → α → E} {g : α → E},\n  MeasureTheory.TendstoInMeasure μ f Filter.atTop g →\n    ∃ ns, StrictMono ns ∧ ∀ᵐ (x : α) ∂μ, Filter.Tendsto (fun i => f (ns i) x) Filter.atTop (nhds (g x)) :=\n\n/-- Let `f` and `g` be continuous mappings of a metric space `X` into a metric space `Y`, and let `E` be a dense subset of `X`. Prove that `f(E)` is dense in `f(X)`. -/\ntheorem", "choices": ["forall {X : Type u} {Y : Type v} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] [inst_2 : MetricSpace X] [inst_3 : MetricSpace Y] {f : X → Y} {g : X → Y} {E : Set X},\n  Continuous f →\n    Continuous g →\n      Dense E →\n        ∀ {U : Set Y}, IsOpen U → Set.Nonempty (U ∩ f '' E) → Set.Nonempty (U ∩ f '' Set.Univ) ", "∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] [inst_1 : MetricSpace Y] {E : Set X} {f g : X → Y},\n  Continuous f → Continuous g → Dense E → Dense (f '' E) ", "∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] [inst_2 : MetricSpace X] [inst_3 : MetricSpace Y]\n  {f g : X → Y} {E : Set X},\n  Dense E → Continuous f → Continuous g → Dense (f '' E) ", "∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] [inst_1 : MetricSpace X] [inst_2 : TopologicalSpace Y]\n  [inst_3 : MetricSpace Y] {f : C(X, Y)} {E : Set X}, Dense E → Dense (Set.Image (λ x, ↑f x) E) ", "forall {X Y : Type*} [EmetricSpace X] [EmetricSpace Y] [TopologicalSpace.SecondCountableTopology Y]\n  {f g : X → Y} {E : Set X},\n  Dense E → Continuous f → Continuous g → Dense (f '' E) ", "forall {X Y : Type*} [topological_space X] [topological_space Y] [metric_space X] [metric_space Y] {f g : X → Y} (E : set X),\n  dense E → continuous f → continuous g → dense (f '' E) ", "∀ {X : Type u_3} {Y : Type u_2} [inst : EmetricSpace X] [inst_1 : EmetricSpace Y] [inst_2 : TopologicalSpace X]\n  [inst_3 : TopologicalSpace Y] {f g : X → Y} {e : Set X},\n  Dense e → Continuous f → Dense (Set.Image f e) ", "∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] [inst_1 : MetricSpace X] [inst_2 : TopologicalSpace Y] [inst_3 : MetricSpace Y]\n  {f : X → Y} {E : Set X} {g : X → Y}, Continuous f → Continuous g → Dense E → Dense (f '' E) ", "∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] [inst_1 : MetricSpace X] [inst_2 : MetricSpace Y] {f g : X → Y} {s : Set X} {E : Set X},\n  Dense E → Continuous f → Continuous g → f '' E ⊆ Closure (f '' s) ", "forall {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] [inst_1 : MetricSpace X]\n  [inst_2 : TopologicalSpace Y] [inst_3 : MetricSpace Y] {f g : X -> Y} {E : Set X},\n  Dense E ->\n  Continuous f ->\n  Continuous g ->\n  Dense (f '' E) "]}
{"docString": "If `f` is a real continuous function defined on a closed set `E ⊆ ℝ`, prove that there exist continuous real functions `g` on `ℝ` such that `g(x)=f(x)` for all `x ∈ E`.", "prompts": "[{\"theorem\":\n  \"∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {f : ℂ → E},\\n  Differentiable ℂ f → ∀ {n : ℕ∞}, ContDiff ℂ n f\",\n  \"isProp\": true,\n  \"docString\":\n  \"A complex differentiable function `f : ℂ → E` is continuously differentiable at every point. \"},\n {\"theorem\":\n  \"∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {n : ℕ∞} {s : Set ℂ}\\n  {f : ℂ → E}, DifferentiableOn ℂ f s → IsOpen s → ContDiffOn ℂ n f s\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f : ℂ → E` is complex differentiable on some open set `s`, then it is continuously\\ndifferentiable on `s`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {𝕜 : Type u_1} {f g : α → 𝕜} {S : Set α} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace 𝕜]\\n  [inst_2 : T1Space 𝕜] [inst_3 : Field 𝕜] [inst_4 : HasContinuousInv₀ 𝕜] [inst_5 : ContinuousMul 𝕜],\\n  IsPreconnected S →\\n    ContinuousOn f S →\\n      ContinuousOn g S →\\n        Set.EqOn (f ^ 2) (g ^ 2) S → (∀ {x : α}, x ∈ S → g x ≠ 0) → ∀ {y : α}, y ∈ S → f y = g y → Set.EqOn f g S\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f, g` are functions `α → 𝕜`, both continuous on a preconnected set `S`, with\\n`f ^ 2 = g ^ 2` on `S`, and `g z ≠ 0` all `z ∈ S`, then as soon as `f = g` holds at\\none point of `S` it holds for all points. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {m : MeasurableSpace α} (μ : MeasureTheory.Measure α) (f : α → ENNReal),\\n  ∃ g, Measurable g ∧ g ≤ f ∧ ∫⁻ (a : α), f a ∂μ = ∫⁻ (a : α), g a ∂μ\",\n  \"isProp\": true,\n  \"docString\":\n  \"For any function `f : α → ℝ≥0∞`, there exists a measurable function `g ≤ f` with the same\\nintegral. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] {m : MeasurableSpace X} [inst_1 : TopologicalSpace Y]\\n  [inst_2 : T2Space Y] {μ : MeasureTheory.Measure X} [inst_3 : MeasureTheory.Measure.IsOpenPosMeasure μ] {U : Set X}\\n  {f g : X → Y},\\n  f =ᶠ[MeasureTheory.Measure.ae (MeasureTheory.Measure.restrict μ U)] g →\\n    IsOpen U → ContinuousOn f U → ContinuousOn g U → Set.EqOn f g U\",\n  \"isProp\": true,\n  \"docString\":\n  \"If two functions are a.e. equal on an open set and are continuous on this set, then they are\\nequal on this set. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : Preorder α] [t : OrderClosedTopology α]\\n  [inst_2 : TopologicalSpace β] {f g : β → α} {s : Set β},\\n  IsClosed s → ContinuousOn f s → ContinuousOn g s → IsClosed {x | x ∈ s ∧ f x ≤ g x}\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `s` is a closed set and two functions `f` and `g` are continuous on `s`,\\nthen the set `{x ∈ s | f x ≤ g x}` is a closed set. \"},\n {\"theorem\":\n  \"∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type v} [inst_2 : NormedAddCommGroup F]\\n  [inst_3 : NormedSpace ℂ F] [inst_4 : Nontrivial E] {f g : E → F} {U : Set E},\\n  Metric.Bounded U → DiffContOnCl ℂ f U → DiffContOnCl ℂ g U → Set.EqOn f g (frontier U) → Set.EqOn f g (closure U)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If two complex differentiable functions `f g : E → F` are equal on the boundary of a bounded set\\n`U`, then they are equal on `closure U`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {𝕜 : Type u_1} {f g : α → 𝕜} {S : Set α} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace 𝕜]\\n  [inst_2 : T1Space 𝕜] [inst_3 : Field 𝕜] [inst_4 : HasContinuousInv₀ 𝕜] [inst_5 : ContinuousMul 𝕜],\\n  IsPreconnected S →\\n    ContinuousOn f S →\\n      ContinuousOn g S → Set.EqOn (f ^ 2) (g ^ 2) S → (∀ {x : α}, x ∈ S → g x ≠ 0) → Set.EqOn f g S ∨ Set.EqOn f (-g) S\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f, g` are functions `α → 𝕜`, both continuous on a preconnected set `S`, with\\n`f ^ 2 = g ^ 2` on `S`, and `g z ≠ 0` all `z ∈ S`, then either `f = g` or `f = -g` on\\n`S`. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] {f g : ℝ → E} {x : ℝ},\\n  (∀ (y : ℝ), y ≠ x → HasDerivAt f (g y) y) → ContinuousAt f x → ContinuousAt g x → HasDerivAt f (g x) x\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a real function `f` has a derivative `g` everywhere but at a point, and `f` and `g` are\\ncontinuous at this point, then `g` is also the derivative of `f` at this point. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : MeasurableSpace α] [inst_2 : BorelSpace α]\\n  {μ : MeasureTheory.Measure α} [inst_3 : MeasureTheory.Measure.WeaklyRegular μ] [inst_4 : MeasureTheory.SigmaFinite μ]\\n  (f : α → ℝ),\\n  MeasureTheory.Integrable f →\\n    ∀ {ε : ℝ},\\n      0 < ε →\\n        ∃ g,\\n          (∀ (x : α), ↑(f x) < g x) ∧\\n            LowerSemicontinuous g ∧\\n              (MeasureTheory.Integrable fun x => EReal.toReal (g x)) ∧\\n                (∀ᵐ (x : α) ∂μ, g x < ⊤) ∧ ∫ (x : α), EReal.toReal (g x) ∂μ < ∫ (x : α), f x ∂μ + ε\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Vitali-Carathéodory Theorem**: given an integrable real function `f`, there exists an\\nintegrable function `g > f` which is lower semicontinuous, with integral arbitrarily close\\nto that of `f`. This function has to be `EReal`-valued in general. \"},\n {\"theorem\":\n  \"∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type v} [inst_2 : NormedAddCommGroup F]\\n  [inst_3 : NormedSpace ℂ F] [inst_4 : Nontrivial E] {f g : E → F} {U : Set E},\\n  Metric.Bounded U → DiffContOnCl ℂ f U → DiffContOnCl ℂ g U → Set.EqOn f g (frontier U) → Set.EqOn f g U\",\n  \"isProp\": true,\n  \"docString\":\n  \"If two complex differentiable functions `f g : E → F` are equal on the boundary of a bounded set\\n`U`, then they are equal on `U`. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] {f g : ℝ → E} {x : ℝ},\\n  (∀ (y : ℝ), y ≠ x → HasDerivAt f (g y) y) → ContinuousAt f x → ContinuousAt g x → ∀ (y : ℝ), HasDerivAt f (g y) y\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a real function `f` has a derivative `g` everywhere but at a point, and `f` and `g` are\\ncontinuous at this point, then `g` is the derivative of `f` everywhere. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : MeasurableSpace α] [inst_2 : BorelSpace α]\\n  {μ : MeasureTheory.Measure α} [inst_3 : MeasureTheory.Measure.WeaklyRegular μ] [inst_4 : MeasureTheory.SigmaFinite μ]\\n  (f : α → ℝ),\\n  MeasureTheory.Integrable f →\\n    ∀ {ε : ℝ},\\n      0 < ε →\\n        ∃ g,\\n          (∀ (x : α), g x < ↑(f x)) ∧\\n            UpperSemicontinuous g ∧\\n              (MeasureTheory.Integrable fun x => EReal.toReal (g x)) ∧\\n                (∀ᵐ (x : α) ∂μ, ⊥ < g x) ∧ ∫ (x : α), f x ∂μ < ∫ (x : α), EReal.toReal (g x) ∂μ + ε\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Vitali-Carathéodory Theorem**: given an integrable real function `f`, there exists an\\nintegrable function `g < f` which is upper semicontinuous, with integral arbitrarily close to that\\nof `f`. This function has to be `EReal`-valued in general. \"},\n {\"theorem\":\n  \"∀ {Y : Type u_1} [inst : TopologicalSpace Y] [inst_1 : NormalSpace Y] {s : Set Y} (f : C(↑s, ℝ)),\\n  IsClosed s → ∃ g, ContinuousMap.restrict s g = f\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Tietze extension theorem** for real-valued continuous maps, a version for a closed set. Let\\n`s` be a closed set in a normal topological space `Y`. Let `f` be a continuous real-valued function\\non `s`. Then there exists a continuous real-valued function `g : C(Y, ℝ)` such that\\n`g.restrict s = f`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {E : Type u_2} {m : MeasurableSpace α} {μ : MeasureTheory.Measure α} [inst : MetricSpace E]\\n  {f : ℕ → α → E} {g : α → E},\\n  MeasureTheory.TendstoInMeasure μ f Filter.atTop g →\\n    ∃ ns, StrictMono ns ∧ ∀ᵐ (x : α) ∂μ, Filter.Tendsto (fun i => f (ns i) x) Filter.atTop (nhds (g x))\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` is a sequence of functions which converges in measure to `g`, then there exists a\\nsubsequence of `f` which converges a.e. to `g`. \"},\n {\"theorem\":\n  \"∀ {ι : Type u} {X : Type v} [inst : TopologicalSpace X] {E : Type u_1} [inst_1 : AddCommMonoid E]\\n  [inst_2 : SMulWithZero ℝ E] [inst_3 : TopologicalSpace E] [inst_4 : ContinuousSMul ℝ E] {s : Set X}\\n  {f : PartitionOfUnity ι X s} [inst_5 : ContinuousAdd E] {U : ι → Set X},\\n  (∀ (i : ι), IsOpen (U i)) →\\n    PartitionOfUnity.IsSubordinate f U →\\n      ∀ {g : ι → X → E}, (∀ (i : ι), ContinuousOn (g i) (U i)) → Continuous fun x => ∑ᶠ (i : ι), ↑(↑f i) x • g i x\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` is a partition of unity that is subordinate to a family of open sets `U i` and\\n`g : ι → X → E` is a family of functions such that each `g i` is continuous on `U i`, then the sum\\n`fun x ↦ ∑ᶠ i, f i x • g i x` is a continuous function. \"},\n {\"theorem\":\n  \"∀ {ι : Type u} {X : Type v} [inst : TopologicalSpace X] {E : Type u_1} [inst_1 : AddCommMonoid E]\\n  [inst_2 : SMulWithZero ℝ E] [inst_3 : TopologicalSpace E] [inst_4 : ContinuousSMul ℝ E] {s : Set X}\\n  (f : PartitionOfUnity ι X s) [inst_5 : ContinuousAdd E] {g : ι → X → E},\\n  (∀ (i : ι) (x : X), x ∈ tsupport ↑(↑f i) → ContinuousAt (g i) x) → Continuous fun x => ∑ᶠ (i : ι), ↑(↑f i) x • g i x\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` is a partition of unity on a set `s : Set X` and `g : ι → X → E` is a family of functions\\nsuch that each `g i` is continuous at every point of the topological support of `f i`, then the sum\\n`fun x ↦ ∑ᶠ i, f i x • g i x` is continuous on the whole space. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : MeasurableSpace α] [inst_2 : BorelSpace α]\\n  (μ : MeasureTheory.Measure α) [inst_3 : MeasureTheory.Measure.WeaklyRegular μ] (f : MeasureTheory.SimpleFunc α NNReal)\\n  {ε : ENNReal},\\n  ε ≠ 0 → ∃ g, (∀ (x : α), ↑f x ≤ g x) ∧ LowerSemicontinuous g ∧ ∫⁻ (x : α), ↑(g x) ∂μ ≤ ∫⁻ (x : α), ↑(↑f x) ∂μ + ε\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given a simple function `f` with values in `ℝ≥0`, there exists a lower semicontinuous\\nfunction `g ≥ f` with integral arbitrarily close to that of `f`. Formulation in terms of\\n`lintegral`.\\nAuxiliary lemma for Vitali-Carathéodory theorem `exists_lt_lower_semicontinuous_integral_lt`. \"},\n {\"theorem\":\n  \"∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {R : NNReal} {c : ℂ}\\n  {f : ℂ → E} {s : Set ℂ},\\n  Set.Countable s →\\n    ContinuousOn f (Metric.closedBall c ↑R) →\\n      (∀ (z : ℂ), z ∈ Metric.ball c ↑R \\\\ s → DifferentiableAt ℂ f z) →\\n        0 < R → HasFPowerSeriesOnBall f (cauchyPowerSeries f c ↑R) c ↑R\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f : ℂ → E` is continuous on a closed ball of positive radius and is differentiable at all\\nbut countably many points of the corresponding open ball, then it is analytic on the open ball with\\ncoefficients of the power series given by Cauchy integral formulas. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : MeasurableSpace α] [inst_2 : BorelSpace α]\\n  {μ : MeasureTheory.Measure α} [inst_3 : MeasureTheory.Measure.WeaklyRegular μ]\\n  (f : MeasureTheory.SimpleFunc α NNReal),\\n  ∫⁻ (x : α), ↑(↑f x) ∂μ ≠ ⊤ →\\n    ∀ {ε : ENNReal},\\n      ε ≠ 0 → ∃ g, (∀ (x : α), g x ≤ ↑f x) ∧ UpperSemicontinuous g ∧ ∫⁻ (x : α), ↑(↑f x) ∂μ ≤ ∫⁻ (x : α), ↑(g x) ∂μ + ε\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given a simple function `f` with values in `ℝ≥0`, there exists an upper semicontinuous\\nfunction `g ≤ f` with integral arbitrarily close to that of `f`. Formulation in terms of\\n`lintegral`.\\nAuxiliary lemma for Vitali-Carathéodory theorem `exists_lt_lower_semicontinuous_integral_lt`. \"}]\n", "prompt_cons": "/-- A complex differentiable function `f : ℂ → E` is continuously differentiable at every point. -/\ntheorem ∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {f : ℂ → E},\n  Differentiable ℂ f → ∀ {n : ℕ∞}, ContDiff ℂ n f :=\n\n/-- If `f : ℂ → E` is complex differentiable on some open set `s`, then it is continuously\ndifferentiable on `s`. -/\ntheorem ∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {n : ℕ∞} {s : Set ℂ}\n  {f : ℂ → E}, DifferentiableOn ℂ f s → IsOpen s → ContDiffOn ℂ n f s :=\n\n/-- If `f, g` are functions `α → 𝕜`, both continuous on a preconnected set `S`, with\n`f ^ 2 = g ^ 2` on `S`, and `g z ≠ 0` all `z ∈ S`, then as soon as `f = g` holds at\none point of `S` it holds for all points. -/\ntheorem ∀ {α : Type u_2} {𝕜 : Type u_1} {f g : α → 𝕜} {S : Set α} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace 𝕜]\n  [inst_2 : T1Space 𝕜] [inst_3 : Field 𝕜] [inst_4 : HasContinuousInv₀ 𝕜] [inst_5 : ContinuousMul 𝕜],\n  IsPreconnected S →\n    ContinuousOn f S →\n      ContinuousOn g S →\n        Set.EqOn (f ^ 2) (g ^ 2) S → (∀ {x : α}, x ∈ S → g x ≠ 0) → ∀ {y : α}, y ∈ S → f y = g y → Set.EqOn f g S :=\n\n/-- For any function `f : α → ℝ≥0∞`, there exists a measurable function `g ≤ f` with the same\nintegral. -/\ntheorem ∀ {α : Type u_1} {m : MeasurableSpace α} (μ : MeasureTheory.Measure α) (f : α → ENNReal),\n  ∃ g, Measurable g ∧ g ≤ f ∧ ∫⁻ (a : α), f a ∂μ = ∫⁻ (a : α), g a ∂μ :=\n\n/-- If two functions are a.e. equal on an open set and are continuous on this set, then they are\nequal on this set. -/\ntheorem ∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] {m : MeasurableSpace X} [inst_1 : TopologicalSpace Y]\n  [inst_2 : T2Space Y] {μ : MeasureTheory.Measure X} [inst_3 : MeasureTheory.Measure.IsOpenPosMeasure μ] {U : Set X}\n  {f g : X → Y},\n  f =ᶠ[MeasureTheory.Measure.ae (MeasureTheory.Measure.restrict μ U)] g →\n    IsOpen U → ContinuousOn f U → ContinuousOn g U → Set.EqOn f g U :=\n\n/-- If `s` is a closed set and two functions `f` and `g` are continuous on `s`,\nthen the set `{x ∈ s | f x ≤ g x}` is a closed set. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : Preorder α] [t : OrderClosedTopology α]\n  [inst_2 : TopologicalSpace β] {f g : β → α} {s : Set β},\n  IsClosed s → ContinuousOn f s → ContinuousOn g s → IsClosed {x | x ∈ s ∧ f x ≤ g x} :=\n\n/-- If two complex differentiable functions `f g : E → F` are equal on the boundary of a bounded set\n`U`, then they are equal on `closure U`. -/\ntheorem ∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type v} [inst_2 : NormedAddCommGroup F]\n  [inst_3 : NormedSpace ℂ F] [inst_4 : Nontrivial E] {f g : E → F} {U : Set E},\n  Metric.Bounded U → DiffContOnCl ℂ f U → DiffContOnCl ℂ g U → Set.EqOn f g (frontier U) → Set.EqOn f g (closure U) :=\n\n/-- If `f, g` are functions `α → 𝕜`, both continuous on a preconnected set `S`, with\n`f ^ 2 = g ^ 2` on `S`, and `g z ≠ 0` all `z ∈ S`, then either `f = g` or `f = -g` on\n`S`. -/\ntheorem ∀ {α : Type u_2} {𝕜 : Type u_1} {f g : α → 𝕜} {S : Set α} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace 𝕜]\n  [inst_2 : T1Space 𝕜] [inst_3 : Field 𝕜] [inst_4 : HasContinuousInv₀ 𝕜] [inst_5 : ContinuousMul 𝕜],\n  IsPreconnected S →\n    ContinuousOn f S →\n      ContinuousOn g S → Set.EqOn (f ^ 2) (g ^ 2) S → (∀ {x : α}, x ∈ S → g x ≠ 0) → Set.EqOn f g S ∨ Set.EqOn f (-g) S :=\n\n/-- If a real function `f` has a derivative `g` everywhere but at a point, and `f` and `g` are\ncontinuous at this point, then `g` is also the derivative of `f` at this point. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] {f g : ℝ → E} {x : ℝ},\n  (∀ (y : ℝ), y ≠ x → HasDerivAt f (g y) y) → ContinuousAt f x → ContinuousAt g x → HasDerivAt f (g x) x :=\n\n/-- **Vitali-Carathéodory Theorem**: given an integrable real function `f`, there exists an\nintegrable function `g > f` which is lower semicontinuous, with integral arbitrarily close\nto that of `f`. This function has to be `EReal`-valued in general. -/\ntheorem ∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : MeasurableSpace α] [inst_2 : BorelSpace α]\n  {μ : MeasureTheory.Measure α} [inst_3 : MeasureTheory.Measure.WeaklyRegular μ] [inst_4 : MeasureTheory.SigmaFinite μ]\n  (f : α → ℝ),\n  MeasureTheory.Integrable f →\n    ∀ {ε : ℝ},\n      0 < ε →\n        ∃ g,\n          (∀ (x : α), ↑(f x) < g x) ∧\n            LowerSemicontinuous g ∧\n              (MeasureTheory.Integrable fun x => EReal.toReal (g x)) ∧\n                (∀ᵐ (x : α) ∂μ, g x < ⊤) ∧ ∫ (x : α), EReal.toReal (g x) ∂μ < ∫ (x : α), f x ∂μ + ε :=\n\n/-- If two complex differentiable functions `f g : E → F` are equal on the boundary of a bounded set\n`U`, then they are equal on `U`. -/\ntheorem ∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type v} [inst_2 : NormedAddCommGroup F]\n  [inst_3 : NormedSpace ℂ F] [inst_4 : Nontrivial E] {f g : E → F} {U : Set E},\n  Metric.Bounded U → DiffContOnCl ℂ f U → DiffContOnCl ℂ g U → Set.EqOn f g (frontier U) → Set.EqOn f g U :=\n\n/-- If a real function `f` has a derivative `g` everywhere but at a point, and `f` and `g` are\ncontinuous at this point, then `g` is the derivative of `f` everywhere. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] {f g : ℝ → E} {x : ℝ},\n  (∀ (y : ℝ), y ≠ x → HasDerivAt f (g y) y) → ContinuousAt f x → ContinuousAt g x → ∀ (y : ℝ), HasDerivAt f (g y) y :=\n\n/-- **Vitali-Carathéodory Theorem**: given an integrable real function `f`, there exists an\nintegrable function `g < f` which is upper semicontinuous, with integral arbitrarily close to that\nof `f`. This function has to be `EReal`-valued in general. -/\ntheorem ∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : MeasurableSpace α] [inst_2 : BorelSpace α]\n  {μ : MeasureTheory.Measure α} [inst_3 : MeasureTheory.Measure.WeaklyRegular μ] [inst_4 : MeasureTheory.SigmaFinite μ]\n  (f : α → ℝ),\n  MeasureTheory.Integrable f →\n    ∀ {ε : ℝ},\n      0 < ε →\n        ∃ g,\n          (∀ (x : α), g x < ↑(f x)) ∧\n            UpperSemicontinuous g ∧\n              (MeasureTheory.Integrable fun x => EReal.toReal (g x)) ∧\n                (∀ᵐ (x : α) ∂μ, ⊥ < g x) ∧ ∫ (x : α), f x ∂μ < ∫ (x : α), EReal.toReal (g x) ∂μ + ε :=\n\n/-- **Tietze extension theorem** for real-valued continuous maps, a version for a closed set. Let\n`s` be a closed set in a normal topological space `Y`. Let `f` be a continuous real-valued function\non `s`. Then there exists a continuous real-valued function `g : C(Y, ℝ)` such that\n`g.restrict s = f`. -/\ntheorem ∀ {Y : Type u_1} [inst : TopologicalSpace Y] [inst_1 : NormalSpace Y] {s : Set Y} (f : C(↑s, ℝ)),\n  IsClosed s → ∃ g, ContinuousMap.restrict s g = f :=\n\n/-- If `f` is a sequence of functions which converges in measure to `g`, then there exists a\nsubsequence of `f` which converges a.e. to `g`. -/\ntheorem ∀ {α : Type u_1} {E : Type u_2} {m : MeasurableSpace α} {μ : MeasureTheory.Measure α} [inst : MetricSpace E]\n  {f : ℕ → α → E} {g : α → E},\n  MeasureTheory.TendstoInMeasure μ f Filter.atTop g →\n    ∃ ns, StrictMono ns ∧ ∀ᵐ (x : α) ∂μ, Filter.Tendsto (fun i => f (ns i) x) Filter.atTop (nhds (g x)) :=\n\n/-- If `f` is a partition of unity that is subordinate to a family of open sets `U i` and\n`g : ι → X → E` is a family of functions such that each `g i` is continuous on `U i`, then the sum\n`fun x ↦ ∑ᶠ i, f i x • g i x` is a continuous function. -/\ntheorem ∀ {ι : Type u} {X : Type v} [inst : TopologicalSpace X] {E : Type u_1} [inst_1 : AddCommMonoid E]\n  [inst_2 : SMulWithZero ℝ E] [inst_3 : TopologicalSpace E] [inst_4 : ContinuousSMul ℝ E] {s : Set X}\n  {f : PartitionOfUnity ι X s} [inst_5 : ContinuousAdd E] {U : ι → Set X},\n  (∀ (i : ι), IsOpen (U i)) →\n    PartitionOfUnity.IsSubordinate f U →\n      ∀ {g : ι → X → E}, (∀ (i : ι), ContinuousOn (g i) (U i)) → Continuous fun x => ∑ᶠ (i : ι), ↑(↑f i) x • g i x :=\n\n/-- If `f` is a partition of unity on a set `s : Set X` and `g : ι → X → E` is a family of functions\nsuch that each `g i` is continuous at every point of the topological support of `f i`, then the sum\n`fun x ↦ ∑ᶠ i, f i x • g i x` is continuous on the whole space. -/\ntheorem ∀ {ι : Type u} {X : Type v} [inst : TopologicalSpace X] {E : Type u_1} [inst_1 : AddCommMonoid E]\n  [inst_2 : SMulWithZero ℝ E] [inst_3 : TopologicalSpace E] [inst_4 : ContinuousSMul ℝ E] {s : Set X}\n  (f : PartitionOfUnity ι X s) [inst_5 : ContinuousAdd E] {g : ι → X → E},\n  (∀ (i : ι) (x : X), x ∈ tsupport ↑(↑f i) → ContinuousAt (g i) x) → Continuous fun x => ∑ᶠ (i : ι), ↑(↑f i) x • g i x :=\n\n/-- Given a simple function `f` with values in `ℝ≥0`, there exists a lower semicontinuous\nfunction `g ≥ f` with integral arbitrarily close to that of `f`. Formulation in terms of\n`lintegral`.\nAuxiliary lemma for Vitali-Carathéodory theorem `exists_lt_lower_semicontinuous_integral_lt`. -/\ntheorem ∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : MeasurableSpace α] [inst_2 : BorelSpace α]\n  (μ : MeasureTheory.Measure α) [inst_3 : MeasureTheory.Measure.WeaklyRegular μ] (f : MeasureTheory.SimpleFunc α NNReal)\n  {ε : ENNReal},\n  ε ≠ 0 → ∃ g, (∀ (x : α), ↑f x ≤ g x) ∧ LowerSemicontinuous g ∧ ∫⁻ (x : α), ↑(g x) ∂μ ≤ ∫⁻ (x : α), ↑(↑f x) ∂μ + ε :=\n\n/-- If `f : ℂ → E` is continuous on a closed ball of positive radius and is differentiable at all\nbut countably many points of the corresponding open ball, then it is analytic on the open ball with\ncoefficients of the power series given by Cauchy integral formulas. -/\ntheorem ∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {R : NNReal} {c : ℂ}\n  {f : ℂ → E} {s : Set ℂ},\n  Set.Countable s →\n    ContinuousOn f (Metric.closedBall c ↑R) →\n      (∀ (z : ℂ), z ∈ Metric.ball c ↑R \\ s → DifferentiableAt ℂ f z) →\n        0 < R → HasFPowerSeriesOnBall f (cauchyPowerSeries f c ↑R) c ↑R :=\n\n/-- Given a simple function `f` with values in `ℝ≥0`, there exists an upper semicontinuous\nfunction `g ≤ f` with integral arbitrarily close to that of `f`. Formulation in terms of\n`lintegral`.\nAuxiliary lemma for Vitali-Carathéodory theorem `exists_lt_lower_semicontinuous_integral_lt`. -/\ntheorem ∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : MeasurableSpace α] [inst_2 : BorelSpace α]\n  {μ : MeasureTheory.Measure α} [inst_3 : MeasureTheory.Measure.WeaklyRegular μ]\n  (f : MeasureTheory.SimpleFunc α NNReal),\n  ∫⁻ (x : α), ↑(↑f x) ∂μ ≠ ⊤ →\n    ∀ {ε : ENNReal},\n      ε ≠ 0 → ∃ g, (∀ (x : α), g x ≤ ↑f x) ∧ UpperSemicontinuous g ∧ ∫⁻ (x : α), ↑(↑f x) ∂μ ≤ ∫⁻ (x : α), ↑(g x) ∂μ + ε :=\n\n/-- If `f` is a real continuous function defined on a closed set `E ⊆ ℝ`, prove that there exist continuous real functions `g` on `ℝ` such that `g(x)=f(x)` for all `x ∈ E`. -/\ntheorem", "choices": ["forall {Y : Type u_1} [inst : TopologicalSpace Y] [inst_1 : NormalSpace Y] {E : Set Y} (f : C(↑E, ℝ)),\n  IsClosed E → ∃ g, ContinuousMap.restrict E g = f "]}
{"docString": "If `f` is defined on `E`, the graph of `f` is the set of points `(x, f(x))`, for `x ∈ E`. In particular, if `E` is a set of real numbers, and `f` is real-valued, the graph of `f` is a subset of the plane. Suppose `E` is compact, and prove that `f` is continuous on `E` if and only if its graph is compact.", "prompts": "[{\"theorem\":\n  \"∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {f : ℂ → E},\\n  Differentiable ℂ f → ∀ {n : ℕ∞}, ContDiff ℂ n f\",\n  \"isProp\": true,\n  \"docString\":\n  \"A complex differentiable function `f : ℂ → E` is continuously differentiable at every point. \"},\n {\"theorem\":\n  \"∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {n : ℕ∞} {s : Set ℂ}\\n  {f : ℂ → E}, DifferentiableOn ℂ f s → IsOpen s → ContDiffOn ℂ n f s\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f : ℂ → E` is complex differentiable on some open set `s`, then it is continuously\\ndifferentiable on `s`. \"},\n {\"theorem\":\n  \"∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {R : NNReal} {c : ℂ}\\n  {f : ℂ → E} {s : Set ℂ},\\n  Set.Countable s →\\n    ContinuousOn f (Metric.closedBall c ↑R) →\\n      (∀ (z : ℂ), z ∈ Metric.ball c ↑R \\\\ s → DifferentiableAt ℂ f z) →\\n        0 < R → HasFPowerSeriesOnBall f (cauchyPowerSeries f c ↑R) c ↑R\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f : ℂ → E` is continuous on a closed ball of positive radius and is differentiable at all\\nbut countably many points of the corresponding open ball, then it is analytic on the open ball with\\ncoefficients of the power series given by Cauchy integral formulas. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_3} [inst : NontriviallyNormedField 𝕜] {E : Type u_1} [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] {F : Type u_2} [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F]\\n  [inst_5 : CompleteSpace F] [inst_6 : CompleteSpace E] (g : E →ₗ[𝕜] F),\\n  (∀ (u : ℕ → E) (x : E) (y : F),\\n      Filter.Tendsto u Filter.atTop (nhds x) → Filter.Tendsto (↑g ∘ u) Filter.atTop (nhds y) → y = ↑g x) →\\n    Continuous ↑g\",\n  \"isProp\": true,\n  \"docString\":\n  \"A useful form of the **closed graph theorem** : let `f` be a linear map between two Banach\\nspaces. To show that `f` is continuous, it suffices to show that for any convergent sequence\\n`uₙ ⟶ x`, if `f(uₙ) ⟶ y` then `y = f(x)`. \"},\n {\"theorem\":\n  \"∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {f : ℂ → E},\\n  Differentiable ℂ f → ∀ (z : ℂ), AnalyticAt ℂ f z\",\n  \"isProp\": true,\n  \"docString\":\n  \"A complex differentiable function `f : ℂ → E` is analytic at every point. \"},\n {\"theorem\":\n  \"∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {R : NNReal} {c : ℂ}\\n  {f : ℂ → E}, DiffContOnCl ℂ f (Metric.ball c ↑R) → 0 < R → HasFPowerSeriesOnBall f (cauchyPowerSeries f c ↑R) c ↑R\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f : ℂ → E` is complex differentiable on an open disc of positive radius and is continuous\\non its closure, then it is analytic on the open disc with coefficients of the power series given by\\nCauchy integral formulas. \"},\n {\"theorem\":\n  \"∀ {ι : Type u} {X : Type v} [inst : TopologicalSpace X] {E : Type u_1} [inst_1 : AddCommMonoid E]\\n  [inst_2 : SMulWithZero ℝ E] [inst_3 : TopologicalSpace E] [inst_4 : ContinuousSMul ℝ E] {s : Set X}\\n  (f : PartitionOfUnity ι X s) [inst_5 : ContinuousAdd E] {g : ι → X → E},\\n  (∀ (i : ι) (x : X), x ∈ tsupport ↑(↑f i) → ContinuousAt (g i) x) → Continuous fun x => ∑ᶠ (i : ι), ↑(↑f i) x • g i x\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` is a partition of unity on a set `s : Set X` and `g : ι → X → E` is a family of functions\\nsuch that each `g i` is continuous at every point of the topological support of `f i`, then the sum\\n`fun x ↦ ∑ᶠ i, f i x • g i x` is continuous on the whole space. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} {γ : Type u_1} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β]\\n  [inst_2 : TopologicalSpace γ] [inst_3 : DiscreteTopology α] {f : α → β → γ},\\n  (∀ (a : α), Continuous (f a)) → Continuous (Function.uncurry f)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a function `f x y` is such that `y ↦ f x y` is continuous for all `x`, and `x` lives in a\\ndiscrete space, then `f` is continuous. \"},\n {\"theorem\":\n  \"∀ {ι : Type u} {X : Type v} [inst : TopologicalSpace X] {E : Type u_1} [inst_1 : AddCommMonoid E]\\n  [inst_2 : SMulWithZero ℝ E] [inst_3 : TopologicalSpace E] [inst_4 : ContinuousSMul ℝ E] {s : Set X}\\n  {f : PartitionOfUnity ι X s} [inst_5 : ContinuousAdd E] {U : ι → Set X},\\n  (∀ (i : ι), IsOpen (U i)) →\\n    PartitionOfUnity.IsSubordinate f U →\\n      ∀ {g : ι → X → E}, (∀ (i : ι), ContinuousOn (g i) (U i)) → Continuous fun x => ∑ᶠ (i : ι), ↑(↑f i) x • g i x\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` is a partition of unity that is subordinate to a family of open sets `U i` and\\n`g : ι → X → E` is a family of functions such that each `g i` is continuous on `U i`, then the sum\\n`fun x ↦ ∑ᶠ i, f i x • g i x` is a continuous function. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {V : Type u_2} {V₂ : Type u_4} {P : Type u_3} {P₂ : Type u_5} [inst : NormedField 𝕜]\\n  [inst_1 : SeminormedAddCommGroup V] [inst_2 : SeminormedAddCommGroup V₂] [inst_3 : NormedSpace 𝕜 V]\\n  [inst_4 : NormedSpace 𝕜 V₂] [inst_5 : PseudoMetricSpace P] [inst_6 : PseudoMetricSpace P₂]\\n  [inst_7 : NormedAddTorsor V P] [inst_8 : NormedAddTorsor V₂ P₂] {f : P →ᵃ[𝕜] P₂}, Continuous ↑f.linear ↔ Continuous ↑f\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` is an affine map, then its linear part is continuous iff `f` is continuous. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} {E : Type u_2} [inst : MeasurableSpace X] [inst_1 : TopologicalSpace X] [inst_2 : NormedAddCommGroup E]\\n  {f : X → E} {μ : MeasureTheory.Measure X} [inst_3 : OpensMeasurableSpace X]\\n  [inst_4 : MeasureTheory.IsLocallyFiniteMeasure μ] {K : Set X} [inst_5 : TopologicalSpace.MetrizableSpace X],\\n  IsCompact K → ContinuousOn f K → MeasureTheory.IntegrableOn f K\",\n  \"isProp\": true,\n  \"docString\":\n  \"A function `f` continuous on a compact set `K` is integrable on this set with respect to any\\nlocally finite measure. \"},\n {\"theorem\":\n  \"∀ {ι : Type u} {X : Type v} [inst : TopologicalSpace X] {E : Type u_1} [inst_1 : AddCommMonoid E]\\n  [inst_2 : SMulWithZero ℝ E] [inst_3 : TopologicalSpace E] [inst_4 : ContinuousSMul ℝ E] {s : Set X}\\n  (f : PartitionOfUnity ι X s) {g : X → E} {i : ι},\\n  (∀ (x : X), x ∈ tsupport ↑(↑f i) → ContinuousAt g x) → Continuous fun x => ↑(↑f i) x • g x\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` is a partition of unity on `s : Set X` and `g : X → E` is continuous at every point of\\nthe topological support of some `f i`, then `fun x ↦ f i x • g x` is continuous on the whole space.\\n\"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {β : Type u_2} {E : Type u_3} [inst : MeasurableSpace α] [inst_1 : MeasurableSpace β]\\n  {μ : MeasureTheory.Measure α} {ν : MeasureTheory.Measure β} [inst_2 : NormedAddCommGroup E]\\n  [inst_3 : MeasureTheory.SigmaFinite ν] [inst_4 : NormedSpace ℝ E] [inst_5 : CompleteSpace E]\\n  [inst_6 : MeasureTheory.SigmaFinite μ], Continuous fun f => ∫ (x : α), ∫ (y : β), ↑↑f (x, y) ∂ν ∂μ\",\n  \"isProp\": true,\n  \"docString\":\n  \"The map that sends an L¹-function `f : α × β → E` to `∫∫f` is continuous. \"},\n {\"theorem\":\n  \"∀ {X : Type u_2} {E : Type u_1} [inst : TopologicalSpace X] [inst_1 : AddCommGroup E] [inst_2 : Module ℝ E]\\n  [inst_3 : NormalSpace X] [inst_4 : ParacompactSpace X] [inst_5 : TopologicalSpace E] [inst_6 : ContinuousAdd E]\\n  [inst_7 : ContinuousSMul ℝ E] {t : X → Set E},\\n  (∀ (x : X), Convex ℝ (t x)) →\\n    (∀ (x : X), ∃ U, U ∈ nhds x ∧ ∃ g, ContinuousOn g U ∧ ∀ (y : X), y ∈ U → g y ∈ t y) → ∃ g, ∀ (x : X), ↑g x ∈ t x\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `X` be a normal paracompact topological space (e.g., any extended metric space). Let `E` be\\na topological real vector space. Let `t : X → Set E` be a family of convex sets. Suppose that for\\neach point `x : X`, there exists a neighborhood `U ∈ 𝓝 X` and a function `g : X → E` that is\\ncontinuous on `U` and sends each `y ∈ U` to a point of `t y`. Then there exists a continuous map\\n`g : C(X, E)` such that `g x ∈ t x` for all `x`. See also\\n`exists_continuous_forall_mem_convex_of_local_const`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_2} {𝕜' : Type u_3} {E : Type u_4} {F : Type u_1} [inst : AddCommGroup E] [inst_1 : UniformSpace E]\\n  [inst_2 : UniformAddGroup E] [inst_3 : AddCommGroup F] [inst_4 : UniformSpace F]\\n  [inst_5 : TopologicalSpace.FirstCountableTopology E] [inst_6 : IsROrC 𝕜] [inst_7 : Module 𝕜 E]\\n  [inst_8 : ContinuousSMul 𝕜 E] [inst_9 : IsROrC 𝕜'] [inst_10 : Module 𝕜' F] [inst_11 : ContinuousSMul 𝕜' F]\\n  {σ : 𝕜 →+* 𝕜'} [inst_12 : UniformAddGroup F] (f : E →ₛₗ[σ] F),\\n  (∀ (s : Set E), Bornology.IsVonNBounded 𝕜 s → Bornology.IsVonNBounded 𝕜' (↑f '' s)) → Continuous ↑f\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `E` is first countable, then every locally bounded linear map `E →ₛₗ[σ] F` is continuous. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] {m : MeasurableSpace X} [inst_1 : TopologicalSpace Y]\\n  [inst_2 : T2Space Y] {μ : MeasureTheory.Measure X} [inst_3 : MeasureTheory.Measure.IsOpenPosMeasure μ] {U : Set X}\\n  {f g : X → Y},\\n  f =ᶠ[MeasureTheory.Measure.ae (MeasureTheory.Measure.restrict μ U)] g →\\n    IsOpen U → ContinuousOn f U → ContinuousOn g U → Set.EqOn f g U\",\n  \"isProp\": true,\n  \"docString\":\n  \"If two functions are a.e. equal on an open set and are continuous on this set, then they are\\nequal on this set. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {β : Type u_1} {γ : Type u_3} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β]\\n  [inst_2 : TopologicalSpace γ] (e : LocalHomeomorph α β) {f : β → γ} {s : Set β},\\n  s ⊆ e.target → (ContinuousOn f s ↔ ContinuousOn (f ∘ ↑e) (e.source ∩ ↑e ⁻¹' s))\",\n  \"isProp\": true,\n  \"docString\":\n  \"A function is continuous on a set if and only if its composition with a local homeomorphism\\non the right is continuous on the corresponding set. \"},\n {\"theorem\":\n  \"∀ {X : Type u_2} {E : Type u_1} [inst : TopologicalSpace X] [inst_1 : AddCommGroup E] [inst_2 : Module ℝ E]\\n  [inst_3 : NormalSpace X] [inst_4 : ParacompactSpace X] [inst_5 : TopologicalSpace E] [inst_6 : ContinuousAdd E]\\n  [inst_7 : ContinuousSMul ℝ E] {t : X → Set E},\\n  (∀ (x : X), Convex ℝ (t x)) → (∀ (x : X), ∃ c, ∀ᶠ (y : X) in nhds x, c ∈ t y) → ∃ g, ∀ (x : X), ↑g x ∈ t x\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `X` be a normal paracompact topological space (e.g., any extended metric space). Let `E` be\\na topological real vector space. Let `t : X → Set E` be a family of convex sets. Suppose that for\\neach point `x : X`, there exists a vector `c : E` that belongs to `t y` for all `y` in a\\nneighborhood of `x`. Then there exists a continuous map `g : C(X, E)` such that `g x ∈ t x` for all\\n`x`. See also `exists_continuous_forall_mem_convex_of_local`. \"},\n {\"theorem\":\n  \"∀ {E : Type u_2} {F : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E]\\n  [inst_2 : FiniteDimensional ℝ E] [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace ℝ F]\\n  [inst_5 : FiniteDimensional ℝ F] {f : E → F} {s t : Set E},\\n  ContDiffOn ℝ 1 f s → Convex ℝ s → t ⊆ s → dimH t < ↑(FiniteDimensional.finrank ℝ F) → Dense (f '' t)ᶜ\",\n  \"isProp\": true,\n  \"docString\":\n  \"A particular case of Sard's Theorem. Let `f : E → F` be a map between finite dimensional real\\nvector spaces. Suppose that `f` is `C¹` smooth on a convex set `s` of Hausdorff dimension strictly\\nless than the dimension of `F`. Then the complement of the image `f '' s` is dense in `F`. \"},\n {\"theorem\":\n  \"∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {f : ℂ → E} {c : ℂ},\\n  (∀ᶠ (z : ℂ) in nhdsWithin c {c}ᶜ, DifferentiableAt ℂ f z) → ContinuousAt f c → AnalyticAt ℂ f c\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Removable singularity** theorem, weak version. If `f : ℂ → E` is differentiable in a punctured\\nneighborhood of a point and is continuous at this point, then it is analytic at this point. \"}]\n", "prompt_cons": "/-- A complex differentiable function `f : ℂ → E` is continuously differentiable at every point. -/\ntheorem ∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {f : ℂ → E},\n  Differentiable ℂ f → ∀ {n : ℕ∞}, ContDiff ℂ n f :=\n\n/-- If `f : ℂ → E` is complex differentiable on some open set `s`, then it is continuously\ndifferentiable on `s`. -/\ntheorem ∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {n : ℕ∞} {s : Set ℂ}\n  {f : ℂ → E}, DifferentiableOn ℂ f s → IsOpen s → ContDiffOn ℂ n f s :=\n\n/-- If `f : ℂ → E` is continuous on a closed ball of positive radius and is differentiable at all\nbut countably many points of the corresponding open ball, then it is analytic on the open ball with\ncoefficients of the power series given by Cauchy integral formulas. -/\ntheorem ∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {R : NNReal} {c : ℂ}\n  {f : ℂ → E} {s : Set ℂ},\n  Set.Countable s →\n    ContinuousOn f (Metric.closedBall c ↑R) →\n      (∀ (z : ℂ), z ∈ Metric.ball c ↑R \\ s → DifferentiableAt ℂ f z) →\n        0 < R → HasFPowerSeriesOnBall f (cauchyPowerSeries f c ↑R) c ↑R :=\n\n/-- A useful form of the **closed graph theorem** : let `f` be a linear map between two Banach\nspaces. To show that `f` is continuous, it suffices to show that for any convergent sequence\n`uₙ ⟶ x`, if `f(uₙ) ⟶ y` then `y = f(x)`. -/\ntheorem ∀ {𝕜 : Type u_3} [inst : NontriviallyNormedField 𝕜] {E : Type u_1} [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E] {F : Type u_2} [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F]\n  [inst_5 : CompleteSpace F] [inst_6 : CompleteSpace E] (g : E →ₗ[𝕜] F),\n  (∀ (u : ℕ → E) (x : E) (y : F),\n      Filter.Tendsto u Filter.atTop (nhds x) → Filter.Tendsto (↑g ∘ u) Filter.atTop (nhds y) → y = ↑g x) →\n    Continuous ↑g :=\n\n/-- A complex differentiable function `f : ℂ → E` is analytic at every point. -/\ntheorem ∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {f : ℂ → E},\n  Differentiable ℂ f → ∀ (z : ℂ), AnalyticAt ℂ f z :=\n\n/-- If `f : ℂ → E` is complex differentiable on an open disc of positive radius and is continuous\non its closure, then it is analytic on the open disc with coefficients of the power series given by\nCauchy integral formulas. -/\ntheorem ∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {R : NNReal} {c : ℂ}\n  {f : ℂ → E}, DiffContOnCl ℂ f (Metric.ball c ↑R) → 0 < R → HasFPowerSeriesOnBall f (cauchyPowerSeries f c ↑R) c ↑R :=\n\n/-- If `f` is a partition of unity on a set `s : Set X` and `g : ι → X → E` is a family of functions\nsuch that each `g i` is continuous at every point of the topological support of `f i`, then the sum\n`fun x ↦ ∑ᶠ i, f i x • g i x` is continuous on the whole space. -/\ntheorem ∀ {ι : Type u} {X : Type v} [inst : TopologicalSpace X] {E : Type u_1} [inst_1 : AddCommMonoid E]\n  [inst_2 : SMulWithZero ℝ E] [inst_3 : TopologicalSpace E] [inst_4 : ContinuousSMul ℝ E] {s : Set X}\n  (f : PartitionOfUnity ι X s) [inst_5 : ContinuousAdd E] {g : ι → X → E},\n  (∀ (i : ι) (x : X), x ∈ tsupport ↑(↑f i) → ContinuousAt (g i) x) → Continuous fun x => ∑ᶠ (i : ι), ↑(↑f i) x • g i x :=\n\n/-- If a function `f x y` is such that `y ↦ f x y` is continuous for all `x`, and `x` lives in a\ndiscrete space, then `f` is continuous. -/\ntheorem ∀ {α : Type u} {β : Type v} {γ : Type u_1} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β]\n  [inst_2 : TopologicalSpace γ] [inst_3 : DiscreteTopology α] {f : α → β → γ},\n  (∀ (a : α), Continuous (f a)) → Continuous (Function.uncurry f) :=\n\n/-- If `f` is a partition of unity that is subordinate to a family of open sets `U i` and\n`g : ι → X → E` is a family of functions such that each `g i` is continuous on `U i`, then the sum\n`fun x ↦ ∑ᶠ i, f i x • g i x` is a continuous function. -/\ntheorem ∀ {ι : Type u} {X : Type v} [inst : TopologicalSpace X] {E : Type u_1} [inst_1 : AddCommMonoid E]\n  [inst_2 : SMulWithZero ℝ E] [inst_3 : TopologicalSpace E] [inst_4 : ContinuousSMul ℝ E] {s : Set X}\n  {f : PartitionOfUnity ι X s} [inst_5 : ContinuousAdd E] {U : ι → Set X},\n  (∀ (i : ι), IsOpen (U i)) →\n    PartitionOfUnity.IsSubordinate f U →\n      ∀ {g : ι → X → E}, (∀ (i : ι), ContinuousOn (g i) (U i)) → Continuous fun x => ∑ᶠ (i : ι), ↑(↑f i) x • g i x :=\n\n/-- If `f` is an affine map, then its linear part is continuous iff `f` is continuous. -/\ntheorem ∀ {𝕜 : Type u_1} {V : Type u_2} {V₂ : Type u_4} {P : Type u_3} {P₂ : Type u_5} [inst : NormedField 𝕜]\n  [inst_1 : SeminormedAddCommGroup V] [inst_2 : SeminormedAddCommGroup V₂] [inst_3 : NormedSpace 𝕜 V]\n  [inst_4 : NormedSpace 𝕜 V₂] [inst_5 : PseudoMetricSpace P] [inst_6 : PseudoMetricSpace P₂]\n  [inst_7 : NormedAddTorsor V P] [inst_8 : NormedAddTorsor V₂ P₂] {f : P →ᵃ[𝕜] P₂}, Continuous ↑f.linear ↔ Continuous ↑f :=\n\n/-- A function `f` continuous on a compact set `K` is integrable on this set with respect to any\nlocally finite measure. -/\ntheorem ∀ {X : Type u_1} {E : Type u_2} [inst : MeasurableSpace X] [inst_1 : TopologicalSpace X] [inst_2 : NormedAddCommGroup E]\n  {f : X → E} {μ : MeasureTheory.Measure X} [inst_3 : OpensMeasurableSpace X]\n  [inst_4 : MeasureTheory.IsLocallyFiniteMeasure μ] {K : Set X} [inst_5 : TopologicalSpace.MetrizableSpace X],\n  IsCompact K → ContinuousOn f K → MeasureTheory.IntegrableOn f K :=\n\n/-- If `f` is a partition of unity on `s : Set X` and `g : X → E` is continuous at every point of\nthe topological support of some `f i`, then `fun x ↦ f i x • g x` is continuous on the whole space. -/\ntheorem ∀ {ι : Type u} {X : Type v} [inst : TopologicalSpace X] {E : Type u_1} [inst_1 : AddCommMonoid E]\n  [inst_2 : SMulWithZero ℝ E] [inst_3 : TopologicalSpace E] [inst_4 : ContinuousSMul ℝ E] {s : Set X}\n  (f : PartitionOfUnity ι X s) {g : X → E} {i : ι},\n  (∀ (x : X), x ∈ tsupport ↑(↑f i) → ContinuousAt g x) → Continuous fun x => ↑(↑f i) x • g x :=\n\n/-- The map that sends an L¹-function `f : α × β → E` to `∫∫f` is continuous. -/\ntheorem ∀ {α : Type u_1} {β : Type u_2} {E : Type u_3} [inst : MeasurableSpace α] [inst_1 : MeasurableSpace β]\n  {μ : MeasureTheory.Measure α} {ν : MeasureTheory.Measure β} [inst_2 : NormedAddCommGroup E]\n  [inst_3 : MeasureTheory.SigmaFinite ν] [inst_4 : NormedSpace ℝ E] [inst_5 : CompleteSpace E]\n  [inst_6 : MeasureTheory.SigmaFinite μ], Continuous fun f => ∫ (x : α), ∫ (y : β), ↑↑f (x, y) ∂ν ∂μ :=\n\n/-- Let `X` be a normal paracompact topological space (e.g., any extended metric space). Let `E` be\na topological real vector space. Let `t : X → Set E` be a family of convex sets. Suppose that for\neach point `x : X`, there exists a neighborhood `U ∈ 𝓝 X` and a function `g : X → E` that is\ncontinuous on `U` and sends each `y ∈ U` to a point of `t y`. Then there exists a continuous map\n`g : C(X, E)` such that `g x ∈ t x` for all `x`. See also\n`exists_continuous_forall_mem_convex_of_local_const`. -/\ntheorem ∀ {X : Type u_2} {E : Type u_1} [inst : TopologicalSpace X] [inst_1 : AddCommGroup E] [inst_2 : Module ℝ E]\n  [inst_3 : NormalSpace X] [inst_4 : ParacompactSpace X] [inst_5 : TopologicalSpace E] [inst_6 : ContinuousAdd E]\n  [inst_7 : ContinuousSMul ℝ E] {t : X → Set E},\n  (∀ (x : X), Convex ℝ (t x)) →\n    (∀ (x : X), ∃ U, U ∈ nhds x ∧ ∃ g, ContinuousOn g U ∧ ∀ (y : X), y ∈ U → g y ∈ t y) → ∃ g, ∀ (x : X), ↑g x ∈ t x :=\n\n/-- If `E` is first countable, then every locally bounded linear map `E →ₛₗ[σ] F` is continuous. -/\ntheorem ∀ {𝕜 : Type u_2} {𝕜' : Type u_3} {E : Type u_4} {F : Type u_1} [inst : AddCommGroup E] [inst_1 : UniformSpace E]\n  [inst_2 : UniformAddGroup E] [inst_3 : AddCommGroup F] [inst_4 : UniformSpace F]\n  [inst_5 : TopologicalSpace.FirstCountableTopology E] [inst_6 : IsROrC 𝕜] [inst_7 : Module 𝕜 E]\n  [inst_8 : ContinuousSMul 𝕜 E] [inst_9 : IsROrC 𝕜'] [inst_10 : Module 𝕜' F] [inst_11 : ContinuousSMul 𝕜' F]\n  {σ : 𝕜 →+* 𝕜'} [inst_12 : UniformAddGroup F] (f : E →ₛₗ[σ] F),\n  (∀ (s : Set E), Bornology.IsVonNBounded 𝕜 s → Bornology.IsVonNBounded 𝕜' (↑f '' s)) → Continuous ↑f :=\n\n/-- If two functions are a.e. equal on an open set and are continuous on this set, then they are\nequal on this set. -/\ntheorem ∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] {m : MeasurableSpace X} [inst_1 : TopologicalSpace Y]\n  [inst_2 : T2Space Y] {μ : MeasureTheory.Measure X} [inst_3 : MeasureTheory.Measure.IsOpenPosMeasure μ] {U : Set X}\n  {f g : X → Y},\n  f =ᶠ[MeasureTheory.Measure.ae (MeasureTheory.Measure.restrict μ U)] g →\n    IsOpen U → ContinuousOn f U → ContinuousOn g U → Set.EqOn f g U :=\n\n/-- A function is continuous on a set if and only if its composition with a local homeomorphism\non the right is continuous on the corresponding set. -/\ntheorem ∀ {α : Type u_2} {β : Type u_1} {γ : Type u_3} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β]\n  [inst_2 : TopologicalSpace γ] (e : LocalHomeomorph α β) {f : β → γ} {s : Set β},\n  s ⊆ e.target → (ContinuousOn f s ↔ ContinuousOn (f ∘ ↑e) (e.source ∩ ↑e ⁻¹' s)) :=\n\n/-- Let `X` be a normal paracompact topological space (e.g., any extended metric space). Let `E` be\na topological real vector space. Let `t : X → Set E` be a family of convex sets. Suppose that for\neach point `x : X`, there exists a vector `c : E` that belongs to `t y` for all `y` in a\nneighborhood of `x`. Then there exists a continuous map `g : C(X, E)` such that `g x ∈ t x` for all\n`x`. See also `exists_continuous_forall_mem_convex_of_local`. -/\ntheorem ∀ {X : Type u_2} {E : Type u_1} [inst : TopologicalSpace X] [inst_1 : AddCommGroup E] [inst_2 : Module ℝ E]\n  [inst_3 : NormalSpace X] [inst_4 : ParacompactSpace X] [inst_5 : TopologicalSpace E] [inst_6 : ContinuousAdd E]\n  [inst_7 : ContinuousSMul ℝ E] {t : X → Set E},\n  (∀ (x : X), Convex ℝ (t x)) → (∀ (x : X), ∃ c, ∀ᶠ (y : X) in nhds x, c ∈ t y) → ∃ g, ∀ (x : X), ↑g x ∈ t x :=\n\n/-- A particular case of Sard's Theorem. Let `f : E → F` be a map between finite dimensional real\nvector spaces. Suppose that `f` is `C¹` smooth on a convex set `s` of Hausdorff dimension strictly\nless than the dimension of `F`. Then the complement of the image `f '' s` is dense in `F`. -/\ntheorem ∀ {E : Type u_2} {F : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E]\n  [inst_2 : FiniteDimensional ℝ E] [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace ℝ F]\n  [inst_5 : FiniteDimensional ℝ F] {f : E → F} {s t : Set E},\n  ContDiffOn ℝ 1 f s → Convex ℝ s → t ⊆ s → dimH t < ↑(FiniteDimensional.finrank ℝ F) → Dense (f '' t)ᶜ :=\n\n/-- **Removable singularity** theorem, weak version. If `f : ℂ → E` is differentiable in a punctured\nneighborhood of a point and is continuous at this point, then it is analytic at this point. -/\ntheorem ∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {f : ℂ → E} {c : ℂ},\n  (∀ᶠ (z : ℂ) in nhdsWithin c {c}ᶜ, DifferentiableAt ℂ f z) → ContinuousAt f c → AnalyticAt ℂ f c :=\n\n/-- If `f` is defined on `E`, the graph of `f` is the set of points `(x, f(x))`, for `x ∈ E`. In particular, if `E` is a set of real numbers, and `f` is real-valued, the graph of `f` is a subset of the plane. Suppose `E` is compact, and prove that `f` is continuous on `E` if and only if its graph is compact. -/\ntheorem", "choices": ["forall {X : Type u} {Y : Type v} [instX : TopologicalSpace X] [instY : TopologicalSpace Y] [inst : CompactSpace X]\n  {f : X → Y}, Compact (SetOf fun p : X × Y => p.2 = f p.1) ↔ Continuous f ", "forall {X : Type u} {Y : Type v} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y]\n  [inst_2 : T2Space Y] [inst_3 : CompactSpace X] {E : Set X} {f : X → Y},\n  IsCompact (SetOf (fun x => (x, f x)) for x in E) ↔ ContinuousOn f E ", "forall {E : Type u} [inst : TopologicalSpace E] {α : Type v} [inst_1 : TopologicalSpace α] [inst_2 : T2Space α] {f : E → α},\n  IsCompact (Function.Graph f) ↔ IsCompact (Set.Range f) ", "forall {E : Type u_1} {F : Type u_2} [inst : TopologicalSpace E] [inst_1 : TopologicalSpace F]\n  [inst_2 : CompactSpace E] [inst_3 : T2Space E] [inst_4 : T2Space F] {f : E → F},\n  Continuous f ↔ IsCompact (Set.Graph f) ", "∀ {α : Type u_1} {β : Type u_2} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] {E : Set α} {f : α → β},\n  IsCompact E → (ContinuousOn f E ↔ IsCompact (SetOf (λ x, (x, f x)))) ", "∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] {E : Set α} {f : α → β},\n  IsCompact E → (ContinuousOn f E ↔ IsCompact (graph f E)) ", "∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] {f : α → β} {s : Set α},\n  IsCompact s → (IsCompact (SetOf fun p => ∃ (x : α) (H : x ∈ s), p = (x, f x)) ↔ ContinuousOn f s) ", "∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] [inst_2 : CompactSpace X]\n  {E : Set X} {f : X → Y},\n  E ⊆ fgraph f ↔ Compact (fgraph f) ", "forall {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] {f : α → β} {E : Set α},\n  IsCompact E → (IsCompact (Set.Graph f E) ↔ ContinuousOn f E) ", "forall {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] {s : Set α} {f : α → β},\n  IsCompact s → (IsCompact (SetOf fun p => p.1 ∈ s ∧ p.2 = f p.1) ↔ ContinuousOn f s) "]}
{"docString": "Let `E` be a bounded set in `ℝ^1`. Prove that there exists a real function `f` such that `f` is uniformly continuous and is not bounded on `E`.", "prompts": "[{\"theorem\":\n  \"∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {f : ℂ → E},\\n  Differentiable ℂ f → ∀ {n : ℕ∞}, ContDiff ℂ n f\",\n  \"isProp\": true,\n  \"docString\":\n  \"A complex differentiable function `f : ℂ → E` is continuously differentiable at every point. \"},\n {\"theorem\":\n  \"∀ (𝕜 : Type u_2) (E : Type u_1) [inst : NontriviallyNormedField 𝕜] [inst_1 : NormedAddCommGroup E]\\n  [inst : NormedSpace 𝕜 E] [inst : Nontrivial E] (c : ℝ), ∃ x, c < ‖x‖\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `E` is a nontrivial normed space over a nontrivially normed field `𝕜`, then `E` is unbounded:\\nfor any `c : ℝ`, there exists a vector `x : E` with norm strictly greater than `c`. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] (Λ : BoundedContinuousFunction X NNReal →ₗ[NNReal] NNReal)\\n  (K : TopologicalSpace.Compacts X), Set.Nonempty (↑Λ '' {f | ∀ (x : X), x ∈ K → 1 ≤ ↑f x})\",\n  \"isProp\": true,\n  \"docString\":\n  \"For any compact subset `K ⊆ X`, there exist some bounded continuous nonnegative\\nfunctions f on X such that `f ≥ 1` on K. \"},\n {\"theorem\":\n  \"∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {n : ℕ∞} {s : Set ℂ}\\n  {f : ℂ → E}, DifferentiableOn ℂ f s → IsOpen s → ContDiffOn ℂ n f s\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f : ℂ → E` is complex differentiable on some open set `s`, then it is continuously\\ndifferentiable on `s`. \"},\n {\"theorem\":\n  \"∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {R : NNReal} {c : ℂ}\\n  {f : ℂ → E} {s : Set ℂ},\\n  Set.Countable s →\\n    ContinuousOn f (Metric.closedBall c ↑R) →\\n      (∀ (z : ℂ), z ∈ Metric.ball c ↑R \\\\ s → DifferentiableAt ℂ f z) →\\n        0 < R → HasFPowerSeriesOnBall f (cauchyPowerSeries f c ↑R) c ↑R\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f : ℂ → E` is continuous on a closed ball of positive radius and is differentiable at all\\nbut countably many points of the corresponding open ball, then it is analytic on the open ball with\\ncoefficients of the power series given by Cauchy integral formulas. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_2} {𝕜' : Type u_3} {E : Type u_4} {F : Type u_1} [inst : AddCommGroup E] [inst_1 : UniformSpace E]\\n  [inst_2 : UniformAddGroup E] [inst_3 : AddCommGroup F] [inst_4 : UniformSpace F]\\n  [inst_5 : TopologicalSpace.FirstCountableTopology E] [inst_6 : IsROrC 𝕜] [inst_7 : Module 𝕜 E]\\n  [inst_8 : ContinuousSMul 𝕜 E] [inst_9 : IsROrC 𝕜'] [inst_10 : Module 𝕜' F] [inst_11 : ContinuousSMul 𝕜' F]\\n  {σ : 𝕜 →+* 𝕜'} [inst_12 : UniformAddGroup F] (f : E →ₛₗ[σ] F),\\n  (∀ (s : Set E), Bornology.IsVonNBounded 𝕜 s → Bornology.IsVonNBounded 𝕜' (↑f '' s)) → Continuous ↑f\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `E` is first countable, then every locally bounded linear map `E →ₛₗ[σ] F` is continuous. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {β : Type u_2} [inst : LinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderClosedTopology α]\\n  [inst_3 : TopologicalSpace β] [inst_4 : Nonempty α] {f : β → α} {K : Set β},\\n  IsCompact K → ContinuousOn f K → BddAbove (f '' K)\",\n  \"isProp\": true,\n  \"docString\": \"A continuous function is bounded above on a compact set. \"},\n {\"theorem\":\n  \"∀ {f : ℝ → ℝ}, Differentiable ℝ f → (∀ (x : ℝ), 0 ≤ deriv f x) → Monotone f\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `f : ℝ → ℝ` be a differentiable function. If `f'` is nonnegative, then\\n`f` is a monotone function. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {E : Type u_2} {m0 : MeasurableSpace α} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E]\\n  [inst_2 : CompleteSpace E] {μ : MeasureTheory.Measure α} {f : α → E} [inst_3 : MeasureTheory.IsFiniteMeasure μ],\\n  MeasureTheory.Integrable f →\\n    f =ᶠ[MeasureTheory.Measure.ae μ] Function.const α (⨍ (x : α), f x ∂μ) ∨\\n      ∃ t, MeasurableSet t ∧ ↑↑μ t ≠ 0 ∧ ↑↑μ tᶜ ≠ 0 ∧ ⨍ (x : α) in t, f x ∂μ ≠ ⨍ (x : α) in tᶜ, f x ∂μ\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f : α → E` is an integrable function, then either it is a.e. equal to the constant\\n`⨍ x, f x ∂μ` or there exists a measurable set such that `μ t ≠ 0`, `μ tᶜ ≠ 0`, and the average\\nvalues of `f` over `t` and `tᶜ` are different. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {E : Type u_1} {m0 : MeasurableSpace α} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E]\\n  [inst_2 : CompleteSpace E] {μ : MeasureTheory.Measure α} {f : α → E} {C : ℝ} [inst_3 : StrictConvexSpace ℝ E]\\n  [inst_4 : MeasureTheory.IsFiniteMeasure μ],\\n  (∀ᵐ (x : α) ∂μ, ‖f x‖ ≤ C) →\\n    f =ᶠ[MeasureTheory.Measure.ae μ] Function.const α (⨍ (x : α), f x ∂μ) ∨\\n      ‖∫ (x : α), f x ∂μ‖ < ENNReal.toReal (↑↑μ Set.univ) * C\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `E` is a strictly convex normed space and `f : α → E` is a function such that `‖f x‖ ≤ C`\\na.e., then either this function is a.e. equal to its average value, or the norm of its integral is\\nstrictly less than `(μ univ).toReal * C`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {β : Type u_2} [inst : LinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderClosedTopology α]\\n  [inst_3 : TopologicalSpace β] [inst_4 : Nonempty α] {f : β → α} {K : Set β},\\n  IsCompact K → ContinuousOn f K → BddBelow (f '' K)\",\n  \"isProp\": true,\n  \"docString\": \"A continuous function is bounded below on a compact set. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {C : ℝ} {f : ℂ → E} {z : ℂ},\\n  DiffContOnCl ℂ f (Set.Ioi 0 ×ℂ Set.Ioi 0) →\\n    (∃ c,\\n        c < 2 ∧\\n          ∃ B,\\n            f =O[Filter.comap (↑Complex.abs) Filter.atTop ⊓ Filter.principal (Set.Ioi 0 ×ℂ Set.Ioi 0)] fun z =>\\n              rexp (B * ↑Complex.abs z ^ c)) →\\n      (∀ (x : ℝ), 0 ≤ x → ‖f ↑x‖ ≤ C) → (∀ (x : ℝ), 0 ≤ x → ‖f (↑x * Complex.I)‖ ≤ C) → 0 ≤ z.re → 0 ≤ z.im → ‖f z‖ ≤ C\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Phragmen-Lindelöf principle** in the first quadrant. Let `f : ℂ → E` be a function such that\\n\\n* `f` is differentiable in the open first quadrant and is continuous on its closure;\\n* `‖f z‖` is bounded from above by `A * exp(B * (abs z) ^ c)` on the open first quadrant\\n  for some `c < 2`;\\n* `‖f z‖` is bounded from above by a constant `C` on the boundary of the first quadrant.\\n\\nThen `‖f z‖` is bounded from above by the same constant on the closed first quadrant. \"},\n {\"theorem\":\n  \"∀ (α : Type u) [inst : Preorder α] [inst_1 : Nonempty α] [inst_2 : NoMinOrder α] [inst_3 : NoMaxOrder α],\\n  ∃ f, StrictMono f\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `α` is a nonempty preorder with no minimal or maximal elements, then there exists a strictly\\nmonotone function `f : ℤ → α`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {β : Type u_2} {E : Type u_3} [inst : MeasurableSpace α] [inst_1 : MeasurableSpace β]\\n  {μ : MeasureTheory.Measure α} {ν : MeasureTheory.Measure β} [inst_2 : NormedAddCommGroup E]\\n  [inst_3 : MeasureTheory.SigmaFinite ν] [inst_4 : NormedSpace ℝ E] [inst_5 : CompleteSpace E]\\n  [inst_6 : MeasureTheory.SigmaFinite μ], Continuous fun f => ∫ (x : α), ∫ (y : β), ↑↑f (x, y) ∂ν ∂μ\",\n  \"isProp\": true,\n  \"docString\":\n  \"The map that sends an L¹-function `f : α × β → E` to `∫∫f` is continuous. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {f : ℂ → E},\\n  DiffContOnCl ℂ f (Set.Ioi 0 ×ℂ Set.Ioi 0) →\\n    (∃ c,\\n        c < 2 ∧\\n          ∃ B,\\n            f =O[Filter.comap (↑Complex.abs) Filter.atTop ⊓ Filter.principal (Set.Ioi 0 ×ℂ Set.Ioi 0)] fun z =>\\n              rexp (B * ↑Complex.abs z ^ c)) →\\n      (∀ (x : ℝ), 0 ≤ x → f ↑x = 0) →\\n        (∀ (x : ℝ), 0 ≤ x → f (↑x * Complex.I) = 0) → Set.EqOn f 0 {z | 0 ≤ z.re ∧ 0 ≤ z.im}\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Phragmen-Lindelöf principle** in the first quadrant. Let `f : ℂ → E` be a function such that\\n\\n* `f` is differentiable in the open first quadrant and is continuous on its closure;\\n* `‖f z‖` is bounded from above by `A * exp(B * (abs z) ^ c)` on the open first quadrant\\n  for some `A`, `B`, and `c < 2`;\\n* `f` is equal to zero on the boundary of the first quadrant.\\n\\nThen `f` is equal to zero on the closed first quadrant. \"},\n {\"theorem\":\n  \"∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type v} [inst_2 : NormedAddCommGroup F]\\n  [inst_3 : NormedSpace ℂ F] {f : E → F}, Differentiable ℂ f → Metric.Bounded (Set.range f) → ∀ (z w : E), f z = f w\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Liouville's theorem**: a complex differentiable bounded function `f : E → F` is a constant. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : CompleteSpace E] [inst_2 : NormedSpace ℝ E] {f : ℝ → E} {c : E}\\n  {a b : ℝ},\\n  IntervalIntegrable f MeasureTheory.volume a b →\\n    StronglyMeasurableAtFilter f (nhds b) →\\n      Filter.Tendsto f (nhds b ⊓ MeasureTheory.Measure.ae MeasureTheory.volume) (nhds c) →\\n        HasDerivAt (fun u => ∫ (x : ℝ) in a..u, f x) c b\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Fundamental theorem of calculus-1**: if `f : ℝ → E` is integrable on `a..b` and `f x` has a\\nfinite limit `c` almost surely at `b`, then `u ↦ ∫ x in a..u, f x` has derivative `c` at `b`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {E : α → Type u_2} {p : ENNReal} [inst : (i : α) → NormedAddCommGroup (E i)] {ι : Type u_3}\\n  {l : Filter ι} [inst_1 : Filter.NeBot l] [_i : Fact (1 ≤ p)] {F : ι → { x // x ∈ lp E p }},\\n  Metric.Bounded (Set.range F) → ∀ {f : (a : α) → E a}, Filter.Tendsto (id fun i => ↑(F i)) l (nhds f) → Memℓp f p\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` is the pointwise limit of a bounded sequence in `lp E p`, then `f` is in `lp E p`. \"},\n {\"theorem\":\n  \"∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {f : ℂ → E},\\n  Differentiable ℂ f → ∀ (z : ℂ), AnalyticAt ℂ f z\",\n  \"isProp\": true,\n  \"docString\":\n  \"A complex differentiable function `f : ℂ → E` is analytic at every point. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : CompleteSpace E] [inst_2 : NormedSpace ℝ E] {f : ℝ → E}\\n  {a b : ℝ},\\n  IntervalIntegrable f MeasureTheory.volume a b →\\n    StronglyMeasurableAtFilter f (nhds b) → ContinuousAt f b → HasDerivAt (fun u => ∫ (x : ℝ) in a..u, f x) (f b) b\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Fundamental theorem of calculus-1**: if `f : ℝ → E` is integrable on `a..b` and `f` is\\ncontinuous at `b`, then `u ↦ ∫ x in a..u, f x` has derivative `f b` at `b`. \"}]\n", "prompt_cons": "/-- A complex differentiable function `f : ℂ → E` is continuously differentiable at every point. -/\ntheorem ∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {f : ℂ → E},\n  Differentiable ℂ f → ∀ {n : ℕ∞}, ContDiff ℂ n f :=\n\n/-- If `E` is a nontrivial normed space over a nontrivially normed field `𝕜`, then `E` is unbounded:\nfor any `c : ℝ`, there exists a vector `x : E` with norm strictly greater than `c`. -/\ntheorem ∀ (𝕜 : Type u_2) (E : Type u_1) [inst : NontriviallyNormedField 𝕜] [inst_1 : NormedAddCommGroup E]\n  [inst : NormedSpace 𝕜 E] [inst : Nontrivial E] (c : ℝ), ∃ x, c < ‖x‖ :=\n\n/-- For any compact subset `K ⊆ X`, there exist some bounded continuous nonnegative\nfunctions f on X such that `f ≥ 1` on K. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X] (Λ : BoundedContinuousFunction X NNReal →ₗ[NNReal] NNReal)\n  (K : TopologicalSpace.Compacts X), Set.Nonempty (↑Λ '' {f | ∀ (x : X), x ∈ K → 1 ≤ ↑f x}) :=\n\n/-- If `f : ℂ → E` is complex differentiable on some open set `s`, then it is continuously\ndifferentiable on `s`. -/\ntheorem ∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {n : ℕ∞} {s : Set ℂ}\n  {f : ℂ → E}, DifferentiableOn ℂ f s → IsOpen s → ContDiffOn ℂ n f s :=\n\n/-- If `f : ℂ → E` is continuous on a closed ball of positive radius and is differentiable at all\nbut countably many points of the corresponding open ball, then it is analytic on the open ball with\ncoefficients of the power series given by Cauchy integral formulas. -/\ntheorem ∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {R : NNReal} {c : ℂ}\n  {f : ℂ → E} {s : Set ℂ},\n  Set.Countable s →\n    ContinuousOn f (Metric.closedBall c ↑R) →\n      (∀ (z : ℂ), z ∈ Metric.ball c ↑R \\ s → DifferentiableAt ℂ f z) →\n        0 < R → HasFPowerSeriesOnBall f (cauchyPowerSeries f c ↑R) c ↑R :=\n\n/-- If `E` is first countable, then every locally bounded linear map `E →ₛₗ[σ] F` is continuous. -/\ntheorem ∀ {𝕜 : Type u_2} {𝕜' : Type u_3} {E : Type u_4} {F : Type u_1} [inst : AddCommGroup E] [inst_1 : UniformSpace E]\n  [inst_2 : UniformAddGroup E] [inst_3 : AddCommGroup F] [inst_4 : UniformSpace F]\n  [inst_5 : TopologicalSpace.FirstCountableTopology E] [inst_6 : IsROrC 𝕜] [inst_7 : Module 𝕜 E]\n  [inst_8 : ContinuousSMul 𝕜 E] [inst_9 : IsROrC 𝕜'] [inst_10 : Module 𝕜' F] [inst_11 : ContinuousSMul 𝕜' F]\n  {σ : 𝕜 →+* 𝕜'} [inst_12 : UniformAddGroup F] (f : E →ₛₗ[σ] F),\n  (∀ (s : Set E), Bornology.IsVonNBounded 𝕜 s → Bornology.IsVonNBounded 𝕜' (↑f '' s)) → Continuous ↑f :=\n\n/-- A continuous function is bounded above on a compact set. -/\ntheorem ∀ {α : Type u_1} {β : Type u_2} [inst : LinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderClosedTopology α]\n  [inst_3 : TopologicalSpace β] [inst_4 : Nonempty α] {f : β → α} {K : Set β},\n  IsCompact K → ContinuousOn f K → BddAbove (f '' K) :=\n\n/-- Let `f : ℝ → ℝ` be a differentiable function. If `f'` is nonnegative, then\n`f` is a monotone function. -/\ntheorem ∀ {f : ℝ → ℝ}, Differentiable ℝ f → (∀ (x : ℝ), 0 ≤ deriv f x) → Monotone f :=\n\n/-- If `f : α → E` is an integrable function, then either it is a.e. equal to the constant\n`⨍ x, f x ∂μ` or there exists a measurable set such that `μ t ≠ 0`, `μ tᶜ ≠ 0`, and the average\nvalues of `f` over `t` and `tᶜ` are different. -/\ntheorem ∀ {α : Type u_1} {E : Type u_2} {m0 : MeasurableSpace α} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E]\n  [inst_2 : CompleteSpace E] {μ : MeasureTheory.Measure α} {f : α → E} [inst_3 : MeasureTheory.IsFiniteMeasure μ],\n  MeasureTheory.Integrable f →\n    f =ᶠ[MeasureTheory.Measure.ae μ] Function.const α (⨍ (x : α), f x ∂μ) ∨\n      ∃ t, MeasurableSet t ∧ ↑↑μ t ≠ 0 ∧ ↑↑μ tᶜ ≠ 0 ∧ ⨍ (x : α) in t, f x ∂μ ≠ ⨍ (x : α) in tᶜ, f x ∂μ :=\n\n/-- If `E` is a strictly convex normed space and `f : α → E` is a function such that `‖f x‖ ≤ C`\na.e., then either this function is a.e. equal to its average value, or the norm of its integral is\nstrictly less than `(μ univ).toReal * C`. -/\ntheorem ∀ {α : Type u_2} {E : Type u_1} {m0 : MeasurableSpace α} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E]\n  [inst_2 : CompleteSpace E] {μ : MeasureTheory.Measure α} {f : α → E} {C : ℝ} [inst_3 : StrictConvexSpace ℝ E]\n  [inst_4 : MeasureTheory.IsFiniteMeasure μ],\n  (∀ᵐ (x : α) ∂μ, ‖f x‖ ≤ C) →\n    f =ᶠ[MeasureTheory.Measure.ae μ] Function.const α (⨍ (x : α), f x ∂μ) ∨\n      ‖∫ (x : α), f x ∂μ‖ < ENNReal.toReal (↑↑μ Set.univ) * C :=\n\n/-- A continuous function is bounded below on a compact set. -/\ntheorem ∀ {α : Type u_1} {β : Type u_2} [inst : LinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderClosedTopology α]\n  [inst_3 : TopologicalSpace β] [inst_4 : Nonempty α] {f : β → α} {K : Set β},\n  IsCompact K → ContinuousOn f K → BddBelow (f '' K) :=\n\n/-- **Phragmen-Lindelöf principle** in the first quadrant. Let `f : ℂ → E` be a function such that\n\n* `f` is differentiable in the open first quadrant and is continuous on its closure;\n* `‖f z‖` is bounded from above by `A * exp(B * (abs z) ^ c)` on the open first quadrant\n  for some `c < 2`;\n* `‖f z‖` is bounded from above by a constant `C` on the boundary of the first quadrant.\n\nThen `‖f z‖` is bounded from above by the same constant on the closed first quadrant. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {C : ℝ} {f : ℂ → E} {z : ℂ},\n  DiffContOnCl ℂ f (Set.Ioi 0 ×ℂ Set.Ioi 0) →\n    (∃ c,\n        c < 2 ∧\n          ∃ B,\n            f =O[Filter.comap (↑Complex.abs) Filter.atTop ⊓ Filter.principal (Set.Ioi 0 ×ℂ Set.Ioi 0)] fun z =>\n              rexp (B * ↑Complex.abs z ^ c)) →\n      (∀ (x : ℝ), 0 ≤ x → ‖f ↑x‖ ≤ C) → (∀ (x : ℝ), 0 ≤ x → ‖f (↑x * Complex.I)‖ ≤ C) → 0 ≤ z.re → 0 ≤ z.im → ‖f z‖ ≤ C :=\n\n/-- If `α` is a nonempty preorder with no minimal or maximal elements, then there exists a strictly\nmonotone function `f : ℤ → α`. -/\ntheorem ∀ (α : Type u) [inst : Preorder α] [inst_1 : Nonempty α] [inst_2 : NoMinOrder α] [inst_3 : NoMaxOrder α],\n  ∃ f, StrictMono f :=\n\n/-- The map that sends an L¹-function `f : α × β → E` to `∫∫f` is continuous. -/\ntheorem ∀ {α : Type u_1} {β : Type u_2} {E : Type u_3} [inst : MeasurableSpace α] [inst_1 : MeasurableSpace β]\n  {μ : MeasureTheory.Measure α} {ν : MeasureTheory.Measure β} [inst_2 : NormedAddCommGroup E]\n  [inst_3 : MeasureTheory.SigmaFinite ν] [inst_4 : NormedSpace ℝ E] [inst_5 : CompleteSpace E]\n  [inst_6 : MeasureTheory.SigmaFinite μ], Continuous fun f => ∫ (x : α), ∫ (y : β), ↑↑f (x, y) ∂ν ∂μ :=\n\n/-- **Phragmen-Lindelöf principle** in the first quadrant. Let `f : ℂ → E` be a function such that\n\n* `f` is differentiable in the open first quadrant and is continuous on its closure;\n* `‖f z‖` is bounded from above by `A * exp(B * (abs z) ^ c)` on the open first quadrant\n  for some `A`, `B`, and `c < 2`;\n* `f` is equal to zero on the boundary of the first quadrant.\n\nThen `f` is equal to zero on the closed first quadrant. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {f : ℂ → E},\n  DiffContOnCl ℂ f (Set.Ioi 0 ×ℂ Set.Ioi 0) →\n    (∃ c,\n        c < 2 ∧\n          ∃ B,\n            f =O[Filter.comap (↑Complex.abs) Filter.atTop ⊓ Filter.principal (Set.Ioi 0 ×ℂ Set.Ioi 0)] fun z =>\n              rexp (B * ↑Complex.abs z ^ c)) →\n      (∀ (x : ℝ), 0 ≤ x → f ↑x = 0) →\n        (∀ (x : ℝ), 0 ≤ x → f (↑x * Complex.I) = 0) → Set.EqOn f 0 {z | 0 ≤ z.re ∧ 0 ≤ z.im} :=\n\n/-- **Liouville's theorem**: a complex differentiable bounded function `f : E → F` is a constant. -/\ntheorem ∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type v} [inst_2 : NormedAddCommGroup F]\n  [inst_3 : NormedSpace ℂ F] {f : E → F}, Differentiable ℂ f → Metric.Bounded (Set.range f) → ∀ (z w : E), f z = f w :=\n\n/-- **Fundamental theorem of calculus-1**: if `f : ℝ → E` is integrable on `a..b` and `f x` has a\nfinite limit `c` almost surely at `b`, then `u ↦ ∫ x in a..u, f x` has derivative `c` at `b`. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : CompleteSpace E] [inst_2 : NormedSpace ℝ E] {f : ℝ → E} {c : E}\n  {a b : ℝ},\n  IntervalIntegrable f MeasureTheory.volume a b →\n    StronglyMeasurableAtFilter f (nhds b) →\n      Filter.Tendsto f (nhds b ⊓ MeasureTheory.Measure.ae MeasureTheory.volume) (nhds c) →\n        HasDerivAt (fun u => ∫ (x : ℝ) in a..u, f x) c b :=\n\n/-- If `f` is the pointwise limit of a bounded sequence in `lp E p`, then `f` is in `lp E p`. -/\ntheorem ∀ {α : Type u_1} {E : α → Type u_2} {p : ENNReal} [inst : (i : α) → NormedAddCommGroup (E i)] {ι : Type u_3}\n  {l : Filter ι} [inst_1 : Filter.NeBot l] [_i : Fact (1 ≤ p)] {F : ι → { x // x ∈ lp E p }},\n  Metric.Bounded (Set.range F) → ∀ {f : (a : α) → E a}, Filter.Tendsto (id fun i => ↑(F i)) l (nhds f) → Memℓp f p :=\n\n/-- A complex differentiable function `f : ℂ → E` is analytic at every point. -/\ntheorem ∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {f : ℂ → E},\n  Differentiable ℂ f → ∀ (z : ℂ), AnalyticAt ℂ f z :=\n\n/-- **Fundamental theorem of calculus-1**: if `f : ℝ → E` is integrable on `a..b` and `f` is\ncontinuous at `b`, then `u ↦ ∫ x in a..u, f x` has derivative `f b` at `b`. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : CompleteSpace E] [inst_2 : NormedSpace ℝ E] {f : ℝ → E}\n  {a b : ℝ},\n  IntervalIntegrable f MeasureTheory.volume a b →\n    StronglyMeasurableAtFilter f (nhds b) → ContinuousAt f b → HasDerivAt (fun u => ∫ (x : ℝ) in a..u, f x) (f b) b :=\n\n/-- Let `E` be a bounded set in `ℝ^1`. Prove that there exists a real function `f` such that `f` is uniformly continuous and is not bounded on `E`. -/\ntheorem", "choices": ["∀ {E : Set ℝ} (hE : Metric.Bounded E),\n  ∃ (f : ℝ → ℝ), UniformContinuous f ∧ ∀ (M : ℝ), ∃ (x : ℝ) (H : x ∈ E), M < f x ", "∀ (E : Set ℝ), Bounded E → ∃ (f : ℝ → ℝ), UniformContinuous f ∧ ∀ K, Bounded (f '' E) → Ennreal.ofReal K < Sup (f '' E) ", "∃ (f : ℝ → ℝ), UniformContinuous f ∧ ∀ (M : ℝ), ∃ (x : ℝ), x ∈ E ∧ M < |f x| ", "∃ (f : ℝ → ℝ), UniformContinuous f ∧ ¬ BddAbove (f '' E) ", "∃ (f : ℝ → ℝ), UniformContinuous f ∧ (∀ (x : ℝ), x ∈ E → ¬Metric.Bounded (Set.Range f)) ", "∃ (f : ℝ → ℝ), UniformContinuous f ∧ ∀ (M : ℝ), ∃ (x : ℝ), x ∈ E ∧ M < abs (f x) ", "∀ (E : Set ℝ), Bounded E → ∃ (f : ℝ → ℝ), ∀ (ε : ℝ), ε > 0 → UniformContinuousOn f E ∧ ¬Bounded (f '' E) ", "∃ (f : ℝ → ℝ), UniformContinuous f ∧ (∀ (x : ℝ), x ∈ E → NotBounded f x) ", "∃ (f : ℝ → ℝ), UniformContinuous f ∧ ¬BoundedOn E f ", "∀ {E : Set ℝ}, Metric.Bounded E → ∃ (f : ℝ → ℝ), UniformContinuous f ∧ ∀ (C : ℝ), ∃ x ∈ E, C < |f x| "]}
{"docString": "A uniformly continuous function of a uniformly continuous function is uniformly continuous.", "prompts": "[{\"theorem\":\n  \"∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {p : Filter ι}\\n  [inst_1 : TopologicalSpace α],\\n  TendstoUniformly F f p → (∀ᶠ (n : ι) in p, Continuous (F n)) → ∀ [inst_2 : Filter.NeBot p], Continuous f\",\n  \"isProp\": true,\n  \"docString\": \"A uniform limit of continuous functions is continuous. \"},\n {\"theorem\":\n  \"∀ {ι : Type u_1} {α : Type u_2} {β : Type u_3} [inst : UniformSpace α] [inst_1 : UniformSpace β] {F : ι → β → α},\\n  UniformEquicontinuous F → ∀ (i : ι), UniformContinuous (F i)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Each function of a uniformly equicontinuous family is uniformly continuous. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : UniformSpace β] {f : α → β} [inst_1 : TopologicalSpace α],\\n  (∀ (u : Set (β × β)), u ∈ uniformity β → ∃ F, Continuous F ∧ ∀ (y : α), (f y, F y) ∈ u) → Continuous f\",\n  \"isProp\": true,\n  \"docString\":\n  \"A function which can be uniformly approximated by continuous functions is continuous. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {p : Filter ι}\\n  [inst_1 : TopologicalSpace α],\\n  TendstoLocallyUniformly F f p → (∀ᶠ (n : ι) in p, Continuous (F n)) → ∀ [inst_2 : Filter.NeBot p], Continuous f\",\n  \"isProp\": true,\n  \"docString\":\n  \"A locally uniform limit of continuous functions is continuous. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : UniformSpace β] {f : α → β} [inst_1 : TopologicalSpace α],\\n  (∀ (x : α) (u : Set (β × β)),\\n      u ∈ uniformity β → ∃ t, t ∈ nhds x ∧ ∃ F, ContinuousAt F x ∧ ∀ (y : α), y ∈ t → (f y, F y) ∈ u) →\\n    Continuous f\",\n  \"isProp\": true,\n  \"docString\":\n  \"A function which can be locally uniformly approximated by continuous functions is continuous. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {β : Type u_1} {ι : Type u_3} {m : MeasurableSpace α} (μ : MeasureTheory.Measure α)\\n  [inst : NormedAddCommGroup β] {p : ENNReal} {g : α → β},\\n  1 ≤ p → p ≠ ⊤ → MeasureTheory.Memℒp g p → MeasureTheory.UnifIntegrable (fun x => g) p μ\",\n  \"isProp\": true,\n  \"docString\": \"A constant function is uniformly integrable. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {β : Type u_2} [inst : UniformSpace α] [inst_1 : UniformSpace β] (self : α ≃ᵤ β),\\n  UniformContinuous self.toFun\",\n  \"isProp\": true,\n  \"docString\": \"Uniform continuity of the function \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : UniformSpace β] {f : α → β} {s : Set α} [inst_1 : TopologicalSpace α],\\n  (∀ (u : Set (β × β)), u ∈ uniformity β → ∃ F, ContinuousOn F s ∧ ∀ (y : α), y ∈ s → (f y, F y) ∈ u) → ContinuousOn f s\",\n  \"isProp\": true,\n  \"docString\":\n  \"A function which can be uniformly approximated by functions which are continuous on a set\\nis continuous on this set. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : UniformSpace β] {f : α → β} {s : Set α} [inst_1 : TopologicalSpace α],\\n  (∀ (x : α),\\n      x ∈ s →\\n        ∀ (u : Set (β × β)),\\n          u ∈ uniformity β →\\n            ∃ t, t ∈ nhdsWithin x s ∧ ∃ F, ContinuousWithinAt F s x ∧ ∀ (y : α), y ∈ t → (f y, F y) ∈ u) →\\n    ContinuousOn f s\",\n  \"isProp\": true,\n  \"docString\":\n  \"A function which can be locally uniformly approximated by functions which are continuous\\non a set is continuous on this set. \"},\n {\"theorem\":\n  \"∀ {α : Type u_3} {β : Type u_2} [inst : UniformSpace α] [inst_1 : UniformSpace β] {ι : Type u_1} {F : ι → β → α}\\n  [inst_2 : CompactSpace β], Equicontinuous F → UniformEquicontinuous F\",\n  \"isProp\": true,\n  \"docString\":\n  \"An equicontinuous family of functions defined on a compact uniform space is automatically\\nuniformly equicontinuous. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : UniformSpace β] {f : α → β} {x : α} [inst_1 : TopologicalSpace α],\\n  (∀ (u : Set (β × β)),\\n      u ∈ uniformity β → ∃ t, t ∈ nhds x ∧ ∃ F, ContinuousAt F x ∧ ∀ (y : α), y ∈ t → (f y, F y) ∈ u) →\\n    ContinuousAt f x\",\n  \"isProp\": true,\n  \"docString\":\n  \"A function which can be locally uniformly approximated by functions which are continuous at\\na point is continuous at this point. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {s : Set α} {p : Filter ι}\\n  [inst_1 : TopologicalSpace α],\\n  TendstoUniformlyOn F f p s → (∀ᶠ (n : ι) in p, ContinuousOn (F n) s) → ∀ [inst_2 : Filter.NeBot p], ContinuousOn f s\",\n  \"isProp\": true,\n  \"docString\":\n  \"A uniform limit on a set of functions which are continuous on this set is itself continuous\\non this set. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] [inst_2 : SequentialSpace X]\\n  {f : X → Y}, SeqContinuous f → Continuous f\",\n  \"isProp\": true,\n  \"docString\":\n  \"A sequentially continuous function defined on a sequential space is continuous. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {β : Type u_2} [inst : LinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderClosedTopology α]\\n  [inst_3 : TopologicalSpace β] [inst_4 : Nonempty α] {f : β → α} {K : Set β},\\n  IsCompact K → ContinuousOn f K → BddAbove (f '' K)\",\n  \"isProp\": true,\n  \"docString\": \"A continuous function is bounded above on a compact set. \"},\n {\"theorem\":\n  \"∀ {ι : Type u_1} {X : Type u_2} {α : Type u_3} [inst : TopologicalSpace X] [inst_1 : UniformSpace α] {F : ι → X → α},\\n  Equicontinuous F → ∀ (i : ι), Continuous (F i)\",\n  \"isProp\": true,\n  \"docString\": \"Each function of an equicontinuous family is continuous. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {s : Set α} {p : Filter ι}\\n  [inst_1 : TopologicalSpace α],\\n  TendstoLocallyUniformlyOn F f p s →\\n    (∀ᶠ (n : ι) in p, ContinuousOn (F n) s) → ∀ [inst_2 : Filter.NeBot p], ContinuousOn f s\",\n  \"isProp\": true,\n  \"docString\":\n  \"A locally uniform limit on a set of functions which are continuous on this set is itself\\ncontinuous on this set. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : UniformSpace β] {f : α → β} {s : Set α} {x : α} [inst_1 : TopologicalSpace α],\\n  x ∈ s →\\n    (∀ (u : Set (β × β)),\\n        u ∈ uniformity β →\\n          ∃ t, t ∈ nhdsWithin x s ∧ ∃ F, ContinuousWithinAt F s x ∧ ∀ (y : α), y ∈ t → (f y, F y) ∈ u) →\\n      ContinuousWithinAt f s x\",\n  \"isProp\": true,\n  \"docString\":\n  \"A function which can be locally uniformly approximated by functions which are continuous\\nwithin a set at a point is continuous within this set at this point. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {β : Type u_2} [inst : UniformSpace α] [inst_1 : UniformSpace β] {A : Set (β → α)},\\n  Set.UniformEquicontinuous A → Set.UniformEquicontinuous (closure A)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a set of functions is uniformly equicontinuous, its closure for the product topology is also\\nuniformly equicontinuous. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {β : Type u_1} {ι : Type u_3} {m : MeasurableSpace α} {μ : MeasureTheory.Measure α}\\n  [inst : NormedAddCommGroup β] {p : ENNReal} {g : α → β},\\n  1 ≤ p → p ≠ ⊤ → MeasureTheory.Memℒp g p → MeasureTheory.UniformIntegrable (fun x => g) p μ\",\n  \"isProp\": true,\n  \"docString\":\n  \"A constant sequence of functions is uniformly integrable in the probability sense. \"},\n {\"theorem\":\n  \"∀ {ι : Type u_1} {α : Type u_2} {β : Type u_3} [inst : UniformSpace α] [inst_1 : UniformSpace β] {F : ι → β → α},\\n  UniformEquicontinuous F → Equicontinuous F\",\n  \"isProp\": true,\n  \"docString\": \"Uniform equicontinuity implies equicontinuity. \"}]\n", "prompt_cons": "/-- A uniform limit of continuous functions is continuous. -/\ntheorem ∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {p : Filter ι}\n  [inst_1 : TopologicalSpace α],\n  TendstoUniformly F f p → (∀ᶠ (n : ι) in p, Continuous (F n)) → ∀ [inst_2 : Filter.NeBot p], Continuous f :=\n\n/-- Each function of a uniformly equicontinuous family is uniformly continuous. -/\ntheorem ∀ {ι : Type u_1} {α : Type u_2} {β : Type u_3} [inst : UniformSpace α] [inst_1 : UniformSpace β] {F : ι → β → α},\n  UniformEquicontinuous F → ∀ (i : ι), UniformContinuous (F i) :=\n\n/-- A function which can be uniformly approximated by continuous functions is continuous. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : UniformSpace β] {f : α → β} [inst_1 : TopologicalSpace α],\n  (∀ (u : Set (β × β)), u ∈ uniformity β → ∃ F, Continuous F ∧ ∀ (y : α), (f y, F y) ∈ u) → Continuous f :=\n\n/-- A locally uniform limit of continuous functions is continuous. -/\ntheorem ∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {p : Filter ι}\n  [inst_1 : TopologicalSpace α],\n  TendstoLocallyUniformly F f p → (∀ᶠ (n : ι) in p, Continuous (F n)) → ∀ [inst_2 : Filter.NeBot p], Continuous f :=\n\n/-- A function which can be locally uniformly approximated by continuous functions is continuous. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : UniformSpace β] {f : α → β} [inst_1 : TopologicalSpace α],\n  (∀ (x : α) (u : Set (β × β)),\n      u ∈ uniformity β → ∃ t, t ∈ nhds x ∧ ∃ F, ContinuousAt F x ∧ ∀ (y : α), y ∈ t → (f y, F y) ∈ u) →\n    Continuous f :=\n\n/-- A constant function is uniformly integrable. -/\ntheorem ∀ {α : Type u_2} {β : Type u_1} {ι : Type u_3} {m : MeasurableSpace α} (μ : MeasureTheory.Measure α)\n  [inst : NormedAddCommGroup β] {p : ENNReal} {g : α → β},\n  1 ≤ p → p ≠ ⊤ → MeasureTheory.Memℒp g p → MeasureTheory.UnifIntegrable (fun x => g) p μ :=\n\n/-- Uniform continuity of the function -/\ntheorem ∀ {α : Type u_1} {β : Type u_2} [inst : UniformSpace α] [inst_1 : UniformSpace β] (self : α ≃ᵤ β),\n  UniformContinuous self.toFun :=\n\n/-- A function which can be uniformly approximated by functions which are continuous on a set\nis continuous on this set. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : UniformSpace β] {f : α → β} {s : Set α} [inst_1 : TopologicalSpace α],\n  (∀ (u : Set (β × β)), u ∈ uniformity β → ∃ F, ContinuousOn F s ∧ ∀ (y : α), y ∈ s → (f y, F y) ∈ u) → ContinuousOn f s :=\n\n/-- A function which can be locally uniformly approximated by functions which are continuous\non a set is continuous on this set. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : UniformSpace β] {f : α → β} {s : Set α} [inst_1 : TopologicalSpace α],\n  (∀ (x : α),\n      x ∈ s →\n        ∀ (u : Set (β × β)),\n          u ∈ uniformity β →\n            ∃ t, t ∈ nhdsWithin x s ∧ ∃ F, ContinuousWithinAt F s x ∧ ∀ (y : α), y ∈ t → (f y, F y) ∈ u) →\n    ContinuousOn f s :=\n\n/-- An equicontinuous family of functions defined on a compact uniform space is automatically\nuniformly equicontinuous. -/\ntheorem ∀ {α : Type u_3} {β : Type u_2} [inst : UniformSpace α] [inst_1 : UniformSpace β] {ι : Type u_1} {F : ι → β → α}\n  [inst_2 : CompactSpace β], Equicontinuous F → UniformEquicontinuous F :=\n\n/-- A function which can be locally uniformly approximated by functions which are continuous at\na point is continuous at this point. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : UniformSpace β] {f : α → β} {x : α} [inst_1 : TopologicalSpace α],\n  (∀ (u : Set (β × β)),\n      u ∈ uniformity β → ∃ t, t ∈ nhds x ∧ ∃ F, ContinuousAt F x ∧ ∀ (y : α), y ∈ t → (f y, F y) ∈ u) →\n    ContinuousAt f x :=\n\n/-- A uniform limit on a set of functions which are continuous on this set is itself continuous\non this set. -/\ntheorem ∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {s : Set α} {p : Filter ι}\n  [inst_1 : TopologicalSpace α],\n  TendstoUniformlyOn F f p s → (∀ᶠ (n : ι) in p, ContinuousOn (F n) s) → ∀ [inst_2 : Filter.NeBot p], ContinuousOn f s :=\n\n/-- A sequentially continuous function defined on a sequential space is continuous. -/\ntheorem ∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] [inst_2 : SequentialSpace X]\n  {f : X → Y}, SeqContinuous f → Continuous f :=\n\n/-- A continuous function is bounded above on a compact set. -/\ntheorem ∀ {α : Type u_1} {β : Type u_2} [inst : LinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderClosedTopology α]\n  [inst_3 : TopologicalSpace β] [inst_4 : Nonempty α] {f : β → α} {K : Set β},\n  IsCompact K → ContinuousOn f K → BddAbove (f '' K) :=\n\n/-- Each function of an equicontinuous family is continuous. -/\ntheorem ∀ {ι : Type u_1} {X : Type u_2} {α : Type u_3} [inst : TopologicalSpace X] [inst_1 : UniformSpace α] {F : ι → X → α},\n  Equicontinuous F → ∀ (i : ι), Continuous (F i) :=\n\n/-- A locally uniform limit on a set of functions which are continuous on this set is itself\ncontinuous on this set. -/\ntheorem ∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {s : Set α} {p : Filter ι}\n  [inst_1 : TopologicalSpace α],\n  TendstoLocallyUniformlyOn F f p s →\n    (∀ᶠ (n : ι) in p, ContinuousOn (F n) s) → ∀ [inst_2 : Filter.NeBot p], ContinuousOn f s :=\n\n/-- A function which can be locally uniformly approximated by functions which are continuous\nwithin a set at a point is continuous within this set at this point. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : UniformSpace β] {f : α → β} {s : Set α} {x : α} [inst_1 : TopologicalSpace α],\n  x ∈ s →\n    (∀ (u : Set (β × β)),\n        u ∈ uniformity β →\n          ∃ t, t ∈ nhdsWithin x s ∧ ∃ F, ContinuousWithinAt F s x ∧ ∀ (y : α), y ∈ t → (f y, F y) ∈ u) →\n      ContinuousWithinAt f s x :=\n\n/-- If a set of functions is uniformly equicontinuous, its closure for the product topology is also\nuniformly equicontinuous. -/\ntheorem ∀ {α : Type u_1} {β : Type u_2} [inst : UniformSpace α] [inst_1 : UniformSpace β] {A : Set (β → α)},\n  Set.UniformEquicontinuous A → Set.UniformEquicontinuous (closure A) :=\n\n/-- A constant sequence of functions is uniformly integrable in the probability sense. -/\ntheorem ∀ {α : Type u_2} {β : Type u_1} {ι : Type u_3} {m : MeasurableSpace α} {μ : MeasureTheory.Measure α}\n  [inst : NormedAddCommGroup β] {p : ENNReal} {g : α → β},\n  1 ≤ p → p ≠ ⊤ → MeasureTheory.Memℒp g p → MeasureTheory.UniformIntegrable (fun x => g) p μ :=\n\n/-- Uniform equicontinuity implies equicontinuity. -/\ntheorem ∀ {ι : Type u_1} {α : Type u_2} {β : Type u_3} [inst : UniformSpace α] [inst_1 : UniformSpace β] {F : ι → β → α},\n  UniformEquicontinuous F → Equicontinuous F :=\n\n/-- A uniformly continuous function of a uniformly continuous function is uniformly continuous. -/\ntheorem", "choices": ["∀ {α : Type u_1} {β : Type u_2} {γ : Type u_3} [inst : UniformSpace α] [inst_1 : UniformSpace β] [inst_2 : UniformSpace γ]\n  {g : α → β} {f : β → γ},\n  UniformContinuous g → UniformContinuous f → UniformContinuous (f ∘ g) ", "∀ {α : Type u_1} {β : Type u_2} {γ : Type u_3} [inst : UniformSpace α] [inst_1 : UniformSpace β] [inst_2 : UniformSpace γ]\n  {f : α → β} {g : β → γ}, UniformContinuous f → UniformContinuous g → UniformContinuous (g ∘ f) ", "∀ {α : Type u_1} {β : Type u_2} {γ : Type u_3} [inst : UniformSpace α] [inst_1 : UniformSpace β] [inst_2 : UniformSpace γ]\n  {f : α → β} {g : β → γ},\n  UniformContinuous f → UniformContinuous g → UniformContinuous (g ∘ f) ", "∀ {α : Type u_1} {β : Type u_2} {γ : Type u_3} [inst : UniformSpace α] [inst_1 : UniformSpace β] [inst_2 : UniformSpace γ]\n  (g : β → γ) (f : α → β),\n  UniformContinuous g → UniformContinuous f → UniformContinuous (g ∘ f) ", "∀ {α : Type u_1} {β : Type u_2} {γ : Type u_3} [inst : UniformSpace α] [inst_1 : UniformSpace β] [inst_2 : UniformSpace γ]\n  {f : α → β} {g : β → γ}, UniformContinuous f → UniformContinuous g → UniformContinuous (g ∘ f) ", "∀ {α : Type u_1} {β : Type u_2} {γ : Type u_3} [inst : UniformSpace α] [inst_1 : UniformSpace β] [inst_2 : UniformSpace γ]\n  (f : α → β) (g : β → γ), UniformContinuous f → UniformContinuous g → UniformContinuous (g ∘ f) ", "∀ {α : Type u_1} {β : Type u_2} {γ : Type u_3} [inst : UniformSpace α] [inst_1 : UniformSpace β] [inst_2 : UniformSpace γ]\n  {f : α → β} {g : β → γ}, UniformContinuous f → UniformContinuous g → UniformContinuous (g ∘ f) ", "forall {α : Type u_1} {β : Type u_2} {γ : Type u_3} [inst : UniformSpace α] [inst_1 : UniformSpace β] [inst_2 : UniformSpace γ]\n  (f : α → β) (g : β → γ),\n  UniformContinuous f → UniformContinuous g → UniformContinuous (g ∘ f) ", "∀ {α : Type u_1} {β : Type u_2} {γ : Type u_3} [inst : UniformSpace α] [inst_1 : UniformSpace β] [inst_2 : UniformSpace γ]\n  {f : α → β} {g : β → γ},\n  UniformContinuous f → UniformContinuous g → UniformContinuous (g ∘ f) ", "∀ {α : Type u_1} {β : Type u_2} {γ : Type u_3} [inst : UniformSpace α] [inst_1 : UniformSpace β] [inst_2 : UniformSpace γ]\n  {f : α → β} {g : β → γ}, UniformContinuous f → UniformContinuous g → UniformContinuous (g ∘ f) "]}
{"docString": "Suppose `f` is a real function with domain `ℝ^1` which has the intermediate value property: if `f(a) < c < f(b)`, then `f(x) = c` for some `x` between `a` and `b`. Suppose also, for every rational `r`, that the set of all `x` with `f(x) = r` is closed. Prove that `f` is continuous.", "prompts": "[{\"theorem\":\n  \"∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {c : ℂ} {r R : ℝ},\\n  0 < r →\\n    r ≤ R →\\n      ∀ {f : ℂ → E} {s : Set ℂ},\\n        Set.Countable s →\\n          ContinuousOn f (Metric.closedBall c R \\\\ Metric.ball c r) →\\n            (∀ (z : ℂ), z ∈ (Metric.ball c R \\\\ Metric.closedBall c r) \\\\ s → DifferentiableAt ℂ f z) →\\n              (∮ (z : ℂ) in C(c, R), (z - c)⁻¹ • f z) = ∮ (z : ℂ) in C(c, r), (z - c)⁻¹ • f z\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f : ℂ → E` is continuous the closed annulus `r ≤ ‖z - c‖ ≤ R`, `0 < r ≤ R`, and is complex\\ndifferentiable at all but countably many points of its interior, then the integrals of\\n`f z / (z - c)` (formally, `(z - c)⁻¹ • f z`) over the circles `‖z - c‖ = r` and `‖z - c‖ = R` are\\nequal to each other. \"},\n {\"theorem\":\n  \"∀ (f : ℝ → ℝ) {a b : ℝ},\\n  a < b → ContinuousOn f (Set.Icc a b) → f a = f b → ∃ c, c ∈ Set.Ioo a b ∧ IsExtrOn f (Set.Icc a b) c\",\n  \"isProp\": true,\n  \"docString\":\n  \"A continuous function on a closed interval with `f a = f b` takes either its maximum\\nor its minimum value at a point in the interior of the interval. \"},\n {\"theorem\":\n  \"∀ {f : ℝ → ℝ} {a b : ℝ},\\n  IntervalIntegrable f MeasureTheory.volume a b →\\n    (∀ (x : ℝ), x ∈ Set.Ioo a b → 0 < f x) → a < b → 0 < ∫ (x : ℝ) in a..b, f x\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f : ℝ → ℝ` is integrable on `(a, b]` for real numbers `a < b`, and positive on the interior\\nof the interval, then its integral over `a..b` is strictly positive. \"},\n {\"theorem\":\n  \"∀ {f g : ℝ → ℝ} {a b : ℝ},\\n  a < b →\\n    ContinuousOn f (Set.Icc a b) →\\n      ContinuousOn g (Set.Icc a b) →\\n        (∀ (x : ℝ), x ∈ Set.Ioc a b → f x ≤ g x) →\\n          (∃ c, c ∈ Set.Icc a b ∧ f c < g c) → ∫ (x : ℝ) in a..b, f x < ∫ (x : ℝ) in a..b, g x\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` and `g` are continuous on `[a, b]`, `a < b`, `f x ≤ g x` on this interval, and\\n`f c < g c` at some point `c ∈ [a, b]`, then `∫ x in a..b, f x < ∫ x in a..b, g x`. \"},\n {\"theorem\":\n  \"∀ (f : ℝ → ℝ) {a b : ℝ}, a < b → ContinuousOn f (Set.Icc a b) → f a = f b → ∃ c, c ∈ Set.Ioo a b ∧ IsLocalExtr f c\",\n  \"isProp\": true,\n  \"docString\":\n  \"A continuous function on a closed interval with `f a = f b` has a local extremum at some\\npoint of the corresponding open interval. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {β : Type u_2} [inst : LinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderTopology α]\\n  [inst_3 : LinearOrder β] [inst_4 : TopologicalSpace β] [inst_5 : OrderTopology β] {f : α → β} {s : Set α} {a : α},\\n  MonotoneOn f s →\\n    s ∈ nhds a →\\n      (∀ (b : β), b < f a → ∃ c, c ∈ s ∧ f c ∈ Set.Ioo b (f a)) →\\n        (∀ (b : β), b > f a → ∃ c, c ∈ s ∧ f c ∈ Set.Ioo (f a) b) → ContinuousAt f a\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` is a monotone function on a neighborhood of `a` and the image of this neighborhood under\\n`f` meets every interval `(b, f a)`, `b < f a`, and every interval `(f a, b)`, `b > f a`, then `f`\\nis continuous at `a`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {β : Type u_2} [inst : LinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderClosedTopology α]\\n  [inst_3 : TopologicalSpace β] [inst_4 : Nonempty α] {f : β → α} {K : Set β},\\n  IsCompact K → ContinuousOn f K → BddBelow (f '' K)\",\n  \"isProp\": true,\n  \"docString\": \"A continuous function is bounded below on a compact set. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {β : Type u_2} [inst : LinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderTopology α]\\n  [inst_3 : LinearOrder β] [inst_4 : TopologicalSpace β] [inst_5 : OrderTopology β] {f : α → β} {s : Set α} {a : α},\\n  StrictMonoOn f s →\\n    s ∈ nhdsWithin a (Set.Iic a) →\\n      (∀ (b : β), b < f a → ∃ c, c ∈ s ∧ f c ∈ Set.Ico b (f a)) → ContinuousWithinAt f (Set.Iic a) a\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` is a strictly monotone function on a left neighborhood of `a` and the image of this\\nneighborhood under `f` meets every interval `[b, f a)`, `b < f a`, then `f` is continuous at `a`\\nfrom the left.\\n\\nThe assumption `hfs : ∀ b < f a, ∃ c ∈ s, f c ∈ Ico b (f a)` is required because otherwise the\\nfunction `f : ℝ → ℝ` given by `f x = if x < 0 then x else x + 1` would be a counter-example at\\n`a = 0`. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : CompleteSpace E] [inst_2 : NormedSpace ℝ E] {f : ℝ → E} {c : E}\\n  {a b : ℝ},\\n  IntervalIntegrable f MeasureTheory.volume a b →\\n    StronglyMeasurableAtFilter f (nhds b) →\\n      Filter.Tendsto f (nhds b ⊓ MeasureTheory.Measure.ae MeasureTheory.volume) (nhds c) →\\n        HasDerivAt (fun u => ∫ (x : ℝ) in a..u, f x) c b\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Fundamental theorem of calculus-1**: if `f : ℝ → E` is integrable on `a..b` and `f x` has a\\nfinite limit `c` almost surely at `b`, then `u ↦ ∫ x in a..u, f x` has derivative `c` at `b`. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : CompleteSpace E] [inst_2 : NormedSpace ℝ E] {f : ℝ → E} {c : E}\\n  {a b : ℝ},\\n  IntervalIntegrable f MeasureTheory.volume a b →\\n    StronglyMeasurableAtFilter f (nhds a) →\\n      Filter.Tendsto f (nhds a ⊓ MeasureTheory.Measure.ae MeasureTheory.volume) (nhds c) →\\n        HasDerivAt (fun u => ∫ (x : ℝ) in u..b, f x) (-c) a\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Fundamental theorem of calculus-1**: if `f : ℝ → E` is integrable on `a..b` and `f x` has a\\nfinite limit `c` almost surely at `a`, then `u ↦ ∫ x in u..b, f x` has derivative `-c` at `a`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : MeasurableSpace α] [inst_2 : BorelSpace α]\\n  (μ : MeasureTheory.Measure α) [inst_3 : MeasureTheory.Measure.WeaklyRegular μ] (f : MeasureTheory.SimpleFunc α NNReal)\\n  {ε : ENNReal},\\n  ε ≠ 0 → ∃ g, (∀ (x : α), ↑f x ≤ g x) ∧ LowerSemicontinuous g ∧ ∫⁻ (x : α), ↑(g x) ∂μ ≤ ∫⁻ (x : α), ↑(↑f x) ∂μ + ε\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given a simple function `f` with values in `ℝ≥0`, there exists a lower semicontinuous\\nfunction `g ≥ f` with integral arbitrarily close to that of `f`. Formulation in terms of\\n`lintegral`.\\nAuxiliary lemma for Vitali-Carathéodory theorem `exists_lt_lower_semicontinuous_integral_lt`. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : CompleteSpace E] [inst_2 : NormedSpace ℝ E] {f : ℝ → E} {c : E}\\n  {a b : ℝ},\\n  IntervalIntegrable f MeasureTheory.volume a b →\\n    StronglyMeasurableAtFilter f (nhds b) →\\n      Filter.Tendsto f (nhds b ⊓ MeasureTheory.Measure.ae MeasureTheory.volume) (nhds c) →\\n        deriv (fun u => ∫ (x : ℝ) in a..u, f x) b = c\",\n  \"isProp\": true,\n  \"docString\":\n  \"Fundamental theorem of calculus: if `f : ℝ → E` is integrable on `a..b` and `f` has a finite\\nlimit `c` almost surely at `b`, then the derivative of `u ↦ ∫ x in a..u, f x` at `b` equals `c`. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : CompleteSpace E] [inst_2 : NormedSpace ℝ E] {f : ℝ → E} {c : E}\\n  {a b : ℝ},\\n  IntervalIntegrable f MeasureTheory.volume a b →\\n    ∀ {s t : Set ℝ} [inst_3 : intervalIntegral.FTCFilter b (nhdsWithin b s) (nhdsWithin b t)],\\n      StronglyMeasurableAtFilter f (nhdsWithin b t) →\\n        Filter.Tendsto f (nhdsWithin b t ⊓ MeasureTheory.Measure.ae MeasureTheory.volume) (nhds c) →\\n          autoParam (UniqueDiffWithinAt ℝ s b) _auto✝ → derivWithin (fun u => ∫ (x : ℝ) in a..u, f x) s b = c\",\n  \"isProp\": true,\n  \"docString\":\n  \"Fundamental theorem of calculus: if `f : ℝ → E` is integrable on `a..b` and `f x` has a finite\\nlimit `c` almost surely as `x` tends to `b` from the right or from the left, then the right\\n(resp., left) derivative of `u ↦ ∫ x in a..u, f x` at `b` equals `c`. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : CompleteSpace E] [inst_2 : NormedSpace ℝ E] {f : ℝ → E} {c : E}\\n  {a b : ℝ},\\n  IntervalIntegrable f MeasureTheory.volume a b →\\n    ∀ {s t : Set ℝ} [inst_3 : intervalIntegral.FTCFilter b (nhdsWithin b s) (nhdsWithin b t)],\\n      StronglyMeasurableAtFilter f (nhdsWithin b t) →\\n        Filter.Tendsto f (nhdsWithin b t ⊓ MeasureTheory.Measure.ae MeasureTheory.volume) (nhds c) →\\n          HasDerivWithinAt (fun u => ∫ (x : ℝ) in a..u, f x) c s b\",\n  \"isProp\": true,\n  \"docString\":\n  \"Fundamental theorem of calculus: if `f : ℝ → E` is integrable on `a..b` and `f x` has a finite\\nlimit `c` almost surely as `x` tends to `b` from the right or from the left,\\nthen `u ↦ ∫ x in a..u, f x` has right (resp., left) derivative `c` at `b`. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : CompleteSpace E] [inst_2 : NormedSpace ℝ E] {f : ℝ → E} {c : E}\\n  {a b : ℝ},\\n  IntervalIntegrable f MeasureTheory.volume a b →\\n    ∀ {s t : Set ℝ} [inst_3 : intervalIntegral.FTCFilter a (nhdsWithin a s) (nhdsWithin a t)],\\n      StronglyMeasurableAtFilter f (nhdsWithin a t) →\\n        Filter.Tendsto f (nhdsWithin a t ⊓ MeasureTheory.Measure.ae MeasureTheory.volume) (nhds c) →\\n          HasDerivWithinAt (fun u => ∫ (x : ℝ) in u..b, f x) (-c) s a\",\n  \"isProp\": true,\n  \"docString\":\n  \"Fundamental theorem of calculus: if `f : ℝ → E` is integrable on `a..b` and `f x` has a finite\\nlimit `c` almost surely as `x` tends to `a` from the right or from the left,\\nthen `u ↦ ∫ x in u..b, f x` has right (resp., left) derivative `-c` at `a`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {β : Type u_2} [inst : LinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderTopology α]\\n  [inst_3 : LinearOrder β] [inst_4 : TopologicalSpace β] [inst_5 : OrderTopology β] {f : α → β} {s : Set α} {a : α},\\n  StrictMonoOn f s →\\n    s ∈ nhdsWithin a (Set.Ici a) →\\n      (∀ (b : β), b > f a → ∃ c, c ∈ s ∧ f c ∈ Set.Ioc (f a) b) → ContinuousWithinAt f (Set.Ici a) a\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` is a function strictly monotone on a right neighborhood of `a` and the\\nimage of this neighborhood under `f` meets every interval `(f a, b]`, `b > f a`, then `f` is\\ncontinuous at `a` from the right.\\n\\nThe assumption `hfs : ∀ b > f a, ∃ c ∈ s, f c ∈ Ioc (f a) b` is required because otherwise the\\nfunction `f : ℝ → ℝ` given by `f x = if x ≤ 0 then x else x + 1` would be a counter-example at\\n`a = 0`. \"},\n {\"theorem\":\n  \"∀ {X : Type u} {α : Type v} [inst : TopologicalSpace X] [inst_1 : LinearOrder α] [inst_2 : TopologicalSpace α]\\n  [inst_3 : OrderClosedTopology α] {s : Set X},\\n  IsPreconnected s →\\n    ∀ {a b : X},\\n      a ∈ s →\\n        b ∈ s → ∀ {f g : X → α}, ContinuousOn f s → ContinuousOn g s → f a ≤ g a → g b ≤ f b → ∃ x, x ∈ s ∧ f x = g x\",\n  \"isProp\": true,\n  \"docString\":\n  \"Intermediate value theorem for two functions: if `f` and `g` are two functions continuous\\non a preconnected set `s` and for some `a b ∈ s` we have `f a ≤ g a` and `g b ≤ f b`,\\nthen for some `x ∈ s` we have `f x = g x`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {β : Type u_2} [inst : LinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderTopology α]\\n  [inst_3 : LinearOrder β] [inst_4 : TopologicalSpace β] [inst_5 : OrderTopology β] {f : α → β} {s : Set α} {a : α},\\n  StrictMonoOn f s →\\n    s ∈ nhds a →\\n      (∀ (b : β), b < f a → ∃ c, c ∈ s ∧ f c ∈ Set.Ico b (f a)) →\\n        (∀ (b : β), b > f a → ∃ c, c ∈ s ∧ f c ∈ Set.Ioc (f a) b) → ContinuousAt f a\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a function `f` is strictly monotone on a neighborhood of `a` and the image of this\\nneighborhood under `f` meets every interval `[b, f a)`, `b < f a`, and every interval\\n`(f a, b]`, `b > f a`, then `f` is continuous at `a`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : MeasurableSpace α] [inst_2 : BorelSpace α]\\n  {μ : MeasureTheory.Measure α} [inst_3 : MeasureTheory.Measure.WeaklyRegular μ] [inst_4 : MeasureTheory.SigmaFinite μ]\\n  (f : α → NNReal),\\n  (MeasureTheory.Integrable fun x => ↑(f x)) →\\n    ∀ {ε : ℝ},\\n      0 < ε →\\n        ∃ g,\\n          (∀ (x : α), ↑(f x) < g x) ∧\\n            LowerSemicontinuous g ∧\\n              (∀ᵐ (x : α) ∂μ, g x < ⊤) ∧\\n                (MeasureTheory.Integrable fun x => ENNReal.toReal (g x)) ∧\\n                  ∫ (x : α), ENNReal.toReal (g x) ∂μ < ∫ (x : α), ↑(f x) ∂μ + ε\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given an integrable function `f` with values in `ℝ≥0` in a sigma-finite space, there exists a\\nlower semicontinuous function `g > f` with integral arbitrarily close to that of `f`.\\nFormulation in terms of `integral`.\\nAuxiliary lemma for Vitali-Carathéodory theorem `exists_lt_lower_semicontinuous_integral_lt`. \"},\n {\"theorem\":\n  \"∀ {X : Type u} {α : Type v} [inst : TopologicalSpace X] [inst_1 : LinearOrder α] [inst_2 : TopologicalSpace α]\\n  [inst_3 : OrderClosedTopology α] [inst_4 : PreconnectedSpace X] {a b : X} {f g : X → α},\\n  Continuous f → Continuous g → f a ≤ g a → g b ≤ f b → ∃ x, f x = g x\",\n  \"isProp\": true,\n  \"docString\":\n  \"Intermediate value theorem for two functions: if `f` and `g` are two continuous functions\\non a preconnected space and `f a ≤ g a` and `g b ≤ f b`, then for some `x` we have `f x = g x`. \"}]\n", "prompt_cons": "/-- If `f : ℂ → E` is continuous the closed annulus `r ≤ ‖z - c‖ ≤ R`, `0 < r ≤ R`, and is complex\ndifferentiable at all but countably many points of its interior, then the integrals of\n`f z / (z - c)` (formally, `(z - c)⁻¹ • f z`) over the circles `‖z - c‖ = r` and `‖z - c‖ = R` are\nequal to each other. -/\ntheorem ∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {c : ℂ} {r R : ℝ},\n  0 < r →\n    r ≤ R →\n      ∀ {f : ℂ → E} {s : Set ℂ},\n        Set.Countable s →\n          ContinuousOn f (Metric.closedBall c R \\ Metric.ball c r) →\n            (∀ (z : ℂ), z ∈ (Metric.ball c R \\ Metric.closedBall c r) \\ s → DifferentiableAt ℂ f z) →\n              (∮ (z : ℂ) in C(c, R), (z - c)⁻¹ • f z) = ∮ (z : ℂ) in C(c, r), (z - c)⁻¹ • f z :=\n\n/-- A continuous function on a closed interval with `f a = f b` takes either its maximum\nor its minimum value at a point in the interior of the interval. -/\ntheorem ∀ (f : ℝ → ℝ) {a b : ℝ},\n  a < b → ContinuousOn f (Set.Icc a b) → f a = f b → ∃ c, c ∈ Set.Ioo a b ∧ IsExtrOn f (Set.Icc a b) c :=\n\n/-- If `f : ℝ → ℝ` is integrable on `(a, b]` for real numbers `a < b`, and positive on the interior\nof the interval, then its integral over `a..b` is strictly positive. -/\ntheorem ∀ {f : ℝ → ℝ} {a b : ℝ},\n  IntervalIntegrable f MeasureTheory.volume a b →\n    (∀ (x : ℝ), x ∈ Set.Ioo a b → 0 < f x) → a < b → 0 < ∫ (x : ℝ) in a..b, f x :=\n\n/-- If `f` and `g` are continuous on `[a, b]`, `a < b`, `f x ≤ g x` on this interval, and\n`f c < g c` at some point `c ∈ [a, b]`, then `∫ x in a..b, f x < ∫ x in a..b, g x`. -/\ntheorem ∀ {f g : ℝ → ℝ} {a b : ℝ},\n  a < b →\n    ContinuousOn f (Set.Icc a b) →\n      ContinuousOn g (Set.Icc a b) →\n        (∀ (x : ℝ), x ∈ Set.Ioc a b → f x ≤ g x) →\n          (∃ c, c ∈ Set.Icc a b ∧ f c < g c) → ∫ (x : ℝ) in a..b, f x < ∫ (x : ℝ) in a..b, g x :=\n\n/-- A continuous function on a closed interval with `f a = f b` has a local extremum at some\npoint of the corresponding open interval. -/\ntheorem ∀ (f : ℝ → ℝ) {a b : ℝ}, a < b → ContinuousOn f (Set.Icc a b) → f a = f b → ∃ c, c ∈ Set.Ioo a b ∧ IsLocalExtr f c :=\n\n/-- If `f` is a monotone function on a neighborhood of `a` and the image of this neighborhood under\n`f` meets every interval `(b, f a)`, `b < f a`, and every interval `(f a, b)`, `b > f a`, then `f`\nis continuous at `a`. -/\ntheorem ∀ {α : Type u_1} {β : Type u_2} [inst : LinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderTopology α]\n  [inst_3 : LinearOrder β] [inst_4 : TopologicalSpace β] [inst_5 : OrderTopology β] {f : α → β} {s : Set α} {a : α},\n  MonotoneOn f s →\n    s ∈ nhds a →\n      (∀ (b : β), b < f a → ∃ c, c ∈ s ∧ f c ∈ Set.Ioo b (f a)) →\n        (∀ (b : β), b > f a → ∃ c, c ∈ s ∧ f c ∈ Set.Ioo (f a) b) → ContinuousAt f a :=\n\n/-- A continuous function is bounded below on a compact set. -/\ntheorem ∀ {α : Type u_1} {β : Type u_2} [inst : LinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderClosedTopology α]\n  [inst_3 : TopologicalSpace β] [inst_4 : Nonempty α] {f : β → α} {K : Set β},\n  IsCompact K → ContinuousOn f K → BddBelow (f '' K) :=\n\n/-- If `f` is a strictly monotone function on a left neighborhood of `a` and the image of this\nneighborhood under `f` meets every interval `[b, f a)`, `b < f a`, then `f` is continuous at `a`\nfrom the left.\n\nThe assumption `hfs : ∀ b < f a, ∃ c ∈ s, f c ∈ Ico b (f a)` is required because otherwise the\nfunction `f : ℝ → ℝ` given by `f x = if x < 0 then x else x + 1` would be a counter-example at\n`a = 0`. -/\ntheorem ∀ {α : Type u_1} {β : Type u_2} [inst : LinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderTopology α]\n  [inst_3 : LinearOrder β] [inst_4 : TopologicalSpace β] [inst_5 : OrderTopology β] {f : α → β} {s : Set α} {a : α},\n  StrictMonoOn f s →\n    s ∈ nhdsWithin a (Set.Iic a) →\n      (∀ (b : β), b < f a → ∃ c, c ∈ s ∧ f c ∈ Set.Ico b (f a)) → ContinuousWithinAt f (Set.Iic a) a :=\n\n/-- **Fundamental theorem of calculus-1**: if `f : ℝ → E` is integrable on `a..b` and `f x` has a\nfinite limit `c` almost surely at `b`, then `u ↦ ∫ x in a..u, f x` has derivative `c` at `b`. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : CompleteSpace E] [inst_2 : NormedSpace ℝ E] {f : ℝ → E} {c : E}\n  {a b : ℝ},\n  IntervalIntegrable f MeasureTheory.volume a b →\n    StronglyMeasurableAtFilter f (nhds b) →\n      Filter.Tendsto f (nhds b ⊓ MeasureTheory.Measure.ae MeasureTheory.volume) (nhds c) →\n        HasDerivAt (fun u => ∫ (x : ℝ) in a..u, f x) c b :=\n\n/-- **Fundamental theorem of calculus-1**: if `f : ℝ → E` is integrable on `a..b` and `f x` has a\nfinite limit `c` almost surely at `a`, then `u ↦ ∫ x in u..b, f x` has derivative `-c` at `a`. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : CompleteSpace E] [inst_2 : NormedSpace ℝ E] {f : ℝ → E} {c : E}\n  {a b : ℝ},\n  IntervalIntegrable f MeasureTheory.volume a b →\n    StronglyMeasurableAtFilter f (nhds a) →\n      Filter.Tendsto f (nhds a ⊓ MeasureTheory.Measure.ae MeasureTheory.volume) (nhds c) →\n        HasDerivAt (fun u => ∫ (x : ℝ) in u..b, f x) (-c) a :=\n\n/-- Given a simple function `f` with values in `ℝ≥0`, there exists a lower semicontinuous\nfunction `g ≥ f` with integral arbitrarily close to that of `f`. Formulation in terms of\n`lintegral`.\nAuxiliary lemma for Vitali-Carathéodory theorem `exists_lt_lower_semicontinuous_integral_lt`. -/\ntheorem ∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : MeasurableSpace α] [inst_2 : BorelSpace α]\n  (μ : MeasureTheory.Measure α) [inst_3 : MeasureTheory.Measure.WeaklyRegular μ] (f : MeasureTheory.SimpleFunc α NNReal)\n  {ε : ENNReal},\n  ε ≠ 0 → ∃ g, (∀ (x : α), ↑f x ≤ g x) ∧ LowerSemicontinuous g ∧ ∫⁻ (x : α), ↑(g x) ∂μ ≤ ∫⁻ (x : α), ↑(↑f x) ∂μ + ε :=\n\n/-- Fundamental theorem of calculus: if `f : ℝ → E` is integrable on `a..b` and `f` has a finite\nlimit `c` almost surely at `b`, then the derivative of `u ↦ ∫ x in a..u, f x` at `b` equals `c`. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : CompleteSpace E] [inst_2 : NormedSpace ℝ E] {f : ℝ → E} {c : E}\n  {a b : ℝ},\n  IntervalIntegrable f MeasureTheory.volume a b →\n    StronglyMeasurableAtFilter f (nhds b) →\n      Filter.Tendsto f (nhds b ⊓ MeasureTheory.Measure.ae MeasureTheory.volume) (nhds c) →\n        deriv (fun u => ∫ (x : ℝ) in a..u, f x) b = c :=\n\n/-- Fundamental theorem of calculus: if `f : ℝ → E` is integrable on `a..b` and `f x` has a finite\nlimit `c` almost surely as `x` tends to `b` from the right or from the left, then the right\n(resp., left) derivative of `u ↦ ∫ x in a..u, f x` at `b` equals `c`. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : CompleteSpace E] [inst_2 : NormedSpace ℝ E] {f : ℝ → E} {c : E}\n  {a b : ℝ},\n  IntervalIntegrable f MeasureTheory.volume a b →\n    ∀ {s t : Set ℝ} [inst_3 : intervalIntegral.FTCFilter b (nhdsWithin b s) (nhdsWithin b t)],\n      StronglyMeasurableAtFilter f (nhdsWithin b t) →\n        Filter.Tendsto f (nhdsWithin b t ⊓ MeasureTheory.Measure.ae MeasureTheory.volume) (nhds c) →\n          autoParam (UniqueDiffWithinAt ℝ s b) _auto✝ → derivWithin (fun u => ∫ (x : ℝ) in a..u, f x) s b = c :=\n\n/-- Fundamental theorem of calculus: if `f : ℝ → E` is integrable on `a..b` and `f x` has a finite\nlimit `c` almost surely as `x` tends to `b` from the right or from the left,\nthen `u ↦ ∫ x in a..u, f x` has right (resp., left) derivative `c` at `b`. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : CompleteSpace E] [inst_2 : NormedSpace ℝ E] {f : ℝ → E} {c : E}\n  {a b : ℝ},\n  IntervalIntegrable f MeasureTheory.volume a b →\n    ∀ {s t : Set ℝ} [inst_3 : intervalIntegral.FTCFilter b (nhdsWithin b s) (nhdsWithin b t)],\n      StronglyMeasurableAtFilter f (nhdsWithin b t) →\n        Filter.Tendsto f (nhdsWithin b t ⊓ MeasureTheory.Measure.ae MeasureTheory.volume) (nhds c) →\n          HasDerivWithinAt (fun u => ∫ (x : ℝ) in a..u, f x) c s b :=\n\n/-- Fundamental theorem of calculus: if `f : ℝ → E` is integrable on `a..b` and `f x` has a finite\nlimit `c` almost surely as `x` tends to `a` from the right or from the left,\nthen `u ↦ ∫ x in u..b, f x` has right (resp., left) derivative `-c` at `a`. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : CompleteSpace E] [inst_2 : NormedSpace ℝ E] {f : ℝ → E} {c : E}\n  {a b : ℝ},\n  IntervalIntegrable f MeasureTheory.volume a b →\n    ∀ {s t : Set ℝ} [inst_3 : intervalIntegral.FTCFilter a (nhdsWithin a s) (nhdsWithin a t)],\n      StronglyMeasurableAtFilter f (nhdsWithin a t) →\n        Filter.Tendsto f (nhdsWithin a t ⊓ MeasureTheory.Measure.ae MeasureTheory.volume) (nhds c) →\n          HasDerivWithinAt (fun u => ∫ (x : ℝ) in u..b, f x) (-c) s a :=\n\n/-- If `f` is a function strictly monotone on a right neighborhood of `a` and the\nimage of this neighborhood under `f` meets every interval `(f a, b]`, `b > f a`, then `f` is\ncontinuous at `a` from the right.\n\nThe assumption `hfs : ∀ b > f a, ∃ c ∈ s, f c ∈ Ioc (f a) b` is required because otherwise the\nfunction `f : ℝ → ℝ` given by `f x = if x ≤ 0 then x else x + 1` would be a counter-example at\n`a = 0`. -/\ntheorem ∀ {α : Type u_1} {β : Type u_2} [inst : LinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderTopology α]\n  [inst_3 : LinearOrder β] [inst_4 : TopologicalSpace β] [inst_5 : OrderTopology β] {f : α → β} {s : Set α} {a : α},\n  StrictMonoOn f s →\n    s ∈ nhdsWithin a (Set.Ici a) →\n      (∀ (b : β), b > f a → ∃ c, c ∈ s ∧ f c ∈ Set.Ioc (f a) b) → ContinuousWithinAt f (Set.Ici a) a :=\n\n/-- Intermediate value theorem for two functions: if `f` and `g` are two functions continuous\non a preconnected set `s` and for some `a b ∈ s` we have `f a ≤ g a` and `g b ≤ f b`,\nthen for some `x ∈ s` we have `f x = g x`. -/\ntheorem ∀ {X : Type u} {α : Type v} [inst : TopologicalSpace X] [inst_1 : LinearOrder α] [inst_2 : TopologicalSpace α]\n  [inst_3 : OrderClosedTopology α] {s : Set X},\n  IsPreconnected s →\n    ∀ {a b : X},\n      a ∈ s →\n        b ∈ s → ∀ {f g : X → α}, ContinuousOn f s → ContinuousOn g s → f a ≤ g a → g b ≤ f b → ∃ x, x ∈ s ∧ f x = g x :=\n\n/-- If a function `f` is strictly monotone on a neighborhood of `a` and the image of this\nneighborhood under `f` meets every interval `[b, f a)`, `b < f a`, and every interval\n`(f a, b]`, `b > f a`, then `f` is continuous at `a`. -/\ntheorem ∀ {α : Type u_1} {β : Type u_2} [inst : LinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderTopology α]\n  [inst_3 : LinearOrder β] [inst_4 : TopologicalSpace β] [inst_5 : OrderTopology β] {f : α → β} {s : Set α} {a : α},\n  StrictMonoOn f s →\n    s ∈ nhds a →\n      (∀ (b : β), b < f a → ∃ c, c ∈ s ∧ f c ∈ Set.Ico b (f a)) →\n        (∀ (b : β), b > f a → ∃ c, c ∈ s ∧ f c ∈ Set.Ioc (f a) b) → ContinuousAt f a :=\n\n/-- Given an integrable function `f` with values in `ℝ≥0` in a sigma-finite space, there exists a\nlower semicontinuous function `g > f` with integral arbitrarily close to that of `f`.\nFormulation in terms of `integral`.\nAuxiliary lemma for Vitali-Carathéodory theorem `exists_lt_lower_semicontinuous_integral_lt`. -/\ntheorem ∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : MeasurableSpace α] [inst_2 : BorelSpace α]\n  {μ : MeasureTheory.Measure α} [inst_3 : MeasureTheory.Measure.WeaklyRegular μ] [inst_4 : MeasureTheory.SigmaFinite μ]\n  (f : α → NNReal),\n  (MeasureTheory.Integrable fun x => ↑(f x)) →\n    ∀ {ε : ℝ},\n      0 < ε →\n        ∃ g,\n          (∀ (x : α), ↑(f x) < g x) ∧\n            LowerSemicontinuous g ∧\n              (∀ᵐ (x : α) ∂μ, g x < ⊤) ∧\n                (MeasureTheory.Integrable fun x => ENNReal.toReal (g x)) ∧\n                  ∫ (x : α), ENNReal.toReal (g x) ∂μ < ∫ (x : α), ↑(f x) ∂μ + ε :=\n\n/-- Intermediate value theorem for two functions: if `f` and `g` are two continuous functions\non a preconnected space and `f a ≤ g a` and `g b ≤ f b`, then for some `x` we have `f x = g x`. -/\ntheorem ∀ {X : Type u} {α : Type v} [inst : TopologicalSpace X] [inst_1 : LinearOrder α] [inst_2 : TopologicalSpace α]\n  [inst_3 : OrderClosedTopology α] [inst_4 : PreconnectedSpace X] {a b : X} {f g : X → α},\n  Continuous f → Continuous g → f a ≤ g a → g b ≤ f b → ∃ x, f x = g x :=\n\n/-- Suppose `f` is a real function with domain `ℝ^1` which has the intermediate value property: if `f(a) < c < f(b)`, then `f(x) = c` for some `x` between `a` and `b`. Suppose also, for every rational `r`, that the set of all `x` with `f(x) = r` is closed. Prove that `f` is continuous. -/\ntheorem", "choices": ["forall {f : ℝ → ℝ},\n  (∀ a b c, f a < c → c < f b → ∃ x, a < x ∧ x < b ∧ f x = c) →\n  (∀ q : ℚ, is_closed {x | f x = q}) →\n  continuous f ", "∀ {f : ℝ → ℝ},\n  interval_valued f →\n    (∀ (r : ℚ), IsClosed (f ⁻¹' {↑r})) → Continuous f ", "∀ {f : ℝ → ℝ},\n  (IntervalIntegrable f MeasureTheory.volume 0 1 ∧ ∀ (x y : ℝ), f x < y → f y → ∃ x', x < x' ∧ x' < y ∧ f x' = f x ∨ f x' = f y) →\n  (∀ (r : ℚ), IsClosed (f ⁻¹' {r})) → Continuous f ", "forall {f : ℝ → ℝ},\n  (∀ (a b : ℝ) (c : ℝ),\n    a ≤ b → f a ≤ c → c ≤ f b → ∃ (x : ℝ), x ∈ Set.Icc a b ∧ f x = c) →\n  (∀ (r : ℚ), IsClosed (SetOf (λ (x : ℝ), f x = coe r))) →\n  Continuous f ", "forall {f : ℝ → ℝ},\n  (∀ {{a b : ℝ}} {c : ℝ}, a < b → f a < c → c < f b → ∃ x, a < x ∧ x < b ∧ f x = c) →\n  (∀ r : ℚ, IsClosed (f ⁻¹' {r})) → Continuous f ", "forall {f : ℝ → ℝ},\n  (∀ (a b : ℝ) (c : ℝ), a ≤ b → f a ≤ c → c ≤ f b → ∃ x ∈ Set.Icc a b, f x = c) →\n  (∀ r : ℚ, IsClosed (f ⁻¹' {r})) → Continuous f ", "forall {f : ℝ → ℝ},\n  (forall {a b c : ℝ}, a ≤ b -> f a < c -> c < f b -> ∃ x, a ≤ x ∧ x ≤ b ∧ f x = c) ->\n  (forall (r : ℚ), IsClosed (f ⁻¹' {r})) ->\n  Continuous f ", "forall {f : ℝ → ℝ},\n  (∀ {a b : ℝ} {c : ℝ}, a < b → f a < c → c < f b → ∃ x, x ∈ set.Ioo a b ∧ f x = c) →\n  (∀ (q : ℚ), is_closed {x : ℝ | f x = ↑q}) →\n  continuous f ", "forall {f : ℝ → ℝ} (hmono : ∀ a b : ℝ, a < b → a < f a → f a < f b → f b < b),\n  (forall (q : ℚ) (x : ℝ), f x = q → ∃ s hs, x ∈ s ∧ IsClosed s) →\n  Continuous f ", "forall {f : ℝ → ℝ}, (∀ a b c, a < b → f a < c → c < f b → ∃ x, a < x ∧ x < b ∧ f x = c) →\n  (∀ r : ℚ, is_closed (f ⁻¹' {r})) → continuous f "]}
{"docString": "Assume that `f` is a continuous real function defined in `(a, b)` such that `f((x+y)/2) ≤ (f(x)+f(y))/2` for all `x, y ∈ (a, b)`. Prove that `f` is convex.", "prompts": "[{\"theorem\":\n  \"∀ {𝕜 : Type u_1} {E : Type u_2} {β : Type u_3} [inst : OrderedSemiring 𝕜] [inst_1 : AddCommMonoid E]\\n  [inst_2 : OrderedAddCommMonoid β] [inst_3 : Module 𝕜 E] [inst_4 : Module 𝕜 β] [inst_5 : LinearOrder E] {s : Set E}\\n  {f : E → β},\\n  Convex 𝕜 s →\\n    (∀ ⦃x : E⦄,\\n        x ∈ s →\\n          ∀ ⦃y : E⦄, y ∈ s → x < y → ∀ ⦃a b : 𝕜⦄, 0 < a → 0 < b → a + b = 1 → a • f x + b • f y ≤ f (a • x + b • y)) →\\n      ConcaveOn 𝕜 s f\",\n  \"isProp\": true,\n  \"docString\":\n  \"For a function on a convex set in a linearly ordered space (where the order and the algebraic\\nstructures aren't necessarily compatible), in order to prove that it is concave it suffices to\\nverify the inequality `a • f x + b • f y ≤ f (a • x + b • y)` for `x < y` and positive `a`, `b`. The\\nmain use case is `E = ℝ` however one can apply it, e.g., to `ℝ^n` with lexicographic order. \"},\n {\"theorem\":\n  \"∀ {D : Set ℝ},\\n  Convex ℝ D →\\n    ∀ {f : ℝ → ℝ},\\n      ContinuousOn f D →\\n        DifferentiableOn ℝ f (interior D) →\\n          ∀ {C : (fun x => ℝ) 1},\\n            (∀ (x : ℝ), x ∈ interior D → C ≤ deriv f x) →\\n              ∀ (x : ℝ), x ∈ D → ∀ (y : ℝ), y ∈ D → x ≤ y → C * (y - x) ≤ f y - f x\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `f` be a function continuous on a convex (or, equivalently, connected) subset `D`\\nof the real line. If `f` is differentiable on the interior of `D` and `C ≤ f'`, then\\n`f` grows at least as fast as `C * x` on `D`, i.e., `C * (y - x) ≤ f y - f x` whenever `x, y ∈ D`,\\n`x ≤ y`. \"},\n {\"theorem\":\n  \"∀ {D : Set ℝ},\\n  Convex ℝ D →\\n    ∀ {f : ℝ → ℝ},\\n      ContinuousOn f D →\\n        DifferentiableOn ℝ f (interior D) →\\n          ∀ {C : (fun x => ℝ) 1},\\n            (∀ (x : ℝ), x ∈ interior D → deriv f x ≤ C) →\\n              ∀ (x : ℝ), x ∈ D → ∀ (y : ℝ), y ∈ D → x ≤ y → f y - f x ≤ C * (y - x)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `f` be a function continuous on a convex (or, equivalently, connected) subset `D`\\nof the real line. If `f` is differentiable on the interior of `D` and `f' ≤ C`, then\\n`f` grows at most as fast as `C * x` on `D`, i.e., `f y - f x ≤ C * (y - x)` whenever `x, y ∈ D`,\\n`x ≤ y`. \"},\n {\"theorem\":\n  \"∀ {D : Set ℝ},\\n  Convex ℝ D →\\n    ∀ {f : ℝ → ℝ},\\n      ContinuousOn f D →\\n        DifferentiableOn ℝ f (interior D) →\\n          ∀ {C : (fun x => ℝ) 1},\\n            (∀ (x : ℝ), x ∈ interior D → C < deriv f x) →\\n              ∀ (x : ℝ), x ∈ D → ∀ (y : ℝ), y ∈ D → x < y → C * (y - x) < f y - f x\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `f` be a function continuous on a convex (or, equivalently, connected) subset `D`\\nof the real line. If `f` is differentiable on the interior of `D` and `C < f'`, then\\n`f` grows faster than `C * x` on `D`, i.e., `C * (y - x) < f y - f x` whenever `x, y ∈ D`,\\n`x < y`. \"},\n {\"theorem\":\n  \"∀ {f : ℝ → ℝ}, Differentiable ℝ f → Monotone (deriv f) → ConvexOn ℝ Set.univ f\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a function `f` is differentiable and `f'` is monotone on `ℝ` then `f` is convex. \"},\n {\"theorem\":\n  \"∀ {f : ℝ → ℝ}, Differentiable ℝ f → Differentiable ℝ (deriv f) → (∀ (x : ℝ), 0 ≤ deriv^[2] f x) → ConvexOn ℝ Set.univ f\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a function `f` is twice differentiable on `ℝ`, and `f''` is nonnegative on `ℝ`,\\nthen `f` is convex on `ℝ`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {E : Type u_2} {β : Type u_3} [inst : OrderedSemiring 𝕜] [inst_1 : AddCommMonoid E]\\n  [inst_2 : OrderedAddCommMonoid β] [inst_3 : Module 𝕜 E] [inst_4 : Module 𝕜 β] [inst_5 : LinearOrder E] {s : Set E}\\n  {f : E → β},\\n  Convex 𝕜 s →\\n    (∀ ⦃x : E⦄,\\n        x ∈ s →\\n          ∀ ⦃y : E⦄, y ∈ s → x < y → ∀ ⦃a b : 𝕜⦄, 0 < a → 0 < b → a + b = 1 → a • f x + b • f y < f (a • x + b • y)) →\\n      StrictConcaveOn 𝕜 s f\",\n  \"isProp\": true,\n  \"docString\":\n  \"For a function on a convex set in a linearly ordered space (where the order and the algebraic\\nstructures aren't necessarily compatible), in order to prove that it is strictly concave it suffices\\nto verify the inequality `a • f x + b • f y < f (a • x + b • y)` for `x < y` and positive `a`, `b`.\\nThe main use case is `E = 𝕜` however one can apply it, e.g., to `𝕜^n` with lexicographic order. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {E : Type u_2} {β : Type u_3} [inst : OrderedSemiring 𝕜] [inst_1 : AddCommMonoid E]\\n  [inst_2 : OrderedAddCommGroup β] [inst_3 : SMul 𝕜 E] [inst_4 : Module 𝕜 β] {s : Set E} {f : E → β},\\n  ConvexOn 𝕜 s (-f) ↔ ConcaveOn 𝕜 s f\",\n  \"isProp\": true,\n  \"docString\": \"A function `-f` is convex iff `f` is concave. \"},\n {\"theorem\":\n  \"∀ {D : Set ℝ},\\n  Convex ℝ D →\\n    ∀ {f : ℝ → ℝ},\\n      ContinuousOn f D →\\n        DifferentiableOn ℝ f (interior D) →\\n          ∀ {C : (fun x => ℝ) 1},\\n            (∀ (x : ℝ), x ∈ interior D → deriv f x < C) →\\n              ∀ (x : ℝ), x ∈ D → ∀ (y : ℝ), y ∈ D → x < y → f y - f x < C * (y - x)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `f` be a function continuous on a convex (or, equivalently, connected) subset `D`\\nof the real line. If `f` is differentiable on the interior of `D` and `f' < C`, then\\n`f` grows slower than `C * x` on `D`, i.e., `f y - f x < C * (y - x)` whenever `x, y ∈ D`,\\n`x < y`. \"},\n {\"theorem\":\n  \"∀ {f : ℝ → ℝ}, Continuous f → (∀ (x : ℝ), 0 < deriv^[2] f x) → StrictConvexOn ℝ Set.univ f\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a function `f` is continuous on `ℝ`, and `f''` is strictly positive on `ℝ`,\\nthen `f` is strictly convex on `ℝ`.\\nNote that we don't require twice differentiability explicitly as it is already implied by the second\\nderivative being strictly positive, except at at most one point. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {E : Type u_2} {β : Type u_3} [inst : OrderedSemiring 𝕜] [inst_1 : AddCommMonoid E]\\n  [inst_2 : OrderedAddCommMonoid β] [inst_3 : Module 𝕜 E] [inst_4 : Module 𝕜 β] [inst_5 : LinearOrder E] {s : Set E}\\n  {f : E → β},\\n  Convex 𝕜 s →\\n    (∀ ⦃x : E⦄,\\n        x ∈ s →\\n          ∀ ⦃y : E⦄, y ∈ s → x < y → ∀ ⦃a b : 𝕜⦄, 0 < a → 0 < b → a + b = 1 → f (a • x + b • y) ≤ a • f x + b • f y) →\\n      ConvexOn 𝕜 s f\",\n  \"isProp\": true,\n  \"docString\":\n  \"For a function on a convex set in a linearly ordered space (where the order and the algebraic\\nstructures aren't necessarily compatible), in order to prove that it is convex, it suffices to\\nverify the inequality `f (a • x + b • y) ≤ a • f x + b • f y` only for `x < y` and positive `a`,\\n`b`. The main use case is `E = 𝕜` however one can apply it, e.g., to `𝕜^n` with lexicographic order.\\n\"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} [inst : LinearOrderedField 𝕜] {s : Set 𝕜} {f : 𝕜 → 𝕜},\\n  ConvexOn 𝕜 s f ↔\\n    Convex 𝕜 s ∧ ∀ ⦃x y z : 𝕜⦄, x ∈ s → z ∈ s → x < y → y < z → (f y - f x) / (y - x) ≤ (f z - f y) / (z - y)\",\n  \"isProp\": true,\n  \"docString\":\n  \"A function `f : 𝕜 → 𝕜` is convex iff for any three points `x < y < z` the slope of the secant\\nline of `f` on `[x, y]` is less than the slope of the secant line of `f` on `[x, z]`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {E : Type u_2} {β : Type u_3} [inst : OrderedSemiring 𝕜] [inst_1 : AddCommMonoid E]\\n  [inst_2 : OrderedAddCommGroup β] [inst_3 : SMul 𝕜 E] [inst_4 : Module 𝕜 β] {s : Set E} {f : E → β},\\n  StrictConvexOn 𝕜 s (-f) ↔ StrictConcaveOn 𝕜 s f\",\n  \"isProp\": true,\n  \"docString\":\n  \"A function `-f` is strictly convex iff `f` is strictly concave. \"},\n {\"theorem\":\n  \"∀ {D : Set ℝ},\\n  Convex ℝ D →\\n    ∀ {f : ℝ → ℝ},\\n      ContinuousOn f D →\\n        DifferentiableOn ℝ f (interior D) →\\n          DifferentiableOn ℝ (deriv f) (interior D) → (∀ (x : ℝ), x ∈ interior D → 0 ≤ deriv^[2] f x) → ConvexOn ℝ D f\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a function `f` is continuous on a convex set `D ⊆ ℝ`, is twice differentiable on its\\ninterior, and `f''` is nonnegative on the interior, then `f` is convex on `D`. \"},\n {\"theorem\":\n  \"∀ {D : Set ℝ},\\n  Convex ℝ D →\\n    ∀ {f : ℝ → ℝ},\\n      ContinuousOn f D →\\n        DifferentiableOn ℝ f (interior D) →\\n          DifferentiableOn ℝ (deriv f) (interior D) → (∀ (x : ℝ), x ∈ interior D → deriv^[2] f x ≤ 0) → ConcaveOn ℝ D f\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a function `f` is continuous on a convex set `D ⊆ ℝ`, is twice differentiable on its\\ninterior, and `f''` is nonpositive on the interior, then `f` is concave on `D`. \"},\n {\"theorem\":\n  \"∀ {X : Type u} {α : Type v} [inst : TopologicalSpace X] [inst_1 : LinearOrder α] [inst_2 : TopologicalSpace α]\\n  [inst_3 : OrderClosedTopology α] {s : Set X},\\n  IsPreconnected s →\\n    ∀ {a b : X},\\n      a ∈ s →\\n        b ∈ s → ∀ {f g : X → α}, ContinuousOn f s → ContinuousOn g s → f a ≤ g a → g b ≤ f b → ∃ x, x ∈ s ∧ f x = g x\",\n  \"isProp\": true,\n  \"docString\":\n  \"Intermediate value theorem for two functions: if `f` and `g` are two functions continuous\\non a preconnected set `s` and for some `a b ∈ s` we have `f a ≤ g a` and `g b ≤ f b`,\\nthen for some `x ∈ s` we have `f x = g x`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {E : Type u_2} {β : Type u_3} [inst : OrderedSemiring 𝕜] [inst_1 : AddCommMonoid E]\\n  [inst_2 : OrderedAddCommMonoid β] [inst_3 : Module 𝕜 E] [inst_4 : Module 𝕜 β] [inst_5 : LinearOrder E] {s : Set E}\\n  {f : E → β},\\n  Convex 𝕜 s →\\n    (∀ ⦃x : E⦄,\\n        x ∈ s →\\n          ∀ ⦃y : E⦄, y ∈ s → x < y → ∀ ⦃a b : 𝕜⦄, 0 < a → 0 < b → a + b = 1 → f (a • x + b • y) < a • f x + b • f y) →\\n      StrictConvexOn 𝕜 s f\",\n  \"isProp\": true,\n  \"docString\":\n  \"For a function on a convex set in a linearly ordered space (where the order and the algebraic\\nstructures aren't necessarily compatible), in order to prove that it is strictly convex, it suffices\\nto verify the inequality `f (a • x + b • y) < a • f x + b • f y` for `x < y` and positive `a`, `b`.\\nThe main use case is `E = 𝕜` however one can apply it, e.g., to `𝕜^n` with lexicographic order. \"},\n {\"theorem\":\n  \"∀ {f g : ℝ → ℝ} {a b : ℝ},\\n  a < b →\\n    ContinuousOn f (Set.Icc a b) →\\n      ContinuousOn g (Set.Icc a b) →\\n        (∀ (x : ℝ), x ∈ Set.Ioc a b → f x ≤ g x) →\\n          (∃ c, c ∈ Set.Icc a b ∧ f c < g c) → ∫ (x : ℝ) in a..b, f x < ∫ (x : ℝ) in a..b, g x\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` and `g` are continuous on `[a, b]`, `a < b`, `f x ≤ g x` on this interval, and\\n`f c < g c` at some point `c ∈ [a, b]`, then `∫ x in a..b, f x < ∫ x in a..b, g x`. \"},\n {\"theorem\":\n  \"∀ {f : ℝ → ℝ}, Continuous f → StrictMono (deriv f) → StrictConvexOn ℝ Set.univ f\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a function `f` is continuous and `f'` is strictly monotone on `ℝ` then `f` is strictly\\nconvex. Note that we don't require differentiability, since it is guaranteed at all but at most\\none point by the strict monotonicity of `f'`. \"},\n {\"theorem\":\n  \"∀ {f : ℝ → ℝ}, Differentiable ℝ f → Differentiable ℝ (deriv f) → (∀ (x : ℝ), deriv^[2] f x ≤ 0) → ConcaveOn ℝ Set.univ f\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a function `f` is twice differentiable on `ℝ`, and `f''` is nonpositive on `ℝ`,\\nthen `f` is concave on `ℝ`. \"}]\n", "prompt_cons": "/-- For a function on a convex set in a linearly ordered space (where the order and the algebraic\nstructures aren't necessarily compatible), in order to prove that it is concave it suffices to\nverify the inequality `a • f x + b • f y ≤ f (a • x + b • y)` for `x < y` and positive `a`, `b`. The\nmain use case is `E = ℝ` however one can apply it, e.g., to `ℝ^n` with lexicographic order. -/\ntheorem ∀ {𝕜 : Type u_1} {E : Type u_2} {β : Type u_3} [inst : OrderedSemiring 𝕜] [inst_1 : AddCommMonoid E]\n  [inst_2 : OrderedAddCommMonoid β] [inst_3 : Module 𝕜 E] [inst_4 : Module 𝕜 β] [inst_5 : LinearOrder E] {s : Set E}\n  {f : E → β},\n  Convex 𝕜 s →\n    (∀ ⦃x : E⦄,\n        x ∈ s →\n          ∀ ⦃y : E⦄, y ∈ s → x < y → ∀ ⦃a b : 𝕜⦄, 0 < a → 0 < b → a + b = 1 → a • f x + b • f y ≤ f (a • x + b • y)) →\n      ConcaveOn 𝕜 s f :=\n\n/-- Let `f` be a function continuous on a convex (or, equivalently, connected) subset `D`\nof the real line. If `f` is differentiable on the interior of `D` and `C ≤ f'`, then\n`f` grows at least as fast as `C * x` on `D`, i.e., `C * (y - x) ≤ f y - f x` whenever `x, y ∈ D`,\n`x ≤ y`. -/\ntheorem ∀ {D : Set ℝ},\n  Convex ℝ D →\n    ∀ {f : ℝ → ℝ},\n      ContinuousOn f D →\n        DifferentiableOn ℝ f (interior D) →\n          ∀ {C : (fun x => ℝ) 1},\n            (∀ (x : ℝ), x ∈ interior D → C ≤ deriv f x) →\n              ∀ (x : ℝ), x ∈ D → ∀ (y : ℝ), y ∈ D → x ≤ y → C * (y - x) ≤ f y - f x :=\n\n/-- Let `f` be a function continuous on a convex (or, equivalently, connected) subset `D`\nof the real line. If `f` is differentiable on the interior of `D` and `f' ≤ C`, then\n`f` grows at most as fast as `C * x` on `D`, i.e., `f y - f x ≤ C * (y - x)` whenever `x, y ∈ D`,\n`x ≤ y`. -/\ntheorem ∀ {D : Set ℝ},\n  Convex ℝ D →\n    ∀ {f : ℝ → ℝ},\n      ContinuousOn f D →\n        DifferentiableOn ℝ f (interior D) →\n          ∀ {C : (fun x => ℝ) 1},\n            (∀ (x : ℝ), x ∈ interior D → deriv f x ≤ C) →\n              ∀ (x : ℝ), x ∈ D → ∀ (y : ℝ), y ∈ D → x ≤ y → f y - f x ≤ C * (y - x) :=\n\n/-- Let `f` be a function continuous on a convex (or, equivalently, connected) subset `D`\nof the real line. If `f` is differentiable on the interior of `D` and `C < f'`, then\n`f` grows faster than `C * x` on `D`, i.e., `C * (y - x) < f y - f x` whenever `x, y ∈ D`,\n`x < y`. -/\ntheorem ∀ {D : Set ℝ},\n  Convex ℝ D →\n    ∀ {f : ℝ → ℝ},\n      ContinuousOn f D →\n        DifferentiableOn ℝ f (interior D) →\n          ∀ {C : (fun x => ℝ) 1},\n            (∀ (x : ℝ), x ∈ interior D → C < deriv f x) →\n              ∀ (x : ℝ), x ∈ D → ∀ (y : ℝ), y ∈ D → x < y → C * (y - x) < f y - f x :=\n\n/-- If a function `f` is differentiable and `f'` is monotone on `ℝ` then `f` is convex. -/\ntheorem ∀ {f : ℝ → ℝ}, Differentiable ℝ f → Monotone (deriv f) → ConvexOn ℝ Set.univ f :=\n\n/-- If a function `f` is twice differentiable on `ℝ`, and `f''` is nonnegative on `ℝ`,\nthen `f` is convex on `ℝ`. -/\ntheorem ∀ {f : ℝ → ℝ}, Differentiable ℝ f → Differentiable ℝ (deriv f) → (∀ (x : ℝ), 0 ≤ deriv^[2] f x) → ConvexOn ℝ Set.univ f :=\n\n/-- For a function on a convex set in a linearly ordered space (where the order and the algebraic\nstructures aren't necessarily compatible), in order to prove that it is strictly concave it suffices\nto verify the inequality `a • f x + b • f y < f (a • x + b • y)` for `x < y` and positive `a`, `b`.\nThe main use case is `E = 𝕜` however one can apply it, e.g., to `𝕜^n` with lexicographic order. -/\ntheorem ∀ {𝕜 : Type u_1} {E : Type u_2} {β : Type u_3} [inst : OrderedSemiring 𝕜] [inst_1 : AddCommMonoid E]\n  [inst_2 : OrderedAddCommMonoid β] [inst_3 : Module 𝕜 E] [inst_4 : Module 𝕜 β] [inst_5 : LinearOrder E] {s : Set E}\n  {f : E → β},\n  Convex 𝕜 s →\n    (∀ ⦃x : E⦄,\n        x ∈ s →\n          ∀ ⦃y : E⦄, y ∈ s → x < y → ∀ ⦃a b : 𝕜⦄, 0 < a → 0 < b → a + b = 1 → a • f x + b • f y < f (a • x + b • y)) →\n      StrictConcaveOn 𝕜 s f :=\n\n/-- A function `-f` is convex iff `f` is concave. -/\ntheorem ∀ {𝕜 : Type u_1} {E : Type u_2} {β : Type u_3} [inst : OrderedSemiring 𝕜] [inst_1 : AddCommMonoid E]\n  [inst_2 : OrderedAddCommGroup β] [inst_3 : SMul 𝕜 E] [inst_4 : Module 𝕜 β] {s : Set E} {f : E → β},\n  ConvexOn 𝕜 s (-f) ↔ ConcaveOn 𝕜 s f :=\n\n/-- Let `f` be a function continuous on a convex (or, equivalently, connected) subset `D`\nof the real line. If `f` is differentiable on the interior of `D` and `f' < C`, then\n`f` grows slower than `C * x` on `D`, i.e., `f y - f x < C * (y - x)` whenever `x, y ∈ D`,\n`x < y`. -/\ntheorem ∀ {D : Set ℝ},\n  Convex ℝ D →\n    ∀ {f : ℝ → ℝ},\n      ContinuousOn f D →\n        DifferentiableOn ℝ f (interior D) →\n          ∀ {C : (fun x => ℝ) 1},\n            (∀ (x : ℝ), x ∈ interior D → deriv f x < C) →\n              ∀ (x : ℝ), x ∈ D → ∀ (y : ℝ), y ∈ D → x < y → f y - f x < C * (y - x) :=\n\n/-- If a function `f` is continuous on `ℝ`, and `f''` is strictly positive on `ℝ`,\nthen `f` is strictly convex on `ℝ`.\nNote that we don't require twice differentiability explicitly as it is already implied by the second\nderivative being strictly positive, except at at most one point. -/\ntheorem ∀ {f : ℝ → ℝ}, Continuous f → (∀ (x : ℝ), 0 < deriv^[2] f x) → StrictConvexOn ℝ Set.univ f :=\n\n/-- For a function on a convex set in a linearly ordered space (where the order and the algebraic\nstructures aren't necessarily compatible), in order to prove that it is convex, it suffices to\nverify the inequality `f (a • x + b • y) ≤ a • f x + b • f y` only for `x < y` and positive `a`,\n`b`. The main use case is `E = 𝕜` however one can apply it, e.g., to `𝕜^n` with lexicographic order. -/\ntheorem ∀ {𝕜 : Type u_1} {E : Type u_2} {β : Type u_3} [inst : OrderedSemiring 𝕜] [inst_1 : AddCommMonoid E]\n  [inst_2 : OrderedAddCommMonoid β] [inst_3 : Module 𝕜 E] [inst_4 : Module 𝕜 β] [inst_5 : LinearOrder E] {s : Set E}\n  {f : E → β},\n  Convex 𝕜 s →\n    (∀ ⦃x : E⦄,\n        x ∈ s →\n          ∀ ⦃y : E⦄, y ∈ s → x < y → ∀ ⦃a b : 𝕜⦄, 0 < a → 0 < b → a + b = 1 → f (a • x + b • y) ≤ a • f x + b • f y) →\n      ConvexOn 𝕜 s f :=\n\n/-- A function `f : 𝕜 → 𝕜` is convex iff for any three points `x < y < z` the slope of the secant\nline of `f` on `[x, y]` is less than the slope of the secant line of `f` on `[x, z]`. -/\ntheorem ∀ {𝕜 : Type u_1} [inst : LinearOrderedField 𝕜] {s : Set 𝕜} {f : 𝕜 → 𝕜},\n  ConvexOn 𝕜 s f ↔\n    Convex 𝕜 s ∧ ∀ ⦃x y z : 𝕜⦄, x ∈ s → z ∈ s → x < y → y < z → (f y - f x) / (y - x) ≤ (f z - f y) / (z - y) :=\n\n/-- A function `-f` is strictly convex iff `f` is strictly concave. -/\ntheorem ∀ {𝕜 : Type u_1} {E : Type u_2} {β : Type u_3} [inst : OrderedSemiring 𝕜] [inst_1 : AddCommMonoid E]\n  [inst_2 : OrderedAddCommGroup β] [inst_3 : SMul 𝕜 E] [inst_4 : Module 𝕜 β] {s : Set E} {f : E → β},\n  StrictConvexOn 𝕜 s (-f) ↔ StrictConcaveOn 𝕜 s f :=\n\n/-- If a function `f` is continuous on a convex set `D ⊆ ℝ`, is twice differentiable on its\ninterior, and `f''` is nonnegative on the interior, then `f` is convex on `D`. -/\ntheorem ∀ {D : Set ℝ},\n  Convex ℝ D →\n    ∀ {f : ℝ → ℝ},\n      ContinuousOn f D →\n        DifferentiableOn ℝ f (interior D) →\n          DifferentiableOn ℝ (deriv f) (interior D) → (∀ (x : ℝ), x ∈ interior D → 0 ≤ deriv^[2] f x) → ConvexOn ℝ D f :=\n\n/-- If a function `f` is continuous on a convex set `D ⊆ ℝ`, is twice differentiable on its\ninterior, and `f''` is nonpositive on the interior, then `f` is concave on `D`. -/\ntheorem ∀ {D : Set ℝ},\n  Convex ℝ D →\n    ∀ {f : ℝ → ℝ},\n      ContinuousOn f D →\n        DifferentiableOn ℝ f (interior D) →\n          DifferentiableOn ℝ (deriv f) (interior D) → (∀ (x : ℝ), x ∈ interior D → deriv^[2] f x ≤ 0) → ConcaveOn ℝ D f :=\n\n/-- Intermediate value theorem for two functions: if `f` and `g` are two functions continuous\non a preconnected set `s` and for some `a b ∈ s` we have `f a ≤ g a` and `g b ≤ f b`,\nthen for some `x ∈ s` we have `f x = g x`. -/\ntheorem ∀ {X : Type u} {α : Type v} [inst : TopologicalSpace X] [inst_1 : LinearOrder α] [inst_2 : TopologicalSpace α]\n  [inst_3 : OrderClosedTopology α] {s : Set X},\n  IsPreconnected s →\n    ∀ {a b : X},\n      a ∈ s →\n        b ∈ s → ∀ {f g : X → α}, ContinuousOn f s → ContinuousOn g s → f a ≤ g a → g b ≤ f b → ∃ x, x ∈ s ∧ f x = g x :=\n\n/-- For a function on a convex set in a linearly ordered space (where the order and the algebraic\nstructures aren't necessarily compatible), in order to prove that it is strictly convex, it suffices\nto verify the inequality `f (a • x + b • y) < a • f x + b • f y` for `x < y` and positive `a`, `b`.\nThe main use case is `E = 𝕜` however one can apply it, e.g., to `𝕜^n` with lexicographic order. -/\ntheorem ∀ {𝕜 : Type u_1} {E : Type u_2} {β : Type u_3} [inst : OrderedSemiring 𝕜] [inst_1 : AddCommMonoid E]\n  [inst_2 : OrderedAddCommMonoid β] [inst_3 : Module 𝕜 E] [inst_4 : Module 𝕜 β] [inst_5 : LinearOrder E] {s : Set E}\n  {f : E → β},\n  Convex 𝕜 s →\n    (∀ ⦃x : E⦄,\n        x ∈ s →\n          ∀ ⦃y : E⦄, y ∈ s → x < y → ∀ ⦃a b : 𝕜⦄, 0 < a → 0 < b → a + b = 1 → f (a • x + b • y) < a • f x + b • f y) →\n      StrictConvexOn 𝕜 s f :=\n\n/-- If `f` and `g` are continuous on `[a, b]`, `a < b`, `f x ≤ g x` on this interval, and\n`f c < g c` at some point `c ∈ [a, b]`, then `∫ x in a..b, f x < ∫ x in a..b, g x`. -/\ntheorem ∀ {f g : ℝ → ℝ} {a b : ℝ},\n  a < b →\n    ContinuousOn f (Set.Icc a b) →\n      ContinuousOn g (Set.Icc a b) →\n        (∀ (x : ℝ), x ∈ Set.Ioc a b → f x ≤ g x) →\n          (∃ c, c ∈ Set.Icc a b ∧ f c < g c) → ∫ (x : ℝ) in a..b, f x < ∫ (x : ℝ) in a..b, g x :=\n\n/-- If a function `f` is continuous and `f'` is strictly monotone on `ℝ` then `f` is strictly\nconvex. Note that we don't require differentiability, since it is guaranteed at all but at most\none point by the strict monotonicity of `f'`. -/\ntheorem ∀ {f : ℝ → ℝ}, Continuous f → StrictMono (deriv f) → StrictConvexOn ℝ Set.univ f :=\n\n/-- If a function `f` is twice differentiable on `ℝ`, and `f''` is nonpositive on `ℝ`,\nthen `f` is concave on `ℝ`. -/\ntheorem ∀ {f : ℝ → ℝ}, Differentiable ℝ f → Differentiable ℝ (deriv f) → (∀ (x : ℝ), deriv^[2] f x ≤ 0) → ConcaveOn ℝ Set.univ f :=\n\n/-- Assume that `f` is a continuous real function defined in `(a, b)` such that `f((x+y)/2) ≤ (f(x)+f(y))/2` for all `x, y ∈ (a, b)`. Prove that `f` is convex. -/\ntheorem", "choices": ["∀ {𝕜 : Type u_1} [inst : LinearOrderedField 𝕜] [inst_1 : TopologicalSpace 𝕜] [inst_2 : OrderTopology 𝕜] {s : Set 𝕜}\n  {f : 𝕜 → 𝕜},\n  ContinuousOn f s →\n    (∀ ⦃x : 𝕜⦄,\n        x ∈ s →\n          ∀ ⦃y : 𝕜⦄, y ∈ s → x < y → f ((x + y) / 2) ≤ (f x + f y) / 2) →\n      ConvexOn 𝕜 s f ", "∀ {a b : ℝ},\n  a < b →\n    ∀ {f : ℝ → ℝ},\n      ContinuousOn f (Set.Ioo a b) →\n        (∀ x y : ℝ, x ∈ Set.Ioo a b → y ∈ Set.Ioo a b → f ((x + y) / 2) ≤ (f x + f y) / 2) →\n          ConvexOn ℝ (Set.Ioo a b) f ", "forall {a b : ℝ} (hab : a < b),\n  ∀ {f : ℝ → ℝ},\n    ContinuousOn f (Set.Ioo a b) →\n    (∀ (x y : ℝ), x ∈ Set.Ioo a b → y ∈ Set.Ioo a b → f ((x + y) / 2) ≤ (f x + f y) / 2) →\n    ConvexOn ℝ (Set.Ioo a b) f ", "∀ {𝕜 : Type u_1} {E : Type u_2} {β : Type u_3} [inst : LinearOrderedField 𝕜] [inst_1 : OrderedAddCommGroup E]\n  [inst_2 : Module 𝕜 E] [inst_3 : LinearOrder β] [inst_4 : OrderedSmul 𝕜 β] {s : Set E}\n  {f : E → β},\n  Convex 𝕜 s →\n    (∀ ⦃x y : E⦄, x ∈ s → y ∈ s → f ((x + y) / 2) ≤ (f x + f y) / 2) →\n      ConvexOn 𝕜 s f ", "∀ {a b : ℝ},\n  a < b →\n    ∀ {f : ℝ → ℝ},\n      ContinuousOn f (Set.Ioo a b) →\n        (∀ (x y : ℝ), x ∈ Set.Ioo a b → y ∈ Set.Ioo a b → f ((x + y) / 2) ≤ (f x + f y) / 2) →\n          ConvexOn ℝ (Set.Ioo a b) f ", "∀ {s : Set ℝ} {f : ℝ → ℝ},\n  Convex ℝ s →\n    (∀ ⦃x y : ℝ⦄,\n        x ∈ s →\n          y ∈ s → ∀ ⦃a b : ℝ⦄, 0 < a → 0 < b → a + b = 2 → f ((a • x + b • y) / 2) ≤ (f x + f y) / 2) →\n      ConvexOn ℝ s f ", "∀ {𝕜 : Type u_1} {E : Type u_2} {β : Type u_3} [inst : OrderedSemiring 𝕜] [inst_1 : AddCommMonoid E]\n  [inst_2 : OrderedAddCommMonoid β] [inst_3 : Module 𝕜 E] [inst_4 : Module 𝕜 β] [inst_5 : LinearOrder E] {s : Set E}\n  {f : E → β},\n  Convex 𝕜 s →\n    (∀ ⦃x : E⦄,\n        x ∈ s →\n          ∀ ⦃y : E⦄, y ∈ s → x < y → ∀ ⦃a b : 𝕜⦄, 0 < a → 0 < b → a + b = 1 → f (a • x + b • y) ≤ a • f x + b • f y) →\n      ConvexOn 𝕜 s f ", "∀ {𝕜 : Type u_1} {E : Type u_2} {β : Type u_4} [inst : OrderedSemiring 𝕜] [inst_1 : AddCommMonoid E]\n  [inst_2 : OrderedAddCommMonoid β] [inst_3 : Module 𝕜 E] [inst_4 : Module 𝕜 β] {s : Set E}\n  {f : E → β},\n  Convex 𝕜 s →\n    (∀ ⦃x : E⦄,\n        x ∈ s →\n          ∀ ⦃y : E⦄, y ∈ s → (∀ (z : E), z = (x + y) / 2 → f z ≤ (f x + f y) / 2)) →\n      ConvexOn 𝕜 s f ", "∀ {a b : ℝ} (hab : a < b) {f : ℝ → ℝ},\n  ContinuousOn f (Set.Ioo a b) →\n    (∀ (x y : ℝ), x ∈ Set.Ioo a b → y ∈ Set.Ioo a b → f ((x + y) / 2) ≤ (f x + f y) / 2) →\n      ConvexOn ℝ (Set.Ioo a b) f ", "forall {a b : ℝ} (hab : a < b) {f : ℝ → ℝ},\n  ContinuousOn f (Set.Ioo a b) →\n    (∀ x y : ℝ, x ∈ Set.Ioo a b → y ∈ Set.Ioo a b → f ((x + y) / 2) ≤ (f x + f y) / 2) →\n      ConvexOn ℝ (Set.Ioo a b) f "]}
{"docString": "Suppose `f'(x) > 0` in `(a, b)`. Prove that `f` is strictly increasing in `(a, b)`, and let `g` be its inverse function. Prove that `g` is differentiable, and that `g'(f(x)) = 1/f'(x)` for `(a < x < b)`.", "prompts": "[{\"theorem\":\n  \"∀ {f g : ℝ → ℝ} {a b : ℝ},\\n  a < b →\\n    ContinuousOn f (Set.Icc a b) →\\n      ContinuousOn g (Set.Icc a b) →\\n        (∀ (x : ℝ), x ∈ Set.Ioc a b → f x ≤ g x) →\\n          (∃ c, c ∈ Set.Icc a b ∧ f c < g c) → ∫ (x : ℝ) in a..b, f x < ∫ (x : ℝ) in a..b, g x\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` and `g` are continuous on `[a, b]`, `a < b`, `f x ≤ g x` on this interval, and\\n`f c < g c` at some point `c ∈ [a, b]`, then `∫ x in a..b, f x < ∫ x in a..b, g x`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : SemilatticeSup α] {β : Type u_1} [inst_1 : Preorder β] {f g : α → β},\\n  Monotone f → Antitone g → f ≤ g → ∀ (m n : α), f m ≤ g n\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` is monotone, `g` is antitone, and `f ≤ g`, then for all `a`, `b` we have `f a ≤ g b`. \"},\n {\"theorem\":\n  \"∀ {X : Type u} {α : Type v} [inst : TopologicalSpace X] [inst_1 : LinearOrder α] [inst_2 : TopologicalSpace α]\\n  [inst_3 : OrderClosedTopology α] {s : Set X},\\n  IsPreconnected s →\\n    ∀ {a b : X},\\n      a ∈ s →\\n        b ∈ s → ∀ {f g : X → α}, ContinuousOn f s → ContinuousOn g s → f a ≤ g a → g b ≤ f b → ∃ x, x ∈ s ∧ f x = g x\",\n  \"isProp\": true,\n  \"docString\":\n  \"Intermediate value theorem for two functions: if `f` and `g` are two functions continuous\\non a preconnected set `s` and for some `a b ∈ s` we have `f a ≤ g a` and `g b ≤ f b`,\\nthen for some `x ∈ s` we have `f x = g x`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u} [inst : NontriviallyNormedField 𝕜] {f g : 𝕜 → 𝕜} {f' a : 𝕜},\\n  ContinuousAt g a →\\n    HasStrictDerivAt f f' (g a) → f' ≠ 0 → (∀ᶠ (y : 𝕜) in nhds a, f (g y) = y) → HasStrictDerivAt g f'⁻¹ a\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f (g y) = y` for `y` in some neighborhood of `a`, `g` is continuous at `a`, and `f` has an\\ninvertible derivative `f'` at `g a` in the strict sense, then `g` has the derivative `f'⁻¹` at `a`\\nin the strict sense.\\n\\nThis is one of the easy parts of the inverse function theorem: it assumes that we already have an\\ninverse function. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} [inst : NontriviallyNormedField 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] {F : Type u_3} [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] {f : E → F}\\n  {f' : E ≃L[𝕜] F} {g : F → E} {a : F},\\n  ContinuousAt g a →\\n    HasFDerivAt f (↑f') (g a) → (∀ᶠ (y : F) in nhds a, f (g y) = y) → HasFDerivAt g (↑(ContinuousLinearEquiv.symm f')) a\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f (g y) = y` for `y` in some neighborhood of `a`, `g` is continuous at `a`, and `f` has an\\ninvertible derivative `f'` at `g a`, then `g` has the derivative `f'⁻¹` at `a`.\\n\\nThis is one of the easy parts of the inverse function theorem: it assumes that we already have\\nan inverse function. \"},\n {\"theorem\":\n  \"∀ {X : Type u} {α : Type v} [inst : TopologicalSpace X] [inst_1 : LinearOrder α] [inst_2 : TopologicalSpace α]\\n  [inst_3 : OrderClosedTopology α] [inst_4 : PreconnectedSpace X] {a b : X} {f g : X → α},\\n  Continuous f → Continuous g → f a ≤ g a → g b ≤ f b → ∃ x, f x = g x\",\n  \"isProp\": true,\n  \"docString\":\n  \"Intermediate value theorem for two functions: if `f` and `g` are two continuous functions\\non a preconnected space and `f a ≤ g a` and `g b ≤ f b`, then for some `x` we have `f x = g x`. \"},\n {\"theorem\":\n  \"∀ {f f' : ℝ → ℝ} {a b : ℝ},\\n  ContinuousOn f (Set.Icc a b) →\\n    (∀ (x : ℝ), x ∈ Set.Ico a b → ∀ (r : ℝ), f' x < r → ∃ᶠ (z : ℝ) in nhdsWithin x (Set.Ioi x), slope f x z < r) →\\n      ∀ {B B' : ℝ → ℝ},\\n        f a ≤ B a →\\n          (∀ (x : ℝ), HasDerivAt B (B' x) x) →\\n            (∀ (x : ℝ), x ∈ Set.Ico a b → f x = B x → f' x < B' x) → ∀ ⦃x : ℝ⦄, x ∈ Set.Icc a b → f x ≤ B x\",\n  \"isProp\": true,\n  \"docString\":\n  \"General fencing theorem for continuous functions with an estimate on the derivative.\\nLet `f` and `B` be continuous functions on `[a, b]` such that\\n\\n* `f a ≤ B a`;\\n* `B` has derivative `B'` everywhere on `ℝ`;\\n* for each `x ∈ [a, b)` the right-side limit inferior of `(f z - f x) / (z - x)`\\n  is bounded above by a function `f'`;\\n* we have `f' x < B' x` whenever `f x = B x`.\\n\\nThen `f x ≤ B x` everywhere on `[a, b]`. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : CompleteSpace E] [inst_2 : NormedSpace ℝ E] {a b : ℝ}\\n  {f f' : ℝ → ℝ} {g : ℝ → E},\\n  ContinuousOn f (Set.uIcc a b) →\\n    (∀ (x : ℝ), x ∈ Set.Ioo (min a b) (max a b) → HasDerivWithinAt f (f' x) (Set.Ioi x) x) →\\n      ContinuousOn g (f '' Set.Ioo (min a b) (max a b)) →\\n        MeasureTheory.IntegrableOn g (f '' Set.uIcc a b) →\\n          MeasureTheory.IntegrableOn (fun x => f' x • (g ∘ f) x) (Set.uIcc a b) →\\n            ∫ (x : ℝ) in a..b, f' x • (g ∘ f) x = ∫ (u : ℝ) in f a..f b, g u\",\n  \"isProp\": true,\n  \"docString\":\n  \"Change of variables, general form. If `f` is continuous on `[a, b]` and has\\nright-derivative `f'` in `(a, b)`, `g` is continuous on `f '' (a, b)` and integrable on\\n`f '' [a, b]`, and `f' x • (g ∘ f) x` is integrable on `[a, b]`,\\nthen we can substitute `u = f x` to get `∫ x in a..b, f' x • (g ∘ f) x = ∫ u in f a..f b, g u`.\\n\"},\n {\"theorem\":\n  \"∀ {f f' : ℝ → ℝ} {a b : ℝ},\\n  ContinuousOn f (Set.Icc a b) →\\n    (∀ (x : ℝ), x ∈ Set.Ico a b → HasDerivWithinAt f (f' x) (Set.Ici x) x) →\\n      ∀ {B B' : ℝ → ℝ},\\n        f a ≤ B a →\\n          ContinuousOn B (Set.Icc a b) →\\n            (∀ (x : ℝ), x ∈ Set.Ico a b → HasDerivWithinAt B (B' x) (Set.Ici x) x) →\\n              (∀ (x : ℝ), x ∈ Set.Ico a b → f' x ≤ B' x) → ∀ ⦃x : ℝ⦄, x ∈ Set.Icc a b → f x ≤ B x\",\n  \"isProp\": true,\n  \"docString\":\n  \"General fencing theorem for continuous functions with an estimate on the derivative.\\nLet `f` and `B` be continuous functions on `[a, b]` such that\\n\\n* `f a ≤ B a`;\\n* `B` has derivative `B'` everywhere on `ℝ`;\\n* `f` has right derivative `f'` at every point of `[a, b)`;\\n* we have `f' x ≤ B' x` on `[a, b)`.\\n\\nThen `f x ≤ B x` everywhere on `[a, b]`. \"},\n {\"theorem\":\n  \"∀ {f g : ℝ → ℝ} {a b : ℝ} {μ : MeasureTheory.Measure ℝ},\\n  a ≤ b →\\n    IntervalIntegrable f μ a b →\\n      IntervalIntegrable g μ a b →\\n        f ≤ᶠ[MeasureTheory.Measure.ae (MeasureTheory.Measure.restrict μ (Set.Ioc a b))] g →\\n          ↑↑(MeasureTheory.Measure.restrict μ (Set.Ioc a b)) {x | f x < g x} ≠ 0 →\\n            ∫ (x : ℝ) in a..b, f x ∂μ < ∫ (x : ℝ) in a..b, g x ∂μ\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` and `g` are two functions that are interval integrable on `a..b`, `a ≤ b`,\\n`f x ≤ g x` for a.e. `x ∈ Set.Ioc a b`, and `f x < g x` on a subset of `Set.Ioc a b`\\nof nonzero measure, then `∫ x in a..b, f x ∂μ < ∫ x in a..b, g x ∂μ`. \"},\n {\"theorem\":\n  \"∀ {f f' : ℝ → ℝ} {a b : ℝ},\\n  ContinuousOn f (Set.Icc a b) →\\n    (∀ (x : ℝ), x ∈ Set.Ico a b → HasDerivWithinAt f (f' x) (Set.Ici x) x) →\\n      ∀ {B B' : ℝ → ℝ},\\n        f a ≤ B a →\\n          (∀ (x : ℝ), HasDerivAt B (B' x) x) →\\n            (∀ (x : ℝ), x ∈ Set.Ico a b → f x = B x → f' x < B' x) → ∀ ⦃x : ℝ⦄, x ∈ Set.Icc a b → f x ≤ B x\",\n  \"isProp\": true,\n  \"docString\":\n  \"General fencing theorem for continuous functions with an estimate on the derivative.\\nLet `f` and `B` be continuous functions on `[a, b]` such that\\n\\n* `f a ≤ B a`;\\n* `B` has derivative `B'` everywhere on `ℝ`;\\n* `f` has right derivative `f'` at every point of `[a, b)`;\\n* we have `f' x < B' x` whenever `f x = B x`.\\n\\nThen `f x ≤ B x` everywhere on `[a, b]`. \"},\n {\"theorem\":\n  \"∀ {f f' : ℝ → ℝ} {a b : ℝ},\\n  ContinuousOn f (Set.Icc a b) →\\n    (∀ (x : ℝ), x ∈ Set.Ico a b → HasDerivWithinAt f (f' x) (Set.Ici x) x) →\\n      ∀ {B B' : ℝ → ℝ},\\n        f a ≤ B a →\\n          ContinuousOn B (Set.Icc a b) →\\n            (∀ (x : ℝ), x ∈ Set.Ico a b → HasDerivWithinAt B (B' x) (Set.Ici x) x) →\\n              (∀ (x : ℝ), x ∈ Set.Ico a b → f x = B x → f' x < B' x) → ∀ ⦃x : ℝ⦄, x ∈ Set.Icc a b → f x ≤ B x\",\n  \"isProp\": true,\n  \"docString\":\n  \"General fencing theorem for continuous functions with an estimate on the derivative.\\nLet `f` and `B` be continuous functions on `[a, b]` such that\\n\\n* `f a ≤ B a`;\\n* `B` has right derivative `B'` at every point of `[a, b)`;\\n* `f` has right derivative `f'` at every point of `[a, b)`;\\n* we have `f' x < B' x` whenever `f x = B x`.\\n\\nThen `f x ≤ B x` everywhere on `[a, b]`. \"},\n {\"theorem\":\n  \"∀ {f : ℝ → ℝ} {a b : ℝ},\\n  IntervalIntegrable f MeasureTheory.volume a b →\\n    (∀ (x : ℝ), x ∈ Set.Ioo a b → 0 < f x) → a < b → 0 < ∫ (x : ℝ) in a..b, f x\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f : ℝ → ℝ` is integrable on `(a, b]` for real numbers `a < b`, and positive on the interior\\nof the interval, then its integral over `a..b` is strictly positive. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : CompleteSpace E] [inst_2 : NormedSpace ℝ E] {f : ℝ → E}\\n  {a b : ℝ},\\n  IntervalIntegrable f MeasureTheory.volume a b →\\n    StronglyMeasurableAtFilter f (nhds b) → ContinuousAt f b → HasDerivAt (fun u => ∫ (x : ℝ) in a..u, f x) (f b) b\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Fundamental theorem of calculus-1**: if `f : ℝ → E` is integrable on `a..b` and `f` is\\ncontinuous at `b`, then `u ↦ ∫ x in a..u, f x` has derivative `f b` at `b`. \"},\n {\"theorem\":\n  \"∀ {f f' : ℝ → ℝ} {a b : ℝ},\\n  ContinuousOn f (Set.Icc a b) →\\n    (∀ (x : ℝ), x ∈ Set.Ico a b → ∀ (r : ℝ), f' x < r → ∃ᶠ (z : ℝ) in nhdsWithin x (Set.Ioi x), slope f x z < r) →\\n      ∀ {B B' : ℝ → ℝ},\\n        f a ≤ B a →\\n          ContinuousOn B (Set.Icc a b) →\\n            (∀ (x : ℝ), x ∈ Set.Ico a b → HasDerivWithinAt B (B' x) (Set.Ici x) x) →\\n              (∀ (x : ℝ), x ∈ Set.Ico a b → f x = B x → f' x < B' x) → ∀ ⦃x : ℝ⦄, x ∈ Set.Icc a b → f x ≤ B x\",\n  \"isProp\": true,\n  \"docString\":\n  \"General fencing theorem for continuous functions with an estimate on the derivative.\\nLet `f` and `B` be continuous functions on `[a, b]` such that\\n\\n* `f a ≤ B a`;\\n* `B` has right derivative `B'` at every point of `[a, b)`;\\n* for each `x ∈ [a, b)` the right-side limit inferior of `(f z - f x) / (z - x)`\\n  is bounded above by a function `f'`;\\n* we have `f' x < B' x` whenever `f x = B x`.\\n\\nThen `f x ≤ B x` everywhere on `[a, b]`. \"},\n {\"theorem\":\n  \"∀ {f : ℝ → ℝ} {a b : ℝ},\\n  0 < b →\\n    ContinuousOn f (Set.Ici a) → (f =O[Filter.atTop] fun x => rexp (-b * x)) → MeasureTheory.IntegrableOn f (Set.Ioi a)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` is continuous on `[a, ∞)`, and is `O (exp (-b * x))` at `∞` for some `b > 0`, then\\n`f` is integrable on `(a, ∞)`. \"},\n {\"theorem\": \"∀ {f : ℝ → ℝ}, (∀ (x : ℝ), 0 < deriv f x) → StrictMono f\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `f : ℝ → ℝ` be a differentiable function. If `f'` is positive, then\\n`f` is a strictly monotone function.\\nNote that we don't require differentiability explicitly as it already implied by the derivative\\nbeing strictly positive. \"},\n {\"theorem\":\n  \"∀ {f : ℝ → ℝ} {a b : ℝ},\\n  ContinuousOn f (Set.Icc a b) →\\n    ∀ {B B' : ℝ → ℝ},\\n      f a ≤ B a →\\n        ContinuousOn B (Set.Icc a b) →\\n          (∀ (x : ℝ), x ∈ Set.Ico a b → HasDerivWithinAt B (B' x) (Set.Ici x) x) →\\n            (∀ (x : ℝ),\\n                x ∈ Set.Ico a b → ∀ (r : ℝ), B' x < r → ∃ᶠ (z : ℝ) in nhdsWithin x (Set.Ioi x), slope f x z < r) →\\n              ∀ ⦃x : ℝ⦄, x ∈ Set.Icc a b → f x ≤ B x\",\n  \"isProp\": true,\n  \"docString\":\n  \"General fencing theorem for continuous functions with an estimate on the derivative.\\nLet `f` and `B` be continuous functions on `[a, b]` such that\\n\\n* `f a ≤ B a`;\\n* `B` has right derivative `B'` at every point of `[a, b)`;\\n* for each `x ∈ [a, b)` the right-side limit inferior of `(f z - f x) / (z - x)`\\n  is bounded above by `B'`.\\n\\nThen `f x ≤ B x` everywhere on `[a, b]`. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : CompleteSpace E] [inst_2 : NormedSpace ℝ E] {f : ℝ → E}\\n  {a b : ℝ},\\n  IntervalIntegrable f MeasureTheory.volume a b →\\n    ∀ {s t : Set ℝ} [inst_3 : intervalIntegral.FTCFilter b (nhdsWithin b s) (nhdsWithin b t)],\\n      StronglyMeasurableAtFilter f (nhdsWithin b t) →\\n        ContinuousWithinAt f t b →\\n          autoParam (UniqueDiffWithinAt ℝ s b) _auto✝ → derivWithin (fun u => ∫ (x : ℝ) in a..u, f x) s b = f b\",\n  \"isProp\": true,\n  \"docString\":\n  \"Fundamental theorem of calculus: if `f : ℝ → E` is integrable on `a..b` and `f x` is continuous\\non the right or on the left at `b`, then the right (resp., left) derivative of\\n`u ↦ ∫ x in a..u, f x` at `b` equals `f b`. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : CompleteSpace E] [inst_2 : NormedSpace ℝ E] {f f' : ℝ → E}\\n  {a b : ℝ},\\n  a ≤ b →\\n    ContinuousOn f (Set.Icc a b) →\\n      (∀ (x : ℝ), x ∈ Set.Ioo a b → HasDerivAt f (f' x) x) →\\n        IntervalIntegrable f' MeasureTheory.volume a b → ∫ (y : ℝ) in a..b, f' y = f b - f a\",\n  \"isProp\": true,\n  \"docString\":\n  \"Fundamental theorem of calculus-2: If `f : ℝ → E` is continuous on `[a, b]` (where `a ≤ b`) and\\nhas a derivative at `f' x` for all `x` in `(a, b)`, and `f'` is integrable on `[a, b]`, then\\n`∫ y in a..b, f' y` equals `f b - f a`. \"}]\n", "prompt_cons": "/-- If `f` and `g` are continuous on `[a, b]`, `a < b`, `f x ≤ g x` on this interval, and\n`f c < g c` at some point `c ∈ [a, b]`, then `∫ x in a..b, f x < ∫ x in a..b, g x`. -/\ntheorem ∀ {f g : ℝ → ℝ} {a b : ℝ},\n  a < b →\n    ContinuousOn f (Set.Icc a b) →\n      ContinuousOn g (Set.Icc a b) →\n        (∀ (x : ℝ), x ∈ Set.Ioc a b → f x ≤ g x) →\n          (∃ c, c ∈ Set.Icc a b ∧ f c < g c) → ∫ (x : ℝ) in a..b, f x < ∫ (x : ℝ) in a..b, g x :=\n\n/-- If `f` is monotone, `g` is antitone, and `f ≤ g`, then for all `a`, `b` we have `f a ≤ g b`. -/\ntheorem ∀ {α : Type u} [inst : SemilatticeSup α] {β : Type u_1} [inst_1 : Preorder β] {f g : α → β},\n  Monotone f → Antitone g → f ≤ g → ∀ (m n : α), f m ≤ g n :=\n\n/-- Intermediate value theorem for two functions: if `f` and `g` are two functions continuous\non a preconnected set `s` and for some `a b ∈ s` we have `f a ≤ g a` and `g b ≤ f b`,\nthen for some `x ∈ s` we have `f x = g x`. -/\ntheorem ∀ {X : Type u} {α : Type v} [inst : TopologicalSpace X] [inst_1 : LinearOrder α] [inst_2 : TopologicalSpace α]\n  [inst_3 : OrderClosedTopology α] {s : Set X},\n  IsPreconnected s →\n    ∀ {a b : X},\n      a ∈ s →\n        b ∈ s → ∀ {f g : X → α}, ContinuousOn f s → ContinuousOn g s → f a ≤ g a → g b ≤ f b → ∃ x, x ∈ s ∧ f x = g x :=\n\n/-- If `f (g y) = y` for `y` in some neighborhood of `a`, `g` is continuous at `a`, and `f` has an\ninvertible derivative `f'` at `g a` in the strict sense, then `g` has the derivative `f'⁻¹` at `a`\nin the strict sense.\n\nThis is one of the easy parts of the inverse function theorem: it assumes that we already have an\ninverse function. -/\ntheorem ∀ {𝕜 : Type u} [inst : NontriviallyNormedField 𝕜] {f g : 𝕜 → 𝕜} {f' a : 𝕜},\n  ContinuousAt g a →\n    HasStrictDerivAt f f' (g a) → f' ≠ 0 → (∀ᶠ (y : 𝕜) in nhds a, f (g y) = y) → HasStrictDerivAt g f'⁻¹ a :=\n\n/-- If `f (g y) = y` for `y` in some neighborhood of `a`, `g` is continuous at `a`, and `f` has an\ninvertible derivative `f'` at `g a`, then `g` has the derivative `f'⁻¹` at `a`.\n\nThis is one of the easy parts of the inverse function theorem: it assumes that we already have\nan inverse function. -/\ntheorem ∀ {𝕜 : Type u_1} [inst : NontriviallyNormedField 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E] {F : Type u_3} [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] {f : E → F}\n  {f' : E ≃L[𝕜] F} {g : F → E} {a : F},\n  ContinuousAt g a →\n    HasFDerivAt f (↑f') (g a) → (∀ᶠ (y : F) in nhds a, f (g y) = y) → HasFDerivAt g (↑(ContinuousLinearEquiv.symm f')) a :=\n\n/-- Intermediate value theorem for two functions: if `f` and `g` are two continuous functions\non a preconnected space and `f a ≤ g a` and `g b ≤ f b`, then for some `x` we have `f x = g x`. -/\ntheorem ∀ {X : Type u} {α : Type v} [inst : TopologicalSpace X] [inst_1 : LinearOrder α] [inst_2 : TopologicalSpace α]\n  [inst_3 : OrderClosedTopology α] [inst_4 : PreconnectedSpace X] {a b : X} {f g : X → α},\n  Continuous f → Continuous g → f a ≤ g a → g b ≤ f b → ∃ x, f x = g x :=\n\n/-- General fencing theorem for continuous functions with an estimate on the derivative.\nLet `f` and `B` be continuous functions on `[a, b]` such that\n\n* `f a ≤ B a`;\n* `B` has derivative `B'` everywhere on `ℝ`;\n* for each `x ∈ [a, b)` the right-side limit inferior of `(f z - f x) / (z - x)`\n  is bounded above by a function `f'`;\n* we have `f' x < B' x` whenever `f x = B x`.\n\nThen `f x ≤ B x` everywhere on `[a, b]`. -/\ntheorem ∀ {f f' : ℝ → ℝ} {a b : ℝ},\n  ContinuousOn f (Set.Icc a b) →\n    (∀ (x : ℝ), x ∈ Set.Ico a b → ∀ (r : ℝ), f' x < r → ∃ᶠ (z : ℝ) in nhdsWithin x (Set.Ioi x), slope f x z < r) →\n      ∀ {B B' : ℝ → ℝ},\n        f a ≤ B a →\n          (∀ (x : ℝ), HasDerivAt B (B' x) x) →\n            (∀ (x : ℝ), x ∈ Set.Ico a b → f x = B x → f' x < B' x) → ∀ ⦃x : ℝ⦄, x ∈ Set.Icc a b → f x ≤ B x :=\n\n/-- Change of variables, general form. If `f` is continuous on `[a, b]` and has\nright-derivative `f'` in `(a, b)`, `g` is continuous on `f '' (a, b)` and integrable on\n`f '' [a, b]`, and `f' x • (g ∘ f) x` is integrable on `[a, b]`,\nthen we can substitute `u = f x` to get `∫ x in a..b, f' x • (g ∘ f) x = ∫ u in f a..f b, g u`. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : CompleteSpace E] [inst_2 : NormedSpace ℝ E] {a b : ℝ}\n  {f f' : ℝ → ℝ} {g : ℝ → E},\n  ContinuousOn f (Set.uIcc a b) →\n    (∀ (x : ℝ), x ∈ Set.Ioo (min a b) (max a b) → HasDerivWithinAt f (f' x) (Set.Ioi x) x) →\n      ContinuousOn g (f '' Set.Ioo (min a b) (max a b)) →\n        MeasureTheory.IntegrableOn g (f '' Set.uIcc a b) →\n          MeasureTheory.IntegrableOn (fun x => f' x • (g ∘ f) x) (Set.uIcc a b) →\n            ∫ (x : ℝ) in a..b, f' x • (g ∘ f) x = ∫ (u : ℝ) in f a..f b, g u :=\n\n/-- General fencing theorem for continuous functions with an estimate on the derivative.\nLet `f` and `B` be continuous functions on `[a, b]` such that\n\n* `f a ≤ B a`;\n* `B` has derivative `B'` everywhere on `ℝ`;\n* `f` has right derivative `f'` at every point of `[a, b)`;\n* we have `f' x ≤ B' x` on `[a, b)`.\n\nThen `f x ≤ B x` everywhere on `[a, b]`. -/\ntheorem ∀ {f f' : ℝ → ℝ} {a b : ℝ},\n  ContinuousOn f (Set.Icc a b) →\n    (∀ (x : ℝ), x ∈ Set.Ico a b → HasDerivWithinAt f (f' x) (Set.Ici x) x) →\n      ∀ {B B' : ℝ → ℝ},\n        f a ≤ B a →\n          ContinuousOn B (Set.Icc a b) →\n            (∀ (x : ℝ), x ∈ Set.Ico a b → HasDerivWithinAt B (B' x) (Set.Ici x) x) →\n              (∀ (x : ℝ), x ∈ Set.Ico a b → f' x ≤ B' x) → ∀ ⦃x : ℝ⦄, x ∈ Set.Icc a b → f x ≤ B x :=\n\n/-- If `f` and `g` are two functions that are interval integrable on `a..b`, `a ≤ b`,\n`f x ≤ g x` for a.e. `x ∈ Set.Ioc a b`, and `f x < g x` on a subset of `Set.Ioc a b`\nof nonzero measure, then `∫ x in a..b, f x ∂μ < ∫ x in a..b, g x ∂μ`. -/\ntheorem ∀ {f g : ℝ → ℝ} {a b : ℝ} {μ : MeasureTheory.Measure ℝ},\n  a ≤ b →\n    IntervalIntegrable f μ a b →\n      IntervalIntegrable g μ a b →\n        f ≤ᶠ[MeasureTheory.Measure.ae (MeasureTheory.Measure.restrict μ (Set.Ioc a b))] g →\n          ↑↑(MeasureTheory.Measure.restrict μ (Set.Ioc a b)) {x | f x < g x} ≠ 0 →\n            ∫ (x : ℝ) in a..b, f x ∂μ < ∫ (x : ℝ) in a..b, g x ∂μ :=\n\n/-- General fencing theorem for continuous functions with an estimate on the derivative.\nLet `f` and `B` be continuous functions on `[a, b]` such that\n\n* `f a ≤ B a`;\n* `B` has derivative `B'` everywhere on `ℝ`;\n* `f` has right derivative `f'` at every point of `[a, b)`;\n* we have `f' x < B' x` whenever `f x = B x`.\n\nThen `f x ≤ B x` everywhere on `[a, b]`. -/\ntheorem ∀ {f f' : ℝ → ℝ} {a b : ℝ},\n  ContinuousOn f (Set.Icc a b) →\n    (∀ (x : ℝ), x ∈ Set.Ico a b → HasDerivWithinAt f (f' x) (Set.Ici x) x) →\n      ∀ {B B' : ℝ → ℝ},\n        f a ≤ B a →\n          (∀ (x : ℝ), HasDerivAt B (B' x) x) →\n            (∀ (x : ℝ), x ∈ Set.Ico a b → f x = B x → f' x < B' x) → ∀ ⦃x : ℝ⦄, x ∈ Set.Icc a b → f x ≤ B x :=\n\n/-- General fencing theorem for continuous functions with an estimate on the derivative.\nLet `f` and `B` be continuous functions on `[a, b]` such that\n\n* `f a ≤ B a`;\n* `B` has right derivative `B'` at every point of `[a, b)`;\n* `f` has right derivative `f'` at every point of `[a, b)`;\n* we have `f' x < B' x` whenever `f x = B x`.\n\nThen `f x ≤ B x` everywhere on `[a, b]`. -/\ntheorem ∀ {f f' : ℝ → ℝ} {a b : ℝ},\n  ContinuousOn f (Set.Icc a b) →\n    (∀ (x : ℝ), x ∈ Set.Ico a b → HasDerivWithinAt f (f' x) (Set.Ici x) x) →\n      ∀ {B B' : ℝ → ℝ},\n        f a ≤ B a →\n          ContinuousOn B (Set.Icc a b) →\n            (∀ (x : ℝ), x ∈ Set.Ico a b → HasDerivWithinAt B (B' x) (Set.Ici x) x) →\n              (∀ (x : ℝ), x ∈ Set.Ico a b → f x = B x → f' x < B' x) → ∀ ⦃x : ℝ⦄, x ∈ Set.Icc a b → f x ≤ B x :=\n\n/-- If `f : ℝ → ℝ` is integrable on `(a, b]` for real numbers `a < b`, and positive on the interior\nof the interval, then its integral over `a..b` is strictly positive. -/\ntheorem ∀ {f : ℝ → ℝ} {a b : ℝ},\n  IntervalIntegrable f MeasureTheory.volume a b →\n    (∀ (x : ℝ), x ∈ Set.Ioo a b → 0 < f x) → a < b → 0 < ∫ (x : ℝ) in a..b, f x :=\n\n/-- **Fundamental theorem of calculus-1**: if `f : ℝ → E` is integrable on `a..b` and `f` is\ncontinuous at `b`, then `u ↦ ∫ x in a..u, f x` has derivative `f b` at `b`. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : CompleteSpace E] [inst_2 : NormedSpace ℝ E] {f : ℝ → E}\n  {a b : ℝ},\n  IntervalIntegrable f MeasureTheory.volume a b →\n    StronglyMeasurableAtFilter f (nhds b) → ContinuousAt f b → HasDerivAt (fun u => ∫ (x : ℝ) in a..u, f x) (f b) b :=\n\n/-- General fencing theorem for continuous functions with an estimate on the derivative.\nLet `f` and `B` be continuous functions on `[a, b]` such that\n\n* `f a ≤ B a`;\n* `B` has right derivative `B'` at every point of `[a, b)`;\n* for each `x ∈ [a, b)` the right-side limit inferior of `(f z - f x) / (z - x)`\n  is bounded above by a function `f'`;\n* we have `f' x < B' x` whenever `f x = B x`.\n\nThen `f x ≤ B x` everywhere on `[a, b]`. -/\ntheorem ∀ {f f' : ℝ → ℝ} {a b : ℝ},\n  ContinuousOn f (Set.Icc a b) →\n    (∀ (x : ℝ), x ∈ Set.Ico a b → ∀ (r : ℝ), f' x < r → ∃ᶠ (z : ℝ) in nhdsWithin x (Set.Ioi x), slope f x z < r) →\n      ∀ {B B' : ℝ → ℝ},\n        f a ≤ B a →\n          ContinuousOn B (Set.Icc a b) →\n            (∀ (x : ℝ), x ∈ Set.Ico a b → HasDerivWithinAt B (B' x) (Set.Ici x) x) →\n              (∀ (x : ℝ), x ∈ Set.Ico a b → f x = B x → f' x < B' x) → ∀ ⦃x : ℝ⦄, x ∈ Set.Icc a b → f x ≤ B x :=\n\n/-- If `f` is continuous on `[a, ∞)`, and is `O (exp (-b * x))` at `∞` for some `b > 0`, then\n`f` is integrable on `(a, ∞)`. -/\ntheorem ∀ {f : ℝ → ℝ} {a b : ℝ},\n  0 < b →\n    ContinuousOn f (Set.Ici a) → (f =O[Filter.atTop] fun x => rexp (-b * x)) → MeasureTheory.IntegrableOn f (Set.Ioi a) :=\n\n/-- Let `f : ℝ → ℝ` be a differentiable function. If `f'` is positive, then\n`f` is a strictly monotone function.\nNote that we don't require differentiability explicitly as it already implied by the derivative\nbeing strictly positive. -/\ntheorem ∀ {f : ℝ → ℝ}, (∀ (x : ℝ), 0 < deriv f x) → StrictMono f :=\n\n/-- General fencing theorem for continuous functions with an estimate on the derivative.\nLet `f` and `B` be continuous functions on `[a, b]` such that\n\n* `f a ≤ B a`;\n* `B` has right derivative `B'` at every point of `[a, b)`;\n* for each `x ∈ [a, b)` the right-side limit inferior of `(f z - f x) / (z - x)`\n  is bounded above by `B'`.\n\nThen `f x ≤ B x` everywhere on `[a, b]`. -/\ntheorem ∀ {f : ℝ → ℝ} {a b : ℝ},\n  ContinuousOn f (Set.Icc a b) →\n    ∀ {B B' : ℝ → ℝ},\n      f a ≤ B a →\n        ContinuousOn B (Set.Icc a b) →\n          (∀ (x : ℝ), x ∈ Set.Ico a b → HasDerivWithinAt B (B' x) (Set.Ici x) x) →\n            (∀ (x : ℝ),\n                x ∈ Set.Ico a b → ∀ (r : ℝ), B' x < r → ∃ᶠ (z : ℝ) in nhdsWithin x (Set.Ioi x), slope f x z < r) →\n              ∀ ⦃x : ℝ⦄, x ∈ Set.Icc a b → f x ≤ B x :=\n\n/-- Fundamental theorem of calculus: if `f : ℝ → E` is integrable on `a..b` and `f x` is continuous\non the right or on the left at `b`, then the right (resp., left) derivative of\n`u ↦ ∫ x in a..u, f x` at `b` equals `f b`. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : CompleteSpace E] [inst_2 : NormedSpace ℝ E] {f : ℝ → E}\n  {a b : ℝ},\n  IntervalIntegrable f MeasureTheory.volume a b →\n    ∀ {s t : Set ℝ} [inst_3 : intervalIntegral.FTCFilter b (nhdsWithin b s) (nhdsWithin b t)],\n      StronglyMeasurableAtFilter f (nhdsWithin b t) →\n        ContinuousWithinAt f t b →\n          autoParam (UniqueDiffWithinAt ℝ s b) _auto✝ → derivWithin (fun u => ∫ (x : ℝ) in a..u, f x) s b = f b :=\n\n/-- Fundamental theorem of calculus-2: If `f : ℝ → E` is continuous on `[a, b]` (where `a ≤ b`) and\nhas a derivative at `f' x` for all `x` in `(a, b)`, and `f'` is integrable on `[a, b]`, then\n`∫ y in a..b, f' y` equals `f b - f a`. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : CompleteSpace E] [inst_2 : NormedSpace ℝ E] {f f' : ℝ → E}\n  {a b : ℝ},\n  a ≤ b →\n    ContinuousOn f (Set.Icc a b) →\n      (∀ (x : ℝ), x ∈ Set.Ioo a b → HasDerivAt f (f' x) x) →\n        IntervalIntegrable f' MeasureTheory.volume a b → ∫ (y : ℝ) in a..b, f' y = f b - f a :=\n\n/-- Suppose `f'(x) > 0` in `(a, b)`. Prove that `f` is strictly increasing in `(a, b)`, and let `g` be its inverse function. Prove that `g` is differentiable, and that `g'(f(x)) = 1/f'(x)` for `(a < x < b)`. -/\ntheorem", "choices": ["∀ {f : ℝ → ℝ} {a b : ℝ},\n  (∀ (x : ℝ), x ∈ Set.Ioo a b → 0 < deriv f x) →\n    StrictMono f →\n      let g ", "∀ {f : ℝ → ℝ} {a b : ℝ},\n  (∀ (x : ℝ), x ∈ Set.Ioo a b → 0 < deriv f x) →\n    (StrictMono f ∧\n      ∀ {x : ℝ},\n        x ∈ Set.Ioo a b →\n          ∃ g, (∀ (y : ℝ), y ∈ Set.Ioo (f a) (f b) → (g ∘ f) y = y) ∧\n                    HasDerivAt g (deriv f x)⁻¹ (f x)) ", "∀ {f : ℝ → ℝ} {a b : ℝ},\n  ContinuousOn f (Set.Icc a b) →\n    (∀ (x : ℝ), x ∈ Set.Ioo a b → 0 < deriv f x) →\n      StrictMono f →\n        let g ", "∀ {f f' : ℝ → ℝ} {a b : ℝ},\n  ContinuousOn f (Set.Icc a b) →\n    (∀ (x : ℝ), x ∈ Set.Ioo a b → HasDerivAt f (f' x) x) →\n      (∀ (x : ℝ), x ∈ Set.Ioo a b → 0 < f' x) →\n        StrictMonoOn f (Set.Ioo a b) ∧\n          ∃ (g : ℝ → ℝ),\n            ContinuousOn g (Set.Icc (f a) (f b)) ∧\n              (∀ (y : ℝ), y ∈ Set.Ioo (f a) (f b) → HasDerivAt g (1 / f' (g y)) y) ", "∀ {f f' : ℝ → ℝ} {a b : ℝ},\n  (∀ (x : ℝ), x ∈ Set.Ioo a b → 0 < f' x) →\n    (StrictMono f ∧ ∃ g, ∀ (x : ℝ), x ∈ Set.Ioo a b → (HasDerivAt f (f' x) x ∧ HasDerivAt g (1 / f' (g x)) (f x))) ", "∀ {f f' : ℝ → ℝ} {a b : ℝ},\n  (∀ (x : ℝ), x ∈ Set.Ioo a b → 0 < f' x) →\n    (StrictMono f ∧\n      ∀ {g : ℝ → ℝ},\n        (∀ (x : ℝ), x ∈ Set.Ioo a b → g (f x) = x) → ∀ (x : ℝ), x ∈ Set.Ioo a b → HasDerivAt g (1 / f' (f x)) (f x)) ", "forall {f f' : ℝ → ℝ} {a b : ℝ},\n  (∀ (x : ℝ), x ∈ Set.Ioo a b → HasDerivAt f (f' x) x) →\n    (∀ (x : ℝ), x ∈ Set.Ioo a b → 0 < f' x) →\n      let g ", "∀ {f : ℝ → ℝ} {a b : ℝ},\n  ContinuousOn f (Set.Icc a b) →\n    (∀ (x : ℝ), x ∈ Set.Ioo a b → 0 < deriv f x) →\n      (Exists g, ∀ (x : ℝ), x ∈ Set.Icc a b → (HasDerivAt g (1 / deriv f (g x)) x) ∧ f (g x) = x) ", "∀ {f f' : ℝ → ℝ} {a b : ℝ},\n  ContinuousOn f (Set.Icc a b) →\n    (∀ (x : ℝ), x ∈ Set.Ioo a b → HasDerivAt f (f' x) x) →\n      (∀ (x : ℝ), x ∈ Set.Ioo a b → 0 < f' x) →\n        let g ", "∀ {f : ℝ → ℝ} {a b : ℝ},\n  ContinuousOn f (Set.Icc a b) →\n    (∀ (x : ℝ), x ∈ Set.Ioo a b → 0 < deriv f x) →\n      StrictMono f ∧\n        ∀ {g : ℝ → ℝ},\n          (∀ (x : ℝ), x ∈ Set.Icc a b → g (f x) = x) →\n            (∀ (y : ℝ), y ∈ Set.Icc (f a) (f b) → ContinuousOn g (Set.Icc (f a) (f b))) →\n              (∀ (x : ℝ), x ∈ Set.Ioo a b → HasDerivAt g (1 / deriv f (g (f x))) (f x)) "]}
{"docString": "If `C_0 + C_1/2 + ⋯ + C_{n-1}/n + C_n/(n+1) = 0`, where `C_0, ..., C_n` are real constants, prove that the equation `C_0 + C_1x + ⋯ + C_{n-1}x^{n-1} + C_nx^n = 0` has at least one real root between 0 and 1.", "prompts": "[{\"theorem\":\n  \"∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsDomain R] {ζ : R} {n : ℕ},\\n  0 < n →\\n    IsPrimitiveRoot ζ n →\\n      Polynomial.X ^ n - 1 = Finset.prod (Polynomial.nthRootsFinset n R) fun ζ => Polynomial.X - ↑Polynomial.C ζ\",\n  \"isProp\": true,\n  \"docString\":\n  \"If there is a primitive `n`th root of unity in `K`, then `X ^ n - 1 = ∏ (X - μ)`, where `μ`\\nvaries over the `n`-th roots of unity. \"},\n {\"theorem\":\n  \"∀ {S : Set ℕ+} (A : Type u) {B : Type v} [inst : CommRing A] [inst_1 : CommRing B] [inst_2 : Algebra A B]\\n  [self : IsCyclotomicExtension S A B] {n : ℕ+}, n ∈ S → ∃ r, IsPrimitiveRoot r ↑n\",\n  \"isProp\": true,\n  \"docString\":\n  \"For all `n ∈ S`, there exists a primitive `n`-th root of unity in `B`. \"},\n {\"theorem\":\n  \"∀ (K : Type u_1) [inst : Field K] [inst_1 : NumberField K] (A : Type u_2) [inst_2 : NormedField A]\\n  [inst_3 : IsAlgClosed A] [inst_4 : NormedAlgebra ℚ A] {x : K},\\n  IsIntegral ℤ x → (∀ (φ : K →+* A), ‖↑φ x‖ = 1) → ∃ n x_1, x ^ n = 1\",\n  \"isProp\": true,\n  \"docString\":\n  \"An algebraic integer whose conjugates are all of norm one is a root of unity. \"},\n {\"theorem\":\n  \"∀ {n : ℕ} {K : Type u_1} [inst : CommRing K] {μ : K},\\n  IsPrimitiveRoot μ n → ∀ [inst_1 : IsDomain K] [inst_2 : CharZero K], minpoly ℤ μ ∣ Polynomial.X ^ n - 1\",\n  \"isProp\": true,\n  \"docString\":\n  \"The minimal polynomial of a root of unity `μ` divides `X ^ n - 1`. \"},\n {\"theorem\":\n  \"∀ (p : Polynomial ℚ),\\n  Finset.card (Set.toFinset (Polynomial.rootSet p ℂ)) =\\n    Finset.card (Set.toFinset (Polynomial.rootSet p ℝ)) +\\n      Finset.card\\n        (Equiv.Perm.support\\n          (↑(Polynomial.Gal.galActionHom p ℂ)\\n            (↑(Polynomial.Gal.restrict p ℂ) (AlgEquiv.restrictScalars ℚ Complex.conjAe))))\",\n  \"isProp\": true,\n  \"docString\":\n  \"The number of complex roots equals the number of real roots plus\\nthe number of roots not fixed by complex conjugation (i.e. with some imaginary component). \"},\n {\"theorem\":\n  \"∀ (n : ℕ+) (x : ℂˣ), x ∈ rootsOfUnity n ℂ ↔ ∃ i, i < ↑n ∧ cexp (2 * ↑Real.pi * Complex.I * (↑i / ↑↑n)) = ↑x\",\n  \"isProp\": true,\n  \"docString\":\n  \"The complex `n`-th roots of unity are exactly the\\ncomplex numbers of the form `exp (2 * Real.pi * Complex.I * (i / n))` for some `i < n`. \"},\n {\"theorem\":\n  \"∀ {f : Polynomial ℂ}, 0 < Polynomial.degree f → ∃ z, Polynomial.IsRoot f z\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Fundamental theorem of algebra**: every non constant complex polynomial\\nhas a root \"},\n {\"theorem\":\n  \"∀ {K : Type u_1} [inst : CommRing K] [inst_1 : IsDomain K] {ζ : K} {n : ℕ},\\n  0 < n →\\n    IsPrimitiveRoot ζ n → (Finset.prod (Nat.divisors n) fun i => Polynomial.cyclotomic' i K) = Polynomial.X ^ n - 1\",\n  \"isProp\": true,\n  \"docString\":\n  \"If there is a primitive `n`-th root of unity in `K`, then\\n`∏ i in Nat.divisors n, cyclotomic' i K = X ^ n - 1`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} [inst : DivisionRing 𝕜] [inst_1 : TopologicalSpace 𝕜] [inst_2 : CharZero 𝕜] [inst_3 : Algebra ℝ 𝕜]\\n  [inst_4 : ContinuousSMul ℝ 𝕜] [inst_5 : TopologicalDivisionRing 𝕜] (x : 𝕜),\\n  Filter.Tendsto (fun n => ↑n / (↑n + x)) Filter.atTop (nhds 1)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The limit of `n / (n + x)` is 1, for any constant `x` (valid in `ℝ` or any topological division\\nalgebra over `ℝ`, e.g., `ℂ`).\\n\\nTODO: introduce a typeclass saying that `1 / n` tends to 0 at top, making it possible to get this\\nstatement simultaneously on `ℚ`, `ℝ` and `ℂ`. \"},\n {\"theorem\":\n  \"∀ {p x : ℝ},\\n  LiouvilleWith p x → ∃ C _h₀, ∃ᶠ (n : ℕ) in Filter.atTop, 1 ≤ n ∧ ∃ m, x ≠ ↑m / ↑n ∧ |x - ↑m / ↑n| < C / ↑n ^ p\",\n  \"isProp\": true,\n  \"docString\":\n  \"The constant `C` provided by the definition of `LiouvilleWith` can be made positive.\\nWe also add `1 ≤ n` to the list of assumptions about the denominator. While it is equivalent to\\nthe original statement, the case `n = 0` breaks many arguments. \"},\n {\"theorem\":\n  \"Filter.Tendsto (fun n => ↑n / (2 * ↑n + 1)) Filter.atTop (nhds (1 / 2))\",\n  \"isProp\": true,\n  \"docString\": \"The sequence `n / (2 * n + 1)` tends to `1/2` \"},\n {\"theorem\":\n  \"∀ (R : Type u_1) [inst : CommRing R] {n : ℕ}, 1 < n → Polynomial.coeff (Polynomial.cyclotomic n R) 0 = 1\",\n  \"isProp\": true,\n  \"docString\": \"The constant term of `cyclotomic n R` is `1` if `2 ≤ n`. \"},\n {\"theorem\":\n  \"∀ {n : ℕ} {K : Type u_1} [inst : Field K] {μ : K},\\n  IsPrimitiveRoot μ n → 0 < n → ∀ [inst_1 : CharZero K], minpoly ℤ μ ∣ Polynomial.cyclotomic n ℤ\",\n  \"isProp\": true,\n  \"docString\":\n  \"The minimal polynomial of a primitive `n`-th root of unity `μ` divides `cyclotomic n ℤ`. \"},\n {\"theorem\":\n  \"∀ (n : ℕ) (R : Type u_1) [inst : CommRing R] [inst_1 : IsDomain R],\\n  Polynomial.roots (Polynomial.cyclotomic' n R) = (primitiveRoots n R).val\",\n  \"isProp\": true,\n  \"docString\":\n  \"The roots of `cyclotomic' n R` are the primitive `n`-th roots of unity. \"},\n {\"theorem\":\n  \"∀ {K : Type u_1} [inst : CommRing K] [inst_1 : IsDomain K] {ζ : K} {n : ℕ},\\n  0 < n →\\n    IsPrimitiveRoot ζ n →\\n      Polynomial.cyclotomic' n K =\\n        (Polynomial.X ^ n - 1) /ₘ Finset.prod (Nat.properDivisors n) fun i => Polynomial.cyclotomic' i K\",\n  \"isProp\": true,\n  \"docString\":\n  \"If there is a primitive `n`-th root of unity in `K`, then\\n`cyclotomic' n K = (X ^ k - 1) /ₘ (∏ i in Nat.properDivisors k, cyclotomic' i K)`. \"},\n {\"theorem\":\n  \"∀ (p : Polynomial ℝ),\\n  Finset.card (Multiset.toFinset (Polynomial.roots p)) ≤\\n    Finset.card (Multiset.toFinset (Polynomial.roots (↑Polynomial.derivative p))) + 1\",\n  \"isProp\": true,\n  \"docString\":\n  \"The number of roots of a real polynomial is at most the number of roots of its derivative plus\\none. \"},\n {\"theorem\":\n  \"∀ {F : Type u_1} [inst : CommRing F] [inst_1 : Algebra F ℝ] (p : Polynomial F),\\n  Fintype.card ↑(Polynomial.rootSet p ℝ) ≤ Fintype.card ↑(Polynomial.rootSet (↑Polynomial.derivative p) ℝ) + 1\",\n  \"isProp\": true,\n  \"docString\":\n  \"The number of real roots of a polynomial is at most the number of roots of its derivative plus\\none. \"},\n {\"theorem\":\n  \"∀ {K : Type u_1} [inst : CommRing K] [inst_1 : IsDomain K] {ζ : K} {n : ℕ},\\n  IsPrimitiveRoot ζ n →\\n    Polynomial.cyclotomic n K = Finset.prod (primitiveRoots n K) fun μ => Polynomial.X - ↑Polynomial.C μ\",\n  \"isProp\": true,\n  \"docString\":\n  \"If there is a primitive `n`-th root of unity in `K`, then\\n`cyclotomic n K = ∏ μ in primitiveRoots n K, (X - C μ)`. In particular,\\n`cyclotomic n K = cyclotomic' n K` \"},\n {\"theorem\":\n  \"∀ {K : Type u_1} [inst : CommRing K] [inst_1 : IsDomain K] [inst_2 : CharZero K] {ζ : K} {n : ℕ+},\\n  IsPrimitiveRoot ζ ↑n → ∃! P, Polynomial.map (Int.castRingHom K) P = Polynomial.cyclotomic' (↑n) K\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `K` is of characteristic `0` and there is a primitive `n`-th root of unity in `K`,\\nthen `cyclotomic n K` comes from a unique polynomial with integer coefficients. \"},\n {\"theorem\":\n  \"∀ {S : Set ℕ+} {A : Type u} {B : Type v} [inst : CommRing A] [inst_1 : CommRing B] [inst_2 : Algebra A B]\\n  [self : IsCyclotomicExtension S A B] (x : B), x ∈ Algebra.adjoin A {b | ∃ n, n ∈ S ∧ b ^ ↑n = 1}\",\n  \"isProp\": true,\n  \"docString\":\n  \"The `n`-th roots of unity, for `n ∈ S`, generate `B` as an `A`-algebra. \"}]\n", "prompt_cons": "/-- If there is a primitive `n`th root of unity in `K`, then `X ^ n - 1 = ∏ (X - μ)`, where `μ`\nvaries over the `n`-th roots of unity. -/\ntheorem ∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsDomain R] {ζ : R} {n : ℕ},\n  0 < n →\n    IsPrimitiveRoot ζ n →\n      Polynomial.X ^ n - 1 = Finset.prod (Polynomial.nthRootsFinset n R) fun ζ => Polynomial.X - ↑Polynomial.C ζ :=\n\n/-- For all `n ∈ S`, there exists a primitive `n`-th root of unity in `B`. -/\ntheorem ∀ {S : Set ℕ+} (A : Type u) {B : Type v} [inst : CommRing A] [inst_1 : CommRing B] [inst_2 : Algebra A B]\n  [self : IsCyclotomicExtension S A B] {n : ℕ+}, n ∈ S → ∃ r, IsPrimitiveRoot r ↑n :=\n\n/-- An algebraic integer whose conjugates are all of norm one is a root of unity. -/\ntheorem ∀ (K : Type u_1) [inst : Field K] [inst_1 : NumberField K] (A : Type u_2) [inst_2 : NormedField A]\n  [inst_3 : IsAlgClosed A] [inst_4 : NormedAlgebra ℚ A] {x : K},\n  IsIntegral ℤ x → (∀ (φ : K →+* A), ‖↑φ x‖ = 1) → ∃ n x_1, x ^ n = 1 :=\n\n/-- The minimal polynomial of a root of unity `μ` divides `X ^ n - 1`. -/\ntheorem ∀ {n : ℕ} {K : Type u_1} [inst : CommRing K] {μ : K},\n  IsPrimitiveRoot μ n → ∀ [inst_1 : IsDomain K] [inst_2 : CharZero K], minpoly ℤ μ ∣ Polynomial.X ^ n - 1 :=\n\n/-- The number of complex roots equals the number of real roots plus\nthe number of roots not fixed by complex conjugation (i.e. with some imaginary component). -/\ntheorem ∀ (p : Polynomial ℚ),\n  Finset.card (Set.toFinset (Polynomial.rootSet p ℂ)) =\n    Finset.card (Set.toFinset (Polynomial.rootSet p ℝ)) +\n      Finset.card\n        (Equiv.Perm.support\n          (↑(Polynomial.Gal.galActionHom p ℂ)\n            (↑(Polynomial.Gal.restrict p ℂ) (AlgEquiv.restrictScalars ℚ Complex.conjAe)))) :=\n\n/-- The complex `n`-th roots of unity are exactly the\ncomplex numbers of the form `exp (2 * Real.pi * Complex.I * (i / n))` for some `i < n`. -/\ntheorem ∀ (n : ℕ+) (x : ℂˣ), x ∈ rootsOfUnity n ℂ ↔ ∃ i, i < ↑n ∧ cexp (2 * ↑Real.pi * Complex.I * (↑i / ↑↑n)) = ↑x :=\n\n/-- **Fundamental theorem of algebra**: every non constant complex polynomial\nhas a root -/\ntheorem ∀ {f : Polynomial ℂ}, 0 < Polynomial.degree f → ∃ z, Polynomial.IsRoot f z :=\n\n/-- If there is a primitive `n`-th root of unity in `K`, then\n`∏ i in Nat.divisors n, cyclotomic' i K = X ^ n - 1`. -/\ntheorem ∀ {K : Type u_1} [inst : CommRing K] [inst_1 : IsDomain K] {ζ : K} {n : ℕ},\n  0 < n →\n    IsPrimitiveRoot ζ n → (Finset.prod (Nat.divisors n) fun i => Polynomial.cyclotomic' i K) = Polynomial.X ^ n - 1 :=\n\n/-- The limit of `n / (n + x)` is 1, for any constant `x` (valid in `ℝ` or any topological division\nalgebra over `ℝ`, e.g., `ℂ`).\n\nTODO: introduce a typeclass saying that `1 / n` tends to 0 at top, making it possible to get this\nstatement simultaneously on `ℚ`, `ℝ` and `ℂ`. -/\ntheorem ∀ {𝕜 : Type u_1} [inst : DivisionRing 𝕜] [inst_1 : TopologicalSpace 𝕜] [inst_2 : CharZero 𝕜] [inst_3 : Algebra ℝ 𝕜]\n  [inst_4 : ContinuousSMul ℝ 𝕜] [inst_5 : TopologicalDivisionRing 𝕜] (x : 𝕜),\n  Filter.Tendsto (fun n => ↑n / (↑n + x)) Filter.atTop (nhds 1) :=\n\n/-- The constant `C` provided by the definition of `LiouvilleWith` can be made positive.\nWe also add `1 ≤ n` to the list of assumptions about the denominator. While it is equivalent to\nthe original statement, the case `n = 0` breaks many arguments. -/\ntheorem ∀ {p x : ℝ},\n  LiouvilleWith p x → ∃ C _h₀, ∃ᶠ (n : ℕ) in Filter.atTop, 1 ≤ n ∧ ∃ m, x ≠ ↑m / ↑n ∧ |x - ↑m / ↑n| < C / ↑n ^ p :=\n\n/-- The sequence `n / (2 * n + 1)` tends to `1/2` -/\ntheorem Filter.Tendsto (fun n => ↑n / (2 * ↑n + 1)) Filter.atTop (nhds (1 / 2)) :=\n\n/-- The constant term of `cyclotomic n R` is `1` if `2 ≤ n`. -/\ntheorem ∀ (R : Type u_1) [inst : CommRing R] {n : ℕ}, 1 < n → Polynomial.coeff (Polynomial.cyclotomic n R) 0 = 1 :=\n\n/-- The minimal polynomial of a primitive `n`-th root of unity `μ` divides `cyclotomic n ℤ`. -/\ntheorem ∀ {n : ℕ} {K : Type u_1} [inst : Field K] {μ : K},\n  IsPrimitiveRoot μ n → 0 < n → ∀ [inst_1 : CharZero K], minpoly ℤ μ ∣ Polynomial.cyclotomic n ℤ :=\n\n/-- The roots of `cyclotomic' n R` are the primitive `n`-th roots of unity. -/\ntheorem ∀ (n : ℕ) (R : Type u_1) [inst : CommRing R] [inst_1 : IsDomain R],\n  Polynomial.roots (Polynomial.cyclotomic' n R) = (primitiveRoots n R).val :=\n\n/-- If there is a primitive `n`-th root of unity in `K`, then\n`cyclotomic' n K = (X ^ k - 1) /ₘ (∏ i in Nat.properDivisors k, cyclotomic' i K)`. -/\ntheorem ∀ {K : Type u_1} [inst : CommRing K] [inst_1 : IsDomain K] {ζ : K} {n : ℕ},\n  0 < n →\n    IsPrimitiveRoot ζ n →\n      Polynomial.cyclotomic' n K =\n        (Polynomial.X ^ n - 1) /ₘ Finset.prod (Nat.properDivisors n) fun i => Polynomial.cyclotomic' i K :=\n\n/-- The number of roots of a real polynomial is at most the number of roots of its derivative plus\none. -/\ntheorem ∀ (p : Polynomial ℝ),\n  Finset.card (Multiset.toFinset (Polynomial.roots p)) ≤\n    Finset.card (Multiset.toFinset (Polynomial.roots (↑Polynomial.derivative p))) + 1 :=\n\n/-- The number of real roots of a polynomial is at most the number of roots of its derivative plus\none. -/\ntheorem ∀ {F : Type u_1} [inst : CommRing F] [inst_1 : Algebra F ℝ] (p : Polynomial F),\n  Fintype.card ↑(Polynomial.rootSet p ℝ) ≤ Fintype.card ↑(Polynomial.rootSet (↑Polynomial.derivative p) ℝ) + 1 :=\n\n/-- If there is a primitive `n`-th root of unity in `K`, then\n`cyclotomic n K = ∏ μ in primitiveRoots n K, (X - C μ)`. In particular,\n`cyclotomic n K = cyclotomic' n K` -/\ntheorem ∀ {K : Type u_1} [inst : CommRing K] [inst_1 : IsDomain K] {ζ : K} {n : ℕ},\n  IsPrimitiveRoot ζ n →\n    Polynomial.cyclotomic n K = Finset.prod (primitiveRoots n K) fun μ => Polynomial.X - ↑Polynomial.C μ :=\n\n/-- If `K` is of characteristic `0` and there is a primitive `n`-th root of unity in `K`,\nthen `cyclotomic n K` comes from a unique polynomial with integer coefficients. -/\ntheorem ∀ {K : Type u_1} [inst : CommRing K] [inst_1 : IsDomain K] [inst_2 : CharZero K] {ζ : K} {n : ℕ+},\n  IsPrimitiveRoot ζ ↑n → ∃! P, Polynomial.map (Int.castRingHom K) P = Polynomial.cyclotomic' (↑n) K :=\n\n/-- The `n`-th roots of unity, for `n ∈ S`, generate `B` as an `A`-algebra. -/\ntheorem ∀ {S : Set ℕ+} {A : Type u} {B : Type v} [inst : CommRing A] [inst_1 : CommRing B] [inst_2 : Algebra A B]\n  [self : IsCyclotomicExtension S A B] (x : B), x ∈ Algebra.adjoin A {b | ∃ n, n ∈ S ∧ b ^ ↑n = 1} :=\n\n/-- If `C_0 + C_1/2 + ⋯ + C_{n-1}/n + C_n/(n+1) = 0`, where `C_0, ..., C_n` are real constants, prove that the equation `C_0 + C_1x + ⋯ + C_{n-1}x^{n-1} + C_nx^n = 0` has at least one real root between 0 and 1. -/\ntheorem", "choices": ["∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : CharZero R] (C : ℕ → R),\n  (Finset.sum (Finset.range (Nat.succ (Nat.succ (Finset.card (Finset.range (Nat.succ (Nat.pred (Finset.card (Finset.range (Nat.succ (Nat.pred (Finset.card (Finset.range (Nat.succ (Nat.pred (Finset.card (Finset.range (Nat.succ (Nat.pred (Finset.card (Finset.range (Nat.succ (Nat.pred (Finset.card (Finset.range (Nat.succ (Nat.pred (Finset.card (Finset.range (Nat.succ (Nat.pred (Finset.card (Finset.range (Nat.succ (Nat.pred (Finset.card (Finset.range (Nat.succ (Nat.pred (Finset.card (Finset.range (Nat.succ (Nat.pred (Finset.card (Finset.range (Nat.succ (Nat.pred (Finset.card (Finset.range (Nat.succ (Nat.pred (Finset.card (Finset.range (Nat.succ (Nat.pred (Finset.card (Finset.range (Nat.succ (Nat.pred (Finset.card (Finset.range (Nat.succ (Nat.pred (Finset.card (Finset.range (Nat.succ (Nat.pred (Finset.card (Finset.range (Nat.succ (Nat.pred (Finset.card (Finset.range (Nat.succ (Nat.pred (Finset.card (Finset.range (Nat.succ (Nat.pred (Finset.card (Finset.range (Nat.succ (Nat.pred (Finset.card (Finset.range (Nat.succ (Nat.pred (Finset.card (Finset.range (Nat.succ (Nat.pred (Finset.card (Finset.range (Nat.succ (Nat.pred (Finset.card (Finset.range (Nat.succ (Nat.pred (Finset.card (Finset.range (Nat.succ (Nat.pred (Finset.card (Finset.range (Nat.succ (Nat.pred (Finset.card (Finset.range (Nat.succ (Nat.pred (Finset.card (Finset.range (Nat.succ (Nat.pred (Finset.card (Finset.range (Nat.succ (Nat.pred (Finset.card (Fin", "∀ {C : ℕ → ℝ},\n  (∑ (i : ℕ) in Finset.range (n + 1), C i / (↑i + 1)) = 0 →\n    ∃ x _h₀ _h₁, (Finset.sum (Finset.range (n + 1)) fun i => C i * x ^ i) = 0 ", "∀ (C : ℕ → ℝ), (Finset.sum (Finset.range (n + 1)) fun i => C i / (↑i + 1)) = 0 →\n  ∃ x _h₀ : 0 < x, x < 1 ∧ Polynomial.eval x (Finset.sum (Finset.range (n + 1)) fun i => Polynomial.C (C i) * Polynomial.X ^ i) = 0 ", "∀ {𝕜 : Type u_1} [inst : Field 𝕜] [inst_1 : LinearOrderedField 𝕜] [inst_2 : FloorRing 𝕜],\n  (∀ (C : ℝ → 𝕜), ∑ i in Finset.range (n + 1), C i * ↑(i) / (↑(i + 1))) = 0 →\n    ∃ x _h₀ _h₁, ∑ i in Finset.range (n + 1), C (i) * (x ^ i) = 0 ", "∀ {C : ℕ → ℝ},\n  (∑ (i : ℕ) in Finset.range (n + 1), C i / (↑i + 1)) = 0 →\n    ∃ x _h₀ : 0 ≤ x, ∃ _h₁ : x ≤ 1, (∑ (i : ℕ) in Finset.range (n + 1), C i * x ^ i) = 0 ", "∀ {C : ℕ → ℝ},\n  (∑ (i : ℕ) in Finset.range (n + 2), C i / ↑(i + 1)) = 0 →\n    (∃ x _h₀ _h₁, (∑ (i : ℕ) in Finset.range (n + 1), C i * x ^ i) = 0) ", "∀ (C : ℕ → ℝ),\n  (∑ i in Finset.range (n + 1), C i / (↑i + 1)) = 0 →\n    ∃ x ∈ Set.Icc (0 : ℝ) 1, Polynomial.eval x (Finset.sum (Finset.range (n + 1)) (Polynomial.monomial ∘ nat.succ)) = 0 ", "∀ {C : ℕ → ℝ},\n  (∑ n in Finset.range (Nat.succ (Nat.succ n)), C n / (↑n + 1)) = 0 →\n    ∃ x ∈ Set.Icc (0 : ℝ) 1, (∑ n in Finset.range (Nat.succ (Nat.succ n)), C n * x ^ n) = 0 ", "∀ {C : ℕ → ℝ},\n  (∑ n, C n / (↑n + 1)) = 0 →\n    ∃ x _h₀ _h₁, (Finset.sum (Finset.range (Nat.succ (Nat.succ _))) fun x_1 => C x_1 * x ^ x_1) = 0 ", "∀ {n : ℕ} {C : ℕ → ℝ},\n  (∀ i, C i ≠ 0) →\n  (C 0 + (∑ i in Finset.range n, C (i + 1) / (↑i + 1)) + C (n + 1) / (↑n + 1) = 0) →\n  ∃ x _h₀ _h₁, Polynomial.eval x (Finset.sum (Finset.range (n + 2)) fun i => ↑Polynomial.C (C i) * Polynomial.X ^ i) = 0 "]}
{"docString": "Suppose (a) `f` is continuous for `x ≥ 0`, (b) `f'(x)` exists for `x > 0`, (c) `f(0) = 0`, (d) `f'` is monotonically increasing. Put `g(x) = f(x)/x` for `(x > 0)` and prove that `g` is monotonically increasing.", "prompts": "[{\"theorem\":\n  \"∀ {C : Type u_2} [inst : CategoryTheory.Category C] [inst_1 : CategoryTheory.Limits.HasZeroMorphisms C]\\n  [inst_2 : CategoryTheory.Limits.HasFiniteCoproducts C] [inst_3 : CategoryTheory.Limits.HasCokernels C]\\n  [inst_4 : CategoryTheory.NormalEpiCategory C] [inst_5 : CategoryTheory.Limits.HasZeroObject C] {X Y : C} (f : X ⟶ Y),\\n  (∀ (Z : C) (g : Z ⟶ X), CategoryTheory.CategoryStruct.comp g f = 0 → g = 0) → CategoryTheory.Mono f\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `g ≫ f = 0` implies `g = 0` for all `g`, then `f` is a monomorphism. \"},\n {\"theorem\":\n  \"∀ {f g : ℝ → ℝ} {a b : ℝ},\\n  a < b →\\n    ContinuousOn f (Set.Icc a b) →\\n      ContinuousOn g (Set.Icc a b) →\\n        (∀ (x : ℝ), x ∈ Set.Ioc a b → f x ≤ g x) →\\n          (∃ c, c ∈ Set.Icc a b ∧ f c < g c) → ∫ (x : ℝ) in a..b, f x < ∫ (x : ℝ) in a..b, g x\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` and `g` are continuous on `[a, b]`, `a < b`, `f x ≤ g x` on this interval, and\\n`f c < g c` at some point `c ∈ [a, b]`, then `∫ x in a..b, f x < ∫ x in a..b, g x`. \"},\n {\"theorem\":\n  \"∀ {C : Type u_2} [inst : CategoryTheory.Category C] [inst_1 : CategoryTheory.Limits.HasZeroMorphisms C]\\n  [inst_2 : CategoryTheory.Limits.HasFiniteProducts C] [inst_3 : CategoryTheory.Limits.HasKernels C]\\n  [inst_4 : CategoryTheory.NormalMonoCategory C] [inst_5 : CategoryTheory.Limits.HasZeroObject C] {X Y : C} (f : X ⟶ Y),\\n  (∀ (Z : C) (g : Y ⟶ Z), CategoryTheory.CategoryStruct.comp f g = 0 → g = 0) → CategoryTheory.Epi f\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f ≫ g = 0` implies `g = 0` for all `g`, then `g` is a monomorphism. \"},\n {\"theorem\":\n  \"∀ {f : ℝ → ℝ}, Differentiable ℝ f → (∀ (x : ℝ), 0 ≤ deriv f x) → Monotone f\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `f : ℝ → ℝ` be a differentiable function. If `f'` is nonnegative, then\\n`f` is a monotone function. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} [inst : NontriviallyNormedField 𝕜] {E : Type uE} [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] {F : Type uF} [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] {G : Type uG}\\n  [inst_5 : NormedAddCommGroup G] [inst_6 : NormedSpace 𝕜 G] {f : E → F → G} {g : E → F} {n : ℕ∞},\\n  ContDiff 𝕜 n (Function.uncurry f) → Continuous g → 1 ≤ n → Continuous fun x => fderiv 𝕜 (f x) (g x)\",\n  \"isProp\": true,\n  \"docString\": \"`x ↦ fderiv 𝕜 (f x) (g x)` is continuous. \"},\n {\"theorem\":\n  \"∀ {D : Set ℝ},\\n  Convex ℝ D →\\n    ∀ {f : ℝ → ℝ},\\n      ContinuousOn f D →\\n        DifferentiableOn ℝ f (interior D) →\\n          ∀ {C : (fun x => ℝ) 1},\\n            (∀ (x : ℝ), x ∈ interior D → C ≤ deriv f x) →\\n              ∀ (x : ℝ), x ∈ D → ∀ (y : ℝ), y ∈ D → x ≤ y → C * (y - x) ≤ f y - f x\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `f` be a function continuous on a convex (or, equivalently, connected) subset `D`\\nof the real line. If `f` is differentiable on the interior of `D` and `C ≤ f'`, then\\n`f` grows at least as fast as `C * x` on `D`, i.e., `C * (y - x) ≤ f y - f x` whenever `x, y ∈ D`,\\n`x ≤ y`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : SemilatticeSup α] {β : Type u_1} [inst_1 : Preorder β] {f g : α → β},\\n  Monotone f → Antitone g → f ≤ g → ∀ (m n : α), f m ≤ g n\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` is monotone, `g` is antitone, and `f ≤ g`, then for all `a`, `b` we have `f a ≤ g b`. \"},\n {\"theorem\":\n  \"∀ (f : CircleDeg1Lift), Continuous ↑f → ∃ x, ↑f x = x + CircleDeg1Lift.translationNumber f\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` is a continuous monotone map `ℝ → ℝ`, `f (x + 1) = f x + 1`, then there exists `x`\\nsuch that `f x = x + τ f`. \"},\n {\"theorem\":\n  \"∀ {D : Set ℝ},\\n  Convex ℝ D →\\n    ∀ {f : ℝ → ℝ},\\n      ContinuousOn f D →\\n        DifferentiableOn ℝ f (interior D) →\\n          ∀ {C : (fun x => ℝ) 1},\\n            (∀ (x : ℝ), x ∈ interior D → C < deriv f x) →\\n              ∀ (x : ℝ), x ∈ D → ∀ (y : ℝ), y ∈ D → x < y → C * (y - x) < f y - f x\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `f` be a function continuous on a convex (or, equivalently, connected) subset `D`\\nof the real line. If `f` is differentiable on the interior of `D` and `C < f'`, then\\n`f` grows faster than `C * x` on `D`, i.e., `C * (y - x) < f y - f x` whenever `x, y ∈ D`,\\n`x < y`. \"},\n {\"theorem\":\n  \"∀ {X : Type u} {α : Type v} [inst : TopologicalSpace X] [inst_1 : LinearOrder α] [inst_2 : TopologicalSpace α]\\n  [inst_3 : OrderClosedTopology α] {s : Set X},\\n  IsPreconnected s →\\n    ∀ {a b : X},\\n      a ∈ s →\\n        b ∈ s → ∀ {f g : X → α}, ContinuousOn f s → ContinuousOn g s → f a ≤ g a → g b ≤ f b → ∃ x, x ∈ s ∧ f x = g x\",\n  \"isProp\": true,\n  \"docString\":\n  \"Intermediate value theorem for two functions: if `f` and `g` are two functions continuous\\non a preconnected set `s` and for some `a b ∈ s` we have `f a ≤ g a` and `g b ≤ f b`,\\nthen for some `x ∈ s` we have `f x = g x`. \"},\n {\"theorem\":\n  \"∀ {D : Set ℝ},\\n  Convex ℝ D →\\n    ∀ {f : ℝ → ℝ},\\n      ContinuousOn f D →\\n        DifferentiableOn ℝ f (interior D) →\\n          ∀ {C : (fun x => ℝ) 1},\\n            (∀ (x : ℝ), x ∈ interior D → deriv f x ≤ C) →\\n              ∀ (x : ℝ), x ∈ D → ∀ (y : ℝ), y ∈ D → x ≤ y → f y - f x ≤ C * (y - x)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `f` be a function continuous on a convex (or, equivalently, connected) subset `D`\\nof the real line. If `f` is differentiable on the interior of `D` and `f' ≤ C`, then\\n`f` grows at most as fast as `C * x` on `D`, i.e., `f y - f x ≤ C * (y - x)` whenever `x, y ∈ D`,\\n`x ≤ y`. \"},\n {\"theorem\":\n  \"∀ {X : Type u} {α : Type v} [inst : TopologicalSpace X] [inst_1 : LinearOrder α] [inst_2 : TopologicalSpace α]\\n  [inst_3 : OrderClosedTopology α] [inst_4 : PreconnectedSpace X] {a b : X} {f g : X → α},\\n  Continuous f → Continuous g → f a ≤ g a → g b ≤ f b → ∃ x, f x = g x\",\n  \"isProp\": true,\n  \"docString\":\n  \"Intermediate value theorem for two functions: if `f` and `g` are two continuous functions\\non a preconnected space and `f a ≤ g a` and `g b ≤ f b`, then for some `x` we have `f x = g x`. \"},\n {\"theorem\":\n  \"∀ {f : ℝ → ℝ},\\n  Differentiable ℝ f → ∀ {C : (fun x => ℝ) 1}, (∀ (x : ℝ), C ≤ deriv f x) → ∀ ⦃x y : ℝ⦄, x ≤ y → C * (y - x) ≤ f y - f x\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `f : ℝ → ℝ` be a differentiable function. If `C ≤ f'`, then `f` grows at least as fast\\nas `C * x`, i.e., `C * (y - x) ≤ f y - f x` whenever `x ≤ y`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} [inst : NontriviallyNormedField 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] {F : Type u_3} [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] {f : E → F}\\n  {f' : E ≃L[𝕜] F} {g : F → E} {a : F},\\n  ContinuousAt g a →\\n    HasFDerivAt f (↑f') (g a) → (∀ᶠ (y : F) in nhds a, f (g y) = y) → HasFDerivAt g (↑(ContinuousLinearEquiv.symm f')) a\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f (g y) = y` for `y` in some neighborhood of `a`, `g` is continuous at `a`, and `f` has an\\ninvertible derivative `f'` at `g a`, then `g` has the derivative `f'⁻¹` at `a`.\\n\\nThis is one of the easy parts of the inverse function theorem: it assumes that we already have\\nan inverse function. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {β : Type u_2} [inst : LinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderTopology α]\\n  [inst_3 : LinearOrder β] [inst_4 : TopologicalSpace β] [inst_5 : OrderTopology β] {f : α → β} {s : Set α} {a : α},\\n  StrictMonoOn f s →\\n    s ∈ nhdsWithin a (Set.Ici a) →\\n      (∀ (b : β), b > f a → ∃ c, c ∈ s ∧ f c ∈ Set.Ioc (f a) b) → ContinuousWithinAt f (Set.Ici a) a\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` is a function strictly monotone on a right neighborhood of `a` and the\\nimage of this neighborhood under `f` meets every interval `(f a, b]`, `b > f a`, then `f` is\\ncontinuous at `a` from the right.\\n\\nThe assumption `hfs : ∀ b > f a, ∃ c ∈ s, f c ∈ Ioc (f a) b` is required because otherwise the\\nfunction `f : ℝ → ℝ` given by `f x = if x ≤ 0 then x else x + 1` would be a counter-example at\\n`a = 0`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {β : Type u_2} [inst : LinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderTopology α]\\n  [inst_3 : LinearOrder β] [inst_4 : TopologicalSpace β] [inst_5 : OrderTopology β] {f : α → β} {s : Set α} {a : α},\\n  MonotoneOn f s →\\n    s ∈ nhds a →\\n      (∀ (b : β), b < f a → ∃ c, c ∈ s ∧ f c ∈ Set.Ioo b (f a)) →\\n        (∀ (b : β), b > f a → ∃ c, c ∈ s ∧ f c ∈ Set.Ioo (f a) b) → ContinuousAt f a\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` is a monotone function on a neighborhood of `a` and the image of this neighborhood under\\n`f` meets every interval `(b, f a)`, `b < f a`, and every interval `(f a, b)`, `b > f a`, then `f`\\nis continuous at `a`. \"},\n {\"theorem\":\n  \"∀ {f : ℝ → ℝ},\\n  Differentiable ℝ f → ∀ {C : (fun x => ℝ) 1}, (∀ (x : ℝ), C < deriv f x) → ∀ ⦃x y : ℝ⦄, x < y → C * (y - x) < f y - f x\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `f : ℝ → ℝ` be a differentiable function. If `C < f'`, then `f` grows faster than\\n`C * x`, i.e., `C * (y - x) < f y - f x` whenever `x < y`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u} [inst : NontriviallyNormedField 𝕜] {f g : 𝕜 → 𝕜} {f' a : 𝕜},\\n  ContinuousAt g a →\\n    HasStrictDerivAt f f' (g a) → f' ≠ 0 → (∀ᶠ (y : 𝕜) in nhds a, f (g y) = y) → HasStrictDerivAt g f'⁻¹ a\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f (g y) = y` for `y` in some neighborhood of `a`, `g` is continuous at `a`, and `f` has an\\ninvertible derivative `f'` at `g a` in the strict sense, then `g` has the derivative `f'⁻¹` at `a`\\nin the strict sense.\\n\\nThis is one of the easy parts of the inverse function theorem: it assumes that we already have an\\ninverse function. \"},\n {\"theorem\":\n  \"∀ {D : Set ℝ},\\n  Convex ℝ D →\\n    ∀ {f : ℝ → ℝ},\\n      ContinuousOn f D →\\n        DifferentiableOn ℝ f (interior D) → (∀ (x : ℝ), x ∈ interior D → 0 ≤ deriv f x) → MonotoneOn f D\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `f` be a function continuous on a convex (or, equivalently, connected) subset `D`\\nof the real line. If `f` is differentiable on the interior of `D` and `f'` is nonnegative, then\\n`f` is a monotone function on `D`. \"},\n {\"theorem\":\n  \"∀ {f : ℝ → ℝ},\\n  Differentiable ℝ f → ∀ {C : (fun x => ℝ) 1}, (∀ (x : ℝ), deriv f x ≤ C) → ∀ ⦃x y : ℝ⦄, x ≤ y → f y - f x ≤ C * (y - x)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `f : ℝ → ℝ` be a differentiable function. If `f' ≤ C`, then `f` grows at most as fast\\nas `C * x`, i.e., `f y - f x ≤ C * (y - x)` whenever `x ≤ y`. \"}]\n", "prompt_cons": "/-- If `g ≫ f = 0` implies `g = 0` for all `g`, then `f` is a monomorphism. -/\ntheorem ∀ {C : Type u_2} [inst : CategoryTheory.Category C] [inst_1 : CategoryTheory.Limits.HasZeroMorphisms C]\n  [inst_2 : CategoryTheory.Limits.HasFiniteCoproducts C] [inst_3 : CategoryTheory.Limits.HasCokernels C]\n  [inst_4 : CategoryTheory.NormalEpiCategory C] [inst_5 : CategoryTheory.Limits.HasZeroObject C] {X Y : C} (f : X ⟶ Y),\n  (∀ (Z : C) (g : Z ⟶ X), CategoryTheory.CategoryStruct.comp g f = 0 → g = 0) → CategoryTheory.Mono f :=\n\n/-- If `f` and `g` are continuous on `[a, b]`, `a < b`, `f x ≤ g x` on this interval, and\n`f c < g c` at some point `c ∈ [a, b]`, then `∫ x in a..b, f x < ∫ x in a..b, g x`. -/\ntheorem ∀ {f g : ℝ → ℝ} {a b : ℝ},\n  a < b →\n    ContinuousOn f (Set.Icc a b) →\n      ContinuousOn g (Set.Icc a b) →\n        (∀ (x : ℝ), x ∈ Set.Ioc a b → f x ≤ g x) →\n          (∃ c, c ∈ Set.Icc a b ∧ f c < g c) → ∫ (x : ℝ) in a..b, f x < ∫ (x : ℝ) in a..b, g x :=\n\n/-- If `f ≫ g = 0` implies `g = 0` for all `g`, then `g` is a monomorphism. -/\ntheorem ∀ {C : Type u_2} [inst : CategoryTheory.Category C] [inst_1 : CategoryTheory.Limits.HasZeroMorphisms C]\n  [inst_2 : CategoryTheory.Limits.HasFiniteProducts C] [inst_3 : CategoryTheory.Limits.HasKernels C]\n  [inst_4 : CategoryTheory.NormalMonoCategory C] [inst_5 : CategoryTheory.Limits.HasZeroObject C] {X Y : C} (f : X ⟶ Y),\n  (∀ (Z : C) (g : Y ⟶ Z), CategoryTheory.CategoryStruct.comp f g = 0 → g = 0) → CategoryTheory.Epi f :=\n\n/-- Let `f : ℝ → ℝ` be a differentiable function. If `f'` is nonnegative, then\n`f` is a monotone function. -/\ntheorem ∀ {f : ℝ → ℝ}, Differentiable ℝ f → (∀ (x : ℝ), 0 ≤ deriv f x) → Monotone f :=\n\n/-- `x ↦ fderiv 𝕜 (f x) (g x)` is continuous. -/\ntheorem ∀ {𝕜 : Type u_1} [inst : NontriviallyNormedField 𝕜] {E : Type uE} [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E] {F : Type uF} [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] {G : Type uG}\n  [inst_5 : NormedAddCommGroup G] [inst_6 : NormedSpace 𝕜 G] {f : E → F → G} {g : E → F} {n : ℕ∞},\n  ContDiff 𝕜 n (Function.uncurry f) → Continuous g → 1 ≤ n → Continuous fun x => fderiv 𝕜 (f x) (g x) :=\n\n/-- Let `f` be a function continuous on a convex (or, equivalently, connected) subset `D`\nof the real line. If `f` is differentiable on the interior of `D` and `C ≤ f'`, then\n`f` grows at least as fast as `C * x` on `D`, i.e., `C * (y - x) ≤ f y - f x` whenever `x, y ∈ D`,\n`x ≤ y`. -/\ntheorem ∀ {D : Set ℝ},\n  Convex ℝ D →\n    ∀ {f : ℝ → ℝ},\n      ContinuousOn f D →\n        DifferentiableOn ℝ f (interior D) →\n          ∀ {C : (fun x => ℝ) 1},\n            (∀ (x : ℝ), x ∈ interior D → C ≤ deriv f x) →\n              ∀ (x : ℝ), x ∈ D → ∀ (y : ℝ), y ∈ D → x ≤ y → C * (y - x) ≤ f y - f x :=\n\n/-- If `f` is monotone, `g` is antitone, and `f ≤ g`, then for all `a`, `b` we have `f a ≤ g b`. -/\ntheorem ∀ {α : Type u} [inst : SemilatticeSup α] {β : Type u_1} [inst_1 : Preorder β] {f g : α → β},\n  Monotone f → Antitone g → f ≤ g → ∀ (m n : α), f m ≤ g n :=\n\n/-- If `f` is a continuous monotone map `ℝ → ℝ`, `f (x + 1) = f x + 1`, then there exists `x`\nsuch that `f x = x + τ f`. -/\ntheorem ∀ (f : CircleDeg1Lift), Continuous ↑f → ∃ x, ↑f x = x + CircleDeg1Lift.translationNumber f :=\n\n/-- Let `f` be a function continuous on a convex (or, equivalently, connected) subset `D`\nof the real line. If `f` is differentiable on the interior of `D` and `C < f'`, then\n`f` grows faster than `C * x` on `D`, i.e., `C * (y - x) < f y - f x` whenever `x, y ∈ D`,\n`x < y`. -/\ntheorem ∀ {D : Set ℝ},\n  Convex ℝ D →\n    ∀ {f : ℝ → ℝ},\n      ContinuousOn f D →\n        DifferentiableOn ℝ f (interior D) →\n          ∀ {C : (fun x => ℝ) 1},\n            (∀ (x : ℝ), x ∈ interior D → C < deriv f x) →\n              ∀ (x : ℝ), x ∈ D → ∀ (y : ℝ), y ∈ D → x < y → C * (y - x) < f y - f x :=\n\n/-- Intermediate value theorem for two functions: if `f` and `g` are two functions continuous\non a preconnected set `s` and for some `a b ∈ s` we have `f a ≤ g a` and `g b ≤ f b`,\nthen for some `x ∈ s` we have `f x = g x`. -/\ntheorem ∀ {X : Type u} {α : Type v} [inst : TopologicalSpace X] [inst_1 : LinearOrder α] [inst_2 : TopologicalSpace α]\n  [inst_3 : OrderClosedTopology α] {s : Set X},\n  IsPreconnected s →\n    ∀ {a b : X},\n      a ∈ s →\n        b ∈ s → ∀ {f g : X → α}, ContinuousOn f s → ContinuousOn g s → f a ≤ g a → g b ≤ f b → ∃ x, x ∈ s ∧ f x = g x :=\n\n/-- Let `f` be a function continuous on a convex (or, equivalently, connected) subset `D`\nof the real line. If `f` is differentiable on the interior of `D` and `f' ≤ C`, then\n`f` grows at most as fast as `C * x` on `D`, i.e., `f y - f x ≤ C * (y - x)` whenever `x, y ∈ D`,\n`x ≤ y`. -/\ntheorem ∀ {D : Set ℝ},\n  Convex ℝ D →\n    ∀ {f : ℝ → ℝ},\n      ContinuousOn f D →\n        DifferentiableOn ℝ f (interior D) →\n          ∀ {C : (fun x => ℝ) 1},\n            (∀ (x : ℝ), x ∈ interior D → deriv f x ≤ C) →\n              ∀ (x : ℝ), x ∈ D → ∀ (y : ℝ), y ∈ D → x ≤ y → f y - f x ≤ C * (y - x) :=\n\n/-- Intermediate value theorem for two functions: if `f` and `g` are two continuous functions\non a preconnected space and `f a ≤ g a` and `g b ≤ f b`, then for some `x` we have `f x = g x`. -/\ntheorem ∀ {X : Type u} {α : Type v} [inst : TopologicalSpace X] [inst_1 : LinearOrder α] [inst_2 : TopologicalSpace α]\n  [inst_3 : OrderClosedTopology α] [inst_4 : PreconnectedSpace X] {a b : X} {f g : X → α},\n  Continuous f → Continuous g → f a ≤ g a → g b ≤ f b → ∃ x, f x = g x :=\n\n/-- Let `f : ℝ → ℝ` be a differentiable function. If `C ≤ f'`, then `f` grows at least as fast\nas `C * x`, i.e., `C * (y - x) ≤ f y - f x` whenever `x ≤ y`. -/\ntheorem ∀ {f : ℝ → ℝ},\n  Differentiable ℝ f → ∀ {C : (fun x => ℝ) 1}, (∀ (x : ℝ), C ≤ deriv f x) → ∀ ⦃x y : ℝ⦄, x ≤ y → C * (y - x) ≤ f y - f x :=\n\n/-- If `f (g y) = y` for `y` in some neighborhood of `a`, `g` is continuous at `a`, and `f` has an\ninvertible derivative `f'` at `g a`, then `g` has the derivative `f'⁻¹` at `a`.\n\nThis is one of the easy parts of the inverse function theorem: it assumes that we already have\nan inverse function. -/\ntheorem ∀ {𝕜 : Type u_1} [inst : NontriviallyNormedField 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E] {F : Type u_3} [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] {f : E → F}\n  {f' : E ≃L[𝕜] F} {g : F → E} {a : F},\n  ContinuousAt g a →\n    HasFDerivAt f (↑f') (g a) → (∀ᶠ (y : F) in nhds a, f (g y) = y) → HasFDerivAt g (↑(ContinuousLinearEquiv.symm f')) a :=\n\n/-- If `f` is a function strictly monotone on a right neighborhood of `a` and the\nimage of this neighborhood under `f` meets every interval `(f a, b]`, `b > f a`, then `f` is\ncontinuous at `a` from the right.\n\nThe assumption `hfs : ∀ b > f a, ∃ c ∈ s, f c ∈ Ioc (f a) b` is required because otherwise the\nfunction `f : ℝ → ℝ` given by `f x = if x ≤ 0 then x else x + 1` would be a counter-example at\n`a = 0`. -/\ntheorem ∀ {α : Type u_1} {β : Type u_2} [inst : LinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderTopology α]\n  [inst_3 : LinearOrder β] [inst_4 : TopologicalSpace β] [inst_5 : OrderTopology β] {f : α → β} {s : Set α} {a : α},\n  StrictMonoOn f s →\n    s ∈ nhdsWithin a (Set.Ici a) →\n      (∀ (b : β), b > f a → ∃ c, c ∈ s ∧ f c ∈ Set.Ioc (f a) b) → ContinuousWithinAt f (Set.Ici a) a :=\n\n/-- If `f` is a monotone function on a neighborhood of `a` and the image of this neighborhood under\n`f` meets every interval `(b, f a)`, `b < f a`, and every interval `(f a, b)`, `b > f a`, then `f`\nis continuous at `a`. -/\ntheorem ∀ {α : Type u_1} {β : Type u_2} [inst : LinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderTopology α]\n  [inst_3 : LinearOrder β] [inst_4 : TopologicalSpace β] [inst_5 : OrderTopology β] {f : α → β} {s : Set α} {a : α},\n  MonotoneOn f s →\n    s ∈ nhds a →\n      (∀ (b : β), b < f a → ∃ c, c ∈ s ∧ f c ∈ Set.Ioo b (f a)) →\n        (∀ (b : β), b > f a → ∃ c, c ∈ s ∧ f c ∈ Set.Ioo (f a) b) → ContinuousAt f a :=\n\n/-- Let `f : ℝ → ℝ` be a differentiable function. If `C < f'`, then `f` grows faster than\n`C * x`, i.e., `C * (y - x) < f y - f x` whenever `x < y`. -/\ntheorem ∀ {f : ℝ → ℝ},\n  Differentiable ℝ f → ∀ {C : (fun x => ℝ) 1}, (∀ (x : ℝ), C < deriv f x) → ∀ ⦃x y : ℝ⦄, x < y → C * (y - x) < f y - f x :=\n\n/-- If `f (g y) = y` for `y` in some neighborhood of `a`, `g` is continuous at `a`, and `f` has an\ninvertible derivative `f'` at `g a` in the strict sense, then `g` has the derivative `f'⁻¹` at `a`\nin the strict sense.\n\nThis is one of the easy parts of the inverse function theorem: it assumes that we already have an\ninverse function. -/\ntheorem ∀ {𝕜 : Type u} [inst : NontriviallyNormedField 𝕜] {f g : 𝕜 → 𝕜} {f' a : 𝕜},\n  ContinuousAt g a →\n    HasStrictDerivAt f f' (g a) → f' ≠ 0 → (∀ᶠ (y : 𝕜) in nhds a, f (g y) = y) → HasStrictDerivAt g f'⁻¹ a :=\n\n/-- Let `f` be a function continuous on a convex (or, equivalently, connected) subset `D`\nof the real line. If `f` is differentiable on the interior of `D` and `f'` is nonnegative, then\n`f` is a monotone function on `D`. -/\ntheorem ∀ {D : Set ℝ},\n  Convex ℝ D →\n    ∀ {f : ℝ → ℝ},\n      ContinuousOn f D →\n        DifferentiableOn ℝ f (interior D) → (∀ (x : ℝ), x ∈ interior D → 0 ≤ deriv f x) → MonotoneOn f D :=\n\n/-- Let `f : ℝ → ℝ` be a differentiable function. If `f' ≤ C`, then `f` grows at most as fast\nas `C * x`, i.e., `f y - f x ≤ C * (y - x)` whenever `x ≤ y`. -/\ntheorem ∀ {f : ℝ → ℝ},\n  Differentiable ℝ f → ∀ {C : (fun x => ℝ) 1}, (∀ (x : ℝ), deriv f x ≤ C) → ∀ ⦃x y : ℝ⦄, x ≤ y → f y - f x ≤ C * (y - x) :=\n\n/-- Suppose (a) `f` is continuous for `x ≥ 0`, (b) `f'(x)` exists for `x > 0`, (c) `f(0) = 0`, (d) `f'` is monotonically increasing. Put `g(x) = f(x)/x` for `(x > 0)` and prove that `g` is monotonically increasing. -/\ntheorem", "choices": ["∀ {f : ℝ → ℝ},\n  ContinuousOn f (Set.Ici 0) →\n    DifferentiableOn ℝ f (Set.Ioi 0) →\n      f 0 = 0 →\n        MonotoneOn (deriv f) (Set.Ioi 0) → MonotoneOn (λ x, f x / x) (Set.Ioi 0) ", "∀ {f : ℝ → ℝ},\n  ContinuousOn f (Set.Ici 0) →\n    DifferentiableOn ℝ f (Set.Ioi 0) →\n      f 0 = 0 →\n        MonotoneOn (deriv f) (Set.Ioi 0) →\n          MonotoneOn (λ x, f x / x) (Set.Ioi 0) ", "∀ {f : ℝ → ℝ},\n  ContinuousOn f (Set.Ici 0) →\n    DifferentiableOn ℝ f (Set.Ioi 0) →\n      f 0 = 0 →\n        Monotone (deriv f) → ∀ ⦃x y : ℝ⦄, 0 < x → x ≤ y → f x / x ≤ f y / y ", "∀ {f : ℝ → ℝ},\n  ContinuousOn f (Set.Ici 0) →\n    DifferentiableOn ℝ f (Set.Ioi 0) →\n      f 0 = 0 →\n        MonotoneOn (deriv f) (Set.Ioi 0) →\n          MonotoneOn (fun x => f x / x) (Set.Ioi 0) ", "∀ {f : ℝ → ℝ},\n  ContinuousOn f (Set.Ici 0) →\n    DifferentiableOn ℝ f (Set.Ioi 0) →\n      f 0 = 0 →\n        MonotoneOn (deriv f) (Set.Ioi 0) →\n          MonotoneOn (λ (x : ℝ), f x / x) (Set.Ioi 0) ", "∀ {f f' : ℝ → ℝ},\n  (∀ x, 0 ≤ x → ContinuousAt f x) →\n    (∀ x, 0 < x → HasDerivAt f (f' x) x) →\n      f 0 = 0 →\n        Monotone f' →\n          Monotone (λ x, f x / x) ", "∀ {f : ℝ → ℝ},\n  ContinuousOn f (Set.Ici 0) →\n  DifferentiableOn ℝ f (Set.Ioi 0) →\n  f 0 = 0 → \n  MonotoneOn (deriv f) (Set.Ioi 0) →\n  MonotoneOn (λ x, f x / x) (Set.Ioi 0) ", "∀ {f : ℝ → ℝ},\n  ContinuousOn f (Set.Ici 0) →\n    DifferentiableOn ℝ f (Set.Ioi 0) →\n      f 0 = 0 →\n        MonotoneOn (deriv f) (Set.Ioi 0) →\n          MonotoneOn (λ x, f x / x) (Set.Ioi 0) ", "∀ {f : ℝ → ℝ},\n  (∀ x, 0 ≤ x → ContinuousAt f x) →\n  (∀ x, 0 < x → DifferentiableAt ℝ f x) →\n  f 0 = 0 →\n  (∀ x y, 0 < x → x < y → deriv f x ≤ deriv f y) →\n  ∀ ⦃x y : ℝ⦄,\n    0 < x → x < y → (f x) / x ≤ (f y) / y ", "∀ {f : ℝ → ℝ},\n  ContinuousOn f (Set.Ici 0) →\n  DifferentiableOn ℝ f (Set.Ioi 0) →\n  f 0 = 0 →\n  MonotoneOn (deriv f) (Set.Ioi 0) →\n  MonotoneOn (λ x, f x / x) (Set.Ioi 0) "]}
{"docString": "Suppose `a ∈ ℝ^1`, `f` is a twice-differentiable real function on `(a, ∞)`, and `M_0, M_1, M_2` are the least upper bounds of `|f(x)|`, `|f'(x)|`, `|f''(x)|`, respectively, on `(a, ∞)`. Prove that `M_1^2 ≤ 4 M_0 M_2`.", "prompts": "[{\"theorem\":\n  \"∀ {X : Type u} {α : Type v} [inst : TopologicalSpace X] [inst_1 : LinearOrder α] [inst_2 : TopologicalSpace α]\\n  [inst_3 : OrderClosedTopology α] {s : Set X},\\n  IsPreconnected s →\\n    ∀ {a b : X},\\n      a ∈ s →\\n        b ∈ s → ∀ {f g : X → α}, ContinuousOn f s → ContinuousOn g s → f a ≤ g a → g b ≤ f b → ∃ x, x ∈ s ∧ f x = g x\",\n  \"isProp\": true,\n  \"docString\":\n  \"Intermediate value theorem for two functions: if `f` and `g` are two functions continuous\\non a preconnected set `s` and for some `a b ∈ s` we have `f a ≤ g a` and `g b ≤ f b`,\\nthen for some `x ∈ s` we have `f x = g x`. \"},\n {\"theorem\":\n  \"∀ {X : Type u} {α : Type v} [inst : TopologicalSpace X] [inst_1 : LinearOrder α] [inst_2 : TopologicalSpace α]\\n  [inst_3 : OrderClosedTopology α] [inst_4 : PreconnectedSpace X] {a b : X} {f g : X → α},\\n  Continuous f → Continuous g → f a ≤ g a → g b ≤ f b → ∃ x, f x = g x\",\n  \"isProp\": true,\n  \"docString\":\n  \"Intermediate value theorem for two functions: if `f` and `g` are two continuous functions\\non a preconnected space and `f a ≤ g a` and `g b ≤ f b`, then for some `x` we have `f x = g x`. \"},\n {\"theorem\":\n  \"∀ {f f' : ℝ → ℝ} {a b : ℝ},\\n  ContinuousOn f (Set.Icc a b) →\\n    (∀ (x : ℝ), x ∈ Set.Ico a b → ∀ (r : ℝ), f' x < r → ∃ᶠ (z : ℝ) in nhdsWithin x (Set.Ioi x), slope f x z < r) →\\n      ∀ {B B' : ℝ → ℝ},\\n        f a ≤ B a →\\n          (∀ (x : ℝ), HasDerivAt B (B' x) x) →\\n            (∀ (x : ℝ), x ∈ Set.Ico a b → f x = B x → f' x < B' x) → ∀ ⦃x : ℝ⦄, x ∈ Set.Icc a b → f x ≤ B x\",\n  \"isProp\": true,\n  \"docString\":\n  \"General fencing theorem for continuous functions with an estimate on the derivative.\\nLet `f` and `B` be continuous functions on `[a, b]` such that\\n\\n* `f a ≤ B a`;\\n* `B` has derivative `B'` everywhere on `ℝ`;\\n* for each `x ∈ [a, b)` the right-side limit inferior of `(f z - f x) / (z - x)`\\n  is bounded above by a function `f'`;\\n* we have `f' x < B' x` whenever `f x = B x`.\\n\\nThen `f x ≤ B x` everywhere on `[a, b]`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : MeasurableSpace α] {μ : MeasureTheory.Measure α} {p : ℝ} {f g : α → ENNReal},\\n  AEMeasurable f →\\n    AEMeasurable g →\\n      1 ≤ p →\\n        (∫⁻ (a : α), (f + g) a ^ p ∂μ) ^ (1 / p) ≤\\n          (∫⁻ (a : α), f a ^ p ∂μ) ^ (1 / p) + (∫⁻ (a : α), g a ^ p ∂μ) ^ (1 / p)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Minkowski's inequality for functions `α → ℝ≥0∞`: the `ℒp` seminorm of the sum of two\\nfunctions is bounded by the sum of their `ℒp` seminorms. \"},\n {\"theorem\":\n  \"∀ {f : ℝ → ℝ},\\n  Differentiable ℝ f → ∀ {C : (fun x => ℝ) 1}, (∀ (x : ℝ), C ≤ deriv f x) → ∀ ⦃x y : ℝ⦄, x ≤ y → C * (y - x) ≤ f y - f x\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `f : ℝ → ℝ` be a differentiable function. If `C ≤ f'`, then `f` grows at least as fast\\nas `C * x`, i.e., `C * (y - x) ≤ f y - f x` whenever `x ≤ y`. \"},\n {\"theorem\":\n  \"∀ {f : ℝ → ℝ},\\n  Differentiable ℝ f → ∀ {C : (fun x => ℝ) 1}, (∀ (x : ℝ), deriv f x ≤ C) → ∀ ⦃x y : ℝ⦄, x ≤ y → f y - f x ≤ C * (y - x)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `f : ℝ → ℝ` be a differentiable function. If `f' ≤ C`, then `f` grows at most as fast\\nas `C * x`, i.e., `f y - f x ≤ C * (y - x)` whenever `x ≤ y`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {m : MeasurableSpace α} (μ : MeasureTheory.Measure α) (f : α → ENNReal),\\n  ∃ g, Measurable g ∧ g ≤ f ∧ ∫⁻ (a : α), f a ∂μ = ∫⁻ (a : α), g a ∂μ\",\n  \"isProp\": true,\n  \"docString\":\n  \"For any function `f : α → ℝ≥0∞`, there exists a measurable function `g ≤ f` with the same\\nintegral. \"},\n {\"theorem\":\n  \"∀ {a b : ℝ} {f f' : ℝ → ℝ},\\n  a ≤ b →\\n    (∀ (x : ℝ), x ∈ Set.Icc a b → HasDerivWithinAt f (f' x) (Set.Icc a b) x) →\\n      ∀ {m : ℝ}, f' a ≤ m → m ≤ f' b → m ∈ f' '' Set.Icc a b\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Darboux's theorem**: if `a ≤ b` and `f' a ≤ m ≤ f' b`, then `f' c = m` for some\\n`c ∈ [a, b]`. \"},\n {\"theorem\":\n  \"∀ {f f' : ℝ → ℝ} {a b : ℝ},\\n  ContinuousOn f (Set.Icc a b) →\\n    (∀ (x : ℝ), x ∈ Set.Ico a b → HasDerivWithinAt f (f' x) (Set.Ici x) x) →\\n      ∀ {B B' : ℝ → ℝ},\\n        f a ≤ B a →\\n          ContinuousOn B (Set.Icc a b) →\\n            (∀ (x : ℝ), x ∈ Set.Ico a b → HasDerivWithinAt B (B' x) (Set.Ici x) x) →\\n              (∀ (x : ℝ), x ∈ Set.Ico a b → f' x ≤ B' x) → ∀ ⦃x : ℝ⦄, x ∈ Set.Icc a b → f x ≤ B x\",\n  \"isProp\": true,\n  \"docString\":\n  \"General fencing theorem for continuous functions with an estimate on the derivative.\\nLet `f` and `B` be continuous functions on `[a, b]` such that\\n\\n* `f a ≤ B a`;\\n* `B` has derivative `B'` everywhere on `ℝ`;\\n* `f` has right derivative `f'` at every point of `[a, b)`;\\n* we have `f' x ≤ B' x` on `[a, b)`.\\n\\nThen `f x ≤ B x` everywhere on `[a, b]`. \"},\n {\"theorem\":\n  \"∀ {f : ℝ → ℝ}, Differentiable ℝ f → Differentiable ℝ (deriv f) → (∀ (x : ℝ), 0 ≤ deriv^[2] f x) → ConvexOn ℝ Set.univ f\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a function `f` is twice differentiable on `ℝ`, and `f''` is nonnegative on `ℝ`,\\nthen `f` is convex on `ℝ`. \"},\n {\"theorem\":\n  \"∀ {f f' : ℝ → ℝ} {a b : ℝ},\\n  ContinuousOn f (Set.Icc a b) →\\n    (∀ (x : ℝ), x ∈ Set.Ico a b → ∀ (r : ℝ), f' x < r → ∃ᶠ (z : ℝ) in nhdsWithin x (Set.Ioi x), slope f x z < r) →\\n      ∀ {B B' : ℝ → ℝ},\\n        f a ≤ B a →\\n          ContinuousOn B (Set.Icc a b) →\\n            (∀ (x : ℝ), x ∈ Set.Ico a b → HasDerivWithinAt B (B' x) (Set.Ici x) x) →\\n              (∀ (x : ℝ), x ∈ Set.Ico a b → f x = B x → f' x < B' x) → ∀ ⦃x : ℝ⦄, x ∈ Set.Icc a b → f x ≤ B x\",\n  \"isProp\": true,\n  \"docString\":\n  \"General fencing theorem for continuous functions with an estimate on the derivative.\\nLet `f` and `B` be continuous functions on `[a, b]` such that\\n\\n* `f a ≤ B a`;\\n* `B` has right derivative `B'` at every point of `[a, b)`;\\n* for each `x ∈ [a, b)` the right-side limit inferior of `(f z - f x) / (z - x)`\\n  is bounded above by a function `f'`;\\n* we have `f' x < B' x` whenever `f x = B x`.\\n\\nThen `f x ≤ B x` everywhere on `[a, b]`. \"},\n {\"theorem\":\n  \"∀ {f f' : ℝ → ℝ} {a b : ℝ},\\n  ContinuousOn f (Set.Icc a b) →\\n    (∀ (x : ℝ), x ∈ Set.Ico a b → HasDerivWithinAt f (f' x) (Set.Ici x) x) →\\n      ∀ {B B' : ℝ → ℝ},\\n        f a ≤ B a →\\n          (∀ (x : ℝ), HasDerivAt B (B' x) x) →\\n            (∀ (x : ℝ), x ∈ Set.Ico a b → f x = B x → f' x < B' x) → ∀ ⦃x : ℝ⦄, x ∈ Set.Icc a b → f x ≤ B x\",\n  \"isProp\": true,\n  \"docString\":\n  \"General fencing theorem for continuous functions with an estimate on the derivative.\\nLet `f` and `B` be continuous functions on `[a, b]` such that\\n\\n* `f a ≤ B a`;\\n* `B` has derivative `B'` everywhere on `ℝ`;\\n* `f` has right derivative `f'` at every point of `[a, b)`;\\n* we have `f' x < B' x` whenever `f x = B x`.\\n\\nThen `f x ≤ B x` everywhere on `[a, b]`. \"},\n {\"theorem\":\n  \"∀ {a b : ℝ} {f f' : ℝ → ℝ},\\n  a ≤ b →\\n    (∀ (x : ℝ), x ∈ Set.Icc a b → HasDerivWithinAt f (f' x) (Set.Icc a b) x) →\\n      ∀ {m : ℝ}, f' a ≤ m → m ≤ f' b → m ∈ f' '' Set.Icc a b\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Darboux's theorem**: if `a ≤ b` and `f' b ≤ m ≤ f' a`, then `f' c = m` for some\\n`c ∈ [a, b]`. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] {f : ℝ → E} {a b : ℝ} {f' : ℝ → E},\\n  ContinuousOn f (Set.Icc a b) →\\n    (∀ (x : ℝ), x ∈ Set.Ico a b → HasDerivWithinAt f (f' x) (Set.Ici x) x) →\\n      ∀ {B B' : ℝ → ℝ},\\n        ‖f a‖ ≤ B a →\\n          (∀ (x : ℝ), HasDerivAt B (B' x) x) →\\n            (∀ (x : ℝ), x ∈ Set.Ico a b → ‖f x‖ = B x → ‖f' x‖ < B' x) → ∀ ⦃x : ℝ⦄, x ∈ Set.Icc a b → ‖f x‖ ≤ B x\",\n  \"isProp\": true,\n  \"docString\":\n  \"General fencing theorem for continuous functions with an estimate on the norm of the derivative.\\nLet `f` and `B` be continuous functions on `[a, b]` such that\\n\\n* `‖f a‖ ≤ B a`;\\n* `f` has right derivative `f'` at every point of `[a, b)`;\\n* `B` has derivative `B'` everywhere on `ℝ`;\\n* the norm of `f'` is strictly less than `B'` whenever `‖f x‖ = B x`.\\n\\nThen `‖f x‖ ≤ B x` everywhere on `[a, b]`. We use one-sided derivatives in the assumptions\\nto make this theorem work for piecewise differentiable functions.\\n\"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] (f : ℝ → E),\\n  Filter.Tendsto (Real.fourierIntegral f) (Filter.cocompact ℝ) (nhds 0)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The Riemann-Lebesgue lemma for functions on `ℝ`, formulated via `Real.fourierIntegral`. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] {f : ℝ → E} {a b : ℝ} {f' : ℝ → E},\\n  ContinuousOn f (Set.Icc a b) →\\n    (∀ (x : ℝ), x ∈ Set.Ico a b → HasDerivWithinAt f (f' x) (Set.Ici x) x) →\\n      ∀ {B B' : ℝ → ℝ},\\n        ‖f a‖ ≤ B a →\\n          (∀ (x : ℝ), HasDerivAt B (B' x) x) →\\n            (∀ (x : ℝ), x ∈ Set.Ico a b → ‖f' x‖ ≤ B' x) → ∀ ⦃x : ℝ⦄, x ∈ Set.Icc a b → ‖f x‖ ≤ B x\",\n  \"isProp\": true,\n  \"docString\":\n  \"General fencing theorem for continuous functions with an estimate on the norm of the derivative.\\nLet `f` and `B` be continuous functions on `[a, b]` such that\\n\\n* `‖f a‖ ≤ B a`;\\n* `f` has right derivative `f'` at every point of `[a, b)`;\\n* `B` has derivative `B'` everywhere on `ℝ`;\\n* we have `‖f' x‖ ≤ B x` everywhere on `[a, b)`.\\n\\nThen `‖f x‖ ≤ B x` everywhere on `[a, b]`. We use one-sided derivatives in the assumptions\\nto make this theorem work for piecewise differentiable functions.\\n\"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {C : ℝ} {f : ℂ → E} {z : ℂ},\\n  DiffContOnCl ℂ f (Set.Ioi 0 ×ℂ Set.Iio 0) →\\n    (∃ c,\\n        c < 2 ∧\\n          ∃ B,\\n            f =O[Filter.comap (↑Complex.abs) Filter.atTop ⊓ Filter.principal (Set.Ioi 0 ×ℂ Set.Iio 0)] fun z =>\\n              rexp (B * ↑Complex.abs z ^ c)) →\\n      (∀ (x : ℝ), 0 ≤ x → ‖f ↑x‖ ≤ C) → (∀ (x : ℝ), x ≤ 0 → ‖f (↑x * Complex.I)‖ ≤ C) → 0 ≤ z.re → z.im ≤ 0 → ‖f z‖ ≤ C\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Phragmen-Lindelöf principle** in the fourth quadrant. Let `f : ℂ → E` be a function such that\\n\\n* `f` is differentiable in the open fourth quadrant and is continuous on its closure;\\n* `‖f z‖` is bounded from above by `A * exp(B * (abs z) ^ c)` on the open fourth quadrant\\n  for some `c < 2`;\\n* `‖f z‖` is bounded from above by a constant `C` on the boundary of the fourth quadrant.\\n\\nThen `‖f z‖` is bounded from above by the same constant on the closed fourth quadrant. \"},\n {\"theorem\":\n  \"∀ {a b : ℝ} {E : Type u_1} [inst : NormedAddCommGroup E] {f : ℝ → E} {f' : ℝ → ℝ},\\n  ContinuousOn f (Set.Icc a b) →\\n    (∀ (x : ℝ),\\n        x ∈ Set.Ico a b → ∀ (r : ℝ), f' x < r → ∃ᶠ (z : ℝ) in nhdsWithin x (Set.Ioi x), slope (norm ∘ f) x z < r) →\\n      ∀ {B B' : ℝ → ℝ},\\n        ‖f a‖ ≤ B a →\\n          ContinuousOn B (Set.Icc a b) →\\n            (∀ (x : ℝ), x ∈ Set.Ico a b → HasDerivWithinAt B (B' x) (Set.Ici x) x) →\\n              (∀ (x : ℝ), x ∈ Set.Ico a b → ‖f x‖ = B x → f' x < B' x) → ∀ ⦃x : ℝ⦄, x ∈ Set.Icc a b → ‖f x‖ ≤ B x\",\n  \"isProp\": true,\n  \"docString\":\n  \"General fencing theorem for continuous functions with an estimate on the derivative.\\nLet `f` and `B` be continuous functions on `[a, b]` such that\\n\\n* `‖f a‖ ≤ B a`;\\n* `B` has right derivative at every point of `[a, b)`;\\n* for each `x ∈ [a, b)` the right-side limit inferior of `(‖f z‖ - ‖f x‖) / (z - x)`\\n  is bounded above by a function `f'`;\\n* we have `f' x < B' x` whenever `‖f x‖ = B x`.\\n\\nThen `‖f x‖ ≤ B x` everywhere on `[a, b]`. \"},\n {\"theorem\":\n  \"∀ {f : ℝ → ℝ} {a b : ℝ},\\n  ContinuousOn f (Set.Icc a b) →\\n    ∀ {B B' : ℝ → ℝ},\\n      f a ≤ B a →\\n        ContinuousOn B (Set.Icc a b) →\\n          (∀ (x : ℝ), x ∈ Set.Ico a b → HasDerivWithinAt B (B' x) (Set.Ici x) x) →\\n            (∀ (x : ℝ),\\n                x ∈ Set.Ico a b → ∀ (r : ℝ), B' x < r → ∃ᶠ (z : ℝ) in nhdsWithin x (Set.Ioi x), slope f x z < r) →\\n              ∀ ⦃x : ℝ⦄, x ∈ Set.Icc a b → f x ≤ B x\",\n  \"isProp\": true,\n  \"docString\":\n  \"General fencing theorem for continuous functions with an estimate on the derivative.\\nLet `f` and `B` be continuous functions on `[a, b]` such that\\n\\n* `f a ≤ B a`;\\n* `B` has right derivative `B'` at every point of `[a, b)`;\\n* for each `x ∈ [a, b)` the right-side limit inferior of `(f z - f x) / (z - x)`\\n  is bounded above by `B'`.\\n\\nThen `f x ≤ B x` everywhere on `[a, b]`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {m m0 : MeasurableSpace α} {μ : MeasureTheory.Measure α} {s : Set α},\\n  m ≤ m0 →\\n    ∀ {f g : α → ℝ},\\n      MeasureTheory.StronglyMeasurable f →\\n        MeasureTheory.IntegrableOn f s →\\n          MeasureTheory.StronglyMeasurable g →\\n            MeasureTheory.IntegrableOn g s →\\n              (∀ (t : Set α), MeasurableSet t → ↑↑μ t < ⊤ → ∫ (x : α) in t, g x ∂μ = ∫ (x : α) in t, f x ∂μ) →\\n                MeasurableSet s → ↑↑μ s ≠ ⊤ → ∫ (x : α) in s, ‖g x‖ ∂μ ≤ ∫ (x : α) in s, ‖f x‖ ∂μ\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `m` be a sub-σ-algebra of `m0`, `f` an `m0`-measurable function and `g` an `m`-measurable\\nfunction, such that their integrals coincide on `m`-measurable sets with finite measure.\\nThen `∫ x in s, ‖g x‖ ∂μ ≤ ∫ x in s, ‖f x‖ ∂μ` on all `m`-measurable sets with finite measure. \"}]\n", "prompt_cons": "/-- Intermediate value theorem for two functions: if `f` and `g` are two functions continuous\non a preconnected set `s` and for some `a b ∈ s` we have `f a ≤ g a` and `g b ≤ f b`,\nthen for some `x ∈ s` we have `f x = g x`. -/\ntheorem ∀ {X : Type u} {α : Type v} [inst : TopologicalSpace X] [inst_1 : LinearOrder α] [inst_2 : TopologicalSpace α]\n  [inst_3 : OrderClosedTopology α] {s : Set X},\n  IsPreconnected s →\n    ∀ {a b : X},\n      a ∈ s →\n        b ∈ s → ∀ {f g : X → α}, ContinuousOn f s → ContinuousOn g s → f a ≤ g a → g b ≤ f b → ∃ x, x ∈ s ∧ f x = g x :=\n\n/-- Intermediate value theorem for two functions: if `f` and `g` are two continuous functions\non a preconnected space and `f a ≤ g a` and `g b ≤ f b`, then for some `x` we have `f x = g x`. -/\ntheorem ∀ {X : Type u} {α : Type v} [inst : TopologicalSpace X] [inst_1 : LinearOrder α] [inst_2 : TopologicalSpace α]\n  [inst_3 : OrderClosedTopology α] [inst_4 : PreconnectedSpace X] {a b : X} {f g : X → α},\n  Continuous f → Continuous g → f a ≤ g a → g b ≤ f b → ∃ x, f x = g x :=\n\n/-- General fencing theorem for continuous functions with an estimate on the derivative.\nLet `f` and `B` be continuous functions on `[a, b]` such that\n\n* `f a ≤ B a`;\n* `B` has derivative `B'` everywhere on `ℝ`;\n* for each `x ∈ [a, b)` the right-side limit inferior of `(f z - f x) / (z - x)`\n  is bounded above by a function `f'`;\n* we have `f' x < B' x` whenever `f x = B x`.\n\nThen `f x ≤ B x` everywhere on `[a, b]`. -/\ntheorem ∀ {f f' : ℝ → ℝ} {a b : ℝ},\n  ContinuousOn f (Set.Icc a b) →\n    (∀ (x : ℝ), x ∈ Set.Ico a b → ∀ (r : ℝ), f' x < r → ∃ᶠ (z : ℝ) in nhdsWithin x (Set.Ioi x), slope f x z < r) →\n      ∀ {B B' : ℝ → ℝ},\n        f a ≤ B a →\n          (∀ (x : ℝ), HasDerivAt B (B' x) x) →\n            (∀ (x : ℝ), x ∈ Set.Ico a b → f x = B x → f' x < B' x) → ∀ ⦃x : ℝ⦄, x ∈ Set.Icc a b → f x ≤ B x :=\n\n/-- Minkowski's inequality for functions `α → ℝ≥0∞`: the `ℒp` seminorm of the sum of two\nfunctions is bounded by the sum of their `ℒp` seminorms. -/\ntheorem ∀ {α : Type u_1} [inst : MeasurableSpace α] {μ : MeasureTheory.Measure α} {p : ℝ} {f g : α → ENNReal},\n  AEMeasurable f →\n    AEMeasurable g →\n      1 ≤ p →\n        (∫⁻ (a : α), (f + g) a ^ p ∂μ) ^ (1 / p) ≤\n          (∫⁻ (a : α), f a ^ p ∂μ) ^ (1 / p) + (∫⁻ (a : α), g a ^ p ∂μ) ^ (1 / p) :=\n\n/-- Let `f : ℝ → ℝ` be a differentiable function. If `C ≤ f'`, then `f` grows at least as fast\nas `C * x`, i.e., `C * (y - x) ≤ f y - f x` whenever `x ≤ y`. -/\ntheorem ∀ {f : ℝ → ℝ},\n  Differentiable ℝ f → ∀ {C : (fun x => ℝ) 1}, (∀ (x : ℝ), C ≤ deriv f x) → ∀ ⦃x y : ℝ⦄, x ≤ y → C * (y - x) ≤ f y - f x :=\n\n/-- Let `f : ℝ → ℝ` be a differentiable function. If `f' ≤ C`, then `f` grows at most as fast\nas `C * x`, i.e., `f y - f x ≤ C * (y - x)` whenever `x ≤ y`. -/\ntheorem ∀ {f : ℝ → ℝ},\n  Differentiable ℝ f → ∀ {C : (fun x => ℝ) 1}, (∀ (x : ℝ), deriv f x ≤ C) → ∀ ⦃x y : ℝ⦄, x ≤ y → f y - f x ≤ C * (y - x) :=\n\n/-- For any function `f : α → ℝ≥0∞`, there exists a measurable function `g ≤ f` with the same\nintegral. -/\ntheorem ∀ {α : Type u_1} {m : MeasurableSpace α} (μ : MeasureTheory.Measure α) (f : α → ENNReal),\n  ∃ g, Measurable g ∧ g ≤ f ∧ ∫⁻ (a : α), f a ∂μ = ∫⁻ (a : α), g a ∂μ :=\n\n/-- **Darboux's theorem**: if `a ≤ b` and `f' a ≤ m ≤ f' b`, then `f' c = m` for some\n`c ∈ [a, b]`. -/\ntheorem ∀ {a b : ℝ} {f f' : ℝ → ℝ},\n  a ≤ b →\n    (∀ (x : ℝ), x ∈ Set.Icc a b → HasDerivWithinAt f (f' x) (Set.Icc a b) x) →\n      ∀ {m : ℝ}, f' a ≤ m → m ≤ f' b → m ∈ f' '' Set.Icc a b :=\n\n/-- General fencing theorem for continuous functions with an estimate on the derivative.\nLet `f` and `B` be continuous functions on `[a, b]` such that\n\n* `f a ≤ B a`;\n* `B` has derivative `B'` everywhere on `ℝ`;\n* `f` has right derivative `f'` at every point of `[a, b)`;\n* we have `f' x ≤ B' x` on `[a, b)`.\n\nThen `f x ≤ B x` everywhere on `[a, b]`. -/\ntheorem ∀ {f f' : ℝ → ℝ} {a b : ℝ},\n  ContinuousOn f (Set.Icc a b) →\n    (∀ (x : ℝ), x ∈ Set.Ico a b → HasDerivWithinAt f (f' x) (Set.Ici x) x) →\n      ∀ {B B' : ℝ → ℝ},\n        f a ≤ B a →\n          ContinuousOn B (Set.Icc a b) →\n            (∀ (x : ℝ), x ∈ Set.Ico a b → HasDerivWithinAt B (B' x) (Set.Ici x) x) →\n              (∀ (x : ℝ), x ∈ Set.Ico a b → f' x ≤ B' x) → ∀ ⦃x : ℝ⦄, x ∈ Set.Icc a b → f x ≤ B x :=\n\n/-- If a function `f` is twice differentiable on `ℝ`, and `f''` is nonnegative on `ℝ`,\nthen `f` is convex on `ℝ`. -/\ntheorem ∀ {f : ℝ → ℝ}, Differentiable ℝ f → Differentiable ℝ (deriv f) → (∀ (x : ℝ), 0 ≤ deriv^[2] f x) → ConvexOn ℝ Set.univ f :=\n\n/-- General fencing theorem for continuous functions with an estimate on the derivative.\nLet `f` and `B` be continuous functions on `[a, b]` such that\n\n* `f a ≤ B a`;\n* `B` has right derivative `B'` at every point of `[a, b)`;\n* for each `x ∈ [a, b)` the right-side limit inferior of `(f z - f x) / (z - x)`\n  is bounded above by a function `f'`;\n* we have `f' x < B' x` whenever `f x = B x`.\n\nThen `f x ≤ B x` everywhere on `[a, b]`. -/\ntheorem ∀ {f f' : ℝ → ℝ} {a b : ℝ},\n  ContinuousOn f (Set.Icc a b) →\n    (∀ (x : ℝ), x ∈ Set.Ico a b → ∀ (r : ℝ), f' x < r → ∃ᶠ (z : ℝ) in nhdsWithin x (Set.Ioi x), slope f x z < r) →\n      ∀ {B B' : ℝ → ℝ},\n        f a ≤ B a →\n          ContinuousOn B (Set.Icc a b) →\n            (∀ (x : ℝ), x ∈ Set.Ico a b → HasDerivWithinAt B (B' x) (Set.Ici x) x) →\n              (∀ (x : ℝ), x ∈ Set.Ico a b → f x = B x → f' x < B' x) → ∀ ⦃x : ℝ⦄, x ∈ Set.Icc a b → f x ≤ B x :=\n\n/-- General fencing theorem for continuous functions with an estimate on the derivative.\nLet `f` and `B` be continuous functions on `[a, b]` such that\n\n* `f a ≤ B a`;\n* `B` has derivative `B'` everywhere on `ℝ`;\n* `f` has right derivative `f'` at every point of `[a, b)`;\n* we have `f' x < B' x` whenever `f x = B x`.\n\nThen `f x ≤ B x` everywhere on `[a, b]`. -/\ntheorem ∀ {f f' : ℝ → ℝ} {a b : ℝ},\n  ContinuousOn f (Set.Icc a b) →\n    (∀ (x : ℝ), x ∈ Set.Ico a b → HasDerivWithinAt f (f' x) (Set.Ici x) x) →\n      ∀ {B B' : ℝ → ℝ},\n        f a ≤ B a →\n          (∀ (x : ℝ), HasDerivAt B (B' x) x) →\n            (∀ (x : ℝ), x ∈ Set.Ico a b → f x = B x → f' x < B' x) → ∀ ⦃x : ℝ⦄, x ∈ Set.Icc a b → f x ≤ B x :=\n\n/-- **Darboux's theorem**: if `a ≤ b` and `f' b ≤ m ≤ f' a`, then `f' c = m` for some\n`c ∈ [a, b]`. -/\ntheorem ∀ {a b : ℝ} {f f' : ℝ → ℝ},\n  a ≤ b →\n    (∀ (x : ℝ), x ∈ Set.Icc a b → HasDerivWithinAt f (f' x) (Set.Icc a b) x) →\n      ∀ {m : ℝ}, f' a ≤ m → m ≤ f' b → m ∈ f' '' Set.Icc a b :=\n\n/-- General fencing theorem for continuous functions with an estimate on the norm of the derivative.\nLet `f` and `B` be continuous functions on `[a, b]` such that\n\n* `‖f a‖ ≤ B a`;\n* `f` has right derivative `f'` at every point of `[a, b)`;\n* `B` has derivative `B'` everywhere on `ℝ`;\n* the norm of `f'` is strictly less than `B'` whenever `‖f x‖ = B x`.\n\nThen `‖f x‖ ≤ B x` everywhere on `[a, b]`. We use one-sided derivatives in the assumptions\nto make this theorem work for piecewise differentiable functions. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] {f : ℝ → E} {a b : ℝ} {f' : ℝ → E},\n  ContinuousOn f (Set.Icc a b) →\n    (∀ (x : ℝ), x ∈ Set.Ico a b → HasDerivWithinAt f (f' x) (Set.Ici x) x) →\n      ∀ {B B' : ℝ → ℝ},\n        ‖f a‖ ≤ B a →\n          (∀ (x : ℝ), HasDerivAt B (B' x) x) →\n            (∀ (x : ℝ), x ∈ Set.Ico a b → ‖f x‖ = B x → ‖f' x‖ < B' x) → ∀ ⦃x : ℝ⦄, x ∈ Set.Icc a b → ‖f x‖ ≤ B x :=\n\n/-- The Riemann-Lebesgue lemma for functions on `ℝ`, formulated via `Real.fourierIntegral`. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] (f : ℝ → E),\n  Filter.Tendsto (Real.fourierIntegral f) (Filter.cocompact ℝ) (nhds 0) :=\n\n/-- General fencing theorem for continuous functions with an estimate on the norm of the derivative.\nLet `f` and `B` be continuous functions on `[a, b]` such that\n\n* `‖f a‖ ≤ B a`;\n* `f` has right derivative `f'` at every point of `[a, b)`;\n* `B` has derivative `B'` everywhere on `ℝ`;\n* we have `‖f' x‖ ≤ B x` everywhere on `[a, b)`.\n\nThen `‖f x‖ ≤ B x` everywhere on `[a, b]`. We use one-sided derivatives in the assumptions\nto make this theorem work for piecewise differentiable functions. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] {f : ℝ → E} {a b : ℝ} {f' : ℝ → E},\n  ContinuousOn f (Set.Icc a b) →\n    (∀ (x : ℝ), x ∈ Set.Ico a b → HasDerivWithinAt f (f' x) (Set.Ici x) x) →\n      ∀ {B B' : ℝ → ℝ},\n        ‖f a‖ ≤ B a →\n          (∀ (x : ℝ), HasDerivAt B (B' x) x) →\n            (∀ (x : ℝ), x ∈ Set.Ico a b → ‖f' x‖ ≤ B' x) → ∀ ⦃x : ℝ⦄, x ∈ Set.Icc a b → ‖f x‖ ≤ B x :=\n\n/-- **Phragmen-Lindelöf principle** in the fourth quadrant. Let `f : ℂ → E` be a function such that\n\n* `f` is differentiable in the open fourth quadrant and is continuous on its closure;\n* `‖f z‖` is bounded from above by `A * exp(B * (abs z) ^ c)` on the open fourth quadrant\n  for some `c < 2`;\n* `‖f z‖` is bounded from above by a constant `C` on the boundary of the fourth quadrant.\n\nThen `‖f z‖` is bounded from above by the same constant on the closed fourth quadrant. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {C : ℝ} {f : ℂ → E} {z : ℂ},\n  DiffContOnCl ℂ f (Set.Ioi 0 ×ℂ Set.Iio 0) →\n    (∃ c,\n        c < 2 ∧\n          ∃ B,\n            f =O[Filter.comap (↑Complex.abs) Filter.atTop ⊓ Filter.principal (Set.Ioi 0 ×ℂ Set.Iio 0)] fun z =>\n              rexp (B * ↑Complex.abs z ^ c)) →\n      (∀ (x : ℝ), 0 ≤ x → ‖f ↑x‖ ≤ C) → (∀ (x : ℝ), x ≤ 0 → ‖f (↑x * Complex.I)‖ ≤ C) → 0 ≤ z.re → z.im ≤ 0 → ‖f z‖ ≤ C :=\n\n/-- General fencing theorem for continuous functions with an estimate on the derivative.\nLet `f` and `B` be continuous functions on `[a, b]` such that\n\n* `‖f a‖ ≤ B a`;\n* `B` has right derivative at every point of `[a, b)`;\n* for each `x ∈ [a, b)` the right-side limit inferior of `(‖f z‖ - ‖f x‖) / (z - x)`\n  is bounded above by a function `f'`;\n* we have `f' x < B' x` whenever `‖f x‖ = B x`.\n\nThen `‖f x‖ ≤ B x` everywhere on `[a, b]`. -/\ntheorem ∀ {a b : ℝ} {E : Type u_1} [inst : NormedAddCommGroup E] {f : ℝ → E} {f' : ℝ → ℝ},\n  ContinuousOn f (Set.Icc a b) →\n    (∀ (x : ℝ),\n        x ∈ Set.Ico a b → ∀ (r : ℝ), f' x < r → ∃ᶠ (z : ℝ) in nhdsWithin x (Set.Ioi x), slope (norm ∘ f) x z < r) →\n      ∀ {B B' : ℝ → ℝ},\n        ‖f a‖ ≤ B a →\n          ContinuousOn B (Set.Icc a b) →\n            (∀ (x : ℝ), x ∈ Set.Ico a b → HasDerivWithinAt B (B' x) (Set.Ici x) x) →\n              (∀ (x : ℝ), x ∈ Set.Ico a b → ‖f x‖ = B x → f' x < B' x) → ∀ ⦃x : ℝ⦄, x ∈ Set.Icc a b → ‖f x‖ ≤ B x :=\n\n/-- General fencing theorem for continuous functions with an estimate on the derivative.\nLet `f` and `B` be continuous functions on `[a, b]` such that\n\n* `f a ≤ B a`;\n* `B` has right derivative `B'` at every point of `[a, b)`;\n* for each `x ∈ [a, b)` the right-side limit inferior of `(f z - f x) / (z - x)`\n  is bounded above by `B'`.\n\nThen `f x ≤ B x` everywhere on `[a, b]`. -/\ntheorem ∀ {f : ℝ → ℝ} {a b : ℝ},\n  ContinuousOn f (Set.Icc a b) →\n    ∀ {B B' : ℝ → ℝ},\n      f a ≤ B a →\n        ContinuousOn B (Set.Icc a b) →\n          (∀ (x : ℝ), x ∈ Set.Ico a b → HasDerivWithinAt B (B' x) (Set.Ici x) x) →\n            (∀ (x : ℝ),\n                x ∈ Set.Ico a b → ∀ (r : ℝ), B' x < r → ∃ᶠ (z : ℝ) in nhdsWithin x (Set.Ioi x), slope f x z < r) →\n              ∀ ⦃x : ℝ⦄, x ∈ Set.Icc a b → f x ≤ B x :=\n\n/-- Let `m` be a sub-σ-algebra of `m0`, `f` an `m0`-measurable function and `g` an `m`-measurable\nfunction, such that their integrals coincide on `m`-measurable sets with finite measure.\nThen `∫ x in s, ‖g x‖ ∂μ ≤ ∫ x in s, ‖f x‖ ∂μ` on all `m`-measurable sets with finite measure. -/\ntheorem ∀ {α : Type u_1} {m m0 : MeasurableSpace α} {μ : MeasureTheory.Measure α} {s : Set α},\n  m ≤ m0 →\n    ∀ {f g : α → ℝ},\n      MeasureTheory.StronglyMeasurable f →\n        MeasureTheory.IntegrableOn f s →\n          MeasureTheory.StronglyMeasurable g →\n            MeasureTheory.IntegrableOn g s →\n              (∀ (t : Set α), MeasurableSet t → ↑↑μ t < ⊤ → ∫ (x : α) in t, g x ∂μ = ∫ (x : α) in t, f x ∂μ) →\n                MeasurableSet s → ↑↑μ s ≠ ⊤ → ∫ (x : α) in s, ‖g x‖ ∂μ ≤ ∫ (x : α) in s, ‖f x‖ ∂μ :=\n\n/-- Suppose `a ∈ ℝ^1`, `f` is a twice-differentiable real function on `(a, ∞)`, and `M_0, M_1, M_2` are the least upper bounds of `|f(x)|`, `|f'(x)|`, `|f''(x)|`, respectively, on `(a, ∞)`. Prove that `M_1^2 ≤ 4 M_0 M_2`. -/\ntheorem", "choices": ["forall {a : ℝ} {f : ℝ → ℝ} {M₀ M₁ M₂ : ℝ},\n  Differentiable ℝ f → Differentiable ℝ (deriv f) →\n    (∀ x, a < x → abs (f x) ≤ M₀) →\n      (∀ x, a < x → abs (deriv f x) ≤ M₁) →\n        (∀ x, a < x → abs (deriv^[2] f x) ≤ M₂) → M₁ ^ 2 ≤ 4 * M₀ * M₂ "]}
{"docString": "Let `X` be a topological space; let `A` be a subset of `X`. Suppose that for each `x ∈ A` there is an open set `U` containing `x` such that `U ⊆ A`. Show that `A` is open in `X`.", "prompts": "[{\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X],\\n  (Pairwise fun x y => ∃ U, IsClopen U ∧ x ∈ U ∧ ¬y ∈ U) → IsTotallyDisconnected Set.univ\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `X` be a topological space, and suppose that for all distinct `x,y ∈ X`, there\\nis some clopen set `U` such that `x ∈ U` and `y ∉ U`. Then `X` is totally disconnected. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] {s t : Set X}, DiscreteTopology ↑s → t ⊆ s → DiscreteTopology ↑t\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `s, t ⊆ X` be two subsets of a topological space `X`.  If `t ⊆ s` and the topology induced\\nby `X`on `s` is discrete, then also the topology induces on `t` is discrete.  \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {s U : Set α},\\n  (∀ (x : α), x ∈ s → U ∈ nhds x) → ∃ V, s ⊆ V ∧ IsOpen V ∧ V ⊆ U\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `U` is a neighborhood of each point of a set `s` then it is a neighborhood of `s`:\\nit contains an open set containing `s`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : T0Space α] {s : Set α},\\n  Set.Finite s → Set.Nonempty s → IsOpen s → ∃ x, x ∈ s ∧ IsOpen {x}\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given an open finite set `S` in a T₀ space, there is some `x ∈ S` such that `{x}` is open. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {s U : Set α},\\n  U ∈ ⨆ (x : α) (_ : x ∈ s), nhds x → ∃ V, s ⊆ V ∧ IsOpen V ∧ V ⊆ U\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `U` is a neighborhood of each point of a set `s` then it is a neighborhood of s:\\nit contains an open set containing `s`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [hα : LocallyCompactSpace α] {K U : Set α},\\n  IsCompact K → IsOpen U → K ⊆ U → ∃ L, IsCompact L ∧ K ⊆ interior L ∧ L ⊆ U\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a locally compact space, for every containment `K ⊆ U` of a compact set `K` in an open\\nset `U`, there is a compact neighborhood `L` such that `K ⊆ L ⊆ U`: equivalently, there is a\\ncompact `L` such that `K ⊆ interior L` and `L ⊆ U`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {s : Set α} [inst_1 : DiscreteTopology ↑s] {x : α},\\n  x ∈ s → ∃ U, U ∈ nhdsWithin x {x}ᶜ ∧ Disjoint U s\",\n  \"isProp\": true,\n  \"docString\":\n  \"For point `x` in a discrete subset `s` of a topological space, there is a set `U`\\nsuch that\\n1. `U` is a punctured neighborhood of `x` (ie. `U ∪ {x}` is a neighbourhood of `x`),\\n2. `U` is disjoint from `s`.\\n\"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] {x : α} (self : TopologicalSpace.OpenNhdsOf x), x ∈ self.carrier\",\n  \"isProp\": true,\n  \"docString\":\n  \"The point `x` belongs to every `U : TopologicalSpace.OpenNhdsOf x`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : T2Space α] {s : Set α},\\n  IsCompact s →\\n    ∀ {ι : Type u_1} (t : Finset ι) (U : ι → Set α),\\n      (∀ (i : ι), i ∈ t → IsOpen (U i)) →\\n        s ⊆ ⋃ (i : ι) (_ : i ∈ t), U i →\\n          ∃ K, (∀ (i : ι), IsCompact (K i)) ∧ (∀ (i : ι), K i ⊆ U i) ∧ s = ⋃ (i : ι) (_ : i ∈ t), K i\",\n  \"isProp\": true,\n  \"docString\":\n  \"For every finite open cover `Uᵢ` of a compact set, there exists a compact cover `Kᵢ ⊆ Uᵢ`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] [inst_2 : T2Space α] {K U : Set α},\\n  IsCompact K → IsOpen U → K ⊆ U → ∃ V, IsOpen V ∧ K ⊆ V ∧ closure V ⊆ U ∧ IsCompact (closure V)\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a locally compact T₂ space, given a compact set `K` inside an open set `U`, we can find a\\nopen set `V` between these sets with compact closure: `K ⊆ V` and the closure of `V` is inside `U`.\\n\"},\n {\"theorem\":\n  \"∀ {G : Type w} [inst : TopologicalSpace G] [inst_1 : MulOneClass G] [inst_2 : ContinuousMul G] {K U : Set G},\\n  IsCompact K → IsOpen U → K ⊆ U → ∃ V, V ∈ nhds 1 ∧ K * V ⊆ U\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given a compact set `K` inside an open set `U`, there is an open neighborhood `V` of `1`\\nsuch that `K * V ⊆ U`. \"},\n {\"theorem\":\n  \"∀ {ι : Type u} {X : Type v} [inst : TopologicalSpace X] {s : Set X} [inst_1 : NormalSpace X]\\n  [inst_2 : ParacompactSpace X],\\n  IsClosed s →\\n    ∀ (U : ι → Set X), (∀ (i : ι), IsOpen (U i)) → s ⊆ ⋃ (i : ι), U i → ∃ f, PartitionOfUnity.IsSubordinate f U\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `X` is a paracompact normal topological space and `U` is an open covering of a closed set\\n`s`, then there exists a `PartitionOfUnity ι X s` that is subordinate to `U`. \"},\n {\"theorem\":\n  \"∀ {G : Type w} [inst : TopologicalSpace G] [inst_1 : MulOneClass G] [inst_2 : ContinuousMul G] {K U : Set G},\\n  IsCompact K → IsOpen U → K ⊆ U → ∃ V, V ∈ nhds 1 ∧ V * K ⊆ U\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given a compact set `K` inside an open set `U`, there is an open neighborhood `V` of `1`\\nsuch that `V * K ⊆ U`. \"},\n {\"theorem\":\n  \"∀ {ι : Type u} {X : Type v} [inst : TopologicalSpace X] {s : Set X} [inst_1 : NormalSpace X]\\n  [inst_2 : ParacompactSpace X],\\n  IsClosed s → ∀ (U : ι → Set X), (∀ (i : ι), IsOpen (U i)) → s ⊆ ⋃ (i : ι), U i → ∃ f, BumpCovering.IsSubordinate f U\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `X` is a paracompact normal topological space and `U` is an open covering of a closed set\\n`s`, then there exists a `BumpCovering ι X s` that is subordinate to `U`. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X], CompactSpace (OnePoint X)\",\n  \"isProp\": true,\n  \"docString\":\n  \"For any topological space `X`, its one point compactification is a compact space. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] {s : Set X} [inst_1 : T0Space ↑s]\\n  [inst_2 : TopologicalSpace.SecondCountableTopology ↑s], HasCountableSeparatingOn X IsOpen s\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `X` is a topological space, `s` is a set in `X` such that the induced topology is T₀ and is\\nsecond countable, then there exists a countable family of open sets in `X` that separates points\\nof `s`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] {x : α} {U : Set α},\\n  IsOpen U → x ∈ U → ∃ K, IsCompact K ∧ x ∈ interior K ∧ K ⊆ U\",\n  \"isProp\": true,\n  \"docString\":\n  \"A reformulation of the definition of locally compact space: In a locally compact space,\\nevery open set containing `x` has a compact subset containing `x` in its interior. \"},\n {\"theorem\":\n  \"∀ {M : Type u_1} [inst : TopologicalSpace M] [inst_1 : Monoid M] [inst_2 : ContinuousMul M] {U : Set M},\\n  U ∈ nhds 1 → ∃ V, IsOpen V ∧ 1 ∈ V ∧ V * V ⊆ U\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given a neighborhood `U` of `1` there is an open neighborhood `V` of `1`\\nsuch that `VV ⊆ U`. \"},\n {\"theorem\":\n  \"∀ {ι : Type u} {X : Type v} [inst : TopologicalSpace X] {s : Set X} [inst_1 : NormalSpace X],\\n  IsClosed s →\\n    ∀ (U : ι → Set X),\\n      (∀ (i : ι), IsOpen (U i)) → LocallyFinite U → s ⊆ ⋃ (i : ι), U i → ∃ f, PartitionOfUnity.IsSubordinate f U\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `X` is a normal topological space and `U` is a locally finite open covering of a closed set\\n`s`, then there exists a `PartitionOfUnity ι X s` that is subordinate to `U`. If `X` is a\\nparacompact space, then the assumption `hf : LocallyFinite U` can be omitted, see\\n`BumpCovering.exists_isSubordinate`. \"},\n {\"theorem\":\n  \"∀ {G : Type w} [inst : TopologicalSpace G] [inst_1 : AddZeroClass G] [inst_2 : ContinuousAdd G] {K U : Set G},\\n  IsCompact K → IsOpen U → K ⊆ U → ∃ V, V ∈ nhds 0 ∧ K + V ⊆ U\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given a compact set `K` inside an open set `U`, there is an open neighborhood `V` of\\n`0` such that `K + V ⊆ U`.\"}]\n", "prompt_cons": "/-- Let `X` be a topological space, and suppose that for all distinct `x,y ∈ X`, there\nis some clopen set `U` such that `x ∈ U` and `y ∉ U`. Then `X` is totally disconnected. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X],\n  (Pairwise fun x y => ∃ U, IsClopen U ∧ x ∈ U ∧ ¬y ∈ U) → IsTotallyDisconnected Set.univ :=\n\n/-- Let `s, t ⊆ X` be two subsets of a topological space `X`.  If `t ⊆ s` and the topology induced\nby `X`on `s` is discrete, then also the topology induces on `t` is discrete. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X] {s t : Set X}, DiscreteTopology ↑s → t ⊆ s → DiscreteTopology ↑t :=\n\n/-- If `U` is a neighborhood of each point of a set `s` then it is a neighborhood of `s`:\nit contains an open set containing `s`. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] {s U : Set α},\n  (∀ (x : α), x ∈ s → U ∈ nhds x) → ∃ V, s ⊆ V ∧ IsOpen V ∧ V ⊆ U :=\n\n/-- Given an open finite set `S` in a T₀ space, there is some `x ∈ S` such that `{x}` is open. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : T0Space α] {s : Set α},\n  Set.Finite s → Set.Nonempty s → IsOpen s → ∃ x, x ∈ s ∧ IsOpen {x} :=\n\n/-- If `U` is a neighborhood of each point of a set `s` then it is a neighborhood of s:\nit contains an open set containing `s`. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] {s U : Set α},\n  U ∈ ⨆ (x : α) (_ : x ∈ s), nhds x → ∃ V, s ⊆ V ∧ IsOpen V ∧ V ⊆ U :=\n\n/-- In a locally compact space, for every containment `K ⊆ U` of a compact set `K` in an open\nset `U`, there is a compact neighborhood `L` such that `K ⊆ L ⊆ U`: equivalently, there is a\ncompact `L` such that `K ⊆ interior L` and `L ⊆ U`. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [hα : LocallyCompactSpace α] {K U : Set α},\n  IsCompact K → IsOpen U → K ⊆ U → ∃ L, IsCompact L ∧ K ⊆ interior L ∧ L ⊆ U :=\n\n/-- For point `x` in a discrete subset `s` of a topological space, there is a set `U`\nsuch that\n1. `U` is a punctured neighborhood of `x` (ie. `U ∪ {x}` is a neighbourhood of `x`),\n2. `U` is disjoint from `s`. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] {s : Set α} [inst_1 : DiscreteTopology ↑s] {x : α},\n  x ∈ s → ∃ U, U ∈ nhdsWithin x {x}ᶜ ∧ Disjoint U s :=\n\n/-- The point `x` belongs to every `U : TopologicalSpace.OpenNhdsOf x`. -/\ntheorem ∀ {α : Type u_1} [inst : TopologicalSpace α] {x : α} (self : TopologicalSpace.OpenNhdsOf x), x ∈ self.carrier :=\n\n/-- For every finite open cover `Uᵢ` of a compact set, there exists a compact cover `Kᵢ ⊆ Uᵢ`. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : T2Space α] {s : Set α},\n  IsCompact s →\n    ∀ {ι : Type u_1} (t : Finset ι) (U : ι → Set α),\n      (∀ (i : ι), i ∈ t → IsOpen (U i)) →\n        s ⊆ ⋃ (i : ι) (_ : i ∈ t), U i →\n          ∃ K, (∀ (i : ι), IsCompact (K i)) ∧ (∀ (i : ι), K i ⊆ U i) ∧ s = ⋃ (i : ι) (_ : i ∈ t), K i :=\n\n/-- In a locally compact T₂ space, given a compact set `K` inside an open set `U`, we can find a\nopen set `V` between these sets with compact closure: `K ⊆ V` and the closure of `V` is inside `U`. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] [inst_2 : T2Space α] {K U : Set α},\n  IsCompact K → IsOpen U → K ⊆ U → ∃ V, IsOpen V ∧ K ⊆ V ∧ closure V ⊆ U ∧ IsCompact (closure V) :=\n\n/-- Given a compact set `K` inside an open set `U`, there is an open neighborhood `V` of `1`\nsuch that `K * V ⊆ U`. -/\ntheorem ∀ {G : Type w} [inst : TopologicalSpace G] [inst_1 : MulOneClass G] [inst_2 : ContinuousMul G] {K U : Set G},\n  IsCompact K → IsOpen U → K ⊆ U → ∃ V, V ∈ nhds 1 ∧ K * V ⊆ U :=\n\n/-- If `X` is a paracompact normal topological space and `U` is an open covering of a closed set\n`s`, then there exists a `PartitionOfUnity ι X s` that is subordinate to `U`. -/\ntheorem ∀ {ι : Type u} {X : Type v} [inst : TopologicalSpace X] {s : Set X} [inst_1 : NormalSpace X]\n  [inst_2 : ParacompactSpace X],\n  IsClosed s →\n    ∀ (U : ι → Set X), (∀ (i : ι), IsOpen (U i)) → s ⊆ ⋃ (i : ι), U i → ∃ f, PartitionOfUnity.IsSubordinate f U :=\n\n/-- Given a compact set `K` inside an open set `U`, there is an open neighborhood `V` of `1`\nsuch that `V * K ⊆ U`. -/\ntheorem ∀ {G : Type w} [inst : TopologicalSpace G] [inst_1 : MulOneClass G] [inst_2 : ContinuousMul G] {K U : Set G},\n  IsCompact K → IsOpen U → K ⊆ U → ∃ V, V ∈ nhds 1 ∧ V * K ⊆ U :=\n\n/-- If `X` is a paracompact normal topological space and `U` is an open covering of a closed set\n`s`, then there exists a `BumpCovering ι X s` that is subordinate to `U`. -/\ntheorem ∀ {ι : Type u} {X : Type v} [inst : TopologicalSpace X] {s : Set X} [inst_1 : NormalSpace X]\n  [inst_2 : ParacompactSpace X],\n  IsClosed s → ∀ (U : ι → Set X), (∀ (i : ι), IsOpen (U i)) → s ⊆ ⋃ (i : ι), U i → ∃ f, BumpCovering.IsSubordinate f U :=\n\n/-- For any topological space `X`, its one point compactification is a compact space. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X], CompactSpace (OnePoint X) :=\n\n/-- If `X` is a topological space, `s` is a set in `X` such that the induced topology is T₀ and is\nsecond countable, then there exists a countable family of open sets in `X` that separates points\nof `s`. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X] {s : Set X} [inst_1 : T0Space ↑s]\n  [inst_2 : TopologicalSpace.SecondCountableTopology ↑s], HasCountableSeparatingOn X IsOpen s :=\n\n/-- A reformulation of the definition of locally compact space: In a locally compact space,\nevery open set containing `x` has a compact subset containing `x` in its interior. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] {x : α} {U : Set α},\n  IsOpen U → x ∈ U → ∃ K, IsCompact K ∧ x ∈ interior K ∧ K ⊆ U :=\n\n/-- Given a neighborhood `U` of `1` there is an open neighborhood `V` of `1`\nsuch that `VV ⊆ U`. -/\ntheorem ∀ {M : Type u_1} [inst : TopologicalSpace M] [inst_1 : Monoid M] [inst_2 : ContinuousMul M] {U : Set M},\n  U ∈ nhds 1 → ∃ V, IsOpen V ∧ 1 ∈ V ∧ V * V ⊆ U :=\n\n/-- If `X` is a normal topological space and `U` is a locally finite open covering of a closed set\n`s`, then there exists a `PartitionOfUnity ι X s` that is subordinate to `U`. If `X` is a\nparacompact space, then the assumption `hf : LocallyFinite U` can be omitted, see\n`BumpCovering.exists_isSubordinate`. -/\ntheorem ∀ {ι : Type u} {X : Type v} [inst : TopologicalSpace X] {s : Set X} [inst_1 : NormalSpace X],\n  IsClosed s →\n    ∀ (U : ι → Set X),\n      (∀ (i : ι), IsOpen (U i)) → LocallyFinite U → s ⊆ ⋃ (i : ι), U i → ∃ f, PartitionOfUnity.IsSubordinate f U :=\n\n/-- Given a compact set `K` inside an open set `U`, there is an open neighborhood `V` of\n`0` such that `K + V ⊆ U`. -/\ntheorem ∀ {G : Type w} [inst : TopologicalSpace G] [inst_1 : AddZeroClass G] [inst_2 : ContinuousAdd G] {K U : Set G},\n  IsCompact K → IsOpen U → K ⊆ U → ∃ V, V ∈ nhds 0 ∧ K + V ⊆ U :=\n\n/-- Let `X` be a topological space; let `A` be a subset of `X`. Suppose that for each `x ∈ A` there is an open set `U` containing `x` such that `U ⊆ A`. Show that `A` is open in `X`. -/\ntheorem", "choices": ["∀ {X : Type u_1} [inst : TopologicalSpace X] {A : Set X},\n  (∀ (x : X), x ∈ A → ∃ U, x ∈ U ∧ IsOpen U ∧ U ⊆ A) → IsOpen A ", "∀ {X : Type u_1} [inst : TopologicalSpace X] {A : Set X},\n  (∀ (x : X), x ∈ A → ∃ U, IsOpen U ∧ x ∈ U ∧ U ⊆ A) → IsOpen A ", "∀ {X : Type u_1} [inst : TopologicalSpace X] {A : Set X},\n  (∀ x, x ∈ A → ∃ U, IsOpen U ∧ x ∈ U ∧ U ⊆ A) → IsOpen A ", "∀ {X : Type u_1} [inst : TopologicalSpace X] {A : Set X},\n  (∀ (x : X), x ∈ A → ∃ U, IsOpen U ∧ x ∈ U ∧ U ⊆ A) → IsOpen A ", "∀ {X : Type u_1} [inst : TopologicalSpace X] {A : Set X},\n  (∀ x ∈ A, ∃ U, IsOpen U ∧ x ∈ U ∧ U ⊆ A) → IsOpen A ", "∀ {X : Type u_1} [inst : TopologicalSpace X] {A : Set X},\n  (∀ (x : X), x ∈ A → ∃ U, IsOpen U ∧ x ∈ U ∧ U ⊆ A) → IsOpen A ", "∀ {X : Type u_1} [inst : TopologicalSpace X] {A : Set X},\n  (∀ (x : X), x ∈ A → ∃ U, IsOpen U ∧ x ∈ U ∧ U ⊆ A) → IsOpen A ", "∀ {X : Type u_1} [inst : TopologicalSpace X] {A : Set X},\n  (∀ x, x ∈ A → ∃ U, IsOpen U ∧ x ∈ U ∧ U ⊆ A) → IsOpen A ", "∀ {X : Type u_1} [inst : TopologicalSpace X] {A : Set X},\n  (∀ (x : X), x ∈ A → ∃ U, IsOpen U ∧ x ∈ U ∧ U ⊆ A) → IsOpen A ", "∀ {X : Type u} [inst : TopologicalSpace X] {A : Set X},\n  (∀ (x : X), x ∈ A → ∃ U, IsOpen U ∧ x ∈ U ∧ U ⊆ A) → IsOpen A "]}
{"docString": "If `T_α` is a family of topologies on `X`, show that `∩ T_α` is a topology on `X`.", "prompts": "[{\"theorem\":\n  \"∀ {α : Type u_2} {β : Type u_1} [inst : UniformSpace β] {𝔖 : Set (Set α)} [inst_1 : T2Space β],\\n  ⋃₀ 𝔖 = Set.univ → T2Space (UniformOnFun α β 𝔖)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `𝔖` covers `α`, then the topology of `𝔖`-convergence is T₂. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {β : Type u_2} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β]\\n  [inst_2 : LocallyCompactSpace α] [inst_3 : T2Space β] {ι : Type u_3} {l : Filter ι} [inst_4 : Filter.NeBot l]\\n  (F : ι → C(α, β)),\\n  (∃ f, Filter.Tendsto F l (nhds f)) ↔\\n    ∀ (s : Set α), IsCompact s → ∃ f, Filter.Tendsto (fun i => ContinuousMap.restrict s (F i)) l (nhds f)\",\n  \"isProp\": true,\n  \"docString\":\n  \"A family `F` of functions in `C(α, β)` converges in the compact-open topology, if and only if\\nit converges in the compact-open topology on each compact subset of `α`. \"},\n {\"theorem\":\n  \"∀ {ι : Type u_2} {π : ι → Type u_3} [inst : (i : ι) → TopologicalSpace (π i)] {X : Type u_1} (f : (i : ι) → X → π i),\\n  Inducing fun x i => f i x\",\n  \"isProp\": true,\n  \"docString\":\n  \"Suppose `π i` is a family of topological spaces indexed by `i : ι`, and `X` is a type\\nendowed with a family of maps `f i : X → π i` for every `i : ι`, hence inducing a\\nmap `g : X → Π i, π i`. This lemma shows that infimum of the topologies on `X` induced by\\nthe `f i` as `i : ι` varies is simply the topology on `X` induced by `g : X → Π i, π i`\\nwhere `Π i, π i` is endowed with the usual product topology. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : PseudoMetricSpace β],\\n  Inducing (↑UniformFun.ofFun ∘ FunLike.coe)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The topology on `α →ᵇ β` is exactly the topology induced by the natural map to `α →ᵤ β`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {β : Type u_2} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β],\\n  ContinuousMap.compactOpen =\\n    ⨅ (s : Set α) (_ : IsCompact s), TopologicalSpace.induced (ContinuousMap.restrict s) ContinuousMap.compactOpen\",\n  \"isProp\": true,\n  \"docString\":\n  \"The compact-open topology on `C(α, β)` is equal to the infimum of the compact-open topologies\\non `C(s, β)` for `s` a compact subset of `α`.  The key point of the proof is that the union of the\\ncompact subsets of `α` is equal to the union of compact subsets of the compact subsets of `α`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {ι : Type u_1} {f : ι → Set α},\\n  LocallyFinite f → ∀ {s : Set α}, IsCompact s → Set.Finite {i | Set.Nonempty (f i ∩ s)}\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `s` is a compact set in a topological space `α` and `f : ι → Set α` is a locally finite\\nfamily of sets, then `f i ∩ s` is nonempty only for a finitely many `i`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type u_1} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] {s : Set (Set α)},\\n  TopologicalSpace.IsTopologicalBasis s →\\n    ∀ {t : Set (Set β)},\\n      TopologicalSpace.IsTopologicalBasis t →\\n        TopologicalSpace.IsTopologicalBasis ((fun u => Sum.inl '' u) '' s ∪ (fun u => Sum.inr '' u) '' t)\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a sum space `α ⊕ β`, one can form a topological basis by taking the union of\\ntopological bases on each of the two components. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {s : Set α} {ι : Type v},\\n  IsCompact s →\\n    ∀ (Z : ι → Set α),\\n      (∀ (i : ι), IsClosed (Z i)) →\\n        (∀ (t : Finset ι), Set.Nonempty (s ∩ ⋂ (i : ι) (_ : i ∈ t), Z i)) → Set.Nonempty (s ∩ ⋂ (i : ι), Z i)\",\n  \"isProp\": true,\n  \"docString\":\n  \"To show that a compact set intersects the intersection of a family of closed sets,\\nit is sufficient to show that it intersects every finite subfamily. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {β : Type u_2} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] (s : Set α),\\n  Continuous fun F => ContinuousMap.restrict s F\",\n  \"isProp\": true,\n  \"docString\":\n  \"For any subset `s` of `α`, the restriction of continuous functions to `s` is continuous as a\\nfunction from `C(α, β)` to `C(s, β)` with their respective compact-open topologies. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [t : TopologicalSpace α] {s : Set (Set α)},\\n  t = TopologicalSpace.generateFrom s →\\n    TopologicalSpace.IsTopologicalBasis ((fun f => ⋂₀ f) '' {f | Set.Finite f ∧ f ⊆ s})\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a family of sets `s` generates the topology, then intersections of finite\\nsubcollections of `s` form a topological basis. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] [inst_2 : T0Space α] {f : α → β},\\n  Inducing f → Function.Injective f\",\n  \"isProp\": true,\n  \"docString\": \"A topology `Inducing` map from a T₀ space is injective. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {ι : Type u_1} (s : ι → Set α),\\n  Filter.HasBasis (⨅ (i : ι), Filter.principal (s i)) (fun t => Set.Finite t) fun t => ⋂ (i : ι) (_ : i ∈ t), s i\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `s : ι → Set α` is an indexed family of sets, then finite intersections of `s i` form a basis\\nof `⨅ i, 𝓟 (s i)`.  \"},\n {\"theorem\":\n  \"∀ {α : Type u} {ι : Type u_1} [inst : TopologicalSpace α] (b : ι → Set α),\\n  TopologicalSpace.IsTopologicalBasis (Set.range b) →\\n    (∀ (i : ι), IsCompact (b i)) →\\n      ∀ (U : Set α), IsCompact U ∧ IsOpen U ↔ ∃ s, Set.Finite s ∧ U = ⋃ (i : ι) (_ : i ∈ s), b i\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `α` has a basis consisting of compact opens, then an open set in `α` is compact open iff\\nit is a finite union of some elements in the basis \"},\n {\"theorem\":\n  \"∀ {α : Type u_3} {β : Type u_2} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] {γ : Type u_1}\\n  [inst_2 : AddCommMonoid β] [inst_3 : ContinuousAdd β] {f : γ → C(α, β)} {g : C(α, β)},\\n  HasSum f g → ∀ (x : α), HasSum (fun i => ↑(f i) x) (↑g x)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `α` is locally compact, and an infinite sum of functions in `C(α, β)`\\nconverges to `g` (for the compact-open topology), then the pointwise sum converges to `g x` for\\nall `x ∈ α`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] [inst_2 : T0Space α] {f : α → β},\\n  Inducing f → Embedding f\",\n  \"isProp\": true,\n  \"docString\":\n  \"A topology `Inducing` map from a T₀ space is a topological embedding. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {ι : Type u_1} [inst_1 : CompactSpace α] {f : ι → Set α},\\n  LocallyFinite f → Set.Finite {i | Set.Nonempty (f i)}\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `α` is a compact space, then a locally finite family of sets of `α` can have only finitely\\nmany nonempty elements. \"},\n {\"theorem\":\n  \"∀ {α : Type ua} [inst : UniformSpace α] {s : Set (α × α)},\\n  s ∈ uniformity α → ∀ᶠ (t : Set (α × α)) in Filter.smallSets (uniformity α), compRel t t ⊆ s\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `s ∈ 𝓤 α`, then for any natural `n`, for a subset `t` of a sufficiently small set in `𝓤 α`,\\nwe have `t ○ t ⊆ s`. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] {s : Set X} [inst_1 : T0Space ↑s]\\n  [inst_2 : TopologicalSpace.SecondCountableTopology ↑s], HasCountableSeparatingOn X IsOpen s\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `X` is a topological space, `s` is a set in `X` such that the induced topology is T₀ and is\\nsecond countable, then there exists a countable family of open sets in `X` that separates points\\nof `s`. \"},\n {\"theorem\":\n  \"∀ (α : Type u) (β : Type u_1) [t : TopologicalSpace β] [inst : TopologicalSpace.SecondCountableTopology β] (f : α → β),\\n  TopologicalSpace.SecondCountableTopology α\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `β` is a second-countable space, then its induced topology via\\n`f` on `α` is also second-countable. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : AddGroup α] [inst_2 : TopologicalAddGroup α],\\n  TopologicalAddGroup αᵃᵒᵖ\",\n  \"isProp\": true,\n  \"docString\": \"If addition is continuous in `α`, then it also is in `αᵃᵒᵖ`.\"}]\n", "prompt_cons": "/-- If `𝔖` covers `α`, then the topology of `𝔖`-convergence is T₂. -/\ntheorem ∀ {α : Type u_2} {β : Type u_1} [inst : UniformSpace β] {𝔖 : Set (Set α)} [inst_1 : T2Space β],\n  ⋃₀ 𝔖 = Set.univ → T2Space (UniformOnFun α β 𝔖) :=\n\n/-- A family `F` of functions in `C(α, β)` converges in the compact-open topology, if and only if\nit converges in the compact-open topology on each compact subset of `α`. -/\ntheorem ∀ {α : Type u_1} {β : Type u_2} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β]\n  [inst_2 : LocallyCompactSpace α] [inst_3 : T2Space β] {ι : Type u_3} {l : Filter ι} [inst_4 : Filter.NeBot l]\n  (F : ι → C(α, β)),\n  (∃ f, Filter.Tendsto F l (nhds f)) ↔\n    ∀ (s : Set α), IsCompact s → ∃ f, Filter.Tendsto (fun i => ContinuousMap.restrict s (F i)) l (nhds f) :=\n\n/-- Suppose `π i` is a family of topological spaces indexed by `i : ι`, and `X` is a type\nendowed with a family of maps `f i : X → π i` for every `i : ι`, hence inducing a\nmap `g : X → Π i, π i`. This lemma shows that infimum of the topologies on `X` induced by\nthe `f i` as `i : ι` varies is simply the topology on `X` induced by `g : X → Π i, π i`\nwhere `Π i, π i` is endowed with the usual product topology. -/\ntheorem ∀ {ι : Type u_2} {π : ι → Type u_3} [inst : (i : ι) → TopologicalSpace (π i)] {X : Type u_1} (f : (i : ι) → X → π i),\n  Inducing fun x i => f i x :=\n\n/-- The topology on `α →ᵇ β` is exactly the topology induced by the natural map to `α →ᵤ β`. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : PseudoMetricSpace β],\n  Inducing (↑UniformFun.ofFun ∘ FunLike.coe) :=\n\n/-- The compact-open topology on `C(α, β)` is equal to the infimum of the compact-open topologies\non `C(s, β)` for `s` a compact subset of `α`.  The key point of the proof is that the union of the\ncompact subsets of `α` is equal to the union of compact subsets of the compact subsets of `α`. -/\ntheorem ∀ {α : Type u_1} {β : Type u_2} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β],\n  ContinuousMap.compactOpen =\n    ⨅ (s : Set α) (_ : IsCompact s), TopologicalSpace.induced (ContinuousMap.restrict s) ContinuousMap.compactOpen :=\n\n/-- If `s` is a compact set in a topological space `α` and `f : ι → Set α` is a locally finite\nfamily of sets, then `f i ∩ s` is nonempty only for a finitely many `i`. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] {ι : Type u_1} {f : ι → Set α},\n  LocallyFinite f → ∀ {s : Set α}, IsCompact s → Set.Finite {i | Set.Nonempty (f i ∩ s)} :=\n\n/-- In a sum space `α ⊕ β`, one can form a topological basis by taking the union of\ntopological bases on each of the two components. -/\ntheorem ∀ {α : Type u} {β : Type u_1} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] {s : Set (Set α)},\n  TopologicalSpace.IsTopologicalBasis s →\n    ∀ {t : Set (Set β)},\n      TopologicalSpace.IsTopologicalBasis t →\n        TopologicalSpace.IsTopologicalBasis ((fun u => Sum.inl '' u) '' s ∪ (fun u => Sum.inr '' u) '' t) :=\n\n/-- To show that a compact set intersects the intersection of a family of closed sets,\nit is sufficient to show that it intersects every finite subfamily. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] {s : Set α} {ι : Type v},\n  IsCompact s →\n    ∀ (Z : ι → Set α),\n      (∀ (i : ι), IsClosed (Z i)) →\n        (∀ (t : Finset ι), Set.Nonempty (s ∩ ⋂ (i : ι) (_ : i ∈ t), Z i)) → Set.Nonempty (s ∩ ⋂ (i : ι), Z i) :=\n\n/-- For any subset `s` of `α`, the restriction of continuous functions to `s` is continuous as a\nfunction from `C(α, β)` to `C(s, β)` with their respective compact-open topologies. -/\ntheorem ∀ {α : Type u_1} {β : Type u_2} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] (s : Set α),\n  Continuous fun F => ContinuousMap.restrict s F :=\n\n/-- If a family of sets `s` generates the topology, then intersections of finite\nsubcollections of `s` form a topological basis. -/\ntheorem ∀ {α : Type u} [t : TopologicalSpace α] {s : Set (Set α)},\n  t = TopologicalSpace.generateFrom s →\n    TopologicalSpace.IsTopologicalBasis ((fun f => ⋂₀ f) '' {f | Set.Finite f ∧ f ⊆ s}) :=\n\n/-- A topology `Inducing` map from a T₀ space is injective. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] [inst_2 : T0Space α] {f : α → β},\n  Inducing f → Function.Injective f :=\n\n/-- If `s : ι → Set α` is an indexed family of sets, then finite intersections of `s i` form a basis\nof `⨅ i, 𝓟 (s i)`. -/\ntheorem ∀ {α : Type u_2} {ι : Type u_1} (s : ι → Set α),\n  Filter.HasBasis (⨅ (i : ι), Filter.principal (s i)) (fun t => Set.Finite t) fun t => ⋂ (i : ι) (_ : i ∈ t), s i :=\n\n/-- If `α` has a basis consisting of compact opens, then an open set in `α` is compact open iff\nit is a finite union of some elements in the basis -/\ntheorem ∀ {α : Type u} {ι : Type u_1} [inst : TopologicalSpace α] (b : ι → Set α),\n  TopologicalSpace.IsTopologicalBasis (Set.range b) →\n    (∀ (i : ι), IsCompact (b i)) →\n      ∀ (U : Set α), IsCompact U ∧ IsOpen U ↔ ∃ s, Set.Finite s ∧ U = ⋃ (i : ι) (_ : i ∈ s), b i :=\n\n/-- If `α` is locally compact, and an infinite sum of functions in `C(α, β)`\nconverges to `g` (for the compact-open topology), then the pointwise sum converges to `g x` for\nall `x ∈ α`. -/\ntheorem ∀ {α : Type u_3} {β : Type u_2} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] {γ : Type u_1}\n  [inst_2 : AddCommMonoid β] [inst_3 : ContinuousAdd β] {f : γ → C(α, β)} {g : C(α, β)},\n  HasSum f g → ∀ (x : α), HasSum (fun i => ↑(f i) x) (↑g x) :=\n\n/-- A topology `Inducing` map from a T₀ space is a topological embedding. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] [inst_2 : T0Space α] {f : α → β},\n  Inducing f → Embedding f :=\n\n/-- If `α` is a compact space, then a locally finite family of sets of `α` can have only finitely\nmany nonempty elements. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] {ι : Type u_1} [inst_1 : CompactSpace α] {f : ι → Set α},\n  LocallyFinite f → Set.Finite {i | Set.Nonempty (f i)} :=\n\n/-- If `s ∈ 𝓤 α`, then for any natural `n`, for a subset `t` of a sufficiently small set in `𝓤 α`,\nwe have `t ○ t ⊆ s`. -/\ntheorem ∀ {α : Type ua} [inst : UniformSpace α] {s : Set (α × α)},\n  s ∈ uniformity α → ∀ᶠ (t : Set (α × α)) in Filter.smallSets (uniformity α), compRel t t ⊆ s :=\n\n/-- If `X` is a topological space, `s` is a set in `X` such that the induced topology is T₀ and is\nsecond countable, then there exists a countable family of open sets in `X` that separates points\nof `s`. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X] {s : Set X} [inst_1 : T0Space ↑s]\n  [inst_2 : TopologicalSpace.SecondCountableTopology ↑s], HasCountableSeparatingOn X IsOpen s :=\n\n/-- If `β` is a second-countable space, then its induced topology via\n`f` on `α` is also second-countable. -/\ntheorem ∀ (α : Type u) (β : Type u_1) [t : TopologicalSpace β] [inst : TopologicalSpace.SecondCountableTopology β] (f : α → β),\n  TopologicalSpace.SecondCountableTopology α :=\n\n/-- If addition is continuous in `α`, then it also is in `αᵃᵒᵖ`. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : AddGroup α] [inst_2 : TopologicalAddGroup α],\n  TopologicalAddGroup αᵃᵒᵖ :=\n\n/-- If `T_α` is a family of topologies on `X`, show that `∩ T_α` is a topology on `X`. -/\ntheorem", "choices": ["∀ {X : Type u} {ι : Type u_1} (T : ι → TopologicalSpace X),\n  TopologicalSpace X ", "∀ {X : Type u_1} {ι : Type u_2} {T : ι → TopologicalSpace X},\n  TopologicalSpace X ", "∀ {X : Type u} {ι : Type u_1} (T : ι → TopologicalSpace X),\n  TopologicalSpace X ", "∀ {X : Type u} (T : X → TopologicalSpace X),\n  TopologicalSpace (⨅ (x : X), (T x)) ", "∀ {X : Type u} (T : Set (TopologicalSpace X)),\n  TopologicalSpace X ", "∀ {X : Type u} {ι : Type u_1} (T : ι → TopologicalSpace X),\n  TopologicalSpace X ", "∀ {X : Type u} {ι : Type u_1} (T : ι → TopologicalSpace X),\n  TopologicalSpace X ", "∀ {X : Type u_1} {ι : Type u} (T : ι → TopologicalSpace X),\n  TopologicalSpace X ", "∀ {X : Type u} {ι : Type u_1} (T : ι → TopologicalSpace X),\n  TopologicalSpace X ", "∀ {X : Type u} {ι : Type u_1} (T : ι → TopologicalSpace X),\n  TopologicalSpace X "]}
{"docString": "Let `T_α` be a family of topologies on `X`. Show that there is a unique smallest topology on `X` containing all the collections `T_α`.", "prompts": "[{\"theorem\":\n  \"∀ {α : Type u_2} {β : Type u_1} [inst : UniformSpace β] {𝔖 : Set (Set α)} [inst_1 : T2Space β],\\n  ⋃₀ 𝔖 = Set.univ → T2Space (UniformOnFun α β 𝔖)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `𝔖` covers `α`, then the topology of `𝔖`-convergence is T₂. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {ι : Type u_1} [inst_1 : CompactSpace α] {f : ι → Set α},\\n  LocallyFinite f → Set.Finite {i | Set.Nonempty (f i)}\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `α` is a compact space, then a locally finite family of sets of `α` can have only finitely\\nmany nonempty elements. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {β : Type u_2} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β],\\n  ContinuousMap.compactOpen =\\n    ⨅ (s : Set α) (_ : IsCompact s), TopologicalSpace.induced (ContinuousMap.restrict s) ContinuousMap.compactOpen\",\n  \"isProp\": true,\n  \"docString\":\n  \"The compact-open topology on `C(α, β)` is equal to the infimum of the compact-open topologies\\non `C(s, β)` for `s` a compact subset of `α`.  The key point of the proof is that the union of the\\ncompact subsets of `α` is equal to the union of compact subsets of the compact subsets of `α`. \"},\n {\"theorem\":\n  \"∀ {ι : Type u_2} {π : ι → Type u_3} [inst : (i : ι) → TopologicalSpace (π i)] {X : Type u_1} (f : (i : ι) → X → π i),\\n  Inducing fun x i => f i x\",\n  \"isProp\": true,\n  \"docString\":\n  \"Suppose `π i` is a family of topological spaces indexed by `i : ι`, and `X` is a type\\nendowed with a family of maps `f i : X → π i` for every `i : ι`, hence inducing a\\nmap `g : X → Π i, π i`. This lemma shows that infimum of the topologies on `X` induced by\\nthe `f i` as `i : ι` varies is simply the topology on `X` induced by `g : X → Π i, π i`\\nwhere `Π i, π i` is endowed with the usual product topology. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {β : Type u_2} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β]\\n  [inst_2 : LocallyCompactSpace α] [inst_3 : T2Space β] {ι : Type u_3} {l : Filter ι} [inst_4 : Filter.NeBot l]\\n  (F : ι → C(α, β)),\\n  (∃ f, Filter.Tendsto F l (nhds f)) ↔\\n    ∀ (s : Set α), IsCompact s → ∃ f, Filter.Tendsto (fun i => ContinuousMap.restrict s (F i)) l (nhds f)\",\n  \"isProp\": true,\n  \"docString\":\n  \"A family `F` of functions in `C(α, β)` converges in the compact-open topology, if and only if\\nit converges in the compact-open topology on each compact subset of `α`. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X], CompactSpace (OnePoint X)\",\n  \"isProp\": true,\n  \"docString\":\n  \"For any topological space `X`, its one point compactification is a compact space. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : PseudoMetricSpace β],\\n  Inducing (↑UniformFun.ofFun ∘ FunLike.coe)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The topology on `α →ᵇ β` is exactly the topology induced by the natural map to `α →ᵤ β`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {ι : Type u_1} [inst : TopologicalSpace α] (b : ι → Set α),\\n  TopologicalSpace.IsTopologicalBasis (Set.range b) →\\n    (∀ (i : ι), IsCompact (b i)) →\\n      ∀ (U : Set α), IsCompact U ∧ IsOpen U ↔ ∃ s, Set.Finite s ∧ U = ⋃ (i : ι) (_ : i ∈ s), b i\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `α` has a basis consisting of compact opens, then an open set in `α` is compact open iff\\nit is a finite union of some elements in the basis \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] {s : Set X} [inst_1 : T0Space ↑s]\\n  [inst_2 : TopologicalSpace.SecondCountableTopology ↑s], HasCountableSeparatingOn X IsOpen s\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `X` is a topological space, `s` is a set in `X` such that the induced topology is T₀ and is\\nsecond countable, then there exists a countable family of open sets in `X` that separates points\\nof `s`. \"},\n {\"theorem\":\n  \"∀ {α : Type ua} [inst : UniformSpace α] {s : Set (α × α)},\\n  s ∈ uniformity α →\\n    ∀ (n : ℕ), ∀ᶠ (t : Set (α × α)) in Filter.smallSets (uniformity α), (fun x => compRel t x)^[n] t ⊆ s\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `s ∈ 𝓤 α`, then for any natural `n`, for a subset `t` of a sufficiently small set in `𝓤 α`,\\nwe have `t ○ t ○ ... ○ t ⊆ s` (`n` compositions). \"},\n {\"theorem\":\n  \"∀ {α : Type u} [t : TopologicalSpace α] {s : Set (Set α)},\\n  t = TopologicalSpace.generateFrom s →\\n    TopologicalSpace.IsTopologicalBasis ((fun f => ⋂₀ f) '' {f | Set.Finite f ∧ f ⊆ s})\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a family of sets `s` generates the topology, then intersections of finite\\nsubcollections of `s` form a topological basis. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] [inst_2 : T0Space α] {f : α → β},\\n  Inducing f → Function.Injective f\",\n  \"isProp\": true,\n  \"docString\": \"A topology `Inducing` map from a T₀ space is injective. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {ι : Type u_1} [inst_1 : CompactSpace α] {f : ι → Set α},\\n  LocallyFinite f → (∀ (i : ι), Set.Nonempty (f i)) → Set.Finite Set.univ\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `α` is a compact space, then a locally finite family of nonempty sets of `α` can have only\\nfinitely many elements, `Set.Finite` version. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [t : TopologicalSpace α] [self : TopologicalSpace.SecondCountableTopology α],\\n  ∃ b, Set.Countable b ∧ t = TopologicalSpace.generateFrom b\",\n  \"isProp\": true,\n  \"docString\":\n  \"There exists a countable set of sets that generates the topology. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {c : Set (Set α)}, (∀ (a : α), ∃! b x, a ∈ b) → Set.PairwiseDisjoint c id\",\n  \"isProp\": true,\n  \"docString\":\n  \"Distinct elements of a set of sets partitioning α are disjoint. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] [inst_2 : T0Space α] {f : α → β},\\n  Inducing f → Embedding f\",\n  \"isProp\": true,\n  \"docString\":\n  \"A topology `Inducing` map from a T₀ space is a topological embedding. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] {s t : Set X}, DiscreteTopology ↑s → t ⊆ s → DiscreteTopology ↑t\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `s, t ⊆ X` be two subsets of a topological space `X`.  If `t ⊆ s` and the topology induced\\nby `X`on `s` is discrete, then also the topology induces on `t` is discrete.  \"},\n {\"theorem\":\n  \"∀ {α : Type u_3} {β : Type u_2} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] {γ : Type u_1}\\n  [inst_2 : AddCommMonoid β] [inst_3 : ContinuousAdd β] {f : γ → C(α, β)} {g : C(α, β)},\\n  HasSum f g → ∀ (x : α), HasSum (fun i => ↑(f i) x) (↑g x)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `α` is locally compact, and an infinite sum of functions in `C(α, β)`\\nconverges to `g` (for the compact-open topology), then the pointwise sum converges to `g x` for\\nall `x ∈ α`. \"},\n {\"theorem\":\n  \"∀ {α : Type ua} [inst : UniformSpace α] {s : Set (α × α)},\\n  s ∈ uniformity α → ∀ᶠ (t : Set (α × α)) in Filter.smallSets (uniformity α), compRel t t ⊆ s\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `s ∈ 𝓤 α`, then for any natural `n`, for a subset `t` of a sufficiently small set in `𝓤 α`,\\nwe have `t ○ t ⊆ s`. \"},\n {\"theorem\":\n  \"∀ (α : Type u) (β : Type u_1) [t : TopologicalSpace β] [inst : TopologicalSpace.SecondCountableTopology β] (f : α → β),\\n  TopologicalSpace.SecondCountableTopology α\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `β` is a second-countable space, then its induced topology via\\n`f` on `α` is also second-countable. \"}]\n", "prompt_cons": "/-- If `𝔖` covers `α`, then the topology of `𝔖`-convergence is T₂. -/\ntheorem ∀ {α : Type u_2} {β : Type u_1} [inst : UniformSpace β] {𝔖 : Set (Set α)} [inst_1 : T2Space β],\n  ⋃₀ 𝔖 = Set.univ → T2Space (UniformOnFun α β 𝔖) :=\n\n/-- If `α` is a compact space, then a locally finite family of sets of `α` can have only finitely\nmany nonempty elements. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] {ι : Type u_1} [inst_1 : CompactSpace α] {f : ι → Set α},\n  LocallyFinite f → Set.Finite {i | Set.Nonempty (f i)} :=\n\n/-- The compact-open topology on `C(α, β)` is equal to the infimum of the compact-open topologies\non `C(s, β)` for `s` a compact subset of `α`.  The key point of the proof is that the union of the\ncompact subsets of `α` is equal to the union of compact subsets of the compact subsets of `α`. -/\ntheorem ∀ {α : Type u_1} {β : Type u_2} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β],\n  ContinuousMap.compactOpen =\n    ⨅ (s : Set α) (_ : IsCompact s), TopologicalSpace.induced (ContinuousMap.restrict s) ContinuousMap.compactOpen :=\n\n/-- Suppose `π i` is a family of topological spaces indexed by `i : ι`, and `X` is a type\nendowed with a family of maps `f i : X → π i` for every `i : ι`, hence inducing a\nmap `g : X → Π i, π i`. This lemma shows that infimum of the topologies on `X` induced by\nthe `f i` as `i : ι` varies is simply the topology on `X` induced by `g : X → Π i, π i`\nwhere `Π i, π i` is endowed with the usual product topology. -/\ntheorem ∀ {ι : Type u_2} {π : ι → Type u_3} [inst : (i : ι) → TopologicalSpace (π i)] {X : Type u_1} (f : (i : ι) → X → π i),\n  Inducing fun x i => f i x :=\n\n/-- A family `F` of functions in `C(α, β)` converges in the compact-open topology, if and only if\nit converges in the compact-open topology on each compact subset of `α`. -/\ntheorem ∀ {α : Type u_1} {β : Type u_2} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β]\n  [inst_2 : LocallyCompactSpace α] [inst_3 : T2Space β] {ι : Type u_3} {l : Filter ι} [inst_4 : Filter.NeBot l]\n  (F : ι → C(α, β)),\n  (∃ f, Filter.Tendsto F l (nhds f)) ↔\n    ∀ (s : Set α), IsCompact s → ∃ f, Filter.Tendsto (fun i => ContinuousMap.restrict s (F i)) l (nhds f) :=\n\n/-- For any topological space `X`, its one point compactification is a compact space. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X], CompactSpace (OnePoint X) :=\n\n/-- The topology on `α →ᵇ β` is exactly the topology induced by the natural map to `α →ᵤ β`. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : PseudoMetricSpace β],\n  Inducing (↑UniformFun.ofFun ∘ FunLike.coe) :=\n\n/-- If `α` has a basis consisting of compact opens, then an open set in `α` is compact open iff\nit is a finite union of some elements in the basis -/\ntheorem ∀ {α : Type u} {ι : Type u_1} [inst : TopologicalSpace α] (b : ι → Set α),\n  TopologicalSpace.IsTopologicalBasis (Set.range b) →\n    (∀ (i : ι), IsCompact (b i)) →\n      ∀ (U : Set α), IsCompact U ∧ IsOpen U ↔ ∃ s, Set.Finite s ∧ U = ⋃ (i : ι) (_ : i ∈ s), b i :=\n\n/-- If `X` is a topological space, `s` is a set in `X` such that the induced topology is T₀ and is\nsecond countable, then there exists a countable family of open sets in `X` that separates points\nof `s`. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X] {s : Set X} [inst_1 : T0Space ↑s]\n  [inst_2 : TopologicalSpace.SecondCountableTopology ↑s], HasCountableSeparatingOn X IsOpen s :=\n\n/-- If `s ∈ 𝓤 α`, then for any natural `n`, for a subset `t` of a sufficiently small set in `𝓤 α`,\nwe have `t ○ t ○ ... ○ t ⊆ s` (`n` compositions). -/\ntheorem ∀ {α : Type ua} [inst : UniformSpace α] {s : Set (α × α)},\n  s ∈ uniformity α →\n    ∀ (n : ℕ), ∀ᶠ (t : Set (α × α)) in Filter.smallSets (uniformity α), (fun x => compRel t x)^[n] t ⊆ s :=\n\n/-- If a family of sets `s` generates the topology, then intersections of finite\nsubcollections of `s` form a topological basis. -/\ntheorem ∀ {α : Type u} [t : TopologicalSpace α] {s : Set (Set α)},\n  t = TopologicalSpace.generateFrom s →\n    TopologicalSpace.IsTopologicalBasis ((fun f => ⋂₀ f) '' {f | Set.Finite f ∧ f ⊆ s}) :=\n\n/-- A topology `Inducing` map from a T₀ space is injective. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] [inst_2 : T0Space α] {f : α → β},\n  Inducing f → Function.Injective f :=\n\n/-- If `α` is a compact space, then a locally finite family of nonempty sets of `α` can have only\nfinitely many elements, `Set.Finite` version. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] {ι : Type u_1} [inst_1 : CompactSpace α] {f : ι → Set α},\n  LocallyFinite f → (∀ (i : ι), Set.Nonempty (f i)) → Set.Finite Set.univ :=\n\n/-- There exists a countable set of sets that generates the topology. -/\ntheorem ∀ {α : Type u} [t : TopologicalSpace α] [self : TopologicalSpace.SecondCountableTopology α],\n  ∃ b, Set.Countable b ∧ t = TopologicalSpace.generateFrom b :=\n\n/-- Distinct elements of a set of sets partitioning α are disjoint. -/\ntheorem ∀ {α : Type u_1} {c : Set (Set α)}, (∀ (a : α), ∃! b x, a ∈ b) → Set.PairwiseDisjoint c id :=\n\n/-- A topology `Inducing` map from a T₀ space is a topological embedding. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] [inst_2 : T0Space α] {f : α → β},\n  Inducing f → Embedding f :=\n\n/-- Let `s, t ⊆ X` be two subsets of a topological space `X`.  If `t ⊆ s` and the topology induced\nby `X`on `s` is discrete, then also the topology induces on `t` is discrete. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X] {s t : Set X}, DiscreteTopology ↑s → t ⊆ s → DiscreteTopology ↑t :=\n\n/-- If `α` is locally compact, and an infinite sum of functions in `C(α, β)`\nconverges to `g` (for the compact-open topology), then the pointwise sum converges to `g x` for\nall `x ∈ α`. -/\ntheorem ∀ {α : Type u_3} {β : Type u_2} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] {γ : Type u_1}\n  [inst_2 : AddCommMonoid β] [inst_3 : ContinuousAdd β] {f : γ → C(α, β)} {g : C(α, β)},\n  HasSum f g → ∀ (x : α), HasSum (fun i => ↑(f i) x) (↑g x) :=\n\n/-- If `s ∈ 𝓤 α`, then for any natural `n`, for a subset `t` of a sufficiently small set in `𝓤 α`,\nwe have `t ○ t ⊆ s`. -/\ntheorem ∀ {α : Type ua} [inst : UniformSpace α] {s : Set (α × α)},\n  s ∈ uniformity α → ∀ᶠ (t : Set (α × α)) in Filter.smallSets (uniformity α), compRel t t ⊆ s :=\n\n/-- If `β` is a second-countable space, then its induced topology via\n`f` on `α` is also second-countable. -/\ntheorem ∀ (α : Type u) (β : Type u_1) [t : TopologicalSpace β] [inst : TopologicalSpace.SecondCountableTopology β] (f : α → β),\n  TopologicalSpace.SecondCountableTopology α :=\n\n/-- Let `T_α` be a family of topologies on `X`. Show that there is a unique smallest topology on `X` containing all the collections `T_α`. -/\ntheorem", "choices": ["∀ {X : Type u_1} {ι : Type u_2} {T : ι → TopologicalSpace X},\n  ∃ t : TopologicalSpace X, (∀ i : ι, T i ≤ t) ∧ ∀ t' : TopologicalSpace X, (∀ i : ι, T i ≤ t') → t ≤ t' ", "∀ {X : Type u_1} {ι : Type u_2} (T : ι → TopologicalSpace X),\n  ∃ T', TopologicalSpace.IsMinimal T' ∧ ∀ (i : ι), T i ≤ T' ", "∀ {X : Type u_1} {ι : Type u_2} {T : ι → TopologicalSpace X},\n  ∃! _inst : TopologicalSpace X, ∀ (i : ι), T i ≤ _inst ", "∀ {X : Type u} {ι : Type u_1} (T : ι → TopologicalSpace X),\n  ∃! (T₀ : TopologicalSpace X), ∀ (i : ι), T i ≤ T₀ ", "∀ {X : Type u_1} {ι : Type u_2} {t : ι → TopologicalSpace X},\n  ∃ T_inf : TopologicalSpace X, (∀ i, t i ≤ T_inf) ∧ ∀ {T : TopologicalSpace X}, (∀ i, t i ≤ T) → T_inf ≤ T ", "∀ {X : Type u_1} {ι : Type u_2} (T : ι → TopologicalSpace X),\n  ∃! (T_min : TopologicalSpace X), ∀ i, T i ≤ T_min ", "∀ {X : Type u} {ι : Type u_1} {T : ι → TopologicalSpace X},\n  ∃! (T₀ : TopologicalSpace X), ∀ (i : ι), T i ≤ T₀ ", "∀ {X : Type u_1} {ι : Type u_2} (T : ι → TopologicalSpace X),\n  ∃ t : TopologicalSpace X, (∀ i, T i ≤ t) ∧ ∀ t' : TopologicalSpace X, (∀ i, T i ≤ t') → t ≤ t' ", "∀ {X : Type u} {ι : Type u_1} {T : ι → TopologicalSpace X},\n  ∃! (t : TopologicalSpace X), ∀ i, T i ≤ t ", "∀ {X : Type u_1} {ι : Type u_2} {T : ι → TopologicalSpace X},\n  ∃! (t : TopologicalSpace X), ∀ i, T i ≤ t "]}
{"docString": "Show that if `A` is a basis for a topology on `X`, then the topology generated by `A` equals the intersection of all topologies on `X` that contain `A`.", "prompts": "[{\"theorem\":\n  \"∀ {α : Type u} [t : TopologicalSpace α] {s : Set (Set α)},\\n  t = TopologicalSpace.generateFrom s →\\n    TopologicalSpace.IsTopologicalBasis ((fun f => ⋂₀ f) '' {f | Set.Finite f ∧ f ⊆ s})\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a family of sets `s` generates the topology, then intersections of finite\\nsubcollections of `s` form a topological basis. \"},\n {\"theorem\":\n  \"∀ {ι : Type u_1} {R : Type u_2} {A : Type u_3} [inst : CommRing R] [inst_1 : CommRing A] [inst_2 : Algebra R A]\\n  {B : ι → Submodule R A}, SubmodulesRingBasis B → ∀ (i j : ι), ∃ k, B k ≤ B i ⊓ B j\",\n  \"isProp\": true,\n  \"docString\": \"Condition for `B` to be a filter basis on `A`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type u_1} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] {s : Set (Set α)},\\n  TopologicalSpace.IsTopologicalBasis s →\\n    ∀ {t : Set (Set β)},\\n      TopologicalSpace.IsTopologicalBasis t →\\n        TopologicalSpace.IsTopologicalBasis ((fun u => Sum.inl '' u) '' s ∪ (fun u => Sum.inr '' u) '' t)\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a sum space `α ⊕ β`, one can form a topological basis by taking the union of\\ntopological bases on each of the two components. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] {Y : Type u_2} [inst_1 : TopologicalSpace Y] {π : X → Y} {V : Set (Set X)},\\n  TopologicalSpace.IsTopologicalBasis V →\\n    QuotientMap π → IsOpenMap π → TopologicalSpace.IsTopologicalBasis (Set.image π '' V)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The image of a topological basis under an open quotient map is a topological basis. \"},\n {\"theorem\":\n  \"∀ {A : Type u_1} {ι : Type u_2} [inst : Ring A] {B : ι → AddSubgroup A},\\n  RingSubgroupsBasis B → ∀ (x : A) (i : ι), ∃ j, ↑(B j) ⊆ (fun x_1 => x * x_1) ⁻¹' ↑(B i)\",\n  \"isProp\": true,\n  \"docString\":\n  \"For any element `x : A` and any set `B` in the submodule basis on `A`,\\nthere is another basis element `B'` such that `B' * x` is in `B`. \"},\n {\"theorem\":\n  \"∀ {ι : Type u_2} {E : ι → Type u_1} [inst : (i : ι) → TopologicalSpace (E i)] {s : (i : ι) → Set (Set (E i))},\\n  (∀ (i : ι), TopologicalSpace.IsTopologicalBasis (s i)) →\\n    TopologicalSpace.IsTopologicalBasis (⋃ (i : ι), (fun u => Sigma.mk i '' u) '' s i)\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a disjoint union space `Σ i, E i`, one can form a topological basis by taking the union of\\ntopological bases on each of the parts of the space. \"},\n {\"theorem\":\n  \"∀ {A : Type u_1} {ι : Type u_2} [inst : Ring A] {B : ι → AddSubgroup A},\\n  RingSubgroupsBasis B → ∀ (x : A) (i : ι), ∃ j, ↑(B j) ⊆ (fun x_1 => x_1 * x) ⁻¹' ↑(B i)\",\n  \"isProp\": true,\n  \"docString\":\n  \"For any element `x : A` and any set `B` in the submodule basis on `A`,\\nthere is another basis element `B'` such that `x * B'` is in `B`. \"},\n {\"theorem\":\n  \"∀ (R : Type u) (A : Type w) {M : Type v₁} [inst : CommSemiring R] [inst_1 : Semiring A] [inst_2 : Algebra R A]\\n  [inst_3 : AddCommMonoid M] [inst_4 : Module R M] [inst_5 : Module A M] [inst_6 : IsScalarTower R A M],\\n  Function.Surjective ↑(algebraMap R A) →\\n    ∀ (X : Set M), Submodule.restrictScalars R (Submodule.span A X) = Submodule.span R X\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `A` is an `R`-algebra such that the induced morphism `R →+* A` is surjective, then the\\n`R`-module generated by a set `X` equals the `A`-module generated by `X`. \"},\n {\"theorem\":\n  \"∀ {A : Type u_1} {ι : Type u_2} [inst : Ring A] {B : ι → AddSubgroup A},\\n  RingSubgroupsBasis B → ∀ (i : ι), ∃ j, ↑(B j) * ↑(B j) ⊆ ↑(B i)\",\n  \"isProp\": true,\n  \"docString\":\n  \"For each set `B` in the submodule basis on `A`, there is another basis element `B'` such\\nthat the set-theoretic product `B' * B'` is in `B`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [t : TopologicalSpace α] {s : Set (Set α)},\\n  (∀ (u : Set α), u ∈ s → IsOpen u) →\\n    (∀ (a : α) (u : Set α), a ∈ u → IsOpen u → ∃ v, v ∈ s ∧ a ∈ v ∧ v ⊆ u) → TopologicalSpace.IsTopologicalBasis s\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a family of open sets `s` is such that every open neighbourhood contains some\\nmember of `s`, then `s` is a topological basis. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] {S : Setoid X} {V : Set (Set X)},\\n  TopologicalSpace.IsTopologicalBasis V →\\n    IsOpenMap Quotient.mk' → TopologicalSpace.IsTopologicalBasis (Set.image Quotient.mk' '' V)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The image of a topological basis \\\"downstairs\\\" in an open quotient is a topological basis. \"},\n {\"theorem\":\n  \"∀ {G : Type u_1} [inst : AddGroup G] {N : Type u_2} [inst_1 : AddGroup N] (f : G →+ N) {H K : AddSubgroup G},\\n  AddMonoidHom.ker f ≤ H → AddMonoidHom.ker f ≤ K → AddSubgroup.map f H = AddSubgroup.map f K → H = K\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given `f(A) = f(B)`, `ker f ≤ A`, and `ker f ≤ B`, deduce that `A = B`.\"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] {s t : Set X}, DiscreteTopology ↑s → t ⊆ s → DiscreteTopology ↑t\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `s, t ⊆ X` be two subsets of a topological space `X`.  If `t ⊆ s` and the topology induced\\nby `X`on `s` is discrete, then also the topology induces on `t` is discrete.  \"},\n {\"theorem\":\n  \"∀ {G : Type u_1} [inst : Group G] {N : Type u_2} [inst_1 : Group N] (f : G →* N) {H K : Subgroup G},\\n  MonoidHom.ker f ≤ H → MonoidHom.ker f ≤ K → Subgroup.map f H = Subgroup.map f K → H = K\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given `f(A) = f(B)`, `ker f ≤ A`, and `ker f ≤ B`, deduce that `A = B`. \"},\n {\"theorem\":\n  \"∀ {R : Type u_1} [inst : CommRing R] (I : Ideal R), Filter.HasBasis (nhds 0) (fun _n => True) fun n => ↑(I ^ n)\",\n  \"isProp\": true,\n  \"docString\":\n  \"For the `I`-adic topology, the neighborhoods of zero has basis given by the powers of `I`. \"},\n {\"theorem\":\n  \"∀ {ι : Type u_3} {R : Type u_1} {M : Type u_2} [inst : Semiring R] [inst_1 : AddCommMonoid M] [inst_2 : Module R M]\\n  {P : Submodule R M} (b : Basis ι R { x // x ∈ P }) {x : M}, x ∈ P ↔ ∃ c, x = Finsupp.sum c fun i x => x • ↑(↑b i)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If the submodule `P` has a basis, `x ∈ P` iff it is a linear combination of basis vectors. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {ι : Type u_1} [inst : TopologicalSpace α] (b : ι → Set α),\\n  TopologicalSpace.IsTopologicalBasis (Set.range b) →\\n    (∀ (i : ι), IsCompact (b i)) →\\n      ∀ (U : Set α), IsCompact U ∧ IsOpen U ↔ ∃ s, Set.Finite s ∧ U = ⋃ (i : ι) (_ : i ∈ s), b i\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `α` has a basis consisting of compact opens, then an open set in `α` is compact open iff\\nit is a finite union of some elements in the basis \"},\n {\"theorem\":\n  \"∀ {ι : Type u_1} {R : Type u_2} {A : Type u_3} [inst : CommRing R] [inst_1 : CommRing A] [inst_2 : Algebra R A]\\n  {B : ι → Submodule R A}, SubmodulesRingBasis B → ∀ (a : A) (i : ι), ∃ j, a • B j ≤ B i\",\n  \"isProp\": true,\n  \"docString\":\n  \"For any element `a : A` and any set `B` in the submodule basis on `A`,\\nthere is another basis element `B'` such that `a • B'` is in `B`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {s : Set α} {ι : Type v},\\n  IsCompact s →\\n    ∀ (Z : ι → Set α),\\n      (∀ (i : ι), IsClosed (Z i)) →\\n        (∀ (t : Finset ι), Set.Nonempty (s ∩ ⋂ (i : ι) (_ : i ∈ t), Z i)) → Set.Nonempty (s ∩ ⋂ (i : ι), Z i)\",\n  \"isProp\": true,\n  \"docString\":\n  \"To show that a compact set intersects the intersection of a family of closed sets,\\nit is sufficient to show that it intersects every finite subfamily. \"},\n {\"theorem\":\n  \"∀ {R : Type u_1} {A : Type u_2} {B : Type u_3} [inst : CommRing R] [inst_1 : CommRing A] [inst_2 : CommRing B]\\n  [inst_3 : Algebra A B] [inst_4 : Algebra R B] [inst_5 : Algebra R A] [inst_6 : IsScalarTower R A B],\\n  Algebra.IsIntegral R A → ∀ (x : B), IsIntegral A x → IsIntegral R x\",\n  \"isProp\": true,\n  \"docString\":\n  \"If A is an R-algebra all of whose elements are integral over R,\\nand x is an element of an A-algebra that is integral over A, then x is integral over R.\"}]\n", "prompt_cons": "/-- If a family of sets `s` generates the topology, then intersections of finite\nsubcollections of `s` form a topological basis. -/\ntheorem ∀ {α : Type u} [t : TopologicalSpace α] {s : Set (Set α)},\n  t = TopologicalSpace.generateFrom s →\n    TopologicalSpace.IsTopologicalBasis ((fun f => ⋂₀ f) '' {f | Set.Finite f ∧ f ⊆ s}) :=\n\n/-- Condition for `B` to be a filter basis on `A`. -/\ntheorem ∀ {ι : Type u_1} {R : Type u_2} {A : Type u_3} [inst : CommRing R] [inst_1 : CommRing A] [inst_2 : Algebra R A]\n  {B : ι → Submodule R A}, SubmodulesRingBasis B → ∀ (i j : ι), ∃ k, B k ≤ B i ⊓ B j :=\n\n/-- In a sum space `α ⊕ β`, one can form a topological basis by taking the union of\ntopological bases on each of the two components. -/\ntheorem ∀ {α : Type u} {β : Type u_1} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] {s : Set (Set α)},\n  TopologicalSpace.IsTopologicalBasis s →\n    ∀ {t : Set (Set β)},\n      TopologicalSpace.IsTopologicalBasis t →\n        TopologicalSpace.IsTopologicalBasis ((fun u => Sum.inl '' u) '' s ∪ (fun u => Sum.inr '' u) '' t) :=\n\n/-- The image of a topological basis under an open quotient map is a topological basis. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X] {Y : Type u_2} [inst_1 : TopologicalSpace Y] {π : X → Y} {V : Set (Set X)},\n  TopologicalSpace.IsTopologicalBasis V →\n    QuotientMap π → IsOpenMap π → TopologicalSpace.IsTopologicalBasis (Set.image π '' V) :=\n\n/-- For any element `x : A` and any set `B` in the submodule basis on `A`,\nthere is another basis element `B'` such that `B' * x` is in `B`. -/\ntheorem ∀ {A : Type u_1} {ι : Type u_2} [inst : Ring A] {B : ι → AddSubgroup A},\n  RingSubgroupsBasis B → ∀ (x : A) (i : ι), ∃ j, ↑(B j) ⊆ (fun x_1 => x * x_1) ⁻¹' ↑(B i) :=\n\n/-- In a disjoint union space `Σ i, E i`, one can form a topological basis by taking the union of\ntopological bases on each of the parts of the space. -/\ntheorem ∀ {ι : Type u_2} {E : ι → Type u_1} [inst : (i : ι) → TopologicalSpace (E i)] {s : (i : ι) → Set (Set (E i))},\n  (∀ (i : ι), TopologicalSpace.IsTopologicalBasis (s i)) →\n    TopologicalSpace.IsTopologicalBasis (⋃ (i : ι), (fun u => Sigma.mk i '' u) '' s i) :=\n\n/-- For any element `x : A` and any set `B` in the submodule basis on `A`,\nthere is another basis element `B'` such that `x * B'` is in `B`. -/\ntheorem ∀ {A : Type u_1} {ι : Type u_2} [inst : Ring A] {B : ι → AddSubgroup A},\n  RingSubgroupsBasis B → ∀ (x : A) (i : ι), ∃ j, ↑(B j) ⊆ (fun x_1 => x_1 * x) ⁻¹' ↑(B i) :=\n\n/-- If `A` is an `R`-algebra such that the induced morphism `R →+* A` is surjective, then the\n`R`-module generated by a set `X` equals the `A`-module generated by `X`. -/\ntheorem ∀ (R : Type u) (A : Type w) {M : Type v₁} [inst : CommSemiring R] [inst_1 : Semiring A] [inst_2 : Algebra R A]\n  [inst_3 : AddCommMonoid M] [inst_4 : Module R M] [inst_5 : Module A M] [inst_6 : IsScalarTower R A M],\n  Function.Surjective ↑(algebraMap R A) →\n    ∀ (X : Set M), Submodule.restrictScalars R (Submodule.span A X) = Submodule.span R X :=\n\n/-- For each set `B` in the submodule basis on `A`, there is another basis element `B'` such\nthat the set-theoretic product `B' * B'` is in `B`. -/\ntheorem ∀ {A : Type u_1} {ι : Type u_2} [inst : Ring A] {B : ι → AddSubgroup A},\n  RingSubgroupsBasis B → ∀ (i : ι), ∃ j, ↑(B j) * ↑(B j) ⊆ ↑(B i) :=\n\n/-- If a family of open sets `s` is such that every open neighbourhood contains some\nmember of `s`, then `s` is a topological basis. -/\ntheorem ∀ {α : Type u} [t : TopologicalSpace α] {s : Set (Set α)},\n  (∀ (u : Set α), u ∈ s → IsOpen u) →\n    (∀ (a : α) (u : Set α), a ∈ u → IsOpen u → ∃ v, v ∈ s ∧ a ∈ v ∧ v ⊆ u) → TopologicalSpace.IsTopologicalBasis s :=\n\n/-- The image of a topological basis \"downstairs\" in an open quotient is a topological basis. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X] {S : Setoid X} {V : Set (Set X)},\n  TopologicalSpace.IsTopologicalBasis V →\n    IsOpenMap Quotient.mk' → TopologicalSpace.IsTopologicalBasis (Set.image Quotient.mk' '' V) :=\n\n/-- Given `f(A) = f(B)`, `ker f ≤ A`, and `ker f ≤ B`, deduce that `A = B`. -/\ntheorem ∀ {G : Type u_1} [inst : AddGroup G] {N : Type u_2} [inst_1 : AddGroup N] (f : G →+ N) {H K : AddSubgroup G},\n  AddMonoidHom.ker f ≤ H → AddMonoidHom.ker f ≤ K → AddSubgroup.map f H = AddSubgroup.map f K → H = K :=\n\n/-- Let `s, t ⊆ X` be two subsets of a topological space `X`.  If `t ⊆ s` and the topology induced\nby `X`on `s` is discrete, then also the topology induces on `t` is discrete. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X] {s t : Set X}, DiscreteTopology ↑s → t ⊆ s → DiscreteTopology ↑t :=\n\n/-- Given `f(A) = f(B)`, `ker f ≤ A`, and `ker f ≤ B`, deduce that `A = B`. -/\ntheorem ∀ {G : Type u_1} [inst : Group G] {N : Type u_2} [inst_1 : Group N] (f : G →* N) {H K : Subgroup G},\n  MonoidHom.ker f ≤ H → MonoidHom.ker f ≤ K → Subgroup.map f H = Subgroup.map f K → H = K :=\n\n/-- For the `I`-adic topology, the neighborhoods of zero has basis given by the powers of `I`. -/\ntheorem ∀ {R : Type u_1} [inst : CommRing R] (I : Ideal R), Filter.HasBasis (nhds 0) (fun _n => True) fun n => ↑(I ^ n) :=\n\n/-- If the submodule `P` has a basis, `x ∈ P` iff it is a linear combination of basis vectors. -/\ntheorem ∀ {ι : Type u_3} {R : Type u_1} {M : Type u_2} [inst : Semiring R] [inst_1 : AddCommMonoid M] [inst_2 : Module R M]\n  {P : Submodule R M} (b : Basis ι R { x // x ∈ P }) {x : M}, x ∈ P ↔ ∃ c, x = Finsupp.sum c fun i x => x • ↑(↑b i) :=\n\n/-- If `α` has a basis consisting of compact opens, then an open set in `α` is compact open iff\nit is a finite union of some elements in the basis -/\ntheorem ∀ {α : Type u} {ι : Type u_1} [inst : TopologicalSpace α] (b : ι → Set α),\n  TopologicalSpace.IsTopologicalBasis (Set.range b) →\n    (∀ (i : ι), IsCompact (b i)) →\n      ∀ (U : Set α), IsCompact U ∧ IsOpen U ↔ ∃ s, Set.Finite s ∧ U = ⋃ (i : ι) (_ : i ∈ s), b i :=\n\n/-- For any element `a : A` and any set `B` in the submodule basis on `A`,\nthere is another basis element `B'` such that `a • B'` is in `B`. -/\ntheorem ∀ {ι : Type u_1} {R : Type u_2} {A : Type u_3} [inst : CommRing R] [inst_1 : CommRing A] [inst_2 : Algebra R A]\n  {B : ι → Submodule R A}, SubmodulesRingBasis B → ∀ (a : A) (i : ι), ∃ j, a • B j ≤ B i :=\n\n/-- To show that a compact set intersects the intersection of a family of closed sets,\nit is sufficient to show that it intersects every finite subfamily. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] {s : Set α} {ι : Type v},\n  IsCompact s →\n    ∀ (Z : ι → Set α),\n      (∀ (i : ι), IsClosed (Z i)) →\n        (∀ (t : Finset ι), Set.Nonempty (s ∩ ⋂ (i : ι) (_ : i ∈ t), Z i)) → Set.Nonempty (s ∩ ⋂ (i : ι), Z i) :=\n\n/-- If A is an R-algebra all of whose elements are integral over R,\nand x is an element of an A-algebra that is integral over A, then x is integral over R. -/\ntheorem ∀ {R : Type u_1} {A : Type u_2} {B : Type u_3} [inst : CommRing R] [inst_1 : CommRing A] [inst_2 : CommRing B]\n  [inst_3 : Algebra A B] [inst_4 : Algebra R B] [inst_5 : Algebra R A] [inst_6 : IsScalarTower R A B],\n  Algebra.IsIntegral R A → ∀ (x : B), IsIntegral A x → IsIntegral R x :=\n\n/-- Show that if `A` is a basis for a topology on `X`, then the topology generated by `A` equals the intersection of all topologies on `X` that contain `A`. -/\ntheorem", "choices": ["∀ {α : Type u} [t : TopologicalSpace α] {s : Set (Set α)},\n  TopologicalSpace.IsTopologicalBasis s → t = ⋂₀ {u : Set (Set α) | s ⊆ u ∧ (TopologicalSpace.generateFrom u).is_open = id} "]}
{"docString": "Show that the lower limit topology `ℝ_l` and the `K`-topology `ℝ_K` are not comparable.", "prompts": "[{\"theorem\":\n  \"∀ {K : Type u_1} {L : Type u_2} [inst : Field K] [inst_1 : Field L] [inst_2 : Algebra K L],\\n  Algebra.IsIntegral K L → IsTotallyDisconnected Set.univ\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `L/K` is an algebraic field extension, then the Krull topology on `L ≃ₐ[K] L` is\\ntotally disconnected. \"},\n {\"theorem\":\n  \"∀ {K : Type u_1} {L : Type u_2} [inst : Field K] [inst_1 : Field L] [inst_2 : Algebra K L],\\n  Algebra.IsIntegral K L → T2Space (L ≃ₐ[K] L)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `L/K` is an algebraic extension, then the Krull topology on `L ≃ₐ[K] L` is Hausdorff. \"},\n {\"theorem\":\n  \"∀ (K : Type u_1) (L : Type u_2) [inst : Field K] [inst_1 : Field L] [inst_2 : Algebra K L], TopologicalGroup (L ≃ₐ[K] L)\",\n  \"isProp\": true,\n  \"docString\":\n  \"For a field extension `L/K`, the Krull topology on `L ≃ₐ[K] L` makes it a topological group. \"},\n {\"theorem\":\n  \"∀ (X : Type u_1) [inst : TopologicalSpace X] [inst_1 : T3Space X] [inst_2 : TopologicalSpace.SecondCountableTopology X],\\n  ∃ f, Embedding f\",\n  \"isProp\": true,\n  \"docString\":\n  \"A T₃ topological space with second countable topology can be embedded into `l^∞ = ℕ →ᵇ ℝ`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : Preorder α] [inst_1 : TopologicalSpace α] [inst_2 : LowerTopology α] (a : α),\\n  IsClosed (Set.Ici a)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Left-closed right-infinite intervals [a, ∞) are closed in the lower topology. \"},\n {\"theorem\": \"¬IsField ℤ\",\n  \"isProp\": true,\n  \"docString\": \"`ℤ` with its usual ring structure is not a field. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : Preorder α] [inst_1 : TopologicalSpace α] [inst_2 : LowerTopology α] {s : Set α},\\n  Set.Finite s → IsClosed ↑(upperClosure s)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The upper closure of a finite set is closed in the lower topology. \"},\n {\"theorem\":\n  \"∀ {C : Type u₁} [inst : CategoryTheory.Category C] {D : Type u₂} [inst_1 : CategoryTheory.Category D] {J : Type w}\\n  [inst_2 : CategoryTheory.Category J] (K : CategoryTheory.Functor J C) (F : CategoryTheory.Functor C D)\\n  [inst_3 : CategoryTheory.Limits.HasLimit (CategoryTheory.Functor.comp K F)]\\n  [inst_4 : CategoryTheory.CreatesLimit K F], CategoryTheory.Limits.HasLimit K\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `F` creates the limit of `K` and `K ⋙ F` has a limit, then `K` has a limit. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : PseudoMetricSpace α] {s : Set α} {f : α → ℝ} (K : ℝ),\\n  (∀ (x : α), x ∈ s → ∀ (y : α), y ∈ s → f x ≤ f y + K * dist x y) → LipschitzOnWith (Real.toNNReal K) f s\",\n  \"isProp\": true,\n  \"docString\":\n  \"For functions to `ℝ`, it suffices to prove `f x ≤ f y + K * dist x y`; this version\\ndoesn't assume `0≤K`. \"},\n {\"theorem\":\n  \"∀ {R : Type u_1} [inst : NormedRing R] (k : ℕ) {r₁ : R} {r₂ : ℝ},\\n  ‖r₁‖ < r₂ → (fun n => ↑n ^ k * r₁ ^ n) =o[Filter.atTop] fun n => r₂ ^ n\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `‖r₁‖ < r₂`, then for any natural `k` we have `n ^ k r₁ ^ n = o (r₂ ^ n)` as `n → ∞`. \"},\n {\"theorem\":\n  \"∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsDomain R] {k l : ℕ},\\n  k ≠ l → Disjoint (primitiveRoots k R) (primitiveRoots l R)\",\n  \"isProp\": true,\n  \"docString\": \"The sets `primitiveRoots k R` are pairwise disjoint. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\\n  {K : Submodule 𝕜 E} [inst_3 : HasOrthogonalProjection K], IsCompl K Kᗮ\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `K` admits an orthogonal projection, `K` and `Kᗮ` are complements of each other. \"},\n {\"theorem\":\n  \"∀ {K : Type v} {V : Type w} [inst : Field K] [inst_1 : AddCommGroup V] [inst_2 : Module K V]\\n  [inst_3 : FiniteDimensional K V] (f : Module.End K V) (μ : K),\\n  Disjoint (Module.End.generalizedEigenrange f μ (FiniteDimensional.finrank K V))\\n    (↑(Module.End.generalizedEigenspace f μ) (FiniteDimensional.finrank K V))\",\n  \"isProp\": true,\n  \"docString\":\n  \"Generalized eigenrange and generalized eigenspace for exponent `finrank K V` are disjoint. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : PseudoMetricSpace α] {f : α → ℝ} (K : NNReal),\\n  (∀ (x y : α), f x ≤ f y + ↑K * dist x y) → LipschitzWith K f\",\n  \"isProp\": true,\n  \"docString\":\n  \"For functions to `ℝ`, it suffices to prove `f x ≤ f y + K * dist x y`; this version\\nassumes `0≤K`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] (x : α),\\n  Disjoint (nhds x) (Filter.cocompact α)\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a locally compact space, the filters `𝓝 x` and `cocompact α` are disjoint for all `α`. \"},\n {\"theorem\":\n  \"∀ {G : Type u_1} [inst : Group G] {N : Type u_2} [inst_1 : Group N] (f : G →* N) {H K : Subgroup G},\\n  MonoidHom.ker f ≤ H → MonoidHom.ker f ≤ K → Subgroup.map f H = Subgroup.map f K → H = K\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given `f(A) = f(B)`, `ker f ≤ A`, and `ker f ≤ B`, deduce that `A = B`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} [inst : NontriviallyNormedField 𝕜] {E : Type u_2} [inst_1 : SeminormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E], UniformSpace.toTopologicalSpace ≤ WeakDual.instTopologicalSpace\",\n  \"isProp\": true,\n  \"docString\":\n  \"The weak-star topology is coarser than the dual-norm topology. \"},\n {\"theorem\":\n  \"∀ {Γ : Type u_1} {T : Type u_2} [inst : TopologicalSpace T] [inst_1 : VAdd Γ T] [self : ProperlyDiscontinuousVAdd Γ T]\\n  {K L : Set T}, IsCompact K → IsCompact L → Set.Finite {γ | (fun x => γ +ᵥ x) '' K ∩ L ≠ ∅}\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given two compact sets `K` and `L`, `γ +ᵥ K ∩ L` is nonempty for finitely many `γ`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : DecidableEq α] {𝒜 ℬ : Finset (Finset α)} [inst_1 : Fintype α],\\n  IsLowerSet ↑𝒜 → IsUpperSet ↑ℬ → 2 ^ Fintype.card α * Finset.card (𝒜 ∩ ℬ) ≤ Finset.card 𝒜 * Finset.card ℬ\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Harris-Kleitman inequality**: Lower sets and upper sets of finsets anticorrelate. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : DecidableEq α] {𝒜 ℬ : Finset (Finset α)} [inst_1 : Fintype α],\\n  IsUpperSet ↑𝒜 → IsLowerSet ↑ℬ → 2 ^ Fintype.card α * Finset.card (𝒜 ∩ ℬ) ≤ Finset.card 𝒜 * Finset.card ℬ\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Harris-Kleitman inequality**: Upper sets and lower sets of finsets anticorrelate. \"}]\n", "prompt_cons": "/-- If `L/K` is an algebraic field extension, then the Krull topology on `L ≃ₐ[K] L` is\ntotally disconnected. -/\ntheorem ∀ {K : Type u_1} {L : Type u_2} [inst : Field K] [inst_1 : Field L] [inst_2 : Algebra K L],\n  Algebra.IsIntegral K L → IsTotallyDisconnected Set.univ :=\n\n/-- If `L/K` is an algebraic extension, then the Krull topology on `L ≃ₐ[K] L` is Hausdorff. -/\ntheorem ∀ {K : Type u_1} {L : Type u_2} [inst : Field K] [inst_1 : Field L] [inst_2 : Algebra K L],\n  Algebra.IsIntegral K L → T2Space (L ≃ₐ[K] L) :=\n\n/-- For a field extension `L/K`, the Krull topology on `L ≃ₐ[K] L` makes it a topological group. -/\ntheorem ∀ (K : Type u_1) (L : Type u_2) [inst : Field K] [inst_1 : Field L] [inst_2 : Algebra K L], TopologicalGroup (L ≃ₐ[K] L) :=\n\n/-- A T₃ topological space with second countable topology can be embedded into `l^∞ = ℕ →ᵇ ℝ`. -/\ntheorem ∀ (X : Type u_1) [inst : TopologicalSpace X] [inst_1 : T3Space X] [inst_2 : TopologicalSpace.SecondCountableTopology X],\n  ∃ f, Embedding f :=\n\n/-- Left-closed right-infinite intervals [a, ∞) are closed in the lower topology. -/\ntheorem ∀ {α : Type u_1} [inst : Preorder α] [inst_1 : TopologicalSpace α] [inst_2 : LowerTopology α] (a : α),\n  IsClosed (Set.Ici a) :=\n\n/-- `ℤ` with its usual ring structure is not a field. -/\ntheorem ¬IsField ℤ :=\n\n/-- The upper closure of a finite set is closed in the lower topology. -/\ntheorem ∀ {α : Type u_1} [inst : Preorder α] [inst_1 : TopologicalSpace α] [inst_2 : LowerTopology α] {s : Set α},\n  Set.Finite s → IsClosed ↑(upperClosure s) :=\n\n/-- If `F` creates the limit of `K` and `K ⋙ F` has a limit, then `K` has a limit. -/\ntheorem ∀ {C : Type u₁} [inst : CategoryTheory.Category C] {D : Type u₂} [inst_1 : CategoryTheory.Category D] {J : Type w}\n  [inst_2 : CategoryTheory.Category J] (K : CategoryTheory.Functor J C) (F : CategoryTheory.Functor C D)\n  [inst_3 : CategoryTheory.Limits.HasLimit (CategoryTheory.Functor.comp K F)]\n  [inst_4 : CategoryTheory.CreatesLimit K F], CategoryTheory.Limits.HasLimit K :=\n\n/-- For functions to `ℝ`, it suffices to prove `f x ≤ f y + K * dist x y`; this version\ndoesn't assume `0≤K`. -/\ntheorem ∀ {α : Type u} [inst : PseudoMetricSpace α] {s : Set α} {f : α → ℝ} (K : ℝ),\n  (∀ (x : α), x ∈ s → ∀ (y : α), y ∈ s → f x ≤ f y + K * dist x y) → LipschitzOnWith (Real.toNNReal K) f s :=\n\n/-- If `‖r₁‖ < r₂`, then for any natural `k` we have `n ^ k r₁ ^ n = o (r₂ ^ n)` as `n → ∞`. -/\ntheorem ∀ {R : Type u_1} [inst : NormedRing R] (k : ℕ) {r₁ : R} {r₂ : ℝ},\n  ‖r₁‖ < r₂ → (fun n => ↑n ^ k * r₁ ^ n) =o[Filter.atTop] fun n => r₂ ^ n :=\n\n/-- The sets `primitiveRoots k R` are pairwise disjoint. -/\ntheorem ∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsDomain R] {k l : ℕ},\n  k ≠ l → Disjoint (primitiveRoots k R) (primitiveRoots l R) :=\n\n/-- If `K` admits an orthogonal projection, `K` and `Kᗮ` are complements of each other. -/\ntheorem ∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  {K : Submodule 𝕜 E} [inst_3 : HasOrthogonalProjection K], IsCompl K Kᗮ :=\n\n/-- Generalized eigenrange and generalized eigenspace for exponent `finrank K V` are disjoint. -/\ntheorem ∀ {K : Type v} {V : Type w} [inst : Field K] [inst_1 : AddCommGroup V] [inst_2 : Module K V]\n  [inst_3 : FiniteDimensional K V] (f : Module.End K V) (μ : K),\n  Disjoint (Module.End.generalizedEigenrange f μ (FiniteDimensional.finrank K V))\n    (↑(Module.End.generalizedEigenspace f μ) (FiniteDimensional.finrank K V)) :=\n\n/-- For functions to `ℝ`, it suffices to prove `f x ≤ f y + K * dist x y`; this version\nassumes `0≤K`. -/\ntheorem ∀ {α : Type u} [inst : PseudoMetricSpace α] {f : α → ℝ} (K : NNReal),\n  (∀ (x y : α), f x ≤ f y + ↑K * dist x y) → LipschitzWith K f :=\n\n/-- In a locally compact space, the filters `𝓝 x` and `cocompact α` are disjoint for all `α`. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] (x : α),\n  Disjoint (nhds x) (Filter.cocompact α) :=\n\n/-- Given `f(A) = f(B)`, `ker f ≤ A`, and `ker f ≤ B`, deduce that `A = B`. -/\ntheorem ∀ {G : Type u_1} [inst : Group G] {N : Type u_2} [inst_1 : Group N] (f : G →* N) {H K : Subgroup G},\n  MonoidHom.ker f ≤ H → MonoidHom.ker f ≤ K → Subgroup.map f H = Subgroup.map f K → H = K :=\n\n/-- The weak-star topology is coarser than the dual-norm topology. -/\ntheorem ∀ {𝕜 : Type u_1} [inst : NontriviallyNormedField 𝕜] {E : Type u_2} [inst_1 : SeminormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E], UniformSpace.toTopologicalSpace ≤ WeakDual.instTopologicalSpace :=\n\n/-- Given two compact sets `K` and `L`, `γ +ᵥ K ∩ L` is nonempty for finitely many `γ`. -/\ntheorem ∀ {Γ : Type u_1} {T : Type u_2} [inst : TopologicalSpace T] [inst_1 : VAdd Γ T] [self : ProperlyDiscontinuousVAdd Γ T]\n  {K L : Set T}, IsCompact K → IsCompact L → Set.Finite {γ | (fun x => γ +ᵥ x) '' K ∩ L ≠ ∅} :=\n\n/-- **Harris-Kleitman inequality**: Lower sets and upper sets of finsets anticorrelate. -/\ntheorem ∀ {α : Type u_1} [inst : DecidableEq α] {𝒜 ℬ : Finset (Finset α)} [inst_1 : Fintype α],\n  IsLowerSet ↑𝒜 → IsUpperSet ↑ℬ → 2 ^ Fintype.card α * Finset.card (𝒜 ∩ ℬ) ≤ Finset.card 𝒜 * Finset.card ℬ :=\n\n/-- **Harris-Kleitman inequality**: Upper sets and lower sets of finsets anticorrelate. -/\ntheorem ∀ {α : Type u_1} [inst : DecidableEq α] {𝒜 ℬ : Finset (Finset α)} [inst_1 : Fintype α],\n  IsUpperSet ↑𝒜 → IsLowerSet ↑ℬ → 2 ^ Fintype.card α * Finset.card (𝒜 ∩ ℬ) ≤ Finset.card 𝒜 * Finset.card ℬ :=\n\n/-- Show that the lower limit topology `ℝ_l` and the `K`-topology `ℝ_K` are not comparable. -/\ntheorem", "choices": ["¬(UniformSpace.toTopologicalSpace ≤ LowerTopology ℝ ∧ UniformSpace.toTopologicalSpace ≤ KTopology ℝ) ", "NotComparable TopologicalSpace.lowerLimitTopology (TopologicalSpace.kTopology ℝ) ", "ℝ_l_not_le_ℝ_K : (OrderTopology.lowerLimitTopology ℝ).toTopologicalSpace ≠ (OrderTopology.KTopology ℝ).toTopologicalSpace ", "DisjointLowerLimitTopoKTopology : Disjoint LowerLimitTopo KTopology ", "¬(UniformSpace.toTopologicalSpace ℝ_l ≤ UniformSpace.toTopologicalSpace ℝ_K) ∧\n  ¬(UniformSpace.toTopologicalSpace ℝ_K ≤ UniformSpace.toTopologicalSpace ℝ_l) ", "NotComparable ℝ_l ℝ_K ", "not_le_of_gt : ∀ {α : Type u_1} [inst : LinearOrder α] {a b : α}, a < b → ¬b ≤ a ", "¬(TopologicalSpace.generateFrom (Set.range Set.Ioi) ≤ TopologicalSpace.generateFrom\n    (insert (Set.Iio (Real.sqrt 2)) (set.range (λ (i : ℤ), Set.Ioo (coe i) (coe i + 1))))) ∧\n  ¬(TopologicalSpace.generateFrom\n    (insert (Set.Iio (Real.sqrt 2)) (set.range (λ (i : ℤ), Set.Ioo (coe i) (coe i + 1)))) ≤\n      TopologicalSpace.generateFrom (Set.range Set.Ioi)) ", "not_comparable_lower_K : TopologicalSpace ℝ_l ≤ TopologicalSpace ℝ_K → ¬TopologicalSpace ℝ_K ≤ TopologicalSpace ℝ_l ", ": ℝ_l ≠ ℝ_K ∧ ∀ (U₁ : Set ℝ), IsOpen U₁ → ∀ (U₂ : Set ℝ), IsOpen U₂ → U₁ ≠ U₂ "]}
{"docString": "Show that the collection `{(a,b) | a < b, a and b rational}` is a basis that generates a topology different from the lower limit topology on `ℝ`.", "prompts": "[{\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] {S : Setoid X} {V : Set (Set X)},\\n  TopologicalSpace.IsTopologicalBasis V →\\n    IsOpenMap Quotient.mk' → TopologicalSpace.IsTopologicalBasis (Set.image Quotient.mk' '' V)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The image of a topological basis \\\"downstairs\\\" in an open quotient is a topological basis. \"},\n {\"theorem\":\n  \"∀ {K : Type u_1} {v : K} {n : ℕ} [inst : LinearOrderedField K] [inst_1 : FloorRing K],\\n  GeneralizedContinuedFraction.denominators (GeneralizedContinuedFraction.of v) n ≤\\n    GeneralizedContinuedFraction.denominators (GeneralizedContinuedFraction.of v) (n + 1)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Shows that the sequence of denominators is monotone, that is `Bₙ ≤ Bₙ₊₁`. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] {Y : Type u_2} [inst_1 : TopologicalSpace Y] {π : X → Y} {V : Set (Set X)},\\n  TopologicalSpace.IsTopologicalBasis V →\\n    QuotientMap π → IsOpenMap π → TopologicalSpace.IsTopologicalBasis (Set.image π '' V)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The image of a topological basis under an open quotient map is a topological basis. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [t : TopologicalSpace α] {s : Set (Set α)},\\n  t = TopologicalSpace.generateFrom s →\\n    TopologicalSpace.IsTopologicalBasis ((fun f => ⋂₀ f) '' {f | Set.Finite f ∧ f ⊆ s})\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a family of sets `s` generates the topology, then intersections of finite\\nsubcollections of `s` form a topological basis. \"},\n {\"theorem\":\n  \"∀ {α : Type ua} [inst : UniformSpace α], Filter.HasBasis (uniformity α) (fun V => V ∈ uniformity α ∧ IsOpen V) id\",\n  \"isProp\": true,\n  \"docString\": \"Open elements of `𝓤 α` form a basis of `𝓤 α`. \"},\n {\"theorem\":\n  \"∀ {ι : Type w} [inst : DecidableEq ι] [inst_1 : Fintype ι] (K : Type u) {L : Type v} [inst_2 : Field K]\\n  [inst_3 : Field L] [inst_4 : Algebra K L] [inst_5 : Module.Finite K L] [inst_6 : IsSeparable K L] (b : Basis ι K L),\\n  Algebra.discr K ↑b ≠ 0\",\n  \"isProp\": true,\n  \"docString\":\n  \"Over a field, if `b` is a basis, then `Algebra.discr K b ≠ 0`. \"},\n {\"theorem\":\n  \"∀ {R : Type u_1} [inst : CommRing R] (I : Ideal R), Filter.HasBasis (nhds 0) (fun _n => True) fun n => ↑(I ^ n)\",\n  \"isProp\": true,\n  \"docString\":\n  \"For the `I`-adic topology, the neighborhoods of zero has basis given by the powers of `I`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LinearOrderedAddCommGroup α] [inst_2 : OrderTopology α]\\n  [inst_3 : NoMaxOrder α] {a : α},\\n  0 < a → Filter.HasBasis (nhds a) (fun ε => 0 < ε ∧ ε ≤ a) fun ε => Set.Ioo (a - ε) (a + ε)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `a` is positive we can form a basis from only nonnegative `Set.Ioo` intervals \"},\n {\"theorem\":\n  \"∀ {β : Type u_1} {f g : β → NNReal} {r : NNReal}, (∀ (b : β), g b ≤ f b) → HasSum f r → ∃ p, p ≤ r ∧ HasSum g p\",\n  \"isProp\": true,\n  \"docString\": \"Comparison test of convergence of `ℝ≥0`-valued series. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {E : Type u_2} {F : Type u_3} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E]\\n  [inst_2 : NormedAddCommGroup F] [inst_3 : NormedSpace ℝ F] {m : MeasurableSpace α} {μ : MeasureTheory.Measure α}\\n  [inst_4 : CompleteSpace F] {T : Set α → E →L[ℝ] F} {C : ℝ} (hT : MeasureTheory.DominatedFinMeasAdditive μ T C)\\n  {ι : Type u_4} {l : Filter ι} [inst_5 : Filter.IsCountablyGenerated l] {fs : ι → α → E} {f : α → E} (bound : α → ℝ),\\n  (∀ᶠ (n : ι) in l, MeasureTheory.AEStronglyMeasurable (fs n) μ) →\\n    (∀ᶠ (n : ι) in l, ∀ᵐ (a : α) ∂μ, ‖fs n a‖ ≤ bound a) →\\n      MeasureTheory.Integrable bound →\\n        (∀ᵐ (a : α) ∂μ, Filter.Tendsto (fun n => fs n a) l (nhds (f a))) →\\n          Filter.Tendsto (fun n => MeasureTheory.setToFun μ T hT (fs n)) l (nhds (MeasureTheory.setToFun μ T hT f))\",\n  \"isProp\": true,\n  \"docString\":\n  \"Lebesgue dominated convergence theorem for filters with a countable basis \"},\n {\"theorem\":\n  \"∀ {α : Type ua} [inst : UniformSpace α],\\n  Filter.HasBasis (uniformity α) (fun V => V ∈ uniformity α ∧ IsOpen V ∧ SymmetricRel V) id\",\n  \"isProp\": true,\n  \"docString\":\n  \"Open elements `s : Set (α × α)` of `𝓤 α` such that `(x, y) ∈ s ↔ (y, x) ∈ s` form a basis\\nof `𝓤 α`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {m : MeasurableSpace α} {μ : MeasureTheory.Measure α} {ι : Type u_1} {l : Filter ι}\\n  [inst : Filter.IsCountablyGenerated l] {F : ι → α → ENNReal} {f : α → ENNReal} (bound : α → ENNReal),\\n  (∀ᶠ (n : ι) in l, Measurable (F n)) →\\n    (∀ᶠ (n : ι) in l, ∀ᵐ (a : α) ∂μ, F n a ≤ bound a) →\\n      ∫⁻ (a : α), bound a ∂μ ≠ ⊤ →\\n        (∀ᵐ (a : α) ∂μ, Filter.Tendsto (fun n => F n a) l (nhds (f a))) →\\n          Filter.Tendsto (fun n => ∫⁻ (a : α), F n a ∂μ) l (nhds (∫⁻ (a : α), f a ∂μ))\",\n  \"isProp\": true,\n  \"docString\":\n  \"Dominated convergence theorem for filters with a countable basis \"},\n {\"theorem\":\n  \"∀ {ι : Type w} [inst : DecidableEq ι] [inst_1 : Fintype ι] (K : Type u) {L : Type v} [inst_2 : Field K]\\n  [inst_3 : Field L] [inst_4 : Algebra K L] [inst_5 : Module.Finite K L] [inst_6 : IsSeparable K L] (b : Basis ι K L),\\n  IsUnit (Algebra.discr K ↑b)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Over a field, if `b` is a basis, then `Algebra.discr K b` is a unit. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : PseudoMetricSpace α] (s : Set α), UniformContinuous fun x => Metric.infNndist x s\",\n  \"isProp\": true,\n  \"docString\":\n  \"The minimal distance to a set (as `ℝ≥0`) is uniformly continuous in point \"},\n {\"theorem\":\n  \"∀ {R : Type u} [inst : Ring R] {Γ₀ : Type v} [inst_1 : LinearOrderedCommGroupWithZero Γ₀] (v : Valuation R Γ₀),\\n  RingSubgroupsBasis fun γ => Valuation.ltAddSubgroup v γ\",\n  \"isProp\": true,\n  \"docString\":\n  \"The basis of open subgroups for the topology on a ring determined by a valuation. \"},\n {\"theorem\":\n  \"∀ {R : Type u_1} {𝕜 : Type u_2} [inst : NonUnitalNonAssocRing R] [inst_1 : LinearOrderedField 𝕜]\\n  [inst_2 : TopologicalSpace R] [inst_3 : TopologicalAddGroup R] (norm : R → 𝕜),\\n  (∀ (x : R), 0 ≤ norm x) →\\n    (∀ (x y : R), norm (x * y) ≤ norm x * norm y) →\\n      (Filter.HasBasis (nhds 0) (fun x => 0 < x) fun ε => {x | norm x < ε}) → TopologicalRing R\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a (possibly non-unital and/or non-associative) ring `R` admits a submultiplicative\\nnonnegative norm `norm : R → 𝕜`, where `𝕜` is a linear ordered field, and the open balls\\n`{ x | norm x < ε }`, `ε > 0`, form a basis of neighborhoods of zero, then `R` is a topological\\nring. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [t : TopologicalSpace α] [self : TopologicalSpace.SecondCountableTopology α],\\n  ∃ b, Set.Countable b ∧ t = TopologicalSpace.generateFrom b\",\n  \"isProp\": true,\n  \"docString\":\n  \"There exists a countable set of sets that generates the topology. \"},\n {\"theorem\":\n  \"∀ {R : Type u_1} [inst : CommRing R] [top : TopologicalSpace R] [inst_1 : TopologicalRing R] {J : Ideal R},\\n  IsAdic J ↔ (∀ (n : ℕ), IsOpen ↑(J ^ n)) ∧ ∀ (s : Set R), s ∈ nhds 0 → ∃ n, ↑(J ^ n) ⊆ s\",\n  \"isProp\": true,\n  \"docString\":\n  \"A topological ring is `J`-adic if and only if it admits the powers of `J` as a basis of\\nopen neighborhoods of zero. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {f : Filter α} {a : α} {s : Set α},\\n  a ∈ s → IsOpen s → Filter.principal s ≤ f → nhds a ≤ f\",\n  \"isProp\": true,\n  \"docString\":\n  \"To show a filter is above the neighborhood filter at `a`, it suffices to show that it is above\\nthe principal filter of some open set `s` containing `a`. \"},\n {\"theorem\":\n  \"∀ {ι : Type w} [inst : DecidableEq ι] {ι' : Type u_1} [inst_1 : Fintype ι'] [inst_2 : Fintype ι]\\n  [inst_3 : DecidableEq ι'] (K : Type u) [inst_4 : Field K] [inst_5 : NumberField K] {b : Basis ι ℚ K}\\n  {b' : Basis ι' ℚ K},\\n  (∀ (i : ι) (j : ι'), IsIntegral ℤ (Basis.toMatrix b (↑b') i j)) →\\n    (∀ (i : ι') (j : ι), IsIntegral ℤ (Basis.toMatrix b' (↑b) i j)) → Algebra.discr ℚ ↑b = Algebra.discr ℚ ↑b'\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `b` and `b'` are `ℚ`-bases of a number field `K` such that\\n`∀ i j, IsIntegral ℤ (b.toMatrix b' i j)` and `∀ i j, IsIntegral ℤ (b'.toMatrix b i j)` then\\n`discr ℚ b = discr ℚ b'`. \"}]\n", "prompt_cons": "/-- The image of a topological basis \"downstairs\" in an open quotient is a topological basis. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X] {S : Setoid X} {V : Set (Set X)},\n  TopologicalSpace.IsTopologicalBasis V →\n    IsOpenMap Quotient.mk' → TopologicalSpace.IsTopologicalBasis (Set.image Quotient.mk' '' V) :=\n\n/-- Shows that the sequence of denominators is monotone, that is `Bₙ ≤ Bₙ₊₁`. -/\ntheorem ∀ {K : Type u_1} {v : K} {n : ℕ} [inst : LinearOrderedField K] [inst_1 : FloorRing K],\n  GeneralizedContinuedFraction.denominators (GeneralizedContinuedFraction.of v) n ≤\n    GeneralizedContinuedFraction.denominators (GeneralizedContinuedFraction.of v) (n + 1) :=\n\n/-- The image of a topological basis under an open quotient map is a topological basis. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X] {Y : Type u_2} [inst_1 : TopologicalSpace Y] {π : X → Y} {V : Set (Set X)},\n  TopologicalSpace.IsTopologicalBasis V →\n    QuotientMap π → IsOpenMap π → TopologicalSpace.IsTopologicalBasis (Set.image π '' V) :=\n\n/-- If a family of sets `s` generates the topology, then intersections of finite\nsubcollections of `s` form a topological basis. -/\ntheorem ∀ {α : Type u} [t : TopologicalSpace α] {s : Set (Set α)},\n  t = TopologicalSpace.generateFrom s →\n    TopologicalSpace.IsTopologicalBasis ((fun f => ⋂₀ f) '' {f | Set.Finite f ∧ f ⊆ s}) :=\n\n/-- Open elements of `𝓤 α` form a basis of `𝓤 α`. -/\ntheorem ∀ {α : Type ua} [inst : UniformSpace α], Filter.HasBasis (uniformity α) (fun V => V ∈ uniformity α ∧ IsOpen V) id :=\n\n/-- Over a field, if `b` is a basis, then `Algebra.discr K b ≠ 0`. -/\ntheorem ∀ {ι : Type w} [inst : DecidableEq ι] [inst_1 : Fintype ι] (K : Type u) {L : Type v} [inst_2 : Field K]\n  [inst_3 : Field L] [inst_4 : Algebra K L] [inst_5 : Module.Finite K L] [inst_6 : IsSeparable K L] (b : Basis ι K L),\n  Algebra.discr K ↑b ≠ 0 :=\n\n/-- For the `I`-adic topology, the neighborhoods of zero has basis given by the powers of `I`. -/\ntheorem ∀ {R : Type u_1} [inst : CommRing R] (I : Ideal R), Filter.HasBasis (nhds 0) (fun _n => True) fun n => ↑(I ^ n) :=\n\n/-- If `a` is positive we can form a basis from only nonnegative `Set.Ioo` intervals -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LinearOrderedAddCommGroup α] [inst_2 : OrderTopology α]\n  [inst_3 : NoMaxOrder α] {a : α},\n  0 < a → Filter.HasBasis (nhds a) (fun ε => 0 < ε ∧ ε ≤ a) fun ε => Set.Ioo (a - ε) (a + ε) :=\n\n/-- Comparison test of convergence of `ℝ≥0`-valued series. -/\ntheorem ∀ {β : Type u_1} {f g : β → NNReal} {r : NNReal}, (∀ (b : β), g b ≤ f b) → HasSum f r → ∃ p, p ≤ r ∧ HasSum g p :=\n\n/-- Lebesgue dominated convergence theorem for filters with a countable basis -/\ntheorem ∀ {α : Type u_1} {E : Type u_2} {F : Type u_3} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E]\n  [inst_2 : NormedAddCommGroup F] [inst_3 : NormedSpace ℝ F] {m : MeasurableSpace α} {μ : MeasureTheory.Measure α}\n  [inst_4 : CompleteSpace F] {T : Set α → E →L[ℝ] F} {C : ℝ} (hT : MeasureTheory.DominatedFinMeasAdditive μ T C)\n  {ι : Type u_4} {l : Filter ι} [inst_5 : Filter.IsCountablyGenerated l] {fs : ι → α → E} {f : α → E} (bound : α → ℝ),\n  (∀ᶠ (n : ι) in l, MeasureTheory.AEStronglyMeasurable (fs n) μ) →\n    (∀ᶠ (n : ι) in l, ∀ᵐ (a : α) ∂μ, ‖fs n a‖ ≤ bound a) →\n      MeasureTheory.Integrable bound →\n        (∀ᵐ (a : α) ∂μ, Filter.Tendsto (fun n => fs n a) l (nhds (f a))) →\n          Filter.Tendsto (fun n => MeasureTheory.setToFun μ T hT (fs n)) l (nhds (MeasureTheory.setToFun μ T hT f)) :=\n\n/-- Open elements `s : Set (α × α)` of `𝓤 α` such that `(x, y) ∈ s ↔ (y, x) ∈ s` form a basis\nof `𝓤 α`. -/\ntheorem ∀ {α : Type ua} [inst : UniformSpace α],\n  Filter.HasBasis (uniformity α) (fun V => V ∈ uniformity α ∧ IsOpen V ∧ SymmetricRel V) id :=\n\n/-- Dominated convergence theorem for filters with a countable basis -/\ntheorem ∀ {α : Type u_2} {m : MeasurableSpace α} {μ : MeasureTheory.Measure α} {ι : Type u_1} {l : Filter ι}\n  [inst : Filter.IsCountablyGenerated l] {F : ι → α → ENNReal} {f : α → ENNReal} (bound : α → ENNReal),\n  (∀ᶠ (n : ι) in l, Measurable (F n)) →\n    (∀ᶠ (n : ι) in l, ∀ᵐ (a : α) ∂μ, F n a ≤ bound a) →\n      ∫⁻ (a : α), bound a ∂μ ≠ ⊤ →\n        (∀ᵐ (a : α) ∂μ, Filter.Tendsto (fun n => F n a) l (nhds (f a))) →\n          Filter.Tendsto (fun n => ∫⁻ (a : α), F n a ∂μ) l (nhds (∫⁻ (a : α), f a ∂μ)) :=\n\n/-- Over a field, if `b` is a basis, then `Algebra.discr K b` is a unit. -/\ntheorem ∀ {ι : Type w} [inst : DecidableEq ι] [inst_1 : Fintype ι] (K : Type u) {L : Type v} [inst_2 : Field K]\n  [inst_3 : Field L] [inst_4 : Algebra K L] [inst_5 : Module.Finite K L] [inst_6 : IsSeparable K L] (b : Basis ι K L),\n  IsUnit (Algebra.discr K ↑b) :=\n\n/-- The minimal distance to a set (as `ℝ≥0`) is uniformly continuous in point -/\ntheorem ∀ {α : Type u} [inst : PseudoMetricSpace α] (s : Set α), UniformContinuous fun x => Metric.infNndist x s :=\n\n/-- The basis of open subgroups for the topology on a ring determined by a valuation. -/\ntheorem ∀ {R : Type u} [inst : Ring R] {Γ₀ : Type v} [inst_1 : LinearOrderedCommGroupWithZero Γ₀] (v : Valuation R Γ₀),\n  RingSubgroupsBasis fun γ => Valuation.ltAddSubgroup v γ :=\n\n/-- If a (possibly non-unital and/or non-associative) ring `R` admits a submultiplicative\nnonnegative norm `norm : R → 𝕜`, where `𝕜` is a linear ordered field, and the open balls\n`{ x | norm x < ε }`, `ε > 0`, form a basis of neighborhoods of zero, then `R` is a topological\nring. -/\ntheorem ∀ {R : Type u_1} {𝕜 : Type u_2} [inst : NonUnitalNonAssocRing R] [inst_1 : LinearOrderedField 𝕜]\n  [inst_2 : TopologicalSpace R] [inst_3 : TopologicalAddGroup R] (norm : R → 𝕜),\n  (∀ (x : R), 0 ≤ norm x) →\n    (∀ (x y : R), norm (x * y) ≤ norm x * norm y) →\n      (Filter.HasBasis (nhds 0) (fun x => 0 < x) fun ε => {x | norm x < ε}) → TopologicalRing R :=\n\n/-- There exists a countable set of sets that generates the topology. -/\ntheorem ∀ {α : Type u} [t : TopologicalSpace α] [self : TopologicalSpace.SecondCountableTopology α],\n  ∃ b, Set.Countable b ∧ t = TopologicalSpace.generateFrom b :=\n\n/-- A topological ring is `J`-adic if and only if it admits the powers of `J` as a basis of\nopen neighborhoods of zero. -/\ntheorem ∀ {R : Type u_1} [inst : CommRing R] [top : TopologicalSpace R] [inst_1 : TopologicalRing R] {J : Ideal R},\n  IsAdic J ↔ (∀ (n : ℕ), IsOpen ↑(J ^ n)) ∧ ∀ (s : Set R), s ∈ nhds 0 → ∃ n, ↑(J ^ n) ⊆ s :=\n\n/-- To show a filter is above the neighborhood filter at `a`, it suffices to show that it is above\nthe principal filter of some open set `s` containing `a`. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] {f : Filter α} {a : α} {s : Set α},\n  a ∈ s → IsOpen s → Filter.principal s ≤ f → nhds a ≤ f :=\n\n/-- If `b` and `b'` are `ℚ`-bases of a number field `K` such that\n`∀ i j, IsIntegral ℤ (b.toMatrix b' i j)` and `∀ i j, IsIntegral ℤ (b'.toMatrix b i j)` then\n`discr ℚ b = discr ℚ b'`. -/\ntheorem ∀ {ι : Type w} [inst : DecidableEq ι] {ι' : Type u_1} [inst_1 : Fintype ι'] [inst_2 : Fintype ι]\n  [inst_3 : DecidableEq ι'] (K : Type u) [inst_4 : Field K] [inst_5 : NumberField K] {b : Basis ι ℚ K}\n  {b' : Basis ι' ℚ K},\n  (∀ (i : ι) (j : ι'), IsIntegral ℤ (Basis.toMatrix b (↑b') i j)) →\n    (∀ (i : ι') (j : ι), IsIntegral ℤ (Basis.toMatrix b' (↑b) i j)) → Algebra.discr ℚ ↑b = Algebra.discr ℚ ↑b' :=\n\n/-- Show that the collection `{(a,b) | a < b, a and b rational}` is a basis that generates a topology different from the lower limit topology on `ℝ`. -/\ntheorem", "choices": ["∀ {α : Type u} [inst : LinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderTopology α],\n  ¬TopologicalSpace.IsTopologicalBasis {ab | ∃ (a b : α) (ha : HasMem.Mem a ℚ) (hb : HasMem.Mem b ℚ), ab = (a, b) ∧ a < b} ", "∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LinearOrderedField α] [inst_2 : OrderTopology α],\n  TopologicalSpace.generateFrom\n    (SetOf fun s => ∃ (i j : ℚ), 0 < j - i ∧ s = Set.Ioo (i : α) (j : α)) ≠ TopologicalSpace.generateFrom (SetOf Set.Ioi) ", "∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LinearOrder α] [inst_2 : TopologicalSpace.SecondCountableTopology α],\n  TopologicalSpace.IsTopologicalBasis (SetOf fun s => ∃ (a b : ℚ), a < b ∧ s = Set.Ioo (a : α) (b : α)) ∧\n  t ≠ TopologicalSpace.generateFrom (SetOf fun b => ∃ a, b = Set.Ioi a) ", "∀ {α : Type u} [inst : LinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderTopology α] [inst_3 : DenselyOrdered α],\n  let S ", "∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LinearOrder α] [inst_2 : OrderTopology α] [inst_3 : DenseOrder α],\n  ∃ b, TopologicalSpace.IsTopologicalBasis b ∧ TopologicalSpace.generateFrom b ≠ Filter.lowerComplete α ", "∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LinearOrderedField α] [self : TopologicalSpace.SecondCountableTopology α],\n  TopologicalSpace.generateFrom\n    {s : Set α | ∃ a b : ℚ, a < b ∧ s = Set.Ioo (coe a) (coe b)} ≠\n    TopologicalSpace.generateFrom\n      {s : Set α | ∃ a b : α, a < b ∧ s = Set.Ico a b} ", "∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LinearOrderedField α] [order : OrderTopology α] [floor : FloorRing α],\n  TopologicalSpace.generateFrom {s : Set α | ∃ (a : α) (H : a < a + 1), s = Set.Ioo a (a + 1)} ≠ TopologicalSpace.generateFrom {s : Set α | ∃ a b (H : a < b) (h₁ : a ∈ ℚ) (h₂ : b ∈ ℚ), s = Set.Ioo a b} ", "∀ {α : Type u} [inst : LinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderTopology α] [inst_3 : NoMinOrder α],\n  ¬TopologicalSpace.IsTopologicalBasis (SetOf fun s => ∃ a b : α, a < b ∧ s = Set.Ioo a b) ", "∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LinearOrderedField α] [inst_2 : OrderTopology α], \n  let s ", "{α : Type u} [inst : TopologicalSpace α] [inst_1 : LinearOrder α] [inst_2 : OrderTopology α] [inst_3 : DenselyOrdered α],\n  Filter.HasBasis (Filter.principal {a b : α | a < b ∧ ∃ l H r H, a = l ∧ b = r}) (fun V => True) id "]}
{"docString": "A map `f: X → Y` is said to be an open map if for every open set `U` of `X`, the set `f(U)` is open in `Y`. Show that `π₁: X × Y → X` and `π₂: X × Y → Y` are open maps.", "prompts": "[{\"theorem\":\n  \"∀ {X : Type u} [inst : TopologicalSpace X] {ι : Type u_1} {Y : ι → Type u_2} [inst_1 : (i : ι) → TopologicalSpace (Y i)]\\n  {f₀ f₁ : (i : ι) → C(X, Y i)},\\n  (∀ (i : ι), ContinuousMap.Homotopic (f₀ i) (f₁ i)) →\\n    ContinuousMap.Homotopic (ContinuousMap.pi f₀) (ContinuousMap.pi f₁)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If each `f₀ i : C(X, Y i)` is homotopic to `f₁ i : C(X, Y i)`, then `ContinuousMap.pi f₀` is\\nhomotopic to `ContinuousMap.pi f₁`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {V : Type u_2} {V₂ : Type u_4} {P : Type u_3} {P₂ : Type u_5} [inst : NormedField 𝕜]\\n  [inst_1 : SeminormedAddCommGroup V] [inst_2 : SeminormedAddCommGroup V₂] [inst_3 : NormedSpace 𝕜 V]\\n  [inst_4 : NormedSpace 𝕜 V₂] [inst_5 : PseudoMetricSpace P] [inst_6 : PseudoMetricSpace P₂]\\n  [inst_7 : NormedAddTorsor V P] [inst_8 : NormedAddTorsor V₂ P₂] {f : P →ᵃ[𝕜] P₂}, IsOpenMap ↑f.linear ↔ IsOpenMap ↑f\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` is an affine map, then its linear part is an open map iff `f` is an open map. \"},\n {\"theorem\":\n  \"∀ {X Y S : TopCat} {f : X ⟶ S} {g : Y ⟶ S},\\n  OpenEmbedding ↑f →\\n    OpenEmbedding ↑g →\\n      OpenEmbedding\\n        ↑(CategoryTheory.Limits.limit.π (CategoryTheory.Limits.cospan f g) CategoryTheory.Limits.WalkingCospan.one)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `X ⟶ S`, `Y ⟶ S` are open embeddings, then so is `X ×ₛ Y ⟶ S`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u} [hnorm : NontriviallyNormedField 𝕜] {E : Type v} [inst : AddCommGroup E] [inst_1 : Module 𝕜 E]\\n  [inst_2 : TopologicalSpace E] [inst_3 : TopologicalAddGroup E] [inst_4 : ContinuousSMul 𝕜 E] {F : Type w}\\n  [inst_5 : AddCommGroup F] [inst_6 : Module 𝕜 F] [inst_7 : TopologicalSpace F] [inst_8 : TopologicalAddGroup F]\\n  [inst_9 : ContinuousSMul 𝕜 F] [inst_10 : CompleteSpace 𝕜] [inst_11 : T2Space E] [inst_12 : FiniteDimensional 𝕜 E]\\n  (f : F →ₗ[𝕜] E), Function.Surjective ↑f → IsOpenMap ↑f\",\n  \"isProp\": true,\n  \"docString\":\n  \"A surjective linear map `f` with finite dimensional codomain is an open map. \"},\n {\"theorem\":\n  \"∀ {ι : Type u_2} {π : ι → Type u_3} [inst : (i : ι) → TopologicalSpace (π i)] {X : Type u_1} (f : (i : ι) → X → π i),\\n  Inducing fun x i => f i x\",\n  \"isProp\": true,\n  \"docString\":\n  \"Suppose `π i` is a family of topological spaces indexed by `i : ι`, and `X` is a type\\nendowed with a family of maps `f i : X → π i` for every `i : ι`, hence inducing a\\nmap `g : X → Π i, π i`. This lemma shows that infimum of the topologies on `X` induced by\\nthe `f i` as `i : ι` varies is simply the topology on `X` induced by `g : X → Π i, π i`\\nwhere `Π i, π i` is endowed with the usual product topology. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {β : Type u_2} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] {f : α → β},\\n  IsOpenMap f → Continuous f → Function.Surjective f → QuotientMap f\",\n  \"isProp\": true,\n  \"docString\": \"A continuous surjective open map is a quotient map. \"},\n {\"theorem\":\n  \"∀ {P : CategoryTheory.MorphismProperty AlgebraicGeometry.Scheme},\\n  AlgebraicGeometry.PropertyIsLocalAtTarget P →\\n    ∀ {X Y : AlgebraicGeometry.Scheme} (f : X ⟶ Y) (𝒰 : AlgebraicGeometry.Scheme.OpenCover Y),\\n      (∀ (i : 𝒰.J), P CategoryTheory.Limits.pullback.snd) → P f\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `P` holds for `f ∣_ U` for an open cover `U` of `Y`, then `P` holds for `f`.  \"},\n {\"theorem\":\n  \"∀ {X Y Z : Type u} (f g : X ⟶ Y) (π : Y ⟶ Z)\\n  (e : CategoryTheory.CategoryStruct.comp f π = CategoryTheory.CategoryStruct.comp g π),\\n  CategoryTheory.Limits.IsColimit (CategoryTheory.Limits.Cofork.ofπ π e) →\\n    ∀ (U : Set Y), f ⁻¹' U = g ⁻¹' U → π ⁻¹' (π '' U) = U\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `π : Y ⟶ Z` is an equalizer for `(f, g)`, and `U ⊆ Y` such that `f ⁻¹' U = g ⁻¹' U`,\\nthen `π ⁻¹' (π '' U) = U`.\\n\"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {β : Type u_2} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] {s : Set α} {t : Set β}\\n  {f : α → β}, Set.MapsTo f s t → Continuous f → IsClosed t → Set.MapsTo f (closure s) t\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a continuous map `f` maps `s` to a closed set `t`, then it maps `closure s` to `t`. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : CompactSpace X] {Y : Type u_2} [inst_2 : TopologicalSpace Y],\\n  IsClosedMap Prod.snd\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `X` is a compact topological space, then `Prod.snd : X × Y → Y` is a closed map. \"},\n {\"theorem\":\n  \"∀ {G : Type u_1} [inst : MeasurableSpace G] [inst_1 : Group G] [inst_2 : MeasurableMul₂ G]\\n  (μ ν : MeasureTheory.Measure G) [inst_3 : MeasureTheory.SigmaFinite ν] [inst_4 : MeasureTheory.SigmaFinite μ]\\n  [inst_5 : MeasureTheory.Measure.IsMulRightInvariant μ],\\n  MeasureTheory.MeasurePreserving fun z => (z.fst * z.snd, z.snd)\",\n  \"isProp\": true,\n  \"docString\": \"The map `(x, y) ↦ (xy, y)` preserves the measure `μ × ν`. \"},\n {\"theorem\":\n  \"∀ {X : Type u_2} {Y : Type u_1} {β : Type u_3} [inst : TopologicalSpace X] [inst_1 : PolishSpace X]\\n  [inst_2 : MeasurableSpace X] [inst : BorelSpace X] [inst : TopologicalSpace Y] [inst_3 : T2Space Y]\\n  [inst_4 : MeasurableSpace Y] [inst_5 : OpensMeasurableSpace Y] [inst_6 : MeasurableSpace β]\\n  [inst : TopologicalSpace.SecondCountableTopology Y] {f : X → Y},\\n  Measurable f → Function.Surjective f → ∀ {g : Y → β}, Measurable (g ∘ f) ↔ Measurable g\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f : X → Y` is a surjective Borel measurable map from a Polish space to a topological space\\nwith second countable topology, then for any measurable space `α` and `g : Y → α`, the composition\\n`g ∘ f` is measurable if and only if `g` is measurable. \"},\n {\"theorem\":\n  \"∀ {ι : Type u_3} {R : Type u_1} {M : ι → Type u_2} {N : Type u_4} [dec_ι : DecidableEq ι] [inst : Semiring R]\\n  [inst_1 : (i : ι) → AddCommMonoid (M i)] [inst_2 : (i : ι) → Module R (M i)] [inst_3 : AddCommMonoid N]\\n  [inst_4 : Module R N] ⦃φ ψ : (Π₀ (i : ι), M i) →ₗ[R] N⦄,\\n  (∀ (i : ι) (x : M i), ↑φ (DFinsupp.single i x) = ↑ψ (DFinsupp.single i x)) → φ = ψ\",\n  \"isProp\": true,\n  \"docString\":\n  \"Two `R`-linear maps from `Π₀ i, M i` which agree on each `single i x` agree everywhere. \"},\n {\"theorem\":\n  \"∀ {Γ : Type u_1} [inst : Group Γ] {T : Type u_2} [inst_1 : TopologicalSpace T] [inst_2 : MulAction Γ T]\\n  [inst_3 : ContinuousConstSMul Γ T], IsOpenMap Quotient.mk'\",\n  \"isProp\": true,\n  \"docString\":\n  \"The quotient map by a group action is open, i.e. the quotient by a group action is an open\\nquotient. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_2} [inst : NontriviallyNormedField 𝕜] {E : Type uE} [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] {F : Type uF} [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] {n : ℕ∞}\\n  {E' : Type u_1} [inst_5 : NormedAddCommGroup E'] [inst_6 : NormedSpace 𝕜 E'] {F' : Type u_3}\\n  [inst_7 : NormedAddCommGroup F'] [inst_8 : NormedSpace 𝕜 F'] {s : Set E} {t : Set E'} {f : E → F} {g : E' → F'},\\n  ContDiffOn 𝕜 n f s → ContDiffOn 𝕜 n g t → ContDiffOn 𝕜 n (Prod.map f g) (s ×ˢ t)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The product map of two `C^n` functions on a set is `C^n` on the product set. \"},\n {\"theorem\":\n  \"∀ {C : Type u} [inst : CategoryTheory.Category C] [inst_1 : CategoryTheory.Abelian C] {P Q : C} (f : P ⟶ Q),\\n  CategoryTheory.Epi (CategoryTheory.Abelian.factorThruImage f)\",\n  \"isProp\": true,\n  \"docString\": \"The map `p : P ⟶ image f` is an epimorphism \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {U : Set E} {g : E → ℂ},\\n  AnalyticOn ℂ g U →\\n    IsPreconnected U → (∃ w, ∀ (z : E), z ∈ U → g z = w) ∨ ∀ (s : Set E), s ⊆ U → IsOpen s → IsOpen (g '' s)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The *open mapping theorem* for holomorphic functions, global version: if a function `g : E → ℂ`\\nis analytic on a connected set `U`, then either it is constant on `U`, or it is open on `U` (in the\\nsense that it maps any open set contained in `U` to an open set in `ℂ`). \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} (f : α → β) (g : β → α),\\n  Set.InvOn f g (Function.fixedPoints (f ∘ g)) (Function.fixedPoints (g ∘ f))\",\n  \"isProp\": true,\n  \"docString\":\n  \"Any two maps `f : α → β` and `g : β → α` are inverse of each other on the sets of fixed points\\nof `f ∘ g` and `g ∘ f`, respectively. \"},\n {\"theorem\":\n  \"∀ {Γ : Type u_1} [inst : AddGroup Γ] {T : Type u_2} [inst_1 : TopologicalSpace T] [inst_2 : AddAction Γ T]\\n  [inst_3 : ContinuousConstVAdd Γ T], IsOpenMap Quotient.mk'\",\n  \"isProp\": true,\n  \"docString\":\n  \"The quotient map by a group action is open, i.e. the quotient by a group\\naction is an open quotient. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β], IsOpenMap Prod.snd\",\n  \"isProp\": true,\n  \"docString\":\n  \"The second projection in a product of topological spaces sends open sets to open sets. \"}]\n", "prompt_cons": "/-- If each `f₀ i : C(X, Y i)` is homotopic to `f₁ i : C(X, Y i)`, then `ContinuousMap.pi f₀` is\nhomotopic to `ContinuousMap.pi f₁`. -/\ntheorem ∀ {X : Type u} [inst : TopologicalSpace X] {ι : Type u_1} {Y : ι → Type u_2} [inst_1 : (i : ι) → TopologicalSpace (Y i)]\n  {f₀ f₁ : (i : ι) → C(X, Y i)},\n  (∀ (i : ι), ContinuousMap.Homotopic (f₀ i) (f₁ i)) →\n    ContinuousMap.Homotopic (ContinuousMap.pi f₀) (ContinuousMap.pi f₁) :=\n\n/-- If `f` is an affine map, then its linear part is an open map iff `f` is an open map. -/\ntheorem ∀ {𝕜 : Type u_1} {V : Type u_2} {V₂ : Type u_4} {P : Type u_3} {P₂ : Type u_5} [inst : NormedField 𝕜]\n  [inst_1 : SeminormedAddCommGroup V] [inst_2 : SeminormedAddCommGroup V₂] [inst_3 : NormedSpace 𝕜 V]\n  [inst_4 : NormedSpace 𝕜 V₂] [inst_5 : PseudoMetricSpace P] [inst_6 : PseudoMetricSpace P₂]\n  [inst_7 : NormedAddTorsor V P] [inst_8 : NormedAddTorsor V₂ P₂] {f : P →ᵃ[𝕜] P₂}, IsOpenMap ↑f.linear ↔ IsOpenMap ↑f :=\n\n/-- If `X ⟶ S`, `Y ⟶ S` are open embeddings, then so is `X ×ₛ Y ⟶ S`. -/\ntheorem ∀ {X Y S : TopCat} {f : X ⟶ S} {g : Y ⟶ S},\n  OpenEmbedding ↑f →\n    OpenEmbedding ↑g →\n      OpenEmbedding\n        ↑(CategoryTheory.Limits.limit.π (CategoryTheory.Limits.cospan f g) CategoryTheory.Limits.WalkingCospan.one) :=\n\n/-- A surjective linear map `f` with finite dimensional codomain is an open map. -/\ntheorem ∀ {𝕜 : Type u} [hnorm : NontriviallyNormedField 𝕜] {E : Type v} [inst : AddCommGroup E] [inst_1 : Module 𝕜 E]\n  [inst_2 : TopologicalSpace E] [inst_3 : TopologicalAddGroup E] [inst_4 : ContinuousSMul 𝕜 E] {F : Type w}\n  [inst_5 : AddCommGroup F] [inst_6 : Module 𝕜 F] [inst_7 : TopologicalSpace F] [inst_8 : TopologicalAddGroup F]\n  [inst_9 : ContinuousSMul 𝕜 F] [inst_10 : CompleteSpace 𝕜] [inst_11 : T2Space E] [inst_12 : FiniteDimensional 𝕜 E]\n  (f : F →ₗ[𝕜] E), Function.Surjective ↑f → IsOpenMap ↑f :=\n\n/-- Suppose `π i` is a family of topological spaces indexed by `i : ι`, and `X` is a type\nendowed with a family of maps `f i : X → π i` for every `i : ι`, hence inducing a\nmap `g : X → Π i, π i`. This lemma shows that infimum of the topologies on `X` induced by\nthe `f i` as `i : ι` varies is simply the topology on `X` induced by `g : X → Π i, π i`\nwhere `Π i, π i` is endowed with the usual product topology. -/\ntheorem ∀ {ι : Type u_2} {π : ι → Type u_3} [inst : (i : ι) → TopologicalSpace (π i)] {X : Type u_1} (f : (i : ι) → X → π i),\n  Inducing fun x i => f i x :=\n\n/-- A continuous surjective open map is a quotient map. -/\ntheorem ∀ {α : Type u_1} {β : Type u_2} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] {f : α → β},\n  IsOpenMap f → Continuous f → Function.Surjective f → QuotientMap f :=\n\n/-- If `P` holds for `f ∣_ U` for an open cover `U` of `Y`, then `P` holds for `f`. -/\ntheorem ∀ {P : CategoryTheory.MorphismProperty AlgebraicGeometry.Scheme},\n  AlgebraicGeometry.PropertyIsLocalAtTarget P →\n    ∀ {X Y : AlgebraicGeometry.Scheme} (f : X ⟶ Y) (𝒰 : AlgebraicGeometry.Scheme.OpenCover Y),\n      (∀ (i : 𝒰.J), P CategoryTheory.Limits.pullback.snd) → P f :=\n\n/-- If `π : Y ⟶ Z` is an equalizer for `(f, g)`, and `U ⊆ Y` such that `f ⁻¹' U = g ⁻¹' U`,\nthen `π ⁻¹' (π '' U) = U`. -/\ntheorem ∀ {X Y Z : Type u} (f g : X ⟶ Y) (π : Y ⟶ Z)\n  (e : CategoryTheory.CategoryStruct.comp f π = CategoryTheory.CategoryStruct.comp g π),\n  CategoryTheory.Limits.IsColimit (CategoryTheory.Limits.Cofork.ofπ π e) →\n    ∀ (U : Set Y), f ⁻¹' U = g ⁻¹' U → π ⁻¹' (π '' U) = U :=\n\n/-- If a continuous map `f` maps `s` to a closed set `t`, then it maps `closure s` to `t`. -/\ntheorem ∀ {α : Type u_1} {β : Type u_2} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] {s : Set α} {t : Set β}\n  {f : α → β}, Set.MapsTo f s t → Continuous f → IsClosed t → Set.MapsTo f (closure s) t :=\n\n/-- If `X` is a compact topological space, then `Prod.snd : X × Y → Y` is a closed map. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : CompactSpace X] {Y : Type u_2} [inst_2 : TopologicalSpace Y],\n  IsClosedMap Prod.snd :=\n\n/-- The map `(x, y) ↦ (xy, y)` preserves the measure `μ × ν`. -/\ntheorem ∀ {G : Type u_1} [inst : MeasurableSpace G] [inst_1 : Group G] [inst_2 : MeasurableMul₂ G]\n  (μ ν : MeasureTheory.Measure G) [inst_3 : MeasureTheory.SigmaFinite ν] [inst_4 : MeasureTheory.SigmaFinite μ]\n  [inst_5 : MeasureTheory.Measure.IsMulRightInvariant μ],\n  MeasureTheory.MeasurePreserving fun z => (z.fst * z.snd, z.snd) :=\n\n/-- If `f : X → Y` is a surjective Borel measurable map from a Polish space to a topological space\nwith second countable topology, then for any measurable space `α` and `g : Y → α`, the composition\n`g ∘ f` is measurable if and only if `g` is measurable. -/\ntheorem ∀ {X : Type u_2} {Y : Type u_1} {β : Type u_3} [inst : TopologicalSpace X] [inst_1 : PolishSpace X]\n  [inst_2 : MeasurableSpace X] [inst : BorelSpace X] [inst : TopologicalSpace Y] [inst_3 : T2Space Y]\n  [inst_4 : MeasurableSpace Y] [inst_5 : OpensMeasurableSpace Y] [inst_6 : MeasurableSpace β]\n  [inst : TopologicalSpace.SecondCountableTopology Y] {f : X → Y},\n  Measurable f → Function.Surjective f → ∀ {g : Y → β}, Measurable (g ∘ f) ↔ Measurable g :=\n\n/-- Two `R`-linear maps from `Π₀ i, M i` which agree on each `single i x` agree everywhere. -/\ntheorem ∀ {ι : Type u_3} {R : Type u_1} {M : ι → Type u_2} {N : Type u_4} [dec_ι : DecidableEq ι] [inst : Semiring R]\n  [inst_1 : (i : ι) → AddCommMonoid (M i)] [inst_2 : (i : ι) → Module R (M i)] [inst_3 : AddCommMonoid N]\n  [inst_4 : Module R N] ⦃φ ψ : (Π₀ (i : ι), M i) →ₗ[R] N⦄,\n  (∀ (i : ι) (x : M i), ↑φ (DFinsupp.single i x) = ↑ψ (DFinsupp.single i x)) → φ = ψ :=\n\n/-- The quotient map by a group action is open, i.e. the quotient by a group action is an open\nquotient. -/\ntheorem ∀ {Γ : Type u_1} [inst : Group Γ] {T : Type u_2} [inst_1 : TopologicalSpace T] [inst_2 : MulAction Γ T]\n  [inst_3 : ContinuousConstSMul Γ T], IsOpenMap Quotient.mk' :=\n\n/-- The product map of two `C^n` functions on a set is `C^n` on the product set. -/\ntheorem ∀ {𝕜 : Type u_2} [inst : NontriviallyNormedField 𝕜] {E : Type uE} [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E] {F : Type uF} [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] {n : ℕ∞}\n  {E' : Type u_1} [inst_5 : NormedAddCommGroup E'] [inst_6 : NormedSpace 𝕜 E'] {F' : Type u_3}\n  [inst_7 : NormedAddCommGroup F'] [inst_8 : NormedSpace 𝕜 F'] {s : Set E} {t : Set E'} {f : E → F} {g : E' → F'},\n  ContDiffOn 𝕜 n f s → ContDiffOn 𝕜 n g t → ContDiffOn 𝕜 n (Prod.map f g) (s ×ˢ t) :=\n\n/-- The map `p : P ⟶ image f` is an epimorphism -/\ntheorem ∀ {C : Type u} [inst : CategoryTheory.Category C] [inst_1 : CategoryTheory.Abelian C] {P Q : C} (f : P ⟶ Q),\n  CategoryTheory.Epi (CategoryTheory.Abelian.factorThruImage f) :=\n\n/-- The *open mapping theorem* for holomorphic functions, global version: if a function `g : E → ℂ`\nis analytic on a connected set `U`, then either it is constant on `U`, or it is open on `U` (in the\nsense that it maps any open set contained in `U` to an open set in `ℂ`). -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {U : Set E} {g : E → ℂ},\n  AnalyticOn ℂ g U →\n    IsPreconnected U → (∃ w, ∀ (z : E), z ∈ U → g z = w) ∨ ∀ (s : Set E), s ⊆ U → IsOpen s → IsOpen (g '' s) :=\n\n/-- Any two maps `f : α → β` and `g : β → α` are inverse of each other on the sets of fixed points\nof `f ∘ g` and `g ∘ f`, respectively. -/\ntheorem ∀ {α : Type u} {β : Type v} (f : α → β) (g : β → α),\n  Set.InvOn f g (Function.fixedPoints (f ∘ g)) (Function.fixedPoints (g ∘ f)) :=\n\n/-- The quotient map by a group action is open, i.e. the quotient by a group\naction is an open quotient. -/\ntheorem ∀ {Γ : Type u_1} [inst : AddGroup Γ] {T : Type u_2} [inst_1 : TopologicalSpace T] [inst_2 : AddAction Γ T]\n  [inst_3 : ContinuousConstVAdd Γ T], IsOpenMap Quotient.mk' :=\n\n/-- The second projection in a product of topological spaces sends open sets to open sets. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β], IsOpenMap Prod.snd :=\n\n/-- A map `f: X → Y` is said to be an open map if for every open set `U` of `X`, the set `f(U)` is open in `Y`. Show that `π₁: X × Y → X` and `π₂: X × Y → Y` are open maps. -/\ntheorem", "choices": ["{X Y : Type u} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y],\n  IsOpenMap Prod.fst ∧ IsOpenMap Prod.snd ", "∀ {X Y : Type u} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y],\n  IsOpenMap Prod.fst ∧ IsOpenMap Prod.snd ", "∀ {X Y : Type u} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y],\n  IsOpenMap Prod.fst ∧ IsOpenMap Prod.snd ", "∀ {X : Type u} {Y : Type v} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y], IsOpenMap Prod.fst ", "∀ {X Y : Type u} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y], IsOpenMap Prod.fst ", "forall {X Y : Type u} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y], IsOpenMap Prod.fst ∧ IsOpenMap Prod.snd ", "∀ {X Y : Type u} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y], IsOpenMap Prod.fst ", "∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β],\n  IsOpenMap Prod.fst ∧ IsOpenMap Prod.snd ", "∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β], IsOpenMap Prod.fst ", "{X Y : Type u} [TopologicalSpace X] [TopologicalSpace Y],\nIsOpenMap Prod.fst ∧ IsOpenMap Prod.snd "]}
{"docString": "Show that if `U` is open in `X` and `A` is closed in `X`, then `U - A` is open in `X`, and `A - U` is closed in `X`.", "prompts": "[{\"theorem\":\n  \"∀ {M : Type u_1} [inst : TopologicalSpace M] [inst_1 : AddMonoid M] [inst_2 : ContinuousAdd M] {U : Set M},\\n  U ∈ nhds 0 → ∃ V, IsOpen V ∧ 0 ∈ V ∧ V + V ⊆ U\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given an open neighborhood `U` of `0` there is an open neighborhood `V` of `0`\\nsuch that `V + V ⊆ U`.\"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {S U Z : Set α},\\n  IsPreirreducible Z → Set.Nonempty U → IsOpen U → U ⊆ S → S ⊆ Z → IsIrreducible S\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `∅ ≠ U ⊆ S ⊆ Z` such that `U` is open and `Z` is preirreducible, then `S` is irreducible. \"},\n {\"theorem\":\n  \"∀ {M : Type u_1} [inst : TopologicalSpace M] [inst_1 : Monoid M] [inst_2 : ContinuousMul M] {U : Set M},\\n  U ∈ nhds 1 → ∃ V, IsOpen V ∧ 1 ∈ V ∧ V * V ⊆ U\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given a neighborhood `U` of `1` there is an open neighborhood `V` of `1`\\nsuch that `VV ⊆ U`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {s U : Set α},\\n  (∀ (x : α), x ∈ s → U ∈ nhds x) → ∃ V, s ⊆ V ∧ IsOpen V ∧ V ⊆ U\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `U` is a neighborhood of each point of a set `s` then it is a neighborhood of `s`:\\nit contains an open set containing `s`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {s U : Set α},\\n  U ∈ ⨆ (x : α) (_ : x ∈ s), nhds x → ∃ V, s ⊆ V ∧ IsOpen V ∧ V ⊆ U\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `U` is a neighborhood of each point of a set `s` then it is a neighborhood of s:\\nit contains an open set containing `s`. \"},\n {\"theorem\":\n  \"∀ {G : Type w} [inst : TopologicalSpace G] [inst_1 : AddZeroClass G] [inst_2 : ContinuousAdd G] {K U : Set G},\\n  IsCompact K → IsOpen U → K ⊆ U → ∃ V, V ∈ nhds 0 ∧ K + V ⊆ U\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given a compact set `K` inside an open set `U`, there is an open neighborhood `V` of\\n`0` such that `K + V ⊆ U`.\"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : T3Space α] {x y : α},\\n  x ≠ y →\\n    ∃ U₁,\\n      U₁ ∈ nhds x ∧\\n        ∃ V₁,\\n          V₁ ∈ nhds x ∧\\n            ∃ U₂,\\n              U₂ ∈ nhds y ∧\\n                ∃ V₂,\\n                  V₂ ∈ nhds y ∧ IsClosed V₁ ∧ IsClosed V₂ ∧ IsOpen U₁ ∧ IsOpen U₂ ∧ V₁ ⊆ U₁ ∧ V₂ ⊆ U₂ ∧ Disjoint U₁ U₂\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given two points `x ≠ y`, we can find neighbourhoods `x ∈ V₁ ⊆ U₁` and `y ∈ V₂ ⊆ U₂`,\\nwith the `Vₖ` closed and the `Uₖ` open, such that the `Uₖ` are disjoint. \"},\n {\"theorem\":\n  \"∀ {G : Type w} [inst : TopologicalSpace G] [inst_1 : AddZeroClass G] [inst_2 : ContinuousAdd G] {K U : Set G},\\n  IsCompact K → IsOpen U → K ⊆ U → ∃ V, V ∈ nhds 0 ∧ V + K ⊆ U\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given a compact set `K` inside an open set `U`, there is an open neighborhood `V` of\\n`0` such that `V + K ⊆ U`.\"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : T2Space α] {s : Set α},\\n  IsCompact s →\\n    ∀ {ι : Type u_1} (t : Finset ι) (U : ι → Set α),\\n      (∀ (i : ι), i ∈ t → IsOpen (U i)) →\\n        s ⊆ ⋃ (i : ι) (_ : i ∈ t), U i →\\n          ∃ K, (∀ (i : ι), IsCompact (K i)) ∧ (∀ (i : ι), K i ⊆ U i) ∧ s = ⋃ (i : ι) (_ : i ∈ t), K i\",\n  \"isProp\": true,\n  \"docString\":\n  \"For every finite open cover `Uᵢ` of a compact set, there exists a compact cover `Kᵢ ⊆ Uᵢ`. \"},\n {\"theorem\":\n  \"∀ {G : Type w} [inst : TopologicalSpace G] [inst_1 : MulOneClass G] [inst_2 : ContinuousMul G] {K U : Set G},\\n  IsCompact K → IsOpen U → K ⊆ U → ∃ V, V ∈ nhds 1 ∧ V * K ⊆ U\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given a compact set `K` inside an open set `U`, there is an open neighborhood `V` of `1`\\nsuch that `V * K ⊆ U`. \"},\n {\"theorem\":\n  \"∀ {G : Type w} [inst : TopologicalSpace G] [inst_1 : MulOneClass G] [inst_2 : ContinuousMul G] {K U : Set G},\\n  IsCompact K → IsOpen U → K ⊆ U → ∃ V, V ∈ nhds 1 ∧ K * V ⊆ U\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given a compact set `K` inside an open set `U`, there is an open neighborhood `V` of `1`\\nsuch that `K * V ⊆ U`. \"},\n {\"theorem\":\n  \"∀ {P : CategoryTheory.MorphismProperty AlgebraicGeometry.Scheme},\\n  AlgebraicGeometry.PropertyIsLocalAtTarget P →\\n    ∀ {X Y : AlgebraicGeometry.Scheme} (f : X ⟶ Y) (𝒰 : AlgebraicGeometry.Scheme.OpenCover Y),\\n      (∀ (i : 𝒰.J), P CategoryTheory.Limits.pullback.snd) → P f\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `P` holds for `f ∣_ U` for an open cover `U` of `Y`, then `P` holds for `f`.  \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X],\\n  (Pairwise fun x y => ∃ U, IsClopen U ∧ x ∈ U ∧ ¬y ∈ U) → IsTotallyDisconnected Set.univ\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `X` be a topological space, and suppose that for all distinct `x,y ∈ X`, there\\nis some clopen set `U` such that `x ∈ U` and `y ∉ U`. Then `X` is totally disconnected. \"},\n {\"theorem\":\n  \"∀ {P : CategoryTheory.MorphismProperty AlgebraicGeometry.Scheme},\\n  AlgebraicGeometry.PropertyIsLocalAtTarget P →\\n    ∀ {X Y : AlgebraicGeometry.Scheme} (f : X ⟶ Y) (U : TopologicalSpace.Opens ↑↑Y.toPresheafedSpace), P f → P (f ∣_ U)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `P` holds for `f : X ⟶ Y`, then `P` holds for `f ∣_ U` for any `U`. \"},\n {\"theorem\":\n  \"∀ {ι : Type u} {X : Type v} [inst : TopologicalSpace X] {s : Set X} [inst_1 : NormalSpace X]\\n  [inst_2 : ParacompactSpace X],\\n  IsClosed s →\\n    ∀ (U : ι → Set X), (∀ (i : ι), IsOpen (U i)) → s ⊆ ⋃ (i : ι), U i → ∃ f, PartitionOfUnity.IsSubordinate f U\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `X` is a paracompact normal topological space and `U` is an open covering of a closed set\\n`s`, then there exists a `PartitionOfUnity ι X s` that is subordinate to `U`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] [inst_2 : T2Space α] {K U : Set α},\\n  IsCompact K → IsOpen U → K ⊆ U → ∃ V, IsOpen V ∧ K ⊆ V ∧ closure V ⊆ U ∧ IsCompact (closure V)\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a locally compact T₂ space, given a compact set `K` inside an open set `U`, we can find a\\nopen set `V` between these sets with compact closure: `K ⊆ V` and the closure of `V` is inside `U`.\\n\"},\n {\"theorem\":\n  \"∀ {X : TopCat} {ι : Type w} (U : ι → TopologicalSpace.Opens ↑X),\\n  CategoryTheory.Functor.Final (TopCat.Presheaf.SheafCondition.pairwiseToOpensLeCover U)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The diagram consisting of the `U i` and `U i ⊓ U j` is cofinal in the diagram\\nof all opens contained in some `U i`.\\n\"},\n {\"theorem\":\n  \"∀ {X Y S : TopCat} {f : X ⟶ S} {g : Y ⟶ S},\\n  OpenEmbedding ↑f →\\n    OpenEmbedding ↑g →\\n      OpenEmbedding\\n        ↑(CategoryTheory.Limits.limit.π (CategoryTheory.Limits.cospan f g) CategoryTheory.Limits.WalkingCospan.one)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `X ⟶ S`, `Y ⟶ S` are open embeddings, then so is `X ×ₛ Y ⟶ S`. \"},\n {\"theorem\":\n  \"∀ {ι : Type u} {X : Type v} [inst : TopologicalSpace X] {s : Set X} [inst_1 : NormalSpace X]\\n  [inst_2 : ParacompactSpace X],\\n  IsClosed s → ∀ (U : ι → Set X), (∀ (i : ι), IsOpen (U i)) → s ⊆ ⋃ (i : ι), U i → ∃ f, BumpCovering.IsSubordinate f U\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `X` is a paracompact normal topological space and `U` is an open covering of a closed set\\n`s`, then there exists a `BumpCovering ι X s` that is subordinate to `U`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] {C : Set α} {x : α} {U : Set α},\\n  AccPt x (Filter.principal C) → U ∈ nhds x → AccPt x (Filter.principal (U ∩ C))\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `x` is an accumulation point of a set `C` and `U` is a neighborhood of `x`,\\nthen `x` is an accumulation point of `U ∩ C`. \"}]\n", "prompt_cons": "/-- Given an open neighborhood `U` of `0` there is an open neighborhood `V` of `0`\nsuch that `V + V ⊆ U`. -/\ntheorem ∀ {M : Type u_1} [inst : TopologicalSpace M] [inst_1 : AddMonoid M] [inst_2 : ContinuousAdd M] {U : Set M},\n  U ∈ nhds 0 → ∃ V, IsOpen V ∧ 0 ∈ V ∧ V + V ⊆ U :=\n\n/-- If `∅ ≠ U ⊆ S ⊆ Z` such that `U` is open and `Z` is preirreducible, then `S` is irreducible. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] {S U Z : Set α},\n  IsPreirreducible Z → Set.Nonempty U → IsOpen U → U ⊆ S → S ⊆ Z → IsIrreducible S :=\n\n/-- Given a neighborhood `U` of `1` there is an open neighborhood `V` of `1`\nsuch that `VV ⊆ U`. -/\ntheorem ∀ {M : Type u_1} [inst : TopologicalSpace M] [inst_1 : Monoid M] [inst_2 : ContinuousMul M] {U : Set M},\n  U ∈ nhds 1 → ∃ V, IsOpen V ∧ 1 ∈ V ∧ V * V ⊆ U :=\n\n/-- If `U` is a neighborhood of each point of a set `s` then it is a neighborhood of `s`:\nit contains an open set containing `s`. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] {s U : Set α},\n  (∀ (x : α), x ∈ s → U ∈ nhds x) → ∃ V, s ⊆ V ∧ IsOpen V ∧ V ⊆ U :=\n\n/-- If `U` is a neighborhood of each point of a set `s` then it is a neighborhood of s:\nit contains an open set containing `s`. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] {s U : Set α},\n  U ∈ ⨆ (x : α) (_ : x ∈ s), nhds x → ∃ V, s ⊆ V ∧ IsOpen V ∧ V ⊆ U :=\n\n/-- Given a compact set `K` inside an open set `U`, there is an open neighborhood `V` of\n`0` such that `K + V ⊆ U`. -/\ntheorem ∀ {G : Type w} [inst : TopologicalSpace G] [inst_1 : AddZeroClass G] [inst_2 : ContinuousAdd G] {K U : Set G},\n  IsCompact K → IsOpen U → K ⊆ U → ∃ V, V ∈ nhds 0 ∧ K + V ⊆ U :=\n\n/-- Given two points `x ≠ y`, we can find neighbourhoods `x ∈ V₁ ⊆ U₁` and `y ∈ V₂ ⊆ U₂`,\nwith the `Vₖ` closed and the `Uₖ` open, such that the `Uₖ` are disjoint. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : T3Space α] {x y : α},\n  x ≠ y →\n    ∃ U₁,\n      U₁ ∈ nhds x ∧\n        ∃ V₁,\n          V₁ ∈ nhds x ∧\n            ∃ U₂,\n              U₂ ∈ nhds y ∧\n                ∃ V₂,\n                  V₂ ∈ nhds y ∧ IsClosed V₁ ∧ IsClosed V₂ ∧ IsOpen U₁ ∧ IsOpen U₂ ∧ V₁ ⊆ U₁ ∧ V₂ ⊆ U₂ ∧ Disjoint U₁ U₂ :=\n\n/-- Given a compact set `K` inside an open set `U`, there is an open neighborhood `V` of\n`0` such that `V + K ⊆ U`. -/\ntheorem ∀ {G : Type w} [inst : TopologicalSpace G] [inst_1 : AddZeroClass G] [inst_2 : ContinuousAdd G] {K U : Set G},\n  IsCompact K → IsOpen U → K ⊆ U → ∃ V, V ∈ nhds 0 ∧ V + K ⊆ U :=\n\n/-- For every finite open cover `Uᵢ` of a compact set, there exists a compact cover `Kᵢ ⊆ Uᵢ`. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : T2Space α] {s : Set α},\n  IsCompact s →\n    ∀ {ι : Type u_1} (t : Finset ι) (U : ι → Set α),\n      (∀ (i : ι), i ∈ t → IsOpen (U i)) →\n        s ⊆ ⋃ (i : ι) (_ : i ∈ t), U i →\n          ∃ K, (∀ (i : ι), IsCompact (K i)) ∧ (∀ (i : ι), K i ⊆ U i) ∧ s = ⋃ (i : ι) (_ : i ∈ t), K i :=\n\n/-- Given a compact set `K` inside an open set `U`, there is an open neighborhood `V` of `1`\nsuch that `V * K ⊆ U`. -/\ntheorem ∀ {G : Type w} [inst : TopologicalSpace G] [inst_1 : MulOneClass G] [inst_2 : ContinuousMul G] {K U : Set G},\n  IsCompact K → IsOpen U → K ⊆ U → ∃ V, V ∈ nhds 1 ∧ V * K ⊆ U :=\n\n/-- Given a compact set `K` inside an open set `U`, there is an open neighborhood `V` of `1`\nsuch that `K * V ⊆ U`. -/\ntheorem ∀ {G : Type w} [inst : TopologicalSpace G] [inst_1 : MulOneClass G] [inst_2 : ContinuousMul G] {K U : Set G},\n  IsCompact K → IsOpen U → K ⊆ U → ∃ V, V ∈ nhds 1 ∧ K * V ⊆ U :=\n\n/-- If `P` holds for `f ∣_ U` for an open cover `U` of `Y`, then `P` holds for `f`. -/\ntheorem ∀ {P : CategoryTheory.MorphismProperty AlgebraicGeometry.Scheme},\n  AlgebraicGeometry.PropertyIsLocalAtTarget P →\n    ∀ {X Y : AlgebraicGeometry.Scheme} (f : X ⟶ Y) (𝒰 : AlgebraicGeometry.Scheme.OpenCover Y),\n      (∀ (i : 𝒰.J), P CategoryTheory.Limits.pullback.snd) → P f :=\n\n/-- Let `X` be a topological space, and suppose that for all distinct `x,y ∈ X`, there\nis some clopen set `U` such that `x ∈ U` and `y ∉ U`. Then `X` is totally disconnected. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X],\n  (Pairwise fun x y => ∃ U, IsClopen U ∧ x ∈ U ∧ ¬y ∈ U) → IsTotallyDisconnected Set.univ :=\n\n/-- If `P` holds for `f : X ⟶ Y`, then `P` holds for `f ∣_ U` for any `U`. -/\ntheorem ∀ {P : CategoryTheory.MorphismProperty AlgebraicGeometry.Scheme},\n  AlgebraicGeometry.PropertyIsLocalAtTarget P →\n    ∀ {X Y : AlgebraicGeometry.Scheme} (f : X ⟶ Y) (U : TopologicalSpace.Opens ↑↑Y.toPresheafedSpace), P f → P (f ∣_ U) :=\n\n/-- If `X` is a paracompact normal topological space and `U` is an open covering of a closed set\n`s`, then there exists a `PartitionOfUnity ι X s` that is subordinate to `U`. -/\ntheorem ∀ {ι : Type u} {X : Type v} [inst : TopologicalSpace X] {s : Set X} [inst_1 : NormalSpace X]\n  [inst_2 : ParacompactSpace X],\n  IsClosed s →\n    ∀ (U : ι → Set X), (∀ (i : ι), IsOpen (U i)) → s ⊆ ⋃ (i : ι), U i → ∃ f, PartitionOfUnity.IsSubordinate f U :=\n\n/-- In a locally compact T₂ space, given a compact set `K` inside an open set `U`, we can find a\nopen set `V` between these sets with compact closure: `K ⊆ V` and the closure of `V` is inside `U`. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] [inst_2 : T2Space α] {K U : Set α},\n  IsCompact K → IsOpen U → K ⊆ U → ∃ V, IsOpen V ∧ K ⊆ V ∧ closure V ⊆ U ∧ IsCompact (closure V) :=\n\n/-- The diagram consisting of the `U i` and `U i ⊓ U j` is cofinal in the diagram\nof all opens contained in some `U i`. -/\ntheorem ∀ {X : TopCat} {ι : Type w} (U : ι → TopologicalSpace.Opens ↑X),\n  CategoryTheory.Functor.Final (TopCat.Presheaf.SheafCondition.pairwiseToOpensLeCover U) :=\n\n/-- If `X ⟶ S`, `Y ⟶ S` are open embeddings, then so is `X ×ₛ Y ⟶ S`. -/\ntheorem ∀ {X Y S : TopCat} {f : X ⟶ S} {g : Y ⟶ S},\n  OpenEmbedding ↑f →\n    OpenEmbedding ↑g →\n      OpenEmbedding\n        ↑(CategoryTheory.Limits.limit.π (CategoryTheory.Limits.cospan f g) CategoryTheory.Limits.WalkingCospan.one) :=\n\n/-- If `X` is a paracompact normal topological space and `U` is an open covering of a closed set\n`s`, then there exists a `BumpCovering ι X s` that is subordinate to `U`. -/\ntheorem ∀ {ι : Type u} {X : Type v} [inst : TopologicalSpace X] {s : Set X} [inst_1 : NormalSpace X]\n  [inst_2 : ParacompactSpace X],\n  IsClosed s → ∀ (U : ι → Set X), (∀ (i : ι), IsOpen (U i)) → s ⊆ ⋃ (i : ι), U i → ∃ f, BumpCovering.IsSubordinate f U :=\n\n/-- If `x` is an accumulation point of a set `C` and `U` is a neighborhood of `x`,\nthen `x` is an accumulation point of `U ∩ C`. -/\ntheorem ∀ {α : Type u_1} [inst : TopologicalSpace α] {C : Set α} {x : α} {U : Set α},\n  AccPt x (Filter.principal C) → U ∈ nhds x → AccPt x (Filter.principal (U ∩ C)) :=\n\n/-- Show that if `U` is open in `X` and `A` is closed in `X`, then `U - A` is open in `X`, and `A - U` is closed in `X`. -/\ntheorem", "choices": ["∀ {α : Type u} [inst : TopologicalSpace α] {U A : Set α},\n  IsOpen U → IsClosed A → IsOpen (U \\ A) ∧ IsClosed (A \\ U) ", "∀ {α : Type u} [inst : TopologicalSpace α] {U A : Set α},\n  IsOpen U → IsClosed A → IsOpen (U \\ A) ∧ IsClosed (A \\ U) ", "forall {α : Type u} [inst : TopologicalSpace α] {U A : Set α},\n  IsOpen U → IsClosed A → IsOpen (U - A) ∧ IsClosed (A - U) ", "∀ {α : Type u} [inst : TopologicalSpace α] {U A : Set α},\n  IsOpen U → IsClosed A → IsOpen (U - A) ∧ IsClosed (A - U) ", "forall {α : Type u} [inst : TopologicalSpace α] {U A : Set α},\n  IsOpen U → IsClosed A → IsOpen (U - A) ∧ IsClosed (A - U) ", "∀ {X : Type u} [inst : TopologicalSpace X] {U A : Set X},\n  IsOpen U → IsClosed A → IsOpen (U - A) ∧ IsClosed (A - U) ", "∀ {α : Type u} [inst : TopologicalSpace α] {U A : Set α},\n  IsOpen U → IsClosed A → IsOpen (U \\ A) ∧ IsClosed (A \\ U) ", "∀ {α : Type u} [inst : TopologicalSpace α] {U A : Set α},\n  IsOpen U → IsClosed A → IsOpen (U \\ A) ∧ IsClosed (A \\ U) ", "∀ {X : Type u_1} [inst : TopologicalSpace X] {U A : Set X},\n  IsOpen U → IsClosed A → IsOpen (U \\ A) ∧ IsClosed (A \\ U) ", "∀ {α : Type u} [inst : TopologicalSpace α] {U A : Set α},\n  IsOpen U → IsClosed A → IsOpen (U \\ A) ∧ IsClosed (A \\ U) "]}
{"docString": "Let `Y` be an ordered set in the order topology. Let `f, g: X → Y` be continuous. Let `h: X → Y` be the function `h(x) = min {f(x), g(x)}`. Show that `h` is continuous.", "prompts": "[{\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : Preorder α] [t : OrderClosedTopology α]\\n  [inst_2 : TopologicalSpace β] {f g : β → α} {s : Set β},\\n  IsClosed s → ContinuousOn f s → ContinuousOn g s → IsClosed {x | x ∈ s ∧ f x ≤ g x}\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `s` is a closed set and two functions `f` and `g` are continuous on `s`,\\nthen the set `{x ∈ s | f x ≤ g x}` is a closed set. \"},\n {\"theorem\":\n  \"∀ {f g : ℝ → ℝ} {a b : ℝ},\\n  a < b →\\n    ContinuousOn f (Set.Icc a b) →\\n      ContinuousOn g (Set.Icc a b) →\\n        (∀ (x : ℝ), x ∈ Set.Ioc a b → f x ≤ g x) →\\n          (∃ c, c ∈ Set.Icc a b ∧ f c < g c) → ∫ (x : ℝ) in a..b, f x < ∫ (x : ℝ) in a..b, g x\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` and `g` are continuous on `[a, b]`, `a < b`, `f x ≤ g x` on this interval, and\\n`f c < g c` at some point `c ∈ [a, b]`, then `∫ x in a..b, f x < ∫ x in a..b, g x`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_3} [inst : NontriviallyNormedField 𝕜] {E : Type u_1} [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] {F : Type u_2} [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F]\\n  [inst_5 : CompleteSpace F] [inst_6 : CompleteSpace E] (g : E →ₗ[𝕜] F),\\n  (∀ (u : ℕ → E) (x : E) (y : F),\\n      Filter.Tendsto u Filter.atTop (nhds x) → Filter.Tendsto (↑g ∘ u) Filter.atTop (nhds y) → y = ↑g x) →\\n    Continuous ↑g\",\n  \"isProp\": true,\n  \"docString\":\n  \"A useful form of the **closed graph theorem** : let `f` be a linear map between two Banach\\nspaces. To show that `f` is continuous, it suffices to show that for any convergent sequence\\n`uₙ ⟶ x`, if `f(uₙ) ⟶ y` then `y = f(x)`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} [inst : NontriviallyNormedField 𝕜] {E : Type uE} [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] {F : Type uF} [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] {G : Type uG}\\n  [inst_5 : NormedAddCommGroup G] [inst_6 : NormedSpace 𝕜 G] {f : E → F → G} {g : E → F} {n : ℕ∞},\\n  ContDiff 𝕜 n (Function.uncurry f) → Continuous g → 1 ≤ n → Continuous fun x => fderiv 𝕜 (f x) (g x)\",\n  \"isProp\": true,\n  \"docString\": \"`x ↦ fderiv 𝕜 (f x) (g x)` is continuous. \"},\n {\"theorem\":\n  \"∀ {X : Type u} {α : Type v} [inst : TopologicalSpace X] [inst_1 : LinearOrder α] [inst_2 : TopologicalSpace α]\\n  [inst_3 : OrderClosedTopology α] [inst_4 : PreconnectedSpace X] {a b : X} {f g : X → α},\\n  Continuous f → Continuous g → f a ≤ g a → g b ≤ f b → ∃ x, f x = g x\",\n  \"isProp\": true,\n  \"docString\":\n  \"Intermediate value theorem for two functions: if `f` and `g` are two continuous functions\\non a preconnected space and `f a ≤ g a` and `g b ≤ f b`, then for some `x` we have `f x = g x`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} {γ : Type u_1} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β]\\n  [inst_2 : TopologicalSpace γ] [inst_3 : DiscreteTopology α] {f : α → β → γ},\\n  (∀ (a : α), Continuous (f a)) → Continuous (Function.uncurry f)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a function `f x y` is such that `y ↦ f x y` is continuous for all `x`, and `x` lives in a\\ndiscrete space, then `f` is continuous. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {𝕜 : Type u_1} {f g : α → 𝕜} {S : Set α} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace 𝕜]\\n  [inst_2 : T1Space 𝕜] [inst_3 : Field 𝕜] [inst_4 : HasContinuousInv₀ 𝕜] [inst_5 : ContinuousMul 𝕜],\\n  IsPreconnected S →\\n    ContinuousOn f S →\\n      ContinuousOn g S →\\n        Set.EqOn (f ^ 2) (g ^ 2) S → (∀ {x : α}, x ∈ S → g x ≠ 0) → ∀ {y : α}, y ∈ S → f y = g y → Set.EqOn f g S\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f, g` are functions `α → 𝕜`, both continuous on a preconnected set `S`, with\\n`f ^ 2 = g ^ 2` on `S`, and `g z ≠ 0` all `z ∈ S`, then as soon as `f = g` holds at\\none point of `S` it holds for all points. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} [inst : NontriviallyNormedField 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] {F : Type u_3} [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] {f : E → F}\\n  {f' : E ≃L[𝕜] F} {g : F → E} {a : F},\\n  ContinuousAt g a →\\n    HasFDerivAt f (↑f') (g a) → (∀ᶠ (y : F) in nhds a, f (g y) = y) → HasFDerivAt g (↑(ContinuousLinearEquiv.symm f')) a\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f (g y) = y` for `y` in some neighborhood of `a`, `g` is continuous at `a`, and `f` has an\\ninvertible derivative `f'` at `g a`, then `g` has the derivative `f'⁻¹` at `a`.\\n\\nThis is one of the easy parts of the inverse function theorem: it assumes that we already have\\nan inverse function. \"},\n {\"theorem\":\n  \"∀ {X : Type u} {α : Type v} [inst : TopologicalSpace X] [inst_1 : LinearOrder α] [inst_2 : TopologicalSpace α]\\n  [inst_3 : OrderClosedTopology α] {s : Set X},\\n  IsPreconnected s →\\n    ∀ {a b : X},\\n      a ∈ s →\\n        b ∈ s → ∀ {f g : X → α}, ContinuousOn f s → ContinuousOn g s → f a ≤ g a → g b ≤ f b → ∃ x, x ∈ s ∧ f x = g x\",\n  \"isProp\": true,\n  \"docString\":\n  \"Intermediate value theorem for two functions: if `f` and `g` are two functions continuous\\non a preconnected set `s` and for some `a b ∈ s` we have `f a ≤ g a` and `g b ≤ f b`,\\nthen for some `x ∈ s` we have `f x = g x`. \"},\n {\"theorem\":\n  \"∀ {X : Type u_2} {Y : Type u_1} {β : Type u_3} [inst : TopologicalSpace X] [inst_1 : PolishSpace X]\\n  [inst_2 : MeasurableSpace X] [inst : BorelSpace X] [inst : TopologicalSpace Y] [inst_3 : T2Space Y]\\n  [inst_4 : MeasurableSpace Y] [inst_5 : OpensMeasurableSpace Y] [inst_6 : MeasurableSpace β]\\n  [inst : TopologicalSpace.SecondCountableTopology Y] {f : X → Y},\\n  Measurable f → Function.Surjective f → ∀ {g : Y → β}, Measurable (g ∘ f) ↔ Measurable g\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f : X → Y` is a surjective Borel measurable map from a Polish space to a topological space\\nwith second countable topology, then for any measurable space `α` and `g : Y → α`, the composition\\n`g ∘ f` is measurable if and only if `g` is measurable. \"},\n {\"theorem\":\n  \"∀ {X : Type u_2} {E : Type u_1} [inst : MeasurableSpace X] [inst_1 : TopologicalSpace X] [inst_2 : NormedAddCommGroup E]\\n  {f : X → E} {μ : MeasureTheory.Measure X} [inst_3 : NormedSpace ℝ E] [inst_4 : OpensMeasurableSpace X]\\n  [inst_5 : T2Space X],\\n  MeasureTheory.LocallyIntegrable f →\\n    ∀ {g : X → ℝ}, Continuous g → HasCompactSupport g → MeasureTheory.Integrable fun x => g x • f x\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` is locally integrable and `g` is continuous with compact support,\\nthen `g • f` is integrable. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} {Y : Type u_2} [inst : EMetricSpace X] [inst_1 : EMetricSpace Y] {K : NNReal} {f : X → Y} {s : Set X},\\n  LipschitzOnWith K f s → dimH (f '' s) ≤ dimH s\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f : X → Y` is Lipschitz continuous on `s`, then `dimH (f '' s) ≤ dimH s`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u} [inst : NontriviallyNormedField 𝕜] {f g : 𝕜 → 𝕜} {f' a : 𝕜},\\n  ContinuousAt g a →\\n    HasStrictDerivAt f f' (g a) → f' ≠ 0 → (∀ᶠ (y : 𝕜) in nhds a, f (g y) = y) → HasStrictDerivAt g f'⁻¹ a\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f (g y) = y` for `y` in some neighborhood of `a`, `g` is continuous at `a`, and `f` has an\\ninvertible derivative `f'` at `g a` in the strict sense, then `g` has the derivative `f'⁻¹` at `a`\\nin the strict sense.\\n\\nThis is one of the easy parts of the inverse function theorem: it assumes that we already have an\\ninverse function. \"},\n {\"theorem\":\n  \"∀ {X : Type u_2} {E : Type u_1} [inst : TopologicalSpace X] [inst_1 : AddCommGroup E] [inst_2 : Module ℝ E]\\n  [inst_3 : NormalSpace X] [inst_4 : ParacompactSpace X] [inst_5 : TopologicalSpace E] [inst_6 : ContinuousAdd E]\\n  [inst_7 : ContinuousSMul ℝ E] {t : X → Set E},\\n  (∀ (x : X), Convex ℝ (t x)) →\\n    (∀ (x : X), ∃ U, U ∈ nhds x ∧ ∃ g, ContinuousOn g U ∧ ∀ (y : X), y ∈ U → g y ∈ t y) → ∃ g, ∀ (x : X), ↑g x ∈ t x\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `X` be a normal paracompact topological space (e.g., any extended metric space). Let `E` be\\na topological real vector space. Let `t : X → Set E` be a family of convex sets. Suppose that for\\neach point `x : X`, there exists a neighborhood `U ∈ 𝓝 X` and a function `g : X → E` that is\\ncontinuous on `U` and sends each `y ∈ U` to a point of `t y`. Then there exists a continuous map\\n`g : C(X, E)` such that `g x ∈ t x` for all `x`. See also\\n`exists_continuous_forall_mem_convex_of_local_const`. \"},\n {\"theorem\":\n  \"∀ {X : Type u_2} {E : Type u_1} [inst : MeasurableSpace X] [inst_1 : TopologicalSpace X] [inst_2 : NormedAddCommGroup E]\\n  {μ : MeasureTheory.Measure X} [inst_3 : NormedSpace ℝ E] [inst_4 : OpensMeasurableSpace X] [inst_5 : T2Space X]\\n  {f : X → ℝ},\\n  MeasureTheory.LocallyIntegrable f →\\n    ∀ {g : X → E}, Continuous g → HasCompactSupport g → MeasureTheory.Integrable fun x => f x • g x\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` is locally integrable and `g` is continuous with compact support,\\nthen `f • g` is integrable. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : LE β] {f g : α → β} {a : α},\\n  f ≤ᶠ[nhds a] g → ∀ᶠ (y : α) in nhds a, f ≤ᶠ[nhds y] g\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f x ≤ g x` in a neighbourhood of `a`, then for `y` sufficiently close to `a` we have\\n`f x ≤ g x` in a neighbourhood of `y`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : ConditionallyCompleteLinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderTopology α]\\n  [inst_3 : DenselyOrdered α] {δ : Type u_1} [inst_4 : LinearOrder δ] [inst_5 : TopologicalSpace δ]\\n  [inst_6 : OrderClosedTopology δ] {s : Set α} [hs : Set.OrdConnected s] {f : α → δ},\\n  ContinuousOn f s → ∀ {a b : α}, a ∈ s → b ∈ s → Set.SurjOn f s (Set.uIcc (f a) (f b))\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Intermediate value theorem**: if `f` is continuous on an order-connected set `s` and `a`,\\n`b` are two points of this set, then `f` sends `s` to a superset of `[f x, f y]`. \"},\n {\"theorem\":\n  \"∀ {ι : Type u} {X : Type v} [inst : TopologicalSpace X] {E : Type u_1} [inst_1 : AddCommMonoid E]\\n  [inst_2 : SMulWithZero ℝ E] [inst_3 : TopologicalSpace E] [inst_4 : ContinuousSMul ℝ E] {s : Set X}\\n  {f : PartitionOfUnity ι X s} [inst_5 : ContinuousAdd E] {U : ι → Set X},\\n  (∀ (i : ι), IsOpen (U i)) →\\n    PartitionOfUnity.IsSubordinate f U →\\n      ∀ {g : ι → X → E}, (∀ (i : ι), ContinuousOn (g i) (U i)) → Continuous fun x => ∑ᶠ (i : ι), ↑(↑f i) x • g i x\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` is a partition of unity that is subordinate to a family of open sets `U i` and\\n`g : ι → X → E` is a family of functions such that each `g i` is continuous on `U i`, then the sum\\n`fun x ↦ ∑ᶠ i, f i x • g i x` is a continuous function. \"},\n {\"theorem\":\n  \"∀ {M : Type u_1} {α : Type u_2} [inst : SMul M α] [self : MulAction.IsPretransitive M α] (x y : α), ∃ g, g • x = y\",\n  \"isProp\": true,\n  \"docString\": \"There is `g` such that `g • x = y`. \"},\n {\"theorem\":\n  \"∀ {X : Type u_2} {E : Type u_1} [inst : TopologicalSpace X] [inst_1 : AddCommGroup E] [inst_2 : Module ℝ E]\\n  [inst_3 : NormalSpace X] [inst_4 : ParacompactSpace X] [inst_5 : TopologicalSpace E] [inst_6 : ContinuousAdd E]\\n  [inst_7 : ContinuousSMul ℝ E] {t : X → Set E},\\n  (∀ (x : X), Convex ℝ (t x)) → (∀ (x : X), ∃ c, ∀ᶠ (y : X) in nhds x, c ∈ t y) → ∃ g, ∀ (x : X), ↑g x ∈ t x\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `X` be a normal paracompact topological space (e.g., any extended metric space). Let `E` be\\na topological real vector space. Let `t : X → Set E` be a family of convex sets. Suppose that for\\neach point `x : X`, there exists a vector `c : E` that belongs to `t y` for all `y` in a\\nneighborhood of `x`. Then there exists a continuous map `g : C(X, E)` such that `g x ∈ t x` for all\\n`x`. See also `exists_continuous_forall_mem_convex_of_local`. \"}]\n", "prompt_cons": "/-- If `s` is a closed set and two functions `f` and `g` are continuous on `s`,\nthen the set `{x ∈ s | f x ≤ g x}` is a closed set. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : Preorder α] [t : OrderClosedTopology α]\n  [inst_2 : TopologicalSpace β] {f g : β → α} {s : Set β},\n  IsClosed s → ContinuousOn f s → ContinuousOn g s → IsClosed {x | x ∈ s ∧ f x ≤ g x} :=\n\n/-- If `f` and `g` are continuous on `[a, b]`, `a < b`, `f x ≤ g x` on this interval, and\n`f c < g c` at some point `c ∈ [a, b]`, then `∫ x in a..b, f x < ∫ x in a..b, g x`. -/\ntheorem ∀ {f g : ℝ → ℝ} {a b : ℝ},\n  a < b →\n    ContinuousOn f (Set.Icc a b) →\n      ContinuousOn g (Set.Icc a b) →\n        (∀ (x : ℝ), x ∈ Set.Ioc a b → f x ≤ g x) →\n          (∃ c, c ∈ Set.Icc a b ∧ f c < g c) → ∫ (x : ℝ) in a..b, f x < ∫ (x : ℝ) in a..b, g x :=\n\n/-- A useful form of the **closed graph theorem** : let `f` be a linear map between two Banach\nspaces. To show that `f` is continuous, it suffices to show that for any convergent sequence\n`uₙ ⟶ x`, if `f(uₙ) ⟶ y` then `y = f(x)`. -/\ntheorem ∀ {𝕜 : Type u_3} [inst : NontriviallyNormedField 𝕜] {E : Type u_1} [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E] {F : Type u_2} [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F]\n  [inst_5 : CompleteSpace F] [inst_6 : CompleteSpace E] (g : E →ₗ[𝕜] F),\n  (∀ (u : ℕ → E) (x : E) (y : F),\n      Filter.Tendsto u Filter.atTop (nhds x) → Filter.Tendsto (↑g ∘ u) Filter.atTop (nhds y) → y = ↑g x) →\n    Continuous ↑g :=\n\n/-- `x ↦ fderiv 𝕜 (f x) (g x)` is continuous. -/\ntheorem ∀ {𝕜 : Type u_1} [inst : NontriviallyNormedField 𝕜] {E : Type uE} [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E] {F : Type uF} [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] {G : Type uG}\n  [inst_5 : NormedAddCommGroup G] [inst_6 : NormedSpace 𝕜 G] {f : E → F → G} {g : E → F} {n : ℕ∞},\n  ContDiff 𝕜 n (Function.uncurry f) → Continuous g → 1 ≤ n → Continuous fun x => fderiv 𝕜 (f x) (g x) :=\n\n/-- Intermediate value theorem for two functions: if `f` and `g` are two continuous functions\non a preconnected space and `f a ≤ g a` and `g b ≤ f b`, then for some `x` we have `f x = g x`. -/\ntheorem ∀ {X : Type u} {α : Type v} [inst : TopologicalSpace X] [inst_1 : LinearOrder α] [inst_2 : TopologicalSpace α]\n  [inst_3 : OrderClosedTopology α] [inst_4 : PreconnectedSpace X] {a b : X} {f g : X → α},\n  Continuous f → Continuous g → f a ≤ g a → g b ≤ f b → ∃ x, f x = g x :=\n\n/-- If a function `f x y` is such that `y ↦ f x y` is continuous for all `x`, and `x` lives in a\ndiscrete space, then `f` is continuous. -/\ntheorem ∀ {α : Type u} {β : Type v} {γ : Type u_1} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β]\n  [inst_2 : TopologicalSpace γ] [inst_3 : DiscreteTopology α] {f : α → β → γ},\n  (∀ (a : α), Continuous (f a)) → Continuous (Function.uncurry f) :=\n\n/-- If `f, g` are functions `α → 𝕜`, both continuous on a preconnected set `S`, with\n`f ^ 2 = g ^ 2` on `S`, and `g z ≠ 0` all `z ∈ S`, then as soon as `f = g` holds at\none point of `S` it holds for all points. -/\ntheorem ∀ {α : Type u_2} {𝕜 : Type u_1} {f g : α → 𝕜} {S : Set α} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace 𝕜]\n  [inst_2 : T1Space 𝕜] [inst_3 : Field 𝕜] [inst_4 : HasContinuousInv₀ 𝕜] [inst_5 : ContinuousMul 𝕜],\n  IsPreconnected S →\n    ContinuousOn f S →\n      ContinuousOn g S →\n        Set.EqOn (f ^ 2) (g ^ 2) S → (∀ {x : α}, x ∈ S → g x ≠ 0) → ∀ {y : α}, y ∈ S → f y = g y → Set.EqOn f g S :=\n\n/-- If `f (g y) = y` for `y` in some neighborhood of `a`, `g` is continuous at `a`, and `f` has an\ninvertible derivative `f'` at `g a`, then `g` has the derivative `f'⁻¹` at `a`.\n\nThis is one of the easy parts of the inverse function theorem: it assumes that we already have\nan inverse function. -/\ntheorem ∀ {𝕜 : Type u_1} [inst : NontriviallyNormedField 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E] {F : Type u_3} [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] {f : E → F}\n  {f' : E ≃L[𝕜] F} {g : F → E} {a : F},\n  ContinuousAt g a →\n    HasFDerivAt f (↑f') (g a) → (∀ᶠ (y : F) in nhds a, f (g y) = y) → HasFDerivAt g (↑(ContinuousLinearEquiv.symm f')) a :=\n\n/-- Intermediate value theorem for two functions: if `f` and `g` are two functions continuous\non a preconnected set `s` and for some `a b ∈ s` we have `f a ≤ g a` and `g b ≤ f b`,\nthen for some `x ∈ s` we have `f x = g x`. -/\ntheorem ∀ {X : Type u} {α : Type v} [inst : TopologicalSpace X] [inst_1 : LinearOrder α] [inst_2 : TopologicalSpace α]\n  [inst_3 : OrderClosedTopology α] {s : Set X},\n  IsPreconnected s →\n    ∀ {a b : X},\n      a ∈ s →\n        b ∈ s → ∀ {f g : X → α}, ContinuousOn f s → ContinuousOn g s → f a ≤ g a → g b ≤ f b → ∃ x, x ∈ s ∧ f x = g x :=\n\n/-- If `f : X → Y` is a surjective Borel measurable map from a Polish space to a topological space\nwith second countable topology, then for any measurable space `α` and `g : Y → α`, the composition\n`g ∘ f` is measurable if and only if `g` is measurable. -/\ntheorem ∀ {X : Type u_2} {Y : Type u_1} {β : Type u_3} [inst : TopologicalSpace X] [inst_1 : PolishSpace X]\n  [inst_2 : MeasurableSpace X] [inst : BorelSpace X] [inst : TopologicalSpace Y] [inst_3 : T2Space Y]\n  [inst_4 : MeasurableSpace Y] [inst_5 : OpensMeasurableSpace Y] [inst_6 : MeasurableSpace β]\n  [inst : TopologicalSpace.SecondCountableTopology Y] {f : X → Y},\n  Measurable f → Function.Surjective f → ∀ {g : Y → β}, Measurable (g ∘ f) ↔ Measurable g :=\n\n/-- If `f` is locally integrable and `g` is continuous with compact support,\nthen `g • f` is integrable. -/\ntheorem ∀ {X : Type u_2} {E : Type u_1} [inst : MeasurableSpace X] [inst_1 : TopologicalSpace X] [inst_2 : NormedAddCommGroup E]\n  {f : X → E} {μ : MeasureTheory.Measure X} [inst_3 : NormedSpace ℝ E] [inst_4 : OpensMeasurableSpace X]\n  [inst_5 : T2Space X],\n  MeasureTheory.LocallyIntegrable f →\n    ∀ {g : X → ℝ}, Continuous g → HasCompactSupport g → MeasureTheory.Integrable fun x => g x • f x :=\n\n/-- If `f : X → Y` is Lipschitz continuous on `s`, then `dimH (f '' s) ≤ dimH s`. -/\ntheorem ∀ {X : Type u_1} {Y : Type u_2} [inst : EMetricSpace X] [inst_1 : EMetricSpace Y] {K : NNReal} {f : X → Y} {s : Set X},\n  LipschitzOnWith K f s → dimH (f '' s) ≤ dimH s :=\n\n/-- If `f (g y) = y` for `y` in some neighborhood of `a`, `g` is continuous at `a`, and `f` has an\ninvertible derivative `f'` at `g a` in the strict sense, then `g` has the derivative `f'⁻¹` at `a`\nin the strict sense.\n\nThis is one of the easy parts of the inverse function theorem: it assumes that we already have an\ninverse function. -/\ntheorem ∀ {𝕜 : Type u} [inst : NontriviallyNormedField 𝕜] {f g : 𝕜 → 𝕜} {f' a : 𝕜},\n  ContinuousAt g a →\n    HasStrictDerivAt f f' (g a) → f' ≠ 0 → (∀ᶠ (y : 𝕜) in nhds a, f (g y) = y) → HasStrictDerivAt g f'⁻¹ a :=\n\n/-- Let `X` be a normal paracompact topological space (e.g., any extended metric space). Let `E` be\na topological real vector space. Let `t : X → Set E` be a family of convex sets. Suppose that for\neach point `x : X`, there exists a neighborhood `U ∈ 𝓝 X` and a function `g : X → E` that is\ncontinuous on `U` and sends each `y ∈ U` to a point of `t y`. Then there exists a continuous map\n`g : C(X, E)` such that `g x ∈ t x` for all `x`. See also\n`exists_continuous_forall_mem_convex_of_local_const`. -/\ntheorem ∀ {X : Type u_2} {E : Type u_1} [inst : TopologicalSpace X] [inst_1 : AddCommGroup E] [inst_2 : Module ℝ E]\n  [inst_3 : NormalSpace X] [inst_4 : ParacompactSpace X] [inst_5 : TopologicalSpace E] [inst_6 : ContinuousAdd E]\n  [inst_7 : ContinuousSMul ℝ E] {t : X → Set E},\n  (∀ (x : X), Convex ℝ (t x)) →\n    (∀ (x : X), ∃ U, U ∈ nhds x ∧ ∃ g, ContinuousOn g U ∧ ∀ (y : X), y ∈ U → g y ∈ t y) → ∃ g, ∀ (x : X), ↑g x ∈ t x :=\n\n/-- If `f` is locally integrable and `g` is continuous with compact support,\nthen `f • g` is integrable. -/\ntheorem ∀ {X : Type u_2} {E : Type u_1} [inst : MeasurableSpace X] [inst_1 : TopologicalSpace X] [inst_2 : NormedAddCommGroup E]\n  {μ : MeasureTheory.Measure X} [inst_3 : NormedSpace ℝ E] [inst_4 : OpensMeasurableSpace X] [inst_5 : T2Space X]\n  {f : X → ℝ},\n  MeasureTheory.LocallyIntegrable f →\n    ∀ {g : X → E}, Continuous g → HasCompactSupport g → MeasureTheory.Integrable fun x => f x • g x :=\n\n/-- If `f x ≤ g x` in a neighbourhood of `a`, then for `y` sufficiently close to `a` we have\n`f x ≤ g x` in a neighbourhood of `y`. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : LE β] {f g : α → β} {a : α},\n  f ≤ᶠ[nhds a] g → ∀ᶠ (y : α) in nhds a, f ≤ᶠ[nhds y] g :=\n\n/-- **Intermediate value theorem**: if `f` is continuous on an order-connected set `s` and `a`,\n`b` are two points of this set, then `f` sends `s` to a superset of `[f x, f y]`. -/\ntheorem ∀ {α : Type u} [inst : ConditionallyCompleteLinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderTopology α]\n  [inst_3 : DenselyOrdered α] {δ : Type u_1} [inst_4 : LinearOrder δ] [inst_5 : TopologicalSpace δ]\n  [inst_6 : OrderClosedTopology δ] {s : Set α} [hs : Set.OrdConnected s] {f : α → δ},\n  ContinuousOn f s → ∀ {a b : α}, a ∈ s → b ∈ s → Set.SurjOn f s (Set.uIcc (f a) (f b)) :=\n\n/-- If `f` is a partition of unity that is subordinate to a family of open sets `U i` and\n`g : ι → X → E` is a family of functions such that each `g i` is continuous on `U i`, then the sum\n`fun x ↦ ∑ᶠ i, f i x • g i x` is a continuous function. -/\ntheorem ∀ {ι : Type u} {X : Type v} [inst : TopologicalSpace X] {E : Type u_1} [inst_1 : AddCommMonoid E]\n  [inst_2 : SMulWithZero ℝ E] [inst_3 : TopologicalSpace E] [inst_4 : ContinuousSMul ℝ E] {s : Set X}\n  {f : PartitionOfUnity ι X s} [inst_5 : ContinuousAdd E] {U : ι → Set X},\n  (∀ (i : ι), IsOpen (U i)) →\n    PartitionOfUnity.IsSubordinate f U →\n      ∀ {g : ι → X → E}, (∀ (i : ι), ContinuousOn (g i) (U i)) → Continuous fun x => ∑ᶠ (i : ι), ↑(↑f i) x • g i x :=\n\n/-- There is `g` such that `g • x = y`. -/\ntheorem ∀ {M : Type u_1} {α : Type u_2} [inst : SMul M α] [self : MulAction.IsPretransitive M α] (x y : α), ∃ g, g • x = y :=\n\n/-- Let `X` be a normal paracompact topological space (e.g., any extended metric space). Let `E` be\na topological real vector space. Let `t : X → Set E` be a family of convex sets. Suppose that for\neach point `x : X`, there exists a vector `c : E` that belongs to `t y` for all `y` in a\nneighborhood of `x`. Then there exists a continuous map `g : C(X, E)` such that `g x ∈ t x` for all\n`x`. See also `exists_continuous_forall_mem_convex_of_local`. -/\ntheorem ∀ {X : Type u_2} {E : Type u_1} [inst : TopologicalSpace X] [inst_1 : AddCommGroup E] [inst_2 : Module ℝ E]\n  [inst_3 : NormalSpace X] [inst_4 : ParacompactSpace X] [inst_5 : TopologicalSpace E] [inst_6 : ContinuousAdd E]\n  [inst_7 : ContinuousSMul ℝ E] {t : X → Set E},\n  (∀ (x : X), Convex ℝ (t x)) → (∀ (x : X), ∃ c, ∀ᶠ (y : X) in nhds x, c ∈ t y) → ∃ g, ∀ (x : X), ↑g x ∈ t x :=\n\n/-- Let `Y` be an ordered set in the order topology. Let `f, g: X → Y` be continuous. Let `h: X → Y` be the function `h(x) = min {f(x), g(x)}`. Show that `h` is continuous. -/\ntheorem", "choices": ["∀ {X : Type u} {Y : Type v} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] [inst_2 : LinearOrder Y]\n  [inst_3 : OrderTopology Y] {f g : X → Y},\n  Continuous f → Continuous g → Continuous fun x => min (f x) (g x) ", "∀ {X : Type u} {Y : Type v} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] [inst_2 : LinearOrder Y]\n  [inst_3 : OrderTopology Y] {f g : X → Y}, Continuous f → Continuous g → Continuous fun x => min (f x) (g x) ", "forall {X : Type u} {Y : Type v} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] [LinearOrder Y]\n  [OrderTopology Y] (f g : X → Y),\n  Continuous f → Continuous g → Continuous (fun x => min (f x) (g x)) ", "∀ {X : Type u} {Y : Type v} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] [inst_2 : LinearOrder Y]\n[inst_3 : OrderTopology Y] {f g h : X → Y},\n(∀ (x : X), h x = min (f x) (g x)) → Continuous f → Continuous g → Continuous h ", "∀ {X : Type u} {Y : Type v} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] [inst_2 : LinearOrder Y] [inst_3 : OrderTopology Y]\n  {f g : X → Y}, Continuous f → Continuous g → Continuous (λ x, min (f x) (g x)) ", "forall {X : Type u} {Y : Type v} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] [inst_2 : LinearOrder Y]\n[inst_3 : OrderTopology Y] {f g : X → Y}, Continuous f → Continuous g → Continuous (λ x, min (f x) (g x)) ", "∀ {X : Type u} {Y : Type v} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] [inst_2 : LinearOrder Y]\n  [inst_3 : OrderTopology Y] {f g : X → Y},\n  Continuous f → Continuous g → Continuous fun x => min (f x) (g x) ", "∀ {X : Type u} {α : Type v} [inst : TopologicalSpace X] [inst_1 : LinearOrder α] [inst_2 : TopologicalSpace α]\n  [inst_3 : OrderClosedTopology α] {f g : X → α},\n  Continuous f → Continuous g → Continuous fun x => min (f x) (g x) ", "∀ {X : Type u} {Y : Type v} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] [inst_2 : LinearOrder Y]\n[inst_3 : OrderTopology Y] {f g : X → Y},\nContinuous f → Continuous g → Continuous fun x => LinearOrder.min (f x) (g x) ", "∀ {X : Type u} {Y : Type v} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] [inst_2 : LinearOrder Y]\n  [inst_3 : OrderTopology Y] {f g : X → Y}, Continuous f → Continuous g → Continuous (λ x, min (f x) (g x)) "]}
{"docString": "Let `x_1, x_2, ...` be a sequence of the points of the product space `Π X_α`. Show that this sequence converges to the point `x` if and only if the sequence `π_α(x_i)` converges to `π_α(x)` for each `α`.", "prompts": "[{\"theorem\":\n  \"∀ {α : Type u_3} {β : Type u_2} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] {γ : Type u_1}\\n  [inst_2 : AddCommMonoid β] [inst_3 : ContinuousAdd β] {f : γ → C(α, β)} {g : C(α, β)},\\n  HasSum f g → ∀ (x : α), HasSum (fun i => ↑(f i) x) (↑g x)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `α` is locally compact, and an infinite sum of functions in `C(α, β)`\\nconverges to `g` (for the compact-open topology), then the pointwise sum converges to `g x` for\\nall `x ∈ α`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : UniformSpace α] [inst_1 : SemilatticeSup β] [inst_2 : CompleteSpace α] {u : β → α},\\n  CauchySeq u → ∃ x, Filter.Tendsto u Filter.atTop (nhds x)\",\n  \"isProp\": true,\n  \"docString\": \"A Cauchy sequence in a complete space converges \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {s : Set α} {p : Filter ι},\\n  TendstoUniformlyOn F f p s → ∀ {x : α}, x ∈ s → Filter.Tendsto (fun n => F n x) p (nhds (f x))\",\n  \"isProp\": true,\n  \"docString\": \"Uniform converence implies pointwise convergence. \"},\n {\"theorem\":\n  \"∀ {ι : Type u_2} {π : ι → Type u_3} [inst : (i : ι) → TopologicalSpace (π i)] {X : Type u_1} (f : (i : ι) → X → π i),\\n  Inducing fun x i => f i x\",\n  \"isProp\": true,\n  \"docString\":\n  \"Suppose `π i` is a family of topological spaces indexed by `i : ι`, and `X` is a type\\nendowed with a family of maps `f i : X → π i` for every `i : ι`, hence inducing a\\nmap `g : X → Π i, π i`. This lemma shows that infimum of the topologies on `X` induced by\\nthe `f i` as `i : ι` varies is simply the topology on `X` induced by `g : X → Π i, π i`\\nwhere `Π i, π i` is endowed with the usual product topology. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : UniformSpace α] [inst_1 : SemilatticeSup β] {K : Set α},\\n  IsComplete K → ∀ {u : β → α}, (∀ (n : β), u n ∈ K) → CauchySeq u → ∃ v, v ∈ K ∧ Filter.Tendsto u Filter.atTop (nhds v)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `K` is a complete subset, then any cauchy sequence in `K` converges to a point in `K` \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {E : α → Type u_2} {p : ENNReal} [inst : (i : α) → NormedAddCommGroup (E i)] [_i : Fact (1 ≤ p)]\\n  {F : ℕ → { x // x ∈ lp E p }},\\n  CauchySeq F →\\n    ∀ {f : { x // x ∈ lp E p }},\\n      Filter.Tendsto (id fun i => ↑(F i)) Filter.atTop (nhds ↑f) → Filter.Tendsto F Filter.atTop (nhds f)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a sequence is Cauchy in the `lp E p` topology and pointwise convergent to an element `f` of\\n`lp E p`, then it converges to `f` in the `lp E p` topology. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {ι : Type u_2} {x : ι → α} {f : Filter α} {l : Filter ι} [inst : Filter.IsCountablyGenerated l],\\n  (∀ (ns : ℕ → ι), Filter.Tendsto ns Filter.atTop l → ∃ ms, Filter.Tendsto (fun n => x (ns (ms n))) Filter.atTop f) →\\n    Filter.Tendsto x l f\",\n  \"isProp\": true,\n  \"docString\":\n  \"A sequence converges if every subsequence has a convergent subsequence. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {β : Type u_1} [inst : UniformSpace β] {𝔖 : Set (Set α)} [inst_1 : T2Space β],\\n  ⋃₀ 𝔖 = Set.univ → T2Space (UniformOnFun α β 𝔖)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `𝔖` covers `α`, then the topology of `𝔖`-convergence is T₂. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {𝕜 : Type u_2} {E : Type u_3} {F : Type u_4} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : CompleteSpace F] {u : α → ℝ}\\n  [inst_5 : NormedSpace 𝕜 F] {f : α → E → F} {f' : α → E → E →L[𝕜] F} {x₀ : E},\\n  Summable u →\\n    (∀ (n : α) (x : E), HasFDerivAt (f n) (f' n x) x) →\\n      (∀ (n : α) (x : E), ‖f' n x‖ ≤ u n) → (Summable fun n => f n x₀) → ∀ (x : E), Summable fun n => f n x\",\n  \"isProp\": true,\n  \"docString\":\n  \"Consider a series of functions `∑' n, f n x`. If the series converges at a\\npoint, and all functions in the series are differentiable with a summable bound on the derivatives,\\nthen the series converges everywhere. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {p : Filter ι}\\n  {p' : Filter α} [inst_1 : Filter.NeBot p],\\n  UniformCauchySeqOnFilter F p p' →\\n    (∀ᶠ (x : α) in p', Filter.Tendsto (fun n => F n x) p (nhds (f x))) → TendstoUniformlyOnFilter F f p p'\",\n  \"isProp\": true,\n  \"docString\": \"A uniformly Cauchy sequence converges uniformly to its limit \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {𝕜₂ : Type u_2} {F : Type u_4} [inst : NormedAddCommGroup F] [inst_1 : NontriviallyNormedField 𝕜]\\n  [inst_2 : NontriviallyNormedField 𝕜₂] [inst_3 : NormedSpace 𝕜₂ F] {σ₁₂ : 𝕜 →+* 𝕜₂} {E' : Type u_3}\\n  [inst_4 : SeminormedAddCommGroup E'] [inst_5 : NormedSpace 𝕜 E'] [inst_6 : RingHomIsometric σ₁₂]\\n  {f : ℕ → E' →SL[σ₁₂] F} {g : E' →SL[σ₁₂] F},\\n  Filter.Tendsto (fun n x => ↑(f n) x) Filter.atTop (nhds ↑g) → CauchySeq f → Filter.Tendsto f Filter.atTop (nhds g)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a Cauchy sequence of continuous linear map converges to a continuous linear map pointwise,\\nthen it converges to the same map in norm. This lemma is used to prove that the space of continuous\\nlinear maps is complete provided that the codomain is a complete space. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : UniformSpace α] [inst_1 : SemilatticeSup β] {u : β → α},\\n  CauchySeq u →\\n    ∀ {ι : Type u_1} {f : ι → β} {p : Filter ι} [inst_2 : Filter.NeBot p],\\n      Filter.Tendsto f p Filter.atTop →\\n        ∀ {a : α}, Filter.Tendsto (u ∘ f) p (nhds a) → Filter.Tendsto u Filter.atTop (nhds a)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a Cauchy sequence has a convergent subsequence, then it converges. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {p : Filter ι} {c : β},\\n  Filter.Tendsto (↿F) (p ×ˢ ⊤) (nhds c) ↔ TendstoUniformly F (fun x => c) p\",\n  \"isProp\": true,\n  \"docString\":\n  \"Uniform convergence to a constant function is equivalent to convergence in `p ×ˢ ⊤`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {𝕜 : Type u_3} {E : Type u_2} {F : Type u_4} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : CompleteSpace F] {u : α → ℝ}\\n  [inst_5 : NormedSpace 𝕜 F] {f : α → E → F} {f' : α → E → E →L[𝕜] F} {s : Set E} {x₀ : E},\\n  Summable u →\\n    IsOpen s →\\n      IsPreconnected s →\\n        (∀ (n : α) (x : E), x ∈ s → HasFDerivAt (f n) (f' n x) x) →\\n          (∀ (n : α) (x : E), x ∈ s → ‖f' n x‖ ≤ u n) →\\n            x₀ ∈ s → (Summable fun x => f x x₀) → ∀ {x : E}, x ∈ s → Summable fun n => f n x\",\n  \"isProp\": true,\n  \"docString\":\n  \"Consider a series of functions `∑' n, f n x` on a preconnected open set. If the series converges\\nat a point, and all functions in the series are differentiable with a summable bound on the\\nderivatives, then the series converges everywhere on the set. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_3} [inst : NontriviallyNormedField 𝕜] {E : Type u_1} [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] {F : Type u_2} [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F]\\n  [inst_5 : CompleteSpace F] [inst_6 : CompleteSpace E] (g : E →ₗ[𝕜] F),\\n  (∀ (u : ℕ → E) (x : E) (y : F),\\n      Filter.Tendsto u Filter.atTop (nhds x) → Filter.Tendsto (↑g ∘ u) Filter.atTop (nhds y) → y = ↑g x) →\\n    Continuous ↑g\",\n  \"isProp\": true,\n  \"docString\":\n  \"A useful form of the **closed graph theorem** : let `f` be a linear map between two Banach\\nspaces. To show that `f` is continuous, it suffices to show that for any convergent sequence\\n`uₙ ⟶ x`, if `f(uₙ) ⟶ y` then `y = f(x)`. \"},\n {\"theorem\": \"∀ {ξ : ℤ} (n : ℕ), Real.convergent (↑ξ) n = ↑ξ\",\n  \"isProp\": true,\n  \"docString\": \"If `ξ` is an integer, all its convergents equal `ξ`. \"},\n {\"theorem\":\n  \"∀ {ι : Type u_2} {γ : Type u_1} [tγ : TopologicalSpace γ] [inst : PolishSpace γ] [inst : MeasurableSpace γ]\\n  {β : Type u_3} [inst_1 : MeasurableSpace β] [hγ : OpensMeasurableSpace γ] [inst_2 : Countable ι] {l : Filter ι}\\n  [inst_3 : Filter.IsCountablyGenerated l] {f : ι → β → γ},\\n  (∀ (i : ι), Measurable (f i)) → MeasurableSet {x | ∃ c, Filter.Tendsto (fun n => f n x) l (nhds c)}\",\n  \"isProp\": true,\n  \"docString\":\n  \"The set of points for which a measurable sequence of functions converges is measurable. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [t : TopologicalSpace α] [inst : TopologicalSpace.FirstCountableTopology α] {u : ℕ → α} {x : α},\\n  MapClusterPt x Filter.atTop u → ∃ ψ, StrictMono ψ ∧ Filter.Tendsto (u ∘ ψ) Filter.atTop (nhds x)\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a first-countable space, a cluster point `x` of a sequence\\nis the limit of some subsequence. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {E : Type u_2} {m : MeasurableSpace α} {μ : MeasureTheory.Measure α} [inst : MetricSpace E]\\n  {f : ℕ → α → E} {g : α → E} [inst_1 : MeasureTheory.IsFiniteMeasure μ],\\n  (∀ (n : ℕ), MeasureTheory.AEStronglyMeasurable (f n) μ) →\\n    (∀ᵐ (x : α) ∂μ, Filter.Tendsto (fun n => f n x) Filter.atTop (nhds (g x))) →\\n      MeasureTheory.TendstoInMeasure μ f Filter.atTop g\",\n  \"isProp\": true,\n  \"docString\":\n  \"Convergence a.e. implies convergence in measure in a finite measure space. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {X : Type u_1} [inst : TopologicalSpace X] {f : ℕ → X → α},\\n  (LocallyFinite fun n => {x | f (n + 1) x ≠ f n x}) → ∃ F, ∀ (x : X), ∀ᶠ (n : ℕ) in Filter.atTop, f n =ᶠ[nhds x] F\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `f : ℕ → α → β` be a sequence of functions on a topological space. Suppose\\nthat the family of sets `s n = {x | f (n + 1) x ≠ f n x}` is locally finite. Then there exists a\\nfunction `F :  α → β` such that for any `x`, for sufficiently large values of `n`, we have\\n`f n =ᶠ[𝓝 x] F`. \"}]\n", "prompt_cons": "/-- If `α` is locally compact, and an infinite sum of functions in `C(α, β)`\nconverges to `g` (for the compact-open topology), then the pointwise sum converges to `g x` for\nall `x ∈ α`. -/\ntheorem ∀ {α : Type u_3} {β : Type u_2} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] {γ : Type u_1}\n  [inst_2 : AddCommMonoid β] [inst_3 : ContinuousAdd β] {f : γ → C(α, β)} {g : C(α, β)},\n  HasSum f g → ∀ (x : α), HasSum (fun i => ↑(f i) x) (↑g x) :=\n\n/-- A Cauchy sequence in a complete space converges -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : UniformSpace α] [inst_1 : SemilatticeSup β] [inst_2 : CompleteSpace α] {u : β → α},\n  CauchySeq u → ∃ x, Filter.Tendsto u Filter.atTop (nhds x) :=\n\n/-- Uniform converence implies pointwise convergence. -/\ntheorem ∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {s : Set α} {p : Filter ι},\n  TendstoUniformlyOn F f p s → ∀ {x : α}, x ∈ s → Filter.Tendsto (fun n => F n x) p (nhds (f x)) :=\n\n/-- Suppose `π i` is a family of topological spaces indexed by `i : ι`, and `X` is a type\nendowed with a family of maps `f i : X → π i` for every `i : ι`, hence inducing a\nmap `g : X → Π i, π i`. This lemma shows that infimum of the topologies on `X` induced by\nthe `f i` as `i : ι` varies is simply the topology on `X` induced by `g : X → Π i, π i`\nwhere `Π i, π i` is endowed with the usual product topology. -/\ntheorem ∀ {ι : Type u_2} {π : ι → Type u_3} [inst : (i : ι) → TopologicalSpace (π i)] {X : Type u_1} (f : (i : ι) → X → π i),\n  Inducing fun x i => f i x :=\n\n/-- If `K` is a complete subset, then any cauchy sequence in `K` converges to a point in `K` -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : UniformSpace α] [inst_1 : SemilatticeSup β] {K : Set α},\n  IsComplete K → ∀ {u : β → α}, (∀ (n : β), u n ∈ K) → CauchySeq u → ∃ v, v ∈ K ∧ Filter.Tendsto u Filter.atTop (nhds v) :=\n\n/-- If a sequence is Cauchy in the `lp E p` topology and pointwise convergent to an element `f` of\n`lp E p`, then it converges to `f` in the `lp E p` topology. -/\ntheorem ∀ {α : Type u_1} {E : α → Type u_2} {p : ENNReal} [inst : (i : α) → NormedAddCommGroup (E i)] [_i : Fact (1 ≤ p)]\n  {F : ℕ → { x // x ∈ lp E p }},\n  CauchySeq F →\n    ∀ {f : { x // x ∈ lp E p }},\n      Filter.Tendsto (id fun i => ↑(F i)) Filter.atTop (nhds ↑f) → Filter.Tendsto F Filter.atTop (nhds f) :=\n\n/-- A sequence converges if every subsequence has a convergent subsequence. -/\ntheorem ∀ {α : Type u_1} {ι : Type u_2} {x : ι → α} {f : Filter α} {l : Filter ι} [inst : Filter.IsCountablyGenerated l],\n  (∀ (ns : ℕ → ι), Filter.Tendsto ns Filter.atTop l → ∃ ms, Filter.Tendsto (fun n => x (ns (ms n))) Filter.atTop f) →\n    Filter.Tendsto x l f :=\n\n/-- If `𝔖` covers `α`, then the topology of `𝔖`-convergence is T₂. -/\ntheorem ∀ {α : Type u_2} {β : Type u_1} [inst : UniformSpace β] {𝔖 : Set (Set α)} [inst_1 : T2Space β],\n  ⋃₀ 𝔖 = Set.univ → T2Space (UniformOnFun α β 𝔖) :=\n\n/-- Consider a series of functions `∑' n, f n x`. If the series converges at a\npoint, and all functions in the series are differentiable with a summable bound on the derivatives,\nthen the series converges everywhere. -/\ntheorem ∀ {α : Type u_1} {𝕜 : Type u_2} {E : Type u_3} {F : Type u_4} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : CompleteSpace F] {u : α → ℝ}\n  [inst_5 : NormedSpace 𝕜 F] {f : α → E → F} {f' : α → E → E →L[𝕜] F} {x₀ : E},\n  Summable u →\n    (∀ (n : α) (x : E), HasFDerivAt (f n) (f' n x) x) →\n      (∀ (n : α) (x : E), ‖f' n x‖ ≤ u n) → (Summable fun n => f n x₀) → ∀ (x : E), Summable fun n => f n x :=\n\n/-- A uniformly Cauchy sequence converges uniformly to its limit -/\ntheorem ∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {p : Filter ι}\n  {p' : Filter α} [inst_1 : Filter.NeBot p],\n  UniformCauchySeqOnFilter F p p' →\n    (∀ᶠ (x : α) in p', Filter.Tendsto (fun n => F n x) p (nhds (f x))) → TendstoUniformlyOnFilter F f p p' :=\n\n/-- If a Cauchy sequence of continuous linear map converges to a continuous linear map pointwise,\nthen it converges to the same map in norm. This lemma is used to prove that the space of continuous\nlinear maps is complete provided that the codomain is a complete space. -/\ntheorem ∀ {𝕜 : Type u_1} {𝕜₂ : Type u_2} {F : Type u_4} [inst : NormedAddCommGroup F] [inst_1 : NontriviallyNormedField 𝕜]\n  [inst_2 : NontriviallyNormedField 𝕜₂] [inst_3 : NormedSpace 𝕜₂ F] {σ₁₂ : 𝕜 →+* 𝕜₂} {E' : Type u_3}\n  [inst_4 : SeminormedAddCommGroup E'] [inst_5 : NormedSpace 𝕜 E'] [inst_6 : RingHomIsometric σ₁₂]\n  {f : ℕ → E' →SL[σ₁₂] F} {g : E' →SL[σ₁₂] F},\n  Filter.Tendsto (fun n x => ↑(f n) x) Filter.atTop (nhds ↑g) → CauchySeq f → Filter.Tendsto f Filter.atTop (nhds g) :=\n\n/-- If a Cauchy sequence has a convergent subsequence, then it converges. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : UniformSpace α] [inst_1 : SemilatticeSup β] {u : β → α},\n  CauchySeq u →\n    ∀ {ι : Type u_1} {f : ι → β} {p : Filter ι} [inst_2 : Filter.NeBot p],\n      Filter.Tendsto f p Filter.atTop →\n        ∀ {a : α}, Filter.Tendsto (u ∘ f) p (nhds a) → Filter.Tendsto u Filter.atTop (nhds a) :=\n\n/-- Uniform convergence to a constant function is equivalent to convergence in `p ×ˢ ⊤`. -/\ntheorem ∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {p : Filter ι} {c : β},\n  Filter.Tendsto (↿F) (p ×ˢ ⊤) (nhds c) ↔ TendstoUniformly F (fun x => c) p :=\n\n/-- Consider a series of functions `∑' n, f n x` on a preconnected open set. If the series converges\nat a point, and all functions in the series are differentiable with a summable bound on the\nderivatives, then the series converges everywhere on the set. -/\ntheorem ∀ {α : Type u_1} {𝕜 : Type u_3} {E : Type u_2} {F : Type u_4} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : CompleteSpace F] {u : α → ℝ}\n  [inst_5 : NormedSpace 𝕜 F] {f : α → E → F} {f' : α → E → E →L[𝕜] F} {s : Set E} {x₀ : E},\n  Summable u →\n    IsOpen s →\n      IsPreconnected s →\n        (∀ (n : α) (x : E), x ∈ s → HasFDerivAt (f n) (f' n x) x) →\n          (∀ (n : α) (x : E), x ∈ s → ‖f' n x‖ ≤ u n) →\n            x₀ ∈ s → (Summable fun x => f x x₀) → ∀ {x : E}, x ∈ s → Summable fun n => f n x :=\n\n/-- A useful form of the **closed graph theorem** : let `f` be a linear map between two Banach\nspaces. To show that `f` is continuous, it suffices to show that for any convergent sequence\n`uₙ ⟶ x`, if `f(uₙ) ⟶ y` then `y = f(x)`. -/\ntheorem ∀ {𝕜 : Type u_3} [inst : NontriviallyNormedField 𝕜] {E : Type u_1} [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E] {F : Type u_2} [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F]\n  [inst_5 : CompleteSpace F] [inst_6 : CompleteSpace E] (g : E →ₗ[𝕜] F),\n  (∀ (u : ℕ → E) (x : E) (y : F),\n      Filter.Tendsto u Filter.atTop (nhds x) → Filter.Tendsto (↑g ∘ u) Filter.atTop (nhds y) → y = ↑g x) →\n    Continuous ↑g :=\n\n/-- If `ξ` is an integer, all its convergents equal `ξ`. -/\ntheorem ∀ {ξ : ℤ} (n : ℕ), Real.convergent (↑ξ) n = ↑ξ :=\n\n/-- The set of points for which a measurable sequence of functions converges is measurable. -/\ntheorem ∀ {ι : Type u_2} {γ : Type u_1} [tγ : TopologicalSpace γ] [inst : PolishSpace γ] [inst : MeasurableSpace γ]\n  {β : Type u_3} [inst_1 : MeasurableSpace β] [hγ : OpensMeasurableSpace γ] [inst_2 : Countable ι] {l : Filter ι}\n  [inst_3 : Filter.IsCountablyGenerated l] {f : ι → β → γ},\n  (∀ (i : ι), Measurable (f i)) → MeasurableSet {x | ∃ c, Filter.Tendsto (fun n => f n x) l (nhds c)} :=\n\n/-- In a first-countable space, a cluster point `x` of a sequence\nis the limit of some subsequence. -/\ntheorem ∀ {α : Type u} [t : TopologicalSpace α] [inst : TopologicalSpace.FirstCountableTopology α] {u : ℕ → α} {x : α},\n  MapClusterPt x Filter.atTop u → ∃ ψ, StrictMono ψ ∧ Filter.Tendsto (u ∘ ψ) Filter.atTop (nhds x) :=\n\n/-- Convergence a.e. implies convergence in measure in a finite measure space. -/\ntheorem ∀ {α : Type u_1} {E : Type u_2} {m : MeasurableSpace α} {μ : MeasureTheory.Measure α} [inst : MetricSpace E]\n  {f : ℕ → α → E} {g : α → E} [inst_1 : MeasureTheory.IsFiniteMeasure μ],\n  (∀ (n : ℕ), MeasureTheory.AEStronglyMeasurable (f n) μ) →\n    (∀ᵐ (x : α) ∂μ, Filter.Tendsto (fun n => f n x) Filter.atTop (nhds (g x))) →\n      MeasureTheory.TendstoInMeasure μ f Filter.atTop g :=\n\n/-- Let `f : ℕ → α → β` be a sequence of functions on a topological space. Suppose\nthat the family of sets `s n = {x | f (n + 1) x ≠ f n x}` is locally finite. Then there exists a\nfunction `F :  α → β` such that for any `x`, for sufficiently large values of `n`, we have\n`f n =ᶠ[𝓝 x] F`. -/\ntheorem ∀ {α : Type u_2} {X : Type u_1} [inst : TopologicalSpace X] {f : ℕ → X → α},\n  (LocallyFinite fun n => {x | f (n + 1) x ≠ f n x}) → ∃ F, ∀ (x : X), ∀ᶠ (n : ℕ) in Filter.atTop, f n =ᶠ[nhds x] F :=\n\n/-- Let `x_1, x_2, ...` be a sequence of the points of the product space `Π X_α`. Show that this sequence converges to the point `x` if and only if the sequence `π_α(x_i)` converges to `π_α(x)` for each `α`. -/\ntheorem", "choices": ["∀ {J : Type u_1} {X : J → Type u_2} [inst : (j : J) → TopologicalSpace (X j)] {x : (j : J) → X j} {x_i : ℕ → (j : J) → X j},\n  Filter.Tendsto x_i Filter.atTop (nhds x) ↔ ∀ (j : J), Filter.Tendsto (fun n => x_i n j) Filter.atTop (nhds (x j)) ", "∀ {ι : Type u_2} {π : ι → Type u_3} [inst : (i : ι) → TopologicalSpace (π i)] {p : ℕ → Π i, π i} {x : Π i, π i},\n  Filter.Tendsto p Filter.atTop (nhds x) ↔ ∀ (i : ι), Filter.Tendsto (fun n => p n i) Filter.atTop (nhds (x i)) ", "∀ {ι : Type u_1} {X : ι → Type u_2} [inst : (i : ι) → TopologicalSpace (X i)] {x : (i : ι) → X i} {x_1 : ℕ → (i : ι) → X i},\n  Filter.Tendsto x_1 Filter.atTop (nhds x) ↔ ∀ (i : ι), Filter.Tendsto (fun n => x_1 n i) Filter.atTop (nhds (x i)) ", "∀ {α : Type u_2} {X : α → Type u_1} [inst : (a : α) → TopologicalSpace (X a)] {x : (a : α) → X a} {x₀ : ℕ → (a : α) → X a},\n  Filter.Tendsto x₀ Filter.atTop (nhds x) ↔ ∀ a, Filter.Tendsto (fun n => x₀ n a) Filter.atTop (nhds (x a)) ", "∀ {α : Type u_3} {π : α → Type u_1} [inst : (i : α) → TopologicalSpace (π i)] {x : (i : α) → π i} {x_seq : ℕ → (i : α) → π i},\n  Filter.Tendsto x_seq Filter.atTop (nhds x) ↔ ∀ (i : α), Filter.Tendsto (fun n => x_seq n i) Filter.atTop (nhds (x i)) ", "∀ {ι : Type u_1} {X : ι → Type u_2} [inst : (i : ι) → TopologicalSpace (X i)] {x : (i : ι) → X i} {x_seq : ℕ → (i : ι) → X i},\n  Filter.Tendsto x_seq Filter.atTop (nhds x) ↔ ∀ (i : ι), Filter.Tendsto (λ n => x_seq n i) Filter.atTop (nhds (x i)) ", "∀ {ι : Type u_2} {X : ι → Type u_1} [_i : (i : ι) → TopologicalSpace (X i)] {x : (i : ι) → X i} {x' : ℕ → (i : ι) → X i},\n  Filter.Tendsto x' Filter.atTop (nhds x) ↔ ∀ (i : ι), Filter.Tendsto (fun n => x' n i) Filter.atTop (nhds (x i)) ", "∀ {α : Type u_1} {β : Type u_2} [inst : TopologicalSpace β] {X : α → Type u_2} [inst_1 : (a : α) → TopologicalSpace (X a)]\n  {x : (a : α) → X a} {xι : ℕ → (a : α) → X a},\n  Filter.Tendsto xι Filter.atTop (nhds x) ↔ ∀ (a : α), Filter.Tendsto (fun n => xι n a) Filter.atTop (nhds (x a)) ", "∀ {ι : Type u_2} {π : ι → Type u_3} [inst : (i : ι) → TopologicalSpace (π i)] {x : (i : ι) → π i} {x_i : ℕ → (i : ι) → π i},\n  Filter.Tendsto x_i Filter.atTop (nhds x) ↔ ∀ (i : ι), Filter.Tendsto (fun n => x_i n i) Filter.atTop (nhds (x i)) ", "∀ {α : Type u_1} {β : Type u_2} [inst : (a : α) → TopologicalSpace (β a)] {A : α} {F : ℕ → (Π a, β a)} {x : Π a, β a},\n  Filter.Tendsto F Filter.atTop (nhds x) ↔ ∀ a, Filter.Tendsto (fun n => F n a) Filter.atTop (nhds (x a)) "]}
{"docString": "Define `f_n: [0,1] → ℝ` by the equation `f_n(x) = x^n`. Show that the sequence `(f_n(x))` converges for each `x ∈ [0,1]`.", "prompts": "[{\"theorem\":\n  \"∀ (f : CircleDeg1Lift) (x : ℝ),\\n  Filter.Tendsto (fun n => (↑(f ^ n) x - x) / ↑n) Filter.atTop (nhds (CircleDeg1Lift.translationNumber f))\",\n  \"isProp\": true,\n  \"docString\":\n  \"For any `x : ℝ` the sequence $\\\\frac{f^n(x)-x}{n}$ tends to the translation number of `f`.\\nIn particular, this limit does not depend on `x`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : AddCommMonoid α] [inst_1 : TopologicalSpace α] {a : α} {f : ℕ → α},\\n  HasSum f a → Filter.Tendsto (fun n => Finset.sum (Finset.range n) fun i => f i) Filter.atTop (nhds a)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f : ℕ → α` has sum `a`, then the partial sums `∑_{i=0}^{n-1} f i` converge to `a`. \"},\n {\"theorem\": \"∀ (n : ℕ), ConvexOn ℝ (Set.Ici 0) fun x => x ^ n\",\n  \"isProp\": true,\n  \"docString\":\n  \"`x^n`, `n : ℕ` is convex on `[0, +∞)` for all `n`.\\n\\nWe give an elementary proof rather than using the second derivative test, since this lemma is\\nneeded early in the analysis library. \"},\n {\"theorem\": \"∀ {n : ℕ}, 2 ≤ n → StrictConvexOn ℝ (Set.Ici 0) fun x => x ^ n\",\n  \"isProp\": true,\n  \"docString\":\n  \"`x^n`, `n : ℕ` is strictly convex on `[0, +∞)` for all `n` greater than `2`. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] {f : C(ℝ, E)},\\n  (Summable fun n => ‖ContinuousMap.restrict (Set.Icc 0 1) (ContinuousMap.comp f (ContinuousMap.addRight ↑n))‖) →\\n    MeasureTheory.Integrable ↑f\",\n  \"isProp\": true,\n  \"docString\":\n  \"If the sequence with `n`-th term the the sup norm of `λ x, f (x + n)` on the interval `Icc 0 1`,\\nfor `n ∈ ℤ`, is summable, then `f` is integrable on `ℝ`. \"},\n {\"theorem\":\n  \"∀ (f : C(↑unitInterval, ℝ)), Filter.Tendsto (fun n => bernsteinApproximation n f) Filter.atTop (nhds f)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The Bernstein approximations\\n```\\n∑ k : Fin (n+1), f (k/n : ℝ) * n.choose k * x^k * (1-x)^(n-k)\\n```\\nfor a continuous function `f : C([0,1], ℝ)` converge uniformly to `f` as `n` tends to infinity.\\n\\nThis is the proof given in [Richard Beals' *Analysis, an introduction*][beals-analysis], §7D,\\nand reproduced on wikipedia.\\n\"},\n {\"theorem\":\n  \"∀ {f : ℕ → ℕ}, Function.Injective f → Filter.Tendsto f Filter.atTop Filter.atTop\",\n  \"isProp\": true,\n  \"docString\":\n  \"An injective sequence `f : ℕ → ℕ` tends to infinity at infinity. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {X : Type u_1} [inst : TopologicalSpace X] {f : ℕ → X → α},\\n  (LocallyFinite fun n => {x | f (n + 1) x ≠ f n x}) → ∃ F, ∀ (x : X), ∀ᶠ (n : ℕ) in Filter.atTop, f n =ᶠ[nhds x] F\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `f : ℕ → α → β` be a sequence of functions on a topological space. Suppose\\nthat the family of sets `s n = {x | f (n + 1) x ≠ f n x}` is locally finite. Then there exists a\\nfunction `F :  α → β` such that for any `x`, for sufficiently large values of `n`, we have\\n`f n =ᶠ[𝓝 x] F`. \"},\n {\"theorem\":\n  \"∀ {n : ℕ}, Even n → n ≠ 0 → StrictConvexOn ℝ Set.univ fun x => x ^ n\",\n  \"isProp\": true,\n  \"docString\":\n  \"`x^n`, `n : ℕ` is strictly convex on the whole real line whenever `n ≠ 0` is even. \"},\n {\"theorem\":\n  \"∀ {R : Type u_1} [inst : NormedRing R] {r : ℝ}, 1 < r → Nat.cast =o[Filter.atTop] fun n => r ^ n\",\n  \"isProp\": true,\n  \"docString\": \"For a real `r > 1` we have `n = o(r ^ n)` as `n → ∞`. \"},\n {\"theorem\": \"∀ {p : ℕ}, (Summable fun n => 1 / ↑n ^ p) ↔ 1 < p\",\n  \"isProp\": true,\n  \"docString\":\n  \"Test for convergence of the `p`-series: the real-valued series `∑' n : ℕ, 1 / n ^ p` converges\\nif and only if `1 < p`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : AddCommGroup α] [inst_1 : TopologicalSpace α] [inst_2 : TopologicalAddGroup α] {a b : α}\\n  {f g : ℕ → α}, HasSum f a → HasSum g b → HasSum (Int.rec f g) (a + b)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f₀, f₁, f₂, ...` and `g₀, g₁, g₂, ...` are both convergent then so is the `ℤ`-indexed\\nsequence: `..., g₂, g₁, g₀, f₀, f₁, f₂, ...`. \"},\n {\"theorem\": \"∀ {p : ℝ}, (Summable fun n => (↑n ^ p)⁻¹) ↔ 1 < p\",\n  \"isProp\": true,\n  \"docString\":\n  \"Test for convergence of the `p`-series: the real-valued series `∑' n : ℕ, (n ^ p)⁻¹` converges\\nif and only if `1 < p`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : Preorder α] {f : α → α} {x : α}, Monotone f → x ≤ f x → Monotone fun n => f^[n] x\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` is a monotone map and `x ≤ f x` at some point `x`, then the iterates `f^[n] x` form\\na monotone sequence. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} [inst : DivisionRing 𝕜] [inst_1 : TopologicalSpace 𝕜] [inst_2 : CharZero 𝕜] [inst_3 : Algebra ℝ 𝕜]\\n  [inst_4 : ContinuousSMul ℝ 𝕜] [inst_5 : TopologicalDivisionRing 𝕜] (x : 𝕜),\\n  Filter.Tendsto (fun n => ↑n / (↑n + x)) Filter.atTop (nhds 1)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The limit of `n / (n + x)` is 1, for any constant `x` (valid in `ℝ` or any topological division\\nalgebra over `ℝ`, e.g., `ℂ`).\\n\\nTODO: introduce a typeclass saying that `1 / n` tends to 0 at top, making it possible to get this\\nstatement simultaneously on `ℚ`, `ℝ` and `ℂ`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {𝕜 : Type u_2} {E : Type u_3} {F : Type u_4} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : CompleteSpace F] {u : α → ℝ}\\n  [inst_5 : NormedSpace 𝕜 F] {f : α → E → F} {f' : α → E → E →L[𝕜] F} {x₀ : E},\\n  Summable u →\\n    (∀ (n : α) (x : E), HasFDerivAt (f n) (f' n x) x) →\\n      (∀ (n : α) (x : E), ‖f' n x‖ ≤ u n) → (Summable fun n => f n x₀) → ∀ (x : E), Summable fun n => f n x\",\n  \"isProp\": true,\n  \"docString\":\n  \"Consider a series of functions `∑' n, f n x`. If the series converges at a\\npoint, and all functions in the series are differentiable with a summable bound on the derivatives,\\nthen the series converges everywhere. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u} [inst : NontriviallyNormedField 𝕜] {E : Type uE} [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] {F : Type uF} [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] {f : E → F}\\n  {n : ℕ∞} {f' : E → FormalMultilinearSeries 𝕜 E F}, HasFTaylorSeriesUpTo n f f' → ContDiff 𝕜 n f\",\n  \"isProp\": true,\n  \"docString\": \"If `f` has a Taylor series up to `n`, then it is `C^n`. \"},\n {\"theorem\":\n  \"∀ (n : ℕ), Filter.Tendsto (fun x => rexp x / x ^ n) Filter.atTop Filter.atTop\",\n  \"isProp\": true,\n  \"docString\":\n  \"The function `exp(x)/x^n` tends to `+∞` at `+∞`, for any natural number `n` \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : LinearOrderedField α] [inst_1 : Archimedean α] {x y : α}, 0 < x → y < 1 → ∃ n, y ^ n < x\",\n  \"isProp\": true,\n  \"docString\":\n  \"For any `y < 1` and any positive `x`, there exists `n : ℕ` with `y ^ n < x`. \"},\n {\"theorem\":\n  \"∀ {β : Type u_1} {f g : β → NNReal} {r : NNReal}, (∀ (b : β), g b ≤ f b) → HasSum f r → ∃ p, p ≤ r ∧ HasSum g p\",\n  \"isProp\": true,\n  \"docString\": \"Comparison test of convergence of `ℝ≥0`-valued series. \"}]\n", "prompt_cons": "/-- For any `x : ℝ` the sequence $\\frac{f^n(x)-x}{n}$ tends to the translation number of `f`.\nIn particular, this limit does not depend on `x`. -/\ntheorem ∀ (f : CircleDeg1Lift) (x : ℝ),\n  Filter.Tendsto (fun n => (↑(f ^ n) x - x) / ↑n) Filter.atTop (nhds (CircleDeg1Lift.translationNumber f)) :=\n\n/-- If `f : ℕ → α` has sum `a`, then the partial sums `∑_{i=0}^{n-1} f i` converge to `a`. -/\ntheorem ∀ {α : Type u_1} [inst : AddCommMonoid α] [inst_1 : TopologicalSpace α] {a : α} {f : ℕ → α},\n  HasSum f a → Filter.Tendsto (fun n => Finset.sum (Finset.range n) fun i => f i) Filter.atTop (nhds a) :=\n\n/-- `x^n`, `n : ℕ` is convex on `[0, +∞)` for all `n`.\n\nWe give an elementary proof rather than using the second derivative test, since this lemma is\nneeded early in the analysis library. -/\ntheorem ∀ (n : ℕ), ConvexOn ℝ (Set.Ici 0) fun x => x ^ n :=\n\n/-- `x^n`, `n : ℕ` is strictly convex on `[0, +∞)` for all `n` greater than `2`. -/\ntheorem ∀ {n : ℕ}, 2 ≤ n → StrictConvexOn ℝ (Set.Ici 0) fun x => x ^ n :=\n\n/-- If the sequence with `n`-th term the the sup norm of `λ x, f (x + n)` on the interval `Icc 0 1`,\nfor `n ∈ ℤ`, is summable, then `f` is integrable on `ℝ`. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] {f : C(ℝ, E)},\n  (Summable fun n => ‖ContinuousMap.restrict (Set.Icc 0 1) (ContinuousMap.comp f (ContinuousMap.addRight ↑n))‖) →\n    MeasureTheory.Integrable ↑f :=\n\n/-- The Bernstein approximations\n```\n∑ k : Fin (n+1), f (k/n : ℝ) * n.choose k * x^k * (1-x)^(n-k)\n```\nfor a continuous function `f : C([0,1], ℝ)` converge uniformly to `f` as `n` tends to infinity.\n\nThis is the proof given in [Richard Beals' *Analysis, an introduction*][beals-analysis], §7D,\nand reproduced on wikipedia. -/\ntheorem ∀ (f : C(↑unitInterval, ℝ)), Filter.Tendsto (fun n => bernsteinApproximation n f) Filter.atTop (nhds f) :=\n\n/-- An injective sequence `f : ℕ → ℕ` tends to infinity at infinity. -/\ntheorem ∀ {f : ℕ → ℕ}, Function.Injective f → Filter.Tendsto f Filter.atTop Filter.atTop :=\n\n/-- Let `f : ℕ → α → β` be a sequence of functions on a topological space. Suppose\nthat the family of sets `s n = {x | f (n + 1) x ≠ f n x}` is locally finite. Then there exists a\nfunction `F :  α → β` such that for any `x`, for sufficiently large values of `n`, we have\n`f n =ᶠ[𝓝 x] F`. -/\ntheorem ∀ {α : Type u_2} {X : Type u_1} [inst : TopologicalSpace X] {f : ℕ → X → α},\n  (LocallyFinite fun n => {x | f (n + 1) x ≠ f n x}) → ∃ F, ∀ (x : X), ∀ᶠ (n : ℕ) in Filter.atTop, f n =ᶠ[nhds x] F :=\n\n/-- `x^n`, `n : ℕ` is strictly convex on the whole real line whenever `n ≠ 0` is even. -/\ntheorem ∀ {n : ℕ}, Even n → n ≠ 0 → StrictConvexOn ℝ Set.univ fun x => x ^ n :=\n\n/-- For a real `r > 1` we have `n = o(r ^ n)` as `n → ∞`. -/\ntheorem ∀ {R : Type u_1} [inst : NormedRing R] {r : ℝ}, 1 < r → Nat.cast =o[Filter.atTop] fun n => r ^ n :=\n\n/-- Test for convergence of the `p`-series: the real-valued series `∑' n : ℕ, 1 / n ^ p` converges\nif and only if `1 < p`. -/\ntheorem ∀ {p : ℕ}, (Summable fun n => 1 / ↑n ^ p) ↔ 1 < p :=\n\n/-- If `f₀, f₁, f₂, ...` and `g₀, g₁, g₂, ...` are both convergent then so is the `ℤ`-indexed\nsequence: `..., g₂, g₁, g₀, f₀, f₁, f₂, ...`. -/\ntheorem ∀ {α : Type u_1} [inst : AddCommGroup α] [inst_1 : TopologicalSpace α] [inst_2 : TopologicalAddGroup α] {a b : α}\n  {f g : ℕ → α}, HasSum f a → HasSum g b → HasSum (Int.rec f g) (a + b) :=\n\n/-- Test for convergence of the `p`-series: the real-valued series `∑' n : ℕ, (n ^ p)⁻¹` converges\nif and only if `1 < p`. -/\ntheorem ∀ {p : ℝ}, (Summable fun n => (↑n ^ p)⁻¹) ↔ 1 < p :=\n\n/-- If `f` is a monotone map and `x ≤ f x` at some point `x`, then the iterates `f^[n] x` form\na monotone sequence. -/\ntheorem ∀ {α : Type u_1} [inst : Preorder α] {f : α → α} {x : α}, Monotone f → x ≤ f x → Monotone fun n => f^[n] x :=\n\n/-- The limit of `n / (n + x)` is 1, for any constant `x` (valid in `ℝ` or any topological division\nalgebra over `ℝ`, e.g., `ℂ`).\n\nTODO: introduce a typeclass saying that `1 / n` tends to 0 at top, making it possible to get this\nstatement simultaneously on `ℚ`, `ℝ` and `ℂ`. -/\ntheorem ∀ {𝕜 : Type u_1} [inst : DivisionRing 𝕜] [inst_1 : TopologicalSpace 𝕜] [inst_2 : CharZero 𝕜] [inst_3 : Algebra ℝ 𝕜]\n  [inst_4 : ContinuousSMul ℝ 𝕜] [inst_5 : TopologicalDivisionRing 𝕜] (x : 𝕜),\n  Filter.Tendsto (fun n => ↑n / (↑n + x)) Filter.atTop (nhds 1) :=\n\n/-- Consider a series of functions `∑' n, f n x`. If the series converges at a\npoint, and all functions in the series are differentiable with a summable bound on the derivatives,\nthen the series converges everywhere. -/\ntheorem ∀ {α : Type u_1} {𝕜 : Type u_2} {E : Type u_3} {F : Type u_4} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : CompleteSpace F] {u : α → ℝ}\n  [inst_5 : NormedSpace 𝕜 F] {f : α → E → F} {f' : α → E → E →L[𝕜] F} {x₀ : E},\n  Summable u →\n    (∀ (n : α) (x : E), HasFDerivAt (f n) (f' n x) x) →\n      (∀ (n : α) (x : E), ‖f' n x‖ ≤ u n) → (Summable fun n => f n x₀) → ∀ (x : E), Summable fun n => f n x :=\n\n/-- If `f` has a Taylor series up to `n`, then it is `C^n`. -/\ntheorem ∀ {𝕜 : Type u} [inst : NontriviallyNormedField 𝕜] {E : Type uE} [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E] {F : Type uF} [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] {f : E → F}\n  {n : ℕ∞} {f' : E → FormalMultilinearSeries 𝕜 E F}, HasFTaylorSeriesUpTo n f f' → ContDiff 𝕜 n f :=\n\n/-- The function `exp(x)/x^n` tends to `+∞` at `+∞`, for any natural number `n` -/\ntheorem ∀ (n : ℕ), Filter.Tendsto (fun x => rexp x / x ^ n) Filter.atTop Filter.atTop :=\n\n/-- For any `y < 1` and any positive `x`, there exists `n : ℕ` with `y ^ n < x`. -/\ntheorem ∀ {α : Type u_1} [inst : LinearOrderedField α] [inst_1 : Archimedean α] {x y : α}, 0 < x → y < 1 → ∃ n, y ^ n < x :=\n\n/-- Comparison test of convergence of `ℝ≥0`-valued series. -/\ntheorem ∀ {β : Type u_1} {f g : β → NNReal} {r : NNReal}, (∀ (b : β), g b ≤ f b) → HasSum f r → ∃ p, p ≤ r ∧ HasSum g p :=\n\n/-- Define `f_n: [0,1] → ℝ` by the equation `f_n(x) = x^n`. Show that the sequence `(f_n(x))` converges for each `x ∈ [0,1]`. -/\ntheorem", "choices": ["∀ (x : ℝ) (hx : 0 ≤ x) (hx' : x ≤ 1),\n  Filter.Tendsto (fun n => x ^ n) Filter.atTop (nhds 0) ", "∀ (n : ℕ) (x : ℝ), 0 ≤ x → x ≤ 1 → Filter.Tendsto (fun n => x ^ n) Filter.atTop (nhds 0) ", "∀ (x : ℝ), x ∈ Set.Icc 0 1 → Filter.Tendsto (fun n => x ^ n) Filter.atTop (nhds 0) ", "∀ (x : ℝ), 0 ≤ x ∧ x ≤ 1 → Filter.Tendsto (fun n => x ^ n) Filter.atTop (nhds 0) ", "∀ (x : ℝ), x ∈ [0, 1] → Filter.Tendsto (fun n => x^n) Filter.atTop (nhds 0) ", "∀ (x : ℝ), 0 ≤ x → x ≤ 1 → Filter.Tendsto (fun n => x ^ n) Filter.atTop (nhds 0) ", "∀ {x : ℝ} (hx : 0 ≤ x) (hx' : x ≤ 1),\n  Filter.Tendsto (fun n => x ^ n) Filter.atTop (nhds 0) ", "∀ (x : ℝ) (hx : x ∈ Set.Icc 0 1), Filter.Tendsto (fun n => x ^ n) Filter.atTop (nhds 0) ", "forall (x : ℝ), 0 ≤ x → x ≤ 1 → Filter.Tendsto (fun n => x ^ n) Filter.atTop (nhds 0) ", "∀ (x : ℝ) (hx : x ∈ Set.Icc 0 1),\n  Filter.Tendsto (fun n => x ^ n) Filter.atTop (nhds 0) "]}
{"docString": "Let `X` be a topological space and let `Y` be a metric space. Let `f_n: X → Y` be a sequence of continuous functions. Let `x_n` be a sequence of points of `X` converging to `x`. Show that if the sequence `(f_n)` converges uniformly to `f`, then `(f_n(x_n))` converges to `f(x)`.", "prompts": "[{\"theorem\":\n  \"∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {x : α} {p : Filter ι}\\n  {g : ι → α} [inst_1 : TopologicalSpace α],\\n  ContinuousAt f x →\\n    Filter.Tendsto g p (nhds x) →\\n      (∀ (u : Set (β × β)), u ∈ uniformity β → ∃ t, t ∈ nhds x ∧ ∀ᶠ (n : ι) in p, ∀ (y : α), y ∈ t → (f y, F n y) ∈ u) →\\n        Filter.Tendsto (fun n => F n (g n)) p (nhds (f x))\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `Fₙ` converges locally uniformly on a neighborhood of `x` to a function `f` which is\\ncontinuous at `x`, and `gₙ` tends to `x`, then `Fₙ (gₙ)` tends to `f x`. \"},\n {\"theorem\":\n  \"∀ {ι : Type u_3} {l : Filter ι} {E : Type u_1} [inst : NormedAddCommGroup E] {𝕜 : Type u_4} [inst_1 : IsROrC 𝕜]\\n  [inst_2 : NormedSpace 𝕜 E] {G : Type u_2} [inst_3 : NormedAddCommGroup G] [inst_4 : NormedSpace 𝕜 G] {f : ι → E → G}\\n  {g : E → G} {f' : ι → E → E →L[𝕜] G} {g' : E → E →L[𝕜] G} {x : E},\\n  TendstoUniformlyOnFilter f' g' l (nhds x) →\\n    (∀ᶠ (n : ι × E) in l ×ˢ nhds x, HasFDerivAt (f n.fst) (f' n.fst n.snd) n.snd) →\\n      (∀ᶠ (y : E) in nhds x, Filter.Tendsto (fun n => f n y) l (nhds (g y))) →\\n        TendstoUniformlyOnFilter (fun n y => (↑‖y - x‖)⁻¹ • (f n y - f n x)) (fun y => (↑‖y - x‖)⁻¹ • (g y - g x)) l\\n          (nhds x)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f_n → g` pointwise and the derivatives `(f_n)' → h` _uniformly_ converge, then\\nin fact for a fixed `y`, the difference quotients `‖z - y‖⁻¹ • (f_n z - f_n y)` converge\\n_uniformly_ to `‖z - y‖⁻¹ • (g z - g y)` \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {s : Set α} {x : α}\\n  {p : Filter ι} {g : ι → α} [inst_1 : TopologicalSpace α],\\n  ContinuousWithinAt f s x →\\n    Filter.Tendsto g p (nhdsWithin x s) →\\n      (∀ (u : Set (β × β)),\\n          u ∈ uniformity β → ∃ t, t ∈ nhdsWithin x s ∧ ∀ᶠ (n : ι) in p, ∀ (y : α), y ∈ t → (f y, F n y) ∈ u) →\\n        Filter.Tendsto (fun n => F n (g n)) p (nhds (f x))\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `Fₙ` converges locally uniformly on a neighborhood of `x` within a set `s` to a function `f`\\nwhich is continuous at `x` within `s `, and `gₙ` tends to `x` within `s`, then `Fₙ (gₙ)` tends\\nto `f x`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_3} [inst : NontriviallyNormedField 𝕜] {E : Type u_1} [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] {F : Type u_2} [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F]\\n  [inst_5 : CompleteSpace F] [inst_6 : CompleteSpace E] (g : E →ₗ[𝕜] F),\\n  (∀ (u : ℕ → E) (x : E) (y : F),\\n      Filter.Tendsto u Filter.atTop (nhds x) → Filter.Tendsto (↑g ∘ u) Filter.atTop (nhds y) → y = ↑g x) →\\n    Continuous ↑g\",\n  \"isProp\": true,\n  \"docString\":\n  \"A useful form of the **closed graph theorem** : let `f` be a linear map between two Banach\\nspaces. To show that `f` is continuous, it suffices to show that for any convergent sequence\\n`uₙ ⟶ x`, if `f(uₙ) ⟶ y` then `y = f(x)`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {X : Type u_1} [inst : TopologicalSpace X] {f : ℕ → X → α},\\n  (LocallyFinite fun n => {x | f (n + 1) x ≠ f n x}) → ∃ F, ∀ (x : X), ∀ᶠ (n : ℕ) in Filter.atTop, f n =ᶠ[nhds x] F\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `f : ℕ → α → β` be a sequence of functions on a topological space. Suppose\\nthat the family of sets `s n = {x | f (n + 1) x ≠ f n x}` is locally finite. Then there exists a\\nfunction `F :  α → β` such that for any `x`, for sufficiently large values of `n`, we have\\n`f n =ᶠ[𝓝 x] F`. \"},\n {\"theorem\":\n  \"∀ {X : Type u_2} [inst : TopologicalSpace X] {π : X → Sort u_1} {f : ℕ → (x : X) → π x},\\n  (LocallyFinite fun n => {x | f (n + 1) x ≠ f n x}) →\\n    ∃ F, ∀ (x : X), ∀ᶠ (n : ℕ) in Filter.atTop, ∀ᶠ (y : X) in nhds x, f n y = F y\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `f : ℕ → Π a, β a` be a sequence of (dependent) functions on a topological space. Suppose\\nthat the family of sets `s n = {x | f (n + 1) x ≠ f n x}` is locally finite. Then there exists a\\nfunction `F : Π a, β a` such that for any `x`, for sufficiently large values of `n`, we have\\n`f n y = F y` in a neighbourhood of `x`. \"},\n {\"theorem\":\n  \"∀ {α : Type u₁} {β : Type u₂} [inst : TopologicalSpace α] [inst_1 : UniformSpace β] {f : C(α, β)} {ι : Type u₃}\\n  {p : Filter ι} {F : ι → C(α, β)} [inst_2 : CompactSpace α],\\n  Filter.Tendsto F p (nhds f) ↔ TendstoUniformly (fun i a => ↑(F i) a) (↑f) p\",\n  \"isProp\": true,\n  \"docString\":\n  \"Convergence in the compact-open topology is the same as uniform convergence for sequences of\\ncontinuous functions on a compact space. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {E : Type u_2} {m : MeasurableSpace α} {μ : MeasureTheory.Measure α} [inst : MetricSpace E]\\n  {f : ℕ → α → E} {g : α → E},\\n  MeasureTheory.TendstoInMeasure μ f Filter.atTop g →\\n    ∃ ns, StrictMono ns ∧ ∀ᵐ (x : α) ∂μ, Filter.Tendsto (fun i => f (ns i) x) Filter.atTop (nhds (g x))\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` is a sequence of functions which converges in measure to `g`, then there exists a\\nsubsequence of `f` which converges a.e. to `g`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {s : Set α} {x : α}\\n  {p : Filter ι} {g : ι → α} [inst_1 : TopologicalSpace α],\\n  TendstoLocallyUniformlyOn F f p s →\\n    ContinuousWithinAt f s x →\\n      x ∈ s → Filter.Tendsto g p (nhdsWithin x s) → Filter.Tendsto (fun n => F n (g n)) p (nhds (f x))\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `Fₙ` tends locally uniformly to `f` on a set `s`, and `gₙ` tends to `x` within `s`, then\\n`Fₙ gₙ` tends to `f x` if `f` is continuous at `x` within `s` and `x ∈ s`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {s : Set α} {x : α}\\n  {p : Filter ι} {g : ι → α} [inst_1 : TopologicalSpace α],\\n  TendstoUniformlyOn F f p s →\\n    ContinuousWithinAt f s x → Filter.Tendsto g p (nhdsWithin x s) → Filter.Tendsto (fun n => F n (g n)) p (nhds (f x))\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `Fₙ` tends uniformly to `f` on a set `s`, and `gₙ` tends to `x` within `s`, then `Fₙ gₙ`\\ntends to `f x` if `f` is continuous at `x` within `s`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {x : α} {p : Filter ι}\\n  {g : ι → α} [inst_1 : TopologicalSpace α],\\n  TendstoLocallyUniformly F f p →\\n    ContinuousAt f x → Filter.Tendsto g p (nhds x) → Filter.Tendsto (fun n => F n (g n)) p (nhds (f x))\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `Fₙ` tends locally uniformly to `f`, and `gₙ` tends to `x`, then `Fₙ gₙ` tends to `f x`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {s : Set α} {p : Filter ι},\\n  TendstoUniformlyOn F f p s → ∀ {x : α}, x ∈ s → Filter.Tendsto (fun n => F n x) p (nhds (f x))\",\n  \"isProp\": true,\n  \"docString\": \"Uniform converence implies pointwise convergence. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] {A : Set X} {f : X → Y}\\n  {x : X},\\n  (∃ y, Filter.Tendsto f (nhdsWithin x A) (nhds y)) → Filter.Tendsto f (nhdsWithin x A) (nhds (extendFrom A f x))\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` converges to some `y` as `x` tends to `x₀` within `A`,\\nthen `f` tends to `extendFrom A f x` as `x` tends to `x₀`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {x : α} {p : Filter ι}\\n  {g : ι → α} [inst_1 : TopologicalSpace α],\\n  TendstoUniformly F f p →\\n    ContinuousAt f x → Filter.Tendsto g p (nhds x) → Filter.Tendsto (fun n => F n (g n)) p (nhds (f x))\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `Fₙ` tends uniformly to `f`, and `gₙ` tends to `x`, then `Fₙ gₙ` tends to `f x`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {s : Set α} {p : Filter ι},\\n  TendstoUniformlyOn F f p s → UniformCauchySeqOn F p s\",\n  \"isProp\": true,\n  \"docString\": \"A sequence that converges uniformly is also uniformly Cauchy \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {𝕜 : Type u_3} {E : Type u_2} {F : Type u_4} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : CompleteSpace F] {u : α → ℝ}\\n  [inst_5 : NormedSpace 𝕜 F] {f : α → E → F} {f' : α → E → E →L[𝕜] F} {s : Set E} {x₀ : E},\\n  Summable u →\\n    IsOpen s →\\n      IsPreconnected s →\\n        (∀ (n : α) (x : E), x ∈ s → HasFDerivAt (f n) (f' n x) x) →\\n          (∀ (n : α) (x : E), x ∈ s → ‖f' n x‖ ≤ u n) →\\n            x₀ ∈ s → (Summable fun x => f x x₀) → ∀ {x : E}, x ∈ s → Summable fun n => f n x\",\n  \"isProp\": true,\n  \"docString\":\n  \"Consider a series of functions `∑' n, f n x` on a preconnected open set. If the series converges\\nat a point, and all functions in the series are differentiable with a summable bound on the\\nderivatives, then the series converges everywhere on the set. \"},\n {\"theorem\":\n  \"∀ {T : ℝ} [hT : Fact (0 < T)] {f : C(AddCircle T, ℂ)},\\n  Summable (fourierCoeff ↑f) → HasSum (fun i => fourierCoeff (↑f) i • fourier i) f\",\n  \"isProp\": true,\n  \"docString\":\n  \"If the sequence of Fourier coefficients of `f` is summable, then the Fourier series converges\\nuniformly to `f`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {𝕜 : Type u_2} {E : Type u_3} {F : Type u_4} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : CompleteSpace F] {u : α → ℝ}\\n  [inst_5 : NormedSpace 𝕜 F] {f : α → E → F} {f' : α → E → E →L[𝕜] F} {x₀ : E},\\n  Summable u →\\n    (∀ (n : α) (x : E), HasFDerivAt (f n) (f' n x) x) →\\n      (∀ (n : α) (x : E), ‖f' n x‖ ≤ u n) → (Summable fun n => f n x₀) → ∀ (x : E), Summable fun n => f n x\",\n  \"isProp\": true,\n  \"docString\":\n  \"Consider a series of functions `∑' n, f n x`. If the series converges at a\\npoint, and all functions in the series are differentiable with a summable bound on the derivatives,\\nthen the series converges everywhere. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {p : Filter ι}\\n  {p' : Filter α} [inst_1 : Filter.NeBot p],\\n  UniformCauchySeqOnFilter F p p' →\\n    (∀ᶠ (x : α) in p', Filter.Tendsto (fun n => F n x) p (nhds (f x))) → TendstoUniformlyOnFilter F f p p'\",\n  \"isProp\": true,\n  \"docString\": \"A uniformly Cauchy sequence converges uniformly to its limit \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : T2Space α] {f : α → α} {x y : α},\\n  Filter.Tendsto (fun n => f^[n] x) Filter.atTop (nhds y) → ContinuousAt f y → Function.IsFixedPt f y\",\n  \"isProp\": true,\n  \"docString\":\n  \"If the iterates `f^[n] x` converge to `y` and `f` is continuous at `y`,\\nthen `y` is a fixed point for `f`. \"}]\n", "prompt_cons": "/-- If `Fₙ` converges locally uniformly on a neighborhood of `x` to a function `f` which is\ncontinuous at `x`, and `gₙ` tends to `x`, then `Fₙ (gₙ)` tends to `f x`. -/\ntheorem ∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {x : α} {p : Filter ι}\n  {g : ι → α} [inst_1 : TopologicalSpace α],\n  ContinuousAt f x →\n    Filter.Tendsto g p (nhds x) →\n      (∀ (u : Set (β × β)), u ∈ uniformity β → ∃ t, t ∈ nhds x ∧ ∀ᶠ (n : ι) in p, ∀ (y : α), y ∈ t → (f y, F n y) ∈ u) →\n        Filter.Tendsto (fun n => F n (g n)) p (nhds (f x)) :=\n\n/-- If `f_n → g` pointwise and the derivatives `(f_n)' → h` _uniformly_ converge, then\nin fact for a fixed `y`, the difference quotients `‖z - y‖⁻¹ • (f_n z - f_n y)` converge\n_uniformly_ to `‖z - y‖⁻¹ • (g z - g y)` -/\ntheorem ∀ {ι : Type u_3} {l : Filter ι} {E : Type u_1} [inst : NormedAddCommGroup E] {𝕜 : Type u_4} [inst_1 : IsROrC 𝕜]\n  [inst_2 : NormedSpace 𝕜 E] {G : Type u_2} [inst_3 : NormedAddCommGroup G] [inst_4 : NormedSpace 𝕜 G] {f : ι → E → G}\n  {g : E → G} {f' : ι → E → E →L[𝕜] G} {g' : E → E →L[𝕜] G} {x : E},\n  TendstoUniformlyOnFilter f' g' l (nhds x) →\n    (∀ᶠ (n : ι × E) in l ×ˢ nhds x, HasFDerivAt (f n.fst) (f' n.fst n.snd) n.snd) →\n      (∀ᶠ (y : E) in nhds x, Filter.Tendsto (fun n => f n y) l (nhds (g y))) →\n        TendstoUniformlyOnFilter (fun n y => (↑‖y - x‖)⁻¹ • (f n y - f n x)) (fun y => (↑‖y - x‖)⁻¹ • (g y - g x)) l\n          (nhds x) :=\n\n/-- If `Fₙ` converges locally uniformly on a neighborhood of `x` within a set `s` to a function `f`\nwhich is continuous at `x` within `s `, and `gₙ` tends to `x` within `s`, then `Fₙ (gₙ)` tends\nto `f x`. -/\ntheorem ∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {s : Set α} {x : α}\n  {p : Filter ι} {g : ι → α} [inst_1 : TopologicalSpace α],\n  ContinuousWithinAt f s x →\n    Filter.Tendsto g p (nhdsWithin x s) →\n      (∀ (u : Set (β × β)),\n          u ∈ uniformity β → ∃ t, t ∈ nhdsWithin x s ∧ ∀ᶠ (n : ι) in p, ∀ (y : α), y ∈ t → (f y, F n y) ∈ u) →\n        Filter.Tendsto (fun n => F n (g n)) p (nhds (f x)) :=\n\n/-- A useful form of the **closed graph theorem** : let `f` be a linear map between two Banach\nspaces. To show that `f` is continuous, it suffices to show that for any convergent sequence\n`uₙ ⟶ x`, if `f(uₙ) ⟶ y` then `y = f(x)`. -/\ntheorem ∀ {𝕜 : Type u_3} [inst : NontriviallyNormedField 𝕜] {E : Type u_1} [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E] {F : Type u_2} [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F]\n  [inst_5 : CompleteSpace F] [inst_6 : CompleteSpace E] (g : E →ₗ[𝕜] F),\n  (∀ (u : ℕ → E) (x : E) (y : F),\n      Filter.Tendsto u Filter.atTop (nhds x) → Filter.Tendsto (↑g ∘ u) Filter.atTop (nhds y) → y = ↑g x) →\n    Continuous ↑g :=\n\n/-- Let `f : ℕ → α → β` be a sequence of functions on a topological space. Suppose\nthat the family of sets `s n = {x | f (n + 1) x ≠ f n x}` is locally finite. Then there exists a\nfunction `F :  α → β` such that for any `x`, for sufficiently large values of `n`, we have\n`f n =ᶠ[𝓝 x] F`. -/\ntheorem ∀ {α : Type u_2} {X : Type u_1} [inst : TopologicalSpace X] {f : ℕ → X → α},\n  (LocallyFinite fun n => {x | f (n + 1) x ≠ f n x}) → ∃ F, ∀ (x : X), ∀ᶠ (n : ℕ) in Filter.atTop, f n =ᶠ[nhds x] F :=\n\n/-- Let `f : ℕ → Π a, β a` be a sequence of (dependent) functions on a topological space. Suppose\nthat the family of sets `s n = {x | f (n + 1) x ≠ f n x}` is locally finite. Then there exists a\nfunction `F : Π a, β a` such that for any `x`, for sufficiently large values of `n`, we have\n`f n y = F y` in a neighbourhood of `x`. -/\ntheorem ∀ {X : Type u_2} [inst : TopologicalSpace X] {π : X → Sort u_1} {f : ℕ → (x : X) → π x},\n  (LocallyFinite fun n => {x | f (n + 1) x ≠ f n x}) →\n    ∃ F, ∀ (x : X), ∀ᶠ (n : ℕ) in Filter.atTop, ∀ᶠ (y : X) in nhds x, f n y = F y :=\n\n/-- Convergence in the compact-open topology is the same as uniform convergence for sequences of\ncontinuous functions on a compact space. -/\ntheorem ∀ {α : Type u₁} {β : Type u₂} [inst : TopologicalSpace α] [inst_1 : UniformSpace β] {f : C(α, β)} {ι : Type u₃}\n  {p : Filter ι} {F : ι → C(α, β)} [inst_2 : CompactSpace α],\n  Filter.Tendsto F p (nhds f) ↔ TendstoUniformly (fun i a => ↑(F i) a) (↑f) p :=\n\n/-- If `f` is a sequence of functions which converges in measure to `g`, then there exists a\nsubsequence of `f` which converges a.e. to `g`. -/\ntheorem ∀ {α : Type u_1} {E : Type u_2} {m : MeasurableSpace α} {μ : MeasureTheory.Measure α} [inst : MetricSpace E]\n  {f : ℕ → α → E} {g : α → E},\n  MeasureTheory.TendstoInMeasure μ f Filter.atTop g →\n    ∃ ns, StrictMono ns ∧ ∀ᵐ (x : α) ∂μ, Filter.Tendsto (fun i => f (ns i) x) Filter.atTop (nhds (g x)) :=\n\n/-- If `Fₙ` tends locally uniformly to `f` on a set `s`, and `gₙ` tends to `x` within `s`, then\n`Fₙ gₙ` tends to `f x` if `f` is continuous at `x` within `s` and `x ∈ s`. -/\ntheorem ∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {s : Set α} {x : α}\n  {p : Filter ι} {g : ι → α} [inst_1 : TopologicalSpace α],\n  TendstoLocallyUniformlyOn F f p s →\n    ContinuousWithinAt f s x →\n      x ∈ s → Filter.Tendsto g p (nhdsWithin x s) → Filter.Tendsto (fun n => F n (g n)) p (nhds (f x)) :=\n\n/-- If `Fₙ` tends uniformly to `f` on a set `s`, and `gₙ` tends to `x` within `s`, then `Fₙ gₙ`\ntends to `f x` if `f` is continuous at `x` within `s`. -/\ntheorem ∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {s : Set α} {x : α}\n  {p : Filter ι} {g : ι → α} [inst_1 : TopologicalSpace α],\n  TendstoUniformlyOn F f p s →\n    ContinuousWithinAt f s x → Filter.Tendsto g p (nhdsWithin x s) → Filter.Tendsto (fun n => F n (g n)) p (nhds (f x)) :=\n\n/-- If `Fₙ` tends locally uniformly to `f`, and `gₙ` tends to `x`, then `Fₙ gₙ` tends to `f x`. -/\ntheorem ∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {x : α} {p : Filter ι}\n  {g : ι → α} [inst_1 : TopologicalSpace α],\n  TendstoLocallyUniformly F f p →\n    ContinuousAt f x → Filter.Tendsto g p (nhds x) → Filter.Tendsto (fun n => F n (g n)) p (nhds (f x)) :=\n\n/-- Uniform converence implies pointwise convergence. -/\ntheorem ∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {s : Set α} {p : Filter ι},\n  TendstoUniformlyOn F f p s → ∀ {x : α}, x ∈ s → Filter.Tendsto (fun n => F n x) p (nhds (f x)) :=\n\n/-- If `f` converges to some `y` as `x` tends to `x₀` within `A`,\nthen `f` tends to `extendFrom A f x` as `x` tends to `x₀`. -/\ntheorem ∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] {A : Set X} {f : X → Y}\n  {x : X},\n  (∃ y, Filter.Tendsto f (nhdsWithin x A) (nhds y)) → Filter.Tendsto f (nhdsWithin x A) (nhds (extendFrom A f x)) :=\n\n/-- If `Fₙ` tends uniformly to `f`, and `gₙ` tends to `x`, then `Fₙ gₙ` tends to `f x`. -/\ntheorem ∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {x : α} {p : Filter ι}\n  {g : ι → α} [inst_1 : TopologicalSpace α],\n  TendstoUniformly F f p →\n    ContinuousAt f x → Filter.Tendsto g p (nhds x) → Filter.Tendsto (fun n => F n (g n)) p (nhds (f x)) :=\n\n/-- A sequence that converges uniformly is also uniformly Cauchy -/\ntheorem ∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {s : Set α} {p : Filter ι},\n  TendstoUniformlyOn F f p s → UniformCauchySeqOn F p s :=\n\n/-- Consider a series of functions `∑' n, f n x` on a preconnected open set. If the series converges\nat a point, and all functions in the series are differentiable with a summable bound on the\nderivatives, then the series converges everywhere on the set. -/\ntheorem ∀ {α : Type u_1} {𝕜 : Type u_3} {E : Type u_2} {F : Type u_4} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : CompleteSpace F] {u : α → ℝ}\n  [inst_5 : NormedSpace 𝕜 F] {f : α → E → F} {f' : α → E → E →L[𝕜] F} {s : Set E} {x₀ : E},\n  Summable u →\n    IsOpen s →\n      IsPreconnected s →\n        (∀ (n : α) (x : E), x ∈ s → HasFDerivAt (f n) (f' n x) x) →\n          (∀ (n : α) (x : E), x ∈ s → ‖f' n x‖ ≤ u n) →\n            x₀ ∈ s → (Summable fun x => f x x₀) → ∀ {x : E}, x ∈ s → Summable fun n => f n x :=\n\n/-- If the sequence of Fourier coefficients of `f` is summable, then the Fourier series converges\nuniformly to `f`. -/\ntheorem ∀ {T : ℝ} [hT : Fact (0 < T)] {f : C(AddCircle T, ℂ)},\n  Summable (fourierCoeff ↑f) → HasSum (fun i => fourierCoeff (↑f) i • fourier i) f :=\n\n/-- Consider a series of functions `∑' n, f n x`. If the series converges at a\npoint, and all functions in the series are differentiable with a summable bound on the derivatives,\nthen the series converges everywhere. -/\ntheorem ∀ {α : Type u_1} {𝕜 : Type u_2} {E : Type u_3} {F : Type u_4} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : CompleteSpace F] {u : α → ℝ}\n  [inst_5 : NormedSpace 𝕜 F] {f : α → E → F} {f' : α → E → E →L[𝕜] F} {x₀ : E},\n  Summable u →\n    (∀ (n : α) (x : E), HasFDerivAt (f n) (f' n x) x) →\n      (∀ (n : α) (x : E), ‖f' n x‖ ≤ u n) → (Summable fun n => f n x₀) → ∀ (x : E), Summable fun n => f n x :=\n\n/-- A uniformly Cauchy sequence converges uniformly to its limit -/\ntheorem ∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {p : Filter ι}\n  {p' : Filter α} [inst_1 : Filter.NeBot p],\n  UniformCauchySeqOnFilter F p p' →\n    (∀ᶠ (x : α) in p', Filter.Tendsto (fun n => F n x) p (nhds (f x))) → TendstoUniformlyOnFilter F f p p' :=\n\n/-- If the iterates `f^[n] x` converge to `y` and `f` is continuous at `y`,\nthen `y` is a fixed point for `f`. -/\ntheorem ∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : T2Space α] {f : α → α} {x y : α},\n  Filter.Tendsto (fun n => f^[n] x) Filter.atTop (nhds y) → ContinuousAt f y → Function.IsFixedPt f y :=\n\n/-- Let `X` be a topological space and let `Y` be a metric space. Let `f_n: X → Y` be a sequence of continuous functions. Let `x_n` be a sequence of points of `X` converging to `x`. Show that if the sequence `(f_n)` converges uniformly to `f`, then `(f_n(x_n))` converges to `f(x)`. -/\ntheorem", "choices": ["∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] [inst_1 : MetricSpace Y] {f : X → Y} {ι : Type u_3}\n  {p : Filter ι} {F : ι → X → Y} {x : X} {x_n : ι → X},\n  TendstoUniformly F f p →\n    Filter.Tendsto x_n p (nhds x) → Filter.Tendsto (fun n => F n (x_n n)) p (nhds (f x)) ", "∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] [inst_1 : MetricSpace Y] {f : X → Y} {ι : Type u_3}\n  {p : Filter ι} {F : ι → X → Y} {x : X} {x_n : ι → X},\n  TendstoUniformly F f p →\n    ContinuousAt f x → Filter.Tendsto x_n p (nhds x) → Filter.Tendsto (fun n => F n (x_n n)) p (nhds (f x)) ", "∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] [inst_1 : MetricSpace Y] {f : X → Y} {ι : Type u_3}\n  {p : Filter ι} {F : ι → X → Y} {x : X} {x_n : ι → X},\n  TendstoUniformly F f p →\n    Filter.Tendsto x_n p (nhds x) → Filter.Tendsto (fun n => F n (x_n n)) p (nhds (f x)) ", "∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] [inst_1 : MetricSpace Y] {f : X → Y} {x : X} {ι : Type u_3}\n  {p : Filter ι} {F : ι → (X → Y)} {x_n : ι → X},\n  TendstoUniformly F f p →\n    ContinuousAt f x → Filter.Tendsto x_n p (nhds x) → Filter.Tendsto (fun n => F n (x_n n)) p (nhds (f x)) ", "∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] [inst_1 : MetricSpace Y] {f_n : ℕ → X → Y} {f : X → Y} {x_n : ℕ → X}\n  {x : X},\n  TendstoUniformly f_n f Filter.atTop →\n    Filter.Tendsto x_n Filter.atTop (nhds x) → ContinuousAt f x → Filter.Tendsto (fun n => f_n n (x_n n)) Filter.atTop (nhds (f x)) ", "∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] [inst_1 : MetricSpace Y] {f : X → Y} {f_n : ℕ → X → Y} {x_n : ℕ → X} {x : X},\n  TendstoUniformly (fun n => f_n n) f Filter.atTop →\n    Filter.Tendsto x_n Filter.atTop (nhds x) → ContinuousAt f x → Filter.Tendsto (fun n => f_n n (x_n n)) Filter.atTop (nhds (f x)) ", "∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] [inst_1 : MetricSpace Y] {f : X → Y} {ι : Type u_3}\n  {p : Filter ι} {F : ι → X → Y} {x : X} {x_n : ι → X},\n  TendstoUniformly F f p →\n    Filter.Tendsto x_n p (nhds x) → Filter.Tendsto (fun n => F n (x_n n)) p (nhds (f x)) ", "forall {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] [inst_1 : MetricSpace Y] {x : X} {f : X → Y} {f_n : ℕ → X → Y}\n  {x_n : ℕ → X}, Filter.Tendsto x_n Filter.atTop (nhds x) → TendstoUniformly f_n f Filter.atTop →\n    Filter.Tendsto (fun n => f_n n (x_n n)) Filter.atTop (nhds (f x)) ", "∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] [inst_1 : MetricSpace Y] {f : X → Y} {fn : ℕ → X → Y},\n  TendstoUniformly (fun n x => fn n x) f Filter.atTop →\n    ∀ {x : X} {xn : ℕ → X}, Filter.Tendsto xn Filter.atTop (nhds x) → Filter.Tendsto (fun n => fn n (xn n)) Filter.atTop (nhds (f x)) ", "∀ {X : Type u_1} [inst : TopologicalSpace X] {Y : Type u_2} [inst_1 : MetricSpace Y] {f : X → Y} {ι : Type u_3}\n  {p : Filter ι} {F : ι → X → Y} {x : X} {x_n : ι → X},\n  TendstoUniformly F f p →\n    Filter.Tendsto x_n p (nhds x) → ContinuousAt f x → Filter.Tendsto (fun n => F n (x_n n)) p (nhds (f x)) "]}
{"docString": "If `A ⊆ X`, a retraction of `X` onto `A` is a continuous map `r: X → A` such that `r(a) = a` for each `a ∈ A`. Show that a retraction is a quotient map.", "prompts": "[{\"theorem\":\n  \"∀ {α : Type u_1} {β : Type u_2} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] {f : α → β},\\n  IsOpenMap f → Continuous f → Function.Surjective f → QuotientMap f\",\n  \"isProp\": true,\n  \"docString\": \"A continuous surjective open map is a quotient map. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] [inst_2 : CompactSpace α]\\n  [inst_3 : T2Space β] {f : α → β}, Function.Surjective f → Continuous f → QuotientMap f\",\n  \"isProp\": true,\n  \"docString\":\n  \"A continuous surjective map from a compact space to a Hausdorff space is a quotient map. \"},\n {\"theorem\":\n  \"∀ {E : ℕ → Type u_1} [inst : (n : ℕ) → TopologicalSpace (E n)] [inst_1 : ∀ (n : ℕ), DiscreteTopology (E n)]\\n  {s : Set ((n : ℕ) → E n)},\\n  IsClosed s → Set.Nonempty s → ∃ f, (∀ (x : (n : ℕ) → E n), x ∈ s → f x = x) ∧ Set.range f = s ∧ Continuous f\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given a closed nonempty subset `s` of `Π (n : ℕ), E n`, there exists a retraction onto this\\nset, i.e., a continuous map with range equal to `s`, equal to the identity on `s`. \"},\n {\"theorem\":\n  \"∀ (R₁ : Type u_2) {A : Type u_1} [inst : CommSemiring R₁] [inst_1 : CommRing A] [inst_2 : Algebra R₁ A] (I : Ideal A),\\n  Function.Surjective ↑(Ideal.Quotient.mkₐ R₁ I)\",\n  \"isProp\": true,\n  \"docString\": \"The canonical morphism `A →ₐ[R₁] I.quotient` is surjective. \"},\n {\"theorem\": \"∀ {α : Sort u} {β : Sort v}, Function.Injective fun e => ↑e\",\n  \"isProp\": true,\n  \"docString\": \"The map `(r ≃ s) → (r → s)` is injective. \"},\n {\"theorem\": \"∀ {α : Type u_1} (r : Setoid α), Setoid.ker Quotient.mk'' = r\",\n  \"isProp\": true,\n  \"docString\":\n  \"The kernel of the quotient map induced by an equivalence relation r equals r. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] (S : DiscreteQuotient X) [inst_1 : CompactSpace X],\\n  Finite (Quotient S.toSetoid)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `X` is a compact space, then any discrete quotient of `X` is finite. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X], Subsingleton (Quotient ⊤.toSetoid)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The quotient by `⊤ : DiscreteQuotient X` is a `Subsingleton`. \"},\n {\"theorem\":\n  \"∀ {R : Type u_1} [inst : CommRing R] [inst_1 : Ideal.IsJacobson R] (P : Ideal (Polynomial R)) [hP : Ideal.IsMaximal P],\\n  RingHom.IsIntegral (RingHom.comp (Ideal.Quotient.mk P) Polynomial.C)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `R` is a Jacobson ring, and `P` is a maximal ideal of `R[X]`,\\nthen `R → R[X]/P` is an integral map. \"},\n {\"theorem\":\n  \"∀ {R : Type u_1} {A : Type u_2} [inst : CommSemiring R] [inst_1 : Semiring A] [inst_2 : Algebra R A],\\n  Function.Injective ↑(algebraMap R A) → ∀ (p : ℕ) [inst : CharP R p], CharP A p\",\n  \"isProp\": true,\n  \"docString\":\n  \"If the algebra map `R →+* A` is injective then `A` has the same characteristic as `R`. \"},\n {\"theorem\":\n  \"∀ {C : Type u_1} [inst : CategoryTheory.Category C] {r : HomRel C} [self : CategoryTheory.Congruence r] {X Y : C},\\n  IsEquiv (X ⟶ Y) r\",\n  \"isProp\": true,\n  \"docString\": \"`r` is an equivalence on every hom-set. \"},\n {\"theorem\": \"∀ {α : Type u_1} (r : Setoid α), EqvGen.Setoid Setoid.r = r\",\n  \"isProp\": true,\n  \"docString\": \"The equivalence closure of an equivalence relation r is r. \"},\n {\"theorem\":\n  \"∀ (R₁ : Type u_2) {A : Type u_1} [inst : CommSemiring R₁] [inst_1 : CommRing A] [inst_2 : Algebra R₁ A] (I : Ideal A),\\n  RingHom.ker ↑(Ideal.Quotient.mkₐ R₁ I) = I\",\n  \"isProp\": true,\n  \"docString\": \"The kernel of `A →ₐ[R₁] I.quotient` is `I`. \"},\n {\"theorem\":\n  \"∀ {R : Type u_1} [inst : CommRing R] (P : Ideal (Polynomial R)),\\n  Function.Injective\\n    ↑(Ideal.quotientMap (Ideal.map (Polynomial.mapRingHom (Ideal.Quotient.mk (Ideal.comap Polynomial.C P))) P)\\n        (Polynomial.mapRingHom (Ideal.Quotient.mk (Ideal.comap Polynomial.C P)))\\n        (_ :\\n          P ≤\\n            Ideal.comap (Polynomial.mapRingHom (Ideal.Quotient.mk (Ideal.comap Polynomial.C P)))\\n              (Ideal.map (Polynomial.mapRingHom (Ideal.Quotient.mk (Ideal.comap Polynomial.C P))) P)))\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `P` be an ideal in `R[x]`.  The map\\n`R[x]/P → (R / (P ∩ R))[x] / (P / (P ∩ R))`\\nis injective.\\n\"},\n {\"theorem\":\n  \"∀ (R : Type u) (A : Type w) {M : Type v₁} [inst : CommSemiring R] [inst_1 : Semiring A] [inst_2 : Algebra R A]\\n  [inst_3 : AddCommMonoid M] [inst_4 : Module R M] [inst_5 : Module A M] [inst_6 : IsScalarTower R A M],\\n  Function.Surjective ↑(algebraMap R A) →\\n    ∀ (X : Set M), Submodule.restrictScalars R (Submodule.span A X) = Submodule.span R X\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `A` is an `R`-algebra such that the induced morphism `R →+* A` is surjective, then the\\n`R`-module generated by a set `X` equals the `A`-module generated by `X`. \"},\n {\"theorem\":\n  \"∀ {M : Type u_1} [inst : MulOneClass M] {c : Con M}, Function.Surjective ↑(Con.mk' c)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The natural homomorphism from a monoid to its quotient by a congruence relation is\\nsurjective. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] {s t : Set X}, DiscreteTopology ↑s → t ⊆ s → DiscreteTopology ↑t\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `s, t ⊆ X` be two subsets of a topological space `X`.  If `t ⊆ s` and the topology induced\\nby `X`on `s` is discrete, then also the topology induces on `t` is discrete.  \"},\n {\"theorem\":\n  \"∀ {E : ℕ → Type u_1} [inst : (n : ℕ) → TopologicalSpace (E n)] [inst_1 : ∀ (n : ℕ), DiscreteTopology (E n)]\\n  {s : Set ((n : ℕ) → E n)},\\n  IsClosed s → Set.Nonempty s → ∃ f, (∀ (x : (n : ℕ) → E n), x ∈ s → f x = x) ∧ Set.range f = s ∧ LipschitzWith 1 f\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given a closed nonempty subset `s` of `Π (n : ℕ), E n`, there exists a Lipschitz retraction\\nonto this set, i.e., a Lipschitz map with range equal to `s`, equal to the identity on `s`. \"},\n {\"theorem\":\n  \"∀ {R : Type u} [inst : CommRing R] {P A : Type u} [inst_1 : CommRing A] [inst_2 : Algebra R A] [inst_3 : CommRing P]\\n  [inst_4 : Algebra R P] (f : P →ₐ[R] A),\\n  Function.Surjective ↑f →\\n    ∀ [inst_5 : Algebra.FormallySmooth R P],\\n      Algebra.FormallySmooth R A ↔ ∃ g, AlgHom.comp (AlgHom.kerSquareLift f) g = AlgHom.id R A\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `P →ₐ[R] A` be a surjection with kernel `J`, and `P` a formally smooth `R`-algebra,\\nthen `A` is formally smooth over `R` iff the surjection `P ⧸ J ^ 2 →ₐ[R] A` has a section.\\n\\nGeometric intuition: we require that a first-order thickening of `Spec A` inside `Spec P` admits\\na retraction. \"},\n {\"theorem\":\n  \"∀ {σ : Type u_1} {R : Type u_2} {S : Type u_3} [inst : CommRing R] [inst_1 : CommRing S] (f : R →+* S)\\n  [inst_2 : IsLocalRingHom f], IsLocalRingHom (MvPowerSeries.map σ f)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The map `A[[X]] → B[[X]]` induced by a local ring hom `A → B` is local \"}]\n", "prompt_cons": "/-- A continuous surjective open map is a quotient map. -/\ntheorem ∀ {α : Type u_1} {β : Type u_2} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] {f : α → β},\n  IsOpenMap f → Continuous f → Function.Surjective f → QuotientMap f :=\n\n/-- A continuous surjective map from a compact space to a Hausdorff space is a quotient map. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] [inst_2 : CompactSpace α]\n  [inst_3 : T2Space β] {f : α → β}, Function.Surjective f → Continuous f → QuotientMap f :=\n\n/-- Given a closed nonempty subset `s` of `Π (n : ℕ), E n`, there exists a retraction onto this\nset, i.e., a continuous map with range equal to `s`, equal to the identity on `s`. -/\ntheorem ∀ {E : ℕ → Type u_1} [inst : (n : ℕ) → TopologicalSpace (E n)] [inst_1 : ∀ (n : ℕ), DiscreteTopology (E n)]\n  {s : Set ((n : ℕ) → E n)},\n  IsClosed s → Set.Nonempty s → ∃ f, (∀ (x : (n : ℕ) → E n), x ∈ s → f x = x) ∧ Set.range f = s ∧ Continuous f :=\n\n/-- The canonical morphism `A →ₐ[R₁] I.quotient` is surjective. -/\ntheorem ∀ (R₁ : Type u_2) {A : Type u_1} [inst : CommSemiring R₁] [inst_1 : CommRing A] [inst_2 : Algebra R₁ A] (I : Ideal A),\n  Function.Surjective ↑(Ideal.Quotient.mkₐ R₁ I) :=\n\n/-- The map `(r ≃ s) → (r → s)` is injective. -/\ntheorem ∀ {α : Sort u} {β : Sort v}, Function.Injective fun e => ↑e :=\n\n/-- The kernel of the quotient map induced by an equivalence relation r equals r. -/\ntheorem ∀ {α : Type u_1} (r : Setoid α), Setoid.ker Quotient.mk'' = r :=\n\n/-- If `X` is a compact space, then any discrete quotient of `X` is finite. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X] (S : DiscreteQuotient X) [inst_1 : CompactSpace X],\n  Finite (Quotient S.toSetoid) :=\n\n/-- The quotient by `⊤ : DiscreteQuotient X` is a `Subsingleton`. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X], Subsingleton (Quotient ⊤.toSetoid) :=\n\n/-- If `R` is a Jacobson ring, and `P` is a maximal ideal of `R[X]`,\nthen `R → R[X]/P` is an integral map. -/\ntheorem ∀ {R : Type u_1} [inst : CommRing R] [inst_1 : Ideal.IsJacobson R] (P : Ideal (Polynomial R)) [hP : Ideal.IsMaximal P],\n  RingHom.IsIntegral (RingHom.comp (Ideal.Quotient.mk P) Polynomial.C) :=\n\n/-- If the algebra map `R →+* A` is injective then `A` has the same characteristic as `R`. -/\ntheorem ∀ {R : Type u_1} {A : Type u_2} [inst : CommSemiring R] [inst_1 : Semiring A] [inst_2 : Algebra R A],\n  Function.Injective ↑(algebraMap R A) → ∀ (p : ℕ) [inst : CharP R p], CharP A p :=\n\n/-- `r` is an equivalence on every hom-set. -/\ntheorem ∀ {C : Type u_1} [inst : CategoryTheory.Category C] {r : HomRel C} [self : CategoryTheory.Congruence r] {X Y : C},\n  IsEquiv (X ⟶ Y) r :=\n\n/-- The equivalence closure of an equivalence relation r is r. -/\ntheorem ∀ {α : Type u_1} (r : Setoid α), EqvGen.Setoid Setoid.r = r :=\n\n/-- The kernel of `A →ₐ[R₁] I.quotient` is `I`. -/\ntheorem ∀ (R₁ : Type u_2) {A : Type u_1} [inst : CommSemiring R₁] [inst_1 : CommRing A] [inst_2 : Algebra R₁ A] (I : Ideal A),\n  RingHom.ker ↑(Ideal.Quotient.mkₐ R₁ I) = I :=\n\n/-- Let `P` be an ideal in `R[x]`.  The map\n`R[x]/P → (R / (P ∩ R))[x] / (P / (P ∩ R))`\nis injective. -/\ntheorem ∀ {R : Type u_1} [inst : CommRing R] (P : Ideal (Polynomial R)),\n  Function.Injective\n    ↑(Ideal.quotientMap (Ideal.map (Polynomial.mapRingHom (Ideal.Quotient.mk (Ideal.comap Polynomial.C P))) P)\n        (Polynomial.mapRingHom (Ideal.Quotient.mk (Ideal.comap Polynomial.C P)))\n        (_ :\n          P ≤\n            Ideal.comap (Polynomial.mapRingHom (Ideal.Quotient.mk (Ideal.comap Polynomial.C P)))\n              (Ideal.map (Polynomial.mapRingHom (Ideal.Quotient.mk (Ideal.comap Polynomial.C P))) P))) :=\n\n/-- If `A` is an `R`-algebra such that the induced morphism `R →+* A` is surjective, then the\n`R`-module generated by a set `X` equals the `A`-module generated by `X`. -/\ntheorem ∀ (R : Type u) (A : Type w) {M : Type v₁} [inst : CommSemiring R] [inst_1 : Semiring A] [inst_2 : Algebra R A]\n  [inst_3 : AddCommMonoid M] [inst_4 : Module R M] [inst_5 : Module A M] [inst_6 : IsScalarTower R A M],\n  Function.Surjective ↑(algebraMap R A) →\n    ∀ (X : Set M), Submodule.restrictScalars R (Submodule.span A X) = Submodule.span R X :=\n\n/-- The natural homomorphism from a monoid to its quotient by a congruence relation is\nsurjective. -/\ntheorem ∀ {M : Type u_1} [inst : MulOneClass M] {c : Con M}, Function.Surjective ↑(Con.mk' c) :=\n\n/-- Let `s, t ⊆ X` be two subsets of a topological space `X`.  If `t ⊆ s` and the topology induced\nby `X`on `s` is discrete, then also the topology induces on `t` is discrete. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X] {s t : Set X}, DiscreteTopology ↑s → t ⊆ s → DiscreteTopology ↑t :=\n\n/-- Given a closed nonempty subset `s` of `Π (n : ℕ), E n`, there exists a Lipschitz retraction\nonto this set, i.e., a Lipschitz map with range equal to `s`, equal to the identity on `s`. -/\ntheorem ∀ {E : ℕ → Type u_1} [inst : (n : ℕ) → TopologicalSpace (E n)] [inst_1 : ∀ (n : ℕ), DiscreteTopology (E n)]\n  {s : Set ((n : ℕ) → E n)},\n  IsClosed s → Set.Nonempty s → ∃ f, (∀ (x : (n : ℕ) → E n), x ∈ s → f x = x) ∧ Set.range f = s ∧ LipschitzWith 1 f :=\n\n/-- Let `P →ₐ[R] A` be a surjection with kernel `J`, and `P` a formally smooth `R`-algebra,\nthen `A` is formally smooth over `R` iff the surjection `P ⧸ J ^ 2 →ₐ[R] A` has a section.\n\nGeometric intuition: we require that a first-order thickening of `Spec A` inside `Spec P` admits\na retraction. -/\ntheorem ∀ {R : Type u} [inst : CommRing R] {P A : Type u} [inst_1 : CommRing A] [inst_2 : Algebra R A] [inst_3 : CommRing P]\n  [inst_4 : Algebra R P] (f : P →ₐ[R] A),\n  Function.Surjective ↑f →\n    ∀ [inst_5 : Algebra.FormallySmooth R P],\n      Algebra.FormallySmooth R A ↔ ∃ g, AlgHom.comp (AlgHom.kerSquareLift f) g = AlgHom.id R A :=\n\n/-- The map `A[[X]] → B[[X]]` induced by a local ring hom `A → B` is local -/\ntheorem ∀ {σ : Type u_1} {R : Type u_2} {S : Type u_3} [inst : CommRing R] [inst_1 : CommRing S] (f : R →+* S)\n  [inst_2 : IsLocalRingHom f], IsLocalRingHom (MvPowerSeries.map σ f) :=\n\n/-- If `A ⊆ X`, a retraction of `X` onto `A` is a continuous map `r: X → A` such that `r(a) = a` for each `a ∈ A`. Show that a retraction is a quotient map. -/\ntheorem", "choices": ["∀ {α : Type u_1} {β : Type u_2} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] {A : Set α} {f : α → β},\n  IsOpenMap f → Continuous f → (∀ (a : α), a ∈ A → f a = a) → Set.range f = A → QuotientMap f ", "∀ {X : Type u_1} {A : Type u_2} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace A] {f : X → A},\n  Continuous f → Set.range f = Set.range (Set.restrict f A) → (∀ x : A, Set.restrict f A x = x) → QuotientMap f ", "∀ {α : Type u_1} {β : Type u_2} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] {A : Set α} {r : α → β},\n  IsRetraction A r → QuotientMap r ", "∀ {X : Type u_1} {A : Type u_2} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace A] {r : X → A},\n  IsRetraction r → QuotientMap r ", "∀ {α : Type u_1} {A : Type u_2} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace A] {f : α → A},\n  Continuous f → (∀ (a : A), f a = a) → Set.range f = Set.univ → QuotientMap f ", "∀ {α : Type u_1} {β : Type u_2} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] {A : Set α} {r : α → β},\n  IsRetract A r → Continuous r → QuotientMap r ", "∀ {X : Type u_1} {A : Type u_2} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace A] {r : X → A},\n  Continuous r → (∀ a, r a = a) → QuotientMap r ", "∀ {X : Type u_1} {A : Type u_2} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace A] {r : X → A},\n  (∀ (a : A), r a = a) → Continuous r → Function.Injective id → QuotientMap r ", "∀ {X : Type u_1} {A : Type u_2} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace A] {r : X → A},\n  IsRetraction A r → Continuous r → QuotientMap r ", "∀ {X : Type u_1} {A : Type u_2} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace A] {r : X → A},\n  Continuous r → (∀ (a : A), r a = a) → QuotientMap r "]}
{"docString": "Let `{A_n}` be a sequence of connected subspaces of `X`, such that `A_n ∩ A_{n+1} ≠ ∅` for all `n`. Show that `⋃ A_n` is connected.", "prompts": "[{\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {s : Set α} {ι : Type v},\\n  IsCompact s →\\n    ∀ (Z : ι → Set α),\\n      (∀ (i : ι), IsClosed (Z i)) →\\n        (∀ (t : Finset ι), Set.Nonempty (s ∩ ⋂ (i : ι) (_ : i ∈ t), Z i)) → Set.Nonempty (s ∩ ⋂ (i : ι), Z i)\",\n  \"isProp\": true,\n  \"docString\":\n  \"To show that a compact set intersects the intersection of a family of closed sets,\\nit is sufficient to show that it intersects every finite subfamily. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [self : ConnectedSpace α], Nonempty α\",\n  \"isProp\": true,\n  \"docString\": \"A connected space is nonempty. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] [inst_2 : CompactSpace α]\\n  [inst_3 : CompactSpace β], CompactSpace (α ⊕ β)\",\n  \"isProp\": true,\n  \"docString\": \"The disjoint union of two compact spaces is compact. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : BaireSpace α] {S : Set (Set α)},\\n  (∀ (s : Set α), s ∈ S → IsOpen s) → Set.Countable S → (∀ (s : Set α), s ∈ S → Dense s) → Dense (⋂₀ S)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Baire theorem: a countable intersection of dense open sets is dense. Formulated here with ⋂₀. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : AddCommGroup E] [inst_1 : Module ℝ E] [inst_2 : TopologicalSpace E]\\n  [inst_3 : TopologicalAddGroup E] [inst_4 : ContinuousSMul ℝ E] {s : Set E},\\n  Convex ℝ s → Set.Nonempty s → IsConnected s\",\n  \"isProp\": true,\n  \"docString\": \"A nonempty convex set is connected. \"},\n {\"theorem\":\n  \"∀ {k : Type u_1} {V : Type u_2} {P : Type u_3} [inst : Ring k] [inst_1 : AddCommGroup V] [inst_2 : Module k V]\\n  [inst_3 : AddTorsor V P] {s1 s2 : AffineSubspace k P},\\n  AffineSubspace.direction s1 = AffineSubspace.direction s2 → Set.Nonempty (↑s1 ∩ ↑s2) → s1 = s2\",\n  \"isProp\": true,\n  \"docString\":\n  \"Two affine subspaces with the same direction and nonempty intersection are equal. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] [self : PathConnectedSpace X], Nonempty X\",\n  \"isProp\": true,\n  \"docString\": \"A path-connected space must be nonempty. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {S : Set (Set α)},\\n  DirectedOn (fun x x_1 => x ⊆ x_1) S → (∀ (s : Set α), s ∈ S → IsPreconnected s) → IsPreconnected (⋃₀ S)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The directed sUnion of a set S of preconnected subsets is preconnected. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : PreconnectedSpace X] [inst_2 : NoncompactSpace X],\\n  ConnectedSpace (OnePoint X)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `X` is not a compact space, then `OnePoint X` is a connected space. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {ι : Type u_1} [inst : TopologicalSpace α] [inst_1 : PreconnectedSpace α] {s : ι → Set α},\\n  (∀ (i : ι), Set.Nonempty (s i)) →\\n    Pairwise (Disjoint on s) →\\n      ∀ [inst_2 : Finite ι], (∀ (i : ι), IsClosed (s i)) → ⋃ (i : ι), s i = Set.univ → Subsingleton ι\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a preconnected space, any finite disjoint cover by non-empty closed subsets has at most one\\nelement. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X],\\n  (Pairwise fun x y => ∃ U, IsClopen U ∧ x ∈ U ∧ ¬y ∈ U) → IsTotallyDisconnected Set.univ\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `X` be a topological space, and suppose that for all distinct `x,y ∈ X`, there\\nis some clopen set `U` such that `x ∈ U` and `y ∉ U`. Then `X` is totally disconnected. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {S U : Set α},\\n  IsPreirreducible S → IsOpen U → Set.Nonempty (S ∩ U) → S ⊆ closure (S ∩ U)\",\n  \"isProp\": true,\n  \"docString\":\n  \"A nonempty open subset of a preirreducible subspace is dense in the subspace. \"},\n {\"theorem\":\n  \"∀ {K : Type u_3} {V : Type u_2} [inst : Field K] [inst_1 : AddCommGroup V] [inst_2 : Module K V] {ι : Sort u_1}\\n  (s : ι → Set (ℙ K V)),\\n  Projectivization.Subspace.span (⋃ (i : ι), s i) = ⨆ (i : ι), Projectivization.Subspace.span (s i)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The supremum of a collection of subspaces is equal to the span of the union of the\\ncollection. \"},\n {\"theorem\":\n  \"∀ {ι : Type u_2} {E : ι → Type u_1} [inst : (i : ι) → TopologicalSpace (E i)] {s : (i : ι) → Set (Set (E i))},\\n  (∀ (i : ι), TopologicalSpace.IsTopologicalBasis (s i)) →\\n    TopologicalSpace.IsTopologicalBasis (⋃ (i : ι), (fun u => Sigma.mk i '' u) '' s i)\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a disjoint union space `Σ i, E i`, one can form a topological basis by taking the union of\\ntopological bases on each of the parts of the space. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] (Z : ℕ → Set α),\\n  (∀ (i : ℕ), Z (i + 1) ⊆ Z i) →\\n    (∀ (i : ℕ), Set.Nonempty (Z i)) → IsCompact (Z 0) → (∀ (i : ℕ), IsClosed (Z i)) → Set.Nonempty (⋂ (i : ℕ), Z i)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Cantor's intersection theorem for sequences indexed by `ℕ`:\\nthe intersection of a decreasing sequence of nonempty compact closed sets is nonempty. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {ι : Type u_1} [inst : TopologicalSpace α] [inst_1 : PreconnectedSpace α] {s : ι → Set α},\\n  (∀ (i : ι), Set.Nonempty (s i)) → Pairwise (Disjoint on s) → (∀ (i : ι), IsClopen (s i)) → Subsingleton ι\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a preconnected space, any disjoint family of non-empty clopen subsets has at most one\\nelement. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [self : NormalSpace α] (s t : Set α),\\n  IsClosed s → IsClosed t → Disjoint s t → SeparatedNhds s t\",\n  \"isProp\": true,\n  \"docString\":\n  \"Two disjoint sets in a normal space admit disjoint neighbourhoods. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {β : Type u_1} [inst : ConditionallyCompleteLattice α] [inst_1 : SemilatticeSup β] {f g : β → α},\\n  (Antitone fun n => Set.Icc (f n) (g n)) → (∀ (n : β), f n ≤ g n) → ⨆ (n : β), f n ∈ ⋂ (n : β), Set.Icc (f n) (g n)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Nested intervals lemma: if `[f n, g n]` is an antitone sequence of nonempty\\nclosed intervals, then `⨆ n, f n` belongs to all the intervals `[f n, g n]`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_2} {E : Type u_1} [inst : TopologicalSpace 𝕜] [inst_1 : OrderedRing 𝕜] [inst_2 : AddCommMonoid E]\\n  [inst_3 : TopologicalSpace E] [inst_4 : Module 𝕜 E] {A B : Set E},\\n  IsExposed 𝕜 A B → Set.Nonempty B → ∃ l a, B = {x | x ∈ A ∧ a ≤ ↑l x}\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `B` is a nonempty exposed subset of `A`, then `B` is the intersection of `A` with some closed\\nhalfspace. The converse is *not* true. It would require that the corresponding open halfspace\\ndoesn't intersect `A`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : BaireSpace α] {S : Set (Set α)},\\n  (∀ (s : Set α), s ∈ S → IsClosed s) →\\n    Set.Countable S → ⋃₀ S = Set.univ → Dense (⋃ (s : Set α) (_ : s ∈ S), interior s)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Baire theorem: if countably many closed sets cover the whole space, then their interiors\\nare dense. Formulated here with `⋃₀`. \"}]\n", "prompt_cons": "/-- To show that a compact set intersects the intersection of a family of closed sets,\nit is sufficient to show that it intersects every finite subfamily. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] {s : Set α} {ι : Type v},\n  IsCompact s →\n    ∀ (Z : ι → Set α),\n      (∀ (i : ι), IsClosed (Z i)) →\n        (∀ (t : Finset ι), Set.Nonempty (s ∩ ⋂ (i : ι) (_ : i ∈ t), Z i)) → Set.Nonempty (s ∩ ⋂ (i : ι), Z i) :=\n\n/-- A connected space is nonempty. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [self : ConnectedSpace α], Nonempty α :=\n\n/-- The disjoint union of two compact spaces is compact. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] [inst_2 : CompactSpace α]\n  [inst_3 : CompactSpace β], CompactSpace (α ⊕ β) :=\n\n/-- Baire theorem: a countable intersection of dense open sets is dense. Formulated here with ⋂₀. -/\ntheorem ∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : BaireSpace α] {S : Set (Set α)},\n  (∀ (s : Set α), s ∈ S → IsOpen s) → Set.Countable S → (∀ (s : Set α), s ∈ S → Dense s) → Dense (⋂₀ S) :=\n\n/-- A nonempty convex set is connected. -/\ntheorem ∀ {E : Type u_1} [inst : AddCommGroup E] [inst_1 : Module ℝ E] [inst_2 : TopologicalSpace E]\n  [inst_3 : TopologicalAddGroup E] [inst_4 : ContinuousSMul ℝ E] {s : Set E},\n  Convex ℝ s → Set.Nonempty s → IsConnected s :=\n\n/-- Two affine subspaces with the same direction and nonempty intersection are equal. -/\ntheorem ∀ {k : Type u_1} {V : Type u_2} {P : Type u_3} [inst : Ring k] [inst_1 : AddCommGroup V] [inst_2 : Module k V]\n  [inst_3 : AddTorsor V P] {s1 s2 : AffineSubspace k P},\n  AffineSubspace.direction s1 = AffineSubspace.direction s2 → Set.Nonempty (↑s1 ∩ ↑s2) → s1 = s2 :=\n\n/-- A path-connected space must be nonempty. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X] [self : PathConnectedSpace X], Nonempty X :=\n\n/-- The directed sUnion of a set S of preconnected subsets is preconnected. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] {S : Set (Set α)},\n  DirectedOn (fun x x_1 => x ⊆ x_1) S → (∀ (s : Set α), s ∈ S → IsPreconnected s) → IsPreconnected (⋃₀ S) :=\n\n/-- If `X` is not a compact space, then `OnePoint X` is a connected space. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : PreconnectedSpace X] [inst_2 : NoncompactSpace X],\n  ConnectedSpace (OnePoint X) :=\n\n/-- In a preconnected space, any finite disjoint cover by non-empty closed subsets has at most one\nelement. -/\ntheorem ∀ {α : Type u} {ι : Type u_1} [inst : TopologicalSpace α] [inst_1 : PreconnectedSpace α] {s : ι → Set α},\n  (∀ (i : ι), Set.Nonempty (s i)) →\n    Pairwise (Disjoint on s) →\n      ∀ [inst_2 : Finite ι], (∀ (i : ι), IsClosed (s i)) → ⋃ (i : ι), s i = Set.univ → Subsingleton ι :=\n\n/-- Let `X` be a topological space, and suppose that for all distinct `x,y ∈ X`, there\nis some clopen set `U` such that `x ∈ U` and `y ∉ U`. Then `X` is totally disconnected. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X],\n  (Pairwise fun x y => ∃ U, IsClopen U ∧ x ∈ U ∧ ¬y ∈ U) → IsTotallyDisconnected Set.univ :=\n\n/-- A nonempty open subset of a preirreducible subspace is dense in the subspace. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] {S U : Set α},\n  IsPreirreducible S → IsOpen U → Set.Nonempty (S ∩ U) → S ⊆ closure (S ∩ U) :=\n\n/-- The supremum of a collection of subspaces is equal to the span of the union of the\ncollection. -/\ntheorem ∀ {K : Type u_3} {V : Type u_2} [inst : Field K] [inst_1 : AddCommGroup V] [inst_2 : Module K V] {ι : Sort u_1}\n  (s : ι → Set (ℙ K V)),\n  Projectivization.Subspace.span (⋃ (i : ι), s i) = ⨆ (i : ι), Projectivization.Subspace.span (s i) :=\n\n/-- In a disjoint union space `Σ i, E i`, one can form a topological basis by taking the union of\ntopological bases on each of the parts of the space. -/\ntheorem ∀ {ι : Type u_2} {E : ι → Type u_1} [inst : (i : ι) → TopologicalSpace (E i)] {s : (i : ι) → Set (Set (E i))},\n  (∀ (i : ι), TopologicalSpace.IsTopologicalBasis (s i)) →\n    TopologicalSpace.IsTopologicalBasis (⋃ (i : ι), (fun u => Sigma.mk i '' u) '' s i) :=\n\n/-- Cantor's intersection theorem for sequences indexed by `ℕ`:\nthe intersection of a decreasing sequence of nonempty compact closed sets is nonempty. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] (Z : ℕ → Set α),\n  (∀ (i : ℕ), Z (i + 1) ⊆ Z i) →\n    (∀ (i : ℕ), Set.Nonempty (Z i)) → IsCompact (Z 0) → (∀ (i : ℕ), IsClosed (Z i)) → Set.Nonempty (⋂ (i : ℕ), Z i) :=\n\n/-- In a preconnected space, any disjoint family of non-empty clopen subsets has at most one\nelement. -/\ntheorem ∀ {α : Type u} {ι : Type u_1} [inst : TopologicalSpace α] [inst_1 : PreconnectedSpace α] {s : ι → Set α},\n  (∀ (i : ι), Set.Nonempty (s i)) → Pairwise (Disjoint on s) → (∀ (i : ι), IsClopen (s i)) → Subsingleton ι :=\n\n/-- Two disjoint sets in a normal space admit disjoint neighbourhoods. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [self : NormalSpace α] (s t : Set α),\n  IsClosed s → IsClosed t → Disjoint s t → SeparatedNhds s t :=\n\n/-- Nested intervals lemma: if `[f n, g n]` is an antitone sequence of nonempty\nclosed intervals, then `⨆ n, f n` belongs to all the intervals `[f n, g n]`. -/\ntheorem ∀ {α : Type u_2} {β : Type u_1} [inst : ConditionallyCompleteLattice α] [inst_1 : SemilatticeSup β] {f g : β → α},\n  (Antitone fun n => Set.Icc (f n) (g n)) → (∀ (n : β), f n ≤ g n) → ⨆ (n : β), f n ∈ ⋂ (n : β), Set.Icc (f n) (g n) :=\n\n/-- If `B` is a nonempty exposed subset of `A`, then `B` is the intersection of `A` with some closed\nhalfspace. The converse is *not* true. It would require that the corresponding open halfspace\ndoesn't intersect `A`. -/\ntheorem ∀ {𝕜 : Type u_2} {E : Type u_1} [inst : TopologicalSpace 𝕜] [inst_1 : OrderedRing 𝕜] [inst_2 : AddCommMonoid E]\n  [inst_3 : TopologicalSpace E] [inst_4 : Module 𝕜 E] {A B : Set E},\n  IsExposed 𝕜 A B → Set.Nonempty B → ∃ l a, B = {x | x ∈ A ∧ a ≤ ↑l x} :=\n\n/-- Baire theorem: if countably many closed sets cover the whole space, then their interiors\nare dense. Formulated here with `⋃₀`. -/\ntheorem ∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : BaireSpace α] {S : Set (Set α)},\n  (∀ (s : Set α), s ∈ S → IsClosed s) →\n    Set.Countable S → ⋃₀ S = Set.univ → Dense (⋃ (s : Set α) (_ : s ∈ S), interior s) :=\n\n/-- Let `{A_n}` be a sequence of connected subspaces of `X`, such that `A_n ∩ A_{n+1} ≠ ∅` for all `n`. Show that `⋃ A_n` is connected. -/\ntheorem", "choices": ["∀ {α : Type u} {ι : Type u_1} [inst : TopologicalSpace α] [inst_1 : PreconnectedSpace α] {s : ι → Set α},\n  (∀ (i : ι), IsConnected (s i)) →\n    (∀ (i : ι), Set.Nonempty (s i ∩ s (i + 1))) → IsConnected (⋃ (i : ι), s i) ", "∀ {α : Type u} [inst : TopologicalSpace α] {A : ℕ → Set α},\n  (∀ (n : ℕ), IsConnected (A n)) →\n    (∀ (n : ℕ), Set.Nonempty (A n ∩ A (n + 1))) → IsConnected (⋃ (n : ℕ), A n) ", "∀ {α : Type u} [inst : TopologicalSpace α] {A : ℕ → Set α},\n  (∀ (n : ℕ), IsConnected (A n)) → (∀ (n : ℕ), Set.Nonempty (A n ∩ A (n + 1))) → IsConnected (⋃ (n : ℕ), A n) ", "∀ {α : Type u} [inst : TopologicalSpace α] {ι : Type u_1} [inst_1 : LinearOrder ι] [inst_2 : SuccOrder ι] {A : ι → Set α},\n  (∀ (i : ι), IsConnected (A i)) → (∀ (i : ι), Set.Nonempty (A i ∩ A (succ i))) → IsConnected (⋃ (i : ι), A i) ", "∀ {α : Type u} [inst : TopologicalSpace α] {A : ℕ → Set α},\n  (∀ (n : ℕ), IsConnected (A n)) →\n    (∀ (n : ℕ), Set.Nonempty (A n ∩ A (n + 1))) → IsConnected (⋃ (n : ℕ), A n) ", "∀ {α : Type u} [inst : TopologicalSpace α] {A : ℕ → Set α},\n  (∀ (i : ℕ), IsConnected (A i)) → (∀ (i : ℕ), Set.Nonempty (A i ∩ A (i + 1))) → IsConnected (⋃ (i : ℕ), A i) ", "∀ {α : Type u} {ι : Type u_1} [inst : TopologicalSpace α] [inst_1 : LinearOrder ι] {X : ι → Set α},\n  (∀ (i : ι), IsConnected (X i)) →\n    (∀ (i j : ι), i < j → Set.Nonempty (X i ∩ X j)) → IsConnected (⋃ (i : ι), X i) ", "∀ {X : Type u_1} [inst : TopologicalSpace X] {ι : Type u_2} [inst_1 : LinearOrder ι] {A : ι → Set X},\n  (∀ (n : ι), IsConnected (A n)) →\n    (∀ (n : ι), Set.Nonempty (A n ∩ A (n + 1))) → IsConnected (⋃ (n : ι), A n) ", "∀ {α : Type u} {ι : Type u_1} [inst : TopologicalSpace α] [_inst_1 : PreconnectedSpace α] {s : ι → Set α} {l : ℕ → ι}\n  (hls : ∀ (n : ℕ), s (l n) ∩ s (l (n + 1)) ≠ ∅),\n  (∀ (n : ℕ), IsConnected (s (l n))) → IsConnected (⋃ (n : ℕ), s (l n)) ", "∀ {α : Type u} [inst : TopologicalSpace α] {A : ℕ → Set α},\n  (∀ (n : ℕ), IsConnected (A n)) →\n    (∀ (n : ℕ), Set.Nonempty (A n ∩ A (n + 1))) → IsConnected (⋃ (n : ℕ), A n) "]}
{"docString": "Show that if `X` is an infinite set, it is connected in the finite complement topology.", "prompts": "[{\"theorem\":\n  \"∀ {α : Type u_1} [inst : Infinite α], IrreducibleSpace (CofiniteTopology α)\",\n  \"isProp\": true,\n  \"docString\":\n  \"An infinite type with cofinite topology is an irreducible topological space. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : Preorder α] [inst_1 : TopologicalSpace α] [inst_2 : LowerTopology α] {s : Set α},\\n  Set.Finite s → IsClosed ↑(upperClosure s)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The upper closure of a finite set is closed in the lower topology. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : Infinite X] [inst_2 : DiscreteTopology X],\\n  ¬Continuous ↑CofiniteTopology.of.symm\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `X` is an infinite type with discrete topology (e.g., `ℕ`), then the identity map from\\n`CofiniteTopology (OnePoint X)` to `OnePoint X` is not continuous. \"},\n {\"theorem\":\n  \"∀ {M : Type w} {A : Set M} {L : FirstOrder.Language} [inst : FirstOrder.Language.Structure L M] {α : Type u₁}\\n  {β : Type u_1} {s : Set (β → M)},\\n  Set.Definable A L s → ∀ (f : α → β) [inst_1 : Finite α] [inst_2 : Finite β], Set.Definable A L ((fun g => g ∘ f) '' s)\",\n  \"isProp\": true,\n  \"docString\": \"Shows that definability is closed under finite projections. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {s : Set α} {ι : Type v},\\n  IsCompact s →\\n    ∀ (Z : ι → Set α),\\n      (∀ (i : ι), IsClosed (Z i)) →\\n        (∀ (t : Finset ι), Set.Nonempty (s ∩ ⋂ (i : ι) (_ : i ∈ t), Z i)) → Set.Nonempty (s ∩ ⋂ (i : ι), Z i)\",\n  \"isProp\": true,\n  \"docString\":\n  \"To show that a compact set intersects the intersection of a family of closed sets,\\nit is sufficient to show that it intersects every finite subfamily. \"},\n {\"theorem\":\n  \"∀ {V : Type u} (G : SimpleGraph V) [inst : Infinite V] (K : Finset V), Nonempty (SimpleGraph.ComponentCompl G ↑K)\",\n  \"isProp\": true,\n  \"docString\":\n  \"In an infinite graph, the set of components out of a finite set is nonempty. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X],\\n  (Pairwise fun x y => ∃ U, IsClopen U ∧ x ∈ U ∧ ¬y ∈ U) → IsTotallyDisconnected Set.univ\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `X` be a topological space, and suppose that for all distinct `x,y ∈ X`, there\\nis some clopen set `U` such that `x ∈ U` and `y ∉ U`. Then `X` is totally disconnected. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] (S : DiscreteQuotient X) [inst_1 : CompactSpace X],\\n  Finite (Quotient S.toSetoid)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `X` is a compact space, then any discrete quotient of `X` is finite. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : NoncompactSpace X],\\n  Filter.NeBot (nhdsWithin OnePoint.infty {OnePoint.infty}ᶜ)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `X` is a non-compact space, then `∞` is not an isolated point of `OnePoint X`. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X], CompactSpace (OnePoint X)\",\n  \"isProp\": true,\n  \"docString\":\n  \"For any topological space `X`, its one point compactification is a compact space. \"},\n {\"theorem\":\n  \"∀ {V : Type} (G : SimpleGraph V) [inst : SimpleGraph.LocallyFinite G] [inst : Fact (SimpleGraph.Preconnected G)]\\n  [inst : Infinite V], Set.Nonempty (SimpleGraph.end G)\",\n  \"isProp\": true,\n  \"docString\":\n  \"A locally finite preconnected infinite graph has at least one end. \"},\n {\"theorem\":\n  \"∀ {J : Type u} [inst : CategoryTheory.SmallCategory J] [inst_1 : CategoryTheory.IsCofiltered J]\\n  {F : CategoryTheory.Functor J Profinite} (C : CategoryTheory.Limits.Cone F) {U : Set ↑C.pt.toCompHaus.toTop},\\n  CategoryTheory.Limits.IsLimit C → IsClopen U → ∃ j V x, U = ↑(CategoryTheory.NatTrans.app C.π j) ⁻¹' V\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `X` is a cofiltered limit of profinite sets, then any clopen subset of `X` arises from\\na clopen set in one of the terms in the limit.\\n\"},\n {\"theorem\":\n  \"∀ {F : Type u_1} {A : outParam (Type u_2)} {B : outParam (Type u_3)} [inst : Monoid A] [inst_1 : Monoid B]\\n  [inst_2 : TopologicalSpace A] [inst_3 : TopologicalSpace B] [self : ContinuousMonoidHomClass F A B] (f : F),\\n  Continuous ↑f\",\n  \"isProp\": true,\n  \"docString\": \"Proof of the continuity of the map. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : Preorder α] [inst_1 : TopologicalSpace α] [inst_2 : LowerTopology α] (a : α),\\n  IsClosed (Set.Ici a)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Left-closed right-infinite intervals [a, ∞) are closed in the lower topology. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [t : TopologicalSpace α] [self : TopologicalSpace.SecondCountableTopology α],\\n  ∃ b, Set.Countable b ∧ t = TopologicalSpace.generateFrom b\",\n  \"isProp\": true,\n  \"docString\":\n  \"There exists a countable set of sets that generates the topology. \"},\n {\"theorem\": \"Filter.Tendsto Int.cast Filter.cofinite (Filter.cocompact ℝ)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Under the coercion from `ℤ` to `ℝ`, inverse images of compact sets are finite. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {s : Set α} [self : IsClosed s], IsOpen sᶜ\",\n  \"isProp\": true,\n  \"docString\": \"The complement of a closed set is an open set. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : PreconnectedSpace X] [inst_2 : NoncompactSpace X],\\n  ConnectedSpace (OnePoint X)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `X` is not a compact space, then `OnePoint X` is a connected space. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} (f : α → Finset β), Set.Finite (Set.range f) → Set.Finite (⋃ (a : α), ↑(f a))\",\n  \"isProp\": true,\n  \"docString\": \"A finite union of finsets is finite. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : AddCommGroup E] [inst_1 : Module ℝ E] [inst_2 : TopologicalSpace E]\\n  [inst_3 : TopologicalAddGroup E] [inst_4 : ContinuousSMul ℝ E] {s : Set E},\\n  Convex ℝ s → Set.Nonempty s → IsConnected s\",\n  \"isProp\": true,\n  \"docString\": \"A nonempty convex set is connected. \"}]\n", "prompt_cons": "/-- An infinite type with cofinite topology is an irreducible topological space. -/\ntheorem ∀ {α : Type u_1} [inst : Infinite α], IrreducibleSpace (CofiniteTopology α) :=\n\n/-- The upper closure of a finite set is closed in the lower topology. -/\ntheorem ∀ {α : Type u_1} [inst : Preorder α] [inst_1 : TopologicalSpace α] [inst_2 : LowerTopology α] {s : Set α},\n  Set.Finite s → IsClosed ↑(upperClosure s) :=\n\n/-- If `X` is an infinite type with discrete topology (e.g., `ℕ`), then the identity map from\n`CofiniteTopology (OnePoint X)` to `OnePoint X` is not continuous. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : Infinite X] [inst_2 : DiscreteTopology X],\n  ¬Continuous ↑CofiniteTopology.of.symm :=\n\n/-- Shows that definability is closed under finite projections. -/\ntheorem ∀ {M : Type w} {A : Set M} {L : FirstOrder.Language} [inst : FirstOrder.Language.Structure L M] {α : Type u₁}\n  {β : Type u_1} {s : Set (β → M)},\n  Set.Definable A L s → ∀ (f : α → β) [inst_1 : Finite α] [inst_2 : Finite β], Set.Definable A L ((fun g => g ∘ f) '' s) :=\n\n/-- To show that a compact set intersects the intersection of a family of closed sets,\nit is sufficient to show that it intersects every finite subfamily. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] {s : Set α} {ι : Type v},\n  IsCompact s →\n    ∀ (Z : ι → Set α),\n      (∀ (i : ι), IsClosed (Z i)) →\n        (∀ (t : Finset ι), Set.Nonempty (s ∩ ⋂ (i : ι) (_ : i ∈ t), Z i)) → Set.Nonempty (s ∩ ⋂ (i : ι), Z i) :=\n\n/-- In an infinite graph, the set of components out of a finite set is nonempty. -/\ntheorem ∀ {V : Type u} (G : SimpleGraph V) [inst : Infinite V] (K : Finset V), Nonempty (SimpleGraph.ComponentCompl G ↑K) :=\n\n/-- Let `X` be a topological space, and suppose that for all distinct `x,y ∈ X`, there\nis some clopen set `U` such that `x ∈ U` and `y ∉ U`. Then `X` is totally disconnected. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X],\n  (Pairwise fun x y => ∃ U, IsClopen U ∧ x ∈ U ∧ ¬y ∈ U) → IsTotallyDisconnected Set.univ :=\n\n/-- If `X` is a compact space, then any discrete quotient of `X` is finite. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X] (S : DiscreteQuotient X) [inst_1 : CompactSpace X],\n  Finite (Quotient S.toSetoid) :=\n\n/-- If `X` is a non-compact space, then `∞` is not an isolated point of `OnePoint X`. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : NoncompactSpace X],\n  Filter.NeBot (nhdsWithin OnePoint.infty {OnePoint.infty}ᶜ) :=\n\n/-- For any topological space `X`, its one point compactification is a compact space. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X], CompactSpace (OnePoint X) :=\n\n/-- A locally finite preconnected infinite graph has at least one end. -/\ntheorem ∀ {V : Type} (G : SimpleGraph V) [inst : SimpleGraph.LocallyFinite G] [inst : Fact (SimpleGraph.Preconnected G)]\n  [inst : Infinite V], Set.Nonempty (SimpleGraph.end G) :=\n\n/-- If `X` is a cofiltered limit of profinite sets, then any clopen subset of `X` arises from\na clopen set in one of the terms in the limit. -/\ntheorem ∀ {J : Type u} [inst : CategoryTheory.SmallCategory J] [inst_1 : CategoryTheory.IsCofiltered J]\n  {F : CategoryTheory.Functor J Profinite} (C : CategoryTheory.Limits.Cone F) {U : Set ↑C.pt.toCompHaus.toTop},\n  CategoryTheory.Limits.IsLimit C → IsClopen U → ∃ j V x, U = ↑(CategoryTheory.NatTrans.app C.π j) ⁻¹' V :=\n\n/-- Proof of the continuity of the map. -/\ntheorem ∀ {F : Type u_1} {A : outParam (Type u_2)} {B : outParam (Type u_3)} [inst : Monoid A] [inst_1 : Monoid B]\n  [inst_2 : TopologicalSpace A] [inst_3 : TopologicalSpace B] [self : ContinuousMonoidHomClass F A B] (f : F),\n  Continuous ↑f :=\n\n/-- Left-closed right-infinite intervals [a, ∞) are closed in the lower topology. -/\ntheorem ∀ {α : Type u_1} [inst : Preorder α] [inst_1 : TopologicalSpace α] [inst_2 : LowerTopology α] (a : α),\n  IsClosed (Set.Ici a) :=\n\n/-- There exists a countable set of sets that generates the topology. -/\ntheorem ∀ {α : Type u} [t : TopologicalSpace α] [self : TopologicalSpace.SecondCountableTopology α],\n  ∃ b, Set.Countable b ∧ t = TopologicalSpace.generateFrom b :=\n\n/-- Under the coercion from `ℤ` to `ℝ`, inverse images of compact sets are finite. -/\ntheorem Filter.Tendsto Int.cast Filter.cofinite (Filter.cocompact ℝ) :=\n\n/-- The complement of a closed set is an open set. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] {s : Set α} [self : IsClosed s], IsOpen sᶜ :=\n\n/-- If `X` is not a compact space, then `OnePoint X` is a connected space. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : PreconnectedSpace X] [inst_2 : NoncompactSpace X],\n  ConnectedSpace (OnePoint X) :=\n\n/-- A finite union of finsets is finite. -/\ntheorem ∀ {α : Type u} {β : Type v} (f : α → Finset β), Set.Finite (Set.range f) → Set.Finite (⋃ (a : α), ↑(f a)) :=\n\n/-- A nonempty convex set is connected. -/\ntheorem ∀ {E : Type u_1} [inst : AddCommGroup E] [inst_1 : Module ℝ E] [inst_2 : TopologicalSpace E]\n  [inst_3 : TopologicalAddGroup E] [inst_4 : ContinuousSMul ℝ E] {s : Set E},\n  Convex ℝ s → Set.Nonempty s → IsConnected s :=\n\n/-- Show that if `X` is an infinite set, it is connected in the finite complement topology. -/\ntheorem", "choices": ["∀ {α : Type u_1} [inst : Infinite α], ConnectedSpace (CofiniteTopology α) ", "∀ {X : Type u_1} [inst : Infinite X], ConnectedSpace (CofiniteTopology X) ", "∀ {X : Type u_1} [inst : Infinite X], ConnectedSpace (CofiniteTopology X) ", "∀ {X : Type u_1} [inst : Infinite X], ConnectedSpace (CofiniteTopology X) ", "∀ {α : Type u_1} [inst : Infinite α], ConnectedSpace (CofiniteTopology α) ", "∀ {X : Type u_1} [inst : Infinite X], ConnectedSpace (CofiniteTopology X) ", "∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : Infinite X] [inst_2 : CofiniteTopology X],\n  ConnectedSpace X ", "∀ {α : Type u_1} [inst : Infinite α], ConnectedSpace (CofiniteTopology α) ", "∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : Infinite X] [inst_2 : CofiniteTopology X], ConnectedSpace X ", "∀ {X : Type u_1} [inst : Infinite X], ConnectedSpace (CofiniteTopology X) "]}
{"docString": "Let `A` be a proper subset of `X`, and let `B` be a proper subset of `Y`. If `X` and `Y` are connected, show that `(X × Y) - (A × B)` is connected.", "prompts": "[{\"theorem\":\n  \"∀ {X Y S : TopCat} {f : X ⟶ S} {g : Y ⟶ S},\\n  OpenEmbedding ↑f →\\n    OpenEmbedding ↑g →\\n      OpenEmbedding\\n        ↑(CategoryTheory.Limits.limit.π (CategoryTheory.Limits.cospan f g) CategoryTheory.Limits.WalkingCospan.one)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `X ⟶ S`, `Y ⟶ S` are open embeddings, then so is `X ×ₛ Y ⟶ S`. \"},\n {\"theorem\":\n  \"∀ {C : Type u} [inst : CategoryTheory.Category C] {X Y Z A : C} {g : Y ⟶ Z} {a₁ a₂ : A ⟶ Y}\\n  (h : CategoryTheory.IsKernelPair g a₁ a₂) (f : X ⟶ Z) [inst_1 : CategoryTheory.Limits.HasPullback f g]\\n  [inst_2 : CategoryTheory.Limits.HasPullback f (CategoryTheory.CategoryStruct.comp a₁ g)],\\n  CategoryTheory.IsKernelPair CategoryTheory.Limits.pullback.fst\\n    (CategoryTheory.Limits.pullback.map f (CategoryTheory.CategoryStruct.comp a₁ g) f g\\n      (CategoryTheory.CategoryStruct.id X) a₁ (CategoryTheory.CategoryStruct.id Z)\\n      (_ :\\n        CategoryTheory.CategoryStruct.comp f (CategoryTheory.CategoryStruct.id Z) =\\n          CategoryTheory.CategoryStruct.comp (CategoryTheory.CategoryStruct.id X) f)\\n      (_ :\\n        CategoryTheory.CategoryStruct.comp (CategoryTheory.CategoryStruct.comp a₁ g)\\n            (CategoryTheory.CategoryStruct.id Z) =\\n          CategoryTheory.CategoryStruct.comp a₁ g))\\n    (CategoryTheory.Limits.pullback.map f (CategoryTheory.CategoryStruct.comp a₁ g) f g\\n      (CategoryTheory.CategoryStruct.id X) a₂ (CategoryTheory.CategoryStruct.id Z)\\n      (_ :\\n        CategoryTheory.CategoryStruct.comp f (CategoryTheory.CategoryStruct.id Z) =\\n          CategoryTheory.CategoryStruct.comp (CategoryTheory.CategoryStruct.id X) f)\\n      (_ :\\n        CategoryTheory.CategoryStruct.comp (CategoryTheory.CategoryStruct.comp a₁ g)\\n            (CategoryTheory.CategoryStruct.id Z) =\\n          CategoryTheory.CategoryStruct.comp a₂ g))\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `a₁ a₂ : A ⟶ Y` is a kernel pair for `g : Y ⟶ Z`, then `a₁ ×[Z] X` and `a₂ ×[Z] X`\\n(`A ×[Z] X ⟶ Y ×[Z] X`) is a kernel pair for `Y ×[Z] X ⟶ X`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {s : Set α},\\n  (∀ (x : α), x ∈ s → ∀ (y : α), y ∈ s → ∃ t, t ⊆ s ∧ x ∈ t ∧ y ∈ t ∧ IsPreconnected t) → IsPreconnected s\",\n  \"isProp\": true,\n  \"docString\":\n  \"If any two points of a set are contained in a preconnected subset,\\nthen the original set is preconnected as well. \"},\n {\"theorem\":\n  \"∀ (C : Type u) [inst : CategoryTheory.Category C]\\n  [inst_1 : ∀ {X Y : C}, CategoryTheory.Limits.HasColimit (CategoryTheory.Limits.pair X Y)],\\n  CategoryTheory.Limits.HasBinaryCoproducts C\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `C` has all colimits of diagrams `pair X Y`, then it has all binary coproducts \"},\n {\"theorem\":\n  \"∀ {K : Type u_1} {g : GeneralizedContinuedFraction K} {n : ℕ} [inst : DivisionRing K]\\n  {gp ppred pred : GeneralizedContinuedFraction.Pair K},\\n  Stream'.Seq.get? g.s (n + 1) = some gp →\\n    GeneralizedContinuedFraction.continuants g n = ppred →\\n      GeneralizedContinuedFraction.continuants g (n + 1) = pred →\\n        GeneralizedContinuedFraction.continuants g (n + 2) =\\n          { a := gp.b * pred.a + gp.a * ppred.a, b := gp.b * pred.b + gp.a * ppred.b }\",\n  \"isProp\": true,\n  \"docString\":\n  \"Shows that `Aₙ = bₙ * Aₙ₋₁ + aₙ * Aₙ₋₂` and `Bₙ = bₙ * Bₙ₋₁ + aₙ * Bₙ₋₂`. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : CompactSpace X] {Y : Type u_2} [inst_2 : TopologicalSpace Y],\\n  IsClosedMap Prod.snd\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `X` is a compact topological space, then `Prod.snd : X × Y → Y` is a closed map. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X],\\n  (Pairwise fun x y => ∃ U, IsClopen U ∧ x ∈ U ∧ ¬y ∈ U) → IsTotallyDisconnected Set.univ\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `X` be a topological space, and suppose that for all distinct `x,y ∈ X`, there\\nis some clopen set `U` such that `x ∈ U` and `y ∉ U`. Then `X` is totally disconnected. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_2} {E : Type u_1} [inst : TopologicalSpace 𝕜] [inst_1 : OrderedRing 𝕜] [inst_2 : AddCommMonoid E]\\n  [inst_3 : TopologicalSpace E] [inst_4 : Module 𝕜 E] {A B : Set E},\\n  IsExposed 𝕜 A B → Set.Nonempty B → ∃ l a, B = {x | x ∈ A ∧ a ≤ ↑l x}\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `B` is a nonempty exposed subset of `A`, then `B` is the intersection of `A` with some closed\\nhalfspace. The converse is *not* true. It would require that the corresponding open halfspace\\ndoesn't intersect `A`. \"},\n {\"theorem\":\n  \"∀ {S : Type u_1} [inst : Semigroup S] {a b c : S}, Commute a b → Commute a c → Commute a (b * c)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `a` commutes with both `b` and `c`, then it commutes with their product. \"},\n {\"theorem\":\n  \"∀ {A : Type u_1} {ι : Type u_2} [inst : Ring A] {B : ι → AddSubgroup A},\\n  RingSubgroupsBasis B → ∀ (i : ι), ∃ j, ↑(B j) * ↑(B j) ⊆ ↑(B i)\",\n  \"isProp\": true,\n  \"docString\":\n  \"For each set `B` in the submodule basis on `A`, there is another basis element `B'` such\\nthat the set-theoretic product `B' * B'` is in `B`. \"},\n {\"theorem\":\n  \"∀ {S : Type u_1} [inst : Mul S] {a b : S}, Commute a b → Commute b a\",\n  \"isProp\": true,\n  \"docString\": \"If `a` commutes with `b`, then `b` commutes with `a`. \"},\n {\"theorem\":\n  \"∀ {G : Type u_1} [inst : Group G] {N : Type u_2} [inst_1 : Group N] (f : G →* N) {H K : Subgroup G},\\n  MonoidHom.ker f ≤ H → MonoidHom.ker f ≤ K → Subgroup.map f H = Subgroup.map f K → H = K\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given `f(A) = f(B)`, `ker f ≤ A`, and `ker f ≤ B`, deduce that `A = B`. \"},\n {\"theorem\":\n  \"∀ {C : Type u₁} [inst : CategoryTheory.Category C] {B : C} {X Y : CategoryTheory.Subobject B}\\n  (f : CategoryTheory.Subobject.underlying.obj X ≅ CategoryTheory.Subobject.underlying.obj Y),\\n  CategoryTheory.CategoryStruct.comp f.hom (CategoryTheory.Subobject.arrow Y) = CategoryTheory.Subobject.arrow X → X = Y\",\n  \"isProp\": true,\n  \"docString\":\n  \"To show that two subobjects are equal, it suffices to exhibit an isomorphism commuting with\\nthe arrows. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {s : Set α} (x : α),\\n  (∀ (y : α), y ∈ s → ∃ t, t ⊆ s ∧ x ∈ t ∧ y ∈ t ∧ IsPreconnected t) → IsPreconnected s\",\n  \"isProp\": true,\n  \"docString\":\n  \"If any point of a set is joined to a fixed point by a preconnected subset,\\nthen the original set is preconnected as well. \"},\n {\"theorem\":\n  \"∀ {M : Type u_1} [inst : Monoid M] {s₁ s₂ : Set M}, IsSubmonoid s₁ → IsSubmonoid s₂ → IsSubmonoid (s₁ ∩ s₂)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The intersection of two submonoids of a monoid `M` is a submonoid of `M`. \"},\n {\"theorem\":\n  \"∀ {G : Type u_1} [inst : AddGroup G] {N : Type u_2} [inst_1 : AddGroup N] (f : G →+ N) {H K : AddSubgroup G},\\n  AddMonoidHom.ker f ≤ H → AddMonoidHom.ker f ≤ K → AddSubgroup.map f H = AddSubgroup.map f K → H = K\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given `f(A) = f(B)`, `ker f ≤ A`, and `ker f ≤ B`, deduce that `A = B`.\"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] (x : α) (c : Set (Set α)),\\n  (∀ (s : Set α), s ∈ c → x ∈ s) → (∀ (s : Set α), s ∈ c → IsPreconnected s) → IsPreconnected (⋃₀ c)\",\n  \"isProp\": true,\n  \"docString\":\n  \"A union of a family of preconnected sets with a common point is preconnected as well. \"},\n {\"theorem\":\n  \"∀ {A : Type u_1} {ι : Type u_2} [inst : Ring A] {B : ι → AddSubgroup A},\\n  RingSubgroupsBasis B → ∀ (x : A) (i : ι), ∃ j, ↑(B j) ⊆ (fun x_1 => x_1 * x) ⁻¹' ↑(B i)\",\n  \"isProp\": true,\n  \"docString\":\n  \"For any element `x : A` and any set `B` in the submodule basis on `A`,\\nthere is another basis element `B'` such that `x * B'` is in `B`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] {s : Set α},\\n  IsConnected s → ∀ (f : α → β), ContinuousOn f s → IsConnected (f '' s)\",\n  \"isProp\": true,\n  \"docString\": \"The image of a connected set is connected as well. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {S : Set (Set α)},\\n  DirectedOn (fun x x_1 => x ⊆ x_1) S → (∀ (s : Set α), s ∈ S → IsPreconnected s) → IsPreconnected (⋃₀ S)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The directed sUnion of a set S of preconnected subsets is preconnected. \"}]\n", "prompt_cons": "/-- If `X ⟶ S`, `Y ⟶ S` are open embeddings, then so is `X ×ₛ Y ⟶ S`. -/\ntheorem ∀ {X Y S : TopCat} {f : X ⟶ S} {g : Y ⟶ S},\n  OpenEmbedding ↑f →\n    OpenEmbedding ↑g →\n      OpenEmbedding\n        ↑(CategoryTheory.Limits.limit.π (CategoryTheory.Limits.cospan f g) CategoryTheory.Limits.WalkingCospan.one) :=\n\n/-- If `a₁ a₂ : A ⟶ Y` is a kernel pair for `g : Y ⟶ Z`, then `a₁ ×[Z] X` and `a₂ ×[Z] X`\n(`A ×[Z] X ⟶ Y ×[Z] X`) is a kernel pair for `Y ×[Z] X ⟶ X`. -/\ntheorem ∀ {C : Type u} [inst : CategoryTheory.Category C] {X Y Z A : C} {g : Y ⟶ Z} {a₁ a₂ : A ⟶ Y}\n  (h : CategoryTheory.IsKernelPair g a₁ a₂) (f : X ⟶ Z) [inst_1 : CategoryTheory.Limits.HasPullback f g]\n  [inst_2 : CategoryTheory.Limits.HasPullback f (CategoryTheory.CategoryStruct.comp a₁ g)],\n  CategoryTheory.IsKernelPair CategoryTheory.Limits.pullback.fst\n    (CategoryTheory.Limits.pullback.map f (CategoryTheory.CategoryStruct.comp a₁ g) f g\n      (CategoryTheory.CategoryStruct.id X) a₁ (CategoryTheory.CategoryStruct.id Z)\n      (_ :\n        CategoryTheory.CategoryStruct.comp f (CategoryTheory.CategoryStruct.id Z) =\n          CategoryTheory.CategoryStruct.comp (CategoryTheory.CategoryStruct.id X) f)\n      (_ :\n        CategoryTheory.CategoryStruct.comp (CategoryTheory.CategoryStruct.comp a₁ g)\n            (CategoryTheory.CategoryStruct.id Z) =\n          CategoryTheory.CategoryStruct.comp a₁ g))\n    (CategoryTheory.Limits.pullback.map f (CategoryTheory.CategoryStruct.comp a₁ g) f g\n      (CategoryTheory.CategoryStruct.id X) a₂ (CategoryTheory.CategoryStruct.id Z)\n      (_ :\n        CategoryTheory.CategoryStruct.comp f (CategoryTheory.CategoryStruct.id Z) =\n          CategoryTheory.CategoryStruct.comp (CategoryTheory.CategoryStruct.id X) f)\n      (_ :\n        CategoryTheory.CategoryStruct.comp (CategoryTheory.CategoryStruct.comp a₁ g)\n            (CategoryTheory.CategoryStruct.id Z) =\n          CategoryTheory.CategoryStruct.comp a₂ g)) :=\n\n/-- If any two points of a set are contained in a preconnected subset,\nthen the original set is preconnected as well. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] {s : Set α},\n  (∀ (x : α), x ∈ s → ∀ (y : α), y ∈ s → ∃ t, t ⊆ s ∧ x ∈ t ∧ y ∈ t ∧ IsPreconnected t) → IsPreconnected s :=\n\n/-- If `C` has all colimits of diagrams `pair X Y`, then it has all binary coproducts -/\ntheorem ∀ (C : Type u) [inst : CategoryTheory.Category C]\n  [inst_1 : ∀ {X Y : C}, CategoryTheory.Limits.HasColimit (CategoryTheory.Limits.pair X Y)],\n  CategoryTheory.Limits.HasBinaryCoproducts C :=\n\n/-- Shows that `Aₙ = bₙ * Aₙ₋₁ + aₙ * Aₙ₋₂` and `Bₙ = bₙ * Bₙ₋₁ + aₙ * Bₙ₋₂`. -/\ntheorem ∀ {K : Type u_1} {g : GeneralizedContinuedFraction K} {n : ℕ} [inst : DivisionRing K]\n  {gp ppred pred : GeneralizedContinuedFraction.Pair K},\n  Stream'.Seq.get? g.s (n + 1) = some gp →\n    GeneralizedContinuedFraction.continuants g n = ppred →\n      GeneralizedContinuedFraction.continuants g (n + 1) = pred →\n        GeneralizedContinuedFraction.continuants g (n + 2) =\n          { a := gp.b * pred.a + gp.a * ppred.a, b := gp.b * pred.b + gp.a * ppred.b } :=\n\n/-- If `X` is a compact topological space, then `Prod.snd : X × Y → Y` is a closed map. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : CompactSpace X] {Y : Type u_2} [inst_2 : TopologicalSpace Y],\n  IsClosedMap Prod.snd :=\n\n/-- Let `X` be a topological space, and suppose that for all distinct `x,y ∈ X`, there\nis some clopen set `U` such that `x ∈ U` and `y ∉ U`. Then `X` is totally disconnected. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X],\n  (Pairwise fun x y => ∃ U, IsClopen U ∧ x ∈ U ∧ ¬y ∈ U) → IsTotallyDisconnected Set.univ :=\n\n/-- If `B` is a nonempty exposed subset of `A`, then `B` is the intersection of `A` with some closed\nhalfspace. The converse is *not* true. It would require that the corresponding open halfspace\ndoesn't intersect `A`. -/\ntheorem ∀ {𝕜 : Type u_2} {E : Type u_1} [inst : TopologicalSpace 𝕜] [inst_1 : OrderedRing 𝕜] [inst_2 : AddCommMonoid E]\n  [inst_3 : TopologicalSpace E] [inst_4 : Module 𝕜 E] {A B : Set E},\n  IsExposed 𝕜 A B → Set.Nonempty B → ∃ l a, B = {x | x ∈ A ∧ a ≤ ↑l x} :=\n\n/-- If `a` commutes with both `b` and `c`, then it commutes with their product. -/\ntheorem ∀ {S : Type u_1} [inst : Semigroup S] {a b c : S}, Commute a b → Commute a c → Commute a (b * c) :=\n\n/-- For each set `B` in the submodule basis on `A`, there is another basis element `B'` such\nthat the set-theoretic product `B' * B'` is in `B`. -/\ntheorem ∀ {A : Type u_1} {ι : Type u_2} [inst : Ring A] {B : ι → AddSubgroup A},\n  RingSubgroupsBasis B → ∀ (i : ι), ∃ j, ↑(B j) * ↑(B j) ⊆ ↑(B i) :=\n\n/-- If `a` commutes with `b`, then `b` commutes with `a`. -/\ntheorem ∀ {S : Type u_1} [inst : Mul S] {a b : S}, Commute a b → Commute b a :=\n\n/-- Given `f(A) = f(B)`, `ker f ≤ A`, and `ker f ≤ B`, deduce that `A = B`. -/\ntheorem ∀ {G : Type u_1} [inst : Group G] {N : Type u_2} [inst_1 : Group N] (f : G →* N) {H K : Subgroup G},\n  MonoidHom.ker f ≤ H → MonoidHom.ker f ≤ K → Subgroup.map f H = Subgroup.map f K → H = K :=\n\n/-- To show that two subobjects are equal, it suffices to exhibit an isomorphism commuting with\nthe arrows. -/\ntheorem ∀ {C : Type u₁} [inst : CategoryTheory.Category C] {B : C} {X Y : CategoryTheory.Subobject B}\n  (f : CategoryTheory.Subobject.underlying.obj X ≅ CategoryTheory.Subobject.underlying.obj Y),\n  CategoryTheory.CategoryStruct.comp f.hom (CategoryTheory.Subobject.arrow Y) = CategoryTheory.Subobject.arrow X → X = Y :=\n\n/-- If any point of a set is joined to a fixed point by a preconnected subset,\nthen the original set is preconnected as well. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] {s : Set α} (x : α),\n  (∀ (y : α), y ∈ s → ∃ t, t ⊆ s ∧ x ∈ t ∧ y ∈ t ∧ IsPreconnected t) → IsPreconnected s :=\n\n/-- The intersection of two submonoids of a monoid `M` is a submonoid of `M`. -/\ntheorem ∀ {M : Type u_1} [inst : Monoid M] {s₁ s₂ : Set M}, IsSubmonoid s₁ → IsSubmonoid s₂ → IsSubmonoid (s₁ ∩ s₂) :=\n\n/-- Given `f(A) = f(B)`, `ker f ≤ A`, and `ker f ≤ B`, deduce that `A = B`. -/\ntheorem ∀ {G : Type u_1} [inst : AddGroup G] {N : Type u_2} [inst_1 : AddGroup N] (f : G →+ N) {H K : AddSubgroup G},\n  AddMonoidHom.ker f ≤ H → AddMonoidHom.ker f ≤ K → AddSubgroup.map f H = AddSubgroup.map f K → H = K :=\n\n/-- A union of a family of preconnected sets with a common point is preconnected as well. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] (x : α) (c : Set (Set α)),\n  (∀ (s : Set α), s ∈ c → x ∈ s) → (∀ (s : Set α), s ∈ c → IsPreconnected s) → IsPreconnected (⋃₀ c) :=\n\n/-- For any element `x : A` and any set `B` in the submodule basis on `A`,\nthere is another basis element `B'` such that `x * B'` is in `B`. -/\ntheorem ∀ {A : Type u_1} {ι : Type u_2} [inst : Ring A] {B : ι → AddSubgroup A},\n  RingSubgroupsBasis B → ∀ (x : A) (i : ι), ∃ j, ↑(B j) ⊆ (fun x_1 => x_1 * x) ⁻¹' ↑(B i) :=\n\n/-- The image of a connected set is connected as well. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] {s : Set α},\n  IsConnected s → ∀ (f : α → β), ContinuousOn f s → IsConnected (f '' s) :=\n\n/-- The directed sUnion of a set S of preconnected subsets is preconnected. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] {S : Set (Set α)},\n  DirectedOn (fun x x_1 => x ⊆ x_1) S → (∀ (s : Set α), s ∈ S → IsPreconnected s) → IsPreconnected (⋃₀ S) :=\n\n/-- Let `A` be a proper subset of `X`, and let `B` be a proper subset of `Y`. If `X` and `Y` are connected, show that `(X × Y) - (A × B)` is connected. -/\ntheorem", "choices": ["∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] {A : Set α} {B : Set β} {X : Set α} {Y : Set β},\n  IsConnected X → IsConnected Y → A ⊂ X → B ⊂ Y → IsConnected ((X × Y) \\ (A × B)) "]}
{"docString": "Let `f: S^1 → ℝ` be a continuous map. Show there exists a point `x` of `S^1` such that `f(x) = f(-x)`.", "prompts": "[{\"theorem\":\n  \"∀ (f : CircleDeg1Lift), Continuous ↑f → ∃ x, ↑f x = x + CircleDeg1Lift.translationNumber f\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` is a continuous monotone map `ℝ → ℝ`, `f (x + 1) = f x + 1`, then there exists `x`\\nsuch that `f x = x + τ f`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {𝕜 : Type u_1} {f : α → 𝕜} {S : Set α} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace 𝕜]\\n  [inst_2 : T1Space 𝕜] [inst_3 : Ring 𝕜] [inst_4 : NoZeroDivisors 𝕜],\\n  IsPreconnected S → ContinuousOn f S → Set.EqOn (f ^ 2) 1 S → Set.EqOn f 1 S ∨ Set.EqOn f (-1) S\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` is a function `α → 𝕜` which is continuous on a preconnected set `S`, and\\n`f ^ 2 = 1` on `S`, then either `f = 1` on `S`, or `f = -1` on `S`. \"},\n {\"theorem\":\n  \"∀ {G₀ : Type u_1} [inst : Zero G₀] [inst_1 : Inv G₀] [inst_2 : TopologicalSpace G₀] [self : HasContinuousInv₀ G₀]\\n  ⦃x : G₀⦄, x ≠ 0 → ContinuousAt Inv.inv x\",\n  \"isProp\": true,\n  \"docString\": \"The map `fun x ↦ x⁻¹` is continuous at all nonzero points. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {𝕜 : Type u_1} {f g : α → 𝕜} {S : Set α} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace 𝕜]\\n  [inst_2 : T1Space 𝕜] [inst_3 : Field 𝕜] [inst_4 : HasContinuousInv₀ 𝕜] [inst_5 : ContinuousMul 𝕜],\\n  IsPreconnected S →\\n    ContinuousOn f S →\\n      ContinuousOn g S → Set.EqOn (f ^ 2) (g ^ 2) S → (∀ {x : α}, x ∈ S → g x ≠ 0) → Set.EqOn f g S ∨ Set.EqOn f (-g) S\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f, g` are functions `α → 𝕜`, both continuous on a preconnected set `S`, with\\n`f ^ 2 = g ^ 2` on `S`, and `g z ≠ 0` all `z ∈ S`, then either `f = g` or `f = -g` on\\n`S`. \"},\n {\"theorem\":\n  \"∀ {z : ℝ} {f : ℝ → ℝ} {u : ℝ}, HasDerivAt f u z → HasDerivAt (fun y => ↑(f y)) (↑u) z\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a function `f : ℝ → ℝ` is differentiable at a (real) point `x`, then it is also\\ndifferentiable as a function `ℝ → ℂ`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {𝕜 : Type u_1} {f g : α → 𝕜} {S : Set α} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace 𝕜]\\n  [inst_2 : T1Space 𝕜] [inst_3 : Field 𝕜] [inst_4 : HasContinuousInv₀ 𝕜] [inst_5 : ContinuousMul 𝕜],\\n  IsPreconnected S →\\n    ContinuousOn f S →\\n      ContinuousOn g S →\\n        Set.EqOn (f ^ 2) (g ^ 2) S → (∀ {x : α}, x ∈ S → g x ≠ 0) → ∀ {y : α}, y ∈ S → f y = g y → Set.EqOn f g S\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f, g` are functions `α → 𝕜`, both continuous on a preconnected set `S`, with\\n`f ^ 2 = g ^ 2` on `S`, and `g z ≠ 0` all `z ∈ S`, then as soon as `f = g` holds at\\none point of `S` it holds for all points. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : TopologicalSpace E] [inst_1 : AddCommGroup E] [inst_2 : TopologicalAddGroup E]\\n  [inst_3 : Module ℝ E] [inst_4 : ContinuousSMul ℝ E] {s : Set E},\\n  0 ∈ s → Convex ℝ s → IsOpen s → ∀ {x₀ : E}, ¬x₀ ∈ s → ∃ f, ↑f x₀ = 1 ∧ ∀ (x : E), x ∈ s → ↑f x < 1\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given a set `s` which is a convex neighbourhood of `0` and a point `x₀` outside of it, there is\\na continuous linear functional `f` separating `x₀` and `s`, in the sense that it sends `x₀` to 1 and\\nall of `s` to values strictly below `1`. \"},\n {\"theorem\":\n  \"∀ (x : ℝ) (y : ℂ), 0 < y.re ∨ x ≠ 0 → ContinuousAt (fun p => ↑p.fst ^ p.snd) (x, y)\",\n  \"isProp\": true,\n  \"docString\": \"Continuity of `(x, y) ↦ x ^ y` as a function on `ℝ × ℂ`. \"},\n {\"theorem\":\n  \"∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {n : ℕ∞} {s : Set ℂ}\\n  {f : ℂ → E}, DifferentiableOn ℂ f s → IsOpen s → ContDiffOn ℂ n f s\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f : ℂ → E` is complex differentiable on some open set `s`, then it is continuously\\ndifferentiable on `s`. \"},\n {\"theorem\":\n  \"∀ {𝕂 : Type u_1} [inst : IsROrC 𝕂] {E' : Type u_2} [inst_1 : NormedAddCommGroup E'] [inst_2 : NormedSpace 𝕂 E']\\n  {F' : Type u_3} [inst_3 : NormedAddCommGroup F'] [inst_4 : NormedSpace 𝕂 F'] {f : E' → F'} {x : E'},\\n  ContDiffAt 𝕂 1 f x → ∃ K t, t ∈ nhds x ∧ LipschitzOnWith K f t\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` is `C^1` at `x`, then `f` is Lipschitz in a neighborhood of `x`. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : CompleteSpace E] [inst_2 : NormedSpace ℝ E] {f : ℝ → E}\\n  {a b : ℝ},\\n  IntervalIntegrable f MeasureTheory.volume a b →\\n    ∀ {s t : Set ℝ} [inst_3 : intervalIntegral.FTCFilter a (nhdsWithin a s) (nhdsWithin a t)],\\n      StronglyMeasurableAtFilter f (nhdsWithin a t) →\\n        ContinuousWithinAt f t a →\\n          autoParam (UniqueDiffWithinAt ℝ s a) _auto✝ → derivWithin (fun u => ∫ (x : ℝ) in u..b, f x) s a = -f a\",\n  \"isProp\": true,\n  \"docString\":\n  \"Fundamental theorem of calculus: if `f : ℝ → E` is integrable on `a..b` and `f x` is continuous\\non the right or on the left at `a`, then the right (resp., left) derivative of\\n`u ↦ ∫ x in u..b, f x` at `a` equals `-f a`. \"},\n {\"theorem\":\n  \"∀ {M : Type u_2} [inst : AddCommMonoid M] {S : AddSubmonoid M} {N : Type u_1} [inst_1 : AddCommMonoid N]\\n  (f : AddSubmonoid.LocalizationMap S N) (z : N),\\n  AddSubmonoid.LocalizationMap.mk' f (AddSubmonoid.LocalizationMap.sec f z).fst\\n      (AddSubmonoid.LocalizationMap.sec f z).snd =\\n    z\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given a localization map `f : M →+ N` for a Submonoid `S ⊆ M`, for all `z : N`\\nwe have that if `x : M, y ∈ S` are such that `z + f y = f x`, then `f x - f y = z`.\"},\n {\"theorem\":\n  \"∀ {f : ℝ → ℝ}, Differentiable ℝ f → (∀ (x : ℝ), 0 ≤ deriv f x) → Monotone f\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `f : ℝ → ℝ` be a differentiable function. If `f'` is nonnegative, then\\n`f` is a monotone function. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} {F : Type u_2} [inst : NormedAddCommGroup E] [inst_1 : NormedAddCommGroup F]\\n  [inst_2 : InnerProductSpace ℝ E] [inst_3 : InnerProductSpace ℝ F] {f : E → F} {x : E},\\n  ConformalAt f x ↔ ∃ c, 0 < c ∧ ∀ (u v : E), inner (↑(fderiv ℝ f x) u) (↑(fderiv ℝ f x) v) = c * inner u v\",\n  \"isProp\": true,\n  \"docString\":\n  \"A real differentiable map `f` is conformal at point `x` if and only if its\\ndifferential `fderiv ℝ f x` at that point scales every inner product by a positive scalar. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {β : Type u_2} [inst : LinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderTopology α]\\n  [inst_3 : LinearOrder β] [inst_4 : TopologicalSpace β] [inst_5 : OrderTopology β] {f : α → β} {s : Set α} {a : α},\\n  StrictMonoOn f s →\\n    s ∈ nhdsWithin a (Set.Iic a) →\\n      (∀ (b : β), b < f a → ∃ c, c ∈ s ∧ f c ∈ Set.Ico b (f a)) → ContinuousWithinAt f (Set.Iic a) a\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` is a strictly monotone function on a left neighborhood of `a` and the image of this\\nneighborhood under `f` meets every interval `[b, f a)`, `b < f a`, then `f` is continuous at `a`\\nfrom the left.\\n\\nThe assumption `hfs : ∀ b < f a, ∃ c ∈ s, f c ∈ Ico b (f a)` is required because otherwise the\\nfunction `f : ℝ → ℝ` given by `f x = if x < 0 then x else x + 1` would be a counter-example at\\n`a = 0`. \"},\n {\"theorem\":\n  \"∀ (f : CircleDeg1Lift) {x : ℝ} {m : ℤ}, ↑f x = x + ↑m → CircleDeg1Lift.translationNumber f = ↑m\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f x - x` is an integer number `m` for some point `x`, then `τ f = m`.\\nOn the circle this means that a map with a fixed point has rotation number zero. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : CompleteSpace E] [inst_2 : NormedSpace ℝ E] {f : ℝ → E}\\n  {a b : ℝ},\\n  IntervalIntegrable f MeasureTheory.volume a b →\\n    StronglyMeasurableAtFilter f (nhds a) → ContinuousAt f a → deriv (fun u => ∫ (x : ℝ) in u..b, f x) a = -f a\",\n  \"isProp\": true,\n  \"docString\":\n  \"Fundamental theorem of calculus: if `f : ℝ → E` is integrable on `a..b` and `f` is continuous\\nat `a`, then the derivative of `u ↦ ∫ x in u..b, f x` at `a` equals `-f a`. \"},\n {\"theorem\":\n  \"∀ {f : ℝ → ℝ}, Continuous f → StrictAnti (deriv f) → StrictConcaveOn ℝ Set.univ f\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a function `f` is continuous and `f'` is strictly antitone on `ℝ` then `f` is strictly\\nconcave. Note that we don't require differentiability, since it is guaranteed at all but at most\\none point by the strict antitonicity of `f'`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_2} {𝕜₂ : Type u_3} {E : Type u_4} {F : Type u_5} {𝓕 : Type u_1} [inst : SeminormedAddCommGroup E]\\n  [inst_1 : SeminormedAddCommGroup F] [inst_2 : NontriviallyNormedField 𝕜] [inst_3 : NontriviallyNormedField 𝕜₂]\\n  [inst_4 : NormedSpace 𝕜 E] [inst_5 : NormedSpace 𝕜₂ F] {σ₁₂ : 𝕜 →+* 𝕜₂} [inst_6 : SemilinearMapClass 𝓕 σ₁₂ E F]\\n  (f : 𝓕), Continuous ↑f → ∀ {x : E}, ‖x‖ = 0 → ‖↑f x‖ = 0\",\n  \"isProp\": true,\n  \"docString\": \"If `‖x‖ = 0` and `f` is continuous then `‖f x‖ = 0`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : PseudoMetricSpace β] {x : α}, Continuous fun f => ↑f x\",\n  \"isProp\": true,\n  \"docString\": \"When `x` is fixed, `(f : α →ᵇ β) ↦ f x` is continuous. \"}]\n", "prompt_cons": "/-- If `f` is a continuous monotone map `ℝ → ℝ`, `f (x + 1) = f x + 1`, then there exists `x`\nsuch that `f x = x + τ f`. -/\ntheorem ∀ (f : CircleDeg1Lift), Continuous ↑f → ∃ x, ↑f x = x + CircleDeg1Lift.translationNumber f :=\n\n/-- If `f` is a function `α → 𝕜` which is continuous on a preconnected set `S`, and\n`f ^ 2 = 1` on `S`, then either `f = 1` on `S`, or `f = -1` on `S`. -/\ntheorem ∀ {α : Type u_2} {𝕜 : Type u_1} {f : α → 𝕜} {S : Set α} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace 𝕜]\n  [inst_2 : T1Space 𝕜] [inst_3 : Ring 𝕜] [inst_4 : NoZeroDivisors 𝕜],\n  IsPreconnected S → ContinuousOn f S → Set.EqOn (f ^ 2) 1 S → Set.EqOn f 1 S ∨ Set.EqOn f (-1) S :=\n\n/-- The map `fun x ↦ x⁻¹` is continuous at all nonzero points. -/\ntheorem ∀ {G₀ : Type u_1} [inst : Zero G₀] [inst_1 : Inv G₀] [inst_2 : TopologicalSpace G₀] [self : HasContinuousInv₀ G₀]\n  ⦃x : G₀⦄, x ≠ 0 → ContinuousAt Inv.inv x :=\n\n/-- If `f, g` are functions `α → 𝕜`, both continuous on a preconnected set `S`, with\n`f ^ 2 = g ^ 2` on `S`, and `g z ≠ 0` all `z ∈ S`, then either `f = g` or `f = -g` on\n`S`. -/\ntheorem ∀ {α : Type u_2} {𝕜 : Type u_1} {f g : α → 𝕜} {S : Set α} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace 𝕜]\n  [inst_2 : T1Space 𝕜] [inst_3 : Field 𝕜] [inst_4 : HasContinuousInv₀ 𝕜] [inst_5 : ContinuousMul 𝕜],\n  IsPreconnected S →\n    ContinuousOn f S →\n      ContinuousOn g S → Set.EqOn (f ^ 2) (g ^ 2) S → (∀ {x : α}, x ∈ S → g x ≠ 0) → Set.EqOn f g S ∨ Set.EqOn f (-g) S :=\n\n/-- If a function `f : ℝ → ℝ` is differentiable at a (real) point `x`, then it is also\ndifferentiable as a function `ℝ → ℂ`. -/\ntheorem ∀ {z : ℝ} {f : ℝ → ℝ} {u : ℝ}, HasDerivAt f u z → HasDerivAt (fun y => ↑(f y)) (↑u) z :=\n\n/-- If `f, g` are functions `α → 𝕜`, both continuous on a preconnected set `S`, with\n`f ^ 2 = g ^ 2` on `S`, and `g z ≠ 0` all `z ∈ S`, then as soon as `f = g` holds at\none point of `S` it holds for all points. -/\ntheorem ∀ {α : Type u_2} {𝕜 : Type u_1} {f g : α → 𝕜} {S : Set α} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace 𝕜]\n  [inst_2 : T1Space 𝕜] [inst_3 : Field 𝕜] [inst_4 : HasContinuousInv₀ 𝕜] [inst_5 : ContinuousMul 𝕜],\n  IsPreconnected S →\n    ContinuousOn f S →\n      ContinuousOn g S →\n        Set.EqOn (f ^ 2) (g ^ 2) S → (∀ {x : α}, x ∈ S → g x ≠ 0) → ∀ {y : α}, y ∈ S → f y = g y → Set.EqOn f g S :=\n\n/-- Given a set `s` which is a convex neighbourhood of `0` and a point `x₀` outside of it, there is\na continuous linear functional `f` separating `x₀` and `s`, in the sense that it sends `x₀` to 1 and\nall of `s` to values strictly below `1`. -/\ntheorem ∀ {E : Type u_1} [inst : TopologicalSpace E] [inst_1 : AddCommGroup E] [inst_2 : TopologicalAddGroup E]\n  [inst_3 : Module ℝ E] [inst_4 : ContinuousSMul ℝ E] {s : Set E},\n  0 ∈ s → Convex ℝ s → IsOpen s → ∀ {x₀ : E}, ¬x₀ ∈ s → ∃ f, ↑f x₀ = 1 ∧ ∀ (x : E), x ∈ s → ↑f x < 1 :=\n\n/-- Continuity of `(x, y) ↦ x ^ y` as a function on `ℝ × ℂ`. -/\ntheorem ∀ (x : ℝ) (y : ℂ), 0 < y.re ∨ x ≠ 0 → ContinuousAt (fun p => ↑p.fst ^ p.snd) (x, y) :=\n\n/-- If `f : ℂ → E` is complex differentiable on some open set `s`, then it is continuously\ndifferentiable on `s`. -/\ntheorem ∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {n : ℕ∞} {s : Set ℂ}\n  {f : ℂ → E}, DifferentiableOn ℂ f s → IsOpen s → ContDiffOn ℂ n f s :=\n\n/-- If `f` is `C^1` at `x`, then `f` is Lipschitz in a neighborhood of `x`. -/\ntheorem ∀ {𝕂 : Type u_1} [inst : IsROrC 𝕂] {E' : Type u_2} [inst_1 : NormedAddCommGroup E'] [inst_2 : NormedSpace 𝕂 E']\n  {F' : Type u_3} [inst_3 : NormedAddCommGroup F'] [inst_4 : NormedSpace 𝕂 F'] {f : E' → F'} {x : E'},\n  ContDiffAt 𝕂 1 f x → ∃ K t, t ∈ nhds x ∧ LipschitzOnWith K f t :=\n\n/-- Fundamental theorem of calculus: if `f : ℝ → E` is integrable on `a..b` and `f x` is continuous\non the right or on the left at `a`, then the right (resp., left) derivative of\n`u ↦ ∫ x in u..b, f x` at `a` equals `-f a`. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : CompleteSpace E] [inst_2 : NormedSpace ℝ E] {f : ℝ → E}\n  {a b : ℝ},\n  IntervalIntegrable f MeasureTheory.volume a b →\n    ∀ {s t : Set ℝ} [inst_3 : intervalIntegral.FTCFilter a (nhdsWithin a s) (nhdsWithin a t)],\n      StronglyMeasurableAtFilter f (nhdsWithin a t) →\n        ContinuousWithinAt f t a →\n          autoParam (UniqueDiffWithinAt ℝ s a) _auto✝ → derivWithin (fun u => ∫ (x : ℝ) in u..b, f x) s a = -f a :=\n\n/-- Given a localization map `f : M →+ N` for a Submonoid `S ⊆ M`, for all `z : N`\nwe have that if `x : M, y ∈ S` are such that `z + f y = f x`, then `f x - f y = z`. -/\ntheorem ∀ {M : Type u_2} [inst : AddCommMonoid M] {S : AddSubmonoid M} {N : Type u_1} [inst_1 : AddCommMonoid N]\n  (f : AddSubmonoid.LocalizationMap S N) (z : N),\n  AddSubmonoid.LocalizationMap.mk' f (AddSubmonoid.LocalizationMap.sec f z).fst\n      (AddSubmonoid.LocalizationMap.sec f z).snd =\n    z :=\n\n/-- Let `f : ℝ → ℝ` be a differentiable function. If `f'` is nonnegative, then\n`f` is a monotone function. -/\ntheorem ∀ {f : ℝ → ℝ}, Differentiable ℝ f → (∀ (x : ℝ), 0 ≤ deriv f x) → Monotone f :=\n\n/-- A real differentiable map `f` is conformal at point `x` if and only if its\ndifferential `fderiv ℝ f x` at that point scales every inner product by a positive scalar. -/\ntheorem ∀ {E : Type u_1} {F : Type u_2} [inst : NormedAddCommGroup E] [inst_1 : NormedAddCommGroup F]\n  [inst_2 : InnerProductSpace ℝ E] [inst_3 : InnerProductSpace ℝ F] {f : E → F} {x : E},\n  ConformalAt f x ↔ ∃ c, 0 < c ∧ ∀ (u v : E), inner (↑(fderiv ℝ f x) u) (↑(fderiv ℝ f x) v) = c * inner u v :=\n\n/-- If `f` is a strictly monotone function on a left neighborhood of `a` and the image of this\nneighborhood under `f` meets every interval `[b, f a)`, `b < f a`, then `f` is continuous at `a`\nfrom the left.\n\nThe assumption `hfs : ∀ b < f a, ∃ c ∈ s, f c ∈ Ico b (f a)` is required because otherwise the\nfunction `f : ℝ → ℝ` given by `f x = if x < 0 then x else x + 1` would be a counter-example at\n`a = 0`. -/\ntheorem ∀ {α : Type u_1} {β : Type u_2} [inst : LinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderTopology α]\n  [inst_3 : LinearOrder β] [inst_4 : TopologicalSpace β] [inst_5 : OrderTopology β] {f : α → β} {s : Set α} {a : α},\n  StrictMonoOn f s →\n    s ∈ nhdsWithin a (Set.Iic a) →\n      (∀ (b : β), b < f a → ∃ c, c ∈ s ∧ f c ∈ Set.Ico b (f a)) → ContinuousWithinAt f (Set.Iic a) a :=\n\n/-- If `f x - x` is an integer number `m` for some point `x`, then `τ f = m`.\nOn the circle this means that a map with a fixed point has rotation number zero. -/\ntheorem ∀ (f : CircleDeg1Lift) {x : ℝ} {m : ℤ}, ↑f x = x + ↑m → CircleDeg1Lift.translationNumber f = ↑m :=\n\n/-- Fundamental theorem of calculus: if `f : ℝ → E` is integrable on `a..b` and `f` is continuous\nat `a`, then the derivative of `u ↦ ∫ x in u..b, f x` at `a` equals `-f a`. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : CompleteSpace E] [inst_2 : NormedSpace ℝ E] {f : ℝ → E}\n  {a b : ℝ},\n  IntervalIntegrable f MeasureTheory.volume a b →\n    StronglyMeasurableAtFilter f (nhds a) → ContinuousAt f a → deriv (fun u => ∫ (x : ℝ) in u..b, f x) a = -f a :=\n\n/-- If a function `f` is continuous and `f'` is strictly antitone on `ℝ` then `f` is strictly\nconcave. Note that we don't require differentiability, since it is guaranteed at all but at most\none point by the strict antitonicity of `f'`. -/\ntheorem ∀ {f : ℝ → ℝ}, Continuous f → StrictAnti (deriv f) → StrictConcaveOn ℝ Set.univ f :=\n\n/-- If `‖x‖ = 0` and `f` is continuous then `‖f x‖ = 0`. -/\ntheorem ∀ {𝕜 : Type u_2} {𝕜₂ : Type u_3} {E : Type u_4} {F : Type u_5} {𝓕 : Type u_1} [inst : SeminormedAddCommGroup E]\n  [inst_1 : SeminormedAddCommGroup F] [inst_2 : NontriviallyNormedField 𝕜] [inst_3 : NontriviallyNormedField 𝕜₂]\n  [inst_4 : NormedSpace 𝕜 E] [inst_5 : NormedSpace 𝕜₂ F] {σ₁₂ : 𝕜 →+* 𝕜₂} [inst_6 : SemilinearMapClass 𝓕 σ₁₂ E F]\n  (f : 𝓕), Continuous ↑f → ∀ {x : E}, ‖x‖ = 0 → ‖↑f x‖ = 0 :=\n\n/-- When `x` is fixed, `(f : α →ᵇ β) ↦ f x` is continuous. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : PseudoMetricSpace β] {x : α}, Continuous fun f => ↑f x :=\n\n/-- Let `f: S^1 → ℝ` be a continuous map. Show there exists a point `x` of `S^1` such that `f(x) = f(-x)`. -/\ntheorem", "choices": ["∀ (f : CircleDeg1Lift), ∃ x : ℝ, ↑f x = ↑f (-x) ", "∀ (f : CircleDeg1Lift), Continuous ↑f → ∃ x, ↑f x = ↑f (-x) ", "∀ (f : ↥circle → ℝ) [inst : Continuous f], ∃ x, f x = f (-x) ", "∀ {f : CircleDeg1Lift}, Continuous ↑f → ∃ x, ↑f x = ↑f (-x) ", "∀ (f : CircleDeg1Lift), Continuous ↑f → ∃ x, ↑f (x + 0.5) = ↑f x ", "∀ (f : CircleDeg1Lift), Continuous ↑f → ∃ x, ↑f (x + 0.5) = ↑f x ", "∀ (f : Circle → ℝ) [inst : Continuous f], ∃ x : Circle, f x = f (-x) ", "∀ {f : CircleEquivReflexive ℝ}, Continuous ↑f → ∃ x, ↑f x = ↑f (-x) ", "∀ (f : CircleMap → ℝ), Continuous f → ∃ x, f x = f (-x) ", "∀ {f : Circle → ℝ}, Continuous f → ∃ x, f x = f (-x) "]}
{"docString": "Let `X` be locally path connected. Show that every connected open set in `X` is path connected.", "prompts": "[{\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X],\\n  (Pairwise fun x y => ∃ U, IsClopen U ∧ x ∈ U ∧ ¬y ∈ U) → IsTotallyDisconnected Set.univ\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `X` be a topological space, and suppose that for all distinct `x,y ∈ X`, there\\nis some clopen set `U` such that `x ∈ U` and `y ∉ U`. Then `X` is totally disconnected. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : AddCommGroup E] [inst_1 : Module ℝ E] [inst_2 : TopologicalSpace E]\\n  [inst_3 : TopologicalAddGroup E] [inst_4 : ContinuousSMul ℝ E] {s : Set E},\\n  Convex ℝ s → Set.Nonempty s → IsPathConnected s\",\n  \"isProp\": true,\n  \"docString\": \"A nonempty convex set is path connected. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] {U W : Set X},\\n  IsPathConnected W → W ⊆ U → IsPathConnected (Subtype.val ⁻¹' W)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a set `W` is path-connected, then it is also path-connected when seen as a set in a smaller\\nambient type `U` (when `U` contains `W`). \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : PreconnectedSpace X] [inst_2 : NoncompactSpace X],\\n  ConnectedSpace (OnePoint X)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `X` is not a compact space, then `OnePoint X` is a connected space. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] [self : PathConnectedSpace X] (x y : X), Joined x y\",\n  \"isProp\": true,\n  \"docString\":\n  \"Any two points in a path-connected space must be joined by a continuous path. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {β : Type u_1} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] [i : LocallyConnectedSpace β],\\n  α ≃ₜ β → LocallyConnectedSpace α\",\n  \"isProp\": true,\n  \"docString\":\n  \"If the codomain of a homeomorphism is a locally connected space, then the domain is also\\na locally connected space. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] [self : PathConnectedSpace X], Nonempty X\",\n  \"isProp\": true,\n  \"docString\": \"A path-connected space must be nonempty. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {s : Set α}, IsConnected s → IsConnected (closure s)\",\n  \"isProp\": true,\n  \"docString\": \"The closure of a connected set is connected as well. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X], CompactSpace (OnePoint X)\",\n  \"isProp\": true,\n  \"docString\":\n  \"For any topological space `X`, its one point compactification is a compact space. \"},\n {\"theorem\":\n  \"∀ {Y : Type u_1} [inst : TopologicalSpace Y],\\n  SimplyConnectedSpace Y ↔ PathConnectedSpace Y ∧ ∀ (x y : Y), Subsingleton (Path.Homotopic.Quotient x y)\",\n  \"isProp\": true,\n  \"docString\":\n  \"A space is simply connected iff it is path connected, and there is at most one path\\nup to homotopy between any two points. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] {x : α} (self : TopologicalSpace.OpenNhdsOf x), x ∈ self.carrier\",\n  \"isProp\": true,\n  \"docString\":\n  \"The point `x` belongs to every `U : TopologicalSpace.OpenNhdsOf x`. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : SimplyConnectedSpace X] {x y : X} (p₁ p₂ : Path x y),\\n  Path.Homotopic p₁ p₂\",\n  \"isProp\": true,\n  \"docString\": \"In a simply connected space, any two paths are homotopic \"},\n {\"theorem\":\n  \"∀ (α : Type u_1) [inst : TopologicalSpace α] [inst_1 : DiscreteTopology α], LocallyConnectedSpace α\",\n  \"isProp\": true,\n  \"docString\": \"A space with discrete topology is a locally connected space. \"},\n {\"theorem\":\n  \"∀ (H : Type u) (M : Type u_1) [inst : TopologicalSpace H] [inst_1 : TopologicalSpace M] [inst_2 : ChartedSpace H M]\\n  [inst : LocallyConnectedSpace H], LocallyConnectedSpace M\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a topological space admits an atlas with locally connected charts, then the space itself is\\nlocally connected. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : AddCommGroup E] [inst_1 : Module ℝ E] [inst_2 : TopologicalSpace E]\\n  [inst_3 : TopologicalAddGroup E] [inst_4 : ContinuousSMul ℝ E] {s : Set E},\\n  Convex ℝ s → Set.Nonempty s → IsConnected s\",\n  \"isProp\": true,\n  \"docString\": \"A nonempty convex set is connected. \"},\n {\"theorem\":\n  \"∀ {V : Type} (G : SimpleGraph V) [inst : SimpleGraph.LocallyFinite G] [inst : Fact (SimpleGraph.Preconnected G)]\\n  [inst : Infinite V], Set.Nonempty (SimpleGraph.end G)\",\n  \"isProp\": true,\n  \"docString\":\n  \"A locally finite preconnected infinite graph has at least one end. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] [inst_2 : T2Space α] (x : α),\\n  ∃ U, IsOpen U ∧ x ∈ U ∧ IsCompact (closure U)\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a locally compact T₂ space, every point has an open neighborhood with compact closure \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] {x : α} {U : Set α},\\n  IsOpen U → x ∈ U → ∃ K, IsCompact K ∧ x ∈ interior K ∧ K ⊆ U\",\n  \"isProp\": true,\n  \"docString\":\n  \"A reformulation of the definition of locally compact space: In a locally compact space,\\nevery open set containing `x` has a compact subset containing `x` in its interior. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] [inst_2 : T2Space α] {K : Set α},\\n  IsCompact K → ∃ V, IsOpen V ∧ K ⊆ V ∧ IsCompact (closure V)\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a locally compact T₂ space, every compact set has an open neighborhood with compact closure.\\n\"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {Z : Set α}, IsClopen Z → ⋃ (x : α) (_ : x ∈ Z), connectedComponent x = Z\",\n  \"isProp\": true,\n  \"docString\": \"A clopen set is the union of its connected components. \"}]\n", "prompt_cons": "/-- Let `X` be a topological space, and suppose that for all distinct `x,y ∈ X`, there\nis some clopen set `U` such that `x ∈ U` and `y ∉ U`. Then `X` is totally disconnected. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X],\n  (Pairwise fun x y => ∃ U, IsClopen U ∧ x ∈ U ∧ ¬y ∈ U) → IsTotallyDisconnected Set.univ :=\n\n/-- A nonempty convex set is path connected. -/\ntheorem ∀ {E : Type u_1} [inst : AddCommGroup E] [inst_1 : Module ℝ E] [inst_2 : TopologicalSpace E]\n  [inst_3 : TopologicalAddGroup E] [inst_4 : ContinuousSMul ℝ E] {s : Set E},\n  Convex ℝ s → Set.Nonempty s → IsPathConnected s :=\n\n/-- If a set `W` is path-connected, then it is also path-connected when seen as a set in a smaller\nambient type `U` (when `U` contains `W`). -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X] {U W : Set X},\n  IsPathConnected W → W ⊆ U → IsPathConnected (Subtype.val ⁻¹' W) :=\n\n/-- If `X` is not a compact space, then `OnePoint X` is a connected space. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : PreconnectedSpace X] [inst_2 : NoncompactSpace X],\n  ConnectedSpace (OnePoint X) :=\n\n/-- Any two points in a path-connected space must be joined by a continuous path. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X] [self : PathConnectedSpace X] (x y : X), Joined x y :=\n\n/-- If the codomain of a homeomorphism is a locally connected space, then the domain is also\na locally connected space. -/\ntheorem ∀ {α : Type u_2} {β : Type u_1} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] [i : LocallyConnectedSpace β],\n  α ≃ₜ β → LocallyConnectedSpace α :=\n\n/-- A path-connected space must be nonempty. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X] [self : PathConnectedSpace X], Nonempty X :=\n\n/-- The closure of a connected set is connected as well. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] {s : Set α}, IsConnected s → IsConnected (closure s) :=\n\n/-- For any topological space `X`, its one point compactification is a compact space. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X], CompactSpace (OnePoint X) :=\n\n/-- A space is simply connected iff it is path connected, and there is at most one path\nup to homotopy between any two points. -/\ntheorem ∀ {Y : Type u_1} [inst : TopologicalSpace Y],\n  SimplyConnectedSpace Y ↔ PathConnectedSpace Y ∧ ∀ (x y : Y), Subsingleton (Path.Homotopic.Quotient x y) :=\n\n/-- The point `x` belongs to every `U : TopologicalSpace.OpenNhdsOf x`. -/\ntheorem ∀ {α : Type u_1} [inst : TopologicalSpace α] {x : α} (self : TopologicalSpace.OpenNhdsOf x), x ∈ self.carrier :=\n\n/-- In a simply connected space, any two paths are homotopic -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : SimplyConnectedSpace X] {x y : X} (p₁ p₂ : Path x y),\n  Path.Homotopic p₁ p₂ :=\n\n/-- A space with discrete topology is a locally connected space. -/\ntheorem ∀ (α : Type u_1) [inst : TopologicalSpace α] [inst_1 : DiscreteTopology α], LocallyConnectedSpace α :=\n\n/-- If a topological space admits an atlas with locally connected charts, then the space itself is\nlocally connected. -/\ntheorem ∀ (H : Type u) (M : Type u_1) [inst : TopologicalSpace H] [inst_1 : TopologicalSpace M] [inst_2 : ChartedSpace H M]\n  [inst : LocallyConnectedSpace H], LocallyConnectedSpace M :=\n\n/-- A nonempty convex set is connected. -/\ntheorem ∀ {E : Type u_1} [inst : AddCommGroup E] [inst_1 : Module ℝ E] [inst_2 : TopologicalSpace E]\n  [inst_3 : TopologicalAddGroup E] [inst_4 : ContinuousSMul ℝ E] {s : Set E},\n  Convex ℝ s → Set.Nonempty s → IsConnected s :=\n\n/-- A locally finite preconnected infinite graph has at least one end. -/\ntheorem ∀ {V : Type} (G : SimpleGraph V) [inst : SimpleGraph.LocallyFinite G] [inst : Fact (SimpleGraph.Preconnected G)]\n  [inst : Infinite V], Set.Nonempty (SimpleGraph.end G) :=\n\n/-- In a locally compact T₂ space, every point has an open neighborhood with compact closure -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] [inst_2 : T2Space α] (x : α),\n  ∃ U, IsOpen U ∧ x ∈ U ∧ IsCompact (closure U) :=\n\n/-- A reformulation of the definition of locally compact space: In a locally compact space,\nevery open set containing `x` has a compact subset containing `x` in its interior. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] {x : α} {U : Set α},\n  IsOpen U → x ∈ U → ∃ K, IsCompact K ∧ x ∈ interior K ∧ K ⊆ U :=\n\n/-- In a locally compact T₂ space, every compact set has an open neighborhood with compact closure. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] [inst_2 : T2Space α] {K : Set α},\n  IsCompact K → ∃ V, IsOpen V ∧ K ⊆ V ∧ IsCompact (closure V) :=\n\n/-- A clopen set is the union of its connected components. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] {Z : Set α}, IsClopen Z → ⋃ (x : α) (_ : x ∈ Z), connectedComponent x = Z :=\n\n/-- Let `X` be locally path connected. Show that every connected open set in `X` is path connected. -/\ntheorem", "choices": ["∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : LocallyPathConnectedSpace X] {U : Set X},\n  IsOpen U → IsConnected U → IsPathConnected U ", "∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : LocallyPathConnectedSpace X] {U : Set X},\n  IsConnected U → IsOpen U → IsPathConnected U ", "∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : LocallyPathConnectedSpace X] {U : Set X},\n  IsConnected U → IsOpen U → IsPathConnected U ", "∀ {X : Type u_1} [inst : TopologicalSpace X] [self : LocallyPathConnectedSpace X] {C : Set X},\n  IsConnected C → IsOpen C → IsPathConnected C ", "∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : LocallyPathConnectedSpace X] {U : Set X},\n  IsConnected U → IsOpen U → IsPathConnected U ", "∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : LocallyPathConnectedSpace X] {s : Set X},\n  IsConnected s → IsOpen s → IsPathConnected s ", "∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : LocallyPathConnectedSpace X] {U : Set X},\n  IsConnected U → IsOpen U → IsPathConnected U ", "∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : LocallyPathConnectedSpace X] {U : Set X},\n  IsConnected U → IsOpen U → IsPathConnected U ", "∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : LocallyPathConnectedSpace X] {U : Set X},\n  IsConnected U → IsOpen U → IsPathConnected U ", "∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : LocallyPathConnectedSpace X] {U : Set X},\n  IsConnected U → IsOpen U → IsPathConnected U "]}
{"docString": "Let `X` be a compact Hausdorff space. Let `A` be a collection of closed connected subsets of `X` that is simply ordered by proper inclusion. Then `Y = ⋂_{A ∈ A} A` is connected.", "prompts": "[{\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X],\\n  (Pairwise fun x y => ∃ U, IsClopen U ∧ x ∈ U ∧ ¬y ∈ U) → IsTotallyDisconnected Set.univ\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `X` be a topological space, and suppose that for all distinct `x,y ∈ X`, there\\nis some clopen set `U` such that `x ∈ U` and `y ∉ U`. Then `X` is totally disconnected. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : T2Space α] [inst_2 : CompactSpace α]\\n  [inst_3 : TotallyDisconnectedSpace α] {x : α} {U : Set α}, IsOpen U → x ∈ U → ∃ V, IsClopen V ∧ x ∈ V ∧ V ⊆ U\",\n  \"isProp\": true,\n  \"docString\":\n  \"Every member of an open set in a compact Hausdorff totally disconnected space\\nis contained in a clopen set contained in the open set.  \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] [inst_2 : CompactSpace α]\\n  [inst_3 : T2Space β] {f : α → β}, Continuous f → IsClosedMap f\",\n  \"isProp\": true,\n  \"docString\":\n  \"A continuous map from a compact space to a Hausdorff space is a closed map. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {s t : Set α}, IsCompact s → IsClosed t → t ⊆ s → IsCompact t\",\n  \"isProp\": true,\n  \"docString\": \"A closed subset of a compact set is a compact set. \"},\n {\"theorem\":\n  \"∀ {H : Type u_1} [inst : TopologicalSpace H] [inst_1 : LocallyCompactSpace H] [inst_2 : T2Space H]\\n  [inst_3 : TotallyDisconnectedSpace H], TopologicalSpace.IsTopologicalBasis {s | IsClopen s}\",\n  \"isProp\": true,\n  \"docString\":\n  \"A locally compact Hausdorff totally disconnected space has a basis with clopen elements. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X], CompactSpace (OnePoint X)\",\n  \"isProp\": true,\n  \"docString\":\n  \"For any topological space `X`, its one point compactification is a compact space. \"},\n {\"theorem\": \"∀ {X Y : CompHaus} (f : X ⟶ Y), IsClosedMap ↑f\",\n  \"isProp\": true,\n  \"docString\":\n  \"Any continuous function on compact Hausdorff spaces is a closed map. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : EMetricSpace α] [inst_1 : CompactSpace α], CompactSpace (TopologicalSpace.Closeds α)\",\n  \"isProp\": true,\n  \"docString\": \"In a compact space, the type of closed subsets is compact. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : PseudoMetricSpace α] {s : Set α} [inst_1 : T2Space α] [inst_2 : ProperSpace α],\\n  IsCompact s ↔ IsClosed s ∧ Metric.Bounded s\",\n  \"isProp\": true,\n  \"docString\":\n  \"The **Heine–Borel theorem**:\\nIn a proper Hausdorff space, a set is compact if and only if it is closed and bounded. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] [inst_2 : CompactSpace α]\\n  [inst_3 : CompactSpace β], CompactSpace (α ⊕ β)\",\n  \"isProp\": true,\n  \"docString\": \"The disjoint union of two compact spaces is compact. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {s t : Set α}, IsCompact s → IsClosed t → IsCompact (s ∩ t)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The intersection of a compact set and a closed set is a compact set. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {s t : Set α}, IsCompact t → IsClosed s → IsCompact (s ∩ t)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The intersection of a closed set and a compact set is a compact set. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] (S : DiscreteQuotient X) [inst_1 : CompactSpace X],\\n  Finite (Quotient S.toSetoid)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `X` is a compact space, then any discrete quotient of `X` is finite. \"},\n {\"theorem\":\n  \"∀ {γ : Type w} [inst : EMetricSpace γ] {s : Set γ}, IsCompact s → ∃ t, t ⊆ s ∧ Set.Countable t ∧ s = closure t\",\n  \"isProp\": true,\n  \"docString\":\n  \"A compact set in an emetric space is separable, i.e., it is the closure of a countable set. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] [self : QuasiSeparatedSpace α] (U V : Set α),\\n  IsOpen U → IsCompact U → IsOpen V → IsCompact V → IsCompact (U ∩ V)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The intersection of two open compact subsets of a quasi-separated space is compact.\"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] [inst_2 : CompactSpace α]\\n  [inst_3 : T2Space β] {f : α → β}, Function.Surjective f → Continuous f → QuotientMap f\",\n  \"isProp\": true,\n  \"docString\":\n  \"A continuous surjective map from a compact space to a Hausdorff space is a quotient map. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : SigmaCompactSpace X] [inst_2 : MeasurableSpace X]\\n  (μ : MeasureTheory.Measure X), MeasureTheory.Measure.InnerRegular μ IsCompact IsClosed\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a `σ`-compact space, any closed set can be approximated by a compact subset. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : LocallyCompactSpace X] [inst_2 : T2Space X],\\n  NormalSpace (OnePoint X)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The one point compactification of a locally compact Hausdorff space is a normal (hence,\\nHausdorff and regular) topological space. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : PseudoEMetricSpace α] {s : Set α}, IsCompact s → ∃ t, t ⊆ s ∧ Set.Countable t ∧ s ⊆ closure t\",\n  \"isProp\": true,\n  \"docString\":\n  \"A compact set in a pseudo emetric space is separable, i.e., it is a subset of the closure of a\\ncountable set.  \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : PreconnectedSpace X] [inst_2 : NoncompactSpace X],\\n  ConnectedSpace (OnePoint X)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `X` is not a compact space, then `OnePoint X` is a connected space. \"}]\n", "prompt_cons": "/-- Let `X` be a topological space, and suppose that for all distinct `x,y ∈ X`, there\nis some clopen set `U` such that `x ∈ U` and `y ∉ U`. Then `X` is totally disconnected. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X],\n  (Pairwise fun x y => ∃ U, IsClopen U ∧ x ∈ U ∧ ¬y ∈ U) → IsTotallyDisconnected Set.univ :=\n\n/-- Every member of an open set in a compact Hausdorff totally disconnected space\nis contained in a clopen set contained in the open set. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : T2Space α] [inst_2 : CompactSpace α]\n  [inst_3 : TotallyDisconnectedSpace α] {x : α} {U : Set α}, IsOpen U → x ∈ U → ∃ V, IsClopen V ∧ x ∈ V ∧ V ⊆ U :=\n\n/-- A continuous map from a compact space to a Hausdorff space is a closed map. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] [inst_2 : CompactSpace α]\n  [inst_3 : T2Space β] {f : α → β}, Continuous f → IsClosedMap f :=\n\n/-- A closed subset of a compact set is a compact set. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] {s t : Set α}, IsCompact s → IsClosed t → t ⊆ s → IsCompact t :=\n\n/-- A locally compact Hausdorff totally disconnected space has a basis with clopen elements. -/\ntheorem ∀ {H : Type u_1} [inst : TopologicalSpace H] [inst_1 : LocallyCompactSpace H] [inst_2 : T2Space H]\n  [inst_3 : TotallyDisconnectedSpace H], TopologicalSpace.IsTopologicalBasis {s | IsClopen s} :=\n\n/-- For any topological space `X`, its one point compactification is a compact space. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X], CompactSpace (OnePoint X) :=\n\n/-- Any continuous function on compact Hausdorff spaces is a closed map. -/\ntheorem ∀ {X Y : CompHaus} (f : X ⟶ Y), IsClosedMap ↑f :=\n\n/-- In a compact space, the type of closed subsets is compact. -/\ntheorem ∀ {α : Type u} [inst : EMetricSpace α] [inst_1 : CompactSpace α], CompactSpace (TopologicalSpace.Closeds α) :=\n\n/-- The **Heine–Borel theorem**:\nIn a proper Hausdorff space, a set is compact if and only if it is closed and bounded. -/\ntheorem ∀ {α : Type u} [inst : PseudoMetricSpace α] {s : Set α} [inst_1 : T2Space α] [inst_2 : ProperSpace α],\n  IsCompact s ↔ IsClosed s ∧ Metric.Bounded s :=\n\n/-- The disjoint union of two compact spaces is compact. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] [inst_2 : CompactSpace α]\n  [inst_3 : CompactSpace β], CompactSpace (α ⊕ β) :=\n\n/-- The intersection of a compact set and a closed set is a compact set. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] {s t : Set α}, IsCompact s → IsClosed t → IsCompact (s ∩ t) :=\n\n/-- The intersection of a closed set and a compact set is a compact set. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] {s t : Set α}, IsCompact t → IsClosed s → IsCompact (s ∩ t) :=\n\n/-- If `X` is a compact space, then any discrete quotient of `X` is finite. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X] (S : DiscreteQuotient X) [inst_1 : CompactSpace X],\n  Finite (Quotient S.toSetoid) :=\n\n/-- A compact set in an emetric space is separable, i.e., it is the closure of a countable set. -/\ntheorem ∀ {γ : Type w} [inst : EMetricSpace γ] {s : Set γ}, IsCompact s → ∃ t, t ⊆ s ∧ Set.Countable t ∧ s = closure t :=\n\n/-- The intersection of two open compact subsets of a quasi-separated space is compact. -/\ntheorem ∀ {α : Type u_1} [inst : TopologicalSpace α] [self : QuasiSeparatedSpace α] (U V : Set α),\n  IsOpen U → IsCompact U → IsOpen V → IsCompact V → IsCompact (U ∩ V) :=\n\n/-- A continuous surjective map from a compact space to a Hausdorff space is a quotient map. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] [inst_2 : CompactSpace α]\n  [inst_3 : T2Space β] {f : α → β}, Function.Surjective f → Continuous f → QuotientMap f :=\n\n/-- In a `σ`-compact space, any closed set can be approximated by a compact subset. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : SigmaCompactSpace X] [inst_2 : MeasurableSpace X]\n  (μ : MeasureTheory.Measure X), MeasureTheory.Measure.InnerRegular μ IsCompact IsClosed :=\n\n/-- The one point compactification of a locally compact Hausdorff space is a normal (hence,\nHausdorff and regular) topological space. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : LocallyCompactSpace X] [inst_2 : T2Space X],\n  NormalSpace (OnePoint X) :=\n\n/-- A compact set in a pseudo emetric space is separable, i.e., it is a subset of the closure of a\ncountable set. -/\ntheorem ∀ {α : Type u} [inst : PseudoEMetricSpace α] {s : Set α}, IsCompact s → ∃ t, t ⊆ s ∧ Set.Countable t ∧ s ⊆ closure t :=\n\n/-- If `X` is not a compact space, then `OnePoint X` is a connected space. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : PreconnectedSpace X] [inst_2 : NoncompactSpace X],\n  ConnectedSpace (OnePoint X) :=\n\n/-- Let `X` be a compact Hausdorff space. Let `A` be a collection of closed connected subsets of `X` that is simply ordered by proper inclusion. Then `Y = ⋂_{A ∈ A} A` is connected. -/\ntheorem", "choices": ["forall {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : T2Space X] [inst_2 : CompactSpace X] (A : Set (Set X)),\n  DirectedOn (fun a b => a ⊂ b) A →\n  (∀ (a : Set X), a ∈ A → IsClosed a ∧ IsConnected a) →\n  let Y ", "∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : T2Space X] [inst_2 : CompactSpace X],\n  ∀ (A : Set (Set X)), (∀ (s : Set X), s ∈ A → (IsClosed s ∧ IsConnected s)) →\n  (∀ (s t : Set X), s ∈ A → t ∈ A → s ⊆ t ∨ t ⊆ s) →\n  IsConnected (Set.Interₓ A) ", "∀ {X : Type u} [inst : TopologicalSpace X] [inst_1 : T2Space X] [inst_2 : CompactSpace X] (A : Set (Set X)),\n  (∀ (s : Set X), HasMem.Mem s A → IsClosed s ∧ IsPreconnected s) →\n  DirectedOn (fun s t => HasSubset.Subset s t ∨ HasSubset.Subset t s) A →\n  IsPreconnected (⋂₀ A) ", "∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : CompactSpace X] [inst_2 : T2Space X] {A : Set (Set X)},\n  (∀ (x : Set X), x ∈ A → IsClosed x ∧ IsPreconnected x) → DirectedOn (HasSubset.Subset.on A) A →\n  IsPreconnected (⋂₀ A) ", "∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : T2Space X] [inst_2 : CompactSpace X]\n  (A : Set (Set X)) (H : ∀ (a : Set X), a ∈ A → IsConnected a ∧ IsClosed a),\n  (∀ (a b : Set X), a ∈ A → b ∈ A → a = b ∨ a ⊂ b ∨ b ⊂ a) → ∃ Y, Y = ⋂₀ A ∧ IsConnected Y ", "forall {X : Type u} [inst : TopologicalSpace X] [inst_1 : T2Space X] [inst_2 : CompactSpace X]\n  {A : Set (Set X)}, (∀ (x : Set X), x ∈ A → ℝ (IsClosed x ∧ IsPreconnected x)) →\n  DirectedOn (fun x y => x ⊆ y) A → ∀ (Y : Set X), Y = Set.Interₓ A → IsPreconnected Y ", "∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : CompactSpace X] [inst_2 : T2Space X]\n  {A : Set (Set X)}, (∀ (a : Set X), a ∈ A → IsClosed a ∧ IsConnected a) →\n  DirectedOn HasSubset.Subset A → ∃ Y, Y = ⋂₀ A ∧ IsConnected Y ", "∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : T2Space X] [inst_2 : CompactSpace X] {A : Set (Set X)},\n  (∀ (s : Set X), s ∈ A → IsClosed s ∧ IsPreconnected s) → Zorn.Chain HasSubset.Subset A →\n  IsPreconnected (⋂₀ A) ", "∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : CompactSpace X] [inst_2 : T2Space X]\n  {A : Set (Set X)}, ∀ (hA : A ⊆ {s : Set X | IsConnected s ∧ IsClosed s})\n  (hs : DirectedOn (HasSubset.Subset π) A),\n  IsConnected (⋂₀ A) ", "∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : T2Space X] [inst_2 : CompactSpace X] {A : Set (Set X)},\n  (∀ (x : Set X), x ∈ A → IsClosed x ∧ IsPreconnected x) → (∀ (x : Set X), x ∈ A → ∀ (y : Set X), y ∈ A → x = y ∨ x ⊆ y) →\n  IsPreconnected (⋂₀ A) "]}
{"docString": "Show that a connected metric space having more than one point is uncountable.", "prompts": "[{\"theorem\":\n  \"∀ {α : Type u_2} {β : Type u_1} {f : α → β} {mα : MeasurableSpace α} [inst : MeasurableSpace β]\\n  [inst_1 : TopologicalSpace β] [inst_2 : TopologicalSpace.PseudoMetrizableSpace β]\\n  [inst_3 : TopologicalSpace.SecondCountableTopology β] [inst_4 : OpensMeasurableSpace β],\\n  Measurable f → MeasureTheory.StronglyMeasurable f\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a space with second countable topology, measurable implies strongly measurable. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] [h : TopologicalSpace.PseudoMetrizableSpace X],\\n  TopologicalSpace.FirstCountableTopology X\",\n  \"isProp\": true,\n  \"docString\": \"Every pseudo-metrizable space is first countable. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] {S : Setoid X} [inst_1 : TopologicalSpace.SecondCountableTopology X],\\n  IsOpenMap Quotient.mk' → TopologicalSpace.SecondCountableTopology (Quotient S)\",\n  \"isProp\": true,\n  \"docString\":\n  \"An open quotient of a second countable space is second countable. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [t : TopologicalSpace α] [inst : TopologicalSpace.SeparableSpace α] {ι : Type u_1} {s : ι → Set α}\\n  {a : Set ι},\\n  Set.PairwiseDisjoint a s →\\n    (∀ (i : ι), i ∈ a → IsOpen (s i)) → (∀ (i : ι), i ∈ a → Set.Nonempty (s i)) → Set.Countable a\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a separable space, a family of nonempty disjoint open sets is countable. \"},\n {\"theorem\":\n  \"∀ {ι : Type u_2} {E : ι → Type u_1} [inst : (i : ι) → MetricSpace (E i)] [inst_1 : ∀ (i : ι), CompleteSpace (E i)],\\n  CompleteSpace ((i : ι) × E i)\",\n  \"isProp\": true,\n  \"docString\": \"A disjoint union of complete metric spaces is complete. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [self : ConnectedSpace α], Nonempty α\",\n  \"isProp\": true,\n  \"docString\": \"A connected space is nonempty. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : MetricSpace α],\\n  (∀ (ε : ℝ), ε > 0 → ∃ β x F, ∀ (x y : α), F x = F y → dist x y ≤ ε) → TopologicalSpace.SecondCountableTopology α\",\n  \"isProp\": true,\n  \"docString\":\n  \"A metric space is second countable if one can reconstruct up to any `ε>0` any element of the\\nspace from countably many data. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {β : Type u_2} [inst : TopologicalSpace β] {f : α → β} {x : MeasurableSpace α}\\n  {μ : MeasureTheory.Measure α} [inst_1 : MeasurableSpace β] [inst_2 : TopologicalSpace.PseudoMetrizableSpace β]\\n  [inst_3 : TopologicalSpace.SecondCountableTopology β] [inst_4 : OpensMeasurableSpace β],\\n  Measurable f → MeasureTheory.AEStronglyMeasurable f μ\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a space with second countable topology, measurable implies ae strongly measurable. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : UniformSpace X] [inst_1 : Filter.IsCountablyGenerated (uniformity X)],\\n  TopologicalSpace.PseudoMetrizableSpace X\",\n  \"isProp\": true,\n  \"docString\":\n  \"A uniform space with countably generated `𝓤 X` is pseudo metrizable. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [t : TopologicalSpace α] [inst : TopologicalSpace.SecondCountableTopology α] {ι : Type u_1}\\n  (s : ι → Set α), (∀ (i : ι), IsOpen (s i)) → ∃ T, Set.Countable T ∧ ⋃ (i : ι) (_ : i ∈ T), s i = ⋃ (i : ι), s i\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a second-countable space, an open set, given as a union of open sets,\\nis equal to the union of countably many of those sets. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : PseudoMetricSpace α] [inst_1 : ProperSpace α], TopologicalSpace.SecondCountableTopology α\",\n  \"isProp\": true,\n  \"docString\":\n  \"A proper pseudo metric space is sigma compact, and therefore second countable. \"},\n {\"theorem\":\n  \"∀ {ι : Type u_1} {E : ι → Type u_2} [inst : (i : ι) → TopologicalSpace (E i)] [inst_1 : Countable ι]\\n  [inst_2 : ∀ (i : ι), TopologicalSpace.SecondCountableTopology (E i)],\\n  TopologicalSpace.SecondCountableTopology ((i : ι) × E i)\",\n  \"isProp\": true,\n  \"docString\":\n  \"A countable disjoint union of second countable spaces is second countable. \"},\n {\"theorem\":\n  \"∀ {ι : Type u_1} {X : ι → Type u_2} [inst : (i : ι) → TopologicalSpace (X i)]\\n  [inst_1 : ∀ (i : ι), TopologicalSpace.SeparableSpace (X i)] [inst_2 : Countable ι],\\n  TopologicalSpace.SeparableSpace ((i : ι) → X i)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The product of a countable family of separable spaces is a separable space. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] {C : Set α} [inst_1 : TopologicalSpace.SecondCountableTopology α],\\n  IsClosed C → ¬Set.Countable C → ∃ D, Perfect D ∧ Set.Nonempty D ∧ D ⊆ C\",\n  \"isProp\": true,\n  \"docString\":\n  \"Any uncountable closed set in a second countable space contains a nonempty perfect subset.\"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace.SecondCountableTopology α]\\n  (m : MeasureTheory.OuterMeasure α) (s : Set α), (∀ (x : α), x ∈ s → ∃ u, u ∈ nhdsWithin x s ∧ ↑m u = 0) → ↑m s = 0\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a set has zero measure in a neighborhood of each of its points, then it has zero measure\\nin a second-countable space. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {β : Type u_1} [inst : LinearOrder α] [inst_1 : ConditionallyCompleteLinearOrder β]\\n  [inst_2 : TopologicalSpace β] [inst_3 : OrderTopology β] {f : α → β},\\n  Monotone f →\\n    ∀ [inst_4 : TopologicalSpace α] [inst : OrderTopology α] [inst : TopologicalSpace.SecondCountableTopology β],\\n      Set.Countable {x | ¬ContinuousAt f x}\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a second countable space, the set of points where a monotone function is not continuous\\nis at most countable. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [t : TopologicalSpace α] [inst : TopologicalSpace.SeparableSpace α] {ι : Type u_1} {s : ι → Set α}\\n  {a : Set ι}, Set.PairwiseDisjoint a s → (∀ (i : ι), i ∈ a → Set.Nonempty (interior (s i))) → Set.Countable a\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a separable space, a family of disjoint sets with nonempty interiors is countable. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LinearOrder α] [inst_2 : OrderTopology α]\\n  [inst_3 : TopologicalSpace.SecondCountableTopology α], Set.Countable {x | nhdsWithin x (Set.Iio x) = ⊥}\",\n  \"isProp\": true,\n  \"docString\":\n  \"The set of points which are isolated on the left is countable when the space is\\nsecond-countable. \"},\n {\"theorem\":\n  \"∀ {γ : Type w} [inst : EMetricSpace γ] {s : Set γ}, IsCompact s → ∃ t, t ⊆ s ∧ Set.Countable t ∧ s = closure t\",\n  \"isProp\": true,\n  \"docString\":\n  \"A compact set in an emetric space is separable, i.e., it is the closure of a countable set. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : PseudoMetricSpace α] {s : Set α} {x : α}, Set.Nonempty s → EMetric.infEdist x s ≠ ⊤\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a metric space, the minimal edistance to a nonempty set is finite. \"}]\n", "prompt_cons": "/-- In a space with second countable topology, measurable implies strongly measurable. -/\ntheorem ∀ {α : Type u_2} {β : Type u_1} {f : α → β} {mα : MeasurableSpace α} [inst : MeasurableSpace β]\n  [inst_1 : TopologicalSpace β] [inst_2 : TopologicalSpace.PseudoMetrizableSpace β]\n  [inst_3 : TopologicalSpace.SecondCountableTopology β] [inst_4 : OpensMeasurableSpace β],\n  Measurable f → MeasureTheory.StronglyMeasurable f :=\n\n/-- Every pseudo-metrizable space is first countable. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X] [h : TopologicalSpace.PseudoMetrizableSpace X],\n  TopologicalSpace.FirstCountableTopology X :=\n\n/-- An open quotient of a second countable space is second countable. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X] {S : Setoid X} [inst_1 : TopologicalSpace.SecondCountableTopology X],\n  IsOpenMap Quotient.mk' → TopologicalSpace.SecondCountableTopology (Quotient S) :=\n\n/-- In a separable space, a family of nonempty disjoint open sets is countable. -/\ntheorem ∀ {α : Type u} [t : TopologicalSpace α] [inst : TopologicalSpace.SeparableSpace α] {ι : Type u_1} {s : ι → Set α}\n  {a : Set ι},\n  Set.PairwiseDisjoint a s →\n    (∀ (i : ι), i ∈ a → IsOpen (s i)) → (∀ (i : ι), i ∈ a → Set.Nonempty (s i)) → Set.Countable a :=\n\n/-- A disjoint union of complete metric spaces is complete. -/\ntheorem ∀ {ι : Type u_2} {E : ι → Type u_1} [inst : (i : ι) → MetricSpace (E i)] [inst_1 : ∀ (i : ι), CompleteSpace (E i)],\n  CompleteSpace ((i : ι) × E i) :=\n\n/-- A connected space is nonempty. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [self : ConnectedSpace α], Nonempty α :=\n\n/-- A metric space is second countable if one can reconstruct up to any `ε>0` any element of the\nspace from countably many data. -/\ntheorem ∀ {α : Type u} [inst : MetricSpace α],\n  (∀ (ε : ℝ), ε > 0 → ∃ β x F, ∀ (x y : α), F x = F y → dist x y ≤ ε) → TopologicalSpace.SecondCountableTopology α :=\n\n/-- In a space with second countable topology, measurable implies ae strongly measurable. -/\ntheorem ∀ {α : Type u_1} {β : Type u_2} [inst : TopologicalSpace β] {f : α → β} {x : MeasurableSpace α}\n  {μ : MeasureTheory.Measure α} [inst_1 : MeasurableSpace β] [inst_2 : TopologicalSpace.PseudoMetrizableSpace β]\n  [inst_3 : TopologicalSpace.SecondCountableTopology β] [inst_4 : OpensMeasurableSpace β],\n  Measurable f → MeasureTheory.AEStronglyMeasurable f μ :=\n\n/-- A uniform space with countably generated `𝓤 X` is pseudo metrizable. -/\ntheorem ∀ {X : Type u_1} [inst : UniformSpace X] [inst_1 : Filter.IsCountablyGenerated (uniformity X)],\n  TopologicalSpace.PseudoMetrizableSpace X :=\n\n/-- In a second-countable space, an open set, given as a union of open sets,\nis equal to the union of countably many of those sets. -/\ntheorem ∀ {α : Type u} [t : TopologicalSpace α] [inst : TopologicalSpace.SecondCountableTopology α] {ι : Type u_1}\n  (s : ι → Set α), (∀ (i : ι), IsOpen (s i)) → ∃ T, Set.Countable T ∧ ⋃ (i : ι) (_ : i ∈ T), s i = ⋃ (i : ι), s i :=\n\n/-- A proper pseudo metric space is sigma compact, and therefore second countable. -/\ntheorem ∀ {α : Type u} [inst : PseudoMetricSpace α] [inst_1 : ProperSpace α], TopologicalSpace.SecondCountableTopology α :=\n\n/-- A countable disjoint union of second countable spaces is second countable. -/\ntheorem ∀ {ι : Type u_1} {E : ι → Type u_2} [inst : (i : ι) → TopologicalSpace (E i)] [inst_1 : Countable ι]\n  [inst_2 : ∀ (i : ι), TopologicalSpace.SecondCountableTopology (E i)],\n  TopologicalSpace.SecondCountableTopology ((i : ι) × E i) :=\n\n/-- The product of a countable family of separable spaces is a separable space. -/\ntheorem ∀ {ι : Type u_1} {X : ι → Type u_2} [inst : (i : ι) → TopologicalSpace (X i)]\n  [inst_1 : ∀ (i : ι), TopologicalSpace.SeparableSpace (X i)] [inst_2 : Countable ι],\n  TopologicalSpace.SeparableSpace ((i : ι) → X i) :=\n\n/-- Any uncountable closed set in a second countable space contains a nonempty perfect subset. -/\ntheorem ∀ {α : Type u_1} [inst : TopologicalSpace α] {C : Set α} [inst_1 : TopologicalSpace.SecondCountableTopology α],\n  IsClosed C → ¬Set.Countable C → ∃ D, Perfect D ∧ Set.Nonempty D ∧ D ⊆ C :=\n\n/-- If a set has zero measure in a neighborhood of each of its points, then it has zero measure\nin a second-countable space. -/\ntheorem ∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace.SecondCountableTopology α]\n  (m : MeasureTheory.OuterMeasure α) (s : Set α), (∀ (x : α), x ∈ s → ∃ u, u ∈ nhdsWithin x s ∧ ↑m u = 0) → ↑m s = 0 :=\n\n/-- In a second countable space, the set of points where a monotone function is not continuous\nis at most countable. -/\ntheorem ∀ {α : Type u_2} {β : Type u_1} [inst : LinearOrder α] [inst_1 : ConditionallyCompleteLinearOrder β]\n  [inst_2 : TopologicalSpace β] [inst_3 : OrderTopology β] {f : α → β},\n  Monotone f →\n    ∀ [inst_4 : TopologicalSpace α] [inst : OrderTopology α] [inst : TopologicalSpace.SecondCountableTopology β],\n      Set.Countable {x | ¬ContinuousAt f x} :=\n\n/-- In a separable space, a family of disjoint sets with nonempty interiors is countable. -/\ntheorem ∀ {α : Type u} [t : TopologicalSpace α] [inst : TopologicalSpace.SeparableSpace α] {ι : Type u_1} {s : ι → Set α}\n  {a : Set ι}, Set.PairwiseDisjoint a s → (∀ (i : ι), i ∈ a → Set.Nonempty (interior (s i))) → Set.Countable a :=\n\n/-- The set of points which are isolated on the left is countable when the space is\nsecond-countable. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LinearOrder α] [inst_2 : OrderTopology α]\n  [inst_3 : TopologicalSpace.SecondCountableTopology α], Set.Countable {x | nhdsWithin x (Set.Iio x) = ⊥} :=\n\n/-- A compact set in an emetric space is separable, i.e., it is the closure of a countable set. -/\ntheorem ∀ {γ : Type w} [inst : EMetricSpace γ] {s : Set γ}, IsCompact s → ∃ t, t ⊆ s ∧ Set.Countable t ∧ s = closure t :=\n\n/-- In a metric space, the minimal edistance to a nonempty set is finite. -/\ntheorem ∀ {α : Type u} [inst : PseudoMetricSpace α] {s : Set α} {x : α}, Set.Nonempty s → EMetric.infEdist x s ≠ ⊤ :=\n\n/-- Show that a connected metric space having more than one point is uncountable. -/\ntheorem", "choices": ["∀ {α : Type u} [inst : MetricSpace α] [inst_1 : ConnectedSpace α], Nonempty α ∧ ∃ x y, x ≠ y → ¬Set.Countable α ", "∀ {α : Type u} [inst : MetricSpace α] [inst_1 : ConnectedSpace α], Nonempty α → ∃ x y, x ≠ y → ¬Set.Countable α ", "∀ {α : Type u} [inst : MetricSpace α] [inst_1 : ConnectedSpace α],\n  Set.Nonempty (SetOf fun x => Exists fun {y} => x ≠ y) → ¬Set.Countable (SetOf fun x => Exists fun {y} => x ≠ y) ", "∀ {α : Type u} [inst : MetricSpace α] [inst_1 : ConnectedSpace α], Set.Nonempty (α × α) → ¬Set.Countable α ", "∀ {α : Type u} [inst : MetricSpace α] [self : ConnectedSpace α], Set.Nonempty α → ¬Set.Countable α ", "∀ {α : Type u} [inst : MetricSpace α] [inst_1 : ConnectedSpace α], ¬(∃ x y, x ≠ y) → Set.Countable (Set.Univ : Set α) → False ", "∀ {α : Type u} [inst : MetricSpace α] [self : ConnectedSpace α], Set.Nonempty (α → False) → ¬Set.Countable α ", "∀ {α : Type u} [inst : MetricSpace α] [inst_1 : ConnectedSpace α] [inst_2 : Nontrivial α],\n  ¬Set.Countable (Set.Univ : Set α) ", "∀ {α : Type u} [inst : MetricSpace α] [ConnectedSpace α], ¬Set.Countable α → 2 ≤ cardinal.mk α ", "∀ {α : Type u} [inst : MetricSpace α] [inst_1 : TopologicalSpace.ConnectedSpace α],\n  2 ≤ cardinal.mk α → ¬Set.Countable α "]}
{"docString": "Show that `X` is countably compact if and only if every nested sequence `C_1 ⊇ C_2 ⊇ ⋯` of closed nonempty sets of `X` has a nonempty intersection.", "prompts": "[{\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {s : Set α} {ι : Type v},\\n  IsCompact s →\\n    ∀ (Z : ι → Set α),\\n      (∀ (i : ι), IsClosed (Z i)) →\\n        (∀ (t : Finset ι), Set.Nonempty (s ∩ ⋂ (i : ι) (_ : i ∈ t), Z i)) → Set.Nonempty (s ∩ ⋂ (i : ι), Z i)\",\n  \"isProp\": true,\n  \"docString\":\n  \"To show that a compact set intersects the intersection of a family of closed sets,\\nit is sufficient to show that it intersects every finite subfamily. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] (Z : ℕ → Set α),\\n  (∀ (i : ℕ), Z (i + 1) ⊆ Z i) →\\n    (∀ (i : ℕ), Set.Nonempty (Z i)) → IsCompact (Z 0) → (∀ (i : ℕ), IsClosed (Z i)) → Set.Nonempty (⋂ (i : ℕ), Z i)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Cantor's intersection theorem for sequences indexed by `ℕ`:\\nthe intersection of a decreasing sequence of nonempty compact closed sets is nonempty. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : UniformSpace X] {s : Set X} [inst_1 : Filter.IsCountablyGenerated (uniformity X)],\\n  IsSeqCompact s → IsCompact s\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `𝓤 β` is countably generated, then any sequentially compact set is compact. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {ι : Type v} [hι : Nonempty ι] (Z : ι → Set α),\\n  Directed (fun x x_1 => x ⊇ x_1) Z →\\n    (∀ (i : ι), Set.Nonempty (Z i)) →\\n      (∀ (i : ι), IsCompact (Z i)) → (∀ (i : ι), IsClosed (Z i)) → Set.Nonempty (⋂ (i : ι), Z i)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Cantor's intersection theorem:\\nthe intersection of a directed family of nonempty compact closed sets is nonempty. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] (S : DiscreteQuotient X) [inst_1 : CompactSpace X],\\n  Finite (Quotient S.toSetoid)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `X` is a compact space, then any discrete quotient of `X` is finite. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] [inst_2 : Nonempty α],\\n  Nonempty (TopologicalSpace.PositiveCompacts α)\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a nonempty locally compact space, there exists a compact set with nonempty interior. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {s t : Set α}, IsCompact t → IsClosed s → IsCompact (s ∩ t)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The intersection of a closed set and a compact set is a compact set. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : BaireSpace α] {S : Set (Set α)},\\n  (∀ (s : Set α), s ∈ S → IsOpen s) → Set.Countable S → (∀ (s : Set α), s ∈ S → Dense s) → Dense (⋂₀ S)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Baire theorem: a countable intersection of dense open sets is dense. Formulated here with ⋂₀. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {s t : Set α}, IsCompact s → IsClosed t → IsCompact (s ∩ t)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The intersection of a compact set and a closed set is a compact set. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] {C : Set α} [inst_1 : TopologicalSpace.SecondCountableTopology α],\\n  IsClosed C → ¬Set.Countable C → ∃ D, Perfect D ∧ Set.Nonempty D ∧ D ⊆ C\",\n  \"isProp\": true,\n  \"docString\":\n  \"Any uncountable closed set in a second countable space contains a nonempty perfect subset.\"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : EMetricSpace α] [inst_1 : CompactSpace α], CompactSpace (TopologicalSpace.NonemptyCompacts α)\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a compact space, the type of nonempty compact subsets is compact. This follows from\\nthe same statement for closed subsets \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] {K : Set α},\\n  IsCompact K → ∃ K', IsCompact K' ∧ K ⊆ interior K'\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a locally compact space, every compact set is contained in the interior of a compact set. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {s : Set α},\\n  Dense s ↔ ∀ (U : Set α), IsOpen U → Set.Nonempty U → Set.Nonempty (U ∩ s)\",\n  \"isProp\": true,\n  \"docString\":\n  \"A set is dense if and only if it has a nonempty intersection with each nonempty open set. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : BaireSpace α] {S : Set (Set α)},\\n  (∀ (s : Set α), s ∈ S → IsClosed s) →\\n    Set.Countable S → ⋃₀ S = Set.univ → Dense (⋃ (s : Set α) (_ : s ∈ S), interior s)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Baire theorem: if countably many closed sets cover the whole space, then their interiors\\nare dense. Formulated here with `⋃₀`. \"},\n {\"theorem\":\n  \"∀ {G : Type w} [inst : TopologicalSpace G] [inst_1 : AddGroup G] [inst_2 : TopologicalAddGroup G] [inst_3 : T2Space G],\\n  TopologicalSpace.PositiveCompacts G → LocallyCompactSpace G\",\n  \"isProp\": true,\n  \"docString\":\n  \"Every separated topological group in which there exists a compact set with nonempty\\ninterior is locally compact.\"},\n {\"theorem\":\n  \"∀ {G : Type w} [inst : TopologicalSpace G] [inst_1 : Group G] [inst_2 : TopologicalGroup G] [inst_3 : T2Space G],\\n  TopologicalSpace.PositiveCompacts G → LocallyCompactSpace G\",\n  \"isProp\": true,\n  \"docString\":\n  \"Every separated topological group in which there exists a compact set with nonempty interior\\nis locally compact. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {β : Type u_1} [inst : TopologicalSpace α] [inst_1 : BaireSpace α] {S : Set β} {f : β → Set α},\\n  (∀ (s : β), s ∈ S → IsClosed (f s)) →\\n    Set.Countable S → ⋃ (s : β) (_ : s ∈ S), f s = Set.univ → Dense (⋃ (s : β) (_ : s ∈ S), interior (f s))\",\n  \"isProp\": true,\n  \"docString\":\n  \"Baire theorem: if countably many closed sets cover the whole space, then their interiors\\nare dense. Formulated here with an index set which is a countable set in any type. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : EMetricSpace α] [inst_1 : TopologicalSpace.SecondCountableTopology α],\\n  TopologicalSpace.SecondCountableTopology (TopologicalSpace.NonemptyCompacts α)\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a second countable space, the type of nonempty compact subsets is second countable \"},\n {\"theorem\":\n  \"∀ (α : Type u_1) [inst : ConditionallyCompleteLinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderTopology α],\\n  CompactIccSpace α\",\n  \"isProp\": true,\n  \"docString\":\n  \"A closed interval in a conditionally complete linear order is compact. \"},\n {\"theorem\":\n  \"∀ {ι : Type u_2} {π : ι → Type u_1} [inst : (i : ι) → TopologicalSpace (π i)] {s : (i : ι) → Set (π i)},\\n  (∀ (i : ι), IsCompact (s i)) → IsCompact {x | ∀ (i : ι), x i ∈ s i}\",\n  \"isProp\": true,\n  \"docString\": \"**Tychonoff's theorem**: product of compact sets is compact. \"}]\n", "prompt_cons": "/-- To show that a compact set intersects the intersection of a family of closed sets,\nit is sufficient to show that it intersects every finite subfamily. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] {s : Set α} {ι : Type v},\n  IsCompact s →\n    ∀ (Z : ι → Set α),\n      (∀ (i : ι), IsClosed (Z i)) →\n        (∀ (t : Finset ι), Set.Nonempty (s ∩ ⋂ (i : ι) (_ : i ∈ t), Z i)) → Set.Nonempty (s ∩ ⋂ (i : ι), Z i) :=\n\n/-- Cantor's intersection theorem for sequences indexed by `ℕ`:\nthe intersection of a decreasing sequence of nonempty compact closed sets is nonempty. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] (Z : ℕ → Set α),\n  (∀ (i : ℕ), Z (i + 1) ⊆ Z i) →\n    (∀ (i : ℕ), Set.Nonempty (Z i)) → IsCompact (Z 0) → (∀ (i : ℕ), IsClosed (Z i)) → Set.Nonempty (⋂ (i : ℕ), Z i) :=\n\n/-- If `𝓤 β` is countably generated, then any sequentially compact set is compact. -/\ntheorem ∀ {X : Type u_1} [inst : UniformSpace X] {s : Set X} [inst_1 : Filter.IsCountablyGenerated (uniformity X)],\n  IsSeqCompact s → IsCompact s :=\n\n/-- Cantor's intersection theorem:\nthe intersection of a directed family of nonempty compact closed sets is nonempty. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] {ι : Type v} [hι : Nonempty ι] (Z : ι → Set α),\n  Directed (fun x x_1 => x ⊇ x_1) Z →\n    (∀ (i : ι), Set.Nonempty (Z i)) →\n      (∀ (i : ι), IsCompact (Z i)) → (∀ (i : ι), IsClosed (Z i)) → Set.Nonempty (⋂ (i : ι), Z i) :=\n\n/-- If `X` is a compact space, then any discrete quotient of `X` is finite. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X] (S : DiscreteQuotient X) [inst_1 : CompactSpace X],\n  Finite (Quotient S.toSetoid) :=\n\n/-- In a nonempty locally compact space, there exists a compact set with nonempty interior. -/\ntheorem ∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] [inst_2 : Nonempty α],\n  Nonempty (TopologicalSpace.PositiveCompacts α) :=\n\n/-- The intersection of a closed set and a compact set is a compact set. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] {s t : Set α}, IsCompact t → IsClosed s → IsCompact (s ∩ t) :=\n\n/-- Baire theorem: a countable intersection of dense open sets is dense. Formulated here with ⋂₀. -/\ntheorem ∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : BaireSpace α] {S : Set (Set α)},\n  (∀ (s : Set α), s ∈ S → IsOpen s) → Set.Countable S → (∀ (s : Set α), s ∈ S → Dense s) → Dense (⋂₀ S) :=\n\n/-- The intersection of a compact set and a closed set is a compact set. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] {s t : Set α}, IsCompact s → IsClosed t → IsCompact (s ∩ t) :=\n\n/-- Any uncountable closed set in a second countable space contains a nonempty perfect subset. -/\ntheorem ∀ {α : Type u_1} [inst : TopologicalSpace α] {C : Set α} [inst_1 : TopologicalSpace.SecondCountableTopology α],\n  IsClosed C → ¬Set.Countable C → ∃ D, Perfect D ∧ Set.Nonempty D ∧ D ⊆ C :=\n\n/-- In a compact space, the type of nonempty compact subsets is compact. This follows from\nthe same statement for closed subsets -/\ntheorem ∀ {α : Type u} [inst : EMetricSpace α] [inst_1 : CompactSpace α], CompactSpace (TopologicalSpace.NonemptyCompacts α) :=\n\n/-- In a locally compact space, every compact set is contained in the interior of a compact set. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] {K : Set α},\n  IsCompact K → ∃ K', IsCompact K' ∧ K ⊆ interior K' :=\n\n/-- A set is dense if and only if it has a nonempty intersection with each nonempty open set. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] {s : Set α},\n  Dense s ↔ ∀ (U : Set α), IsOpen U → Set.Nonempty U → Set.Nonempty (U ∩ s) :=\n\n/-- Baire theorem: if countably many closed sets cover the whole space, then their interiors\nare dense. Formulated here with `⋃₀`. -/\ntheorem ∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : BaireSpace α] {S : Set (Set α)},\n  (∀ (s : Set α), s ∈ S → IsClosed s) →\n    Set.Countable S → ⋃₀ S = Set.univ → Dense (⋃ (s : Set α) (_ : s ∈ S), interior s) :=\n\n/-- Every separated topological group in which there exists a compact set with nonempty\ninterior is locally compact. -/\ntheorem ∀ {G : Type w} [inst : TopologicalSpace G] [inst_1 : AddGroup G] [inst_2 : TopologicalAddGroup G] [inst_3 : T2Space G],\n  TopologicalSpace.PositiveCompacts G → LocallyCompactSpace G :=\n\n/-- Every separated topological group in which there exists a compact set with nonempty interior\nis locally compact. -/\ntheorem ∀ {G : Type w} [inst : TopologicalSpace G] [inst_1 : Group G] [inst_2 : TopologicalGroup G] [inst_3 : T2Space G],\n  TopologicalSpace.PositiveCompacts G → LocallyCompactSpace G :=\n\n/-- Baire theorem: if countably many closed sets cover the whole space, then their interiors\nare dense. Formulated here with an index set which is a countable set in any type. -/\ntheorem ∀ {α : Type u_2} {β : Type u_1} [inst : TopologicalSpace α] [inst_1 : BaireSpace α] {S : Set β} {f : β → Set α},\n  (∀ (s : β), s ∈ S → IsClosed (f s)) →\n    Set.Countable S → ⋃ (s : β) (_ : s ∈ S), f s = Set.univ → Dense (⋃ (s : β) (_ : s ∈ S), interior (f s)) :=\n\n/-- In a second countable space, the type of nonempty compact subsets is second countable -/\ntheorem ∀ {α : Type u} [inst : EMetricSpace α] [inst_1 : TopologicalSpace.SecondCountableTopology α],\n  TopologicalSpace.SecondCountableTopology (TopologicalSpace.NonemptyCompacts α) :=\n\n/-- A closed interval in a conditionally complete linear order is compact. -/\ntheorem ∀ (α : Type u_1) [inst : ConditionallyCompleteLinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderTopology α],\n  CompactIccSpace α :=\n\n/-- **Tychonoff's theorem**: product of compact sets is compact. -/\ntheorem ∀ {ι : Type u_2} {π : ι → Type u_1} [inst : (i : ι) → TopologicalSpace (π i)] {s : (i : ι) → Set (π i)},\n  (∀ (i : ι), IsCompact (s i)) → IsCompact {x | ∀ (i : ι), x i ∈ s i} :=\n\n/-- Show that `X` is countably compact if and only if every nested sequence `C_1 ⊇ C_2 ⊇ ⋯` of closed nonempty sets of `X` has a nonempty intersection. -/\ntheorem", "choices": ["∀ {α : Type u} [inst : TopologicalSpace α],\n  IsCountablyCompact α ↔\n    ∀ (C : ℕ → Set α),\n      (∀ (i : ℕ), IsClosed (C i)) →\n        (∀ (i : ℕ), Set.Nonempty (C i)) →\n          (∀ (i : ℕ), C (i + 1) ⊆ C i) → Set.Nonempty (⋂ (i : ℕ), C i) ", "forall {α : Type u} [inst : TopologicalSpace α],\n  IsCountablyCompact α ↔\n    ∀ (C : ℕ → Set α), (∀ (i : ℕ), IsClosed (C i)) →\n      (∀ (i : ℕ), Set.Nonempty (C i)) → ∀ (i : ℕ), C (i + 1) ⊆ C i → Set.Nonempty (⋂ (i : ℕ), C i) ", "forall {α : Type u} [inst : TopologicalSpace α],\n  IsCountablyCompact (Set.univ : Set α) ↔\n    ∀ (C : ℕ → Set α), (∀ (i : ℕ), IsClosed (C i)) →\n      (∀ (i : ℕ), Set.Nonempty (C i)) → (∀ (i : ℕ), C (i + 1) ⊆ C i) → Set.Nonempty (⋂ (i : ℕ), C i) ", "∀ {α : Type u} [inst : TopologicalSpace α],\n  IsCountablyCompact α ↔\n    ∀ (Z : ℕ → Set α),\n      (∀ (i : ℕ), IsClosed (Z i)) →\n        (∀ (i : ℕ), Set.Nonempty (Z i)) →\n          (∀ (i : ℕ), Z (i + 1) ⊆ Z i) → Set.Nonempty (⋂ (i : ℕ), Z i) ", "∀ {α : Type u} [inst : TopologicalSpace α],\n  IsCountablyCompact α ↔\n    ∀ (C : ℕ → Set α),\n      (∀ (i : ℕ), IsClosed (C i)) →\n        (∀ (i : ℕ), Set.Nonempty (C i)) → (∀ (i : ℕ), C (i + 1) ⊆ C i) → Set.Nonempty (⋂ (i : ℕ), C i) ", "forall {α : Type u} [inst : TopologicalSpace α],\n  IsCountablyCompact α ↔\n    ∀ (C : ℕ → Set α), (∀ (i : ℕ), IsClosed (C i)) →\n      (∀ (i : ℕ), Set.Nonempty (C i)) → ∀ (i : ℕ), C (i + 1) ⊆ C i → Set.Nonempty (⋂ (i : ℕ), C i) ", "∀ {α : Type u} [inst : TopologicalSpace α],\n  IsCountablyCompact α ↔ ∀ (C : ℕ → Set α), (∀ (i : ℕ), IsClosed (C i)) → (∀ (i : ℕ), Set.Nonempty (C i)) → (∀ (i : ℕ), C (i + 1) ⊆ C i) → Set.Nonempty (⋂ (i : ℕ), C i) ", "∀ {α : Type u} [inst : TopologicalSpace α],\n  IsCountablyCompact α ↔\n    ∀ (C : ℕ → Set α), (∀ (i : ℕ), IsClosed (C i)) →\n      (∀ (i : ℕ), Set.Nonempty (C i)) → (∀ (i : ℕ), C (i + 1) ⊆ C i) → Set.Nonempty (⋂ (i : ℕ), C i) ", "forall {α : Type u} [topological_space α], is_countably_compact α ↔\n  ∀ (C : ℕ → set α), (∀ (i : ℕ), is_closed (C i)) →\n    (∀ (i : ℕ), set.nonempty (C i)) → set.nonempty (⋂ (i : ℕ), C i) ", "forall {α : Type u} [topological_space α],\n  is_countably_compact α ↔\n    ∀ (C : ℕ → set α),\n      (∀ (i : ℕ), is_closed (C i)) →\n        (∀ (i : ℕ), set.nonempty (C i)) → (∀ (i : ℕ), C (i + 1) ⊆ C i) → set.nonempty (⋂ (i : ℕ), C i) "]}
{"docString": "Show that the rationals `ℚ` are not locally compact.", "prompts": "[{\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] (x : α),\\n  Disjoint (nhds x) (Filter.cocompact α)\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a locally compact space, the filters `𝓝 x` and `cocompact α` are disjoint for all `α`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] [self : NoncompactSpace α], ¬IsCompact Set.univ\",\n  \"isProp\": true,\n  \"docString\": \"In a noncompact space, `Set.univ` is not a compact set. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] [inst_2 : Nonempty α],\\n  Nonempty (TopologicalSpace.PositiveCompacts α)\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a nonempty locally compact space, there exists a compact set with nonempty interior. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : NoncompactSpace X],\\n  Filter.NeBot (nhdsWithin OnePoint.infty {OnePoint.infty}ᶜ)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `X` is a non-compact space, then `∞` is not an isolated point of `OnePoint X`. \"},\n {\"theorem\": \"Filter.Tendsto Int.cast Filter.cofinite (Filter.cocompact ℝ)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Under the coercion from `ℤ` to `ℝ`, inverse images of compact sets are finite. \"},\n {\"theorem\": \"¬IsField ℤ\",\n  \"isProp\": true,\n  \"docString\": \"`ℤ` with its usual ring structure is not a field. \"},\n {\"theorem\": \"∀ (p : ℝ) [inst : Fact (0 < p)], CompactSpace (AddCircle p)\",\n  \"isProp\": true,\n  \"docString\": \"The \\\"additive circle\\\" `ℝ ⧸ (ℤ ∙ p)` is compact. \"},\n {\"theorem\": \"¬Set.Countable Set.univ\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Non-Denumerability of the Continuum**: The reals are not countable. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] (f : ℝ → E),\\n  Filter.Tendsto (fun w => ∫ (v : ℝ), ↑(↑Real.fourierChar (↑Multiplicative.ofAdd (-(v * w)))) • f v)\\n    (Filter.cocompact ℝ) (nhds 0)\",\n  \"isProp\": true,\n  \"docString\": \"The Riemann-Lebesgue lemma for functions on `ℝ`. \"},\n {\"theorem\":\n  \"∀ {ι : Type u_1} {π : ι → Type u_2} [inst : (i : ι) → TopologicalSpace (π i)]\\n  [inst_1 : ∀ (i : ι), LocallyCompactSpace (π i)] [inst_2 : ∀ (i : ι), CompactSpace (π i)],\\n  LocallyCompactSpace ((i : ι) → π i)\",\n  \"isProp\": true,\n  \"docString\": \"For spaces that are not Hausdorff. \"},\n {\"theorem\": \"¬Set.Countable Set.univ\",\n  \"isProp\": true,\n  \"docString\": \"The complex numbers are not countable. \"},\n {\"theorem\":\n  \"∀ (p : ℝ), ProperlyDiscontinuousVAdd { x // x ∈ ↑AddSubgroup.opposite (AddSubgroup.zmultiples p) } ℝ\",\n  \"isProp\": true,\n  \"docString\":\n  \"The action on `ℝ` by right multiplication of its the subgroup `zmultiples p` (the multiples of\\n`p:ℝ`) is properly discontinuous. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : T2Space α] [inst_2 : LocallyCompactSpace α], BaireSpace α\",\n  \"isProp\": true,\n  \"docString\":\n  \"The second theorem states that locally compact spaces are Baire. \"},\n {\"theorem\":\n  \"∀ {G : Type u_1} [inst : Group G] [inst_1 : TopologicalSpace G] [inst_2 : T2Space G] [inst_3 : TopologicalGroup G]\\n  [inst_4 : MeasurableSpace G] [inst_5 : BorelSpace G] [inst_6 : TopologicalSpace.SecondCountableTopology G]\\n  {μ : MeasureTheory.Measure G} [inst_7 : MeasureTheory.SigmaFinite μ]\\n  [inst : MeasureTheory.Measure.IsMulLeftInvariant μ] {K : Set G},\\n  IsCompact K → Set.Nonempty (interior K) → ↑↑μ K ≠ ⊤ → MeasureTheory.Measure.Regular μ\",\n  \"isProp\": true,\n  \"docString\":\n  \"To show that an invariant σ-finite measure is regular it is sufficient to show that it is finite\\non some compact set with non-empty interior. \"},\n {\"theorem\": \"∀ {r : ℝ}, Transcendental ℚ r → Irrational r\",\n  \"isProp\": true,\n  \"docString\": \"A transcendental real number is irrational. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {ι : Type u_1} [inst_1 : CompactSpace α] {f : ι → Set α},\\n  LocallyFinite f → Set.Finite {i | Set.Nonempty (f i)}\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `α` is a compact space, then a locally finite family of sets of `α` can have only finitely\\nmany nonempty elements. \"},\n {\"theorem\":\n  \"∀ (R : Type u) [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : DiscreteValuationRing R], ¬IsField R\",\n  \"isProp\": true,\n  \"docString\": \"A discrete valuation ring `R` is not a field. \"},\n {\"theorem\":\n  \"∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : IsDedekindDomain R] {I : Ideal R},\\n  I ≠ 0 → Set.Finite {v | v.asIdeal ∣ I}\",\n  \"isProp\": true,\n  \"docString\":\n  \"Only finitely many maximal ideals of `R` divide a given nonzero ideal. \"},\n {\"theorem\": \"∀ (r : ℝ), r ≠ 0 → Real.sign r = -1 ∨ Real.sign r = 1\",\n  \"isProp\": true,\n  \"docString\": \"This lemma is useful for working with `ℝˣ` \"},\n {\"theorem\":\n  \"∀ {ι : Type u_1} {π : ι → Type u_2} [inst : (i : ι) → TopologicalSpace (π i)]\\n  [inst_1 : ∀ (i : ι), LocallyCompactSpace (π i)] [inst_2 : Finite ι], LocallyCompactSpace ((i : ι) → π i)\",\n  \"isProp\": true,\n  \"docString\":\n  \"In general it suffices that all but finitely many of the spaces are compact,\\nbut that's not straightforward to state and use. \"}]\n", "prompt_cons": "/-- In a locally compact space, the filters `𝓝 x` and `cocompact α` are disjoint for all `α`. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] (x : α),\n  Disjoint (nhds x) (Filter.cocompact α) :=\n\n/-- In a noncompact space, `Set.univ` is not a compact set. -/\ntheorem ∀ {α : Type u_1} [inst : TopologicalSpace α] [self : NoncompactSpace α], ¬IsCompact Set.univ :=\n\n/-- In a nonempty locally compact space, there exists a compact set with nonempty interior. -/\ntheorem ∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] [inst_2 : Nonempty α],\n  Nonempty (TopologicalSpace.PositiveCompacts α) :=\n\n/-- If `X` is a non-compact space, then `∞` is not an isolated point of `OnePoint X`. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : NoncompactSpace X],\n  Filter.NeBot (nhdsWithin OnePoint.infty {OnePoint.infty}ᶜ) :=\n\n/-- Under the coercion from `ℤ` to `ℝ`, inverse images of compact sets are finite. -/\ntheorem Filter.Tendsto Int.cast Filter.cofinite (Filter.cocompact ℝ) :=\n\n/-- `ℤ` with its usual ring structure is not a field. -/\ntheorem ¬IsField ℤ :=\n\n/-- The \"additive circle\" `ℝ ⧸ (ℤ ∙ p)` is compact. -/\ntheorem ∀ (p : ℝ) [inst : Fact (0 < p)], CompactSpace (AddCircle p) :=\n\n/-- **Non-Denumerability of the Continuum**: The reals are not countable. -/\ntheorem ¬Set.Countable Set.univ :=\n\n/-- The Riemann-Lebesgue lemma for functions on `ℝ`. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] (f : ℝ → E),\n  Filter.Tendsto (fun w => ∫ (v : ℝ), ↑(↑Real.fourierChar (↑Multiplicative.ofAdd (-(v * w)))) • f v)\n    (Filter.cocompact ℝ) (nhds 0) :=\n\n/-- For spaces that are not Hausdorff. -/\ntheorem ∀ {ι : Type u_1} {π : ι → Type u_2} [inst : (i : ι) → TopologicalSpace (π i)]\n  [inst_1 : ∀ (i : ι), LocallyCompactSpace (π i)] [inst_2 : ∀ (i : ι), CompactSpace (π i)],\n  LocallyCompactSpace ((i : ι) → π i) :=\n\n/-- The complex numbers are not countable. -/\ntheorem ¬Set.Countable Set.univ :=\n\n/-- The action on `ℝ` by right multiplication of its the subgroup `zmultiples p` (the multiples of\n`p:ℝ`) is properly discontinuous. -/\ntheorem ∀ (p : ℝ), ProperlyDiscontinuousVAdd { x // x ∈ ↑AddSubgroup.opposite (AddSubgroup.zmultiples p) } ℝ :=\n\n/-- The second theorem states that locally compact spaces are Baire. -/\ntheorem ∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : T2Space α] [inst_2 : LocallyCompactSpace α], BaireSpace α :=\n\n/-- To show that an invariant σ-finite measure is regular it is sufficient to show that it is finite\non some compact set with non-empty interior. -/\ntheorem ∀ {G : Type u_1} [inst : Group G] [inst_1 : TopologicalSpace G] [inst_2 : T2Space G] [inst_3 : TopologicalGroup G]\n  [inst_4 : MeasurableSpace G] [inst_5 : BorelSpace G] [inst_6 : TopologicalSpace.SecondCountableTopology G]\n  {μ : MeasureTheory.Measure G} [inst_7 : MeasureTheory.SigmaFinite μ]\n  [inst : MeasureTheory.Measure.IsMulLeftInvariant μ] {K : Set G},\n  IsCompact K → Set.Nonempty (interior K) → ↑↑μ K ≠ ⊤ → MeasureTheory.Measure.Regular μ :=\n\n/-- A transcendental real number is irrational. -/\ntheorem ∀ {r : ℝ}, Transcendental ℚ r → Irrational r :=\n\n/-- If `α` is a compact space, then a locally finite family of sets of `α` can have only finitely\nmany nonempty elements. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] {ι : Type u_1} [inst_1 : CompactSpace α] {f : ι → Set α},\n  LocallyFinite f → Set.Finite {i | Set.Nonempty (f i)} :=\n\n/-- A discrete valuation ring `R` is not a field. -/\ntheorem ∀ (R : Type u) [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : DiscreteValuationRing R], ¬IsField R :=\n\n/-- Only finitely many maximal ideals of `R` divide a given nonzero ideal. -/\ntheorem ∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : IsDedekindDomain R] {I : Ideal R},\n  I ≠ 0 → Set.Finite {v | v.asIdeal ∣ I} :=\n\n/-- This lemma is useful for working with `ℝˣ` -/\ntheorem ∀ (r : ℝ), r ≠ 0 → Real.sign r = -1 ∨ Real.sign r = 1 :=\n\n/-- In general it suffices that all but finitely many of the spaces are compact,\nbut that's not straightforward to state and use. -/\ntheorem ∀ {ι : Type u_1} {π : ι → Type u_2} [inst : (i : ι) → TopologicalSpace (π i)]\n  [inst_1 : ∀ (i : ι), LocallyCompactSpace (π i)] [inst_2 : Finite ι], LocallyCompactSpace ((i : ι) → π i) :=\n\n/-- Show that the rationals `ℚ` are not locally compact. -/\ntheorem", "choices": ["¬LocallyCompactSpace ℚ ", "¬LocallyCompactSpace ℚ ", "¬LocallyCompactSpace ℚ ", "¬LocallyCompactSpace ℚ ", "¬LocallyCompactSpace ℚ ", "¬LocallyCompactSpace ℚ ", "¬LocallyCompactSpace ℚ ", "¬LocallyCompactSpace ℚ ", "¬LocallyCompactSpace ℚ ", "¬LocallyCompactSpace ℚ "]}
{"docString": "Show that if `X` is a Hausdorff space that is locally compact at the point `x`, then for each neighborhood `U` of `x`, there is a neighborhood `V` of `x` such that `∪ V` is compact and `∪ V ⊆ U`.", "prompts": "[{\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : T2Space α],\\n  (∀ (x : α), ∃ s, s ∈ nhds x ∧ IsCompact s) → LocallyCompactSpace α\",\n  \"isProp\": true,\n  \"docString\":\n  \"If every points of a Hausdorff space admits a compact neighborhood, then this space is locally\\ncompact. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [hα : LocallyCompactSpace α] {K U : Set α},\\n  IsCompact K → IsOpen U → K ⊆ U → ∃ L, IsCompact L ∧ K ⊆ interior L ∧ L ⊆ U\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a locally compact space, for every containment `K ⊆ U` of a compact set `K` in an open\\nset `U`, there is a compact neighborhood `L` such that `K ⊆ L ⊆ U`: equivalently, there is a\\ncompact `L` such that `K ⊆ interior L` and `L ⊆ U`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] (x : α), ∃ K, IsCompact K ∧ K ∈ nhds x\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a locally compact space every point has a compact neighborhood. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] {x : α} {U : Set α},\\n  IsOpen U → x ∈ U → ∃ K, IsCompact K ∧ x ∈ interior K ∧ K ⊆ U\",\n  \"isProp\": true,\n  \"docString\":\n  \"A reformulation of the definition of locally compact space: In a locally compact space,\\nevery open set containing `x` has a compact subset containing `x` in its interior. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] [self : LocallyCompactSpace α] (x : α) (n : Set α),\\n  n ∈ nhds x → ∃ s, s ∈ nhds x ∧ s ⊆ n ∧ IsCompact s\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a locally compact space,\\nevery neighbourhood of every point contains a compact neighbourhood of that same point. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] [inst_2 : T2Space α] (x : α),\\n  ∃ U, IsOpen U ∧ x ∈ U ∧ IsCompact (closure U)\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a locally compact T₂ space, every point has an open neighborhood with compact closure \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : LocallyCompactSpace X] [inst_2 : T2Space X],\\n  NormalSpace (OnePoint X)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The one point compactification of a locally compact Hausdorff space is a normal (hence,\\nHausdorff and regular) topological space. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] [inst_2 : T2Space α] {K U : Set α},\\n  IsCompact K → IsOpen U → K ⊆ U → ∃ V, IsOpen V ∧ K ⊆ V ∧ closure V ⊆ U ∧ IsCompact (closure V)\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a locally compact T₂ space, given a compact set `K` inside an open set `U`, we can find a\\nopen set `V` between these sets with compact closure: `K ⊆ V` and the closure of `V` is inside `U`.\\n\"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X], CompactSpace (OnePoint X)\",\n  \"isProp\": true,\n  \"docString\":\n  \"For any topological space `X`, its one point compactification is a compact space. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] [inst_2 : T2Space α] {K : Set α},\\n  IsCompact K → ∃ V, IsOpen V ∧ K ⊆ V ∧ IsCompact (closure V)\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a locally compact T₂ space, every compact set has an open neighborhood with compact closure.\\n\"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] [inst_2 : Nonempty α],\\n  Nonempty (TopologicalSpace.PositiveCompacts α)\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a nonempty locally compact space, there exists a compact set with nonempty interior. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [self : T2Space α] (x y : α),\\n  x ≠ y → ∃ u v, IsOpen u ∧ IsOpen v ∧ x ∈ u ∧ y ∈ v ∧ Disjoint u v\",\n  \"isProp\": true,\n  \"docString\":\n  \"Every two points in a Hausdorff space admit disjoint open neighbourhoods. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] {K : Set α},\\n  IsCompact K → ∃ K', IsCompact K' ∧ K ⊆ interior K'\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a locally compact space, every compact set is contained in the interior of a compact set. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] [inst_2 : CompactSpace α]\\n  [inst_3 : CompactSpace β], CompactSpace (α ⊕ β)\",\n  \"isProp\": true,\n  \"docString\": \"The disjoint union of two compact spaces is compact. \"},\n {\"theorem\":\n  \"∀ {G : Type w} [inst : TopologicalSpace G] [inst_1 : MulOneClass G] [inst_2 : ContinuousMul G] {K U : Set G},\\n  IsCompact K → IsOpen U → K ⊆ U → ∃ V, V ∈ nhds 1 ∧ K * V ⊆ U\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given a compact set `K` inside an open set `U`, there is an open neighborhood `V` of `1`\\nsuch that `K * V ⊆ U`. \"},\n {\"theorem\":\n  \"∀ {H : Type u_1} [inst : TopologicalSpace H] [inst_1 : LocallyCompactSpace H] [inst_2 : T2Space H]\\n  [inst_3 : TotallyDisconnectedSpace H], TopologicalSpace.IsTopologicalBasis {s | IsClopen s}\",\n  \"isProp\": true,\n  \"docString\":\n  \"A locally compact Hausdorff totally disconnected space has a basis with clopen elements. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] {x : α} (self : TopologicalSpace.OpenNhdsOf x), x ∈ self.carrier\",\n  \"isProp\": true,\n  \"docString\":\n  \"The point `x` belongs to every `U : TopologicalSpace.OpenNhdsOf x`. \"},\n {\"theorem\":\n  \"∀ {G : Type w} [inst : TopologicalSpace G] [inst_1 : AddZeroClass G] [inst_2 : ContinuousAdd G] {K U : Set G},\\n  IsCompact K → IsOpen U → K ⊆ U → ∃ V, V ∈ nhds 0 ∧ K + V ⊆ U\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given a compact set `K` inside an open set `U`, there is an open neighborhood `V` of\\n`0` such that `K + V ⊆ U`.\"},\n {\"theorem\":\n  \"∀ {G : Type w} [inst : TopologicalSpace G] [inst_1 : MulOneClass G] [inst_2 : ContinuousMul G] {K U : Set G},\\n  IsCompact K → IsOpen U → K ⊆ U → ∃ V, V ∈ nhds 1 ∧ V * K ⊆ U\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given a compact set `K` inside an open set `U`, there is an open neighborhood `V` of `1`\\nsuch that `V * K ⊆ U`. \"},\n {\"theorem\":\n  \"∀ {G : Type w} [inst : TopologicalSpace G] [inst_1 : AddZeroClass G] [inst_2 : ContinuousAdd G] {K U : Set G},\\n  IsCompact K → IsOpen U → K ⊆ U → ∃ V, V ∈ nhds 0 ∧ V + K ⊆ U\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given a compact set `K` inside an open set `U`, there is an open neighborhood `V` of\\n`0` such that `V + K ⊆ U`.\"}]\n", "prompt_cons": "/-- If every points of a Hausdorff space admits a compact neighborhood, then this space is locally\ncompact. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : T2Space α],\n  (∀ (x : α), ∃ s, s ∈ nhds x ∧ IsCompact s) → LocallyCompactSpace α :=\n\n/-- In a locally compact space, for every containment `K ⊆ U` of a compact set `K` in an open\nset `U`, there is a compact neighborhood `L` such that `K ⊆ L ⊆ U`: equivalently, there is a\ncompact `L` such that `K ⊆ interior L` and `L ⊆ U`. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [hα : LocallyCompactSpace α] {K U : Set α},\n  IsCompact K → IsOpen U → K ⊆ U → ∃ L, IsCompact L ∧ K ⊆ interior L ∧ L ⊆ U :=\n\n/-- In a locally compact space every point has a compact neighborhood. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] (x : α), ∃ K, IsCompact K ∧ K ∈ nhds x :=\n\n/-- A reformulation of the definition of locally compact space: In a locally compact space,\nevery open set containing `x` has a compact subset containing `x` in its interior. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] {x : α} {U : Set α},\n  IsOpen U → x ∈ U → ∃ K, IsCompact K ∧ x ∈ interior K ∧ K ⊆ U :=\n\n/-- In a locally compact space,\nevery neighbourhood of every point contains a compact neighbourhood of that same point. -/\ntheorem ∀ {α : Type u_1} [inst : TopologicalSpace α] [self : LocallyCompactSpace α] (x : α) (n : Set α),\n  n ∈ nhds x → ∃ s, s ∈ nhds x ∧ s ⊆ n ∧ IsCompact s :=\n\n/-- In a locally compact T₂ space, every point has an open neighborhood with compact closure -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] [inst_2 : T2Space α] (x : α),\n  ∃ U, IsOpen U ∧ x ∈ U ∧ IsCompact (closure U) :=\n\n/-- The one point compactification of a locally compact Hausdorff space is a normal (hence,\nHausdorff and regular) topological space. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : LocallyCompactSpace X] [inst_2 : T2Space X],\n  NormalSpace (OnePoint X) :=\n\n/-- In a locally compact T₂ space, given a compact set `K` inside an open set `U`, we can find a\nopen set `V` between these sets with compact closure: `K ⊆ V` and the closure of `V` is inside `U`. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] [inst_2 : T2Space α] {K U : Set α},\n  IsCompact K → IsOpen U → K ⊆ U → ∃ V, IsOpen V ∧ K ⊆ V ∧ closure V ⊆ U ∧ IsCompact (closure V) :=\n\n/-- For any topological space `X`, its one point compactification is a compact space. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X], CompactSpace (OnePoint X) :=\n\n/-- In a locally compact T₂ space, every compact set has an open neighborhood with compact closure. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] [inst_2 : T2Space α] {K : Set α},\n  IsCompact K → ∃ V, IsOpen V ∧ K ⊆ V ∧ IsCompact (closure V) :=\n\n/-- In a nonempty locally compact space, there exists a compact set with nonempty interior. -/\ntheorem ∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] [inst_2 : Nonempty α],\n  Nonempty (TopologicalSpace.PositiveCompacts α) :=\n\n/-- Every two points in a Hausdorff space admit disjoint open neighbourhoods. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [self : T2Space α] (x y : α),\n  x ≠ y → ∃ u v, IsOpen u ∧ IsOpen v ∧ x ∈ u ∧ y ∈ v ∧ Disjoint u v :=\n\n/-- In a locally compact space, every compact set is contained in the interior of a compact set. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] {K : Set α},\n  IsCompact K → ∃ K', IsCompact K' ∧ K ⊆ interior K' :=\n\n/-- The disjoint union of two compact spaces is compact. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] [inst_2 : CompactSpace α]\n  [inst_3 : CompactSpace β], CompactSpace (α ⊕ β) :=\n\n/-- Given a compact set `K` inside an open set `U`, there is an open neighborhood `V` of `1`\nsuch that `K * V ⊆ U`. -/\ntheorem ∀ {G : Type w} [inst : TopologicalSpace G] [inst_1 : MulOneClass G] [inst_2 : ContinuousMul G] {K U : Set G},\n  IsCompact K → IsOpen U → K ⊆ U → ∃ V, V ∈ nhds 1 ∧ K * V ⊆ U :=\n\n/-- A locally compact Hausdorff totally disconnected space has a basis with clopen elements. -/\ntheorem ∀ {H : Type u_1} [inst : TopologicalSpace H] [inst_1 : LocallyCompactSpace H] [inst_2 : T2Space H]\n  [inst_3 : TotallyDisconnectedSpace H], TopologicalSpace.IsTopologicalBasis {s | IsClopen s} :=\n\n/-- The point `x` belongs to every `U : TopologicalSpace.OpenNhdsOf x`. -/\ntheorem ∀ {α : Type u_1} [inst : TopologicalSpace α] {x : α} (self : TopologicalSpace.OpenNhdsOf x), x ∈ self.carrier :=\n\n/-- Given a compact set `K` inside an open set `U`, there is an open neighborhood `V` of\n`0` such that `K + V ⊆ U`. -/\ntheorem ∀ {G : Type w} [inst : TopologicalSpace G] [inst_1 : AddZeroClass G] [inst_2 : ContinuousAdd G] {K U : Set G},\n  IsCompact K → IsOpen U → K ⊆ U → ∃ V, V ∈ nhds 0 ∧ K + V ⊆ U :=\n\n/-- Given a compact set `K` inside an open set `U`, there is an open neighborhood `V` of `1`\nsuch that `V * K ⊆ U`. -/\ntheorem ∀ {G : Type w} [inst : TopologicalSpace G] [inst_1 : MulOneClass G] [inst_2 : ContinuousMul G] {K U : Set G},\n  IsCompact K → IsOpen U → K ⊆ U → ∃ V, V ∈ nhds 1 ∧ V * K ⊆ U :=\n\n/-- Given a compact set `K` inside an open set `U`, there is an open neighborhood `V` of\n`0` such that `V + K ⊆ U`. -/\ntheorem ∀ {G : Type w} [inst : TopologicalSpace G] [inst_1 : AddZeroClass G] [inst_2 : ContinuousAdd G] {K U : Set G},\n  IsCompact K → IsOpen U → K ⊆ U → ∃ V, V ∈ nhds 0 ∧ V + K ⊆ U :=\n\n/-- Show that if `X` is a Hausdorff space that is locally compact at the point `x`, then for each neighborhood `U` of `x`, there is a neighborhood `V` of `x` such that `∪ V` is compact and `∪ V ⊆ U`. -/\ntheorem", "choices": ["forall {α : Type u} [inst : TopologicalSpace α] [inst_1 : T2Space α] {x : α} {U : Set α},\n  LocallyCompactSpace.LocalCompactness x → IsOpen U → x ∈ U → ∃ V, V ∈ nhds x ∧ IsCompact (⋃ V) ∧ (⋃ V) ⊆ U ", "∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : T2Space α] (x : α) {U : Set α},\n  LocallyCompactSpace.LocallyCompact x → IsOpen U → x ∈ U → ∃ V : TopologicalSpace.OpenNhdsOf x, IsCompact (⋃ V) ∧ (⋃ V) ⊆ U ", "forall {α : Type u} [inst : TopologicalSpace α] [inst_1 : T2Space α] {x : α} {U : Set α} (hx : ∀ (x : α), ∃ s, s ∈ nhds x ∧ IsCompact s) (hU : U ∈ nhds x),\n  ∃ V : Set α, V ∈ nhds x ∧ IsCompact (Union V) ∧ Union V ⊆ U ", "∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : T2Space α] {x : α} (h : LocallyCompactSpace α) {U : Set α},\n  U ∈ nhds x → ∃ V, V ∈ nhds x ∧ IsCompact (⋃ V) ∧ ⋃ V ⊆ U ", "forall {α : Type u} [inst : TopologicalSpace α] [inst_1 : T2Space α] {x : α} {U : Set α},\n  LocallyCompactSpace α → IsOpen U → x ∈ U → ∃ V, IsCompact (closure V) ∧ x ∈ V ∧ V ⊆ U ", "∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : T2Space α] {x : α} {U : Set α},\n  LocallyCompactSpace.nhds_basis α x → IsOpen U → x ∈ U → ∃ V, V ∈ nhds x ∧ IsCompact (closure V) ∧ closure V ⊆ U ", "∀ {X : Type u} [inst : TopologicalSpace X] [inst_1 : T2Space X] {x : X} {U : Set X},\n  LocallyCompactSpace.LocalCompact x → IsOpen U → x ∈ U → ∃ V, V ∈ nhds x ∧ IsCompact (closure V) ∧ closure V ⊆ U ", "∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : T2Space α] (x : α) {U : Set α},\n  IsOpen U → x ∈ U → LocallyCompactSpace.LocalCompact x → ∃ K, IsCompact K ∧ K ∈ nhds x ∧ K ⊆ U ", "∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : T2Space α] {x : α} {U : Set α},\n  LocallyCompactSpace.LocalCompact α x → IsOpen U → x ∈ U →\n    ∃ V, V ∈ nhds x ∧ IsCompact (set.Union V) ∧ set.Union V ⊆ U ", "∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : T2Space α] {x : α} {U : Set α},\n  IsOpen U → x ∈ U → LocallyCompactSpace x → ∃ V, IsOpen V ∧ x ∈ V ∧ IsCompact (closure V) ∧ closure V ⊆ U "]}
{"docString": "Show that if `X` has a countable dense subset, every collection of disjoint open sets in `X` is countable.", "prompts": "[{\"theorem\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : BaireSpace α] {S : Set (Set α)},\\n  (∀ (s : Set α), s ∈ S → IsOpen s) → Set.Countable S → (∀ (s : Set α), s ∈ S → Dense s) → Dense (⋂₀ S)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Baire theorem: a countable intersection of dense open sets is dense. Formulated here with ⋂₀. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [t : TopologicalSpace α] [self : TopologicalSpace.SeparableSpace α], ∃ s, Set.Countable s ∧ Dense s\",\n  \"isProp\": true,\n  \"docString\": \"There exists a countable dense set. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {β : Type u_1} [inst : TopologicalSpace α] [inst_1 : BaireSpace α] {S : Set β} {f : β → Set α},\\n  (∀ (s : β), s ∈ S → IsOpen (f s)) →\\n    Set.Countable S → (∀ (s : β), s ∈ S → Dense (f s)) → Dense (⋂ (s : β) (_ : s ∈ S), f s)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Baire theorem: a countable intersection of dense open sets is dense. Formulated here with\\nan index set which is a countable set in any type. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {β : Type u_1} [inst : TopologicalSpace α] [inst_1 : BaireSpace α] {S : Set β} {f : β → Set α},\\n  (∀ (s : β), s ∈ S → IsClosed (f s)) →\\n    Set.Countable S → ⋃ (s : β) (_ : s ∈ S), f s = Set.univ → Dense (⋃ (s : β) (_ : s ∈ S), interior (f s))\",\n  \"isProp\": true,\n  \"docString\":\n  \"Baire theorem: if countably many closed sets cover the whole space, then their interiors\\nare dense. Formulated here with an index set which is a countable set in any type. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : BaireSpace α] {S : Set (Set α)},\\n  (∀ (s : Set α), s ∈ S → IsGδ s) → Set.Countable S → (∀ (s : Set α), s ∈ S → Dense s) → Dense (⋂₀ S)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Baire theorem: a countable intersection of dense Gδ sets is dense. Formulated here with ⋂₀. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [t : TopologicalSpace α] [inst : TopologicalSpace.SecondCountableTopology α] {ι : Type u_1}\\n  (s : ι → Set α), (∀ (i : ι), IsOpen (s i)) → ∃ T, Set.Countable T ∧ ⋃ (i : ι) (_ : i ∈ T), s i = ⋃ (i : ι), s i\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a second-countable space, an open set, given as a union of open sets,\\nis equal to the union of countably many of those sets. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {ι : Type u_1} [inst : TopologicalSpace α] [inst_1 : BaireSpace α] {t : Set ι} {s : Set α},\\n  IsGδ s →\\n    Dense s →\\n      Set.Countable t →\\n        ∀ {f : ι → Set α},\\n          (∀ (i : ι), i ∈ t → IsClosed (f i)) →\\n            s ⊆ ⋃ (i : ι) (_ : i ∈ t), f i → Dense (⋃ (i : ι) (_ : i ∈ t), interior (f i))\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a countable family of closed sets cover a dense `Gδ` set, then the union of their interiors\\nis dense. Formulated here with a union over a countable set in any type. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {s : Set α},\\n  Dense s ↔ ∀ (U : Set α), IsOpen U → Set.Nonempty U → Set.Nonempty (U ∩ s)\",\n  \"isProp\": true,\n  \"docString\":\n  \"A set is dense if and only if it has a nonempty intersection with each nonempty open set. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {s : Set α}, Set.Countable s → Set.Countable {t | Set.Finite t ∧ t ⊆ s}\",\n  \"isProp\": true,\n  \"docString\": \"The set of finite subsets of a countable set is countable. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : BaireSpace α] {S : Set (Set α)},\\n  (∀ (s : Set α), s ∈ S → IsClosed s) →\\n    Set.Countable S → ⋃₀ S = Set.univ → Dense (⋃ (s : Set α) (_ : s ∈ S), interior s)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Baire theorem: if countably many closed sets cover the whole space, then their interiors\\nare dense. Formulated here with `⋃₀`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [t : TopologicalSpace α] [inst : TopologicalSpace.SeparableSpace α] {ι : Type u_1} {s : ι → Set α}\\n  {a : Set ι},\\n  Set.PairwiseDisjoint a s →\\n    (∀ (i : ι), i ∈ a → IsOpen (s i)) → (∀ (i : ι), i ∈ a → Set.Nonempty (s i)) → Set.Countable a\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a separable space, a family of nonempty disjoint open sets is countable. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {β : Type u_1} [inst : TopologicalSpace α] [inst_1 : BaireSpace α] [inst_2 : Encodable β]\\n  {f : β → Set α}, (∀ (s : β), IsOpen (f s)) → (∀ (s : β), Dense (f s)) → Dense (⋂ (s : β), f s)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Baire theorem: a countable intersection of dense open sets is dense. Formulated here with\\nan index set which is an encodable type. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] {s : Set X} [h : HasCountableSeparatingOn X IsOpen s],\\n  HasCountableSeparatingOn X IsClosed s\",\n  \"isProp\": true,\n  \"docString\":\n  \"If there exists a countable family of open sets separating points of `s`, then there exists\\na countable family of closed sets separating points of `s`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] {s : Set α},\\n  s ∈ residual α ↔\\n    ∃ S, (∀ (t : Set α), t ∈ S → IsOpen t) ∧ (∀ (t : Set α), t ∈ S → Dense t) ∧ Set.Countable S ∧ ⋂₀ S ⊆ s\",\n  \"isProp\": true,\n  \"docString\":\n  \"A set is residual iff it includes a countable intersection of dense open sets. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {s t : Set α}, Dense s → Dense t → IsOpen t → Dense (s ∩ t)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The intersection of a dense set with an open dense set is a dense set. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {ι : Type u_1} [inst : TopologicalSpace α] {s : Set α} {b : Set ι} {c : ι → Set α},\\n  IsCompact s →\\n    (∀ (i : ι), i ∈ b → IsOpen (c i)) →\\n      s ⊆ ⋃ (i : ι) (_ : i ∈ b), c i → ∃ b', b' ⊆ b ∧ Set.Finite b' ∧ s ⊆ ⋃ (i : ι) (_ : i ∈ b'), c i\",\n  \"isProp\": true,\n  \"docString\":\n  \"For every open cover of a compact set, there exists a finite subcover. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {s t : Set α}, Dense s → Dense t → IsOpen s → Dense (s ∩ t)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The intersection of an open dense set with a dense set is a dense set. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {β : Type u_1} [inst : TopologicalSpace α] [inst_1 : BaireSpace α] {S : Set β}\\n  {f : (x : β) → x ∈ S → Set α},\\n  (∀ (s : β) (H : s ∈ S), IsGδ (f s H)) →\\n    Set.Countable S → (∀ (s : β) (H : s ∈ S), Dense (f s H)) → Dense (⋂ (s : β) (h : s ∈ S), f s h)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Baire theorem: a countable intersection of dense Gδ sets is dense. Formulated here with\\nan index set which is a countable set in any type. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {S U : Set α},\\n  IsPreirreducible S → IsOpen U → Set.Nonempty (S ∩ U) → S ⊆ closure (S ∩ U)\",\n  \"isProp\": true,\n  \"docString\":\n  \"A nonempty open subset of a preirreducible subspace is dense in the subspace. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {Z a b : Set α},\\n  IsClopen Z → Z ⊆ a ∪ b → IsOpen a → IsOpen b → Disjoint a b → IsClopen (Z ∩ a)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The intersection of a disjoint covering by two open sets of a clopen set will be clopen. \"}]\n", "prompt_cons": "/-- Baire theorem: a countable intersection of dense open sets is dense. Formulated here with ⋂₀. -/\ntheorem ∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : BaireSpace α] {S : Set (Set α)},\n  (∀ (s : Set α), s ∈ S → IsOpen s) → Set.Countable S → (∀ (s : Set α), s ∈ S → Dense s) → Dense (⋂₀ S) :=\n\n/-- There exists a countable dense set. -/\ntheorem ∀ {α : Type u} [t : TopologicalSpace α] [self : TopologicalSpace.SeparableSpace α], ∃ s, Set.Countable s ∧ Dense s :=\n\n/-- Baire theorem: a countable intersection of dense open sets is dense. Formulated here with\nan index set which is a countable set in any type. -/\ntheorem ∀ {α : Type u_2} {β : Type u_1} [inst : TopologicalSpace α] [inst_1 : BaireSpace α] {S : Set β} {f : β → Set α},\n  (∀ (s : β), s ∈ S → IsOpen (f s)) →\n    Set.Countable S → (∀ (s : β), s ∈ S → Dense (f s)) → Dense (⋂ (s : β) (_ : s ∈ S), f s) :=\n\n/-- Baire theorem: if countably many closed sets cover the whole space, then their interiors\nare dense. Formulated here with an index set which is a countable set in any type. -/\ntheorem ∀ {α : Type u_2} {β : Type u_1} [inst : TopologicalSpace α] [inst_1 : BaireSpace α] {S : Set β} {f : β → Set α},\n  (∀ (s : β), s ∈ S → IsClosed (f s)) →\n    Set.Countable S → ⋃ (s : β) (_ : s ∈ S), f s = Set.univ → Dense (⋃ (s : β) (_ : s ∈ S), interior (f s)) :=\n\n/-- Baire theorem: a countable intersection of dense Gδ sets is dense. Formulated here with ⋂₀. -/\ntheorem ∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : BaireSpace α] {S : Set (Set α)},\n  (∀ (s : Set α), s ∈ S → IsGδ s) → Set.Countable S → (∀ (s : Set α), s ∈ S → Dense s) → Dense (⋂₀ S) :=\n\n/-- In a second-countable space, an open set, given as a union of open sets,\nis equal to the union of countably many of those sets. -/\ntheorem ∀ {α : Type u} [t : TopologicalSpace α] [inst : TopologicalSpace.SecondCountableTopology α] {ι : Type u_1}\n  (s : ι → Set α), (∀ (i : ι), IsOpen (s i)) → ∃ T, Set.Countable T ∧ ⋃ (i : ι) (_ : i ∈ T), s i = ⋃ (i : ι), s i :=\n\n/-- If a countable family of closed sets cover a dense `Gδ` set, then the union of their interiors\nis dense. Formulated here with a union over a countable set in any type. -/\ntheorem ∀ {α : Type u_2} {ι : Type u_1} [inst : TopologicalSpace α] [inst_1 : BaireSpace α] {t : Set ι} {s : Set α},\n  IsGδ s →\n    Dense s →\n      Set.Countable t →\n        ∀ {f : ι → Set α},\n          (∀ (i : ι), i ∈ t → IsClosed (f i)) →\n            s ⊆ ⋃ (i : ι) (_ : i ∈ t), f i → Dense (⋃ (i : ι) (_ : i ∈ t), interior (f i)) :=\n\n/-- A set is dense if and only if it has a nonempty intersection with each nonempty open set. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] {s : Set α},\n  Dense s ↔ ∀ (U : Set α), IsOpen U → Set.Nonempty U → Set.Nonempty (U ∩ s) :=\n\n/-- The set of finite subsets of a countable set is countable. -/\ntheorem ∀ {α : Type u} {s : Set α}, Set.Countable s → Set.Countable {t | Set.Finite t ∧ t ⊆ s} :=\n\n/-- Baire theorem: if countably many closed sets cover the whole space, then their interiors\nare dense. Formulated here with `⋃₀`. -/\ntheorem ∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : BaireSpace α] {S : Set (Set α)},\n  (∀ (s : Set α), s ∈ S → IsClosed s) →\n    Set.Countable S → ⋃₀ S = Set.univ → Dense (⋃ (s : Set α) (_ : s ∈ S), interior s) :=\n\n/-- In a separable space, a family of nonempty disjoint open sets is countable. -/\ntheorem ∀ {α : Type u} [t : TopologicalSpace α] [inst : TopologicalSpace.SeparableSpace α] {ι : Type u_1} {s : ι → Set α}\n  {a : Set ι},\n  Set.PairwiseDisjoint a s →\n    (∀ (i : ι), i ∈ a → IsOpen (s i)) → (∀ (i : ι), i ∈ a → Set.Nonempty (s i)) → Set.Countable a :=\n\n/-- Baire theorem: a countable intersection of dense open sets is dense. Formulated here with\nan index set which is an encodable type. -/\ntheorem ∀ {α : Type u_2} {β : Type u_1} [inst : TopologicalSpace α] [inst_1 : BaireSpace α] [inst_2 : Encodable β]\n  {f : β → Set α}, (∀ (s : β), IsOpen (f s)) → (∀ (s : β), Dense (f s)) → Dense (⋂ (s : β), f s) :=\n\n/-- If there exists a countable family of open sets separating points of `s`, then there exists\na countable family of closed sets separating points of `s`. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X] {s : Set X} [h : HasCountableSeparatingOn X IsOpen s],\n  HasCountableSeparatingOn X IsClosed s :=\n\n/-- A set is residual iff it includes a countable intersection of dense open sets. -/\ntheorem ∀ {α : Type u_1} [inst : TopologicalSpace α] {s : Set α},\n  s ∈ residual α ↔\n    ∃ S, (∀ (t : Set α), t ∈ S → IsOpen t) ∧ (∀ (t : Set α), t ∈ S → Dense t) ∧ Set.Countable S ∧ ⋂₀ S ⊆ s :=\n\n/-- The intersection of a dense set with an open dense set is a dense set. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] {s t : Set α}, Dense s → Dense t → IsOpen t → Dense (s ∩ t) :=\n\n/-- For every open cover of a compact set, there exists a finite subcover. -/\ntheorem ∀ {α : Type u} {ι : Type u_1} [inst : TopologicalSpace α] {s : Set α} {b : Set ι} {c : ι → Set α},\n  IsCompact s →\n    (∀ (i : ι), i ∈ b → IsOpen (c i)) →\n      s ⊆ ⋃ (i : ι) (_ : i ∈ b), c i → ∃ b', b' ⊆ b ∧ Set.Finite b' ∧ s ⊆ ⋃ (i : ι) (_ : i ∈ b'), c i :=\n\n/-- The intersection of an open dense set with a dense set is a dense set. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] {s t : Set α}, Dense s → Dense t → IsOpen s → Dense (s ∩ t) :=\n\n/-- Baire theorem: a countable intersection of dense Gδ sets is dense. Formulated here with\nan index set which is a countable set in any type. -/\ntheorem ∀ {α : Type u_2} {β : Type u_1} [inst : TopologicalSpace α] [inst_1 : BaireSpace α] {S : Set β}\n  {f : (x : β) → x ∈ S → Set α},\n  (∀ (s : β) (H : s ∈ S), IsGδ (f s H)) →\n    Set.Countable S → (∀ (s : β) (H : s ∈ S), Dense (f s H)) → Dense (⋂ (s : β) (h : s ∈ S), f s h) :=\n\n/-- A nonempty open subset of a preirreducible subspace is dense in the subspace. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] {S U : Set α},\n  IsPreirreducible S → IsOpen U → Set.Nonempty (S ∩ U) → S ⊆ closure (S ∩ U) :=\n\n/-- The intersection of a disjoint covering by two open sets of a clopen set will be clopen. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] {Z a b : Set α},\n  IsClopen Z → Z ⊆ a ∪ b → IsOpen a → IsOpen b → Disjoint a b → IsClopen (Z ∩ a) :=\n\n/-- Show that if `X` has a countable dense subset, every collection of disjoint open sets in `X` is countable. -/\ntheorem", "choices": ["∀ {α : Type u} [t : TopologicalSpace α] [inst : TopologicalSpace.SeparableSpace α] {ι : Type u_1} {s : ι → Set α},\n  Set.PairwiseDisjoint Set.Univ s → (∀ (i : ι), IsOpen (s i)) → Set.Countable {i : ι | Set.Nonempty (s i)} ", "∀ {α : Type u} [t : TopologicalSpace α] [inst : TopologicalSpace.SeparableSpace α] {ι : Type u_1} {s : ι → Set α}\n  {a : Set ι},\n  Set.PairwiseDisjoint a s →\n    (∀ (i : ι), i ∈ a → IsOpen (s i)) → (∀ (i : ι), i ∈ a → Set.Nonempty (s i)) → Set.Countable a ", "∀ {α : Type u} [t : TopologicalSpace α] [inst : TopologicalSpace.SeparableSpace α] {ι : Type u_1} {s : ι → Set α},\n  Set.PairwiseDisjoint Set.Univ s →\n    (∀ (i : ι), IsOpen (s i)) → (∀ (i : ι), Set.Nonempty (s i)) → Set.Countable {i : ι | s i ≠ ∅} ", "∀ {α : Type u} [t : TopologicalSpace α] [inst : TopologicalSpace.SeparableSpace α] {ι : Type u_1} {s : ι → Set α}\n  {a : Set ι},\n  Set.PairwiseDisjoint a s →\n    (∀ (i : ι), i ∈ a → IsOpen (s i)) → Set.Countable a ", "forall {α : Type u} [t : TopologicalSpace α] [inst : TopologicalSpace.SeparableSpace α] {ι : Type u_1} {s : ι → Set α}\n  {a : Set ι},\n  Set.PairwiseDisjoint a s →\n    (∀ (i : ι), i ∈ a → IsOpen (s i)) → (∀ (i : ι), i ∈ a → Set.Nonempty (s i)) → Set.Countable a ", "forall {α : Type u} [t : TopologicalSpace α] [inst : TopologicalSpace.SecondCountableTopology α] {ι : Type u_1} {s : ι → Set α},\n  (∀ (i : ι), IsOpen (s i)) → DisjointUnion s → Set.Countable (range s) ", "∀ {α : Type u} [t : TopologicalSpace α] [inst : TopologicalSpace.SeparableSpace α] {ι : Type u_1} {s : ι → Set α},\n  Set.PairwiseDisjoint (Set.Range s) (λ (x y : Set α), Disjoint x y) →\n    (∀ (i : ι), IsOpen (s i)) → (∀ (i : ι), Set.Nonempty (s i)) → Set.Countable (Set.Range s) ", "∀ {α : Type u} [t : TopologicalSpace α] [inst : TopologicalSpace.SeparableSpace α] {ι : Type u_1} {s : ι → Set α}\n  {a : Set ι},\n  Set.PairwiseDisjoint a s →\n    (∀ (i : ι), i ∈ a → IsOpen (s i)) → (∀ (i : ι), i ∈ a → Set.Nonempty (s i)) → Set.Countable a ", "∀ {α : Type u} [t : TopologicalSpace α] [inst : TopologicalSpace.SecondCountableTopology α] {ι : Type u_1} {s : ι → Set α},\n  (∀ (i : ι), IsOpen (s i)) →\n    Set.PairwiseDisjoint Set.Univ s → Set.Countable (Function.Support s) ", "∀ {α : Type u} [t : TopologicalSpace α] [inst : TopologicalSpace.SeparableSpace α] {ι : Type u_1} {s : ι → Set α}\n  {a : Set ι},\n  Set.PairwiseDisjoint a s →\n    (∀ (i : ι), i ∈ a → IsOpen (s i)) → Set.Countable a "]}
{"docString": "Show that if `X` is normal, every pair of disjoint closed sets have neighborhoods whose closures are disjoint.", "prompts": "[{\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [self : NormalSpace α] (s t : Set α),\\n  IsClosed s → IsClosed t → Disjoint s t → SeparatedNhds s t\",\n  \"isProp\": true,\n  \"docString\":\n  \"Two disjoint sets in a normal space admit disjoint neighbourhoods. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {Z a b : Set α},\\n  IsClopen Z → Z ⊆ a ∪ b → IsOpen a → IsOpen b → Disjoint a b → IsClopen (Z ∩ a)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The intersection of a disjoint covering by two open sets of a clopen set will be clopen. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : T3Space α] {x y : α},\\n  x ≠ y →\\n    ∃ U₁,\\n      U₁ ∈ nhds x ∧\\n        ∃ V₁,\\n          V₁ ∈ nhds x ∧\\n            ∃ U₂,\\n              U₂ ∈ nhds y ∧\\n                ∃ V₂,\\n                  V₂ ∈ nhds y ∧ IsClosed V₁ ∧ IsClosed V₂ ∧ IsOpen U₁ ∧ IsOpen U₂ ∧ V₁ ⊆ U₁ ∧ V₂ ⊆ U₂ ∧ Disjoint U₁ U₂\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given two points `x ≠ y`, we can find neighbourhoods `x ∈ V₁ ⊆ U₁` and `y ∈ V₂ ⊆ U₂`,\\nwith the `Vₖ` closed and the `Uₖ` open, such that the `Uₖ` are disjoint. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : PseudoMetricSpace α] {s t : Set α},\\n  Metric.hausdorffDist (closure s) (closure t) = Metric.hausdorffDist s t\",\n  \"isProp\": true,\n  \"docString\":\n  \"The Hausdorff distance between two sets and their closures coincide \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [self : T2Space α] (x y : α),\\n  x ≠ y → ∃ u v, IsOpen u ∧ IsOpen v ∧ x ∈ u ∧ y ∈ v ∧ Disjoint u v\",\n  \"isProp\": true,\n  \"docString\":\n  \"Every two points in a Hausdorff space admit disjoint open neighbourhoods. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [self : T5Space α] ⦃s t : Set α⦄,\\n  Disjoint (closure s) t → Disjoint s (closure t) → Disjoint (nhdsSet s) (nhdsSet t)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `closure s` is disjoint with `t` and `s` is disjoint with `closure t`, then `s` and `t`\\nadmit disjoint neighbourhoods. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {s : Set α} {ι : Type v},\\n  IsCompact s →\\n    ∀ (Z : ι → Set α),\\n      (∀ (i : ι), IsClosed (Z i)) →\\n        (∀ (t : Finset ι), Set.Nonempty (s ∩ ⋂ (i : ι) (_ : i ∈ t), Z i)) → Set.Nonempty (s ∩ ⋂ (i : ι), Z i)\",\n  \"isProp\": true,\n  \"docString\":\n  \"To show that a compact set intersects the intersection of a family of closed sets,\\nit is sufficient to show that it intersects every finite subfamily. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] [inst_2 : T2Space α] {K : Set α},\\n  IsCompact K → ∃ V, IsOpen V ∧ K ⊆ V ∧ IsCompact (closure V)\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a locally compact T₂ space, every compact set has an open neighborhood with compact closure.\\n\"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : PseudoMetricSpace α] {s t : Set α},\\n  EMetric.hausdorffEdist s t ≠ ⊤ → (Metric.hausdorffDist s t = 0 ↔ closure s = closure t)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Two sets are at zero Hausdorff distance if and only if they have the same closures \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X],\\n  (Pairwise fun x y => ∃ U, IsClopen U ∧ x ∈ U ∧ ¬y ∈ U) → IsTotallyDisconnected Set.univ\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `X` be a topological space, and suppose that for all distinct `x,y ∈ X`, there\\nis some clopen set `U` such that `x ∈ U` and `y ∉ U`. Then `X` is totally disconnected. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [self : T25Space α] ⦃x y : α⦄,\\n  x ≠ y → Disjoint (Filter.lift' (nhds x) closure) (Filter.lift' (nhds y) closure)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given two distinct points in a T₂.₅ space, their filters of closed neighborhoods are\\ndisjoint. \"},\n {\"theorem\":\n  \"∀ {M : Type u_1} [inst : TopologicalSpace M] [inst_1 : Monoid M] [inst_2 : ContinuousMul M] {U : Set M},\\n  U ∈ nhds 1 → ∃ V, IsOpen V ∧ 1 ∈ V ∧ V * V ⊆ U\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given a neighborhood `U` of `1` there is an open neighborhood `V` of `1`\\nsuch that `VV ⊆ U`. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] {s : Set X} [h : HasCountableSeparatingOn X IsOpen s],\\n  HasCountableSeparatingOn X IsClosed s\",\n  \"isProp\": true,\n  \"docString\":\n  \"If there exists a countable family of open sets separating points of `s`, then there exists\\na countable family of closed sets separating points of `s`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : PseudoEMetricSpace α] {s t : Set α}, EMetric.hausdorffEdist s t = 0 ↔ closure s = closure t\",\n  \"isProp\": true,\n  \"docString\":\n  \"Two sets are at zero Hausdorff edistance if and only if they have the same closure \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] [inst_2 : T2Space α] (x : α),\\n  ∃ U, IsOpen U ∧ x ∈ U ∧ IsCompact (closure U)\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a locally compact T₂ space, every point has an open neighborhood with compact closure \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : PseudoMetricSpace α] {s t : Set α},\\n  IsClosed s → IsClosed t → EMetric.hausdorffEdist s t ≠ ⊤ → (Metric.hausdorffDist s t = 0 ↔ s = t)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Two closed sets are at zero Hausdorff distance if and only if they coincide \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : PseudoMetricSpace α] {s : Set α}, Metric.hausdorffDist s (closure s) = 0\",\n  \"isProp\": true,\n  \"docString\": \"The Hausdorff distance between a set and its closure vanish \"},\n {\"theorem\":\n  \"∀ {M : Type u_1} [inst : TopologicalSpace M] [inst_1 : AddMonoid M] [inst_2 : ContinuousAdd M] {U : Set M},\\n  U ∈ nhds 0 → ∃ V, IsOpen V ∧ 0 ∈ V ∧ V + V ⊆ U\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given an open neighborhood `U` of `0` there is an open neighborhood `V` of `0`\\nsuch that `V + V ⊆ U`.\"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : T2Space α] {K U V : Set α},\\n  IsCompact K → IsOpen U → IsOpen V → K ⊆ U ∪ V → ∃ K₁ K₂, IsCompact K₁ ∧ IsCompact K₂ ∧ K₁ ⊆ U ∧ K₂ ⊆ V ∧ K = K₁ ∪ K₂\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a compact set is covered by two open sets, then we can cover it by two compact subsets. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] [inst_2 : CompactSpace α]\\n  [inst_3 : CompactSpace β], CompactSpace (α ⊕ β)\",\n  \"isProp\": true,\n  \"docString\": \"The disjoint union of two compact spaces is compact. \"}]\n", "prompt_cons": "/-- Two disjoint sets in a normal space admit disjoint neighbourhoods. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [self : NormalSpace α] (s t : Set α),\n  IsClosed s → IsClosed t → Disjoint s t → SeparatedNhds s t :=\n\n/-- The intersection of a disjoint covering by two open sets of a clopen set will be clopen. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] {Z a b : Set α},\n  IsClopen Z → Z ⊆ a ∪ b → IsOpen a → IsOpen b → Disjoint a b → IsClopen (Z ∩ a) :=\n\n/-- Given two points `x ≠ y`, we can find neighbourhoods `x ∈ V₁ ⊆ U₁` and `y ∈ V₂ ⊆ U₂`,\nwith the `Vₖ` closed and the `Uₖ` open, such that the `Uₖ` are disjoint. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : T3Space α] {x y : α},\n  x ≠ y →\n    ∃ U₁,\n      U₁ ∈ nhds x ∧\n        ∃ V₁,\n          V₁ ∈ nhds x ∧\n            ∃ U₂,\n              U₂ ∈ nhds y ∧\n                ∃ V₂,\n                  V₂ ∈ nhds y ∧ IsClosed V₁ ∧ IsClosed V₂ ∧ IsOpen U₁ ∧ IsOpen U₂ ∧ V₁ ⊆ U₁ ∧ V₂ ⊆ U₂ ∧ Disjoint U₁ U₂ :=\n\n/-- The Hausdorff distance between two sets and their closures coincide -/\ntheorem ∀ {α : Type u} [inst : PseudoMetricSpace α] {s t : Set α},\n  Metric.hausdorffDist (closure s) (closure t) = Metric.hausdorffDist s t :=\n\n/-- Every two points in a Hausdorff space admit disjoint open neighbourhoods. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [self : T2Space α] (x y : α),\n  x ≠ y → ∃ u v, IsOpen u ∧ IsOpen v ∧ x ∈ u ∧ y ∈ v ∧ Disjoint u v :=\n\n/-- If `closure s` is disjoint with `t` and `s` is disjoint with `closure t`, then `s` and `t`\nadmit disjoint neighbourhoods. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [self : T5Space α] ⦃s t : Set α⦄,\n  Disjoint (closure s) t → Disjoint s (closure t) → Disjoint (nhdsSet s) (nhdsSet t) :=\n\n/-- To show that a compact set intersects the intersection of a family of closed sets,\nit is sufficient to show that it intersects every finite subfamily. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] {s : Set α} {ι : Type v},\n  IsCompact s →\n    ∀ (Z : ι → Set α),\n      (∀ (i : ι), IsClosed (Z i)) →\n        (∀ (t : Finset ι), Set.Nonempty (s ∩ ⋂ (i : ι) (_ : i ∈ t), Z i)) → Set.Nonempty (s ∩ ⋂ (i : ι), Z i) :=\n\n/-- In a locally compact T₂ space, every compact set has an open neighborhood with compact closure. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] [inst_2 : T2Space α] {K : Set α},\n  IsCompact K → ∃ V, IsOpen V ∧ K ⊆ V ∧ IsCompact (closure V) :=\n\n/-- Two sets are at zero Hausdorff distance if and only if they have the same closures -/\ntheorem ∀ {α : Type u} [inst : PseudoMetricSpace α] {s t : Set α},\n  EMetric.hausdorffEdist s t ≠ ⊤ → (Metric.hausdorffDist s t = 0 ↔ closure s = closure t) :=\n\n/-- Let `X` be a topological space, and suppose that for all distinct `x,y ∈ X`, there\nis some clopen set `U` such that `x ∈ U` and `y ∉ U`. Then `X` is totally disconnected. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X],\n  (Pairwise fun x y => ∃ U, IsClopen U ∧ x ∈ U ∧ ¬y ∈ U) → IsTotallyDisconnected Set.univ :=\n\n/-- Given two distinct points in a T₂.₅ space, their filters of closed neighborhoods are\ndisjoint. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [self : T25Space α] ⦃x y : α⦄,\n  x ≠ y → Disjoint (Filter.lift' (nhds x) closure) (Filter.lift' (nhds y) closure) :=\n\n/-- Given a neighborhood `U` of `1` there is an open neighborhood `V` of `1`\nsuch that `VV ⊆ U`. -/\ntheorem ∀ {M : Type u_1} [inst : TopologicalSpace M] [inst_1 : Monoid M] [inst_2 : ContinuousMul M] {U : Set M},\n  U ∈ nhds 1 → ∃ V, IsOpen V ∧ 1 ∈ V ∧ V * V ⊆ U :=\n\n/-- If there exists a countable family of open sets separating points of `s`, then there exists\na countable family of closed sets separating points of `s`. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X] {s : Set X} [h : HasCountableSeparatingOn X IsOpen s],\n  HasCountableSeparatingOn X IsClosed s :=\n\n/-- Two sets are at zero Hausdorff edistance if and only if they have the same closure -/\ntheorem ∀ {α : Type u} [inst : PseudoEMetricSpace α] {s t : Set α}, EMetric.hausdorffEdist s t = 0 ↔ closure s = closure t :=\n\n/-- In a locally compact T₂ space, every point has an open neighborhood with compact closure -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] [inst_2 : T2Space α] (x : α),\n  ∃ U, IsOpen U ∧ x ∈ U ∧ IsCompact (closure U) :=\n\n/-- Two closed sets are at zero Hausdorff distance if and only if they coincide -/\ntheorem ∀ {α : Type u} [inst : PseudoMetricSpace α] {s t : Set α},\n  IsClosed s → IsClosed t → EMetric.hausdorffEdist s t ≠ ⊤ → (Metric.hausdorffDist s t = 0 ↔ s = t) :=\n\n/-- The Hausdorff distance between a set and its closure vanish -/\ntheorem ∀ {α : Type u} [inst : PseudoMetricSpace α] {s : Set α}, Metric.hausdorffDist s (closure s) = 0 :=\n\n/-- Given an open neighborhood `U` of `0` there is an open neighborhood `V` of `0`\nsuch that `V + V ⊆ U`. -/\ntheorem ∀ {M : Type u_1} [inst : TopologicalSpace M] [inst_1 : AddMonoid M] [inst_2 : ContinuousAdd M] {U : Set M},\n  U ∈ nhds 0 → ∃ V, IsOpen V ∧ 0 ∈ V ∧ V + V ⊆ U :=\n\n/-- If a compact set is covered by two open sets, then we can cover it by two compact subsets. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : T2Space α] {K U V : Set α},\n  IsCompact K → IsOpen U → IsOpen V → K ⊆ U ∪ V → ∃ K₁ K₂, IsCompact K₁ ∧ IsCompact K₂ ∧ K₁ ⊆ U ∧ K₂ ⊆ V ∧ K = K₁ ∪ K₂ :=\n\n/-- The disjoint union of two compact spaces is compact. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] [inst_2 : CompactSpace α]\n  [inst_3 : CompactSpace β], CompactSpace (α ⊕ β) :=\n\n/-- Show that if `X` is normal, every pair of disjoint closed sets have neighborhoods whose closures are disjoint. -/\ntheorem", "choices": ["∀ {α : Type u} [inst : TopologicalSpace α] [self : NormalSpace α] {s t : Set α},\n  IsClosed s → IsClosed t → Disjoint s t → ∃ u v, IsOpen u ∧ IsOpen v ∧ s ⊆ u ∧ t ⊆ v ∧ Disjoint (closure u) (closure v) ", "∀ {α : Type u} [inst : TopologicalSpace α] [self : NormalSpace α] ⦃s t : Set α⦄,\n  IsClosed s → IsClosed t → Disjoint s t → ∃ U₁ U₂, IsOpen U₁ ∧ IsOpen U₂ ∧ s ⊆ U₁ ∧ t ⊆ U₂ ∧ Disjoint (closure U₁) (closure U₂) ", "forall {α : Type u} [inst : TopologicalSpace α] [self : NormalSpace α] (A B : Set α),\n  IsClosed A → IsClosed B → Disjoint A B → ∃ U V, IsOpen U ∧ IsOpen V ∧ A ⊆ U ∧ B ⊆ V ∧ Disjoint (closure U) (closure V) ", "∀ {α : Type u} [inst : TopologicalSpace α] [self : NormalSpace α] ⦃s t : Set α⦄,\n  IsClosed s → IsClosed t → Disjoint s t → ∃ u v, IsOpen u ∧ IsOpen v ∧ s ⊆ u ∧ t ⊆ v ∧ Disjoint (closure u) (closure v) ", "∀ {X : Type u} [inst : TopologicalSpace X] [self : NormalSpace X] {s t : Set X}, \n  IsClosed s → IsClosed t → Disjoint s t → SeparatedByCloseds s t ", "∀ {α : Type u} [inst : TopologicalSpace α] [self : NormalSpace α] {s t : Set α},\n  IsClosed s → IsClosed t → Disjoint s t → ∃ U V, IsOpen U ∧ IsOpen V ∧ s ⊆ U ∧ t ⊆ V ∧ Disjoint (closure U) (closure V) ", "∀ {α : Type u} [inst : TopologicalSpace α] [self : NormalSpace α] {s t : Set α},\n  IsClosed s → IsClosed t → Disjoint s t → Separated (closure s) (closure t) ", "∀ {α : Type u} [inst : TopologicalSpace α] [self : NormalSpace α] ⦃s t : Set α⦄,\n  IsClosed s → IsClosed t → Disjoint s t → ∃ u v, IsOpen u ∧ IsOpen v ∧ s ⊆ u ∧ t ⊆ v ∧ Disjoint (closure u) (closure v) ", "∀ {α : Type u} [inst : TopologicalSpace α] [self : NormalSpace α] ⦃s t : Set α⦄,\n  IsClosed s → IsClosed t → Disjoint s t → ∃ u v, IsOpen u ∧ IsOpen v ∧ s ⊆ u ∧ t ⊆ v ∧ Disjoint (closure u) (closure v) ", "∀ {α : Type u} [inst : TopologicalSpace α] [self : NormalSpace α] ⦃s t : Set α⦄,\n  IsClosed s → IsClosed t → Disjoint s t → ∃ u v, IsOpen u ∧ IsOpen v ∧ s ⊆ u ∧ t ⊆ v ∧ Disjoint (closure u) (closure v) "]}
{"docString": "Show that a closed subspace of a normal space is normal.", "prompts": "[{\"theorem\":\n  \"∀ {𝕜 : Type u} [inst : NontriviallyNormedField 𝕜] {E : Type v} [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : CompleteSpace 𝕜] (s : Submodule 𝕜 E)\\n  [inst_4 : FiniteDimensional 𝕜 { x // x ∈ s }], IsClosed ↑s\",\n  \"isProp\": true,\n  \"docString\": \"A finite-dimensional subspace is closed. \"},\n {\"theorem\":\n  \"∀ {G : Type u_1} [inst : TopologicalSpace G] [inst_1 : Group G] [inst_2 : TopologicalGroup G] (N : Subgroup G)\\n  [inst_3 : Subgroup.Normal N], Subgroup.Normal (Subgroup.topologicalClosure N)\",\n  \"isProp\": true,\n  \"docString\": \"The topological closure of a normal subgroup is normal.\"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [self : NormalSpace α] (s t : Set α),\\n  IsClosed s → IsClosed t → Disjoint s t → SeparatedNhds s t\",\n  \"isProp\": true,\n  \"docString\":\n  \"Two disjoint sets in a normal space admit disjoint neighbourhoods. \"},\n {\"theorem\":\n  \"∀ {K : Type u_1} {V : Type u_2} [inst : Field K] [inst_1 : AddCommGroup V] [inst_2 : Module K V]\\n  (W : Projectivization.Subspace K V), Projectivization.Subspace.span ↑W = W\",\n  \"isProp\": true,\n  \"docString\": \"The span of a subspace is the subspace. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {S U : Set α},\\n  IsPreirreducible S → IsOpen U → Set.Nonempty (S ∩ U) → S ⊆ closure (S ∩ U)\",\n  \"isProp\": true,\n  \"docString\":\n  \"A nonempty open subset of a preirreducible subspace is dense in the subspace. \"},\n {\"theorem\":\n  \"∀ {k : Type u_1} {V : Type u_2} {P : Type u_3} [inst : Ring k] [inst_1 : AddCommGroup V] [inst_2 : Module k V]\\n  [S : AddTorsor V P] (s : AffineSubspace k P), affineSpan k ↑s = s\",\n  \"isProp\": true,\n  \"docString\":\n  \"Coercing a subspace to a set then taking the affine span produces the original subspace. \"},\n {\"theorem\":\n  \"∀ {R : Type u} {M : Type v} [inst : Semiring R] [inst_1 : TopologicalSpace M] [inst_2 : AddCommMonoid M]\\n  [inst_3 : Module R M] [inst_4 : ContinuousConstSMul R M] [inst_5 : ContinuousAdd M] {s : Submodule R M},\\n  Dense ↑s ↔ Submodule.topologicalClosure s = ⊤\",\n  \"isProp\": true,\n  \"docString\":\n  \"A subspace is dense iff its topological closure is the entire space. \"},\n {\"theorem\":\n  \"∀ {G : Type u_1} [inst : TopologicalSpace G] [inst_1 : AddGroup G] [inst_2 : TopologicalAddGroup G] (N : AddSubgroup G)\\n  [inst_3 : AddSubgroup.Normal N], AddSubgroup.Normal (AddSubgroup.topologicalClosure N)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The topological closure of a normal additive subgroup is normal.\"},\n {\"theorem\":\n  \"∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V]\\n  [inst_3 : FiniteDimensional K V] (S : Submodule K V), FiniteDimensional K { x // x ∈ S }\",\n  \"isProp\": true,\n  \"docString\":\n  \"A subspace of a finite-dimensional space is also finite-dimensional. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {E : Type u_2} [inst : OrderedRing 𝕜] [inst_1 : AddCommGroup E] [inst_2 : Module 𝕜 E]\\n  (Q : AffineSubspace 𝕜 E), Convex 𝕜 ↑Q\",\n  \"isProp\": true,\n  \"docString\": \"Affine subspaces are convex. \"},\n {\"theorem\":\n  \"∀ {G : Type u_1} {s : Set G} [inst : Group G], IsNormalSubgroup (Group.normalClosure s)\",\n  \"isProp\": true,\n  \"docString\": \"The normal closure of s is a normal subgroup. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : T5Space α] {p : α → Prop}, T5Space { x // p x }\",\n  \"isProp\": true,\n  \"docString\": \"A subspace of a `T₅` space is a `T₅` space. \"},\n {\"theorem\":\n  \"∀ {K : Type u_2} {V : Type u_1} [inst : Field K] [inst_1 : AddCommGroup V] [inst_2 : Module K V] {S : Set (ℙ K V)}\\n  {W : Projectivization.Subspace K V}, Projectivization.Subspace.span S ≤ W ↔ S ⊆ ↑W\",\n  \"isProp\": true,\n  \"docString\":\n  \"The span of a set of points is contained in a subspace if and only if the set of points is\\ncontained in the subspace. \"},\n {\"theorem\":\n  \"∀ {K : Type u_2} {V : Type u_1} [inst : Field K] [inst_1 : AddCommGroup V] [inst_2 : Module K V] (S T : Set (ℙ K V)),\\n  Projectivization.Subspace.span (S ∪ T) = Projectivization.Subspace.span S ⊔ Projectivization.Subspace.span T\",\n  \"isProp\": true,\n  \"docString\":\n  \"The supremum of two subspaces is equal to the span of their union. \"},\n {\"theorem\":\n  \"∀ {k : Type u_1} {V : Type u_2} {P : Type u_3} [inst : Ring k] [inst_1 : AddCommGroup V] [inst_2 : Module k V]\\n  [inst_3 : AddTorsor V P] {s1 s2 : AffineSubspace k P},\\n  AffineSubspace.direction s1 = AffineSubspace.direction s2 → Set.Nonempty (↑s1 ∩ ↑s2) → s1 = s2\",\n  \"isProp\": true,\n  \"docString\":\n  \"Two affine subspaces with the same direction and nonempty intersection are equal. \"},\n {\"theorem\":\n  \"∀ {𝕜₁ : Type u_1} {𝕜₂ : Type u_2} [inst : NontriviallyNormedField 𝕜₁] [inst_1 : NormedField 𝕜₂] {σ₁₂ : 𝕜₁ →+* 𝕜₂}\\n  {M₁ : Type u_3} {M₂ : Type u_4} [inst_2 : SeminormedAddCommGroup M₁] [inst_3 : AddCommGroup M₂]\\n  [inst_4 : NormedSpace 𝕜₁ M₁] [inst_5 : Module 𝕜₂ M₂] [inst_6 : UniformSpace M₂] [inst_7 : UniformAddGroup M₂]\\n  [inst_8 : ContinuousConstSMul 𝕜₂ M₂] [inst_9 : T2Space M₂] [inst_10 : CompleteSpace M₂],\\n  IsClosed {f | IsCompactOperator ↑f}\",\n  \"isProp\": true,\n  \"docString\":\n  \"The set of compact operators from a normed space to a complete topological vector space is\\nclosed. \"},\n {\"theorem\":\n  \"∀ {G : Type u_1} [inst : Group G] (s : Set G), IsSubgroup (Group.normalClosure s)\",\n  \"isProp\": true,\n  \"docString\": \"The normal closure of a set is a subgroup. \"},\n {\"theorem\":\n  \"∀ {ι : Type u_2} {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : NormalSpace X] {u : ι → Set X},\\n  (∀ (i : ι), IsOpen (u i)) →\\n    (∀ (x : X), Set.Finite {i | x ∈ u i}) →\\n      ⋃ (i : ι), u i = Set.univ →\\n        ∃ v, Set.iUnion v = Set.univ ∧ (∀ (i : ι), IsOpen (v i)) ∧ ∀ (i : ι), closure (v i) ⊆ u i\",\n  \"isProp\": true,\n  \"docString\":\n  \"Shrinking lemma. A point-finite open cover of a closed subset of a normal space can be \\\"shrunk\\\"\\nto a new open cover so that the closure of each new open set is contained in the corresponding\\noriginal open set. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\\n  (K₁ K₂ : Submodule 𝕜 E), K₁ᗮ ⊓ K₂ᗮ = (K₁ ⊔ K₂)ᗮ\",\n  \"isProp\": true,\n  \"docString\":\n  \"The inf of two orthogonal subspaces equals the subspace orthogonal\\nto the sup. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_2} {E : Type u_1} [inst : LinearOrderedField 𝕜] [inst_1 : AddCommGroup E] [inst_2 : Module 𝕜 E]\\n  [inst_3 : TopologicalSpace E] [inst_4 : TopologicalAddGroup E] [inst_5 : ContinuousConstSMul 𝕜 E] {s : Set E},\\n  Convex 𝕜 s → Convex 𝕜 (closure s)\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a topological vector space, the closure of a convex set is convex. \"}]\n", "prompt_cons": "/-- A finite-dimensional subspace is closed. -/\ntheorem ∀ {𝕜 : Type u} [inst : NontriviallyNormedField 𝕜] {E : Type v} [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : CompleteSpace 𝕜] (s : Submodule 𝕜 E)\n  [inst_4 : FiniteDimensional 𝕜 { x // x ∈ s }], IsClosed ↑s :=\n\n/-- The topological closure of a normal subgroup is normal. -/\ntheorem ∀ {G : Type u_1} [inst : TopologicalSpace G] [inst_1 : Group G] [inst_2 : TopologicalGroup G] (N : Subgroup G)\n  [inst_3 : Subgroup.Normal N], Subgroup.Normal (Subgroup.topologicalClosure N) :=\n\n/-- Two disjoint sets in a normal space admit disjoint neighbourhoods. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [self : NormalSpace α] (s t : Set α),\n  IsClosed s → IsClosed t → Disjoint s t → SeparatedNhds s t :=\n\n/-- The span of a subspace is the subspace. -/\ntheorem ∀ {K : Type u_1} {V : Type u_2} [inst : Field K] [inst_1 : AddCommGroup V] [inst_2 : Module K V]\n  (W : Projectivization.Subspace K V), Projectivization.Subspace.span ↑W = W :=\n\n/-- A nonempty open subset of a preirreducible subspace is dense in the subspace. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] {S U : Set α},\n  IsPreirreducible S → IsOpen U → Set.Nonempty (S ∩ U) → S ⊆ closure (S ∩ U) :=\n\n/-- Coercing a subspace to a set then taking the affine span produces the original subspace. -/\ntheorem ∀ {k : Type u_1} {V : Type u_2} {P : Type u_3} [inst : Ring k] [inst_1 : AddCommGroup V] [inst_2 : Module k V]\n  [S : AddTorsor V P] (s : AffineSubspace k P), affineSpan k ↑s = s :=\n\n/-- A subspace is dense iff its topological closure is the entire space. -/\ntheorem ∀ {R : Type u} {M : Type v} [inst : Semiring R] [inst_1 : TopologicalSpace M] [inst_2 : AddCommMonoid M]\n  [inst_3 : Module R M] [inst_4 : ContinuousConstSMul R M] [inst_5 : ContinuousAdd M] {s : Submodule R M},\n  Dense ↑s ↔ Submodule.topologicalClosure s = ⊤ :=\n\n/-- The topological closure of a normal additive subgroup is normal. -/\ntheorem ∀ {G : Type u_1} [inst : TopologicalSpace G] [inst_1 : AddGroup G] [inst_2 : TopologicalAddGroup G] (N : AddSubgroup G)\n  [inst_3 : AddSubgroup.Normal N], AddSubgroup.Normal (AddSubgroup.topologicalClosure N) :=\n\n/-- A subspace of a finite-dimensional space is also finite-dimensional. -/\ntheorem ∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V]\n  [inst_3 : FiniteDimensional K V] (S : Submodule K V), FiniteDimensional K { x // x ∈ S } :=\n\n/-- Affine subspaces are convex. -/\ntheorem ∀ {𝕜 : Type u_1} {E : Type u_2} [inst : OrderedRing 𝕜] [inst_1 : AddCommGroup E] [inst_2 : Module 𝕜 E]\n  (Q : AffineSubspace 𝕜 E), Convex 𝕜 ↑Q :=\n\n/-- The normal closure of s is a normal subgroup. -/\ntheorem ∀ {G : Type u_1} {s : Set G} [inst : Group G], IsNormalSubgroup (Group.normalClosure s) :=\n\n/-- A subspace of a `T₅` space is a `T₅` space. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : T5Space α] {p : α → Prop}, T5Space { x // p x } :=\n\n/-- The span of a set of points is contained in a subspace if and only if the set of points is\ncontained in the subspace. -/\ntheorem ∀ {K : Type u_2} {V : Type u_1} [inst : Field K] [inst_1 : AddCommGroup V] [inst_2 : Module K V] {S : Set (ℙ K V)}\n  {W : Projectivization.Subspace K V}, Projectivization.Subspace.span S ≤ W ↔ S ⊆ ↑W :=\n\n/-- The supremum of two subspaces is equal to the span of their union. -/\ntheorem ∀ {K : Type u_2} {V : Type u_1} [inst : Field K] [inst_1 : AddCommGroup V] [inst_2 : Module K V] (S T : Set (ℙ K V)),\n  Projectivization.Subspace.span (S ∪ T) = Projectivization.Subspace.span S ⊔ Projectivization.Subspace.span T :=\n\n/-- Two affine subspaces with the same direction and nonempty intersection are equal. -/\ntheorem ∀ {k : Type u_1} {V : Type u_2} {P : Type u_3} [inst : Ring k] [inst_1 : AddCommGroup V] [inst_2 : Module k V]\n  [inst_3 : AddTorsor V P] {s1 s2 : AffineSubspace k P},\n  AffineSubspace.direction s1 = AffineSubspace.direction s2 → Set.Nonempty (↑s1 ∩ ↑s2) → s1 = s2 :=\n\n/-- The set of compact operators from a normed space to a complete topological vector space is\nclosed. -/\ntheorem ∀ {𝕜₁ : Type u_1} {𝕜₂ : Type u_2} [inst : NontriviallyNormedField 𝕜₁] [inst_1 : NormedField 𝕜₂] {σ₁₂ : 𝕜₁ →+* 𝕜₂}\n  {M₁ : Type u_3} {M₂ : Type u_4} [inst_2 : SeminormedAddCommGroup M₁] [inst_3 : AddCommGroup M₂]\n  [inst_4 : NormedSpace 𝕜₁ M₁] [inst_5 : Module 𝕜₂ M₂] [inst_6 : UniformSpace M₂] [inst_7 : UniformAddGroup M₂]\n  [inst_8 : ContinuousConstSMul 𝕜₂ M₂] [inst_9 : T2Space M₂] [inst_10 : CompleteSpace M₂],\n  IsClosed {f | IsCompactOperator ↑f} :=\n\n/-- The normal closure of a set is a subgroup. -/\ntheorem ∀ {G : Type u_1} [inst : Group G] (s : Set G), IsSubgroup (Group.normalClosure s) :=\n\n/-- Shrinking lemma. A point-finite open cover of a closed subset of a normal space can be \"shrunk\"\nto a new open cover so that the closure of each new open set is contained in the corresponding\noriginal open set. -/\ntheorem ∀ {ι : Type u_2} {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : NormalSpace X] {u : ι → Set X},\n  (∀ (i : ι), IsOpen (u i)) →\n    (∀ (x : X), Set.Finite {i | x ∈ u i}) →\n      ⋃ (i : ι), u i = Set.univ →\n        ∃ v, Set.iUnion v = Set.univ ∧ (∀ (i : ι), IsOpen (v i)) ∧ ∀ (i : ι), closure (v i) ⊆ u i :=\n\n/-- The inf of two orthogonal subspaces equals the subspace orthogonal\nto the sup. -/\ntheorem ∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  (K₁ K₂ : Submodule 𝕜 E), K₁ᗮ ⊓ K₂ᗮ = (K₁ ⊔ K₂)ᗮ :=\n\n/-- In a topological vector space, the closure of a convex set is convex. -/\ntheorem ∀ {𝕜 : Type u_2} {E : Type u_1} [inst : LinearOrderedField 𝕜] [inst_1 : AddCommGroup E] [inst_2 : Module 𝕜 E]\n  [inst_3 : TopologicalSpace E] [inst_4 : TopologicalAddGroup E] [inst_5 : ContinuousConstSMul 𝕜 E] {s : Set E},\n  Convex 𝕜 s → Convex 𝕜 (closure s) :=\n\n/-- Show that a closed subspace of a normal space is normal. -/\ntheorem", "choices": ["∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : NormalSpace α] {s : Set α},\n  IsClosed s → NormalSpace {x // x ∈ s} ", "∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : NormalSpace α] {S : Set α},\n  IsClosed S → NormalSpace { x // x ∈ S } ", "∀ {α : Type u} [inst : TopologicalSpace α] [self : NormalSpace α] (S : Subspace α), IsClosed ↑S → NormalSpace ↑S ", "∀ {α : Type u} [inst : TopologicalSpace α] [self : NormalSpace α] (s : Set α),\n  IsClosed s → NormalSpace { x // x ∈ s } ", "∀ {α : Type u} [inst : TopologicalSpace α] [self : NormalSpace α] {s : Set α},\n  IsClosed s → NormalSpace { x // x ∈ s } ", "∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : NormalSpace α] (A : Set α),\n  IsClosed A → NormalSpace {x // x ∈ A} ", "∀ {α : Type u} [inst : TopologicalSpace α] [self : NormalSpace α] (s : Set α),\n  IsClosed s → NormalSpace { x // x ∈ s } ", "∀ {α : Type u} [inst : TopologicalSpace α] [self : NormalSpace α] (s : Set α),\n  IsClosed s → NormalSpace (Subspace α s) ", "∀ {α : Type u} [inst : TopologicalSpace α] [self : NormalSpace α] (s : Set α),\n  IsClosed s → NormalSpace { x // x ∈ s } ", "∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : NormalSpace α] {s : Submodule α},\n  IsClosed ↑s → NormalSpace { x // x ∈ s } "]}
{"docString": "Show that if `Π X_α` is regular, then so is `X_α`. Assume that each `X_α` is nonempty.", "prompts": "[{\"theorem\":\n  \"∀ {G : Type u_1} [inst : Group G] [inst_1 : TopologicalSpace G] [inst_2 : T2Space G] [inst_3 : TopologicalGroup G]\\n  [inst_4 : MeasurableSpace G] [inst_5 : BorelSpace G] [inst_6 : TopologicalSpace.SecondCountableTopology G]\\n  {μ : MeasureTheory.Measure G} [inst_7 : MeasureTheory.SigmaFinite μ]\\n  [inst : MeasureTheory.Measure.IsMulLeftInvariant μ] {K : Set G},\\n  IsCompact K → Set.Nonempty (interior K) → ↑↑μ K ≠ ⊤ → MeasureTheory.Measure.Regular μ\",\n  \"isProp\": true,\n  \"docString\":\n  \"To show that an invariant σ-finite measure is regular it is sufficient to show that it is finite\\non some compact set with non-empty interior. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {ι : Type u_1} [inst_1 : CompactSpace α] {f : ι → Set α},\\n  LocallyFinite f → Set.Finite {i | Set.Nonempty (f i)}\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `α` is a compact space, then a locally finite family of sets of `α` can have only finitely\\nmany nonempty elements. \"},\n {\"theorem\":\n  \"∀ {G : Type u_1} [inst : AddGroup G] [inst_1 : TopologicalSpace G] [inst_2 : T2Space G] [inst_3 : TopologicalAddGroup G]\\n  [inst_4 : MeasurableSpace G] [inst_5 : BorelSpace G] [inst_6 : TopologicalSpace.SecondCountableTopology G]\\n  {μ : MeasureTheory.Measure G} [inst_7 : MeasureTheory.SigmaFinite μ]\\n  [inst : MeasureTheory.Measure.IsAddLeftInvariant μ] {K : Set G},\\n  IsCompact K → Set.Nonempty (interior K) → ↑↑μ K ≠ ⊤ → MeasureTheory.Measure.Regular μ\",\n  \"isProp\": true,\n  \"docString\":\n  \"To show that an invariant σ-finite measure is regular it is sufficient to show that it is finite on\\nsome compact set with non-empty interior.\"},\n {\"theorem\": \"∀ {α : Type u_1} [inst : Countable α], Countable (Array α)\",\n  \"isProp\": true,\n  \"docString\": \"If `α` is countable, then so is `Array α`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : AddGroup α] [inst_2 : TopologicalAddGroup α],\\n  TopologicalAddGroup αᵃᵒᵖ\",\n  \"isProp\": true,\n  \"docString\": \"If addition is continuous in `α`, then it also is in `αᵃᵒᵖ`.\"},\n {\"theorem\": \"∀ {α : Type u_1} [inst : Countable α], Countable (Finset α)\",\n  \"isProp\": true,\n  \"docString\": \"If `α` is countable, then so is `Finset α`. \"},\n {\"theorem\": \"∀ {α : Type u_1} [inst : Countable α], Countable (Multiset α)\",\n  \"isProp\": true,\n  \"docString\": \"If `α` is countable, then so is `Multiset α`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : SeminormedAddCommGroup β] [inst_2 : Nonempty α]\\n  [inst_3 : One β] [inst_4 : NormOneClass β], NormOneClass (BoundedContinuousFunction α β)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `‖(1 : β)‖ = 1`, then `‖(1 : α →ᵇ β)‖ = 1` if `α` is nonempty. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : Mul α] [inst_2 : ContinuousMul α], ContinuousMul αᵐᵒᵖ\",\n  \"isProp\": true,\n  \"docString\":\n  \"If multiplication is continuous in `α`, then it also is in `αᵐᵒᵖ`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {p : Finset α → Prop} [inst : DecidableEq α] (s : Finset α),\\n  p ∅ → (∀ ⦃a : α⦄ {s : Finset α}, ¬a ∈ s → p s → p (insert a s)) → p s\",\n  \"isProp\": true,\n  \"docString\":\n  \"To prove a proposition about an arbitrary `Finset α`,\\nit suffices to prove it for the empty `Finset`,\\nand to show that if it holds for some `Finset α`,\\nthen it holds for the `Finset` obtained by inserting a new element.\\n\"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {p : (s : Finset α) → Finset.Nonempty s → Prop},\\n  (∀ (a : α), p {a} (_ : Finset.Nonempty {a})) →\\n    (∀ ⦃a : α⦄ (s : Finset α) (h : ¬a ∈ s) (hs : Finset.Nonempty s),\\n        p s hs → p (Finset.cons a s h) (_ : Finset.Nonempty (Finset.cons a s h))) →\\n      ∀ {s : Finset α} (hs : Finset.Nonempty s), p s hs\",\n  \"isProp\": true,\n  \"docString\":\n  \"To prove a proposition about a nonempty `s : Finset α`, it suffices to show it holds for all\\nsingletons and that if it holds for nonempty `t : Finset α`, then it also holds for the `Finset`\\nobtained by inserting an element in `t`. \"},\n {\"theorem\":\n  \"∀ {ι : Type u_2} {π : ι → Type u_3} [inst : (i : ι) → TopologicalSpace (π i)] {X : Type u_1} (f : (i : ι) → X → π i),\\n  Inducing fun x i => f i x\",\n  \"isProp\": true,\n  \"docString\":\n  \"Suppose `π i` is a family of topological spaces indexed by `i : ι`, and `X` is a type\\nendowed with a family of maps `f i : X → π i` for every `i : ι`, hence inducing a\\nmap `g : X → Π i, π i`. This lemma shows that infimum of the topologies on `X` induced by\\nthe `f i` as `i : ι` varies is simply the topology on `X` induced by `g : X → Π i, π i`\\nwhere `Π i, π i` is endowed with the usual product topology. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {β : Type u_1} {x : NonAssocSemiring α} {x_1 : NonAssocSemiring β},\\n  (α →+* β) → ∀ [inst : Nontrivial β], Nontrivial α\",\n  \"isProp\": true,\n  \"docString\":\n  \"If there is a homomorphism `f : α →+* β` and `β` is nontrivial, then `α` is nontrivial. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {G : Type u_2} [inst : Group G] [inst_1 : UniformSpace G] [inst_2 : UniformGroup G],\\n  UniformGroup (UniformFun α G)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `G` is a uniform group, then `α →ᵤ G` is a uniform group as well. \"},\n {\"theorem\": \"∀ {α : Sort u} {p : Prop}, Nonempty α → (α → p) → p\",\n  \"isProp\": true,\n  \"docString\":\n  \"The elimination principle for `Nonempty α`. If `Nonempty α`, and we can\\nprove `p` given any element `x : α`, then `p` holds. Note that it is essential\\nthat `p` is a `Prop` here; the version with `p` being a `Sort u` is equivalent\\nto `Classical.choice`.\\n\"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {G : Type u_2} [inst : Group G] {𝔖 : Set (Set α)} [inst_1 : UniformSpace G] [inst_2 : UniformGroup G],\\n  UniformGroup (UniformOnFun α G 𝔖)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `𝔖 : Set (Set α)`. If `G` is a uniform group, then `α →ᵤ[𝔖] G` is a uniform group as\\nwell. \"},\n {\"theorem\":\n  \"∀ (α : Type u_1) (β : Type u_2) [inst : UniformSpace β] (𝔖 : Set (Set α)),\\n  Set.Nonempty 𝔖 →\\n    DirectedOn (fun x x_1 => x ⊆ x_1) 𝔖 →\\n      Filter.HasBasis (uniformity (UniformOnFun α β 𝔖)) (fun SV => SV.fst ∈ 𝔖 ∧ SV.snd ∈ uniformity β) fun SV =>\\n        UniformOnFun.gen 𝔖 SV.fst SV.snd\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `𝔖 : Set (Set α)` is nonempty and directed, then the uniformity of `α →ᵤ[𝔖] β` admits the\\nfamily `{(f, g) | ∀ x ∈ S, (f x, g x) ∈ V}` for `S ∈ 𝔖` and `V ∈ 𝓤 β` as a filter basis. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {c : Set (Set α)}, (∀ (a : α), ∃! b x, a ∈ b) → Set.PairwiseDisjoint c id\",\n  \"isProp\": true,\n  \"docString\":\n  \"Distinct elements of a set of sets partitioning α are disjoint. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {β : Type u_3} {m : MeasurableSpace α} {mβ : MeasurableSpace β} {ι : Type u_1} [inst : Countable ι]\\n  [inst : Nonempty ι] (t : ι → Set α),\\n  (∀ (n : ι), MeasurableSet (t n)) →\\n    ∀ (g : ι → α → β),\\n      (∀ (n : ι), Measurable (g n)) →\\n        (Pairwise fun i j => Set.EqOn (g i) (g j) (t i ∩ t j)) → ∃ f, Measurable f ∧ ∀ (n : ι), Set.EqOn f (g n) (t n)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `t i` be a nonempty countable family of measurable sets in `α`. Let `g i : α → β` be a\\nfamily of measurable functions such that `g i` agrees with `g j` on `t i ∩ t j`. Then there exists\\na measurable function `f : α → β` that agrees with each `g i` on `t i`.\\n\\nWe only need the assumption `[Nonempty ι]` to prove `[Nonempty (α → β)]`. \"},\n {\"theorem\":\n  \"∀ {ι : Type u_1} {π : ι → Type u_2} (i : ι) [inst : Infinite (π i)] [inst : ∀ (i : ι), Nonempty (π i)],\\n  Infinite ((i : ι) → π i)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If at least one `π i` is infinite and the rest nonempty, the pi type of all `π` is infinite. \"}]\n", "prompt_cons": "/-- To show that an invariant σ-finite measure is regular it is sufficient to show that it is finite\non some compact set with non-empty interior. -/\ntheorem ∀ {G : Type u_1} [inst : Group G] [inst_1 : TopologicalSpace G] [inst_2 : T2Space G] [inst_3 : TopologicalGroup G]\n  [inst_4 : MeasurableSpace G] [inst_5 : BorelSpace G] [inst_6 : TopologicalSpace.SecondCountableTopology G]\n  {μ : MeasureTheory.Measure G} [inst_7 : MeasureTheory.SigmaFinite μ]\n  [inst : MeasureTheory.Measure.IsMulLeftInvariant μ] {K : Set G},\n  IsCompact K → Set.Nonempty (interior K) → ↑↑μ K ≠ ⊤ → MeasureTheory.Measure.Regular μ :=\n\n/-- If `α` is a compact space, then a locally finite family of sets of `α` can have only finitely\nmany nonempty elements. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] {ι : Type u_1} [inst_1 : CompactSpace α] {f : ι → Set α},\n  LocallyFinite f → Set.Finite {i | Set.Nonempty (f i)} :=\n\n/-- To show that an invariant σ-finite measure is regular it is sufficient to show that it is finite on\nsome compact set with non-empty interior. -/\ntheorem ∀ {G : Type u_1} [inst : AddGroup G] [inst_1 : TopologicalSpace G] [inst_2 : T2Space G] [inst_3 : TopologicalAddGroup G]\n  [inst_4 : MeasurableSpace G] [inst_5 : BorelSpace G] [inst_6 : TopologicalSpace.SecondCountableTopology G]\n  {μ : MeasureTheory.Measure G} [inst_7 : MeasureTheory.SigmaFinite μ]\n  [inst : MeasureTheory.Measure.IsAddLeftInvariant μ] {K : Set G},\n  IsCompact K → Set.Nonempty (interior K) → ↑↑μ K ≠ ⊤ → MeasureTheory.Measure.Regular μ :=\n\n/-- If `α` is countable, then so is `Array α`. -/\ntheorem ∀ {α : Type u_1} [inst : Countable α], Countable (Array α) :=\n\n/-- If addition is continuous in `α`, then it also is in `αᵃᵒᵖ`. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : AddGroup α] [inst_2 : TopologicalAddGroup α],\n  TopologicalAddGroup αᵃᵒᵖ :=\n\n/-- If `α` is countable, then so is `Finset α`. -/\ntheorem ∀ {α : Type u_1} [inst : Countable α], Countable (Finset α) :=\n\n/-- If `α` is countable, then so is `Multiset α`. -/\ntheorem ∀ {α : Type u_1} [inst : Countable α], Countable (Multiset α) :=\n\n/-- If `‖(1 : β)‖ = 1`, then `‖(1 : α →ᵇ β)‖ = 1` if `α` is nonempty. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : SeminormedAddCommGroup β] [inst_2 : Nonempty α]\n  [inst_3 : One β] [inst_4 : NormOneClass β], NormOneClass (BoundedContinuousFunction α β) :=\n\n/-- If multiplication is continuous in `α`, then it also is in `αᵐᵒᵖ`. -/\ntheorem ∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : Mul α] [inst_2 : ContinuousMul α], ContinuousMul αᵐᵒᵖ :=\n\n/-- To prove a proposition about an arbitrary `Finset α`,\nit suffices to prove it for the empty `Finset`,\nand to show that if it holds for some `Finset α`,\nthen it holds for the `Finset` obtained by inserting a new element. -/\ntheorem ∀ {α : Type u_1} {p : Finset α → Prop} [inst : DecidableEq α] (s : Finset α),\n  p ∅ → (∀ ⦃a : α⦄ {s : Finset α}, ¬a ∈ s → p s → p (insert a s)) → p s :=\n\n/-- To prove a proposition about a nonempty `s : Finset α`, it suffices to show it holds for all\nsingletons and that if it holds for nonempty `t : Finset α`, then it also holds for the `Finset`\nobtained by inserting an element in `t`. -/\ntheorem ∀ {α : Type u_1} {p : (s : Finset α) → Finset.Nonempty s → Prop},\n  (∀ (a : α), p {a} (_ : Finset.Nonempty {a})) →\n    (∀ ⦃a : α⦄ (s : Finset α) (h : ¬a ∈ s) (hs : Finset.Nonempty s),\n        p s hs → p (Finset.cons a s h) (_ : Finset.Nonempty (Finset.cons a s h))) →\n      ∀ {s : Finset α} (hs : Finset.Nonempty s), p s hs :=\n\n/-- Suppose `π i` is a family of topological spaces indexed by `i : ι`, and `X` is a type\nendowed with a family of maps `f i : X → π i` for every `i : ι`, hence inducing a\nmap `g : X → Π i, π i`. This lemma shows that infimum of the topologies on `X` induced by\nthe `f i` as `i : ι` varies is simply the topology on `X` induced by `g : X → Π i, π i`\nwhere `Π i, π i` is endowed with the usual product topology. -/\ntheorem ∀ {ι : Type u_2} {π : ι → Type u_3} [inst : (i : ι) → TopologicalSpace (π i)] {X : Type u_1} (f : (i : ι) → X → π i),\n  Inducing fun x i => f i x :=\n\n/-- If there is a homomorphism `f : α →+* β` and `β` is nontrivial, then `α` is nontrivial. -/\ntheorem ∀ {α : Type u_2} {β : Type u_1} {x : NonAssocSemiring α} {x_1 : NonAssocSemiring β},\n  (α →+* β) → ∀ [inst : Nontrivial β], Nontrivial α :=\n\n/-- If `G` is a uniform group, then `α →ᵤ G` is a uniform group as well. -/\ntheorem ∀ {α : Type u_1} {G : Type u_2} [inst : Group G] [inst_1 : UniformSpace G] [inst_2 : UniformGroup G],\n  UniformGroup (UniformFun α G) :=\n\n/-- The elimination principle for `Nonempty α`. If `Nonempty α`, and we can\nprove `p` given any element `x : α`, then `p` holds. Note that it is essential\nthat `p` is a `Prop` here; the version with `p` being a `Sort u` is equivalent\nto `Classical.choice`. -/\ntheorem ∀ {α : Sort u} {p : Prop}, Nonempty α → (α → p) → p :=\n\n/-- Let `𝔖 : Set (Set α)`. If `G` is a uniform group, then `α →ᵤ[𝔖] G` is a uniform group as\nwell. -/\ntheorem ∀ {α : Type u_1} {G : Type u_2} [inst : Group G] {𝔖 : Set (Set α)} [inst_1 : UniformSpace G] [inst_2 : UniformGroup G],\n  UniformGroup (UniformOnFun α G 𝔖) :=\n\n/-- If `𝔖 : Set (Set α)` is nonempty and directed, then the uniformity of `α →ᵤ[𝔖] β` admits the\nfamily `{(f, g) | ∀ x ∈ S, (f x, g x) ∈ V}` for `S ∈ 𝔖` and `V ∈ 𝓤 β` as a filter basis. -/\ntheorem ∀ (α : Type u_1) (β : Type u_2) [inst : UniformSpace β] (𝔖 : Set (Set α)),\n  Set.Nonempty 𝔖 →\n    DirectedOn (fun x x_1 => x ⊆ x_1) 𝔖 →\n      Filter.HasBasis (uniformity (UniformOnFun α β 𝔖)) (fun SV => SV.fst ∈ 𝔖 ∧ SV.snd ∈ uniformity β) fun SV =>\n        UniformOnFun.gen 𝔖 SV.fst SV.snd :=\n\n/-- Distinct elements of a set of sets partitioning α are disjoint. -/\ntheorem ∀ {α : Type u_1} {c : Set (Set α)}, (∀ (a : α), ∃! b x, a ∈ b) → Set.PairwiseDisjoint c id :=\n\n/-- Let `t i` be a nonempty countable family of measurable sets in `α`. Let `g i : α → β` be a\nfamily of measurable functions such that `g i` agrees with `g j` on `t i ∩ t j`. Then there exists\na measurable function `f : α → β` that agrees with each `g i` on `t i`.\n\nWe only need the assumption `[Nonempty ι]` to prove `[Nonempty (α → β)]`. -/\ntheorem ∀ {α : Type u_2} {β : Type u_3} {m : MeasurableSpace α} {mβ : MeasurableSpace β} {ι : Type u_1} [inst : Countable ι]\n  [inst : Nonempty ι] (t : ι → Set α),\n  (∀ (n : ι), MeasurableSet (t n)) →\n    ∀ (g : ι → α → β),\n      (∀ (n : ι), Measurable (g n)) →\n        (Pairwise fun i j => Set.EqOn (g i) (g j) (t i ∩ t j)) → ∃ f, Measurable f ∧ ∀ (n : ι), Set.EqOn f (g n) (t n) :=\n\n/-- If at least one `π i` is infinite and the rest nonempty, the pi type of all `π` is infinite. -/\ntheorem ∀ {ι : Type u_1} {π : ι → Type u_2} (i : ι) [inst : Infinite (π i)] [inst : ∀ (i : ι), Nonempty (π i)],\n  Infinite ((i : ι) → π i) :=\n\n/-- Show that if `Π X_α` is regular, then so is `X_α`. Assume that each `X_α` is nonempty. -/\ntheorem", "choices": ["forall {ι : Type u_1} {X : ι → Type u_2} [inst : (i : ι) → TopologicalSpace (X i)]\n  [inst : (i : ι) → Nonempty (X i)] [inst_1 : (i : ι) → T2Space (X i)] [inst_2 : (i : ι) → RegularSpace (X i)],\n  RegularSpace ((i : ι) → X i) ", "∀ {ι : Type u_1} {X : ι → Type u_2} [inst : (i : ι) → TopologicalSpace (X i)] [inst : (i : ι) → Nonempty (X i)] [inst : (i : ι) → RegularSpace (X i)],\n  RegularSpace ((i : ι) → X i) ", "∀ {ι : Type u_1} {X : ι → Type u_2} [inst : (i : ι) → TopologicalSpace (X i)] [inst_1 : (i : ι) → Nonempty (X i)]\n  [inst_2 : (i : ι) → TopologicalSpace.RegularSpace (X i)],\n  TopologicalSpace.RegularSpace ((i : ι) → X i) ", "∀ {ι : Type u_1} {X : ι → Type u_2} [inst : (i : ι) → TopologicalSpace (X i)] [inst_1 : ∀ (i : ι), Nonempty (X i)]\n  (h : ∀ (i : ι), TopologicalSpace.RegularSpace (X i)),\n  TopologicalSpace.RegularSpace ((i : ι) → X i) ", "∀ {ι : Type u_1} {X : ι → Type u_2} [inst : ∀ (i : ι), TopologicalSpace (X i)] [inst : ∀ (i : ι), Nonempty (X i)]\n  [inst_1 : ∀ (i : ι), T2Space (X i)] [inst_2 : TopologicalSpace.SecondCountableTopology (Π i, X i)],\n  RegularSpace (Π i, X i) → ∀ (i : ι), RegularSpace (X i) ", "forall {ι : Type u_1} {X : ι → Type u_2} [inst : (α : ι) → TopologicalSpace (X α)] [inst : ∀ (α : ι), Nonempty (X α)]\n  (h : ∀ α : ι, MeasureTheory.Measure.Regular (MeasureTheory.Measure.pi (λ _, _inst_1 α))),\n  ∀ α : ι, MeasureTheory.Measure.Regular (MeasureTheory.Measure.pi (λ _, _inst_1 α)) ", "∀ {α : Type u_1} {X_α : α → Type u_2} [inst : (a : α) → TopologicalSpace (X_α a)] [inst_1 : (∀ (a : α), Nonempty (X_α a))]\n  [inst_2 : RegularSpace ((a : α) → X_α a)], (a : α) → RegularSpace (X_α a) ", "∀ {ι : Type u_1} {X : ι → Type u_2} [inst : ∀ (i : ι), TopologicalSpace (X i)] [inst_1 : ∀ (i : ι), T2Space (X i)]\n  [inst_2 : Nonempty ι] [inst_3 : ∀ (i : ι), Nonempty (X i)] [inst_4 : RegularSpace ((i : ι) → X i)],\n  ∀ (i : ι), RegularSpace (X i) ", "∀ {α : Type u_1} {ι : Type u_2} [inst : (α : ι) → TopologicalSpace (α α)] [inst_1 : ∀ (α : ι), Nonempty (α α)]\n  [inst_2 : ∀ (α : ι), RegularSpace (α α)], RegularSpace ((α : ι) → α α) ", "forall {ι : Type u_1} {X : ι → Type u_2} [inst : (i : ι) → TopologicalSpace (X i)]\n  [inst : (i : ι) → Nonempty (X i)] [inst_1 : RegularSpace ((i : ι) → X i)],\n  forall (i : ι), RegularSpace (X i) "]}
{"docString": "Show that every locally compact Hausdorff space is regular.", "prompts": "[{\"theorem\":\n  \"∀ {G : Type w} [inst : TopologicalSpace G] (μ : MeasureTheory.Content G) [inst_1 : T2Space G] [S : MeasurableSpace G]\\n  [inst_2 : BorelSpace G] [inst_3 : LocallyCompactSpace G],\\n  MeasureTheory.Measure.Regular (MeasureTheory.Content.measure μ)\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a locally compact space, any measure constructed from a content is regular. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : LocallyCompactSpace X] [inst_2 : T2Space X],\\n  NormalSpace (OnePoint X)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The one point compactification of a locally compact Hausdorff space is a normal (hence,\\nHausdorff and regular) topological space. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : T2Space α],\\n  (∀ (x : α), ∃ s, s ∈ nhds x ∧ IsCompact s) → LocallyCompactSpace α\",\n  \"isProp\": true,\n  \"docString\":\n  \"If every points of a Hausdorff space admits a compact neighborhood, then this space is locally\\ncompact. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : EMetricSpace X] [inst_1 : SigmaCompactSpace X] [inst_2 : MeasurableSpace X]\\n  [inst_3 : BorelSpace X] (μ : MeasureTheory.Measure X) [inst_4 : MeasureTheory.IsLocallyFiniteMeasure μ],\\n  MeasureTheory.Measure.Regular μ\",\n  \"isProp\": true,\n  \"docString\":\n  \"Any locally finite measure on a `σ`-compact (e)metric space is regular. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] (x : α), ∃ K, IsCompact K ∧ K ∈ nhds x\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a locally compact space every point has a compact neighborhood. \"},\n {\"theorem\":\n  \"∀ {H : Type u_1} [inst : TopologicalSpace H] [inst_1 : LocallyCompactSpace H] [inst_2 : T2Space H]\\n  [inst_3 : TotallyDisconnectedSpace H], TopologicalSpace.IsTopologicalBasis {s | IsClopen s}\",\n  \"isProp\": true,\n  \"docString\":\n  \"A locally compact Hausdorff totally disconnected space has a basis with clopen elements. \"},\n {\"theorem\":\n  \"∀ {X Y : CompHaus} (f : X ⟶ Y), Function.Bijective ↑f → CategoryTheory.IsIso f\",\n  \"isProp\": true,\n  \"docString\":\n  \"Any continuous bijection of compact Hausdorff spaces is an isomorphism. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] [inst_2 : Nonempty α],\\n  Nonempty (TopologicalSpace.PositiveCompacts α)\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a nonempty locally compact space, there exists a compact set with nonempty interior. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] [self : LocallyCompactSpace α] (x : α) (n : Set α),\\n  n ∈ nhds x → ∃ s, s ∈ nhds x ∧ s ⊆ n ∧ IsCompact s\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a locally compact space,\\nevery neighbourhood of every point contains a compact neighbourhood of that same point. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] {K : Set α},\\n  IsCompact K → ∃ K', IsCompact K' ∧ K ⊆ interior K'\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a locally compact space, every compact set is contained in the interior of a compact set. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] [inst_2 : CompactSpace α]\\n  [inst_3 : T2Space β] {f : α → β}, Continuous f → IsClosedMap f\",\n  \"isProp\": true,\n  \"docString\":\n  \"A continuous map from a compact space to a Hausdorff space is a closed map. \"},\n {\"theorem\": \"∀ {X Y : CompHaus} (f : X ⟶ Y), IsClosedMap ↑f\",\n  \"isProp\": true,\n  \"docString\":\n  \"Any continuous function on compact Hausdorff spaces is a closed map. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : T2Space α] [inst_2 : LocallyCompactSpace α], BaireSpace α\",\n  \"isProp\": true,\n  \"docString\":\n  \"The second theorem states that locally compact spaces are Baire. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : Finite α], CompactSpace α\",\n  \"isProp\": true,\n  \"docString\": \"Finite topological spaces are compact. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] [inst_2 : CompactSpace α]\\n  [inst_3 : T2Space β] {f : α → β}, Function.Surjective f → Continuous f → QuotientMap f\",\n  \"isProp\": true,\n  \"docString\":\n  \"A continuous surjective map from a compact space to a Hausdorff space is a quotient map. \"},\n {\"theorem\":\n  \"∀ {X : Type v} [inst : TopologicalSpace X] [self : ParacompactSpace X] (α : Type v) (s : α → Set X),\\n  (∀ (a : α), IsOpen (s a)) → ⋃ (a : α), s a = Set.univ → ∃ β t x x, LocallyFinite t ∧ ∀ (b : β), ∃ a, t b ⊆ s a\",\n  \"isProp\": true,\n  \"docString\":\n  \"Every open cover of a paracompact space assumes a locally finite refinement. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : T2Space α] [inst_2 : CompactSpace α],\\n  TotallyDisconnectedSpace α ↔ TotallySeparatedSpace α\",\n  \"isProp\": true,\n  \"docString\":\n  \"A compact Hausdorff space is totally disconnected if and only if it is totally separated, this\\nis also true for locally compact spaces. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] [inst_2 : T2Space α] {K : Set α},\\n  IsCompact K → ∃ V, IsOpen V ∧ K ⊆ V ∧ IsCompact (closure V)\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a locally compact T₂ space, every compact set has an open neighborhood with compact closure.\\n\"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [self : T2Space α] (x y : α),\\n  x ≠ y → ∃ u v, IsOpen u ∧ IsOpen v ∧ x ∈ u ∧ y ∈ v ∧ Disjoint u v\",\n  \"isProp\": true,\n  \"docString\":\n  \"Every two points in a Hausdorff space admit disjoint open neighbourhoods. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] [inst_2 : T2Space α] (x : α),\\n  ∃ U, IsOpen U ∧ x ∈ U ∧ IsCompact (closure U)\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a locally compact T₂ space, every point has an open neighborhood with compact closure \"}]\n", "prompt_cons": "/-- In a locally compact space, any measure constructed from a content is regular. -/\ntheorem ∀ {G : Type w} [inst : TopologicalSpace G] (μ : MeasureTheory.Content G) [inst_1 : T2Space G] [S : MeasurableSpace G]\n  [inst_2 : BorelSpace G] [inst_3 : LocallyCompactSpace G],\n  MeasureTheory.Measure.Regular (MeasureTheory.Content.measure μ) :=\n\n/-- The one point compactification of a locally compact Hausdorff space is a normal (hence,\nHausdorff and regular) topological space. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : LocallyCompactSpace X] [inst_2 : T2Space X],\n  NormalSpace (OnePoint X) :=\n\n/-- If every points of a Hausdorff space admits a compact neighborhood, then this space is locally\ncompact. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : T2Space α],\n  (∀ (x : α), ∃ s, s ∈ nhds x ∧ IsCompact s) → LocallyCompactSpace α :=\n\n/-- Any locally finite measure on a `σ`-compact (e)metric space is regular. -/\ntheorem ∀ {X : Type u_1} [inst : EMetricSpace X] [inst_1 : SigmaCompactSpace X] [inst_2 : MeasurableSpace X]\n  [inst_3 : BorelSpace X] (μ : MeasureTheory.Measure X) [inst_4 : MeasureTheory.IsLocallyFiniteMeasure μ],\n  MeasureTheory.Measure.Regular μ :=\n\n/-- In a locally compact space every point has a compact neighborhood. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] (x : α), ∃ K, IsCompact K ∧ K ∈ nhds x :=\n\n/-- A locally compact Hausdorff totally disconnected space has a basis with clopen elements. -/\ntheorem ∀ {H : Type u_1} [inst : TopologicalSpace H] [inst_1 : LocallyCompactSpace H] [inst_2 : T2Space H]\n  [inst_3 : TotallyDisconnectedSpace H], TopologicalSpace.IsTopologicalBasis {s | IsClopen s} :=\n\n/-- Any continuous bijection of compact Hausdorff spaces is an isomorphism. -/\ntheorem ∀ {X Y : CompHaus} (f : X ⟶ Y), Function.Bijective ↑f → CategoryTheory.IsIso f :=\n\n/-- In a nonempty locally compact space, there exists a compact set with nonempty interior. -/\ntheorem ∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] [inst_2 : Nonempty α],\n  Nonempty (TopologicalSpace.PositiveCompacts α) :=\n\n/-- In a locally compact space,\nevery neighbourhood of every point contains a compact neighbourhood of that same point. -/\ntheorem ∀ {α : Type u_1} [inst : TopologicalSpace α] [self : LocallyCompactSpace α] (x : α) (n : Set α),\n  n ∈ nhds x → ∃ s, s ∈ nhds x ∧ s ⊆ n ∧ IsCompact s :=\n\n/-- In a locally compact space, every compact set is contained in the interior of a compact set. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] {K : Set α},\n  IsCompact K → ∃ K', IsCompact K' ∧ K ⊆ interior K' :=\n\n/-- A continuous map from a compact space to a Hausdorff space is a closed map. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] [inst_2 : CompactSpace α]\n  [inst_3 : T2Space β] {f : α → β}, Continuous f → IsClosedMap f :=\n\n/-- Any continuous function on compact Hausdorff spaces is a closed map. -/\ntheorem ∀ {X Y : CompHaus} (f : X ⟶ Y), IsClosedMap ↑f :=\n\n/-- The second theorem states that locally compact spaces are Baire. -/\ntheorem ∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : T2Space α] [inst_2 : LocallyCompactSpace α], BaireSpace α :=\n\n/-- Finite topological spaces are compact. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : Finite α], CompactSpace α :=\n\n/-- A continuous surjective map from a compact space to a Hausdorff space is a quotient map. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] [inst_2 : CompactSpace α]\n  [inst_3 : T2Space β] {f : α → β}, Function.Surjective f → Continuous f → QuotientMap f :=\n\n/-- Every open cover of a paracompact space assumes a locally finite refinement. -/\ntheorem ∀ {X : Type v} [inst : TopologicalSpace X] [self : ParacompactSpace X] (α : Type v) (s : α → Set X),\n  (∀ (a : α), IsOpen (s a)) → ⋃ (a : α), s a = Set.univ → ∃ β t x x, LocallyFinite t ∧ ∀ (b : β), ∃ a, t b ⊆ s a :=\n\n/-- A compact Hausdorff space is totally disconnected if and only if it is totally separated, this\nis also true for locally compact spaces. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : T2Space α] [inst_2 : CompactSpace α],\n  TotallyDisconnectedSpace α ↔ TotallySeparatedSpace α :=\n\n/-- In a locally compact T₂ space, every compact set has an open neighborhood with compact closure. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] [inst_2 : T2Space α] {K : Set α},\n  IsCompact K → ∃ V, IsOpen V ∧ K ⊆ V ∧ IsCompact (closure V) :=\n\n/-- Every two points in a Hausdorff space admit disjoint open neighbourhoods. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [self : T2Space α] (x y : α),\n  x ≠ y → ∃ u v, IsOpen u ∧ IsOpen v ∧ x ∈ u ∧ y ∈ v ∧ Disjoint u v :=\n\n/-- In a locally compact T₂ space, every point has an open neighborhood with compact closure -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] [inst_2 : T2Space α] (x : α),\n  ∃ U, IsOpen U ∧ x ∈ U ∧ IsCompact (closure U) :=\n\n/-- Show that every locally compact Hausdorff space is regular. -/\ntheorem", "choices": ["∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] [inst_2 : T2Space α], RegularSpace α ", "∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] [inst_2 : T2Space α],\n  RegularSpace α ", "∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] [inst_2 : T2Space α],\n  RegularSpace α ", "∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] [inst_2 : T2Space α], RegularSpace α ", "∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] [inst_2 : T2Space α], RegularSpace α ", "∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] [inst_2 : T2Space α],\n  RegularSpace α ", "∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] [inst_2 : T2Space α], RegularSpace α ", "∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : T2Space α] [inst_2 : LocallyCompactSpace α], RegularSpace α ", "∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] [inst_2 : T2Space α],\n  RegularSpace α ", "∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] [inst_2 : T2Space α],\n  RegularSpace α "]}
{"docString": "Let `X` be completely regular, let `A` and `B` be disjoint closed subsets of `X`. Show that if `A` is compact, there is a continuous function `f: X → [0, 1]` such that `f(A) = {0}` and `f(B) = {1}`.", "prompts": "[{\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] (Λ : BoundedContinuousFunction X NNReal →ₗ[NNReal] NNReal)\\n  (K : TopologicalSpace.Compacts X), Set.Nonempty (↑Λ '' {f | ∀ (x : X), x ∈ K → 1 ≤ ↑f x})\",\n  \"isProp\": true,\n  \"docString\":\n  \"For any compact subset `K ⊆ X`, there exist some bounded continuous nonnegative\\nfunctions f on X such that `f ≥ 1` on K. \"},\n {\"theorem\":\n  \"∀ {E : Type uE} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] [inst_2 : FiniteDimensional ℝ E] {H : Type uH}\\n  [inst_3 : TopologicalSpace H] (I : ModelWithCorners ℝ E H) {M : Type uM} [inst_4 : TopologicalSpace M]\\n  [inst_5 : ChartedSpace H M] [inst_6 : SmoothManifoldWithCorners I M] [inst_7 : T2Space M]\\n  [inst_8 : SigmaCompactSpace M] {s t : Set M},\\n  IsClosed s → IsClosed t → Disjoint s t → ∃ f, Set.EqOn (↑f) 0 s ∧ Set.EqOn (↑f) 1 t ∧ ∀ (x : M), ↑f x ∈ Set.Icc 0 1\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given two disjoint closed sets in a Hausdorff σ-compact finite dimensional manifold, there\\nexists an infinitely smooth function that is equal to `0` on one of them and is equal to one on the\\nother. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {β : Type u_2} [inst : LinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderClosedTopology α]\\n  [inst_3 : TopologicalSpace β] [inst_4 : Nonempty α] {f : β → α} {K : Set β},\\n  IsCompact K → ContinuousOn f K → BddBelow (f '' K)\",\n  \"isProp\": true,\n  \"docString\": \"A continuous function is bounded below on a compact set. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : NormalSpace X] {s t : Set X},\\n  IsClosed s → IsClosed t → Disjoint s t → ∃ f, Set.EqOn (↑f) 0 s ∧ Set.EqOn (↑f) 1 t ∧ ∀ (x : X), ↑f x ∈ Set.Icc 0 1\",\n  \"isProp\": true,\n  \"docString\":\n  \"Urysohn's lemma: if `s` and `t` are two disjoint closed sets in a normal topological space `X`,\\nthen there exists a continuous function `f : X → ℝ` such that\\n\\n* `f` equals zero on `s`;\\n* `f` equals one on `t`;\\n* `0 ≤ f x ≤ 1` for all `x`.\\n\"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {β : Type u_2} [inst : LinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderClosedTopology α]\\n  [inst_3 : TopologicalSpace β] [inst_4 : Nonempty α] {f : β → α} {K : Set β},\\n  IsCompact K → ContinuousOn f K → BddAbove (f '' K)\",\n  \"isProp\": true,\n  \"docString\": \"A continuous function is bounded above on a compact set. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] {m : MeasurableSpace X} [inst_1 : TopologicalSpace Y]\\n  [inst_2 : T2Space Y] {μ : MeasureTheory.Measure X} [inst_3 : MeasureTheory.Measure.IsOpenPosMeasure μ] {U : Set X}\\n  {f g : X → Y},\\n  f =ᶠ[MeasureTheory.Measure.ae (MeasureTheory.Measure.restrict μ U)] g →\\n    IsOpen U → ContinuousOn f U → ContinuousOn g U → Set.EqOn f g U\",\n  \"isProp\": true,\n  \"docString\":\n  \"If two functions are a.e. equal on an open set and are continuous on this set, then they are\\nequal on this set. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : UniformSpace β] {f : α → β} {s : Set α} [inst_1 : TopologicalSpace α],\\n  (∀ (u : Set (β × β)), u ∈ uniformity β → ∃ F, ContinuousOn F s ∧ ∀ (y : α), y ∈ s → (f y, F y) ∈ u) → ContinuousOn f s\",\n  \"isProp\": true,\n  \"docString\":\n  \"A function which can be uniformly approximated by functions which are continuous on a set\\nis continuous on this set. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} {E : Type u_2} [inst : MeasurableSpace X] [inst_1 : TopologicalSpace X] [inst_2 : NormedAddCommGroup E]\\n  {f : X → E} {μ : MeasureTheory.Measure X} [inst_3 : OpensMeasurableSpace X]\\n  [inst_4 : MeasureTheory.IsLocallyFiniteMeasure μ] {K : Set X} [inst_5 : TopologicalSpace.MetrizableSpace X],\\n  IsCompact K → ContinuousOn f K → MeasureTheory.IntegrableOn f K\",\n  \"isProp\": true,\n  \"docString\":\n  \"A function `f` continuous on a compact set `K` is integrable on this set with respect to any\\nlocally finite measure. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : UniformSpace β] {f : α → β} {s : Set α} [inst_1 : TopologicalSpace α],\\n  (∀ (x : α),\\n      x ∈ s →\\n        ∀ (u : Set (β × β)),\\n          u ∈ uniformity β →\\n            ∃ t, t ∈ nhdsWithin x s ∧ ∃ F, ContinuousWithinAt F s x ∧ ∀ (y : α), y ∈ t → (f y, F y) ∈ u) →\\n    ContinuousOn f s\",\n  \"isProp\": true,\n  \"docString\":\n  \"A function which can be locally uniformly approximated by functions which are continuous\\non a set is continuous on this set. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] (S : DiscreteQuotient X) [inst_1 : CompactSpace X],\\n  Finite (Quotient S.toSetoid)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `X` is a compact space, then any discrete quotient of `X` is finite. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : Preorder α] [t : OrderClosedTopology α]\\n  [inst_2 : TopologicalSpace β] {f g : β → α} {s : Set β},\\n  IsClosed s → ContinuousOn f s → ContinuousOn g s → IsClosed {x | x ∈ s ∧ f x ≤ g x}\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `s` is a closed set and two functions `f` and `g` are continuous on `s`,\\nthen the set `{x ∈ s | f x ≤ g x}` is a closed set. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {β : Type u_2} [inst : LinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderClosedTopology α]\\n  [inst_3 : TopologicalSpace β] [inst_4 : Zero α] {f : β → α},\\n  Continuous f → HasCompactSupport f → BddBelow (Set.range f)\",\n  \"isProp\": true,\n  \"docString\": \"A continuous function with compact support is bounded below. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : PseudoMetricSpace β]\\n  {f g : BoundedContinuousFunction α β} [inst_2 : IsEmpty α], dist f g = 0\",\n  \"isProp\": true,\n  \"docString\":\n  \"On an empty space, bounded continuous functions are at distance 0. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {β : Type u_2} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] (s : Set α),\\n  Continuous fun F => ContinuousMap.restrict s F\",\n  \"isProp\": true,\n  \"docString\":\n  \"For any subset `s` of `α`, the restriction of continuous functions to `s` is continuous as a\\nfunction from `C(α, β)` to `C(s, β)` with their respective compact-open topologies. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : UniformSpace β] {f : α → β} [inst_1 : TopologicalSpace α],\\n  (∀ (u : Set (β × β)), u ∈ uniformity β → ∃ F, Continuous F ∧ ∀ (y : α), (f y, F y) ∈ u) → Continuous f\",\n  \"isProp\": true,\n  \"docString\":\n  \"A function which can be uniformly approximated by continuous functions is continuous. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {β : Type u_2} {γ : Type u_3} [inst : UniformSpace α] [inst_1 : UniformSpace β]\\n  [inst_2 : LocallyCompactSpace α] [inst_3 : CompactSpace β] [inst_4 : UniformSpace γ] (f : α → β → γ),\\n  Continuous ↿f → ∀ (x : α), TendstoUniformly f (f x) (nhds x)\",\n  \"isProp\": true,\n  \"docString\":\n  \"A continuous family of functions `α → β → γ` tends uniformly to its value at `x` if `α` is\\nlocally compact and `β` is compact. \"},\n {\"theorem\": \"∀ {X Y : CompHaus} (f : X ⟶ Y), IsClosedMap ↑f\",\n  \"isProp\": true,\n  \"docString\":\n  \"Any continuous function on compact Hausdorff spaces is a closed map. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_3} [inst : NontriviallyNormedField 𝕜] {E : Type u_1} [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] {F : Type u_2} [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F]\\n  [inst_5 : CompleteSpace F] [inst_6 : CompleteSpace E] (g : E →ₗ[𝕜] F),\\n  (∀ (u : ℕ → E) (x : E) (y : F),\\n      Filter.Tendsto u Filter.atTop (nhds x) → Filter.Tendsto (↑g ∘ u) Filter.atTop (nhds y) → y = ↑g x) →\\n    Continuous ↑g\",\n  \"isProp\": true,\n  \"docString\":\n  \"A useful form of the **closed graph theorem** : let `f` be a linear map between two Banach\\nspaces. To show that `f` is continuous, it suffices to show that for any convergent sequence\\n`uₙ ⟶ x`, if `f(uₙ) ⟶ y` then `y = f(x)`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : UniformSpace β] {f : α → β} [inst_1 : TopologicalSpace α],\\n  (∀ (x : α) (u : Set (β × β)),\\n      u ∈ uniformity β → ∃ t, t ∈ nhds x ∧ ∃ F, ContinuousAt F x ∧ ∀ (y : α), y ∈ t → (f y, F y) ∈ u) →\\n    Continuous f\",\n  \"isProp\": true,\n  \"docString\":\n  \"A function which can be locally uniformly approximated by continuous functions is continuous. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {β : Type u_2} {γ : Type u_3} [inst : UniformSpace α] [inst_1 : UniformSpace β]\\n  [inst_2 : LocallyCompactSpace α] [inst_3 : CompactSpace β] [inst_4 : UniformSpace γ] {f : α → β → γ} {x : α}\\n  {U : Set α}, U ∈ nhds x → ContinuousOn (↿f) (U ×ˢ Set.univ) → TendstoUniformly f (f x) (nhds x)\",\n  \"isProp\": true,\n  \"docString\":\n  \"A family of functions `α → β → γ` tends uniformly to its value at `x` if `α` is locally compact,\\n`β` is compact and `f` is continuous on `U × (univ : Set β)` for some neighborhood `U` of `x`. \"}]\n", "prompt_cons": "/-- For any compact subset `K ⊆ X`, there exist some bounded continuous nonnegative\nfunctions f on X such that `f ≥ 1` on K. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X] (Λ : BoundedContinuousFunction X NNReal →ₗ[NNReal] NNReal)\n  (K : TopologicalSpace.Compacts X), Set.Nonempty (↑Λ '' {f | ∀ (x : X), x ∈ K → 1 ≤ ↑f x}) :=\n\n/-- Given two disjoint closed sets in a Hausdorff σ-compact finite dimensional manifold, there\nexists an infinitely smooth function that is equal to `0` on one of them and is equal to one on the\nother. -/\ntheorem ∀ {E : Type uE} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] [inst_2 : FiniteDimensional ℝ E] {H : Type uH}\n  [inst_3 : TopologicalSpace H] (I : ModelWithCorners ℝ E H) {M : Type uM} [inst_4 : TopologicalSpace M]\n  [inst_5 : ChartedSpace H M] [inst_6 : SmoothManifoldWithCorners I M] [inst_7 : T2Space M]\n  [inst_8 : SigmaCompactSpace M] {s t : Set M},\n  IsClosed s → IsClosed t → Disjoint s t → ∃ f, Set.EqOn (↑f) 0 s ∧ Set.EqOn (↑f) 1 t ∧ ∀ (x : M), ↑f x ∈ Set.Icc 0 1 :=\n\n/-- A continuous function is bounded below on a compact set. -/\ntheorem ∀ {α : Type u_1} {β : Type u_2} [inst : LinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderClosedTopology α]\n  [inst_3 : TopologicalSpace β] [inst_4 : Nonempty α] {f : β → α} {K : Set β},\n  IsCompact K → ContinuousOn f K → BddBelow (f '' K) :=\n\n/-- Urysohn's lemma: if `s` and `t` are two disjoint closed sets in a normal topological space `X`,\nthen there exists a continuous function `f : X → ℝ` such that\n\n* `f` equals zero on `s`;\n* `f` equals one on `t`;\n* `0 ≤ f x ≤ 1` for all `x`. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : NormalSpace X] {s t : Set X},\n  IsClosed s → IsClosed t → Disjoint s t → ∃ f, Set.EqOn (↑f) 0 s ∧ Set.EqOn (↑f) 1 t ∧ ∀ (x : X), ↑f x ∈ Set.Icc 0 1 :=\n\n/-- A continuous function is bounded above on a compact set. -/\ntheorem ∀ {α : Type u_1} {β : Type u_2} [inst : LinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderClosedTopology α]\n  [inst_3 : TopologicalSpace β] [inst_4 : Nonempty α] {f : β → α} {K : Set β},\n  IsCompact K → ContinuousOn f K → BddAbove (f '' K) :=\n\n/-- If two functions are a.e. equal on an open set and are continuous on this set, then they are\nequal on this set. -/\ntheorem ∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] {m : MeasurableSpace X} [inst_1 : TopologicalSpace Y]\n  [inst_2 : T2Space Y] {μ : MeasureTheory.Measure X} [inst_3 : MeasureTheory.Measure.IsOpenPosMeasure μ] {U : Set X}\n  {f g : X → Y},\n  f =ᶠ[MeasureTheory.Measure.ae (MeasureTheory.Measure.restrict μ U)] g →\n    IsOpen U → ContinuousOn f U → ContinuousOn g U → Set.EqOn f g U :=\n\n/-- A function which can be uniformly approximated by functions which are continuous on a set\nis continuous on this set. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : UniformSpace β] {f : α → β} {s : Set α} [inst_1 : TopologicalSpace α],\n  (∀ (u : Set (β × β)), u ∈ uniformity β → ∃ F, ContinuousOn F s ∧ ∀ (y : α), y ∈ s → (f y, F y) ∈ u) → ContinuousOn f s :=\n\n/-- A function `f` continuous on a compact set `K` is integrable on this set with respect to any\nlocally finite measure. -/\ntheorem ∀ {X : Type u_1} {E : Type u_2} [inst : MeasurableSpace X] [inst_1 : TopologicalSpace X] [inst_2 : NormedAddCommGroup E]\n  {f : X → E} {μ : MeasureTheory.Measure X} [inst_3 : OpensMeasurableSpace X]\n  [inst_4 : MeasureTheory.IsLocallyFiniteMeasure μ] {K : Set X} [inst_5 : TopologicalSpace.MetrizableSpace X],\n  IsCompact K → ContinuousOn f K → MeasureTheory.IntegrableOn f K :=\n\n/-- A function which can be locally uniformly approximated by functions which are continuous\non a set is continuous on this set. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : UniformSpace β] {f : α → β} {s : Set α} [inst_1 : TopologicalSpace α],\n  (∀ (x : α),\n      x ∈ s →\n        ∀ (u : Set (β × β)),\n          u ∈ uniformity β →\n            ∃ t, t ∈ nhdsWithin x s ∧ ∃ F, ContinuousWithinAt F s x ∧ ∀ (y : α), y ∈ t → (f y, F y) ∈ u) →\n    ContinuousOn f s :=\n\n/-- If `X` is a compact space, then any discrete quotient of `X` is finite. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X] (S : DiscreteQuotient X) [inst_1 : CompactSpace X],\n  Finite (Quotient S.toSetoid) :=\n\n/-- If `s` is a closed set and two functions `f` and `g` are continuous on `s`,\nthen the set `{x ∈ s | f x ≤ g x}` is a closed set. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : Preorder α] [t : OrderClosedTopology α]\n  [inst_2 : TopologicalSpace β] {f g : β → α} {s : Set β},\n  IsClosed s → ContinuousOn f s → ContinuousOn g s → IsClosed {x | x ∈ s ∧ f x ≤ g x} :=\n\n/-- A continuous function with compact support is bounded below. -/\ntheorem ∀ {α : Type u_1} {β : Type u_2} [inst : LinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderClosedTopology α]\n  [inst_3 : TopologicalSpace β] [inst_4 : Zero α] {f : β → α},\n  Continuous f → HasCompactSupport f → BddBelow (Set.range f) :=\n\n/-- On an empty space, bounded continuous functions are at distance 0. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : PseudoMetricSpace β]\n  {f g : BoundedContinuousFunction α β} [inst_2 : IsEmpty α], dist f g = 0 :=\n\n/-- For any subset `s` of `α`, the restriction of continuous functions to `s` is continuous as a\nfunction from `C(α, β)` to `C(s, β)` with their respective compact-open topologies. -/\ntheorem ∀ {α : Type u_1} {β : Type u_2} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] (s : Set α),\n  Continuous fun F => ContinuousMap.restrict s F :=\n\n/-- A function which can be uniformly approximated by continuous functions is continuous. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : UniformSpace β] {f : α → β} [inst_1 : TopologicalSpace α],\n  (∀ (u : Set (β × β)), u ∈ uniformity β → ∃ F, Continuous F ∧ ∀ (y : α), (f y, F y) ∈ u) → Continuous f :=\n\n/-- A continuous family of functions `α → β → γ` tends uniformly to its value at `x` if `α` is\nlocally compact and `β` is compact. -/\ntheorem ∀ {α : Type u_1} {β : Type u_2} {γ : Type u_3} [inst : UniformSpace α] [inst_1 : UniformSpace β]\n  [inst_2 : LocallyCompactSpace α] [inst_3 : CompactSpace β] [inst_4 : UniformSpace γ] (f : α → β → γ),\n  Continuous ↿f → ∀ (x : α), TendstoUniformly f (f x) (nhds x) :=\n\n/-- Any continuous function on compact Hausdorff spaces is a closed map. -/\ntheorem ∀ {X Y : CompHaus} (f : X ⟶ Y), IsClosedMap ↑f :=\n\n/-- A useful form of the **closed graph theorem** : let `f` be a linear map between two Banach\nspaces. To show that `f` is continuous, it suffices to show that for any convergent sequence\n`uₙ ⟶ x`, if `f(uₙ) ⟶ y` then `y = f(x)`. -/\ntheorem ∀ {𝕜 : Type u_3} [inst : NontriviallyNormedField 𝕜] {E : Type u_1} [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E] {F : Type u_2} [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F]\n  [inst_5 : CompleteSpace F] [inst_6 : CompleteSpace E] (g : E →ₗ[𝕜] F),\n  (∀ (u : ℕ → E) (x : E) (y : F),\n      Filter.Tendsto u Filter.atTop (nhds x) → Filter.Tendsto (↑g ∘ u) Filter.atTop (nhds y) → y = ↑g x) →\n    Continuous ↑g :=\n\n/-- A function which can be locally uniformly approximated by continuous functions is continuous. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : UniformSpace β] {f : α → β} [inst_1 : TopologicalSpace α],\n  (∀ (x : α) (u : Set (β × β)),\n      u ∈ uniformity β → ∃ t, t ∈ nhds x ∧ ∃ F, ContinuousAt F x ∧ ∀ (y : α), y ∈ t → (f y, F y) ∈ u) →\n    Continuous f :=\n\n/-- A family of functions `α → β → γ` tends uniformly to its value at `x` if `α` is locally compact,\n`β` is compact and `f` is continuous on `U × (univ : Set β)` for some neighborhood `U` of `x`. -/\ntheorem ∀ {α : Type u_1} {β : Type u_2} {γ : Type u_3} [inst : UniformSpace α] [inst_1 : UniformSpace β]\n  [inst_2 : LocallyCompactSpace α] [inst_3 : CompactSpace β] [inst_4 : UniformSpace γ] {f : α → β → γ} {x : α}\n  {U : Set α}, U ∈ nhds x → ContinuousOn (↿f) (U ×ˢ Set.univ) → TendstoUniformly f (f x) (nhds x) :=\n\n/-- Let `X` be completely regular, let `A` and `B` be disjoint closed subsets of `X`. Show that if `A` is compact, there is a continuous function `f: X → [0, 1]` such that `f(A) = {0}` and `f(B) = {1}`. -/\ntheorem", "choices": ["∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : CompletelyRegularSpace X] {A B : Set X},\n  IsCompact A → IsClosed A → IsClosed B → Disjoint A B → ∃ f, Set.EqOn (↑f) 0 A ∧ Set.EqOn (↑f) 1 B ∧ ∀ (x : X), ↑f x ∈ Set.Icc 0 1 ", "∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : CompletelyRegularSpace X] {A B : Set X},\n  IsCompact A → IsClosed A → IsClosed B → Disjoint A B → ∃ f, Set.EqOn (↑f) 0 A ∧ Set.EqOn (↑f) 1 B ∧ ∀ (x : X), ↑f x ∈ Set.Icc 0 1 ", "∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : CompletelyRegular X] {A B : Set X},\n  IsClosed A → IsClosed B → Disjoint A B → IsCompact A →\n    ∃ f, Set.EqOn (↑f) 0 A ∧ Set.EqOn (↑f) 1 B ∧ ∀ (x : X), ↑f x ∈ Set.Icc 0 1 ", "∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : NormalSpace X] [inst_2 : T1Space X] {A B : Set X},\n  IsCompact A → IsClosed B → Disjoint A B → ∃ f, Set.EqOn (↑f) 0 A ∧ Set.EqOn (↑f) 1 B ∧ ∀ (x : X), ↑f x ∈ Set.Icc 0 1 ", "∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : T0Space X] [inst_2 : LocallyCompactSpace X] {A B : Set X},\n  IsCompact A → IsClosed A → IsClosed B → Disjoint A B → ∃ f, Set.EqOn (↑f) 0 A ∧ Set.EqOn (↑f) 1 B ∧ ∀ (x : X), ↑f x ∈ Set.Icc 0 1 ", "∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : NormalSpace X] {A B : Set X},\n  IsClosed A → IsClosed B → Disjoint A B → IsCompact A →\n    ∃ f, Set.EqOn (↑f) 0 A ∧ Set.EqOn (↑f) 1 B ∧ ∀ (x : X), ↑f x ∈ Set.Icc 0 1 ", "∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : CompletelyRegularSpace X] {A B : Set X},\n  IsCompact A → IsClosed A → IsClosed B → Disjoint A B → ∃ f, Set.EqOn (↑f) 0 A ∧ Set.EqOn (↑f) 1 B ∧ ∀ (x : X), ↑f x ∈ Set.Icc 0 1 ", "∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : CompletelyRegularSpace X] {A B : Set X},\n  IsCompact A → IsClosed A → IsClosed B → Disjoint A B → ∃ (f : X → ℝ),\n    Continuous f ∧ Set.EqOn f 0 A ∧ Set.EqOn f 1 B ∧ ∀ (x : X), f x ∈ Set.Icc 0 1 ", "∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : CompletelyRegularSpace X] {A B : Set X},\n  IsCompact A → IsClosed A → IsClosed B → Disjoint A B →\n  ∃ f, Set.EqOn (↑f) 0 A ∧ Set.EqOn (↑f) 1 B ∧ ∀ (x : X), ↑f x ∈ Set.Icc 0 1 ", "∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : T1Space X] [inst_2 : CompletelyRegularSpace X] {A B : Set X},\n  IsCompact A → IsClosed B → Disjoint A B →\n  ∃ f : X → ℝ, Set.EqOn (↑f) 0 A ∧ Set.EqOn (↑f) 1 B ∧ Continuous f ∧ ∀ (x : X), ↑f x ∈ Set.Icc 0 1 "]}
{"docString": "Let `X` be completely regular. Show that `X` is connected if and only if the Stone-Čech compactification of `X` is connected.", "prompts": "[{\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X], CompactSpace (OnePoint X)\",\n  \"isProp\": true,\n  \"docString\":\n  \"For any topological space `X`, its one point compactification is a compact space. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] (S : DiscreteQuotient X) [inst_1 : CompactSpace X],\\n  Finite (Quotient S.toSetoid)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `X` is a compact space, then any discrete quotient of `X` is finite. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : PreconnectedSpace X] [inst_2 : NoncompactSpace X],\\n  ConnectedSpace (OnePoint X)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `X` is not a compact space, then `OnePoint X` is a connected space. \"},\n {\"theorem\":\n  \"∀ {R : Type u_1} (M : Type u_2) [inst : Monoid R] [inst_1 : MulAction R M] (a : Rˣ), IsSMulRegular M ↑a\",\n  \"isProp\": true,\n  \"docString\": \"Any element in `Rˣ` is `M`-regular. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : AddCommGroup E] [inst_1 : Module ℝ E] [inst_2 : TopologicalSpace E]\\n  [inst_3 : TopologicalAddGroup E] [inst_4 : ContinuousSMul ℝ E] {s : Set E},\\n  Convex ℝ s → Set.Nonempty s → IsConnected s\",\n  \"isProp\": true,\n  \"docString\": \"A nonempty convex set is connected. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X],\\n  (Pairwise fun x y => ∃ U, IsClopen U ∧ x ∈ U ∧ ¬y ∈ U) → IsTotallyDisconnected Set.univ\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `X` be a topological space, and suppose that for all distinct `x,y ∈ X`, there\\nis some clopen set `U` such that `x ∈ U` and `y ∉ U`. Then `X` is totally disconnected. \"},\n {\"theorem\":\n  \"∀ {V : Type u} [inst : Fintype V] [inst_1 : DecidableEq V] {G : SimpleGraph V} [inst_2 : DecidableRel G.Adj]\\n  {n k ℓ μ : ℕ},\\n  SimpleGraph.IsSRGWith G n k ℓ μ → SimpleGraph.IsSRGWith Gᶜ n (n - k - 1) (n - (2 * k - μ) - 2) (n - (2 * k - ℓ))\",\n  \"isProp\": true,\n  \"docString\":\n  \"The complement of a strongly regular graph is strongly regular. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : Finite α], CompactSpace α\",\n  \"isProp\": true,\n  \"docString\": \"Finite topological spaces are compact. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : EMetricSpace X] [inst_1 : SigmaCompactSpace X] [inst_2 : MeasurableSpace X]\\n  [inst_3 : BorelSpace X] (μ : MeasureTheory.Measure X) [inst_4 : MeasureTheory.IsLocallyFiniteMeasure μ],\\n  MeasureTheory.Measure.Regular μ\",\n  \"isProp\": true,\n  \"docString\":\n  \"Any locally finite measure on a `σ`-compact (e)metric space is regular. \"},\n {\"theorem\": \"∀ {X Y : Compactum} (f : X ⟶ Y), Continuous f.f\",\n  \"isProp\": true,\n  \"docString\": \"Any morphism of compacta is continuous. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : CompactSpace X] (A : Subalgebra ℝ C(X, ℝ)),\\n  Subalgebra.SeparatesPoints A → Subalgebra.topologicalClosure A = ⊤\",\n  \"isProp\": true,\n  \"docString\":\n  \"The **Stone-Weierstrass Approximation Theorem**,\\nthat a subalgebra `A` of `C(X, ℝ)`, where `X` is a compact topological space,\\nis dense if it separates points.\\n\"},\n {\"theorem\":\n  \"∀ {R : Type u_1} {S : Type u_3} {M : Type u_2} {a : R} {s : S} [inst : SMul R M] [inst_1 : SMul R S] [inst_2 : SMul S M]\\n  [inst_3 : IsScalarTower R S M], IsSMulRegular M a → IsSMulRegular M s → IsSMulRegular M (a • s)\",\n  \"isProp\": true,\n  \"docString\": \"The product of `M`-regular elements is `M`-regular. \"},\n {\"theorem\":\n  \"∀ {E : Type u_2} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type u_4} [inst_2 : NormedAddCommGroup F]\\n  [inst_3 : NormedSpace ℂ F] {H : Type u_3} [inst_4 : TopologicalSpace H] {I : ModelWithCorners ℂ E H}\\n  [inst_5 : ModelWithCorners.Boundaryless I] {M : Type u_1} [inst_6 : TopologicalSpace M] [inst_7 : CompactSpace M]\\n  [inst_8 : ChartedSpace H M] [inst_9 : SmoothManifoldWithCorners I M] [inst_10 : PreconnectedSpace M] {f : M → F},\\n  MDifferentiable I (modelWithCornersSelf ℂ F) f → ∀ (a b : M), f a = f b\",\n  \"isProp\": true,\n  \"docString\":\n  \"A holomorphic function on a compact connected complex manifold is constant. \"},\n {\"theorem\": \"∀ (ι : Type u_1) [inst : Fintype ι], IsCompact (stdSimplex ℝ ι)\",\n  \"isProp\": true,\n  \"docString\": \"`stdSimplex ℝ ι` is compact. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {s t : Set α}, IsCompact s → IsClosed t → IsCompact (s ∩ t)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The intersection of a compact set and a closed set is a compact set. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {s t : Set α}, IsCompact t → IsClosed s → IsCompact (s ∩ t)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The intersection of a closed set and a compact set is a compact set. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {β : Type u_1} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] [i : LocallyConnectedSpace β],\\n  α ≃ₜ β → LocallyConnectedSpace α\",\n  \"isProp\": true,\n  \"docString\":\n  \"If the codomain of a homeomorphism is a locally connected space, then the domain is also\\na locally connected space. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {s : Set α} {ι : Type v},\\n  IsCompact s →\\n    ∀ (Z : ι → Set α),\\n      (∀ (i : ι), IsClosed (Z i)) →\\n        (∀ (t : Finset ι), Set.Nonempty (s ∩ ⋂ (i : ι) (_ : i ∈ t), Z i)) → Set.Nonempty (s ∩ ⋂ (i : ι), Z i)\",\n  \"isProp\": true,\n  \"docString\":\n  \"To show that a compact set intersects the intersection of a family of closed sets,\\nit is sufficient to show that it intersects every finite subfamily. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : AddCommGroup E] [inst_1 : Module ℝ E] [inst_2 : TopologicalSpace E]\\n  [inst_3 : TopologicalAddGroup E] [inst_4 : ContinuousSMul ℝ E] {s : Set E},\\n  Convex ℝ s → Set.Nonempty s → IsPathConnected s\",\n  \"isProp\": true,\n  \"docString\": \"A nonempty convex set is path connected. \"},\n {\"theorem\": \"∀ (self : CompHaus), CompactSpace ↑self.toTop\",\n  \"isProp\": true,\n  \"docString\": \"The underlying topological space is compact.\"}]\n", "prompt_cons": "/-- For any topological space `X`, its one point compactification is a compact space. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X], CompactSpace (OnePoint X) :=\n\n/-- If `X` is a compact space, then any discrete quotient of `X` is finite. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X] (S : DiscreteQuotient X) [inst_1 : CompactSpace X],\n  Finite (Quotient S.toSetoid) :=\n\n/-- If `X` is not a compact space, then `OnePoint X` is a connected space. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : PreconnectedSpace X] [inst_2 : NoncompactSpace X],\n  ConnectedSpace (OnePoint X) :=\n\n/-- Any element in `Rˣ` is `M`-regular. -/\ntheorem ∀ {R : Type u_1} (M : Type u_2) [inst : Monoid R] [inst_1 : MulAction R M] (a : Rˣ), IsSMulRegular M ↑a :=\n\n/-- A nonempty convex set is connected. -/\ntheorem ∀ {E : Type u_1} [inst : AddCommGroup E] [inst_1 : Module ℝ E] [inst_2 : TopologicalSpace E]\n  [inst_3 : TopologicalAddGroup E] [inst_4 : ContinuousSMul ℝ E] {s : Set E},\n  Convex ℝ s → Set.Nonempty s → IsConnected s :=\n\n/-- Let `X` be a topological space, and suppose that for all distinct `x,y ∈ X`, there\nis some clopen set `U` such that `x ∈ U` and `y ∉ U`. Then `X` is totally disconnected. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X],\n  (Pairwise fun x y => ∃ U, IsClopen U ∧ x ∈ U ∧ ¬y ∈ U) → IsTotallyDisconnected Set.univ :=\n\n/-- The complement of a strongly regular graph is strongly regular. -/\ntheorem ∀ {V : Type u} [inst : Fintype V] [inst_1 : DecidableEq V] {G : SimpleGraph V} [inst_2 : DecidableRel G.Adj]\n  {n k ℓ μ : ℕ},\n  SimpleGraph.IsSRGWith G n k ℓ μ → SimpleGraph.IsSRGWith Gᶜ n (n - k - 1) (n - (2 * k - μ) - 2) (n - (2 * k - ℓ)) :=\n\n/-- Finite topological spaces are compact. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : Finite α], CompactSpace α :=\n\n/-- Any locally finite measure on a `σ`-compact (e)metric space is regular. -/\ntheorem ∀ {X : Type u_1} [inst : EMetricSpace X] [inst_1 : SigmaCompactSpace X] [inst_2 : MeasurableSpace X]\n  [inst_3 : BorelSpace X] (μ : MeasureTheory.Measure X) [inst_4 : MeasureTheory.IsLocallyFiniteMeasure μ],\n  MeasureTheory.Measure.Regular μ :=\n\n/-- Any morphism of compacta is continuous. -/\ntheorem ∀ {X Y : Compactum} (f : X ⟶ Y), Continuous f.f :=\n\n/-- The **Stone-Weierstrass Approximation Theorem**,\nthat a subalgebra `A` of `C(X, ℝ)`, where `X` is a compact topological space,\nis dense if it separates points. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : CompactSpace X] (A : Subalgebra ℝ C(X, ℝ)),\n  Subalgebra.SeparatesPoints A → Subalgebra.topologicalClosure A = ⊤ :=\n\n/-- The product of `M`-regular elements is `M`-regular. -/\ntheorem ∀ {R : Type u_1} {S : Type u_3} {M : Type u_2} {a : R} {s : S} [inst : SMul R M] [inst_1 : SMul R S] [inst_2 : SMul S M]\n  [inst_3 : IsScalarTower R S M], IsSMulRegular M a → IsSMulRegular M s → IsSMulRegular M (a • s) :=\n\n/-- A holomorphic function on a compact connected complex manifold is constant. -/\ntheorem ∀ {E : Type u_2} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type u_4} [inst_2 : NormedAddCommGroup F]\n  [inst_3 : NormedSpace ℂ F] {H : Type u_3} [inst_4 : TopologicalSpace H] {I : ModelWithCorners ℂ E H}\n  [inst_5 : ModelWithCorners.Boundaryless I] {M : Type u_1} [inst_6 : TopologicalSpace M] [inst_7 : CompactSpace M]\n  [inst_8 : ChartedSpace H M] [inst_9 : SmoothManifoldWithCorners I M] [inst_10 : PreconnectedSpace M] {f : M → F},\n  MDifferentiable I (modelWithCornersSelf ℂ F) f → ∀ (a b : M), f a = f b :=\n\n/-- `stdSimplex ℝ ι` is compact. -/\ntheorem ∀ (ι : Type u_1) [inst : Fintype ι], IsCompact (stdSimplex ℝ ι) :=\n\n/-- The intersection of a compact set and a closed set is a compact set. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] {s t : Set α}, IsCompact s → IsClosed t → IsCompact (s ∩ t) :=\n\n/-- The intersection of a closed set and a compact set is a compact set. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] {s t : Set α}, IsCompact t → IsClosed s → IsCompact (s ∩ t) :=\n\n/-- If the codomain of a homeomorphism is a locally connected space, then the domain is also\na locally connected space. -/\ntheorem ∀ {α : Type u_2} {β : Type u_1} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] [i : LocallyConnectedSpace β],\n  α ≃ₜ β → LocallyConnectedSpace α :=\n\n/-- To show that a compact set intersects the intersection of a family of closed sets,\nit is sufficient to show that it intersects every finite subfamily. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] {s : Set α} {ι : Type v},\n  IsCompact s →\n    ∀ (Z : ι → Set α),\n      (∀ (i : ι), IsClosed (Z i)) →\n        (∀ (t : Finset ι), Set.Nonempty (s ∩ ⋂ (i : ι) (_ : i ∈ t), Z i)) → Set.Nonempty (s ∩ ⋂ (i : ι), Z i) :=\n\n/-- A nonempty convex set is path connected. -/\ntheorem ∀ {E : Type u_1} [inst : AddCommGroup E] [inst_1 : Module ℝ E] [inst_2 : TopologicalSpace E]\n  [inst_3 : TopologicalAddGroup E] [inst_4 : ContinuousSMul ℝ E] {s : Set E},\n  Convex ℝ s → Set.Nonempty s → IsPathConnected s :=\n\n/-- The underlying topological space is compact. -/\ntheorem ∀ (self : CompHaus), CompactSpace ↑self.toTop :=\n\n/-- Let `X` be completely regular. Show that `X` is connected if and only if the Stone-Čech compactification of `X` is connected. -/\ntheorem", "choices": ["∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : T2Space X] [inst_2 : PreconnectedSpace X],\n  PreconnectedSpace (StoneCechCompactification X) → PreconnectedSpace X ", "∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : T2Space X] [inst_2 : CompletelyRegularSpace X],\n  ConnectedSpace X ↔ ConnectedSpace (StoneCech X) ", "∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : T2Space X] [inst_2 : TotallyDisconnectedSpace X] [inst_3 : RegularSpace X],\n  ConnectedSpace (StoneCechCompactification X) ↔ ConnectedSpace X ", "∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : CompletelyRegularSpace X],\n  ConnectedSpace X ↔ ConnectedSpace (StoneCech X) ", "∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : T2Space X] [inst_2 : CompletelyRegularSpace X],\n  ConnectedSpace X ↔ ConnectedSpace (StoneCech X) ", "∀ (X : Type u_1) [inst : TopologicalSpace X] [inst_1 : T2Space X] [inst_2 : CompletelyRegularSpace X],\n  ConnectedSpace X ↔ ConnectedSpace (StoneCech X) ", "∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : T2Space X] [inst_2 : CompletelyRegularSpace X],\n  ConnectedSpace X ↔ ConnectedSpace (StoneCech X) ", "∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : T2Space X] [inst_2 : CompletelyRegularSpace X],\n  ConnectedSpace X ↔ ConnectedSpace (StoneCech X) ", "∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : T2Space X] [inst_2 : CompletelyRegularSpace X],\n  ConnectedSpace X ↔ ConnectedSpace (Ultrafilter.Lim X) ", "∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : CompletelyRegularSpace X],\n  ConnectedSpace X ↔ ConnectedSpace (StoneCech X) "]}
{"docString": "Prove that `-(-v) = v` for every `v ∈ V`.", "prompts": "[{\"theorem\":\n  \"∀ {𝕜 : Type u_2} {E : Type u_1} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\\n  (v : E), ↑(reflection (Submodule.span 𝕜 {v})ᗮ) v = -v\",\n  \"isProp\": true,\n  \"docString\": \"The reflection in `(𝕜 ∙ v)ᗮ` of `v` is `-v`. \"},\n {\"theorem\":\n  \"∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : IsDedekindDomain R]\\n  (v : IsDedekindDomain.HeightOneSpectrum R) (I : Ideal R),\\n  I ≠ 0 →\\n    Associates.count (Associates.mk v.asIdeal)\\n        (Associates.factors\\n          (Associates.mk\\n            (∏ᶠ (v : IsDedekindDomain.HeightOneSpectrum R), IsDedekindDomain.HeightOneSpectrum.maxPowDividing v I))) =\\n      Associates.count (Associates.mk v.asIdeal) (Associates.factors (Associates.mk I))\",\n  \"isProp\": true,\n  \"docString\":\n  \"The multiplicity of `v` in `∏_v v^(val_v(I))` equals `val_v(I)`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {n : Type u_1} [inst : AddGroup n] {v : n → α},\\n  Matrix.IsSymm (Matrix.circulant v) → ∀ (i : n), v (-i) = v i\",\n  \"isProp\": true,\n  \"docString\": \"If `circulant v` is symmetric, `∀ i j : I, v (- i) = v i`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {n : Type u_1} [inst : AddGroup n] {v : n → α},\\n  Matrix.IsSymm (Matrix.circulant v) ↔ ∀ (i : n), v (-i) = v i\",\n  \"isProp\": true,\n  \"docString\": \"A circulant of `v` is symmetric iff `v` equals its reverse. \"},\n {\"theorem\":\n  \"∀ {α : Type u} (self : UniformSpace.Core α), (Filter.lift' self.uniformity fun s => compRel s s) ≤ self.uniformity\",\n  \"isProp\": true,\n  \"docString\":\n  \"For every set `u ∈ uniformity`, there exists `v ∈ uniformity` such that `v ○ v ⊆ u`. \"},\n {\"theorem\":\n  \"∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : IsDedekindDomain R]\\n  (v : IsDedekindDomain.HeightOneSpectrum R),\\n  ∃ π, IsDedekindDomain.HeightOneSpectrum.intValuationDef v π = ↑(↑Multiplicative.ofAdd (-1))\",\n  \"isProp\": true,\n  \"docString\":\n  \"There exists `π ∈ R` with `v`-adic valuation `Multiplicative.ofAdd (-1)`. \"},\n {\"theorem\":\n  \"∀ {R : Type u_2} [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : IsDedekindDomain R] (K : Type u_1)\\n  [inst_3 : Field K] [inst_4 : Algebra R K] [inst_5 : IsFractionRing R K] (v : IsDedekindDomain.HeightOneSpectrum R),\\n  ∃ π, ↑(IsDedekindDomain.HeightOneSpectrum.valuation v) π = ↑(↑Multiplicative.ofAdd (-1))\",\n  \"isProp\": true,\n  \"docString\":\n  \"There exists `π ∈ K` with `v`-adic valuation `Multiplicative.ofAdd (-1)`. \"},\n {\"theorem\":\n  \"∀ {n : ℕ} {α : Type u_1} {v w : Vector α n}, (∀ (m : Fin n), Vector.get v m = Vector.get w m) → v = w\",\n  \"isProp\": true,\n  \"docString\":\n  \"Two `v w : Vector α n` are equal iff they are equal at every single index. \"},\n {\"theorem\":\n  \"∀ {K : Type u_2} [inst : DivisionRing K] {Γ₀ : Type u_1} [inst_1 : LinearOrderedAddCommMonoidWithTop Γ₀]\\n  [inst_2 : Nontrivial Γ₀] (v : AddValuation K Γ₀) {x : K}, ↑v x = ⊤ ↔ x = 0\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `v` is an additive valuation on a division ring then `v(x) = ⊤` iff `x = 0`. \"},\n {\"theorem\":\n  \"∀ {M : Type u_1} [inst : TopologicalSpace M] [inst_1 : AddMonoid M] [inst_2 : ContinuousAdd M] {U : Set M},\\n  U ∈ nhds 0 → ∃ V, IsOpen V ∧ 0 ∈ V ∧ V + V ⊆ U\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given an open neighborhood `U` of `0` there is an open neighborhood `V` of `0`\\nsuch that `V + V ⊆ U`.\"},\n {\"theorem\":\n  \"∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : IsDedekindDomain R]\\n  (v : IsDedekindDomain.HeightOneSpectrum R), IsDedekindDomain.HeightOneSpectrum.intValuationDef v 0 = 0\",\n  \"isProp\": true,\n  \"docString\": \"The `v`-adic valuation of `0 : R` equals 0. \"},\n {\"theorem\":\n  \"∀ {v : Sat.Valuation} {a : Prop} {n : ℕ}, (v n ↔ a) → Sat.Literal.reify v (Sat.Literal.pos n) ¬a\",\n  \"isProp\": true,\n  \"docString\": \"The reification of a positive literal `¬⟦a⟧_v ≡ ¬a`. \"},\n {\"theorem\":\n  \"∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : IsDedekindDomain R]\\n  (v : IsDedekindDomain.HeightOneSpectrum R), IsDedekindDomain.HeightOneSpectrum.intValuationDef v 1 = 1\",\n  \"isProp\": true,\n  \"docString\": \"The `v`-adic valuation of `1 : R` equals 1. \"},\n {\"theorem\":\n  \"∀ {K : Type u_2} [inst : DivisionRing K] {Γ₀ : Type u_1} [inst_1 : LinearOrderedCommMonoidWithZero Γ₀]\\n  [inst_2 : Nontrivial Γ₀] (v : Valuation K Γ₀) {x : K}, ↑v x = 0 ↔ x = 0\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `v` is a valuation on a division ring then `v(x) = 0` iff `x = 0`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {𝕜 : Type u_2} [inst : NormedField 𝕜] {l : Filter α} {u v : α → 𝕜}, u =O[l] v → u / v * v =ᶠ[l] u\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `u = O(v)` along `l`, then `(u / v) * v = u` eventually at `l`. \"},\n {\"theorem\":\n  \"∀ {M : Type u_1} [inst : SeminormedAddCommGroup M] {S : AddSubgroup M} (x : M ⧸ S), ‖-x‖ = ‖x‖\",\n  \"isProp\": true,\n  \"docString\": \"The norm on the quotient satisfies `‖-x‖ = ‖x‖`. \"},\n {\"theorem\":\n  \"∀ {m : Type u_1} {R : Type u_2} [inst : Fintype m] [inst_1 : CommRing R] {M : Matrix m m R},\\n  Matrix.Nondegenerate M → ∀ {v : m → R}, (∀ (w : m → R), Matrix.dotProduct v (Matrix.mulVec M w) = 0) → v = 0\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `M` is nondegenerate and `w ⬝ M ⬝ v = 0` for all `w`, then `v = 0`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {𝕜 : Type u_2} [inst : NormedField 𝕜] {l : Filter α} {u v : α → 𝕜}, u =o[l] v → u / v * v =ᶠ[l] u\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `u = o(v)` along `l`, then `(u / v) * v = u` eventually at `l`. \"},\n {\"theorem\":\n  \"∀ {v : Sat.Valuation} {l : Sat.Literal} {a : Prop},\\n  Sat.Literal.reify v l a → Sat.Clause.reify v (Sat.Clause.cons l Sat.Clause.nil) a\",\n  \"isProp\": true,\n  \"docString\": \"The reification of a singleton clause `¬⟦l⟧_v ≡ ¬⟦l⟧_v`. \"},\n {\"theorem\":\n  \"∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : IsDedekindDomain R]\\n  (v : IsDedekindDomain.HeightOneSpectrum R) (x y : R),\\n  IsDedekindDomain.HeightOneSpectrum.intValuationDef v (x * y) =\\n    IsDedekindDomain.HeightOneSpectrum.intValuationDef v x * IsDedekindDomain.HeightOneSpectrum.intValuationDef v y\",\n  \"isProp\": true,\n  \"docString\":\n  \"The `v`-adic valuation of a product equals the product of the valuations. \"}]\n", "prompt_cons": "/-- The reflection in `(𝕜 ∙ v)ᗮ` of `v` is `-v`. -/\ntheorem ∀ {𝕜 : Type u_2} {E : Type u_1} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  (v : E), ↑(reflection (Submodule.span 𝕜 {v})ᗮ) v = -v :=\n\n/-- The multiplicity of `v` in `∏_v v^(val_v(I))` equals `val_v(I)`. -/\ntheorem ∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : IsDedekindDomain R]\n  (v : IsDedekindDomain.HeightOneSpectrum R) (I : Ideal R),\n  I ≠ 0 →\n    Associates.count (Associates.mk v.asIdeal)\n        (Associates.factors\n          (Associates.mk\n            (∏ᶠ (v : IsDedekindDomain.HeightOneSpectrum R), IsDedekindDomain.HeightOneSpectrum.maxPowDividing v I))) =\n      Associates.count (Associates.mk v.asIdeal) (Associates.factors (Associates.mk I)) :=\n\n/-- If `circulant v` is symmetric, `∀ i j : I, v (- i) = v i`. -/\ntheorem ∀ {α : Type u_2} {n : Type u_1} [inst : AddGroup n] {v : n → α},\n  Matrix.IsSymm (Matrix.circulant v) → ∀ (i : n), v (-i) = v i :=\n\n/-- A circulant of `v` is symmetric iff `v` equals its reverse. -/\ntheorem ∀ {α : Type u_2} {n : Type u_1} [inst : AddGroup n] {v : n → α},\n  Matrix.IsSymm (Matrix.circulant v) ↔ ∀ (i : n), v (-i) = v i :=\n\n/-- For every set `u ∈ uniformity`, there exists `v ∈ uniformity` such that `v ○ v ⊆ u`. -/\ntheorem ∀ {α : Type u} (self : UniformSpace.Core α), (Filter.lift' self.uniformity fun s => compRel s s) ≤ self.uniformity :=\n\n/-- There exists `π ∈ R` with `v`-adic valuation `Multiplicative.ofAdd (-1)`. -/\ntheorem ∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : IsDedekindDomain R]\n  (v : IsDedekindDomain.HeightOneSpectrum R),\n  ∃ π, IsDedekindDomain.HeightOneSpectrum.intValuationDef v π = ↑(↑Multiplicative.ofAdd (-1)) :=\n\n/-- There exists `π ∈ K` with `v`-adic valuation `Multiplicative.ofAdd (-1)`. -/\ntheorem ∀ {R : Type u_2} [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : IsDedekindDomain R] (K : Type u_1)\n  [inst_3 : Field K] [inst_4 : Algebra R K] [inst_5 : IsFractionRing R K] (v : IsDedekindDomain.HeightOneSpectrum R),\n  ∃ π, ↑(IsDedekindDomain.HeightOneSpectrum.valuation v) π = ↑(↑Multiplicative.ofAdd (-1)) :=\n\n/-- Two `v w : Vector α n` are equal iff they are equal at every single index. -/\ntheorem ∀ {n : ℕ} {α : Type u_1} {v w : Vector α n}, (∀ (m : Fin n), Vector.get v m = Vector.get w m) → v = w :=\n\n/-- If `v` is an additive valuation on a division ring then `v(x) = ⊤` iff `x = 0`. -/\ntheorem ∀ {K : Type u_2} [inst : DivisionRing K] {Γ₀ : Type u_1} [inst_1 : LinearOrderedAddCommMonoidWithTop Γ₀]\n  [inst_2 : Nontrivial Γ₀] (v : AddValuation K Γ₀) {x : K}, ↑v x = ⊤ ↔ x = 0 :=\n\n/-- Given an open neighborhood `U` of `0` there is an open neighborhood `V` of `0`\nsuch that `V + V ⊆ U`. -/\ntheorem ∀ {M : Type u_1} [inst : TopologicalSpace M] [inst_1 : AddMonoid M] [inst_2 : ContinuousAdd M] {U : Set M},\n  U ∈ nhds 0 → ∃ V, IsOpen V ∧ 0 ∈ V ∧ V + V ⊆ U :=\n\n/-- The `v`-adic valuation of `0 : R` equals 0. -/\ntheorem ∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : IsDedekindDomain R]\n  (v : IsDedekindDomain.HeightOneSpectrum R), IsDedekindDomain.HeightOneSpectrum.intValuationDef v 0 = 0 :=\n\n/-- The reification of a positive literal `¬⟦a⟧_v ≡ ¬a`. -/\ntheorem ∀ {v : Sat.Valuation} {a : Prop} {n : ℕ}, (v n ↔ a) → Sat.Literal.reify v (Sat.Literal.pos n) ¬a :=\n\n/-- The `v`-adic valuation of `1 : R` equals 1. -/\ntheorem ∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : IsDedekindDomain R]\n  (v : IsDedekindDomain.HeightOneSpectrum R), IsDedekindDomain.HeightOneSpectrum.intValuationDef v 1 = 1 :=\n\n/-- If `v` is a valuation on a division ring then `v(x) = 0` iff `x = 0`. -/\ntheorem ∀ {K : Type u_2} [inst : DivisionRing K] {Γ₀ : Type u_1} [inst_1 : LinearOrderedCommMonoidWithZero Γ₀]\n  [inst_2 : Nontrivial Γ₀] (v : Valuation K Γ₀) {x : K}, ↑v x = 0 ↔ x = 0 :=\n\n/-- If `u = O(v)` along `l`, then `(u / v) * v = u` eventually at `l`. -/\ntheorem ∀ {α : Type u_1} {𝕜 : Type u_2} [inst : NormedField 𝕜] {l : Filter α} {u v : α → 𝕜}, u =O[l] v → u / v * v =ᶠ[l] u :=\n\n/-- The norm on the quotient satisfies `‖-x‖ = ‖x‖`. -/\ntheorem ∀ {M : Type u_1} [inst : SeminormedAddCommGroup M] {S : AddSubgroup M} (x : M ⧸ S), ‖-x‖ = ‖x‖ :=\n\n/-- If `M` is nondegenerate and `w ⬝ M ⬝ v = 0` for all `w`, then `v = 0`. -/\ntheorem ∀ {m : Type u_1} {R : Type u_2} [inst : Fintype m] [inst_1 : CommRing R] {M : Matrix m m R},\n  Matrix.Nondegenerate M → ∀ {v : m → R}, (∀ (w : m → R), Matrix.dotProduct v (Matrix.mulVec M w) = 0) → v = 0 :=\n\n/-- If `u = o(v)` along `l`, then `(u / v) * v = u` eventually at `l`. -/\ntheorem ∀ {α : Type u_1} {𝕜 : Type u_2} [inst : NormedField 𝕜] {l : Filter α} {u v : α → 𝕜}, u =o[l] v → u / v * v =ᶠ[l] u :=\n\n/-- The reification of a singleton clause `¬⟦l⟧_v ≡ ¬⟦l⟧_v`. -/\ntheorem ∀ {v : Sat.Valuation} {l : Sat.Literal} {a : Prop},\n  Sat.Literal.reify v l a → Sat.Clause.reify v (Sat.Clause.cons l Sat.Clause.nil) a :=\n\n/-- The `v`-adic valuation of a product equals the product of the valuations. -/\ntheorem ∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : IsDedekindDomain R]\n  (v : IsDedekindDomain.HeightOneSpectrum R) (x y : R),\n  IsDedekindDomain.HeightOneSpectrum.intValuationDef v (x * y) =\n    IsDedekindDomain.HeightOneSpectrum.intValuationDef v x * IsDedekindDomain.HeightOneSpectrum.intValuationDef v y :=\n\n/-- Prove that `-(-v) = v` for every `v ∈ V`. -/\ntheorem", "choices": ["∀ {V : Type u_1} [inst : AddGroup V] (v : V), -(-v) = v ", "∀ {V : Type u_1} [inst : AddGroup V] (v : V), -(-v) = v ", "∀ {V : Type u_1} [inst : AddGroup V] (v : V), -(-v) = v ", "∀ {V : Type u_1} [inst : AddGroup V] (v : V), -(-v) = v ", "∀ {α : Type u_1} [inst : AddGroup α] (v : α), -(-v) = v ", "forall {V : Type u_1} [inst : AddGroup V] (v : V), -(-v) = v ", "∀ {V : Type u_1} [inst : AddGroup V] (v : V), -(-v) = v ", "∀ {V : Type u_2} [inst : AddGroup V] (v : V), -(-v) = v ", "∀ {α : Type u} {V : Type v} [inst : AddGroup V] [inst_1 : Module α V] (v : V), -(-v) = v ", "∀ {V : Type u_1} [inst : AddGroup V] (v : V), -(-v) = v "]}
{"docString": "Give an example of a nonempty subset `U` of `ℝ^2` such that `U` is closed under addition and under taking additive inverses (meaning `-u ∈ U` whenever `u ∈ U`), but `U` is not a subspace of `ℝ^2`.", "prompts": "[{\"theorem\":\n  \"∀ {M : Type u_1} [inst : TopologicalSpace M] [inst_1 : AddMonoid M] [inst_2 : ContinuousAdd M] {U : Set M},\\n  U ∈ nhds 0 → ∃ V, IsOpen V ∧ 0 ∈ V ∧ V + V ⊆ U\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given an open neighborhood `U` of `0` there is an open neighborhood `V` of `0`\\nsuch that `V + V ⊆ U`.\"},\n {\"theorem\":\n  \"∀ {R : Type u} [inst : NonUnitalNonAssocRing R] (s : NonUnitalSubring R) {x y : R}, x ∈ s → y ∈ s → x + y ∈ s\",\n  \"isProp\": true,\n  \"docString\": \"A non-unital subring is closed under addition. \"},\n {\"theorem\":\n  \"∀ {R : Type u} [inst : NonUnitalNonAssocRing R] (s : NonUnitalSubring R) {x y : R}, x ∈ s → y ∈ s → x - y ∈ s\",\n  \"isProp\": true,\n  \"docString\": \"A non-unital subring is closed under subtraction \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : T3Space α] {x y : α},\\n  x ≠ y →\\n    ∃ U₁,\\n      U₁ ∈ nhds x ∧\\n        ∃ V₁,\\n          V₁ ∈ nhds x ∧\\n            ∃ U₂,\\n              U₂ ∈ nhds y ∧\\n                ∃ V₂,\\n                  V₂ ∈ nhds y ∧ IsClosed V₁ ∧ IsClosed V₂ ∧ IsOpen U₁ ∧ IsOpen U₂ ∧ V₁ ⊆ U₁ ∧ V₂ ⊆ U₂ ∧ Disjoint U₁ U₂\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given two points `x ≠ y`, we can find neighbourhoods `x ∈ V₁ ⊆ U₁` and `y ∈ V₂ ⊆ U₂`,\\nwith the `Vₖ` closed and the `Uₖ` open, such that the `Uₖ` are disjoint. \"},\n {\"theorem\":\n  \"∀ {G : Type w} [inst : TopologicalSpace G] [inst_1 : AddZeroClass G] [inst_2 : ContinuousAdd G] {K U : Set G},\\n  IsCompact K → IsOpen U → K ⊆ U → ∃ V, V ∈ nhds 0 ∧ K + V ⊆ U\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given a compact set `K` inside an open set `U`, there is an open neighborhood `V` of\\n`0` such that `K + V ⊆ U`.\"},\n {\"theorem\":\n  \"∀ {G : Type w} [inst : TopologicalSpace G] [inst_1 : AddZeroClass G] [inst_2 : ContinuousAdd G] {K U : Set G},\\n  IsCompact K → IsOpen U → K ⊆ U → ∃ V, V ∈ nhds 0 ∧ V + K ⊆ U\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given a compact set `K` inside an open set `U`, there is an open neighborhood `V` of\\n`0` such that `V + K ⊆ U`.\"},\n {\"theorem\":\n  \"∀ {M : Type u_1} [inst : TopologicalSpace M] [inst_1 : Monoid M] [inst_2 : ContinuousMul M] {U : Set M},\\n  U ∈ nhds 1 → ∃ V, IsOpen V ∧ 1 ∈ V ∧ V * V ⊆ U\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given a neighborhood `U` of `1` there is an open neighborhood `V` of `1`\\nsuch that `VV ⊆ U`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {s U : Set α},\\n  (∀ (x : α), x ∈ s → U ∈ nhds x) → ∃ V, s ⊆ V ∧ IsOpen V ∧ V ⊆ U\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `U` is a neighborhood of each point of a set `s` then it is a neighborhood of `s`:\\nit contains an open set containing `s`. \"},\n {\"theorem\":\n  \"∀ {R : Type u} [inst : NonUnitalNonAssocRing R] (s : NonUnitalSubring R) {x : R}, x ∈ s → -x ∈ s\",\n  \"isProp\": true,\n  \"docString\": \"A non-unital subring is closed under negation. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {s U : Set α},\\n  U ∈ ⨆ (x : α) (_ : x ∈ s), nhds x → ∃ V, s ⊆ V ∧ IsOpen V ∧ V ⊆ U\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `U` is a neighborhood of each point of a set `s` then it is a neighborhood of s:\\nit contains an open set containing `s`. \"},\n {\"theorem\":\n  \"∀ {R : Type u} [inst : NonUnitalNonAssocRing R] (s : NonUnitalSubring R) {x y : R}, x ∈ s → y ∈ s → x * y ∈ s\",\n  \"isProp\": true,\n  \"docString\": \"A non-unital subring is closed under multiplication. \"},\n {\"theorem\":\n  \"∀ {Γ₀ : Type u_1} [inst : LinearOrderedCommGroupWithZero Γ₀], Filter.HasBasis (nhds 0) (fun γ => γ ≠ 0) Set.Iio\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a linearly ordered group with zero element adjoined, `U` is a neighbourhood of `0` if and\\nonly if there exists a nonzero element `γ₀` such that `Iio γ₀ ⊆ U`. \"},\n {\"theorem\":\n  \"∀ {R : Type u} [inst : NonAssocSemiring R] (s : Subsemiring R) {x y : R}, x ∈ s → y ∈ s → x + y ∈ s\",\n  \"isProp\": true,\n  \"docString\": \"A subsemiring is closed under addition. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : EMetricSpace α] {s : Set α}, IsClosed s → IsClosed {t | ↑t ⊆ s}\",\n  \"isProp\": true,\n  \"docString\": \"Subsets of a given closed subset form a closed set \"},\n {\"theorem\":\n  \"∀ {G : Type w} [inst : TopologicalSpace G] [inst_1 : MulOneClass G] [inst_2 : ContinuousMul G] {K U : Set G},\\n  IsCompact K → IsOpen U → K ⊆ U → ∃ V, V ∈ nhds 1 ∧ K * V ⊆ U\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given a compact set `K` inside an open set `U`, there is an open neighborhood `V` of `1`\\nsuch that `K * V ⊆ U`. \"},\n {\"theorem\":\n  \"∀ {V : Type u_2} {P : Type u_1} [inst : NormedAddCommGroup V] [inst_1 : NormedSpace ℝ V] [inst_2 : MetricSpace P]\\n  [inst_3 : NormedAddTorsor V P] {u : Set P}, IsOpen u → Set.Nonempty u → affineSpan ℝ u = ⊤\",\n  \"isProp\": true,\n  \"docString\": \"The affine span of a nonempty open set is `⊤`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] {C : Set α} [inst_1 : TopologicalSpace.SecondCountableTopology α],\\n  IsClosed C → ¬Set.Countable C → ∃ D, Perfect D ∧ Set.Nonempty D ∧ D ⊆ C\",\n  \"isProp\": true,\n  \"docString\":\n  \"Any uncountable closed set in a second countable space contains a nonempty perfect subset.\"},\n {\"theorem\":\n  \"∀ {G : Type w} [inst : TopologicalSpace G] [inst_1 : MulOneClass G] [inst_2 : ContinuousMul G] {K U : Set G},\\n  IsCompact K → IsOpen U → K ⊆ U → ∃ V, V ∈ nhds 1 ∧ V * K ⊆ U\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given a compact set `K` inside an open set `U`, there is an open neighborhood `V` of `1`\\nsuch that `V * K ⊆ U`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {S U : Set α},\\n  IsPreirreducible S → IsOpen U → Set.Nonempty (S ∩ U) → S ⊆ closure (S ∩ U)\",\n  \"isProp\": true,\n  \"docString\":\n  \"A nonempty open subset of a preirreducible subspace is dense in the subspace. \"},\n {\"theorem\":\n  \"∀ {R : Type u} [inst : NonUnitalNonAssocSemiring R] {s : Set R}, s ⊆ ↑(NonUnitalSubsemiring.closure s)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The non-unital subsemiring generated by a set includes the set. \"}]\n", "prompt_cons": "/-- Given an open neighborhood `U` of `0` there is an open neighborhood `V` of `0`\nsuch that `V + V ⊆ U`. -/\ntheorem ∀ {M : Type u_1} [inst : TopologicalSpace M] [inst_1 : AddMonoid M] [inst_2 : ContinuousAdd M] {U : Set M},\n  U ∈ nhds 0 → ∃ V, IsOpen V ∧ 0 ∈ V ∧ V + V ⊆ U :=\n\n/-- A non-unital subring is closed under addition. -/\ntheorem ∀ {R : Type u} [inst : NonUnitalNonAssocRing R] (s : NonUnitalSubring R) {x y : R}, x ∈ s → y ∈ s → x + y ∈ s :=\n\n/-- A non-unital subring is closed under subtraction -/\ntheorem ∀ {R : Type u} [inst : NonUnitalNonAssocRing R] (s : NonUnitalSubring R) {x y : R}, x ∈ s → y ∈ s → x - y ∈ s :=\n\n/-- Given two points `x ≠ y`, we can find neighbourhoods `x ∈ V₁ ⊆ U₁` and `y ∈ V₂ ⊆ U₂`,\nwith the `Vₖ` closed and the `Uₖ` open, such that the `Uₖ` are disjoint. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : T3Space α] {x y : α},\n  x ≠ y →\n    ∃ U₁,\n      U₁ ∈ nhds x ∧\n        ∃ V₁,\n          V₁ ∈ nhds x ∧\n            ∃ U₂,\n              U₂ ∈ nhds y ∧\n                ∃ V₂,\n                  V₂ ∈ nhds y ∧ IsClosed V₁ ∧ IsClosed V₂ ∧ IsOpen U₁ ∧ IsOpen U₂ ∧ V₁ ⊆ U₁ ∧ V₂ ⊆ U₂ ∧ Disjoint U₁ U₂ :=\n\n/-- Given a compact set `K` inside an open set `U`, there is an open neighborhood `V` of\n`0` such that `K + V ⊆ U`. -/\ntheorem ∀ {G : Type w} [inst : TopologicalSpace G] [inst_1 : AddZeroClass G] [inst_2 : ContinuousAdd G] {K U : Set G},\n  IsCompact K → IsOpen U → K ⊆ U → ∃ V, V ∈ nhds 0 ∧ K + V ⊆ U :=\n\n/-- Given a compact set `K` inside an open set `U`, there is an open neighborhood `V` of\n`0` such that `V + K ⊆ U`. -/\ntheorem ∀ {G : Type w} [inst : TopologicalSpace G] [inst_1 : AddZeroClass G] [inst_2 : ContinuousAdd G] {K U : Set G},\n  IsCompact K → IsOpen U → K ⊆ U → ∃ V, V ∈ nhds 0 ∧ V + K ⊆ U :=\n\n/-- Given a neighborhood `U` of `1` there is an open neighborhood `V` of `1`\nsuch that `VV ⊆ U`. -/\ntheorem ∀ {M : Type u_1} [inst : TopologicalSpace M] [inst_1 : Monoid M] [inst_2 : ContinuousMul M] {U : Set M},\n  U ∈ nhds 1 → ∃ V, IsOpen V ∧ 1 ∈ V ∧ V * V ⊆ U :=\n\n/-- If `U` is a neighborhood of each point of a set `s` then it is a neighborhood of `s`:\nit contains an open set containing `s`. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] {s U : Set α},\n  (∀ (x : α), x ∈ s → U ∈ nhds x) → ∃ V, s ⊆ V ∧ IsOpen V ∧ V ⊆ U :=\n\n/-- A non-unital subring is closed under negation. -/\ntheorem ∀ {R : Type u} [inst : NonUnitalNonAssocRing R] (s : NonUnitalSubring R) {x : R}, x ∈ s → -x ∈ s :=\n\n/-- If `U` is a neighborhood of each point of a set `s` then it is a neighborhood of s:\nit contains an open set containing `s`. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] {s U : Set α},\n  U ∈ ⨆ (x : α) (_ : x ∈ s), nhds x → ∃ V, s ⊆ V ∧ IsOpen V ∧ V ⊆ U :=\n\n/-- A non-unital subring is closed under multiplication. -/\ntheorem ∀ {R : Type u} [inst : NonUnitalNonAssocRing R] (s : NonUnitalSubring R) {x y : R}, x ∈ s → y ∈ s → x * y ∈ s :=\n\n/-- In a linearly ordered group with zero element adjoined, `U` is a neighbourhood of `0` if and\nonly if there exists a nonzero element `γ₀` such that `Iio γ₀ ⊆ U`. -/\ntheorem ∀ {Γ₀ : Type u_1} [inst : LinearOrderedCommGroupWithZero Γ₀], Filter.HasBasis (nhds 0) (fun γ => γ ≠ 0) Set.Iio :=\n\n/-- A subsemiring is closed under addition. -/\ntheorem ∀ {R : Type u} [inst : NonAssocSemiring R] (s : Subsemiring R) {x y : R}, x ∈ s → y ∈ s → x + y ∈ s :=\n\n/-- Subsets of a given closed subset form a closed set -/\ntheorem ∀ {α : Type u} [inst : EMetricSpace α] {s : Set α}, IsClosed s → IsClosed {t | ↑t ⊆ s} :=\n\n/-- Given a compact set `K` inside an open set `U`, there is an open neighborhood `V` of `1`\nsuch that `K * V ⊆ U`. -/\ntheorem ∀ {G : Type w} [inst : TopologicalSpace G] [inst_1 : MulOneClass G] [inst_2 : ContinuousMul G] {K U : Set G},\n  IsCompact K → IsOpen U → K ⊆ U → ∃ V, V ∈ nhds 1 ∧ K * V ⊆ U :=\n\n/-- The affine span of a nonempty open set is `⊤`. -/\ntheorem ∀ {V : Type u_2} {P : Type u_1} [inst : NormedAddCommGroup V] [inst_1 : NormedSpace ℝ V] [inst_2 : MetricSpace P]\n  [inst_3 : NormedAddTorsor V P] {u : Set P}, IsOpen u → Set.Nonempty u → affineSpan ℝ u = ⊤ :=\n\n/-- Any uncountable closed set in a second countable space contains a nonempty perfect subset. -/\ntheorem ∀ {α : Type u_1} [inst : TopologicalSpace α] {C : Set α} [inst_1 : TopologicalSpace.SecondCountableTopology α],\n  IsClosed C → ¬Set.Countable C → ∃ D, Perfect D ∧ Set.Nonempty D ∧ D ⊆ C :=\n\n/-- Given a compact set `K` inside an open set `U`, there is an open neighborhood `V` of `1`\nsuch that `V * K ⊆ U`. -/\ntheorem ∀ {G : Type w} [inst : TopologicalSpace G] [inst_1 : MulOneClass G] [inst_2 : ContinuousMul G] {K U : Set G},\n  IsCompact K → IsOpen U → K ⊆ U → ∃ V, V ∈ nhds 1 ∧ V * K ⊆ U :=\n\n/-- A nonempty open subset of a preirreducible subspace is dense in the subspace. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] {S U : Set α},\n  IsPreirreducible S → IsOpen U → Set.Nonempty (S ∩ U) → S ⊆ closure (S ∩ U) :=\n\n/-- The non-unital subsemiring generated by a set includes the set. -/\ntheorem ∀ {R : Type u} [inst : NonUnitalNonAssocSemiring R] {s : Set R}, s ⊆ ↑(NonUnitalSubsemiring.closure s) :=\n\n/-- Give an example of a nonempty subset `U` of `ℝ^2` such that `U` is closed under addition and under taking additive inverses (meaning `-u ∈ U` whenever `u ∈ U`), but `U` is not a subspace of `ℝ^2`. -/\ntheorem", "choices": ["example : ∃ (U : Set (ℝ × ℝ)), (∀ {x y : ℝ × ℝ}, x ∈ U → y ∈ U → x + y ∈ U) ∧ (∀ {x : ℝ × ℝ}, x ∈ U → -x ∈ U) ∧ ¬(vector_space.subset_span U) ", "/-- Given an open neighborhood `U` of `0` there is an open neighborhood `V` of `0`\nsuch that `V + V ⊆ U`. -/\nlemma sum_subset_open_nhds_zero {M : Type u_1} [TopologicalSpace M] [AddMonoid M] [ContinuousAdd M] {U : Set M}\n  (hU : U ∈ nhds 0) : ∃ V, IsOpen V ∧ 0 ∈ V ∧ V + V ⊆ U ", "/-- Given an open neighborhood `U` of `0` there is an open neighborhood `V` of `0`\nsuch that `V + V ⊆ U`. -/\ntheorem sub_additive_compact {M : Type u_1} [TopologicalSpace M] [AddMonoid M] [ContinuousAdd M] {U : Set M}\n  (hU : U ∈ nhds 0) : ∃ V, IsOpen V ∧ 0 ∈ V ∧ V + V ⊆ U ", "example : ∃ (U : Set (ℝ × ℝ)), (∀ (u v : ℝ × ℝ), u ∈ U → v ∈ U → u + v ∈ U) ∧ (∀ (u : ℝ × ℝ), u ∈ U → -u ∈ U) ∧ ¬(∀ (a : ℝ) (u : ℝ × ℝ), u ∈ U → (a * u.1, a * u.2) ∈ U) ", "/-- Given an open neighborhood `U` of `0` there is an open neighborhood `V` of `0`\nsuch that `V + V ⊆ U`. -/\ntheorem open_neighborhood_add_open_neighborhood {M : Type u_1} [TopologicalSpace M] [AddMonoid M] [ContinuousAdd M] {U : Set M} (h : U ∈ nhds 0) :\n  ∃ V, IsOpen V ∧ 0 ∈ V ∧ V + V ⊆ U ", "example : ∃ U : Set (ℝ × ℝ), (∀ u v ∈ U, u + v ∈ U) ∧ (∀ u ∈ U, -u ∈ U) ∧ ¬(∀ u v : ℝ × ℝ, (∀ a b, a • u + b • v ∈ U) → u ∈ U) ", "example : ∃ (U : Set (ℝ × ℝ)), (∀ u v ∈ U, u + v ∈ U) ∧ (∀ u ∈ U, -u ∈ U) ∧ ¬(∀ u v ∈ U, u - v ∈ U) ", "/-- Given an open neighborhood `U` of `0` there is an open neighborhood `V` of `0`\nsuch that `V + V ⊆ U`. -/\ntheorem open_add_set {M : Type u_1} [inst : TopologicalSpace M] [inst_1 : AddMonoid M] [inst_2 : ContinuousAdd M] {U : Set M}\n  (hU : U ∈ nhds 0) : ∃ V, IsOpen V ∧ 0 ∈ V ∧ V + V ⊆ U ", "/-- Given an open neighborhood `U` of `0` there is an open neighborhood `V` of `0`\nsuch that `V + V ⊆ U`. -/\ntheorem open_neigh_of_zero {M : Type u_1} [TopologicalSpace M] [AddMonoid M] [ContinuousAdd M] {U : Set M}\n  (hU : U ∈ nhds 0) : ∃ V, IsOpen V ∧ 0 ∈ V ∧ V + V ⊆ U ", "/-- Given an open neighborhood `U` of `0` there is an open neighborhood `V` of `0`\nsuch that `V + V ⊆ U`. -/\ntheorem open_neigh_zero_sum {M : Type u_1} [TopologicalSpace M] [AddMonoid M] [ContinuousAdd M] {U : Set M},\n  U ∈ nhds 0 → ∃ V, IsOpen V ∧ 0 ∈ V ∧ V + V ⊆ U "]}
{"docString": "Prove that the intersection of any collection of subspaces of `V` is a subspace of `V`.", "prompts": "[{\"theorem\":\n  \"∀ {K : Type u_3} {V : Type u_2} [inst : Field K] [inst_1 : AddCommGroup V] [inst_2 : Module K V] {ι : Sort u_1}\\n  (s : ι → Set (ℙ K V)),\\n  Projectivization.Subspace.span (⋃ (i : ι), s i) = ⨆ (i : ι), Projectivization.Subspace.span (s i)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The supremum of a collection of subspaces is equal to the span of the union of the\\ncollection. \"},\n {\"theorem\":\n  \"∀ {k : Type u_1} {V : Type u_2} {P : Type u_3} [inst : Ring k] [inst_1 : AddCommGroup V] [inst_2 : Module k V]\\n  [inst_3 : AddTorsor V P] {s1 s2 : AffineSubspace k P},\\n  AffineSubspace.direction s1 = AffineSubspace.direction s2 → Set.Nonempty (↑s1 ∩ ↑s2) → s1 = s2\",\n  \"isProp\": true,\n  \"docString\":\n  \"Two affine subspaces with the same direction and nonempty intersection are equal. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : T5Space α] {p : α → Prop}, T5Space { x // p x }\",\n  \"isProp\": true,\n  \"docString\": \"A subspace of a `T₅` space is a `T₅` space. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {s : Set α} {ι : Type v},\\n  IsCompact s →\\n    ∀ (Z : ι → Set α),\\n      (∀ (i : ι), IsClosed (Z i)) →\\n        (∀ (t : Finset ι), Set.Nonempty (s ∩ ⋂ (i : ι) (_ : i ∈ t), Z i)) → Set.Nonempty (s ∩ ⋂ (i : ι), Z i)\",\n  \"isProp\": true,\n  \"docString\":\n  \"To show that a compact set intersects the intersection of a family of closed sets,\\nit is sufficient to show that it intersects every finite subfamily. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {E : Type u_2} [inst : OrderedRing 𝕜] [inst_1 : AddCommGroup E] [inst_2 : Module 𝕜 E]\\n  (Q : AffineSubspace 𝕜 E), Convex 𝕜 ↑Q\",\n  \"isProp\": true,\n  \"docString\": \"Affine subspaces are convex. \"},\n {\"theorem\":\n  \"∀ {K : Type u_2} {V : Type u_1} [inst : Field K] [inst_1 : AddCommGroup V] [inst_2 : Module K V] (S T : Set (ℙ K V)),\\n  Projectivization.Subspace.span (S ∪ T) = Projectivization.Subspace.span S ⊔ Projectivization.Subspace.span T\",\n  \"isProp\": true,\n  \"docString\":\n  \"The supremum of two subspaces is equal to the span of their union. \"},\n {\"theorem\":\n  \"∀ {K : Type u_1} {V : Type u_2} [inst : Field K] [inst_1 : AddCommGroup V] [inst_2 : Module K V]\\n  (W : Projectivization.Subspace K V), Projectivization.Subspace.span ↑W = W\",\n  \"isProp\": true,\n  \"docString\": \"The span of a subspace is the subspace. \"},\n {\"theorem\":\n  \"∀ {K : Type u_2} {V : Type u_1} [inst : Field K] [inst_1 : AddCommGroup V] [inst_2 : Module K V] {S : Set (ℙ K V)}\\n  {W : Projectivization.Subspace K V}, Projectivization.Subspace.span S ≤ W ↔ S ⊆ ↑W\",\n  \"isProp\": true,\n  \"docString\":\n  \"The span of a set of points is contained in a subspace if and only if the set of points is\\ncontained in the subspace. \"},\n {\"theorem\":\n  \"∀ {k : Type u_1} {V : Type u_2} {P : Type u_3} [inst : Ring k] [inst_1 : AddCommGroup V] [inst_2 : Module k V]\\n  [S : AddTorsor V P] (s1 s2 : AffineSubspace k P), s1 ≤ s2 ↔ ↑s1 ⊆ ↑s2\",\n  \"isProp\": true,\n  \"docString\":\n  \"The `≤` order on subspaces is the same as that on the corresponding sets. \"},\n {\"theorem\":\n  \"∀ {k : Type u_1} {V : Type u_2} {P : Type u_3} [inst : Ring k] [inst_1 : AddCommGroup V] [inst_2 : Module k V]\\n  [S : AddTorsor V P] (s : AffineSubspace k P), affineSpan k ↑s = s\",\n  \"isProp\": true,\n  \"docString\":\n  \"Coercing a subspace to a set then taking the affine span produces the original subspace. \"},\n {\"theorem\":\n  \"∀ {K : Type v} {V : Type w} [inst : Field K] [inst_1 : AddCommGroup V] [inst_2 : Module K V] (f : Module.End K V),\\n  CompleteLattice.Independent (Module.End.eigenspace f)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The eigenspaces of a linear operator form an independent family of subspaces of `V`.  That is,\\nany eigenspace has trivial intersection with the span of all the other eigenspaces. \"},\n {\"theorem\":\n  \"∀ {k : Type u_1} {V : Type u_2} {P : Type u_3} [inst : Ring k] [inst_1 : AddCommGroup V] [inst_2 : Module k V]\\n  [S : AddTorsor V P] (s1 s2 : AffineSubspace k P), ↑s1 ⊓ ↑s2 = ↑s1 ∩ ↑s2\",\n  \"isProp\": true,\n  \"docString\":\n  \"The inf of two affine subspaces, coerced to a set, is the intersection of the two sets of\\npoints. \"},\n {\"theorem\":\n  \"∀ {M : Type u_1} [inst : Monoid M] {s₁ s₂ : Set M}, IsSubmonoid s₁ → IsSubmonoid s₂ → IsSubmonoid (s₁ ∩ s₂)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The intersection of two submonoids of a monoid `M` is a submonoid of `M`. \"},\n {\"theorem\":\n  \"∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V]\\n  [inst_3 : FiniteDimensional K V] (S : Submodule K V), FiniteDimensional K { x // x ∈ S }\",\n  \"isProp\": true,\n  \"docString\":\n  \"A subspace of a finite-dimensional space is also finite-dimensional. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_2} {E : Type u_1} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\\n  (s : Set (Submodule 𝕜 E)), ⨅ (K : Submodule 𝕜 E) (_ : K ∈ s), Kᗮ = (sSup s)ᗮ\",\n  \"isProp\": true,\n  \"docString\":\n  \"The inf of a set of orthogonal subspaces equals the subspace orthogonal to the sup. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u} [inst : NontriviallyNormedField 𝕜] {E : Type v} [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : CompleteSpace 𝕜] (s : Submodule 𝕜 E)\\n  [inst_4 : FiniteDimensional 𝕜 { x // x ∈ s }], IsClosed ↑s\",\n  \"isProp\": true,\n  \"docString\": \"A finite-dimensional subspace is closed. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] [self : SigmaCompactSpace α],\\n  ∃ K, (∀ (n : ℕ), IsCompact (K n)) ∧ ⋃ (n : ℕ), K n = Set.univ\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a σ-compact space, there exists (by definition) a countable collection of compact subspaces\\nthat cover the entire space. \"},\n {\"theorem\":\n  \"∀ {k : Type u_1} {V : Type u_2} {P : Type u_3} [inst : Ring k] [inst_1 : AddCommGroup V] [inst_2 : Module k V]\\n  [inst_3 : AddTorsor V P] {s₁ s₂ : AffineSubspace k P} {p : P},\\n  p ∈ s₁ → p ∈ s₂ → (s₁ = s₂ ↔ AffineSubspace.direction s₁ = AffineSubspace.direction s₂)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Two affine subspaces with nonempty intersection are equal if and only if their directions are\\nequal. \"},\n {\"theorem\":\n  \"∀ {M : Type u_2} [inst : Monoid M] {ι : Sort u_1} {s : ι → Set M},\\n  (∀ (y : ι), IsSubmonoid (s y)) → IsSubmonoid (Set.iInter s)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The intersection of an indexed set of submonoids of a monoid `M` is a submonoid of `M`. \"},\n {\"theorem\":\n  \"∀ {K : Type u_2} {V : Type u_1} [inst : Field K] [inst_1 : AddCommGroup V] [inst_2 : Module K V] {S : Set (ℙ K V)}\\n  {W : Projectivization.Subspace K V},\\n  S ⊆ ↑W → W ≤ Projectivization.Subspace.span S → Projectivization.Subspace.span S = W\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a set of points in projective space is contained in a subspace, and that subspace is\\ncontained in the span of the set of points, then the span of the set of points is equal to\\nthe subspace. \"}]\n", "prompt_cons": "/-- The supremum of a collection of subspaces is equal to the span of the union of the\ncollection. -/\ntheorem ∀ {K : Type u_3} {V : Type u_2} [inst : Field K] [inst_1 : AddCommGroup V] [inst_2 : Module K V] {ι : Sort u_1}\n  (s : ι → Set (ℙ K V)),\n  Projectivization.Subspace.span (⋃ (i : ι), s i) = ⨆ (i : ι), Projectivization.Subspace.span (s i) :=\n\n/-- Two affine subspaces with the same direction and nonempty intersection are equal. -/\ntheorem ∀ {k : Type u_1} {V : Type u_2} {P : Type u_3} [inst : Ring k] [inst_1 : AddCommGroup V] [inst_2 : Module k V]\n  [inst_3 : AddTorsor V P] {s1 s2 : AffineSubspace k P},\n  AffineSubspace.direction s1 = AffineSubspace.direction s2 → Set.Nonempty (↑s1 ∩ ↑s2) → s1 = s2 :=\n\n/-- A subspace of a `T₅` space is a `T₅` space. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : T5Space α] {p : α → Prop}, T5Space { x // p x } :=\n\n/-- To show that a compact set intersects the intersection of a family of closed sets,\nit is sufficient to show that it intersects every finite subfamily. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] {s : Set α} {ι : Type v},\n  IsCompact s →\n    ∀ (Z : ι → Set α),\n      (∀ (i : ι), IsClosed (Z i)) →\n        (∀ (t : Finset ι), Set.Nonempty (s ∩ ⋂ (i : ι) (_ : i ∈ t), Z i)) → Set.Nonempty (s ∩ ⋂ (i : ι), Z i) :=\n\n/-- Affine subspaces are convex. -/\ntheorem ∀ {𝕜 : Type u_1} {E : Type u_2} [inst : OrderedRing 𝕜] [inst_1 : AddCommGroup E] [inst_2 : Module 𝕜 E]\n  (Q : AffineSubspace 𝕜 E), Convex 𝕜 ↑Q :=\n\n/-- The supremum of two subspaces is equal to the span of their union. -/\ntheorem ∀ {K : Type u_2} {V : Type u_1} [inst : Field K] [inst_1 : AddCommGroup V] [inst_2 : Module K V] (S T : Set (ℙ K V)),\n  Projectivization.Subspace.span (S ∪ T) = Projectivization.Subspace.span S ⊔ Projectivization.Subspace.span T :=\n\n/-- The span of a subspace is the subspace. -/\ntheorem ∀ {K : Type u_1} {V : Type u_2} [inst : Field K] [inst_1 : AddCommGroup V] [inst_2 : Module K V]\n  (W : Projectivization.Subspace K V), Projectivization.Subspace.span ↑W = W :=\n\n/-- The span of a set of points is contained in a subspace if and only if the set of points is\ncontained in the subspace. -/\ntheorem ∀ {K : Type u_2} {V : Type u_1} [inst : Field K] [inst_1 : AddCommGroup V] [inst_2 : Module K V] {S : Set (ℙ K V)}\n  {W : Projectivization.Subspace K V}, Projectivization.Subspace.span S ≤ W ↔ S ⊆ ↑W :=\n\n/-- The `≤` order on subspaces is the same as that on the corresponding sets. -/\ntheorem ∀ {k : Type u_1} {V : Type u_2} {P : Type u_3} [inst : Ring k] [inst_1 : AddCommGroup V] [inst_2 : Module k V]\n  [S : AddTorsor V P] (s1 s2 : AffineSubspace k P), s1 ≤ s2 ↔ ↑s1 ⊆ ↑s2 :=\n\n/-- Coercing a subspace to a set then taking the affine span produces the original subspace. -/\ntheorem ∀ {k : Type u_1} {V : Type u_2} {P : Type u_3} [inst : Ring k] [inst_1 : AddCommGroup V] [inst_2 : Module k V]\n  [S : AddTorsor V P] (s : AffineSubspace k P), affineSpan k ↑s = s :=\n\n/-- The eigenspaces of a linear operator form an independent family of subspaces of `V`.  That is,\nany eigenspace has trivial intersection with the span of all the other eigenspaces. -/\ntheorem ∀ {K : Type v} {V : Type w} [inst : Field K] [inst_1 : AddCommGroup V] [inst_2 : Module K V] (f : Module.End K V),\n  CompleteLattice.Independent (Module.End.eigenspace f) :=\n\n/-- The inf of two affine subspaces, coerced to a set, is the intersection of the two sets of\npoints. -/\ntheorem ∀ {k : Type u_1} {V : Type u_2} {P : Type u_3} [inst : Ring k] [inst_1 : AddCommGroup V] [inst_2 : Module k V]\n  [S : AddTorsor V P] (s1 s2 : AffineSubspace k P), ↑s1 ⊓ ↑s2 = ↑s1 ∩ ↑s2 :=\n\n/-- The intersection of two submonoids of a monoid `M` is a submonoid of `M`. -/\ntheorem ∀ {M : Type u_1} [inst : Monoid M] {s₁ s₂ : Set M}, IsSubmonoid s₁ → IsSubmonoid s₂ → IsSubmonoid (s₁ ∩ s₂) :=\n\n/-- A subspace of a finite-dimensional space is also finite-dimensional. -/\ntheorem ∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V]\n  [inst_3 : FiniteDimensional K V] (S : Submodule K V), FiniteDimensional K { x // x ∈ S } :=\n\n/-- The inf of a set of orthogonal subspaces equals the subspace orthogonal to the sup. -/\ntheorem ∀ {𝕜 : Type u_2} {E : Type u_1} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  (s : Set (Submodule 𝕜 E)), ⨅ (K : Submodule 𝕜 E) (_ : K ∈ s), Kᗮ = (sSup s)ᗮ :=\n\n/-- A finite-dimensional subspace is closed. -/\ntheorem ∀ {𝕜 : Type u} [inst : NontriviallyNormedField 𝕜] {E : Type v} [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : CompleteSpace 𝕜] (s : Submodule 𝕜 E)\n  [inst_4 : FiniteDimensional 𝕜 { x // x ∈ s }], IsClosed ↑s :=\n\n/-- In a σ-compact space, there exists (by definition) a countable collection of compact subspaces\nthat cover the entire space. -/\ntheorem ∀ {α : Type u_1} [inst : TopologicalSpace α] [self : SigmaCompactSpace α],\n  ∃ K, (∀ (n : ℕ), IsCompact (K n)) ∧ ⋃ (n : ℕ), K n = Set.univ :=\n\n/-- Two affine subspaces with nonempty intersection are equal if and only if their directions are\nequal. -/\ntheorem ∀ {k : Type u_1} {V : Type u_2} {P : Type u_3} [inst : Ring k] [inst_1 : AddCommGroup V] [inst_2 : Module k V]\n  [inst_3 : AddTorsor V P] {s₁ s₂ : AffineSubspace k P} {p : P},\n  p ∈ s₁ → p ∈ s₂ → (s₁ = s₂ ↔ AffineSubspace.direction s₁ = AffineSubspace.direction s₂) :=\n\n/-- The intersection of an indexed set of submonoids of a monoid `M` is a submonoid of `M`. -/\ntheorem ∀ {M : Type u_2} [inst : Monoid M] {ι : Sort u_1} {s : ι → Set M},\n  (∀ (y : ι), IsSubmonoid (s y)) → IsSubmonoid (Set.iInter s) :=\n\n/-- If a set of points in projective space is contained in a subspace, and that subspace is\ncontained in the span of the set of points, then the span of the set of points is equal to\nthe subspace. -/\ntheorem ∀ {K : Type u_2} {V : Type u_1} [inst : Field K] [inst_1 : AddCommGroup V] [inst_2 : Module K V] {S : Set (ℙ K V)}\n  {W : Projectivization.Subspace K V},\n  S ⊆ ↑W → W ≤ Projectivization.Subspace.span S → Projectivization.Subspace.span S = W :=\n\n/-- Prove that the intersection of any collection of subspaces of `V` is a subspace of `V`. -/\ntheorem", "choices": ["∀ {K : Type u_1} {V : Type u_2} [inst : Field K] [inst_1 : AddCommGroup V] [inst_2 : Module K V] {ι : Sort u_3}\n  (s : ι → Projectivization.Subspace K V),\n  IsSubspace (Set.Interₓ fun i => ↑(s i)) ", "∀ {K : Type u} {V : Type v} [inst : Field K] [inst_1 : AddCommGroup V] [inst_2 : Module K V] {ι : Type u_1}\n  {s : ι → Submodule K V}, Submodule K V (⋂ (i : ι), s i) ", "∀ {K : Type u_1} {V : Type u_2} [inst : Field K] [inst_1 : AddCommGroup V] [inst_2 : Module K V] {ι : Sort u_3}\n  (s : ι → Submodule K V),\n  IsSubspace K (⋂ (i : ι), s i) ", "∀ {K : Type u_3} {V : Type u_2} [inst : Field K] [inst_1 : AddCommGroup V] [inst_2 : Module K V] {ι : Sort u_1}\n  (s : ι → Set (ℙ K V)),\n  Projectivization.Subspace (⋂ (i : ι), s i) = ⨅ (i : ι), Projectivization.Subspace (s i) ", "∀ {K : Type u_1} {V : Type u_2} [inst : Field K] [inst_1 : AddCommGroup V] [inst_2 : Module K V] {ι : Sort u_3}\n  (s : ι → Projectivization.Subspace K V),\n  Projectivization.Subspace (K ", "∀ {K : Type u_1} {V : Type u_2} [inst : Field K] [inst_1 : AddCommGroup V] [inst_2 : Module K V] (s : Set (ℙ K V)),\n  IsSubspace (⋂₀ s) ", "∀ {K : Type u_1} {V : Type u_2} [inst : Field K] [inst_1 : AddCommGroup V] [inst_2 : Module K V] {ι : Type u_3}\n  (s : ι → Projectivization.Subspace K V), IsSubspace (⋂ (i : ι), ↑(s i)) ", "∀ {K : Type u} {V : Type v} [inst : Field K] [inst_1 : AddCommGroup V] [inst_2 : Module K V] {ι : Type u_1}\n  (X : ι → Submodule K V),\n  IsSubmodule (⋂ (i : ι), X i) ", "∀ {K : Type u} {V : Type v} [inst : Field K] [inst_1 : AddCommGroup V] [inst_2 : Module K V] {ι : Sort u_1}\n  (s : ι → Submodule K V), IsSubmodule (⋂ (i : ι), s i) ", "∀ {K : Type u} {V : Type v} [inst : Field K] [inst_1 : AddCommGroup V] [inst_2 : Module K V] {ι : Sort u_1}\n  (s : ι → Submodule K V), Submodule K V "]}
{"docString": "Show that every linear map from a one-dimensional vector space to itself is multiplication by some scalar. More precisely, prove that if `dim V = 1` and `T ∈ L(V, V)`, then there exists `a ∈ F` such that `T v = a v` for all `v ∈ V`.", "prompts": "[{\"theorem\":\n  \"∀ {R : Type u} {M : Type v} {M₂ : Type w} [inst : Semiring R] [inst_1 : AddCommMonoid M] [inst_2 : AddCommMonoid M₂]\\n  [inst_3 : Module R M] [inst_4 : Module R M₂] {f : M → M₂}, IsLinearMap R f → ∀ (c : R) (x : M), f (c • x) = c • f x\",\n  \"isProp\": true,\n  \"docString\": \"A linear map preserves scalar multiplication. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} [inst : NontriviallyNormedField 𝕜] {V : Type u_2} [inst_1 : NormedAddCommGroup V]\\n  [inst_2 : NormedSpace 𝕜 V],\\n  Smooth (ModelWithCorners.prod (modelWithCornersSelf 𝕜 𝕜) (modelWithCornersSelf 𝕜 V)) (modelWithCornersSelf 𝕜 V)\\n    fun p => p.fst • p.snd\",\n  \"isProp\": true,\n  \"docString\":\n  \"On any vector space, multiplication by a scalar is a smooth operation. \"},\n {\"theorem\":\n  \"∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V]\\n  [inst_3 : FiniteDimensional K V] {f g : V →ₗ[K] V}, f * g = 1 → g * f = 1\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a finite-dimensional space, if linear maps are inverse to each other on one side then they\\nare also inverse to each other on the other side. \"},\n {\"theorem\":\n  \"∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V]\\n  [inst_3 : FiniteDimensional K V] {f : V →ₗ[K] V}, Function.Injective ↑f → Function.Surjective ↑f\",\n  \"isProp\": true,\n  \"docString\":\n  \"On a finite-dimensional space, an injective linear map is surjective. \"},\n {\"theorem\":\n  \"∀ {R : Type u_1} {M : Type u_2} [inst : Semiring R] [inst_1 : AddCommGroup M] (self : Module.Core R M) (x : M),\\n  1 • x = x\",\n  \"isProp\": true,\n  \"docString\": \"Scalar multiplication by one is the identity. \"},\n {\"theorem\":\n  \"∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V]\\n  [inst_3 : FiniteDimensional K V] {f g : V →ₗ[K] V}, f * g = 1 ↔ g * f = 1\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a finite-dimensional space, linear maps are inverse to each other on one side if and only if\\nthey are inverse to each other on the other side. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {E : Type u_2} {F : Type u_3} [inst : Field 𝕜] [inst_1 : TopologicalSpace 𝕜] [inst_2 : AddCommGroup E]\\n  [inst_3 : Module 𝕜 E] [inst_4 : TopologicalSpace E] [inst_5 : AddCommGroup F] [inst_6 : Module 𝕜 F]\\n  [inst_7 : TopologicalSpace F] [inst_8 : TopologicalAddGroup F] [inst_9 : ContinuousSMul 𝕜 F]\\n  [inst_10 : FiniteDimensional 𝕜 E] [inst_11 : FiniteDimensional 𝕜 F], FiniteDimensional 𝕜 (E →L[𝕜] F)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The space of continuous linear maps between finite-dimensional spaces is finite-dimensional. \"},\n {\"theorem\":\n  \"∀ {M : Type u_2} [inst : AddCommGroup M] {𝕜 : Type u_1} [inst_1 : Field 𝕜] [inst_2 : Module 𝕜 M] (f : M →ₗ[𝕜] M),\\n  ↑LinearMap.det f ≠ 1 → FiniteDimensional 𝕜 M\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a linear map has determinant different from `1`, then the space is finite-dimensional. \"},\n {\"theorem\":\n  \"∀ {R : Type u} [inst : Ring R] {M : Type v} [inst_1 : AddCommGroup M] [inst_2 : Module R M] {M₁ : Type v}\\n  [inst_3 : AddCommGroup M₁] [inst_4 : Module R M₁], (M ≃ₗ[R] M₁) → Module.rank R M = Module.rank R M₁\",\n  \"isProp\": true,\n  \"docString\":\n  \"Two linearly equivalent vector spaces have the same dimension. \"},\n {\"theorem\":\n  \"∀ {M : Type u_1} {M₂ : Type u_2} [inst : AddCommMonoid M] [inst_1 : AddCommMonoid M₂] {R : Type u_3} {S : Type u_4}\\n  [inst_2 : Semiring S] [inst_3 : SMul R M] [inst_4 : Module S M] [inst_5 : SMul R M₂] [inst_6 : Module S M₂]\\n  [self : LinearMap.CompatibleSMul M M₂ R S] (fₗ : M →ₗ[S] M₂) (c : R) (x : M), ↑fₗ (c • x) = c • ↑fₗ x\",\n  \"isProp\": true,\n  \"docString\":\n  \"Scalar multiplication by `R` of `M` can be moved through linear maps. \"},\n {\"theorem\":\n  \"∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V],\\n  Module.rank K V ≤ 1 ↔ ∃ v₀, ∀ (v : V), ∃ r, r • v₀ = v\",\n  \"isProp\": true,\n  \"docString\":\n  \"A vector space has dimension at most `1` if and only if there is a\\nsingle vector of which all vectors are multiples. \"},\n {\"theorem\":\n  \"∀ {F : Type u_1} [inst : NormedAddCommGroup F] [inst_1 : InnerProductSpace ℝ F] (x : F) (r : ℝ),\\n  inner x (r • x) = r * (‖x‖ * ‖x‖)\",\n  \"isProp\": true,\n  \"docString\": \"The inner product of a vector with a multiple of itself. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {E : Type u_2} {Fₗ : Type u_3} [inst : NormedAddCommGroup E] [inst_1 : NormedAddCommGroup Fₗ]\\n  [inst_2 : NontriviallyNormedField 𝕜] [inst_3 : NormedSpace 𝕜 E] [inst_4 : NormedSpace 𝕜 Fₗ] (c : E →L[𝕜] 𝕜) (f : Fₗ),\\n  ‖ContinuousLinearMap.smulRight c f‖ = ‖c‖ * ‖f‖\",\n  \"isProp\": true,\n  \"docString\":\n  \"The norm of the tensor product of a scalar linear map and of an element of a normed space\\nis the product of the norms. \"},\n {\"theorem\":\n  \"∀ (K : Type u_2) {V : Type u_1} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V] (v w : V)\\n  (hv : v ≠ 0) (hw : w ≠ 0), Projectivization.mk K v hv = Projectivization.mk K w hw ↔ ∃ a, a • w = v\",\n  \"isProp\": true,\n  \"docString\":\n  \"Two nonzero vectors go to the same point in projective space if and only if one is\\na scalar multiple of the other. \"},\n {\"theorem\":\n  \"∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V]\\n  [inst_3 : FiniteDimensional K V] {f : V →ₗ[K] V}, Function.Injective ↑f ↔ Function.Surjective ↑f\",\n  \"isProp\": true,\n  \"docString\":\n  \"On a finite-dimensional space, a linear map is injective if and only if it is surjective. \"},\n {\"theorem\":\n  \"∀ {E : Type u_2} [inst : AddCommGroup E] [inst_1 : Module ℝ E] [inst_2 : TopologicalSpace E]\\n  [inst_3 : ContinuousSMul ℝ E] {F : Type u_3} [inst_4 : AddCommGroup F] [inst_5 : Module ℝ F]\\n  [inst_6 : TopologicalSpace F] [inst_7 : ContinuousSMul ℝ F] [inst_8 : T2Space F] {G : Type u_1}\\n  [inst_9 : AddMonoidHomClass G E F] (f : G), Continuous ↑f → ∀ (c : ℝ) (x : E), ↑f (c • x) = c • ↑f x\",\n  \"isProp\": true,\n  \"docString\":\n  \"A continuous additive map between two vector spaces over `ℝ` is `ℝ`-linear. \"},\n {\"theorem\":\n  \"∀ {R : Type u_1} {S : Type u_2} {M₃ : Type u_3} [inst : Semiring R] [inst_1 : Semiring S] [inst_2 : AddCommMonoid M₃]\\n  [inst_3 : Module S M₃] {σ : R →+* S} {f g : R →ₛₗ[σ] M₃}, ↑f 1 = ↑g 1 → f = g\",\n  \"isProp\": true,\n  \"docString\":\n  \"If two `σ`-linear maps from `R` are equal on `1`, then they are equal. \"},\n {\"theorem\":\n  \"∀ {R : Type u} {ι : Type u'} {M₁ : ι → Type v} {M₂ : Type w} [inst : Semiring R]\\n  [inst_1 : (i : ι) → AddCommMonoid (M₁ i)] [inst_2 : AddCommMonoid M₂] [inst_3 : (i : ι) → Module R (M₁ i)]\\n  [inst_4 : Module R M₂] (self : MultilinearMap R M₁ M₂) [inst_5 : DecidableEq ι] (m : (i : ι) → M₁ i) (i : ι) (c : R)\\n  (x : M₁ i),\\n  MultilinearMap.toFun self (Function.update m i (c • x)) = c • MultilinearMap.toFun self (Function.update m i x)\",\n  \"isProp\": true,\n  \"docString\":\n  \"A multilinear map is compatible with scalar multiplication in every argument. \"},\n {\"theorem\":\n  \"∀ {ι : Type u_5} {R : Type u_1} {M : Type u_3} [inst : Semiring R] [inst_1 : AddCommMonoid M] [inst_2 : Module R M]\\n  (b : Basis ι R M) {R₁ : Type u_2} [inst_3 : Semiring R₁] {σ : R →+* R₁} {M₁ : Type u_4} [inst_4 : AddCommMonoid M₁]\\n  [inst_5 : Module R₁ M₁] {f₁ f₂ : M →ₛₗ[σ] M₁}, (∀ (i : ι), ↑f₁ (↑b i) = ↑f₂ (↑b i)) → f₁ = f₂\",\n  \"isProp\": true,\n  \"docString\":\n  \"Two linear maps are equal if they are equal on basis vectors. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} {F : Type u_2} [inst : SeminormedAddCommGroup E] [inst_1 : SeminormedAddCommGroup F]\\n  [inst_2 : NormedSpace ℝ E] [inst_3 : NormedSpace ℝ F] {f : E →L[ℝ] F} {C : NNReal},\\n  (∀ (x : E), ‖x‖₊ = 1 → ‖↑f x‖₊ ≤ C) → ‖f‖₊ ≤ C\",\n  \"isProp\": true,\n  \"docString\":\n  \"For a continuous real linear map `f`, if one controls the norm of every `f x`, `‖x‖₊ = 1`, then\\none controls the norm of `f`. \"}]\n", "prompt_cons": "/-- A linear map preserves scalar multiplication. -/\ntheorem ∀ {R : Type u} {M : Type v} {M₂ : Type w} [inst : Semiring R] [inst_1 : AddCommMonoid M] [inst_2 : AddCommMonoid M₂]\n  [inst_3 : Module R M] [inst_4 : Module R M₂] {f : M → M₂}, IsLinearMap R f → ∀ (c : R) (x : M), f (c • x) = c • f x :=\n\n/-- On any vector space, multiplication by a scalar is a smooth operation. -/\ntheorem ∀ {𝕜 : Type u_1} [inst : NontriviallyNormedField 𝕜] {V : Type u_2} [inst_1 : NormedAddCommGroup V]\n  [inst_2 : NormedSpace 𝕜 V],\n  Smooth (ModelWithCorners.prod (modelWithCornersSelf 𝕜 𝕜) (modelWithCornersSelf 𝕜 V)) (modelWithCornersSelf 𝕜 V)\n    fun p => p.fst • p.snd :=\n\n/-- In a finite-dimensional space, if linear maps are inverse to each other on one side then they\nare also inverse to each other on the other side. -/\ntheorem ∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V]\n  [inst_3 : FiniteDimensional K V] {f g : V →ₗ[K] V}, f * g = 1 → g * f = 1 :=\n\n/-- On a finite-dimensional space, an injective linear map is surjective. -/\ntheorem ∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V]\n  [inst_3 : FiniteDimensional K V] {f : V →ₗ[K] V}, Function.Injective ↑f → Function.Surjective ↑f :=\n\n/-- Scalar multiplication by one is the identity. -/\ntheorem ∀ {R : Type u_1} {M : Type u_2} [inst : Semiring R] [inst_1 : AddCommGroup M] (self : Module.Core R M) (x : M),\n  1 • x = x :=\n\n/-- In a finite-dimensional space, linear maps are inverse to each other on one side if and only if\nthey are inverse to each other on the other side. -/\ntheorem ∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V]\n  [inst_3 : FiniteDimensional K V] {f g : V →ₗ[K] V}, f * g = 1 ↔ g * f = 1 :=\n\n/-- The space of continuous linear maps between finite-dimensional spaces is finite-dimensional. -/\ntheorem ∀ {𝕜 : Type u_1} {E : Type u_2} {F : Type u_3} [inst : Field 𝕜] [inst_1 : TopologicalSpace 𝕜] [inst_2 : AddCommGroup E]\n  [inst_3 : Module 𝕜 E] [inst_4 : TopologicalSpace E] [inst_5 : AddCommGroup F] [inst_6 : Module 𝕜 F]\n  [inst_7 : TopologicalSpace F] [inst_8 : TopologicalAddGroup F] [inst_9 : ContinuousSMul 𝕜 F]\n  [inst_10 : FiniteDimensional 𝕜 E] [inst_11 : FiniteDimensional 𝕜 F], FiniteDimensional 𝕜 (E →L[𝕜] F) :=\n\n/-- If a linear map has determinant different from `1`, then the space is finite-dimensional. -/\ntheorem ∀ {M : Type u_2} [inst : AddCommGroup M] {𝕜 : Type u_1} [inst_1 : Field 𝕜] [inst_2 : Module 𝕜 M] (f : M →ₗ[𝕜] M),\n  ↑LinearMap.det f ≠ 1 → FiniteDimensional 𝕜 M :=\n\n/-- Two linearly equivalent vector spaces have the same dimension. -/\ntheorem ∀ {R : Type u} [inst : Ring R] {M : Type v} [inst_1 : AddCommGroup M] [inst_2 : Module R M] {M₁ : Type v}\n  [inst_3 : AddCommGroup M₁] [inst_4 : Module R M₁], (M ≃ₗ[R] M₁) → Module.rank R M = Module.rank R M₁ :=\n\n/-- Scalar multiplication by `R` of `M` can be moved through linear maps. -/\ntheorem ∀ {M : Type u_1} {M₂ : Type u_2} [inst : AddCommMonoid M] [inst_1 : AddCommMonoid M₂] {R : Type u_3} {S : Type u_4}\n  [inst_2 : Semiring S] [inst_3 : SMul R M] [inst_4 : Module S M] [inst_5 : SMul R M₂] [inst_6 : Module S M₂]\n  [self : LinearMap.CompatibleSMul M M₂ R S] (fₗ : M →ₗ[S] M₂) (c : R) (x : M), ↑fₗ (c • x) = c • ↑fₗ x :=\n\n/-- A vector space has dimension at most `1` if and only if there is a\nsingle vector of which all vectors are multiples. -/\ntheorem ∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V],\n  Module.rank K V ≤ 1 ↔ ∃ v₀, ∀ (v : V), ∃ r, r • v₀ = v :=\n\n/-- The inner product of a vector with a multiple of itself. -/\ntheorem ∀ {F : Type u_1} [inst : NormedAddCommGroup F] [inst_1 : InnerProductSpace ℝ F] (x : F) (r : ℝ),\n  inner x (r • x) = r * (‖x‖ * ‖x‖) :=\n\n/-- The norm of the tensor product of a scalar linear map and of an element of a normed space\nis the product of the norms. -/\ntheorem ∀ {𝕜 : Type u_1} {E : Type u_2} {Fₗ : Type u_3} [inst : NormedAddCommGroup E] [inst_1 : NormedAddCommGroup Fₗ]\n  [inst_2 : NontriviallyNormedField 𝕜] [inst_3 : NormedSpace 𝕜 E] [inst_4 : NormedSpace 𝕜 Fₗ] (c : E →L[𝕜] 𝕜) (f : Fₗ),\n  ‖ContinuousLinearMap.smulRight c f‖ = ‖c‖ * ‖f‖ :=\n\n/-- Two nonzero vectors go to the same point in projective space if and only if one is\na scalar multiple of the other. -/\ntheorem ∀ (K : Type u_2) {V : Type u_1} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V] (v w : V)\n  (hv : v ≠ 0) (hw : w ≠ 0), Projectivization.mk K v hv = Projectivization.mk K w hw ↔ ∃ a, a • w = v :=\n\n/-- On a finite-dimensional space, a linear map is injective if and only if it is surjective. -/\ntheorem ∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V]\n  [inst_3 : FiniteDimensional K V] {f : V →ₗ[K] V}, Function.Injective ↑f ↔ Function.Surjective ↑f :=\n\n/-- A continuous additive map between two vector spaces over `ℝ` is `ℝ`-linear. -/\ntheorem ∀ {E : Type u_2} [inst : AddCommGroup E] [inst_1 : Module ℝ E] [inst_2 : TopologicalSpace E]\n  [inst_3 : ContinuousSMul ℝ E] {F : Type u_3} [inst_4 : AddCommGroup F] [inst_5 : Module ℝ F]\n  [inst_6 : TopologicalSpace F] [inst_7 : ContinuousSMul ℝ F] [inst_8 : T2Space F] {G : Type u_1}\n  [inst_9 : AddMonoidHomClass G E F] (f : G), Continuous ↑f → ∀ (c : ℝ) (x : E), ↑f (c • x) = c • ↑f x :=\n\n/-- If two `σ`-linear maps from `R` are equal on `1`, then they are equal. -/\ntheorem ∀ {R : Type u_1} {S : Type u_2} {M₃ : Type u_3} [inst : Semiring R] [inst_1 : Semiring S] [inst_2 : AddCommMonoid M₃]\n  [inst_3 : Module S M₃] {σ : R →+* S} {f g : R →ₛₗ[σ] M₃}, ↑f 1 = ↑g 1 → f = g :=\n\n/-- A multilinear map is compatible with scalar multiplication in every argument. -/\ntheorem ∀ {R : Type u} {ι : Type u'} {M₁ : ι → Type v} {M₂ : Type w} [inst : Semiring R]\n  [inst_1 : (i : ι) → AddCommMonoid (M₁ i)] [inst_2 : AddCommMonoid M₂] [inst_3 : (i : ι) → Module R (M₁ i)]\n  [inst_4 : Module R M₂] (self : MultilinearMap R M₁ M₂) [inst_5 : DecidableEq ι] (m : (i : ι) → M₁ i) (i : ι) (c : R)\n  (x : M₁ i),\n  MultilinearMap.toFun self (Function.update m i (c • x)) = c • MultilinearMap.toFun self (Function.update m i x) :=\n\n/-- Two linear maps are equal if they are equal on basis vectors. -/\ntheorem ∀ {ι : Type u_5} {R : Type u_1} {M : Type u_3} [inst : Semiring R] [inst_1 : AddCommMonoid M] [inst_2 : Module R M]\n  (b : Basis ι R M) {R₁ : Type u_2} [inst_3 : Semiring R₁] {σ : R →+* R₁} {M₁ : Type u_4} [inst_4 : AddCommMonoid M₁]\n  [inst_5 : Module R₁ M₁] {f₁ f₂ : M →ₛₗ[σ] M₁}, (∀ (i : ι), ↑f₁ (↑b i) = ↑f₂ (↑b i)) → f₁ = f₂ :=\n\n/-- For a continuous real linear map `f`, if one controls the norm of every `f x`, `‖x‖₊ = 1`, then\none controls the norm of `f`. -/\ntheorem ∀ {E : Type u_1} {F : Type u_2} [inst : SeminormedAddCommGroup E] [inst_1 : SeminormedAddCommGroup F]\n  [inst_2 : NormedSpace ℝ E] [inst_3 : NormedSpace ℝ F] {f : E →L[ℝ] F} {C : NNReal},\n  (∀ (x : E), ‖x‖₊ = 1 → ‖↑f x‖₊ ≤ C) → ‖f‖₊ ≤ C :=\n\n/-- Show that every linear map from a one-dimensional vector space to itself is multiplication by some scalar. More precisely, prove that if `dim V = 1` and `T ∈ L(V, V)`, then there exists `a ∈ F` such that `T v = a v` for all `v ∈ V`. -/\ntheorem", "choices": ["∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V] [inst_3 : FiniteDimensional K V],\n  Module.rank K V = 1 → ∀ (f : V →ₗ[K] V), ∃ (a : K), ∀ (v : V), ↑f v = a • v ", "∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V]\n  [inst_3 : FiniteDimensional K V], Module.rank K V ≤ 1 → ∀ (T : V →ₗ[K] V), ∃ a, ∀ (v : V), ↑T v = a • v ", "∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V]\n  [inst_3 : FiniteDimensional K V], Module.rank K V = 1 → ∀ (T : V →ₗ[K] V), ∃ a : K, ∀ (v : V), T v = a • v ", "∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V]\n  [inst_3 : FiniteDimensional K V], Module.rank K V = 1 → ∀ (T : V →ₗ[K] V), ∃ (a : K), ∀ (v : V), T v = a • v ", "∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V]\n  [inst_3 : FiniteDimensional K V], Module.rank K V = 1 → ∀ (f : V →ₗ[K] V), ∃ (a : K), ∀ (v : V), ↑f v = a • v ", "∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V],\n  Module.rank K V = 1 → ∀ (T : V →ₗ[K] V), ∃ a : K, ∀ (v : V), T v = a • v ", "∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V]\n  [inst_3 : FiniteDimensional K V], Module.rank K V = 1 → ∀ (T : V →ₗ[K] V), ∃ a : K, ∀ (v : V), T v = a • v ", "∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V]\n  [inst_3 : FiniteDimensional K V], Module.rank K V = 1 → ∀ (T : V →ₗ[K] V), ∃ a : K, ∀ v : V, T v = a • v ", "∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V]\n  [inst_3 : FiniteDimensional K V] {f : V →ₗ[K] V}, Module.rank K V = 1 → ∃ a, ∀ (v : V), ↑f v = a • v ", "∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V]\n  [inst_3 : FiniteDimensional K V], Module.rank K V = 1 → ∀ (T : V →ₗ[K] V), ∃ a : K, ∀ v : V, T v = a • v "]}
{"docString": "Suppose `p ∈ P(ℂ)` has degree `m`. Prove that `p` has `m` distinct roots if and only if `p` and its derivative `p'` have no roots in common.", "prompts": "[{\"theorem\":\n  \"∀ {p : ℕ} [hp : Fact (Nat.Prime p)] (m : ℕ), padicNorm p ↑m = 1 ↔ ¬p ∣ m\",\n  \"isProp\": true,\n  \"docString\":\n  \"The `p`-adic norm of a natural `m` is one iff `p` doesn't divide `m`. \"},\n {\"theorem\":\n  \"∀ (p : Polynomial ℝ),\\n  Finset.card (Multiset.toFinset (Polynomial.roots p)) ≤\\n    Finset.card\\n        (Multiset.toFinset (Polynomial.roots (↑Polynomial.derivative p)) \\\\ Multiset.toFinset (Polynomial.roots p)) +\\n      1\",\n  \"isProp\": true,\n  \"docString\":\n  \"The number of roots of a real polynomial `p` is at most the number of roots of its derivative\\nthat are not roots of `p` plus one. \"},\n {\"theorem\":\n  \"∀ {p : ℕ} [hp : Fact (Nat.Prime p)] (m : ℤ), padicNorm p ↑m = 1 ↔ ¬↑p ∣ m\",\n  \"isProp\": true,\n  \"docString\":\n  \"The `p`-adic norm of an integer `m` is one iff `p` doesn't divide `m`. \"},\n {\"theorem\":\n  \"∀ {n : ℕ} {K : Type u_1} [inst : CommRing K] {μ : K},\\n  IsPrimitiveRoot μ n →\\n    ∀ [inst_1 : IsDomain K] [inst_2 : CharZero K] {p : ℕ} [hprime : Fact (Nat.Prime p)],\\n      ¬p ∣ n → minpoly ℤ μ = minpoly ℤ (μ ^ p)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `p` is a prime that does not divide `n`,\\nthen the minimal polynomials of a primitive `n`-th root of unity `μ`\\nand of `μ ^ p` are the same. \"},\n {\"theorem\":\n  \"∀ {n : ℕ} {K : Type u_1} [inst : CommRing K] {μ : K},\\n  IsPrimitiveRoot μ n →\\n    ∀ [inst_1 : IsDomain K] [inst_2 : CharZero K] {m : ℕ},\\n      Nat.coprime m n → Polynomial.IsRoot (Polynomial.map (Int.castRingHom K) (minpoly ℤ μ)) (μ ^ m)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `m : ℕ` is coprime with `n`,\\nthen the minimal polynomial of a primitive `n`-th root of unity `μ`\\nhas `μ ^ m` as root. \"},\n {\"theorem\":\n  \"∀ {K : Type v} [inst : Field K] {p : Polynomial K},\\n  Polynomial.Splits (RingHom.id K) p ↔ ↑Multiset.card (Polynomial.roots p) = Polynomial.natDegree p\",\n  \"isProp\": true,\n  \"docString\":\n  \"A polynomial splits if and only if it has as many roots as its degree. \"},\n {\"theorem\":\n  \"∀ {n : ℕ} {K : Type u_1} [inst : CommRing K] {μ : K},\\n  IsPrimitiveRoot μ n →\\n    ∀ [inst_1 : IsDomain K] [inst_2 : CharZero K] {m : ℕ}, Nat.coprime m n → minpoly ℤ μ = minpoly ℤ (μ ^ m)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `m : ℕ` is coprime with `n`,\\nthen the minimal polynomials of a primitive `n`-th root of unity `μ`\\nand of `μ ^ m` are the same. \"},\n {\"theorem\":\n  \"∀ {R : Type u} [inst : CommRing R] {p : Polynomial R},\\n  p ≠ 0 → ∀ {a : R} {n : ℕ}, n ≤ Polynomial.rootMultiplicity a p ↔ (Polynomial.X - ↑Polynomial.C a) ^ n ∣ p\",\n  \"isProp\": true,\n  \"docString\":\n  \"The multiplicity of `a` as root of a nonzero polynomial `p` is at least `n` iff\\n`(X - a) ^ n` divides `p`. \"},\n {\"theorem\":\n  \"∀ {n : ℕ} {K : Type u_1} [inst : CommRing K] {μ : K},\\n  IsPrimitiveRoot μ n →\\n    ∀ [inst_1 : IsDomain K] [inst_2 : CharZero K] {p : ℕ} [inst_3 : Fact (Nat.Prime p)],\\n      ¬p ∣ n → Polynomial.Separable (Polynomial.map (Int.castRingHom (ZMod p)) (minpoly ℤ μ))\",\n  \"isProp\": true,\n  \"docString\":\n  \"The reduction modulo `p` of the minimal polynomial of a root of unity `μ` is separable. \"},\n {\"theorem\":\n  \"∀ {K : Type v} [inst : Field K] {P : Polynomial K},\\n  Polynomial.Monic P →\\n    Polynomial.Splits (RingHom.id K) P →\\n      Polynomial.coeff P 0 = (-1) ^ Polynomial.natDegree P * Multiset.prod (Polynomial.roots P)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `P` is a monic polynomial that splits, then `coeff P 0` equals the product of the roots. \"},\n {\"theorem\":\n  \"∀ {n : ℕ} {K : Type u_1} [inst : CommRing K] {μ : K},\\n  IsPrimitiveRoot μ n → ∀ [inst_1 : IsDomain K] [inst_2 : CharZero K], minpoly ℤ μ ∣ Polynomial.X ^ n - 1\",\n  \"isProp\": true,\n  \"docString\":\n  \"The minimal polynomial of a root of unity `μ` divides `X ^ n - 1`. \"},\n {\"theorem\":\n  \"∀ {p : ℕ},\\n  Nat.Prime p →\\n    ∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsDomain R] {n m : ℕ},\\n      m ≤ n → Irreducible (Polynomial.cyclotomic (p ^ n) R) → Irreducible (Polynomial.cyclotomic (p ^ m) R)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If the `p ^ n`th cyclotomic polynomial is irreducible, so is the `p ^ m`th, for `m ≤ n`. \"},\n {\"theorem\":\n  \"∀ (p : Polynomial ℝ),\\n  Finset.card (Multiset.toFinset (Polynomial.roots p)) ≤\\n    Finset.card (Multiset.toFinset (Polynomial.roots (↑Polynomial.derivative p))) + 1\",\n  \"isProp\": true,\n  \"docString\":\n  \"The number of roots of a real polynomial is at most the number of roots of its derivative plus\\none. \"},\n {\"theorem\":\n  \"∀ {R : Type u_1} [inst : CommRing R] {P : Ideal (Polynomial R)},\\n  P ≠ ⊥ →\\n    (∀ (x : R), ↑Polynomial.C x ∈ P → x = 0) →\\n      ∃ p, p ∈ P ∧ Polynomial.map (Ideal.Quotient.mk (Ideal.comap Polynomial.C P)) p ≠ 0\",\n  \"isProp\": true,\n  \"docString\":\n  \"This technical lemma asserts the existence of a polynomial `p` in an ideal `P ⊂ R[x]`\\nthat is non-zero in the quotient `R / (P ∩ R) [x]`.  The assumptions are equivalent to\\n`P ≠ 0` and `P ∩ R = (0)`.\\n\"},\n {\"theorem\":\n  \"∀ (p : Polynomial ℝ),\\n  ↑Multiset.card (Polynomial.roots p) ≤ ↑Multiset.card (Polynomial.roots (↑Polynomial.derivative p)) + 1\",\n  \"isProp\": true,\n  \"docString\":\n  \"The number of roots of a real polynomial (counted with multiplicities) is at most the number of\\nroots of its derivative (counted with multiplicities) plus one. \"},\n {\"theorem\":\n  \"∀ {F : Type u_1} [inst : CommRing F] [inst_1 : Algebra F ℝ] (p : Polynomial F),\\n  Fintype.card ↑(Polynomial.rootSet p ℝ) ≤ Fintype.card ↑(Polynomial.rootSet (↑Polynomial.derivative p) ℝ) + 1\",\n  \"isProp\": true,\n  \"docString\":\n  \"The number of real roots of a polynomial is at most the number of roots of its derivative plus\\none. \"},\n {\"theorem\":\n  \"∀ {R : Type u} [inst : CommRing R] [inst_1 : IsDomain R] {p : Polynomial R},\\n  ↑Multiset.card (Polynomial.roots p) = Polynomial.natDegree p →\\n    ↑Polynomial.C (Polynomial.leadingCoeff p) *\\n        Multiset.prod (Multiset.map (fun a => Polynomial.X - ↑Polynomial.C a) (Polynomial.roots p)) =\\n      p\",\n  \"isProp\": true,\n  \"docString\":\n  \"A polynomial `p` that has as many roots as its degree\\ncan be written `p = p.leadingCoeff * ∏(X - a)`, for `a` in `p.roots`. \"},\n {\"theorem\":\n  \"∀ {m p k : ℕ}, m ∈ Set.Ioo (p * k) (p * (k + 1)) → padicValNat p m = 0\",\n  \"isProp\": true,\n  \"docString\":\n  \"The `p`-adic valuation of `m` equals zero if it is between `p * k` and `p * (k + 1)` for\\nsome `k`. \"},\n {\"theorem\":\n  \"∀ {p : ℕ} [hp : Fact (Nat.Prime p)] {a : ℤ}, multiplicity.Finite (↑p) a ↔ a ≠ 0\",\n  \"isProp\": true,\n  \"docString\":\n  \"The multiplicity of `p : ℕ` in `a : ℤ` is finite exactly when `a ≠ 0`. \"},\n {\"theorem\":\n  \"∀ {n : ℕ} {K : Type u_1} [inst : Field K] {μ : K},\\n  IsPrimitiveRoot μ n → 0 < n → ∀ [inst_1 : CharZero K], minpoly ℤ μ ∣ Polynomial.cyclotomic n ℤ\",\n  \"isProp\": true,\n  \"docString\":\n  \"The minimal polynomial of a primitive `n`-th root of unity `μ` divides `cyclotomic n ℤ`. \"}]\n", "prompt_cons": "/-- The `p`-adic norm of a natural `m` is one iff `p` doesn't divide `m`. -/\ntheorem ∀ {p : ℕ} [hp : Fact (Nat.Prime p)] (m : ℕ), padicNorm p ↑m = 1 ↔ ¬p ∣ m :=\n\n/-- The number of roots of a real polynomial `p` is at most the number of roots of its derivative\nthat are not roots of `p` plus one. -/\ntheorem ∀ (p : Polynomial ℝ),\n  Finset.card (Multiset.toFinset (Polynomial.roots p)) ≤\n    Finset.card\n        (Multiset.toFinset (Polynomial.roots (↑Polynomial.derivative p)) \\ Multiset.toFinset (Polynomial.roots p)) +\n      1 :=\n\n/-- The `p`-adic norm of an integer `m` is one iff `p` doesn't divide `m`. -/\ntheorem ∀ {p : ℕ} [hp : Fact (Nat.Prime p)] (m : ℤ), padicNorm p ↑m = 1 ↔ ¬↑p ∣ m :=\n\n/-- If `p` is a prime that does not divide `n`,\nthen the minimal polynomials of a primitive `n`-th root of unity `μ`\nand of `μ ^ p` are the same. -/\ntheorem ∀ {n : ℕ} {K : Type u_1} [inst : CommRing K] {μ : K},\n  IsPrimitiveRoot μ n →\n    ∀ [inst_1 : IsDomain K] [inst_2 : CharZero K] {p : ℕ} [hprime : Fact (Nat.Prime p)],\n      ¬p ∣ n → minpoly ℤ μ = minpoly ℤ (μ ^ p) :=\n\n/-- If `m : ℕ` is coprime with `n`,\nthen the minimal polynomial of a primitive `n`-th root of unity `μ`\nhas `μ ^ m` as root. -/\ntheorem ∀ {n : ℕ} {K : Type u_1} [inst : CommRing K] {μ : K},\n  IsPrimitiveRoot μ n →\n    ∀ [inst_1 : IsDomain K] [inst_2 : CharZero K] {m : ℕ},\n      Nat.coprime m n → Polynomial.IsRoot (Polynomial.map (Int.castRingHom K) (minpoly ℤ μ)) (μ ^ m) :=\n\n/-- A polynomial splits if and only if it has as many roots as its degree. -/\ntheorem ∀ {K : Type v} [inst : Field K] {p : Polynomial K},\n  Polynomial.Splits (RingHom.id K) p ↔ ↑Multiset.card (Polynomial.roots p) = Polynomial.natDegree p :=\n\n/-- If `m : ℕ` is coprime with `n`,\nthen the minimal polynomials of a primitive `n`-th root of unity `μ`\nand of `μ ^ m` are the same. -/\ntheorem ∀ {n : ℕ} {K : Type u_1} [inst : CommRing K] {μ : K},\n  IsPrimitiveRoot μ n →\n    ∀ [inst_1 : IsDomain K] [inst_2 : CharZero K] {m : ℕ}, Nat.coprime m n → minpoly ℤ μ = minpoly ℤ (μ ^ m) :=\n\n/-- The multiplicity of `a` as root of a nonzero polynomial `p` is at least `n` iff\n`(X - a) ^ n` divides `p`. -/\ntheorem ∀ {R : Type u} [inst : CommRing R] {p : Polynomial R},\n  p ≠ 0 → ∀ {a : R} {n : ℕ}, n ≤ Polynomial.rootMultiplicity a p ↔ (Polynomial.X - ↑Polynomial.C a) ^ n ∣ p :=\n\n/-- The reduction modulo `p` of the minimal polynomial of a root of unity `μ` is separable. -/\ntheorem ∀ {n : ℕ} {K : Type u_1} [inst : CommRing K] {μ : K},\n  IsPrimitiveRoot μ n →\n    ∀ [inst_1 : IsDomain K] [inst_2 : CharZero K] {p : ℕ} [inst_3 : Fact (Nat.Prime p)],\n      ¬p ∣ n → Polynomial.Separable (Polynomial.map (Int.castRingHom (ZMod p)) (minpoly ℤ μ)) :=\n\n/-- If `P` is a monic polynomial that splits, then `coeff P 0` equals the product of the roots. -/\ntheorem ∀ {K : Type v} [inst : Field K] {P : Polynomial K},\n  Polynomial.Monic P →\n    Polynomial.Splits (RingHom.id K) P →\n      Polynomial.coeff P 0 = (-1) ^ Polynomial.natDegree P * Multiset.prod (Polynomial.roots P) :=\n\n/-- The minimal polynomial of a root of unity `μ` divides `X ^ n - 1`. -/\ntheorem ∀ {n : ℕ} {K : Type u_1} [inst : CommRing K] {μ : K},\n  IsPrimitiveRoot μ n → ∀ [inst_1 : IsDomain K] [inst_2 : CharZero K], minpoly ℤ μ ∣ Polynomial.X ^ n - 1 :=\n\n/-- If the `p ^ n`th cyclotomic polynomial is irreducible, so is the `p ^ m`th, for `m ≤ n`. -/\ntheorem ∀ {p : ℕ},\n  Nat.Prime p →\n    ∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsDomain R] {n m : ℕ},\n      m ≤ n → Irreducible (Polynomial.cyclotomic (p ^ n) R) → Irreducible (Polynomial.cyclotomic (p ^ m) R) :=\n\n/-- The number of roots of a real polynomial is at most the number of roots of its derivative plus\none. -/\ntheorem ∀ (p : Polynomial ℝ),\n  Finset.card (Multiset.toFinset (Polynomial.roots p)) ≤\n    Finset.card (Multiset.toFinset (Polynomial.roots (↑Polynomial.derivative p))) + 1 :=\n\n/-- This technical lemma asserts the existence of a polynomial `p` in an ideal `P ⊂ R[x]`\nthat is non-zero in the quotient `R / (P ∩ R) [x]`.  The assumptions are equivalent to\n`P ≠ 0` and `P ∩ R = (0)`. -/\ntheorem ∀ {R : Type u_1} [inst : CommRing R] {P : Ideal (Polynomial R)},\n  P ≠ ⊥ →\n    (∀ (x : R), ↑Polynomial.C x ∈ P → x = 0) →\n      ∃ p, p ∈ P ∧ Polynomial.map (Ideal.Quotient.mk (Ideal.comap Polynomial.C P)) p ≠ 0 :=\n\n/-- The number of roots of a real polynomial (counted with multiplicities) is at most the number of\nroots of its derivative (counted with multiplicities) plus one. -/\ntheorem ∀ (p : Polynomial ℝ),\n  ↑Multiset.card (Polynomial.roots p) ≤ ↑Multiset.card (Polynomial.roots (↑Polynomial.derivative p)) + 1 :=\n\n/-- The number of real roots of a polynomial is at most the number of roots of its derivative plus\none. -/\ntheorem ∀ {F : Type u_1} [inst : CommRing F] [inst_1 : Algebra F ℝ] (p : Polynomial F),\n  Fintype.card ↑(Polynomial.rootSet p ℝ) ≤ Fintype.card ↑(Polynomial.rootSet (↑Polynomial.derivative p) ℝ) + 1 :=\n\n/-- A polynomial `p` that has as many roots as its degree\ncan be written `p = p.leadingCoeff * ∏(X - a)`, for `a` in `p.roots`. -/\ntheorem ∀ {R : Type u} [inst : CommRing R] [inst_1 : IsDomain R] {p : Polynomial R},\n  ↑Multiset.card (Polynomial.roots p) = Polynomial.natDegree p →\n    ↑Polynomial.C (Polynomial.leadingCoeff p) *\n        Multiset.prod (Multiset.map (fun a => Polynomial.X - ↑Polynomial.C a) (Polynomial.roots p)) =\n      p :=\n\n/-- The `p`-adic valuation of `m` equals zero if it is between `p * k` and `p * (k + 1)` for\nsome `k`. -/\ntheorem ∀ {m p k : ℕ}, m ∈ Set.Ioo (p * k) (p * (k + 1)) → padicValNat p m = 0 :=\n\n/-- The multiplicity of `p : ℕ` in `a : ℤ` is finite exactly when `a ≠ 0`. -/\ntheorem ∀ {p : ℕ} [hp : Fact (Nat.Prime p)] {a : ℤ}, multiplicity.Finite (↑p) a ↔ a ≠ 0 :=\n\n/-- The minimal polynomial of a primitive `n`-th root of unity `μ` divides `cyclotomic n ℤ`. -/\ntheorem ∀ {n : ℕ} {K : Type u_1} [inst : Field K] {μ : K},\n  IsPrimitiveRoot μ n → 0 < n → ∀ [inst_1 : CharZero K], minpoly ℤ μ ∣ Polynomial.cyclotomic n ℤ :=\n\n/-- Suppose `p ∈ P(ℂ)` has degree `m`. Prove that `p` has `m` distinct roots if and only if `p` and its derivative `p'` have no roots in common. -/\ntheorem", "choices": ["∀ {R : Type u} [inst : CommRing R] [inst_1 : IsDomain R] {p : Polynomial R},\n  Polynomial.degree p = m →\n    (m = Multiset.card (Polynomial.roots p) ↔\n     ∀ (a : R), Polynomial.IsRoot p a → ¬Polynomial.IsRoot (Polynomial.derivative p) a) ", "∀ {R : Type u} [inst : CommRing R] [inst_1 : IsDomain R] {p : Polynomial R},\n  Polynomial.natDegree p = Multiset.card (Polynomial.roots p) ↔\n    ∀ (a : R), Polynomial.rootMultiplicity a p ≤ 1 ", "∀ {R : Type u} [inst : Field R] [inst_1 : IsDomain R] {p : Polynomial R},\n  Polynomial.natDegree p = Fintype.card (Polynomial.rootSet p R) ↔\n    Disjoint (Polynomial.rootSet p R) (Polynomial.rootSet (Polynomial.derivative p) R) ", "∀ {p : Polynomial ℂ} {m : ℕ},\n  Polynomial.natDegree p = m →\n    (p ≠ 0 →\n       (∀ a, Polynomial.IsRoot p a ↔ Polynomial.IsRoot (↑Polynomial.derivative p) a → False) ↔\n         m = Multiset.card (Polynomial.roots p)) ", "∀ {p : Polynomial ℂ},\n  Polynomial.natDegree p = Multiset.card (Multiset.toFinset (Polynomial.roots p)) ↔\n    ∀ a : ℂ, (multiplicity (Polynomial.X - ↑Polynomial.C a) p).isGreatest (Polynomial.rootMultiplicity a p) ", "∀ {p : Polynomial ℂ},\n  Polynomial.natDegree p = Multiset.card (Multiset.toFinset (Polynomial.roots p)) ↔\n    ∀ (x : ℂ), ¬(Polynomial.IsRoot p x ∧ Polynomial.IsRoot (↑Polynomial.derivative p) x) ", "∀ {p : Polynomial ℂ},\n  Polynomial.degrees (↑Polynomial.derivative p) = Polynomial.degrees p - 1 →\n    (∀ a, Polynomial.IsRoot p a ↔ ¬Polynomial.IsRoot (↑Polynomial.derivative p) a) ↔\n      Finset.card (Multiset.toFinset (Polynomial.roots p)) = Polynomial.natDegree p ", "∀ {p : Polynomial ℂ},\n  Polynomial.natDegree p = Finset.card (Multiset.toFinset (Polynomial.roots p)) ↔\n  Multiset.Disjoint (Polynomial.roots p) (Polynomial.roots (↑Polynomial.derivative p)) ", "∀ {p : Polynomial ℂ},\n  Polynomial.natDegree p = Finset.card (Multiset.toFinset (Polynomial.roots p)) ↔\n    Multiset.disjoint (Polynomial.roots p) (Polynomial.roots (↑Polynomial.derivative p)) ", "∀ {m : ℕ} {p : Polynomial ℂ},\n  Polynomial.natDegree p = m →\n    ((∀ a : ℂ, Polynomial.rootMultiplicity a p ≤ 1) ↔\n     ∀ a : ℂ, ¬Polynomial.IsRoot p a ∨ ¬Polynomial.IsRoot (↑Polynomial.derivative p) a) "]}
{"docString": "Suppose that `S, T ∈ L(V)` are such that `S T = T S`. Prove that `null (T - λ I)` is invariant under `S` for every `λ ∈ F`.", "prompts": "[{\"theorem\":\n  \"∀ {R : Type u} [inst : CommSemiring R] {S : Type u_1} [inst_1 : CommRing S] [inst_2 : Algebra R S] (S' : Subalgebra R S)\\n  {ι : Type u_2} (ι' : Finset ι) (s l : ι → S),\\n  (Finset.sum ι' fun i => l i * s i) = 1 →\\n    (∀ (i : ι), s i ∈ S') → (∀ (i : ι), l i ∈ S') → ∀ (x : S), (∀ (i : ι), ∃ n, s i ^ n • x ∈ S') → x ∈ S'\",\n  \"isProp\": true,\n  \"docString\":\n  \"Suppose we are given `∑ i, lᵢ * sᵢ = 1` in `S`, and `S'` a subalgebra of `S` that contains\\n`lᵢ` and `sᵢ`. To check that an `x : S` falls in `S'`, we only need to show that\\n`sᵢ ^ n • x ∈ S'` for some `n` for each `sᵢ`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {X : Type u_2} [inst : IsROrC 𝕜] [inst_1 : TopologicalSpace X] {S : Set C(X, 𝕜)},\\n  (∀ (f : C(X, 𝕜)), f ∈ S → ↑(AlgHom.compLeftContinuous ℝ ↑IsROrC.conjAe (_ : Continuous ↑IsROrC.conjCle)) f ∈ S) →\\n    ContinuousMap.ConjInvariantSubalgebra (Subalgebra.restrictScalars ℝ (Algebra.adjoin 𝕜 S))\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a set `S` is conjugation-invariant, then its `𝕜`-span is conjugation-invariant. \"},\n {\"theorem\":\n  \"∀ {G : Type u_1} [inst : MeasurableSpace G] [inst_1 : Mul G] [inst_2 : MeasurableMul G] (μ : MeasureTheory.Measure G),\\n  (∀ (g : G) (A : Set G), MeasurableSet A → ↑↑μ ((fun h => g * h) ⁻¹' A) = ↑↑μ A) ↔\\n    MeasureTheory.Measure.IsMulLeftInvariant μ\",\n  \"isProp\": true,\n  \"docString\":\n  \"An alternative way to prove that `μ` is left invariant under multiplication. \"},\n {\"theorem\":\n  \"∀ {G : Type u_1} [inst : MeasurableSpace G] [inst_1 : Add G] [inst_2 : MeasurableAdd G] (μ : MeasureTheory.Measure G),\\n  (∀ (g : G) (A : Set G), MeasurableSet A → ↑↑μ ((fun h => g + h) ⁻¹' A) = ↑↑μ A) ↔\\n    MeasureTheory.Measure.IsAddLeftInvariant μ\",\n  \"isProp\": true,\n  \"docString\":\n  \"An alternative way to prove that `μ` is left invariant under addition. \"},\n {\"theorem\":\n  \"∀ {α : Type u_3} {G : Type u_2} [inst : NormedAddCommGroup G] [inst_1 : NormedSpace ℝ G] {m : MeasurableSpace α}\\n  {μ : MeasureTheory.Measure α} {ι : Type u_1} (f : α → G),\\n  MeasureTheory.Integrable f →\\n    ∀ {F : ι → α → G} {l : Filter ι},\\n      (∀ᶠ (i : ι) in l, MeasureTheory.Integrable (F i)) →\\n        Filter.Tendsto (fun i => ∫⁻ (x : α), ↑‖F i x - f x‖₊ ∂μ) l (nhds 0) →\\n          Filter.Tendsto (fun i => ∫ (x : α), F i x ∂μ) l (nhds (∫ (x : α), f x ∂μ))\",\n  \"isProp\": true,\n  \"docString\": \"If `F i → f` in `L1`, then `∫ x, F i x ∂μ → ∫ x, f x ∂μ`. \"},\n {\"theorem\":\n  \"∀ {G : Type u_1} [inst : MeasurableSpace G] [inst_1 : Mul G] [inst_2 : MeasurableMul G] (μ : MeasureTheory.Measure G),\\n  (∀ (g : G) (A : Set G), MeasurableSet A → ↑↑μ ((fun h => h * g) ⁻¹' A) = ↑↑μ A) ↔\\n    MeasureTheory.Measure.IsMulRightInvariant μ\",\n  \"isProp\": true,\n  \"docString\":\n  \"An alternative way to prove that `μ` is right invariant under multiplication. \"},\n {\"theorem\":\n  \"∀ {R : Type u_1} {M : Type u_2} [inst : Ring R] [inst_1 : AddCommGroup M] [inst_2 : Module R M] (S T : Submodule R M),\\n  T ≤ S →\\n    ∀ [inst_3 : DecidablePred fun x => x ∈ Submodule.map (Submodule.mkQ T) S] [inst_4 : Fintype (M ⧸ S)]\\n      [inst_5 : Fintype (M ⧸ T)],\\n      Fintype.card { x // x ∈ Submodule.map (Submodule.mkQ T) S } * Fintype.card (M ⧸ S) = Fintype.card (M ⧸ T)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Corollary of the third isomorphism theorem: `[S : T] [M : S] = [M : T]` \"},\n {\"theorem\":\n  \"∀ {R S : Type u} [inst : CommRing R] [inst_1 : CommRing S] (M : Submonoid R) (R' : Type u) [inst_2 : CommRing R']\\n  [inst_3 : Algebra R R'] [inst_4 : Algebra R' S] [inst_5 : Algebra R S] [inst_6 : IsScalarTower R R' S]\\n  [inst_7 : IsLocalization M R'] (s : Set S) (x : S), x ∈ Submodule.span R' s → ∃ t, t • x ∈ Submodule.span R s\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `S` is an `R' = M⁻¹R` algebra, and `x ∈ span R' s`,\\nthen `t • x ∈ span R s` for some `t : M`.\"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {E : Type u_2} [inst : MeasurableSpace α] [inst_1 : NormedAddCommGroup E] {f : α → E} {s t : Set α}\\n  {μ : MeasureTheory.Measure α} [inst_2 : NormedSpace ℝ E],\\n  MeasureTheory.NullMeasurableSet t →\\n    s ⊆ t → (∀ᵐ (x : α) ∂μ, x ∈ t \\\\ s → f x = 0) → ∫ (x : α) in t, f x ∂μ = ∫ (x : α) in s, f x ∂μ\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a function vanishes almost everywhere on `t \\\\ s` with `s ⊆ t`, then its integrals on `s`\\nand `t` coincide if `t` is null-measurable. \"},\n {\"theorem\":\n  \"∀ {G : Type u_1} [inst : MeasurableSpace G] [inst_1 : Add G] [inst_2 : MeasurableAdd G] (μ : MeasureTheory.Measure G),\\n  (∀ (g : G) (A : Set G), MeasurableSet A → ↑↑μ ((fun h => h + g) ⁻¹' A) = ↑↑μ A) ↔\\n    MeasureTheory.Measure.IsAddRightInvariant μ\",\n  \"isProp\": true,\n  \"docString\":\n  \"An alternative way to prove that `μ` is right invariant under addition. \"},\n {\"theorem\": \"RingHom.LocalizationPreserves @RingHom.Finite\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `S` is a finite `R`-algebra, then `S' = M⁻¹S` is a finite `R' = M⁻¹R`-algebra. \"},\n {\"theorem\":\n  \"∀ {G : Type u_1} {α : Type u_2} [inst : Group G] [inst_1 : MulAction G α] [inst_2 : MeasurableSpace α] {s t : Set α}\\n  {μ : MeasureTheory.Measure α} [inst_3 : MeasurableSpace G] [inst_4 : MeasurableSMul G α]\\n  [inst_5 : MeasureTheory.SMulInvariantMeasure G α μ] [inst_6 : Countable G],\\n  MeasureTheory.IsFundamentalDomain G s →\\n    MeasureTheory.NullMeasurableSet t → ↑↑μ s < ↑↑μ t → ∃ x, x ∈ t ∧ ∃ y, y ∈ t ∧ ∃ g, g ≠ 1 ∧ g • x = y\",\n  \"isProp\": true,\n  \"docString\":\n  \"If the action of a countable group `G` admits an invariant measure `μ` with a fundamental domain\\n`s`, then every null-measurable set `t` of measure strictly greater than `μ s` contains two\\npoints `x y` such that `g • x = y` for some `g ≠ 1`. \"},\n {\"theorem\":\n  \"∀ {R S : Type u} [inst : CommRing R] [inst_1 : CommRing S] (M : Submonoid R) (R' : Type u) [inst_2 : CommRing R']\\n  [inst_3 : Algebra R R'] [inst_4 : Algebra R' S] [inst_5 : Algebra R S] [inst_6 : IsScalarTower R R' S]\\n  [inst_7 : IsLocalization M R'] (s : Set S) (x : S), x ∈ Algebra.adjoin R' s → ∃ t, t • x ∈ Algebra.adjoin R s\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `S` is an `R' = M⁻¹R` algebra, and `x ∈ adjoin R' s`,\\nthen `t • x ∈ adjoin R s` for some `t : M`.\"},\n {\"theorem\":\n  \"∀ {R : Type u} [inst : CommRing R] {S : Type v} [inst_1 : CommRing S] [inst_2 : Algebra R S] (K : Type u_5)\\n  [inst_3 : Field K] [inst_4 : Algebra R K] [hRK : IsFractionRing R K] {V : Type u_2} {V' : Type u_3} {V'' : Type u_1}\\n  [inst_5 : AddCommGroup V] [inst_6 : Module R V] [inst_7 : Module K V] [inst_8 : IsScalarTower R K V]\\n  [inst_9 : AddCommGroup V'] [inst_10 : Module R V'] [inst_11 : Module S V'] [inst_12 : IsScalarTower R S V']\\n  [inst_13 : AddCommGroup V''] [inst_14 : Module R V''] [inst_15 : IsDomain R] [inst_16 : IsDedekindDomain R],\\n  RingHom.ker (algebraMap R S) ≠ ⊤ →\\n    ∀ (f : V'' →ₗ[R] V),\\n      Function.Injective ↑f →\\n        ∀ (f' : V'' →ₗ[R] V') {ι : Type u_4} {b : ι → V''}, LinearIndependent S (↑f' ∘ b) → LinearIndependent K (↑f ∘ b)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `V` be a vector space over `K = Frac(R)`, `S / R` a ring extension\\nand `V'` a module over `S`. If `b`, in the intersection `V''` of `V` and `V'`,\\nis linear independent over `S` in `V'`, then it is linear independent over `R` in `V`.\\n\\nThe statement we prove is actually slightly more general:\\n * it suffices that the inclusion `algebraMap R S : R → S` is nontrivial\\n * the function `f' : V'' → V'` doesn't need to be injective\\n\"},\n {\"theorem\":\n  \"∀ {V : Type u_1} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℂ V] (S T : V →ₗ[ℂ] V),\\n  (∀ (x : V), inner (↑S x) x = inner (↑T x) x) ↔ S = T\",\n  \"isProp\": true,\n  \"docString\":\n  \"Two linear maps `S` and `T` are equal, if and only if the identity `⟪S x, x⟫_ℂ = ⟪T x, x⟫_ℂ` holds\\nfor all `x`.\\n\"},\n {\"theorem\":\n  \"∀ {K : Type u_1} {L : Type u_2} [inst : Field K] [inst_1 : Field L] [inst_2 : Algebra K L],\\n  IntermediateField.fixingSubgroup ⊥ = ⊤\",\n  \"isProp\": true,\n  \"docString\": \"This lemma says that `Gal(L/K) = L ≃ₐ[K] L` \"},\n {\"theorem\":\n  \"∀ (F : Type u_2) [inst : Field F] {E : Type u_1} [inst_1 : Field E] [inst_2 : Algebra F E] (S T : Set E),\\n  IntermediateField.restrictScalars F (IntermediateField.adjoin { x // x ∈ IntermediateField.adjoin F S } T) =\\n    IntermediateField.restrictScalars F (IntermediateField.adjoin { x // x ∈ IntermediateField.adjoin F T } S)\",\n  \"isProp\": true,\n  \"docString\": \"`F[S][T] = F[T][S]` \"},\n {\"theorem\":\n  \"∀ {R : Type u_1} {S : Type u_2} {M₃ : Type u_3} [inst : Semiring R] [inst_1 : Semiring S] [inst_2 : AddCommMonoid M₃]\\n  [inst_3 : Module S M₃] {σ : R →+* S} {f g : R →ₛₗ[σ] M₃}, ↑f 1 = ↑g 1 → f = g\",\n  \"isProp\": true,\n  \"docString\":\n  \"If two `σ`-linear maps from `R` are equal on `1`, then they are equal. \"},\n {\"theorem\":\n  \"∀ {G : Type u_1} {α : Type u_2} [inst : AddGroup G] [inst_1 : AddAction G α] [inst_2 : MeasurableSpace α] {s t : Set α}\\n  {μ : MeasureTheory.Measure α} [inst_3 : MeasurableSpace G] [inst_4 : MeasurableVAdd G α]\\n  [inst_5 : MeasureTheory.VAddInvariantMeasure G α μ] [inst_6 : Countable G],\\n  MeasureTheory.IsAddFundamentalDomain G s →\\n    MeasureTheory.NullMeasurableSet t → ↑↑μ s < ↑↑μ t → ∃ x, x ∈ t ∧ ∃ y, y ∈ t ∧ ∃ g, g ≠ 0 ∧ g +ᵥ x = y\",\n  \"isProp\": true,\n  \"docString\":\n  \"If the additive action of a countable group `G` admits an invariant measure `μ` with\\na fundamental domain `s`, then every null-measurable set `t` of measure strictly greater than\\n`μ s` contains two points `x y` such that `g +ᵥ x = y` for some `g ≠ 0`.\"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : MeasurableSpace α] {μ : MeasureTheory.Measure α} {s t : Set α},\\n  s =ᶠ[MeasureTheory.Measure.ae μ] t → ↑↑μ s = ↑↑μ t\",\n  \"isProp\": true,\n  \"docString\":\n  \"If two sets are equal modulo a set of measure zero, then `μ s = μ t`. \"}]\n", "prompt_cons": "/-- Suppose we are given `∑ i, lᵢ * sᵢ = 1` in `S`, and `S'` a subalgebra of `S` that contains\n`lᵢ` and `sᵢ`. To check that an `x : S` falls in `S'`, we only need to show that\n`sᵢ ^ n • x ∈ S'` for some `n` for each `sᵢ`. -/\ntheorem ∀ {R : Type u} [inst : CommSemiring R] {S : Type u_1} [inst_1 : CommRing S] [inst_2 : Algebra R S] (S' : Subalgebra R S)\n  {ι : Type u_2} (ι' : Finset ι) (s l : ι → S),\n  (Finset.sum ι' fun i => l i * s i) = 1 →\n    (∀ (i : ι), s i ∈ S') → (∀ (i : ι), l i ∈ S') → ∀ (x : S), (∀ (i : ι), ∃ n, s i ^ n • x ∈ S') → x ∈ S' :=\n\n/-- If a set `S` is conjugation-invariant, then its `𝕜`-span is conjugation-invariant. -/\ntheorem ∀ {𝕜 : Type u_1} {X : Type u_2} [inst : IsROrC 𝕜] [inst_1 : TopologicalSpace X] {S : Set C(X, 𝕜)},\n  (∀ (f : C(X, 𝕜)), f ∈ S → ↑(AlgHom.compLeftContinuous ℝ ↑IsROrC.conjAe (_ : Continuous ↑IsROrC.conjCle)) f ∈ S) →\n    ContinuousMap.ConjInvariantSubalgebra (Subalgebra.restrictScalars ℝ (Algebra.adjoin 𝕜 S)) :=\n\n/-- An alternative way to prove that `μ` is left invariant under multiplication. -/\ntheorem ∀ {G : Type u_1} [inst : MeasurableSpace G] [inst_1 : Mul G] [inst_2 : MeasurableMul G] (μ : MeasureTheory.Measure G),\n  (∀ (g : G) (A : Set G), MeasurableSet A → ↑↑μ ((fun h => g * h) ⁻¹' A) = ↑↑μ A) ↔\n    MeasureTheory.Measure.IsMulLeftInvariant μ :=\n\n/-- An alternative way to prove that `μ` is left invariant under addition. -/\ntheorem ∀ {G : Type u_1} [inst : MeasurableSpace G] [inst_1 : Add G] [inst_2 : MeasurableAdd G] (μ : MeasureTheory.Measure G),\n  (∀ (g : G) (A : Set G), MeasurableSet A → ↑↑μ ((fun h => g + h) ⁻¹' A) = ↑↑μ A) ↔\n    MeasureTheory.Measure.IsAddLeftInvariant μ :=\n\n/-- If `F i → f` in `L1`, then `∫ x, F i x ∂μ → ∫ x, f x ∂μ`. -/\ntheorem ∀ {α : Type u_3} {G : Type u_2} [inst : NormedAddCommGroup G] [inst_1 : NormedSpace ℝ G] {m : MeasurableSpace α}\n  {μ : MeasureTheory.Measure α} {ι : Type u_1} (f : α → G),\n  MeasureTheory.Integrable f →\n    ∀ {F : ι → α → G} {l : Filter ι},\n      (∀ᶠ (i : ι) in l, MeasureTheory.Integrable (F i)) →\n        Filter.Tendsto (fun i => ∫⁻ (x : α), ↑‖F i x - f x‖₊ ∂μ) l (nhds 0) →\n          Filter.Tendsto (fun i => ∫ (x : α), F i x ∂μ) l (nhds (∫ (x : α), f x ∂μ)) :=\n\n/-- An alternative way to prove that `μ` is right invariant under multiplication. -/\ntheorem ∀ {G : Type u_1} [inst : MeasurableSpace G] [inst_1 : Mul G] [inst_2 : MeasurableMul G] (μ : MeasureTheory.Measure G),\n  (∀ (g : G) (A : Set G), MeasurableSet A → ↑↑μ ((fun h => h * g) ⁻¹' A) = ↑↑μ A) ↔\n    MeasureTheory.Measure.IsMulRightInvariant μ :=\n\n/-- Corollary of the third isomorphism theorem: `[S : T] [M : S] = [M : T]` -/\ntheorem ∀ {R : Type u_1} {M : Type u_2} [inst : Ring R] [inst_1 : AddCommGroup M] [inst_2 : Module R M] (S T : Submodule R M),\n  T ≤ S →\n    ∀ [inst_3 : DecidablePred fun x => x ∈ Submodule.map (Submodule.mkQ T) S] [inst_4 : Fintype (M ⧸ S)]\n      [inst_5 : Fintype (M ⧸ T)],\n      Fintype.card { x // x ∈ Submodule.map (Submodule.mkQ T) S } * Fintype.card (M ⧸ S) = Fintype.card (M ⧸ T) :=\n\n/-- If `S` is an `R' = M⁻¹R` algebra, and `x ∈ span R' s`,\nthen `t • x ∈ span R s` for some `t : M`. -/\ntheorem ∀ {R S : Type u} [inst : CommRing R] [inst_1 : CommRing S] (M : Submonoid R) (R' : Type u) [inst_2 : CommRing R']\n  [inst_3 : Algebra R R'] [inst_4 : Algebra R' S] [inst_5 : Algebra R S] [inst_6 : IsScalarTower R R' S]\n  [inst_7 : IsLocalization M R'] (s : Set S) (x : S), x ∈ Submodule.span R' s → ∃ t, t • x ∈ Submodule.span R s :=\n\n/-- If a function vanishes almost everywhere on `t \\ s` with `s ⊆ t`, then its integrals on `s`\nand `t` coincide if `t` is null-measurable. -/\ntheorem ∀ {α : Type u_1} {E : Type u_2} [inst : MeasurableSpace α] [inst_1 : NormedAddCommGroup E] {f : α → E} {s t : Set α}\n  {μ : MeasureTheory.Measure α} [inst_2 : NormedSpace ℝ E],\n  MeasureTheory.NullMeasurableSet t →\n    s ⊆ t → (∀ᵐ (x : α) ∂μ, x ∈ t \\ s → f x = 0) → ∫ (x : α) in t, f x ∂μ = ∫ (x : α) in s, f x ∂μ :=\n\n/-- An alternative way to prove that `μ` is right invariant under addition. -/\ntheorem ∀ {G : Type u_1} [inst : MeasurableSpace G] [inst_1 : Add G] [inst_2 : MeasurableAdd G] (μ : MeasureTheory.Measure G),\n  (∀ (g : G) (A : Set G), MeasurableSet A → ↑↑μ ((fun h => h + g) ⁻¹' A) = ↑↑μ A) ↔\n    MeasureTheory.Measure.IsAddRightInvariant μ :=\n\n/-- If `S` is a finite `R`-algebra, then `S' = M⁻¹S` is a finite `R' = M⁻¹R`-algebra. -/\ntheorem RingHom.LocalizationPreserves @RingHom.Finite :=\n\n/-- If the action of a countable group `G` admits an invariant measure `μ` with a fundamental domain\n`s`, then every null-measurable set `t` of measure strictly greater than `μ s` contains two\npoints `x y` such that `g • x = y` for some `g ≠ 1`. -/\ntheorem ∀ {G : Type u_1} {α : Type u_2} [inst : Group G] [inst_1 : MulAction G α] [inst_2 : MeasurableSpace α] {s t : Set α}\n  {μ : MeasureTheory.Measure α} [inst_3 : MeasurableSpace G] [inst_4 : MeasurableSMul G α]\n  [inst_5 : MeasureTheory.SMulInvariantMeasure G α μ] [inst_6 : Countable G],\n  MeasureTheory.IsFundamentalDomain G s →\n    MeasureTheory.NullMeasurableSet t → ↑↑μ s < ↑↑μ t → ∃ x, x ∈ t ∧ ∃ y, y ∈ t ∧ ∃ g, g ≠ 1 ∧ g • x = y :=\n\n/-- If `S` is an `R' = M⁻¹R` algebra, and `x ∈ adjoin R' s`,\nthen `t • x ∈ adjoin R s` for some `t : M`. -/\ntheorem ∀ {R S : Type u} [inst : CommRing R] [inst_1 : CommRing S] (M : Submonoid R) (R' : Type u) [inst_2 : CommRing R']\n  [inst_3 : Algebra R R'] [inst_4 : Algebra R' S] [inst_5 : Algebra R S] [inst_6 : IsScalarTower R R' S]\n  [inst_7 : IsLocalization M R'] (s : Set S) (x : S), x ∈ Algebra.adjoin R' s → ∃ t, t • x ∈ Algebra.adjoin R s :=\n\n/-- Let `V` be a vector space over `K = Frac(R)`, `S / R` a ring extension\nand `V'` a module over `S`. If `b`, in the intersection `V''` of `V` and `V'`,\nis linear independent over `S` in `V'`, then it is linear independent over `R` in `V`.\n\nThe statement we prove is actually slightly more general:\n * it suffices that the inclusion `algebraMap R S : R → S` is nontrivial\n * the function `f' : V'' → V'` doesn't need to be injective -/\ntheorem ∀ {R : Type u} [inst : CommRing R] {S : Type v} [inst_1 : CommRing S] [inst_2 : Algebra R S] (K : Type u_5)\n  [inst_3 : Field K] [inst_4 : Algebra R K] [hRK : IsFractionRing R K] {V : Type u_2} {V' : Type u_3} {V'' : Type u_1}\n  [inst_5 : AddCommGroup V] [inst_6 : Module R V] [inst_7 : Module K V] [inst_8 : IsScalarTower R K V]\n  [inst_9 : AddCommGroup V'] [inst_10 : Module R V'] [inst_11 : Module S V'] [inst_12 : IsScalarTower R S V']\n  [inst_13 : AddCommGroup V''] [inst_14 : Module R V''] [inst_15 : IsDomain R] [inst_16 : IsDedekindDomain R],\n  RingHom.ker (algebraMap R S) ≠ ⊤ →\n    ∀ (f : V'' →ₗ[R] V),\n      Function.Injective ↑f →\n        ∀ (f' : V'' →ₗ[R] V') {ι : Type u_4} {b : ι → V''}, LinearIndependent S (↑f' ∘ b) → LinearIndependent K (↑f ∘ b) :=\n\n/-- Two linear maps `S` and `T` are equal, if and only if the identity `⟪S x, x⟫_ℂ = ⟪T x, x⟫_ℂ` holds\nfor all `x`. -/\ntheorem ∀ {V : Type u_1} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℂ V] (S T : V →ₗ[ℂ] V),\n  (∀ (x : V), inner (↑S x) x = inner (↑T x) x) ↔ S = T :=\n\n/-- This lemma says that `Gal(L/K) = L ≃ₐ[K] L` -/\ntheorem ∀ {K : Type u_1} {L : Type u_2} [inst : Field K] [inst_1 : Field L] [inst_2 : Algebra K L],\n  IntermediateField.fixingSubgroup ⊥ = ⊤ :=\n\n/-- `F[S][T] = F[T][S]` -/\ntheorem ∀ (F : Type u_2) [inst : Field F] {E : Type u_1} [inst_1 : Field E] [inst_2 : Algebra F E] (S T : Set E),\n  IntermediateField.restrictScalars F (IntermediateField.adjoin { x // x ∈ IntermediateField.adjoin F S } T) =\n    IntermediateField.restrictScalars F (IntermediateField.adjoin { x // x ∈ IntermediateField.adjoin F T } S) :=\n\n/-- If two `σ`-linear maps from `R` are equal on `1`, then they are equal. -/\ntheorem ∀ {R : Type u_1} {S : Type u_2} {M₃ : Type u_3} [inst : Semiring R] [inst_1 : Semiring S] [inst_2 : AddCommMonoid M₃]\n  [inst_3 : Module S M₃] {σ : R →+* S} {f g : R →ₛₗ[σ] M₃}, ↑f 1 = ↑g 1 → f = g :=\n\n/-- If the additive action of a countable group `G` admits an invariant measure `μ` with\na fundamental domain `s`, then every null-measurable set `t` of measure strictly greater than\n`μ s` contains two points `x y` such that `g +ᵥ x = y` for some `g ≠ 0`. -/\ntheorem ∀ {G : Type u_1} {α : Type u_2} [inst : AddGroup G] [inst_1 : AddAction G α] [inst_2 : MeasurableSpace α] {s t : Set α}\n  {μ : MeasureTheory.Measure α} [inst_3 : MeasurableSpace G] [inst_4 : MeasurableVAdd G α]\n  [inst_5 : MeasureTheory.VAddInvariantMeasure G α μ] [inst_6 : Countable G],\n  MeasureTheory.IsAddFundamentalDomain G s →\n    MeasureTheory.NullMeasurableSet t → ↑↑μ s < ↑↑μ t → ∃ x, x ∈ t ∧ ∃ y, y ∈ t ∧ ∃ g, g ≠ 0 ∧ g +ᵥ x = y :=\n\n/-- If two sets are equal modulo a set of measure zero, then `μ s = μ t`. -/\ntheorem ∀ {α : Type u_1} [inst : MeasurableSpace α] {μ : MeasureTheory.Measure α} {s t : Set α},\n  s =ᶠ[MeasureTheory.Measure.ae μ] t → ↑↑μ s = ↑↑μ t :=\n\n/-- Suppose that `S, T ∈ L(V)` are such that `S T = T S`. Prove that `null (T - λ I)` is invariant under `S` for every `λ ∈ F`. -/\ntheorem", "choices": ["∀ {𝕜 : Type u} {V : Type v} [inst : Field 𝕜] [inst_1 : AddCommGroup V] [inst_2 : Module 𝕜 V] (S T : End 𝕜 V) (hST : S * T = T * S),\n  ∀ (λ : 𝕜), LinearMap.IsInvariantSubspace (S : V →ₛₗ[𝕜] V) (LinearMap.ker (T - λ • LinearMap.id)) ", "∀ {F : Type u_1} [inst : Field F] {V : Type u_2} [inst_1 : AddCommGroup V] [inst_2 : Module F V] (S T : V →ₗ[F] V),\n  S.comp T = T.comp S → ∀ (λ : F), LinearMap.IsInvariantSubspace (S : V →ₗ[F] V) (LinearMap.nullSpace (T - LinearMap.id *ₗ λ)) ", "∀ {𝕜 : Type u} [inst : Field 𝕜] {V : Type u_2} [inst_1 : AddCommGroup V] [inst_2 : Module 𝕜 V] {S T : Module.End 𝕜 V},\n  S.comp T = T.comp S → ∀ (λ : 𝕜), Submodule.map S (Module.End.eigenspace T λ) ≤ Module.End.eigenspace T λ ", "∀ {F : Type u_1} {V : Type u_2} [inst : Field F] [inst_1 : AddCommGroup V] [inst_2 : Module F V] {S T : V →ₗ[F] V},\n  (∀ (x : V), S (T x) = T (S x)) →\n    ∀ (λ : F) (x : V), x ∈ (LinearMap.ker (T - algebraMap F (V →ₗ[F] V) λ)) → S x ∈ (LinearMap.ker (T - algebraMap F (V →ₗ[F] V) λ)) ", "∀ {F : Type u_1} {V : Type u_2} [inst : Field F] [inst_1 : AddCommGroup V] [inst_2 : Module F V] {S T : V →ₗ[F] V},\n  S.comp T = T.comp S →\n    ∀ λ : F, LinearMap.submoduleInvariant (LinearMap.ker (T - LinearMap.smulLeft LinearMap.id λ)) S ", "∀ {𝕜 : Type u_1} {V : Type u_2} [inst : Field 𝕜] [inst_1 : AddCommGroup V] [inst_2 : Module 𝕜 V] {S T : End 𝕜 V} (h : S * T = T * S),\n  ∀ (λ : 𝕜), LinearMap.range (S.restrict (LinearMap.ker (T - ⇑algebraMap 𝕜 (End 𝕜 V) λ))) ≤ LinearMap.ker (T - ⇑algebraMap 𝕜 (End 𝕜 V) λ) ", "∀ {F : Type u} {V : Type v} [inst : Field F] [inst_1 : AddCommGroup V] [inst_2 : Module F V]\n  (S T : End F V) (h : S * T = T * S),\n  ∀ (λ : F), Submodule.map (S.restrict_scalars F) (Submodule.null ∘ End.sub_apply_right_hom T (LinearMap.id F V) ∘ HasScalar.smul λ) =\n    Submodule.null ∘ End.sub_apply_right_hom T (LinearMap.id F V) ∘ HasScalar.smul λ ", "∀ {K : Type u} [inst : Field K] {V : Type u_1} [inst_1 : AddCommGroup V] [inst_2 : Module K V] (T S : End K V),\n  T.comp S = S.comp T → ∀ (λ : K), Submodule.map S (End.eigenspace T λ) ≤ End.eigenspace T λ ", "∀ {F : Type u_1} {V : Type u_2} [inst : Field F] [inst_1 : AddCommGroup V] [inst_2 : Module F V] (S T : V →ₗ[F] V)\n  (hST : S * T = T * S), ∀ λ : F, LinearMap.IsInvariantUnder (LinearMap.nullSpace (T - λ • LinearMap.id)) S ", "∀ {F : Type u_1} [inst : Field F] {V : Type u_2} [inst_1 : AddCommGroup V] [inst_2 : Module F V] (S T : End F V),\n  S.comp T = T.comp S → ∀ (λ : F), Submodule.map S (Ker (T - algebraMap F (End F V) λ)) = Ker (T - algebraMap F (End F V) λ) "]}
{"docString": "Suppose `T ∈ L(V)` is such that every vector in `V` is an eigenvector of `T`. Prove that `T` is a scalar multiple of the identity operator.", "prompts": "[{\"theorem\":\n  \"∀ {𝕜 : Type u_1} [inst : NontriviallyNormedField 𝕜] {V : Type u_2} [inst_1 : NormedAddCommGroup V]\\n  [inst_2 : NormedSpace 𝕜 V],\\n  Smooth (ModelWithCorners.prod (modelWithCornersSelf 𝕜 𝕜) (modelWithCornersSelf 𝕜 V)) (modelWithCornersSelf 𝕜 V)\\n    fun p => p.fst • p.snd\",\n  \"isProp\": true,\n  \"docString\":\n  \"On any vector space, multiplication by a scalar is a smooth operation. \"},\n {\"theorem\":\n  \"∀ {F : Type u_1} [inst : NormedAddCommGroup F] [inst_1 : InnerProductSpace ℝ F] (x : F) (r : ℝ),\\n  inner x (r • x) = r * (‖x‖ * ‖x‖)\",\n  \"isProp\": true,\n  \"docString\": \"The inner product of a vector with a multiple of itself. \"},\n {\"theorem\":\n  \"∀ (K : Type u_2) {V : Type u_1} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V] (v w : V)\\n  (hv : v ≠ 0) (hw : w ≠ 0), Projectivization.mk K v hv = Projectivization.mk K w hw ↔ ∃ a, a • w = v\",\n  \"isProp\": true,\n  \"docString\":\n  \"Two nonzero vectors go to the same point in projective space if and only if one is\\na scalar multiple of the other. \"},\n {\"theorem\":\n  \"∀ {K : Type v} {V : Type w} [inst : Field K] [inst_1 : AddCommGroup V] [inst_2 : Module K V] [inst_3 : IsAlgClosed K]\\n  [inst_4 : FiniteDimensional K V] (f : Module.End K V),\\n  ⨆ (μ : K) (k : ℕ), ↑(Module.End.generalizedEigenspace f μ) k = ⊤\",\n  \"isProp\": true,\n  \"docString\":\n  \"The generalized eigenvectors span the entire vector space (Lemma 8.21 of [axler2015]). \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} [inst : IsROrC 𝕜] [dec_𝕜 : DecidableEq 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : InnerProductSpace 𝕜 E] {T : E →ₗ[𝕜] E} (hT : LinearMap.IsSymmetric T) [inst_3 : FiniteDimensional 𝕜 E]\\n  {n : ℕ} (hn : FiniteDimensional.finrank 𝕜 E = n) (v : E) (i : Fin n),\\n  ↑(LinearMap.IsSymmetric.eigenvectorBasis hT hn).repr (↑T v) i =\\n    ↑(LinearMap.IsSymmetric.eigenvalues hT hn i) * ↑(LinearMap.IsSymmetric.eigenvectorBasis hT hn).repr v i\",\n  \"isProp\": true,\n  \"docString\":\n  \"*Diagonalization theorem*, *spectral theorem*; version 2: A self-adjoint operator `T` on a\\nfinite-dimensional inner product space `E` acts diagonally on the identification of `E` with\\nEuclidean space induced by an orthonormal basis of eigenvectors of `T`. \"},\n {\"theorem\":\n  \"∀ {K : Type v} {V : Type w} [inst : Field K] [inst_1 : AddCommGroup V] [inst_2 : Module K V] (f : Module.End K V),\\n  CompleteLattice.Independent (Module.End.eigenspace f)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The eigenspaces of a linear operator form an independent family of subspaces of `V`.  That is,\\nany eigenspace has trivial intersection with the span of all the other eigenspaces. \"},\n {\"theorem\":\n  \"∀ {R : Type u_1} {M : Type u_2} [inst : CommRing R] [inst_1 : AddCommGroup M] [inst_2 : Module R M]\\n  (Q : QuadraticForm R M) {P : (x : CliffordAlgebra Q) → x ∈ CliffordAlgebra.evenOdd Q 0 → Prop},\\n  (∀ (r : R),\\n      P (↑(algebraMap R (CliffordAlgebra Q)) r)\\n        (_ : ↑(algebraMap R (CliffordAlgebra Q)) r ∈ CliffordAlgebra.evenOdd Q 0)) →\\n    (∀ {x y : CliffordAlgebra Q} {hx : x ∈ CliffordAlgebra.evenOdd Q 0} {hy : y ∈ CliffordAlgebra.evenOdd Q 0},\\n        P x hx → P y hy → P (x + y) (_ : x + y ∈ CliffordAlgebra.evenOdd Q 0)) →\\n      (∀ (m₁ m₂ : M) {x : CliffordAlgebra Q} {hx : x ∈ CliffordAlgebra.evenOdd Q 0},\\n          P x hx →\\n            P (↑(CliffordAlgebra.ι Q) m₁ * ↑(CliffordAlgebra.ι Q) m₂ * x)\\n              (_ : ↑(CliffordAlgebra.ι Q) m₁ * ↑(CliffordAlgebra.ι Q) m₂ * x ∈ CliffordAlgebra.evenOdd Q 0)) →\\n        ∀ (x : CliffordAlgebra Q) (hx : x ∈ CliffordAlgebra.evenOdd Q 0), P x hx\",\n  \"isProp\": true,\n  \"docString\":\n  \"To show a property is true on the even parts, it suffices to show it is true on the\\nscalars, closed under addition, and under left-multiplication by a pair of vectors. \"},\n {\"theorem\":\n  \"∀ {R : Type u_1} [inst : CommRing R] {M : Type u_2} [inst_1 : AddCommGroup M] [inst_2 : Module R M]\\n  {Q : QuadraticForm R M} (a b : M),\\n  ↑(CliffordAlgebra.ι Q) a * ↑(CliffordAlgebra.ι Q) b + ↑(CliffordAlgebra.ι Q) b * ↑(CliffordAlgebra.ι Q) a =\\n    ↑(algebraMap R (CliffordAlgebra Q)) (QuadraticForm.polar (↑Q) a b)\",\n  \"isProp\": true,\n  \"docString\": \"The symmetric product of vectors is a scalar \"},\n {\"theorem\":\n  \"∀ {K : Type v} {V : Type w} [inst : Field K] [inst_1 : AddCommGroup V] [inst_2 : Module K V] [inst_3 : IsAlgClosed K]\\n  [inst_4 : FiniteDimensional K V] [inst_5 : Nontrivial V] (f : Module.End K V), ∃ c, Module.End.HasEigenvalue f c\",\n  \"isProp\": true,\n  \"docString\":\n  \"Every linear operator on a vector space over an algebraically closed field has\\nan eigenvalue. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_2} [inst : IsROrC 𝕜] {E : Type u_1} [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\\n  [inst_3 : CompleteSpace E] {T : E →L[𝕜] E},\\n  IsSelfAdjoint T →\\n    ∀ {x₀ : E},\\n      x₀ ≠ 0 →\\n        IsMinOn (ContinuousLinearMap.reApplyInnerSelf T) (Metric.sphere 0 ‖x₀‖) x₀ →\\n          Module.End.HasEigenvector (↑T) (↑(⨅ (x : { x // x ≠ 0 }), ContinuousLinearMap.rayleighQuotient T ↑x)) x₀\",\n  \"isProp\": true,\n  \"docString\":\n  \"For a self-adjoint operator `T`, a minimum of the Rayleigh quotient of `T` on a sphere centred\\nat the origin is an eigenvector of `T`, with eigenvalue the global infimum of the Rayleigh\\nquotient. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} [inst : IsROrC 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\\n  [inst_3 : FiniteDimensional 𝕜 E] [_i : Nontrivial E] {T : E →ₗ[𝕜] E},\\n  LinearMap.IsSymmetric T →\\n    Module.End.HasEigenvalue T ↑(⨆ (x : { x // x ≠ 0 }), ↑IsROrC.re (inner (↑T ↑x) ↑x) / ‖↑x‖ ^ 2)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The supremum of the Rayleigh quotient of a symmetric operator `T` on a nontrivial\\nfinite-dimensional vector space is an eigenvalue for that operator. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_2} [inst : IsROrC 𝕜] {E : Type u_1} [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\\n  [inst_3 : CompleteSpace E] {T : E →L[𝕜] E},\\n  IsSelfAdjoint T →\\n    ∀ {x₀ : E},\\n      x₀ ≠ 0 →\\n        IsMaxOn (ContinuousLinearMap.reApplyInnerSelf T) (Metric.sphere 0 ‖x₀‖) x₀ →\\n          Module.End.HasEigenvector (↑T) (↑(⨆ (x : { x // x ≠ 0 }), ContinuousLinearMap.rayleighQuotient T ↑x)) x₀\",\n  \"isProp\": true,\n  \"docString\":\n  \"For a self-adjoint operator `T`, a maximum of the Rayleigh quotient of `T` on a sphere centred\\nat the origin is an eigenvector of `T`, with eigenvalue the global supremum of the Rayleigh\\nquotient. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} [inst : IsROrC 𝕜] [dec_𝕜 : DecidableEq 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : InnerProductSpace 𝕜 E] {T : E →ₗ[𝕜] E} (hT : LinearMap.IsSymmetric T) [inst_3 : FiniteDimensional 𝕜 E]\\n  (v : E) (μ : Module.End.Eigenvalues T),\\n  ↑(LinearMap.IsSymmetric.diagonalization hT) (↑T v) μ = ↑T μ • ↑(LinearMap.IsSymmetric.diagonalization hT) v μ\",\n  \"isProp\": true,\n  \"docString\":\n  \"*Diagonalization theorem*, *spectral theorem*; version 1: A self-adjoint operator `T` on a\\nfinite-dimensional inner product space `E` acts diagonally on the decomposition of `E` into the\\ndirect sum of the eigenspaces of `T`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} [inst : IsROrC 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\\n  [inst_3 : FiniteDimensional 𝕜 E] [_i : Nontrivial E] {T : E →ₗ[𝕜] E},\\n  LinearMap.IsSymmetric T →\\n    Module.End.HasEigenvalue T ↑(⨅ (x : { x // x ≠ 0 }), ↑IsROrC.re (inner (↑T ↑x) ↑x) / ‖↑x‖ ^ 2)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The infimum of the Rayleigh quotient of a symmetric operator `T` on a nontrivial\\nfinite-dimensional vector space is an eigenvalue for that operator. \"},\n {\"theorem\":\n  \"∀ {Γ : Type u_1} {T : Type u_2} [inst : TopologicalSpace T] [inst_1 : SMul Γ T] [self : ContinuousConstSMul Γ T]\\n  (γ : Γ), Continuous fun x => γ • x\",\n  \"isProp\": true,\n  \"docString\":\n  \"The scalar multiplication `(•) : Γ → T → T` is continuous in the second argument. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} (R : Type u_2) (S : Type u_3) [inst : AddCommGroup E] [inst_1 : DivisionRing R]\\n  [inst_2 : DivisionRing S] [inst_3 : Module R E] [inst_4 : Module S E] (n : ℤ) (x : E), (↑n)⁻¹ • x = (↑n)⁻¹ • x\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `E` is a vector space over two division rings `R` and `S`, then scalar multiplications\\nagree on inverses of integer numbers in `R` and `S`. \"},\n {\"theorem\":\n  \"∀ {R : Type u_1} {M : Type u_2} [inst : CommRing R] [inst_1 : AddCommGroup M] [inst_2 : Module R M]\\n  (Q : QuadraticForm R M) (n : ZMod 2) {P : (x : CliffordAlgebra Q) → x ∈ CliffordAlgebra.evenOdd Q n → Prop},\\n  (∀ (v : CliffordAlgebra Q) (h : v ∈ LinearMap.range (CliffordAlgebra.ι Q) ^ ZMod.val n),\\n      P v (_ : v ∈ ⨆ (i : { n_1 // ↑n_1 = n }), LinearMap.range (CliffordAlgebra.ι Q) ^ ↑i)) →\\n    (∀ {x y : CliffordAlgebra Q} {hx : x ∈ CliffordAlgebra.evenOdd Q n} {hy : y ∈ CliffordAlgebra.evenOdd Q n},\\n        P x hx → P y hy → P (x + y) (_ : x + y ∈ CliffordAlgebra.evenOdd Q n)) →\\n      (∀ (m₁ m₂ : M) {x : CliffordAlgebra Q} {hx : x ∈ CliffordAlgebra.evenOdd Q n},\\n          P x hx →\\n            P (↑(CliffordAlgebra.ι Q) m₁ * ↑(CliffordAlgebra.ι Q) m₂ * x)\\n              (_ : ↑(CliffordAlgebra.ι Q) m₁ * ↑(CliffordAlgebra.ι Q) m₂ * x ∈ CliffordAlgebra.evenOdd Q n)) →\\n        ∀ (x : CliffordAlgebra Q) (hx : x ∈ CliffordAlgebra.evenOdd Q n), P x hx\",\n  \"isProp\": true,\n  \"docString\":\n  \"To show a property is true on the even or odd part, it suffices to show it is true on the\\nscalars or vectors (respectively), closed under addition, and under left-multiplication by a pair\\nof vectors. \"},\n {\"theorem\":\n  \"∀ {R : Type u_1} {M : Type u_2} [inst : CommRing R] [inst_1 : AddCommGroup M] [inst_2 : Module R M]\\n  (Q : QuadraticForm R M) {P : (x : CliffordAlgebra Q) → x ∈ CliffordAlgebra.evenOdd Q 1 → Prop},\\n  (∀ (v : M), P (↑(CliffordAlgebra.ι Q) v) (_ : ↑(CliffordAlgebra.ι Q) v ∈ CliffordAlgebra.evenOdd Q 1)) →\\n    (∀ {x y : CliffordAlgebra Q} {hx : x ∈ CliffordAlgebra.evenOdd Q 1} {hy : y ∈ CliffordAlgebra.evenOdd Q 1},\\n        P x hx → P y hy → P (x + y) (_ : x + y ∈ CliffordAlgebra.evenOdd Q 1)) →\\n      (∀ (m₁ m₂ : M) {x : CliffordAlgebra Q} {hx : x ∈ CliffordAlgebra.evenOdd Q 1},\\n          P x hx →\\n            P (↑(CliffordAlgebra.ι Q) m₁ * ↑(CliffordAlgebra.ι Q) m₂ * x)\\n              (_ : ↑(CliffordAlgebra.ι Q) m₁ * ↑(CliffordAlgebra.ι Q) m₂ * x ∈ CliffordAlgebra.evenOdd Q 1)) →\\n        ∀ (x : CliffordAlgebra Q) (hx : x ∈ CliffordAlgebra.evenOdd Q 1), P x hx\",\n  \"isProp\": true,\n  \"docString\":\n  \"To show a property is true on the odd parts, it suffices to show it is true on the\\nvectors, closed under addition, and under left-multiplication by a pair of vectors. \"},\n {\"theorem\":\n  \"∀ {G : Type u_1} [inst : MeasurableSpace G] [inst_1 : Mul G] [inst_2 : MeasurableMul G] (μ : MeasureTheory.Measure G),\\n  (∀ (g : G) (A : Set G), MeasurableSet A → ↑↑μ ((fun h => h * g) ⁻¹' A) = ↑↑μ A) ↔\\n    MeasureTheory.Measure.IsMulRightInvariant μ\",\n  \"isProp\": true,\n  \"docString\":\n  \"An alternative way to prove that `μ` is right invariant under multiplication. \"},\n {\"theorem\":\n  \"∀ {G : Type u_1} [inst : MeasurableSpace G] [inst_1 : Mul G] [inst_2 : MeasurableMul G] (μ : MeasureTheory.Measure G),\\n  (∀ (g : G) (A : Set G), MeasurableSet A → ↑↑μ ((fun h => g * h) ⁻¹' A) = ↑↑μ A) ↔\\n    MeasureTheory.Measure.IsMulLeftInvariant μ\",\n  \"isProp\": true,\n  \"docString\":\n  \"An alternative way to prove that `μ` is left invariant under multiplication. \"}]\n", "prompt_cons": "/-- On any vector space, multiplication by a scalar is a smooth operation. -/\ntheorem ∀ {𝕜 : Type u_1} [inst : NontriviallyNormedField 𝕜] {V : Type u_2} [inst_1 : NormedAddCommGroup V]\n  [inst_2 : NormedSpace 𝕜 V],\n  Smooth (ModelWithCorners.prod (modelWithCornersSelf 𝕜 𝕜) (modelWithCornersSelf 𝕜 V)) (modelWithCornersSelf 𝕜 V)\n    fun p => p.fst • p.snd :=\n\n/-- The inner product of a vector with a multiple of itself. -/\ntheorem ∀ {F : Type u_1} [inst : NormedAddCommGroup F] [inst_1 : InnerProductSpace ℝ F] (x : F) (r : ℝ),\n  inner x (r • x) = r * (‖x‖ * ‖x‖) :=\n\n/-- Two nonzero vectors go to the same point in projective space if and only if one is\na scalar multiple of the other. -/\ntheorem ∀ (K : Type u_2) {V : Type u_1} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V] (v w : V)\n  (hv : v ≠ 0) (hw : w ≠ 0), Projectivization.mk K v hv = Projectivization.mk K w hw ↔ ∃ a, a • w = v :=\n\n/-- The generalized eigenvectors span the entire vector space (Lemma 8.21 of [axler2015]). -/\ntheorem ∀ {K : Type v} {V : Type w} [inst : Field K] [inst_1 : AddCommGroup V] [inst_2 : Module K V] [inst_3 : IsAlgClosed K]\n  [inst_4 : FiniteDimensional K V] (f : Module.End K V),\n  ⨆ (μ : K) (k : ℕ), ↑(Module.End.generalizedEigenspace f μ) k = ⊤ :=\n\n/-- *Diagonalization theorem*, *spectral theorem*; version 2: A self-adjoint operator `T` on a\nfinite-dimensional inner product space `E` acts diagonally on the identification of `E` with\nEuclidean space induced by an orthonormal basis of eigenvectors of `T`. -/\ntheorem ∀ {𝕜 : Type u_1} [inst : IsROrC 𝕜] [dec_𝕜 : DecidableEq 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E]\n  [inst_2 : InnerProductSpace 𝕜 E] {T : E →ₗ[𝕜] E} (hT : LinearMap.IsSymmetric T) [inst_3 : FiniteDimensional 𝕜 E]\n  {n : ℕ} (hn : FiniteDimensional.finrank 𝕜 E = n) (v : E) (i : Fin n),\n  ↑(LinearMap.IsSymmetric.eigenvectorBasis hT hn).repr (↑T v) i =\n    ↑(LinearMap.IsSymmetric.eigenvalues hT hn i) * ↑(LinearMap.IsSymmetric.eigenvectorBasis hT hn).repr v i :=\n\n/-- The eigenspaces of a linear operator form an independent family of subspaces of `V`.  That is,\nany eigenspace has trivial intersection with the span of all the other eigenspaces. -/\ntheorem ∀ {K : Type v} {V : Type w} [inst : Field K] [inst_1 : AddCommGroup V] [inst_2 : Module K V] (f : Module.End K V),\n  CompleteLattice.Independent (Module.End.eigenspace f) :=\n\n/-- To show a property is true on the even parts, it suffices to show it is true on the\nscalars, closed under addition, and under left-multiplication by a pair of vectors. -/\ntheorem ∀ {R : Type u_1} {M : Type u_2} [inst : CommRing R] [inst_1 : AddCommGroup M] [inst_2 : Module R M]\n  (Q : QuadraticForm R M) {P : (x : CliffordAlgebra Q) → x ∈ CliffordAlgebra.evenOdd Q 0 → Prop},\n  (∀ (r : R),\n      P (↑(algebraMap R (CliffordAlgebra Q)) r)\n        (_ : ↑(algebraMap R (CliffordAlgebra Q)) r ∈ CliffordAlgebra.evenOdd Q 0)) →\n    (∀ {x y : CliffordAlgebra Q} {hx : x ∈ CliffordAlgebra.evenOdd Q 0} {hy : y ∈ CliffordAlgebra.evenOdd Q 0},\n        P x hx → P y hy → P (x + y) (_ : x + y ∈ CliffordAlgebra.evenOdd Q 0)) →\n      (∀ (m₁ m₂ : M) {x : CliffordAlgebra Q} {hx : x ∈ CliffordAlgebra.evenOdd Q 0},\n          P x hx →\n            P (↑(CliffordAlgebra.ι Q) m₁ * ↑(CliffordAlgebra.ι Q) m₂ * x)\n              (_ : ↑(CliffordAlgebra.ι Q) m₁ * ↑(CliffordAlgebra.ι Q) m₂ * x ∈ CliffordAlgebra.evenOdd Q 0)) →\n        ∀ (x : CliffordAlgebra Q) (hx : x ∈ CliffordAlgebra.evenOdd Q 0), P x hx :=\n\n/-- The symmetric product of vectors is a scalar -/\ntheorem ∀ {R : Type u_1} [inst : CommRing R] {M : Type u_2} [inst_1 : AddCommGroup M] [inst_2 : Module R M]\n  {Q : QuadraticForm R M} (a b : M),\n  ↑(CliffordAlgebra.ι Q) a * ↑(CliffordAlgebra.ι Q) b + ↑(CliffordAlgebra.ι Q) b * ↑(CliffordAlgebra.ι Q) a =\n    ↑(algebraMap R (CliffordAlgebra Q)) (QuadraticForm.polar (↑Q) a b) :=\n\n/-- Every linear operator on a vector space over an algebraically closed field has\nan eigenvalue. -/\ntheorem ∀ {K : Type v} {V : Type w} [inst : Field K] [inst_1 : AddCommGroup V] [inst_2 : Module K V] [inst_3 : IsAlgClosed K]\n  [inst_4 : FiniteDimensional K V] [inst_5 : Nontrivial V] (f : Module.End K V), ∃ c, Module.End.HasEigenvalue f c :=\n\n/-- For a self-adjoint operator `T`, a minimum of the Rayleigh quotient of `T` on a sphere centred\nat the origin is an eigenvector of `T`, with eigenvalue the global infimum of the Rayleigh\nquotient. -/\ntheorem ∀ {𝕜 : Type u_2} [inst : IsROrC 𝕜] {E : Type u_1} [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  [inst_3 : CompleteSpace E] {T : E →L[𝕜] E},\n  IsSelfAdjoint T →\n    ∀ {x₀ : E},\n      x₀ ≠ 0 →\n        IsMinOn (ContinuousLinearMap.reApplyInnerSelf T) (Metric.sphere 0 ‖x₀‖) x₀ →\n          Module.End.HasEigenvector (↑T) (↑(⨅ (x : { x // x ≠ 0 }), ContinuousLinearMap.rayleighQuotient T ↑x)) x₀ :=\n\n/-- The supremum of the Rayleigh quotient of a symmetric operator `T` on a nontrivial\nfinite-dimensional vector space is an eigenvalue for that operator. -/\ntheorem ∀ {𝕜 : Type u_1} [inst : IsROrC 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  [inst_3 : FiniteDimensional 𝕜 E] [_i : Nontrivial E] {T : E →ₗ[𝕜] E},\n  LinearMap.IsSymmetric T →\n    Module.End.HasEigenvalue T ↑(⨆ (x : { x // x ≠ 0 }), ↑IsROrC.re (inner (↑T ↑x) ↑x) / ‖↑x‖ ^ 2) :=\n\n/-- For a self-adjoint operator `T`, a maximum of the Rayleigh quotient of `T` on a sphere centred\nat the origin is an eigenvector of `T`, with eigenvalue the global supremum of the Rayleigh\nquotient. -/\ntheorem ∀ {𝕜 : Type u_2} [inst : IsROrC 𝕜] {E : Type u_1} [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  [inst_3 : CompleteSpace E] {T : E →L[𝕜] E},\n  IsSelfAdjoint T →\n    ∀ {x₀ : E},\n      x₀ ≠ 0 →\n        IsMaxOn (ContinuousLinearMap.reApplyInnerSelf T) (Metric.sphere 0 ‖x₀‖) x₀ →\n          Module.End.HasEigenvector (↑T) (↑(⨆ (x : { x // x ≠ 0 }), ContinuousLinearMap.rayleighQuotient T ↑x)) x₀ :=\n\n/-- *Diagonalization theorem*, *spectral theorem*; version 1: A self-adjoint operator `T` on a\nfinite-dimensional inner product space `E` acts diagonally on the decomposition of `E` into the\ndirect sum of the eigenspaces of `T`. -/\ntheorem ∀ {𝕜 : Type u_1} [inst : IsROrC 𝕜] [dec_𝕜 : DecidableEq 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E]\n  [inst_2 : InnerProductSpace 𝕜 E] {T : E →ₗ[𝕜] E} (hT : LinearMap.IsSymmetric T) [inst_3 : FiniteDimensional 𝕜 E]\n  (v : E) (μ : Module.End.Eigenvalues T),\n  ↑(LinearMap.IsSymmetric.diagonalization hT) (↑T v) μ = ↑T μ • ↑(LinearMap.IsSymmetric.diagonalization hT) v μ :=\n\n/-- The infimum of the Rayleigh quotient of a symmetric operator `T` on a nontrivial\nfinite-dimensional vector space is an eigenvalue for that operator. -/\ntheorem ∀ {𝕜 : Type u_1} [inst : IsROrC 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  [inst_3 : FiniteDimensional 𝕜 E] [_i : Nontrivial E] {T : E →ₗ[𝕜] E},\n  LinearMap.IsSymmetric T →\n    Module.End.HasEigenvalue T ↑(⨅ (x : { x // x ≠ 0 }), ↑IsROrC.re (inner (↑T ↑x) ↑x) / ‖↑x‖ ^ 2) :=\n\n/-- The scalar multiplication `(•) : Γ → T → T` is continuous in the second argument. -/\ntheorem ∀ {Γ : Type u_1} {T : Type u_2} [inst : TopologicalSpace T] [inst_1 : SMul Γ T] [self : ContinuousConstSMul Γ T]\n  (γ : Γ), Continuous fun x => γ • x :=\n\n/-- If `E` is a vector space over two division rings `R` and `S`, then scalar multiplications\nagree on inverses of integer numbers in `R` and `S`. -/\ntheorem ∀ {E : Type u_1} (R : Type u_2) (S : Type u_3) [inst : AddCommGroup E] [inst_1 : DivisionRing R]\n  [inst_2 : DivisionRing S] [inst_3 : Module R E] [inst_4 : Module S E] (n : ℤ) (x : E), (↑n)⁻¹ • x = (↑n)⁻¹ • x :=\n\n/-- To show a property is true on the even or odd part, it suffices to show it is true on the\nscalars or vectors (respectively), closed under addition, and under left-multiplication by a pair\nof vectors. -/\ntheorem ∀ {R : Type u_1} {M : Type u_2} [inst : CommRing R] [inst_1 : AddCommGroup M] [inst_2 : Module R M]\n  (Q : QuadraticForm R M) (n : ZMod 2) {P : (x : CliffordAlgebra Q) → x ∈ CliffordAlgebra.evenOdd Q n → Prop},\n  (∀ (v : CliffordAlgebra Q) (h : v ∈ LinearMap.range (CliffordAlgebra.ι Q) ^ ZMod.val n),\n      P v (_ : v ∈ ⨆ (i : { n_1 // ↑n_1 = n }), LinearMap.range (CliffordAlgebra.ι Q) ^ ↑i)) →\n    (∀ {x y : CliffordAlgebra Q} {hx : x ∈ CliffordAlgebra.evenOdd Q n} {hy : y ∈ CliffordAlgebra.evenOdd Q n},\n        P x hx → P y hy → P (x + y) (_ : x + y ∈ CliffordAlgebra.evenOdd Q n)) →\n      (∀ (m₁ m₂ : M) {x : CliffordAlgebra Q} {hx : x ∈ CliffordAlgebra.evenOdd Q n},\n          P x hx →\n            P (↑(CliffordAlgebra.ι Q) m₁ * ↑(CliffordAlgebra.ι Q) m₂ * x)\n              (_ : ↑(CliffordAlgebra.ι Q) m₁ * ↑(CliffordAlgebra.ι Q) m₂ * x ∈ CliffordAlgebra.evenOdd Q n)) →\n        ∀ (x : CliffordAlgebra Q) (hx : x ∈ CliffordAlgebra.evenOdd Q n), P x hx :=\n\n/-- To show a property is true on the odd parts, it suffices to show it is true on the\nvectors, closed under addition, and under left-multiplication by a pair of vectors. -/\ntheorem ∀ {R : Type u_1} {M : Type u_2} [inst : CommRing R] [inst_1 : AddCommGroup M] [inst_2 : Module R M]\n  (Q : QuadraticForm R M) {P : (x : CliffordAlgebra Q) → x ∈ CliffordAlgebra.evenOdd Q 1 → Prop},\n  (∀ (v : M), P (↑(CliffordAlgebra.ι Q) v) (_ : ↑(CliffordAlgebra.ι Q) v ∈ CliffordAlgebra.evenOdd Q 1)) →\n    (∀ {x y : CliffordAlgebra Q} {hx : x ∈ CliffordAlgebra.evenOdd Q 1} {hy : y ∈ CliffordAlgebra.evenOdd Q 1},\n        P x hx → P y hy → P (x + y) (_ : x + y ∈ CliffordAlgebra.evenOdd Q 1)) →\n      (∀ (m₁ m₂ : M) {x : CliffordAlgebra Q} {hx : x ∈ CliffordAlgebra.evenOdd Q 1},\n          P x hx →\n            P (↑(CliffordAlgebra.ι Q) m₁ * ↑(CliffordAlgebra.ι Q) m₂ * x)\n              (_ : ↑(CliffordAlgebra.ι Q) m₁ * ↑(CliffordAlgebra.ι Q) m₂ * x ∈ CliffordAlgebra.evenOdd Q 1)) →\n        ∀ (x : CliffordAlgebra Q) (hx : x ∈ CliffordAlgebra.evenOdd Q 1), P x hx :=\n\n/-- An alternative way to prove that `μ` is right invariant under multiplication. -/\ntheorem ∀ {G : Type u_1} [inst : MeasurableSpace G] [inst_1 : Mul G] [inst_2 : MeasurableMul G] (μ : MeasureTheory.Measure G),\n  (∀ (g : G) (A : Set G), MeasurableSet A → ↑↑μ ((fun h => h * g) ⁻¹' A) = ↑↑μ A) ↔\n    MeasureTheory.Measure.IsMulRightInvariant μ :=\n\n/-- An alternative way to prove that `μ` is left invariant under multiplication. -/\ntheorem ∀ {G : Type u_1} [inst : MeasurableSpace G] [inst_1 : Mul G] [inst_2 : MeasurableMul G] (μ : MeasureTheory.Measure G),\n  (∀ (g : G) (A : Set G), MeasurableSet A → ↑↑μ ((fun h => g * h) ⁻¹' A) = ↑↑μ A) ↔\n    MeasureTheory.Measure.IsMulLeftInvariant μ :=\n\n/-- Suppose `T ∈ L(V)` is such that every vector in `V` is an eigenvector of `T`. Prove that `T` is a scalar multiple of the identity operator. -/\ntheorem", "choices": ["∀ {K : Type v} {V : Type w} [inst : Field K] [inst_1 : AddCommGroup V] [inst_2 : Module K V] (T : Module.End K V),\n  (∀ (v : V), v ≠ 0 → ∃ (c : K), Module.End.HasEigenvector T c v) → ∃ (c : K), T = c • LinearMap.id ", "∀ {K : Type u} {V : Type v} [inst : Field K] [inst_1 : AddCommGroup V] [inst_2 : Module K V] (T : Module.End K V)\n  (h_eigvec : ∀ (v : V), v ≠ 0 → ∃ (μ : K), T v = μ • v),\n  ∃ (c : K), T = c • LinearMap.id ", "∀ {K : Type u_1} {V : Type u_2} [inst : Field K] [inst_1 : AddCommGroup V] [inst_2 : Module K V] (T : Module.End K V),\n  (∀ (v : V), ∃ (c : K), T v = c • v) → (∃ (c : K), T = c • LinearMap.id) ", "∀ {K : Type u_1} [inst : Field K] {V : Type u_2} [inst_1 : AddCommGroup V] [inst_2 : Module K V] [inst_3 : FiniteDimensional K V]\n  (T : LinearMap K V V),\n  (∀ v : V, ∃ μ : K, T v = μ • v) →\n    ∃ (c : K), T = c • LinearMap.id ", "∀ {K : Type u} {V : Type v} [inst : Field K] [inst_1 : AddCommGroup V] [inst_2 : Module K V] (T : Module.End K V),\n  (∀ (v : V), ∃ (c : K), v ≠ 0 → T v = c • v) → T = Algebra.id.smul (Module.End.eigenvalue T) ", "forall {K : Type u_1} [inst : Field K] {V : Type u_2} [inst_1 : AddCommGroup V] [inst_2 : Module K V] [inst_3 : FiniteDimensional K V]\n  (T : Module.End K V) (h_eigenvector : ∀ (v : V), v ≠ 0 → ∃ (μ : K), Module.End.HasEigenvector T μ v),\n  (∃ (c : K), T = c • LinearMap.id) ", "forall {K : Type u_1} [inst : Field K] {V : Type u_2} [inst_1 : AddCommGroup V] [inst_2 : Module K V] (T : Module.End K V),\n  (∀ (v : V), v ≠ 0 → ∃ c, T v = c • v) → (∃ c, T = c • (LinearMap.id : Module.End K V)) ", "∀ {K : Type u_1} {V : Type u_2} [inst : Field K] [inst_1 : AddCommGroup V] [inst_2 : Module K V] (T : Module.End K V),\n  (∀ (v : V), v ≠ 0 → ∃ (c : K), T v = c • v) → (∃ (c : K), ∀ (v : V), T v = c • v) ", "∀ {K : Type u_1} {V : Type u_2} [inst : Field K] [inst_1 : AddCommGroup V] [inst_2 : Module K V] {T : Module.End K V},\n  (∀ (v : V), v ≠ 0 → ∃ c, T v = c • v) → (∃ c, T = c • 1) ", "∀ {𝕜 : Type u} {V : Type v} [inst : Field 𝕜] [inst_1 : AddCommGroup V] [inst_2 : Module 𝕜 V] (T : Module.End 𝕜 V),\n  (∀ (v : V), v ≠ 0 → ∃ (c : 𝕜), T v = c • v) → T = (Module.End.trace 𝕜 V T) • (1 : Module.End 𝕜 V) "]}
{"docString": "Suppose that `T ∈ L(V)` has `dim V` distinct eigenvalues and that `S ∈ L(V)` has the same eigenvectors as `T` (not necessarily with the same eigenvalues). Prove that `S T = T S`.", "prompts": "[{\"theorem\":\n  \"∀ {𝕜 : Type u_1} [inst : IsROrC 𝕜] [dec_𝕜 : DecidableEq 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : InnerProductSpace 𝕜 E] {T : E →ₗ[𝕜] E} (hT : LinearMap.IsSymmetric T) [inst_3 : FiniteDimensional 𝕜 E]\\n  (v : E) (μ : Module.End.Eigenvalues T),\\n  ↑(LinearMap.IsSymmetric.diagonalization hT) (↑T v) μ = ↑T μ • ↑(LinearMap.IsSymmetric.diagonalization hT) v μ\",\n  \"isProp\": true,\n  \"docString\":\n  \"*Diagonalization theorem*, *spectral theorem*; version 1: A self-adjoint operator `T` on a\\nfinite-dimensional inner product space `E` acts diagonally on the decomposition of `E` into the\\ndirect sum of the eigenspaces of `T`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} [inst : IsROrC 𝕜] [dec_𝕜 : DecidableEq 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : InnerProductSpace 𝕜 E] {T : E →ₗ[𝕜] E} (hT : LinearMap.IsSymmetric T) [inst_3 : FiniteDimensional 𝕜 E]\\n  {n : ℕ} (hn : FiniteDimensional.finrank 𝕜 E = n) (v : E) (i : Fin n),\\n  ↑(LinearMap.IsSymmetric.eigenvectorBasis hT hn).repr (↑T v) i =\\n    ↑(LinearMap.IsSymmetric.eigenvalues hT hn i) * ↑(LinearMap.IsSymmetric.eigenvectorBasis hT hn).repr v i\",\n  \"isProp\": true,\n  \"docString\":\n  \"*Diagonalization theorem*, *spectral theorem*; version 2: A self-adjoint operator `T` on a\\nfinite-dimensional inner product space `E` acts diagonally on the identification of `E` with\\nEuclidean space induced by an orthonormal basis of eigenvectors of `T`. \"},\n {\"theorem\":\n  \"∀ {R S : Type u} [inst : CommRing R] [inst_1 : CommRing S] (M : Submonoid R) (R' : Type u) [inst_2 : CommRing R']\\n  [inst_3 : Algebra R R'] [inst_4 : Algebra R' S] [inst_5 : Algebra R S] [inst_6 : IsScalarTower R R' S]\\n  [inst_7 : IsLocalization M R'] (s : Set S) (x : S), x ∈ Submodule.span R' s → ∃ t, t • x ∈ Submodule.span R s\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `S` is an `R' = M⁻¹R` algebra, and `x ∈ span R' s`,\\nthen `t • x ∈ span R s` for some `t : M`.\"},\n {\"theorem\":\n  \"∀ {R : Type u} [inst : CommSemiring R] {S : Type u_1} [inst_1 : CommRing S] [inst_2 : Algebra R S] (S' : Subalgebra R S)\\n  {ι : Type u_2} (ι' : Finset ι) (s l : ι → S),\\n  (Finset.sum ι' fun i => l i * s i) = 1 →\\n    (∀ (i : ι), s i ∈ S') → (∀ (i : ι), l i ∈ S') → ∀ (x : S), (∀ (i : ι), ∃ n, s i ^ n • x ∈ S') → x ∈ S'\",\n  \"isProp\": true,\n  \"docString\":\n  \"Suppose we are given `∑ i, lᵢ * sᵢ = 1` in `S`, and `S'` a subalgebra of `S` that contains\\n`lᵢ` and `sᵢ`. To check that an `x : S` falls in `S'`, we only need to show that\\n`sᵢ ^ n • x ∈ S'` for some `n` for each `sᵢ`. \"},\n {\"theorem\":\n  \"∀ {R : Type u} [inst : Ring R] {M : Type v} [inst_1 : AddCommGroup M] [inst_2 : Module R M] {M₁ : Type v}\\n  [inst_3 : AddCommGroup M₁] [inst_4 : Module R M₁], (M ≃ₗ[R] M₁) → Module.rank R M = Module.rank R M₁\",\n  \"isProp\": true,\n  \"docString\":\n  \"Two linearly equivalent vector spaces have the same dimension. \"},\n {\"theorem\": \"RingHom.LocalizationPreserves @RingHom.Finite\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `S` is a finite `R`-algebra, then `S' = M⁻¹S` is a finite `R' = M⁻¹R`-algebra. \"},\n {\"theorem\":\n  \"∀ {V : Type u_1} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℂ V] (S T : V →ₗ[ℂ] V),\\n  (∀ (x : V), inner (↑S x) x = inner (↑T x) x) ↔ S = T\",\n  \"isProp\": true,\n  \"docString\":\n  \"Two linear maps `S` and `T` are equal, if and only if the identity `⟪S x, x⟫_ℂ = ⟪T x, x⟫_ℂ` holds\\nfor all `x`.\\n\"},\n {\"theorem\":\n  \"∀ {K : Type v} {V : Type w} [inst : Field K] [inst_1 : AddCommGroup V] [inst_2 : Module K V]\\n  [inst_3 : FiniteDimensional K V] (f : Module.End K V) (μ : K) {k : ℕ},\\n  FiniteDimensional.finrank K V ≤ k →\\n    ↑(Module.End.generalizedEigenspace f μ) k = ↑(Module.End.generalizedEigenspace f μ) (FiniteDimensional.finrank K V)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Generalized eigenspaces for exponents at least `finrank K V` are equal to each other. \"},\n {\"theorem\":\n  \"∀ {K : Type v} {V : Type w} [inst : Field K] [inst_1 : AddCommGroup V] [inst_2 : Module K V] (f : Module.End K V),\\n  CompleteLattice.Independent (Module.End.eigenspace f)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The eigenspaces of a linear operator form an independent family of subspaces of `V`.  That is,\\nany eigenspace has trivial intersection with the span of all the other eigenspaces. \"},\n {\"theorem\":\n  \"∀ {K : Type u} {V : Type v} {V' : Type v'} [inst : Ring K] [inst_1 : StrongRankCondition K] [inst_2 : AddCommGroup V]\\n  [inst_3 : Module K V] [inst_4 : Module.Free K V] [inst_5 : AddCommGroup V'] [inst_6 : Module K V']\\n  [inst_7 : Module.Free K V'],\\n  Nonempty (V ≃ₗ[K] V') ↔ Cardinal.lift (Module.rank K V) = Cardinal.lift (Module.rank K V')\",\n  \"isProp\": true,\n  \"docString\":\n  \"Two vector spaces are isomorphic if and only if they have the same dimension. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\\n  {U V : Submodule 𝕜 E} [inst_3 : HasOrthogonalProjection U] [inst_4 : HasOrthogonalProjection V],\\n  U ≤ V → ∀ (x : E), ↑(orthogonalProjection U) ↑(↑(orthogonalProjection V) x) = ↑(orthogonalProjection U) x\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `U ≤ V`, then projecting on `V` and then on `U` is the same as projecting on `U`. \"},\n {\"theorem\":\n  \"∀ {R : Type u_1} {M : Type u_2} [inst : Ring R] [inst_1 : AddCommGroup M] [inst_2 : Module R M] (S T : Submodule R M),\\n  T ≤ S →\\n    ∀ [inst_3 : DecidablePred fun x => x ∈ Submodule.map (Submodule.mkQ T) S] [inst_4 : Fintype (M ⧸ S)]\\n      [inst_5 : Fintype (M ⧸ T)],\\n      Fintype.card { x // x ∈ Submodule.map (Submodule.mkQ T) S } * Fintype.card (M ⧸ S) = Fintype.card (M ⧸ T)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Corollary of the third isomorphism theorem: `[S : T] [M : S] = [M : T]` \"},\n {\"theorem\":\n  \"∀ {R : Type u} [inst : Ring R] {M : Type v} [inst_1 : AddCommGroup M] [inst_2 : Module R M] {M' : Type v'}\\n  [inst_3 : AddCommGroup M'] [inst_4 : Module R M'],\\n  (M ≃ₗ[R] M') → Cardinal.lift (Module.rank R M) = Cardinal.lift (Module.rank R M')\",\n  \"isProp\": true,\n  \"docString\":\n  \"Two linearly equivalent vector spaces have the same dimension, a version with different\\nuniverses. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} (R : Type u_2) (S : Type u_3) [inst : AddCommGroup E] [inst_1 : DivisionRing R]\\n  [inst_2 : DivisionRing S] [inst_3 : Module R E] [inst_4 : Module S E] (n : ℤ) (x : E), (↑n)⁻¹ • x = (↑n)⁻¹ • x\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `E` is a vector space over two division rings `R` and `S`, then scalar multiplications\\nagree on inverses of integer numbers in `R` and `S`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {X : Type u_2} [inst : IsROrC 𝕜] [inst_1 : TopologicalSpace X] {S : Set C(X, 𝕜)},\\n  (∀ (f : C(X, 𝕜)), f ∈ S → ↑(AlgHom.compLeftContinuous ℝ ↑IsROrC.conjAe (_ : Continuous ↑IsROrC.conjCle)) f ∈ S) →\\n    ContinuousMap.ConjInvariantSubalgebra (Subalgebra.restrictScalars ℝ (Algebra.adjoin 𝕜 S))\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a set `S` is conjugation-invariant, then its `𝕜`-span is conjugation-invariant. \"},\n {\"theorem\":\n  \"∀ {n : Type u_1} {𝕜 : Type u_2} [inst : Field 𝕜] [inst_1 : DecidableEq n] [inst_2 : Fintype n] (P : Matrix n n 𝕜 → Prop)\\n  (M : Matrix n n 𝕜),\\n  (∀ (D : n → 𝕜), Matrix.det (Matrix.diagonal D) = Matrix.det M → P (Matrix.diagonal D)) →\\n    (∀ (t : Matrix.TransvectionStruct n 𝕜), P (Matrix.TransvectionStruct.toMatrix t)) →\\n      (∀ (A B : Matrix n n 𝕜), P A → P B → P (Matrix.mul A B)) → P M\",\n  \"isProp\": true,\n  \"docString\":\n  \"Induction principle for matrices based on transvections: if a property is true for all diagonal\\nmatrices, all transvections, and is stable under product, then it is true for all matrices. This is\\nthe useful way to say that matrices are generated by diagonal matrices and transvections.\\n\\nWe state a slightly more general version: to prove a property for a matrix `M`, it suffices to\\nassume that the diagonal matrices we consider have the same determinant as `M`. This is useful to\\nobtain similar principles for `SLₙ` or `GLₙ`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_2} {E : Type u_1} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\\n  {K : Submodule 𝕜 E} {x y : E}, Dense ↑K → x - y ∈ Kᗮ → x = y\",\n  \"isProp\": true,\n  \"docString\": \"If `S` is dense and `x - y ∈ Kᗮ`, then `x = y`. \"},\n {\"theorem\":\n  \"∀ (R : Type u) [inst : Semiring R] {ι : Type v} [dec_ι : DecidableEq ι] {M : ι → Type w}\\n  [inst_1 : (i : ι) → AddCommMonoid (M i)] [inst_2 : (i : ι) → Module R (M i)] (i : ι) (c : R) (x : M i),\\n  ↑(DirectSum.of M i) (c • x) = c • ↑(DirectSum.of M i) x\",\n  \"isProp\": true,\n  \"docString\":\n  \"Scalar multiplication commutes with the inclusion of each component into the direct sum. \"},\n {\"theorem\":\n  \"∀ (R : Type u) [inst : Semiring R] {ι : Type v} [dec_ι : DecidableEq ι] {M : ι → Type w}\\n  [inst_1 : (i : ι) → AddCommMonoid (M i)] [inst_2 : (i : ι) → Module R (M i)] (s : Finset ι) (c : R)\\n  (x : (i : ↑↑s) → M ↑i), ↑(DirectSum.mk M s) (c • x) = c • ↑(DirectSum.mk M s) x\",\n  \"isProp\": true,\n  \"docString\": \"Scalar multiplication commutes with direct sums. \"},\n {\"theorem\":\n  \"∀ {R S : Type u} [inst : CommRing R] [inst_1 : CommRing S] (M : Submonoid R) (R' : Type u) [inst_2 : CommRing R']\\n  [inst_3 : Algebra R R'] [inst_4 : Algebra R' S] [inst_5 : Algebra R S] [inst_6 : IsScalarTower R R' S]\\n  [inst_7 : IsLocalization M R'] (s : Set S) (x : S), x ∈ Algebra.adjoin R' s → ∃ t, t • x ∈ Algebra.adjoin R s\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `S` is an `R' = M⁻¹R` algebra, and `x ∈ adjoin R' s`,\\nthen `t • x ∈ adjoin R s` for some `t : M`.\"}]\n", "prompt_cons": "/-- *Diagonalization theorem*, *spectral theorem*; version 1: A self-adjoint operator `T` on a\nfinite-dimensional inner product space `E` acts diagonally on the decomposition of `E` into the\ndirect sum of the eigenspaces of `T`. -/\ntheorem ∀ {𝕜 : Type u_1} [inst : IsROrC 𝕜] [dec_𝕜 : DecidableEq 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E]\n  [inst_2 : InnerProductSpace 𝕜 E] {T : E →ₗ[𝕜] E} (hT : LinearMap.IsSymmetric T) [inst_3 : FiniteDimensional 𝕜 E]\n  (v : E) (μ : Module.End.Eigenvalues T),\n  ↑(LinearMap.IsSymmetric.diagonalization hT) (↑T v) μ = ↑T μ • ↑(LinearMap.IsSymmetric.diagonalization hT) v μ :=\n\n/-- *Diagonalization theorem*, *spectral theorem*; version 2: A self-adjoint operator `T` on a\nfinite-dimensional inner product space `E` acts diagonally on the identification of `E` with\nEuclidean space induced by an orthonormal basis of eigenvectors of `T`. -/\ntheorem ∀ {𝕜 : Type u_1} [inst : IsROrC 𝕜] [dec_𝕜 : DecidableEq 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E]\n  [inst_2 : InnerProductSpace 𝕜 E] {T : E →ₗ[𝕜] E} (hT : LinearMap.IsSymmetric T) [inst_3 : FiniteDimensional 𝕜 E]\n  {n : ℕ} (hn : FiniteDimensional.finrank 𝕜 E = n) (v : E) (i : Fin n),\n  ↑(LinearMap.IsSymmetric.eigenvectorBasis hT hn).repr (↑T v) i =\n    ↑(LinearMap.IsSymmetric.eigenvalues hT hn i) * ↑(LinearMap.IsSymmetric.eigenvectorBasis hT hn).repr v i :=\n\n/-- If `S` is an `R' = M⁻¹R` algebra, and `x ∈ span R' s`,\nthen `t • x ∈ span R s` for some `t : M`. -/\ntheorem ∀ {R S : Type u} [inst : CommRing R] [inst_1 : CommRing S] (M : Submonoid R) (R' : Type u) [inst_2 : CommRing R']\n  [inst_3 : Algebra R R'] [inst_4 : Algebra R' S] [inst_5 : Algebra R S] [inst_6 : IsScalarTower R R' S]\n  [inst_7 : IsLocalization M R'] (s : Set S) (x : S), x ∈ Submodule.span R' s → ∃ t, t • x ∈ Submodule.span R s :=\n\n/-- Suppose we are given `∑ i, lᵢ * sᵢ = 1` in `S`, and `S'` a subalgebra of `S` that contains\n`lᵢ` and `sᵢ`. To check that an `x : S` falls in `S'`, we only need to show that\n`sᵢ ^ n • x ∈ S'` for some `n` for each `sᵢ`. -/\ntheorem ∀ {R : Type u} [inst : CommSemiring R] {S : Type u_1} [inst_1 : CommRing S] [inst_2 : Algebra R S] (S' : Subalgebra R S)\n  {ι : Type u_2} (ι' : Finset ι) (s l : ι → S),\n  (Finset.sum ι' fun i => l i * s i) = 1 →\n    (∀ (i : ι), s i ∈ S') → (∀ (i : ι), l i ∈ S') → ∀ (x : S), (∀ (i : ι), ∃ n, s i ^ n • x ∈ S') → x ∈ S' :=\n\n/-- Two linearly equivalent vector spaces have the same dimension. -/\ntheorem ∀ {R : Type u} [inst : Ring R] {M : Type v} [inst_1 : AddCommGroup M] [inst_2 : Module R M] {M₁ : Type v}\n  [inst_3 : AddCommGroup M₁] [inst_4 : Module R M₁], (M ≃ₗ[R] M₁) → Module.rank R M = Module.rank R M₁ :=\n\n/-- If `S` is a finite `R`-algebra, then `S' = M⁻¹S` is a finite `R' = M⁻¹R`-algebra. -/\ntheorem RingHom.LocalizationPreserves @RingHom.Finite :=\n\n/-- Two linear maps `S` and `T` are equal, if and only if the identity `⟪S x, x⟫_ℂ = ⟪T x, x⟫_ℂ` holds\nfor all `x`. -/\ntheorem ∀ {V : Type u_1} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℂ V] (S T : V →ₗ[ℂ] V),\n  (∀ (x : V), inner (↑S x) x = inner (↑T x) x) ↔ S = T :=\n\n/-- Generalized eigenspaces for exponents at least `finrank K V` are equal to each other. -/\ntheorem ∀ {K : Type v} {V : Type w} [inst : Field K] [inst_1 : AddCommGroup V] [inst_2 : Module K V]\n  [inst_3 : FiniteDimensional K V] (f : Module.End K V) (μ : K) {k : ℕ},\n  FiniteDimensional.finrank K V ≤ k →\n    ↑(Module.End.generalizedEigenspace f μ) k = ↑(Module.End.generalizedEigenspace f μ) (FiniteDimensional.finrank K V) :=\n\n/-- The eigenspaces of a linear operator form an independent family of subspaces of `V`.  That is,\nany eigenspace has trivial intersection with the span of all the other eigenspaces. -/\ntheorem ∀ {K : Type v} {V : Type w} [inst : Field K] [inst_1 : AddCommGroup V] [inst_2 : Module K V] (f : Module.End K V),\n  CompleteLattice.Independent (Module.End.eigenspace f) :=\n\n/-- Two vector spaces are isomorphic if and only if they have the same dimension. -/\ntheorem ∀ {K : Type u} {V : Type v} {V' : Type v'} [inst : Ring K] [inst_1 : StrongRankCondition K] [inst_2 : AddCommGroup V]\n  [inst_3 : Module K V] [inst_4 : Module.Free K V] [inst_5 : AddCommGroup V'] [inst_6 : Module K V']\n  [inst_7 : Module.Free K V'],\n  Nonempty (V ≃ₗ[K] V') ↔ Cardinal.lift (Module.rank K V) = Cardinal.lift (Module.rank K V') :=\n\n/-- If `U ≤ V`, then projecting on `V` and then on `U` is the same as projecting on `U`. -/\ntheorem ∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  {U V : Submodule 𝕜 E} [inst_3 : HasOrthogonalProjection U] [inst_4 : HasOrthogonalProjection V],\n  U ≤ V → ∀ (x : E), ↑(orthogonalProjection U) ↑(↑(orthogonalProjection V) x) = ↑(orthogonalProjection U) x :=\n\n/-- Corollary of the third isomorphism theorem: `[S : T] [M : S] = [M : T]` -/\ntheorem ∀ {R : Type u_1} {M : Type u_2} [inst : Ring R] [inst_1 : AddCommGroup M] [inst_2 : Module R M] (S T : Submodule R M),\n  T ≤ S →\n    ∀ [inst_3 : DecidablePred fun x => x ∈ Submodule.map (Submodule.mkQ T) S] [inst_4 : Fintype (M ⧸ S)]\n      [inst_5 : Fintype (M ⧸ T)],\n      Fintype.card { x // x ∈ Submodule.map (Submodule.mkQ T) S } * Fintype.card (M ⧸ S) = Fintype.card (M ⧸ T) :=\n\n/-- Two linearly equivalent vector spaces have the same dimension, a version with different\nuniverses. -/\ntheorem ∀ {R : Type u} [inst : Ring R] {M : Type v} [inst_1 : AddCommGroup M] [inst_2 : Module R M] {M' : Type v'}\n  [inst_3 : AddCommGroup M'] [inst_4 : Module R M'],\n  (M ≃ₗ[R] M') → Cardinal.lift (Module.rank R M) = Cardinal.lift (Module.rank R M') :=\n\n/-- If `E` is a vector space over two division rings `R` and `S`, then scalar multiplications\nagree on inverses of integer numbers in `R` and `S`. -/\ntheorem ∀ {E : Type u_1} (R : Type u_2) (S : Type u_3) [inst : AddCommGroup E] [inst_1 : DivisionRing R]\n  [inst_2 : DivisionRing S] [inst_3 : Module R E] [inst_4 : Module S E] (n : ℤ) (x : E), (↑n)⁻¹ • x = (↑n)⁻¹ • x :=\n\n/-- If a set `S` is conjugation-invariant, then its `𝕜`-span is conjugation-invariant. -/\ntheorem ∀ {𝕜 : Type u_1} {X : Type u_2} [inst : IsROrC 𝕜] [inst_1 : TopologicalSpace X] {S : Set C(X, 𝕜)},\n  (∀ (f : C(X, 𝕜)), f ∈ S → ↑(AlgHom.compLeftContinuous ℝ ↑IsROrC.conjAe (_ : Continuous ↑IsROrC.conjCle)) f ∈ S) →\n    ContinuousMap.ConjInvariantSubalgebra (Subalgebra.restrictScalars ℝ (Algebra.adjoin 𝕜 S)) :=\n\n/-- Induction principle for matrices based on transvections: if a property is true for all diagonal\nmatrices, all transvections, and is stable under product, then it is true for all matrices. This is\nthe useful way to say that matrices are generated by diagonal matrices and transvections.\n\nWe state a slightly more general version: to prove a property for a matrix `M`, it suffices to\nassume that the diagonal matrices we consider have the same determinant as `M`. This is useful to\nobtain similar principles for `SLₙ` or `GLₙ`. -/\ntheorem ∀ {n : Type u_1} {𝕜 : Type u_2} [inst : Field 𝕜] [inst_1 : DecidableEq n] [inst_2 : Fintype n] (P : Matrix n n 𝕜 → Prop)\n  (M : Matrix n n 𝕜),\n  (∀ (D : n → 𝕜), Matrix.det (Matrix.diagonal D) = Matrix.det M → P (Matrix.diagonal D)) →\n    (∀ (t : Matrix.TransvectionStruct n 𝕜), P (Matrix.TransvectionStruct.toMatrix t)) →\n      (∀ (A B : Matrix n n 𝕜), P A → P B → P (Matrix.mul A B)) → P M :=\n\n/-- If `S` is dense and `x - y ∈ Kᗮ`, then `x = y`. -/\ntheorem ∀ {𝕜 : Type u_2} {E : Type u_1} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  {K : Submodule 𝕜 E} {x y : E}, Dense ↑K → x - y ∈ Kᗮ → x = y :=\n\n/-- Scalar multiplication commutes with the inclusion of each component into the direct sum. -/\ntheorem ∀ (R : Type u) [inst : Semiring R] {ι : Type v} [dec_ι : DecidableEq ι] {M : ι → Type w}\n  [inst_1 : (i : ι) → AddCommMonoid (M i)] [inst_2 : (i : ι) → Module R (M i)] (i : ι) (c : R) (x : M i),\n  ↑(DirectSum.of M i) (c • x) = c • ↑(DirectSum.of M i) x :=\n\n/-- Scalar multiplication commutes with direct sums. -/\ntheorem ∀ (R : Type u) [inst : Semiring R] {ι : Type v} [dec_ι : DecidableEq ι] {M : ι → Type w}\n  [inst_1 : (i : ι) → AddCommMonoid (M i)] [inst_2 : (i : ι) → Module R (M i)] (s : Finset ι) (c : R)\n  (x : (i : ↑↑s) → M ↑i), ↑(DirectSum.mk M s) (c • x) = c • ↑(DirectSum.mk M s) x :=\n\n/-- If `S` is an `R' = M⁻¹R` algebra, and `x ∈ adjoin R' s`,\nthen `t • x ∈ adjoin R s` for some `t : M`. -/\ntheorem ∀ {R S : Type u} [inst : CommRing R] [inst_1 : CommRing S] (M : Submonoid R) (R' : Type u) [inst_2 : CommRing R']\n  [inst_3 : Algebra R R'] [inst_4 : Algebra R' S] [inst_5 : Algebra R S] [inst_6 : IsScalarTower R R' S]\n  [inst_7 : IsLocalization M R'] (s : Set S) (x : S), x ∈ Algebra.adjoin R' s → ∃ t, t • x ∈ Algebra.adjoin R s :=\n\n/-- Suppose that `T ∈ L(V)` has `dim V` distinct eigenvalues and that `S ∈ L(V)` has the same eigenvectors as `T` (not necessarily with the same eigenvalues). Prove that `S T = T S`. -/\ntheorem", "choices": ["∀ {𝕜 : Type u_1} [inst : Field 𝕜] {V : Type u_2} [inst_1 : AddCommGroup V] [inst_2 : Module 𝕜 V]\n  [inst_3 : FiniteDimensional 𝕜 V] {T S : V →ₗ[𝕜] V},\n  (∀ (μ : 𝕜), Fintype.card { x // x ∈ Module.End.eigenspace T μ } = 1) →\n  (∀ (μ : 𝕜) (v : V), v ∈ Module.End.eigenspace S μ → v ∈ ⋃ (μ' : 𝕜), Module.End.eigenspace T μ') →\n    LinearMap.commute T S ", "∀ {𝕜 : Type u_1} [inst : Field 𝕜] {V : Type u_2} [inst_1 : AddCommGroup V] [inst_2 : Module 𝕜 V] [inst_3 : FiniteDimensional 𝕜 V]\n  {T S : V →ₗ[𝕜] V}, (∃ t, Module.End.HasDistinctEigenvalues 𝕜 T t) →\n    (∀ (μ : 𝕜) (v : V), Module.End.HasEigenvector T μ v ↔ Module.End.HasEigenvector S μ v) → T.comp S = S.comp T ", "∀ {𝕜 : Type u_1} {V : Type u_2} [inst : Field 𝕜] [inst_1 : AddCommGroup V] [inst_2 : Module 𝕜 V]\n  [inst_3 : FiniteDimensional 𝕜 V] (T S : V →ₗ[𝕜] V),\n  (∀ (μ : 𝕜), Module.End.eigenvalues T μ → Module.End.eigenvalues S μ) →\n    Module.End.hasDistinctEigenvalues T → S.comp T = T.comp S ", "∀ {𝕜 : Type u_1} [inst : IsROrC 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  {T S : E →ₗ[𝕜] E} [inst_3 : FiniteDimensional 𝕜 E],\n  (∀ (μ : 𝕜), Module.End.eigenvalue T μ → FiniteDimensional.finrank 𝕜 (Module.End.eigenspace T μ) = 1) →\n  (∀ (μ : 𝕜) (x : E), x ∈ Module.End.eigenspace T μ → x ∈ Module.End.eigenspace S μ) →\n  LinearMap.commute T S ", "∀ {𝕜 : Type u_1} [inst : Field 𝕜] {V : Type u_2} [inst_1 : AddCommGroup V] [inst_2 : Module 𝕜 V] [inst_3 : FiniteDimensional 𝕜 V]\n  {T S : Module.End 𝕜 V} (hT : LinearMap.IsDiagonalizable T) (h_eig : ∀ v, v ≠ 0 → T v = 0 → S v = 0) (h_dim : FiniteDimensional.finrank 𝕜 V = Module.End.eigenvalues T.card),\n  T.comp S = S.comp T ", "∀ {𝕜 : Type u_1} [inst : Field 𝕜] {V : Type u_2} [inst_1 : AddCommGroup V] [inst_2 : Module 𝕜 V] [inst_3 : FiniteDimensional 𝕜 V]\n  {T S : V →ₗ[𝕜] V}, LinearMap.IsDiagonalizable T →\n    (∀ x : V, x ≠ 0 → ∃ μ, S x = μ • x) →\n      (∃ μ₀, ∀ (x : V), x ≠ 0 → ∃ μ, S (T x) = μ₀ • S x) → T * S = S * T ", "∀ {𝕜 : Type u_1} [inst : Field 𝕜] {V : Type u_2} [inst_1 : AddCommGroup V] [inst_2 : Module 𝕜 V] [inst_3 : FiniteDimensional 𝕜 V]\n  (T S : V →ₗ[𝕜] V), LinearMap.HasDistinctEigenvalues T → LinearMap.HasCommonEigenvectors T S → S.comp T = T.comp S ", "∀ {𝕜 : Type u_1} [inst : IsROrC 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E] [inst_3 : FiniteDimensional 𝕜 E]\n  {T S : E →ₗ[𝕜] E} (hT : LinearMap.HasDistinctEigenvalues T) (hTS : ∀ μ : 𝕜, ∃ v, v ≠ 0 ∧ T v = μ • v ↔ S v = μ • v),\n  T * S = S * T ", "∀ {𝕜 : Type u_1} [inst : Field 𝕜] [dec_𝕜 : DecidableEq 𝕜] {V : Type u_2} [inst_1 : AddCommGroup V] [inst_2 : Module 𝕜 V]\n  [inst_3 : FiniteDimensional 𝕜 V] {T S : V →ₗ[𝕜] V},\n  LinearMap.IsDiagonalizable T → LinearMap.IsDiagonalizable S →\n  (∀ x : V, HasMem.Mem x (Module.End.eigenspace T) → HasMem.Mem x (Module.End.eigenspace S)) →\n  LinearMap.commute S T ", "∀ {𝕜 : Type u_1} [inst : Field 𝕜] {V : Type u_2} [inst_1 : AddCommGroup V] [inst_2 : Module 𝕜 V] [inst_3 : FiniteDimensional 𝕜 V]\n  {T S : V →ₗ[𝕜] V},\n  Fintype.card (Module.End.Eigenvalues T) = FiniteDimensional.finrank 𝕜 V →\n    (∀ (x : V) (μ : 𝕜), x ∈ Module.End.eigenspace S μ ↔ x ∈ Module.End.eigenspace T μ) → S.comp T = T.comp S "]}
{"docString": "Suppose `u, v ∈ V`. Prove that `⟨u, v⟩ = 0` if and only if `||u|| ≤ ||u + a v||` for all `a ∈ F`.", "prompts": "[{\"theorem\":\n  \"∀ {M : Type u_1} [inst : TopologicalSpace M] [inst_1 : AddMonoid M] [inst_2 : ContinuousAdd M] {U : Set M},\\n  U ∈ nhds 0 → ∃ V, IsOpen V ∧ 0 ∈ V ∧ V + V ⊆ U\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given an open neighborhood `U` of `0` there is an open neighborhood `V` of `0`\\nsuch that `V + V ⊆ U`.\"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : MeasurableSpace α] {s : MeasureTheory.SignedMeasure α} {u v w : Set α},\\n  MeasurableSet u →\\n    MeasurableSet v →\\n      MeasurableSet w →\\n        MeasureTheory.VectorMeasure.restrict s u ≤ MeasureTheory.VectorMeasure.restrict 0 u →\\n          ↑s w = 0 → w ⊆ u → v ⊆ w → ↑s v = 0\",\n  \"isProp\": true,\n  \"docString\":\n  \"A subset `v` of a null-set `w` has zero measure if `w` is a subset of a negative set `u`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : MeasurableSpace α] {s : MeasureTheory.SignedMeasure α} {u v w : Set α},\\n  MeasurableSet u →\\n    MeasurableSet v →\\n      MeasurableSet w →\\n        MeasureTheory.VectorMeasure.restrict 0 u ≤ MeasureTheory.VectorMeasure.restrict s u →\\n          ↑s w = 0 → w ⊆ u → v ⊆ w → ↑s v = 0\",\n  \"isProp\": true,\n  \"docString\":\n  \"A subset `v` of a null-set `w` has zero measure if `w` is a subset of a positive set `u`. \"},\n {\"theorem\":\n  \"∀ {K : Type u_1} {v : K} {n : ℕ} [inst : LinearOrderedField K] [inst_1 : FloorRing K],\\n  ¬GeneralizedContinuedFraction.TerminatedAt (GeneralizedContinuedFraction.of v) n →\\n    |v - GeneralizedContinuedFraction.convergents (GeneralizedContinuedFraction.of v) n| ≤\\n      1 /\\n        (GeneralizedContinuedFraction.denominators (GeneralizedContinuedFraction.of v) n *\\n          GeneralizedContinuedFraction.denominators (GeneralizedContinuedFraction.of v) (n + 1))\",\n  \"isProp\": true,\n  \"docString\": \"Shows that `|v - Aₙ / Bₙ| ≤ 1 / (Bₙ * Bₙ₊₁)`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} (self : UniformSpace.Core α), (Filter.lift' self.uniformity fun s => compRel s s) ≤ self.uniformity\",\n  \"isProp\": true,\n  \"docString\":\n  \"For every set `u ∈ uniformity`, there exists `v ∈ uniformity` such that `v ○ v ⊆ u`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [self : CanonicallyOrderedAddMonoid α] (a b : α), a ≤ a + b\",\n  \"isProp\": true,\n  \"docString\": \"For any `a` and `b`, `a ≤ a + b` \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\\n  {U V : Submodule 𝕜 E} [inst_3 : HasOrthogonalProjection U],\\n  ContinuousLinearMap.comp (orthogonalProjection U) (Submodule.subtypeL V) = 0 ↔ U ⟂ V\",\n  \"isProp\": true,\n  \"docString\":\n  \"The projection into `U` from `V` is the zero map if and only if `U` and `V` are orthogonal. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\\n  {U V : Submodule 𝕜 E} [inst_3 : HasOrthogonalProjection U] [inst_4 : HasOrthogonalProjection V],\\n  U ≤ V → ∀ (x : E), ↑(orthogonalProjection U) ↑(↑(orthogonalProjection V) x) = ↑(orthogonalProjection U) x\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `U ≤ V`, then projecting on `V` and then on `U` is the same as projecting on `U`. \"},\n {\"theorem\":\n  \"∀ {M₀ : Type u_1} [inst : Mul M₀] [inst_1 : Zero M₀] [self : NoZeroDivisors M₀] {a b : M₀}, a * b = 0 → a = 0 ∨ b = 0\",\n  \"isProp\": true,\n  \"docString\":\n  \"For all `a` and `b` of `G₀`, `a * b = 0` implies `a = 0` or `b = 0`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {𝕜 : Type u_2} [inst : NormedField 𝕜] {l : Filter α} {u v : α → 𝕜}, u =O[l] v → u / v * v =ᶠ[l] u\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `u = O(v)` along `l`, then `(u / v) * v = u` eventually at `l`. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] [inst_2 : MeasurableSpace E]\\n  [inst_3 : BorelSpace E] [inst_4 : FiniteDimensional ℝ E] (μ : MeasureTheory.Measure E)\\n  [inst_5 : MeasureTheory.Measure.IsAddHaarMeasure μ] {s : Set E} (u : ℕ → E),\\n  Metric.Bounded s →\\n    Metric.Bounded (Set.range u) → Pairwise (Disjoint on fun n => {u n} + s) → MeasurableSet s → ↑↑μ s = 0\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a set is disjoint of its translates by infinitely many bounded vectors, then it has measure\\nzero. This auxiliary lemma proves this assuming additionally that the set is bounded. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_2} {E : Type u_1} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\\n  (v : E), ↑(orthogonalProjection (Submodule.span 𝕜 {v})ᗮ) v = 0\",\n  \"isProp\": true,\n  \"docString\": \"The orthogonal projection onto `(𝕜 ∙ v)ᗮ` of `v` is zero. \"},\n {\"theorem\":\n  \"∀ {K : Type u_2} [inst : DivisionRing K] {Γ₀ : Type u_1} [inst_1 : LinearOrderedAddCommMonoidWithTop Γ₀]\\n  [inst_2 : Nontrivial Γ₀] (v : AddValuation K Γ₀) {x : K}, ↑v x = ⊤ ↔ x = 0\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `v` is an additive valuation on a division ring then `v(x) = ⊤` iff `x = 0`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {E : Type u_2} [inst : SeminormedAddGroup E] {f : α → E} {a : α → ℝ} {t₀ : Filter α},\\n  (∀ (n : α), ‖f n‖ ≤ a n) → Filter.Tendsto a t₀ (nhds 0) → Filter.Tendsto f t₀ (nhds 0)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Special case of the sandwich theorem: if the norm of `f` is bounded by a real\\nfunction `a` which tends to `0`, then `f` tends to `0`.\"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : Preorder α] {s : Set α},\\n  Set.OrdConnected s ↔ ∀ (x : α), x ∈ s → ∀ (y : α), y ∈ s → x ≤ y → Set.Icc x y ⊆ s\",\n  \"isProp\": true,\n  \"docString\": \"It suffices to prove `[[x, y]] ⊆ s` for `x y ∈ s`, `x ≤ y`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : MeasurableSpace α] {μ : MeasureTheory.Measure α} {s t : Set α},\\n  s ≤ᶠ[MeasureTheory.Measure.ae μ] t → ↑↑μ s ≤ ↑↑μ t\",\n  \"isProp\": true,\n  \"docString\": \"If `s ⊆ t` modulo a set of measure `0`, then `μ s ≤ μ t`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_2} {𝕜₂ : Type u_3} {E : Type u_4} {F : Type u_5} {𝓕 : Type u_1} [inst : SeminormedAddCommGroup E]\\n  [inst_1 : SeminormedAddCommGroup F] [inst_2 : NontriviallyNormedField 𝕜] [inst_3 : NontriviallyNormedField 𝕜₂]\\n  [inst_4 : NormedSpace 𝕜 E] [inst_5 : NormedSpace 𝕜₂ F] {σ₁₂ : 𝕜 →+* 𝕜₂} [inst_6 : SemilinearMapClass 𝓕 σ₁₂ E F]\\n  (f : 𝓕), Continuous ↑f → ∀ {x : E}, ‖x‖ = 0 → ‖↑f x‖ = 0\",\n  \"isProp\": true,\n  \"docString\": \"If `‖x‖ = 0` and `f` is continuous then `‖f x‖ = 0`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_2} {E : Type u_1} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\\n  {u v : E}, v ∈ (Submodule.span 𝕜 {u})ᗮ ↔ inner v u = 0\",\n  \"isProp\": true,\n  \"docString\": \"A vector in `(𝕜 ∙ u)ᗮ` is orthogonal to `u`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {𝕜 : Type u_2} [inst : NormedField 𝕜] {l : Filter α} {u v : α → 𝕜}, u =o[l] v → u / v * v =ᶠ[l] u\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `u = o(v)` along `l`, then `(u / v) * v = u` eventually at `l`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {𝕜₂ : Type u_2} {E : Type u_3} {F : Type u_4} [inst : SeminormedAddCommGroup E]\\n  [inst_1 : SeminormedAddCommGroup F] [inst_2 : NontriviallyNormedField 𝕜] [inst_3 : NontriviallyNormedField 𝕜₂]\\n  [inst_4 : NormedSpace 𝕜 E] [inst_5 : NormedSpace 𝕜₂ F] {σ₁₂ : 𝕜 →+* 𝕜₂} [inst_6 : RingHomIsometric σ₁₂]\\n  (f : E →SL[σ₁₂] F) (M : NNReal), (∀ (x : E), ‖x‖₊ ≠ 0 → ‖↑f x‖₊ ≤ M * ‖x‖₊) → ‖f‖₊ ≤ M\",\n  \"isProp\": true,\n  \"docString\":\n  \"If one controls the norm of every `A x`, `‖x‖₊ ≠ 0`, then one controls the norm of `A`. \"}]\n", "prompt_cons": "/-- Given an open neighborhood `U` of `0` there is an open neighborhood `V` of `0`\nsuch that `V + V ⊆ U`. -/\ntheorem ∀ {M : Type u_1} [inst : TopologicalSpace M] [inst_1 : AddMonoid M] [inst_2 : ContinuousAdd M] {U : Set M},\n  U ∈ nhds 0 → ∃ V, IsOpen V ∧ 0 ∈ V ∧ V + V ⊆ U :=\n\n/-- A subset `v` of a null-set `w` has zero measure if `w` is a subset of a negative set `u`. -/\ntheorem ∀ {α : Type u_1} [inst : MeasurableSpace α] {s : MeasureTheory.SignedMeasure α} {u v w : Set α},\n  MeasurableSet u →\n    MeasurableSet v →\n      MeasurableSet w →\n        MeasureTheory.VectorMeasure.restrict s u ≤ MeasureTheory.VectorMeasure.restrict 0 u →\n          ↑s w = 0 → w ⊆ u → v ⊆ w → ↑s v = 0 :=\n\n/-- A subset `v` of a null-set `w` has zero measure if `w` is a subset of a positive set `u`. -/\ntheorem ∀ {α : Type u_1} [inst : MeasurableSpace α] {s : MeasureTheory.SignedMeasure α} {u v w : Set α},\n  MeasurableSet u →\n    MeasurableSet v →\n      MeasurableSet w →\n        MeasureTheory.VectorMeasure.restrict 0 u ≤ MeasureTheory.VectorMeasure.restrict s u →\n          ↑s w = 0 → w ⊆ u → v ⊆ w → ↑s v = 0 :=\n\n/-- Shows that `|v - Aₙ / Bₙ| ≤ 1 / (Bₙ * Bₙ₊₁)`. -/\ntheorem ∀ {K : Type u_1} {v : K} {n : ℕ} [inst : LinearOrderedField K] [inst_1 : FloorRing K],\n  ¬GeneralizedContinuedFraction.TerminatedAt (GeneralizedContinuedFraction.of v) n →\n    |v - GeneralizedContinuedFraction.convergents (GeneralizedContinuedFraction.of v) n| ≤\n      1 /\n        (GeneralizedContinuedFraction.denominators (GeneralizedContinuedFraction.of v) n *\n          GeneralizedContinuedFraction.denominators (GeneralizedContinuedFraction.of v) (n + 1)) :=\n\n/-- For every set `u ∈ uniformity`, there exists `v ∈ uniformity` such that `v ○ v ⊆ u`. -/\ntheorem ∀ {α : Type u} (self : UniformSpace.Core α), (Filter.lift' self.uniformity fun s => compRel s s) ≤ self.uniformity :=\n\n/-- For any `a` and `b`, `a ≤ a + b` -/\ntheorem ∀ {α : Type u_1} [self : CanonicallyOrderedAddMonoid α] (a b : α), a ≤ a + b :=\n\n/-- The projection into `U` from `V` is the zero map if and only if `U` and `V` are orthogonal. -/\ntheorem ∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  {U V : Submodule 𝕜 E} [inst_3 : HasOrthogonalProjection U],\n  ContinuousLinearMap.comp (orthogonalProjection U) (Submodule.subtypeL V) = 0 ↔ U ⟂ V :=\n\n/-- If `U ≤ V`, then projecting on `V` and then on `U` is the same as projecting on `U`. -/\ntheorem ∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  {U V : Submodule 𝕜 E} [inst_3 : HasOrthogonalProjection U] [inst_4 : HasOrthogonalProjection V],\n  U ≤ V → ∀ (x : E), ↑(orthogonalProjection U) ↑(↑(orthogonalProjection V) x) = ↑(orthogonalProjection U) x :=\n\n/-- For all `a` and `b` of `G₀`, `a * b = 0` implies `a = 0` or `b = 0`. -/\ntheorem ∀ {M₀ : Type u_1} [inst : Mul M₀] [inst_1 : Zero M₀] [self : NoZeroDivisors M₀] {a b : M₀}, a * b = 0 → a = 0 ∨ b = 0 :=\n\n/-- If `u = O(v)` along `l`, then `(u / v) * v = u` eventually at `l`. -/\ntheorem ∀ {α : Type u_1} {𝕜 : Type u_2} [inst : NormedField 𝕜] {l : Filter α} {u v : α → 𝕜}, u =O[l] v → u / v * v =ᶠ[l] u :=\n\n/-- If a set is disjoint of its translates by infinitely many bounded vectors, then it has measure\nzero. This auxiliary lemma proves this assuming additionally that the set is bounded. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] [inst_2 : MeasurableSpace E]\n  [inst_3 : BorelSpace E] [inst_4 : FiniteDimensional ℝ E] (μ : MeasureTheory.Measure E)\n  [inst_5 : MeasureTheory.Measure.IsAddHaarMeasure μ] {s : Set E} (u : ℕ → E),\n  Metric.Bounded s →\n    Metric.Bounded (Set.range u) → Pairwise (Disjoint on fun n => {u n} + s) → MeasurableSet s → ↑↑μ s = 0 :=\n\n/-- The orthogonal projection onto `(𝕜 ∙ v)ᗮ` of `v` is zero. -/\ntheorem ∀ {𝕜 : Type u_2} {E : Type u_1} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  (v : E), ↑(orthogonalProjection (Submodule.span 𝕜 {v})ᗮ) v = 0 :=\n\n/-- If `v` is an additive valuation on a division ring then `v(x) = ⊤` iff `x = 0`. -/\ntheorem ∀ {K : Type u_2} [inst : DivisionRing K] {Γ₀ : Type u_1} [inst_1 : LinearOrderedAddCommMonoidWithTop Γ₀]\n  [inst_2 : Nontrivial Γ₀] (v : AddValuation K Γ₀) {x : K}, ↑v x = ⊤ ↔ x = 0 :=\n\n/-- Special case of the sandwich theorem: if the norm of `f` is bounded by a real\nfunction `a` which tends to `0`, then `f` tends to `0`. -/\ntheorem ∀ {α : Type u_1} {E : Type u_2} [inst : SeminormedAddGroup E] {f : α → E} {a : α → ℝ} {t₀ : Filter α},\n  (∀ (n : α), ‖f n‖ ≤ a n) → Filter.Tendsto a t₀ (nhds 0) → Filter.Tendsto f t₀ (nhds 0) :=\n\n/-- It suffices to prove `[[x, y]] ⊆ s` for `x y ∈ s`, `x ≤ y`. -/\ntheorem ∀ {α : Type u_1} [inst : Preorder α] {s : Set α},\n  Set.OrdConnected s ↔ ∀ (x : α), x ∈ s → ∀ (y : α), y ∈ s → x ≤ y → Set.Icc x y ⊆ s :=\n\n/-- If `s ⊆ t` modulo a set of measure `0`, then `μ s ≤ μ t`. -/\ntheorem ∀ {α : Type u_1} [inst : MeasurableSpace α] {μ : MeasureTheory.Measure α} {s t : Set α},\n  s ≤ᶠ[MeasureTheory.Measure.ae μ] t → ↑↑μ s ≤ ↑↑μ t :=\n\n/-- If `‖x‖ = 0` and `f` is continuous then `‖f x‖ = 0`. -/\ntheorem ∀ {𝕜 : Type u_2} {𝕜₂ : Type u_3} {E : Type u_4} {F : Type u_5} {𝓕 : Type u_1} [inst : SeminormedAddCommGroup E]\n  [inst_1 : SeminormedAddCommGroup F] [inst_2 : NontriviallyNormedField 𝕜] [inst_3 : NontriviallyNormedField 𝕜₂]\n  [inst_4 : NormedSpace 𝕜 E] [inst_5 : NormedSpace 𝕜₂ F] {σ₁₂ : 𝕜 →+* 𝕜₂} [inst_6 : SemilinearMapClass 𝓕 σ₁₂ E F]\n  (f : 𝓕), Continuous ↑f → ∀ {x : E}, ‖x‖ = 0 → ‖↑f x‖ = 0 :=\n\n/-- A vector in `(𝕜 ∙ u)ᗮ` is orthogonal to `u`. -/\ntheorem ∀ {𝕜 : Type u_2} {E : Type u_1} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  {u v : E}, v ∈ (Submodule.span 𝕜 {u})ᗮ ↔ inner v u = 0 :=\n\n/-- If `u = o(v)` along `l`, then `(u / v) * v = u` eventually at `l`. -/\ntheorem ∀ {α : Type u_1} {𝕜 : Type u_2} [inst : NormedField 𝕜] {l : Filter α} {u v : α → 𝕜}, u =o[l] v → u / v * v =ᶠ[l] u :=\n\n/-- If one controls the norm of every `A x`, `‖x‖₊ ≠ 0`, then one controls the norm of `A`. -/\ntheorem ∀ {𝕜 : Type u_1} {𝕜₂ : Type u_2} {E : Type u_3} {F : Type u_4} [inst : SeminormedAddCommGroup E]\n  [inst_1 : SeminormedAddCommGroup F] [inst_2 : NontriviallyNormedField 𝕜] [inst_3 : NontriviallyNormedField 𝕜₂]\n  [inst_4 : NormedSpace 𝕜 E] [inst_5 : NormedSpace 𝕜₂ F] {σ₁₂ : 𝕜 →+* 𝕜₂} [inst_6 : RingHomIsometric σ₁₂]\n  (f : E →SL[σ₁₂] F) (M : NNReal), (∀ (x : E), ‖x‖₊ ≠ 0 → ‖↑f x‖₊ ≤ M * ‖x‖₊) → ‖f‖₊ ≤ M :=\n\n/-- Suppose `u, v ∈ V`. Prove that `⟨u, v⟩ = 0` if and only if `||u|| ≤ ||u + a v||` for all `a ∈ F`. -/\ntheorem", "choices": ["∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  (u v : E), inner u v = 0 ↔ ∀ a : 𝕜, ∥u∥ ≤ ∥u + a • v∥ ", "∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  (u v : E), inner u v = 0 ↔ ∀ (a : 𝕜), ∥u∥ ≤ ∥u + a * v∥ ", "∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  (u v : E), inner u v = 0 ↔ ∀ (a : 𝕜), ∥u∥ ≤ ∥u + a • v∥ ", "∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  (u v : E), inner u v = 0 ↔ ∀ (a : 𝕜), ∥u∥ ≤ ∥u + a • v∥ ", "∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : InnerProductSpace 𝕜 E] {u v : E}, inner u v = 0 ↔ ∀ (a : 𝕜), ∥u∥ ≤ ∥u + a • v∥ ", "∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  (u v : E), inner u v = 0 ↔ ∀ (a : 𝕜), ∥u∥ ≤ ∥u + a • v∥ ", "∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : InnerProductSpace 𝕜 E] {u v : E},\n  inner u v = 0 ↔ ∀ (a : 𝕜), ∥u∥ ≤ ∥u + a • v∥ ", "∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  {u v : E}, inner u v = 0 ↔ ∀ (a : 𝕜), ∥u∥ ≤ ∥u + a • v∥ ", "∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  (u v : E), inner u v = 0 ↔ ∀ (a : 𝕜), ∥u∥ ≤ ∥u + a • v∥ ", "∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  {u v : E},\n  inner u v = 0 ↔ ∀ (a : 𝕜), ∥u∥ ≤ ∥u + a • v∥ "]}
{"docString": "Prove that if `V` is a complex inner-product space, then `⟨u, v⟩ = (||u + v||^2 - ||u - v||^2 + ||u + i v||^2 i - ||u - i v||^2 i) / 4` for all `u, v ∈ V`.", "prompts": "[{\"theorem\":\n  \"∀ {G : Type u_1} [inst : NormedAddCommGroup G] [inst_1 : InnerProductSpace ℝ G] (f : G ≃ₗᵢ[ℝ] ℂ) (x y : G),\\n  inner x y = (↑(starRingEnd ℂ) (↑f x) * ↑f y).re\",\n  \"isProp\": true,\n  \"docString\":\n  \"The inner product on an inner product space of dimension 2 can be evaluated in terms\\nof a complex-number representation of the space. \"},\n {\"theorem\":\n  \"∀ {V : Type u_1} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℂ V] (T : V →ₗ[ℂ] V),\\n  LinearMap.IsSymmetric T ↔ ∀ (v : V), ↑(starRingEnd ℂ) (inner (↑T v) v) = inner (↑T v) v\",\n  \"isProp\": true,\n  \"docString\":\n  \"A linear operator on a complex inner product space is symmetric precisely when\\n`⟪T v, v⟫_ℂ` is real for all v.\"},\n {\"theorem\":\n  \"∀ {E : Type u_2} {V : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] (f : V → E)\\n  [inst_2 : NormedAddCommGroup V] [inst_3 : MeasurableSpace V] [inst_4 : BorelSpace V] [inst_5 : InnerProductSpace ℝ V]\\n  [inst_6 : FiniteDimensional ℝ V],\\n  Filter.Tendsto (fun w => ∫ (v : V), ↑(↑Real.fourierChar (↑Multiplicative.ofAdd (-inner v w))) • f v)\\n    (Filter.cocompact V) (nhds 0)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Riemann-Lebesgue lemma for functions on a real inner-product space: the integral\\n`∫ v, exp (-2 * π * ⟪w, v⟫ * I) • f v` tends to 0 as `w → ∞`. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : InnerProductSpace ℝ E]\\n  [inst_2 : Fact (FiniteDimensional.finrank ℝ E = 2)] (o : Orientation ℝ E (Fin 2)) (f : E ≃ₗᵢ[ℝ] ℂ),\\n  ↑(Orientation.map (Fin 2) f.toLinearEquiv) o = Complex.orientation →\\n    ∀ (x y : E), ↑(↑(Orientation.areaForm o) x) y = (↑(starRingEnd ℂ) (↑f x) * ↑f y).im\",\n  \"isProp\": true,\n  \"docString\":\n  \"The area form on an oriented real inner product space of dimension 2 can be evaluated in terms\\nof a complex-number representation of the space. \"},\n {\"theorem\":\n  \"∀ {F : Type u_1} [inst : NormedAddCommGroup F] [inst_1 : InnerProductSpace ℝ F] (x y : F),\\n  inner x y * inner x y ≤ inner x x * inner y y\",\n  \"isProp\": true,\n  \"docString\": \"Cauchy–Schwarz inequality for real inner products. \"},\n {\"theorem\":\n  \"∀ {V : Type u_1} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V]\\n  [inst_2 : Fact (FiniteDimensional.finrank ℝ V = 2)] (o : Orientation ℝ V (Fin 2)) (θ : Real.Angle) (f : V ≃ₗᵢ[ℝ] ℂ),\\n  ↑(Orientation.map (Fin 2) f.toLinearEquiv) o = Complex.orientation →\\n    ∀ (x : V), ↑f (↑(Orientation.rotation o θ) x) = ↑(Real.Angle.expMapCircle θ) * ↑f x\",\n  \"isProp\": true,\n  \"docString\":\n  \"Rotation in an oriented real inner product space of dimension 2 can be evaluated in terms of a\\ncomplex-number representation of the space. \"},\n {\"theorem\":\n  \"∀ {V : Type u_1} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V]\\n  [inst_2 : Fact (FiniteDimensional.finrank ℝ V = 2)] (o : Orientation ℝ V (Fin 2)) (f : V ≃ₗᵢ[ℝ] ℂ),\\n  ↑(Orientation.map (Fin 2) f.toLinearEquiv) o = Complex.orientation →\\n    ∀ (x y : V), Orientation.oangle o x y = ↑(Complex.arg (↑(starRingEnd ℂ) (↑f x) * ↑f y))\",\n  \"isProp\": true,\n  \"docString\":\n  \"The oriented angle on an oriented real inner product space of dimension 2 can be evaluated in\\nterms of a complex-number representation of the space. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : InnerProductSpace ℝ E]\\n  [inst_2 : Fact (FiniteDimensional.finrank ℝ E = 2)] (o : Orientation ℝ E (Fin 2)) (f : E ≃ₗᵢ[ℝ] ℂ),\\n  ↑(Orientation.map (Fin 2) f.toLinearEquiv) o = Complex.orientation →\\n    ∀ (x : E), ↑f (↑(Orientation.rightAngleRotation o) x) = Complex.I * ↑f x\",\n  \"isProp\": true,\n  \"docString\":\n  \"The rotation by 90 degrees on an oriented real inner product space of dimension 2 can be\\nevaluated in terms of a complex-number representation of the space. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\\n  (x y : E), inner x y = 0 → ‖x + y‖ * ‖x + y‖ = ‖x‖ * ‖x‖ + ‖y‖ * ‖y‖\",\n  \"isProp\": true,\n  \"docString\": \"Pythagorean theorem, vector inner product form. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : InnerProductSpace ℝ E] {n : ℕ}\\n  [_i : Fact (FiniteDimensional.finrank ℝ E = n)] (o : Orientation ℝ E (Fin n)) {v : Fin n → E},\\n  (Pairwise fun i j => inner (v i) (v j) = 0) → |↑(Orientation.volumeForm o) v| = Finset.prod Finset.univ fun i => ‖v i‖\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `v` be an indexed family of `n` orthogonal vectors in an oriented `n`-dimensional\\nreal inner product space `E`. The output of the volume form of `E` when evaluated on `v` is, up to\\nsign, the product of the norms of the vectors `v i`. \"},\n {\"theorem\":\n  \"∀ {F : Type u_1} [inst : NormedAddCommGroup F] [inst_1 : InnerProductSpace ℝ F] (x y : F), |inner x y / (‖x‖ * ‖y‖)| ≤ 1\",\n  \"isProp\": true,\n  \"docString\":\n  \"The real inner product of two vectors, divided by the product of their\\nnorms, has absolute value at most 1. \"},\n {\"theorem\":\n  \"∀ {F : Type u_1} [inst : NormedAddCommGroup F] [inst_1 : InnerProductSpace ℝ F] (x y : F),\\n  |inner x y / (‖x‖ * ‖y‖)| = 1 ↔ x ≠ 0 ∧ ∃ r, r ≠ 0 ∧ y = r • x\",\n  \"isProp\": true,\n  \"docString\":\n  \"The inner product of two vectors, divided by the product of their\\nnorms, has absolute value 1 if and only if they are nonzero and one is\\na multiple of the other. One form of equality case for Cauchy-Schwarz. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : InnerProductSpace ℝ E]\\n  [inst_2 : Fact (FiniteDimensional.finrank ℝ E = 2)] (o : Orientation ℝ E (Fin 2)) (f : E ≃ₗᵢ[ℝ] ℂ),\\n  ↑(Orientation.map (Fin 2) f.toLinearEquiv) o = Complex.orientation →\\n    ∀ (x y : E), ↑(↑(Orientation.kahler o) x) y = ↑(starRingEnd ℂ) (↑f x) * ↑f y\",\n  \"isProp\": true,\n  \"docString\":\n  \"The Kahler form on an oriented real inner product space of dimension 2 can be evaluated in terms\\nof a complex-number representation of the space. \"},\n {\"theorem\":\n  \"∀ {E : Type u_2} {V : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] (f : V → E)\\n  [inst_2 : AddCommGroup V] [inst_3 : TopologicalSpace V] [inst_4 : TopologicalAddGroup V] [inst_5 : T2Space V]\\n  [inst_6 : MeasurableSpace V] [inst_7 : BorelSpace V] [inst_8 : Module ℝ V] [inst_9 : ContinuousSMul ℝ V]\\n  [inst_10 : FiniteDimensional ℝ V] (μ : MeasureTheory.Measure V) [inst_11 : MeasureTheory.Measure.IsAddHaarMeasure μ],\\n  Filter.Tendsto (VectorFourier.fourierIntegral Real.fourierChar μ (LinearMap.flip (topDualPairing ℝ V)) f)\\n    (Filter.cocompact (V →L[ℝ] ℝ)) (nhds 0)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The Riemann-Lebesgue lemma, formulated in terms of `VectorFourier.fourierIntegral` (with the\\npairing in the definition of `fourier_integral` taken to be the canonical pairing between `V` and\\nits dual space). \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : InnerProductSpace ℝ E] {n : ℕ}\\n  [_i : Fact (FiniteDimensional.finrank ℝ E = n)] (o : Orientation ℝ E (Fin n)) (v : Fin n → E),\\n  |↑(Orientation.volumeForm o) v| ≤ Finset.prod Finset.univ fun i => ‖v i‖\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `v` be an indexed family of `n` vectors in an oriented `n`-dimensional real inner\\nproduct space `E`. The output of the volume form of `E` when evaluated on `v` is bounded in absolute\\nvalue by the product of the norms of the vectors `v i`. \"},\n {\"theorem\":\n  \"∀ {F : Type u_1} [inst : NormedAddCommGroup F] [inst_1 : InnerProductSpace ℝ F] {K : Set F},\\n  Set.Nonempty K → IsComplete K → Convex ℝ K → ∀ (u : F), ∃ v, v ∈ K ∧ ‖u - v‖ = ⨅ (w : ↑K), ‖u - ↑w‖\",\n  \"isProp\": true,\n  \"docString\":\n  \"Existence of minimizers\\nLet `u` be a point in a real inner product space, and let `K` be a nonempty complete convex subset.\\nThen there exists a (unique) `v` in `K` that minimizes the distance `‖u - v‖` to `u`.\\n \"},\n {\"theorem\":\n  \"∀ {E : Type u_2} {V : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] (f : V → E)\\n  [inst_2 : AddCommGroup V] [inst_3 : TopologicalSpace V] [inst_4 : TopologicalAddGroup V] [inst_5 : T2Space V]\\n  [inst_6 : MeasurableSpace V] [inst_7 : BorelSpace V] [inst_8 : Module ℝ V] [inst_9 : ContinuousSMul ℝ V]\\n  [inst_10 : FiniteDimensional ℝ V] (μ : MeasureTheory.Measure V) [inst_11 : MeasureTheory.Measure.IsAddHaarMeasure μ],\\n  Filter.Tendsto (fun w => ∫ (v : V), ↑(↑Real.fourierChar (↑Multiplicative.ofAdd (-↑w v))) • f v ∂μ)\\n    (Filter.cocompact (V →L[ℝ] ℝ)) (nhds 0)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Riemann-Lebesgue lemma for functions on a finite-dimensional real vector space, formulated via\\ndual space. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_2} {E : Type u_1} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\\n  (K : Submodule 𝕜 E), IsComplete ↑K → ∀ (u : E), ∃ v, v ∈ K ∧ ‖u - v‖ = ⨅ (w : ↑↑K), ‖u - ↑w‖\",\n  \"isProp\": true,\n  \"docString\":\n  \"Existence of projections on complete subspaces.\\nLet `u` be a point in an inner product space, and let `K` be a nonempty complete subspace.\\nThen there exists a (unique) `v` in `K` that minimizes the distance `‖u - v‖` to `u`.\\nThis point `v` is usually called the orthogonal projection of `u` onto `K`.\\n\"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\\n  [inst_3 : CompleteSpace E] {A : E →L[𝕜] E}, IsSelfAdjoint A → LinearMap.IsSymmetric ↑A\",\n  \"isProp\": true,\n  \"docString\":\n  \"Every self-adjoint operator on an inner product space is symmetric. \"},\n {\"theorem\":\n  \"∀ {K : Type u_1} {v : K} {n : ℕ} [inst : LinearOrderedField K] [inst_1 : FloorRing K],\\n  ¬GeneralizedContinuedFraction.TerminatedAt (GeneralizedContinuedFraction.of v) n →\\n    |v - GeneralizedContinuedFraction.convergents (GeneralizedContinuedFraction.of v) n| ≤\\n      1 /\\n        (GeneralizedContinuedFraction.denominators (GeneralizedContinuedFraction.of v) n *\\n          GeneralizedContinuedFraction.denominators (GeneralizedContinuedFraction.of v) (n + 1))\",\n  \"isProp\": true,\n  \"docString\": \"Shows that `|v - Aₙ / Bₙ| ≤ 1 / (Bₙ * Bₙ₊₁)`. \"}]\n", "prompt_cons": "/-- The inner product on an inner product space of dimension 2 can be evaluated in terms\nof a complex-number representation of the space. -/\ntheorem ∀ {G : Type u_1} [inst : NormedAddCommGroup G] [inst_1 : InnerProductSpace ℝ G] (f : G ≃ₗᵢ[ℝ] ℂ) (x y : G),\n  inner x y = (↑(starRingEnd ℂ) (↑f x) * ↑f y).re :=\n\n/-- A linear operator on a complex inner product space is symmetric precisely when\n`⟪T v, v⟫_ℂ` is real for all v. -/\ntheorem ∀ {V : Type u_1} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℂ V] (T : V →ₗ[ℂ] V),\n  LinearMap.IsSymmetric T ↔ ∀ (v : V), ↑(starRingEnd ℂ) (inner (↑T v) v) = inner (↑T v) v :=\n\n/-- Riemann-Lebesgue lemma for functions on a real inner-product space: the integral\n`∫ v, exp (-2 * π * ⟪w, v⟫ * I) • f v` tends to 0 as `w → ∞`. -/\ntheorem ∀ {E : Type u_2} {V : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] (f : V → E)\n  [inst_2 : NormedAddCommGroup V] [inst_3 : MeasurableSpace V] [inst_4 : BorelSpace V] [inst_5 : InnerProductSpace ℝ V]\n  [inst_6 : FiniteDimensional ℝ V],\n  Filter.Tendsto (fun w => ∫ (v : V), ↑(↑Real.fourierChar (↑Multiplicative.ofAdd (-inner v w))) • f v)\n    (Filter.cocompact V) (nhds 0) :=\n\n/-- The area form on an oriented real inner product space of dimension 2 can be evaluated in terms\nof a complex-number representation of the space. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : InnerProductSpace ℝ E]\n  [inst_2 : Fact (FiniteDimensional.finrank ℝ E = 2)] (o : Orientation ℝ E (Fin 2)) (f : E ≃ₗᵢ[ℝ] ℂ),\n  ↑(Orientation.map (Fin 2) f.toLinearEquiv) o = Complex.orientation →\n    ∀ (x y : E), ↑(↑(Orientation.areaForm o) x) y = (↑(starRingEnd ℂ) (↑f x) * ↑f y).im :=\n\n/-- Cauchy–Schwarz inequality for real inner products. -/\ntheorem ∀ {F : Type u_1} [inst : NormedAddCommGroup F] [inst_1 : InnerProductSpace ℝ F] (x y : F),\n  inner x y * inner x y ≤ inner x x * inner y y :=\n\n/-- Rotation in an oriented real inner product space of dimension 2 can be evaluated in terms of a\ncomplex-number representation of the space. -/\ntheorem ∀ {V : Type u_1} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V]\n  [inst_2 : Fact (FiniteDimensional.finrank ℝ V = 2)] (o : Orientation ℝ V (Fin 2)) (θ : Real.Angle) (f : V ≃ₗᵢ[ℝ] ℂ),\n  ↑(Orientation.map (Fin 2) f.toLinearEquiv) o = Complex.orientation →\n    ∀ (x : V), ↑f (↑(Orientation.rotation o θ) x) = ↑(Real.Angle.expMapCircle θ) * ↑f x :=\n\n/-- The oriented angle on an oriented real inner product space of dimension 2 can be evaluated in\nterms of a complex-number representation of the space. -/\ntheorem ∀ {V : Type u_1} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V]\n  [inst_2 : Fact (FiniteDimensional.finrank ℝ V = 2)] (o : Orientation ℝ V (Fin 2)) (f : V ≃ₗᵢ[ℝ] ℂ),\n  ↑(Orientation.map (Fin 2) f.toLinearEquiv) o = Complex.orientation →\n    ∀ (x y : V), Orientation.oangle o x y = ↑(Complex.arg (↑(starRingEnd ℂ) (↑f x) * ↑f y)) :=\n\n/-- The rotation by 90 degrees on an oriented real inner product space of dimension 2 can be\nevaluated in terms of a complex-number representation of the space. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : InnerProductSpace ℝ E]\n  [inst_2 : Fact (FiniteDimensional.finrank ℝ E = 2)] (o : Orientation ℝ E (Fin 2)) (f : E ≃ₗᵢ[ℝ] ℂ),\n  ↑(Orientation.map (Fin 2) f.toLinearEquiv) o = Complex.orientation →\n    ∀ (x : E), ↑f (↑(Orientation.rightAngleRotation o) x) = Complex.I * ↑f x :=\n\n/-- Pythagorean theorem, vector inner product form. -/\ntheorem ∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  (x y : E), inner x y = 0 → ‖x + y‖ * ‖x + y‖ = ‖x‖ * ‖x‖ + ‖y‖ * ‖y‖ :=\n\n/-- Let `v` be an indexed family of `n` orthogonal vectors in an oriented `n`-dimensional\nreal inner product space `E`. The output of the volume form of `E` when evaluated on `v` is, up to\nsign, the product of the norms of the vectors `v i`. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : InnerProductSpace ℝ E] {n : ℕ}\n  [_i : Fact (FiniteDimensional.finrank ℝ E = n)] (o : Orientation ℝ E (Fin n)) {v : Fin n → E},\n  (Pairwise fun i j => inner (v i) (v j) = 0) → |↑(Orientation.volumeForm o) v| = Finset.prod Finset.univ fun i => ‖v i‖ :=\n\n/-- The real inner product of two vectors, divided by the product of their\nnorms, has absolute value at most 1. -/\ntheorem ∀ {F : Type u_1} [inst : NormedAddCommGroup F] [inst_1 : InnerProductSpace ℝ F] (x y : F), |inner x y / (‖x‖ * ‖y‖)| ≤ 1 :=\n\n/-- The inner product of two vectors, divided by the product of their\nnorms, has absolute value 1 if and only if they are nonzero and one is\na multiple of the other. One form of equality case for Cauchy-Schwarz. -/\ntheorem ∀ {F : Type u_1} [inst : NormedAddCommGroup F] [inst_1 : InnerProductSpace ℝ F] (x y : F),\n  |inner x y / (‖x‖ * ‖y‖)| = 1 ↔ x ≠ 0 ∧ ∃ r, r ≠ 0 ∧ y = r • x :=\n\n/-- The Kahler form on an oriented real inner product space of dimension 2 can be evaluated in terms\nof a complex-number representation of the space. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : InnerProductSpace ℝ E]\n  [inst_2 : Fact (FiniteDimensional.finrank ℝ E = 2)] (o : Orientation ℝ E (Fin 2)) (f : E ≃ₗᵢ[ℝ] ℂ),\n  ↑(Orientation.map (Fin 2) f.toLinearEquiv) o = Complex.orientation →\n    ∀ (x y : E), ↑(↑(Orientation.kahler o) x) y = ↑(starRingEnd ℂ) (↑f x) * ↑f y :=\n\n/-- The Riemann-Lebesgue lemma, formulated in terms of `VectorFourier.fourierIntegral` (with the\npairing in the definition of `fourier_integral` taken to be the canonical pairing between `V` and\nits dual space). -/\ntheorem ∀ {E : Type u_2} {V : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] (f : V → E)\n  [inst_2 : AddCommGroup V] [inst_3 : TopologicalSpace V] [inst_4 : TopologicalAddGroup V] [inst_5 : T2Space V]\n  [inst_6 : MeasurableSpace V] [inst_7 : BorelSpace V] [inst_8 : Module ℝ V] [inst_9 : ContinuousSMul ℝ V]\n  [inst_10 : FiniteDimensional ℝ V] (μ : MeasureTheory.Measure V) [inst_11 : MeasureTheory.Measure.IsAddHaarMeasure μ],\n  Filter.Tendsto (VectorFourier.fourierIntegral Real.fourierChar μ (LinearMap.flip (topDualPairing ℝ V)) f)\n    (Filter.cocompact (V →L[ℝ] ℝ)) (nhds 0) :=\n\n/-- Let `v` be an indexed family of `n` vectors in an oriented `n`-dimensional real inner\nproduct space `E`. The output of the volume form of `E` when evaluated on `v` is bounded in absolute\nvalue by the product of the norms of the vectors `v i`. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : InnerProductSpace ℝ E] {n : ℕ}\n  [_i : Fact (FiniteDimensional.finrank ℝ E = n)] (o : Orientation ℝ E (Fin n)) (v : Fin n → E),\n  |↑(Orientation.volumeForm o) v| ≤ Finset.prod Finset.univ fun i => ‖v i‖ :=\n\n/-- Existence of minimizers\nLet `u` be a point in a real inner product space, and let `K` be a nonempty complete convex subset.\nThen there exists a (unique) `v` in `K` that minimizes the distance `‖u - v‖` to `u`. -/\ntheorem ∀ {F : Type u_1} [inst : NormedAddCommGroup F] [inst_1 : InnerProductSpace ℝ F] {K : Set F},\n  Set.Nonempty K → IsComplete K → Convex ℝ K → ∀ (u : F), ∃ v, v ∈ K ∧ ‖u - v‖ = ⨅ (w : ↑K), ‖u - ↑w‖ :=\n\n/-- Riemann-Lebesgue lemma for functions on a finite-dimensional real vector space, formulated via\ndual space. -/\ntheorem ∀ {E : Type u_2} {V : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] (f : V → E)\n  [inst_2 : AddCommGroup V] [inst_3 : TopologicalSpace V] [inst_4 : TopologicalAddGroup V] [inst_5 : T2Space V]\n  [inst_6 : MeasurableSpace V] [inst_7 : BorelSpace V] [inst_8 : Module ℝ V] [inst_9 : ContinuousSMul ℝ V]\n  [inst_10 : FiniteDimensional ℝ V] (μ : MeasureTheory.Measure V) [inst_11 : MeasureTheory.Measure.IsAddHaarMeasure μ],\n  Filter.Tendsto (fun w => ∫ (v : V), ↑(↑Real.fourierChar (↑Multiplicative.ofAdd (-↑w v))) • f v ∂μ)\n    (Filter.cocompact (V →L[ℝ] ℝ)) (nhds 0) :=\n\n/-- Existence of projections on complete subspaces.\nLet `u` be a point in an inner product space, and let `K` be a nonempty complete subspace.\nThen there exists a (unique) `v` in `K` that minimizes the distance `‖u - v‖` to `u`.\nThis point `v` is usually called the orthogonal projection of `u` onto `K`. -/\ntheorem ∀ {𝕜 : Type u_2} {E : Type u_1} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  (K : Submodule 𝕜 E), IsComplete ↑K → ∀ (u : E), ∃ v, v ∈ K ∧ ‖u - v‖ = ⨅ (w : ↑↑K), ‖u - ↑w‖ :=\n\n/-- Every self-adjoint operator on an inner product space is symmetric. -/\ntheorem ∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  [inst_3 : CompleteSpace E] {A : E →L[𝕜] E}, IsSelfAdjoint A → LinearMap.IsSymmetric ↑A :=\n\n/-- Shows that `|v - Aₙ / Bₙ| ≤ 1 / (Bₙ * Bₙ₊₁)`. -/\ntheorem ∀ {K : Type u_1} {v : K} {n : ℕ} [inst : LinearOrderedField K] [inst_1 : FloorRing K],\n  ¬GeneralizedContinuedFraction.TerminatedAt (GeneralizedContinuedFraction.of v) n →\n    |v - GeneralizedContinuedFraction.convergents (GeneralizedContinuedFraction.of v) n| ≤\n      1 /\n        (GeneralizedContinuedFraction.denominators (GeneralizedContinuedFraction.of v) n *\n          GeneralizedContinuedFraction.denominators (GeneralizedContinuedFraction.of v) (n + 1)) :=\n\n/-- Prove that if `V` is a complex inner-product space, then `⟨u, v⟩ = (||u + v||^2 - ||u - v||^2 + ||u + i v||^2 i - ||u - i v||^2 i) / 4` for all `u, v ∈ V`. -/\ntheorem", "choices": ["∀ {V : Type u_1} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℂ V] (u v : V),\n  inner u v = (‖u + v‖ * ‖u + v‖ - ‖u - v‖ * ‖u - v‖ + (‖u + Complex.I * v‖ * ‖u + Complex.I * v‖) * Complex.I - (‖u - Complex.I * v‖ * ‖u - Complex.I * v‖) * Complex.I) / 4 ", "forall {𝕜 : Type u_1} {V : Type u_2} [inst : IsROrC 𝕜] [inst_1 : InnerProductSpace 𝕜 V] (u v : V),\n  inner u v = (‖u + v‖ * ‖u + v‖ - ‖u - v‖ * ‖u - v‖ + is_R_or_C.I * (‖u + is_R_or_C.I * v‖ * ‖u + is_R_or_C.I * v‖ - ‖u - is_R_or_C.I * v‖ * ‖u - is_R_or_C.I * v‖)) / 4 ", "∀ {V : Type u_1} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℂ V] (u v : V),\n  inner u v = (↑(‖u + v‖ * ‖u + v‖) - ↑(‖u - v‖ * ‖u - v‖) + ↑(‖u + I * v‖ * ‖u + I * v‖) * I - ↑(‖u - I * v‖ * ‖u - I * v‖) * I) / 4 ", "forall {𝕜 : Type u_1} {V : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup V] [inst_2 : InnerProductSpace 𝕜 V]\n  (u v : V), inner u v = (1/4) * ((∥u + v∥^2 - ∥u - v∥^2) + (∥u + IsROrC.i * v∥^2 - ∥u - IsROrC.i * v∥^2) * IsROrC.i) ", "∀ {V : Type u_1} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℂ V] (u v : V),\n  inner u v = (‖u + v‖ * ‖u + v‖ - ‖u - v‖ * ‖u - v‖ + ‖u + Complex.i • v‖ * ‖u + Complex.i • v‖ * Complex.i - ‖u - Complex.i • v‖ * ‖u - Complex.i • v‖ * Complex.i) / 4 ", "forall {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  (u v : E), inner u v = ((‖u + v‖ * ‖u + v‖ - ‖u - v‖ * ‖u - v‖) + (‖u + IsROrC.i * v‖ * ‖u + IsROrC.i * v‖ - ‖u - IsROrC.i * v‖ * ‖u - IsROrC.i * v‖) * IsROrC.i) / 4 ", "forall {V : Type u_1} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℂ V] (u v : V),\n  inner u v = ((norm (u + v) ^ 2 - norm (u - v) ^ 2 + norm (u + complex.I * v) ^ 2 * complex.I\n              - norm (u - complex.I * v) ^ 2 * complex.I) / 4) ", "∀ {𝕜 : Type u_1} {V : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup V] [inst_2 : InnerProductSpace 𝕜 V]\n  (u v : V), inner u v = (‖u + v‖^2 - ‖u - v‖^2 + ‖u + (IsROrC.i * v)‖^2 * IsROrC.i - ‖u - (IsROrC.i * v)‖^2 * IsROrC.i) / 4 ", "forall {𝕜 : Type u_1} {V : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup V] [inst_2 : InnerProductSpace 𝕜 V]\n  (u v : V), inner u v = (‖u + v‖ * ‖u + v‖ - ‖u - v‖ * ‖u - v‖ + (‖u + IsROrC.i * v‖ * ‖u + IsROrC.i * v‖) * IsROrC.i - (‖u - IsROrC.i * v‖ * ‖u - IsROrC.i * v‖) * IsROrC.i) / 4 ", "∀ {V : Type u_1} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℂ V] (u v : V),\n  inner u v = (‖u + v‖ * ‖u + v‖ - ‖u - v‖ * ‖u - v‖ + (‖u + Complex.I * v‖ * ‖u + Complex.I * v‖ * Complex.I - ‖u - Complex.I * v‖ * ‖u - Complex.I * v‖ * Complex.I)) / 4 "]}
{"docString": "Suppose `U` is a subspace of `V`. Prove that `U⊥ = {0}` if and only if `U = V`.", "prompts": "[{\"theorem\":\n  \"∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\\n  {U V : Submodule 𝕜 E} [inst_3 : HasOrthogonalProjection U],\\n  ContinuousLinearMap.comp (orthogonalProjection U) (Submodule.subtypeL V) = 0 ↔ U ⟂ V\",\n  \"isProp\": true,\n  \"docString\":\n  \"The projection into `U` from `V` is the zero map if and only if `U` and `V` are orthogonal. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\\n  {U V : Submodule 𝕜 E} [inst_3 : HasOrthogonalProjection U],\\n  U ⟂ V → ContinuousLinearMap.comp (orthogonalProjection U) (Submodule.subtypeL V) = 0\",\n  \"isProp\": true,\n  \"docString\":\n  \"The projection into `U` from an orthogonal submodule `V` is the zero map. \"},\n {\"theorem\":\n  \"∀ {M : Type u_1} [inst : TopologicalSpace M] [inst_1 : AddMonoid M] [inst_2 : ContinuousAdd M] {U : Set M},\\n  U ∈ nhds 0 → ∃ V, IsOpen V ∧ 0 ∈ V ∧ V + V ⊆ U\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given an open neighborhood `U` of `0` there is an open neighborhood `V` of `0`\\nsuch that `V + V ⊆ U`.\"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\\n  {U V : Submodule 𝕜 E} [inst_3 : HasOrthogonalProjection U] [inst_4 : HasOrthogonalProjection V],\\n  U ≤ V → ∀ (x : E), ↑(orthogonalProjection U) ↑(↑(orthogonalProjection V) x) = ↑(orthogonalProjection U) x\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `U ≤ V`, then projecting on `V` and then on `U` is the same as projecting on `U`. \"},\n {\"theorem\":\n  \"∀ {M : Type u_1} [inst : TopologicalSpace M] [inst_1 : Monoid M] [inst_2 : ContinuousMul M] {U : Set M},\\n  U ∈ nhds 1 → ∃ V, IsOpen V ∧ 1 ∈ V ∧ V * V ⊆ U\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given a neighborhood `U` of `1` there is an open neighborhood `V` of `1`\\nsuch that `VV ⊆ U`. \"},\n {\"theorem\":\n  \"∀ {G : Type w} [inst : TopologicalSpace G] [inst_1 : AddZeroClass G] [inst_2 : ContinuousAdd G] {K U : Set G},\\n  IsCompact K → IsOpen U → K ⊆ U → ∃ V, V ∈ nhds 0 ∧ V + K ⊆ U\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given a compact set `K` inside an open set `U`, there is an open neighborhood `V` of\\n`0` such that `V + K ⊆ U`.\"},\n {\"theorem\":\n  \"∀ {G : Type w} [inst : TopologicalSpace G] [inst_1 : AddZeroClass G] [inst_2 : ContinuousAdd G] {K U : Set G},\\n  IsCompact K → IsOpen U → K ⊆ U → ∃ V, V ∈ nhds 0 ∧ K + V ⊆ U\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given a compact set `K` inside an open set `U`, there is an open neighborhood `V` of\\n`0` such that `K + V ⊆ U`.\"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_2} {E : Type u_1} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E],\\n  reflection ⊥ = LinearIsometryEquiv.neg 𝕜\",\n  \"isProp\": true,\n  \"docString\":\n  \"Reflection through the trivial subspace {0} is just negation. \"},\n {\"theorem\":\n  \"∀ {Γ₀ : Type u_1} [inst : LinearOrderedCommGroupWithZero Γ₀], Filter.HasBasis (nhds 0) (fun γ => γ ≠ 0) Set.Iio\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a linearly ordered group with zero element adjoined, `U` is a neighbourhood of `0` if and\\nonly if there exists a nonzero element `γ₀` such that `Iio γ₀ ⊆ U`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : MeasurableSpace α] {s : MeasureTheory.SignedMeasure α} {u v w : Set α},\\n  MeasurableSet u →\\n    MeasurableSet v →\\n      MeasurableSet w →\\n        MeasureTheory.VectorMeasure.restrict s u ≤ MeasureTheory.VectorMeasure.restrict 0 u →\\n          ↑s w = 0 → w ⊆ u → v ⊆ w → ↑s v = 0\",\n  \"isProp\": true,\n  \"docString\":\n  \"A subset `v` of a null-set `w` has zero measure if `w` is a subset of a negative set `u`. \"},\n {\"theorem\":\n  \"∀ {K : Type u_2} {V : Type u_1} [inst : Field K] [inst_1 : AddCommGroup V] [inst_2 : Module K V] (S T : Set (ℙ K V)),\\n  Projectivization.Subspace.span (S ∪ T) = Projectivization.Subspace.span S ⊔ Projectivization.Subspace.span T\",\n  \"isProp\": true,\n  \"docString\":\n  \"The supremum of two subspaces is equal to the span of their union. \"},\n {\"theorem\":\n  \"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\\n  [inst_3 : NormedAddTorsor V P] {s : AffineSubspace ℝ P} [inst_4 : Nonempty { x // x ∈ s }]\\n  [inst_5 : HasOrthogonalProjection (AffineSubspace.direction s)] {p : P},\\n  dist p ↑(↑(EuclideanGeometry.orthogonalProjection s) p) = 0 ↔ p ∈ s\",\n  \"isProp\": true,\n  \"docString\":\n  \"The distance to a point's orthogonal projection is 0 iff it lies in the subspace. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] [inst_2 : MeasurableSpace E]\\n  [inst_3 : BorelSpace E] [inst_4 : FiniteDimensional ℝ E] (μ : MeasureTheory.Measure E)\\n  [inst_5 : MeasureTheory.Measure.IsAddHaarMeasure μ] (s : Submodule ℝ E), s ≠ ⊤ → ↑↑μ ↑s = 0\",\n  \"isProp\": true,\n  \"docString\": \"A strict vector subspace has measure zero. \"},\n {\"theorem\":\n  \"∀ (k : Type u_2) (V : Type u_1) (P : Type u_3) [inst : Ring k] [inst_1 : AddCommGroup V] [inst_2 : Module k V]\\n  [S : AddTorsor V P], AffineSubspace.direction ⊥ = ⊥\",\n  \"isProp\": true,\n  \"docString\": \"The direction of `⊥` is the submodule `⊥`. \"},\n {\"theorem\":\n  \"∀ {k : Type u_1} {V : Type u_2} {P : Type u_3} [inst : Ring k] [inst_1 : AddCommGroup V] [inst_2 : Module k V]\\n  [S : AddTorsor V P] {s : AffineSubspace k P}, Set.Nonempty ↑s → (AffineSubspace.direction s = ⊤ ↔ s = ⊤)\",\n  \"isProp\": true,\n  \"docString\":\n  \"A nonempty affine subspace is `⊤` if and only if its direction is `⊤`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : MeasurableSpace α] {s : MeasureTheory.SignedMeasure α} {u v w : Set α},\\n  MeasurableSet u →\\n    MeasurableSet v →\\n      MeasurableSet w →\\n        MeasureTheory.VectorMeasure.restrict 0 u ≤ MeasureTheory.VectorMeasure.restrict s u →\\n          ↑s w = 0 → w ⊆ u → v ⊆ w → ↑s v = 0\",\n  \"isProp\": true,\n  \"docString\":\n  \"A subset `v` of a null-set `w` has zero measure if `w` is a subset of a positive set `u`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_2} {E : Type u_1} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\\n  (s : Set (Submodule 𝕜 E)), ⨅ (K : Submodule 𝕜 E) (_ : K ∈ s), Kᗮ = (sSup s)ᗮ\",\n  \"isProp\": true,\n  \"docString\":\n  \"The inf of a set of orthogonal subspaces equals the subspace orthogonal to the sup. \"},\n {\"theorem\":\n  \"∀ {G : Type w} [inst : TopologicalSpace G] [inst_1 : MulOneClass G] [inst_2 : ContinuousMul G] {K U : Set G},\\n  IsCompact K → IsOpen U → K ⊆ U → ∃ V, V ∈ nhds 1 ∧ K * V ⊆ U\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given a compact set `K` inside an open set `U`, there is an open neighborhood `V` of `1`\\nsuch that `K * V ⊆ U`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\\n  (K₁ K₂ : Submodule 𝕜 E), K₁ᗮ ⊓ K₂ᗮ = (K₁ ⊔ K₂)ᗮ\",\n  \"isProp\": true,\n  \"docString\":\n  \"The inf of two orthogonal subspaces equals the subspace orthogonal\\nto the sup. \"},\n {\"theorem\":\n  \"∀ {G : Type w} [inst : TopologicalSpace G] [inst_1 : MulOneClass G] [inst_2 : ContinuousMul G] {K U : Set G},\\n  IsCompact K → IsOpen U → K ⊆ U → ∃ V, V ∈ nhds 1 ∧ V * K ⊆ U\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given a compact set `K` inside an open set `U`, there is an open neighborhood `V` of `1`\\nsuch that `V * K ⊆ U`. \"}]\n", "prompt_cons": "/-- The projection into `U` from `V` is the zero map if and only if `U` and `V` are orthogonal. -/\ntheorem ∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  {U V : Submodule 𝕜 E} [inst_3 : HasOrthogonalProjection U],\n  ContinuousLinearMap.comp (orthogonalProjection U) (Submodule.subtypeL V) = 0 ↔ U ⟂ V :=\n\n/-- The projection into `U` from an orthogonal submodule `V` is the zero map. -/\ntheorem ∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  {U V : Submodule 𝕜 E} [inst_3 : HasOrthogonalProjection U],\n  U ⟂ V → ContinuousLinearMap.comp (orthogonalProjection U) (Submodule.subtypeL V) = 0 :=\n\n/-- Given an open neighborhood `U` of `0` there is an open neighborhood `V` of `0`\nsuch that `V + V ⊆ U`. -/\ntheorem ∀ {M : Type u_1} [inst : TopologicalSpace M] [inst_1 : AddMonoid M] [inst_2 : ContinuousAdd M] {U : Set M},\n  U ∈ nhds 0 → ∃ V, IsOpen V ∧ 0 ∈ V ∧ V + V ⊆ U :=\n\n/-- If `U ≤ V`, then projecting on `V` and then on `U` is the same as projecting on `U`. -/\ntheorem ∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  {U V : Submodule 𝕜 E} [inst_3 : HasOrthogonalProjection U] [inst_4 : HasOrthogonalProjection V],\n  U ≤ V → ∀ (x : E), ↑(orthogonalProjection U) ↑(↑(orthogonalProjection V) x) = ↑(orthogonalProjection U) x :=\n\n/-- Given a neighborhood `U` of `1` there is an open neighborhood `V` of `1`\nsuch that `VV ⊆ U`. -/\ntheorem ∀ {M : Type u_1} [inst : TopologicalSpace M] [inst_1 : Monoid M] [inst_2 : ContinuousMul M] {U : Set M},\n  U ∈ nhds 1 → ∃ V, IsOpen V ∧ 1 ∈ V ∧ V * V ⊆ U :=\n\n/-- Given a compact set `K` inside an open set `U`, there is an open neighborhood `V` of\n`0` such that `V + K ⊆ U`. -/\ntheorem ∀ {G : Type w} [inst : TopologicalSpace G] [inst_1 : AddZeroClass G] [inst_2 : ContinuousAdd G] {K U : Set G},\n  IsCompact K → IsOpen U → K ⊆ U → ∃ V, V ∈ nhds 0 ∧ V + K ⊆ U :=\n\n/-- Given a compact set `K` inside an open set `U`, there is an open neighborhood `V` of\n`0` such that `K + V ⊆ U`. -/\ntheorem ∀ {G : Type w} [inst : TopologicalSpace G] [inst_1 : AddZeroClass G] [inst_2 : ContinuousAdd G] {K U : Set G},\n  IsCompact K → IsOpen U → K ⊆ U → ∃ V, V ∈ nhds 0 ∧ K + V ⊆ U :=\n\n/-- Reflection through the trivial subspace {0} is just negation. -/\ntheorem ∀ {𝕜 : Type u_2} {E : Type u_1} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E],\n  reflection ⊥ = LinearIsometryEquiv.neg 𝕜 :=\n\n/-- In a linearly ordered group with zero element adjoined, `U` is a neighbourhood of `0` if and\nonly if there exists a nonzero element `γ₀` such that `Iio γ₀ ⊆ U`. -/\ntheorem ∀ {Γ₀ : Type u_1} [inst : LinearOrderedCommGroupWithZero Γ₀], Filter.HasBasis (nhds 0) (fun γ => γ ≠ 0) Set.Iio :=\n\n/-- A subset `v` of a null-set `w` has zero measure if `w` is a subset of a negative set `u`. -/\ntheorem ∀ {α : Type u_1} [inst : MeasurableSpace α] {s : MeasureTheory.SignedMeasure α} {u v w : Set α},\n  MeasurableSet u →\n    MeasurableSet v →\n      MeasurableSet w →\n        MeasureTheory.VectorMeasure.restrict s u ≤ MeasureTheory.VectorMeasure.restrict 0 u →\n          ↑s w = 0 → w ⊆ u → v ⊆ w → ↑s v = 0 :=\n\n/-- The supremum of two subspaces is equal to the span of their union. -/\ntheorem ∀ {K : Type u_2} {V : Type u_1} [inst : Field K] [inst_1 : AddCommGroup V] [inst_2 : Module K V] (S T : Set (ℙ K V)),\n  Projectivization.Subspace.span (S ∪ T) = Projectivization.Subspace.span S ⊔ Projectivization.Subspace.span T :=\n\n/-- The distance to a point's orthogonal projection is 0 iff it lies in the subspace. -/\ntheorem ∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\n  [inst_3 : NormedAddTorsor V P] {s : AffineSubspace ℝ P} [inst_4 : Nonempty { x // x ∈ s }]\n  [inst_5 : HasOrthogonalProjection (AffineSubspace.direction s)] {p : P},\n  dist p ↑(↑(EuclideanGeometry.orthogonalProjection s) p) = 0 ↔ p ∈ s :=\n\n/-- A strict vector subspace has measure zero. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] [inst_2 : MeasurableSpace E]\n  [inst_3 : BorelSpace E] [inst_4 : FiniteDimensional ℝ E] (μ : MeasureTheory.Measure E)\n  [inst_5 : MeasureTheory.Measure.IsAddHaarMeasure μ] (s : Submodule ℝ E), s ≠ ⊤ → ↑↑μ ↑s = 0 :=\n\n/-- The direction of `⊥` is the submodule `⊥`. -/\ntheorem ∀ (k : Type u_2) (V : Type u_1) (P : Type u_3) [inst : Ring k] [inst_1 : AddCommGroup V] [inst_2 : Module k V]\n  [S : AddTorsor V P], AffineSubspace.direction ⊥ = ⊥ :=\n\n/-- A nonempty affine subspace is `⊤` if and only if its direction is `⊤`. -/\ntheorem ∀ {k : Type u_1} {V : Type u_2} {P : Type u_3} [inst : Ring k] [inst_1 : AddCommGroup V] [inst_2 : Module k V]\n  [S : AddTorsor V P] {s : AffineSubspace k P}, Set.Nonempty ↑s → (AffineSubspace.direction s = ⊤ ↔ s = ⊤) :=\n\n/-- A subset `v` of a null-set `w` has zero measure if `w` is a subset of a positive set `u`. -/\ntheorem ∀ {α : Type u_1} [inst : MeasurableSpace α] {s : MeasureTheory.SignedMeasure α} {u v w : Set α},\n  MeasurableSet u →\n    MeasurableSet v →\n      MeasurableSet w →\n        MeasureTheory.VectorMeasure.restrict 0 u ≤ MeasureTheory.VectorMeasure.restrict s u →\n          ↑s w = 0 → w ⊆ u → v ⊆ w → ↑s v = 0 :=\n\n/-- The inf of a set of orthogonal subspaces equals the subspace orthogonal to the sup. -/\ntheorem ∀ {𝕜 : Type u_2} {E : Type u_1} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  (s : Set (Submodule 𝕜 E)), ⨅ (K : Submodule 𝕜 E) (_ : K ∈ s), Kᗮ = (sSup s)ᗮ :=\n\n/-- Given a compact set `K` inside an open set `U`, there is an open neighborhood `V` of `1`\nsuch that `K * V ⊆ U`. -/\ntheorem ∀ {G : Type w} [inst : TopologicalSpace G] [inst_1 : MulOneClass G] [inst_2 : ContinuousMul G] {K U : Set G},\n  IsCompact K → IsOpen U → K ⊆ U → ∃ V, V ∈ nhds 1 ∧ K * V ⊆ U :=\n\n/-- The inf of two orthogonal subspaces equals the subspace orthogonal\nto the sup. -/\ntheorem ∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  (K₁ K₂ : Submodule 𝕜 E), K₁ᗮ ⊓ K₂ᗮ = (K₁ ⊔ K₂)ᗮ :=\n\n/-- Given a compact set `K` inside an open set `U`, there is an open neighborhood `V` of `1`\nsuch that `V * K ⊆ U`. -/\ntheorem ∀ {G : Type w} [inst : TopologicalSpace G] [inst_1 : MulOneClass G] [inst_2 : ContinuousMul G] {K U : Set G},\n  IsCompact K → IsOpen U → K ⊆ U → ∃ V, V ∈ nhds 1 ∧ V * K ⊆ U :=\n\n/-- Suppose `U` is a subspace of `V`. Prove that `U⊥ = {0}` if and only if `U = V`. -/\ntheorem", "choices": ["∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  {U V : Submodule 𝕜 E}, U ≤ V → (Uᗮ = ⊥ ↔ U = V) ", "forall {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  (U V : Submodule 𝕜 E), U⊥ = ⊥ ↔ U = V ", "∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  {U V : Submodule 𝕜 E} ,\n  Uᗮ = ⊥ ↔ U = V ", "∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  {U V : Submodule 𝕜 E},\n  U⊥ = ⊥ ↔ U = V ", "∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  {U V : Submodule 𝕜 E}, U ≤ V → Uᗮ = ⊥ ↔ U = V ", "∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  {U V : Submodule 𝕜 E}, U ≤ V → (Uᗮ = ⊥ ↔ U = V) ", "∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  {U V : Submodule 𝕜 E}, U ≤ V → (Uᗮ = ⊥ ↔ U = V) ", "∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  {U V : Submodule 𝕜 E},\n  U⊥ = ⊥ ↔ U = V ", "∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  {U V : Submodule 𝕜 E},\n  U⊥ = ⊥ ↔ U = V ", "∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  {U V : Submodule 𝕜 E},\n  Uᗮ = ⊥ ↔ U = V "]}
{"docString": "Prove that if `T ∈ L(V)` is normal, then `range T = range T*`.", "prompts": "[{\"theorem\":\n  \"∀ {α : Type u_1} {E : Type u_2} [inst : MeasurableSpace α] [inst_1 : NormedAddCommGroup E] {μ : MeasureTheory.Measure α}\\n  (P : (α → E) → Prop),\\n  (∀ (c : E) ⦃s : Set α⦄, MeasurableSet s → ↑↑μ s < ⊤ → P (Set.indicator s fun x => c)) →\\n    (∀ ⦃f g : α → E⦄,\\n        Disjoint (Function.support f) (Function.support g) →\\n          MeasureTheory.Integrable f → MeasureTheory.Integrable g → P f → P g → P (f + g)) →\\n      IsClosed {f | P ↑↑f} →\\n        (∀ ⦃f g : α → E⦄, f =ᶠ[MeasureTheory.Measure.ae μ] g → MeasureTheory.Integrable f → P f → P g) →\\n          ∀ ⦃f : α → E⦄, MeasureTheory.Integrable f → P f\",\n  \"isProp\": true,\n  \"docString\":\n  \"To prove something for an arbitrary integrable function in a normed group,\\nit suffices to show that\\n* the property holds for (multiples of) characteristic functions;\\n* is closed under addition;\\n* the set of functions in the `L¹` space for which the property holds is closed.\\n* the property is closed under the almost-everywhere equal relation.\\n\\nIt is possible to make the hypotheses in the induction steps a bit stronger, and such conditions\\ncan be added once we need them (for example in `h_add` it is only necessary to consider the sum of\\na simple function with a multiple of a characteristic function and that the intersection\\nof their images is a subset of `{0}`).\\n\"},\n {\"theorem\":\n  \"∀ {R : Type u_1} {S : Type u_2} [inst : CommRing R] [inst_1 : Ring S] [inst_2 : Algebra R S] {ι : Type w}\\n  [inst_3 : Fintype ι], Basis ι R S → ∀ (x : R), ↑(Algebra.norm R) (↑(algebraMap R S) x) = x ^ Fintype.card ι\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `x` is in the base ring `K`, then the norm is `x ^ [L : K]`. \"},\n {\"theorem\":\n  \"∀ {R S : Type u} [inst : CommRing R] [inst_1 : CommRing S] (M : Submonoid R) (R' : Type u) [inst_2 : CommRing R']\\n  [inst_3 : Algebra R R'] [inst_4 : Algebra R' S] [inst_5 : Algebra R S] [inst_6 : IsScalarTower R R' S]\\n  [inst_7 : IsLocalization M R'] (s : Set S) (x : S), x ∈ Submodule.span R' s → ∃ t, t • x ∈ Submodule.span R s\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `S` is an `R' = M⁻¹R` algebra, and `x ∈ span R' s`,\\nthen `t • x ∈ span R s` for some `t : M`.\"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {β : Type u_1} {γ : Type u_3} [inst : TopologicalSpace β] [inst_1 : TopologicalSpace γ]\\n  [inst_2 : T2Space γ] {f : α → β}, DenseRange f → ∀ {g h : β → γ}, Continuous g → Continuous h → g ∘ f = h ∘ f → g = h\",\n  \"isProp\": true,\n  \"docString\":\n  \"Two continuous functions to a t2-space that agree on the dense range of a function are equal. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {𝕜₂ : Type u_2} {F : Type u_4} [inst : NormedAddCommGroup F] [inst_1 : NontriviallyNormedField 𝕜]\\n  [inst_2 : NontriviallyNormedField 𝕜₂] [inst_3 : NormedSpace 𝕜₂ F] {σ₁₂ : 𝕜 →+* 𝕜₂} {E' : Type u_3}\\n  [inst_4 : SeminormedAddCommGroup E'] [inst_5 : NormedSpace 𝕜 E'] [inst_6 : RingHomIsometric σ₁₂]\\n  {f : ℕ → E' →SL[σ₁₂] F} {g : E' →SL[σ₁₂] F},\\n  Filter.Tendsto (fun n x => ↑(f n) x) Filter.atTop (nhds ↑g) → CauchySeq f → Filter.Tendsto f Filter.atTop (nhds g)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a Cauchy sequence of continuous linear map converges to a continuous linear map pointwise,\\nthen it converges to the same map in norm. This lemma is used to prove that the space of continuous\\nlinear maps is complete provided that the codomain is a complete space. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {𝕜₂ : Type u_2} {E : Type u_3} {F : Type u_4} [inst : SeminormedAddCommGroup E]\\n  [inst_1 : SeminormedAddCommGroup F] [inst_2 : NontriviallyNormedField 𝕜] [inst_3 : NontriviallyNormedField 𝕜₂]\\n  [inst_4 : NormedSpace 𝕜 E] [inst_5 : NormedSpace 𝕜₂ F] {σ₁₂ : 𝕜 →+* 𝕜₂} [inst_6 : RingHomIsometric σ₁₂]\\n  (f : E →SL[σ₁₂] F) (M : NNReal), (∀ (x : E), ‖x‖₊ ≠ 0 → ‖↑f x‖₊ ≤ M * ‖x‖₊) → ‖f‖₊ ≤ M\",\n  \"isProp\": true,\n  \"docString\":\n  \"If one controls the norm of every `A x`, `‖x‖₊ ≠ 0`, then one controls the norm of `A`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {E : Type u_2} [inst : MeasurableSpace α] [inst_1 : NormedAddCommGroup E] {p : ENNReal}\\n  {μ : MeasureTheory.Measure α} [_i : Fact (1 ≤ p)],\\n  p ≠ ⊤ →\\n    ∀ (P : { x // x ∈ MeasureTheory.Lp E p } → Prop),\\n      (∀ (c : E) {s : Set α} (hs : MeasurableSet s) (hμs : ↑↑μ s < ⊤),\\n          P ↑(MeasureTheory.Lp.simpleFunc.indicatorConst p hs (_ : ↑↑μ s ≠ ⊤) c)) →\\n        (∀ ⦃f g : α → E⦄ (hf : MeasureTheory.Memℒp f p) (hg : MeasureTheory.Memℒp g p),\\n            Disjoint (Function.support f) (Function.support g) →\\n              P (MeasureTheory.Memℒp.toLp f hf) →\\n                P (MeasureTheory.Memℒp.toLp g hg) → P (MeasureTheory.Memℒp.toLp f hf + MeasureTheory.Memℒp.toLp g hg)) →\\n          IsClosed {f | P f} → ∀ (f : { x // x ∈ MeasureTheory.Lp E p }), P f\",\n  \"isProp\": true,\n  \"docString\":\n  \"To prove something for an arbitrary `Lp` function in a second countable Borel normed group, it\\nsuffices to show that\\n* the property holds for (multiples of) characteristic functions;\\n* is closed under addition;\\n* the set of functions in `Lp` for which the property holds is closed.\\n\"},\n {\"theorem\":\n  \"∀ {R : Type u_3} {R₂ : Type u_6} {M : Type u_2} {M₂ : Type u_4} [inst : Semiring R] [inst_1 : AddCommMonoid M]\\n  [inst_2 : Module R M] [inst_3 : Semiring R₂] [inst_4 : AddCommMonoid M₂] [inst_5 : Module R₂ M₂] {F : Type u_5}\\n  {σ₁₂ : R →+* R₂} [inst_6 : SemilinearMapClass F σ₁₂ M M₂] {ι : Type u_1} {v : ι → M} {f g : F},\\n  Submodule.span R (Set.range v) = ⊤ → (∀ (i : ι), ↑f (v i) = ↑g (v i)) → f = g\",\n  \"isProp\": true,\n  \"docString\":\n  \"If the range of `v : ι → M` generates the whole module and linear maps `f`, `g` are equal at\\neach `v i`, then they are equal. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {𝕜₂ : Type u_2} {E : Type u_3} {F : Type u_4} [inst : SeminormedAddCommGroup E]\\n  [inst_1 : SeminormedAddCommGroup F] [inst_2 : NontriviallyNormedField 𝕜] [inst_3 : NontriviallyNormedField 𝕜₂]\\n  [inst_4 : NormedSpace 𝕜 E] [inst_5 : NormedSpace 𝕜₂ F] {σ₁₂ : 𝕜 →+* 𝕜₂} (f : E →SL[σ₁₂] F) {M : ℝ},\\n  0 ≤ M → (∀ (x : E), ‖x‖ ≠ 0 → ‖↑f x‖ ≤ M * ‖x‖) → ‖f‖ ≤ M\",\n  \"isProp\": true,\n  \"docString\":\n  \"If one controls the norm of every `A x`, `‖x‖ ≠ 0`, then one controls the norm of `A`. \"},\n {\"theorem\": \"∀ {x : ℝ}, Liouville x → Transcendental ℤ x\",\n  \"isProp\": true,\n  \"docString\": \"**Liouville's Theorem** \"},\n {\"theorem\":\n  \"∀ {Γ : Type u_1} {T : Type u_2} [inst : TopologicalSpace T] [inst_1 : SMul Γ T] [self : ContinuousConstSMul Γ T]\\n  (γ : Γ), Continuous fun x => γ • x\",\n  \"isProp\": true,\n  \"docString\":\n  \"The scalar multiplication `(•) : Γ → T → T` is continuous in the second argument. \"},\n {\"theorem\":\n  \"∀ {L : Type u_2} (K : Type u_1) [inst : Field K] [inst_1 : Field L] [inst_2 : Algebra K L]\\n  [inst_3 : FiniteDimensional K L] [inst_4 : IsGalois K L] (x : { x // x ∈ NumberField.ringOfIntegers L }),\\n  x ∣\\n    ↑(algebraMap { x // x ∈ NumberField.ringOfIntegers K } { x // x ∈ NumberField.ringOfIntegers L })\\n      (↑(RingOfIntegers.norm K) x)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `L/K` is a finite Galois extension of fields, then, for all `(x : 𝓞 L)` we have that\\n`x ∣ algebraMap (𝓞 K) (𝓞 L) (norm K x)`. \"},\n {\"theorem\":\n  \"∀ {γ : Type u_2} [tγ : TopologicalSpace γ] [inst : PolishSpace γ] {β : Type u_1} [inst : TopologicalSpace β]\\n  [inst_1 : T2Space β] [inst_2 : MeasurableSpace β] [inst_3 : BorelSpace β] {f : γ → β},\\n  Continuous f → Function.Injective f → MeasurableSet (Set.range f)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The Lusin-Souslin theorem: the range of a continuous injective function defined on a Polish\\nspace is Borel-measurable. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {E : Type u_2} [inst : MeasurableSpace α] [inst_1 : NormedAddCommGroup E] {p : ENNReal}\\n  {μ : MeasureTheory.Measure α} [_i : Fact (1 ≤ p)],\\n  p ≠ ⊤ →\\n    ∀ (P : (α → E) → Prop),\\n      (∀ (c : E) ⦃s : Set α⦄, MeasurableSet s → ↑↑μ s < ⊤ → P (Set.indicator s fun x => c)) →\\n        (∀ ⦃f g : α → E⦄,\\n            Disjoint (Function.support f) (Function.support g) →\\n              MeasureTheory.Memℒp f p → MeasureTheory.Memℒp g p → P f → P g → P (f + g)) →\\n          IsClosed {f | P ↑↑f} →\\n            (∀ ⦃f g : α → E⦄, f =ᶠ[MeasureTheory.Measure.ae μ] g → MeasureTheory.Memℒp f p → P f → P g) →\\n              ∀ ⦃f : α → E⦄, MeasureTheory.Memℒp f p → P f\",\n  \"isProp\": true,\n  \"docString\":\n  \"To prove something for an arbitrary `Memℒp` function in a second countable\\nBorel normed group, it suffices to show that\\n* the property holds for (multiples of) characteristic functions;\\n* is closed under addition;\\n* the set of functions in the `Lᵖ` space for which the property holds is closed.\\n* the property is closed under the almost-everywhere equal relation.\\n\\nIt is possible to make the hypotheses in the induction steps a bit stronger, and such conditions\\ncan be added once we need them (for example in `h_add` it is only necessary to consider the sum of\\na simple function with a multiple of a characteristic function and that the intersection\\nof their images is a subset of `{0}`).\\n\"},\n {\"theorem\":\n  \"∀ {R : Type u} [inst : CommSemiring R] {S : Type u_1} [inst_1 : CommRing S] [inst_2 : Algebra R S] (S' : Subalgebra R S)\\n  {ι : Type u_2} (ι' : Finset ι) (s l : ι → S),\\n  (Finset.sum ι' fun i => l i * s i) = 1 →\\n    (∀ (i : ι), s i ∈ S') → (∀ (i : ι), l i ∈ S') → ∀ (x : S), (∀ (i : ι), ∃ n, s i ^ n • x ∈ S') → x ∈ S'\",\n  \"isProp\": true,\n  \"docString\":\n  \"Suppose we are given `∑ i, lᵢ * sᵢ = 1` in `S`, and `S'` a subalgebra of `S` that contains\\n`lᵢ` and `sᵢ`. To check that an `x : S` falls in `S'`, we only need to show that\\n`sᵢ ^ n • x ∈ S'` for some `n` for each `sᵢ`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {E : Type u_2} {Fₗ : Type u_3} [inst : NormedAddCommGroup E] [inst_1 : NormedAddCommGroup Fₗ]\\n  [inst_2 : NontriviallyNormedField 𝕜] [inst_3 : NormedSpace 𝕜 E] [inst_4 : NormedSpace 𝕜 Fₗ] (c : E →L[𝕜] 𝕜) (f : Fₗ),\\n  ‖ContinuousLinearMap.smulRight c f‖ = ‖c‖ * ‖f‖\",\n  \"isProp\": true,\n  \"docString\":\n  \"The norm of the tensor product of a scalar linear map and of an element of a normed space\\nis the product of the norms. \"},\n {\"theorem\":\n  \"∀ {α : Type u_3} {G : Type u_2} [inst : NormedAddCommGroup G] [inst_1 : NormedSpace ℝ G] {m : MeasurableSpace α}\\n  {μ : MeasureTheory.Measure α} {ι : Type u_1} (f : α → G),\\n  MeasureTheory.Integrable f →\\n    ∀ {F : ι → α → G} {l : Filter ι},\\n      (∀ᶠ (i : ι) in l, MeasureTheory.Integrable (F i)) →\\n        Filter.Tendsto (fun i => ∫⁻ (x : α), ↑‖F i x - f x‖₊ ∂μ) l (nhds 0) →\\n          Filter.Tendsto (fun i => ∫ (x : α), F i x ∂μ) l (nhds (∫ (x : α), f x ∂μ))\",\n  \"isProp\": true,\n  \"docString\": \"If `F i → f` in `L1`, then `∫ x, F i x ∂μ → ∫ x, f x ∂μ`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u} [hnorm : NontriviallyNormedField 𝕜] {t : TopologicalSpace 𝕜},\\n  TopologicalAddGroup 𝕜 → ContinuousSMul 𝕜 𝕜 → T2Space 𝕜 → t = UniformSpace.toTopologicalSpace\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `𝕜` is a nontrivially normed field, any T2 topology on `𝕜` which makes it a topological\\nvector space over itself (with the norm topology) is *equal* to the norm topology. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] [inst_2 : T1Space β] {f : α → β}\\n  {a : α} {b : β}, Filter.Tendsto f (nhds a) (nhds b) → ContinuousAt f a\",\n  \"isProp\": true,\n  \"docString\":\n  \"To prove a function to a `T1Space` is continuous at some point `a`, it suffices to prove that\\n`f` admits *some* limit at `a`. \"},\n {\"theorem\": \"∀ {d : ℤ}, MonoidHom.mker Zsqrtd.normMonoidHom = unitary (ℤ√d)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The kernel of the norm map on `ℤ√d` equals the submonoid of unitary elements. \"}]\n", "prompt_cons": "/-- To prove something for an arbitrary integrable function in a normed group,\nit suffices to show that\n* the property holds for (multiples of) characteristic functions;\n* is closed under addition;\n* the set of functions in the `L¹` space for which the property holds is closed.\n* the property is closed under the almost-everywhere equal relation.\n\nIt is possible to make the hypotheses in the induction steps a bit stronger, and such conditions\ncan be added once we need them (for example in `h_add` it is only necessary to consider the sum of\na simple function with a multiple of a characteristic function and that the intersection\nof their images is a subset of `{0}`). -/\ntheorem ∀ {α : Type u_1} {E : Type u_2} [inst : MeasurableSpace α] [inst_1 : NormedAddCommGroup E] {μ : MeasureTheory.Measure α}\n  (P : (α → E) → Prop),\n  (∀ (c : E) ⦃s : Set α⦄, MeasurableSet s → ↑↑μ s < ⊤ → P (Set.indicator s fun x => c)) →\n    (∀ ⦃f g : α → E⦄,\n        Disjoint (Function.support f) (Function.support g) →\n          MeasureTheory.Integrable f → MeasureTheory.Integrable g → P f → P g → P (f + g)) →\n      IsClosed {f | P ↑↑f} →\n        (∀ ⦃f g : α → E⦄, f =ᶠ[MeasureTheory.Measure.ae μ] g → MeasureTheory.Integrable f → P f → P g) →\n          ∀ ⦃f : α → E⦄, MeasureTheory.Integrable f → P f :=\n\n/-- If `x` is in the base ring `K`, then the norm is `x ^ [L : K]`. -/\ntheorem ∀ {R : Type u_1} {S : Type u_2} [inst : CommRing R] [inst_1 : Ring S] [inst_2 : Algebra R S] {ι : Type w}\n  [inst_3 : Fintype ι], Basis ι R S → ∀ (x : R), ↑(Algebra.norm R) (↑(algebraMap R S) x) = x ^ Fintype.card ι :=\n\n/-- If `S` is an `R' = M⁻¹R` algebra, and `x ∈ span R' s`,\nthen `t • x ∈ span R s` for some `t : M`. -/\ntheorem ∀ {R S : Type u} [inst : CommRing R] [inst_1 : CommRing S] (M : Submonoid R) (R' : Type u) [inst_2 : CommRing R']\n  [inst_3 : Algebra R R'] [inst_4 : Algebra R' S] [inst_5 : Algebra R S] [inst_6 : IsScalarTower R R' S]\n  [inst_7 : IsLocalization M R'] (s : Set S) (x : S), x ∈ Submodule.span R' s → ∃ t, t • x ∈ Submodule.span R s :=\n\n/-- Two continuous functions to a t2-space that agree on the dense range of a function are equal. -/\ntheorem ∀ {α : Type u_2} {β : Type u_1} {γ : Type u_3} [inst : TopologicalSpace β] [inst_1 : TopologicalSpace γ]\n  [inst_2 : T2Space γ] {f : α → β}, DenseRange f → ∀ {g h : β → γ}, Continuous g → Continuous h → g ∘ f = h ∘ f → g = h :=\n\n/-- If a Cauchy sequence of continuous linear map converges to a continuous linear map pointwise,\nthen it converges to the same map in norm. This lemma is used to prove that the space of continuous\nlinear maps is complete provided that the codomain is a complete space. -/\ntheorem ∀ {𝕜 : Type u_1} {𝕜₂ : Type u_2} {F : Type u_4} [inst : NormedAddCommGroup F] [inst_1 : NontriviallyNormedField 𝕜]\n  [inst_2 : NontriviallyNormedField 𝕜₂] [inst_3 : NormedSpace 𝕜₂ F] {σ₁₂ : 𝕜 →+* 𝕜₂} {E' : Type u_3}\n  [inst_4 : SeminormedAddCommGroup E'] [inst_5 : NormedSpace 𝕜 E'] [inst_6 : RingHomIsometric σ₁₂]\n  {f : ℕ → E' →SL[σ₁₂] F} {g : E' →SL[σ₁₂] F},\n  Filter.Tendsto (fun n x => ↑(f n) x) Filter.atTop (nhds ↑g) → CauchySeq f → Filter.Tendsto f Filter.atTop (nhds g) :=\n\n/-- If one controls the norm of every `A x`, `‖x‖₊ ≠ 0`, then one controls the norm of `A`. -/\ntheorem ∀ {𝕜 : Type u_1} {𝕜₂ : Type u_2} {E : Type u_3} {F : Type u_4} [inst : SeminormedAddCommGroup E]\n  [inst_1 : SeminormedAddCommGroup F] [inst_2 : NontriviallyNormedField 𝕜] [inst_3 : NontriviallyNormedField 𝕜₂]\n  [inst_4 : NormedSpace 𝕜 E] [inst_5 : NormedSpace 𝕜₂ F] {σ₁₂ : 𝕜 →+* 𝕜₂} [inst_6 : RingHomIsometric σ₁₂]\n  (f : E →SL[σ₁₂] F) (M : NNReal), (∀ (x : E), ‖x‖₊ ≠ 0 → ‖↑f x‖₊ ≤ M * ‖x‖₊) → ‖f‖₊ ≤ M :=\n\n/-- To prove something for an arbitrary `Lp` function in a second countable Borel normed group, it\nsuffices to show that\n* the property holds for (multiples of) characteristic functions;\n* is closed under addition;\n* the set of functions in `Lp` for which the property holds is closed. -/\ntheorem ∀ {α : Type u_1} {E : Type u_2} [inst : MeasurableSpace α] [inst_1 : NormedAddCommGroup E] {p : ENNReal}\n  {μ : MeasureTheory.Measure α} [_i : Fact (1 ≤ p)],\n  p ≠ ⊤ →\n    ∀ (P : { x // x ∈ MeasureTheory.Lp E p } → Prop),\n      (∀ (c : E) {s : Set α} (hs : MeasurableSet s) (hμs : ↑↑μ s < ⊤),\n          P ↑(MeasureTheory.Lp.simpleFunc.indicatorConst p hs (_ : ↑↑μ s ≠ ⊤) c)) →\n        (∀ ⦃f g : α → E⦄ (hf : MeasureTheory.Memℒp f p) (hg : MeasureTheory.Memℒp g p),\n            Disjoint (Function.support f) (Function.support g) →\n              P (MeasureTheory.Memℒp.toLp f hf) →\n                P (MeasureTheory.Memℒp.toLp g hg) → P (MeasureTheory.Memℒp.toLp f hf + MeasureTheory.Memℒp.toLp g hg)) →\n          IsClosed {f | P f} → ∀ (f : { x // x ∈ MeasureTheory.Lp E p }), P f :=\n\n/-- If the range of `v : ι → M` generates the whole module and linear maps `f`, `g` are equal at\neach `v i`, then they are equal. -/\ntheorem ∀ {R : Type u_3} {R₂ : Type u_6} {M : Type u_2} {M₂ : Type u_4} [inst : Semiring R] [inst_1 : AddCommMonoid M]\n  [inst_2 : Module R M] [inst_3 : Semiring R₂] [inst_4 : AddCommMonoid M₂] [inst_5 : Module R₂ M₂] {F : Type u_5}\n  {σ₁₂ : R →+* R₂} [inst_6 : SemilinearMapClass F σ₁₂ M M₂] {ι : Type u_1} {v : ι → M} {f g : F},\n  Submodule.span R (Set.range v) = ⊤ → (∀ (i : ι), ↑f (v i) = ↑g (v i)) → f = g :=\n\n/-- If one controls the norm of every `A x`, `‖x‖ ≠ 0`, then one controls the norm of `A`. -/\ntheorem ∀ {𝕜 : Type u_1} {𝕜₂ : Type u_2} {E : Type u_3} {F : Type u_4} [inst : SeminormedAddCommGroup E]\n  [inst_1 : SeminormedAddCommGroup F] [inst_2 : NontriviallyNormedField 𝕜] [inst_3 : NontriviallyNormedField 𝕜₂]\n  [inst_4 : NormedSpace 𝕜 E] [inst_5 : NormedSpace 𝕜₂ F] {σ₁₂ : 𝕜 →+* 𝕜₂} (f : E →SL[σ₁₂] F) {M : ℝ},\n  0 ≤ M → (∀ (x : E), ‖x‖ ≠ 0 → ‖↑f x‖ ≤ M * ‖x‖) → ‖f‖ ≤ M :=\n\n/-- **Liouville's Theorem** -/\ntheorem ∀ {x : ℝ}, Liouville x → Transcendental ℤ x :=\n\n/-- The scalar multiplication `(•) : Γ → T → T` is continuous in the second argument. -/\ntheorem ∀ {Γ : Type u_1} {T : Type u_2} [inst : TopologicalSpace T] [inst_1 : SMul Γ T] [self : ContinuousConstSMul Γ T]\n  (γ : Γ), Continuous fun x => γ • x :=\n\n/-- If `L/K` is a finite Galois extension of fields, then, for all `(x : 𝓞 L)` we have that\n`x ∣ algebraMap (𝓞 K) (𝓞 L) (norm K x)`. -/\ntheorem ∀ {L : Type u_2} (K : Type u_1) [inst : Field K] [inst_1 : Field L] [inst_2 : Algebra K L]\n  [inst_3 : FiniteDimensional K L] [inst_4 : IsGalois K L] (x : { x // x ∈ NumberField.ringOfIntegers L }),\n  x ∣\n    ↑(algebraMap { x // x ∈ NumberField.ringOfIntegers K } { x // x ∈ NumberField.ringOfIntegers L })\n      (↑(RingOfIntegers.norm K) x) :=\n\n/-- The Lusin-Souslin theorem: the range of a continuous injective function defined on a Polish\nspace is Borel-measurable. -/\ntheorem ∀ {γ : Type u_2} [tγ : TopologicalSpace γ] [inst : PolishSpace γ] {β : Type u_1} [inst : TopologicalSpace β]\n  [inst_1 : T2Space β] [inst_2 : MeasurableSpace β] [inst_3 : BorelSpace β] {f : γ → β},\n  Continuous f → Function.Injective f → MeasurableSet (Set.range f) :=\n\n/-- To prove something for an arbitrary `Memℒp` function in a second countable\nBorel normed group, it suffices to show that\n* the property holds for (multiples of) characteristic functions;\n* is closed under addition;\n* the set of functions in the `Lᵖ` space for which the property holds is closed.\n* the property is closed under the almost-everywhere equal relation.\n\nIt is possible to make the hypotheses in the induction steps a bit stronger, and such conditions\ncan be added once we need them (for example in `h_add` it is only necessary to consider the sum of\na simple function with a multiple of a characteristic function and that the intersection\nof their images is a subset of `{0}`). -/\ntheorem ∀ {α : Type u_1} {E : Type u_2} [inst : MeasurableSpace α] [inst_1 : NormedAddCommGroup E] {p : ENNReal}\n  {μ : MeasureTheory.Measure α} [_i : Fact (1 ≤ p)],\n  p ≠ ⊤ →\n    ∀ (P : (α → E) → Prop),\n      (∀ (c : E) ⦃s : Set α⦄, MeasurableSet s → ↑↑μ s < ⊤ → P (Set.indicator s fun x => c)) →\n        (∀ ⦃f g : α → E⦄,\n            Disjoint (Function.support f) (Function.support g) →\n              MeasureTheory.Memℒp f p → MeasureTheory.Memℒp g p → P f → P g → P (f + g)) →\n          IsClosed {f | P ↑↑f} →\n            (∀ ⦃f g : α → E⦄, f =ᶠ[MeasureTheory.Measure.ae μ] g → MeasureTheory.Memℒp f p → P f → P g) →\n              ∀ ⦃f : α → E⦄, MeasureTheory.Memℒp f p → P f :=\n\n/-- Suppose we are given `∑ i, lᵢ * sᵢ = 1` in `S`, and `S'` a subalgebra of `S` that contains\n`lᵢ` and `sᵢ`. To check that an `x : S` falls in `S'`, we only need to show that\n`sᵢ ^ n • x ∈ S'` for some `n` for each `sᵢ`. -/\ntheorem ∀ {R : Type u} [inst : CommSemiring R] {S : Type u_1} [inst_1 : CommRing S] [inst_2 : Algebra R S] (S' : Subalgebra R S)\n  {ι : Type u_2} (ι' : Finset ι) (s l : ι → S),\n  (Finset.sum ι' fun i => l i * s i) = 1 →\n    (∀ (i : ι), s i ∈ S') → (∀ (i : ι), l i ∈ S') → ∀ (x : S), (∀ (i : ι), ∃ n, s i ^ n • x ∈ S') → x ∈ S' :=\n\n/-- The norm of the tensor product of a scalar linear map and of an element of a normed space\nis the product of the norms. -/\ntheorem ∀ {𝕜 : Type u_1} {E : Type u_2} {Fₗ : Type u_3} [inst : NormedAddCommGroup E] [inst_1 : NormedAddCommGroup Fₗ]\n  [inst_2 : NontriviallyNormedField 𝕜] [inst_3 : NormedSpace 𝕜 E] [inst_4 : NormedSpace 𝕜 Fₗ] (c : E →L[𝕜] 𝕜) (f : Fₗ),\n  ‖ContinuousLinearMap.smulRight c f‖ = ‖c‖ * ‖f‖ :=\n\n/-- If `F i → f` in `L1`, then `∫ x, F i x ∂μ → ∫ x, f x ∂μ`. -/\ntheorem ∀ {α : Type u_3} {G : Type u_2} [inst : NormedAddCommGroup G] [inst_1 : NormedSpace ℝ G] {m : MeasurableSpace α}\n  {μ : MeasureTheory.Measure α} {ι : Type u_1} (f : α → G),\n  MeasureTheory.Integrable f →\n    ∀ {F : ι → α → G} {l : Filter ι},\n      (∀ᶠ (i : ι) in l, MeasureTheory.Integrable (F i)) →\n        Filter.Tendsto (fun i => ∫⁻ (x : α), ↑‖F i x - f x‖₊ ∂μ) l (nhds 0) →\n          Filter.Tendsto (fun i => ∫ (x : α), F i x ∂μ) l (nhds (∫ (x : α), f x ∂μ)) :=\n\n/-- If `𝕜` is a nontrivially normed field, any T2 topology on `𝕜` which makes it a topological\nvector space over itself (with the norm topology) is *equal* to the norm topology. -/\ntheorem ∀ {𝕜 : Type u} [hnorm : NontriviallyNormedField 𝕜] {t : TopologicalSpace 𝕜},\n  TopologicalAddGroup 𝕜 → ContinuousSMul 𝕜 𝕜 → T2Space 𝕜 → t = UniformSpace.toTopologicalSpace :=\n\n/-- To prove a function to a `T1Space` is continuous at some point `a`, it suffices to prove that\n`f` admits *some* limit at `a`. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] [inst_2 : T1Space β] {f : α → β}\n  {a : α} {b : β}, Filter.Tendsto f (nhds a) (nhds b) → ContinuousAt f a :=\n\n/-- The kernel of the norm map on `ℤ√d` equals the submonoid of unitary elements. -/\ntheorem ∀ {d : ℤ}, MonoidHom.mker Zsqrtd.normMonoidHom = unitary (ℤ√d) :=\n\n/-- Prove that if `T ∈ L(V)` is normal, then `range T = range T*`. -/\ntheorem", "choices": ["∀ {𝕜 : Type u_1} {V : Type u_4} [_inst_1 : Field 𝕜] [_inst_4 : AddCommGroup V] [_inst_5 : Module 𝕜 V] (T : V →ₗ[𝕜] V),\n  IsNormal T → LinearMap.range T = LinearMap.range (LinearMap.adjoint T) ", "∀ {𝕜 : Type u_1} {V : Type u_7} [inst : Field 𝕜] [inst_1 : InnerProductSpace 𝕜 V] [inst_2 : FiniteDimensional 𝕜 V] {T : V →SL[RingHom.id 𝕜] V},\n  T.is_normal → ContinuousLinearMap.range T = ContinuousLinearMap.range (ContinuousLinearMap.adjoint T) ", "∀ {𝕜 : Type u_1} {V : Type u_2} [inst : NormedField 𝕜] [inst_1 : NormedSpace 𝕜 V] {T : V →ₗ[𝕜] V},\n  LinearMap.IsNormal T → LinearMap.range T = LinearMap.range (LinearMap.adjoint T) ", "∀ {𝕜 : Type u} {V : Type u_1} [is_R_or_C 𝕜] [inst : NormedSpace 𝕜 V] [inst_1 : InnerProductSpace 𝕜 V] (T : V →ₗᵢ[𝕜] V),\n  LinearIsometry.isNormal T → LinearMap.range (LinearIsometry.toLinearMap T) = LinearMap.range (LinearIsometry.toLinearMap Tᵥ) ", "∀ {𝕜 : Type u} {V : Type v} [F : Field 𝕜] [AddCommGroup V] [Module 𝕜 V] {T : V →ₗ[𝕜] V},\n  LinearMap.IsNormal T → LinearMap.range T = LinearMap.range (LinearMap.adjoint T) ", "LinearMap.range_eq_of_normal {𝕜 : Type u_1} {V : Type u_2} [inst : Field 𝕜] [inst_1 : InnerProductSpace 𝕜 V]\n {T : V →ₗ[𝕜] V}, LinearMap.IsNormal T → LinearMap.range T = LinearMap.range (LinearMap.adjoint T) ", "forall {𝕜 : Type u} {V : Type v} [inst : Field 𝕜] [inst_1 : InnerProductSpace 𝕜 V] {T : V →ₗ[𝕜] V},\n  IsNormal T → LinearMap.range T = LinearMap.range (InnerProductSpace.continuousLinearMapOfBilin T.adjoint) ", "forall {𝕜 : Type u_1} {V : Type u_2} [field 𝕜] [add_comm_group V] [vector_space 𝕜 V] {T : V →ₗ[𝕜] V},\n  LinearMap.is_normal T -> LinearMap.range T = LinearMap.range (LinearMap.is_dual_map T) ", "∀ {𝕜 : Type u_1} {V : Type u_2} [inst : Field 𝕜] [inst_1 : InnerProductSpace 𝕜 V] [inst_2 : FiniteDimensional 𝕜 V]\n  (T : V →ₗ[𝕜] V), T.IsNormal → (ContinuousLinearMap.ofLinear T).range = (ContinuousLinearMap.ofLinear T.star).range ", "∀ {𝕜 : Type u_1} {E : Type u_2} [inst_1 : Is_R_or_C 𝕜] [inst_2 : InnerProductSpace 𝕜 E] {T : E →ₗ[𝕜] E},\n  ContinuousLinearMap.normal T → ContinuousLinearMap.range T = ContinuousLinearMap.range (ContinuousLinearMap.adjoint T) "]}
{"docString": "Suppose `V` is a complex inner-product space and `T ∈ L(V)` is a normal operator such that `T^9 = T^8`. Prove that `T` is self-adjoint and `T^2 = T`.", "prompts": "[{\"theorem\":\n  \"∀ {𝕜 : Type u_1} [inst : IsROrC 𝕜] [dec_𝕜 : DecidableEq 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : InnerProductSpace 𝕜 E] {T : E →ₗ[𝕜] E} (hT : LinearMap.IsSymmetric T) [inst_3 : FiniteDimensional 𝕜 E]\\n  {n : ℕ} (hn : FiniteDimensional.finrank 𝕜 E = n) (v : E) (i : Fin n),\\n  ↑(LinearMap.IsSymmetric.eigenvectorBasis hT hn).repr (↑T v) i =\\n    ↑(LinearMap.IsSymmetric.eigenvalues hT hn i) * ↑(LinearMap.IsSymmetric.eigenvectorBasis hT hn).repr v i\",\n  \"isProp\": true,\n  \"docString\":\n  \"*Diagonalization theorem*, *spectral theorem*; version 2: A self-adjoint operator `T` on a\\nfinite-dimensional inner product space `E` acts diagonally on the identification of `E` with\\nEuclidean space induced by an orthonormal basis of eigenvectors of `T`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} [inst : IsROrC 𝕜] [dec_𝕜 : DecidableEq 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : InnerProductSpace 𝕜 E] {T : E →ₗ[𝕜] E} (hT : LinearMap.IsSymmetric T) [inst_3 : FiniteDimensional 𝕜 E]\\n  (v : E) (μ : Module.End.Eigenvalues T),\\n  ↑(LinearMap.IsSymmetric.diagonalization hT) (↑T v) μ = ↑T μ • ↑(LinearMap.IsSymmetric.diagonalization hT) v μ\",\n  \"isProp\": true,\n  \"docString\":\n  \"*Diagonalization theorem*, *spectral theorem*; version 1: A self-adjoint operator `T` on a\\nfinite-dimensional inner product space `E` acts diagonally on the decomposition of `E` into the\\ndirect sum of the eigenspaces of `T`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\\n  [inst_3 : CompleteSpace E] {A : E →L[𝕜] E}, IsSelfAdjoint A → LinearMap.IsSymmetric ↑A\",\n  \"isProp\": true,\n  \"docString\":\n  \"Every self-adjoint operator on an inner product space is symmetric. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\\n  (T : E →ₗ[𝕜] E), LinearMap.IsSymmetric T ↔ LinearMap.IsSelfAdjoint sesqFormOfInner T\",\n  \"isProp\": true,\n  \"docString\":\n  \"An operator `T` on an inner product space is symmetric if and only if it is\\n`LinearMap.IsSelfAdjoint` with respect to the sesquilinear form given by the inner product. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} [inst : IsROrC 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\\n  {T : E →ₗ[𝕜] E},\\n  LinearMap.IsSymmetric T →\\n    OrthogonalFamily 𝕜 (fun μ => { x // x ∈ Module.End.eigenspace T μ }) fun μ =>\\n      Submodule.subtypeₗᵢ (Module.End.eigenspace T μ)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The eigenspaces of a self-adjoint operator are mutually orthogonal. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_2} [inst : IsROrC 𝕜] {E : Type u_1} [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\\n  {T : E →ₗ[𝕜] E},\\n  LinearMap.IsSymmetric T → ∀ (μ : 𝕜) (v : E), v ∈ (Module.End.eigenspace T μ)ᗮ → ↑T v ∈ (Module.End.eigenspace T μ)ᗮ\",\n  \"isProp\": true,\n  \"docString\":\n  \"A self-adjoint operator preserves orthogonal complements of its eigenspaces. \"},\n {\"theorem\":\n  \"∀ {V : Type u_1} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℂ V] (T : V →ₗ[ℂ] V),\\n  LinearMap.IsSymmetric T ↔ ∀ (v : V), ↑(starRingEnd ℂ) (inner (↑T v) v) = inner (↑T v) v\",\n  \"isProp\": true,\n  \"docString\":\n  \"A linear operator on a complex inner product space is symmetric precisely when\\n`⟪T v, v⟫_ℂ` is real for all v.\"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_2} [inst : IsROrC 𝕜] {E : Type u_1} [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\\n  {T : E →ₗ[𝕜] E},\\n  LinearMap.IsSymmetric T → ∀ [inst_3 : FiniteDimensional 𝕜 E], (⨆ (μ : 𝕜), Module.End.eigenspace T μ)ᗮ = ⊥\",\n  \"isProp\": true,\n  \"docString\":\n  \"The mutual orthogonal complement of the eigenspaces of a self-adjoint operator on a\\nfinite-dimensional inner product space is trivial. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_2} [inst : IsROrC 𝕜] {E : Type u_1} [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\\n  {T : E →ₗ[𝕜] E},\\n  LinearMap.IsSymmetric T →\\n    ∀ ⦃v : E⦄, v ∈ (⨆ (μ : 𝕜), Module.End.eigenspace T μ)ᗮ → ↑T v ∈ (⨆ (μ : 𝕜), Module.End.eigenspace T μ)ᗮ\",\n  \"isProp\": true,\n  \"docString\":\n  \"The mutual orthogonal complement of the eigenspaces of a self-adjoint operator on an inner\\nproduct space is an invariant subspace of the operator. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [self : T0Space α] ⦃x y : α⦄, Inseparable x y → x = y\",\n  \"isProp\": true,\n  \"docString\": \"Two inseparable points in a T₀ space are equal. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} [inst : IsROrC 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\\n  {T : E →ₗ[𝕜] E}, LinearMap.IsSymmetric T → ∀ {μ : 𝕜}, Module.End.HasEigenvalue T μ → ↑(starRingEnd 𝕜) μ = μ\",\n  \"isProp\": true,\n  \"docString\": \"The eigenvalues of a self-adjoint operator are real. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\\n  [inst_3 : CompleteSpace E] (U : Submodule 𝕜 E) [inst_4 : CompleteSpace { x // x ∈ U }],\\n  IsSelfAdjoint (ContinuousLinearMap.comp (Submodule.subtypeL U) (orthogonalProjection U))\",\n  \"isProp\": true,\n  \"docString\": \"The orthogonal projection is self-adjoint. \"},\n {\"theorem\":\n  \"∀ {G : Type u_1} [inst : NormedAddCommGroup G] [inst_1 : InnerProductSpace ℝ G] (f : G ≃ₗᵢ[ℝ] ℂ) (x y : G),\\n  inner x y = (↑(starRingEnd ℂ) (↑f x) * ↑f y).re\",\n  \"isProp\": true,\n  \"docString\":\n  \"The inner product on an inner product space of dimension 2 can be evaluated in terms\\nof a complex-number representation of the space. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\\n  [inst_3 : FiniteDimensional 𝕜 E] {A : E →ₗ[𝕜] E}, IsSelfAdjoint A ↔ ↑LinearMap.adjoint A = A\",\n  \"isProp\": true,\n  \"docString\":\n  \"A continuous linear operator is self-adjoint iff it is equal to its adjoint. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : InnerProductSpace ℝ E]\\n  [inst_2 : Fact (FiniteDimensional.finrank ℝ E = 2)] (o : Orientation ℝ E (Fin 2)) (f : E ≃ₗᵢ[ℝ] ℂ),\\n  ↑(Orientation.map (Fin 2) f.toLinearEquiv) o = Complex.orientation →\\n    ∀ (x y : E), ↑(↑(Orientation.areaForm o) x) y = (↑(starRingEnd ℂ) (↑f x) * ↑f y).im\",\n  \"isProp\": true,\n  \"docString\":\n  \"The area form on an oriented real inner product space of dimension 2 can be evaluated in terms\\nof a complex-number representation of the space. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} [inst : IsROrC 𝕜] [dec_𝕜 : DecidableEq 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : InnerProductSpace 𝕜 E] {T : E →ₗ[𝕜] E},\\n  LinearMap.IsSymmetric T →\\n    ∀ [inst_3 : FiniteDimensional 𝕜 E], DirectSum.IsInternal fun μ => Module.End.eigenspace T (↑T μ)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The eigenspaces of a self-adjoint operator on a finite-dimensional inner product space `E` gives\\nan internal direct sum decomposition of `E`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : T5Space α], NormalSpace α\",\n  \"isProp\": true,\n  \"docString\": \"A `T₅` space is a `T₄` space. \"},\n {\"theorem\":\n  \"∀ {A : Type u_1} [inst : NormedRing A] [inst_1 : NormedAlgebra ℂ A] [inst_2 : CompleteSpace A] [inst_3 : StarRing A]\\n  [inst_4 : CstarRing A] [inst_5 : StarModule ℂ A] {a : A},\\n  IsSelfAdjoint a → spectrum ℂ a = Complex.ofReal' ∘ Complex.re '' spectrum ℂ a\",\n  \"isProp\": true,\n  \"docString\": \"The spectrum of a selfadjoint is real \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : T5Space α] {p : α → Prop}, T5Space { x // p x }\",\n  \"isProp\": true,\n  \"docString\": \"A subspace of a `T₅` space is a `T₅` space. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : InnerProductSpace ℝ E]\\n  [inst_2 : Fact (FiniteDimensional.finrank ℝ E = 2)] (o : Orientation ℝ E (Fin 2)) (f : E ≃ₗᵢ[ℝ] ℂ),\\n  ↑(Orientation.map (Fin 2) f.toLinearEquiv) o = Complex.orientation →\\n    ∀ (x : E), ↑f (↑(Orientation.rightAngleRotation o) x) = Complex.I * ↑f x\",\n  \"isProp\": true,\n  \"docString\":\n  \"The rotation by 90 degrees on an oriented real inner product space of dimension 2 can be\\nevaluated in terms of a complex-number representation of the space. \"}]\n", "prompt_cons": "/-- *Diagonalization theorem*, *spectral theorem*; version 2: A self-adjoint operator `T` on a\nfinite-dimensional inner product space `E` acts diagonally on the identification of `E` with\nEuclidean space induced by an orthonormal basis of eigenvectors of `T`. -/\ntheorem ∀ {𝕜 : Type u_1} [inst : IsROrC 𝕜] [dec_𝕜 : DecidableEq 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E]\n  [inst_2 : InnerProductSpace 𝕜 E] {T : E →ₗ[𝕜] E} (hT : LinearMap.IsSymmetric T) [inst_3 : FiniteDimensional 𝕜 E]\n  {n : ℕ} (hn : FiniteDimensional.finrank 𝕜 E = n) (v : E) (i : Fin n),\n  ↑(LinearMap.IsSymmetric.eigenvectorBasis hT hn).repr (↑T v) i =\n    ↑(LinearMap.IsSymmetric.eigenvalues hT hn i) * ↑(LinearMap.IsSymmetric.eigenvectorBasis hT hn).repr v i :=\n\n/-- *Diagonalization theorem*, *spectral theorem*; version 1: A self-adjoint operator `T` on a\nfinite-dimensional inner product space `E` acts diagonally on the decomposition of `E` into the\ndirect sum of the eigenspaces of `T`. -/\ntheorem ∀ {𝕜 : Type u_1} [inst : IsROrC 𝕜] [dec_𝕜 : DecidableEq 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E]\n  [inst_2 : InnerProductSpace 𝕜 E] {T : E →ₗ[𝕜] E} (hT : LinearMap.IsSymmetric T) [inst_3 : FiniteDimensional 𝕜 E]\n  (v : E) (μ : Module.End.Eigenvalues T),\n  ↑(LinearMap.IsSymmetric.diagonalization hT) (↑T v) μ = ↑T μ • ↑(LinearMap.IsSymmetric.diagonalization hT) v μ :=\n\n/-- Every self-adjoint operator on an inner product space is symmetric. -/\ntheorem ∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  [inst_3 : CompleteSpace E] {A : E →L[𝕜] E}, IsSelfAdjoint A → LinearMap.IsSymmetric ↑A :=\n\n/-- An operator `T` on an inner product space is symmetric if and only if it is\n`LinearMap.IsSelfAdjoint` with respect to the sesquilinear form given by the inner product. -/\ntheorem ∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  (T : E →ₗ[𝕜] E), LinearMap.IsSymmetric T ↔ LinearMap.IsSelfAdjoint sesqFormOfInner T :=\n\n/-- The eigenspaces of a self-adjoint operator are mutually orthogonal. -/\ntheorem ∀ {𝕜 : Type u_1} [inst : IsROrC 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  {T : E →ₗ[𝕜] E},\n  LinearMap.IsSymmetric T →\n    OrthogonalFamily 𝕜 (fun μ => { x // x ∈ Module.End.eigenspace T μ }) fun μ =>\n      Submodule.subtypeₗᵢ (Module.End.eigenspace T μ) :=\n\n/-- A self-adjoint operator preserves orthogonal complements of its eigenspaces. -/\ntheorem ∀ {𝕜 : Type u_2} [inst : IsROrC 𝕜] {E : Type u_1} [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  {T : E →ₗ[𝕜] E},\n  LinearMap.IsSymmetric T → ∀ (μ : 𝕜) (v : E), v ∈ (Module.End.eigenspace T μ)ᗮ → ↑T v ∈ (Module.End.eigenspace T μ)ᗮ :=\n\n/-- A linear operator on a complex inner product space is symmetric precisely when\n`⟪T v, v⟫_ℂ` is real for all v. -/\ntheorem ∀ {V : Type u_1} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℂ V] (T : V →ₗ[ℂ] V),\n  LinearMap.IsSymmetric T ↔ ∀ (v : V), ↑(starRingEnd ℂ) (inner (↑T v) v) = inner (↑T v) v :=\n\n/-- The mutual orthogonal complement of the eigenspaces of a self-adjoint operator on a\nfinite-dimensional inner product space is trivial. -/\ntheorem ∀ {𝕜 : Type u_2} [inst : IsROrC 𝕜] {E : Type u_1} [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  {T : E →ₗ[𝕜] E},\n  LinearMap.IsSymmetric T → ∀ [inst_3 : FiniteDimensional 𝕜 E], (⨆ (μ : 𝕜), Module.End.eigenspace T μ)ᗮ = ⊥ :=\n\n/-- The mutual orthogonal complement of the eigenspaces of a self-adjoint operator on an inner\nproduct space is an invariant subspace of the operator. -/\ntheorem ∀ {𝕜 : Type u_2} [inst : IsROrC 𝕜] {E : Type u_1} [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  {T : E →ₗ[𝕜] E},\n  LinearMap.IsSymmetric T →\n    ∀ ⦃v : E⦄, v ∈ (⨆ (μ : 𝕜), Module.End.eigenspace T μ)ᗮ → ↑T v ∈ (⨆ (μ : 𝕜), Module.End.eigenspace T μ)ᗮ :=\n\n/-- Two inseparable points in a T₀ space are equal. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [self : T0Space α] ⦃x y : α⦄, Inseparable x y → x = y :=\n\n/-- The eigenvalues of a self-adjoint operator are real. -/\ntheorem ∀ {𝕜 : Type u_1} [inst : IsROrC 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  {T : E →ₗ[𝕜] E}, LinearMap.IsSymmetric T → ∀ {μ : 𝕜}, Module.End.HasEigenvalue T μ → ↑(starRingEnd 𝕜) μ = μ :=\n\n/-- The orthogonal projection is self-adjoint. -/\ntheorem ∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  [inst_3 : CompleteSpace E] (U : Submodule 𝕜 E) [inst_4 : CompleteSpace { x // x ∈ U }],\n  IsSelfAdjoint (ContinuousLinearMap.comp (Submodule.subtypeL U) (orthogonalProjection U)) :=\n\n/-- The inner product on an inner product space of dimension 2 can be evaluated in terms\nof a complex-number representation of the space. -/\ntheorem ∀ {G : Type u_1} [inst : NormedAddCommGroup G] [inst_1 : InnerProductSpace ℝ G] (f : G ≃ₗᵢ[ℝ] ℂ) (x y : G),\n  inner x y = (↑(starRingEnd ℂ) (↑f x) * ↑f y).re :=\n\n/-- A continuous linear operator is self-adjoint iff it is equal to its adjoint. -/\ntheorem ∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  [inst_3 : FiniteDimensional 𝕜 E] {A : E →ₗ[𝕜] E}, IsSelfAdjoint A ↔ ↑LinearMap.adjoint A = A :=\n\n/-- The area form on an oriented real inner product space of dimension 2 can be evaluated in terms\nof a complex-number representation of the space. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : InnerProductSpace ℝ E]\n  [inst_2 : Fact (FiniteDimensional.finrank ℝ E = 2)] (o : Orientation ℝ E (Fin 2)) (f : E ≃ₗᵢ[ℝ] ℂ),\n  ↑(Orientation.map (Fin 2) f.toLinearEquiv) o = Complex.orientation →\n    ∀ (x y : E), ↑(↑(Orientation.areaForm o) x) y = (↑(starRingEnd ℂ) (↑f x) * ↑f y).im :=\n\n/-- The eigenspaces of a self-adjoint operator on a finite-dimensional inner product space `E` gives\nan internal direct sum decomposition of `E`. -/\ntheorem ∀ {𝕜 : Type u_1} [inst : IsROrC 𝕜] [dec_𝕜 : DecidableEq 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E]\n  [inst_2 : InnerProductSpace 𝕜 E] {T : E →ₗ[𝕜] E},\n  LinearMap.IsSymmetric T →\n    ∀ [inst_3 : FiniteDimensional 𝕜 E], DirectSum.IsInternal fun μ => Module.End.eigenspace T (↑T μ) :=\n\n/-- A `T₅` space is a `T₄` space. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : T5Space α], NormalSpace α :=\n\n/-- The spectrum of a selfadjoint is real -/\ntheorem ∀ {A : Type u_1} [inst : NormedRing A] [inst_1 : NormedAlgebra ℂ A] [inst_2 : CompleteSpace A] [inst_3 : StarRing A]\n  [inst_4 : CstarRing A] [inst_5 : StarModule ℂ A] {a : A},\n  IsSelfAdjoint a → spectrum ℂ a = Complex.ofReal' ∘ Complex.re '' spectrum ℂ a :=\n\n/-- A subspace of a `T₅` space is a `T₅` space. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : T5Space α] {p : α → Prop}, T5Space { x // p x } :=\n\n/-- The rotation by 90 degrees on an oriented real inner product space of dimension 2 can be\nevaluated in terms of a complex-number representation of the space. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : InnerProductSpace ℝ E]\n  [inst_2 : Fact (FiniteDimensional.finrank ℝ E = 2)] (o : Orientation ℝ E (Fin 2)) (f : E ≃ₗᵢ[ℝ] ℂ),\n  ↑(Orientation.map (Fin 2) f.toLinearEquiv) o = Complex.orientation →\n    ∀ (x : E), ↑f (↑(Orientation.rightAngleRotation o) x) = Complex.I * ↑f x :=\n\n/-- Suppose `V` is a complex inner-product space and `T ∈ L(V)` is a normal operator such that `T^9 = T^8`. Prove that `T` is self-adjoint and `T^2 = T`. -/\ntheorem", "choices": ["forall {V : Type u_1} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℂ V],\n  ∀ {T : V →ₗ[ℂ] V}, LinearMap.IsNormal T → T ^ 9 = T ^ 8 → IsSelfAdjoint T ∧ T ^ 2 = T ", "forall {V : Type u_1} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℂ V] (T : V →ₗ[ℂ] V),\n  LinearMap.IsNormal T → T ^ 9 = T ^ 8 → IsSelfAdjoint T ∧ T ^ 2 = T ", "∀ {V : Type u_1} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℂ V] {T : V →ₗ[ℂ] V},\n  LinearMap.IsNormal T → T^9 = T^8 → IsSelfAdjoint T ∧ T^2 = T ", "∀ {V : Type u_1} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℂ V] {T : V →ₗ[ℂ] V},\n  LinearMap.IsNormal T → T ^ 9 = T ^ 8 → IsSelfAdjoint T ∧ T ^ 2 = T ", "∀ {𝕜 : Type u_1} [inst : IsROrC 𝕜] {V : Type u_2} [inst_1 : NormedAddCommGroup V] [inst_2 : InnerProductSpace 𝕜 V]\n  {T : V →ₗ[𝕜] V},\n  LinearMap.IsNormal T →\n  (T ^ 9 = T ^ 8) →\n    (IsSelfAdjoint T ∧ T ^ 2 = T) ", "forall {V : Type u_1} [inst : InnerProductSpace ℂ V] {T : V →ₗ[ℂ] V},\n  LinearMap.IsNormal T → T^9 = T^8 → IsSelfAdjoint T ∧ T^2 = T ", "forall {V : Type u_1} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℂ V] (T : V →ₗ[ℂ] V),\n  LinearMap.IsNormal T → (T ^ 9 = T ^ 8) → IsSelfAdjoint T ∧ (T ^ 2 = T) ", "∀ {V : Type u_1} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℂ V] (T : V →ₗ[ℂ] V),\n  LinearMap.IsNormal T → T ^ 9 = T ^ 8 → LinearMap.IsSelfAdjoint T ∧ T ^ 2 = T ", "∀ {V : Type u_1} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℂ V] (T : V →ₗ[ℂ] V),\n  LinearMap.IsNormal T → T ^ 9 = T ^ 8 → IsSelfAdjoint T ∧ T ^ 2 = T ", "∀ {V : Type u_1} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℂ V] (T : V →ₗ[ℂ] V),\n  LinearMap.IsNormal T → T ^ 9 = T ^ 8 → IsSelfAdjoint T ∧ T ^ 2 = T "]}
{"docString": "Suppose `T ∈ L(V)` is self-adjoint, `λ ∈ F`, and `ε > 0`. Prove that if there exists `v ∈ V` such that `||v|| = 1` and `||T v - λ v|| < ε`, then `T` has an eigenvalue `λ'` such that `|λ - λ'| < ε`.", "prompts": "[{\"theorem\":\n  \"∀ {𝕜 : Type u_2} [inst : IsROrC 𝕜] {E : Type u_1} [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\\n  [inst_3 : CompleteSpace E] {T : E →L[𝕜] E},\\n  IsSelfAdjoint T →\\n    ∀ {x₀ : E},\\n      x₀ ≠ 0 →\\n        IsMinOn (ContinuousLinearMap.reApplyInnerSelf T) (Metric.sphere 0 ‖x₀‖) x₀ →\\n          Module.End.HasEigenvector (↑T) (↑(⨅ (x : { x // x ≠ 0 }), ContinuousLinearMap.rayleighQuotient T ↑x)) x₀\",\n  \"isProp\": true,\n  \"docString\":\n  \"For a self-adjoint operator `T`, a minimum of the Rayleigh quotient of `T` on a sphere centred\\nat the origin is an eigenvector of `T`, with eigenvalue the global infimum of the Rayleigh\\nquotient. \"},\n {\"theorem\":\n  \"∀ {M : Type u_1} [inst : SeminormedAddCommGroup M] (S : AddSubgroup M) (m : M) {ε : ℝ},\\n  0 < ε → ∃ s, s ∈ S ∧ ‖m + s‖ < ‖↑(QuotientAddGroup.mk' S) m‖ + ε\",\n  \"isProp\": true,\n  \"docString\":\n  \"For any `m : M` and any `0 < ε`, there is `s ∈ S` such that `‖m + s‖ < ‖mk' S m‖ + ε`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} [inst : IsROrC 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\\n  {T : E →ₗ[𝕜] E}, LinearMap.IsSymmetric T → ∀ {μ : 𝕜}, Module.End.HasEigenvalue T μ → ↑(starRingEnd 𝕜) μ = μ\",\n  \"isProp\": true,\n  \"docString\": \"The eigenvalues of a self-adjoint operator are real. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] (Λ : BoundedContinuousFunction X NNReal →ₗ[NNReal] NNReal)\\n  (K : TopologicalSpace.Compacts X) {ε : NNReal},\\n  0 < ε → ∃ f, (∀ (x : X), x ∈ K → 1 ≤ ↑f x) ∧ ↑Λ f < rieszContentAux Λ K + ε\",\n  \"isProp\": true,\n  \"docString\":\n  \"The Riesz content can be approximated arbitrarily well by evaluating the positive linear\\nfunctional on test functions: for any `ε > 0`, there exists a bounded continuous nonnegative\\nfunction f on X such that `f ≥ 1` on K and such that `λ(K) ≤ Λ f < λ(K) + ε`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_2} [inst : IsROrC 𝕜] {E : Type u_1} [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\\n  [inst_3 : CompleteSpace E] {T : E →L[𝕜] E},\\n  IsSelfAdjoint T →\\n    ∀ {x₀ : E},\\n      x₀ ≠ 0 →\\n        IsLocalExtrOn (ContinuousLinearMap.reApplyInnerSelf T) (Metric.sphere 0 ‖x₀‖) x₀ →\\n          Module.End.HasEigenvector (↑T) (↑(ContinuousLinearMap.rayleighQuotient T x₀)) x₀\",\n  \"isProp\": true,\n  \"docString\":\n  \"For a self-adjoint operator `T`, a local extremum of the Rayleigh quotient of `T` on a sphere\\ncentred at the origin is an eigenvector of `T`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} [inst : IsROrC 𝕜] [dec_𝕜 : DecidableEq 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : InnerProductSpace 𝕜 E] {T : E →ₗ[𝕜] E} (hT : LinearMap.IsSymmetric T) [inst_3 : FiniteDimensional 𝕜 E]\\n  {n : ℕ} (hn : FiniteDimensional.finrank 𝕜 E = n) (v : E) (i : Fin n),\\n  ↑(LinearMap.IsSymmetric.eigenvectorBasis hT hn).repr (↑T v) i =\\n    ↑(LinearMap.IsSymmetric.eigenvalues hT hn i) * ↑(LinearMap.IsSymmetric.eigenvectorBasis hT hn).repr v i\",\n  \"isProp\": true,\n  \"docString\":\n  \"*Diagonalization theorem*, *spectral theorem*; version 2: A self-adjoint operator `T` on a\\nfinite-dimensional inner product space `E` acts diagonally on the identification of `E` with\\nEuclidean space induced by an orthonormal basis of eigenvectors of `T`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\\n  [inst_3 : FiniteDimensional 𝕜 E] {A : E →ₗ[𝕜] E}, IsSelfAdjoint A ↔ ↑LinearMap.adjoint A = A\",\n  \"isProp\": true,\n  \"docString\":\n  \"A continuous linear operator is self-adjoint iff it is equal to its adjoint. \"},\n {\"theorem\":\n  \"∀ {M : Type u_1} [inst : SeminormedAddCommGroup M] {S : AddSubgroup M} (x : M ⧸ S) {ε : ℝ},\\n  0 < ε → ∃ m, ↑(QuotientAddGroup.mk' S) m = x ∧ ‖m‖ < ‖x‖ + ε\",\n  \"isProp\": true,\n  \"docString\":\n  \"For any `x : M ⧸ S` and any `0 < ε`, there is `m : M` such that `mk' S m = x`\\nand `‖m‖ < ‖x‖ + ε`. \"},\n {\"theorem\":\n  \"∀ {R : Type u_2} {A : Type u_1} [inst : CommSemiring R] [inst_1 : Semiring A] [inst_2 : Algebra R A]\\n  ⦃f g : DualNumber R →ₐ[R] A⦄, ↑f DualNumber.eps = ↑g DualNumber.eps → f = g\",\n  \"isProp\": true,\n  \"docString\":\n  \"For two algebra morphisms out of `R[ε]` to agree, it suffices for them to agree on `ε`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_2} [inst : IsROrC 𝕜] {E : Type u_1} [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\\n  [inst_3 : CompleteSpace E] {T : E →L[𝕜] E},\\n  IsSelfAdjoint T →\\n    ∀ {x₀ : E},\\n      x₀ ≠ 0 →\\n        IsMaxOn (ContinuousLinearMap.reApplyInnerSelf T) (Metric.sphere 0 ‖x₀‖) x₀ →\\n          Module.End.HasEigenvector (↑T) (↑(⨆ (x : { x // x ≠ 0 }), ContinuousLinearMap.rayleighQuotient T ↑x)) x₀\",\n  \"isProp\": true,\n  \"docString\":\n  \"For a self-adjoint operator `T`, a maximum of the Rayleigh quotient of `T` on a sphere centred\\nat the origin is an eigenvector of `T`, with eigenvalue the global supremum of the Rayleigh\\nquotient. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {m : MeasurableSpace α} (μ ν : MeasureTheory.Measure α) [inst : MeasureTheory.IsFiniteMeasure μ]\\n  [inst_1 : MeasureTheory.IsFiniteMeasure ν],\\n  ¬MeasureTheory.Measure.MutuallySingular μ ν →\\n    ∃ ε,\\n      0 < ε ∧\\n        ∃ E,\\n          MeasurableSet E ∧\\n            0 < ↑↑ν E ∧\\n              MeasureTheory.VectorMeasure.restrict 0 E ≤\\n                MeasureTheory.VectorMeasure.restrict\\n                  (MeasureTheory.Measure.toSignedMeasure μ - MeasureTheory.Measure.toSignedMeasure (ε • ν)) E\",\n  \"isProp\": true,\n  \"docString\":\n  \"If two finite measures `μ` and `ν` are not mutually singular, there exists some `ε > 0` and\\na measurable set `E`, such that `ν(E) > 0` and `E` is positive with respect to `μ - εν`.\\n\\nThis lemma is useful for the Lebesgue decomposition theorem. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} [inst : IsROrC 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\\n  [inst_3 : FiniteDimensional 𝕜 E] [_i : Nontrivial E] {T : E →ₗ[𝕜] E},\\n  LinearMap.IsSymmetric T →\\n    Module.End.HasEigenvalue T ↑(⨅ (x : { x // x ≠ 0 }), ↑IsROrC.re (inner (↑T ↑x) ↑x) / ‖↑x‖ ^ 2)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The infimum of the Rayleigh quotient of a symmetric operator `T` on a nontrivial\\nfinite-dimensional vector space is an eigenvalue for that operator. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} [inst : IsROrC 𝕜] [dec_𝕜 : DecidableEq 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : InnerProductSpace 𝕜 E] {T : E →ₗ[𝕜] E} (hT : LinearMap.IsSymmetric T) [inst_3 : FiniteDimensional 𝕜 E]\\n  (v : E) (μ : Module.End.Eigenvalues T),\\n  ↑(LinearMap.IsSymmetric.diagonalization hT) (↑T v) μ = ↑T μ • ↑(LinearMap.IsSymmetric.diagonalization hT) v μ\",\n  \"isProp\": true,\n  \"docString\":\n  \"*Diagonalization theorem*, *spectral theorem*; version 1: A self-adjoint operator `T` on a\\nfinite-dimensional inner product space `E` acts diagonally on the decomposition of `E` into the\\ndirect sum of the eigenspaces of `T`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} [inst : IsROrC 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\\n  [inst_3 : FiniteDimensional 𝕜 E] [_i : Nontrivial E] {T : E →ₗ[𝕜] E},\\n  LinearMap.IsSymmetric T →\\n    Module.End.HasEigenvalue T ↑(⨆ (x : { x // x ≠ 0 }), ↑IsROrC.re (inner (↑T ↑x) ↑x) / ‖↑x‖ ^ 2)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The supremum of the Rayleigh quotient of a symmetric operator `T` on a nontrivial\\nfinite-dimensional vector space is an eigenvalue for that operator. \"},\n {\"theorem\": \"∀ {x : ℝ}, Liouville x → Transcendental ℤ x\",\n  \"isProp\": true,\n  \"docString\": \"**Liouville's Theorem** \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} [inst : IsROrC 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\\n  {T : E →ₗ[𝕜] E},\\n  LinearMap.IsSymmetric T →\\n    OrthogonalFamily 𝕜 (fun μ => { x // x ∈ Module.End.eigenspace T μ }) fun μ =>\\n      Submodule.subtypeₗᵢ (Module.End.eigenspace T μ)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The eigenspaces of a self-adjoint operator are mutually orthogonal. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] [inst_2 : CompleteSpace E] {v : ℝ → E → E}\\n  {tMin t₀ tMax : ℝ} (x₀ : E) {C R : ℝ} {L : NNReal},\\n  IsPicardLindelof v tMin t₀ tMax x₀ L R C →\\n    ∃ f, f t₀ = x₀ ∧ ∀ (t : ℝ), t ∈ Set.Icc tMin tMax → HasDerivWithinAt f (v t (f t)) (Set.Icc tMin tMax) t\",\n  \"isProp\": true,\n  \"docString\": \"Picard-Lindelöf (Cauchy-Lipschitz) theorem. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] [inst_2 : FiniteDimensional ℝ E] {s : Set E}\\n  {f : E → E} [inst_3 : MeasurableSpace E] [inst_4 : BorelSpace E] (μ : MeasureTheory.Measure E)\\n  [inst_5 : MeasureTheory.Measure.IsAddHaarMeasure μ] {A : E →L[ℝ] E} {δ : NNReal},\\n  ApproximatesLinearOn f A s δ →\\n    MeasurableSet s →\\n      ∀ (f' : E → E →L[ℝ] E),\\n        (∀ (x : E), x ∈ s → HasFDerivWithinAt f (f' x) s x) →\\n          ∀ᵐ (x : E) ∂MeasureTheory.Measure.restrict μ s, ‖f' x - A‖₊ ≤ δ\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a differentiable function `f` is approximated by a linear map `A` on a set `s`, up to `δ`,\\nthen at almost every `x` in `s` one has `‖f' x - A‖ ≤ δ`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_2} [inst : IsROrC 𝕜] {E : Type u_1} [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\\n  {T : E →ₗ[𝕜] E},\\n  LinearMap.IsSymmetric T → ∀ (μ : 𝕜) (v : E), v ∈ (Module.End.eigenspace T μ)ᗮ → ↑T v ∈ (Module.End.eigenspace T μ)ᗮ\",\n  \"isProp\": true,\n  \"docString\":\n  \"A self-adjoint operator preserves orthogonal complements of its eigenspaces. \"},\n {\"theorem\":\n  \"∀ {K : Type u_1} {v : K} {n : ℕ} [inst : LinearOrderedField K] [inst_1 : FloorRing K],\\n  ¬GeneralizedContinuedFraction.TerminatedAt (GeneralizedContinuedFraction.of v) n →\\n    |v - GeneralizedContinuedFraction.convergents (GeneralizedContinuedFraction.of v) n| ≤\\n      1 /\\n        (GeneralizedContinuedFraction.denominators (GeneralizedContinuedFraction.of v) n *\\n          GeneralizedContinuedFraction.denominators (GeneralizedContinuedFraction.of v) (n + 1))\",\n  \"isProp\": true,\n  \"docString\": \"Shows that `|v - Aₙ / Bₙ| ≤ 1 / (Bₙ * Bₙ₊₁)`. \"}]\n", "prompt_cons": "/-- For a self-adjoint operator `T`, a minimum of the Rayleigh quotient of `T` on a sphere centred\nat the origin is an eigenvector of `T`, with eigenvalue the global infimum of the Rayleigh\nquotient. -/\ntheorem ∀ {𝕜 : Type u_2} [inst : IsROrC 𝕜] {E : Type u_1} [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  [inst_3 : CompleteSpace E] {T : E →L[𝕜] E},\n  IsSelfAdjoint T →\n    ∀ {x₀ : E},\n      x₀ ≠ 0 →\n        IsMinOn (ContinuousLinearMap.reApplyInnerSelf T) (Metric.sphere 0 ‖x₀‖) x₀ →\n          Module.End.HasEigenvector (↑T) (↑(⨅ (x : { x // x ≠ 0 }), ContinuousLinearMap.rayleighQuotient T ↑x)) x₀ :=\n\n/-- For any `m : M` and any `0 < ε`, there is `s ∈ S` such that `‖m + s‖ < ‖mk' S m‖ + ε`. -/\ntheorem ∀ {M : Type u_1} [inst : SeminormedAddCommGroup M] (S : AddSubgroup M) (m : M) {ε : ℝ},\n  0 < ε → ∃ s, s ∈ S ∧ ‖m + s‖ < ‖↑(QuotientAddGroup.mk' S) m‖ + ε :=\n\n/-- The eigenvalues of a self-adjoint operator are real. -/\ntheorem ∀ {𝕜 : Type u_1} [inst : IsROrC 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  {T : E →ₗ[𝕜] E}, LinearMap.IsSymmetric T → ∀ {μ : 𝕜}, Module.End.HasEigenvalue T μ → ↑(starRingEnd 𝕜) μ = μ :=\n\n/-- The Riesz content can be approximated arbitrarily well by evaluating the positive linear\nfunctional on test functions: for any `ε > 0`, there exists a bounded continuous nonnegative\nfunction f on X such that `f ≥ 1` on K and such that `λ(K) ≤ Λ f < λ(K) + ε`. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X] (Λ : BoundedContinuousFunction X NNReal →ₗ[NNReal] NNReal)\n  (K : TopologicalSpace.Compacts X) {ε : NNReal},\n  0 < ε → ∃ f, (∀ (x : X), x ∈ K → 1 ≤ ↑f x) ∧ ↑Λ f < rieszContentAux Λ K + ε :=\n\n/-- For a self-adjoint operator `T`, a local extremum of the Rayleigh quotient of `T` on a sphere\ncentred at the origin is an eigenvector of `T`. -/\ntheorem ∀ {𝕜 : Type u_2} [inst : IsROrC 𝕜] {E : Type u_1} [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  [inst_3 : CompleteSpace E] {T : E →L[𝕜] E},\n  IsSelfAdjoint T →\n    ∀ {x₀ : E},\n      x₀ ≠ 0 →\n        IsLocalExtrOn (ContinuousLinearMap.reApplyInnerSelf T) (Metric.sphere 0 ‖x₀‖) x₀ →\n          Module.End.HasEigenvector (↑T) (↑(ContinuousLinearMap.rayleighQuotient T x₀)) x₀ :=\n\n/-- *Diagonalization theorem*, *spectral theorem*; version 2: A self-adjoint operator `T` on a\nfinite-dimensional inner product space `E` acts diagonally on the identification of `E` with\nEuclidean space induced by an orthonormal basis of eigenvectors of `T`. -/\ntheorem ∀ {𝕜 : Type u_1} [inst : IsROrC 𝕜] [dec_𝕜 : DecidableEq 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E]\n  [inst_2 : InnerProductSpace 𝕜 E] {T : E →ₗ[𝕜] E} (hT : LinearMap.IsSymmetric T) [inst_3 : FiniteDimensional 𝕜 E]\n  {n : ℕ} (hn : FiniteDimensional.finrank 𝕜 E = n) (v : E) (i : Fin n),\n  ↑(LinearMap.IsSymmetric.eigenvectorBasis hT hn).repr (↑T v) i =\n    ↑(LinearMap.IsSymmetric.eigenvalues hT hn i) * ↑(LinearMap.IsSymmetric.eigenvectorBasis hT hn).repr v i :=\n\n/-- A continuous linear operator is self-adjoint iff it is equal to its adjoint. -/\ntheorem ∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  [inst_3 : FiniteDimensional 𝕜 E] {A : E →ₗ[𝕜] E}, IsSelfAdjoint A ↔ ↑LinearMap.adjoint A = A :=\n\n/-- For any `x : M ⧸ S` and any `0 < ε`, there is `m : M` such that `mk' S m = x`\nand `‖m‖ < ‖x‖ + ε`. -/\ntheorem ∀ {M : Type u_1} [inst : SeminormedAddCommGroup M] {S : AddSubgroup M} (x : M ⧸ S) {ε : ℝ},\n  0 < ε → ∃ m, ↑(QuotientAddGroup.mk' S) m = x ∧ ‖m‖ < ‖x‖ + ε :=\n\n/-- For two algebra morphisms out of `R[ε]` to agree, it suffices for them to agree on `ε`. -/\ntheorem ∀ {R : Type u_2} {A : Type u_1} [inst : CommSemiring R] [inst_1 : Semiring A] [inst_2 : Algebra R A]\n  ⦃f g : DualNumber R →ₐ[R] A⦄, ↑f DualNumber.eps = ↑g DualNumber.eps → f = g :=\n\n/-- For a self-adjoint operator `T`, a maximum of the Rayleigh quotient of `T` on a sphere centred\nat the origin is an eigenvector of `T`, with eigenvalue the global supremum of the Rayleigh\nquotient. -/\ntheorem ∀ {𝕜 : Type u_2} [inst : IsROrC 𝕜] {E : Type u_1} [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  [inst_3 : CompleteSpace E] {T : E →L[𝕜] E},\n  IsSelfAdjoint T →\n    ∀ {x₀ : E},\n      x₀ ≠ 0 →\n        IsMaxOn (ContinuousLinearMap.reApplyInnerSelf T) (Metric.sphere 0 ‖x₀‖) x₀ →\n          Module.End.HasEigenvector (↑T) (↑(⨆ (x : { x // x ≠ 0 }), ContinuousLinearMap.rayleighQuotient T ↑x)) x₀ :=\n\n/-- If two finite measures `μ` and `ν` are not mutually singular, there exists some `ε > 0` and\na measurable set `E`, such that `ν(E) > 0` and `E` is positive with respect to `μ - εν`.\n\nThis lemma is useful for the Lebesgue decomposition theorem. -/\ntheorem ∀ {α : Type u_1} {m : MeasurableSpace α} (μ ν : MeasureTheory.Measure α) [inst : MeasureTheory.IsFiniteMeasure μ]\n  [inst_1 : MeasureTheory.IsFiniteMeasure ν],\n  ¬MeasureTheory.Measure.MutuallySingular μ ν →\n    ∃ ε,\n      0 < ε ∧\n        ∃ E,\n          MeasurableSet E ∧\n            0 < ↑↑ν E ∧\n              MeasureTheory.VectorMeasure.restrict 0 E ≤\n                MeasureTheory.VectorMeasure.restrict\n                  (MeasureTheory.Measure.toSignedMeasure μ - MeasureTheory.Measure.toSignedMeasure (ε • ν)) E :=\n\n/-- The infimum of the Rayleigh quotient of a symmetric operator `T` on a nontrivial\nfinite-dimensional vector space is an eigenvalue for that operator. -/\ntheorem ∀ {𝕜 : Type u_1} [inst : IsROrC 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  [inst_3 : FiniteDimensional 𝕜 E] [_i : Nontrivial E] {T : E →ₗ[𝕜] E},\n  LinearMap.IsSymmetric T →\n    Module.End.HasEigenvalue T ↑(⨅ (x : { x // x ≠ 0 }), ↑IsROrC.re (inner (↑T ↑x) ↑x) / ‖↑x‖ ^ 2) :=\n\n/-- *Diagonalization theorem*, *spectral theorem*; version 1: A self-adjoint operator `T` on a\nfinite-dimensional inner product space `E` acts diagonally on the decomposition of `E` into the\ndirect sum of the eigenspaces of `T`. -/\ntheorem ∀ {𝕜 : Type u_1} [inst : IsROrC 𝕜] [dec_𝕜 : DecidableEq 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E]\n  [inst_2 : InnerProductSpace 𝕜 E] {T : E →ₗ[𝕜] E} (hT : LinearMap.IsSymmetric T) [inst_3 : FiniteDimensional 𝕜 E]\n  (v : E) (μ : Module.End.Eigenvalues T),\n  ↑(LinearMap.IsSymmetric.diagonalization hT) (↑T v) μ = ↑T μ • ↑(LinearMap.IsSymmetric.diagonalization hT) v μ :=\n\n/-- The supremum of the Rayleigh quotient of a symmetric operator `T` on a nontrivial\nfinite-dimensional vector space is an eigenvalue for that operator. -/\ntheorem ∀ {𝕜 : Type u_1} [inst : IsROrC 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  [inst_3 : FiniteDimensional 𝕜 E] [_i : Nontrivial E] {T : E →ₗ[𝕜] E},\n  LinearMap.IsSymmetric T →\n    Module.End.HasEigenvalue T ↑(⨆ (x : { x // x ≠ 0 }), ↑IsROrC.re (inner (↑T ↑x) ↑x) / ‖↑x‖ ^ 2) :=\n\n/-- **Liouville's Theorem** -/\ntheorem ∀ {x : ℝ}, Liouville x → Transcendental ℤ x :=\n\n/-- The eigenspaces of a self-adjoint operator are mutually orthogonal. -/\ntheorem ∀ {𝕜 : Type u_1} [inst : IsROrC 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  {T : E →ₗ[𝕜] E},\n  LinearMap.IsSymmetric T →\n    OrthogonalFamily 𝕜 (fun μ => { x // x ∈ Module.End.eigenspace T μ }) fun μ =>\n      Submodule.subtypeₗᵢ (Module.End.eigenspace T μ) :=\n\n/-- Picard-Lindelöf (Cauchy-Lipschitz) theorem. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] [inst_2 : CompleteSpace E] {v : ℝ → E → E}\n  {tMin t₀ tMax : ℝ} (x₀ : E) {C R : ℝ} {L : NNReal},\n  IsPicardLindelof v tMin t₀ tMax x₀ L R C →\n    ∃ f, f t₀ = x₀ ∧ ∀ (t : ℝ), t ∈ Set.Icc tMin tMax → HasDerivWithinAt f (v t (f t)) (Set.Icc tMin tMax) t :=\n\n/-- If a differentiable function `f` is approximated by a linear map `A` on a set `s`, up to `δ`,\nthen at almost every `x` in `s` one has `‖f' x - A‖ ≤ δ`. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] [inst_2 : FiniteDimensional ℝ E] {s : Set E}\n  {f : E → E} [inst_3 : MeasurableSpace E] [inst_4 : BorelSpace E] (μ : MeasureTheory.Measure E)\n  [inst_5 : MeasureTheory.Measure.IsAddHaarMeasure μ] {A : E →L[ℝ] E} {δ : NNReal},\n  ApproximatesLinearOn f A s δ →\n    MeasurableSet s →\n      ∀ (f' : E → E →L[ℝ] E),\n        (∀ (x : E), x ∈ s → HasFDerivWithinAt f (f' x) s x) →\n          ∀ᵐ (x : E) ∂MeasureTheory.Measure.restrict μ s, ‖f' x - A‖₊ ≤ δ :=\n\n/-- A self-adjoint operator preserves orthogonal complements of its eigenspaces. -/\ntheorem ∀ {𝕜 : Type u_2} [inst : IsROrC 𝕜] {E : Type u_1} [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  {T : E →ₗ[𝕜] E},\n  LinearMap.IsSymmetric T → ∀ (μ : 𝕜) (v : E), v ∈ (Module.End.eigenspace T μ)ᗮ → ↑T v ∈ (Module.End.eigenspace T μ)ᗮ :=\n\n/-- Shows that `|v - Aₙ / Bₙ| ≤ 1 / (Bₙ * Bₙ₊₁)`. -/\ntheorem ∀ {K : Type u_1} {v : K} {n : ℕ} [inst : LinearOrderedField K] [inst_1 : FloorRing K],\n  ¬GeneralizedContinuedFraction.TerminatedAt (GeneralizedContinuedFraction.of v) n →\n    |v - GeneralizedContinuedFraction.convergents (GeneralizedContinuedFraction.of v) n| ≤\n      1 /\n        (GeneralizedContinuedFraction.denominators (GeneralizedContinuedFraction.of v) n *\n          GeneralizedContinuedFraction.denominators (GeneralizedContinuedFraction.of v) (n + 1)) :=\n\n/-- Suppose `T ∈ L(V)` is self-adjoint, `λ ∈ F`, and `ε > 0`. Prove that if there exists `v ∈ V` such that `||v|| = 1` and `||T v - λ v|| < ε`, then `T` has an eigenvalue `λ'` such that `|λ - λ'| < ε`. -/\ntheorem", "choices": ["∀ {𝕜 : Type u_1} [inst : IsROrC 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  {T : E →ₗ[𝕜] E}, IsSelfAdjoint T →\n    ∀ (λ : 𝕜) (ε : ℝ), 0 < ε →\n      ∃ v, ∥v∥ = 1 ∧ ∥T v - λ • v∥ < ε →\n        ∃ λ', Module.End.HasEigenvalue T λ' ∧ |λ - λ'| < ε ", "∀ {𝕜 : Type u_1} [inst : IsROrC 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  {T : E →ₗ[𝕜] E},\n  IsSelfAdjoint T →\n    ∀ {λ : 𝕜} {ε : ℝ},\n      0 < ε →\n        ∃ (v : E),\n          ∥v∥ = 1 ∧ ∥T v - λ • v∥ < ε →\n            ∃ (μ : 𝕜), Module.End.HasEigenvalue T μ ∧ |λ - μ| < ε ", "∀ {𝕜 : Type u_1} [inst : IsROrC 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  {T : E →ₗ[𝕜] E} (hT : IsSelfAdjoint T) {λ : 𝕜} {ε : ℝ},\n  0 < ε →\n    ∃ v : E, ∥v∥ = 1 ∧ ∥T v - λ v∥ < ε →\n      ∃ λ' : 𝕜, Module.End.HasEigenvalue T λ' ∧ abs (λ - λ') < ε ", "∀ {𝕜 : Type u_1} [inst : IsROrC 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  {T : E →ₗ[𝕜] E},\n  LinearMap.IsSymmetric T →\n    ∀ {λ : 𝕜} {ε : ℝ}, 0 < ε →\n      (∃ v : E, ∥v∥ = 1 ∧ ∥↑T v - λ • v∥ < ε) →\n        ∃ λ', Module.End.HasEigenvalue T λ' ∧ abs (λ - λ') < ε ", "∀ {𝕜 : Type u_1} [inst : IsROrC 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  {T : E →ₗ[𝕜] E}, LinearMap.IsSymmetric T → ∀ {λ : 𝕜} {ε : ℝ},\n  0 < ε →\n    (∃ v : E, ∥v∥ = 1 ∧ ∥↑T v - λ • v∥ < ε) →\n      ∃ λ' : 𝕜, Module.End.HasEigenvalue T λ' ∧ |λ - λ'| < ε ", "∀ {𝕜 : Type u_1} [inst : IsROrC 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  {T : E →ₗ[𝕜] E}, LinearMap.IsSymmetric T →\n    ∀ (λ : 𝕜) (ε : ℝ),\n      0 < ε →\n        ∃ (v : E), ∥v∥ = 1 ∧ ∥T v - λ • v∥ < ε →\n          ∃ (λ' : 𝕜), Module.End.HasEigenvalue T λ' ∧ |λ - λ'| < ε ", "∀ {𝕜 : Type u_1} [inst : IsROrC 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  {T : E →ₗ[𝕜] E}, LinearMap.IsSymmetric T → ∀ (λ : 𝕜) (ε : ℝ), 0 < ε →\n    (∃ v : E, ∥v∥ = 1 ∧ ∥↑T v - λ • v∥ < ε) →\n      ∃ λ' : 𝕜, Eigenvalue T λ' ∧ |λ - λ'| < ε ", "∀ {𝕜 : Type u_1} [inst : IsROrC 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  {T : E →ₗ[𝕜] E},\n  LinearMap.IsSymmetric T →\n    ∀ (λ : 𝕜) (ε : ℝ), 0 < ε →\n      (∃ v : E, ∥v∥ = 1 ∧ ∥T v - λ • v∥ < ε) →\n        ∃ λ' : Module.End.Eigenvalues T, abs (λ - λ') < ε ", "∀ {𝕜 : Type u_2} [inst : IsROrC 𝕜] {E : Type u_1} [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  [inst_3 : CompleteSpace E] {T : E →L[𝕜] E},\n  IsSelfAdjoint T →\n    ∀ (λ : 𝕜) (ε : ℝ),\n      0 < ε →\n        (∃ v : E, ‖v‖ = 1 ∧ ∥↑T v - λ • v∥ < ε) →\n          ∃ λ', HasEigenvalue T λ' ∧ abs (λ - λ') < ε ", "∀ {𝕜 : Type u_1} [inst : IsROrC 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  {T : E →ₗ[𝕜] E} (hT : LinearMap.IsSymmetric T) (λ : 𝕜) {ε : ℝ},\n  0 < ε →\n    ∀ {v : E},\n      v ≠ 0 →\n        ∥v∥ = 1 →\n          ∥↑T v - λ • v∥ < ε →\n            ∃ λ', Module.End.HasEigenvalue T λ' ∧ abs (λ - λ') < ε "]}
{"docString": "For all odd `n` show that `8 | n^2 - 1`.", "prompts": "[{\"theorem\": \"∀ {n : ℕ}, n % 4 = 1 → (-1) ^ (n / 2) = 1\",\n  \"isProp\": true,\n  \"docString\": \"If `n % 4 = 1`, then `(-1)^(n/2) = 1`. \"},\n {\"theorem\": \"∀ {n : ℕ}, n % 4 = 3 → (-1) ^ (n / 2) = -1\",\n  \"isProp\": true,\n  \"docString\": \"If `n % 4 = 3`, then `(-1)^(n/2) = -1`. \"},\n {\"theorem\": \"∀ {n : ℤ}, n % 4 = 3 → ↑ZMod.χ₄ ↑n = -1\",\n  \"isProp\": true,\n  \"docString\": \"If `n % 4 = 3`, then `χ₄ n = -1`. \"},\n {\"theorem\":\n  \"∀ {p : ℕ} [inst : Fact (Nat.Prime p)], p ≠ 2 → (IsSquare (-2) ↔ p % 8 = 1 ∨ p % 8 = 3)\",\n  \"isProp\": true,\n  \"docString\":\n  \"`-2` is a square modulo an odd prime `p` iff `p` is congruent to `1` or `3` mod `8`. \"},\n {\"theorem\": \"∀ {n a : ℕ}, Even a → (Odd (n % a) ↔ Odd n)\",\n  \"isProp\": true,\n  \"docString\": \"If `a` is even, then `n` is odd iff `n % a` is odd. \"},\n {\"theorem\": \"∀ (n : ℤ), ↑ZMod.χ₈ ↑n = ↑ZMod.χ₈ ↑(n % 8)\",\n  \"isProp\": true,\n  \"docString\": \"The value of `χ₈ n`, for `n : ℤ`, depends only on `n % 8`. \"},\n {\"theorem\":\n  \"∀ {R : Type u} [inst : CommRing R] {R' : Type v} [inst_1 : CommRing R'] {χ : MulChar R R'},\\n  MulChar.IsQuadratic χ → ∀ {n : ℕ}, Odd n → χ ^ n = χ\",\n  \"isProp\": true,\n  \"docString\":\n  \"The `n`th power of a quadratic character is itself, when `n` is odd. \"},\n {\"theorem\": \"∀ {n a : ℕ}, Odd n → Even a → Odd (n % a)\",\n  \"isProp\": true,\n  \"docString\": \"If `n` is odd and `a` is even, then `n % a` is odd. \"},\n {\"theorem\": \"∀ {n : ℕ}, ↑(Nat.factorial (n - 1)) = -1 → n ≠ 1 → Nat.Prime n\",\n  \"isProp\": true,\n  \"docString\":\n  \"For `n ≠ 1`, `(n-1)!` is congruent to `-1` modulo `n` only if n is prime. \"},\n {\"theorem\": \"∀ {n : ℕ}, n % 4 = 1 → ↑ZMod.χ₄ ↑n = 1\",\n  \"isProp\": true,\n  \"docString\": \"If `n % 4 = 1`, then `χ₄ n = 1`. \"},\n {\"theorem\":\n  \"∀ {n x y : ℕ}, n = x ^ 2 + y ^ 2 → Nat.coprime x y → IsSquare (-1)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If the natural number `n` is a sum of two squares of coprime natural numbers, then\\n`-1` is a square modulo `n`. \"},\n {\"theorem\": \"∀ {n : ℕ}, IsSquare (-1) → ∃ x y, n = x ^ 2 + y ^ 2\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `-1` is a square modulo the natural number `n`, then `n` is a sum of two squares. \"},\n {\"theorem\": \"∀ {p n : ℕ}, Nat.Prime p → p ∣ n → IsSquare (-1) → p % 4 ≠ 3\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a prime `p` divides `n` such that `-1` is a square modulo `n`, then `p % 4 ≠ 3`. \"},\n {\"theorem\":\n  \"∀ {a b c : ℤ}, Fermat42 a b c → ∃ a0 b0 c0, Fermat42.Minimal a0 b0 c0 ∧ a0 % 2 = 1\",\n  \"isProp\": true,\n  \"docString\":\n  \"We can assume that a minimal solution to `a ^ 4 + b ^ 4 = c ^ 2` has `a` odd. \"},\n {\"theorem\": \"∀ (n : ℕ), ↑ZMod.χ₈ ↑n = ↑ZMod.χ₈ ↑(n % 8)\",\n  \"isProp\": true,\n  \"docString\": \"The value of `χ₈ n`, for `n : ℕ`, depends only on `n % 8`. \"},\n {\"theorem\": \"∀ {m n : ℕ}, Odd m → Odd n → qrSign m n ^ 2 = 1\",\n  \"isProp\": true,\n  \"docString\":\n  \"When `m` and `n` are odd, then the square of `qrSign m n` is `1`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [self : LinearOrderedCommGroupWithZero α] (n : ℕ) (a : α),\\n  LinearOrderedCommGroupWithZero.zpow (Int.negSucc n) a = (LinearOrderedCommGroupWithZero.zpow (↑(Nat.succ n)) a)⁻¹\",\n  \"isProp\": true,\n  \"docString\": \"`a ^ -(n + 1) = (a ^ (n + 1))⁻¹` \"},\n {\"theorem\": \"∀ {n a : ℕ}, Even a → (Even (n % a) ↔ Even n)\",\n  \"isProp\": true,\n  \"docString\": \"If `a` is even, then `n` is even iff `n % a` is even. \"},\n {\"theorem\": \"∀ {n : ℕ}, n ≠ 1 → (Nat.Prime n ↔ ↑(Nat.factorial (n - 1)) = -1)\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Wilson's Theorem**: For `n ≠ 1`, `(n-1)!` is congruent to `-1` modulo `n` iff n is prime. \"},\n {\"theorem\": \"∀ {n x y : ℤ}, n = x ^ 2 + y ^ 2 → IsCoprime x y → IsSquare (-1)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If the integer `n` is a sum of two squares of coprime integers,\\nthen `-1` is a square modulo `n`. \"}]\n", "prompt_cons": "/-- If `n % 4 = 1`, then `(-1)^(n/2) = 1`. -/\ntheorem ∀ {n : ℕ}, n % 4 = 1 → (-1) ^ (n / 2) = 1 :=\n\n/-- If `n % 4 = 3`, then `(-1)^(n/2) = -1`. -/\ntheorem ∀ {n : ℕ}, n % 4 = 3 → (-1) ^ (n / 2) = -1 :=\n\n/-- If `n % 4 = 3`, then `χ₄ n = -1`. -/\ntheorem ∀ {n : ℤ}, n % 4 = 3 → ↑ZMod.χ₄ ↑n = -1 :=\n\n/-- `-2` is a square modulo an odd prime `p` iff `p` is congruent to `1` or `3` mod `8`. -/\ntheorem ∀ {p : ℕ} [inst : Fact (Nat.Prime p)], p ≠ 2 → (IsSquare (-2) ↔ p % 8 = 1 ∨ p % 8 = 3) :=\n\n/-- If `a` is even, then `n` is odd iff `n % a` is odd. -/\ntheorem ∀ {n a : ℕ}, Even a → (Odd (n % a) ↔ Odd n) :=\n\n/-- The value of `χ₈ n`, for `n : ℤ`, depends only on `n % 8`. -/\ntheorem ∀ (n : ℤ), ↑ZMod.χ₈ ↑n = ↑ZMod.χ₈ ↑(n % 8) :=\n\n/-- The `n`th power of a quadratic character is itself, when `n` is odd. -/\ntheorem ∀ {R : Type u} [inst : CommRing R] {R' : Type v} [inst_1 : CommRing R'] {χ : MulChar R R'},\n  MulChar.IsQuadratic χ → ∀ {n : ℕ}, Odd n → χ ^ n = χ :=\n\n/-- If `n` is odd and `a` is even, then `n % a` is odd. -/\ntheorem ∀ {n a : ℕ}, Odd n → Even a → Odd (n % a) :=\n\n/-- For `n ≠ 1`, `(n-1)!` is congruent to `-1` modulo `n` only if n is prime. -/\ntheorem ∀ {n : ℕ}, ↑(Nat.factorial (n - 1)) = -1 → n ≠ 1 → Nat.Prime n :=\n\n/-- If `n % 4 = 1`, then `χ₄ n = 1`. -/\ntheorem ∀ {n : ℕ}, n % 4 = 1 → ↑ZMod.χ₄ ↑n = 1 :=\n\n/-- If the natural number `n` is a sum of two squares of coprime natural numbers, then\n`-1` is a square modulo `n`. -/\ntheorem ∀ {n x y : ℕ}, n = x ^ 2 + y ^ 2 → Nat.coprime x y → IsSquare (-1) :=\n\n/-- If `-1` is a square modulo the natural number `n`, then `n` is a sum of two squares. -/\ntheorem ∀ {n : ℕ}, IsSquare (-1) → ∃ x y, n = x ^ 2 + y ^ 2 :=\n\n/-- If a prime `p` divides `n` such that `-1` is a square modulo `n`, then `p % 4 ≠ 3`. -/\ntheorem ∀ {p n : ℕ}, Nat.Prime p → p ∣ n → IsSquare (-1) → p % 4 ≠ 3 :=\n\n/-- We can assume that a minimal solution to `a ^ 4 + b ^ 4 = c ^ 2` has `a` odd. -/\ntheorem ∀ {a b c : ℤ}, Fermat42 a b c → ∃ a0 b0 c0, Fermat42.Minimal a0 b0 c0 ∧ a0 % 2 = 1 :=\n\n/-- The value of `χ₈ n`, for `n : ℕ`, depends only on `n % 8`. -/\ntheorem ∀ (n : ℕ), ↑ZMod.χ₈ ↑n = ↑ZMod.χ₈ ↑(n % 8) :=\n\n/-- When `m` and `n` are odd, then the square of `qrSign m n` is `1`. -/\ntheorem ∀ {m n : ℕ}, Odd m → Odd n → qrSign m n ^ 2 = 1 :=\n\n/-- `a ^ -(n + 1) = (a ^ (n + 1))⁻¹` -/\ntheorem ∀ {α : Type u_1} [self : LinearOrderedCommGroupWithZero α] (n : ℕ) (a : α),\n  LinearOrderedCommGroupWithZero.zpow (Int.negSucc n) a = (LinearOrderedCommGroupWithZero.zpow (↑(Nat.succ n)) a)⁻¹ :=\n\n/-- If `a` is even, then `n` is even iff `n % a` is even. -/\ntheorem ∀ {n a : ℕ}, Even a → (Even (n % a) ↔ Even n) :=\n\n/-- **Wilson's Theorem**: For `n ≠ 1`, `(n-1)!` is congruent to `-1` modulo `n` iff n is prime. -/\ntheorem ∀ {n : ℕ}, n ≠ 1 → (Nat.Prime n ↔ ↑(Nat.factorial (n - 1)) = -1) :=\n\n/-- If the integer `n` is a sum of two squares of coprime integers,\nthen `-1` is a square modulo `n`. -/\ntheorem ∀ {n x y : ℤ}, n = x ^ 2 + y ^ 2 → IsCoprime x y → IsSquare (-1) :=\n\n/-- For all odd `n` show that `8 | n^2 - 1`. -/\ntheorem", "choices": ["forall_odd_n_eight_divides_pow_minus_one : ∀ {n : ℕ}, Odd n → 8 ∣ n ^ 2 - 1 ", "∀ {n : ℕ}, Odd n → 8 ∣ (n ^ 2 - 1) ", "forall {n : ℕ}, Odd n → 8 ∣ (n ^ 2 - 1) ", "∀ {n : ℕ}, Odd n → 8 ∣ n ^ 2 - 1 ", "forall_odd_n_8_dvd_n_squared_minus_one : ∀ {n : ℕ}, Odd n → 8 ∣ (n ^ 2 - 1) ", "∀ {n : ℕ}, Odd n → 8 ∣ n ^ 2 - 1 ", "forall_odd_n_eight_divides_nsq_minus_one : ∀ {n : ℕ}, Odd n → 8 ∣ n ^ 2 - 1 ", "∀ {n : ℕ}, Odd n → 8 ∣ (n^2 - 1) ", "∀ {n : ℕ}, Odd n → 8 ∣ (n ^ 2 - 1) ", "∀ {n : ℕ}, Odd n → 8 ∣ (n ^ 2 - 1) "]}
{"docString": "Show that 2 is divisible by `(1 + i)^2` in `ℤ[i]`.", "prompts": "[{\"theorem\":\n  \"∀ (n : ℕ), (∑' (i : ℕ), if n ≤ i then 2⁻¹ ^ i else 0) = 2 * 2⁻¹ ^ n\",\n  \"isProp\": true,\n  \"docString\": \"The sum of `2⁻¹ ^ i` for `n ≤ i` equals `2 * 2⁻¹ ^ n`. \"},\n {\"theorem\": \"∀ {n : ℕ} (self : Fin n), ↑self < n\",\n  \"isProp\": true,\n  \"docString\": \"If `i : Fin n`, then `i.2` is a proof that `i.1 < n`. \"},\n {\"theorem\": \"∀ {n : ℕ}, IsSquare (-1) → ∃ x y, n = x ^ 2 + y ^ 2\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `-1` is a square modulo the natural number `n`, then `n` is a sum of two squares. \"},\n {\"theorem\":\n  \"∀ {p : ℕ} [inst : Fact (Nat.Prime p)], p ≠ 2 → (IsSquare 2 ↔ p % 8 = 1 ∨ p % 8 = 7)\",\n  \"isProp\": true,\n  \"docString\":\n  \"`2` is a square modulo an odd prime `p` iff `p` is congruent to `1` or `7` mod `8`. \"},\n {\"theorem\":\n  \"∀ {C : Type u₁} {D : Type u₂} [inst : CategoryTheory.Category C] [inst_1 : CategoryTheory.Category D]\\n  (i : CategoryTheory.Functor D C) [inst_2 : CategoryTheory.Limits.HasFiniteProducts C]\\n  [inst_3 : CategoryTheory.CartesianClosed C],\\n  (∀ (B : D) (A : C), (A ⟹ i.obj B) ∈ CategoryTheory.Functor.essImage i) → CategoryTheory.ExponentialIdeal i\",\n  \"isProp\": true,\n  \"docString\":\n  \"To show `i` is an exponential ideal it suffices to show that `A ⟹ iB` is \\\"in\\\" `D` for any `A` in\\n`C` and `B` in `D`.\\n\"},\n {\"theorem\":\n  \"∀ (N : ℕ) {j : ℝ},\\n  0 < j →\\n    ∀ {c : ℝ},\\n      1 < c →\\n        (Finset.sum (Finset.filter (fun x => j < ↑⌊c ^ x⌋₊) (Finset.range N)) fun i => 1 / ↑⌊c ^ i⌋₊ ^ 2) ≤\\n          c ^ 5 * (c - 1)⁻¹ ^ 3 / j ^ 2\",\n  \"isProp\": true,\n  \"docString\":\n  \"The sum of `1/⌊c^i⌋₊^2` above a threshold `j` is comparable to `1/j^2`, up to a multiplicative\\nconstant. \"},\n {\"theorem\": \"∀ (p : ℕ) [inst : Fact (Nat.Prime p)], Prime ↑p ↔ p % 4 = 3\",\n  \"isProp\": true,\n  \"docString\":\n  \"A prime natural number is prime in `ℤ[i]` if and only if it is `3` mod `4` \"},\n {\"theorem\":\n  \"∀ {n : ℕ},\\n  0 < n →\\n    ∀ (R : Type u_1) [inst : CommRing R],\\n      (Finset.prod (Nat.divisors n) fun i => Polynomial.cyclotomic i R) = Polynomial.X ^ n - 1\",\n  \"isProp\": true,\n  \"docString\": \"`∏ i in Nat.divisors n, cyclotomic i R = X ^ n - 1`. \"},\n {\"theorem\":\n  \"∀ {z : UpperHalfPlane}, z ∈ ModularGroup.fdo → ∀ (n : ℤ), 1 < ↑Complex.normSq ↑(ModularGroup.T ^ n • z)\",\n  \"isProp\": true,\n  \"docString\": \"If `z ∈ 𝒟ᵒ`, and `n : ℤ`, then `|z + n| > 1`. \"},\n {\"theorem\":\n  \"∀ {n : ℕ} [inst : NeZero n] (i : ZMod (2 * n)), orderOf (QuaternionGroup.a i) = 2 * n / Nat.gcd (2 * n) (ZMod.val i)\",\n  \"isProp\": true,\n  \"docString\": \"If `0 < n`, then `a i` has order `(2 * n) / gcd (2 * n) i`.\\n\"},\n {\"theorem\":\n  \"∀ {n x y : ℕ}, n = x ^ 2 + y ^ 2 → Nat.coprime x y → IsSquare (-1)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If the natural number `n` is a sum of two squares of coprime natural numbers, then\\n`-1` is a square modulo `n`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} [inst : NormedField 𝕜] [inst_1 : CompleteSpace 𝕜] {r : 𝕜},\\n  ‖r‖ < 1 → ∑' (n : ℕ), ↑n * r ^ n = r / (1 - r) ^ 2\",\n  \"isProp\": true,\n  \"docString\": \"If `‖r‖ < 1`, then `∑' n : ℕ, n * r ^ n = r / (1 - r) ^ 2`. \"},\n {\"theorem\":\n  \"∀ {d : ℤ} (a : Pell.Solution₁ d), Pell.Solution₁.x a ^ 2 - d * Pell.Solution₁.y a ^ 2 = 1\",\n  \"isProp\": true,\n  \"docString\":\n  \"The proof that `a` is a solution to the Pell equation `x^2 - d*y^2 = 1` \"},\n {\"theorem\":\n  \"∀ {K : Type u} {L : Type v} [inst : Field L] {ζ : L} [inst_1 : Field K] [inst_2 : Algebra K L] {k : ℕ},\\n  IsPrimitiveRoot ζ (2 ^ k) →\\n    2 ≤ k →\\n      ∀ [H : IsCyclotomicExtension {2 ^ k} K L],\\n        Irreducible (Polynomial.cyclotomic (2 ^ k) K) → ↑(Algebra.norm K) (ζ - 1) = 2\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `Irreducible (cyclotomic (2 ^ k) K)` (in particular for `K = ℚ`) and `k` is at least `2`,\\nthen the norm of `ζ - 1` is `2`. \"},\n {\"theorem\":\n  \"∀ {K : Type u} (L : Type v) [inst : Field K] [inst_1 : Field L] [inst_2 : Algebra K L] {k : ℕ},\\n  2 ≤ k →\\n    ∀ [inst_3 : IsCyclotomicExtension {2 ^ k} K L],\\n      Irreducible (Polynomial.cyclotomic (2 ^ k) K) → ↑(Algebra.norm K) (IsCyclotomicExtension.zeta (2 ^ k) K L - 1) = 2\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `Irreducible (cyclotomic (2 ^ k) K)` (in particular for `K = ℚ`) and `k` is at least `2`,\\nthen the norm of `zeta (2 ^ k) K L - 1` is `2`. \"},\n {\"theorem\":\n  \"∀ {R : Type u} [inst : CommRing R] {R' : Type v} [inst_1 : CommRing R'] {R'' : Type w} [inst_2 : CommRing R'']\\n  {χ : MulChar R ℤ},\\n  MulChar.IsQuadratic χ →\\n    ∀ {χ' : MulChar R' ℤ},\\n      MulChar.IsQuadratic χ' →\\n        ∀ [inst_3 : Nontrivial R''], ringChar R'' ≠ 2 → ∀ {a : R} {a' : R'}, ↑(↑χ a) = ↑(↑χ' a') → ↑χ a = ↑χ' a'\",\n  \"isProp\": true,\n  \"docString\":\n  \"If two values of quadratic characters with target `ℤ` agree after coercion into a ring\\nof characteristic not `2`, then they agree in `ℤ`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : LinearOrderedField α] {a : α}, 2 ≤ a → (1 - 1 / a)⁻¹ ≤ 2\",\n  \"isProp\": true,\n  \"docString\": \"An inequality involving `2`. \"},\n {\"theorem\":\n  \"∀ {K : Type u_1} [inst : CommRing K] [inst_1 : IsDomain K] {ζ : K} {n : ℕ},\\n  0 < n →\\n    IsPrimitiveRoot ζ n → (Finset.prod (Nat.divisors n) fun i => Polynomial.cyclotomic' i K) = Polynomial.X ^ n - 1\",\n  \"isProp\": true,\n  \"docString\":\n  \"If there is a primitive `n`-th root of unity in `K`, then\\n`∏ i in Nat.divisors n, cyclotomic' i K = X ^ n - 1`. \"},\n {\"theorem\":\n  \"∀ {σ : Type u_1} (n : ℕ) (φ : MvPolynomial σ ℤ),\\n  ↑MvPolynomial.C ↑n ∣ φ ↔ ↑(MvPolynomial.map (Int.castRingHom (ZMod n))) φ = 0\",\n  \"isProp\": true,\n  \"docString\":\n  \"A polynomial over the integers is divisible by `n : ℕ`\\nif and only if it is zero over `ZMod n`. \"},\n {\"theorem\":\n  \"∀ {F : Type u_1} [inst : Field F] [inst_1 : Finite F], ringChar F = 2 → ∀ (a : F), IsSquare a\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a finite field of characteristic `2`, all elements are squares. \"}]\n", "prompt_cons": "/-- The sum of `2⁻¹ ^ i` for `n ≤ i` equals `2 * 2⁻¹ ^ n`. -/\ntheorem ∀ (n : ℕ), (∑' (i : ℕ), if n ≤ i then 2⁻¹ ^ i else 0) = 2 * 2⁻¹ ^ n :=\n\n/-- If `i : Fin n`, then `i.2` is a proof that `i.1 < n`. -/\ntheorem ∀ {n : ℕ} (self : Fin n), ↑self < n :=\n\n/-- If `-1` is a square modulo the natural number `n`, then `n` is a sum of two squares. -/\ntheorem ∀ {n : ℕ}, IsSquare (-1) → ∃ x y, n = x ^ 2 + y ^ 2 :=\n\n/-- `2` is a square modulo an odd prime `p` iff `p` is congruent to `1` or `7` mod `8`. -/\ntheorem ∀ {p : ℕ} [inst : Fact (Nat.Prime p)], p ≠ 2 → (IsSquare 2 ↔ p % 8 = 1 ∨ p % 8 = 7) :=\n\n/-- To show `i` is an exponential ideal it suffices to show that `A ⟹ iB` is \"in\" `D` for any `A` in\n`C` and `B` in `D`. -/\ntheorem ∀ {C : Type u₁} {D : Type u₂} [inst : CategoryTheory.Category C] [inst_1 : CategoryTheory.Category D]\n  (i : CategoryTheory.Functor D C) [inst_2 : CategoryTheory.Limits.HasFiniteProducts C]\n  [inst_3 : CategoryTheory.CartesianClosed C],\n  (∀ (B : D) (A : C), (A ⟹ i.obj B) ∈ CategoryTheory.Functor.essImage i) → CategoryTheory.ExponentialIdeal i :=\n\n/-- The sum of `1/⌊c^i⌋₊^2` above a threshold `j` is comparable to `1/j^2`, up to a multiplicative\nconstant. -/\ntheorem ∀ (N : ℕ) {j : ℝ},\n  0 < j →\n    ∀ {c : ℝ},\n      1 < c →\n        (Finset.sum (Finset.filter (fun x => j < ↑⌊c ^ x⌋₊) (Finset.range N)) fun i => 1 / ↑⌊c ^ i⌋₊ ^ 2) ≤\n          c ^ 5 * (c - 1)⁻¹ ^ 3 / j ^ 2 :=\n\n/-- A prime natural number is prime in `ℤ[i]` if and only if it is `3` mod `4` -/\ntheorem ∀ (p : ℕ) [inst : Fact (Nat.Prime p)], Prime ↑p ↔ p % 4 = 3 :=\n\n/-- `∏ i in Nat.divisors n, cyclotomic i R = X ^ n - 1`. -/\ntheorem ∀ {n : ℕ},\n  0 < n →\n    ∀ (R : Type u_1) [inst : CommRing R],\n      (Finset.prod (Nat.divisors n) fun i => Polynomial.cyclotomic i R) = Polynomial.X ^ n - 1 :=\n\n/-- If `z ∈ 𝒟ᵒ`, and `n : ℤ`, then `|z + n| > 1`. -/\ntheorem ∀ {z : UpperHalfPlane}, z ∈ ModularGroup.fdo → ∀ (n : ℤ), 1 < ↑Complex.normSq ↑(ModularGroup.T ^ n • z) :=\n\n/-- If `0 < n`, then `a i` has order `(2 * n) / gcd (2 * n) i`. -/\ntheorem ∀ {n : ℕ} [inst : NeZero n] (i : ZMod (2 * n)), orderOf (QuaternionGroup.a i) = 2 * n / Nat.gcd (2 * n) (ZMod.val i) :=\n\n/-- If the natural number `n` is a sum of two squares of coprime natural numbers, then\n`-1` is a square modulo `n`. -/\ntheorem ∀ {n x y : ℕ}, n = x ^ 2 + y ^ 2 → Nat.coprime x y → IsSquare (-1) :=\n\n/-- If `‖r‖ < 1`, then `∑' n : ℕ, n * r ^ n = r / (1 - r) ^ 2`. -/\ntheorem ∀ {𝕜 : Type u_1} [inst : NormedField 𝕜] [inst_1 : CompleteSpace 𝕜] {r : 𝕜},\n  ‖r‖ < 1 → ∑' (n : ℕ), ↑n * r ^ n = r / (1 - r) ^ 2 :=\n\n/-- The proof that `a` is a solution to the Pell equation `x^2 - d*y^2 = 1` -/\ntheorem ∀ {d : ℤ} (a : Pell.Solution₁ d), Pell.Solution₁.x a ^ 2 - d * Pell.Solution₁.y a ^ 2 = 1 :=\n\n/-- If `Irreducible (cyclotomic (2 ^ k) K)` (in particular for `K = ℚ`) and `k` is at least `2`,\nthen the norm of `ζ - 1` is `2`. -/\ntheorem ∀ {K : Type u} {L : Type v} [inst : Field L] {ζ : L} [inst_1 : Field K] [inst_2 : Algebra K L] {k : ℕ},\n  IsPrimitiveRoot ζ (2 ^ k) →\n    2 ≤ k →\n      ∀ [H : IsCyclotomicExtension {2 ^ k} K L],\n        Irreducible (Polynomial.cyclotomic (2 ^ k) K) → ↑(Algebra.norm K) (ζ - 1) = 2 :=\n\n/-- If `Irreducible (cyclotomic (2 ^ k) K)` (in particular for `K = ℚ`) and `k` is at least `2`,\nthen the norm of `zeta (2 ^ k) K L - 1` is `2`. -/\ntheorem ∀ {K : Type u} (L : Type v) [inst : Field K] [inst_1 : Field L] [inst_2 : Algebra K L] {k : ℕ},\n  2 ≤ k →\n    ∀ [inst_3 : IsCyclotomicExtension {2 ^ k} K L],\n      Irreducible (Polynomial.cyclotomic (2 ^ k) K) → ↑(Algebra.norm K) (IsCyclotomicExtension.zeta (2 ^ k) K L - 1) = 2 :=\n\n/-- If two values of quadratic characters with target `ℤ` agree after coercion into a ring\nof characteristic not `2`, then they agree in `ℤ`. -/\ntheorem ∀ {R : Type u} [inst : CommRing R] {R' : Type v} [inst_1 : CommRing R'] {R'' : Type w} [inst_2 : CommRing R'']\n  {χ : MulChar R ℤ},\n  MulChar.IsQuadratic χ →\n    ∀ {χ' : MulChar R' ℤ},\n      MulChar.IsQuadratic χ' →\n        ∀ [inst_3 : Nontrivial R''], ringChar R'' ≠ 2 → ∀ {a : R} {a' : R'}, ↑(↑χ a) = ↑(↑χ' a') → ↑χ a = ↑χ' a' :=\n\n/-- An inequality involving `2`. -/\ntheorem ∀ {α : Type u_1} [inst : LinearOrderedField α] {a : α}, 2 ≤ a → (1 - 1 / a)⁻¹ ≤ 2 :=\n\n/-- If there is a primitive `n`-th root of unity in `K`, then\n`∏ i in Nat.divisors n, cyclotomic' i K = X ^ n - 1`. -/\ntheorem ∀ {K : Type u_1} [inst : CommRing K] [inst_1 : IsDomain K] {ζ : K} {n : ℕ},\n  0 < n →\n    IsPrimitiveRoot ζ n → (Finset.prod (Nat.divisors n) fun i => Polynomial.cyclotomic' i K) = Polynomial.X ^ n - 1 :=\n\n/-- A polynomial over the integers is divisible by `n : ℕ`\nif and only if it is zero over `ZMod n`. -/\ntheorem ∀ {σ : Type u_1} (n : ℕ) (φ : MvPolynomial σ ℤ),\n  ↑MvPolynomial.C ↑n ∣ φ ↔ ↑(MvPolynomial.map (Int.castRingHom (ZMod n))) φ = 0 :=\n\n/-- In a finite field of characteristic `2`, all elements are squares. -/\ntheorem ∀ {F : Type u_1} [inst : Field F] [inst_1 : Finite F], ringChar F = 2 → ∀ (a : F), IsSquare a :=\n\n/-- Show that 2 is divisible by `(1 + i)^2` in `ℤ[i]`. -/\ntheorem", "choices": ["∀ (x y : ℤ), (1 + (x * x - y * y) + (2 * x * y) * I) * (1 - (x * x - y * y) - (2 * x * y) * I) = 2 ", "IsSquare 2 ", "divisible_by_1_plus_i_sq : IsUnit (2 / ((1 + Complex.i) * (1 + Complex.i))) ", "Lean\n/-- The sum of `2⁻¹ ^ i` for `n ≤ i` equals `2 * 2⁻¹ ^ n`. -/\ntheorem sum_geometric₂ {n : ℕ} : (∑' (i : ℕ), if n ≤ i then 2⁻¹ ^ i else 0) = 2 * 2⁻¹ ^ n ", "/-- The sum of `2⁻¹ ^ i` for `n ≤ i` equals `2 * 2⁻¹ ^ n`. -/\ntheorem sum_inv_two_pow_eq_two_mul_inv_two_pow (n : ℕ) : (∑' (i : ℕ), if n ≤ i then 2⁻¹ ^ i else 0) = 2 * 2⁻¹ ^ n ", "/-- The sum of `2⁻¹ ^ i` for `n ≤ i` equals `2 * 2⁻¹ ^ n`. -/\ntheorem sum_inv_powers_of_two (n : ℕ) : (∑' (i : ℕ), if n ≤ i then 2⁻¹ ^ i else 0) = 2 * 2⁻¹ ^ n ", "∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : Algebra ℤ R], (1 + I) ^ 2 = 2 ", "divisible_by_one_plus_i_sq : IsUnit ((1 + I) ^ 2 : ℤ[i])⁻¹ * 2 ", "div_two_by_one_plus_i_squared : (1 + I) * (1 + I) = 2 ", "div_two_one_add_i_squared : (1 + I) * (1 + I) = 2 "]}
{"docString": "Define `Λ(n) = log p` if `n` is a power of `p` and zero otherwise. Prove that `Σ_{d | n} μ(n / d) log d = Λ(n)`.", "prompts": "[{\"theorem\":\n  \"∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsDomain R] {ζ : R} {n : ℕ},\\n  0 < n →\\n    IsPrimitiveRoot ζ n →\\n      Polynomial.X ^ n - 1 = Finset.prod (Polynomial.nthRootsFinset n R) fun ζ => Polynomial.X - ↑Polynomial.C ζ\",\n  \"isProp\": true,\n  \"docString\":\n  \"If there is a primitive `n`th root of unity in `K`, then `X ^ n - 1 = ∏ (X - μ)`, where `μ`\\nvaries over the `n`-th roots of unity. \"},\n {\"theorem\":\n  \"∃ c, ∀ (n : ℕ), Real.log (Stirling.stirlingSeq 1) - Real.log (Stirling.stirlingSeq (Nat.succ n)) ≤ c\",\n  \"isProp\": true,\n  \"docString\":\n  \"For any `n`, we have `log_stirlingSeq 1 - log_stirlingSeq n ≤ 1/4 * ∑' 1/k^2`  \"},\n {\"theorem\":\n  \"∀ {n : ℕ} {K : Type u_1} [inst : CommRing K] {μ : K},\\n  IsPrimitiveRoot μ n → ∀ [inst_1 : IsDomain K] [inst_2 : CharZero K], minpoly ℤ μ ∣ Polynomial.X ^ n - 1\",\n  \"isProp\": true,\n  \"docString\":\n  \"The minimal polynomial of a root of unity `μ` divides `X ^ n - 1`. \"},\n {\"theorem\":\n  \"∀ {a : ℝ}, 0 < a → HasSum (fun k => 2 * (1 / (2 * ↑k + 1)) * (1 / (2 * a + 1)) ^ (2 * k + 1)) (Real.log (1 + a⁻¹))\",\n  \"isProp\": true,\n  \"docString\":\n  \"Expansion of `log (1 + a⁻¹)` as a series in powers of `1 / (2 * a + 1)`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {E : Type u_2} [inst : MeasurableSpace α] [inst_1 : NormedAddCommGroup E] {p : ENNReal}\\n  {μ : MeasureTheory.Measure α},\\n  p ≠ 0 →\\n    p ≠ ⊤ →\\n      ∀ {P : { x // x ∈ MeasureTheory.Lp.simpleFunc E p μ } → Prop},\\n        (∀ (c : E) {s : Set α} (hs : MeasurableSet s) (hμs : ↑↑μ s < ⊤),\\n            P (MeasureTheory.Lp.simpleFunc.indicatorConst p hs (_ : ↑↑μ s ≠ ⊤) c)) →\\n          (∀ ⦃f g : MeasureTheory.SimpleFunc α E⦄ (hf : MeasureTheory.Memℒp (↑f) p) (hg : MeasureTheory.Memℒp (↑g) p),\\n              Disjoint (Function.support ↑f) (Function.support ↑g) →\\n                P (MeasureTheory.Lp.simpleFunc.toLp f hf) →\\n                  P (MeasureTheory.Lp.simpleFunc.toLp g hg) →\\n                    P (MeasureTheory.Lp.simpleFunc.toLp f hf + MeasureTheory.Lp.simpleFunc.toLp g hg)) →\\n            ∀ (f : { x // x ∈ MeasureTheory.Lp.simpleFunc E p μ }), P f\",\n  \"isProp\": true,\n  \"docString\":\n  \"To prove something for an arbitrary `Lp` simple function, with `0 < p < ∞`, it suffices to show\\nthat the property holds for (multiples of) characteristic functions of finite-measure measurable\\nsets and is closed under addition (of functions with disjoint support). \"},\n {\"theorem\":\n  \"∀ {G : Type u_1} [inst : MeasurableSpace G] [inst_1 : Mul G] [inst_2 : MeasurableMul G] (μ : MeasureTheory.Measure G),\\n  (∀ (g : G) (A : Set G), MeasurableSet A → ↑↑μ ((fun h => g * h) ⁻¹' A) = ↑↑μ A) ↔\\n    MeasureTheory.Measure.IsMulLeftInvariant μ\",\n  \"isProp\": true,\n  \"docString\":\n  \"An alternative way to prove that `μ` is left invariant under multiplication. \"},\n {\"theorem\": \"∀ (n k : ℕ), Nat.factorization (n ^ k) = k • Nat.factorization n\",\n  \"isProp\": true,\n  \"docString\":\n  \"For any `p`, the power of `p` in `n^k` is `k` times the power in `n` \"},\n {\"theorem\":\n  \"∀ {n : ℕ} {K : Type u_1} [inst : CommRing K] {μ : K},\\n  IsPrimitiveRoot μ n →\\n    ∀ [inst_1 : IsDomain K] [inst_2 : CharZero K] {p : ℕ} [hprime : Fact (Nat.Prime p)],\\n      ¬p ∣ n → minpoly ℤ μ = minpoly ℤ (μ ^ p)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `p` is a prime that does not divide `n`,\\nthen the minimal polynomials of a primitive `n`-th root of unity `μ`\\nand of `μ ^ p` are the same. \"},\n {\"theorem\":\n  \"∀ {G : Type u_1} [inst : MeasurableSpace G] [inst_1 : Mul G] [inst_2 : MeasurableMul G] (μ : MeasureTheory.Measure G),\\n  (∀ (g : G) (A : Set G), MeasurableSet A → ↑↑μ ((fun h => h * g) ⁻¹' A) = ↑↑μ A) ↔\\n    MeasureTheory.Measure.IsMulRightInvariant μ\",\n  \"isProp\": true,\n  \"docString\":\n  \"An alternative way to prove that `μ` is right invariant under multiplication. \"},\n {\"theorem\":\n  \"∀ {n : ℕ} {K : Type u_1} [inst : CommRing K] {μ : K},\\n  IsPrimitiveRoot μ n →\\n    ∀ [inst_1 : IsDomain K] [inst_2 : CharZero K] {m : ℕ},\\n      Nat.coprime m n → Polynomial.IsRoot (Polynomial.map (Int.castRingHom K) (minpoly ℤ μ)) (μ ^ m)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `m : ℕ` is coprime with `n`,\\nthen the minimal polynomial of a primitive `n`-th root of unity `μ`\\nhas `μ ^ m` as root. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : EMetricSpace X] [inst_1 : MeasurableSpace X] [inst_2 : BorelSpace X] {d₁ d₂ : ℝ},\\n  d₁ < d₂ →\\n    ∀ (s : Set X),\\n      ↑↑(MeasureTheory.Measure.hausdorffMeasure d₂) s = 0 ∨ ↑↑(MeasureTheory.Measure.hausdorffMeasure d₁) s = ⊤\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `d₁ < d₂`, then for any set `s` we have either `μH[d₂] s = 0`, or `μH[d₁] s = ∞`. \"},\n {\"theorem\": \"∀ {p : ℕ}, (Summable fun n => 1 / ↑n ^ p) ↔ 1 < p\",\n  \"isProp\": true,\n  \"docString\":\n  \"Test for convergence of the `p`-series: the real-valued series `∑' n : ℕ, 1 / n ^ p` converges\\nif and only if `1 < p`. \"},\n {\"theorem\":\n  \"∀ {R : Type u} [inst : CommRing R] {R' : Type v} [inst_1 : CommRing R'] (ψ : AddChar R R') (n : ℕ),\\n  ψ ^ n = AddChar.mulShift ψ ↑n\",\n  \"isProp\": true,\n  \"docString\": \"If `n` is a natural number, then `ψ ^ n = mulShift ψ n`. \"},\n {\"theorem\":\n  \"∀ {A : Type u_1} [inst : CommRing A] [inst_1 : Algebra ℚ A] (n : ℕ),\\n  (Finset.sum (Finset.range n) fun k => PowerSeries.exp A ^ k) =\\n    PowerSeries.mk fun p => Finset.sum (Finset.range n) fun k => ↑(k ^ p) * ↑(algebraMap ℚ A) (↑(Nat.factorial p))⁻¹\",\n  \"isProp\": true,\n  \"docString\":\n  \"Shows that\\n$\\\\sum_{k = 0}^{n - 1} (e^{X})^k = \\\\sum_{p = 0}^{\\\\infty} \\\\sum_{k = 0}^{n - 1} \\\\frac{k^p}{p!}X^p$. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : CancelCommMonoidWithZero α] [inst_1 : UniqueFactorizationMonoid α]\\n  [inst_2 : NormalizationMonoid α] [inst_3 : DecidableEq α] {x : α} {n : ℕ}, factorization (x ^ n) = n • factorization x\",\n  \"isProp\": true,\n  \"docString\":\n  \"For any `p`, the power of `p` in `x^n` is `n` times the power in `x` \"},\n {\"theorem\":\n  \"∀ {p : ENNReal} {ι : Type u_2} [inst : Fintype ι] [inst_1 : Fact (1 ≤ p)] {β : Type u_1}\\n  [inst_2 : SeminormedAddCommGroup β],\\n  p ≠ ⊤ →\\n    ∀ (b : β),\\n      ‖↑(PiLp.equiv p fun x => β).symm (Function.const ι b)‖₊ = ↑(Fintype.card ι) ^ ENNReal.toReal (1 / p) * ‖b‖₊\",\n  \"isProp\": true,\n  \"docString\":\n  \"When `p = ∞`, this lemma does not hold without the additional assumption `Nonempty ι` because\\nthe left-hand side simplifies to `0`, while the right-hand side simplifies to `‖b‖₊`. See\\n`PiLp.nnnorm_equiv_symm_const'` for a version which exchanges the hypothesis `p ≠ ∞` for\\n`Nonempty ι`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : MeasurableSpace α] [inst_1 : TopologicalSpace α] [inst_2 : NormalSpace α]\\n  [inst_3 : BorelSpace α] {E : Type u_2} [inst_4 : NormedAddCommGroup E] {μ : MeasureTheory.Measure α} {p : ENNReal}\\n  [inst_5 : NormedSpace ℝ E] [inst_6 : MeasureTheory.Measure.OuterRegular μ],\\n  p ≠ ⊤ →\\n    ∀ {s u : Set α},\\n      IsClosed s →\\n        IsOpen u →\\n          s ⊆ u →\\n            ↑↑μ s ≠ ⊤ →\\n              ∀ (c : E) {ε : ENNReal},\\n                ε ≠ 0 →\\n                  ∃ f,\\n                    Continuous f ∧\\n                      MeasureTheory.snorm (fun x => f x - Set.indicator s (fun _y => c) x) p μ ≤ ε ∧\\n                        (∀ (x : α), ‖f x‖ ≤ ‖c‖) ∧ Function.support f ⊆ u ∧ MeasureTheory.Memℒp f p\",\n  \"isProp\": true,\n  \"docString\":\n  \"A variant of Urysohn's lemma, `ℒ^p` version, for an outer regular measure `μ`:\\nconsider two sets `s ⊆ u` which are respectively closed and open with `μ s < ∞`, and a vector `c`.\\nThen one may find a continuous function `f` equal to `c` on `s` and to `0` outside of `u`,\\nbounded by `‖c‖` everywhere, and such that the `ℒ^p` norm of `f - s.indicator (fun y ↦ c)` is\\narbitrarily small. Additionally, this function `f` belongs to `ℒ^p`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} (E : Type u_2) {m0 : MeasurableSpace α} (μ : MeasureTheory.Measure α) [inst : NormedAddCommGroup E]\\n  (p : ENNReal) {δ : ENNReal},\\n  δ ≠ 0 →\\n    ∃ η,\\n      0 < η ∧\\n        ∀ (f g : α → E),\\n          MeasureTheory.AEStronglyMeasurable f μ →\\n            MeasureTheory.AEStronglyMeasurable g μ →\\n              MeasureTheory.snorm f p μ ≤ η → MeasureTheory.snorm g p μ ≤ η → MeasureTheory.snorm (f + g) p μ < δ\",\n  \"isProp\": true,\n  \"docString\":\n  \"Technical lemma to control the addition of functions in `L^p` even for `p < 1`: Given `δ > 0`,\\nthere exists `η` such that two functions bounded by `η` in `L^p` have a sum bounded by `δ`. One\\ncould take `η = δ / 2` for `p ≥ 1`, but the point of the lemma is that it works also for `p < 1`.\\n\"},\n {\"theorem\":\n  \"∀ (ξ : ℝ) (n : ℕ), Real.convergent ξ (n + 1) = ↑⌊ξ⌋ + (Real.convergent (Int.fract ξ)⁻¹ n)⁻¹\",\n  \"isProp\": true,\n  \"docString\":\n  \"The `(n+1)`th convergent of `ξ` is the `n`th convergent of `1/(fract ξ)`. \"},\n {\"theorem\": \"∀ {p : ℝ}, (Summable fun n => (↑n ^ p)⁻¹) ↔ 1 < p\",\n  \"isProp\": true,\n  \"docString\":\n  \"Test for convergence of the `p`-series: the real-valued series `∑' n : ℕ, (n ^ p)⁻¹` converges\\nif and only if `1 < p`. \"}]\n", "prompt_cons": "/-- If there is a primitive `n`th root of unity in `K`, then `X ^ n - 1 = ∏ (X - μ)`, where `μ`\nvaries over the `n`-th roots of unity. -/\ntheorem ∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsDomain R] {ζ : R} {n : ℕ},\n  0 < n →\n    IsPrimitiveRoot ζ n →\n      Polynomial.X ^ n - 1 = Finset.prod (Polynomial.nthRootsFinset n R) fun ζ => Polynomial.X - ↑Polynomial.C ζ :=\n\n/-- For any `n`, we have `log_stirlingSeq 1 - log_stirlingSeq n ≤ 1/4 * ∑' 1/k^2` -/\ntheorem ∃ c, ∀ (n : ℕ), Real.log (Stirling.stirlingSeq 1) - Real.log (Stirling.stirlingSeq (Nat.succ n)) ≤ c :=\n\n/-- The minimal polynomial of a root of unity `μ` divides `X ^ n - 1`. -/\ntheorem ∀ {n : ℕ} {K : Type u_1} [inst : CommRing K] {μ : K},\n  IsPrimitiveRoot μ n → ∀ [inst_1 : IsDomain K] [inst_2 : CharZero K], minpoly ℤ μ ∣ Polynomial.X ^ n - 1 :=\n\n/-- Expansion of `log (1 + a⁻¹)` as a series in powers of `1 / (2 * a + 1)`. -/\ntheorem ∀ {a : ℝ}, 0 < a → HasSum (fun k => 2 * (1 / (2 * ↑k + 1)) * (1 / (2 * a + 1)) ^ (2 * k + 1)) (Real.log (1 + a⁻¹)) :=\n\n/-- To prove something for an arbitrary `Lp` simple function, with `0 < p < ∞`, it suffices to show\nthat the property holds for (multiples of) characteristic functions of finite-measure measurable\nsets and is closed under addition (of functions with disjoint support). -/\ntheorem ∀ {α : Type u_1} {E : Type u_2} [inst : MeasurableSpace α] [inst_1 : NormedAddCommGroup E] {p : ENNReal}\n  {μ : MeasureTheory.Measure α},\n  p ≠ 0 →\n    p ≠ ⊤ →\n      ∀ {P : { x // x ∈ MeasureTheory.Lp.simpleFunc E p μ } → Prop},\n        (∀ (c : E) {s : Set α} (hs : MeasurableSet s) (hμs : ↑↑μ s < ⊤),\n            P (MeasureTheory.Lp.simpleFunc.indicatorConst p hs (_ : ↑↑μ s ≠ ⊤) c)) →\n          (∀ ⦃f g : MeasureTheory.SimpleFunc α E⦄ (hf : MeasureTheory.Memℒp (↑f) p) (hg : MeasureTheory.Memℒp (↑g) p),\n              Disjoint (Function.support ↑f) (Function.support ↑g) →\n                P (MeasureTheory.Lp.simpleFunc.toLp f hf) →\n                  P (MeasureTheory.Lp.simpleFunc.toLp g hg) →\n                    P (MeasureTheory.Lp.simpleFunc.toLp f hf + MeasureTheory.Lp.simpleFunc.toLp g hg)) →\n            ∀ (f : { x // x ∈ MeasureTheory.Lp.simpleFunc E p μ }), P f :=\n\n/-- An alternative way to prove that `μ` is left invariant under multiplication. -/\ntheorem ∀ {G : Type u_1} [inst : MeasurableSpace G] [inst_1 : Mul G] [inst_2 : MeasurableMul G] (μ : MeasureTheory.Measure G),\n  (∀ (g : G) (A : Set G), MeasurableSet A → ↑↑μ ((fun h => g * h) ⁻¹' A) = ↑↑μ A) ↔\n    MeasureTheory.Measure.IsMulLeftInvariant μ :=\n\n/-- For any `p`, the power of `p` in `n^k` is `k` times the power in `n` -/\ntheorem ∀ (n k : ℕ), Nat.factorization (n ^ k) = k • Nat.factorization n :=\n\n/-- If `p` is a prime that does not divide `n`,\nthen the minimal polynomials of a primitive `n`-th root of unity `μ`\nand of `μ ^ p` are the same. -/\ntheorem ∀ {n : ℕ} {K : Type u_1} [inst : CommRing K] {μ : K},\n  IsPrimitiveRoot μ n →\n    ∀ [inst_1 : IsDomain K] [inst_2 : CharZero K] {p : ℕ} [hprime : Fact (Nat.Prime p)],\n      ¬p ∣ n → minpoly ℤ μ = minpoly ℤ (μ ^ p) :=\n\n/-- An alternative way to prove that `μ` is right invariant under multiplication. -/\ntheorem ∀ {G : Type u_1} [inst : MeasurableSpace G] [inst_1 : Mul G] [inst_2 : MeasurableMul G] (μ : MeasureTheory.Measure G),\n  (∀ (g : G) (A : Set G), MeasurableSet A → ↑↑μ ((fun h => h * g) ⁻¹' A) = ↑↑μ A) ↔\n    MeasureTheory.Measure.IsMulRightInvariant μ :=\n\n/-- If `m : ℕ` is coprime with `n`,\nthen the minimal polynomial of a primitive `n`-th root of unity `μ`\nhas `μ ^ m` as root. -/\ntheorem ∀ {n : ℕ} {K : Type u_1} [inst : CommRing K] {μ : K},\n  IsPrimitiveRoot μ n →\n    ∀ [inst_1 : IsDomain K] [inst_2 : CharZero K] {m : ℕ},\n      Nat.coprime m n → Polynomial.IsRoot (Polynomial.map (Int.castRingHom K) (minpoly ℤ μ)) (μ ^ m) :=\n\n/-- If `d₁ < d₂`, then for any set `s` we have either `μH[d₂] s = 0`, or `μH[d₁] s = ∞`. -/\ntheorem ∀ {X : Type u_1} [inst : EMetricSpace X] [inst_1 : MeasurableSpace X] [inst_2 : BorelSpace X] {d₁ d₂ : ℝ},\n  d₁ < d₂ →\n    ∀ (s : Set X),\n      ↑↑(MeasureTheory.Measure.hausdorffMeasure d₂) s = 0 ∨ ↑↑(MeasureTheory.Measure.hausdorffMeasure d₁) s = ⊤ :=\n\n/-- Test for convergence of the `p`-series: the real-valued series `∑' n : ℕ, 1 / n ^ p` converges\nif and only if `1 < p`. -/\ntheorem ∀ {p : ℕ}, (Summable fun n => 1 / ↑n ^ p) ↔ 1 < p :=\n\n/-- If `n` is a natural number, then `ψ ^ n = mulShift ψ n`. -/\ntheorem ∀ {R : Type u} [inst : CommRing R] {R' : Type v} [inst_1 : CommRing R'] (ψ : AddChar R R') (n : ℕ),\n  ψ ^ n = AddChar.mulShift ψ ↑n :=\n\n/-- Shows that\n$\\sum_{k = 0}^{n - 1} (e^{X})^k = \\sum_{p = 0}^{\\infty} \\sum_{k = 0}^{n - 1} \\frac{k^p}{p!}X^p$. -/\ntheorem ∀ {A : Type u_1} [inst : CommRing A] [inst_1 : Algebra ℚ A] (n : ℕ),\n  (Finset.sum (Finset.range n) fun k => PowerSeries.exp A ^ k) =\n    PowerSeries.mk fun p => Finset.sum (Finset.range n) fun k => ↑(k ^ p) * ↑(algebraMap ℚ A) (↑(Nat.factorial p))⁻¹ :=\n\n/-- For any `p`, the power of `p` in `x^n` is `n` times the power in `x` -/\ntheorem ∀ {α : Type u_1} [inst : CancelCommMonoidWithZero α] [inst_1 : UniqueFactorizationMonoid α]\n  [inst_2 : NormalizationMonoid α] [inst_3 : DecidableEq α] {x : α} {n : ℕ}, factorization (x ^ n) = n • factorization x :=\n\n/-- When `p = ∞`, this lemma does not hold without the additional assumption `Nonempty ι` because\nthe left-hand side simplifies to `0`, while the right-hand side simplifies to `‖b‖₊`. See\n`PiLp.nnnorm_equiv_symm_const'` for a version which exchanges the hypothesis `p ≠ ∞` for\n`Nonempty ι`. -/\ntheorem ∀ {p : ENNReal} {ι : Type u_2} [inst : Fintype ι] [inst_1 : Fact (1 ≤ p)] {β : Type u_1}\n  [inst_2 : SeminormedAddCommGroup β],\n  p ≠ ⊤ →\n    ∀ (b : β),\n      ‖↑(PiLp.equiv p fun x => β).symm (Function.const ι b)‖₊ = ↑(Fintype.card ι) ^ ENNReal.toReal (1 / p) * ‖b‖₊ :=\n\n/-- A variant of Urysohn's lemma, `ℒ^p` version, for an outer regular measure `μ`:\nconsider two sets `s ⊆ u` which are respectively closed and open with `μ s < ∞`, and a vector `c`.\nThen one may find a continuous function `f` equal to `c` on `s` and to `0` outside of `u`,\nbounded by `‖c‖` everywhere, and such that the `ℒ^p` norm of `f - s.indicator (fun y ↦ c)` is\narbitrarily small. Additionally, this function `f` belongs to `ℒ^p`. -/\ntheorem ∀ {α : Type u_1} [inst : MeasurableSpace α] [inst_1 : TopologicalSpace α] [inst_2 : NormalSpace α]\n  [inst_3 : BorelSpace α] {E : Type u_2} [inst_4 : NormedAddCommGroup E] {μ : MeasureTheory.Measure α} {p : ENNReal}\n  [inst_5 : NormedSpace ℝ E] [inst_6 : MeasureTheory.Measure.OuterRegular μ],\n  p ≠ ⊤ →\n    ∀ {s u : Set α},\n      IsClosed s →\n        IsOpen u →\n          s ⊆ u →\n            ↑↑μ s ≠ ⊤ →\n              ∀ (c : E) {ε : ENNReal},\n                ε ≠ 0 →\n                  ∃ f,\n                    Continuous f ∧\n                      MeasureTheory.snorm (fun x => f x - Set.indicator s (fun _y => c) x) p μ ≤ ε ∧\n                        (∀ (x : α), ‖f x‖ ≤ ‖c‖) ∧ Function.support f ⊆ u ∧ MeasureTheory.Memℒp f p :=\n\n/-- Technical lemma to control the addition of functions in `L^p` even for `p < 1`: Given `δ > 0`,\nthere exists `η` such that two functions bounded by `η` in `L^p` have a sum bounded by `δ`. One\ncould take `η = δ / 2` for `p ≥ 1`, but the point of the lemma is that it works also for `p < 1`. -/\ntheorem ∀ {α : Type u_1} (E : Type u_2) {m0 : MeasurableSpace α} (μ : MeasureTheory.Measure α) [inst : NormedAddCommGroup E]\n  (p : ENNReal) {δ : ENNReal},\n  δ ≠ 0 →\n    ∃ η,\n      0 < η ∧\n        ∀ (f g : α → E),\n          MeasureTheory.AEStronglyMeasurable f μ →\n            MeasureTheory.AEStronglyMeasurable g μ →\n              MeasureTheory.snorm f p μ ≤ η → MeasureTheory.snorm g p μ ≤ η → MeasureTheory.snorm (f + g) p μ < δ :=\n\n/-- The `(n+1)`th convergent of `ξ` is the `n`th convergent of `1/(fract ξ)`. -/\ntheorem ∀ (ξ : ℝ) (n : ℕ), Real.convergent ξ (n + 1) = ↑⌊ξ⌋ + (Real.convergent (Int.fract ξ)⁻¹ n)⁻¹ :=\n\n/-- Test for convergence of the `p`-series: the real-valued series `∑' n : ℕ, (n ^ p)⁻¹` converges\nif and only if `1 < p`. -/\ntheorem ∀ {p : ℝ}, (Summable fun n => (↑n ^ p)⁻¹) ↔ 1 < p :=\n\n/-- Define `Λ(n) = log p` if `n` is a power of `p` and zero otherwise. Prove that `Σ_{d | n} μ(n / d) log d = Λ(n)`. -/\ntheorem", "choices": ["∀ {n : ℕ}, (Finset.sum (Nat.divisors n) fun d => MoebiusFunction.moebius (n / d) * Real.log ↑d) = Nat.ArithmeticFunction.logs.nat_apply n ", "∀ (n : ℕ), Finset.sum (Nat.divisors n) (fun d => Moebius.moebius (n / d) * Real.log d) = ite (Nat.PrimePow n) (Real.log (Nat.minFac n)) 0 ", "∀ (n : ℕ),\n  Finset.sum (Nat.divisors n) (fun d => Moebius.moebius d * Real.log d) = if n = 0 then 0 else Real.log (Nat.gcd n (Nat.minFac n)) ", "∀ (n : ℕ),\n  (Finset.sum (Nat.divisors n) (λ d => (μ n / d) * Real.log d)) = if h : ∃ p k, Nat.Prime p ∧ 0 < k ∧ p ^ k = n then Real.log (Classical.some h) else 0 ", "∀ (n : ℕ),\n  (Finset.sum (Nat.divisors n) fun d => Moebius.moebius d * (Real.log d)) = (if n = 0 then 0 else Nat.Prime.log (Nat.factorization n).support.prod) ", "∀ (n : ℕ), Finset.sum (Nat.divisors n) (fun d => Moebius.moebius d * Real.log d) = AddChar.Λ n ", "∀ n : ℕ, (∑ d in n.divisors, Moebius.moebiusFunction (n / d) * Real.log d) = if Nat.Prime (Nat.minFac n) ∧ n = Nat.minFac n ^ Nat.factorization n (Nat.minFac n) then Real.log (Nat.minFac n) else 0 ", "∀ (n : ℕ),\n  (Finset.sum (Nat.divisors n) fun d => Moebius.moebius d * Real.log (n / d)) = if n = 1 then 0 else Real.log (Nat.minFac n) ", "∀ (n : ℕ), Finset.sum (Finset.filter (λ (d : ℕ), d ∣ n) (Finset.range (n + 1))) (λ (d : ℕ), Moebius.moebius (n / d) * Real.log ↑d) = ite (n = 1) 0 (Real.log (↑(Nat.minFac n))) ", "∀ (n : ℕ), (Finset.sum (Nat.divisors n) fun d => MoebiusFunction.moebius d * Real.log (↑(n / d))) = AddChar.logPow n "]}
{"docString": "Show that there are infinitely many primes congruent to `-1` modulo 6.", "prompts": "[{\"theorem\":\n  \"∀ {k : ℕ}, k ≠ 0 → Set.Infinite {p | Nat.Prime p ∧ p ≡ 1 [MOD k]}\",\n  \"isProp\": true,\n  \"docString\":\n  \"For any positive `k : ℕ` there are infinitely many primes `p` such that `p ≡ 1 [MOD k]`. \"},\n {\"theorem\": \"∀ {n : ℕ}, ↑(Nat.factorial (n - 1)) = -1 → n ≠ 1 → Nat.Prime n\",\n  \"isProp\": true,\n  \"docString\":\n  \"For `n ≠ 1`, `(n-1)!` is congruent to `-1` modulo `n` only if n is prime. \"},\n {\"theorem\":\n  \"∀ {n : ℕ}, n ≠ 0 → ∀ (d : ℕ), ∃ᶠ (m : ℕ) in Filter.atTop, m ≡ d [MOD n]\",\n  \"isProp\": true,\n  \"docString\": \"Infinitely many natural numbers are equal to `d` mod `n`. \"},\n {\"theorem\": \"∀ {n : ℕ}, n ≠ 1 → (Nat.Prime n ↔ ↑(Nat.factorial (n - 1)) = -1)\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Wilson's Theorem**: For `n ≠ 1`, `(n-1)!` is congruent to `-1` modulo `n` iff n is prime. \"},\n {\"theorem\":\n  \"∀ (p : ℕ) [inst : Fact (Nat.Prime p)], ↑(Nat.factorial (p - 1)) = -1\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Wilson's Lemma**: the product of `1`, ..., `p-1` is `-1` modulo `p`. \"},\n {\"theorem\":\n  \"∀ {p : ℕ} [inst : Fact (Nat.Prime p)], p ≠ 2 → (IsSquare (-2) ↔ p % 8 = 1 ∨ p % 8 = 3)\",\n  \"isProp\": true,\n  \"docString\":\n  \"`-2` is a square modulo an odd prime `p` iff `p` is congruent to `1` or `3` mod `8`. \"},\n {\"theorem\":\n  \"∀ {k : ℕ} (n : ℕ), k ≠ 0 → ∃ p, Nat.Prime p ∧ n < p ∧ p ≡ 1 [MOD k]\",\n  \"isProp\": true,\n  \"docString\":\n  \"For any positive `k : ℕ` there exists an arbitrarily large prime `p` such that\\n`p ≡ 1 [MOD k]`. \"},\n {\"theorem\":\n  \"∀ {a b c : ℤ}, a % b = c → Int.natAbs (a - c) < Int.natAbs b → a = c\",\n  \"isProp\": true,\n  \"docString\":\n  \"If two integers are congruent to a sufficiently large modulus,\\nthey are equal. \"},\n {\"theorem\":\n  \"∀ {p : ℕ}, Nat.Prime p → ∀ {n : ℤ}, IsCoprime n ↑p → n ^ (p - 1) ≡ 1 [ZMOD ↑p]\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Fermat's Little Theorem**: for all `a : ℤ` coprime to `p`, we have\\n`a ^ (p - 1) ≡ 1 [ZMOD p]`. \"},\n {\"theorem\": \"∀ {p : ℕ} [inst : Fact (Nat.Prime p)], IsSquare (-1) ↔ p % 4 ≠ 3\",\n  \"isProp\": true,\n  \"docString\":\n  \"`-1` is a square in `ZMod p` iff `p` is not congruent to `3` mod `4`. \"},\n {\"theorem\": \"∀ {p n : ℕ}, Nat.Prime p → p ∣ n → IsSquare (-1) → p % 4 ≠ 3\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a prime `p` divides `n` such that `-1` is a square modulo `n`, then `p % 4 ≠ 3`. \"},\n {\"theorem\": \"∀ (p : ℕ) [inst : Fact (Nat.Prime p)], Prime ↑p ↔ p % 4 = 3\",\n  \"isProp\": true,\n  \"docString\":\n  \"A prime natural number is prime in `ℤ[i]` if and only if it is `3` mod `4` \"},\n {\"theorem\":\n  \"∀ {m n : ℕ}, Nat.coprime m n → IsSquare (-1) → IsSquare (-1) → IsSquare (-1)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `-1` is a square modulo coprime natural numbers `m` and `n`, then `-1` is also\\na square modulo `m*n`. \"},\n {\"theorem\":\n  \"∀ {p : ℕ} [inst : Fact (Nat.Prime p)] {a : ZMod p}, a ≠ 0 → a ^ (p - 1) = 1\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Fermat's Little Theorem**: for all nonzero `a : ZMod p`, we have `a ^ (p - 1) = 1`. \"},\n {\"theorem\":\n  \"∀ {n x y : ℕ}, n = x ^ 2 + y ^ 2 → Nat.coprime x y → IsSquare (-1)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If the natural number `n` is a sum of two squares of coprime natural numbers, then\\n`-1` is a square modulo `n`. \"},\n {\"theorem\":\n  \"∀ (p : ℕ) [inst : Fact (Nat.Prime p)] (a : (ZMod p)ˣ), a ^ (p - 1) = 1\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Fermat's Little Theorem**: for every unit `a` of `ZMod p`, we have `a ^ (p - 1) = 1`. \"},\n {\"theorem\": \"∀ {l : List ℤ}, List.prod l = -1 → -1 ∈ l\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a product of integers is `-1`, then at least one factor must be `-1`. \"},\n {\"theorem\":\n  \"∀ (R : Type u_1) [inst : Ring R], Polynomial.cyclotomic 1 R = Polynomial.X - 1\",\n  \"isProp\": true,\n  \"docString\": \"The first cyclotomic polyomial is `X - 1`. \"},\n {\"theorem\":\n  \"∀ {p q : ℕ} [inst : Fact (Nat.Prime p)] [inst_1 : Fact (Nat.Prime q)],\\n  p % 4 = 3 → q % 4 = 3 → legendreSym q ↑p = -legendreSym p ↑q\",\n  \"isProp\": true,\n  \"docString\":\n  \"The Law of Quadratic Reciprocity: if `p` and `q` are primes that are both congruent\\nto `3` mod `4`, then `(q / p) = -(p / q)`. \"},\n {\"theorem\":\n  \"∀ (R : Type u_1) [inst : CommRing R] [inst_1 : IsDomain R], Polynomial.cyclotomic' 1 R = Polynomial.X - 1\",\n  \"isProp\": true,\n  \"docString\": \"The first modified cyclotomic polyomial is `X - 1`. \"}]\n", "prompt_cons": "/-- For any positive `k : ℕ` there are infinitely many primes `p` such that `p ≡ 1 [MOD k]`. -/\ntheorem ∀ {k : ℕ}, k ≠ 0 → Set.Infinite {p | Nat.Prime p ∧ p ≡ 1 [MOD k]} :=\n\n/-- For `n ≠ 1`, `(n-1)!` is congruent to `-1` modulo `n` only if n is prime. -/\ntheorem ∀ {n : ℕ}, ↑(Nat.factorial (n - 1)) = -1 → n ≠ 1 → Nat.Prime n :=\n\n/-- Infinitely many natural numbers are equal to `d` mod `n`. -/\ntheorem ∀ {n : ℕ}, n ≠ 0 → ∀ (d : ℕ), ∃ᶠ (m : ℕ) in Filter.atTop, m ≡ d [MOD n] :=\n\n/-- **Wilson's Theorem**: For `n ≠ 1`, `(n-1)!` is congruent to `-1` modulo `n` iff n is prime. -/\ntheorem ∀ {n : ℕ}, n ≠ 1 → (Nat.Prime n ↔ ↑(Nat.factorial (n - 1)) = -1) :=\n\n/-- **Wilson's Lemma**: the product of `1`, ..., `p-1` is `-1` modulo `p`. -/\ntheorem ∀ (p : ℕ) [inst : Fact (Nat.Prime p)], ↑(Nat.factorial (p - 1)) = -1 :=\n\n/-- `-2` is a square modulo an odd prime `p` iff `p` is congruent to `1` or `3` mod `8`. -/\ntheorem ∀ {p : ℕ} [inst : Fact (Nat.Prime p)], p ≠ 2 → (IsSquare (-2) ↔ p % 8 = 1 ∨ p % 8 = 3) :=\n\n/-- For any positive `k : ℕ` there exists an arbitrarily large prime `p` such that\n`p ≡ 1 [MOD k]`. -/\ntheorem ∀ {k : ℕ} (n : ℕ), k ≠ 0 → ∃ p, Nat.Prime p ∧ n < p ∧ p ≡ 1 [MOD k] :=\n\n/-- If two integers are congruent to a sufficiently large modulus,\nthey are equal. -/\ntheorem ∀ {a b c : ℤ}, a % b = c → Int.natAbs (a - c) < Int.natAbs b → a = c :=\n\n/-- **Fermat's Little Theorem**: for all `a : ℤ` coprime to `p`, we have\n`a ^ (p - 1) ≡ 1 [ZMOD p]`. -/\ntheorem ∀ {p : ℕ}, Nat.Prime p → ∀ {n : ℤ}, IsCoprime n ↑p → n ^ (p - 1) ≡ 1 [ZMOD ↑p] :=\n\n/-- `-1` is a square in `ZMod p` iff `p` is not congruent to `3` mod `4`. -/\ntheorem ∀ {p : ℕ} [inst : Fact (Nat.Prime p)], IsSquare (-1) ↔ p % 4 ≠ 3 :=\n\n/-- If a prime `p` divides `n` such that `-1` is a square modulo `n`, then `p % 4 ≠ 3`. -/\ntheorem ∀ {p n : ℕ}, Nat.Prime p → p ∣ n → IsSquare (-1) → p % 4 ≠ 3 :=\n\n/-- A prime natural number is prime in `ℤ[i]` if and only if it is `3` mod `4` -/\ntheorem ∀ (p : ℕ) [inst : Fact (Nat.Prime p)], Prime ↑p ↔ p % 4 = 3 :=\n\n/-- If `-1` is a square modulo coprime natural numbers `m` and `n`, then `-1` is also\na square modulo `m*n`. -/\ntheorem ∀ {m n : ℕ}, Nat.coprime m n → IsSquare (-1) → IsSquare (-1) → IsSquare (-1) :=\n\n/-- **Fermat's Little Theorem**: for all nonzero `a : ZMod p`, we have `a ^ (p - 1) = 1`. -/\ntheorem ∀ {p : ℕ} [inst : Fact (Nat.Prime p)] {a : ZMod p}, a ≠ 0 → a ^ (p - 1) = 1 :=\n\n/-- If the natural number `n` is a sum of two squares of coprime natural numbers, then\n`-1` is a square modulo `n`. -/\ntheorem ∀ {n x y : ℕ}, n = x ^ 2 + y ^ 2 → Nat.coprime x y → IsSquare (-1) :=\n\n/-- **Fermat's Little Theorem**: for every unit `a` of `ZMod p`, we have `a ^ (p - 1) = 1`. -/\ntheorem ∀ (p : ℕ) [inst : Fact (Nat.Prime p)] (a : (ZMod p)ˣ), a ^ (p - 1) = 1 :=\n\n/-- If a product of integers is `-1`, then at least one factor must be `-1`. -/\ntheorem ∀ {l : List ℤ}, List.prod l = -1 → -1 ∈ l :=\n\n/-- The first cyclotomic polyomial is `X - 1`. -/\ntheorem ∀ (R : Type u_1) [inst : Ring R], Polynomial.cyclotomic 1 R = Polynomial.X - 1 :=\n\n/-- The Law of Quadratic Reciprocity: if `p` and `q` are primes that are both congruent\nto `3` mod `4`, then `(q / p) = -(p / q)`. -/\ntheorem ∀ {p q : ℕ} [inst : Fact (Nat.Prime p)] [inst_1 : Fact (Nat.Prime q)],\n  p % 4 = 3 → q % 4 = 3 → legendreSym q ↑p = -legendreSym p ↑q :=\n\n/-- The first modified cyclotomic polyomial is `X - 1`. -/\ntheorem ∀ (R : Type u_1) [inst : CommRing R] [inst_1 : IsDomain R], Polynomial.cyclotomic' 1 R = Polynomial.X - 1 :=\n\n/-- Show that there are infinitely many primes congruent to `-1` modulo 6. -/\ntheorem", "choices": ["Set.Infinite {p | Nat.Prime p ∧ p ≡ -1 [MOD 6]} ", "Set.Infinite {p | Nat.Prime p ∧ p ≡ -1 [MOD 6]} ", "Set.Infinite {p | Nat.Prime p ∧ p ≡ -1 [MOD 6]} ", "Set.Infinite {p | Nat.Prime p ∧ p ≡ -1 [MOD 6]} ", "Set.Infinite {p | Nat.Prime p ∧ p ≡ -1 [MOD 6]} ", "Set.Infinite {p | Nat.Prime p ∧ p ≡ (-1) [MOD 6]} :", "Set.Infinite {p | Nat.Prime p ∧ p ≡ -1 [MOD 6]} ", "Set.Infinite {p | Nat.Prime p ∧ p ≡ -1 [MOD 6]} ", "Set.Infinite {p | Nat.Prime p ∧ p ≡ -1 [MOD 6]} ", "Set.Infinite {p | Nat.Prime p ∧ p ≡ -1 [MOD 6]} "]}
{"docString": "Show that the equation `7x^3 + 2 = y^3` has no solution in integers.", "prompts": "[{\"theorem\":\n  \"∀ {d : ℤ} {a : Pell.Solution₁ d}, 1 < Pell.Solution₁.x a → Pell.Solution₁.y a ≠ 0\",\n  \"isProp\": true,\n  \"docString\": \"A solution with `x > 1` must have `y ≠ 0`. \"},\n {\"theorem\":\n  \"∀ {d : ℤ}, 0 ≤ d → ∀ (a : Pell.Solution₁ d), Pell.Solution₁.x a ≠ 0\",\n  \"isProp\": true,\n  \"docString\": \"A solution has `x ≠ 0`. \"},\n {\"theorem\":\n  \"∀ {R : Type u_1} [inst : CommRing R] {a b c : R},\\n  (∀ (s : R), discrim a b c ≠ s ^ 2) → ∀ (x : R), a * x * x + b * x + c ≠ 0\",\n  \"isProp\": true,\n  \"docString\":\n  \"A quadratic has no root if its discriminant has no square root. \"},\n {\"theorem\":\n  \"∀ {d : ℤ} (a : Pell.Solution₁ d), Pell.Solution₁.x a ^ 2 - d * Pell.Solution₁.y a ^ 2 = 1\",\n  \"isProp\": true,\n  \"docString\":\n  \"The proof that `a` is a solution to the Pell equation `x^2 - d*y^2 = 1` \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {E : Type u_2} [inst : SeminormedGroup E] {l : Filter α} {f : α → E},\\n  Filter.Tendsto (fun y => ‖f y‖) l Filter.atTop → ∀ (x : E), ∀ᶠ (y : α) in l, f y ≠ x\",\n  \"isProp\": true,\n  \"docString\": \"If `‖y‖ → ∞`, then we can assume `y ≠ x` for any fixed `x`. \"},\n {\"theorem\":\n  \"∀ {d : ℤ} {a : Pell.Solution₁ d},\\n  0 < Pell.Solution₁.x a → 0 < Pell.Solution₁.y a → ∀ (n : ℕ), 0 < Pell.Solution₁.y (a ^ Nat.succ n)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `(x, y)` is a solution with `x` and `y` positive, then all its powers with positive\\nnatural exponents have positive `y`. \"},\n {\"theorem\":\n  \"∀ {d : ℤ} {a : Pell.Solution₁ d},\\n  0 < Pell.Solution₁.x a → 0 < Pell.Solution₁.y a → ∀ {n : ℤ}, 0 < n → 0 < Pell.Solution₁.y (a ^ n)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `(x, y)` is a solution with `x` and `y` positive, then all its powers with positive\\nexponents have positive `y`. \"},\n {\"theorem\":\n  \"∀ {d : ℤ} {a : Pell.Solution₁ d}, 0 < Pell.Solution₁.x a → ∀ (n : ℤ), 0 < Pell.Solution₁.x (a ^ n)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `(x, y)` is a solution with `x` positive, then all its powers have positive `x`. \"},\n {\"theorem\": \"∀ {d : ℤ}, 0 < d → ¬IsSquare d → ∃ a, a ≠ 1 ∧ a ≠ -1\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `d` is a positive integer that is not a square, then there exists a nontrivial solution\\nto the Pell equation `x^2 - d*y^2 = 1`. \"},\n {\"theorem\":\n  \"∀ {A : Type u_1} {B : Type u_2} [inst : CommRing A] [inst_1 : Ring B] [inst_2 : Algebra A B] {x : B}\\n  [inst_3 : Nontrivial A], IsIntegral A x → minpoly A x ≠ 0\",\n  \"isProp\": true,\n  \"docString\": \"A minimal polynomial is nonzero. \"},\n {\"theorem\": \"∀ {r : ℝ}, Transcendental ℚ r → Irrational r\",\n  \"isProp\": true,\n  \"docString\": \"A transcendental real number is irrational. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : LinearOrderedField α] [inst_1 : Archimedean α] {x y : α}, 0 < x → y < 1 → ∃ n, y ^ n < x\",\n  \"isProp\": true,\n  \"docString\":\n  \"For any `y < 1` and any positive `x`, there exists `n : ℕ` with `y ^ n < x`. \"},\n {\"theorem\":\n  \"∀ {F : Type u_1} [inst : Field F] [inst_1 : Fintype F] [inst_2 : DecidableEq F],\\n  ringChar F ≠ 2 → ∀ (a : F), ↑(Finset.card (Set.toFinset {x | x ^ 2 = a})) = ↑(quadraticChar F) a + 1\",\n  \"isProp\": true,\n  \"docString\":\n  \"The number of solutions to `x^2 = a` is determined by the quadratic character. \"},\n {\"theorem\":\n  \"∀ {p : Polynomial ℤ},\\n  Polynomial.IsUnitTrinomial p →\\n    (∀ (z : ℂ), ¬(↑(Polynomial.aeval z) p = 0 ∧ ↑(Polynomial.aeval z) (Polynomial.mirror p) = 0)) → Irreducible p\",\n  \"isProp\": true,\n  \"docString\":\n  \"A unit trinomial is irreducible if it has no complex roots in common with its mirror \"},\n {\"theorem\":\n  \"∀ {d : ℤ} {a b : Pell.Solution₁ d},\\n  0 < Pell.Solution₁.x a →\\n    0 < Pell.Solution₁.y a → 0 < Pell.Solution₁.x b → 0 < Pell.Solution₁.y b → 0 < Pell.Solution₁.y (a * b)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The set of solutions with `x` and `y` positive is closed under multiplication. \"},\n {\"theorem\":\n  \"∀ {R : Type u_1} [inst : NonAssocSemiring R] [inst_1 : Nontrivial R], ringChar R ≠ 2 → 2 ≠ 0\",\n  \"isProp\": true,\n  \"docString\":\n  \"We have `2 ≠ 0` in a nontrivial ring whose characteristic is not `2`. \"},\n {\"theorem\":\n  \"∀ {M : Type u_1} {α : Type u_2} [inst : VAdd M α] [self : AddAction.IsPretransitive M α] (x y : α), ∃ g, g +ᵥ x = y\",\n  \"isProp\": true,\n  \"docString\": \"There is `g` such that `g +ᵥ x = y`. \"},\n {\"theorem\": \"∀ {x y : ℝ}, x < y → ∃ r, Irrational r ∧ x < r ∧ r < y\",\n  \"isProp\": true,\n  \"docString\":\n  \"There is an irrational number `r` between any two reals `x < r < y`. \"},\n {\"theorem\":\n  \"∀ {R : Type u1} [inst : CommRing R] {M : Type u2} [inst_1 : AddCommGroup M] [inst_2 : Module R M],\\n  Disjoint (LinearMap.range (ExteriorAlgebra.ι R)) 1\",\n  \"isProp\": true,\n  \"docString\":\n  \"The generators of the exterior algebra are disjoint from its scalars. \"},\n {\"theorem\":\n  \"∀ {y : ℝ}, 0 < y → Filter.Tendsto (fun x => x ^ (-y)) Filter.atTop (nhds 0)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The function `x ^ (-y)` tends to `0` at `+∞` for any positive real `y`. \"}]\n", "prompt_cons": "/-- A solution with `x > 1` must have `y ≠ 0`. -/\ntheorem ∀ {d : ℤ} {a : Pell.Solution₁ d}, 1 < Pell.Solution₁.x a → Pell.Solution₁.y a ≠ 0 :=\n\n/-- A solution has `x ≠ 0`. -/\ntheorem ∀ {d : ℤ}, 0 ≤ d → ∀ (a : Pell.Solution₁ d), Pell.Solution₁.x a ≠ 0 :=\n\n/-- A quadratic has no root if its discriminant has no square root. -/\ntheorem ∀ {R : Type u_1} [inst : CommRing R] {a b c : R},\n  (∀ (s : R), discrim a b c ≠ s ^ 2) → ∀ (x : R), a * x * x + b * x + c ≠ 0 :=\n\n/-- The proof that `a` is a solution to the Pell equation `x^2 - d*y^2 = 1` -/\ntheorem ∀ {d : ℤ} (a : Pell.Solution₁ d), Pell.Solution₁.x a ^ 2 - d * Pell.Solution₁.y a ^ 2 = 1 :=\n\n/-- If `‖y‖ → ∞`, then we can assume `y ≠ x` for any fixed `x`. -/\ntheorem ∀ {α : Type u_1} {E : Type u_2} [inst : SeminormedGroup E] {l : Filter α} {f : α → E},\n  Filter.Tendsto (fun y => ‖f y‖) l Filter.atTop → ∀ (x : E), ∀ᶠ (y : α) in l, f y ≠ x :=\n\n/-- If `(x, y)` is a solution with `x` and `y` positive, then all its powers with positive\nnatural exponents have positive `y`. -/\ntheorem ∀ {d : ℤ} {a : Pell.Solution₁ d},\n  0 < Pell.Solution₁.x a → 0 < Pell.Solution₁.y a → ∀ (n : ℕ), 0 < Pell.Solution₁.y (a ^ Nat.succ n) :=\n\n/-- If `(x, y)` is a solution with `x` and `y` positive, then all its powers with positive\nexponents have positive `y`. -/\ntheorem ∀ {d : ℤ} {a : Pell.Solution₁ d},\n  0 < Pell.Solution₁.x a → 0 < Pell.Solution₁.y a → ∀ {n : ℤ}, 0 < n → 0 < Pell.Solution₁.y (a ^ n) :=\n\n/-- If `(x, y)` is a solution with `x` positive, then all its powers have positive `x`. -/\ntheorem ∀ {d : ℤ} {a : Pell.Solution₁ d}, 0 < Pell.Solution₁.x a → ∀ (n : ℤ), 0 < Pell.Solution₁.x (a ^ n) :=\n\n/-- If `d` is a positive integer that is not a square, then there exists a nontrivial solution\nto the Pell equation `x^2 - d*y^2 = 1`. -/\ntheorem ∀ {d : ℤ}, 0 < d → ¬IsSquare d → ∃ a, a ≠ 1 ∧ a ≠ -1 :=\n\n/-- A minimal polynomial is nonzero. -/\ntheorem ∀ {A : Type u_1} {B : Type u_2} [inst : CommRing A] [inst_1 : Ring B] [inst_2 : Algebra A B] {x : B}\n  [inst_3 : Nontrivial A], IsIntegral A x → minpoly A x ≠ 0 :=\n\n/-- A transcendental real number is irrational. -/\ntheorem ∀ {r : ℝ}, Transcendental ℚ r → Irrational r :=\n\n/-- For any `y < 1` and any positive `x`, there exists `n : ℕ` with `y ^ n < x`. -/\ntheorem ∀ {α : Type u_1} [inst : LinearOrderedField α] [inst_1 : Archimedean α] {x y : α}, 0 < x → y < 1 → ∃ n, y ^ n < x :=\n\n/-- The number of solutions to `x^2 = a` is determined by the quadratic character. -/\ntheorem ∀ {F : Type u_1} [inst : Field F] [inst_1 : Fintype F] [inst_2 : DecidableEq F],\n  ringChar F ≠ 2 → ∀ (a : F), ↑(Finset.card (Set.toFinset {x | x ^ 2 = a})) = ↑(quadraticChar F) a + 1 :=\n\n/-- A unit trinomial is irreducible if it has no complex roots in common with its mirror -/\ntheorem ∀ {p : Polynomial ℤ},\n  Polynomial.IsUnitTrinomial p →\n    (∀ (z : ℂ), ¬(↑(Polynomial.aeval z) p = 0 ∧ ↑(Polynomial.aeval z) (Polynomial.mirror p) = 0)) → Irreducible p :=\n\n/-- The set of solutions with `x` and `y` positive is closed under multiplication. -/\ntheorem ∀ {d : ℤ} {a b : Pell.Solution₁ d},\n  0 < Pell.Solution₁.x a →\n    0 < Pell.Solution₁.y a → 0 < Pell.Solution₁.x b → 0 < Pell.Solution₁.y b → 0 < Pell.Solution₁.y (a * b) :=\n\n/-- We have `2 ≠ 0` in a nontrivial ring whose characteristic is not `2`. -/\ntheorem ∀ {R : Type u_1} [inst : NonAssocSemiring R] [inst_1 : Nontrivial R], ringChar R ≠ 2 → 2 ≠ 0 :=\n\n/-- There is `g` such that `g +ᵥ x = y`. -/\ntheorem ∀ {M : Type u_1} {α : Type u_2} [inst : VAdd M α] [self : AddAction.IsPretransitive M α] (x y : α), ∃ g, g +ᵥ x = y :=\n\n/-- There is an irrational number `r` between any two reals `x < r < y`. -/\ntheorem ∀ {x y : ℝ}, x < y → ∃ r, Irrational r ∧ x < r ∧ r < y :=\n\n/-- The generators of the exterior algebra are disjoint from its scalars. -/\ntheorem ∀ {R : Type u1} [inst : CommRing R] {M : Type u2} [inst_1 : AddCommGroup M] [inst_2 : Module R M],\n  Disjoint (LinearMap.range (ExteriorAlgebra.ι R)) 1 :=\n\n/-- The function `x ^ (-y)` tends to `0` at `+∞` for any positive real `y`. -/\ntheorem ∀ {y : ℝ}, 0 < y → Filter.Tendsto (fun x => x ^ (-y)) Filter.atTop (nhds 0) :=\n\n/-- Show that the equation `7x^3 + 2 = y^3` has no solution in integers. -/\ntheorem", "choices": ["∀ (x y : ℤ), 7 * x^3 + 2 ≠ y^3 ", "∀ (x y : ℤ), 7 * x ^ 3 + 2 ≠ y ^ 3 ", "no_solution_7x3_plus_2_eq_y3 : ∀ (x y : ℤ), 7 * x^3 + 2 ≠ y^3 ", "∀ (x y : ℤ), 7 * x ^ 3 + 2 ≠ y ^ 3 ", "no_solution_7x3_plus_2_eq_y3 : ∀ (x y : ℤ), 7 * x ^ 3 + 2 ≠ y ^ 3 ", "∀ {x y : ℤ}, 7 * x ^ 3 + 2 ≠ y ^ 3 ", "∀ (x y : ℤ), 7 * x ^ 3 + 2 ≠ y ^ 3 ", "integers_7x3_plus_2_ne_y3 : ∀ (x y : ℤ), 7 * x ^ 3 + 2 ≠ y ^ 3 ", "∀ (x y : ℤ), 7 * x ^ 3 + 2 ≠ y ^ 3 ", "forall {x y : ℤ}, 7 * x^3 + 2 ≠ y^3 "]}
{"docString": "Let `p` and `q` be distinct odd primes such that `p - 1` divides `q - 1`. If `(n, pq) = 1`, show that `n^(q 1) ≡ 1 (mod pq)`.", "prompts": "[{\"theorem\":\n  \"∀ {p q : ℕ} [inst : Fact (Nat.Prime p)] [inst_1 : Fact (Nat.Prime q)], p % 4 = 1 → q ≠ 2 → (IsSquare ↑q ↔ IsSquare ↑p)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `p` and `q` are odd primes and `p % 4 = 1`, then `q` is a square mod `p` iff\\n`p` is a square mod `q`. \"},\n {\"theorem\":\n  \"∀ {p q : ℕ} [p_prime : Fact (Nat.Prime p)] [q_prime : Fact (Nat.Prime q)], p ≠ q → padicNorm p ↑q = 1\",\n  \"isProp\": true,\n  \"docString\":\n  \"The `p`-adic norm of `q` is `1` if `q` is prime and not equal to `p`. \"},\n {\"theorem\":\n  \"∀ {p q : ℕ} [inst : Fact (Nat.Prime p)] [inst_1 : Fact (Nat.Prime q)],\\n  p % 4 = 1 → q ≠ 2 → legendreSym q ↑p = legendreSym p ↑q\",\n  \"isProp\": true,\n  \"docString\":\n  \"The Law of Quadratic Reciprocity: if `p` and `q` are odd primes and `p % 4 = 1`,\\nthen `(q / p) = (p / q)`. \"},\n {\"theorem\":\n  \"∀ {p q : ℕ} [inst : Fact (Nat.Prime p)] [inst_1 : Fact (Nat.Prime q)],\\n  p ≠ 2 → q ≠ 2 → p ≠ q → legendreSym q ↑p * legendreSym p ↑q = (-1) ^ (p / 2 * (q / 2))\",\n  \"isProp\": true,\n  \"docString\":\n  \"**The Law of Quadratic Reciprocity**: if `p` and `q` are distinct odd primes, then\\n`(q / p) * (p / q) = (-1)^((p-1)(q-1)/4)`. \"},\n {\"theorem\":\n  \"∀ {p q : ℕ} [inst : Fact (Nat.Prime p)] [inst_1 : Fact (Nat.Prime q)],\\n  p ≠ 2 → q ≠ 2 → legendreSym q ↑p = (-1) ^ (p / 2 * (q / 2)) * legendreSym p ↑q\",\n  \"isProp\": true,\n  \"docString\":\n  \"The Law of Quadratic Reciprocity: if `p` and `q` are odd primes, then\\n`(q / p) = (-1)^((p-1)(q-1)/4) * (p / q)`. \"},\n {\"theorem\":\n  \"∀ {p : ℕ}, Nat.Prime p → ∀ (n : ℕ), Nat.totient (p ^ (n + 1)) = p ^ n * (p - 1)\",\n  \"isProp\": true,\n  \"docString\":\n  \"When `p` is prime, then the totient of `p ^ (n + 1)` is `p ^ n * (p - 1)` \"},\n {\"theorem\":\n  \"∀ {p q : ℕ} [inst : Fact (Nat.Prime p)] [inst_1 : Fact (Nat.Prime q)],\\n  p % 4 = 3 → q % 4 = 3 → p ≠ q → (IsSquare ↑q ↔ ¬IsSquare ↑p)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `p` and `q` are distinct primes that are both congruent to `3` mod `4`, then `q` is\\na square mod `p` iff `p` is a nonsquare mod `q`. \"},\n {\"theorem\":\n  \"∀ {p q : ℕ} [inst : Fact (Nat.Prime p)] [inst_1 : Fact (Nat.Prime q)],\\n  p % 4 = 3 → q % 4 = 3 → legendreSym q ↑p = -legendreSym p ↑q\",\n  \"isProp\": true,\n  \"docString\":\n  \"The Law of Quadratic Reciprocity: if `p` and `q` are primes that are both congruent\\nto `3` mod `4`, then `(q / p) = -(p / q)`. \"},\n {\"theorem\":\n  \"∀ {p : ℕ}, Nat.Prime p → ∀ {n : ℕ}, 0 < n → Nat.totient (p ^ n) = p ^ (n - 1) * (p - 1)\",\n  \"isProp\": true,\n  \"docString\":\n  \"When `p` is prime, then the totient of `p ^ n` is `p ^ (n - 1) * (p - 1)` \"},\n {\"theorem\":\n  \"∀ (p : ℕ) (a : ZMod p), a ^ (p - 1) = 1 → (∀ (q : ℕ), Nat.Prime q → q ∣ p - 1 → a ^ ((p - 1) / q) ≠ 1) → Nat.Prime p\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `a^(p-1) = 1 mod p`, but `a^((p-1)/q) ≠ 1 mod p` for all prime factors `q` of `p-1`, then `p`\\nis prime. This is true because `a` has order `p-1` in the multiplicative group mod `p`, so this\\ngroup must itself have order `p-1`, which only happens when `p` is prime.\\n\"},\n {\"theorem\": \"∀ {p : ℕ} [inst : Fact (Nat.Prime p)], p % 2 = 1 ↔ p ≠ 2\",\n  \"isProp\": true,\n  \"docString\": \"A prime `p` satisfies `p % 2 = 1` if and only if `p ≠ 2`. \"},\n {\"theorem\": \"∀ {n : ℕ}, ↑(Nat.factorial (n - 1)) = -1 → n ≠ 1 → Nat.Prime n\",\n  \"isProp\": true,\n  \"docString\":\n  \"For `n ≠ 1`, `(n-1)!` is congruent to `-1` modulo `n` only if n is prime. \"},\n {\"theorem\": \"∀ {p n : ℕ}, Nat.Prime p → p ∣ n → IsSquare (-1) → p % 4 ≠ 3\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a prime `p` divides `n` such that `-1` is a square modulo `n`, then `p % 4 ≠ 3`. \"},\n {\"theorem\": \"∀ {p : ℕ}, Nat.Prime p → ↑(Nat.factorization p) p = 1\",\n  \"isProp\": true,\n  \"docString\": \"The multiplicity of prime `p` in `p` is `1` \"},\n {\"theorem\":\n  \"∀ {p : ℕ}, Nat.Prime p → ∀ {n : ℤ}, IsCoprime n ↑p → n ^ (p - 1) ≡ 1 [ZMOD ↑p]\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Fermat's Little Theorem**: for all `a : ℤ` coprime to `p`, we have\\n`a ^ (p - 1) ≡ 1 [ZMOD p]`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : Monoid α] {p q : α}, Irreducible p → Irreducible q → p ∣ q → q ∣ p\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `p` and `q` are irreducible, then `p ∣ q` implies `q ∣ p`. \"},\n {\"theorem\":\n  \"∀ {n : ℕ}, n ≠ 0 → ∀ (p : ℕ), p ≠ 1 → ∃ e n', ¬p ∣ n' ∧ n = p ^ e * n'\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `n` is a nonzero natural number and `p ≠ 1`, then there are natural numbers `e`\\nand `n'` such that `n'` is not divisible by `p` and `n = p^e * n'`. \"},\n {\"theorem\": \"∀ {n : ℕ}, n ≠ 1 → (Nat.Prime n ↔ ↑(Nat.factorial (n - 1)) = -1)\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Wilson's Theorem**: For `n ≠ 1`, `(n-1)!` is congruent to `-1` modulo `n` iff n is prime. \"},\n {\"theorem\":\n  \"∀ {p : ℕ} [inst : Fact (Nat.Prime p)] {a : ZMod p}, a ≠ 0 → a ^ (p - 1) = 1\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Fermat's Little Theorem**: for all nonzero `a : ZMod p`, we have `a ^ (p - 1) = 1`. \"},\n {\"theorem\": \"∀ (p' : ℕ), 2 < LucasLehmer.q (p' + 2)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `1 < p`, then `q p`, the smallest prime factor of `mersenne p`, is more than 2. \"}]\n", "prompt_cons": "/-- If `p` and `q` are odd primes and `p % 4 = 1`, then `q` is a square mod `p` iff\n`p` is a square mod `q`. -/\ntheorem ∀ {p q : ℕ} [inst : Fact (Nat.Prime p)] [inst_1 : Fact (Nat.Prime q)], p % 4 = 1 → q ≠ 2 → (IsSquare ↑q ↔ IsSquare ↑p) :=\n\n/-- The `p`-adic norm of `q` is `1` if `q` is prime and not equal to `p`. -/\ntheorem ∀ {p q : ℕ} [p_prime : Fact (Nat.Prime p)] [q_prime : Fact (Nat.Prime q)], p ≠ q → padicNorm p ↑q = 1 :=\n\n/-- The Law of Quadratic Reciprocity: if `p` and `q` are odd primes and `p % 4 = 1`,\nthen `(q / p) = (p / q)`. -/\ntheorem ∀ {p q : ℕ} [inst : Fact (Nat.Prime p)] [inst_1 : Fact (Nat.Prime q)],\n  p % 4 = 1 → q ≠ 2 → legendreSym q ↑p = legendreSym p ↑q :=\n\n/-- **The Law of Quadratic Reciprocity**: if `p` and `q` are distinct odd primes, then\n`(q / p) * (p / q) = (-1)^((p-1)(q-1)/4)`. -/\ntheorem ∀ {p q : ℕ} [inst : Fact (Nat.Prime p)] [inst_1 : Fact (Nat.Prime q)],\n  p ≠ 2 → q ≠ 2 → p ≠ q → legendreSym q ↑p * legendreSym p ↑q = (-1) ^ (p / 2 * (q / 2)) :=\n\n/-- The Law of Quadratic Reciprocity: if `p` and `q` are odd primes, then\n`(q / p) = (-1)^((p-1)(q-1)/4) * (p / q)`. -/\ntheorem ∀ {p q : ℕ} [inst : Fact (Nat.Prime p)] [inst_1 : Fact (Nat.Prime q)],\n  p ≠ 2 → q ≠ 2 → legendreSym q ↑p = (-1) ^ (p / 2 * (q / 2)) * legendreSym p ↑q :=\n\n/-- When `p` is prime, then the totient of `p ^ (n + 1)` is `p ^ n * (p - 1)` -/\ntheorem ∀ {p : ℕ}, Nat.Prime p → ∀ (n : ℕ), Nat.totient (p ^ (n + 1)) = p ^ n * (p - 1) :=\n\n/-- If `p` and `q` are distinct primes that are both congruent to `3` mod `4`, then `q` is\na square mod `p` iff `p` is a nonsquare mod `q`. -/\ntheorem ∀ {p q : ℕ} [inst : Fact (Nat.Prime p)] [inst_1 : Fact (Nat.Prime q)],\n  p % 4 = 3 → q % 4 = 3 → p ≠ q → (IsSquare ↑q ↔ ¬IsSquare ↑p) :=\n\n/-- The Law of Quadratic Reciprocity: if `p` and `q` are primes that are both congruent\nto `3` mod `4`, then `(q / p) = -(p / q)`. -/\ntheorem ∀ {p q : ℕ} [inst : Fact (Nat.Prime p)] [inst_1 : Fact (Nat.Prime q)],\n  p % 4 = 3 → q % 4 = 3 → legendreSym q ↑p = -legendreSym p ↑q :=\n\n/-- When `p` is prime, then the totient of `p ^ n` is `p ^ (n - 1) * (p - 1)` -/\ntheorem ∀ {p : ℕ}, Nat.Prime p → ∀ {n : ℕ}, 0 < n → Nat.totient (p ^ n) = p ^ (n - 1) * (p - 1) :=\n\n/-- If `a^(p-1) = 1 mod p`, but `a^((p-1)/q) ≠ 1 mod p` for all prime factors `q` of `p-1`, then `p`\nis prime. This is true because `a` has order `p-1` in the multiplicative group mod `p`, so this\ngroup must itself have order `p-1`, which only happens when `p` is prime. -/\ntheorem ∀ (p : ℕ) (a : ZMod p), a ^ (p - 1) = 1 → (∀ (q : ℕ), Nat.Prime q → q ∣ p - 1 → a ^ ((p - 1) / q) ≠ 1) → Nat.Prime p :=\n\n/-- A prime `p` satisfies `p % 2 = 1` if and only if `p ≠ 2`. -/\ntheorem ∀ {p : ℕ} [inst : Fact (Nat.Prime p)], p % 2 = 1 ↔ p ≠ 2 :=\n\n/-- For `n ≠ 1`, `(n-1)!` is congruent to `-1` modulo `n` only if n is prime. -/\ntheorem ∀ {n : ℕ}, ↑(Nat.factorial (n - 1)) = -1 → n ≠ 1 → Nat.Prime n :=\n\n/-- If a prime `p` divides `n` such that `-1` is a square modulo `n`, then `p % 4 ≠ 3`. -/\ntheorem ∀ {p n : ℕ}, Nat.Prime p → p ∣ n → IsSquare (-1) → p % 4 ≠ 3 :=\n\n/-- The multiplicity of prime `p` in `p` is `1` -/\ntheorem ∀ {p : ℕ}, Nat.Prime p → ↑(Nat.factorization p) p = 1 :=\n\n/-- **Fermat's Little Theorem**: for all `a : ℤ` coprime to `p`, we have\n`a ^ (p - 1) ≡ 1 [ZMOD p]`. -/\ntheorem ∀ {p : ℕ}, Nat.Prime p → ∀ {n : ℤ}, IsCoprime n ↑p → n ^ (p - 1) ≡ 1 [ZMOD ↑p] :=\n\n/-- If `p` and `q` are irreducible, then `p ∣ q` implies `q ∣ p`. -/\ntheorem ∀ {α : Type u_1} [inst : Monoid α] {p q : α}, Irreducible p → Irreducible q → p ∣ q → q ∣ p :=\n\n/-- If `n` is a nonzero natural number and `p ≠ 1`, then there are natural numbers `e`\nand `n'` such that `n'` is not divisible by `p` and `n = p^e * n'`. -/\ntheorem ∀ {n : ℕ}, n ≠ 0 → ∀ (p : ℕ), p ≠ 1 → ∃ e n', ¬p ∣ n' ∧ n = p ^ e * n' :=\n\n/-- **Wilson's Theorem**: For `n ≠ 1`, `(n-1)!` is congruent to `-1` modulo `n` iff n is prime. -/\ntheorem ∀ {n : ℕ}, n ≠ 1 → (Nat.Prime n ↔ ↑(Nat.factorial (n - 1)) = -1) :=\n\n/-- **Fermat's Little Theorem**: for all nonzero `a : ZMod p`, we have `a ^ (p - 1) = 1`. -/\ntheorem ∀ {p : ℕ} [inst : Fact (Nat.Prime p)] {a : ZMod p}, a ≠ 0 → a ^ (p - 1) = 1 :=\n\n/-- If `1 < p`, then `q p`, the smallest prime factor of `mersenne p`, is more than 2. -/\ntheorem ∀ (p' : ℕ), 2 < LucasLehmer.q (p' + 2) :=\n\n/-- Let `p` and `q` be distinct odd primes such that `p - 1` divides `q - 1`. If `(n, pq) = 1`, show that `n^(q 1) ≡ 1 (mod pq)`. -/\ntheorem", "choices": ["∀ {p q n : ℕ} [inst : Fact (Nat.Prime p)] [inst_1 : Fact (Nat.Prime q)],\n  p ≠ 2 → q ≠ 2 → p ≠ q → (p - 1) ∣ (q - 1) → IsCoprime n (p * q) → n ^ (q - 1) ≡ 1 [ZMOD (p * q)] ", "∀ {p q : ℕ} [inst : Fact (Nat.Prime p)] [inst_1 : Fact (Nat.Prime q)], p ≠ 2 → q ≠ 2 → p ≠ q → (p - 1) ∣ (q - 1) → ∀ {n : ℤ}, IsCoprime n ↑(p * q) → n ^ (q - 1) ≡ 1 [ZMOD ↑(p * q)] ", "forall {p q n : ℕ} [inst : Fact (Nat.Prime p)] [inst_1 : Fact (Nat.Prime q)],\n  p ≠ 2 → q ≠ 2 → p ≠ q → (p - 1) ∣ (q - 1) → IsCoprime n (p * q) → n ^ (q - 1) ≡ 1 [ZMOD (p * q)] ", "∀ {p q : ℕ} [inst : Fact (Nat.Prime p)] [inst_1 : Fact (Nat.Prime q)],\n  p ≠ 2 → q ≠ 2 → p ≠ q → (p - 1) ∣ (q - 1) → ∀ {n : ℤ}, IsCoprime n ↑(p * q) → n ^ (q - 1) ≡ 1 [ZMOD (↑p * ↑q)] ", "∀ {p q : ℕ} [inst : Fact (Nat.Prime p)] [inst_1 : Fact (Nat.Prime q)],\n  p ≠ 2 → q ≠ 2 → p ≠ q → (p - 1) ∣ (q - 1) → ∀ {n : ℕ}, IsCoprime n (p * q) → n ^ (q - 1) ≡ 1 [MOD (p * q)] ", "∀ {p q n : ℕ} [inst : Fact (Nat.Prime p)] [inst_1 : Fact (Nat.Prime q)],\n  p ≠ 2 → q ≠ 2 → p ≠ q → (p - 1) ∣ (q - 1) → IsCoprime n (p * q) → (n ^ (q - 1)) ≡ 1 [ZMOD (p * q)] ", "∀ {p q : ℕ} [inst : Fact (Nat.Prime p)] [inst_1 : Fact (Nat.Prime q)], p ≠ q → p % 2 = 1 → q % 2 = 1 → (p - 1) ∣ (q - 1) → ∀ {n : ℤ}, IsCoprime n ↑(p * q) → n ^ (q - 1) ≡ 1 [ZMOD ↑(p * q)] ", "∀ {p q n : ℕ} [inst : Fact (Nat.Prime p)] [inst_1 : Fact (Nat.Prime q)],\n  p ≠ q → (p - 1) ∣ (q - 1) → IsCoprime n (p * q) → (n ^ (q - 1)) ≡ 1 [ZMOD (p * q)] ", "∀ {p q : ℕ} [inst : Fact (Nat.Prime p)] [inst_1 : Fact (Nat.Prime q)], p ≠ 2 → q ≠ 2 → p ≠ q → (p - 1) ∣ (q - 1) → ∀ {n : ℤ}, IsCoprime n (↑p * ↑q) → n ^ (q - 1) ≡ 1 [ZMOD (↑p * ↑q)] ", "∀ {p q : ℕ} [inst : Fact (Nat.Prime p)] [inst_1 : Fact (Nat.Prime q)],\n  p ≠ 2 → q ≠ 2 → p ≠ q → (p - 1) ∣ (q - 1) → ∀ {n : ℕ}, IsCoprime n (p * q) → n ^ (q - 1) ≡ 1 [ZMOD (p * q)] "]}
{"docString": "Consider a prime `p` of the form `4t + 3`. Show that `a` is a primitive root modulo `p` if and only if `-a` has order `(p - 1) / 2`.", "prompts": "[{\"theorem\":\n  \"∀ (p : ℕ) (a : ZMod p), a ^ (p - 1) = 1 → (∀ (q : ℕ), Nat.Prime q → q ∣ p - 1 → a ^ ((p - 1) / q) ≠ 1) → Nat.Prime p\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `a^(p-1) = 1 mod p`, but `a^((p-1)/q) ≠ 1 mod p` for all prime factors `q` of `p-1`, then `p`\\nis prime. This is true because `a` has order `p-1` in the multiplicative group mod `p`, so this\\ngroup must itself have order `p-1`, which only happens when `p` is prime.\\n\"},\n {\"theorem\":\n  \"∀ {p : ℕ}, Nat.Prime p → ∀ {n : ℤ}, IsCoprime n ↑p → n ^ (p - 1) ≡ 1 [ZMOD ↑p]\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Fermat's Little Theorem**: for all `a : ℤ` coprime to `p`, we have\\n`a ^ (p - 1) ≡ 1 [ZMOD p]`. \"},\n {\"theorem\":\n  \"∀ {a : ℤ} {p : ℕ} [inst : Fact (Nat.Prime p)], jacobiSym a p = -1 ↔ ¬IsSquare ↑a\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `p` is prime, then `J(a | p)` is `-1` iff `a` is not a square modulo `p`. \"},\n {\"theorem\": \"∀ {p n : ℕ}, Nat.Prime p → p ∣ n → IsSquare (-1) → p % 4 ≠ 3\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a prime `p` divides `n` such that `-1` is a square modulo `n`, then `p % 4 ≠ 3`. \"},\n {\"theorem\":\n  \"∀ (p : ℕ) [inst : Fact (Nat.Prime p)] {a : ZMod p}, a ≠ 0 → a ^ (p / 2) = 1 ∨ a ^ (p / 2) = -1\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `a : ZMod p` is nonzero, then `a^(p/2)` is either `1` or `-1`. \"},\n {\"theorem\":\n  \"∀ {p : ℕ} [inst : Fact (Nat.Prime p)], p ≠ 2 → (IsSquare (-2) ↔ p % 8 = 1 ∨ p % 8 = 3)\",\n  \"isProp\": true,\n  \"docString\":\n  \"`-2` is a square modulo an odd prime `p` iff `p` is congruent to `1` or `3` mod `8`. \"},\n {\"theorem\":\n  \"∀ {a : ℤ} {p : ℕ} [inst : Fact (Nat.Prime p)], jacobiSym a p = 1 → IsSquare ↑a\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `p` is prime and `J(a | p) = 1`, then `a` is a square mod `p`. \"},\n {\"theorem\":\n  \"∀ {p : ℕ} [inst : Fact (Nat.Prime p)] {a : ℤ},\\n  jacobiSym a p = -1 → ∀ {x y : ℤ}, ↑p ∣ x ^ 2 - a * y ^ 2 → ↑p ∣ x ∧ ↑p ∣ y\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `p` is prime, `J(a | p) = -1` and `p` divides `x^2 - a*y^2`, then `p` must divide\\n`x` and `y`. \"},\n {\"theorem\":\n  \"∀ {p : ℕ} [inst : Fact (Nat.Prime p)] {a : ZMod p}, a ≠ 0 → a ^ (p - 1) = 1\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Fermat's Little Theorem**: for all nonzero `a : ZMod p`, we have `a ^ (p - 1) = 1`. \"},\n {\"theorem\":\n  \"∀ {p q : ℕ} [inst : Fact (Nat.Prime p)] [inst_1 : Fact (Nat.Prime q)],\\n  p % 4 = 3 → q % 4 = 3 → legendreSym q ↑p = -legendreSym p ↑q\",\n  \"isProp\": true,\n  \"docString\":\n  \"The Law of Quadratic Reciprocity: if `p` and `q` are primes that are both congruent\\nto `3` mod `4`, then `(q / p) = -(p / q)`. \"},\n {\"theorem\":\n  \"∀ {p : ℕ}, Nat.Prime p → ∀ (n : ℕ), Nat.totient (p ^ (n + 1)) = p ^ n * (p - 1)\",\n  \"isProp\": true,\n  \"docString\":\n  \"When `p` is prime, then the totient of `p ^ (n + 1)` is `p ^ n * (p - 1)` \"},\n {\"theorem\": \"∀ {p : ℕ} [inst : Fact (Nat.Prime p)], IsSquare (-1) ↔ p % 4 ≠ 3\",\n  \"isProp\": true,\n  \"docString\":\n  \"`-1` is a square in `ZMod p` iff `p` is not congruent to `3` mod `4`. \"},\n {\"theorem\":\n  \"∀ {a : ℤ} {n : ℕ}, jacobiSym a n = -1 → ∃ p x, p ∣ n ∧ jacobiSym a p = -1\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `J(a | n) = -1`, then `n` has a prime divisor `p` such that `J(a | p) = -1`. \"},\n {\"theorem\":\n  \"∀ (p : ℕ) [inst : Fact (Nat.Prime p)] (a : (ZMod p)ˣ), a ^ (p - 1) = 1\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Fermat's Little Theorem**: for every unit `a` of `ZMod p`, we have `a ^ (p - 1) = 1`. \"},\n {\"theorem\":\n  \"∀ {p : ℕ}, Nat.Prime p → ∀ {n : ℕ}, 0 < n → Nat.totient (p ^ n) = p ^ (n - 1) * (p - 1)\",\n  \"isProp\": true,\n  \"docString\":\n  \"When `p` is prime, then the totient of `p ^ n` is `p ^ (n - 1) * (p - 1)` \"},\n {\"theorem\":\n  \"∀ {a : ℤ} {p : ℕ} [pp : Fact (Nat.Prime p)], ↑a = 0 ↔ Int.gcd a ↑p ≠ 1\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `p` is a prime and `a` is an integer, then `a : ZMod p` is zero if and only if\\n`gcd a p ≠ 1`. \"},\n {\"theorem\": \"∀ {p : ℕ} [inst : Fact (Nat.Prime p)], p % 2 = 1 ↔ p ≠ 2\",\n  \"isProp\": true,\n  \"docString\": \"A prime `p` satisfies `p % 2 = 1` if and only if `p ≠ 2`. \"},\n {\"theorem\":\n  \"∀ {a p k : ℕ}, Nat.Prime p → ¬a ∣ p ^ k → a ∣ p ^ (k + 1) → a = p ^ (k + 1)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `p` is prime,\\nand `a` doesn't divide `p^k`, but `a` does divide `p^(k+1)`\\nthen `a = p^(k+1)`.\\n\"},\n {\"theorem\":\n  \"∀ (p : ℕ) [inst : Fact (Nat.Prime p)] (a : ℤ), ↑(legendreSym p a) = ↑a ^ (p / 2)\",\n  \"isProp\": true,\n  \"docString\":\n  \"We have the congruence `legendreSym p a ≡ a ^ (p / 2) mod p`. \"},\n {\"theorem\":\n  \"∀ {p a b : ℕ}, p ∈ Nat.factors a → b ≠ 0 → p ∈ Nat.factors (a * b)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `p` is a prime factor of `a` then `p` is also a prime factor of `a * b` for any `b > 0` \"}]\n", "prompt_cons": "/-- If `a^(p-1) = 1 mod p`, but `a^((p-1)/q) ≠ 1 mod p` for all prime factors `q` of `p-1`, then `p`\nis prime. This is true because `a` has order `p-1` in the multiplicative group mod `p`, so this\ngroup must itself have order `p-1`, which only happens when `p` is prime. -/\ntheorem ∀ (p : ℕ) (a : ZMod p), a ^ (p - 1) = 1 → (∀ (q : ℕ), Nat.Prime q → q ∣ p - 1 → a ^ ((p - 1) / q) ≠ 1) → Nat.Prime p :=\n\n/-- **Fermat's Little Theorem**: for all `a : ℤ` coprime to `p`, we have\n`a ^ (p - 1) ≡ 1 [ZMOD p]`. -/\ntheorem ∀ {p : ℕ}, Nat.Prime p → ∀ {n : ℤ}, IsCoprime n ↑p → n ^ (p - 1) ≡ 1 [ZMOD ↑p] :=\n\n/-- If `p` is prime, then `J(a | p)` is `-1` iff `a` is not a square modulo `p`. -/\ntheorem ∀ {a : ℤ} {p : ℕ} [inst : Fact (Nat.Prime p)], jacobiSym a p = -1 ↔ ¬IsSquare ↑a :=\n\n/-- If a prime `p` divides `n` such that `-1` is a square modulo `n`, then `p % 4 ≠ 3`. -/\ntheorem ∀ {p n : ℕ}, Nat.Prime p → p ∣ n → IsSquare (-1) → p % 4 ≠ 3 :=\n\n/-- If `a : ZMod p` is nonzero, then `a^(p/2)` is either `1` or `-1`. -/\ntheorem ∀ (p : ℕ) [inst : Fact (Nat.Prime p)] {a : ZMod p}, a ≠ 0 → a ^ (p / 2) = 1 ∨ a ^ (p / 2) = -1 :=\n\n/-- `-2` is a square modulo an odd prime `p` iff `p` is congruent to `1` or `3` mod `8`. -/\ntheorem ∀ {p : ℕ} [inst : Fact (Nat.Prime p)], p ≠ 2 → (IsSquare (-2) ↔ p % 8 = 1 ∨ p % 8 = 3) :=\n\n/-- If `p` is prime and `J(a | p) = 1`, then `a` is a square mod `p`. -/\ntheorem ∀ {a : ℤ} {p : ℕ} [inst : Fact (Nat.Prime p)], jacobiSym a p = 1 → IsSquare ↑a :=\n\n/-- If `p` is prime, `J(a | p) = -1` and `p` divides `x^2 - a*y^2`, then `p` must divide\n`x` and `y`. -/\ntheorem ∀ {p : ℕ} [inst : Fact (Nat.Prime p)] {a : ℤ},\n  jacobiSym a p = -1 → ∀ {x y : ℤ}, ↑p ∣ x ^ 2 - a * y ^ 2 → ↑p ∣ x ∧ ↑p ∣ y :=\n\n/-- **Fermat's Little Theorem**: for all nonzero `a : ZMod p`, we have `a ^ (p - 1) = 1`. -/\ntheorem ∀ {p : ℕ} [inst : Fact (Nat.Prime p)] {a : ZMod p}, a ≠ 0 → a ^ (p - 1) = 1 :=\n\n/-- The Law of Quadratic Reciprocity: if `p` and `q` are primes that are both congruent\nto `3` mod `4`, then `(q / p) = -(p / q)`. -/\ntheorem ∀ {p q : ℕ} [inst : Fact (Nat.Prime p)] [inst_1 : Fact (Nat.Prime q)],\n  p % 4 = 3 → q % 4 = 3 → legendreSym q ↑p = -legendreSym p ↑q :=\n\n/-- When `p` is prime, then the totient of `p ^ (n + 1)` is `p ^ n * (p - 1)` -/\ntheorem ∀ {p : ℕ}, Nat.Prime p → ∀ (n : ℕ), Nat.totient (p ^ (n + 1)) = p ^ n * (p - 1) :=\n\n/-- `-1` is a square in `ZMod p` iff `p` is not congruent to `3` mod `4`. -/\ntheorem ∀ {p : ℕ} [inst : Fact (Nat.Prime p)], IsSquare (-1) ↔ p % 4 ≠ 3 :=\n\n/-- If `J(a | n) = -1`, then `n` has a prime divisor `p` such that `J(a | p) = -1`. -/\ntheorem ∀ {a : ℤ} {n : ℕ}, jacobiSym a n = -1 → ∃ p x, p ∣ n ∧ jacobiSym a p = -1 :=\n\n/-- **Fermat's Little Theorem**: for every unit `a` of `ZMod p`, we have `a ^ (p - 1) = 1`. -/\ntheorem ∀ (p : ℕ) [inst : Fact (Nat.Prime p)] (a : (ZMod p)ˣ), a ^ (p - 1) = 1 :=\n\n/-- When `p` is prime, then the totient of `p ^ n` is `p ^ (n - 1) * (p - 1)` -/\ntheorem ∀ {p : ℕ}, Nat.Prime p → ∀ {n : ℕ}, 0 < n → Nat.totient (p ^ n) = p ^ (n - 1) * (p - 1) :=\n\n/-- If `p` is a prime and `a` is an integer, then `a : ZMod p` is zero if and only if\n`gcd a p ≠ 1`. -/\ntheorem ∀ {a : ℤ} {p : ℕ} [pp : Fact (Nat.Prime p)], ↑a = 0 ↔ Int.gcd a ↑p ≠ 1 :=\n\n/-- A prime `p` satisfies `p % 2 = 1` if and only if `p ≠ 2`. -/\ntheorem ∀ {p : ℕ} [inst : Fact (Nat.Prime p)], p % 2 = 1 ↔ p ≠ 2 :=\n\n/-- If `p` is prime,\nand `a` doesn't divide `p^k`, but `a` does divide `p^(k+1)`\nthen `a = p^(k+1)`. -/\ntheorem ∀ {a p k : ℕ}, Nat.Prime p → ¬a ∣ p ^ k → a ∣ p ^ (k + 1) → a = p ^ (k + 1) :=\n\n/-- We have the congruence `legendreSym p a ≡ a ^ (p / 2) mod p`. -/\ntheorem ∀ (p : ℕ) [inst : Fact (Nat.Prime p)] (a : ℤ), ↑(legendreSym p a) = ↑a ^ (p / 2) :=\n\n/-- If `p` is a prime factor of `a` then `p` is also a prime factor of `a * b` for any `b > 0` -/\ntheorem ∀ {p a b : ℕ}, p ∈ Nat.factors a → b ≠ 0 → p ∈ Nat.factors (a * b) :=\n\n/-- Consider a prime `p` of the form `4t + 3`. Show that `a` is a primitive root modulo `p` if and only if `-a` has order `(p - 1) / 2`. -/\ntheorem", "choices": ["∀ {p : ℕ} [inst : Fact (Nat.Prime p)] {a : ℕ}, p % 4 = 3 → a.gcd p = 1 → \n  (∀ (x : ℕ), ZMod.p_unit a ^ x ≠ 1) ↔ (∀ (x : ℕ), x < (p - 1) / 2 → ZMod.p_unit (-a) ^ x ≠ 1) ", "∀ {p : ℕ} [inst : Fact (Nat.Prime p)] (a : ℕ), p % 4 = 3 → (is_primitive_root a p ↔ order_of (-a) = (p - 1) / 2) ", "∀ {p : ℕ} [inst : Fact (Nat.Prime p)] (a : (ZMod p)ˣ), p % 4 = 3 → (is_primitive_root a p ↔ order_of (-a) = (p - 1) / 2) ", "∀ {p : ℕ} [inst : Fact (Nat.Prime p)], p % 4 = 3 → ∀ {a : ℕ}, IsPrimitiveRoot a p ↔ orderOf (-a : ZMod p) = (p - 1) / 2 ", "∀ {p a : ℕ} [inst : Fact (Nat.Prime p)], p % 4 = 3 → (nat_primitive_root a p ↔ order_of (-a) = (p - 1) / 2) ", "∀ {p : ℕ} [inst : Fact (Nat.Prime p)] (a : (ZMod p)ˣ),\n  p % 4 = 3 → is_primitive_root a (p - 1) ↔ order_of (-a) = (p - 1) / 2 ", "∀ {p : ℕ} [inst : Fact (Nat.Prime p)], p % 4 = 3 → ∀ {a : ℕ}, ZMod.isPrimitiveRoot a p ↔ ZMod.isPrimitiveRoot (-a) ((p - 1) / 2) ", "∀ (p : ℕ) [inst : Fact (Nat.Prime p)], p % 4 = 3 → ∀ (a : ZMod p), a.is_primitive_root ↔ ((-a) ^ ((p - 1) / 2) ≠ 1) ", "∀ {p : ℕ} [inst : Fact (Nat.Prime p)] {a : ℕ}, p % 4 = 3 → IsPrimitiveRoot a p ↔ order_of (Units.mk (-a) (-a) (a * -a) sorry) = (p - 1) / 2 ", "∀ (p : ℕ) [inst : Fact (Nat.Prime p)], p % 4 = 3 → ∀ (a : ℕ), Nat.Coprime a p → is_primitive_root a p ↔ order_of (-a) = (p - 1) / 2 "]}
{"docString": "Let `p` be an odd prime. Show that `a` is a primitive root modulo `p` if and only if `a^((p - 1) / q) ≢ 1 (mod p)` for all prime divisors `q` of `p - 1`.", "prompts": "[{\"theorem\":\n  \"∀ (p : ℕ) (a : ZMod p), a ^ (p - 1) = 1 → (∀ (q : ℕ), Nat.Prime q → q ∣ p - 1 → a ^ ((p - 1) / q) ≠ 1) → Nat.Prime p\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `a^(p-1) = 1 mod p`, but `a^((p-1)/q) ≠ 1 mod p` for all prime factors `q` of `p-1`, then `p`\\nis prime. This is true because `a` has order `p-1` in the multiplicative group mod `p`, so this\\ngroup must itself have order `p-1`, which only happens when `p` is prime.\\n\"},\n {\"theorem\":\n  \"∀ {p q : ℕ} [inst : Fact (Nat.Prime p)] [inst_1 : Fact (Nat.Prime q)], p % 4 = 1 → q ≠ 2 → (IsSquare ↑q ↔ IsSquare ↑p)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `p` and `q` are odd primes and `p % 4 = 1`, then `q` is a square mod `p` iff\\n`p` is a square mod `q`. \"},\n {\"theorem\":\n  \"∀ {p : ℕ}, Nat.Prime p → ∀ {n : ℤ}, IsCoprime n ↑p → n ^ (p - 1) ≡ 1 [ZMOD ↑p]\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Fermat's Little Theorem**: for all `a : ℤ` coprime to `p`, we have\\n`a ^ (p - 1) ≡ 1 [ZMOD p]`. \"},\n {\"theorem\":\n  \"∀ {a : ℤ} {p : ℕ} [pp : Fact (Nat.Prime p)], ↑a = 0 ↔ Int.gcd a ↑p ≠ 1\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `p` is a prime and `a` is an integer, then `a : ZMod p` is zero if and only if\\n`gcd a p ≠ 1`. \"},\n {\"theorem\": \"∀ {p : ℕ} [inst : Fact (Nat.Prime p)], p % 2 = 1 ↔ p ≠ 2\",\n  \"isProp\": true,\n  \"docString\": \"A prime `p` satisfies `p % 2 = 1` if and only if `p ≠ 2`. \"},\n {\"theorem\": \"∀ {a : ℤ} {p : ℕ}, Nat.Prime p → Int.gcd a ↑p = 1 → ↑a ≠ 0\",\n  \"isProp\": true,\n  \"docString\":\n  \"If an integer `a` and a prime `p` satisfy `gcd a p = 1`, then `a : ZMod p` is nonzero. \"},\n {\"theorem\":\n  \"∀ {p : ℕ} [inst : Fact (Nat.Prime p)] {a : ZMod p}, a ≠ 0 → a ^ (p - 1) = 1\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Fermat's Little Theorem**: for all nonzero `a : ZMod p`, we have `a ^ (p - 1) = 1`. \"},\n {\"theorem\":\n  \"∀ {a : ℤ} {p : ℕ} [inst : Fact (Nat.Prime p)], jacobiSym a p = 1 → IsSquare ↑a\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `p` is prime and `J(a | p) = 1`, then `a` is a square mod `p`. \"},\n {\"theorem\": \"∀ {a : ℤ} {p : ℕ}, Nat.Prime p → Int.gcd a ↑p ≠ 1 → ↑a = 0\",\n  \"isProp\": true,\n  \"docString\":\n  \"If an integer `a` and a prime `p` satisfy `gcd a p ≠ 1`, then `a : ZMod p` is zero. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : Monoid α] {p q : α}, Irreducible p → Irreducible q → p ∣ q → q ∣ p\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `p` and `q` are irreducible, then `p ∣ q` implies `q ∣ p`. \"},\n {\"theorem\":\n  \"∀ {p q : ℕ} [inst : Fact (Nat.Prime p)] [inst_1 : Fact (Nat.Prime q)],\\n  p % 4 = 1 → q ≠ 2 → legendreSym q ↑p = legendreSym p ↑q\",\n  \"isProp\": true,\n  \"docString\":\n  \"The Law of Quadratic Reciprocity: if `p` and `q` are odd primes and `p % 4 = 1`,\\nthen `(q / p) = (p / q)`. \"},\n {\"theorem\":\n  \"∀ (p : ℕ) [inst : Fact (Nat.Prime p)] (a : (ZMod p)ˣ), a ^ (p - 1) = 1\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Fermat's Little Theorem**: for every unit `a` of `ZMod p`, we have `a ^ (p - 1) = 1`. \"},\n {\"theorem\":\n  \"∀ {R : Type u} [inst : CommRing R] {p : Polynomial R},\\n  p ≠ 0 → ∀ {a : R} {n : ℕ}, n ≤ Polynomial.rootMultiplicity a p ↔ (Polynomial.X - ↑Polynomial.C a) ^ n ∣ p\",\n  \"isProp\": true,\n  \"docString\":\n  \"The multiplicity of `a` as root of a nonzero polynomial `p` is at least `n` iff\\n`(X - a) ^ n` divides `p`. \"},\n {\"theorem\":\n  \"∀ {M : Type u_1} [inst : CommMonoidWithZero M] {p : M} {L : List M}, Prime p → (p ∣ List.prod L ↔ ∃ a, a ∈ L ∧ p ∣ a)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Prime `p` divides the product of a list `L` iff it divides some `a ∈ L` \"},\n {\"theorem\":\n  \"∀ (p : ℕ) [inst : Fact (Nat.Prime p)] {a : ZMod p}, a ≠ 0 → a ^ (p / 2) = 1 ∨ a ^ (p / 2) = -1\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `a : ZMod p` is nonzero, then `a^(p/2)` is either `1` or `-1`. \"},\n {\"theorem\":\n  \"∀ {p a b : ℕ}, p ∈ Nat.factors a → b ≠ 0 → p ∈ Nat.factors (a * b)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `p` is a prime factor of `a` then `p` is also a prime factor of `a * b` for any `b > 0` \"},\n {\"theorem\":\n  \"∀ {a p k : ℕ}, Nat.Prime p → ¬a ∣ p ^ k → a ∣ p ^ (k + 1) → a = p ^ (k + 1)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `p` is prime,\\nand `a` doesn't divide `p^k`, but `a` does divide `p^(k+1)`\\nthen `a = p^(k+1)`.\\n\"},\n {\"theorem\":\n  \"∀ {p q : ℕ} [p_prime : Fact (Nat.Prime p)] [q_prime : Fact (Nat.Prime q)], p ≠ q → padicNorm p ↑q = 1\",\n  \"isProp\": true,\n  \"docString\":\n  \"The `p`-adic norm of `q` is `1` if `q` is prime and not equal to `p`. \"},\n {\"theorem\":\n  \"∀ {p : ℕ}, Nat.Prime p → ∀ (n : ℕ), Nat.totient (p ^ (n + 1)) = p ^ n * (p - 1)\",\n  \"isProp\": true,\n  \"docString\":\n  \"When `p` is prime, then the totient of `p ^ (n + 1)` is `p ^ n * (p - 1)` \"},\n {\"theorem\":\n  \"∀ {p a b : ℕ}, Nat.coprime a b → p ∈ Nat.factors a → ↑(Nat.factorization (a * b)) p = ↑(Nat.factorization a) p\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `p` is a prime factor of `a` then the power of `p` in `a` is the same that in `a * b`,\\nfor any `b` coprime to `a`. \"}]\n", "prompt_cons": "/-- If `a^(p-1) = 1 mod p`, but `a^((p-1)/q) ≠ 1 mod p` for all prime factors `q` of `p-1`, then `p`\nis prime. This is true because `a` has order `p-1` in the multiplicative group mod `p`, so this\ngroup must itself have order `p-1`, which only happens when `p` is prime. -/\ntheorem ∀ (p : ℕ) (a : ZMod p), a ^ (p - 1) = 1 → (∀ (q : ℕ), Nat.Prime q → q ∣ p - 1 → a ^ ((p - 1) / q) ≠ 1) → Nat.Prime p :=\n\n/-- If `p` and `q` are odd primes and `p % 4 = 1`, then `q` is a square mod `p` iff\n`p` is a square mod `q`. -/\ntheorem ∀ {p q : ℕ} [inst : Fact (Nat.Prime p)] [inst_1 : Fact (Nat.Prime q)], p % 4 = 1 → q ≠ 2 → (IsSquare ↑q ↔ IsSquare ↑p) :=\n\n/-- **Fermat's Little Theorem**: for all `a : ℤ` coprime to `p`, we have\n`a ^ (p - 1) ≡ 1 [ZMOD p]`. -/\ntheorem ∀ {p : ℕ}, Nat.Prime p → ∀ {n : ℤ}, IsCoprime n ↑p → n ^ (p - 1) ≡ 1 [ZMOD ↑p] :=\n\n/-- If `p` is a prime and `a` is an integer, then `a : ZMod p` is zero if and only if\n`gcd a p ≠ 1`. -/\ntheorem ∀ {a : ℤ} {p : ℕ} [pp : Fact (Nat.Prime p)], ↑a = 0 ↔ Int.gcd a ↑p ≠ 1 :=\n\n/-- A prime `p` satisfies `p % 2 = 1` if and only if `p ≠ 2`. -/\ntheorem ∀ {p : ℕ} [inst : Fact (Nat.Prime p)], p % 2 = 1 ↔ p ≠ 2 :=\n\n/-- If an integer `a` and a prime `p` satisfy `gcd a p = 1`, then `a : ZMod p` is nonzero. -/\ntheorem ∀ {a : ℤ} {p : ℕ}, Nat.Prime p → Int.gcd a ↑p = 1 → ↑a ≠ 0 :=\n\n/-- **Fermat's Little Theorem**: for all nonzero `a : ZMod p`, we have `a ^ (p - 1) = 1`. -/\ntheorem ∀ {p : ℕ} [inst : Fact (Nat.Prime p)] {a : ZMod p}, a ≠ 0 → a ^ (p - 1) = 1 :=\n\n/-- If `p` is prime and `J(a | p) = 1`, then `a` is a square mod `p`. -/\ntheorem ∀ {a : ℤ} {p : ℕ} [inst : Fact (Nat.Prime p)], jacobiSym a p = 1 → IsSquare ↑a :=\n\n/-- If an integer `a` and a prime `p` satisfy `gcd a p ≠ 1`, then `a : ZMod p` is zero. -/\ntheorem ∀ {a : ℤ} {p : ℕ}, Nat.Prime p → Int.gcd a ↑p ≠ 1 → ↑a = 0 :=\n\n/-- If `p` and `q` are irreducible, then `p ∣ q` implies `q ∣ p`. -/\ntheorem ∀ {α : Type u_1} [inst : Monoid α] {p q : α}, Irreducible p → Irreducible q → p ∣ q → q ∣ p :=\n\n/-- The Law of Quadratic Reciprocity: if `p` and `q` are odd primes and `p % 4 = 1`,\nthen `(q / p) = (p / q)`. -/\ntheorem ∀ {p q : ℕ} [inst : Fact (Nat.Prime p)] [inst_1 : Fact (Nat.Prime q)],\n  p % 4 = 1 → q ≠ 2 → legendreSym q ↑p = legendreSym p ↑q :=\n\n/-- **Fermat's Little Theorem**: for every unit `a` of `ZMod p`, we have `a ^ (p - 1) = 1`. -/\ntheorem ∀ (p : ℕ) [inst : Fact (Nat.Prime p)] (a : (ZMod p)ˣ), a ^ (p - 1) = 1 :=\n\n/-- The multiplicity of `a` as root of a nonzero polynomial `p` is at least `n` iff\n`(X - a) ^ n` divides `p`. -/\ntheorem ∀ {R : Type u} [inst : CommRing R] {p : Polynomial R},\n  p ≠ 0 → ∀ {a : R} {n : ℕ}, n ≤ Polynomial.rootMultiplicity a p ↔ (Polynomial.X - ↑Polynomial.C a) ^ n ∣ p :=\n\n/-- Prime `p` divides the product of a list `L` iff it divides some `a ∈ L` -/\ntheorem ∀ {M : Type u_1} [inst : CommMonoidWithZero M] {p : M} {L : List M}, Prime p → (p ∣ List.prod L ↔ ∃ a, a ∈ L ∧ p ∣ a) :=\n\n/-- If `a : ZMod p` is nonzero, then `a^(p/2)` is either `1` or `-1`. -/\ntheorem ∀ (p : ℕ) [inst : Fact (Nat.Prime p)] {a : ZMod p}, a ≠ 0 → a ^ (p / 2) = 1 ∨ a ^ (p / 2) = -1 :=\n\n/-- If `p` is a prime factor of `a` then `p` is also a prime factor of `a * b` for any `b > 0` -/\ntheorem ∀ {p a b : ℕ}, p ∈ Nat.factors a → b ≠ 0 → p ∈ Nat.factors (a * b) :=\n\n/-- If `p` is prime,\nand `a` doesn't divide `p^k`, but `a` does divide `p^(k+1)`\nthen `a = p^(k+1)`. -/\ntheorem ∀ {a p k : ℕ}, Nat.Prime p → ¬a ∣ p ^ k → a ∣ p ^ (k + 1) → a = p ^ (k + 1) :=\n\n/-- The `p`-adic norm of `q` is `1` if `q` is prime and not equal to `p`. -/\ntheorem ∀ {p q : ℕ} [p_prime : Fact (Nat.Prime p)] [q_prime : Fact (Nat.Prime q)], p ≠ q → padicNorm p ↑q = 1 :=\n\n/-- When `p` is prime, then the totient of `p ^ (n + 1)` is `p ^ n * (p - 1)` -/\ntheorem ∀ {p : ℕ}, Nat.Prime p → ∀ (n : ℕ), Nat.totient (p ^ (n + 1)) = p ^ n * (p - 1) :=\n\n/-- If `p` is a prime factor of `a` then the power of `p` in `a` is the same that in `a * b`,\nfor any `b` coprime to `a`. -/\ntheorem ∀ {p a b : ℕ}, Nat.coprime a b → p ∈ Nat.factors a → ↑(Nat.factorization (a * b)) p = ↑(Nat.factorization a) p :=\n\n/-- Let `p` be an odd prime. Show that `a` is a primitive root modulo `p` if and only if `a^((p - 1) / q) ≢ 1 (mod p)` for all prime divisors `q` of `p - 1`. -/\ntheorem", "choices": ["∀ {p : ℕ} [inst : Fact (Nat.Prime p)] {a : ℕ}, a ≠ 0 → Nat.gcd a p = 1 → (∀ q, Nat.Prime q → q ∣ p - 1 → ¬(a ^ ((p - 1) / q) ≡ 1 [MOD p])) ↔ IsPrimitiveRoot a p ", "∀ {p : ℕ} [inst : Fact (Nat.Prime p)] {a : ZMod p}, IsPrimitiveRoot a p ↔ (∀ (q : ℕ), Nat.Prime q → q ∣ p - 1 → a ^ ((p - 1) / q) ≠ 1) ", "∀ {p : ℕ} [inst : Fact (Nat.Prime p)] {a : ZMod p}, (∀ q, Nat.Prime q → q ∣ (p - 1) → a ^ ((p - 1) / q) ≠ 1) ↔ isPrimitiveRoot a (p - 1) ", "forall {p : ℕ} [hp : Fact (Nat.Prime p)], p ≠ 2 → ∀ {a : ZMod p},\n  a.is_primitive_root p ↔ (∀ (q : ℕ), Nat.Prime q → q ∣ p - 1 → a ^ ((p - 1) / q) ≠ 1) ", "∀ {p : ℕ} [inst : Fact (Nat.Prime p)] {a : ℕ}, a ≠ 0 → (∀ (q : ℕ), Nat.Prime q → q ∣ p - 1 → a ^ ((p - 1) / q) ≠ 1) ↔ is_primitive_root a p ", "∀ {p : ℕ} [inst : Fact (Nat.Prime p)], p % 2 = 1 → ∀ {a : ZMod p}, IsPrimitiveRoot a p ↔ (∀ q : ℕ, Nat.Prime q → q ∣ p - 1 → a ^ ((p - 1) / q) ≠ 1) ", "∀ (p : ℕ) [inst : Fact (Nat.Prime p)], p % 2 = 1 → ∀ (a : ℕ), is_primitive_root a p ↔ (∀ (q : ℕ), Nat.Prime q → q ∣ (p - 1) → a ^ ((p - 1) / q) ≠ 1) ", "∀ {p : ℕ} [inst : Fact (Nat.Prime p)], p % 2 = 1 → ∀ {a : ℕ}, IsPrimitiveRoot a p ↔ (∀ q, Nat.Prime q → q ∣ p - 1 → ¬pow_mod a ((p - 1) / q) p = 1) ", "∀ {p : ℕ} [inst : Fact (Nat.Prime p)] {a : ZMod p}, p ≠ 2 → (Nat.PrimeRoot a p ↔ (∀ (q : ℕ), Nat.Prime q → q ∣ p - 1 → a ^ ((p - 1) / q) ≠ 1)) ", "∀ {p : ℕ} [inst : Fact (Nat.Prime p)] {a : ZMod p}, a ≠ 1 → (∀ (q : ℕ), Nat.Prime q → q ∣ p - 1 → a ^ ((p - 1) / q) ≠ 1) ↔ Nat.primeRoot a "]}
{"docString": "Show that any prime divisor of `x^4 - x^2 + 1` is congruent to 1 modulo 12.", "prompts": "[{\"theorem\":\n  \"∀ {p : ℕ} [inst : Fact (Nat.Prime p)], p ≠ 2 → (IsSquare (-2) ↔ p % 8 = 1 ∨ p % 8 = 3)\",\n  \"isProp\": true,\n  \"docString\":\n  \"`-2` is a square modulo an odd prime `p` iff `p` is congruent to `1` or `3` mod `8`. \"},\n {\"theorem\": \"∀ {p n : ℕ}, Nat.Prime p → p ∣ n → IsSquare (-1) → p % 4 ≠ 3\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a prime `p` divides `n` such that `-1` is a square modulo `n`, then `p % 4 ≠ 3`. \"},\n {\"theorem\":\n  \"∀ (R : Type u_1) [inst : CommRing R] [inst_1 : IsDomain R], Polynomial.cyclotomic' 1 R = Polynomial.X - 1\",\n  \"isProp\": true,\n  \"docString\": \"The first modified cyclotomic polyomial is `X - 1`. \"},\n {\"theorem\": \"∀ {p : ℕ} [inst : Fact (Nat.Prime p)], IsSquare (-1) ↔ p % 4 ≠ 3\",\n  \"isProp\": true,\n  \"docString\":\n  \"`-1` is a square in `ZMod p` iff `p` is not congruent to `3` mod `4`. \"},\n {\"theorem\":\n  \"∀ {p : ℕ} [inst : Fact (Nat.Prime p)], p ≠ 2 → (IsSquare 2 ↔ p % 8 = 1 ∨ p % 8 = 7)\",\n  \"isProp\": true,\n  \"docString\":\n  \"`2` is a square modulo an odd prime `p` iff `p` is congruent to `1` or `7` mod `8`. \"},\n {\"theorem\":\n  \"∀ (R : Type u_1) [inst : Ring R], Polynomial.cyclotomic 1 R = Polynomial.X - 1\",\n  \"isProp\": true,\n  \"docString\": \"The first cyclotomic polyomial is `X - 1`. \"},\n {\"theorem\": \"∀ (p : ℕ) [inst : Fact (Nat.Prime p)], Prime ↑p ↔ p % 4 = 3\",\n  \"isProp\": true,\n  \"docString\":\n  \"A prime natural number is prime in `ℤ[i]` if and only if it is `3` mod `4` \"},\n {\"theorem\": \"∀ {n : ℕ}, ↑(Nat.factorial (n - 1)) = -1 → n ≠ 1 → Nat.Prime n\",\n  \"isProp\": true,\n  \"docString\":\n  \"For `n ≠ 1`, `(n-1)!` is congruent to `-1` modulo `n` only if n is prime. \"},\n {\"theorem\":\n  \"∀ (p : ℕ) [inst : Fact (Nat.Prime p)] (x : (ZMod p)ˣ), (∃ y, y ^ 2 = x) ↔ x ^ (p / 2) = 1\",\n  \"isProp\": true,\n  \"docString\":\n  \"Euler's Criterion: A unit `x` of `ZMod p` is a square if and only if `x ^ (p / 2) = 1`. \"},\n {\"theorem\":\n  \"∀ {F : Type u_1} [inst : Field F] [inst_1 : Fintype F], IsSquare (-1) ↔ Fintype.card F % 4 ≠ 3\",\n  \"isProp\": true,\n  \"docString\":\n  \"`-1` is a square in `F` iff `#F` is not congruent to `3` mod `4`. \"},\n {\"theorem\":\n  \"∀ {p q : ℕ} [inst : Fact (Nat.Prime p)] [inst_1 : Fact (Nat.Prime q)],\\n  p % 4 = 3 → q % 4 = 3 → legendreSym q ↑p = -legendreSym p ↑q\",\n  \"isProp\": true,\n  \"docString\":\n  \"The Law of Quadratic Reciprocity: if `p` and `q` are primes that are both congruent\\nto `3` mod `4`, then `(q / p) = -(p / q)`. \"},\n {\"theorem\": \"∀ {n : ℕ}, n ≠ 1 → (Nat.Prime n ↔ ↑(Nat.factorial (n - 1)) = -1)\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Wilson's Theorem**: For `n ≠ 1`, `(n-1)!` is congruent to `-1` modulo `n` iff n is prime. \"},\n {\"theorem\":\n  \"∀ {a b c : ℤ}, a % b = c → Int.natAbs (a - c) < Int.natAbs b → a = c\",\n  \"isProp\": true,\n  \"docString\":\n  \"If two integers are congruent to a sufficiently large modulus,\\nthey are equal. \"},\n {\"theorem\":\n  \"∀ {p q : ℕ} [inst : Fact (Nat.Prime p)] [inst_1 : Fact (Nat.Prime q)], p % 4 = 1 → q ≠ 2 → (IsSquare ↑q ↔ IsSquare ↑p)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `p` and `q` are odd primes and `p % 4 = 1`, then `q` is a square mod `p` iff\\n`p` is a square mod `q`. \"},\n {\"theorem\":\n  \"∀ {p : ℕ} [inst : Fact (Nat.Prime p)], p % 4 ≠ 3 → ∃ a b, a ^ 2 + b ^ 2 = p\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Fermat's theorem on the sum of two squares**. Every prime not congruent to 3 mod 4 is the sum\\nof two squares. Also known as **Fermat's Christmas theorem**. \"},\n {\"theorem\":\n  \"∀ {d : ℤ} (a : Pell.Solution₁ d), Pell.Solution₁.x a ^ 2 - d * Pell.Solution₁.y a ^ 2 = 1\",\n  \"isProp\": true,\n  \"docString\":\n  \"The proof that `a` is a solution to the Pell equation `x^2 - d*y^2 = 1` \"},\n {\"theorem\": \"∀ {x k l : ℕ}, 1 < x → (x ^ k ∣ x ^ l ↔ k ≤ l)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `1 < x`, then `x^k` divides `x^l` if and only if `k` is at most `l`. \"},\n {\"theorem\": \"∀ {n : ℕ}, IsSquare (-1) → ∃ x y, n = x ^ 2 + y ^ 2\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `-1` is a square modulo the natural number `n`, then `n` is a sum of two squares. \"},\n {\"theorem\":\n  \"∀ (p : ℕ) [inst : Fact (Nat.Prime p)] {a : ZMod p}, a ≠ 0 → (IsSquare a ↔ a ^ (p / 2) = 1)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Euler's Criterion: a nonzero `a : ZMod p` is a square if and only if `x ^ (p / 2) = 1`. \"},\n {\"theorem\":\n  \"∀ {m n : ℕ}, Nat.coprime m n → IsSquare (-1) → IsSquare (-1) → IsSquare (-1)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `-1` is a square modulo coprime natural numbers `m` and `n`, then `-1` is also\\na square modulo `m*n`. \"}]\n", "prompt_cons": "/-- `-2` is a square modulo an odd prime `p` iff `p` is congruent to `1` or `3` mod `8`. -/\ntheorem ∀ {p : ℕ} [inst : Fact (Nat.Prime p)], p ≠ 2 → (IsSquare (-2) ↔ p % 8 = 1 ∨ p % 8 = 3) :=\n\n/-- If a prime `p` divides `n` such that `-1` is a square modulo `n`, then `p % 4 ≠ 3`. -/\ntheorem ∀ {p n : ℕ}, Nat.Prime p → p ∣ n → IsSquare (-1) → p % 4 ≠ 3 :=\n\n/-- The first modified cyclotomic polyomial is `X - 1`. -/\ntheorem ∀ (R : Type u_1) [inst : CommRing R] [inst_1 : IsDomain R], Polynomial.cyclotomic' 1 R = Polynomial.X - 1 :=\n\n/-- `-1` is a square in `ZMod p` iff `p` is not congruent to `3` mod `4`. -/\ntheorem ∀ {p : ℕ} [inst : Fact (Nat.Prime p)], IsSquare (-1) ↔ p % 4 ≠ 3 :=\n\n/-- `2` is a square modulo an odd prime `p` iff `p` is congruent to `1` or `7` mod `8`. -/\ntheorem ∀ {p : ℕ} [inst : Fact (Nat.Prime p)], p ≠ 2 → (IsSquare 2 ↔ p % 8 = 1 ∨ p % 8 = 7) :=\n\n/-- The first cyclotomic polyomial is `X - 1`. -/\ntheorem ∀ (R : Type u_1) [inst : Ring R], Polynomial.cyclotomic 1 R = Polynomial.X - 1 :=\n\n/-- A prime natural number is prime in `ℤ[i]` if and only if it is `3` mod `4` -/\ntheorem ∀ (p : ℕ) [inst : Fact (Nat.Prime p)], Prime ↑p ↔ p % 4 = 3 :=\n\n/-- For `n ≠ 1`, `(n-1)!` is congruent to `-1` modulo `n` only if n is prime. -/\ntheorem ∀ {n : ℕ}, ↑(Nat.factorial (n - 1)) = -1 → n ≠ 1 → Nat.Prime n :=\n\n/-- Euler's Criterion: A unit `x` of `ZMod p` is a square if and only if `x ^ (p / 2) = 1`. -/\ntheorem ∀ (p : ℕ) [inst : Fact (Nat.Prime p)] (x : (ZMod p)ˣ), (∃ y, y ^ 2 = x) ↔ x ^ (p / 2) = 1 :=\n\n/-- `-1` is a square in `F` iff `#F` is not congruent to `3` mod `4`. -/\ntheorem ∀ {F : Type u_1} [inst : Field F] [inst_1 : Fintype F], IsSquare (-1) ↔ Fintype.card F % 4 ≠ 3 :=\n\n/-- The Law of Quadratic Reciprocity: if `p` and `q` are primes that are both congruent\nto `3` mod `4`, then `(q / p) = -(p / q)`. -/\ntheorem ∀ {p q : ℕ} [inst : Fact (Nat.Prime p)] [inst_1 : Fact (Nat.Prime q)],\n  p % 4 = 3 → q % 4 = 3 → legendreSym q ↑p = -legendreSym p ↑q :=\n\n/-- **Wilson's Theorem**: For `n ≠ 1`, `(n-1)!` is congruent to `-1` modulo `n` iff n is prime. -/\ntheorem ∀ {n : ℕ}, n ≠ 1 → (Nat.Prime n ↔ ↑(Nat.factorial (n - 1)) = -1) :=\n\n/-- If two integers are congruent to a sufficiently large modulus,\nthey are equal. -/\ntheorem ∀ {a b c : ℤ}, a % b = c → Int.natAbs (a - c) < Int.natAbs b → a = c :=\n\n/-- If `p` and `q` are odd primes and `p % 4 = 1`, then `q` is a square mod `p` iff\n`p` is a square mod `q`. -/\ntheorem ∀ {p q : ℕ} [inst : Fact (Nat.Prime p)] [inst_1 : Fact (Nat.Prime q)], p % 4 = 1 → q ≠ 2 → (IsSquare ↑q ↔ IsSquare ↑p) :=\n\n/-- **Fermat's theorem on the sum of two squares**. Every prime not congruent to 3 mod 4 is the sum\nof two squares. Also known as **Fermat's Christmas theorem**. -/\ntheorem ∀ {p : ℕ} [inst : Fact (Nat.Prime p)], p % 4 ≠ 3 → ∃ a b, a ^ 2 + b ^ 2 = p :=\n\n/-- The proof that `a` is a solution to the Pell equation `x^2 - d*y^2 = 1` -/\ntheorem ∀ {d : ℤ} (a : Pell.Solution₁ d), Pell.Solution₁.x a ^ 2 - d * Pell.Solution₁.y a ^ 2 = 1 :=\n\n/-- If `1 < x`, then `x^k` divides `x^l` if and only if `k` is at most `l`. -/\ntheorem ∀ {x k l : ℕ}, 1 < x → (x ^ k ∣ x ^ l ↔ k ≤ l) :=\n\n/-- If `-1` is a square modulo the natural number `n`, then `n` is a sum of two squares. -/\ntheorem ∀ {n : ℕ}, IsSquare (-1) → ∃ x y, n = x ^ 2 + y ^ 2 :=\n\n/-- Euler's Criterion: a nonzero `a : ZMod p` is a square if and only if `x ^ (p / 2) = 1`. -/\ntheorem ∀ (p : ℕ) [inst : Fact (Nat.Prime p)] {a : ZMod p}, a ≠ 0 → (IsSquare a ↔ a ^ (p / 2) = 1) :=\n\n/-- If `-1` is a square modulo coprime natural numbers `m` and `n`, then `-1` is also\na square modulo `m*n`. -/\ntheorem ∀ {m n : ℕ}, Nat.coprime m n → IsSquare (-1) → IsSquare (-1) → IsSquare (-1) :=\n\n/-- Show that any prime divisor of `x^4 - x^2 + 1` is congruent to 1 modulo 12. -/\ntheorem", "choices": ["∀ {x p : ℕ}, Nat.Prime p → p ∣ x^4 - x^2 + 1 → p % 12 = 1 ", "∀ {x p : ℕ}, Nat.Prime p → p ∣ (x ^ 4 - x ^ 2 + 1) → p % 12 = 1 ", "∀ {x p : ℕ}, Nat.Prime p → p ∣ x ^ 4 - x ^ 2 + 1 → p % 12 = 1 ", "∀ {x p : ℕ}, Nat.Prime p → p ∣ x ^ 4 - x ^ 2 + 1 → p % 12 = 1 ", "∀ {x p : ℕ} [inst : Fact (Nat.Prime p)], p ∣ (x ^ 4 - x ^ 2 + 1) → p % 12 = 1 ", "∀ {x p : ℕ}, Nat.Prime p → p ∣ x ^ 4 - x ^ 2 + 1 → p % 12 = 1 ", "∀ {x p : ℕ}, Nat.Prime p → p ∣ x^4 - x^2 + 1 → p % 12 = 1 ", "∀ {x p : ℕ}, Nat.Prime p → p ∣ x ^ 4 - x ^ 2 + 1 → p % 12 = 1 ", "∀ {x p : ℕ} (hp : Nat.Prime p), p ∣ x ^ 4 - x ^ 2 + 1 → p % 12 = 1 ", "∀ {x p : ℕ}, Nat.Prime p → p ∣ x ^ 4 - x ^ 2 + 1 → p % 12 = 1 "]}
{"docString": "Show that if `a` is negative, then `p ≡ q (4a)` together with `p ∤ a` imply `(a / p) = (a / q)`.", "prompts": "[{\"theorem\":\n  \"∀ {p q : ℕ} [inst : Fact (Nat.Prime p)] [inst_1 : Fact (Nat.Prime q)],\\n  p % 4 = 3 → q % 4 = 3 → legendreSym q ↑p = -legendreSym p ↑q\",\n  \"isProp\": true,\n  \"docString\":\n  \"The Law of Quadratic Reciprocity: if `p` and `q` are primes that are both congruent\\nto `3` mod `4`, then `(q / p) = -(p / q)`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : Monoid α] {p q : α}, Irreducible p → Irreducible q → p ∣ q → q ∣ p\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `p` and `q` are irreducible, then `p ∣ q` implies `q ∣ p`. \"},\n {\"theorem\":\n  \"∀ {p q : ℕ} [inst : Fact (Nat.Prime p)] [inst_1 : Fact (Nat.Prime q)],\\n  p ≠ 2 → q ≠ 2 → legendreSym q ↑p = (-1) ^ (p / 2 * (q / 2)) * legendreSym p ↑q\",\n  \"isProp\": true,\n  \"docString\":\n  \"The Law of Quadratic Reciprocity: if `p` and `q` are odd primes, then\\n`(q / p) = (-1)^((p-1)(q-1)/4) * (p / q)`. \"},\n {\"theorem\":\n  \"∀ {p q : ℕ} [inst : Fact (Nat.Prime p)] [inst_1 : Fact (Nat.Prime q)],\\n  p % 4 = 1 → q ≠ 2 → legendreSym q ↑p = legendreSym p ↑q\",\n  \"isProp\": true,\n  \"docString\":\n  \"The Law of Quadratic Reciprocity: if `p` and `q` are odd primes and `p % 4 = 1`,\\nthen `(q / p) = (p / q)`. \"},\n {\"theorem\":\n  \"∀ {p q : ℕ} [inst : Fact (Nat.Prime p)] [inst_1 : Fact (Nat.Prime q)],\\n  p ≠ 2 → q ≠ 2 → p ≠ q → legendreSym q ↑p * legendreSym p ↑q = (-1) ^ (p / 2 * (q / 2))\",\n  \"isProp\": true,\n  \"docString\":\n  \"**The Law of Quadratic Reciprocity**: if `p` and `q` are distinct odd primes, then\\n`(q / p) * (p / q) = (-1)^((p-1)(q-1)/4)`. \"},\n {\"theorem\":\n  \"∀ {p : ℕ}, Nat.Prime p → ∀ {n : ℤ}, IsCoprime n ↑p → n ^ (p - 1) ≡ 1 [ZMOD ↑p]\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Fermat's Little Theorem**: for all `a : ℤ` coprime to `p`, we have\\n`a ^ (p - 1) ≡ 1 [ZMOD p]`. \"},\n {\"theorem\":\n  \"∀ {p : ℕ} [inst : Fact (Nat.Prime p)] {x y : ZMod p}, y ≠ 0 → x ^ 2 = -y ^ 2 → p % 4 ≠ 3\",\n  \"isProp\": true,\n  \"docString\":\n  \"If two nonzero squares are negatives of each other in `ZMod p`, then `p % 4 ≠ 3`. \"},\n {\"theorem\":\n  \"∀ {p q : ℕ} [inst : Fact (Nat.Prime p)] [inst_1 : Fact (Nat.Prime q)], p % 4 = 1 → q ≠ 2 → (IsSquare ↑q ↔ IsSquare ↑p)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `p` and `q` are odd primes and `p % 4 = 1`, then `q` is a square mod `p` iff\\n`p` is a square mod `q`. \"},\n {\"theorem\":\n  \"∀ {p : ℕ} [inst : Fact (Nat.Prime p)] {a : ZMod p}, a ≠ 0 → a ^ (p - 1) = 1\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Fermat's Little Theorem**: for all nonzero `a : ZMod p`, we have `a ^ (p - 1) = 1`. \"},\n {\"theorem\":\n  \"∀ (p : ℕ) [inst : Fact (Nat.Prime p)] {a : ZMod p}, a ≠ 0 → a ^ (p / 2) = 1 ∨ a ^ (p / 2) = -1\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `a : ZMod p` is nonzero, then `a^(p/2)` is either `1` or `-1`. \"},\n {\"theorem\":\n  \"∀ {p q : ℕ} [inst : Fact (Nat.Prime p)] [inst_1 : Fact (Nat.Prime q)],\\n  p % 4 = 3 → q % 4 = 3 → p ≠ q → (IsSquare ↑q ↔ ¬IsSquare ↑p)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `p` and `q` are distinct primes that are both congruent to `3` mod `4`, then `q` is\\na square mod `p` iff `p` is a nonsquare mod `q`. \"},\n {\"theorem\":\n  \"∀ (p : ℕ) [inst : Fact (Nat.Prime p)] (a : ℤ), ↑(legendreSym p a) = ↑a ^ (p / 2)\",\n  \"isProp\": true,\n  \"docString\":\n  \"We have the congruence `legendreSym p a ≡ a ^ (p / 2) mod p`. \"},\n {\"theorem\":\n  \"∀ (p : ℕ) [inst : Fact (Nat.Prime p)] {a : ℤ}, ↑a ≠ 0 → legendreSym p a ^ 2 = 1\",\n  \"isProp\": true,\n  \"docString\": \"The square of the symbol is 1 if `p ∤ a`. \"},\n {\"theorem\":\n  \"∀ (p : ℕ) [inst : Fact (Nat.Prime p)] {a : ℤ}, ↑a ≠ 0 → legendreSym p (a ^ 2) = 1\",\n  \"isProp\": true,\n  \"docString\": \"The Legendre symbol of `a^2` at `p` is 1 if `p ∤ a`. \"},\n {\"theorem\":\n  \"∀ (p : ℕ) (a : ZMod p), a ^ (p - 1) = 1 → (∀ (q : ℕ), Nat.Prime q → q ∣ p - 1 → a ^ ((p - 1) / q) ≠ 1) → Nat.Prime p\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `a^(p-1) = 1 mod p`, but `a^((p-1)/q) ≠ 1 mod p` for all prime factors `q` of `p-1`, then `p`\\nis prime. This is true because `a` has order `p-1` in the multiplicative group mod `p`, so this\\ngroup must itself have order `p-1`, which only happens when `p` is prime.\\n\"},\n {\"theorem\":\n  \"∀ {p : ℕ} [inst : Fact (Nat.Prime p)] {a : ℤ},\\n  jacobiSym a p = -1 → ∀ {x y : ℤ}, ↑p ∣ x ^ 2 - a * y ^ 2 → ↑p ∣ x ∧ ↑p ∣ y\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `p` is prime, `J(a | p) = -1` and `p` divides `x^2 - a*y^2`, then `p` must divide\\n`x` and `y`. \"},\n {\"theorem\": \"∀ {a : ℤ} {p : ℕ}, Nat.Prime p → Int.gcd a ↑p ≠ 1 → ↑a = 0\",\n  \"isProp\": true,\n  \"docString\":\n  \"If an integer `a` and a prime `p` satisfy `gcd a p ≠ 1`, then `a : ZMod p` is zero. \"},\n {\"theorem\":\n  \"∀ (p : ℕ) [inst : Fact (Nat.Prime p)] (a : (ZMod p)ˣ), a ^ (p - 1) = 1\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Fermat's Little Theorem**: for every unit `a` of `ZMod p`, we have `a ^ (p - 1) = 1`. \"},\n {\"theorem\":\n  \"∀ {p : ℕ} [hp : Fact (Nat.Prime p)] {q : ℚ}, padicNorm p q = 0 → q = 0\",\n  \"isProp\": true,\n  \"docString\": \"If the `p`-adic norm of `q` is 0, then `q` is `0`. \"},\n {\"theorem\":\n  \"∀ {a : ℤ} {n : ℕ}, jacobiSym a n = -1 → ∃ p x, p ∣ n ∧ jacobiSym a p = -1\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `J(a | n) = -1`, then `n` has a prime divisor `p` such that `J(a | p) = -1`. \"}]\n", "prompt_cons": "/-- The Law of Quadratic Reciprocity: if `p` and `q` are primes that are both congruent\nto `3` mod `4`, then `(q / p) = -(p / q)`. -/\ntheorem ∀ {p q : ℕ} [inst : Fact (Nat.Prime p)] [inst_1 : Fact (Nat.Prime q)],\n  p % 4 = 3 → q % 4 = 3 → legendreSym q ↑p = -legendreSym p ↑q :=\n\n/-- If `p` and `q` are irreducible, then `p ∣ q` implies `q ∣ p`. -/\ntheorem ∀ {α : Type u_1} [inst : Monoid α] {p q : α}, Irreducible p → Irreducible q → p ∣ q → q ∣ p :=\n\n/-- The Law of Quadratic Reciprocity: if `p` and `q` are odd primes, then\n`(q / p) = (-1)^((p-1)(q-1)/4) * (p / q)`. -/\ntheorem ∀ {p q : ℕ} [inst : Fact (Nat.Prime p)] [inst_1 : Fact (Nat.Prime q)],\n  p ≠ 2 → q ≠ 2 → legendreSym q ↑p = (-1) ^ (p / 2 * (q / 2)) * legendreSym p ↑q :=\n\n/-- The Law of Quadratic Reciprocity: if `p` and `q` are odd primes and `p % 4 = 1`,\nthen `(q / p) = (p / q)`. -/\ntheorem ∀ {p q : ℕ} [inst : Fact (Nat.Prime p)] [inst_1 : Fact (Nat.Prime q)],\n  p % 4 = 1 → q ≠ 2 → legendreSym q ↑p = legendreSym p ↑q :=\n\n/-- **The Law of Quadratic Reciprocity**: if `p` and `q` are distinct odd primes, then\n`(q / p) * (p / q) = (-1)^((p-1)(q-1)/4)`. -/\ntheorem ∀ {p q : ℕ} [inst : Fact (Nat.Prime p)] [inst_1 : Fact (Nat.Prime q)],\n  p ≠ 2 → q ≠ 2 → p ≠ q → legendreSym q ↑p * legendreSym p ↑q = (-1) ^ (p / 2 * (q / 2)) :=\n\n/-- **Fermat's Little Theorem**: for all `a : ℤ` coprime to `p`, we have\n`a ^ (p - 1) ≡ 1 [ZMOD p]`. -/\ntheorem ∀ {p : ℕ}, Nat.Prime p → ∀ {n : ℤ}, IsCoprime n ↑p → n ^ (p - 1) ≡ 1 [ZMOD ↑p] :=\n\n/-- If two nonzero squares are negatives of each other in `ZMod p`, then `p % 4 ≠ 3`. -/\ntheorem ∀ {p : ℕ} [inst : Fact (Nat.Prime p)] {x y : ZMod p}, y ≠ 0 → x ^ 2 = -y ^ 2 → p % 4 ≠ 3 :=\n\n/-- If `p` and `q` are odd primes and `p % 4 = 1`, then `q` is a square mod `p` iff\n`p` is a square mod `q`. -/\ntheorem ∀ {p q : ℕ} [inst : Fact (Nat.Prime p)] [inst_1 : Fact (Nat.Prime q)], p % 4 = 1 → q ≠ 2 → (IsSquare ↑q ↔ IsSquare ↑p) :=\n\n/-- **Fermat's Little Theorem**: for all nonzero `a : ZMod p`, we have `a ^ (p - 1) = 1`. -/\ntheorem ∀ {p : ℕ} [inst : Fact (Nat.Prime p)] {a : ZMod p}, a ≠ 0 → a ^ (p - 1) = 1 :=\n\n/-- If `a : ZMod p` is nonzero, then `a^(p/2)` is either `1` or `-1`. -/\ntheorem ∀ (p : ℕ) [inst : Fact (Nat.Prime p)] {a : ZMod p}, a ≠ 0 → a ^ (p / 2) = 1 ∨ a ^ (p / 2) = -1 :=\n\n/-- If `p` and `q` are distinct primes that are both congruent to `3` mod `4`, then `q` is\na square mod `p` iff `p` is a nonsquare mod `q`. -/\ntheorem ∀ {p q : ℕ} [inst : Fact (Nat.Prime p)] [inst_1 : Fact (Nat.Prime q)],\n  p % 4 = 3 → q % 4 = 3 → p ≠ q → (IsSquare ↑q ↔ ¬IsSquare ↑p) :=\n\n/-- We have the congruence `legendreSym p a ≡ a ^ (p / 2) mod p`. -/\ntheorem ∀ (p : ℕ) [inst : Fact (Nat.Prime p)] (a : ℤ), ↑(legendreSym p a) = ↑a ^ (p / 2) :=\n\n/-- The square of the symbol is 1 if `p ∤ a`. -/\ntheorem ∀ (p : ℕ) [inst : Fact (Nat.Prime p)] {a : ℤ}, ↑a ≠ 0 → legendreSym p a ^ 2 = 1 :=\n\n/-- The Legendre symbol of `a^2` at `p` is 1 if `p ∤ a`. -/\ntheorem ∀ (p : ℕ) [inst : Fact (Nat.Prime p)] {a : ℤ}, ↑a ≠ 0 → legendreSym p (a ^ 2) = 1 :=\n\n/-- If `a^(p-1) = 1 mod p`, but `a^((p-1)/q) ≠ 1 mod p` for all prime factors `q` of `p-1`, then `p`\nis prime. This is true because `a` has order `p-1` in the multiplicative group mod `p`, so this\ngroup must itself have order `p-1`, which only happens when `p` is prime. -/\ntheorem ∀ (p : ℕ) (a : ZMod p), a ^ (p - 1) = 1 → (∀ (q : ℕ), Nat.Prime q → q ∣ p - 1 → a ^ ((p - 1) / q) ≠ 1) → Nat.Prime p :=\n\n/-- If `p` is prime, `J(a | p) = -1` and `p` divides `x^2 - a*y^2`, then `p` must divide\n`x` and `y`. -/\ntheorem ∀ {p : ℕ} [inst : Fact (Nat.Prime p)] {a : ℤ},\n  jacobiSym a p = -1 → ∀ {x y : ℤ}, ↑p ∣ x ^ 2 - a * y ^ 2 → ↑p ∣ x ∧ ↑p ∣ y :=\n\n/-- If an integer `a` and a prime `p` satisfy `gcd a p ≠ 1`, then `a : ZMod p` is zero. -/\ntheorem ∀ {a : ℤ} {p : ℕ}, Nat.Prime p → Int.gcd a ↑p ≠ 1 → ↑a = 0 :=\n\n/-- **Fermat's Little Theorem**: for every unit `a` of `ZMod p`, we have `a ^ (p - 1) = 1`. -/\ntheorem ∀ (p : ℕ) [inst : Fact (Nat.Prime p)] (a : (ZMod p)ˣ), a ^ (p - 1) = 1 :=\n\n/-- If the `p`-adic norm of `q` is 0, then `q` is `0`. -/\ntheorem ∀ {p : ℕ} [hp : Fact (Nat.Prime p)] {q : ℚ}, padicNorm p q = 0 → q = 0 :=\n\n/-- If `J(a | n) = -1`, then `n` has a prime divisor `p` such that `J(a | p) = -1`. -/\ntheorem ∀ {a : ℤ} {n : ℕ}, jacobiSym a n = -1 → ∃ p x, p ∣ n ∧ jacobiSym a p = -1 :=\n\n/-- Show that if `a` is negative, then `p ≡ q (4a)` together with `p ∤ a` imply `(a / p) = (a / q)`. -/\ntheorem", "choices": ["∀ {a : ℤ} {p q : ℕ} [inst : Fact (Nat.Prime p)] [inst_1 : Fact (Nat.Prime q)],\n  a < 0 → p ≡ q [ZMOD 4 * a] → ↑a % ↑p ≠ 0 → legendreSym a ↑p = legendreSym a ↑q ", "/-- If `a` is negative, then `p ≡ q (4a)` together with `p ∤ a` imply `(a / p) = (a / q)`. -/\ntheorem ∀ {a : ℤ} {p q : ℕ}, a < 0 → p % (4 * -a) = q % (4 * -a) → ¬↑p ∣ a → legendreSym a ↑p = legendreSym a ↑q ", "∀ {a p q : ℤ}, a < 0 → p % (4 * a) = q % (4 * a) → ¬↑p ∣ a → legendreSym a p = legendreSym a q ", "∀ {p q a : ℕ} [inst : Fact (Nat.Prime p)] [inst_1 : Fact (Nat.Prime q)],\n  a < 0 → p % (4 * a) = q % (4 * a) → ¬p ∣ a → legendreSym a p = legendreSym a q ", "∀ {a : ℤ} {p q : ℕ} [Fact (Nat.Prime p)] [Fact (Nat.Prime q)],\n  a < 0 → p % (4 * a) = q % (4 * a) → ↑p ∣ a → ↑q ∣ a → legendreSym a ↑p = legendreSym a ↑q ", "∀ {a : ℤ} {p q : ℕ} [inst : Fact (Nat.Prime p)] [inst_1 : Fact (Nat.Prime q)],\n  a < 0 → p % (4 * a) = q % (4 * a) → ¬(↑p ∣ a) → legendreSym a ↑p = legendreSym a ↑q ", "∀ {a : ℤ} {p q : ℕ}, a < 0 → p % (4 * -a) = q % (4 * -a) → ↑p ∣ a → ↑q ∣ a → legendreSym p a = legendreSym q a ", "∀ {a p q : ℤ},\n  a < 0 → p % (4 * a) = q % (4 * a) → ¬p ∣ a → ¬q ∣ a → legendreSym a p = legendreSym a q ", "∀ {a : ℤ} {p q : ℕ} [hp : Fact (Nat.Prime p)] [hq : Fact (Nat.Prime q)],\n  a < 0 → (p % (4 * -a) = q % (4 * -a)) → ¬(↑p ∣ a) → legendreSym a ↑p = legendreSym a ↑q ", "∀ {a : ℤ} {p q : ℕ} [inst : Fact (Nat.Prime p)] [inst_1 : Fact (Nat.Prime q)],\n  a < 0 → p ≡ q [ZMOD 4 * a] → ¬p ∣ a → legendreSym a ↑p = legendreSym a ↑q "]}
{"docString": "Show that 1729 is the smallest positive integer expressible as the sum of two different integral cubes in two ways.", "prompts": "[{\"theorem\":\n  \"∀ {a b x y u v : ℕ}, a = x ^ 2 + y ^ 2 → b = u ^ 2 + v ^ 2 → ∃ r s, a * b = r ^ 2 + s ^ 2\",\n  \"isProp\": true,\n  \"docString\":\n  \"The set of natural numbers that are sums of two squares is closed under multiplication. \"},\n {\"theorem\": \"∀ {b m d : ℕ}, d ∈ Nat.digits (b + 2) m → d < b + 2\",\n  \"isProp\": true,\n  \"docString\":\n  \"The digits in the base b+2 expansion of n are all less than b+2 \"},\n {\"theorem\": \"∀ {m n : ℕ}, (∀ (a : ℕ), m ∣ a ↔ n ∣ a) ↔ m = n\",\n  \"isProp\": true,\n  \"docString\":\n  \"Two natural numbers are equal if and only if they have the same multiples. \"},\n {\"theorem\":\n  \"∀ {a b c : ℤ}, Fermat42 a b c → ∃ a0 b0 c0, Fermat42.Minimal a0 b0 c0\",\n  \"isProp\": true,\n  \"docString\":\n  \"if we have a solution to `a ^ 4 + b ^ 4 = c ^ 2` then there must be a minimal one. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : LinearOrderedField α] {a : α}, 2 ≤ a → (1 - 1 / a)⁻¹ ≤ 2\",\n  \"isProp\": true,\n  \"docString\": \"An inequality involving `2`. \"},\n {\"theorem\":\n  \"∀ {K : Type u_1} {v : K} {n : ℕ} [inst : LinearOrderedField K] [inst_1 : FloorRing K] {b : K},\\n  Stream'.Seq.get? (GeneralizedContinuedFraction.partialDenominators (GeneralizedContinuedFraction.of v)) n = some b →\\n    1 ≤ b\",\n  \"isProp\": true,\n  \"docString\":\n  \"Shows that the integer parts of the continued fraction are at least one. \"},\n {\"theorem\": \"∀ {n : ℕ}, IsSquare (-1) → ∃ x y, n = x ^ 2 + y ^ 2\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `-1` is a square modulo the natural number `n`, then `n` is a sum of two squares. \"},\n {\"theorem\": \"∀ {a b c : ℤ}, Fermat42.Minimal a b c → Fermat42.Minimal b a c\",\n  \"isProp\": true,\n  \"docString\":\n  \"We can swap `a` and `b` in a minimal solution to `a ^ 4 + b ^ 4 = c ^ 2`. \"},\n {\"theorem\": \"∀ {a b c : ℤ}, Fermat42.Minimal a b c → IsCoprime a b\",\n  \"isProp\": true,\n  \"docString\":\n  \"a minimal solution to `a ^ 4 + b ^ 4 = c ^ 2` must have `a` and `b` coprime. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : LinearOrderedRing α] {x y : α}, x * x + y * y = 0 ↔ x = 0 ∧ y = 0\",\n  \"isProp\": true,\n  \"docString\": \"The sum of two squares is zero iff both elements are zero. \"},\n {\"theorem\": \"Set.InjOn Nat.factorization {x | x ≠ 0}\",\n  \"isProp\": true,\n  \"docString\":\n  \"Every nonzero natural number has a unique prime factorization \"},\n {\"theorem\": \"∀ {n m : ℕ}, m * m < n → n < (m + 1) * (m + 1) → ¬∃ t, t * t = n\",\n  \"isProp\": true,\n  \"docString\": \"There are no perfect squares strictly between m² and (m+1)² \"},\n {\"theorem\": \"∀ {m n : ℕ}, (∀ (a : ℕ), a ∣ m ↔ a ∣ n) ↔ m = n\",\n  \"isProp\": true,\n  \"docString\":\n  \"Two natural numbers are equal if and only if they have the same divisors. \"},\n {\"theorem\":\n  \"∀ {m n : ℕ+}, PNat.factorMultiset m ≤ PNat.factorMultiset n ↔ m ∣ n\",\n  \"isProp\": true,\n  \"docString\":\n  \"We now have four different results that all encode the\\nidea that inequality of multisets corresponds to divisibility\\nof positive integers. \"},\n {\"theorem\": \"∀ {M : Type u} [inst : Monoid M] (a : M), a ^ 2 = a * a\",\n  \"isProp\": true,\n  \"docString\":\n  \"Note that most of the lemmas about powers of two refer to it as `sq`. \"},\n {\"theorem\":\n  \"∀ {x y z : ℤ},\\n  PythagoreanTriple x y z →\\n    (PythagoreanTriple x y z ↔\\n      ∃ k m n,\\n        (x = k * (m ^ 2 - n ^ 2) ∧ y = k * (2 * m * n) ∨ x = k * (2 * m * n) ∧ y = k * (m ^ 2 - n ^ 2)) ∧\\n          (z = k * (m ^ 2 + n ^ 2) ∨ z = -k * (m ^ 2 + n ^ 2)))\",\n  \"isProp\": true,\n  \"docString\": \"**Formula for Pythagorean Triples** \"},\n {\"theorem\":\n  \"∀ (n : ℤ), ↑ZMod.χ₄ ↑n = if n % 2 = 0 then 0 else if n % 4 = 1 then 1 else -1\",\n  \"isProp\": true,\n  \"docString\": \"An explicit description of `χ₄` on integers / naturals \"},\n {\"theorem\":\n  \"∀ {a b c : ℤ}, Fermat42 a b c → ∃ a0 b0 c0, Fermat42.Minimal a0 b0 c0 ∧ a0 % 2 = 1\",\n  \"isProp\": true,\n  \"docString\":\n  \"We can assume that a minimal solution to `a ^ 4 + b ^ 4 = c ^ 2` has `a` odd. \"},\n {\"theorem\":\n  \"∀ {R : Type u_1} {K : Type u_2} [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : IsDedekindDomain R]\\n  [inst_3 : Field K] [inst_4 : Algebra R K] [inst_5 : IsFractionRing R K]\\n  {x y : DedekindDomain.ProdAdicCompletions R K},\\n  DedekindDomain.ProdAdicCompletions.IsFiniteAdele x →\\n    DedekindDomain.ProdAdicCompletions.IsFiniteAdele y → DedekindDomain.ProdAdicCompletions.IsFiniteAdele (x + y)\",\n  \"isProp\": true,\n  \"docString\": \"The sum of two finite adèles is a finite adèle. \"},\n {\"theorem\": \"∀ {a : ℕ}, Real.sqrt ↑a ≤ ↑(Nat.sqrt a) + 1\",\n  \"isProp\": true,\n  \"docString\":\n  \"The real square root is at most the natural square root plus one \"}]\n", "prompt_cons": "/-- The set of natural numbers that are sums of two squares is closed under multiplication. -/\ntheorem ∀ {a b x y u v : ℕ}, a = x ^ 2 + y ^ 2 → b = u ^ 2 + v ^ 2 → ∃ r s, a * b = r ^ 2 + s ^ 2 :=\n\n/-- The digits in the base b+2 expansion of n are all less than b+2 -/\ntheorem ∀ {b m d : ℕ}, d ∈ Nat.digits (b + 2) m → d < b + 2 :=\n\n/-- Two natural numbers are equal if and only if they have the same multiples. -/\ntheorem ∀ {m n : ℕ}, (∀ (a : ℕ), m ∣ a ↔ n ∣ a) ↔ m = n :=\n\n/-- if we have a solution to `a ^ 4 + b ^ 4 = c ^ 2` then there must be a minimal one. -/\ntheorem ∀ {a b c : ℤ}, Fermat42 a b c → ∃ a0 b0 c0, Fermat42.Minimal a0 b0 c0 :=\n\n/-- An inequality involving `2`. -/\ntheorem ∀ {α : Type u_1} [inst : LinearOrderedField α] {a : α}, 2 ≤ a → (1 - 1 / a)⁻¹ ≤ 2 :=\n\n/-- Shows that the integer parts of the continued fraction are at least one. -/\ntheorem ∀ {K : Type u_1} {v : K} {n : ℕ} [inst : LinearOrderedField K] [inst_1 : FloorRing K] {b : K},\n  Stream'.Seq.get? (GeneralizedContinuedFraction.partialDenominators (GeneralizedContinuedFraction.of v)) n = some b →\n    1 ≤ b :=\n\n/-- If `-1` is a square modulo the natural number `n`, then `n` is a sum of two squares. -/\ntheorem ∀ {n : ℕ}, IsSquare (-1) → ∃ x y, n = x ^ 2 + y ^ 2 :=\n\n/-- We can swap `a` and `b` in a minimal solution to `a ^ 4 + b ^ 4 = c ^ 2`. -/\ntheorem ∀ {a b c : ℤ}, Fermat42.Minimal a b c → Fermat42.Minimal b a c :=\n\n/-- a minimal solution to `a ^ 4 + b ^ 4 = c ^ 2` must have `a` and `b` coprime. -/\ntheorem ∀ {a b c : ℤ}, Fermat42.Minimal a b c → IsCoprime a b :=\n\n/-- The sum of two squares is zero iff both elements are zero. -/\ntheorem ∀ {α : Type u} [inst : LinearOrderedRing α] {x y : α}, x * x + y * y = 0 ↔ x = 0 ∧ y = 0 :=\n\n/-- Every nonzero natural number has a unique prime factorization -/\ntheorem Set.InjOn Nat.factorization {x | x ≠ 0} :=\n\n/-- There are no perfect squares strictly between m² and (m+1)² -/\ntheorem ∀ {n m : ℕ}, m * m < n → n < (m + 1) * (m + 1) → ¬∃ t, t * t = n :=\n\n/-- Two natural numbers are equal if and only if they have the same divisors. -/\ntheorem ∀ {m n : ℕ}, (∀ (a : ℕ), a ∣ m ↔ a ∣ n) ↔ m = n :=\n\n/-- We now have four different results that all encode the\nidea that inequality of multisets corresponds to divisibility\nof positive integers. -/\ntheorem ∀ {m n : ℕ+}, PNat.factorMultiset m ≤ PNat.factorMultiset n ↔ m ∣ n :=\n\n/-- Note that most of the lemmas about powers of two refer to it as `sq`. -/\ntheorem ∀ {M : Type u} [inst : Monoid M] (a : M), a ^ 2 = a * a :=\n\n/-- **Formula for Pythagorean Triples** -/\ntheorem ∀ {x y z : ℤ},\n  PythagoreanTriple x y z →\n    (PythagoreanTriple x y z ↔\n      ∃ k m n,\n        (x = k * (m ^ 2 - n ^ 2) ∧ y = k * (2 * m * n) ∨ x = k * (2 * m * n) ∧ y = k * (m ^ 2 - n ^ 2)) ∧\n          (z = k * (m ^ 2 + n ^ 2) ∨ z = -k * (m ^ 2 + n ^ 2))) :=\n\n/-- An explicit description of `χ₄` on integers / naturals -/\ntheorem ∀ (n : ℤ), ↑ZMod.χ₄ ↑n = if n % 2 = 0 then 0 else if n % 4 = 1 then 1 else -1 :=\n\n/-- We can assume that a minimal solution to `a ^ 4 + b ^ 4 = c ^ 2` has `a` odd. -/\ntheorem ∀ {a b c : ℤ}, Fermat42 a b c → ∃ a0 b0 c0, Fermat42.Minimal a0 b0 c0 ∧ a0 % 2 = 1 :=\n\n/-- The sum of two finite adèles is a finite adèle. -/\ntheorem ∀ {R : Type u_1} {K : Type u_2} [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : IsDedekindDomain R]\n  [inst_3 : Field K] [inst_4 : Algebra R K] [inst_5 : IsFractionRing R K]\n  {x y : DedekindDomain.ProdAdicCompletions R K},\n  DedekindDomain.ProdAdicCompletions.IsFiniteAdele x →\n    DedekindDomain.ProdAdicCompletions.IsFiniteAdele y → DedekindDomain.ProdAdicCompletions.IsFiniteAdele (x + y) :=\n\n/-- The real square root is at most the natural square root plus one -/\ntheorem ∀ {a : ℕ}, Real.sqrt ↑a ≤ ↑(Nat.sqrt a) + 1 :=\n\n/-- Show that 1729 is the smallest positive integer expressible as the sum of two different integral cubes in two ways. -/\ntheorem", "choices": ["ℕ.smallest_two_diff_cube_sum_two_ways : ∃ a b c d, a ^ 3 + b ^ 3 = c ^ 3 + d ^ 3 ∧ a ≠ c ∧ 0 < a ∧ a < b ∧ c < d ∧ 0 < c ∧ a ^ 3 + b ^ 3 = 1729 ", "Exists.intro (1729 : ℕ) (id (Iff.mpr And.intro (Iff.mpr Int.eq_or_eq_neg (Or.intro (Exists.intro 1 (Exists.intro 12 (Exists.intro 9 (Exists.intro 10 (And.intro (add_eq_of_eq_sub (Eq.symm (Eq.mpr (eq_self_iff_true (1 * 1 * 1 + 12 * 12 * 12 - 9 * 9 * 9 - 10 * 10 * 10)) trivial))) (Or.intro (Exists.intro (-1) (Exists.intro (-12) (Exists.intro (-9) (Exists.intro (-10) (And.intro (Eq.trans (neg_add_neg (1 * 1 * 1) (12 * 12 * 12)) (Eq.trans (neg_add_neg (9 * 9 * 9) (10 * 10 * 10)) rfl)) trivial))))) trivial)))))) (Exists.intro 1 (Exists.intro 10 (Exists.intro 9 (Exists.intro 12 (And.intro (add_eq_of_eq_sub (Eq.symm (Eq.mpr (eq_self_iff_true (1 * 1 * 1 + 10 * 10 * 10 - 9 * 9 * 9 - 12 * 12 * 12)) trivial))) (Or.intro (Exists.intro (-1) (Exists.intro (-10) (Exists.intro (-9) (Exists.intro (-12) (And.intro (Eq.trans (neg_add_neg (1 * 1 * 1) (10 * 10 * 10)) (Eq.trans (neg_add_neg (9 * 9 * 9) (12 * 12 * 12)) rfl)) trivial))))) trivial))))))) (Eq.mpr (propext Nat.lt_one_add_iff_ne_zero) (Eq.mpr (propext not_false_iff) trivial))))", "⊢ ∃ x1 y1 x2 y2 : ℤ, x1 ≠ x2 ∧ y1 ≠ y2 ∧ x1 ^ 3 + y1 ^ 3 = x2 ^ 3 + y2 ^ 3 ∧ 0 < x1 ^ 3 + y1 ^ 3 ∧ ∀ k : ℕ, k < 1729 → ¬(∃ x y : ℤ, x ≠ y ∧ x ^ 3 + y ^ 3 = ↑k) ", "Int.eq 1729 ((1 : ℤ) ^ 3 + 12 ^ 3) (9 ^ 3 + 10 ^ 3) ", "Int1729 ", "ℕ.smallest_1729 ", "Lean.isSmallInt 1729 → ∃ p q r s : ℤ, p ≠ q ∧ r ≠ s ∧ p ^ 3 + r ^ 3 = 1729 ∧ q ^ 3 + s ^ 3 = 1729 ", "Nat.min_fac_eq 1729 ", "smallest_1729 : ∃ x1 y1 x2 y2, x1 ≠ x2 ∧ y1 ≠ y2 ∧ x1 ^ 3 + y1 ^ 3 = x2 ^ 3 + y2 ^ 3 ∧ x1 ^ 3 + y1 ^ 3 = 1729 ", "Int1729IsSmallest "]}
{"docString": "Suppose that `f` is holomorphic in an open set `Ω`. Prove that if `Re(f)` is constant, then `f` is constant.", "prompts": "[{\"theorem\":\n  \"∀ {E : Type u_2} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type u_4} [inst_2 : NormedAddCommGroup F]\\n  [inst_3 : NormedSpace ℂ F] {H : Type u_3} [inst_4 : TopologicalSpace H] {I : ModelWithCorners ℂ E H}\\n  [inst_5 : ModelWithCorners.Boundaryless I] {M : Type u_1} [inst_6 : TopologicalSpace M] [inst_7 : ChartedSpace H M]\\n  [inst_8 : SmoothManifoldWithCorners I M] {f : M → F} {U : Set M} {a b : M},\\n  MDifferentiableOn I (modelWithCornersSelf ℂ F) f U →\\n    IsPreconnected U → IsCompact U → IsOpen U → a ∈ U → b ∈ U → f a = f b\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a function `f : M → F` from a complex manifold to a complex normed space is holomorphic on a\\n(pre)connected compact open set, then it is a constant on this set. \"},\n {\"theorem\":\n  \"∀ {E : Type u_2} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type u_4} [inst_2 : NormedAddCommGroup F]\\n  [inst_3 : NormedSpace ℂ F] {H : Type u_3} [inst_4 : TopologicalSpace H] {I : ModelWithCorners ℂ E H}\\n  [inst_5 : ModelWithCorners.Boundaryless I] {M : Type u_1} [inst_6 : TopologicalSpace M] [inst_7 : CompactSpace M]\\n  [inst_8 : ChartedSpace H M] [inst_9 : SmoothManifoldWithCorners I M] [inst_10 : PreconnectedSpace M] {f : M → F},\\n  MDifferentiable I (modelWithCornersSelf ℂ F) f → ∀ (a b : M), f a = f b\",\n  \"isProp\": true,\n  \"docString\":\n  \"A holomorphic function on a compact connected complex manifold is constant. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type u_4} [inst_2 : NormedAddCommGroup F]\\n  [inst_3 : NormedSpace ℂ F] {H : Type u_2} [inst_4 : TopologicalSpace H] {I : ModelWithCorners ℂ E H}\\n  [inst_5 : ModelWithCorners.Boundaryless I] {M : Type u_3} [inst_6 : TopologicalSpace M] [inst_7 : CompactSpace M]\\n  [inst_8 : ChartedSpace H M] [inst_9 : SmoothManifoldWithCorners I M] {f : M → F},\\n  MDifferentiable I (modelWithCornersSelf ℂ F) f → IsLocallyConstant f\",\n  \"isProp\": true,\n  \"docString\":\n  \"A holomorphic function on a compact complex manifold is locally constant. \"},\n {\"theorem\":\n  \"∀ {E : Type u_2} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type u_4} [inst_2 : NormedAddCommGroup F]\\n  [inst_3 : NormedSpace ℂ F] {H : Type u_3} [inst_4 : TopologicalSpace H] {I : ModelWithCorners ℂ E H}\\n  [inst_5 : ModelWithCorners.Boundaryless I] {M : Type u_1} [inst_6 : TopologicalSpace M] [inst_7 : CompactSpace M]\\n  [inst_8 : ChartedSpace H M] [inst_9 : SmoothManifoldWithCorners I M] [inst_10 : PreconnectedSpace M] {f : M → F},\\n  MDifferentiable I (modelWithCornersSelf ℂ F) f → ∃ v, f = Function.const M v\",\n  \"isProp\": true,\n  \"docString\":\n  \"A holomorphic function on a compact connected complex manifold is the constant function `f ≡ v`,\\nfor some value `v`. \"},\n {\"theorem\":\n  \"∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type v} [inst_2 : NormedAddCommGroup F]\\n  [inst_3 : NormedSpace ℂ F] {f : E → F}, Differentiable ℂ f → Metric.Bounded (Set.range f) → ∀ (z w : E), f z = f w\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Liouville's theorem**: a complex differentiable bounded function `f : E → F` is a constant. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {U : Set E} {g : E → ℂ},\\n  AnalyticOn ℂ g U →\\n    IsPreconnected U → (∃ w, ∀ (z : E), z ∈ U → g z = w) ∨ ∀ (s : Set E), s ⊆ U → IsOpen s → IsOpen (g '' s)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The *open mapping theorem* for holomorphic functions, global version: if a function `g : E → ℂ`\\nis analytic on a connected set `U`, then either it is constant on `U`, or it is open on `U` (in the\\nsense that it maps any open set contained in `U` to an open set in `ℂ`). \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {G : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup G] [inst_2 : NormedSpace 𝕜 G]\\n  {f : 𝕜 → G}, Differentiable 𝕜 f → (∀ (x : 𝕜), deriv f x = 0) → ∀ (x y : 𝕜), f x = f y\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f : 𝕜 → G`, `𝕜 = R` or `𝕜 = ℂ`, is differentiable everywhere and its derivative equal zero,\\nthen it is a constant function. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_2} {𝕜₂ : Type u_3} {E : Type u_4} {F : Type u_5} {𝓕 : Type u_1} [inst : SeminormedAddCommGroup E]\\n  [inst_1 : SeminormedAddCommGroup F] [inst_2 : NontriviallyNormedField 𝕜] [inst_3 : NontriviallyNormedField 𝕜₂]\\n  [inst_4 : NormedSpace 𝕜 E] [inst_5 : NormedSpace 𝕜₂ F] {σ₁₂ : 𝕜 →+* 𝕜₂} [inst_6 : SemilinearMapClass 𝓕 σ₁₂ E F]\\n  (f : 𝓕), Continuous ↑f → ∀ {x : E}, ‖x‖ = 0 → ‖↑f x‖ = 0\",\n  \"isProp\": true,\n  \"docString\": \"If `‖x‖ = 0` and `f` is continuous then `‖f x‖ = 0`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {β : Type u_1} {ι : Type u_3} {m : MeasurableSpace α} (μ : MeasureTheory.Measure α)\\n  [inst : NormedAddCommGroup β] {p : ENNReal} {g : α → β},\\n  1 ≤ p → p ≠ ⊤ → MeasureTheory.Memℒp g p → MeasureTheory.UnifIntegrable (fun x => g) p μ\",\n  \"isProp\": true,\n  \"docString\": \"A constant function is uniformly integrable. \"},\n {\"theorem\":\n  \"∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {n : ℕ∞} {s : Set ℂ}\\n  {f : ℂ → E}, DifferentiableOn ℂ f s → IsOpen s → ContDiffOn ℂ n f s\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f : ℂ → E` is complex differentiable on some open set `s`, then it is continuously\\ndifferentiable on `s`. \"},\n {\"theorem\":\n  \"∀ {C : Type u} [inst : CategoryTheory.Category C] [inst_1 : CategoryTheory.Limits.HasZeroMorphisms C]\\n  [inst_2 : CategoryTheory.Limits.HasZeroObject C] [inst_3 : CategoryTheory.Limits.HasEqualizers C] {X Y : C}\\n  {f : X ⟶ Y}, f = 0 → ∀ [inst_4 : CategoryTheory.Limits.HasImage f], CategoryTheory.Limits.image.ι f = 0\",\n  \"isProp\": true,\n  \"docString\":\n  \"If we know `f = 0`,\\nit requires a little work to conclude `image.ι f = 0`,\\nbecause `f = g` only implies `image f ≅ image g`.\\n\"},\n {\"theorem\":\n  \"∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type v} [inst_2 : NormedAddCommGroup F]\\n  [inst_3 : NormedSpace ℂ F] {f : E → F}, Differentiable ℂ f → Metric.Bounded (Set.range f) → ∃ c, ∀ (z : E), f z = c\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Liouville's theorem**: a complex differentiable bounded function is a constant. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] {m : MeasurableSpace X} [inst_1 : TopologicalSpace Y]\\n  [inst_2 : T2Space Y] {μ : MeasureTheory.Measure X} [inst_3 : MeasureTheory.Measure.IsOpenPosMeasure μ] {U : Set X}\\n  {f g : X → Y},\\n  f =ᶠ[MeasureTheory.Measure.ae (MeasureTheory.Measure.restrict μ U)] g →\\n    IsOpen U → ContinuousOn f U → ContinuousOn g U → Set.EqOn f g U\",\n  \"isProp\": true,\n  \"docString\":\n  \"If two functions are a.e. equal on an open set and are continuous on this set, then they are\\nequal on this set. \"},\n {\"theorem\":\n  \"∀ {𝕂 : Type u_1} [inst : IsROrC 𝕂] {E' : Type u_2} [inst_1 : NormedAddCommGroup E'] [inst_2 : NormedSpace 𝕂 E']\\n  {F' : Type u_3} [inst_3 : NormedAddCommGroup F'] [inst_4 : NormedSpace 𝕂 F'] {f : E' → F'} {x : E'},\\n  ContDiffAt 𝕂 1 f x → ∃ K t, t ∈ nhds x ∧ LipschitzOnWith K f t\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` is `C^1` at `x`, then `f` is Lipschitz in a neighborhood of `x`. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {g : E → ℂ} {z₀ : E},\\n  AnalyticAt ℂ g z₀ → (∀ᶠ (z : E) in nhds z₀, g z = g z₀) ∨ nhds (g z₀) ≤ Filter.map g (nhds z₀)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The *open mapping theorem* for holomorphic functions, local version: is a function `g : E → ℂ`\\nis analytic at a point `z₀`, then either it is constant in a neighborhood of `z₀`, or it maps every\\nneighborhood of `z₀` to a neighborhood of `z₀`. For the particular case of a holomorphic function on\\n`ℂ`, see `AnalyticAt.eventually_constant_or_nhds_le_map_nhds_aux`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {γ : Type u_1} [inst : UniformSpace α] {f : α → γ} [inst_1 : TopologicalSpace γ] [inst_2 : Zero γ],\\n  HasCompactSupport f → Filter.Tendsto f (Filter.cocompact α) (nhds 0)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` has compact support, then `f` tends to zero at infinity.\"},\n {\"theorem\":\n  \"∀ {f : ℂ → ℂ} {z₀ : ℂ}, AnalyticAt ℂ f z₀ → (∀ᶠ (z : ℂ) in nhds z₀, f z = f z₀) ∨ nhds (f z₀) ≤ Filter.map f (nhds z₀)\",\n  \"isProp\": true,\n  \"docString\":\n  \"A function `f : ℂ → ℂ` which is analytic at a point `z₀` is either constant in a neighborhood\\nof `z₀`, or behaves locally like an open function (in the sense that the image of every neighborhood\\nof `z₀` is a neighborhood of `f z₀`, as in `isOpenMap_iff_nhds_le`). For a function `f : E → ℂ`\\nthe same result holds, see `AnalyticAt.eventually_constant_or_nhds_le_map_nhds`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {𝕜 : Type u_1} {f g : α → 𝕜} {S : Set α} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace 𝕜]\\n  [inst_2 : T1Space 𝕜] [inst_3 : Field 𝕜] [inst_4 : HasContinuousInv₀ 𝕜] [inst_5 : ContinuousMul 𝕜],\\n  IsPreconnected S →\\n    ContinuousOn f S →\\n      ContinuousOn g S →\\n        Set.EqOn (f ^ 2) (g ^ 2) S → (∀ {x : α}, x ∈ S → g x ≠ 0) → ∀ {y : α}, y ∈ S → f y = g y → Set.EqOn f g S\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f, g` are functions `α → 𝕜`, both continuous on a preconnected set `S`, with\\n`f ^ 2 = g ^ 2` on `S`, and `g z ≠ 0` all `z ∈ S`, then as soon as `f = g` holds at\\none point of `S` it holds for all points. \"},\n {\"theorem\":\n  \"∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {c : ℂ} {r R : ℝ},\\n  0 < r →\\n    r ≤ R →\\n      ∀ {f : ℂ → E} {s : Set ℂ},\\n        Set.Countable s →\\n          ContinuousOn f (Metric.closedBall c R \\\\ Metric.ball c r) →\\n            (∀ (z : ℂ), z ∈ (Metric.ball c R \\\\ Metric.closedBall c r) \\\\ s → DifferentiableAt ℂ f z) →\\n              (∮ (z : ℂ) in C(c, R), (z - c)⁻¹ • f z) = ∮ (z : ℂ) in C(c, r), (z - c)⁻¹ • f z\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f : ℂ → E` is continuous the closed annulus `r ≤ ‖z - c‖ ≤ R`, `0 < r ≤ R`, and is complex\\ndifferentiable at all but countably many points of its interior, then the integrals of\\n`f z / (z - c)` (formally, `(z - c)⁻¹ • f z`) over the circles `‖z - c‖ = r` and `‖z - c‖ = R` are\\nequal to each other. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : MeasurableSpace α] [inst_1 : TopologicalSpace α]\\n  [inst_2 : TopologicalSpace.SecondCountableTopology α] [inst_3 : OpensMeasurableSpace α] {f : α → α}\\n  {μ : MeasureTheory.Measure α},\\n  MeasureTheory.Conservative f μ → ∀ᵐ (x : α) ∂μ, ∀ (s : Set α), s ∈ nhds x → ∃ᶠ (n : ℕ) in Filter.atTop, f^[n] x ∈ s\",\n  \"isProp\": true,\n  \"docString\":\n  \"Poincaré recurrence theorem. Let `f : α → α` be a conservative dynamical system on a topological\\nspace with second countable topology and measurable open sets. Then almost every point `x : α`\\nis recurrent: it visits every neighborhood `s ∈ 𝓝 x` infinitely many times. \"}]\n", "prompt_cons": "/-- If a function `f : M → F` from a complex manifold to a complex normed space is holomorphic on a\n(pre)connected compact open set, then it is a constant on this set. -/\ntheorem ∀ {E : Type u_2} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type u_4} [inst_2 : NormedAddCommGroup F]\n  [inst_3 : NormedSpace ℂ F] {H : Type u_3} [inst_4 : TopologicalSpace H] {I : ModelWithCorners ℂ E H}\n  [inst_5 : ModelWithCorners.Boundaryless I] {M : Type u_1} [inst_6 : TopologicalSpace M] [inst_7 : ChartedSpace H M]\n  [inst_8 : SmoothManifoldWithCorners I M] {f : M → F} {U : Set M} {a b : M},\n  MDifferentiableOn I (modelWithCornersSelf ℂ F) f U →\n    IsPreconnected U → IsCompact U → IsOpen U → a ∈ U → b ∈ U → f a = f b :=\n\n/-- A holomorphic function on a compact connected complex manifold is constant. -/\ntheorem ∀ {E : Type u_2} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type u_4} [inst_2 : NormedAddCommGroup F]\n  [inst_3 : NormedSpace ℂ F] {H : Type u_3} [inst_4 : TopologicalSpace H] {I : ModelWithCorners ℂ E H}\n  [inst_5 : ModelWithCorners.Boundaryless I] {M : Type u_1} [inst_6 : TopologicalSpace M] [inst_7 : CompactSpace M]\n  [inst_8 : ChartedSpace H M] [inst_9 : SmoothManifoldWithCorners I M] [inst_10 : PreconnectedSpace M] {f : M → F},\n  MDifferentiable I (modelWithCornersSelf ℂ F) f → ∀ (a b : M), f a = f b :=\n\n/-- A holomorphic function on a compact complex manifold is locally constant. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type u_4} [inst_2 : NormedAddCommGroup F]\n  [inst_3 : NormedSpace ℂ F] {H : Type u_2} [inst_4 : TopologicalSpace H] {I : ModelWithCorners ℂ E H}\n  [inst_5 : ModelWithCorners.Boundaryless I] {M : Type u_3} [inst_6 : TopologicalSpace M] [inst_7 : CompactSpace M]\n  [inst_8 : ChartedSpace H M] [inst_9 : SmoothManifoldWithCorners I M] {f : M → F},\n  MDifferentiable I (modelWithCornersSelf ℂ F) f → IsLocallyConstant f :=\n\n/-- A holomorphic function on a compact connected complex manifold is the constant function `f ≡ v`,\nfor some value `v`. -/\ntheorem ∀ {E : Type u_2} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type u_4} [inst_2 : NormedAddCommGroup F]\n  [inst_3 : NormedSpace ℂ F] {H : Type u_3} [inst_4 : TopologicalSpace H] {I : ModelWithCorners ℂ E H}\n  [inst_5 : ModelWithCorners.Boundaryless I] {M : Type u_1} [inst_6 : TopologicalSpace M] [inst_7 : CompactSpace M]\n  [inst_8 : ChartedSpace H M] [inst_9 : SmoothManifoldWithCorners I M] [inst_10 : PreconnectedSpace M] {f : M → F},\n  MDifferentiable I (modelWithCornersSelf ℂ F) f → ∃ v, f = Function.const M v :=\n\n/-- **Liouville's theorem**: a complex differentiable bounded function `f : E → F` is a constant. -/\ntheorem ∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type v} [inst_2 : NormedAddCommGroup F]\n  [inst_3 : NormedSpace ℂ F] {f : E → F}, Differentiable ℂ f → Metric.Bounded (Set.range f) → ∀ (z w : E), f z = f w :=\n\n/-- The *open mapping theorem* for holomorphic functions, global version: if a function `g : E → ℂ`\nis analytic on a connected set `U`, then either it is constant on `U`, or it is open on `U` (in the\nsense that it maps any open set contained in `U` to an open set in `ℂ`). -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {U : Set E} {g : E → ℂ},\n  AnalyticOn ℂ g U →\n    IsPreconnected U → (∃ w, ∀ (z : E), z ∈ U → g z = w) ∨ ∀ (s : Set E), s ⊆ U → IsOpen s → IsOpen (g '' s) :=\n\n/-- If `f : 𝕜 → G`, `𝕜 = R` or `𝕜 = ℂ`, is differentiable everywhere and its derivative equal zero,\nthen it is a constant function. -/\ntheorem ∀ {𝕜 : Type u_1} {G : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup G] [inst_2 : NormedSpace 𝕜 G]\n  {f : 𝕜 → G}, Differentiable 𝕜 f → (∀ (x : 𝕜), deriv f x = 0) → ∀ (x y : 𝕜), f x = f y :=\n\n/-- If `‖x‖ = 0` and `f` is continuous then `‖f x‖ = 0`. -/\ntheorem ∀ {𝕜 : Type u_2} {𝕜₂ : Type u_3} {E : Type u_4} {F : Type u_5} {𝓕 : Type u_1} [inst : SeminormedAddCommGroup E]\n  [inst_1 : SeminormedAddCommGroup F] [inst_2 : NontriviallyNormedField 𝕜] [inst_3 : NontriviallyNormedField 𝕜₂]\n  [inst_4 : NormedSpace 𝕜 E] [inst_5 : NormedSpace 𝕜₂ F] {σ₁₂ : 𝕜 →+* 𝕜₂} [inst_6 : SemilinearMapClass 𝓕 σ₁₂ E F]\n  (f : 𝓕), Continuous ↑f → ∀ {x : E}, ‖x‖ = 0 → ‖↑f x‖ = 0 :=\n\n/-- A constant function is uniformly integrable. -/\ntheorem ∀ {α : Type u_2} {β : Type u_1} {ι : Type u_3} {m : MeasurableSpace α} (μ : MeasureTheory.Measure α)\n  [inst : NormedAddCommGroup β] {p : ENNReal} {g : α → β},\n  1 ≤ p → p ≠ ⊤ → MeasureTheory.Memℒp g p → MeasureTheory.UnifIntegrable (fun x => g) p μ :=\n\n/-- If `f : ℂ → E` is complex differentiable on some open set `s`, then it is continuously\ndifferentiable on `s`. -/\ntheorem ∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {n : ℕ∞} {s : Set ℂ}\n  {f : ℂ → E}, DifferentiableOn ℂ f s → IsOpen s → ContDiffOn ℂ n f s :=\n\n/-- If we know `f = 0`,\nit requires a little work to conclude `image.ι f = 0`,\nbecause `f = g` only implies `image f ≅ image g`. -/\ntheorem ∀ {C : Type u} [inst : CategoryTheory.Category C] [inst_1 : CategoryTheory.Limits.HasZeroMorphisms C]\n  [inst_2 : CategoryTheory.Limits.HasZeroObject C] [inst_3 : CategoryTheory.Limits.HasEqualizers C] {X Y : C}\n  {f : X ⟶ Y}, f = 0 → ∀ [inst_4 : CategoryTheory.Limits.HasImage f], CategoryTheory.Limits.image.ι f = 0 :=\n\n/-- **Liouville's theorem**: a complex differentiable bounded function is a constant. -/\ntheorem ∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type v} [inst_2 : NormedAddCommGroup F]\n  [inst_3 : NormedSpace ℂ F] {f : E → F}, Differentiable ℂ f → Metric.Bounded (Set.range f) → ∃ c, ∀ (z : E), f z = c :=\n\n/-- If two functions are a.e. equal on an open set and are continuous on this set, then they are\nequal on this set. -/\ntheorem ∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] {m : MeasurableSpace X} [inst_1 : TopologicalSpace Y]\n  [inst_2 : T2Space Y] {μ : MeasureTheory.Measure X} [inst_3 : MeasureTheory.Measure.IsOpenPosMeasure μ] {U : Set X}\n  {f g : X → Y},\n  f =ᶠ[MeasureTheory.Measure.ae (MeasureTheory.Measure.restrict μ U)] g →\n    IsOpen U → ContinuousOn f U → ContinuousOn g U → Set.EqOn f g U :=\n\n/-- If `f` is `C^1` at `x`, then `f` is Lipschitz in a neighborhood of `x`. -/\ntheorem ∀ {𝕂 : Type u_1} [inst : IsROrC 𝕂] {E' : Type u_2} [inst_1 : NormedAddCommGroup E'] [inst_2 : NormedSpace 𝕂 E']\n  {F' : Type u_3} [inst_3 : NormedAddCommGroup F'] [inst_4 : NormedSpace 𝕂 F'] {f : E' → F'} {x : E'},\n  ContDiffAt 𝕂 1 f x → ∃ K t, t ∈ nhds x ∧ LipschitzOnWith K f t :=\n\n/-- The *open mapping theorem* for holomorphic functions, local version: is a function `g : E → ℂ`\nis analytic at a point `z₀`, then either it is constant in a neighborhood of `z₀`, or it maps every\nneighborhood of `z₀` to a neighborhood of `z₀`. For the particular case of a holomorphic function on\n`ℂ`, see `AnalyticAt.eventually_constant_or_nhds_le_map_nhds_aux`. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {g : E → ℂ} {z₀ : E},\n  AnalyticAt ℂ g z₀ → (∀ᶠ (z : E) in nhds z₀, g z = g z₀) ∨ nhds (g z₀) ≤ Filter.map g (nhds z₀) :=\n\n/-- If `f` has compact support, then `f` tends to zero at infinity. -/\ntheorem ∀ {α : Type u_2} {γ : Type u_1} [inst : UniformSpace α] {f : α → γ} [inst_1 : TopologicalSpace γ] [inst_2 : Zero γ],\n  HasCompactSupport f → Filter.Tendsto f (Filter.cocompact α) (nhds 0) :=\n\n/-- A function `f : ℂ → ℂ` which is analytic at a point `z₀` is either constant in a neighborhood\nof `z₀`, or behaves locally like an open function (in the sense that the image of every neighborhood\nof `z₀` is a neighborhood of `f z₀`, as in `isOpenMap_iff_nhds_le`). For a function `f : E → ℂ`\nthe same result holds, see `AnalyticAt.eventually_constant_or_nhds_le_map_nhds`. -/\ntheorem ∀ {f : ℂ → ℂ} {z₀ : ℂ}, AnalyticAt ℂ f z₀ → (∀ᶠ (z : ℂ) in nhds z₀, f z = f z₀) ∨ nhds (f z₀) ≤ Filter.map f (nhds z₀) :=\n\n/-- If `f, g` are functions `α → 𝕜`, both continuous on a preconnected set `S`, with\n`f ^ 2 = g ^ 2` on `S`, and `g z ≠ 0` all `z ∈ S`, then as soon as `f = g` holds at\none point of `S` it holds for all points. -/\ntheorem ∀ {α : Type u_2} {𝕜 : Type u_1} {f g : α → 𝕜} {S : Set α} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace 𝕜]\n  [inst_2 : T1Space 𝕜] [inst_3 : Field 𝕜] [inst_4 : HasContinuousInv₀ 𝕜] [inst_5 : ContinuousMul 𝕜],\n  IsPreconnected S →\n    ContinuousOn f S →\n      ContinuousOn g S →\n        Set.EqOn (f ^ 2) (g ^ 2) S → (∀ {x : α}, x ∈ S → g x ≠ 0) → ∀ {y : α}, y ∈ S → f y = g y → Set.EqOn f g S :=\n\n/-- If `f : ℂ → E` is continuous the closed annulus `r ≤ ‖z - c‖ ≤ R`, `0 < r ≤ R`, and is complex\ndifferentiable at all but countably many points of its interior, then the integrals of\n`f z / (z - c)` (formally, `(z - c)⁻¹ • f z`) over the circles `‖z - c‖ = r` and `‖z - c‖ = R` are\nequal to each other. -/\ntheorem ∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {c : ℂ} {r R : ℝ},\n  0 < r →\n    r ≤ R →\n      ∀ {f : ℂ → E} {s : Set ℂ},\n        Set.Countable s →\n          ContinuousOn f (Metric.closedBall c R \\ Metric.ball c r) →\n            (∀ (z : ℂ), z ∈ (Metric.ball c R \\ Metric.closedBall c r) \\ s → DifferentiableAt ℂ f z) →\n              (∮ (z : ℂ) in C(c, R), (z - c)⁻¹ • f z) = ∮ (z : ℂ) in C(c, r), (z - c)⁻¹ • f z :=\n\n/-- Poincaré recurrence theorem. Let `f : α → α` be a conservative dynamical system on a topological\nspace with second countable topology and measurable open sets. Then almost every point `x : α`\nis recurrent: it visits every neighborhood `s ∈ 𝓝 x` infinitely many times. -/\ntheorem ∀ {α : Type u_1} [inst : MeasurableSpace α] [inst_1 : TopologicalSpace α]\n  [inst_2 : TopologicalSpace.SecondCountableTopology α] [inst_3 : OpensMeasurableSpace α] {f : α → α}\n  {μ : MeasureTheory.Measure α},\n  MeasureTheory.Conservative f μ → ∀ᵐ (x : α) ∂μ, ∀ (s : Set α), s ∈ nhds x → ∃ᶠ (n : ℕ) in Filter.atTop, f^[n] x ∈ s :=\n\n/-- Suppose that `f` is holomorphic in an open set `Ω`. Prove that if `Re(f)` is constant, then `f` is constant. -/\ntheorem", "choices": ["∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type u_2} [inst_2 : NormedAddCommGroup F]\n  [inst_3 : NormedSpace ℂ F] {f : E → F} {Ω : Set E}, IsOpen Ω → DifferentiableOn ℂ f Ω →\n    (∀ (x y : E), x ∈ Ω → y ∈ Ω → (f x).re = (f y).re) → ∀ (x y : E), x ∈ Ω → y ∈ Ω → f x = f y ", "forall {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {Ω : Set ℂ} {f : ℂ → E},\n  DifferentiableOn ℂ f Ω →\n    IsOpen Ω →\n      (∀ (x : ℂ), x ∈ Ω → ∀ (y : ℂ), y ∈ Ω → (f x).re = (f y).re) →\n        ∀ (x : ℂ), x ∈ Ω → ∀ (y : ℂ), y ∈ Ω → f x = f y ", "forall {E : Type u_2} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type u_4} [inst_2 : NormedAddCommGroup F]\n  [inst_3 : NormedSpace ℂ F] {H : Type u_3} [inst_4 : TopologicalSpace H] {I : ModelWithCorners ℂ E H}\n  [inst_5 : ModelWithCorners.Boundaryless I] {M : Type u_1} [inst_6 : TopologicalSpace M] [inst_7 : ChartedSpace H M]\n  [inst_8 : SmoothManifoldWithCorners I M] {f : M → ℂ} {U : Set M},\n  MDifferentiableOn I (modelWithCornersSelf ℂ ℂ) f U →\n    IsOpen U → Set.EqOn (⇑ContinuousLinearMap.reClm ∘ f) (Function.const M (⇑ContinuousLinearMap.reClm (f (Classical.arbitrary M)))) U →\n      Set.EqOn f (Function.const M (f (Classical.arbitrary M))) U ", "∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {f : ℂ → E} {Ω : Set ℂ},\n  DifferentiableOn ℂ f Ω → IsOpen Ω → (∀ {x : ℂ}, x ∈ Ω → ∀ {y : ℂ}, y ∈ Ω → Re (f x) = Re (f y)) → ∀ (x y : ℂ), x ∈ Ω → y ∈ Ω → f x = f y ", "∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {f : ℂ → E} {Ω : Set ℂ},\n  IsOpen Ω → DifferentiableOn ℂ f Ω → (∀ (z : ℂ), z ∈ Ω → (f z).re = (f (Classical.some _)).re) → ∃ c, ∀ (z : ℂ), z ∈ Ω → f z = c ", "∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {Ω : Set ℂ}\n  {f : ℂ → E}, DifferentiableOn ℂ f Ω → IsOpen Ω → (∀ (z : ℂ), z ∈ Ω → (f z).re = (f Ω.some).re) → ∀ (z : ℂ), z ∈ Ω → f z = f Ω.some ", "∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type u_2} [inst_2 : NormedAddCommGroup F]\n  [inst_3 : NormedSpace ℂ F] {s : Set E} {f : E → F},\n  DifferentiableOn ℂ f s → IsOpen s → (∀ (x : E), x ∈ s → (f x).re = (f x).im) → ∀ (a b : E), a ∈ s → b ∈ s → f a = f b ", "∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {Ω : Set E} {f : E → ℂ},\n  DifferentiableOn ℂ f Ω → IsOpen Ω → (∀ (x : E), x ∈ Ω → (f x).re = (f x).re) → ∀ (x y : E), x ∈ Ω → y ∈ Ω → f x = f y ", "∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type u_2} [inst_2 : NormedAddCommGroup F]\n  [inst_3 : NormedSpace ℂ F] {f : E → F} {Ω : Set E},\n  DifferentiableOn ℂ f Ω →\n    IsOpen Ω → (∀ {x y : E}, x ∈ Ω → y ∈ Ω → (f x).re = (f y).re) → ∀ {x y : E}, x ∈ Ω → y ∈ Ω → f x = f y ", "∀ {E : Type u_2} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type u_4} [inst_2 : NormedAddCommGroup F]\n  [inst_3 : NormedSpace ℂ F] {H : Type u_3} [inst_4 : TopologicalSpace H] {I : ModelWithCorners ℂ E H}\n  [inst_5 : ModelWithCorners.Boundaryless I] {M : Type u_1} [inst_6 : TopologicalSpace M] [inst_7 : ChartedSpace H M]\n  [inst_8 : SmoothManifoldWithCorners I M] {f : M → ℂ} {U : Set M},\n  MDifferentiableOn I (modelWithCornersSelf ℂ ℂ) f U →\n    IsOpen U → IsPreconnected U → (∀ x ∈ U, (f x).re = 0) → ∀ x y ∈ U, f x = f y "]}
{"docString": "Suppose that `f` is holomorphic in an open set `Ω`. Prove that if `|f|` is constant, then `f` is constant.", "prompts": "[{\"theorem\":\n  \"∀ {E : Type u_2} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type u_4} [inst_2 : NormedAddCommGroup F]\\n  [inst_3 : NormedSpace ℂ F] {H : Type u_3} [inst_4 : TopologicalSpace H] {I : ModelWithCorners ℂ E H}\\n  [inst_5 : ModelWithCorners.Boundaryless I] {M : Type u_1} [inst_6 : TopologicalSpace M] [inst_7 : ChartedSpace H M]\\n  [inst_8 : SmoothManifoldWithCorners I M] {f : M → F} {U : Set M} {a b : M},\\n  MDifferentiableOn I (modelWithCornersSelf ℂ F) f U →\\n    IsPreconnected U → IsCompact U → IsOpen U → a ∈ U → b ∈ U → f a = f b\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a function `f : M → F` from a complex manifold to a complex normed space is holomorphic on a\\n(pre)connected compact open set, then it is a constant on this set. \"},\n {\"theorem\":\n  \"∀ {E : Type u_2} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type u_4} [inst_2 : NormedAddCommGroup F]\\n  [inst_3 : NormedSpace ℂ F] {H : Type u_3} [inst_4 : TopologicalSpace H] {I : ModelWithCorners ℂ E H}\\n  [inst_5 : ModelWithCorners.Boundaryless I] {M : Type u_1} [inst_6 : TopologicalSpace M] [inst_7 : CompactSpace M]\\n  [inst_8 : ChartedSpace H M] [inst_9 : SmoothManifoldWithCorners I M] [inst_10 : PreconnectedSpace M] {f : M → F},\\n  MDifferentiable I (modelWithCornersSelf ℂ F) f → ∀ (a b : M), f a = f b\",\n  \"isProp\": true,\n  \"docString\":\n  \"A holomorphic function on a compact connected complex manifold is constant. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type u_4} [inst_2 : NormedAddCommGroup F]\\n  [inst_3 : NormedSpace ℂ F] {H : Type u_2} [inst_4 : TopologicalSpace H] {I : ModelWithCorners ℂ E H}\\n  [inst_5 : ModelWithCorners.Boundaryless I] {M : Type u_3} [inst_6 : TopologicalSpace M] [inst_7 : CompactSpace M]\\n  [inst_8 : ChartedSpace H M] [inst_9 : SmoothManifoldWithCorners I M] {f : M → F},\\n  MDifferentiable I (modelWithCornersSelf ℂ F) f → IsLocallyConstant f\",\n  \"isProp\": true,\n  \"docString\":\n  \"A holomorphic function on a compact complex manifold is locally constant. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {U : Set E} {g : E → ℂ},\\n  AnalyticOn ℂ g U →\\n    IsPreconnected U → (∃ w, ∀ (z : E), z ∈ U → g z = w) ∨ ∀ (s : Set E), s ⊆ U → IsOpen s → IsOpen (g '' s)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The *open mapping theorem* for holomorphic functions, global version: if a function `g : E → ℂ`\\nis analytic on a connected set `U`, then either it is constant on `U`, or it is open on `U` (in the\\nsense that it maps any open set contained in `U` to an open set in `ℂ`). \"},\n {\"theorem\":\n  \"∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type v} [inst_2 : NormedAddCommGroup F]\\n  [inst_3 : NormedSpace ℂ F] {f : E → F}, Differentiable ℂ f → Metric.Bounded (Set.range f) → ∀ (z w : E), f z = f w\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Liouville's theorem**: a complex differentiable bounded function `f : E → F` is a constant. \"},\n {\"theorem\":\n  \"∀ {E : Type u_2} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type u_4} [inst_2 : NormedAddCommGroup F]\\n  [inst_3 : NormedSpace ℂ F] {H : Type u_3} [inst_4 : TopologicalSpace H] {I : ModelWithCorners ℂ E H}\\n  [inst_5 : ModelWithCorners.Boundaryless I] {M : Type u_1} [inst_6 : TopologicalSpace M] [inst_7 : CompactSpace M]\\n  [inst_8 : ChartedSpace H M] [inst_9 : SmoothManifoldWithCorners I M] [inst_10 : PreconnectedSpace M] {f : M → F},\\n  MDifferentiable I (modelWithCornersSelf ℂ F) f → ∃ v, f = Function.const M v\",\n  \"isProp\": true,\n  \"docString\":\n  \"A holomorphic function on a compact connected complex manifold is the constant function `f ≡ v`,\\nfor some value `v`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {G : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup G] [inst_2 : NormedSpace 𝕜 G]\\n  {f : 𝕜 → G}, Differentiable 𝕜 f → (∀ (x : 𝕜), deriv f x = 0) → ∀ (x y : 𝕜), f x = f y\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f : 𝕜 → G`, `𝕜 = R` or `𝕜 = ℂ`, is differentiable everywhere and its derivative equal zero,\\nthen it is a constant function. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_2} {𝕜₂ : Type u_3} {E : Type u_4} {F : Type u_5} {𝓕 : Type u_1} [inst : SeminormedAddCommGroup E]\\n  [inst_1 : SeminormedAddCommGroup F] [inst_2 : NontriviallyNormedField 𝕜] [inst_3 : NontriviallyNormedField 𝕜₂]\\n  [inst_4 : NormedSpace 𝕜 E] [inst_5 : NormedSpace 𝕜₂ F] {σ₁₂ : 𝕜 →+* 𝕜₂} [inst_6 : SemilinearMapClass 𝓕 σ₁₂ E F]\\n  (f : 𝓕), Continuous ↑f → ∀ {x : E}, ‖x‖ = 0 → ‖↑f x‖ = 0\",\n  \"isProp\": true,\n  \"docString\": \"If `‖x‖ = 0` and `f` is continuous then `‖f x‖ = 0`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {β : Type u_1} {ι : Type u_3} {m : MeasurableSpace α} (μ : MeasureTheory.Measure α)\\n  [inst : NormedAddCommGroup β] {p : ENNReal} {g : α → β},\\n  1 ≤ p → p ≠ ⊤ → MeasureTheory.Memℒp g p → MeasureTheory.UnifIntegrable (fun x => g) p μ\",\n  \"isProp\": true,\n  \"docString\": \"A constant function is uniformly integrable. \"},\n {\"theorem\":\n  \"∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type v} [inst_2 : NormedAddCommGroup F]\\n  [inst_3 : NormedSpace ℂ F] {f : E → F}, Differentiable ℂ f → Metric.Bounded (Set.range f) → ∃ c, ∀ (z : E), f z = c\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Liouville's theorem**: a complex differentiable bounded function is a constant. \"},\n {\"theorem\":\n  \"∀ {𝕂 : Type u_1} [inst : IsROrC 𝕂] {E' : Type u_2} [inst_1 : NormedAddCommGroup E'] [inst_2 : NormedSpace 𝕂 E']\\n  {F' : Type u_3} [inst_3 : NormedAddCommGroup F'] [inst_4 : NormedSpace 𝕂 F'] {f : E' → F'} {x : E'},\\n  ContDiffAt 𝕂 1 f x → ∃ K t, t ∈ nhds x ∧ LipschitzOnWith K f t\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` is `C^1` at `x`, then `f` is Lipschitz in a neighborhood of `x`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {m : MeasurableSpace α} {μ : MeasureTheory.Measure α} {f : α → ENNReal},\\n  ∫⁻ (x : α), f x ∂μ ≠ ⊤ → ∀ {ε : ENNReal}, ε ≠ 0 → ∃ δ, δ > 0 ∧ ∀ (s : Set α), ↑↑μ s < δ → ∫⁻ (x : α) in s, f x ∂μ < ε\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` has finite integral, then `∫⁻ x in s, f x ∂μ` is absolutely continuous in `s`: it tends\\nto zero as `μ s` tends to zero. This lemma states states this fact in terms of `ε` and `δ`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {γ : Type u_1} [inst : UniformSpace α] {f : α → γ} [inst_1 : TopologicalSpace γ] [inst_2 : Zero γ],\\n  HasCompactSupport f → Filter.Tendsto f (Filter.cocompact α) (nhds 0)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` has compact support, then `f` tends to zero at infinity.\"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {g : E → ℂ} {z₀ : E},\\n  AnalyticAt ℂ g z₀ → (∀ᶠ (z : E) in nhds z₀, g z = g z₀) ∨ nhds (g z₀) ≤ Filter.map g (nhds z₀)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The *open mapping theorem* for holomorphic functions, local version: is a function `g : E → ℂ`\\nis analytic at a point `z₀`, then either it is constant in a neighborhood of `z₀`, or it maps every\\nneighborhood of `z₀` to a neighborhood of `z₀`. For the particular case of a holomorphic function on\\n`ℂ`, see `AnalyticAt.eventually_constant_or_nhds_le_map_nhds_aux`. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] {m : MeasurableSpace X} [inst_1 : TopologicalSpace Y]\\n  [inst_2 : T2Space Y] {μ : MeasureTheory.Measure X} [inst_3 : MeasureTheory.Measure.IsOpenPosMeasure μ] {U : Set X}\\n  {f g : X → Y},\\n  f =ᶠ[MeasureTheory.Measure.ae (MeasureTheory.Measure.restrict μ U)] g →\\n    IsOpen U → ContinuousOn f U → ContinuousOn g U → Set.EqOn f g U\",\n  \"isProp\": true,\n  \"docString\":\n  \"If two functions are a.e. equal on an open set and are continuous on this set, then they are\\nequal on this set. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} {E : Type u_2} [inst : MeasurableSpace X] [inst_1 : TopologicalSpace X] [inst_2 : NormedAddCommGroup E]\\n  {f : X → E} {μ : MeasureTheory.Measure X} [inst_3 : OpensMeasurableSpace X]\\n  [inst_4 : MeasureTheory.IsLocallyFiniteMeasure μ] [inst_5 : SecondCountableTopologyEither X E],\\n  Continuous f → MeasureTheory.LocallyIntegrable f\",\n  \"isProp\": true,\n  \"docString\":\n  \"A continuous function `f` is locally integrable with respect to any locally finite measure. \"},\n {\"theorem\":\n  \"∀ {f : ℂ → ℂ} {z₀ : ℂ}, AnalyticAt ℂ f z₀ → (∀ᶠ (z : ℂ) in nhds z₀, f z = f z₀) ∨ nhds (f z₀) ≤ Filter.map f (nhds z₀)\",\n  \"isProp\": true,\n  \"docString\":\n  \"A function `f : ℂ → ℂ` which is analytic at a point `z₀` is either constant in a neighborhood\\nof `z₀`, or behaves locally like an open function (in the sense that the image of every neighborhood\\nof `z₀` is a neighborhood of `f z₀`, as in `isOpenMap_iff_nhds_le`). For a function `f : E → ℂ`\\nthe same result holds, see `AnalyticAt.eventually_constant_or_nhds_le_map_nhds`. \"},\n {\"theorem\":\n  \"∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {n : ℕ∞} {s : Set ℂ}\\n  {f : ℂ → E}, DifferentiableOn ℂ f s → IsOpen s → ContDiffOn ℂ n f s\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f : ℂ → E` is complex differentiable on some open set `s`, then it is continuously\\ndifferentiable on `s`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {β : Type u_2} [inst : LinearOrder α] {a b : α} (h : a ≤ b) (f : α → β),\\n  (∀ (x : α), x < a → f x = f a) → (∀ (x : α), b < x → f x = f b) → Set.IccExtend h (f ∘ Subtype.val) = f\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f : α → β` is a constant both on $(-∞, a]$ and on $[b, +∞)$, then the extension of this\\nfunction from $[a, b]$ to the whole line is equal to the original function. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] {𝕜 : Type u_2} {G : Type u_3}\\n  [inst_2 : IsROrC 𝕜] [inst_3 : NormedSpace 𝕜 E] [inst_4 : NormedAddCommGroup G] [inst_5 : NormedSpace 𝕜 G] {f : E → G}\\n  {s : Set E} {x y : E},\\n  Convex ℝ s → DifferentiableOn 𝕜 f s → (∀ (x : E), x ∈ s → fderivWithin 𝕜 f s x = 0) → x ∈ s → y ∈ s → f x = f y\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a function has zero Fréchet derivative at every point of a convex set,\\nthen it is a constant on this set. \"}]\n", "prompt_cons": "/-- If a function `f : M → F` from a complex manifold to a complex normed space is holomorphic on a\n(pre)connected compact open set, then it is a constant on this set. -/\ntheorem ∀ {E : Type u_2} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type u_4} [inst_2 : NormedAddCommGroup F]\n  [inst_3 : NormedSpace ℂ F] {H : Type u_3} [inst_4 : TopologicalSpace H] {I : ModelWithCorners ℂ E H}\n  [inst_5 : ModelWithCorners.Boundaryless I] {M : Type u_1} [inst_6 : TopologicalSpace M] [inst_7 : ChartedSpace H M]\n  [inst_8 : SmoothManifoldWithCorners I M] {f : M → F} {U : Set M} {a b : M},\n  MDifferentiableOn I (modelWithCornersSelf ℂ F) f U →\n    IsPreconnected U → IsCompact U → IsOpen U → a ∈ U → b ∈ U → f a = f b :=\n\n/-- A holomorphic function on a compact connected complex manifold is constant. -/\ntheorem ∀ {E : Type u_2} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type u_4} [inst_2 : NormedAddCommGroup F]\n  [inst_3 : NormedSpace ℂ F] {H : Type u_3} [inst_4 : TopologicalSpace H] {I : ModelWithCorners ℂ E H}\n  [inst_5 : ModelWithCorners.Boundaryless I] {M : Type u_1} [inst_6 : TopologicalSpace M] [inst_7 : CompactSpace M]\n  [inst_8 : ChartedSpace H M] [inst_9 : SmoothManifoldWithCorners I M] [inst_10 : PreconnectedSpace M] {f : M → F},\n  MDifferentiable I (modelWithCornersSelf ℂ F) f → ∀ (a b : M), f a = f b :=\n\n/-- A holomorphic function on a compact complex manifold is locally constant. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type u_4} [inst_2 : NormedAddCommGroup F]\n  [inst_3 : NormedSpace ℂ F] {H : Type u_2} [inst_4 : TopologicalSpace H] {I : ModelWithCorners ℂ E H}\n  [inst_5 : ModelWithCorners.Boundaryless I] {M : Type u_3} [inst_6 : TopologicalSpace M] [inst_7 : CompactSpace M]\n  [inst_8 : ChartedSpace H M] [inst_9 : SmoothManifoldWithCorners I M] {f : M → F},\n  MDifferentiable I (modelWithCornersSelf ℂ F) f → IsLocallyConstant f :=\n\n/-- The *open mapping theorem* for holomorphic functions, global version: if a function `g : E → ℂ`\nis analytic on a connected set `U`, then either it is constant on `U`, or it is open on `U` (in the\nsense that it maps any open set contained in `U` to an open set in `ℂ`). -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {U : Set E} {g : E → ℂ},\n  AnalyticOn ℂ g U →\n    IsPreconnected U → (∃ w, ∀ (z : E), z ∈ U → g z = w) ∨ ∀ (s : Set E), s ⊆ U → IsOpen s → IsOpen (g '' s) :=\n\n/-- **Liouville's theorem**: a complex differentiable bounded function `f : E → F` is a constant. -/\ntheorem ∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type v} [inst_2 : NormedAddCommGroup F]\n  [inst_3 : NormedSpace ℂ F] {f : E → F}, Differentiable ℂ f → Metric.Bounded (Set.range f) → ∀ (z w : E), f z = f w :=\n\n/-- A holomorphic function on a compact connected complex manifold is the constant function `f ≡ v`,\nfor some value `v`. -/\ntheorem ∀ {E : Type u_2} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type u_4} [inst_2 : NormedAddCommGroup F]\n  [inst_3 : NormedSpace ℂ F] {H : Type u_3} [inst_4 : TopologicalSpace H] {I : ModelWithCorners ℂ E H}\n  [inst_5 : ModelWithCorners.Boundaryless I] {M : Type u_1} [inst_6 : TopologicalSpace M] [inst_7 : CompactSpace M]\n  [inst_8 : ChartedSpace H M] [inst_9 : SmoothManifoldWithCorners I M] [inst_10 : PreconnectedSpace M] {f : M → F},\n  MDifferentiable I (modelWithCornersSelf ℂ F) f → ∃ v, f = Function.const M v :=\n\n/-- If `f : 𝕜 → G`, `𝕜 = R` or `𝕜 = ℂ`, is differentiable everywhere and its derivative equal zero,\nthen it is a constant function. -/\ntheorem ∀ {𝕜 : Type u_1} {G : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup G] [inst_2 : NormedSpace 𝕜 G]\n  {f : 𝕜 → G}, Differentiable 𝕜 f → (∀ (x : 𝕜), deriv f x = 0) → ∀ (x y : 𝕜), f x = f y :=\n\n/-- If `‖x‖ = 0` and `f` is continuous then `‖f x‖ = 0`. -/\ntheorem ∀ {𝕜 : Type u_2} {𝕜₂ : Type u_3} {E : Type u_4} {F : Type u_5} {𝓕 : Type u_1} [inst : SeminormedAddCommGroup E]\n  [inst_1 : SeminormedAddCommGroup F] [inst_2 : NontriviallyNormedField 𝕜] [inst_3 : NontriviallyNormedField 𝕜₂]\n  [inst_4 : NormedSpace 𝕜 E] [inst_5 : NormedSpace 𝕜₂ F] {σ₁₂ : 𝕜 →+* 𝕜₂} [inst_6 : SemilinearMapClass 𝓕 σ₁₂ E F]\n  (f : 𝓕), Continuous ↑f → ∀ {x : E}, ‖x‖ = 0 → ‖↑f x‖ = 0 :=\n\n/-- A constant function is uniformly integrable. -/\ntheorem ∀ {α : Type u_2} {β : Type u_1} {ι : Type u_3} {m : MeasurableSpace α} (μ : MeasureTheory.Measure α)\n  [inst : NormedAddCommGroup β] {p : ENNReal} {g : α → β},\n  1 ≤ p → p ≠ ⊤ → MeasureTheory.Memℒp g p → MeasureTheory.UnifIntegrable (fun x => g) p μ :=\n\n/-- **Liouville's theorem**: a complex differentiable bounded function is a constant. -/\ntheorem ∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type v} [inst_2 : NormedAddCommGroup F]\n  [inst_3 : NormedSpace ℂ F] {f : E → F}, Differentiable ℂ f → Metric.Bounded (Set.range f) → ∃ c, ∀ (z : E), f z = c :=\n\n/-- If `f` is `C^1` at `x`, then `f` is Lipschitz in a neighborhood of `x`. -/\ntheorem ∀ {𝕂 : Type u_1} [inst : IsROrC 𝕂] {E' : Type u_2} [inst_1 : NormedAddCommGroup E'] [inst_2 : NormedSpace 𝕂 E']\n  {F' : Type u_3} [inst_3 : NormedAddCommGroup F'] [inst_4 : NormedSpace 𝕂 F'] {f : E' → F'} {x : E'},\n  ContDiffAt 𝕂 1 f x → ∃ K t, t ∈ nhds x ∧ LipschitzOnWith K f t :=\n\n/-- If `f` has finite integral, then `∫⁻ x in s, f x ∂μ` is absolutely continuous in `s`: it tends\nto zero as `μ s` tends to zero. This lemma states states this fact in terms of `ε` and `δ`. -/\ntheorem ∀ {α : Type u_1} {m : MeasurableSpace α} {μ : MeasureTheory.Measure α} {f : α → ENNReal},\n  ∫⁻ (x : α), f x ∂μ ≠ ⊤ → ∀ {ε : ENNReal}, ε ≠ 0 → ∃ δ, δ > 0 ∧ ∀ (s : Set α), ↑↑μ s < δ → ∫⁻ (x : α) in s, f x ∂μ < ε :=\n\n/-- If `f` has compact support, then `f` tends to zero at infinity. -/\ntheorem ∀ {α : Type u_2} {γ : Type u_1} [inst : UniformSpace α] {f : α → γ} [inst_1 : TopologicalSpace γ] [inst_2 : Zero γ],\n  HasCompactSupport f → Filter.Tendsto f (Filter.cocompact α) (nhds 0) :=\n\n/-- The *open mapping theorem* for holomorphic functions, local version: is a function `g : E → ℂ`\nis analytic at a point `z₀`, then either it is constant in a neighborhood of `z₀`, or it maps every\nneighborhood of `z₀` to a neighborhood of `z₀`. For the particular case of a holomorphic function on\n`ℂ`, see `AnalyticAt.eventually_constant_or_nhds_le_map_nhds_aux`. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {g : E → ℂ} {z₀ : E},\n  AnalyticAt ℂ g z₀ → (∀ᶠ (z : E) in nhds z₀, g z = g z₀) ∨ nhds (g z₀) ≤ Filter.map g (nhds z₀) :=\n\n/-- If two functions are a.e. equal on an open set and are continuous on this set, then they are\nequal on this set. -/\ntheorem ∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] {m : MeasurableSpace X} [inst_1 : TopologicalSpace Y]\n  [inst_2 : T2Space Y] {μ : MeasureTheory.Measure X} [inst_3 : MeasureTheory.Measure.IsOpenPosMeasure μ] {U : Set X}\n  {f g : X → Y},\n  f =ᶠ[MeasureTheory.Measure.ae (MeasureTheory.Measure.restrict μ U)] g →\n    IsOpen U → ContinuousOn f U → ContinuousOn g U → Set.EqOn f g U :=\n\n/-- A continuous function `f` is locally integrable with respect to any locally finite measure. -/\ntheorem ∀ {X : Type u_1} {E : Type u_2} [inst : MeasurableSpace X] [inst_1 : TopologicalSpace X] [inst_2 : NormedAddCommGroup E]\n  {f : X → E} {μ : MeasureTheory.Measure X} [inst_3 : OpensMeasurableSpace X]\n  [inst_4 : MeasureTheory.IsLocallyFiniteMeasure μ] [inst_5 : SecondCountableTopologyEither X E],\n  Continuous f → MeasureTheory.LocallyIntegrable f :=\n\n/-- A function `f : ℂ → ℂ` which is analytic at a point `z₀` is either constant in a neighborhood\nof `z₀`, or behaves locally like an open function (in the sense that the image of every neighborhood\nof `z₀` is a neighborhood of `f z₀`, as in `isOpenMap_iff_nhds_le`). For a function `f : E → ℂ`\nthe same result holds, see `AnalyticAt.eventually_constant_or_nhds_le_map_nhds`. -/\ntheorem ∀ {f : ℂ → ℂ} {z₀ : ℂ}, AnalyticAt ℂ f z₀ → (∀ᶠ (z : ℂ) in nhds z₀, f z = f z₀) ∨ nhds (f z₀) ≤ Filter.map f (nhds z₀) :=\n\n/-- If `f : ℂ → E` is complex differentiable on some open set `s`, then it is continuously\ndifferentiable on `s`. -/\ntheorem ∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {n : ℕ∞} {s : Set ℂ}\n  {f : ℂ → E}, DifferentiableOn ℂ f s → IsOpen s → ContDiffOn ℂ n f s :=\n\n/-- If `f : α → β` is a constant both on $(-∞, a]$ and on $[b, +∞)$, then the extension of this\nfunction from $[a, b]$ to the whole line is equal to the original function. -/\ntheorem ∀ {α : Type u_1} {β : Type u_2} [inst : LinearOrder α] {a b : α} (h : a ≤ b) (f : α → β),\n  (∀ (x : α), x < a → f x = f a) → (∀ (x : α), b < x → f x = f b) → Set.IccExtend h (f ∘ Subtype.val) = f :=\n\n/-- If a function has zero Fréchet derivative at every point of a convex set,\nthen it is a constant on this set. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] {𝕜 : Type u_2} {G : Type u_3}\n  [inst_2 : IsROrC 𝕜] [inst_3 : NormedSpace 𝕜 E] [inst_4 : NormedAddCommGroup G] [inst_5 : NormedSpace 𝕜 G] {f : E → G}\n  {s : Set E} {x y : E},\n  Convex ℝ s → DifferentiableOn 𝕜 f s → (∀ (x : E), x ∈ s → fderivWithin 𝕜 f s x = 0) → x ∈ s → y ∈ s → f x = f y :=\n\n/-- Suppose that `f` is holomorphic in an open set `Ω`. Prove that if `|f|` is constant, then `f` is constant. -/\ntheorem", "choices": ["∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {Ω : Set ℂ} {f : ℂ → E},\n  IsOpen Ω → DifferentiableOn ℂ f Ω → (∀ (x : ℂ), x ∈ Ω → ∥f x∥ = ∥f 0∥) → ∀ (x y : ℂ), x ∈ Ω → y ∈ Ω → f x = f y ", "∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type u_2} [inst_2 : NormedAddCommGroup F]\n  [inst_3 : NormedSpace ℂ F] {Ω : Set E} {f : E → F},\n  DifferentiableOn ℂ f Ω → IsOpen Ω → (∀ x : E, x ∈ Ω → ∥f x∥ = ∥f (Classical.arbitrary Ω)∥) → ∀ x y : E, x ∈ Ω → y ∈ Ω → f x = f y ", "∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {Ω : Set E} {f : E → ℂ},\n  DifferentiableOn ℂ f Ω → IsOpen Ω → (∀ (x : E), x ∈ Ω → Complex.abs (f x) = Complex.abs (f (Classical.arbitrary Ω))) →\n    ∀ (x y : E), x ∈ Ω → y ∈ Ω → f x = f y ", "∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type u_2} [inst_2 : NormedAddCommGroup F]\n  [inst_3 : NormedSpace ℂ F] {H : Type u_3} [inst_4 : TopologicalSpace H] {I : ModelWithCorners ℂ E H}\n  [inst_5 : ModelWithCorners.Boundaryless I] {M : Type u_4} [inst_6 : TopologicalSpace M] [inst_7 : ChartedSpace H M]\n  [inst_8 : SmoothManifoldWithCorners I M] {f : M → F} {Ω : Set M},\n  MDifferentiableOn I (modelWithCornersSelf ℂ F) f Ω →\n    IsOpen Ω → (∀ (x : M), x ∈ Ω → Complex.abs (f x) = Complex.abs (f (Classical.choice (_ : Nonempty M)))) →\n    ∀ (x y : M), x ∈ Ω → y ∈ Ω → f x = f y ", "∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {H : Type u_2} [inst_2 : TopologicalSpace H]\n  {I : ModelWithCorners ℂ E H} [ModelWithCorners.Boundaryless I] {M : Type u_3} [inst_3 : TopologicalSpace M]\n  [inst_4 : ChartedSpace H M] [SmoothManifoldWithCorners I M] {f : M → ℂ} {s : Set M} {x y : M},\n  IsOpen s → DifferentiableOn ℂ f s → (∀ (x : M), x ∈ s → Complex.abs (f x) = Complex.abs (f y)) → x ∈ s → y ∈ s → f x = f y ", "∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type u_2} [inst_2 : NormedAddCommGroup F]\n  [inst_3 : NormedSpace ℂ F] {H : Type u_3} [inst_4 : TopologicalSpace H] {I : ModelWithCorners ℂ E H}\n  [inst_5 : ModelWithCorners.Boundaryless I] {M : Type u_4} [inst_6 : TopologicalSpace M] [inst_7 : ChartedSpace H M]\n  [inst_8 : SmoothManifoldWithCorners I M] {f : M → F} {Ω : Set M},\n  MDifferentiableOn I (modelWithCornersSelf ℂ F) f Ω →\n    IsOpen Ω → (∀ (x : M), x ∈ Ω → Complex.abs (f x) = 1) → ∃ c : F, ∀ (x : M), x ∈ Ω → f x = c ", "∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {f : E → ℂ} {Ω : Set E},\n  IsOpen Ω → DifferentiableOn ℂ f Ω → (∀ (x : E), x ∈ Ω → Complex.abs (f x) = Complex.abs (f 0)) → ∀ (x : E), x ∈ Ω → f x = f 0 ", "∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {H : Type u_2} [inst_2 : TopologicalSpace H]\n  {I : ModelWithCorners ℂ E H} [inst_3 : ModelWithCorners.Boundaryless I] {M : Type u_3} [inst_4 : TopologicalSpace M]\n  [inst_5 : ChartedSpace H M] [inst_6 : SmoothManifoldWithCorners I M] {f : M → ℂ} {Ω : Set M},\n  MDifferentiableOn I (modelWithCornersSelf ℂ ℂ) f Ω →\n    IsOpen Ω → (∀ x ∈ Ω, Complex.abs (f x) = Complex.abs (f (Classical.arbitrary M))) → ∀ x y ∈ Ω, f x = f y ", "∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type u_4} [inst_2 : NormedAddCommGroup F]\n  [inst_3 : NormedSpace ℂ F] {H : Type u_3} [inst_4 : TopologicalSpace H] {I : ModelWithCorners ℂ E H}\n  [inst_5 : ModelWithCorners.Boundaryless I] {M : Type u_1} [inst_6 : TopologicalSpace M] [inst_7 : ChartedSpace H M]\n  [inst_8 : SmoothManifoldWithCorners I M] {f : M → ℂ} {Ω : Set M},\n  MDifferentiableOn I (modelWithCornersSelf ℂ ℂ) f Ω →\n    IsOpen Ω → (∀ (x : M), x ∈ Ω → Complex.abs (f x) = Complex.abs (f (Classical.arbitrary M))) → ∀ (x y : M), x ∈ Ω → y ∈ Ω → f x = f y ", "∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {Ω : Set E} {f : E → ℂ},\n  DifferentiableOn ℂ f Ω → IsOpen Ω → ∀ x ∈ Ω, Complex.abs (f x) = Complex.abs (f (Classical.arbitrary E)) → ∀ x y ∈ Ω, f x = f y "]}
{"docString": "Prove that the power series `Σ zn/n^2` converges at every point of the unit circle.", "prompts": "[{\"theorem\":\n  \"∀ {𝕜 : Type u_3} {E : Type u_2} {F : Type u_1} [inst : NontriviallyNormedField 𝕜] [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F]\\n  {p : FormalMultilinearSeries 𝕜 E F} [inst_5 : CompleteSpace F],\\n  ContinuousOn (FormalMultilinearSeries.sum p) (EMetric.ball 0 (FormalMultilinearSeries.radius p))\",\n  \"isProp\": true,\n  \"docString\":\n  \"The sum of a converging power series is continuous in its disk of convergence. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {𝕜 : Type u_2} {E : Type u_3} {F : Type u_4} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : CompleteSpace F] {u : α → ℝ}\\n  [inst_5 : NormedSpace 𝕜 F] {f : α → E → F} {f' : α → E → E →L[𝕜] F} {x₀ : E},\\n  Summable u →\\n    (∀ (n : α) (x : E), HasFDerivAt (f n) (f' n x) x) →\\n      (∀ (n : α) (x : E), ‖f' n x‖ ≤ u n) → (Summable fun n => f n x₀) → ∀ (x : E), Summable fun n => f n x\",\n  \"isProp\": true,\n  \"docString\":\n  \"Consider a series of functions `∑' n, f n x`. If the series converges at a\\npoint, and all functions in the series are differentiable with a summable bound on the derivatives,\\nthen the series converges everywhere. \"},\n {\"theorem\":\n  \"∀ {β : Type u_1} {f g : β → NNReal} {r : NNReal}, (∀ (b : β), g b ≤ f b) → HasSum f r → ∃ p, p ≤ r ∧ HasSum g p\",\n  \"isProp\": true,\n  \"docString\": \"Comparison test of convergence of `ℝ≥0`-valued series. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {f : ℂ → E} {c : ℂ} {R : ℝ} {w : ℂ},\\n  CircleIntegrable f c R →\\n    ↑Complex.abs w < R →\\n      HasSum (fun n => ∮ (z : ℂ) in C(c, R), (w / (z - c)) ^ n • (z - c)⁻¹ • f z)\\n        (∮ (z : ℂ) in C(c, R), (z - (c + w))⁻¹ • f z)\",\n  \"isProp\": true,\n  \"docString\":\n  \"For any circle integrable function `f`, the power series `cauchyPowerSeries f c R` multiplied\\nby `2πI` converges to the integral `∮ z in C(c, R), (z - w)⁻¹ • f z` on the open disc\\n`Metric.ball c R`. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {f : ℂ → E} {c : ℂ} {R : ℝ} {w : ℂ},\\n  CircleIntegrable f c R →\\n    ↑Complex.abs w < R →\\n      HasSum (fun n => ↑(cauchyPowerSeries f c R n) fun x => w)\\n        ((2 * ↑Real.pi * Complex.I)⁻¹ • ∮ (z : ℂ) in C(c, R), (z - (c + w))⁻¹ • f z)\",\n  \"isProp\": true,\n  \"docString\":\n  \"For any circle integrable function `f`, the power series `cauchyPowerSeries f c R`, `R > 0`,\\nconverges to the Cauchy integral `(2 * π * I : ℂ)⁻¹ • ∮ z in C(c, R), (z - w)⁻¹ • f z` on the open\\ndisc `Metric.ball c R`. \"},\n {\"theorem\":\n  \"∀ {β : Type u_1} {f g : β → ℝ}, (∀ (b : β), 0 ≤ g b) → (∀ (b : β), g b ≤ f b) → Summable f → Summable g\",\n  \"isProp\": true,\n  \"docString\":\n  \"Comparison test of convergence of series of non-negative real numbers. \"},\n {\"theorem\":\n  \"∀ {t : ℝ}, 0 < t → Summable fun n => rexp (-Real.pi * t * (↑n + 1) ^ 2)\",\n  \"isProp\": true,\n  \"docString\": \"The sum defining `zetaKernel₁` is convergent. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {G : Type u_3} [inst : NormedAddCommGroup G] [inst_1 : NormedSpace ℝ G] {m : MeasurableSpace α}\\n  {μ : MeasureTheory.Measure α} {ι : Type u_1} [inst_2 : Countable ι] {F : ι → α → G} {f : α → G} (bound : ι → α → ℝ),\\n  (∀ (n : ι), MeasureTheory.AEStronglyMeasurable (F n) μ) →\\n    (∀ (n : ι), ∀ᵐ (a : α) ∂μ, ‖F n a‖ ≤ bound n a) →\\n      (∀ᵐ (a : α) ∂μ, Summable fun n => bound n a) →\\n        (MeasureTheory.Integrable fun a => ∑' (n : ι), bound n a) →\\n          (∀ᵐ (a : α) ∂μ, HasSum (fun n => F n a) (f a)) → HasSum (fun n => ∫ (a : α), F n a ∂μ) (∫ (a : α), f a ∂μ)\",\n  \"isProp\": true,\n  \"docString\": \"Lebesgue dominated convergence theorem for series. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {𝕜 : Type u_3} {E : Type u_2} {F : Type u_4} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : CompleteSpace F] {u : α → ℝ}\\n  [inst_5 : NormedSpace 𝕜 F] {f : α → E → F} {f' : α → E → E →L[𝕜] F} {s : Set E} {x₀ : E},\\n  Summable u →\\n    IsOpen s →\\n      IsPreconnected s →\\n        (∀ (n : α) (x : E), x ∈ s → HasFDerivAt (f n) (f' n x) x) →\\n          (∀ (n : α) (x : E), x ∈ s → ‖f' n x‖ ≤ u n) →\\n            x₀ ∈ s → (Summable fun x => f x x₀) → ∀ {x : E}, x ∈ s → Summable fun n => f n x\",\n  \"isProp\": true,\n  \"docString\":\n  \"Consider a series of functions `∑' n, f n x` on a preconnected open set. If the series converges\\nat a point, and all functions in the series are differentiable with a summable bound on the\\nderivatives, then the series converges everywhere on the set. \"},\n {\"theorem\":\n  \"∀ {m : ℝ} {f : ℕ → ℕ}, 1 < m → (∀ (i : ℕ), i ≤ f i) → Summable fun i => 1 / m ^ f i\",\n  \"isProp\": true,\n  \"docString\":\n  \"A series whose terms are bounded by the terms of a converging geometric series converges. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {s : Set α} {p : Filter ι},\\n  TendstoUniformlyOn F f p s → ∀ {x : α}, x ∈ s → Filter.Tendsto (fun n => F n x) p (nhds (f x))\",\n  \"isProp\": true,\n  \"docString\": \"Uniform converence implies pointwise convergence. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {E : Type u_2} {F : Type u_3} [inst : NontriviallyNormedField 𝕜] [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] {f : E → F}\\n  {p : FormalMultilinearSeries 𝕜 E F} {x : E} {r : ENNReal} {r' : NNReal},\\n  HasFPowerSeriesOnBall f p x r →\\n    ↑r' < r →\\n      ∃ a,\\n        a ∈ Set.Ioo 0 1 ∧\\n          ∃ C,\\n            C > 0 ∧\\n              ∀ (y : E),\\n                y ∈ Metric.ball 0 ↑r' → ∀ (n : ℕ), ‖f (x + y) - FormalMultilinearSeries.partialSum p n y‖ ≤ C * a ^ n\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a function admits a power series expansion, then it is exponentially close to the partial\\nsums of this power series on strict subdisks of the disk of convergence. \"},\n {\"theorem\":\n  \"∀ {A : Type u_1} [inst : CommRing A] [inst_1 : Algebra ℚ A] (n : ℕ),\\n  (Finset.sum (Finset.range n) fun k => PowerSeries.exp A ^ k) =\\n    PowerSeries.mk fun p => Finset.sum (Finset.range n) fun k => ↑(k ^ p) * ↑(algebraMap ℚ A) (↑(Nat.factorial p))⁻¹\",\n  \"isProp\": true,\n  \"docString\":\n  \"Shows that\\n$\\\\sum_{k = 0}^{n - 1} (e^{X})^k = \\\\sum_{p = 0}^{\\\\infty} \\\\sum_{k = 0}^{n - 1} \\\\frac{k^p}{p!}X^p$. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_2} {E : Type u_3} {F : Type u_1} [inst : NontriviallyNormedField 𝕜] [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] [inst_5 : CompleteSpace F]\\n  (p : FormalMultilinearSeries 𝕜 E F),\\n  0 < FormalMultilinearSeries.radius p →\\n    HasFPowerSeriesOnBall (FormalMultilinearSeries.sum p) p 0 (FormalMultilinearSeries.radius p)\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a complete space, the sum of a converging power series `p` admits `p` as a power series.\\nThis is not totally obvious as we need to check the convergence of the series. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {E : Type u_2} {F : Type u_3} [inst : NontriviallyNormedField 𝕜] [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F]\\n  (p q : FormalMultilinearSeries 𝕜 E F),\\n  min (FormalMultilinearSeries.radius p) (FormalMultilinearSeries.radius q) ≤ FormalMultilinearSeries.radius (p + q)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The radius of the sum of two formal series is at least the minimum of their two radii. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {E : Type u_2} {F : Type u_3} [inst : NontriviallyNormedField 𝕜] [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] {f : E → F}\\n  {p : FormalMultilinearSeries 𝕜 E F} {x : E} {r : ENNReal},\\n  HasFPowerSeriesOnBall f p x r → ContinuousOn f (EMetric.ball x r)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a function admits a power series expansion on a disk, then it is continuous there. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {p : Filter ι}\\n  {p' : Filter α} [inst_1 : Filter.NeBot p],\\n  UniformCauchySeqOnFilter F p p' →\\n    (∀ᶠ (x : α) in p', Filter.Tendsto (fun n => F n x) p (nhds (f x))) → TendstoUniformlyOnFilter F f p p'\",\n  \"isProp\": true,\n  \"docString\": \"A uniformly Cauchy sequence converges uniformly to its limit \"},\n {\"theorem\": \"riemannZeta 0 = -1 / 2\",\n  \"isProp\": true,\n  \"docString\": \"We have `ζ(0) = -1 / 2`. \"},\n {\"theorem\":\n  \"∀ (ξ : ℝ) (n : ℕ), Real.convergent ξ (n + 1) = ↑⌊ξ⌋ + (Real.convergent (Int.fract ξ)⁻¹ n)⁻¹\",\n  \"isProp\": true,\n  \"docString\":\n  \"The `(n+1)`th convergent of `ξ` is the `n`th convergent of `1/(fract ξ)`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : UniformSpace α] [inst_1 : SemilatticeSup β] [inst_2 : CompleteSpace α] {u : β → α},\\n  CauchySeq u → ∃ x, Filter.Tendsto u Filter.atTop (nhds x)\",\n  \"isProp\": true,\n  \"docString\": \"A Cauchy sequence in a complete space converges \"}]\n", "prompt_cons": "/-- The sum of a converging power series is continuous in its disk of convergence. -/\ntheorem ∀ {𝕜 : Type u_3} {E : Type u_2} {F : Type u_1} [inst : NontriviallyNormedField 𝕜] [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F]\n  {p : FormalMultilinearSeries 𝕜 E F} [inst_5 : CompleteSpace F],\n  ContinuousOn (FormalMultilinearSeries.sum p) (EMetric.ball 0 (FormalMultilinearSeries.radius p)) :=\n\n/-- Consider a series of functions `∑' n, f n x`. If the series converges at a\npoint, and all functions in the series are differentiable with a summable bound on the derivatives,\nthen the series converges everywhere. -/\ntheorem ∀ {α : Type u_1} {𝕜 : Type u_2} {E : Type u_3} {F : Type u_4} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : CompleteSpace F] {u : α → ℝ}\n  [inst_5 : NormedSpace 𝕜 F] {f : α → E → F} {f' : α → E → E →L[𝕜] F} {x₀ : E},\n  Summable u →\n    (∀ (n : α) (x : E), HasFDerivAt (f n) (f' n x) x) →\n      (∀ (n : α) (x : E), ‖f' n x‖ ≤ u n) → (Summable fun n => f n x₀) → ∀ (x : E), Summable fun n => f n x :=\n\n/-- Comparison test of convergence of `ℝ≥0`-valued series. -/\ntheorem ∀ {β : Type u_1} {f g : β → NNReal} {r : NNReal}, (∀ (b : β), g b ≤ f b) → HasSum f r → ∃ p, p ≤ r ∧ HasSum g p :=\n\n/-- For any circle integrable function `f`, the power series `cauchyPowerSeries f c R` multiplied\nby `2πI` converges to the integral `∮ z in C(c, R), (z - w)⁻¹ • f z` on the open disc\n`Metric.ball c R`. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {f : ℂ → E} {c : ℂ} {R : ℝ} {w : ℂ},\n  CircleIntegrable f c R →\n    ↑Complex.abs w < R →\n      HasSum (fun n => ∮ (z : ℂ) in C(c, R), (w / (z - c)) ^ n • (z - c)⁻¹ • f z)\n        (∮ (z : ℂ) in C(c, R), (z - (c + w))⁻¹ • f z) :=\n\n/-- For any circle integrable function `f`, the power series `cauchyPowerSeries f c R`, `R > 0`,\nconverges to the Cauchy integral `(2 * π * I : ℂ)⁻¹ • ∮ z in C(c, R), (z - w)⁻¹ • f z` on the open\ndisc `Metric.ball c R`. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {f : ℂ → E} {c : ℂ} {R : ℝ} {w : ℂ},\n  CircleIntegrable f c R →\n    ↑Complex.abs w < R →\n      HasSum (fun n => ↑(cauchyPowerSeries f c R n) fun x => w)\n        ((2 * ↑Real.pi * Complex.I)⁻¹ • ∮ (z : ℂ) in C(c, R), (z - (c + w))⁻¹ • f z) :=\n\n/-- Comparison test of convergence of series of non-negative real numbers. -/\ntheorem ∀ {β : Type u_1} {f g : β → ℝ}, (∀ (b : β), 0 ≤ g b) → (∀ (b : β), g b ≤ f b) → Summable f → Summable g :=\n\n/-- The sum defining `zetaKernel₁` is convergent. -/\ntheorem ∀ {t : ℝ}, 0 < t → Summable fun n => rexp (-Real.pi * t * (↑n + 1) ^ 2) :=\n\n/-- Lebesgue dominated convergence theorem for series. -/\ntheorem ∀ {α : Type u_2} {G : Type u_3} [inst : NormedAddCommGroup G] [inst_1 : NormedSpace ℝ G] {m : MeasurableSpace α}\n  {μ : MeasureTheory.Measure α} {ι : Type u_1} [inst_2 : Countable ι] {F : ι → α → G} {f : α → G} (bound : ι → α → ℝ),\n  (∀ (n : ι), MeasureTheory.AEStronglyMeasurable (F n) μ) →\n    (∀ (n : ι), ∀ᵐ (a : α) ∂μ, ‖F n a‖ ≤ bound n a) →\n      (∀ᵐ (a : α) ∂μ, Summable fun n => bound n a) →\n        (MeasureTheory.Integrable fun a => ∑' (n : ι), bound n a) →\n          (∀ᵐ (a : α) ∂μ, HasSum (fun n => F n a) (f a)) → HasSum (fun n => ∫ (a : α), F n a ∂μ) (∫ (a : α), f a ∂μ) :=\n\n/-- Consider a series of functions `∑' n, f n x` on a preconnected open set. If the series converges\nat a point, and all functions in the series are differentiable with a summable bound on the\nderivatives, then the series converges everywhere on the set. -/\ntheorem ∀ {α : Type u_1} {𝕜 : Type u_3} {E : Type u_2} {F : Type u_4} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : CompleteSpace F] {u : α → ℝ}\n  [inst_5 : NormedSpace 𝕜 F] {f : α → E → F} {f' : α → E → E →L[𝕜] F} {s : Set E} {x₀ : E},\n  Summable u →\n    IsOpen s →\n      IsPreconnected s →\n        (∀ (n : α) (x : E), x ∈ s → HasFDerivAt (f n) (f' n x) x) →\n          (∀ (n : α) (x : E), x ∈ s → ‖f' n x‖ ≤ u n) →\n            x₀ ∈ s → (Summable fun x => f x x₀) → ∀ {x : E}, x ∈ s → Summable fun n => f n x :=\n\n/-- A series whose terms are bounded by the terms of a converging geometric series converges. -/\ntheorem ∀ {m : ℝ} {f : ℕ → ℕ}, 1 < m → (∀ (i : ℕ), i ≤ f i) → Summable fun i => 1 / m ^ f i :=\n\n/-- Uniform converence implies pointwise convergence. -/\ntheorem ∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {s : Set α} {p : Filter ι},\n  TendstoUniformlyOn F f p s → ∀ {x : α}, x ∈ s → Filter.Tendsto (fun n => F n x) p (nhds (f x)) :=\n\n/-- If a function admits a power series expansion, then it is exponentially close to the partial\nsums of this power series on strict subdisks of the disk of convergence. -/\ntheorem ∀ {𝕜 : Type u_1} {E : Type u_2} {F : Type u_3} [inst : NontriviallyNormedField 𝕜] [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] {f : E → F}\n  {p : FormalMultilinearSeries 𝕜 E F} {x : E} {r : ENNReal} {r' : NNReal},\n  HasFPowerSeriesOnBall f p x r →\n    ↑r' < r →\n      ∃ a,\n        a ∈ Set.Ioo 0 1 ∧\n          ∃ C,\n            C > 0 ∧\n              ∀ (y : E),\n                y ∈ Metric.ball 0 ↑r' → ∀ (n : ℕ), ‖f (x + y) - FormalMultilinearSeries.partialSum p n y‖ ≤ C * a ^ n :=\n\n/-- Shows that\n$\\sum_{k = 0}^{n - 1} (e^{X})^k = \\sum_{p = 0}^{\\infty} \\sum_{k = 0}^{n - 1} \\frac{k^p}{p!}X^p$. -/\ntheorem ∀ {A : Type u_1} [inst : CommRing A] [inst_1 : Algebra ℚ A] (n : ℕ),\n  (Finset.sum (Finset.range n) fun k => PowerSeries.exp A ^ k) =\n    PowerSeries.mk fun p => Finset.sum (Finset.range n) fun k => ↑(k ^ p) * ↑(algebraMap ℚ A) (↑(Nat.factorial p))⁻¹ :=\n\n/-- In a complete space, the sum of a converging power series `p` admits `p` as a power series.\nThis is not totally obvious as we need to check the convergence of the series. -/\ntheorem ∀ {𝕜 : Type u_2} {E : Type u_3} {F : Type u_1} [inst : NontriviallyNormedField 𝕜] [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] [inst_5 : CompleteSpace F]\n  (p : FormalMultilinearSeries 𝕜 E F),\n  0 < FormalMultilinearSeries.radius p →\n    HasFPowerSeriesOnBall (FormalMultilinearSeries.sum p) p 0 (FormalMultilinearSeries.radius p) :=\n\n/-- The radius of the sum of two formal series is at least the minimum of their two radii. -/\ntheorem ∀ {𝕜 : Type u_1} {E : Type u_2} {F : Type u_3} [inst : NontriviallyNormedField 𝕜] [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F]\n  (p q : FormalMultilinearSeries 𝕜 E F),\n  min (FormalMultilinearSeries.radius p) (FormalMultilinearSeries.radius q) ≤ FormalMultilinearSeries.radius (p + q) :=\n\n/-- If a function admits a power series expansion on a disk, then it is continuous there. -/\ntheorem ∀ {𝕜 : Type u_1} {E : Type u_2} {F : Type u_3} [inst : NontriviallyNormedField 𝕜] [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] {f : E → F}\n  {p : FormalMultilinearSeries 𝕜 E F} {x : E} {r : ENNReal},\n  HasFPowerSeriesOnBall f p x r → ContinuousOn f (EMetric.ball x r) :=\n\n/-- A uniformly Cauchy sequence converges uniformly to its limit -/\ntheorem ∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {p : Filter ι}\n  {p' : Filter α} [inst_1 : Filter.NeBot p],\n  UniformCauchySeqOnFilter F p p' →\n    (∀ᶠ (x : α) in p', Filter.Tendsto (fun n => F n x) p (nhds (f x))) → TendstoUniformlyOnFilter F f p p' :=\n\n/-- We have `ζ(0) = -1 / 2`. -/\ntheorem riemannZeta 0 = -1 / 2 :=\n\n/-- The `(n+1)`th convergent of `ξ` is the `n`th convergent of `1/(fract ξ)`. -/\ntheorem ∀ (ξ : ℝ) (n : ℕ), Real.convergent ξ (n + 1) = ↑⌊ξ⌋ + (Real.convergent (Int.fract ξ)⁻¹ n)⁻¹ :=\n\n/-- A Cauchy sequence in a complete space converges -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : UniformSpace α] [inst_1 : SemilatticeSup β] [inst_2 : CompleteSpace α] {u : β → α},\n  CauchySeq u → ∃ x, Filter.Tendsto u Filter.atTop (nhds x) :=\n\n/-- Prove that the power series `Σ zn/n^2` converges at every point of the unit circle. -/\ntheorem", "choices": ["∀ (z : ℂ), Complex.abs z = 1 → Summable (λ n => z ^ n / (↑n + 1) ^ 2) ", "∀ {𝕜 : Type u_1} [inst : IsROrC 𝕜] {z : 𝕜},\n  Complex.abs (coeFn (algebraMap ℝ 𝕜) (Complex.abs z)) = 1 →\n    Summable (λ n => z ^ n / ↑(n ^ 2)) ", "∀ (z : ℂ), Complex.abs z = 1 → Summable (λ n => z ^ n / (↑n + 1) ^ 2) ", "∀ {𝕜 : Type u_1} [inst : IsROrC 𝕜] (z : 𝕜), IsROrC.abs z = 1 → Summable fun n => z ^ n / ↑(n ^ 2) ", "∀ {ℂ : Type u_1} [inst : NontriviallyNormedField ℂ] {z : ℂ},\n  Complex.abs z = 1 → Summable fun n => z ^ n / (↑n) ^ 2 ", "∀ z : ℂ, Complex.abs z = 1 → Summable (λ n, z ^ n / ↑(n ^ 2)) ", "∀ {𝕜 : Type u_1} [inst : IsROrC 𝕜] {z : 𝕜}, IsROrC.abs z = 1 → Summable (λ n, z ^ n / (↑n + 1) ^ 2) ", "∀ {𝕜 : Type u_1} [inst : NontriviallyNormedField 𝕜] (z : 𝕜), ∥z∥ = 1 → Summable (λ n => z ^ n / (↑n) ^ 2) ", "∀ {ℂ : Type u_1} [inst : IsROrC ℂ], Summable (λ n, Complex.abs (1 / (↑n + 1) ^ 2)) ", "∀ {𝕜 : Type u_1} [inst : IsROrC 𝕜], Summable (λ (n : ℕ), (Complex.exp (𝕜.is_R_or_C.mul_I ↑(2 * n * Real.pi)) / ↑(n ^ 2))) "]}
{"docString": "Suppose `f` is continuous in a region `Ω`. Prove that any two primitives of `f` (if they exist) differ by a constant.", "prompts": "[{\"theorem\":\n  \"∀ {X : Type u_1} {E : Type u_2} [inst : MeasurableSpace X] [inst_1 : TopologicalSpace X] [inst_2 : NormedAddCommGroup E]\\n  {f : X → E} {μ : MeasureTheory.Measure X} [inst_3 : OpensMeasurableSpace X]\\n  [inst_4 : MeasureTheory.IsLocallyFiniteMeasure μ] [inst_5 : SecondCountableTopologyEither X E],\\n  Continuous f → MeasureTheory.LocallyIntegrable f\",\n  \"isProp\": true,\n  \"docString\":\n  \"A continuous function `f` is locally integrable with respect to any locally finite measure. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_2} {𝕜₂ : Type u_3} {E : Type u_4} {F : Type u_5} {𝓕 : Type u_1} [inst : SeminormedAddCommGroup E]\\n  [inst_1 : SeminormedAddCommGroup F] [inst_2 : NontriviallyNormedField 𝕜] [inst_3 : NontriviallyNormedField 𝕜₂]\\n  [inst_4 : NormedSpace 𝕜 E] [inst_5 : NormedSpace 𝕜₂ F] {σ₁₂ : 𝕜 →+* 𝕜₂} [inst_6 : SemilinearMapClass 𝓕 σ₁₂ E F]\\n  (f : 𝓕), Continuous ↑f → ∀ {x : E}, ‖x‖ = 0 → ‖↑f x‖ = 0\",\n  \"isProp\": true,\n  \"docString\": \"If `‖x‖ = 0` and `f` is continuous then `‖f x‖ = 0`. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] {f g : ℝ → E} {x : ℝ},\\n  (∀ (y : ℝ), y ≠ x → HasDerivAt f (g y) y) → ContinuousAt f x → ContinuousAt g x → HasDerivAt f (g x) x\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a real function `f` has a derivative `g` everywhere but at a point, and `f` and `g` are\\ncontinuous at this point, then `g` is also the derivative of `f` at this point. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {𝕜 : Type u_1} {f g : α → 𝕜} {S : Set α} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace 𝕜]\\n  [inst_2 : T1Space 𝕜] [inst_3 : Field 𝕜] [inst_4 : HasContinuousInv₀ 𝕜] [inst_5 : ContinuousMul 𝕜],\\n  IsPreconnected S →\\n    ContinuousOn f S →\\n      ContinuousOn g S →\\n        Set.EqOn (f ^ 2) (g ^ 2) S → (∀ {x : α}, x ∈ S → g x ≠ 0) → ∀ {y : α}, y ∈ S → f y = g y → Set.EqOn f g S\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f, g` are functions `α → 𝕜`, both continuous on a preconnected set `S`, with\\n`f ^ 2 = g ^ 2` on `S`, and `g z ≠ 0` all `z ∈ S`, then as soon as `f = g` holds at\\none point of `S` it holds for all points. \"},\n {\"theorem\":\n  \"∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] (f : ℂ → E)\\n  (f' : ℂ → ℂ →L[ℝ] E) (z w : ℂ) (s : Set ℂ),\\n  Set.Countable s →\\n    ContinuousOn f (Set.uIcc z.re w.re ×ℂ Set.uIcc z.im w.im) →\\n      (∀ (x : ℂ),\\n          x ∈ Set.Ioo (min z.re w.re) (max z.re w.re) ×ℂ Set.Ioo (min z.im w.im) (max z.im w.im) \\\\ s →\\n            HasFDerivAt f (f' x) x) →\\n        MeasureTheory.IntegrableOn (fun z => Complex.I • ↑(f' z) 1 - ↑(f' z) Complex.I)\\n            (Set.uIcc z.re w.re ×ℂ Set.uIcc z.im w.im) →\\n          (((∫ (x : ℝ) in z.re..w.re, f (↑x + ↑z.im * Complex.I)) -\\n                  ∫ (x : ℝ) in z.re..w.re, f (↑x + ↑w.im * Complex.I)) +\\n                Complex.I • ∫ (y : ℝ) in z.im..w.im, f (↑w.re + ↑y * Complex.I)) -\\n              Complex.I • ∫ (y : ℝ) in z.im..w.im, f (↑z.re + ↑y * Complex.I) =\\n            ∫ (x : ℝ) in z.re..w.re,\\n              ∫ (y : ℝ) in z.im..w.im, Complex.I • ↑(f' (↑x + ↑y * Complex.I)) 1 - ↑(f' (↑x + ↑y * Complex.I)) Complex.I\",\n  \"isProp\": true,\n  \"docString\":\n  \"Suppose that a function `f : ℂ → E` is continuous on a closed rectangle with opposite corners at\\n`z w : ℂ`, is *real* differentiable at all but countably many points of the corresponding open\\nrectangle, and $\\\\frac{\\\\partial f}{\\\\partial \\\\bar z}$ is integrable on this rectangle. Then the\\nintegral of `f` over the boundary of the rectangle is equal to the integral of\\n$2i\\\\frac{\\\\partial f}{\\\\partial \\\\bar z}=i\\\\frac{\\\\partial f}{\\\\partial x}-\\\\frac{\\\\partial f}{\\\\partial y}$\\nover the rectangle. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] {m : MeasurableSpace X} [inst_1 : TopologicalSpace Y]\\n  [inst_2 : T2Space Y] {μ : MeasureTheory.Measure X} [inst_3 : MeasureTheory.Measure.IsOpenPosMeasure μ] {f g : X → Y},\\n  f =ᶠ[MeasureTheory.Measure.ae μ] g → Continuous f → Continuous g → f = g\",\n  \"isProp\": true,\n  \"docString\":\n  \"If two continuous functions are a.e. equal, then they are equal. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {V : Type u_2} {V₂ : Type u_4} {P : Type u_3} {P₂ : Type u_5} [inst : NormedField 𝕜]\\n  [inst_1 : SeminormedAddCommGroup V] [inst_2 : SeminormedAddCommGroup V₂] [inst_3 : NormedSpace 𝕜 V]\\n  [inst_4 : NormedSpace 𝕜 V₂] [inst_5 : PseudoMetricSpace P] [inst_6 : PseudoMetricSpace P₂]\\n  [inst_7 : NormedAddTorsor V P] [inst_8 : NormedAddTorsor V₂ P₂] {f : P →ᵃ[𝕜] P₂}, Continuous ↑f.linear ↔ Continuous ↑f\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` is an affine map, then its linear part is continuous iff `f` is continuous. \"},\n {\"theorem\":\n  \"∀ {f : ℝ → ℝ}, Continuous f → StrictMono (deriv f) → StrictConvexOn ℝ Set.univ f\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a function `f` is continuous and `f'` is strictly monotone on `ℝ` then `f` is strictly\\nconvex. Note that we don't require differentiability, since it is guaranteed at all but at most\\none point by the strict monotonicity of `f'`. \"},\n {\"theorem\":\n  \"∀ {F : Type u_1} {A : outParam (Type u_2)} {B : outParam (Type u_3)} [inst : Monoid A] [inst_1 : Monoid B]\\n  [inst_2 : TopologicalSpace A] [inst_3 : TopologicalSpace B] [self : ContinuousMonoidHomClass F A B] (f : F),\\n  Continuous ↑f\",\n  \"isProp\": true,\n  \"docString\": \"Proof of the continuity of the map. \"},\n {\"theorem\":\n  \"∀ (f : CircleDeg1Lift), Continuous ↑f → ∃ x, ↑f x = x + CircleDeg1Lift.translationNumber f\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` is a continuous monotone map `ℝ → ℝ`, `f (x + 1) = f x + 1`, then there exists `x`\\nsuch that `f x = x + τ f`. \"},\n {\"theorem\":\n  \"∀ {f : ℝ → ℝ}, Continuous f → StrictAnti (deriv f) → StrictConcaveOn ℝ Set.univ f\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a function `f` is continuous and `f'` is strictly antitone on `ℝ` then `f` is strictly\\nconcave. Note that we don't require differentiability, since it is guaranteed at all but at most\\none point by the strict antitonicity of `f'`. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] {f g : ℝ → E} {x : ℝ},\\n  (∀ (y : ℝ), y ≠ x → HasDerivAt f (g y) y) → ContinuousAt f x → ContinuousAt g x → ∀ (y : ℝ), HasDerivAt f (g y) y\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a real function `f` has a derivative `g` everywhere but at a point, and `f` and `g` are\\ncontinuous at this point, then `g` is the derivative of `f` everywhere. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] {m : MeasurableSpace X} [inst_1 : TopologicalSpace Y]\\n  [inst_2 : T2Space Y] {μ : MeasureTheory.Measure X} [inst_3 : MeasureTheory.Measure.IsOpenPosMeasure μ] {U : Set X}\\n  {f g : X → Y},\\n  f =ᶠ[MeasureTheory.Measure.ae (MeasureTheory.Measure.restrict μ U)] g →\\n    IsOpen U → ContinuousOn f U → ContinuousOn g U → Set.EqOn f g U\",\n  \"isProp\": true,\n  \"docString\":\n  \"If two functions are a.e. equal on an open set and are continuous on this set, then they are\\nequal on this set. \"},\n {\"theorem\":\n  \"∀ {f : ℝ → ℝ}, Differentiable ℝ f → Monotone (deriv f) → ConvexOn ℝ Set.univ f\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a function `f` is differentiable and `f'` is monotone on `ℝ` then `f` is convex. \"},\n {\"theorem\":\n  \"∀ {D : Set ℝ},\\n  Convex ℝ D →\\n    ∀ {f : ℝ → ℝ},\\n      ContinuousOn f D →\\n        DifferentiableOn ℝ f (interior D) →\\n          ∀ {C : (fun x => ℝ) 1},\\n            (∀ (x : ℝ), x ∈ interior D → C ≤ deriv f x) →\\n              ∀ (x : ℝ), x ∈ D → ∀ (y : ℝ), y ∈ D → x ≤ y → C * (y - x) ≤ f y - f x\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `f` be a function continuous on a convex (or, equivalently, connected) subset `D`\\nof the real line. If `f` is differentiable on the interior of `D` and `C ≤ f'`, then\\n`f` grows at least as fast as `C * x` on `D`, i.e., `C * (y - x) ≤ f y - f x` whenever `x, y ∈ D`,\\n`x ≤ y`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] [inst_2 : T2Space α] {s : Set β},\\n  Dense s → ∀ {f g : β → α}, Continuous f → Continuous g → Set.EqOn f g s → f = g\",\n  \"isProp\": true,\n  \"docString\":\n  \"If two continuous functions are equal on a dense set, then they are equal. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u} [inst : NontriviallyNormedField 𝕜] {E : Type uE} [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] {F : Type uF} [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] {f : E → F}\\n  {n : ℕ∞} {m : ℕ}, ↑m ≤ n → ContDiff 𝕜 n f → Continuous fun x => iteratedFDeriv 𝕜 m f x\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` is `C^n` then its `m`-times iterated derivative is continuous for `m ≤ n`. \"},\n {\"theorem\":\n  \"∀ {E : Type u_2} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type u_4} [inst_2 : NormedAddCommGroup F]\\n  [inst_3 : NormedSpace ℂ F] {H : Type u_3} [inst_4 : TopologicalSpace H] {I : ModelWithCorners ℂ E H}\\n  [inst_5 : ModelWithCorners.Boundaryless I] {M : Type u_1} [inst_6 : TopologicalSpace M] [inst_7 : ChartedSpace H M]\\n  [inst_8 : SmoothManifoldWithCorners I M] {f : M → F} {U : Set M} {a b : M},\\n  MDifferentiableOn I (modelWithCornersSelf ℂ F) f U →\\n    IsPreconnected U → IsCompact U → IsOpen U → a ∈ U → b ∈ U → f a = f b\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a function `f : M → F` from a complex manifold to a complex normed space is holomorphic on a\\n(pre)connected compact open set, then it is a constant on this set. \"},\n {\"theorem\":\n  \"∀ {f g : ℝ → ℝ} {a b : ℝ},\\n  a < b →\\n    ContinuousOn f (Set.Icc a b) →\\n      ContinuousOn g (Set.Icc a b) →\\n        (∀ (x : ℝ), x ∈ Set.Ioc a b → f x ≤ g x) →\\n          (∃ c, c ∈ Set.Icc a b ∧ f c < g c) → ∫ (x : ℝ) in a..b, f x < ∫ (x : ℝ) in a..b, g x\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` and `g` are continuous on `[a, b]`, `a < b`, `f x ≤ g x` on this interval, and\\n`f c < g c` at some point `c ∈ [a, b]`, then `∫ x in a..b, f x < ∫ x in a..b, g x`. \"},\n {\"theorem\":\n  \"∀ {X : Type u} {α : Type v} [inst : TopologicalSpace X] [inst_1 : LinearOrder α] [inst_2 : TopologicalSpace α]\\n  [inst_3 : OrderClosedTopology α] [inst_4 : PreconnectedSpace X] {a b : X} {f g : X → α},\\n  Continuous f → Continuous g → f a ≤ g a → g b ≤ f b → ∃ x, f x = g x\",\n  \"isProp\": true,\n  \"docString\":\n  \"Intermediate value theorem for two functions: if `f` and `g` are two continuous functions\\non a preconnected space and `f a ≤ g a` and `g b ≤ f b`, then for some `x` we have `f x = g x`. \"}]\n", "prompt_cons": "/-- A continuous function `f` is locally integrable with respect to any locally finite measure. -/\ntheorem ∀ {X : Type u_1} {E : Type u_2} [inst : MeasurableSpace X] [inst_1 : TopologicalSpace X] [inst_2 : NormedAddCommGroup E]\n  {f : X → E} {μ : MeasureTheory.Measure X} [inst_3 : OpensMeasurableSpace X]\n  [inst_4 : MeasureTheory.IsLocallyFiniteMeasure μ] [inst_5 : SecondCountableTopologyEither X E],\n  Continuous f → MeasureTheory.LocallyIntegrable f :=\n\n/-- If `‖x‖ = 0` and `f` is continuous then `‖f x‖ = 0`. -/\ntheorem ∀ {𝕜 : Type u_2} {𝕜₂ : Type u_3} {E : Type u_4} {F : Type u_5} {𝓕 : Type u_1} [inst : SeminormedAddCommGroup E]\n  [inst_1 : SeminormedAddCommGroup F] [inst_2 : NontriviallyNormedField 𝕜] [inst_3 : NontriviallyNormedField 𝕜₂]\n  [inst_4 : NormedSpace 𝕜 E] [inst_5 : NormedSpace 𝕜₂ F] {σ₁₂ : 𝕜 →+* 𝕜₂} [inst_6 : SemilinearMapClass 𝓕 σ₁₂ E F]\n  (f : 𝓕), Continuous ↑f → ∀ {x : E}, ‖x‖ = 0 → ‖↑f x‖ = 0 :=\n\n/-- If a real function `f` has a derivative `g` everywhere but at a point, and `f` and `g` are\ncontinuous at this point, then `g` is also the derivative of `f` at this point. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] {f g : ℝ → E} {x : ℝ},\n  (∀ (y : ℝ), y ≠ x → HasDerivAt f (g y) y) → ContinuousAt f x → ContinuousAt g x → HasDerivAt f (g x) x :=\n\n/-- If `f, g` are functions `α → 𝕜`, both continuous on a preconnected set `S`, with\n`f ^ 2 = g ^ 2` on `S`, and `g z ≠ 0` all `z ∈ S`, then as soon as `f = g` holds at\none point of `S` it holds for all points. -/\ntheorem ∀ {α : Type u_2} {𝕜 : Type u_1} {f g : α → 𝕜} {S : Set α} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace 𝕜]\n  [inst_2 : T1Space 𝕜] [inst_3 : Field 𝕜] [inst_4 : HasContinuousInv₀ 𝕜] [inst_5 : ContinuousMul 𝕜],\n  IsPreconnected S →\n    ContinuousOn f S →\n      ContinuousOn g S →\n        Set.EqOn (f ^ 2) (g ^ 2) S → (∀ {x : α}, x ∈ S → g x ≠ 0) → ∀ {y : α}, y ∈ S → f y = g y → Set.EqOn f g S :=\n\n/-- Suppose that a function `f : ℂ → E` is continuous on a closed rectangle with opposite corners at\n`z w : ℂ`, is *real* differentiable at all but countably many points of the corresponding open\nrectangle, and $\\frac{\\partial f}{\\partial \\bar z}$ is integrable on this rectangle. Then the\nintegral of `f` over the boundary of the rectangle is equal to the integral of\n$2i\\frac{\\partial f}{\\partial \\bar z}=i\\frac{\\partial f}{\\partial x}-\\frac{\\partial f}{\\partial y}$\nover the rectangle. -/\ntheorem ∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] (f : ℂ → E)\n  (f' : ℂ → ℂ →L[ℝ] E) (z w : ℂ) (s : Set ℂ),\n  Set.Countable s →\n    ContinuousOn f (Set.uIcc z.re w.re ×ℂ Set.uIcc z.im w.im) →\n      (∀ (x : ℂ),\n          x ∈ Set.Ioo (min z.re w.re) (max z.re w.re) ×ℂ Set.Ioo (min z.im w.im) (max z.im w.im) \\ s →\n            HasFDerivAt f (f' x) x) →\n        MeasureTheory.IntegrableOn (fun z => Complex.I • ↑(f' z) 1 - ↑(f' z) Complex.I)\n            (Set.uIcc z.re w.re ×ℂ Set.uIcc z.im w.im) →\n          (((∫ (x : ℝ) in z.re..w.re, f (↑x + ↑z.im * Complex.I)) -\n                  ∫ (x : ℝ) in z.re..w.re, f (↑x + ↑w.im * Complex.I)) +\n                Complex.I • ∫ (y : ℝ) in z.im..w.im, f (↑w.re + ↑y * Complex.I)) -\n              Complex.I • ∫ (y : ℝ) in z.im..w.im, f (↑z.re + ↑y * Complex.I) =\n            ∫ (x : ℝ) in z.re..w.re,\n              ∫ (y : ℝ) in z.im..w.im, Complex.I • ↑(f' (↑x + ↑y * Complex.I)) 1 - ↑(f' (↑x + ↑y * Complex.I)) Complex.I :=\n\n/-- If two continuous functions are a.e. equal, then they are equal. -/\ntheorem ∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] {m : MeasurableSpace X} [inst_1 : TopologicalSpace Y]\n  [inst_2 : T2Space Y] {μ : MeasureTheory.Measure X} [inst_3 : MeasureTheory.Measure.IsOpenPosMeasure μ] {f g : X → Y},\n  f =ᶠ[MeasureTheory.Measure.ae μ] g → Continuous f → Continuous g → f = g :=\n\n/-- If `f` is an affine map, then its linear part is continuous iff `f` is continuous. -/\ntheorem ∀ {𝕜 : Type u_1} {V : Type u_2} {V₂ : Type u_4} {P : Type u_3} {P₂ : Type u_5} [inst : NormedField 𝕜]\n  [inst_1 : SeminormedAddCommGroup V] [inst_2 : SeminormedAddCommGroup V₂] [inst_3 : NormedSpace 𝕜 V]\n  [inst_4 : NormedSpace 𝕜 V₂] [inst_5 : PseudoMetricSpace P] [inst_6 : PseudoMetricSpace P₂]\n  [inst_7 : NormedAddTorsor V P] [inst_8 : NormedAddTorsor V₂ P₂] {f : P →ᵃ[𝕜] P₂}, Continuous ↑f.linear ↔ Continuous ↑f :=\n\n/-- If a function `f` is continuous and `f'` is strictly monotone on `ℝ` then `f` is strictly\nconvex. Note that we don't require differentiability, since it is guaranteed at all but at most\none point by the strict monotonicity of `f'`. -/\ntheorem ∀ {f : ℝ → ℝ}, Continuous f → StrictMono (deriv f) → StrictConvexOn ℝ Set.univ f :=\n\n/-- Proof of the continuity of the map. -/\ntheorem ∀ {F : Type u_1} {A : outParam (Type u_2)} {B : outParam (Type u_3)} [inst : Monoid A] [inst_1 : Monoid B]\n  [inst_2 : TopologicalSpace A] [inst_3 : TopologicalSpace B] [self : ContinuousMonoidHomClass F A B] (f : F),\n  Continuous ↑f :=\n\n/-- If `f` is a continuous monotone map `ℝ → ℝ`, `f (x + 1) = f x + 1`, then there exists `x`\nsuch that `f x = x + τ f`. -/\ntheorem ∀ (f : CircleDeg1Lift), Continuous ↑f → ∃ x, ↑f x = x + CircleDeg1Lift.translationNumber f :=\n\n/-- If a function `f` is continuous and `f'` is strictly antitone on `ℝ` then `f` is strictly\nconcave. Note that we don't require differentiability, since it is guaranteed at all but at most\none point by the strict antitonicity of `f'`. -/\ntheorem ∀ {f : ℝ → ℝ}, Continuous f → StrictAnti (deriv f) → StrictConcaveOn ℝ Set.univ f :=\n\n/-- If a real function `f` has a derivative `g` everywhere but at a point, and `f` and `g` are\ncontinuous at this point, then `g` is the derivative of `f` everywhere. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] {f g : ℝ → E} {x : ℝ},\n  (∀ (y : ℝ), y ≠ x → HasDerivAt f (g y) y) → ContinuousAt f x → ContinuousAt g x → ∀ (y : ℝ), HasDerivAt f (g y) y :=\n\n/-- If two functions are a.e. equal on an open set and are continuous on this set, then they are\nequal on this set. -/\ntheorem ∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] {m : MeasurableSpace X} [inst_1 : TopologicalSpace Y]\n  [inst_2 : T2Space Y] {μ : MeasureTheory.Measure X} [inst_3 : MeasureTheory.Measure.IsOpenPosMeasure μ] {U : Set X}\n  {f g : X → Y},\n  f =ᶠ[MeasureTheory.Measure.ae (MeasureTheory.Measure.restrict μ U)] g →\n    IsOpen U → ContinuousOn f U → ContinuousOn g U → Set.EqOn f g U :=\n\n/-- If a function `f` is differentiable and `f'` is monotone on `ℝ` then `f` is convex. -/\ntheorem ∀ {f : ℝ → ℝ}, Differentiable ℝ f → Monotone (deriv f) → ConvexOn ℝ Set.univ f :=\n\n/-- Let `f` be a function continuous on a convex (or, equivalently, connected) subset `D`\nof the real line. If `f` is differentiable on the interior of `D` and `C ≤ f'`, then\n`f` grows at least as fast as `C * x` on `D`, i.e., `C * (y - x) ≤ f y - f x` whenever `x, y ∈ D`,\n`x ≤ y`. -/\ntheorem ∀ {D : Set ℝ},\n  Convex ℝ D →\n    ∀ {f : ℝ → ℝ},\n      ContinuousOn f D →\n        DifferentiableOn ℝ f (interior D) →\n          ∀ {C : (fun x => ℝ) 1},\n            (∀ (x : ℝ), x ∈ interior D → C ≤ deriv f x) →\n              ∀ (x : ℝ), x ∈ D → ∀ (y : ℝ), y ∈ D → x ≤ y → C * (y - x) ≤ f y - f x :=\n\n/-- If two continuous functions are equal on a dense set, then they are equal. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] [inst_2 : T2Space α] {s : Set β},\n  Dense s → ∀ {f g : β → α}, Continuous f → Continuous g → Set.EqOn f g s → f = g :=\n\n/-- If `f` is `C^n` then its `m`-times iterated derivative is continuous for `m ≤ n`. -/\ntheorem ∀ {𝕜 : Type u} [inst : NontriviallyNormedField 𝕜] {E : Type uE} [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E] {F : Type uF} [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] {f : E → F}\n  {n : ℕ∞} {m : ℕ}, ↑m ≤ n → ContDiff 𝕜 n f → Continuous fun x => iteratedFDeriv 𝕜 m f x :=\n\n/-- If a function `f : M → F` from a complex manifold to a complex normed space is holomorphic on a\n(pre)connected compact open set, then it is a constant on this set. -/\ntheorem ∀ {E : Type u_2} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type u_4} [inst_2 : NormedAddCommGroup F]\n  [inst_3 : NormedSpace ℂ F] {H : Type u_3} [inst_4 : TopologicalSpace H] {I : ModelWithCorners ℂ E H}\n  [inst_5 : ModelWithCorners.Boundaryless I] {M : Type u_1} [inst_6 : TopologicalSpace M] [inst_7 : ChartedSpace H M]\n  [inst_8 : SmoothManifoldWithCorners I M] {f : M → F} {U : Set M} {a b : M},\n  MDifferentiableOn I (modelWithCornersSelf ℂ F) f U →\n    IsPreconnected U → IsCompact U → IsOpen U → a ∈ U → b ∈ U → f a = f b :=\n\n/-- If `f` and `g` are continuous on `[a, b]`, `a < b`, `f x ≤ g x` on this interval, and\n`f c < g c` at some point `c ∈ [a, b]`, then `∫ x in a..b, f x < ∫ x in a..b, g x`. -/\ntheorem ∀ {f g : ℝ → ℝ} {a b : ℝ},\n  a < b →\n    ContinuousOn f (Set.Icc a b) →\n      ContinuousOn g (Set.Icc a b) →\n        (∀ (x : ℝ), x ∈ Set.Ioc a b → f x ≤ g x) →\n          (∃ c, c ∈ Set.Icc a b ∧ f c < g c) → ∫ (x : ℝ) in a..b, f x < ∫ (x : ℝ) in a..b, g x :=\n\n/-- Intermediate value theorem for two functions: if `f` and `g` are two continuous functions\non a preconnected space and `f a ≤ g a` and `g b ≤ f b`, then for some `x` we have `f x = g x`. -/\ntheorem ∀ {X : Type u} {α : Type v} [inst : TopologicalSpace X] [inst_1 : LinearOrder α] [inst_2 : TopologicalSpace α]\n  [inst_3 : OrderClosedTopology α] [inst_4 : PreconnectedSpace X] {a b : X} {f g : X → α},\n  Continuous f → Continuous g → f a ≤ g a → g b ≤ f b → ∃ x, f x = g x :=\n\n/-- Suppose `f` is continuous in a region `Ω`. Prove that any two primitives of `f` (if they exist) differ by a constant. -/\ntheorem", "choices": ["∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] {f : ℝ → E} {F G : ℝ → E},\n  (∀ (x : ℝ), HasDerivAt F (f x) x) →\n    (∀ (x : ℝ), HasDerivAt G (f x) x) →\n      ContinuousOn f (Set.Interval F.a G.a) →\n        ContinuousOn F (Set.Interval F.a G.a) →\n          ContinuousOn G (Set.Interval F.a G.a) →\n            ∃ (C : E), ∀ (x : ℝ), x ∈ Set.Interval F.a G.a → F x = G x + C ", "∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] [inst_2 : T1Space Y] [inst_3 : LinearOrder Y]\n  [inst_4 : OrderClosedTopology Y] {f F G : X → Y},\n  Continuous f → (∀ (x : X), HasDerivAt F (f x) x) → (∀ (x : X), HasDerivAt G (f x) x) → ∃ c, ∀ (x : X), F x = G x + c ", "∀ {Ω : Type u_1} [inst : MeasurableSpace Ω] [inst_1 : BorelSpace Ω] [inst_2 : TopologicalSpace Ω] [inst_3 : OpensMeasurableSpace Ω]\n  {f F₁ F₂ : Ω → ℝ},\n  Continuous f →\n    F₁ =ᶠ[MeasureTheory.Measure.ae (MeasureTheory.Measure.restrict volume (interior Ω))] f.antiderivative →\n      F₂ =ᶠ[MeasureTheory.Measure.ae (MeasureTheory.Measure.restrict volume (interior Ω))] f.antiderivative →\n        Continuous F₁ → Continuous F₂ → ∃ C, ∀ (x : Ω), x ∈ interior Ω → F₁ x = F₂ x + C ", "∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] {F : Type u_2} [inst_2 : NormedAddCommGroup F]\n  [inst_3 : NormedSpace ℝ F] {f : E → F} {g₁ g₂ : E → F} {Ω : Set E},\n  ContinuousOn f Ω →\n    HasPrimitiveWithinAt f g₁ Ω →\n      HasPrimitiveWithinAt f g₂ Ω →\n        ContinuousOn g₁ Ω → ContinuousOn g₂ Ω → ∀ (x : E), x ∈ Ω → g₁ x = g₂ x + (g₁ (Classical.some (_ : ∃ x, x ∈ Ω)) - g₂ (Classical.some (_ : ∃ x, x ∈ Ω))) ", "∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] [inst_2 : T1Space Y] {Ω : Set X}\n  [inst_3 : IsRegion Ω] {f F₁ F₂ : X → Y},\n  ContinuousOn f Ω →\n    (∀ (x : X), x ∈ Ω → HasDerivWithinAt F₁ (f x) Ω x) →\n      (∀ (x : X), x ∈ Ω → HasDerivWithinAt F₂ (f x) Ω x) →\n        ∃ (C : Y), ∀ (x : X), x ∈ Ω → F₁ x = F₂ x + C ", "∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] {F : Type v} [inst_2 : NormedAddCommGroup F]\n  [inst_3 : NormedSpace ℝ F] {f : E → F} {s : Set E} {g₁ g₂ : F} {U : Set E},\n  ContinuousOn f s →\n    HasIntegralOn ℝ g₁ f U s →\n      HasIntegralOn ℝ g₂ f U s →\n        ∀ (x : E), x ∈ s → g₁ x = g₂ x + (g₁ (Classical.some (_ : ∃ x, x ∈ s)) - g₂ (Classical.some (_ : ∃ x, x ∈ s))) ", "∀ {ℝ : Type u_1} {E : Type u_2} [inst : MeasurableSpace ℝ] [inst_1 : NormedAddCommGroup E] [inst_2 : NormedSpace ℝ E]\n  {F : Type u_3} [inst_3 : NormedGroup F] [inst_4 : NormedSpace ℝ F] {f₁ f₂ : ℝ → F} {f : ℝ → E} {Ω : Set ℝ},\n  ContinuousOn f Ω →\n  (∀ (x : ℝ), x ∈ Ω → HasDerivWithinAt f₁ (f x) Ω x) →\n    (∀ (x : ℝ), x ∈ Ω → HasDerivWithinAt f₂ (f x) Ω x) →\n      ∃ (C : F), ∀ (x : ℝ), x ∈ Ω → f₁ x = f₂ x + C ", "∀ {X : Type u} [inst : TopologicalSpace X] [inst_1 : AddCommGroup X] [inst_2 : TopologicalAddGroup X]\n  {f F₁ F₂ : ℝ → X},\n  ContinuousOn f (Set.Interval F₁ F₂) →\n    (∀ (x : ℝ), x ∈ Set.Interval F₁ F₂ → HasDerivAt F₁ (f x) x) →\n      (∀ (x : ℝ), x ∈ Set.Interval F₁ F₂ → HasDerivAt F₂ (f x) x) →\n        ∃ (C : X), ∀ (x : ℝ), x ∈ Set.Interval F₁ F₂ → F₁ x = F₂ x + C ", "∀ {X : Type u} {Y : Type v} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] [inst_2 : T2Space Y] [inst_3 : AddGroup Y] [inst_4 : TopologicalAddGroup Y]\n  {f F₁ F₂ : X → Y},\n  Continuous f →\n    (∀ x, HasDerivAt F₁ (f x) x) →\n      (∀ x, HasDerivAt F₂ (f x) x) →\n        ∃ c : Y, ∀ (x : X), F₁ x = F₂ x + c ", "∀ {X : Type u} {Y : Type v} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] [inst_2 : T2Space Y] {m : MeasurableSpace X}\n  {μ : MeasureTheory.Measure X} [inst_3 : MeasureTheory.Measure.IsComplete μ] {f : X → Y} {F₁ F₂ : MeasureTheory.VectorMeasure X Y},\n  Continuous f →\n    F₁ ∈ MeasureTheory.VectorMeasure.primitive μ f →\n      F₂ ∈ MeasureTheory.VectorMeasure.primitive μ f → F₁ = F₂ "]}
{"docString": "Let `Ω` be a bounded open subset of `ℂ`, and `ϕ: Ω → Ω` a holomorphic function. Prove that if there exists a point `z₀ ∈ Ω` such that `ϕ(z₀) = z₀` and `ϕ'(z₀) = 1`, then `ϕ` is linear.", "prompts": "[{\"theorem\":\n  \"∀ {z : UpperHalfPlane}, z ∈ ModularGroup.fdo → ∀ (n : ℤ), 1 < ↑Complex.normSq ↑(ModularGroup.T ^ n • z)\",\n  \"isProp\": true,\n  \"docString\": \"If `z ∈ 𝒟ᵒ`, and `n : ℤ`, then `|z + n| > 1`. \"},\n {\"theorem\":\n  \"∀ (K : Subfield ℂ) {ψ : { x // x ∈ K } →+* ℂ},\\n  UniformContinuous ↑ψ → ψ.toFun = ↑(Subfield.subtype K) ∨ ψ.toFun = ↑(starRingEnd ℂ) ∘ ↑(Subfield.subtype K)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `K` a subfield of `ℂ` and let `ψ : K →+* ℂ` a ring homomorphism. Assume that `ψ` is uniform\\ncontinuous, then `ψ` is either the inclusion map or the composition of the inclusion map with the\\ncomplex conjugation. \"},\n {\"theorem\":\n  \"∀ {R : Type u_1} {S : Type u_2} {M₃ : Type u_3} [inst : Semiring R] [inst_1 : Semiring S] [inst_2 : AddCommMonoid M₃]\\n  [inst_3 : Module S M₃] {σ : R →+* S} {f g : R →ₛₗ[σ] M₃}, ↑f 1 = ↑g 1 → f = g\",\n  \"isProp\": true,\n  \"docString\":\n  \"If two `σ`-linear maps from `R` are equal on `1`, then they are equal. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type u_4} [inst_2 : NormedAddCommGroup F]\\n  [inst_3 : NormedSpace ℂ F] {H : Type u_2} [inst_4 : TopologicalSpace H] {I : ModelWithCorners ℂ E H}\\n  [inst_5 : ModelWithCorners.Boundaryless I] {M : Type u_3} [inst_6 : TopologicalSpace M] [inst_7 : CompactSpace M]\\n  [inst_8 : ChartedSpace H M] [inst_9 : SmoothManifoldWithCorners I M] {f : M → F},\\n  MDifferentiable I (modelWithCornersSelf ℂ F) f → IsLocallyConstant f\",\n  \"isProp\": true,\n  \"docString\":\n  \"A holomorphic function on a compact complex manifold is locally constant. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {g : E → ℂ} {z₀ : E},\\n  AnalyticAt ℂ g z₀ → (∀ᶠ (z : E) in nhds z₀, g z = g z₀) ∨ nhds (g z₀) ≤ Filter.map g (nhds z₀)\",\n  \"isProp\": true,\n  \"docString\":\n  \"The *open mapping theorem* for holomorphic functions, local version: is a function `g : E → ℂ`\\nis analytic at a point `z₀`, then either it is constant in a neighborhood of `z₀`, or it maps every\\nneighborhood of `z₀` to a neighborhood of `z₀`. For the particular case of a holomorphic function on\\n`ℂ`, see `AnalyticAt.eventually_constant_or_nhds_le_map_nhds_aux`. \"},\n {\"theorem\":\n  \"∀ {ι : Type u_3} {R : Type u_1} {M : ι → Type u_2} {N : Type u_4} [dec_ι : DecidableEq ι] [inst : Semiring R]\\n  [inst_1 : (i : ι) → AddCommMonoid (M i)] [inst_2 : (i : ι) → Module R (M i)] [inst_3 : AddCommMonoid N]\\n  [inst_4 : Module R N] ⦃φ ψ : (Π₀ (i : ι), M i) →ₗ[R] N⦄,\\n  (∀ (i : ι), LinearMap.comp φ (DFinsupp.lsingle i) = LinearMap.comp ψ (DFinsupp.lsingle i)) → φ = ψ\",\n  \"isProp\": true,\n  \"docString\":\n  \"Two `R`-linear maps from `Π₀ i, M i` which agree on each `single i x` agree everywhere.\\n\\nSee note [partially-applied ext lemmas].\\nAfter apply this lemma, if `M = R` then it suffices to verify `φ (single a 1) = ψ (single a 1)`. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] (f : ℝ → E),\\n  Filter.Tendsto (fun w => ∫ (v : ℝ), ↑(↑Real.fourierChar (↑Multiplicative.ofAdd (-(v * w)))) • f v)\\n    (Filter.cocompact ℝ) (nhds 0)\",\n  \"isProp\": true,\n  \"docString\": \"The Riemann-Lebesgue lemma for functions on `ℝ`. \"},\n {\"theorem\":\n  \"∀ (f : CircleDeg1Lift), Continuous ↑f → ∃ x, ↑f x = x + CircleDeg1Lift.translationNumber f\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` is a continuous monotone map `ℝ → ℝ`, `f (x + 1) = f x + 1`, then there exists `x`\\nsuch that `f x = x + τ f`. \"},\n {\"theorem\":\n  \"∀ {E : Type u_2} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type u_4} [inst_2 : NormedAddCommGroup F]\\n  [inst_3 : NormedSpace ℂ F] {H : Type u_3} [inst_4 : TopologicalSpace H] {I : ModelWithCorners ℂ E H}\\n  [inst_5 : ModelWithCorners.Boundaryless I] {M : Type u_1} [inst_6 : TopologicalSpace M] [inst_7 : CompactSpace M]\\n  [inst_8 : ChartedSpace H M] [inst_9 : SmoothManifoldWithCorners I M] [inst_10 : PreconnectedSpace M] {f : M → F},\\n  MDifferentiable I (modelWithCornersSelf ℂ F) f → ∀ (a b : M), f a = f b\",\n  \"isProp\": true,\n  \"docString\":\n  \"A holomorphic function on a compact connected complex manifold is constant. \"},\n {\"theorem\":\n  \"∀ {f : ℂ → ℂ} {z : ℂ} {R : ℝ},\\n  DifferentiableOn ℂ f (Metric.ball 0 R) →\\n    Set.MapsTo f (Metric.ball 0 R) (Metric.ball 0 R) →\\n      f 0 = 0 → ↑Complex.abs z < R → ↑Complex.abs (f z) ≤ ↑Complex.abs z\",\n  \"isProp\": true,\n  \"docString\":\n  \"The **Schwarz Lemma**: if `f : ℂ → ℂ` sends an open disk with center `0` to itself, the for any\\npoint `z` of this disk we have `abs (f z) ≤ abs z`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {𝕜 : Type u_1} {f g : α → 𝕜} {S : Set α} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace 𝕜]\\n  [inst_2 : T1Space 𝕜] [inst_3 : Field 𝕜] [inst_4 : HasContinuousInv₀ 𝕜] [inst_5 : ContinuousMul 𝕜],\\n  IsPreconnected S →\\n    ContinuousOn f S →\\n      ContinuousOn g S →\\n        Set.EqOn (f ^ 2) (g ^ 2) S → (∀ {x : α}, x ∈ S → g x ≠ 0) → ∀ {y : α}, y ∈ S → f y = g y → Set.EqOn f g S\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f, g` are functions `α → 𝕜`, both continuous on a preconnected set `S`, with\\n`f ^ 2 = g ^ 2` on `S`, and `g z ≠ 0` all `z ∈ S`, then as soon as `f = g` holds at\\none point of `S` it holds for all points. \"},\n {\"theorem\":\n  \"∀ {E : Type uE} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] [inst_2 : FiniteDimensional ℝ E] {H : Type uH}\\n  [inst_3 : TopologicalSpace H] (I : ModelWithCorners ℝ E H) {M : Type uM} [inst_4 : TopologicalSpace M]\\n  [inst_5 : ChartedSpace H M] [inst_6 : SmoothManifoldWithCorners I M] [inst_7 : T2Space M]\\n  [inst_8 : SigmaCompactSpace M] {s t : Set M},\\n  IsClosed s → IsClosed t → Disjoint s t → ∃ f, Set.EqOn (↑f) 0 s ∧ Set.EqOn (↑f) 1 t ∧ ∀ (x : M), ↑f x ∈ Set.Icc 0 1\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given two disjoint closed sets in a Hausdorff σ-compact finite dimensional manifold, there\\nexists an infinitely smooth function that is equal to `0` on one of them and is equal to one on the\\nother. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : TopologicalSpace E] [inst_1 : AddCommGroup E] [inst_2 : TopologicalAddGroup E]\\n  [inst_3 : Module ℝ E] [inst_4 : ContinuousSMul ℝ E] {s : Set E},\\n  0 ∈ s → Convex ℝ s → IsOpen s → ∀ {x₀ : E}, ¬x₀ ∈ s → ∃ f, ↑f x₀ = 1 ∧ ∀ (x : E), x ∈ s → ↑f x < 1\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given a set `s` which is a convex neighbourhood of `0` and a point `x₀` outside of it, there is\\na continuous linear functional `f` separating `x₀` and `s`, in the sense that it sends `x₀` to 1 and\\nall of `s` to values strictly below `1`. \"},\n {\"theorem\": \"∀ {𝕂 : Type u_1} [inst : IsROrC 𝕂], HasStrictDerivAt (exp 𝕂) 1 0\",\n  \"isProp\": true,\n  \"docString\":\n  \"The exponential map in `𝕂 = ℝ` or `𝕂 = ℂ` has strict derivative `1` at zero. \"},\n {\"theorem\":\n  \"∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type v} [inst_2 : NormedAddCommGroup F]\\n  [inst_3 : NormedSpace ℂ F] {f : E → F}, Differentiable ℂ f → Metric.Bounded (Set.range f) → ∃ c, ∀ (z : E), f z = c\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Liouville's theorem**: a complex differentiable bounded function is a constant. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {E : Type u_2} [inst : NontriviallyNormedField 𝕜] [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] {p : FormalMultilinearSeries 𝕜 𝕜 E} {f : 𝕜 → E} {x : 𝕜},\\n  HasFPowerSeriesAt f p x → f =ᶠ[nhds x] 0 → p = 0\",\n  \"isProp\": true,\n  \"docString\":\n  \"A one-dimensional formal multilinear series representing a locally zero function is zero. \"},\n {\"theorem\":\n  \"∀ (A : Matrix.SpecialLinearGroup (Fin 2) ℤ), SlashAction.map ℂ 0 A 1 = 1\",\n  \"isProp\": true,\n  \"docString\":\n  \"The constant function 1 is invariant under any element of `SL(2, ℤ)`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {E : Type u_2} [inst : MeasurableSpace α] [inst_1 : NormedAddCommGroup E] {p : ENNReal}\\n  {μ : MeasureTheory.Measure α},\\n  p ≠ 0 →\\n    p ≠ ⊤ →\\n      ∀ {P : { x // x ∈ MeasureTheory.Lp.simpleFunc E p μ } → Prop},\\n        (∀ (c : E) {s : Set α} (hs : MeasurableSet s) (hμs : ↑↑μ s < ⊤),\\n            P (MeasureTheory.Lp.simpleFunc.indicatorConst p hs (_ : ↑↑μ s ≠ ⊤) c)) →\\n          (∀ ⦃f g : MeasureTheory.SimpleFunc α E⦄ (hf : MeasureTheory.Memℒp (↑f) p) (hg : MeasureTheory.Memℒp (↑g) p),\\n              Disjoint (Function.support ↑f) (Function.support ↑g) →\\n                P (MeasureTheory.Lp.simpleFunc.toLp f hf) →\\n                  P (MeasureTheory.Lp.simpleFunc.toLp g hg) →\\n                    P (MeasureTheory.Lp.simpleFunc.toLp f hf + MeasureTheory.Lp.simpleFunc.toLp g hg)) →\\n            ∀ (f : { x // x ∈ MeasureTheory.Lp.simpleFunc E p μ }), P f\",\n  \"isProp\": true,\n  \"docString\":\n  \"To prove something for an arbitrary `Lp` simple function, with `0 < p < ∞`, it suffices to show\\nthat the property holds for (multiples of) characteristic functions of finite-measure measurable\\nsets and is closed under addition (of functions with disjoint support). \"},\n {\"theorem\":\n  \"∀ {f : ℂ → ℂ} {z₀ : ℂ}, AnalyticAt ℂ f z₀ → (∀ᶠ (z : ℂ) in nhds z₀, f z = f z₀) ∨ nhds (f z₀) ≤ Filter.map f (nhds z₀)\",\n  \"isProp\": true,\n  \"docString\":\n  \"A function `f : ℂ → ℂ` which is analytic at a point `z₀` is either constant in a neighborhood\\nof `z₀`, or behaves locally like an open function (in the sense that the image of every neighborhood\\nof `z₀` is a neighborhood of `f z₀`, as in `isOpenMap_iff_nhds_le`). For a function `f : E → ℂ`\\nthe same result holds, see `AnalyticAt.eventually_constant_or_nhds_le_map_nhds`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : PseudoMetricSpace α] (s : Set α), LipschitzWith 1 fun x => Metric.infNndist x s\",\n  \"isProp\": true,\n  \"docString\":\n  \"The minimal distance to a set (as `ℝ≥0`) is Lipschitz in point with constant 1 \"}]\n", "prompt_cons": "/-- If `z ∈ 𝒟ᵒ`, and `n : ℤ`, then `|z + n| > 1`. -/\ntheorem ∀ {z : UpperHalfPlane}, z ∈ ModularGroup.fdo → ∀ (n : ℤ), 1 < ↑Complex.normSq ↑(ModularGroup.T ^ n • z) :=\n\n/-- Let `K` a subfield of `ℂ` and let `ψ : K →+* ℂ` a ring homomorphism. Assume that `ψ` is uniform\ncontinuous, then `ψ` is either the inclusion map or the composition of the inclusion map with the\ncomplex conjugation. -/\ntheorem ∀ (K : Subfield ℂ) {ψ : { x // x ∈ K } →+* ℂ},\n  UniformContinuous ↑ψ → ψ.toFun = ↑(Subfield.subtype K) ∨ ψ.toFun = ↑(starRingEnd ℂ) ∘ ↑(Subfield.subtype K) :=\n\n/-- If two `σ`-linear maps from `R` are equal on `1`, then they are equal. -/\ntheorem ∀ {R : Type u_1} {S : Type u_2} {M₃ : Type u_3} [inst : Semiring R] [inst_1 : Semiring S] [inst_2 : AddCommMonoid M₃]\n  [inst_3 : Module S M₃] {σ : R →+* S} {f g : R →ₛₗ[σ] M₃}, ↑f 1 = ↑g 1 → f = g :=\n\n/-- A holomorphic function on a compact complex manifold is locally constant. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type u_4} [inst_2 : NormedAddCommGroup F]\n  [inst_3 : NormedSpace ℂ F] {H : Type u_2} [inst_4 : TopologicalSpace H] {I : ModelWithCorners ℂ E H}\n  [inst_5 : ModelWithCorners.Boundaryless I] {M : Type u_3} [inst_6 : TopologicalSpace M] [inst_7 : CompactSpace M]\n  [inst_8 : ChartedSpace H M] [inst_9 : SmoothManifoldWithCorners I M] {f : M → F},\n  MDifferentiable I (modelWithCornersSelf ℂ F) f → IsLocallyConstant f :=\n\n/-- The *open mapping theorem* for holomorphic functions, local version: is a function `g : E → ℂ`\nis analytic at a point `z₀`, then either it is constant in a neighborhood of `z₀`, or it maps every\nneighborhood of `z₀` to a neighborhood of `z₀`. For the particular case of a holomorphic function on\n`ℂ`, see `AnalyticAt.eventually_constant_or_nhds_le_map_nhds_aux`. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {g : E → ℂ} {z₀ : E},\n  AnalyticAt ℂ g z₀ → (∀ᶠ (z : E) in nhds z₀, g z = g z₀) ∨ nhds (g z₀) ≤ Filter.map g (nhds z₀) :=\n\n/-- Two `R`-linear maps from `Π₀ i, M i` which agree on each `single i x` agree everywhere.\n\nSee note [partially-applied ext lemmas].\nAfter apply this lemma, if `M = R` then it suffices to verify `φ (single a 1) = ψ (single a 1)`. -/\ntheorem ∀ {ι : Type u_3} {R : Type u_1} {M : ι → Type u_2} {N : Type u_4} [dec_ι : DecidableEq ι] [inst : Semiring R]\n  [inst_1 : (i : ι) → AddCommMonoid (M i)] [inst_2 : (i : ι) → Module R (M i)] [inst_3 : AddCommMonoid N]\n  [inst_4 : Module R N] ⦃φ ψ : (Π₀ (i : ι), M i) →ₗ[R] N⦄,\n  (∀ (i : ι), LinearMap.comp φ (DFinsupp.lsingle i) = LinearMap.comp ψ (DFinsupp.lsingle i)) → φ = ψ :=\n\n/-- The Riemann-Lebesgue lemma for functions on `ℝ`. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] (f : ℝ → E),\n  Filter.Tendsto (fun w => ∫ (v : ℝ), ↑(↑Real.fourierChar (↑Multiplicative.ofAdd (-(v * w)))) • f v)\n    (Filter.cocompact ℝ) (nhds 0) :=\n\n/-- If `f` is a continuous monotone map `ℝ → ℝ`, `f (x + 1) = f x + 1`, then there exists `x`\nsuch that `f x = x + τ f`. -/\ntheorem ∀ (f : CircleDeg1Lift), Continuous ↑f → ∃ x, ↑f x = x + CircleDeg1Lift.translationNumber f :=\n\n/-- A holomorphic function on a compact connected complex manifold is constant. -/\ntheorem ∀ {E : Type u_2} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type u_4} [inst_2 : NormedAddCommGroup F]\n  [inst_3 : NormedSpace ℂ F] {H : Type u_3} [inst_4 : TopologicalSpace H] {I : ModelWithCorners ℂ E H}\n  [inst_5 : ModelWithCorners.Boundaryless I] {M : Type u_1} [inst_6 : TopologicalSpace M] [inst_7 : CompactSpace M]\n  [inst_8 : ChartedSpace H M] [inst_9 : SmoothManifoldWithCorners I M] [inst_10 : PreconnectedSpace M] {f : M → F},\n  MDifferentiable I (modelWithCornersSelf ℂ F) f → ∀ (a b : M), f a = f b :=\n\n/-- The **Schwarz Lemma**: if `f : ℂ → ℂ` sends an open disk with center `0` to itself, the for any\npoint `z` of this disk we have `abs (f z) ≤ abs z`. -/\ntheorem ∀ {f : ℂ → ℂ} {z : ℂ} {R : ℝ},\n  DifferentiableOn ℂ f (Metric.ball 0 R) →\n    Set.MapsTo f (Metric.ball 0 R) (Metric.ball 0 R) →\n      f 0 = 0 → ↑Complex.abs z < R → ↑Complex.abs (f z) ≤ ↑Complex.abs z :=\n\n/-- If `f, g` are functions `α → 𝕜`, both continuous on a preconnected set `S`, with\n`f ^ 2 = g ^ 2` on `S`, and `g z ≠ 0` all `z ∈ S`, then as soon as `f = g` holds at\none point of `S` it holds for all points. -/\ntheorem ∀ {α : Type u_2} {𝕜 : Type u_1} {f g : α → 𝕜} {S : Set α} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace 𝕜]\n  [inst_2 : T1Space 𝕜] [inst_3 : Field 𝕜] [inst_4 : HasContinuousInv₀ 𝕜] [inst_5 : ContinuousMul 𝕜],\n  IsPreconnected S →\n    ContinuousOn f S →\n      ContinuousOn g S →\n        Set.EqOn (f ^ 2) (g ^ 2) S → (∀ {x : α}, x ∈ S → g x ≠ 0) → ∀ {y : α}, y ∈ S → f y = g y → Set.EqOn f g S :=\n\n/-- Given two disjoint closed sets in a Hausdorff σ-compact finite dimensional manifold, there\nexists an infinitely smooth function that is equal to `0` on one of them and is equal to one on the\nother. -/\ntheorem ∀ {E : Type uE} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] [inst_2 : FiniteDimensional ℝ E] {H : Type uH}\n  [inst_3 : TopologicalSpace H] (I : ModelWithCorners ℝ E H) {M : Type uM} [inst_4 : TopologicalSpace M]\n  [inst_5 : ChartedSpace H M] [inst_6 : SmoothManifoldWithCorners I M] [inst_7 : T2Space M]\n  [inst_8 : SigmaCompactSpace M] {s t : Set M},\n  IsClosed s → IsClosed t → Disjoint s t → ∃ f, Set.EqOn (↑f) 0 s ∧ Set.EqOn (↑f) 1 t ∧ ∀ (x : M), ↑f x ∈ Set.Icc 0 1 :=\n\n/-- Given a set `s` which is a convex neighbourhood of `0` and a point `x₀` outside of it, there is\na continuous linear functional `f` separating `x₀` and `s`, in the sense that it sends `x₀` to 1 and\nall of `s` to values strictly below `1`. -/\ntheorem ∀ {E : Type u_1} [inst : TopologicalSpace E] [inst_1 : AddCommGroup E] [inst_2 : TopologicalAddGroup E]\n  [inst_3 : Module ℝ E] [inst_4 : ContinuousSMul ℝ E] {s : Set E},\n  0 ∈ s → Convex ℝ s → IsOpen s → ∀ {x₀ : E}, ¬x₀ ∈ s → ∃ f, ↑f x₀ = 1 ∧ ∀ (x : E), x ∈ s → ↑f x < 1 :=\n\n/-- The exponential map in `𝕂 = ℝ` or `𝕂 = ℂ` has strict derivative `1` at zero. -/\ntheorem ∀ {𝕂 : Type u_1} [inst : IsROrC 𝕂], HasStrictDerivAt (exp 𝕂) 1 0 :=\n\n/-- **Liouville's theorem**: a complex differentiable bounded function is a constant. -/\ntheorem ∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type v} [inst_2 : NormedAddCommGroup F]\n  [inst_3 : NormedSpace ℂ F] {f : E → F}, Differentiable ℂ f → Metric.Bounded (Set.range f) → ∃ c, ∀ (z : E), f z = c :=\n\n/-- A one-dimensional formal multilinear series representing a locally zero function is zero. -/\ntheorem ∀ {𝕜 : Type u_1} {E : Type u_2} [inst : NontriviallyNormedField 𝕜] [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E] {p : FormalMultilinearSeries 𝕜 𝕜 E} {f : 𝕜 → E} {x : 𝕜},\n  HasFPowerSeriesAt f p x → f =ᶠ[nhds x] 0 → p = 0 :=\n\n/-- The constant function 1 is invariant under any element of `SL(2, ℤ)`. -/\ntheorem ∀ (A : Matrix.SpecialLinearGroup (Fin 2) ℤ), SlashAction.map ℂ 0 A 1 = 1 :=\n\n/-- To prove something for an arbitrary `Lp` simple function, with `0 < p < ∞`, it suffices to show\nthat the property holds for (multiples of) characteristic functions of finite-measure measurable\nsets and is closed under addition (of functions with disjoint support). -/\ntheorem ∀ {α : Type u_1} {E : Type u_2} [inst : MeasurableSpace α] [inst_1 : NormedAddCommGroup E] {p : ENNReal}\n  {μ : MeasureTheory.Measure α},\n  p ≠ 0 →\n    p ≠ ⊤ →\n      ∀ {P : { x // x ∈ MeasureTheory.Lp.simpleFunc E p μ } → Prop},\n        (∀ (c : E) {s : Set α} (hs : MeasurableSet s) (hμs : ↑↑μ s < ⊤),\n            P (MeasureTheory.Lp.simpleFunc.indicatorConst p hs (_ : ↑↑μ s ≠ ⊤) c)) →\n          (∀ ⦃f g : MeasureTheory.SimpleFunc α E⦄ (hf : MeasureTheory.Memℒp (↑f) p) (hg : MeasureTheory.Memℒp (↑g) p),\n              Disjoint (Function.support ↑f) (Function.support ↑g) →\n                P (MeasureTheory.Lp.simpleFunc.toLp f hf) →\n                  P (MeasureTheory.Lp.simpleFunc.toLp g hg) →\n                    P (MeasureTheory.Lp.simpleFunc.toLp f hf + MeasureTheory.Lp.simpleFunc.toLp g hg)) →\n            ∀ (f : { x // x ∈ MeasureTheory.Lp.simpleFunc E p μ }), P f :=\n\n/-- A function `f : ℂ → ℂ` which is analytic at a point `z₀` is either constant in a neighborhood\nof `z₀`, or behaves locally like an open function (in the sense that the image of every neighborhood\nof `z₀` is a neighborhood of `f z₀`, as in `isOpenMap_iff_nhds_le`). For a function `f : E → ℂ`\nthe same result holds, see `AnalyticAt.eventually_constant_or_nhds_le_map_nhds`. -/\ntheorem ∀ {f : ℂ → ℂ} {z₀ : ℂ}, AnalyticAt ℂ f z₀ → (∀ᶠ (z : ℂ) in nhds z₀, f z = f z₀) ∨ nhds (f z₀) ≤ Filter.map f (nhds z₀) :=\n\n/-- The minimal distance to a set (as `ℝ≥0`) is Lipschitz in point with constant 1 -/\ntheorem ∀ {α : Type u} [inst : PseudoMetricSpace α] (s : Set α), LipschitzWith 1 fun x => Metric.infNndist x s :=\n\n/-- Let `Ω` be a bounded open subset of `ℂ`, and `ϕ: Ω → Ω` a holomorphic function. Prove that if there exists a point `z₀ ∈ Ω` such that `ϕ(z₀) = z₀` and `ϕ'(z₀) = 1`, then `ϕ` is linear. -/\ntheorem", "choices": ["∀ {Ω : Set ℂ} (hΩ : IsOpen Ω) (h_bdd : Metric.Bounded Ω) {ϕ : ℂ → ℂ},\n  DifferentiableOn ℂ ϕ Ω →\n    Set.MapsTo ϕ Ω Ω →\n      ∀ {z₀ : ℂ}, z₀ ∈ Ω → ϕ z₀ = z₀ → HasDerivAt ϕ 1 z₀ → ∃ (a : ℂ), ∀ (z : ℂ), z ∈ Ω → ϕ z = z₀ + a * (z - z₀) ", "theorem linear_if_deriv_eq_one\n  {Ω : Set ℂ} (hΩ : IsOpen Ω) (hbdd : Metric.Bounded Ω) {ϕ : ℂ → ℂ}\n  (hϕ : ∀ z ∈ Ω, AnalyticAt ℂ ϕ z) {z₀ : ℂ} (hz₀ : z₀ ∈ Ω)\n  (hf₁ : ϕ z₀ = z₀) (hf' : HasDerivAt ϕ 1 z₀) :\n  ∃ (a b : ℂ), ∀ z ∈ Ω, ϕ z = a * z + b ", "∀ {Ω : Set ℂ} {ϕ : ℂ → ℂ},\n  IsOpen Ω →\n    Metric.Bounded Ω →\n      DifferentiableOn ℂ ϕ Ω →\n        Set.MapsTo ϕ Ω Ω →\n          ∃ (z₀ : ℂ), z₀ ∈ Ω ∧ ϕ z₀ = z₀ ∧ HasDerivWithinAt ϕ 1 Ω z₀ → IsLinearMap ℂ ϕ ", "∀ {Ω : Set ℂ} [inst : IsOpen Ω],\n  Bounded Ω →\n    ∀ {ϕ : ℂ → ℂ}, AnalyticOn ℂ Ω ϕ →\n      (∃ z₀, z₀ ∈ Ω ∧ ϕ z₀ = z₀ ∧ HasDerivWithinAt ϕ 1 Ω z₀) →\n        Linear.IsLinear ϕ ", "∀ {Ω : Set ℂ},\n  IsOpen Ω →\n  Metric.Bounded Ω →\n  ∀ {ϕ : ℂ → ℂ},\n    DifferentiableOn ℂ ϕ Ω → Set.MapsTo ϕ Ω Ω →\n      ∀ {z₀ : ℂ}, z₀ ∈ Ω → ϕ z₀ = z₀ → HasDerivAt ϕ 1 z₀ →\n        ∀ (z : ℂ), z ∈ Ω → ϕ z = z₀ + (z - z₀) ", "∀ {Ω : Set ℂ} (hΩ : IsOpen Ω) [inst : Metric.Bounded Ω] {ϕ : ℂ → ℂ},\n  DifferentiableOn ℂ ϕ Ω →\n    Set.MapsTo ϕ Ω Ω →\n      ∀ {z₀ : ℂ}, z₀ ∈ Ω → ϕ z₀ = z₀ → HasDerivAt ϕ 1 z₀ → ∀ (z : ℂ), z ∈ Ω → ϕ z = z₀ + (z - z₀) ", "∀ {Ω : Set ℂ} {ϕ : ℂ → ℂ}, IsOpen Ω → Metric.Bounded Ω → DifferentiableOn ℂ ϕ Ω →\n  ContinuousOn ϕ Ω → BoundedLinearMap ℝ ℂ ℂ →\n  (∃ z₀, z₀ ∈ Ω ∧ ϕ z₀ = z₀ ∧ HasDerivAt ϕ 1 z₀) →\n  ∀ z, z ∈ Ω → ϕ z = z + (ϕ z₀ - z₀) ", "∀ {Ω : Set ℂ} [inst : MetricSpace ℂ] [inst_1 : BoundedSubset Ω] {ϕ : ℂ → ℂ},\n  DifferentiableOn ℂ ϕ Ω →\n    Set.MapsTo ϕ Ω Ω →\n      ∃ z₀ ∈ Ω, (ϕ z₀ = z₀ ∧ HasStrictDerivAt ϕ 1 z₀) →\n        ∀ (z : ℂ) (hz : z ∈ Ω), ϕ z = z + (ϕ z₀ - z₀) * (z - z₀) ", "∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type u_2} [inst_2 : NormedAddCommGroup F]\n  [inst_3 : NormedSpace ℂ F] {Ω : Set ℂ}, IsOpen Ω → Metric.Bounded Ω →\n  ∀ {ϕ : ℂ → ℂ}, DifferentiableOn ℂ ϕ Ω → Set.MapsTo ϕ Ω Ω →\n    ∃ z₀ ∈ Ω, ϕ z₀ = z₀ ∧ HasDerivAt ϕ 1 z₀ →\n      ∃ (a : ℂ) (b : ℂ), ∀ (z : ℂ), z ∈ Ω → ϕ z = a * z + b ", "∀ {Ω : Set ℂ} {ϕ : ℂ → ℂ},\n  IsOpen Ω →\n    Metric.Bounded Ω →\n      DifferentiableOn ℂ ϕ Ω →\n        Set.MapsTo ϕ Ω Ω →\n          ∃ (z₀ : ℂ), z₀ ∈ Ω ∧ ϕ z₀ = z₀ ∧ HasDerivAt ϕ 1 z₀ →\n            ∀ (z : ℂ), z ∈ Ω → ϕ z = z + (ϕ z₀ - z₀) "]}
{"docString": "Show that `∫_{-∞}^{∞} cos x / (x^2 + a^2) dx = π e^{-a} / a` for `a > 0`.", "prompts": "[{\"theorem\":\n  \"∀ (a : ℝ) {b : ℝ}, 0 < b → MeasureTheory.IntegrableOn (fun x => rexp (-b * x)) (Set.Ioi a)\",\n  \"isProp\": true,\n  \"docString\": \"`exp (-b * x)` is integrable on `(a, ∞)`. \"},\n {\"theorem\":\n  \"∀ {a b : ℝ} (n : ℕ), ∫ (x : ℝ) in Ι a b, |x - a| ^ n = |b - a| ^ (n + 1) / (↑n + 1)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Integral of `|x - a| ^ n` over `Ι a b`. This integral appears in the proof of the\\nPicard-Lindelöf/Cauchy-Lipschitz theorem. \"},\n {\"theorem\":\n  \"∀ (n : ℕ), ∫ (x : ℝ) in 0 ..Real.pi / 2, Real.cos x ^ n = 1 / 2 * ∫ (x : ℝ) in 0 ..Real.pi, Real.sin x ^ n\",\n  \"isProp\": true,\n  \"docString\":\n  \"Relate the integral `cos x ^ n` over `[0, π/2]` to the integral of `sin x ^ n` over `[0, π]`,\\nwhich is studied in `Data.Real.Pi.Wallis` and other places. \"},\n {\"theorem\":\n  \"∀ {a : ℝ}, a < -1 → ∀ {c : ℝ}, 0 < c → MeasureTheory.IntegrableOn (fun t => t ^ a) (Set.Ioi c)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `0 < c`, then `(λ t : ℝ, t ^ a)` is integrable on `(c, ∞)` for all `a < -1`. \"},\n {\"theorem\":\n  \"∀ {a b : ℝ} (n : ℕ),\\n  ∫ (x : ℝ) in a..b, Real.cos x ^ (n + 2) =\\n    (Real.cos b ^ (n + 1) * Real.sin b - Real.cos a ^ (n + 1) * Real.sin a) / (↑n + 2) +\\n      (↑n + 1) / (↑n + 2) * ∫ (x : ℝ) in a..b, Real.cos x ^ n\",\n  \"isProp\": true,\n  \"docString\":\n  \"The reduction formula for the integral of `cos x ^ n` for any natural `n ≥ 2`. \"},\n {\"theorem\":\n  \"∀ (n : ℕ) {a : ℝ},\\n  2 - ((a - 1 / 4 ^ n) / 2 ^ (n + 1)) ^ 2 ≤ Real.sqrtTwoAddSeries (↑0 / ↑1) n → 1 / 4 ^ n ≤ a → Real.pi < a\",\n  \"isProp\": true,\n  \"docString\":\n  \"From a lower bound on `sqrtTwoAddSeries 0 n = 2 cos (π / 2 ^ (n+1))` of the form\\n`2 - ((a - 1 / 4 ^ n) / 2 ^ (n + 1)) ^ 2 ≤ sqrtTwoAddSeries 0 n`, one can deduce the upper bound\\n`π < a` thanks to basic trigonometric formulas as expressed in `pi_lt_sqrtTwoAddSeries`. \"},\n {\"theorem\":\n  \"∀ (n : ℕ) {a : ℝ}, Real.sqrtTwoAddSeries (↑0 / ↑1) n ≤ 2 - (a / 2 ^ (n + 1)) ^ 2 → a < Real.pi\",\n  \"isProp\": true,\n  \"docString\":\n  \"From an upper bound on `sqrtTwoAddSeries 0 n = 2 cos (π / 2 ^ (n+1))` of the form\\n`sqrtTwoAddSeries 0 n ≤ 2 - (a / 2 ^ (n + 1)) ^ 2)`, one can deduce the lower bound `a < π`\\nthanks to basic trigonometric inequalities as expressed in `pi_gt_sqrtTwoAddSeries`. \"},\n {\"theorem\":\n  \"∀ {A : Type u_1} [inst : CommRing A] [inst_1 : Algebra ℚ A],\\n  PowerSeries.exp A * ↑PowerSeries.evalNegHom (PowerSeries.exp A) = 1\",\n  \"isProp\": true,\n  \"docString\": \"Shows that $e^{x} * e^{-x} = 1$ \"},\n {\"theorem\":\n  \"∀ {A : Type u_1} [inst : CommRing A] [inst_1 : Algebra ℚ A] (a b : A),\\n  ↑(PowerSeries.rescale a) (PowerSeries.exp A) * ↑(PowerSeries.rescale b) (PowerSeries.exp A) =\\n    ↑(PowerSeries.rescale (a + b)) (PowerSeries.exp A)\",\n  \"isProp\": true,\n  \"docString\": \"Shows that $e^{aX} * e^{bX} = e^{(a + b)X}$ \"},\n {\"theorem\":\n  \"∀ {a : ℝ}, 0 < a → ∀ (b : ℝ), (fun x => rexp (-a * x)) =o[Filter.atTop] fun x => x ^ b\",\n  \"isProp\": true,\n  \"docString\":\n  \"`exp (-a * x) = o(x ^ s)` as `x → ∞`, for any positive `a` and real `s`. \"},\n {\"theorem\":\n  \"∀ {a b : ℝ},\\n  a ≤ 0 →\\n    ∀ {z : ℂ},\\n      |z.im| ≤ b →\\n        b ≤ Real.pi / 2 → ↑Complex.abs (cexp (↑a * (cexp z + cexp (-z)))) ≤ rexp (a * Real.cos b * rexp |z.re|)\",\n  \"isProp\": true,\n  \"docString\":\n  \"A supporting lemma for the **Phragmen-Lindelöf principle** in a horizontal strip. If `z : ℂ`\\nbelongs to a horizontal strip `|Complex.im z| ≤ b`, `b ≤ π / 2`, and `a ≤ 0`, then\\n$$\\\\left|exp^{a\\\\left(e^{z}+e^{-z}\\\\right)}\\\\right| \\\\le e^{a\\\\cos b \\\\exp^{|re z|}}.$$\\n\"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : CompleteSpace E] [inst_2 : NormedSpace ℝ E] {f : ℝ → E}\\n  {a b : ℝ},\\n  IntervalIntegrable f MeasureTheory.volume a b →\\n    StronglyMeasurableAtFilter f (nhds a) → ContinuousAt f a → deriv (fun u => ∫ (x : ℝ) in u..b, f x) a = -f a\",\n  \"isProp\": true,\n  \"docString\":\n  \"Fundamental theorem of calculus: if `f : ℝ → E` is integrable on `a..b` and `f` is continuous\\nat `a`, then the derivative of `u ↦ ∫ x in u..b, f x` at `a` equals `-f a`. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : CompleteSpace E] [inst_2 : NormedSpace ℝ E] {f : ℝ → E} {c : E}\\n  {a b : ℝ},\\n  IntervalIntegrable f MeasureTheory.volume a b →\\n    StronglyMeasurableAtFilter f (nhds a) →\\n      Filter.Tendsto f (nhds a ⊓ MeasureTheory.Measure.ae MeasureTheory.volume) (nhds c) →\\n        HasDerivAt (fun u => ∫ (x : ℝ) in u..b, f x) (-c) a\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Fundamental theorem of calculus-1**: if `f : ℝ → E` is integrable on `a..b` and `f x` has a\\nfinite limit `c` almost surely at `a`, then `u ↦ ∫ x in u..b, f x` has derivative `-c` at `a`. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : CompleteSpace E] [inst_2 : NormedSpace ℝ E] {f : ℝ → E}\\n  {a b : ℝ},\\n  IntervalIntegrable f MeasureTheory.volume a b →\\n    StronglyMeasurableAtFilter f (nhds a) → ContinuousAt f a → HasDerivAt (fun u => ∫ (x : ℝ) in u..b, f x) (-f a) a\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Fundamental theorem of calculus-1**: if `f : ℝ → E` is integrable on `a..b` and `f` is\\ncontinuous at `a`, then `u ↦ ∫ x in u..b, f x` has derivative `-f a` at `a`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_4} [inst : MeasurableSpace α] {μ : MeasureTheory.Measure α} {𝕜 : Type u_1} [inst_1 : IsROrC 𝕜]\\n  {E : Type u_3} [inst_2 : NormedAddCommGroup E] [inst_3 : NormedSpace ℝ E] [inst_4 : NormedSpace 𝕜 E]\\n  [inst_5 : CompleteSpace E] {H : Type u_2} [inst_6 : NormedAddCommGroup H] [inst_7 : NormedSpace 𝕜 H] {F : H → α → E}\\n  {F' : α → H →L[𝕜] E} {x₀ : H} {bound : α → ℝ} {ε : ℝ},\\n  0 < ε →\\n    (∀ᶠ (x : H) in nhds x₀, MeasureTheory.AEStronglyMeasurable (F x) μ) →\\n      MeasureTheory.Integrable (F x₀) →\\n        MeasureTheory.AEStronglyMeasurable F' μ →\\n          (∀ᵐ (a : α) ∂μ, LipschitzOnWith (↑Real.nnabs (bound a)) (fun x => F x a) (Metric.ball x₀ ε)) →\\n            MeasureTheory.Integrable bound →\\n              (∀ᵐ (a : α) ∂μ, HasFDerivAt (fun x => F x a) (F' a) x₀) →\\n                MeasureTheory.Integrable F' ∧ HasFDerivAt (fun x => ∫ (a : α), F x a ∂μ) (∫ (a : α), F' a ∂μ) x₀\",\n  \"isProp\": true,\n  \"docString\":\n  \"Differentiation under integral of `x ↦ ∫ F x a` at a given point `x₀`, assuming\\n`F x₀` is integrable, `x ↦ F x a` is locally Lipschitz on a ball around `x₀` for ae `a`\\n(with a ball radius independent of `a`) with integrable Lipschitz bound, and `F x` is ae-measurable\\nfor `x` in a possibly smaller neighborhood of `x₀`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} [inst : MeasurableSpace α] {μ : MeasureTheory.Measure α} {𝕜 : Type u_1} [inst_1 : IsROrC 𝕜]\\n  {E : Type u_3} [inst_2 : NormedAddCommGroup E] [inst_3 : NormedSpace ℝ E] [inst_4 : NormedSpace 𝕜 E]\\n  [inst_5 : CompleteSpace E] {F F' : 𝕜 → α → E} {x₀ : 𝕜} {ε : ℝ},\\n  0 < ε →\\n    (∀ᶠ (x : 𝕜) in nhds x₀, MeasureTheory.AEStronglyMeasurable (F x) μ) →\\n      MeasureTheory.Integrable (F x₀) →\\n        MeasureTheory.AEStronglyMeasurable (F' x₀) μ →\\n          ∀ {bound : α → ℝ},\\n            (∀ᵐ (a : α) ∂μ, ∀ (x : 𝕜), x ∈ Metric.ball x₀ ε → ‖F' x a‖ ≤ bound a) →\\n              MeasureTheory.Integrable bound →\\n                (∀ᵐ (a : α) ∂μ, ∀ (x : 𝕜), x ∈ Metric.ball x₀ ε → HasDerivAt (fun x => F x a) (F' x a) x) →\\n                  MeasureTheory.Integrable (F' x₀) ∧\\n                    HasDerivAt (fun n => ∫ (a : α), F n a ∂μ) (∫ (a : α), F' x₀ a ∂μ) x₀\",\n  \"isProp\": true,\n  \"docString\":\n  \"Derivative under integral of `x ↦ ∫ F x a` at a given point `x₀ : ℝ`, assuming\\n`F x₀` is integrable, `x ↦ F x a` is differentiable on an interval around `x₀` for ae `a`\\n(with interval radius independent of `a`) with derivative uniformly bounded by an integrable\\nfunction, and `F x` is ae-measurable for `x` in a possibly smaller neighborhood of `x₀`. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : CompleteSpace E] [inst_2 : NormedSpace ℝ E] {f : ℝ → E} {c : E}\\n  {a b : ℝ},\\n  IntervalIntegrable f MeasureTheory.volume a b →\\n    StronglyMeasurableAtFilter f (nhds a) →\\n      Filter.Tendsto f (nhds a ⊓ MeasureTheory.Measure.ae MeasureTheory.volume) (nhds c) →\\n        deriv (fun u => ∫ (x : ℝ) in u..b, f x) a = -c\",\n  \"isProp\": true,\n  \"docString\":\n  \"Fundamental theorem of calculus: if `f : ℝ → E` is integrable on `a..b` and `f` has a finite\\nlimit `c` almost surely at `a`, then the derivative of `u ↦ ∫ x in u..b, f x` at `a` equals `-c`. \"},\n {\"theorem\":\n  \"∀ {A : Type u_1} [inst : CommRing A] [inst_1 : Algebra ℚ A] (n : ℕ),\\n  (Finset.sum (Finset.range n) fun k => PowerSeries.exp A ^ k) =\\n    PowerSeries.mk fun p => Finset.sum (Finset.range n) fun k => ↑(k ^ p) * ↑(algebraMap ℚ A) (↑(Nat.factorial p))⁻¹\",\n  \"isProp\": true,\n  \"docString\":\n  \"Shows that\\n$\\\\sum_{k = 0}^{n - 1} (e^{X})^k = \\\\sum_{p = 0}^{\\\\infty} \\\\sum_{k = 0}^{n - 1} \\\\frac{k^p}{p!}X^p$. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : CompleteSpace E] [inst_2 : NormedSpace ℝ E] {a b : ℝ}\\n  {μ : MeasureTheory.Measure ℝ} [inst_3 : MeasureTheory.IsFiniteMeasure μ] (c : E),\\n  ∫ (x : ℝ) in a..b, c ∂μ = (ENNReal.toReal (↑↑μ (Set.Iic b)) - ENNReal.toReal (↑↑μ (Set.Iic a))) • c\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `μ` is a finite measure then `∫ x in a..b, c ∂μ = (μ (Iic b) - μ (Iic a)) • c`. \"},\n {\"theorem\": \"∀ (a : ℝ), Cardinal.mk ↑(Set.Iic a) = Cardinal.continuum\",\n  \"isProp\": true,\n  \"docString\": \"The cardinality of the interval (-∞, a]. \"}]\n", "prompt_cons": "/-- `exp (-b * x)` is integrable on `(a, ∞)`. -/\ntheorem ∀ (a : ℝ) {b : ℝ}, 0 < b → MeasureTheory.IntegrableOn (fun x => rexp (-b * x)) (Set.Ioi a) :=\n\n/-- Integral of `|x - a| ^ n` over `Ι a b`. This integral appears in the proof of the\nPicard-Lindelöf/Cauchy-Lipschitz theorem. -/\ntheorem ∀ {a b : ℝ} (n : ℕ), ∫ (x : ℝ) in Ι a b, |x - a| ^ n = |b - a| ^ (n + 1) / (↑n + 1) :=\n\n/-- Relate the integral `cos x ^ n` over `[0, π/2]` to the integral of `sin x ^ n` over `[0, π]`,\nwhich is studied in `Data.Real.Pi.Wallis` and other places. -/\ntheorem ∀ (n : ℕ), ∫ (x : ℝ) in 0 ..Real.pi / 2, Real.cos x ^ n = 1 / 2 * ∫ (x : ℝ) in 0 ..Real.pi, Real.sin x ^ n :=\n\n/-- If `0 < c`, then `(λ t : ℝ, t ^ a)` is integrable on `(c, ∞)` for all `a < -1`. -/\ntheorem ∀ {a : ℝ}, a < -1 → ∀ {c : ℝ}, 0 < c → MeasureTheory.IntegrableOn (fun t => t ^ a) (Set.Ioi c) :=\n\n/-- The reduction formula for the integral of `cos x ^ n` for any natural `n ≥ 2`. -/\ntheorem ∀ {a b : ℝ} (n : ℕ),\n  ∫ (x : ℝ) in a..b, Real.cos x ^ (n + 2) =\n    (Real.cos b ^ (n + 1) * Real.sin b - Real.cos a ^ (n + 1) * Real.sin a) / (↑n + 2) +\n      (↑n + 1) / (↑n + 2) * ∫ (x : ℝ) in a..b, Real.cos x ^ n :=\n\n/-- From a lower bound on `sqrtTwoAddSeries 0 n = 2 cos (π / 2 ^ (n+1))` of the form\n`2 - ((a - 1 / 4 ^ n) / 2 ^ (n + 1)) ^ 2 ≤ sqrtTwoAddSeries 0 n`, one can deduce the upper bound\n`π < a` thanks to basic trigonometric formulas as expressed in `pi_lt_sqrtTwoAddSeries`. -/\ntheorem ∀ (n : ℕ) {a : ℝ},\n  2 - ((a - 1 / 4 ^ n) / 2 ^ (n + 1)) ^ 2 ≤ Real.sqrtTwoAddSeries (↑0 / ↑1) n → 1 / 4 ^ n ≤ a → Real.pi < a :=\n\n/-- From an upper bound on `sqrtTwoAddSeries 0 n = 2 cos (π / 2 ^ (n+1))` of the form\n`sqrtTwoAddSeries 0 n ≤ 2 - (a / 2 ^ (n + 1)) ^ 2)`, one can deduce the lower bound `a < π`\nthanks to basic trigonometric inequalities as expressed in `pi_gt_sqrtTwoAddSeries`. -/\ntheorem ∀ (n : ℕ) {a : ℝ}, Real.sqrtTwoAddSeries (↑0 / ↑1) n ≤ 2 - (a / 2 ^ (n + 1)) ^ 2 → a < Real.pi :=\n\n/-- Shows that $e^{x} * e^{-x} = 1$ -/\ntheorem ∀ {A : Type u_1} [inst : CommRing A] [inst_1 : Algebra ℚ A],\n  PowerSeries.exp A * ↑PowerSeries.evalNegHom (PowerSeries.exp A) = 1 :=\n\n/-- Shows that $e^{aX} * e^{bX} = e^{(a + b)X}$ -/\ntheorem ∀ {A : Type u_1} [inst : CommRing A] [inst_1 : Algebra ℚ A] (a b : A),\n  ↑(PowerSeries.rescale a) (PowerSeries.exp A) * ↑(PowerSeries.rescale b) (PowerSeries.exp A) =\n    ↑(PowerSeries.rescale (a + b)) (PowerSeries.exp A) :=\n\n/-- `exp (-a * x) = o(x ^ s)` as `x → ∞`, for any positive `a` and real `s`. -/\ntheorem ∀ {a : ℝ}, 0 < a → ∀ (b : ℝ), (fun x => rexp (-a * x)) =o[Filter.atTop] fun x => x ^ b :=\n\n/-- A supporting lemma for the **Phragmen-Lindelöf principle** in a horizontal strip. If `z : ℂ`\nbelongs to a horizontal strip `|Complex.im z| ≤ b`, `b ≤ π / 2`, and `a ≤ 0`, then\n$$\\left|exp^{a\\left(e^{z}+e^{-z}\\right)}\\right| \\le e^{a\\cos b \\exp^{|re z|}}.$$ -/\ntheorem ∀ {a b : ℝ},\n  a ≤ 0 →\n    ∀ {z : ℂ},\n      |z.im| ≤ b →\n        b ≤ Real.pi / 2 → ↑Complex.abs (cexp (↑a * (cexp z + cexp (-z)))) ≤ rexp (a * Real.cos b * rexp |z.re|) :=\n\n/-- Fundamental theorem of calculus: if `f : ℝ → E` is integrable on `a..b` and `f` is continuous\nat `a`, then the derivative of `u ↦ ∫ x in u..b, f x` at `a` equals `-f a`. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : CompleteSpace E] [inst_2 : NormedSpace ℝ E] {f : ℝ → E}\n  {a b : ℝ},\n  IntervalIntegrable f MeasureTheory.volume a b →\n    StronglyMeasurableAtFilter f (nhds a) → ContinuousAt f a → deriv (fun u => ∫ (x : ℝ) in u..b, f x) a = -f a :=\n\n/-- **Fundamental theorem of calculus-1**: if `f : ℝ → E` is integrable on `a..b` and `f x` has a\nfinite limit `c` almost surely at `a`, then `u ↦ ∫ x in u..b, f x` has derivative `-c` at `a`. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : CompleteSpace E] [inst_2 : NormedSpace ℝ E] {f : ℝ → E} {c : E}\n  {a b : ℝ},\n  IntervalIntegrable f MeasureTheory.volume a b →\n    StronglyMeasurableAtFilter f (nhds a) →\n      Filter.Tendsto f (nhds a ⊓ MeasureTheory.Measure.ae MeasureTheory.volume) (nhds c) →\n        HasDerivAt (fun u => ∫ (x : ℝ) in u..b, f x) (-c) a :=\n\n/-- **Fundamental theorem of calculus-1**: if `f : ℝ → E` is integrable on `a..b` and `f` is\ncontinuous at `a`, then `u ↦ ∫ x in u..b, f x` has derivative `-f a` at `a`. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : CompleteSpace E] [inst_2 : NormedSpace ℝ E] {f : ℝ → E}\n  {a b : ℝ},\n  IntervalIntegrable f MeasureTheory.volume a b →\n    StronglyMeasurableAtFilter f (nhds a) → ContinuousAt f a → HasDerivAt (fun u => ∫ (x : ℝ) in u..b, f x) (-f a) a :=\n\n/-- Differentiation under integral of `x ↦ ∫ F x a` at a given point `x₀`, assuming\n`F x₀` is integrable, `x ↦ F x a` is locally Lipschitz on a ball around `x₀` for ae `a`\n(with a ball radius independent of `a`) with integrable Lipschitz bound, and `F x` is ae-measurable\nfor `x` in a possibly smaller neighborhood of `x₀`. -/\ntheorem ∀ {α : Type u_4} [inst : MeasurableSpace α] {μ : MeasureTheory.Measure α} {𝕜 : Type u_1} [inst_1 : IsROrC 𝕜]\n  {E : Type u_3} [inst_2 : NormedAddCommGroup E] [inst_3 : NormedSpace ℝ E] [inst_4 : NormedSpace 𝕜 E]\n  [inst_5 : CompleteSpace E] {H : Type u_2} [inst_6 : NormedAddCommGroup H] [inst_7 : NormedSpace 𝕜 H] {F : H → α → E}\n  {F' : α → H →L[𝕜] E} {x₀ : H} {bound : α → ℝ} {ε : ℝ},\n  0 < ε →\n    (∀ᶠ (x : H) in nhds x₀, MeasureTheory.AEStronglyMeasurable (F x) μ) →\n      MeasureTheory.Integrable (F x₀) →\n        MeasureTheory.AEStronglyMeasurable F' μ →\n          (∀ᵐ (a : α) ∂μ, LipschitzOnWith (↑Real.nnabs (bound a)) (fun x => F x a) (Metric.ball x₀ ε)) →\n            MeasureTheory.Integrable bound →\n              (∀ᵐ (a : α) ∂μ, HasFDerivAt (fun x => F x a) (F' a) x₀) →\n                MeasureTheory.Integrable F' ∧ HasFDerivAt (fun x => ∫ (a : α), F x a ∂μ) (∫ (a : α), F' a ∂μ) x₀ :=\n\n/-- Derivative under integral of `x ↦ ∫ F x a` at a given point `x₀ : ℝ`, assuming\n`F x₀` is integrable, `x ↦ F x a` is differentiable on an interval around `x₀` for ae `a`\n(with interval radius independent of `a`) with derivative uniformly bounded by an integrable\nfunction, and `F x` is ae-measurable for `x` in a possibly smaller neighborhood of `x₀`. -/\ntheorem ∀ {α : Type u_2} [inst : MeasurableSpace α] {μ : MeasureTheory.Measure α} {𝕜 : Type u_1} [inst_1 : IsROrC 𝕜]\n  {E : Type u_3} [inst_2 : NormedAddCommGroup E] [inst_3 : NormedSpace ℝ E] [inst_4 : NormedSpace 𝕜 E]\n  [inst_5 : CompleteSpace E] {F F' : 𝕜 → α → E} {x₀ : 𝕜} {ε : ℝ},\n  0 < ε →\n    (∀ᶠ (x : 𝕜) in nhds x₀, MeasureTheory.AEStronglyMeasurable (F x) μ) →\n      MeasureTheory.Integrable (F x₀) →\n        MeasureTheory.AEStronglyMeasurable (F' x₀) μ →\n          ∀ {bound : α → ℝ},\n            (∀ᵐ (a : α) ∂μ, ∀ (x : 𝕜), x ∈ Metric.ball x₀ ε → ‖F' x a‖ ≤ bound a) →\n              MeasureTheory.Integrable bound →\n                (∀ᵐ (a : α) ∂μ, ∀ (x : 𝕜), x ∈ Metric.ball x₀ ε → HasDerivAt (fun x => F x a) (F' x a) x) →\n                  MeasureTheory.Integrable (F' x₀) ∧\n                    HasDerivAt (fun n => ∫ (a : α), F n a ∂μ) (∫ (a : α), F' x₀ a ∂μ) x₀ :=\n\n/-- Fundamental theorem of calculus: if `f : ℝ → E` is integrable on `a..b` and `f` has a finite\nlimit `c` almost surely at `a`, then the derivative of `u ↦ ∫ x in u..b, f x` at `a` equals `-c`. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : CompleteSpace E] [inst_2 : NormedSpace ℝ E] {f : ℝ → E} {c : E}\n  {a b : ℝ},\n  IntervalIntegrable f MeasureTheory.volume a b →\n    StronglyMeasurableAtFilter f (nhds a) →\n      Filter.Tendsto f (nhds a ⊓ MeasureTheory.Measure.ae MeasureTheory.volume) (nhds c) →\n        deriv (fun u => ∫ (x : ℝ) in u..b, f x) a = -c :=\n\n/-- Shows that\n$\\sum_{k = 0}^{n - 1} (e^{X})^k = \\sum_{p = 0}^{\\infty} \\sum_{k = 0}^{n - 1} \\frac{k^p}{p!}X^p$. -/\ntheorem ∀ {A : Type u_1} [inst : CommRing A] [inst_1 : Algebra ℚ A] (n : ℕ),\n  (Finset.sum (Finset.range n) fun k => PowerSeries.exp A ^ k) =\n    PowerSeries.mk fun p => Finset.sum (Finset.range n) fun k => ↑(k ^ p) * ↑(algebraMap ℚ A) (↑(Nat.factorial p))⁻¹ :=\n\n/-- If `μ` is a finite measure then `∫ x in a..b, c ∂μ = (μ (Iic b) - μ (Iic a)) • c`. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : CompleteSpace E] [inst_2 : NormedSpace ℝ E] {a b : ℝ}\n  {μ : MeasureTheory.Measure ℝ} [inst_3 : MeasureTheory.IsFiniteMeasure μ] (c : E),\n  ∫ (x : ℝ) in a..b, c ∂μ = (ENNReal.toReal (↑↑μ (Set.Iic b)) - ENNReal.toReal (↑↑μ (Set.Iic a))) • c :=\n\n/-- The cardinality of the interval (-∞, a]. -/\ntheorem ∀ (a : ℝ), Cardinal.mk ↑(Set.Iic a) = Cardinal.continuum :=\n\n/-- Show that `∫_{-∞}^{∞} cos x / (x^2 + a^2) dx = π e^{-a} / a` for `a > 0`. -/\ntheorem", "choices": ["∀ {a : ℝ}, 0 < a → ∫ (x : ℝ) in (-Real.pi) ..Real.pi, Real.cos x / (x^2 + a^2) = (Real.pi * rexp(-a)) / a ", "∀ {a : ℝ}, 0 < a → ∫ (x : ℝ) in -Real.pi..Real.pi, Real.cos x / (x ^ 2 + a ^ 2) = Real.pi * Real.exp (-a) / a ", "∀ (a : ℝ), 0 < a → ∫ x in Set.Iic ⊤, Real.cos x / (x ^ 2 + a ^ 2) = Real.pi * rexp (-a) / a ", "forall {a : ℝ}, 0 < a → ∫ (x : ℝ) in -Real.pi..Real.pi, Real.cos x / (x ^ 2 + a ^ 2) = Real.pi * (Real.exp (-a)) / a ", "forall_pos_gt_of_integrable_real_of_exponential_decay {a : ℝ} (ha : 0 < a) :\n  ∫ (x : ℝ) in ⊥..⊤, Real.cos x / (x^2 + a^2) = Real.pi * rexp (-a) / a ", "∀ {a : ℝ}, 0 < a → ∫ (x : ℝ) in -Real.pi..Real.pi, (Real.cos x) / (x ^ 2 + a ^ 2) = Real.pi * Real.exp (-a) / a ", "∀ {a : ℝ}, 0 < a → ∫ (x : ℝ) in -Real.pi..Real.pi, Real.cos x / (x^2 + a^2) = π * rexp (-a) / a ", "∀ {a : ℝ}, 0 < a → ∫ (x : ℝ) in -∞..∞, Real.cos x / (x ^ 2 + a ^ 2) = Real.pi * (rexp (-a) / a) ", "∀ (a : ℝ), 0 < a → ∫ x in ℝ, Real.cos x / (x ^ 2 + a ^ 2) = Real.pi * Real.exp (-a) / a ", "∀ {a : ℝ}, 0 < a → ∫ (x : ℝ) in -Real.pi..Real.pi, Real.cos x / (x^2 + a^2) = Real.pi * rexp (-a) / a "]}
{"docString": "Show that `∫_0^1 log(sin π x) dx = -log 2`.", "prompts": "[{\"theorem\":\n  \"∀ {a b : ℝ} (n : ℕ),\\n  ∫ (x : ℝ) in a..b, Real.sin x ^ (n + 2) =\\n    (Real.sin a ^ (n + 1) * Real.cos a - Real.sin b ^ (n + 1) * Real.cos b) / (↑n + 2) +\\n      (↑n + 1) / (↑n + 2) * ∫ (x : ℝ) in a..b, Real.sin x ^ n\",\n  \"isProp\": true,\n  \"docString\":\n  \"The reduction formula for the integral of `sin x ^ n` for any natural `n ≥ 2`. \"},\n {\"theorem\":\n  \"∀ (n : ℕ), ∫ (x : ℝ) in 0 ..Real.pi / 2, Real.cos x ^ n = 1 / 2 * ∫ (x : ℝ) in 0 ..Real.pi, Real.sin x ^ n\",\n  \"isProp\": true,\n  \"docString\":\n  \"Relate the integral `cos x ^ n` over `[0, π/2]` to the integral of `sin x ^ n` over `[0, π]`,\\nwhich is studied in `Data.Real.Pi.Wallis` and other places. \"},\n {\"theorem\": \"riemannZeta 0 = -1 / 2\",\n  \"isProp\": true,\n  \"docString\": \"We have `ζ(0) = -1 / 2`. \"},\n {\"theorem\":\n  \"∀ {A : Type u_1} [inst : CommRing A] [inst_1 : Algebra ℚ A],\\n  PowerSeries.exp A * ↑PowerSeries.evalNegHom (PowerSeries.exp A) = 1\",\n  \"isProp\": true,\n  \"docString\": \"Shows that $e^{x} * e^{-x} = 1$ \"},\n {\"theorem\":\n  \"∀ {x : ℝ}, |x| < 1 → HasSum (fun k => 2 * (1 / (2 * ↑k + 1)) * x ^ (2 * k + 1)) (Real.log (1 + x) - Real.log (1 - x))\",\n  \"isProp\": true,\n  \"docString\":\n  \"Power series expansion of `log(1 + x) - log(1 - x)` for `|x| < 1`. \"},\n {\"theorem\": \"Real.sin (Real.pi / 6) = 1 / 2\",\n  \"isProp\": true,\n  \"docString\": \"The sine of `π / 6` is `1 / 2`. \"},\n {\"theorem\":\n  \"∀ (x : ℝ), Real.cos x ≠ 0 → deriv (fun y => Real.tan y - y) x = ↑1 / Real.cos x ^ 2 - 1\",\n  \"isProp\": true,\n  \"docString\":\n  \"The derivative of `tan x - x` is `1/(cos x)^2 - 1` away from the zeroes of cos. \"},\n {\"theorem\": \"∀ (x : ℝ), 0 < x → x ≤ 1 → |Real.log x * x| < 1\",\n  \"isProp\": true,\n  \"docString\": \"Bound for `|log x * x|` in the interval `(0, 1]`. \"},\n {\"theorem\": \"Real.sin (Real.pi / 3) = Real.sqrt 3 / 2\",\n  \"isProp\": true,\n  \"docString\": \"The sine of `π / 3` is `√3 / 2`. \"},\n {\"theorem\": \"Real.cos (Real.pi / 3) = 1 / 2\",\n  \"isProp\": true,\n  \"docString\": \"The cosine of `π / 3` is `1 / 2`. \"},\n {\"theorem\": \"∀ {x : ℝ}, 0 < x → x < Real.pi / 2 → x < Real.tan x\",\n  \"isProp\": true,\n  \"docString\":\n  \"For all `0 < x < π/2` we have `x < tan x`.\\n\\nThis is proved by checking that the function `tan x - x` vanishes\\nat zero and has non-negative derivative. \"},\n {\"theorem\": \"Real.cos (Real.pi / 6) = Real.sqrt 3 / 2\",\n  \"isProp\": true,\n  \"docString\": \"The cosine of `π / 6` is `√3 / 2`. \"},\n {\"theorem\":\n  \"∀ {a b : ℝ} (n : ℕ),\\n  ∫ (x : ℝ) in a..b, Real.cos x ^ (n + 2) =\\n    (Real.cos b ^ (n + 1) * Real.sin b - Real.cos a ^ (n + 1) * Real.sin a) / (↑n + 2) +\\n      (↑n + 1) / (↑n + 2) * ∫ (x : ℝ) in a..b, Real.cos x ^ n\",\n  \"isProp\": true,\n  \"docString\":\n  \"The reduction formula for the integral of `cos x ^ n` for any natural `n ≥ 2`. \"},\n {\"theorem\":\n  \"∀ {a : ℝ}, 0 < a → HasSum (fun k => 2 * (1 / (2 * ↑k + 1)) * (1 / (2 * a + 1)) ^ (2 * k + 1)) (Real.log (1 + a⁻¹))\",\n  \"isProp\": true,\n  \"docString\":\n  \"Expansion of `log (1 + a⁻¹)` as a series in powers of `1 / (2 * a + 1)`. \"},\n {\"theorem\": \"Real.Gamma (1 / 2) = Real.sqrt Real.pi\",\n  \"isProp\": true,\n  \"docString\":\n  \"The special-value formula `Γ(1/2) = √π`, which is equivalent to the Gaussian integral. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {β : Type u_2} {E : Type u_3} [inst : MeasurableSpace α] [inst_1 : MeasurableSpace β]\\n  {μ : MeasureTheory.Measure α} {ν : MeasureTheory.Measure β} [inst_2 : NormedAddCommGroup E]\\n  [inst_3 : MeasureTheory.SigmaFinite ν] [inst_4 : NormedSpace ℝ E] [inst_5 : CompleteSpace E]\\n  [inst_6 : MeasureTheory.SigmaFinite μ] ⦃f g : α × β → E⦄,\\n  MeasureTheory.Integrable f →\\n    MeasureTheory.Integrable g →\\n      ∫ (x : α), ∫ (y : β), f (x, y) - g (x, y) ∂ν ∂μ =\\n        ∫ (x : α), ∫ (y : β), f (x, y) ∂ν ∂μ - ∫ (x : α), ∫ (y : β), g (x, y) ∂ν ∂μ\",\n  \"isProp\": true,\n  \"docString\": \"Double integrals commute with subtraction. \"},\n {\"theorem\": \"∀ (x : ℂ), HasDerivAt Complex.cos (-Complex.sin x) x\",\n  \"isProp\": true,\n  \"docString\":\n  \"The complex cosine function is everywhere differentiable, with the derivative `-sin x`. \"},\n {\"theorem\":\n  \"Filter.Tendsto\\n  (fun k => Finset.prod (Finset.range k) fun i => (2 * ↑i + 2) / (2 * ↑i + 1) * ((2 * ↑i + 2) / (2 * ↑i + 3)))\\n  Filter.atTop (nhds (Real.pi / 2))\",\n  \"isProp\": true,\n  \"docString\": \"Wallis' product formula for `π / 2`. \"},\n {\"theorem\":\n  \"∀ {E : Type u_2} {V : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] (f : V → E)\\n  [inst_2 : NormedAddCommGroup V] [inst_3 : MeasurableSpace V] [inst_4 : BorelSpace V] [inst_5 : InnerProductSpace ℝ V]\\n  [inst_6 : FiniteDimensional ℝ V],\\n  Filter.Tendsto (fun w => ∫ (v : V), ↑(↑Real.fourierChar (↑Multiplicative.ofAdd (-inner v w))) • f v)\\n    (Filter.cocompact V) (nhds 0)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Riemann-Lebesgue lemma for functions on a real inner-product space: the integral\\n`∫ v, exp (-2 * π * ⟪w, v⟫ * I) • f v` tends to 0 as `w → ∞`. \"},\n {\"theorem\":\n  \"∀ {a b : ℝ} (m n : ℕ),\\n  ∫ (x : ℝ) in a..b, Real.sin x ^ (2 * m + 1) * Real.cos x ^ n =\\n    ∫ (u : ℝ) in Real.cos b..Real.cos a, u ^ n * (1 - u ^ 2) ^ m\",\n  \"isProp\": true,\n  \"docString\":\n  \"Simplification of the integral of `sin x ^ m * cos x ^ n`, case `m` is odd. \"}]\n", "prompt_cons": "/-- The reduction formula for the integral of `sin x ^ n` for any natural `n ≥ 2`. -/\ntheorem ∀ {a b : ℝ} (n : ℕ),\n  ∫ (x : ℝ) in a..b, Real.sin x ^ (n + 2) =\n    (Real.sin a ^ (n + 1) * Real.cos a - Real.sin b ^ (n + 1) * Real.cos b) / (↑n + 2) +\n      (↑n + 1) / (↑n + 2) * ∫ (x : ℝ) in a..b, Real.sin x ^ n :=\n\n/-- Relate the integral `cos x ^ n` over `[0, π/2]` to the integral of `sin x ^ n` over `[0, π]`,\nwhich is studied in `Data.Real.Pi.Wallis` and other places. -/\ntheorem ∀ (n : ℕ), ∫ (x : ℝ) in 0 ..Real.pi / 2, Real.cos x ^ n = 1 / 2 * ∫ (x : ℝ) in 0 ..Real.pi, Real.sin x ^ n :=\n\n/-- We have `ζ(0) = -1 / 2`. -/\ntheorem riemannZeta 0 = -1 / 2 :=\n\n/-- Shows that $e^{x} * e^{-x} = 1$ -/\ntheorem ∀ {A : Type u_1} [inst : CommRing A] [inst_1 : Algebra ℚ A],\n  PowerSeries.exp A * ↑PowerSeries.evalNegHom (PowerSeries.exp A) = 1 :=\n\n/-- Power series expansion of `log(1 + x) - log(1 - x)` for `|x| < 1`. -/\ntheorem ∀ {x : ℝ}, |x| < 1 → HasSum (fun k => 2 * (1 / (2 * ↑k + 1)) * x ^ (2 * k + 1)) (Real.log (1 + x) - Real.log (1 - x)) :=\n\n/-- The sine of `π / 6` is `1 / 2`. -/\ntheorem Real.sin (Real.pi / 6) = 1 / 2 :=\n\n/-- The derivative of `tan x - x` is `1/(cos x)^2 - 1` away from the zeroes of cos. -/\ntheorem ∀ (x : ℝ), Real.cos x ≠ 0 → deriv (fun y => Real.tan y - y) x = ↑1 / Real.cos x ^ 2 - 1 :=\n\n/-- Bound for `|log x * x|` in the interval `(0, 1]`. -/\ntheorem ∀ (x : ℝ), 0 < x → x ≤ 1 → |Real.log x * x| < 1 :=\n\n/-- The sine of `π / 3` is `√3 / 2`. -/\ntheorem Real.sin (Real.pi / 3) = Real.sqrt 3 / 2 :=\n\n/-- The cosine of `π / 3` is `1 / 2`. -/\ntheorem Real.cos (Real.pi / 3) = 1 / 2 :=\n\n/-- For all `0 < x < π/2` we have `x < tan x`.\n\nThis is proved by checking that the function `tan x - x` vanishes\nat zero and has non-negative derivative. -/\ntheorem ∀ {x : ℝ}, 0 < x → x < Real.pi / 2 → x < Real.tan x :=\n\n/-- The cosine of `π / 6` is `√3 / 2`. -/\ntheorem Real.cos (Real.pi / 6) = Real.sqrt 3 / 2 :=\n\n/-- The reduction formula for the integral of `cos x ^ n` for any natural `n ≥ 2`. -/\ntheorem ∀ {a b : ℝ} (n : ℕ),\n  ∫ (x : ℝ) in a..b, Real.cos x ^ (n + 2) =\n    (Real.cos b ^ (n + 1) * Real.sin b - Real.cos a ^ (n + 1) * Real.sin a) / (↑n + 2) +\n      (↑n + 1) / (↑n + 2) * ∫ (x : ℝ) in a..b, Real.cos x ^ n :=\n\n/-- Expansion of `log (1 + a⁻¹)` as a series in powers of `1 / (2 * a + 1)`. -/\ntheorem ∀ {a : ℝ}, 0 < a → HasSum (fun k => 2 * (1 / (2 * ↑k + 1)) * (1 / (2 * a + 1)) ^ (2 * k + 1)) (Real.log (1 + a⁻¹)) :=\n\n/-- The special-value formula `Γ(1/2) = √π`, which is equivalent to the Gaussian integral. -/\ntheorem Real.Gamma (1 / 2) = Real.sqrt Real.pi :=\n\n/-- Double integrals commute with subtraction. -/\ntheorem ∀ {α : Type u_1} {β : Type u_2} {E : Type u_3} [inst : MeasurableSpace α] [inst_1 : MeasurableSpace β]\n  {μ : MeasureTheory.Measure α} {ν : MeasureTheory.Measure β} [inst_2 : NormedAddCommGroup E]\n  [inst_3 : MeasureTheory.SigmaFinite ν] [inst_4 : NormedSpace ℝ E] [inst_5 : CompleteSpace E]\n  [inst_6 : MeasureTheory.SigmaFinite μ] ⦃f g : α × β → E⦄,\n  MeasureTheory.Integrable f →\n    MeasureTheory.Integrable g →\n      ∫ (x : α), ∫ (y : β), f (x, y) - g (x, y) ∂ν ∂μ =\n        ∫ (x : α), ∫ (y : β), f (x, y) ∂ν ∂μ - ∫ (x : α), ∫ (y : β), g (x, y) ∂ν ∂μ :=\n\n/-- The complex cosine function is everywhere differentiable, with the derivative `-sin x`. -/\ntheorem ∀ (x : ℂ), HasDerivAt Complex.cos (-Complex.sin x) x :=\n\n/-- Wallis' product formula for `π / 2`. -/\ntheorem Filter.Tendsto\n  (fun k => Finset.prod (Finset.range k) fun i => (2 * ↑i + 2) / (2 * ↑i + 1) * ((2 * ↑i + 2) / (2 * ↑i + 3)))\n  Filter.atTop (nhds (Real.pi / 2)) :=\n\n/-- Riemann-Lebesgue lemma for functions on a real inner-product space: the integral\n`∫ v, exp (-2 * π * ⟪w, v⟫ * I) • f v` tends to 0 as `w → ∞`. -/\ntheorem ∀ {E : Type u_2} {V : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] (f : V → E)\n  [inst_2 : NormedAddCommGroup V] [inst_3 : MeasurableSpace V] [inst_4 : BorelSpace V] [inst_5 : InnerProductSpace ℝ V]\n  [inst_6 : FiniteDimensional ℝ V],\n  Filter.Tendsto (fun w => ∫ (v : V), ↑(↑Real.fourierChar (↑Multiplicative.ofAdd (-inner v w))) • f v)\n    (Filter.cocompact V) (nhds 0) :=\n\n/-- Simplification of the integral of `sin x ^ m * cos x ^ n`, case `m` is odd. -/\ntheorem ∀ {a b : ℝ} (m n : ℕ),\n  ∫ (x : ℝ) in a..b, Real.sin x ^ (2 * m + 1) * Real.cos x ^ n =\n    ∫ (u : ℝ) in Real.cos b..Real.cos a, u ^ n * (1 - u ^ 2) ^ m :=\n\n/-- Show that `∫_0^1 log(sin π x) dx = -log 2`. -/\ntheorem", "choices": ["(∫ (x : ℝ) in 0..1, Real.log (Real.sin (Real.pi * x))) = -Real.log 2 "]}
{"docString": "Show that there is no holomorphic function `f` in the unit disc `D` that extends continuously to `∂D` such that `f(z) = 1/z` for `z ∈ ∂D`.", "prompts": "[{\"theorem\":\n  \"∀ {E : Type u_2} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type u_4} [inst_2 : NormedAddCommGroup F]\\n  [inst_3 : NormedSpace ℂ F] {H : Type u_3} [inst_4 : TopologicalSpace H] {I : ModelWithCorners ℂ E H}\\n  [inst_5 : ModelWithCorners.Boundaryless I] {M : Type u_1} [inst_6 : TopologicalSpace M] [inst_7 : CompactSpace M]\\n  [inst_8 : ChartedSpace H M] [inst_9 : SmoothManifoldWithCorners I M] [inst_10 : PreconnectedSpace M] {f : M → F},\\n  MDifferentiable I (modelWithCornersSelf ℂ F) f → ∀ (a b : M), f a = f b\",\n  \"isProp\": true,\n  \"docString\":\n  \"A holomorphic function on a compact connected complex manifold is constant. \"},\n {\"theorem\":\n  \"∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {R : ℝ},\\n  0 ≤ R →\\n    ∀ {f : ℂ → E} {c : ℂ} {s : Set ℂ},\\n      Set.Countable s →\\n        ContinuousOn f (Metric.closedBall c R) →\\n          (∀ (z : ℂ), z ∈ Metric.ball c R \\\\ s → DifferentiableAt ℂ f z) → (∮ (z : ℂ) in C(c, R), f z) = 0\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Cauchy-Goursat theorem** for a disk: if `f : ℂ → E` is continuous on a closed disk\\n`{z | ‖z - c‖ ≤ R}` and is complex differentiable at all but countably many points of its interior,\\nthen the integral $\\\\oint_{|z-c|=R}f(z)\\\\,dz$ equals zero. \"},\n {\"theorem\":\n  \"∀ {E : Type uE} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] [inst_2 : FiniteDimensional ℝ E] {H : Type uH}\\n  [inst_3 : TopologicalSpace H] (I : ModelWithCorners ℝ E H) {M : Type uM} [inst_4 : TopologicalSpace M]\\n  [inst_5 : ChartedSpace H M] [inst_6 : SmoothManifoldWithCorners I M] [inst_7 : T2Space M]\\n  [inst_8 : SigmaCompactSpace M] {s t : Set M},\\n  IsClosed s → IsClosed t → Disjoint s t → ∃ f, Set.EqOn (↑f) 0 s ∧ Set.EqOn (↑f) 1 t ∧ ∀ (x : M), ↑f x ∈ Set.Icc 0 1\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given two disjoint closed sets in a Hausdorff σ-compact finite dimensional manifold, there\\nexists an infinitely smooth function that is equal to `0` on one of them and is equal to one on the\\nother. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type u_4} [inst_2 : NormedAddCommGroup F]\\n  [inst_3 : NormedSpace ℂ F] {H : Type u_2} [inst_4 : TopologicalSpace H] {I : ModelWithCorners ℂ E H}\\n  [inst_5 : ModelWithCorners.Boundaryless I] {M : Type u_3} [inst_6 : TopologicalSpace M] [inst_7 : CompactSpace M]\\n  [inst_8 : ChartedSpace H M] [inst_9 : SmoothManifoldWithCorners I M] {f : M → F},\\n  MDifferentiable I (modelWithCornersSelf ℂ F) f → IsLocallyConstant f\",\n  \"isProp\": true,\n  \"docString\":\n  \"A holomorphic function on a compact complex manifold is locally constant. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : PseudoMetricSpace β]\\n  {f g : BoundedContinuousFunction α β} [inst_2 : IsEmpty α], dist f g = 0\",\n  \"isProp\": true,\n  \"docString\":\n  \"On an empty space, bounded continuous functions are at distance 0. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_2} {𝕜₂ : Type u_3} {E : Type u_4} {F : Type u_5} {𝓕 : Type u_1} [inst : SeminormedAddCommGroup E]\\n  [inst_1 : SeminormedAddCommGroup F] [inst_2 : NontriviallyNormedField 𝕜] [inst_3 : NontriviallyNormedField 𝕜₂]\\n  [inst_4 : NormedSpace 𝕜 E] [inst_5 : NormedSpace 𝕜₂ F] {σ₁₂ : 𝕜 →+* 𝕜₂} [inst_6 : SemilinearMapClass 𝓕 σ₁₂ E F]\\n  (f : 𝓕), Continuous ↑f → ∀ {x : E}, ‖x‖ = 0 → ‖↑f x‖ = 0\",\n  \"isProp\": true,\n  \"docString\": \"If `‖x‖ = 0` and `f` is continuous then `‖f x‖ = 0`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {E : Type u_2} {F : Type u_3} [inst : NontriviallyNormedField 𝕜] [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] {f : E → F}\\n  {p : FormalMultilinearSeries 𝕜 E F} {x : E} {r : ENNReal},\\n  HasFPowerSeriesOnBall f p x r → ContinuousOn f (EMetric.ball x r)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a function admits a power series expansion on a disk, then it is continuous there. \"},\n {\"theorem\":\n  \"∀ {G₀ : Type u_1} [inst : Zero G₀] [inst_1 : Inv G₀] [inst_2 : TopologicalSpace G₀] [self : HasContinuousInv₀ G₀]\\n  ⦃x : G₀⦄, x ≠ 0 → ContinuousAt Inv.inv x\",\n  \"isProp\": true,\n  \"docString\": \"The map `fun x ↦ x⁻¹` is continuous at all nonzero points. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {f : ℂ → E},\\n  DiffContOnCl ℂ f (Set.Ioi 0 ×ℂ Set.Ioi 0) →\\n    (∃ c,\\n        c < 2 ∧\\n          ∃ B,\\n            f =O[Filter.comap (↑Complex.abs) Filter.atTop ⊓ Filter.principal (Set.Ioi 0 ×ℂ Set.Ioi 0)] fun z =>\\n              rexp (B * ↑Complex.abs z ^ c)) →\\n      (∀ (x : ℝ), 0 ≤ x → f ↑x = 0) →\\n        (∀ (x : ℝ), 0 ≤ x → f (↑x * Complex.I) = 0) → Set.EqOn f 0 {z | 0 ≤ z.re ∧ 0 ≤ z.im}\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Phragmen-Lindelöf principle** in the first quadrant. Let `f : ℂ → E` be a function such that\\n\\n* `f` is differentiable in the open first quadrant and is continuous on its closure;\\n* `‖f z‖` is bounded from above by `A * exp(B * (abs z) ^ c)` on the open first quadrant\\n  for some `A`, `B`, and `c < 2`;\\n* `f` is equal to zero on the boundary of the first quadrant.\\n\\nThen `f` is equal to zero on the closed first quadrant. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {f f' : ℂ → E}\\n  {c : ℂ} {R : ℝ},\\n  (∀ (z : ℂ), z ∈ Metric.sphere c |R| → HasDerivWithinAt f (f' z) (Metric.sphere c |R|) z) →\\n    (∮ (z : ℂ) in C(c, R), f' z) = 0\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f' : ℂ → E` is a derivative of a complex differentiable function on the circle\\n`Metric.sphere c |R|`, then `∮ z in C(c, R), f' z = 0`. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {f f' : ℂ → E}\\n  {c : ℂ} {R : ℝ},\\n  0 ≤ R →\\n    (∀ (z : ℂ), z ∈ Metric.sphere c R → HasDerivWithinAt f (f' z) (Metric.sphere c R) z) →\\n      (∮ (z : ℂ) in C(c, R), f' z) = 0\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f' : ℂ → E` is a derivative of a complex differentiable function on the circle\\n`Metric.sphere c R`, then `∮ z in C(c, R), f' z = 0`. \"},\n {\"theorem\":\n  \"∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {f : ℂ → E} {c : ℂ},\\n  (∀ᶠ (z : ℂ) in nhdsWithin c {c}ᶜ, DifferentiableAt ℂ f z) →\\n    ((fun z => f z - f c) =o[nhdsWithin c {c}ᶜ] fun z => (z - c)⁻¹) →\\n      Filter.Tendsto f (nhdsWithin c {c}ᶜ) (nhds (limUnder (nhdsWithin c {c}ᶜ) f))\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Removable singularity** theorem: if a function `f : ℂ → E` is complex differentiable on a\\npunctured neighborhood of `c` and $f(z) - f(c)=o((z-c)^{-1})$, then `f` has a limit at `c`. \"},\n {\"theorem\":\n  \"∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {c : ℂ} {r R : ℝ},\\n  0 < r →\\n    r ≤ R →\\n      ∀ {f : ℂ → E} {s : Set ℂ},\\n        Set.Countable s →\\n          ContinuousOn f (Metric.closedBall c R \\\\ Metric.ball c r) →\\n            (∀ (z : ℂ), z ∈ (Metric.ball c R \\\\ Metric.closedBall c r) \\\\ s → DifferentiableAt ℂ f z) →\\n              (∮ (z : ℂ) in C(c, R), (z - c)⁻¹ • f z) = ∮ (z : ℂ) in C(c, r), (z - c)⁻¹ • f z\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f : ℂ → E` is continuous the closed annulus `r ≤ ‖z - c‖ ≤ R`, `0 < r ≤ R`, and is complex\\ndifferentiable at all but countably many points of its interior, then the integrals of\\n`f z / (z - c)` (formally, `(z - c)⁻¹ • f z`) over the circles `‖z - c‖ = r` and `‖z - c‖ = R` are\\nequal to each other. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {β : Type u_2} [inst : UniformSpace α] [inst_1 : UniformSpace β] (self : α ≃ᵤ β),\\n  UniformContinuous self.toFun\",\n  \"isProp\": true,\n  \"docString\": \"Uniform continuity of the function \"},\n {\"theorem\":\n  \"∀ {G : Type u_1} [inst : MeasurableSpace G] {μ : MeasureTheory.Measure G} [inst_1 : TopologicalSpace G]\\n  [inst_2 : Group G] [inst_3 : TopologicalGroup G] [inst_4 : BorelSpace G]\\n  [inst_5 : MeasureTheory.Measure.IsMulLeftInvariant μ] [inst_6 : MeasureTheory.Measure.Regular μ],\\n  μ ≠ 0 → ∀ {f : G → ENNReal}, Continuous f → (∫⁻ (x : G), f x ∂μ = 0 ↔ f = 0)\",\n  \"isProp\": true,\n  \"docString\":\n  \"For nonzero regular left invariant measures, the integral of a continuous nonnegative function\\n`f` is 0 iff `f` is 0. \"},\n {\"theorem\": \"∀ {𝕂 : Type u_1} [inst : IsROrC 𝕂], HasStrictDerivAt (exp 𝕂) 1 0\",\n  \"isProp\": true,\n  \"docString\":\n  \"The exponential map in `𝕂 = ℝ` or `𝕂 = ℂ` has strict derivative `1` at zero. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] [inst_2 : FiniteDimensional ℝ E] {s : Set E}\\n  {f : E → E} [inst_3 : MeasurableSpace E] [inst_4 : BorelSpace E] (μ : MeasureTheory.Measure E)\\n  [inst_5 : MeasureTheory.Measure.IsAddHaarMeasure μ], DifferentiableOn ℝ f s → ↑↑μ s = 0 → ↑↑μ (f '' s) = 0\",\n  \"isProp\": true,\n  \"docString\":\n  \"A differentiable function maps sets of measure zero to sets of measure zero. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {f : ℂ → E},\\n  DiffContOnCl ℂ f (Set.Iio 0 ×ℂ Set.Iio 0) →\\n    (∃ c,\\n        c < 2 ∧\\n          ∃ B,\\n            f =O[Filter.comap (↑Complex.abs) Filter.atTop ⊓ Filter.principal (Set.Iio 0 ×ℂ Set.Iio 0)] fun z =>\\n              rexp (B * ↑Complex.abs z ^ c)) →\\n      (∀ (x : ℝ), x ≤ 0 → f ↑x = 0) →\\n        (∀ (x : ℝ), x ≤ 0 → f (↑x * Complex.I) = 0) → Set.EqOn f 0 {z | z.re ≤ 0 ∧ z.im ≤ 0}\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Phragmen-Lindelöf principle** in the third quadrant. Let `f : ℂ → E` be a function such that\\n\\n* `f` is differentiable in the open third quadrant and is continuous on its closure;\\n* `‖f z‖` is bounded from above by `A * exp(B * (abs z) ^ c)` on the open third quadrant\\n  for some `A`, `B`, and `c < 2`;\\n* `f` is equal to zero on the boundary of the third quadrant.\\n\\nThen `f` is equal to zero on the closed third quadrant. \"},\n {\"theorem\":\n  \"∀ {F : Type u_1} {A : outParam (Type u_2)} {B : outParam (Type u_3)} [inst : Monoid A] [inst_1 : Monoid B]\\n  [inst_2 : TopologicalSpace A] [inst_3 : TopologicalSpace B] [self : ContinuousMonoidHomClass F A B] (f : F),\\n  Continuous ↑f\",\n  \"isProp\": true,\n  \"docString\": \"Proof of the continuity of the map. \"},\n {\"theorem\":\n  \"∀ {G : Type u_1} [inst : MeasurableSpace G] {μ : MeasureTheory.Measure G} [inst_1 : TopologicalSpace G]\\n  [inst_2 : AddGroup G] [inst_3 : TopologicalAddGroup G] [inst_4 : BorelSpace G]\\n  [inst_5 : MeasureTheory.Measure.IsAddLeftInvariant μ] [inst_6 : MeasureTheory.Measure.Regular μ],\\n  μ ≠ 0 → ∀ {f : G → ENNReal}, Continuous f → (∫⁻ (x : G), f x ∂μ = 0 ↔ f = 0)\",\n  \"isProp\": true,\n  \"docString\":\n  \"For nonzero regular left invariant measures, the integral of a continuous nonnegative\\nfunction `f` is 0 iff `f` is 0.\"}]\n", "prompt_cons": "/-- A holomorphic function on a compact connected complex manifold is constant. -/\ntheorem ∀ {E : Type u_2} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type u_4} [inst_2 : NormedAddCommGroup F]\n  [inst_3 : NormedSpace ℂ F] {H : Type u_3} [inst_4 : TopologicalSpace H] {I : ModelWithCorners ℂ E H}\n  [inst_5 : ModelWithCorners.Boundaryless I] {M : Type u_1} [inst_6 : TopologicalSpace M] [inst_7 : CompactSpace M]\n  [inst_8 : ChartedSpace H M] [inst_9 : SmoothManifoldWithCorners I M] [inst_10 : PreconnectedSpace M] {f : M → F},\n  MDifferentiable I (modelWithCornersSelf ℂ F) f → ∀ (a b : M), f a = f b :=\n\n/-- **Cauchy-Goursat theorem** for a disk: if `f : ℂ → E` is continuous on a closed disk\n`{z | ‖z - c‖ ≤ R}` and is complex differentiable at all but countably many points of its interior,\nthen the integral $\\oint_{|z-c|=R}f(z)\\,dz$ equals zero. -/\ntheorem ∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {R : ℝ},\n  0 ≤ R →\n    ∀ {f : ℂ → E} {c : ℂ} {s : Set ℂ},\n      Set.Countable s →\n        ContinuousOn f (Metric.closedBall c R) →\n          (∀ (z : ℂ), z ∈ Metric.ball c R \\ s → DifferentiableAt ℂ f z) → (∮ (z : ℂ) in C(c, R), f z) = 0 :=\n\n/-- Given two disjoint closed sets in a Hausdorff σ-compact finite dimensional manifold, there\nexists an infinitely smooth function that is equal to `0` on one of them and is equal to one on the\nother. -/\ntheorem ∀ {E : Type uE} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] [inst_2 : FiniteDimensional ℝ E] {H : Type uH}\n  [inst_3 : TopologicalSpace H] (I : ModelWithCorners ℝ E H) {M : Type uM} [inst_4 : TopologicalSpace M]\n  [inst_5 : ChartedSpace H M] [inst_6 : SmoothManifoldWithCorners I M] [inst_7 : T2Space M]\n  [inst_8 : SigmaCompactSpace M] {s t : Set M},\n  IsClosed s → IsClosed t → Disjoint s t → ∃ f, Set.EqOn (↑f) 0 s ∧ Set.EqOn (↑f) 1 t ∧ ∀ (x : M), ↑f x ∈ Set.Icc 0 1 :=\n\n/-- A holomorphic function on a compact complex manifold is locally constant. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type u_4} [inst_2 : NormedAddCommGroup F]\n  [inst_3 : NormedSpace ℂ F] {H : Type u_2} [inst_4 : TopologicalSpace H] {I : ModelWithCorners ℂ E H}\n  [inst_5 : ModelWithCorners.Boundaryless I] {M : Type u_3} [inst_6 : TopologicalSpace M] [inst_7 : CompactSpace M]\n  [inst_8 : ChartedSpace H M] [inst_9 : SmoothManifoldWithCorners I M] {f : M → F},\n  MDifferentiable I (modelWithCornersSelf ℂ F) f → IsLocallyConstant f :=\n\n/-- On an empty space, bounded continuous functions are at distance 0. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : PseudoMetricSpace β]\n  {f g : BoundedContinuousFunction α β} [inst_2 : IsEmpty α], dist f g = 0 :=\n\n/-- If `‖x‖ = 0` and `f` is continuous then `‖f x‖ = 0`. -/\ntheorem ∀ {𝕜 : Type u_2} {𝕜₂ : Type u_3} {E : Type u_4} {F : Type u_5} {𝓕 : Type u_1} [inst : SeminormedAddCommGroup E]\n  [inst_1 : SeminormedAddCommGroup F] [inst_2 : NontriviallyNormedField 𝕜] [inst_3 : NontriviallyNormedField 𝕜₂]\n  [inst_4 : NormedSpace 𝕜 E] [inst_5 : NormedSpace 𝕜₂ F] {σ₁₂ : 𝕜 →+* 𝕜₂} [inst_6 : SemilinearMapClass 𝓕 σ₁₂ E F]\n  (f : 𝓕), Continuous ↑f → ∀ {x : E}, ‖x‖ = 0 → ‖↑f x‖ = 0 :=\n\n/-- If a function admits a power series expansion on a disk, then it is continuous there. -/\ntheorem ∀ {𝕜 : Type u_1} {E : Type u_2} {F : Type u_3} [inst : NontriviallyNormedField 𝕜] [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] {f : E → F}\n  {p : FormalMultilinearSeries 𝕜 E F} {x : E} {r : ENNReal},\n  HasFPowerSeriesOnBall f p x r → ContinuousOn f (EMetric.ball x r) :=\n\n/-- The map `fun x ↦ x⁻¹` is continuous at all nonzero points. -/\ntheorem ∀ {G₀ : Type u_1} [inst : Zero G₀] [inst_1 : Inv G₀] [inst_2 : TopologicalSpace G₀] [self : HasContinuousInv₀ G₀]\n  ⦃x : G₀⦄, x ≠ 0 → ContinuousAt Inv.inv x :=\n\n/-- **Phragmen-Lindelöf principle** in the first quadrant. Let `f : ℂ → E` be a function such that\n\n* `f` is differentiable in the open first quadrant and is continuous on its closure;\n* `‖f z‖` is bounded from above by `A * exp(B * (abs z) ^ c)` on the open first quadrant\n  for some `A`, `B`, and `c < 2`;\n* `f` is equal to zero on the boundary of the first quadrant.\n\nThen `f` is equal to zero on the closed first quadrant. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {f : ℂ → E},\n  DiffContOnCl ℂ f (Set.Ioi 0 ×ℂ Set.Ioi 0) →\n    (∃ c,\n        c < 2 ∧\n          ∃ B,\n            f =O[Filter.comap (↑Complex.abs) Filter.atTop ⊓ Filter.principal (Set.Ioi 0 ×ℂ Set.Ioi 0)] fun z =>\n              rexp (B * ↑Complex.abs z ^ c)) →\n      (∀ (x : ℝ), 0 ≤ x → f ↑x = 0) →\n        (∀ (x : ℝ), 0 ≤ x → f (↑x * Complex.I) = 0) → Set.EqOn f 0 {z | 0 ≤ z.re ∧ 0 ≤ z.im} :=\n\n/-- If `f' : ℂ → E` is a derivative of a complex differentiable function on the circle\n`Metric.sphere c |R|`, then `∮ z in C(c, R), f' z = 0`. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {f f' : ℂ → E}\n  {c : ℂ} {R : ℝ},\n  (∀ (z : ℂ), z ∈ Metric.sphere c |R| → HasDerivWithinAt f (f' z) (Metric.sphere c |R|) z) →\n    (∮ (z : ℂ) in C(c, R), f' z) = 0 :=\n\n/-- If `f' : ℂ → E` is a derivative of a complex differentiable function on the circle\n`Metric.sphere c R`, then `∮ z in C(c, R), f' z = 0`. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {f f' : ℂ → E}\n  {c : ℂ} {R : ℝ},\n  0 ≤ R →\n    (∀ (z : ℂ), z ∈ Metric.sphere c R → HasDerivWithinAt f (f' z) (Metric.sphere c R) z) →\n      (∮ (z : ℂ) in C(c, R), f' z) = 0 :=\n\n/-- **Removable singularity** theorem: if a function `f : ℂ → E` is complex differentiable on a\npunctured neighborhood of `c` and $f(z) - f(c)=o((z-c)^{-1})$, then `f` has a limit at `c`. -/\ntheorem ∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {f : ℂ → E} {c : ℂ},\n  (∀ᶠ (z : ℂ) in nhdsWithin c {c}ᶜ, DifferentiableAt ℂ f z) →\n    ((fun z => f z - f c) =o[nhdsWithin c {c}ᶜ] fun z => (z - c)⁻¹) →\n      Filter.Tendsto f (nhdsWithin c {c}ᶜ) (nhds (limUnder (nhdsWithin c {c}ᶜ) f)) :=\n\n/-- If `f : ℂ → E` is continuous the closed annulus `r ≤ ‖z - c‖ ≤ R`, `0 < r ≤ R`, and is complex\ndifferentiable at all but countably many points of its interior, then the integrals of\n`f z / (z - c)` (formally, `(z - c)⁻¹ • f z`) over the circles `‖z - c‖ = r` and `‖z - c‖ = R` are\nequal to each other. -/\ntheorem ∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {c : ℂ} {r R : ℝ},\n  0 < r →\n    r ≤ R →\n      ∀ {f : ℂ → E} {s : Set ℂ},\n        Set.Countable s →\n          ContinuousOn f (Metric.closedBall c R \\ Metric.ball c r) →\n            (∀ (z : ℂ), z ∈ (Metric.ball c R \\ Metric.closedBall c r) \\ s → DifferentiableAt ℂ f z) →\n              (∮ (z : ℂ) in C(c, R), (z - c)⁻¹ • f z) = ∮ (z : ℂ) in C(c, r), (z - c)⁻¹ • f z :=\n\n/-- Uniform continuity of the function -/\ntheorem ∀ {α : Type u_1} {β : Type u_2} [inst : UniformSpace α] [inst_1 : UniformSpace β] (self : α ≃ᵤ β),\n  UniformContinuous self.toFun :=\n\n/-- For nonzero regular left invariant measures, the integral of a continuous nonnegative function\n`f` is 0 iff `f` is 0. -/\ntheorem ∀ {G : Type u_1} [inst : MeasurableSpace G] {μ : MeasureTheory.Measure G} [inst_1 : TopologicalSpace G]\n  [inst_2 : Group G] [inst_3 : TopologicalGroup G] [inst_4 : BorelSpace G]\n  [inst_5 : MeasureTheory.Measure.IsMulLeftInvariant μ] [inst_6 : MeasureTheory.Measure.Regular μ],\n  μ ≠ 0 → ∀ {f : G → ENNReal}, Continuous f → (∫⁻ (x : G), f x ∂μ = 0 ↔ f = 0) :=\n\n/-- The exponential map in `𝕂 = ℝ` or `𝕂 = ℂ` has strict derivative `1` at zero. -/\ntheorem ∀ {𝕂 : Type u_1} [inst : IsROrC 𝕂], HasStrictDerivAt (exp 𝕂) 1 0 :=\n\n/-- A differentiable function maps sets of measure zero to sets of measure zero. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] [inst_2 : FiniteDimensional ℝ E] {s : Set E}\n  {f : E → E} [inst_3 : MeasurableSpace E] [inst_4 : BorelSpace E] (μ : MeasureTheory.Measure E)\n  [inst_5 : MeasureTheory.Measure.IsAddHaarMeasure μ], DifferentiableOn ℝ f s → ↑↑μ s = 0 → ↑↑μ (f '' s) = 0 :=\n\n/-- **Phragmen-Lindelöf principle** in the third quadrant. Let `f : ℂ → E` be a function such that\n\n* `f` is differentiable in the open third quadrant and is continuous on its closure;\n* `‖f z‖` is bounded from above by `A * exp(B * (abs z) ^ c)` on the open third quadrant\n  for some `A`, `B`, and `c < 2`;\n* `f` is equal to zero on the boundary of the third quadrant.\n\nThen `f` is equal to zero on the closed third quadrant. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {f : ℂ → E},\n  DiffContOnCl ℂ f (Set.Iio 0 ×ℂ Set.Iio 0) →\n    (∃ c,\n        c < 2 ∧\n          ∃ B,\n            f =O[Filter.comap (↑Complex.abs) Filter.atTop ⊓ Filter.principal (Set.Iio 0 ×ℂ Set.Iio 0)] fun z =>\n              rexp (B * ↑Complex.abs z ^ c)) →\n      (∀ (x : ℝ), x ≤ 0 → f ↑x = 0) →\n        (∀ (x : ℝ), x ≤ 0 → f (↑x * Complex.I) = 0) → Set.EqOn f 0 {z | z.re ≤ 0 ∧ z.im ≤ 0} :=\n\n/-- Proof of the continuity of the map. -/\ntheorem ∀ {F : Type u_1} {A : outParam (Type u_2)} {B : outParam (Type u_3)} [inst : Monoid A] [inst_1 : Monoid B]\n  [inst_2 : TopologicalSpace A] [inst_3 : TopologicalSpace B] [self : ContinuousMonoidHomClass F A B] (f : F),\n  Continuous ↑f :=\n\n/-- For nonzero regular left invariant measures, the integral of a continuous nonnegative\nfunction `f` is 0 iff `f` is 0. -/\ntheorem ∀ {G : Type u_1} [inst : MeasurableSpace G] {μ : MeasureTheory.Measure G} [inst_1 : TopologicalSpace G]\n  [inst_2 : AddGroup G] [inst_3 : TopologicalAddGroup G] [inst_4 : BorelSpace G]\n  [inst_5 : MeasureTheory.Measure.IsAddLeftInvariant μ] [inst_6 : MeasureTheory.Measure.Regular μ],\n  μ ≠ 0 → ∀ {f : G → ENNReal}, Continuous f → (∫⁻ (x : G), f x ∂μ = 0 ↔ f = 0) :=\n\n/-- Show that there is no holomorphic function `f` in the unit disc `D` that extends continuously to `∂D` such that `f(z) = 1/z` for `z ∈ ∂D`. -/\ntheorem", "choices": ["∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {D : Set ℂ} {f : ℂ → E},\n  D = Metric.Ball 0 1 →\n  ContinuousOn f (Closure D) →\n  Set.EqOn f (λ z, z⁻¹) (Closure (Metric.Sphere 0 1)) → False ", "∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {D : Set ℂ} (hd : ∀ z ∈ ∂D, ∥z∥ = 1),\n  ¬∃ (f : ℂ → E), DifferentiableOn ℂ f (Interior D) ∧ ContinuousOn f D ∧ ∀ (z : ℂ), z ∈ ∂D → f z = (z⁻¹) • 1 ", "∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {H : Type u_2} [inst_2 : TopologicalSpace H]\n  {I : ModelWithCorners ℂ E H} [inst_3 : ModelWithCorners.Boundaryless I] {M : Type u_3} [inst_4 : TopologicalSpace M]\n  [inst_5 : ChartedSpace H M] [inst_6 : SmoothManifoldWithCorners I M] {f : M → ℂ},\n  ContinuousOn f (Metric.sphere 0 1) →\n    (∀ (z : ℂ), z ∈ Metric.sphere 0 1 → f z = z⁻¹) →\n      ¬MDifferentiable I (modelWithCornersSelf ℂ ℂ) f ", "∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {f : ℂ → E},\n  ContinuousOn f (Metric.closedBall 0 1) →\n    Set.EqOn f (λ z, z⁻¹) (Metric.sphere 0 1) → False ", "∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {H : Type u_2} [inst_2 : TopologicalSpace H]\n  {I : ModelWithCorners ℂ E H} [inst_3 : ModelWithCorners.Boundaryless I] {M : Type u_3} [inst_4 : TopologicalSpace M]\n  [inst_5 : ChartedSpace H M] [inst_6 : SmoothManifoldWithCorners I M] (f : M → ℂ),\n  (∀ (z : ℂ), z ∈ Metric.sphere 0 1 → f z = z⁻¹) →\n    ContinuousOn f (Metric.sphere 0 1) →\n      ¬(MDifferentiable I (modelWithCornersSelf ℂ ℂ) f ∧ ContinuousOn f (Metric.closedBall 0 1)) ", "∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {D : ℕ → PartialHolomorphic E (Metric.ClosedBall 0 1)},\n  MDifferentiableOnCl I (ModelWithCornersSelf ℂ E) (fun z => z + 1 / z) (Metric.ClosedBall 0 1) →\n    ContinuousOn (fun z => z + 1 / z) (Metric.ClosedBall 0 1) →\n      (∀ (z : ℂ), z ∈ Metric.Sphere 0 1 → (fun z => z + 1 / z) z = 1 / z) → False ", "∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {H : Type u_2} [inst_2 : TopologicalSpace H]\n  {I : ModelWithCorners ℂ E H} [inst_3 : ModelWithCorners.Boundaryless I] {M : Type u_3} [inst_4 : TopologicalSpace M]\n  [inst_5 : ChartedSpace H M] [inst_6 : SmoothManifoldWithCorners I M] {f : M → ℂ},\n  ContinuousOn f (Closure (Metric.Ball 0 1)) →\n    Set.EqOn f (λ (z : ℂ), z⁻¹) (Metric.Sphere 0 1) → False ", "∀ {E : Type u_2} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type u_4} [inst_2 : NormedAddCommGroup F]\n  [inst_3 : NormedSpace ℂ F] {H : Type u_3} [inst_4 : TopologicalSpace H] {I : ModelWithCorners ℂ E H}\n  [inst_5 : ModelWithCorners.Boundaryless I] {M : Type u_1} [inst_6 : TopologicalSpace M] [inst_7 : CompactSpace M]\n  [inst_8 : ChartedSpace H M] [inst_9 : SmoothManifoldWithCorners I M] [inst_10 : PreconnectedSpace M] {f : M → F},\n  MDifferentiable I (modelWithCornersSelf ℂ F) f → f ∉ ContinuousOn f (Metric.ClosedBall 0 1) ∧\n    ∀ (z : ℂ), z ∈ Metric.sphere 0 1 → f z = (z - 0)⁻¹ → False ", "∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {H : Type u_2} [inst_2 : TopologicalSpace H]\n  {I : ModelWithCorners ℂ E H} [inst_3 : ModelWithCorners.Boundaryless I] {M : Type u_3} [inst_4 : TopologicalSpace M]\n  [inst_5 : ChartedSpace H M] [inst_6 : SmoothManifoldWithCorners I M] {f : M → ℂ},\n  ContinuousOn f (metric.sphere (0 : ℂ) 1) →\n  Set.EqOn f (λ z, (z : ℂ)⁻¹) (metric.sphere (0 : ℂ) 1) →\n  ¬ MDifferentiable I (modelWithCornersSelf ℂ ℂ) f ", "∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E],\n  ¬∃ (f : ℂ → E), ContinuousOn f (Metric.closedBall 0 1) ∧ DifferentiableOn ℂ f (Metric.ball 0 1) ∧\n    ∀ (z : ℂ), z ∈ Metric.sphere 0 1 → f z = (z⁻¹) "]}
{"docString": "For `j ∈ {1, 2, 3, 4}`, let `z_j` be a complex number with `|z_j| = 1` and `z_j ≠ 1`. Prove that `3 - z_1 - z_2 - z_3 - z_4 + z_1 z_2 z_3 z_4 ≠ 0`.", "prompts": "[{\"theorem\":\n  \"∀ {z : UpperHalfPlane}, z ∈ ModularGroup.fdo → ∀ (n : ℤ), 1 < ↑Complex.normSq ↑(ModularGroup.T ^ n • z)\",\n  \"isProp\": true,\n  \"docString\": \"If `z ∈ 𝒟ᵒ`, and `n : ℤ`, then `|z + n| > 1`. \"},\n {\"theorem\": \"∀ (z : ℂ), ↑z.re = (z + ↑(starRingEnd ℂ) z) / 2\",\n  \"isProp\": true,\n  \"docString\":\n  \"A complex number `z` plus its conjugate `conj z` is `2` times its real part. \"},\n {\"theorem\": \"∀ (z : ℂ), ↑z.im = (z - ↑(starRingEnd ℂ) z) / (2 * Complex.I)\",\n  \"isProp\": true,\n  \"docString\":\n  \"A complex number `z` minus its conjugate `conj z` is `2i` times its imaginary part. \"},\n {\"theorem\":\n  \"∀ {p : ℕ} [inst : Fact (Nat.Prime p)] {x y : ZMod p}, y ≠ 0 → x ^ 2 = -y ^ 2 → p % 4 ≠ 3\",\n  \"isProp\": true,\n  \"docString\":\n  \"If two nonzero squares are negatives of each other in `ZMod p`, then `p % 4 ≠ 3`. \"},\n {\"theorem\":\n  \"∀ {K : Type u_1} [inst : IsROrC K] (z : K),\\n  List.TFAE [↑(starRingEnd K) z = z, ∃ r, ↑r = z, ↑(↑IsROrC.re z) = z, ↑IsROrC.im z = 0]\",\n  \"isProp\": true,\n  \"docString\":\n  \"There are several equivalent ways to say that a number `z` is in fact a real number. \"},\n {\"theorem\": \"∀ {p : ℕ} [inst : Fact (Nat.Prime p)], IsSquare (-1) ↔ p % 4 ≠ 3\",\n  \"isProp\": true,\n  \"docString\":\n  \"`-1` is a square in `ZMod p` iff `p` is not congruent to `3` mod `4`. \"},\n {\"theorem\":\n  \"∀ {z : UpperHalfPlane}, 1 < ↑Complex.normSq ↑z → ↑Complex.normSq ↑(ModularGroup.S • z) < 1\",\n  \"isProp\": true,\n  \"docString\": \"If `1 < |z|`, then `|S • z| < 1`. \"},\n {\"theorem\": \"∀ {x : ℝ}, 0 ≤ x → ∀ (y z : ℝ), x ^ y * x ^ z ≤ x ^ (y + z)\",\n  \"isProp\": true,\n  \"docString\":\n  \"For `0 ≤ x`, the only problematic case in the equality `x ^ y * x ^ z = x ^ (y + z)` is for\\n`x = 0` and `y + z = 0`, where the right hand side is `1` while the left hand side can vanish.\\nThe inequality is always true, though, and given in this lemma. \"},\n {\"theorem\":\n  \"∀ {n : ℕ} {G : Type u_1} [inst : AddGroup G] (g : Fin (n + 1) → G) (j : Fin (n + 1)) (k : Fin n),\\n  -Fin.partialSum g (Fin.succAbove (Fin.succ j) (Fin.castSucc k)) + Fin.partialSum g (Fin.succ (Fin.succAbove j k)) =\\n    Fin.contractNth j (fun x x_1 => x + x_1) g k\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `(g₀, g₁, ..., gₙ)` be a tuple of elements in `Gⁿ⁺¹`.\\nThen if `k < j`, this says `-(g₀ + g₁ + ... + gₖ₋₁) + (g₀ + g₁ + ... + gₖ) = gₖ`.\\nIf `k = j`, it says `-(g₀ + g₁ + ... + gₖ₋₁) + (g₀ + g₁ + ... + gₖ₊₁) = gₖ + gₖ₊₁`.\\nIf `k > j`, it says `-(g₀ + g₁ + ... + gₖ) + (g₀ + g₁ + ... + gₖ₊₁) = gₖ₊₁.`\\nUseful for defining group cohomology.\"},\n {\"theorem\": \"riemannZeta 0 = -1 / 2\",\n  \"isProp\": true,\n  \"docString\": \"We have `ζ(0) = -1 / 2`. \"},\n {\"theorem\":\n  \"∀ {n : ℤ}, n ≠ -1 → ∀ (c w : ℂ) (R : ℝ), (∮ (z : ℂ) in C(c, R), (z - w) ^ n) = 0\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `n ≠ -1` is an integer number, then the integral of `(z - w) ^ n` over the circle equals\\nzero. \"},\n {\"theorem\": \"∀ {n : ℤ}, n % 4 = 3 → ↑ZMod.χ₄ ↑n = -1\",\n  \"isProp\": true,\n  \"docString\": \"If `n % 4 = 3`, then `χ₄ n = -1`. \"},\n {\"theorem\":\n  \"∀ {a b : ℕ}, a % 4 = 3 → b % 4 = 3 → jacobiSym (↑a) b = -jacobiSym (↑b) a\",\n  \"isProp\": true,\n  \"docString\":\n  \"The Law of Quadratic Reciprocity for the Jacobi symbol: if `a` and `b` are natural numbers\\nboth congruent to `3` mod `4`, then `J(a | b) = -J(b | a)`. \"},\n {\"theorem\":\n  \"∀ {R : Type u_1} {k : ℕ} [inst : CommRing R] [inst_1 : IsDomain R] {ζ : R},\\n  IsPrimitiveRoot ζ k → 1 < k → (Finset.sum (Finset.range k) fun i => ζ ^ i) = 0\",\n  \"isProp\": true,\n  \"docString\": \"If `1 < k` then `(∑ i in range k, ζ ^ i) = 0`. \"},\n {\"theorem\":\n  \"∀ {K : Type u_1} {g : GeneralizedContinuedFraction K} {n : ℕ} [inst : DivisionRing K]\\n  {gp : GeneralizedContinuedFraction.Pair K} {ppredA predA : K},\\n  Stream'.Seq.get? g.s (n + 1) = some gp →\\n    GeneralizedContinuedFraction.numerators g n = ppredA →\\n      GeneralizedContinuedFraction.numerators g (n + 1) = predA →\\n        GeneralizedContinuedFraction.numerators g (n + 2) = gp.b * predA + gp.a * ppredA\",\n  \"isProp\": true,\n  \"docString\": \"Shows that `Aₙ = bₙ * Aₙ₋₁ + aₙ * Aₙ₋₂`. \"},\n {\"theorem\":\n  \"∀ (a : ℤ) {b : ℕ}, Odd b → jacobiSym (-a) b = ↑ZMod.χ₄ ↑b * jacobiSym a b\",\n  \"isProp\": true,\n  \"docString\": \"If `b` is odd, then `J(-a | b) = χ₄ b * J(a | b)`. \"},\n {\"theorem\":\n  \"∀ {ι : Type u_1} (self : ComplexShape ι) {i i' j : ι}, ComplexShape.Rel self i j → ComplexShape.Rel self i' j → i = i'\",\n  \"isProp\": true,\n  \"docString\": \"There is at most one nonzero differential to `X j`. \"},\n {\"theorem\":\n  \"∀ {C : Type u} [inst : CategoryTheory.Category C] [inst_1 : CategoryTheory.IsCofilteredOrEmpty C] {i j j' : C}\\n  (f : j ⟶ i) (f' : j' ⟶ i), ∃ k g g', CategoryTheory.CategoryStruct.comp g f = CategoryTheory.CategoryStruct.comp g' f'\",\n  \"isProp\": true,\n  \"docString\":\n  \"For every cospan `j ⟶ i ⟵ j'`,\\nthere exists a cone `j ⟵ k ⟶ j'` such that the square commutes. \"},\n {\"theorem\": \"∀ {p n : ℕ}, Nat.Prime p → p ∣ n → IsSquare (-1) → p % 4 ≠ 3\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a prime `p` divides `n` such that `-1` is a square modulo `n`, then `p % 4 ≠ 3`. \"},\n {\"theorem\": \"∀ (a : ℤ), jacobiSym a 0 = 1\",\n  \"isProp\": true,\n  \"docString\": \"The symbol `J(a | 0)` has the value `1`. \"}]\n", "prompt_cons": "/-- If `z ∈ 𝒟ᵒ`, and `n : ℤ`, then `|z + n| > 1`. -/\ntheorem ∀ {z : UpperHalfPlane}, z ∈ ModularGroup.fdo → ∀ (n : ℤ), 1 < ↑Complex.normSq ↑(ModularGroup.T ^ n • z) :=\n\n/-- A complex number `z` plus its conjugate `conj z` is `2` times its real part. -/\ntheorem ∀ (z : ℂ), ↑z.re = (z + ↑(starRingEnd ℂ) z) / 2 :=\n\n/-- A complex number `z` minus its conjugate `conj z` is `2i` times its imaginary part. -/\ntheorem ∀ (z : ℂ), ↑z.im = (z - ↑(starRingEnd ℂ) z) / (2 * Complex.I) :=\n\n/-- If two nonzero squares are negatives of each other in `ZMod p`, then `p % 4 ≠ 3`. -/\ntheorem ∀ {p : ℕ} [inst : Fact (Nat.Prime p)] {x y : ZMod p}, y ≠ 0 → x ^ 2 = -y ^ 2 → p % 4 ≠ 3 :=\n\n/-- There are several equivalent ways to say that a number `z` is in fact a real number. -/\ntheorem ∀ {K : Type u_1} [inst : IsROrC K] (z : K),\n  List.TFAE [↑(starRingEnd K) z = z, ∃ r, ↑r = z, ↑(↑IsROrC.re z) = z, ↑IsROrC.im z = 0] :=\n\n/-- `-1` is a square in `ZMod p` iff `p` is not congruent to `3` mod `4`. -/\ntheorem ∀ {p : ℕ} [inst : Fact (Nat.Prime p)], IsSquare (-1) ↔ p % 4 ≠ 3 :=\n\n/-- If `1 < |z|`, then `|S • z| < 1`. -/\ntheorem ∀ {z : UpperHalfPlane}, 1 < ↑Complex.normSq ↑z → ↑Complex.normSq ↑(ModularGroup.S • z) < 1 :=\n\n/-- For `0 ≤ x`, the only problematic case in the equality `x ^ y * x ^ z = x ^ (y + z)` is for\n`x = 0` and `y + z = 0`, where the right hand side is `1` while the left hand side can vanish.\nThe inequality is always true, though, and given in this lemma. -/\ntheorem ∀ {x : ℝ}, 0 ≤ x → ∀ (y z : ℝ), x ^ y * x ^ z ≤ x ^ (y + z) :=\n\n/-- Let `(g₀, g₁, ..., gₙ)` be a tuple of elements in `Gⁿ⁺¹`.\nThen if `k < j`, this says `-(g₀ + g₁ + ... + gₖ₋₁) + (g₀ + g₁ + ... + gₖ) = gₖ`.\nIf `k = j`, it says `-(g₀ + g₁ + ... + gₖ₋₁) + (g₀ + g₁ + ... + gₖ₊₁) = gₖ + gₖ₊₁`.\nIf `k > j`, it says `-(g₀ + g₁ + ... + gₖ) + (g₀ + g₁ + ... + gₖ₊₁) = gₖ₊₁.`\nUseful for defining group cohomology. -/\ntheorem ∀ {n : ℕ} {G : Type u_1} [inst : AddGroup G] (g : Fin (n + 1) → G) (j : Fin (n + 1)) (k : Fin n),\n  -Fin.partialSum g (Fin.succAbove (Fin.succ j) (Fin.castSucc k)) + Fin.partialSum g (Fin.succ (Fin.succAbove j k)) =\n    Fin.contractNth j (fun x x_1 => x + x_1) g k :=\n\n/-- We have `ζ(0) = -1 / 2`. -/\ntheorem riemannZeta 0 = -1 / 2 :=\n\n/-- If `n ≠ -1` is an integer number, then the integral of `(z - w) ^ n` over the circle equals\nzero. -/\ntheorem ∀ {n : ℤ}, n ≠ -1 → ∀ (c w : ℂ) (R : ℝ), (∮ (z : ℂ) in C(c, R), (z - w) ^ n) = 0 :=\n\n/-- If `n % 4 = 3`, then `χ₄ n = -1`. -/\ntheorem ∀ {n : ℤ}, n % 4 = 3 → ↑ZMod.χ₄ ↑n = -1 :=\n\n/-- The Law of Quadratic Reciprocity for the Jacobi symbol: if `a` and `b` are natural numbers\nboth congruent to `3` mod `4`, then `J(a | b) = -J(b | a)`. -/\ntheorem ∀ {a b : ℕ}, a % 4 = 3 → b % 4 = 3 → jacobiSym (↑a) b = -jacobiSym (↑b) a :=\n\n/-- If `1 < k` then `(∑ i in range k, ζ ^ i) = 0`. -/\ntheorem ∀ {R : Type u_1} {k : ℕ} [inst : CommRing R] [inst_1 : IsDomain R] {ζ : R},\n  IsPrimitiveRoot ζ k → 1 < k → (Finset.sum (Finset.range k) fun i => ζ ^ i) = 0 :=\n\n/-- Shows that `Aₙ = bₙ * Aₙ₋₁ + aₙ * Aₙ₋₂`. -/\ntheorem ∀ {K : Type u_1} {g : GeneralizedContinuedFraction K} {n : ℕ} [inst : DivisionRing K]\n  {gp : GeneralizedContinuedFraction.Pair K} {ppredA predA : K},\n  Stream'.Seq.get? g.s (n + 1) = some gp →\n    GeneralizedContinuedFraction.numerators g n = ppredA →\n      GeneralizedContinuedFraction.numerators g (n + 1) = predA →\n        GeneralizedContinuedFraction.numerators g (n + 2) = gp.b * predA + gp.a * ppredA :=\n\n/-- If `b` is odd, then `J(-a | b) = χ₄ b * J(a | b)`. -/\ntheorem ∀ (a : ℤ) {b : ℕ}, Odd b → jacobiSym (-a) b = ↑ZMod.χ₄ ↑b * jacobiSym a b :=\n\n/-- There is at most one nonzero differential to `X j`. -/\ntheorem ∀ {ι : Type u_1} (self : ComplexShape ι) {i i' j : ι}, ComplexShape.Rel self i j → ComplexShape.Rel self i' j → i = i' :=\n\n/-- For every cospan `j ⟶ i ⟵ j'`,\nthere exists a cone `j ⟵ k ⟶ j'` such that the square commutes. -/\ntheorem ∀ {C : Type u} [inst : CategoryTheory.Category C] [inst_1 : CategoryTheory.IsCofilteredOrEmpty C] {i j j' : C}\n  (f : j ⟶ i) (f' : j' ⟶ i), ∃ k g g', CategoryTheory.CategoryStruct.comp g f = CategoryTheory.CategoryStruct.comp g' f' :=\n\n/-- If a prime `p` divides `n` such that `-1` is a square modulo `n`, then `p % 4 ≠ 3`. -/\ntheorem ∀ {p n : ℕ}, Nat.Prime p → p ∣ n → IsSquare (-1) → p % 4 ≠ 3 :=\n\n/-- The symbol `J(a | 0)` has the value `1`. -/\ntheorem ∀ (a : ℤ), jacobiSym a 0 = 1 :=\n\n/-- For `j ∈ {1, 2, 3, 4}`, let `z_j` be a complex number with `|z_j| = 1` and `z_j ≠ 1`. Prove that `3 - z_1 - z_2 - z_3 - z_4 + z_1 z_2 z_3 z_4 ≠ 0`. -/\ntheorem", "choices": ["∀ {z₁ z₂ z₃ z₄ : ℂ}, Complex.abs z₁ = 1 → z₁ ≠ 1 → Complex.abs z₂ = 1 → z₂ ≠ 1 → Complex.abs z₃ = 1 → z₃ ≠ 1 → Complex.abs z₄ = 1 → z₄ ≠ 1 →\n  3 - z₁ - z₂ - z₃ - z₄ + z₁ * z₂ * z₃ * z₄ ≠ 0 ", "∀ {z₁ z₂ z₃ z₄ : ℂ},\n  z₁ ≠ 1 → Complex.abs z₁ = 1 →\n  z₂ ≠ 1 → Complex.abs z₂ = 1 →\n  z₃ ≠ 1 → Complex.abs z₃ = 1 →\n  z₄ ≠ 1 → Complex.abs z₄ = 1 →\n  3 - z₁ - z₂ - z₃ - z₄ + z₁ * z₂ * z₃ * z₄ ≠ 0 ", "∀ {z₁ z₂ z₃ z₄ : ℂ}, Complex.normSq z₁ = 1 → z₁ ≠ 1 → Complex.normSq z₂ = 1 → z₂ ≠ 1 → Complex.normSq z₃ = 1 → z₃ ≠ 1 → Complex.normSq z₄ = 1 → z₄ ≠ 1 → 3 - z₁ - z₂ - z₃ - z₄ + z₁ * z₂ * z₃ * z₄ ≠ 0 ", "∀ {z1 z2 z3 z4 : ℂ}, z1 ≠ 1 → z2 ≠ 1 → z3 ≠ 1 → z4 ≠ 1 → Complex.normSq z1 = 1 → Complex.normSq z2 = 1 → Complex.normSq z3 = 1 → Complex.normSq z4 = 1 →\n  3 - z1 - z2 - z3 - z4 + z1 * z2 * z3 * z4 ≠ 0 ", "∀ {z1 z2 z3 z4 : ℂ},\n  (Complex.normSq z1 = 1 ∧ z1 ≠ 1) →\n  (Complex.normSq z2 = 1 ∧ z2 ≠ 1) →\n  (Complex.normSq z3 = 1 ∧ z3 ≠ 1) →\n  (Complex.normSq z4 = 1 ∧ z4 ≠ 1) →\n  3 - z1 - z2 - z3 - z4 + z1 * z2 * z3 * z4 ≠ 0 ", "∀ (z1 z2 z3 z4 : ℂ),\n  Complex.abs z1 = 1 → z1 ≠ 1 →\n  Complex.abs z2 = 1 → z2 ≠ 1 →\n  Complex.abs z3 = 1 → z3 ≠ 1 →\n  Complex.abs z4 = 1 → z4 ≠ 1 →\n  3 - z1 - z2 - z3 - z4 + z1 * z2 * z3 * z4 ≠ 0 ", "∀ {z1 z2 z3 z4 : ℂ}, Complex.abs z1 = 1 → z1 ≠ 1 → Complex.abs z2 = 1 → z2 ≠ 1 → Complex.abs z3 = 1 → z3 ≠ 1 → Complex.abs z4 = 1 → z4 ≠ 1 → 3 - z1 - z2 - z3 - z4 + z1 * z2 * z3 * z4 ≠ 0 ", "∀ {z1 z2 z3 z4 : ℂ}, Complex.abs z1 = 1 → z1 ≠ 1 → Complex.abs z2 = 1 → z2 ≠ 1 → Complex.abs z3 = 1 → z3 ≠ 1 → Complex.abs z4 = 1 → z4 ≠ 1 →\n  3 - z1 - z2 - z3 - z4 + z1 * z2 * z3 * z4 ≠ 0 ", "∀ (z₁ z₂ z₃ z₄ : ℂ), Complex.abs z₁ = 1 → z₁ ≠ 1 → Complex.abs z₂ = 1 → z₂ ≠ 1 → Complex.abs z₃ = 1 → z₃ ≠ 1 → Complex.abs z₄ = 1 → z₄ ≠ 1 → 3 - z₁ - z₂ - z₃ - z₄ + z₁ * z₂ * z₃ * z₄ ≠ 0 ", "∀ {z_1 z_2 z_3 z_4 : ℂ}, Complex.normSq z_1 = 1 → z_1 ≠ 1 → Complex.normSq z_2 = 1 → z_2 ≠ 1 → Complex.normSq z_3 = 1 → z_3 ≠ 1 → Complex.normSq z_4 = 1 → z_4 ≠ 1 → 3 - z_1 - z_2 - z_3 - z_4 + z_1 * z_2 * z_3 * z_4 ≠ 0 "]}
{"docString": "Let `n` be a positive integer, and let `f_n(z) = n + (n - 1)z + (n - 2)z^2 + ⋯ + z^(n - 1)`. Prove that `f_n` has no roots in the closed unit disk `{z ∈ ℂ: |z| ≤ 1}`.", "prompts": "[{\"theorem\":\n  \"∀ {z : UpperHalfPlane}, z ∈ ModularGroup.fdo → ∀ (n : ℤ), 1 < ↑Complex.normSq ↑(ModularGroup.T ^ n • z)\",\n  \"isProp\": true,\n  \"docString\": \"If `z ∈ 𝒟ᵒ`, and `n : ℤ`, then `|z + n| > 1`. \"},\n {\"theorem\":\n  \"∀ {n : ℤ}, n ≠ -1 → ∀ (c w : ℂ) (R : ℝ), (∮ (z : ℂ) in C(c, R), (z - w) ^ n) = 0\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `n ≠ -1` is an integer number, then the integral of `(z - w) ^ n` over the circle equals\\nzero. \"},\n {\"theorem\":\n  \"∀ {f : ℂ → ℂ} {z : ℂ} {R : ℝ},\\n  DifferentiableOn ℂ f (Metric.ball 0 R) →\\n    Set.MapsTo f (Metric.ball 0 R) (Metric.ball 0 R) →\\n      f 0 = 0 → ↑Complex.abs z < R → ↑Complex.abs (f z) ≤ ↑Complex.abs z\",\n  \"isProp\": true,\n  \"docString\":\n  \"The **Schwarz Lemma**: if `f : ℂ → ℂ` sends an open disk with center `0` to itself, the for any\\npoint `z` of this disk we have `abs (f z) ≤ abs z`. \"},\n {\"theorem\":\n  \"∀ (n : ℕ+) (x : ℂˣ), x ∈ rootsOfUnity n ℂ ↔ ∃ i, i < ↑n ∧ cexp (2 * ↑Real.pi * Complex.I * (↑i / ↑↑n)) = ↑x\",\n  \"isProp\": true,\n  \"docString\":\n  \"The complex `n`-th roots of unity are exactly the\\ncomplex numbers of the form `exp (2 * Real.pi * Complex.I * (i / n))` for some `i < n`. \"},\n {\"theorem\":\n  \"∀ {S : Set ℕ+} (A : Type u) {B : Type v} [inst : CommRing A] [inst_1 : CommRing B] [inst_2 : Algebra A B]\\n  [self : IsCyclotomicExtension S A B] {n : ℕ+}, n ∈ S → ∃ r, IsPrimitiveRoot r ↑n\",\n  \"isProp\": true,\n  \"docString\":\n  \"For all `n ∈ S`, there exists a primitive `n`-th root of unity in `B`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} [inst : NontriviallyNormedField 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] {H : Type u_3} [inst_3 : TopologicalSpace H] {I : ModelWithCorners 𝕜 E H} {M : Type u_4}\\n  [inst_4 : TopologicalSpace M] [inst_5 : ChartedSpace H M] [inst_6 : SmoothManifoldWithCorners I M] {E' : Type u_5}\\n  [inst_7 : NormedAddCommGroup E'] [inst_8 : NormedSpace 𝕜 E'] {H' : Type u_6} [inst_9 : TopologicalSpace H']\\n  {I' : ModelWithCorners 𝕜 E' H'} {M' : Type u_7} [inst_10 : TopologicalSpace M'] [inst_11 : ChartedSpace H' M']\\n  [inst_12 : SmoothManifoldWithCorners I' M'] {f : M → M'} {x : M} {n : ℕ},\\n  ContMDiffAt I I' (↑n) f x ↔ ∀ᶠ (x' : M) in nhds x, ContMDiffAt I I' (↑n) f x'\",\n  \"isProp\": true,\n  \"docString\":\n  \"Note: This does not hold for `n = ∞`. `f` being `C^∞` at `x` means that for every `n`, `f` is\\n`C^n` on some neighborhood of `x`, but this neighborhood can depend on `n`. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {f : ℂ → E} {c : ℂ} {R C : ℝ},\\n  0 < R →\\n    ContinuousOn f (Metric.sphere c R) →\\n      (∀ (z : ℂ), z ∈ Metric.sphere c R → ‖f z‖ ≤ C) →\\n        (∃ z, z ∈ Metric.sphere c R ∧ ‖f z‖ < C) → ‖∮ (z : ℂ) in C(c, R), f z‖ < 2 * Real.pi * R * C\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` is continuous on the circle `|z - c| = R`, `R > 0`, the `‖f z‖` is less than or equal to\\n`C : ℝ` on this circle, and this norm is strictly less than `C` at some point `z` of the circle,\\nthen `‖∮ z in C(c, R), f z‖ < 2 * π * R * C`. \"},\n {\"theorem\":\n  \"∀ {n : ℤ} {c w : ℂ} {R : ℝ}, n < 0 → w ∈ Metric.sphere c |R| → (∮ (z : ℂ) in C(c, R), (z - w) ^ n) = 0\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `n < 0` and `|w - c| = |R|`, then `(z - w) ^ n` is not circle integrable on the circle with\\ncenter `c` and radius `|R|`, so the integral `∮ z in C(c, R), (z - w) ^ n` is equal to zero. \"},\n {\"theorem\":\n  \"∀ {f : ℝ → ℝ} {x : ℝ} {n : ℕ},\\n  ConvexOn ℝ (Set.Ioi 0) f →\\n    (∀ {y : ℝ}, 0 < y → f (y + 1) = f y + Real.log y) → 2 ≤ n → 0 < x → f ↑n + x * Real.log (↑n - 1) ≤ f (↑n + x)\",\n  \"isProp\": true,\n  \"docString\": \"Linear lower bound for `f (x + n)` on unit interval \"},\n {\"theorem\":\n  \"∀ {R : Type u_1} [inst : Zero R] {n : R} [self : NeZero n], n ≠ 0\",\n  \"isProp\": true,\n  \"docString\": \"The proposition that `n` is not zero. \"},\n {\"theorem\":\n  \"∀ {f : ℝ → ℝ} {x : ℝ} {n : ℕ},\\n  ConvexOn ℝ (Set.Ioi 0) f →\\n    (∀ {y : ℝ}, 0 < y → f (y + 1) = f y + Real.log y) → n ≠ 0 → 0 < x → x ≤ 1 → f (↑n + x) ≤ f ↑n + x * Real.log ↑n\",\n  \"isProp\": true,\n  \"docString\": \"Linear upper bound for `f (x + n)` on unit interval \"},\n {\"theorem\":\n  \"∀ {c w : ℂ} {R : ℝ} {n : ℤ}, CircleIntegrable (fun z => (z - w) ^ n) c R ↔ R = 0 ∨ 0 ≤ n ∨ ¬w ∈ Metric.sphere c |R|\",\n  \"isProp\": true,\n  \"docString\":\n  \"The function `λ z, (z - w) ^ n`, `n : ℤ`, is circle integrable on the circle with center `c` and\\nradius `|R|` if and only if `R = 0` or `0 ≤ n`, or `w` does not belong to this circle. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] {f : C(ℝ, E)},\\n  (Summable fun n => ‖ContinuousMap.restrict (Set.Icc 0 1) (ContinuousMap.comp f (ContinuousMap.addRight ↑n))‖) →\\n    MeasureTheory.Integrable ↑f\",\n  \"isProp\": true,\n  \"docString\":\n  \"If the sequence with `n`-th term the the sup norm of `λ x, f (x + n)` on the interval `Icc 0 1`,\\nfor `n ∈ ℤ`, is summable, then `f` is integrable on `ℝ`. \"},\n {\"theorem\":\n  \"∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {c : ℂ} {r R : ℝ},\\n  0 < r →\\n    r ≤ R →\\n      ∀ {f : ℂ → E} {s : Set ℂ},\\n        Set.Countable s →\\n          ContinuousOn f (Metric.closedBall c R \\\\ Metric.ball c r) →\\n            (∀ (z : ℂ), z ∈ (Metric.ball c R \\\\ Metric.closedBall c r) \\\\ s → DifferentiableAt ℂ f z) →\\n              (∮ (z : ℂ) in C(c, R), (z - c)⁻¹ • f z) = ∮ (z : ℂ) in C(c, r), (z - c)⁻¹ • f z\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f : ℂ → E` is continuous the closed annulus `r ≤ ‖z - c‖ ≤ R`, `0 < r ≤ R`, and is complex\\ndifferentiable at all but countably many points of its interior, then the integrals of\\n`f z / (z - c)` (formally, `(z - c)⁻¹ • f z`) over the circles `‖z - c‖ = r` and `‖z - c‖ = R` are\\nequal to each other. \"},\n {\"theorem\":\n  \"∀ {n : ℕ} {K : Type u_1} [inst : Field K] {μ : K},\\n  IsPrimitiveRoot μ n → 0 < n → ∀ [inst_1 : CharZero K], minpoly ℤ μ ∣ Polynomial.cyclotomic n ℤ\",\n  \"isProp\": true,\n  \"docString\":\n  \"The minimal polynomial of a primitive `n`-th root of unity `μ` divides `cyclotomic n ℤ`. \"},\n {\"theorem\":\n  \"∀ (p : ℕ) [hp : Fact (Nat.Prime p)] (n : ℕ), WittVector.IsPoly p fun R _Rcr x => x * ↑n\",\n  \"isProp\": true,\n  \"docString\": \"Multiplication by `n` is a polynomial function. \"},\n {\"theorem\":\n  \"∀ {R : Type u_1} [inst : NormedRing R] {r : ℝ}, 1 < r → Nat.cast =o[Filter.atTop] fun n => r ^ n\",\n  \"isProp\": true,\n  \"docString\": \"For a real `r > 1` we have `n = o(r ^ n)` as `n → ∞`. \"},\n {\"theorem\":\n  \"∀ (n : ℕ+) (A : Type w) (B : Type z) [inst : CommRing A] [inst_1 : CommRing B] [inst_2 : Algebra A B]\\n  [inst_3 : IsCyclotomicExtension {n} A B], IsPrimitiveRoot (IsCyclotomicExtension.zeta n A B) ↑n\",\n  \"isProp\": true,\n  \"docString\": \"`zeta n A B` is a primitive `n`-th root of unity. \"},\n {\"theorem\":\n  \"∀ {f : ℂ → ℂ} {c : ℂ} {R : ℝ},\\n  DifferentiableOn ℂ f (Metric.ball c R) →\\n    Set.MapsTo f (Metric.ball c R) (Metric.ball c R) → f c = c → 0 < R → ↑Complex.abs (deriv f c) ≤ 1\",\n  \"isProp\": true,\n  \"docString\":\n  \"The **Schwarz Lemma**: if `f : ℂ → ℂ` sends an open disk of positive radius to itself and the\\ncenter of this disk to itself, then the absolute value of the derivative of `f` at the center of\\nthis disk is at most `1`. \"},\n {\"theorem\":\n  \"∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {f : ℂ → E} {c : ℂ},\\n  (∀ᶠ (z : ℂ) in nhdsWithin c {c}ᶜ, DifferentiableAt ℂ f z) →\\n    ((fun z => f z - f c) =o[nhdsWithin c {c}ᶜ] fun z => (z - c)⁻¹) →\\n      Filter.Tendsto f (nhdsWithin c {c}ᶜ) (nhds (limUnder (nhdsWithin c {c}ᶜ) f))\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Removable singularity** theorem: if a function `f : ℂ → E` is complex differentiable on a\\npunctured neighborhood of `c` and $f(z) - f(c)=o((z-c)^{-1})$, then `f` has a limit at `c`. \"}]\n", "prompt_cons": "/-- If `z ∈ 𝒟ᵒ`, and `n : ℤ`, then `|z + n| > 1`. -/\ntheorem ∀ {z : UpperHalfPlane}, z ∈ ModularGroup.fdo → ∀ (n : ℤ), 1 < ↑Complex.normSq ↑(ModularGroup.T ^ n • z) :=\n\n/-- If `n ≠ -1` is an integer number, then the integral of `(z - w) ^ n` over the circle equals\nzero. -/\ntheorem ∀ {n : ℤ}, n ≠ -1 → ∀ (c w : ℂ) (R : ℝ), (∮ (z : ℂ) in C(c, R), (z - w) ^ n) = 0 :=\n\n/-- The **Schwarz Lemma**: if `f : ℂ → ℂ` sends an open disk with center `0` to itself, the for any\npoint `z` of this disk we have `abs (f z) ≤ abs z`. -/\ntheorem ∀ {f : ℂ → ℂ} {z : ℂ} {R : ℝ},\n  DifferentiableOn ℂ f (Metric.ball 0 R) →\n    Set.MapsTo f (Metric.ball 0 R) (Metric.ball 0 R) →\n      f 0 = 0 → ↑Complex.abs z < R → ↑Complex.abs (f z) ≤ ↑Complex.abs z :=\n\n/-- The complex `n`-th roots of unity are exactly the\ncomplex numbers of the form `exp (2 * Real.pi * Complex.I * (i / n))` for some `i < n`. -/\ntheorem ∀ (n : ℕ+) (x : ℂˣ), x ∈ rootsOfUnity n ℂ ↔ ∃ i, i < ↑n ∧ cexp (2 * ↑Real.pi * Complex.I * (↑i / ↑↑n)) = ↑x :=\n\n/-- For all `n ∈ S`, there exists a primitive `n`-th root of unity in `B`. -/\ntheorem ∀ {S : Set ℕ+} (A : Type u) {B : Type v} [inst : CommRing A] [inst_1 : CommRing B] [inst_2 : Algebra A B]\n  [self : IsCyclotomicExtension S A B] {n : ℕ+}, n ∈ S → ∃ r, IsPrimitiveRoot r ↑n :=\n\n/-- Note: This does not hold for `n = ∞`. `f` being `C^∞` at `x` means that for every `n`, `f` is\n`C^n` on some neighborhood of `x`, but this neighborhood can depend on `n`. -/\ntheorem ∀ {𝕜 : Type u_1} [inst : NontriviallyNormedField 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E] {H : Type u_3} [inst_3 : TopologicalSpace H] {I : ModelWithCorners 𝕜 E H} {M : Type u_4}\n  [inst_4 : TopologicalSpace M] [inst_5 : ChartedSpace H M] [inst_6 : SmoothManifoldWithCorners I M] {E' : Type u_5}\n  [inst_7 : NormedAddCommGroup E'] [inst_8 : NormedSpace 𝕜 E'] {H' : Type u_6} [inst_9 : TopologicalSpace H']\n  {I' : ModelWithCorners 𝕜 E' H'} {M' : Type u_7} [inst_10 : TopologicalSpace M'] [inst_11 : ChartedSpace H' M']\n  [inst_12 : SmoothManifoldWithCorners I' M'] {f : M → M'} {x : M} {n : ℕ},\n  ContMDiffAt I I' (↑n) f x ↔ ∀ᶠ (x' : M) in nhds x, ContMDiffAt I I' (↑n) f x' :=\n\n/-- If `f` is continuous on the circle `|z - c| = R`, `R > 0`, the `‖f z‖` is less than or equal to\n`C : ℝ` on this circle, and this norm is strictly less than `C` at some point `z` of the circle,\nthen `‖∮ z in C(c, R), f z‖ < 2 * π * R * C`. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {f : ℂ → E} {c : ℂ} {R C : ℝ},\n  0 < R →\n    ContinuousOn f (Metric.sphere c R) →\n      (∀ (z : ℂ), z ∈ Metric.sphere c R → ‖f z‖ ≤ C) →\n        (∃ z, z ∈ Metric.sphere c R ∧ ‖f z‖ < C) → ‖∮ (z : ℂ) in C(c, R), f z‖ < 2 * Real.pi * R * C :=\n\n/-- If `n < 0` and `|w - c| = |R|`, then `(z - w) ^ n` is not circle integrable on the circle with\ncenter `c` and radius `|R|`, so the integral `∮ z in C(c, R), (z - w) ^ n` is equal to zero. -/\ntheorem ∀ {n : ℤ} {c w : ℂ} {R : ℝ}, n < 0 → w ∈ Metric.sphere c |R| → (∮ (z : ℂ) in C(c, R), (z - w) ^ n) = 0 :=\n\n/-- Linear lower bound for `f (x + n)` on unit interval -/\ntheorem ∀ {f : ℝ → ℝ} {x : ℝ} {n : ℕ},\n  ConvexOn ℝ (Set.Ioi 0) f →\n    (∀ {y : ℝ}, 0 < y → f (y + 1) = f y + Real.log y) → 2 ≤ n → 0 < x → f ↑n + x * Real.log (↑n - 1) ≤ f (↑n + x) :=\n\n/-- The proposition that `n` is not zero. -/\ntheorem ∀ {R : Type u_1} [inst : Zero R] {n : R} [self : NeZero n], n ≠ 0 :=\n\n/-- Linear upper bound for `f (x + n)` on unit interval -/\ntheorem ∀ {f : ℝ → ℝ} {x : ℝ} {n : ℕ},\n  ConvexOn ℝ (Set.Ioi 0) f →\n    (∀ {y : ℝ}, 0 < y → f (y + 1) = f y + Real.log y) → n ≠ 0 → 0 < x → x ≤ 1 → f (↑n + x) ≤ f ↑n + x * Real.log ↑n :=\n\n/-- The function `λ z, (z - w) ^ n`, `n : ℤ`, is circle integrable on the circle with center `c` and\nradius `|R|` if and only if `R = 0` or `0 ≤ n`, or `w` does not belong to this circle. -/\ntheorem ∀ {c w : ℂ} {R : ℝ} {n : ℤ}, CircleIntegrable (fun z => (z - w) ^ n) c R ↔ R = 0 ∨ 0 ≤ n ∨ ¬w ∈ Metric.sphere c |R| :=\n\n/-- If the sequence with `n`-th term the the sup norm of `λ x, f (x + n)` on the interval `Icc 0 1`,\nfor `n ∈ ℤ`, is summable, then `f` is integrable on `ℝ`. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] {f : C(ℝ, E)},\n  (Summable fun n => ‖ContinuousMap.restrict (Set.Icc 0 1) (ContinuousMap.comp f (ContinuousMap.addRight ↑n))‖) →\n    MeasureTheory.Integrable ↑f :=\n\n/-- If `f : ℂ → E` is continuous the closed annulus `r ≤ ‖z - c‖ ≤ R`, `0 < r ≤ R`, and is complex\ndifferentiable at all but countably many points of its interior, then the integrals of\n`f z / (z - c)` (formally, `(z - c)⁻¹ • f z`) over the circles `‖z - c‖ = r` and `‖z - c‖ = R` are\nequal to each other. -/\ntheorem ∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {c : ℂ} {r R : ℝ},\n  0 < r →\n    r ≤ R →\n      ∀ {f : ℂ → E} {s : Set ℂ},\n        Set.Countable s →\n          ContinuousOn f (Metric.closedBall c R \\ Metric.ball c r) →\n            (∀ (z : ℂ), z ∈ (Metric.ball c R \\ Metric.closedBall c r) \\ s → DifferentiableAt ℂ f z) →\n              (∮ (z : ℂ) in C(c, R), (z - c)⁻¹ • f z) = ∮ (z : ℂ) in C(c, r), (z - c)⁻¹ • f z :=\n\n/-- The minimal polynomial of a primitive `n`-th root of unity `μ` divides `cyclotomic n ℤ`. -/\ntheorem ∀ {n : ℕ} {K : Type u_1} [inst : Field K] {μ : K},\n  IsPrimitiveRoot μ n → 0 < n → ∀ [inst_1 : CharZero K], minpoly ℤ μ ∣ Polynomial.cyclotomic n ℤ :=\n\n/-- Multiplication by `n` is a polynomial function. -/\ntheorem ∀ (p : ℕ) [hp : Fact (Nat.Prime p)] (n : ℕ), WittVector.IsPoly p fun R _Rcr x => x * ↑n :=\n\n/-- For a real `r > 1` we have `n = o(r ^ n)` as `n → ∞`. -/\ntheorem ∀ {R : Type u_1} [inst : NormedRing R] {r : ℝ}, 1 < r → Nat.cast =o[Filter.atTop] fun n => r ^ n :=\n\n/-- `zeta n A B` is a primitive `n`-th root of unity. -/\ntheorem ∀ (n : ℕ+) (A : Type w) (B : Type z) [inst : CommRing A] [inst_1 : CommRing B] [inst_2 : Algebra A B]\n  [inst_3 : IsCyclotomicExtension {n} A B], IsPrimitiveRoot (IsCyclotomicExtension.zeta n A B) ↑n :=\n\n/-- The **Schwarz Lemma**: if `f : ℂ → ℂ` sends an open disk of positive radius to itself and the\ncenter of this disk to itself, then the absolute value of the derivative of `f` at the center of\nthis disk is at most `1`. -/\ntheorem ∀ {f : ℂ → ℂ} {c : ℂ} {R : ℝ},\n  DifferentiableOn ℂ f (Metric.ball c R) →\n    Set.MapsTo f (Metric.ball c R) (Metric.ball c R) → f c = c → 0 < R → ↑Complex.abs (deriv f c) ≤ 1 :=\n\n/-- **Removable singularity** theorem: if a function `f : ℂ → E` is complex differentiable on a\npunctured neighborhood of `c` and $f(z) - f(c)=o((z-c)^{-1})$, then `f` has a limit at `c`. -/\ntheorem ∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {f : ℂ → E} {c : ℂ},\n  (∀ᶠ (z : ℂ) in nhdsWithin c {c}ᶜ, DifferentiableAt ℂ f z) →\n    ((fun z => f z - f c) =o[nhdsWithin c {c}ᶜ] fun z => (z - c)⁻¹) →\n      Filter.Tendsto f (nhdsWithin c {c}ᶜ) (nhds (limUnder (nhdsWithin c {c}ᶜ) f)) :=\n\n/-- Let `n` be a positive integer, and let `f_n(z) = n + (n - 1)z + (n - 2)z^2 + ⋯ + z^(n - 1)`. Prove that `f_n` has no roots in the closed unit disk `{z ∈ ℂ: |z| ≤ 1}`. -/\ntheorem", "choices": ["∀ (n : ℕ), 0 < n → ∀ (z : ℂ), Complex.abs z ≤ 1 → ¬IsRoot (Polynomial.of_finsupp (Finset.sum (Finset.range n) (λ (i : ℕ), Finsupp.single (n - 1 - i) (↑n - ↑i)))) z ", "∀ (n : ℕ) (hn : n > 0), ∀ (z : ℂ), ↑Complex.abs z ≤ 1 → Polynomial.eval z (Polynomial.sum (finset.range n.succ) (λ (i : ℕ), Polynomial.C (↑n - ↑i) * Polynomial.X ^ i)) ≠ 0 ", "∀ {n : ℕ}, 0 < n → ∀ (z : ℂ), ↑Complex.abs z ≤ 1 → ¬Polynomial.IsRoot (Polynomial.monomial n 1 - Finset.sum (Finset.range n) fun k => Polynomial.monomial k (↑↑n - ↑k)) z ", "∀ {n : ℕ}, 0 < n → ∀ (z : ℂ), Complex.abs z ≤ 1 → ¬Polynomial.isRoot (Polynomial.iteratedDeriv (Polynomial.monomial n 1) n) z ", "∀ {n : ℕ},\n  0 < n →\n    ∀ z : ℂ, z ∈ Metric.ClosedBall 0 1 → ¬Polynomial.isRoot (Polynomial.monomial (n - 1) 1 - Finset.sum (Finset.range n) Polynomial.C) z ", "∀ {n : ℕ}, 0 < n → ∀ (z : ℂ), Complex.abs z ≤ 1 → ¬Polynomial.root (Finset.sum (Finset.range n) (fun k => Polynomial.C (↑n - ↑k) * (Polynomial.X ^ k))) z ", "∀ (n : ℕ), 0 < n → ∀ (z : ℂ), Metric.ClosedBall 0 1 z → IsPrimitiveRoot (f_n n z) ↑n ", "∀ (n : ℕ), n > 0 → ∀ (z : ℂ), Complex.abs z ≤ 1 → ¬(polynomial.eval z (polynomial.Chebyshev.T (ℂ) n) = 0) ", "∀ {n : ℕ}, 0 < n → ∀ (z : ℂ), ↑Complex.abs z ≤ 1 → ¬Polynomial.IsRoot (Polynomial.Chebyshev.T ℂ n) z ", "∀ {n : ℕ}, 0 < n → ∀ (z : ℂ), z ∈ Metric.closed_ball 0 1 → Polynomial.eval z (finset.sum (finset.range n) (λ (i : ℕ), (n - i) • Polynomial.X ^ i)) ≠ 0 "]}
{"docString": "Suppose that `f(x) = Σ c_i x^i` is a power series for which each coefficient `c_i` is 0 or 1. Show that if `f(2/3) = 3/2`, then `f(1/2)` must be irrational.", "prompts": "[{\"theorem\":\n  \"∀ {𝕜 : Type u_1} {E : Type u_2} {F : Type u_3} [inst : NontriviallyNormedField 𝕜] [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] {f : E → F}\\n  {p : FormalMultilinearSeries 𝕜 E F} {x : E} {r : ENNReal},\\n  HasFPowerSeriesOnBall f p x r → ∀ (y : E), HasFPowerSeriesOnBall (fun z => f (z - y)) p (x + y) r\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a function `f` has a power series `p` around `x`, then the function `z ↦ f (z - y)` has the\\nsame power series around `x + y`. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {f : ℂ → E} {c : ℂ} {R : ℝ} {w : ℂ},\\n  CircleIntegrable f c R →\\n    ↑Complex.abs w < R →\\n      HasSum (fun n => ∮ (z : ℂ) in C(c, R), (w / (z - c)) ^ n • (z - c)⁻¹ • f z)\\n        (∮ (z : ℂ) in C(c, R), (z - (c + w))⁻¹ • f z)\",\n  \"isProp\": true,\n  \"docString\":\n  \"For any circle integrable function `f`, the power series `cauchyPowerSeries f c R` multiplied\\nby `2πI` converges to the integral `∮ z in C(c, R), (z - w)⁻¹ • f z` on the open disc\\n`Metric.ball c R`. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {f : ℂ → E} {c : ℂ} {R : ℝ} {w : ℂ},\\n  CircleIntegrable f c R →\\n    ↑Complex.abs w < R →\\n      HasSum (fun n => ↑(cauchyPowerSeries f c R n) fun x => w)\\n        ((2 * ↑Real.pi * Complex.I)⁻¹ • ∮ (z : ℂ) in C(c, R), (z - (c + w))⁻¹ • f z)\",\n  \"isProp\": true,\n  \"docString\":\n  \"For any circle integrable function `f`, the power series `cauchyPowerSeries f c R`, `R > 0`,\\nconverges to the Cauchy integral `(2 * π * I : ℂ)⁻¹ • ∮ z in C(c, R), (z - w)⁻¹ • f z` on the open\\ndisc `Metric.ball c R`. \"},\n {\"theorem\":\n  \"∀ {R : Type u_1} [inst : Semiring R] (φ : PowerSeries R), IsUnit φ → IsUnit (↑(PowerSeries.constantCoeff R) φ)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a formal power series is invertible, then so is its constant coefficient.\"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {G : Type u_1} [inst : TopologicalSpace G] [inst_1 : AddCommGroup G] [inst_2 : TopologicalAddGroup G]\\n  {f : α → G}, Summable f → Filter.Tendsto f Filter.cofinite (nhds 0)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Series divergence test: if `f` is a convergent series, then `f x` tends to zero along\\n`cofinite`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : PseudoMetricSpace α] (C : ℝ) {f : ℕ → α},\\n  (∀ (n : ℕ), dist (f n) (f (n + 1)) ≤ C / 2 / 2 ^ n) → CauchySeq f\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `dist (f n) (f (n+1))` is bounded by `(C / 2) / 2^n`, then `f` is a Cauchy sequence. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {E : Type u_2} {F : Type u_3} [inst : NontriviallyNormedField 𝕜] [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] {f : E → F}\\n  {p : FormalMultilinearSeries 𝕜 E F} {x : E},\\n  HasFPowerSeriesAt f p x →\\n    (fun y => f y.fst - f y.snd - ↑(p 1) fun x => y.fst - y.snd) =O[nhds (x, x)] fun y => ‖y - (x, x)‖ * ‖y.fst - y.snd‖\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` has formal power series `∑ n, pₙ` at `x`, then\\n`f y - f z - p 1 (fun _ ↦ y - z) = O(‖(y, z) - (x, x)‖ * ‖y - z‖)` as `(y, z) → (x, x)`.\\nIn particular, `f` is strictly differentiable at `x`. \"},\n {\"theorem\":\n  \"∀ {R : Type u_1} [inst : Semiring R] {φ ψ : PowerSeries R},\\n  φ = ψ ↔ ∀ (n : ℕ), ↑(PowerSeries.coeff R n) φ = ↑(PowerSeries.coeff R n) ψ\",\n  \"isProp\": true,\n  \"docString\":\n  \"Two formal power series are equal if all their coefficients are equal.\"},\n {\"theorem\":\n  \"∀ {R : Type u_1} [inst : Ring R] (φ : PowerSeries R),\\n  φ - ↑(PowerSeries.C R) (↑(PowerSeries.constantCoeff R) φ) =\\n    (PowerSeries.mk fun p => ↑(PowerSeries.coeff R (p + 1)) φ) * PowerSeries.X\",\n  \"isProp\": true,\n  \"docString\":\n  \"Two ways of removing the constant coefficient of a power series are the same. \"},\n {\"theorem\":\n  \"∀ {σ : Type u_1} {R : Type u_2} [inst : Semiring R] (φ : MvPowerSeries σ R),\\n  IsUnit φ → IsUnit (↑(MvPowerSeries.constantCoeff σ R) φ)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a multivariate formal power series is invertible,\\nthen so is its constant coefficient.\"},\n {\"theorem\": \"riemannZeta 0 = -1 / 2\",\n  \"isProp\": true,\n  \"docString\": \"We have `ζ(0) = -1 / 2`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {E : Type u_2} {F : Type u_3} [inst : NontriviallyNormedField 𝕜] [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] {f : E → F}\\n  {p : FormalMultilinearSeries 𝕜 E F} {x : E} {r : ENNReal} {r' : NNReal},\\n  HasFPowerSeriesOnBall f p x r →\\n    ↑r' < r →\\n      ∃ a,\\n        a ∈ Set.Ioo 0 1 ∧\\n          ∃ C,\\n            C > 0 ∧\\n              ∀ (y : E),\\n                y ∈ Metric.ball 0 ↑r' → ∀ (n : ℕ), ‖f (x + y) - FormalMultilinearSeries.partialSum p n y‖ ≤ C * a ^ n\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a function admits a power series expansion, then it is exponentially close to the partial\\nsums of this power series on strict subdisks of the disk of convergence. \"},\n {\"theorem\":\n  \"∀ {R : Type u_1} [inst : Semiring R] {φ : PowerSeries R} (n : ℕ),\\n  ↑n < PowerSeries.order φ → ↑(PowerSeries.coeff R n) φ = 0\",\n  \"isProp\": true,\n  \"docString\":\n  \"The `n`th coefficient of a formal power series is `0` if `n` is strictly\\nsmaller than the order of the power series.\"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_2} [inst : NontriviallyNormedField 𝕜] {E : Type u_3} [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] {F : Type u_1} [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F]\\n  {p : FormalMultilinearSeries 𝕜 E F} {r : ENNReal} {f : E → F} {x : E} [inst_5 : CompleteSpace F],\\n  HasFPowerSeriesOnBall f p x r →\\n    HasFPowerSeriesOnBall (fderiv 𝕜 f)\\n      (ContinuousLinearMap.compFormalMultilinearSeries\\n        (↑(ContinuousLinearEquiv.mk (continuousMultilinearCurryFin1 𝕜 E F).toLinearEquiv))\\n        (FormalMultilinearSeries.changeOriginSeries p 1))\\n      x r\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a function has a power series on a ball, then so does its derivative. \"},\n {\"theorem\":\n  \"∀ {R : Type u_1} [inst : Semiring R] {φ : PowerSeries R} (h : (PowerSeries.order φ).Dom),\\n  ↑(PowerSeries.coeff R (Part.get (PowerSeries.order φ) h)) φ ≠ 0\",\n  \"isProp\": true,\n  \"docString\":\n  \"If the order of a formal power series is finite,\\nthen the coefficient indexed by the order is nonzero.\"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u} [inst : NontriviallyNormedField 𝕜] {E : Type uE} [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] {F : Type uF} [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] {f : E → F}\\n  {n : ℕ∞} {f' : E → FormalMultilinearSeries 𝕜 E F}, HasFTaylorSeriesUpTo n f f' → ContDiff 𝕜 n f\",\n  \"isProp\": true,\n  \"docString\": \"If `f` has a Taylor series up to `n`, then it is `C^n`. \"},\n {\"theorem\":\n  \"∀ {R : Type u_1} [inst : Semiring R] [inst_1 : Nontrivial R], PowerSeries.order 1 = 0\",\n  \"isProp\": true,\n  \"docString\": \"The order of the formal power series `1` is `0`.\"},\n {\"theorem\":\n  \"∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {f : ℂ → E},\\n  Differentiable ℂ f → ∀ (z : ℂ) {R : NNReal}, 0 < R → HasFPowerSeriesOnBall f (cauchyPowerSeries f z ↑R) z ⊤\",\n  \"isProp\": true,\n  \"docString\":\n  \"When `f : ℂ → E` is differentiable, the `cauchyPowerSeries f z R` represents `f` as a power\\nseries centered at `z` in the entirety of `ℂ`, regardless of `R : ℝ≥0`, with `0 < R`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_2} {𝕜₂ : Type u_3} {E : Type u_4} {F : Type u_5} {𝓕 : Type u_1} [inst : SeminormedAddCommGroup E]\\n  [inst_1 : SeminormedAddCommGroup F] [inst_2 : NontriviallyNormedField 𝕜] [inst_3 : NontriviallyNormedField 𝕜₂]\\n  [inst_4 : NormedSpace 𝕜 E] [inst_5 : NormedSpace 𝕜₂ F] {σ₁₂ : 𝕜 →+* 𝕜₂} [inst_6 : SemilinearMapClass 𝓕 σ₁₂ E F]\\n  (f : 𝓕), Continuous ↑f → ∀ {x : E}, ‖x‖ = 0 → ‖↑f x‖ = 0\",\n  \"isProp\": true,\n  \"docString\": \"If `‖x‖ = 0` and `f` is continuous then `‖f x‖ = 0`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {E : Type u_2} {F : Type u_3} [inst : NontriviallyNormedField 𝕜] [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] {f : E → F}\\n  {p : FormalMultilinearSeries 𝕜 E F} {x : E} {r : ENNReal} {r' : NNReal},\\n  HasFPowerSeriesOnBall f p x r →\\n    ↑r' < r →\\n      TendstoUniformlyOn (fun n y => FormalMultilinearSeries.partialSum p n (y - x)) f Filter.atTop (Metric.ball x ↑r')\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a function admits a power series expansion at `x`, then it is the uniform limit of the\\npartial sums of this power series on strict subdisks of the disk of convergence, i.e., `f y`\\nis the uniform limit of `p.partialSum n (y - x)` there. \"}]\n", "prompt_cons": "/-- If a function `f` has a power series `p` around `x`, then the function `z ↦ f (z - y)` has the\nsame power series around `x + y`. -/\ntheorem ∀ {𝕜 : Type u_1} {E : Type u_2} {F : Type u_3} [inst : NontriviallyNormedField 𝕜] [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] {f : E → F}\n  {p : FormalMultilinearSeries 𝕜 E F} {x : E} {r : ENNReal},\n  HasFPowerSeriesOnBall f p x r → ∀ (y : E), HasFPowerSeriesOnBall (fun z => f (z - y)) p (x + y) r :=\n\n/-- For any circle integrable function `f`, the power series `cauchyPowerSeries f c R` multiplied\nby `2πI` converges to the integral `∮ z in C(c, R), (z - w)⁻¹ • f z` on the open disc\n`Metric.ball c R`. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {f : ℂ → E} {c : ℂ} {R : ℝ} {w : ℂ},\n  CircleIntegrable f c R →\n    ↑Complex.abs w < R →\n      HasSum (fun n => ∮ (z : ℂ) in C(c, R), (w / (z - c)) ^ n • (z - c)⁻¹ • f z)\n        (∮ (z : ℂ) in C(c, R), (z - (c + w))⁻¹ • f z) :=\n\n/-- For any circle integrable function `f`, the power series `cauchyPowerSeries f c R`, `R > 0`,\nconverges to the Cauchy integral `(2 * π * I : ℂ)⁻¹ • ∮ z in C(c, R), (z - w)⁻¹ • f z` on the open\ndisc `Metric.ball c R`. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {f : ℂ → E} {c : ℂ} {R : ℝ} {w : ℂ},\n  CircleIntegrable f c R →\n    ↑Complex.abs w < R →\n      HasSum (fun n => ↑(cauchyPowerSeries f c R n) fun x => w)\n        ((2 * ↑Real.pi * Complex.I)⁻¹ • ∮ (z : ℂ) in C(c, R), (z - (c + w))⁻¹ • f z) :=\n\n/-- If a formal power series is invertible, then so is its constant coefficient. -/\ntheorem ∀ {R : Type u_1} [inst : Semiring R] (φ : PowerSeries R), IsUnit φ → IsUnit (↑(PowerSeries.constantCoeff R) φ) :=\n\n/-- Series divergence test: if `f` is a convergent series, then `f x` tends to zero along\n`cofinite`. -/\ntheorem ∀ {α : Type u_2} {G : Type u_1} [inst : TopologicalSpace G] [inst_1 : AddCommGroup G] [inst_2 : TopologicalAddGroup G]\n  {f : α → G}, Summable f → Filter.Tendsto f Filter.cofinite (nhds 0) :=\n\n/-- If `dist (f n) (f (n+1))` is bounded by `(C / 2) / 2^n`, then `f` is a Cauchy sequence. -/\ntheorem ∀ {α : Type u_1} [inst : PseudoMetricSpace α] (C : ℝ) {f : ℕ → α},\n  (∀ (n : ℕ), dist (f n) (f (n + 1)) ≤ C / 2 / 2 ^ n) → CauchySeq f :=\n\n/-- If `f` has formal power series `∑ n, pₙ` at `x`, then\n`f y - f z - p 1 (fun _ ↦ y - z) = O(‖(y, z) - (x, x)‖ * ‖y - z‖)` as `(y, z) → (x, x)`.\nIn particular, `f` is strictly differentiable at `x`. -/\ntheorem ∀ {𝕜 : Type u_1} {E : Type u_2} {F : Type u_3} [inst : NontriviallyNormedField 𝕜] [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] {f : E → F}\n  {p : FormalMultilinearSeries 𝕜 E F} {x : E},\n  HasFPowerSeriesAt f p x →\n    (fun y => f y.fst - f y.snd - ↑(p 1) fun x => y.fst - y.snd) =O[nhds (x, x)] fun y => ‖y - (x, x)‖ * ‖y.fst - y.snd‖ :=\n\n/-- Two formal power series are equal if all their coefficients are equal. -/\ntheorem ∀ {R : Type u_1} [inst : Semiring R] {φ ψ : PowerSeries R},\n  φ = ψ ↔ ∀ (n : ℕ), ↑(PowerSeries.coeff R n) φ = ↑(PowerSeries.coeff R n) ψ :=\n\n/-- Two ways of removing the constant coefficient of a power series are the same. -/\ntheorem ∀ {R : Type u_1} [inst : Ring R] (φ : PowerSeries R),\n  φ - ↑(PowerSeries.C R) (↑(PowerSeries.constantCoeff R) φ) =\n    (PowerSeries.mk fun p => ↑(PowerSeries.coeff R (p + 1)) φ) * PowerSeries.X :=\n\n/-- If a multivariate formal power series is invertible,\nthen so is its constant coefficient. -/\ntheorem ∀ {σ : Type u_1} {R : Type u_2} [inst : Semiring R] (φ : MvPowerSeries σ R),\n  IsUnit φ → IsUnit (↑(MvPowerSeries.constantCoeff σ R) φ) :=\n\n/-- We have `ζ(0) = -1 / 2`. -/\ntheorem riemannZeta 0 = -1 / 2 :=\n\n/-- If a function admits a power series expansion, then it is exponentially close to the partial\nsums of this power series on strict subdisks of the disk of convergence. -/\ntheorem ∀ {𝕜 : Type u_1} {E : Type u_2} {F : Type u_3} [inst : NontriviallyNormedField 𝕜] [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] {f : E → F}\n  {p : FormalMultilinearSeries 𝕜 E F} {x : E} {r : ENNReal} {r' : NNReal},\n  HasFPowerSeriesOnBall f p x r →\n    ↑r' < r →\n      ∃ a,\n        a ∈ Set.Ioo 0 1 ∧\n          ∃ C,\n            C > 0 ∧\n              ∀ (y : E),\n                y ∈ Metric.ball 0 ↑r' → ∀ (n : ℕ), ‖f (x + y) - FormalMultilinearSeries.partialSum p n y‖ ≤ C * a ^ n :=\n\n/-- The `n`th coefficient of a formal power series is `0` if `n` is strictly\nsmaller than the order of the power series. -/\ntheorem ∀ {R : Type u_1} [inst : Semiring R] {φ : PowerSeries R} (n : ℕ),\n  ↑n < PowerSeries.order φ → ↑(PowerSeries.coeff R n) φ = 0 :=\n\n/-- If a function has a power series on a ball, then so does its derivative. -/\ntheorem ∀ {𝕜 : Type u_2} [inst : NontriviallyNormedField 𝕜] {E : Type u_3} [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E] {F : Type u_1} [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F]\n  {p : FormalMultilinearSeries 𝕜 E F} {r : ENNReal} {f : E → F} {x : E} [inst_5 : CompleteSpace F],\n  HasFPowerSeriesOnBall f p x r →\n    HasFPowerSeriesOnBall (fderiv 𝕜 f)\n      (ContinuousLinearMap.compFormalMultilinearSeries\n        (↑(ContinuousLinearEquiv.mk (continuousMultilinearCurryFin1 𝕜 E F).toLinearEquiv))\n        (FormalMultilinearSeries.changeOriginSeries p 1))\n      x r :=\n\n/-- If the order of a formal power series is finite,\nthen the coefficient indexed by the order is nonzero. -/\ntheorem ∀ {R : Type u_1} [inst : Semiring R] {φ : PowerSeries R} (h : (PowerSeries.order φ).Dom),\n  ↑(PowerSeries.coeff R (Part.get (PowerSeries.order φ) h)) φ ≠ 0 :=\n\n/-- If `f` has a Taylor series up to `n`, then it is `C^n`. -/\ntheorem ∀ {𝕜 : Type u} [inst : NontriviallyNormedField 𝕜] {E : Type uE} [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E] {F : Type uF} [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] {f : E → F}\n  {n : ℕ∞} {f' : E → FormalMultilinearSeries 𝕜 E F}, HasFTaylorSeriesUpTo n f f' → ContDiff 𝕜 n f :=\n\n/-- The order of the formal power series `1` is `0`. -/\ntheorem ∀ {R : Type u_1} [inst : Semiring R] [inst_1 : Nontrivial R], PowerSeries.order 1 = 0 :=\n\n/-- When `f : ℂ → E` is differentiable, the `cauchyPowerSeries f z R` represents `f` as a power\nseries centered at `z` in the entirety of `ℂ`, regardless of `R : ℝ≥0`, with `0 < R`. -/\ntheorem ∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {f : ℂ → E},\n  Differentiable ℂ f → ∀ (z : ℂ) {R : NNReal}, 0 < R → HasFPowerSeriesOnBall f (cauchyPowerSeries f z ↑R) z ⊤ :=\n\n/-- If `‖x‖ = 0` and `f` is continuous then `‖f x‖ = 0`. -/\ntheorem ∀ {𝕜 : Type u_2} {𝕜₂ : Type u_3} {E : Type u_4} {F : Type u_5} {𝓕 : Type u_1} [inst : SeminormedAddCommGroup E]\n  [inst_1 : SeminormedAddCommGroup F] [inst_2 : NontriviallyNormedField 𝕜] [inst_3 : NontriviallyNormedField 𝕜₂]\n  [inst_4 : NormedSpace 𝕜 E] [inst_5 : NormedSpace 𝕜₂ F] {σ₁₂ : 𝕜 →+* 𝕜₂} [inst_6 : SemilinearMapClass 𝓕 σ₁₂ E F]\n  (f : 𝓕), Continuous ↑f → ∀ {x : E}, ‖x‖ = 0 → ‖↑f x‖ = 0 :=\n\n/-- If a function admits a power series expansion at `x`, then it is the uniform limit of the\npartial sums of this power series on strict subdisks of the disk of convergence, i.e., `f y`\nis the uniform limit of `p.partialSum n (y - x)` there. -/\ntheorem ∀ {𝕜 : Type u_1} {E : Type u_2} {F : Type u_3} [inst : NontriviallyNormedField 𝕜] [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] {f : E → F}\n  {p : FormalMultilinearSeries 𝕜 E F} {x : E} {r : ENNReal} {r' : NNReal},\n  HasFPowerSeriesOnBall f p x r →\n    ↑r' < r →\n      TendstoUniformlyOn (fun n y => FormalMultilinearSeries.partialSum p n (y - x)) f Filter.atTop (Metric.ball x ↑r') :=\n\n/-- Suppose that `f(x) = Σ c_i x^i` is a power series for which each coefficient `c_i` is 0 or 1. Show that if `f(2/3) = 3/2`, then `f(1/2)` must be irrational. -/\ntheorem", "choices": ["forall {R : Type u_1} [inst : CommRing R] {φ : PowerSeries R} (h : ∀ (n : ℕ), ↑(PowerSeries.coeff R n) φ = 0 ∨ ↑(PowerSeries.coeff R n) φ = 1),\n  φ.eval (2 / 3) = 3 / 2 → ¬(φ.eval (1 / 2)).is_rat ", "forall (f : ℕ → ℚ) (h : ∀ n, f n = 0 ∨ f n = 1),\n  ((∑' (n : ℕ), f n * (2/3)^n) = 3/2) → Irrational (∑' (n : ℕ), f n * (1/2)^n) ", "¬∃ (q : ℚ), ∀ {R : ℝ} [inst : Semiring R] [inst_1 : Nontrivial R] {φ : PowerSeries R},\n  (∀ (n : ℕ), ↑(PowerSeries.coeff R n) φ = 0 ∨ ↑(PowerSeries.coeff R n) φ = 1) →\n    evalPowerSeries (2 / 3) φ = 3 / 2 →\n      evalPowerSeries (1 / 2) φ = ↑q ", "∀ {R : Type u_1} [inst : Semiring R] (p : PowerSeries R),\n  (∀ (n : ℕ), PowerSeries.coeff R n p = 0 ∨ PowerSeries.coeff R n p = 1) →\n    p.eval (2 / 3) = 3 / 2 → Irrational (p.eval (1 / 2)) ", "∀ {R : Type u_1} [inst : Field R] [inst_1 : CharZero R] {f : PowerSeries R},\n  (∀ (n : ℕ), ↑(PowerSeries.coeff R n) f = 0 ∨ ↑(PowerSeries.coeff R n) f = 1) →\n    f (2 / 3) = 3 / 2 → Irrational (f (1 / 2)) ", "irrationalFormalPowerSeriesSumOneHalf :\n  ∀ {R : Type u_1} [inst : CommRing R] {φ : PowerSeries R},\n  (∀ (n : ℕ), ↑(PowerSeries.coeff R n) φ = 0 ∨ ↑(PowerSeries.coeff R n) φ = 1) →\n  φ.eval (2 / 3) = 3 / 2 → Irrational (φ.eval (1 / 2)) ", "∀ (f : ℕ → ℚ) (hf : ∀ i, f i = 0 ∨ f i = 1),\n  (HasSum (fun i => f i * (2 / 3) ^ i) (3 / 2)) → Irrational (HasSum (fun i => f i * (1 / 2) ^ i)) ", "forall {α : Type u_1} [inst : DiscreteLinearOrderedField α] {f : ℕ → α},\n  (∀ n, f n = 0 ∨ f n = 1) →\n    (∀ x, HasSum (fun n => f n * x ^ n) 3 / 2) →\n      Irrational (HasSum (fun n => f n * (1 / 2) ^ n)) ", "∀ {R : Type u_1} [inst : OrderedRing R] [archimedean R] (f : PowerSeries R),\n  (∀ (n : ℕ), ↑(PowerSeries.coeff R n) f = 0 ∨ ↑(PowerSeries.coeff R n) f = 1) →\n    f (2/3) = 3/2 → Irrational (f (1/2)) ", "∀ {R : Type u_1} [inst : Field R] (f : PowerSeries R),\n  (∀ (n : ℕ), ↑(PowerSeries.coeff R n) f = 0 ∨ ↑(PowerSeries.coeff R n) f = 1) →\n  f (2 / 3) = 3 / 2 → Irrational (f (1 / 2)) "]}
{"docString": "Prove that for each positive integer `n`, the number `10^(10^(10^n)) + 10^(10^n) + 10^n - 1` is not prime.", "prompts": "[{\"theorem\":\n  \"∀ {n : ℕ}, n ≠ 0 → ∀ (p : ℕ), p ≠ 1 → ∃ e n', ¬p ∣ n' ∧ n = p ^ e * n'\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `n` is a nonzero natural number and `p ≠ 1`, then there are natural numbers `e`\\nand `n'` such that `n'` is not divisible by `p` and `n = p^e * n'`. \"},\n {\"theorem\":\n  \"∀ {R : Type u_1} [inst : Zero R] {n : R} [self : NeZero n], n ≠ 0\",\n  \"isProp\": true,\n  \"docString\": \"The proposition that `n` is not zero. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [self : LinearOrderedSemifield α] (n : ℕ) (a : α),\\n  LinearOrderedSemifield.zpow (Int.ofNat (Nat.succ n)) a = a * LinearOrderedSemifield.zpow (Int.ofNat n) a\",\n  \"isProp\": true,\n  \"docString\": \"`a ^ (n + 1) = a * a ^ n` \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [self : LinearOrderedCommGroupWithZero α] (n : ℕ) (a : α),\\n  LinearOrderedCommGroupWithZero.zpow (Int.negSucc n) a = (LinearOrderedCommGroupWithZero.zpow (↑(Nat.succ n)) a)⁻¹\",\n  \"isProp\": true,\n  \"docString\": \"`a ^ -(n + 1) = (a ^ (n + 1))⁻¹` \"},\n {\"theorem\": \"∀ {n : ℕ}, n % 4 = 3 → (-1) ^ (n / 2) = -1\",\n  \"isProp\": true,\n  \"docString\": \"If `n % 4 = 3`, then `(-1)^(n/2) = -1`. \"},\n {\"theorem\": \"∀ {b m d : ℕ}, d ∈ Nat.digits (b + 2) m → d < b + 2\",\n  \"isProp\": true,\n  \"docString\":\n  \"The digits in the base b+2 expansion of n are all less than b+2 \"},\n {\"theorem\": \"∀ {b m d : ℕ}, 1 < b → d ∈ Nat.digits b m → d < b\",\n  \"isProp\": true,\n  \"docString\":\n  \"The digits in the base b expansion of n are all less than b, if b ≥ 2 \"},\n {\"theorem\": \"∀ {n : ℕ}, n % 4 = 1 → (-1) ^ (n / 2) = 1\",\n  \"isProp\": true,\n  \"docString\": \"If `n % 4 = 1`, then `(-1)^(n/2) = 1`. \"},\n {\"theorem\":\n  \"∀ {p : ℕ}, Nat.Prime p → ∀ (n : ℕ), Nat.totient (p ^ (n + 1)) = p ^ n * (p - 1)\",\n  \"isProp\": true,\n  \"docString\":\n  \"When `p` is prime, then the totient of `p ^ (n + 1)` is `p ^ n * (p - 1)` \"},\n {\"theorem\":\n  \"∀ (n : ℕ), (∑' (i : ℕ), if n ≤ i then 2⁻¹ ^ i else 0) = 2 * 2⁻¹ ^ n\",\n  \"isProp\": true,\n  \"docString\": \"The sum of `2⁻¹ ^ i` for `n ≤ i` equals `2 * 2⁻¹ ^ n`. \"},\n {\"theorem\": \"∀ {p n : ℕ}, Nat.Prime p → p ∣ n → IsSquare (-1) → p % 4 ≠ 3\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a prime `p` divides `n` such that `-1` is a square modulo `n`, then `p % 4 ≠ 3`. \"},\n {\"theorem\": \"Set.InjOn Nat.factorization {x | x ≠ 0}\",\n  \"isProp\": true,\n  \"docString\":\n  \"Every nonzero natural number has a unique prime factorization \"},\n {\"theorem\": \"∀ {n : ℕ}, ↑(Nat.factorial (n - 1)) = -1 → n ≠ 1 → Nat.Prime n\",\n  \"isProp\": true,\n  \"docString\":\n  \"For `n ≠ 1`, `(n-1)!` is congruent to `-1` modulo `n` only if n is prime. \"},\n {\"theorem\":\n  \"∀ {b : ℕ} {l : List ℕ}, (∀ (x : ℕ), x ∈ l → x < b + 2) → Nat.ofDigits (b + 2) l < (b + 2) ^ List.length l\",\n  \"isProp\": true,\n  \"docString\": \"an n-digit number in base b + 2 is less than (b + 2)^n \"},\n {\"theorem\": \"∀ {n : ℕ}, n ≠ 1 → (Nat.Prime n ↔ ↑(Nat.factorial (n - 1)) = -1)\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Wilson's Theorem**: For `n ≠ 1`, `(n-1)!` is congruent to `-1` modulo `n` iff n is prime. \"},\n {\"theorem\": \"∀ (n : ℕ), ∃ p, n ≤ p ∧ Nat.Prime p\",\n  \"isProp\": true,\n  \"docString\":\n  \"Euclid's theorem on the **infinitude of primes**.\\nHere given in the form: for every `n`, there exists a prime number `p ≥ n`. \"},\n {\"theorem\":\n  \"∀ {p n : ℕ}, 2 < n → p ≤ n → 2 * n < 3 * p → ↑(Nat.factorization (Nat.centralBinom n)) p = 0\",\n  \"isProp\": true,\n  \"docString\":\n  \"Primes greater than about `2 * n / 3` and less than `n` do not appear in the factorization of\\n`centralBinom n`. \"},\n {\"theorem\":\n  \"∀ {b : ℕ} {l : List ℕ}, 1 < b → (∀ (x : ℕ), x ∈ l → x < b) → Nat.ofDigits b l < b ^ List.length l\",\n  \"isProp\": true,\n  \"docString\": \"an n-digit number in base b is less than b^n if b > 1 \"},\n {\"theorem\":\n  \"∀ (p : ℕ) [hp : Fact (Nat.Prime p)] (n : ℕ), WittVector.IsPoly p fun R _Rcr x => x * ↑n\",\n  \"isProp\": true,\n  \"docString\": \"Multiplication by `n` is a polynomial function. \"},\n {\"theorem\":\n  \"∀ {p : ℕ}, Nat.Prime p → ∀ {n : ℕ}, 0 < n → Nat.totient (p ^ n) = p ^ (n - 1) * (p - 1)\",\n  \"isProp\": true,\n  \"docString\":\n  \"When `p` is prime, then the totient of `p ^ n` is `p ^ (n - 1) * (p - 1)` \"}]\n", "prompt_cons": "/-- If `n` is a nonzero natural number and `p ≠ 1`, then there are natural numbers `e`\nand `n'` such that `n'` is not divisible by `p` and `n = p^e * n'`. -/\ntheorem ∀ {n : ℕ}, n ≠ 0 → ∀ (p : ℕ), p ≠ 1 → ∃ e n', ¬p ∣ n' ∧ n = p ^ e * n' :=\n\n/-- The proposition that `n` is not zero. -/\ntheorem ∀ {R : Type u_1} [inst : Zero R] {n : R} [self : NeZero n], n ≠ 0 :=\n\n/-- `a ^ (n + 1) = a * a ^ n` -/\ntheorem ∀ {α : Type u_1} [self : LinearOrderedSemifield α] (n : ℕ) (a : α),\n  LinearOrderedSemifield.zpow (Int.ofNat (Nat.succ n)) a = a * LinearOrderedSemifield.zpow (Int.ofNat n) a :=\n\n/-- `a ^ -(n + 1) = (a ^ (n + 1))⁻¹` -/\ntheorem ∀ {α : Type u_1} [self : LinearOrderedCommGroupWithZero α] (n : ℕ) (a : α),\n  LinearOrderedCommGroupWithZero.zpow (Int.negSucc n) a = (LinearOrderedCommGroupWithZero.zpow (↑(Nat.succ n)) a)⁻¹ :=\n\n/-- If `n % 4 = 3`, then `(-1)^(n/2) = -1`. -/\ntheorem ∀ {n : ℕ}, n % 4 = 3 → (-1) ^ (n / 2) = -1 :=\n\n/-- The digits in the base b+2 expansion of n are all less than b+2 -/\ntheorem ∀ {b m d : ℕ}, d ∈ Nat.digits (b + 2) m → d < b + 2 :=\n\n/-- The digits in the base b expansion of n are all less than b, if b ≥ 2 -/\ntheorem ∀ {b m d : ℕ}, 1 < b → d ∈ Nat.digits b m → d < b :=\n\n/-- If `n % 4 = 1`, then `(-1)^(n/2) = 1`. -/\ntheorem ∀ {n : ℕ}, n % 4 = 1 → (-1) ^ (n / 2) = 1 :=\n\n/-- When `p` is prime, then the totient of `p ^ (n + 1)` is `p ^ n * (p - 1)` -/\ntheorem ∀ {p : ℕ}, Nat.Prime p → ∀ (n : ℕ), Nat.totient (p ^ (n + 1)) = p ^ n * (p - 1) :=\n\n/-- The sum of `2⁻¹ ^ i` for `n ≤ i` equals `2 * 2⁻¹ ^ n`. -/\ntheorem ∀ (n : ℕ), (∑' (i : ℕ), if n ≤ i then 2⁻¹ ^ i else 0) = 2 * 2⁻¹ ^ n :=\n\n/-- If a prime `p` divides `n` such that `-1` is a square modulo `n`, then `p % 4 ≠ 3`. -/\ntheorem ∀ {p n : ℕ}, Nat.Prime p → p ∣ n → IsSquare (-1) → p % 4 ≠ 3 :=\n\n/-- Every nonzero natural number has a unique prime factorization -/\ntheorem Set.InjOn Nat.factorization {x | x ≠ 0} :=\n\n/-- For `n ≠ 1`, `(n-1)!` is congruent to `-1` modulo `n` only if n is prime. -/\ntheorem ∀ {n : ℕ}, ↑(Nat.factorial (n - 1)) = -1 → n ≠ 1 → Nat.Prime n :=\n\n/-- an n-digit number in base b + 2 is less than (b + 2)^n -/\ntheorem ∀ {b : ℕ} {l : List ℕ}, (∀ (x : ℕ), x ∈ l → x < b + 2) → Nat.ofDigits (b + 2) l < (b + 2) ^ List.length l :=\n\n/-- **Wilson's Theorem**: For `n ≠ 1`, `(n-1)!` is congruent to `-1` modulo `n` iff n is prime. -/\ntheorem ∀ {n : ℕ}, n ≠ 1 → (Nat.Prime n ↔ ↑(Nat.factorial (n - 1)) = -1) :=\n\n/-- Euclid's theorem on the **infinitude of primes**.\nHere given in the form: for every `n`, there exists a prime number `p ≥ n`. -/\ntheorem ∀ (n : ℕ), ∃ p, n ≤ p ∧ Nat.Prime p :=\n\n/-- Primes greater than about `2 * n / 3` and less than `n` do not appear in the factorization of\n`centralBinom n`. -/\ntheorem ∀ {p n : ℕ}, 2 < n → p ≤ n → 2 * n < 3 * p → ↑(Nat.factorization (Nat.centralBinom n)) p = 0 :=\n\n/-- an n-digit number in base b is less than b^n if b > 1 -/\ntheorem ∀ {b : ℕ} {l : List ℕ}, 1 < b → (∀ (x : ℕ), x ∈ l → x < b) → Nat.ofDigits b l < b ^ List.length l :=\n\n/-- Multiplication by `n` is a polynomial function. -/\ntheorem ∀ (p : ℕ) [hp : Fact (Nat.Prime p)] (n : ℕ), WittVector.IsPoly p fun R _Rcr x => x * ↑n :=\n\n/-- When `p` is prime, then the totient of `p ^ n` is `p ^ (n - 1) * (p - 1)` -/\ntheorem ∀ {p : ℕ}, Nat.Prime p → ∀ {n : ℕ}, 0 < n → Nat.totient (p ^ n) = p ^ (n - 1) * (p - 1) :=\n\n/-- Prove that for each positive integer `n`, the number `10^(10^(10^n)) + 10^(10^n) + 10^n - 1` is not prime. -/\ntheorem", "choices": ["∀ (n : ℕ), (0 < n) → ¬Nat.Prime (10^(10^(10^n)) + 10^(10^n) + 10^n - 1) ", "∀ (n : ℕ), 0 < n → ¬Nat.Prime (10^(10^(10^n)) + 10^(10^n) + 10^n - 1) ", "∀ (n : ℕ), 0 < n → ¬ Nat.Prime (10 ^ (10 ^ (10 ^ n)) + 10 ^ (10 ^ n) + 10 ^ n - 1) ", "∀ (n : ℕ), 0 < n → ¬Nat.Prime (10^(10^(10^n)) + 10^(10^n) + 10^n - 1) ", "∀ (n : ℕ), 0 < n → ¬Nat.Prime (10 ^ (10 ^ (10 ^ n)) + 10 ^ (10 ^ n) + 10 ^ n - 1) ", "∀ {n : ℕ}, 0 < n → ¬ Nat.Prime (10 ^ (10 ^ (10 ^ n)) + 10 ^ (10 ^ n) + 10 ^ n - 1) ", "∀ (n : ℕ), 0 < n → ¬ Nat.Prime (10 ^ (10 ^ (10 ^ n)) + 10 ^ (10 ^ n) + 10 ^ n - 1) ", "∀ (n : ℕ), n > 0 → ¬ Nat.Prime (10^(10^(10^n)) + 10^(10^n) + 10^n - 1) ", "∀ (n : ℕ), n > 0 → ¬Nat.Prime (10^(10^(10^n)) + 10^(10^n) + 10^n - 1) ", "∀ (n : ℕ), 0 < n → ¬ Nat.Prime (10^(10^(10^n)) + 10^(10^n) + 10^n - 1) "]}
{"docString": "Prove that there exist infinitely many integers `n` such that `n, n + 1, n + 2` are each the sum of the squares of two integers.", "prompts": "[{\"theorem\": \"∀ {n : ℕ}, IsSquare (-1) → ∃ x y, n = x ^ 2 + y ^ 2\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `-1` is a square modulo the natural number `n`, then `n` is a sum of two squares. \"},\n {\"theorem\":\n  \"∀ {a b x y u v : ℕ}, a = x ^ 2 + y ^ 2 → b = u ^ 2 + v ^ 2 → ∃ r s, a * b = r ^ 2 + s ^ 2\",\n  \"isProp\": true,\n  \"docString\":\n  \"The set of natural numbers that are sums of two squares is closed under multiplication. \"},\n {\"theorem\":\n  \"∀ {n : ℕ}, (∃ x y, n = x ^ 2 + y ^ 2) ↔ ∃ a b, n = a ^ 2 * b ∧ IsSquare (-1)\",\n  \"isProp\": true,\n  \"docString\":\n  \"A natural number `n` is a sum of two squares if and only if `n = a^2 * b` with natural\\nnumbers `a` and `b` such that `-1` is a square modulo `b`. \"},\n {\"theorem\": \"∀ (n : ℕ), ∃ p, n ≤ p ∧ Nat.Prime p\",\n  \"isProp\": true,\n  \"docString\":\n  \"Euclid's theorem on the **infinitude of primes**.\\nHere given in the form: for every `n`, there exists a prime number `p ≥ n`. \"},\n {\"theorem\":\n  \"∀ {n x y : ℕ}, n = x ^ 2 + y ^ 2 → Nat.coprime x y → IsSquare (-1)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If the natural number `n` is a sum of two squares of coprime natural numbers, then\\n`-1` is a square modulo `n`. \"},\n {\"theorem\":\n  \"∀ {n : ℕ}, (∃ x y, n = x ^ 2 + y ^ 2) ↔ ∀ {q : ℕ}, Nat.Prime q → q % 4 = 3 → Even (padicValNat q n)\",\n  \"isProp\": true,\n  \"docString\":\n  \"A (positive) natural number `n` is a sum of two squares if and only if the exponent of\\nevery prime `q` such that `q % 4 = 3` in the prime factorization of `n` is even.\\n(The assumption `0 < n` is not present, since for `n = 0`, both sides are satisfied;\\nthe right hand side holds, since `padicValNat q 0 = 0` by definition.) \"},\n {\"theorem\": \"∀ (n : ℕ), 512 ≤ n → ∃ p, Nat.Prime p ∧ n < p ∧ p ≤ 2 * n\",\n  \"isProp\": true,\n  \"docString\":\n  \"Proves that Bertrand's postulate holds for all sufficiently large `n`.\\n\"},\n {\"theorem\": \"∀ {n x y : ℤ}, n = x ^ 2 + y ^ 2 → IsCoprime x y → IsSquare (-1)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If the integer `n` is a sum of two squares of coprime integers,\\nthen `-1` is a square modulo `n`. \"},\n {\"theorem\":\n  \"∀ {n : ℕ}, n ≠ 0 → ∀ (d : ℕ), ∃ᶠ (m : ℕ) in Filter.atTop, m ≡ d [MOD n]\",\n  \"isProp\": true,\n  \"docString\": \"Infinitely many natural numbers are equal to `d` mod `n`. \"},\n {\"theorem\":\n  \"∀ (n : ℕ), (∑' (i : ℕ), if n ≤ i then 2⁻¹ ^ i else 0) = 2 * 2⁻¹ ^ n\",\n  \"isProp\": true,\n  \"docString\": \"The sum of `2⁻¹ ^ i` for `n ≤ i` equals `2 * 2⁻¹ ^ n`. \"},\n {\"theorem\": \"∀ {n m : ℕ}, m * m < n → n < (m + 1) * (m + 1) → ¬∃ t, t * t = n\",\n  \"isProp\": true,\n  \"docString\": \"There are no perfect squares strictly between m² and (m+1)² \"},\n {\"theorem\":\n  \"∀ {ι : Type u_2} {M : Type u_1} [inst : AddCommMonoid M] {s : Finset ι} {f : ι → WithTop M},\\n  (Finset.sum s fun i => f i) = ⊤ ↔ ∃ i, i ∈ s ∧ f i = ⊤\",\n  \"isProp\": true,\n  \"docString\": \"A sum of numbers is infinite iff one of them is infinite \"},\n {\"theorem\":\n  \"∀ (a b c d x y z w : ℕ),\\n  Int.natAbs (↑a * ↑x - ↑b * ↑y - ↑c * ↑z - ↑d * ↑w) ^ 2 + Int.natAbs (↑a * ↑y + ↑b * ↑x + ↑c * ↑w - ↑d * ↑z) ^ 2 +\\n        Int.natAbs (↑a * ↑z - ↑b * ↑w + ↑c * ↑x + ↑d * ↑y) ^ 2 +\\n      Int.natAbs (↑a * ↑w + ↑b * ↑z - ↑c * ↑y + ↑d * ↑x) ^ 2 =\\n    (a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2) * (x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2)\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Euler's four-square identity**, a version for natural numbers. \"},\n {\"theorem\":\n  \"∀ {m n : ℕ}, Nat.coprime m n → IsSquare (-1) → IsSquare (-1) → IsSquare (-1)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `-1` is a square modulo coprime natural numbers `m` and `n`, then `-1` is also\\na square modulo `m*n`. \"},\n {\"theorem\": \"∀ (n : ℕ), Nat.choose n 2 = n * (n - 1) / 2\",\n  \"isProp\": true,\n  \"docString\": \"`choose n 2` is the `n`-th triangle number. \"},\n {\"theorem\":\n  \"∀ {x y z : ℤ},\\n  PythagoreanTriple x y z →\\n    (PythagoreanTriple x y z ↔\\n      ∃ k m n,\\n        (x = k * (m ^ 2 - n ^ 2) ∧ y = k * (2 * m * n) ∨ x = k * (2 * m * n) ∧ y = k * (m ^ 2 - n ^ 2)) ∧\\n          (z = k * (m ^ 2 + n ^ 2) ∨ z = -k * (m ^ 2 + n ^ 2)))\",\n  \"isProp\": true,\n  \"docString\": \"**Formula for Pythagorean Triples** \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : LinearOrderedField α] [inst_1 : Archimedean α] {x y : α}, 0 < x → y < 1 → ∃ n, y ^ n < x\",\n  \"isProp\": true,\n  \"docString\":\n  \"For any `y < 1` and any positive `x`, there exists `n : ℕ` with `y ^ n < x`. \"},\n {\"theorem\":\n  \"∀ {p : ℕ}, Nat.Prime p → ∃ a b c d, a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 = p\",\n  \"isProp\": true,\n  \"docString\":\n  \"Lagrange's **four squares theorem** for a prime number. Use `Nat.sum_four_squares` instead. \"},\n {\"theorem\": \"∀ {n : ℕ} (self : Composition n), List.sum self.blocks = n\",\n  \"isProp\": true,\n  \"docString\": \"Proof that `blocks` sums to `n`\"},\n {\"theorem\":\n  \"Filter.Tendsto (fun n => ↑n / (2 * ↑n + 1)) Filter.atTop (nhds (1 / 2))\",\n  \"isProp\": true,\n  \"docString\": \"The sequence `n / (2 * n + 1)` tends to `1/2` \"}]\n", "prompt_cons": "/-- If `-1` is a square modulo the natural number `n`, then `n` is a sum of two squares. -/\ntheorem ∀ {n : ℕ}, IsSquare (-1) → ∃ x y, n = x ^ 2 + y ^ 2 :=\n\n/-- The set of natural numbers that are sums of two squares is closed under multiplication. -/\ntheorem ∀ {a b x y u v : ℕ}, a = x ^ 2 + y ^ 2 → b = u ^ 2 + v ^ 2 → ∃ r s, a * b = r ^ 2 + s ^ 2 :=\n\n/-- A natural number `n` is a sum of two squares if and only if `n = a^2 * b` with natural\nnumbers `a` and `b` such that `-1` is a square modulo `b`. -/\ntheorem ∀ {n : ℕ}, (∃ x y, n = x ^ 2 + y ^ 2) ↔ ∃ a b, n = a ^ 2 * b ∧ IsSquare (-1) :=\n\n/-- Euclid's theorem on the **infinitude of primes**.\nHere given in the form: for every `n`, there exists a prime number `p ≥ n`. -/\ntheorem ∀ (n : ℕ), ∃ p, n ≤ p ∧ Nat.Prime p :=\n\n/-- If the natural number `n` is a sum of two squares of coprime natural numbers, then\n`-1` is a square modulo `n`. -/\ntheorem ∀ {n x y : ℕ}, n = x ^ 2 + y ^ 2 → Nat.coprime x y → IsSquare (-1) :=\n\n/-- A (positive) natural number `n` is a sum of two squares if and only if the exponent of\nevery prime `q` such that `q % 4 = 3` in the prime factorization of `n` is even.\n(The assumption `0 < n` is not present, since for `n = 0`, both sides are satisfied;\nthe right hand side holds, since `padicValNat q 0 = 0` by definition.) -/\ntheorem ∀ {n : ℕ}, (∃ x y, n = x ^ 2 + y ^ 2) ↔ ∀ {q : ℕ}, Nat.Prime q → q % 4 = 3 → Even (padicValNat q n) :=\n\n/-- Proves that Bertrand's postulate holds for all sufficiently large `n`. -/\ntheorem ∀ (n : ℕ), 512 ≤ n → ∃ p, Nat.Prime p ∧ n < p ∧ p ≤ 2 * n :=\n\n/-- If the integer `n` is a sum of two squares of coprime integers,\nthen `-1` is a square modulo `n`. -/\ntheorem ∀ {n x y : ℤ}, n = x ^ 2 + y ^ 2 → IsCoprime x y → IsSquare (-1) :=\n\n/-- Infinitely many natural numbers are equal to `d` mod `n`. -/\ntheorem ∀ {n : ℕ}, n ≠ 0 → ∀ (d : ℕ), ∃ᶠ (m : ℕ) in Filter.atTop, m ≡ d [MOD n] :=\n\n/-- The sum of `2⁻¹ ^ i` for `n ≤ i` equals `2 * 2⁻¹ ^ n`. -/\ntheorem ∀ (n : ℕ), (∑' (i : ℕ), if n ≤ i then 2⁻¹ ^ i else 0) = 2 * 2⁻¹ ^ n :=\n\n/-- There are no perfect squares strictly between m² and (m+1)² -/\ntheorem ∀ {n m : ℕ}, m * m < n → n < (m + 1) * (m + 1) → ¬∃ t, t * t = n :=\n\n/-- A sum of numbers is infinite iff one of them is infinite -/\ntheorem ∀ {ι : Type u_2} {M : Type u_1} [inst : AddCommMonoid M] {s : Finset ι} {f : ι → WithTop M},\n  (Finset.sum s fun i => f i) = ⊤ ↔ ∃ i, i ∈ s ∧ f i = ⊤ :=\n\n/-- **Euler's four-square identity**, a version for natural numbers. -/\ntheorem ∀ (a b c d x y z w : ℕ),\n  Int.natAbs (↑a * ↑x - ↑b * ↑y - ↑c * ↑z - ↑d * ↑w) ^ 2 + Int.natAbs (↑a * ↑y + ↑b * ↑x + ↑c * ↑w - ↑d * ↑z) ^ 2 +\n        Int.natAbs (↑a * ↑z - ↑b * ↑w + ↑c * ↑x + ↑d * ↑y) ^ 2 +\n      Int.natAbs (↑a * ↑w + ↑b * ↑z - ↑c * ↑y + ↑d * ↑x) ^ 2 =\n    (a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2) * (x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2) :=\n\n/-- If `-1` is a square modulo coprime natural numbers `m` and `n`, then `-1` is also\na square modulo `m*n`. -/\ntheorem ∀ {m n : ℕ}, Nat.coprime m n → IsSquare (-1) → IsSquare (-1) → IsSquare (-1) :=\n\n/-- `choose n 2` is the `n`-th triangle number. -/\ntheorem ∀ (n : ℕ), Nat.choose n 2 = n * (n - 1) / 2 :=\n\n/-- **Formula for Pythagorean Triples** -/\ntheorem ∀ {x y z : ℤ},\n  PythagoreanTriple x y z →\n    (PythagoreanTriple x y z ↔\n      ∃ k m n,\n        (x = k * (m ^ 2 - n ^ 2) ∧ y = k * (2 * m * n) ∨ x = k * (2 * m * n) ∧ y = k * (m ^ 2 - n ^ 2)) ∧\n          (z = k * (m ^ 2 + n ^ 2) ∨ z = -k * (m ^ 2 + n ^ 2))) :=\n\n/-- For any `y < 1` and any positive `x`, there exists `n : ℕ` with `y ^ n < x`. -/\ntheorem ∀ {α : Type u_1} [inst : LinearOrderedField α] [inst_1 : Archimedean α] {x y : α}, 0 < x → y < 1 → ∃ n, y ^ n < x :=\n\n/-- Lagrange's **four squares theorem** for a prime number. Use `Nat.sum_four_squares` instead. -/\ntheorem ∀ {p : ℕ}, Nat.Prime p → ∃ a b c d, a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 = p :=\n\n/-- Proof that `blocks` sums to `n` -/\ntheorem ∀ {n : ℕ} (self : Composition n), List.sum self.blocks = n :=\n\n/-- The sequence `n / (2 * n + 1)` tends to `1/2` -/\ntheorem Filter.Tendsto (fun n => ↑n / (2 * ↑n + 1)) Filter.atTop (nhds (1 / 2)) :=\n\n/-- Prove that there exist infinitely many integers `n` such that `n, n + 1, n + 2` are each the sum of the squares of two integers. -/\ntheorem", "choices": ["∃ᶠ (n : ℤ) in Filter.atTop, (∃ x y, n = x ^ 2 + y ^ 2) ∧ (∃ u v, n + 1 = u ^ 2 + v ^ 2) ∧ (∃ r s, n + 2 = r ^ 2 + s ^ 2) ", "∃ (f : ℕ → ℕ), ∀ (n : ℕ), (∃ x y, f n = x ^ 2 + y ^ 2) ∧ (∃ x y, f (n + 1) = x ^ 2 + y ^ 2) ∧ (∃ x y, f (n + 2) = x ^ 2 + y ^ 2) ", "∃ f : ℕ → ℕ, StrictMono f ∧ ∀ n, (∃ x₁ y₁, f n = x₁ ^ 2 + y₁ ^ 2) ∧ (∃ x₂ y₂, f n + 1 = x₂ ^ 2 + y₂ ^ 2) ∧ (∃ x₃ y₃, f n + 2 = x₃ ^ 2 + y₃ ^ 2) ", "∃ᶠ (n : ℤ) in Filter.atTop, (∃ a b, n = a ^ 2 + b ^ 2) ∧ (∃ c d, n + 1 = c ^ 2 + d ^ 2) ∧ (∃ e f, n + 2 = e ^ 2 + f ^ 2) ", "∃ (f : ℕ → ℕ), ∀ N, ∃ n, N ≤ n ∧ (∃ x y, n = x ^ 2 + y ^ 2) ∧ (∃ x y, n + 1 = x ^ 2 + y ^ 2) ∧ (∃ x y, n + 2 = x ^ 2 + y ^ 2) ", "∃ f : ℕ → ℕ, ∀ n : ℕ, (∃ a b, (f n) = a ^ 2 + b ^ 2) ∧ (∃ c d, (f n) + 1 = c ^ 2 + d ^ 2) ∧ (∃ e f, (f n) + 2 = e ^ 2 + f ^ 2) ", "∀ (N : ℤ), ∃ n, N ≤ n ∧ (∃ x₁ y₁ x₂ y₂ x₃ y₃ : ℤ, n = x₁ ^ 2 + y₁ ^ 2 ∧ n + 1 = x₂ ^ 2 + y₂ ^ 2 ∧ n + 2 = x₃ ^ 2 + y₃ ^ 2) ", "∀ (N : ℕ), ∃ n : ℕ, N < n ∧ (∃ x1 y1 x2 y2 x3 y3 : ℕ, n = x1 ^ 2 + y1 ^ 2 ∧ n + 1 = x2 ^ 2 + y2 ^ 2 ∧ n + 2 = x3 ^ 2 + y3 ^ 2) ", "∃ᶠ (n : ℤ) in Filter.atTop, (∃ a b, n = a ^ 2 + b ^ 2) ∧ (∃ c d, n + 1 = c ^ 2 + d ^ 2) ∧ (∃ e f, n + 2 = e ^ 2 + f ^ 2) ", "∃ (f : ℕ → ℕ), StrictMono f ∧ ∀ (n : ℕ), (∃ x y, f n = x ^ 2 + y ^ 2) ∧ (∃ x y, f n + 1 = x ^ 2 + y ^ 2) ∧ (∃ x y, f n + 2 = x ^ 2 + y ^ 2) "]}
{"docString": "Let `f` be a real function on the real line with continuous third derivative. Prove that there exists a point `a` such that...", "prompts": "[{\"theorem\":\n  \"∀ (f : ℝ → ℝ) {a b : ℝ}, a < b → ContinuousOn f (Set.Icc a b) → f a = f b → ∃ c, c ∈ Set.Ioo a b ∧ IsLocalExtr f c\",\n  \"isProp\": true,\n  \"docString\":\n  \"A continuous function on a closed interval with `f a = f b` has a local extremum at some\\npoint of the corresponding open interval. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] {s : Set ℝ} {e : E} {a : ℝ} {f : ℝ → E},\\n  DifferentiableOn ℝ f s →\\n    ContinuousWithinAt f s a →\\n      s ∈ nhdsWithin a (Set.Iio a) →\\n        Filter.Tendsto (fun x => deriv f x) (nhdsWithin a (Set.Iio a)) (nhds e) → HasDerivWithinAt f e (Set.Iic a) a\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a function is differentiable on the left of a point `a : ℝ`, continuous at `a`, and\\nits derivative also converges at `a`, then `f` is differentiable on the left at `a`. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] {s : Set ℝ} {e : E} {a : ℝ} {f : ℝ → E},\\n  DifferentiableOn ℝ f s →\\n    ContinuousWithinAt f s a →\\n      s ∈ nhdsWithin a (Set.Ioi a) →\\n        Filter.Tendsto (fun x => deriv f x) (nhdsWithin a (Set.Ioi a)) (nhds e) → HasDerivWithinAt f e (Set.Ici a) a\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a function is differentiable on the right of a point `a : ℝ`, continuous at `a`, and\\nits derivative also converges at `a`, then `f` is differentiable on the right at `a`. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] {f g : ℝ → E} {x : ℝ},\\n  (∀ (y : ℝ), y ≠ x → HasDerivAt f (g y) y) → ContinuousAt f x → ContinuousAt g x → HasDerivAt f (g x) x\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a real function `f` has a derivative `g` everywhere but at a point, and `f` and `g` are\\ncontinuous at this point, then `g` is also the derivative of `f` at this point. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {β : Type u_2} [inst : LinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderTopology α]\\n  [inst_3 : LinearOrder β] [inst_4 : TopologicalSpace β] [inst_5 : OrderTopology β] {f : α → β} {s : Set α} {a : α},\\n  MonotoneOn f s →\\n    s ∈ nhds a →\\n      (∀ (b : β), b < f a → ∃ c, c ∈ s ∧ f c ∈ Set.Ioo b (f a)) →\\n        (∀ (b : β), b > f a → ∃ c, c ∈ s ∧ f c ∈ Set.Ioo (f a) b) → ContinuousAt f a\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` is a monotone function on a neighborhood of `a` and the image of this neighborhood under\\n`f` meets every interval `(b, f a)`, `b < f a`, and every interval `(f a, b)`, `b > f a`, then `f`\\nis continuous at `a`. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] {f g : ℝ → E} {x : ℝ},\\n  (∀ (y : ℝ), y ≠ x → HasDerivAt f (g y) y) → ContinuousAt f x → ContinuousAt g x → ∀ (y : ℝ), HasDerivAt f (g y) y\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a real function `f` has a derivative `g` everywhere but at a point, and `f` and `g` are\\ncontinuous at this point, then `g` is the derivative of `f` everywhere. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} [inst : NontriviallyNormedField 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] {F : Type u_3} [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] {f : E → F}\\n  {f' : E →L[𝕜] F} {a : E},\\n  HasStrictFDerivAt f f' a → ∀ {c : NNReal}, Subsingleton E ∨ 0 < c → ∃ s, s ∈ nhds a ∧ ApproximatesLinearOn f f' s c\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` has derivative `f'` at `a` in the strict sense and `c > 0`, then `f` approximates `f'`\\nwith constant `c` on some neighborhood of `a`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {β : Type u_1} [inst : LinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderTopology α]\\n  [inst_3 : LinearOrder β] [inst_4 : TopologicalSpace β] [inst_5 : OrderTopology β] [inst_6 : DenselyOrdered β]\\n  {f : α → β} {s : Set α} {a : α}, StrictMonoOn f s → s ∈ nhds a → f '' s ∈ nhds (f a) → ContinuousAt f a\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a function `f` with a densely ordered codomain is strictly monotone on a neighborhood of `a`\\nand the image of this set under `f` is a neighborhood of `f a`, then `f` is continuous at `a`. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : CompleteSpace E] [inst_2 : NormedSpace ℝ E] {f : ℝ → E} {a : ℝ}\\n  {s : Set ℝ},\\n  (∀ (x : ℝ), x ∈ s → IntervalIntegrable f MeasureTheory.volume a x) →\\n    Continuous f → DifferentiableOn ℝ (fun u => ∫ (x : ℝ) in a..u, f x) s\",\n  \"isProp\": true,\n  \"docString\":\n  \"The integral of a continuous function is differentiable on a real set `s`. \"},\n {\"theorem\":\n  \"∀ (f : ℝ → ℝ) {a b : ℝ},\\n  a < b → ContinuousOn f (Set.Icc a b) → f a = f b → ∃ c, c ∈ Set.Ioo a b ∧ IsExtrOn f (Set.Icc a b) c\",\n  \"isProp\": true,\n  \"docString\":\n  \"A continuous function on a closed interval with `f a = f b` takes either its maximum\\nor its minimum value at a point in the interior of the interval. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {f : ℂ → E},\\n  DiffContOnCl ℂ f (Set.Iio 0 ×ℂ Set.Iio 0) →\\n    (∃ c,\\n        c < 2 ∧\\n          ∃ B,\\n            f =O[Filter.comap (↑Complex.abs) Filter.atTop ⊓ Filter.principal (Set.Iio 0 ×ℂ Set.Iio 0)] fun z =>\\n              rexp (B * ↑Complex.abs z ^ c)) →\\n      (∀ (x : ℝ), x ≤ 0 → f ↑x = 0) →\\n        (∀ (x : ℝ), x ≤ 0 → f (↑x * Complex.I) = 0) → Set.EqOn f 0 {z | z.re ≤ 0 ∧ z.im ≤ 0}\",\n  \"isProp\": true,\n  \"docString\":\n  \"**Phragmen-Lindelöf principle** in the third quadrant. Let `f : ℂ → E` be a function such that\\n\\n* `f` is differentiable in the open third quadrant and is continuous on its closure;\\n* `‖f z‖` is bounded from above by `A * exp(B * (abs z) ^ c)` on the open third quadrant\\n  for some `A`, `B`, and `c < 2`;\\n* `f` is equal to zero on the boundary of the third quadrant.\\n\\nThen `f` is equal to zero on the closed third quadrant. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] [inst_2 : T1Space β] {f : α → β}\\n  {a : α} {b : β}, Filter.Tendsto f (nhds a) (nhds b) → ContinuousAt f a\",\n  \"isProp\": true,\n  \"docString\":\n  \"To prove a function to a `T1Space` is continuous at some point `a`, it suffices to prove that\\n`f` admits *some* limit at `a`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {β : Type u_1} [inst : LinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderTopology α]\\n  [inst_3 : LinearOrder β] [inst_4 : TopologicalSpace β] [inst_5 : OrderTopology β] [inst_6 : DenselyOrdered β]\\n  {f : α → β} {s : Set α} {a : α}, StrictMonoOn f s → s ∈ nhds a → closure (f '' s) ∈ nhds (f a) → ContinuousAt f a\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a function `f` with a densely ordered codomain is strictly monotone on a neighborhood of `a`\\nand the closure of the image of this neighborhood under `f` is a neighborhood of `f a`, then `f` is\\ncontinuous at `a`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {β : Type u_2} [inst : LinearOrder α] [inst_1 : Preorder β] {a : α} {f : α → β},\\n  MonotoneOn f (Set.Iic a) → MonotoneOn f (Set.Ici a) → Monotone f\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` is monotone both on `(-∞, a]` and `[a, ∞)`, then it is monotone on the whole line. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {β : Type u_2} [inst : LinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderTopology α]\\n  [inst_3 : LinearOrder β] [inst_4 : TopologicalSpace β] [inst_5 : OrderTopology β] {f : α → β} {s : Set α} {a : α},\\n  StrictMonoOn f s →\\n    s ∈ nhds a →\\n      (∀ (b : β), b < f a → ∃ c, c ∈ s ∧ f c ∈ Set.Ico b (f a)) →\\n        (∀ (b : β), b > f a → ∃ c, c ∈ s ∧ f c ∈ Set.Ioc (f a) b) → ContinuousAt f a\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a function `f` is strictly monotone on a neighborhood of `a` and the image of this\\nneighborhood under `f` meets every interval `[b, f a)`, `b < f a`, and every interval\\n`(f a, b]`, `b > f a`, then `f` is continuous at `a`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {β : Type u_1} [inst : LinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderTopology α]\\n  [inst_3 : LinearOrder β] [inst_4 : TopologicalSpace β] [inst_5 : OrderTopology β] [inst_6 : DenselyOrdered β]\\n  {f : α → β} {s : Set α} {a : α}, MonotoneOn f s → s ∈ nhds a → f '' s ∈ nhds (f a) → ContinuousAt f a\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a function `f` with a densely ordered codomain is monotone on a neighborhood of `a` and the\\nimage of this neighborhood under `f` is a neighborhood of `f a`, then `f` is continuous at `a`. \"},\n {\"theorem\":\n  \"∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {f : ℂ → E},\\n  Differentiable ℂ f → ∀ {n : ℕ∞}, ContDiff ℂ n f\",\n  \"isProp\": true,\n  \"docString\":\n  \"A complex differentiable function `f : ℂ → E` is continuously differentiable at every point. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {β : Type u_1} [inst : LinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderTopology α]\\n  [inst_3 : LinearOrder β] [inst_4 : TopologicalSpace β] [inst_5 : OrderTopology β] [inst_6 : DenselyOrdered β]\\n  {f : α → β} {s : Set α} {a : α}, MonotoneOn f s → s ∈ nhds a → closure (f '' s) ∈ nhds (f a) → ContinuousAt f a\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a function `f` with a densely ordered codomain is monotone on a neighborhood of `a` and the\\nclosure of the image of this neighborhood under `f` is a neighborhood of `f a`, then `f` is\\ncontinuous at `a`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {β : Type u_1} [inst : LinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderTopology α]\\n  [inst_3 : LinearOrder β] [inst_4 : TopologicalSpace β] [inst_5 : OrderTopology β] [inst_6 : DenselyOrdered β]\\n  {f : α → β} {s : Set α} {a : α},\\n  StrictMonoOn f s →\\n    s ∈ nhdsWithin a (Set.Iic a) →\\n      closure (f '' s) ∈ nhdsWithin (f a) (Set.Iic (f a)) → ContinuousWithinAt f (Set.Iic a) a\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a function `f` with a densely ordered codomain is strictly monotone on a left neighborhood of\\n`a` and the closure of the image of this neighborhood under `f` is a left neighborhood of `f a`,\\nthen `f` is continuous at `a` from the left. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {β : Type u_1} [inst : LinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderTopology α]\\n  [inst_3 : LinearOrder β] [inst_4 : TopologicalSpace β] [inst_5 : OrderTopology β] [inst_6 : DenselyOrdered β]\\n  {f : α → β} {s : Set α} {a : α},\\n  StrictMonoOn f s →\\n    s ∈ nhdsWithin a (Set.Iic a) → f '' s ∈ nhdsWithin (f a) (Set.Iic (f a)) → ContinuousWithinAt f (Set.Iic a) a\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a function `f` with a densely ordered codomain is strictly monotone on a left neighborhood of\\n`a` and the image of this neighborhood under `f` is a left neighborhood of `f a`, then `f` is\\ncontinuous at `a` from the left. \"}]\n", "prompt_cons": "/-- A continuous function on a closed interval with `f a = f b` has a local extremum at some\npoint of the corresponding open interval. -/\ntheorem ∀ (f : ℝ → ℝ) {a b : ℝ}, a < b → ContinuousOn f (Set.Icc a b) → f a = f b → ∃ c, c ∈ Set.Ioo a b ∧ IsLocalExtr f c :=\n\n/-- If a function is differentiable on the left of a point `a : ℝ`, continuous at `a`, and\nits derivative also converges at `a`, then `f` is differentiable on the left at `a`. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] {s : Set ℝ} {e : E} {a : ℝ} {f : ℝ → E},\n  DifferentiableOn ℝ f s →\n    ContinuousWithinAt f s a →\n      s ∈ nhdsWithin a (Set.Iio a) →\n        Filter.Tendsto (fun x => deriv f x) (nhdsWithin a (Set.Iio a)) (nhds e) → HasDerivWithinAt f e (Set.Iic a) a :=\n\n/-- If a function is differentiable on the right of a point `a : ℝ`, continuous at `a`, and\nits derivative also converges at `a`, then `f` is differentiable on the right at `a`. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] {s : Set ℝ} {e : E} {a : ℝ} {f : ℝ → E},\n  DifferentiableOn ℝ f s →\n    ContinuousWithinAt f s a →\n      s ∈ nhdsWithin a (Set.Ioi a) →\n        Filter.Tendsto (fun x => deriv f x) (nhdsWithin a (Set.Ioi a)) (nhds e) → HasDerivWithinAt f e (Set.Ici a) a :=\n\n/-- If a real function `f` has a derivative `g` everywhere but at a point, and `f` and `g` are\ncontinuous at this point, then `g` is also the derivative of `f` at this point. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] {f g : ℝ → E} {x : ℝ},\n  (∀ (y : ℝ), y ≠ x → HasDerivAt f (g y) y) → ContinuousAt f x → ContinuousAt g x → HasDerivAt f (g x) x :=\n\n/-- If `f` is a monotone function on a neighborhood of `a` and the image of this neighborhood under\n`f` meets every interval `(b, f a)`, `b < f a`, and every interval `(f a, b)`, `b > f a`, then `f`\nis continuous at `a`. -/\ntheorem ∀ {α : Type u_1} {β : Type u_2} [inst : LinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderTopology α]\n  [inst_3 : LinearOrder β] [inst_4 : TopologicalSpace β] [inst_5 : OrderTopology β] {f : α → β} {s : Set α} {a : α},\n  MonotoneOn f s →\n    s ∈ nhds a →\n      (∀ (b : β), b < f a → ∃ c, c ∈ s ∧ f c ∈ Set.Ioo b (f a)) →\n        (∀ (b : β), b > f a → ∃ c, c ∈ s ∧ f c ∈ Set.Ioo (f a) b) → ContinuousAt f a :=\n\n/-- If a real function `f` has a derivative `g` everywhere but at a point, and `f` and `g` are\ncontinuous at this point, then `g` is the derivative of `f` everywhere. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] {f g : ℝ → E} {x : ℝ},\n  (∀ (y : ℝ), y ≠ x → HasDerivAt f (g y) y) → ContinuousAt f x → ContinuousAt g x → ∀ (y : ℝ), HasDerivAt f (g y) y :=\n\n/-- If `f` has derivative `f'` at `a` in the strict sense and `c > 0`, then `f` approximates `f'`\nwith constant `c` on some neighborhood of `a`. -/\ntheorem ∀ {𝕜 : Type u_1} [inst : NontriviallyNormedField 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E] {F : Type u_3} [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] {f : E → F}\n  {f' : E →L[𝕜] F} {a : E},\n  HasStrictFDerivAt f f' a → ∀ {c : NNReal}, Subsingleton E ∨ 0 < c → ∃ s, s ∈ nhds a ∧ ApproximatesLinearOn f f' s c :=\n\n/-- If a function `f` with a densely ordered codomain is strictly monotone on a neighborhood of `a`\nand the image of this set under `f` is a neighborhood of `f a`, then `f` is continuous at `a`. -/\ntheorem ∀ {α : Type u_2} {β : Type u_1} [inst : LinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderTopology α]\n  [inst_3 : LinearOrder β] [inst_4 : TopologicalSpace β] [inst_5 : OrderTopology β] [inst_6 : DenselyOrdered β]\n  {f : α → β} {s : Set α} {a : α}, StrictMonoOn f s → s ∈ nhds a → f '' s ∈ nhds (f a) → ContinuousAt f a :=\n\n/-- The integral of a continuous function is differentiable on a real set `s`. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : CompleteSpace E] [inst_2 : NormedSpace ℝ E] {f : ℝ → E} {a : ℝ}\n  {s : Set ℝ},\n  (∀ (x : ℝ), x ∈ s → IntervalIntegrable f MeasureTheory.volume a x) →\n    Continuous f → DifferentiableOn ℝ (fun u => ∫ (x : ℝ) in a..u, f x) s :=\n\n/-- A continuous function on a closed interval with `f a = f b` takes either its maximum\nor its minimum value at a point in the interior of the interval. -/\ntheorem ∀ (f : ℝ → ℝ) {a b : ℝ},\n  a < b → ContinuousOn f (Set.Icc a b) → f a = f b → ∃ c, c ∈ Set.Ioo a b ∧ IsExtrOn f (Set.Icc a b) c :=\n\n/-- **Phragmen-Lindelöf principle** in the third quadrant. Let `f : ℂ → E` be a function such that\n\n* `f` is differentiable in the open third quadrant and is continuous on its closure;\n* `‖f z‖` is bounded from above by `A * exp(B * (abs z) ^ c)` on the open third quadrant\n  for some `A`, `B`, and `c < 2`;\n* `f` is equal to zero on the boundary of the third quadrant.\n\nThen `f` is equal to zero on the closed third quadrant. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {f : ℂ → E},\n  DiffContOnCl ℂ f (Set.Iio 0 ×ℂ Set.Iio 0) →\n    (∃ c,\n        c < 2 ∧\n          ∃ B,\n            f =O[Filter.comap (↑Complex.abs) Filter.atTop ⊓ Filter.principal (Set.Iio 0 ×ℂ Set.Iio 0)] fun z =>\n              rexp (B * ↑Complex.abs z ^ c)) →\n      (∀ (x : ℝ), x ≤ 0 → f ↑x = 0) →\n        (∀ (x : ℝ), x ≤ 0 → f (↑x * Complex.I) = 0) → Set.EqOn f 0 {z | z.re ≤ 0 ∧ z.im ≤ 0} :=\n\n/-- To prove a function to a `T1Space` is continuous at some point `a`, it suffices to prove that\n`f` admits *some* limit at `a`. -/\ntheorem ∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] [inst_2 : T1Space β] {f : α → β}\n  {a : α} {b : β}, Filter.Tendsto f (nhds a) (nhds b) → ContinuousAt f a :=\n\n/-- If a function `f` with a densely ordered codomain is strictly monotone on a neighborhood of `a`\nand the closure of the image of this neighborhood under `f` is a neighborhood of `f a`, then `f` is\ncontinuous at `a`. -/\ntheorem ∀ {α : Type u_2} {β : Type u_1} [inst : LinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderTopology α]\n  [inst_3 : LinearOrder β] [inst_4 : TopologicalSpace β] [inst_5 : OrderTopology β] [inst_6 : DenselyOrdered β]\n  {f : α → β} {s : Set α} {a : α}, StrictMonoOn f s → s ∈ nhds a → closure (f '' s) ∈ nhds (f a) → ContinuousAt f a :=\n\n/-- If `f` is monotone both on `(-∞, a]` and `[a, ∞)`, then it is monotone on the whole line. -/\ntheorem ∀ {α : Type u_1} {β : Type u_2} [inst : LinearOrder α] [inst_1 : Preorder β] {a : α} {f : α → β},\n  MonotoneOn f (Set.Iic a) → MonotoneOn f (Set.Ici a) → Monotone f :=\n\n/-- If a function `f` is strictly monotone on a neighborhood of `a` and the image of this\nneighborhood under `f` meets every interval `[b, f a)`, `b < f a`, and every interval\n`(f a, b]`, `b > f a`, then `f` is continuous at `a`. -/\ntheorem ∀ {α : Type u_1} {β : Type u_2} [inst : LinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderTopology α]\n  [inst_3 : LinearOrder β] [inst_4 : TopologicalSpace β] [inst_5 : OrderTopology β] {f : α → β} {s : Set α} {a : α},\n  StrictMonoOn f s →\n    s ∈ nhds a →\n      (∀ (b : β), b < f a → ∃ c, c ∈ s ∧ f c ∈ Set.Ico b (f a)) →\n        (∀ (b : β), b > f a → ∃ c, c ∈ s ∧ f c ∈ Set.Ioc (f a) b) → ContinuousAt f a :=\n\n/-- If a function `f` with a densely ordered codomain is monotone on a neighborhood of `a` and the\nimage of this neighborhood under `f` is a neighborhood of `f a`, then `f` is continuous at `a`. -/\ntheorem ∀ {α : Type u_2} {β : Type u_1} [inst : LinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderTopology α]\n  [inst_3 : LinearOrder β] [inst_4 : TopologicalSpace β] [inst_5 : OrderTopology β] [inst_6 : DenselyOrdered β]\n  {f : α → β} {s : Set α} {a : α}, MonotoneOn f s → s ∈ nhds a → f '' s ∈ nhds (f a) → ContinuousAt f a :=\n\n/-- A complex differentiable function `f : ℂ → E` is continuously differentiable at every point. -/\ntheorem ∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {f : ℂ → E},\n  Differentiable ℂ f → ∀ {n : ℕ∞}, ContDiff ℂ n f :=\n\n/-- If a function `f` with a densely ordered codomain is monotone on a neighborhood of `a` and the\nclosure of the image of this neighborhood under `f` is a neighborhood of `f a`, then `f` is\ncontinuous at `a`. -/\ntheorem ∀ {α : Type u_2} {β : Type u_1} [inst : LinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderTopology α]\n  [inst_3 : LinearOrder β] [inst_4 : TopologicalSpace β] [inst_5 : OrderTopology β] [inst_6 : DenselyOrdered β]\n  {f : α → β} {s : Set α} {a : α}, MonotoneOn f s → s ∈ nhds a → closure (f '' s) ∈ nhds (f a) → ContinuousAt f a :=\n\n/-- If a function `f` with a densely ordered codomain is strictly monotone on a left neighborhood of\n`a` and the closure of the image of this neighborhood under `f` is a left neighborhood of `f a`,\nthen `f` is continuous at `a` from the left. -/\ntheorem ∀ {α : Type u_2} {β : Type u_1} [inst : LinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderTopology α]\n  [inst_3 : LinearOrder β] [inst_4 : TopologicalSpace β] [inst_5 : OrderTopology β] [inst_6 : DenselyOrdered β]\n  {f : α → β} {s : Set α} {a : α},\n  StrictMonoOn f s →\n    s ∈ nhdsWithin a (Set.Iic a) →\n      closure (f '' s) ∈ nhdsWithin (f a) (Set.Iic (f a)) → ContinuousWithinAt f (Set.Iic a) a :=\n\n/-- If a function `f` with a densely ordered codomain is strictly monotone on a left neighborhood of\n`a` and the image of this neighborhood under `f` is a left neighborhood of `f a`, then `f` is\ncontinuous at `a` from the left. -/\ntheorem ∀ {α : Type u_2} {β : Type u_1} [inst : LinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderTopology α]\n  [inst_3 : LinearOrder β] [inst_4 : TopologicalSpace β] [inst_5 : OrderTopology β] [inst_6 : DenselyOrdered β]\n  {f : α → β} {s : Set α} {a : α},\n  StrictMonoOn f s →\n    s ∈ nhdsWithin a (Set.Iic a) → f '' s ∈ nhdsWithin (f a) (Set.Iic (f a)) → ContinuousWithinAt f (Set.Iic a) a :=\n\n/-- Let `f` be a real function on the real line with continuous third derivative. Prove that there exists a point `a` such that... -/\ntheorem", "choices": ["∀ {f : ℝ → ℝ} {s : Set ℝ} (hs : DifferentiableOn ℝ f s) (hf : ContinuousOn (deriv^[3]) f s),\n  ∃ a ∈ s, deriv^[3] f a = 0 ", "∀ {f : ℝ → ℝ},\n  (Differentiable ℝ f ∧ ∀ (x : ℝ), (deriv^[3] f) x = 0) →\n    ∃ a, deriv f a = 0 ∧ deriv^[2] f a = 0 ", "∀ (f : ℝ → ℝ),\n  ContinuousOn (deriv^[3] f) ℝ →\n  ∃ a, deriv^[2] f a = 0 ∧ HasDerivAt (deriv^[2] f) (deriv^[3] f a) a ", "∀ {f : ℝ → ℝ}, (∀ x, continuous (deriv^[3] f) x) → ∃ a, (deriv^[3] f a) (f a - a) = 6 ", "∀ {f : ℝ → ℝ} (hderiv : ∀ x, DifferentiableAt ℝ (deriv^[3]) x) (x y z : ℝ),\n  ∃ a, deriv^[3] a (x * y * z) = (x * y * z) * (deriv^[3] a x + deriv^[3] a y + deriv^[3] a z) ", "∀ {f : ℝ → ℝ}, ContinuousOn (deriv^[3]) f ℝ → ∃ a, HasDerivAt f (-f a / 2) a ", "∀ (f : ℝ → ℝ),\n  ContinuousOn (deriv^[3]) ℝ f ℝ →\n    ∃ a, deriv^[3] f a = deriv^[2] f a * (deriv f a)^2 + (deriv^[2] f a)^2 * deriv f a ", "∀ {f : ℝ → ℝ},\n  Differentiable ℝ f →\n  (∀ {x : ℝ}, DifferentiableAt ℝ (deriv f) x) →\n  Continuous (deriv (deriv (deriv f))) →\n  ∃ a, deriv (deriv (deriv f)) a * a = 2 * (deriv (deriv f) a) - 2 * f a + 4 * deriv f a - 6 * a ", "∀ {f : ℝ → ℝ},\n  Continuous (deriv^[3] f) →\n  ∃ a, deriv^[3] f a = 0 ∧ deriv f a = 0 ∧ deriv^[2] f a = 0 ", "∀ (f : ℝ → ℝ),\n  Continuous (deriv^[3] f) →\n  ∃ a, IsLocalExtr (deriv^[2] f) a ∧ deriv (deriv f) a = 0 ∧ deriv^[3] f a ≠ 0 "]}
{"docString": "Let `(p_n)` be a sequence and `f: ℕ → ℕ`. The sequence `(q_k)_{k ∈ ℕ}` with `q_k = p_{f(k)}` is called a rearrangement of `(p_n)`. Show that if `f` is an injection, the limit of a sequence is unaffected by rearrangement.", "prompts": "[{\"theorem\":\n  \"∀ {f : ℕ → ℕ}, Function.Injective f → Filter.Tendsto f Filter.atTop Filter.atTop\",\n  \"isProp\": true,\n  \"docString\":\n  \"An injective sequence `f : ℕ → ℕ` tends to infinity at infinity. \"},\n {\"theorem\":\n  \"∀ (f : CircleDeg1Lift) (x : ℝ),\\n  Filter.Tendsto (fun n => (↑(f ^ n) x - x) / ↑n) Filter.atTop (nhds (CircleDeg1Lift.translationNumber f))\",\n  \"isProp\": true,\n  \"docString\":\n  \"For any `x : ℝ` the sequence $\\\\frac{f^n(x)-x}{n}$ tends to the translation number of `f`.\\nIn particular, this limit does not depend on `x`. \"},\n {\"theorem\":\n  \"∀ {X : Type u_2} [inst : TopologicalSpace X] {π : X → Sort u_1} {f : ℕ → (x : X) → π x},\\n  (LocallyFinite fun n => {x | f (n + 1) x ≠ f n x}) →\\n    ∃ F, ∀ (x : X), ∀ᶠ (n : ℕ) in Filter.atTop, ∀ᶠ (y : X) in nhds x, f n y = F y\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `f : ℕ → Π a, β a` be a sequence of (dependent) functions on a topological space. Suppose\\nthat the family of sets `s n = {x | f (n + 1) x ≠ f n x}` is locally finite. Then there exists a\\nfunction `F : Π a, β a` such that for any `x`, for sufficiently large values of `n`, we have\\n`f n y = F y` in a neighbourhood of `x`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_2} {X : Type u_1} [inst : TopologicalSpace X] {f : ℕ → X → α},\\n  (LocallyFinite fun n => {x | f (n + 1) x ≠ f n x}) → ∃ F, ∀ (x : X), ∀ᶠ (n : ℕ) in Filter.atTop, f n =ᶠ[nhds x] F\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `f : ℕ → α → β` be a sequence of functions on a topological space. Suppose\\nthat the family of sets `s n = {x | f (n + 1) x ≠ f n x}` is locally finite. Then there exists a\\nfunction `F :  α → β` such that for any `x`, for sufficiently large values of `n`, we have\\n`f n =ᶠ[𝓝 x] F`. \"},\n {\"theorem\":\n  \"∀ {M : Type u_1} {P : Type u_2} [inst : MulOneClass M] [inst_1 : MulOneClass P] (f : M →* P),\\n  Function.Injective ↑(Con.kerLift f)\",\n  \"isProp\": true,\n  \"docString\":\n  \"A monoid homomorphism `f` induces an injective homomorphism on the quotient by `f`'s kernel. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} {E : α → Type u_2} {p : ENNReal} [inst : (i : α) → NormedAddCommGroup (E i)] {ι : Type u_3}\\n  {l : Filter ι} [inst_1 : Filter.NeBot l] [_i : Fact (1 ≤ p)] {F : ι → { x // x ∈ lp E p }},\\n  Metric.Bounded (Set.range F) → ∀ {f : (a : α) → E a}, Filter.Tendsto (id fun i => ↑(F i)) l (nhds f) → Memℓp f p\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f` is the pointwise limit of a bounded sequence in `lp E p`, then `f` is in `lp E p`. \"},\n {\"theorem\": \"∀ {p : ℕ}, (Summable fun n => 1 / ↑n ^ p) ↔ 1 < p\",\n  \"isProp\": true,\n  \"docString\": \"Summability of the `p`-series over `ℤ`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {p : Filter ι}\\n  {p' : Filter α},\\n  TendstoUniformlyOnFilter F f p p' ↔ Filter.Tendsto (fun q => (f q.snd, F q.fst q.snd)) (p ×ˢ p') (uniformity β)\",\n  \"isProp\": true,\n  \"docString\":\n  \"A sequence of functions `Fₙ` converges uniformly on a filter `p'` to a limiting function `f` w.r.t.\\nfilter `p` iff the function `(n, x) ↦ (f x, Fₙ x)` converges along `p ×ˢ p'` to the uniformity.\\nIn other words: one knows nothing about the behavior of `x` in this limit besides it being in `p'`.\\n\"},\n {\"theorem\":\n  \"∀ {X : Type u_2} [inst : TopologicalSpace X] {π : X → Sort u_1} {f : ℕ → (x : X) → π x},\\n  (LocallyFinite fun n => {x | f (n + 1) x ≠ f n x}) →\\n    ∃ F, ∀ (x : X), ∀ᶠ (p : ℕ × X) in Filter.atTop ×ˢ nhds x, f p.fst p.snd = F p.snd\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `f : ℕ → Π a, β a` be a sequence of (dependent) functions on a topological space. Suppose\\nthat the family of sets `s n = {x | f (n + 1) x ≠ f n x}` is locally finite. Then there exists a\\nfunction `F : Π a, β a` such that for any `x`, we have `f n x = F x` on the product of an infinite\\ninterval `[N, +∞)` and a neighbourhood of `x`.\\n\\nWe formulate the conclusion in terms of the product of filter `Filter.atTop` and `𝓝 x`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : AddCommMonoid α] [inst_1 : TopologicalSpace α] {a : α} {f : ℕ → α},\\n  HasSum f a → Filter.Tendsto (fun n => Finset.sum (Finset.range n) fun i => f i) Filter.atTop (nhds a)\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `f : ℕ → α` has sum `a`, then the partial sums `∑_{i=0}^{n-1} f i` converge to `a`. \"},\n {\"theorem\":\n  \"∀ {n : ℕ} {α : Type u_1} [inst : LinearOrder α] {f : Fin n → α}, Tuple.sort f = Equiv.refl (Fin n) ↔ Monotone f\",\n  \"isProp\": true,\n  \"docString\":\n  \"The permutation that sorts `f` is the identity if and only if `f` is monotone. \"},\n {\"theorem\":\n  \"∀ (f : ℕ → NNReal), Filter.Tendsto (fun i => ∑' (k : ℕ), f (k + i)) Filter.atTop (nhds 0)\",\n  \"isProp\": true,\n  \"docString\":\n  \"For `f : ℕ → ℝ≥0`, then `∑' k, f (k + i)` tends to zero. This does not require a summability\\nassumption on `f`, as otherwise all sums are zero. \"},\n {\"theorem\":\n  \"∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {p : Filter ι},\\n  TendstoUniformly F f p ↔ Filter.Tendsto (fun q => (f q.snd, F q.fst q.snd)) (p ×ˢ ⊤) (uniformity β)\",\n  \"isProp\": true,\n  \"docString\":\n  \"A sequence of functions `Fₙ` converges uniformly to a limiting function `f` w.r.t.\\nfilter `p` iff the function `(n, x) ↦ (f x, Fₙ x)` converges along `p ×ˢ ⊤` to the uniformity.\\nIn other words: one knows nothing about the behavior of `x` in this limit.\\n\"},\n {\"theorem\":\n  \"∀ {β : Type u_2} [inst : MeasurableSpace β] {p : ENNReal} {E : Type u_1} [inst_1 : NormedAddCommGroup E] {f : β → E}\\n  {μ : MeasureTheory.Measure β},\\n  MeasureTheory.Memℒp f p →\\n    p ≠ ⊤ → ∀ {ε : ENNReal}, ε ≠ 0 → ∃ g, MeasureTheory.snorm (f - ↑g) p μ < ε ∧ MeasureTheory.Memℒp (↑g) p\",\n  \"isProp\": true,\n  \"docString\":\n  \"Any function in `ℒp` can be approximated by a simple function if `p < ∞`. \"},\n {\"theorem\":\n  \"∀ {K : Type u_1} {V : Type u} {V' : Type u_2} [inst : DivisionRing K] [inst_1 : AddCommGroup V]\\n  [inst_2 : AddCommGroup V'] [inst_3 : Module K V] [inst_4 : Module K V'] {p : Submodule K V}\\n  (f : { x // x ∈ p } →ₗ[K] V'), ∃ g, LinearMap.comp g (Submodule.subtype p) = f\",\n  \"isProp\": true,\n  \"docString\":\n  \"Any linear map `f : p →ₗ[K] V'` defined on a subspace `p` can be extended to the whole\\nspace. \"},\n {\"theorem\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] {f : C(ℝ, E)},\\n  (Summable fun n => ‖ContinuousMap.restrict (Set.Icc 0 1) (ContinuousMap.comp f (ContinuousMap.addRight ↑n))‖) →\\n    MeasureTheory.Integrable ↑f\",\n  \"isProp\": true,\n  \"docString\":\n  \"If the sequence with `n`-th term the the sup norm of `λ x, f (x + n)` on the interval `Icc 0 1`,\\nfor `n ∈ ℤ`, is summable, then `f` is integrable on `ℝ`. \"},\n {\"theorem\":\n  \"∀ {𝕜 : Type u_1} {E : Type u_2} {F : Type u_3} [inst : NontriviallyNormedField 𝕜] [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F]\\n  {p : FormalMultilinearSeries 𝕜 E F} {x : E}, HasFPowerSeriesAt 0 p x → ∀ (n : ℕ) (y : E), (↑(p n) fun x => y) = 0\",\n  \"isProp\": true,\n  \"docString\":\n  \"If a formal multilinear series `p` represents the zero function at `x : E`, then the\\nterms `p n (fun i ↦ y)` appearing the in sum are zero for any `n : ℕ`, `y : E`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : LinearOrderedField α] {β : Type u_2} [inst_1 : Ring β] {abv : β → α}\\n  [inst_2 : IsAbsoluteValue abv] [self : CauSeq.IsComplete β abv] (s : CauSeq β abv), ∃ b, s ≈ CauSeq.const abv b\",\n  \"isProp\": true,\n  \"docString\": \"Every Cauchy sequence has a limit. \"},\n {\"theorem\":\n  \"∀ {C : Type u} [inst : CategoryTheory.Category C] {X Y : C} {f : X ⟶ Y} {c : CategoryTheory.Limits.Fork f f},\\n  CategoryTheory.Limits.IsLimit c → CategoryTheory.IsIso (CategoryTheory.Limits.Fork.ι c)\",\n  \"isProp\": true,\n  \"docString\": \"Every equalizer of `(f, f)` is an isomorphism. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : AddCommGroup α] [inst_1 : TopologicalSpace α] [inst_2 : TopologicalAddGroup α]\\n  [inst_3 : T2Space α] (f : ℕ → α), Filter.Tendsto (fun i => ∑' (k : ℕ), f (k + i)) Filter.atTop (nhds 0)\",\n  \"isProp\": true,\n  \"docString\":\n  \"For `f : ℕ → α`, then `∑' k, f (k + i)` tends to zero. This does not require a summability\\nassumption on `f`, as otherwise all sums are zero. \"}]\n", "prompt_cons": "/-- An injective sequence `f : ℕ → ℕ` tends to infinity at infinity. -/\ntheorem ∀ {f : ℕ → ℕ}, Function.Injective f → Filter.Tendsto f Filter.atTop Filter.atTop :=\n\n/-- For any `x : ℝ` the sequence $\\frac{f^n(x)-x}{n}$ tends to the translation number of `f`.\nIn particular, this limit does not depend on `x`. -/\ntheorem ∀ (f : CircleDeg1Lift) (x : ℝ),\n  Filter.Tendsto (fun n => (↑(f ^ n) x - x) / ↑n) Filter.atTop (nhds (CircleDeg1Lift.translationNumber f)) :=\n\n/-- Let `f : ℕ → Π a, β a` be a sequence of (dependent) functions on a topological space. Suppose\nthat the family of sets `s n = {x | f (n + 1) x ≠ f n x}` is locally finite. Then there exists a\nfunction `F : Π a, β a` such that for any `x`, for sufficiently large values of `n`, we have\n`f n y = F y` in a neighbourhood of `x`. -/\ntheorem ∀ {X : Type u_2} [inst : TopologicalSpace X] {π : X → Sort u_1} {f : ℕ → (x : X) → π x},\n  (LocallyFinite fun n => {x | f (n + 1) x ≠ f n x}) →\n    ∃ F, ∀ (x : X), ∀ᶠ (n : ℕ) in Filter.atTop, ∀ᶠ (y : X) in nhds x, f n y = F y :=\n\n/-- Let `f : ℕ → α → β` be a sequence of functions on a topological space. Suppose\nthat the family of sets `s n = {x | f (n + 1) x ≠ f n x}` is locally finite. Then there exists a\nfunction `F :  α → β` such that for any `x`, for sufficiently large values of `n`, we have\n`f n =ᶠ[𝓝 x] F`. -/\ntheorem ∀ {α : Type u_2} {X : Type u_1} [inst : TopologicalSpace X] {f : ℕ → X → α},\n  (LocallyFinite fun n => {x | f (n + 1) x ≠ f n x}) → ∃ F, ∀ (x : X), ∀ᶠ (n : ℕ) in Filter.atTop, f n =ᶠ[nhds x] F :=\n\n/-- A monoid homomorphism `f` induces an injective homomorphism on the quotient by `f`'s kernel. -/\ntheorem ∀ {M : Type u_1} {P : Type u_2} [inst : MulOneClass M] [inst_1 : MulOneClass P] (f : M →* P),\n  Function.Injective ↑(Con.kerLift f) :=\n\n/-- If `f` is the pointwise limit of a bounded sequence in `lp E p`, then `f` is in `lp E p`. -/\ntheorem ∀ {α : Type u_1} {E : α → Type u_2} {p : ENNReal} [inst : (i : α) → NormedAddCommGroup (E i)] {ι : Type u_3}\n  {l : Filter ι} [inst_1 : Filter.NeBot l] [_i : Fact (1 ≤ p)] {F : ι → { x // x ∈ lp E p }},\n  Metric.Bounded (Set.range F) → ∀ {f : (a : α) → E a}, Filter.Tendsto (id fun i => ↑(F i)) l (nhds f) → Memℓp f p :=\n\n/-- Summability of the `p`-series over `ℤ`. -/\ntheorem ∀ {p : ℕ}, (Summable fun n => 1 / ↑n ^ p) ↔ 1 < p :=\n\n/-- A sequence of functions `Fₙ` converges uniformly on a filter `p'` to a limiting function `f` w.r.t.\nfilter `p` iff the function `(n, x) ↦ (f x, Fₙ x)` converges along `p ×ˢ p'` to the uniformity.\nIn other words: one knows nothing about the behavior of `x` in this limit besides it being in `p'`. -/\ntheorem ∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {p : Filter ι}\n  {p' : Filter α},\n  TendstoUniformlyOnFilter F f p p' ↔ Filter.Tendsto (fun q => (f q.snd, F q.fst q.snd)) (p ×ˢ p') (uniformity β) :=\n\n/-- Let `f : ℕ → Π a, β a` be a sequence of (dependent) functions on a topological space. Suppose\nthat the family of sets `s n = {x | f (n + 1) x ≠ f n x}` is locally finite. Then there exists a\nfunction `F : Π a, β a` such that for any `x`, we have `f n x = F x` on the product of an infinite\ninterval `[N, +∞)` and a neighbourhood of `x`.\n\nWe formulate the conclusion in terms of the product of filter `Filter.atTop` and `𝓝 x`. -/\ntheorem ∀ {X : Type u_2} [inst : TopologicalSpace X] {π : X → Sort u_1} {f : ℕ → (x : X) → π x},\n  (LocallyFinite fun n => {x | f (n + 1) x ≠ f n x}) →\n    ∃ F, ∀ (x : X), ∀ᶠ (p : ℕ × X) in Filter.atTop ×ˢ nhds x, f p.fst p.snd = F p.snd :=\n\n/-- If `f : ℕ → α` has sum `a`, then the partial sums `∑_{i=0}^{n-1} f i` converge to `a`. -/\ntheorem ∀ {α : Type u_1} [inst : AddCommMonoid α] [inst_1 : TopologicalSpace α] {a : α} {f : ℕ → α},\n  HasSum f a → Filter.Tendsto (fun n => Finset.sum (Finset.range n) fun i => f i) Filter.atTop (nhds a) :=\n\n/-- The permutation that sorts `f` is the identity if and only if `f` is monotone. -/\ntheorem ∀ {n : ℕ} {α : Type u_1} [inst : LinearOrder α] {f : Fin n → α}, Tuple.sort f = Equiv.refl (Fin n) ↔ Monotone f :=\n\n/-- For `f : ℕ → ℝ≥0`, then `∑' k, f (k + i)` tends to zero. This does not require a summability\nassumption on `f`, as otherwise all sums are zero. -/\ntheorem ∀ (f : ℕ → NNReal), Filter.Tendsto (fun i => ∑' (k : ℕ), f (k + i)) Filter.atTop (nhds 0) :=\n\n/-- A sequence of functions `Fₙ` converges uniformly to a limiting function `f` w.r.t.\nfilter `p` iff the function `(n, x) ↦ (f x, Fₙ x)` converges along `p ×ˢ ⊤` to the uniformity.\nIn other words: one knows nothing about the behavior of `x` in this limit. -/\ntheorem ∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {p : Filter ι},\n  TendstoUniformly F f p ↔ Filter.Tendsto (fun q => (f q.snd, F q.fst q.snd)) (p ×ˢ ⊤) (uniformity β) :=\n\n/-- Any function in `ℒp` can be approximated by a simple function if `p < ∞`. -/\ntheorem ∀ {β : Type u_2} [inst : MeasurableSpace β] {p : ENNReal} {E : Type u_1} [inst_1 : NormedAddCommGroup E] {f : β → E}\n  {μ : MeasureTheory.Measure β},\n  MeasureTheory.Memℒp f p →\n    p ≠ ⊤ → ∀ {ε : ENNReal}, ε ≠ 0 → ∃ g, MeasureTheory.snorm (f - ↑g) p μ < ε ∧ MeasureTheory.Memℒp (↑g) p :=\n\n/-- Any linear map `f : p →ₗ[K] V'` defined on a subspace `p` can be extended to the whole\nspace. -/\ntheorem ∀ {K : Type u_1} {V : Type u} {V' : Type u_2} [inst : DivisionRing K] [inst_1 : AddCommGroup V]\n  [inst_2 : AddCommGroup V'] [inst_3 : Module K V] [inst_4 : Module K V'] {p : Submodule K V}\n  (f : { x // x ∈ p } →ₗ[K] V'), ∃ g, LinearMap.comp g (Submodule.subtype p) = f :=\n\n/-- If the sequence with `n`-th term the the sup norm of `λ x, f (x + n)` on the interval `Icc 0 1`,\nfor `n ∈ ℤ`, is summable, then `f` is integrable on `ℝ`. -/\ntheorem ∀ {E : Type u_1} [inst : NormedAddCommGroup E] {f : C(ℝ, E)},\n  (Summable fun n => ‖ContinuousMap.restrict (Set.Icc 0 1) (ContinuousMap.comp f (ContinuousMap.addRight ↑n))‖) →\n    MeasureTheory.Integrable ↑f :=\n\n/-- If a formal multilinear series `p` represents the zero function at `x : E`, then the\nterms `p n (fun i ↦ y)` appearing the in sum are zero for any `n : ℕ`, `y : E`. -/\ntheorem ∀ {𝕜 : Type u_1} {E : Type u_2} {F : Type u_3} [inst : NontriviallyNormedField 𝕜] [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F]\n  {p : FormalMultilinearSeries 𝕜 E F} {x : E}, HasFPowerSeriesAt 0 p x → ∀ (n : ℕ) (y : E), (↑(p n) fun x => y) = 0 :=\n\n/-- Every Cauchy sequence has a limit. -/\ntheorem ∀ {α : Type u_1} [inst : LinearOrderedField α] {β : Type u_2} [inst_1 : Ring β] {abv : β → α}\n  [inst_2 : IsAbsoluteValue abv] [self : CauSeq.IsComplete β abv] (s : CauSeq β abv), ∃ b, s ≈ CauSeq.const abv b :=\n\n/-- Every equalizer of `(f, f)` is an isomorphism. -/\ntheorem ∀ {C : Type u} [inst : CategoryTheory.Category C] {X Y : C} {f : X ⟶ Y} {c : CategoryTheory.Limits.Fork f f},\n  CategoryTheory.Limits.IsLimit c → CategoryTheory.IsIso (CategoryTheory.Limits.Fork.ι c) :=\n\n/-- For `f : ℕ → α`, then `∑' k, f (k + i)` tends to zero. This does not require a summability\nassumption on `f`, as otherwise all sums are zero. -/\ntheorem ∀ {α : Type u_1} [inst : AddCommGroup α] [inst_1 : TopologicalSpace α] [inst_2 : TopologicalAddGroup α]\n  [inst_3 : T2Space α] (f : ℕ → α), Filter.Tendsto (fun i => ∑' (k : ℕ), f (k + i)) Filter.atTop (nhds 0) :=\n\n/-- Let `(p_n)` be a sequence and `f: ℕ → ℕ`. The sequence `(q_k)_{k ∈ ℕ}` with `q_k = p_{f(k)}` is called a rearrangement of `(p_n)`. Show that if `f` is an injection, the limit of a sequence is unaffected by rearrangement. -/\ntheorem", "choices": ["∀ {α : Type u_1} [inst : TopologicalSpace α] {a : α} {f : ℕ → ℕ} {p q : ℕ → α},\n  Function.Injective f →\n  (∀ k, q k = p (f k)) → (Filter.Tendsto p Filter.atTop (nhds a) ↔ Filter.Tendsto q Filter.atTop (nhds a)) ", "∀ {α : Type u_1} [inst : TopologicalSpace α] {f : ℕ → ℕ} {p : ℕ → α},\n  Function.Injective f → Filter.Tendsto p Filter.atTop (nhds (lim p)) → Filter.Tendsto (p ∘ f) Filter.atTop (nhds (lim p)) ", "∀ {α : Type u_1} [inst : TopologicalSpace α] {p : ℕ → α} {f : ℕ → ℕ},\n  Function.Injective f →\n    (Filter.Tendsto p Filter.atTop (𝓝 (l : α)) ↔ Filter.Tendsto (p ∘ f) Filter.atTop (𝓝 l)) ", "∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : LinearOrder α] [inst_2 : OrderTopology α] {a : α} {f : ℕ → ℕ}\n  {p : ℕ → α},\n    Function.Injective f →\n    Filter.Tendsto p Filter.atTop (nhds a) →\n    Filter.Tendsto (fun n => p (f n)) Filter.atTop (nhds a) ", "∀ {α : Type u_1} [inst : TopologicalSpace α] {f : ℕ → ℕ} {p : ℕ → α},\n  Function.Injective f →\n  (∃ a : α, Filter.Tendsto p Filter.atTop (nhds a)) ↔\n  (∃ a : α, Filter.Tendsto (p ∘ f) Filter.atTop (nhds a)) ", "∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : T1Space α] {f : ℕ → ℕ} (hf : Function.Injective f) {p : ℕ → α},\n  Filter.Tendsto p Filter.atTop (nhds l) → Filter.Tendsto (p ∘ f) Filter.atTop (nhds l) ", "∀ {α : Type u_1} [inst : TopologicalSpace α] {f : ℕ → ℕ} {p : ℕ → α},\n  Function.Injective f →\n    (∀ l, Filter.Tendsto p Filter.atTop (nhds l) ↔ Filter.Tendsto (p ∘ f) Filter.atTop (nhds l)) ", "∀ {α : Type u_1} [inst : TopologicalSpace α] {p : ℕ → α} {f : ℕ → ℕ},\n  Function.Injective f → Filter.Tendsto p Filter.atTop (nhds (lim p)) → Filter.Tendsto (p ∘ f) Filter.atTop (nhds (lim p)) ", "∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : AddCommMonoid α] {f : ℕ → α},\n  HasSum f → ∀ (g : ℕ → ℕ), Function.Injective g → HasSum (f ∘ g) ", "∀ {α : Type u_1} [inst : TopologicalSpace α] {a : α} {f : ℕ → ℕ} {p q : ℕ → α},\n  Function.Injective f →\n  Filter.Tendsto p Filter.atTop (nhds a) →\n  (q = fun k => p (f k)) →\n  Filter.Tendsto q Filter.atTop (nhds a) "]}
{"docString": "Let `𝒯` be the collection of open subsets of a metric space `M`, and `𝒦` the collection of closed subsets. Show that there is a bijection from `𝒯` onto `𝒦`.", "prompts": "[{\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : T2Space α] {s : Set α},\\n  IsCompact s →\\n    ∀ {ι : Type u_1} (t : Finset ι) (U : ι → Set α),\\n      (∀ (i : ι), i ∈ t → IsOpen (U i)) →\\n        s ⊆ ⋃ (i : ι) (_ : i ∈ t), U i →\\n          ∃ K, (∀ (i : ι), IsCompact (K i)) ∧ (∀ (i : ι), K i ⊆ U i) ∧ s = ⋃ (i : ι) (_ : i ∈ t), K i\",\n  \"isProp\": true,\n  \"docString\":\n  \"For every finite open cover `Uᵢ` of a compact set, there exists a compact cover `Kᵢ ⊆ Uᵢ`. \"},\n {\"theorem\":\n  \"∀ {ι : Type uι} {E : Type uE} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] [inst_2 : FiniteDimensional ℝ E]\\n  {H : Type uH} [inst_3 : TopologicalSpace H] (I : ModelWithCorners ℝ E H) {M : Type u_1} [inst_4 : MetricSpace M]\\n  [inst_5 : ChartedSpace H M] [inst_6 : SmoothManifoldWithCorners I M] [inst_7 : SigmaCompactSpace M] {K U : ι → Set M},\\n  (∀ (i : ι), IsClosed (K i)) →\\n    (∀ (i : ι), IsOpen (U i)) →\\n      (∀ (i : ι), K i ⊆ U i) →\\n        LocallyFinite K → ∃ δ, (∀ (x : M), 0 < ↑δ x) ∧ ∀ (i : ι) (x : M), x ∈ K i → Metric.closedBall x (↑δ x) ⊆ U i\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `M` be a smooth σ-compact manifold with a metric. Let `K : ι → Set M` be a locally finite\\nfamily of closed sets, let `U : ι → Set M` be a family of open sets such that `K i ⊆ U i` for all\\n`i`. Then there exists a positive smooth function `δ : M → ℝ≥0` such that for any `i` and `x ∈ K i`,\\nwe have `Metric.closedBall x (δ x) ⊆ U i`. \"},\n {\"theorem\":\n  \"∀ {ι : Type u_2} {X : Type u_1} [inst : MetricSpace X] {K U : ι → Set X},\\n  (∀ (i : ι), IsClosed (K i)) →\\n    (∀ (i : ι), IsOpen (U i)) →\\n      (∀ (i : ι), K i ⊆ U i) →\\n        LocallyFinite K → ∃ δ, (∀ (x : X), 0 < ↑δ x) ∧ ∀ (i : ι) (x : X), x ∈ K i → Metric.closedBall x ↑(↑δ x) ⊆ U i\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `X` be a metric space. Let `K : ι → Set X` be a locally finite family of closed sets, let\\n`U : ι → Set X` be a family of open sets such that `K i ⊆ U i` for all `i`. Then there exists a\\npositive continuous function `δ : C(X, ℝ≥0)` such that for any `i` and `x ∈ K i`, we have\\n`Metric.closedBall x (δ x) ⊆ U i`. \"},\n {\"theorem\":\n  \"∀ {ι : Type u_2} {X : Type u_1} [inst : MetricSpace X] {K U : ι → Set X},\\n  (∀ (i : ι), IsClosed (K i)) →\\n    (∀ (i : ι), IsOpen (U i)) →\\n      (∀ (i : ι), K i ⊆ U i) →\\n        LocallyFinite K → ∃ δ, (∀ (x : X), 0 < ↑δ x) ∧ ∀ (i : ι) (x : X), x ∈ K i → Metric.closedBall x (↑δ x) ⊆ U i\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `X` be a metric space. Let `K : ι → Set X` be a locally finite family of closed sets, let\\n`U : ι → Set X` be a family of open sets such that `K i ⊆ U i` for all `i`. Then there exists a\\npositive continuous function `δ : C(X, ℝ)` such that for any `i` and `x ∈ K i`, we have\\n`Metric.closedBall x (δ x) ⊆ U i`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : MeasurableSpace α] [inst_1 : TopologicalSpace α] {μ : MeasureTheory.Measure α}\\n  [inst_2 : MeasureTheory.Measure.Regular μ] ⦃U : Set α⦄,\\n  IsOpen U → ∀ {r : ENNReal}, r < ↑↑μ U → ∃ K, K ⊆ U ∧ IsCompact K ∧ r < ↑↑μ K\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `μ` is a regular measure, then any open set can be approximated by a compact subset. \"},\n {\"theorem\":\n  \"∀ {ι : Type uι} {E : Type uE} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] [inst_2 : FiniteDimensional ℝ E]\\n  {H : Type uH} [inst_3 : TopologicalSpace H] (I : ModelWithCorners ℝ E H) {M : Type u_1} [inst_4 : EMetricSpace M]\\n  [inst_5 : ChartedSpace H M] [inst_6 : SmoothManifoldWithCorners I M] [inst_7 : SigmaCompactSpace M] {K U : ι → Set M},\\n  (∀ (i : ι), IsClosed (K i)) →\\n    (∀ (i : ι), IsOpen (U i)) →\\n      (∀ (i : ι), K i ⊆ U i) →\\n        LocallyFinite K →\\n          ∃ δ, (∀ (x : M), 0 < ↑δ x) ∧ ∀ (i : ι) (x : M), x ∈ K i → EMetric.closedBall x (ENNReal.ofReal (↑δ x)) ⊆ U i\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `M` be a smooth σ-compact manifold with extended distance. Let `K : ι → Set M` be a locally\\nfinite family of closed sets, let `U : ι → Set M` be a family of open sets such that `K i ⊆ U i` for\\nall `i`. Then there exists a positive smooth function `δ : M → ℝ≥0` such that for any `i` and\\n`x ∈ K i`, we have `EMetric.closedBall x (δ x) ⊆ U i`. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : UniformSpace X] [inst_1 : Filter.IsCountablyGenerated (uniformity X)],\\n  TopologicalSpace.PseudoMetrizableSpace X\",\n  \"isProp\": true,\n  \"docString\":\n  \"A uniform space with countably generated `𝓤 X` is pseudo metrizable. \"},\n {\"theorem\":\n  \"∀ {ι : Type u_2} {X : Type u_1} [inst : EMetricSpace X] {K U : ι → Set X},\\n  (∀ (i : ι), IsClosed (K i)) →\\n    (∀ (i : ι), IsOpen (U i)) →\\n      (∀ (i : ι), K i ⊆ U i) →\\n        LocallyFinite K →\\n          ∀ (x : X),\\n            ∀ᶠ (p : ENNReal × X) in nhds 0 ×ˢ nhds x, ∀ (i : ι), p.snd ∈ K i → EMetric.closedBall p.snd p.fst ⊆ U i\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `K : ι → Set X` be a locally finite family of closed sets in an emetric space. Let\\n`U : ι → Set X` be a family of open sets such that `K i ⊆ U i` for all `i`. Then for any point\\n`x : X`, for sufficiently small `r : ℝ≥0∞` and for `y` sufficiently close to `x`, for all `i`, if\\n`y ∈ K i`, then `EMetric.closedBall y r ⊆ U i`. \"},\n {\"theorem\":\n  \"∀ {E : Type uE} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] [inst_2 : FiniteDimensional ℝ E] {H : Type uH}\\n  [inst_3 : TopologicalSpace H] (I : ModelWithCorners ℝ E H) {M : Type uM} [inst_4 : TopologicalSpace M]\\n  [inst_5 : ChartedSpace H M] {s : Set M} {U : M → Set M} [inst_6 : T2Space M] [inst_7 : SigmaCompactSpace M],\\n  IsClosed s → (∀ (x : M), x ∈ s → U x ∈ nhds x) → ∃ ι f, SmoothBumpCovering.IsSubordinate f U\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `M` be a smooth manifold with corners modelled on a finite dimensional real vector space.\\nSuppose also that `M` is a Hausdorff `σ`-compact topological space. Let `s` be a closed set\\nin `M` and `U : M → Set M` be a collection of sets such that `U x ∈ 𝓝 x` for every `x ∈ s`.\\nThen there exists a smooth bump covering of `s` that is subordinate to `U`. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : MeasurableSpace α] [inst_1 : TopologicalSpace α] {μ : MeasureTheory.Measure α}\\n  [inst_2 : MeasureTheory.Measure.WeaklyRegular μ] ⦃U : Set α⦄,\\n  IsOpen U → ∀ {r : ENNReal}, r < ↑↑μ U → ∃ F, F ⊆ U ∧ IsClosed F ∧ r < ↑↑μ F\",\n  \"isProp\": true,\n  \"docString\":\n  \"If `μ` is a weakly regular measure, then any open set can be approximated by a closed subset. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : PseudoEMetricSpace X] [inst_1 : MeasurableSpace X] (μ : MeasureTheory.Measure X),\\n  MeasureTheory.Measure.InnerRegular μ IsClosed IsOpen\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a metric space (or even a pseudo emetric space), an open set can be approximated from inside\\nby closed sets. \"},\n {\"theorem\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : BaireSpace α] {S : Set (Set α)},\\n  (∀ (s : Set α), s ∈ S → IsOpen s) → Set.Countable S → (∀ (s : Set α), s ∈ S → Dense s) → Dense (⋂₀ S)\",\n  \"isProp\": true,\n  \"docString\":\n  \"Baire theorem: a countable intersection of dense open sets is dense. Formulated here with ⋂₀. \"},\n {\"theorem\":\n  \"∀ {ι : Type u_2} {X : Type u_1} [inst : EMetricSpace X] {K U : ι → Set X},\\n  (∀ (i : ι), IsClosed (K i)) →\\n    (∀ (i : ι), IsOpen (U i)) →\\n      (∀ (i : ι), K i ⊆ U i) →\\n        LocallyFinite K →\\n          ∃ δ, (∀ (x : X), 0 < ↑δ x) ∧ ∀ (i : ι) (x : X), x ∈ K i → EMetric.closedBall x (ENNReal.ofReal (↑δ x)) ⊆ U i\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `X` be an extended metric space. Let `K : ι → Set X` be a locally finite family of closed\\nsets, let `U : ι → Set X` be a family of open sets such that `K i ⊆ U i` for all `i`. Then there\\nexists a positive continuous function `δ : C(X, ℝ)` such that for any `i` and `x ∈ K i`,\\nwe have `EMetric.closedBall x (ENNReal.ofReal (δ x)) ⊆ U i`. \"},\n {\"theorem\":\n  \"∀ {ι : Type u_2} {X : Type u_1} [inst : EMetricSpace X] {K U : ι → Set X},\\n  (∀ (i : ι), IsClosed (K i)) →\\n    (∀ (i : ι), IsOpen (U i)) →\\n      (∀ (i : ι), K i ⊆ U i) →\\n        LocallyFinite K → ∃ δ, (∀ (x : X), 0 < ↑δ x) ∧ ∀ (i : ι) (x : X), x ∈ K i → EMetric.closedBall x (↑δ x) ⊆ U i\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `X` be an extended metric space. Let `K : ι → Set X` be a locally finite family of closed\\nsets, let `U : ι → Set X` be a family of open sets such that `K i ⊆ U i` for all `i`. Then there\\nexists a positive continuous function `δ : C(X, ℝ≥0∞)` such that for any `i` and `x ∈ K i`,\\nwe have `EMetric.closedBall x (δ x) ⊆ U i`. \"},\n {\"theorem\":\n  \"∀ {ι : Type u_2} {X : Type u_1} [inst : EMetricSpace X] {K U : ι → Set X},\\n  (∀ (i : ι), IsClosed (K i)) →\\n    (∀ (i : ι), IsOpen (U i)) →\\n      (∀ (i : ι), K i ⊆ U i) →\\n        LocallyFinite K → ∃ δ, (∀ (x : X), 0 < ↑δ x) ∧ ∀ (i : ι) (x : X), x ∈ K i → EMetric.closedBall x ↑(↑δ x) ⊆ U i\",\n  \"isProp\": true,\n  \"docString\":\n  \"Let `X` be an extended metric space. Let `K : ι → Set X` be a locally finite family of closed\\nsets, let `U : ι → Set X` be a family of open sets such that `K i ⊆ U i` for all `i`. Then there\\nexists a positive continuous function `δ : C(X, ℝ≥0)` such that for any `i` and `x ∈ K i`,\\nwe have `EMetric.closedBall x (δ x) ⊆ U i`. \"},\n {\"theorem\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : SigmaCompactSpace X] [inst_2 : MeasurableSpace X]\\n  (μ : MeasureTheory.Measure X), MeasureTheory.Measure.InnerRegular μ IsCompact IsClosed\",\n  \"isProp\": true,\n  \"docString\":\n  \"In a `σ`-compact space, any closed set can be approximated by a compact subset. \"},\n {\"theorem\":\n  \"∀ {G : Type w} [inst : TopologicalSpace G] [inst_1 : MulOneClass G] [inst_2 : ContinuousMul G] {K U : Set G},\\n  IsCompact K → IsOpen U → K ⊆ U → ∃ V, V ∈ nhds 1 ∧ K * V ⊆ U\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given a compact set `K` inside an open set `U`, there is an open neighborhood `V` of `1`\\nsuch that `K * V ⊆ U`. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : T3Space α] {x y : α},\\n  x ≠ y →\\n    ∃ U₁,\\n      U₁ ∈ nhds x ∧\\n        ∃ V₁,\\n          V₁ ∈ nhds x ∧\\n            ∃ U₂,\\n              U₂ ∈ nhds y ∧\\n                ∃ V₂,\\n                  V₂ ∈ nhds y ∧ IsClosed V₁ ∧ IsClosed V₂ ∧ IsOpen U₁ ∧ IsOpen U₂ ∧ V₁ ⊆ U₁ ∧ V₂ ⊆ U₂ ∧ Disjoint U₁ U₂\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given two points `x ≠ y`, we can find neighbourhoods `x ∈ V₁ ⊆ U₁` and `y ∈ V₂ ⊆ U₂`,\\nwith the `Vₖ` closed and the `Uₖ` open, such that the `Uₖ` are disjoint. \"},\n {\"theorem\":\n  \"∀ {α : Type u} [inst : EMetricSpace α] {s : Set α}, IsClosed s → IsClosed {t | ↑t ⊆ s}\",\n  \"isProp\": true,\n  \"docString\": \"Subsets of a given closed subset form a closed set \"},\n {\"theorem\":\n  \"∀ {G : Type w} [inst : TopologicalSpace G] [inst_1 : MulOneClass G] [inst_2 : ContinuousMul G] {K U : Set G},\\n  IsCompact K → IsOpen U → K ⊆ U → ∃ V, V ∈ nhds 1 ∧ V * K ⊆ U\",\n  \"isProp\": true,\n  \"docString\":\n  \"Given a compact set `K` inside an open set `U`, there is an open neighborhood `V` of `1`\\nsuch that `V * K ⊆ U`. \"}]\n", "prompt_cons": "/-- For every finite open cover `Uᵢ` of a compact set, there exists a compact cover `Kᵢ ⊆ Uᵢ`. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : T2Space α] {s : Set α},\n  IsCompact s →\n    ∀ {ι : Type u_1} (t : Finset ι) (U : ι → Set α),\n      (∀ (i : ι), i ∈ t → IsOpen (U i)) →\n        s ⊆ ⋃ (i : ι) (_ : i ∈ t), U i →\n          ∃ K, (∀ (i : ι), IsCompact (K i)) ∧ (∀ (i : ι), K i ⊆ U i) ∧ s = ⋃ (i : ι) (_ : i ∈ t), K i :=\n\n/-- Let `M` be a smooth σ-compact manifold with a metric. Let `K : ι → Set M` be a locally finite\nfamily of closed sets, let `U : ι → Set M` be a family of open sets such that `K i ⊆ U i` for all\n`i`. Then there exists a positive smooth function `δ : M → ℝ≥0` such that for any `i` and `x ∈ K i`,\nwe have `Metric.closedBall x (δ x) ⊆ U i`. -/\ntheorem ∀ {ι : Type uι} {E : Type uE} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] [inst_2 : FiniteDimensional ℝ E]\n  {H : Type uH} [inst_3 : TopologicalSpace H] (I : ModelWithCorners ℝ E H) {M : Type u_1} [inst_4 : MetricSpace M]\n  [inst_5 : ChartedSpace H M] [inst_6 : SmoothManifoldWithCorners I M] [inst_7 : SigmaCompactSpace M] {K U : ι → Set M},\n  (∀ (i : ι), IsClosed (K i)) →\n    (∀ (i : ι), IsOpen (U i)) →\n      (∀ (i : ι), K i ⊆ U i) →\n        LocallyFinite K → ∃ δ, (∀ (x : M), 0 < ↑δ x) ∧ ∀ (i : ι) (x : M), x ∈ K i → Metric.closedBall x (↑δ x) ⊆ U i :=\n\n/-- Let `X` be a metric space. Let `K : ι → Set X` be a locally finite family of closed sets, let\n`U : ι → Set X` be a family of open sets such that `K i ⊆ U i` for all `i`. Then there exists a\npositive continuous function `δ : C(X, ℝ≥0)` such that for any `i` and `x ∈ K i`, we have\n`Metric.closedBall x (δ x) ⊆ U i`. -/\ntheorem ∀ {ι : Type u_2} {X : Type u_1} [inst : MetricSpace X] {K U : ι → Set X},\n  (∀ (i : ι), IsClosed (K i)) →\n    (∀ (i : ι), IsOpen (U i)) →\n      (∀ (i : ι), K i ⊆ U i) →\n        LocallyFinite K → ∃ δ, (∀ (x : X), 0 < ↑δ x) ∧ ∀ (i : ι) (x : X), x ∈ K i → Metric.closedBall x ↑(↑δ x) ⊆ U i :=\n\n/-- Let `X` be a metric space. Let `K : ι → Set X` be a locally finite family of closed sets, let\n`U : ι → Set X` be a family of open sets such that `K i ⊆ U i` for all `i`. Then there exists a\npositive continuous function `δ : C(X, ℝ)` such that for any `i` and `x ∈ K i`, we have\n`Metric.closedBall x (δ x) ⊆ U i`. -/\ntheorem ∀ {ι : Type u_2} {X : Type u_1} [inst : MetricSpace X] {K U : ι → Set X},\n  (∀ (i : ι), IsClosed (K i)) →\n    (∀ (i : ι), IsOpen (U i)) →\n      (∀ (i : ι), K i ⊆ U i) →\n        LocallyFinite K → ∃ δ, (∀ (x : X), 0 < ↑δ x) ∧ ∀ (i : ι) (x : X), x ∈ K i → Metric.closedBall x (↑δ x) ⊆ U i :=\n\n/-- If `μ` is a regular measure, then any open set can be approximated by a compact subset. -/\ntheorem ∀ {α : Type u_1} [inst : MeasurableSpace α] [inst_1 : TopologicalSpace α] {μ : MeasureTheory.Measure α}\n  [inst_2 : MeasureTheory.Measure.Regular μ] ⦃U : Set α⦄,\n  IsOpen U → ∀ {r : ENNReal}, r < ↑↑μ U → ∃ K, K ⊆ U ∧ IsCompact K ∧ r < ↑↑μ K :=\n\n/-- Let `M` be a smooth σ-compact manifold with extended distance. Let `K : ι → Set M` be a locally\nfinite family of closed sets, let `U : ι → Set M` be a family of open sets such that `K i ⊆ U i` for\nall `i`. Then there exists a positive smooth function `δ : M → ℝ≥0` such that for any `i` and\n`x ∈ K i`, we have `EMetric.closedBall x (δ x) ⊆ U i`. -/\ntheorem ∀ {ι : Type uι} {E : Type uE} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] [inst_2 : FiniteDimensional ℝ E]\n  {H : Type uH} [inst_3 : TopologicalSpace H] (I : ModelWithCorners ℝ E H) {M : Type u_1} [inst_4 : EMetricSpace M]\n  [inst_5 : ChartedSpace H M] [inst_6 : SmoothManifoldWithCorners I M] [inst_7 : SigmaCompactSpace M] {K U : ι → Set M},\n  (∀ (i : ι), IsClosed (K i)) →\n    (∀ (i : ι), IsOpen (U i)) →\n      (∀ (i : ι), K i ⊆ U i) →\n        LocallyFinite K →\n          ∃ δ, (∀ (x : M), 0 < ↑δ x) ∧ ∀ (i : ι) (x : M), x ∈ K i → EMetric.closedBall x (ENNReal.ofReal (↑δ x)) ⊆ U i :=\n\n/-- A uniform space with countably generated `𝓤 X` is pseudo metrizable. -/\ntheorem ∀ {X : Type u_1} [inst : UniformSpace X] [inst_1 : Filter.IsCountablyGenerated (uniformity X)],\n  TopologicalSpace.PseudoMetrizableSpace X :=\n\n/-- Let `K : ι → Set X` be a locally finite family of closed sets in an emetric space. Let\n`U : ι → Set X` be a family of open sets such that `K i ⊆ U i` for all `i`. Then for any point\n`x : X`, for sufficiently small `r : ℝ≥0∞` and for `y` sufficiently close to `x`, for all `i`, if\n`y ∈ K i`, then `EMetric.closedBall y r ⊆ U i`. -/\ntheorem ∀ {ι : Type u_2} {X : Type u_1} [inst : EMetricSpace X] {K U : ι → Set X},\n  (∀ (i : ι), IsClosed (K i)) →\n    (∀ (i : ι), IsOpen (U i)) →\n      (∀ (i : ι), K i ⊆ U i) →\n        LocallyFinite K →\n          ∀ (x : X),\n            ∀ᶠ (p : ENNReal × X) in nhds 0 ×ˢ nhds x, ∀ (i : ι), p.snd ∈ K i → EMetric.closedBall p.snd p.fst ⊆ U i :=\n\n/-- Let `M` be a smooth manifold with corners modelled on a finite dimensional real vector space.\nSuppose also that `M` is a Hausdorff `σ`-compact topological space. Let `s` be a closed set\nin `M` and `U : M → Set M` be a collection of sets such that `U x ∈ 𝓝 x` for every `x ∈ s`.\nThen there exists a smooth bump covering of `s` that is subordinate to `U`. -/\ntheorem ∀ {E : Type uE} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] [inst_2 : FiniteDimensional ℝ E] {H : Type uH}\n  [inst_3 : TopologicalSpace H] (I : ModelWithCorners ℝ E H) {M : Type uM} [inst_4 : TopologicalSpace M]\n  [inst_5 : ChartedSpace H M] {s : Set M} {U : M → Set M} [inst_6 : T2Space M] [inst_7 : SigmaCompactSpace M],\n  IsClosed s → (∀ (x : M), x ∈ s → U x ∈ nhds x) → ∃ ι f, SmoothBumpCovering.IsSubordinate f U :=\n\n/-- If `μ` is a weakly regular measure, then any open set can be approximated by a closed subset. -/\ntheorem ∀ {α : Type u_1} [inst : MeasurableSpace α] [inst_1 : TopologicalSpace α] {μ : MeasureTheory.Measure α}\n  [inst_2 : MeasureTheory.Measure.WeaklyRegular μ] ⦃U : Set α⦄,\n  IsOpen U → ∀ {r : ENNReal}, r < ↑↑μ U → ∃ F, F ⊆ U ∧ IsClosed F ∧ r < ↑↑μ F :=\n\n/-- In a metric space (or even a pseudo emetric space), an open set can be approximated from inside\nby closed sets. -/\ntheorem ∀ {X : Type u_1} [inst : PseudoEMetricSpace X] [inst_1 : MeasurableSpace X] (μ : MeasureTheory.Measure X),\n  MeasureTheory.Measure.InnerRegular μ IsClosed IsOpen :=\n\n/-- Baire theorem: a countable intersection of dense open sets is dense. Formulated here with ⋂₀. -/\ntheorem ∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : BaireSpace α] {S : Set (Set α)},\n  (∀ (s : Set α), s ∈ S → IsOpen s) → Set.Countable S → (∀ (s : Set α), s ∈ S → Dense s) → Dense (⋂₀ S) :=\n\n/-- Let `X` be an extended metric space. Let `K : ι → Set X` be a locally finite family of closed\nsets, let `U : ι → Set X` be a family of open sets such that `K i ⊆ U i` for all `i`. Then there\nexists a positive continuous function `δ : C(X, ℝ)` such that for any `i` and `x ∈ K i`,\nwe have `EMetric.closedBall x (ENNReal.ofReal (δ x)) ⊆ U i`. -/\ntheorem ∀ {ι : Type u_2} {X : Type u_1} [inst : EMetricSpace X] {K U : ι → Set X},\n  (∀ (i : ι), IsClosed (K i)) →\n    (∀ (i : ι), IsOpen (U i)) →\n      (∀ (i : ι), K i ⊆ U i) →\n        LocallyFinite K →\n          ∃ δ, (∀ (x : X), 0 < ↑δ x) ∧ ∀ (i : ι) (x : X), x ∈ K i → EMetric.closedBall x (ENNReal.ofReal (↑δ x)) ⊆ U i :=\n\n/-- Let `X` be an extended metric space. Let `K : ι → Set X` be a locally finite family of closed\nsets, let `U : ι → Set X` be a family of open sets such that `K i ⊆ U i` for all `i`. Then there\nexists a positive continuous function `δ : C(X, ℝ≥0∞)` such that for any `i` and `x ∈ K i`,\nwe have `EMetric.closedBall x (δ x) ⊆ U i`. -/\ntheorem ∀ {ι : Type u_2} {X : Type u_1} [inst : EMetricSpace X] {K U : ι → Set X},\n  (∀ (i : ι), IsClosed (K i)) →\n    (∀ (i : ι), IsOpen (U i)) →\n      (∀ (i : ι), K i ⊆ U i) →\n        LocallyFinite K → ∃ δ, (∀ (x : X), 0 < ↑δ x) ∧ ∀ (i : ι) (x : X), x ∈ K i → EMetric.closedBall x (↑δ x) ⊆ U i :=\n\n/-- Let `X` be an extended metric space. Let `K : ι → Set X` be a locally finite family of closed\nsets, let `U : ι → Set X` be a family of open sets such that `K i ⊆ U i` for all `i`. Then there\nexists a positive continuous function `δ : C(X, ℝ≥0)` such that for any `i` and `x ∈ K i`,\nwe have `EMetric.closedBall x (δ x) ⊆ U i`. -/\ntheorem ∀ {ι : Type u_2} {X : Type u_1} [inst : EMetricSpace X] {K U : ι → Set X},\n  (∀ (i : ι), IsClosed (K i)) →\n    (∀ (i : ι), IsOpen (U i)) →\n      (∀ (i : ι), K i ⊆ U i) →\n        LocallyFinite K → ∃ δ, (∀ (x : X), 0 < ↑δ x) ∧ ∀ (i : ι) (x : X), x ∈ K i → EMetric.closedBall x ↑(↑δ x) ⊆ U i :=\n\n/-- In a `σ`-compact space, any closed set can be approximated by a compact subset. -/\ntheorem ∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : SigmaCompactSpace X] [inst_2 : MeasurableSpace X]\n  (μ : MeasureTheory.Measure X), MeasureTheory.Measure.InnerRegular μ IsCompact IsClosed :=\n\n/-- Given a compact set `K` inside an open set `U`, there is an open neighborhood `V` of `1`\nsuch that `K * V ⊆ U`. -/\ntheorem ∀ {G : Type w} [inst : TopologicalSpace G] [inst_1 : MulOneClass G] [inst_2 : ContinuousMul G] {K U : Set G},\n  IsCompact K → IsOpen U → K ⊆ U → ∃ V, V ∈ nhds 1 ∧ K * V ⊆ U :=\n\n/-- Given two points `x ≠ y`, we can find neighbourhoods `x ∈ V₁ ⊆ U₁` and `y ∈ V₂ ⊆ U₂`,\nwith the `Vₖ` closed and the `Uₖ` open, such that the `Uₖ` are disjoint. -/\ntheorem ∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : T3Space α] {x y : α},\n  x ≠ y →\n    ∃ U₁,\n      U₁ ∈ nhds x ∧\n        ∃ V₁,\n          V₁ ∈ nhds x ∧\n            ∃ U₂,\n              U₂ ∈ nhds y ∧\n                ∃ V₂,\n                  V₂ ∈ nhds y ∧ IsClosed V₁ ∧ IsClosed V₂ ∧ IsOpen U₁ ∧ IsOpen U₂ ∧ V₁ ⊆ U₁ ∧ V₂ ⊆ U₂ ∧ Disjoint U₁ U₂ :=\n\n/-- Subsets of a given closed subset form a closed set -/\ntheorem ∀ {α : Type u} [inst : EMetricSpace α] {s : Set α}, IsClosed s → IsClosed {t | ↑t ⊆ s} :=\n\n/-- Given a compact set `K` inside an open set `U`, there is an open neighborhood `V` of `1`\nsuch that `V * K ⊆ U`. -/\ntheorem ∀ {G : Type w} [inst : TopologicalSpace G] [inst_1 : MulOneClass G] [inst_2 : ContinuousMul G] {K U : Set G},\n  IsCompact K → IsOpen U → K ⊆ U → ∃ V, V ∈ nhds 1 ∧ V * K ⊆ U :=\n\n/-- Let `𝒯` be the collection of open subsets of a metric space `M`, and `𝒦` the collection of closed subsets. Show that there is a bijection from `𝒯` onto `𝒦`. -/\ntheorem", "choices": ["∀ {M : Type u_1} [inst : MetricSpace M],\n  ∃ (f : Set M → Set M), (∀ (U : Set M), IsOpen U → IsClosed (f U)) ∧ (∀ (K : Set M), IsClosed K → IsOpen (f K)) ∧\n    (∀ (U₁ U₂ : Set M), IsOpen U₁ → IsOpen U₂ → f U₁ = f U₂ → U₁ = U₂) ∧\n    (∀ (K₁ K₂ : Set M), IsClosed K₁ → IsClosed K₂ → f K₁ = f K₂ → K₁ = K₂) ", "∀ {M : Type u_1} [inst : MetricSpace M],\n  ∃ (f : Set M → Set M), (∀ U, IsOpen U → IsClosed (f U)) ∧ (∀ K, IsClosed K → ∃ U, IsOpen U ∧ f U = K) ∧ (∀ U₁ U₂, IsOpen U₁ → IsOpen U₂ → f U₁ = f U₂ → U₁ = U₂) ", "∀ {M : Type u_1} [inst : MetricSpace M],\n  ∃ (f : {s : Set M // IsOpen s} ≃ {s : Set M // IsClosed s}),\n    ∀ (s : {s : Set M // IsOpen s}), IsOpen (f s).val ∧ IsClosed (f s).val ", "∀ {M : Type u_1} [inst : MetricSpace M],\n  ∃ (f : Set (Set M) → Set (Set M)),\n    (∀ (T : Set M), IsOpen T → IsClosed (f T)) ∧\n      (∀ (K : Set M), IsClosed K → ∃ T, IsOpen T ∧ f T = K) ∧\n        (∀ (T₁ T₂ : Set M), IsOpen T₁ → IsOpen T₂ → f T₁ = f T₂ → T₁ = T₂) ", "∀ {M : Type u_1} [inst : MetricSpace M] [inst_1 : MeasurableSpace M] (μ : MeasureTheory.Measure M),\n  (∃ (Φ : Set (Set M) → Set (Set M)),\n    (∀ (U : Set M), IsOpen U → IsClosed (Φ U)) ∧\n      (∀ (U : Set M), IsOpen U → Uᶜ = Φ U) ∧\n        (∀ (K : Set M), IsClosed K → Φ Kᶜ = K) ∧\n          ∀ (U₁ U₂ : Set M), IsOpen U₁ → IsOpen U₂ → (U₁ = U₂ ↔ Φ U₁ = Φ U₂)) ", "∀ {X : Type u_1} [inst : MetricSpace X],\n  ∃ (f : Set (Set X)), (∀ (s : Set X), IsOpen s → f s = sᶜ) ∧ (∀ (s : Set X), IsClosed s → f s = sᶜ) ∧\n    ∀ (s₁ s₂ : Set X), IsOpen s₁ → IsOpen s₂ → (f s₁ = f s₂ → s₁ = s₂) ∧ (f s₁ᶜ = f s₂ᶜ → s₁ᶜ = s₂ᶜ) ", "∀ {X : Type u_1} [inst : MetricSpace X],\n  ∃ (φ : {s // IsOpen s} ≃ {s // IsClosed s}), True ", "∀ {M : Type u} [inst : MetricSpace M], ∃ (ψ : {U // IsOpen U} ≃ {K // IsClosed K}), True ", "∀ {X : Type u_1} [inst : MetricSpace X],\n  ∃ (F : Set (Set X) → Set X),\n    (∀ (U : Set X), IsOpen U → IsClosed (F U)) ∧\n      (∀ (C : Set X), IsClosed C → ∃ U, IsOpen U ∧ C = F U) ∧\n        (∀ (U1 U2 : Set X), IsOpen U1 → IsOpen U2 → F U1 = F U2 → U1 = U2) ", "∀ {M : Type u} [inst : MetricSpace M], ∃ (ψ : {U // IsOpen U} ≃ {K // IsClosed K}), true "]}
