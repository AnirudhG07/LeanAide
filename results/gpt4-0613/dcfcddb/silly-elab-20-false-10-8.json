{"total-prompts": 40,
 "temperature": 0.8,
 "query-number": 10,
 "number-similar-sentences": 20,
 "include-fixed": false,
 "failures":
 ["Every set of Borel measure zero is Lebesgue measurable.",
  "There is no field of order `10`."],
 "elaborated-prompts":
 [{"theorem": "∀ {p : ℕ}, Nat.Prime p → p = 2 ∨ Odd p",
   "some-correct": null,
   "prompt": "Every prime number is `2` or odd.",
   "groups":
   [["∀ {p : ℕ}, Nat.Prime p → p = 2 ∨ Odd p",
     "∀ {p : ℕ}, Nat.Prime p → p = 2 ∨ Odd p",
     "∀ {p : ℕ}, Nat.Prime p → p = 2 ∨ Odd p"],
    ["∀ {p : ℕ} [inst : Fact (Nat.Prime p)], p = 2 ∨ Odd p",
     "∀ {p : ℕ} [inst : Fact (Nat.Prime p)], p = 2 ∨ Odd p"]],
   "correct": null,
   "comments": "",
   "all-elabs":
   ["∀ {p : ℕ} [inst : Fact (Nat.Prime p)], p = 2 ∨ Odd p",
    "∀ {p : ℕ}, Nat.Prime p → p = 2 ∨ Odd p",
    "∀ {p : ℕ}, Nat.Prime p → p = 2 ∨ Odd p",
    "∀ {p : ℕ} [inst : Fact (Nat.Prime p)], p = 2 ∨ Odd p",
    "∀ {p : ℕ}, Nat.Prime p → p = 2 ∨ Odd p",
    "∀ {p : ℕ} [inst : Fact (Nat.Prime p)], p = 2 ∨ Odd p",
    "∀ {p : ℕ} [inst : Fact (Nat.Prime p)], p = 2 ∨ Odd p",
    "∀ {p : ℕ}, Nat.Prime p → p = 2 ∨ Odd p",
    "∀ {p : ℕ} [inst : Fact (Nat.Prime p)], p = 2 ∨ Odd p",
    "∀ {p : ℕ} [inst : Fact (Nat.Prime p)], p = 2 ∨ Odd p"]},
  {"theorem": "Set.Infinite {n | Odd n}",
   "some-correct": null,
   "prompt": "There are infinitely many odd natural numbers.",
   "groups":
   [["Set.Infinite {n | Odd n}",
     "Set.Infinite {n | Odd n}",
     "Set.Infinite {n | Odd n}",
     "Set.Infinite {n | Odd n}"],
    ["∃ᶠ (n : ℕ) in Filter.atTop, Odd n"]],
   "correct": null,
   "comments": "",
   "all-elabs":
   ["Set.Infinite {n : ℕ | Odd n}",
    "Set.Infinite {n : ℕ | Odd n }",
    "∃ᶠ (n : ℕ) in Filter.atTop, Odd n",
    "Set.Infinite {n : ℕ | Odd n}",
    "Set.Infinite {n : ℕ | Odd n}",
    "Set.Infinite {n : ℕ | Odd n}",
    "Set.Infinite {n : ℕ | Odd n}",
    "Set.Infinite {n : ℕ | Odd n}",
    "∃ᶠ (m : ℕ) in Filter.atTop, m % 2 = 1"]},
  {"theorem": "Nat.minFac 2 + 1 = 3",
   "some-correct": null,
   "prompt": "The smallest odd prime is `3`.",
   "groups":
   [["Nat.minFac 2 + 1 = 3", "Nat.minFac 9 = 3", "Nat.minFac 9 = 3"],
    ["∀ (p : ℕ) [inst : Fact (Nat.Prime p)], p % 2 = 1 → p ≥ 3"],
    ["∀ (p : ℕ), Nat.Prime p → Odd p → 3 ≤ p"]],
   "correct": null,
   "comments": "",
   "all-elabs":
   ["Nat.minFac 2 + 1 = 3",
    "∀ (p : ℕ), Nat.Prime p → Odd p → 3 ≤ p",
    "Nat.minFac 9 = 3",
    "∀ (p : ℕ) [inst : Fact (Nat.Prime p)], p % 2 = 1 → p ≥ 3",
    "Nat.minFac 9 = 3",
    "Nat.minFac 9 = 3",
    "∀ (p : ℕ), Nat.Prime p → Odd p → 3 ≤ p"]},
  {"theorem": "Set.Infinite {p | Nat.Prime p ∧ Odd p}",
   "some-correct": null,
   "prompt": "There are infinitely many odd prime numbers.",
   "groups":
   [["Set.Infinite {p | Nat.Prime p ∧ Odd p}",
     "Set.Infinite {p | Nat.Prime p ∧ Odd p}",
     "Set.Infinite {p | Nat.Prime p ∧ Odd p}",
     "Set.Infinite {p | Nat.Prime p ∧ Odd p}",
     "Set.Infinite {p | Nat.Prime p ∧ Odd p}"]],
   "correct": null,
   "comments": "",
   "all-elabs":
   ["Set.Infinite {p | Nat.Prime p ∧ Odd p}",
    "Set.Infinite {p : ℕ | Nat.Prime p ∧ Odd p}",
    "Set.Infinite { p : ℕ | Nat.Prime p ∧ Odd p }",
    "Set.Infinite {p | Nat.Prime p ∧ Odd p}",
    "Set.Infinite {p | Nat.Prime p ∧ Odd p}",
    "Set.Infinite {p | Nat.Prime p ∧ Odd p}",
    "Set.Infinite {p | Nat.Prime p ∧ Odd p}",
    "Set.Infinite {p : ℕ | Nat.Prime p ∧ Odd p}",
    "Set.Infinite {p | Nat.Prime p ∧ Odd p}",
    "Set.Infinite {p | Nat.Prime p ∧ Odd p}"]},
  {"theorem":
   "∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V],\n  Module.rank K V = 2 → FiniteDimensional K V",
   "some-correct": null,
   "prompt":
   "If a vector space has dimension `2` then it is finite dimensional.",
   "groups":
   [["∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V],\n  Module.rank K V = 2 → FiniteDimensional K V",
     "∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V],\n  Module.rank K V = 2 → FiniteDimensional K V",
     "∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V],\n  Module.rank K V = 2 → FiniteDimensional K V",
     "∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V],\n  Module.rank K V = 2 → FiniteDimensional K V",
     "∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V],\n  Module.rank K V = 2 → FiniteDimensional K V"]],
   "correct": null,
   "comments": "",
   "all-elabs":
   ["∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V],\n  Module.rank K V = 2 → FiniteDimensional K V",
    "∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V],\n  Module.rank K V = 2 → FiniteDimensional K V",
    "∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V],\n  Module.rank K V = 2 → FiniteDimensional K V",
    "∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V],\n  Module.rank K V = 2 → FiniteDimensional K V",
    "∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V],\n  (Module.rank K V = 2) → FiniteDimensional K V",
    "∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V],\n  Module.rank K V = 2 → FiniteDimensional K V",
    "∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V],\n  Module.rank K V = 2 → FiniteDimensional K V",
    "∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V],\n  Module.rank K V = 2 → FiniteDimensional K V",
    "∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V],\n  Module.rank K V = 2 → FiniteDimensional K V",
    "∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V],\n  Module.rank K V = 2 → FiniteDimensional K V"]},
  {"theorem": "{K : Type u} → [inst : Field K] → DivisionRing K",
   "some-correct": null,
   "prompt": "Every field is a division ring.",
   "groups":
   [["{K : Type u} → [inst : Field K] → DivisionRing K",
     "{K : Type u} → [inst : Field K] → DivisionRing K"],
    ["(K : Type u_1) → [inst : Field K] → DivisionRing K"],
    ["(K : Type u) → [inst : Field K] → DivisionRing K"],
    ["(F : Type u) → [inst : Field F] → DivisionRing F"]],
   "correct": null,
   "comments": "",
   "all-elabs":
   ["∀ (F : Type u) [inst : Field F], DivisionRing F",
    "∀ (K : Type u) [inst : Field K], DivisionRing K",
    "∀ {K : Type u} [inst : Field K], DivisionRing K",
    "∀ {K : Type u} [inst : Field K], DivisionRing K",
    "∀ (K : Type u_1) [inst : Field K], DivisionRing K",
    "∀ (K : Type u) [inst : Field K], DivisionRing K",
    "∀ {K : Type u} [inst : Field K], DivisionRing K",
    "∀ (K : Type u) [inst : Field K], DivisionRing K",
    "∀ (K : Type u) [inst : Field K], DivisionRing K",
    "∀ (K : Type u) [inst : Field K], DivisionRing K"]},
  {"theorem":
   "∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V],\n  Module.rank K V = 2 → FiniteDimensional K V",
   "some-correct": null,
   "prompt": "If a space has dimension `2` then it is finite dimensional.",
   "groups":
   [["∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V],\n  Module.rank K V = 2 → FiniteDimensional K V",
     "∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V],\n  Module.rank K V = 2 → FiniteDimensional K V",
     "∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V],\n  Module.rank K V = 2 → FiniteDimensional K V",
     "∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V],\n  Module.rank K V = 2 → FiniteDimensional K V"],
    ["∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V],\n  FiniteDimensional.finrank K V = 2 → FiniteDimensional K V"]],
   "correct": null,
   "comments": "",
   "all-elabs":
   ["∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V],\n  Module.rank K V = 2 → FiniteDimensional K V",
    "∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V], \n  FiniteDimensional.finrank K V = 2 → FiniteDimensional K V",
    "∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V],\n  Module.rank K V = 2 → FiniteDimensional K V",
    "∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V],\n  Module.rank K V = 2 → FiniteDimensional K V",
    "∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V],\n  Module.rank K V = 2 → FiniteDimensional K V",
    "∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V],\n  Module.rank K V = 2 → FiniteDimensional K V",
    "∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V],\n  Module.rank K V = 2 → FiniteDimensional K V",
    "∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V],\n  Module.rank K V = 2 → FiniteDimensional K V",
    "∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V],\n  Module.rank K V = 2 → FiniteDimensional K V"]},
  {"theorem": "∀ (n : ℕ), ∃ k, n + 1 = k",
   "some-correct": null,
   "prompt": "Every natural number has a successor.",
   "groups":
   [["∀ (n : ℕ), ∃ k, n + 1 = k",
     "∀ (n : ℕ), ∃ m, n + 1 = m",
     "∀ (n : ℕ), ∃ k, k = n + 1",
     "∀ (n : ℕ), ∃ k, n + 1 = k",
     "∀ (n : ℕ), ∃ m, m = n + 1"]],
   "correct": null,
   "comments": "",
   "all-elabs":
   ["∀ (n : ℕ), ∃ k, n + 1 = k",
    "∀ (n : ℕ), ∃ m, n + 1 = m",
    "∀ (n : ℕ), ∃ k, k = n + 1",
    "∀ (n : ℕ), ∃ k, n + 1 = k",
    "∀ (n : ℕ), ∃ m, m = n + 1",
    "∀ (n : ℕ), ∃ m, m = n + 1",
    "∀ (n : ℕ), ∃ m, n + 1 = m",
    "∀ (n : ℕ), ∃ k, n + 1 = k",
    "∀ (n : ℕ), ∃ k, n + 1 = k",
    "∀ (n : ℕ), ∃ k, n = k + 1"]},
  {"theorem": "∀ (n : ℕ), n < n + 1",
   "some-correct": null,
   "prompt": "Every natural number is less than its successor.",
   "groups":
   [["∀ (n : ℕ), n < n + 1",
     "∀ (n : ℕ), n < n + 1",
     "∀ (n : ℕ), n < Nat.succ n",
     "∀ (n : ℕ), n < Nat.succ n",
     "∀ (n : ℕ), n < Nat.succ n"]],
   "correct": null,
   "comments": "",
   "all-elabs":
   ["∀ (n : ℕ), n < n + 1",
    "∀ n : ℕ, n < n + 1",
    "∀ (n : ℕ), n < Nat.succ n",
    "∀ (n : ℕ), n < Nat.succ n",
    "∀ (n : ℕ), n < n.succ",
    "∀ (n : ℕ), n < n.succ",
    "∀ n : ℕ, n < n + 1",
    "∀ (n : ℕ), n < n.succ",
    "∀ n : ℕ, n < n.succ",
    "∀ n : ℕ, n < Nat.succ n"]},
  {"theorem":
   "∀ {α : Type u_6} [inst : TopologicalSpace α] [inst_1 : MeasurableSpace α] [self : BorelSpace α] (s : Set α),\n  MeasurableSet s",
   "some-correct": null,
   "prompt": "Every set is Lebesgue measurable.",
   "groups":
   [["∀ {α : Type u_6} [inst : TopologicalSpace α] [inst_1 : MeasurableSpace α] [self : BorelSpace α] (s : Set α),\n  MeasurableSet s"],
    ["∀ {α : Type u_1} [inst : MeasurableSpace α] (s : Set α), MeasurableSet s"]],
   "correct": null,
   "comments": "",
   "all-elabs":
   ["∀ {α : Type u_1} [inst : MeasurableSpace α], ∀ (s : Set α), MeasurableSet s",
    "∀ {α : Type u_6} [inst : TopologicalSpace α] [inst_1 : MeasurableSpace α] [self : BorelSpace α] (s : Set α),\n  MeasurableSet s"]},
  {"theorem": "∀ {n : ℕ}, Nat.Prime n → ¬∃ a, a * a = n",
   "some-correct": null,
   "prompt": "No prime number is a perfect square.",
   "groups":
   [["∀ {n : ℕ}, Nat.Prime n → ¬∃ a, a * a = n",
     "∀ {n : ℕ}, Nat.Prime n → ¬∃ m, m * m = n",
     "∀ {p : ℕ}, Nat.Prime p → ¬∃ a, a * a = p",
     "∀ {n : ℕ}, Nat.Prime n → ¬∃ a, a * a = n",
     "∀ {n : ℕ}, Nat.Prime n → ¬∃ m, m * m = n"]],
   "correct": null,
   "comments": "",
   "all-elabs":
   ["∀ {n : ℕ}, Nat.Prime n → ¬∃ a, a * a = n",
    "∀ {n : ℕ}, Nat.Prime n → ¬∃ m, m * m = n",
    "∀ {p : ℕ}, Nat.Prime p → ¬∃ a, a * a = p",
    "∀ {n : ℕ}, Nat.Prime n → ¬∃ a, a * a = n",
    "∀ {n : ℕ}, Nat.Prime n → ¬∃ m, m * m = n",
    "∀ {p : ℕ}, Nat.Prime p → ¬∃ a, a * a = p",
    "∀ {n : ℕ}, Nat.Prime n → ¬IsSquare n",
    "∀ {n : ℕ}, Nat.Prime n → ¬∃ m, m * m = n",
    "∀ {n : ℕ}, Nat.Prime n → ¬∃ m, m * m = n",
    "∀ {n : ℕ}, Nat.Prime n → ¬∃ a, a * a = n"]},
  {"theorem": "∀ {p : ℕ}, Nat.Prime p → Odd p → p > 2",
   "some-correct": null,
   "prompt": "Every odd prime number is greater than `2`.",
   "groups":
   [["∀ {p : ℕ}, Nat.Prime p → Odd p → p > 2",
     "∀ {p : ℕ}, Nat.Prime p → Odd p → 2 < p"],
    ["∀ {p : ℕ}, Nat.Prime p → p % 2 = 1 → 2 < p"],
    ["∀ {p : ℕ} [inst : Fact (Nat.Prime p)], p % 2 = 1 → 2 < p"],
    ["∀ {p : ℕ} [inst : Fact (Nat.Prime p)], Odd p → 2 < p"]],
   "correct": null,
   "comments": "",
   "all-elabs":
   ["∀ {p : ℕ}, Nat.Prime p → Odd p → p > 2",
    "∀ {p : ℕ} [inst : Fact (Nat.Prime p)], p % 2 = 1 → 2 < p",
    "∀ {p : ℕ}, Nat.Prime p → Odd p → 2 < p",
    "∀ {p : ℕ} [inst : Fact (Nat.Prime p)], Odd p → 2 < p",
    "∀ {p : ℕ}, Nat.Prime p → p % 2 = 1 → 2 < p",
    "∀ {p : ℕ}, Nat.Prime p → p % 2 = 1 → p > 2",
    "∀ {p : ℕ} [inst : Fact (Nat.Prime p)], p % 2 = 1 → 2 < p",
    "∀ {p : ℕ} [h : Fact (Nat.Prime p)], p % 2 = 1 → 2 < p",
    "∀ {p : ℕ} [inst : Fact (Nat.Prime p)], p % 2 = 1 → p > 2",
    "∀ {p : ℕ}, Nat.Prime p → p % 2 = 1 → p > 2"]},
  {"theorem":
   "∀ {a b c d u v w x : ℕ},\n  ∃ r s t z, (a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2) * (u ^ 2 + v ^ 2 + w ^ 2 + x ^ 2) = r ^ 2 + s ^ 2 + t ^ 2 + z ^ 2",
   "some-correct": null,
   "prompt":
   "The product of two numbers, each of which is the sum of four squares, is itself a sum of four squares.",
   "groups":
   [["∀ {a b c d u v w x : ℕ},\n  ∃ r s t z, (a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2) * (u ^ 2 + v ^ 2 + w ^ 2 + x ^ 2) = r ^ 2 + s ^ 2 + t ^ 2 + z ^ 2",
     "∀ {a b x₁ x₂ x₃ x₄ y₁ y₂ y₃ y₄ : ℕ},\n  a = x₁ ^ 2 + x₂ ^ 2 + x₃ ^ 2 + x₄ ^ 2 →\n    b = y₁ ^ 2 + y₂ ^ 2 + y₃ ^ 2 + y₄ ^ 2 → ∃ r₁ r₂ r₃ r₄, a * b = r₁ ^ 2 + r₂ ^ 2 + r₃ ^ 2 + r₄ ^ 2",
     "∀ {a b x y z w p q r s : ℕ},\n  a = x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2 →\n    b = p ^ 2 + q ^ 2 + r ^ 2 + s ^ 2 → ∃ u v t m, a * b = u ^ 2 + v ^ 2 + t ^ 2 + m ^ 2",
     "∀ (a b c d w x y z : ℕ),\n  ∃ p q r s, (a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2) * (w ^ 2 + x ^ 2 + y ^ 2 + z ^ 2) = p ^ 2 + q ^ 2 + r ^ 2 + s ^ 2"],
    ["∀ {a b x y z w u v : ℕ},\n  a = x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2 →\n    b = u ^ 2 + v ^ 2 + z ^ 2 + w ^ 2 → ∃ r s t q, a * b = r ^ 2 + s ^ 2 + t ^ 2 + q ^ 2"]],
   "correct": null,
   "comments": "",
   "all-elabs":
   ["∀ {a b c d u v w x : ℕ}, ∃ r s t z, (a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2) * (u ^ 2 + v ^ 2 + w ^ 2 + x ^ 2) = r ^ 2 + s ^ 2 + t ^ 2 + z ^ 2",
    "∀ {a b x₁ x₂ x₃ x₄ y₁ y₂ y₃ y₄ : ℕ}, \n  a = x₁ ^ 2 + x₂ ^ 2 + x₃ ^ 2 + x₄ ^ 2 → \n  b = y₁ ^ 2 + y₂ ^ 2 + y₃ ^ 2 + y₄ ^ 2 → \n  ∃ r₁ r₂ r₃ r₄, a * b = r₁ ^ 2 + r₂ ^ 2 + r₃ ^ 2 + r₄ ^ 2",
    "∀ {a b x y z w u v : ℕ}, a = x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2 → b = u ^ 2 + v ^ 2 + z ^ 2 + w ^ 2 → ∃ r s t q, a * b = r ^ 2 + s ^ 2 + t ^ 2 + q ^ 2",
    "∀ {a b x y z w p q r s : ℕ},\n    a = x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2 →\n    b = p ^ 2 + q ^ 2 + r ^ 2 + s ^ 2 →\n    ∃ u v t m, a * b = u ^ 2 + v ^ 2 + t ^ 2 + m ^ 2",
    "∀ (a b c d w x y z : ℕ),\n  ∃ p q r s,\n    (a^2 + b^2 + c^2 + d^2) * (w^2 + x^2 + y^2 + z^2) = p^2 + q^2 + r^2 + s^2",
    "∀ {a b x y z w r s t u : ℕ}, a = x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2 → b = r ^ 2 + s ^ 2 + t ^ 2 + u ^ 2 → ∃ i j k l, a * b = i ^ 2 + j ^ 2 + k ^ 2 + l ^ 2",
    "∀ {a b c d w x y z : ℕ}, ∃ p q r s, (a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2) * (w ^ 2 + x ^ 2 + y ^ 2 + z ^ 2) = p ^ 2 + q ^ 2 + r ^ 2 + s ^ 2",
    "∀ {a b x1 x2 x3 x4 y1 y2 y3 y4 : ℕ}, a = x1 ^ 2 + x2 ^ 2 + x3 ^ 2 + x4 ^ 2 → b = y1 ^ 2 + y2 ^ 2 + y3 ^ 2 + y4 ^ 2 → ∃ z1 z2 z3 z4, a * b = z1 ^ 2 + z2 ^ 2 + z3 ^ 2 + z4 ^ 2",
    "∀ {a b x1 x2 x3 x4 y1 y2 y3 y4 : ℕ}, a = x1 ^ 2 + x2 ^ 2 + x3 ^ 2 + x4 ^ 2 →\nb = y1 ^ 2 + y2 ^ 2 + y3 ^ 2 + y4 ^ 2 →\n∃ z1 z2 z3 z4, a * b = z1 ^ 2 + z2 ^ 2 + z3 ^ 2 + z4 ^ 2",
    "∀ {a b c d x y z w : ℕ},\n  ∃ r s t u, (a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2) * (x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2) = r ^ 2 + s ^ 2 + t ^ 2 + u ^ 2"]},
  {"theorem":
   "∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : CompactSpace X], LocallyCompactSpace X",
   "some-correct": null,
   "prompt": "Every compact topological space is locally compact.",
   "groups":
   [["∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : CompactSpace X], LocallyCompactSpace X",
     "∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : CompactSpace X], LocallyCompactSpace X",
     "∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : CompactSpace X], LocallyCompactSpace X",
     "∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : CompactSpace X], LocallyCompactSpace X"],
    ["∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : CompactSpace α], LocallyCompactSpace α"]],
   "correct": null,
   "comments": "",
   "all-elabs":
   ["∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : CompactSpace X], LocallyCompactSpace X",
    "∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : CompactSpace X], LocallyCompactSpace X",
    "∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : CompactSpace α], LocallyCompactSpace α",
    "∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : CompactSpace X], LocallyCompactSpace X",
    "∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : CompactSpace X], LocallyCompactSpace X",
    "∀ {X : Type u} [inst : TopologicalSpace X] [inst_1 : CompactSpace X], LocallyCompactSpace X",
    "∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : CompactSpace α], LocallyCompactSpace α",
    "∀ {X : Type u} [inst : TopologicalSpace X] [inst_1 : CompactSpace X], LocallyCompactSpace X",
    "∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : CompactSpace X], LocallyCompactSpace X",
    "∀ {X : Type u} [inst : TopologicalSpace X] [inst_1 : CompactSpace X], LocallyCompactSpace X"]},
  {"theorem":
   "∀ {α : Type u} {β : Type v} [inst : UniformSpace α] [inst_1 : UniformSpace β] {f : α → β},\n  Continuous f → UniformContinuous f",
   "some-correct": null,
   "prompt": "Every continuous function is uniformly continuous.",
   "groups":
   [["∀ {α : Type u} {β : Type v} [inst : UniformSpace α] [inst_1 : UniformSpace β] {f : α → β},\n  Continuous f → UniformContinuous f",
     "∀ {α : Type u} {β : Type v} [inst : UniformSpace α] [inst_1 : UniformSpace β] {f : α → β},\n  Continuous f → UniformContinuous f",
     "∀ {α : Type u} {β : Type v} [inst : UniformSpace α] [inst_1 : UniformSpace β] {f : α → β},\n  Continuous f → UniformContinuous f"],
    ["∀ {α : Type u} {β : Type v} [inst : UniformSpace α] [inst_1 : UniformSpace β] (self : α ≃ᵤ β),\n  UniformContinuous self.toFun"],
    ["∀ {α : Type u_1} {β : Type u_2} [inst : UniformSpace α] [inst_1 : UniformSpace β] {f : α → β},\n  Continuous f → UniformContinuous f"]],
   "correct": null,
   "comments": "",
   "all-elabs":
   ["∀ {α : Type u_1} {β : Type u_2} [inst : UniformSpace α] [inst_1 : UniformSpace β] {f : α → β},\n  Continuous f → UniformContinuous f",
    "∀ {α : Type u} {β : Type v} [inst : UniformSpace α] [inst_1 : UniformSpace β] {f : α → β},\n  Continuous f → UniformContinuous f",
    "∀ {α : Type u} {β : Type v} [inst : UniformSpace α] [inst_1 : UniformSpace β] {f : α → β},\n  Continuous f → UniformContinuous f",
    "∀ {α : Type u} {β : Type v} [inst : UniformSpace α] [inst_1 : UniformSpace β] {f : α → β},\n  Continuous f → UniformContinuous f",
    "∀ {α : Type u} {β : Type v} [inst : UniformSpace α] [inst_1 : UniformSpace β] (self : α ≃ᵤ β),\n  UniformContinuous self.toFun",
    "∀ {α : Type u_1} {β : Type u_2} [inst : UniformSpace α] [inst_1 : UniformSpace β] {f : α → β},\n  Continuous f → UniformContinuous f",
    "∀ {α : Type u_1} {β : Type u_2} [inst : UniformSpace α] [inst_1 : UniformSpace β] {f : α → β},\n  Continuous f → UniformContinuous f",
    "∀ {α : Type u} {β : Type v} [inst : UniformSpace α] [inst_1 : UniformSpace β] {f : α → β},\n  Continuous f → UniformContinuous f",
    "∀ {α : Type u_1} {β : Type u_2} [inst : UniformSpace α] [inst_1 : UniformSpace β] {f : α → β},\n  Continuous f → UniformContinuous f",
    "∀ {α : Type u} {β : Type v} [inst : UniformSpace α] [inst_1 : UniformSpace β] [inst_2 : CompactSpace α] {f : α → β},\n  Continuous f → UniformContinuous f"]},
  {"theorem": "¬∃ a b, a ≠ b ∧ Nat.Prime a ∧ Nat.Prime b ∧ a + b = 6",
   "some-correct": null,
   "prompt": "`6` is not the sum of two distinct prime numbers.",
   "groups":
   [["¬∃ a b, a ≠ b ∧ Nat.Prime a ∧ Nat.Prime b ∧ a + b = 6",
     "¬∃ p q, Nat.Prime p ∧ Nat.Prime q ∧ p ≠ q ∧ p + q = 6",
     "¬∃ p q, Nat.Prime p ∧ Nat.Prime q ∧ p ≠ q ∧ p + q = 6",
     "∀ {p q : ℕ}, Nat.Prime p → Nat.Prime q → p ≠ q → p + q ≠ 6",
     "¬∃ p q, Nat.Prime p ∧ Nat.Prime q ∧ p ≠ q ∧ p + q = 6"]],
   "correct": null,
   "comments": "",
   "all-elabs":
   ["¬∃ (a b : ℕ), a ≠ b ∧ Nat.Prime a ∧ Nat.Prime b ∧ a + b = 6",
    "¬∃ p q : ℕ, Nat.Prime p ∧ Nat.Prime q ∧ p ≠ q ∧ p + q = 6",
    "¬∃ p q : ℕ, Nat.Prime p ∧ Nat.Prime q ∧ p ≠ q ∧ p + q = 6",
    "∀ {p q : ℕ}, Nat.Prime p → Nat.Prime q → p ≠ q → p + q ≠ 6",
    "¬ ∃ p q : ℕ, Nat.Prime p ∧ Nat.Prime q ∧ p ≠ q ∧ p + q = 6",
    "¬∃ (a b : ℕ), Nat.Prime a ∧ Nat.Prime b ∧ a ≠ b ∧ a + b = 6",
    "¬ ∃ (p q : ℕ), p ≠ q ∧ Nat.Prime p ∧ Nat.Prime q ∧ p + q = 6",
    "¬∃ (a b : ℕ), Nat.Prime a ∧ Nat.Prime b ∧ a ≠ b ∧ a + b = 6",
    "¬∃ p q : ℕ, Nat.Prime p ∧ Nat.Prime q ∧ p ≠ q ∧ p + q = 6"]},
  {"theorem": "∀ {n : ℤ}, ¬Irrational ↑n",
   "some-correct": null,
   "prompt": "No integer is irrational.",
   "groups":
   [["∀ {n : ℤ}, ¬Irrational ↑n",
     "∀ (z : ℤ), ¬Irrational ↑z",
     "∀ {z : ℤ}, ¬Irrational ↑z",
     "∀ (n : ℤ), ¬Irrational ↑n",
     "∀ (a : ℤ), ¬Irrational ↑a"]],
   "correct": null,
   "comments": "",
   "all-elabs":
   ["∀ {n : ℤ}, ¬ Irrational ↑n",
    "∀ (z : ℤ), ¬Irrational (↑z : ℝ)",
    "∀ {z : ℤ}, ¬Irrational (↑z : ℝ)",
    "∀ (n : ℤ), ¬Irrational n",
    "∀ (a : ℤ), ¬Irrational a",
    "∀ (n : ℤ), ¬Irrational (↑n : ℝ)"]},
  {"theorem": "∀ {R : Type u_1} [inst : Ring R], IsUnit 1",
   "some-correct": null,
   "prompt": "The identity element in a ring is a unit.",
   "groups":
   [["∀ {R : Type u_1} [inst : Ring R], IsUnit 1",
     "∀ {R : Type u} [inst : Ring R], IsUnit 1",
     "∀ {R : Type u_1} [inst : Ring R], IsUnit 1",
     "∀ {R : Type u} [inst : Ring R], IsUnit 1",
     "∀ {R : Type u_1} [inst : Ring R], IsUnit 1"]],
   "correct": null,
   "comments": "",
   "all-elabs":
   ["∀ {R : Type u_1} [inst : Ring R], IsUnit (1 : R)",
    "∀ {R : Type u} [inst : Ring R], IsUnit (1 : R)",
    "∀ {R : Type u_1} [inst : Ring R], IsUnit (1 : R)",
    "∀ {R : Type u} [inst : Ring R], IsUnit (1 : R)",
    "∀ {R : Type u_1} [inst : Ring R], IsUnit (1 : R)",
    "∀ {R : Type u_1} [inst : Ring R], IsUnit (1 : R)",
    "∀ {R : Type u} [inst : Ring R], IsUnit (1 : R)",
    "∀ {R : Type u_1} [inst : Monoid R], IsUnit (1 : R)",
    "∀ {R : Type u_1} [inst : Ring R], IsUnit (1 : R)"]},
  {"theorem": "{G : Type u_1} → [inst : Group G] → (H : Subgroup G) → Group ↥H",
   "some-correct": null,
   "prompt": "Every subgroup of a group is a group.",
   "groups":
   [["{G : Type u_1} → [inst : Group G] → (H : Subgroup G) → Group ↥H",
     "{G : Type u_1} → [inst : Group G] → (H : Subgroup G) → Group ↥H",
     "{G : Type u_1} → [inst : Group G] → (H : Subgroup G) → Group ↥H",
     "{G : Type u_1} → [inst : Group G] → (H : Subgroup G) → Group ↥H"],
    ["(G : Type u_1) → [inst : Group G] → (H : Subgroup G) → Group ↥H"]],
   "correct": null,
   "comments": "",
   "all-elabs":
   ["∀ {G : Type u_1} [inst : Group G] (H : Subgroup G), Group ↥H",
    "∀ (G : Type u_1) [Group G] (H : Subgroup G), Group ↥H",
    "∀ {G : Type u_1} [inst : Group G] (H : Subgroup G), Group ↥H",
    "∀ {G : Type u_1} [inst : Group G] (H : Subgroup G), Group ↥H",
    "∀ {G : Type u_1} [inst : Group G] (H : Subgroup G), Group ↥H",
    "∀ {G : Type u_1} [inst : Group G] (H : Subgroup G), Group ↥H",
    "∀ {G : Type u_1} [inst : Group G] (H : Subgroup G), Group ↥H",
    "∀ {G : Type u_1} [inst : Group G] (H : Subgroup G), Group ↥H",
    "∀ {G : Type u_1} [inst : Group G] (H : Subgroup G), Group ↥H"]},
  {"theorem": "∀ (a b : ℕ), ∃ c, a + b = c",
   "some-correct": null,
   "prompt": "The sum of two natural numbers is a natural number.",
   "groups":
   [["∀ (a b : ℕ), ∃ c, a + b = c",
     "∀ {a b : ℕ}, ∃ c, a + b = c",
     "∀ {a b : ℕ}, ∃ c, a + b = c",
     "∀ {a b : ℕ}, ∃ c, a + b = c",
     "∀ {a b : ℕ}, ∃ c, a + b = c"]],
   "correct": null,
   "comments": "",
   "all-elabs":
   ["∀ (a b : ℕ), ∃ c : ℕ, a + b = c",
    "∀ {a b : ℕ}, ∃ c : ℕ, a + b = c",
    "∀ {a b : ℕ}, ∃ c : ℕ, a + b = c",
    "∀ {a b : ℕ}, ∃ c : ℕ, a + b = c",
    "∀ {a b : ℕ}, ∃ c : ℕ, a + b = c",
    "∀ {a b : ℕ}, ∃ n : ℕ, a + b = n",
    "∀ (a b : ℕ), ∃ c : ℕ, a + b = c",
    "∀ (a b : ℕ), ∃ c : ℕ, a + b = c",
    "∀ {m n : ℕ}, ∃ k : ℕ, m + n = k",
    "∀ {a b : ℕ}, ∃ c : ℕ, a + b = c"]},
  {"theorem": "∀ {G : Type u_1} [inst : Group G], IsOfFinOrder 1",
   "some-correct": null,
   "prompt": "The identity element of a group has finite order.",
   "groups":
   [["∀ {G : Type u_1} [inst : Group G], IsOfFinOrder 1",
     "∀ {G : Type u_1} [inst : Group G], IsOfFinOrder 1",
     "∀ {G : Type u_1} [inst : Group G], IsOfFinOrder 1",
     "∀ {G : Type u_1} [inst : Group G], IsOfFinOrder 1",
     "∀ {G : Type u_1} [inst : Group G], IsOfFinOrder 1"]],
   "correct": null,
   "comments": "",
   "all-elabs":
   ["∀ {G : Type u_1} [inst : Group G], IsOfFinOrder (1 : G)",
    "∀ {G : Type u_1} [inst : Group G], IsOfFinOrder (1 : G)",
    "∀ {G : Type u_1} [inst : Group G], IsOfFinOrder (1 : G)",
    "∀ {G : Type u_1} [inst : Group G], IsOfFinOrder (1 : G)",
    "∀ {G : Type u_1} [inst : Group G], IsOfFinOrder (1 : G)",
    "∀ {G : Type u_1} [inst : Monoid G], IsOfFinOrder (1 : G)",
    "∀ {G : Type u_1} [inst : Monoid G], IsOfFinOrder (1 : G)",
    "∀ {G : Type u_1} [inst : Group G], IsOfFinOrder (1 : G)",
    "∀ {G : Type u_1} [inst : Group G], IsOfFinOrder (1 : G)",
    "∀ {G : Type u_1} [inst : Group G], IsOfFinOrder (1 : G)"]},
  {"theorem": "Fact (Nat.Prime 7)",
   "some-correct": null,
   "prompt": "`7` is a prime number.",
   "groups":
   [["Fact (Nat.Prime 7)",
     "Fact (Nat.Prime 7)",
     "Fact (Nat.Prime 7)",
     "Fact (Nat.Prime 7)",
     "Fact (Nat.Prime 7)"]],
   "correct": null,
   "comments": "",
   "all-elabs":
   ["Fact (Nat.Prime 7)",
    "Fact (Nat.Prime 7)",
    "Fact (Nat.Prime 7)",
    "Fact (Nat.Prime 7)",
    "Fact (Nat.Prime 7)",
    "Fact (Nat.Prime 7)",
    "Fact (Nat.Prime 7)",
    "Fact (Nat.Prime 7)",
    "Fact (Nat.Prime 7)",
    "Fact (Nat.Prime 7)"]},
  {"theorem": "(Finset.filter Nat.Prime (Finset.range 8)).card = 3",
   "some-correct": null,
   "prompt": "There are `3` prime numbers below `8`.",
   "groups":
   [["(Finset.filter Nat.Prime (Finset.range 8)).card = 3",
     "(Finset.filter Nat.Prime (Finset.range 8)).card = 3",
     "(Finset.filter Nat.Prime (Finset.range 8)).card = 3",
     "List.length (List.filter (fun b => decide (Nat.Prime b)) (List.range 8)) = 3",
     "List.length (List.filter (fun b => decide (Nat.Prime b)) (List.range 8)) = 3"]],
   "correct": null,
   "comments": "",
   "all-elabs":
   ["Finset.card (Finset.filter Nat.Prime (Finset.range 8)) = 3",
    "Finset.card (Finset.filter Nat.Prime (Finset.range 8)) = 3",
    "Finset.card (Finset.filter Nat.Prime (Finset.range 8)) = 3",
    "List.length (List.filter Nat.Prime (List.range 8)) = 3",
    "List.length (List.filter Nat.Prime (List.range 8)) = 3",
    "Finset.card (Finset.filter Nat.Prime (Finset.range 8)) = 3",
    "List.length (List.filter Nat.Prime (List.range 8)) = 3",
    "Finset.card (Finset.filter Nat.Prime (Finset.range 8)) = 3",
    "Finset.card (Finset.filter Nat.Prime (Finset.range 8)) = 3",
    "Finset.card (Finset.filter Nat.Prime (Finset.range 8)) = 3"]},
  {"theorem": "∀ {α : Type u} {a : Set α}, ∅ ⊆ a",
   "some-correct": null,
   "prompt": "The empty set is contained in every finite set.",
   "groups":
   [["∀ {α : Type u} {a : Set α}, ∅ ⊆ a",
     "∀ {α : Type u} {s : Set α}, ∅ ⊆ s",
     "∀ {α : Type u_1} {s : Set α}, Set.Finite s → ∅ ⊆ s",
     "∀ {α : Type u} {s : Set α}, Set.Finite s → ∅ ⊆ s",
     "∀ {α : Type u} {s : Finset α}, ∅ ⊆ s"]],
   "correct": null,
   "comments": "",
   "all-elabs":
   ["∀ {α : Type u} {a : Set α}, ∅ ⊆ a",
    "∀ {α : Type u} {s : Set α}, ∅ ⊆ s",
    "∀ {α : Type u_1} {s : Set α}, Set.Finite s → ∅ ⊆ s",
    "∀ {α : Type u} {s : Set α}, Set.Finite s → ∅ ⊆ s",
    "∀ {α : Type u} {s : Finset α}, ∅ ⊆ s",
    "∀ {α : Type u} {s : Finset α}, ∅ ⊆ s",
    "∀ {α : Type u} (A : Finset α), ∅ ⊆ A",
    "∀ {α : Type u} {s : Finset α}, ∅ ⊆ s",
    "∀ {α : Type u} {A : Set α}, ∅ ⊆ A",
    "∀ {α : Type u} {s : Finset α}, ∅ ⊆ s"]},
  {"theorem":
   "∀ {α : Type u} {s : Set α}, Set.Infinite s → ∃ t, Set.Finite t ∧ t ⊆ s",
   "some-correct": null,
   "prompt": "Every infinite set contains a finite set.",
   "groups":
   [["∀ {α : Type u} {s : Set α}, Set.Infinite s → ∃ t, Set.Finite t ∧ t ⊆ s",
     "∀ {α : Type u} (s : Set α), ¬Set.Finite s → ∃ t, Set.Finite t ∧ t ⊆ s"],
    ["∀ {α : Type u_1} {s : Set α}, ¬Set.Finite s → ∃ t, Set.Finite t ∧ t ⊆ s"],
    ["∀ {α : Type u} {s : Set α}, ¬Set.Finite s → ∃ t, Set.Finite t ∧ t ⊂ s"],
    ["∀ {α : Type u} {s : Set α}, ¬Set.Finite s → ∃ t ⊆ s, Set.Finite t ∧ ¬Set.Finite (s \\ t)"]],
   "correct": null,
   "comments": "",
   "all-elabs":
   ["∀ {α : Type u} {s : Set α}, Set.Infinite s → ∃ t, Set.Finite t ∧ t ⊆ s",
    "∀ {α : Type u} {s : Set α}, ¬Set.Finite s → ∃ t : Set α, Set.Finite t ∧ t ⊂ s",
    "∀ {α : Type u} (s : Set α), ¬Set.Finite s → ∃ t : Set α, Set.Finite t ∧ t ⊆ s",
    "∀ {α : Type u} {s : Set α}, ¬Set.Finite s → ∃ t ⊆ s, Set.Finite t ∧ ¬Set.Finite (s \\ t)",
    "∀ {α : Type u_1} {s : Set α}, ¬Set.Finite s → ∃ t, Set.Finite t ∧ t ⊆ s",
    "∀ {α : Type u} {s : Set α}, ¬Set.Finite s → ∃ t : Set α, Set.Finite t ∧ t ⊆ s",
    "∀ {α : Type u} {s : Set α}, ¬Set.Finite s → ∃ t ⊆ s, Set.Finite t ∧ ¬Set.Finite (s \\ t)",
    "∀ {α : Type u} {s : Set α}, ¬Set.Finite s → ∃ t ⊆ s, Set.Finite t ∧ Nonempty α",
    "∀ {α : Type u} {s : Set α}, ¬ Set.Finite s → ∃ t ⊆ s, Set.Finite t ∧ Nonempty t",
    "∀ {α : Type u} {s : Set α}, ¬Set.Finite s → ∃ t : Set α, Set.Finite t ∧ t ⊂ s"]},
  {"theorem": "{α : Type u} → [inst : CommRing α] → Monoid α",
   "some-correct": null,
   "prompt": "Every commutative ring is a monoid.",
   "groups":
   [["{α : Type u} → [inst : CommRing α] → Monoid α"],
    ["{α : Type u} → [inst : CommRing α] → Monoid α"],
    ["{R : Type u_1} → [inst : CommRing R] → Monoid R"],
    ["{α : Type u} → [inst : CommSemiring α] → Monoid α"],
    ["{α : Type u} → [inst : CommRing α] → MulOneClass α"]],
   "correct": null,
   "comments": "",
   "all-elabs":
   ["∀ {α : Type u} [comm_ring α], monoid α",
    "∀ {R : Type u_1} [inst : CommRing R], Monoid R",
    "∀ {α : Type u} [inst : CommSemiring α], Monoid α",
    "∀ {α : Type u} [inst : CommRing α], MulOneClass α",
    "∀ {α : Type u} [inst : CommRing α], Monoid α",
    "∀ {R : Type u_1} [inst : CommRing R], Monoid R",
    "∀ {α : Type u} [inst : CommRing α], Monoid α",
    "∀ {R : Type u_1} [inst : CommRing R], Monoid R",
    "∀ {R : Type u} [inst : CommRing R], Monoid R"]},
  {"theorem": "∀ (n : ℕ), Odd n → ∃ a b, a ≠ b ∧ a + b = n",
   "some-correct": null,
   "prompt":
   "Every odd natural number is the sum of two distinct natural numbers.",
   "groups":
   [["∀ (n : ℕ), Odd n → ∃ a b, a ≠ b ∧ a + b = n",
     "∀ {n : ℕ}, Odd n → ∃ x y, x ≠ y ∧ x + y = n",
     "∀ {n : ℕ}, Odd n → ∃ a b, a ≠ b ∧ a + b = n",
     "∀ {n : ℕ}, Odd n → ∃ a b, a ≠ b ∧ a + b = n"],
    ["∀ {n : ℕ}, n % 2 = 1 → ∃ x y, x ≠ y ∧ n = x + y"]],
   "correct": null,
   "comments": "",
   "all-elabs":
   ["∀ n : ℕ, Odd n → ∃ a b : ℕ, a ≠ b ∧ a + b = n",
    "∀ {n : ℕ}, Odd n → ∃ x y : ℕ, x ≠ y ∧ x + y = n",
    "∀ {n : ℕ}, Odd n → ∃ a b : ℕ, a ≠ b ∧ a + b = n",
    "∀ {n : ℕ}, n % 2 = 1 → ∃ x y : ℕ, x ≠ y ∧ n = x + y",
    "∀ {n : ℕ}, Odd n → ∃ a b : ℕ, a ≠ b ∧ a + b = n",
    "∀ {n : ℕ}, Odd n → ∃ a b : ℕ, a ≠ b ∧ n = a + b",
    "∀ {n : ℕ}, Odd n → ∃ a b : ℕ, a ≠ b ∧ n = a + b",
    "∀ (n : ℕ), Odd n → ∃ a b : ℕ, a ≠ b ∧ a + b = n",
    "∀ {n : ℕ}, Odd n → ∃ a b : ℕ, a ≠ b ∧ n = a + b",
    "∀ {n : ℕ}, Odd n → ∃ a b : ℕ, a ≠ b ∧ n = a + b"]},
  {"theorem":
   "∀ {G : Type u_1} [inst : CommMonoid G] (x : G), x = 1 → IsOfFinOrder x",
   "some-correct": null,
   "prompt": "Every element in the trivial group has finite order.",
   "groups":
   [["∀ {G : Type u_1} [inst : CommMonoid G] (x : G), x = 1 → IsOfFinOrder x"],
    ["∀ (x : Unit), IsOfFinOrder x"],
    ["∀ {G : Type u_1} [inst : Group G] [inst_1 : Unique G] (x : G), IsOfFinOrder x"],
    ["∀ {G : Type u_1} [inst : GroupWithZero G] (x : G), IsOfFinOrder x"],
    ["∀ {α : Type u_1} [inst : GroupWithZero α] {x : α}, x ≠ 0 → IsOfFinOrder x"]],
   "correct": null,
   "comments": "",
   "all-elabs":
   ["∀ (x : Unit), IsOfFinOrder x",
    "∀ {G : Type u_1} [inst : Group G] [inst_1 : Unique G], ∀ x : G, IsOfFinOrder x",
    "∀ {G : Type u_1} [inst : GroupWithZero G], ∀ (x : G), IsOfFinOrder x",
    "∀ {α : Type u_1} [inst : GroupWithZero α] {x : α}, x ≠ 0 → IsOfFinOrder x",
    "∀ {G : Type u_1} [inst : CommMonoid G] (x : G), x = 1 → IsOfFinOrder x"]},
  {"theorem": "∀ {n : ℕ}, Even n → Even (n ^ 2)",
   "some-correct": null,
   "prompt": "The square of an even number is even.",
   "groups":
   [["∀ {n : ℕ}, Even n → Even (n ^ 2)",
     "∀ {n : ℕ}, Even n → Even (n ^ 2)",
     "∀ {n : ℕ}, Even n → Even (n ^ 2)",
     "∀ {n : ℕ}, Even n → Even (n ^ 2)"],
    ["∀ {n : ℕ}, 2 ∣ n → 2 ∣ n ^ 2"]],
   "correct": null,
   "comments": "",
   "all-elabs":
   ["∀ {n : ℕ}, Even n → Even (n ^ 2)",
    "∀ {n : ℕ}, 2 ∣ n → 2 ∣ n ^ 2",
    "∀ {n : ℕ}, Even n → Even (n ^ 2)",
    "∀ {n : ℕ}, Even n → Even (n ^ 2)",
    "∀ {n : ℕ}, Even n → Even (n ^ 2)",
    "∀ {n : ℕ}, Even n → Even (n ^ 2)",
    "∀ {n : ℕ}, Even n → Even (n ^ 2)",
    "∀ {n : ℕ}, 2 ∣ n → 2 ∣ n ^ 2",
    "∀ {n : ℕ}, Even n → Even (n ^ 2)",
    "∀ {n : ℕ}, Even n → Even (n * n)"]},
  {"theorem":
   "∀ {R : Type u} [inst : CommRing R] [inst_1 : Nontrivial R], (∀ (x : R), x ≠ 0 → ∃ y, x * y = 1) → IsField R",
   "some-correct": null,
   "prompt": "Every commutative division ring is a field.",
   "groups":
   [["∀ {R : Type u} [inst : CommRing R] [inst_1 : Nontrivial R], (∀ (x : R), x ≠ 0 → ∃ y, x * y = 1) → IsField R"],
    ["∀ {K : Type u} [inst : CommRing K] [nonzero : Nontrivial K], (∀ (x : K), x ≠ 0 → ∃ y, y * x = 1) → IsField K"],
    ["∀ {R : Type u} [inst : CommRing R] [inst_1 : Nontrivial R] (x : R), x ≠ 0 → ∃ y, y * x = 1 → IsField R"],
    ["∀ {R : Type u} [inst : CommRing R] [self : DivisionRing R], IsField R"]],
   "correct": null,
   "comments": "",
   "all-elabs":
   ["∀ {K : Type u} [inst : CommRing K] [nonzero : Nontrivial K], (∀ x : K, x ≠ 0 → ∃ y, y * x = 1) → IsField K",
    "∀ {R : Type u} [inst : CommRing R] [inst_1 : Nontrivial R], ∀ x : R, x ≠ 0 → ∃ y, y * x = 1 → IsField R",
    "∀ {R : Type u} [inst : CommRing R] [self : DivisionRing R], IsField R",
    "∀ {R : Type u} [inst : CommRing R] [inst_1 : Nontrivial R] (h : ∀ (x : R), x ≠ 0 → ∃ y, x * y = 1), IsField R"]},
  {"theorem": "∀ {G : Type u} [inst : Group G], id 1 = 1",
   "some-correct": null,
   "prompt":
   "The image of the identity element under the identity map is the identity element.",
   "groups":
   [["∀ {G : Type u} [inst : Group G], id 1 = 1",
     "∀ {α : Type u} [inst : MulOneClass α], id 1 = 1",
     "∀ {α : Type u} [inst : One α], id 1 = 1",
     "∀ {α : Type u} [inst : Monoid α], id 1 = 1",
     "∀ {α : Type u} [inst : One α], id 1 = 1"]],
   "correct": null,
   "comments": "",
   "all-elabs":
   ["∀ {G : Type u} [inst : Group G], id 1 = 1",
    "∀ {α : Type u} [inst : MulOneClass α], id 1 = 1",
    "∀ {α : Type u} [inst : One α], id 1 = 1",
    "∀ {α : Type u} [inst : Monoid α], id (1 : α) = 1",
    "∀ {α : Type u} [inst : One α], id 1 = 1",
    "∀ {α : Type u} [inst : MulOneClass α], (id : α → α) 1 = 1",
    "∀ {α : Type u_1} [inst : Monoid α], (fun a => a) 1 = 1",
    "∀ {α : Type u} [inst : MulOneClass α], id 1 = 1"]},
  {"theorem": "∀ {α : Type u} (x : α), Function.IsFixedPt id x",
   "some-correct": null,
   "prompt":
   "Every point is a fixed point of the identity function on a space.",
   "groups":
   [["∀ {α : Type u} (x : α), Function.IsFixedPt id x",
     "∀ {α : Type u} (x : α), Function.IsFixedPt id x",
     "∀ {α : Type u} (x : α), Function.IsFixedPt id x",
     "∀ {α : Type u} (x : α), Function.IsFixedPt id x",
     "∀ {α : Type u} (x : α), Function.IsFixedPt id x"]],
   "correct": null,
   "comments": "",
   "all-elabs":
   ["∀ {α : Type u} (x : α), Function.IsFixedPt id x",
    "∀ {α : Type u} (x : α), Function.IsFixedPt id x",
    "∀ {α : Type u} (x : α), Function.IsFixedPt id x",
    "∀ {α : Type u} (x : α), Function.IsFixedPt id x",
    "∀ {α : Type u} (x : α), Function.IsFixedPt id x",
    "∀ {α : Type u} (x : α), Function.IsFixedPt id x",
    "∀ {α : Type u_1} (x : α), Function.IsFixedPt id x",
    "∀ {α : Type u} (x : α), Function.IsFixedPt id x",
    "∀ {α : Type u} (x : α), Function.IsFixedPt id x",
    "∀ {α : Type u} (x : α), Function.IsFixedPt id x"]},
  {"theorem":
   "∀ {α : Type u} [inst : PseudoMetricSpace α] {x : α}, Metric.diam {x} = 0",
   "some-correct": null,
   "prompt": "The diameter of a singleton space is `0`.",
   "groups":
   [["∀ {α : Type u} [inst : PseudoMetricSpace α] {x : α}, Metric.diam {x} = 0",
     "∀ {α : Type u} [inst : PseudoEMetricSpace α] {x : α}, EMetric.diam {x} = 0",
     "∀ {α : Type u} [inst : PseudoEMetricSpace α] {x : α}, EMetric.diam {x} = 0",
     "∀ {α : Type u} [inst : PseudoMetricSpace α] {x : α}, Metric.diam {x} = 0",
     "∀ {α : Type u} [inst : PseudoEMetricSpace α] {x : α}, EMetric.diam {x} = 0"]],
   "correct": null,
   "comments": "",
   "all-elabs":
   ["∀ {α : Type u} [inst : PseudoMetricSpace α] {x : α}, Metric.diam {x} = 0",
    "∀ {α : Type u} [inst : PseudoEMetricSpace α] {x : α}, EMetric.diam {x} = 0",
    "∀ {α : Type u} [inst : PseudoEMetricSpace α] {x : α}, EMetric.diam {x} = 0",
    "∀ {α : Type u} [inst : PseudoMetricSpace α] {x : α}, Metric.diam {x} = 0",
    "∀ {α : Type u} [inst : PseudoEMetricSpace α] {x : α}, EMetric.diam {x} = 0",
    "∀ {α : Type u} [inst : PseudoEMetricSpace α] {x : α}, EMetric.diam {x} = 0",
    "∀ {α : Type u} [inst : PseudoMetricSpace α] {x : α}, Metric.diam {x} = 0",
    "∀ {α : Type u} [inst : PseudoEMetricSpace α] {x : α}, EMetric.diam {x} = 0",
    "∀ {α : Type u} [inst : PseudoMetricSpace α] {x : α}, Metric.diam {x} = 0"]},
  {"theorem": "∀ {G : Type u} [inst : Group G], Nonempty G",
   "some-correct": null,
   "prompt": "Every group is non-empty.",
   "groups":
   [["∀ {G : Type u} [inst : Group G], Nonempty G",
     "∀ {G : Type u} [inst : Group G], Nonempty G",
     "∀ {G : Type u} [inst : Group G], Nonempty G",
     "∀ {G : Type u} [inst : Group G], Nonempty G",
     "∀ {G : Type u} [inst : Group G], Nonempty G"]],
   "correct": null,
   "comments": "",
   "all-elabs":
   ["∀ {G : Type u} [group G], Nonempty G",
    "∀ {G : Type u} [inst : Group G], Nonempty G",
    "∀ {G : Type u} [inst : Group G], Nonempty G",
    "∀ {G : Type u} [inst : Group G], Nonempty G",
    "∀ {G : Type u} [group G], nonempty G",
    "∀ {G : Type u} [inst : Group G], Nonempty G",
    "∀ {G : Type u} [self : Group G], Nonempty G",
    "∀ {α : Type u} [inst : Group α], Nonempty α",
    "∀ {G : Type u_1} [group G], Nonempty G",
    "∀ {G : Type u} [inst : Group G], Nonempty G"]},
  {"theorem":
   "∀ {α : Type u} [inst : TopologicalSpace α] (s : Set α), IsPreconnected s → IsConnected s",
   "some-correct": null,
   "prompt": "All connected components of a topological space are connected.",
   "groups":
   [["∀ {α : Type u} [inst : TopologicalSpace α] (s : Set α), IsPreconnected s → IsConnected s",
     "∀ {α : Type u} [inst : TopologicalSpace α] {s : Set α}, IsPreconnected s → IsConnected s",
     "∀ {α : Type u} [inst : TopologicalSpace α] (s : Set α), IsPreconnected s → IsConnected s"],
    ["∀ {α : Type u} [inst : TopologicalSpace α] (x : α), IsConnected (connectedComponent x)"],
    ["∀ {α : Type u} [inst : TopologicalSpace α] [self : PreconnectedSpace α] (s : Set α), PreconnectedSpace (Subtype s)"]],
   "correct": null,
   "comments": "",
   "all-elabs":
   ["∀ {α : Type u} [inst : TopologicalSpace α] [self : PreconnectedSpace α] (s : Set α), PreconnectedSpace (Subtype s)",
    "∀ {α : Type u} [inst : TopologicalSpace α] (s : Set α), IsPreconnected s → IsConnected s",
    "∀ {α : Type u} [inst : TopologicalSpace α] {s : Set α}, IsPreconnected s → IsConnected s",
    "∀ {α : Type u} [inst : TopologicalSpace α] (x : α), IsConnected (connectedComponent x)",
    "∀ {α : Type u} [inst : TopologicalSpace α] (s : Set α), IsPreconnected s → IsConnected s",
    "∀ {α : Type u} [inst : TopologicalSpace α] (x : α), IsConnected (connectedComponent x)",
    "∀ {α : Type u} [inst : TopologicalSpace α] (x : α), IsConnected (connectedComponent x)",
    "∀ {α : Type u} [inst : TopologicalSpace α] (s : Set α), IsPreconnected s → IsConnected s"]},
  {"theorem": "∃ M, Ideal.IsMaximal M",
   "some-correct": null,
   "prompt": "The ring of integers has a maximal ideal.",
   "groups":
   [["∃ M, Ideal.IsMaximal M",
     "∀ (α : Type u) [inst : Nontrivial ℤ], ∃ I, Ideal.IsMaximal I"],
    ["∀ {R : Type u} [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : IsDedekindDomain R], ∃ M, Ideal.IsMaximal M"],
    ["∀ {α : Type u} [inst : Nontrivial α], ∃ M, Ideal.IsMaximal M"],
    ["∀ (R : Type u_1) [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : IsDedekindDomain R], ∃ M, Ideal.IsMaximal M"]],
   "correct": null,
   "comments": "",
   "all-elabs":
   ["∃ M : Ideal ℤ, Ideal.IsMaximal M",
    "∀ {α : Type u} [inst : Nontrivial α], ∃ M : Ideal ℤ, Ideal.IsMaximal M",
    "∀ (R : Type u_1) [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : IsDedekindDomain R], ∃ M, Ideal.IsMaximal M",
    "∀ (α : Type u) [inst : Nontrivial (ℤ : Type)], ∃ I, Ideal.IsMaximal I",
    "∀ {R : Type u} [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : IsDedekindDomain R], ∃ M, Ideal.IsMaximal M",
    "∀ (α : Type u) [Nonempty α], ∃ M, @Ideal.IsMaximal ℤ _ M",
    "∀ (α : Type u) [inst : CommRing α] [inst_1 : IsDomain α], ∃ M, Ideal.IsMaximal M",
    "∀ {R : Type u_1} [inst : Ring R] [inst_1 : IsDomain R], ∃ M, Ideal.IsMaximal M",
    "∀ {R : Type u} [inst : CommRing R] [inst_1 : IsDomain R], ∃ M, @Ideal.IsMaximal R _ M"]},
  {"theorem": "PythagoreanTriple 3 4 5",
   "some-correct": null,
   "prompt": "The numbers `3`, `4` and `5` form a Pythagorean triple.",
   "groups":
   [["PythagoreanTriple 3 4 5",
     "PythagoreanTriple 3 4 5",
     "PythagoreanTriple 3 4 5",
     "PythagoreanTriple 3 4 5",
     "PythagoreanTriple 3 4 5"]],
   "correct": null,
   "comments": "",
   "all-elabs":
   ["PythagoreanTriple 3 4 5",
    "PythagoreanTriple 3 4 5",
    "PythagoreanTriple 3 4 5",
    "PythagoreanTriple 3 4 5",
    "PythagoreanTriple 3 4 5",
    "PythagoreanTriple 3 4 5",
    "PythagoreanTriple 3 4 5",
    "PythagoreanTriple 3 4 5",
    "PythagoreanTriple 3 4 5",
    "PythagoreanTriple 3 4 5"]},
  {"theorem":
   "∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V],\n  Basis (↑∅) K V → Subsingleton V",
   "some-correct": null,
   "prompt": "A vector space with the empty set as basis is trivial.",
   "groups":
   [["∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V],\n  Basis (↑∅) K V → Subsingleton V",
     "∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V],\n  Basis (↑∅) K V → Subsingleton V",
     "∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V],\n  Basis (↑⊥) K V → Subsingleton V"]],
   "correct": null,
   "comments": "",
   "all-elabs":
   ["∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V], \n  Basis (∅ : Set V) K V → Subsingleton V",
    "∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V],\n  Basis (∅ : Set V) K V → Subsingleton V",
    "∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V],\n  Basis (⊥: Set V) K V → Subsingleton V"]}],
 "elaborated": 38}