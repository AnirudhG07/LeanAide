[{"docstring": "Triangle inequality for the nonnegative distance\n", "keywords": {"Triangle inequality": 0.04940384002065631, "nonnegative distance": 0.04940384002065631, "Triangle": 0.15831692877998726, "distance": 0.15831692877998726, "inequality": 0.29736558256021506, "nonnegative": 0.29736558256021506}}, {"docstring": "A module over a division ring is noetherian if and only if its dimension (as a cardinal) is strictly less than the first infinite cardinal `\u2135\u2080`.\n", "keywords": {"infinite cardinal": 0.01347319449596249, "division ring": 0.018310930906343142, "ring is noetherian": 0.018310930906343142, "cardinal": 0.04956935957632033, "dimension": 0.09017440044927587, "module": 0.13409574860218185, "division": 0.13409574860218185, "ring": 0.13409574860218185, "noetherian": 0.13409574860218185, "strictly": 0.13409574860218185, "infinite": 0.13409574860218185}}, {"docstring": " If every element belongs to at most `n` finsets, then the sum of their sizes is at most `n` times how many they are.\n", "keywords": {"element belongs": 0.02570861714399338, "finsets": 0.04491197687864554, "times": 0.09568045026443411, "element": 0.15831692877998726, "belongs": 0.15831692877998726, "sum": 0.15831692877998726, "sizes": 0.15831692877998726}}, {"docstring": " Two multilinear maps indexed by `fin n` are equal if they are equal when all arguments are basis vectors.\n", "keywords": {"multilinear maps indexed": 0.002535831815717203, "basis vectors": 0.012240009979360944, "multilinear maps": 0.018310930906343142, "maps indexed": 0.018310930906343142, "arguments are basis": 0.018310930906343142, "equal": 0.06839635777587465, "fin": 0.09017440044927587, "vectors": 0.09017440044927587, "multilinear": 0.13409574860218185, "maps": 0.13409574860218185, "indexed": 0.13409574860218185, "arguments": 0.13409574860218185, "basis": 0.13409574860218185}}, {"docstring": "The tangent bundle projection on the basis is an open map.\n", "keywords": {"tangent bundle projection": 0.0042542192213185686, "open map": 0.015380821171891606, "tangent bundle": 0.02570861714399338, "bundle projection": 0.02570861714399338, "map": 0.09568045026443411, "tangent": 0.15831692877998726, "bundle": 0.15831692877998726, "projection": 0.15831692877998726, "basis": 0.15831692877998726, "open": 0.15831692877998726}}, {"docstring": "Counterpart to `list.sum_take_succ` when we have an negation operation\n", "keywords": {"list.sum": 0.04491197687864554, "succ": 0.04491197687864554, "negation operation": 0.04940384002065631, "Counterpart": 0.15831692877998726, "operation": 0.15831692877998726, "negation": 0.29736558256021506}}, {"docstring": "**Alias** of sub_neg`.\n", "keywords": {"Alias": 0.030396371632413578, "neg": 0.04491197687864554}}, {"docstring": "Scalar multiplication (by possibly different types) of a balanced set is monotone.\n", "keywords": {"Scalar multiplication": 0.02570861714399338, "possibly different types": 0.04940384002065631, "set is monotone": 0.04940384002065631, "balanced set": 0.09700399286574239, "Scalar": 0.15831692877998726, "multiplication": 0.15831692877998726, "types": 0.15831692877998726, "monotone": 0.15831692877998726, "possibly": 0.29736558256021506, "balanced": 0.29736558256021506, "set": 0.29736558256021506}}, {"docstring": "Assumes left covariance.\n", "keywords": {"Assumes left covariance": 0.008321268142839145, "Assumes left": 0.04940384002065631, "left covariance": 0.04940384002065631, "Assumes": 0.15831692877998726, "covariance": 0.15831692877998726, "left": 0.29736558256021506}}, {"docstring": " If `m` is a proper divisor of `n`, then `X ^ m - 1` divides `\u220f i in nat.proper_divisors n, cyclotomic i R`.\n", "keywords": {"proper divisor": 0.05417025203414716, "divides": 0.054709255964732355, "nat.proper": 0.11521656054299435, "cyclotomic": 0.11521656054299435, "proper": 0.1879836817695587, "divisor": 0.2733568418908229, "divisors": 0.2733568418908229}}, {"docstring": "Composition by continuous linear maps on the left preserves `C^n` functions.\n", "keywords": {"continuous linear maps": 0.03339840940482845, "functions": 0.04491197687864554, "Composition by continuous": 0.04940384002065631, "left preserves": 0.04940384002065631, "continuous linear": 0.09700399286574239, "linear maps": 0.09700399286574239, "Composition": 0.15831692877998726, "preserves": 0.15831692877998726, "continuous": 0.29736558256021506, "linear": 0.29736558256021506, "maps": 0.29736558256021506, "left": 0.29736558256021506}}, {"docstring": "If `R` is an additive monoid, an element in `add_units R` is add-regular.\n", "keywords": {"additive monoid": 0.015380821171891606, "add": 0.04491197687864554, "monoid": 0.09568045026443411, "units": 0.09568045026443411, "add-regular": 0.09568045026443411, "additive": 0.15831692877998726, "element": 0.15831692877998726}}, {"docstring": "Every matrix indexed by a subsingleton is diagonal.\n", "keywords": {"subsingleton is diagonal": 0.04940384002065631, "matrix indexed": 0.09700399286574239, "diagonal": 0.15831692877998726, "matrix": 0.29736558256021506, "indexed": 0.29736558256021506, "subsingleton": 0.29736558256021506}}, {"docstring": "**Pythagorean theorem**, if-and-only-if angle-at-point form.\n", "keywords": {"Pythagorean theorem": 0.013797198203993007, "form": 0.04491197687864554, "Pythagorean": 0.08596317751626563, "theorem": 0.15831692877998726}}, {"docstring": "Associate the dot product of `mul_vec` to the left.\n", "keywords": {"Associate the dot": 0.015380821171891606, "dot product": 0.02570861714399338, "mul": 0.04491197687864554, "vec": 0.04491197687864554, "Associate": 0.09568045026443411, "left": 0.09568045026443411, "dot": 0.15831692877998726, "product": 0.15831692877998726}}, {"docstring": "Two vertices are adjacent iff there is an edge between them. The condition `v \u2260 w` ensures they are different endpoints of the edge, which is necessary since when `v = w` the existential `\u2203 (e \u2208 G.edge_set), v \u2208 e \u2227 w \u2208 e` is satisfied by every edge incident to `v`.\n", "keywords": {"vertices are adjacent": 0.027512033015665804, "adjacent iff": 0.027512033015665804, "edge": 0.11304099775235055, "G.edge": 0.1356330752481822, "edge incident": 0.15902095309414402, "vertices": 0.16363186629194948, "adjacent": 0.16363186629194948, "iff": 0.16363186629194948, "set": 0.23194834746638684, "condition": 0.32059142640947197, "ensures": 0.32059142640947197, "existential": 0.32059142640947197, "endpoints": 0.40458132082341997, "satisfied": 0.40458132082341997, "incident": 0.40458132082341997}}, {"docstring": "**Alias** of the reverse direction of convex_hull_nonempty_iff`.\n", "keywords": {"direction of convex": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "hull": 0.04491197687864554, "nonempty": 0.04491197687864554, "iff": 0.04491197687864554, "convex": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " For every prime `p` dividing the order of a finite additive group `G` there exists an element of order `p` in `G`. This is the additive version of Cauchy's theorem.\n", "keywords": {"finite additive group": 0.009492507540550671, "exists an element": 0.036119736129487094, "additive group": 0.04697858484022939, "dividing the order": 0.06794329592555497, "finite additive": 0.06997399570413737, "Cauchy theorem": 0.09002208748153337, "element of order": 0.09754181216126784, "order": 0.11189915212105243, "version of Cauchy": 0.12162244135165391, "prime": 0.128104973733605, "dividing": 0.128104973733605, "group": 0.128104973733605, "additive": 0.1751322568019964, "additive version": 0.1839691291392774, "finite": 0.18670988494849627, "exists": 0.18670988494849627, "element": 0.18670988494849627, "Cauchy": 0.24443229915530815, "theorem": 0.3378743228266075, "version": 0.44361725888738957}}, {"docstring": "**Alias** of ssubset_of_ssubset_of_subset`.\n", "keywords": {"Alias": 0.035514607549195436, "ssubset": 0.055127829619426576, "subset": 0.05706283858652404}}, {"docstring": " A telescoping sum along `{0, ..., n - 1}` of an additive commutative group valued function reduces to the difference of the last and first terms.\n", "keywords": {"additive commutative group": 0.0042542192213185686, "commutative group valued": 0.0042542192213185686, "group valued function": 0.0042542192213185686, "valued function reduces": 0.0042542192213185686, "telescoping sum": 0.02570861714399338, "additive commutative": 0.02570861714399338, "commutative group": 0.02570861714399338, "group valued": 0.02570861714399338, "valued function": 0.02570861714399338, "function reduces": 0.02570861714399338, "terms": 0.09568045026443411, "telescoping": 0.15831692877998726, "sum": 0.15831692877998726, "additive": 0.15831692877998726, "commutative": 0.15831692877998726, "group": 0.15831692877998726, "valued": 0.15831692877998726, "function": 0.15831692877998726, "reduces": 0.15831692877998726, "difference": 0.15831692877998726}}, {"docstring": "Two equivalent local homeomorphisms have the same target\n", "keywords": {"equivalent local homeomorphisms": 0.03339840940482845, "equivalent local": 0.09700399286574239, "local homeomorphisms": 0.09700399286574239, "target": 0.15831692877998726, "equivalent": 0.29736558256021506, "local": 0.29736558256021506, "homeomorphisms": 0.29736558256021506}}, {"docstring": "**Alias** of the forward direction of sub_lt_iff_lt_add`.\n", "keywords": {"forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "add": 0.04491197687864554, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " A more general version of `finprod_mem_mul_diff` that requires `t \u2229 mul_support f` rather than `t` to be finite.\n", "keywords": {"mul": 0.018830794223096383, "general version": 0.033892441937102495, "finprod": 0.052376395424323874, "mem": 0.052376395424323874, "diff": 0.052376395424323874, "requires": 0.11060549338282699, "support": 0.11060549338282699, "finite": 0.11060549338282699, "general": 0.18105634546484617, "version": 0.18105634546484617}}, {"docstring": "A version of `triv_sq_zero_ext.snd_mul` with `*` instead of `\u2022`.\n", "keywords": {"triv": 0.04491197687864554, "ext.snd": 0.04491197687864554, "mul": 0.04491197687864554, "version": 0.15831692877998726}}, {"docstring": " A set is a neighborhood of `a` within `(a, +\u221e)` if and only if it contains an interval `(a, u)` with `a < u < u'`, provided `a` is not a top element.\n", "keywords": {"top element": 0.0038595505094717398, "provided": 0.04491197687864554, "interval": 0.05617160784335063, "element": 0.05617160784335063, "set": 0.06844581806138879, "neighborhood": 0.06844581806138879, "top": 0.06844581806138879}}, {"docstring": "Comparison test of convergence of `\u211d\u22650`-valued series.\n", "keywords": {"valued series": 0.009239332327148086, "Comparison test": 0.015380821171891606, "test of convergence": 0.02570861714399338, "Comparison": 0.09568045026443411, "valued": 0.09568045026443411, "series": 0.09568045026443411, "test": 0.15831692877998726, "convergence": 0.15831692877998726}}, {"docstring": " The `step_normal` function respects the `then k'` homomorphism. Note that this is an exact equality, not a simulation; the original and embedded machines move in lock-step until the embedded machine reaches the halt state.\n", "keywords": {"function respects": 0.013801099430952722, "embedded machines move": 0.043371308089504505, "embedded machine reaches": 0.043371308089504505, "step": 0.07298614409510307, "normal": 0.07298614409510307, "function": 0.10182989217618219, "homomorphism": 0.10182989217618219, "embedded machines": 0.10392938714938797, "exact equality": 0.10936076127076144, "halt state": 0.10936076127076144, "machines move": 0.11990158166863948, "machine reaches": 0.11990158166863948, "respects": 0.13368591196182802, "move in lock-step": 0.1386367006847222, "reaches the halt": 0.1386367006847222, "embedded": 0.15341525285405044, "original and embedded": 0.24067095067809546, "Note": 0.28251545179941845, "equality": 0.28251545179941845, "simulation": 0.28251545179941845}}, {"docstring": "All values of a function `f \u2208 std_simplex \ud835\udd5c \u03b9` belong to `[0, 1]`.\n", "keywords": {"std": 0.04491197687864554, "function": 0.15831692877998726, "simplex": 0.15831692877998726, "belong": 0.15831692877998726}}, {"docstring": " **Equality case of the Rearrangement Inequality**: Pointwise scalar multiplication of `f` and `g`, which antivary together, is unchanged by a permutation if and only if `f \u2218 \u03c3` and `g` antivary together. Stated by permuting the entries of `f`.\n", "keywords": {"Pointwise scalar multiplication": 0.0019254155628980188, "Rearrangement Inequality": 0.0050414360735746774, "Equality case": 0.010681703670791362, "Pointwise scalar": 0.010681703670791362, "scalar multiplication": 0.031040804666112243, "Equality": 0.060911257173420906, "Inequality": 0.060911257173420906, "Pointwise": 0.060911257173420906, "antivary": 0.07953440658135287, "Rearrangement": 0.08235173134587291, "Stated by permuting": 0.1549537691794176, "case": 0.17351161766281323, "scalar": 0.17351161766281323, "multiplication": 0.17351161766281323, "unchanged": 0.17351161766281323, "permutation": 0.17351161766281323, "permuting the entries": 0.21626281206510953, "Stated": 0.31817081130554614, "permuting": 0.42167437397336704, "entries": 0.42167437397336704}}, {"docstring": "Slightly stronger than `outer_measure.mono` having an intersection with `p.support`\n", "keywords": {"outer": 0.04491197687864554, "measure.mono": 0.04491197687864554, "p.support": 0.04491197687864554, "Slightly stronger": 0.04940384002065631, "Slightly": 0.15831692877998726, "stronger": 0.29736558256021506, "intersection": 0.29736558256021506}}, {"docstring": "Shows that all denominators are nonnegative.\n", "keywords": {"denominators are nonnegative": 0.04940384002065631, "Shows": 0.15831692877998726, "nonnegative": 0.15831692877998726, "denominators": 0.29736558256021506}}, {"docstring": "If a function is `C^n` with `1 \u2264 n`, then the derivative of `f` is also a strict derivative.\n", "keywords": {"strict derivative": 0.05913243875864445, "derivative": 0.14323823713631006, "function": 0.19488865479360015, "strict": 0.19488865479360015}}, {"docstring": "If a number is Liouville with exponent `p`, then it is Liouville with any smaller exponent.\n", "keywords": {"number is Liouville": 0.016175357908950545, "Liouville with exponent": 0.031421084972165086, "smaller exponent": 0.03278451112147437, "Liouville": 0.039693884779430415, "exponent": 0.07915846438999363, "number": 0.2005079697193566, "smaller": 0.2005079697193566}}, {"docstring": "A point in a set is in its affine span.\n", "keywords": {"affine span": 0.015380821171891606, "span": 0.09568045026443411, "point": 0.15831692877998726, "set": 0.15831692877998726, "affine": 0.15831692877998726}}, {"docstring": "Lemmas showing projection is the inverse of pi\n", "keywords": {"Lemmas showing projection": 0.01655915082773619, "Lemmas showing": 0.04940384002065631, "showing projection": 0.09700399286574239, "Lemmas": 0.15831692877998726, "showing": 0.29736558256021506, "projection": 0.29736558256021506, "inverse": 0.29736558256021506}}, {"docstring": "Precomposing `f` with `prod.fst` is continuous\n", "keywords": {"Precomposing": 0.04491197687864554, "prod.fst": 0.04491197687864554, "continuous": 0.15831692877998726}}, {"docstring": " From an upper bound on `sqrt_two_add_series 0 n = 2 cos (\u03c0 / 2 ^ (n+1))` of the form `sqrt_two_add_series 0 n \u2264 2 - (a / 2 ^ (n + 1)) ^ 2)`, one can deduce the lower bound `a < \u03c0` thanks to basic trigonometric inequalities as expressed in `pi_gt_sqrt_two_add_series`.\n", "keywords": {"basic trigonometric inequalities": 0.00157446800591198, "sqrt": 0.013317655549643422, "add": 0.013317655549643422, "series": 0.013317655549643422, "deduce the lower": 0.01337849109787037, "basic trigonometric": 0.01337849109787037, "trigonometric inequalities": 0.01337849109787037, "inequalities as expressed": 0.01337849109787037, "upper bound": 0.016595932770703897, "lower bound": 0.016595932770703897, "cos": 0.06211796664525684, "bound": 0.07104042933481054, "form": 0.08707008076515127, "upper": 0.11489939076266599, "deduce": 0.11489939076266599, "lower": 0.11489939076266599, "basic": 0.11489939076266599, "trigonometric": 0.11489939076266599, "inequalities": 0.11489939076266599, "expressed": 0.11489939076266599}}, {"docstring": "Given a finite set `t` and a subset `s` of `t`, the sum of `f i` over `i \u2208 s` plus the sum of `f i` over `t \\ s` equals the sum of `f i` over `i \u2208 t`.\n", "keywords": {"equals the sum": 0.006200348833150936, "finite set": 0.00967296853848807, "sum": 0.024115110522902473, "set": 0.08517676639600258, "subset": 0.08517676639600258, "equals": 0.08517676639600258, "finite": 0.1124754908737648}}, {"docstring": "The set of closed elements for `l` is the range of `u \u2218 l`.\n", "keywords": {"set of closed": 0.02570861714399338, "closed elements": 0.02570861714399338, "set": 0.15831692877998726, "closed": 0.15831692877998726, "elements": 0.15831692877998726, "range": 0.15831692877998726}}, {"docstring": " A bounded convergence theorem for a finite measure: If a sequence of bounded continuous non-negative functions are uniformly bounded by a constant and tend pointwise to a limit, then their integrals (`test_against_nn`) against the finite measure tend to the integral of the limit.  Related results:  * `tendsto_test_against_nn_filter_of_le_const`: more general assumptions  * `tendsto_lintegral_nn_of_le_const`: using `lintegral` for integration.\n", "keywords": {"finite measure tend": 0.003468169826724738, "continuous non-negative functions": 0.004063277412172347, "bounded convergence theorem": 0.004886602598673812, "bounded continuous non-negative": 0.004886602598673812, "finite measure": 0.009815741309647638, "measure tend": 0.02406713161745956, "convergence theorem": 0.02494757747614462, "continuous non-negative": 0.02494757747614462, "non-negative functions": 0.02494757747614462, "functions are uniformly": 0.02494757747614462, "tend pointwise": 0.027141549318447592, "bounded convergence": 0.029892282382805824, "bounded continuous": 0.029892282382805824, "uniformly bounded": 0.029892282382805824, "test": 0.05076110053158703, "limit": 0.05490344214534571, "bounded": 0.06201298754015328, "constant and tend": 0.06361628406645864, "finite": 0.06937850480729765, "measure": 0.06937850480729765}}, {"docstring": "A local maximum of a concave function is a global maximum, restricted to a set `s`.\n", "keywords": {"concave function": 0.01281102963567174, "local maximum": 0.015824512606866667, "global maximum": 0.015824512606866667, "maximum": 0.06925543344827902, "restricted": 0.08088209179216702, "set": 0.08088209179216702, "local": 0.11246769819744629, "concave": 0.11246769819744629, "function": 0.11246769819744629, "global": 0.11246769819744629}}, {"docstring": " Writing explicitly the `n+1`-th derivative as the composition of a currying linear equiv, and the `n`-th derivative of the derivative.\n", "keywords": {"currying linear equiv": 0.0014033964188006848, "Writing explicitly": 0.011105384224262597, "linear equiv": 0.011105384224262597, "currying linear": 0.015455129647434142, "derivative": 0.0531317968436764, "Writing": 0.08902894120058116, "equiv": 0.08902894120058116, "explicitly": 0.12336897526125244, "composition": 0.12336897526125244, "currying": 0.12336897526125244, "linear": 0.12336897526125244}}, {"docstring": "`\u220f i, (f i - g i) = (\u220f i, f i) - \u2211 i, g i * (\u220f j < i, f j - g j) * (\u220f j > i, f j)`.\n", "keywords": {}}, {"docstring": "The Legendre symbol of `p` and `a` is zero iff `p \u2223 a`.\n", "keywords": {"Legendre symbol": 0.013797198203993007, "Legendre": 0.08596317751626563, "iff": 0.09568045026443411, "symbol": 0.15831692877998726}}, {"docstring": " Helper when we need some `c.rel i j` (i.e. `complex_shape.down \u2115`), e.g. `c_mk n (n+1) rfl`\n", "keywords": {"complex": 0.04491197687864554, "rfl": 0.04491197687864554, "Helper": 0.09568045026443411, "c.rel": 0.09568045026443411, "shape.down": 0.09568045026443411}}, {"docstring": "The point provided by `contracting_with.fixed_point` is actually a fixed point.\n", "keywords": {"point provided": 0.04182683747999633, "fixed point": 0.04182683747999633, "contracting": 0.06073113495971585, "with.fixed": 0.06073113495971585, "point": 0.08789333660563434, "provided": 0.15225875770903138, "fixed": 0.15225875770903138}}, {"docstring": "Only assumes left strict covariance.\n", "keywords": {"left strict covariance": 0.016559150827736194, "assumes left strict": 0.03339840940482845, "strict covariance": 0.04940384002065631, "assumes left": 0.09700399286574239, "left strict": 0.09700399286574239, "covariance": 0.15831692877998726, "assumes": 0.29736558256021506, "left": 0.29736558256021506, "strict": 0.29736558256021506}}, {"docstring": " If the multiplicative supports of `f` and `g` are finite, then the product of `f i * g i` equals the product of `f i` multiplied by the product of `g i`.\n", "keywords": {"equals the product": 0.007246691631915269, "multiplicative supports": 0.015876462971787696, "product": 0.026568936978197902, "finite": 0.09026273698178425, "equals": 0.09026273698178425, "multiplied": 0.09026273698178425, "multiplicative": 0.1250133601147411, "supports": 0.1250133601147411}}, {"docstring": "The Hausdorff distance is nonnegative\n", "keywords": {"Hausdorff distance": 0.04498862876540802, "distance is nonnegative": 0.04940384002065631, "Hausdorff": 0.1447773057422032, "nonnegative": 0.15831692877998726, "distance": 0.29736558256021506}}, {"docstring": "Sum of a list of elements in a subfield is in the subfield.\n", "keywords": {"list of elements": 0.037831312533597124, "Sum": 0.11718348279991213, "subfield": 0.13945519496053638, "list": 0.19092478917347616, "elements": 0.19092478917347616}}, {"docstring": "In a non-trivial integral domain, an element is regular iff it is non-zero.\n", "keywords": {"non-trivial integral domain": 0.0025258761156662004, "integral domain": 0.015380821171891606, "non-trivial integral": 0.02570861714399338, "element is regular": 0.02570861714399338, "regular iff": 0.02570861714399338, "domain": 0.09568045026443411, "non-zero": 0.09568045026443411, "non-trivial": 0.15831692877998726, "integral": 0.15831692877998726, "element": 0.15831692877998726, "regular": 0.15831692877998726, "iff": 0.15831692877998726}}, {"docstring": "A more general version of `finsum_mem_insert` that requires `s \u2229 support f` rather than `s` to be finite.\n", "keywords": {"general version": 0.02570861714399338, "finsum": 0.04491197687864554, "mem": 0.04491197687864554, "insert": 0.04491197687864554, "requires": 0.09568045026443411, "support": 0.09568045026443411, "finite": 0.09568045026443411, "general": 0.15831692877998726, "version": 0.15831692877998726}}, {"docstring": "Diagonal matrices are generated by the `matrix.diagonal` of their `matrix.diag`.\n", "keywords": {"matrix.diagonal": 0.04491197687864554, "matrix.diag": 0.04491197687864554, "Diagonal matrices": 0.04940384002065631, "matrices are generated": 0.09700399286574239, "Diagonal": 0.15831692877998726, "matrices": 0.29736558256021506, "generated": 0.29736558256021506}}, {"docstring": " If `f` is a non constant polynomial with coefficients in `R`, and `P` is a prime ideal in `R`, then if every coefficient in `R` except the leading coefficient is in `P`, and the trailing coefficient is not in `P^2` and no non units in `R` divide `f`, then `f` is irreducible.\n", "keywords": {"constant polynomial": 0.010743108496861263, "prime ideal": 0.010743108496861263, "leading coefficient": 0.012290594889805273, "trailing coefficient": 0.012290594889805273, "coefficient": 0.039255621819603015, "polynomial with coefficients": 0.05387267931855758, "divide": 0.06073113495971585, "irreducible": 0.08088789541707538, "constant": 0.103096657787716, "polynomial": 0.103096657787716, "prime": 0.103096657787716, "ideal": 0.103096657787716, "leading": 0.103096657787716, "trailing": 0.103096657787716, "units": 0.103096657787716}}, {"docstring": " Oriented vector angle version of \"angles in same segment are equal\" and \"opposite angles of a cyclic quadrilateral add to \u03c0\", for oriented angles mod \u03c0 (for which those are the same result), represented here as equality of twice the angles.\n", "keywords": {"cyclic quadrilateral add": 0.0015842711022959436, "vector angle version": 0.0030278122893875412, "Oriented vector angle": 0.0037786774152807952, "oriented angles mod": 0.0037786774152807952, "segment are equal": 0.010147369773444829, "cyclic quadrilateral": 0.01343337441118177, "quadrilateral add": 0.01343337441118177, "Oriented vector": 0.016681243584272348, "opposite angles": 0.019151365954974357, "vector angle": 0.025426511159289934, "angle version": 0.025426511159289934, "angles mod": 0.025426511159289934, "oriented angles": 0.031664633857463396, "angles": 0.05384275608061274, "Oriented": 0.07125554373399041, "equal": 0.08725167853496457, "opposite": 0.08725167853496457, "result": 0.08725167853496457, "represented": 0.08725167853496457, "vector": 0.11513171091187872}}, {"docstring": "If \u2220ABC = \u03c0 then dist C B \u2260 0.\n", "keywords": {"ABC": 0.030396371632413578, "dist": 0.29736558256021506}}, {"docstring": " For a function on a convex set in a linearly ordered space (where the order and the algebraic structures aren't necessarily compatible), in order to prove that it is concave it suffices to verify the inequality `a \u2022 f x + b \u2022 f y \u2264 f (a \u2022 x + b \u2022 y)` for `x < y` and positive `a`, `b`. The main use case is `E = \ud835\udd5c` however one can apply it, e.g., to `\ud835\udd5c^n` with lexicographic order.\n", "keywords": {"linearly ordered space": 0.0016491920514522293, "ordered space": 0.01273036458635284, "necessarily compatible": 0.01273036458635284, "verify the inequality": 0.01273036458635284, "convex set": 0.0161906423499325, "linearly ordered": 0.0161906423499325, "algebraic structures": 0.0161906423499325, "concave it suffices": 0.0161906423499325, "suffices to verify": 0.0161906423499325, "order": 0.07756851121704096, "lexicographic order": 0.08429969350063911, "order to prove": 0.09348597846942659, "space": 0.09958698082159612, "compatible": 0.09958698082159612, "inequality": 0.09958698082159612, "positive": 0.09958698082159612, "main use case": 0.12564374152480812, "function": 0.12622472814029334, "convex": 0.12622472814029334, "set": 0.12622472814029334}}, {"docstring": " The norm of the sum of two non-zero vectors equals the sum of their norms if and only the angle between the two vectors is 0.\n", "keywords": {"non-zero vectors equals": 0.0016456655845347133, "equals the sum": 0.009321635540195303, "non-zero vectors": 0.014681930871247275, "vectors equals": 0.014681930871247275, "sum": 0.04219450044961737, "vectors": 0.06610686496404729, "non-zero": 0.10944015281422888, "equals": 0.10944015281422888, "angle": 0.10944015281422888, "norm": 0.13221372992809458, "norms": 0.13221372992809458}}, {"docstring": " If a function `f` is twice differentiable on a open convex set `D \u2286 \u211d` and `f''` is strictly positive on `D`, then `f` is strictly convex on `D`. Note that we don't require twice differentiability explicitly as it already implied by the second derivative being strictly positive.\n", "keywords": {"open convex set": 0.007907044226810045, "convex set": 0.03624146312343363, "open convex": 0.053345377657469856, "strictly positive": 0.05487953402171352, "strictly convex": 0.08751051916222415, "strictly": 0.10777104436688462, "convex": 0.12444385382578586, "function": 0.14052102502063993, "set": 0.14052102502063993, "positive": 0.15295312924066173, "differentiable": 0.203480385872871, "open": 0.203480385872871, "require twice differentiability": 0.28372513645769454, "differentiability explicitly": 0.28372513645769454, "Note": 0.36217611032090763, "derivative being strictly": 0.41600090757240527, "require": 0.47012449963829106, "differentiability": 0.47012449963829106, "explicitly": 0.47012449963829106, "implied": 0.47012449963829106}}, {"docstring": "This is a special case of `with_top.coe_sub` in the `ennreal` namespace\n", "keywords": {"top.coe": 0.04491197687864554, "ennreal": 0.04491197687864554, "namespace": 0.04491197687864554, "special case": 0.09700399286574239, "special": 0.29736558256021506, "case": 0.29736558256021506}}, {"docstring": "Any descending central series for a group is bounded below by the lower central series.\n", "keywords": {"descending central series": 0.010456048867975921, "lower central series": 0.010456048867975921, "central series": 0.02495406599442899, "group is bounded": 0.039481144315219374, "descending central": 0.04437656514447953, "lower central": 0.04437656514447953, "central": 0.10901343189444501, "series": 0.10901343189444501, "descending": 0.19488865479360015, "group": 0.19488865479360015, "bounded": 0.19488865479360015, "lower": 0.19488865479360015}}, {"docstring": "A rewrite lemma for `padic_val_rat p (q\u207b\u00b9)` with condition `q \u2260 0`.\n", "keywords": {"rewrite lemma": 0.02570861714399338, "padic": 0.04491197687864554, "val": 0.04491197687864554, "rat": 0.09568045026443411, "condition": 0.09568045026443411, "rewrite": 0.15831692877998726, "lemma": 0.15831692877998726}}, {"docstring": " Viewing a module as an affine space modelled on itself, affine combinations are just linear combinations.\n", "keywords": {"affine space modelled": 0.0119895930812633, "Viewing a module": 0.0233550736766052, "space modelled": 0.038584678130008584, "affine space": 0.05755977077196411, "linear combinations": 0.05755977077196411, "affine combinations": 0.08664488659198114, "Viewing": 0.11840455484321102, "affine": 0.1411879566095664, "combinations": 0.1411879566095664, "module": 0.19274649316101516, "space": 0.19274649316101516, "modelled": 0.19274649316101516, "linear": 0.19274649316101516}}, {"docstring": " The `Lp`-norm of a bounded continuous function is at most a constant (depending on the measure of the whole space) times its sup-norm.\n", "keywords": {"bounded continuous function": 0.0016012214736657916, "times its sup-norm": 0.005987543063120938, "bounded continuous": 0.013527995261974615, "continuous function": 0.013527995261974615, "norm": 0.0771485953923296, "constant": 0.0771485953923296, "depending": 0.0771485953923296, "space": 0.0771485953923296, "times": 0.0771485953923296, "sup-norm": 0.0771485953923296, "bounded": 0.1155310835876123, "continuous": 0.1155310835876123, "function": 0.1155310835876123, "measure": 0.1155310835876123}}, {"docstring": " If `f` is an antitone function from `\u2124` to a preorder and `x` lies between `f (n + 1)` and `f n`, then `x` doesn't lie in the range of `f`.\n", "keywords": {"antitone function": 0.013453448411345069, "antitone": 0.11521656054299435, "function": 0.11521656054299435, "preorder": 0.11521656054299435, "range": 0.11521656054299435, "lies": 0.14324596573275905, "lie": 0.14324596573275905}}, {"docstring": "A sequential limit of measurable `\u211d\u22650\u221e` valued functions is measurable.\n", "keywords": {"valued functions": 0.022138323509052035, "sequential limit": 0.03663237450220032, "limit of measurable": 0.06460392234869006, "functions is measurable": 0.06460392234869006, "measurable": 0.07162298286637953, "valued": 0.11521656054299435, "sequential": 0.1879836817695587, "limit": 0.1879836817695587, "functions": 0.1879836817695587}}, {"docstring": " H\u00f6lder inequality: the scalar product of two functions is bounded by the product of their `L^p` and `L^q` norms when `p` and `q` are conjugate exponents. A version for `nnreal`-valued functions. For an alternative version, convenient if the infinite sums are not already expressed as `p`-th powers, see `inner_le_Lp_mul_Lq_tsum`.\n", "keywords": {"H\u00f6lder inequality": 0.021064390099522556, "conjugate exponents": 0.03074136996802086, "scalar product": 0.03988538130564902, "product": 0.09235760209662533, "H\u00f6lder": 0.14363089919343702, "inequality": 0.14363089919343702, "norms": 0.14363089919343702, "exponents": 0.14363089919343702, "valued functions": 0.16309443180762734, "functions is bounded": 0.17561774315657866, "functions": 0.1904756520732758, "scalar": 0.20764698565361306, "bounded": 0.20764698565361306, "conjugate": 0.20764698565361306, "nnreal": 0.2467946667950968, "version": 0.2635534172301641, "mul": 0.32312528915042654, "tsum": 0.32312528915042654, "valued": 0.36809057109126164, "alternative version": 0.42958568888056026}}, {"docstring": "In a local ring the characteristics is either zero or a prime power.\n", "keywords": {"prime power": 0.015380821171891606, "local ring": 0.02570861714399338, "ring the characteristics": 0.02570861714399338, "power": 0.09568045026443411, "local": 0.15831692877998726, "ring": 0.15831692877998726, "characteristics": 0.15831692877998726, "prime": 0.15831692877998726}}, {"docstring": "Exactly one of the following is true (although we don't prove this here).\n", "keywords": {"true": 0.15831692877998726, "prove": 0.29736558256021506}}, {"docstring": "Any power of a left-regular element is left-regular.\n", "keywords": {"left-regular element": 0.05913243875864445, "element is left-regular": 0.12748048004056906, "left-regular": 0.14323823713631006, "power": 0.19488865479360015, "element": 0.19488865479360015}}, {"docstring": "A subgroup is closed under inverse.\n", "keywords": {"closed under inverse": 0.04940384002065631, "subgroup is closed": 0.09700399286574239, "inverse": 0.15831692877998726, "subgroup": 0.29736558256021506, "closed": 0.29736558256021506}}, {"docstring": "The positive cone of an ordered module is always salient.\n", "keywords": {"positive cone": 0.09700399286574239, "ordered module": 0.09700399286574239, "salient": 0.15831692877998726, "positive": 0.29736558256021506, "cone": 0.29736558256021506, "ordered": 0.29736558256021506, "module": 0.29736558256021506}}, {"docstring": " The iterated differential within a set `s` at a point `x` is not modified if one intersects `s` with a neighborhood of `x` within `s`.\n", "keywords": {"iterated differential": 0.013527995261974615, "set": 0.0771485953923296, "point": 0.0771485953923296, "intersects": 0.0771485953923296, "iterated": 0.1155310835876123, "differential": 0.1155310835876123, "modified": 0.1155310835876123, "neighborhood": 0.1155310835876123}}, {"docstring": "See also `finprod_eq_of_bijective`, `fintype.prod_bijective` and `finset.prod_bij`.\n", "keywords": {"bijective": 0.02006098734604785, "finprod": 0.054709255964732355, "fintype.prod": 0.054709255964732355, "finset.prod": 0.054709255964732355, "bij": 0.054709255964732355}}, {"docstring": " The square of the cosine of `\u03c0 / 6` is `3 / 4` (this is sometimes more convenient than the result for cosine itself).\n", "keywords": {"result for cosine": 0.06405909490722954, "cosine": 0.094808423351325, "square": 0.1408007092310104, "convenient": 0.1408007092310104, "result": 0.1408007092310104}}, {"docstring": "Precomposing `f` with `prod.snd` is continuous at `x : \u03b1 \u00d7 \u03b2`\n", "keywords": {"Precomposing": 0.04491197687864554, "prod.snd": 0.04491197687864554, "continuous": 0.29736558256021506}}, {"docstring": " If `B : power_basis S A` is such that `is_integral R B.gen`, then `is_integral R (B.basis.repr (B.gen ^ n) i)` for all `i` if `minpoly S B.gen = (minpoly R B.gen).map (algebra_map R S)`. This is the case if `R` is a GCD domain and `S` is its fraction ring.\n", "keywords": {"integral R B.gen": 0.00930292699232413, "B.gen": 0.010107459194785801, "minpoly R B.gen": 0.021748873132684872, "integral": 0.042784107912786314, "minpoly": 0.05445487368678664, "map": 0.05445487368678664, "GCD domain": 0.08479393297667355, "power": 0.09148264605828473, "algebra": 0.09148264605828473, "basis": 0.1205360881417383, "fraction ring": 0.14107789484311442, "GCD": 0.20389092350680973, "ring": 0.3224957824550741, "case": 0.38337133652959865, "domain": 0.38337133652959865, "fraction": 0.38337133652959865}}, {"docstring": "A continuous function with compact support has a global maximum.\n", "keywords": {"global maximum": 0.015380821171891606, "continuous function": 0.02570861714399338, "function with compact": 0.02570861714399338, "compact support": 0.02570861714399338, "maximum": 0.09568045026443411, "continuous": 0.15831692877998726, "function": 0.15831692877998726, "compact": 0.15831692877998726, "support": 0.15831692877998726, "global": 0.15831692877998726}}, {"docstring": " A generalization of Van der Waerden's theorem: if `M` is a finitely colored commutative monoid, and `S` is a finite subset, then there exists a monochromatic homothetic copy of `S`.\n", "keywords": {"Van der Waerden": 0.0003152691419412414, "der Waerden theorem": 0.00037911714239608754, "colored commutative monoid": 0.0006400448072512631, "finitely colored commutative": 0.0008990471097494833, "monochromatic homothetic copy": 0.0008990471097494833, "Waerden theorem": 0.003917546799371481, "generalization of Van": 0.005484890844946624, "Van der": 0.005484890844946624, "der Waerden": 0.005484890844946624, "commutative monoid": 0.0065920978564317735, "finite subset": 0.0065920978564317735, "finitely colored": 0.009239332327148086, "colored commutative": 0.009239332327148086, "exists a monochromatic": 0.009239332327148086, "monochromatic homothetic": 0.009239332327148086, "homothetic copy": 0.009239332327148086, "Van": 0.057012387690331526, "Waerden": 0.057012387690331526, "theorem": 0.06844581806138879, "monoid": 0.06844581806138879}}, {"docstring": "An element `a` is right-regular if and only if a positive power of `a` is right-regular.\n", "keywords": {"positive power": 0.020225813225353943, "right-regular": 0.07334489383741181, "element": 0.09492398510093508, "positive": 0.1408007092310104, "power": 0.1408007092310104}}, {"docstring": "Transfer `is_O` over a `local_homeomorph`.\n", "keywords": {"Transfer": 0.04491197687864554, "local": 0.04491197687864554, "homeomorph": 0.04491197687864554}}, {"docstring": "**Dynkin's \u03c0-\u03bb theorem**: Given a collection of sets closed under binary intersections, then the Dynkin system it generates is equal to the \u03c3-algebra it generates. This result is known as the \u03c0-\u03bb theorem. A collection of sets closed under binary intersection is called a \u03c0-system (often requiring additionnally that is is non-empty, but we drop this condition in the formalization).\n", "keywords": {"Dynkin system": 0.014237238719936667, "system it generates": 0.026665269468769598, "\u03c3-algebra it generates": 0.026665269468769598, "Dynkin \u03c0-\u03bb theorem": 0.031550394507802504, "collection of sets": 0.0395314822947241, "sets closed": 0.0395314822947241, "closed under binary": 0.0395314822947241, "Dynkin": 0.03985781680486363, "generates is equal": 0.06255120019617603, "generates": 0.0737470067520022, "theorem": 0.07916981345390016, "binary intersections": 0.09694409463048508, "collection": 0.13534217711282895, "sets": 0.13534217711282895, "closed": 0.13534217711282895, "binary": 0.13534217711282895, "system": 0.17609325149124866, "equal": 0.17609325149124866, "\u03c3-algebra": 0.17609325149124866, "called a \u03c0-system": 0.2987776951293733}}, {"docstring": "`S.normed_mk` satisfies `is_quotient`.\n", "keywords": {"S.normed": 0.030396371632413578, "satisfies": 0.04491197687864554, "quotient": 0.04491197687864554}}, {"docstring": "The triangle (polygon) inequality for sequences of points; `finset.Ico` version.\n", "keywords": {"polygon": 0.04491197687864554, "finset.Ico": 0.04491197687864554, "version": 0.04491197687864554, "inequality for sequences": 0.04940384002065631, "sequences of points": 0.04940384002065631, "triangle": 0.15831692877998726, "inequality": 0.15831692877998726, "points": 0.15831692877998726, "sequences": 0.29736558256021506}}, {"docstring": "A binary injective function is injective when only the left argument varies.\n", "keywords": {"left argument varies": 0.004210515236259915, "binary injective function": 0.010494743012823167, "argument varies": 0.021567786782198985, "left argument": 0.035715520099333646, "binary injective": 0.05259515133015473, "injective function": 0.05259515133015473, "varies": 0.11369206228658875, "function is injective": 0.11487806119690562, "injective": 0.13453835116331675, "binary": 0.18569843656348187, "function": 0.18569843656348187, "left": 0.18569843656348187, "argument": 0.18569843656348187}}, {"docstring": "Any point is a periodic point of period `0`.\n", "keywords": {"periodic point": 0.05913243875864445, "point of period": 0.07902625570811261, "period": 0.11984314898676356, "point": 0.14323823713631006, "periodic": 0.19488865479360015}}, {"docstring": " If a function tends to infinity along a filter, then this function divided by a positive constant also tends to infinity.\n", "keywords": {"positive constant": 0.02114777441281124, "function divided": 0.02893602993452452, "filter": 0.09713402394201612, "function": 0.09770854302279938, "divided": 0.14390902704051098, "positive": 0.14390902704051098, "constant": 0.14390902704051098}}, {"docstring": " **Strict inequality case of the Rearrangement Inequality**: Pointwise multiplication of `f` and `g`, which antivary together, is strictly decreased by a permutation if and only if `f \u2218 \u03c3` and `g` do not antivary together. Stated by permuting the entries of `f`.\n", "keywords": {"Strict inequality case": 0.0016642028270215602, "Strict inequality": 0.008747117210927207, "Pointwise multiplication": 0.011683623122683102, "Rearrangement Inequality": 0.011811652352352629, "inequality case": 0.02602119105438165, "strictly decreased": 0.03495776414940041, "Strict": 0.06283799353160062, "Pointwise": 0.06283799353160062, "inequality": 0.06899702012035523, "Rearrangement": 0.08459615986079659, "antivary": 0.08562916729374415, "Stated by permuting": 0.17147630665836236, "case": 0.1837851895373716, "multiplication": 0.1837851895373716, "strictly": 0.1837851895373716, "decreased": 0.1837851895373716, "permutation": 0.1837851895373716, "permuting the entries": 0.23851325396085266, "Stated": 0.3335528702481384, "permuting": 0.4388397201336416}}, {"docstring": " In a real vector space, a convex set with nonempty interior is a set of unique differentiability.\n", "keywords": {"real vector space": 0.0016481455113524755, "vector space": 0.012051537142168538, "unique differentiability": 0.012051537142168538, "real vector": 0.018034246898548233, "nonempty interior": 0.018034246898548233, "convex set": 0.023937535241430174, "set with nonempty": 0.056623013142482255, "set of unique": 0.056623013142482255, "set": 0.08782297807514622, "space": 0.08946888050496495, "differentiability": 0.08946888050496495, "real": 0.13309686053898662, "vector": 0.13309686053898662, "convex": 0.13309686053898662, "nonempty": 0.13309686053898662, "interior": 0.13309686053898662, "unique": 0.13309686053898662}}, {"docstring": "**Alias** of the reverse direction of is_atom_dual_iff_is_coatom`.\n", "keywords": {"reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "atom": 0.04491197687864554, "dual": 0.04491197687864554, "iff": 0.04491197687864554, "coatom": 0.04491197687864554, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "On pseudometric spaces, a map is an isometry if and only if it preserves distances.\n", "keywords": {"pseudometric spaces": 0.015380821171891606, "preserves distances": 0.015380821171891606, "spaces": 0.09568045026443411, "distances": 0.09568045026443411, "pseudometric": 0.15831692877998726, "map": 0.15831692877998726, "isometry": 0.15831692877998726, "preserves": 0.15831692877998726}}, {"docstring": " An injective function from a nontrivial type has an argument at which it does not take a given value.\n", "keywords": {"injective function": 0.02570861714399338, "nontrivial type": 0.02570861714399338, "injective": 0.15831692877998726, "function": 0.15831692877998726, "nontrivial": 0.15831692877998726, "type": 0.15831692877998726, "argument": 0.15831692877998726}}, {"docstring": "If `\u03b1` is a seminormed ring with `\u22251\u2225 = 1`, then `\u2225a ^ n\u2225 \u2264 \u2225a\u2225 ^ n`. See also `norm_pow_le'`.\n", "keywords": {"seminormed ring": 0.01552184797949213, "seminormed": 0.12363091320521931, "ring": 0.12363091320521931, "norm": 0.17881754828257995, "pow": 0.17881754828257995}}, {"docstring": " A set is a neighborhood of `a` within `[a, +\u221e)` if and only if it contains an interval `[a, u)` with `a < u`.\n", "keywords": {"interval": 0.060154590733539764, "set": 0.0771485953923296, "neighborhood": 0.0771485953923296}}, {"docstring": "Lagrange's Mean Value Theorem, applied to convex domains.\n", "keywords": {"applied to convex": 0.04940384002065631, "convex domains": 0.04940384002065631, "Theorem": 0.08596317751626563, "Lagrange": 0.15831692877998726, "applied": 0.15831692877998726, "domains": 0.15831692877998726, "convex": 0.29736558256021506}}, {"docstring": "The p-adic norm is nonarchimedean: the norm of `p + q` is at most the max of the norm of `p` and the norm of `q`.\n", "keywords": {"p-adic norm": 0.01439891243819682, "norm": 0.02911359044309885, "norm is nonarchimedean": 0.04862219240017147, "nonarchimedean": 0.09254391454928153, "p-adic": 0.12188918023534531, "max": 0.12188918023534531}}, {"docstring": " If the liminf and the limsup of a filter coincide, then this filter converges to their common value, at least if the filter is eventually bounded above and below.\n", "keywords": {"eventually bounded": 0.02190347123841009, "filter coincide": 0.025124971092910998, "filter converges": 0.03764278761872227, "filter": 0.08259639922195942, "coincide": 0.09891140904350601, "filter is eventually": 0.11287251425962766, "liminf": 0.14640352592168662, "limsup": 0.14640352592168662, "converges": 0.14640352592168662, "common": 0.14640352592168662, "eventually": 0.14640352592168662, "bounded": 0.14640352592168662}}, {"docstring": "The set of natural number multiples of an element of an `add_monoid` `M` is an `add_submonoid` of `M`.\n", "keywords": {"natural number multiples": 0.0014340776174631702, "set of natural": 0.012578992104256836, "natural number": 0.012578992104256836, "number multiples": 0.012578992104256836, "add": 0.019053917256533312, "monoid": 0.0528063806271324, "submonoid": 0.0528063806271324, "set": 0.11145728654016383, "natural": 0.11145728654016383, "number": 0.11145728654016383, "multiples": 0.11145728654016383, "element": 0.11145728654016383}}, {"docstring": "The function `\u03bb x, (x - c)\u207b\u00b9` is integrable on `a..b` if and only if `a = b` or `c \u2209 [a, b]`.\n", "keywords": {"function": 0.0771485953923296, "integrable": 0.1155310835876123}}, {"docstring": " Let `f` be a function continuous on a convex (or, equivalently, connected) subset `D` of the real line. If `f` is differentiable on the interior of `D` and `f'` is negative, then `f` is a strictly antitone function on `D`.\n", "keywords": {"real line": 0.01558934809874684, "function continuous": 0.04019630066630857, "strictly antitone function": 0.04967116548030248, "equivalently": 0.07026717154473598, "connected": 0.07026717154473598, "subset": 0.07026717154473598, "convex": 0.10561787888104197, "line": 0.10561787888104197, "antitone function": 0.10953966440222587, "function": 0.13294389828278524, "continuous": 0.14533572323085503, "real": 0.14533572323085503, "strictly antitone": 0.15991384681661985, "negative": 0.29084826087808563, "differentiable": 0.3713044625068338, "interior": 0.3713044625068338, "strictly": 0.3713044625068338, "antitone": 0.3713044625068338}}, {"docstring": " If `g` tends to some `\ud835\udcdd a` along `f`, then it tends to `\ud835\udcdd (lim f g)`. We formulate this lemma with a `[nonempty \u03b1]` argument of `lim` derived from `h` to make it useful for types without a `[nonempty \u03b1]` instance. Because of the built-in proof irrelevance, Lean will unify this instance with any other instance.\n", "keywords": {"lim": 0.13265225525950097, "nonempty": 0.14657518453219143, "Lean will unify": 0.20156060944072945, "instance": 0.2061334911848773, "Lean": 0.27773849357621777, "formulate this lemma": 0.35421723218949286, "argument": 0.4011830754523014, "derived": 0.4011830754523014, "proof irrelevance": 0.4251847551142681, "built-in proof irrelevance": 0.45170278798648655, "irrelevance": 0.49394957004564694, "formulate": 0.5114352697800751, "lemma": 0.5114352697800751, "make": 0.5114352697800751, "types": 0.5114352697800751, "built-in proof": 0.5742926900247388, "built-in": 0.6039818732341703, "proof": 0.6039818732341703, "unify": 0.6039818732341703, "unify this instance": 1.1840303245147592}}, {"docstring": " If a family of submodules is `independent`, then a choice of nonzero vector from each submodule forms a linearly independent family.\n", "keywords": {"linearly independent family": 0.006214640268202945, "choice of nonzero": 0.021538791625229155, "nonzero vector": 0.021538791625229155, "forms a linearly": 0.021538791625229155, "submodule forms": 0.029581009763283855, "linearly independent": 0.029581009763283855, "independent family": 0.040745828174634596, "family": 0.09893255831095867, "independent": 0.09893255831095867, "family of submodules": 0.14324865740468262, "choice": 0.14520555658610762, "nonzero": 0.14520555658610762, "vector": 0.14520555658610762, "forms": 0.14520555658610762, "linearly": 0.14520555658610762, "submodules": 0.19786511662191733, "submodule": 0.19786511662191733}}, {"docstring": "The product of two `C^n` functions on a domain is `C^n`.\n", "keywords": {"functions": 0.09568045026443411, "product": 0.15831692877998726, "domain": 0.15831692877998726}}, {"docstring": "A continuous surjective open map is a quotient map.\n", "keywords": {"continuous surjective open": 0.007321883374053632, "surjective open map": 0.010962043841203115, "continuous surjective": 0.03663237450220032, "surjective open": 0.03663237450220032, "open map": 0.05417025203414716, "quotient map": 0.05417025203414716, "map": 0.13667842094541144, "continuous": 0.1879836817695587, "surjective": 0.1879836817695587, "open": 0.1879836817695587, "quotient": 0.1879836817695587}}, {"docstring": "A subsemigroup is closed under multiplication.\n", "keywords": {"closed under multiplication": 0.04940384002065631, "subsemigroup is closed": 0.09700399286574239, "multiplication": 0.15831692877998726, "subsemigroup": 0.29736558256021506, "closed": 0.29736558256021506}}, {"docstring": " `comap (algebra_map R S)` is a surjection from the prime spec of `R` to prime spec of `S`. `hP : (algebra_map R S).ker \u2264 P` is a slight generalization of the extension being injective\n", "keywords": {"prime spec": 0.013961862319351996, "algebra": 0.048786899708232745, "spec": 0.07078087965808927, "map": 0.08061438164435375, "comap": 0.08277789341219716, "prime": 0.09594812889846516, "extension being injective": 0.19982598141561259, "surjection": 0.2004414838583919, "ker": 0.23863984905110158, "slight generalization": 0.27652844496986745, "injective": 0.3578318841249809, "slight": 0.4654303048138128, "generalization": 0.4654303048138128, "extension": 0.4654303048138128}}, {"docstring": "The (scalar) product of a sequence that tends to zero with a bounded one also tends to zero.\n", "keywords": {"scalar": 0.04491197687864554, "product": 0.09568045026443411, "sequence": 0.15831692877998726, "bounded": 0.15831692877998726}}, {"docstring": "The norm of the extension is bounded by `\u2225fr\u2225`.\n", "keywords": {"extension is bounded": 0.02570861714399338, "norm": 0.15831692877998726, "extension": 0.15831692877998726, "bounded": 0.15831692877998726}}, {"docstring": "This is the `iff` version of `matrix.is_diag.from_blocks`.\n", "keywords": {"iff": 0.04491197687864554, "matrix.is": 0.04491197687864554, "diag.from": 0.04491197687864554, "blocks": 0.04491197687864554, "version": 0.15831692877998726}}, {"docstring": "Infinite ordinals that are cardinals are unbounded.\n", "keywords": {"Infinite ordinals": 0.015380821171891606, "cardinals are unbounded": 0.015380821171891606, "Infinite": 0.09568045026443411, "unbounded": 0.09568045026443411, "ordinals": 0.15831692877998726, "cardinals": 0.15831692877998726}}, {"docstring": "**Fermat's Theorem**: the derivative of a function at a local extremum equals zero.\n", "keywords": {"Fermat Theorem": 0.0032610119837787367, "local extremum equals": 0.0042542192213185686, "local extremum": 0.02570861714399338, "extremum equals": 0.02570861714399338, "Fermat": 0.057012387690331526, "Theorem": 0.057012387690331526, "derivative": 0.15831692877998726, "function": 0.15831692877998726, "local": 0.15831692877998726, "extremum": 0.15831692877998726, "equals": 0.15831692877998726}}, {"docstring": "If `irreducible (cyclotomic (p ^ n) R)` then `irreducible (cyclotomic p R).`\n", "keywords": {"irreducible": 0.02245598843932277, "cyclotomic": 0.07915846438999363}}, {"docstring": " If all elements of a `finset` satisfy the predicate `p`, a product over `s.subtype p` equals that product over `s`.\n", "keywords": {"satisfy the predicate": 0.012811029635671736, "finset": 0.05331699930238388, "equals that product": 0.054390667884512904, "product": 0.10038999320777726, "satisfy": 0.11246769819744627, "predicate": 0.11246769819744627, "s.subtype": 0.11246769819744627, "equals": 0.11246769819744627, "elements": 0.18385948854246909}}, {"docstring": " If a function tends to infinity along a filter, then this function multiplied by a negative constant (on the right) tends to negative infinity.\n", "keywords": {"negative constant": 0.02086821647147932, "function multiplied": 0.03117712943655666, "filter": 0.10028582371075691, "constant": 0.10028582371075691, "function": 0.10191687733271076, "negative": 0.10191687733271076, "multiplied": 0.14832923246533666}}, {"docstring": "Deprecated: use `fun_like.congr_fun` instead.\n", "keywords": {"fun": 0.021352745740207107, "Deprecated": 0.05706283858652404, "like.congr": 0.05706283858652404}}, {"docstring": " Product over a sigma type equals the product of fiberwise products. For rewriting in the reverse direction, use `finset.prod_sigma'`.\n", "keywords": {"sigma type equals": 0.01960137430172867, "type equals": 0.04482689692617938, "fiberwise products": 0.06563674807747755, "sigma type": 0.08548665180899907, "Product": 0.14868279128010753, "equals the product": 0.18104938051619054, "product of fiberwise": 0.18104938051619054, "sigma": 0.19010636530481273, "type": 0.20713198455404339, "equals": 0.20713198455404339, "fiberwise": 0.20713198455404339, "reverse direction": 0.21176197370600428, "finset.prod": 0.24621274290295234, "products": 0.29736558256021506, "direction": 0.3673621349224128, "rewriting": 0.4757034115784038, "reverse": 0.4757034115784038}}, {"docstring": "Given submodules `M \u2286 R` and `N \u2286 S = M\u207b\u00b9R`, with `f : R \u2192+* S` the localization map, we have `N \u207b\u00b9 S = T = (f\u207b\u00b9 (N \u2022 f(M))) \u207b\u00b9 R`. I.e., the localization of a localization is a localization.\n", "keywords": {"localization map": 0.06051662276409204, "localization": 0.09464513524172258, "submodules": 0.1507297281460632, "map": 0.1507297281460632}}, {"docstring": " Given a basis, an orientation equals the negation of that given by that basis if and only if it does not equal that given by that basis.\n", "keywords": {"orientation equals": 0.02368082459404839, "equals the negation": 0.05606869082675008, "basis": 0.06013201071728641, "orientation": 0.13231005339603957, "negation": 0.13231005339603957, "equals": 0.1748394404884849, "equal": 0.1748394404884849}}, {"docstring": " If a set has zero measure in a neighborhood of each of its points, then it has zero measure in a second-countable space.\n", "keywords": {"second-countable space": 0.012741693123860753, "measure": 0.05101428509898996, "points": 0.09202664026077896, "space": 0.09202664026077896, "set": 0.1367145963576765, "neighborhood": 0.1367145963576765, "second-countable": 0.1367145963576765}}, {"docstring": "an n-digit number in base b + 2 is less than (b + 2)^n\n", "keywords": {"n-digit number": 0.02570861714399338, "number in base": 0.02570861714399338, "n-digit": 0.15831692877998726, "number": 0.15831692877998726, "base": 0.15831692877998726}}, {"docstring": " The only divisors of prime powers are prime powers. See `eq_pow_find_of_dvd_irreducible_pow` for an explicit expression as a p-power (without using `count`).\n", "keywords": {"prime powers": 0.036558017629438964, "pow": 0.08203929792081494, "prime": 0.13051276149159122, "powers": 0.13051276149159122, "divisors of prime": 0.15339264079544715, "powers are prime": 0.22828706057227774, "find": 0.23187318976123666, "dvd": 0.23187318976123666, "irreducible": 0.23187318976123666, "count": 0.23187318976123666, "divisors": 0.25797744796985594, "p-power": 0.4044796838522386, "explicit expression": 0.42694432300038615, "explicit": 0.5469934269729811, "expression": 0.5469934269729811}}, {"docstring": " Embedding `i : fin n` into `fin (n + 1)` using a pivot `p` that is lesser results in a value that is greater than `p`.\n", "keywords": {"lesser results": 0.035715520099333646, "Embedding": 0.05393656033701752, "fin": 0.07030442419566416, "pivot": 0.11369206228658875, "lesser": 0.18569843656348187, "results": 0.18569843656348187, "greater": 0.18569843656348187}}, {"docstring": " `comp_change_of_variables m M N` is a bijection between `comp_partial_sum_source m M N` and `comp_partial_sum_target m M N`, yielding equal sums for functions that correspond to each other under the bijection. As `comp_change_of_variables m M N` is a dependent function, stating that it is a bijection is not directly possible, but the consequence on sums can be stated more easily.\n", "keywords": {"yielding equal sums": 0.004948722430343257, "yielding equal": 0.017520112828249997, "comp": 0.02067178196237118, "partial": 0.034986786066782745, "equal sums": 0.039616336188851874, "change": 0.05704085787488416, "variables": 0.07006903682580091, "bijection": 0.07292325062817247, "functions that correspond": 0.07621428863382572, "dependent function": 0.0902272649107769, "source": 0.11974424094284829, "target": 0.11974424094284829, "yielding": 0.11974424094284829, "sum": 0.1325049055109628, "sums": 0.1325049055109628, "stated more easily": 0.13404995081935284, "equal": 0.1437935020125398, "correspond": 0.1437935020125398, "functions": 0.22464850221968244, "function": 0.22464850221968244}}, {"docstring": "A subfield is closed under negation.\n", "keywords": {"closed under negation": 0.04940384002065631, "subfield is closed": 0.09700399286574239, "negation": 0.15831692877998726, "subfield": 0.29736558256021506, "closed": 0.29736558256021506}}, {"docstring": "`liminf` over a general filter is measurable. See `measurable_liminf` for the version over `\u2115`.\n", "keywords": {"liminf": 0.04934106913932707, "general filter": 0.07718963315665864, "measurable": 0.15228179662245217, "filter is measurable": 0.18422273852469898, "general": 0.26769077553528936, "filter": 0.26769077553528936, "version": 0.5593851868498433}}, {"docstring": " If a measure `\u03bc` admits finite spanning open sets such that the restriction of `\u03bc` to each set is outer regular, then the original measure is outer regular as well.\n", "keywords": {"admits finite spanning": 0.00513709306025998, "finite spanning open": 0.008567054330850995, "spanning open sets": 0.013077366723679965, "outer regular": 0.017773687275607644, "admits finite": 0.02459177073035948, "finite spanning": 0.040564923574392765, "spanning open": 0.040564923574392765, "open sets": 0.06104740651975287, "original measure": 0.06104740651975287, "outer": 0.07726414307411157, "set is outer": 0.10305548353840069, "measure is outer": 0.10305548353840069, "regular": 0.11107071682746067, "admits": 0.12156210109285605, "measure": 0.14570071893270706, "finite": 0.19744254481508877, "spanning": 0.19744254481508877, "open": 0.19744254481508877, "restriction": 0.19744254481508877, "original": 0.19744254481508877}}, {"docstring": "The closed thickening of a set contains the closure of the set.\n", "keywords": {"closed thickening": 0.020225813225353943, "set": 0.094808423351325, "closed": 0.1408007092310104, "thickening": 0.1408007092310104, "closure": 0.1408007092310104}}, {"docstring": "A special case of `ring_hom.eq_int_cast'` that happens to be true definitionally\n", "keywords": {"ring": 0.04491197687864554, "hom.eq": 0.04491197687864554, "int": 0.04491197687864554, "true definitionally": 0.04940384002065631, "special case": 0.09700399286574239, "cast": 0.15831692877998726, "definitionally": 0.15831692877998726, "special": 0.29736558256021506, "case": 0.29736558256021506, "true": 0.29736558256021506}}, {"docstring": "A natural number is odd iff it has residue `1` or `3` mod `4`\n", "keywords": {"mod": 0.04491197687864554, "natural number": 0.09700399286574239, "number is odd": 0.09700399286574239, "odd iff": 0.09700399286574239, "residue": 0.15831692877998726, "natural": 0.29736558256021506, "number": 0.29736558256021506, "odd": 0.29736558256021506, "iff": 0.29736558256021506}}, {"docstring": " Multiplying `a` by its inverse and then by itself results in `a` (whether or not `a` is zero).\n", "keywords": {"Multiplying": 0.04491197687864554, "inverse": 0.1155310835876123, "results": 0.1155310835876123}}, {"docstring": " `submodule.orthogonal` gives a `galois_connection` between `submodule \ud835\udd5c E` and its `order_dual`.\n", "keywords": {"submodule.orthogonal": 0.04491197687864554, "galois": 0.04491197687864554, "connection": 0.04491197687864554, "order": 0.04491197687864554, "dual": 0.04491197687864554, "submodule": 0.15831692877998726}}, {"docstring": "The `add_subsemigroup` generated by a set includes the set.\n", "keywords": {"set includes": 0.05417025203414716, "add": 0.054709255964732355, "subsemigroup": 0.054709255964732355, "generated": 0.11521656054299435, "includes the set": 0.11793310824193863, "set": 0.13667842094541144, "includes": 0.1879836817695587}}, {"docstring": "The set of Liouville numbers in dense.\n", "keywords": {"set of Liouville": 0.04498862876540802, "Liouville numbers": 0.04498862876540802, "numbers in dense": 0.04940384002065631, "Liouville": 0.1447773057422032, "dense": 0.15831692877998726, "set": 0.29736558256021506, "numbers": 0.29736558256021506}}, {"docstring": " The pigeonhole principle for finitely many pigeons counted by heads: given a function `f`, a finite sets `s` and `t`, and a number `b` such that `card s \u2264 card t \u2022 b`, there exists `y \u2208 t` such that its preimage in `s` has no more than `b` elements. See also `finset.exists_card_fiber_lt_of_card_lt_nsmul` for a stronger statement.\n", "keywords": {"counted by heads": 0.02112637973689562, "finite sets": 0.02112637973689562, "pigeonhole principle": 0.029084173299848567, "principle for finitely": 0.029084173299848567, "finitely many pigeons": 0.029084173299848567, "pigeons counted": 0.029084173299848567, "card": 0.05510022824576991, "elements": 0.08241437754748727, "heads": 0.12306730026004681, "function": 0.12306730026004681, "sets": 0.12306730026004681, "number": 0.12306730026004681, "exists": 0.12306730026004681, "stronger statement": 0.1562581228309888, "pigeonhole": 0.16811362480037773, "principle": 0.16811362480037773, "finitely": 0.16811362480037773, "pigeons": 0.16811362480037773, "counted": 0.16811362480037773, "finite": 0.16811362480037773}}, {"docstring": "A version of `quotient.eq'` compatible with `setoid.rel`, to make rewriting possible.\n", "keywords": {"setoid.rel": 0.04491197687864554, "quotient.eq compatible": 0.04940384002065631, "make rewriting": 0.09700399286574239, "quotient.eq": 0.15831692877998726, "version": 0.29736558256021506, "compatible": 0.29736558256021506, "make": 0.29736558256021506, "rewriting": 0.29736558256021506}}, {"docstring": "The Cesaro average of a converging sequence converges to the same limit.\n", "keywords": {"converging sequence converges": 0.0042542192213185686, "Cesaro average": 0.013797198203993007, "converging sequence": 0.02570861714399338, "sequence converges": 0.02570861714399338, "Cesaro": 0.08596317751626563, "limit": 0.09568045026443411, "average": 0.15831692877998726, "converging": 0.15831692877998726, "sequence": 0.15831692877998726, "converges": 0.15831692877998726}}, {"docstring": " A continuous function from an `opens_measurable_space` to a `borel_space` is ae-measurable.\n", "keywords": {"space": 0.019320982933644253, "continuous function": 0.034987023778306175, "opens": 0.05331699930238388, "measurable": 0.05331699930238388, "borel": 0.05331699930238388, "ae-measurable": 0.11246769819744627, "continuous": 0.18385948854246909, "function": 0.18385948854246909}}, {"docstring": " A set is a neighborhood of `a` within `[a, +\u221e)` if and only if it contains an interval `[a, u)` with `a < u < u'`, provided `a` is not a top element.\n", "keywords": {"top element": 0.0038595505094717398, "provided": 0.04491197687864554, "interval": 0.05617160784335063, "element": 0.05617160784335063, "set": 0.06844581806138879, "neighborhood": 0.06844581806138879, "top": 0.06844581806138879}}, {"docstring": " The angle at a point does not depend on the order of the other two points.\n", "keywords": {"angle": 0.1408007092310104, "depend": 0.1408007092310104, "order": 0.1408007092310104, "point": 0.18961684670265, "points": 0.18961684670265}}, {"docstring": " If `S` is the localization of the Jacobson ring `R` at the submonoid generated by `y : R`, then `S` is Jacobson.\n", "keywords": {"Jacobson ring": 0.008732081202570543, "submonoid generated": 0.019557279302732804, "Jacobson": 0.046395005704905186, "ring": 0.09329120537733218, "localization": 0.1384995633470844, "submonoid": 0.1384995633470844, "generated": 0.1384995633470844}}, {"docstring": " In the characteristic zero case, the centroid lies in the affine span if the set is nonempty.\n", "keywords": {"characteristic zero case": 0.0065920978564317735, "set is nonempty": 0.0065920978564317735, "centroid lies": 0.009239332327148086, "affine span": 0.009239332327148086, "case": 0.06844581806138879, "nonempty": 0.06844581806138879, "characteristic": 0.09568045026443411, "centroid": 0.09568045026443411, "lies": 0.09568045026443411, "affine": 0.09568045026443411, "span": 0.09568045026443411, "set": 0.09568045026443411}}, {"docstring": " The weighted sum is independent of the base point when the sum of the weights is 0.\n", "keywords": {"base point": 0.013095151449018445, "weighted sum": 0.016245817372079578, "sum is independent": 0.039755149664920254, "sum": 0.07030442419566416, "weighted": 0.11369206228658875, "independent": 0.11369206228658875, "base": 0.11369206228658875, "point": 0.11369206228658875, "weights": 0.11369206228658875}}, {"docstring": "The trace of the identity endomorphism is the dimension of the free module\n", "keywords": {"free module": 0.0065920978564317735, "identity endomorphism": 0.009239332327148086, "module": 0.06844581806138879, "trace": 0.09568045026443411, "identity": 0.09568045026443411, "endomorphism": 0.09568045026443411, "dimension": 0.09568045026443411, "free": 0.09568045026443411}}, {"docstring": " The inverse of a map which preserves multiplication, preserves multiplication when the target is commutative.\n", "keywords": {"target is commutative": 0.02391462167226668, "preserves multiplication": 0.02495406599442899, "map which preserves": 0.09916653097095413, "preserves": 0.10901343189444501, "multiplication": 0.10901343189444501, "commutative": 0.11984314898676356, "inverse": 0.19488865479360015, "map": 0.19488865479360015, "target": 0.19488865479360015}}, {"docstring": "The exponential characteristic is one if the characteristic is zero.\n", "keywords": {"exponential characteristic": 0.04771708711059453, "characteristic": 0.11357121248292479, "exponential": 0.2005079697193566}}, {"docstring": " If a function tends to negative infinity along a filter, then this function multiplied by a negative constant (on the left) tends to positive infinity.\n", "keywords": {"negative constant": 0.019786032098587585, "function multiplied": 0.029581009763283855, "filter": 0.09805740926331882, "constant": 0.09805740926331882, "left": 0.09805740926331882, "positive": 0.09805740926331882, "function": 0.09893255831095867, "negative": 0.09893255831095867, "multiplied": 0.14520555658610762}}, {"docstring": "Composing on the left by a uniformly continuous function preserves  uniform convergence on a set\n", "keywords": {"uniformly continuous function": 0.0042542192213185686, "continuous function preserves": 0.0042542192213185686, "function preserves uniform": 0.0042542192213185686, "preserves uniform convergence": 0.0042542192213185686, "uniformly continuous": 0.02570861714399338, "continuous function": 0.02570861714399338, "function preserves": 0.02570861714399338, "preserves uniform": 0.02570861714399338, "uniform convergence": 0.02570861714399338, "Composing": 0.09568045026443411, "set": 0.09568045026443411, "left": 0.15831692877998726, "uniformly": 0.15831692877998726, "continuous": 0.15831692877998726, "function": 0.15831692877998726, "preserves": 0.15831692877998726, "uniform": 0.15831692877998726, "convergence": 0.15831692877998726}}, {"docstring": "**Alias** of the forward direction of has_mfderiv_within_at_iff_has_fderiv_within_at`.\n", "keywords": {"forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "mfderiv": 0.04491197687864554, "iff": 0.04491197687864554, "fderiv": 0.04491197687864554, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "If the addition is smooth, then it is continuous. This is not an instance for technical reasons, see note [Design choices about smooth algebraic structures].\n", "keywords": {"smooth algebraic structures": 0.06468766104286576, "Design choices": 0.08540409672192315, "continuous": 0.12005345163377214, "addition is smooth": 0.1318782810331473, "technical reasons": 0.15843936916307186, "algebraic structures": 0.15843936916307186, "smooth algebraic": 0.16538414766813989, "smooth": 0.16679617783864303, "addition": 0.17571731612679403, "Design": 0.1849603183624796, "instance for technical": 0.2209631936168556, "choices about smooth": 0.3193232916312825, "reasons": 0.32150010055562234, "note": 0.32150010055562234, "structures": 0.32150010055562234, "instance": 0.42541096826386726, "technical": 0.42541096826386726, "choices": 0.42541096826386726, "algebraic": 0.42541096826386726}}, {"docstring": "**Alias** of the reverse direction of mul_sub_mul_div_mul_nonpos_iff`.\n", "keywords": {"reverse direction": 0.022401895700338237, "Alias": 0.03620452014532985, "mul": 0.04343368128437256, "div": 0.058865175910949544, "nonpos": 0.058865175910949544, "iff": 0.058865175910949544, "direction of mul": 0.06604405377106645, "reverse": 0.14802380456229533, "direction": 0.14802380456229533}}, {"docstring": " One subspace is not less than or equal to another if and only if it has a point not in the second subspace.\n", "keywords": {"subspace": 0.14323823713631006, "equal": 0.19488865479360015, "point": 0.19488865479360015}}, {"docstring": "The `v`-adic valuation of `1 : R` equals 1.\n", "keywords": {"adic valuation": 0.015380821171891606, "equals": 0.04491197687864554, "adic": 0.09568045026443411, "valuation": 0.15831692877998726}}, {"docstring": " The product of an element of the additive closure of a multiplicative subsemigroup `M` and an element of `M` is contained in the additive closure of `M`.\n", "keywords": {"additive closure": 0.00345820326272229, "multiplicative subsemigroup": 0.008928168471285964, "element": 0.041439408874615564, "additive": 0.041439408874615564, "closure": 0.041439408874615564, "subsemigroup": 0.08181382661701696, "product": 0.10816217784964993, "multiplicative": 0.10816217784964993, "contained": 0.10816217784964993}}, {"docstring": "A complex number `z` plus its conjugate `conj z` is `2` times its real part.\n", "keywords": {"complex number": 0.015380821171891606, "times its real": 0.015380821171891606, "real part": 0.015380821171891606, "number": 0.09568045026443411, "conjugate": 0.09568045026443411, "conj": 0.09568045026443411, "times": 0.09568045026443411, "part": 0.09568045026443411, "complex": 0.15831692877998726, "real": 0.15831692877998726}}, {"docstring": " Note that `star_module` is quite a strong requirement; as such we also provide the following variants which this lemma would not apply to: * `matrix.conj_transpose_smul_non_comm` * `matrix.conj_transpose_nsmul` * `matrix.conj_transpose_zsmul` * `matrix.conj_transpose_nat_cast_smul` * `matrix.conj_transpose_int_cast_smul` * `matrix.conj_transpose_inv_nat_cast_smul` * `matrix.conj_transpose_inv_int_cast_smul` * `matrix.conj_transpose_rat_smul` * `matrix.conj_transpose_rat_cast_smul`\n", "keywords": {"matrix.conj": 0.0036713651143856327, "transpose": 0.0036713651143856327, "smul": 0.005468436369984078, "cast": 0.009097672590373874, "strong requirement": 0.009408088723004963, "nat": 0.0316993572361741, "int": 0.0316993572361741, "inv": 0.0316993572361741, "rat": 0.0316993572361741, "star": 0.07297651193257473, "module": 0.07297651193257473, "comm": 0.07297651193257473, "nsmul": 0.07297651193257473, "zsmul": 0.07297651193257473, "Note": 0.0885781825207086, "requirement": 0.0885781825207086, "strong": 0.10522231652283304, "provide": 0.10522231652283304, "variants": 0.10522231652283304, "lemma": 0.10522231652283304}}, {"docstring": "In a preadditive category, if the product over `f : J \u2192 C` exists,    then the biproduct over `f` exists.\n", "keywords": {"exists": 0.02006098734604785, "preadditive category": 0.022138323509052035, "category": 0.11521656054299435, "preadditive": 0.1879836817695587, "product": 0.1879836817695587, "biproduct": 0.1879836817695587}}, {"docstring": "The union of all bounded set is the whole space.\n", "keywords": {"bounded set": 0.02570861714399338, "space": 0.09568045026443411, "union": 0.15831692877998726, "bounded": 0.15831692877998726, "set": 0.15831692877998726}}, {"docstring": "The product of `f i` over `i \u2208 {a}` equals `f a`.\n", "keywords": {"equals": 0.04491197687864554, "product": 0.15831692877998726}}, {"docstring": "The group of units of a complete normed ring is an open subset of the ring.\n", "keywords": {"complete normed ring": 0.0034967383756502376, "group of units": 0.018641876658774394, "complete normed": 0.018641876658774394, "open subset": 0.018641876658774394, "normed ring": 0.024893945799064354, "ring": 0.08977403887827273, "group": 0.135280142484453, "units": 0.135280142484453, "complete": 0.135280142484453, "normed": 0.135280142484453, "open": 0.135280142484453, "subset": 0.135280142484453}}, {"docstring": " In a Banach-algebra `\ud835\udd38` over `\ud835\udd42 = \u211d` or `\ud835\udd42 = \u2102`, if `x` and `y` commute, then `exp \ud835\udd42 (x+y) = (exp \ud835\udd42 x) * (exp \ud835\udd42 y)`.\n", "keywords": {"exp": 0.019755481867657996, "Banach-algebra": 0.04981479432925768, "commute": 0.06366341018402377}}, {"docstring": "The class number is `1` iff the ring of integers is a principal ideal domain.\n", "keywords": {"principal ideal domain": 0.0025258761156662004, "iff the ring": 0.015380821171891606, "ideal domain": 0.015380821171891606, "class number": 0.02570861714399338, "ring of integers": 0.02570861714399338, "principal ideal": 0.02570861714399338, "iff": 0.09568045026443411, "domain": 0.09568045026443411, "class": 0.15831692877998726, "number": 0.15831692877998726, "ring": 0.15831692877998726, "integers": 0.15831692877998726, "principal": 0.15831692877998726, "ideal": 0.15831692877998726}}, {"docstring": "Uses `right` co(ntra)variant.\n", "keywords": {"ntra": 0.04491197687864554, "variant": 0.04491197687864554}}, {"docstring": "An element a divides the sum a + b if and only if a divides b.\n", "keywords": {"element a divides": 0.022276459697343733, "divides the sum": 0.05315066605935327, "divides": 0.07571113878390312, "element": 0.14390902704051098, "sum": 0.14390902704051098}}, {"docstring": " An induction principle for closure membership. If `p` holds for `0`, `1`, and all elements of `s`, and is preserved under addition, negation, and multiplication, then `p` holds for all elements of the closure of `s`.\n", "keywords": {"induction principle": 0.04013144143432476, "closure membership": 0.05189264969389657, "holds": 0.13089221514293597, "membership": 0.1352784111955579, "principle for closure": 0.15962977986846352, "elements": 0.17826839753681534, "closure": 0.18233747514864834, "preserved under addition": 0.19281326521520784, "induction": 0.1964256808545537, "principle": 0.1964256808545537, "negation": 0.23408280182656144, "addition": 0.3520512103630526, "multiplication": 0.3520512103630526, "preserved": 0.4591542486422362}}, {"docstring": "Extracts the erased value, if it is a proof.\n", "keywords": {"Extracts the erased": 0.04940384002065631, "Extracts": 0.15831692877998726, "proof": 0.15831692877998726, "erased": 0.29736558256021506}}, {"docstring": " Induction principle for `finset`s in any type from which a given function `f` maps to a linearly ordered type : a predicate is true on all `s : finset \u03b1` provided that:  * it is true on the empty `finset`, * for every `s : finset \u03b1` and an element `a` such that for elements of `s` denoted by `x` we have   `f a \u2264 f x`, `p s` implies `p (insert a s)`.\n", "keywords": {"linearly ordered type": 0.0012960336931488938, "predicate is true": 0.008248126769963553, "Induction principle": 0.008311201570845615, "linearly ordered": 0.01061889620430199, "ordered type": 0.012384607646844509, "finset": 0.013827888776117524, "true": 0.03990358609289688, "type": 0.0596706463974447, "implies": 0.06036637872351746, "Induction": 0.08041244043386897, "function": 0.08041244043386897, "maps": 0.08041244043386897, "provided": 0.08041244043386897, "empty": 0.08041244043386897, "denoted": 0.08041244043386897, "insert": 0.08041244043386897, "principle": 0.10250521968741812, "linearly": 0.10250521968741812, "ordered": 0.10250521968741812, "predicate": 0.10250521968741812}}, {"docstring": "**Alias** of div_eq_mul_inv`.\n", "keywords": {"Alias": 0.030396371632413578, "mul": 0.04491197687864554, "inv": 0.04491197687864554, "div": 0.15831692877998726}}, {"docstring": " An open ball in a product space is a product of open balls. See also `metric.ball_pi'` for a version assuming `nonempty \u03b2` instead of `0 < r`.\n", "keywords": {"open ball": 0.03857539892787261, "open balls": 0.03857539892787261, "product space": 0.04031764382510051, "open": 0.09636208798950592, "product": 0.09636208798950592, "product of open": 0.13710480386356813, "ball": 0.19272417597901184, "balls": 0.19272417597901184, "version assuming": 0.20097116219473396, "space": 0.20109116132670046, "metric.ball": 0.23937626944391205, "assuming": 0.35876280059460885, "nonempty": 0.35876280059460885, "version": 0.4664378224654198}}, {"docstring": "**Alias** of int.nat_abs_sq`.\n", "keywords": {"Alias": 0.030396371632413578, "abs": 0.04491197687864554, "int.nat": 0.15831692877998726}}, {"docstring": "If `M` and `N` lie in the same universe, the rank of `M \u2297[R] N` is  `(module.rank R M) * (module.rank R N)`.\n", "keywords": {"module.rank": 0.03548996106871502, "lie": 0.09492398510093508, "universe": 0.09492398510093508, "rank": 0.1408007092310104}}, {"docstring": "Pythagorean theorem, vector inner product form.\n", "keywords": {"Pythagorean theorem": 0.02570861714399338, "vector inner product": 0.04940384002065631, "product form": 0.04940384002065631, "Pythagorean": 0.15831692877998726, "theorem": 0.15831692877998726, "vector": 0.15831692877998726, "form": 0.15831692877998726, "product": 0.29736558256021506}}, {"docstring": "A positive multiple of a vector is in the same ray as one it is in the same ray as.\n", "keywords": {"positive multiple": 0.037831312533597124, "ray": 0.07334489383741183, "positive": 0.19092478917347616, "multiple": 0.19092478917347616, "vector": 0.19092478917347616}}, {"docstring": " If a number `a` is less than or equal to the `liminf` of a function `f` at some filter and is greater than or equal to the `limsup` of `f`, then `f` tends to `a` along this filter.\n", "keywords": {"equal": 0.04478074116273408, "liminf": 0.05632962681207606, "limsup": 0.05632962681207606, "filter": 0.07442578585270058, "number": 0.08531189896378533, "function": 0.08531189896378533, "greater": 0.11840455484321102}}, {"docstring": " Convert back any exotic `\u2115`-smul to the canonical instance. This should not be needed since in mathlib all `add_comm_monoid`s should normally have exactly one `\u2115`-module structure by design.\n", "keywords": {"Convert back": 0.02541909697430123, "back any exotic": 0.02541909697430123, "canonical instance": 0.02541909697430123, "Convert": 0.12363091320521931, "exotic": 0.12363091320521931, "smul": 0.12363091320521931, "instance": 0.12363091320521931, "add": 0.17881754828257995, "comm": 0.17881754828257995, "monoid": 0.17881754828257995, "module structure": 0.18075564686791562, "structure by design": 0.18075564686791562, "back": 0.2005079697193566, "canonical": 0.2005079697193566, "module": 0.32883716426354986, "design": 0.32883716426354986, "needed": 0.46553351027698087, "mathlib": 0.46553351027698087, "structure": 0.46553351027698087}}, {"docstring": "**Alias** of the forward direction of star_convex_iff_ord_connected`.\n", "keywords": {"direction of star": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "convex": 0.04491197687864554, "iff": 0.04491197687864554, "ord": 0.04491197687864554, "connected": 0.04491197687864554, "star": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " If a topology `t'` is coarser than `t`, then any set `s` that is bounded with respect to `t` is bounded with respect to `t'`.\n", "keywords": {"bounded with respect": 0.004383521033960706, "bounded": 0.04661236163529819, "respect": 0.04661236163529819, "topology": 0.08767471314125588, "set": 0.08767471314125588, "coarser": 0.12156210109285605}}, {"docstring": "An isometry preserves distances.\n", "keywords": {"isometry preserves distances": 0.016559150827736194, "preserves distances": 0.04940384002065631, "isometry preserves": 0.09700399286574239, "distances": 0.15831692877998726, "isometry": 0.29736558256021506, "preserves": 0.29736558256021506}}, {"docstring": "The sine of `\u03c0 / 6` is `1 / 2`.\n", "keywords": {"sine": 0.29736558256021506}}, {"docstring": "The continued fraction of a rational number terminates.\n", "keywords": {"rational number terminates": 0.016559150827736194, "number terminates": 0.04940384002065631, "continued fraction": 0.09700399286574239, "rational number": 0.09700399286574239, "terminates": 0.15831692877998726, "continued": 0.29736558256021506, "fraction": 0.29736558256021506, "rational": 0.29736558256021506, "number": 0.29736558256021506}}, {"docstring": "If you add multiples of previous rows to the next row, the determinant doesn't change.\n", "keywords": {"add multiples": 0.035715520099333646, "multiples of previous": 0.035715520099333646, "previous rows": 0.05259515133015473, "change": 0.11369206228658875, "add": 0.18569843656348187, "multiples": 0.18569843656348187, "previous": 0.18569843656348187, "determinant": 0.18569843656348187, "rows": 0.2690767023266335, "row": 0.2690767023266335}}, {"docstring": " The product map of two `C^n` functions within a set at a point is `C^n` within the product set at the product point.\n", "keywords": {"product map": 0.031012080413987526, "product set": 0.034281146584336335, "product point": 0.044327151783294244, "product": 0.06346659729133913, "set": 0.08704027729228296, "functions": 0.10720382857785782, "point": 0.11146455649386641, "map": 0.15797947932871687}}, {"docstring": " If a map between pseudoemetric spaces is a uniform embedding then the edistance between `f x` and `f y` is controlled in terms of the distance between `x` and `y`.\n", "keywords": {"map between pseudoemetric": 0.013527995261974615, "pseudoemetric spaces": 0.013527995261974615, "uniform embedding": 0.013527995261974615, "controlled in terms": 0.013527995261974615, "map": 0.1155310835876123, "pseudoemetric": 0.1155310835876123, "spaces": 0.1155310835876123, "uniform": 0.1155310835876123, "embedding": 0.1155310835876123, "edistance": 0.1155310835876123, "controlled": 0.1155310835876123, "terms": 0.1155310835876123, "distance": 0.1155310835876123}}, {"docstring": "If `x \u2208 closure s` and `x + y \u2208 interior s`, then `x + t y \u2208 interior s` for `t \u2208 (0, 1]`.\n", "keywords": {"interior": 0.034222909030694394, "closure": 0.08922538916412363}}, {"docstring": " A set `s : set \u03b1` is countable if and only if there exists a function `\u03b1 \u2192 \u2115` injective on `s`.\n", "keywords": {"exists a function": 0.022138323509052035, "function": 0.11521656054299435, "injective": 0.11521656054299435, "set": 0.13667842094541144, "countable": 0.1879836817695587, "exists": 0.1879836817695587}}, {"docstring": " A continuous function from an `opens_measurable_space` to a `borel_space` is measurable.\n", "keywords": {"space": 0.021352745740207107, "continuous function": 0.039481144315219374, "opens": 0.05706283858652404, "borel": 0.05706283858652404, "measurable": 0.07571113878390312, "continuous": 0.19488865479360015, "function": 0.19488865479360015}}, {"docstring": " If there is a `n`-th primitive root of unity in `R` and `b` divides `n`, then there is a `b`-th primitive root of unity in `R`.\n", "keywords": {"primitive root": 0.013838200960749896, "root of unity": 0.013838200960749896, "divides": 0.06059273735728724, "primitive": 0.08205340856523911, "root": 0.08205340856523911, "unity": 0.08205340856523911}}, {"docstring": " `nth_roots n` as a `finset` is equal to the union of `primitive_roots i R` for `i \u2223 n` if there is a primitive root of unity in `R`.\n", "keywords": {"primitive root": 0.05807334130470928, "nth": 0.06037786452709367, "finset": 0.06037786452709367, "primitive": 0.1049580867604466, "root of unity": 0.12163750619826184, "roots": 0.1307329752893216, "equal": 0.15145892749810547, "union": 0.15145892749810547, "unity": 0.15145892749810547, "root": 0.2614659505786432}}, {"docstring": "The cardinality of an algebraic extension is at most the maximum of the cardinality of the base ring or `\u2135\u2080`\n", "keywords": {"algebraic extension": 0.013095151449018445, "base ring": 0.013095151449018445, "cardinality": 0.04213844269123149, "algebraic": 0.11369206228658875, "extension": 0.11369206228658875, "maximum": 0.11369206228658875, "base": 0.11369206228658875, "ring": 0.11369206228658875}}, {"docstring": "Any map `f` sends fixed points of `g \u2218 f` to fixed points of `f \u2218 g`.\n", "keywords": {"sends fixed points": 0.001914867784380601, "fixed points": 0.009315651332098867, "sends fixed": 0.0161330877342714, "points": 0.05776554179380615, "fixed": 0.07915846438999359, "map": 0.10028582371075691, "sends": 0.10028582371075691}}, {"docstring": "A category with finite biproducts has binary biproducts.  This is not an instance as typically in concrete categories there will be an alternative construction with nicer definitional properties.\n", "keywords": {"category with finite": 0.05695550697646169, "finite biproducts": 0.07446267217551815, "binary biproducts": 0.07446267217551815, "biproducts": 0.1492718039431732, "biproducts has binary": 0.157175113042052, "nicer definitional properties": 0.17641701301059803, "category": 0.2321344025274505, "finite": 0.2321344025274505, "binary": 0.2321344025274505, "definitional properties": 0.23483564339323365, "instance as typically": 0.3556212968930714, "typically in concrete": 0.3556212968930714, "concrete categories": 0.3556212968930714, "alternative construction": 0.3556212968930714, "construction with nicer": 0.3556212968930714, "nicer definitional": 0.3556212968930714, "properties": 0.3713044625068338, "instance": 0.5121824452574515, "typically": 0.5121824452574515, "concrete": 0.5121824452574515}}, {"docstring": "**Alias** of the forward direction of lt_inv_mul_iff_mul_lt`.\n", "keywords": {"mul": 0.019648131954263418, "Alias": 0.034278050535979626, "forward direction": 0.035715520099333646, "inv": 0.05393656033701752, "iff": 0.05393656033701752, "forward": 0.18569843656348187, "direction": 0.18569843656348187}}, {"docstring": " If a function is at least `C^1`, its bundled derivative (mapping `(x, v)` to `Df(x) v`) is continuous.\n", "keywords": {"bundled derivative": 0.015380821171891606, "mapping": 0.04491197687864554, "derivative": 0.09568045026443411, "continuous": 0.09568045026443411, "function": 0.15831692877998726, "bundled": 0.15831692877998726}}, {"docstring": " If a function `f x y` is such that `y \u21a6 f x y` is continuous for all `x`, and `x` lives in a discrete space, then `f` is continuous.\n", "keywords": {"discrete space": 0.00964721495732046, "continuous": 0.05674133872487197, "function": 0.08293109455034965, "lives": 0.08293109455034965, "space": 0.08293109455034965, "discrete": 0.11521656054299435}}, {"docstring": "The values before the squashed position stay the same.\n", "keywords": {"squashed position stay": 0.0016012214736657916, "squashed position": 0.013527995261974615, "position stay": 0.013527995261974615, "squashed": 0.1155310835876123, "position": 0.1155310835876123, "stay": 0.1155310835876123}}, {"docstring": "One-dimensional formal multilinear series representing the same function are equal.\n", "keywords": {"One-dimensional formal multilinear": 0.01655915082773619, "formal multilinear series": 0.03339840940482845, "multilinear series representing": 0.03339840940482845, "One-dimensional formal": 0.04940384002065631, "function are equal": 0.04940384002065631, "formal multilinear": 0.09700399286574239, "multilinear series": 0.09700399286574239, "series representing": 0.09700399286574239, "One-dimensional": 0.15831692877998726, "equal": 0.15831692877998726, "formal": 0.29736558256021506, "multilinear": 0.29736558256021506, "series": 0.29736558256021506, "representing": 0.29736558256021506, "function": 0.29736558256021506}}, {"docstring": " **Strict inequality case of the Rearrangement Inequality**: Pointwise scalar multiplication of `f` and `g`, which antivary together, is strictly decreased by a permutation if and only if `f \u2218 \u03c3` and `g` do not antivary together. Stated by permuting the entries of `f`.\n", "keywords": {"Strict inequality case": 0.0016376672505466826, "Pointwise scalar multiplication": 0.002200769509641363, "Strict inequality": 0.00866958983340238, "Pointwise scalar": 0.011561263824295709, "Rearrangement Inequality": 0.011712586350570936, "inequality case": 0.025703411153376713, "scalar multiplication": 0.03447074540170908, "strictly decreased": 0.03447074540170908, "Strict": 0.06261045944724858, "Pointwise": 0.06261045944724858, "inequality": 0.0686392828174212, "Rearrangement": 0.08433210096311344, "antivary": 0.08488187343535045, "Stated by permuting": 0.16944032286186908, "case": 0.18254344008272147, "scalar": 0.18254344008272147, "multiplication": 0.18254344008272147, "strictly": 0.18254344008272147, "decreased": 0.18254344008272147, "permutation": 0.18254344008272147}}, {"docstring": "**Alias** of filter.tendsto_at_bot_at_bot_of_monotone`.\n", "keywords": {"bot": 0.020602899695743707, "Alias": 0.03498516242744211, "monotone": 0.055708263664958506, "filter.tendsto": 0.11718348279991213}}, {"docstring": "Precomposing `f` with `prod.snd` is `C^n` at `(x, y)`\n", "keywords": {"Precomposing": 0.04491197687864554, "prod.snd": 0.04491197687864554}}, {"docstring": "`x * y` is equivalent to `y * x`.\n", "keywords": {"equivalent": 0.15831692877998726}}, {"docstring": "`(x, y) \u21a6 x ^ y` is strictly differentiable at `p : \u211d \u00d7 \u211d` such that `0 < p.fst`.\n", "keywords": {"strictly differentiable": 0.02570861714399338, "p.fst": 0.04491197687864554, "strictly": 0.15831692877998726, "differentiable": 0.15831692877998726}}, {"docstring": " Multiplication on the left by a nonzero element of a normed division ring tends to infinity at infinity. TODO: use `bornology.cobounded` instead of `filter.comap has_norm.norm filter.at_top`.\n", "keywords": {"normed division ring": 0.014253772289524548, "nonzero element": 0.05636004653065943, "normed division": 0.05636004653065943, "division ring": 0.05636004653065943, "TODO": 0.12664671072704925, "Multiplication": 0.14453368873287326, "norm.norm filter.at": 0.15841072361684636, "bornology.cobounded": 0.20684865028795477, "top": 0.20684865028795477, "left": 0.23098282466116205, "nonzero": 0.23098282466116205, "element": 0.23098282466116205, "normed": 0.23098282466116205, "division": 0.23098282466116205, "ring": 0.23098282466116205, "filter.comap": 0.36979497406271966, "norm.norm": 0.36979497406271966, "filter.at": 0.36979497406271966}}, {"docstring": "A measure on a finite product space equals the product measure if they are equal on  rectangles.\n", "keywords": {"finite product space": 0.013829607436229593, "product space equals": 0.02141879874542179, "finite product": 0.06340461682679863, "product space": 0.06340461682679863, "space equals": 0.06340461682679863, "equal on rectangles": 0.08414606766344489, "product measure": 0.09700399286574239, "rectangles": 0.12363091320521931, "measure": 0.14868279128010753, "product": 0.14868279128010753, "finite": 0.2005079697193566, "space": 0.2005079697193566, "equals the product": 0.2858772036260003, "equals": 0.29736558256021506, "equal": 0.29736558256021506}}, {"docstring": "**Alias** of mul_lt_mul_left'`.\n", "keywords": {"Alias": 0.035514607549195436, "left": 0.05706283858652404, "mul": 0.07571113878390312}}, {"docstring": " If the field `L` is an algebraic extension of the integral domain `A`, the integral closure `C` of `A` in `L` has fraction field `L`.\n", "keywords": {"integral domain": 0.014487458243829278, "integral closure": 0.014487458243829278, "fraction field": 0.015643506311977654, "algebraic extension": 0.02064652498550541, "field": 0.054147325146855434, "integral": 0.07442578585270056, "domain": 0.09593831581184391, "closure": 0.09593831581184391, "algebraic": 0.14222822903176371, "extension": 0.14222822903176371, "fraction": 0.14222822903176371}}, {"docstring": "The relation `\u2264` on a preorder is reflexive.\n", "keywords": {"preorder is reflexive": 0.04940384002065631, "relation": 0.15831692877998726, "reflexive": 0.15831692877998726, "preorder": 0.29736558256021506}}, {"docstring": "Cauchy\u2013Schwarz inequality with norm\n", "keywords": {"Schwarz inequality": 0.026233073037508336, "Cauchy": 0.04491197687864554, "inequality with norm": 0.04940384002065631, "Schwarz": 0.08596317751626563, "norm": 0.15831692877998726, "inequality": 0.29736558256021506}}, {"docstring": " If `E` is a vector space over two division rings `R` and `S`, then scalar multiplications agree on inverses of natural numbers in `R` and `S`.\n", "keywords": {"scalar multiplications agree": 0.0042542192213185686, "division rings": 0.015380821171891606, "vector space": 0.02570861714399338, "scalar multiplications": 0.02570861714399338, "multiplications agree": 0.02570861714399338, "agree on inverses": 0.02570861714399338, "inverses of natural": 0.02570861714399338, "natural numbers": 0.02570861714399338, "rings": 0.09568045026443411, "vector": 0.15831692877998726, "space": 0.15831692877998726, "division": 0.15831692877998726, "scalar": 0.15831692877998726, "multiplications": 0.15831692877998726, "agree": 0.15831692877998726, "inverses": 0.15831692877998726, "natural": 0.15831692877998726, "numbers": 0.15831692877998726}}, {"docstring": "**Alias** of left.mul_lt_one`.\n", "keywords": {"Alias": 0.030396371632413578, "left.mul": 0.15831692877998726}}, {"docstring": " Two finite measures on a Borel space are equal if they agree on all open-closed intervals.  If `\u03b1` is a conditionally complete linear order with no top element, `measure_theory.measure..ext_of_Ioc` is an extensionality lemma with weaker assumptions on `\u03bc` and `\u03bd`.\n", "keywords": {"Borel space": 0.013817697322181412, "open-closed intervals": 0.019616129053898358, "space are equal": 0.029062678374844445, "finite measures": 0.05715820118570897, "Borel": 0.08110150306042654, "conditionally complete linear": 0.11121836294671093, "complete linear order": 0.11121836294671093, "intervals": 0.11448002330524422, "Ioc": 0.12467331410398634, "top element": 0.14647303083770735, "finite": 0.16805324546939854, "space": 0.16805324546939854, "equal": 0.16805324546939854, "agree": 0.16805324546939854, "open-closed": 0.16805324546939854, "ext": 0.20163589309361857, "conditionally complete": 0.20481110485816773, "complete linear": 0.20481110485816773, "linear order": 0.20481110485816773, "extensionality lemma": 0.20481110485816773}}, {"docstring": "`average k G` is invariant under left multiplication by elements of `G`.\n", "keywords": {"invariant under left": 0.02570861714399338, "left multiplication": 0.02570861714399338, "multiplication by elements": 0.02570861714399338, "average": 0.09568045026443411, "invariant": 0.15831692877998726, "left": 0.15831692877998726, "multiplication": 0.15831692877998726, "elements": 0.15831692877998726}}, {"docstring": "`X` is simple iff it has subobject lattice `{\u22a5, \u22a4}`.\n", "keywords": {"subobject lattice": 0.04940384002065631, "simple iff": 0.09700399286574239, "lattice": 0.15831692877998726, "simple": 0.29736558256021506, "iff": 0.29736558256021506, "subobject": 0.29736558256021506}}, {"docstring": " **Rearrangement Inequality**: Pointwise scalar multiplication of `f` and `g` is minimized when `f` and `g` antivary together. Stated by permuting the entries of `g`.\n", "keywords": {"Pointwise scalar multiplication": 0.001271864619686412, "Rearrangement Inequality": 0.0031146356952437464, "Pointwise scalar": 0.008334116283452563, "scalar multiplication": 0.02249651976012989, "Rearrangement": 0.05572221155747183, "Inequality": 0.05572221155747183, "Pointwise": 0.05572221155747183, "antivary": 0.10028582371075691, "Stated by permuting": 0.11755105063023073, "scalar": 0.14832923246533666, "multiplication": 0.14832923246533666, "minimized": 0.14832923246533666, "permuting the entries": 0.165573765898185, "Stated": 0.2790829227183407, "permuting": 0.37689977775222827, "entries": 0.37689977775222827}}, {"docstring": " Given a finite set `s`, the product of `f i / g i` over `i \u2208 s` equals the product of `f i` over `i \u2208 s` divided by the product of `g i` over `i \u2208 s`.\n", "keywords": {"equals the product": 0.004829246850193831, "finite set": 0.007576733965429868, "product": 0.020571714869365307, "set": 0.077874520754567, "equals": 0.077874520754567, "divided": 0.077874520754567, "finite": 0.09656250441100277}}, {"docstring": "`set.image` is monotone. See `set.image_image` for the statement in terms of `\u2286`.\n", "keywords": {"set.image": 0.045519088506279205, "monotone": 0.15831692877998726, "image": 0.22501140196509825, "statement in terms": 0.405922408220865, "statement": 0.5373296883685575, "terms": 0.5373296883685575}}, {"docstring": "**Alias** of the reverse direction of complete_lattice.independent_iff_sup_indep_univ`.\n", "keywords": {"direction of complete": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "lattice.independent": 0.04491197687864554, "iff": 0.04491197687864554, "indep": 0.04491197687864554, "univ": 0.04491197687864554, "complete": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " **Strict inequality case of Rearrangement Inequality**: Pointwise scalar multiplication of `f` and `g`, which monovary together, is strictly decreased by a permutation if and only if `f` and `g \u2218 \u03c3` do not monovary together. Stated by permuting the entries of `g`.\n", "keywords": {"Strict inequality case": 0.0016376672505466826, "Pointwise scalar multiplication": 0.002200769509641363, "Strict inequality": 0.00866958983340238, "Pointwise scalar": 0.011561263824295709, "Rearrangement Inequality": 0.011712586350570936, "case of Rearrangement": 0.015634960653391074, "inequality case": 0.025703411153376713, "scalar multiplication": 0.03447074540170908, "strictly decreased": 0.03447074540170908, "Strict": 0.06261045944724858, "Pointwise": 0.06261045944724858, "inequality": 0.0686392828174212, "Rearrangement": 0.08433210096311344, "monovary": 0.08488187343535045, "Stated by permuting": 0.16944032286186908, "case": 0.18254344008272147, "scalar": 0.18254344008272147, "multiplication": 0.18254344008272147, "strictly": 0.18254344008272147, "decreased": 0.18254344008272147}}, {"docstring": "**Steinhaus Theorem** In any locally compact group `G` with a haar measure `\u03bc`, for any  measurable set `E` of positive measure, the set `E / E` is a neighbourhood of `1`.\n", "keywords": {"locally compact group": 0.0018272602444849633, "Steinhaus Theorem": 0.0028460810219301785, "compact group": 0.012904998963208847, "haar measure": 0.01436717525174228, "measurable set": 0.01436717525174228, "positive measure": 0.01436717525174228, "locally compact": 0.019286283660143136, "measure": 0.051483732084204585, "set": 0.051483732084204585, "Steinhaus": 0.053272918383365134, "Theorem": 0.053272918383365134, "group": 0.09262176965879712, "locally": 0.13755493784698053, "compact": 0.13755493784698053, "haar": 0.13755493784698053, "measurable": 0.13755493784698053, "positive": 0.13755493784698053, "neighbourhood": 0.13755493784698053}}, {"docstring": "**Alias** of the reverse direction of list.reverse_suffix`.\n", "keywords": {"direction of list.reverse": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "suffix": 0.04491197687864554, "list.reverse": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " The real exponential function tends to `0` at `-\u221e` or, equivalently, `exp(-x)` tends to `0` at `+\u221e`\n", "keywords": {"real exponential function": 0.0042542192213185686, "real exponential": 0.02570861714399338, "exponential function": 0.02570861714399338, "equivalently": 0.04491197687864554, "exp": 0.04491197687864554, "real": 0.15831692877998726, "exponential": 0.15831692877998726, "function": 0.15831692877998726}}, {"docstring": " If a function admits a power series expansion, then it is exponentially close to the partial sums of this power series on strict subdisks of the disk of convergence.  This version provides an upper estimate that decreases both in `\u2225y\u2225` and `n`. See also `has_fpower_series_on_ball.uniform_geometric_approx` for a weaker version.\n", "keywords": {"power series expansion": 0.01623118964570865, "disk of convergence": 0.03447136421898222, "power series": 0.0491320361639892, "function admits": 0.05037794007539055, "exponentially close": 0.05037794007539055, "partial sums": 0.05037794007539055, "strict subdisks": 0.05037794007539055, "series expansion": 0.07409147545498217, "power": 0.09867874189883817, "admits a power": 0.10077362607840752, "series": 0.15111693189853956, "expansion": 0.1521572292528725, "convergence": 0.1521572292528725, "function": 0.21900165995597978, "admits": 0.21900165995597978, "exponentially": 0.21900165995597978, "close": 0.21900165995597978, "partial": 0.21900165995597978, "sums": 0.21900165995597978, "strict": 0.21900165995597978}}, {"docstring": " In a normed ring, the coercion from `R\u02e3` (equipped with the induced topology from the embedding in `R \u00d7 R`) to `R` is an open map.\n", "keywords": {"normed ring": 0.00899321792126428, "open map": 0.00899321792126428, "induced topology": 0.013527995261974615, "ring": 0.0771485953923296, "equipped": 0.0771485953923296, "map": 0.0771485953923296, "normed": 0.1155310835876123, "coercion": 0.1155310835876123, "induced": 0.1155310835876123, "topology": 0.1155310835876123, "embedding": 0.1155310835876123, "open": 0.1155310835876123}}, {"docstring": " The exponential map in `\ud835\udd42 = \u211d` or `\ud835\udd42 = \u2102` has strict derivative `exp \ud835\udd42 x` at any point `x`.\n", "keywords": {"strict derivative": 0.00899321792126428, "exponential map": 0.013527995261974615, "derivative": 0.0771485953923296, "exp": 0.0771485953923296, "point": 0.0771485953923296, "exponential": 0.1155310835876123, "map": 0.1155310835876123, "strict": 0.1155310835876123}}, {"docstring": "**Fundamental theorem of arithmetic**\n", "keywords": {"Fundamental theorem": 0.026233073037508336, "theorem of arithmetic": 0.04940384002065631, "Fundamental": 0.08596317751626563, "arithmetic": 0.15831692877998726, "theorem": 0.29736558256021506}}, {"docstring": " If `x = y` then `y \u2264 x`. Note: this lemma uses `y \u2264 x` instead of `x \u2265 y`, because `le` is used almost exclusively in mathlib.\n", "keywords": {"exclusively in mathlib": 0.09108482621177338, "Note": 0.17881754828257995, "mathlib": 0.25386721785551913, "lemma": 0.32883716426354986, "exclusively": 0.32883716426354986}}, {"docstring": "The complex numbers are not countable.\n", "keywords": {"complex numbers": 0.09700399286574239, "countable": 0.15831692877998726, "complex": 0.29736558256021506, "numbers": 0.29736558256021506}}, {"docstring": "If a function is `C^n` with `n \u2265 1`, then it is differentiable.\n", "keywords": {"differentiable": 0.09568045026443411, "function": 0.15831692877998726}}, {"docstring": "If both `a` and `b` semiconjugate `x` to `y`, then so does `a * b`.\n", "keywords": {"semiconjugate": 0.04491197687864554}}, {"docstring": "The union of two bounded sets is bounded.\n", "keywords": {"bounded sets": 0.05913243875864445, "sets is bounded": 0.12748048004056906, "bounded": 0.14323823713631006, "union": 0.19488865479360015, "sets": 0.19488865479360015}}, {"docstring": " If two complex differentiable functions `f g : E \u2192 F` are equal on the boundary of a bounded set `U`, then they are equal on `closure U`.\n", "keywords": {"complex differentiable functions": 0.003969605018367032, "differentiable functions": 0.020744656539556924, "bounded set": 0.020744656539556924, "complex differentiable": 0.03439110359613085, "equal": 0.06839635777587466, "functions": 0.11145728654016383, "set": 0.11145728654016383, "closure": 0.11145728654016383, "complex": 0.1823394614884183, "differentiable": 0.1823394614884183, "boundary": 0.1823394614884183, "bounded": 0.1823394614884183}}, {"docstring": " Prefer putting constants to the left of `X ^ n`.  This lemma is the loop-avoiding `simp` version of `X_pow_mul`.\n", "keywords": {"Prefer putting constants": 0.005401660759706154, "Prefer putting": 0.02541909697430123, "putting constants": 0.04188746641162499, "Prefer": 0.12363091320521931, "simp": 0.17881754828257995, "pow": 0.17881754828257995, "mul": 0.17881754828257995, "putting": 0.2005079697193566, "constants": 0.2005079697193566, "left": 0.2005079697193566, "loop-avoiding": 0.32883716426354986, "version": 0.32883716426354986, "lemma": 0.46553351027698087}}, {"docstring": "A balanced set absorbs itself.\n", "keywords": {"balanced set absorbs": 0.03339840940482845, "balanced set": 0.09700399286574239, "set absorbs": 0.09700399286574239, "balanced": 0.29736558256021506, "set": 0.29736558256021506, "absorbs": 0.29736558256021506}}, {"docstring": " The restriction of a reflexive, non-degenerate bilinear form on the orthogonal complement of the span of a singleton is also non-degenerate.\n", "keywords": {"non-degenerate bilinear form": 0.003303977098058869, "bilinear form": 0.018034246898548233, "orthogonal complement": 0.018034246898548233, "non-degenerate bilinear": 0.023937535241430174, "non-degenerate": 0.08782297807514622, "reflexive": 0.08946888050496495, "restriction": 0.13309686053898662, "bilinear": 0.13309686053898662, "form": 0.13309686053898662, "orthogonal": 0.13309686053898662, "complement": 0.13309686053898662, "span": 0.13309686053898662, "singleton": 0.13309686053898662}}, {"docstring": "Shorthand for using projection notation with `function.bijective_iff_exists_unique`.\n", "keywords": {"function.bijective": 0.04491197687864554, "iff": 0.04491197687864554, "exists": 0.04491197687864554, "unique": 0.04491197687864554, "projection notation": 0.09700399286574239, "Shorthand": 0.15831692877998726, "projection": 0.29736558256021506, "notation": 0.29736558256021506}}, {"docstring": "**Alias** of le_of_eq`.\n", "keywords": {"Alias": 0.030396371632413578}}, {"docstring": "**Isosceles Triangle Theorem**: Pons asinorum, angle-at-point form.\n", "keywords": {"Isosceles Triangle Theorem": 0.0011031048803583578, "Isosceles Triangle": 0.012602360123953448, "Triangle Theorem": 0.012602360123953448, "Pons asinorum": 0.013797198203993007, "form": 0.04491197687864554, "Isosceles": 0.08596317751626563, "Theorem": 0.08596317751626563, "Pons": 0.08596317751626563, "Triangle": 0.1447773057422032, "asinorum": 0.15831692877998726}}, {"docstring": " A triple is still a triple if you multiply `x`, `y` and `z` by a constant `k`.\n", "keywords": {"triple": 0.07571113878390312, "multiply": 0.09713402394201612, "constant": 0.09713402394201612}}, {"docstring": "The indexed supremum of a function is bounded below by the value taken at one point\n", "keywords": {"indexed supremum": 0.02570861714399338, "function is bounded": 0.02570861714399338, "point": 0.09568045026443411, "indexed": 0.15831692877998726, "supremum": 0.15831692877998726, "function": 0.15831692877998726, "bounded": 0.15831692877998726}}, {"docstring": " If a function `f` is differentiable in a convex open set and continuous on its closure, and its derivative converges to a limit `f'` at a point on the boundary, then `f` is differentiable there with derivative `f'`.\n", "keywords": {"convex open set": 0.0015241954247089146, "convex open": 0.013095151449018445, "open set": 0.013095151449018445, "set and continuous": 0.013095151449018445, "derivative converges": 0.016245817372079578, "differentiable": 0.05566114900812666, "derivative": 0.07030442419566416, "function": 0.08179429269966654, "closure": 0.08179429269966654, "limit": 0.08179429269966654, "boundary": 0.08179429269966654, "convex": 0.11369206228658875, "open": 0.11369206228658875, "set": 0.11369206228658875, "continuous": 0.11369206228658875, "converges": 0.11369206228658875, "point": 0.11369206228658875}}, {"docstring": " Given a finite nonempty affinely independent family of points, there is a unique (circumcenter, circumradius) pair for those points in the affine subspace they span.\n", "keywords": {"finite nonempty affinely": 0.006089936190040564, "nonempty affinely independent": 0.006089936190040564, "affinely independent family": 0.006089936190040564, "subspace they span": 0.019567497468398285, "finite nonempty": 0.03249356950085711, "nonempty affinely": 0.03249356950085711, "affinely independent": 0.03249356950085711, "independent family": 0.03249356950085711, "affine subspace": 0.03249356950085711, "circumcenter": 0.051156545382028185, "circumradius": 0.051156545382028185, "family of points": 0.1042077586299381, "unique": 0.10818430779536715, "pair": 0.10818430779536715, "span": 0.10818430779536715, "points": 0.12689355643328784, "finite": 0.1774005791880223, "nonempty": 0.1774005791880223, "affinely": 0.1774005791880223, "independent": 0.1774005791880223}}, {"docstring": "**Alias** of the reverse direction of order.succ_eq_iff_is_max`.\n", "keywords": {"direction of order.succ": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "max": 0.04491197687864554, "order.succ": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " If a function `f` is summable in norm, and along some sequence of finsets exhausting the space its sum is converging to a limit `a`, then this holds along all finsets, i.e., `f` is summable with sum `a`.\n", "keywords": {"exhausting the space": 0.014114791577289064, "finsets exhausting": 0.01778182519769534, "summable in norm": 0.025542857670251044, "sequence of finsets": 0.04318652502543795, "space its sum": 0.04318652502543795, "sum is converging": 0.04318652502543795, "summable": 0.058729421122071655, "summable with sum": 0.07269863523985495, "finsets": 0.07404538123493588, "sum": 0.07404538123493588, "function": 0.08499157470006824, "norm": 0.08499157470006824, "limit": 0.08499157470006824, "sequence": 0.1179760024298328, "exhausting": 0.1179760024298328, "space": 0.1179760024298328, "converging": 0.1179760024298328, "holds": 0.1179760024298328}}, {"docstring": "If `F\u2099` tends uniformly to `f`, and `g\u2099` tends to `x`, then `F\u2099 g\u2099` tends to `f x`.\n", "keywords": {"uniformly": 0.1155310835876123}}, {"docstring": " Given a `composition_series`, `s`, and an element `x` such that `x` is maximal inside `s.top` there is a series, `t`, such that `t.top = x`, `t.bot = s.bot` and `snoc t s.top _` is equivalent to `s`.\n", "keywords": {"maximal inside": 0.012904998963208847, "snoc t s.top": 0.02451724250789494, "series": 0.051483732084204585, "s.top": 0.051483732084204585, "composition": 0.05430009520648986, "t.top": 0.05430009520648986, "t.bot": 0.05430009520648986, "s.bot": 0.05430009520648986, "element": 0.09262176965879712, "inside": 0.09262176965879712, "snoc": 0.09262176965879712, "maximal": 0.13755493784698053, "equivalent": 0.13755493784698053}}, {"docstring": " Tower law: if `A` is a `K`-algebra and `K` is a field extension of `F` then `dim_F(A) = dim_F(K) * dim_K(A)`.\n", "keywords": {"Tower law": 0.007068535822231679, "dim": 0.012355538996295002, "field extension": 0.012402885817916232, "Tower": 0.08377900881718926, "law": 0.08377900881718926, "algebra": 0.08377900881718926, "field": 0.11068395919254974, "extension": 0.11068395919254974}}, {"docstring": " The exponential in a Banach-algebra `\ud835\udd38` over a normed field `\ud835\udd42` has Fr\u00e9chet-derivative `1 : \ud835\udd38 \u2192L[\ud835\udd42] \ud835\udd38` at zero, as long as it converges on a neighborhood of zero.\n", "keywords": {"normed field": 0.00899321792126428, "Banach-algebra": 0.04776309965539685, "Fr\u00e9chet-derivative": 0.04776309965539685, "field": 0.0771485953923296, "exponential": 0.1155310835876123, "normed": 0.1155310835876123, "long": 0.1155310835876123, "converges": 0.1155310835876123, "neighborhood": 0.1155310835876123}}, {"docstring": " Shows that `b\u2099 * B\u2099 \u2264 B\u2099\u208a\u2081`, where `b\u2099` is the `n`th partial denominator and `B\u2099\u208a\u2081` and `B\u2099` are the `n + 1`th and `n`th denominator of the continued fraction.\n", "keywords": {"continued fraction": 0.00685910535503564, "partial denominator": 0.009800167631153751, "denominator": 0.05201485183844375, "Shows": 0.07302273033568236, "fraction": 0.07302273033568236, "partial": 0.09329120537733218, "continued": 0.09329120537733218}}, {"docstring": "A non-zero `a : F` is a square if and only if `a ^ (#F / 2) = 1`.\n", "keywords": {"non-zero": 0.06844581806138879, "square": 0.09568045026443411}}, {"docstring": "`centroid_weights` equals a constant function.\n", "keywords": {"centroid": 0.04491197687864554, "weights": 0.04491197687864554, "equals a constant": 0.04940384002065631, "constant function": 0.04940384002065631, "equals": 0.15831692877998726, "function": 0.15831692877998726, "constant": 0.29736558256021506}}, {"docstring": "This ensures that `simp` succeeds on `pred (n + 1) = n`.\n", "keywords": {"simp": 0.04491197687864554, "pred": 0.04491197687864554, "succeeds": 0.09568045026443411, "ensures": 0.15831692877998726}}, {"docstring": " A version of **Dickson's lemma** any subset of functions `\u03a0 s : \u03c3, \u03b1 s` is partially well ordered, when `\u03c3` is a `fintype` and each `\u03b1 s` is a linear well order. This includes the classical case of Dickson's lemma that `\u2115 ^ n` is a well partial order. Some generalizations would be possible based on this proof, to include cases where the target is partially well ordered, and also to consider the case of `partially_well_ordered_on` instead of `is_pwo`.\n", "keywords": {"Dickson lemma": 0.016941911057194635, "subset of functions": 0.02596009904062935, "Dickson": 0.06630582388736167, "ordered": 0.06821384578664585, "partially well ordered": 0.06914906895728333, "linear well order": 0.08630966899470216, "partially": 0.09011387911826878, "partial order": 0.0969620419120403, "order": 0.10297583493305915, "fintype": 0.10855588361909924, "lemma": 0.12356884470471292, "functions": 0.14218294337870407, "case of Dickson": 0.14962522422108435, "version": 0.17796244906046074, "subset": 0.17796244906046074, "linear": 0.17796244906046074, "case": 0.20442974981491158, "include cases": 0.20930296699794093, "classical case": 0.2128216873776427, "target is partially": 0.2537521389383979}}, {"docstring": "Over the ring `zmod (p^(n+1))`, we produce the `n+1`st Witt polynomial by expanding the `n`th Witt polynomial by `p`.\n", "keywords": {"Witt polynomial": 0.004315713203403519, "polynomial by expanding": 0.016122598444234554, "Witt": 0.03880781492529432, "polynomial": 0.055127829619426576, "zmod": 0.05706283858652404, "ring": 0.09713402394201612, "produce": 0.14390902704051098, "expanding": 0.14390902704051098}}, {"docstring": " Yet another metric characterization of Cauchy sequences on integers. This one is often the most efficient.\n", "keywords": {"characterization of Cauchy": 0.0605689221549672, "Cauchy sequences": 0.0605689221549672, "sequences on integers": 0.07796891081290885, "metric characterization": 0.1495930091794576, "Cauchy": 0.15831692877998726, "integers": 0.2005079697193566, "metric": 0.36073110501666333, "characterization": 0.36073110501666333, "sequences": 0.36073110501666333, "efficient": 0.46553351027698087}}, {"docstring": " The **Heine\u2013Borel theorem**: In a proper Hausdorff space, a set is compact if and only if it is closed and bounded.\n", "keywords": {"proper Hausdorff space": 0.0013485152131775047, "Borel theorem": 0.005484890844946624, "Hausdorff space": 0.008293207122436794, "proper Hausdorff": 0.013797198203993007, "closed and bounded": 0.015380821171891606, "set is compact": 0.02570861714399338, "Heine": 0.030396371632413578, "Borel": 0.057012387690331526, "Hausdorff": 0.08596317751626563, "theorem": 0.09568045026443411, "space": 0.09568045026443411, "bounded": 0.09568045026443411, "proper": 0.15831692877998726, "set": 0.15831692877998726, "compact": 0.15831692877998726, "closed": 0.15831692877998726}}, {"docstring": "The complex sine function is everywhere differentiable, with the derivative `cos x`.\n", "keywords": {"complex sine function": 0.0042542192213185686, "complex sine": 0.02570861714399338, "sine function": 0.02570861714399338, "differentiable": 0.09568045026443411, "derivative": 0.09568045026443411, "cos": 0.09568045026443411, "complex": 0.15831692877998726, "sine": 0.15831692877998726, "function": 0.15831692877998726}}, {"docstring": " See also `complex.continuous_at_cpow` for a version that assumes `p.1 \u2260 0` but makes no assumptions about `p.2`.\n", "keywords": {"complex.continuous": 0.04491197687864554, "cpow": 0.04491197687864554, "version that assumes": 0.04940384002065631, "makes no assumptions": 0.09700399286574239, "assumes": 0.15831692877998726, "version": 0.29736558256021506, "makes": 0.29736558256021506, "assumptions": 0.29736558256021506}}, {"docstring": "The value of the quadratic character at `-1`\n", "keywords": {"quadratic character": 0.02570861714399338, "quadratic": 0.15831692877998726, "character": 0.15831692877998726}}, {"docstring": "Updating a tuple and adding an element at the beginning commute.\n", "keywords": {"Updating a tuple": 0.04940384002065631, "beginning commute": 0.04940384002065631, "tuple and adding": 0.09700399286574239, "adding an element": 0.09700399286574239, "Updating": 0.15831692877998726, "commute": 0.15831692877998726, "tuple": 0.29736558256021506, "adding": 0.29736558256021506, "element": 0.29736558256021506, "beginning": 0.29736558256021506}}, {"docstring": "The pseudoelement induced by an arrow is zero precisely when that arrow is zero\n", "keywords": {"pseudoelement induced": 0.037831312533597124, "arrow": 0.10586606907408062, "pseudoelement": 0.19092478917347616, "induced": 0.19092478917347616, "precisely": 0.19092478917347616}}, {"docstring": "If `P` is a prime ideal of `R`, then `P.R[x]` is a prime ideal of `R[x]`.\n", "keywords": {"prime ideal": 0.01285430857199669, "prime": 0.07915846438999363, "ideal": 0.07915846438999363}}, {"docstring": " The difference of two additive group homomorphisms is an additive group homomorphism if the target is commutative.\n", "keywords": {"additive group homomorphisms": 0.009148695285828205, "additive group": 0.018650942614307144, "target is commutative": 0.02541909697430123, "group homomorphisms": 0.03730188522861429, "group": 0.07915846438999363, "additive": 0.11357121248292479, "commutative": 0.12363091320521931, "difference": 0.2005079697193566, "target": 0.2005079697193566, "homomorphisms": 0.22714242496584958}}, {"docstring": "`\u2227` distributes over `\u2228` (on the left).\n", "keywords": {"distributes": 0.15831692877998726, "left": 0.15831692877998726}}, {"docstring": "Quantifying over a set is antitone in the set\n", "keywords": {"Quantifying": 0.11984314898676356, "set is antitone": 0.12748048004056908, "set": 0.14323823713631006, "antitone": 0.19488865479360015}}, {"docstring": "**Alias** of lt_trans'`.\n", "keywords": {"Alias": 0.030396371632413578, "trans": 0.04491197687864554}}, {"docstring": "A union of a family of preconnected sets with a common point is preconnected as well.\n", "keywords": {"common point": 0.01904688389482227, "preconnected sets": 0.025536557885239508, "family of preconnected": 0.06004269098969672, "point is preconnected": 0.06004269098969672, "preconnected": 0.09106811155038866, "union": 0.1367145963576765, "family": 0.1367145963576765, "sets": 0.1367145963576765, "common": 0.1367145963576765, "point": 0.1367145963576765}}, {"docstring": "\u03b5-\u03b4 characterization of uniform continuity on a set for pseudoemetric spaces\n", "keywords": {"pseudoemetric spaces": 0.04940384002065631, "characterization of uniform": 0.09700399286574239, "uniform continuity": 0.09700399286574239, "set for pseudoemetric": 0.09700399286574239, "spaces": 0.15831692877998726, "characterization": 0.29736558256021506, "uniform": 0.29736558256021506, "continuity": 0.29736558256021506, "set": 0.29736558256021506, "pseudoemetric": 0.29736558256021506}}, {"docstring": "Closure of a submonoid `S` equals `S`.\n", "keywords": {"equals": 0.04491197687864554, "Closure": 0.09568045026443411, "submonoid": 0.09568045026443411}}, {"docstring": "If one controls the norm of every `f x`, then one controls the norm of `x`.    Compare `continuous_linear_map.op_norm_le_bound`.\n", "keywords": {"controls the norm": 0.037504873162009754, "controls": 0.07736177009603214, "norm": 0.09126614170637319, "Compare": 0.2531576511174968, "continuous": 0.2531576511174968, "linear": 0.2531576511174968, "map.op": 0.2531576511174968, "bound": 0.2531576511174968}}, {"docstring": "`\u2227` distributes over `\u2228` (on the right).\n", "keywords": {"distributes": 0.15831692877998726}}, {"docstring": " The coproduct of the cocompact filters on two topological spaces is the cocompact filter on their product.\n", "keywords": {"cocompact filters": 0.012305904792533543, "topological spaces": 0.02114777441281124, "cocompact": 0.055127829619426576, "product": 0.09713402394201612, "filters": 0.11025565923885315, "filter": 0.11025565923885315, "coproduct": 0.14390902704051098, "topological": 0.14390902704051098, "spaces": 0.14390902704051098}}, {"docstring": "The normal closure of s is a normal subgroup.\n", "keywords": {"normal subgroup": 0.035552851931764155, "normal closure": 0.05913243875864445, "subgroup": 0.11984314898676356, "normal": 0.14323823713631006, "closure": 0.19488865479360015}}, {"docstring": "The identity is `C^\u221e`.\n", "keywords": {"identity": 0.29736558256021506}}, {"docstring": "**Alias** of the reverse direction of sub_lt_iff_lt_add`.\n", "keywords": {"reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "add": 0.04491197687864554, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "The triangle (polygon) inequality for sequences of points; `finset.range` version.\n", "keywords": {"polygon": 0.04491197687864554, "finset.range": 0.04491197687864554, "version": 0.04491197687864554, "inequality for sequences": 0.04940384002065631, "sequences of points": 0.04940384002065631, "triangle": 0.15831692877998726, "inequality": 0.15831692877998726, "points": 0.15831692877998726, "sequences": 0.29736558256021506}}, {"docstring": "The relation `\u2264` on a preorder is transitive.\n", "keywords": {"preorder is transitive": 0.04940384002065631, "relation": 0.15831692877998726, "transitive": 0.15831692877998726, "preorder": 0.29736558256021506}}, {"docstring": "`function.update f i x` is continuous in `(f, x)`.\n", "keywords": {"function.update": 0.09568045026443411, "continuous": 0.15831692877998726}}, {"docstring": "The currying process is a continuous map between function spaces.\n", "keywords": {"function spaces": 0.04940384002065631, "currying process": 0.09700399286574239, "continuous map": 0.09700399286574239, "map between function": 0.09700399286574239, "spaces": 0.15831692877998726, "currying": 0.29736558256021506, "process": 0.29736558256021506, "continuous": 0.29736558256021506, "map": 0.29736558256021506, "function": 0.29736558256021506}}, {"docstring": " by assuming `x` is odd and `z` is positive we get a slightly more precise classification of the pythagorean triple `x ^ 2 + y ^ 2 = z ^ 2`\n", "keywords": {"pythagorean triple": 0.00899321792126428, "slightly more precise": 0.013527995261974615, "precise classification": 0.013527995261974615, "assuming": 0.0771485953923296, "triple": 0.0771485953923296, "odd": 0.1155310835876123, "positive": 0.1155310835876123, "slightly": 0.1155310835876123, "precise": 0.1155310835876123, "classification": 0.1155310835876123, "pythagorean": 0.1155310835876123}}, {"docstring": " In the specific case of multilinear maps on spaces indexed by `fin (n+1)`, where one can build an element of `\u03a0(i : fin (n+1)), M i` using `snoc`, one can express directly the additivity of a multilinear map along the first variable.\n", "keywords": {"specific case": 0.019759017604293553, "spaces indexed": 0.019759017604293553, "build an element": 0.019759017604293553, "express directly": 0.019759017604293553, "directly the additivity": 0.019759017604293553, "fin": 0.020224371215251474, "multilinear maps": 0.021261181864573712, "case of multilinear": 0.04925743771710562, "maps on spaces": 0.04925743771710562, "snoc": 0.055012255605756503, "multilinear": 0.07214318191126844, "variable": 0.0937866855411403, "specific": 0.13919828894679062, "case": 0.13919828894679062, "spaces": 0.13919828894679062, "indexed": 0.13919828894679062, "build": 0.13919828894679062, "element": 0.13919828894679062, "express": 0.13919828894679062, "directly": 0.13919828894679062}}, {"docstring": "Assumes right covariance.\n", "keywords": {"Assumes right covariance": 0.02570861714399338, "Assumes": 0.15831692877998726, "covariance": 0.15831692877998726}}, {"docstring": " The defining property of the minimal polynomial of an element `x`: it is the monic polynomial with smallest degree that has `x` as its root.\n", "keywords": {"defining property": 0.018034246898548233, "smallest degree": 0.018034246898548233, "minimal polynomial": 0.023937535241430174, "monic polynomial": 0.023937535241430174, "polynomial with smallest": 0.056623013142482255, "polynomial": 0.08782297807514622, "element": 0.08946888050496495, "root": 0.08946888050496495, "defining": 0.13309686053898662, "property": 0.13309686053898662, "minimal": 0.13309686053898662, "monic": 0.13309686053898662, "smallest": 0.13309686053898662, "degree": 0.13309686053898662}}, {"docstring": " **Rearrangement Inequality**: Pointwise scalar multiplication of `f` and `g` is maximized when `f` and `g` monovary together. Stated by permuting the entries of `g`.\n", "keywords": {"Pointwise scalar multiplication": 0.001271864619686412, "Rearrangement Inequality": 0.0031146356952437464, "Pointwise scalar": 0.008334116283452563, "scalar multiplication": 0.02249651976012989, "Rearrangement": 0.05572221155747183, "Inequality": 0.05572221155747183, "Pointwise": 0.05572221155747183, "monovary": 0.10028582371075691, "Stated by permuting": 0.11755105063023073, "scalar": 0.14832923246533666, "multiplication": 0.14832923246533666, "maximized": 0.14832923246533666, "permuting the entries": 0.165573765898185, "Stated": 0.2790829227183407, "permuting": 0.37689977775222827, "entries": 0.37689977775222827}}, {"docstring": "An auxiliary lemma for manipulating sequence indices.\n", "keywords": {"manipulating sequence indices": 0.016559150827736194, "sequence indices": 0.04940384002065631, "auxiliary lemma": 0.09700399286574239, "lemma for manipulating": 0.09700399286574239, "manipulating sequence": 0.09700399286574239, "indices": 0.15831692877998726, "auxiliary": 0.29736558256021506, "lemma": 0.29736558256021506, "manipulating": 0.29736558256021506, "sequence": 0.29736558256021506}}, {"docstring": "Two simplices with the same points have the same centroid.\n", "keywords": {"centroid": 0.09568045026443411, "simplices": 0.15831692877998726, "points": 0.15831692877998726}}, {"docstring": "The language of the map is the map of the language.\n", "keywords": {"language": 0.06294116458067843, "map": 0.06294116458067843}}, {"docstring": "As `0` is the default value for `real.Inf` of the empty set, it suffices to show that `S` is bounded below by `0` to show that `0 \u2264 Inf S`.\n", "keywords": {"empty set": 0.012240009979360944, "suffices to show": 0.01347319449596249, "show": 0.04956935957632033, "real.Inf": 0.0528063806271324, "set": 0.09017440044927587, "default": 0.13409574860218185, "empty": 0.13409574860218185, "suffices": 0.13409574860218185, "bounded": 0.13409574860218185}}, {"docstring": "A dependent version of `substructure.closure_induction`.\n", "keywords": {"substructure.closure": 0.04491197687864554, "induction": 0.04491197687864554, "dependent version": 0.09700399286574239, "dependent": 0.29736558256021506, "version": 0.29736558256021506}}, {"docstring": "If `t` is bounded, then so is `s \u2229 t`\n", "keywords": {"bounded": 0.09568045026443411}}, {"docstring": " An induction principle for closure membership. If `p` holds for `1` and all elements of `k` and their inverse, and is preserved under multiplication, then `p` holds for all elements of the closure of `k`.\n", "keywords": {"induction principle": 0.041067145989475896, "closure membership": 0.05303379658192498, "holds": 0.13264405558464026, "membership": 0.13690089622781554, "principle for closure": 0.16269363174436116, "elements": 0.18034450672916197, "closure": 0.18393912731976153, "preserved under multiplication": 0.19661905478275257, "induction": 0.19861310018350192, "principle": 0.19861310018350192, "inverse": 0.35520562385871335, "multiplication": 0.35520562385871335, "preserved": 0.46258320047845314}}, {"docstring": " **Strict inequality case of the Rearrangement Inequality**: Pointwise scalar multiplication of `f` and `g`, which antivary together, is strictly decreased by a permutation if and only if `f` and `g \u2218 \u03c3` do not antivary together. Stated by permuting the entries of `g`.\n", "keywords": {"Strict inequality case": 0.0016376672505466826, "Pointwise scalar multiplication": 0.002200769509641363, "Strict inequality": 0.00866958983340238, "Pointwise scalar": 0.011561263824295709, "Rearrangement Inequality": 0.011712586350570936, "inequality case": 0.025703411153376713, "scalar multiplication": 0.03447074540170908, "strictly decreased": 0.03447074540170908, "Strict": 0.06261045944724858, "Pointwise": 0.06261045944724858, "inequality": 0.0686392828174212, "Rearrangement": 0.08433210096311344, "antivary": 0.08488187343535045, "Stated by permuting": 0.16944032286186908, "case": 0.18254344008272147, "scalar": 0.18254344008272147, "multiplication": 0.18254344008272147, "strictly": 0.18254344008272147, "decreased": 0.18254344008272147, "permutation": 0.18254344008272147}}, {"docstring": "The closure of a (pre)connected set is (pre)connected as well.\n", "keywords": {"pre": 0.02245598843932277, "connected set": 0.03278451112147437, "connected": 0.07915846438999363, "closure": 0.2005079697193566, "set": 0.2005079697193566}}, {"docstring": "For subsets of \u2115, we can show that colex is equivalent to binary.\n", "keywords": {"equivalent to binary": 0.04940384002065631, "show that colex": 0.09700399286574239, "colex is equivalent": 0.09700399286574239, "binary": 0.15831692877998726, "subsets": 0.29736558256021506, "show": 0.29736558256021506, "colex": 0.29736558256021506, "equivalent": 0.29736558256021506}}, {"docstring": "If `\u2200 I > J, P I` implies `P J`, then `P` holds for all submodules.\n", "keywords": {"implies": 0.04491197687864554, "holds": 0.0771485953923296, "submodules": 0.0771485953923296}}, {"docstring": " A strictly concave function on an open segment is strictly lower-bounded by the min of its endpoints.\n", "keywords": {"strictly concave function": 0.009836841595559516, "concave function": 0.03439110359613085, "open segment": 0.03439110359613085, "strictly concave": 0.05033870131288873, "strictly lower-bounded": 0.05033870131288873, "segment is strictly": 0.11047974441476761, "endpoints": 0.11145728654016383, "strictly": 0.1314201551237121, "concave": 0.1823394614884183, "function": 0.1823394614884183, "open": 0.1823394614884183, "segment": 0.1823394614884183, "lower-bounded": 0.1823394614884183, "min": 0.1823394614884183}}, {"docstring": "The product `\u220f (X - a)` for `a` inside the multiset `p.roots` divides `p`.\n", "keywords": {"inside the multiset": 0.009239332327148086, "p.roots": 0.04491197687864554, "divides": 0.04491197687864554, "product": 0.09568045026443411, "inside": 0.09568045026443411, "multiset": 0.09568045026443411}}, {"docstring": " A \"continuous induction principle\" for a closed interval: if a set `s` meets `[a, b]` on a closed subset, contains `a`, and for any `x \u2208 s \u2229 [a, b)` the set `s` includes some open neighborhood of `x` within `(x, +\u221e)`, then `[a, b] \u2286 s`.\n", "keywords": {"continuous induction principle": 0.0003836063008192111, "closed interval": 0.0049334822132615355, "closed subset": 0.0049334822132615355, "continuous induction": 0.005608795093952077, "induction principle": 0.005608795093952077, "includes some open": 0.005608795093952077, "open neighborhood": 0.006824361700198699, "set": 0.030325720403829953, "closed": 0.03623263378553101, "meets": 0.05430009520648986, "continuous": 0.06774642002734617, "principle": 0.06774642002734617, "interval": 0.06774642002734617, "subset": 0.06774642002734617, "includes": 0.06774642002734617, "induction": 0.08232925031189459, "open": 0.08232925031189459, "neighborhood": 0.08232925031189459}}, {"docstring": " **Gelfand's formula**: Given an element `a : A` of a complex Banach algebra, the `spectral_radius` of `a` is the limit of the sequence `\u2225a ^ n\u2225\u208a ^ (1 / n)`\n", "keywords": {"complex Banach algebra": 0.000278694632771895, "Gelfand formula": 0.002581698363439768, "Banach algebra": 0.003272211243622757, "complex Banach": 0.004358842248641263, "Gelfand": 0.04060313590085896, "spectral": 0.04491197687864554, "radius": 0.04491197687864554, "Banach": 0.051427616787507804, "formula": 0.06341998722529081, "element": 0.06341998722529081, "algebra": 0.06341998722529081, "sequence": 0.06341998722529081, "complex": 0.08438900089923473, "limit": 0.08438900089923473}}, {"docstring": "In a field `F`, `X ^ n - 1` is separable iff `\u2191n \u2260 0`.\n", "keywords": {"separable iff": 0.015380821171891606, "field": 0.09568045026443411, "iff": 0.09568045026443411, "separable": 0.15831692877998726}}, {"docstring": "Definition of `x < y` on numeric pre-games, in terms of `\u2264`\n", "keywords": {"numeric pre-games": 0.015380821171891606, "Definition": 0.09568045026443411, "pre-games": 0.09568045026443411, "numeric": 0.15831692877998726, "terms": 0.15831692877998726}}, {"docstring": "**Alias** of the reverse direction of has_deriv_within_at.Ioi_iff_Ioo`.\n", "keywords": {"reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "Ioo": 0.030396371632413578, "deriv": 0.04491197687864554, "at.Ioi": 0.04491197687864554, "iff": 0.04491197687864554, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "**Alias** of le_antisymm`.\n", "keywords": {"Alias": 0.030396371632413578, "antisymm": 0.04491197687864554}}, {"docstring": "Cauchy's **Mean Value Theorem**, extended `has_deriv_at` version.\n", "keywords": {"Cauchy": 0.04491197687864554, "extended": 0.04491197687864554, "deriv": 0.04491197687864554, "version": 0.04491197687864554, "Theorem": 0.08596317751626563}}, {"docstring": "**Alias** of the forward direction of dense_iff_inter_open`.\n", "keywords": {"direction of dense": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "inter": 0.04491197687864554, "open": 0.04491197687864554, "dense": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "The definition of `0 \u2264 x` on pre-games, in terms of `0 \u2264` two moves later.\n", "keywords": {"pre-games": 0.09568045026443411, "definition": 0.15831692877998726, "terms": 0.15831692877998726, "moves": 0.15831692877998726}}, {"docstring": " Let `f` and `g` be two maps to the same commutative monoid. This lemma gives a sufficient condition for comparison of the filter `at_top.map (\u03bb s, \u220f b in s, f b)` with `at_top.map (\u03bb s, \u220f b in s, g b)`. This is useful to compare the set of limit points of `\u03a0 b in s, f b` as `s \u2192 at_top` with the similar set for `g`.\n", "keywords": {"commutative monoid": 0.016175983545113237, "top.map": 0.08095049568224046, "monoid": 0.11227863081557292, "maps": 0.14177663421681833, "commutative": 0.14177663421681833, "sufficient condition": 0.1532866396677126, "condition for comparison": 0.1532866396677126, "set": 0.21938384013750364, "similar set": 0.24964893992931483, "limit points": 0.26152256399587337, "filter": 0.305204238596461, "top": 0.31981916680757855, "lemma": 0.3645721768460642, "sufficient": 0.3645721768460642, "condition": 0.3645721768460642, "comparison": 0.3645721768460642, "compare": 0.455309876769676, "limit": 0.455309876769676, "points": 0.455309876769676, "similar": 0.455309876769676}}, {"docstring": "**Alias** of the reverse direction of smul_pos_iff_of_pos`.\n", "keywords": {"direction of smul": 0.012741693123860753, "reverse direction": 0.01904688389482227, "pos": 0.019648131954263418, "Alias": 0.034278050535979626, "iff": 0.05393656033701752, "smul": 0.09202664026077896, "reverse": 0.1367145963576765, "direction": 0.1367145963576765}}, {"docstring": "The set in `enum_ord_def'` is nonempty.\n", "keywords": {"def is nonempty": 0.02570861714399338, "enum": 0.04491197687864554, "ord": 0.04491197687864554, "def": 0.15831692877998726, "nonempty": 0.15831692877998726, "set": 0.29736558256021506}}, {"docstring": " If the index type has cardinality equal to the finite dimension, an orientation equals the negation of another orientation if and only if they are not equal.\n", "keywords": {"finite dimension": 0.015411349595587466, "index type": 0.02295090972417644, "type has cardinality": 0.02295090972417644, "cardinality equal": 0.040017078329054975, "orientation equals": 0.05606127903882565, "dimension": 0.1013272142599222, "orientation": 0.10332645666150714, "equals the negation": 0.11868767888969164, "equal": 0.12844060861415768, "index": 0.14978645964327916, "type": 0.14978645964327916, "cardinality": 0.14978645964327916, "finite": 0.14978645964327916, "negation": 0.14978645964327916, "equals": 0.25688121722831536}}, {"docstring": "If both `a` and `b` semiconjugate `x` to `y`, then so does `a + b`.\n", "keywords": {"semiconjugate": 0.04491197687864554}}, {"docstring": "`pure : \u03b1 \u2192 ultrafilter \u03b1` defines a dense embedding of `\u03b1` in `ultrafilter \u03b1`.\n", "keywords": {"defines a dense": 0.00964721495732046, "dense embedding": 0.013453448411345069, "ultrafilter": 0.03065348613113714, "pure": 0.054709255964732355, "defines": 0.08293109455034965, "dense": 0.11521656054299435, "embedding": 0.11521656054299435}}, {"docstring": " The weights in the centroid sum to 1, if the number of points, converted to `k`, is not zero.\n", "keywords": {"number of points": 0.00899321792126428, "centroid sum": 0.013527995261974615, "points": 0.0771485953923296, "converted": 0.0771485953923296, "weights": 0.1155310835876123, "centroid": 0.1155310835876123, "sum": 0.1155310835876123, "number": 0.1155310835876123}}, {"docstring": "The only prime factor of prime `p` is `p` itself, with multiplicity `1`\n", "keywords": {"prime factor": 0.05913243875864445, "multiplicity": 0.11984314898676356, "factor of prime": 0.12748048004056906, "prime": 0.14323823713631006, "factor": 0.19488865479360015}}, {"docstring": " Two affine subspaces with the same direction and nonempty intersection are equal.\n", "keywords": {"intersection are equal": 0.04940384002065631, "affine subspaces": 0.09700399286574239, "direction and nonempty": 0.09700399286574239, "nonempty intersection": 0.09700399286574239, "equal": 0.15831692877998726, "affine": 0.29736558256021506, "subspaces": 0.29736558256021506, "direction": 0.29736558256021506, "nonempty": 0.29736558256021506, "intersection": 0.29736558256021506}}, {"docstring": "This is the `list.sum` version of `add_neg`\n", "keywords": {"list.sum": 0.04491197687864554, "add": 0.04491197687864554, "neg": 0.04491197687864554, "version": 0.15831692877998726}}, {"docstring": "Negating the first vector produces the same angle as negating the second vector.\n", "keywords": {"vector produces": 0.03117712943655666, "angle as negating": 0.05698855545313889, "Negating": 0.07915846438999359, "vector": 0.10191687733271076, "produces": 0.14832923246533666, "angle": 0.14832923246533666}}, {"docstring": "One form of **Cramer's rule**. See `matrix.mul_vec_cramer` for a stronger form.\n", "keywords": {"Cramer rule": 0.037301297964502135, "Cramer": 0.10754497810258336, "rule": 0.16718560905139174, "matrix.mul": 0.2365661206214104, "vec": 0.2365661206214104, "form": 0.24516296616129382, "stronger form": 0.37245760303821884, "stronger": 0.5534686723650176}}, {"docstring": " The seminorm of an element in a product space is `\u2264 r` if and only if the norm of each component is.\n", "keywords": {"product space": 0.02570861714399338, "seminorm": 0.15831692877998726, "element": 0.15831692877998726, "product": 0.15831692877998726, "space": 0.15831692877998726, "norm": 0.15831692877998726, "component": 0.15831692877998726}}, {"docstring": "Additive closure of an additive subsemigroup `S` equals `S`\n", "keywords": {"additive subsemigroup": 0.03378800767844735, "equals": 0.055708263664958506, "Additive closure": 0.0562460611896591, "subsemigroup": 0.11718348279991213, "Additive": 0.13945519496053638, "closure": 0.19092478917347616}}, {"docstring": " More general going-up theorem than `exists_ideal_over_prime_of_is_integral'`. TODO: Version of going-up theorem with arbitrary length chains (by induction on this)?   Not sure how best to write an ascending chain in Lean\n", "keywords": {"general going-up theorem": 0.07248636086653241, "exists": 0.08862653533494358, "ideal": 0.08862653533494358, "prime": 0.08862653533494358, "integral": 0.08862653533494358, "going-up theorem": 0.10792992357995158, "general going-up": 0.13378458728022508, "TODO": 0.14240145289070255, "going-up": 0.2106755705359412, "theorem": 0.2106755705359412, "Version of going-up": 0.2132085088910518, "Version": 0.22951772676234936, "general": 0.28004728068778245, "Lean": 0.30265193721033473, "chain in Lean": 0.43639709555298506, "arbitrary length": 0.4930094378455544, "theorem with arbitrary": 0.5721232772037638, "arbitrary": 0.5746406439067436, "length": 0.5746406439067436, "induction": 0.5746406439067436}}, {"docstring": " **Krein-Milman lemma**: In a LCTVS (currently only in normed `\u211d`-spaces), any nonempty compact set has an extreme point.\n", "keywords": {"nonempty compact set": 0.0042542192213185686, "Krein-Milman lemma": 0.009239332327148086, "extreme point": 0.015380821171891606, "nonempty compact": 0.02570861714399338, "compact set": 0.02570861714399338, "spaces": 0.04491197687864554, "LCTVS": 0.057012387690331526, "Krein-Milman": 0.09568045026443411, "lemma": 0.09568045026443411, "normed": 0.09568045026443411, "point": 0.09568045026443411, "nonempty": 0.15831692877998726, "compact": 0.15831692877998726, "set": 0.15831692877998726, "extreme": 0.15831692877998726}}, {"docstring": "**Apollonius's Theorem**.\n", "keywords": {"Apollonius Theorem": 0.007444681613352736, "Apollonius": 0.08596317751626563, "Theorem": 0.08596317751626563}}, {"docstring": " If `M / S / R` is a scalar tower, and `M / R` is Artinian, then `M / S` is also Artinian.\n", "keywords": {"scalar tower": 0.014176630379520855, "Artinian": 0.030110006881825104, "tower": 0.09713402394201612, "scalar": 0.14390902704051098}}, {"docstring": "The generators of the tensor algebra are disjoint from its scalars.\n", "keywords": {"tensor algebra": 0.02570861714399338, "algebra are disjoint": 0.02570861714399338, "scalars": 0.09568045026443411, "generators": 0.15831692877998726, "tensor": 0.15831692877998726, "algebra": 0.15831692877998726, "disjoint": 0.15831692877998726}}, {"docstring": "The function `\u03bb (x, y), x ^ y` is infinitely smooth at `(x, y)` unless `x = 0`.\n", "keywords": {"infinitely smooth": 0.009239332327148086, "function": 0.06844581806138879, "infinitely": 0.09568045026443411, "smooth": 0.09568045026443411}}, {"docstring": "**Alias** of not_le_of_lt`.\n", "keywords": {"Alias": 0.030396371632413578}}, {"docstring": "Addition of a `u : add_units M` on the left doesn't affect `is_add_unit`.\n", "keywords": {"add": 0.02184815412823125, "Addition": 0.12156210109285605, "affect": 0.12156210109285605, "units": 0.15452828614822314, "unit": 0.15452828614822314, "left": 0.19744254481508877}}, {"docstring": "Assumes right covariance. The lemma assuming left covariance is `left.add_neg_of_neg_of_nonpos`.\n", "keywords": {"neg": 0.08105151263492691, "Assumes": 0.16205454282434614, "Assumes right covariance": 0.16594183792672998, "left.add": 0.22989350183706597, "nonpos": 0.22989350183706597, "covariance": 0.2405027004070563, "assuming left covariance": 0.3062531289877704, "left covariance": 0.35460485137785114, "lemma assuming left": 0.37155912399617924, "lemma assuming": 0.42082946769804974, "assuming left": 0.42082946769804974, "lemma": 0.544229518153821, "assuming": 0.544229518153821, "left": 0.544229518153821}}, {"docstring": "The (open) thickening of the empty set is empty.\n", "keywords": {"open": 0.055708263664958506, "empty set": 0.0562460611896591, "thickening": 0.11718348279991213, "set is empty": 0.12194096740933036, "empty": 0.13945519496053638, "set": 0.19092478917347616}}, {"docstring": "A subset of an `add_monoid` is contained in the `add_submonoid` it generates.\n", "keywords": {"add": 0.019648131954263418, "monoid": 0.05393656033701752, "submonoid": 0.05393656033701752, "generates": 0.11369206228658875, "subset": 0.18569843656348187, "contained": 0.18569843656348187}}, {"docstring": " **Strict inequality case of Rearrangement Inequality**: Pointwise multiplication of `f` and `g`, which monovary together, is strictly decreased by a permutation if and only if `f` and `g \u2218 \u03c3` do not monovary together. Stated by permuting the entries of `g`.\n", "keywords": {"Strict inequality case": 0.0016642028270215602, "Strict inequality": 0.008747117210927207, "Pointwise multiplication": 0.011683623122683102, "Rearrangement Inequality": 0.011811652352352629, "case of Rearrangement": 0.01579306427698067, "inequality case": 0.02602119105438165, "strictly decreased": 0.03495776414940041, "Strict": 0.06283799353160062, "Pointwise": 0.06283799353160062, "inequality": 0.06899702012035523, "Rearrangement": 0.08459615986079659, "monovary": 0.08562916729374415, "Stated by permuting": 0.17147630665836236, "case": 0.1837851895373716, "multiplication": 0.1837851895373716, "strictly": 0.1837851895373716, "decreased": 0.1837851895373716, "permutation": 0.1837851895373716, "permuting the entries": 0.23851325396085266, "Stated": 0.3335528702481384}}, {"docstring": "**Alias** of the reverse direction of neg_concave_on_iff`.\n", "keywords": {"direction of neg": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "concave": 0.04491197687864554, "iff": 0.04491197687864554, "neg": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " Given `z : S`, `is_localization.sec M z` is defined to be a pair `(x, y) : R \u00d7 M` such that `z * f y = f x`, so this lemma is just an application of `S`'s commutativity.\n", "keywords": {"localization.sec": 0.0771485953923296, "pair": 0.0771485953923296, "commutativity": 0.0771485953923296, "defined": 0.1155310835876123, "lemma": 0.1155310835876123, "application": 0.1155310835876123}}, {"docstring": "A product is regular if and only if the factors are.\n", "keywords": {"product is regular": 0.02570861714399338, "product": 0.15831692877998726, "regular": 0.15831692877998726, "factors": 0.15831692877998726}}, {"docstring": "For finite index types, the `subgroup.pi` is generated by the embeddings of the groups.\n", "keywords": {"finite index types": 0.0010606143890052174, "index types": 0.00899321792126428, "finite index": 0.013527995261974615, "subgroup.pi": 0.04491197687864554, "types": 0.0771485953923296, "groups": 0.0771485953923296, "finite": 0.1155310835876123, "index": 0.1155310835876123, "generated": 0.1155310835876123, "embeddings": 0.1155310835876123}}, {"docstring": "If a function `f` equals `1` on a set `s`, then the product of `f i` over `i \u2208 s` equals `1`.\n", "keywords": {"equals": 0.020602899695743707, "function": 0.11718348279991213, "set": 0.11718348279991213, "product": 0.19092478917347616}}, {"docstring": " If a function is continuous on an open set `s`, then it is strongly measurable at the filter `\ud835\udcdd x` for all `x \u2208 s` if either the source space or the target space is second-countable.\n", "keywords": {"open set": 0.011752516585960321, "function is continuous": 0.017595046402022366, "strongly measurable": 0.017595046402022366, "source space": 0.023251977563965413, "target space": 0.023251977563965413, "space is second-countable": 0.037682341941210055, "space": 0.08640514249691128, "set": 0.0883382645966668, "filter": 0.0883382645966668, "second-countable": 0.0883382645966668, "function": 0.13149453879183629, "continuous": 0.13149453879183629, "open": 0.13149453879183629, "strongly": 0.13149453879183629, "measurable": 0.13149453879183629, "source": 0.13149453879183629, "target": 0.13149453879183629}}, {"docstring": " A point is in an affine subspace coerced to a set if and only if it is in that affine subspace.\n", "keywords": {"affine subspace coerced": 0.011041420469275918, "affine subspace": 0.02595416362410219, "subspace coerced": 0.045872129360315365, "affine": 0.11107071682746067, "subspace": 0.11107071682746067, "point": 0.19744254481508877, "coerced": 0.19744254481508877, "set": 0.19744254481508877}}, {"docstring": " Bounding the Hausdorff distance by bounding the distance of any point in each set to the other set\n", "keywords": {"Bounding the Hausdorff": 0.012520315988577207, "Hausdorff distance": 0.016161824468403405, "Hausdorff": 0.07669203367645613, "bounding the distance": 0.07909251378973291, "Bounding": 0.08061786523087176, "distance": 0.10369247975016448, "set": 0.10369247975016448, "distance by bounding": 0.12504831268518427, "point": 0.1501629736875757}}, {"docstring": " Two n-simplices among cospherical points in n-space have the same circumcenter.\n", "keywords": {"n-simplices among cospherical": 0.09700399286574239, "cospherical points": 0.09700399286574239, "points in n-space": 0.09700399286574239, "circumcenter": 0.15831692877998726, "n-simplices": 0.29736558256021506, "cospherical": 0.29736558256021506, "points": 0.29736558256021506, "n-space": 0.29736558256021506}}, {"docstring": " We intentionally restrict the type of `\u03b1` in this lemma so that this is a safer to use in simp than `forall_swap`.\n", "keywords": {"intentionally restrict": 0.02570861714399338, "restrict the type": 0.02570861714399338, "forall": 0.04491197687864554, "swap": 0.04491197687864554, "intentionally": 0.15831692877998726, "restrict": 0.15831692877998726, "type": 0.15831692877998726, "lemma": 0.15831692877998726, "safer": 0.15831692877998726, "simp": 0.15831692877998726}}, {"docstring": "Additive congruence relations preserve natural scaling.\n", "keywords": {"Additive congruence relations": 0.01655915082773619, "preserve natural scaling": 0.016559150827736194, "congruence relations preserve": 0.03339840940482845, "relations preserve natural": 0.03339840940482845, "Additive congruence": 0.04940384002065631, "natural scaling": 0.04940384002065631, "congruence relations": 0.09700399286574239, "relations preserve": 0.09700399286574239, "preserve natural": 0.09700399286574239, "Additive": 0.15831692877998726, "scaling": 0.15831692877998726, "congruence": 0.29736558256021506, "relations": 0.29736558256021506, "preserve": 0.29736558256021506, "natural": 0.29736558256021506}}, {"docstring": "The closure of the interval `[a, b)` is the closed interval `[a, b]`.\n", "keywords": {"closed interval": 0.016122598444234554, "interval": 0.055127829619426576, "closure": 0.14390902704051098, "closed": 0.14390902704051098}}, {"docstring": "A nontrivial additive torsion group is not torsion-free.\n", "keywords": {"nontrivial additive torsion": 0.03339840940482845, "additive torsion group": 0.03339840940482845, "nontrivial additive": 0.09700399286574239, "additive torsion": 0.09700399286574239, "torsion group": 0.09700399286574239, "torsion-free": 0.15831692877998726, "nontrivial": 0.29736558256021506, "additive": 0.29736558256021506, "torsion": 0.29736558256021506, "group": 0.29736558256021506}}, {"docstring": "The composition operator (in the target) with a Lipschitz map is uniformly continuous\n", "keywords": {"Lipschitz map": 0.013797198203993007, "composition operator": 0.015380821171891606, "uniformly continuous": 0.015380821171891606, "map is uniformly": 0.02570861714399338, "Lipschitz": 0.08596317751626563, "operator": 0.09568045026443411, "target": 0.09568045026443411, "continuous": 0.09568045026443411, "composition": 0.15831692877998726, "map": 0.15831692877998726, "uniformly": 0.15831692877998726}}, {"docstring": "Two intermediate fields are equal if they have the same elements.\n", "keywords": {"intermediate fields": 0.09700399286574239, "fields are equal": 0.09700399286574239, "elements": 0.15831692877998726, "intermediate": 0.29736558256021506, "fields": 0.29736558256021506, "equal": 0.29736558256021506}}, {"docstring": "The frontier of a set is closed.\n", "keywords": {"set is closed": 0.04940384002065631, "closed": 0.15831692877998726, "frontier": 0.29736558256021506, "set": 0.29736558256021506}}, {"docstring": "Useful to use together with `continuous.comp\u2082`.\n", "keywords": {"continuous.comp": 0.15831692877998726}}, {"docstring": " A version of `dist_le_Ico_sum_dist` with each intermediate distance replaced with an upper estimate.\n", "keywords": {"intermediate distance replaced": 0.0064971092056266945, "dist": 0.018830794223096383, "upper estimate": 0.020435055290363522, "Ico": 0.033641197513274955, "intermediate distance": 0.033892441937102495, "distance replaced": 0.033892441937102495, "sum": 0.052376395424323874, "estimate": 0.11060549338282699, "version": 0.18105634546484617, "intermediate": 0.18105634546484617, "distance": 0.18105634546484617, "replaced": 0.18105634546484617, "upper": 0.18105634546484617}}, {"docstring": " Composing the partial sums of two multilinear series coincides with the sum over all compositions in `comp_partial_sum_target 0 N N`. This is precisely the motivation for the definition of `comp_partial_sum_target`.\n", "keywords": {"multilinear series coincides": 0.007751354028531201, "multilinear series": 0.038014453757484544, "series coincides": 0.038014453757484544, "comp": 0.05595611880354991, "target": 0.05595611880354991, "partial": 0.13074271347340297, "Composing": 0.14114902117144604, "sum": 0.14681676130211516, "Composing the partial": 0.15464926189958855, "multilinear": 0.1913694799829427, "series": 0.1913694799829427, "coincides": 0.1913694799829427, "compositions": 0.1913694799829427, "partial sums": 0.20883464100378946, "precisely the motivation": 0.2555242667076847, "sums": 0.4404502839063454, "precisely": 0.45113188146116867, "motivation": 0.45113188146116867, "definition": 0.45113188146116867}}, {"docstring": "A `dite` whose results do not actually depend on the condition may be reduced to an `ite`.\n", "keywords": {"dite": 0.04491197687864554, "ite": 0.04491197687864554, "results": 0.29736558256021506, "depend": 0.29736558256021506, "condition": 0.29736558256021506, "reduced": 0.29736558256021506}}, {"docstring": "**Tychonoff's theorem**: product of compact sets is compact.\n", "keywords": {"Tychonoff theorem": 0.007360818540270905, "compact sets": 0.05417025203414716, "Tychonoff": 0.06341998722529081, "product of compact": 0.07301337118426868, "theorem": 0.11521656054299435, "product": 0.11521656054299435, "sets is compact": 0.11793310824193863, "compact": 0.13667842094541144, "sets": 0.1879836817695587}}, {"docstring": "Composing on the right by a function preserves uniform convergence\n", "keywords": {"preserves uniform convergence": 0.016559150827736194, "function preserves uniform": 0.03339840940482845, "uniform convergence": 0.04940384002065631, "function preserves": 0.09700399286574239, "preserves uniform": 0.09700399286574239, "Composing": 0.15831692877998726, "convergence": 0.15831692877998726, "function": 0.29736558256021506, "preserves": 0.29736558256021506, "uniform": 0.29736558256021506}}, {"docstring": "The circumcenter of a 0-simplex equals its unique point.\n", "keywords": {"equals its unique": 0.04940384002065631, "unique point": 0.04940384002065631, "equals": 0.15831692877998726, "point": 0.15831692877998726, "circumcenter": 0.29736558256021506, "unique": 0.29736558256021506}}, {"docstring": " Any nonempty compact Hausdorff semigroup where right-multiplication is continuous contains an idempotent, i.e. an `m` such that `m * m = m`.\n", "keywords": {"nonempty compact Hausdorff": 0.0005320541823066006, "compact Hausdorff semigroup": 0.0005320541823066006, "compact Hausdorff": 0.005484890844946624, "Hausdorff semigroup": 0.005484890844946624, "nonempty compact": 0.009239332327148086, "semigroup where right-multiplication": 0.009239332327148086, "right-multiplication is continuous": 0.009239332327148086, "Hausdorff": 0.057012387690331526, "idempotent": 0.06844581806138879, "nonempty": 0.09568045026443411, "compact": 0.09568045026443411, "semigroup": 0.09568045026443411, "right-multiplication": 0.09568045026443411, "continuous": 0.09568045026443411}}, {"docstring": "If we know that `parser.nat` was successful, starting at position `n` and ending at position `n'`, then it must be the case that for the ending position `n'`, either it is beyond the end of the `cb : char_buffer`, or the character at that position is not \"numeric\", that is,  between `'0'` and `'9'` inclusive.  This is a necessary part of proving one of the directions of `nat_eq_done`.\n", "keywords": {"ending position": 0.022770293819005468, "position": 0.03752353870223165, "starting at position": 0.04214449885683124, "ending": 0.07416461623266833, "parser.nat": 0.08596317751626563, "char": 0.08596317751626563, "buffer": 0.08596317751626563, "numeric": 0.08596317751626563, "inclusive": 0.08596317751626563, "ending at position": 0.08959472387800665, "successful": 0.1134826774497439, "starting": 0.1134826774497439, "case": 0.14324596573275905, "end": 0.14324596573275905, "character": 0.14324596573275905, "part of proving": 0.1560091423329992, "nat": 0.24621274290295234, "part": 0.3673621349224128, "proving": 0.3673621349224128, "directions": 0.3673621349224128}}, {"docstring": " If self-maps `f` and `g` commute, then `f` is bijective on the set of fixed points of `f \u2218 g`. This is a particular case of `function.bij_on_fixed_pts_comp`.\n", "keywords": {"fixed points": 0.06317914585211948, "commute": 0.07188367843871574, "self-maps": 0.12102666257279926, "set of fixed": 0.13359747832016683, "fixed": 0.16781817241196398, "bijective": 0.17705097305926945, "set": 0.17705097305926945, "points": 0.17705097305926945, "function.bij": 0.21197353881683212, "pts": 0.21197353881683212, "comp": 0.21197353881683212, "case": 0.4276565147820152}}, {"docstring": "**Alias** of the forward direction of is_max_filter_dual_iff`.\n", "keywords": {"forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "max": 0.04491197687864554, "filter": 0.04491197687864554, "dual": 0.04491197687864554, "iff": 0.04491197687864554, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "The dimension of the space of finite dimensional matrices is the product of the number of rows and columns.\n", "keywords": {"finite dimensional matrices": 0.0008990471097494833, "rows and columns": 0.0065920978564317735, "space of finite": 0.009239332327148086, "finite dimensional": 0.009239332327148086, "dimensional matrices": 0.009239332327148086, "number of rows": 0.009239332327148086, "columns": 0.06844581806138879, "dimension": 0.09568045026443411, "space": 0.09568045026443411, "finite": 0.09568045026443411, "dimensional": 0.09568045026443411, "matrices": 0.09568045026443411, "product": 0.09568045026443411, "number": 0.09568045026443411, "rows": 0.09568045026443411}}, {"docstring": "The variance of the sum of two independent random variables is the sum of the variances.\n", "keywords": {"independent random variables": 0.0018726557259193183, "independent random": 0.01499898965827373, "random variables": 0.01499898965827373, "sum": 0.04661236163529819, "independent": 0.12156210109285605, "random": 0.12156210109285605, "variables": 0.12156210109285605, "variance": 0.12275666689842443, "variances": 0.12275666689842443}}, {"docstring": " Assumes left covariance. The lemma assuming right covariance is `right.mul_lt_one`.\n", "keywords": {"Assumes left covariance": 0.022198737363026126, "Assumes left": 0.03985444220279051, "left covariance": 0.13064959758481184, "Assumes": 0.1554527012770092, "right.mul": 0.22125774619993788, "covariance": 0.23433876543145388, "left": 0.246550513069643, "lemma assuming": 0.39462694305349416, "lemma": 0.5319420725534505, "assuming": 0.5319420725534505, "assuming right covariance": 0.5970566294903761}}, {"docstring": "Multiplicative congruence relations preserve natural powers.\n", "keywords": {"Multiplicative congruence relations": 0.01655915082773619, "preserve natural powers": 0.016559150827736194, "congruence relations preserve": 0.03339840940482845, "relations preserve natural": 0.03339840940482845, "Multiplicative congruence": 0.04940384002065631, "natural powers": 0.04940384002065631, "congruence relations": 0.09700399286574239, "relations preserve": 0.09700399286574239, "preserve natural": 0.09700399286574239, "Multiplicative": 0.15831692877998726, "powers": 0.15831692877998726, "congruence": 0.29736558256021506, "relations": 0.29736558256021506, "preserve": 0.29736558256021506, "natural": 0.29736558256021506}}, {"docstring": " `finsupp.single a b` is injective in `a`. For the statement that it is injective in `b`, see `finsupp.single_injective`\n", "keywords": {"injective": 0.10128524213506097, "finsupp.single": 0.13398016763752058, "statement": 0.5148284441196748}}, {"docstring": " The order of a formal power series is exactly `n` if the `n`th coefficient is nonzero, and the `i`th coefficient is `0` for all `i < n`.\n", "keywords": {"formal power series": 0.00269253313269109, "coefficient is nonzero": 0.009478341963114085, "formal power": 0.01904688389482227, "power series": 0.01904688389482227, "coefficient": 0.05101428509898996, "nonzero": 0.09202664026077896, "order": 0.1367145963576765, "formal": 0.1367145963576765, "power": 0.1367145963576765, "series": 0.1367145963576765}}, {"docstring": "Equality of sigma types is sufficient (but not necessary) to show equality of `dfinsupp`s.\n", "keywords": {"types is sufficient": 0.021567786782198985, "sigma types": 0.035715520099333646, "Equality of sigma": 0.039293477084795844, "show equality": 0.039293477084795844, "dfinsupp": 0.05393656033701752, "Equality": 0.10179911835611566, "sufficient": 0.11369206228658875, "sigma": 0.18569843656348187, "types": 0.18569843656348187, "show": 0.18569843656348187}}, {"docstring": "If a matrix has a repeated row, the determinant will be zero.\n", "keywords": {"repeated row": 0.015380821171891606, "row": 0.09568045026443411, "matrix": 0.15831692877998726, "repeated": 0.15831692877998726, "determinant": 0.15831692877998726}}, {"docstring": "Deprecated. Use `fun_like.ext_iff`.\n", "keywords": {"Deprecated": 0.05899937629682816, "fun": 0.17881754828257995, "like.ext": 0.17881754828257995, "iff": 0.17881754828257995}}, {"docstring": "The `r`-th slice of `\ud835\udc9c` is a subset of `\ud835\udc9c`.\n", "keywords": {"slice": 0.15831692877998726, "subset": 0.15831692877998726}}, {"docstring": "**Alias** of `left.add_nonpos`.\n", "keywords": {"Alias": 0.030396371632413578, "left.add": 0.04491197687864554, "nonpos": 0.04491197687864554}}, {"docstring": "The rotation of a vector by `\u03b8` has an angle of `-\u03b8` from that vector.\n", "keywords": {"vector": 0.14323823713631006, "rotation": 0.19488865479360015, "angle": 0.19488865479360015}}, {"docstring": " The function `x ^ (a / (b * x + c))` tends to `1` at `+\u221e`, for any real numbers `a`, `b`, and `c` such that `b` is nonzero.\n", "keywords": {"real numbers": 0.00899321792126428, "function": 0.0771485953923296, "numbers": 0.0771485953923296, "nonzero": 0.0771485953923296, "real": 0.1155310835876123}}, {"docstring": "**Alias** of the forward direction of same_ray_neg_iff`.\n", "keywords": {"forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "ray": 0.04491197687864554, "neg": 0.04491197687864554, "iff": 0.04491197687864554, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "The **Cauchy criterion** for infinite sums, also known as the **Cauchy convergence test**\n", "keywords": {"Cauchy convergence test": 0.0016427379400618934, "Cauchy criterion": 0.008562315804097562, "Cauchy convergence": 0.014061475415212453, "infinite sums": 0.021567786782198985, "convergence test": 0.021567786782198985, "Cauchy": 0.03733604960380317, "criterion": 0.11369206228658875, "sums": 0.11369206228658875, "test": 0.11369206228658875, "infinite": 0.18569843656348187, "convergence": 0.18569843656348187}}, {"docstring": "An R-module is Noetherian iff all its submodules are finitely-generated.\n", "keywords": {"R-module is Noetherian": 0.02140921543860024, "Noetherian iff": 0.04498862876540802, "submodules are finitely-generated": 0.04940384002065631, "R-module": 0.1447773057422032, "Noetherian": 0.1447773057422032, "finitely-generated": 0.15831692877998726, "iff": 0.29736558256021506, "submodules": 0.29736558256021506}}, {"docstring": " A bounded connected subset of a conditionally complete linear order includes the open interval `(Inf s, Sup s)`.\n", "keywords": {"bounded connected subset": 0.0042542192213185686, "conditionally complete linear": 0.0042542192213185686, "complete linear order": 0.0042542192213185686, "linear order includes": 0.0042542192213185686, "open interval": 0.015380821171891606, "bounded connected": 0.02570861714399338, "connected subset": 0.02570861714399338, "conditionally complete": 0.02570861714399338, "complete linear": 0.02570861714399338, "linear order": 0.02570861714399338, "order includes": 0.02570861714399338, "includes the open": 0.02570861714399338, "interval": 0.09568045026443411, "bounded": 0.15831692877998726, "connected": 0.15831692877998726, "subset": 0.15831692877998726, "conditionally": 0.15831692877998726, "complete": 0.15831692877998726, "linear": 0.15831692877998726, "order": 0.15831692877998726}}, {"docstring": " If a function is `C^n` with `1 \u2264 n` around a point, then the derivative of `f` at this point is also a strict derivative.\n", "keywords": {"strict derivative": 0.03117712943655666, "point": 0.10191687733271076, "derivative": 0.10191687733271076, "function": 0.14832923246533666, "strict": 0.14832923246533666}}, {"docstring": "`\u2228` distributes over `\u2227` (on the left).\n", "keywords": {"distributes": 0.15831692877998726, "left": 0.15831692877998726}}, {"docstring": "**Alias** of the forward direction of cont_mdiff_on_iff_cont_diff_on`.\n", "keywords": {"Alias": 0.03402676245250578, "forward direction": 0.034987023778306175, "mdiff": 0.05331699930238388, "iff": 0.05331699930238388, "diff": 0.05331699930238388, "direction of cont": 0.06131733975553988, "cont": 0.069255433448279, "forward": 0.18385948854246909, "direction": 0.18385948854246909}}, {"docstring": " The results of applying `dom_dom_congr` to two maps are equal if and only if those maps are.\n", "keywords": {"dom": 0.021352745740207107, "results of applying": 0.02391462167226668, "maps are equal": 0.04437656514447953, "congr": 0.05706283858652404, "maps": 0.10901343189444501, "applying": 0.11984314898676356, "results": 0.19488865479360015, "equal": 0.19488865479360015}}, {"docstring": " `fintype.prod_equiv` is a specialization of `finset.prod_bij` that automatically fills in most arguments.  See `equiv.prod_comp` for a version without `h`.\n", "keywords": {"automatically fills": 0.04188746641162499, "fintype.prod": 0.05899937629682816, "equiv": 0.05899937629682816, "finset.prod": 0.05899937629682816, "bij": 0.05899937629682816, "arguments": 0.12363091320521931, "equiv.prod": 0.17881754828257995, "comp": 0.17881754828257995, "specialization": 0.2005079697193566, "automatically": 0.2005079697193566, "fills": 0.2005079697193566, "version": 0.46553351027698087}}, {"docstring": "**Alias** of left.mul_lt_one'`.\n", "keywords": {"Alias": 0.030396371632413578, "left.mul": 0.15831692877998726}}, {"docstring": "The scalar multiplication of two `C^n` functions on a domain is `C^n`.\n", "keywords": {"scalar multiplication": 0.02570861714399338, "functions": 0.09568045026443411, "scalar": 0.15831692877998726, "multiplication": 0.15831692877998726, "domain": 0.15831692877998726}}, {"docstring": "The direction equals the `vector_span`.\n", "keywords": {"direction equals": 0.02570861714399338, "vector": 0.04491197687864554, "span": 0.04491197687864554, "direction": 0.15831692877998726, "equals": 0.15831692877998726}}, {"docstring": "Shows that the partial numerators `a\u1d62` are equal to one.\n", "keywords": {"partial numerators": 0.04940384002065631, "Shows": 0.15831692877998726, "numerators": 0.15831692877998726, "partial": 0.29736558256021506, "equal": 0.29736558256021506}}, {"docstring": " The strong pigeonhole principle for finitely many pigeons and pigeonholes. There is a pigeonhole with at most as many pigeons as the floor of the average number of pigeons across all pigeonholes.\n", "keywords": {"strong pigeonhole principle": 0.021292131221609865, "principle for finitely": 0.0401461328390386, "strong pigeonhole": 0.09738126245499545, "pigeonhole principle": 0.09738126245499545, "pigeons": 0.11746760768564829, "finitely many pigeons": 0.12189306843591761, "strong": 0.19646024408037197, "principle": 0.19646024408037197, "finitely": 0.19646024408037197, "pigeonhole": 0.22584640665548655, "average number": 0.26722243963997633, "number of pigeons": 0.4460262236086639, "floor": 0.45920862335777335, "average": 0.45920862335777335, "number": 0.45920862335777335, "pigeons and pigeonholes": 0.5920298137377745}}, {"docstring": "**Alias** of lt_asymm`.\n", "keywords": {"Alias": 0.030396371632413578, "asymm": 0.04491197687864554}}, {"docstring": "Commuting elements of finite additive order are closed under addition.\n", "keywords": {"finite additive order": 0.03339840940482845, "Commuting elements": 0.04940384002065631, "closed under addition": 0.04940384002065631, "elements of finite": 0.09700399286574239, "finite additive": 0.09700399286574239, "additive order": 0.09700399286574239, "order are closed": 0.09700399286574239, "Commuting": 0.15831692877998726, "addition": 0.15831692877998726, "elements": 0.29736558256021506, "finite": 0.29736558256021506, "additive": 0.29736558256021506, "order": 0.29736558256021506, "closed": 0.29736558256021506}}, {"docstring": " The `n`-th Chebyshev polynomial of the first kind evaluates on `cos \u03b8` to the value `cos (n * \u03b8)`.\n", "keywords": {"Chebyshev polynomial": 0.010288589410371531, "kind evaluates": 0.019557279302732804, "cos": 0.05201485183844375, "Chebyshev": 0.07352956284046248, "polynomial": 0.1384995633470844, "kind": 0.1384995633470844, "evaluates": 0.1384995633470844}}, {"docstring": "The theorem that `\u2211 B\u2099(t)X^n/n!)(e^X-1)=Xe^{tX}`\n", "keywords": {"theorem": 0.15831692877998726}}, {"docstring": "Two `add_subsemigroup`s are equal if they have the same elements.\n", "keywords": {"add": 0.04491197687864554, "subsemigroup": 0.04491197687864554, "elements": 0.15831692877998726, "equal": 0.29736558256021506}}, {"docstring": "**Alias** of dvd_pow`.\n", "keywords": {"Alias": 0.030396371632413578, "pow": 0.04491197687864554, "dvd": 0.15831692877998726}}, {"docstring": "**Alias** of the forward direction of antilipschitz_with_iff_le_mul_dist`.\n", "keywords": {"direction of antilipschitz": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "mul": 0.04491197687864554, "dist": 0.04491197687864554, "antilipschitz": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "**Alias** of the forward direction of has_mfderiv_at_iff_has_fderiv_at`.\n", "keywords": {"forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "mfderiv": 0.04491197687864554, "iff": 0.04491197687864554, "fderiv": 0.04491197687864554, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " The minimal distance from `x` to `s` is bounded by the distance from `y` to `s`, modulo the distance between `x` and `y`\n", "keywords": {"minimal distance": 0.02941588917591284, "modulo the distance": 0.03502924124805436, "distance": 0.06139574337931005, "modulo": 0.10516499823464129, "minimal": 0.15514278968948286, "bounded": 0.15514278968948286}}, {"docstring": " Given `c = line_map a b r`, `a < c < b`, the point `(c, f c)` is strictly below the segment `[(a, f a), (b, f b)]` if and only if `slope f a c < slope f c b`.\n", "keywords": {"slope": 0.026369104746389253, "line": 0.05393656033701752, "map": 0.07201108509564766, "point": 0.07201108509564766, "segment": 0.07201108509564766, "strictly": 0.09202664026077896}}, {"docstring": " For GCD domains, the minimal polynomial over the ring is the same as the minimal polynomial over the fraction field.\n", "keywords": {"minimal polynomial": 0.0031344298088508984, "GCD domains": 0.004638849495283472, "fraction field": 0.008359937137928368, "minimal": 0.03946455954222964, "polynomial": 0.03946455954222964, "GCD": 0.058335607234565365, "domains": 0.07915285623416611, "field": 0.07915285623416611, "ring": 0.10474199420438675, "fraction": 0.10474199420438675}}, {"docstring": "An element of `R` admitting a left inverse is `M`-regular.\n", "keywords": {"regular": 0.04491197687864554, "admitting a left": 0.04940384002065631, "left inverse": 0.09700399286574239, "admitting": 0.15831692877998726, "element": 0.29736558256021506, "left": 0.29736558256021506, "inverse": 0.29736558256021506}}, {"docstring": "Precomposing `f` with `prod.fst` is `C^n` at `(x, y)`\n", "keywords": {"Precomposing": 0.04491197687864554, "prod.fst": 0.04491197687864554}}, {"docstring": "The difference of two `C^n` functions is `C^n`.\n", "keywords": {"functions": 0.09568045026443411, "difference": 0.15831692877998726}}, {"docstring": " If the distance between any two points in a set is bounded by some non-negative constant, this constant bounds the diameter.\n", "keywords": {"bounds the diameter": 0.020744656539556924, "set is bounded": 0.03439110359613085, "non-negative constant": 0.05033870131288873, "constant bounds": 0.05033870131288873, "diameter": 0.11145728654016383, "constant": 0.1314201551237121, "distance": 0.1823394614884183, "points": 0.1823394614884183, "set": 0.1823394614884183, "bounded": 0.1823394614884183, "non-negative": 0.1823394614884183, "bounds": 0.1823394614884183}}, {"docstring": "The cartesian product of `C^n` functions at a point is `C^n`.\n", "keywords": {"cartesian product": 0.02570861714399338, "functions": 0.09568045026443411, "cartesian": 0.15831692877998726, "product": 0.15831692877998726, "point": 0.15831692877998726}}, {"docstring": "A module over a division ring is noetherian if and only if it is finitely generated.\n", "keywords": {"finitely generated": 0.015380821171891606, "division ring": 0.02570861714399338, "ring is noetherian": 0.02570861714399338, "generated": 0.09568045026443411, "module": 0.15831692877998726, "division": 0.15831692877998726, "ring": 0.15831692877998726, "noetherian": 0.15831692877998726, "finitely": 0.15831692877998726}}, {"docstring": "If `m` and `n` are `fintype` that lie in the same universe as `R`, the rank of `m \u00d7 n` matrices  is `# m * # n`.\n", "keywords": {"fintype": 0.04491197687864554, "matrices": 0.0771485953923296, "lie": 0.1155310835876123, "universe": 0.1155310835876123, "rank": 0.1155310835876123}}, {"docstring": "**Alias** of lt_of_le_of_ne`.\n", "keywords": {"Alias": 0.030396371632413578}}, {"docstring": " If `\u03b1` has no zero divisors, then for elements `a, b : \u03b1`, `a * b` is nonzero iff so is `b * a`.\n", "keywords": {"nonzero iff": 0.013527995261974615, "divisors": 0.0771485953923296, "elements": 0.0771485953923296, "nonzero": 0.1155310835876123, "iff": 0.1155310835876123}}, {"docstring": "For `n < m`, `(n, m)` is in the transitive closure of a relation `~` if `i ~ succ i`  for all `i` between `n` and `m`.\n", "keywords": {"transitive closure": 0.013527995261974615, "relation": 0.0771485953923296, "succ": 0.0771485953923296, "transitive": 0.1155310835876123, "closure": 0.1155310835876123}}, {"docstring": "A ring is Noetherian if and only if all its ideals are finitely-generated.\n", "keywords": {"ring is Noetherian": 0.013797198203993007, "ideals are finitely-generated": 0.015380821171891606, "Noetherian": 0.08596317751626563, "finitely-generated": 0.09568045026443411, "ring": 0.15831692877998726, "ideals": 0.15831692877998726}}, {"docstring": " Integral root theorem: if `r : f.codomain` is a root of a monic polynomial over the ufd `A`, then `r` is an integer\n", "keywords": {"Integral root theorem": 0.0014985357006356923, "Integral root": 0.01625939630580789, "root theorem": 0.01625939630580789, "monic polynomial": 0.018310930906343142, "f.codomain": 0.0528063806271324, "root": 0.08871286057464066, "Integral": 0.09017440044927587, "theorem": 0.09017440044927587, "ufd": 0.09017440044927587, "integer": 0.09017440044927587, "monic": 0.13409574860218185, "polynomial": 0.13409574860218185}}, {"docstring": "Formula for orthogonal projection onto a single vector.\n", "keywords": {"Formula for orthogonal": 0.04940384002065631, "single vector": 0.04940384002065631, "orthogonal projection": 0.09700399286574239, "Formula": 0.15831692877998726, "vector": 0.15831692877998726, "orthogonal": 0.29736558256021506, "projection": 0.29736558256021506, "single": 0.29736558256021506}}, {"docstring": "A monotone surjective function with a densely ordered codomain is continuous.\n", "keywords": {"monotone surjective function": 0.0042542192213185686, "densely ordered codomain": 0.0042542192213185686, "codomain is continuous": 0.015380821171891606, "monotone surjective": 0.02570861714399338, "surjective function": 0.02570861714399338, "densely ordered": 0.02570861714399338, "ordered codomain": 0.02570861714399338, "continuous": 0.09568045026443411, "monotone": 0.15831692877998726, "surjective": 0.15831692877998726, "function": 0.15831692877998726, "densely": 0.15831692877998726, "ordered": 0.15831692877998726, "codomain": 0.15831692877998726}}, {"docstring": "See also `fintype_or_infinite`.\n", "keywords": {"fintype": 0.04491197687864554, "infinite": 0.04491197687864554}}, {"docstring": "Assumes right covariance. The lemma assuming left covariance is `left.add_pos_of_nonneg_of_pos`.\n", "keywords": {"pos": 0.08105151263492691, "Assumes": 0.16205454282434614, "Assumes right covariance": 0.16594183792672998, "left.add": 0.22989350183706597, "nonneg": 0.22989350183706597, "covariance": 0.2405027004070563, "assuming left covariance": 0.3062531289877704, "left covariance": 0.35460485137785114, "lemma assuming left": 0.37155912399617924, "lemma assuming": 0.42082946769804974, "assuming left": 0.42082946769804974, "lemma": 0.544229518153821, "assuming": 0.544229518153821, "left": 0.544229518153821}}, {"docstring": " In a nontrivial real normed space, a sphere is nonempty if and only if its radius is nonnegative.\n", "keywords": {"real normed space": 0.0025258761156662004, "nontrivial real normed": 0.0042542192213185686, "normed space": 0.015380821171891606, "radius is nonnegative": 0.015380821171891606, "nontrivial real": 0.02570861714399338, "real normed": 0.02570861714399338, "sphere is nonempty": 0.02570861714399338, "space": 0.09568045026443411, "nonnegative": 0.09568045026443411, "nontrivial": 0.15831692877998726, "real": 0.15831692877998726, "normed": 0.15831692877998726, "sphere": 0.15831692877998726, "nonempty": 0.15831692877998726, "radius": 0.15831692877998726}}, {"docstring": " In an ordered additive commutative monoid, if each summand `f i` of one finite sum is less than or equal to the corresponding summand `g i` of another finite sum, then `\u2211 i in s, f i \u2264 \u2211 i in s, g i`.\n", "keywords": {"additive commutative monoid": 0.0007564016217124502, "ordered additive commutative": 0.0009689705613877548, "finite sum": 0.004316058496214479, "commutative monoid": 0.007592052367139188, "ordered additive": 0.009708606241102103, "additive commutative": 0.009708606241102103, "summand": 0.037271111797932945, "finite": 0.04625538145093589, "sum": 0.04625538145093589, "monoid": 0.0768411838291854, "ordered": 0.09805740926331882, "additive": 0.09805740926331882, "commutative": 0.09805740926331882, "equal": 0.09805740926331882}}, {"docstring": " The inner product of two linear combinations of a set of orthonormal vectors, expressed as a sum.\n", "keywords": {"orthonormal vectors": 0.00899321792126428, "linear combinations": 0.013527995261974615, "set of orthonormal": 0.013527995261974615, "vectors": 0.0771485953923296, "expressed": 0.0771485953923296, "sum": 0.0771485953923296, "product": 0.1155310835876123, "linear": 0.1155310835876123, "combinations": 0.1155310835876123, "set": 0.1155310835876123, "orthonormal": 0.1155310835876123}}, {"docstring": "The definition of `cospherical`.\n", "keywords": {"cospherical": 0.04491197687864554, "definition": 0.29736558256021506}}, {"docstring": " The sum of two lower semicontinuous functions is lower semicontinuous. Formulated with `[has_continuous_add]`. The primed version of the lemma uses an explicit continuity assumption on addition, for application to `ereal`.\n", "keywords": {"lower semicontinuous functions": 0.007327296516767814, "lower semicontinuous": 0.016851204808897166, "semicontinuous functions": 0.03821554584844725, "functions is lower": 0.08667762295794612, "lower": 0.09028232117950413, "semicontinuous": 0.09028232117950413, "sum": 0.2038542769622493, "functions": 0.2038542769622493, "continuous": 0.2425057621221154, "add": 0.2425057621221154, "ereal": 0.31807004650910337, "assumption on addition": 0.3438068115293896, "Formulated": 0.36270881646612724, "explicit continuity assumption": 0.44505054844584063, "addition": 0.4533135999375753, "primed version": 0.46742777496856974, "explicit continuity": 0.46742777496856974, "continuity assumption": 0.46742777496856974, "primed": 0.5643894539005718, "version": 0.5643894539005718}}, {"docstring": " If an element `x` is a root of a nonzero polynomial `p`, then the degree of `p` is at least the degree of the minimal polynomial of `x`.\n", "keywords": {"nonzero polynomial": 0.01848231979674799, "minimal polynomial": 0.01848231979674799, "degree": 0.0456089852516003, "polynomial": 0.07571113878390312, "element": 0.08638782221675846, "root": 0.11984314898676356, "nonzero": 0.11984314898676356, "minimal": 0.11984314898676356}}, {"docstring": "An isometry is continuous.\n", "keywords": {"isometry is continuous": 0.04940384002065631, "continuous": 0.15831692877998726, "isometry": 0.29736558256021506}}, {"docstring": "An affine-independent subset of a finite-dimensional affine space is finite.\n", "keywords": {"finite-dimensional affine space": 0.03339840940482845, "space is finite": 0.04940384002065631, "affine-independent subset": 0.09700399286574239, "finite-dimensional affine": 0.09700399286574239, "affine space": 0.09700399286574239, "finite": 0.15831692877998726, "affine-independent": 0.29736558256021506, "subset": 0.29736558256021506, "finite-dimensional": 0.29736558256021506, "affine": 0.29736558256021506, "space": 0.29736558256021506}}, {"docstring": " The multiset `nth_roots \u2191n (1 : R)` has no repeated elements if there is a primitive root of unity in `R`.\n", "keywords": {"repeated elements": 0.034987023778306175, "primitive root": 0.051351238837580325, "nth": 0.05331699930238388, "root of unity": 0.11245662598947327, "multiset": 0.11246769819744627, "repeated": 0.18385948854246909, "elements": 0.18385948854246909, "primitive": 0.18385948854246909, "unity": 0.18385948854246909, "roots": 0.26565442043121734, "root": 0.26565442043121734}}, {"docstring": "**Alias** of the forward direction of sub_le_iff_le_add'`.\n", "keywords": {"forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "add": 0.04491197687864554, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "The Hausdorff distance between a set and itself is zero\n", "keywords": {"Hausdorff distance": 0.04498862876540802, "Hausdorff": 0.1447773057422032, "distance": 0.29736558256021506, "set": 0.29736558256021506}}, {"docstring": "The subfield generated by a set includes the set.\n", "keywords": {"subfield generated": 0.037831312533597124, "set includes": 0.0562460611896591, "includes the set": 0.12194096740933036, "set": 0.13945519496053638, "subfield": 0.19092478917347616, "generated": 0.19092478917347616, "includes": 0.19092478917347616}}, {"docstring": " Embedding `i : fin n` into `fin (n + 1)` with a hole around `p : fin (n + 1)` embeds `i` by `cast_succ` when the resulting `i.cast_succ < p`.\n", "keywords": {"succ": 0.022829596169123615, "fin": 0.04439169472392202, "Embedding": 0.0596404586934656, "embeds": 0.0596404586934656, "cast": 0.0596404586934656, "i.cast": 0.0596404586934656, "resulting": 0.1013272142599222, "hole": 0.14978645964327916}}, {"docstring": "If `t` is a finite set of pairwise disjoint finite sets, then the sum of `f a` over `a \u2208 \u22c3\u2080 t` is the sum over `s \u2208 t` of the sums of `f a` over `a \u2208 s`.\n", "keywords": {"pairwise disjoint finite": 0.0016890493026548836, "disjoint finite sets": 0.00171798864208544, "pairwise disjoint": 0.013856771487068513, "disjoint finite": 0.014091496607291358, "finite set": 0.014330254025310362, "set of pairwise": 0.034911415836739026, "sum": 0.04978538211313046, "finite": 0.05943020922842295, "sums": 0.09957076422626092, "pairwise": 0.11690759448097396, "disjoint": 0.11690759448097396, "set": 0.1188604184568459, "sets": 0.1188604184568459}}, {"docstring": "Rotating twice is equivalent to rotating by the sum of the angles.\n", "keywords": {"angles": 0.11718348279991213, "equivalent to rotating": 0.12194096740933036, "Rotating": 0.13945519496053638, "equivalent": 0.19092478917347616, "sum": 0.19092478917347616}}, {"docstring": " A set `s` is not bounded above if and only if for each `x` there exists `y \u2208 s` that is greater than `x`. A version for preorders is called `not_bdd_above_iff'`.\n", "keywords": {"set": 0.10028582371075691, "exists": 0.10028582371075691, "preorders is called": 0.11755105063023073, "bounded": 0.14832923246533666, "greater": 0.14832923246533666, "version for preorders": 0.165573765898185, "bdd": 0.17881754828257995, "iff": 0.17881754828257995, "called": 0.2790829227183407, "version": 0.37689977775222827, "preorders": 0.37689977775222827}}, {"docstring": "If matrix A is right invertible, then its inverse equals its right inverse.\n", "keywords": {"inverse equals": 0.0562460611896591, "invertible": 0.11718348279991213, "inverse": 0.13945519496053638, "matrix": 0.19092478917347616, "equals": 0.19092478917347616}}, {"docstring": " `n.asc_factorial k = (n + k)! / n!` but without \u2115-division. See `nat.asc_factorial_eq_div` for the version with \u2115-division.\n", "keywords": {"n.asc": 0.09582262996018895, "\u2115-division": 0.14148234664938591, "factorial": 0.21200394833790834, "nat.asc": 0.3490644846342439, "div": 0.3490644846342439, "version with \u2115-division": 0.417724019849119, "version": 0.6820351715540978}}, {"docstring": "The inner product of a vector with a multiple of itself.\n", "keywords": {"product": 0.15831692877998726, "vector": 0.15831692877998726, "multiple": 0.15831692877998726}}, {"docstring": "The functor Compactum_to_CompHaus is essentially surjective.\n", "keywords": {"functor Compactum": 0.026233073037508336, "CompHaus is essentially": 0.04940384002065631, "essentially surjective": 0.04940384002065631, "Compactum": 0.08596317751626563, "CompHaus": 0.15831692877998726, "surjective": 0.15831692877998726, "functor": 0.29736558256021506, "essentially": 0.29736558256021506}}, {"docstring": " If a function `f` is twice differentiable on an open convex set `D \u2286 \u211d` and `f''` is nonpositive on `D`, then `f` is concave on `D`.\n", "keywords": {"open convex set": 0.0010606143890052174, "convex set": 0.00899321792126428, "open convex": 0.013527995261974615, "function": 0.0771485953923296, "set": 0.0771485953923296, "differentiable": 0.1155310835876123, "open": 0.1155310835876123, "convex": 0.1155310835876123, "nonpositive": 0.1155310835876123, "concave": 0.1155310835876123}}, {"docstring": "The `add_subgroup` generated by an element of an `add_group` equals the set of natural number multiples of the element.\n", "keywords": {"natural number multiples": 0.0028031323823187906, "equals the set": 0.013089923375762187, "set of natural": 0.019557279302732804, "natural number": 0.019557279302732804, "number multiples": 0.019557279302732804, "add": 0.02006098734604785, "subgroup": 0.054709255964732355, "group": 0.054709255964732355, "element": 0.09269208833952335, "generated": 0.09329120537733218, "equals": 0.09329120537733218, "set": 0.1384995633470844, "natural": 0.1384995633470844, "number": 0.1384995633470844, "multiples": 0.1384995633470844}}, {"docstring": "An `add_subgroup` is closed under addition.\n", "keywords": {"add": 0.04491197687864554, "subgroup": 0.04491197687864554, "closed under addition": 0.04940384002065631, "addition": 0.15831692877998726, "closed": 0.29736558256021506}}, {"docstring": "The 1 of the quotient of a monoid by a congruence relation is the equivalence class of the    monoid's 1.\n", "keywords": {"congruence relation": 0.013095151449018445, "equivalence class": 0.013095151449018445, "monoid": 0.07030442419566416, "quotient": 0.11369206228658875, "congruence": 0.11369206228658875, "relation": 0.11369206228658875, "equivalence": 0.11369206228658875, "class": 0.11369206228658875}}, {"docstring": "The element `0` is regular if and only if `R` is trivial.\n", "keywords": {"element": 0.09568045026443411, "trivial": 0.09568045026443411, "regular": 0.15831692877998726}}, {"docstring": "The nilpotency class of an n-ary product is the sup of the nilpotency classes of the factors\n", "keywords": {"nilpotency class": 0.012818701037910368, "nilpotency classes": 0.012818701037910368, "n-ary product": 0.013095151449018445, "nilpotency": 0.05566114900812666, "factors": 0.08179429269966654, "class": 0.11369206228658875, "n-ary": 0.11369206228658875, "product": 0.11369206228658875, "classes": 0.11369206228658875}}, {"docstring": "**Alias** of left.inv_lt_one_iff`.\n", "keywords": {"Alias": 0.030396371632413578, "iff": 0.04491197687864554, "left.inv": 0.15831692877998726}}, {"docstring": "When `p` is prime, then the totient of `p ^ (n + 1)` is `p ^ n * (p - 1)`\n", "keywords": {"prime": 0.06844581806138879, "totient": 0.09568045026443411}}, {"docstring": " A version of `edist_le_Ico_sum_edist` with each intermediate distance replaced with an upper estimate.\n", "keywords": {"intermediate distance replaced": 0.0064971092056266945, "edist": 0.018830794223096383, "upper estimate": 0.020435055290363522, "Ico": 0.033641197513274955, "intermediate distance": 0.033892441937102495, "distance replaced": 0.033892441937102495, "sum": 0.052376395424323874, "estimate": 0.11060549338282699, "version": 0.18105634546484617, "intermediate": 0.18105634546484617, "distance": 0.18105634546484617, "replaced": 0.18105634546484617, "upper": 0.18105634546484617}}, {"docstring": " Two n-simplices among cospherical points in n-space have the same circumradius.\n", "keywords": {"n-simplices among cospherical": 0.09700399286574239, "cospherical points": 0.09700399286574239, "points in n-space": 0.09700399286574239, "circumradius": 0.15831692877998726, "n-simplices": 0.29736558256021506, "cospherical": 0.29736558256021506, "points": 0.29736558256021506, "n-space": 0.29736558256021506}}, {"docstring": "The antidiagonal of `0` is the list `[(0, 0)]`\n", "keywords": {"list": 0.0771485953923296, "antidiagonal": 0.1155310835876123}}, {"docstring": "**Alias** of left.mul_lt_one_of_lt_of_le`.\n", "keywords": {"Alias": 0.030396371632413578, "left.mul": 0.0771485953923296}}, {"docstring": "The antidiagonal of `0` is the list `[(0, 0)]`\n", "keywords": {"list": 0.0771485953923296, "antidiagonal": 0.1155310835876123}}, {"docstring": "If a compact set is covered by two open sets, then we can cover it by two compact subsets.\n", "keywords": {"compact subsets": 0.035552851931764155, "open sets": 0.05913243875864445, "compact set": 0.08940622963610957, "subsets": 0.11984314898676356, "set is covered": 0.12748048004056908, "compact": 0.14323823713631006, "covered": 0.19488865479360015, "open": 0.19488865479360015, "cover": 0.19488865479360015, "set": 0.28647647427262013, "sets": 0.28647647427262013}}, {"docstring": " If A is an R-algebra all of whose elements are integral over R, and x is an element of an A-algebra that is integral over A, then x is integral over R.\n", "keywords": {"integral": 0.039167529191584734, "R-algebra": 0.06827524727034483, "A-algebra": 0.06827524727034483, "elements are integral": 0.10107903898896843, "elements": 0.1748394404884849, "element": 0.1748394404884849}}, {"docstring": "The definition of `x < y` on numeric pre-games, in terms of `<` two moves later.\n", "keywords": {"numeric pre-games": 0.015380821171891606, "pre-games": 0.09568045026443411, "definition": 0.15831692877998726, "numeric": 0.15831692877998726, "terms": 0.15831692877998726, "moves": 0.15831692877998726}}, {"docstring": " A version of `quotient.ind` taking `{s : setoid \u03b1}` as an implicit argument instead of an instance argument.\n", "keywords": {"implicit argument": 0.051351238837580325, "instance argument": 0.051351238837580325, "quotient.ind": 0.05331699930238388, "taking": 0.05331699930238388, "setoid": 0.11246769819744627, "argument": 0.13282721021560867, "version": 0.18385948854246909, "implicit": 0.18385948854246909, "instance": 0.18385948854246909}}, {"docstring": " **Maximum modulus principle**: if `f : E \u2192 F` is complex differentiable on a bounded set `U` and `\u2225f z\u2225 \u2264 C` for any `z \u2208 frontier U`, then the same is true for any `z \u2208 closure U`.\n", "keywords": {"Maximum modulus principle": 0.00043319434314915647, "Maximum modulus": 0.005548741293751374, "modulus principle": 0.00899321792126428, "bounded set": 0.00899321792126428, "complex differentiable": 0.013527995261974615, "Maximum": 0.04776309965539685, "principle": 0.0771485953923296, "set": 0.0771485953923296, "frontier": 0.0771485953923296, "closure": 0.0771485953923296, "modulus": 0.1155310835876123, "complex": 0.1155310835876123, "differentiable": 0.1155310835876123, "bounded": 0.1155310835876123, "true": 0.1155310835876123}}, {"docstring": " If `f` is countably generated and `f.has_basis p s`, then `f` admits a decreasing basis enumerated by natural numbers such that all sets have the form `s i`. More precisely, there is a sequence `i n` such that `p (i n)` for all `n` and `s (i n)` is a decreasing sequence of sets which forms a basis of `f`\n", "keywords": {"decreasing basis enumerated": 0.020615097082332237, "countably generated": 0.03272462581537163, "enumerated by natural": 0.03272462581537163, "natural numbers": 0.03272462581537163, "admits a decreasing": 0.03532292519663041, "basis enumerated": 0.06985499858311843, "f.has": 0.08779847391212506, "decreasing basis": 0.10586137983342095, "basis": 0.12226614947385292, "decreasing": 0.13049064369768587, "admits": 0.13072885631717485, "decreasing sequence": 0.14091222508971135, "sets": 0.1578275630184955, "countably": 0.17801027787919774, "generated": 0.17801027787919774, "enumerated": 0.17801027787919774, "natural": 0.17801027787919774, "numbers": 0.17801027787919774, "sequence": 0.23662306430110952, "form": 0.315655126036991}}, {"docstring": "**Alias** of the reverse direction of unique_mdiff_within_at_iff_unique_diff_within_at`.\n", "keywords": {"Alias": 0.03402676245250578, "reverse direction": 0.034987023778306175, "mdiff": 0.05331699930238388, "iff": 0.05331699930238388, "diff": 0.05331699930238388, "direction of unique": 0.06131733975553988, "unique": 0.069255433448279, "reverse": 0.18385948854246909, "direction": 0.18385948854246909}}, {"docstring": "A family of continuous linear maps is continuous on `s` if all its applications are.\n", "keywords": {"continuous linear maps": 0.010962043841203115, "linear maps": 0.03663237450220032, "continuous linear": 0.05417025203414716, "family of continuous": 0.11793310824193863, "maps is continuous": 0.11793310824193863, "continuous": 0.13667842094541144, "family": 0.1879836817695587, "linear": 0.1879836817695587, "maps": 0.1879836817695587, "applications": 0.1879836817695587}}, {"docstring": "Closed balls are bounded\n", "keywords": {"Closed balls": 0.04940384002065631, "balls are bounded": 0.04940384002065631, "Closed": 0.15831692877998726, "bounded": 0.15831692877998726, "balls": 0.29736558256021506}}, {"docstring": " Every solution to **Pell's equation** is recursively obtained from the initial solution `(1,0)` using the recursion `pell`.\n", "keywords": {"Pell equation": 0.012156931309122801, "recursively obtained": 0.038584678130008584, "Pell": 0.050719820074159296, "initial solution": 0.05755977077196411, "equation": 0.11840455484321102, "recursion": 0.11840455484321102, "solution": 0.1411879566095664, "recursively": 0.19274649316101516, "obtained": 0.19274649316101516, "initial": 0.19274649316101516}}, {"docstring": "`cut_expand r` is well-founded when `r` is.\n", "keywords": {"cut": 0.04491197687864554, "expand": 0.09568045026443411, "well-founded": 0.15831692877998726}}, {"docstring": "The norm of the `0` operator is `0`.\n", "keywords": {"operator": 0.09568045026443411, "norm": 0.15831692877998726}}, {"docstring": "A group homomorphism is injective iff its kernel is trivial.\n", "keywords": {"kernel is trivial": 0.015380821171891606, "group homomorphism": 0.02570861714399338, "homomorphism is injective": 0.02570861714399338, "injective iff": 0.02570861714399338, "iff its kernel": 0.02570861714399338, "trivial": 0.09568045026443411, "group": 0.15831692877998726, "homomorphism": 0.15831692877998726, "injective": 0.15831692877998726, "iff": 0.15831692877998726, "kernel": 0.15831692877998726}}, {"docstring": " The determinant of a 2\u00d72 block matrix with the lower-left block equal to zero is the product of the determinants of the diagonal blocks. For the generalization to any number of blocks, see `matrix.det_of_upper_triangular`.\n", "keywords": {"lower-left block equal": 0.00740289524013058, "block matrix": 0.047023878874704085, "lower-left block": 0.047023878874704085, "block equal": 0.047023878874704085, "diagonal blocks": 0.047023878874704085, "determinant": 0.10560010152970296, "matrix": 0.1485863395864168, "lower-left": 0.1485863395864168, "equal": 0.1485863395864168, "product": 0.1485863395864168, "diagonal": 0.1485863395864168, "block": 0.15113080091152167, "blocks": 0.15113080091152167, "matrix.det": 0.2542526474747133, "upper": 0.2542526474747133, "triangular": 0.2542526474747133, "number of blocks": 0.3563869139811104, "generalization": 0.37737752414603726, "number": 0.37737752414603726}}, {"docstring": "Equivalence classes partition the type.\n", "keywords": {"Equivalence classes partition": 0.01655915082773619, "Equivalence classes": 0.04940384002065631, "partition the type": 0.04940384002065631, "classes partition": 0.09700399286574239, "Equivalence": 0.15831692877998726, "type": 0.15831692877998726, "classes": 0.29736558256021506, "partition": 0.29736558256021506}}, {"docstring": "The multiplicity of `a` as root of `(X - a) ^ n` is `n`.\n", "keywords": {"multiplicity": 0.15831692877998726, "root": 0.15831692877998726}}, {"docstring": " If `f : \ud835\udd5c \u2192 G`, `\ud835\udd5c = R` or `\ud835\udd5c = \u2102`, is differentiable everywhere and its derivative equal zero, then it is a constant function.\n", "keywords": {"constant function": 0.00899321792126428, "derivative equal": 0.013527995261974615, "function": 0.0771485953923296, "differentiable": 0.1155310835876123, "derivative": 0.1155310835876123, "equal": 0.1155310835876123, "constant": 0.1155310835876123}}, {"docstring": " The Hausdorff distance to the empty set vanishes (if you want to have the more reasonable value \u221e instead, use `Hausdorff_edist`, which takes values in \u211d\u22650\u221e)\n", "keywords": {"empty set vanishes": 0.0017342432755507887, "set vanishes": 0.012465543599998139, "Hausdorff distance": 0.01250616413768685, "empty set": 0.018641876658774398, "Hausdorff": 0.04565227248125874, "edist": 0.053316999302383886, "vanishes": 0.09101163530720666, "distance": 0.13528014248445303, "empty": 0.13528014248445303, "set": 0.13528014248445303, "reasonable": 0.13528014248445303}}, {"docstring": "The `val : \u2115` produced by a successful parse of a `cb : char_buffer` is the numerical value represented by the string of decimal digits (possibly padded with 0s on the left) starting from the parsing position `n` and ending at position `n'`. The number of characters parsed in is necessarily `n' - n`.  This is one of the directions of `nat_eq_done`.\n", "keywords": {"parsing position": 0.008973374472259139, "decimal digits": 0.011833426954925574, "possibly padded": 0.011833426954925574, "successful parse": 0.014639607621580588, "numerical value represented": 0.014639607621580588, "string of decimal": 0.014639607621580588, "ending at position": 0.022853292044608113, "position": 0.03702007358905222, "val": 0.07628408883696117, "char": 0.07628408883696117, "buffer": 0.07628408883696117, "produced": 0.0973627201961778, "digits": 0.0973627201961778, "possibly": 0.0973627201961778, "left": 0.0973627201961778, "starting": 0.0973627201961778, "number of characters": 0.11538463226308791, "characters parsed": 0.11538463226308791, "successful": 0.1201181991781338, "parse": 0.1201181991781338}}, {"docstring": "Expressing `has_fderiv_within_at f f' s x` in terms of `has_deriv_within_at`\n", "keywords": {"Expressing": 0.04491197687864554, "fderiv": 0.04491197687864554, "deriv": 0.04491197687864554, "terms": 0.15831692877998726}}, {"docstring": "If `R` is a Jacobson ring, and `P` is a maximal ideal of `polynomial R`,  then `R \u2192 R[X]/P` is an integral map.\n", "keywords": {"Jacobson ring": 0.003917546799371481, "integral map": 0.0065920978564317735, "maximal ideal": 0.009239332327148086, "Jacobson": 0.057012387690331526, "ring": 0.06844581806138879, "polynomial": 0.06844581806138879, "map": 0.06844581806138879, "maximal": 0.09568045026443411, "ideal": 0.09568045026443411, "integral": 0.09568045026443411}}, {"docstring": "When the right derivative of a function is nonnegative, then it is automatically integrable.\n", "keywords": {"function is nonnegative": 0.015380821171891606, "automatically integrable": 0.015380821171891606, "nonnegative": 0.09568045026443411, "integrable": 0.09568045026443411, "derivative": 0.15831692877998726, "function": 0.15831692877998726, "automatically": 0.15831692877998726}}, {"docstring": " A version of the **Hahn-Banach theorem**: given disjoint convex sets `s`, `t` where `s` is closed, and `t` is compact, there is a continuous linear functional which strongly separates them.\n", "keywords": {"disjoint convex sets": 0.0010606143890052174, "continuous linear functional": 0.0016012214736657916, "Hahn-Banach theorem": 0.005987543063120938, "convex sets": 0.00899321792126428, "disjoint convex": 0.013527995261974615, "continuous linear": 0.013527995261974615, "linear functional": 0.013527995261974615, "functional which strongly": 0.013527995261974615, "strongly separates": 0.013527995261974615, "Hahn-Banach": 0.0771485953923296, "theorem": 0.0771485953923296, "sets": 0.0771485953923296, "closed": 0.0771485953923296, "compact": 0.0771485953923296, "version": 0.1155310835876123, "disjoint": 0.1155310835876123, "convex": 0.1155310835876123, "continuous": 0.1155310835876123, "linear": 0.1155310835876123, "functional": 0.1155310835876123}}, {"docstring": "**Alias** of filter.tendsto_at_top_finset_of_monotone`.\n", "keywords": {"Alias": 0.030396371632413578, "top": 0.04491197687864554, "finset": 0.04491197687864554, "monotone": 0.04491197687864554, "filter.tendsto": 0.09568045026443411}}, {"docstring": "For the single implications with fewer assumptions, see `one_div_le_one_div_of_le` and  `le_of_one_div_le_one_div`\n", "keywords": {"div": 0.00932045406634339, "fewer assumptions": 0.013354668549352425, "single implications": 0.018532313889308878, "implications with fewer": 0.018532313889308878, "assumptions": 0.09769992342467647, "single": 0.13488927415883753, "implications": 0.13488927415883753, "fewer": 0.13488927415883753}}, {"docstring": " In a join, dropping all the elements up to an index which is the sum of the lengths of the first `i` sublists, is the same as taking the join after dropping the first `i` sublists.\n", "keywords": {"sublists": 0.021671764809268954, "taking the join": 0.023795183664492573, "join after dropping": 0.046237288314058315, "join": 0.050311715396285366, "dropping": 0.050311715396285366, "elements": 0.09180994495797792, "index": 0.09180994495797792, "sum": 0.09180994495797792, "lengths": 0.09180994495797792, "taking": 0.09180994495797792}}, {"docstring": "An induction principle for closure membership for predicates with two arguments.\n", "keywords": {"induction principle": 0.02570861714399338, "principle for closure": 0.02570861714399338, "closure membership": 0.02570861714399338, "membership for predicates": 0.02570861714399338, "arguments": 0.09568045026443411, "induction": 0.15831692877998726, "principle": 0.15831692877998726, "closure": 0.15831692877998726, "membership": 0.15831692877998726, "predicates": 0.15831692877998726}}, {"docstring": "The basic open sets for the topology on ultrafilters are also closed.\n", "keywords": {"basic open sets": 0.0042542192213185686, "basic open": 0.02570861714399338, "open sets": 0.02570861714399338, "topology on ultrafilters": 0.02570861714399338, "closed": 0.09568045026443411, "basic": 0.15831692877998726, "open": 0.15831692877998726, "sets": 0.15831692877998726, "topology": 0.15831692877998726, "ultrafilters": 0.15831692877998726}}, {"docstring": " If `\u03b1` is a `\u03c3`-compact space, then a locally finite family of nonempty sets of `\u03b1` can have only countably many elements, `set.countable` version.\n", "keywords": {"locally finite family": 0.0042542192213185686, "compact space": 0.009239332327148086, "countably many elements": 0.015380821171891606, "locally finite": 0.02570861714399338, "finite family": 0.02570861714399338, "family of nonempty": 0.02570861714399338, "nonempty sets": 0.02570861714399338, "set.countable": 0.04491197687864554, "version": 0.04491197687864554, "compact": 0.09568045026443411, "space": 0.09568045026443411, "elements": 0.09568045026443411, "locally": 0.15831692877998726, "finite": 0.15831692877998726, "family": 0.15831692877998726, "nonempty": 0.15831692877998726, "sets": 0.15831692877998726, "countably": 0.15831692877998726}}, {"docstring": "In a finite field of characteristic `2`, all elements are squares.\n", "keywords": {"field of characteristic": 0.04940384002065631, "elements are squares": 0.04940384002065631, "finite field": 0.09700399286574239, "characteristic": 0.15831692877998726, "squares": 0.15831692877998726, "finite": 0.29736558256021506, "field": 0.29736558256021506, "elements": 0.29736558256021506}}, {"docstring": " A point in the `affine_span` of an indexed family is an `affine_combination` with sum of weights 1. See also `eq_affine_combination_of_mem_affine_span_of_fintype`.\n", "keywords": {"affine": 0.019582770239325194, "sum of weights": 0.026790666170858127, "indexed family": 0.036711634089349236, "span": 0.05493347409266674, "combination": 0.05493347409266674, "weights": 0.13865282697491918, "point": 0.1881797433501235, "indexed": 0.1881797433501235, "family": 0.1881797433501235, "sum": 0.1881797433501235, "mem": 0.26351589430099925, "fintype": 0.26351589430099925}}, {"docstring": "**Alias** of the forward direction of matrix.nondegenerate_iff_det_ne_zero`.\n", "keywords": {"direction of matrix.nondegenerate": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "det": 0.04491197687864554, "matrix.nondegenerate": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "The set of Liouville numbers has Lebesgue measure zero.\n", "keywords": {"set of Liouville": 0.04498862876540802, "Liouville numbers": 0.04498862876540802, "numbers has Lebesgue": 0.04498862876540802, "Lebesgue measure": 0.04498862876540802, "Liouville": 0.1447773057422032, "Lebesgue": 0.1447773057422032, "set": 0.29736558256021506, "numbers": 0.29736558256021506, "measure": 0.29736558256021506}}, {"docstring": " An induction principle for closure membership. If `p` holds for `1` and all elements of `s`, and is preserved under multiplication, then `p` holds for all elements of the closure of `s`.\n", "keywords": {"induction principle": 0.04214176950703559, "closure membership": 0.05434212699580431, "holds": 0.13463809596664322, "membership": 0.13874228850015136, "principle for closure": 0.16619536763397152, "elements": 0.18269899892831928, "closure": 0.18574461176690396, "preserved under multiplication": 0.20097116219473396, "induction": 0.20109116132670046, "principle": 0.20109116132670046, "multiplication": 0.35876280059460885, "preserved": 0.4664378224654198}}, {"docstring": " There exist two lists of `transvection_struct` such that multiplying by them on the left and on the right makes a matrix block-diagonal, when the last coefficient is nonzero.\n", "keywords": {"matrix block-diagonal": 0.00899321792126428, "coefficient is nonzero": 0.00899321792126428, "exist two lists": 0.013527995261974615, "makes a matrix": 0.013527995261974615, "transvection": 0.04491197687864554, "struct": 0.04491197687864554, "block-diagonal": 0.0771485953923296, "nonzero": 0.0771485953923296, "exist": 0.1155310835876123, "lists": 0.1155310835876123, "multiplying": 0.1155310835876123, "left": 0.1155310835876123, "makes": 0.1155310835876123, "matrix": 0.1155310835876123, "coefficient": 0.1155310835876123}}, {"docstring": "The submonoid generated by a set is contained in any submonoid that contains the set.\n", "keywords": {"submonoid generated": 0.06340461682679863, "set is contained": 0.13561210463159817, "submonoid": 0.14868279128010753, "set": 0.14868279128010753, "generated": 0.2005079697193566, "contained": 0.2005079697193566}}, {"docstring": "**Alias** of int.abs_le_self_sq`.\n", "keywords": {"Alias": 0.030396371632413578, "int.abs": 0.15831692877998726}}, {"docstring": "The first projection on a domain in a product is `C^\u221e`.\n", "keywords": {"projection": 0.15831692877998726, "domain": 0.15831692877998726, "product": 0.15831692877998726}}, {"docstring": "`(n, m)` is in the reflexive-transitive closure of `~` if `i ~ succ i` and `succ i ~ i`  for all `i` between `n` and `m`.\n", "keywords": {"reflexive-transitive closure": 0.01137117696571328, "succ": 0.030180843258257848, "reflexive-transitive": 0.10603455617644456, "closure": 0.10603455617644456}}, {"docstring": "A version of `star_mul` for `\u2b1d` instead of `*`.\n", "keywords": {"star": 0.04491197687864554, "mul": 0.04491197687864554, "version": 0.15831692877998726}}, {"docstring": "`x^m`, `m : \u2124` is convex on `(0, +\u221e)` for all `m` except `0` and `1`.\n", "keywords": {"convex": 0.1155310835876123}}, {"docstring": " If `R` is a linear ordered semifield, then it suffices to verify only the first axiom of `ordered_smul`. Moreover, it suffices to verify that `a < b` and `0 < c` imply `c \u2022 a \u2264 c \u2022 b`. We have no semifields in `mathlib`, so we use the assumption `\u2200 c \u2260 0, is_unit c` instead.\n", "keywords": {"linear ordered semifield": 0.013477488004717202, "suffices to verify": 0.02627485869425194, "linear ordered": 0.03175182857188828, "ordered semifield": 0.07141451608287196, "ordered": 0.08846441406036848, "smul": 0.09700852795704887, "suffices": 0.10072478573907039, "verify": 0.12391715164942796, "linear": 0.17393816853783164, "axiom": 0.17393816853783164, "imply": 0.27172729507513826, "mathlib": 0.35216380502070577, "semifield": 0.3767301431101566, "semifields": 0.3767301431101566, "assumption": 0.43907958655087886, "unit": 0.43907958655087886}}, {"docstring": "**Alias** of ssubset_irrfl`.\n", "keywords": {"Alias": 0.030396371632413578, "irrfl": 0.04491197687864554, "ssubset": 0.15831692877998726}}, {"docstring": " The Gromov-Hausdorff distance between two spaces is bounded by the Hausdorff distance of isometric copies of the spaces, in any metric space.\n", "keywords": {"Hausdorff distance": 0.01608287665174362, "isometric copies": 0.02295090972417644, "Gromov-Hausdorff distance": 0.03194255188815672, "metric space": 0.040017078329054975, "distance of isometric": 0.07349085580238249, "Hausdorff": 0.07659370298681402, "distance": 0.10332645666150714, "spaces is bounded": 0.11868767888969164, "spaces": 0.12844060861415768, "Gromov-Hausdorff": 0.14978645964327916, "bounded": 0.14978645964327916, "isometric": 0.14978645964327916, "copies": 0.14978645964327916, "metric": 0.14978645964327916, "space": 0.25688121722831536}}, {"docstring": "A list with product greater than one must have positive length.\n", "keywords": {"positive length": 0.04940384002065631, "list with product": 0.09700399286574239, "product greater": 0.09700399286574239, "length": 0.15831692877998726, "list": 0.29736558256021506, "product": 0.29736558256021506, "greater": 0.29736558256021506, "positive": 0.29736558256021506}}, {"docstring": "Counterpart to `list.prod_take_succ` when we have an inverse operation\n", "keywords": {"list.prod": 0.04491197687864554, "succ": 0.04491197687864554, "inverse operation": 0.04940384002065631, "Counterpart": 0.15831692877998726, "operation": 0.15831692877998726, "inverse": 0.29736558256021506}}, {"docstring": "In a space with second countable topology, strongly measurable and measurable are equivalent.\n", "keywords": {"countable topology": 0.021567786782198985, "strongly measurable": 0.031557281947372486, "measurable are equivalent": 0.0710891909196062, "topology": 0.11369206228658875, "strongly": 0.11369206228658875, "equivalent": 0.11369206228658875, "measurable": 0.13453835116331675, "space": 0.18569843656348187, "countable": 0.18569843656348187, "measurable and measurable": 0.2404655753837288}}, {"docstring": " Given `c = line_map a b r`, `a < c`, the point `(c, f c)` is non-strictly above the segment `[(a, f a), (b, f b)]` if and only if `slope f a b \u2264 slope f a c`.\n", "keywords": {"slope": 0.026369104746389253, "line": 0.05393656033701752, "map": 0.07201108509564766, "point": 0.07201108509564766, "segment": 0.07201108509564766, "non-strictly": 0.09202664026077896}}, {"docstring": "**Alias** of left.mul_lt_one_of_le_of_lt`.\n", "keywords": {"Alias": 0.030396371632413578, "left.mul": 0.0771485953923296}}, {"docstring": "**Alias** of the reverse direction of mdifferentiable_within_at_iff_differentiable_within_at`.\n", "keywords": {"direction of mdifferentiable": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "differentiable": 0.04491197687864554, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " The angle between two vectors is `\u03b8` if and only if they are nonzero and the second vector is the first rotated by `\u03b8` and scaled by a positive real, or `\u03b8` and at least one of the vectors are zero.\n", "keywords": {"positive real": 0.011105384224262597, "vectors": 0.07969769526551461, "real": 0.08902894120058116, "angle": 0.12336897526125244, "nonzero": 0.12336897526125244, "rotated": 0.12336897526125244, "scaled": 0.12336897526125244, "positive": 0.12336897526125244, "vector": 0.15939539053102922}}, {"docstring": " If a function `f` has a power series `p` on a ball and `g` is linear, then `g \u2218 f` has the power series `g \u2218 p` on the same ball.\n", "keywords": {"power series": 0.006427069423075348, "series": 0.03935544201416446, "power": 0.08061786523087176, "function": 0.10159647344475727, "linear": 0.10159647344475727, "ball": 0.10369247975016448}}, {"docstring": " To show a filter is above the neighborhood filter at `a`, it suffices to show that it is above the principal filter of some open set `s` containing `a`.\n", "keywords": {"open set": 0.01577307888388885, "suffices to show": 0.02536363305303039, "neighborhood filter": 0.04123428594263107, "principal filter": 0.04123428594263107, "show": 0.08165986892166045, "filter": 0.08715531685954774, "set": 0.10252384836042068, "neighborhood": 0.15145892749810547, "suffices": 0.15145892749810547, "principal": 0.15145892749810547, "open": 0.15145892749810547, "show a filter": 0.17697535495605787}}, {"docstring": "**Alias** of the reverse direction of list.reverse_infix`.\n", "keywords": {"direction of list.reverse": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "infix": 0.04491197687864554, "list.reverse": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "If an element a divides another element b in a commutative ring, a divides the sum of b and  another element c iff a divides c.\n", "keywords": {"commutative ring": 0.012906749834788353, "iff a divides": 0.020159870851545764, "divides": 0.049645555234619713, "element": 0.0604415109848293, "divides the sum": 0.06747142081205226, "element c iff": 0.07978532766010574, "element a divides": 0.08851522304680749, "ring": 0.09603500085846951, "divides another element": 0.11137204034277823, "commutative": 0.13268379438099134, "sum": 0.13268379438099134, "iff": 0.13268379438099134}}, {"docstring": " The `span_points` of a set is nonempty if and only if that set is.\n", "keywords": {"set is nonempty": 0.04212793185246166, "span": 0.055708263664958506, "points": 0.055708263664958506, "set": 0.10586606907408062, "nonempty": 0.19092478917347616}}, {"docstring": "**Alias** of the forward direction of list.nodup_sublists'`.\n", "keywords": {"direction of list.nodup": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "sublists": 0.04491197687864554, "list.nodup": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " Sum of a multiset of elements in an `subring` of a `ring` is in the `subring`.\n", "keywords": {"multiset of elements": 0.019557279302732804, "subring": 0.02006098734604785, "ring": 0.054709255964732355, "Sum": 0.09329120537733218, "multiset": 0.1384995633470844, "elements": 0.1384995633470844}}, {"docstring": "The union of `{0}` with the interior of a balanced set is balanced.\n", "keywords": {"balanced set": 0.0562460611896591, "set is balanced": 0.12194096740933036, "balanced": 0.13945519496053638, "union": 0.19092478917347616, "interior": 0.19092478917347616, "set": 0.19092478917347616}}, {"docstring": " When an inner product space `E` over `\ud835\udd5c` is considered as a real normed space, its inner product satisfies `is_bounded_bilinear_map`.  In order to state these results, we need a `normed_space \u211d E` instance. We will later establish such an instance by restriction-of-scalars, `inner_product_space.is_R_or_C_to_real \ud835\udd5c E`, but this instance may be not definitionally equal to some other \u201cnatural\u201d instance. So, we assume `[normed_space \u211d E]`.\n", "keywords": {"product satisfies": 0.09631531889898291, "space": 0.11743937259499757, "bounded": 0.1283705853821623, "bilinear": 0.1283705853821623, "map": 0.1283705853821623, "product": 0.1565425158533277, "instance": 0.16033773449739416, "normed": 0.1719618606320675, "satisfies": 0.18707093649508078, "real normed space": 0.2429921151240743, "considered": 0.248895276655899, "real": 0.25284259324392877, "product space": 0.28305643859004814, "state these results": 0.31178793437510677, "normed space": 0.31985517688811416, "real normed": 0.35295239991223515, "order to state": 0.4011560928378932, "space.is": 0.4270076811274363, "natural": 0.4270076811274363, "results": 0.44420376599770445}}, {"docstring": "The edist to a singleton is the edistance to the single point of this singleton\n", "keywords": {"single point": 0.019557279302732804, "singleton": 0.09269208833952335, "edist": 0.1384995633470844, "edistance": 0.1384995633470844, "single": 0.1384995633470844, "point": 0.1384995633470844}}, {"docstring": " If all `f i`, `i \u2208 s`, are nonnegative and each `f i` is less than or equal to `g i`, then the product of `f i` is less than or equal to the product of `g i`. See also `finset.prod_le_prod''` for the case of an ordered commutative multiplicative monoid.\n", "keywords": {"commutative multiplicative monoid": 0.043372519825488176, "equal": 0.04360433830232601, "product": 0.04360433830232601, "ordered commutative multiplicative": 0.05396067899696283, "multiplicative monoid": 0.10672085035635939, "nonnegative": 0.129389133019644, "ordered commutative": 0.1310931779954021, "commutative multiplicative": 0.1310931779954021, "finset.prod": 0.22501140196509825, "prod": 0.28325026875694265, "monoid": 0.28325026875694265, "case": 0.3404402136765515, "ordered": 0.3404402136765515, "commutative": 0.3404402136765515, "multiplicative": 0.3404402136765515}}, {"docstring": "In a space with second countable topology and a sigma-finite measure,  `ae_fin_strongly_measurable` and `ae_measurable` are equivalent.\n", "keywords": {"measurable": 0.018830794223096383, "sigma-finite measure": 0.020435055290363522, "countable topology": 0.033892441937102495, "fin": 0.052376395424323874, "strongly": 0.052376395424323874, "measure": 0.11060549338282699, "equivalent": 0.11060549338282699, "space": 0.18105634546484617, "countable": 0.18105634546484617, "topology": 0.18105634546484617, "sigma-finite": 0.18105634546484617}}, {"docstring": "A map to a group preserving multiplication is a monoid homomorphism.\n", "keywords": {"group preserving multiplication": 0.0016012214736657916, "monoid homomorphism": 0.00899321792126428, "group preserving": 0.013527995261974615, "preserving multiplication": 0.013527995261974615, "homomorphism": 0.0771485953923296, "map": 0.1155310835876123, "group": 0.1155310835876123, "preserving": 0.1155310835876123, "multiplication": 0.1155310835876123, "monoid": 0.1155310835876123}}, {"docstring": " If `s` is a compact set in a topological space `\u03b1` and `f : \u03b9 \u2192 set \u03b1` is a locally finite family of sets, then `f i \u2229 s` is nonempty only for a finitely many `i`.\n", "keywords": {"locally finite family": 0.0018360546872799681, "topological space": 0.010631466600687029, "locally finite": 0.014805186175258089, "finite family": 0.014805186175258089, "compact set": 0.022626911537084293, "family of sets": 0.07388659922605674, "space": 0.08709330382843004, "set": 0.09159303887671444, "compact": 0.12078572139889024, "topological": 0.12078572139889024, "locally": 0.12078572139889024, "finite": 0.12078572139889024, "family": 0.12078572139889024, "nonempty": 0.12078572139889024, "finitely": 0.12078572139889024, "sets": 0.18318607775342888}}, {"docstring": " For a bounded set `s : set \u211d`, its `emetric.diam` is equal to `Sup s - Inf s` reinterpreted as `\u211d\u22650\u221e`.\n", "keywords": {"bounded set": 0.025536557885239508, "emetric.diam": 0.05393656033701752, "set": 0.09106811155038866, "reinterpreted": 0.09202664026077896, "bounded": 0.1367145963576765, "equal": 0.1367145963576765}}, {"docstring": "**Alias** of the reverse direction of inv_mul_lt_iff_lt_mul`.\n", "keywords": {"mul": 0.019648131954263418, "direction of inv": 0.021567786782198985, "Alias": 0.034278050535979626, "reverse direction": 0.035715520099333646, "iff": 0.05393656033701752, "inv": 0.11369206228658875, "reverse": 0.18569843656348187, "direction": 0.18569843656348187}}, {"docstring": "The sequence `dense_seq \u03b1` has dense range.\n", "keywords": {"dense range": 0.03378800767844735, "sequence": 0.11718348279991213, "seq": 0.11718348279991213, "range": 0.11718348279991213, "dense": 0.13945519496053638}}, {"docstring": "The minimal distance to a set (as `\u211d\u22650`) is Lipschitz in point with constant 1\n", "keywords": {"Lipschitz in point": 0.04498862876540802, "point with constant": 0.04940384002065631, "minimal distance": 0.09700399286574239, "Lipschitz": 0.1447773057422032, "set": 0.15831692877998726, "constant": 0.15831692877998726, "minimal": 0.29736558256021506, "distance": 0.29736558256021506, "point": 0.29736558256021506}}, {"docstring": "M\u00f6bius inversion for functions to a `ring`.\n", "keywords": {"ring": 0.04491197687864554, "M\u00f6bius inversion": 0.04940384002065631, "inversion for functions": 0.09700399286574239, "M\u00f6bius": 0.15831692877998726, "inversion": 0.29736558256021506, "functions": 0.29736558256021506}}, {"docstring": "The projection on the base of a topological vector bundle created from core is an open map\n", "keywords": {"topological vector bundle": 0.0042542192213185686, "vector bundle created": 0.0042542192213185686, "open map": 0.015380821171891606, "topological vector": 0.02570861714399338, "vector bundle": 0.02570861714399338, "bundle created": 0.02570861714399338, "created from core": 0.02570861714399338, "map": 0.09568045026443411, "projection": 0.15831692877998726, "base": 0.15831692877998726, "topological": 0.15831692877998726, "vector": 0.15831692877998726, "bundle": 0.15831692877998726, "created": 0.15831692877998726, "core": 0.15831692877998726, "open": 0.15831692877998726}}, {"docstring": " An element is `M`-regular if and only if multiplying it on the left by an `M`-regular element is `M`-regular.\n", "keywords": {"regular element": 0.02659013639849783, "regular": 0.04938133369304184, "element": 0.08741972024424244, "multiplying": 0.15842879763921927, "left": 0.15842879763921927}}, {"docstring": " A product of a function `f : fin (n + 1) \u2192 \u03b2` over all `fin (n + 1)` is the product of `f 0` plus the remaining product\n", "keywords": {"fin": 0.025153267469130616, "remaining product": 0.03503750209753988, "product": 0.07122323080586154, "function": 0.10752717485860083, "remaining": 0.15842879763921927}}, {"docstring": " The set of differentiability points of a function taking values in a complete space is Borel-measurable.\n", "keywords": {"space is Borel-measurable": 0.009108237309423345, "set of differentiability": 0.02570861714399338, "differentiability points": 0.02570861714399338, "function taking": 0.02570861714399338, "complete space": 0.02570861714399338, "Borel-measurable": 0.057012387690331526, "set": 0.15831692877998726, "differentiability": 0.15831692877998726, "points": 0.15831692877998726, "function": 0.15831692877998726, "taking": 0.15831692877998726, "complete": 0.15831692877998726, "space": 0.15831692877998726}}, {"docstring": "Balls containing the origin are absorbent.\n", "keywords": {"origin are absorbent": 0.04940384002065631, "Balls": 0.15831692877998726, "absorbent": 0.15831692877998726, "origin": 0.29736558256021506}}, {"docstring": "A space is totally disconnected iff its connected components are subsingletons.\n", "keywords": {"totally disconnected iff": 0.03339840940482845, "components are subsingletons": 0.04940384002065631, "space is totally": 0.09700399286574239, "totally disconnected": 0.09700399286574239, "disconnected iff": 0.09700399286574239, "iff its connected": 0.09700399286574239, "connected components": 0.09700399286574239, "subsingletons": 0.15831692877998726, "space": 0.29736558256021506, "totally": 0.29736558256021506, "disconnected": 0.29736558256021506, "iff": 0.29736558256021506, "connected": 0.29736558256021506, "components": 0.29736558256021506}}, {"docstring": " Any two nonzero left-invariant measures are absolutely continuous w.r.t. each other.\n", "keywords": {"nonzero left-invariant measures": 0.03339840940482845, "absolutely continuous": 0.04940384002065631, "nonzero left-invariant": 0.09700399286574239, "left-invariant measures": 0.09700399286574239, "measures are absolutely": 0.09700399286574239, "continuous": 0.15831692877998726, "nonzero": 0.29736558256021506, "left-invariant": 0.29736558256021506, "measures": 0.29736558256021506, "absolutely": 0.29736558256021506}}, {"docstring": "Multiplying by all the matrices in `list_transvec_col M` does not change the last row.\n", "keywords": {"list": 0.04491197687864554, "transvec": 0.04491197687864554, "Multiplying": 0.09568045026443411, "col": 0.09568045026443411, "row": 0.09568045026443411, "matrices": 0.15831692877998726, "change": 0.15831692877998726}}, {"docstring": "A set `s` is nonempty if the product of some function over `s` is not equal to `1`.\n", "keywords": {"set": 0.09568045026443411, "nonempty": 0.15831692877998726, "product": 0.15831692877998726, "function": 0.15831692877998726, "equal": 0.15831692877998726}}, {"docstring": "See `is_coprime.prod_left` for the corresponding lemma about `is_coprime`\n", "keywords": {"coprime.prod": 0.04491197687864554, "left": 0.04491197687864554, "coprime": 0.04491197687864554, "lemma": 0.15831692877998726}}, {"docstring": "**Non-Denumerability of the Continuum**: The reals are not countable.\n", "keywords": {"Continuum": 0.057012387690331526, "Non-Denumerability": 0.09568045026443411, "countable": 0.09568045026443411, "reals": 0.15831692877998726}}, {"docstring": "`fintype.sum_equiv` is a specialization of `finset.sum_bij` that automatically fills in most arguments.  See `equiv.sum_comp` for a version without `h`.\n", "keywords": {"automatically fills": 0.04188746641162499, "fintype.sum": 0.05899937629682816, "equiv": 0.05899937629682816, "finset.sum": 0.05899937629682816, "bij": 0.05899937629682816, "arguments": 0.12363091320521931, "equiv.sum": 0.17881754828257995, "comp": 0.17881754828257995, "specialization": 0.2005079697193566, "automatically": 0.2005079697193566, "fills": 0.2005079697193566, "version": 0.46553351027698087}}, {"docstring": "A list with product not one must have positive length.\n", "keywords": {"positive length": 0.04940384002065631, "list with product": 0.09700399286574239, "length": 0.15831692877998726, "list": 0.29736558256021506, "product": 0.29736558256021506, "positive": 0.29736558256021506}}, {"docstring": "The angle between a vector and a positive multiple of a vector.\n", "keywords": {"positive multiple": 0.020225813225353943, "vector": 0.07334489383741181, "angle": 0.1408007092310104, "positive": 0.1408007092310104, "multiple": 0.1408007092310104}}, {"docstring": "Elements in distinct slices must be distinct.\n", "keywords": {"distinct slices": 0.05913243875864445, "Elements in distinct": 0.0790262557081126, "Elements": 0.11984314898676356, "distinct": 0.14323823713631006, "slices": 0.19488865479360015}}, {"docstring": " If `B` is an exposed subset of `A`, then `B` is the intersection of `A` with some closed halfspace. The converse is *not* true. It would require that the corresponding open halfspace doesn't intersect `A`.\n", "keywords": {"exposed subset": 0.041491573508937424, "closed halfspace": 0.10087737549413478, "exposed": 0.19959610972506966, "subset": 0.19959610972506966, "intersection": 0.19959610972506966, "closed": 0.19959610972506966, "halfspace": 0.22954760204863206, "true": 0.2376812616513552, "open halfspace": 0.34430078001928477, "intersect": 0.4467687583148886, "converse": 0.4641160561093645, "require": 0.5578774408703905, "open": 0.5578774408703905}}, {"docstring": "A sum of a function over a `finset` in a subtype equals a sum in the main type of a function that agrees with the first function on that `finset`.\n", "keywords": {"equals a sum": 0.010418137275597912, "subtype equals": 0.010762734988585008, "main type": 0.010762734988585008, "finset": 0.023509470704055593, "function": 0.03938489216226218, "function that agrees": 0.044119983574050003, "sum": 0.04995997751473051, "subtype": 0.10318978615207167, "equals": 0.10318978615207167, "main": 0.10318978615207167, "type": 0.10318978615207167, "agrees": 0.10318978615207167}}, {"docstring": "Closure of a subgroup `K` equals `K`.\n", "keywords": {"equals": 0.04491197687864554, "Closure": 0.09568045026443411, "subgroup": 0.09568045026443411}}, {"docstring": "A compact Hausdorff space is totally disconnected if and only if it is totally separated, this  is also true for locally compact spaces.\n", "keywords": {"compact Hausdorff space": 0.0031497625837932568, "locally compact spaces": 0.006214640268202945, "compact Hausdorff": 0.01514043304033153, "Hausdorff space": 0.01514043304033153, "totally separated": 0.015274177083369487, "true for locally": 0.021538791625229155, "totally disconnected": 0.022785677162418617, "locally compact": 0.029581009763283855, "compact spaces": 0.040745828174634596, "space is totally": 0.07226684024551751, "Hausdorff": 0.0753777093251345, "totally": 0.07671213513331894, "separated": 0.09805740926331882, "compact": 0.09893255831095867, "disconnected": 0.14520555658610762, "true": 0.14520555658610762, "locally": 0.14520555658610762, "space": 0.19786511662191733, "spaces": 0.19786511662191733}}, {"docstring": "**Fermat's Theorem**: the derivative of a function at a local maximum equals zero.\n", "keywords": {"Fermat Theorem": 0.0032610119837787367, "local maximum equals": 0.0042542192213185686, "local maximum": 0.02570861714399338, "maximum equals": 0.02570861714399338, "Fermat": 0.057012387690331526, "Theorem": 0.057012387690331526, "derivative": 0.15831692877998726, "function": 0.15831692877998726, "local": 0.15831692877998726, "maximum": 0.15831692877998726, "equals": 0.15831692877998726}}, {"docstring": " The set of right differentiability points of a function taking values in a complete space is Borel-measurable.\n", "keywords": {"space is Borel-measurable": 0.009108237309423345, "differentiability points": 0.02570861714399338, "function taking": 0.02570861714399338, "complete space": 0.02570861714399338, "Borel-measurable": 0.057012387690331526, "set": 0.15831692877998726, "differentiability": 0.15831692877998726, "points": 0.15831692877998726, "function": 0.15831692877998726, "taking": 0.15831692877998726, "complete": 0.15831692877998726, "space": 0.15831692877998726}}, {"docstring": "Comparison test of convergence of `\u211d\u22650`-valued series.\n", "keywords": {"valued series": 0.009239332327148086, "Comparison test": 0.015380821171891606, "test of convergence": 0.02570861714399338, "Comparison": 0.09568045026443411, "valued": 0.09568045026443411, "series": 0.09568045026443411, "test": 0.15831692877998726, "convergence": 0.15831692877998726}}, {"docstring": " Assume that `f` is differentiable inside a convex set `s`, and that its derivative `f'` is differentiable at a point `x`. Then, given two vectors `v` and `w` pointing inside `s`, one has `f'' v w = f'' w v`. Superseded by `convex.second_derivative_within_at_symmetric`, which removes the assumption that `v` and `w` point inside `s`.\n", "keywords": {"convex set": 0.03078552561730425, "differentiable inside": 0.0853241358799185, "differentiable": 0.08792347339974603, "Assume": 0.14865019076923552, "set": 0.14865019076923552, "inside": 0.14902404612199396, "derivative": 0.15196067369316224, "convex": 0.20091519837807004, "pointing inside": 0.203033553707505, "point": 0.21850207399398708, "point inside": 0.24281092743563656, "inside a convex": 0.24317962944002233, "convex.second": 0.3612041498748174, "symmetric": 0.3612041498748174, "vectors": 0.37749610105540116, "pointing": 0.37749610105540116, "removes the assumption": 0.4566577585666246, "Superseded": 0.46907589437396163, "removes": 0.5599079798713792, "assumption": 0.5599079798713792}}, {"docstring": "The derivative (in the analysis sense) of a polynomial `p` is given by `p.derivative`.\n", "keywords": {"analysis sense": 0.015380821171891606, "p.derivative": 0.04491197687864554, "derivative": 0.09568045026443411, "sense": 0.09568045026443411, "polynomial": 0.09568045026443411, "analysis": 0.15831692877998726}}, {"docstring": " Every element is less than its closure. This property is sometimes referred to as extensivity or inflationarity.\n", "keywords": {"closure": 0.12363091320521931, "extensivity or inflationarity": 0.18075564686791562, "element": 0.2005079697193566, "inflationarity": 0.32883716426354986, "property": 0.46553351027698087, "referred": 0.46553351027698087, "extensivity": 0.46553351027698087}}, {"docstring": "\u03b5-\u03b4 characterization of uniform continuity on pseudoemetric spaces\n", "keywords": {"pseudoemetric spaces": 0.04940384002065631, "characterization of uniform": 0.09700399286574239, "uniform continuity": 0.09700399286574239, "continuity on pseudoemetric": 0.09700399286574239, "spaces": 0.15831692877998726, "characterization": 0.29736558256021506, "uniform": 0.29736558256021506, "continuity": 0.29736558256021506, "pseudoemetric": 0.29736558256021506}}, {"docstring": " The value of `weighted_vsub`, where the given points are equal and the sum of the weights is 0.\n", "keywords": {"points are equal": 0.009239332327148086, "weighted": 0.04491197687864554, "vsub": 0.04491197687864554, "points": 0.09568045026443411, "equal": 0.09568045026443411, "sum": 0.09568045026443411, "weights": 0.09568045026443411}}, {"docstring": "`\u03bc` is integral over `\u2124`.\n", "keywords": {"integral": 0.29736558256021506}}, {"docstring": "A continuous function with compact support is bounded below.\n", "keywords": {"continuous function": 0.09700399286574239, "function with compact": 0.09700399286574239, "compact support": 0.09700399286574239, "support is bounded": 0.09700399286574239, "continuous": 0.29736558256021506, "function": 0.29736558256021506, "compact": 0.29736558256021506, "support": 0.29736558256021506, "bounded": 0.29736558256021506}}, {"docstring": "**Alias** of set.inj_on_of_injective`.\n", "keywords": {"Alias": 0.030396371632413578, "injective": 0.04491197687864554, "set.inj": 0.09568045026443411}}, {"docstring": "Transposing a matrix preserves the determinant.\n", "keywords": {"Transposing a matrix": 0.04940384002065631, "preserves the determinant": 0.04940384002065631, "matrix preserves": 0.09700399286574239, "Transposing": 0.15831692877998726, "determinant": 0.15831692877998726, "matrix": 0.29736558256021506, "preserves": 0.29736558256021506}}, {"docstring": "A special case of `f \u2218 id = f`, `f` a localization map.\n", "keywords": {"localization map": 0.00899321792126428, "special case": 0.013527995261974615, "map": 0.0771485953923296, "special": 0.1155310835876123, "case": 0.1155310835876123, "localization": 0.1155310835876123}}, {"docstring": " A separable uniform space with countably generated uniformity filter is second countable: one obtains a countable basis by taking the balls centered at points in a dense subset, and with rational \"radii\" from a countable open symmetric antitone basis of `\ud835\udce4 \u03b1`. We do not register this as an instance, as there is already an instance going in the other direction from second countable spaces to separable spaces, and we want to avoid loops.\n", "keywords": {"countably generated uniformity": 0.005906593077213911, "generated uniformity filter": 0.005906593077213911, "open symmetric antitone": 0.005906593077213911, "symmetric antitone basis": 0.006849928510932005, "countable open symmetric": 0.011332957718380198, "dense subset": 0.023178308252774376, "separable uniform space": 0.02459981759554149, "countably generated": 0.03185269961034904, "generated uniformity": 0.03185269961034904, "uniformity filter": 0.03185269961034904, "taking the balls": 0.03185269961034904, "balls centered": 0.03185269961034904, "centered at points": 0.03185269961034904, "open symmetric": 0.03185269961034904, "symmetric antitone": 0.03185269961034904, "antitone basis": 0.03680857374292372, "separable uniform": 0.058042417614184286, "countable open": 0.0598869648471838, "uniform space": 0.06799592879696284, "countable basis": 0.06949839204960022}}, {"docstring": "The trace of the identity endomorphism is the dimension of the free module\n", "keywords": {"free module": 0.0065920978564317735, "identity endomorphism": 0.009239332327148086, "module": 0.06844581806138879, "trace": 0.09568045026443411, "identity": 0.09568045026443411, "endomorphism": 0.09568045026443411, "dimension": 0.09568045026443411, "free": 0.09568045026443411}}, {"docstring": "See `inv_lt_inv_of_lt` for the implication from right-to-left with one fewer assumption.\n", "keywords": {"inv": 0.02006098734604785, "fewer assumption": 0.022138323509052035, "assumption": 0.11521656054299435, "implication": 0.1879836817695587, "fewer": 0.1879836817695587}}, {"docstring": "Equivalence closure of binary relations is monotone.\n", "keywords": {"Equivalence closure": 0.04940384002065631, "relations is monotone": 0.04940384002065631, "closure of binary": 0.09700399286574239, "binary relations": 0.09700399286574239, "Equivalence": 0.15831692877998726, "monotone": 0.15831692877998726, "closure": 0.29736558256021506, "binary": 0.29736558256021506, "relations": 0.29736558256021506}}, {"docstring": "An auxiliary lemma for manipulating sequence indices.\n", "keywords": {"manipulating sequence indices": 0.016559150827736194, "sequence indices": 0.04940384002065631, "auxiliary lemma": 0.09700399286574239, "lemma for manipulating": 0.09700399286574239, "manipulating sequence": 0.09700399286574239, "indices": 0.15831692877998726, "auxiliary": 0.29736558256021506, "lemma": 0.29736558256021506, "manipulating": 0.29736558256021506, "sequence": 0.29736558256021506}}, {"docstring": " Assumes right covariance. The lemma assuming left covariance is `left.mul_lt_one_of_lt_of_le`.\n", "keywords": {"Assumes": 0.1554527012770092, "Assumes right covariance": 0.15550511668375397, "left.mul": 0.22125774619993788, "covariance": 0.23433876543145388, "assuming left covariance": 0.2741996606407343, "left covariance": 0.33210654690690034, "lemma assuming left": 0.33289593951751206, "lemma assuming": 0.39462694305349416, "assuming left": 0.39462694305349416, "lemma": 0.5319420725534505, "assuming": 0.5319420725534505, "left": 0.5319420725534505}}, {"docstring": "Taking a sum over `s : finset \u03b1` is the same as adding the value on a single element `f a` to the sum over `s.erase a`.\n", "keywords": {"single element": 0.009180130876077285, "Taking a sum": 0.022850380365432927, "sum": 0.05480278044342307, "Taking": 0.08088209179216702, "finset": 0.08088209179216702, "element": 0.08088209179216702, "s.erase": 0.08088209179216702, "adding": 0.11246769819744629, "single": 0.11246769819744629}}, {"docstring": " The sum of two upper semicontinuous functions is upper semicontinuous. Formulated with an explicit continuity assumption on addition, for application to `ereal`. The unprimed version of the lemma uses `[has_continuous_add]`.\n", "keywords": {"upper semicontinuous functions": 0.007327296516767814, "upper semicontinuous": 0.016851204808897166, "semicontinuous functions": 0.03821554584844725, "functions is upper": 0.08667762295794612, "upper": 0.09028232117950413, "semicontinuous": 0.09028232117950413, "explicit continuity assumption": 0.1917383839555026, "sum": 0.2038542769622493, "functions": 0.2038542769622493, "assumption on addition": 0.20587493759307618, "ereal": 0.2425057621221154, "explicit continuity": 0.28461618066910277, "continuity assumption": 0.28461618066910277, "continuous": 0.31807004650910337, "add": 0.31807004650910337, "Formulated": 0.36270881646612724, "addition": 0.36270881646612724, "unprimed version": 0.46742777496856974, "explicit": 0.47069880880967624, "continuity": 0.47069880880967624}}, {"docstring": "`A\u1d40` has orthogonal rows iff `A` has orthogonal columns.\n", "keywords": {"orthogonal rows iff": 0.005138641994537603, "rows iff": 0.022885248721446715, "orthogonal columns": 0.02544278322318597, "orthogonal rows": 0.04212793185246166, "orthogonal": 0.10586606907408062, "iff": 0.11718348279991213, "columns": 0.11718348279991213, "rows": 0.19092478917347616}}, {"docstring": "Alias of `nat.mul_div_mul`\n", "keywords": {"nat.mul": 0.04491197687864554, "div": 0.04491197687864554, "mul": 0.04491197687864554, "Alias": 0.15831692877998726}}, {"docstring": "The p-adic norm of a difference is at most the max of each component. Restates the archimedean property of the p-adic norm.\n", "keywords": {"p-adic norm": 0.023616070449497543, "p-adic": 0.09405718590660436, "component": 0.11840068407252047, "norm": 0.11987888537801202, "Restates the archimedean": 0.14652897286039399, "difference": 0.16205454282434614, "max": 0.16205454282434614, "archimedean property": 0.19252189469129097, "Restates": 0.3180765034308933, "archimedean": 0.40179717860981823, "property": 0.40179717860981823}}, {"docstring": " The `<` order on subspaces is the same as that on the corresponding sets.\n", "keywords": {"order on subspaces": 0.00899321792126428, "order": 0.0771485953923296, "sets": 0.0771485953923296, "subspaces": 0.1155310835876123}}, {"docstring": "If `g, h \u2264 f` and `g i + h i \u2264 f i`, then the product of `f` over `s` is at least the  sum of the products of `g` and `h`. This is the version for `ordered_comm_semiring`.\n", "keywords": {"product": 0.10523229996605092, "products": 0.10523229996605092, "sum": 0.1554527012770092, "ordered": 0.22125774619993788, "comm": 0.22125774619993788, "semiring": 0.22125774619993788, "version": 0.38997397536695666}}, {"docstring": "Any nonempty compact Hausdorff additive semigroup where right-addition is continuous contains an idempotent, i.e. an `m` such that `m + m = m`\n", "keywords": {"nonempty compact Hausdorff": 0.0005320541823066006, "compact Hausdorff additive": 0.0005320541823066006, "Hausdorff additive semigroup": 0.0005320541823066006, "compact Hausdorff": 0.005484890844946624, "Hausdorff additive": 0.005484890844946624, "nonempty compact": 0.009239332327148086, "additive semigroup": 0.009239332327148086, "semigroup where right-addition": 0.009239332327148086, "right-addition is continuous": 0.009239332327148086, "Hausdorff": 0.057012387690331526, "idempotent": 0.06844581806138879, "nonempty": 0.09568045026443411, "compact": 0.09568045026443411, "additive": 0.09568045026443411, "semigroup": 0.09568045026443411, "right-addition": 0.09568045026443411, "continuous": 0.09568045026443411}}, {"docstring": "`complex.re` turns `\u2102` into a trivial topological fiber bundle over `\u211d`.\n", "keywords": {"trivial topological fiber": 0.03339840940482845, "topological fiber bundle": 0.03339840940482845, "complex.re": 0.04491197687864554, "turns": 0.04491197687864554, "trivial topological": 0.09700399286574239, "topological fiber": 0.09700399286574239, "fiber bundle": 0.09700399286574239, "trivial": 0.29736558256021506, "topological": 0.29736558256021506, "fiber": 0.29736558256021506, "bundle": 0.29736558256021506}}, {"docstring": "`complex.im` turns `\u2102` into a trivial topological fiber bundle over `\u211d`.\n", "keywords": {"trivial topological fiber": 0.03339840940482845, "topological fiber bundle": 0.03339840940482845, "complex.im": 0.04491197687864554, "turns": 0.04491197687864554, "trivial topological": 0.09700399286574239, "topological fiber": 0.09700399286574239, "fiber bundle": 0.09700399286574239, "trivial": 0.29736558256021506, "topological": 0.29736558256021506, "fiber": 0.29736558256021506, "bundle": 0.29736558256021506}}, {"docstring": " **Strict inequality case of Rearrangement Inequality**: Pointwise scalar multiplication of `f` and `g`, which monovary together, is strictly decreased by a permutation if and only if `f \u2218 \u03c3` and `g` do not monovary together. Stated by permuting the entries of `f`.\n", "keywords": {"Strict inequality case": 0.0016376672505466826, "Pointwise scalar multiplication": 0.002200769509641363, "Strict inequality": 0.00866958983340238, "Pointwise scalar": 0.011561263824295709, "Rearrangement Inequality": 0.011712586350570936, "case of Rearrangement": 0.015634960653391074, "inequality case": 0.025703411153376713, "scalar multiplication": 0.03447074540170908, "strictly decreased": 0.03447074540170908, "Strict": 0.06261045944724858, "Pointwise": 0.06261045944724858, "inequality": 0.0686392828174212, "Rearrangement": 0.08433210096311344, "monovary": 0.08488187343535045, "Stated by permuting": 0.16944032286186908, "case": 0.18254344008272147, "scalar": 0.18254344008272147, "multiplication": 0.18254344008272147, "strictly": 0.18254344008272147, "decreased": 0.18254344008272147}}, {"docstring": "The map sending a congruence relation to its underlying equivalence relation is injective.\n", "keywords": {"underlying equivalence relation": 0.010130364612108918, "map sending": 0.034987023778306175, "sending a congruence": 0.034987023778306175, "underlying equivalence": 0.034987023778306175, "congruence relation": 0.051351238837580325, "equivalence relation": 0.051351238837580325, "relation is injective": 0.06956410889469503, "injective": 0.11246769819744627, "relation": 0.13282721021560867, "map": 0.18385948854246909, "sending": 0.18385948854246909, "congruence": 0.18385948854246909, "underlying": 0.18385948854246909, "equivalence": 0.18385948854246909}}, {"docstring": "The first projection in a product is a topological fiber bundle.\n", "keywords": {"topological fiber bundle": 0.0025258761156662004, "fiber bundle": 0.015380821171891606, "topological fiber": 0.02570861714399338, "bundle": 0.09568045026443411, "projection": 0.15831692877998726, "product": 0.15831692877998726, "topological": 0.15831692877998726, "fiber": 0.15831692877998726}}, {"docstring": "Split off the constant coefficient.\n", "keywords": {"constant coefficient": 0.04940384002065631, "Split": 0.15831692877998726, "coefficient": 0.15831692877998726, "constant": 0.29736558256021506}}, {"docstring": " If `a` semiconjugates `x` to `y` and `x'` to `y'`, then it semiconjugates `x * x'` to `y * y'`.\n", "keywords": {"semiconjugates": 0.04784022513221706}}, {"docstring": "Split off the constant coefficient.\n", "keywords": {"constant coefficient": 0.04940384002065631, "Split": 0.15831692877998726, "coefficient": 0.15831692877998726, "constant": 0.29736558256021506}}, {"docstring": "Negating the second vector passed to `oangle` does not change twice the angle.\n", "keywords": {"vector passed": 0.02570861714399338, "oangle": 0.04491197687864554, "Negating": 0.09568045026443411, "angle": 0.09568045026443411, "vector": 0.15831692877998726, "passed": 0.15831692877998726, "change": 0.15831692877998726}}, {"docstring": " **Rearrangement Inequality**: Pointwise multiplication of `f` and `g` is maximized when `f` and `g` monovary together. Stated by permuting the entries of `g`.\n", "keywords": {"Rearrangement Inequality": 0.0031146356952437464, "Pointwise multiplication": 0.008334116283452563, "Rearrangement": 0.05572221155747183, "Inequality": 0.05572221155747183, "Pointwise": 0.05572221155747183, "monovary": 0.10028582371075691, "Stated by permuting": 0.11755105063023073, "multiplication": 0.14832923246533666, "maximized": 0.14832923246533666, "permuting the entries": 0.165573765898185, "Stated": 0.2790829227183407, "permuting": 0.37689977775222827, "entries": 0.37689977775222827}}, {"docstring": "Dual of `monotone.covariant_of_const'`\n", "keywords": {"monotone.covariant": 0.04491197687864554, "const": 0.04491197687864554, "Dual": 0.09568045026443411}}, {"docstring": "  To prove something about Laurent polynomials, it suffices to show that * the condition is closed under taking sums, and * it holds for monomials.\n", "keywords": {"Laurent polynomials": 0.008293207122436794, "taking sums": 0.015380821171891606, "holds for monomials": 0.015380821171891606, "suffices to show": 0.02570861714399338, "condition is closed": 0.02570861714399338, "closed under taking": 0.02570861714399338, "Laurent": 0.08596317751626563, "polynomials": 0.09568045026443411, "sums": 0.09568045026443411, "monomials": 0.09568045026443411, "prove": 0.15831692877998726, "suffices": 0.15831692877998726, "show": 0.15831692877998726, "condition": 0.15831692877998726, "closed": 0.15831692877998726, "taking": 0.15831692877998726, "holds": 0.15831692877998726}}, {"docstring": " The inner product of a linear combination of a set of orthonormal vectors with one of those vectors picks out the coefficient of that vector.\n", "keywords": {"linear combination": 0.011791779281441954, "set of orthonormal": 0.011791779281441954, "orthonormal vectors": 0.016514709421906745, "vectors picks": 0.016514709421906745, "vectors": 0.07524595803548341, "product": 0.10795533203491868, "linear": 0.10795533203491868, "combination": 0.10795533203491868, "set": 0.10795533203491868, "orthonormal": 0.10795533203491868, "picks": 0.10795533203491868, "coefficient": 0.10795533203491868, "vector": 0.15049191607096682}}, {"docstring": "If A \u2260 B and C \u2260 B then \u2220ABC = \u03c0 if and only if (dist A C) = (dist A B) + (dist B C).\n", "keywords": {"dist": 0.03189348342147804, "ABC": 0.03874456518394108}}, {"docstring": "A semiring is `nontrivial` provided that there exists a nontrivial module over this semiring.\n", "keywords": {"nontrivial module": 0.06104740651975287, "provided": 0.12156210109285605, "exists a nontrivial": 0.1311351076396852, "semiring": 0.14570071893270706, "nontrivial": 0.14570071893270706, "exists": 0.19744254481508877, "module": 0.19744254481508877}}, {"docstring": "Pointwise maximum of two monotone functions is a monotone function.\n", "keywords": {"Pointwise maximum": 0.02541909697430123, "monotone functions": 0.054400398012637276, "monotone": 0.11357121248292479, "Pointwise": 0.12363091320521931, "maximum": 0.2005079697193566, "functions": 0.22714242496584958, "function": 0.22714242496584958}}, {"docstring": " The left inverse and the right inverse of a formal multilinear series coincide. This is not at all obvious from their definition, but it follows from uniqueness of inverses (which comes from the fact that composition is associative on formal multilinear series).\n", "keywords": {"multilinear series coincide": 0.012649445963353151, "formal multilinear series": 0.014852777005374662, "formal multilinear": 0.04087065283242185, "multilinear series": 0.04087065283242185, "series coincide": 0.0476342895710066, "left inverse": 0.10456479539883251, "multilinear": 0.12045518846316168, "coincide": 0.14495971875370603, "formal": 0.15683126821370602, "series": 0.15683126821370602, "left": 0.2094232239987773, "inverse": 0.22601614225535574, "fact that composition": 0.2980336695353479, "composition is associative": 0.2980336695353479, "associative on formal": 0.3360010633498761, "definition": 0.3705973430198703, "inverses": 0.4520322845107115, "obvious": 0.4791700732234672, "uniqueness": 0.4791700732234672, "fact": 0.4791700732234672}}, {"docstring": " **The Schr\u00f6der-Bernstein Theorem**: Given injections `\u03b1 \u2192 \u03b2` and `\u03b2 \u2192 \u03b1`, we can get a bijection `\u03b1 \u2192 \u03b2`.\n", "keywords": {"Schr\u00f6der-Bernstein Theorem": 0.005548741293751374, "Theorem": 0.04776309965539685, "injections": 0.0771485953923296, "bijection": 0.0771485953923296, "Schr\u00f6der-Bernstein": 0.1155310835876123}}, {"docstring": " Assumes right covariance. The lemma assuming left covariance is `left.mul_le_one`.\n", "keywords": {"Assumes": 0.1554527012770092, "Assumes right covariance": 0.15550511668375397, "left.mul": 0.22125774619993788, "covariance": 0.23433876543145388, "assuming left covariance": 0.2741996606407343, "left covariance": 0.33210654690690034, "lemma assuming left": 0.33289593951751206, "lemma assuming": 0.39462694305349416, "assuming left": 0.39462694305349416, "lemma": 0.5319420725534505, "assuming": 0.5319420725534505, "left": 0.5319420725534505}}, {"docstring": "If `x * y = a * \u220f i in s, p i` where `p i` is always prime, then  `x` and `y` can both be written as a divisor of `a` multiplied by  a product over a subset of `s`\n", "keywords": {"prime": 0.06341998722529081, "multiplied": 0.06341998722529081, "written": 0.08438900089923473, "divisor": 0.08438900089923473, "product": 0.08438900089923473, "subset": 0.08438900089923473}}, {"docstring": "The multiplicity of `p` in `choose n k` is the number of carries when `k` and `n - k`  are added in base `p`. The set is expressed by filtering `Ico 1 b` where `b`  is any bound greater than `log p n`.\n", "keywords": {"added in base": 0.015099935621315529, "number of carries": 0.02249651976012989, "choose": 0.10028582371075691, "base": 0.10028582371075691, "Ico": 0.11555589791117535, "expressed by filtering": 0.11755105063023073, "multiplicity": 0.14832923246533666, "number": 0.14832923246533666, "carries": 0.14832923246533666, "added": 0.14832923246533666, "set is expressed": 0.165573765898185, "bound greater": 0.165573765898185, "filtering": 0.2790829227183407, "log": 0.2790829227183407, "set": 0.37689977775222827, "expressed": 0.37689977775222827, "bound": 0.37689977775222827, "greater": 0.37689977775222827}}, {"docstring": "A subsemigroup `S` includes `closure s` if and only if it includes `s`.\n", "keywords": {"includes": 0.055127829619426576, "subsemigroup": 0.09713402394201612, "closure": 0.09713402394201612}}, {"docstring": "If we can partition a product into subsets that cancel out, then the whole product cancels.\n", "keywords": {"product cancels": 0.09700399286574239, "partition a product": 0.13561210463159817, "product into subsets": 0.13561210463159817, "subsets that cancel": 0.13561210463159817, "product": 0.14868279128010753, "partition": 0.2005079697193566, "subsets": 0.2005079697193566, "cancel": 0.29736558256021506, "cancels": 0.29736558256021506}}, {"docstring": "If x \u2208 \u03b1 is in 2 equivalence classes, the equivalence classes are equal.\n", "keywords": {"equivalence classes": 0.02869121375584504, "classes are equal": 0.06929168190914524, "equivalence": 0.11647786950765905, "classes": 0.11647786950765905, "equal": 0.12600799873373572}}, {"docstring": "Transport through trivial families is the identity.\n", "keywords": {"Transport through trivial": 0.04940384002065631, "trivial families": 0.09700399286574239, "Transport": 0.15831692877998726, "identity": 0.15831692877998726, "trivial": 0.29736558256021506, "families": 0.29736558256021506}}, {"docstring": " Predicate asserting that word `w\u2081` can be reduced to `w\u2082` in one step, i.e. there are words `w\u2083 w\u2084` and letter `x` such that `w\u2081 = w\u2083xx\u207b\u00b9w\u2084` and `w\u2082 = w\u2083w\u2084`\n", "keywords": {"Predicate asserting": 0.004920033746659936, "asserting that word": 0.011315778095806202, "word": 0.05562484662109336, "words": 0.05562484662109336, "Predicate": 0.06453230143013883, "step": 0.06453230143013883, "letter": 0.06453230143013883, "asserting": 0.07586813767572746, "reduced": 0.07586813767572746}}, {"docstring": "The quadratic character is `1` or `-1` on nonzero arguments.\n", "keywords": {"nonzero arguments": 0.015380821171891606, "quadratic character": 0.02570861714399338, "arguments": 0.09568045026443411, "quadratic": 0.15831692877998726, "character": 0.15831692877998726, "nonzero": 0.15831692877998726}}, {"docstring": "  An element is left-regular if and only if multiplying it on the left by a left-regular element is left-regular.\n", "keywords": {"element is left-regular": 0.03676975635314496, "left-regular element": 0.04306770081293647, "left-regular": 0.07871881127264589, "element": 0.08741972024424244, "multiplying": 0.15842879763921927, "left": 0.15842879763921927}}, {"docstring": "**Alias** of the reverse direction of le_inv_mul_iff_mul_le`.\n", "keywords": {"mul": 0.019648131954263418, "Alias": 0.034278050535979626, "reverse direction": 0.035715520099333646, "inv": 0.05393656033701752, "iff": 0.05393656033701752, "reverse": 0.18569843656348187, "direction": 0.18569843656348187}}, {"docstring": " **B\u00e9zout's lemma**: given `x y : \u2115`, `gcd x y = x * a + y * b`, where `a = gcd_a x y` and `b = gcd_b x y` are computed by the extended Euclidean algorithm.\n", "keywords": {"extended Euclidean algorithm": 0.0005492817278053961, "B\u00e9zout lemma": 0.003957008404789455, "Euclidean algorithm": 0.0049567276221893245, "extended Euclidean": 0.006561650929019524, "gcd": 0.029165670241783306, "B\u00e9zout": 0.04770196124481468, "Euclidean": 0.05969419102023405, "lemma": 0.08262578939564287, "algorithm": 0.08262578939564287, "computed": 0.1092045344216192, "extended": 0.1092045344216192}}, {"docstring": " **Gram-Schmidt Orthogonalisation**: `gram_schmidt` produces an orthogonal system of vectors.\n", "keywords": {"Gram-Schmidt Orthogonalisation": 0.013797198203993007, "gram": 0.04491197687864554, "schmidt": 0.04491197687864554, "produces an orthogonal": 0.04940384002065631, "system of vectors": 0.04940384002065631, "Orthogonalisation": 0.08596317751626563, "orthogonal system": 0.09700399286574239, "Gram-Schmidt": 0.15831692877998726, "produces": 0.15831692877998726, "vectors": 0.15831692877998726, "orthogonal": 0.29736558256021506, "system": 0.29736558256021506}}, {"docstring": "`vector_span` is monotone.\n", "keywords": {"vector": 0.04491197687864554, "span": 0.04491197687864554, "monotone": 0.15831692877998726}}, {"docstring": "if `-a \u2264 b` then `-b \u2264 a` on `ereal`.\n", "keywords": {"ereal": 0.04491197687864554}}, {"docstring": "In a sequential space, a set is closed iff it's sequentially closed.\n", "keywords": {"sequential space": 0.021567786782198985, "iff it sequentially": 0.035715520099333646, "closed iff": 0.05259515133015473, "sequentially closed": 0.05259515133015473, "space": 0.11369206228658875, "set is closed": 0.11487806119690562, "closed": 0.13453835116331675, "sequential": 0.18569843656348187, "set": 0.18569843656348187, "iff": 0.18569843656348187, "sequentially": 0.18569843656348187}}, {"docstring": " Converse to the mean value inequality: if `f` is differentiable at `x\u2080` and `C`-lipschitz on a neighborhood of `x\u2080` then it its derivative at `x\u2080` has norm bounded by `C`.\n", "keywords": {"norm bounded": 0.013527995261974615, "Converse": 0.0771485953923296, "inequality": 0.0771485953923296, "lipschitz": 0.0771485953923296, "differentiable": 0.1155310835876123, "neighborhood": 0.1155310835876123, "derivative": 0.1155310835876123, "norm": 0.1155310835876123, "bounded": 0.1155310835876123}}, {"docstring": "Sophie Germain's identity, see <https://www.cut-the-knot.org/blue/SophieGermainIdentity.shtml>.\n", "keywords": {"Sophie Germain identity": 0.003875396501262652, "Sophie Germain": 0.023458380875189744, "Germain identity": 0.023458380875189744, "Germain": 0.1447773057422032, "Sophie": 0.15831692877998726, "identity": 0.15831692877998726}}, {"docstring": "Product of elements of a subfield indexed by a `finset` is in the subfield.\n", "keywords": {"Product of elements": 0.022138323509052035, "subfield indexed": 0.05417025203414716, "finset": 0.054709255964732355, "Product": 0.11521656054299435, "subfield": 0.13667842094541144, "elements": 0.1879836817695587, "indexed": 0.1879836817695587}}, {"docstring": "Assumes left covariance.\n", "keywords": {"Assumes left covariance": 0.008321268142839145, "Assumes left": 0.04940384002065631, "left covariance": 0.04940384002065631, "Assumes": 0.15831692877998726, "covariance": 0.15831692877998726, "left": 0.29736558256021506}}, {"docstring": "The fundamental property of the adjoint.\n", "keywords": {"fundamental property": 0.02570861714399338, "adjoint": 0.09568045026443411, "fundamental": 0.15831692877998726, "property": 0.15831692877998726}}, {"docstring": "For rewriting in the reverse direction, see `fin.cast_nat_add_right`.\n", "keywords": {"fin.cast": 0.04491197687864554, "nat": 0.04491197687864554, "add": 0.04491197687864554, "reverse direction": 0.04940384002065631, "direction": 0.15831692877998726, "rewriting": 0.29736558256021506, "reverse": 0.29736558256021506}}, {"docstring": "A sequential limit of measurable `\u211d\u22650` valued functions is measurable.\n", "keywords": {"valued functions": 0.022138323509052035, "sequential limit": 0.03663237450220032, "limit of measurable": 0.06460392234869006, "functions is measurable": 0.06460392234869006, "measurable": 0.07162298286637953, "valued": 0.11521656054299435, "sequential": 0.1879836817695587, "limit": 0.1879836817695587, "functions": 0.1879836817695587}}, {"docstring": "The definition of `x \u29cf 0` on pre-games, in terms of `\u2264 0`.\n", "keywords": {"pre-games": 0.09568045026443411, "definition": 0.15831692877998726, "terms": 0.15831692877998726}}, {"docstring": "**Alias** of the reverse direction of asymptotics.is_O_neg_left`.\n", "keywords": {"direction of asymptotics.is": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "neg": 0.04491197687864554, "left": 0.04491197687864554, "asymptotics.is": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "**Alias** of the reverse direction of antitone_comp_of_dual_iff`.\n", "keywords": {"direction of antitone": 0.00899321792126428, "reverse direction": 0.013527995261974615, "Alias": 0.030396371632413578, "comp": 0.04491197687864554, "dual": 0.04491197687864554, "iff": 0.04491197687864554, "antitone": 0.0771485953923296, "reverse": 0.1155310835876123, "direction": 0.1155310835876123}}, {"docstring": " Two affine subspaces with nonempty intersection are equal if and only if their directions are equal.\n", "keywords": {"affine subspaces": 0.035715520099333646, "subspaces with nonempty": 0.035715520099333646, "nonempty intersection": 0.035715520099333646, "intersection are equal": 0.039293477084795844, "directions are equal": 0.039293477084795844, "equal": 0.10179911835611566, "affine": 0.18569843656348187, "subspaces": 0.18569843656348187, "nonempty": 0.18569843656348187, "intersection": 0.18569843656348187, "directions": 0.18569843656348187}}, {"docstring": " Euclid's lemma: if `a \u2223 b * c` and `a` and `b` have no common prime factors, `a \u2223 c`. Compare `is_coprime.dvd_of_dvd_mul_right`.\n", "keywords": {"common prime factors": 0.0023160866321010193, "Euclid lemma": 0.010159422250580143, "prime factors": 0.015099935621315529, "common prime": 0.02249651976012989, "Euclid": 0.10028582371075691, "lemma": 0.10028582371075691, "factors": 0.10028582371075691, "common": 0.14832923246533666, "prime": 0.14832923246533666, "Compare": 0.17881754828257995, "coprime.dvd": 0.17881754828257995, "dvd": 0.17881754828257995, "mul": 0.17881754828257995}}, {"docstring": "A set is dense if and only if it has a nonempty intersection with each nonempty open set.\n", "keywords": {"nonempty open set": 0.020113802469063535, "nonempty intersection": 0.06104740651975287, "nonempty open": 0.06104740651975287, "open set": 0.06104740651975287, "set is dense": 0.1311351076396852, "set": 0.14570071893270706, "nonempty": 0.14570071893270706, "dense": 0.19744254481508877, "intersection": 0.19744254481508877, "open": 0.19744254481508877}}, {"docstring": "Formula for orthogonal projection onto a single unit vector.\n", "keywords": {"single unit vector": 0.016559150827736194, "Formula for orthogonal": 0.04940384002065631, "unit vector": 0.04940384002065631, "orthogonal projection": 0.09700399286574239, "single unit": 0.09700399286574239, "Formula": 0.15831692877998726, "vector": 0.15831692877998726, "orthogonal": 0.29736558256021506, "projection": 0.29736558256021506, "single": 0.29736558256021506, "unit": 0.29736558256021506}}, {"docstring": "Assumes left covariance.\n", "keywords": {"Assumes left covariance": 0.008321268142839145, "Assumes left": 0.04940384002065631, "left covariance": 0.04940384002065631, "Assumes": 0.15831692877998726, "covariance": 0.15831692877998726, "left": 0.29736558256021506}}, {"docstring": "A more general version of `finsum_mem_add_diff` that requires `t \u2229 support f` rather than `t` to be finite.\n", "keywords": {"general version": 0.02570861714399338, "finsum": 0.04491197687864554, "mem": 0.04491197687864554, "add": 0.04491197687864554, "diff": 0.04491197687864554, "requires": 0.09568045026443411, "support": 0.09568045026443411, "finite": 0.09568045026443411, "general": 0.15831692877998726, "version": 0.15831692877998726}}, {"docstring": "As `0` is the default value for `real.Inf` of the empty set or sets which are not bounded below, it suffices to show that `S` is bounded above by `0` to show that `Inf S \u2264 0`.\n", "keywords": {"suffices to show": 0.016499633164586736, "empty set": 0.029581009763283855, "show": 0.05589253802182822, "real.Inf": 0.05762960968289995, "bounded": 0.09893255831095867, "set or sets": 0.14324865740468262, "default": 0.14520555658610762, "empty": 0.14520555658610762, "suffices": 0.14520555658610762, "set": 0.19786511662191733, "sets": 0.19786511662191733}}, {"docstring": "Composition by an surjective function on the left is itself surjective.\n", "keywords": {"surjective function": 0.0562460611896591, "Composition": 0.11718348279991213, "surjective": 0.13945519496053638, "function": 0.19092478917347616, "left": 0.19092478917347616}}, {"docstring": "**Alias** of the reverse direction of has_deriv_within_at_Ioi_iff_Ici`.\n", "keywords": {"reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "Ioi": 0.030396371632413578, "Ici": 0.030396371632413578, "deriv": 0.04491197687864554, "iff": 0.04491197687864554, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "The empty set is cospherical.\n", "keywords": {"set is cospherical": 0.04940384002065631, "empty set": 0.09700399286574239, "cospherical": 0.15831692877998726, "empty": 0.29736558256021506, "set": 0.29736558256021506}}, {"docstring": "If two half-open intervals are disjoint and the endpoint of one lies in the other,  then it must be equal to the endpoint of the other.\n", "keywords": {"half-open intervals": 0.013095151449018445, "intervals are disjoint": 0.013095151449018445, "endpoint": 0.04213844269123149, "half-open": 0.11369206228658875, "intervals": 0.11369206228658875, "disjoint": 0.11369206228658875, "lies": 0.11369206228658875, "equal": 0.11369206228658875}}, {"docstring": "The ideal spanned by the variable in the power series ring over an integral domain is a prime ideal.\n", "keywords": {"power series ring": 0.002477776488322723, "power series": 0.018034246898548233, "series ring": 0.018034246898548233, "integral domain": 0.018034246898548233, "ideal spanned": 0.023937535241430174, "prime ideal": 0.023937535241430174, "ideal": 0.08782297807514622, "spanned": 0.13309686053898662, "variable": 0.13309686053898662, "power": 0.13309686053898662, "series": 0.13309686053898662, "ring": 0.13309686053898662, "integral": 0.13309686053898662, "domain": 0.13309686053898662, "prime": 0.13309686053898662}}, {"docstring": " **The Jordan decomposition theorem**: Given a signed measure `s`, there exists a pair of mutually singular measures `\u03bc` and `\u03bd` such that `s = \u03bc - \u03bd`. In this case, the measures `\u03bc` and `\u03bd` are given by `s.to_jordan_decomposition.pos_part` and `s.to_jordan_decomposition.neg_part` respectively.  Note that we use `measure_theory.jordan_decomposition.to_signed_measure` to represent the signed measure corresponding to `s.to_jordan_decomposition.pos_part - s.to_jordan_decomposition.neg_part`.\n", "keywords": {"Jordan decomposition theorem": 0.01822830363864709, "mutually singular measures": 0.028365286247618898, "decomposition theorem": 0.038933346695850614, "s.to": 0.046916306317784366, "part": 0.046916306317784366, "exists a pair": 0.04873805701405036, "pair of mutually": 0.04873805701405036, "mutually singular": 0.04873805701405036, "Jordan": 0.08121572830002335, "Jordan decomposition": 0.09593946819726272, "singular measures": 0.11606695731846471, "signed measure": 0.1200669161760899, "measure": 0.12060290421143083, "decomposition.pos": 0.12559807668020576, "decomposition.neg": 0.12559807668020576, "signed": 0.1337968177058216, "theorem": 0.173833493938187, "decomposition": 0.2155760905431473, "exists": 0.2155760905431473, "pair": 0.2155760905431473}}, {"docstring": " Multiplying by all the matrices in `list_transvec_col M` kills all the coefficients in the last column but the last one.\n", "keywords": {"list": 0.04491197687864554, "transvec": 0.04491197687864554, "Multiplying": 0.06844581806138879, "col": 0.06844581806138879, "kills": 0.06844581806138879, "matrices": 0.09568045026443411, "coefficients": 0.09568045026443411, "column": 0.09568045026443411}}, {"docstring": "If a prime `p` has positive multiplicity in the `n`th central binomial coefficient, `p` is no more than `2 * n`\n", "keywords": {"central binomial coefficient": 0.0025258761156662004, "binomial coefficient": 0.015380821171891606, "positive multiplicity": 0.02570861714399338, "central binomial": 0.02570861714399338, "prime": 0.09568045026443411, "coefficient": 0.09568045026443411, "positive": 0.15831692877998726, "multiplicity": 0.15831692877998726, "central": 0.15831692877998726, "binomial": 0.15831692877998726}}, {"docstring": "`a` semiconjugates `x` to `a * x * a\u207b\u00b9`.\n", "keywords": {"semiconjugates": 0.04491197687864554}}, {"docstring": " If a function is differentiable on the left of a point `a : \u211d`, continuous at `a`, and its derivative also converges at `a`, then `f` is differentiable on the left at `a`.\n", "keywords": {"function is differentiable": 0.0069673039269287544, "derivative also converges": 0.009289663998698364, "differentiable": 0.03606013103477163, "left": 0.04478074116273408, "point": 0.07514239047826181, "continuous": 0.07514239047826181, "function": 0.09593831581184391, "derivative": 0.09593831581184391, "converges": 0.09593831581184391}}, {"docstring": "  Suppose that `Q` is a statement about Laurent polynomials such that * `Q` is true on *ordinary* polynomials; * `Q (f * T)` implies `Q f`; it follow that `Q` is true on all Laurent polynomials.\n", "keywords": {"Laurent polynomials": 0.0037798431574785425, "statement about Laurent": 0.01748347297280484, "Laurent": 0.02982023060547905, "polynomials": 0.04193443003502609, "true": 0.04408848829399607, "ordinary": 0.060788587812935495, "implies": 0.060788587812935495, "Suppose": 0.08525524620171859, "statement": 0.1125760278679013, "follow": 0.1125760278679013}}, {"docstring": "The `average_map` acts as the identity on the subspace of invariants.\n", "keywords": {"subspace of invariants": 0.00899321792126428, "average": 0.04491197687864554, "map": 0.04491197687864554, "acts": 0.0771485953923296, "invariants": 0.0771485953923296, "identity": 0.1155310835876123, "subspace": 0.1155310835876123}}, {"docstring": "A subgroup is finitely generated if and only if it is finitely generated as a submonoid.\n", "keywords": {"finitely generated": 0.018650942614307144, "subgroup is finitely": 0.03278451112147437, "finitely": 0.07915846438999363, "generated": 0.11357121248292479, "submonoid": 0.12363091320521931, "subgroup": 0.2005079697193566}}, {"docstring": " Compute the total derivative of `f \u22c6 g` if `g` is `C^1` with compact support and `f` is locally integrable. To write down the total derivative as a convolution, we use `continuous_linear_map.precompR`.\n", "keywords": {"locally integrable": 0.03985444220279051, "Compute the total": 0.04578481493098436, "total derivative": 0.05990003813339116, "compact support": 0.0647213843491835, "total": 0.1408156300904874, "Compute": 0.1554527012770092, "integrable": 0.1554527012770092, "derivative": 0.189935326503586, "continuous": 0.22125774619993788, "linear": 0.22125774619993788, "map.precompR": 0.22125774619993788, "compact": 0.246550513069643, "support": 0.246550513069643, "locally": 0.246550513069643, "convolution": 0.38997397536695666, "write": 0.5319420725534505}}, {"docstring": "A face is a subset of another one iff its vertices are.\n", "keywords": {"iff its vertices": 0.02570861714399338, "face": 0.15831692877998726, "subset": 0.15831692877998726, "iff": 0.15831692877998726, "vertices": 0.15831692877998726}}, {"docstring": " **Intermediate value theorem**: if `f` is continuous on an order-connected set `s` and `a`, `b` are two points of this set, then `f` sends `s` to a superset of `Icc (f x) (f y)`.\n", "keywords": {"Intermediate value theorem": 0.003784433228246229, "order-connected set": 0.009032005146396332, "Icc": 0.033641197513274955, "set": 0.04046434749914615, "Intermediate": 0.04742583229733244, "sends": 0.052376395424323874, "theorem": 0.07949602794131501, "continuous": 0.11060549338282699, "order-connected": 0.11060549338282699, "points": 0.11060549338282699, "superset": 0.11060549338282699}}, {"docstring": "A version of `num_div_dvd` with the LHS in simp normal form\n", "keywords": {"simp normal form": 0.016559150827736194, "num": 0.04491197687864554, "div": 0.04491197687864554, "dvd": 0.04491197687864554, "LHS in simp": 0.04498862876540802, "normal form": 0.04940384002065631, "simp normal": 0.09700399286574239, "LHS": 0.1447773057422032, "form": 0.15831692877998726, "version": 0.29736558256021506, "simp": 0.29736558256021506, "normal": 0.29736558256021506}}, {"docstring": " A family is affinely independent if and only if any affine combinations (with sum of weights 1) that evaluate to the same point have equal `set.indicator`.\n", "keywords": {"affine combinations": 0.015380821171891606, "sum of weights": 0.015380821171891606, "point have equal": 0.015380821171891606, "family is affinely": 0.02570861714399338, "affinely independent": 0.02570861714399338, "set.indicator": 0.04491197687864554, "combinations": 0.09568045026443411, "weights": 0.09568045026443411, "equal": 0.09568045026443411, "family": 0.15831692877998726, "affinely": 0.15831692877998726, "independent": 0.15831692877998726, "affine": 0.15831692877998726, "sum": 0.15831692877998726, "evaluate": 0.15831692877998726, "point": 0.15831692877998726}}, {"docstring": "Rotating the first vector by `\u03b8` subtracts `\u03b8` from the angle between two vectors.\n", "keywords": {"subtracts": 0.055708263664958506, "Rotating": 0.11718348279991213, "angle": 0.19092478917347616, "vector": 0.27891038992107275, "vectors": 0.27891038992107275}}, {"docstring": "Constants are `C^\u221e`.\n", "keywords": {"Constants": 0.15831692877998726}}, {"docstring": " The `0`-th coefficient of `q.comp p` is `q 0`. When `p` goes from `E` to `E`, this can be expressed as a direct equality\n", "keywords": {"q.comp": 0.12363091320521931, "direct equality": 0.18075564686791562, "coefficient": 0.2005079697193566, "equality": 0.32883716426354986, "expressed": 0.46553351027698087, "direct": 0.46553351027698087}}, {"docstring": " If `\u03b1` has no zero divisors, then the product of two elements is nonzero iff both of them are nonzero.\n", "keywords": {"nonzero iff": 0.05417025203414716, "divisors": 0.11521656054299435, "elements is nonzero": 0.11793310824193863, "nonzero": 0.13667842094541144, "product": 0.1879836817695587, "elements": 0.1879836817695587, "iff": 0.1879836817695587}}, {"docstring": " `if ... then ... else` characterization of a set of vectors being orthonormal.  (Inner product equals Kronecker delta.)\n", "keywords": {"Kronecker delta": 0.2722623505437095, "equals Kronecker delta": 0.303467823270413, "equals Kronecker": 0.3737565631155434, "vectors being orthonormal": 0.38599679376725615, "Kronecker": 0.4178540393604482, "product equals Kronecker": 0.45867854281053455, "characterization": 0.4613789858464135, "orthonormal": 0.4613789858464135, "delta": 0.5121371841744414, "set of vectors": 0.5732105463588063, "set": 0.6036200563782421, "vectors": 0.6036200563782421, "product": 0.6511101154454433, "equals": 0.6511101154454433, "product equals": 0.7359434914074432}}, {"docstring": "An induction principle for additive closure membership. If `p` holds for all elements of `s`, and is preserved under addition, then `p` holds for all elements of the additive closure of `s`.\n", "keywords": {"additive closure membership": 0.015817853456621213, "induction principle": 0.04372598164085685, "closure membership": 0.04545878333566454, "additive closure": 0.05220691164844203, "holds": 0.13754430191315367, "membership": 0.1414157594010238, "principle for additive": 0.142670717019886, "additive": 0.1537386583321911, "closure": 0.1537386583321911, "elements": 0.18611416151487303, "induction": 0.2046805318390021, "principle": 0.2046805318390021, "preserved under addition": 0.20735178944546265, "addition": 0.3638846520020924, "preserved": 0.4719654628809573}}, {"docstring": " Assumes left covariance. The lemma assuming right covariance is `right.mul_lt_one'`.\n", "keywords": {"Assumes left covariance": 0.022198737363026126, "Assumes left": 0.03985444220279051, "left covariance": 0.13064959758481184, "Assumes": 0.1554527012770092, "right.mul": 0.22125774619993788, "covariance": 0.23433876543145388, "left": 0.246550513069643, "lemma assuming": 0.39462694305349416, "lemma": 0.5319420725534505, "assuming": 0.5319420725534505, "assuming right covariance": 0.5970566294903761}}, {"docstring": "If `\u03bc` has finite spanning sets in the collection of measurable sets `C`, then `\u03bc` is \u03c3-finite.\n", "keywords": {"finite spanning sets": 0.010494743012823167, "finite spanning": 0.035715520099333646, "collection of measurable": 0.035715520099333646, "spanning sets": 0.05259515133015473, "measurable sets": 0.05259515133015473, "\u03c3-finite": 0.11369206228658875, "sets": 0.13453835116331675, "finite": 0.18569843656348187, "spanning": 0.18569843656348187, "collection": 0.18569843656348187, "measurable": 0.18569843656348187}}, {"docstring": " If a finset `u` is contained in the product of two sets `s * t`, we can find two finsets `s'`, `t'` such that `s' \u2286 s`, `t' \u2286 t` and `u \u2286 s' * t'`.\n", "keywords": {"find two finsets": 0.020047210059068708, "finset": 0.0757224611147761, "finsets": 0.0757224611147761, "sets": 0.07692947664055963, "contained": 0.10187934809188742, "product": 0.10187934809188742, "find": 0.10187934809188742}}, {"docstring": " A finite family is affinely independent if and only if any affine combinations (with sum of weights 1) that evaluate to the same point are equal.\n", "keywords": {"affine combinations": 0.015380821171891606, "sum of weights": 0.015380821171891606, "point are equal": 0.015380821171891606, "finite family": 0.02570861714399338, "family is affinely": 0.02570861714399338, "affinely independent": 0.02570861714399338, "combinations": 0.09568045026443411, "weights": 0.09568045026443411, "equal": 0.09568045026443411, "finite": 0.15831692877998726, "family": 0.15831692877998726, "affinely": 0.15831692877998726, "independent": 0.15831692877998726, "affine": 0.15831692877998726, "sum": 0.15831692877998726, "evaluate": 0.15831692877998726, "point": 0.15831692877998726}}, {"docstring": " An induction principle for the free algebra.  If `C` holds for the `algebra_map` of `r : R` into `free_algebra R X`, the `\u03b9` of `x : X`, and is preserved under addition and muliplication, then it holds for all of `free_algebra R X`.\n", "keywords": {"induction principle": 0.039987608670528356, "algebra": 0.09078261719568953, "free": 0.13371448042701112, "free algebra": 0.17050432920894446, "induction": 0.19608692420553006, "principle": 0.19608692420553006, "addition and muliplication": 0.20462945882224165, "holds": 0.22374397791236061, "preserved under addition": 0.2663569142032556, "map": 0.27352208872492384, "muliplication": 0.3703912783296885, "preserved": 0.45862098682071795, "addition": 0.45862098682071795}}, {"docstring": "**Alias** of the forward direction of asymptotics.is_O_with_norm_norm`.\n", "keywords": {"norm": 0.02006098734604785, "direction of asymptotics.is": 0.022138323509052035, "Alias": 0.034588515384495436, "forward direction": 0.03663237450220032, "asymptotics.is": 0.11521656054299435, "forward": 0.1879836817695587, "direction": 0.1879836817695587}}, {"docstring": " A version of `dist_le_range_sum_dist` with each intermediate distance replaced with an upper estimate.\n", "keywords": {"intermediate distance replaced": 0.0064971092056266945, "dist": 0.018830794223096383, "upper estimate": 0.020435055290363522, "intermediate distance": 0.033892441937102495, "distance replaced": 0.033892441937102495, "range": 0.052376395424323874, "sum": 0.052376395424323874, "estimate": 0.11060549338282699, "version": 0.18105634546484617, "intermediate": 0.18105634546484617, "distance": 0.18105634546484617, "replaced": 0.18105634546484617, "upper": 0.18105634546484617}}, {"docstring": "The product of two `C^n` functions at a point is `C^n` at this point.\n", "keywords": {"functions": 0.11984314898676356, "point": 0.14323823713631006, "product": 0.19488865479360015}}, {"docstring": "Suppose `\u03b1` is a nonempty dense linear order without endpoints, and    suppose `lo`, `hi`, are finite subssets with all of `lo` strictly    before `hi`. Then there is an element of `\u03b1` strictly between `lo`    and `hi`.\n", "keywords": {"nonempty dense linear": 0.00738055170099003, "dense linear order": 0.00738055170099003, "order without endpoints": 0.024993407724775964, "nonempty dense": 0.03682288154969329, "dense linear": 0.03682288154969329, "linear order": 0.03682288154969329, "finite subssets": 0.03682288154969329, "Suppose": 0.06494586685403791, "strictly": 0.10882849432940553, "endpoints": 0.129389133019644, "nonempty": 0.1884545376459065, "dense": 0.1884545376459065, "linear": 0.1884545376459065, "order": 0.1884545376459065, "finite": 0.1884545376459065, "subssets": 0.1884545376459065, "element": 0.44644473044219835}}, {"docstring": " Multiplying by all the matrices either in `list_transvec_col M` and `list_transvec_row M` kills all the coefficients in the last row but the last one.\n", "keywords": {"list": 0.021671764809268954, "transvec": 0.021671764809268954, "row": 0.07671213513331894, "Multiplying": 0.08721891946868728, "col": 0.08721891946868728, "kills": 0.08721891946868728, "matrices": 0.12095349351053106, "coefficients": 0.12095349351053106}}, {"docstring": "A quadratic has roots if its discriminant has square roots\n", "keywords": {"discriminant has square": 0.037831312533597124, "square roots": 0.0562460611896591, "quadratic has roots": 0.12194096740933036, "roots": 0.13945519496053638, "quadratic": 0.19092478917347616, "discriminant": 0.19092478917347616, "square": 0.19092478917347616}}, {"docstring": "The other direction does not hold because of the `s`-`s` cross terms on the RHS.\n", "keywords": {"cross terms": 0.00899321792126428, "RHS": 0.04776309965539685, "cross": 0.0771485953923296, "direction": 0.1155310835876123, "hold": 0.1155310835876123, "terms": 0.1155310835876123}}, {"docstring": "The product of `f i` over `i \u2208 {a, b}`, `a \u2260 b`, is equal to `f a * f b`.\n", "keywords": {"product": 0.1155310835876123, "equal": 0.1155310835876123}}, {"docstring": "Any basis is a maximal linear independent set.\n", "keywords": {"linear independent set": 0.016559150827736194, "maximal linear independent": 0.03339840940482845, "independent set": 0.04940384002065631, "maximal linear": 0.09700399286574239, "linear independent": 0.09700399286574239, "set": 0.15831692877998726, "basis": 0.29736558256021506, "maximal": 0.29736558256021506, "linear": 0.29736558256021506, "independent": 0.29736558256021506}}, {"docstring": "  If an element `b` becomes left-regular after multiplying it on the left by a left-regular element, then `b` is left-regular.\n", "keywords": {"left-regular element": 0.03742484056063079, "element": 0.06413440160927163, "left-regular": 0.09374778572274853, "left-regular after multiplying": 0.1344867430091669, "multiplying": 0.15842879763921927, "left": 0.15842879763921927}}, {"docstring": " If the given subset is `absorbent` then the set we take an infimum over in `gauge` is nonempty, which is useful for proving many properties about the gauge.\n", "keywords": {"proving many properties": 0.018310930906343142, "gauge": 0.04956935957632033, "absorbent": 0.0528063806271324, "nonempty": 0.09017440044927587, "subset": 0.13409574860218185, "set": 0.13409574860218185, "infimum": 0.13409574860218185, "proving": 0.13409574860218185, "properties": 0.13409574860218185}}, {"docstring": "Assumes right covariance.\n", "keywords": {"Assumes right covariance": 0.02570861714399338, "Assumes": 0.15831692877998726, "covariance": 0.15831692877998726}}, {"docstring": "Given a fixed pivot `x : fin (n + 1)`, `x.succ_above` is injective\n", "keywords": {"fin": 0.04491197687864554, "x.succ": 0.04491197687864554, "fixed pivot": 0.04940384002065631, "pivot": 0.15831692877998726, "injective": 0.15831692877998726, "fixed": 0.29736558256021506}}, {"docstring": "The chain rule for derivatives in the sense of strict differentiability.\n", "keywords": {"strict differentiability": 0.015380821171891606, "chain rule": 0.02570861714399338, "rule for derivatives": 0.02570861714399338, "sense of strict": 0.02570861714399338, "differentiability": 0.09568045026443411, "chain": 0.15831692877998726, "rule": 0.15831692877998726, "derivatives": 0.15831692877998726, "sense": 0.15831692877998726, "strict": 0.15831692877998726}}, {"docstring": "An induction principle for closure membership, for predicates with two arguments.\n", "keywords": {"closure membership": 0.015380821171891606, "induction principle": 0.02570861714399338, "principle for closure": 0.02570861714399338, "membership": 0.09568045026443411, "arguments": 0.09568045026443411, "induction": 0.15831692877998726, "principle": 0.15831692877998726, "closure": 0.15831692877998726, "predicates": 0.15831692877998726}}, {"docstring": "**Alias** of the forward direction of has_deriv_within_at_Iio_iff_Iic`.\n", "keywords": {"forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "Iio": 0.030396371632413578, "Iic": 0.030396371632413578, "deriv": 0.04491197687864554, "iff": 0.04491197687864554, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "**Alias** of the reverse direction of asymptotics.is_O_with_norm_right`.\n", "keywords": {"direction of asymptotics.is": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "norm": 0.04491197687864554, "asymptotics.is": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "Over any ring `R`, if `b` is an infinite basis for a module `M`, and `s` is a maximal linearly independent set, then the cardinality of `b` is bounded by the cardinality of `s`.\n", "keywords": {"linearly independent set": 0.0016151890443214874, "maximal linearly independent": 0.0024287169002957616, "independent set": 0.011891118324371971, "infinite basis": 0.017798659388540475, "maximal linearly": 0.017798659388540475, "linearly independent": 0.017798659388540475, "cardinality": 0.048561690547210754, "ring": 0.08886407157392263, "module": 0.08886407157392263, "set": 0.08886407157392263, "infinite": 0.132239959875874, "basis": 0.132239959875874, "maximal": 0.132239959875874, "linearly": 0.132239959875874, "independent": 0.132239959875874, "bounded": 0.132239959875874}}, {"docstring": "A version of `exists_idempotent_of_compact_t2_of_continuous_add_left` where the idempotent lies in some specified nonempty compact additive subsemigroup.\n", "keywords": {"compact additive subsemigroup": 0.0024639796529722516, "nonempty compact additive": 0.0037067937878229157, "additive subsemigroup": 0.012904998963208847, "idempotent lies": 0.025918337545600415, "nonempty compact": 0.025918337545600415, "compact additive": 0.025918337545600415, "exists": 0.05430009520648986, "continuous": 0.05430009520648986, "add": 0.05430009520648986, "left": 0.05430009520648986, "idempotent": 0.09183075782934418, "compact": 0.09183075782934418, "subsemigroup": 0.09262176965879712, "version": 0.13755493784698053, "lies": 0.13755493784698053, "nonempty": 0.13755493784698053, "additive": 0.13755493784698053}}, {"docstring": " If preconnected set in a linear order space is unbounded below and above, then it is the whole space.\n", "keywords": {"linear order space": 0.010494743012823167, "preconnected set": 0.035715520099333646, "linear order": 0.035715520099333646, "order space": 0.05259515133015473, "space is unbounded": 0.11487806119690562, "space": 0.13453835116331675, "preconnected": 0.18569843656348187, "set": 0.18569843656348187, "linear": 0.18569843656348187, "order": 0.18569843656348187, "unbounded": 0.18569843656348187}}, {"docstring": "The minimal distance to a set is Lipschitz in point with constant 1\n", "keywords": {"set is Lipschitz": 0.04498862876540802, "Lipschitz in point": 0.04498862876540802, "point with constant": 0.04940384002065631, "minimal distance": 0.09700399286574239, "Lipschitz": 0.1447773057422032, "constant": 0.15831692877998726, "minimal": 0.29736558256021506, "distance": 0.29736558256021506, "set": 0.29736558256021506, "point": 0.29736558256021506}}, {"docstring": "Finite groups are torsion groups.\n", "keywords": {"Finite groups": 0.035552851931764155, "torsion groups": 0.05913243875864445, "Finite": 0.11984314898676356, "groups are torsion": 0.12748048004056908, "groups": 0.14323823713631006, "torsion": 0.19488865479360015}}, {"docstring": " Given an orthonormal set `v` of vectors in `E`, there exists a maximal orthonormal set containing it.\n", "keywords": {"maximal orthonormal set": 0.011041420469275918, "orthonormal set": 0.02595416362410219, "exists a maximal": 0.040564923574392765, "maximal orthonormal": 0.045872129360315365, "orthonormal": 0.11107071682746067, "set": 0.11107071682746067, "vectors": 0.19744254481508877, "exists": 0.19744254481508877, "maximal": 0.19744254481508877}}, {"docstring": " If a function has a Taylor series at order at least `1`, then the term of order `1` of this series is a derivative of `f`.\n", "keywords": {"Taylor series": 0.014879681247693342, "term of order": 0.06722676226840862, "Taylor": 0.07502681962702384, "series": 0.09770854302279938, "order": 0.09770854302279938, "series at order": 0.14030894128388027, "function": 0.14390902704051098, "term": 0.14390902704051098, "derivative": 0.14390902704051098}}, {"docstring": "The n-ary version of `set.mem_add`.\n", "keywords": {"set.mem": 0.04491197687864554, "add": 0.04491197687864554, "n-ary version": 0.09700399286574239, "n-ary": 0.29736558256021506, "version": 0.29736558256021506}}, {"docstring": "Any infinite type can be endowed a field structure.\n", "keywords": {"field structure": 0.04940384002065631, "infinite type": 0.09700399286574239, "endowed a field": 0.09700399286574239, "structure": 0.15831692877998726, "infinite": 0.29736558256021506, "type": 0.29736558256021506, "endowed": 0.29736558256021506, "field": 0.29736558256021506}}, {"docstring": " **Rearrangement Inequality**: Pointwise multiplication of `f` and `g` is minimized when `f` and `g` antivary together. Stated by permuting the entries of `g`.\n", "keywords": {"Rearrangement Inequality": 0.0031146356952437464, "Pointwise multiplication": 0.008334116283452563, "Rearrangement": 0.05572221155747183, "Inequality": 0.05572221155747183, "Pointwise": 0.05572221155747183, "antivary": 0.10028582371075691, "Stated by permuting": 0.11755105063023073, "multiplication": 0.14832923246533666, "minimized": 0.14832923246533666, "permuting the entries": 0.165573765898185, "Stated": 0.2790829227183407, "permuting": 0.37689977775222827, "entries": 0.37689977775222827}}, {"docstring": "Generalized eigenspaces for exponents at least `finrank K V` are equal to each other.\n", "keywords": {"Generalized eigenspaces": 0.04940384002065631, "eigenspaces for exponents": 0.09700399286574239, "Generalized": 0.15831692877998726, "finrank": 0.15831692877998726, "eigenspaces": 0.29736558256021506, "exponents": 0.29736558256021506, "equal": 0.29736558256021506}}, {"docstring": " Note that while this lemma cannot be easily generalized to a type class, it holds for \u2124 as well. See `int.image_Ico_mod` for the \u2124 version.\n", "keywords": {"type class": 0.02541909697430123, "easily generalized": 0.04188746641162499, "Ico": 0.11555589791117535, "Note": 0.12363091320521931, "class": 0.12363091320521931, "int.image": 0.17881754828257995, "mod": 0.17881754828257995, "lemma": 0.2005079697193566, "easily": 0.2005079697193566, "generalized": 0.2005079697193566, "type": 0.2005079697193566, "holds": 0.2005079697193566, "version": 0.32883716426354986}}, {"docstring": " If a type carries two unital binary operations that distribute over each other, then these operations are equal.  In fact, they give a commutative monoid structure, see `eckmann_hilton.comm_monoid`.\n", "keywords": {"unital binary operations": 0.022619048026866942, "type carries": 0.06293003982763551, "carries two unital": 0.06293003982763551, "unital binary": 0.06293003982763551, "binary operations": 0.08303696244858727, "operations are equal": 0.10940492432583519, "equal": 0.1531727145735673, "operations": 0.1575511279697302, "operations that distribute": 0.17314790275908196, "eckmann": 0.21826204231687923, "hilton.comm": 0.21826204231687923, "type": 0.2433193585127945, "carries": 0.2433193585127945, "unital": 0.2433193585127945, "binary": 0.2433193585127945, "distribute": 0.2433193585127945, "commutative monoid structure": 0.2581301912166428, "monoid": 0.30753389830415107, "monoid structure": 0.3111469262860867, "give a commutative": 0.38571507274593425}}, {"docstring": "**Alias** of left.inv_lt_one_iff`.\n", "keywords": {"Alias": 0.030396371632413578, "iff": 0.04491197687864554, "left.inv": 0.15831692877998726}}, {"docstring": "The pretopology associated to a space is the largest pretopology that    generates the Grothendieck topology associated to the space.\n", "keywords": {"generates the Grothendieck": 0.007826241563360151, "Grothendieck topology": 0.007826241563360151, "largest pretopology": 0.01848231979674799, "pretopology that generates": 0.044740026688133164, "Grothendieck": 0.06479692170400903, "pretopology": 0.07571113878390312, "space": 0.07571113878390312, "largest": 0.11984314898676356, "generates": 0.11984314898676356, "topology": 0.11984314898676356}}, {"docstring": "`(n, m)` is in the transitive closure of a reflexive relation `~` if `i ~ succ i` and  `succ i ~ i` for all `i` between `n` and `m`.\n", "keywords": {"reflexive relation": 0.007899436963316861, "transitive closure": 0.010488263465887495, "succ": 0.028386692508603012, "relation": 0.07692947664055963, "transitive": 0.10187934809188742, "closure": 0.10187934809188742, "reflexive": 0.10187934809188742}}, {"docstring": " A stronger form of **Cramer's rule** that allows us to solve some instances of `A \u2b1d x = b` even if the determinant is not a unit. A sufficient (but still not necessary) condition is that `A.det` divides `b`.\n", "keywords": {"Cramer rule": 0.004546596072368414, "stronger form": 0.01552184797949213, "solve some instances": 0.01552184797949213, "Cramer": 0.050725675042371285, "rule": 0.08922538916412363, "unit": 0.08922538916412363, "A.det": 0.11555589791117535, "stronger": 0.12363091320521931, "form": 0.12363091320521931, "solve": 0.12363091320521931, "instances": 0.12363091320521931, "determinant": 0.12363091320521931, "divides": 0.17881754828257995, "sufficient": 0.25386721785551913, "condition": 0.25386721785551913}}, {"docstring": "Seminorm-balls at the origin are balanced.\n", "keywords": {"origin are balanced": 0.04940384002065631, "Seminorm-balls": 0.15831692877998726, "balanced": 0.15831692877998726, "origin": 0.29736558256021506}}, {"docstring": "The Hausdorff distance between two sets and their closures coincide\n", "keywords": {"Hausdorff distance": 0.04498862876540802, "closures coincide": 0.04940384002065631, "Hausdorff": 0.1447773057422032, "coincide": 0.15831692877998726, "distance": 0.29736558256021506, "sets": 0.29736558256021506, "closures": 0.29736558256021506}}, {"docstring": "**Alias** of the forward direction of asymptotics.is_O_with_neg_left`.\n", "keywords": {"direction of asymptotics.is": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "neg": 0.04491197687864554, "left": 0.04491197687864554, "asymptotics.is": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " **Strict inequality case of the Rearrangement Inequality**: Pointwise scalar multiplication of `f` and `g`, which antivary together, is strictly decreased by a permutation if and only if `f \u2218 \u03c3` and `g` do not antivary together. Stated by permuting the entries of `f`.\n", "keywords": {"Strict inequality case": 0.0016376672505466826, "Pointwise scalar multiplication": 0.002200769509641363, "Strict inequality": 0.00866958983340238, "Pointwise scalar": 0.011561263824295709, "Rearrangement Inequality": 0.011712586350570936, "inequality case": 0.025703411153376713, "scalar multiplication": 0.03447074540170908, "strictly decreased": 0.03447074540170908, "Strict": 0.06261045944724858, "Pointwise": 0.06261045944724858, "inequality": 0.0686392828174212, "Rearrangement": 0.08433210096311344, "antivary": 0.08488187343535045, "Stated by permuting": 0.16944032286186908, "case": 0.18254344008272147, "scalar": 0.18254344008272147, "multiplication": 0.18254344008272147, "strictly": 0.18254344008272147, "decreased": 0.18254344008272147, "permutation": 0.18254344008272147}}, {"docstring": "**Alias** of the reverse direction of antitone_on_comp_of_dual_iff`.\n", "keywords": {"direction of antitone": 0.00899321792126428, "reverse direction": 0.013527995261974615, "Alias": 0.030396371632413578, "comp": 0.04491197687864554, "dual": 0.04491197687864554, "iff": 0.04491197687864554, "antitone": 0.0771485953923296, "reverse": 0.1155310835876123, "direction": 0.1155310835876123}}, {"docstring": "Assumes right covariance. The lemma assuming left covariance is `left.add_pos_of_pos_of_nonneg`.\n", "keywords": {"pos": 0.08105151263492691, "Assumes": 0.16205454282434614, "Assumes right covariance": 0.16594183792672998, "left.add": 0.22989350183706597, "nonneg": 0.22989350183706597, "covariance": 0.2405027004070563, "assuming left covariance": 0.3062531289877704, "left covariance": 0.35460485137785114, "lemma assuming left": 0.37155912399617924, "lemma assuming": 0.42082946769804974, "assuming left": 0.42082946769804974, "lemma": 0.544229518153821, "assuming": 0.544229518153821, "left": 0.544229518153821}}, {"docstring": " If `f i` has a faithful scalar action for a given `i`, then so does `\u03a0 i, f i`. This is not an instance as `i` cannot be inferred.\n", "keywords": {"faithful scalar action": 0.0013559472425194424, "faithful scalar": 0.012122338073675774, "scalar action": 0.012122338073675774, "faithful": 0.10944015281422888, "scalar": 0.10944015281422888, "action": 0.10944015281422888, "inferred": 0.23871522237376758, "instance": 0.29913195375393087}}, {"docstring": " The groupoid of `0`-times continuously differentiable maps is just the groupoid of all local homeomorphisms\n", "keywords": {"times continuously differentiable": 0.004077346538176824, "continuously differentiable maps": 0.006822309199625383, "times continuously": 0.021114872146320036, "local homeomorphisms": 0.021114872146320036, "continuously differentiable": 0.03498702377830618, "differentiable maps": 0.03498702377830618, "groupoid": 0.06925543344827902, "times": 0.11246769819744629, "homeomorphisms": 0.11246769819744629, "continuously": 0.1838594885424691, "differentiable": 0.1838594885424691, "maps": 0.1838594885424691, "local": 0.1838594885424691}}, {"docstring": "A complex number `z` minus its conjugate `conj z` is `2i` times its imaginary part.\n", "keywords": {"minus its conjugate": 0.009239332327148086, "complex number": 0.015380821171891606, "times its imaginary": 0.015380821171891606, "imaginary part": 0.015380821171891606, "number": 0.09568045026443411, "minus": 0.09568045026443411, "conjugate": 0.09568045026443411, "conj": 0.09568045026443411, "times": 0.09568045026443411, "part": 0.09568045026443411, "complex": 0.15831692877998726, "imaginary": 0.15831692877998726}}, {"docstring": " AM-GM inequality: the **geometric mean is less than or equal to the arithmetic mean**, weighted version for real-valued nonnegative functions.\n", "keywords": {"real-valued nonnegative functions": 0.0025258761156662004, "AM-GM inequality": 0.009239332327148086, "weighted version": 0.015380821171891606, "nonnegative functions": 0.015380821171891606, "version for real-valued": 0.02570861714399338, "real-valued nonnegative": 0.02570861714399338, "AM-GM": 0.09568045026443411, "inequality": 0.09568045026443411, "geometric": 0.09568045026443411, "weighted": 0.09568045026443411, "functions": 0.09568045026443411, "equal": 0.15831692877998726, "arithmetic": 0.15831692877998726, "version": 0.15831692877998726, "real-valued": 0.15831692877998726, "nonnegative": 0.15831692877998726}}, {"docstring": " **Equality case of the Rearrangement Inequality**: Pointwise multiplication of `f` and `g`, which antivary together, is unchanged by a permutation if and only if `f \u2218 \u03c3` and `g` antivary together. Stated by permuting the entries of `f`.\n", "keywords": {"Rearrangement Inequality": 0.005072352361797871, "Equality case": 0.01078166215070159, "Pointwise multiplication": 0.01078166215070159, "Equality": 0.06111024253988877, "Inequality": 0.06111024253988877, "Pointwise": 0.06111024253988877, "antivary": 0.08014015496625508, "Rearrangement": 0.08258441204389066, "Stated by permuting": 0.1565870030412261, "case": 0.17454779110930135, "multiplication": 0.17454779110930135, "unchanged": 0.17454779110930135, "permutation": 0.17454779110930135, "permuting the entries": 0.21846569551000553, "Stated": 0.3197366584666406, "permuting": 0.42343326428770406, "entries": 0.42343326428770406}}, {"docstring": "To prove a proposition about `S : finset \u03b1`, it suffices to prove it for the empty `finset`, and to show that if it holds for some `finset \u03b1 \u2286 S`, then it holds for the `finset` obtained by inserting a new element of `S`.\n", "keywords": {"obtained by inserting": 0.012424063379159533, "suffices to prove": 0.01806968579296947, "finset": 0.018476713113284512, "prove a proposition": 0.043887061417913036, "holds": 0.05193112911158055, "prove": 0.06812881026053162, "empty": 0.0942082431658489, "obtained": 0.0942082431658489, "proposition": 0.1302603660532163, "suffices": 0.1302603660532163, "show": 0.1302603660532163, "inserting": 0.1302603660532163, "element": 0.1302603660532163}}, {"docstring": "**Alias** of lt_of_lt_of_eq'`.\n", "keywords": {"Alias": 0.030396371632413578}}, {"docstring": " First technical lemma to control the growth of coefficients of the inverse. Bound the explicit expression for `\u2211_{k<n+1} a\u1d4f Q\u2096` in terms of a sum of powers of the same sum one step before, in a general abstract setup.\n", "keywords": {"technical lemma": 0.016406548337108775, "lemma to control": 0.016406548337108775, "control the growth": 0.016406548337108775, "growth of coefficients": 0.016406548337108775, "general abstract setup": 0.03982929793930291, "inverse": 0.09659898051390273, "Bound the explicit": 0.10001743800601984, "abstract setup": 0.10001743800601984, "technical": 0.12705006278260775, "lemma": 0.12705006278260775, "control": 0.12705006278260775, "growth": 0.12705006278260775, "coefficients": 0.12705006278260775, "explicit expression": 0.12705633976208477, "general abstract": 0.12705633976208477, "sum": 0.17116885459438624, "sum of powers": 0.2586330032147094, "sum one step": 0.2586330032147094, "Bound": 0.2708013337253117, "setup": 0.2708013337253117}}, {"docstring": "`raise' l n` is a strictly increasing sequence.\n", "keywords": {"strictly increasing sequence": 0.016559150827736194, "raise": 0.04491197687864554, "increasing sequence": 0.04940384002065631, "strictly increasing": 0.09700399286574239, "sequence": 0.15831692877998726, "strictly": 0.29736558256021506, "increasing": 0.29736558256021506}}, {"docstring": "This is a version of **Hall's Marriage Theorem** in terms of a relation to a finite type. There is a transversal of the relation (an injective function `\u03b1 \u2192 \u03b2` whose graph is a subrelation of the relation) iff every subset of `k` terms of `\u03b1` is related to at least `k` terms of `\u03b2`.  It is like `fintype.all_card_le_rel_image_card_iff_exists_injective` but uses `finset.filter` rather than `rel.image`.\n", "keywords": {"Hall Marriage Theorem": 0.00023035961894943266, "Hall Marriage": 0.003945427372430366, "Marriage Theorem": 0.003945427372430366, "finite type": 0.01980114433547152, "Hall": 0.05798574604105309, "Theorem": 0.05798574604105309, "terms": 0.06669277159007211, "Marriage": 0.06777393442909009, "relation": 0.07646195368362044, "type": 0.12591539354847123, "card": 0.1287571090393234, "injective function": 0.14139009823360763, "iff": 0.14174208484751324, "version": 0.1542041164570008, "finite": 0.1542041164570008, "injective": 0.18573651588885368, "iff every subset": 0.24579546169266536, "function": 0.3334706417176317, "fintype.all": 0.35818350352818545, "rel": 0.35818350352818545}}, {"docstring": "If `x` is a fixed point of `f`, then `f x = x`. This is useful, e.g., for `rw` or `simp`.\n", "keywords": {"fixed point": 0.02249651976012989, "fixed": 0.14832923246533666, "point": 0.14832923246533666, "simp": 0.17881754828257995}}, {"docstring": "**Alias** of the forward direction of list.nodup_sublists`.\n", "keywords": {"direction of list.nodup": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "sublists": 0.04491197687864554, "list.nodup": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "A nonnegative multiple of a vector is in the same ray as that vector.\n", "keywords": {"nonnegative multiple": 0.037831312533597124, "vector": 0.13945519496053638, "nonnegative": 0.19092478917347616, "multiple": 0.19092478917347616, "ray": 0.19092478917347616}}, {"docstring": "See `finprod_comp`, `fintype.prod_bijective` and `finset.prod_bij`.\n", "keywords": {"finprod": 0.04491197687864554, "comp": 0.04491197687864554, "fintype.prod": 0.04491197687864554, "bijective": 0.04491197687864554, "finset.prod": 0.04491197687864554, "bij": 0.04491197687864554}}, {"docstring": " The norm on a real normed space is convex on the whole space. See also `seminorm.convex_on` and `convex_on_norm`.\n", "keywords": {"real normed space": 0.006708449782608317, "real normed": 0.031462410428732705, "normed space": 0.03628959057820546, "space": 0.1002539848596783, "norm": 0.15533950844442926, "convex": 0.15533950844442926, "real": 0.1746502828289806, "normed": 0.1746502828289806, "space is convex": 0.2078923301416099, "seminorm.convex": 0.24621274290295234}}, {"docstring": "The inverse of the golden ratio is the opposite of its conjugate.\n", "keywords": {"golden ratio": 0.013527995261974615, "conjugate": 0.0771485953923296, "inverse": 0.1155310835876123, "golden": 0.1155310835876123, "ratio": 0.1155310835876123, "opposite": 0.1155310835876123}}, {"docstring": " If `f` is a monotone sequence of `finset`s and each `x` belongs to one of `f n`, then `tendsto f at_top at_top`.\n", "keywords": {"monotone sequence": 0.01904688389482227, "top": 0.05101428509898996, "finset": 0.05393656033701752, "belongs": 0.09202664026077896, "tendsto": 0.09202664026077896, "monotone": 0.1367145963576765, "sequence": 0.1367145963576765}}, {"docstring": "A least element of a set is the infimum of this set.\n", "keywords": {"set": 0.14323823713631006, "element": 0.19488865479360015, "infimum": 0.19488865479360015}}, {"docstring": " Multiplying `a` by itself and then dividing by itself results in `a` (whether or not `a` is zero).\n", "keywords": {"Multiplying": 0.04491197687864554, "dividing": 0.1155310835876123, "results": 0.1155310835876123}}, {"docstring": "The interior of a balanced set is balanced if it contains the origin.\n", "keywords": {"balanced set": 0.0562460611896591, "origin": 0.11718348279991213, "set is balanced": 0.12194096740933036, "balanced": 0.13945519496053638, "interior": 0.19092478917347616, "set": 0.19092478917347616}}, {"docstring": "Expand the square\n", "keywords": {"Expand the square": 0.02570861714399338, "Expand": 0.15831692877998726, "square": 0.15831692877998726}}, {"docstring": "Same as `nth_zero_add_tail_sum`, but avoiding the `list.head` garbage complication by requiring the list to be nonempty.\n", "keywords": {"garbage complication": 0.015380821171891606, "complication by requiring": 0.02570861714399338, "requiring the list": 0.02570861714399338, "nth": 0.04491197687864554, "add": 0.04491197687864554, "tail": 0.04491197687864554, "sum": 0.04491197687864554, "list.head": 0.04491197687864554, "garbage": 0.09568045026443411, "nonempty": 0.09568045026443411, "avoiding": 0.15831692877998726, "complication": 0.15831692877998726, "requiring": 0.15831692877998726, "list": 0.15831692877998726}}, {"docstring": "For prime `p` the only prime factor of `p^k` is `p` with multiplicity `k`\n", "keywords": {"prime factor": 0.02893602993452452, "multiplicity": 0.09713402394201612, "prime": 0.09770854302279938, "factor": 0.14390902704051098}}, {"docstring": " Suppose we are given a triangle `t\u2081`, and replace one of its vertices by its orthocenter, yielding triangle `t\u2082` (with vertices not necessarily listed in the same order).  Then the orthocenter of `t\u2082` is the vertex of `t\u2081` that was replaced.\n", "keywords": {"yielding triangle": 0.01367375768532696, "necessarily listed": 0.02749208814142605, "triangle": 0.05640788938657872, "vertices not necessarily": 0.07195419645084283, "vertices": 0.09219130991306042, "Suppose": 0.11956933951061942, "yielding": 0.11956933951061942, "order": 0.11956933951061942, "orthocenter": 0.14702477534219516, "replace": 0.16357413056415673, "necessarily": 0.16357413056415673, "listed": 0.16357413056415673, "replaced": 0.3204995316027229, "vertex": 0.4044796838522386}}, {"docstring": "A product is `M`-regular if and only if the factors are.\n", "keywords": {"regular": 0.09568045026443411, "product": 0.15831692877998726, "factors": 0.15831692877998726}}, {"docstring": "If `p` and `q` are irreducible, then `p \u2223 q` implies `q \u2223 p`.\n", "keywords": {"implies": 0.04491197687864554, "irreducible": 0.0771485953923296}}, {"docstring": "A subring is closed under subtraction\n", "keywords": {"closed under subtraction": 0.04940384002065631, "subring is closed": 0.09700399286574239, "subtraction": 0.15831692877998726, "subring": 0.29736558256021506, "closed": 0.29736558256021506}}, {"docstring": "Two `convex_cone`s are equal if they have the same elements.\n", "keywords": {"convex": 0.04491197687864554, "cone": 0.04491197687864554, "elements": 0.15831692877998726, "equal": 0.29736558256021506}}, {"docstring": "Primes greater than about `sqrt n` appear only to multiplicity 0 or 1 in the binomial coefficient.\n", "keywords": {"Primes greater": 0.04940384002065631, "binomial coefficient": 0.04940384002065631, "Primes": 0.15831692877998726, "sqrt": 0.15831692877998726, "multiplicity": 0.15831692877998726, "coefficient": 0.15831692877998726, "greater": 0.29736558256021506, "binomial": 0.29736558256021506}}, {"docstring": "The triangle (polygon) inequality for sequences of points; `finset.range` version.\n", "keywords": {"polygon": 0.04491197687864554, "finset.range": 0.04491197687864554, "version": 0.04491197687864554, "inequality for sequences": 0.04940384002065631, "sequences of points": 0.04940384002065631, "triangle": 0.15831692877998726, "inequality": 0.15831692877998726, "points": 0.15831692877998726, "sequences": 0.29736558256021506}}, {"docstring": " The difference of two `C^n` functions within a set at a point is `C^n` within this set at this point.\n", "keywords": {"set": 0.11357121248292479, "functions": 0.12363091320521931, "point": 0.14868279128010753, "difference": 0.2005079697193566}}, {"docstring": "A finite group of prime order is cyclic.\n", "keywords": {"order is cyclic": 0.04940384002065631, "finite group": 0.09700399286574239, "group of prime": 0.09700399286574239, "prime order": 0.09700399286574239, "cyclic": 0.15831692877998726, "finite": 0.29736558256021506, "group": 0.29736558256021506, "prime": 0.29736558256021506, "order": 0.29736558256021506}}, {"docstring": "Two `add_submonoid`s are equal if they have the same elements.\n", "keywords": {"add": 0.04491197687864554, "submonoid": 0.04491197687864554, "elements": 0.15831692877998726, "equal": 0.29736558256021506}}, {"docstring": "A nonemtpy open subset of a preirreducible subspace is dense in the subspace.\n", "keywords": {"nonemtpy open subset": 0.007041919398291632, "nonemtpy open": 0.035715520099333646, "open subset": 0.035715520099333646, "preirreducible subspace": 0.05259515133015473, "subspace is dense": 0.11487806119690562, "subspace": 0.13453835116331675, "nonemtpy": 0.18569843656348187, "open": 0.18569843656348187, "subset": 0.18569843656348187, "preirreducible": 0.18569843656348187, "dense": 0.18569843656348187}}, {"docstring": "Given a `(m \u00d7 m)` diagonal matrix defined by a map `d : m \u2192 \u03b1`, if the reindexing map `e` is  injective, then the resulting matrix is again diagonal.\n", "keywords": {"diagonal matrix defined": 0.006470271957122136, "reindexing map": 0.01693404681585254, "matrix defined": 0.030322790873945838, "resulting matrix": 0.030322790873945838, "diagonal matrix": 0.04195127280556263, "map": 0.05676635054588953, "injective": 0.09910285154256718, "diagonal": 0.10032724128195009, "matrix": 0.10032724128195009, "defined": 0.14667192704153995, "reindexing": 0.14667192704153995, "resulting": 0.14667192704153995}}, {"docstring": " An element of a `cancel_monoid_with_zero` fixed by right multiplication by an element other than one must be zero.\n", "keywords": {"cancel": 0.054709255964732355, "monoid": 0.054709255964732355, "element": 0.10356599227702172, "fixed": 0.11521656054299435, "multiplication": 0.1879836817695587}}, {"docstring": " If `\u03b1` and `\u03b2` are infinite types, then the cardinality of `\u03b1 \u00d7 \u03b2` is the maximum of the cardinalities of `\u03b1` and `\u03b2`.\n", "keywords": {"infinite types": 0.00899321792126428, "types": 0.0771485953923296, "infinite": 0.1155310835876123, "cardinality": 0.1155310835876123, "maximum": 0.1155310835876123, "cardinalities": 0.1155310835876123}}, {"docstring": "A local maximum of a concave function is a global maximum.\n", "keywords": {"concave function": 0.019557279302732804, "local maximum": 0.02635223776265893, "global maximum": 0.02635223776265893, "maximum": 0.09269208833952335, "local": 0.1384995633470844, "concave": 0.1384995633470844, "function": 0.1384995633470844, "global": 0.1384995633470844}}, {"docstring": " **Tietze extension theorem** for real-valued bounded continuous maps, a version for a closed embedding. Let `e` be a closed embedding of a nonempty topological space `X` into a normal topological space `Y`. Let `f` be a bounded continuous real-valued function on `X`. Let `t` be a nonempty convex set of real numbers (we use `ord_connected` instead of `convex` to automatically deduce this argument by typeclass search) such that `f x \u2208 t` for all `x`. Then there exists a bounded continuous real-valued function `g : Y \u2192\u1d47 \u211d` such that `g y \u2208 t` for all `y` and `g \u2218 e = f`.\n", "keywords": {"Tietze extension theorem": 0.0018152362297900043, "Tietze extension": 0.011491366222168148, "bounded continuous maps": 0.01774692634580816, "bounded continuous real-valued": 0.022695230570121405, "closed embedding": 0.027005563022555468, "extension theorem": 0.028534110238955055, "bounded continuous": 0.03596105887615942, "continuous real-valued function": 0.03610878541084361, "real-valued bounded continuous": 0.04539046114024282, "continuous maps": 0.04998786713457384, "topological space": 0.05281821287103004, "nonempty topological space": 0.053058649754991166, "normal topological space": 0.058147547314972854, "continuous real-valued": 0.06141831493853805, "Tietze": 0.06247615545120966, "real-valued function": 0.09481671499270122, "bounded": 0.10401802999573442, "continuous": 0.10401802999573442, "closed": 0.10514287918746723, "real-valued": 0.11685846757042194}}, {"docstring": "**Alias** of sub_sq`.\n", "keywords": {"Alias": 0.030396371632413578}}, {"docstring": "Composition and products commute.  This is `path.trans_pi_eq_pi_trans` descended to path homotopy classes\n", "keywords": {"Composition and products": 0.02541909697430123, "products commute": 0.02541909697430123, "path homotopy classes": 0.11501181900411048, "Composition": 0.12363091320521931, "commute": 0.12363091320521931, "path.trans": 0.17881754828257995, "trans": 0.17881754828257995, "descended to path": 0.18075564686791562, "homotopy classes": 0.18075564686791562, "products": 0.2005079697193566, "path homotopy": 0.2766850298235749, "descended": 0.32883716426354986, "classes": 0.32883716426354986, "path": 0.46553351027698087, "homotopy": 0.46553351027698087}}, {"docstring": "Affine subspaces are convex.\n", "keywords": {"Affine subspaces": 0.04940384002065631, "subspaces are convex": 0.04940384002065631, "Affine": 0.15831692877998726, "convex": 0.15831692877998726, "subspaces": 0.29736558256021506}}, {"docstring": "If `a` and `b` are equal mod `c`, `a - b` is zero mod `c`.\n", "keywords": {"equal mod": 0.03278451112147437, "mod": 0.07915846438999363, "equal": 0.2005079697193566}}, {"docstring": " `fact` version of the dimension of `\u2102` over `\u211d`, locally useful in the definition of the circle.\n", "keywords": {"fact": 0.04491197687864554, "version": 0.0771485953923296, "locally": 0.0771485953923296, "circle": 0.0771485953923296, "dimension": 0.1155310835876123, "definition": 0.1155310835876123}}, {"docstring": "This lemma matches more generally than `finset.nat.sum_antidiagonal_eq_sum_range_succ_mk` when using `rw \u2190`.\n", "keywords": {"antidiagonal": 0.04491197687864554, "sum": 0.04491197687864554, "range": 0.04491197687864554, "succ": 0.04491197687864554, "lemma matches": 0.09700399286574239, "matches more generally": 0.09700399286574239, "lemma": 0.29736558256021506, "matches": 0.29736558256021506, "generally": 0.29736558256021506}}, {"docstring": "In a nonempty graph, if `k` is at most the degree of every vertex, it is at most the minimum degree. Note the assumption that the graph is nonempty is necessary as long as `G.min_degree` is defined to be a natural.\n", "keywords": {"minimum degree": 0.049765083242999594, "nonempty graph": 0.07722786380550149, "degree": 0.1013887667579572, "vertex": 0.11944488874071287, "nonempty": 0.13387615359631724, "graph": 0.13387615359631724, "G.min": 0.1404863864579365, "Note the assumption": 0.14301323704829003, "minimum": 0.155855278742161, "graph is nonempty": 0.238440207616055, "Note": 0.3202420163655913, "natural": 0.3202420163655913, "assumption": 0.3907029274746275, "long": 0.3907029274746275, "defined": 0.3907029274746275}}, {"docstring": "Two `v w : vector \u03b1 n` are equal iff they are equal at every single index.\n", "keywords": {"single index": 0.022138323509052035, "equal iff": 0.04051498248759491, "equal": 0.10356599227702172, "vector": 0.11521656054299435, "index": 0.11521656054299435, "iff": 0.1879836817695587, "single": 0.1879836817695587}}, {"docstring": "When multiplication is commutative, `star` preserves division.\n", "keywords": {"preserves division": 0.02570861714399338, "star": 0.04491197687864554, "multiplication is commutative": 0.04940384002065631, "commutative": 0.15831692877998726, "preserves": 0.15831692877998726, "division": 0.15831692877998726, "multiplication": 0.29736558256021506}}, {"docstring": "The definition of `centroid_weights_indicator`.\n", "keywords": {"centroid": 0.04491197687864554, "weights": 0.04491197687864554, "indicator": 0.04491197687864554, "definition": 0.29736558256021506}}, {"docstring": "Precomposing `f` with `prod.snd` is continuous at `(x, y)`\n", "keywords": {"Precomposing": 0.04491197687864554, "prod.snd": 0.04491197687864554, "continuous": 0.29736558256021506}}, {"docstring": "For maps between vector spaces, `mdifferentiable_at` and `differentiable_at` coincide\n", "keywords": {"vector spaces": 0.015380821171891606, "maps between vector": 0.02570861714399338, "mdifferentiable": 0.04491197687864554, "coincide": 0.04491197687864554, "spaces": 0.09568045026443411, "maps": 0.15831692877998726, "vector": 0.15831692877998726}}, {"docstring": " Given three nonzero vectors, the angle between the first and the third minus the angle between the first and the second equals the angle between the second and the third.\n", "keywords": {"minus the angle": 0.004966181306367437, "equals the angle": 0.004966181306367437, "nonzero vectors": 0.006553883815486385, "angle": 0.018701283614014252, "vectors": 0.07392362528831797, "nonzero": 0.08808023247765763, "minus": 0.08808023247765763, "equals": 0.08808023247765763}}, {"docstring": " If `f : \ud835\udd5c \u2192 \ud835\udd5c` is convex, then for any three points `x < y < z` the slope of the secant line of `f` on `[x, y]` is less than the slope of the secant line of `f` on `[x, z]`.\n", "keywords": {"secant line": 0.004806531356351394, "slope": 0.048789167937164486, "secant": 0.048789167937164486, "line": 0.048789167937164486, "convex": 0.09040601336440271, "points": 0.09040601336440271}}, {"docstring": " The convex hull of an affine basis is the intersection of the half-spaces defined by the corresponding barycentric coordinates.\n", "keywords": {"barycentric coordinates": 0.0065920978564317735, "convex hull": 0.009239332327148086, "affine basis": 0.009239332327148086, "half-spaces defined": 0.009239332327148086, "coordinates": 0.06844581806138879, "convex": 0.09568045026443411, "hull": 0.09568045026443411, "affine": 0.09568045026443411, "basis": 0.09568045026443411, "intersection": 0.09568045026443411, "half-spaces": 0.09568045026443411, "defined": 0.09568045026443411, "barycentric": 0.09568045026443411}}, {"docstring": " If `h : a \u2208 {x | p x}` then `h.out : p x`. These are definitionally equal, but this can nevertheless be useful for various reasons, e.g. to apply further projection notation or in an argument to `simp`.\n", "keywords": {"h.out": 0.05899937629682816, "definitionally equal": 0.11755105063023073, "apply further projection": 0.165573765898185, "projection notation": 0.165573765898185, "simp": 0.17881754828257995, "equal": 0.2790829227183407, "reasons": 0.2790829227183407, "definitionally": 0.37689977775222827, "apply": 0.37689977775222827, "projection": 0.37689977775222827, "notation": 0.37689977775222827, "argument": 0.37689977775222827}}, {"docstring": "Updating the first element of a tuple does not change the tail.\n", "keywords": {"change the tail": 0.015380821171891606, "Updating": 0.09568045026443411, "tail": 0.09568045026443411, "element": 0.15831692877998726, "tuple": 0.15831692877998726, "change": 0.15831692877998726}}, {"docstring": "The shadow is monotone.\n", "keywords": {"shadow is monotone": 0.04940384002065631, "monotone": 0.15831692877998726, "shadow": 0.29736558256021506}}, {"docstring": " When `R` is commutative and permits an `algebra_map`, `pi.const_ring_hom` is equal to that map.\n", "keywords": {"commutative and permits": 0.03439110359613085, "algebra": 0.0528063806271324, "pi.const": 0.0528063806271324, "ring": 0.0528063806271324, "hom": 0.0528063806271324, "map": 0.06839635777587466, "commutative": 0.1823394614884183, "permits": 0.1823394614884183, "equal": 0.1823394614884183}}, {"docstring": "Additive group homomorphisms preserve integer scaling.\n", "keywords": {"Additive group homomorphisms": 0.01655915082773619, "preserve integer scaling": 0.016559150827736194, "group homomorphisms preserve": 0.03339840940482845, "homomorphisms preserve integer": 0.03339840940482845, "Additive group": 0.04940384002065631, "integer scaling": 0.04940384002065631, "group homomorphisms": 0.09700399286574239, "homomorphisms preserve": 0.09700399286574239, "preserve integer": 0.09700399286574239, "Additive": 0.15831692877998726, "scaling": 0.15831692877998726, "group": 0.29736558256021506, "homomorphisms": 0.29736558256021506, "preserve": 0.29736558256021506, "integer": 0.29736558256021506}}, {"docstring": "Euler's product formula for the totient function.\n", "keywords": {"Euler product formula": 0.01655915082773619, "Euler product": 0.04940384002065631, "totient function": 0.04940384002065631, "product formula": 0.09700399286574239, "Euler": 0.15831692877998726, "function": 0.15831692877998726, "product": 0.29736558256021506, "formula": 0.29736558256021506, "totient": 0.29736558256021506}}, {"docstring": "Any seminorm arises as the gauge of its unit ball.\n", "keywords": {"unit ball": 0.04940384002065631, "seminorm arises": 0.09700399286574239, "ball": 0.15831692877998726, "seminorm": 0.29736558256021506, "arises": 0.29736558256021506, "gauge": 0.29736558256021506, "unit": 0.29736558256021506}}, {"docstring": " The inner product of a nonzero vector with a negative multiple of itself, divided by the product of their norms, has value -1.\n", "keywords": {"nonzero vector": 0.018641876658774398, "negative multiple": 0.018641876658774398, "product": 0.069255433448279, "divided": 0.09101163530720666, "norms": 0.09101163530720666, "nonzero": 0.13528014248445303, "vector": 0.13528014248445303, "negative": 0.13528014248445303, "multiple": 0.13528014248445303}}, {"docstring": "Entries of the incidence matrix can be computed given additional decidable instances.\n", "keywords": {"additional decidable instances": 0.016559150827736194, "decidable instances": 0.04940384002065631, "incidence matrix": 0.09700399286574239, "computed given additional": 0.09700399286574239, "additional decidable": 0.09700399286574239, "Entries": 0.15831692877998726, "instances": 0.15831692877998726, "incidence": 0.29736558256021506, "matrix": 0.29736558256021506, "computed": 0.29736558256021506, "additional": 0.29736558256021506, "decidable": 0.29736558256021506}}, {"docstring": "The composition of `C^n` functions within domains at points is `C^n`.\n", "keywords": {"functions within domains": 0.015380821171891606, "domains at points": 0.02570861714399338, "functions": 0.09568045026443411, "composition": 0.15831692877998726, "domains": 0.15831692877998726, "points": 0.15831692877998726}}, {"docstring": "A variant of `tendsto_at_top` that uses `\u2203 N, \u2200 n > N, ...` rather than `\u2203 N, \u2200 n \u2265 N, ...`\n", "keywords": {"tendsto": 0.04491197687864554, "top": 0.04491197687864554, "variant": 0.0771485953923296}}, {"docstring": "If the p-adic norm of `q` is 0, then `q` is 0.\n", "keywords": {"p-adic norm": 0.02570861714399338, "p-adic": 0.15831692877998726, "norm": 0.15831692877998726}}, {"docstring": "Negating both vectors passed to `oangle` does not change the angle.\n", "keywords": {"oangle": 0.04491197687864554, "Negating both vectors": 0.04940384002065631, "change the angle": 0.04940384002065631, "vectors passed": 0.09700399286574239, "Negating": 0.15831692877998726, "angle": 0.15831692877998726, "vectors": 0.29736558256021506, "passed": 0.29736558256021506, "change": 0.29736558256021506}}, {"docstring": " If `\u03b1` is a preorder with no maximal elements, then there exists a strictly monotone function `\u2115 \u2192 \u03b1` with any prescribed value of `f 0`.\n", "keywords": {"strictly monotone function": 0.0025258761156662004, "maximal elements": 0.015380821171891606, "monotone function": 0.015380821171891606, "exists a strictly": 0.02570861714399338, "strictly monotone": 0.02570861714399338, "elements": 0.09568045026443411, "function": 0.09568045026443411, "preorder": 0.15831692877998726, "maximal": 0.15831692877998726, "exists": 0.15831692877998726, "strictly": 0.15831692877998726, "monotone": 0.15831692877998726, "prescribed": 0.15831692877998726}}, {"docstring": "Introduction rule to prove that `b` is the supremum of `s`: it suffices to check that `b` is larger than all elements of `s`, and that this is not the case of any `w<b`. See `Sup_eq_of_forall_le_of_forall_lt_exists_gt` for a version in complete lattices.\n", "keywords": {"Introduction rule": 0.012677568251015505, "rule to prove": 0.016735027730771318, "suffices to check": 0.016735027730771318, "forall": 0.07004624732852151, "Introduction": 0.0975787930327224, "complete lattices": 0.10174416463054689, "rule": 0.12829488012204895, "prove": 0.12829488012204895, "supremum": 0.12829488012204895, "suffices": 0.12829488012204895, "check": 0.12829488012204895, "larger": 0.12829488012204895, "elements": 0.12829488012204895, "case": 0.12829488012204895, "version in complete": 0.1291985440465966, "exists": 0.20684865028795477, "lattices": 0.2730141121474578, "version": 0.33825455611391353, "complete": 0.33825455611391353}}, {"docstring": "The number of complex roots equals the number of real roots plus    the number of roots not fixed by complex conjugation (i.e. with some imaginary component).\n", "keywords": {"complex roots equals": 0.010468451556027018, "equals the number": 0.016396073692513915, "number of real": 0.016396073692513915, "imaginary component": 0.016663174968421013, "complex conjugation": 0.023508970991622368, "number": 0.034583070555784426, "roots equals": 0.04428853724117194, "real roots": 0.04428853724117194, "number of complex": 0.05409060227379681, "complex roots": 0.0631891737041027, "fixed by complex": 0.07992213224426854, "number of roots": 0.08780048777191762, "roots": 0.09091959522272335, "conjugation": 0.10541164337408133, "component": 0.10541164337408133, "complex": 0.10894903471977774, "roots not fixed": 0.12895051817204012, "equals": 0.15548628151514407, "real": 0.15548628151514407, "fixed": 0.15548628151514407}}, {"docstring": "The function `(c,d) \u2192 |cz+d|^2` is proper, that is, preimages of bounded-above sets are finite.\n", "keywords": {"preimages of bounded-above": 0.015380821171891606, "sets are finite": 0.015380821171891606, "bounded-above sets": 0.02570861714399338, "function": 0.09568045026443411, "proper": 0.09568045026443411, "preimages": 0.09568045026443411, "finite": 0.09568045026443411, "bounded-above": 0.15831692877998726, "sets": 0.15831692877998726}}, {"docstring": " If measure `\u03bc` is invariant under an additive group action and is nonzero on a compact set `K`, then it is positive on any nonempty open set. In case of a regular measure, one can assume `\u03bc \u2260 0` instead of `\u03bc K \u2260 0`, see `measure_theory.measure_is_open_pos_of_vadd_invariant_of_ne_zero`.\n", "keywords": {"additive group action": 0.005279014729745092, "nonempty open set": 0.006736335703391449, "compact set": 0.020521546401542176, "additive group": 0.029602489235190793, "group action": 0.029602489235190793, "open set": 0.03728364014891088, "nonempty open": 0.054175698853544015, "set": 0.0592964352975481, "measure": 0.0697277528828725, "regular measure": 0.09504161268183689, "invariant": 0.15154171649701484, "open": 0.15154171649701484, "additive": 0.169562309814781, "group": 0.169562309814781, "action": 0.169562309814781, "nonzero": 0.169562309814781, "compact": 0.169562309814781, "positive": 0.169562309814781, "nonempty": 0.169562309814781, "theory.measure": 0.23964531663314945}}, {"docstring": "Given a closed set `s`, a point belongs to `s` iff its infimum distance to this set vanishes\n", "keywords": {"iff its infimum": 0.020744656539556924, "set vanishes": 0.03017959306974641, "point belongs": 0.03439110359613085, "infimum distance": 0.03439110359613085, "closed set": 0.05033870131288873, "iff": 0.11145728654016383, "vanishes": 0.11145728654016383, "set": 0.1314201551237121, "closed": 0.1823394614884183, "point": 0.1823394614884183, "belongs": 0.1823394614884183, "infimum": 0.1823394614884183, "distance": 0.1823394614884183}}, {"docstring": "The left injection of a space in a disjoint union is an isometry\n", "keywords": {"left injection": 0.02570861714399338, "disjoint union": 0.02570861714399338, "isometry": 0.09568045026443411, "left": 0.15831692877998726, "injection": 0.15831692877998726, "space": 0.15831692877998726, "disjoint": 0.15831692877998726, "union": 0.15831692877998726}}, {"docstring": "The function `x ^ s * exp (-b * x)` tends to `0` at `+\u221e`, for any real `s` and `b > 0`.\n", "keywords": {"exp": 0.04491197687864554, "function": 0.09568045026443411, "real": 0.09568045026443411}}, {"docstring": "The **Heine\u2013Borel theorem**: In a proper space, the closure of a bounded set is compact.\n", "keywords": {"Borel theorem": 0.005484890844946624, "proper space": 0.015380821171891606, "set is compact": 0.015380821171891606, "bounded set": 0.02570861714399338, "Heine": 0.030396371632413578, "Borel": 0.057012387690331526, "theorem": 0.09568045026443411, "space": 0.09568045026443411, "compact": 0.09568045026443411, "proper": 0.15831692877998726, "closure": 0.15831692877998726, "bounded": 0.15831692877998726, "set": 0.15831692877998726}}, {"docstring": "If `\u2225r\u2225 < 1`, then `\u2211' n : \u2115, n * r ^ n = r / (1 - r) ^ 2`, `has_sum` version.\n", "keywords": {"sum": 0.04491197687864554, "version": 0.04491197687864554}}, {"docstring": " Lagrange multipliers theorem: if `\u03c6 : E \u2192 \u211d` has a local extremum on the set `{x | f x = f x\u2080}` at `x\u2080`, both `f : E \u2192 F` and `\u03c6` are strictly differentiable at `x\u2080`, and the codomain of `f` is a complete space, then there exist `\u039b : dual \u211d F` and `\u039b\u2080 : \u211d` such that `(\u039b, \u039b\u2080) \u2260 0` and `\u039b (f' x) + \u039b\u2080 \u2022 \u03c6' x = 0` for all `x`.\n", "keywords": {"Lagrange multipliers theorem": 0.0002182360717991257, "Lagrange multipliers": 0.0038595505094717398, "multipliers theorem": 0.0038595505094717398, "complete space": 0.0038595505094717398, "local extremum": 0.00470688094720815, "strictly differentiable": 0.00470688094720815, "Lagrange": 0.05617160784335063, "theorem": 0.05617160784335063, "set": 0.05617160784335063, "space": 0.05617160784335063, "exist": 0.05617160784335063, "dual": 0.05617160784335063, "multipliers": 0.06844581806138879, "local": 0.06844581806138879, "extremum": 0.06844581806138879, "strictly": 0.06844581806138879, "differentiable": 0.06844581806138879, "codomain": 0.06844581806138879, "complete": 0.06844581806138879}}, {"docstring": "Polarization identity: The real part of the  inner product, in terms of the norm.\n", "keywords": {"Polarization identity": 0.005987543063120938, "real part": 0.013527995261974615, "Polarization": 0.0771485953923296, "identity": 0.0771485953923296, "product": 0.0771485953923296, "norm": 0.0771485953923296, "real": 0.1155310835876123, "part": 0.1155310835876123, "terms": 0.1155310835876123}}, {"docstring": "**Alias** of eq_of_le_of_not_lt`.\n", "keywords": {"Alias": 0.030396371632413578}}, {"docstring": "**Alias** of the forward direction of set.inj_on_iff_injective`.\n", "keywords": {"direction of set.inj": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "injective": 0.04491197687864554, "set.inj": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "Pointwise maximum of two monotone functions is a monotone function.\n", "keywords": {"Pointwise maximum": 0.02541909697430123, "monotone functions": 0.054400398012637276, "monotone": 0.11357121248292479, "Pointwise": 0.12363091320521931, "maximum": 0.2005079697193566, "functions": 0.22714242496584958, "function": 0.22714242496584958}}, {"docstring": "Note: implementers of `set_like` must copy this lemma in order to tag it with `@[ext]`.\n", "keywords": {"Note": 0.04491197687864554, "set": 0.04491197687864554, "ext": 0.04491197687864554, "copy this lemma": 0.09700399286574239, "lemma in order": 0.09700399286574239, "order to tag": 0.09700399286574239, "implementers": 0.15831692877998726, "copy": 0.29736558256021506, "lemma": 0.29736558256021506, "order": 0.29736558256021506, "tag": 0.29736558256021506}}, {"docstring": "Twice the angle between the negation of a vector and that vector is 0.\n", "keywords": {"vector": 0.14323823713631006, "angle": 0.19488865479360015, "negation": 0.19488865479360015}}, {"docstring": "**Alias** of the forward direction of measure_theory.measure.ae_le_iff_absolutely_continuous`.\n", "keywords": {"direction of measure": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "absolutely": 0.04491197687864554, "continuous": 0.04491197687864554, "measure": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " Maximum principle for convex functions. If a function `f` is convex on the convex hull of `s`, then the eventual maximum of `f` on `convex_hull \ud835\udd5c s` lies in `s`.\n", "keywords": {"Maximum principle": 0.07402118453590395, "convex": 0.11437336794538108, "convex functions": 0.11729797423366867, "Maximum": 0.17308581232135736, "eventual maximum": 0.19103113654456394, "principle": 0.1990910406649399, "functions": 0.2294756449781632, "function": 0.2294756449781632, "hull": 0.2603639552153573, "principle for convex": 0.2733844366862157, "convex hull": 0.3127315339699804, "lies": 0.3748207333611027, "eventual": 0.4633291005993457}}, {"docstring": "If a function has a limit, then its limsup coincides with its limit.\n", "keywords": {"limsup coincides": 0.037831312533597124, "limit": 0.07334489383741183, "function": 0.19092478917347616, "limsup": 0.19092478917347616, "coincides": 0.19092478917347616}}, {"docstring": "This is a version of `exists_T_pow` stated as an induction principle.\n", "keywords": {"exists": 0.04491197687864554, "pow": 0.04491197687864554, "induction principle": 0.04940384002065631, "stated": 0.15831692877998726, "principle": 0.15831692877998726, "version": 0.29736558256021506, "induction": 0.29736558256021506}}, {"docstring": "The diameter of a closed ball of radius `r` is at most `2 r`.\n", "keywords": {"ball of radius": 0.015380821171891606, "closed ball": 0.02570861714399338, "radius": 0.09568045026443411, "diameter": 0.15831692877998726, "closed": 0.15831692877998726, "ball": 0.15831692877998726}}, {"docstring": "Any two countable dense, nonempty linear orders without endpoints are order isomorphic.\n", "keywords": {"nonempty linear orders": 0.006026046305276699, "countable dense": 0.021114872146320032, "nonempty linear": 0.021114872146320032, "order isomorphic": 0.03079770075447455, "linear orders": 0.051351238837580325, "orders without endpoints": 0.11245662598947327, "endpoints are order": 0.11245662598947327, "dense": 0.11246769819744627, "nonempty": 0.11246769819744627, "isomorphic": 0.11246769819744627, "countable": 0.18385948854246909, "linear": 0.18385948854246909, "endpoints": 0.18385948854246909, "orders": 0.26565442043121734, "order": 0.26565442043121734}}, {"docstring": "Extensionality for `poly \u03b1`\n", "keywords": {"Extensionality": 0.15831692877998726, "poly": 0.15831692877998726}}, {"docstring": " If `f` is continuous multilinear, then `f (\u03a3_{j\u2081 \u2208 A\u2081} g\u2081 j\u2081, ..., \u03a3_{j\u2099 \u2208 A\u2099} g\u2099 j\u2099)` is the sum of `f (g\u2081 (r 1), ..., g\u2099 (r n))` where `r` ranges over all functions with `r 1 \u2208 A\u2081`, ..., `r n \u2208 A\u2099`. This follows from multilinearity by expanding successively with respect to each coordinate.\n", "keywords": {"continuous multilinear": 0.009145555775475097, "multilinear": 0.08280939275679769, "ranges": 0.08280939275679769, "multilinearity by expanding": 0.09827342448325681, "expanding successively": 0.09827342448325681, "successively with respect": 0.09827342448325681, "continuous": 0.10944015281422888, "sum": 0.10944015281422888, "functions": 0.10944015281422888, "coordinate": 0.23871522237376758, "multilinearity": 0.29913195375393087, "expanding": 0.29913195375393087, "successively": 0.29913195375393087, "respect": 0.29913195375393087}}, {"docstring": "Composing two associative operations of `f : \u03b1 \u2192 \u03b1 \u2192 \u03b1` on the right is equal to an associative operation on the right.\n", "keywords": {"associative operations": 0.02570861714399336, "Composing two associative": 0.0393327293376547, "associative": 0.07915846438999359, "Composing": 0.10028582371075691, "equal": 0.14832923246533666, "operations": 0.15831692877998718, "operation": 0.15831692877998718}}, {"docstring": "A convenience lemma for showing that a set is sequentially closed.\n", "keywords": {"sequentially closed": 0.015380821171891606, "convenience lemma": 0.02570861714399338, "lemma for showing": 0.02570861714399338, "set is sequentially": 0.02570861714399338, "closed": 0.09568045026443411, "convenience": 0.15831692877998726, "lemma": 0.15831692877998726, "showing": 0.15831692877998726, "set": 0.15831692877998726, "sequentially": 0.15831692877998726}}, {"docstring": "A natural number `m` divides the sum `m + n` if and only if `m` divides `n`.\n", "keywords": {"natural number": 0.013546417228156258, "divides the sum": 0.02593095746307935, "divides": 0.05332403764722467, "number": 0.09492398510093508, "sum": 0.09492398510093508, "natural": 0.1408007092310104}}, {"docstring": "The angle between two vectors is at most \u03c0.\n", "keywords": {"angle": 0.29736558256021506, "vectors": 0.29736558256021506}}, {"docstring": "The upper shadow of a family of `r`-sets is a family of `r + 1`-sets.\n", "keywords": {"upper shadow": 0.02249651976012989, "family": 0.05776554179380615, "sets": 0.05776554179380615, "upper": 0.14832923246533666, "shadow": 0.14832923246533666}}, {"docstring": "The elements of the atlas belong to the maximal atlas for any structure groupoid\n", "keywords": {"structure groupoid": 0.012741693123860753, "atlas belong": 0.025536557885239508, "maximal atlas": 0.025536557885239508, "atlas": 0.09106811155038866, "groupoid": 0.09202664026077896, "elements": 0.1367145963576765, "belong": 0.1367145963576765, "maximal": 0.1367145963576765, "structure": 0.1367145963576765}}, {"docstring": "An element admitting a left inverse is left-regular.\n", "keywords": {"inverse is left-regular": 0.04940384002065631, "element admitting": 0.09700399286574239, "admitting a left": 0.09700399286574239, "left inverse": 0.09700399286574239, "left-regular": 0.15831692877998726, "element": 0.29736558256021506, "admitting": 0.29736558256021506, "left": 0.29736558256021506, "inverse": 0.29736558256021506}}, {"docstring": "If `P` is a monic polynomial that splits, then `coeff P 0` equals the product of the roots.\n", "keywords": {"polynomial that splits": 0.015380821171891606, "equals the product": 0.015380821171891606, "monic polynomial": 0.02570861714399338, "splits": 0.09568045026443411, "coeff": 0.09568045026443411, "equals": 0.09568045026443411, "roots": 0.09568045026443411, "monic": 0.15831692877998726, "polynomial": 0.15831692877998726, "product": 0.15831692877998726}}, {"docstring": "**Wilson's Lemma**: the product of `1`, ..., `p-1` is `-1` modulo `p`.\n", "keywords": {"Wilson Lemma": 0.0032610119837787367, "modulo": 0.04491197687864554, "Wilson": 0.057012387690331526, "Lemma": 0.057012387690331526, "product": 0.15831692877998726}}, {"docstring": "**Alias** of the forward direction of is_min_on_dual_iff`.\n", "keywords": {"forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "min": 0.04491197687864554, "dual": 0.04491197687864554, "iff": 0.04491197687864554, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " Multiplication on the right by a nonzero element of a normed division ring tends to infinity at infinity. TODO: use `bornology.cobounded` instead of `filter.comap has_norm.norm filter.at_top`.\n", "keywords": {"normed division ring": 0.01448862904104631, "nonzero element": 0.05695550697646169, "normed division": 0.05695550697646169, "division ring": 0.05695550697646169, "TODO": 0.12704470021859623, "Multiplication": 0.14533572323085503, "norm.norm filter.at": 0.15991384681661985, "bornology.cobounded": 0.20791243635202292, "top": 0.20791243635202292, "nonzero": 0.2321344025274505, "element": 0.2321344025274505, "normed": 0.2321344025274505, "division": 0.2321344025274505, "ring": 0.2321344025274505, "filter.comap": 0.3713044625068338, "norm.norm": 0.3713044625068338, "filter.at": 0.3713044625068338}}, {"docstring": "A unit in a monoid is regular.\n", "keywords": {"monoid is regular": 0.015380821171891606, "regular": 0.09568045026443411, "unit": 0.15831692877998726, "monoid": 0.15831692877998726}}, {"docstring": "Given a localization map `f : M \u2192+ N` for a submonoid `S \u2286 M`, for all `z : N` we have that if `x : M, y \u2208 S` are such that `z + f y = f x`, then `f x - f y = z`.\n", "keywords": {"localization map": 0.005380746843605012, "map": 0.06341998722529081, "submonoid": 0.06341998722529081, "localization": 0.08438900089923473}}, {"docstring": "Like `finsupp.single_eq_single_iff`, but with a `heq` due to dependent types\n", "keywords": {"finsupp.single": 0.04491197687864554, "single": 0.04491197687864554, "iff": 0.04491197687864554, "heq": 0.04491197687864554, "due to dependent": 0.04940384002065631, "dependent types": 0.04940384002065631, "due": 0.15831692877998726, "types": 0.15831692877998726, "dependent": 0.29736558256021506}}, {"docstring": " A product of maps which preserve multiplication, preserves multiplication when the target is commutative.\n", "keywords": {"target is commutative": 0.02391462167226668, "product of maps": 0.039481144315219374, "preserve multiplication": 0.04990813198885798, "maps which preserve": 0.09916653097095413, "multiplication": 0.10901343189444501, "commutative": 0.11984314898676356, "product": 0.19488865479360015, "maps": 0.19488865479360015, "target": 0.19488865479360015, "preserve": 0.21802686378889002, "preserves": 0.21802686378889002}}, {"docstring": " A function which can be uniformly approximated by functions which are continuous on a set is continuous on this set.\n", "keywords": {"uniformly approximated": 0.04290651575450026, "approximated by functions": 0.10868044142040656, "continuous": 0.11549095123814725, "set": 0.15096417332079662, "uniformly": 0.20283314940424746, "approximated": 0.20283314940424746, "function": 0.2309819024762945, "functions": 0.2309819024762945, "set is continuous": 0.2313044886535471}}, {"docstring": " Given an inducing map of a topological space into a pseudo metrizable space, the source space is also pseudo metrizable.\n", "keywords": {"pseudo metrizable space": 0.008402962744334249, "pseudo metrizable": 0.014434501250293776, "inducing map": 0.024301981248200683, "topological space": 0.04316402358087372, "source space": 0.04316402358087372, "metrizable space": 0.04711880783889208, "pseudo": 0.08375405673890705, "metrizable": 0.08375405673890705, "space": 0.08954497741978518, "inducing": 0.15403053871128228, "map": 0.15403053871128228, "topological": 0.15403053871128228, "source": 0.15403053871128228}}, {"docstring": "**Alias** of quaternion.commute_conj_conj`.\n", "keywords": {"conj": 0.021352745740207107, "Alias": 0.035514607549195436, "quaternion.commute": 0.11984314898676356}}, {"docstring": "Auxiliary lemma for `biprod.unique_up_to_iso`.\n", "keywords": {"biprod.unique": 0.04491197687864554, "iso": 0.04491197687864554, "Auxiliary lemma": 0.04940384002065631, "Auxiliary": 0.15831692877998726, "lemma": 0.29736558256021506}}, {"docstring": " If `\u2225f x\u2225 \u2264 g x` on `[l, u]` and `g` is integrable, then the norm of the integral of `f` is less than or equal to the integral of `g`.\n", "keywords": {"integral": 0.05332403764722467, "integrable": 0.09492398510093508, "norm": 0.1408007092310104, "equal": 0.1408007092310104}}, {"docstring": "Abbreviation for `mul_single_eq_of_ne h.symm`, for ease of use by `simp`.\n", "keywords": {"mul": 0.04491197687864554, "single": 0.04491197687864554, "simp": 0.04491197687864554, "Abbreviation": 0.09568045026443411, "h.symm": 0.09568045026443411, "ease": 0.15831692877998726}}, {"docstring": "A nontrivial torsion group is not torsion-free.\n", "keywords": {"nontrivial torsion group": 0.03339840940482845, "nontrivial torsion": 0.09700399286574239, "torsion group": 0.09700399286574239, "torsion-free": 0.15831692877998726, "nontrivial": 0.29736558256021506, "torsion": 0.29736558256021506, "group": 0.29736558256021506}}, {"docstring": "**Alias** of the forward direction of ordering.compares_swap`.\n", "keywords": {"direction of ordering.compares": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "swap": 0.04491197687864554, "ordering.compares": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "Note: `sym2.map_id` will not simplify `sym2.map id z` due to `sym2.map_congr`.\n", "keywords": {"Note": 0.06073113495971585, "congr": 0.06073113495971585, "simplify": 0.103096657787716, "due": 0.103096657787716}}, {"docstring": "Special case of `normed_space.eq_iff_forall_dual_eq`.\n", "keywords": {"normed": 0.04491197687864554, "space.eq": 0.04491197687864554, "iff": 0.04491197687864554, "forall": 0.04491197687864554, "dual": 0.04491197687864554, "Special case": 0.04940384002065631, "Special": 0.15831692877998726, "case": 0.29736558256021506}}, {"docstring": "The element `0` is left-regular if and only if `R` is trivial.\n", "keywords": {"element": 0.09568045026443411, "trivial": 0.09568045026443411, "left-regular": 0.15831692877998726}}, {"docstring": "Colex is an extension of the base ordering on \u03b1.\n", "keywords": {"base ordering": 0.09700399286574239, "Colex": 0.15831692877998726, "extension": 0.29736558256021506, "base": 0.29736558256021506, "ordering": 0.29736558256021506}}, {"docstring": "An additive group homomorphism sends negations to negations.\n", "keywords": {"additive group homomorphism": 0.007321883374053632, "group homomorphism sends": 0.007321883374053632, "homomorphism sends negations": 0.010962043841203115, "additive group": 0.03663237450220032, "group homomorphism": 0.03663237450220032, "homomorphism sends": 0.03663237450220032, "sends negations": 0.05417025203414716, "negations": 0.13667842094541144, "additive": 0.1879836817695587, "group": 0.1879836817695587, "homomorphism": 0.1879836817695587, "sends": 0.1879836817695587, "negations to negations": 0.2470711517255815}}, {"docstring": " If `s : set \u03b1` is a nonempty countable set, then there exists a map `f : \u2115 \u2192 \u03b1` such that `s = range f`.\n", "keywords": {"nonempty countable set": 0.010494743012823167, "exists a map": 0.021567786782198985, "nonempty countable": 0.035715520099333646, "countable set": 0.05259515133015473, "map": 0.11369206228658875, "range": 0.11369206228658875, "set": 0.13453835116331675, "nonempty": 0.18569843656348187, "countable": 0.18569843656348187, "exists": 0.18569843656348187}}, {"docstring": "`part` eta expansion\n", "keywords": {"eta expansion": 0.02570861714399338, "part": 0.04491197687864554, "eta": 0.15831692877998726, "expansion": 0.15831692877998726}}, {"docstring": "`unique_diff_within_at` achieves its goal: it implies the uniqueness of the derivative.\n", "keywords": {"achieves its goal": 0.009239332327148086, "implies the uniqueness": 0.02570861714399338, "unique": 0.04491197687864554, "diff": 0.04491197687864554, "achieves": 0.09568045026443411, "goal": 0.09568045026443411, "derivative": 0.09568045026443411, "implies": 0.15831692877998726, "uniqueness": 0.15831692877998726}}, {"docstring": " The restriction of a reflexive bilinear form `B` onto a submodule `W` is nondegenerate if `disjoint W (B.orthogonal W)`.\n", "keywords": {"reflexive bilinear form": 0.0010606143890052174, "bilinear form": 0.00899321792126428, "reflexive bilinear": 0.013527995261974615, "B.orthogonal": 0.04776309965539685, "form": 0.0771485953923296, "submodule": 0.0771485953923296, "disjoint": 0.0771485953923296, "restriction": 0.1155310835876123, "reflexive": 0.1155310835876123, "bilinear": 0.1155310835876123, "nondegenerate": 0.1155310835876123}}, {"docstring": " The centroid of a face of a simplex as the centroid of a subset of the points.\n", "keywords": {"centroid": 0.042981588758132815, "points": 0.08293109455034965, "face": 0.11521656054299435, "simplex": 0.11521656054299435, "subset": 0.11521656054299435}}, {"docstring": "The RHS looks like the definition of `complete_lattice.independent`.\n", "keywords": {"complete": 0.04491197687864554, "lattice.independent": 0.04491197687864554, "RHS": 0.08596317751626563, "definition": 0.15831692877998726}}, {"docstring": "The complex cosine function is everywhere differentiable, with the derivative `-sin x`.\n", "keywords": {"complex cosine function": 0.0042542192213185686, "complex cosine": 0.02570861714399338, "cosine function": 0.02570861714399338, "differentiable": 0.09568045026443411, "derivative": 0.09568045026443411, "sin": 0.09568045026443411, "complex": 0.15831692877998726, "cosine": 0.15831692877998726, "function": 0.15831692877998726}}, {"docstring": "Composition of first-order homomorphisms is associative.\n", "keywords": {"Composition of first-order": 0.04940384002065631, "homomorphisms is associative": 0.04940384002065631, "first-order homomorphisms": 0.09700399286574239, "Composition": 0.15831692877998726, "associative": 0.15831692877998726, "first-order": 0.29736558256021506, "homomorphisms": 0.29736558256021506}}, {"docstring": "Convex hull of `s` is bounded if and only if `s` is bounded.\n", "keywords": {"Convex hull": 0.02391462167226668, "bounded": 0.10901343189444501, "Convex": 0.11984314898676356, "hull": 0.19488865479360015}}, {"docstring": "See `add_tsub_cancel_left` for the equality if `contravariant_class \u03b1 \u03b1 (+) (\u2264)`.\n", "keywords": {"add": 0.04491197687864554, "tsub": 0.04491197687864554, "cancel": 0.04491197687864554, "left": 0.04491197687864554, "contravariant": 0.04491197687864554, "class": 0.09568045026443411, "equality": 0.15831692877998726}}, {"docstring": "Uses `left` co(ntra)variant.\n", "keywords": {"left": 0.04491197687864554, "ntra": 0.04491197687864554, "variant": 0.04491197687864554}}, {"docstring": "`abs : \u2124 \u2192 \u2124` is a Euclidean absolute value\n", "keywords": {"Euclidean absolute": 0.013797198203993007, "abs": 0.04491197687864554, "Euclidean": 0.08596317751626563, "absolute": 0.15831692877998726}}, {"docstring": " The indicator function of a measurable set is McShane integrable with respect to any locally-finite measure.\n", "keywords": {"locally-finite measure": 0.04940384002065631, "indicator function": 0.09700399286574239, "measurable set": 0.09700399286574239, "set is McShane": 0.09700399286574239, "McShane integrable": 0.09700399286574239, "integrable with respect": 0.09700399286574239, "measure": 0.15831692877998726, "indicator": 0.29736558256021506, "function": 0.29736558256021506, "measurable": 0.29736558256021506, "set": 0.29736558256021506, "McShane": 0.29736558256021506, "integrable": 0.29736558256021506, "respect": 0.29736558256021506, "locally-finite": 0.29736558256021506}}, {"docstring": " In the specific case of multilinear maps on spaces indexed by `fin (n+1)`, where one can build an element of `\u03a0(i : fin (n+1)), M i` using `cons`, one can express directly the additivity of a multilinear map along the first variable.\n", "keywords": {"specific case": 0.019759017604293553, "spaces indexed": 0.019759017604293553, "build an element": 0.019759017604293553, "express directly": 0.019759017604293553, "directly the additivity": 0.019759017604293553, "fin": 0.020224371215251474, "multilinear maps": 0.021261181864573712, "case of multilinear": 0.04925743771710562, "maps on spaces": 0.04925743771710562, "cons": 0.055012255605756503, "multilinear": 0.07214318191126844, "variable": 0.0937866855411403, "specific": 0.13919828894679062, "case": 0.13919828894679062, "spaces": 0.13919828894679062, "indexed": 0.13919828894679062, "build": 0.13919828894679062, "element": 0.13919828894679062, "express": 0.13919828894679062, "directly": 0.13919828894679062}}, {"docstring": "**Alias** of the reverse direction of simple_graph.clique_finset_eq_empty_iff`.\n", "keywords": {"direction of simple": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "graph.clique": 0.04491197687864554, "finset": 0.04491197687864554, "empty": 0.04491197687864554, "iff": 0.04491197687864554, "simple": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "If `S` is a finite `R`-algebra, then `S' = M\u207b\u00b9S` is a finite `R' = M\u207b\u00b9R`-algebra.\n", "keywords": {"algebra": 0.02245598843932277, "finite": 0.0385742976961648}}, {"docstring": " If words `w\u2081 w\u2082` are such that `w\u2081` reduces to `w\u2082`, then `w\u2082` reduces to the maximal reduction of `w\u2081`.\n", "keywords": {"maximal reduction": 0.00909249141367454, "reduces": 0.04408578671136769, "words": 0.07432985245389279, "maximal": 0.09492398510093508, "reduction": 0.09492398510093508}}, {"docstring": " The pigeonhole principle for finitely many pigeons counted by weight, strict inequality version: if the total weight of a finite set of pigeons is greater than `n \u2022 b`, and they are sorted into `n` pigeonholes, then for some pigeonhole, the total weight of the pigeons in this pigeonhole is greater than `b`.\n", "keywords": {"strict inequality version": 0.0012662995225527988, "total weight": 0.007245302510657987, "strict inequality": 0.012918819419196299, "inequality version": 0.012918819419196299, "principle for finitely": 0.017936971576688186, "finite set": 0.017936971576688186, "pigeons counted": 0.029363490562258676, "pigeonhole principle": 0.03442282906640187, "weight": 0.044473945718881316, "total": 0.05352806907007824, "greater": 0.05352806907007824, "counted by weight": 0.061335376282171984, "pigeons": 0.0716314181800122, "pigeons is greater": 0.07523765361720003, "pigeonhole": 0.08356282104223589, "finitely many pigeons": 0.09186208269511821, "set of pigeons": 0.09186208269511821, "strict": 0.09608023833092227, "version": 0.09608023833092227, "pigeonhole is greater": 0.09964315109307198}}, {"docstring": " Write the iterated Fr\u00e9chet derivative as the composition of a continuous linear equiv and the iterated derivative.\n", "keywords": {"iterated Fr\u00e9chet derivative": 0.0021685808594799666, "continuous linear equiv": 0.002950351281893197, "iterated Fr\u00e9chet": 0.011000128179261149, "Write the iterated": 0.0141210054546179, "Fr\u00e9chet derivative": 0.014265107890262672, "continuous linear": 0.020225813225353943, "linear equiv": 0.020225813225353943, "iterated derivative": 0.02861065623655176, "iterated": 0.07334489383741181, "Fr\u00e9chet": 0.07417313840262335, "derivative": 0.094808423351325, "Write": 0.09492398510093508, "composition": 0.1408007092310104, "continuous": 0.1408007092310104, "linear": 0.1408007092310104, "equiv": 0.1408007092310104}}, {"docstring": " If `A \u2282 B`, then `A` is less than `B` in the colex order. Note the converse does not hold, as `\u2286` is not a linear order.\n", "keywords": {"colex order": 0.041258687514342134, "linear order": 0.10423034356167891, "order": 0.1069960715371627, "Note the converse": 0.17375126351151512, "colex": 0.18516501832552387, "Note": 0.33559480906340394, "hold": 0.33559480906340394, "converse": 0.44109960011701166, "linear": 0.44109960011701166}}, {"docstring": "**Alias** of mul_lt_mul_left'`.\n", "keywords": {"Alias": 0.035514607549195436, "left": 0.05706283858652404, "mul": 0.07571113878390312}}, {"docstring": "**Alias** of the reverse direction of smooth_bump_covering.is_subordinate_to_bump_covering`.\n", "keywords": {"bump": 0.019053917256533312, "direction of smooth": 0.020744656539556924, "Alias": 0.03381806651421549, "reverse direction": 0.03439110359613085, "covering.is": 0.0528063806271324, "subordinate": 0.0528063806271324, "covering": 0.0528063806271324, "smooth": 0.11145728654016383, "reverse": 0.1823394614884183, "direction": 0.1823394614884183}}, {"docstring": " If `f` is a Lipschitz continuous map, then the Hausdorff dimension of its range is at most the Hausdorff dimension of its domain.\n", "keywords": {"Lipschitz continuous map": 0.002282351874877137, "Hausdorff dimension": 0.005792248312894246, "Lipschitz continuous": 0.018691730414022122, "continuous map": 0.0233550736766052, "Hausdorff": 0.03846728917580122, "dimension": 0.07442578585270058, "Lipschitz": 0.09519633810991462, "map": 0.11840455484321102, "domain": 0.11840455484321102, "continuous": 0.19274649316101516, "range": 0.19274649316101516}}, {"docstring": "If a function is integrable with respect to a given measure `\u03bc` then it is interval integrable  with respect to `\u03bc` on `interval a b`.\n", "keywords": {"integrable with respect": 0.009678262319695142, "interval integrable": 0.03459463622248465, "function is integrable": 0.05863499612301378, "respect": 0.05888572039821348, "integrable": 0.08061786523087176, "measure": 0.10159647344475727, "interval": 0.10369247975016448, "function": 0.1501629736875757}}, {"docstring": " Let `f` be a function continuous on a convex (or, equivalently, connected) subset `D` of the real line. If `f` is differentiable on the interior of `D` and `C < f'`, then `f` grows faster than `C * x` on `D`, i.e., `C * (y - x) < f y - f x` whenever `x, y \u2208 D`, `x < y`.\n", "keywords": {"real line": 0.007948096222458798, "function continuous": 0.010159422250580143, "equivalently": 0.05899937629682816, "connected": 0.05899937629682816, "subset": 0.05899937629682816, "grows faster": 0.06815467895249562, "convex": 0.07862947958994491, "line": 0.07862947958994491, "function": 0.10028582371075691, "continuous": 0.10028582371075691, "real": 0.10028582371075691, "grows": 0.22862739428695167, "differentiable": 0.2790829227183407, "interior": 0.2790829227183407, "faster": 0.2790829227183407}}, {"docstring": "Composing two additions on the right by `y` and `x` is equal to a addition on the right by `y + x`.\n", "keywords": {"Composing two additions": 0.062237506822244895, "Composing": 0.11984314898676356, "equal": 0.19488865479360015, "additions": 0.21802686378889002, "addition": 0.21802686378889002}}, {"docstring": " If `p` is a prime that does not divide `n`, then the minimal polynomials of a primitive `n`-th root of unity `\u03bc` and of `\u03bc ^ p` are the same.\n", "keywords": {"root of unity": 0.00899321792126428, "minimal polynomials": 0.013527995261974615, "divide": 0.0771485953923296, "primitive": 0.0771485953923296, "unity": 0.0771485953923296, "prime": 0.1155310835876123, "minimal": 0.1155310835876123, "polynomials": 0.1155310835876123, "root": 0.1155310835876123}}, {"docstring": " If `f` has an invertible derivative `f'` at `a` in the sense of strict differentiability `(hf)`, then the inverse function `hf.local_inverse f` has derivative `f'.symm` at `f a`.\n", "keywords": {"invertible derivative": 0.00793291522230749, "strict differentiability": 0.008030297802615095, "inverse function": 0.009446450868848455, "sense of strict": 0.010660048110124063, "derivative": 0.038317234451900446, "hf.local": 0.055174169687121036, "inverse": 0.06032180892480273, "differentiability": 0.07756772112218133, "function": 0.07756772112218133, "symm": 0.07756772112218133, "invertible": 0.10270155830966059, "sense": 0.10270155830966059, "strict": 0.10270155830966059}}, {"docstring": "A finite set can be separated by open sets.\n", "keywords": {"separated by open": 0.037831312533597124, "finite set": 0.0562460611896591, "open sets": 0.0562460611896591, "finite": 0.19092478917347616, "separated": 0.19092478917347616, "open": 0.19092478917347616, "set": 0.27891038992107275, "sets": 0.27891038992107275}}, {"docstring": " Converse to the mean value inequality: if `f` is differentiable at `x\u2080` and `C`-lipschitz on a neighborhood of `x\u2080` then it its derivative at `x\u2080` has norm bounded by `C`. Version using `fderiv`.\n", "keywords": {"norm bounded": 0.02249651976012989, "Converse": 0.10028582371075691, "inequality": 0.10028582371075691, "lipschitz": 0.10028582371075691, "differentiable": 0.14832923246533666, "neighborhood": 0.14832923246533666, "derivative": 0.14832923246533666, "norm": 0.14832923246533666, "bounded": 0.14832923246533666, "fderiv": 0.17881754828257995, "Version": 0.2790829227183407}}, {"docstring": "Composition by continuous linear maps on the left preserves `C^n` functions on domains.\n", "keywords": {"continuous linear maps": 0.0042542192213185686, "functions on domains": 0.009239332327148086, "Composition by continuous": 0.015380821171891606, "left preserves": 0.015380821171891606, "continuous linear": 0.02570861714399338, "linear maps": 0.02570861714399338, "Composition": 0.09568045026443411, "preserves": 0.09568045026443411, "functions": 0.09568045026443411, "domains": 0.09568045026443411, "continuous": 0.15831692877998726, "linear": 0.15831692877998726, "maps": 0.15831692877998726, "left": 0.15831692877998726}}, {"docstring": "The topological closure of a normal additive subgroup is normal.\n", "keywords": {"normal additive subgroup": 0.010962043841203115, "topological closure": 0.03663237450220032, "additive subgroup": 0.03663237450220032, "normal additive": 0.05417025203414716, "subgroup is normal": 0.11793310824193863, "normal": 0.13667842094541144, "topological": 0.1879836817695587, "closure": 0.1879836817695587, "additive": 0.1879836817695587, "subgroup": 0.1879836817695587}}, {"docstring": "Two measures are equal if they have equal restrictions on a spanning collection of sets  (formulated using `sUnion`).\n", "keywords": {"collection of sets": 0.020744656539556924, "spanning collection": 0.03439110359613085, "equal restrictions": 0.05033870131288873, "sUnion": 0.0528063806271324, "measures are equal": 0.11047974441476761, "sets": 0.11145728654016383, "formulated": 0.11145728654016383, "equal": 0.1314201551237121, "measures": 0.1823394614884183, "restrictions": 0.1823394614884183, "spanning": 0.1823394614884183, "collection": 0.1823394614884183}}, {"docstring": "A bound on any top part of the sum in LYM in terms of the size of `falling k \ud835\udc9c`.\n", "keywords": {"sum in LYM": 0.007743432063478832, "LYM in terms": 0.007743432063478832, "top part": 0.013527995261974615, "LYM": 0.06650965107397505, "falling": 0.0771485953923296, "bound": 0.1155310835876123, "top": 0.1155310835876123, "part": 0.1155310835876123, "sum": 0.1155310835876123, "terms": 0.1155310835876123, "size": 0.1155310835876123}}, {"docstring": " At a continuous linear equivalence `e : E \u2243L[\ud835\udd5c] F` between Banach spaces, the operation of inversion is `C^n`, for all `n`.\n", "keywords": {"continuous linear equivalence": 0.0025258761156662004, "Banach spaces": 0.008293207122436794, "linear equivalence": 0.015380821171891606, "continuous linear": 0.02570861714399338, "operation of inversion": 0.02570861714399338, "Banach": 0.08596317751626563, "equivalence": 0.09568045026443411, "spaces": 0.09568045026443411, "continuous": 0.15831692877998726, "linear": 0.15831692877998726, "operation": 0.15831692877998726, "inversion": 0.15831692877998726}}, {"docstring": "Exactly `n / p` naturals in `[1, n]` are multiples of `p`.\n", "keywords": {"naturals": 0.09568045026443411, "multiples": 0.15831692877998726}}, {"docstring": "The first projection in a product is a trivial topological fiber bundle.\n", "keywords": {"topological fiber bundle": 0.0025258761156662004, "trivial topological fiber": 0.0042542192213185686, "fiber bundle": 0.015380821171891606, "trivial topological": 0.02570861714399338, "topological fiber": 0.02570861714399338, "bundle": 0.09568045026443411, "projection": 0.15831692877998726, "product": 0.15831692877998726, "trivial": 0.15831692877998726, "topological": 0.15831692877998726, "fiber": 0.15831692877998726}}, {"docstring": "We can reexpress a sum over `p.support` as a sum over `range (p.nat_degree + 1)`.\n", "keywords": {"reexpress a sum": 0.02681089848262901, "p.support": 0.05393656033701752, "range": 0.05393656033701752, "p.nat": 0.05393656033701752, "degree": 0.05393656033701752, "sum": 0.07030442419566416, "reexpress": 0.18569843656348187}}, {"docstring": "Replacing a set by its closure does not change the Hausdorff edistance.\n", "keywords": {"Hausdorff edistance": 0.023458380875189744, "change the Hausdorff": 0.04498862876540802, "Replacing a set": 0.04940384002065631, "Hausdorff": 0.1447773057422032, "Replacing": 0.15831692877998726, "edistance": 0.15831692877998726, "set": 0.29736558256021506, "closure": 0.29736558256021506, "change": 0.29736558256021506}}, {"docstring": "Two vectors with equal norms are equal if and only if they have zero angle between them.\n", "keywords": {"equal norms": 0.0562460611896591, "vectors with equal": 0.12194096740933036, "norms are equal": 0.12194096740933036, "equal": 0.13945519496053638, "vectors": 0.19092478917347616, "norms": 0.19092478917347616, "angle": 0.19092478917347616}}, {"docstring": " The sum of two upper semicontinuous functions is upper semicontinuous. Formulated with `[has_continuous_add]`. The primed version of the lemma uses an explicit continuity assumption on addition, for application to `ereal`.\n", "keywords": {"upper semicontinuous functions": 0.007327296516767814, "upper semicontinuous": 0.016851204808897166, "semicontinuous functions": 0.03821554584844725, "functions is upper": 0.08667762295794612, "upper": 0.09028232117950413, "semicontinuous": 0.09028232117950413, "sum": 0.2038542769622493, "functions": 0.2038542769622493, "continuous": 0.2425057621221154, "add": 0.2425057621221154, "ereal": 0.31807004650910337, "assumption on addition": 0.3438068115293896, "Formulated": 0.36270881646612724, "explicit continuity assumption": 0.44505054844584063, "addition": 0.4533135999375753, "primed version": 0.46742777496856974, "explicit continuity": 0.46742777496856974, "continuity assumption": 0.46742777496856974, "primed": 0.5643894539005718, "version": 0.5643894539005718}}, {"docstring": "A field extension is integral if it is finite.\n", "keywords": {"field extension": 0.02570861714399338, "extension is integral": 0.02570861714399338, "finite": 0.09568045026443411, "field": 0.15831692877998726, "extension": 0.15831692877998726, "integral": 0.15831692877998726}}, {"docstring": " The negative of a `C^n` function within a domain at a point is `C^n` within this domain at this point.\n", "keywords": {"domain": 0.07915846438999359, "function": 0.10028582371075691, "point": 0.10191687733271076, "negative": 0.14832923246533666}}, {"docstring": "Given a compact set `K` inside an open set `U`, there is a open neighborhood `V` of `0` such that `V + K \u2286 U`.\n", "keywords": {"compact set": 0.03147064175861185, "open neighborhood": 0.03672426843567709, "open set": 0.04715305578486013, "set": 0.07726414307411157, "inside an open": 0.08132750272243246, "inside": 0.12156210109285605, "neighborhood": 0.12156210109285605, "open": 0.14570071893270706, "compact": 0.19744254481508877}}, {"docstring": "`some_vector` is nonzero.\n", "keywords": {"vector": 0.04491197687864554, "nonzero": 0.15831692877998726}}, {"docstring": "A nonzero left-invariant regular measure gives positive mass to any open set.\n", "keywords": {"nonzero left-invariant regular": 0.03339840940482845, "left-invariant regular measure": 0.03339840940482845, "open set": 0.04940384002065631, "nonzero left-invariant": 0.09700399286574239, "left-invariant regular": 0.09700399286574239, "regular measure": 0.09700399286574239, "measure gives positive": 0.09700399286574239, "positive mass": 0.09700399286574239, "set": 0.15831692877998726, "nonzero": 0.29736558256021506, "left-invariant": 0.29736558256021506, "regular": 0.29736558256021506, "measure": 0.29736558256021506, "positive": 0.29736558256021506, "mass": 0.29736558256021506, "open": 0.29736558256021506}}, {"docstring": "The identity affine map acts as the identity.\n", "keywords": {"affine map acts": 0.007693932974338547, "identity affine map": 0.008593502756179337, "affine map": 0.037831312533597124, "map acts": 0.037831312533597124, "identity affine": 0.04212793185246166, "identity": 0.10586606907408062, "affine": 0.19092478917347616, "map": 0.19092478917347616, "acts": 0.19092478917347616}}, {"docstring": "Bisimulation principle using `liftr` to match and relate children of two trees.\n", "keywords": {"liftr": 0.04491197687864554, "Bisimulation principle": 0.04940384002065631, "match and relate": 0.09700399286574239, "relate children": 0.09700399286574239, "Bisimulation": 0.15831692877998726, "trees": 0.15831692877998726, "principle": 0.29736558256021506, "match": 0.29736558256021506, "relate": 0.29736558256021506, "children": 0.29736558256021506}}, {"docstring": "A vertex lies in the corresponding altitude.\n", "keywords": {"vertex lies": 0.09700399286574239, "altitude": 0.15831692877998726, "vertex": 0.29736558256021506, "lies": 0.29736558256021506}}, {"docstring": " In a dense conditionally complete linear order, the set of preconnected sets is exactly the set of the intervals `Icc`, `Ico`, `Ioc`, `Ioo`, `Ici`, `Ioi`, `Iic`, `Iio`, `(-\u221e, +\u221e)`, or `\u2205`. Though one can represent `\u2205` as `(Inf s, Inf s)`, we include it into the list of possible cases to improve readability.\n", "keywords": {"complete linear order": 0.003004796866257115, "dense conditionally complete": 0.0041687127370045535, "conditionally complete linear": 0.0041687127370045535, "linear order": 0.018380962720209053, "preconnected sets": 0.02177018079485638, "dense conditionally": 0.025369349139877997, "conditionally complete": 0.025369349139877997, "complete linear": 0.025369349139877997, "set of preconnected": 0.03860675646729239, "Icc": 0.04221683239888637, "Ico": 0.04221683239888637, "Ioc": 0.04221683239888637, "Ioo": 0.04221683239888637, "Ici": 0.04221683239888637, "Ioi": 0.04221683239888637, "Iic": 0.04221683239888637, "Iio": 0.04221683239888637, "set": 0.06772738676177427, "order": 0.11474756674019214, "intervals": 0.11474756674019214}}, {"docstring": " If all closed balls of large enough radius are compact, then the space is proper. Especially useful when the lower bound for the radius is 0.\n", "keywords": {"space is proper": 0.022301551378828607, "closed balls": 0.032945302382736935, "balls of large": 0.032945302382736935, "radius are compact": 0.09268781445275681, "compact": 0.1221512649852118, "proper": 0.1221512649852118, "large enough radius": 0.13559353774095484, "radius": 0.1689941604500969, "closed": 0.1785903903600119, "balls": 0.1785903903600119, "large": 0.1785903903600119, "space": 0.1785903903600119, "lower bound": 0.22714863390129153, "lower": 0.4302357358329322, "bound": 0.4302357358329322}}, {"docstring": " In a strictly convex space, if `x` and `y` are not in the same ray, then `\u2225x + y\u2225 < \u2225x\u2225 + \u2225y\u2225`.\n", "keywords": {"strictly convex space": 0.0006400448072512631, "convex space": 0.0065920978564317735, "strictly convex": 0.009239332327148086, "space": 0.06844581806138879, "ray": 0.06844581806138879, "strictly": 0.09568045026443411, "convex": 0.09568045026443411}}, {"docstring": " A function on `[a, b]` with the norm of the derivative within `[a, b]` bounded by `C` satisfies `\u2225f x - f a\u2225 \u2264 C * (x - a)`, `deriv_within` version.\n", "keywords": {"satisfies": 0.04491197687864554, "deriv": 0.04491197687864554, "version": 0.04491197687864554, "bounded": 0.06341998722529081, "function": 0.08438900089923473, "norm": 0.08438900089923473, "derivative": 0.08438900089923473}}, {"docstring": "decomposing `x : \u03b9 \u2192 R` as a sum along the canonical basis\n", "keywords": {"decomposing": 0.04491197687864554, "canonical basis": 0.04940384002065631, "basis": 0.15831692877998726, "sum": 0.29736558256021506, "canonical": 0.29736558256021506}}, {"docstring": "A local minimum of a convex function is a global minimum, restricted to a set `s`.\n", "keywords": {"convex function": 0.01281102963567174, "local minimum": 0.015824512606866667, "global minimum": 0.015824512606866667, "minimum": 0.06925543344827902, "restricted": 0.08088209179216702, "set": 0.08088209179216702, "local": 0.11246769819744629, "convex": 0.11246769819744629, "function": 0.11246769819744629, "global": 0.11246769819744629}}, {"docstring": "If the arguments are linearly dependent then the result is `0`.\n", "keywords": {"arguments are linearly": 0.02570861714399338, "linearly dependent": 0.02570861714399338, "arguments": 0.15831692877998726, "linearly": 0.15831692877998726, "dependent": 0.15831692877998726, "result": 0.15831692877998726}}, {"docstring": "**Alias** of the forward direction of multiset.nodup_powerset`.\n", "keywords": {"direction of multiset.nodup": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "powerset": 0.04491197687864554, "multiset.nodup": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "**Alias** of the reverse direction of linear_independent_unique_iff`.\n", "keywords": {"direction of linear": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "independent": 0.04491197687864554, "unique": 0.04491197687864554, "iff": 0.04491197687864554, "linear": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " Contant size closed neighborhoods of the diagonal form a basis of the uniformity filter.\n", "keywords": {"Contant size closed": 0.0025258761156662004, "size closed neighborhoods": 0.0042542192213185686, "Contant size": 0.015380821171891606, "uniformity filter": 0.015380821171891606, "size closed": 0.02570861714399338, "closed neighborhoods": 0.02570861714399338, "diagonal form": 0.02570861714399338, "form a basis": 0.02570861714399338, "Contant": 0.09568045026443411, "filter": 0.09568045026443411, "size": 0.15831692877998726, "closed": 0.15831692877998726, "neighborhoods": 0.15831692877998726, "diagonal": 0.15831692877998726, "form": 0.15831692877998726, "basis": 0.15831692877998726, "uniformity": 0.15831692877998726}}, {"docstring": "Given a homomorphism from a rack to a group, it factors through the enveloping group.\n", "keywords": {"enveloping group": 0.014618695703961359, "group": 0.05201485183844375, "homomorphism": 0.1384995633470844, "rack": 0.1384995633470844, "factors": 0.1384995633470844, "enveloping": 0.1384995633470844}}, {"docstring": " Let `\u03c6 : R[x] \u2192 S[x]` be an additive map, `k : \u2115` a bound, and `fu : \u2115 \u2192 \u2115` a \"sufficiently monotone\" map.  Assume also that * `\u03c6` maps to `0` all monomials of degree less than `k`, * `\u03c6` maps each monomial `m` in `R[x]` to a polynomial `\u03c6 m` of degree `fu (deg m)`. Then, `\u03c6` maps each polynomial `p` in `R[x]` to a polynomial of degree `fu (deg p)`.\n", "keywords": {"sufficiently monotone": 0.03149420869887537, "additive map": 0.11988339197476257, "degree": 0.15159199089238962, "maps": 0.15950090807009343, "polynomial": 0.1691105907937353, "bound": 0.1747358244868323, "sufficiently": 0.1747358244868323, "monotone": 0.1747358244868323, "deg": 0.19238267336760073, "additive": 0.22371845100014517, "map": 0.23925136210514017, "Assume": 0.4237517736270023, "monomials": 0.5280379748509242, "monomial": 0.5280379748509242, "monomials of degree": 0.5706738472739049, "polynomial of degree": 0.6515355825144855, "maps each monomial": 0.8262648921405376, "maps each polynomial": 0.8476901036130431}}, {"docstring": " Dropping the elements up to `l\u2081.length + i` in `l\u2081 + l\u2082` is the same as dropping the elements up to `i` in `l\u2082`.\n", "keywords": {"Dropping the elements": 0.006466096556013256, "elements": 0.049279142876773374, "Dropping": 0.06476922048698919, "length": 0.09100964857932636}}, {"docstring": " A version of `antisymm'` with `r` explicit.  This lemma matches the lemmas from lean core in `init.algebra.classes`, but is missing there.\n", "keywords": {"explicit": 0.07258934678807509, "antisymm": 0.1497391925531594, "version": 0.23843406751375792, "lean core": 0.3724275679522048, "lemma matches": 0.4624443418465675, "matches": 0.5209261917026199, "lean": 0.5209261917026199, "core": 0.5209261917026199, "missing": 0.5209261917026199, "lemma": 0.6070212988002157, "lemmas": 0.6070212988002157, "matches the lemmas": 0.8044041031124162, "lemmas from lean": 0.8044041031124162}}, {"docstring": "The injection into a pi group with the same values commutes.\n", "keywords": {"commutes": 0.09568045026443411, "injection": 0.15831692877998726, "group": 0.15831692877998726}}, {"docstring": " A series of non-negative real numbers converges to `r` in the sense of `has_sum` if and only if the sequence of partial sum converges to `r`.\n", "keywords": {"non-negative real numbers": 0.0028710480839241738, "real numbers converges": 0.0029834933651055333, "partial sum converges": 0.0040547768529782995, "series of non-negative": 0.01986718810864864, "non-negative real": 0.01986718810864864, "real numbers": 0.01986718810864864, "sequence of partial": 0.01986718810864864, "numbers converges": 0.02063316919723774, "partial sum": 0.02685070135884219, "sum converges": 0.02789329634803439, "converges": 0.07242189318011968, "sum": 0.09367462051261369, "series": 0.13957138628574278, "non-negative": 0.13957138628574278, "real": 0.13957138628574278, "numbers": 0.13957138628574278, "sense": 0.13957138628574278, "sequence": 0.13957138628574278, "partial": 0.13957138628574278}}, {"docstring": "A H\u00f6lder continuous function is uniformly continuous\n", "keywords": {"H\u00f6lder continuous function": 0.0055304017961131935, "H\u00f6lder continuous": 0.02714404025350355, "function is uniformly": 0.037831312533597124, "continuous function": 0.0562460611896591, "uniformly continuous": 0.0562460611896591, "H\u00f6lder": 0.09474983170388594, "continuous": 0.13945519496053638, "function": 0.19092478917347616, "uniformly": 0.19092478917347616}}, {"docstring": " A version of Bolzano-Weistrass: in a proper metric space (eg. $\u211d^n$), every bounded sequence has a converging subsequence.\n", "keywords": {"proper metric space": 0.0010606143890052174, "version of Bolzano-Weistrass": 0.00899321792126428, "metric space": 0.00899321792126428, "converging subsequence": 0.00899321792126428, "proper metric": 0.013527995261974615, "bounded sequence": 0.013527995261974615, "Bolzano-Weistrass": 0.0771485953923296, "space": 0.0771485953923296, "subsequence": 0.0771485953923296, "version": 0.1155310835876123, "proper": 0.1155310835876123, "metric": 0.1155310835876123, "bounded": 0.1155310835876123, "sequence": 0.1155310835876123, "converging": 0.1155310835876123}}, {"docstring": "There is an irrational number `r` between any two reals `x < r < y`.\n", "keywords": {"irrational number": 0.015380821171891606, "number": 0.09568045026443411, "reals": 0.09568045026443411, "irrational": 0.15831692877998726}}, {"docstring": "Congruence lemma for constructing `ex.exp`.\n", "keywords": {"ex.exp": 0.04491197687864554, "Congruence lemma": 0.04940384002065631, "lemma for constructing": 0.04940384002065631, "Congruence": 0.15831692877998726, "constructing": 0.15831692877998726, "lemma": 0.29736558256021506}}, {"docstring": " If `f` is `C^1` within a conves set `s` at `x`, then it is Lipschitz on a neighborhood of `x` within `s`.\n", "keywords": {"conves set": 0.015380821171891606, "Lipschitz": 0.08596317751626563, "set": 0.09568045026443411, "conves": 0.15831692877998726, "neighborhood": 0.15831692877998726}}, {"docstring": "There exists a vertex of maximal degree. Note the assumption of being nonempty is necessary, as the lemma implies there exists a vertex.\n", "keywords": {"maximal degree": 0.04220829187219763, "exists a vertex": 0.06308029827222979, "exists": 0.1443434034241445, "degree": 0.1600514523587571, "implies there exists": 0.1849037767794334, "vertex": 0.19402892330378615, "vertex of maximal": 0.21877105951027842, "maximal": 0.2530367690088724, "Note the assumption": 0.27432053812932977, "Note": 0.39823908368262456, "lemma implies": 0.41281681384501107, "assumption": 0.540549862748956, "nonempty": 0.540549862748956, "lemma": 0.540549862748956, "implies": 0.540549862748956}}, {"docstring": "If a function is `C^n` on a set with `n \u2265 1`, then it is differentiable there.\n", "keywords": {"function": 0.15831692877998726, "set": 0.15831692877998726, "differentiable": 0.15831692877998726}}, {"docstring": "The number of square roots of `a` modulo `p` is determined by the Legendre symbol.\n", "keywords": {"Legendre symbol": 0.008293207122436794, "number of square": 0.02570861714399338, "square roots": 0.02570861714399338, "modulo": 0.04491197687864554, "Legendre": 0.08596317751626563, "symbol": 0.09568045026443411, "number": 0.15831692877998726, "square": 0.15831692877998726, "roots": 0.15831692877998726, "determined": 0.15831692877998726}}, {"docstring": "For nonzero `a` and `b`, the power of `p` in `a * b` is the sum of the powers in `a` and `b`\n", "keywords": {"nonzero": 0.09713402394201612, "sum": 0.14390902704051098, "power": 0.15142227756780624, "powers": 0.15142227756780624}}, {"docstring": "A version of `le_refl` where the argument is implicit\n", "keywords": {"refl": 0.04491197687864554, "argument is implicit": 0.04940384002065631, "implicit": 0.15831692877998726, "version": 0.29736558256021506, "argument": 0.29736558256021506}}, {"docstring": "The product of two dense embeddings is a dense embedding.\n", "keywords": {"dense embeddings": 0.05738242751169008, "dense": 0.11647786950765905, "product": 0.2040190808014209, "embeddings": 0.2329557390153181, "embedding": 0.2329557390153181}}, {"docstring": " The following statements are equivalent:  0. `s` is a neighborhood of `b` within `(-\u221e, b]` 1. `s` is a neighborhood of `b` within `[a, b]` 2. `s` is a neighborhood of `b` within `(a, b]` 3. `s` includes `(l, b]` for some `l \u2208 [a, b)` 4. `s` includes `(l, b]` for some `l < b`\n", "keywords": {"statements are equivalent": 0.03133086920238005, "neighborhood": 0.09329380483559131, "equivalent": 0.16221578214340981, "statements": 0.18727565368556606, "includes": 0.2028208170311357}}, {"docstring": "The distance between two functions is controlled by the supremum of the pointwise distances\n", "keywords": {"functions is controlled": 0.019557279302732804, "pointwise distances": 0.02635223776265893, "functions": 0.1384995633470844, "controlled": 0.1384995633470844, "supremum": 0.1384995633470844, "pointwise": 0.1384995633470844, "distance": 0.1853841766790467, "distances": 0.1853841766790467}}, {"docstring": " The affine span of a set is nonempty if and only if that set is.\n", "keywords": {"affine span": 0.037831312533597124, "set is nonempty": 0.04212793185246166, "set": 0.10586606907408062, "affine": 0.19092478917347616, "span": 0.19092478917347616, "nonempty": 0.19092478917347616}}, {"docstring": "If a nondegenerate configuration has a unique point on any two lines, then `|L| \u2264 |P|`.\n", "keywords": {"nondegenerate configuration": 0.02570861714399338, "unique point": 0.02570861714399338, "lines": 0.09568045026443411, "nondegenerate": 0.15831692877998726, "configuration": 0.15831692877998726, "unique": 0.15831692877998726, "point": 0.15831692877998726}}, {"docstring": "An element `a` is left-regular if and only if a positive power of `a` is left-regular.\n", "keywords": {"positive power": 0.020225813225353943, "left-regular": 0.07334489383741181, "element": 0.09492398510093508, "positive": 0.1408007092310104, "power": 0.1408007092310104}}, {"docstring": " Squashing at position `n + 1` and taking the tail is the same as squashing the tail of the sequence at position `n`.\n", "keywords": {"sequence at position": 0.00882206223677277, "taking the tail": 0.016325217578929938, "Squashing at position": 0.028217434738382143, "position": 0.03492260514064835, "squashing the tail": 0.050556604886202505, "tail": 0.06414714975840217, "Squashing": 0.08061786523087178, "taking": 0.12520420549175446, "sequence": 0.12520420549175446}}, {"docstring": " To show a property hold on all `triv_sq_zero_ext R M` it suffices to show it holds on terms of the form `inl r + inr m`.  This can be used as `induction x using triv_sq_zero_ext.ind`.\n", "keywords": {"property hold": 0.07074557046708173, "suffices to show": 0.07074557046708173, "holds on terms": 0.07074557046708173, "show": 0.12912164191809636, "triv": 0.14587031701600586, "show a property": 0.15063241725769852, "ext": 0.16205454282434614, "form": 0.16205454282434614, "inl": 0.16205454282434614, "inr": 0.16205454282434614, "show it holds": 0.22415243442140323, "ext.ind": 0.22989350183706597, "property": 0.25584912197094006, "suffices": 0.25584912197094006, "terms": 0.25584912197094006, "hold": 0.2582432838361927, "holds": 0.2582432838361927, "induction": 0.40179717860981823}}, {"docstring": "Additive closure of an additive subgroup `K` equals `K`\n", "keywords": {"additive subgroup": 0.03378800767844735, "equals": 0.055708263664958506, "Additive closure": 0.0562460611896591, "subgroup": 0.11718348279991213, "Additive": 0.13945519496053638, "closure": 0.19092478917347616}}, {"docstring": " Given a closed nonempty subset `s` of `\u03a0 (n : \u2115), E n`, there exists a Lipschitz retraction onto this set, i.e., a Lipschitz map with range equal to `s`, equal to the identity on `s`.\n", "keywords": {"closed nonempty subset": 0.0018272602444849633, "exists a Lipschitz": 0.010426938713311202, "Lipschitz retraction": 0.010426938713311202, "Lipschitz map": 0.010426938713311202, "nonempty subset": 0.012904998963208847, "closed nonempty": 0.019286283660143136, "map with range": 0.019286283660143136, "range equal": 0.019899995219590957, "Lipschitz": 0.037509884244594976, "equal": 0.07092334359166409, "subset": 0.09262176965879712, "set": 0.09262176965879712, "closed": 0.13755493784698053, "nonempty": 0.13755493784698053, "exists": 0.13755493784698053, "retraction": 0.13755493784698053, "map": 0.13755493784698053, "range": 0.13755493784698053, "identity": 0.13755493784698053}}, {"docstring": "Transfer `nontrivial` across an `equiv`\n", "keywords": {"Transfer": 0.04491197687864554, "nontrivial": 0.04491197687864554, "equiv": 0.04491197687864554}}, {"docstring": " If `m\u2081 s = op (m\u2082 s) (m\u2083 s)` for all `s`, then the same is true for `m\u2081.trim`, `m\u2082.trim`, and `m\u2083 s`.\n", "keywords": {"trim": 0.0385742976961648, "true": 0.10028582371075691}}, {"docstring": "**Alias** of the reverse direction of sub_le_iff_le_add'`.\n", "keywords": {"reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "add": 0.04491197687864554, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "Product of elements of an intermediate field indexed by a `finset` is in the intermediate_field.\n", "keywords": {"intermediate field indexed": 0.019080375154557187, "Product of elements": 0.02391462167226668, "finset": 0.05706283858652404, "field indexed": 0.05913243875864445, "intermediate field": 0.08940622963610957, "Product": 0.11984314898676356, "intermediate": 0.14323823713631006, "field": 0.14323823713631006, "elements": 0.19488865479360015, "indexed": 0.19488865479360015}}, {"docstring": "An induction principle for `cycle`. Use as `induction s using cycle.induction_on`.\n", "keywords": {"cycle": 0.07915015343857928, "induction principle": 0.14033512486368607, "induction": 0.2405027004070563, "principle": 0.25584912197094006, "cycle.induction": 0.40179717860981823}}, {"docstring": "If `x + y` is irrational, then at least one of `x` and `y` is irrational.\n", "keywords": {"irrational": 0.04784022513221706}}, {"docstring": " If `r` is less than the Hausdorff dimension of a set `s` in an (extended) metric space with second countable topology, then there exists a point `x \u2208 s` such that every neighborhood `t` of `x` within `s` has Hausdorff dimension greater than `r`.\n", "keywords": {"Hausdorff dimension greater": 0.0014906888180638103, "Hausdorff dimension": 0.005305484176445957, "metric space": 0.012741693123860753, "countable topology": 0.012741693123860753, "exists a point": 0.012741693123860753, "dimension greater": 0.019600059420660194, "Hausdorff": 0.03733604960380316, "extended": 0.05393656033701752, "dimension": 0.07030442419566416, "set": 0.09202664026077896, "metric": 0.09202664026077896, "topology": 0.09202664026077896, "point": 0.09202664026077896, "neighborhood": 0.09202664026077896, "space": 0.1367145963576765, "countable": 0.1367145963576765, "exists": 0.1367145963576765, "greater": 0.1367145963576765}}, {"docstring": " Shows that $\\sum_{k = 0}^{n - 1} (e^{X})^k = \\sum_{p = 0}^{\\infty} \\sum_{k = 0}^{n - 1} \\frac{k^p}{p!}X^p$.\n", "keywords": {"sum": 0.013272360467075578, "infty": 0.06200829367341607, "frac": 0.06200829367341607, "Shows": 0.09362243951986725}}, {"docstring": "The edist to a set is `< r` iff there exists a point in the set at edistance `< r`\n", "keywords": {"iff there exists": 0.021567786782198985, "exists a point": 0.035715520099333646, "set at edistance": 0.0710891909196062, "iff": 0.11369206228658875, "edistance": 0.11369206228658875, "set": 0.13453835116331675, "edist": 0.18569843656348187, "exists": 0.18569843656348187, "point": 0.18569843656348187}}, {"docstring": " The difference `f m\u2081 - f m\u2082` is controlled in terms of `\u2225f\u2225` and `\u2225m\u2081 - m\u2082\u2225`, less precise version. For a more precise but less usable version, see `norm_image_sub_le'`. The bound is `\u2225f m - f m'\u2225 \u2264 \u2225f\u2225 * card \u03b9 * \u2225m - m'\u2225 * (max \u2225m\u2225 \u2225m'\u2225) ^ (card \u03b9 - 1)`.\n", "keywords": {"controlled in terms": 0.01689091894243422, "precise version": 0.03014722468134647, "usable version": 0.05385823362294404, "version": 0.07528247607582737, "precise": 0.09718386225819198, "difference": 0.11057212704788692, "controlled": 0.1288811653661485, "terms": 0.1288811653661485, "card": 0.13886991981629124, "norm": 0.26298851409923496, "image": 0.26298851409923496, "usable": 0.33942671610833614, "max": 0.3420531601634506, "bound": 0.4281226415450457}}, {"docstring": " The **Jordan-H\u00f6lder** theorem, stated for any `jordan_holder_lattice`. If two composition series start and finish at the same place, they are equivalent.\n", "keywords": {"Jordan-H\u00f6lder": 0.05899937629682816, "theorem": 0.05899937629682816, "jordan": 0.05899937629682816, "holder": 0.05899937629682816, "lattice": 0.05899937629682816, "stated": 0.12363091320521931, "composition series start": 0.1829003496708144, "composition series": 0.2766850298235749, "series start": 0.2766850298235749, "start and finish": 0.2766850298235749, "place": 0.32883716426354986, "equivalent": 0.32883716426354986, "composition": 0.46553351027698087, "series": 0.46553351027698087, "start": 0.46553351027698087, "finish": 0.46553351027698087}}, {"docstring": "Introduction rule to prove that `b` is the supremum of `s`: it suffices to check that `b` is larger than all elements of `s`, and that this is not the case of any `w < b`. See `cSup_eq_of_forall_le_of_forall_lt_exists_gt` for a version in conditionally complete lattices.\n", "keywords": {"Introduction rule": 0.012425402340664025, "rule to prove": 0.016406548337108775, "suffices to check": 0.016406548337108775, "conditionally complete lattices": 0.03982929793930291, "forall": 0.06921048787109704, "Introduction": 0.09659898051390273, "complete lattices": 0.10001743800601984, "rule": 0.12705006278260775, "prove": 0.12705006278260775, "supremum": 0.12705006278260775, "suffices": 0.12705006278260775, "check": 0.12705006278260775, "larger": 0.12705006278260775, "elements": 0.12705006278260775, "case": 0.12705006278260775, "version in conditionally": 0.12705633976208477, "conditionally complete": 0.12705633976208477, "cSup": 0.20502090629626074, "exists": 0.20502090629626074, "lattices": 0.2708013337253117}}, {"docstring": " The sum of `x ^ i` as `x` ranges over a finite field of cardinality `q` is equal to `0` if `i < q - 1`.\n", "keywords": {"field of cardinality": 0.015380821171891606, "finite field": 0.02570861714399338, "ranges": 0.09568045026443411, "cardinality": 0.09568045026443411, "sum": 0.15831692877998726, "finite": 0.15831692877998726, "field": 0.15831692877998726, "equal": 0.15831692877998726}}, {"docstring": "Convergence in Lp implies convergence in measure.\n", "keywords": {"convergence in measure": 0.02683006950161641, "implies convergence": 0.04437656514447953, "Convergence": 0.10901343189444501, "measure": 0.11984314898676356, "implies": 0.19488865479360015}}, {"docstring": "We can reexpress a sum over `p.support` as a sum over `range n`, for any `n` satisfying `p.nat_degree < n`.\n", "keywords": {"reexpress a sum": 0.013774556686415815, "sum": 0.050219478173120675, "p.support": 0.053316999302383886, "satisfying": 0.053316999302383886, "p.nat": 0.053316999302383886, "degree": 0.053316999302383886, "range": 0.09101163530720666, "reexpress": 0.13528014248445303}}, {"docstring": "The partial application of a constant to a covariant operator is monotone.\n", "keywords": {"operator is monotone": 0.015380821171891606, "partial application": 0.02570861714399338, "covariant operator": 0.02570861714399338, "monotone": 0.09568045026443411, "partial": 0.15831692877998726, "application": 0.15831692877998726, "constant": 0.15831692877998726, "covariant": 0.15831692877998726, "operator": 0.15831692877998726}}, {"docstring": " Every positive `x` is between two successive integer powers of another `y` greater than one. This is the same as `exists_mem_Ico_zpow`, but with \u2264 and < the other way around.\n", "keywords": {"successive integer powers": 0.009001679881101624, "successive integer": 0.04188746641162499, "integer powers": 0.04188746641162499, "Ico": 0.11555589791117535, "positive": 0.12363091320521931, "greater": 0.12363091320521931, "exists": 0.17881754828257995, "mem": 0.17881754828257995, "zpow": 0.17881754828257995, "successive": 0.2005079697193566, "integer": 0.2005079697193566, "powers": 0.2005079697193566}}, {"docstring": "The composite of two additive monoid homomorphisms is an additive monoid homomorphism.\n", "keywords": {"additive monoid homomorphisms": 0.010207682009177325, "additive monoid": 0.02003358724493507, "monoid homomorphisms": 0.04006717448987014, "monoid": 0.08205340856523911, "additive": 0.1173736768400546, "composite": 0.20509004731457245, "homomorphisms": 0.2347473536801092}}, {"docstring": "**Alias** of the reverse direction of complete_lattice.well_founded_iff_is_Sup_finite_compact`.\n", "keywords": {"direction of complete": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "lattice.well": 0.04491197687864554, "founded": 0.04491197687864554, "iff": 0.04491197687864554, "finite": 0.04491197687864554, "compact": 0.04491197687864554, "complete": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "In a non-trivial ring, the element `0` is not right-regular -- with typeclasses.\n", "keywords": {"non-trivial ring": 0.04940384002065631, "ring": 0.15831692877998726, "element": 0.15831692877998726, "right-regular": 0.15831692877998726, "typeclasses": 0.15831692877998726, "non-trivial": 0.29736558256021506}}, {"docstring": "If `p : set \u03b1 \u2192 Prop` is stable under restriction and union, and each point `x`  of a compact set `s` has a neighborhood `t` within `s` such that `p t`, then `p s` holds.\n", "keywords": {"restriction and union": 0.012051537142168538, "stable under restriction": 0.018034246898548233, "compact set": 0.023937535241430174, "Prop": 0.033641197513274955, "holds": 0.052376395424323874, "set": 0.08782297807514622, "union": 0.08946888050496495, "point": 0.08946888050496495, "neighborhood": 0.08946888050496495, "stable": 0.13309686053898662, "restriction": 0.13309686053898662, "compact": 0.13309686053898662}}, {"docstring": "A group homomorphism sends inverses to inverses.\n", "keywords": {"group homomorphism sends": 0.007693932974338547, "homomorphism sends inverses": 0.011587819648888317, "group homomorphism": 0.037831312533597124, "homomorphism sends": 0.037831312533597124, "sends inverses": 0.0562460611896591, "inverses": 0.13945519496053638, "group": 0.19092478917347616, "homomorphism": 0.19092478917347616, "sends": 0.19092478917347616, "inverses to inverses": 0.25578024704229213}}, {"docstring": " A function is `C^n` within a set at a point, for `n : \u2115`, if and only if it is `C^n` on a neighborhood of this point.\n", "keywords": {"point": 0.04408578671136769, "function": 0.11718348279991213, "set": 0.11718348279991213, "neighborhood": 0.11718348279991213}}, {"docstring": "The product \u03c3-algebra is generated from boxes, i.e. `s \u00d7\u02e2 t` for sets `s : set \u03b1` and  `t : set \u03b2`.\n", "keywords": {"generated from boxes": 0.015947706066152048, "product \u03c3-algebra": 0.023732923233905415, "\u03c3-algebra is generated": 0.023732923233905415, "boxes": 0.103096657787716, "set": 0.1318400049084515, "product": 0.15225875770903138, "\u03c3-algebra": 0.15225875770903138, "generated": 0.15225875770903138, "sets": 0.263680009816903}}, {"docstring": " If a function `f : \ud835\udd5c \u2192 E` has two power series representations at `x`, then the given radii in which convergence is guaranteed may be interchanged. This can be useful when the formal multilinear series in one representation has a particularly nice form, but the other has a larger radius.\n", "keywords": {"power series representations": 0.027024782775715992, "convergence is guaranteed": 0.03447074540170908, "power series": 0.06700069787219044, "formal multilinear series": 0.10255437511380655, "function": 0.12504522868882575, "interchanged": 0.12504522868882575, "series representations": 0.13421188570833686, "nice form": 0.16944032286186908, "larger radius": 0.16944032286186908, "series": 0.1719960196270743, "multilinear series": 0.17682316028265474, "power": 0.18254344008272147, "radii": 0.18254344008272147, "convergence": 0.18254344008272147, "guaranteed": 0.18254344008272147, "formal multilinear": 0.23577550321407248, "form": 0.33171045238853597, "radius": 0.33171045238853597, "representations": 0.3439920392541486, "formal": 0.4367969017911246}}, {"docstring": "**Alias** of the forward direction of polynomial.nat_degree_le_iff_degree_le`.\n", "keywords": {"degree": 0.019648131954263418, "direction of polynomial.nat": 0.021567786782198985, "Alias": 0.034278050535979626, "forward direction": 0.035715520099333646, "iff": 0.05393656033701752, "polynomial.nat": 0.11369206228658875, "forward": 0.18569843656348187, "direction": 0.18569843656348187}}, {"docstring": " The strong pigeonhole principle for finitely many pigeons and pigeonholes.  Given a function `f` between finite types `\u03b1` and `\u03b2` and a number `n` such that `card \u03b1 \u2264 card \u03b2 * n`, there exists an element `y : \u03b2` such that its preimage has at most `n` elements. See also `fintype.exists_card_fiber_lt_of_card_lt_mul` for a stronger statement.\n", "keywords": {"strong pigeonhole principle": 0.010235244747007897, "principle for finitely": 0.04294375634692697, "finitely many pigeons": 0.04294375634692697, "strong pigeonhole": 0.04686173518074982, "pigeonhole principle": 0.04686173518074982, "card": 0.09512628365470802, "pigeons and pigeonholes": 0.10416474017966663, "strong": 0.20291753164511378, "principle": 0.20291753164511378, "finitely": 0.20291753164511378, "pigeons": 0.20291753164511378, "finite types": 0.21730852685460442, "pigeonhole": 0.22060201189650275, "element": 0.3560641695209663, "elements": 0.3560641695209663, "stronger statement": 0.36205868380252626, "fintype.exists": 0.36407610856088846, "fiber": 0.36407610856088846, "mul": 0.36407610856088846, "exists an element": 0.3785756810212855}}, {"docstring": " A sum version of Vieta's formula. Viewing `X i` as variables, the product of linear terms `\u03bb + X i` is equal to a linear combination of the symmetric polynomials `esymm \u03c3 R j`.\n", "keywords": {"Vieta formula": 0.009768589880681945, "version of Vieta": 0.014380474309588, "sum version": 0.030700180363587775, "Vieta": 0.08214252378247561, "formula": 0.11777198021367995, "symmetric polynomials": 0.15350029415692715, "sum": 0.17258549299654868, "version": 0.17258549299654868, "linear terms": 0.17494785711654076, "Viewing": 0.20684865028795477, "linear": 0.23502716224841336, "linear combination": 0.2460568294221461, "variables": 0.31676849500916915, "terms": 0.31676849500916915, "polynomials": 0.31676849500916915, "esymm": 0.31676849500916915, "product": 0.4200969429841209, "equal": 0.4200969429841209, "combination": 0.4200969429841209, "symmetric": 0.4200969429841209}}, {"docstring": "A version of `continuous_Inf_dom` for binary functions\n", "keywords": {"continuous": 0.04491197687864554, "dom": 0.04491197687864554, "binary functions": 0.04940384002065631, "functions": 0.15831692877998726, "version": 0.29736558256021506, "binary": 0.29736558256021506}}, {"docstring": " Deduce from the limiting behavior at `0` of its derivative and general differentiability extension theorems that the auxiliary function `f_aux n` is differentiable at `0`, with derivative `0`.\n", "keywords": {"general differentiability extension": 0.0023499445201701115, "differentiability extension theorems": 0.0023499445201701115, "auxiliary function": 0.011631263860918884, "limiting behavior": 0.017416869738890953, "general differentiability": 0.017416869738890953, "differentiability extension": 0.017416869738890953, "extension theorems": 0.017416869738890953, "derivative and general": 0.05455165859421271, "derivative": 0.08582803953788926, "Deduce": 0.0878757573221198, "function": 0.0878757573221198, "aux": 0.0878757573221198, "limiting": 0.13083850849172096, "behavior": 0.13083850849172096, "general": 0.13083850849172096, "differentiability": 0.13083850849172096, "extension": 0.13083850849172096, "theorems": 0.13083850849172096, "auxiliary": 0.13083850849172096, "differentiable": 0.13083850849172096}}, {"docstring": "An iff statement following from right distributivity in rings and the definition  of subtraction.\n", "keywords": {"definition of subtraction": 0.04940384002065631, "iff statement": 0.09700399286574239, "distributivity in rings": 0.09700399286574239, "subtraction": 0.15831692877998726, "iff": 0.29736558256021506, "statement": 0.29736558256021506, "distributivity": 0.29736558256021506, "rings": 0.29736558256021506, "definition": 0.29736558256021506}}, {"docstring": " The fixed point lemma for normal functions: any normal function has an unbounded set of fixed points.\n", "keywords": {"fixed point lemma": 0.012219482187244838, "unbounded set": 0.0426440607123686, "point lemma": 0.04878243062510856, "fixed point": 0.055851715214991327, "normal functions": 0.055851715214991327, "lemma for normal": 0.10794548311801358, "set of fixed": 0.10794548311801358, "fixed": 0.11499707576279743, "normal": 0.11499707576279743, "lemma": 0.20223729121329417, "unbounded": 0.20223729121329417, "set": 0.20223729121329417, "point": 0.22999415152559485, "functions": 0.22999415152559485, "function": 0.22999415152559485, "points": 0.22999415152559485}}, {"docstring": "A limit (over a general filter) of measurable `\u211d\u22650` valued functions is measurable.\n", "keywords": {"general filter": 0.021567786782198985, "valued functions": 0.021567786782198985, "functions is measurable": 0.06276771995988077, "measurable": 0.07030442419566416, "limit": 0.11369206228658875, "filter": 0.11369206228658875, "valued": 0.11369206228658875, "general": 0.18569843656348187, "functions": 0.18569843656348187}}, {"docstring": " If a function `f` is strictly monotone on a neighborhood of `a` and the image of this neighborhood under `f` meets every interval `[b, f a)`, `b < f a`, and every interval `(f a, b]`, `b > f a`, then `f` is continuous at `a`.\n", "keywords": {"meets every interval": 0.0035969993964767664, "strictly monotone": 0.007174368708495189, "interval": 0.025793230527315657, "neighborhood": 0.04408578671136769, "function": 0.06947767478475168, "meets": 0.06947767478475168, "strictly": 0.08439943001984396, "monotone": 0.08439943001984396, "image": 0.08439943001984396, "continuous": 0.08439943001984396}}, {"docstring": "**Alias** of pgame.lf_of_lt`.\n", "keywords": {"Alias": 0.030396371632413578, "pgame.lf": 0.09568045026443411}}, {"docstring": " **Zorn's lemma**  If every chain has an upper bound, then there exists a maximal element.\n", "keywords": {"Zorn lemma": 0.013797198203993007, "upper bound": 0.04940384002065631, "maximal element": 0.04940384002065631, "Zorn": 0.08596317751626563, "exists a maximal": 0.09700399286574239, "lemma": 0.15831692877998726, "bound": 0.15831692877998726, "element": 0.15831692877998726, "chain": 0.29736558256021506, "upper": 0.29736558256021506, "exists": 0.29736558256021506, "maximal": 0.29736558256021506}}, {"docstring": " If two continuous maps are equal on `s`, then they are equal on the closure of `s`. See also `set.eq_on.of_subset_closure` for a more general version.\n", "keywords": {"maps are equal": 0.04754684076910858, "continuous maps": 0.06840758008791419, "equal": 0.0896880507105299, "set.eq": 0.2272793193457584, "on.of": 0.2272793193457584, "subset": 0.2272793193457584, "closure": 0.23865277371701113, "continuous": 0.2530367690088724, "maps": 0.2530367690088724, "general version": 0.27432053812932977, "version": 0.39823908368262456, "general": 0.540549862748956}}, {"docstring": " The edist of `x` to `s` is bounded by the sum of the edist of `y` to `s` and the edist from `x` to `y`\n", "keywords": {"edist": 0.039384680490263134, "bounded": 0.13268379438099134, "sum": 0.13268379438099134}}, {"docstring": "Additive congruence relations preserve negation.\n", "keywords": {"Additive congruence relations": 0.01655915082773619, "relations preserve negation": 0.016559150827736194, "congruence relations preserve": 0.03339840940482845, "Additive congruence": 0.04940384002065631, "preserve negation": 0.04940384002065631, "congruence relations": 0.09700399286574239, "relations preserve": 0.09700399286574239, "Additive": 0.15831692877998726, "negation": 0.15831692877998726, "congruence": 0.29736558256021506, "relations": 0.29736558256021506, "preserve": 0.29736558256021506}}, {"docstring": "Any power of a right-regular element is right-regular.\n", "keywords": {"right-regular element": 0.05913243875864445, "element is right-regular": 0.12748048004056906, "right-regular": 0.14323823713631006, "power": 0.19488865479360015, "element": 0.19488865479360015}}, {"docstring": "In a topological vector space, the interior of a convex set is convex.\n", "keywords": {"topological vector space": 0.004210515236259915, "vector space": 0.021567786782198985, "topological vector": 0.035715520099333646, "convex set": 0.05259515133015473, "space": 0.11369206228658875, "set is convex": 0.11487806119690562, "convex": 0.13453835116331675, "topological": 0.18569843656348187, "vector": 0.18569843656348187, "interior": 0.18569843656348187, "set": 0.18569843656348187}}, {"docstring": "An isometry from an emetric space is injective\n", "keywords": {"space is injective": 0.015380821171891606, "emetric space": 0.02570861714399338, "injective": 0.09568045026443411, "isometry": 0.15831692877998726, "emetric": 0.15831692877998726, "space": 0.15831692877998726}}, {"docstring": " Lagrange multipliers theorem, 1d version. Let `f : \u03b9 \u2192 E \u2192 \u211d` be a finite family of functions. Suppose that `\u03c6 : E \u2192 \u211d` has a local extremum on the set `{x | \u2200 i, f i x = f i x\u2080}` at `x\u2080`. Suppose that all functions `f i` as well as `\u03c6` are strictly differentiable at `x\u2080`. Then the derivatives `f' i : E \u2192 L[\u211d] \u211d` and `\u03c6' : E \u2192L[\u211d] \u211d` are linearly dependent: there exist `\u039b : \u03b9 \u2192 \u211d` and `\u039b\u2080 : \u211d`, `(\u039b, \u039b\u2080) \u2260 0`, such that `\u2211 i, \u039b i \u2022 f' i + \u039b\u2080 \u2022 \u03c6' = 0`.  See also `is_local_extr_on.linear_dependent_of_has_strict_fderiv_at` for a version that states `\u00aclinear_independent \u211d _` instead of existence of `\u039b` and `\u039b\u2080`.\n", "keywords": {"Lagrange multipliers theorem": 0.002595369107117215, "Lagrange multipliers": 0.01965616947143656, "multipliers theorem": 0.01965616947143656, "Lagrange": 0.12790440020955016, "theorem": 0.12790440020955016, "Suppose": 0.1468726955974503, "multipliers": 0.15071610122251042, "functions": 0.15493041637503496, "finite family": 0.17014269925287706, "dependent": 0.1989706541606657, "version": 0.20638404562826332, "local": 0.22619133521276427, "family of functions": 0.2651778486749198, "local extremum": 0.27231545164700477, "linearly dependent": 0.28462694138980954, "strictly differentiable": 0.37833233636335145, "finite": 0.38131794650204737, "family": 0.38131794650204737, "set": 0.42598700901654746, "extremum": 0.47312023537571246}}, {"docstring": " Given measures `\u03bc` and `\u03bd`, if `s` is a measure mutually singular to `\u03bd` and `f` is a measurable function such that `\u03bc = s + f\u03bd`, then `f = \u03bc.rn_deriv \u03bd`.  This theorem provides the uniqueness of the `rn_deriv` in the Lebesgue decomposition theorem, while `measure_theory.measure.eq_singular_part` provides the uniqueness of the `singular_part`. Here, the uniqueness is given in terms of the measures, while the uniqueness in terms of the functions is given in `eq_rn_deriv`.\n", "keywords": {"measure mutually singular": 0.019552377314915385, "Lebesgue decomposition theorem": 0.049350268114193074, "mutually singular": 0.050911355830680016, "measure mutually": 0.06272929211627631, "measurable function": 0.06368349170462588, "uniqueness": 0.0754556570254723, "deriv": 0.07566339959118365, "singular": 0.09191426551938295, "Lebesgue decomposition": 0.09600885682724367, "part": 0.12451405386165522, "\u03bc.rn": 0.12486179230496026, "measures": 0.1679860961338926, "measure": 0.1679860961338926, "mutually": 0.17568893176037556, "measurable": 0.17568893176037556, "theorem": 0.20446954049451962, "Lebesgue": 0.20593845936198737, "terms": 0.2095917724902805, "decomposition theorem": 0.2105769274235393, "function": 0.3407768200955595}}, {"docstring": "The second projection on a domain in a product is `C^\u221e`.\n", "keywords": {"projection": 0.15831692877998726, "domain": 0.15831692877998726, "product": 0.15831692877998726}}, {"docstring": "`x` belongs to the closure of `s` if and only if some ultrafilter  supported on `s` converges to `x`.\n", "keywords": {"ultrafilter supported": 0.02570861714399338, "belongs": 0.09568045026443411, "converges": 0.09568045026443411, "closure": 0.15831692877998726, "ultrafilter": 0.15831692877998726, "supported": 0.15831692877998726}}, {"docstring": "This theorem establishes **Leibniz's series for `\u03c0`**: The alternating sum of the reciprocals  of the odd numbers is `\u03c0/4`. Note that this is a conditionally rather than absolutely convergent  series. The main tool that this proof uses is the Mean Value Theorem (specifically avoiding the  Fundamental Theorem of Calculus).   Intuitively, the theorem holds because Leibniz's series is the Taylor series of `arctan x`  centered about `0` and evaluated at the value `x = 1`. Therefore, much of this proof consists of  reasoning about a function    `f := arctan x - \u2211 i in finset.range k, (-(1:\u211d))^i * x^(2*i+1) / (2*i+1)`,  the difference between `arctan` and the `k`-th partial sum of its Taylor series. Some ingenuity is  required due to the fact that the Taylor series is not absolutely convergent at `x = 1`.   This proof requires a bound on `f 1`, the key idea being that `f 1` can be split as the sum of  `f 1 - f u` and `f u`, where `u` is a sequence of values in [0,1], carefully chosen such that  each of these two terms can be controlled (in different ways).   We begin the proof by (1) introducing that sequence `u` and then proving that another sequence  constructed from `u` tends to `0` at `+\u221e`. After (2) converting the limit in our goal to an  inequality, we (3) introduce the auxiliary function `f` defined above. Next, we (4) compute the  derivative of `f`, denoted by `f'`, first generally and then on each of two subintervals of [0,1].  We then (5) prove a bound for `f'`, again both generally as well as on each of the two  subintervals. Finally, we (6) apply the Mean Value Theorem twice, obtaining bounds on `f 1 - f u`  and `f u - f 0` from the bounds on `f'` (note that `f 0 = 0`).\n", "keywords": {"Taylor series": 0.020776040739605435, "Leibniz series": 0.02626807852855961, "odd numbers": 0.03608444371067447, "theorem establishes": 0.03800285037913035, "theorem": 0.04207147827234958, "series": 0.044902575534395216, "Fundamental Theorem": 0.05880466712810425, "Taylor": 0.07259080412999062, "absolutely convergent series": 0.07544034490647379, "alternating sum": 0.07817338269752312, "Leibniz": 0.09263365063625371, "proof": 0.09450316053865117, "arctan": 0.11378842342767827, "absolutely convergent": 0.11711548470662833, "sum": 0.1295050230694995, "convergent series": 0.13297387900648255, "theorem holds": 0.1409436557998991, "sequence": 0.16260846490932604, "avoiding the Fundamental": 0.1652894998187239, "establishes": 0.17404431788749572}}, {"docstring": " **Strict inequality case of Rearrangement Inequality**: Pointwise scalar multiplication of `f` and `g`, which monovary together, is strictly decreased by a permutation if and only if `f` and `g \u2218 \u03c3` do not monovary together. Stated by permuting the entries of `g`.\n", "keywords": {"Strict inequality case": 0.0016376672505466826, "Pointwise scalar multiplication": 0.002200769509641363, "Strict inequality": 0.00866958983340238, "Pointwise scalar": 0.011561263824295709, "Rearrangement Inequality": 0.011712586350570936, "case of Rearrangement": 0.015634960653391074, "inequality case": 0.025703411153376713, "scalar multiplication": 0.03447074540170908, "strictly decreased": 0.03447074540170908, "Strict": 0.06261045944724858, "Pointwise": 0.06261045944724858, "inequality": 0.0686392828174212, "Rearrangement": 0.08433210096311344, "monovary": 0.08488187343535045, "Stated by permuting": 0.16944032286186908, "case": 0.18254344008272147, "scalar": 0.18254344008272147, "multiplication": 0.18254344008272147, "strictly": 0.18254344008272147, "decreased": 0.18254344008272147}}, {"docstring": "In the model space, chart_at is always the identity\n", "keywords": {"model space": 0.015380821171891606, "chart": 0.04491197687864554, "space": 0.09568045026443411, "identity": 0.09568045026443411, "model": 0.15831692877998726}}, {"docstring": "Euler's four-square identity, see <https://en.wikipedia.org/wiki/Euler%27s_four-square_identity>.  This sign choice here corresponds to the signs obtained by multiplying two quaternions.\n", "keywords": {"Euler four-square identity": 0.005673309320273444, "Euler four-square": 0.036378432021021534, "four-square identity": 0.036378432021021534, "Euler": 0.14840353637699516, "identity": 0.14840353637699516, "four-square": 0.2365273465835411, "multiplying two quaternions": 0.24288129287790988, "choice here corresponds": 0.3673019860549203, "obtained by multiplying": 0.3673019860549203, "quaternions": 0.3770378920346049, "sign choice": 0.4555487937736221, "signs obtained": 0.4555487937736221, "choice": 0.5182978603858105, "corresponds": 0.5182978603858105, "obtained": 0.5182978603858105, "multiplying": 0.5182978603858105, "sign": 0.6038495073559024, "signs": 0.6038495073559024}}, {"docstring": "An element admitting a left additive opposite is add-left-regular.\n", "keywords": {"left additive opposite": 0.03339840940482845, "element admitting": 0.09700399286574239, "admitting a left": 0.09700399286574239, "left additive": 0.09700399286574239, "additive opposite": 0.09700399286574239, "element": 0.29736558256021506, "admitting": 0.29736558256021506, "left": 0.29736558256021506, "additive": 0.29736558256021506, "opposite": 0.29736558256021506}}, {"docstring": "The group exponent exists for any bounded additive torsion group.\n", "keywords": {"bounded additive torsion": 0.007041919398291632, "group exponent exists": 0.010494743012823167, "additive torsion group": 0.010494743012823167, "exponent exists": 0.035715520099333646, "bounded additive": 0.035715520099333646, "additive torsion": 0.035715520099333646, "group exponent": 0.05259515133015473, "torsion group": 0.05259515133015473, "group": 0.13453835116331675, "exponent": 0.18569843656348187, "exists": 0.18569843656348187, "bounded": 0.18569843656348187, "additive": 0.18569843656348187, "torsion": 0.18569843656348187}}, {"docstring": "If `s` has a least element, then it is bounded below.\n", "keywords": {"element": 0.15831692877998726, "bounded": 0.29736558256021506}}, {"docstring": "The canonical perfection map from the perfection of a ring.\n", "keywords": {"canonical perfection map": 0.011587819648888317, "canonical perfection": 0.0562460611896591, "perfection map": 0.0562460611896591, "ring": 0.11718348279991213, "perfection": 0.13945519496053638, "canonical": 0.19092478917347616, "map": 0.19092478917347616}}, {"docstring": "A subobject is simple iff it is an atom in the subobject lattice.\n", "keywords": {"subobject lattice": 0.0325194426147957, "simple iff": 0.03663237450220032, "lattice": 0.11521656054299435, "subobject is simple": 0.1179331082419386, "subobject": 0.13667842094541144, "simple": 0.1879836817695587, "iff": 0.1879836817695587, "atom": 0.1879836817695587}}, {"docstring": "A version of `zero_lt_one : 0 < 1` for a `canonically_ordered_comm_semiring`.\n", "keywords": {"canonically": 0.04491197687864554, "ordered": 0.04491197687864554, "comm": 0.04491197687864554, "semiring": 0.04491197687864554, "version": 0.15831692877998726}}, {"docstring": " Any three points in an orthocentric system span the same subspace as the whole orthocentric system.\n", "keywords": {"orthocentric system span": 0.011041420469275918, "orthocentric system": 0.02595416362410219, "system span": 0.045872129360315365, "orthocentric": 0.11107071682746067, "system": 0.11107071682746067, "points": 0.19744254481508877, "span": 0.19744254481508877, "subspace": 0.19744254481508877}}, {"docstring": "**Alias** of the reverse direction of sub_eq_zero`.\n", "keywords": {"reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " Given an orthonormal family, a second family of vectors is orthonormal if every vector equals the corresponding vector in the original family or its negation.\n", "keywords": {"vector equals": 0.048368939359843974, "original family": 0.048368939359843974, "orthonormal family": 0.07017172869524084, "family": 0.09580472141704734, "negation": 0.10903756693221221, "orthonormal": 0.11406976295395443, "vector": 0.14370708212557098, "equals": 0.16052558148651802, "original": 0.16052558148651802, "vectors is orthonormal": 0.2525040116992221, "vectors": 0.28741416425114197, "family of vectors": 0.3348149197630329}}, {"docstring": "`sinh` is bijective, both injective and surjective.\n", "keywords": {"sinh": 0.04491197687864554, "injective and surjective": 0.04940384002065631, "bijective": 0.15831692877998726, "surjective": 0.15831692877998726, "injective": 0.29736558256021506}}, {"docstring": "**Alias** of ssubset_of_ne_of_subset`.\n", "keywords": {"Alias": 0.030396371632413578, "subset": 0.04491197687864554, "ssubset": 0.0771485953923296}}, {"docstring": "Euler's Criterion: a nonzero `a : zmod p` is a square if and only if `x ^ (p / 2) = 1`.\n", "keywords": {"Euler Criterion": 0.0036984844327355177, "Criterion": 0.04776309965539685, "Euler": 0.0771485953923296, "nonzero": 0.0771485953923296, "zmod": 0.0771485953923296, "square": 0.1155310835876123}}, {"docstring": "Adding a point to a set preserves its boundedness above.\n", "keywords": {"Adding a point": 0.015380821171891606, "set preserves": 0.02570861714399338, "preserves its boundedness": 0.02570861714399338, "Adding": 0.09568045026443411, "point": 0.15831692877998726, "set": 0.15831692877998726, "preserves": 0.15831692877998726, "boundedness": 0.15831692877998726}}, {"docstring": " If every element belongs to at least `n` finsets, then the sum of their sizes is at least `n` times how many they are.\n", "keywords": {"element belongs": 0.02570861714399338, "finsets": 0.04491197687864554, "times": 0.09568045026443411, "element": 0.15831692877998726, "belongs": 0.15831692877998726, "sum": 0.15831692877998726, "sizes": 0.15831692877998726}}, {"docstring": "Seminorm-balls at the origin are absorbent.\n", "keywords": {"origin are absorbent": 0.04940384002065631, "Seminorm-balls": 0.15831692877998726, "absorbent": 0.15831692877998726, "origin": 0.29736558256021506}}, {"docstring": "**Alias** of neg_one_sq`.\n", "keywords": {"Alias": 0.030396371632413578, "neg": 0.15831692877998726}}, {"docstring": " If the inner product of two unit vectors is `1`, then the two vectors are equal. One form of the equality case for Cauchy-Schwarz.\n", "keywords": {"unit vectors": 0.04027288595721954, "vectors are equal": 0.06316049558228078, "vectors": 0.10730369700267736, "equal": 0.12347017160866493, "case for Cauchy-Schwarz": 0.16594053328372657, "product": 0.1803934615806633, "unit": 0.1803934615806633, "equality case": 0.2310668116414145, "Cauchy-Schwarz": 0.32850963117309834, "form": 0.433239428475304, "equality": 0.433239428475304, "case": 0.433239428475304}}, {"docstring": "Fixed size neighborhoods of the diagonal belong to the uniform structure\n", "keywords": {"Fixed size neighborhoods": 0.0025258761156662004, "Fixed size": 0.015380821171891606, "uniform structure": 0.015380821171891606, "size neighborhoods": 0.02570861714399338, "diagonal belong": 0.02570861714399338, "Fixed": 0.09568045026443411, "structure": 0.09568045026443411, "size": 0.15831692877998726, "neighborhoods": 0.15831692877998726, "diagonal": 0.15831692877998726, "belong": 0.15831692877998726, "uniform": 0.15831692877998726}}, {"docstring": "**Alias** of lt_of_le_of_lt'`.\n", "keywords": {"Alias": 0.030396371632413578}}, {"docstring": "Given two localization maps `f : M \u2192+ N, k : M \u2192+ P` for a submonoid `S \u2286 M`, the hom from `P` to `N` induced by `f` is left inverse to the hom from `N` to `P` induced by `k`.\n", "keywords": {"localization maps": 0.013833902242147065, "left inverse": 0.02064652498550541, "induced": 0.03606013103477163, "hom": 0.054147325146855434, "maps": 0.09593831581184391, "submonoid": 0.09593831581184391, "localization": 0.14222822903176371, "left": 0.14222822903176371, "inverse": 0.14222822903176371}}, {"docstring": "A continuous and adapted process is progressively measurable.\n", "keywords": {"progressively measurable": 0.04940384002065631, "continuous and adapted": 0.09700399286574239, "adapted process": 0.09700399286574239, "process is progressively": 0.09700399286574239, "measurable": 0.15831692877998726, "continuous": 0.29736558256021506, "adapted": 0.29736558256021506, "process": 0.29736558256021506, "progressively": 0.29736558256021506}}, {"docstring": "Transfer `is_O_with` over a `local_homeomorph`.\n", "keywords": {"Transfer": 0.04491197687864554, "local": 0.04491197687864554, "homeomorph": 0.04491197687864554}}, {"docstring": "A vector is in the same ray as a nonnegative multiple of one it is in the same ray as.\n", "keywords": {"nonnegative multiple": 0.037831312533597124, "ray": 0.07334489383741183, "vector": 0.19092478917347616, "nonnegative": 0.19092478917347616, "multiple": 0.19092478917347616}}, {"docstring": "An induction principle for additive closure membership. If `p` holds for `0` and all elements of `k` and their negation, and is preserved under addition, then `p` holds for all elements of the additive closure of `k`.\n", "keywords": {"additive closure membership": 0.015286833558194593, "induction principle": 0.04274035635323964, "closure membership": 0.04445757486113398, "additive closure": 0.051121466359897845, "holds": 0.135740780075095, "membership": 0.1397580964788896, "principle for additive": 0.13992215036955882, "additive": 0.15228179662245211, "closure": 0.15228179662245211, "elements": 0.18399707418782207, "induction": 0.20245615212496318, "principle": 0.20245615212496318, "preserved under addition": 0.203386912815087, "negation": 0.36071482037488045, "addition": 0.36071482037488045, "preserved": 0.46854761761533015}}, {"docstring": "Sum of a multiset of elements in a `intermediate_field` is in the `intermediate_field`.\n", "keywords": {"intermediate": 0.02184815412823125, "field": 0.02184815412823125, "multiset of elements": 0.040564923574392765, "Sum": 0.12156210109285605, "multiset": 0.19744254481508877, "elements": 0.19744254481508877}}, {"docstring": " A function `f : \ud835\udd5c \u2192 \ud835\udd5c` is convex iff for any three points `x < y < z` the slope of the secant line of `f` on `[x, y]` is less than the slope of the secant line of `f` on `[x, z]`.\n", "keywords": {"secant line": 0.00445632759084731, "convex iff": 0.015161720635084234, "slope": 0.04699447171101985, "secant": 0.04699447171101985, "line": 0.04699447171101985, "function": 0.08816010171372306, "points": 0.08816010171372306, "convex": 0.122209967475991, "iff": 0.122209967475991}}, {"docstring": "Preconnected sets are either contained in or disjoint to any given clopen set.\n", "keywords": {"Preconnected sets": 0.0325194426147957, "clopen set": 0.05417025203414716, "Preconnected": 0.11521656054299435, "contained": 0.1879836817695587, "disjoint": 0.1879836817695587, "clopen": 0.1879836817695587, "sets": 0.2733568418908229, "set": 0.2733568418908229}}, {"docstring": " If `f` has a local max on `s` at `a`, `f'` is a derivative of `f` at `a` within `s`, and both `y` and `-y` belong to the positive tangent cone of `s` at `a`, then `f' y \u2264 0`.\n", "keywords": {"positive tangent cone": 0.0006133431289448148, "local max": 0.00717258304785508, "positive tangent": 0.00717258304785508, "tangent cone": 0.00717258304785508, "belong": 0.06341998722529081, "local": 0.08438900089923473, "max": 0.08438900089923473, "derivative": 0.08438900089923473, "positive": 0.08438900089923473, "tangent": 0.08438900089923473, "cone": 0.08438900089923473}}, {"docstring": "**Rolle's Theorem** `deriv` version\n", "keywords": {"Rolle Theorem": 0.007444681613352736, "deriv": 0.04491197687864554, "version": 0.04491197687864554, "Rolle": 0.08596317751626563, "Theorem": 0.08596317751626563}}, {"docstring": "Any category with pullbacks and terminal object has binary products.\n", "keywords": {"binary products": 0.04940384002065631, "category with pullbacks": 0.09700399286574239, "pullbacks and terminal": 0.09700399286574239, "terminal object": 0.09700399286574239, "object has binary": 0.09700399286574239, "products": 0.15831692877998726, "category": 0.29736558256021506, "pullbacks": 0.29736558256021506, "terminal": 0.29736558256021506, "object": 0.29736558256021506, "binary": 0.29736558256021506}}, {"docstring": "`cyclotomic' n R` is different from `0`.\n", "keywords": {"cyclotomic": 0.04491197687864554}}, {"docstring": "If `s` is bounded, then so is `s \u2229 t`\n", "keywords": {"bounded": 0.09568045026443411}}, {"docstring": "Entourages are neighborhoods of the diagonal.\n", "keywords": {"Entourages are neighborhoods": 0.04940384002065631, "Entourages": 0.15831692877998726, "diagonal": 0.15831692877998726, "neighborhoods": 0.29736558256021506}}, {"docstring": "The n-ary version of `set.mem_mul`.\n", "keywords": {"set.mem": 0.04491197687864554, "mul": 0.04491197687864554, "n-ary version": 0.09700399286574239, "n-ary": 0.29736558256021506, "version": 0.29736558256021506}}, {"docstring": "For `\ud835\udd5c = \u211d` or `\ud835\udd5c = \u2102`, `exp \ud835\udd5c` maps the spectrum of `a` into the spectrum of `exp \ud835\udd5c a`.\n", "keywords": {"maps the spectrum": 0.00905093966185434, "exp": 0.03528421216774802, "spectrum": 0.049279142876773374, "maps": 0.09100964857932636}}, {"docstring": " If a primitive `f` satisfies `f.is_eisenstein_at \ud835\udcdf`, where `\ud835\udcdf.is_prime`, then `f` is irreducible.\n", "keywords": {"satisfies": 0.04491197687864554, "eisenstein": 0.04491197687864554, "prime": 0.04491197687864554, "primitive": 0.09568045026443411, "irreducible": 0.09568045026443411}}, {"docstring": "Pre-games defined by natural numbers are numeric.\n", "keywords": {"Pre-games defined": 0.04940384002065631, "numbers are numeric": 0.04940384002065631, "defined by natural": 0.09700399286574239, "natural numbers": 0.09700399286574239, "Pre-games": 0.15831692877998726, "numeric": 0.15831692877998726, "defined": 0.29736558256021506, "natural": 0.29736558256021506, "numbers": 0.29736558256021506}}, {"docstring": " `p` is a Taylor series of `f` up to `n+1` if and only if `p` is a Taylor series up to `n`, and `p (n + 1)` is a derivative of `p n`.\n", "keywords": {"Taylor series": 0.003521977571520003, "Taylor": 0.026998491118922857, "series": 0.06476922048698919, "derivative": 0.12600799873373572}}, {"docstring": "The function `exp_neg_inv_glue` is smooth.\n", "keywords": {"exp": 0.04491197687864554, "neg": 0.04491197687864554, "inv": 0.04491197687864554, "glue": 0.04491197687864554, "function": 0.15831692877998726, "smooth": 0.15831692877998726}}, {"docstring": " An ideal `I` equals its Jacobson radical if and only if every element outside `I` also lies outside of a maximal ideal containing `I`.\n", "keywords": {"equals its Jacobson": 0.006652513650129948, "Jacobson radical": 0.009920429697820431, "maximal ideal": 0.024893945799064357, "Jacobson": 0.07261214632111582, "ideal": 0.08977403887827273, "equals": 0.09101163530720666, "radical": 0.13528014248445303, "element": 0.13528014248445303, "lies": 0.13528014248445303, "maximal": 0.13528014248445303}}, {"docstring": " The angle between two nonzero vectors is `\u03b8` if and only if the second vector is the first rotated by `\u03b8` and scaled by the ratio of the norms.\n", "keywords": {"nonzero vectors": 0.009361982988862379, "norms": 0.07501662793573344, "vectors": 0.09329921886044464, "vector": 0.09329921886044464, "angle": 0.09941293521125807, "nonzero": 0.09941293521125807, "rotated": 0.09941293521125807, "scaled": 0.09941293521125807, "ratio": 0.09941293521125807}}, {"docstring": "`padic_val_int p 1` is 0 for any `p`.\n", "keywords": {"padic": 0.04491197687864554, "val": 0.04491197687864554, "int": 0.09568045026443411}}, {"docstring": " Given `pb : power_basis K S`, then the norm of `pb.gen` is `((minpoly K pb.gen).map (algebra_map K F)).roots.prod`.\n", "keywords": {"minpoly K pb.gen": 0.02593095746307935, "pb.gen": 0.05332403764722467, "map": 0.05332403764722467, "power": 0.055708263664958506, "algebra": 0.055708263664958506, "roots.prod": 0.055708263664958506, "basis": 0.09492398510093508, "minpoly": 0.09492398510093508, "norm": 0.1408007092310104}}, {"docstring": "The set in the definition of subtraction is nonempty.\n", "keywords": {"subtraction is nonempty": 0.015380821171891606, "definition of subtraction": 0.02570861714399338, "nonempty": 0.09568045026443411, "set": 0.15831692877998726, "definition": 0.15831692877998726, "subtraction": 0.15831692877998726}}, {"docstring": " In a real normed space, the image of the unit closed ball under multiplication by a nonnegative number `r` is the closed ball of radius `r` with center at the origin.\n", "keywords": {"real normed space": 0.0010703368733089073, "unit closed ball": 0.0014274132070242686, "closed ball": 0.006171328044506318, "normed space": 0.009277824860263103, "nonnegative number": 0.009277824860263103, "unit closed": 0.01264041442910389, "real normed": 0.012945447846677583, "ball of radius": 0.023124983994894013, "ball under multiplication": 0.03157444147427061, "closed": 0.05520908507515735, "ball": 0.05520908507515735, "space": 0.0813148616571504, "number": 0.0813148616571504, "radius": 0.0813148616571504, "origin": 0.0813148616571504, "real": 0.11304868402153367, "normed": 0.11304868402153367, "image": 0.11304868402153367, "unit": 0.11304868402153367, "multiplication": 0.11304868402153367}}, {"docstring": "The identity affine map acts as the identity.\n", "keywords": {"affine map acts": 0.007693932974338547, "identity affine map": 0.008593502756179337, "affine map": 0.037831312533597124, "map acts": 0.037831312533597124, "identity affine": 0.04212793185246166, "identity": 0.10586606907408062, "affine": 0.19092478917347616, "map": 0.19092478917347616, "acts": 0.19092478917347616}}, {"docstring": "In a graph, if `k` is at least the degree of every vertex, then it is at least the maximum degree.\n", "keywords": {"maximum degree": 0.0562460611896591, "graph": 0.11718348279991213, "vertex": 0.11718348279991213, "degree": 0.13945519496053638, "maximum": 0.19092478917347616}}, {"docstring": "If two local homeomorphisms are equivalent, so are their inverses\n", "keywords": {"homeomorphisms are equivalent": 0.015380821171891606, "local homeomorphisms": 0.02570861714399338, "equivalent": 0.09568045026443411, "inverses": 0.09568045026443411, "local": 0.15831692877998726, "homeomorphisms": 0.15831692877998726}}, {"docstring": "The second cyclotomic polyomial is `X + 1`.\n", "keywords": {"cyclotomic polyomial": 0.09700399286574239, "cyclotomic": 0.29736558256021506, "polyomial": 0.29736558256021506}}, {"docstring": "The order of the product of two formal power series over an integral domain is the sum of their orders.\n", "keywords": {"formal power series": 0.002535831815717203, "formal power": 0.018310930906343142, "power series": 0.018310930906343142, "integral domain": 0.018310930906343142, "product": 0.13409574860218185, "formal": 0.13409574860218185, "power": 0.13409574860218185, "series": 0.13409574860218185, "integral": 0.13409574860218185, "domain": 0.13409574860218185, "sum": 0.13409574860218185, "order": 0.17742572114928132, "orders": 0.17742572114928132}}, {"docstring": " Assumes left covariance. The lemma assuming right covariance is `right.mul_lt_one_of_lt_of_le`.\n", "keywords": {"Assumes left covariance": 0.022198737363026126, "Assumes left": 0.03985444220279051, "left covariance": 0.13064959758481184, "Assumes": 0.1554527012770092, "right.mul": 0.22125774619993788, "covariance": 0.23433876543145388, "left": 0.246550513069643, "lemma assuming": 0.39462694305349416, "lemma": 0.5319420725534505, "assuming": 0.5319420725534505, "assuming right covariance": 0.5970566294903761}}, {"docstring": "A function `-f` is concave iff `f` is convex.\n", "keywords": {"concave iff": 0.015380821171891606, "function": 0.09568045026443411, "iff": 0.09568045026443411, "convex": 0.09568045026443411, "concave": 0.15831692877998726}}, {"docstring": "The additive torsion submonoid of an abelian group equals the torsion subgroup as a submonoid.\n", "keywords": {"abelian group equals": 0.007931133193188878, "additive torsion submonoid": 0.018249608278889363, "abelian group": 0.038584678130008584, "group equals": 0.038584678130008584, "additive torsion": 0.05755977077196411, "torsion subgroup": 0.05755977077196411, "torsion submonoid": 0.08664488659198114, "equals the torsion": 0.12446694240004318, "torsion": 0.1411879566095664, "submonoid": 0.1411879566095664, "additive": 0.19274649316101516, "abelian": 0.19274649316101516, "group": 0.19274649316101516, "equals": 0.19274649316101516, "subgroup": 0.19274649316101516}}, {"docstring": "The embedding of a metric space in its completion is an isometry.\n", "keywords": {"metric space": 0.09700399286574239, "isometry": 0.15831692877998726, "embedding": 0.29736558256021506, "metric": 0.29736558256021506, "space": 0.29736558256021506, "completion": 0.29736558256021506}}, {"docstring": "An injective continuous function on a Polish space is a measurable embedding.\n", "keywords": {"injective continuous function": 0.0042542192213185686, "Polish space": 0.013797198203993007, "measurable embedding": 0.015380821171891606, "injective continuous": 0.02570861714399338, "continuous function": 0.02570861714399338, "Polish": 0.08596317751626563, "embedding": 0.09568045026443411, "injective": 0.15831692877998726, "continuous": 0.15831692877998726, "function": 0.15831692877998726, "space": 0.15831692877998726, "measurable": 0.15831692877998726}}, {"docstring": " To show `j` and `k` agree on the whole localization, it suffices to show they agree on the image of the base ring, if they preserve `1` and `*`.\n", "keywords": {"base ring": 0.013546417228156258, "suffices to show": 0.02108961152940521, "show": 0.07334489383741181, "agree": 0.07334489383741181, "show they agree": 0.08709111511546362, "localization": 0.09492398510093508, "ring": 0.09492398510093508, "preserve": 0.09492398510093508, "suffices": 0.1408007092310104, "image": 0.1408007092310104, "base": 0.1408007092310104}}, {"docstring": "The directed sUnion of a set S of preconnected subsets is preconnected.\n", "keywords": {"directed sUnion": 0.03663237450220032, "preconnected subsets": 0.05417025203414716, "subsets is preconnected": 0.11793310824193863, "preconnected": 0.13667842094541144, "directed": 0.1879836817695587, "sUnion": 0.1879836817695587, "set": 0.1879836817695587, "subsets": 0.1879836817695587}}, {"docstring": "**Alias** of the reverse direction of order.pred_eq_iff_is_min`.\n", "keywords": {"direction of order.pred": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "min": 0.04491197687864554, "order.pred": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "The degree of a product of polynomials is at most the sum of the degrees, where the degree of the zero polynomial is \u22a5.\n", "keywords": {"product of polynomials": 0.035161304177131654, "degree": 0.044553121808299685, "degrees": 0.08910624361659937, "product": 0.11725636510008382, "sum": 0.11725636510008382, "polynomials": 0.11941338276312127}}, {"docstring": "Iff version of extensionality rule for additive congruence relations.\n", "keywords": {"additive congruence relations": 0.016559150827736194, "Iff version": 0.04940384002065631, "congruence relations": 0.04940384002065631, "version of extensionality": 0.09700399286574239, "extensionality rule": 0.09700399286574239, "rule for additive": 0.09700399286574239, "additive congruence": 0.09700399286574239, "Iff": 0.15831692877998726, "relations": 0.15831692877998726, "version": 0.29736558256021506, "extensionality": 0.29736558256021506, "rule": 0.29736558256021506, "additive": 0.29736558256021506, "congruence": 0.29736558256021506}}, {"docstring": " Tower law: if `A` is a `K`-vector space and `K` is a field extension of `F` then `dim_F(A) = dim_F(K) * dim_K(A)`.\n", "keywords": {"Tower law": 0.006873949672523931, "vector space": 0.009105268711180772, "dim": 0.012034501391241018, "field extension": 0.012069567539055843, "Tower": 0.08262578939564287, "law": 0.08262578939564287, "vector": 0.08262578939564287, "space": 0.1092045344216192, "field": 0.1092045344216192, "extension": 0.1092045344216192}}, {"docstring": "For any product along `{0, ..., n-1}` of a commutative-monoid-valued function, we can verify that it's equal to a different function just by checking ratios of adjacent terms. This is a multiplicative discrete analogue of the fundamental theorem of calculus.\n", "keywords": {"adjacent terms": 0.015251588809733665, "checking ratios": 0.021118550617721717, "ratios of adjacent": 0.021118550617721717, "multiplicative discrete analogue": 0.07218831148256756, "function": 0.07850990945258281, "terms": 0.10445937877446199, "theorem of calculus": 0.11884829605783082, "product": 0.1438116176495284, "verify": 0.1438116176495284, "equal": 0.1438116176495284, "checking": 0.1438116176495284, "ratios": 0.1438116176495284, "adjacent": 0.1438116176495284, "multiplicative discrete": 0.15706228291411153, "discrete analogue": 0.15706228291411153, "fundamental theorem": 0.15706228291411153, "calculus": 0.2883129636997094, "multiplicative": 0.3684322042113957, "discrete": 0.3684322042113957, "analogue": 0.3684322042113957}}, {"docstring": " If two words correspond to the same element in the free group, then they have a common maximal reduction. This is the proof that the function that sends an element of the free group to its maximal reduction is well-defined.\n", "keywords": {"common maximal reduction": 0.008200361787659717, "free group": 0.020297809976986398, "words correspond": 0.023840759029425767, "maximal reduction": 0.025391611961181386, "common maximal": 0.034710945501353445, "free": 0.08872859815965513, "group": 0.10991920360832952, "maximal": 0.10991920360832952, "reduction": 0.10991920360832952, "element": 0.1314410476970079, "words": 0.15259623965348748, "correspond": 0.15259623965348748, "common": 0.15259623965348748, "reduction is well-defined": 0.15646457500110347, "function that sends": 0.17377655111705623, "sends an element": 0.22574577757960468, "well-defined": 0.3148275473629107, "proof": 0.38477147858617505, "function": 0.38477147858617505, "sends": 0.38477147858617505}}, {"docstring": " The extended psuedodistance on a subset of a pseudoemetric space is the restriction of the original pseudodistance, by definition\n", "keywords": {"original pseudodistance": 0.00899321792126428, "extended psuedodistance": 0.013527995261974615, "pseudoemetric space": 0.013527995261974615, "pseudodistance": 0.0771485953923296, "definition": 0.0771485953923296, "extended": 0.1155310835876123, "psuedodistance": 0.1155310835876123, "subset": 0.1155310835876123, "pseudoemetric": 0.1155310835876123, "space": 0.1155310835876123, "restriction": 0.1155310835876123, "original": 0.1155310835876123}}, {"docstring": "The closure of the interval `(a, b]` is the closed interval `[a, b]`.\n", "keywords": {"closed interval": 0.016122598444234554, "interval": 0.055127829619426576, "closure": 0.14390902704051098, "closed": 0.14390902704051098}}, {"docstring": "`find p` returns `none` if and only if `p i` never holds.\n", "keywords": {"returns": 0.04491197687864554, "find": 0.09568045026443411, "holds": 0.09568045026443411}}, {"docstring": "Assumes right covariance.\n", "keywords": {"Assumes right covariance": 0.02570861714399338, "Assumes": 0.15831692877998726, "covariance": 0.15831692877998726}}, {"docstring": "The angle between a nonzero vector and its negation is `\u03c0`.\n", "keywords": {"nonzero vector": 0.09700399286574239, "angle": 0.29736558256021506, "nonzero": 0.29736558256021506, "vector": 0.29736558256021506, "negation": 0.29736558256021506}}, {"docstring": "**Alias** of the reverse direction of cont_mdiff_at_iff_cont_diff_at`.\n", "keywords": {"Alias": 0.03402676245250578, "reverse direction": 0.034987023778306175, "mdiff": 0.05331699930238388, "iff": 0.05331699930238388, "diff": 0.05331699930238388, "direction of cont": 0.06131733975553988, "cont": 0.069255433448279, "reverse": 0.18385948854246909, "direction": 0.18385948854246909}}, {"docstring": "If the gcf already terminated at position `n`, nothing gets squashed.\n", "keywords": {"terminated at position": 0.04940384002065631, "gcf already terminated": 0.09700399286574239, "position": 0.15831692877998726, "squashed": 0.15831692877998726, "gcf": 0.29736558256021506, "terminated": 0.29736558256021506}}, {"docstring": "The centroid of a single point.\n", "keywords": {"single point": 0.04940384002065631, "point": 0.15831692877998726, "centroid": 0.29736558256021506, "single": 0.29736558256021506}}, {"docstring": " If `f : M \u2192 N` is a submultiplicative function, `f (x * y) \u2264 f x * f y`, `f 1 = 1`, and `g i`, `i \u2208 s`, is a finite family of elements of `M`, then `f (\u220f i in s, g i) \u2264 \u220f i in s, f (g i)`.\n", "keywords": {"submultiplicative function": 0.004191105078215276, "finite family": 0.005229473243173595, "family of elements": 0.005229473243173595, "function": 0.057864980816844346, "submultiplicative": 0.07212675038589919, "finite": 0.07212675038589919, "family": 0.07212675038589919, "elements": 0.07212675038589919}}, {"docstring": " Sending `fin n` into `fin (n + 1)` with a gap at `p` then back to `fin n` by subtracting one from anything above `p` is the identity.\n", "keywords": {"fin": 0.026568936978197902, "Sending": 0.059708349732654514, "identity": 0.10143744007623053, "gap": 0.1499406051001382, "back": 0.1499406051001382, "subtracting": 0.1499406051001382}}, {"docstring": "The equivalence classes of the equivalence relation defined by a set of sets    partitioning \u03b1 are elements of the set of sets.\n", "keywords": {"equivalence relation defined": 0.002607936782193081, "relation defined": 0.017959788475527386, "equivalence classes": 0.019007097541816436, "equivalence relation": 0.019007097541816436, "sets partitioning": 0.024300231834620836, "set of sets": 0.06040631999937623, "equivalence": 0.0702139331695686, "set": 0.08930337103629704, "sets": 0.08930337103629704, "classes": 0.1328266737880457, "relation": 0.1328266737880457, "defined": 0.1328266737880457, "partitioning": 0.1328266737880457, "elements": 0.1328266737880457}}, {"docstring": "The composition of two local trivializations is the trivialization change Z.triv_change i j.\n", "keywords": {"trivialization change Z.triv": 0.006243087826045892, "change Z.triv": 0.01939645425747389, "local trivializations": 0.06104740651975287, "Z.triv": 0.06529614435081002, "trivialization change": 0.09279441717942427, "change": 0.14570071893270706, "composition": 0.19744254481508877, "local": 0.19744254481508877, "trivializations": 0.2914014378654141}}, {"docstring": " If `x` and `y` are two distinct vectors of norm at most `r`, then a convex combination of `x` and `y` with positive coefficients has norm strictly less than `r`.\n", "keywords": {"distinct vectors": 0.03439110359613085, "convex combination": 0.03439110359613085, "positive coefficients": 0.03439110359613085, "norm strictly": 0.05033870131288873, "vectors of norm": 0.11047974441476761, "coefficients has norm": 0.11047974441476761, "norm": 0.1314201551237121, "distinct": 0.1823394614884183, "vectors": 0.1823394614884183, "convex": 0.1823394614884183, "combination": 0.1823394614884183, "positive": 0.1823394614884183, "coefficients": 0.1823394614884183, "strictly": 0.1823394614884183}}, {"docstring": "The submonoid generated by an element of a monoid equals the set of natural number powers of    the element.\n", "keywords": {"natural number powers": 0.002477776488322723, "submonoid generated": 0.018034246898548233, "monoid equals": 0.018034246898548233, "equals the set": 0.018034246898548233, "set of natural": 0.018034246898548233, "natural number": 0.018034246898548233, "number powers": 0.018034246898548233, "element": 0.08782297807514622, "submonoid": 0.13309686053898662, "generated": 0.13309686053898662, "monoid": 0.13309686053898662, "equals": 0.13309686053898662, "set": 0.13309686053898662, "natural": 0.13309686053898662, "number": 0.13309686053898662, "powers": 0.13309686053898662}}, {"docstring": "The diameter of a set is always nonnegative\n", "keywords": {"nonnegative": 0.15831692877998726, "diameter": 0.29736558256021506, "set": 0.29736558256021506}}, {"docstring": "The determinant of a permutation matrix equals its sign.\n", "keywords": {"permutation matrix equals": 0.03339840940482845, "equals its sign": 0.04940384002065631, "permutation matrix": 0.09700399286574239, "matrix equals": 0.09700399286574239, "sign": 0.15831692877998726, "determinant": 0.29736558256021506, "permutation": 0.29736558256021506, "matrix": 0.29736558256021506, "equals": 0.29736558256021506}}, {"docstring": "If a subgroup of an additive topological group has `0` in its interior, then it is open.\n", "keywords": {"additive topological group": 0.03339840940482845, "additive topological": 0.09700399286574239, "topological group": 0.09700399286574239, "interior": 0.15831692877998726, "open": 0.15831692877998726, "subgroup": 0.29736558256021506, "additive": 0.29736558256021506, "topological": 0.29736558256021506, "group": 0.29736558256021506}}, {"docstring": " If a point is in the affine span of a set, adding it to that set does not change the affine span.\n", "keywords": {"affine span": 0.018650942614307144, "change the affine": 0.03278451112147437, "affine": 0.07915846438999363, "span": 0.11357121248292479, "adding": 0.12363091320521931, "set": 0.14868279128010753, "point": 0.2005079697193566, "change": 0.2005079697193566}}, {"docstring": "When multiplication is commutative, `star` preserves division.\n", "keywords": {"preserves division": 0.02570861714399338, "star": 0.04491197687864554, "multiplication is commutative": 0.04940384002065631, "commutative": 0.15831692877998726, "preserves": 0.15831692877998726, "division": 0.15831692877998726, "multiplication": 0.29736558256021506}}, {"docstring": " A multiple of a nonzero vector is in the same ray as that vector if and only if that multiple is positive.\n", "keywords": {"nonzero vector": 0.06104740651975287, "multiple is positive": 0.08132750272243244, "positive": 0.12156210109285605, "multiple": 0.14570071893270706, "vector": 0.14570071893270706, "nonzero": 0.19744254481508877, "ray": 0.19744254481508877}}, {"docstring": "The element `0` is `M`-regular when `M` is trivial.\n", "keywords": {"element": 0.09568045026443411, "regular": 0.09568045026443411, "trivial": 0.09568045026443411}}, {"docstring": "The separable degree divides the degree, in function of the exponential characteristic of F.\n", "keywords": {"separable degree divides": 0.003628079711673298, "exponential characteristic": 0.01904688389482227, "separable degree": 0.025536557885239508, "degree divides": 0.025536557885239508, "divides the degree": 0.06004269098969672, "degree": 0.09106811155038866, "separable": 0.1367145963576765, "divides": 0.1367145963576765, "function": 0.1367145963576765, "exponential": 0.1367145963576765, "characteristic": 0.1367145963576765}}, {"docstring": "The sieve `S` is closed iff its closure is equal to itself.\n", "keywords": {"closed iff": 0.02570861714399338, "iff its closure": 0.02570861714399338, "closure is equal": 0.02570861714399338, "sieve": 0.09568045026443411, "closed": 0.15831692877998726, "iff": 0.15831692877998726, "closure": 0.15831692877998726, "equal": 0.15831692877998726}}, {"docstring": "`add_monoid_algebra.grades` describe an internally graded algebra\n", "keywords": {"internally graded algebra": 0.016559150827736194, "add": 0.04491197687864554, "monoid": 0.04491197687864554, "algebra.grades": 0.04491197687864554, "describe an internally": 0.04940384002065631, "graded algebra": 0.04940384002065631, "internally graded": 0.09700399286574239, "describe": 0.15831692877998726, "algebra": 0.15831692877998726, "internally": 0.29736558256021506, "graded": 0.29736558256021506}}, {"docstring": "If a finset `u` is contained in the sum of two sets `s + t`, we can find two finsets `s'`, `t'` such that `s' \u2286 s`, `t' \u2286 t` and `u \u2286 s' + t'`.\n", "keywords": {"find two finsets": 0.020047210059068708, "finset": 0.0757224611147761, "finsets": 0.0757224611147761, "sets": 0.07692947664055963, "contained": 0.10187934809188742, "sum": 0.10187934809188742, "find": 0.10187934809188742}}, {"docstring": "The second projection in a product is a trivial topological fiber bundle.\n", "keywords": {"topological fiber bundle": 0.0025258761156662004, "trivial topological fiber": 0.0042542192213185686, "fiber bundle": 0.015380821171891606, "trivial topological": 0.02570861714399338, "topological fiber": 0.02570861714399338, "bundle": 0.09568045026443411, "projection": 0.15831692877998726, "product": 0.15831692877998726, "trivial": 0.15831692877998726, "topological": 0.15831692877998726, "fiber": 0.15831692877998726}}, {"docstring": "Given a finite set `s` and an element `a \u2209 s`, the sum of `f i` over `i \u2208 insert a s` equals `f a` plus the sum of `f i` over `i \u2208 s`.\n", "keywords": {"finite set": 0.009386651690650429, "sum": 0.04213844269123149, "equals": 0.05393656033701752, "set": 0.08179429269966654, "element": 0.08179429269966654, "insert": 0.08179429269966654, "finite": 0.11369206228658875}}, {"docstring": "The exponential characteristic is one if the characteristic is zero.\n", "keywords": {"exponential characteristic": 0.04771708711059453, "characteristic": 0.11357121248292479, "exponential": 0.2005079697193566}}, {"docstring": "1 is in the set of natural number powers of an element of a monoid.\n", "keywords": {"natural number powers": 0.0016012214736657916, "set of natural": 0.013527995261974615, "natural number": 0.013527995261974615, "number powers": 0.013527995261974615, "monoid": 0.0771485953923296, "set": 0.1155310835876123, "natural": 0.1155310835876123, "number": 0.1155310835876123, "powers": 0.1155310835876123, "element": 0.1155310835876123}}, {"docstring": " Let `g : \u03b3 \u2192 \u03b2` be an injective function and `f : \u03b2 \u2192 \u03b1` be a function from the codomain of `g` to an additive commutative monoid. Suppose that `f x = 0` outside of the range of `g`. Then the filters `at_top.map (\u03bb s, \u2211 i in s, f (g i))` and `at_top.map (\u03bb s, \u2211 i in s, f i)` coincide.  This lemma is used to prove the equality `\u2211' x, f (g x) = \u2211' y, f y` under the same assumptions.\n", "keywords": {"additive commutative monoid": 0.002981990471748758, "commutative monoid": 0.018827526108765178, "injective function": 0.021791363420353642, "additive commutative": 0.02382817159469232, "function": 0.06989729332633328, "top.map": 0.11420812549082149, "monoid": 0.12113252405818227, "injective": 0.15255688827815786, "codomain": 0.15255688827815786, "additive": 0.15255688827815786, "commutative": 0.15255688827815786, "prove the equality": 0.32113699528170564, "Suppose": 0.3237237065049396, "coincide": 0.3387930268492367, "range": 0.38469943493478503, "filters": 0.41086850841089795, "equality": 0.4608240885391191, "assumptions": 0.4608240885391191, "lemma": 0.5274815973777942, "prove": 0.5274815973777942}}, {"docstring": " If M is the midpoint of the segment AB and C is the same distance from A as it is from B then \u2220CMA = \u03c0 / 2.\n", "keywords": {"CMA": 0.030396371632413578, "midpoint": 0.1155310835876123, "segment": 0.1155310835876123, "distance": 0.1155310835876123}}, {"docstring": " The center of mass of a finite subset of a convex set belongs to the set provided that all weights are non-negative, and the total weight is positive.\n", "keywords": {"convex set belongs": 0.003628079711673298, "center of mass": 0.01904688389482227, "finite subset": 0.01904688389482227, "convex set": 0.025536557885239508, "set belongs": 0.025536557885239508, "set provided": 0.025536557885239508, "total weight": 0.025536557885239508, "weights are non-negative": 0.04108589655370922, "weight is positive": 0.04108589655370922, "set": 0.09106811155038866, "non-negative": 0.09202664026077896, "positive": 0.09202664026077896, "center": 0.1367145963576765, "mass": 0.1367145963576765, "finite": 0.1367145963576765, "subset": 0.1367145963576765, "convex": 0.1367145963576765, "belongs": 0.1367145963576765, "provided": 0.1367145963576765, "total": 0.1367145963576765}}, {"docstring": "Expand the square\n", "keywords": {"Expand the square": 0.02570861714399338, "Expand": 0.15831692877998726, "square": 0.15831692877998726}}, {"docstring": " A sigma compact pseudo emetric space has second countable topology. This is not an instance to avoid a loop with `sigma_compact_space_of_locally_compact_second_countable`.\n", "keywords": {"pseudo emetric space": 0.020921127216989268, "compact pseudo emetric": 0.02538373636951673, "pseudo emetric": 0.04683017427260936, "sigma compact pseudo": 0.05172649400213099, "countable topology": 0.06002354938423977, "emetric space": 0.0890154081045177, "compact pseudo": 0.1066845736274755, "topology": 0.14652096402882034, "compact": 0.15192587424628506, "sigma": 0.193230819776361, "space": 0.193230819776361, "countable": 0.193230819776361, "pseudo": 0.21150701240688133, "emetric": 0.21150701240688133, "sigma compact": 0.21379929679219933, "locally": 0.25115175583051225, "instance to avoid": 0.3031247073282236, "avoid a loop": 0.3031247073282236, "instance": 0.482300462910719, "avoid": 0.482300462910719}}, {"docstring": "The exponential map in `\ud835\udd42 = \u211d` or `\ud835\udd42 = \u2102` has derivative `exp \ud835\udd42 x` at any point `x`.\n", "keywords": {"exponential map": 0.013527995261974615, "derivative": 0.0771485953923296, "exp": 0.0771485953923296, "point": 0.0771485953923296, "exponential": 0.1155310835876123, "map": 0.1155310835876123}}, {"docstring": "Dual of `monotone.covariant_of_const`\n", "keywords": {"monotone.covariant": 0.04491197687864554, "const": 0.04491197687864554, "Dual": 0.09568045026443411}}, {"docstring": " If a series `f` on `\u03b2 \u00d7 \u03b3` has sum `a` and for each `b` the restriction of `f` to `{b} \u00d7 \u03b3` has sum `g b`, then the series `g` has sum `a`.\n", "keywords": {"sum": 0.02496564857184716, "series": 0.06626030218517898, "restriction": 0.1616313649453326}}, {"docstring": "**Alias** of le_trans'`.\n", "keywords": {"Alias": 0.030396371632413578, "trans": 0.04491197687864554}}, {"docstring": "`#(W_type \u03b2)` is the least cardinal `\u03ba` such that `sum (\u03bb a : \u03b1, \u03ba ^ #(\u03b2 a)) \u2264 \u03ba`\n", "keywords": {"sum": 0.04491197687864554, "type": 0.0771485953923296, "cardinal": 0.0771485953923296}}, {"docstring": "If there are zero morphisms, any initial object is a zero object.\n", "keywords": {"initial object": 0.05913243875864445, "morphisms": 0.11984314898676356, "object": 0.14323823713631006, "initial": 0.19488865479360015}}, {"docstring": "The sum of two `C^n`functions is `C^n`.\n", "keywords": {"functions": 0.09568045026443411, "sum": 0.15831692877998726}}, {"docstring": "The image of the map sending a non zero natural number `x \u2264 p / 2` to the absolute value  of the element of interger in the interval `(-p/2, p/2]` congruent to `a * x` mod p is the set  of non zero natural numbers `x` such that `x \u2264 p / 2`\n", "keywords": {"natural number": 0.0035878530375605022, "map sending": 0.008541237424818026, "element of interger": 0.008541237424818026, "natural": 0.03389408175523106, "number": 0.05273820949277851, "numbers": 0.05273820949277851, "interval": 0.07201108509564766, "congruent": 0.07201108509564766, "mod": 0.07201108509564766, "image": 0.09202664026077896, "map": 0.09202664026077896, "sending": 0.09202664026077896, "absolute": 0.09202664026077896, "element": 0.09202664026077896, "interger": 0.09202664026077896, "set": 0.09202664026077896}}, {"docstring": "Given submodules `M \u2286 R` and `N \u2286 S = M\u207b\u00b9R`, with `f : R \u2192+* S` the localization map, if `N` contains all the units of `S`, then `N \u207b\u00b9 S = T = (f\u207b\u00b9 N) \u207b\u00b9 R`. I.e., the localization of a localization is a localization.\n", "keywords": {"localization map": 0.056770441831644196, "localization": 0.09176701226410987, "submodules": 0.1463507772464983, "map": 0.1463507772464983, "units": 0.1979953396231437}}, {"docstring": " If `\u03c4` is a `canonically_ordered_add_monoid` (e.g., `\u2115` or `\u211d\u22650`), then the notions `is_fw_invariant` and `is_invariant` are equivalent.\n", "keywords": {"invariant": 0.019320982933644253, "canonically": 0.05331699930238388, "ordered": 0.05331699930238388, "add": 0.05331699930238388, "monoid": 0.05331699930238388, "notions": 0.09101163530720666, "equivalent": 0.09101163530720666}}, {"docstring": "The Hausdorff edistance of a set to itself vanishes\n", "keywords": {"Hausdorff edistance": 0.04498862876540802, "Hausdorff": 0.1447773057422032, "vanishes": 0.15831692877998726, "edistance": 0.29736558256021506, "set": 0.29736558256021506}}, {"docstring": " The pigeonhole principle for finitely many pigeons of different weights, strict inequality version: there is a pigeonhole with the total weight of pigeons in it less than `b` provided that the total number of pigeonholes times `b` is greater than the total weight of all pigeons.\n", "keywords": {"strict inequality version": 0.00123809518153274, "total weight": 0.00779283867886045, "strict inequality": 0.012729137304712644, "inequality version": 0.012729137304712644, "total number": 0.015609577775446122, "principle for finitely": 0.01767774231457477, "pigeonholes times": 0.020657923697067884, "pigeonhole principle": 0.028776525826688343, "total": 0.03887181793657505, "weight": 0.06579956337366495, "pigeons": 0.07074370456789453, "finitely many pigeons": 0.09033588165304433, "number of pigeonholes": 0.09033588165304433, "strict": 0.09536684262739953, "version": 0.09536684262739953, "provided": 0.09536684262739953, "times": 0.09536684262739953, "pigeonhole": 0.10611555685184179, "weight of pigeons": 0.112847865293687, "weights": 0.1315991267473299}}, {"docstring": " Given three nonzero vectors, adding the angles between them in cyclic order, with the second vector in each angle negated, results in \u03c0. If the vectors add to 0, this is a version of the sum of the angles of a triangle.\n", "keywords": {"cyclic order": 0.019561080820523987, "angle negated": 0.03379558456480049, "nonzero vectors": 0.05132311969920293, "adding the angles": 0.05785867710761824, "adding": 0.12129755590880277, "order": 0.12129755590880277, "negated": 0.12129755590880277, "results": 0.12129755590880277, "angles": 0.13475448982496005, "vectors add": 0.13878844757701606, "vectors": 0.15431896013595722, "nonzero": 0.1581712505591422, "cyclic": 0.1581712505591422, "angle": 0.2695089796499201, "vector": 0.30863792027191445, "triangle": 0.32406297685552543, "add": 0.39487622055868254, "version": 0.39487622055868254, "sum": 0.39487622055868254}}, {"docstring": "If two homomorphism from an additive group to an additive monoid are equal at `x`, then they are equal at `-x`.\n", "keywords": {"monoid are equal": 0.03147064175861185, "additive group": 0.045872129360315365, "additive monoid": 0.045872129360315365, "equal": 0.07726414307411157, "additive": 0.11107071682746067, "homomorphism": 0.19744254481508877, "group": 0.19744254481508877, "monoid": 0.19744254481508877}}, {"docstring": "Relation `\u03bb f g, tendsto (\u03bb x, (f x, g x)) l (\ud835\udce4 \u03b1)` is transitive.\n", "keywords": {"Relation": 0.04491197687864554, "tendsto": 0.04491197687864554, "transitive": 0.0771485953923296}}, {"docstring": " Euclid's theorem on the **infinitude of primes**. Here given in the form: for every `n`, there exists a prime number `p \u2265 n`.\n", "keywords": {"Euclid theorem": 0.038712704770480444, "infinitude of primes": 0.15195679415702995, "Euclid": 0.1531727145735673, "infinitude": 0.1531727145735673, "prime number": 0.21824965394572685, "theorem": 0.2433193585127945, "form": 0.3858257107143767, "number": 0.3858257107143767, "primes": 0.46432931383534065, "prime": 0.46432931383534065, "exists": 0.5275897320195264, "exists a prime": 0.5846700711531686}}, {"docstring": "Prefer `neg_zero` if `subtraction_monoid` is available.\n", "keywords": {"Prefer": 0.04491197687864554, "neg": 0.04491197687864554, "subtraction": 0.04491197687864554, "monoid": 0.04491197687864554}}, {"docstring": "`mul_comm` for `algebra`s when one element is from the base ring.\n", "keywords": {"mul": 0.04491197687864554, "comm": 0.04491197687864554, "algebra": 0.04491197687864554, "base ring": 0.04940384002065631, "ring": 0.15831692877998726, "element": 0.29736558256021506, "base": 0.29736558256021506}}, {"docstring": "A partition of `\u03b1` does not contain the empty set.\n", "keywords": {"empty set": 0.04940384002065631, "set": 0.15831692877998726, "partition": 0.29736558256021506, "empty": 0.29736558256021506}}, {"docstring": "A weaker version of `basis.op_norm_le` that abstracts away the value of `C`.\n", "keywords": {"weaker version": 0.02570861714399338, "basis.op": 0.04491197687864554, "norm": 0.04491197687864554, "weaker": 0.15831692877998726, "version": 0.15831692877998726, "abstracts": 0.15831692877998726}}, {"docstring": "The maximum degree of a nonempty graph is less than the number of vertices. Note that the assumption that `V` is nonempty is necessary, as otherwise this would assert the existence of a natural number less than zero.\n", "keywords": {"maximum degree": 0.025205094418535638, "nonempty graph": 0.046554437528629734, "number of vertices": 0.07483299411230286, "vertices": 0.11436639497981606, "natural number": 0.12527140951609053, "nonempty": 0.1418503717089202, "number": 0.1418503717089202, "maximum": 0.1567973745636324, "degree": 0.1567973745636324, "graph": 0.1567973745636324, "assert the existence": 0.18200718244465583, "Note": 0.3096281242706372, "assumption": 0.39240470458943716, "assert": 0.39240470458943716, "existence": 0.39240470458943716, "natural": 0.39240470458943716}}, {"docstring": " Heine-Cantor: a continuous function on a compact set of a separated uniform space is uniformly continuous.\n", "keywords": {"separated uniform space": 0.002477776488322723, "compact set": 0.018034246898548233, "separated uniform": 0.018034246898548233, "uniform space": 0.018034246898548233, "space is uniformly": 0.018034246898548233, "continuous function": 0.023937535241430174, "uniformly continuous": 0.023937535241430174, "Heine-Cantor": 0.052376395424323874, "continuous": 0.08782297807514622, "function": 0.13309686053898662, "compact": 0.13309686053898662, "set": 0.13309686053898662, "separated": 0.13309686053898662, "uniform": 0.13309686053898662, "space": 0.13309686053898662, "uniformly": 0.13309686053898662}}, {"docstring": "if we have a solution to `a ^ 4 + b ^ 4 = c ^ 2` then there must be a minimal one.\n", "keywords": {"solution": 0.1155310835876123, "minimal": 0.1155310835876123}}, {"docstring": " A product of a function `f : fin (n + 1) \u2192 \u03b2` over all `fin (n + 1)` is the product of `f x`, for some `x : fin (n + 1)` times the remaining product\n", "keywords": {"fin": 0.014424975264340157, "times the remaining": 0.017964128007125643, "remaining product": 0.03682798658163914, "product": 0.07346527312676998, "function": 0.10949789095039009, "times": 0.10949789095039009, "remaining": 0.16116395354182755}}, {"docstring": "See also `cardinal.nsmul_lt_aleph_0_iff_of_ne_zero` if you already have `n \u2260 0`.\n", "keywords": {"cardinal.nsmul": 0.04491197687864554, "aleph": 0.04491197687864554, "iff": 0.04491197687864554}}, {"docstring": " If `f : \u03b9 \u2192 filter \u03b1` is directed, `\u03b1` is not empty, and `\u2200 i, f i \u2260 \u22a5`, then `infi f \u2260 \u22a5`. See also `infi_ne_bot_of_directed'` for a version assuming `nonempty \u03b9` instead of `nonempty \u03b1`.\n", "keywords": {"infi": 0.11584635595819967, "filter": 0.13874228850015136, "empty": 0.13874228850015136, "nonempty": 0.18269899892831928, "directed": 0.18574461176690396, "version assuming": 0.20097116219473396, "bot": 0.23937626944391205, "assuming": 0.35876280059460885, "version": 0.4664378224654198}}, {"docstring": " If a function tends to negative infinity along a filter, then this function multiplied by a positive constant (on the left) also tends to negative infinity.\n", "keywords": {"positive constant": 0.014444143345573873, "function multiplied": 0.029581009763283855, "negative": 0.037271111797932945, "filter": 0.09805740926331882, "constant": 0.09805740926331882, "left": 0.09805740926331882, "function": 0.09893255831095867, "multiplied": 0.14520555658610762, "positive": 0.14520555658610762}}, {"docstring": "A vector is in the same ray as a positive multiple of itself.\n", "keywords": {"positive multiple": 0.02570861714399338, "vector": 0.15831692877998726, "ray": 0.15831692877998726, "positive": 0.15831692877998726, "multiple": 0.15831692877998726}}, {"docstring": "If an integral domain has a primitive `k`-th root of unity, then it has `\u03c6 k` of them.\n", "keywords": {"root of unity": 0.015380821171891606, "integral domain": 0.02570861714399338, "primitive": 0.09568045026443411, "unity": 0.09568045026443411, "integral": 0.15831692877998726, "domain": 0.15831692877998726, "root": 0.15831692877998726}}, {"docstring": " If two filters are disjoint, then a function cannot tend to both of them along a non-trivial filter.\n", "keywords": {"function cannot tend": 0.03663237450220032, "non-trivial filter": 0.05417025203414716, "filters are disjoint": 0.07301337118426866, "disjoint": 0.11521656054299435, "function": 0.1879836817695587, "tend": 0.1879836817695587, "non-trivial": 0.1879836817695587, "filters": 0.2733568418908229, "filter": 0.2733568418908229}}, {"docstring": "Any element commutes with itself.\n", "keywords": {"element commutes": 0.09700399286574239, "element": 0.29736558256021506, "commutes": 0.29736558256021506}}, {"docstring": " The pigeonhole principle for finitely many pigeons counted by heads: there is a pigeonhole with at least as many pigeons as the ceiling of the average number of pigeons across all pigeonholes.\n", "keywords": {"counted by heads": 0.016246541580599908, "principle for finitely": 0.024168308283651477, "average number": 0.024168308283651477, "pigeons counted": 0.035620431257375226, "pigeonhole principle": 0.04284837031321326, "finitely many pigeons": 0.0614217766886356, "pigeons": 0.07463453804728754, "heads": 0.1040697200317232, "number of pigeons": 0.10863510532239432, "pigeonhole": 0.13373518619952043, "principle": 0.15361635625637673, "finitely": 0.15361635625637673, "counted": 0.15361635625637673, "ceiling": 0.15361635625637673, "average": 0.15361635625637673, "number": 0.15361635625637673}}, {"docstring": "**Alias** of the reverse direction of list.nodup_sublists`.\n", "keywords": {"direction of list.nodup": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "sublists": 0.04491197687864554, "list.nodup": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "The real exponential function tends to `1` at `0`.\n", "keywords": {"real exponential function": 0.03339840940482845, "real exponential": 0.09700399286574239, "exponential function": 0.09700399286574239, "real": 0.29736558256021506, "exponential": 0.29736558256021506, "function": 0.29736558256021506}}, {"docstring": "The image of a monoid hom is a submonoid of the codomain.\n", "keywords": {"monoid hom": 0.02570861714399338, "codomain": 0.09568045026443411, "image": 0.15831692877998726, "monoid": 0.15831692877998726, "hom": 0.15831692877998726, "submonoid": 0.15831692877998726}}, {"docstring": "**Alias** of the forward direction of le_inv_mul_iff_mul_le`.\n", "keywords": {"mul": 0.019648131954263418, "Alias": 0.034278050535979626, "forward direction": 0.035715520099333646, "inv": 0.05393656033701752, "iff": 0.05393656033701752, "forward": 0.18569843656348187, "direction": 0.18569843656348187}}, {"docstring": "Roger's fixed-point theorem: Any total, computable `f` has a fixed point: That is, under the interpretation given by `nat.partrec.code.eval`, there is a code `c` such that `c` and `f c` have the same evaluation.\n", "keywords": {"Roger fixed-point theorem": 0.0007033879598307785, "Roger fixed-point": 0.00899321792126428, "fixed-point theorem": 0.00899321792126428, "fixed point": 0.00899321792126428, "computable": 0.04491197687864554, "Roger": 0.0771485953923296, "theorem": 0.0771485953923296, "total": 0.0771485953923296, "point": 0.0771485953923296, "code": 0.0771485953923296, "evaluation": 0.0771485953923296, "fixed": 0.1155310835876123, "interpretation": 0.1155310835876123}}, {"docstring": "The scalar multiplication of two `C^n` functions is `C^n`.\n", "keywords": {"scalar multiplication": 0.02570861714399338, "functions": 0.09568045026443411, "scalar": 0.15831692877998726, "multiplication": 0.15831692877998726}}, {"docstring": " Let `M` be a smooth manifold with corners modelled on a finite dimensional real vector space. Suppose also that `M` is a Hausdorff `\u03c3`-compact topological space. Let `s` be a closed set in `M` and `U : M \u2192 set M` be a collection of sets such that `U x \u2208 \ud835\udcdd x` for every `x \u2208 s`. Then there exists a smooth bump covering of `s` that is subordinate to `U`.\n", "keywords": {"finite dimensional real": 0.005018128093209261, "dimensional real vector": 0.005018128093209261, "real vector space": 0.005866685475691347, "manifold with corners": 0.028639034730808376, "corners modelled": 0.028639034730808376, "finite dimensional": 0.028639034730808376, "dimensional real": 0.028639034730808376, "real vector": 0.028639034730808376, "vector space": 0.03336647512890191, "compact topological space": 0.03601255123871197, "smooth manifold": 0.062938294340049, "topological space": 0.0862294261165431, "space": 0.09675608303440883, "compact topological": 0.1662498878524926, "manifold": 0.16685825123362819, "corners": 0.16685825123362819, "modelled": 0.16685825123362819, "finite": 0.16685825123362819, "dimensional": 0.16685825123362819, "real": 0.16685825123362819}}, {"docstring": " If all elements of a nonempty set `s` are less than or equal to all elements of a nonempty set `t`, then there exists an element between these sets.\n", "keywords": {"nonempty set": 0.00772491819226241, "set": 0.05684855837509545, "nonempty": 0.06690921943306298, "elements": 0.10045823518825825, "exists an element": 0.1044574212795701, "sets": 0.1136971167501909, "equal": 0.16259301592423192, "exists": 0.16259301592423192, "element": 0.2009164703765165}}, {"docstring": "The `0` element is not `M`-regular, on a non-trivial module.\n", "keywords": {"regular": 0.04491197687864554, "non-trivial module": 0.04940384002065631, "element": 0.15831692877998726, "module": 0.15831692877998726, "non-trivial": 0.29736558256021506}}, {"docstring": "**Alias** of subset_antisymm`.\n", "keywords": {"Alias": 0.030396371632413578, "antisymm": 0.04491197687864554, "subset": 0.15831692877998726}}, {"docstring": "Swapping the two vectors passed to `oangle` negates the angle.\n", "keywords": {"negates the angle": 0.009239332327148086, "vectors passed": 0.02570861714399338, "oangle": 0.04491197687864554, "Swapping": 0.09568045026443411, "negates": 0.09568045026443411, "angle": 0.09568045026443411, "vectors": 0.15831692877998726, "passed": 0.15831692877998726}}, {"docstring": " The Chevalley\u2013Warning theorem. Let `f` be a multivariate polynomial in finitely many variables (`X s`, `s : \u03c3`) over a finite field of characteristic `p`. Assume that the total degree of `f` is less than the cardinality of `\u03c3`. Then the number of solutions of `f` is divisible by `p`. See `char_dvd_card_solutions_family` for a version that takes a family of polynomials `f i`.\n", "keywords": {"Warning theorem": 0.007577078230587772, "Chevalley": 0.05897527452259839, "Warning": 0.05897527452259839, "theorem": 0.12751272328394622, "finitely many variables": 0.1550347270143989, "field of characteristic": 0.1550347270143989, "finite field": 0.18896680998444698, "multivariate polynomial": 0.22351744039478968, "solutions": 0.24925713657518192, "family": 0.2718666631352846, "total degree": 0.3182212470436606, "variables": 0.3366867666716027, "characteristic": 0.3366867666716027, "multivariate": 0.39866480794659503, "finitely": 0.39866480794659503, "finite": 0.39866480794659503, "field": 0.39866480794659503, "polynomial in finitely": 0.4187278836057889, "Assume": 0.425127498312775, "char": 0.4318387928676043}}, {"docstring": "If any two objects in an nonempty category are related by `zigzag`, the category is connected.\n", "keywords": {"nonempty category": 0.05259515133015473, "zigzag": 0.05393656033701752, "category is connected": 0.0710891909196062, "connected": 0.11369206228658875, "category are related": 0.11487806119690562, "category": 0.13453835116331675, "objects": 0.18569843656348187, "nonempty": 0.18569843656348187, "related": 0.18569843656348187}}, {"docstring": "Negating the first vector passed to `oangle` adds `\u03c0` to the angle.\n", "keywords": {"vector passed": 0.02570861714399338, "oangle": 0.04491197687864554, "adds": 0.04491197687864554, "Negating": 0.09568045026443411, "angle": 0.09568045026443411, "vector": 0.15831692877998726, "passed": 0.15831692877998726}}, {"docstring": " An extensionality for measures. It is `ext_of_generate_from_of_Union` formulated in terms of `finite_spanning_sets_in`.\n", "keywords": {"extensionality for measures": 0.015099935621315529, "measures": 0.10028582371075691, "Union": 0.11555589791117535, "formulated in terms": 0.11755105063023073, "extensionality": 0.14832923246533666, "ext": 0.17881754828257995, "generate": 0.17881754828257995, "finite": 0.17881754828257995, "spanning": 0.17881754828257995, "sets": 0.17881754828257995, "formulated": 0.2790829227183407, "terms": 0.37689977775222827}}, {"docstring": "Alias of the forwards direction of `even_iff_exists_two_nsmul`.\n", "keywords": {"forwards direction": 0.02570861714399338, "iff": 0.04491197687864554, "exists": 0.04491197687864554, "nsmul": 0.04491197687864554, "Alias": 0.09568045026443411, "forwards": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "The characteristic of a finite ring cannot be zero.\n", "keywords": {"finite ring": 0.09700399286574239, "characteristic": 0.29736558256021506, "finite": 0.29736558256021506, "ring": 0.29736558256021506}}, {"docstring": "The rank of the direct sum is the sum of the ranks.\n", "keywords": {"direct sum": 0.020935822459369965, "sum": 0.08136984231491272, "direct": 0.12600799873373572, "rank": 0.12953844097397837, "ranks": 0.12953844097397837}}, {"docstring": "If `M` and `N` lie in the same universe, the rank of `M \u00d7 N` is  `(module.rank R M) + (module.rank R N)`.\n", "keywords": {"module.rank": 0.03548996106871502, "lie": 0.09492398510093508, "universe": 0.09492398510093508, "rank": 0.1408007092310104}}, {"docstring": "A recapitulation of the definition of multiplicative that is simpler for proofs\n", "keywords": {"simpler for proofs": 0.015380821171891606, "definition of multiplicative": 0.02570861714399338, "proofs": 0.09568045026443411, "recapitulation": 0.15831692877998726, "definition": 0.15831692877998726, "multiplicative": 0.15831692877998726, "simpler": 0.15831692877998726}}, {"docstring": "See `int.induction_on'` for an induction in both directions.\n", "keywords": {"int.induction": 0.04491197687864554, "directions": 0.15831692877998726, "induction": 0.29736558256021506}}, {"docstring": "**Alias** of not_subset_of_ssubset`.\n", "keywords": {"Alias": 0.030396371632413578, "subset": 0.04491197687864554, "ssubset": 0.04491197687864554}}, {"docstring": "`x ^ s = o(exp x)` as `x \u2192 \u221e` for any real `s`.\n", "keywords": {"exp": 0.0771485953923296, "real": 0.0771485953923296}}, {"docstring": "A sequence of functions `F\u2099` converges uniformly on a set `s` to a limiting function `f` w.r.t. filter `p` iff the function `(n, x) \u21a6 (f x, F\u2099 x)` converges along `p \u00d7\u1da0 \ud835\udcdf s` to the uniformity. In other words: one knows nothing about the behavior of `x` in this limit besides it being in `s`.\n", "keywords": {"converges uniformly": 0.019845455375546366, "limiting function": 0.020066859132405506, "iff the function": 0.05112332997459819, "converges": 0.058173060254629434, "function": 0.05880929471782644, "sequence of functions": 0.06684900254354409, "filter": 0.08194943807223325, "functions": 0.11761858943565288, "set": 0.12240361169010548, "iff": 0.12240361169010548, "uniformity": 0.12240361169010548, "sequence": 0.1672533392077955, "uniformly": 0.1672533392077955, "limiting": 0.1672533392077955, "words": 0.32633130528594445, "behavior": 0.41091546446421373, "limit": 0.41091546446421373}}, {"docstring": " Given `z : S`, `is_localization.sec M z` is defined to be a pair `(x, y) : R \u00d7 M` such that `z * f y = f x` (so this lemma is true by definition).\n", "keywords": {"true by definition": 0.00899321792126428, "lemma is true": 0.013527995261974615, "localization.sec": 0.0771485953923296, "pair": 0.0771485953923296, "definition": 0.0771485953923296, "defined": 0.1155310835876123, "lemma": 0.1155310835876123, "true": 0.1155310835876123}}, {"docstring": " Although not explicitly stated, the assumptions of lemma `nat_degree_C_mul_eq_of_mul_ne_zero` force the polynomial `p` to be non-zero, via `p.leading_coeff \u2260 0`.\n", "keywords": {"force the polynomial": 0.011952723664711083, "mul": 0.018333336826096672, "explicitly stated": 0.019743941211743603, "assumptions of lemma": 0.019743941211743603, "nat": 0.0514064682630094, "degree": 0.0514064682630094, "p.leading": 0.0514064682630094, "coeff": 0.0514064682630094, "stated": 0.10868092541297539, "lemma": 0.10868092541297539, "force": 0.10868092541297539, "polynomial": 0.10868092541297539, "non-zero": 0.10868092541297539, "explicitly": 0.1781514608044755, "assumptions": 0.1781514608044755}}, {"docstring": "x is in the support of f iff cycle_of f x is a cycle.\n", "keywords": {"iff cycle": 0.03040783387545046, "cycle": 0.07571113878390312, "support": 0.19488865479360015, "iff": 0.19488865479360015}}, {"docstring": " In a linearly ordered additive commutative group with the order topology, if `f` tends to `at_bot` and `g` tends to `C` then `f + g` tends to `at_bot`.\n", "keywords": {"linearly ordered additive": 0.002535831815717203, "ordered additive commutative": 0.002535831815717203, "additive commutative group": 0.002535831815717203, "order topology": 0.012240009979360944, "linearly ordered": 0.018310930906343142, "ordered additive": 0.018310930906343142, "additive commutative": 0.018310930906343142, "commutative group": 0.018310930906343142, "bot": 0.019053917256533312, "topology": 0.09017440044927587, "linearly": 0.13409574860218185, "ordered": 0.13409574860218185, "additive": 0.13409574860218185, "commutative": 0.13409574860218185, "group": 0.13409574860218185, "order": 0.13409574860218185}}, {"docstring": "A concave function on a segment is lower-bounded by the min of its endpoints.\n", "keywords": {"concave function": 0.02570861714399338, "segment is lower-bounded": 0.02570861714399338, "endpoints": 0.09568045026443411, "concave": 0.15831692877998726, "function": 0.15831692877998726, "segment": 0.15831692877998726, "lower-bounded": 0.15831692877998726, "min": 0.15831692877998726}}, {"docstring": " If `irreducible (cyclotomic (2 ^ k) K)` (in particular for `K = \u211a`) and `k` is at least `2`, then the norm of `zeta (2 ^ k) K L - 1` is `2`.\n", "keywords": {"irreducible": 0.04491197687864554, "cyclotomic": 0.04491197687864554, "zeta": 0.04491197687864554, "norm": 0.0771485953923296}}, {"docstring": "Construct `is_add_group_hom` from its only hypothesis.\n", "keywords": {"Construct": 0.04491197687864554, "add": 0.04491197687864554, "group": 0.04491197687864554, "hom": 0.04491197687864554, "hypothesis": 0.15831692877998726}}, {"docstring": "The composition of `C^n` functions is `C^n`.\n", "keywords": {"functions": 0.09568045026443411, "composition": 0.15831692877998726}}, {"docstring": " Given `c = line_map a b r`, `a < c < b`, the point `(c, f c)` is non-strictly above the segment `[(a, f a), (b, f b)]` if and only if `slope f c b \u2264 slope f a c`.\n", "keywords": {"slope": 0.026369104746389253, "line": 0.05393656033701752, "map": 0.07201108509564766, "point": 0.07201108509564766, "segment": 0.07201108509564766, "non-strictly": 0.09202664026077896}}, {"docstring": "The \"equalizer\" sheaf condition can be obtained from the sheaf condition in terms of unique gluings.\n", "keywords": {"unique gluings": 0.0233550736766052, "sheaf condition": 0.024140905658634568, "terms of unique": 0.038584678130008584, "equalizer": 0.05632962681207606, "condition in terms": 0.09670422792801366, "sheaf": 0.10730569120144322, "condition": 0.10730569120144322, "gluings": 0.11840455484321102, "obtained": 0.19274649316101516, "terms": 0.19274649316101516, "unique": 0.19274649316101516}}, {"docstring": "The inner product of a row of A and a row of B is an entry of B \u2b1d A\u1d34.\n", "keywords": {"row": 0.0456089852516003, "product": 0.11984314898676356, "entry": 0.11984314898676356}}, {"docstring": "An induction principle for additive closure membership for predicates with two arguments.\n", "keywords": {"additive closure membership": 0.0042542192213185686, "induction principle": 0.02570861714399338, "principle for additive": 0.02570861714399338, "additive closure": 0.02570861714399338, "closure membership": 0.02570861714399338, "membership for predicates": 0.02570861714399338, "arguments": 0.09568045026443411, "induction": 0.15831692877998726, "principle": 0.15831692877998726, "additive": 0.15831692877998726, "closure": 0.15831692877998726, "membership": 0.15831692877998726, "predicates": 0.15831692877998726}}, {"docstring": "Symmetric entourages form a basis of `\ud835\udce4 \u03b1`\n", "keywords": {"Symmetric entourages form": 0.01655915082773619, "Symmetric entourages": 0.04940384002065631, "entourages form": 0.09700399286574239, "form a basis": 0.09700399286574239, "Symmetric": 0.15831692877998726, "entourages": 0.29736558256021506, "form": 0.29736558256021506, "basis": 0.29736558256021506}}, {"docstring": "**Ptolemy\u2019s Theorem**.\n", "keywords": {"Ptolemy \u2019s Theorem": 0.007444681613352736, "Ptolemy": 0.08596317751626563, "Theorem": 0.08596317751626563}}, {"docstring": "`zpow b` and `int.log b` (almost) form a Galois connection.\n", "keywords": {"form a Galois": 0.008293207122436794, "Galois connection": 0.008293207122436794, "Galois": 0.08596317751626563, "zpow": 0.09568045026443411, "int.log": 0.09568045026443411, "form": 0.09568045026443411, "connection": 0.09568045026443411}}, {"docstring": " Given a Borel-measurable set in a Polish space, there exists a finer Polish topology making it clopen. This is in fact an equivalence, see `is_clopenable_iff_measurable_set`.\n", "keywords": {"finer Polish topology": 0.003565765538361886, "Polish topology making": 0.003565765538361886, "Polish space": 0.012693887258749509, "finer Polish": 0.01863957905946803, "Polish topology": 0.01863957905946803, "making it clopen": 0.02335939204334099, "Borel-measurable set": 0.02987626914743479, "exists a finer": 0.03447074540170908, "topology making": 0.03447074540170908, "Polish": 0.050120953850619855, "Borel-measurable": 0.08433210096311344, "space": 0.12504522868882575, "clopen": 0.12504522868882575, "fact an equivalence": 0.16944032286186908, "set": 0.1719960196270743, "exists": 0.18254344008272147, "finer": 0.18254344008272147, "topology": 0.18254344008272147, "making": 0.18254344008272147, "clopenable": 0.21826204231687923}}, {"docstring": "Contrapositive form of `nat.factorization_central_binom_eq_zero_of_two_mul_lt`\n", "keywords": {"Contrapositive form": 0.015380821171891606, "nat.factorization": 0.04491197687864554, "central": 0.04491197687864554, "binom": 0.04491197687864554, "mul": 0.04491197687864554, "Contrapositive": 0.09568045026443411, "form": 0.15831692877998726}}, {"docstring": "Determinant of 2x2 matrix\n", "keywords": {"matrix": 0.04491197687864554, "Determinant": 0.15831692877998726}}, {"docstring": " If a function `f : \u03b1 \u2192 \u211d\u22650\u221e` is such that the level sets `{f < p}` and `{q < f}` have measurable supersets which are disjoint up to measure zero when `p` and `q` are finite numbers satisfying `p < q`, then `f` is almost-everywhere measurable.\n", "keywords": {"finite numbers satisfying": 0.0009627278888719739, "level sets": 0.008647339421442081, "numbers satisfying": 0.008647339421442081, "finite numbers": 0.01207746271572421, "measurable supersets": 0.014750216701041274, "almost-everywhere measurable": 0.014750216701041274, "measurable": 0.06653164730624737, "function": 0.07848057620844077, "sets": 0.07848057620844077, "satisfying": 0.07848057620844077, "level": 0.10923981997294611, "supersets": 0.10923981997294611, "disjoint": 0.10923981997294611, "measure": 0.10923981997294611, "finite": 0.10923981997294611, "numbers": 0.10923981997294611, "almost-everywhere": 0.10923981997294611}}, {"docstring": "`unique_mdiff_within_at` achieves its goal: it implies the uniqueness of the derivative.\n", "keywords": {"achieves its goal": 0.009239332327148086, "implies the uniqueness": 0.02570861714399338, "unique": 0.04491197687864554, "mdiff": 0.04491197687864554, "achieves": 0.09568045026443411, "goal": 0.09568045026443411, "derivative": 0.09568045026443411, "implies": 0.15831692877998726, "uniqueness": 0.15831692877998726}}, {"docstring": "A module whose scalars are additively torsion is additively torsion.\n", "keywords": {"additively torsion": 0.027200199006318638, "module whose scalars": 0.04188746641162499, "scalars are additively": 0.10583238594216893, "additively": 0.11357121248292479, "torsion": 0.11357121248292479, "torsion is additively": 0.1804246332749005, "module": 0.2005079697193566, "scalars": 0.2005079697193566}}, {"docstring": " **Rearrangement Inequality**: Pointwise multiplication of `f` and `g` is maximized when `f` and `g` monovary together. Stated by permuting the entries of `f`.\n", "keywords": {"Rearrangement Inequality": 0.0031146356952437464, "Pointwise multiplication": 0.008334116283452563, "Rearrangement": 0.05572221155747183, "Inequality": 0.05572221155747183, "Pointwise": 0.05572221155747183, "monovary": 0.10028582371075691, "Stated by permuting": 0.11755105063023073, "multiplication": 0.14832923246533666, "maximized": 0.14832923246533666, "permuting the entries": 0.165573765898185, "Stated": 0.2790829227183407, "permuting": 0.37689977775222827, "entries": 0.37689977775222827}}, {"docstring": "A p-group is nilpotent\n", "keywords": {"p-group is nilpotent": 0.04940384002065631, "nilpotent": 0.15831692877998726, "p-group": 0.29736558256021506}}, {"docstring": "A single point is cospherical.\n", "keywords": {"point is cospherical": 0.04940384002065631, "single point": 0.09700399286574239, "cospherical": 0.15831692877998726, "single": 0.29736558256021506, "point": 0.29736558256021506}}, {"docstring": "The continued fraction `generalized_continued_fraction.of v` terminates if and only if `v \u2208 \u211a`.\n", "keywords": {"continued fraction": 0.0325194426147957, "generalized": 0.054709255964732355, "fraction": 0.11521656054299435, "fraction.of": 0.11521656054299435, "terminates": 0.11521656054299435, "continued": 0.13667842094541144}}, {"docstring": "A unit is `M`-regular.\n", "keywords": {"regular": 0.04491197687864554, "unit": 0.29736558256021506}}, {"docstring": " This is an auxiliary lemma giving information about the relation of two triangles in an orthocentric system; it abstracts some reasoning, with no geometric content, that is common to some other lemmas.  Suppose the orthocentric system is generated by triangle `t`, and we are given three points `p` in the orthocentric system.  Then either we can find indices `i\u2081`, `i\u2082` and `i\u2083` for `p` such that `p i\u2081` is the orthocenter of `t` and `p i\u2082` and `p i\u2083` are points `j\u2082` and `j\u2083` of `t`, or `p` has the same points as `t`.\n", "keywords": {"auxiliary lemma giving": 0.005659207823450838, "lemma giving information": 0.005659207823450838, "orthocentric system": 0.016217300428215436, "abstracts some reasoning": 0.02472868481645069, "geometric content": 0.02472868481645069, "auxiliary lemma": 0.030876507107365635, "lemma giving": 0.030876507107365635, "giving information": 0.031177381887738186, "orthocentric": 0.0661041593352022, "system": 0.07798250330331086, "Suppose the orthocentric": 0.12525925139447253, "reasoning": 0.13878387003454087, "content": 0.13878387003454087, "points": 0.14779258637370463, "lemma": 0.17225363305067562, "lemmas": 0.17225363305067562, "auxiliary": 0.17388140152550075, "giving": 0.17388140152550075, "information": 0.17388140152550075, "relation": 0.17388140152550075}}, {"docstring": "The span of a finite subset is compact in the lattice of submodules.\n", "keywords": {"lattice of submodules": 0.015380821171891606, "finite subset": 0.02570861714399338, "subset is compact": 0.02570861714399338, "submodules": 0.09568045026443411, "span": 0.15831692877998726, "finite": 0.15831692877998726, "subset": 0.15831692877998726, "compact": 0.15831692877998726, "lattice": 0.15831692877998726}}, {"docstring": " Given `f : \u03b2 \u2192 \u211d`, if `f` sends `{i | p i}` to a set of positive numbers accumulating to zero, then closed neighborhoods of the diagonal of sizes `{f i | p i}` form a basis of `\ud835\udce4 \u03b1`.  Currently we have only one specific basis `uniformity_basis_dist_le` based on this constructor. More can be easily added if needed in the future.\n", "keywords": {"positive numbers accumulating": 0.006038361286567789, "diagonal of sizes": 0.023520669966368275, "set of positive": 0.03231400329010047, "positive numbers": 0.03231400329010047, "numbers accumulating": 0.03231400329010047, "closed neighborhoods": 0.03231400329010047, "sends": 0.08720490253319044, "basis": 0.11654373267691294, "sizes": 0.1298863753145326, "form": 0.1298863753145326, "form a basis": 0.13109995322086607, "specific basis": 0.17570723433446367, "set": 0.17692510953395071, "positive": 0.17692510953395071, "numbers": 0.17692510953395071, "accumulating": 0.17692510953395071, "closed": 0.17692510953395071, "neighborhoods": 0.17692510953395071, "diagonal": 0.17692510953395071, "uniformity": 0.24913831054874652}}, {"docstring": " If `r` is a well-founded relation, then any nonempty set has a minimal element with respect to `r`.\n", "keywords": {"well-founded relation": 0.015380821171891606, "nonempty set": 0.02570861714399338, "minimal element": 0.02570861714399338, "element with respect": 0.02570861714399338, "relation": 0.09568045026443411, "well-founded": 0.15831692877998726, "nonempty": 0.15831692877998726, "set": 0.15831692877998726, "minimal": 0.15831692877998726, "element": 0.15831692877998726, "respect": 0.15831692877998726}}, {"docstring": "This is the same as `add_order_of_nsmul'` and `add_order_of_nsmul` but with one assumption less which is automatic in the case of a finite cancellative additive monoid.\n", "keywords": {"cancellative additive monoid": 0.0020530886296298424, "finite cancellative additive": 0.003079702822794889, "additive monoid": 0.013941255708595121, "finite cancellative": 0.020803568001713568, "cancellative additive": 0.020803568001713568, "add": 0.02107242729789198, "order": 0.02107242729789198, "nsmul": 0.05445455692328286, "monoid": 0.09631441144923199, "assumption": 0.14275713507656845, "automatic": 0.14275713507656845, "case": 0.14275713507656845, "finite": 0.14275713507656845, "cancellative": 0.14275713507656845, "additive": 0.14275713507656845}}, {"docstring": " Two measures which are finite on closed-open intervals are equal if the agree on all closed-open intervals.\n", "keywords": {"closed-open intervals": 0.02495406599442899, "finite on closed-open": 0.09916653097095413, "intervals are equal": 0.09916653097095413, "closed-open": 0.10901343189444501, "intervals": 0.10901343189444501, "measures": 0.19488865479360015, "finite": 0.19488865479360015, "equal": 0.19488865479360015, "agree": 0.19488865479360015}}, {"docstring": "If a function has a non-zero strict derivative at all points, then it is an open map.\n", "keywords": {"non-zero strict derivative": 0.0042542192213185686, "open map": 0.015380821171891606, "non-zero strict": 0.02570861714399338, "strict derivative": 0.02570861714399338, "points": 0.09568045026443411, "map": 0.09568045026443411, "function": 0.15831692877998726, "non-zero": 0.15831692877998726, "strict": 0.15831692877998726, "derivative": 0.15831692877998726, "open": 0.15831692877998726}}, {"docstring": " Given two localization maps `f : M \u2192* N, k : M \u2192* P` for a submonoid `S \u2286 M`, the hom from `P` to `N` induced by `f` is left inverse to the hom from `N` to `P` induced by `k`.\n", "keywords": {"localization maps": 0.013833902242147065, "left inverse": 0.02064652498550541, "induced": 0.03606013103477163, "hom": 0.054147325146855434, "maps": 0.09593831581184391, "submonoid": 0.09593831581184391, "localization": 0.14222822903176371, "left": 0.14222822903176371, "inverse": 0.14222822903176371}}, {"docstring": " The set of boxes of a prepartition that contain `x` in their closures has cardinality at most `2 ^ fintype.card \u03b9`.\n", "keywords": {"set of boxes": 0.02570861714399338, "closures has cardinality": 0.02570861714399338, "fintype.card": 0.09568045026443411, "set": 0.15831692877998726, "boxes": 0.15831692877998726, "prepartition": 0.15831692877998726, "closures": 0.15831692877998726, "cardinality": 0.15831692877998726}}, {"docstring": "If a function is locally Lipschitz around a point, then it is continuous at this point.\n", "keywords": {"locally Lipschitz": 0.017992190482742136, "function is locally": 0.03663237450220032, "point": 0.07162298286637953, "Lipschitz": 0.09401982591602405, "function": 0.1879836817695587, "locally": 0.1879836817695587, "continuous": 0.1879836817695587}}, {"docstring": "Given a map f from \u03b1 to \u03b2, the natural map from the quotient of \u03b1 by the kernel of f is    injective.\n", "keywords": {"natural map": 0.02635223776265893, "map": 0.09269208833952335, "injective": 0.09329120537733218, "natural": 0.1384995633470844, "quotient": 0.1384995633470844, "kernel": 0.1384995633470844}}, {"docstring": " The mean value theorem on a convex set in dimension 1: if the derivative of a function is bounded by `C`, then the function is `C`-Lipschitz. Version with `deriv`.\n", "keywords": {"set in dimension": 0.021897096923229387, "function is bounded": 0.029758867094589372, "convex set": 0.032361484023902806, "Lipschitz": 0.040742737524486844, "function": 0.08161172169586978, "dimension": 0.12102666257279926, "theorem": 0.17705097305926945, "convex": 0.17705097305926945, "set": 0.17705097305926945, "derivative": 0.17705097305926945, "bounded": 0.17705097305926945, "deriv": 0.21197353881683212, "Version": 0.32350596561652023}}, {"docstring": " Yet another metric characterization of Cauchy sequences on integers. This one is often the most efficient.\n", "keywords": {"characterization of Cauchy": 0.0605689221549672, "Cauchy sequences": 0.0605689221549672, "sequences on integers": 0.07796891081290885, "metric characterization": 0.1495930091794576, "Cauchy": 0.15831692877998726, "integers": 0.2005079697193566, "metric": 0.36073110501666333, "characterization": 0.36073110501666333, "sequences": 0.36073110501666333, "efficient": 0.46553351027698087}}, {"docstring": "Relation `\u03bb f g, tendsto (\u03bb x, (f x, g x)) l (\ud835\udce4 \u03b1)` is reflexive.\n", "keywords": {"Relation": 0.04491197687864554, "tendsto": 0.04491197687864554, "reflexive": 0.0771485953923296}}, {"docstring": "Finite product of finite sets is finite\n", "keywords": {"Finite product": 0.04698957307803754, "finite sets": 0.04698957307803754, "Finite": 0.09417066770840032, "product of finite": 0.1353174801668506, "sets is finite": 0.1353174801668506, "product": 0.15886280928376606, "sets": 0.15886280928376606}}, {"docstring": "If presheaf of `J\u2081`-closed sieves is a `J\u2082`-sheaf then `J\u2081 \u2264 J\u2082`. Note the converse is true by `classifier_is_sheaf` and `is_sheaf_of_le`.\n", "keywords": {"closed sieves": 0.02199543771334758, "sheaf": 0.07057418818643484, "closed": 0.12558559778925976, "Note the converse": 0.16160274240137681, "presheaf": 0.1713735584707713, "sieves": 0.1713735584707713, "converse is true": 0.21174657256505464, "classifier": 0.2419870397426118, "Note": 0.3328042035767708, "converse": 0.4180250376667794, "true": 0.4180250376667794}}, {"docstring": " There can be at most one `module \u211a E` structure on an additive commutative group. This is not an instance because `simp` becomes very slow if we have many `subsingleton` instances, see [gh-6025].\n", "keywords": {"additive commutative group": 0.009323825533518421, "commutative group": 0.036378432021021534, "additive commutative": 0.059260526860675365, "module": 0.14840353637699516, "structure": 0.14840353637699516, "group": 0.14840353637699516, "simp": 0.21197353881683212, "subsingleton": 0.21197353881683212, "additive": 0.2365273465835411, "commutative": 0.2365273465835411, "slow": 0.5182978603858105, "instance": 0.6038495073559024, "instances": 0.6038495073559024}}, {"docstring": "In a `\u03c3`-compact space, any closed set can be approximated by a compact subset.\n", "keywords": {"compact space": 0.031557281947372486, "compact subset": 0.031557281947372486, "closed set": 0.035715520099333646, "space": 0.11369206228658875, "subset": 0.11369206228658875, "compact": 0.13453835116331675, "closed": 0.18569843656348187, "set": 0.18569843656348187, "approximated": 0.18569843656348187}}, {"docstring": " A set `s` is connected if and only if for every cover by a finite collection of open sets that are pairwise disjoint on `s`, it is contained in one of the members of the collection.\n", "keywords": {"pairwise disjoint": 0.019557279302732804, "finite collection": 0.02635223776265893, "open sets": 0.02635223776265893, "collection of open": 0.06177684479462527, "collection": 0.09269208833952335, "connected": 0.1384995633470844, "cover": 0.1384995633470844, "finite": 0.1384995633470844, "open": 0.1384995633470844, "pairwise": 0.1384995633470844, "disjoint": 0.1384995633470844, "contained": 0.1384995633470844, "members": 0.1384995633470844, "set": 0.1853841766790467, "sets": 0.1853841766790467}}, {"docstring": "Sum of elements in an `add_subgroup` of an `add_comm_group` indexed by a `finset` is in the `add_subgroup`.\n", "keywords": {"add": 0.012329400381139773, "Sum of elements": 0.015411349595587466, "subgroup": 0.022829596169123615, "comm": 0.0596404586934656, "group": 0.0596404586934656, "finset": 0.0596404586934656, "Sum": 0.1013272142599222, "indexed": 0.1013272142599222, "elements": 0.14978645964327916}}, {"docstring": "This lemma uses `\u2211 i in` instead of `\u2211 i :`.\n", "keywords": {"lemma": 0.15831692877998726}}, {"docstring": "The antidiagonal of `n` does not contain duplicate entries.\n", "keywords": {"duplicate entries": 0.04940384002065631, "entries": 0.15831692877998726, "antidiagonal": 0.29736558256021506, "duplicate": 0.29736558256021506}}, {"docstring": "The sum of a converging power series is continuous in its disk of convergence.\n", "keywords": {"converging power series": 0.0042542192213185686, "disk of convergence": 0.015380821171891606, "converging power": 0.02570861714399338, "power series": 0.02570861714399338, "series is continuous": 0.02570861714399338, "convergence": 0.09568045026443411, "sum": 0.15831692877998726, "converging": 0.15831692877998726, "power": 0.15831692877998726, "series": 0.15831692877998726, "continuous": 0.15831692877998726, "disk": 0.15831692877998726}}, {"docstring": "Cyclotomic polynomials are always nonnegative on inputs one or more.\n", "keywords": {"Cyclotomic polynomials": 0.04940384002065631, "nonnegative on inputs": 0.09700399286574239, "Cyclotomic": 0.15831692877998726, "polynomials": 0.29736558256021506, "nonnegative": 0.29736558256021506, "inputs": 0.29736558256021506}}, {"docstring": "A version of `list.prod_inv_reverse` for `matrix.has_inv`.\n", "keywords": {"inv": 0.02006098734604785, "list.prod": 0.054709255964732355, "reverse": 0.054709255964732355, "matrix.has": 0.054709255964732355, "version": 0.1879836817695587}}, {"docstring": "If a sum is 0 and the function is 0 except possibly at one point, it is 0 everywhere on the `finset`.\n", "keywords": {"finset": 0.04491197687864554, "point": 0.0771485953923296, "sum": 0.1155310835876123, "function": 0.1155310835876123, "possibly": 0.1155310835876123}}, {"docstring": " If `E` is a vector space over two division rings `R` and `S`, then scalar multiplications agree on inverses of integer numbers in `R` and `S`.\n", "keywords": {"scalar multiplications agree": 0.0042542192213185686, "division rings": 0.015380821171891606, "vector space": 0.02570861714399338, "scalar multiplications": 0.02570861714399338, "multiplications agree": 0.02570861714399338, "agree on inverses": 0.02570861714399338, "inverses of integer": 0.02570861714399338, "integer numbers": 0.02570861714399338, "rings": 0.09568045026443411, "vector": 0.15831692877998726, "space": 0.15831692877998726, "division": 0.15831692877998726, "scalar": 0.15831692877998726, "multiplications": 0.15831692877998726, "agree": 0.15831692877998726, "inverses": 0.15831692877998726, "integer": 0.15831692877998726, "numbers": 0.15831692877998726}}, {"docstring": " The closed thickening `cthickening \u03b4\u2081 E` is contained in the open thickening `thickening \u03b4\u2082 E` if the radius of the latter is positive and larger.\n", "keywords": {"positive and larger": 0.010849179083141073, "closed thickening": 0.02323687776735916, "open thickening": 0.02323687776735916, "thickening": 0.06205716761226819, "larger": 0.08798773338320563, "closed": 0.12197993148826404, "contained": 0.12197993148826404, "open": 0.12197993148826404, "radius": 0.12197993148826404, "positive": 0.12197993148826404}}, {"docstring": "In a locally compact regular space, given a compact set `K` inside an open set `U`, we can find a compact set `K'` between these sets: `K` is inside the interior of `K'` and `K' \u2286 U`.\n", "keywords": {"compact regular space": 0.0014030723141247176, "locally compact regular": 0.0018614558941375324, "compact set": 0.00568464544429292, "open set": 0.010661584197060167, "regular space": 0.010818835410618765, "locally compact": 0.015264452161258187, "compact regular": 0.015264452161258187, "find a compact": 0.02752119015476442, "set": 0.02960380422991263, "compact": 0.04219233713194859, "inside an open": 0.04381485292036601, "inside the interior": 0.04381485292036601, "inside": 0.07469221964545177, "sets": 0.0888114126897379, "space": 0.09010730143222755, "locally": 0.11878106215399438, "regular": 0.11878106215399438, "open": 0.11878106215399438, "find": 0.11878106215399438, "interior": 0.11878106215399438}}, {"docstring": " Three points are collinear if and only if they are not affinely independent.\n", "keywords": {"affinely independent": 0.015380821171891606, "points are collinear": 0.02570861714399338, "independent": 0.09568045026443411, "points": 0.15831692877998726, "collinear": 0.15831692877998726, "affinely": 0.15831692877998726}}, {"docstring": " If a function is continuous on a set for some topologies, then it is continuous on the same set with respect to any finer topology on the source space.\n", "keywords": {"source space": 0.013301486222606386, "function is continuous": 0.01490801077769086, "finer topology": 0.01986718810864864, "continuous": 0.052621912705633725, "set with respect": 0.06283328817485677, "set": 0.09367462051261369, "topologies": 0.09405136374190334, "space": 0.09405136374190334, "function": 0.13957138628574278, "respect": 0.13957138628574278, "finer": 0.13957138628574278, "topology": 0.13957138628574278, "source": 0.13957138628574278}}, {"docstring": " If `f` is a function strictly monotone on a right neighborhood of `a` and the image of this neighborhood under `f` meets every interval `(f a, b]`, `b > f a`, then `f` is continuous at `a` from the right.  The assumption `hfs : \u2200 b > f a, \u2203 c \u2208 s, f c \u2208 Ioc (f a) b` is required because otherwise the function `f : \u211d \u2192 \u211d` given by `f x = if x \u2264 0 then x else x + 1` would be a counter-example at `a = 0`.\n", "keywords": {"function strictly monotone": 0.0018215414684514986, "meets every interval": 0.008042597596346878, "strictly monotone": 0.011046359228243017, "function strictly": 0.016998755344746794, "neighborhood": 0.04597371689056698, "function": 0.07995445363241417, "meets": 0.08932205938096903, "interval": 0.08932205938096903, "strictly": 0.1045259314656475, "monotone": 0.1045259314656475, "image": 0.1045259314656475, "continuous": 0.1045259314656475, "Ioc": 0.13134436834995109, "hfs": 0.21968147045700684, "assumption": 0.25409250220453583, "required": 0.28845892217459607, "counter-example": 0.28845892217459607}}, {"docstring": " `n.desc_factorial k = n! / (n - k)!` but without \u2115-division. See `nat.desc_factorial_eq_div` for the version using \u2115-division.\n", "keywords": {"n.desc": 0.09582262996018895, "\u2115-division": 0.14148234664938591, "factorial": 0.21200394833790834, "nat.desc": 0.3490644846342439, "div": 0.3490644846342439, "version using \u2115-division": 0.417724019849119, "version": 0.6820351715540978}}, {"docstring": "Precomposing `f` with `prod.fst` is continuous at `(x, y)`\n", "keywords": {"Precomposing": 0.04491197687864554, "prod.fst": 0.04491197687864554, "continuous": 0.29736558256021506}}, {"docstring": " The `n+1`-th iterated derivative within a set with unique derivatives can be obtained by differentiating the `n`-th iterated derivative.\n", "keywords": {"iterated derivative": 0.013984820309993255, "set with unique": 0.024099744342406085, "obtained by differentiating": 0.024099744342406085, "unique derivatives": 0.03548219205177234, "iterated": 0.060903728797914024, "derivative": 0.11168702512034627, "set": 0.1534034365742674, "unique": 0.1534034365742674, "obtained": 0.1534034365742674, "differentiating": 0.1534034365742674}}, {"docstring": "The edistance to a closed set depends continuously on the point and the set\n", "keywords": {"closed set depends": 0.003628079711673298, "set depends continuously": 0.003628079711673298, "depends continuously": 0.01904688389482227, "closed set": 0.025536557885239508, "set depends": 0.025536557885239508, "set": 0.09106811155038866, "edistance": 0.1367145963576765, "closed": 0.1367145963576765, "depends": 0.1367145963576765, "continuously": 0.1367145963576765, "point": 0.1367145963576765}}, {"docstring": " If `edist (f n) (f (n+1))` is bounded by `C * r^n`, then the distance from `f n` to the limit of `f` is bounded above by `C * r^n / (1 - r)`.\n", "keywords": {"bounded": 0.049557796192334434, "edist": 0.055708263664958506, "distance": 0.1036452554536235, "limit": 0.1036452554536235}}, {"docstring": "Two points are collinear.\n", "keywords": {"points are collinear": 0.04940384002065631, "collinear": 0.15831692877998726, "points": 0.29736558256021506}}, {"docstring": "The shadow of the empty set is empty.\n", "keywords": {"empty set": 0.05913243875864445, "set is empty": 0.12748048004056906, "empty": 0.14323823713631006, "shadow": 0.19488865479360015, "set": 0.19488865479360015}}, {"docstring": " If an element `b` becomes `M`-regular after multiplying it on the left by an `M`-regular element, then `b` is `M`-regular.\n", "keywords": {"regular element": 0.019370333718431713, "regular": 0.04938133369304184, "element": 0.06413440160927163, "regular after multiplying": 0.07845422750120233, "multiplying": 0.15842879763921927, "left": 0.15842879763921927}}, {"docstring": " If `\u2225f n\u2225 \u2264 C * r ^ n` for all `n : \u2115` and some `r < 1`, then the partial sums of `f` are within distance `C * r ^ n / (1 - r)` of the sum of the series. This lemma does not assume `0 \u2264 r` or `0 \u2264 C`.\n", "keywords": {"partial sums": 0.016578984070864534, "distance": 0.10538752815290522, "series": 0.10538752815290522, "sums": 0.11801984138419522, "sum": 0.11801984138419522, "partial": 0.13818527286514595, "assume": 0.29034507216173455, "lemma": 0.35768931264291}}, {"docstring": "A list with product less than one must have positive length.\n", "keywords": {"positive length": 0.04940384002065631, "list with product": 0.09700399286574239, "length": 0.15831692877998726, "list": 0.29736558256021506, "product": 0.29736558256021506, "positive": 0.29736558256021506}}, {"docstring": "The union of two G\u03b4 sets is a G\u03b4 set.\n", "keywords": {"union": 0.2005079697193566, "sets": 0.22714242496584958, "set": 0.22714242496584958}}, {"docstring": " **Equality case of the Rearrangement Inequality**: Pointwise multiplication of `f` and `g`, which antivary together, is unchanged by a permutation if and only if `f \u2218 \u03c3` and `g` antivary together. Stated by permuting the entries of `f`.\n", "keywords": {"Rearrangement Inequality": 0.005072352361797871, "Equality case": 0.01078166215070159, "Pointwise multiplication": 0.01078166215070159, "Equality": 0.06111024253988877, "Inequality": 0.06111024253988877, "Pointwise": 0.06111024253988877, "antivary": 0.08014015496625508, "Rearrangement": 0.08258441204389066, "Stated by permuting": 0.1565870030412261, "case": 0.17454779110930135, "multiplication": 0.17454779110930135, "unchanged": 0.17454779110930135, "permutation": 0.17454779110930135, "permuting the entries": 0.21846569551000553, "Stated": 0.3197366584666406, "permuting": 0.42343326428770406, "entries": 0.42343326428770406}}, {"docstring": "If the first vector passed to `oangle` is 0, the result is 0.\n", "keywords": {"vector passed": 0.02570861714399338, "oangle": 0.04491197687864554, "vector": 0.15831692877998726, "passed": 0.15831692877998726, "result": 0.15831692877998726}}, {"docstring": "Euler's product formula for the totient function.\n", "keywords": {"Euler product formula": 0.01655915082773619, "Euler product": 0.04940384002065631, "totient function": 0.04940384002065631, "product formula": 0.09700399286574239, "Euler": 0.15831692877998726, "function": 0.15831692877998726, "product": 0.29736558256021506, "formula": 0.29736558256021506, "totient": 0.29736558256021506}}, {"docstring": "The angle between a vector and a nonnegative multiple of that vector is 0.\n", "keywords": {"nonnegative multiple": 0.037831312533597124, "vector": 0.13945519496053638, "angle": 0.19092478917347616, "nonnegative": 0.19092478917347616, "multiple": 0.19092478917347616}}, {"docstring": "Generalization of `is_integral_of_mem_closure` bootstrapped up from that lemma\n", "keywords": {"integral": 0.04491197687864554, "mem": 0.04491197687864554, "closure": 0.04491197687864554, "Generalization": 0.09568045026443411, "bootstrapped": 0.09568045026443411, "lemma": 0.09568045026443411}}, {"docstring": " **Equality case of the Rearrangement Inequality**: Pointwise multiplication of `f` and `g`, which antivary together, is unchanged by a permutation if and only if `f` and `g \u2218 \u03c3` antivary together. Stated by permuting the entries of `g`.\n", "keywords": {"Rearrangement Inequality": 0.005072352361797871, "Equality case": 0.01078166215070159, "Pointwise multiplication": 0.01078166215070159, "Equality": 0.06111024253988877, "Inequality": 0.06111024253988877, "Pointwise": 0.06111024253988877, "antivary": 0.08014015496625508, "Rearrangement": 0.08258441204389066, "Stated by permuting": 0.1565870030412261, "case": 0.17454779110930135, "multiplication": 0.17454779110930135, "unchanged": 0.17454779110930135, "permutation": 0.17454779110930135, "permuting the entries": 0.21846569551000553, "Stated": 0.3197366584666406, "permuting": 0.42343326428770406, "entries": 0.42343326428770406}}, {"docstring": "Harmonic series is not unconditionally summable.\n", "keywords": {"Harmonic series": 0.04940384002065631, "unconditionally summable": 0.04940384002065631, "Harmonic": 0.15831692877998726, "summable": 0.15831692877998726, "series": 0.29736558256021506, "unconditionally": 0.29736558256021506}}, {"docstring": " As an intermediate step to show that `\u03bc.with_density (v.lim_ratio_meas h\u03c1) = \u03c1`, we show here that `\u03c1 \u2264 t \u03bc.with_density (v.lim_ratio_meas h\u03c1)` for any `t > 1`.\n", "keywords": {"density": 0.023392504197764657, "v.lim": 0.023392504197764657, "ratio": 0.023392504197764657, "intermediate step": 0.04390881698443257, "meas": 0.04972514527124059, "\u03bc.with": 0.08205340856523911, "step to show": 0.1424920768233321, "show": 0.153194783807282, "intermediate": 0.20509004731457245, "step": 0.20509004731457245}}, {"docstring": "Two formal power series are equal if all their coefficients are equal.\n", "keywords": {"formal power series": 0.007321883374053632, "formal power": 0.03663237450220032, "power series": 0.03663237450220032, "series are equal": 0.04051498248759491, "coefficients are equal": 0.04051498248759491, "equal": 0.10356599227702172, "formal": 0.1879836817695587, "power": 0.1879836817695587, "series": 0.1879836817695587, "coefficients": 0.1879836817695587}}, {"docstring": "Alternative definition of set convexity, in terms of pointwise set operations.\n", "keywords": {"pointwise set operations": 0.006026046305276699, "Alternative definition": 0.021114872146320032, "set convexity": 0.03079770075447455, "set operations": 0.03079770075447455, "terms of pointwise": 0.034987023778306175, "pointwise set": 0.051351238837580325, "definition of set": 0.11245662598947327, "Alternative": 0.11246769819744627, "convexity": 0.11246769819744627, "operations": 0.11246769819744627, "set": 0.13282721021560867, "definition": 0.18385948854246909, "terms": 0.18385948854246909, "pointwise": 0.18385948854246909}}, {"docstring": "The injection of a space in a disjoint union is an isometry\n", "keywords": {"disjoint union": 0.02570861714399338, "isometry": 0.09568045026443411, "injection": 0.15831692877998726, "space": 0.15831692877998726, "disjoint": 0.15831692877998726, "union": 0.15831692877998726}}, {"docstring": "The definition of `cosh` in terms of `exp`.\n", "keywords": {"cosh": 0.04491197687864554, "exp": 0.04491197687864554, "definition": 0.15831692877998726, "terms": 0.15831692877998726}}, {"docstring": " A function which is continuous on a separable set `s` is almost everywhere strongly measurable with respect to `\u03bc.restrict s`.\n", "keywords": {"separable set": 0.015380821171891606, "strongly measurable": 0.02570861714399338, "measurable with respect": 0.02570861714399338, "set": 0.09568045026443411, "\u03bc.restrict": 0.09568045026443411, "function": 0.15831692877998726, "continuous": 0.15831692877998726, "separable": 0.15831692877998726, "strongly": 0.15831692877998726, "measurable": 0.15831692877998726, "respect": 0.15831692877998726}}, {"docstring": "**Alias** of the forward direction of le_inv'`.\n", "keywords": {"forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "inv": 0.04491197687864554, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "**Alias** of eq_or_gt_of_le`.\n", "keywords": {"Alias": 0.030396371632413578}}, {"docstring": "Binet's formula as a dependent equality.\n", "keywords": {"Binet formula": 0.04940384002065631, "dependent equality": 0.04940384002065631, "Binet": 0.15831692877998726, "equality": 0.15831692877998726, "formula": 0.29736558256021506, "dependent": 0.29736558256021506}}, {"docstring": "A subset of `\u2115` containing zero and closed under `nat.succ` contains all of `\u2115`.\n", "keywords": {"nat.succ": 0.04491197687864554, "subset": 0.15831692877998726, "closed": 0.15831692877998726}}, {"docstring": "A version of `cont_diff_bump_of_inner.nonneg` with `x` explicit\n", "keywords": {"cont": 0.04491197687864554, "diff": 0.04491197687864554, "bump": 0.04491197687864554, "inner.nonneg": 0.04491197687864554, "explicit": 0.04491197687864554, "version": 0.15831692877998726}}, {"docstring": " If `f` converges to some `y` as `x` tends to `x\u2080` within `A`, then `f` tends to `extend_from A f x` as `x` tends to `x\u2080`.\n", "keywords": {"extend": 0.04491197687864554, "converges": 0.06341998722529081}}, {"docstring": "The finrank of a free module `M` over `R` is the cardinality of `choose_basis_index R M`.\n", "keywords": {"free module": 0.015380821171891606, "choose": 0.04491197687864554, "basis": 0.04491197687864554, "module": 0.09568045026443411, "index": 0.09568045026443411, "finrank": 0.15831692877998726, "free": 0.15831692877998726, "cardinality": 0.15831692877998726}}, {"docstring": "**Alias** of the forward direction of neg_le_neg_iff`.\n", "keywords": {"Alias": 0.034588515384495436, "forward direction": 0.03663237450220032, "iff": 0.054709255964732355, "direction of neg": 0.06460392234869006, "neg": 0.07162298286637953, "forward": 0.1879836817695587, "direction": 0.1879836817695587}}, {"docstring": " The minimal polynomial of an element `x` is uniquely characterized by its defining property: if there is another monic polynomial of minimal degree that has `x` as a root, then this polynomial is equal to the minimal polynomial of `x`.\n", "keywords": {"minimal polynomial": 0.011290448524479569, "defining property": 0.012478001002686855, "uniquely characterized": 0.017334398144808253, "minimal degree": 0.019215278780589647, "monic polynomial": 0.02036399180181245, "polynomial": 0.03822304475142397, "minimal": 0.04814342577257101, "polynomial is equal": 0.08167024125750212, "polynomial of minimal": 0.08897005322144247, "element": 0.09441410951281673, "property": 0.09441410951281673, "root": 0.09441410951281673, "uniquely": 0.1305336611708624, "characterized": 0.1305336611708624, "defining": 0.1305336611708624, "monic": 0.1305336611708624, "degree": 0.1305336611708624, "equal": 0.1305336611708624}}, {"docstring": "Multiplying by some of the matrices in `list_transvec_col M` does not change the last row.\n", "keywords": {"list": 0.04491197687864554, "transvec": 0.04491197687864554, "Multiplying": 0.09568045026443411, "col": 0.09568045026443411, "row": 0.09568045026443411, "matrices": 0.15831692877998726, "change": 0.15831692877998726}}, {"docstring": " If a function applied at a point is 1, a product is unchanged by removing that point, if present, from a `finset`.\n", "keywords": {"function applied": 0.012578992104256836, "product is unchanged": 0.012578992104256836, "unchanged by removing": 0.012578992104256836, "removing that point": 0.03803679030233875, "finset": 0.0528063806271324, "point": 0.06839635777587466, "present": 0.08012982629475915, "function": 0.11145728654016383, "applied": 0.11145728654016383, "product": 0.11145728654016383, "unchanged": 0.11145728654016383, "removing": 0.11145728654016383}}, {"docstring": "The set of conjugates of `s` is closed under conjugation.\n", "keywords": {"closed under conjugation": 0.015380821171891606, "set of conjugates": 0.02570861714399338, "conjugation": 0.09568045026443411, "set": 0.15831692877998726, "conjugates": 0.15831692877998726, "closed": 0.15831692877998726}}, {"docstring": "**Alias** of the reverse direction of inv_mul_le_iff_le_mul`.\n", "keywords": {"mul": 0.019648131954263418, "direction of inv": 0.021567786782198985, "Alias": 0.034278050535979626, "reverse direction": 0.035715520099333646, "iff": 0.05393656033701752, "inv": 0.11369206228658875, "reverse": 0.18569843656348187, "direction": 0.18569843656348187}}, {"docstring": "Characteristic `\u2260 2` in a domain implies that `-a = a` iff `a = 0`.\n", "keywords": {"domain implies": 0.009239332327148086, "Characteristic": 0.04491197687864554, "iff": 0.04491197687864554, "domain": 0.09568045026443411, "implies": 0.09568045026443411}}, {"docstring": " Induction principle for invertible matrices based on transvections: if a property is true for all invertible diagonal matrices, all transvections, and is stable under product of invertible matrices, then it is true for all invertible matrices. This is the useful way to say that invertible matrices are generated by invertible diagonal matrices and transvections.\n", "keywords": {"invertible diagonal matrices": 0.012655570204817187, "invertible matrices based": 0.02156310281265698, "property is true": 0.026738988300246274, "invertible matrices": 0.02703213077879141, "Induction principle": 0.027243113091740708, "invertible diagonal": 0.033339705024997356, "stable under product": 0.034298118247250486, "diagonal matrices": 0.037181261748474116, "invertible": 0.0494767429600839, "matrices": 0.05478309121149573, "matrices based": 0.06366721258147309, "true": 0.07150602598777406, "transvections": 0.07478794626471187, "diagonal": 0.10528717865799127, "based on transvections": 0.1269915610138464, "Induction": 0.1456368294112952, "principle": 0.1821009784746286, "based": 0.1821009784746286, "property": 0.1821009784746286, "stable": 0.1821009784746286}}, {"docstring": " A 'ite' producing a `Pi` type `\u03a0 a, \u03c3 a`, applied to a value `a : \u03b1` is a `ite` that applies either branch to `a`.\n", "keywords": {"applies either branch": 0.0067353679932798255, "ite": 0.019648131954263418, "type": 0.05393656033701752, "producing": 0.06729926935255018, "applied": 0.06729926935255018, "applies": 0.08179429269966654, "branch": 0.08179429269966654}}, {"docstring": " Let `B : power_basis S A` be such that `is_integral R B.gen`, and let `x : A` be and element with integral coordinates in the base `B.basis`. Then `is_integral R ((B.basis.repr (x ^ n) i)` for all `i` and all `n` if `minpoly S B.gen = (minpoly R B.gen).map (algebra_map R S)`. This is the case if `R` is a GCD domain and `S` is its fraction ring.\n", "keywords": {"B.gen": 0.032113278270903343, "B.basis": 0.0490073898203819, "integral coordinates": 0.057190807450969265, "integral R B.gen": 0.07181430716754529, "minpoly R B.gen": 0.09328178108657241, "integral": 0.09873797242144865, "power": 0.10233112232644676, "basis": 0.14100784030574462, "base": 0.14100784030574462, "element with integral": 0.1603158745548165, "minpoly": 0.16357733753356038, "map": 0.16357733753356038, "element": 0.1826280115457051, "coordinates": 0.1826280115457051, "GCD domain": 0.18587642066802373, "algebra": 0.28362520967316884, "GCD": 0.2953803557232268, "fraction ring": 0.3171313859307861, "ring": 0.45373979341627935, "case": 0.5306439997901851}}, {"docstring": " Multiplicativity of a continuous multilinear map along all coordinates at the same time, writing `f (\u03bb i, c i \u2022 m i)` as `(\u220f i, c i) \u2022 f m`.\n", "keywords": {"continuous multilinear map": 0.0006133431289448148, "continuous multilinear": 0.00717258304785508, "multilinear map": 0.00717258304785508, "writing": 0.04491197687864554, "Multiplicativity": 0.06341998722529081, "time": 0.06341998722529081, "continuous": 0.08438900089923473, "multilinear": 0.08438900089923473, "map": 0.08438900089923473, "coordinates": 0.08438900089923473}}, {"docstring": "The quadratic character takes the value `1` on nonzero squares.\n", "keywords": {"nonzero squares": 0.015380821171891606, "quadratic character": 0.02570861714399338, "squares": 0.09568045026443411, "quadratic": 0.15831692877998726, "character": 0.15831692877998726, "nonzero": 0.15831692877998726}}, {"docstring": "See `lt_tsub_iff_left_of_le_of_le` for a weaker statement in a partial order.\n", "keywords": {"partial order": 0.015380821171891606, "weaker statement": 0.02570861714399338, "tsub": 0.04491197687864554, "iff": 0.04491197687864554, "left": 0.04491197687864554, "order": 0.09568045026443411, "weaker": 0.15831692877998726, "statement": 0.15831692877998726, "partial": 0.15831692877998726}}, {"docstring": "Adding the angles between two vectors in each order results in 0.\n", "keywords": {"Adding the angles": 0.015380821171891606, "order results": 0.02570861714399338, "Adding": 0.09568045026443411, "angles": 0.15831692877998726, "vectors": 0.15831692877998726, "order": 0.15831692877998726, "results": 0.15831692877998726}}, {"docstring": " If an affine subspace is nonempty and contained in another with the same direction, they are equal.\n", "keywords": {"affine subspace": 0.09700399286574239, "subspace is nonempty": 0.09700399286574239, "nonempty and contained": 0.09700399286574239, "direction": 0.15831692877998726, "equal": 0.15831692877998726, "affine": 0.29736558256021506, "subspace": 0.29736558256021506, "nonempty": 0.29736558256021506, "contained": 0.29736558256021506}}, {"docstring": "`part` extensionality\n", "keywords": {"part": 0.04491197687864554, "extensionality": 0.04491197687864554}}, {"docstring": "Strictly monotone functions preserve the colex ordering.\n", "keywords": {"Strictly monotone functions": 0.01655915082773619, "monotone functions preserve": 0.03339840940482845, "Strictly monotone": 0.04940384002065631, "colex ordering": 0.04940384002065631, "monotone functions": 0.09700399286574239, "functions preserve": 0.09700399286574239, "preserve the colex": 0.09700399286574239, "Strictly": 0.15831692877998726, "ordering": 0.15831692877998726, "monotone": 0.29736558256021506, "functions": 0.29736558256021506, "preserve": 0.29736558256021506, "colex": 0.29736558256021506}}, {"docstring": "The edist to a set depends continuously on the point\n", "keywords": {"set depends continuously": 0.0042542192213185686, "set depends": 0.02570861714399338, "depends continuously": 0.02570861714399338, "point": 0.09568045026443411, "edist": 0.15831692877998726, "set": 0.15831692877998726, "depends": 0.15831692877998726, "continuously": 0.15831692877998726}}, {"docstring": "**Alias** of the forward direction of mul_sub_mul_div_mul_nonpos_iff`.\n", "keywords": {"forward direction": 0.022401895700338237, "Alias": 0.03620452014532985, "mul": 0.04343368128437256, "div": 0.058865175910949544, "nonpos": 0.058865175910949544, "iff": 0.058865175910949544, "direction of mul": 0.06604405377106645, "forward": 0.14802380456229533, "direction": 0.14802380456229533}}, {"docstring": "the coercion `opens \u03b1 \u2192 set \u03b1` applied to a pair is the same as taking the first component\n", "keywords": {"coercion": 0.0771485953923296, "opens": 0.0771485953923296, "set": 0.0771485953923296, "applied": 0.0771485953923296, "component": 0.0771485953923296, "pair": 0.1155310835876123, "taking": 0.1155310835876123}}, {"docstring": " **Strict inequality case of Rearrangement Inequality**: Pointwise multiplication of `f` and `g`, which monovary together, is strictly decreased by a permutation if and only if `f` and `g \u2218 \u03c3` do not monovary together. Stated by permuting the entries of `g`.\n", "keywords": {"Strict inequality case": 0.0016642028270215602, "Strict inequality": 0.008747117210927207, "Pointwise multiplication": 0.011683623122683102, "Rearrangement Inequality": 0.011811652352352629, "case of Rearrangement": 0.01579306427698067, "inequality case": 0.02602119105438165, "strictly decreased": 0.03495776414940041, "Strict": 0.06283799353160062, "Pointwise": 0.06283799353160062, "inequality": 0.06899702012035523, "Rearrangement": 0.08459615986079659, "monovary": 0.08562916729374415, "Stated by permuting": 0.17147630665836236, "case": 0.1837851895373716, "multiplication": 0.1837851895373716, "strictly": 0.1837851895373716, "decreased": 0.1837851895373716, "permutation": 0.1837851895373716, "permuting the entries": 0.23851325396085266, "Stated": 0.3335528702481384}}, {"docstring": " A function which can be locally uniformly approximated by functions which are continuous at a point is continuous at this point.\n", "keywords": {"locally uniformly approximated": 0.009001679881101624, "locally uniformly": 0.04188746641162499, "uniformly approximated": 0.04188746641162499, "approximated by functions": 0.10583238594216893, "continuous": 0.11357121248292479, "point": 0.14868279128010753, "locally": 0.2005079697193566, "uniformly": 0.2005079697193566, "approximated": 0.2005079697193566, "point is continuous": 0.22507131211787937, "function": 0.22714242496584958, "functions": 0.22714242496584958}}, {"docstring": " Converting the value of a `fin (n + 1)` to `fin (n + 1)` results in the same value.\n", "keywords": {"fin": 0.021352745740207107, "Converting": 0.11984314898676356, "results": 0.11984314898676356}}, {"docstring": "Shows that any non-identity element of $A_5$ whose cycle decomposition consists only of swaps  is conjugate to $(04)(13)$. This is used to show that the normal closure of such a permutation  in $A_5$ is $A_5$.\n", "keywords": {"cycle decomposition consists": 0.0033915119799239673, "non-identity element": 0.02216221073515605, "cycle decomposition": 0.02216221073515605, "decomposition consists": 0.02216221073515605, "swaps is conjugate": 0.02216221073515605, "non-identity": 0.14724705908851674, "element": 0.14724705908851674, "cycle": 0.14724705908851674, "decomposition": 0.14724705908851674, "consists": 0.14724705908851674, "swaps": 0.14724705908851674, "conjugate": 0.14724705908851674, "normal closure": 0.16351863533044358, "Shows": 0.21971191998813244, "show": 0.21971191998813244, "normal": 0.3748840432180225, "closure": 0.3748840432180225, "permutation": 0.3748840432180225}}, {"docstring": "The projection on the base of a topological bundle created from core is an open map\n", "keywords": {"topological bundle created": 0.0042542192213185686, "open map": 0.015380821171891606, "topological bundle": 0.02570861714399338, "bundle created": 0.02570861714399338, "created from core": 0.02570861714399338, "map": 0.09568045026443411, "projection": 0.15831692877998726, "base": 0.15831692877998726, "topological": 0.15831692877998726, "bundle": 0.15831692877998726, "created": 0.15831692877998726, "core": 0.15831692877998726, "open": 0.15831692877998726}}, {"docstring": "**Alias** of the forward direction of lipschitz_on_with_iff_dist_le_mul`.\n", "keywords": {"direction of lipschitz": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "dist": 0.04491197687864554, "mul": 0.04491197687864554, "lipschitz": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "Definition of the function on the quotient by a congruence relation `c` induced by a function    that is constant on `c`'s equivalence classes.\n", "keywords": {"congruence relation": 0.020435055290363522, "equivalence classes": 0.020435055290363522, "Definition": 0.11060549338282699, "relation": 0.11060549338282699, "induced": 0.11060549338282699, "classes": 0.11060549338282699, "function": 0.13023752997463905, "quotient": 0.18105634546484617, "congruence": 0.18105634546484617, "constant": 0.18105634546484617, "equivalence": 0.18105634546484617}}, {"docstring": " The quaternion conjugate maps to the \"clifford conjugate\" (aka `involute \u2218 reverse = reverse \u2218 involute`).\n", "keywords": {"quaternion conjugate maps": 0.013309502369705531, "involute": 0.0220371240994345, "reverse": 0.0220371240994345, "clifford conjugate": 0.03717212910775401, "aka": 0.05827187674593231, "quaternion conjugate": 0.06177937892048141, "conjugate maps": 0.06177937892048141, "clifford": 0.122209967475991, "conjugate": 0.14663241076608644, "quaternion": 0.19840347794534322, "maps": 0.19840347794534322}}, {"docstring": " If for any three points `x < y < z`, the slope of the secant line of `f : \ud835\udd5c \u2192 \ud835\udd5c` on `[x, y]` is strictly greater than the slope of the secant line of `f` on `[x, z]`, then `f` is strictly concave.\n", "keywords": {"secant line": 0.004757990755870543, "strictly concave": 0.011637587638149713, "strictly greater": 0.016191642145386844, "slope": 0.04854451872810375, "secant": 0.04854451872810375, "line": 0.04854451872810375, "strictly": 0.06383638463530678, "points": 0.09010309908069472, "concave": 0.09010309908069472, "greater": 0.12480069379377481}}, {"docstring": "Definition of `has_basis` unfolded with implicit set argument.\n", "keywords": {"implicit set argument": 0.016559150827736194, "basis": 0.04491197687864554, "unfolded with implicit": 0.04940384002065631, "set argument": 0.04940384002065631, "implicit set": 0.09700399286574239, "Definition": 0.15831692877998726, "unfolded": 0.15831692877998726, "argument": 0.15831692877998726, "implicit": 0.29736558256021506, "set": 0.29736558256021506}}, {"docstring": "An 'unapplied' analogue of `finset.sum_apply`.\n", "keywords": {"unapplied": 0.04491197687864554, "finset.sum": 0.04491197687864554, "apply": 0.04491197687864554, "analogue": 0.15831692877998726}}, {"docstring": "The other direction does not hold because of the `u`-`u` cross terms on the RHS.\n", "keywords": {"cross terms": 0.00899321792126428, "RHS": 0.04776309965539685, "cross": 0.0771485953923296, "direction": 0.1155310835876123, "hold": 0.1155310835876123, "terms": 0.1155310835876123}}, {"docstring": "For any m : M n, \\sum_{p \u2208 Q n} (\u03b5 p m) \u2022 e p = m\n", "keywords": {"sum": 0.04491197687864554}}, {"docstring": "Updating a tuple and adding an element at the end commute.\n", "keywords": {"Updating a tuple": 0.04940384002065631, "end commute": 0.04940384002065631, "tuple and adding": 0.09700399286574239, "adding an element": 0.09700399286574239, "Updating": 0.15831692877998726, "commute": 0.15831692877998726, "tuple": 0.29736558256021506, "adding": 0.29736558256021506, "element": 0.29736558256021506, "end": 0.29736558256021506}}, {"docstring": " The optimal coupling constructed above realizes exactly the Gromov-Hausdorff distance, essentially by design.\n", "keywords": {"optimal coupling constructed": 0.0042542192213185686, "essentially by design": 0.009239332327148086, "Gromov-Hausdorff distance": 0.015380821171891606, "optimal coupling": 0.02570861714399338, "coupling constructed": 0.02570861714399338, "constructed above realizes": 0.02570861714399338, "distance": 0.09568045026443411, "essentially": 0.09568045026443411, "design": 0.09568045026443411, "optimal": 0.15831692877998726, "coupling": 0.15831692877998726, "constructed": 0.15831692877998726, "realizes": 0.15831692877998726, "Gromov-Hausdorff": 0.15831692877998726}}, {"docstring": "Binary **rearrangement inequality**.\n", "keywords": {"rearrangement inequality": 0.02570861714399338, "Binary": 0.04491197687864554, "rearrangement": 0.15831692877998726, "inequality": 0.15831692877998726}}, {"docstring": "If the second vector passed to `oangle` is 0, the result is 0.\n", "keywords": {"vector passed": 0.02570861714399338, "oangle": 0.04491197687864554, "vector": 0.15831692877998726, "passed": 0.15831692877998726, "result": 0.15831692877998726}}, {"docstring": "A subgroup is closed under division.\n", "keywords": {"closed under division": 0.04940384002065631, "subgroup is closed": 0.09700399286574239, "division": 0.15831692877998726, "subgroup": 0.29736558256021506, "closed": 0.29736558256021506}}, {"docstring": " If `f : \ud835\udd5c \u2192 \ud835\udd5c` is strictly convex, then for any three points `x < y < z` the slope of the secant line of `f` on `[x, y]` is strictly less than the slope of the secant line of `f` on `[x, z]`.\n", "keywords": {"secant line": 0.0049045089489616655, "strictly convex": 0.011929892451163002, "slope": 0.049279142876773374, "secant": 0.049279142876773374, "line": 0.049279142876773374, "strictly": 0.06476922048698919, "convex": 0.09100964857932636, "points": 0.09100964857932636}}, {"docstring": "An element of `R` is algebraic, when viewed as an element of the `R`-algebra `A`.\n", "keywords": {"algebra": 0.055708263664958506, "element": 0.07334489383741183, "algebraic": 0.11718348279991213, "viewed": 0.19092478917347616}}, {"docstring": "Inverses of elements of finite order have finite order.\n", "keywords": {"Inverses of elements": 0.02541909697430123, "finite order": 0.027200199006318638, "elements of finite": 0.10583238594216893, "finite": 0.11357121248292479, "order": 0.11357121248292479, "Inverses": 0.12363091320521931, "order have finite": 0.1804246332749005, "elements": 0.2005079697193566}}, {"docstring": "A version of `ne_iff_lt_or_gt` with LHS and RHS reversed.\n", "keywords": {"LHS and RHS": 0.02140921543860024, "RHS reversed": 0.023458380875189744, "iff": 0.04491197687864554, "LHS": 0.1447773057422032, "RHS": 0.1447773057422032, "reversed": 0.15831692877998726, "version": 0.29736558256021506}}, {"docstring": "**Four squares theorem**\n", "keywords": {"squares theorem": 0.04940384002065631, "theorem": 0.15831692877998726, "squares": 0.29736558256021506}}, {"docstring": " If `\u03b1` is an infinite type, then the cardinality of `\u03b1 \u2295 \u03b2` is the maximum of the cardinalities of `\u03b1` and `\u03b2`.\n", "keywords": {"infinite type": 0.00899321792126428, "type": 0.0771485953923296, "infinite": 0.1155310835876123, "cardinality": 0.1155310835876123, "maximum": 0.1155310835876123, "cardinalities": 0.1155310835876123}}, {"docstring": " Let `B : power_basis S A` be such that `is_integral R B.gen`, and let `x y : A` be elements with integral coordinates in the base `B.basis`. Then `is_integral R ((B.basis.repr (x * y) i)` for all `i` if `minpoly S B.gen = (minpoly R B.gen).map (algebra_map R S)`. This is the case if `R` is a GCD domain and `S` is its fraction ring.\n", "keywords": {"B.gen": 0.032113278270903343, "B.basis": 0.0490073898203819, "integral coordinates": 0.057190807450969265, "integral R B.gen": 0.07181430716754529, "minpoly R B.gen": 0.09328178108657241, "integral": 0.09873797242144865, "power": 0.10233112232644676, "basis": 0.14100784030574462, "base": 0.14100784030574462, "elements with integral": 0.1603158745548165, "minpoly": 0.16357733753356038, "map": 0.16357733753356038, "elements": 0.1826280115457051, "coordinates": 0.1826280115457051, "GCD domain": 0.18587642066802373, "algebra": 0.28362520967316884, "GCD": 0.2953803557232268, "fraction ring": 0.3171313859307861, "ring": 0.45373979341627935, "case": 0.5306439997901851}}, {"docstring": "Composing a multilinear map with the identity linear map in each argument.\n", "keywords": {"identity linear map": 0.010494743012823167, "Composing a multilinear": 0.021567786782198985, "identity linear": 0.035715520099333646, "multilinear map": 0.05259515133015473, "linear map": 0.05259515133015473, "Composing": 0.11369206228658875, "argument": 0.11369206228658875, "map": 0.13453835116331675, "multilinear": 0.18569843656348187, "identity": 0.18569843656348187, "linear": 0.18569843656348187}}, {"docstring": " The composition of a continuous function and an ae strongly measurable function is ae strongly measurable.\n", "keywords": {"strongly measurable function": 0.012972142340899792, "strongly measurable": 0.019341598041498438, "continuous function": 0.06523621344335183, "measurable function": 0.07496826985274804, "strongly": 0.08061786523087178, "measurable": 0.11549095123814725, "function": 0.15096417332079662, "composition": 0.20283314940424746, "continuous": 0.20283314940424746}}, {"docstring": " Heine-Cantor: a continuous function on a compact separated uniform space is uniformly continuous.\n", "keywords": {"compact separated uniform": 0.006644547988061552, "separated uniform space": 0.006644547988061552, "compact separated": 0.03439110359613085, "separated uniform": 0.03439110359613085, "uniform space": 0.03439110359613085, "space is uniformly": 0.03439110359613085, "continuous function": 0.05033870131288873, "uniformly continuous": 0.05033870131288873, "Heine-Cantor": 0.0528063806271324, "continuous": 0.1314201551237121, "function": 0.1823394614884183, "compact": 0.1823394614884183, "separated": 0.1823394614884183, "uniform": 0.1823394614884183, "space": 0.1823394614884183, "uniformly": 0.1823394614884183}}, {"docstring": " Let `s : finset (\u03b9 \u00d7 \u211d)` be a set of hyperplanes `{x : \u03b9 \u2192 \u211d | x i = r}` in `\u03b9 \u2192 \u211d` encoded as pairs `(i, r)`. Suppose that this set contains all faces of a box `J`. The hyperplanes of `s` split a box `I` into subboxes. Let `Js` be one of them. If `J` and `Js` have nonempty intersection, then `Js` is a subbox of `J`.\n", "keywords": {"encoded as pairs": 0.021163920164427093, "finset": 0.10457425522838132, "box": 0.13368552766821729, "split a box": 0.140148661051818, "encoded": 0.1439628137560556, "pairs": 0.1439628137560556, "set": 0.15596434644782192, "hyperplanes": 0.1982657768263872, "Suppose": 0.36871785478204877, "set of hyperplanes": 0.3831849464128681, "faces": 0.44289529559983754, "split": 0.45974083591924514, "subboxes": 0.45974083591924514, "nonempty intersection": 0.5061697016218453, "intersection": 0.5434703871743545, "nonempty": 0.6183670692850208, "subbox": 0.6183670692850208}}, {"docstring": "If an element a divides another element c in a commutative ring, a divides the sum of another  element b with c iff a divides b.\n", "keywords": {"commutative ring": 0.012906749834788353, "iff a divides": 0.020159870851545764, "divides": 0.049645555234619713, "element": 0.0604415109848293, "divides the sum": 0.06747142081205226, "element a divides": 0.08851522304680749, "ring": 0.09603500085846951, "divides another element": 0.11137204034277823, "commutative": 0.13268379438099134, "sum": 0.13268379438099134, "iff": 0.13268379438099134}}, {"docstring": "The negative of a `C^n` function on a domain is `C^n`.\n", "keywords": {"function": 0.09568045026443411, "negative": 0.15831692877998726, "domain": 0.15831692877998726}}, {"docstring": " The following statements are equivalent:  0. `s` is a neighborhood of `b` within `(-\u221e, b)` 1. `s` is a neighborhood of `b` within `[a, b)` 2. `s` is a neighborhood of `b` within `(a, b)` 3. `s` includes `(l, b)` for some `l \u2208 [a, b)` 4. `s` includes `(l, b)` for some `l < b`\n", "keywords": {"statements are equivalent": 0.03459238779225539, "neighborhood": 0.09726638177445, "equivalent": 0.17030810161138046, "includes": 0.19359724877049725, "statements": 0.19632515735969916}}, {"docstring": " For an injective function `f`, inverse images of finite sets are finite. See also `filter.comap_cofinite_le` and `function.injective.comap_cofinite_eq`.\n", "keywords": {"injective function": 0.04220829187219763, "inverse images": 0.04220829187219763, "cofinite": 0.07975778315078337, "finite sets": 0.09101247702886252, "function": 0.1600514523587571, "inverse": 0.1600514523587571, "finite": 0.16483809544128045, "images of finite": 0.18781954310463758, "sets are finite": 0.18781954310463758, "filter.comap": 0.2272793193457584, "injective": 0.2530367690088724, "images": 0.2530367690088724, "sets": 0.2530367690088724}}, {"docstring": "When `x` is fixed, `(f : \u03b1 \u2192\u1d47 \u03b2) \u21a6 f x` is continuous\n", "keywords": {"fixed": 0.09568045026443411, "continuous": 0.09568045026443411}}, {"docstring": "Deduce the equality of points with the vanishing of the nonnegative distance\n", "keywords": {"Deduce the equality": 0.00899321792126428, "nonnegative distance": 0.00899321792126428, "equality of points": 0.013527995261974615, "Deduce": 0.0771485953923296, "distance": 0.0771485953923296, "equality": 0.1155310835876123, "points": 0.1155310835876123, "vanishing": 0.1155310835876123, "nonnegative": 0.1155310835876123}}, {"docstring": "If `add_monoid_algebra R M` is of finite type then `M` is finitely generated.\n", "keywords": {"finitely generated": 0.015380821171891606, "finite type": 0.02570861714399338, "add": 0.04491197687864554, "monoid": 0.04491197687864554, "algebra": 0.09568045026443411, "generated": 0.09568045026443411, "finite": 0.15831692877998726, "type": 0.15831692877998726, "finitely": 0.15831692877998726}}, {"docstring": "The list version of `add_tsub_cancel_of_le` for multisets.\n", "keywords": {"list version": 0.02570861714399338, "add": 0.04491197687864554, "tsub": 0.04491197687864554, "cancel": 0.04491197687864554, "multisets": 0.09568045026443411, "list": 0.15831692877998726, "version": 0.15831692877998726}}, {"docstring": " If self-maps `f` and `g` commute, then they are inverse of each other on the set of fixed points of `f \u2218 g`. This is a particular case of `function.inv_on_fixed_pts_comp`.\n", "keywords": {"fixed points": 0.041853325258122104, "commute": 0.07188367843871574, "set of fixed": 0.09280583990202501, "self-maps": 0.10795320618316272, "fixed": 0.13534715788675808, "inverse": 0.14840353637699516, "set": 0.14840353637699516, "points": 0.14840353637699516, "function.inv": 0.21197353881683212, "pts": 0.21197353881683212, "comp": 0.21197353881683212, "case": 0.3770378920346049}}, {"docstring": "The angle \u2220ABB at a point.\n", "keywords": {"ABB": 0.08596317751626563, "angle": 0.15831692877998726, "point": 0.15831692877998726}}, {"docstring": " If `a \u2264 b`, then `(-\u221e, a) \u2286 (-\u221e, b]`. In preorders, this is just an implication. If you need the equivalence in dense linear orders, use `Iio_subset_Iic_iff`.\n", "keywords": {"Iio": 0.16940121402170724, "Iic": 0.16940121402170724, "subset": 0.26303348124903125, "iff": 0.26303348124903125, "dense linear orders": 0.35136518550240553, "linear orders": 0.35487136790899465, "preorders": 0.3553358554145339, "implication": 0.3553358554145339, "orders": 0.44538603402402266, "equivalence in dense": 0.5286731219590494, "dense linear": 0.5286731219590494, "equivalence": 0.5880798524606783, "dense": 0.5880798524606783, "linear": 0.5880798524606783}}, {"docstring": "Any power of a regular element is regular.\n", "keywords": {"regular element": 0.05913243875864445, "element is regular": 0.12748048004056906, "regular": 0.14323823713631006, "power": 0.19488865479360015, "element": 0.19488865479360015}}, {"docstring": "The pigeonhole principle for finitely many pigeons and pigeonholes. This is the `fintype` version of `finset.exists_ne_map_eq_of_card_lt_of_maps_to`.\n", "keywords": {"principle for finitely": 0.03763407739923406, "finitely many pigeons": 0.03763407739923406, "pigeonhole principle": 0.045662588762594304, "pigeons and pigeonholes": 0.1016543441888419, "map": 0.15951556630156674, "maps": 0.15951556630156674, "principle": 0.19044453900858593, "finitely": 0.19044453900858593, "pigeons": 0.19044453900858593, "fintype": 0.2272793193457584, "finset.exists": 0.2272793193457584, "card": 0.2272793193457584, "pigeonhole": 0.22929808902990662, "version": 0.34335610232496827}}, {"docstring": " A finite dimensional space is nontrivial if it has `finrank` equal to the successor of a natural number.\n", "keywords": {"finite dimensional space": 0.0042542192213185686, "natural number": 0.015380821171891606, "finite dimensional": 0.02570861714399338, "dimensional space": 0.02570861714399338, "space is nontrivial": 0.02570861714399338, "finrank": 0.04491197687864554, "equal": 0.09568045026443411, "number": 0.09568045026443411, "finite": 0.15831692877998726, "dimensional": 0.15831692877998726, "space": 0.15831692877998726, "nontrivial": 0.15831692877998726, "successor": 0.15831692877998726, "natural": 0.15831692877998726}}, {"docstring": " Decomposes the coefficient of the product `p * q` as a sum over `nat.antidiagonal`. A version which sums over `range (n + 1)` can be obtained by using `finset.nat.sum_antidiagonal_eq_sum_range_succ`.\n", "keywords": {"Decomposes the coefficient": 0.029110754193504545, "nat.antidiagonal": 0.08372133441717093, "range": 0.08663000717410917, "Decomposes": 0.13973862464452408, "product": 0.13973862464452408, "sum": 0.17621734362705962, "coefficient": 0.20243000046541582, "antidiagonal": 0.24089314730983424, "succ": 0.24089314730983424, "sums": 0.35243468725411925, "version which sums": 0.4545473447390251, "version": 0.46850728554503884, "obtained": 0.46850728554503884}}, {"docstring": "Second version, with pointwise equicontinuity and range in a compact subset\n", "keywords": {"compact subset": 0.04940384002065631, "pointwise equicontinuity": 0.09700399286574239, "equicontinuity and range": 0.09700399286574239, "version": 0.15831692877998726, "subset": 0.15831692877998726, "pointwise": 0.29736558256021506, "equicontinuity": 0.29736558256021506, "range": 0.29736558256021506, "compact": 0.29736558256021506}}, {"docstring": "The function `x^n * exp(-x)` tends to `0` at `+\u221e`, for any natural number `n`.\n", "keywords": {"natural number": 0.015380821171891606, "exp": 0.04491197687864554, "function": 0.09568045026443411, "number": 0.09568045026443411, "natural": 0.15831692877998726}}, {"docstring": "The value of `affine_combination`, where the given points are equal.\n", "keywords": {"points are equal": 0.015380821171891606, "affine": 0.04491197687864554, "combination": 0.04491197687864554, "equal": 0.09568045026443411, "points": 0.15831692877998726}}, {"docstring": "A compact set is bounded below\n", "keywords": {"compact set": 0.09700399286574239, "set is bounded": 0.09700399286574239, "compact": 0.29736558256021506, "set": 0.29736558256021506, "bounded": 0.29736558256021506}}, {"docstring": "If a left-invariant measure gives positive mass to a compact set, then it gives positive mass to any open set.\n", "keywords": {"positive mass": 0.012423826389091432, "measure gives positive": 0.031877969496436134, "compact set": 0.031877969496436134, "open set": 0.031877969496436134, "left-invariant measure": 0.04097695443922855, "positive": 0.07785437699288043, "mass": 0.07785437699288043, "set": 0.07785437699288043, "left-invariant": 0.19840347794534322, "measure": 0.19840347794534322, "compact": 0.19840347794534322, "open": 0.19840347794534322}}, {"docstring": "The projection from a topological fiber bundle to its base is continuous.\n", "keywords": {"topological fiber bundle": 0.03339840940482845, "base is continuous": 0.04940384002065631, "topological fiber": 0.09700399286574239, "fiber bundle": 0.09700399286574239, "continuous": 0.15831692877998726, "projection": 0.29736558256021506, "topological": 0.29736558256021506, "fiber": 0.29736558256021506, "bundle": 0.29736558256021506, "base": 0.29736558256021506}}, {"docstring": " If `R` is a ring with a continuous multiplication, then negation is continuous as well since it is just multiplication with `-1`.\n", "keywords": {"continuous multiplication": 0.04334928425311119, "negation is continuous": 0.07190362830540235, "continuous": 0.10191687733271076, "multiplication": 0.10191687733271076, "ring": 0.14832923246533666, "negation": 0.14832923246533666}}, {"docstring": "A set is contained in its own closed thickening.\n", "keywords": {"closed thickening": 0.04940384002065631, "set is contained": 0.09700399286574239, "thickening": 0.15831692877998726, "set": 0.29736558256021506, "contained": 0.29736558256021506, "closed": 0.29736558256021506}}, {"docstring": "A point in a set is in its affine span.\n", "keywords": {"affine span": 0.015380821171891606, "span": 0.09568045026443411, "point": 0.15831692877998726, "set": 0.15831692877998726, "affine": 0.15831692877998726}}, {"docstring": "Any category with pushouts and initial object has binary coproducts.\n", "keywords": {"binary coproducts": 0.04940384002065631, "category with pushouts": 0.09700399286574239, "pushouts and initial": 0.09700399286574239, "initial object": 0.09700399286574239, "object has binary": 0.09700399286574239, "coproducts": 0.15831692877998726, "category": 0.29736558256021506, "pushouts": 0.29736558256021506, "initial": 0.29736558256021506, "object": 0.29736558256021506, "binary": 0.29736558256021506}}, {"docstring": " If `C` holds for the `algebra_map` of `r : R` into `tensor_algebra R M`, the `\u03b9` of `x : M`, and is preserved under addition and muliplication, then it holds for all of `tensor_algebra R M`.\n", "keywords": {"addition and muliplication": 0.01208472927391371, "preserved under addition": 0.016796432981697695, "algebra": 0.023877549999942866, "tensor": 0.023947002035544326, "map": 0.061515127169190206, "holds": 0.06674457252556332, "muliplication": 0.09290274147644657, "preserved": 0.12852615747836663, "addition": 0.12852615747836663}}, {"docstring": " Induction principle for `finset`s in a linearly ordered type: a predicate is true on all `s : finset \u03b1` provided that:  * it is true on the empty `finset`, * for every `s : finset \u03b1` and an element `a` strictly greater than all elements of `s`, `p s`   implies `p (insert a s)`.\n", "keywords": {"linearly ordered type": 0.0008550013062642167, "predicate is true": 0.00815354236582989, "Induction principle": 0.008235590672362776, "ordered type": 0.008235590672362776, "strictly greater": 0.008235590672362776, "linearly ordered": 0.01052324124431242, "finset": 0.013695251021631816, "true": 0.039626712671238205, "implies": 0.06008411596823842, "Induction": 0.08004443048536274, "type": 0.08004443048536274, "provided": 0.08004443048536274, "empty": 0.08004443048536274, "strictly": 0.08004443048536274, "insert": 0.08004443048536274, "principle": 0.10204732153153054, "linearly": 0.10204732153153054, "ordered": 0.10204732153153054, "predicate": 0.10204732153153054, "greater": 0.10204732153153054}}, {"docstring": "The two numbers `c`, `d` in the \"bottom_row\" of `g=[[*,*],[c,d]]` in `SL(2, \u2124)` are coprime.\n", "keywords": {"bottom": 0.04491197687864554, "row": 0.04491197687864554, "numbers": 0.09568045026443411, "coprime": 0.09568045026443411}}, {"docstring": " If `\u03b1` is a nonempty preorder with no minimal or maximal elements, then there exists a strictly antitone function `f : \u2124 \u2192 \u03b1`.\n", "keywords": {"strictly antitone function": 0.0025258761156662004, "maximal elements": 0.015380821171891606, "antitone function": 0.015380821171891606, "nonempty preorder": 0.02570861714399338, "minimal or maximal": 0.02570861714399338, "exists a strictly": 0.02570861714399338, "strictly antitone": 0.02570861714399338, "elements": 0.09568045026443411, "function": 0.09568045026443411, "nonempty": 0.15831692877998726, "preorder": 0.15831692877998726, "minimal": 0.15831692877998726, "maximal": 0.15831692877998726, "exists": 0.15831692877998726, "strictly": 0.15831692877998726, "antitone": 0.15831692877998726}}, {"docstring": " A continuous family of functions `\u03b1 \u2192 \u03b2 \u2192 \u03b3` tends uniformly to its value at `x` if `\u03b1` is locally compact and `\u03b2` is compact and separated.\n", "keywords": {"family of functions": 0.021114872146320032, "compact and separated": 0.023102956859254047, "continuous family": 0.034987023778306175, "locally compact": 0.038330279597458564, "compact": 0.10038999320777726, "functions": 0.11246769819744627, "separated": 0.11246769819744627, "continuous": 0.18385948854246909, "family": 0.18385948854246909, "uniformly": 0.18385948854246909, "locally": 0.18385948854246909}}, {"docstring": " The norm of the difference of two non-zero vectors equals the sum of their norms if and only the angle between the two vectors is \u03c0.\n", "keywords": {"non-zero vectors equals": 0.001409519165316644, "equals the sum": 0.011092580781904698, "non-zero vectors": 0.013167403770389706, "vectors equals": 0.013167403770389706, "vectors": 0.0620394744642251, "difference": 0.10474199420438675, "non-zero": 0.10474199420438675, "equals": 0.10474199420438675, "sum": 0.10474199420438675, "angle": 0.10474199420438675, "norm": 0.1240789489284502, "norms": 0.1240789489284502}}, {"docstring": "A rotation of a vector equals that vector if and only if the vector or the angle is zero.\n", "keywords": {"vector equals": 0.04402106909902688, "vector": 0.09059379888612011, "equals that vector": 0.1283150167556085, "rotation": 0.15514278968948286, "equals": 0.15514278968948286, "angle": 0.15514278968948286}}, {"docstring": " The elements of the subsemiring closure of `M` are exactly the elements of the additive closure of a multiplicative submonoid `M`.\n", "keywords": {"multiplicative submonoid": 0.010461294309803722, "subsemiring closure": 0.014615499694519073, "additive closure": 0.014615499694519073, "elements": 0.0456089852516003, "closure": 0.0600992383382869, "submonoid": 0.08638782221675846, "subsemiring": 0.11984314898676356, "additive": 0.11984314898676356, "multiplicative": 0.11984314898676356}}, {"docstring": "The double sum of weighted inner products of pairs of vectors from an orthonormal sequence is the sum of the weights.\n", "keywords": {"double sum": 0.011979383496423747, "sum of weighted": 0.011979383496423747, "weighted inner products": 0.012385089084719787, "products of pairs": 0.012385089084719787, "pairs of vectors": 0.012385089084719787, "orthonormal sequence": 0.012385089084719787, "sum": 0.0535126071242062, "weights": 0.07949602794131501, "double": 0.11060549338282699, "weighted": 0.11060549338282699, "products": 0.11060549338282699, "pairs": 0.11060549338282699, "vectors": 0.11060549338282699, "orthonormal": 0.11060549338282699, "sequence": 0.11060549338282699}}, {"docstring": "A uniform space with the discrete uniformity has the discrete topology.\n", "keywords": {"discrete topology": 0.024448499122065027, "uniform space": 0.03663237450220032, "discrete uniformity": 0.04051498248759491, "discrete": 0.10356599227702172, "topology": 0.11521656054299435, "uniform": 0.1879836817695587, "space": 0.1879836817695587, "uniformity": 0.1879836817695587}}, {"docstring": "The digits in the base b expansion of n are all less than b, if b \u2265 2\n", "keywords": {"base b expansion": 0.013527995261974615, "digits": 0.1155310835876123, "base": 0.1155310835876123, "expansion": 0.1155310835876123}}, {"docstring": "Rotating the second vector by `\u03b8` adds `\u03b8` to the angle between two vectors.\n", "keywords": {"adds": 0.055708263664958506, "Rotating": 0.11718348279991213, "angle": 0.19092478917347616, "vector": 0.27891038992107275, "vectors": 0.27891038992107275}}, {"docstring": " Subgroups of `\u211d` are either dense or cyclic. See `real.subgroup_dense_of_no_min` and `subgroup_cyclic_of_min` for more precise statements.\n", "keywords": {"min": 0.09100739958851135, "cyclic": 0.12066363163115675, "dense": 0.1920156509188748, "precise statements": 0.21661147395342342, "Subgroups": 0.2413272632623135, "subgroup": 0.2413272632623135, "real.subgroup": 0.24922668533504228, "dense or cyclic": 0.2912631115671902, "statements": 0.3711289266466639, "precise": 0.4797386889840523}}, {"docstring": " A function `f` on `fin (n + 1)` is strictly monotone if and only if `f i < f (i + 1)` for all `i`.\n", "keywords": {"strictly monotone": 0.013527995261974615, "fin": 0.04491197687864554, "function": 0.0771485953923296, "strictly": 0.1155310835876123, "monotone": 0.1155310835876123}}, {"docstring": " If `R \u2192 S` is an integral extension, `M` is a submonoid of `R`, `R\u2098` is the localization of `R` at `M`, and `S\u2098` is the localization of `S` at the image of `M` under the extension map, then the induced map `R\u2098 \u2192 S\u2098` is also an integral extension\n", "keywords": {"integral extension": 0.006665354483163816, "induced map": 0.010673180733262164, "extension map": 0.013330708966327633, "integral": 0.045790692532973264, "localization": 0.045790692532973264, "map": 0.045790692532973264, "extension": 0.04788214315852092, "submonoid": 0.11531237437780456, "image": 0.11531237437780456, "induced": 0.11531237437780456}}, {"docstring": "Definition of `x \u29cf y` on pre-games, in terms of `\u2264`\n", "keywords": {"Definition": 0.09568045026443411, "pre-games": 0.09568045026443411, "terms": 0.15831692877998726}}, {"docstring": "A vector has an angle of `\u03b8` from the rotation of that vector by `\u03b8`.\n", "keywords": {"vector": 0.14323823713631006, "angle": 0.19488865479360015, "rotation": 0.19488865479360015}}, {"docstring": " Composition of the inverse of a local equiv and this local equiv is equivalent to the restriction of the identity to the target\n", "keywords": {"local equiv": 0.006856538157516788, "equiv is equivalent": 0.03428479295129974, "local": 0.05815404476918013, "equiv": 0.05815404476918013, "Composition": 0.08439943001984396, "target": 0.08439943001984396, "inverse": 0.11718348279991213, "equivalent": 0.11718348279991213, "restriction": 0.11718348279991213, "identity": 0.11718348279991213}}, {"docstring": "The graph induced by the adjacency matrix of `G` is `G` itself.\n", "keywords": {"graph induced": 0.02570861714399338, "adjacency matrix": 0.02570861714399338, "graph": 0.15831692877998726, "induced": 0.15831692877998726, "adjacency": 0.15831692877998726, "matrix": 0.15831692877998726}}, {"docstring": "Any category with pullbacks and binary products, has equalizers.\n", "keywords": {"binary products": 0.04940384002065631, "category with pullbacks": 0.09700399286574239, "pullbacks and binary": 0.09700399286574239, "products": 0.15831692877998726, "equalizers": 0.15831692877998726, "category": 0.29736558256021506, "pullbacks": 0.29736558256021506, "binary": 0.29736558256021506}}, {"docstring": "The kernel of `quot_left_to_quot_sup`\n", "keywords": {"quot": 0.021352745740207107, "left": 0.05706283858652404, "kernel": 0.19488865479360015}}, {"docstring": "`std_simplex \u211d \u03b9` is closed.\n", "keywords": {"std": 0.04491197687864554, "simplex": 0.15831692877998726, "closed": 0.15831692877998726}}, {"docstring": "**Alias** of the reverse direction of order.succ_lt_succ_iff`.\n", "keywords": {"direction of order.succ": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "succ": 0.04491197687864554, "iff": 0.04491197687864554, "order.succ": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " If the angle between two vectors is \u03c0, the angles between those vectors and a third vector add to \u03c0.\n", "keywords": {"vector add": 0.049304814645805786, "angle": 0.13252060437035795, "angles": 0.13252060437035795, "vectors": 0.14535568721875064, "add": 0.1616313649453326, "vector": 0.2907113744375013}}, {"docstring": "If a function is `C^n`, with `1 \u2264 n`, then its bundled derivative is continuous.\n", "keywords": {"derivative is continuous": 0.015380821171891606, "bundled derivative": 0.02570861714399338, "continuous": 0.09568045026443411, "function": 0.15831692877998726, "bundled": 0.15831692877998726, "derivative": 0.15831692877998726}}, {"docstring": " The angle between two vectors is `\u03b8` if and only if they are nonzero and the second vector is the first rotated by `\u03b8` and scaled by the ratio of the norms, or `\u03b8` and at least one of the vectors are zero.\n", "keywords": {"vectors": 0.05590809347730571, "norms": 0.0784543511194824, "angle": 0.10006769949327374, "nonzero": 0.10006769949327374, "rotated": 0.10006769949327374, "scaled": 0.10006769949327374, "ratio": 0.10006769949327374, "vector": 0.11181618695461142}}, {"docstring": "The sum of `f` over `insert a s` is the same as the sum over `s`, as long as `a` is in `s` or `f a = 0`.\n", "keywords": {"sum": 0.07571113878390312, "insert": 0.09713402394201612, "long": 0.14390902704051098}}, {"docstring": "The Hausdorff distance between a set and its closure vanish\n", "keywords": {"Hausdorff distance": 0.04498862876540802, "closure vanish": 0.04940384002065631, "Hausdorff": 0.1447773057422032, "vanish": 0.15831692877998726, "distance": 0.29736558256021506, "set": 0.29736558256021506, "closure": 0.29736558256021506}}, {"docstring": "Bisimulation principle using `liftr'` to match and relate children of two trees.\n", "keywords": {"Bisimulation principle": 0.04940384002065631, "liftr to match": 0.04940384002065631, "match and relate": 0.09700399286574239, "relate children": 0.09700399286574239, "Bisimulation": 0.15831692877998726, "liftr": 0.15831692877998726, "trees": 0.15831692877998726, "principle": 0.29736558256021506, "match": 0.29736558256021506, "relate": 0.29736558256021506, "children": 0.29736558256021506}}, {"docstring": " The pigeonhole principle for finitely many pigeons counted by weight, strict inequality version: if the total weight of a finite set of pigeons is less than `n \u2022 b`, and they are sorted into `n` pigeonholes, then for some pigeonhole, the total weight of the pigeons in this pigeonhole is less than `b`.\n", "keywords": {"strict inequality version": 0.0012677440114298244, "total weight": 0.0072547333069726, "strict inequality": 0.012928493934063211, "inequality version": 0.012928493934063211, "principle for finitely": 0.017950191042924023, "finite set": 0.017950191042924023, "pigeons counted": 0.029393569989229654, "pigeonhole principle": 0.03446007325989213, "weight": 0.044505019604194465, "total": 0.053559325191253865, "counted by weight": 0.061392427034157905, "pigeons": 0.07167675857858907, "pigeonhole": 0.083619956103821, "finitely many pigeons": 0.09194010329440937, "set of pigeons": 0.09194010329440937, "strict": 0.09611648372741861, "version": 0.09611648372741861, "principle": 0.13279180477658767, "finitely": 0.13279180477658767, "counted": 0.13279180477658767}}, {"docstring": "If a filter is converging, its liminf coincides with its limit.\n", "keywords": {"filter is converging": 0.015380821171891606, "liminf coincides": 0.02570861714399338, "converging": 0.09568045026443411, "limit": 0.09568045026443411, "filter": 0.15831692877998726, "liminf": 0.15831692877998726, "coincides": 0.15831692877998726}}, {"docstring": "Equality behind `semiconj_by a x y`; useful for rewriting.\n", "keywords": {"semiconj": 0.04491197687864554, "Equality": 0.15831692877998726, "rewriting": 0.15831692877998726}}, {"docstring": "Concatenating the first element of a tuple with its tail gives back the original tuple\n", "keywords": {"tail gives back": 0.035715520099333646, "back the original": 0.035715520099333646, "original tuple": 0.05259515133015473, "Concatenating": 0.11369206228658875, "tuple": 0.13453835116331675, "element": 0.18569843656348187, "tail": 0.18569843656348187, "back": 0.18569843656348187, "original": 0.18569843656348187}}, {"docstring": " The following statements are equivalent:  0. `s` is a neighborhood of `a` within `[a, +\u221e)` 1. `s` is a neighborhood of `a` within `[a, b]` 2. `s` is a neighborhood of `a` within `[a, b)` 3. `s` includes `[a, u)` for some `u \u2208 (a, b]` 4. `s` includes `[a, u)` for some `u > a`\n", "keywords": {"statements are equivalent": 0.02826917819155774, "neighborhood": 0.08811596311011048, "equivalent": 0.1565351626142082, "statements": 0.17562828333342118, "includes": 0.2028208170311357}}, {"docstring": " Assumes left covariance. The lemma assuming right covariance is `right.one_lt_mul`.\n", "keywords": {"Assumes left covariance": 0.021279743632738882, "Assumes left": 0.038712704770480444, "left covariance": 0.1273706910391025, "Assumes": 0.1531727145735673, "right.one": 0.21826204231687923, "mul": 0.21826204231687923, "covariance": 0.23216465691767033, "left": 0.2433193585127945, "lemma assuming": 0.38571507274593425, "lemma": 0.5275897320195264, "assuming": 0.5275897320195264, "assuming right covariance": 0.5846700711531686}}, {"docstring": "Product of a multiset of elements in a `subsemiring` of a `comm_semiring`    is in the `subsemiring`.\n", "keywords": {"multiset of elements": 0.01904688389482227, "subsemiring": 0.019648131954263418, "comm": 0.05393656033701752, "semiring": 0.05393656033701752, "Product": 0.09202664026077896, "multiset": 0.1367145963576765, "elements": 0.1367145963576765}}, {"docstring": "For rewriting in the reverse direction, see `fin.cast_cast_add_left`.\n", "keywords": {"fin.cast": 0.04491197687864554, "cast": 0.04491197687864554, "add": 0.04491197687864554, "left": 0.04491197687864554, "reverse direction": 0.04940384002065631, "direction": 0.15831692877998726, "rewriting": 0.29736558256021506, "reverse": 0.29736558256021506}}, {"docstring": " A helper lemma: if two expansions (along the positive characteristic) of two polynomials `g` and `g'` agree, and the one with the larger degree is separable, then their degrees are the same.\n", "keywords": {"helper lemma": 0.00875085431208752, "positive characteristic": 0.00875085431208752, "larger degree": 0.014957518676362061, "degree is separable": 0.026892894134281864, "lemma": 0.07895278969183914, "expansions": 0.07895278969183914, "characteristic": 0.07895278969183914, "polynomials": 0.07895278969183914, "agree": 0.07895278969183914, "separable": 0.07895278969183914, "helper": 0.10987504304330521, "positive": 0.10987504304330521, "larger": 0.10987504304330521, "degree": 0.13412589422654528, "degrees": 0.13412589422654528}}, {"docstring": "Multiplication of circulant matrices commutes when the elements do.\n", "keywords": {"circulant matrices commutes": 0.03339840940482845, "Multiplication of circulant": 0.04940384002065631, "circulant matrices": 0.09700399286574239, "matrices commutes": 0.09700399286574239, "Multiplication": 0.15831692877998726, "circulant": 0.29736558256021506, "matrices": 0.29736558256021506, "commutes": 0.29736558256021506, "elements": 0.29736558256021506}}, {"docstring": "Express `nndist` in terms of `dist`\n", "keywords": {"Express": 0.04491197687864554, "nndist": 0.04491197687864554, "dist": 0.04491197687864554, "terms": 0.29736558256021506}}, {"docstring": "The \"monotone chain condition\" below is sometimes a convenient form of well foundedness.\n", "keywords": {"monotone chain condition": 0.008321268142839145, "monotone chain": 0.04940384002065631, "chain condition": 0.04940384002065631, "convenient form": 0.09700399286574239, "monotone": 0.15831692877998726, "condition": 0.15831692877998726, "foundedness": 0.15831692877998726, "chain": 0.29736558256021506, "convenient": 0.29736558256021506, "form": 0.29736558256021506}}, {"docstring": "Expand `\u27eax + y, x + y\u27eb_\u211d`\n", "keywords": {"Expand": 0.04491197687864554}}, {"docstring": " Test for convergence of the `p`-series: the real-valued series `\u2211' n : \u2115, (n ^ p)\u207b\u00b9` converges if and only if `1 < p`.\n", "keywords": {"Test for convergence": 0.013089923375762187, "real-valued series": 0.014618695703961359, "series": 0.05201485183844375, "Test": 0.09329120537733218, "converges": 0.09329120537733218, "convergence": 0.1384995633470844, "real-valued": 0.1384995633470844}}, {"docstring": "The embedding map is always a semi-contraction.\n", "keywords": {"embedding map": 0.09700399286574239, "semi-contraction": 0.15831692877998726, "embedding": 0.29736558256021506, "map": 0.29736558256021506}}, {"docstring": "A special case of `finset.sup_eq_supr` that omits the useless `x \u2208 univ` binder.\n", "keywords": {"finset.sup": 0.04491197687864554, "supr": 0.04491197687864554, "univ": 0.04491197687864554, "binder": 0.04491197687864554, "omits the useless": 0.04940384002065631, "special case": 0.09700399286574239, "useless": 0.15831692877998726, "special": 0.29736558256021506, "case": 0.29736558256021506, "omits": 0.29736558256021506}}, {"docstring": "Compressing a family doesn't change its size.\n", "keywords": {"Compressing a family": 0.04940384002065631, "change its size": 0.04940384002065631, "Compressing": 0.15831692877998726, "size": 0.15831692877998726, "family": 0.29736558256021506, "change": 0.29736558256021506}}, {"docstring": "The degree of a product of polynomials is equal to the sum of the degrees, where the degree of the zero polynomial is \u22a5.\n", "keywords": {"polynomials is equal": 0.013546180738739306, "product of polynomials": 0.033661880941261824, "degree": 0.04298158875813282, "degrees": 0.08596317751626564, "product": 0.1151365990389872, "equal": 0.1151365990389872, "sum": 0.1151365990389872, "polynomials": 0.11608067570711267}}, {"docstring": "The determinant of `conj_ae`, as a linear map.\n", "keywords": {"conj": 0.04491197687864554, "linear map": 0.04940384002065631, "map": 0.15831692877998726, "determinant": 0.29736558256021506, "linear": 0.29736558256021506}}, {"docstring": " If vectors `v\u2081` and `v\u2082` are on the same ray, then for some nonnegative `a b`, `a + b = 1`, we have `v\u2081 = a \u2022 (v\u2081 + v\u2082)` and `v\u2082 = b \u2022 (v\u2081 + v\u2082)`.\n", "keywords": {"vectors": 0.05617160784335063, "ray": 0.05617160784335063, "nonnegative": 0.05617160784335063}}, {"docstring": " A compact set in a pseudo emetric space is separable, i.e., it is a subset of the closure of a countable set.\n", "keywords": {"pseudo emetric space": 0.0014007173366100314, "space is separable": 0.008870694726817624, "pseudo emetric": 0.012385089084719787, "emetric space": 0.012385089084719787, "compact set": 0.015198370033106133, "countable set": 0.015198370033106133, "set": 0.06767673667974392, "separable": 0.07949602794131501, "compact": 0.11060549338282699, "pseudo": 0.11060549338282699, "emetric": 0.11060549338282699, "space": 0.11060549338282699, "subset": 0.11060549338282699, "closure": 0.11060549338282699, "countable": 0.11060549338282699}}, {"docstring": "If `f` and `g` are identically distributed and `f` is a.e. strongly measurable, so is `g`.\n", "keywords": {"strongly measurable": 0.009239332327148086, "identically distributed": 0.02570861714399338, "strongly": 0.09568045026443411, "measurable": 0.09568045026443411, "identically": 0.15831692877998726, "distributed": 0.15831692877998726}}, {"docstring": "Composing two additions on the left by `y` then `x` is equal to a addition on the left by `x + y`.\n", "keywords": {"Composing two additions": 0.06651687563559956, "left": 0.07915846438999363, "Composing": 0.12363091320521931, "equal": 0.2005079697193566, "additions": 0.22714242496584958, "addition": 0.22714242496584958}}, {"docstring": "A subset of `\u2115` containing `b : \u2115` and closed under `nat.succ` contains every `n \u2265 b`.\n", "keywords": {"nat.succ": 0.04491197687864554, "subset": 0.15831692877998726, "closed": 0.15831692877998726}}, {"docstring": "The category or R-modules has cokernels, given by the projection onto the quotient.\n", "keywords": {"R-modules has cokernels": 0.005157590407455398, "category or R-modules": 0.007743432063478832, "R-modules": 0.06650965107397505, "cokernels": 0.0771485953923296, "quotient": 0.0771485953923296, "category": 0.1155310835876123, "projection": 0.1155310835876123}}, {"docstring": "The `f` argument to `permutations_aux2` when `r = []` can be eliminated.\n", "keywords": {"permutations": 0.04491197687864554, "argument": 0.15831692877998726, "eliminated": 0.15831692877998726}}, {"docstring": " If a function `f` is differentiable and `f'` is strictly antitone on `\u211d` then `f` is strictly concave.\n", "keywords": {"strictly concave": 0.013544593182520747, "strictly antitone": 0.020241076619814977, "strictly": 0.07162298286637953, "function": 0.09329120537733218, "concave": 0.09329120537733218, "differentiable": 0.1384995633470844, "antitone": 0.1384995633470844}}, {"docstring": "A singleton has zero diameter\n", "keywords": {"diameter": 0.15831692877998726, "singleton": 0.29736558256021506}}, {"docstring": "**Alias** of the reverse direction of szemeredi_regularity.step_bound_pos_iff`.\n", "keywords": {"direction of szemeredi": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "regularity.step": 0.04491197687864554, "bound": 0.04491197687864554, "pos": 0.04491197687864554, "iff": 0.04491197687864554, "szemeredi": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "An element of an `add_monoid` is in the set of that element's natural number multiples.\n", "keywords": {"natural number multiples": 0.004077346538176825, "element natural number": 0.01013036461210892, "number multiples": 0.021114872146320036, "natural number": 0.03498702377830618, "element natural": 0.05135123883758033, "add": 0.053316999302383886, "monoid": 0.053316999302383886, "multiples": 0.11246769819744629, "element": 0.13282721021560867, "set": 0.1838594885424691, "natural": 0.1838594885424691, "number": 0.1838594885424691}}, {"docstring": "`complex.abs (complex.exp z) \u2192 \u221e` as `complex.re z \u2192 \u221e`. TODO: use `bornology.cobounded`.\n", "keywords": {"complex.abs": 0.05899937629682816, "TODO": 0.11555589791117535, "complex.exp": 0.12363091320521931, "complex.re": 0.12363091320521931, "bornology.cobounded": 0.17881754828257995}}, {"docstring": "The map `coe_fn : (r \u21aar s) \u2192 (\u03b1 \u2192 \u03b2)` is injective.\n", "keywords": {"coe": 0.04491197687864554, "map": 0.09568045026443411, "injective": 0.09568045026443411}}, {"docstring": "Any category with finite coproducts and coequalizers has all finite colimits.  See <https://stacks.math.columbia.edu/tag/002Q>.\n", "keywords": {"finite colimits": 0.0523366818185617, "coproducts and coequalizers": 0.0647213843491835, "finite coproducts": 0.08563321195043695, "colimits": 0.1554527012770092, "finite": 0.15996435041261692, "category with finite": 0.17794256504260472, "category": 0.246550513069643, "coproducts": 0.246550513069643, "coequalizers": 0.246550513069643}}, {"docstring": " An induction principle for closure membership. If `p` holds for `1` and all elements of `k`, and is preserved under multiplication and inverse, then `p` holds for all elements of the closure of `k`.\n", "keywords": {"induction principle": 0.041067145989475896, "closure membership": 0.05303379658192498, "holds": 0.13264405558464026, "membership": 0.13690089622781554, "principle for closure": 0.16269363174436116, "elements": 0.18034450672916197, "closure": 0.18393912731976153, "multiplication and inverse": 0.19661905478275257, "induction": 0.19861310018350192, "principle": 0.19861310018350192, "preserved under multiplication": 0.2722374662885858, "inverse": 0.35520562385871335, "preserved": 0.46258320047845314, "multiplication": 0.46258320047845314}}, {"docstring": "A group element has finite additive order iff its order is positive.\n", "keywords": {"finite additive order": 0.010130364612108918, "additive order iff": 0.010130364612108918, "group element": 0.034987023778306175, "element has finite": 0.034987023778306175, "finite additive": 0.034987023778306175, "additive order": 0.051351238837580325, "order iff": 0.051351238837580325, "order is positive": 0.06956410889469503, "iff its order": 0.11245662598947327, "positive": 0.11246769819744627, "order": 0.13282721021560867, "group": 0.18385948854246909, "element": 0.18385948854246909, "finite": 0.18385948854246909, "additive": 0.18385948854246909, "iff": 0.18385948854246909}}, {"docstring": "This is not a simp lemma, since we usually want simp to keep `star_ring_end` bundled. For example, for complex conjugation, we don't want simp to turn `conj x` into the bare function `star x` automatically since most lemmas are about `conj x`.\n", "keywords": {"ring": 0.08615011889250322, "end": 0.08615011889250322, "bundled": 0.08615011889250322, "simp": 0.10994465941644486, "star": 0.11940515697286418, "conj": 0.1398606190827625, "simp lemma": 0.14363072401722338, "complex conjugation": 0.21246863461972437, "bare function": 0.21246863461972437, "simp to turn": 0.21940653607012192, "conjugation": 0.3679147060541982, "turn": 0.3679147060541982, "function": 0.3679147060541982, "automatically": 0.3679147060541982, "lemma": 0.3807729971108203, "lemmas": 0.3807729971108203, "complex": 0.4762962550765146, "bare": 0.4762962550765146}}, {"docstring": "A module with a nonzero vector `v` has dimension 1 iff every vector is a multiple of `v`.\n", "keywords": {"nonzero vector": 0.025536557885239508, "iff every vector": 0.04108589655370922, "vector": 0.09106811155038866, "dimension": 0.09202664026077896, "iff": 0.09202664026077896, "module": 0.1367145963576765, "nonzero": 0.1367145963576765, "multiple": 0.1367145963576765}}, {"docstring": "Conjugation is jointly continuous on `G \u00d7 G` when both `mul` and `inv` are continuous.\n", "keywords": {"Conjugation is jointly": 0.022138323509052035, "jointly continuous": 0.05417025203414716, "mul": 0.054709255964732355, "inv": 0.054709255964732355, "Conjugation": 0.11521656054299435, "continuous": 0.13667842094541144, "jointly": 0.1879836817695587}}, {"docstring": "Constant zero function has sum `0`\n", "keywords": {"Constant zero function": 0.04940384002065631, "function has sum": 0.04940384002065631, "Constant": 0.15831692877998726, "sum": 0.15831692877998726, "function": 0.29736558256021506}}, {"docstring": " If `R \u2192 A \u2192 B` is an algebra tower, then if the entire tower is an integral extension so is `A \u2192 B`.\n", "keywords": {"integral extension": 0.019557279302732804, "algebra tower": 0.02635223776265893, "entire tower": 0.02635223776265893, "tower": 0.09269208833952335, "algebra": 0.1384995633470844, "entire": 0.1384995633470844, "integral": 0.1384995633470844, "extension": 0.1384995633470844}}, {"docstring": " The hard part of the Lusin separation theorem saying that two disjoint analytic sets are contained in disjoint Borel sets (see the full statement in `analytic_set.measurably_separable`). Here, we prove this when our analytic sets are the ranges of functions from `\u2115 \u2192 \u2115`.\n", "keywords": {"Lusin separation theorem": 0.0024600924950685514, "disjoint Borel sets": 0.003969117618651408, "Lusin separation": 0.0136470046281646, "disjoint Borel": 0.01566012583775508, "disjoint analytic sets": 0.015866272409999105, "Borel sets": 0.018884056283220575, "hard part": 0.030917871667968545, "separation theorem": 0.030917871667968545, "full statement": 0.030917871667968545, "analytic sets": 0.03669194586259095, "disjoint analytic": 0.06030492326704147, "sets are contained": 0.0735142074963929, "Lusin": 0.07774238083339159, "Borel": 0.07774238083339159, "sets": 0.07946784361572554, "contained in disjoint": 0.08123125813456356, "set.measurably": 0.0851613849028291, "separable": 0.0851613849028291, "analytic": 0.09558983859035272, "disjoint": 0.09916513617266406}}, {"docstring": "The product of group homomorphisms is a group homomorphism if the target is commutative.\n", "keywords": {"target is commutative": 0.02459177073035948, "group homomorphisms": 0.05190832724820438, "product of group": 0.10215850587430082, "group": 0.11107071682746067, "commutative": 0.12156210109285605, "product": 0.19744254481508877, "target": 0.19744254481508877, "homomorphisms": 0.22214143365492134}}, {"docstring": " In the specific case of continuous multilinear maps on spaces indexed by `fin (n+1)`, where one can build an element of `\u03a0(i : fin (n+1)), M i` using `cons`, one can express directly the multiplicativity of a multilinear map along the first variable.\n", "keywords": {"continuous multilinear maps": 0.0030057880711644356, "specific case": 0.019557279302732804, "case of continuous": 0.019557279302732804, "spaces indexed": 0.019557279302732804, "build an element": 0.019557279302732804, "express directly": 0.019557279302732804, "directly the multiplicativity": 0.019557279302732804, "fin": 0.02006098734604785, "continuous multilinear": 0.020241076619814977, "multilinear maps": 0.02094927335880251, "maps on spaces": 0.04869677256422715, "cons": 0.054709255964732355, "multilinear": 0.07162298286637953, "variable": 0.09329120537733218, "specific": 0.1384995633470844, "case": 0.1384995633470844, "continuous": 0.1384995633470844, "spaces": 0.1384995633470844, "indexed": 0.1384995633470844, "build": 0.1384995633470844}}, {"docstring": " This is the same as `order_of_pow'` and `order_of_pow''` but with one assumption less which is automatic in the case of a finite cancellative monoid.\n", "keywords": {"finite cancellative monoid": 0.00196598076995442, "cancellative monoid": 0.013546417228156258, "finite cancellative": 0.020225813225353943, "order": 0.020602899695743707, "pow": 0.05332403764722467, "monoid": 0.09492398510093508, "assumption": 0.1408007092310104, "automatic": 0.1408007092310104, "case": 0.1408007092310104, "finite": 0.1408007092310104, "cancellative": 0.1408007092310104}}, {"docstring": "Given a closed embedding into a Polish space, the source space is also Polish.\n", "keywords": {"Polish space": 0.03977130262227975, "closed embedding": 0.040564923574392765, "source space": 0.06104740651975287, "Polish": 0.06563119360924669, "space": 0.14570071893270706, "closed": 0.19744254481508877, "embedding": 0.19744254481508877, "source": 0.19744254481508877}}, {"docstring": " The `cons` and `head`/`tail` functions are mutually inverse, unlike in the case of `list` where this only holds for nonempty lists.\n", "keywords": {"functions are mutually": 0.019943439662486344, "mutually inverse": 0.019943439662486344, "nonempty lists": 0.024398907343669427, "holds for nonempty": 0.033100028790236186, "cons": 0.051687907611449965, "head": 0.051687907611449965, "tail": 0.051687907611449965, "functions": 0.10923981997294611, "inverse": 0.10923981997294611, "unlike": 0.10923981997294611, "list": 0.13306329461249475, "lists": 0.13306329461249475, "mutually": 0.17899586521379354, "case": 0.17899586521379354, "holds": 0.17899586521379354, "nonempty": 0.17899586521379354}}, {"docstring": " Given a set `s` which is a convex neighbourhood of `0` and a point `x\u2080` outside of it, there is a continuous linear functional `f` separating `x\u2080` and `s`, in the sense that it sends `x\u2080` to 1 and all of `s` to values strictly below `1`.\n", "keywords": {"continuous linear functional": 0.0006400448072512631, "linear functional": 0.0065920978564317735, "convex neighbourhood": 0.009239332327148086, "continuous linear": 0.009239332327148086, "separating": 0.04491197687864554, "set": 0.06844581806138879, "point": 0.06844581806138879, "functional": 0.06844581806138879, "sends": 0.06844581806138879, "convex": 0.09568045026443411, "neighbourhood": 0.09568045026443411, "continuous": 0.09568045026443411, "linear": 0.09568045026443411, "sense": 0.09568045026443411, "strictly": 0.09568045026443411}}, {"docstring": "The digits in the base b+2 expansion of n are all less than b+2\n", "keywords": {"expansion": 0.09568045026443411, "digits": 0.15831692877998726, "base": 0.15831692877998726}}, {"docstring": "Show that an element extracted from `P : \u2203 a, p a` using `P.some` satisfies `p`.\n", "keywords": {"element extracted": 0.013527995261974615, "P.some": 0.030396371632413578, "satisfies": 0.04491197687864554, "Show": 0.0771485953923296, "element": 0.1155310835876123, "extracted": 0.1155310835876123}}, {"docstring": "For the equality, see `inf_edist_cthickening`.\n", "keywords": {"edist": 0.04491197687864554, "cthickening": 0.04491197687864554, "equality": 0.15831692877998726}}, {"docstring": " **Strict inequality case of the Rearrangement Inequality**: Pointwise multiplication of `f` and `g`, which antivary together, is strictly decreased by a permutation if and only if `f` and `g \u2218 \u03c3` do not antivary together. Stated by permuting the entries of `g`.\n", "keywords": {"Strict inequality case": 0.0016642028270215602, "Strict inequality": 0.008747117210927207, "Pointwise multiplication": 0.011683623122683102, "Rearrangement Inequality": 0.011811652352352629, "inequality case": 0.02602119105438165, "strictly decreased": 0.03495776414940041, "Strict": 0.06283799353160062, "Pointwise": 0.06283799353160062, "inequality": 0.06899702012035523, "Rearrangement": 0.08459615986079659, "antivary": 0.08562916729374415, "Stated by permuting": 0.17147630665836236, "case": 0.1837851895373716, "multiplication": 0.1837851895373716, "strictly": 0.1837851895373716, "decreased": 0.1837851895373716, "permutation": 0.1837851895373716, "permuting the entries": 0.23851325396085266, "Stated": 0.3335528702481384, "permuting": 0.4388397201336416}}, {"docstring": " The determinant of a 2\u00d72 block matrix with the upper-right block equal to zero is the product of the determinants of the diagonal blocks. For the generalization to any number of blocks, see `matrix.det_of_lower_triangular`.\n", "keywords": {"upper-right block equal": 0.00740289524013058, "block matrix": 0.047023878874704085, "upper-right block": 0.047023878874704085, "block equal": 0.047023878874704085, "diagonal blocks": 0.047023878874704085, "determinant": 0.10560010152970296, "matrix": 0.1485863395864168, "upper-right": 0.1485863395864168, "equal": 0.1485863395864168, "product": 0.1485863395864168, "diagonal": 0.1485863395864168, "block": 0.15113080091152167, "blocks": 0.15113080091152167, "matrix.det": 0.2542526474747133, "lower": 0.2542526474747133, "triangular": 0.2542526474747133, "number of blocks": 0.3563869139811104, "generalization": 0.37737752414603726, "number": 0.37737752414603726}}, {"docstring": "See `lt_tsub_iff_right` for a stronger statement in a linear order.\n", "keywords": {"linear order": 0.015380821171891606, "stronger statement": 0.02570861714399338, "tsub": 0.04491197687864554, "iff": 0.04491197687864554, "order": 0.09568045026443411, "stronger": 0.15831692877998726, "statement": 0.15831692877998726, "linear": 0.15831692877998726}}, {"docstring": "Arithmetic mean-geometric mean (AM-GM) inequality for linearly ordered commutative rings.\n", "keywords": {"ordered commutative rings": 0.016559150827736194, "linearly ordered commutative": 0.03339840940482845, "AM-GM": 0.04491197687864554, "Arithmetic mean-geometric": 0.04940384002065631, "inequality for linearly": 0.04940384002065631, "commutative rings": 0.04940384002065631, "linearly ordered": 0.09700399286574239, "ordered commutative": 0.09700399286574239, "Arithmetic": 0.15831692877998726, "inequality": 0.15831692877998726, "rings": 0.15831692877998726, "mean-geometric": 0.29736558256021506, "linearly": 0.29736558256021506, "ordered": 0.29736558256021506, "commutative": 0.29736558256021506}}, {"docstring": " An integral domain is a Dedekind domain iff and only if it is Noetherian, has dimension \u2264 1, and is integrally closed in a given fraction field. In particular, this definition does not depend on the choice of this fraction field.\n", "keywords": {"Dedekind domain iff": 0.004090866550048178, "Dedekind domain": 0.02024348078487212, "fraction field": 0.02325361939329567, "integrally closed": 0.0379332102597423, "integral domain": 0.046070465614688895, "domain iff": 0.046070465614688895, "Noetherian": 0.06416253699026542, "field": 0.07671250818418328, "Dedekind": 0.08612808588538023, "domain": 0.11518782295155719, "dimension": 0.13139304727920198, "fraction": 0.14482787042602638, "integral": 0.1911723571806515, "iff": 0.1911723571806515, "integrally": 0.1911723571806515, "closed": 0.1911723571806515, "definition": 0.45081635970284, "depend": 0.45081635970284, "choice": 0.45081635970284}}, {"docstring": " A set is a neighborhood of `a` within `(-\u221e, a)` if and only if it contains an interval `[l, a)` with `l < a`.\n", "keywords": {"interval": 0.060154590733539764, "set": 0.0771485953923296, "neighborhood": 0.0771485953923296}}, {"docstring": "If `a` is positive we can form a basis from only nonnegative `Ioo` intervals\n", "keywords": {"form a basis": 0.02570861714399338, "Ioo": 0.030396371632413578, "intervals": 0.04491197687864554, "nonnegative": 0.09568045026443411, "positive": 0.15831692877998726, "form": 0.15831692877998726, "basis": 0.15831692877998726}}, {"docstring": "The map `to_inductive_limit n` mapping `X n` to the inductive limit is an isometry.\n", "keywords": {"mapping": 0.05794058924527716, "inductive limit": 0.09279441717942427, "map": 0.12156210109285605, "isometry": 0.12156210109285605, "inductive": 0.14570071893270706, "limit": 0.14570071893270706}}, {"docstring": " Tower law: if `A` is a `K`-vector space and `K` is a field extension of `F` then `dim_F(A) = dim_F(K) * dim_K(A)`.\n", "keywords": {"Tower law": 0.006873949672523931, "vector space": 0.009105268711180772, "dim": 0.012034501391241018, "field extension": 0.012069567539055843, "Tower": 0.08262578939564287, "law": 0.08262578939564287, "vector": 0.08262578939564287, "space": 0.1092045344216192, "field": 0.1092045344216192, "extension": 0.1092045344216192}}, {"docstring": "Compressing an element is idempotent.\n", "keywords": {"Compressing an element": 0.04940384002065631, "element is idempotent": 0.04940384002065631, "Compressing": 0.15831692877998726, "idempotent": 0.15831692877998726, "element": 0.29736558256021506}}, {"docstring": " If a reflexive relation `r : \u03b1 \u2192 \u03b1 \u2192 Prop` holds over `x y : \u03b1`, then it holds whether or not `x \u2260 y`.\n", "keywords": {"reflexive relation": 0.013546417228156258, "Prop": 0.03498516242744211, "holds": 0.094808423351325, "relation": 0.09492398510093508, "reflexive": 0.1408007092310104}}, {"docstring": " For functions to `\u211d`, it suffices to prove `f x \u2264 f y + K * dist x y`; this version assumes `0\u2264K`.\n", "keywords": {"suffices to prove": 0.015380821171891606, "version assumes": 0.015380821171891606, "prove": 0.09568045026443411, "dist": 0.09568045026443411, "assumes": 0.09568045026443411, "functions": 0.15831692877998726, "suffices": 0.15831692877998726, "version": 0.15831692877998726}}, {"docstring": "The `tendsto` relation can be checked on ultrafilters.\n", "keywords": {"tendsto": 0.04491197687864554, "checked on ultrafilters": 0.04940384002065631, "relation": 0.15831692877998726, "ultrafilters": 0.15831692877998726, "checked": 0.29736558256021506}}, {"docstring": " If a sequence `v` of real numbers satisfies `k * v n \u2264 v (n+1)` with `1 < k`, then it goes to +\u221e.\n", "keywords": {"real numbers satisfies": 0.0010606143890052174, "numbers satisfies": 0.00899321792126428, "real numbers": 0.013527995261974615, "sequence": 0.0771485953923296, "satisfies": 0.0771485953923296, "real": 0.1155310835876123, "numbers": 0.1155310835876123}}, {"docstring": "The upper central series of a group is an ascending central series.\n", "keywords": {"upper central series": 0.011041420469275918, "ascending central series": 0.011041420469275918, "central series": 0.02595416362410219, "upper central": 0.045872129360315365, "ascending central": 0.045872129360315365, "central": 0.11107071682746067, "series": 0.11107071682746067, "upper": 0.19744254481508877, "group": 0.19744254481508877, "ascending": 0.19744254481508877}}, {"docstring": "Young's inequality, `\u211d\u22650` version with real conjugate exponents.\n", "keywords": {"real conjugate exponents": 0.016559150827736194, "Young inequality": 0.02570861714399338, "version with real": 0.04940384002065631, "conjugate exponents": 0.04940384002065631, "real conjugate": 0.09700399286574239, "Young": 0.15831692877998726, "inequality": 0.15831692877998726, "version": 0.15831692877998726, "exponents": 0.15831692877998726, "real": 0.29736558256021506, "conjugate": 0.29736558256021506}}, {"docstring": "A prime `p` satisfies `p % 2 = 1` if and only if `p \u2260 2`.\n", "keywords": {"satisfies": 0.04491197687864554, "prime": 0.0771485953923296}}, {"docstring": " Any large enough family of vectors in `R^n` has a pair of elements whose remainders are close together, pointwise.\n", "keywords": {"large enough family": 0.02570861714399338, "family of vectors": 0.02570861714399338, "pair of elements": 0.02570861714399338, "elements whose remainders": 0.02570861714399338, "remainders are close": 0.02570861714399338, "pointwise": 0.04491197687864554, "large": 0.15831692877998726, "family": 0.15831692877998726, "vectors": 0.15831692877998726, "pair": 0.15831692877998726, "elements": 0.15831692877998726, "remainders": 0.15831692877998726, "close": 0.15831692877998726}}, {"docstring": " The elements of the Hilbert basis `fourier_series` for `Lp \u2102 2 haar_circle` are the functions `fourier_Lp 2`, the monomials `\u03bb z, z ^ n` on the circle considered as elements of `L2`.\n", "keywords": {"Hilbert basis": 0.004667558878836302, "circle considered": 0.013293843403342508, "fourier": 0.02107242729789198, "considered as elements": 0.027190750337704673, "elements": 0.050617516031681686, "series": 0.056560163438398744, "haar": 0.056560163438398744, "Hilbert": 0.05846151139870679, "circle": 0.0623852205001074, "basis": 0.07946893395839094, "functions": 0.07946893395839094, "monomials": 0.07946893395839094, "considered": 0.10514858787628593}}, {"docstring": "Composing a `list.map` with another `list.map` is equal to a single `list.map` of composed functions.\n", "keywords": {"list.map": 0.012355538996295002, "composed functions": 0.015444495608482297, "Composing": 0.10143744007623053, "single": 0.10143744007623053, "functions": 0.10143744007623053, "equal": 0.1499406051001382, "composed": 0.1499406051001382}}, {"docstring": " If the `R`-integral element `a : S` has coordinates `\u2264 y` with respect to some basis `b`, its norm is less than `norm_bound abv b * y ^ dim S`.\n", "keywords": {"integral element": 0.012385089084719787, "bound abv": 0.020435055290363522, "integral": 0.11060549338282699, "element": 0.11060549338282699, "coordinates": 0.11060549338282699, "basis": 0.11060549338282699, "bound": 0.11060549338282699, "dim": 0.11060549338282699, "norm": 0.13023752997463905, "respect": 0.18105634546484617, "abv": 0.18105634546484617}}, {"docstring": "In a non-trivial `mul_zero_class`, the `0` element is not right-regular.\n", "keywords": {"mul": 0.04491197687864554, "class": 0.04491197687864554, "non-trivial": 0.15831692877998726, "element": 0.15831692877998726, "right-regular": 0.15831692877998726}}, {"docstring": "**B\u00e9zout's lemma**\n", "keywords": {"B\u00e9zout lemma": 0.013797198203993007, "B\u00e9zout": 0.08596317751626563, "lemma": 0.15831692877998726}}, {"docstring": " The exponential map in a commutative Banach-algebra `\ud835\udd38` over `\ud835\udd42 = \u211d` or `\ud835\udd42 = \u2102` has strict Fr\u00e9chet-derivative `exp \ud835\udd42 x \u2022 1 : \ud835\udd38 \u2192L[\ud835\udd42] \ud835\udd38` at any point `x`.\n", "keywords": {"commutative Banach-algebra": 0.004156274195678376, "strict Fr\u00e9chet-derivative": 0.004156274195678376, "exponential map": 0.009239332327148086, "Banach-algebra": 0.04325931859548787, "Fr\u00e9chet-derivative": 0.04325931859548787, "exp": 0.06844581806138879, "point": 0.06844581806138879, "exponential": 0.09568045026443411, "map": 0.09568045026443411, "commutative": 0.09568045026443411, "strict": 0.09568045026443411}}, {"docstring": " A change of basis formula for barycentric coordinates.  See also `affine_basis.to_matrix_inv_mul_affine_basis_to_matrix`.\n", "keywords": {"barycentric coordinates": 0.04496380661252461, "formula for barycentric": 0.07271150199915835, "affine": 0.08315011038879998, "matrix": 0.08315011038879998, "basis formula": 0.14515966728493196, "coordinates": 0.16527293267439389, "basis.to": 0.23408280182656144, "inv": 0.23408280182656144, "mul": 0.23408280182656144, "basis": 0.24343882066515482, "change": 0.26035150307889493, "formula": 0.26035150307889493, "barycentric": 0.26035150307889493, "change of basis": 0.2781942664316575}}, {"docstring": "The imaginary unit.\n", "keywords": {"imaginary unit": 0.04940384002065631, "unit": 0.15831692877998726, "imaginary": 0.29736558256021506}}, {"docstring": "Two simplices are equal if and only if they have the same points.\n", "keywords": {"simplices are equal": 0.02570861714399338, "points": 0.09568045026443411, "simplices": 0.15831692877998726, "equal": 0.15831692877998726}}, {"docstring": " The **Schwarz Lemma**: if `f : \u2102 \u2192 E` sends an open disk with center `c` and a positive radius `R\u2081` to an open ball with center `f c` and radius `R\u2082`, then the absolute value of the derivative of `f` at `c` is at most the ratio `R\u2082 / R\u2081`.\n", "keywords": {"Schwarz Lemma": 0.0024194616012459744, "disk with center": 0.007428613243059435, "ball with center": 0.007428613243059435, "sends an open": 0.009913652209406565, "positive radius": 0.010440122029950101, "open disk": 0.013817713981353173, "open ball": 0.013817713981353173, "center": 0.03146277825206327, "radius": 0.04408578671136769, "Schwarz": 0.0491286264376762, "Lemma": 0.0491286264376762, "open": 0.05815404476918013, "sends": 0.08439943001984396, "ratio": 0.08439943001984396, "disk": 0.11718348279991213, "positive": 0.11718348279991213, "ball": 0.11718348279991213, "absolute": 0.11718348279991213, "derivative": 0.11718348279991213}}, {"docstring": "The minimal distance to a set is bounded by the distance to any point in this set\n", "keywords": {"minimal distance": 0.045872129360315365, "distance": 0.11107071682746067, "set is bounded": 0.1311351076396852, "set": 0.14570071893270706, "minimal": 0.19744254481508877, "bounded": 0.19744254481508877, "point": 0.19744254481508877}}, {"docstring": "A `finset` for an empty type is empty.\n", "keywords": {"finset": 0.05706283858652404, "empty type": 0.05913243875864445, "type is empty": 0.12748048004056906, "empty": 0.14323823713631006, "type": 0.19488865479360015}}, {"docstring": "Symmetric of `finset.image_image\u2082_antidistrib_right`.\n", "keywords": {"image \u2082_ antidistrib": 0.02570861714399338, "finset.image": 0.04491197687864554, "Symmetric": 0.15831692877998726, "image": 0.15831692877998726, "antidistrib": 0.15831692877998726}}, {"docstring": " In an ordered commutative monoid, if each factor `f i` of one finite product is less than or equal to the corresponding factor `g i` of another finite product, then `\u220f i in s, f i \u2264 \u220f i in s, g i`.\n", "keywords": {"ordered commutative monoid": 0.0007814374567181139, "finite product": 0.00445632759084731, "commutative monoid": 0.007758024181770979, "ordered commutative": 0.009918791355137421, "factor": 0.03787863113987834, "finite": 0.04699447171101985, "product": 0.04699447171101985, "monoid": 0.07767990991064867, "ordered": 0.09910285154256718, "commutative": 0.09910285154256718, "equal": 0.09910285154256718}}, {"docstring": "An additive shear mapping preserves the measure `\u03bc.prod \u03bd`.\n", "keywords": {"additive shear mapping": 0.03339840940482845, "shear mapping preserves": 0.03339840940482845, "preserves the measure": 0.04940384002065631, "additive shear": 0.09700399286574239, "shear mapping": 0.09700399286574239, "mapping preserves": 0.09700399286574239, "measure": 0.15831692877998726, "\u03bc.prod": 0.15831692877998726, "additive": 0.29736558256021506, "shear": 0.29736558256021506, "mapping": 0.29736558256021506, "preserves": 0.29736558256021506}}, {"docstring": "A nonempty set is scaled by zero to the singleton set containing 0.\n", "keywords": {"nonempty set": 0.0562460611896591, "singleton set": 0.0562460611896591, "set is scaled": 0.12194096740933039, "set": 0.13945519496053638, "nonempty": 0.19092478917347616, "scaled": 0.19092478917347616, "singleton": 0.19092478917347616}}, {"docstring": "An open subgroup of a nonarchimedean ring contains the square of another one.\n", "keywords": {"open subgroup": 0.02570861714399338, "nonarchimedean ring": 0.02570861714399338, "open": 0.15831692877998726, "subgroup": 0.15831692877998726, "nonarchimedean": 0.15831692877998726, "ring": 0.15831692877998726, "square": 0.15831692877998726}}, {"docstring": " In a linearly ordered field with the order topology, if `f` tends to `at_top` and `g` tends to a negative constant `C` then `f * g` tends to `at_bot`.\n", "keywords": {"linearly ordered field": 0.0016012214736657916, "order topology": 0.00899321792126428, "negative constant": 0.00899321792126428, "linearly ordered": 0.013527995261974615, "ordered field": 0.013527995261974615, "top": 0.04491197687864554, "bot": 0.04491197687864554, "topology": 0.0771485953923296, "constant": 0.0771485953923296, "linearly": 0.1155310835876123, "ordered": 0.1155310835876123, "field": 0.1155310835876123, "order": 0.1155310835876123, "negative": 0.1155310835876123}}, {"docstring": "**Alias** of the reverse direction of is_top_to_dual_iff`.\n", "keywords": {"reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "top": 0.04491197687864554, "dual": 0.04491197687864554, "iff": 0.04491197687864554, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "A version of `nat.exists_infinite_primes` using the `set.infinite` predicate.\n", "keywords": {"nat.exists": 0.04491197687864554, "infinite": 0.04491197687864554, "primes": 0.04491197687864554, "set.infinite": 0.04491197687864554, "predicate": 0.04491197687864554, "version": 0.29736558256021506}}, {"docstring": "If `s` has a least upper bound, then it is bounded above.\n", "keywords": {"upper bound": 0.04940384002065631, "bound": 0.15831692877998726, "upper": 0.29736558256021506, "bounded": 0.29736558256021506}}, {"docstring": "As a map from the left argument to a unary function, `f` is injective.\n", "keywords": {"unary function": 0.015380821171891606, "left argument": 0.02570861714399338, "function": 0.09568045026443411, "injective": 0.09568045026443411, "map": 0.15831692877998726, "left": 0.15831692877998726, "argument": 0.15831692877998726, "unary": 0.15831692877998726}}, {"docstring": " The `step_ret` function respects the `then k'` homomorphism. Note that this is an exact equality, not a simulation; the original and embedded machines move in lock-step until the embedded machine reaches the halt state.\n", "keywords": {"function respects": 0.013801099430952722, "embedded machines move": 0.043371308089504505, "embedded machine reaches": 0.043371308089504505, "step": 0.07298614409510307, "ret": 0.07298614409510307, "function": 0.10182989217618219, "homomorphism": 0.10182989217618219, "embedded machines": 0.10392938714938797, "exact equality": 0.10936076127076144, "halt state": 0.10936076127076144, "machines move": 0.11990158166863948, "machine reaches": 0.11990158166863948, "respects": 0.13368591196182802, "move in lock-step": 0.1386367006847222, "reaches the halt": 0.1386367006847222, "embedded": 0.15341525285405044, "original and embedded": 0.24067095067809546, "Note": 0.28251545179941845, "equality": 0.28251545179941845, "simulation": 0.28251545179941845}}, {"docstring": "An unordered closed interval is compact.\n", "keywords": {"unordered closed interval": 0.03339840940482845, "interval is compact": 0.04940384002065631, "unordered closed": 0.09700399286574239, "closed interval": 0.09700399286574239, "compact": 0.15831692877998726, "unordered": 0.29736558256021506, "closed": 0.29736558256021506, "interval": 0.29736558256021506}}, {"docstring": "The sum of the weights for the centroid indexed by a `fintype`.\n", "keywords": {"centroid indexed": 0.013527995261974615, "fintype": 0.04491197687864554, "sum": 0.1155310835876123, "weights": 0.1155310835876123, "centroid": 0.1155310835876123, "indexed": 0.1155310835876123}}, {"docstring": "For coprime `a` and `b`, the prime factors of `a * b` are the union of those of `a` and `b`\n", "keywords": {"prime factors": 0.013527995261974615, "coprime": 0.0771485953923296, "prime": 0.1155310835876123, "factors": 0.1155310835876123, "union": 0.1155310835876123}}, {"docstring": "Definition of `\u2264` for congruence relations.\n", "keywords": {"congruence relations": 0.04940384002065631, "Definition": 0.15831692877998726, "relations": 0.15831692877998726, "congruence": 0.29736558256021506}}, {"docstring": " A set is a neighborhood of `a` within `(-\u221e, a)` if and only if it contains an interval `(l, a)` with `l < a`.\n", "keywords": {"interval": 0.060154590733539764, "set": 0.0771485953923296, "neighborhood": 0.0771485953923296}}, {"docstring": " The scalar multiplication of two `C^n` functions within a set at a point is `C^n` within this set at this point.\n", "keywords": {"scalar multiplication": 0.040564923574392765, "set": 0.11107071682746067, "functions": 0.12156210109285605, "point": 0.14570071893270706, "scalar": 0.19744254481508877, "multiplication": 0.19744254481508877}}, {"docstring": "In a noncommutative ordered `*`-algebra over \u211d, Tsirelson's bound for a CHSH tuple (A\u2080, A\u2081, B\u2080, B\u2081) is `A\u2080 * B\u2080 + A\u2080 * B\u2081 + A\u2081 * B\u2080 - A\u2081 * B\u2081 \u2264 2^(3/2) \u2022 1`.  We prove this by providing an explicit sum-of-squares decomposition of the difference.  (We could work over `\u2124[2^(1/2), 2^(-1/2)]` if we really wanted to!)\n", "keywords": {"CHSH tuple": 0.005195028967410033, "Tsirelson bound": 0.005457084265794554, "noncommutative ordered": 0.009856703331486505, "Tsirelson": 0.048709694939601283, "CHSH": 0.05899937629682816, "providing an explicit": 0.08209205484639899, "ordered": 0.0875971992647228, "algebra": 0.0875971992647228, "tuple": 0.0875971992647228, "noncommutative": 0.11142476118001256, "bound": 0.11142476118001256, "explicit": 0.250059511749331, "decomposition": 0.250059511749331, "difference": 0.250059511749331, "prove": 0.3033846052649951, "providing": 0.3033846052649951, "work": 0.3881970960906714, "wanted": 0.3881970960906714}}, {"docstring": "A function applied to a `dite` is a `dite` of that function applied to each of the branches.\n", "keywords": {"function applied": 0.010042438510452488, "dite": 0.023392504197764657, "applied": 0.059989639176021896, "function": 0.08205340856523909, "branches": 0.10287228916930506}}, {"docstring": "If `F\u2099` tends locally uniformly to `f`, and `g\u2099` tends to `x`, then `F\u2099 g\u2099` tends to `f x`.\n", "keywords": {"locally uniformly": 0.013527995261974615, "locally": 0.1155310835876123, "uniformly": 0.1155310835876123}}, {"docstring": "The sum of `f i` over `i \u2208 {a}` equals `f a`.\n", "keywords": {"equals": 0.04491197687864554, "sum": 0.15831692877998726}}, {"docstring": " Consider a product of `g i (f i)` over a `finset`.  Suppose `g` is a function such as `pow`, which maps a second argument of `1` to `1`. Then if `f` is replaced by the corresponding multiplicative indicator function, the `finset` may be replaced by a possibly larger `finset` without changing the value of the sum.\n", "keywords": {"finset": 0.04198062377534341, "product": 0.1753759928042282, "function": 0.21637871844908527, "multiplicative indicator function": 0.22566176833645174, "replaced": 0.23263376197706534, "Suppose": 0.27370563484810084, "pow": 0.27370563484810084, "indicator function": 0.2891811400200006, "possibly larger": 0.2967896521893207, "multiplicative indicator": 0.367376157329615, "maps": 0.42483460424450187, "argument": 0.42483460424450187, "larger": 0.4415376443591017, "sum": 0.4415376443591017, "multiplicative": 0.5183361303318786, "indicator": 0.5183361303318786, "possibly": 0.5183361303318786, "changing": 0.5183361303318786}}, {"docstring": " If `m : \u2115` is coprime with `n`, then the minimal polynomial of a primitive `n`-th root of unity `\u03bc` has `\u03bc ^ m` as root.\n", "keywords": {"minimal polynomial": 0.035715520099333646, "root of unity": 0.0710891909196062, "primitive": 0.11369206228658875, "unity": 0.11369206228658875, "root": 0.13453835116331675, "coprime": 0.18569843656348187, "minimal": 0.18569843656348187, "polynomial": 0.18569843656348187}}, {"docstring": " Weighted generalized mean inequality, version for sums over finite sets, with `\u211d\u22650`-valued functions and real exponents.\n", "keywords": {"Weighted generalized": 0.04940384002065631, "generalized mean inequality": 0.04940384002065631, "version for sums": 0.04940384002065631, "finite sets": 0.04940384002065631, "valued functions": 0.04940384002065631, "real exponents": 0.04940384002065631, "sums over finite": 0.09700399286574239, "functions and real": 0.09700399286574239, "Weighted": 0.15831692877998726, "inequality": 0.15831692877998726, "version": 0.15831692877998726, "sets": 0.15831692877998726, "valued": 0.15831692877998726, "exponents": 0.15831692877998726, "generalized": 0.29736558256021506, "sums": 0.29736558256021506, "finite": 0.29736558256021506, "functions": 0.29736558256021506, "real": 0.29736558256021506}}, {"docstring": "The main characterization theorem for additive principal ordinals.\n", "keywords": {"additive principal ordinals": 0.016559150827736194, "main characterization theorem": 0.03339840940482845, "principal ordinals": 0.04940384002065631, "main characterization": 0.09700399286574239, "characterization theorem": 0.09700399286574239, "theorem for additive": 0.09700399286574239, "additive principal": 0.09700399286574239, "ordinals": 0.15831692877998726, "main": 0.29736558256021506, "characterization": 0.29736558256021506, "theorem": 0.29736558256021506, "additive": 0.29736558256021506, "principal": 0.29736558256021506}}, {"docstring": " If `(l, u)` is a Galois connection, then the relation `x \u2264 u (l y)` is a transitive relation. If `l` is a closure operator (`submodule.span`, `subgroup.closure`, ...) and `u` is the coercion to `set`, this reads as \"if `U` is in the closure of `V` and `V` is in the closure of `W` then `U` is in the closure of `W`\".\n", "keywords": {"Galois connection": 0.007547013220703121, "transitive relation": 0.014402568341279866, "relation": 0.05026985747324969, "Galois": 0.06514130414658184, "closure": 0.06529378581626091, "closure operator": 0.08838739966591613, "connection": 0.11498821751808454, "transitive": 0.14121861732034763, "submodule.span": 0.25677541028422207, "subgroup.closure": 0.25677541028422207, "set": 0.25677541028422207, "operator": 0.31093886601576676, "coercion": 0.3635086803260921, "reads": 0.3635086803260921}}, {"docstring": "**Alias** of the forward direction of inv_lt'`.\n", "keywords": {"direction of inv": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "inv": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "Embedding `i : fin n` into `fin (n + 1)` is always about some hole `p`.\n", "keywords": {"Embedding": 0.05706283858652404, "fin": 0.07571113878390312, "hole": 0.11984314898676356}}, {"docstring": " If `f` and `g` are two approximate solutions of the same ODE, then the distance between them can't grow faster than exponentially. This is a simple corollary of Gr\u00f6nwall's inequality, and some people call this Gr\u00f6nwall's inequality too.  This version assumes all inequalities to be true in the whole space.\n", "keywords": {"faster than exponentially": 0.028842219113334244, "approximate solutions": 0.04234451590198387, "grow faster": 0.04234451590198387, "Gr\u00f6nwall inequality": 0.057897820367707714, "ODE": 0.06594390564498799, "Gr\u00f6nwall": 0.12085326255275429, "exponentially": 0.13908713173569395, "approximate": 0.2015547062251367, "solutions": 0.2015547062251367, "distance": 0.2015547062251367, "grow": 0.2015547062251367, "faster": 0.2015547062251367, "inequality": 0.21467881006288766, "corollary of Gr\u00f6nwall": 0.24723666413525158, "call this Gr\u00f6nwall": 0.24723666413525158, "simple corollary": 0.27915536550116243, "people call": 0.27915536550116243, "space": 0.44978981696302306, "version assumes": 0.4589923825313695, "assumes all inequalities": 0.4589923825313695}}, {"docstring": " If `f` is strictly differentiable at `x` with derivative `f'`, then `f` is Lipschitz in a neighborhood of `x`. See also `has_strict_fderiv_at.exists_lipschitz_on_with_of_nnnorm_lt` for a more precise statement.\n", "keywords": {"strictly differentiable": 0.03186031252185994, "derivative": 0.12005345163377214, "Lipschitz": 0.12133274780491966, "precise statement": 0.15843936916307186, "strictly": 0.17571731612679403, "differentiable": 0.17571731612679403, "neighborhood": 0.17571731612679403, "strict": 0.2104440927400966, "fderiv": 0.2104440927400966, "at.exists": 0.2104440927400966, "nnnorm": 0.2104440927400966, "statement": 0.32150010055562234, "precise": 0.42541096826386726}}, {"docstring": "The product of generated \u03c3-algebras is the one generated by rectangles, if both generating sets  are countably spanning.\n", "keywords": {"countably spanning": 0.020744656539556924, "generating sets": 0.03439110359613085, "sets are countably": 0.03439110359613085, "generated \u03c3-algebras": 0.05033870131288873, "generated by rectangles": 0.06831905985192867, "product of generated": 0.11047974441476761, "rectangles": 0.11145728654016383, "spanning": 0.11145728654016383, "generated": 0.1314201551237121, "product": 0.1823394614884183, "\u03c3-algebras": 0.1823394614884183, "generating": 0.1823394614884183, "sets": 0.1823394614884183, "countably": 0.1823394614884183}}, {"docstring": "Compressing a family is idempotent.\n", "keywords": {"Compressing a family": 0.04940384002065631, "family is idempotent": 0.04940384002065631, "Compressing": 0.15831692877998726, "idempotent": 0.15831692877998726, "family": 0.29736558256021506}}, {"docstring": "Shows that the fractional parts of the stream are smaller than one.\n", "keywords": {"fractional parts": 0.02570861714399338, "stream are smaller": 0.02570861714399338, "Shows": 0.09568045026443411, "fractional": 0.15831692877998726, "parts": 0.15831692877998726, "stream": 0.15831692877998726, "smaller": 0.15831692877998726}}, {"docstring": "If `y` is a conjugate of `x` over a field `K`, then it is a conjugate over a subring `R`.\n", "keywords": {"conjugate": 0.0600992383382869, "field": 0.08638782221675846, "subring": 0.08638782221675846}}, {"docstring": "Induction principle for `W`\n", "keywords": {"Induction principle": 0.04940384002065631, "Induction": 0.15831692877998726, "principle": 0.29736558256021506}}, {"docstring": " `weighted_vsub` gives the sum of the results of subtracting any base point, when the sum of the weights is 0.\n", "keywords": {"base point": 0.009011535511097367, "results of subtracting": 0.012578992104256836, "subtracting any base": 0.012578992104256836, "sum": 0.04092200269394482, "weighted": 0.0528063806271324, "vsub": 0.0528063806271324, "point": 0.08012982629475915, "results": 0.11145728654016383, "subtracting": 0.11145728654016383, "base": 0.11145728654016383, "weights": 0.11145728654016383}}, {"docstring": "**Alias** of the forward direction of mdifferentiable_at_iff_differentiable_at`.\n", "keywords": {"direction of mdifferentiable": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "differentiable": 0.04491197687864554, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " The product of two `C^n` functions within a set at a point is `C^n` within this set at this point.\n", "keywords": {"set": 0.11357121248292479, "functions": 0.12363091320521931, "point": 0.14868279128010753, "product": 0.2005079697193566}}, {"docstring": " If one has `nth_le L i hi` in a formula and `h : L = L'`, one can not `rw h` in the formula as `hi` gives `i < L.length` and not `i < L'.length`. The lemma `nth_le_of_eq` can be used to make such a rewrite, with `rw (nth_le_of_eq h)`.\n", "keywords": {"nth": 0.028712642688415405, "L.length": 0.045706335229460555, "formula": 0.10430035225111471, "length": 0.13232086593866088, "lemma": 0.34625211985745685, "rewrite": 0.34625211985745685, "make": 0.4326833418795105}}, {"docstring": "Note that most of the lemmas about powers of two refer to it as `sq`.\n", "keywords": {"lemmas about powers": 0.02570861714399338, "Note": 0.09568045026443411, "lemmas": 0.15831692877998726, "powers": 0.15831692877998726, "refer": 0.15831692877998726}}, {"docstring": "Closure of a subsemigroup `S` equals `S`.\n", "keywords": {"equals": 0.04491197687864554, "Closure": 0.09568045026443411, "subsemigroup": 0.09568045026443411}}, {"docstring": "If `f \u2264 g` and `g` is monotone, then `f^[n] \u2264 g^[n]`.\n", "keywords": {"monotone": 0.0771485953923296}}, {"docstring": "A countably generated filter admits a basis formed by an antitone sequence of sets.\n", "keywords": {"countably generated filter": 0.0042542192213185686, "generated filter admits": 0.0042542192213185686, "sequence of sets": 0.015380821171891606, "countably generated": 0.02570861714399338, "generated filter": 0.02570861714399338, "filter admits": 0.02570861714399338, "admits a basis": 0.02570861714399338, "basis formed": 0.02570861714399338, "antitone sequence": 0.02570861714399338, "sets": 0.09568045026443411, "countably": 0.15831692877998726, "generated": 0.15831692877998726, "filter": 0.15831692877998726, "admits": 0.15831692877998726, "basis": 0.15831692877998726, "formed": 0.15831692877998726, "antitone": 0.15831692877998726, "sequence": 0.15831692877998726}}, {"docstring": " In the characteristic zero case, the weights in the centroid sum to 1 if the number of points is not zero.\n", "keywords": {"characteristic zero case": 0.0065920978564317735, "centroid sum": 0.009239332327148086, "number of points": 0.009239332327148086, "case": 0.06844581806138879, "characteristic": 0.09568045026443411, "weights": 0.09568045026443411, "centroid": 0.09568045026443411, "sum": 0.09568045026443411, "number": 0.09568045026443411, "points": 0.09568045026443411}}, {"docstring": " A prime that does not divide the cardinality of a finite commutative ring `R` is a unit in `R`.\n", "keywords": {"finite commutative ring": 0.0010606143890052174, "commutative ring": 0.00899321792126428, "divide the cardinality": 0.013527995261974615, "finite commutative": 0.013527995261974615, "ring": 0.0771485953923296, "prime": 0.1155310835876123, "divide": 0.1155310835876123, "cardinality": 0.1155310835876123, "finite": 0.1155310835876123, "commutative": 0.1155310835876123, "unit": 0.1155310835876123}}, {"docstring": "A variant of `matrix.det_units_conj'`.\n", "keywords": {"matrix.det": 0.04491197687864554, "units": 0.04491197687864554, "conj": 0.04491197687864554, "variant": 0.29736558256021506}}, {"docstring": " The sum of two upper semicontinuous functions is upper semicontinuous. Formulated with `[has_continuous_add]`. The primed version of the lemma uses an explicit continuity assumption on addition, for application to `ereal`.\n", "keywords": {"upper semicontinuous functions": 0.007327296516767814, "upper semicontinuous": 0.016851204808897166, "semicontinuous functions": 0.03821554584844725, "functions is upper": 0.08667762295794612, "upper": 0.09028232117950413, "semicontinuous": 0.09028232117950413, "sum": 0.2038542769622493, "functions": 0.2038542769622493, "continuous": 0.2425057621221154, "add": 0.2425057621221154, "ereal": 0.31807004650910337, "assumption on addition": 0.3438068115293896, "Formulated": 0.36270881646612724, "explicit continuity assumption": 0.44505054844584063, "addition": 0.4533135999375753, "primed version": 0.46742777496856974, "explicit continuity": 0.46742777496856974, "continuity assumption": 0.46742777496856974, "primed": 0.5643894539005718, "version": 0.5643894539005718}}, {"docstring": "The Cesaro average of a converging sequence converges to the same limit.\n", "keywords": {"converging sequence converges": 0.0042542192213185686, "Cesaro average": 0.013797198203993007, "converging sequence": 0.02570861714399338, "sequence converges": 0.02570861714399338, "Cesaro": 0.08596317751626563, "limit": 0.09568045026443411, "average": 0.15831692877998726, "converging": 0.15831692877998726, "sequence": 0.15831692877998726, "converges": 0.15831692877998726}}, {"docstring": " Viewing a module as an affine space modelled on itself, we can characterise affine independence in terms of linear combinations.\n", "keywords": {"affine space modelled": 0.009389984584069899, "characterise affine independence": 0.009389984584069899, "Viewing a module": 0.020171377334626643, "linear combinations": 0.020171377334626643, "space modelled": 0.03346752176983843, "independence in terms": 0.03346752176983843, "terms of linear": 0.03346752176983843, "affine space": 0.04877831388921351, "characterise affine": 0.04877831388921351, "affine independence": 0.04877831388921351, "Viewing": 0.10987504304330521, "combinations": 0.10987504304330521, "affine": 0.12922594861139264, "module": 0.17995476918065306, "space": 0.17995476918065306, "modelled": 0.17995476918065306, "characterise": 0.17995476918065306, "independence": 0.17995476918065306, "terms": 0.17995476918065306, "linear": 0.17995476918065306}}, {"docstring": " For a separable polynomial, its Galois group has cardinality equal to the dimension of its splitting field over `F`.\n", "keywords": {"Galois group": 0.013797198203993007, "separable polynomial": 0.015380821171891606, "group has cardinality": 0.02570861714399338, "cardinality equal": 0.02570861714399338, "splitting field": 0.02570861714399338, "Galois": 0.08596317751626563, "polynomial": 0.09568045026443411, "separable": 0.15831692877998726, "group": 0.15831692877998726, "cardinality": 0.15831692877998726, "equal": 0.15831692877998726, "dimension": 0.15831692877998726, "splitting": 0.15831692877998726, "field": 0.15831692877998726}}, {"docstring": "**Alias** of left.inv_le_one_iff`.\n", "keywords": {"Alias": 0.030396371632413578, "iff": 0.04491197687864554, "left.inv": 0.15831692877998726}}, {"docstring": "**Alias** of the reverse direction of approximates_linear_on.approximates_linear_on_iff_lipschitz_on_with`.\n", "keywords": {"linear": 0.019053917256533312, "direction of approximates": 0.020744656539556924, "Alias": 0.03381806651421549, "reverse direction": 0.03439110359613085, "on.approximates": 0.0528063806271324, "iff": 0.0528063806271324, "lipschitz": 0.0528063806271324, "approximates": 0.11145728654016383, "reverse": 0.1823394614884183, "direction": 0.1823394614884183}}, {"docstring": "If the factorization of `n` contains just one number `p` then `n` is a power of `p`\n", "keywords": {"number": 0.09568045026443411, "factorization": 0.15831692877998726, "power": 0.15831692877998726}}, {"docstring": "Each of the sums in this lemma is the cardinality of the set integer points in each of the  two triangles formed by the diagonal of the rectangle `(0, p/2) \u00d7 (0, q/2)`. Adding them  gives the number of points in the rectangle.\n", "keywords": {"set integer points": 0.002101134258510246, "set integer": 0.01301235252832796, "triangles formed": 0.01301235252832796, "integer points": 0.018037837858687178, "rectangle": 0.05517786324292697, "points": 0.07816638428883331, "number of points": 0.10927174019571673, "sums": 0.11333669386941954, "lemma": 0.11333669386941954, "cardinality": 0.11333669386941954, "set": 0.11333669386941954, "integer": 0.11333669386941954, "triangles": 0.11333669386941954, "formed": 0.11333669386941954, "diagonal": 0.11333669386941954, "Adding": 0.26448512406966945, "number": 0.3074506896868104}}, {"docstring": "A semiring homomorphism is an additive monoid homomorphism.\n", "keywords": {"additive monoid homomorphism": 0.011587819648888317, "additive monoid": 0.037831312533597124, "semiring homomorphism": 0.0562460611896591, "monoid homomorphism": 0.0562460611896591, "homomorphism": 0.13945519496053638, "semiring": 0.19092478917347616, "additive": 0.19092478917347616, "monoid": 0.19092478917347616}}, {"docstring": "The edist is antitone with respect to inclusion.\n", "keywords": {"respect to inclusion": 0.04940384002065631, "edist is antitone": 0.09700399286574239, "antitone with respect": 0.09700399286574239, "inclusion": 0.15831692877998726, "edist": 0.29736558256021506, "antitone": 0.29736558256021506, "respect": 0.29736558256021506}}, {"docstring": "**Alias** of the reverse direction of antilipschitz_with_iff_le_mul_dist`.\n", "keywords": {"direction of antilipschitz": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "mul": 0.04491197687864554, "dist": 0.04491197687864554, "antilipschitz": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "The geometric sequence `q^n` is a solution of `E` iff  `q` is a root of `E`'s characteristic polynomial.\n", "keywords": {"geometric sequence": 0.015380821171891606, "characteristic polynomial": 0.015380821171891606, "iff": 0.04491197687864554, "sequence": 0.09568045026443411, "polynomial": 0.09568045026443411, "geometric": 0.15831692877998726, "solution": 0.15831692877998726, "root": 0.15831692877998726, "characteristic": 0.15831692877998726}}, {"docstring": " Taking the product of an indicator function over a possibly larger `finset` is the same as taking the original function over the original `finset`.\n", "keywords": {"possibly larger": 0.011154056927717123, "Taking the product": 0.015808981659215463, "indicator function": 0.015808981659215463, "taking the original": 0.016101511150119117, "original function": 0.016101511150119117, "finset": 0.02245598843932277, "Taking": 0.06294116458067843, "function": 0.06294116458067843, "original": 0.06294116458067843, "larger": 0.08922538916412363, "product": 0.12363091320521931, "indicator": 0.12363091320521931, "possibly": 0.12363091320521931}}, {"docstring": "**Alias** of the reverse direction of finset.Icc_eq_empty_iff`.\n", "keywords": {"direction of finset.Icc": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "empty": 0.04491197687864554, "iff": 0.04491197687864554, "finset.Icc": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "less-than is well-founded\n", "keywords": {"less-than is well-founded": 0.02570861714399338, "less-than": 0.15831692877998726, "well-founded": 0.15831692877998726}}, {"docstring": "**Alias** of the reverse direction of lipschitz_with_iff_dist_le_mul`.\n", "keywords": {"direction of lipschitz": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "dist": 0.04491197687864554, "mul": 0.04491197687864554, "lipschitz": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "A minimal polynomial is monic.\n", "keywords": {"polynomial is monic": 0.04940384002065631, "minimal polynomial": 0.09700399286574239, "monic": 0.15831692877998726, "minimal": 0.29736558256021506, "polynomial": 0.29736558256021506}}, {"docstring": "A list with sum not zero must have positive length.\n", "keywords": {"positive length": 0.04940384002065631, "list with sum": 0.09700399286574239, "length": 0.15831692877998726, "list": 0.29736558256021506, "sum": 0.29736558256021506, "positive": 0.29736558256021506}}, {"docstring": "**Alias** of left.one_lt_mul`.\n", "keywords": {"Alias": 0.030396371632413578, "mul": 0.04491197687864554, "left.one": 0.15831692877998726}}, {"docstring": " If `p ^ k` is a prime power, then `cyclotomic (p ^ (n + 1)) R = \u2211 i in range p, (X ^ (p ^ n)) ^ i`.\n", "keywords": {"prime power": 0.0065920978564317735, "cyclotomic": 0.04491197687864554, "power": 0.06844581806138879, "prime": 0.09568045026443411, "range": 0.09568045026443411}}, {"docstring": "The `val : \u2115` produced by a successful parse of a `cb : char_buffer` is the numerical value represented by the string of decimal digits (possibly padded with 0s on the left) starting from the parsing position `n` and ending at position `n'`, where `n < n'`. The number of characters parsed in is necessarily `n' - n`. Additionally, all of the characters in the `cb` starting at position `n` (inclusive) up to position `n'` (exclusive) are \"numeric\", in that they are between `'0'` and `'9'` inclusive. Such a `char_buffer` would produce the `\u2115` value encoded by its decimal characters.\n", "keywords": {"possibly padded": 0.022545188127681536, "successful parse": 0.026623002626882965, "numerical value represented": 0.026623002626882965, "parsing position": 0.032080406464625406, "position": 0.0482551106250605, "decimal digits": 0.05302703192816759, "ending at position": 0.0739603683340477, "char": 0.10902006687703134, "buffer": 0.10902006687703134, "val": 0.11386244300626969, "starting": 0.12499653132158181, "characters": 0.12526231516775896, "string of decimal": 0.13150760158259975, "produced": 0.13691414925695136, "digits": 0.13691414925695136, "possibly": 0.13691414925695136, "left": 0.13691414925695136, "inclusive": 0.1408156626595096, "decimal characters": 0.16038050636331402, "successful": 0.16103601763648162}}, {"docstring": "The minimum degree in the graph is at most the degree of any particular vertex.\n", "keywords": {"minimum degree": 0.027430531955772185, "degree": 0.094808423351325, "vertex": 0.09492398510093508, "minimum": 0.1408007092310104, "graph": 0.1408007092310104}}, {"docstring": "Lemma to normalize a vector in a normed space `E` over either `\u2102` or `\u211d` to length `r`.\n", "keywords": {"Lemma to normalize": 0.015380821171891606, "normed space": 0.015380821171891606, "normalize a vector": 0.02570861714399338, "Lemma": 0.09568045026443411, "space": 0.09568045026443411, "length": 0.09568045026443411, "normalize": 0.15831692877998726, "vector": 0.15831692877998726, "normed": 0.15831692877998726}}, {"docstring": " Continuity at a point of the result of dividing two functions continuous at that point, where the denominator is nonzero.\n", "keywords": {"denominator is nonzero": 0.020744656539556924, "result of dividing": 0.03439110359613085, "dividing two functions": 0.03439110359613085, "functions continuous": 0.03439110359613085, "Continuity": 0.11145728654016383, "nonzero": 0.11145728654016383, "point": 0.1314201551237121, "result": 0.1823394614884183, "dividing": 0.1823394614884183, "functions": 0.1823394614884183, "continuous": 0.1823394614884183, "denominator": 0.1823394614884183}}, {"docstring": "The quotient valuation on R/J has support supp(v)/J if J \u2286 supp v.\n", "keywords": {"quotient valuation": 0.020225813225353943, "support supp": 0.027430531955772185, "supp": 0.094808423351325, "quotient": 0.1408007092310104, "valuation": 0.1408007092310104, "support": 0.1408007092310104}}, {"docstring": " If a vector space has a finite basis, then its dimension is equal to the cardinality of the basis.\n", "keywords": {"finite basis": 0.026132029443681492, "vector space": 0.034987023778306175, "dimension is equal": 0.034987023778306175, "basis": 0.069255433448279, "vector": 0.18385948854246909, "space": 0.18385948854246909, "finite": 0.18385948854246909, "dimension": 0.18385948854246909, "equal": 0.18385948854246909, "cardinality": 0.18385948854246909}}, {"docstring": "The Hausdorff edistance between a set and its closure vanishes\n", "keywords": {"Hausdorff edistance": 0.04498862876540802, "closure vanishes": 0.04940384002065631, "Hausdorff": 0.1447773057422032, "vanishes": 0.15831692877998726, "edistance": 0.29736558256021506, "set": 0.29736558256021506, "closure": 0.29736558256021506}}, {"docstring": "For `n \u2264 m`, `(n, m)` is in the reflexive-transitive closure of `~` if `i ~ succ i`  for all `i` between `n` and `m`.\n", "keywords": {"reflexive-transitive closure": 0.013527995261974615, "succ": 0.0771485953923296, "reflexive-transitive": 0.1155310835876123, "closure": 0.1155310835876123}}, {"docstring": "**Fermat's Theorem**: the derivative of a function at a local maximum equals zero.\n", "keywords": {"Fermat Theorem": 0.0032610119837787367, "local maximum equals": 0.0042542192213185686, "local maximum": 0.02570861714399338, "maximum equals": 0.02570861714399338, "Fermat": 0.057012387690331526, "Theorem": 0.057012387690331526, "derivative": 0.15831692877998726, "function": 0.15831692877998726, "local": 0.15831692877998726, "maximum": 0.15831692877998726, "equals": 0.15831692877998726}}, {"docstring": "The degree of a product of polynomials is equal to the sum of the degrees, provided that the product of leading coefficients is nonzero.  See `polynomial.nat_degree_prod` (without the `'`) for a version for integral domains, where this condition is automatically satisfied.\n", "keywords": {"coefficients is nonzero": 0.01619402415696619, "product of polynomials": 0.018399075122250787, "product of leading": 0.018399075122250787, "polynomials is equal": 0.021303862058652798, "leading coefficients": 0.021303862058652798, "product": 0.06254553577451509, "provided": 0.11033834422946266, "nonzero": 0.11033834422946266, "degree": 0.11332173847576861, "integral domains": 0.12520213567570732, "automatically satisfied": 0.12520213567570732, "polynomials": 0.14442809521453445, "equal": 0.14442809521453445, "sum": 0.14442809521453445, "leading": 0.14442809521453445, "coefficients": 0.14442809521453445, "version for integral": 0.15821324645619436, "condition is automatically": 0.15821324645619436, "degrees": 0.22664347695153722, "polynomial.nat": 0.23025086631961733}}, {"docstring": "The point in a simplex constructed with `mk_of_point`.\n", "keywords": {"simplex constructed": 0.039481144315219374, "point": 0.14323823713631006, "simplex": 0.19488865479360015, "constructed": 0.19488865479360015}}, {"docstring": "The (pre)image under `inv` of `Ioo 0 a` is `Ioi a\u207b\u00b9`.\n", "keywords": {"Ioo": 0.030396371632413578, "pre": 0.04491197687864554, "inv": 0.04491197687864554, "Ioi": 0.057012387690331526, "image": 0.09568045026443411}}, {"docstring": "Two equivalent local equivs are equal when the source and target are univ\n", "keywords": {"equivalent local equivs": 0.0042542192213185686, "target are univ": 0.015380821171891606, "equivalent local": 0.02570861714399338, "local equivs": 0.02570861714399338, "equivs are equal": 0.02570861714399338, "source and target": 0.02570861714399338, "univ": 0.09568045026443411, "equivalent": 0.15831692877998726, "local": 0.15831692877998726, "equivs": 0.15831692877998726, "equal": 0.15831692877998726, "source": 0.15831692877998726, "target": 0.15831692877998726}}, {"docstring": " If `f` is strictly antitone both on `(-\u221e, a]` and `[a, \u221e)`, then it is strictly antitone on the whole line.\n", "keywords": {"strictly antitone": 0.01970251668748186, "strictly": 0.08136984231491272, "antitone": 0.11647786950765905, "line": 0.12600799873373572}}, {"docstring": "Duplicate of `eq.subset'`, which currently has elaboration problems.\n", "keywords": {"eq.subset": 0.04491197687864554, "elaboration problems": 0.04940384002065631, "Duplicate": 0.15831692877998726, "problems": 0.15831692877998726, "elaboration": 0.29736558256021506}}, {"docstring": "The **Chicken Mcnugget theorem** stating that the Frobenius number  of positive numbers `m` and `n` is `m * n - m - n`.\n", "keywords": {"Chicken Mcnugget theorem": 0.0003536527296918688, "Chicken Mcnugget": 0.0038440155625235587, "Mcnugget theorem": 0.006652513650129948, "Frobenius number": 0.013209589618223988, "positive numbers": 0.024893945799064354, "Chicken": 0.05273629667083652, "number of positive": 0.058671654477810475, "Mcnugget": 0.07261214632111582, "Frobenius": 0.07261214632111582, "theorem": 0.09101163530720666, "stating": 0.09101163530720666, "positive": 0.135280142484453, "number": 0.17954807775654547, "numbers": 0.17954807775654547}}, {"docstring": "Characterize the equality of points by the vanishing of their extended distance\n", "keywords": {"Characterize the equality": 0.015380821171891606, "extended distance": 0.015380821171891606, "equality of points": 0.02570861714399338, "Characterize": 0.09568045026443411, "distance": 0.09568045026443411, "equality": 0.15831692877998726, "points": 0.15831692877998726, "vanishing": 0.15831692877998726, "extended": 0.15831692877998726}}, {"docstring": "If `s` and `t` are two fundamental domains of the same action, then their measures are equal.\n", "keywords": {"measures are equal": 0.015380821171891606, "fundamental domains": 0.02570861714399338, "action": 0.09568045026443411, "equal": 0.09568045026443411, "fundamental": 0.15831692877998726, "domains": 0.15831692877998726, "measures": 0.15831692877998726}}, {"docstring": "This is a special case of `tsub_zero`, which should be used instead of this.  This is needed to prove `has_ordered_sub (multiset \u03b1)`.\n", "keywords": {"special case": 0.02249651976012989, "tsub": 0.05899937629682816, "needed to prove": 0.11755105063023073, "special": 0.14832923246533666, "case": 0.14832923246533666, "ordered": 0.17881754828257995, "prove": 0.2790829227183407, "multiset": 0.2790829227183407, "needed": 0.37689977775222827}}, {"docstring": " If `p` is a prime such that `\u00ac p \u2223 n`, then `expand R p (cyclotomic n R) = (cyclotomic (n * p) R) * (cyclotomic n R)`.\n", "keywords": {"cyclotomic": 0.02546535155403369, "expand": 0.09603500085846951, "prime": 0.13268379438099134}}, {"docstring": "**Alias** of the forward direction of convex_iff_pointwise_add_subset`.\n", "keywords": {"direction of convex": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "pointwise": 0.04491197687864554, "add": 0.04491197687864554, "subset": 0.04491197687864554, "convex": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "Transferring from field to is_field\n", "keywords": {"Transferring from field": 0.08414606766344489, "Transferring": 0.12363091320521931, "field": 0.14868279128010753}}, {"docstring": " This lemma matches more generally than `finset.nat.prod_antidiagonal_eq_prod_range_succ_mk` when using `rw \u2190`.\n", "keywords": {"antidiagonal": 0.04491197687864554, "prod": 0.04491197687864554, "range": 0.04491197687864554, "succ": 0.04491197687864554, "lemma matches": 0.09700399286574239, "matches more generally": 0.09700399286574239, "lemma": 0.29736558256021506, "matches": 0.29736558256021506, "generally": 0.29736558256021506}}, {"docstring": "Additive congruence relations are symmetric.\n", "keywords": {"Additive congruence relations": 0.01655915082773619, "Additive congruence": 0.04940384002065631, "relations are symmetric": 0.04940384002065631, "congruence relations": 0.09700399286574239, "Additive": 0.15831692877998726, "symmetric": 0.15831692877998726, "congruence": 0.29736558256021506, "relations": 0.29736558256021506}}, {"docstring": " A variant of `affine_basis.affine_combination_coord_eq_self` for the special case when the affine space is a module so we can talk about linear combinations.\n", "keywords": {"linear combinations": 0.027214376676528557, "special case": 0.036145734466354454, "talk about linear": 0.036145734466354454, "affine space": 0.05333290556871415, "basis.affine": 0.05430009520648986, "coord": 0.05430009520648986, "affine": 0.13554437277555162, "combination": 0.14184668718332824, "variant": 0.18677472480820503, "special": 0.18677472480820503, "case": 0.18677472480820503, "space": 0.18677472480820503, "module": 0.18677472480820503, "talk": 0.18677472480820503, "linear": 0.18677472480820503}}, {"docstring": "A random variable that `has_pdf` is quasi-measure preserving.\n", "keywords": {"pdf": 0.04491197687864554, "quasi-measure preserving": 0.04940384002065631, "random variable": 0.09700399286574239, "preserving": 0.15831692877998726, "random": 0.29736558256021506, "variable": 0.29736558256021506, "quasi-measure": 0.29736558256021506}}, {"docstring": " If `f : M \u2192 N` is a subadditive function, `f (x + y) \u2264 f x + f y`, `f 0 = 0`, and `g i`, `i \u2208 s`, is a finite family of elements of `M`, then `f (\u2211 i in s, g i) \u2264 \u2211 i in s, f (g i)`.\n", "keywords": {"subadditive function": 0.004191105078215276, "finite family": 0.005229473243173595, "family of elements": 0.005229473243173595, "function": 0.057864980816844346, "subadditive": 0.07212675038589919, "finite": 0.07212675038589919, "family": 0.07212675038589919, "elements": 0.07212675038589919}}, {"docstring": "Note this is a special case of `(finset.image_preimage f univ _).symm`.\n", "keywords": {"preimage f univ": 0.02570861714399338, "finset.image": 0.04491197687864554, "symm": 0.04491197687864554, "special case": 0.09700399286574239, "Note": 0.15831692877998726, "preimage": 0.15831692877998726, "univ": 0.15831692877998726, "special": 0.29736558256021506, "case": 0.29736558256021506}}, {"docstring": " The order of a formal power series is at least `n` if the `i`th coefficient is `0` for all `i < n`.\n", "keywords": {"formal power series": 0.0042542192213185686, "formal power": 0.02570861714399338, "power series": 0.02570861714399338, "order": 0.15831692877998726, "formal": 0.15831692877998726, "power": 0.15831692877998726, "series": 0.15831692877998726, "coefficient": 0.15831692877998726}}, {"docstring": " A subspace is complement to its orthogonal complement with respect to some reflexive bilinear form if that bilinear form restricted on to the subspace is nondegenerate.\n", "keywords": {"reflexive bilinear form": 0.0038367786168695913, "bilinear form restricted": 0.0038367786168695913, "bilinear form": 0.012525534843071673, "subspace is nondegenerate": 0.015782041889550694, "reflexive bilinear": 0.02353204081265201, "form restricted": 0.02353204081265201, "orthogonal complement": 0.03052534171702672, "complement with respect": 0.07054804767593278, "subspace is complement": 0.07477315412295657, "subspace": 0.0781646504872054, "bilinear": 0.0781646504872054, "form": 0.0781646504872054, "nondegenerate": 0.09938532796588936, "complement": 0.10070571056908109, "orthogonal": 0.1470678571383035, "respect": 0.1470678571383035, "reflexive": 0.1470678571383035, "restricted": 0.1470678571383035}}, {"docstring": "The nonsingular inverse is the same as the general `ring.inverse`.\n", "keywords": {"nonsingular inverse": 0.013527995261974615, "ring.inverse": 0.04491197687864554, "general": 0.0771485953923296, "nonsingular": 0.1155310835876123, "inverse": 0.1155310835876123}}, {"docstring": "**Alias** of dimH_countable`.\n", "keywords": {"Alias": 0.030396371632413578, "countable": 0.04491197687864554, "dimH": 0.15831692877998726}}, {"docstring": " Every element is less than its closure. This property is sometimes referred to as extensivity or inflationarity.\n", "keywords": {"closure": 0.12363091320521931, "extensivity or inflationarity": 0.18075564686791562, "element": 0.2005079697193566, "inflationarity": 0.32883716426354986, "property": 0.46553351027698087, "referred": 0.46553351027698087, "extensivity": 0.46553351027698087}}, {"docstring": " A 'dite' producing a `Pi` type `\u03a0 a, \u03c3 a`, applied to a value `a : \u03b1` is a `dite` that applies either branch to `a`.\n", "keywords": {"applies either branch": 0.0067353679932798255, "dite": 0.019648131954263418, "type": 0.05393656033701752, "producing": 0.06729926935255018, "applied": 0.06729926935255018, "applies": 0.08179429269966654, "branch": 0.08179429269966654}}, {"docstring": "By definition, if `x` is not invertible then `inverse x = 0`.\n", "keywords": {"definition": 0.09568045026443411, "inverse": 0.09568045026443411, "invertible": 0.15831692877998726}}, {"docstring": "`(x + y) * z` is equivalent to `x * z + y * z.`\n", "keywords": {"equivalent": 0.1155310835876123}}, {"docstring": "**Alias** of not_ssubset_of_subset`.\n", "keywords": {"Alias": 0.030396371632413578, "ssubset": 0.04491197687864554, "subset": 0.04491197687864554}}, {"docstring": "A family with at most one point is convex independent.\n", "keywords": {"convex independent": 0.04940384002065631, "point is convex": 0.09700399286574239, "independent": 0.15831692877998726, "family": 0.29736558256021506, "point": 0.29736558256021506, "convex": 0.29736558256021506}}, {"docstring": " With `h : x \u226b y \u226b z = x` (with universal quantifiers tolerated), `reassoc_of h : \u2200 {X'} (f : W \u27f6 X'), x \u226b y \u226b z \u226b f = x \u226b f`.  The type and proof of `reassoc_of h` is generated by `tactic.derive_reassoc_proof` which make `reassoc_of` meta-programming adjacent. It is not called as a tactic but as an expression. The goal is to avoid creating assumptions that are dismissed after one use:  ```lean example (X Y Z W : C) (x : X \u27f6 Y) (y : Y \u27f6 Z) (z z' : Z \u27f6 W) (w : X \u27f6 Z)   (h : x \u226b y = w)   (h' : y \u226b z = y \u226b z') :   x \u226b y \u226b z = w \u226b z' := begin   rw [h',reassoc_of h], end ```\n", "keywords": {"universal quantifiers tolerated": 0.0030776415710569204, "reassoc": 0.01874725438979211, "quantifiers tolerated": 0.019910483860150527, "universal quantifiers": 0.02267914813820625, "tolerated": 0.13109196998907566, "meta-programming adjacent": 0.13406294263066343, "universal": 0.14891679077077424, "quantifiers": 0.14891679077077424, "proof": 0.1618517912069751, "type and proof": 0.2750371475969748, "avoid creating assumptions": 0.3001997105109209, "tactic.derive": 0.30866116287530393, "make": 0.3438236878014223, "meta-programming": 0.3438236878014223, "adjacent": 0.3438236878014223, "avoid creating": 0.3713747306152062, "creating assumptions": 0.3713747306152062, "type": 0.3779909035272948, "generated": 0.3779909035272948, "expression": 0.4329155926795499}}, {"docstring": " The set of right differentiability points of a function taking values in a complete space is Borel-measurable.\n", "keywords": {"space is Borel-measurable": 0.009108237309423345, "differentiability points": 0.02570861714399338, "function taking": 0.02570861714399338, "complete space": 0.02570861714399338, "Borel-measurable": 0.057012387690331526, "set": 0.15831692877998726, "differentiability": 0.15831692877998726, "points": 0.15831692877998726, "function": 0.15831692877998726, "taking": 0.15831692877998726, "complete": 0.15831692877998726, "space": 0.15831692877998726}}, {"docstring": "**Alias** of the reverse direction of is_square_iff_exists_sq`.\n", "keywords": {"reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "square": 0.04491197687864554, "iff": 0.04491197687864554, "exists": 0.04491197687864554, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "In a preadditive category, if the coproduct over `f : J \u2192 C` exists,    then the biproduct over `f` exists.\n", "keywords": {"exists": 0.02006098734604785, "preadditive category": 0.022138323509052035, "category": 0.11521656054299435, "preadditive": 0.1879836817695587, "coproduct": 0.1879836817695587, "biproduct": 0.1879836817695587}}, {"docstring": " The pigeonhole principle for finitely many pigeons of different weights, non-strict inequality version: there is a pigeonhole with the total weight of pigeons in it greater than or equal to `b` provided that the total number of pigeonholes times `b` is less than or equal to the total weight of all pigeons.\n", "keywords": {"non-strict inequality version": 0.0012378664336869577, "total weight": 0.007791042937490355, "non-strict inequality": 0.01272759276006767, "inequality version": 0.01272759276006767, "total number": 0.015606833625438346, "principle for finitely": 0.017675631119816727, "pigeonholes times": 0.020654483192976903, "pigeonhole principle": 0.02877176796279679, "total": 0.03886736997496381, "equal": 0.05291050545029078, "weight": 0.06579216186099208, "pigeons": 0.07073648571183865, "finitely many pigeons": 0.09032348134583623, "number of pigeonholes": 0.09032348134583623, "non-strict": 0.09536101189860946, "version": 0.09536101189860946, "provided": 0.09536101189860946, "times": 0.09536101189860946, "pigeonhole": 0.10610472856775795, "weight of pigeons": 0.112828197980024}}, {"docstring": "Two points are cospherical.\n", "keywords": {"points are cospherical": 0.04940384002065631, "cospherical": 0.15831692877998726, "points": 0.29736558256021506}}, {"docstring": "The opposite of the golden ratio is the inverse of its conjugate.\n", "keywords": {"golden ratio": 0.013527995261974615, "conjugate": 0.0771485953923296, "opposite": 0.1155310835876123, "golden": 0.1155310835876123, "ratio": 0.1155310835876123, "inverse": 0.1155310835876123}}, {"docstring": " The open neighborhoods of `a` are a basis for the neighborhood filter. See `nhds_basis_opens` for a variant using open sets around `a` instead.\n", "keywords": {"neighborhood filter": 0.030154535230851914, "open neighborhoods": 0.0890178578113157, "filter": 0.13584333961815942, "basis": 0.16264852034596552, "open": 0.1896706931922072, "open sets": 0.20043040897898032, "neighborhoods": 0.21548245279883127, "nhds": 0.25893692362763004, "opens": 0.3793413863844144, "variant": 0.4401456329741044, "sets": 0.4401456329741044, "variant using open": 0.46272691836113256}}, {"docstring": "The `add_submonoid` generated by a set is contained in any `add_submonoid` that contains the set.\n", "keywords": {"add": 0.022926948811930963, "submonoid": 0.022926948811930963, "generated": 0.12520420549175446, "set is contained": 0.13907487570767346, "set": 0.15096417332079662, "contained": 0.20283314940424746}}, {"docstring": " If the index type has cardinality equal to the finite dimension, any two orientations are equal or negations.\n", "keywords": {"finite dimension": 0.020744656539556924, "index type": 0.03439110359613085, "type has cardinality": 0.03439110359613085, "cardinality equal": 0.05033870131288873, "equal or negations": 0.06831905985192867, "orientations are equal": 0.11047974441476761, "dimension": 0.11145728654016383, "negations": 0.11145728654016383, "equal": 0.1314201551237121, "index": 0.1823394614884183, "type": 0.1823394614884183, "cardinality": 0.1823394614884183, "finite": 0.1823394614884183, "orientations": 0.1823394614884183}}, {"docstring": "**Alias** of the reverse direction of set.not_disjoint_iff_nonempty_inter`.\n", "keywords": {"direction of set.not": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "disjoint": 0.04491197687864554, "iff": 0.04491197687864554, "nonempty": 0.04491197687864554, "inter": 0.04491197687864554, "set.not": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " If `\u03b1` is a preorder with no maximal elements, then there exists a strictly antitone function `\u2115 \u2192 \u03b1` with any prescribed value of `f 0`.\n", "keywords": {"strictly antitone function": 0.0025258761156662004, "maximal elements": 0.015380821171891606, "antitone function": 0.015380821171891606, "exists a strictly": 0.02570861714399338, "strictly antitone": 0.02570861714399338, "elements": 0.09568045026443411, "function": 0.09568045026443411, "preorder": 0.15831692877998726, "maximal": 0.15831692877998726, "exists": 0.15831692877998726, "strictly": 0.15831692877998726, "antitone": 0.15831692877998726, "prescribed": 0.15831692877998726}}, {"docstring": "**Alias** of left.one_lt_inv_iff`.\n", "keywords": {"Alias": 0.030396371632413578, "inv": 0.04491197687864554, "iff": 0.04491197687864554, "left.one": 0.15831692877998726}}, {"docstring": "If `A` is subterminal, the unique morphism from it to a terminal object is a monomorphism. The converse of `is_subterminal_of_mono_is_terminal_from`.\n", "keywords": {"unique morphism": 0.02696995093210751, "terminal object": 0.0496240139981667, "subterminal": 0.09405718590660436, "monomorphism": 0.11840068407252047, "terminal": 0.14587031701600586, "unique": 0.16205454282434614, "morphism": 0.16205454282434614, "object": 0.16205454282434614, "mono": 0.22989350183706597, "converse": 0.40179717860981823}}, {"docstring": " **Equality case of the Rearrangement Inequality**: Pointwise multiplication of `f` and `g`, which antivary together, is unchanged by a permutation if and only if `f` and `g \u2218 \u03c3` antivary together. Stated by permuting the entries of `g`.\n", "keywords": {"Rearrangement Inequality": 0.005072352361797871, "Equality case": 0.01078166215070159, "Pointwise multiplication": 0.01078166215070159, "Equality": 0.06111024253988877, "Inequality": 0.06111024253988877, "Pointwise": 0.06111024253988877, "antivary": 0.08014015496625508, "Rearrangement": 0.08258441204389066, "Stated by permuting": 0.1565870030412261, "case": 0.17454779110930135, "multiplication": 0.17454779110930135, "unchanged": 0.17454779110930135, "permutation": 0.17454779110930135, "permuting the entries": 0.21846569551000553, "Stated": 0.3197366584666406, "permuting": 0.42343326428770406, "entries": 0.42343326428770406}}, {"docstring": "Product of a list of elements in a submonoid is in the submonoid.\n", "keywords": {"list of elements": 0.037831312533597124, "Product": 0.11718348279991213, "submonoid": 0.13945519496053638, "list": 0.19092478917347616, "elements": 0.19092478917347616}}, {"docstring": "**Alias** of the reverse direction of finset.coe_nonempty`.\n", "keywords": {"direction of finset.coe": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "nonempty": 0.04491197687864554, "finset.coe": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "`x * y * z` is equivalent to `x * (y * z).`\n", "keywords": {"equivalent": 0.15831692877998726}}, {"docstring": " In a pseudoemetric space, Cauchy sequences are characterized by the fact that, eventually, the pseudoedistance between its elements is arbitrarily small\n", "keywords": {"Cauchy sequences": 0.009108237309423345, "pseudoemetric space": 0.015380821171891606, "arbitrarily small": 0.015380821171891606, "sequences are characterized": 0.02570861714399338, "elements is arbitrarily": 0.02570861714399338, "eventually": 0.04491197687864554, "Cauchy": 0.057012387690331526, "space": 0.09568045026443411, "small": 0.09568045026443411, "pseudoemetric": 0.15831692877998726, "sequences": 0.15831692877998726, "characterized": 0.15831692877998726, "fact": 0.15831692877998726, "pseudoedistance": 0.15831692877998726, "elements": 0.15831692877998726, "arbitrarily": 0.15831692877998726}}, {"docstring": "Non-dependent version of `coe_fn_coe_trans`, helps `rw` figure out the argument.\n", "keywords": {"coe": 0.019648131954263418, "Non-dependent version": 0.021567786782198985, "trans": 0.05393656033701752, "Non-dependent": 0.11369206228658875, "figure": 0.11369206228658875, "argument": 0.11369206228658875, "version": 0.18569843656348187}}, {"docstring": " A groupoid is closed under restriction if and only if it contains the trivial restriction-closed groupoid.\n", "keywords": {"trivial restriction-closed groupoid": 0.010962043841203115, "closed under restriction": 0.03663237450220032, "trivial restriction-closed": 0.03663237450220032, "restriction-closed groupoid": 0.05417025203414716, "groupoid is closed": 0.1179331082419386, "groupoid": 0.13667842094541144, "closed": 0.1879836817695587, "restriction": 0.1879836817695587, "trivial": 0.1879836817695587, "restriction-closed": 0.1879836817695587}}, {"docstring": "All nondegenerate quadratic forms on the complex numbers are equivalent.\n", "keywords": {"nondegenerate quadratic forms": 0.03339840940482845, "numbers are equivalent": 0.04940384002065631, "nondegenerate quadratic": 0.09700399286574239, "quadratic forms": 0.09700399286574239, "complex numbers": 0.09700399286574239, "equivalent": 0.15831692877998726, "nondegenerate": 0.29736558256021506, "quadratic": 0.29736558256021506, "forms": 0.29736558256021506, "complex": 0.29736558256021506, "numbers": 0.29736558256021506}}, {"docstring": "If an element `b` becomes add-right-regular after adding to it on the right a add-right-regular element, then `b` is add-right-regular.\n", "keywords": {"element": 0.06626030218517898, "adding": 0.1616313649453326}}, {"docstring": "A module is Artinian iff every nonempty set of submodules has a minimal submodule among them.\n", "keywords": {"module is Artinian": 0.017391962598404163, "Artinian iff": 0.017391962598404163, "iff every nonempty": 0.034987023778306175, "nonempty set": 0.034987023778306175, "minimal submodule": 0.051351238837580325, "Artinian": 0.0929767246050301, "set of submodules": 0.11245662598947327, "module": 0.18385948854246909, "iff": 0.18385948854246909, "nonempty": 0.18385948854246909, "set": 0.18385948854246909, "minimal": 0.18385948854246909, "submodules": 0.26565442043121734, "submodule": 0.26565442043121734}}, {"docstring": "**Gauss's Lemma** states that a primitive polynomial is irreducible iff it is irreducible in the  fraction field.\n", "keywords": {"Gauss Lemma": 0.0038584962387113223, "fraction field": 0.020435055290363522, "primitive polynomial": 0.033892441937102495, "polynomial is irreducible": 0.03689527781225892, "irreducible iff": 0.03689527781225892, "Gauss": 0.06199730211833934, "Lemma": 0.06199730211833934, "irreducible": 0.09826348041189502, "states": 0.11060549338282699, "field": 0.11060549338282699, "primitive": 0.18105634546484617, "polynomial": 0.18105634546484617, "iff": 0.18105634546484617, "fraction": 0.18105634546484617}}, {"docstring": "The inclusion of a fiber into the total space is a continuous map.\n", "keywords": {"continuous map": 0.015380821171891606, "total space": 0.02570861714399338, "map": 0.09568045026443411, "inclusion": 0.15831692877998726, "fiber": 0.15831692877998726, "total": 0.15831692877998726, "space": 0.15831692877998726, "continuous": 0.15831692877998726}}, {"docstring": " To show a property on elements of `M ^ n` holds, it suffices to show that it holds for scalars, is closed under addition, and holds for `x * m` where `m \u2208 M` and it holds for `x`\n", "keywords": {"closed under addition": 0.012630353647084458, "property on elements": 0.01754270654797597, "suffices to show": 0.01844589982899933, "holds for scalars": 0.018990521197784875, "holds": 0.03160006122118147, "show a property": 0.04472395732164047, "show": 0.06896994976535331, "scalars": 0.09499321648237591, "addition": 0.09499321648237591, "property": 0.13130219201242474, "elements": 0.13130219201242474, "suffices": 0.13130219201242474, "closed": 0.13130219201242474}}, {"docstring": " If `f : smooth_bump_function I c` is a smooth bump function and `g : M \u2192 G` is a function smooth on the source of the chart at `c`, then `f \u2022 g` is smooth on the whole manifold.\n", "keywords": {"smooth bump function": 0.011199530815335016, "smooth bump": 0.0445157301342986, "bump function": 0.0452919982166785, "function smooth": 0.05566128834154818, "smooth": 0.05693268526833753, "function": 0.07717661817333596, "bump": 0.09357220446736025, "manifold": 0.10037981673001088, "source": 0.13843275986285206, "chart": 0.13843275986285206}}, {"docstring": " If `\u03b1` is a nonempty preorder with no minimal or maximal elements, then there exists a strictly monotone function `f : \u2124 \u2192 \u03b1`.\n", "keywords": {"strictly monotone function": 0.0025258761156662004, "maximal elements": 0.015380821171891606, "monotone function": 0.015380821171891606, "nonempty preorder": 0.02570861714399338, "minimal or maximal": 0.02570861714399338, "exists a strictly": 0.02570861714399338, "strictly monotone": 0.02570861714399338, "elements": 0.09568045026443411, "function": 0.09568045026443411, "nonempty": 0.15831692877998726, "preorder": 0.15831692877998726, "minimal": 0.15831692877998726, "maximal": 0.15831692877998726, "exists": 0.15831692877998726, "strictly": 0.15831692877998726, "monotone": 0.15831692877998726}}, {"docstring": "For `r` strictly smaller than the radius of `p`, then `\u2225p\u2099\u2225 r\u207f` is bounded.\n", "keywords": {"strictly smaller": 0.04940384002065631, "strictly": 0.15831692877998726, "bounded": 0.15831692877998726, "smaller": 0.29736558256021506, "radius": 0.29736558256021506}}, {"docstring": "Every generalized eigenvector is a generalized eigenvector for exponent `finrank K V`.    (Lemma 8.11 of [axler2015])\n", "keywords": {"generalized eigenvector": 0.0370147427689076, "eigenvector for exponent": 0.09979822941851015, "generalized": 0.13126963202658207, "eigenvector": 0.13126963202658207, "Lemma": 0.13597385229932193, "exponent": 0.1643991344743863, "finrank": 0.1643991344743863}}, {"docstring": "Given `f : \u03b1 \u2192 \u03b2`, if `\u03b1` is nonempty then `\u03b2` is also nonempty.  `nonempty` cannot be a `functor`, because `functor` is restricted to `Type`.\n", "keywords": {"functor": 0.10194057693121047, "Type": 0.14750743328570828, "nonempty": 0.16129814034993611, "restricted": 0.505457725342219}}, {"docstring": "The function we are mapping along is `S\u207b\u00b9R` in [Halmos, \u00a759],  where `S` is the map in `map_prod_mul_eq` and `R` is `prod.swap`.\n", "keywords": {"Halmos": 0.03402676245250578, "prod": 0.05331699930238388, "mul": 0.05331699930238388, "prod.swap": 0.05331699930238388, "map": 0.08977403887827273, "function": 0.135280142484453, "mapping": 0.135280142484453}}, {"docstring": " `cantor_function c` is strictly increasing with if `0 < c < 1/2`, if we endow `\u2115 \u2192 bool` with a lexicographic order. The lexicographic order doesn't exist for these infinitary products, so we explicitly write out what it means.\n", "keywords": {"strictly increasing": 0.06377531573864725, "cantor": 0.07498227213507817, "bool": 0.07498227213507817, "lexicographic order": 0.08320376105172922, "function": 0.1542523707523809, "endow": 0.1542523707523809, "lexicographic": 0.18885623409961771, "order": 0.18885623409961771, "strictly": 0.24485070251498225, "increasing": 0.24485070251498225, "infinitary products": 0.2584921222934386, "products": 0.3877942850578501, "explicitly write": 0.389926370528568, "exist": 0.5296578414690271, "infinitary": 0.5296578414690271, "explicitly": 0.5296578414690271, "write": 0.5296578414690271}}, {"docstring": "Harder inclusion: at a point in `D f K`, the function `f` has a derivative, in `K`.\n", "keywords": {"Harder inclusion": 0.009239332327148086, "Harder": 0.09568045026443411, "inclusion": 0.09568045026443411, "function": 0.09568045026443411, "derivative": 0.09568045026443411, "point": 0.15831692877998726}}, {"docstring": "an n-digit number in base b is less than b^n if b \u2265 2\n", "keywords": {"n-digit number": 0.013527995261974615, "number in base": 0.013527995261974615, "n-digit": 0.1155310835876123, "number": 0.1155310835876123, "base": 0.1155310835876123}}, {"docstring": "Construct `is_group_hom` from its only hypothesis.\n", "keywords": {"Construct": 0.04491197687864554, "group": 0.04491197687864554, "hom": 0.04491197687864554, "hypothesis": 0.15831692877998726}}, {"docstring": " Given `c = line_map a b r`, `a < c`, the point `(c, f c)` is non-strictly below the segment `[(a, f a), (b, f b)]` if and only if `slope f a c \u2264 slope f a b`.\n", "keywords": {"slope": 0.026369104746389253, "line": 0.05393656033701752, "map": 0.07201108509564766, "point": 0.07201108509564766, "segment": 0.07201108509564766, "non-strictly": 0.09202664026077896}}, {"docstring": " Let `f : \u211d \u2192 \u211d` be a differentiable function. If `f'` is negative, then `f` is a strictly antitone function. Note that we don't require differentiability explicitly as it already implied by the derivative being strictly negative.\n", "keywords": {"differentiable function": 0.059965732527538604, "strictly antitone function": 0.11598538230055698, "function": 0.1274004687025561, "antitone function": 0.14526185656219714, "negative": 0.19122966077366674, "differentiable": 0.22202930352841288, "strictly negative": 0.26534884389336516, "strictly": 0.2741521658271297, "strictly antitone": 0.3754026168082454, "Note": 0.48031172796782934, "antitone": 0.49778954674911013, "require differentiability": 0.5363518132458392, "differentiability explicitly": 0.5363518132458392, "require differentiability explicitly": 0.5647859230917232, "require": 0.5908531264860278, "differentiability": 0.5908531264860278, "explicitly": 0.5908531264860278, "implied": 0.5908531264860278, "derivative": 0.5908531264860278, "derivative being strictly": 0.8326386202173617}}, {"docstring": " If the restriction to a set `s` of a \u03c3-algebra `m` is included in the restriction to `s` of another \u03c3-algebra `m\u2082` (hypothesis `hs`), the set `s` is `m` measurable and a function `f` supported on `s` is `m`-strongly-measurable, then `f` is also `m\u2082`-strongly-measurable.\n", "keywords": {"strongly-measurable": 0.02213661362188928, "restriction": 0.041618865278024116, "set": 0.041618865278024116, "\u03c3-algebra": 0.041618865278024116, "hypothesis": 0.058445521431385886, "measurable": 0.08205151176976402, "function": 0.08205151176976402, "supported": 0.08205151176976402, "included": 0.10846736743159992}}, {"docstring": " Let `f : \u211d \u2192 \u211d` be a differentiable function. If `f'` is positive, then `f` is a strictly monotone function. Note that we don't require differentiability explicitly as it already implied by the derivative being strictly positive.\n", "keywords": {"differentiable function": 0.059965732527538604, "strictly monotone function": 0.11598538230055698, "function": 0.1274004687025561, "monotone function": 0.14526185656219714, "positive": 0.19122966077366674, "differentiable": 0.22202930352841288, "strictly positive": 0.26534884389336516, "strictly": 0.2741521658271297, "strictly monotone": 0.3754026168082454, "Note": 0.48031172796782934, "monotone": 0.49778954674911013, "require differentiability": 0.5363518132458392, "differentiability explicitly": 0.5363518132458392, "require differentiability explicitly": 0.5647859230917232, "require": 0.5908531264860278, "differentiability": 0.5908531264860278, "explicitly": 0.5908531264860278, "implied": 0.5908531264860278, "derivative": 0.5908531264860278, "derivative being strictly": 0.8326386202173617}}, {"docstring": " To show a property on elements of `M ^ n` holds, it suffices to show that it holds for scalars, is closed under addition, and holds for `m * x` where `m \u2208 M` and it holds for `x`\n", "keywords": {"closed under addition": 0.012630353647084458, "property on elements": 0.01754270654797597, "suffices to show": 0.01844589982899933, "holds for scalars": 0.018990521197784875, "holds": 0.03160006122118147, "show a property": 0.04472395732164047, "show": 0.06896994976535331, "scalars": 0.09499321648237591, "addition": 0.09499321648237591, "property": 0.13130219201242474, "elements": 0.13130219201242474, "suffices": 0.13130219201242474, "closed": 0.13130219201242474}}, {"docstring": "See also `finset.sum_bij`.\n", "keywords": {"finset.sum": 0.04491197687864554, "bij": 0.04491197687864554}}, {"docstring": " If `edist (f n) (f (n+1))` is bounded by `C * r^n`, then the distance from `f 0` to the limit of `f` is bounded above by `C / (1 - r)`.\n", "keywords": {"edist": 0.055708263664958506, "bounded": 0.05815404476918013, "distance": 0.11718348279991213, "limit": 0.11718348279991213}}, {"docstring": "`a` semiconjugates `x` to `a + x + -a`.\n", "keywords": {"semiconjugates": 0.04491197687864554}}, {"docstring": "A sum of a function `f : fin 0 \u2192 \u03b2` is `0` because `fin 0` is empty\n", "keywords": {"fin": 0.020602899695743707, "function": 0.09492398510093508, "empty": 0.09492398510093508, "sum": 0.1408007092310104}}, {"docstring": " The set `code_supp c k` is a finite set that witnesses the effective finiteness of the `tr` Turing machine. Starting from the initial state `tr_normal c k`, forward simulation uses only states in `code_supp c k`, so this is a finite state machine. Even though the underlying type of state labels `\u039b'` is infinite, for a given partial recursive function `c` and continuation `k`, only finitely many states are accessed, corresponding roughly to subterms of `c`.\n", "keywords": {"Turing machine": 0.01394178676711826, "witnesses the effective": 0.036459778557219574, "effective finiteness": 0.036459778557219574, "finite state machine": 0.04280524531226332, "finite set": 0.05436334306799501, "code": 0.061830785513476254, "Turing": 0.06346497112303727, "supp": 0.08444176268451103, "set that witnesses": 0.0859083280121155, "set": 0.09714480092331697, "machine": 0.10832815139408845, "finite": 0.13268942233258205, "state machine": 0.13558666954136844, "finite state": 0.17130113608097616, "state": 0.1836978718297797, "witnesses": 0.18755592428177234, "effective": 0.18755592428177234, "finiteness": 0.18755592428177234, "forward simulation": 0.19754171394601575, "states": 0.27554680774466955}}, {"docstring": " To show a property is true on the even parts, it suffices to show it is true on the scalars, closed under addition, and under left-multiplication by a pair of vectors.\n", "keywords": {"closed under addition": 0.013263176307274197, "pair of vectors": 0.021835427670083753, "property is true": 0.027214376676528557, "suffices to show": 0.039865354890321, "true": 0.07092334359166412, "show a property": 0.09006197740710725, "show": 0.10262907737978542, "parts": 0.11440964588451476, "scalars": 0.11440964588451476, "closed": 0.11440964588451476, "addition": 0.11440964588451476, "vectors": 0.11440964588451476, "property": 0.18677472480820503, "suffices": 0.18677472480820503, "left-multiplication": 0.18677472480820503, "pair": 0.18677472480820503}}, {"docstring": " A two-argument function applied to two `dite`s is a `dite` of that two-argument function applied to each of the branches.\n", "keywords": {"two-argument function applied": 0.0035121815863573985, "function applied": 0.013926396726657426, "two-argument function": 0.020157331984499715, "dite": 0.023475115800335837, "function": 0.08230740764692174, "applied": 0.08230740764692174, "two-argument": 0.11770621898149182, "branches": 0.1270037047429506}}, {"docstring": " A set is a neighborhood of `a` if and only if it contains an interval `(l, u)` containing `a`, provided `a` is neither a bottom element nor a top element.\n", "keywords": {"bottom element": 0.007750092463201487, "top element": 0.007750092463201487, "element": 0.04514752100882111, "provided": 0.05331699930238388, "interval": 0.06852017557254206, "set": 0.08517068356439053, "neighborhood": 0.08517068356439053, "bottom": 0.08517068356439053, "top": 0.08517068356439053}}, {"docstring": "If `a` semiconjugates `x` to `y` and `x'` to `y'`, then it semiconjugates `x + x'` to `y + y'`.\n", "keywords": {"semiconjugates": 0.04784022513221706}}, {"docstring": "The composition of isometries is an isometry\n", "keywords": {"composition of isometries": 0.09700399286574239, "isometry": 0.15831692877998726, "composition": 0.29736558256021506, "isometries": 0.29736558256021506}}, {"docstring": " The map `coe_fn : (r \u2243r s) \u2192 (\u03b1 \u2192 \u03b2)` is injective. Lean fails to parse `function.injective (\u03bb e : r \u2243r s, (e : \u03b1 \u2192 \u03b2))`, so we use a trick to say the same.\n", "keywords": {"coe": 0.05899937629682816, "map": 0.08922538916412363, "injective": 0.08922538916412363, "Lean fails": 0.09108482621177338, "fails to parse": 0.09108482621177338, "function.injective": 0.17881754828257995, "Lean": 0.25386721785551913, "parse": 0.25386721785551913, "fails": 0.32883716426354986, "trick": 0.32883716426354986}}, {"docstring": "A locally compact Hausdorff space is totally disconnected  if and only if it is totally separated.\n", "keywords": {"locally compact Hausdorff": 0.003349717132269456, "compact Hausdorff space": 0.0033497171322694566, "compact Hausdorff": 0.017391962598404163, "Hausdorff space": 0.017391962598404163, "totally separated": 0.023102956859254047, "locally compact": 0.034987023778306175, "space is totally": 0.038330279597458564, "totally disconnected": 0.038330279597458564, "Hausdorff": 0.0929767246050301, "totally": 0.10038999320777726, "separated": 0.11246769819744627, "locally": 0.18385948854246909, "compact": 0.18385948854246909, "space": 0.18385948854246909, "disconnected": 0.18385948854246909}}, {"docstring": " `x` is the only fixed point of `point_reflection x`. This lemma requires `x + x = y + y \u2194 x = y`. There is no typeclass to use here, so we add it as an explicit argument.\n", "keywords": {"fixed point": 0.023091072115279655, "point": 0.07464178692253051, "reflection": 0.11571862121748651, "lemma requires": 0.13562001369807442, "fixed": 0.15118815917881306, "explicit argument": 0.23281004053911342, "requires": 0.31247448323794236, "lemma": 0.38218724385676617, "argument": 0.3983748963667465, "typeclass": 0.4740384617260793, "add": 0.4740384617260793, "explicit": 0.4740384617260793}}, {"docstring": "If `t` is a measurable set, then the measure of `t` with respect to the restriction of  the measure to `s` equals the outer measure of `t \u2229 s`. An alternate version requiring that `s`  be measurable instead of `t` exists as `measure.restrict_apply'`.\n", "keywords": {"equals the outer": 0.020900292195443152, "outer measure": 0.025431932031810302, "measurable set": 0.038069778765622515, "measure": 0.0494283900389867, "alternate version requiring": 0.10974737543518889, "set": 0.12240361169010548, "equals": 0.12240361169010548, "measurable": 0.14980612736784507, "respect": 0.1672533392077955, "restriction": 0.1672533392077955, "outer": 0.1672533392077955, "alternate version": 0.2031544576964777, "version requiring": 0.2031544576964777, "measure.restrict": 0.23665397113111983, "apply": 0.23665397113111983, "exists": 0.32633130528594445, "alternate": 0.41091546446421373, "version": 0.41091546446421373, "requiring": 0.41091546446421373}}, {"docstring": "An extensionality lemma in terms of the coercion to a pi-type. We prove this explicitly rather than deriving it so that it is in terms of the coercion rather than the projection `.sieves`.\n", "keywords": {"extensionality lemma": 0.03682288154969329, "lemma in terms": 0.04277292617543465, "terms": 0.10882849432940553, "pi-type": 0.129389133019644, "coercion": 0.14301647619771657, "extensionality": 0.1884545376459065, "lemma": 0.1884545376459065, "sieves": 0.22501140196509825, "prove this explicitly": 0.24892732339182522, "projection": 0.3404402136765515, "prove": 0.44644473044219835, "explicitly": 0.44644473044219835, "deriving": 0.44644473044219835}}, {"docstring": "A ring homomorphism is also a semiring homomorphism.\n", "keywords": {"ring homomorphism": 0.05913243875864445, "semiring homomorphism": 0.05913243875864445, "homomorphism": 0.14323823713631006, "ring": 0.19488865479360015, "semiring": 0.19488865479360015}}, {"docstring": "Pythagorean theorem, subtracting vectors, vector angle form.\n", "keywords": {"vector angle form": 0.006244834480795627, "Pythagorean theorem": 0.013095151449018445, "angle form": 0.021567786782198985, "subtracting vectors": 0.031557281947372486, "vector angle": 0.05259515133015473, "Pythagorean": 0.11369206228658875, "theorem": 0.11369206228658875, "subtracting": 0.11369206228658875, "form": 0.11369206228658875, "angle": 0.18569843656348187, "vectors": 0.2690767023266335, "vector": 0.2690767023266335}}, {"docstring": "The chain rule.\n", "keywords": {"chain rule": 0.04940384002065631, "rule": 0.15831692877998726, "chain": 0.29736558256021506}}, {"docstring": "Composition of monoid homomorphisms is associative.\n", "keywords": {"Composition of monoid": 0.04940384002065631, "homomorphisms is associative": 0.04940384002065631, "monoid homomorphisms": 0.09700399286574239, "Composition": 0.15831692877998726, "associative": 0.15831692877998726, "monoid": 0.29736558256021506, "homomorphisms": 0.29736558256021506}}, {"docstring": " `le_of_add_le_add_left` is normally applicable to `ordered_cancel_add_comm_monoid`, but it holds for measures with the additional assumption that \u03bc is finite.\n", "keywords": {"add": 0.011043126008647815, "holds for measures": 0.020508738117422414, "additional assumption": 0.020508738117422414, "left": 0.0561267329383762, "ordered": 0.0561267329383762, "cancel": 0.0561267329383762, "comm": 0.0561267329383762, "monoid": 0.0561267329383762, "finite": 0.09560720942674138, "applicable": 0.1417624159235109, "holds": 0.1417624159235109, "measures": 0.1417624159235109, "additional": 0.1417624159235109, "assumption": 0.1417624159235109}}, {"docstring": " The metric space uniform structure on \u211a (which presupposes the existence of real numbers) agrees with the one coming directly from (abs : \u211a \u2192 \u211a).\n", "keywords": {"metric space uniform": 0.0016012214736657916, "space uniform structure": 0.0016012214736657916, "real numbers": 0.00899321792126428, "metric space": 0.013527995261974615, "space uniform": 0.013527995261974615, "uniform structure": 0.013527995261974615, "presupposes the existence": 0.013527995261974615, "existence of real": 0.013527995261974615, "coming directly": 0.013527995261974615, "abs": 0.04491197687864554, "numbers": 0.0771485953923296, "agrees": 0.0771485953923296, "metric": 0.1155310835876123, "space": 0.1155310835876123, "uniform": 0.1155310835876123, "structure": 0.1155310835876123, "presupposes": 0.1155310835876123, "existence": 0.1155310835876123, "real": 0.1155310835876123, "coming": 0.1155310835876123}}, {"docstring": "**Alias** of subset_of_ssubset`.\n", "keywords": {"Alias": 0.030396371632413578, "ssubset": 0.04491197687864554, "subset": 0.09568045026443411}}, {"docstring": "`x^n`, `n : \u2115` is convex on `[0, +\u221e)` for all `n`\n", "keywords": {"convex": 0.1155310835876123}}, {"docstring": "If a function has an invertible strict derivative at all points, then it is an open map.\n", "keywords": {"invertible strict derivative": 0.0042542192213185686, "open map": 0.015380821171891606, "invertible strict": 0.02570861714399338, "strict derivative": 0.02570861714399338, "points": 0.09568045026443411, "map": 0.09568045026443411, "function": 0.15831692877998726, "invertible": 0.15831692877998726, "strict": 0.15831692877998726, "derivative": 0.15831692877998726, "open": 0.15831692877998726}}, {"docstring": " All n-simplices among cospherical points in n-space have the same circumradius.\n", "keywords": {"n-simplices among cospherical": 0.09700399286574239, "cospherical points": 0.09700399286574239, "points in n-space": 0.09700399286574239, "circumradius": 0.15831692877998726, "n-simplices": 0.29736558256021506, "cospherical": 0.29736558256021506, "points": 0.29736558256021506, "n-space": 0.29736558256021506}}, {"docstring": "If `a` strictly divides the minimal polynomial of `x`, then `x` cannot be a root for `a`.\n", "keywords": {"strictly divides": 0.00899321792126428, "divides the minimal": 0.013527995261974615, "minimal polynomial": 0.013527995261974615, "strictly": 0.0771485953923296, "divides": 0.1155310835876123, "minimal": 0.1155310835876123, "polynomial": 0.1155310835876123, "root": 0.1155310835876123}}, {"docstring": " If `C` holds for the `algebra_map` of `r : R` into `clifford_algebra Q`, the `\u03b9` of `x : M`, and is preserved under addition and muliplication, then it holds for all of `clifford_algebra Q`.\n", "keywords": {"addition and muliplication": 0.016338321911049718, "clifford": 0.023947002035544326, "preserved under addition": 0.024301981248200683, "algebra": 0.028034536143274554, "map": 0.061515127169190206, "holds": 0.08375405673890705, "muliplication": 0.10436678683937721, "preserved": 0.15403053871128228, "addition": 0.15403053871128228}}, {"docstring": "`ordinal.induction` but for `nat_ordinal`.\n", "keywords": {"ordinal.induction": 0.04491197687864554, "nat": 0.04491197687864554, "ordinal": 0.04491197687864554}}, {"docstring": " Multiplying the second vector passed to `oangle` by a nonzero real does not change twice the angle.\n", "keywords": {"vector passed": 0.02570861714399338, "nonzero real": 0.02570861714399338, "oangle": 0.04491197687864554, "Multiplying": 0.09568045026443411, "angle": 0.09568045026443411, "vector": 0.15831692877998726, "passed": 0.15831692877998726, "nonzero": 0.15831692877998726, "real": 0.15831692877998726, "change": 0.15831692877998726}}, {"docstring": "A singleton is bounded\n", "keywords": {"singleton is bounded": 0.04940384002065631, "bounded": 0.15831692877998726, "singleton": 0.29736558256021506}}, {"docstring": " A more general version of `finprod_mem_union'` that requires `s \u2229 mul_support f` and `t \u2229 mul_support f` rather than `s` and `t` to be disjoint\n", "keywords": {"union that requires": 0.013671134401986838, "mul": 0.020312026404878777, "general version": 0.03718843747800602, "support": 0.043493458706749734, "finprod": 0.055174169687121036, "mem": 0.055174169687121036, "union": 0.1161324896811994, "requires": 0.1161324896811994, "disjoint": 0.1161324896811994, "general": 0.18935428276389019, "version": 0.18935428276389019}}, {"docstring": "Brahmagupta-Fibonacci identity or Diophantus identity, see <https://en.wikipedia.org/wiki/Brahmagupta%E2%80%93Fibonacci_identity>.  This sign choice here corresponds to the signs obtained by multiplying two complex numbers.\n", "keywords": {"Diophantus identity": 0.03579016222828761, "Brahmagupta-Fibonacci identity": 0.05330858674101632, "identity or Diophantus": 0.07816545008211753, "Diophantus": 0.10705060526254184, "Brahmagupta-Fibonacci": 0.1567973745636324, "identity": 0.16138856584276728, "complex numbers": 0.26539575717554814, "numbers": 0.39240470458943716, "choice here corresponds": 0.39991598651204907, "obtained by multiplying": 0.39991598651204907, "multiplying two complex": 0.39991598651204907, "sign choice": 0.4996902379683893, "signs obtained": 0.4996902379683893, "choice": 0.5344823842910187, "corresponds": 0.5344823842910187, "obtained": 0.5344823842910187, "multiplying": 0.5344823842910187, "complex": 0.5344823842910187, "sign": 0.6233987174806793, "signs": 0.6233987174806793}}, {"docstring": " For functions to `\u211d`, it suffices to prove `f x \u2264 f y + K * dist x y`; this version doesn't assume `0\u2264K`.\n", "keywords": {"suffices to prove": 0.015380821171891606, "prove": 0.09568045026443411, "dist": 0.09568045026443411, "assume": 0.09568045026443411, "functions": 0.15831692877998726, "suffices": 0.15831692877998726, "version": 0.15831692877998726}}, {"docstring": " An interval of length `a` filtered over a periodic predicate of period `a` has cardinality equal to the number naturals below `a` for which `p a` is true.\n", "keywords": {"interval of length": 0.005380746843605012, "predicate of period": 0.005380746843605012, "periodic predicate": 0.00717258304785508, "cardinality equal": 0.00717258304785508, "number naturals": 0.00717258304785508, "length": 0.06341998722529081, "filtered": 0.06341998722529081, "period": 0.06341998722529081, "true": 0.06341998722529081, "interval": 0.08438900089923473, "periodic": 0.08438900089923473, "predicate": 0.08438900089923473, "cardinality": 0.08438900089923473, "equal": 0.08438900089923473, "number": 0.08438900089923473, "naturals": 0.08438900089923473}}, {"docstring": "Composing two multiplications on the right by `y` and `x` is equal to a multiplication on the right by `y * x`.\n", "keywords": {"Composing two multiplications": 0.062237506822244895, "Composing": 0.11984314898676356, "equal": 0.19488865479360015, "multiplications": 0.21802686378889002}}, {"docstring": " If each `f i`, `i \u2208 s` belongs to `[0, 1]`, then their product is less than or equal to one. See also `finset.prod_le_one'` for the case of an ordered commutative multiplicative monoid.\n", "keywords": {"commutative multiplicative monoid": 0.11501181900411048, "belongs": 0.12363091320521931, "finset.prod": 0.17881754828257995, "multiplicative monoid": 0.18075564686791562, "ordered commutative multiplicative": 0.1829003496708144, "product": 0.2005079697193566, "equal": 0.2005079697193566, "ordered commutative": 0.2766850298235749, "commutative multiplicative": 0.2766850298235749, "monoid": 0.32883716426354986, "case": 0.46553351027698087, "ordered": 0.46553351027698087, "commutative": 0.46553351027698087, "multiplicative": 0.46553351027698087}}, {"docstring": "x is an extreme point to A iff {x} is an extreme set of A.\n", "keywords": {"extreme point": 0.04212793185246166, "extreme set": 0.04212793185246166, "extreme": 0.10586606907408062, "iff": 0.11718348279991213, "point": 0.19092478917347616, "set": 0.19092478917347616}}, {"docstring": " **Tietze extension theorem** for real-valued bounded continuous maps, a version for a closed embedding and a bounded continuous function that takes values in a non-trivial closed interval. See also `exists_extension_forall_mem_of_closed_embedding` for a more general statement that works for any interval (finite or infinite, open or closed).  If `e : X \u2192 Y` is a closed embedding and `f : X \u2192\u1d47 \u211d` is a bounded continuous function such that `f x \u2208 [a, b]` for all `x`, where `a \u2264 b`, then there exists a bounded continuous function `g : Y \u2192\u1d47 \u211d` such that `g y \u2208 [a, b]` for all `y` and `g \u2218 e = f`.\n", "keywords": {"Tietze extension theorem": 0.002155873578140556, "bounded continuous function": 0.004431703306388773, "bounded continuous maps": 0.006837289426959211, "real-valued bounded continuous": 0.007889080065782633, "non-trivial closed interval": 0.008631768775282071, "bounded continuous": 0.011342014292468195, "Tietze extension": 0.014458628293323676, "continuous function": 0.019567177323755194, "closed embedding": 0.027243143250746157, "continuous maps": 0.030763191683152995, "extension theorem": 0.03536188473798087, "real-valued bounded": 0.0353858243700645, "non-trivial closed": 0.042369980930762254, "closed interval": 0.04950093031551009, "closed": 0.04955411719578654, "bounded": 0.052081140579200526, "continuous": 0.052081140579200526, "Tietze": 0.05978352701636484, "embedding": 0.0695144787966808, "function": 0.08871849402485}}, {"docstring": " The finite product of a family of sets of unique differentiability is a set of unique differentiability.\n", "keywords": {"unique differentiability": 0.006095657985347912, "sets of unique": 0.012191315970695824, "finite product": 0.01552184797949213, "family of sets": 0.0388160083175745, "unique": 0.04784022513221706, "differentiability": 0.06294116458067843, "finite": 0.12363091320521931, "product": 0.12363091320521931, "family": 0.12363091320521931, "sets": 0.12588232916135686, "set": 0.12588232916135686}}, {"docstring": "The complex exponential is everywhere differentiable, with the derivative `exp x`.\n", "keywords": {"complex exponential": 0.02570861714399338, "differentiable": 0.09568045026443411, "derivative": 0.09568045026443411, "exp": 0.09568045026443411, "complex": 0.15831692877998726, "exponential": 0.15831692877998726}}, {"docstring": "A finite dimensional space that is a subsingleton has zero `finrank`.\n", "keywords": {"finite dimensional space": 0.0042542192213185686, "finite dimensional": 0.02570861714399338, "dimensional space": 0.02570861714399338, "finrank": 0.04491197687864554, "finite": 0.15831692877998726, "dimensional": 0.15831692877998726, "space": 0.15831692877998726, "subsingleton": 0.15831692877998726}}, {"docstring": "The `nat.partrec.code.evaln` function is primitive recursive.\n", "keywords": {"function is primitive": 0.04940384002065631, "primitive recursive": 0.04940384002065631, "function": 0.15831692877998726, "recursive": 0.15831692877998726, "primitive": 0.29736558256021506}}, {"docstring": " A very useful criterion to show that a space is complete is to show that all sequences which satisfy a bound of the form `edist (u n) (u m) < B N` for all `n m \u2265 N` are converging. This is often applied for `B N = 2^{-N}`, i.e., with a very fast convergence to `0`, which makes it possible to use arguments of converging series, while this is impossible to do in general for arbitrary Cauchy sequences.\n", "keywords": {"criterion to show": 0.010645725914642966, "arbitrary Cauchy sequences": 0.015605664832408012, "space is complete": 0.016039098033445963, "satisfy a bound": 0.016039098033445963, "Cauchy sequences": 0.041662670017112866, "show": 0.04191906435183153, "converging series": 0.062251485966487115, "sequences which satisfy": 0.06352711204953701, "arbitrary Cauchy": 0.06702642942657963, "edist": 0.07478438744409445, "form": 0.09911326019159511, "sequences": 0.10598798131997342, "converging": 0.10598798131997342, "fast convergence": 0.12465005050995545, "general for arbitrary": 0.12465005050995545, "criterion": 0.1256419767999726, "space": 0.1256419767999726, "complete": 0.1256419767999726, "satisfy": 0.1256419767999726, "bound": 0.1256419767999726}}, {"docstring": " Composition of a local homeomorphism and its inverse is equivalent to the restriction of the identity to the source\n", "keywords": {"local homeomorphism": 0.013527995261974615, "inverse is equivalent": 0.013527995261974615, "Composition": 0.0771485953923296, "source": 0.0771485953923296, "local": 0.1155310835876123, "homeomorphism": 0.1155310835876123, "inverse": 0.1155310835876123, "equivalent": 0.1155310835876123, "restriction": 0.1155310835876123, "identity": 0.1155310835876123}}, {"docstring": " Coercing a `special_linear_group` via `GL_pos` and `GL` is the same as coercing striaght to a matrix.\n", "keywords": {"coercing striaght": 0.05135123883758033, "special": 0.053316999302383886, "linear": 0.053316999302383886, "group": 0.053316999302383886, "pos": 0.053316999302383886, "matrix": 0.11246769819744629, "Coercing": 0.13282721021560867, "striaght": 0.1838594885424691}}, {"docstring": " The diagonal map from the total space of the fibrewise product of two topological vector bundles `E\u2081`, `E\u2082` into `total_space E\u2081 \u00d7 total_space E\u2082` is `inducing`.\n", "keywords": {"topological vector bundles": 0.0025153180670789174, "vector bundles": 0.015947706066152048, "diagonal map": 0.023732923233905415, "fibrewise product": 0.023732923233905415, "topological vector": 0.023732923233905415, "inducing": 0.06073113495971585, "total space": 0.07472238163208403, "total": 0.08789333660563434, "space": 0.08789333660563434, "bundles": 0.103096657787716, "diagonal": 0.15225875770903138, "map": 0.15225875770903138, "fibrewise": 0.15225875770903138, "product": 0.15225875770903138, "topological": 0.15225875770903138, "vector": 0.15225875770903138}}, {"docstring": "Euler's product formula for the totient function.\n", "keywords": {"Euler product formula": 0.01655915082773619, "Euler product": 0.04940384002065631, "totient function": 0.04940384002065631, "product formula": 0.09700399286574239, "Euler": 0.15831692877998726, "function": 0.15831692877998726, "product": 0.29736558256021506, "formula": 0.29736558256021506, "totient": 0.29736558256021506}}, {"docstring": "**Alias** of is_glb.mem_of_is_closed`.\n", "keywords": {"Alias": 0.030396371632413578, "glb.mem": 0.04491197687864554, "closed": 0.04491197687864554}}, {"docstring": "Assumes right covariance. The lemma assuming left covariance is `left.add_pos'`.\n", "keywords": {"Assumes right covariance": 0.15195679415702995, "Assumes": 0.1531727145735673, "left.add": 0.2182620423168793, "pos": 0.2182620423168793, "covariance": 0.23216465691767033, "assuming left covariance": 0.2636654148178027, "lemma assuming left": 0.3201847146816566, "left covariance": 0.32446011851782974, "lemma assuming": 0.38571507274593436, "assuming left": 0.38571507274593436, "lemma": 0.5275897320195265, "assuming": 0.5275897320195265, "left": 0.5275897320195265}}, {"docstring": "Every ordinal has a fundamental sequence.\n", "keywords": {"fundamental sequence": 0.04940384002065631, "sequence": 0.15831692877998726, "ordinal": 0.29736558256021506, "fundamental": 0.29736558256021506}}, {"docstring": " If `F\u2099` tends locally uniformly to `f` on a set `s`, and `g\u2099` tends to `x` within `s`, then `F\u2099 g\u2099` tends to `f x` if `f` is continuous at `x` within `s` and `x \u2208 s`.\n", "keywords": {"locally uniformly": 0.009239332327148086, "set": 0.06844581806138879, "locally": 0.09568045026443411, "uniformly": 0.09568045026443411, "continuous": 0.09568045026443411}}, {"docstring": "If the additive supports of `f` and `g` are finite, then the sum of `f i + g i` equals the sum of `f i` plus the sum of `g i`.\n", "keywords": {"equals the sum": 0.007597014153147795, "additive supports": 0.016394381423834755, "sum": 0.027389976008516323, "finite": 0.09175783480926147, "equals": 0.09175783480926147, "additive": 0.1270037047429506, "supports": 0.1270037047429506}}, {"docstring": "**Alias** of the reverse direction of list.pw_filter_eq_self`.\n", "keywords": {"direction of list.pw": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "filter": 0.04491197687864554, "list.pw": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "A single `list.map` of a composition of functions is equal to composing a `list.map` with another `list.map`, fully applied. This is the reverse direction of `list.map_map`.\n", "keywords": {"fully applied": 0.01766696719711844, "list.map": 0.01818088744309267, "composition of functions": 0.033229861761178314, "functions is equal": 0.033229861761178314, "equal to composing": 0.033229861761178314, "single": 0.13175835450855092, "fully": 0.13175835450855092, "applied": 0.13175835450855092, "composition": 0.1793353037029867, "functions": 0.1793353037029867, "equal": 0.1793353037029867, "composing": 0.1793353037029867, "reverse direction": 0.22876397441899238, "map": 0.2522307763735699, "reverse": 0.4314789185668509, "direction": 0.4314789185668509}}, {"docstring": "The function `exp_neg_inv_glue` vanishes on `(-\u221e, 0]`.\n", "keywords": {"exp": 0.04491197687864554, "neg": 0.04491197687864554, "inv": 0.04491197687864554, "glue": 0.04491197687864554, "function": 0.15831692877998726, "vanishes": 0.15831692877998726}}, {"docstring": " A closed ball in a product space is a product of closed balls. See also `metric.closed_ball_pi'` for a version assuming `nonempty \u03b2` instead of `0 \u2264 r`.\n", "keywords": {"product space": 0.03187212498249308, "closed ball": 0.05399706292238554, "closed": 0.0850029502246912, "product": 0.0850029502246912, "product of closed": 0.11130091103836921, "ball": 0.1506734548846323, "version assuming": 0.17901690817107055, "space": 0.18168586645340876, "metric.closed": 0.2552396270992323, "balls": 0.3013469097692646, "assuming": 0.3487422008605116, "nonempty": 0.3487422008605116, "version": 0.43538104235296526}}, {"docstring": "This theorem establishes the Wallis Product for `\u03c0`. Our proof is largely about analyzing  the behavior of the ratio of the integral of `sin x ^ n` as `n \u2192 \u221e`.  See: https://en.wikipedia.org/wiki/Wallis_product   The proof can be broken down into two pieces.  (Pieces involving general properties of the integral of `sin x ^n` can be found  in `analysis.special_functions.integrals`.) First, we use integration by parts to obtain a  recursive formula for `\u222b x in 0..\u03c0, sin x ^ (n + 2)` in terms of `\u222b x in 0..\u03c0, sin x ^ n`.  From this we can obtain closed form products of `\u222b x in 0..\u03c0, sin x ^ (2 * n)` and  `\u222b x in 0..\u03c0, sin x ^ (2 * n + 1)` via induction. Next, we study the behavior of the ratio  `\u222b (x : \u211d) in 0..\u03c0, sin x ^ (2 * k + 1)) / \u222b (x : \u211d) in 0..\u03c0, sin x ^ (2 * k)` and prove that  it converges to one using the squeeze theorem. The final product for `\u03c0` is obtained after some  algebraic manipulation.\n", "keywords": {"establishes the Wallis": 0.013753664315533033, "sin": 0.021560003014344346, "Wallis Product": 0.02737128065288099, "Wallis": 0.069364884206434, "theorem establishes": 0.10558289509133148, "pieces": 0.1662755885509747, "integral": 0.19043421456315984, "Product": 0.19204280258936773, "establishes": 0.19558985183417596, "proof": 0.20020386938543633, "behavior": 0.2238151016482195, "ratio": 0.2388822069452902, "theorem": 0.24413269306206997, "Pieces involving": 0.2499109999317409, "Pieces involving general": 0.25094089386347596, "analyzing the behavior": 0.257769646668321, "largely about analyzing": 0.26520635978277546, "obtain": 0.2670263323913464, "form products": 0.33566578318876567, "final product": 0.35574074857707955}}, {"docstring": "Composition by continuous linear maps on the right preserves `C^n` functions.\n", "keywords": {"continuous linear maps": 0.03339840940482845, "functions": 0.04491197687864554, "Composition by continuous": 0.04940384002065631, "continuous linear": 0.09700399286574239, "linear maps": 0.09700399286574239, "Composition": 0.15831692877998726, "preserves": 0.15831692877998726, "continuous": 0.29736558256021506, "linear": 0.29736558256021506, "maps": 0.29736558256021506}}, {"docstring": "The closed thickening with radius zero is the closure of the set.\n", "keywords": {"closed thickening": 0.013527995261974615, "thickening with radius": 0.013527995261974615, "set": 0.0771485953923296, "closed": 0.1155310835876123, "thickening": 0.1155310835876123, "radius": 0.1155310835876123, "closure": 0.1155310835876123}}, {"docstring": " **Sylvester's law of inertia**: A real quadratic form is equivalent to a weighted sum of squares with the weights being \u00b11 or 0.\n", "keywords": {"real quadratic form": 0.0042542192213185686, "Sylvester law": 0.009108237309423345, "law of inertia": 0.015380821171891606, "real quadratic": 0.02570861714399338, "quadratic form": 0.02570861714399338, "form is equivalent": 0.02570861714399338, "weighted sum": 0.02570861714399338, "sum of squares": 0.02570861714399338, "Sylvester": 0.057012387690331526, "inertia": 0.09568045026443411, "law": 0.15831692877998726, "real": 0.15831692877998726, "quadratic": 0.15831692877998726, "form": 0.15831692877998726, "equivalent": 0.15831692877998726, "weighted": 0.15831692877998726, "sum": 0.15831692877998726, "squares": 0.15831692877998726, "weights": 0.15831692877998726}}, {"docstring": "Given a nontrivial subgroup `G \u2286 \u211d`, if `G \u2229 \u211d_{>0}` has no minimum then `G` is dense.\n", "keywords": {"nontrivial subgroup": 0.00899321792126428, "subgroup": 0.0771485953923296, "dense": 0.0771485953923296, "nontrivial": 0.1155310835876123, "minimum": 0.1155310835876123}}, {"docstring": " Taking the `multilinear_map.alternatization` of the `multilinear_map.dom_coprod` of two `alternating_map`s gives a scaled version of the `alternating_map.coprod` of those maps.\n", "keywords": {"scaled version": 0.014329453017822688, "multilinear": 0.02107242729789198, "alternating": 0.02107242729789198, "map.alternatization": 0.056560163438398744, "map.dom": 0.056560163438398744, "coprod": 0.056560163438398744, "map.coprod": 0.056560163438398744, "Taking": 0.08565028372171016, "map": 0.09008039158396695, "maps": 0.09008039158396695, "scaled": 0.11885714341470131, "version": 0.11885714341470131}}, {"docstring": " `cos (n * \u03b8)` is equal to the `n`-th Chebyshev polynomial of the first kind evaluated on `cos \u03b8`.\n", "keywords": {"Chebyshev polynomial": 0.017658958508402847, "kind evaluated": 0.035715520099333646, "cos": 0.07030442419566416, "Chebyshev": 0.09344467948467797, "equal": 0.18569843656348187, "polynomial": 0.18569843656348187, "kind": 0.18569843656348187, "evaluated": 0.18569843656348187}}, {"docstring": " Adding the angles between two vectors in each order, with the first vector in each angle negated, results in 0.\n", "keywords": {"angle negated": 0.01934892234613409, "Adding the angles": 0.04608664580965232, "Adding": 0.09713402394201612, "order": 0.09713402394201612, "negated": 0.09713402394201612, "results": 0.09713402394201612, "vectors": 0.15142227756780624, "vector": 0.15142227756780624, "angles": 0.19541708604559876, "angle": 0.19541708604559876}}, {"docstring": " The **Schwarz Lemma**: if `f : \u2102 \u2192 \u2102` sends an open disk with center `0` to itself, the for any point `z` of this disk we have `abs (f z) \u2264 abs z`.\n", "keywords": {"Schwarz Lemma": 0.002927415044193434, "sends an open": 0.013546417228156258, "open disk": 0.027430531955772185, "disk with center": 0.04388107386360311, "abs": 0.05332403764722467, "Schwarz": 0.05402657030912676, "Lemma": 0.05402657030912676, "disk": 0.094808423351325, "sends": 0.09492398510093508, "center": 0.09492398510093508, "point": 0.09492398510093508, "open": 0.1408007092310104}}, {"docstring": " A variant of `lift_sup_le_lift_sup` with universes specialized via `w = v` and `w' = v'`. This is sometimes necessary to avoid universe unification issues.\n", "keywords": {"lift": 0.026945516146251545, "universes specialized": 0.1438431368043795, "universe unification issues": 0.20375691749309294, "variant": 0.25913107553909676, "specialized": 0.25913107553909676, "unification issues": 0.2864155255305087, "avoid universe unification": 0.3182052177513098, "avoid universe": 0.3627227175410027, "universe unification": 0.3627227175410027, "issues": 0.4059300471627769, "universes": 0.48529205008806087, "universe": 0.48529205008806087, "avoid": 0.5484841522346542, "unification": 0.5484841522346542}}, {"docstring": " If `s : set \u03b1` and `t : set \u03b2` are finite sets, then taking the product over `s` commutes with taking the product over `t`.\n", "keywords": {"taking the product": 0.011365999453690937, "commutes with taking": 0.045691988611993826, "finite sets": 0.04627018358702243, "product": 0.06384038905425339, "taking": 0.08704027729228296, "commutes": 0.10720382857785782, "set": 0.13996733698567818, "finite": 0.15797947932871687, "sets": 0.27993467397135635}}, {"docstring": "**Alias** of pgame.lf_of_lf_of_le`.\n", "keywords": {"Alias": 0.030396371632413578, "pgame.lf": 0.0771485953923296}}, {"docstring": "Given a language with a nonempty type of constants, any structure will be nonempty. This cannot  be a global instance, because `L` becomes a metavariable.\n", "keywords": {"type of constants": 0.016951155097562426, "nonempty type": 0.02595314493061387, "nonempty": 0.08359498828006952, "constants": 0.11016584643300398, "global instance": 0.12992385282676058, "language": 0.1513046335336394, "type": 0.1513046335336394, "structure": 0.1513046335336394, "instance": 0.3006907867864958, "metavariable": 0.3006907867864958, "global": 0.3824015048530132}}, {"docstring": "`trim` respects scalar multiplication.\n", "keywords": {"respects scalar multiplication": 0.008321268142839145, "trim": 0.04491197687864554, "respects scalar": 0.04940384002065631, "scalar multiplication": 0.04940384002065631, "respects": 0.15831692877998726, "multiplication": 0.15831692877998726, "scalar": 0.29736558256021506}}, {"docstring": " If `A` is a family of enough low-degree polynomials over a finite semiring, there is a pair of equal elements in `A`.\n", "keywords": {"finite semiring": 0.005380746843605012, "low-degree polynomials": 0.00717258304785508, "pair of equal": 0.00717258304785508, "equal elements": 0.00717258304785508, "semiring": 0.06341998722529081, "family": 0.08438900089923473, "low-degree": 0.08438900089923473, "polynomials": 0.08438900089923473, "finite": 0.08438900089923473, "pair": 0.08438900089923473, "equal": 0.08438900089923473, "elements": 0.08438900089923473}}, {"docstring": "If two continuous functions are equal on a dense set, then they are equal.\n", "keywords": {"dense set": 0.022138323509052035, "continuous functions": 0.03663237450220032, "functions are equal": 0.04051498248759491, "equal": 0.10356599227702172, "set": 0.11521656054299435, "continuous": 0.1879836817695587, "functions": 0.1879836817695587, "dense": 0.1879836817695587}}, {"docstring": "If `\u03b1` is an infinite type, then `\u03b1 \u2295 \u03b1` and `\u03b1` have the same cardinality.\n", "keywords": {"infinite type": 0.0065920978564317735, "type": 0.06844581806138879, "cardinality": 0.06844581806138879, "infinite": 0.09568045026443411}}, {"docstring": "The sequence `A \u27f6 A \u229e B \u27f6 B` is exact.\n", "keywords": {"sequence": 0.09568045026443411, "exact": 0.09568045026443411}}, {"docstring": " A continuous function on `\u211d` is `interval_integrable` with respect to any locally finite measure `\u03bd` on \u211d.\n", "keywords": {"locally finite measure": 0.0025258761156662004, "finite measure": 0.015380821171891606, "continuous function": 0.02570861714399338, "locally finite": 0.02570861714399338, "interval": 0.04491197687864554, "integrable": 0.04491197687864554, "measure": 0.09568045026443411, "continuous": 0.15831692877998726, "function": 0.15831692877998726, "respect": 0.15831692877998726, "locally": 0.15831692877998726, "finite": 0.15831692877998726}}, {"docstring": "The upper shadow is monotone.\n", "keywords": {"shadow is monotone": 0.04940384002065631, "upper shadow": 0.09700399286574239, "monotone": 0.15831692877998726, "upper": 0.29736558256021506, "shadow": 0.29736558256021506}}, {"docstring": "The additive inverse of one multiplied by an element of a ring is the element's additive  inverse.\n", "keywords": {"element additive inverse": 0.01919104955473744, "additive inverse": 0.02817978557005342, "element additive": 0.07496826985274804, "additive": 0.11549095123814725, "inverse": 0.11549095123814725, "element": 0.15096417332079662, "multiplied": 0.20283314940424746, "ring": 0.20283314940424746}}, {"docstring": "The finrank of `M \u00d7 N` is `(finrank R M) + (finrank R N)`.\n", "keywords": {"finrank": 0.08353172751175852}}, {"docstring": "`S` is algebraic over `R` iff a fraction ring of `S` is algebraic over `R`\n", "keywords": {"iff a fraction": 0.022885248721446715, "fraction ring": 0.037831312533597124, "algebraic": 0.07334489383741183, "iff": 0.11718348279991213, "fraction": 0.19092478917347616, "ring": 0.19092478917347616}}, {"docstring": "Given an element `a` of a commutative semigroup with zero, there exists another element whose    product with zero equals `a` iff `a` equals zero.\n", "keywords": {"commutative semigroup": 0.014218983619329623, "element whose product": 0.043539933591071105, "exists another element": 0.04353993359107112, "iff": 0.05632962681207606, "element": 0.07442578585270058, "equals": 0.07442578585270058, "commutative": 0.11840455484321102, "semigroup": 0.11840455484321102, "exists": 0.11840455484321102, "product": 0.11840455484321102}}, {"docstring": "Cardinality of a non-empty `Icc` of finsets.\n", "keywords": {"Icc": 0.030396371632413578, "Cardinality": 0.09568045026443411, "non-empty": 0.09568045026443411, "finsets": 0.09568045026443411}}, {"docstring": "The range of a strongly measurable function is separable.\n", "keywords": {"strongly measurable function": 0.03339840940482845, "function is separable": 0.04940384002065631, "strongly measurable": 0.09700399286574239, "measurable function": 0.09700399286574239, "separable": 0.15831692877998726, "range": 0.29736558256021506, "strongly": 0.29736558256021506, "measurable": 0.29736558256021506, "function": 0.29736558256021506}}, {"docstring": "Gauss' lemma. The legendre symbol can be computed by considering the number of naturals less  than `p/2` such that `(a * x) % p > p / 2`\n", "keywords": {"Gauss' lemma": 0.010159422250580143, "Gauss'": 0.10028582371075691, "lemma": 0.10028582371075691, "legendre symbol": 0.165573765898185, "number of naturals": 0.165573765898185, "legendre": 0.37689977775222827, "symbol": 0.37689977775222827, "computed": 0.37689977775222827, "number": 0.37689977775222827, "naturals": 0.37689977775222827}}, {"docstring": "The multiplicity of `p` in `(p * n)!` is `n` more than that of `n!`.\n", "keywords": {"multiplicity": 0.1155310835876123}}, {"docstring": "If c is a cycle, a \u2208 c.support and c is a cycle of f, then `c = f.cycle_of a`\n", "keywords": {"f.cycle": 0.05706283858652404, "cycle": 0.0600992383382869, "c.support": 0.08638782221675846}}, {"docstring": "If a set is a right-neighborhood of all of its points, then it is measurable.\n", "keywords": {"points": 0.09568045026443411, "measurable": 0.09568045026443411, "set": 0.15831692877998726, "right-neighborhood": 0.15831692877998726}}, {"docstring": "**Intersecting Chords Theorem**.\n", "keywords": {"Intersecting Chords Theorem": 0.0011031048803583578, "Intersecting Chords": 0.012602360123953448, "Chords Theorem": 0.012602360123953448, "Intersecting": 0.08596317751626563, "Theorem": 0.08596317751626563, "Chords": 0.1447773057422032}}, {"docstring": "**Alias** of the reverse direction of strict_anti_on_to_dual_comp_iff`.\n", "keywords": {"direction of strict": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "anti": 0.04491197687864554, "dual": 0.04491197687864554, "comp": 0.04491197687864554, "iff": 0.04491197687864554, "strict": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "**Alias** of lt_mul_of_inv_mul_lt`.\n", "keywords": {"mul": 0.021352745740207107, "Alias": 0.035514607549195436, "inv": 0.05706283858652404}}, {"docstring": "Assumes right covariance.\n", "keywords": {"Assumes right covariance": 0.02570861714399338, "Assumes": 0.15831692877998726, "covariance": 0.15831692877998726}}, {"docstring": " The pigeonhole principle for finitely many pigeons counted by heads: given a function between finite sets `s` and `t` and a number `b` such that `card t \u2022 b \u2264 card s`, there exists `y \u2208 t` such that its preimage in `s` has at least `b` elements. See also `finset.exists_lt_card_fiber_of_nsmul_lt_card_of_maps_to` for a stronger statement.\n", "keywords": {"counted by heads": 0.020872957525642288, "finite sets": 0.020872957525642288, "pigeonhole principle": 0.028741791314317408, "principle for finitely": 0.028741791314317408, "finitely many pigeons": 0.028741791314317408, "pigeons counted": 0.028741791314317408, "function between finite": 0.028741791314317408, "card": 0.054711518977511336, "elements": 0.08189306938435513, "heads": 0.1223231243512862, "sets": 0.1223231243512862, "number": 0.1223231243512862, "exists": 0.1223231243512862, "stronger statement": 0.15469136205099032, "pigeonhole": 0.16714897759060932, "principle": 0.16714897759060932, "finitely": 0.16714897759060932, "pigeons": 0.16714897759060932, "counted": 0.16714897759060932, "function": 0.16714897759060932}}, {"docstring": "The Radon-Nikodym theorem for signed measures.\n", "keywords": {"signed measures": 0.04940384002065631, "Radon-Nikodym theorem": 0.09700399286574239, "theorem for signed": 0.09700399286574239, "measures": 0.15831692877998726, "Radon-Nikodym": 0.29736558256021506, "theorem": 0.29736558256021506, "signed": 0.29736558256021506}}, {"docstring": "`orientation.fin_orthonormal_basis` gives a basis with the required orientation.\n", "keywords": {"required orientation": 0.022138323509052035, "orientation.fin": 0.054709255964732355, "orthonormal": 0.054709255964732355, "orientation": 0.11521656054299435, "basis": 0.13667842094541144, "required": 0.1879836817695587}}, {"docstring": "If `A` is an `R`-algebra and `S` is an `A`-algebra, both finitely presented, then `S` is  finitely presented as `R`-algebra.\n", "keywords": {"finitely presented": 0.016753742440025015, "algebra": 0.05127017388963143, "finitely": 0.0900293482920002, "presented": 0.0900293482920002}}, {"docstring": "This cannot be an instance because it can cause infinite loops whenever the `has_scalar` arguments are still metavariables.\n", "keywords": {"scalar": 0.04491197687864554, "infinite loops": 0.09700399286574239, "arguments": 0.15831692877998726, "metavariables": 0.15831692877998726, "instance": 0.29736558256021506, "infinite": 0.29736558256021506, "loops": 0.29736558256021506}}, {"docstring": "Defining equation for the recursor of `W`\n", "keywords": {"Defining equation": 0.04940384002065631, "Defining": 0.15831692877998726, "equation": 0.29736558256021506, "recursor": 0.29736558256021506}}, {"docstring": "For every set there exists a measurable superset of the same measure.\n", "keywords": {"set there exists": 0.09700399286574239, "exists a measurable": 0.09700399286574239, "measurable superset": 0.09700399286574239, "measure": 0.15831692877998726, "set": 0.29736558256021506, "exists": 0.29736558256021506, "measurable": 0.29736558256021506, "superset": 0.29736558256021506}}, {"docstring": "This lemma also holds for `ennreal`, but we need a different proof for that.\n", "keywords": {"lemma also holds": 0.02570861714399338, "ennreal": 0.04491197687864554, "lemma": 0.15831692877998726, "holds": 0.15831692877998726, "proof": 0.15831692877998726}}, {"docstring": "If a function is analytic on a set `s`, so is its derivative.\n", "keywords": {"function is analytic": 0.02570861714399338, "set": 0.09568045026443411, "derivative": 0.09568045026443411, "function": 0.15831692877998726, "analytic": 0.15831692877998726}}, {"docstring": "**Alias** of not_btw_of_sbtw`.\n", "keywords": {"Alias": 0.030396371632413578, "btw": 0.04491197687864554, "sbtw": 0.04491197687864554}}, {"docstring": "The degree of a minimal polynomial, as a natural number, is positive.\n", "keywords": {"minimal polynomial": 0.015380821171891606, "natural number": 0.015380821171891606, "polynomial": 0.09568045026443411, "number": 0.09568045026443411, "positive": 0.09568045026443411, "degree": 0.15831692877998726, "minimal": 0.15831692877998726, "natural": 0.15831692877998726}}, {"docstring": "If `a \u2208 s` is known, see also `finset.card_erase_of_mem` and `finset.erase_eq_of_not_mem`.\n", "keywords": {"mem": 0.020602899695743707, "finset.card": 0.055708263664958506, "erase": 0.055708263664958506, "finset.erase": 0.055708263664958506}}, {"docstring": "**Fermat's Theorem**: the derivative of a function at a local extremum equals zero.\n", "keywords": {"Fermat Theorem": 0.0032610119837787367, "local extremum equals": 0.0042542192213185686, "local extremum": 0.02570861714399338, "extremum equals": 0.02570861714399338, "Fermat": 0.057012387690331526, "Theorem": 0.057012387690331526, "derivative": 0.15831692877998726, "function": 0.15831692877998726, "local": 0.15831692877998726, "extremum": 0.15831692877998726, "equals": 0.15831692877998726}}, {"docstring": "Any non-zero natural number `m` is greater than (b+2)^((number of digits in the base (b+2) representation of m) - 1)\n", "keywords": {"non-zero natural number": 0.010130364612108918, "non-zero natural": 0.034987023778306175, "natural number": 0.051351238837580325, "number of digits": 0.11245662598947327, "base": 0.11246769819744627, "representation": 0.11246769819744627, "number": 0.13282721021560867, "non-zero": 0.18385948854246909, "natural": 0.18385948854246909, "greater": 0.18385948854246909, "digits": 0.18385948854246909}}, {"docstring": "**Alias** of le_of_mul_le_mul_left'`.\n", "keywords": {"mul": 0.021352745740207107, "Alias": 0.035514607549195436, "left": 0.05706283858652404}}, {"docstring": " A word and its maximal reduction correspond to the same element of the free group.\n", "keywords": {"maximal reduction correspond": 0.0042542192213185686, "free group": 0.015380821171891606, "maximal reduction": 0.02570861714399338, "reduction correspond": 0.02570861714399338, "group": 0.09568045026443411, "word": 0.15831692877998726, "maximal": 0.15831692877998726, "reduction": 0.15831692877998726, "correspond": 0.15831692877998726, "element": 0.15831692877998726, "free": 0.15831692877998726}}, {"docstring": "For coprime `a` and `b`, the power of `p` in `a * b` is the sum of the powers in `a` and `b`\n", "keywords": {"coprime": 0.09713402394201612, "sum": 0.14390902704051098, "power": 0.15142227756780624, "powers": 0.15142227756780624}}, {"docstring": "The product of two strictly monotone functions is strictly monotone.\n", "keywords": {"strictly monotone functions": 0.011782282943034048, "strictly monotone": 0.027200199006318638, "monotone functions": 0.04771708711059453, "functions is strictly": 0.10583238594216893, "strictly": 0.11357121248292479, "monotone": 0.11357121248292479, "product": 0.2005079697193566, "functions": 0.2005079697193566}}, {"docstring": " Given `c = line_map a b r`, `a < c`, the point `(c, f c)` is strictly below the segment `[(a, f a), (b, f b)]` if and only if `slope f a c < slope f a b`.\n", "keywords": {"slope": 0.026369104746389253, "line": 0.05393656033701752, "map": 0.07201108509564766, "point": 0.07201108509564766, "segment": 0.07201108509564766, "strictly": 0.09202664026077896}}, {"docstring": "Group homomorphisms preserve division.\n", "keywords": {"Group homomorphisms preserve": 0.01655915082773619, "homomorphisms preserve division": 0.016559150827736194, "Group homomorphisms": 0.04940384002065631, "preserve division": 0.04940384002065631, "homomorphisms preserve": 0.09700399286574239, "Group": 0.15831692877998726, "division": 0.15831692877998726, "homomorphisms": 0.29736558256021506, "preserve": 0.29736558256021506}}, {"docstring": "All elements of a partition of \u03b1 are the equivalence class of some y \u2208 \u03b1.\n", "keywords": {"equivalence class": 0.013527995261974615, "elements": 0.1155310835876123, "partition": 0.1155310835876123, "equivalence": 0.1155310835876123, "class": 0.1155310835876123}}, {"docstring": "Balls at the origin are absorbent.\n", "keywords": {"origin are absorbent": 0.04940384002065631, "Balls": 0.15831692877998726, "absorbent": 0.15831692877998726, "origin": 0.29736558256021506}}, {"docstring": "`p` splits in the splitting field of `p \u2218 q`, for `q` non-constant.\n", "keywords": {"splitting field": 0.02570861714399338, "non-constant": 0.04491197687864554, "splits": 0.09568045026443411, "splitting": 0.15831692877998726, "field": 0.15831692877998726}}, {"docstring": " In the case of a triangle, altitudes are the same thing as Monge planes.\n", "keywords": {"Monge planes": 0.008293207122436794, "thing as Monge": 0.013797198203993007, "Monge": 0.08596317751626563, "triangle": 0.09568045026443411, "altitudes": 0.09568045026443411, "planes": 0.09568045026443411, "case": 0.15831692877998726, "thing": 0.15831692877998726}}, {"docstring": " If a function converges to a nonzero value, its inverse converges to the inverse of this value. We use the name `tendsto.inv\u2080` as `tendsto.inv` is already used in multiplicative topological groups.\n", "keywords": {"function converges": 0.07790634536843555, "inverse converges": 0.10489584114876165, "converges": 0.1358397367367209, "inverse": 0.17472301227081005, "tendsto.inv": 0.22664731017884504, "multiplicative topological groups": 0.26553943434602134, "function": 0.2660326719693018, "nonzero": 0.2660326719693018, "topological groups": 0.30043886161151495, "groups": 0.4145537065509203, "multiplicative topological": 0.4504904754117036, "multiplicative": 0.5572952814319921, "topological": 0.5572952814319921}}, {"docstring": "A set is sequentially closed if it is closed.\n", "keywords": {"set is sequentially": 0.039481144315219374, "sequentially closed": 0.05913243875864445, "closed": 0.14323823713631006, "set": 0.19488865479360015, "sequentially": 0.19488865479360015}}, {"docstring": "A version of `set.mem_finset_prod` with a simpler RHS for products over a fintype.\n", "keywords": {"simpler RHS": 0.007743432063478832, "RHS for products": 0.007743432063478832, "set.mem": 0.04491197687864554, "finset": 0.04491197687864554, "prod": 0.04491197687864554, "RHS": 0.06650965107397505, "fintype": 0.0771485953923296, "version": 0.1155310835876123, "simpler": 0.1155310835876123, "products": 0.1155310835876123}}, {"docstring": " If `a \u2260 0, b` are elements of a unique factorization domain, then dividing out their common factor `c'` gives `a'` and `b'` with no factors in common.\n", "keywords": {"unique factorization domain": 0.0020292765890644877, "factorization domain": 0.013833902242147065, "unique factorization": 0.02064652498550541, "common factor": 0.038386292328852, "domain": 0.09593831581184391, "common": 0.09613435444394655, "factors in common": 0.13656593472452555, "elements": 0.14222822903176371, "unique": 0.14222822903176371, "factorization": 0.14222822903176371, "dividing": 0.14222822903176371, "factor": 0.1922687088878931, "factors": 0.1922687088878931}}, {"docstring": " The canonical increasing bijection between `fin (c.length + 1)` and `c.boundaries` is exactly `c.boundary`.\n", "keywords": {"canonical increasing bijection": 0.03339840940482845, "fin": 0.04491197687864554, "c.length": 0.04491197687864554, "c.boundaries": 0.04491197687864554, "c.boundary": 0.04491197687864554, "canonical increasing": 0.09700399286574239, "increasing bijection": 0.09700399286574239, "canonical": 0.29736558256021506, "increasing": 0.29736558256021506, "bijection": 0.29736558256021506}}, {"docstring": "In the space `\u03b9 \u2192 \u211d`, Hausdorff measure coincides exactly with Lebesgue measure.\n", "keywords": {"Hausdorff measure coincides": 0.003519855301609401, "Hausdorff measure": 0.017642136570970746, "Lebesgue measure": 0.026378926493064607, "measure coincides": 0.05417025203414716, "Hausdorff": 0.06341998722529081, "Lebesgue": 0.09401982591602405, "space": 0.11521656054299435, "measure": 0.13667842094541144, "coincides": 0.1879836817695587}}, {"docstring": " In the specific case of continuous multilinear maps on spaces indexed by `fin (n+1)`, where one can build an element of `\u03a0(i : fin (n+1)), M i` using `cons`, one can express directly the additivity of a multilinear map along the first variable.\n", "keywords": {"continuous multilinear maps": 0.0030057880711644356, "specific case": 0.019557279302732804, "case of continuous": 0.019557279302732804, "spaces indexed": 0.019557279302732804, "build an element": 0.019557279302732804, "express directly": 0.019557279302732804, "directly the additivity": 0.019557279302732804, "fin": 0.02006098734604785, "continuous multilinear": 0.020241076619814977, "multilinear maps": 0.02094927335880251, "maps on spaces": 0.04869677256422715, "cons": 0.054709255964732355, "multilinear": 0.07162298286637953, "variable": 0.09329120537733218, "specific": 0.1384995633470844, "case": 0.1384995633470844, "continuous": 0.1384995633470844, "spaces": 0.1384995633470844, "indexed": 0.1384995633470844, "build": 0.1384995633470844}}, {"docstring": " A function on `[0, 1]` with the norm of the derivative within `[0, 1]` bounded by `C` satisfies `\u2225f 1 - f 0\u2225 \u2264 C`, `deriv_within` version.\n", "keywords": {"satisfies": 0.04491197687864554, "deriv": 0.04491197687864554, "version": 0.04491197687864554, "bounded": 0.0771485953923296, "function": 0.1155310835876123, "norm": 0.1155310835876123, "derivative": 0.1155310835876123}}, {"docstring": " The Monge point is the only point in all the Monge planes from any one vertex.\n", "keywords": {"Monge planes": 0.01191584224702427, "Monge point": 0.016448068256922545, "Monge": 0.0396938847794304, "vertex": 0.10028582371075691, "point": 0.10191687733271076, "planes": 0.14832923246533666}}, {"docstring": "See `lt_of_tsub_lt_tsub_left_of_le` for a weaker statement in a partial order.\n", "keywords": {"tsub": 0.019648131954263418, "partial order": 0.021567786782198985, "weaker statement": 0.035715520099333646, "left": 0.05393656033701752, "order": 0.11369206228658875, "weaker": 0.18569843656348187, "statement": 0.18569843656348187, "partial": 0.18569843656348187}}, {"docstring": "This is `algebra.norm_eq_zero_iff` composed with `algebra.norm_apply`.\n", "keywords": {"algebra.norm": 0.020602899695743707, "iff": 0.055708263664958506, "apply": 0.055708263664958506, "composed": 0.11718348279991213}}, {"docstring": "`padic_val_nat p 1` is 0 for any `p`.\n", "keywords": {"padic": 0.04491197687864554, "val": 0.04491197687864554, "nat": 0.09568045026443411}}, {"docstring": " The sum of two upper semicontinuous functions is upper semicontinuous. Formulated with an explicit continuity assumption on addition, for application to `ereal`. The unprimed version of the lemma uses `[has_continuous_add]`.\n", "keywords": {"upper semicontinuous functions": 0.007327296516767814, "upper semicontinuous": 0.016851204808897166, "semicontinuous functions": 0.03821554584844725, "functions is upper": 0.08667762295794612, "upper": 0.09028232117950413, "semicontinuous": 0.09028232117950413, "explicit continuity assumption": 0.1917383839555026, "sum": 0.2038542769622493, "functions": 0.2038542769622493, "assumption on addition": 0.20587493759307618, "ereal": 0.2425057621221154, "explicit continuity": 0.28461618066910277, "continuity assumption": 0.28461618066910277, "continuous": 0.31807004650910337, "add": 0.31807004650910337, "Formulated": 0.36270881646612724, "addition": 0.36270881646612724, "unprimed version": 0.46742777496856974, "explicit": 0.47069880880967624, "continuity": 0.47069880880967624}}, {"docstring": " The cosine of the angle between two vectors, multiplied by the product of their norms.\n", "keywords": {"vectors": 0.0771485953923296, "multiplied": 0.0771485953923296, "norms": 0.0771485953923296, "cosine": 0.1155310835876123, "angle": 0.1155310835876123, "product": 0.1155310835876123}}, {"docstring": "A version of `x.property` or `x.2` where `p` is syntactically applied to the coercion of `x`  instead of `x.1`. A similar result is `subtype.mem` in `data.set.basic`.\n", "keywords": {"syntactically applied": 0.02249651976012989, "x.property": 0.05899937629682816, "version": 0.14832923246533666, "syntactically": 0.14832923246533666, "applied": 0.14832923246533666, "coercion": 0.14832923246533666, "similar result": 0.165573765898185, "subtype.mem": 0.17881754828257995, "similar": 0.37689977775222827, "result": 0.37689977775222827}}, {"docstring": " If a function tends to negative infinity along a filter, then this function multiplied by a negative constant (on the right) tends to positive infinity.\n", "keywords": {"negative constant": 0.02028888462011333, "function multiplied": 0.030322790873945838, "filter": 0.09910285154256718, "constant": 0.09910285154256718, "positive": 0.09910285154256718, "function": 0.10032724128195009, "negative": 0.10032724128195009, "multiplied": 0.14667192704153995}}, {"docstring": "**Alias** of the forward direction of bounded_iff_exists_norm_le`.\n", "keywords": {"direction of bounded": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "exists": 0.04491197687864554, "norm": 0.04491197687864554, "bounded": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " If any point of a set is joined to a fixed point by a preconnected subset, then the original set is preconnected as well.\n", "keywords": {"preconnected subset": 0.02028888462011333, "set is joined": 0.02337187222971483, "original set": 0.02337187222971483, "fixed point": 0.030322790873945838, "set is preconnected": 0.0742345823805393, "set": 0.07785437699288038, "subset": 0.09910285154256718, "point": 0.10032724128195009, "preconnected": 0.10032724128195009, "joined": 0.14667192704153995, "fixed": 0.14667192704153995, "original": 0.14667192704153995}}, {"docstring": "The definition of `x \u2264 0` on pre-games, in terms of `\u2264 0` two moves later.\n", "keywords": {"pre-games": 0.09568045026443411, "definition": 0.15831692877998726, "terms": 0.15831692877998726, "moves": 0.15831692877998726}}, {"docstring": " Multiplying the second vector passed to `oangle` by a positive real does not change the angle.\n", "keywords": {"change the angle": 0.015380821171891606, "vector passed": 0.02570861714399338, "positive real": 0.02570861714399338, "oangle": 0.04491197687864554, "Multiplying": 0.09568045026443411, "angle": 0.09568045026443411, "vector": 0.15831692877998726, "passed": 0.15831692877998726, "positive": 0.15831692877998726, "real": 0.15831692877998726, "change": 0.15831692877998726}}, {"docstring": " For functions to `\u211d`, it suffices to prove `f x \u2264 f y + K * dist x y`; this version assumes `0\u2264K`.\n", "keywords": {"suffices to prove": 0.015380821171891606, "version assumes": 0.015380821171891606, "prove": 0.09568045026443411, "dist": 0.09568045026443411, "assumes": 0.09568045026443411, "functions": 0.15831692877998726, "suffices": 0.15831692877998726, "version": 0.15831692877998726}}, {"docstring": "The Monge point lies in the Monge planes.\n", "keywords": {"Monge point lies": 0.004013387474859711, "Monge planes": 0.012168928466858806, "Monge point": 0.019979597735796512, "point lies": 0.037831312533597124, "Monge": 0.051298296073502836, "planes": 0.11718348279991213, "point": 0.19092478917347616, "lies": 0.19092478917347616}}, {"docstring": "The ray of `some_vector`.\n", "keywords": {"vector": 0.04491197687864554, "ray": 0.29736558256021506}}, {"docstring": "The following diagram commutes: ```text           zmod (p^n) ----------------------------> zmod (p^m)             |                                        |             |                                        |             v                                        v truncated_witt_vector p n (zmod p) ----> truncated_witt_vector p m (zmod p) ``` Here the vertical arrows are `truncated_witt_vector.zmod_equiv_trunc`, the horizontal arrow at the top is `zmod.cast_hom`, and the horizontal arrow at the bottom is `truncated_witt_vector.truncate`.\n", "keywords": {"horizontal arrow": 0.0051279471059003075, "witt": 0.00944643441468477, "diagram commutes": 0.009652891449162437, "text zmod": 0.011907815494792884, "vertical arrows": 0.01264504860473508, "truncated": 0.0245883799113948, "zmod": 0.033938557381534847, "vector": 0.03506199981653005, "horizontal": 0.04483285912860557, "arrow": 0.05660902985712739, "vector.zmod": 0.06518514369584746, "equiv": 0.06518514369584746, "trunc": 0.06518514369584746, "zmod.cast": 0.06518514369584746, "hom": 0.06518514369584746, "vector.truncate": 0.06518514369584746, "commutes": 0.08668376726033376, "text": 0.08668376726033376, "diagram": 0.11029289887774633, "vertical": 0.11029289887774633}}, {"docstring": " If a multilinear map in finitely many variables on normed spaces satisfies the inequality `\u2225f m\u2225 \u2264 C * \u220f i, \u2225m i\u2225` on a shell `\u03b5 i / \u2225c i\u2225 < \u2225m i\u2225 < \u03b5 i` for some positive numbers `\u03b5 i` and elements `c i : \ud835\udd5c`, `1 < \u2225c i\u2225`, then it satisfies this inequality for all `m`.\n", "keywords": {"normed spaces satisfies": 0.0004929621718266745, "positive numbers": 0.005187433411017448, "multilinear map": 0.006197521204951498, "map in finitely": 0.006197521204951498, "finitely many variables": 0.006197521204951498, "variables on normed": 0.006197521204951498, "normed spaces": 0.006197521204951498, "spaces satisfies": 0.006209442141405239, "satisfies the inequality": 0.030297634733927298, "satisfies": 0.039315772337089445, "inequality": 0.039315772337089445, "shell": 0.06575641008250004, "numbers": 0.06575641008250004, "elements": 0.06575641008250004, "multilinear": 0.07848151700840181, "map": 0.07848151700840181, "finitely": 0.07848151700840181, "variables": 0.07848151700840181, "normed": 0.07848151700840181, "spaces": 0.07848151700840181}}, {"docstring": "Any matrix can be reduced to diagonal form by elementary operations.\n", "keywords": {"elementary operations": 0.04940384002065631, "reduced to diagonal": 0.09700399286574239, "diagonal form": 0.09700399286574239, "form by elementary": 0.09700399286574239, "operations": 0.15831692877998726, "matrix": 0.29736558256021506, "reduced": 0.29736558256021506, "diagonal": 0.29736558256021506, "form": 0.29736558256021506, "elementary": 0.29736558256021506}}, {"docstring": "Tell `simp` what the entries are in a transposed matrix.  Compare with `mul_apply`, `diagonal_apply_eq`, etc.\n", "keywords": {"transposed matrix": 0.03778968415624223, "simp": 0.07341787287626325, "apply": 0.07421731883939611, "matrix": 0.1513046335336394, "mul": 0.21580243272668717, "diagonal": 0.21580243272668717, "entries": 0.24066430701107397, "transposed": 0.24066430701107397, "Compare": 0.3824015048530132}}, {"docstring": "Conjugation by a fixed element is continuous when `add` is continuous.\n", "keywords": {"fixed element": 0.03663237450220032, "element is continuous": 0.04051498248759491, "add": 0.054709255964732355, "continuous": 0.10356599227702172, "Conjugation": 0.11521656054299435, "fixed": 0.1879836817695587, "element": 0.1879836817695587}}, {"docstring": " When the domain is non-empty, we do not need the `0 \u2264 C` condition in the formula for \u2225f\u2225 as an `Inf`.\n", "keywords": {"domain is non-empty": 0.00899321792126428, "non-empty": 0.0771485953923296, "condition": 0.0771485953923296, "domain": 0.1155310835876123, "formula": 0.1155310835876123}}, {"docstring": "The two ways of summing over `(i,j)` in the range `a<=i<=j<b` are equal.\n", "keywords": {"range": 0.09568045026443411, "equal": 0.09568045026443411, "summing": 0.15831692877998726}}, {"docstring": "A more general version of `finsum_mem_union'` that requires `s \u2229 support f` and `t \u2229 support f` rather than `s` and `t` to be disjoint\n", "keywords": {"union that requires": 0.012578992104256836, "general version": 0.03439110359613085, "support": 0.04092200269394482, "finsum": 0.0528063806271324, "mem": 0.0528063806271324, "union": 0.11145728654016383, "requires": 0.11145728654016383, "disjoint": 0.11145728654016383, "general": 0.1823394614884183, "version": 0.1823394614884183}}, {"docstring": "Shows that `B\u2099 = b\u2099 * B\u2099\u208b\u2081 + a\u2099 * B\u2099\u208b\u2082`.\n", "keywords": {"Shows": 0.06844581806138879}}, {"docstring": "The product of the constant function `1` over any set equals `1`.\n", "keywords": {"constant function": 0.015380821171891606, "set equals": 0.015380821171891606, "function": 0.09568045026443411, "equals": 0.09568045026443411, "product": 0.15831692877998726, "constant": 0.15831692877998726, "set": 0.15831692877998726}}, {"docstring": "0 is in the set of natural number multiples of an element of an `add_monoid`.\n", "keywords": {"natural number multiples": 0.0016012214736657916, "set of natural": 0.013527995261974615, "natural number": 0.013527995261974615, "number multiples": 0.013527995261974615, "add": 0.04491197687864554, "monoid": 0.04491197687864554, "set": 0.1155310835876123, "natural": 0.1155310835876123, "number": 0.1155310835876123, "multiples": 0.1155310835876123, "element": 0.1155310835876123}}, {"docstring": "Composing two multiplications on the left by `y` then `x` is equal to a multiplication on the left by `x * y`.\n", "keywords": {"Composing two multiplications": 0.06651687563559956, "left": 0.07915846438999363, "Composing": 0.12363091320521931, "equal": 0.2005079697193566, "multiplications": 0.22714242496584958}}, {"docstring": " Given `f : normed_group_hom G H` for some complete `G`, if every element `x` of the image of an isometric immersion `j : normed_group_hom K H` has a preimage under `f` whose norm is at most `C*\u2225x\u2225` then the same holds for elements of the (topological) closure of this image with constant `C+\u03b5` instead of `C`, for any positive `\u03b5`. This is useful in particular if `j` is the inclusion of a normed group into its completion (in this case the closure is the full target group).\n", "keywords": {"isometric immersion": 0.018312169512639694, "image with constant": 0.04651574672470278, "hom": 0.05378702137061133, "holds for elements": 0.05784000362938624, "full target group": 0.06266740173292222, "group": 0.07666281924841589, "image": 0.07924695596337737, "topological": 0.09064230932465242, "normed": 0.09296749447566094, "normed group": 0.09352456630495011, "complete": 0.11946396637755265, "immersion": 0.11946396637755265, "constant": 0.11946396637755265, "positive": 0.11946396637755265, "closure": 0.12454650221130513, "target group": 0.13227996391833502, "isometric": 0.15052960988473335, "preimage": 0.15052960988473335, "norm": 0.15052960988473335, "holds": 0.15052960988473335}}, {"docstring": " Dividing `a` by the result of dividing `a` by itself results in `a` (whether or not `a` is zero).\n", "keywords": {"Dividing": 0.04784022513221706, "result of dividing": 0.06403235501803159, "result": 0.15831692877998726, "results": 0.15831692877998726}}, {"docstring": "A finitely strongly measurable function is measurable.\n", "keywords": {"finitely strongly measurable": 0.011587819648888317, "strongly measurable function": 0.011587819648888317, "finitely strongly": 0.037831312533597124, "strongly measurable": 0.0562460611896591, "measurable function": 0.0562460611896591, "function is measurable": 0.12194096740933036, "measurable": 0.13945519496053638, "finitely": 0.19092478917347616, "strongly": 0.19092478917347616, "function": 0.19092478917347616}}, {"docstring": " A closed embedding is proper, ie, inverse images of compact sets are contained in compacts. Moreover, the preimage of a compact set is compact, see `closed_embedding.is_compact_preimage`.\n", "keywords": {"embedding is proper": 0.025295593933295224, "inverse images": 0.025295593933295224, "closed embedding": 0.0569691324117757, "compact": 0.08504932743248612, "compact sets": 0.09466073004379456, "sets are contained": 0.10518285993379277, "proper": 0.13794539454673363, "inverse": 0.13794539454673363, "closed": 0.15068107894107702, "embedding": 0.17884985164559855, "images": 0.17884985164559855, "contained": 0.17884985164559855, "images of compact": 0.21656260487896034, "contained in compacts": 0.21656260487896034, "preimage": 0.23507725802126012, "sets": 0.2541905706874597, "set": 0.2541905706874597, "embedding.is": 0.2784694828000445, "compacts": 0.3401973097299445, "set is compact": 0.3490992395494446}}, {"docstring": " A function `f : \ud835\udd5c \u2192 \ud835\udd5c` is concave iff for any three points `x < y < z` the slope of the secant line of `f` on `[x, y]` is greater than the slope of the secant line of `f` on `[x, z]`.\n", "keywords": {"secant line": 0.004316058496214479, "concave iff": 0.014846954793547482, "slope": 0.04625538145093589, "secant": 0.04625538145093589, "line": 0.04625538145093589, "function": 0.08721891946868728, "points": 0.08721891946868728, "concave": 0.12095349351053106, "iff": 0.12095349351053106, "greater": 0.12095349351053106}}, {"docstring": " Test for convergence of the `p`-series: the real-valued series `\u2211' n : \u2115, 1 / n ^ p` converges if and only if `1 < p`.\n", "keywords": {"Test for convergence": 0.013089923375762187, "real-valued series": 0.014618695703961359, "series": 0.05201485183844375, "Test": 0.09329120537733218, "converges": 0.09329120537733218, "convergence": 0.1384995633470844, "real-valued": 0.1384995633470844}}, {"docstring": " A strictly convex function on an open segment is strictly upper-bounded by the max of its endpoints.\n", "keywords": {"strictly convex function": 0.009836841595559516, "convex function": 0.03439110359613085, "open segment": 0.03439110359613085, "strictly convex": 0.05033870131288873, "strictly upper-bounded": 0.05033870131288873, "segment is strictly": 0.11047974441476761, "endpoints": 0.11145728654016383, "strictly": 0.1314201551237121, "convex": 0.1823394614884183, "function": 0.1823394614884183, "open": 0.1823394614884183, "segment": 0.1823394614884183, "upper-bounded": 0.1823394614884183, "max": 0.1823394614884183}}, {"docstring": "Rectangles of countably spanning sets are countably spanning.\n", "keywords": {"countably spanning sets": 0.011782282943034048, "countably spanning": 0.027200199006318638, "spanning sets": 0.04771708711059453, "Rectangles of countably": 0.06651687563559956, "sets are countably": 0.10583238594216893, "countably": 0.11357121248292479, "spanning": 0.11357121248292479, "Rectangles": 0.12363091320521931, "sets": 0.2005079697193566}}, {"docstring": "The rank of a finite product is the sum of the ranks.\n", "keywords": {"finite product": 0.020225813225353943, "finite": 0.1408007092310104, "product": 0.1408007092310104, "sum": 0.1408007092310104, "rank": 0.14668978767482363, "ranks": 0.14668978767482363}}, {"docstring": "**Bayes' Theorem**\n", "keywords": {"Bayes' Theorem": 0.007444681613352736, "Bayes'": 0.08596317751626563, "Theorem": 0.08596317751626563}}, {"docstring": "An intermediate field is closed under division.\n", "keywords": {"closed under division": 0.04940384002065631, "intermediate field": 0.09700399286574239, "field is closed": 0.09700399286574239, "division": 0.15831692877998726, "intermediate": 0.29736558256021506, "field": 0.29736558256021506, "closed": 0.29736558256021506}}, {"docstring": "A dependent version of `mul_induction_on`.\n", "keywords": {"mul": 0.04491197687864554, "induction": 0.04491197687864554, "dependent version": 0.09700399286574239, "dependent": 0.29736558256021506, "version": 0.29736558256021506}}, {"docstring": "By definition, if `f` is invertible then `inverse f = f.symm`.\n", "keywords": {"f.symm": 0.04491197687864554, "definition": 0.09568045026443411, "inverse": 0.09568045026443411, "invertible": 0.15831692877998726}}, {"docstring": "If the radius of `p` is positive, then `\u2225p\u2099\u2225` grows at most geometrically.\n", "keywords": {"positive": 0.15831692877998726, "grows": 0.15831692877998726, "geometrically": 0.15831692877998726, "radius": 0.29736558256021506}}, {"docstring": "`point_weights_with_circumcenter` sums to 1.\n", "keywords": {"point": 0.04491197687864554, "weights": 0.04491197687864554, "circumcenter": 0.04491197687864554, "sums": 0.15831692877998726}}, {"docstring": "All eigenvalues are generalized eigenvalues.\n", "keywords": {"generalized eigenvalues": 0.06340461682679863, "eigenvalues are generalized": 0.13561210463159817, "eigenvalues": 0.14868279128010753, "generalized": 0.2005079697193566}}, {"docstring": "In a finite field of odd characteristic, not every element is a square.\n", "keywords": {"odd characteristic": 0.015380821171891606, "finite field": 0.02570861714399338, "field of odd": 0.02570861714399338, "characteristic": 0.09568045026443411, "square": 0.09568045026443411, "finite": 0.15831692877998726, "field": 0.15831692877998726, "odd": 0.15831692877998726, "element": 0.15831692877998726}}, {"docstring": "`part` extensionality\n", "keywords": {"part": 0.04491197687864554, "extensionality": 0.04491197687864554}}, {"docstring": "A real differentiable map `f` is conformal at point `x` if and only if its    differential `f'` at that point scales every inner product by a positive scalar.\n", "keywords": {"real differentiable map": 0.0038047582963498796, "differentiable map": 0.020171377334626643, "positive scalar": 0.020171377334626643, "real differentiable": 0.03346752176983843, "point scales": 0.04877831388921351, "conformal at point": 0.10742270288518664, "map": 0.10987504304330521, "differential": 0.10987504304330521, "scalar": 0.10987504304330521, "point": 0.12922594861139264, "real": 0.17995476918065306, "differentiable": 0.17995476918065306, "conformal": 0.17995476918065306, "scales": 0.17995476918065306, "product": 0.17995476918065306, "positive": 0.17995476918065306}}, {"docstring": "The operator norm satisfies the triangle inequality.\n", "keywords": {"operator norm satisfies": 0.0042542192213185686, "triangle inequality": 0.015380821171891606, "operator norm": 0.02570861714399338, "norm satisfies": 0.02570861714399338, "satisfies the triangle": 0.02570861714399338, "inequality": 0.09568045026443411, "operator": 0.15831692877998726, "norm": 0.15831692877998726, "satisfies": 0.15831692877998726, "triangle": 0.15831692877998726}}, {"docstring": "**Alias** of the reverse direction of is_extr_on_dual_iff`.\n", "keywords": {"reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "extr": 0.04491197687864554, "dual": 0.04491197687864554, "iff": 0.04491197687864554, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "Here we combine the two inductive steps into a full strong induction proof, completing the proof the harder direction of **Hall's Marriage Theorem**.\n", "keywords": {"Hall Marriage Theorem": 0.00019069876386805838, "full strong induction": 0.002317701759536957, "strong induction proof": 0.0030655831981268, "Hall Marriage": 0.003678973549549372, "Marriage Theorem": 0.003678973549549372, "inductive steps": 0.01725930885760724, "full strong": 0.01725930885760724, "strong induction": 0.01725930885760724, "harder direction": 0.01725930885760724, "induction proof": 0.022731165958219224, "completing the proof": 0.0369013403878876, "Hall": 0.05152560554278911, "Theorem": 0.05152560554278911, "proof the harder": 0.05402465708940729, "Marriage": 0.07113916035296959, "proof": 0.08531676164130114, "completing": 0.08746487982807136, "combine": 0.13025543809633414, "inductive": 0.13025543809633414, "steps": 0.13025543809633414}}, {"docstring": " The product map of two `C^n` functions within a set at a point is `C^n` within the product set at the product point.\n", "keywords": {"product map": 0.031012080413987526, "product set": 0.034281146584336335, "product point": 0.044327151783294244, "product": 0.06346659729133913, "set": 0.08704027729228296, "functions": 0.10720382857785782, "point": 0.11146455649386641, "map": 0.15797947932871687}}, {"docstring": "A version of `measurable_div_const` that assumes `has_measurable_mul` instead of  `has_measurable_div`. This can be nice to avoid unnecessary type-class assumptions.\n", "keywords": {"measurable": 0.014367647316981272, "div": 0.028453825409297823, "const": 0.08372133441717093, "mul": 0.08372133441717093, "unnecessary type-class assumptions": 0.13175456870383465, "assumes": 0.13973862464452408, "avoid unnecessary type-class": 0.18794099737086542, "version": 0.20243000046541582, "type-class assumptions": 0.2033405062995589, "nice to avoid": 0.28122846499024384, "avoid unnecessary": 0.28122846499024384, "unnecessary type-class": 0.28122846499024384, "assumptions": 0.36067747098940295, "nice": 0.46850728554503884, "avoid": 0.46850728554503884, "unnecessary": 0.46850728554503884, "type-class": 0.46850728554503884}}, {"docstring": " Assume `k = l`. If two functions defined on `fin k` and `fin l` are equal on each element, then they coincide (in the heq sense).\n", "keywords": {"Assume": 0.07258934678807509, "fin": 0.2035313113938184, "heq sense": 0.2464148712192172, "functions defined": 0.3724275679522048, "element": 0.37951425938754646, "coincide": 0.37951425938754646, "sense": 0.37951425938754646, "functions": 0.5209261917026199, "defined": 0.5209261917026199, "equal": 0.5209261917026199, "heq": 0.5209261917026199}}, {"docstring": "This will be a special case of `linear_map.to_matrix_id_eq_basis_to_matrix`.\n", "keywords": {"matrix": 0.019648131954263418, "special case": 0.035715520099333646, "linear": 0.05393656033701752, "map.to": 0.05393656033701752, "basis": 0.05393656033701752, "special": 0.18569843656348187, "case": 0.18569843656348187}}, {"docstring": "Reorder a sum.  The difference with `sum_bij'` is that the bijection is specified as a surjective injection, rather than by an inverse function.\n", "keywords": {"Reorder a sum": 0.09426040949947263, "sum": 0.13638902991725962, "Reorder": 0.1497391925531594, "surjective injection": 0.2464148712192172, "inverse function": 0.2464148712192172, "bij": 0.37951425938754646, "injection": 0.37951425938754646, "function": 0.37951425938754646, "difference": 0.5209261917026199, "bijection": 0.5209261917026199, "surjective": 0.5209261917026199, "inverse": 0.5209261917026199}}, {"docstring": "The diameter of the empty set vanishes\n", "keywords": {"empty set vanishes": 0.0025258761156662004, "set vanishes": 0.015380821171891606, "empty set": 0.02570861714399338, "vanishes": 0.09568045026443411, "diameter": 0.15831692877998726, "empty": 0.15831692877998726, "set": 0.15831692877998726}}, {"docstring": " The fundamental property of the operator norm of a continuous multilinear map: `\u2225f m\u2225` is bounded by `\u2225f\u2225` times the product of the `\u2225m i\u2225`.\n", "keywords": {"continuous multilinear map": 0.0006400448072512631, "multilinear map": 0.0065920978564317735, "times the product": 0.0065920978564317735, "fundamental property": 0.009239332327148086, "operator norm": 0.009239332327148086, "continuous multilinear": 0.009239332327148086, "map": 0.06844581806138879, "times": 0.06844581806138879, "fundamental": 0.09568045026443411, "property": 0.09568045026443411, "operator": 0.09568045026443411, "norm": 0.09568045026443411, "continuous": 0.09568045026443411, "multilinear": 0.09568045026443411, "bounded": 0.09568045026443411, "product": 0.09568045026443411}}, {"docstring": " For filtrations indexed by `\u2115`, `adapted` and `prog_measurable` are equivalent. This lemma provides `adapted f u \u2192 prog_measurable f u`. See `prog_measurable.adapted` for the reverse direction, which is true more generally.\n", "keywords": {"prog": 0.038074085552401826, "filtrations indexed": 0.05913790655548706, "adapted": 0.13522079751519683, "measurable": 0.13522079751519683, "equivalent": 0.16529024478368012, "filtrations": 0.23629618907437586, "indexed": 0.23629618907437586, "measurable.adapted": 0.36045901166017774, "reverse direction": 0.43971649421517955, "true more generally": 0.43971649421517955, "direction": 0.5004979206503933, "generally": 0.5004979206503933, "lemma": 0.5179781565670457, "reverse": 0.6102299220264804, "true": 0.6102299220264804}}, {"docstring": " Let `K` be the field of fraction of an integrally closed domain `R` and let `L` be a separable extension of `K`, generated by an integral power basis `B` such that the minimal polynomial of `B.gen` is Eisenstein at `p`. Given `z : L` integral over `R`, if `Q : polynomial R` is such that `aeval B.gen Q = p \u2022 z`, then `p \u2223 Q.coeff 0`.\n", "keywords": {"integrally closed domain": 0.0029469848115323146, "integral power basis": 0.005507654387911799, "closed domain": 0.018146691396790014, "power basis": 0.018146691396790014, "field of fraction": 0.025051757073121007, "integrally closed": 0.025051757073121007, "separable extension": 0.025051757073121007, "integral power": 0.04628701906347137, "minimal polynomial": 0.04628701906347137, "aeval B.gen": 0.05283734189180721, "Eisenstein": 0.07415504182572068, "B.gen": 0.08123961843155174, "domain": 0.11400946316464318, "generated": 0.11400946316464318, "basis": 0.11400946316464318, "Q.coeff": 0.13231503782787957, "integral": 0.1414920963381735, "polynomial": 0.1414920963381735, "field": 0.15633139333588406, "fraction": 0.15633139333588406}}, {"docstring": " If a function tends to infinity along a filter, then this function multiplied by a negative constant (on the left) tends to negative infinity.\n", "keywords": {"negative constant": 0.02028888462011333, "function multiplied": 0.030322790873945838, "filter": 0.09910285154256718, "constant": 0.09910285154256718, "left": 0.09910285154256718, "function": 0.10032724128195009, "negative": 0.10032724128195009, "multiplied": 0.14667192704153995}}, {"docstring": "The map `coe_fn : (r \u2192r s) \u2192 (\u03b1 \u2192 \u03b2)` is injective.\n", "keywords": {"coe": 0.04491197687864554, "map": 0.0771485953923296, "injective": 0.0771485953923296}}, {"docstring": "Unfolds the definition of the p-adic norm of `q` when `q \u2260 0`.\n", "keywords": {"Unfolds the definition": 0.015380821171891606, "p-adic norm": 0.02570861714399338, "Unfolds": 0.09568045026443411, "definition": 0.15831692877998726, "p-adic": 0.15831692877998726, "norm": 0.15831692877998726}}, {"docstring": "**Alias** of the reverse direction of finset.inv_nonempty_iff`.\n", "keywords": {"direction of finset.inv": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "nonempty": 0.04491197687864554, "iff": 0.04491197687864554, "finset.inv": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "The identity map preserves addition\n", "keywords": {"map preserves addition": 0.016559150827736194, "identity map preserves": 0.03339840940482845, "preserves addition": 0.04940384002065631, "identity map": 0.09700399286574239, "map preserves": 0.09700399286574239, "addition": 0.15831692877998726, "identity": 0.29736558256021506, "map": 0.29736558256021506, "preserves": 0.29736558256021506}}, {"docstring": "As submodules, subalgebras are idempotent.\n", "keywords": {"subalgebras are idempotent": 0.02570861714399338, "submodules": 0.15831692877998726, "subalgebras": 0.15831692877998726, "idempotent": 0.15831692877998726}}, {"docstring": " Let `f` be a function continuous on a convex (or, equivalently, connected) subset `D` of the real line. If `f` is differentiable on the interior of `D` and `C \u2264 f'`, then `f` grows at least as fast as `C * x` on `D`, i.e., `C * (y - x) \u2264 f y - f x` whenever `x, y \u2208 D`, `x \u2264 y`.\n", "keywords": {"real line": 0.007948096222458798, "function continuous": 0.010159422250580143, "equivalently": 0.05899937629682816, "connected": 0.05899937629682816, "subset": 0.05899937629682816, "convex": 0.07862947958994491, "line": 0.07862947958994491, "function": 0.10028582371075691, "continuous": 0.10028582371075691, "real": 0.10028582371075691, "grows": 0.22862739428695167, "differentiable": 0.2790829227183407, "interior": 0.2790829227183407, "fast": 0.2790829227183407}}, {"docstring": "The square of the smallest prime factor of a composite number `n` is at most `n`.\n", "keywords": {"smallest prime factor": 0.0042542192213185686, "composite number": 0.015380821171891606, "smallest prime": 0.02570861714399338, "prime factor": 0.02570861714399338, "number": 0.09568045026443411, "square": 0.15831692877998726, "smallest": 0.15831692877998726, "prime": 0.15831692877998726, "factor": 0.15831692877998726, "composite": 0.15831692877998726}}, {"docstring": " Special case of the sandwich theorem; see `tendsto_of_tendsto_of_tendsto_of_le_of_le` and  `tendsto_of_tendsto_of_tendsto_of_le_of_le'` for the general case.\n", "keywords": {"tendsto": 0.005887472982869755, "sandwich theorem": 0.008519153402548964, "Special case": 0.009715105824408087, "general case": 0.011572062335434532, "case": 0.057074901459560415, "Special": 0.08428950745642809, "theorem": 0.08428950745642809, "sandwich": 0.1002163940191814, "general": 0.1002163940191814}}, {"docstring": " If `f : \ud835\udd5c \u2192 \ud835\udd5c` is strictly concave, then for any three points `x < y < z` the slope of the secant line of `f` on `[x, y]` is strictly greater than the slope of the secant line of `f` on `[x, z]`.\n", "keywords": {"secant line": 0.004757990755870543, "strictly concave": 0.011637587638149713, "strictly greater": 0.016191642145386844, "slope": 0.04854451872810375, "secant": 0.04854451872810375, "line": 0.04854451872810375, "strictly": 0.06383638463530678, "concave": 0.09010309908069472, "points": 0.09010309908069472, "greater": 0.12480069379377481}}, {"docstring": " A shear mapping preserves the measure `\u03bc.prod \u03bd`. This condition is part of the definition of a measurable group in [Halmos, \u00a759]. There, the map in this lemma is called `S`.\n", "keywords": {"shear mapping preserves": 0.004737258569048452, "preserves the measure": 0.01859446618045681, "shear mapping": 0.027581485432184485, "mapping preserves": 0.027581485432184485, "measure": 0.11142476118001256, "\u03bc.prod": 0.11142476118001256, "Halmos": 0.12279633060176753, "shear": 0.16383273847958243, "mapping": 0.16383273847958243, "preserves": 0.16383273847958243, "condition is part": 0.19613242932716538, "measurable group": 0.19613242932716538, "lemma is called": 0.23956129807083346, "called": 0.3881970960906714, "condition": 0.4049347717850166, "part": 0.4049347717850166, "definition": 0.4049347717850166, "measurable": 0.4049347717850166, "group": 0.4049347717850166, "map": 0.49784754196738834}}, {"docstring": "See also `finsum_mem_finset_product'`.\n", "keywords": {"finsum": 0.04491197687864554, "mem": 0.04491197687864554, "finset": 0.04491197687864554, "product": 0.04491197687864554}}, {"docstring": "A helper lemma: the characteristic is prime if it is non-zero.\n", "keywords": {"helper lemma": 0.015380821171891606, "characteristic is prime": 0.02570861714399338, "lemma": 0.09568045026443411, "non-zero": 0.09568045026443411, "helper": 0.15831692877998726, "characteristic": 0.15831692877998726, "prime": 0.15831692877998726}}, {"docstring": "For all natural numbers `n`, the pre-games `pow_half n` are numeric.\n", "keywords": {"natural numbers": 0.015380821171891606, "pow": 0.04491197687864554, "numbers": 0.09568045026443411, "pre-games": 0.09568045026443411, "half": 0.09568045026443411, "numeric": 0.09568045026443411, "natural": 0.15831692877998726}}, {"docstring": "**Law of cosines** (cosine rule), angle-at-point form.\n", "keywords": {"cosine rule": 0.0325194426147957, "Law of cosines": 0.04048113247198553, "form": 0.054709255964732355, "Law": 0.06341998722529081, "rule": 0.11521656054299435, "cosines": 0.2733568418908229, "cosine": 0.2733568418908229}}, {"docstring": "The map is always nonempty. This lemma is needed to apply `sub_mul_action.zero_mem`.\n", "keywords": {"nonempty": 0.12363091320521931, "mul": 0.17881754828257995, "action.zero": 0.17881754828257995, "mem": 0.17881754828257995, "needed to apply": 0.18075564686791562, "map": 0.2005079697193566, "lemma is needed": 0.2766850298235749, "apply": 0.32883716426354986, "lemma": 0.46553351027698087, "needed": 0.46553351027698087}}, {"docstring": "A subgroup is closed under multiplication.\n", "keywords": {"closed under multiplication": 0.04940384002065631, "subgroup is closed": 0.09700399286574239, "multiplication": 0.15831692877998726, "subgroup": 0.29736558256021506, "closed": 0.29736558256021506}}, {"docstring": " An induction principle for `projectivization`. Use as `induction v using projectivization.ind`.\n", "keywords": {"projectivization": 0.07915015343857928, "induction principle": 0.14033512486368607, "induction": 0.2405027004070563, "principle": 0.25584912197094006, "projectivization.ind": 0.40179717860981823}}, {"docstring": " If two finite measures give the same mass to the whole space and coincide on a \u03c0-system made of measurable sets, then they coincide on all sets in the \u03c3-algebra generated by the \u03c0-system.\n", "keywords": {"finite measures give": 0.0016726844279478638, "finite measures": 0.013923161052069546, "measures give": 0.013923161052069546, "made of measurable": 0.013923161052069546, "\u03c3-algebra generated": 0.013923161052069546, "\u03c0-system made": 0.017490271332507117, "measurable sets": 0.017490271332507117, "space and coincide": 0.03428479295129974, "coincide": 0.05815404476918013, "\u03c0-system": 0.07334489383741183, "sets": 0.07334489383741183, "finite": 0.11718348279991213, "measures": 0.11718348279991213, "give": 0.11718348279991213, "mass": 0.11718348279991213, "space": 0.11718348279991213, "made": 0.11718348279991213, "measurable": 0.11718348279991213, "\u03c3-algebra": 0.11718348279991213, "generated": 0.11718348279991213}}, {"docstring": " If `a` is the greatest element of `s` and `b` is the greatest element of `t`, then `max a b` is the greatest element of `s \u222a t`.\n", "keywords": {"greatest element": 0.004870483795961576, "greatest": 0.04000143249850778, "element": 0.04000143249850778, "max": 0.11355091730101774}}, {"docstring": " The `n`-th Chebyshev polynomial of the second kind evaluates on `cos \u03b8` to the value `sin ((n+1) * \u03b8) / sin \u03b8`.\n", "keywords": {"Chebyshev polynomial": 0.010084037167957315, "kind evaluates": 0.01904688389482227, "sin": 0.05101428509898996, "Chebyshev": 0.07302339921823223, "cos": 0.09202664026077896, "polynomial": 0.1367145963576765, "kind": 0.1367145963576765, "evaluates": 0.1367145963576765}}, {"docstring": " A function `f : \ud835\udd5c \u2192 \ud835\udd5c` is strictly concave iff for any three points `x < y < z` the slope of the secant line of `f` on `[x, y]` is strictly greater than the slope of the secant line of `f` on `[x, z]`.\n", "keywords": {"strictly concave iff": 0.0019471772811170283, "secant line": 0.004494879971476723, "concave iff": 0.015247332249334115, "strictly concave": 0.015461159411460987, "strictly greater": 0.015461159411460987, "slope": 0.047195508792197506, "secant": 0.047195508792197506, "line": 0.047195508792197506, "strictly": 0.06212090043737829, "function": 0.0884144486744395, "points": 0.0884144486744395, "concave": 0.12254934757080353, "iff": 0.12254934757080353, "greater": 0.12254934757080353}}, {"docstring": "**Alias** of dvd_trans`.\n", "keywords": {"Alias": 0.030396371632413578, "trans": 0.04491197687864554, "dvd": 0.15831692877998726}}, {"docstring": "Distance between the images of any two points is at most twice the norm of the function.\n", "keywords": {"Distance": 0.0771485953923296, "function": 0.0771485953923296, "images": 0.1155310835876123, "points": 0.1155310835876123, "norm": 0.1155310835876123}}, {"docstring": "If `f` maps a subspace `p` into itself, then the generalized eigenspace of the restriction    of `f` to `p` is the part of the generalized eigenspace of `f` that lies in `p`.\n", "keywords": {"generalized eigenspace": 0.0040430599899700095, "maps a subspace": 0.007331479493103858, "generalized": 0.04478074116273408, "eigenspace": 0.04478074116273408, "maps": 0.08531189896378533, "subspace": 0.08531189896378533, "restriction": 0.11840455484321102, "part": 0.11840455484321102, "lies": 0.11840455484321102}}, {"docstring": "For `z : \u210d`, there is a `g : SL(2,\u2124)` maximizing `(g\u2022z).im`\n", "keywords": {"maximizing": 0.04491197687864554}}, {"docstring": " The `0`-th coefficient of `q.comp p` is `q 0`. Since these maps are multilinear maps in zero variables, but on different spaces, we can not state this directly, so we state it when applied to arbitrary vectors (which have to be the zero vector).\n", "keywords": {"q.comp": 0.16357413056415673, "coefficient": 0.25797744796985594, "arbitrary vectors": 0.31679156975599093, "maps": 0.319270300494609, "state": 0.319270300494609, "variables": 0.4044796838522386, "spaces": 0.4044796838522386, "directly": 0.4044796838522386, "applied to arbitrary": 0.42694432300038615, "vectors": 0.43981949022622036, "vector": 0.43981949022622036, "multilinear maps": 0.5367534053623918, "multilinear": 0.5469934269729811, "applied": 0.5469934269729811, "arbitrary": 0.5469934269729811, "state this directly": 0.610973110552992, "maps are multilinear": 0.9210083146391048}}, {"docstring": "`polynomial R` is never a field for any ring `R`.\n", "keywords": {"polynomial": 0.09568045026443411, "ring": 0.09568045026443411, "field": 0.15831692877998726}}, {"docstring": " A continuous function from `\u03b1` to `\u03b2` is ae strongly measurable when one of the two spaces is second countable.\n", "keywords": {"continuous function": 0.02570861714399338, "strongly measurable": 0.02570861714399338, "countable": 0.09568045026443411, "continuous": 0.15831692877998726, "function": 0.15831692877998726, "strongly": 0.15831692877998726, "measurable": 0.15831692877998726, "spaces": 0.15831692877998726}}, {"docstring": " The map `lc_row0` is proper, that is, preimages of cocompact sets are finite in `[[* , *], [c, d]]`.\n", "keywords": {"preimages of cocompact": 0.015380821171891606, "cocompact sets": 0.02570861714399338, "sets are finite": 0.02570861714399338, "map": 0.09568045026443411, "proper": 0.09568045026443411, "preimages": 0.09568045026443411, "cocompact": 0.15831692877998726, "sets": 0.15831692877998726, "finite": 0.15831692877998726}}, {"docstring": " If `e` is also a permutation, we can write `perm_congr` completely in terms of the group structure.\n", "keywords": {"perm": 0.04491197687864554, "congr": 0.04491197687864554, "completely in terms": 0.04940384002065631, "group structure": 0.04940384002065631, "permutation": 0.15831692877998726, "write": 0.15831692877998726, "completely": 0.15831692877998726, "structure": 0.15831692877998726, "terms": 0.29736558256021506, "group": 0.29736558256021506}}, {"docstring": "A function which can be uniformly approximated by continuous functions is continuous.\n", "keywords": {"uniformly approximated": 0.04188746641162499, "continuous functions": 0.09700399286574239, "approximated by continuous": 0.13561210463159817, "continuous": 0.14868279128010753, "uniformly": 0.2005079697193566, "approximated": 0.2005079697193566, "functions is continuous": 0.2858772036260003, "function": 0.29736558256021506, "functions": 0.29736558256021506}}, {"docstring": "The list `list.insertion_sort r l` is `list.sorted` with respect to `r`.\n", "keywords": {"list.insertion": 0.04491197687864554, "list.sorted": 0.04491197687864554, "list": 0.09568045026443411, "sort": 0.09568045026443411, "respect": 0.15831692877998726}}, {"docstring": "`midpoint` does not depend on the ring `R`.\n", "keywords": {"midpoint": 0.04491197687864554, "ring": 0.15831692877998726, "depend": 0.29736558256021506}}, {"docstring": "The composition of `C^n` functions at points is `C^n`.\n", "keywords": {"functions at points": 0.015380821171891606, "functions": 0.09568045026443411, "composition": 0.15831692877998726, "points": 0.15831692877998726}}, {"docstring": " If a complex function is differentiable at a real point, then the induced real function is also differentiable at this point, with a derivative equal to the real part of the complex derivative.\n", "keywords": {"induced real function": 0.00808485199496969, "derivative equal": 0.035245190028201215, "real point": 0.03537461113057034, "complex function": 0.038682905860058694, "induced real": 0.04453206998014841, "real part": 0.04453206998014841, "real function": 0.048918404219772484, "complex derivative": 0.05014664834699713, "point": 0.06242718010531789, "function is differentiable": 0.06950266326107873, "function": 0.0852138388463465, "differentiable": 0.0852138388463465, "real": 0.09121561589843971, "complex": 0.10926120470902587, "derivative": 0.10926120470902587, "induced": 0.1557975610652636, "equal": 0.1557975610652636, "part": 0.1557975610652636}}, {"docstring": " A more general version of `finprod_mem_union_inter` that requires `s \u2229 mul_support f` and `t \u2229 mul_support f` rather than `s` and `t` to be finite.\n", "keywords": {"mul": 0.02006098734604785, "general version": 0.03663237450220032, "support": 0.042981588758132815, "finprod": 0.054709255964732355, "mem": 0.054709255964732355, "union": 0.054709255964732355, "inter": 0.054709255964732355, "requires": 0.11521656054299435, "finite": 0.11521656054299435, "general": 0.1879836817695587, "version": 0.1879836817695587}}, {"docstring": " In a strictly convex space, two vectors `x`, `y` are not in the same ray if and only if the triangle inequality for `x` and `y` is strict.\n", "keywords": {"strictly convex space": 0.0025258761156662004, "convex space": 0.015380821171891606, "strictly convex": 0.02570861714399338, "triangle inequality": 0.02570861714399338, "space": 0.09568045026443411, "vectors": 0.09568045026443411, "strict": 0.09568045026443411, "strictly": 0.15831692877998726, "convex": 0.15831692877998726, "ray": 0.15831692877998726, "triangle": 0.15831692877998726, "inequality": 0.15831692877998726}}, {"docstring": " Multiplying the second vector passed to `oangle` by a negative real produces the same angle as negating that vector.\n", "keywords": {"negative real produces": 0.0064971092056266945, "negative real": 0.033892441937102495, "real produces": 0.033892441937102495, "angle as negating": 0.033892441937102495, "vector passed": 0.04949487345881267, "oangle": 0.052376395424323874, "negating that vector": 0.10882816095144712, "Multiplying": 0.11060549338282699, "vector": 0.13023752997463905, "passed": 0.18105634546484617, "negative": 0.18105634546484617, "real": 0.18105634546484617, "produces": 0.18105634546484617, "angle": 0.18105634546484617, "negating": 0.18105634546484617}}, {"docstring": "The new distance is continuous.\n", "keywords": {"distance is continuous": 0.04940384002065631, "continuous": 0.15831692877998726, "distance": 0.29736558256021506}}, {"docstring": "A dependent version of `add_submonoid.closure_induction`.\n", "keywords": {"add": 0.04491197687864554, "submonoid.closure": 0.04491197687864554, "induction": 0.04491197687864554, "dependent version": 0.09700399286574239, "dependent": 0.29736558256021506, "version": 0.29736558256021506}}, {"docstring": " Any two maps `f : \u03b1 \u2192 \u03b2` and `g : \u03b2 \u2192 \u03b1` are inverse of each other on the sets of fixed points of `f \u2218 g` and `g \u2218 f`, respectively.\n", "keywords": {"sets of fixed": 0.013527995261974615, "fixed points": 0.013527995261974615, "maps": 0.0771485953923296, "inverse": 0.1155310835876123, "sets": 0.1155310835876123, "fixed": 0.1155310835876123, "points": 0.1155310835876123}}, {"docstring": " If two expansions (along the positive characteristic) of two separable polynomials `g` and `g'` agree, then they have the same degree.\n", "keywords": {"positive characteristic": 0.015380821171891606, "separable polynomials": 0.015380821171891606, "expansions": 0.09568045026443411, "characteristic": 0.09568045026443411, "polynomials": 0.09568045026443411, "agree": 0.09568045026443411, "degree": 0.09568045026443411, "positive": 0.15831692877998726, "separable": 0.15831692877998726}}, {"docstring": "If `a % b = c` then `b` divides `a - c`.\n", "keywords": {"divides": 0.04491197687864554}}, {"docstring": "A localization always has cardinality less than or equal to the base ring.\n", "keywords": {"base ring": 0.04940384002065631, "ring": 0.15831692877998726, "localization": 0.29736558256021506, "cardinality": 0.29736558256021506, "equal": 0.29736558256021506, "base": 0.29736558256021506}}, {"docstring": "For a compact set `s`, locally uniform convergence on `s` is just uniform convergence on `s`.\n", "keywords": {"locally uniform convergence": 0.0017874900005431058, "uniform convergence": 0.008856347932049355, "compact set": 0.014591879414444505, "locally uniform": 0.015466451569533513, "convergence": 0.05631466302318476, "uniform": 0.07726414307411156, "set": 0.09856372721054514, "locally": 0.09856372721054514, "compact": 0.14591593823007556}}, {"docstring": "Embed `fin n` into `fin (n + 1)` by appending a new `fin.last n` to the `univ`\n", "keywords": {"fin": 0.05201485183844375, "Embed": 0.054709255964732355, "univ": 0.054709255964732355, "fin.last": 0.09329120537733218, "appending": 0.1384995633470844}}, {"docstring": " `slope f a c` is a linear combination of `slope f a b` and `slope f b c`. This version explicitly provides coefficients. If `a \u2260 c`, then the sum of the coefficients is `1`, so it is actually an affine combination, see `line_map_slope_slope_sub_div_sub`.\n", "keywords": {"slope": 0.03749412097650888, "linear combination": 0.09787833740943727, "linear": 0.20765563493163222, "combination": 0.2146637201479263, "coefficients": 0.24228628737732605, "version explicitly": 0.2937452985590538, "affine combination": 0.32408140626389975, "line": 0.4035520008441063, "map": 0.4035520008441063, "div": 0.4035520008441063, "version": 0.47649798659106163, "explicitly": 0.47649798659106163, "explicitly provides coefficients": 0.5461259331341384, "sum": 0.5700996582123851, "affine": 0.5700996582123851}}, {"docstring": " Two compositions (possibly of different integers) coincide if and only if they have the same sequence of blocks.\n", "keywords": {"sequence of blocks": 0.015380821171891606, "compositions": 0.09568045026443411, "possibly": 0.09568045026443411, "integers": 0.09568045026443411, "coincide": 0.09568045026443411, "blocks": 0.09568045026443411, "sequence": 0.15831692877998726}}, {"docstring": "**Alias** of nat.coe_nat_dvd`.\n", "keywords": {"Alias": 0.030396371632413578, "nat": 0.04491197687864554, "dvd": 0.04491197687864554, "nat.coe": 0.15831692877998726}}, {"docstring": "Proof follows from \"The trace Cayley-Hamilton theorem\" by Darij Grinberg, Section 5.3\n", "keywords": {"Darij Grinberg": 0.012602360123953448, "trace Cayley-Hamilton theorem": 0.016559150827736194, "Section": 0.030396371632413578, "Cayley-Hamilton theorem": 0.04940384002065631, "Grinberg": 0.08596317751626563, "trace Cayley-Hamilton": 0.09700399286574239, "Darij": 0.1447773057422032, "Proof": 0.15831692877998726, "theorem": 0.15831692877998726, "trace": 0.29736558256021506, "Cayley-Hamilton": 0.29736558256021506}}, {"docstring": "The characteristic polynomial of `fib_rec` is `X\u00b2 - (X + 1)`.\n", "keywords": {"fib": 0.04491197687864554, "rec": 0.04491197687864554, "characteristic polynomial": 0.09700399286574239, "characteristic": 0.29736558256021506, "polynomial": 0.29736558256021506}}, {"docstring": "The arrows pseudo-equal to a zero morphism are precisely the zero morphisms\n", "keywords": {"arrows pseudo-equal": 0.037831312533597124, "morphism are precisely": 0.09464369245534064, "arrows": 0.19092478917347616, "pseudo-equal": 0.19092478917347616, "precisely": 0.19092478917347616, "morphism": 0.21173213814816125, "morphisms": 0.21173213814816125}}, {"docstring": "Any family is compressed along two identical elements.\n", "keywords": {"identical elements": 0.04940384002065631, "family is compressed": 0.09700399286574239, "elements": 0.15831692877998726, "family": 0.29736558256021506, "compressed": 0.29736558256021506, "identical": 0.29736558256021506}}, {"docstring": " If a function tends to infinity along a filter, then this function multiplied by a positive constant (on the left) also tends to infinity. For a version working in `\u2115` or `\u2124`, use `filter.tendsto.const_mul_at_top'` instead.\n", "keywords": {"positive constant": 0.017934473654079117, "function multiplied": 0.02762442478198571, "function": 0.086463051071557, "filter": 0.11333669386941954, "constant": 0.11333669386941954, "left": 0.11333669386941954, "multiplied": 0.1554527012770092, "positive": 0.1554527012770092, "version working": 0.17935612784125676, "mul": 0.22125774619993788, "top": 0.3074506896868104, "version": 0.38997397536695666, "working": 0.38997397536695666}}, {"docstring": "An `add_submonoid` is closed under addition.\n", "keywords": {"add": 0.04491197687864554, "submonoid": 0.04491197687864554, "closed under addition": 0.04940384002065631, "addition": 0.15831692877998726, "closed": 0.29736558256021506}}, {"docstring": "The minimal polynomial of a nonzero element has nonzero constant coefficient.\n", "keywords": {"nonzero constant coefficient": 0.006244834480795627, "constant coefficient": 0.021567786782198985, "minimal polynomial": 0.035715520099333646, "nonzero element": 0.05259515133015473, "nonzero constant": 0.05259515133015473, "coefficient": 0.11369206228658875, "element has nonzero": 0.11487806119690562, "nonzero": 0.13453835116331675, "minimal": 0.18569843656348187, "polynomial": 0.18569843656348187, "element": 0.18569843656348187, "constant": 0.18569843656348187}}, {"docstring": "Given a closed set `s`, a point belongs to `s` iff its infimum edistance to this set vanishes\n", "keywords": {"iff its infimum": 0.020744656539556924, "set vanishes": 0.03017959306974641, "point belongs": 0.03439110359613085, "infimum edistance": 0.03439110359613085, "closed set": 0.05033870131288873, "iff": 0.11145728654016383, "vanishes": 0.11145728654016383, "set": 0.1314201551237121, "closed": 0.1823394614884183, "point": 0.1823394614884183, "belongs": 0.1823394614884183, "infimum": 0.1823394614884183, "edistance": 0.1823394614884183}}, {"docstring": " The orthocenter is the only point lying in any two of the altitudes.\n", "keywords": {"point lying": 0.013527995261974615, "altitudes": 0.0771485953923296, "orthocenter": 0.1155310835876123, "point": 0.1155310835876123, "lying": 0.1155310835876123}}, {"docstring": "Polarization identity: The inner product, in terms of the norm.\n", "keywords": {"Polarization identity": 0.009239332327148086, "Polarization": 0.09568045026443411, "identity": 0.09568045026443411, "product": 0.09568045026443411, "norm": 0.09568045026443411, "terms": 0.15831692877998726}}, {"docstring": "`padic_norm p q` takes discrete values `p ^ -z` for `z : \u2124`.\n", "keywords": {"padic": 0.04491197687864554, "norm": 0.09568045026443411, "discrete": 0.15831692877998726}}, {"docstring": " Two vectors have inner product 0 if and only if the angle between them is \u03c0/2.\n", "keywords": {"product": 0.09568045026443411, "vectors": 0.15831692877998726, "angle": 0.15831692877998726}}, {"docstring": " If for any three points `x < y < z`, the slope of the secant line of `f : \ud835\udd5c \u2192 \ud835\udd5c` on `[x, y]` is less than the slope of the secant line of `f` on `[x, z]`, then `f` is convex.\n", "keywords": {"secant line": 0.004806531356351394, "slope": 0.048789167937164486, "secant": 0.048789167937164486, "line": 0.048789167937164486, "points": 0.09040601336440271, "convex": 0.09040601336440271}}, {"docstring": " An archimedean decidable linearly ordered `add_comm_group` has a version of the floor: for `a > 0`, any `g` in the group lies between some two consecutive multiples of `a`.\n", "keywords": {"decidable linearly ordered": 0.0015622890266839998, "archimedean decidable linearly": 0.0023499445201701115, "linearly ordered": 0.011631263860918884, "archimedean decidable": 0.017416869738890953, "decidable linearly": 0.017416869738890953, "consecutive multiples": 0.017416869738890953, "group lies": 0.022975231256290595, "add": 0.0514064682630094, "comm": 0.0514064682630094, "group": 0.08582803953788926, "ordered": 0.0878757573221198, "floor": 0.0878757573221198, "archimedean": 0.13083850849172096, "decidable": 0.13083850849172096, "linearly": 0.13083850849172096, "version": 0.13083850849172096, "lies": 0.13083850849172096, "consecutive": 0.13083850849172096, "multiples": 0.13083850849172096}}, {"docstring": "Subsets of a bounded set are also bounded\n", "keywords": {"bounded set": 0.05913243875864445, "Subsets": 0.11984314898676356, "bounded": 0.14323823713631006, "set": 0.19488865479360015}}, {"docstring": "If a sum of a `finset` of size at most 1 has a given value, so do the terms in that sum.\n", "keywords": {"finset": 0.055708263664958506, "sum": 0.094808423351325, "size": 0.1408007092310104, "terms": 0.1408007092310104}}, {"docstring": " Embedding `i : fin n` into `fin (n + 1)` with a hole around `p : fin (n + 1)` never results in `p` itself\n", "keywords": {"fin": 0.047424523527210334, "Embedding": 0.06200829367341607, "hole": 0.15514278968948286, "results": 0.15514278968948286}}, {"docstring": "Inverses of elements of finite additive order have finite additive order.\n", "keywords": {"finite additive order": 0.004836221624721983, "finite additive": 0.019341598041498438, "additive order": 0.019341598041498438, "Inverses of elements": 0.026057303212184805, "additive": 0.08061786523087178, "elements of finite": 0.10868044142040656, "finite": 0.11549095123814725, "order": 0.11549095123814725, "Inverses": 0.12520420549175446, "order have finite": 0.18558150351287403, "elements": 0.20283314940424746}}, {"docstring": "The closure of a sieve is closed.\n", "keywords": {"sieve is closed": 0.04940384002065631, "closed": 0.15831692877998726, "closure": 0.29736558256021506, "sieve": 0.29736558256021506}}, {"docstring": " For a function on a convex set in a linearly ordered space (where the order and the algebraic structures aren't necessarily compatible), in order to prove that it is concave it suffices to verify the inequality `a \u2022 f x + b \u2022 f y \u2264 f (a \u2022 x + b \u2022 y)` for `x < y` and positive `a`, `b`. The main use case is `E = \u211d` however one can apply it, e.g., to `\u211d^n` with lexicographic order.\n", "keywords": {"linearly ordered space": 0.0016491920514522293, "ordered space": 0.01273036458635284, "necessarily compatible": 0.01273036458635284, "verify the inequality": 0.01273036458635284, "convex set": 0.0161906423499325, "linearly ordered": 0.0161906423499325, "algebraic structures": 0.0161906423499325, "concave it suffices": 0.0161906423499325, "suffices to verify": 0.0161906423499325, "order": 0.07756851121704096, "lexicographic order": 0.08429969350063911, "order to prove": 0.09348597846942659, "space": 0.09958698082159612, "compatible": 0.09958698082159612, "inequality": 0.09958698082159612, "positive": 0.09958698082159612, "main use case": 0.12564374152480812, "function": 0.12622472814029334, "convex": 0.12622472814029334, "set": 0.12622472814029334}}, {"docstring": " If `P u` is `false` for any set `u` that has nonempty intersection both with `s` and `t`, then `\u03bc (s \u222a t) = \u03bc s + \u03bc t`, where `\u03bc = induced_outer_measure m P0 m0`.  E.g., if `\u03b1` is an (e)metric space and `P u = diam u < r`, then this lemma implies that `\u03bc (s \u222a t) = \u03bc s + \u03bc t` on any two sets such that `r \u2264 edist x y` for all `x \u2208 s` and `y \u2208 t`.\n", "keywords": {"nonempty intersection": 0.01248825682116031, "false": 0.07026717154473598, "induced": 0.07026717154473598, "outer": 0.07026717154473598, "metric space": 0.08372631131820267, "measure": 0.08984493344092491, "lemma implies": 0.10079964531089249, "nonempty": 0.11105955098880099, "intersection": 0.11105955098880099, "set": 0.1827372087688292, "sets": 0.1827372087688292, "metric": 0.25530950237913164, "diam": 0.25530950237913164, "edist": 0.25530950237913164, "space": 0.3026044856511231, "lemma": 0.3026044856511231, "implies": 0.3026044856511231}}, {"docstring": "A special case of `colex.hom_lt_iff` which is sometimes useful.\n", "keywords": {"colex.hom": 0.04491197687864554, "iff": 0.04491197687864554, "special case": 0.09700399286574239, "special": 0.29736558256021506, "case": 0.29736558256021506}}, {"docstring": "Product of a multiset of elements in a submonoid of a `comm_monoid` is in the submonoid.\n", "keywords": {"multiset of elements": 0.01904688389482227, "comm": 0.05393656033701752, "monoid": 0.05393656033701752, "submonoid": 0.09106811155038866, "Product": 0.09202664026077896, "multiset": 0.1367145963576765, "elements": 0.1367145963576765}}, {"docstring": "Given a `triangulated_functor` and a distinguished triangle `T` of `C`, then the triangle it maps onto in `D` is also distinguished.\n", "keywords": {"triangulated": 0.05794058924527716, "functor": 0.05794058924527716, "distinguished triangle": 0.09279441717942427, "triangle it maps": 0.1311351076396852, "distinguished": 0.14570071893270706, "triangle": 0.14570071893270706, "maps": 0.19744254481508877}}, {"docstring": "For coprime `a` and `b` the prime factorization `a * b` is the union of those of `a` and `b`\n", "keywords": {"prime factorization": 0.00899321792126428, "coprime": 0.0771485953923296, "factorization": 0.0771485953923296, "prime": 0.1155310835876123, "union": 0.1155310835876123}}, {"docstring": "Generalized eigenvalues are actually just eigenvalues.\n", "keywords": {"Generalized eigenvalues": 0.0381667238781621, "Generalized": 0.12363091320521931, "eigenvalues": 0.14868279128010753}}, {"docstring": " If M is the midpoint of the segment AB and C is the same distance from A as it is from B then \u2220CMB = \u03c0 / 2.\n", "keywords": {"CMB": 0.030396371632413578, "midpoint": 0.1155310835876123, "segment": 0.1155310835876123, "distance": 0.1155310835876123}}, {"docstring": " Pythagorean theorem, subtracting vectors, if-and-only-if vector inner product form.\n", "keywords": {"Pythagorean theorem": 0.012811029635671736, "product form": 0.021114872146320032, "subtracting vectors": 0.03079770075447455, "vector inner product": 0.11245662598947327, "Pythagorean": 0.11246769819744627, "theorem": 0.11246769819744627, "subtracting": 0.11246769819744627, "form": 0.11246769819744627, "product": 0.18385948854246909, "vectors": 0.26565442043121734, "vector": 0.26565442043121734}}, {"docstring": "A prime natural number is prime in `\u2124[i]` if and only if it is `3` mod `4`\n", "keywords": {"prime natural number": 0.011587819648888317, "natural number": 0.037831312533597124, "mod": 0.055708263664958506, "prime natural": 0.0562460611896591, "number is prime": 0.12194096740933036, "prime": 0.13945519496053638, "natural": 0.19092478917347616, "number": 0.19092478917347616}}, {"docstring": "The angle between a vector and a negative multiple of a vector.\n", "keywords": {"negative multiple": 0.020225813225353943, "vector": 0.07334489383741181, "angle": 0.1408007092310104, "negative": 0.1408007092310104, "multiple": 0.1408007092310104}}, {"docstring": " If `edist (f n) (f (n+1))` is bounded by `C * 2^-n`, then the distance from `f n` to the limit of `f` is bounded above by `2 * C * 2^-n`.\n", "keywords": {"bounded": 0.049557796192334434, "edist": 0.055708263664958506, "distance": 0.1036452554536235, "limit": 0.1036452554536235}}, {"docstring": "The minimal polynomial of `1` is `X - 1`.\n", "keywords": {"minimal polynomial": 0.02570861714399338, "minimal": 0.15831692877998726, "polynomial": 0.15831692877998726}}, {"docstring": "Postcomposing `f` with `prod.fst` is `C^n`\n", "keywords": {"Postcomposing": 0.04491197687864554, "prod.fst": 0.04491197687864554}}, {"docstring": " A prime `p` is a unit in a finite commutative ring `R` iff it does not divide the characteristic.\n", "keywords": {"finite commutative ring": 0.0010606143890052174, "commutative ring": 0.00899321792126428, "divide the characteristic": 0.00899321792126428, "finite commutative": 0.013527995261974615, "prime": 0.0771485953923296, "ring": 0.0771485953923296, "iff": 0.0771485953923296, "characteristic": 0.0771485953923296, "unit": 0.1155310835876123, "finite": 0.1155310835876123, "commutative": 0.1155310835876123, "divide": 0.1155310835876123}}, {"docstring": " The `at_bot` filter for an open interval `Iic a` comes from the `at_bot` filter in the ambient order.\n", "keywords": {"open interval": 0.013833902242147065, "ambient order": 0.013833902242147065, "bot": 0.020944683225967962, "filter": 0.054147325146855434, "Iic": 0.05435364549612988, "interval": 0.09593831581184391, "order": 0.09593831581184391, "open": 0.14222822903176371, "ambient": 0.14222822903176371}}, {"docstring": " If a type carries two unital binary operations that distribute over each other, then these operations are associative.  In fact, they give a commutative monoid structure, see `eckmann_hilton.comm_monoid`.\n", "keywords": {"unital binary operations": 0.022619048026866942, "type carries": 0.06293003982763551, "carries two unital": 0.06293003982763551, "unital binary": 0.06293003982763551, "binary operations": 0.08303696244858727, "operations are associative": 0.10940492432583519, "associative": 0.1531727145735673, "operations": 0.1575511279697302, "operations that distribute": 0.17314790275908196, "eckmann": 0.21826204231687923, "hilton.comm": 0.21826204231687923, "type": 0.2433193585127945, "carries": 0.2433193585127945, "unital": 0.2433193585127945, "binary": 0.2433193585127945, "distribute": 0.2433193585127945, "commutative monoid structure": 0.2581301912166428, "monoid": 0.30753389830415107, "monoid structure": 0.3111469262860867, "give a commutative": 0.38571507274593425}}, {"docstring": "**Alias** of the forward direction of dense_closure`.\n", "keywords": {"direction of dense": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "closure": 0.04491197687864554, "dense": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " `R` is integrally closed iff all integral elements of its fraction field `K` are also elements of `R`.\n", "keywords": {"integrally closed iff": 0.006822309199625382, "fraction field": 0.021114872146320032, "integrally closed": 0.034987023778306175, "closed iff": 0.034987023778306175, "iff all integral": 0.034987023778306175, "integral elements": 0.038330279597458564, "elements": 0.10038999320777726, "field": 0.11246769819744627, "integrally": 0.18385948854246909, "closed": 0.18385948854246909, "iff": 0.18385948854246909, "integral": 0.18385948854246909, "fraction": 0.18385948854246909}}, {"docstring": "A continuous linear map is zero iff its norm vanishes.\n", "keywords": {"continuous linear map": 0.03339840940482845, "norm vanishes": 0.04940384002065631, "continuous linear": 0.09700399286574239, "linear map": 0.09700399286574239, "iff its norm": 0.09700399286574239, "vanishes": 0.15831692877998726, "continuous": 0.29736558256021506, "linear": 0.29736558256021506, "map": 0.29736558256021506, "iff": 0.29736558256021506, "norm": 0.29736558256021506}}, {"docstring": " A subfamily of a linearly independent family (i.e., a composition with an injective map) is a linearly independent family.\n", "keywords": {"linearly independent family": 0.00030296351235166403, "independent family": 0.003178101858920796, "linearly independent": 0.00445632759084731, "injective map": 0.010891387441515238, "family": 0.03360000303906402, "linearly": 0.04699447171101985, "independent": 0.04699447171101985, "map": 0.08816010171372306, "subfamily": 0.122209967475991, "composition": 0.122209967475991, "injective": 0.122209967475991}}, {"docstring": " If a composition of a function `f` followed by an injection `g` is locally constant, then the locally constant property descends to `f`.\n", "keywords": {"constant property descends": 0.008897885504732549, "locally constant property": 0.009986353232843036, "locally constant": 0.024140905658634568, "property descends": 0.038584678130008584, "constant property": 0.0431505389096901, "locally": 0.10730569120144322, "constant": 0.10730569120144322, "function": 0.11840455484321102, "injection": 0.11840455484321102, "composition": 0.19274649316101516, "property": 0.19274649316101516, "descends": 0.19274649316101516}}, {"docstring": " See `submodule.span_smul_eq` (in `ring_theory.ideal.operations`) for `span R (r \u2022 s) = r \u2022 span R s` that holds for arbitrary `r` in a `comm_semiring`.\n", "keywords": {"holds for arbitrary": 0.007258217006213642, "span": 0.026674320871570213, "submodule.span": 0.052376395424323874, "smul": 0.052376395424323874, "ring": 0.052376395424323874, "comm": 0.052376395424323874, "semiring": 0.052376395424323874, "arbitrary": 0.07372301721436898, "holds": 0.09774308193464953}}, {"docstring": "The indexed supremum of a function is bounded above by a uniform bound\n", "keywords": {"uniform bound": 0.015380821171891606, "indexed supremum": 0.02570861714399338, "function is bounded": 0.02570861714399338, "bound": 0.09568045026443411, "indexed": 0.15831692877998726, "supremum": 0.15831692877998726, "function": 0.15831692877998726, "bounded": 0.15831692877998726, "uniform": 0.15831692877998726}}, {"docstring": " A set `s` is preconnected if and only if for every cover by two open sets that are disjoint on `s`, it is contained in one of the two covering sets.\n", "keywords": {"open sets": 0.03876555391209268, "covering sets": 0.03876555391209268, "sets": 0.12605697934304527, "preconnected": 0.14802380456229533, "cover": 0.14802380456229533, "open": 0.14802380456229533, "disjoint": 0.14802380456229533, "contained": 0.14802380456229533, "covering": 0.14802380456229533, "set": 0.25211395868609054}}, {"docstring": "Bound for the operator norm of `continuous_map.to_Lp`.\n", "keywords": {"continuous": 0.04491197687864554, "map.to": 0.04491197687864554, "operator norm": 0.09700399286574239, "Bound": 0.15831692877998726, "operator": 0.29736558256021506, "norm": 0.29736558256021506}}, {"docstring": "**Fermat's Theorem**: the derivative of a function at a local minimum equals zero.\n", "keywords": {"Fermat Theorem": 0.0032610119837787367, "local minimum equals": 0.0042542192213185686, "local minimum": 0.02570861714399338, "minimum equals": 0.02570861714399338, "Fermat": 0.057012387690331526, "Theorem": 0.057012387690331526, "derivative": 0.15831692877998726, "function": 0.15831692877998726, "local": 0.15831692877998726, "minimum": 0.15831692877998726, "equals": 0.15831692877998726}}, {"docstring": "The quotient norm of `0` is `0`.\n", "keywords": {"quotient norm": 0.02570861714399338, "quotient": 0.15831692877998726, "norm": 0.15831692877998726}}, {"docstring": " The geometric mean is less than or equal to the arithmetic mean, weighted version for two `nnreal` numbers.\n", "keywords": {"weighted version": 0.015380821171891606, "nnreal": 0.04491197687864554, "numbers": 0.04491197687864554, "weighted": 0.09568045026443411, "geometric": 0.15831692877998726, "equal": 0.15831692877998726, "arithmetic": 0.15831692877998726, "version": 0.15831692877998726}}, {"docstring": " Euclid's lemma: if `a \u2223 b * c` and `gcd a b = 1` then `a \u2223 c`. Compare with `is_coprime.dvd_of_dvd_mul_right` and `unique_factorization_monoid.dvd_of_dvd_mul_right_of_no_prime_factors`\n", "keywords": {"Euclid lemma": 0.016385357564215018, "dvd": 0.07682300082487513, "mul": 0.07682300082487513, "Euclid": 0.12696931063105557, "lemma": 0.12696931063105557, "gcd": 0.12696931063105557, "coprime.dvd": 0.22125774619993788, "unique": 0.22125774619993788, "factorization": 0.22125774619993788, "monoid.dvd": 0.22125774619993788, "prime": 0.22125774619993788, "factors": 0.22125774619993788, "Compare": 0.33559480906340394}}, {"docstring": " The square of the sine of `\u03c0 / 3` is `3 / 4` (this is sometimes more convenient than the result for cosine itself).\n", "keywords": {"result for cosine": 0.013527995261974615, "square": 0.1155310835876123, "sine": 0.1155310835876123, "convenient": 0.1155310835876123, "result": 0.1155310835876123, "cosine": 0.1155310835876123}}, {"docstring": "Two equivalence relations are equal iff their equivalence classes are equal.\n", "keywords": {"relations are equal": 0.045872129360315365, "equal iff": 0.045872129360315365, "classes are equal": 0.045872129360315365, "equivalence relations": 0.06104740651975287, "equivalence classes": 0.06104740651975287, "equal": 0.11107071682746067, "iff their equivalence": 0.1311351076396852, "equivalence": 0.14570071893270706, "relations": 0.19744254481508877, "iff": 0.19744254481508877, "classes": 0.19744254481508877}}, {"docstring": "If x \u2208 \u03b1 is in 2 elements of a set of sets partitioning \u03b1, those 2 sets are equal.\n", "keywords": {"sets partitioning": 0.04402106909902688, "sets are equal": 0.08870945280052796, "elements": 0.10516499823464129, "equal": 0.10516499823464129, "sets": 0.1358906983291802, "partitioning": 0.15514278968948286, "set": 0.2717813966583604, "set of sets": 0.30680918885903735}}, {"docstring": "**Alias** of pgame.lt_of_lf`.\n", "keywords": {"Alias": 0.030396371632413578, "pgame.lt": 0.09568045026443411}}, {"docstring": " If two integers from `{0, 1, -1}` result in equal elements in a ring `R` that is nontrivial and of characteristic not `2`, then they are equal.\n", "keywords": {"equal elements": 0.051351238837580325, "result in equal": 0.06956410889469501, "result": 0.11246769819744627, "ring": 0.11246769819744627, "equal": 0.13282721021560867, "integers": 0.18385948854246909, "elements": 0.18385948854246909, "nontrivial": 0.18385948854246909, "characteristic": 0.18385948854246909}}, {"docstring": "The function `r \u21a6 r\u207b\u00b9` tends to `0` on the right as `r \u2192 +\u221e`.\n", "keywords": {"function": 0.0771485953923296}}, {"docstring": "In the special case `n = 1`, `quaternion 1` is a cyclic group (of order `4`).\n", "keywords": {"special case": 0.015380821171891606, "cyclic group": 0.015380821171891606, "quaternion": 0.04491197687864554, "case": 0.09568045026443411, "group": 0.09568045026443411, "order": 0.09568045026443411, "special": 0.15831692877998726, "cyclic": 0.15831692877998726}}, {"docstring": " The scalar action via `has_mul.to_has_scalar` is transformed by the same map as the elements of the matrix, when `f` preserves multiplication.\n", "keywords": {"preserves multiplication": 0.00635981003131243, "scalar action": 0.015198370033106133, "mul.to": 0.052376395424323874, "scalar": 0.06767673667974392, "matrix": 0.07949602794131501, "preserves": 0.07949602794131501, "multiplication": 0.07949602794131501, "action": 0.11060549338282699, "transformed": 0.11060549338282699, "map": 0.11060549338282699, "elements": 0.11060549338282699}}, {"docstring": "products of nilpotent groups are nilpotent if their nipotency class is bounded\n", "keywords": {"class is bounded": 0.021567786782198985, "nipotency class": 0.035715520099333646, "nilpotent groups": 0.05259515133015473, "products of nilpotent": 0.0710891909196062, "products": 0.11369206228658875, "bounded": 0.11369206228658875, "groups are nilpotent": 0.11487806119690562, "nilpotent": 0.13453835116331675, "groups": 0.18569843656348187, "nipotency": 0.18569843656348187, "class": 0.18569843656348187}}, {"docstring": "If `\u2225p\u2099\u2225 r\u207f` is bounded in `n`, then the radius of `p` is at least `r`.\n", "keywords": {"bounded": 0.15831692877998726, "radius": 0.15831692877998726}}, {"docstring": "Tangent cone of `s` at `x` depends only on `\ud835\udcdd[s] x`.\n", "keywords": {"Tangent cone": 0.015380821171891606, "Tangent": 0.09568045026443411, "depends": 0.09568045026443411, "cone": 0.15831692877998726}}, {"docstring": " If `f : \ud835\udd5c \u2192 \ud835\udd5c` is concave, then for any three points `x < y < z` the slope of the secant line of `f` on `[x, y]` is greater than the slope of the secant line of `f` on `[x, z]`.\n", "keywords": {"secant line": 0.004619666163574043, "slope": 0.04784022513221706, "secant": 0.04784022513221706, "line": 0.04784022513221706, "concave": 0.08922538916412363, "points": 0.08922538916412363, "greater": 0.12363091320521931}}, {"docstring": "The frontier of the (open) thickening of a set is contained in an `inf_edist` level set.\n", "keywords": {"level set": 0.03017959306974641, "open": 0.0528063806271324, "edist": 0.0528063806271324, "set is contained": 0.11047974441476764, "thickening": 0.11145728654016383, "level": 0.11145728654016383, "set": 0.1314201551237121, "frontier": 0.1823394614884183, "contained": 0.1823394614884183}}, {"docstring": "The product of a monotone function and a strictly monotone function is strictly monotone.\n", "keywords": {"strictly monotone function": 0.005969477003180055, "monotone function": 0.015889194666568494, "strictly monotone": 0.015889194666568494, "monotone": 0.05771958920065093, "function": 0.08893464428012506, "strictly": 0.08893464428012506, "function is strictly": 0.11998482209440742, "product": 0.16020926794283838}}, {"docstring": " The `at_bot` filter for an open interval `Iio a` comes from the `at_bot` filter in the ambient order.\n", "keywords": {"open interval": 0.013833902242147065, "ambient order": 0.013833902242147065, "bot": 0.020944683225967962, "filter": 0.054147325146855434, "Iio": 0.05435364549612988, "interval": 0.09593831581184391, "order": 0.09593831581184391, "open": 0.14222822903176371, "ambient": 0.14222822903176371}}, {"docstring": "The exponential characteristic is a prime number or one.\n", "keywords": {"exponential characteristic": 0.09700399286574239, "prime number": 0.09700399286574239, "exponential": 0.29736558256021506, "characteristic": 0.29736558256021506, "prime": 0.29736558256021506, "number": 0.29736558256021506}}, {"docstring": "If both `a` and `b` commute with `c`, then their product commutes with `c`.\n", "keywords": {"product commutes": 0.04771708711059453, "product": 0.2005079697193566, "commute": 0.22714242496584958, "commutes": 0.22714242496584958}}, {"docstring": "Replacing a set by its closure does not change the Hausdorff edistance.\n", "keywords": {"Hausdorff edistance": 0.023458380875189744, "change the Hausdorff": 0.04498862876540802, "Replacing a set": 0.04940384002065631, "Hausdorff": 0.1447773057422032, "Replacing": 0.15831692877998726, "edistance": 0.15831692877998726, "set": 0.29736558256021506, "closure": 0.29736558256021506, "change": 0.29736558256021506}}, {"docstring": "For `p = 1` (hence, for any `p \u2264 1`), the condition `liouville_with p x` is trivial.\n", "keywords": {"liouville": 0.04491197687864554, "condition": 0.0771485953923296, "trivial": 0.0771485953923296}}, {"docstring": "`limsup` over `\u2115` is measurable. See `measurable_limsup'` for a version with a general filter.\n", "keywords": {"limsup": 0.15228179662245217, "measurable": 0.15228179662245217, "general filter": 0.3038602100374199, "filter": 0.41661206222086244, "version": 0.5593851868498433, "general": 0.5593851868498433}}, {"docstring": " Elements of the uniformity (defined generally for completions) can be characterized in terms of the distance.\n", "keywords": {"defined generally": 0.015380821171891606, "generally for completions": 0.015380821171891606, "characterized in terms": 0.02570861714399338, "Elements": 0.09568045026443411, "uniformity": 0.09568045026443411, "defined": 0.09568045026443411, "completions": 0.09568045026443411, "distance": 0.09568045026443411, "generally": 0.15831692877998726, "characterized": 0.15831692877998726, "terms": 0.15831692877998726}}, {"docstring": " If `x'` is a dual element such that the norms `\u2225x' z\u2225` are bounded for `z \u2208 s`, then a small scalar multiple of `x'` is in `polar \ud835\udd5c s`.\n", "keywords": {"small scalar multiple": 0.0016012214736657916, "dual element": 0.013527995261974615, "small scalar": 0.013527995261974615, "scalar multiple": 0.013527995261974615, "norms": 0.0771485953923296, "polar": 0.0771485953923296, "dual": 0.1155310835876123, "element": 0.1155310835876123, "bounded": 0.1155310835876123, "small": 0.1155310835876123, "scalar": 0.1155310835876123, "multiple": 0.1155310835876123}}, {"docstring": "Assumes left covariance. The lemma assuming right covariance is `right.add_pos_of_pos_of_nonneg`.\n", "keywords": {"Assumes left covariance": 0.025009953048540364, "Assumes left": 0.04325492719738993, "pos": 0.08105151263492691, "left covariance": 0.14033512486368607, "Assumes": 0.16205454282434614, "right.add": 0.22989350183706597, "nonneg": 0.22989350183706597, "covariance": 0.2405027004070563, "left": 0.25584912197094006, "lemma assuming": 0.42082946769804974, "lemma": 0.544229518153821, "assuming": 0.544229518153821, "assuming right covariance": 0.6333818627846869}}, {"docstring": "See `tsub_tsub_le` for an inequality.\n", "keywords": {"tsub": 0.02245598843932277, "inequality": 0.12363091320521931}}, {"docstring": "A subset of a cospherical set is cospherical.\n", "keywords": {"cospherical set": 0.05913243875864445, "set is cospherical": 0.12748048004056906, "cospherical": 0.14323823713631006, "subset": 0.19488865479360015, "set": 0.19488865479360015}}, {"docstring": "The cosine of `\u03c0 / 6` is `\u221a3 / 2`.\n", "keywords": {"cosine": 0.29736558256021506}}, {"docstring": "The definition of `x \u2264 0` on pre-games, in terms of `\u29cf 0`.\n", "keywords": {"pre-games": 0.09568045026443411, "definition": 0.15831692877998726, "terms": 0.15831692877998726}}, {"docstring": "If `f` is torus integrable then `-f` is torus integrable.\n", "keywords": {"torus integrable": 0.018650942614307144, "torus": 0.07915846438999363, "integrable": 0.11357121248292479}}, {"docstring": "The degree of `cyclotomic' n R` is `totient n` if there is a primitive root of unity in `R`.\n", "keywords": {"primitive root": 0.02570861714399338, "root of unity": 0.02570861714399338, "cyclotomic": 0.04491197687864554, "totient": 0.09568045026443411, "degree": 0.15831692877998726, "primitive": 0.15831692877998726, "root": 0.15831692877998726, "unity": 0.15831692877998726}}, {"docstring": "The cartesian product of `C^n` functions on domains is `C^n`.\n", "keywords": {"functions on domains": 0.015380821171891606, "cartesian product": 0.02570861714399338, "functions": 0.09568045026443411, "cartesian": 0.15831692877998726, "product": 0.15831692877998726, "domains": 0.15831692877998726}}, {"docstring": "Over any ring `R` satisfying the strong rank condition, if `b` is an infinite basis for a module `M`, then every maximal linearly independent set has the same cardinality as `b`.  This proof (along with some of the lemmas above) comes from [Les familles libres maximales d'un module ont-elles le meme cardinal?][lazarus1973]\n", "keywords": {"strong rank condition": 0.0033558158963534882, "maximal linearly independent": 0.0050074231799229815, "linearly independent set": 0.0050074231799229815, "satisfying the strong": 0.019296216131679936, "rank condition": 0.019296216131679936, "strong rank": 0.028599122871530974, "infinite basis": 0.028599122871530974, "maximal linearly": 0.028599122871530974, "linearly independent": 0.028599122871530974, "independent set": 0.028599122871530974, "Les familles libres": 0.040724482221014664, "d'un module ont-elles": 0.07936629997688852, "maximales d'un module": 0.07936629997688853, "Les familles": 0.07986126937809755, "familles libres maximales": 0.10881972680438481, "libres maximales d'un": 0.10881972680438481, "ring": 0.11353204506075759, "satisfying": 0.11353204506075759, "condition": 0.11353204506075759, "meme cardinal": 0.14447133778905416}}, {"docstring": "This lemma has an abbreviated name because it is used frequently.\n", "keywords": {"frequently": 0.15831692877998726, "lemma": 0.29736558256021506, "abbreviated": 0.29736558256021506}}, {"docstring": "`quot.mk r` is a surjective function.\n", "keywords": {"surjective function": 0.04940384002065631, "quot.mk": 0.15831692877998726, "function": 0.15831692877998726, "surjective": 0.29736558256021506}}, {"docstring": " The pigeonhole principle for finitely many pigeons counted by heads: there is a pigeonhole with at most as many pigeons as the floor of the average number of pigeons across all pigeonholes.\n", "keywords": {"counted by heads": 0.016246541580599908, "principle for finitely": 0.024168308283651477, "average number": 0.024168308283651477, "pigeons counted": 0.035620431257375226, "pigeonhole principle": 0.04284837031321326, "finitely many pigeons": 0.0614217766886356, "pigeons": 0.07463453804728754, "heads": 0.1040697200317232, "number of pigeons": 0.10863510532239432, "pigeonhole": 0.13373518619952043, "principle": 0.15361635625637673, "finitely": 0.15361635625637673, "counted": 0.15361635625637673, "floor": 0.15361635625637673, "average": 0.15361635625637673, "number": 0.15361635625637673}}, {"docstring": "Diameter of the convex hull of a set `s` equals the emetric diameter of `s.\n", "keywords": {"equals the emetric": 0.012741693123860753, "convex hull": 0.01904688389482227, "emetric diameter": 0.019600059420660194, "Diameter": 0.07030442419566416, "set": 0.09202664026077896, "equals": 0.09202664026077896, "convex": 0.1367145963576765, "hull": 0.1367145963576765, "emetric": 0.1367145963576765}}, {"docstring": "Given three nonzero vectors, adding the angles between them in cyclic order results in 0.\n", "keywords": {"cyclic order results": 0.0042542192213185686, "nonzero vectors": 0.015380821171891606, "adding the angles": 0.015380821171891606, "cyclic order": 0.02570861714399338, "order results": 0.02570861714399338, "vectors": 0.09568045026443411, "adding": 0.09568045026443411, "nonzero": 0.15831692877998726, "angles": 0.15831692877998726, "cyclic": 0.15831692877998726, "order": 0.15831692877998726, "results": 0.15831692877998726}}, {"docstring": "An explicit description of `\u03c7\u2084` on integers / naturals\n", "keywords": {"naturals": 0.04491197687864554, "explicit description": 0.09700399286574239, "integers": 0.15831692877998726, "explicit": 0.29736558256021506, "description": 0.29736558256021506}}, {"docstring": "The chain rule.\n", "keywords": {"chain rule": 0.04940384002065631, "rule": 0.15831692877998726, "chain": 0.29736558256021506}}, {"docstring": "If `x ^ n = 1`, then `x ^ m` is the same as `x ^ (m % n)`\n", "keywords": {}}, {"docstring": "If `x` is close to `y` and `y` is close to `z`, then `x` and `z` are at least as close.\n", "keywords": {"close": 0.06027740946351175}}, {"docstring": "If a direct sum of submodules is internal then the submodules are independent.\n", "keywords": {"direct sum": 0.03663237450220032, "submodules are independent": 0.07301337118426866, "independent": 0.11521656054299435, "submodules is internal": 0.1179331082419386, "sum of submodules": 0.11793310824193863, "submodules": 0.13667842094541144, "direct": 0.1879836817695587, "sum": 0.1879836817695587, "internal": 0.1879836817695587}}, {"docstring": "A relabelling lets us prove equivalence of games.\n", "keywords": {"equivalence of games": 0.04940384002065631, "prove equivalence": 0.09700399286574239, "games": 0.15831692877998726, "relabelling": 0.29736558256021506, "prove": 0.29736558256021506, "equivalence": 0.29736558256021506}}, {"docstring": "Left multiplication in a ring is an additive monoid morphism.\n", "keywords": {"additive monoid morphism": 0.016559150827736194, "Left multiplication": 0.04940384002065631, "monoid morphism": 0.04940384002065631, "additive monoid": 0.09700399286574239, "Left": 0.15831692877998726, "morphism": 0.15831692877998726, "multiplication": 0.29736558256021506, "ring": 0.29736558256021506, "additive": 0.29736558256021506, "monoid": 0.29736558256021506}}, {"docstring": "The closure of the interval `(-\u221e, a)` is the interval `(-\u221e, a]`.\n", "keywords": {"interval": 0.0385742976961648, "closure": 0.14832923246533666}}, {"docstring": "**Alias** of `left.add_neg_of_nonpos_of_neg`.\n", "keywords": {"neg": 0.020602899695743707, "Alias": 0.03498516242744211, "left.add": 0.055708263664958506, "nonpos": 0.055708263664958506}}, {"docstring": " If `\u03b2` is a second-countable space, then its induced topology via `f` on `\u03b1` is also second-countable.\n", "keywords": {"second-countable space": 0.03378800767844735, "induced topology": 0.037831312533597124, "space": 0.11718348279991213, "second-countable": 0.13945519496053638, "induced": 0.19092478917347616, "topology": 0.19092478917347616}}, {"docstring": "**Alias** of the forward direction of is_clopen_iff_frontier_eq_empty`.\n", "keywords": {"forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "clopen": 0.04491197687864554, "iff": 0.04491197687864554, "frontier": 0.04491197687864554, "empty": 0.04491197687864554, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "Introduction rule to prove that b is the supremum of s: it suffices to check that 1) b is an upper bound 2) every other upper bound b' satisfies b \u2264 b'.\n", "keywords": {"upper bound": 0.0048285715214240596, "Introduction rule": 0.008030297802615095, "rule to prove": 0.010660048110124063, "suffices to check": 0.010660048110124063, "upper": 0.04889983293918258, "bound": 0.04889983293918258, "Introduction": 0.07756772112218133, "satisfies": 0.07756772112218133, "rule": 0.10270155830966059, "prove": 0.10270155830966059, "supremum": 0.10270155830966059, "suffices": 0.10270155830966059, "check": 0.10270155830966059}}, {"docstring": " A sequential limit of measurable functions valued in a (pseudo) metrizable space is measurable.\n", "keywords": {"measurable functions valued": 0.009836841595559516, "metrizable space": 0.020744656539556924, "sequential limit": 0.03439110359613085, "functions valued": 0.03439110359613085, "measurable functions": 0.05033870131288873, "pseudo": 0.0528063806271324, "limit of measurable": 0.11047974441476761, "space is measurable": 0.11047974441476761, "metrizable": 0.11145728654016383, "measurable": 0.1314201551237121, "sequential": 0.1823394614884183, "limit": 0.1823394614884183, "functions": 0.1823394614884183, "valued": 0.1823394614884183, "space": 0.1823394614884183}}, {"docstring": " If `\u03b1` is a compact space, then a locally finite family of nonempty sets of `\u03b1` can have only finitely many elements, `set.finite` version.\n", "keywords": {"locally finite family": 0.0042542192213185686, "compact space": 0.015380821171891606, "finitely many elements": 0.015380821171891606, "locally finite": 0.02570861714399338, "finite family": 0.02570861714399338, "family of nonempty": 0.02570861714399338, "nonempty sets": 0.02570861714399338, "set.finite": 0.04491197687864554, "version": 0.04491197687864554, "space": 0.09568045026443411, "elements": 0.09568045026443411, "compact": 0.15831692877998726, "locally": 0.15831692877998726, "finite": 0.15831692877998726, "family": 0.15831692877998726, "nonempty": 0.15831692877998726, "sets": 0.15831692877998726, "finitely": 0.15831692877998726}}, {"docstring": "`R` is integrally closed iff it is the integral closure of itself in its field of fractions.\n", "keywords": {"integrally closed iff": 0.0042542192213185686, "field of fractions": 0.015380821171891606, "integrally closed": 0.02570861714399338, "closed iff": 0.02570861714399338, "integral closure": 0.02570861714399338, "fractions": 0.09568045026443411, "integrally": 0.15831692877998726, "closed": 0.15831692877998726, "iff": 0.15831692877998726, "integral": 0.15831692877998726, "closure": 0.15831692877998726, "field": 0.15831692877998726}}, {"docstring": "Nonzero fractional ideals contain a nonzero integer.\n", "keywords": {"Nonzero fractional ideals": 0.011587819648888317, "nonzero integer": 0.03378800767844735, "fractional ideals": 0.037831312533597124, "Nonzero fractional": 0.0562460611896591, "integer": 0.11718348279991213, "Nonzero": 0.13945519496053638, "fractional": 0.19092478917347616, "ideals": 0.19092478917347616}}, {"docstring": "Assuming `G` is strongly regular, `2*(k + 1) - m` in `G` is the number of vertices that are  adjacent to either `v` or `w` when `\u00acG.adj v w`. So it's the cardinality of  `G.neighbor_set v \u222a G.neighbor_set w`.\n", "keywords": {"strongly regular": 0.024993407724775964, "number of vertices": 0.03682288154969329, "G.neighbor": 0.050130086999601774, "G.adj": 0.06368092219558087, "Assuming": 0.0771485953923296, "regular": 0.129389133019644, "set": 0.1707205531117486, "strongly": 0.1884545376459065, "number": 0.1884545376459065, "vertices": 0.1884545376459065, "adjacent": 0.1884545376459065, "cardinality": 0.44644473044219835}}, {"docstring": " The convolution is continuous if one function is locally integrable and the other has compact support and is continuous.\n", "keywords": {"function is locally": 0.018641876658774398, "locally integrable": 0.018641876658774398, "compact support": 0.018641876658774398, "convolution is continuous": 0.019095578361119712, "continuous": 0.069255433448279, "convolution": 0.13528014248445303, "function": 0.13528014248445303, "locally": 0.13528014248445303, "integrable": 0.13528014248445303, "compact": 0.13528014248445303, "support": 0.13528014248445303}}, {"docstring": "Postcomposing `f` with `prod.snd` is `C^n`\n", "keywords": {"Postcomposing": 0.04491197687864554, "prod.snd": 0.04491197687864554}}, {"docstring": " *Engel's theorem*.  Note that this implies all traditional forms of Engel's theorem via `lie_module.nontrivial_max_triv_of_is_nilpotent`, `lie_module.is_nilpotent_iff_forall`, `lie_algebra.is_nilpotent_iff_forall`.\n", "keywords": {"Engel theorem": 0.029958579313318405, "lie": 0.0504260165903196, "nilpotent": 0.0504260165903196, "Engel": 0.08747736108187178, "iff": 0.09522931127357287, "forall": 0.09522931127357287, "theorem": 0.16155619750039987, "forms of Engel": 0.18270268840956339, "module.nontrivial": 0.2570281664977986, "max": 0.2570281664977986, "triv": 0.2570281664977986, "module.is": 0.2570281664977986, "algebra.is": 0.2570281664977986, "implies all traditional": 0.3160407238708129, "traditional forms": 0.3160407238708129, "Note": 0.3808107770370761, "implies": 0.4900460125355423, "traditional": 0.4900460125355423, "forms": 0.4900460125355423}}, {"docstring": "On non-dependent functions, `pi.single` can be expressed as an `ite`\n", "keywords": {"pi.single": 0.04491197687864554, "ite": 0.04491197687864554, "non-dependent functions": 0.04940384002065631, "functions": 0.15831692877998726, "non-dependent": 0.29736558256021506, "expressed": 0.29736558256021506}}, {"docstring": "Determinant of 1x1 matrix\n", "keywords": {"matrix": 0.04491197687864554, "Determinant": 0.15831692877998726}}, {"docstring": " In a join of sublists, taking the slice between the indices `A` and `B - 1` gives back the original sublist of index `i` if `A` is the sum of the lenghts of sublists of index `< i`, and `B` is the sum of the lengths of sublists of index `\u2264 i`.\n", "keywords": {"sublists of index": 0.002839737414846339, "original sublist": 0.0065421472811011076, "taking the slice": 0.0075509824733703025, "back the original": 0.009168069385196886, "join of sublists": 0.010379447373284523, "lenghts of sublists": 0.010379447373284523, "lengths of sublists": 0.010379447373284523, "index": 0.017225120063752004, "sublists": 0.022730547787703524, "sum": 0.0379414372625873, "sublist": 0.06819164336311058, "taking": 0.07862836337322054, "indices": 0.07862836337322054, "join": 0.09531410963978236, "slice": 0.09531410963978236, "back": 0.09531410963978236, "original": 0.09531410963978236, "lenghts": 0.09531410963978236, "lengths": 0.09531410963978236}}, {"docstring": "Given a open neighborhood `U` of `0` there is a open neighborhood `V` of `0`   such that `V + V \u2286 U`.\n", "keywords": {"open neighborhood": 0.00449660896063214, "neighborhood": 0.0385742976961648, "open": 0.05776554179380615}}, {"docstring": " Alternate form of **Faulhaber's theorem**, relating the sum of p-th powers to the Bernoulli numbers: $$\\sum_{k=1}^{n} k^p = \\sum_{i=0}^p (-1)^iB_i\\binom{p+1}{i}\\frac{n^{p+1-i}}{p+1}.$$ Deduced from `sum_range_pow`.\n", "keywords": {"Faulhaber theorem": 0.003920470915977344, "Bernoulli numbers": 0.004912258429370435, "Alternate form": 0.008999842100026224, "p-th powers": 0.011931454934156881, "sum": 0.04308738347738263, "Faulhaber": 0.04754077852935193, "Deduced": 0.04754077852935193, "binom": 0.05851265354560635, "frac": 0.05851265354560635, "range": 0.05851265354560635, "pow": 0.05851265354560635, "Bernoulli": 0.05950869488707013, "relating the sum": 0.05954277140052181, "sum of p-th": 0.07652894641126344, "Alternate": 0.0821433928358058, "theorem": 0.0821433928358058, "relating": 0.0821433928358058, "numbers": 0.0821433928358058, "form": 0.10858532979808226, "p-th": 0.10858532979808226}}, {"docstring": " An algebra over a Noetherian ring is finitely generated if and only if it is finitely presented.\n", "keywords": {"Noetherian ring": 0.017658958508402847, "finitely presented": 0.023696006808114376, "ring is finitely": 0.039293477084795844, "finitely generated": 0.039293477084795844, "Noetherian": 0.09344467948467797, "finitely": 0.10179911835611566, "presented": 0.11369206228658875, "algebra": 0.18569843656348187, "ring": 0.18569843656348187, "generated": 0.18569843656348187}}, {"docstring": " Given a closed set `s` in a Polish space, one can construct a finer Polish topology for which `s` is both open and closed.\n", "keywords": {"finer Polish topology": 0.0019429652102374699, "Polish space": 0.008987577561877996, "finer Polish": 0.013389429779731116, "Polish topology": 0.013389429779731116, "closed set": 0.018329095544611738, "construct a finer": 0.020225813225353943, "Polish": 0.04691922974344658, "open and closed": 0.06405909490722954, "closed": 0.094808423351325, "set": 0.09492398510093508, "space": 0.09492398510093508, "construct": 0.1408007092310104, "finer": 0.1408007092310104, "topology": 0.1408007092310104, "open": 0.1408007092310104}}, {"docstring": "An isometry from a metric space is a uniform inducing map\n", "keywords": {"uniform inducing map": 0.0025258761156662004, "inducing map": 0.015380821171891606, "metric space": 0.02570861714399338, "uniform inducing": 0.02570861714399338, "map": 0.09568045026443411, "isometry": 0.15831692877998726, "metric": 0.15831692877998726, "space": 0.15831692877998726, "uniform": 0.15831692877998726, "inducing": 0.15831692877998726}}, {"docstring": "**Alias** of the reverse direction of is_coatom_dual_iff_is_atom`.\n", "keywords": {"reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "coatom": 0.04491197687864554, "dual": 0.04491197687864554, "iff": 0.04491197687864554, "atom": 0.04491197687864554, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "**Alias** of ssubset_asymm`.\n", "keywords": {"Alias": 0.030396371632413578, "asymm": 0.04491197687864554, "ssubset": 0.15831692877998726}}, {"docstring": "`sinh` is strictly monotone.\n", "keywords": {"sinh": 0.04491197687864554, "strictly monotone": 0.04940384002065631, "monotone": 0.15831692877998726, "strictly": 0.29736558256021506}}, {"docstring": "Composing on the left by a uniformly continuous function preserves uniform convergence\n", "keywords": {"preserves uniform convergence": 0.016559150827736194, "uniformly continuous function": 0.03339840940482845, "continuous function preserves": 0.03339840940482845, "function preserves uniform": 0.03339840940482845, "uniform convergence": 0.04940384002065631, "uniformly continuous": 0.09700399286574239, "continuous function": 0.09700399286574239, "function preserves": 0.09700399286574239, "preserves uniform": 0.09700399286574239, "Composing": 0.15831692877998726, "convergence": 0.15831692877998726, "left": 0.29736558256021506, "uniformly": 0.29736558256021506, "continuous": 0.29736558256021506, "function": 0.29736558256021506, "preserves": 0.29736558256021506, "uniform": 0.29736558256021506}}, {"docstring": " If `s` is a closed set, `v` is a partial refinement, and `i` is an index such that `i \u2209 v.carrier`, then there exists a partial refinement that is strictly greater than `v`.\n", "keywords": {"partial refinement": 0.005043101964648141, "closed set": 0.009805590062567161, "exists a partial": 0.01020509927619487, "strictly greater": 0.013671134401986838, "partial": 0.043493458706749734, "v.carrier": 0.055174169687121036, "refinement": 0.05739649452642253, "set": 0.08361462103586328, "closed": 0.1161324896811994, "index": 0.1161324896811994, "exists": 0.1161324896811994, "strictly": 0.1161324896811994, "greater": 0.1161324896811994}}, {"docstring": "`index_exists` asserts there is some `i` with `j < c.size_up_to (i+1)`. In the next definition `index` we use `nat.find` to produce the minimal such index.\n", "keywords": {"exists": 0.0841806587936062, "c.size": 0.0841806587936062, "index": 0.08656780947886972, "asserts": 0.14045816809296, "nat.find": 0.2419870397426118, "produce the minimal": 0.2835242748532935, "minimal such index": 0.33005044963652697, "definition": 0.3620558707913512, "produce": 0.46999483014518423, "minimal": 0.46999483014518423}}, {"docstring": "This is a dummy declaration that is used to determine the project folder of mathlib, using the  tactic `tactic.decl_olean`. This is used in `tactic.get_mathlib_dir`.\n", "keywords": {"dummy declaration": 0.03186031252185994, "determine the project": 0.03186031252185994, "project folder": 0.03186031252185994, "tactic.decl": 0.07127359713294396, "olean": 0.07127359713294396, "folder of mathlib": 0.08431720363171344, "mathlib": 0.10172040962391128, "tactic": 0.12005345163377214, "dummy": 0.17571731612679403, "declaration": 0.17571731612679403, "determine": 0.17571731612679403, "project": 0.17571731612679403, "folder": 0.17571731612679403, "tactic.get": 0.2104440927400966, "dir": 0.2104440927400966}}, {"docstring": "A stronger version of `mul_right_injective`\n", "keywords": {"mul": 0.04491197687864554, "injective": 0.04491197687864554, "stronger version": 0.09700399286574239, "stronger": 0.29736558256021506, "version": 0.29736558256021506}}, {"docstring": "On a compact space, locally uniform convergence is just uniform convergence.\n", "keywords": {"locally uniform convergence": 0.006601828379357372, "compact space": 0.02459177073035948, "uniform convergence": 0.02595416362410219, "locally uniform": 0.02775343253575919, "uniform": 0.11107071682746067, "convergence": 0.11107071682746067, "space": 0.12156210109285605, "locally": 0.12156210109285605, "compact": 0.19744254481508877}}, {"docstring": "**Alias** of the reverse direction of asymptotics.is_o_norm_left`.\n", "keywords": {"direction of asymptotics.is": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "norm": 0.04491197687864554, "left": 0.04491197687864554, "asymptotics.is": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "Binary strict **rearrangement inequality**.\n", "keywords": {"Binary strict": 0.02570861714399338, "rearrangement inequality": 0.02570861714399338, "Binary": 0.15831692877998726, "strict": 0.15831692877998726, "rearrangement": 0.15831692877998726, "inequality": 0.15831692877998726}}, {"docstring": " The first theorem that characterises the function `reduce`: a word reduces to its maximal reduction.\n", "keywords": {"characterises the function": 0.021114872146320032, "maximal reduction": 0.021114872146320032, "theorem that characterises": 0.034987023778306175, "word reduces": 0.051351238837580325, "function": 0.11246769819744627, "reduction": 0.11246769819744627, "theorem": 0.18385948854246909, "characterises": 0.18385948854246909, "word": 0.18385948854246909, "maximal": 0.18385948854246909, "reduce": 0.26565442043121734, "reduces": 0.26565442043121734}}, {"docstring": "The \u201cprojection formula\u201d for Frobenius and Verschiebung.\n", "keywords": {"Frobenius and Verschiebung": 0.012602360123953448, "projection formula": 0.02570861714399338, "Verschiebung": 0.08596317751626563, "Frobenius": 0.1447773057422032, "projection": 0.15831692877998726, "formula": 0.15831692877998726}}, {"docstring": "Two metric space structures with the same distance coincide.\n", "keywords": {"metric space structures": 0.03339840940482845, "distance coincide": 0.04940384002065631, "metric space": 0.09700399286574239, "space structures": 0.09700399286574239, "coincide": 0.15831692877998726, "metric": 0.29736558256021506, "space": 0.29736558256021506, "structures": 0.29736558256021506, "distance": 0.29736558256021506}}, {"docstring": " If the distance between `s n` and `s m`, `n \u2264 m` is bounded above by `b n` and `b` converges to zero, then `s` is a Cauchy sequence.\n", "keywords": {"Cauchy sequence": 0.005157590407455398, "Cauchy": 0.06650965107397505, "converges": 0.0771485953923296, "sequence": 0.0771485953923296, "distance": 0.1155310835876123, "bounded": 0.1155310835876123}}, {"docstring": " Theorems about `padic_norm_e` are named with a `'` so the names do not conflict with the equivalent theorems about `norm` (`\u2225 \u2225`).\n", "keywords": {"norm": 0.021352745740207107, "equivalent theorems": 0.04437656514447953, "padic": 0.05706283858652404, "Theorems": 0.10901343189444501, "named": 0.19488865479360015, "conflict": 0.19488865479360015, "equivalent": 0.19488865479360015}}, {"docstring": " Rational root theorem part 2: if `r : f.codomain` is a root of a polynomial over the ufd `A`, then the denominator of `r` divides the leading coefficient\n", "keywords": {"Rational root theorem": 0.0021032528023050994, "root theorem part": 0.0021032528023050994, "theorem part": 0.011752516585960321, "divides the leading": 0.011752516585960321, "leading coefficient": 0.011752516585960321, "Rational root": 0.015502416866670433, "root theorem": 0.023251977563965413, "f.codomain": 0.051687907611449965, "root": 0.08640514249691128, "Rational": 0.0883382645966668, "part": 0.0883382645966668, "ufd": 0.0883382645966668, "divides": 0.0883382645966668, "coefficient": 0.0883382645966668, "theorem": 0.13149453879183629, "polynomial": 0.13149453879183629, "denominator": 0.13149453879183629, "leading": 0.13149453879183629}}, {"docstring": " A closed set `s` is preconnected if and only if for every cover by two closed sets that are disjoint, it is contained in one of the two covering sets.\n", "keywords": {"covering sets": 0.034240290150938706, "closed set": 0.03702092807439601, "closed": 0.08165986892166045, "disjoint": 0.10252384836042068, "sets": 0.10929268894080287, "preconnected": 0.15145892749810547, "cover": 0.15145892749810547, "contained": 0.15145892749810547, "covering": 0.15145892749810547, "set": 0.21858537788160573}}, {"docstring": "Young's inequality, `\u211d\u22650\u221e` version with real conjugate exponents.\n", "keywords": {"real conjugate exponents": 0.016559150827736194, "Young inequality": 0.02570861714399338, "version with real": 0.04940384002065631, "conjugate exponents": 0.04940384002065631, "real conjugate": 0.09700399286574239, "Young": 0.15831692877998726, "inequality": 0.15831692877998726, "version": 0.15831692877998726, "exponents": 0.15831692877998726, "real": 0.29736558256021506, "conjugate": 0.29736558256021506}}, {"docstring": " Converting a `fin (n + 1)` to `\u2115` and back results in the same value.\n", "keywords": {"fin": 0.04491197687864554, "back results": 0.09700399286574239, "Converting": 0.15831692877998726, "back": 0.29736558256021506, "results": 0.29736558256021506}}, {"docstring": " To show a reflexive relation `r : \u03b1 \u2192 \u03b1 \u2192 Prop` holds over `x y : \u03b1`, it suffices to show it holds when `x \u2260 y`.\n", "keywords": {"reflexive relation": 0.014176630379520855, "suffices to show": 0.022276459697343733, "Prop": 0.035514607549195436, "show a reflexive": 0.05315066605935327, "show": 0.07571113878390312, "relation": 0.09713402394201612, "holds": 0.09770854302279938, "show it holds": 0.11297875139847527, "reflexive": 0.14390902704051098, "suffices": 0.14390902704051098}}, {"docstring": "A subring is closed under multiplication.\n", "keywords": {"closed under multiplication": 0.04940384002065631, "subring is closed": 0.09700399286574239, "multiplication": 0.15831692877998726, "subring": 0.29736558256021506, "closed": 0.29736558256021506}}, {"docstring": "Note that this lemma has different typeclass assumptions to `smul_zero`.\n", "keywords": {"smul": 0.04491197687864554, "typeclass assumptions": 0.09700399286574239, "Note": 0.15831692877998726, "lemma": 0.29736558256021506, "typeclass": 0.29736558256021506, "assumptions": 0.29736558256021506}}, {"docstring": "The tangent bundle projection on the basis is a continuous map.\n", "keywords": {"tangent bundle projection": 0.0042542192213185686, "continuous map": 0.015380821171891606, "tangent bundle": 0.02570861714399338, "bundle projection": 0.02570861714399338, "map": 0.09568045026443411, "tangent": 0.15831692877998726, "bundle": 0.15831692877998726, "projection": 0.15831692877998726, "basis": 0.15831692877998726, "continuous": 0.15831692877998726}}, {"docstring": "Note that this goal could also be stated `(disjoint on f) a b`\n", "keywords": {"Note": 0.15831692877998726, "stated": 0.15831692877998726, "disjoint": 0.15831692877998726, "goal": 0.29736558256021506}}, {"docstring": " If `R` is a ring, then prime ideals in the localization at `M` correspond to prime ideals in the original ring `R` that are disjoint from `M`. This lemma gives the particular case for an ideal and its map, see `le_rel_iso_of_prime` for the more general relation isomorphism, and the reverse implication\n", "keywords": {"original ring": 0.016965761069257304, "prime ideals": 0.028799652733224143, "ring": 0.05405888895039656, "general relation isomorphism": 0.06840422124015776, "prime": 0.08108220300765527, "correspond to prime": 0.09103873877885624, "ideals": 0.1119487630770764, "correspond": 0.11820320100900902, "relation isomorphism": 0.14053358395709994, "reverse implication": 0.14053358395709994, "localization": 0.1543014132467688, "original": 0.1543014132467688, "disjoint": 0.1543014132467688, "general relation": 0.17709878393774722, "ideal": 0.2238975261541528, "rel": 0.2443157925021336, "iso": 0.2443157925021336, "map": 0.31766598209031255, "isomorphism": 0.31766598209031255, "implication": 0.31766598209031255}}, {"docstring": " The **Schwarz Lemma**: if `f : \u2102 \u2192 E` sends an open disk with center `c` and radius `R\u2081` to an open ball with center `f c` and radius `R\u2082`, then for any `z` in the former disk we have `dist (f z) (f c) \u2264 (R\u2082 / R\u2081) * dist z c`.\n", "keywords": {"Schwarz Lemma": 0.002602703729839622, "ball with center": 0.008703493700725899, "sends an open": 0.0115801826783701, "open ball": 0.016112662381208842, "open disk": 0.02079731130082446, "disk with center": 0.027806342286998017, "center": 0.03463524031625516, "radius": 0.03463524031625516, "dist": 0.048399574857772326, "Schwarz": 0.05095043913700965, "Lemma": 0.05095043913700965, "open": 0.06365221994565669, "disk": 0.08001918595497302, "sends": 0.0899231573538588, "ball": 0.12456094468093357}}, {"docstring": "The trace of a linear map correspond to the contraction pairing under the isomorphism `End(M) \u2243 M* \u2297 M`\n", "keywords": {"linear map correspond": 0.0016012214736657916, "linear map": 0.013527995261974615, "map correspond": 0.013527995261974615, "contraction pairing": 0.013527995261974615, "End": 0.030396371632413578, "isomorphism": 0.0771485953923296, "trace": 0.1155310835876123, "linear": 0.1155310835876123, "map": 0.1155310835876123, "correspond": 0.1155310835876123, "contraction": 0.1155310835876123, "pairing": 0.1155310835876123}}, {"docstring": " The sum and difference of two vectors are orthogonal if and only if they have the same norm.\n", "keywords": {"sum and difference": 0.02570861714399338, "vectors are orthogonal": 0.02570861714399338, "norm": 0.09568045026443411, "sum": 0.15831692877998726, "difference": 0.15831692877998726, "vectors": 0.15831692877998726, "orthogonal": 0.15831692877998726}}, {"docstring": "If `m s \u2260 0`, then for some point `x \u2208 s` and any `t \u2208 \ud835\udcdd[s] x` we have `0 < m t`.\n", "keywords": {"point": 0.0771485953923296}}, {"docstring": "A subgroup is closed under division.\n", "keywords": {"closed under division": 0.04940384002065631, "subgroup is closed": 0.09700399286574239, "division": 0.15831692877998726, "subgroup": 0.29736558256021506, "closed": 0.29736558256021506}}, {"docstring": "The non-commutative version of `finset.sum_add_distrib`\n", "keywords": {"finset.sum": 0.04491197687864554, "add": 0.04491197687864554, "distrib": 0.04491197687864554, "non-commutative version": 0.09700399286574239, "non-commutative": 0.29736558256021506, "version": 0.29736558256021506}}, {"docstring": "`average k G` is invariant under right multiplication by elements of `G`.\n", "keywords": {"multiplication by elements": 0.02570861714399338, "average": 0.09568045026443411, "invariant": 0.15831692877998726, "multiplication": 0.15831692877998726, "elements": 0.15831692877998726}}, {"docstring": "The golden ratio is irrational.\n", "keywords": {"ratio is irrational": 0.04940384002065631, "golden ratio": 0.09700399286574239, "irrational": 0.15831692877998726, "golden": 0.29736558256021506, "ratio": 0.29736558256021506}}, {"docstring": "**Alias** of the reverse direction of int.nat_abs_even`.\n", "keywords": {"direction of int.nat": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "abs": 0.04491197687864554, "int.nat": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "The set of natural number powers of an element of a monoid is closed under multiplication.\n", "keywords": {"natural number powers": 0.0016012214736657916, "closed under multiplication": 0.00899321792126428, "set of natural": 0.013527995261974615, "natural number": 0.013527995261974615, "number powers": 0.013527995261974615, "monoid is closed": 0.013527995261974615, "multiplication": 0.0771485953923296, "set": 0.1155310835876123, "natural": 0.1155310835876123, "number": 0.1155310835876123, "powers": 0.1155310835876123, "element": 0.1155310835876123, "monoid": 0.1155310835876123, "closed": 0.1155310835876123}}, {"docstring": "Extensionality rule for congruence relations.\n", "keywords": {"Extensionality rule": 0.04940384002065631, "congruence relations": 0.04940384002065631, "rule for congruence": 0.09700399286574239, "Extensionality": 0.15831692877998726, "relations": 0.15831692877998726, "rule": 0.29736558256021506, "congruence": 0.29736558256021506}}, {"docstring": " If a function is `C^n` with `1 \u2264 n` around a point, and its derivative at that point is given to us as `f'`, then `f'` is also a strict derivative.\n", "keywords": {"strict derivative": 0.03117712943655666, "point": 0.10191687733271076, "derivative": 0.10191687733271076, "function": 0.14832923246533666, "strict": 0.14832923246533666}}, {"docstring": "Product of a list of elements in an intermediate_field is in the intermediate_field.\n", "keywords": {"list of elements": 0.040564923574392765, "intermediate": 0.07726414307411157, "field": 0.07726414307411157, "Product": 0.12156210109285605, "list": 0.19744254481508877, "elements": 0.19744254481508877}}, {"docstring": "The resolvent is a unit when the argument is in the resolvent set.\n", "keywords": {"resolvent set": 0.0141210054546179, "resolvent": 0.07334489383741181, "set": 0.09492398510093508, "unit": 0.1408007092310104, "argument": 0.1408007092310104}}, {"docstring": "**Alias** of lt_of_eq_of_lt`.\n", "keywords": {"Alias": 0.030396371632413578}}, {"docstring": " Young's inequality, `\u211d\u22650` version. We use `{p q : \u211d\u22650}` in order to avoid constructing witnesses of `0 \u2264 p` and `0 \u2264 q` for the denominators.\n", "keywords": {"Young inequality": 0.008025058930468495, "avoid constructing witnesses": 0.04761981136383764, "version": 0.05899937629682816, "Young": 0.08922538916412363, "inequality": 0.08922538916412363, "order to avoid": 0.12124452117740256, "avoid constructing": 0.12124452117740256, "constructing witnesses": 0.12124452117740256, "denominators": 0.25386721785551913, "order": 0.32883716426354986, "avoid": 0.32883716426354986, "constructing": 0.32883716426354986, "witnesses": 0.32883716426354986}}, {"docstring": "The cardinality of the reals, as a type.\n", "keywords": {"reals": 0.09568045026443411, "type": 0.09568045026443411, "cardinality": 0.15831692877998726}}, {"docstring": " Any `K`-Lipschitz map from a subset `s` of a metric space `\u03b1` to a finite-dimensional real vector space `E'` can be extended to a Lipschitz map on the whole space `\u03b1`, with a slightly worse constant `lipschitz_extension_constant E' * K`.\n", "keywords": {"real vector space": 0.0012114629986967513, "finite-dimensional real vector": 0.0014788484195833093, "slightly worse constant": 0.001820076767607756, "Lipschitz map": 0.004257811730427523, "metric space": 0.010535312655664427, "vector space": 0.010535312655664427, "finite-dimensional real": 0.01283678289638654, "real vector": 0.01283678289638654, "slightly worse": 0.01283678289638654, "worse constant": 0.015761495404750102, "Lipschitz": 0.025097007907829268, "space": 0.0308685559977007, "map": 0.056073881744560586, "extension": 0.06079043137562392, "constant": 0.06891556365075004, "subset": 0.08525776441895266, "metric": 0.11257925375263696, "finite-dimensional": 0.11257925375263696, "real": 0.11257925375263696, "vector": 0.11257925375263696}}, {"docstring": "Composition of local homeomorphisms respects equivalence\n", "keywords": {"homeomorphisms respects equivalence": 0.016559150827736194, "local homeomorphisms respects": 0.03339840940482845, "Composition of local": 0.04940384002065631, "respects equivalence": 0.04940384002065631, "local homeomorphisms": 0.09700399286574239, "homeomorphisms respects": 0.09700399286574239, "Composition": 0.15831692877998726, "equivalence": 0.15831692877998726, "local": 0.29736558256021506, "homeomorphisms": 0.29736558256021506, "respects": 0.29736558256021506}}, {"docstring": "Every polynomial is a polynomial in finitely many variables.\n", "keywords": {"finitely many variables": 0.02391462167226668, "variables": 0.11984314898676356, "polynomial in finitely": 0.12748048004056908, "polynomial": 0.14323823713631006, "finitely": 0.19488865479360015}}, {"docstring": "The entrywise sup norm of a unitary matrix is at most 1.\n", "keywords": {"entrywise sup norm": 0.09700399286574239, "unitary matrix": 0.09700399286574239, "entrywise": 0.29736558256021506, "norm": 0.29736558256021506, "unitary": 0.29736558256021506, "matrix": 0.29736558256021506}}, {"docstring": " In a finite measure space, assume that any open set can be approximated from inside by closed sets. Then the measure is weakly regular.\n", "keywords": {"finite measure space": 0.022753061792166476, "approximated from inside": 0.06578911980023501, "inside by closed": 0.06578911980023501, "measure space": 0.07978072227190847, "open set": 0.08718627343839924, "closed sets": 0.08718627343839924, "finite measure": 0.1325993214048367, "space": 0.1567973745636324, "assume": 0.1567973745636324, "measure": 0.23560994179147574, "finite": 0.24845137053071667, "open": 0.24845137053071667, "approximated": 0.24845137053071667, "inside": 0.24845137053071667, "closed": 0.24845137053071667, "weakly regular": 0.26539575717554814, "set": 0.32277713168553457, "sets": 0.32277713168553457, "regular": 0.39240470458943716, "weakly": 0.5344823842910187}}, {"docstring": " If a normed ring `\ud835\udd38` is a normed algebra over two fields, then they define the same exponential function on `\ud835\udd38`.\n", "keywords": {"normed ring": 0.023102956859254058, "exponential function": 0.03498702377830618, "normed algebra": 0.03833027959745858, "normed": 0.10038999320777728, "ring": 0.11246769819744629, "fields": 0.11246769819744629, "algebra": 0.1838594885424691, "define": 0.1838594885424691, "exponential": 0.1838594885424691, "function": 0.1838594885424691}}, {"docstring": "**Alias** of the forward direction of has_deriv_within_at.Ioi_iff_Ioo`.\n", "keywords": {"forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "Ioo": 0.030396371632413578, "deriv": 0.04491197687864554, "at.Ioi": 0.04491197687864554, "iff": 0.04491197687864554, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " If all elements in a list are bounded below by `1`, then the length of the list is bounded by the sum of the elements.\n", "keywords": {"elements": 0.08061786523087178, "list": 0.08061786523087178, "bounded": 0.08061786523087178, "list are bounded": 0.10192398964132475, "list is bounded": 0.10192398964132475, "length": 0.12520420549175446, "sum": 0.12520420549175446}}, {"docstring": "Sum of a list of elements in a subring is in the subring.\n", "keywords": {"list of elements": 0.037831312533597124, "Sum": 0.11718348279991213, "subring": 0.13945519496053638, "list": 0.19092478917347616, "elements": 0.19092478917347616}}, {"docstring": " If `x` and `y` are on the same ray, then the triangle inequality becomes the equality: the norm of `x + y` is the sum of the norms of `x` and `y`. The converse is true for a strictly convex space.\n", "keywords": {"triangle inequality": 0.012836837963331987, "strictly convex space": 0.030314486710218042, "norm": 0.07380561551992748, "norms": 0.07380561551992748, "convex space": 0.08575054450382738, "ray": 0.09110429099003707, "equality": 0.09110429099003707, "converse is true": 0.103193278221259, "strictly convex": 0.103193278221259, "triangle": 0.11257949216194763, "inequality": 0.11257949216194763, "sum": 0.11257949216194763, "space": 0.25823013927927635, "converse": 0.30584395501412504, "true": 0.30584395501412504, "strictly": 0.30584395501412504, "convex": 0.30584395501412504}}, {"docstring": "If `u` is a solution to `E` and `init` designates its first `E.order` values,  then `\u2200 n, u n = E.mk_sol init n`.\n", "keywords": {"sol init": 0.017047117983997207, "E.order": 0.034278050535979626, "E.mk": 0.034278050535979626, "init": 0.09106811155038866, "designates": 0.09202664026077896, "sol": 0.09202664026077896, "solution": 0.1367145963576765}}, {"docstring": " A function is `C^(n + 1)` if and only if it is differentiable, and its derivative (formulated in terms of `fderiv`) is `C^n`.\n", "keywords": {"formulated in terms": 0.00899321792126428, "fderiv": 0.04491197687864554, "differentiable": 0.0771485953923296, "derivative": 0.0771485953923296, "formulated": 0.0771485953923296, "function": 0.1155310835876123, "terms": 0.1155310835876123}}, {"docstring": "If we can partition a sum into subsets that cancel out, then the whole sum cancels.\n", "keywords": {"sum cancels": 0.09700399286574239, "partition a sum": 0.13561210463159817, "sum into subsets": 0.13561210463159817, "subsets that cancel": 0.13561210463159817, "sum": 0.14868279128010753, "partition": 0.2005079697193566, "subsets": 0.2005079697193566, "cancel": 0.29736558256021506, "cancels": 0.29736558256021506}}, {"docstring": " To show a property is true on the odd parts, it suffices to show it is true on the vectors, closed under addition, and under left-multiplication by a pair of vectors.\n", "keywords": {"closed under addition": 0.014114791577289064, "odd parts": 0.02318964696236301, "property is true": 0.029282411849602945, "suffices to show": 0.04278976621083365, "pair of vectors": 0.068014522711112, "true": 0.07404538123493588, "vectors": 0.07404538123493588, "show a property": 0.09597798879143103, "show": 0.10679940517385458, "parts": 0.1179760024298328, "closed": 0.1179760024298328, "addition": 0.1179760024298328, "property": 0.19210750149298308, "odd": 0.19210750149298308, "suffices": 0.19210750149298308, "left-multiplication": 0.19210750149298308, "pair": 0.19210750149298308}}, {"docstring": "This cannot be an instance because it can cause infinite loops whenever the `has_scalar` arguments are still metavariables.\n", "keywords": {"scalar": 0.04491197687864554, "infinite loops": 0.09700399286574239, "arguments": 0.15831692877998726, "metavariables": 0.15831692877998726, "instance": 0.29736558256021506, "infinite": 0.29736558256021506, "loops": 0.29736558256021506}}, {"docstring": " If `M` has a nonzero determinant, then `M` as a bilinear form on `n \u2192 A` is nondegenerate.  See also `bilin_form.nondegenerate_of_det_ne_zero'` and `bilin_form.nondegenerate_of_det_ne_zero`.\n", "keywords": {"nonzero determinant": 0.02870059001627704, "bilinear form": 0.04214176950703559, "bilin": 0.0858474772518778, "form.nondegenerate": 0.0858474772518778, "det": 0.0858474772518778, "determinant": 0.13874228850015136, "nondegenerate": 0.13874228850015136, "nonzero": 0.20109116132670046, "bilinear": 0.20109116132670046, "form": 0.20109116132670046}}, {"docstring": "If two local equivs are equivalent, so are their inverses.\n", "keywords": {"equivs are equivalent": 0.015380821171891606, "local equivs": 0.02570861714399338, "equivalent": 0.09568045026443411, "inverses": 0.09568045026443411, "local": 0.15831692877998726, "equivs": 0.15831692877998726}}, {"docstring": "The Hausdorff edistance between sets or their closures is the same\n", "keywords": {"Hausdorff edistance": 0.013797198203993007, "edistance between sets": 0.02570861714399338, "Hausdorff": 0.08596317751626563, "edistance": 0.15831692877998726, "sets": 0.15831692877998726, "closures": 0.15831692877998726}}, {"docstring": " If every element belongs to at most `n` finsets, then the sum of their sizes is at most `n` times how many they are.\n", "keywords": {"element belongs": 0.02570861714399338, "finsets": 0.04491197687864554, "times": 0.09568045026443411, "element": 0.15831692877998726, "belongs": 0.15831692877998726, "sum": 0.15831692877998726, "sizes": 0.15831692877998726}}, {"docstring": "**Alias** of the forward direction of le_inv'`.\n", "keywords": {"forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "inv": 0.04491197687864554, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "The image of a proper space under an expanding onto map is proper.\n", "keywords": {"expanding onto map": 0.03663237450220032, "proper space": 0.05417025203414716, "map is proper": 0.11793310824193863, "proper": 0.13667842094541144, "image": 0.1879836817695587, "space": 0.1879836817695587, "expanding": 0.1879836817695587, "map": 0.1879836817695587}}, {"docstring": "By definition, the edistance on `closeds \u03b1` is given by the Hausdorff edistance\n", "keywords": {"Hausdorff edistance": 0.02714404025350355, "Hausdorff": 0.09474983170388594, "definition": 0.11718348279991213, "closeds": 0.11718348279991213, "edistance": 0.13945519496053638}}, {"docstring": "A subsemiring contains the semiring's 0.\n", "keywords": {"semiring": 0.15831692877998726, "subsemiring": 0.29736558256021506}}, {"docstring": " `measure_theory.outer_measure.mk_metric'.pre m r` is a trimmed measure provided that `m (closure s) = m s` for any set `s`.\n", "keywords": {"trimmed measure provided": 0.003303977098058869, "metric pre": 0.012051537142168538, "trimmed measure": 0.023937535241430174, "measure provided": 0.023937535241430174, "theory.outer": 0.052376395424323874, "measure.mk": 0.052376395424323874, "measure": 0.08782297807514622, "metric": 0.08946888050496495, "closure": 0.08946888050496495, "set": 0.08946888050496495, "pre": 0.13309686053898662, "trimmed": 0.13309686053898662, "provided": 0.13309686053898662}}, {"docstring": "Every member of an open set in a compact Hausdorff totally disconnected space  is contained in a clopen set contained in the open set.\n", "keywords": {"compact Hausdorff totally": 0.0017889417050169587, "Hausdorff totally disconnected": 0.0017889417050169587, "totally disconnected space": 0.0035659140203569443, "clopen set contained": 0.00558748582415289, "compact Hausdorff": 0.011587668958810733, "Hausdorff totally": 0.011587668958810733, "open set": 0.017785765167165138, "totally disconnected": 0.022902815606702678, "disconnected space": 0.022902815606702678, "clopen set": 0.033107154203860005, "set contained": 0.035571530334330276, "space is contained": 0.05815578541895612, "set": 0.07138845395814962, "Hausdorff": 0.07655354412482339, "open": 0.08019424814685998, "contained": 0.08019424814685998, "member": 0.14963295453349099, "compact": 0.14963295453349099, "totally": 0.14963295453349099, "disconnected": 0.14963295453349099}}, {"docstring": "`A\u1d40` has orthogonal columns iff `A` has orthogonal rows.\n", "keywords": {"orthogonal columns iff": 0.005138641994537603, "columns iff": 0.022885248721446715, "orthogonal rows": 0.02544278322318597, "orthogonal columns": 0.04212793185246166, "orthogonal": 0.10586606907408062, "iff": 0.11718348279991213, "rows": 0.11718348279991213, "columns": 0.19092478917347616}}, {"docstring": "Expand `\u27eax + y, x + y\u27eb`\n", "keywords": {"Expand": 0.04491197687864554}}, {"docstring": "The negation of an additive group homomorphism is an additive group homomorphism if the target is commutative.\n", "keywords": {"additive group homomorphism": 0.003113051075217064, "additive group": 0.01285430857199669, "group homomorphism": 0.018650942614307144, "target is commutative": 0.02541909697430123, "additive": 0.07915846438999363, "group": 0.07915846438999363, "homomorphism": 0.11357121248292479, "commutative": 0.12363091320521931, "negation": 0.2005079697193566, "target": 0.2005079697193566}}, {"docstring": " Suppose we are given a triangle `t\u2081`, and replace one of its vertices by its orthocenter, yielding triangle `t\u2082` (with vertices not necessarily listed in the same order).  Then an altitude of `t\u2082` from a vertex that was not replaced is the corresponding side of `t\u2081`.\n", "keywords": {"yielding triangle": 0.01184536943353283, "necessarily listed": 0.024373737570637474, "triangle": 0.052067598572916936, "vertices not necessarily": 0.06359109005155589, "vertices": 0.08562916729374416, "Suppose": 0.11241827525043117, "orthocenter": 0.11241827525043117, "yielding": 0.11241827525043117, "order": 0.11241827525043117, "replace": 0.1542523707523809, "necessarily": 0.1542523707523809, "listed": 0.1542523707523809, "altitude": 0.3877942850578501, "vertex": 0.3877942850578501, "replaced": 0.3877942850578501, "side": 0.3877942850578501}}, {"docstring": " Assumes left covariance. The lemma assuming right covariance is `right.one_le_mul`.\n", "keywords": {"Assumes left covariance": 0.021279743632738882, "Assumes left": 0.038712704770480444, "left covariance": 0.1273706910391025, "Assumes": 0.1531727145735673, "right.one": 0.21826204231687923, "mul": 0.21826204231687923, "covariance": 0.23216465691767033, "left": 0.2433193585127945, "lemma assuming": 0.38571507274593425, "lemma": 0.5275897320195264, "assuming": 0.5275897320195264, "assuming right covariance": 0.5846700711531686}}, {"docstring": " If a function admits a power series expansion, then it is exponentially close to the partial sums of this power series on strict subdisks of the disk of convergence.\n", "keywords": {"power series expansion": 0.001857541522362281, "power series": 0.009923843325046226, "disk of convergence": 0.012596191271856471, "series expansion": 0.012928705121968661, "function admits": 0.01883351639801717, "exponentially close": 0.01883351639801717, "partial sums": 0.01883351639801717, "strict subdisks": 0.01883351639801717, "admits a power": 0.04669543019518827, "series on strict": 0.04669543019518827, "power": 0.06975210110781824, "series": 0.06975210110781824, "expansion": 0.09149320931920597, "convergence": 0.09149320931920597, "function": 0.13596092028323714, "admits": 0.13596092028323714, "exponentially": 0.13596092028323714, "close": 0.13596092028323714, "partial": 0.13596092028323714, "sums": 0.13596092028323714}}, {"docstring": "`legendre_sym p a = -1` iff`a` is a nonsquare mod `p`.\n", "keywords": {"nonsquare mod": 0.00899321792126428, "legendre": 0.04491197687864554, "iff": 0.04491197687864554, "sym": 0.0771485953923296, "mod": 0.0771485953923296, "nonsquare": 0.1155310835876123}}, {"docstring": " Variation of `extend_eq` where we ask that `f` has a limit along `comap i (\ud835\udcdd b)` for each `b : \u03b2`. This is a strictly stronger assumption than continuity of `f`, but in a lot of cases you'd have to prove it anyway to use `continuous_extend`, so this avoids doing the work twice.\n", "keywords": {"extend": 0.041268953373875275, "Variation": 0.11777198021367995, "comap": 0.11777198021367995, "strictly stronger assumption": 0.11980479045068508, "limit": 0.17258549299654868, "continuous": 0.20684865028795477, "strictly stronger": 0.21430171753146993, "stronger assumption": 0.21430171753146993, "assumption than continuity": 0.21430171753146993, "lot of cases": 0.21430171753146993, "strictly": 0.4200969429841209, "stronger": 0.4200969429841209, "assumption": 0.4200969429841209, "continuity": 0.4200969429841209, "lot": 0.4200969429841209, "cases": 0.4200969429841209, "prove": 0.4200969429841209, "avoids": 0.4200969429841209, "work": 0.4200969429841209}}, {"docstring": "Polynomial evaluation commutes with `finset.prod`\n", "keywords": {"Polynomial evaluation commutes": 0.01655915082773619, "finset.prod": 0.04491197687864554, "Polynomial evaluation": 0.04940384002065631, "evaluation commutes": 0.09700399286574239, "Polynomial": 0.15831692877998726, "evaluation": 0.29736558256021506, "commutes": 0.29736558256021506}}, {"docstring": "For the equality, see `thickening_cthickening`.\n", "keywords": {"thickening": 0.04491197687864554, "equality": 0.15831692877998726}}, {"docstring": " Two finite measures on a Borel space are equal if they agree on all closed-open intervals.  If `\u03b1` is a conditionally complete linear order with no top element, `measure_theory.measure..ext_of_Ico` is an extensionality lemma with weaker assumptions on `\u03bc` and `\u03bd`.\n", "keywords": {"Borel space": 0.013817697322181412, "closed-open intervals": 0.019616129053898358, "space are equal": 0.029062678374844445, "finite measures": 0.05715820118570897, "Borel": 0.08110150306042654, "conditionally complete linear": 0.11121836294671093, "complete linear order": 0.11121836294671093, "intervals": 0.11448002330524422, "Ico": 0.12467331410398634, "top element": 0.14647303083770735, "finite": 0.16805324546939854, "space": 0.16805324546939854, "equal": 0.16805324546939854, "agree": 0.16805324546939854, "closed-open": 0.16805324546939854, "ext": 0.20163589309361857, "conditionally complete": 0.20481110485816773, "complete linear": 0.20481110485816773, "linear order": 0.20481110485816773, "extensionality lemma": 0.20481110485816773}}, {"docstring": "Use linearity of `cramer` and vector evaluation to take `cramer A _ i` out of a summation.\n", "keywords": {"vector evaluation": 0.03663237450220032, "cramer": 0.07162298286637953, "summation": 0.11521656054299435, "linearity": 0.1879836817695587, "vector": 0.1879836817695587, "evaluation": 0.1879836817695587}}, {"docstring": " The `i`-th element of a list coincides with the `i`-th element of any of its prefixes of length `> i`. Version designed to rewrite from the small list to the big list.\n", "keywords": {"prefixes of length": 0.02228968160793083, "element": 0.06072409388630927, "list coincides": 0.06544249179528461, "list": 0.11871832925833173, "length": 0.12642678802409135, "Version designed": 0.16340264042637093, "coincides": 0.1724609536080282, "prefixes": 0.1724609536080282, "small list": 0.175839695372051, "big list": 0.175839695372051, "designed to rewrite": 0.21403856549402517, "Version": 0.33450240956426514, "designed": 0.4198844336613173, "rewrite": 0.4198844336613173, "small": 0.4198844336613173, "big": 0.4198844336613173}}, {"docstring": "**Alias** of not_sbtw_of_btw`.\n", "keywords": {"Alias": 0.030396371632413578, "sbtw": 0.04491197687864554, "btw": 0.04491197687864554}}, {"docstring": " Rotating a vector by the angle to another vector gives the second vector if and only if the norms are equal.\n", "keywords": {"norms are equal": 0.015947706066152048, "Rotating a vector": 0.085077633387816, "vector": 0.08789333660563434, "Rotating": 0.103096657787716, "equal": 0.103096657787716, "angle": 0.15225875770903138, "norms": 0.15225875770903138}}, {"docstring": " In a finite dimensional vector space over `\u211d`, the series `\u2211 x, \u2225f x\u2225` is unconditionally summable if and only if the series `\u2211 x, f x` is unconditionally summable. One implication holds in any complete normed space, while the other holds only in finite dimensional spaces.\n", "keywords": {"unconditionally summable": 0.012152751447136356, "finite dimensional vector": 0.016048849745445015, "dimensional vector space": 0.02367906399490724, "finite dimensional spaces": 0.036259557847928545, "finite dimensional": 0.03973881347543943, "series": 0.04897516855293846, "dimensional vector": 0.05312342651863154, "unconditionally": 0.06761036133500144, "vector space": 0.07641415570735594, "summable": 0.08774085398683051, "dimensional spaces": 0.11559095228351149, "complete normed space": 0.12127941812704313, "finite": 0.1356705630006898, "dimensional": 0.1356705630006898, "vector": 0.18590504824039375, "space": 0.19092958989061815, "normed space": 0.2032233245003821, "complete normed": 0.24321780840682633, "holds": 0.24560493836084246, "implication holds": 0.27757273081958994}}, {"docstring": "The minimal polynomial of a primitive `n`-th root of unity `\u03bc` divides `cyclotomic n \u2124`.\n", "keywords": {"root of unity": 0.015380821171891606, "minimal polynomial": 0.02570861714399338, "divides": 0.04491197687864554, "primitive": 0.09568045026443411, "unity": 0.09568045026443411, "cyclotomic": 0.09568045026443411, "minimal": 0.15831692877998726, "polynomial": 0.15831692877998726, "root": 0.15831692877998726}}, {"docstring": "The `star` map in a normed star group is an isometry\n", "keywords": {"normed star group": 0.010962043841203115, "normed star": 0.05417025203414716, "star group": 0.05417025203414716, "map": 0.11521656054299435, "isometry": 0.11521656054299435, "star": 0.13667842094541144, "normed": 0.1879836817695587, "group": 0.1879836817695587}}, {"docstring": "See also `continuous_map.continuous_coe'`\n", "keywords": {"continuous": 0.04491197687864554, "map.continuous": 0.04491197687864554, "coe": 0.04491197687864554}}, {"docstring": "Assumes left covariance. The lemma assuming right covariance is `right.add_pos'`.\n", "keywords": {"Assumes left covariance": 0.021279743632738882, "Assumes left": 0.038712704770480444, "left covariance": 0.1273706910391025, "Assumes": 0.1531727145735673, "right.add": 0.21826204231687923, "pos": 0.21826204231687923, "covariance": 0.23216465691767033, "left": 0.2433193585127945, "lemma assuming": 0.38571507274593425, "lemma": 0.5275897320195264, "assuming": 0.5275897320195264, "assuming right covariance": 0.5846700711531686}}, {"docstring": "Finite wide pushouts are finite colimits, so if `C` has all finite colimits, it also has finite wide pushouts\n", "keywords": {"Finite wide pushouts": 0.002035907947668459, "finite colimits": 0.009097610847127464, "wide pushouts": 0.009129674222899491, "Finite wide": 0.012721391611592985, "colimits": 0.04219971500992198, "Finite": 0.05293303453704031, "wide": 0.058591741399956064, "pushouts": 0.0765121618811835, "pushouts are finite": 0.15844673219572528}}, {"docstring": " Technical lemma stating how `p.apply_composition` commutes with updating variables. This will be the key point to show that functions constructed from `apply_composition` retain multilinearity.\n", "keywords": {"Technical lemma stating": 0.008369545724526762, "Technical lemma": 0.033894667362119324, "commutes with updating": 0.033894667362119324, "updating variables": 0.033894667362119324, "composition": 0.04084772544731625, "lemma stating": 0.05534498969087407, "p.apply": 0.06912288085775106, "Technical": 0.14315718557674914, "commutes": 0.14315718557674914, "variables": 0.14315718557674914, "retain multilinearity": 0.15584410475313637, "apply": 0.20502090629626074, "lemma": 0.2290033993608783, "stating": 0.2290033993608783, "updating": 0.2290033993608783, "key point": 0.34740455379459945, "point to show": 0.34740455379459945, "show that functions": 0.34740455379459945, "functions constructed": 0.34740455379459945, "retain": 0.3671939847433225}}, {"docstring": "**Alias** of the forward direction of closure_nonempty_iff`.\n", "keywords": {"direction of closure": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "nonempty": 0.04491197687864554, "iff": 0.04491197687864554, "closure": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "**Alias** of pgame.le_of_lf`.\n", "keywords": {"Alias": 0.030396371632413578, "pgame.le": 0.09568045026443411}}, {"docstring": "If `find p = some i`, then `p i` holds\n", "keywords": {"holds": 0.04491197687864554, "find": 0.09568045026443411}}, {"docstring": " If a function to a `t1_space` tends to some limit `b` at some point `a`, then necessarily `b = f a`.\n", "keywords": {"space": 0.04491197687864554, "limit": 0.06844581806138879, "point": 0.06844581806138879, "necessarily": 0.06844581806138879, "function": 0.09568045026443411}}, {"docstring": "**Alias** of the reverse direction of list.nodup_sublists'`.\n", "keywords": {"direction of list.nodup": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "sublists": 0.04491197687864554, "list.nodup": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "**Steinhaus Theorem** In any locally compact group `G` with a haar measure `\u03bc`,   for any measurable set `E` of positive measure, the set `E - E` is a neighbourhood of `0`.\n", "keywords": {"locally compact group": 0.0018272602444849633, "Steinhaus Theorem": 0.0028460810219301785, "compact group": 0.012904998963208847, "haar measure": 0.01436717525174228, "measurable set": 0.01436717525174228, "positive measure": 0.01436717525174228, "locally compact": 0.019286283660143136, "measure": 0.051483732084204585, "set": 0.051483732084204585, "Steinhaus": 0.053272918383365134, "Theorem": 0.053272918383365134, "group": 0.09262176965879712, "locally": 0.13755493784698053, "compact": 0.13755493784698053, "haar": 0.13755493784698053, "measurable": 0.13755493784698053, "positive": 0.13755493784698053, "neighbourhood": 0.13755493784698053}}, {"docstring": "Sum of elements in a `subfield` indexed by a `finset` is in the `subfield`.\n", "keywords": {"subfield": 0.02006098734604785, "Sum of elements": 0.022138323509052035, "finset": 0.054709255964732355, "Sum": 0.11521656054299435, "indexed": 0.11521656054299435, "elements": 0.1879836817695587}}, {"docstring": "If a function is `C^n` with `1 \u2264 n`, then the derivative of `f` is also a strict derivative.\n", "keywords": {"strict derivative": 0.05913243875864445, "derivative": 0.14323823713631006, "function": 0.19488865479360015, "strict": 0.19488865479360015}}, {"docstring": " If a function `f` is continuous on a convex set `D \u2286 \u211d`, is twice differentiable on its interior, and `f''` is nonnegative on the interior, then `f` is convex on `D`.\n", "keywords": {"convex set": 0.01286214417415525, "interior": 0.04478074116273408, "convex": 0.07442578585270058, "function": 0.08531189896378533, "set": 0.08531189896378533, "continuous": 0.11840455484321102, "differentiable": 0.11840455484321102, "nonnegative": 0.11840455484321102}}, {"docstring": " **Rearrangement Inequality**: Pointwise multiplication of `f` and `g` is minimized when `f` and `g` antivary together. Stated by permuting the entries of `f`.\n", "keywords": {"Rearrangement Inequality": 0.0031146356952437464, "Pointwise multiplication": 0.008334116283452563, "Rearrangement": 0.05572221155747183, "Inequality": 0.05572221155747183, "Pointwise": 0.05572221155747183, "antivary": 0.10028582371075691, "Stated by permuting": 0.11755105063023073, "multiplication": 0.14832923246533666, "minimized": 0.14832923246533666, "permuting the entries": 0.165573765898185, "Stated": 0.2790829227183407, "permuting": 0.37689977775222827, "entries": 0.37689977775222827}}, {"docstring": "The identity map is a ring homomorphism.\n", "keywords": {"ring homomorphism": 0.04940384002065631, "identity map": 0.09700399286574239, "homomorphism": 0.15831692877998726, "identity": 0.29736558256021506, "map": 0.29736558256021506, "ring": 0.29736558256021506}}, {"docstring": "An intermediate field contains the ring's 1.\n", "keywords": {"intermediate field": 0.09700399286574239, "ring": 0.15831692877998726, "intermediate": 0.29736558256021506, "field": 0.29736558256021506}}, {"docstring": " Multiplying `a` by itself and then by its inverse results in `a` (whether or not `a` is zero).\n", "keywords": {"inverse results": 0.013527995261974615, "Multiplying": 0.04491197687864554, "inverse": 0.1155310835876123, "results": 0.1155310835876123}}, {"docstring": "The radius of the sum of two formal series is at least the minimum of their two radii.\n", "keywords": {"formal series": 0.013527995261974615, "radii": 0.0771485953923296, "radius": 0.1155310835876123, "sum": 0.1155310835876123, "formal": 0.1155310835876123, "series": 0.1155310835876123, "minimum": 0.1155310835876123}}, {"docstring": "The kernel of the quotient map induced by an equivalence relation r equals r.\n", "keywords": {"quotient map induced": 0.0042542192213185686, "quotient map": 0.02570861714399338, "map induced": 0.02570861714399338, "equivalence relation": 0.02570861714399338, "relation r equals": 0.02570861714399338, "kernel": 0.15831692877998726, "quotient": 0.15831692877998726, "map": 0.15831692877998726, "induced": 0.15831692877998726, "equivalence": 0.15831692877998726, "relation": 0.15831692877998726, "equals": 0.15831692877998726}}, {"docstring": " In a metric space (or even a pseudo emetric space), an open set can be approximated from inside by closed sets.\n", "keywords": {"pseudo emetric space": 0.005646954298641308, "metric space": 0.02820023318873729, "pseudo emetric": 0.03718843747800602, "approximated from inside": 0.03718843747800602, "inside by closed": 0.03718843747800602, "open set": 0.05513073320374301, "closed sets": 0.05513073320374301, "space": 0.0724218931801197, "metric": 0.18935428276389019, "pseudo": 0.18935428276389019, "emetric": 0.18935428276389019, "open": 0.18935428276389019, "approximated": 0.18935428276389019, "inside": 0.18935428276389019, "closed": 0.18935428276389019, "set": 0.2759385405420098, "sets": 0.2759385405420098}}, {"docstring": "`clifford_algebra.involute` is analogous to `complex.conj`.\n", "keywords": {"clifford": 0.04491197687864554, "algebra.involute": 0.04491197687864554, "complex.conj": 0.04491197687864554, "analogous": 0.29736558256021506}}, {"docstring": " The right inverse does not depend on the zeroth coefficient of a formal multilinear series.\n", "keywords": {"formal multilinear series": 0.0025258761156662004, "multilinear series": 0.015380821171891606, "zeroth coefficient": 0.02570861714399338, "formal multilinear": 0.02570861714399338, "series": 0.09568045026443411, "inverse": 0.15831692877998726, "depend": 0.15831692877998726, "zeroth": 0.15831692877998726, "coefficient": 0.15831692877998726, "formal": 0.15831692877998726, "multilinear": 0.15831692877998726}}, {"docstring": " The derivative of a function on a measurable set is almost everywhere measurable on this set with respect to Lebesgue measure. Note that, in general, it is not genuinely measurable there, as `f'` is not unique (but only on a set of measure `0`, as the argument shows).\n", "keywords": {"respect to Lebesgue": 0.019474148166398357, "Lebesgue measure": 0.02245674265256365, "Lebesgue": 0.0901131038239838, "measure": 0.12186636985142774, "measurable": 0.15220850890609428, "set": 0.15220850890609428, "derivative": 0.21197971499276713, "function": 0.21197971499276713, "respect": 0.21197971499276713, "argument shows": 0.22060876691565998, "set with respect": 0.2611525654010457, "measurable set": 0.2634348476096236, "genuinely measurable": 0.28296188497751035, "set of measure": 0.37352296233588017, "Note": 0.3741900910967621, "general": 0.3741900910967621, "unique": 0.3741900910967621, "shows": 0.3741900910967621, "genuinely": 0.483007639076337, "argument": 0.483007639076337}}, {"docstring": "Binary **rearrangement inequality**.\n", "keywords": {"rearrangement inequality": 0.02570861714399338, "Binary": 0.04491197687864554, "rearrangement": 0.15831692877998726, "inequality": 0.15831692877998726}}, {"docstring": " If a function `f` is continuous on a convex set `D \u2286 \u211d`, is differentiable on its interior, and `f'` is strictly antitone on the interior, then `f` is strictly concave on `D`.\n", "keywords": {"convex set": 0.009805590062567161, "strictly antitone": 0.013511317635085635, "strictly concave": 0.013511317635085635, "interior": 0.043493458706749734, "strictly": 0.05739649452642253, "function": 0.08361462103586328, "set": 0.08361462103586328, "continuous": 0.1161324896811994, "convex": 0.1161324896811994, "differentiable": 0.1161324896811994, "antitone": 0.1161324896811994, "concave": 0.1161324896811994}}, {"docstring": "The function we are mapping along is `S\u207b\u00b9RSR` in [Halmos, \u00a759],  where `S` is the map in `map_prod_mul_eq` and `R` is `prod.swap`.\n", "keywords": {"Halmos": 0.03381806651421549, "RSR": 0.05245409721885829, "prod": 0.0528063806271324, "mul": 0.0528063806271324, "prod.swap": 0.0528063806271324, "map": 0.08871286057464066, "function": 0.13409574860218185, "mapping": 0.13409574860218185}}, {"docstring": " When `ring.inverse` is continuous at the determinant (such as in a `normed_ring`, or a `topological_field`), so is `matrix.has_inv`.\n", "keywords": {"ring.inverse": 0.04491197687864554, "normed": 0.04491197687864554, "ring": 0.04491197687864554, "topological": 0.04491197687864554, "field": 0.04491197687864554, "matrix.has": 0.04491197687864554, "inv": 0.04491197687864554, "determinant": 0.09568045026443411, "continuous": 0.15831692877998726}}, {"docstring": "An `add_subsemigroup` is closed under addition.\n", "keywords": {"add": 0.04491197687864554, "subsemigroup": 0.04491197687864554, "closed under addition": 0.04940384002065631, "addition": 0.15831692877998726, "closed": 0.29736558256021506}}, {"docstring": "The product of two monotone functions is monotone.\n", "keywords": {"monotone functions": 0.05913243875864445, "functions is monotone": 0.12748048004056906, "monotone": 0.14323823713631006, "product": 0.19488865479360015, "functions": 0.19488865479360015}}, {"docstring": "A telescoping sum along `{0, ..., n-1}` of an `\u2115`-valued function reduces to the difference of the last and first terms when the function we are summing is monotone.\n", "keywords": {"valued function reduces": 0.0021943300890998785, "summing is monotone": 0.012051537142168538, "valued function": 0.015965746323698286, "telescoping sum": 0.018034246898548233, "function reduces": 0.023937535241430174, "function": 0.08782297807514622, "valued": 0.08946888050496495, "monotone": 0.08946888050496495, "telescoping": 0.13309686053898662, "sum": 0.13309686053898662, "reduces": 0.13309686053898662, "difference": 0.13309686053898662, "terms": 0.13309686053898662, "summing": 0.13309686053898662}}, {"docstring": "A quadratic has no root if its discriminant has no square root.\n", "keywords": {"square root": 0.0562460611896591, "root": 0.13945519496053638, "quadratic": 0.19092478917347616, "discriminant": 0.19092478917347616, "square": 0.19092478917347616}}, {"docstring": "Any three points in an orthocentric system are affinely independent.\n", "keywords": {"affinely independent": 0.04940384002065631, "orthocentric system": 0.09700399286574239, "system are affinely": 0.09700399286574239, "independent": 0.15831692877998726, "points": 0.29736558256021506, "orthocentric": 0.29736558256021506, "system": 0.29736558256021506, "affinely": 0.29736558256021506}}, {"docstring": "The `to_list` of a `vector` after a `scanl` is the `list.scanl` of the `to_list` of the original `vector`.\n", "keywords": {"list": 0.02184815412823125, "vector": 0.02184815412823125, "scanl": 0.05794058924527716, "list.scanl": 0.05794058924527716, "original": 0.08767471314125588}}, {"docstring": " Any nonempty complete second countable metric space is the continuous image of the fundamental space `\u2115 \u2192 \u2115`. For a version of this theorem in the context of Polish spaces, see `exists_nat_nat_continuous_surjective_of_polish_space`.\n", "keywords": {"countable metric space": 0.016350795322302082, "nonempty complete": 0.034048044443349315, "complete second countable": 0.034048044443349315, "countable metric": 0.034048044443349315, "continuous image": 0.06179505777140207, "metric space": 0.08217952620309574, "fundamental space": 0.08217952620309574, "nat": 0.09409158367895411, "space": 0.13949779320951497, "continuous": 0.16036416216813532, "Polish spaces": 0.16321299821344068, "Polish": 0.16763971297657143, "nonempty": 0.18145783618222916, "complete": 0.18145783618222916, "countable": 0.18145783618222916, "metric": 0.18145783618222916, "image": 0.18145783618222916, "fundamental": 0.18145783618222916, "exists": 0.25494804224222645, "surjective": 0.25494804224222645}}, {"docstring": "A nonzero vector equals a rotation of that vector if and only if the angle is zero.\n", "keywords": {"nonzero vector equals": 0.010962043841203115, "equals a rotation": 0.03663237450220032, "nonzero vector": 0.05417025203414716, "vector equals": 0.05417025203414716, "vector": 0.13667842094541144, "nonzero": 0.1879836817695587, "equals": 0.1879836817695587, "rotation": 0.1879836817695587, "angle": 0.1879836817695587}}, {"docstring": " `x` is the only fixed point of `point_reflection x`. This lemma requires `x + x = y + y \u2194 x = y`. There is no typeclass to use here, so we add it as an explicit argument.\n", "keywords": {"fixed point": 0.023091072115279655, "point": 0.07464178692253051, "reflection": 0.11571862121748651, "lemma requires": 0.13562001369807442, "fixed": 0.15118815917881306, "explicit argument": 0.23281004053911342, "requires": 0.31247448323794236, "lemma": 0.38218724385676617, "argument": 0.3983748963667465, "typeclass": 0.4740384617260793, "add": 0.4740384617260793, "explicit": 0.4740384617260793}}, {"docstring": "Restriction of local homeomorphisms respects equivalence\n", "keywords": {"homeomorphisms respects equivalence": 0.016559150827736194, "local homeomorphisms respects": 0.03339840940482845, "Restriction of local": 0.04940384002065631, "respects equivalence": 0.04940384002065631, "local homeomorphisms": 0.09700399286574239, "homeomorphisms respects": 0.09700399286574239, "Restriction": 0.15831692877998726, "equivalence": 0.15831692877998726, "local": 0.29736558256021506, "homeomorphisms": 0.29736558256021506, "respects": 0.29736558256021506}}, {"docstring": "Composition by an bijective function on the left is itself bijective.\n", "keywords": {"bijective function": 0.0562460611896591, "Composition": 0.11718348279991213, "bijective": 0.13945519496053638, "function": 0.19092478917347616, "left": 0.19092478917347616}}, {"docstring": " Lagrange multipliers theorem. Let `f : \u03b9 \u2192 E \u2192 \u211d` be a finite family of functions. Suppose that `\u03c6 : E \u2192 \u211d` has a local extremum on the set `{x | \u2200 i, f i x = f i x\u2080}` at `x\u2080`. Suppose that all functions `f i` as well as `\u03c6` are strictly differentiable at `x\u2080`. Then the derivatives `f' i : E \u2192 L[\u211d] \u211d` and `\u03c6' : E \u2192L[\u211d] \u211d` are linearly dependent.  See also `is_local_extr_on.exists_multipliers_of_has_strict_fderiv_at` for a version that that states existence of Lagrange multipliers `\u039b` and `\u039b\u2080` instead of using `\u00aclinear_independent \u211d _`\n", "keywords": {"Lagrange multipliers theorem": 0.023943379394877916, "multipliers theorem": 0.06348602737864745, "Lagrange multipliers": 0.0767788069837571, "multipliers": 0.13839645261193323, "theorem": 0.14378055333693815, "Lagrange": 0.1603082438200234, "Suppose": 0.16129604216715507, "functions": 0.17483991435395924, "finite family": 0.2200238588778787, "local": 0.25706162935212445, "family of functions": 0.33524723569229237, "local extremum": 0.36314392482148905, "finite": 0.4246691634931737, "family": 0.4246691634931737, "existence of Lagrange": 0.4459178529057115, "set": 0.4593733273242295, "strictly differentiable": 0.4777176254728432, "linearly dependent": 0.48421995984083704, "extr": 0.5002028766839663, "on.exists": 0.5002028766839663}}, {"docstring": "Given `(v : K), (q : \u211a), and v = q`, we have that `gcf.of q = gcf.of v`\n", "keywords": {"gcf.of": 0.05776554179380615}}, {"docstring": " Note that the `is_scalar_tower M \u03b1 \u03b1` and `smul_comm_class M \u03b1 \u03b1` typeclass arguments are usually satisfied by `algebra M \u03b1`.\n", "keywords": {"typeclass arguments": 0.005380746843605012, "scalar": 0.04491197687864554, "smul": 0.04491197687864554, "comm": 0.04491197687864554, "Note": 0.06341998722529081, "tower": 0.06341998722529081, "class": 0.06341998722529081, "typeclass": 0.06341998722529081, "algebra": 0.06341998722529081, "arguments": 0.08438900089923473, "satisfied": 0.08438900089923473}}, {"docstring": " The `v`-adic valuation of `r \u2208 R` is less than `multiplicative.of_add (-n)` if and only if `v\u207f` divides the ideal `(r)`.\n", "keywords": {"divides the ideal": 0.005987543063120938, "adic valuation": 0.00899321792126428, "multiplicative.of": 0.04491197687864554, "add": 0.04491197687864554, "adic": 0.0771485953923296, "divides": 0.0771485953923296, "ideal": 0.0771485953923296, "valuation": 0.1155310835876123}}, {"docstring": "The underlying `list` of a `vector` after a `scanl` is the `list.scanl` of the underlying `list` of the original `vector`.\n", "keywords": {"list": 0.02245598843932277, "vector": 0.02245598843932277, "underlying": 0.034222909030694394, "scanl": 0.05899937629682816, "list.scanl": 0.05899937629682816, "original": 0.08922538916412363}}, {"docstring": " If `x` is not in the closure of `s`, then `f` has any derivative at `x` within `s`, as this statement is empty.\n", "keywords": {"statement is empty": 0.015380821171891606, "empty": 0.09568045026443411, "closure": 0.15831692877998726, "derivative": 0.15831692877998726, "statement": 0.15831692877998726}}, {"docstring": "The smallest congruence relation containing a binary relation `r` is contained in any    congruence relation containing `r`.\n", "keywords": {"smallest congruence relation": 0.0046821016098424345, "congruence relation": 0.014365473169942725, "binary relation": 0.026209063574087386, "smallest congruence": 0.027230476903750824, "relation": 0.054678546569943615, "congruence": 0.0851294669924546, "smallest": 0.1556959951131179, "binary": 0.1556959951131179, "contained": 0.1556959951131179}}, {"docstring": "**Alias** of int.le_self_sq`.\n", "keywords": {"Alias": 0.030396371632413578, "int.le": 0.15831692877998726}}, {"docstring": "**Alias** of is_lub.mem_of_is_closed`.\n", "keywords": {"Alias": 0.030396371632413578, "lub.mem": 0.04491197687864554, "closed": 0.04491197687864554}}, {"docstring": "If `z \u2208 \ud835\udc9f\u1d52`, and `n : \u2124`, then `|z + n| > 1`.\n", "keywords": {}}, {"docstring": " `smul` by a `k : M` over a ring is injective, if `k` is not a zero divisor. The general theory of such `k` is elaborated by `is_smul_regular`. The typeclass that restricts all terms of `M` to have this property is `no_zero_smul_divisors`.\n", "keywords": {"ring is injective": 0.02386520980316497, "smul": 0.036876004874242134, "injective": 0.13399079435616337, "ring": 0.17395924279955516, "general theory": 0.21721331915127282, "divisor": 0.2677765928925766, "divisors": 0.2677765928925766, "regular": 0.27175631965823915, "typeclass that restricts": 0.36264717327084706, "restricts all terms": 0.36264717327084706, "general": 0.4224349848290128, "theory": 0.4224349848290128, "elaborated": 0.4224349848290128, "typeclass": 0.5158820755749483, "restricts": 0.5158820755749483, "terms": 0.5158820755749483, "property": 0.5158820755749483}}, {"docstring": "Part of proving $A_5$ is simple. Shows that the square of any element of $A_5$ with a 3-cycle in  its cycle decomposition is a 3-cycle, so the normal closure of the original element must be  $A_5$.\n", "keywords": {"Part of proving": 0.011231271556908444, "Part": 0.10538752815290522, "proving": 0.10538752815290522, "simple": 0.10538752815290522, "cycle decomposition": 0.14671225102572735, "normal closure": 0.14671225102572735, "original element": 0.15269848027383326, "element": 0.1851752904075755, "Shows": 0.29034507216173455, "square": 0.35768931264291, "cycle": 0.35768931264291, "decomposition": 0.35768931264291, "normal": 0.35768931264291, "closure": 0.35768931264291, "original": 0.35768931264291}}, {"docstring": " If `C` has disjoint coproducts, any morphism out of initial is mono. Note it isn't true in general that `C` has strict initial objects, for instance consider the category of types and partial functions.\n", "keywords": {"disjoint coproducts": 0.03419969733027349, "initial is mono": 0.13769090988070765, "strict initial objects": 0.14217019326822494, "coproducts": 0.1438116176495284, "mono": 0.1438116176495284, "initial objects": 0.19661373392457887, "initial": 0.22298327408394902, "disjoint": 0.2299449545753006, "morphism": 0.2299449545753006, "partial functions": 0.2308751217696896, "strict initial": 0.2937327883139314, "true in general": 0.3498660406641243, "category of types": 0.3498660406641243, "types and partial": 0.3498660406641243, "Note": 0.3684322042113957, "objects": 0.3684322042113957, "functions": 0.3684322042113957, "true": 0.5091028863598569, "general": 0.5091028863598569, "strict": 0.5091028863598569}}, {"docstring": " A `comm_ring` `S` which is the localization of an integral domain `R` at a subset of non-zero elements is an integral domain. See note [reducible non-instances].\n", "keywords": {"integral domain": 0.009481925437383252, "domain": 0.05323423727105573, "subset of non-zero": 0.06578911980023501, "non-zero elements": 0.06578911980023501, "comm": 0.07633745084699749, "ring": 0.07633745084699749, "integral": 0.08740106550173525, "reducible non-instances": 0.18200718244465583, "localization": 0.24845137053071667, "subset": 0.24845137053071667, "non-zero": 0.24845137053071667, "elements": 0.24845137053071667, "note": 0.39240470458943716, "reducible": 0.39240470458943716, "non-instances": 0.39240470458943716}}, {"docstring": " Cyclotomic polynomials are always positive on inputs larger than one. Similar to `cyclotomic_pos` but with the condition on the input rather than index of the cyclotomic polynomial.\n", "keywords": {"inputs larger": 0.08961732197126854, "Cyclotomic": 0.12298778633844647, "Cyclotomic polynomials": 0.13260672905008614, "positive on inputs": 0.18236313730173273, "positive": 0.21224431412081607, "larger": 0.21224431412081607, "pos": 0.2519830917772717, "polynomials": 0.31732419405454865, "Similar": 0.37456092535797153, "inputs": 0.3875090935619269, "input": 0.3875090935619269, "condition": 0.4834030133674702, "index": 0.4834030133674702}}, {"docstring": " If a real function `f` has a derivative `g` everywhere but at a point, and `f` and `g` are continuous at this point, then `g` is the derivative of `f` everywhere.\n", "keywords": {"real function": 0.014591879414444505, "point": 0.05631466302318476, "function": 0.09856372721054514, "derivative": 0.09960683487150054, "real": 0.14591593823007556, "continuous": 0.14591593823007556}}, {"docstring": "If `A` is before `B` in colex, and everything in `B` is small, then everything in `A` is small.\n", "keywords": {"small": 0.0385742976961648, "colex": 0.10028582371075691}}, {"docstring": "This lemma (and some of its corollaries also holds for `ennreal`,  but this proof doesn't work for it.  Maybe we should add this lemma as field to `has_ordered_sub`?\n", "keywords": {"corollaries also holds": 0.032945302382736935, "ennreal": 0.07258934678807509, "add this lemma": 0.13296329075197735, "lemma": 0.13638902991725962, "corollaries": 0.1785903903600119, "holds": 0.1785903903600119, "proof": 0.1785903903600119, "work": 0.1785903903600119, "ordered": 0.21373773690901868, "lemma as field": 0.2606165638622502, "add": 0.4302357358329322, "field": 0.4302357358329322}}, {"docstring": " The product of the composition of functions `f` and `g`, is the product over `b \u2208 s.image g` of `f b` to the power of the cardinality of the fibre of `b`. See also `finset.prod_image`.\n", "keywords": {"composition of functions": 0.011900488980731722, "product": 0.0500315567141328, "functions": 0.09627843715008771, "s.image": 0.09627843715008771, "composition": 0.1221512649852118, "power": 0.1221512649852118, "cardinality": 0.1221512649852118, "fibre": 0.1221512649852118, "finset.prod": 0.21373773690901868, "image": 0.21373773690901868}}, {"docstring": "A subfield `t` includes `closure s` if and only if it includes `s`.\n", "keywords": {"includes": 0.07571113878390312, "subfield": 0.11984314898676356, "closure": 0.11984314898676356}}, {"docstring": " In a linearly ordered field with the order topology, if `f` tends to `at_bot` and `g` tends to a positive constant `C` then `f * g` tends to `at_bot`.\n", "keywords": {"linearly ordered field": 0.002535831815717203, "order topology": 0.012240009979360944, "positive constant": 0.012240009979360944, "linearly ordered": 0.018310930906343142, "ordered field": 0.018310930906343142, "bot": 0.019053917256533312, "topology": 0.09017440044927587, "constant": 0.09017440044927587, "linearly": 0.13409574860218185, "ordered": 0.13409574860218185, "field": 0.13409574860218185, "order": 0.13409574860218185, "positive": 0.13409574860218185}}, {"docstring": "The circumcenter of a 1-simplex equals its centroid.\n", "keywords": {"equals its centroid": 0.02570861714399338, "equals": 0.15831692877998726, "centroid": 0.15831692877998726, "circumcenter": 0.29736558256021506}}, {"docstring": " Pigeonhole principle for measure spaces: if `s` is a `finset` and `\u2211 i in s, \u03bc (t i) > \u03bc univ`, then one of the intersections `t i \u2229 t j` is not empty.\n", "keywords": {"Pigeonhole principle": 0.00899321792126428, "measure spaces": 0.00899321792126428, "principle for measure": 0.013527995261974615, "finset": 0.04491197687864554, "Pigeonhole": 0.0771485953923296, "spaces": 0.0771485953923296, "univ": 0.0771485953923296, "intersections": 0.0771485953923296, "empty": 0.0771485953923296, "principle": 0.1155310835876123, "measure": 0.1155310835876123}}, {"docstring": "Comparison test of convergence of series of non-negative real numbers.\n", "keywords": {"non-negative real numbers": 0.0010606143890052174, "Comparison test": 0.00899321792126428, "real numbers": 0.00899321792126428, "test of convergence": 0.013527995261974615, "convergence of series": 0.013527995261974615, "series of non-negative": 0.013527995261974615, "non-negative real": 0.013527995261974615, "Comparison": 0.0771485953923296, "numbers": 0.0771485953923296, "test": 0.1155310835876123, "convergence": 0.1155310835876123, "series": 0.1155310835876123, "non-negative": 0.1155310835876123, "real": 0.1155310835876123}}, {"docstring": " **Strict inequality case of Rearrangement Inequality**: Pointwise scalar multiplication of `f` and `g`, which monovary together, is strictly decreased by a permutation if and only if `f` and `g \u2218 \u03c3` do not monovary together. Stated by permuting the entries of `g`.\n", "keywords": {"Strict inequality case": 0.0016376672505466826, "Pointwise scalar multiplication": 0.002200769509641363, "Strict inequality": 0.00866958983340238, "Pointwise scalar": 0.011561263824295709, "Rearrangement Inequality": 0.011712586350570936, "case of Rearrangement": 0.015634960653391074, "inequality case": 0.025703411153376713, "scalar multiplication": 0.03447074540170908, "strictly decreased": 0.03447074540170908, "Strict": 0.06261045944724858, "Pointwise": 0.06261045944724858, "inequality": 0.0686392828174212, "Rearrangement": 0.08433210096311344, "monovary": 0.08488187343535045, "Stated by permuting": 0.16944032286186908, "case": 0.18254344008272147, "scalar": 0.18254344008272147, "multiplication": 0.18254344008272147, "strictly": 0.18254344008272147, "decreased": 0.18254344008272147}}, {"docstring": "Given subsets `t` and `s` of a monoid `M`, if `s \u2286 t`, the submonoid of `M` generated by `s` is    contained in the submonoid generated by `t`.\n", "keywords": {"submonoid generated": 0.02446314647991225, "submonoid": 0.07726414307411156, "generated": 0.07726414307411156, "subsets": 0.09856372721054514, "monoid": 0.09856372721054514, "contained": 0.14591593823007556}}, {"docstring": " Given `c = line_map a b r`, `a < c < b`, the point `(c, f c)` is strictly above the segment `[(a, f a), (b, f b)]` if and only if `slope f c b < slope f a c`.\n", "keywords": {"slope": 0.026369104746389253, "line": 0.05393656033701752, "map": 0.07201108509564766, "point": 0.07201108509564766, "segment": 0.07201108509564766, "strictly": 0.09202664026077896}}, {"docstring": "If a preadditive category has all cokernels, then it also has all coequalizers.\n", "keywords": {"preadditive category": 0.02570861714399338, "cokernels": 0.09568045026443411, "coequalizers": 0.09568045026443411, "preadditive": 0.15831692877998726, "category": 0.15831692877998726}}, {"docstring": "The axiomatic definition of conditional probability derived from a measure-theoretic one.\n", "keywords": {"conditional probability derived": 0.03339840940482845, "axiomatic definition": 0.09700399286574239, "definition of conditional": 0.09700399286574239, "conditional probability": 0.09700399286574239, "probability derived": 0.09700399286574239, "axiomatic": 0.29736558256021506, "definition": 0.29736558256021506, "conditional": 0.29736558256021506, "probability": 0.29736558256021506, "derived": 0.29736558256021506, "measure-theoretic": 0.29736558256021506}}, {"docstring": "Auxiliary lemma for `biproduct.unique_up_to_iso`.\n", "keywords": {"biproduct.unique": 0.04491197687864554, "iso": 0.04491197687864554, "Auxiliary lemma": 0.04940384002065631, "Auxiliary": 0.15831692877998726, "lemma": 0.29736558256021506}}, {"docstring": "The cardinality of a field is at most `n` times the cardinality of the image of a degree `n`  polynomial\n", "keywords": {"times the cardinality": 0.009478341963114085, "cardinality": 0.05101428509898996, "polynomial": 0.05393656033701752, "times": 0.09202664026077896, "degree": 0.09202664026077896, "field": 0.1367145963576765, "image": 0.1367145963576765}}, {"docstring": "If a polynomial of degree 2 is always positive, then its discriminant is negative, at least when the coefficient of the quadratic term is nonzero.\n", "keywords": {"polynomial of degree": 0.00899321792126428, "discriminant is negative": 0.00899321792126428, "term is nonzero": 0.00899321792126428, "quadratic term": 0.013527995261974615, "degree": 0.0771485953923296, "positive": 0.0771485953923296, "negative": 0.0771485953923296, "nonzero": 0.0771485953923296, "polynomial": 0.1155310835876123, "discriminant": 0.1155310835876123, "coefficient": 0.1155310835876123, "quadratic": 0.1155310835876123, "term": 0.1155310835876123}}, {"docstring": " Two finite-dimensional normed spaces are continuously linearly equivalent if they have the same (finite) dimension.\n", "keywords": {"finite-dimensional normed spaces": 0.03339840940482845, "continuously linearly equivalent": 0.03339840940482845, "finite": 0.04491197687864554, "dimension": 0.04491197687864554, "finite-dimensional normed": 0.09700399286574239, "normed spaces": 0.09700399286574239, "spaces are continuously": 0.09700399286574239, "continuously linearly": 0.09700399286574239, "linearly equivalent": 0.09700399286574239, "finite-dimensional": 0.29736558256021506, "normed": 0.29736558256021506, "spaces": 0.29736558256021506, "continuously": 0.29736558256021506, "linearly": 0.29736558256021506, "equivalent": 0.29736558256021506}}, {"docstring": "A monoid homomorphism preserves multiplication.\n", "keywords": {"homomorphism preserves multiplication": 0.016559150827736194, "monoid homomorphism preserves": 0.03339840940482845, "preserves multiplication": 0.04940384002065631, "monoid homomorphism": 0.09700399286574239, "homomorphism preserves": 0.09700399286574239, "multiplication": 0.15831692877998726, "monoid": 0.29736558256021506, "homomorphism": 0.29736558256021506, "preserves": 0.29736558256021506}}, {"docstring": "If `p` is a prime factor of `b` then `p` is also a prime factor of `a * b` for any `a > 0`\n", "keywords": {"prime factor": 0.004619666163574043, "prime": 0.04784022513221706, "factor": 0.04784022513221706}}, {"docstring": "Symmetric of `finset.image\u2082_image_left_anticomm`.\n", "keywords": {"finset.image \u2082_ image": 0.02570861714399338, "left": 0.04491197687864554, "anticomm": 0.04491197687864554, "Symmetric": 0.15831692877998726, "finset.image": 0.15831692877998726, "image": 0.15831692877998726}}, {"docstring": "\u03b5-\u03b4 characterization of uniform embeddings on pseudoemetric spaces\n", "keywords": {"pseudoemetric spaces": 0.04940384002065631, "characterization of uniform": 0.09700399286574239, "uniform embeddings": 0.09700399286574239, "embeddings on pseudoemetric": 0.09700399286574239, "spaces": 0.15831692877998726, "characterization": 0.29736558256021506, "uniform": 0.29736558256021506, "embeddings": 0.29736558256021506, "pseudoemetric": 0.29736558256021506}}, {"docstring": " An additive group `G` is finitely generated if and only if `add_monoid_algebra R G` is of finite type.\n", "keywords": {"additive group": 0.015380821171891606, "finite type": 0.015380821171891606, "finitely generated": 0.02570861714399338, "add": 0.04491197687864554, "monoid": 0.04491197687864554, "group": 0.09568045026443411, "algebra": 0.09568045026443411, "type": 0.09568045026443411, "additive": 0.15831692877998726, "finitely": 0.15831692877998726, "generated": 0.15831692877998726, "finite": 0.15831692877998726}}, {"docstring": "If `x \u2208 s` and `x + y \u2208 interior s`, then `x + t y \u2208 interior s` for `t \u2208 (0, 1]`.\n", "keywords": {"interior": 0.034222909030694394}}, {"docstring": " The complex hyperbolic sine function is everywhere differentiable, with the derivative `cosh x`.\n", "keywords": {"complex hyperbolic sine": 0.0042542192213185686, "hyperbolic sine function": 0.0042542192213185686, "complex hyperbolic": 0.02570861714399338, "hyperbolic sine": 0.02570861714399338, "sine function": 0.02570861714399338, "differentiable": 0.09568045026443411, "derivative": 0.09568045026443411, "cosh": 0.09568045026443411, "complex": 0.15831692877998726, "hyperbolic": 0.15831692877998726, "sine": 0.15831692877998726, "function": 0.15831692877998726}}, {"docstring": " `direction_of_nonempty` gives the same submodule as `direction`.\n", "keywords": {"direction": 0.021352745740207107, "nonempty": 0.05706283858652404, "submodule": 0.19488865479360015}}, {"docstring": "The p-adic norm is multiplicative.\n", "keywords": {"norm is multiplicative": 0.04940384002065631, "p-adic norm": 0.09700399286574239, "multiplicative": 0.15831692877998726, "p-adic": 0.29736558256021506, "norm": 0.29736558256021506}}, {"docstring": "A `fintype` can be given a field structure iff its cardinality is a prime power.\n", "keywords": {"field structure iff": 0.0016012214736657916, "prime power": 0.00899321792126428, "field structure": 0.013527995261974615, "structure iff": 0.013527995261974615, "iff its cardinality": 0.013527995261974615, "fintype": 0.04491197687864554, "power": 0.0771485953923296, "field": 0.1155310835876123, "structure": 0.1155310835876123, "iff": 0.1155310835876123, "cardinality": 0.1155310835876123, "prime": 0.1155310835876123}}, {"docstring": "When there is a global maximum, every set is bounded above.\n", "keywords": {"global maximum": 0.015380821171891606, "set is bounded": 0.02570861714399338, "maximum": 0.09568045026443411, "global": 0.15831692877998726, "set": 0.15831692877998726, "bounded": 0.15831692877998726}}, {"docstring": "The Haudorff edistances of `s` to `t` and of `t` to `s` coincide\n", "keywords": {"Haudorff edistances": 0.013797198203993007, "coincide": 0.04491197687864554, "Haudorff": 0.08596317751626563, "edistances": 0.15831692877998726}}, {"docstring": "```lean  \u03b3 -f\u2192 \u03b1 g\u2193     \u2193e  \u03b4 -h\u2192 \u03b2 ```\n", "keywords": {"lean": 0.09568045026443411}}, {"docstring": "**Alias** of ssubset_of_subset_of_ne`.\n", "keywords": {"Alias": 0.030396371632413578, "subset": 0.04491197687864554, "ssubset": 0.0771485953923296}}, {"docstring": " **Equality case of Rearrangement Inequality**: Pointwise multiplication of `f` and `g`, which monovary together, is unchanged by a permutation if and only if `f` and `g \u2218 \u03c3` monovary together. Stated by permuting the entries of `g`.\n", "keywords": {"Rearrangement Inequality": 0.005072352361797871, "Equality case": 0.01078166215070159, "Pointwise multiplication": 0.01078166215070159, "case of Rearrangement": 0.01462575590160924, "Equality": 0.06111024253988877, "Inequality": 0.06111024253988877, "Pointwise": 0.06111024253988877, "monovary": 0.08014015496625508, "Rearrangement": 0.08258441204389066, "Stated by permuting": 0.1565870030412261, "case": 0.17454779110930135, "multiplication": 0.17454779110930135, "unchanged": 0.17454779110930135, "permutation": 0.17454779110930135, "permuting the entries": 0.21846569551000553, "Stated": 0.3197366584666406, "permuting": 0.42343326428770406, "entries": 0.42343326428770406}}, {"docstring": "**Alias** of the reverse direction of matrix.nondegenerate_iff_det_ne_zero`.\n", "keywords": {"direction of matrix.nondegenerate": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "det": 0.04491197687864554, "matrix.nondegenerate": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "See Note [continuity lemma statement].\n", "keywords": {"continuity lemma statement": 0.008321268142839145, "continuity lemma": 0.04940384002065631, "lemma statement": 0.04940384002065631, "Note": 0.08596317751626563, "continuity": 0.15831692877998726, "statement": 0.15831692877998726, "lemma": 0.29736558256021506}}, {"docstring": "**Alias** of left.one_le_mul`.\n", "keywords": {"Alias": 0.030396371632413578, "mul": 0.04491197687864554, "left.one": 0.15831692877998726}}, {"docstring": " If `maximals r s` is included in but *shadows* the antichain `t`, then it is actually equal to `t`.\n", "keywords": {"shadows": 0.04491197687864554, "maximals": 0.09568045026443411, "antichain": 0.09568045026443411, "included": 0.15831692877998726, "equal": 0.15831692877998726}}, {"docstring": "Updating the last element of a tuple does not change the beginning.\n", "keywords": {"change the beginning": 0.015380821171891606, "Updating": 0.09568045026443411, "beginning": 0.09568045026443411, "element": 0.15831692877998726, "tuple": 0.15831692877998726, "change": 0.15831692877998726}}, {"docstring": "A set is dense iff it has non-trivial intersection with all basis sets.\n", "keywords": {"dense iff": 0.035715520099333646, "non-trivial intersection": 0.035715520099333646, "basis sets": 0.05259515133015473, "set is dense": 0.11487806119690562, "dense": 0.18569843656348187, "iff": 0.18569843656348187, "non-trivial": 0.18569843656348187, "intersection": 0.18569843656348187, "basis": 0.18569843656348187, "set": 0.2690767023266335, "sets": 0.2690767023266335}}, {"docstring": "Two subgroups are equal if they have the same elements.\n", "keywords": {"subgroups are equal": 0.09700399286574239, "elements": 0.15831692877998726, "subgroups": 0.29736558256021506, "equal": 0.29736558256021506}}, {"docstring": "The map `E \u21a6 Gal(L/E)` is inclusion-reversing\n", "keywords": {"Gal": 0.030396371632413578, "map": 0.09568045026443411, "inclusion-reversing": 0.09568045026443411}}, {"docstring": "**Alias** of ne_of_lt`.\n", "keywords": {"Alias": 0.030396371632413578}}, {"docstring": " Assumes right covariance. The lemma assuming left covariance is `left.mul_lt_one_of_le_of_lt`.\n", "keywords": {"Assumes": 0.1554527012770092, "Assumes right covariance": 0.15550511668375397, "left.mul": 0.22125774619993788, "covariance": 0.23433876543145388, "assuming left covariance": 0.2741996606407343, "left covariance": 0.33210654690690034, "lemma assuming left": 0.33289593951751206, "lemma assuming": 0.39462694305349416, "assuming left": 0.39462694305349416, "lemma": 0.5319420725534505, "assuming": 0.5319420725534505, "left": 0.5319420725534505}}, {"docstring": "The product of two nontrivial rings is not a domain\n", "keywords": {"nontrivial rings": 0.09700399286574239, "domain": 0.15831692877998726, "product": 0.29736558256021506, "nontrivial": 0.29736558256021506, "rings": 0.29736558256021506}}, {"docstring": " A set is a neighborhood of `a` within `[a, +\u221e)` if and only if it contains an interval `[a, u]` with `a < u`.\n", "keywords": {"interval": 0.060154590733539764, "set": 0.0771485953923296, "neighborhood": 0.0771485953923296}}, {"docstring": "Mapping intermediate fields along the identity does not change them\n", "keywords": {"Mapping intermediate fields": 0.01655915082773619, "Mapping intermediate": 0.04940384002065631, "intermediate fields": 0.09700399286574239, "Mapping": 0.15831692877998726, "intermediate": 0.29736558256021506, "fields": 0.29736558256021506, "identity": 0.29736558256021506, "change": 0.29736558256021506}}, {"docstring": "The range of an indexed cardinal function, whose outputs live in a higher universe than the    inputs, is always bounded above.\n", "keywords": {"indexed cardinal function": 0.0025258761156662004, "cardinal function": 0.015380821171891606, "indexed cardinal": 0.02570861714399338, "outputs live": 0.02570861714399338, "higher universe": 0.02570861714399338, "function": 0.09568045026443411, "inputs": 0.09568045026443411, "range": 0.15831692877998726, "indexed": 0.15831692877998726, "cardinal": 0.15831692877998726, "outputs": 0.15831692877998726, "live": 0.15831692877998726, "higher": 0.15831692877998726, "universe": 0.15831692877998726, "bounded": 0.15831692877998726}}, {"docstring": "If the two vectors passed to `oangle` are the same, the result is 0.\n", "keywords": {"vectors passed": 0.013527995261974615, "oangle": 0.04491197687864554, "vectors": 0.1155310835876123, "passed": 0.1155310835876123, "result": 0.1155310835876123}}, {"docstring": "A set is a neighborhood of `a` if and only if it contains an interval `(l, u)` containing `a`.\n", "keywords": {"interval": 0.06844581806138879, "set": 0.09568045026443411, "neighborhood": 0.09568045026443411}}, {"docstring": "If a family is anisotropic then its components must be. The converse is not true.\n", "keywords": {"family is anisotropic": 0.04188746641162499, "family": 0.2005079697193566, "anisotropic": 0.2005079697193566, "components": 0.2005079697193566, "true": 0.32883716426354986, "converse": 0.46553351027698087}}, {"docstring": "Equality behind `add_semiconj_by a x y`; useful for rewriting.\n", "keywords": {"add": 0.04491197687864554, "semiconj": 0.04491197687864554, "Equality": 0.15831692877998726, "rewriting": 0.15831692877998726}}, {"docstring": "The real square root is at most the natural square root plus one\n", "keywords": {"real square root": 0.011782282943034048, "natural square root": 0.011782282943034048, "square root": 0.027200199006318638, "real square": 0.04771708711059453, "natural square": 0.04771708711059453, "square": 0.11357121248292479, "root": 0.11357121248292479, "real": 0.2005079697193566, "natural": 0.2005079697193566}}, {"docstring": " If one nonempty affine subspace is less than another, the same applies to their directions\n", "keywords": {"nonempty affine subspace": 0.03339840940482845, "nonempty affine": 0.09700399286574239, "affine subspace": 0.09700399286574239, "directions": 0.15831692877998726, "nonempty": 0.29736558256021506, "affine": 0.29736558256021506, "subspace": 0.29736558256021506, "applies": 0.29736558256021506}}, {"docstring": "The function given in the definition of `torus_integral` is integrable.\n", "keywords": {"torus": 0.04491197687864554, "integral": 0.04491197687864554, "integrable": 0.09568045026443411, "function": 0.15831692877998726, "definition": 0.15831692877998726}}, {"docstring": " An induction lemma for polynomials. It takes a natural number `N` as a parameter, that is required to be at least as big as the `nat_degree` of the polynomial.  This is useful to prove results where you want to change each term in a polynomial to something else depending on the `nat_degree` of the polynomial itself and not on the specific `nat_degree` of each term.\n", "keywords": {"induction lemma": 0.04105147241716453, "nat": 0.05898542870326993, "degree": 0.05898542870326993, "polynomial": 0.13862938986433335, "induction": 0.19857669032667297, "lemma": 0.19857669032667297, "natural number": 0.21826154468821266, "lemma for polynomials": 0.2551985277402205, "term": 0.256713205057948, "number": 0.3873470291397912, "parameter": 0.3873470291397912, "change each term": 0.39981343296011657, "prove results": 0.4481622361033835, "natural": 0.46252632878476396, "required": 0.46252632878476396, "big": 0.46252632878476396, "specific": 0.47947591214557983, "prove": 0.5562999489995342, "results": 0.5562999489995342, "change": 0.5562999489995342}}, {"docstring": "Every ultrafilter `u` on `ultrafilter \u03b1` converges to a unique  point of `ultrafilter \u03b1`, namely `mjoin u`.\n", "keywords": {"unique point": 0.023732923233905415, "ultrafilter": 0.06638565823037844, "converges": 0.103096657787716, "mjoin": 0.103096657787716, "unique": 0.15225875770903138, "point": 0.15225875770903138}}, {"docstring": "The quotient map by a group action is open.\n", "keywords": {"action is open": 0.04940384002065631, "quotient map": 0.09700399286574239, "group action": 0.09700399286574239, "open": 0.15831692877998726, "quotient": 0.29736558256021506, "map": 0.29736558256021506, "group": 0.29736558256021506, "action": 0.29736558256021506}}, {"docstring": "Updating an element and taking the beginning commute.\n", "keywords": {"Updating an element": 0.04940384002065631, "beginning commute": 0.04940384002065631, "element and taking": 0.09700399286574239, "taking the beginning": 0.09700399286574239, "Updating": 0.15831692877998726, "commute": 0.15831692877998726, "element": 0.29736558256021506, "taking": 0.29736558256021506, "beginning": 0.29736558256021506}}, {"docstring": " If `x` and `y` are nonzero vectors on the same ray, then there exist positive numbers `r\u2081 r\u2082` such that `r\u2081 \u2022 x = r\u2082 \u2022 y`.\n", "keywords": {"exist positive numbers": 0.0006400448072512631, "positive numbers": 0.0065920978564317735, "nonzero vectors": 0.009239332327148086, "exist positive": 0.009239332327148086, "ray": 0.06844581806138879, "numbers": 0.06844581806138879, "nonzero": 0.09568045026443411, "vectors": 0.09568045026443411, "exist": 0.09568045026443411, "positive": 0.09568045026443411}}, {"docstring": " The Lusin separation theorem: if two analytic sets are disjoint, then they are contained in disjoint Borel sets.\n", "keywords": {"Lusin separation theorem": 0.002225169934539318, "disjoint Borel sets": 0.008336964382618628, "Lusin separation": 0.018423372132524086, "separation theorem": 0.022885248721446715, "disjoint Borel": 0.02714404025350355, "Borel sets": 0.02714404025350355, "analytic sets": 0.0562460611896591, "Lusin": 0.09474983170388594, "Borel": 0.09474983170388594, "theorem": 0.11718348279991213, "contained in disjoint": 0.12194096740933036, "sets": 0.13945519496053638, "disjoint": 0.13945519496053638, "separation": 0.19092478917347616, "analytic": 0.19092478917347616, "contained": 0.19092478917347616, "sets are disjoint": 0.25578024704229213}}, {"docstring": " `(k*x, k*y, k*z)` is a Pythagorean triple if and only if `(x, y, z)` is also a triple.\n", "keywords": {"Pythagorean triple": 0.015779466303306757, "Pythagorean": 0.07621084492189614, "triple": 0.10191687733271076}}, {"docstring": "The n-ary version of `set.mul_mem_mul`.\n", "keywords": {"set.mul": 0.04491197687864554, "mem": 0.04491197687864554, "mul": 0.04491197687864554, "n-ary version": 0.09700399286574239, "n-ary": 0.29736558256021506, "version": 0.29736558256021506}}, {"docstring": "Pointwise minimum of two monotone functions is a monotone function.\n", "keywords": {"Pointwise minimum": 0.02541909697430123, "monotone functions": 0.054400398012637276, "monotone": 0.11357121248292479, "Pointwise": 0.12363091320521931, "minimum": 0.2005079697193566, "functions": 0.22714242496584958, "function": 0.22714242496584958}}, {"docstring": " Norm of `const \u03b1 b` is less than or equal to `\u2225b\u2225`. If `\u03b1` is nonempty, then it is equal to `\u2225b\u2225`.\n", "keywords": {"Norm": 0.1325513591249599, "const": 0.1325513591249599, "equal": 0.14587031701600583, "nonempty": 0.3467063614068829}}, {"docstring": " Converting an in-range number to `fin (n + 1)` produces a result whose value is the original number.\n", "keywords": {"Converting an in-range": 0.021114872146320032, "produces a result": 0.021114872146320032, "in-range number": 0.051351238837580325, "original number": 0.051351238837580325, "fin": 0.05331699930238388, "Converting": 0.11246769819744627, "produces": 0.11246769819744627, "number": 0.13282721021560867, "in-range": 0.18385948854246909, "result": 0.18385948854246909, "original": 0.18385948854246909}}, {"docstring": "Concave **Jensen's inequality**, `finset.sum` version.\n", "keywords": {"Jensen inequality": 0.013797198203993007, "Concave": 0.04491197687864554, "finset.sum": 0.04491197687864554, "version": 0.04491197687864554, "Jensen": 0.08596317751626563, "inequality": 0.15831692877998726}}, {"docstring": "The Hausdorff distance is controlled by the diameter of the union\n", "keywords": {"Hausdorff distance": 0.007743432063478832, "distance is controlled": 0.013527995261974615, "Hausdorff": 0.06650965107397505, "union": 0.0771485953923296, "distance": 0.1155310835876123, "controlled": 0.1155310835876123, "diameter": 0.1155310835876123}}, {"docstring": " If there is an element with norm different from `0`, then the norm of the identity equals `1`. (Since we are working with seminorms supposing that the space is non-trivial is not enough.)\n", "keywords": {"identity equals": 0.022301551378828607, "element with norm": 0.08894856624393728, "norm": 0.10600449438550293, "equals": 0.1221512649852118, "element": 0.1785903903600119, "identity": 0.1785903903600119, "working with seminorms": 0.22714863390129153, "seminorms supposing": 0.22714863390129153, "space is non-trivial": 0.22714863390129153, "working": 0.4302357358329322, "seminorms": 0.4302357358329322, "supposing": 0.4302357358329322, "space": 0.4302357358329322, "non-trivial": 0.4302357358329322}}, {"docstring": "The distance to a set is controlled by the Hausdorff distance\n", "keywords": {"Hausdorff distance": 0.02714404025350355, "set is controlled": 0.037831312533597124, "Hausdorff": 0.09474983170388594, "distance": 0.13945519496053638, "set": 0.19092478917347616, "controlled": 0.19092478917347616}}, {"docstring": "Any number m is less than b^(number of digits in the base b representation of m)\n", "keywords": {"base b representation": 0.037831312533597124, "number of digits": 0.12194096740933039, "number": 0.13945519496053638, "digits": 0.19092478917347616, "base": 0.19092478917347616, "representation": 0.19092478917347616}}, {"docstring": "`ord \u2218 aleph` enumerates the infinite ordinals that are cardinals.\n", "keywords": {"ord": 0.04491197687864554, "aleph": 0.04491197687864554, "enumerates the infinite": 0.04940384002065631, "infinite ordinals": 0.09700399286574239, "enumerates": 0.15831692877998726, "cardinals": 0.15831692877998726, "infinite": 0.29736558256021506, "ordinals": 0.29736558256021506}}, {"docstring": "The evaluation map is not generally multiplicative when the coefficient ring is noncommutative, but nevertheless any polynomial of the form `p * (X - monomial 0 r)` is sent to zero when evaluated at `r`.  This is the key step in our proof of the Cayley-Hamilton theorem.\n", "keywords": {"ring is noncommutative": 0.009145555775475097, "evaluation map": 0.012122338073675774, "generally multiplicative": 0.012122338073675774, "coefficient ring": 0.012122338073675774, "monomial": 0.05899937629682816, "Cayley-Hamilton theorem": 0.07689846664795487, "noncommutative": 0.08280939275679769, "form": 0.08280939275679769, "key step": 0.09827342448325681, "evaluation": 0.10944015281422888, "map": 0.10944015281422888, "generally": 0.10944015281422888, "multiplicative": 0.10944015281422888, "coefficient": 0.10944015281422888, "ring": 0.10944015281422888, "polynomial": 0.10944015281422888, "evaluated": 0.10944015281422888, "theorem": 0.23871522237376758, "key": 0.29913195375393087, "step": 0.29913195375393087}}, {"docstring": "A dependent version of `add_subsemigroup.closure_induction`.\n", "keywords": {"add": 0.04491197687864554, "subsemigroup.closure": 0.04491197687864554, "induction": 0.04491197687864554, "dependent version": 0.09700399286574239, "dependent": 0.29736558256021506, "version": 0.29736558256021506}}, {"docstring": "`some_basis` gives a basis with the required orientation.\n", "keywords": {"required orientation": 0.02391462167226668, "orientation": 0.11984314898676356, "basis": 0.14323823713631006, "required": 0.19488865479360015}}, {"docstring": "**Alias** of the forward direction of cont_mdiff_within_at_iff_cont_diff_within_at`.\n", "keywords": {"Alias": 0.03402676245250578, "forward direction": 0.034987023778306175, "mdiff": 0.05331699930238388, "iff": 0.05331699930238388, "diff": 0.05331699930238388, "direction of cont": 0.06131733975553988, "cont": 0.069255433448279, "forward": 0.18385948854246909, "direction": 0.18385948854246909}}, {"docstring": "The definition of `sinh` in terms of `exp`.\n", "keywords": {"sinh": 0.04491197687864554, "exp": 0.04491197687864554, "definition": 0.15831692877998726, "terms": 0.15831692877998726}}, {"docstring": "Product of elements of a subsemiring of a `comm_semiring` indexed by a `finset` is in the    subsemiring.\n", "keywords": {"Product of elements": 0.012465543599998139, "comm": 0.05331699930238388, "semiring": 0.05331699930238388, "finset": 0.05331699930238388, "subsemiring": 0.08977403887827273, "Product": 0.09101163530720666, "indexed": 0.09101163530720666, "elements": 0.135280142484453}}, {"docstring": " If `g` maps a second argument of 0 to 1, then multiplying it over the result of `on_finset` is the same as multiplying it over the original `finset`.\n", "keywords": {"finset": 0.021352745740207107, "multiplying": 0.07571113878390312, "maps": 0.09713402394201612, "original": 0.09713402394201612, "argument": 0.14390902704051098, "result": 0.14390902704051098}}, {"docstring": "A preadditive category with finite coproducts has finite biproducts.\n", "keywords": {"finite biproducts": 0.0325194426147957, "preadditive category": 0.03663237450220032, "finite coproducts": 0.05417025203414716, "biproducts": 0.11521656054299435, "category with finite": 0.11793310824193863, "coproducts has finite": 0.11793310824193863, "finite": 0.13667842094541144, "preadditive": 0.1879836817695587, "category": 0.1879836817695587, "coproducts": 0.1879836817695587}}, {"docstring": "Non-dependent version of `function.update_comp_eq_of_forall_ne'`\n", "keywords": {"Non-dependent version": 0.015380821171891606, "function.update": 0.04491197687864554, "comp": 0.04491197687864554, "forall": 0.04491197687864554, "Non-dependent": 0.09568045026443411, "version": 0.15831692877998726}}, {"docstring": "The first projection at a point in a product is `C^\u221e`.\n", "keywords": {"projection": 0.15831692877998726, "point": 0.15831692877998726, "product": 0.15831692877998726}}, {"docstring": " If `f` is multilinear, then `f (\u03a3_{j\u2081} g\u2081 j\u2081, ..., \u03a3_{j\u2099} g\u2099 j\u2099)` is the sum of `f (g\u2081 (r 1), ..., g\u2099 (r n))` where `r` ranges over all functions `r`. This follows from multilinearity by expanding successively with respect to each coordinate.\n", "keywords": {"multilinear": 0.08922538916412363, "ranges": 0.08922538916412363, "functions": 0.08922538916412363, "multilinearity by expanding": 0.12124452117740256, "expanding successively": 0.12124452117740256, "successively with respect": 0.12124452117740256, "sum": 0.12363091320521931, "coordinate": 0.25386721785551913, "multilinearity": 0.32883716426354986, "expanding": 0.32883716426354986, "successively": 0.32883716426354986, "respect": 0.32883716426354986}}, {"docstring": " A version of `quotient.ind\u2082` taking `{s\u2081 : setoid \u03b1} {s\u2082 : setoid \u03b2}` as implicit arguments instead of instance arguments.\n", "keywords": {"quotient.ind \u2082` taking": 0.014218983619329623, "implicit arguments": 0.05755977077196411, "instance arguments": 0.05755977077196411, "setoid": 0.07442578585270058, "quotient.ind": 0.11840455484321102, "taking": 0.11840455484321102, "arguments": 0.1411879566095664, "version": 0.19274649316101516, "implicit": 0.19274649316101516, "instance": 0.19274649316101516}}, {"docstring": "**Alias** of the reverse direction of continuous_within_at_insert_self`.\n", "keywords": {"direction of continuous": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "insert": 0.04491197687864554, "continuous": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "A flat cone is always pointed (contains `0`).\n", "keywords": {"flat cone": 0.09700399286574239, "pointed": 0.15831692877998726, "flat": 0.29736558256021506, "cone": 0.29736558256021506}}, {"docstring": "A continuous function `f` is locally integrable with respect to any locally finite measure.\n", "keywords": {"locally finite measure": 0.006026046305276699, "continuous function": 0.021114872146320032, "finite measure": 0.021114872146320032, "integrable with respect": 0.034987023778306175, "locally integrable": 0.051351238837580325, "locally finite": 0.051351238837580325, "function": 0.11246769819744627, "measure": 0.11246769819744627, "locally": 0.13282721021560867, "continuous": 0.18385948854246909, "integrable": 0.18385948854246909, "respect": 0.18385948854246909, "finite": 0.18385948854246909}}, {"docstring": "If A is an algebraic algebra over K, then A is algebraic over L when L is an extension of K\n", "keywords": {"algebraic algebra": 0.02893602993452452, "algebraic": 0.09770854302279938, "algebra": 0.14390902704051098, "extension": 0.14390902704051098}}, {"docstring": " So-named because the outer coercion is `int.cast` into `zmod`. For `int.cast` into an arbitrary ring, see `zmod.int_cast_cast`.\n", "keywords": {"int.cast": 0.04605813218940234, "outer coercion": 0.06840758008791419, "zmod": 0.07807632871846422, "cast": 0.07975778315078337, "So-named": 0.1600514523587571, "zmod.int": 0.2272793193457584, "outer": 0.2530367690088724, "coercion": 0.2530367690088724, "arbitrary ring": 0.27432053812932977, "ring": 0.39823908368262456, "arbitrary": 0.540549862748956}}, {"docstring": " A function to a pseudo-metric-space is `1`-Lipschitz if and only if points in the same cylinder of length `n` are sent to points within distance `(1/2)^n`. Not expressed using `lipschitz_with` as we don't have a metric space structure\n", "keywords": {"cylinder of length": 0.02450457676658725, "points within distance": 0.06794329592555497, "Lipschitz": 0.08053746534125009, "metric space structure": 0.1044796716351106, "points": 0.11189915212105243, "length": 0.128104973733605, "distance": 0.128104973733605, "space structure": 0.17631404289660177, "function": 0.18670988494849627, "cylinder": 0.18670988494849627, "metric space": 0.24501414226073304, "structure": 0.3378743228266075, "expressed": 0.44361725888738957, "metric": 0.44361725888738957, "space": 0.44361725888738957}}, {"docstring": "Pythagorean theorem, vector inner product form.\n", "keywords": {"Pythagorean theorem": 0.02570861714399338, "vector inner product": 0.04940384002065631, "product form": 0.04940384002065631, "Pythagorean": 0.15831692877998726, "theorem": 0.15831692877998726, "vector": 0.15831692877998726, "form": 0.15831692877998726, "product": 0.29736558256021506}}, {"docstring": "**Alias** of the reverse direction of mul_sub_mul_div_mul_neg_iff`.\n", "keywords": {"reverse direction": 0.022401895700338237, "Alias": 0.03620452014532985, "mul": 0.04343368128437256, "div": 0.058865175910949544, "neg": 0.058865175910949544, "iff": 0.058865175910949544, "direction of mul": 0.06604405377106645, "reverse": 0.14802380456229533, "direction": 0.14802380456229533}}, {"docstring": "A regular element of a `nontrivial` `mul_zero_class` is non-zero.\n", "keywords": {"regular element": 0.02570861714399338, "nontrivial": 0.04491197687864554, "mul": 0.04491197687864554, "class": 0.04491197687864554, "non-zero": 0.09568045026443411, "regular": 0.15831692877998726, "element": 0.15831692877998726}}, {"docstring": "The `v`-adic valuation on `K` extends the `v`-adic valuation on `R`.\n", "keywords": {"adic valuation": 0.008150399230368241, "adic": 0.049279142876773374, "valuation": 0.08136984231491272, "extends": 0.12600799873373572}}, {"docstring": "The norm of a function is controlled by the supremum of the pointwise norms\n", "keywords": {"function is controlled": 0.019557279302732804, "pointwise norms": 0.02635223776265893, "function": 0.1384995633470844, "controlled": 0.1384995633470844, "supremum": 0.1384995633470844, "pointwise": 0.1384995633470844, "norm": 0.1853841766790467, "norms": 0.1853841766790467}}, {"docstring": "Given sets `s, t` of a commutative monoid `M`, `x \u2208 M` is in the submonoid of `M` generated by    `s \u222a t` iff there exists an element of the submonoid generated by `s` and an element of the    submonoid generated by `t` whose product is `x`.\n", "keywords": {"submonoid generated": 0.0056736715867865065, "commutative monoid": 0.012329138253901775, "iff there exists": 0.012329138253901775, "exists an element": 0.013581556796441721, "generated": 0.033044807349759286, "submonoid": 0.037726639108450394, "element": 0.051625031667552536, "sets": 0.09384485274935173, "monoid": 0.09384485274935173, "iff": 0.09384485274935173, "commutative": 0.12977783592208209, "exists": 0.12977783592208209, "product": 0.12977783592208209}}, {"docstring": "In a normed field, `cau_seq` coincides with the usual notion of Cauchy sequences.\n", "keywords": {"Cauchy sequences": 0.023458380875189744, "cau": 0.04491197687864554, "seq": 0.04491197687864554, "notion of Cauchy": 0.04498862876540802, "normed field": 0.04940384002065631, "usual notion": 0.09700399286574239, "Cauchy": 0.1447773057422032, "field": 0.15831692877998726, "coincides": 0.15831692877998726, "sequences": 0.15831692877998726, "normed": 0.29736558256021506, "usual": 0.29736558256021506, "notion": 0.29736558256021506}}, {"docstring": "A variant of `matrix.mv_polynomial_X_map_eval\u2082` with a bundled `ring_hom` on the LHS.\n", "keywords": {"matrix.mv": 0.04491197687864554, "polynomial": 0.04491197687864554, "map": 0.04491197687864554, "ring": 0.04491197687864554, "hom": 0.04491197687864554, "LHS": 0.057012387690331526, "eval": 0.09568045026443411, "bundled": 0.09568045026443411, "variant": 0.15831692877998726}}, {"docstring": " For each field, and for each nonzero element of said field, there is a unique inverse. Since `is_field` doesn't remember the data of an `inv` function and as such, a lemma that there is a unique inverse could be useful.\n", "keywords": {"unique inverse": 0.04097105058174771, "nonzero element": 0.045989032315605, "field": 0.08954859312248652, "unique": 0.12059874026101906, "inverse": 0.1570002386899795, "nonzero": 0.20968316837900652, "element": 0.20968316837900652, "inv": 0.24909404919481756, "remember the data": 0.2986666554556934, "function": 0.37096347066992635, "remember": 0.4795617368720694, "data": 0.4795617368720694, "lemma": 0.4795617368720694}}, {"docstring": "Conjugation acting on fixed element of the additive group is continuous when both   `add` and `neg` are continuous.\n", "keywords": {"Conjugation acting": 0.020435055290363522, "acting on fixed": 0.033892441937102495, "fixed element": 0.033892441937102495, "additive group": 0.033892441937102495, "add": 0.052376395424323874, "neg": 0.052376395424323874, "group is continuous": 0.10882816095144712, "Conjugation": 0.11060549338282699, "continuous": 0.13023752997463905, "acting": 0.18105634546484617, "fixed": 0.18105634546484617, "element": 0.18105634546484617, "additive": 0.18105634546484617, "group": 0.18105634546484617}}, {"docstring": " A version of `measurable_const` that assumes `f x = f y` for all `x, y`. This version works for functions between empty types.\n", "keywords": {"measurable": 0.07341787287626325, "const": 0.07341787287626325, "assumes": 0.1513046335336394, "version": 0.230365520888437, "empty types": 0.25058000616119436, "version works": 0.31824244917758493, "works for functions": 0.3784658464863935, "functions between empty": 0.3784658464863935, "types": 0.3824015048530132, "works": 0.5239807616855658, "functions": 0.5239807616855658, "empty": 0.5239807616855658}}, {"docstring": " Given `f : \u03b2 \u2192 \u211d\u22650\u221e`, if `f` sends `{i | p i}` to a set of positive numbers accumulating to zero, then closed `f i`-neighborhoods of the diagonal form a basis of `\ud835\udce4 \u03b1`.  For specific bases see `uniformity_basis_edist_le` and `uniformity_basis_edist_le'`.\n", "keywords": {"positive numbers accumulating": 0.009187646849852977, "set of positive": 0.0424461736769035, "positive numbers": 0.0424461736769035, "numbers accumulating": 0.0424461736769035, "diagonal form": 0.0424461736769035, "sends": 0.08341580362175786, "uniformity": 0.08625350918674196, "edist": 0.08625350918674196, "closed": 0.1392597354171449, "neighborhoods": 0.1392597354171449, "basis": 0.1460667371106675, "set": 0.2017866607817524, "positive": 0.2017866607817524, "numbers": 0.2017866607817524, "accumulating": 0.2017866607817524, "diagonal": 0.2017866607817524, "form": 0.2017866607817524, "form a basis": 0.24055969325193047, "specific bases": 0.27970408624556065, "specific": 0.4675140070775802}}, {"docstring": "The first projection in a product of topological spaces sends open sets to open sets.\n", "keywords": {"topological spaces sends": 0.007931133193188878, "spaces sends open": 0.008897885504732549, "sends open sets": 0.009986353232843035, "open sets": 0.024140905658634568, "product of topological": 0.038584678130008584, "topological spaces": 0.038584678130008584, "spaces sends": 0.038584678130008584, "sends open": 0.0431505389096901, "open": 0.10730569120144322, "sets": 0.10730569120144322, "sets to open": 0.16405259049401655, "projection": 0.19274649316101516, "product": 0.19274649316101516, "topological": 0.19274649316101516, "spaces": 0.19274649316101516, "sends": 0.19274649316101516}}, {"docstring": "**Alias** of the forward direction of is_seq_closed_iff_is_closed`.\n", "keywords": {"closed": 0.019648131954263418, "Alias": 0.034278050535979626, "forward direction": 0.035715520099333646, "seq": 0.05393656033701752, "iff": 0.05393656033701752, "forward": 0.18569843656348187, "direction": 0.18569843656348187}}, {"docstring": "If x is a algebraic over K, then x is algebraic over L when L is an extension of K\n", "keywords": {"algebraic": 0.07915846438999359, "extension": 0.14832923246533666}}, {"docstring": " In the characteristic zero case, the weights in the centroid sum to 1 if the number of points is `n + 1`.\n", "keywords": {"characteristic zero case": 0.0065920978564317735, "centroid sum": 0.009239332327148086, "number of points": 0.009239332327148086, "case": 0.06844581806138879, "characteristic": 0.09568045026443411, "weights": 0.09568045026443411, "centroid": 0.09568045026443411, "sum": 0.09568045026443411, "number": 0.09568045026443411, "points": 0.09568045026443411}}, {"docstring": " Consider a sum of `g i (f i)` over a `finset`. Suppose `g` is a function such as multiplication, which maps a second argument of 0 to 0.  (A typical use case would be a weighted sum of `f i * h i` or `f i \u2022 h i`, where `f` gives the weights that are multiplied by some other function `h`.)  Then if `f` is replaced by the corresponding indicator function, the `finset` may be replaced by a possibly larger `finset` without changing the value of the sum.\n", "keywords": {"finset": 0.05961547006604866, "sum": 0.12560734258195294, "function": 0.14529706398279618, "weighted sum": 0.24738434523408454, "replaced": 0.25255970359748353, "Suppose": 0.3156888197411129, "indicator function": 0.33567789557128336, "multiplication": 0.3759925471772196, "typical use case": 0.38311551128086413, "possibly larger": 0.42614659799964194, "maps": 0.43265500536812623, "argument": 0.43265500536812623, "larger": 0.5182650753307437, "typical": 0.5263027532284289, "case": 0.5263027532284289, "weighted": 0.5263027532284289, "weights": 0.5263027532284289, "multiplied": 0.5263027532284289, "indicator": 0.5765578794356276, "possibly": 0.5765578794356276}}, {"docstring": "**Alias** of measure_theory.measure.finite_at_filter.integrable_at_filter_of_tendsto`.\n", "keywords": {"Alias": 0.030396371632413578, "filter.integrable": 0.04491197687864554, "filter": 0.04491197687864554, "tendsto": 0.04491197687864554, "measure": 0.09568045026443411}}, {"docstring": "$\\lim_{x\\to-\\infty}|x|=+\\infty$\n", "keywords": {"infty": 0.02245598843932277, "lim": 0.05899937629682816}}, {"docstring": "Symmetric of `filter.map_map\u2082_distrib_left`.\n", "keywords": {"map \u2082_ distrib": 0.02570861714399338, "filter.map": 0.04491197687864554, "left": 0.04491197687864554, "Symmetric": 0.15831692877998726, "map": 0.15831692877998726, "distrib": 0.15831692877998726}}, {"docstring": "Shortcut lemma for `matrix.to_lin'_mul` and `linear_map.comp_apply`\n", "keywords": {"lin mul": 0.02570861714399338, "matrix.to": 0.04491197687864554, "linear": 0.04491197687864554, "map.comp": 0.04491197687864554, "apply": 0.04491197687864554, "Shortcut lemma": 0.04940384002065631, "Shortcut": 0.15831692877998726, "lin": 0.15831692877998726, "mul": 0.15831692877998726, "lemma": 0.29736558256021506}}, {"docstring": " If `f : X \u2192 Y` is H\u00f6lder continuous in a neighborhood of every point `x : X` with the same positive exponent `r` but possibly different coefficients, then the Hausdorff dimension of the range of `f` is at most the Hausdorff dimension of `X` divided by `r`.\n", "keywords": {"Hausdorff dimension": 0.0020907557916905223, "H\u00f6lder continuous": 0.007209119774282124, "positive exponent": 0.009386651690650429, "possibly different coefficients": 0.009386651690650429, "Hausdorff": 0.02470487212953946, "dimension": 0.04213844269123149, "H\u00f6lder": 0.06295532167170864, "point": 0.08179429269966654, "exponent": 0.08179429269966654, "coefficients": 0.08179429269966654, "divided": 0.08179429269966654, "continuous": 0.11369206228658875, "neighborhood": 0.11369206228658875, "positive": 0.11369206228658875, "possibly": 0.11369206228658875, "range": 0.11369206228658875}}, {"docstring": " If a product is 1 and the function is 1 except possibly at one point, it is 1 everywhere on the `finset`.\n", "keywords": {"finset": 0.04491197687864554, "point": 0.0771485953923296, "product": 0.1155310835876123, "function": 0.1155310835876123, "possibly": 0.1155310835876123}}, {"docstring": "If a preadditive category has all kernels, then it also has all equalizers.\n", "keywords": {"preadditive category": 0.02570861714399338, "kernels": 0.09568045026443411, "equalizers": 0.09568045026443411, "preadditive": 0.15831692877998726, "category": 0.15831692877998726}}, {"docstring": "**Alias** of the reverse direction of monotone_on_to_dual_comp_iff`.\n", "keywords": {"direction of monotone": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "dual": 0.04491197687864554, "comp": 0.04491197687864554, "iff": 0.04491197687864554, "monotone": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " **Strict inequality case of the Rearrangement Inequality**: Pointwise multiplication of `f` and `g`, which antivary together, is strictly decreased by a permutation if and only if `f \u2218 \u03c3` and `g` do not antivary together. Stated by permuting the entries of `f`.\n", "keywords": {"Strict inequality case": 0.0016642028270215602, "Strict inequality": 0.008747117210927207, "Pointwise multiplication": 0.011683623122683102, "Rearrangement Inequality": 0.011811652352352629, "inequality case": 0.02602119105438165, "strictly decreased": 0.03495776414940041, "Strict": 0.06283799353160062, "Pointwise": 0.06283799353160062, "inequality": 0.06899702012035523, "Rearrangement": 0.08459615986079659, "antivary": 0.08562916729374415, "Stated by permuting": 0.17147630665836236, "case": 0.1837851895373716, "multiplication": 0.1837851895373716, "strictly": 0.1837851895373716, "decreased": 0.1837851895373716, "permutation": 0.1837851895373716, "permuting the entries": 0.23851325396085266, "Stated": 0.3335528702481384, "permuting": 0.4388397201336416}}, {"docstring": "If all elements of a `finset` satisfy the predicate `p`, a sum over `s.subtype p` equals that sum over `s`.\n", "keywords": {"satisfy the predicate": 0.012811029635671736, "finset": 0.05331699930238388, "equals that sum": 0.054390667884512904, "sum": 0.10038999320777726, "satisfy": 0.11246769819744627, "predicate": 0.11246769819744627, "s.subtype": 0.11246769819744627, "equals": 0.11246769819744627, "elements": 0.18385948854246909}}, {"docstring": "Elements of a cancel monoid are regular.  Cancel semigroups do not appear to exist.\n", "keywords": {"monoid are regular": 0.03985444220279051, "cancel monoid": 0.13064959758481184, "Elements": 0.1554527012770092, "regular": 0.1554527012770092, "cancel": 0.23433876543145388, "monoid": 0.246550513069643, "Cancel semigroups": 0.33210654690690034, "exist": 0.38997397536695666, "semigroups": 0.5319420725534505}}, {"docstring": " An abstract version of continuity of sequentially continuous functions on metric spaces: if a filter `k` is countably generated then `tendsto f k l` iff for every sequence `u` converging to `k`, `f \u2218 u` tends to `l`.\n", "keywords": {"sequentially continuous functions": 0.0016012214736657916, "metric spaces": 0.00899321792126428, "abstract version": 0.013527995261974615, "version of continuity": 0.013527995261974615, "continuity of sequentially": 0.013527995261974615, "sequentially continuous": 0.013527995261974615, "continuous functions": 0.013527995261974615, "functions on metric": 0.013527995261974615, "countably generated": 0.013527995261974615, "spaces": 0.0771485953923296, "filter": 0.0771485953923296, "tendsto": 0.0771485953923296, "iff": 0.0771485953923296, "sequence": 0.0771485953923296, "converging": 0.0771485953923296, "abstract": 0.1155310835876123, "version": 0.1155310835876123, "continuity": 0.1155310835876123, "sequentially": 0.1155310835876123, "continuous": 0.1155310835876123}}, {"docstring": "In exponential characteristic one, the separable degree equals the degree.\n", "keywords": {"separable degree equals": 0.010962043841203115, "exponential characteristic": 0.03663237450220032, "separable degree": 0.05417025203414716, "degree equals": 0.05417025203414716, "equals the degree": 0.11793310824193863, "degree": 0.13667842094541144, "exponential": 0.1879836817695587, "characteristic": 0.1879836817695587, "separable": 0.1879836817695587, "equals": 0.1879836817695587}}, {"docstring": "The negation of a map which preserves addition, preserves addition when the target is commutative.\n", "keywords": {"target is commutative": 0.02391462167226668, "preserves addition": 0.02495406599442899, "map which preserves": 0.09916653097095413, "preserves": 0.10901343189444501, "addition": 0.10901343189444501, "commutative": 0.11984314898676356, "negation": 0.19488865479360015, "map": 0.19488865479360015, "target": 0.19488865479360015}}, {"docstring": "If the domain of a `dense_inducing` map is a separable space, then so is the codomain.\n", "keywords": {"separable space": 0.015380821171891606, "dense": 0.04491197687864554, "inducing": 0.04491197687864554, "map": 0.09568045026443411, "space": 0.09568045026443411, "codomain": 0.09568045026443411, "domain": 0.15831692877998726, "separable": 0.15831692877998726}}, {"docstring": " Taking only the first `i+1` elements in a list, and then dropping the first `i` ones, one is left with a list of length `1` made of the `i`-th element of the original list.\n", "keywords": {"original list": 0.020751386351185567, "list of length": 0.05123069878131252, "list": 0.054263680906415535, "Taking": 0.09016343558957324, "length": 0.09016343558957324, "made": 0.09016343558957324, "dropping": 0.12488107622505283, "left": 0.12488107622505283, "original": 0.12488107622505283, "elements": 0.1606335718884814, "element": 0.1606335718884814}}, {"docstring": "Deprecated: use `fun_like.ext_iff` instead.\n", "keywords": {"Deprecated": 0.04491197687864554, "fun": 0.04491197687864554, "like.ext": 0.04491197687864554, "iff": 0.04491197687864554}}, {"docstring": " Rotating the first vector by the angle between the two vectors and swapping the vectors results an an angle of 0.\n", "keywords": {"vectors results": 0.02766315277094101, "angle": 0.0851294669924546, "vectors and swapping": 0.08742112898964559, "swapping the vectors": 0.0874211289896456, "Rotating": 0.09398067895883618, "vectors": 0.10356599227702173, "swapping": 0.12995821090594875, "results": 0.12995821090594875, "vector": 0.20713198455404347}}, {"docstring": " Restricting to a larger box does not change the set of boxes. We cannot claim equality of prepartitions because they have different types.\n", "keywords": {"set of boxes": 0.02541909697430123, "larger box": 0.04188746641162499, "change the set": 0.04188746641162499, "Restricting": 0.12363091320521931, "boxes": 0.12363091320521931, "larger": 0.2005079697193566, "box": 0.2005079697193566, "change": 0.2005079697193566, "set": 0.2005079697193566, "claim equality": 0.2766850298235749, "equality of prepartitions": 0.2766850298235749, "types": 0.32883716426354986, "claim": 0.46553351027698087, "equality": 0.46553351027698087, "prepartitions": 0.46553351027698087}}, {"docstring": " The filters `residual \u211d` and `volume.ae` are disjoint. This means that there exists a residual set of Lebesgue measure zero (e.g., the set of Liouville numbers).\n", "keywords": {"volume.ae": 0.0771485953923296, "Liouville numbers": 0.1318583909696899, "filters": 0.15831692877998726, "disjoint": 0.15831692877998726, "Lebesgue measure": 0.18824022319174213, "set of Lebesgue": 0.18870129465558902, "set of Liouville": 0.18870129465558902, "residual": 0.2370366908187126, "set": 0.26921844142958173, "Lebesgue": 0.2948270607118151, "Liouville": 0.2948270607118151, "residual set": 0.34274795485962534, "numbers": 0.3951375787241905, "exists": 0.5373296883685575, "measure": 0.5373296883685575, "exists a residual": 0.6127324443692569}}, {"docstring": "For nonzero `a` and `b`, the power of `p` in `a * b` is the sum of the powers in `a` and `b`\n", "keywords": {"nonzero": 0.09713402394201612, "sum": 0.14390902704051098, "power": 0.15142227756780624, "powers": 0.15142227756780624}}, {"docstring": " If `\u03c6 i` is a sequence of normed bump function, `(\u03c6 i \u22c6 g) x\u2080` tends to `g x\u2080` if `(\u03c6 i).R` tends to `0` and `g` is continuous at `x\u2080`.\n", "keywords": {"normed bump function": 0.0010606143890052174, "bump function": 0.00899321792126428, "sequence of normed": 0.013527995261974615, "normed bump": 0.013527995261974615, "function": 0.0771485953923296, "sequence": 0.1155310835876123, "normed": 0.1155310835876123, "bump": 0.1155310835876123, "continuous": 0.1155310835876123}}, {"docstring": "**Alias** of the forward direction of complete_lattice.independent_iff_sup_indep`.\n", "keywords": {"direction of complete": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "lattice.independent": 0.04491197687864554, "iff": 0.04491197687864554, "indep": 0.04491197687864554, "complete": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "If a function has a limit, then its liminf coincides with its limit.\n", "keywords": {"liminf coincides": 0.037831312533597124, "limit": 0.07334489383741183, "function": 0.19092478917347616, "liminf": 0.19092478917347616, "coincides": 0.19092478917347616}}, {"docstring": "Function extensionality, proven using quotients.\n", "keywords": {"Function extensionality": 0.02570861714399338, "proven using quotients": 0.02570861714399338, "Function": 0.15831692877998726, "extensionality": 0.15831692877998726, "proven": 0.15831692877998726, "quotients": 0.15831692877998726}}, {"docstring": "An equivalent expression of `submonoid.fg` in terms of `set.finite` instead of `finset`.\n", "keywords": {"equivalent expression": 0.013527995261974615, "submonoid.fg": 0.04491197687864554, "set.finite": 0.04491197687864554, "finset": 0.04491197687864554, "equivalent": 0.1155310835876123, "expression": 0.1155310835876123, "terms": 0.1155310835876123}}, {"docstring": "If `generalized_continued_fraction.of v` terminated at step `n`, then the `n`th convergent is exactly `v`.\n", "keywords": {"terminated at step": 0.009239332327148086, "generalized": 0.04491197687864554, "continued": 0.04491197687864554, "fraction.of": 0.09568045026443411, "terminated": 0.09568045026443411, "step": 0.09568045026443411, "convergent": 0.15831692877998726}}, {"docstring": "See `finsum_comp`, `fintype.sum_bijective` and `finset.sum_bij`.\n", "keywords": {"finsum": 0.04491197687864554, "comp": 0.04491197687864554, "fintype.sum": 0.04491197687864554, "bijective": 0.04491197687864554, "finset.sum": 0.04491197687864554, "bij": 0.04491197687864554}}, {"docstring": "A quick way to convert a `pre_envel_group_rel'` to a `pre_envel_group_rel`.\n", "keywords": {"pre": 0.02317053471260329, "envel": 0.02317053471260329, "group": 0.02317053471260329, "rel": 0.059463729216923555, "quick": 0.15109932261208045, "convert": 0.15109932261208045}}, {"docstring": "We have the congruence `legendre_sym p a \u2261 a ^ (p / 2) mod p`.\n", "keywords": {"legendre": 0.04491197687864554, "congruence": 0.0771485953923296, "sym": 0.0771485953923296, "mod": 0.0771485953923296}}, {"docstring": "The sum of a function over `points_with_circumcenter_index`.\n", "keywords": {"points": 0.04491197687864554, "circumcenter": 0.04491197687864554, "index": 0.04491197687864554, "sum": 0.29736558256021506, "function": 0.29736558256021506}}, {"docstring": " Assumes right covariance. The lemma assuming left covariance is `left.one_lt_mul_of_lt_of_le`.\n", "keywords": {"Assumes right covariance": 0.15195679415702995, "Assumes": 0.1531727145735673, "left.one": 0.2182620423168793, "mul": 0.2182620423168793, "covariance": 0.23216465691767033, "assuming left covariance": 0.2636654148178027, "lemma assuming left": 0.3201847146816566, "left covariance": 0.32446011851782974, "lemma assuming": 0.38571507274593436, "assuming left": 0.38571507274593436, "lemma": 0.5275897320195265, "assuming": 0.5275897320195265, "left": 0.5275897320195265}}, {"docstring": "**Alias** of left.neg_le_self`.\n", "keywords": {"Alias": 0.030396371632413578, "left.neg": 0.15831692877998726}}, {"docstring": " If any two points of a set are contained in a preconnected subset, then the original set is preconnected as well.\n", "keywords": {"preconnected subset": 0.035552851931764155, "original set": 0.05913243875864445, "subset": 0.11984314898676356, "set are contained": 0.12748048004056908, "set": 0.14323823713631006, "preconnected": 0.14323823713631006, "points": 0.19488865479360015, "contained": 0.19488865479360015, "original": 0.19488865479360015, "set is preconnected": 0.2679012462364596}}, {"docstring": "A complex function is conformal if and only if the function is holomorphic or antiholomorphic    with a nonvanishing differential.\n", "keywords": {"nonvanishing differential": 0.021114872146320036, "holomorphic or antiholomorphic": 0.03498702377830618, "complex function": 0.03833027959745858, "function is conformal": 0.03833027959745858, "function is holomorphic": 0.03833027959745858, "function": 0.10038999320777728, "differential": 0.11246769819744629, "complex": 0.1838594885424691, "conformal": 0.1838594885424691, "holomorphic": 0.1838594885424691, "antiholomorphic": 0.1838594885424691, "nonvanishing": 0.1838594885424691}}, {"docstring": " If a function is linearly approximated by a continuous linear map with a (possibly nonlinear) right inverse, then it is locally onto: a ball of an explicit radius is included in the image of the map.\n", "keywords": {"continuous linear map": 0.001553283761569173, "possibly nonlinear": 0.005974900595755618, "function is linearly": 0.011655636007504163, "linearly approximated": 0.011655636007504163, "continuous linear": 0.011655636007504163, "explicit radius": 0.011655636007504163, "radius is included": 0.011655636007504163, "linear map": 0.014141230047608318, "map": 0.06495418184018355, "possibly": 0.07706758846839766, "nonlinear": 0.07706758846839766, "inverse": 0.07706758846839766, "function": 0.10733753945461715, "linearly": 0.10733753945461715, "approximated": 0.10733753945461715, "continuous": 0.10733753945461715, "linear": 0.10733753945461715, "locally": 0.10733753945461715, "ball": 0.10733753945461715, "explicit": 0.10733753945461715}}, {"docstring": "`padic_val_nat p 0` is 0 for any `p`.\n", "keywords": {"padic": 0.04491197687864554, "val": 0.04491197687864554, "nat": 0.09568045026443411}}, {"docstring": "The order of the formal power series `X^n` is `n`.\n", "keywords": {"formal power series": 0.0025258761156662004, "power series": 0.015380821171891606, "formal power": 0.02570861714399338, "series": 0.09568045026443411, "order": 0.15831692877998726, "formal": 0.15831692877998726, "power": 0.15831692877998726}}, {"docstring": "The subgroup generated by a set includes the set.\n", "keywords": {"subgroup generated": 0.037831312533597124, "set includes": 0.0562460611896591, "includes the set": 0.12194096740933036, "set": 0.13945519496053638, "subgroup": 0.19092478917347616, "generated": 0.19092478917347616, "includes": 0.19092478917347616}}, {"docstring": "The sequence `B \u27f6 A \u229e B \u27f6 A` is exact.\n", "keywords": {"sequence": 0.09568045026443411, "exact": 0.09568045026443411}}, {"docstring": "**Alias** of subset_of_eq`.\n", "keywords": {"Alias": 0.030396371632413578, "subset": 0.09568045026443411}}, {"docstring": " A module over a `subsingleton` semiring is a `subsingleton`. We cannot register this as an instance because Lean has no way to guess `R`.\n", "keywords": {"subsingleton": 0.024316515437465103, "instance because Lean": 0.11838875122442698, "semiring": 0.12504522868882575, "module": 0.1825434400827215, "Lean": 0.24234725227830933, "guess": 0.33171045238853597, "register": 0.4367969017911247, "instance": 0.4367969017911247}}, {"docstring": "The order of the monomial `a*X^n` is `n` if `a \u2260 0`.\n", "keywords": {"monomial": 0.09568045026443411, "order": 0.15831692877998726}}, {"docstring": "Another version of `bernoulli.sum_range_pow`.\n", "keywords": {"bernoulli.sum": 0.04491197687864554, "range": 0.04491197687864554, "pow": 0.04491197687864554, "version": 0.29736558256021506}}, {"docstring": " If \u03b3 is a nonzero element of a linearly ordered group with zero element adjoined, then {x | x < \u03b3} is a neighbourhood of 0.\n", "keywords": {"linearly ordered group": 0.0026058896166551234, "element adjoined": 0.01661242725142902, "linearly ordered": 0.018641876658774398, "ordered group": 0.018641876658774398, "nonzero element": 0.024893945799064357, "element": 0.08977403887827273, "adjoined": 0.09101163530720666, "nonzero": 0.13528014248445303, "linearly": 0.13528014248445303, "ordered": 0.13528014248445303, "group": 0.13528014248445303, "neighbourhood": 0.13528014248445303}}, {"docstring": "A family of continuous linear maps is `C^n` on `s` if all its applications are.\n", "keywords": {"continuous linear maps": 0.03339840940482845, "family of continuous": 0.09700399286574239, "continuous linear": 0.09700399286574239, "linear maps": 0.09700399286574239, "family": 0.29736558256021506, "continuous": 0.29736558256021506, "linear": 0.29736558256021506, "maps": 0.29736558256021506, "applications": 0.29736558256021506}}, {"docstring": "The cartesian product of `C^n` functions is `C^n`.\n", "keywords": {"cartesian product": 0.02570861714399338, "functions": 0.09568045026443411, "cartesian": 0.15831692877998726, "product": 0.15831692877998726}}, {"docstring": "The leading coefficient of a product of polynomials is equal to the product of the leading coefficients.  See `polynomial.leading_coeff_prod'` (with a `'`) for a version for commutative semirings, where additionally, the product of the leading coefficients must be nonzero.\n", "keywords": {"leading coefficients": 0.02016441497935951, "polynomials is equal": 0.027927715292357373, "product of polynomials": 0.034158668833951626, "leading": 0.05366165349968876, "product": 0.06679686653414625, "coefficients": 0.12040088722167919, "commutative semirings": 0.15768895900772667, "polynomials": 0.16483005985019816, "equal": 0.16483005985019816, "version for commutative": 0.1981693770925433, "polynomial.leading": 0.25910470260934576, "coeff": 0.25910470260934576, "prod": 0.25910470260934576, "semirings": 0.3349270547895472, "additionally": 0.3349270547895472, "nonzero": 0.3349270547895472, "version": 0.4066859457311983, "commutative": 0.4066859457311983}}, {"docstring": " The Monge point of an (n+2)-simplex, in terms of `points_with_circumcenter`.\n", "keywords": {"Monge point": 0.026378926493064607, "simplex": 0.054709255964732355, "circumcenter": 0.054709255964732355, "Monge": 0.09401982591602405, "terms": 0.1879836817695587, "point": 0.2733568418908229, "points": 0.2733568418908229}}, {"docstring": "Balls defined using the distance or the edistance coincide\n", "keywords": {"Balls defined": 0.015380821171891606, "edistance coincide": 0.015380821171891606, "Balls": 0.09568045026443411, "coincide": 0.09568045026443411, "defined": 0.15831692877998726, "distance": 0.15831692877998726, "edistance": 0.15831692877998726}}, {"docstring": "If `f a = 0`, then the sum of `f i` over `i \u2208 insert a s` equals the sum of `f i` over `i \u2208 s`.\n", "keywords": {"equals the sum": 0.007942711351828013, "sum": 0.0456089852516003, "insert": 0.08638782221675846, "equals": 0.08638782221675846}}, {"docstring": "If a finset has cardinality larger than the dimension of the space, then there is a nontrivial linear relation amongst its elements.\n", "keywords": {"nontrivial linear relation": 0.0042542192213185686, "finset has cardinality": 0.02570861714399338, "cardinality larger": 0.02570861714399338, "nontrivial linear": 0.02570861714399338, "linear relation": 0.02570861714399338, "space": 0.09568045026443411, "elements": 0.09568045026443411, "finset": 0.15831692877998726, "cardinality": 0.15831692877998726, "larger": 0.15831692877998726, "dimension": 0.15831692877998726, "nontrivial": 0.15831692877998726, "linear": 0.15831692877998726, "relation": 0.15831692877998726}}, {"docstring": "If `M` is nondegenerate and `w \u2b1d M \u2b1d v = 0` for all `w`, then `v = 0`.\n", "keywords": {"nondegenerate": 0.15831692877998726}}, {"docstring": " Every separated topological group in which there exists a compact set with nonempty interior is locally compact.\n", "keywords": {"separated topological group": 0.0064971092056266945, "separated topological": 0.033892441937102495, "topological group": 0.033892441937102495, "set with nonempty": 0.033892441937102495, "nonempty interior": 0.033892441937102495, "interior is locally": 0.033892441937102495, "compact set": 0.04949487345881267, "locally compact": 0.04949487345881267, "exists a compact": 0.10882816095144712, "compact": 0.13023752997463905, "separated": 0.18105634546484617, "topological": 0.18105634546484617, "group": 0.18105634546484617, "exists": 0.18105634546484617, "set": 0.18105634546484617, "nonempty": 0.18105634546484617, "interior": 0.18105634546484617, "locally": 0.18105634546484617}}, {"docstring": "**Alias** of lt_asymm`.\n", "keywords": {"Alias": 0.030396371632413578, "asymm": 0.04491197687864554}}, {"docstring": " An expository lemma to show how all of `ts`, `r`, and `f` can be eliminated from `permutations_aux2`.  `(permutations_aux2 t [] [] ys id).2`, which appears on the RHS, is a list whose elements are produced by inserting `t` into every non-terminal position of `ys` in order. As an example: ```lean #eval permutations_aux2 1 [] [] [2, 3, 4] id -- [[1, 2, 3, 4], [2, 1, 3, 4], [2, 3, 1, 4]] ```\n", "keywords": {"expository lemma": 0.0323807647129902, "lemma to show": 0.0323807647129902, "permutations": 0.08184200221758774, "eval permutations": 0.12249731471072721, "expository": 0.17710205411865443, "lemma": 0.17710205411865443, "show": 0.17710205411865443, "eliminated": 0.17710205411865443, "produced by inserting": 0.17873024364935672, "RHS": 0.18614194270925338, "list whose elements": 0.22393551358558553, "elements are produced": 0.22393551358558553, "non-terminal position": 0.22393551358558553, "inserting": 0.35448788910172235, "order": 0.35448788910172235, "lean": 0.3571678614335546, "list": 0.42774231775250227, "elements": 0.42774231775250227, "produced": 0.42774231775250227, "non-terminal": 0.42774231775250227}}, {"docstring": " Given a tower of scalar actions `M \u2192 \u03b1 \u2192 \u03b2`, if we use `has_scalar.comp` to pull back both of `M`'s actions by a map `g : N \u2192 M`, then we obtain a new tower of scalar actions `N \u2192 \u03b1 \u2192 \u03b2`.  This cannot be an instance because it can cause infinite loops whenever the `has_scalar` arguments are still metavariables.\n", "keywords": {"scalar actions": 0.01636708792845367, "tower of scalar": 0.024799737680299458, "pull back": 0.02611394407033883, "actions": 0.05476664999773198, "scalar": 0.06430639681270749, "tower": 0.07152452703192912, "scalar.comp": 0.0882908542782776, "map": 0.12238444229794312, "pull": 0.1595285582069827, "back": 0.1595285582069827, "obtain": 0.1595285582069827, "infinite loops": 0.18743993596965114, "arguments": 0.32629207330916155, "metavariables": 0.32629207330916155, "instance": 0.39730610466562194, "infinite": 0.39730610466562194, "loops": 0.39730610466562194}}, {"docstring": "The subalgebra of `C(circle, \u2102)` generated by `z ^ n` for `n \u2208 \u2124` separates points.\n", "keywords": {"separates points": 0.009239332327148086, "circle": 0.04491197687864554, "generated": 0.09568045026443411, "separates": 0.09568045026443411, "points": 0.09568045026443411, "subalgebra": 0.15831692877998726}}, {"docstring": "`cyclotomic n R` is different from `0`.\n", "keywords": {"cyclotomic": 0.15831692877998726}}, {"docstring": "**Alias** of left.inv_lt_one_iff`.\n", "keywords": {"Alias": 0.030396371632413578, "iff": 0.04491197687864554, "left.inv": 0.15831692877998726}}, {"docstring": "**Alias** of the reverse direction of complete_lattice.independent_iff_sup_indep`.\n", "keywords": {"direction of complete": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "lattice.independent": 0.04491197687864554, "iff": 0.04491197687864554, "indep": 0.04491197687864554, "complete": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " The `n+1`-th iterated derivative within a set with unique derivatives can be obtained by taking the `n`-th derivative of the derivative.\n", "keywords": {"set with unique": 0.017949171226940622, "obtained by taking": 0.017949171226940622, "iterated derivative": 0.034457199289527486, "unique derivatives": 0.034457199289527486, "derivative": 0.08361554789878535, "iterated": 0.1327880990447932, "set": 0.1327880990447932, "unique": 0.1327880990447932, "obtained": 0.1327880990447932, "taking": 0.1327880990447932}}, {"docstring": " An induction principle for closure membership. If `p` holds for `0`, `1`, and all elements of `s`, and is preserved under addition and multiplication, then `p` holds for all elements of the closure of `s`.\n", "keywords": {"induction principle": 0.041067145989475896, "closure membership": 0.05303379658192498, "holds": 0.13264405558464026, "membership": 0.13690089622781554, "principle for closure": 0.16269363174436116, "elements": 0.18034450672916197, "closure": 0.18393912731976153, "addition and multiplication": 0.19661905478275257, "induction": 0.19861310018350192, "principle": 0.19861310018350192, "preserved under addition": 0.2722374662885858, "multiplication": 0.35520562385871335, "preserved": 0.46258320047845314, "addition": 0.46258320047845314}}, {"docstring": "A variation around the emetric characterization of Cauchy sequences\n", "keywords": {"Cauchy sequences": 0.023458380875189744, "characterization of Cauchy": 0.04498862876540802, "emetric characterization": 0.09700399286574239, "Cauchy": 0.1447773057422032, "sequences": 0.15831692877998726, "variation": 0.29736558256021506, "emetric": 0.29736558256021506, "characterization": 0.29736558256021506}}, {"docstring": "If an element `b` becomes add-left-regular after adding to it on the left a add-left-regular element, then `b` is add-left-regular.\n", "keywords": {"element": 0.06413440160927163, "adding": 0.15842879763921927, "left": 0.15842879763921927}}, {"docstring": "After filtering out everything that does not equal a given value, at most that value remains.  This is equivalent to `filter_eq` with the equality the other way.\n", "keywords": {"remains": 0.12363091320521931, "filter": 0.17881754828257995, "filtering": 0.2005079697193566, "equal": 0.2005079697193566, "equivalent": 0.46553351027698087, "equality": 0.46553351027698087}}, {"docstring": "Binary **rearrangement inequality**.\n", "keywords": {"rearrangement inequality": 0.02570861714399338, "Binary": 0.04491197687864554, "rearrangement": 0.15831692877998726, "inequality": 0.15831692877998726}}, {"docstring": "A subring contains the ring's 1.\n", "keywords": {"ring": 0.15831692877998726, "subring": 0.29736558256021506}}, {"docstring": "If `\u03b1` is a seminormed ring, then `\u2225a ^ n\u2225 \u2264 \u2225a\u2225 ^ n` for `n > 0`. See also `norm_pow_le`.\n", "keywords": {"seminormed ring": 0.015099935621315529, "ring": 0.10028582371075691, "seminormed": 0.14832923246533666, "norm": 0.17881754828257995, "pow": 0.17881754828257995}}, {"docstring": "The `n`-th ghost component of `teichmuller p r` is `r ^ p ^ n`.\n", "keywords": {"ghost component": 0.02570861714399338, "teichmuller": 0.09568045026443411, "ghost": 0.15831692877998726, "component": 0.15831692877998726}}, {"docstring": "**Alias** of the reverse direction of asymptotics.is_O_with_neg_right`.\n", "keywords": {"direction of asymptotics.is": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "neg": 0.04491197687864554, "asymptotics.is": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " If a function tends to infinity along a filter, then this function multiplied by a positive constant (on the left) also tends to infinity. The archimedean assumption is convenient to get a statement that works on `\u2115`, `\u2124` and `\u211d`, although not necessary (a version in ordered fields is given in `filter.tendsto.const_mul_at_top`).\n", "keywords": {"positive constant": 0.01365667095949902, "function multiplied": 0.018700083029965984, "function": 0.06900720818438551, "filter": 0.10129341725804307, "constant": 0.10129341725804307, "left": 0.10129341725804307, "multiplied": 0.13300646162349797, "positive": 0.13300646162349797, "archimedean assumption": 0.13743285316711215, "assumption is convenient": 0.13743285316711215, "statement that works": 0.13743285316711215, "version in ordered": 0.13743285316711215, "ordered fields": 0.13743285316711215, "mul": 0.21373773690901868, "top": 0.21373773690901868, "archimedean": 0.3476021046389493, "assumption": 0.3476021046389493, "convenient": 0.3476021046389493, "statement": 0.3476021046389493, "works": 0.3476021046389493}}, {"docstring": " If `(m : M)` has norm equal to `0` in `M \u29f8 S` for a closed subgroup `S` of `M`, then `m \u2208 S`.\n", "keywords": {"closed subgroup": 0.005380746843605012, "norm equal": 0.00717258304785508, "subgroup": 0.06341998722529081, "norm": 0.08438900089923473, "equal": 0.08438900089923473, "closed": 0.08438900089923473}}, {"docstring": "A family with at most one point is affinely independent.\n", "keywords": {"affinely independent": 0.04940384002065631, "point is affinely": 0.09700399286574239, "independent": 0.15831692877998726, "family": 0.29736558256021506, "point": 0.29736558256021506, "affinely": 0.29736558256021506}}, {"docstring": "An induction principle for additive closure membership, for predicates with two arguments.\n", "keywords": {"additive closure membership": 0.0025258761156662004, "closure membership": 0.015380821171891606, "induction principle": 0.02570861714399338, "principle for additive": 0.02570861714399338, "additive closure": 0.02570861714399338, "membership": 0.09568045026443411, "arguments": 0.09568045026443411, "induction": 0.15831692877998726, "principle": 0.15831692877998726, "additive": 0.15831692877998726, "closure": 0.15831692877998726, "predicates": 0.15831692877998726}}, {"docstring": "The inductively defined smallest additive congruence relation containing a binary relation `r` equals the infimum of the set of additive congruence relations containing `r`.\n", "keywords": {"smallest additive congruence": 0.0029734375736018177, "additive congruence relation": 0.0030322154702678845, "inductively defined smallest": 0.0035659140203569443, "defined smallest additive": 0.0038333979673358777, "additive congruence": 0.00957221918369251, "equals the infimum": 0.015378380226460571, "congruence relation": 0.018183360264794148, "inductively defined": 0.022902815606702678, "defined smallest": 0.022902815606702678, "binary relation": 0.02334884639752655, "smallest additive": 0.024589538865115685, "set of additive": 0.05815578541895612, "congruence": 0.0585603521889348, "relation": 0.07624027899282357, "additive": 0.08019424814685998, "equals": 0.10121745919027951, "inductively": 0.14963295453349099, "defined": 0.14963295453349099, "smallest": 0.14963295453349099, "binary": 0.14963295453349099}}, {"docstring": "A sum of maps which preserves addition, preserves addition when the target is commutative.\n", "keywords": {"target is commutative": 0.02391462167226668, "preserves addition": 0.02495406599442899, "sum of maps": 0.039481144315219374, "maps which preserves": 0.09916653097095413, "preserves": 0.10901343189444501, "addition": 0.10901343189444501, "commutative": 0.11984314898676356, "sum": 0.19488865479360015, "maps": 0.19488865479360015, "target": 0.19488865479360015}}, {"docstring": " Intermediate value theorem for two functions: if `f` and `g` are two continuous functions on a preconnected space and `f a \u2264 g a` and `g b \u2264 f b`, then for some `x` we have `f x = g x`.\n", "keywords": {"Intermediate value theorem": 0.009386651690650429, "preconnected space": 0.013095151449018445, "continuous functions": 0.016245817372079578, "functions": 0.07030442419566416, "Intermediate": 0.08179429269966654, "theorem": 0.11369206228658875, "continuous": 0.11369206228658875, "preconnected": 0.11369206228658875, "space": 0.11369206228658875}}, {"docstring": " Inclusion of the groupoid of `C^n` local diffeos in the groupoid of `C^m` local diffeos when `m \u2264 n`\n", "keywords": {"local diffeos": 0.0066729209995681025, "local": 0.04012653609635277, "groupoid": 0.059989639176021896, "diffeos": 0.08205340856523909, "Inclusion": 0.10287228916930506}}, {"docstring": " If `f` is a monotone function on a left neighborhood of `a` and the image of this neighborhood under `f` meets every interval `(b, f a)`, `b < f a`, then `f` is continuous at `a` from the left.  The assumption `hfs : \u2200 b < f a, \u2203 c \u2208 s, f c \u2208 Ioo b (f a)` cannot be replaced by the weaker assumption `hfs : \u2200 b < f a, \u2203 c \u2208 s, f c \u2208 Ico b (f a)` we use for strictly monotone functions because otherwise the function `floor : \u211d \u2192 \u2124` would be a counter-example at `a = 0`.\n", "keywords": {"strictly monotone functions": 0.007922453221057769, "meets every interval": 0.010032506478076941, "left neighborhood": 0.010231094325825928, "monotone function": 0.02360172778511089, "strictly monotone": 0.0485237970708297, "left": 0.05031768856860434, "neighborhood": 0.05031768856860434, "monotone": 0.07503485999765178, "weaker assumption": 0.07609526865961849, "function": 0.07682272690944143, "hfs": 0.08969312670328906, "meets": 0.09966370977184869, "interval": 0.09966370977184869, "image": 0.11377472435141883, "continuous": 0.11377472435141883, "assumption": 0.11465513844730016, "functions": 0.15364545381888287, "Ioo": 0.15559087309590275, "Ico": 0.15559087309590275, "floor": 0.2467512951189314}}, {"docstring": " Convenience congruence lemma stating in a dependent setting that, if the arguments to a formal multilinear series are equal, then the values are also equal.\n", "keywords": {"Convenience congruence lemma": 0.0037398923342470327, "congruence lemma stating": 0.006265290071490465, "formal multilinear series": 0.006265290071490465, "Convenience congruence": 0.019943439662486344, "congruence lemma": 0.033100028790236186, "lemma stating": 0.033100028790236186, "dependent setting": 0.033100028790236186, "formal multilinear": 0.033100028790236186, "multilinear series": 0.033100028790236186, "series are equal": 0.05759552101237069, "equal": 0.06653164730624737, "Convenience": 0.10923981997294611, "congruence": 0.17899586521379354, "lemma": 0.17899586521379354, "stating": 0.17899586521379354, "dependent": 0.17899586521379354, "setting": 0.17899586521379354, "arguments": 0.17899586521379354, "formal": 0.17899586521379354, "multilinear": 0.17899586521379354}}, {"docstring": "The partial sums of a formal multilinear series are continuous.\n", "keywords": {"formal multilinear series": 0.03339840940482845, "series are continuous": 0.04940384002065631, "partial sums": 0.09700399286574239, "formal multilinear": 0.09700399286574239, "multilinear series": 0.09700399286574239, "continuous": 0.15831692877998726, "partial": 0.29736558256021506, "sums": 0.29736558256021506, "formal": 0.29736558256021506, "multilinear": 0.29736558256021506, "series": 0.29736558256021506}}, {"docstring": " If `\u03b1` is a nonempty preorder with no minimal elements, then there exists a strictly antitone function `\u2115 \u2192 \u03b1`.\n", "keywords": {"strictly antitone function": 0.0025258761156662004, "minimal elements": 0.015380821171891606, "antitone function": 0.015380821171891606, "nonempty preorder": 0.02570861714399338, "exists a strictly": 0.02570861714399338, "strictly antitone": 0.02570861714399338, "elements": 0.09568045026443411, "function": 0.09568045026443411, "nonempty": 0.15831692877998726, "preorder": 0.15831692877998726, "minimal": 0.15831692877998726, "exists": 0.15831692877998726, "strictly": 0.15831692877998726, "antitone": 0.15831692877998726}}, {"docstring": " Minkowski inequality: the `L_p` seminorm of the infinite sum of two vectors is less than or equal to the infinite sum of the `L_p`-seminorms of the summands, if these infinite sums both exist. A version for `nnreal`-valued functions. For an alternative version, convenient if the infinite sums are not already expressed as `p`-th powers, see `Lp_add_le_tsum_of_nonneg`.\n", "keywords": {"Minkowski inequality": 0.02097844374030746, "infinite sum": 0.03451801341836592, "infinite": 0.058731668818937564, "seminorm": 0.09663222048223513, "seminorms": 0.09663222048223513, "sum": 0.13744252319141945, "sums": 0.13744252319141945, "sums both exist": 0.1393834994716235, "Minkowski": 0.14334361319874409, "inequality": 0.14334361319874409, "summands": 0.14334361319874409, "exist": 0.14334361319874409, "valued functions": 0.1561907436396182, "vectors": 0.17935412685582303, "equal": 0.17935412685582303, "version": 0.21281718106791797, "alternative version": 0.2878589674771473, "nnreal": 0.29921138542433984, "valued": 0.3675470168908405, "functions": 0.3675470168908405}}, {"docstring": " Conditioning first on `s` and then on `t` results in the same measure as conditioning on `s \u2229 t`.\n", "keywords": {"measure as conditioning": 0.06722676226840862, "results": 0.09713402394201612, "Conditioning": 0.09770854302279938, "measure": 0.14390902704051098}}, {"docstring": "If `f` is a commutative operation on bools such that `f ff ff = ff`, then `bitwise f` is also    commutative.\n", "keywords": {"operation on bools": 0.020225813225353943, "commutative operation": 0.027430531955772185, "commutative": 0.094808423351325, "bitwise": 0.09492398510093508, "operation": 0.1408007092310104, "bools": 0.1408007092310104}}, {"docstring": " A reformulation of the expansion of (1 + y)^d: $$(d + 1) (1 + y)^d - (d + 1)y^d = \\sum_{i = 0}^d {d + 1 \\choose i} \\cdot i \\cdot y^{i - 1}.$$\n", "keywords": {"cdot": 0.03231531110234649, "sum": 0.054709255964732355, "choose": 0.07027995752974672, "reformulation": 0.08731800873187644, "expansion": 0.08731800873187644}}, {"docstring": " A set is a neighborhood of `a` within `(-\u221e, a)` if and only if it contains an interval `(l, a)` with `l < a`, provided `a` is not a bottom element.\n", "keywords": {"bottom element": 0.0038595505094717398, "provided": 0.04491197687864554, "interval": 0.05617160784335063, "element": 0.05617160784335063, "set": 0.06844581806138879, "neighborhood": 0.06844581806138879, "bottom": 0.06844581806138879}}, {"docstring": " **Church-Rosser theorem** for word reduction: If `w1 w2 w3` are words such that `w1` reduces to `w2` and `w3` respectively, then there is a word `w4` such that `w2` and `w3` reduce to `w4` respectively. This is also known as Newman's diamond lemma.\n", "keywords": {"Church-Rosser theorem": 0.02159174318977751, "word reduction": 0.04605369422040773, "Newman diamond lemma": 0.06538581828842382, "reduces": 0.10239045982384935, "reduce": 0.10239045982384935, "Newman diamond": 0.13953269190252998, "Church-Rosser": 0.14538016786146507, "theorem": 0.14538016786146507, "reduction": 0.14538016786146507, "word": 0.15141724285544814, "diamond lemma": 0.21694778628543987, "Newman": 0.25509018662152405, "words": 0.3028344857108963, "lemma": 0.3713879817993529, "diamond": 0.48001568896154584}}, {"docstring": "The Haar measure equals the Lebesgue measure on `\u211d^\u03b9`.\n", "keywords": {"Haar measure equals": 0.0055304017961131935, "equals the Lebesgue": 0.018423372132524086, "Haar measure": 0.02714404025350355, "Lebesgue measure": 0.02714404025350355, "measure equals": 0.0562460611896591, "Haar": 0.09474983170388594, "Lebesgue": 0.09474983170388594, "measure": 0.13945519496053638, "equals": 0.19092478917347616}}, {"docstring": "In a semigroup, the product of left-regular elements is left-regular.\n", "keywords": {"left-regular elements": 0.0562460611896591, "semigroup": 0.11718348279991213, "product of left-regular": 0.12194096740933036, "elements is left-regular": 0.12194096740933036, "left-regular": 0.13945519496053638, "product": 0.19092478917347616, "elements": 0.19092478917347616}}, {"docstring": "**Alias** of the reverse direction of nat.desc_factorial_eq_zero_iff_lt`.\n", "keywords": {"direction of nat.desc": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "factorial": 0.04491197687864554, "iff": 0.04491197687864554, "nat.desc": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "A measure on a finite product space equals the product measure if they are equal on rectangles  with as sides sets that generate the corresponding \u03c3-algebras.\n", "keywords": {"finite product space": 0.012141146665979116, "product space equals": 0.018507688859160303, "sides sets": 0.03886567352795349, "sets that generate": 0.03886567352795349, "finite product": 0.058051617757398206, "product space": 0.058051617757398206, "space equals": 0.058051617757398206, "product measure": 0.08750643178397656, "\u03c3-algebras": 0.11885714341470131, "equal on rectangles": 0.125410617056658, "measure": 0.1418319503011877, "product": 0.1418319503011877, "finite": 0.19342090051671243, "space": 0.19342090051671243, "rectangles": 0.19342090051671243, "sides": 0.19342090051671243, "sets": 0.19342090051671243, "generate": 0.19342090051671243, "equals the product": 0.26336062258620146, "equals": 0.2836639006023754}}, {"docstring": "**Alias** of the reverse direction of unique_mdiff_on_iff_unique_diff_on`.\n", "keywords": {"Alias": 0.03402676245250578, "reverse direction": 0.034987023778306175, "mdiff": 0.05331699930238388, "iff": 0.05331699930238388, "diff": 0.05331699930238388, "direction of unique": 0.06131733975553988, "unique": 0.069255433448279, "reverse": 0.18385948854246909, "direction": 0.18385948854246909}}, {"docstring": " Let `f` be a function continuous on a convex (or, equivalently, connected) subset `D` of the real line. If `f` is differentiable on the interior of `D` and `f'` is nonnegative, then `f` is a monotone function on `D`.\n", "keywords": {"real line": 0.015790175212724515, "function continuous": 0.04067778610166757, "equivalently": 0.07073956283945361, "connected": 0.07073956283945361, "subset": 0.07073956283945361, "convex": 0.10630075322936205, "line": 0.10630075322936205, "monotone function": 0.11073944941271935, "function": 0.13364860469108616, "continuous": 0.14623340726105694, "real": 0.14623340726105694, "nonnegative": 0.2923372953262933, "differentiable": 0.37298875481161287, "interior": 0.37298875481161287, "monotone": 0.37298875481161287}}, {"docstring": "M\u00f6bius inversion for functions to a `comm_group_with_zero`.\n", "keywords": {"comm": 0.04491197687864554, "group": 0.04491197687864554, "M\u00f6bius inversion": 0.04940384002065631, "inversion for functions": 0.09700399286574239, "M\u00f6bius": 0.15831692877998726, "inversion": 0.29736558256021506, "functions": 0.29736558256021506}}, {"docstring": "`reflection_circumcenter_weights_with_circumcenter` sums to 1.\n", "keywords": {"circumcenter": 0.020602899695743707, "reflection": 0.055708263664958506, "weights": 0.055708263664958506, "sums": 0.11718348279991213}}, {"docstring": "A module with a finite ring of scalars is additively torsion.\n", "keywords": {"additively torsion": 0.015380821171891606, "finite ring": 0.02570861714399338, "ring of scalars": 0.02570861714399338, "scalars is additively": 0.02570861714399338, "torsion": 0.09568045026443411, "module": 0.15831692877998726, "finite": 0.15831692877998726, "ring": 0.15831692877998726, "scalars": 0.15831692877998726, "additively": 0.15831692877998726}}, {"docstring": " The **extreme value theorem**: if a continuous function `f` tends to negative infinity away from compact sets, then it has a global maximum.\n", "keywords": {"extreme value theorem": 0.009239332327148086, "continuous function": 0.015380821171891606, "compact sets": 0.015380821171891606, "global maximum": 0.015380821171891606, "extreme": 0.09568045026443411, "theorem": 0.09568045026443411, "function": 0.09568045026443411, "negative": 0.09568045026443411, "sets": 0.09568045026443411, "maximum": 0.09568045026443411, "continuous": 0.15831692877998726, "compact": 0.15831692877998726, "global": 0.15831692877998726}}, {"docstring": "The angle between a vector and the negation of another vector.\n", "keywords": {"vector": 0.14323823713631006, "angle": 0.19488865479360015, "negation": 0.19488865479360015}}, {"docstring": "Elements of a left cancel semigroup are left regular.\n", "keywords": {"left cancel semigroup": 0.010962043841203115, "left regular": 0.0325194426147957, "cancel semigroup": 0.03663237450220032, "left cancel": 0.05417025203414716, "Elements": 0.11521656054299435, "regular": 0.11521656054299435, "semigroup are left": 0.11793310824193863, "left": 0.13667842094541144, "cancel": 0.1879836817695587, "semigroup": 0.1879836817695587}}, {"docstring": "The projection from a topological fiber bundle to its base is an open map.\n", "keywords": {"topological fiber bundle": 0.03339840940482845, "open map": 0.04940384002065631, "topological fiber": 0.09700399286574239, "fiber bundle": 0.09700399286574239, "map": 0.15831692877998726, "projection": 0.29736558256021506, "topological": 0.29736558256021506, "fiber": 0.29736558256021506, "bundle": 0.29736558256021506, "base": 0.29736558256021506, "open": 0.29736558256021506}}, {"docstring": "**Formula for Pythagorean Triples**\n", "keywords": {"Formula for Pythagorean": 0.012602360123953448, "Pythagorean Triples": 0.012602360123953448, "Formula": 0.08596317751626563, "Triples": 0.08596317751626563, "Pythagorean": 0.1447773057422032}}, {"docstring": " Also known as squeeze or sandwich theorem. This version assumes that inequalities hold everywhere.\n", "keywords": {"sandwich theorem": 0.07796891081290885, "squeeze or sandwich": 0.1495930091794576, "theorem": 0.2005079697193566, "squeeze": 0.36073110501666333, "sandwich": 0.36073110501666333, "version": 0.6621399683957523, "assumes": 0.6621399683957523, "inequalities": 0.6621399683957523, "hold": 0.6621399683957523, "version assumes": 0.7807198046783035, "assumes that inequalities": 0.7807198046783035, "inequalities hold": 0.7807198046783035}}, {"docstring": "In a noetherian ring, every ideal contains a product of prime ideals ([samuel, \u00a7 3.3, Lemma 3])\n", "keywords": {"noetherian ring": 0.021114872146320032, "Lemma": 0.03402676245250578, "product of prime": 0.034987023778306175, "prime ideals": 0.051351238837580325, "samuel": 0.05331699930238388, "ring": 0.11246769819744627, "noetherian": 0.18385948854246909, "product": 0.18385948854246909, "prime": 0.18385948854246909, "ideal": 0.26565442043121734, "ideals": 0.26565442043121734}}, {"docstring": "In a preadditive category, if all binary products exist, then all binary biproducts exist.\n", "keywords": {"binary products exist": 0.007087139883606203, "preadditive category": 0.02391462167226668, "products exist": 0.03040783387545046, "biproducts exist": 0.03040783387545046, "binary products": 0.04437656514447953, "binary biproducts": 0.04437656514447953, "exist": 0.07571113878390312, "binary": 0.10901343189444501, "category": 0.11984314898676356, "preadditive": 0.19488865479360015, "products": 0.19488865479360015, "biproducts": 0.19488865479360015}}, {"docstring": "A product of a function `f : fin 0 \u2192 \u03b2` is `1` because `fin 0` is empty\n", "keywords": {"fin": 0.020602899695743707, "function": 0.11718348279991213, "empty": 0.11718348279991213, "product": 0.19092478917347616}}, {"docstring": " Given a neighborhood `s` of the origin in a normed space `E`, the dual norms of all elements of the polar `polar \ud835\udd5c s` are bounded by a constant.\n", "keywords": {"normed space": 0.011891118324371971, "dual norms": 0.017798659388540475, "polar": 0.08706326953080504, "neighborhood": 0.08886407157392263, "space": 0.08886407157392263, "constant": 0.08886407157392263, "origin": 0.132239959875874, "normed": 0.132239959875874, "dual": 0.132239959875874, "norms": 0.132239959875874, "elements": 0.132239959875874, "bounded": 0.132239959875874}}, {"docstring": "Expressing `has_fderiv_at_filter f f' x L` in terms of `has_deriv_at_filter`\n", "keywords": {"Expressing": 0.054709255964732355, "fderiv": 0.054709255964732355, "deriv": 0.054709255964732355, "filter": 0.07162298286637953, "terms": 0.1879836817695587}}, {"docstring": "**Alias** of `left.add_neg'`.\n", "keywords": {"Alias": 0.030396371632413578, "left.add": 0.04491197687864554, "neg": 0.04491197687864554}}, {"docstring": " The sum of two lower semicontinuous functions is lower semicontinuous. Formulated with `[has_continuous_add]`. The primed version of the lemma uses an explicit continuity assumption on addition, for application to `ereal`.\n", "keywords": {"lower semicontinuous functions": 0.007327296516767814, "lower semicontinuous": 0.016851204808897166, "semicontinuous functions": 0.03821554584844725, "functions is lower": 0.08667762295794612, "lower": 0.09028232117950413, "semicontinuous": 0.09028232117950413, "sum": 0.2038542769622493, "functions": 0.2038542769622493, "continuous": 0.2425057621221154, "add": 0.2425057621221154, "ereal": 0.31807004650910337, "assumption on addition": 0.3438068115293896, "Formulated": 0.36270881646612724, "explicit continuity assumption": 0.44505054844584063, "addition": 0.4533135999375753, "primed version": 0.46742777496856974, "explicit continuity": 0.46742777496856974, "continuity assumption": 0.46742777496856974, "primed": 0.5643894539005718, "version": 0.5643894539005718}}, {"docstring": " The `i`-th element of a list coincides with the `i`-th element of any of its prefixes of length `> i`. Version designed to rewrite from the big list to the small list.\n", "keywords": {"prefixes of length": 0.02228968160793083, "element": 0.06072409388630927, "list coincides": 0.06544249179528461, "list": 0.11871832925833173, "length": 0.12642678802409135, "Version designed": 0.16340264042637093, "coincides": 0.1724609536080282, "prefixes": 0.1724609536080282, "big list": 0.175839695372051, "small list": 0.175839695372051, "designed to rewrite": 0.21403856549402517, "Version": 0.33450240956426514, "designed": 0.4198844336613173, "rewrite": 0.4198844336613173, "big": 0.4198844336613173, "small": 0.4198844336613173}}, {"docstring": "Express `edist` in terms of `nndist`\n", "keywords": {"Express": 0.04491197687864554, "edist": 0.04491197687864554, "nndist": 0.04491197687864554, "terms": 0.29736558256021506}}, {"docstring": "Tell `simp` what the entries are in a conjugate transposed matrix.  Compare with `mul_apply`, `diagonal_apply_eq`, etc.\n", "keywords": {"conjugate transposed matrix": 0.009578185344359502, "transposed matrix": 0.03702481907590181, "conjugate transposed": 0.06027763669363039, "simp": 0.07258934678807509, "apply": 0.07324399842529526, "matrix": 0.1497391925531594, "mul": 0.21373773690901868, "diagonal": 0.21373773690901868, "entries": 0.23843406751375792, "conjugate": 0.23843406751375792, "transposed": 0.23843406751375792, "Compare": 0.37951425938754646}}, {"docstring": "A closed ball in a strictly convex space is strictly convex.\n", "keywords": {"strictly convex space": 0.011041420469275918, "strictly convex": 0.02595416362410219, "closed ball": 0.040564923574392765, "convex space": 0.045872129360315365, "space is strictly": 0.10215850587430082, "strictly": 0.11107071682746067, "convex": 0.11107071682746067, "closed": 0.19744254481508877, "ball": 0.19744254481508877, "space": 0.19744254481508877}}, {"docstring": " If `f : \u2102 \u2192 E` is continuous on a closed ball of positive radius and is differentiable at all but countably many points of the corresponding open ball, then it is analytic on the open ball with coefficients of the power series given by Cauchy integral formulas.\n", "keywords": {"Cauchy integral formulas": 0.0010365995354607732, "Cauchy integral": 0.010649190718438341, "integral formulas": 0.013711843196466398, "open ball": 0.014900019660334786, "positive radius": 0.020467930018199396, "countably many points": 0.020467930018199396, "power series": 0.020467930018199396, "closed ball": 0.028492683863676507, "ball": 0.06520390661249292, "open": 0.07396718074860682, "Cauchy": 0.07440102026665084, "ball of positive": 0.0901827889906665, "ball with coefficients": 0.0901827889906665, "formulas": 0.0955089425043682, "continuous": 0.14162413857699838, "closed": 0.14162413857699838, "positive": 0.14162413857699838, "radius": 0.14162413857699838, "differentiable": 0.14162413857699838, "countably": 0.14162413857699838}}, {"docstring": " In a commutative Banach-algebra `\ud835\udd38` over a normed field `\ud835\udd42` of characteristic zero, `exp \ud835\udd42 (x+y) = (exp \ud835\udd42 x) * (exp \ud835\udd42 y)` for all `x`, `y` in the disk of convergence.\n", "keywords": {"commutative Banach-algebra": 0.0061763395023097835, "normed field": 0.010849179083141073, "disk of convergence": 0.010849179083141073, "exp": 0.01803208752898384, "Banach-algebra": 0.050323249253911136, "field": 0.08798773338320563, "convergence": 0.08798773338320563, "commutative": 0.12197993148826404, "normed": 0.12197993148826404, "characteristic": 0.12197993148826404, "disk": 0.12197993148826404}}, {"docstring": "The angle between a nonzero vector and its negation.\n", "keywords": {"nonzero vector": 0.09700399286574239, "negation": 0.15831692877998726, "angle": 0.29736558256021506, "nonzero": 0.29736558256021506, "vector": 0.29736558256021506}}, {"docstring": " If `f a = 1`, then the product of `f i` over `i \u2208 insert a s` equals the product of `f i` over `i \u2208 s`.\n", "keywords": {"equals the product": 0.007942711351828013, "product": 0.0456089852516003, "insert": 0.08638782221675846, "equals": 0.08638782221675846}}, {"docstring": "The other direction does not hold because of the `f`-`f` cross terms on the RHS.\n", "keywords": {"cross terms": 0.00899321792126428, "RHS": 0.04776309965539685, "cross": 0.0771485953923296, "direction": 0.1155310835876123, "hold": 0.1155310835876123, "terms": 0.1155310835876123}}, {"docstring": "On square matrices, `mul_comm` applies under `det`.\n", "keywords": {"mul": 0.04491197687864554, "comm": 0.04491197687864554, "det": 0.04491197687864554, "square matrices": 0.04940384002065631, "matrices": 0.15831692877998726, "applies": 0.15831692877998726, "square": 0.29736558256021506}}, {"docstring": " The balanced core of `t` is maximal in the sense that it contains any balanced subset `s` of `t`.\n", "keywords": {"balanced subset": 0.0325194426147957, "balanced core": 0.05417025203414716, "subset": 0.11521656054299435, "balanced": 0.13667842094541144, "core": 0.1879836817695587, "maximal": 0.1879836817695587, "sense": 0.1879836817695587}}, {"docstring": "Any category with finite products and equalizers has all finite limits.  See <https://stacks.math.columbia.edu/tag/002O>.\n", "keywords": {"finite limits": 0.0523366818185617, "products and equalizers": 0.0647213843491835, "finite products": 0.08563321195043695, "limits": 0.1554527012770092, "finite": 0.15996435041261692, "category with finite": 0.17794256504260472, "category": 0.246550513069643, "products": 0.246550513069643, "equalizers": 0.246550513069643}}, {"docstring": "A set is analytic if and only if it is the continuous image of some Polish space.\n", "keywords": {"Polish space": 0.008293207122436794, "set is analytic": 0.02570861714399338, "continuous image": 0.02570861714399338, "Polish": 0.08596317751626563, "space": 0.09568045026443411, "set": 0.15831692877998726, "analytic": 0.15831692877998726, "continuous": 0.15831692877998726, "image": 0.15831692877998726}}, {"docstring": "The set of natural number powers of an element of a submonoid is a subset of the submonoid.\n", "keywords": {"natural number powers": 0.0014743544319153886, "set of natural": 0.012811029635671736, "natural number": 0.012811029635671736, "number powers": 0.012811029635671736, "submonoid": 0.069255433448279, "set": 0.11246769819744627, "natural": 0.11246769819744627, "number": 0.11246769819744627, "powers": 0.11246769819744627, "element": 0.11246769819744627, "subset": 0.11246769819744627}}, {"docstring": "**Alias** of lt_trans`.\n", "keywords": {"Alias": 0.030396371632413578, "trans": 0.04491197687864554}}, {"docstring": "The norm of `lsmul` is at most 1 in any semi-normed group.\n", "keywords": {"lsmul": 0.04491197687864554, "semi-normed group": 0.04940384002065631, "group": 0.15831692877998726, "norm": 0.29736558256021506, "semi-normed": 0.29736558256021506}}, {"docstring": "**Alias** of the reverse direction of list.reverse_prefix`.\n", "keywords": {"direction of list.reverse": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "prefix": 0.04491197687864554, "list.reverse": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "This mathematically trivial result is complementary to `norm_eq_one` below.\n", "keywords": {"mathematically trivial result": 0.03339840940482845, "norm": 0.04491197687864554, "mathematically trivial": 0.09700399286574239, "trivial result": 0.09700399286574239, "result is complementary": 0.09700399286574239, "mathematically": 0.29736558256021506, "trivial": 0.29736558256021506, "result": 0.29736558256021506, "complementary": 0.29736558256021506}}, {"docstring": "Finite additive groups are additive torsion groups.\n", "keywords": {"Finite additive groups": 0.012713202827692952, "additive torsion groups": 0.02141879874542179, "Finite additive": 0.0381667238781621, "additive torsion": 0.06340461682679863, "torsion groups": 0.06340461682679863, "additive groups": 0.09700399286574239, "Finite": 0.12363091320521931, "additive": 0.14868279128010753, "groups": 0.14868279128010753, "torsion": 0.2005079697193566, "groups are additive": 0.2858772036260003}}, {"docstring": "**Alias** of metric.bounded_closure_of_bounded`.\n", "keywords": {"Alias": 0.030396371632413578, "closure": 0.04491197687864554, "bounded": 0.04491197687864554, "metric.bounded": 0.09568045026443411}}, {"docstring": "The length of a list converted from a function is the size of the domain.\n", "keywords": {"list converted": 0.013527995261974615, "domain": 0.0771485953923296, "length": 0.1155310835876123, "list": 0.1155310835876123, "converted": 0.1155310835876123, "function": 0.1155310835876123, "size": 0.1155310835876123}}, {"docstring": "The property `p` fed into the `mk\u2083` constructor implies being closed.\n", "keywords": {"implies being closed": 0.015380821171891606, "constructor implies": 0.02570861714399338, "property": 0.09568045026443411, "fed": 0.09568045026443411, "closed": 0.09568045026443411, "constructor": 0.15831692877998726, "implies": 0.15831692877998726}}, {"docstring": " The adjoint of the composition of two operators is the composition of the two adjoints in reverse order.\n", "keywords": {"reverse order": 0.01077273734014834, "adjoints in reverse": 0.046202086091003264, "composition": 0.04661236163529819, "order": 0.08767471314125588, "operators": 0.12156210109285605, "reverse": 0.12156210109285605, "adjoint": 0.15452828614822314, "adjoints": 0.15452828614822314}}, {"docstring": "To prove a proposition about an arbitrary `finset \u03b1`, it suffices to prove it for the empty `finset`, and to show that if it holds for some `finset \u03b1`, then it holds for the `finset` obtained by inserting a new element.\n", "keywords": {"obtained by inserting": 0.012213389599632958, "suffices to prove": 0.017688091270859848, "finset": 0.018134672669685655, "prove a proposition": 0.04303621553838987, "holds": 0.051251893089359464, "prove": 0.06726952254338614, "arbitrary": 0.093399853719904, "empty": 0.093399853719904, "obtained": 0.093399853719904, "element": 0.093399853719904, "proposition": 0.12918673942800585, "suffices": 0.12918673942800585, "show": 0.12918673942800585, "inserting": 0.12918673942800585}}, {"docstring": "The integral defining the `\u0393` function converges for positive real `s`.\n", "keywords": {"function converges": 0.015380821171891606, "positive real": 0.015380821171891606, "integral defining": 0.02570861714399338, "converges for positive": 0.02570861714399338, "function": 0.09568045026443411, "real": 0.09568045026443411, "integral": 0.15831692877998726, "defining": 0.15831692877998726, "converges": 0.15831692877998726, "positive": 0.15831692877998726}}, {"docstring": " The mean value theorem on a convex set: if the derivative of a function within this set is bounded by `C`, then the function is `C`-Lipschitz. Version with `fderiv_within`.\n", "keywords": {"Lipschitz": 0.042660537954711066, "convex set": 0.045662588762594304, "set is bounded": 0.1016543441888419, "set": 0.11464904451495331, "function": 0.11464904451495331, "theorem": 0.19044453900858593, "convex": 0.19044453900858593, "derivative": 0.19044453900858593, "bounded": 0.19044453900858593, "fderiv": 0.2272793193457584, "Version": 0.34335610232496827}}, {"docstring": "**Alias** of the reverse direction of is_square_inv`.\n", "keywords": {"reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "square": 0.04491197687864554, "inv": 0.04491197687864554, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " This is just a special case of the global `mul_smul_comm` lemma that requires less typeclass search (and was here first).\n", "keywords": {"mul": 0.04491197687864554, "smul": 0.04491197687864554, "comm": 0.04491197687864554, "lemma that requires": 0.04940384002065631, "typeclass search": 0.04940384002065631, "special case": 0.09700399286574239, "requires less typeclass": 0.09700399286574239, "global": 0.15831692877998726, "lemma": 0.15831692877998726, "search": 0.15831692877998726, "special": 0.29736558256021506, "case": 0.29736558256021506, "requires": 0.29736558256021506, "typeclass": 0.29736558256021506}}, {"docstring": " `reduce` is idempotent, i.e. the maximal reduction of the maximal reduction of a word is the maximal reduction of the word.\n", "keywords": {"maximal reduction": 0.0029797649799827067, "maximal": 0.03137602050519327, "reduction": 0.03137602050519327, "reduce": 0.06533189168833407, "word": 0.090991675820067, "idempotent": 0.09846265792995763}}, {"docstring": " Although not explicitly stated, the assumptions of lemma `nat_degree_mul_C_eq_of_mul_ne_zero` force the polynomial `p` to be non-zero, via `p.leading_coeff \u2260 0`.\n", "keywords": {"force the polynomial": 0.011952723664711083, "mul": 0.018333336826096672, "explicitly stated": 0.019743941211743603, "assumptions of lemma": 0.019743941211743603, "nat": 0.0514064682630094, "degree": 0.0514064682630094, "p.leading": 0.0514064682630094, "coeff": 0.0514064682630094, "stated": 0.10868092541297539, "lemma": 0.10868092541297539, "force": 0.10868092541297539, "polynomial": 0.10868092541297539, "non-zero": 0.10868092541297539, "explicitly": 0.1781514608044755, "assumptions": 0.1781514608044755}}, {"docstring": "The identity in this lemma asserts that the \"obvious\" square ```lean     R    \u2192 (R / (P \u2229 R))     \u2193          \u2193 R[x] / P \u2192 (R / (P \u2229 R))[x] / (P / (P \u2229 R)) ``` commutes.  It is used, for instance, in the proof of `quotient_mk_comp_C_is_integral_of_jacobson`, in the file `ring_theory/jacobson`.\n", "keywords": {"lemma asserts": 0.012097446314800697, "obvious": 0.06912288085775106, "square": 0.06912288085775106, "commutes": 0.06912288085775106, "jacobson": 0.06921048787109704, "lean": 0.08841213975222428, "identity": 0.1093290784066556, "lemma": 0.1093290784066556, "asserts": 0.1093290784066556, "quotient": 0.20502090629626074, "comp": 0.20502090629626074, "integral": 0.20502090629626074, "ring": 0.20502090629626074, "theory": 0.20502090629626074, "instance": 0.25196848750922635, "file": 0.25196848750922635, "proof": 0.29889297066517784}}, {"docstring": " Test for convergence of the `p`-series: the real-valued series `\u2211' n : \u2115, (n ^ p)\u207b\u00b9` converges if and only if `1 < p`.\n", "keywords": {"Test for convergence": 0.013089923375762187, "real-valued series": 0.014618695703961359, "series": 0.05201485183844375, "Test": 0.09329120537733218, "converges": 0.09329120537733218, "convergence": 0.1384995633470844, "real-valued": 0.1384995633470844}}, {"docstring": "`x * 1` is equivalent to `x`.\n", "keywords": {"equivalent": 0.15831692877998726}}, {"docstring": "Symmetric of `filter.map_map\u2082_distrib_right`.\n", "keywords": {"map \u2082_ distrib": 0.02570861714399338, "filter.map": 0.04491197687864554, "Symmetric": 0.15831692877998726, "map": 0.15831692877998726, "distrib": 0.15831692877998726}}, {"docstring": "The diameter of a singleton vanishes\n", "keywords": {"singleton vanishes": 0.04940384002065631, "vanishes": 0.15831692877998726, "diameter": 0.29736558256021506, "singleton": 0.29736558256021506}}, {"docstring": "The angle between a nonzero vector and itself.\n", "keywords": {"nonzero vector": 0.09700399286574239, "angle": 0.29736558256021506, "nonzero": 0.29736558256021506, "vector": 0.29736558256021506}}, {"docstring": "`prod.rprod` is a subrelation of the transitive closure of `game_add`.\n", "keywords": {"transitive closure": 0.02570861714399338, "prod.rprod": 0.04491197687864554, "game": 0.04491197687864554, "add": 0.04491197687864554, "subrelation": 0.15831692877998726, "transitive": 0.15831692877998726, "closure": 0.15831692877998726}}, {"docstring": " In a (semi)normed group, negation `x \u21a6 -x` tends to infinity at infinity. TODO: use `bornology.cobounded` instead of `filter.comap has_norm.norm filter.at_top`.\n", "keywords": {"normed group": 0.02216221073515605, "semi": 0.07127359713294396, "negation": 0.07127359713294396, "TODO": 0.12798551673335784, "normed": 0.14724705908851674, "group": 0.14724705908851674, "norm.norm filter.at": 0.16351863533044358, "bornology.cobounded": 0.2104440927400966, "top": 0.2104440927400966, "filter.comap": 0.3748840432180225, "norm.norm": 0.3748840432180225, "filter.at": 0.3748840432180225}}, {"docstring": "There is a field structure on type if and only if its cardinality is a prime power.\n", "keywords": {"prime power": 0.015380821171891606, "field structure": 0.02570861714399338, "structure on type": 0.02570861714399338, "power": 0.09568045026443411, "field": 0.15831692877998726, "structure": 0.15831692877998726, "type": 0.15831692877998726, "cardinality": 0.15831692877998726, "prime": 0.15831692877998726}}, {"docstring": "`x * 0` is equivalent to `0`.\n", "keywords": {"equivalent": 0.15831692877998726}}, {"docstring": "In a space with second countable topology, strongly measurable and measurable are equivalent.\n", "keywords": {"countable topology": 0.021567786782198985, "strongly measurable": 0.031557281947372486, "measurable are equivalent": 0.0710891909196062, "topology": 0.11369206228658875, "strongly": 0.11369206228658875, "equivalent": 0.11369206228658875, "measurable": 0.13453835116331675, "space": 0.18569843656348187, "countable": 0.18569843656348187, "measurable and measurable": 0.2404655753837288}}, {"docstring": "If both `a` and `b` commute with `c`, then their product commutes with `c`.\n", "keywords": {"product commutes": 0.04771708711059453, "product": 0.2005079697193566, "commute": 0.22714242496584958, "commutes": 0.22714242496584958}}, {"docstring": " A version of `quotient.induction_on\u2082` taking `{s\u2081 : setoid \u03b1} {s\u2082 : setoid \u03b2}` as implicit arguments instead of instance arguments.\n", "keywords": {"quotient.induction": 0.05632962681207606, "implicit arguments": 0.05755977077196411, "instance arguments": 0.05755977077196411, "setoid": 0.07442578585270058, "taking": 0.11840455484321102, "arguments": 0.1411879566095664, "version": 0.19274649316101516, "implicit": 0.19274649316101516, "instance": 0.19274649316101516}}, {"docstring": "See also `geometric_hahn_banach_point_point`.\n", "keywords": {"point": 0.020602899695743707, "geometric": 0.055708263664958506, "hahn": 0.055708263664958506, "banach": 0.055708263664958506}}, {"docstring": " The complex cosine function is everywhere strictly differentiable, with the derivative `-sin x`.\n", "keywords": {"complex cosine function": 0.0042542192213185686, "strictly differentiable": 0.015380821171891606, "complex cosine": 0.02570861714399338, "cosine function": 0.02570861714399338, "differentiable": 0.09568045026443411, "derivative": 0.09568045026443411, "sin": 0.09568045026443411, "complex": 0.15831692877998726, "cosine": 0.15831692877998726, "function": 0.15831692877998726, "strictly": 0.15831692877998726}}, {"docstring": "The `semi_normed_group.core` induced by a `normed_group.core`.\n", "keywords": {"normed": 0.02245598843932277, "group.core": 0.02245598843932277, "semi": 0.05899937629682816, "induced": 0.12363091320521931}}, {"docstring": " An open ball in a product space is a product of open balls. See also `metric.ball_pi` for a version assuming `0 < r` instead of `nonempty \u03b2`.\n", "keywords": {"open ball": 0.03857539892787261, "open balls": 0.03857539892787261, "product space": 0.04031764382510051, "open": 0.09636208798950592, "product": 0.09636208798950592, "product of open": 0.13710480386356813, "ball": 0.19272417597901184, "balls": 0.19272417597901184, "version assuming": 0.20097116219473396, "space": 0.20109116132670046, "metric.ball": 0.23937626944391205, "assuming": 0.35876280059460885, "nonempty": 0.35876280059460885, "version": 0.4664378224654198}}, {"docstring": "**Alias** of the forward direction of even_iff_exists_bit0`.\n", "keywords": {"forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "exists": 0.04491197687864554, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "The Hausdorff distance satisfies the triangular inequality\n", "keywords": {"Hausdorff distance satisfies": 0.002263175936744087, "Hausdorff distance": 0.013797198203993007, "triangular inequality": 0.015380821171891606, "distance satisfies": 0.02570861714399338, "satisfies the triangular": 0.02570861714399338, "Hausdorff": 0.08596317751626563, "inequality": 0.09568045026443411, "distance": 0.15831692877998726, "satisfies": 0.15831692877998726, "triangular": 0.15831692877998726}}, {"docstring": " If `dist (f n) (f (n+1))` is bounded by `C * r^n`, `r < 1`, then `f` is a Cauchy sequence. Note that this lemma does not assume `0 \u2264 C` or `0 \u2264 r`.\n", "keywords": {"Cauchy sequence": 0.007701730664586866, "dist": 0.05899937629682816, "Cauchy": 0.07621084492189614, "sequence": 0.10028582371075691, "bounded": 0.14832923246533666, "Note": 0.2790829227183407, "assume": 0.2790829227183407, "lemma": 0.37689977775222827}}, {"docstring": "The projection on the base of a topological bundle created from core is continuous\n", "keywords": {"topological bundle created": 0.0042542192213185686, "core is continuous": 0.015380821171891606, "topological bundle": 0.02570861714399338, "bundle created": 0.02570861714399338, "created from core": 0.02570861714399338, "continuous": 0.09568045026443411, "projection": 0.15831692877998726, "base": 0.15831692877998726, "topological": 0.15831692877998726, "bundle": 0.15831692877998726, "created": 0.15831692877998726, "core": 0.15831692877998726}}, {"docstring": "A `pow` form of `nat.factorization_choose_le`\n", "keywords": {"pow": 0.04491197687864554, "nat.factorization": 0.04491197687864554, "choose": 0.04491197687864554, "form": 0.15831692877998726}}, {"docstring": "Multiplying by some of the matrices in `list_transvec_row M` does not change the last column.\n", "keywords": {"list": 0.04491197687864554, "transvec": 0.04491197687864554, "Multiplying": 0.09568045026443411, "row": 0.09568045026443411, "column": 0.09568045026443411, "matrices": 0.15831692877998726, "change": 0.15831692877998726}}, {"docstring": "**Alias** of the reverse direction of measure_theory.measure.ae_le_iff_absolutely_continuous`.\n", "keywords": {"direction of measure": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "absolutely": 0.04491197687864554, "continuous": 0.04491197687864554, "measure": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "This lemma has an abbreviated name because it is used frequently.\n", "keywords": {"frequently": 0.15831692877998726, "lemma": 0.29736558256021506, "abbreviated": 0.29736558256021506}}, {"docstring": "**Alias** of ne_of_ssuperset`.\n", "keywords": {"Alias": 0.030396371632413578, "ssuperset": 0.04491197687864554}}, {"docstring": "A version of **Matiyasevic's theorem**\n", "keywords": {"Matiyasevic theorem": 0.013797198203993007, "Matiyasevic": 0.08596317751626563, "theorem": 0.15831692877998726, "version": 0.29736558256021506}}, {"docstring": "A semisimple Abelian Lie algebra is trivial.\n", "keywords": {"semisimple Abelian Lie": 0.00688415006041516, "Abelian Lie algebra": 0.006884150060415161, "Abelian Lie": 0.02140921543860024, "semisimple Abelian": 0.04498862876540802, "Lie algebra": 0.04498862876540802, "algebra is trivial": 0.04940384002065631, "Abelian": 0.1447773057422032, "Lie": 0.1447773057422032, "trivial": 0.15831692877998726, "semisimple": 0.29736558256021506, "algebra": 0.29736558256021506}}, {"docstring": "An additive subgroup is finitely generated if and only if it is finitely generated as an additive submonoid.\n", "keywords": {"finitely generated": 0.019341598041498438, "additive submonoid": 0.029781174332346342, "subgroup is finitely": 0.033809660486119025, "additive subgroup": 0.049153675083198865, "finitely": 0.08061786523087178, "additive": 0.11549095123814725, "generated": 0.11549095123814725, "submonoid": 0.12520420549175446, "subgroup": 0.20283314940424746}}, {"docstring": "Cyclic permutations preserve the triple product. See also `triple_product_eq_det`.\n", "keywords": {"Cyclic permutations preserve": 0.013355114592729936, "Cyclic permutations": 0.04599533444093152, "permutations preserve": 0.07431967712990462, "product": 0.14975510149395752, "Cyclic": 0.16718560905139174, "triple product": 0.17213729253208762, "det": 0.2365661206214104, "triple": 0.24516296616129382, "permutations": 0.26301780071106734, "preserve": 0.26301780071106734, "preserve the triple": 0.28313749877527666}}, {"docstring": "The **binomial theorem**\n", "keywords": {"binomial theorem": 0.02570861714399338, "binomial": 0.15831692877998726, "theorem": 0.15831692877998726}}, {"docstring": "Any number m is less than (b+2)^(number of digits in the base b + 2 representation of m)\n", "keywords": {"representation": 0.11718348279991213, "number of digits": 0.12194096740933039, "number": 0.13945519496053638, "digits": 0.19092478917347616, "base": 0.19092478917347616}}, {"docstring": "The empty set is not an equivalence class.\n", "keywords": {"equivalence class": 0.04940384002065631, "empty set": 0.09700399286574239, "class": 0.15831692877998726, "empty": 0.29736558256021506, "set": 0.29736558256021506, "equivalence": 0.29736558256021506}}, {"docstring": "Variant of the mean value inequality on a convex set. Version with `fderiv_within`.\n", "keywords": {"convex set": 0.07796891081290885, "fderiv": 0.17881754828257995, "Variant": 0.2005079697193566, "set": 0.2005079697193566, "inequality": 0.36073110501666333, "convex": 0.36073110501666333, "Version": 0.46553351027698087}}, {"docstring": "For `p \u2260 0, p \u2260 1, `padic_val_rat p p` is 1.\n", "keywords": {"padic": 0.04491197687864554, "val": 0.04491197687864554, "rat": 0.06844581806138879}}, {"docstring": "A logarithmic upper bound on the multiplicity of a prime in a binomial coefficient.\n", "keywords": {"logarithmic upper bound": 0.0016012214736657916, "binomial coefficient": 0.00899321792126428, "logarithmic upper": 0.013527995261974615, "upper bound": 0.013527995261974615, "coefficient": 0.0771485953923296, "logarithmic": 0.1155310835876123, "upper": 0.1155310835876123, "bound": 0.1155310835876123, "multiplicity": 0.1155310835876123, "prime": 0.1155310835876123, "binomial": 0.1155310835876123}}, {"docstring": "The element `0` is right-regular if and only if `R` is trivial.\n", "keywords": {"element": 0.09568045026443411, "trivial": 0.09568045026443411, "right-regular": 0.15831692877998726}}, {"docstring": "**Alias** of the reverse direction of multiset.nodup_powerset`.\n", "keywords": {"direction of multiset.nodup": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "powerset": 0.04491197687864554, "multiset.nodup": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "Group homomorphisms preserve inverse.\n", "keywords": {"Group homomorphisms preserve": 0.01655915082773619, "homomorphisms preserve inverse": 0.016559150827736194, "Group homomorphisms": 0.04940384002065631, "preserve inverse": 0.04940384002065631, "homomorphisms preserve": 0.09700399286574239, "Group": 0.15831692877998726, "inverse": 0.15831692877998726, "homomorphisms": 0.29736558256021506, "preserve": 0.29736558256021506}}, {"docstring": "The product over a sum can be written as a sum over the product of sets, `finset.pi`.  `finset.prod_univ_sum` is an alternative statement when the product is over `univ`.\n", "keywords": {"finset.pi": 0.09284294967949627, "univ": 0.09811819729172999, "product": 0.11739554818149431, "sum": 0.1280905931192508, "sets": 0.15393808175810642, "product of sets": 0.1556849358549021, "written": 0.22136060049957015, "finset.prod": 0.26223803316732847, "alternative statement": 0.3277229211497981, "alternative": 0.49682069984132576, "statement": 0.49682069984132576}}, {"docstring": "**Alias** of max_zero_sub_max_neg_zero_eq_self`.\n", "keywords": {"Alias": 0.035514607549195436, "neg": 0.05706283858652404, "max": 0.07571113878390312}}, {"docstring": "For coprime `a` and `b`, the power of `p` in `a * b` is the sum of the powers in `a` and `b`\n", "keywords": {"coprime": 0.09713402394201612, "sum": 0.14390902704051098, "power": 0.15142227756780624, "powers": 0.15142227756780624}}, {"docstring": "The points with `v.lim_ratio_meas h\u03c1 x = 0` have measure `0` for `\u03c1`.\n", "keywords": {"v.lim": 0.04491197687864554, "ratio": 0.04491197687864554, "meas": 0.09568045026443411, "measure": 0.09568045026443411, "points": 0.15831692877998726}}, {"docstring": "The definition of the centroid.\n", "keywords": {"centroid": 0.09568045026443411, "definition": 0.15831692877998726}}, {"docstring": "The roots of `cyclotomic' n R` are the primitive `n`-th roots of unity.\n", "keywords": {"roots of unity": 0.02544278322318597, "cyclotomic": 0.055708263664958506, "roots": 0.10586606907408062, "primitive": 0.11718348279991213, "unity": 0.11718348279991213}}, {"docstring": "**Alias** of the reverse direction of monotone_to_dual_comp_iff`.\n", "keywords": {"direction of monotone": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "dual": 0.04491197687864554, "comp": 0.04491197687864554, "iff": 0.04491197687864554, "monotone": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " In the trivial charted_space structure of a space modelled over itself through the identity, the atlas members are just the identity\n", "keywords": {"trivial charted": 0.00998901268061666, "atlas members": 0.013923161052069546, "space structure": 0.017490271332507117, "space modelled": 0.017490271332507117, "identity": 0.03146277825206327, "space": 0.07334489383741183, "charted": 0.08439943001984396, "trivial": 0.11718348279991213, "structure": 0.11718348279991213, "modelled": 0.11718348279991213, "atlas": 0.11718348279991213, "members": 0.11718348279991213}}, {"docstring": "Finite wide pullbacks are finite limits, so if `C` has all finite limits, it also has finite wide pullbacks\n", "keywords": {"Finite wide pullbacks": 0.002035907947668459, "finite limits": 0.009097610847127464, "wide pullbacks": 0.009129674222899491, "Finite wide": 0.012721391611592985, "limits": 0.04219971500992198, "Finite": 0.05293303453704031, "wide": 0.058591741399956064, "pullbacks": 0.0765121618811835, "pullbacks are finite": 0.15844673219572528}}, {"docstring": "A pair (i, j) is contained in the antidiagonal of `n` if and only if `i + j = n`.\n", "keywords": {"pair": 0.09568045026443411, "contained": 0.15831692877998726, "antidiagonal": 0.15831692877998726}}, {"docstring": " If `R` is a linear ordered field, then it suffices to verify only the first axiom of `ordered_smul`.\n", "keywords": {"linear ordered field": 0.006026046305276702, "ordered field": 0.03079770075447456, "suffices to verify": 0.03498702377830618, "linear ordered": 0.05135123883758033, "smul": 0.053316999302383886, "field": 0.11246769819744629, "ordered": 0.13282721021560867, "linear": 0.1838594885424691, "suffices": 0.1838594885424691, "verify": 0.1838594885424691, "axiom": 0.1838594885424691}}, {"docstring": " If `s` is Borel-measurable in a Polish space and `f` is continuous injective on `s`, then the restriction of `f` to `s` is a measurable embedding.\n", "keywords": {"Polish space": 0.007743432063478832, "measurable embedding": 0.00899321792126428, "continuous injective": 0.013527995261974615, "Borel-measurable": 0.06650965107397505, "Polish": 0.06650965107397505, "embedding": 0.0771485953923296, "space": 0.1155310835876123, "continuous": 0.1155310835876123, "injective": 0.1155310835876123, "restriction": 0.1155310835876123, "measurable": 0.1155310835876123}}, {"docstring": " Let `Z, N` be types, let `R` be a metric space, let `\u03b1 : R` be a point and let `j : Z \u2192 N \u2192 R` be a function.  We aim to estimate how close we can get to `\u03b1`, while staying in the image of `j`.  The points `j z a` of `R` in the image of `j` come with a \"cost\" equal to `d a`.  As we get closer to `\u03b1` while staying in the image of `j`, we are interested in bounding the quantity `d a * dist \u03b1 (j z a)` from below by a strictly positive amount `1 / A`: the intuition is that approximating well `\u03b1` with the points in the image of `j` should come at a high cost.  The hypotheses on the function `f : R \u2192 R` provide us with sufficient conditions to ensure our goal. The first hypothesis is that `f` is Lipschitz at `\u03b1`: this yields a bound on the distance. The second hypothesis is specific to the Liouville argument and provides the missing bound involving the cost function `d`.  This lemma collects the properties used in the proof of `exists_pos_real_of_irrational_root`. It is stated in more general form than needed: in the intended application, `Z = \u2124`, `N = \u2115`, `R = \u211d`, `d a = (a + 1) ^ f.nat_degree`, `j z a  = z / (a + 1)`, `f \u2208 \u2124[x]`, `\u03b1` is an irrational root of `f`, `\u03b5` is small, `M` is a bound on the Lipschitz constant of `f` near `\u03b1`, `n` is the degree of the polynomial `f`.\n", "keywords": {"metric space": 0.022397745773532905, "image": 0.04841192181568066, "function": 0.10567439474402804, "cost": 0.11259462969206871, "cost function": 0.11992783519765694, "bound": 0.12417088646067599, "points": 0.13951566591767692, "types": 0.14273988814872354, "space": 0.14273988814872354, "Lipschitz": 0.1505565835036203, "metric": 0.15347550656251524, "staying": 0.1572275639452343, "aim to estimate": 0.17548649840986874, "estimate how close": 0.17548649840986874, "high cost": 0.21768775951553038, "hypothesis": 0.22156285944553478, "Lipschitz constant": 0.2330581348609012, "irrational": 0.24583020351947318, "root": 0.24583020351947318, "degree": 0.2604432538523148}}, {"docstring": "The degree of a product of polynomials is equal to the sum of the degrees, provided that the product of leading coefficients is nonzero.  See `polynomial.nat_degree_multiset_prod` (without the `'`) for a version for integral domains, where this condition is automatically satisfied.\n", "keywords": {"coefficients is nonzero": 0.015984817385490936, "product of polynomials": 0.01812782114264774, "product of leading": 0.01812782114264774, "polynomials is equal": 0.02103262673100174, "leading coefficients": 0.02103262673100174, "product": 0.06202779740012308, "provided": 0.10962093801015978, "nonzero": 0.10962093801015978, "degree": 0.11256601906408087, "integral domains": 0.12383623278789485, "automatically satisfied": 0.12383623278789485, "polynomials": 0.14352479895389542, "equal": 0.14352479895389542, "sum": 0.14352479895389542, "leading": 0.14352479895389542, "coefficients": 0.14352479895389542, "version for integral": 0.15652792812404168, "condition is automatically": 0.15652792812404168, "degrees": 0.22513203812816174, "polynomial.nat": 0.22895444834140852}}, {"docstring": " Given `r` larger than the measure of a set `A`, there exists an open superset of `A` with measure less than `r`.\n", "keywords": {"exists an open": 0.01904688389482227, "open superset": 0.01904688389482227, "measure": 0.09106811155038866, "larger": 0.09202664026077896, "set": 0.09202664026077896, "exists": 0.1367145963576765, "open": 0.1367145963576765, "superset": 0.1367145963576765}}, {"docstring": "The infimum of a singleton is the element of the singleton\n", "keywords": {"singleton": 0.09770854302279938, "infimum": 0.14390902704051098, "element": 0.14390902704051098}}, {"docstring": "The characteristic `p` version of `peval_poly_of_interest`\n", "keywords": {"peval": 0.04491197687864554, "poly": 0.04491197687864554, "interest": 0.04491197687864554, "characteristic": 0.09568045026443411, "version": 0.09568045026443411}}, {"docstring": " If `f : \u2102 \u2192 E` is complex differentiable on some set `s`, then it is analytic at any point `z` such that `s \u2208 \ud835\udcdd z` (equivalently, `z \u2208 interior s`).\n", "keywords": {"complex differentiable": 0.013527995261974615, "equivalently": 0.04491197687864554, "set": 0.0771485953923296, "point": 0.0771485953923296, "interior": 0.0771485953923296, "complex": 0.1155310835876123, "differentiable": 0.1155310835876123, "analytic": 0.1155310835876123}}, {"docstring": "A convex function on a segment is upper-bounded by the max of its endpoints.\n", "keywords": {"convex function": 0.02570861714399338, "segment is upper-bounded": 0.02570861714399338, "endpoints": 0.09568045026443411, "convex": 0.15831692877998726, "function": 0.15831692877998726, "segment": 0.15831692877998726, "upper-bounded": 0.15831692877998726, "max": 0.15831692877998726}}, {"docstring": "Without the assumption `nontrivial A`, then `0 : A` would be invertible.\n", "keywords": {"assumption": 0.09568045026443411, "nontrivial": 0.09568045026443411, "invertible": 0.09568045026443411}}, {"docstring": "A function `-f` is strictly convex iff `f` is strictly concave.\n", "keywords": {"strictly convex iff": 0.004852550456099045, "convex iff": 0.022138323509052035, "strictly concave": 0.024448499122065027, "strictly convex": 0.04051498248759491, "strictly": 0.10356599227702172, "function": 0.11521656054299435, "iff": 0.11521656054299435, "concave": 0.11521656054299435, "convex": 0.1879836817695587}}, {"docstring": " If `s` is a convex set, then `a \u2022 closure s + b \u2022 interior s \u2286 interior s` for all `0 \u2264 a`, `0 < b`, `a + b = 1`. See also `convex.combo_self_interior_subset_interior` for a weaker version.\n", "keywords": {"convex set": 0.021786084795612032, "interior": 0.035261995580054634, "set": 0.12801953565520405, "closure": 0.12801953565520405, "weaker version": 0.1605691047236775, "convex": 0.1665493561396732, "convex.combo": 0.2614994545772466, "subset": 0.2614994545772466, "version": 0.33770316900908626, "weaker": 0.40969045393250325}}, {"docstring": "Subsets of bounded sets are bounded.\n", "keywords": {"bounded sets": 0.05913243875864445, "Subsets of bounded": 0.0790262557081126, "Subsets": 0.11984314898676356, "sets are bounded": 0.12748048004056906, "bounded": 0.14323823713631006, "sets": 0.19488865479360015}}, {"docstring": "The element `0` is regular if and only if `R` is trivial.\n", "keywords": {"element": 0.09568045026443411, "trivial": 0.09568045026443411, "regular": 0.15831692877998726}}, {"docstring": " Definition of `is_o` in terms of `is_O_with`. We record it in a lemma as we will set `is_o` to be irreducible at the end of this file.\n", "keywords": {"Definition": 0.10028582371075691, "terms": 0.14832923246533666, "set": 0.2790829227183407, "file": 0.2790829227183407, "record": 0.37689977775222827, "lemma": 0.37689977775222827, "irreducible": 0.37689977775222827, "end": 0.37689977775222827}}, {"docstring": " If a function `f` is strictly monotone on a left neighborhood of `a` and the image of this neighborhood under `f` includes `Iio (f a)`, then `f` is continuous at `a` from the left.\n", "keywords": {"strictly monotone": 0.010660048110124063, "left neighborhood": 0.014769856047567117, "Iio": 0.03477376588830863, "includes": 0.055174169687121036, "left": 0.06032180892480273, "neighborhood": 0.06032180892480273, "function": 0.07756772112218133, "strictly": 0.10270155830966059, "monotone": 0.10270155830966059, "image": 0.10270155830966059, "continuous": 0.10270155830966059}}, {"docstring": " If a subset of a real vector space contains an open segment, then the direction of this segment belongs to the tangent cone at its endpoints.\n", "keywords": {"real vector space": 0.006265290071490465, "real vector": 0.033100028790236186, "vector space": 0.033100028790236186, "tangent cone": 0.033100028790236186, "open segment": 0.04816043877099025, "segment belongs": 0.04816043877099025, "endpoints": 0.10923981997294611, "segment": 0.12834816870701238, "subset": 0.17899586521379354, "real": 0.17899586521379354, "vector": 0.17899586521379354, "space": 0.17899586521379354, "open": 0.17899586521379354, "direction": 0.17899586521379354, "belongs": 0.17899586521379354, "tangent": 0.17899586521379354, "cone": 0.17899586521379354}}, {"docstring": " See `linear_independent.fin_cons'` for an uglier version that works if you only have a module over a semiring.\n", "keywords": {"uglier version": 0.02570861714399338, "version that works": 0.02570861714399338, "linear": 0.04491197687864554, "independent.fin": 0.04491197687864554, "cons": 0.09568045026443411, "semiring": 0.09568045026443411, "uglier": 0.15831692877998726, "version": 0.15831692877998726, "works": 0.15831692877998726, "module": 0.15831692877998726}}, {"docstring": "**Alias** of add_lt_add_of_lt_of_lt`.\n", "keywords": {"Alias": 0.03625524040669144, "add": 0.05776554179380615}}, {"docstring": "If a category has all products then in particular it has finite products.\n", "keywords": {"finite products": 0.05913243875864445, "products": 0.14323823713631006, "category": 0.19488865479360015, "finite": 0.19488865479360015}}, {"docstring": "Two holors are equal if all their slices are equal.\n", "keywords": {"holors are equal": 0.04437656514447953, "slices are equal": 0.04437656514447953, "equal": 0.10901343189444501, "holors": 0.19488865479360015, "slices": 0.19488865479360015}}, {"docstring": " Distances `r\u2081` `r\u2082` of `p` from two different points `c\u2081` `c\u2082` determine at most two points `p\u2081` `p\u2082` in two-dimensional space (two circles intersect in at most two points).\n", "keywords": {"two-dimensional space": 0.011105384224262597, "circles intersect": 0.015455129647434142, "points": 0.0259083981780956, "Distances": 0.058865175910949544, "space": 0.08902894120058116, "determine": 0.12336897526125244, "two-dimensional": 0.12336897526125244, "circles": 0.12336897526125244, "intersect": 0.12336897526125244}}, {"docstring": " Riesz's lemma, which usually states that it is possible to find a vector with norm 1 whose distance to a closed proper subspace is arbitrarily close to 1. The statement here is in terms of multiples of norms, since in general the existence of an element of norm exactly 1 is not guaranteed. For a variant giving an element with norm in `[1, R]`, see `riesz_lemma_of_norm_lt`.\n", "keywords": {"closed proper subspace": 0.007648586348106387, "find a vector": 0.03768632986931102, "closed proper": 0.03768632986931102, "proper subspace": 0.03768632986931102, "subspace is arbitrarily": 0.03768632986931102, "arbitrarily close": 0.03768632986931102, "Riesz lemma": 0.09196130571584196, "norm": 0.09648737419900086, "Riesz": 0.14510051178632324, "lemma": 0.14510051178632324, "vector with norm": 0.18732250282049395, "states": 0.19057190479582506, "find": 0.19057190479582506, "vector": 0.19057190479582506, "distance": 0.19057190479582506, "closed": 0.19057190479582506, "proper": 0.19057190479582506, "subspace": 0.19057190479582506, "arbitrarily": 0.19057190479582506, "close": 0.19057190479582506}}, {"docstring": "**Alias** of le_of_mul_le_mul_left'`.\n", "keywords": {"mul": 0.021352745740207107, "Alias": 0.035514607549195436, "left": 0.05706283858652404}}, {"docstring": " The characteristic polynomial of the map `\u03bb x, a * x` is the minimal polynomial of `a`.  In combination with `det_eq_sign_charpoly_coeff` or `trace_eq_neg_charpoly_coeff` and a bit of rewriting, this will allow us to conclude the field norm resp. trace of `x` is the product resp. sum of `x`'s conjugates.\n", "keywords": {"characteristic polynomial": 0.026376351228428088, "minimal polynomial": 0.026376351228428088, "polynomial": 0.07169357066770814, "field norm resp": 0.09112947709421784, "charpoly": 0.0925320307187195, "coeff": 0.0925320307187195, "map": 0.13824894957281553, "trace": 0.16075379091191563, "resp": 0.16075379091191563, "norm resp": 0.16098774448465092, "characteristic": 0.17922470487880698, "minimal": 0.17922470487880698, "bit of rewriting": 0.18248376021920368, "product resp": 0.20303045261341357, "conclude the field": 0.22852383898143674, "field norm": 0.22852383898143674, "det": 0.2789821930499004, "sign": 0.2789821930499004, "neg": 0.2789821930499004, "rewriting": 0.35781214281838}}, {"docstring": "The factors of `n` are the prime divisors\n", "keywords": {"prime divisors": 0.015380821171891606, "divisors": 0.09568045026443411, "factors": 0.15831692877998726, "prime": 0.15831692877998726}}, {"docstring": "The empty set has zero diameter\n", "keywords": {"empty set": 0.09700399286574239, "diameter": 0.15831692877998726, "empty": 0.29736558256021506, "set": 0.29736558256021506}}, {"docstring": " If `\u03b1` is a separable space and `f : \u03b1 \u2192 \u03b2` is a continuous map with dense range, then `\u03b2` is a separable space as well. E.g., the completion of a separable uniform space is separable.\n", "keywords": {"dense range": 0.029351921055969194, "continuous map": 0.0401461328390386, "map with dense": 0.0401461328390386, "separable space": 0.059230832035384616, "separable uniform space": 0.07033372826572211, "separable": 0.07513760638397654, "space": 0.11746760768564829, "range": 0.14514362718522256, "separable uniform": 0.16011346223532408, "uniform space": 0.19307028780960767, "continuous": 0.19646024408037197, "map": 0.19646024408037197, "dense": 0.19646024408037197, "space is separable": 0.4239213743052204, "completion": 0.45920862335777335, "uniform": 0.45920862335777335}}, {"docstring": "**Fermat's Little Theorem**: for all nonzero `a : zmod p`, we have `a ^ (p - 1) = 1`.\n", "keywords": {"Fermat Little Theorem": 0.0032610119837787367, "Fermat": 0.057012387690331526, "Theorem": 0.057012387690331526, "nonzero": 0.09568045026443411, "zmod": 0.09568045026443411}}, {"docstring": "Conjugation is jointly continuous on `G \u00d7 G` when both `mul` and `inv` are continuous.\n", "keywords": {"Conjugation is jointly": 0.022138323509052035, "jointly continuous": 0.05417025203414716, "mul": 0.054709255964732355, "inv": 0.054709255964732355, "Conjugation": 0.11521656054299435, "continuous": 0.13667842094541144, "jointly": 0.1879836817695587}}, {"docstring": "It suffices to prove `[x, y] \u2286 s` for `x y \u2208 s`, `x \u2264 y`.\n", "keywords": {"suffices to prove": 0.00899321792126428, "prove": 0.0771485953923296, "suffices": 0.1155310835876123}}, {"docstring": "A dependent version of `subgroup.closure_induction`.\n", "keywords": {"subgroup.closure": 0.04491197687864554, "induction": 0.04491197687864554, "dependent version": 0.09700399286574239, "dependent": 0.29736558256021506, "version": 0.29736558256021506}}, {"docstring": " A geometric series in a normed field is summable iff the norm of the common ratio is less than one.\n", "keywords": {"geometric series": 0.02570861714399338, "normed field": 0.02570861714399338, "field is summable": 0.02570861714399338, "summable iff": 0.02570861714399338, "iff the norm": 0.02570861714399338, "common ratio": 0.02570861714399338, "geometric": 0.15831692877998726, "series": 0.15831692877998726, "normed": 0.15831692877998726, "field": 0.15831692877998726, "summable": 0.15831692877998726, "iff": 0.15831692877998726, "norm": 0.15831692877998726, "common": 0.15831692877998726, "ratio": 0.15831692877998726}}, {"docstring": "A subfield is closed under addition.\n", "keywords": {"closed under addition": 0.04940384002065631, "subfield is closed": 0.09700399286574239, "addition": 0.15831692877998726, "subfield": 0.29736558256021506, "closed": 0.29736558256021506}}, {"docstring": " Alias of `zsmul_right_inj`, for ease of discovery alongside `zsmul_le_zsmul_iff'` and `zsmul_lt_zsmul_iff'`.\n", "keywords": {"zsmul": 0.006947731365216964, "discovery alongside": 0.01149182769133687, "ease of discovery": 0.015189371892318074, "iff": 0.05037451224226699, "inj": 0.06638525851253083, "Alias": 0.09288174174581286, "alongside": 0.09288174174581286, "ease": 0.12231969132779077, "discovery": 0.12231969132779077}}, {"docstring": "A measure on an encodable type is a sum of dirac measures.\n", "keywords": {"encodable type": 0.03663237450220032, "sum of dirac": 0.03663237450220032, "dirac measures": 0.05417025203414716, "encodable": 0.1879836817695587, "type": 0.1879836817695587, "sum": 0.1879836817695587, "dirac": 0.1879836817695587, "measure": 0.2733568418908229, "measures": 0.2733568418908229}}, {"docstring": "This is the `iff` version of `matrix.is_hermitian.from_blocks`.\n", "keywords": {"iff": 0.04491197687864554, "matrix.is": 0.04491197687864554, "hermitian.from": 0.04491197687864554, "blocks": 0.04491197687864554, "version": 0.15831692877998726}}, {"docstring": "**Alias** of the reverse direction of has_deriv_within_at_Iio_iff_Iic`.\n", "keywords": {"reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "Iio": 0.030396371632413578, "Iic": 0.030396371632413578, "deriv": 0.04491197687864554, "iff": 0.04491197687864554, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "The cardinality of the antidiagonal of `n` is `n+1`.\n", "keywords": {"cardinality": 0.15831692877998726, "antidiagonal": 0.15831692877998726}}, {"docstring": " Given countably many disjoint measurable sets `t n` and countably many measurable functions `g n`, one can construct a measurable function that coincides with `g n` on `t n`.\n", "keywords": {"disjoint measurable sets": 0.002142641681361317, "measurable sets": 0.016165038753457196, "countably many disjoint": 0.017456342676859006, "disjoint measurable": 0.02250298229489214, "measurable functions": 0.02339225275778431, "function that coincides": 0.04251849436360396, "measurable": 0.05707720744123586, "countably": 0.06674457252556332, "construct a measurable": 0.07387742379344117, "countably many measurable": 0.07643883888934465, "sets": 0.09290274147644657, "disjoint": 0.12852615747836663, "construct": 0.12852615747836663, "coincides": 0.12852615747836663, "functions": 0.13348914505112663, "function": 0.13348914505112663}}, {"docstring": "If `\u03b1` is equivalent to `\u03b2`, then `is_empty \u03b1` is equivalent to `is_empty \u03b2`.\n", "keywords": {"equivalent": 0.04784022513221706, "empty": 0.04784022513221706}}, {"docstring": " The `subsemiring` generated by a multiplicative submonoid coincides with the `subsemiring.closure` of the submonoid itself .\n", "keywords": {"multiplicative submonoid coincides": 0.003628079711673298, "multiplicative submonoid": 0.025536557885239508, "submonoid coincides": 0.025536557885239508, "subsemiring": 0.05393656033701752, "subsemiring.closure": 0.05393656033701752, "submonoid": 0.09106811155038866, "generated": 0.09202664026077896, "multiplicative": 0.1367145963576765, "coincides": 0.1367145963576765}}, {"docstring": "A function applied to a `ite` is a `ite` of that function applied to each of the branches.\n", "keywords": {"function applied": 0.010042438510452488, "ite": 0.023392504197764657, "applied": 0.059989639176021896, "function": 0.08205340856523909, "branches": 0.10287228916930506}}, {"docstring": "The p-adic norm of `p` is `1/p` if `p > 1`.  See also `padic_norm.padic_norm_p_of_prime` for a version that assumes `p` is prime.\n", "keywords": {"p-adic norm": 0.03850425925696239, "norm": 0.12670570162281566, "version that assumes": 0.1280678334132935, "prime": 0.13970283667528854, "p-adic": 0.14631011006809364, "padic": 0.232946730592177, "norm.padic": 0.232946730592177, "assumes": 0.30425790317962403, "version": 0.37313241488112575}}, {"docstring": "The coercions are respectively `nat.cast` and `zmod.cast`.\n", "keywords": {"nat.cast": 0.04491197687864554, "zmod.cast": 0.04491197687864554, "coercions": 0.29736558256021506}}, {"docstring": " If two functions coincide on a set `s`, then a Taylor series for the first one is as well a Taylor series for the second one.\n", "keywords": {"Taylor series": 0.003454463709356651, "functions coincide": 0.021754649297288254, "Taylor": 0.030460635362112357, "series": 0.05631466302318476, "set": 0.09856372721054514, "functions": 0.14591593823007556, "coincide": 0.14591593823007556}}, {"docstring": "Emetric diameter of the convex hull of a set `s` equals the emetric diameter of `s.\n", "keywords": {"Emetric diameter": 0.008489311965679865, "convex hull": 0.02114777441281124, "equals the emetric": 0.03663534545644476, "diameter": 0.055127829619426576, "Emetric": 0.07571113878390312, "set": 0.09713402394201612, "equals": 0.09713402394201612, "convex": 0.14390902704051098, "hull": 0.14390902704051098}}, {"docstring": "Unlike the other set constructors, the `iota` definite descriptor  is a set for any set input, but not constructively so, so there is no  associated `(Set \u2192 Prop) \u2192 Set` function.\n", "keywords": {"definite descriptor": 0.010578425407714384, "set constructors": 0.012582592597689264, "set input": 0.012582592597689264, "set": 0.02789424723877147, "Prop": 0.037942963429875264, "iota": 0.06360327817632742, "function": 0.06360327817632742, "Unlike": 0.08909534784879629, "constructors": 0.08909534784879629, "definite": 0.08909534784879629, "input": 0.08909534784879629, "descriptor": 0.11748866740584497, "constructively": 0.11748866740584497}}, {"docstring": " The norm of the image of `m : M` in the quotient by `S` is zero if and only if `m` belongs to the closure of `S`.\n", "keywords": {"belongs": 0.06844581806138879, "norm": 0.09568045026443411, "image": 0.09568045026443411, "quotient": 0.09568045026443411, "closure": 0.09568045026443411}}, {"docstring": " The inner product of a linear combination of a set of orthonormal vectors with one of those vectors picks out the coefficient of that vector.\n", "keywords": {"linear combination": 0.011791779281441954, "set of orthonormal": 0.011791779281441954, "orthonormal vectors": 0.016514709421906745, "vectors picks": 0.016514709421906745, "vectors": 0.07524595803548341, "product": 0.10795533203491868, "linear": 0.10795533203491868, "combination": 0.10795533203491868, "set": 0.10795533203491868, "orthonormal": 0.10795533203491868, "picks": 0.10795533203491868, "coefficient": 0.10795533203491868, "vector": 0.15049191607096682}}, {"docstring": "`x^n`, `n : \u2115` is strictly convex on `[0, +\u221e)` for all `n` greater than `2`.\n", "keywords": {"strictly convex": 0.013527995261974615, "greater": 0.0771485953923296, "strictly": 0.1155310835876123, "convex": 0.1155310835876123}}, {"docstring": "**Alias** of `ne_of_mem_of_not_mem'`.\n", "keywords": {"mem": 0.02245598843932277, "Alias": 0.03625524040669144}}, {"docstring": "If `a` commutes with `b`, then `b` commutes with `a`.\n", "keywords": {"commutes": 0.04784022513221706}}, {"docstring": " If L is an algebraic field extension of K and A is an algebraic algebra over L, then A is algebraic over K.\n", "keywords": {"algebraic field extension": 0.00598245581591639, "field extension": 0.024662903654370644, "algebraic field": 0.03662476403939693, "algebraic algebra": 0.03662476403939693, "algebraic": 0.07591024702445004, "field": 0.15514278968948286, "extension": 0.15514278968948286, "algebra": 0.15514278968948286}}, {"docstring": "The range of `pure : \u03b1 \u2192 ultrafilter \u03b1` is dense in `ultrafilter \u03b1`.\n", "keywords": {"ultrafilter": 0.03548996106871502, "pure": 0.055708263664958506, "range": 0.1408007092310104, "dense": 0.1408007092310104}}, {"docstring": "$x^n-y^n = (x-y) \\sum x^ky^{n-1-k}$ reformulated without `-` signs.\n", "keywords": {"signs": 0.04491197687864554, "sum": 0.09568045026443411, "reformulated": 0.09568045026443411}}, {"docstring": "We'd like to state this as `L.head + L.tail.sum = L.sum`, but because `L.head` relies on an inhabited instance to return a garbage value on the empty list, this is not possible. Instead, we write the statement in terms of `(L.nth 0).get_or_else 0`.\n", "keywords": {"L.head": 0.014271686893694636, "empty list": 0.03419969733027349, "L.sum": 0.039954682789842065, "inhabited instance": 0.05582649005076364, "instance to return": 0.05582649005076364, "return a garbage": 0.05582649005076364, "L.nth": 0.12628676402702455, "relies": 0.1438116176495284, "list": 0.1438116176495284, "state": 0.2299449545753006, "inhabited": 0.2299449545753006, "instance": 0.2299449545753006, "return": 0.2299449545753006, "garbage": 0.2299449545753006, "empty": 0.2299449545753006, "write the statement": 0.3498660406641243, "statement in terms": 0.3498660406641243, "write": 0.5091028863598569, "statement": 0.5091028863598569, "terms": 0.5091028863598569}}, {"docstring": "The `v`-adic valuation of `r \u2208 R` is less than 1 if and only if `v` divides the ideal `(r)`.\n", "keywords": {"divides the ideal": 0.005987543063120938, "adic valuation": 0.00899321792126428, "adic": 0.0771485953923296, "divides": 0.0771485953923296, "ideal": 0.0771485953923296, "valuation": 0.1155310835876123}}, {"docstring": "Brahmagupta's identity, see <https://en.wikipedia.org/wiki/Brahmagupta%27s_identity>\n", "keywords": {"Brahmagupta identity": 0.02570861714399338, "Brahmagupta": 0.15831692877998726, "identity": 0.15831692877998726}}, {"docstring": " Minkowski inequality: the `L_p` seminorm of the sum of two vectors is less than or equal to the sum of the `L_p`-seminorms of the summands. A version for `nnreal`-valued functions.\n", "keywords": {"Minkowski inequality": 0.011440508155383859, "sum": 0.0470181469610055, "seminorm": 0.0708556241860872, "seminorms": 0.0708556241860872, "valued functions": 0.09352776279380667, "Minkowski": 0.10635367123359185, "inequality": 0.10635367123359185, "summands": 0.10635367123359185, "vectors": 0.139405236860154, "equal": 0.139405236860154, "nnreal": 0.22302132203417566, "valued": 0.2924525188766874, "functions": 0.2924525188766874, "version": 0.3600375770318291}}, {"docstring": "The sum of elements of an `add_submonoid` of an `add_comm_monoid` indexed by a `finset` is an element of the `add_submonoid`.\n", "keywords": {"add": 0.012778445728343213, "submonoid": 0.023509470704055593, "sum of elements": 0.04142740189695664, "comm": 0.060788587812935495, "monoid": 0.060788587812935495, "finset": 0.060788587812935495, "indexed": 0.09184176950556423, "sum": 0.12711536794568035, "elements": 0.13126580133021967, "element": 0.13126580133021967}}, {"docstring": "**Alias** of ssubset_of_subset_of_ssubset`.\n", "keywords": {"Alias": 0.035514607549195436, "ssubset": 0.055127829619426576, "subset": 0.05706283858652404}}, {"docstring": " The composition `l \u2218 f` where `l : F \u2192 E` and `f : \ud835\udd5c \u2192 F`, has a derivative equal to the Fr\u00e9chet derivative of `l` applied to the derivative of `f`.\n", "keywords": {"Fr\u00e9chet derivative": 0.008398643910902767, "derivative equal": 0.015685657531221753, "derivative": 0.04576824472363173, "Fr\u00e9chet": 0.06065846326845406, "composition": 0.08517676639600258, "applied": 0.08517676639600258, "equal": 0.1124754908737648}}, {"docstring": " Reindexing both indices along the same equivalence preserves the determinant.  For the `simp` version of this lemma, see `det_minor_equiv_self`; this one is unsuitable because `matrix.reindex_apply` unfolds `reindex` first.\n", "keywords": {"Reindexing both indices": 0.015099935621315529, "preserves the determinant": 0.015099935621315529, "equivalence preserves": 0.02249651976012989, "Reindexing": 0.10028582371075691, "determinant": 0.10028582371075691, "indices": 0.14832923246533666, "equivalence": 0.14832923246533666, "preserves": 0.14832923246533666, "simp": 0.17881754828257995, "det": 0.17881754828257995, "minor": 0.17881754828257995, "equiv": 0.17881754828257995, "matrix.reindex": 0.17881754828257995, "apply": 0.17881754828257995, "unfolds": 0.17881754828257995, "reindex": 0.17881754828257995, "version": 0.2790829227183407, "lemma": 0.2790829227183407, "unsuitable": 0.37689977775222827}}, {"docstring": "The adjoint is involutive\n", "keywords": {"adjoint is involutive": 0.04940384002065631, "involutive": 0.15831692877998726, "adjoint": 0.29736558256021506}}, {"docstring": "**Alias** of the forward direction of unique_mdiff_within_at_iff_unique_diff_within_at`.\n", "keywords": {"Alias": 0.03402676245250578, "forward direction": 0.034987023778306175, "mdiff": 0.05331699930238388, "iff": 0.05331699930238388, "diff": 0.05331699930238388, "direction of unique": 0.06131733975553988, "unique": 0.069255433448279, "forward": 0.18385948854246909, "direction": 0.18385948854246909}}, {"docstring": " If one of the measures `\u03bc i` has no atoms, them `measure.pi \u00b5` has no atoms. The instance below assumes that all `\u03bc i` have no atoms.\n", "keywords": {"atoms": 0.0483100585490041, "measures": 0.14905049353482663, "measure.pi": 0.14905049353482663, "instance below assumes": 0.3114373044746512, "instance": 0.48731698581209365, "assumes": 0.48731698581209365}}, {"docstring": " To check that a filter is frequently bounded, it suffices to have a witness which bounds `f` at some point for every admissible set.  This is only an implication, as the other direction is wrong for the trivial filter.\n", "keywords": {"frequently bounded": 0.020747442285711133, "witness which bounds": 0.020747442285711133, "admissible set": 0.020747442285711133, "bounded": 0.11777198021367995, "bounds": 0.11777198021367995, "set": 0.11777198021367995, "filter is frequently": 0.12787782206420736, "trivial filter": 0.16024740788476186, "filter": 0.1643845092711225, "check": 0.17258549299654868, "frequently": 0.17258549299654868, "suffices": 0.17258549299654868, "witness": 0.17258549299654868, "point": 0.17258549299654868, "admissible": 0.17258549299654868, "direction is wrong": 0.21430171753146993, "implication": 0.31676849500916915, "direction": 0.4200969429841209, "wrong": 0.4200969429841209, "trivial": 0.4200969429841209}}, {"docstring": "Precomposing `f` with `prod.fst` is `C^n` at `x : E \u00d7 F`\n", "keywords": {"Precomposing": 0.04491197687864554, "prod.fst": 0.04491197687864554}}, {"docstring": "To prove a property of a sum, it suffices to prove that the property is additive and holds on summands.\n", "keywords": {"holds on summands": 0.0233550736766052, "additive and holds": 0.038584678130008584, "suffices to prove": 0.0431505389096901, "prove": 0.10730569120144322, "sum": 0.11840455484321102, "summands": 0.11840455484321102, "property is additive": 0.1244669424000432, "property": 0.1411879566095664, "suffices": 0.19274649316101516, "additive": 0.19274649316101516, "holds": 0.19274649316101516, "prove a property": 0.20525303731368727}}, {"docstring": "In the trivial model with corners, the associated local equiv is the identity.\n", "keywords": {"model with corners": 0.00899321792126428, "trivial model": 0.013527995261974615, "local equiv": 0.013527995261974615, "corners": 0.0771485953923296, "identity": 0.0771485953923296, "trivial": 0.1155310835876123, "model": 0.1155310835876123, "local": 0.1155310835876123, "equiv": 0.1155310835876123}}, {"docstring": " This duplicates the global `smul_eq_mul`, but doesn't have to unfold anywhere near as much to apply.\n", "keywords": {"duplicates the global": 0.015380821171891606, "smul": 0.04491197687864554, "mul": 0.04491197687864554, "global": 0.09568045026443411, "apply": 0.09568045026443411, "duplicates": 0.15831692877998726, "unfold": 0.15831692877998726}}, {"docstring": "To prove a property of a product, it suffices to prove that the property is multiplicative and holds on factors.\n", "keywords": {"holds on factors": 0.0233550736766052, "multiplicative and holds": 0.038584678130008584, "suffices to prove": 0.0431505389096901, "prove": 0.10730569120144322, "product": 0.11840455484321102, "factors": 0.11840455484321102, "property is multiplicative": 0.1244669424000432, "property": 0.1411879566095664, "suffices": 0.19274649316101516, "multiplicative": 0.19274649316101516, "holds": 0.19274649316101516, "prove a property": 0.20525303731368727}}, {"docstring": "An isometry preserves non-negative distances.\n", "keywords": {"preserves non-negative distances": 0.016559150827736194, "isometry preserves non-negative": 0.03339840940482845, "non-negative distances": 0.04940384002065631, "isometry preserves": 0.09700399286574239, "preserves non-negative": 0.09700399286574239, "distances": 0.15831692877998726, "isometry": 0.29736558256021506, "preserves": 0.29736558256021506, "non-negative": 0.29736558256021506}}, {"docstring": " If two functions `g` and `f` are analytic respectively at `f x` and `x`, then `g \u2218 f` is analytic at `x`.\n", "keywords": {"functions": 0.10028582371075691, "analytic": 0.10191687733271076}}, {"docstring": "The minimal distance to a set (as `\u211d\u22650`) is continuous in point\n", "keywords": {"continuous in point": 0.04940384002065631, "minimal distance": 0.09700399286574239, "set": 0.15831692877998726, "point": 0.15831692877998726, "minimal": 0.29736558256021506, "distance": 0.29736558256021506, "continuous": 0.29736558256021506}}, {"docstring": " If the field `L` is a finite extension of the fraction field of the integral domain `A`, the integral closure `C` of `A` in `L` has fraction field `L`.\n", "keywords": {"fraction field": 0.011696126378892155, "integral domain": 0.012557236191818122, "integral closure": 0.012557236191818122, "finite extension": 0.016796432981697695, "field": 0.05707720744123586, "fraction": 0.06674457252556332, "integral": 0.06674457252556332, "domain": 0.09290274147644657, "closure": 0.09290274147644657, "finite": 0.12852615747836663, "extension": 0.12852615747836663}}, {"docstring": " A useful restatement using `segment`: `x` is an extreme point iff the only (closed) segments that contain it are those with `x` as one of their endpoints.\n", "keywords": {"extreme point iff": 0.006822309199625383, "extreme point": 0.03498702377830618, "point iff": 0.03498702377830618, "closed": 0.053316999302383886, "endpoints": 0.11246769819744629, "segment": 0.13851086689655803, "segments": 0.13851086689655803, "restatement": 0.1838594885424691, "extreme": 0.1838594885424691, "point": 0.1838594885424691, "iff": 0.1838594885424691}}, {"docstring": "If everything in `A` is less than `k`, we can bound the sum of powers.\n", "keywords": {"sum of powers": 0.04940384002065631, "bound the sum": 0.09700399286574239, "powers": 0.15831692877998726, "bound": 0.29736558256021506, "sum": 0.29736558256021506}}, {"docstring": "**Alias** of sbtw_asymm`.\n", "keywords": {"Alias": 0.030396371632413578, "asymm": 0.04491197687864554, "sbtw": 0.15831692877998726}}, {"docstring": " The strong pigeonhole principle for finitely many pigeons and pigeonholes.  Given a function `f` between finite types `\u03b1` and `\u03b2` and a number `b` such that `card \u03b2 \u2022 b \u2264 card \u03b1`, there exists an element `y : \u03b2` such that its preimage has at least `b` elements. See also `fintype.exists_lt_card_fiber_of_nsmul_lt_card` for a stronger statement.\n", "keywords": {"strong pigeonhole principle": 0.010235244747007897, "principle for finitely": 0.04294375634692697, "finitely many pigeons": 0.04294375634692697, "strong pigeonhole": 0.04686173518074982, "pigeonhole principle": 0.04686173518074982, "card": 0.09512628365470802, "pigeons and pigeonholes": 0.10416474017966663, "strong": 0.20291753164511378, "principle": 0.20291753164511378, "finitely": 0.20291753164511378, "pigeons": 0.20291753164511378, "finite types": 0.21730852685460442, "pigeonhole": 0.22060201189650275, "element": 0.3560641695209663, "elements": 0.3560641695209663, "stronger statement": 0.36205868380252626, "fintype.exists": 0.36407610856088846, "fiber": 0.36407610856088846, "nsmul": 0.36407610856088846, "exists an element": 0.3785756810212855}}, {"docstring": " By moving `succ` to the outside of this expression, we create opportunities for further simplification using `succ_above_zero` or `succ_succ_above_zero`.\n", "keywords": {"succ": 0.008967485577883209, "create opportunities": 0.017949171226940622, "moving": 0.09611368803643895, "expression": 0.09611368803643895, "create": 0.1327880990447932, "opportunities": 0.1327880990447932, "simplification": 0.1327880990447932}}, {"docstring": " If `f` and `g` are two exact solutions of the same ODE, then the distance between them can't grow faster than exponentially. This is a simple corollary of Gr\u00f6nwall's inequality, and some people call this Gr\u00f6nwall's inequality too.  This version assumes all inequalities to be true in some time-dependent set `s t`, and assumes that the solutions never leave this set.\n", "keywords": {"faster than exponentially": 0.026068801375543467, "grow faster": 0.03574211017516329, "Gr\u00f6nwall inequality": 0.04731945108169297, "ODE": 0.06321898677802118, "exact solutions": 0.08315258307837753, "Gr\u00f6nwall": 0.10898716760226661, "exponentially": 0.13676667940027915, "exact": 0.1857651650374203, "distance": 0.1857651650374203, "grow": 0.1857651650374203, "faster": 0.1857651650374203, "inequality": 0.19831860453756683, "set": 0.20651386532156993, "solutions": 0.2066292653830171, "corollary of Gr\u00f6nwall": 0.21086255739028725, "call this Gr\u00f6nwall": 0.21086255739028725, "simple corollary": 0.24290617143040935, "people call": 0.24290617143040935, "assumes": 0.277871323378317, "time-dependent set": 0.284219438637742}}, {"docstring": " To get differentiability at `0` of the auxiliary functions, we need to know that their limit is `0`, to be able to apply general differentiability extension theorems. This limit is checked in this lemma.\n", "keywords": {"differentiability extension theorems": 0.003443735847803506, "apply general differentiability": 0.0047798579931408215, "general differentiability extension": 0.0047798579931408215, "auxiliary functions": 0.018631302664197744, "extension theorems": 0.018631302664197744, "apply general": 0.02570861714399338, "general differentiability": 0.028818579880008327, "differentiability extension": 0.028818579880008327, "differentiability": 0.0884660069427631, "limit is checked": 0.10223282129314978, "functions": 0.11553108358761233, "theorems": 0.11553108358761233, "limit": 0.11736502002288329, "auxiliary": 0.15831692877998726, "apply": 0.15831692877998726, "general": 0.15831692877998726, "extension": 0.15831692877998726, "lemma": 0.3120806116026233, "checked": 0.3951375787241905}}, {"docstring": " For each `a`, we can find a `b` in the codomain, such that `a`'s relation to the domain of `f` is `b`'s relation to the image of `f`.  Thus, if `a` is not already in `f`, then we can extend `f` by sending `a` to `b`.\n", "keywords": {"relation": 0.04553447013706414, "codomain": 0.10375162798716249, "find": 0.13611772524108945, "domain": 0.13611772524108945, "image": 0.13611772524108945, "extend": 0.2867584112776268, "sending": 0.2867584112776268}}, {"docstring": "A finite sum of rationals with positive p-adic valuation has positive p-adic valuation  (if the sum is non-zero).\n", "keywords": {"positive p-adic valuation": 0.00476780318079775, "positive p-adic": 0.019162484577325965, "p-adic valuation": 0.019162484577325965, "finite sum": 0.06476321108658208, "p-adic": 0.08024199688466523, "sum is non-zero": 0.08576363768362633, "rationals with positive": 0.10794548311801358, "positive": 0.11499707576279743, "valuation": 0.11499707576279743, "non-zero": 0.12480069379377481, "sum of rationals": 0.13818193796053035, "sum": 0.15037792959523802, "valuation has positive": 0.18424847681122322, "finite": 0.20223729121329417, "rationals": 0.20223729121329417}}, {"docstring": "The submonoid generated by an element of a monoid equals the set of natural number powers of    the element.\n", "keywords": {"natural number powers": 0.002477776488322723, "submonoid generated": 0.018034246898548233, "monoid equals": 0.018034246898548233, "equals the set": 0.018034246898548233, "set of natural": 0.018034246898548233, "natural number": 0.018034246898548233, "number powers": 0.018034246898548233, "element": 0.08782297807514622, "submonoid": 0.13309686053898662, "generated": 0.13309686053898662, "monoid": 0.13309686053898662, "equals": 0.13309686053898662, "set": 0.13309686053898662, "natural": 0.13309686053898662, "number": 0.13309686053898662, "powers": 0.13309686053898662}}, {"docstring": "See also `monotone.map_bdd_above`.\n", "keywords": {"monotone.map": 0.04491197687864554, "bdd": 0.04491197687864554}}, {"docstring": "Type **stars and bars** for the case `n = 2`.\n", "keywords": {"stars and bars": 0.02570861714399338, "Type": 0.04491197687864554, "stars": 0.15831692877998726, "bars": 0.15831692877998726, "case": 0.15831692877998726}}, {"docstring": " The mean value theorem on a convex set: if the derivative of a function is bounded by `C`, then the function is `C`-Lipschitz. Version with `has_fderiv_within`.\n", "keywords": {"convex set": 0.022301551378828607, "function is bounded": 0.030370647063816338, "Lipschitz": 0.04096847175859269, "function": 0.08252252056410837, "set": 0.1221512649852118, "theorem": 0.1785903903600119, "convex": 0.1785903903600119, "derivative": 0.1785903903600119, "bounded": 0.1785903903600119, "fderiv": 0.21373773690901868, "Version": 0.3258146251285017}}, {"docstring": "If the measure is sigma-finite, all strongly measurable functions are  `fin_strongly_measurable`.\n", "keywords": {"strongly measurable functions": 0.019080375154557187, "measure is sigma-finite": 0.02391462167226668, "fin": 0.05706283858652404, "measurable functions": 0.05913243875864445, "strongly measurable": 0.08940622963610957, "sigma-finite": 0.11984314898676356, "strongly": 0.14323823713631006, "measurable": 0.14323823713631006, "measure": 0.19488865479360015, "functions": 0.19488865479360015}}, {"docstring": " If `\u03b1` is a compact space, then a locally finite family of sets of `\u03b1` can have only finitely many nonempty elements.\n", "keywords": {"locally finite family": 0.0042542192213185686, "compact space": 0.015380821171891606, "nonempty elements": 0.015380821171891606, "locally finite": 0.02570861714399338, "finite family": 0.02570861714399338, "family of sets": 0.02570861714399338, "finitely many nonempty": 0.02570861714399338, "space": 0.09568045026443411, "elements": 0.09568045026443411, "compact": 0.15831692877998726, "locally": 0.15831692877998726, "finite": 0.15831692877998726, "family": 0.15831692877998726, "sets": 0.15831692877998726, "finitely": 0.15831692877998726, "nonempty": 0.15831692877998726}}, {"docstring": "The only numbers with empty prime factorization are `0` and `1`\n", "keywords": {"empty prime factorization": 0.03339840940482845, "numbers with empty": 0.09700399286574239, "empty prime": 0.09700399286574239, "prime factorization": 0.09700399286574239, "numbers": 0.29736558256021506, "empty": 0.29736558256021506, "prime": 0.29736558256021506, "factorization": 0.29736558256021506}}, {"docstring": "The order of `\u03c9` in the unit group is exactly `2^p`.\n", "keywords": {"unit group": 0.02570861714399338, "order": 0.15831692877998726, "unit": 0.15831692877998726, "group": 0.15831692877998726}}, {"docstring": "`s \u2208 \u2202\u207a \ud835\udc9c` iff `s` is exactly one element less than something from `\ud835\udc9c`.\n", "keywords": {"iff": 0.04491197687864554, "element": 0.15831692877998726}}, {"docstring": "**Alias** of the reverse direction of order.succ_ne_succ_iff`.\n", "keywords": {"direction of order.succ": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "succ": 0.04491197687864554, "iff": 0.04491197687864554, "order.succ": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " The auxiliary function `convergents'_aux` returns the same value for a sequence and the corresponding squashed sequence at the squashed position.\n", "keywords": {"convergents aux": 0.007174368708495189, "auxiliary function": 0.00998901268061666, "squashed position": 0.0125357335508132, "squashed sequence": 0.021991095873821146, "sequence": 0.07334489383741183, "squashed": 0.07334489383741183, "function": 0.08439943001984396, "convergents": 0.08439943001984396, "aux": 0.08439943001984396, "returns": 0.08439943001984396, "position": 0.08439943001984396, "auxiliary": 0.11718348279991213}}, {"docstring": "See `tsub_tsub_cancel_of_le` for the equality.\n", "keywords": {"tsub": 0.021352745740207107, "cancel": 0.05706283858652404, "equality": 0.11984314898676356}}, {"docstring": " If `f` has derivative `f'` at `a` in the strict sense and `c > 0`, then `f` approximates `f'` with constant `c` on some neighborhood of `a`.\n", "keywords": {"strict sense": 0.009239332327148086, "approximates": 0.04491197687864554, "derivative": 0.06844581806138879, "constant": 0.06844581806138879, "strict": 0.09568045026443411, "sense": 0.09568045026443411, "neighborhood": 0.09568045026443411}}, {"docstring": "An uncurried version of `finset.prod_product_right`.\n", "keywords": {"finset.prod": 0.04491197687864554, "product": 0.04491197687864554, "uncurried version": 0.09700399286574239, "uncurried": 0.29736558256021506, "version": 0.29736558256021506}}, {"docstring": "**Intermediate Value Theorem** for continuous functions on connected spaces.\n", "keywords": {"Intermediate Value Theorem": 0.007444681613352736, "connected spaces": 0.04940384002065631, "Intermediate": 0.08596317751626563, "Theorem": 0.08596317751626563, "continuous functions": 0.09700399286574239, "functions on connected": 0.09700399286574239, "spaces": 0.15831692877998726, "continuous": 0.29736558256021506, "functions": 0.29736558256021506, "connected": 0.29736558256021506}}, {"docstring": "Roots of a quadratic\n", "keywords": {"Roots": 0.15831692877998726, "quadratic": 0.15831692877998726}}, {"docstring": "A specialized ext lemma for equality of sigma types over an indexed subtype.\n", "keywords": {"specialized ext lemma": 0.03339840940482845, "indexed subtype": 0.04940384002065631, "specialized ext": 0.09700399286574239, "ext lemma": 0.09700399286574239, "lemma for equality": 0.09700399286574239, "equality of sigma": 0.09700399286574239, "sigma types": 0.09700399286574239, "subtype": 0.15831692877998726, "specialized": 0.29736558256021506, "ext": 0.29736558256021506, "lemma": 0.29736558256021506, "equality": 0.29736558256021506, "sigma": 0.29736558256021506, "types": 0.29736558256021506, "indexed": 0.29736558256021506}}, {"docstring": " Taking the cartesian product of two continuous multilinear maps is a bounded linear operation.\n", "keywords": {"bounded linear operation": 0.016559150827736194, "continuous multilinear maps": 0.03339840940482845, "Taking the cartesian": 0.04940384002065631, "linear operation": 0.04940384002065631, "cartesian product": 0.09700399286574239, "continuous multilinear": 0.09700399286574239, "multilinear maps": 0.09700399286574239, "bounded linear": 0.09700399286574239, "Taking": 0.15831692877998726, "operation": 0.15831692877998726, "cartesian": 0.29736558256021506, "product": 0.29736558256021506, "continuous": 0.29736558256021506, "multilinear": 0.29736558256021506, "maps": 0.29736558256021506, "bounded": 0.29736558256021506, "linear": 0.29736558256021506}}, {"docstring": " Any large enough family of vectors in `R^\u03b9` has a pair of elements whose remainders are close together, pointwise.\n", "keywords": {"large enough family": 0.02570861714399338, "family of vectors": 0.02570861714399338, "pair of elements": 0.02570861714399338, "elements whose remainders": 0.02570861714399338, "remainders are close": 0.02570861714399338, "pointwise": 0.04491197687864554, "large": 0.15831692877998726, "family": 0.15831692877998726, "vectors": 0.15831692877998726, "pair": 0.15831692877998726, "elements": 0.15831692877998726, "remainders": 0.15831692877998726, "close": 0.15831692877998726}}, {"docstring": " Given a monoid homomorphism `f : M \u2192* N` and an element `x : M`, if `x` has a right inverse, then `f x` has a right inverse too. For elements invertible on both sides see `is_unit.map`.\n", "keywords": {"monoid homomorphism": 0.027002057875293115, "inverse": 0.09278175148819086, "homomorphism": 0.1345376346685726, "monoid": 0.1954257385705354, "elements invertible": 0.19932127536432387, "unit.map": 0.232946730592177, "element": 0.3632056327107443, "elements": 0.3632056327107443, "invertible": 0.45757843052457975, "sides": 0.45757843052457975}}, {"docstring": "The image of the filter `at_top` on `Ici a` under the coercion equals `at_top`.\n", "keywords": {"coercion equals": 0.012741693123860753, "top": 0.019648131954263418, "Ici": 0.05307550101705468, "filter": 0.09202664026077896, "equals": 0.09202664026077896, "image": 0.1367145963576765, "coercion": 0.1367145963576765}}, {"docstring": "The closure of a sieve `S` is the largest closed sieve which contains `S` (justifying the name \"closure\").\n", "keywords": {"largest closed sieve": 0.00456544690305669, "largest closed": 0.021754649297288254, "closed sieve": 0.029938721750981816, "justifying": 0.09856372721054514, "closure": 0.09960683487150054, "sieve": 0.09960683487150054, "largest": 0.14591593823007556, "closed": 0.14591593823007556}}, {"docstring": "**Alias** of pgame.lf_of_lt_of_lf`.\n", "keywords": {"Alias": 0.030396371632413578, "pgame.lf": 0.0771485953923296}}, {"docstring": "For ideals in a Dedekind domain, to divide is to contain.\n", "keywords": {"Dedekind domain": 0.008293207122436794, "Dedekind": 0.08596317751626563, "domain": 0.09568045026443411, "ideals": 0.15831692877998726, "divide": 0.15831692877998726}}, {"docstring": " Let `K` be the field of fraction of an integrally closed domain `R` and let `L` be a separable extension of `K`, generated by an integral power basis `B` such that the minimal polynomial of `B.gen` is Eisenstein at `p`. Given `z : L` integral over `R`, if `p \u2022 z \u2208 adjoin R {B.gen}`, then `z \u2208 adjoin R {B.gen}`.\n", "keywords": {"integrally closed domain": 0.003658013698559875, "integral power basis": 0.006790775838555553, "B.gen": 0.01741553741628641, "closed domain": 0.02092796543804638, "power basis": 0.02092796543804638, "field of fraction": 0.028816117629977194, "integrally closed": 0.028816117629977194, "separable extension": 0.028816117629977194, "minimal polynomial": 0.028816117629977194, "integral power": 0.05281931409596395, "Eisenstein": 0.07654755829451379, "adjoin": 0.12060037405521817, "domain": 0.12248504179011051, "generated": 0.12248504179011051, "basis": 0.12248504179011051, "integral": 0.14988565273600762, "field": 0.1673589160919142, "fraction": 0.1673589160919142, "integrally": 0.1673589160919142, "closed": 0.1673589160919142}}, {"docstring": "**Alias** of the reverse direction of bounded_space_subtype_iff`.\n", "keywords": {"direction of bounded": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "space": 0.04491197687864554, "subtype": 0.04491197687864554, "iff": 0.04491197687864554, "bounded": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "In a monoid with zero, either zero and one are nonequal, or zero is the only element.\n", "keywords": {"nonequal": 0.0771485953923296, "element": 0.0771485953923296, "monoid": 0.1155310835876123}}, {"docstring": "The Monge point lies in the affine span.\n", "keywords": {"Monge point lies": 0.002263175936744087, "Monge point": 0.013797198203993007, "affine span": 0.015380821171891606, "point lies": 0.02570861714399338, "Monge": 0.08596317751626563, "span": 0.09568045026443411, "point": 0.15831692877998726, "lies": 0.15831692877998726, "affine": 0.15831692877998726}}, {"docstring": "If the domain of a `dense_embedding` is a separable space, then so is its codomain.\n", "keywords": {"separable space": 0.015380821171891606, "dense": 0.04491197687864554, "embedding": 0.04491197687864554, "space": 0.09568045026443411, "codomain": 0.09568045026443411, "domain": 0.15831692877998726, "separable": 0.15831692877998726}}, {"docstring": " A refinement of `finset.center_mass_mem_convex_hull` when the indexed family is a `finset` of the space.\n", "keywords": {"indexed family": 0.02570861714399338, "finset.center": 0.04491197687864554, "mass": 0.04491197687864554, "mem": 0.04491197687864554, "convex": 0.04491197687864554, "hull": 0.04491197687864554, "finset": 0.04491197687864554, "space": 0.09568045026443411, "refinement": 0.15831692877998726, "indexed": 0.15831692877998726, "family": 0.15831692877998726}}, {"docstring": "In a `t2_space`, every compact set is closed.\n", "keywords": {"space": 0.04491197687864554, "set is closed": 0.04940384002065631, "compact set": 0.09700399286574239, "closed": 0.15831692877998726, "compact": 0.29736558256021506, "set": 0.29736558256021506}}, {"docstring": " Convenience lemma. The `a - 1` is not using truncated substraction, as opposed to the definition of `nat.desc_factorial` as a natural.\n", "keywords": {"Convenience lemma": 0.01552184797949213, "Convenience": 0.12363091320521931, "lemma": 0.12363091320521931, "nat.desc": 0.17881754828257995, "factorial": 0.17881754828257995, "truncated substraction": 0.18075564686791562, "substraction": 0.32883716426354986, "natural": 0.32883716426354986, "truncated": 0.46553351027698087, "opposed": 0.46553351027698087, "definition": 0.46553351027698087}}, {"docstring": " If, for all `x` in a set `s`, one has frequently `\u03c1 a / \u03bc a < p`, then `\u03c1 s \u2264 p * \u03bc s`, as proved in `measure_le_of_frequently_le`. Since `\u03c1 a / \u03bc a` tends almost everywhere to `v.lim_ratio_meas h\u03c1 x`, the same property holds for sets `s` on which `v.lim_ratio_meas h\u03c1 < p`.\n", "keywords": {"frequently": 0.05556323512328092, "measure": 0.08697918992803758, "v.lim": 0.09067758920160383, "ratio": 0.09067758920160383, "meas": 0.12092626271319618, "proved": 0.15734121711617913, "holds for sets": 0.15858126996414348, "set": 0.18280845629257125, "sets": 0.18280845629257125, "property holds": 0.18308382625665404, "property": 0.39338448863683595, "holds": 0.39338448863683595}}, {"docstring": " A ring is a Jacobson ring if and only if for all prime ideals `P`, the Jacobson radical of `P` is equal to `P`.\n", "keywords": {"Jacobson radical": 0.01389597101033646, "prime ideals": 0.014176630379520855, "Jacobson ring": 0.018963950710365548, "Jacobson": 0.04761869283122073, "ideals": 0.09713402394201612, "ring": 0.09770854302279938, "prime": 0.14390902704051098, "radical": 0.14390902704051098, "equal": 0.14390902704051098}}, {"docstring": "The right inverse of matrix A equals the left inverse of A when they exist.\n", "keywords": {"matrix A equals": 0.03663237450220032, "equals the left": 0.03663237450220032, "inverse of matrix": 0.04051498248759491, "left inverse": 0.04051498248759491, "inverse": 0.10356599227702172, "exist": 0.11521656054299435, "matrix": 0.1879836817695587, "equals": 0.1879836817695587, "left": 0.1879836817695587}}, {"docstring": " If the inner product of two vectors is equal to the product of their norms (i.e., `\u27eax, y\u27eb = \u2225x\u2225 * \u2225y\u2225`), then the two vectors are nonnegative real multiples of each other. One form of the equality case for Cauchy-Schwarz. Compare `abs_inner_eq_norm_iff`, which takes the weaker hypothesis `abs \u27eax, y\u27eb = \u2225x\u2225 * \u2225y\u2225`.\n", "keywords": {"nonnegative real multiples": 0.0038017578780442512, "nonnegative real": 0.023884242856266835, "real multiples": 0.023884242856266835, "vectors is equal": 0.04589362407841557, "vectors are nonnegative": 0.04589362407841557, "product": 0.06104232052681061, "vectors": 0.06104232052681061, "abs": 0.11911636296366937, "case for Cauchy-Schwarz": 0.14253638033698168, "equal": 0.15273209520009845, "nonnegative": 0.15273209520009845, "real": 0.15273209520009845, "multiples": 0.15273209520009845, "equality case": 0.17404031672856876, "norms": 0.23840552254880937, "norm": 0.23840552254880937, "weaker hypothesis": 0.24401564491441155, "Cauchy-Schwarz": 0.3240203308698378, "Compare": 0.33909653557002245, "iff": 0.33909653557002245}}, {"docstring": " The preimage of polynomials on `[0,1]` under the pullback map by `x \u21a6 (b-a) * x + a` is the polynomials on `[a,b]`.\n", "keywords": {"pullback map": 0.020225813225353943, "preimage of polynomials": 0.05055947907065001, "polynomials": 0.07334489383741181, "preimage": 0.1408007092310104, "pullback": 0.1408007092310104, "map": 0.1408007092310104}}, {"docstring": "The composition of two additive group homomorphisms is an additive group homomorphism.\n", "keywords": {"additive group homomorphisms": 0.010207682009177325, "additive group": 0.02003358724493507, "group homomorphisms": 0.04006717448987014, "group": 0.08205340856523911, "additive": 0.1173736768400546, "composition": 0.20509004731457245, "homomorphisms": 0.2347473536801092}}, {"docstring": "A sequence that converges uniformly is also uniformly Cauchy\n", "keywords": {"uniformly Cauchy": 0.01817798363347797, "sequence that converges": 0.037831312533597124, "converges uniformly": 0.0562460611896591, "Cauchy": 0.064011398160278, "uniformly": 0.13945519496053638, "sequence": 0.19092478917347616, "converges": 0.19092478917347616}}, {"docstring": "Shows that `A\u2099 = b\u2099 * A\u2099\u208b\u2081 + a\u2099 * A\u2099\u208b\u2082` and `B\u2099 = b\u2099 * B\u2099\u208b\u2081 + a\u2099 * B\u2099\u208b\u2082`.\n", "keywords": {"Shows": 0.06341998722529081}}, {"docstring": "An alternative definition of `ordered_insert` using `take_while` and `drop_while`.\n", "keywords": {"alternative definition": 0.02570861714399338, "ordered": 0.04491197687864554, "insert": 0.04491197687864554, "drop": 0.04491197687864554, "alternative": 0.15831692877998726, "definition": 0.15831692877998726}}, {"docstring": "**Alias** of sbtw_trans_right`.\n", "keywords": {"Alias": 0.030396371632413578, "trans": 0.04491197687864554, "sbtw": 0.15831692877998726}}, {"docstring": "Deprecated: use `fun_like.congr_arg` instead.\n", "keywords": {"Deprecated": 0.04491197687864554, "fun": 0.04491197687864554, "like.congr": 0.04491197687864554, "arg": 0.04491197687864554}}, {"docstring": "The number of solutions to `x^2 = a` is determined by the quadratic character.\n", "keywords": {"quadratic character": 0.015380821171891606, "number of solutions": 0.02570861714399338, "character": 0.09568045026443411, "number": 0.15831692877998726, "solutions": 0.15831692877998726, "determined": 0.15831692877998726, "quadratic": 0.15831692877998726}}, {"docstring": " The exponential in a Banach-algebra `\ud835\udd38` over `\ud835\udd42 = \u211d` or `\ud835\udd42 = \u2102` has Fr\u00e9chet-derivative `1 : \ud835\udd38 \u2192L[\ud835\udd42] \ud835\udd38` at zero.\n", "keywords": {"Banach-algebra": 0.04776309965539685, "Fr\u00e9chet-derivative": 0.04776309965539685, "exponential": 0.1155310835876123}}, {"docstring": "If `b` is not linear independent, then `algebra.discr A b = 0`.\n", "keywords": {"linear independent": 0.015380821171891606, "independent": 0.09568045026443411, "algebra.discr": 0.09568045026443411, "linear": 0.15831692877998726}}, {"docstring": "A function is invariant to a swap if it is equal at both elements\n", "keywords": {"function is invariant": 0.02570861714399338, "elements": 0.09568045026443411, "function": 0.15831692877998726, "invariant": 0.15831692877998726, "swap": 0.15831692877998726, "equal": 0.15831692877998726}}, {"docstring": " If there is a scalar `c` with `\u2225c\u2225>1`, then any element with nonzero norm can be moved by scalar multiplication to any shell of width `\u2225c\u2225`. Also recap information on the norm of the rescaling element that shows up in applications.\n", "keywords": {"shell of width": 0.025765925599220623, "scalar multiplication": 0.046070465614688895, "nonzero norm": 0.07323006676183065, "moved by scalar": 0.10246777084879838, "scalar": 0.11518782295155719, "width": 0.13139304727920198, "element with nonzero": 0.15237538559979358, "element": 0.17846025462290366, "norm": 0.17846025462290366, "nonzero": 0.1911723571806515, "moved": 0.1911723571806515, "multiplication": 0.1911723571806515, "shell": 0.1911723571806515, "rescaling element": 0.19176102900842135, "recap information": 0.255075824992456, "applications": 0.3444196796358625, "element that shows": 0.364309062536667, "recap": 0.45081635970284, "information": 0.45081635970284, "rescaling": 0.45081635970284}}, {"docstring": "The positive cone of an ordered module is always pointed.\n", "keywords": {"positive cone": 0.09700399286574239, "ordered module": 0.09700399286574239, "pointed": 0.15831692877998726, "positive": 0.29736558256021506, "cone": 0.29736558256021506, "ordered": 0.29736558256021506, "module": 0.29736558256021506}}, {"docstring": "We prefer to use the bundled `rev_at` over unbundled `rev_at_fun`.\n", "keywords": {"rev": 0.02006098734604785, "fun": 0.054709255964732355, "bundled": 0.11521656054299435, "unbundled": 0.11521656054299435, "prefer": 0.1879836817695587}}, {"docstring": " If two sets `s` and `t` are included in a set `u`, and `\u03bc s + \u03bc t > \u03bc u`, then `s` intersects `t`. Version assuming that `t` is measurable.\n", "keywords": {"intersects": 0.07562090863435546, "sets": 0.10523229996605092, "set": 0.10523229996605092, "Version assuming": 0.13623163683076128, "included": 0.1554527012770092, "Version": 0.3074506896868104, "measurable": 0.3074506896868104, "assuming": 0.38997397536695666}}, {"docstring": "Rewrite `s.pimage f` in terms of `finset.filter`, `finset.attach`, and `finset.image`.\n", "keywords": {"Rewrite": 0.04491197687864554, "finset.filter": 0.04491197687864554, "finset.attach": 0.04491197687864554, "finset.image": 0.04491197687864554, "s.pimage": 0.15831692877998726, "terms": 0.29736558256021506}}, {"docstring": " When one splits a list along a composition `c`, the number of sublists thus created is `c.length`.\n", "keywords": {"splits a list": 0.02570861714399338, "number of sublists": 0.02570861714399338, "sublists thus created": 0.02570861714399338, "c.length": 0.04491197687864554, "composition": 0.09568045026443411, "splits": 0.15831692877998726, "list": 0.15831692877998726, "number": 0.15831692877998726, "sublists": 0.15831692877998726, "created": 0.15831692877998726}}, {"docstring": " A family indexed by a `fintype` is affinely independent if and only if no nontrivial weighted subtractions over `finset.univ` (where the sum of the weights is 0) are 0.\n", "keywords": {"nontrivial weighted subtractions": 0.0042542192213185686, "family indexed": 0.02570861714399338, "affinely independent": 0.02570861714399338, "nontrivial weighted": 0.02570861714399338, "weighted subtractions": 0.02570861714399338, "fintype": 0.04491197687864554, "finset.univ": 0.04491197687864554, "family": 0.15831692877998726, "indexed": 0.15831692877998726, "affinely": 0.15831692877998726, "independent": 0.15831692877998726, "nontrivial": 0.15831692877998726, "weighted": 0.15831692877998726, "subtractions": 0.15831692877998726, "sum": 0.15831692877998726, "weights": 0.15831692877998726}}, {"docstring": "Composition of first-order embeddings is associative.\n", "keywords": {"Composition of first-order": 0.04940384002065631, "embeddings is associative": 0.04940384002065631, "first-order embeddings": 0.09700399286574239, "Composition": 0.15831692877998726, "associative": 0.15831692877998726, "first-order": 0.29736558256021506, "embeddings": 0.29736558256021506}}, {"docstring": "We can define `esymm \u03c3 R n` by summing over a subtype instead of over `powerset_len`.\n", "keywords": {"powerset": 0.04491197687864554, "len": 0.04491197687864554, "define": 0.09568045026443411, "esymm": 0.09568045026443411, "summing": 0.15831692877998726, "subtype": 0.15831692877998726}}, {"docstring": "**Alias** of the reverse direction of lt_inv_mul_iff_mul_lt`.\n", "keywords": {"mul": 0.019648131954263418, "Alias": 0.034278050535979626, "reverse direction": 0.035715520099333646, "inv": 0.05393656033701752, "iff": 0.05393656033701752, "reverse": 0.18569843656348187, "direction": 0.18569843656348187}}, {"docstring": " If a function has a Taylor series at order at least `1` on a neighborhood of `x`, then the term of order `1` of this series is a derivative of `f` at `x`.\n", "keywords": {"Taylor series": 0.009674883049973182, "term of order": 0.04353993359107112, "Taylor": 0.06437403718419235, "series": 0.07442578585270058, "order": 0.07442578585270058, "series at order": 0.08923847588315463, "function": 0.11840455484321102, "neighborhood": 0.11840455484321102, "term": 0.11840455484321102, "derivative": 0.11840455484321102}}, {"docstring": "If a class has a Fra\u00efss\u00e9 limit, it must be Fra\u00efss\u00e9.\n", "keywords": {"Fra\u00efss\u00e9 limit": 0.015857551225615562, "Fra\u00efss\u00e9": 0.06512685435561998, "limit": 0.11984314898676356, "class": 0.19488865479360015}}, {"docstring": "For the identity map, all points are periodic.\n", "keywords": {"identity map": 0.04940384002065631, "points are periodic": 0.04940384002065631, "map": 0.15831692877998726, "periodic": 0.15831692877998726, "identity": 0.29736558256021506, "points": 0.29736558256021506}}, {"docstring": "Assumes right covariance. The lemma assuming left covariance is `left.add_neg`.\n", "keywords": {"Assumes right covariance": 0.15195679415702995, "Assumes": 0.1531727145735673, "left.add": 0.2182620423168793, "neg": 0.2182620423168793, "covariance": 0.23216465691767033, "assuming left covariance": 0.2636654148178027, "lemma assuming left": 0.3201847146816566, "left covariance": 0.32446011851782974, "lemma assuming": 0.38571507274593436, "assuming left": 0.38571507274593436, "lemma": 0.5275897320195265, "assuming": 0.5275897320195265, "left": 0.5275897320195265}}, {"docstring": " The balanced core of `s` is minimal in the sense that it is contained in any balanced superset `t` of `s`.\n", "keywords": {"balanced superset": 0.031557281947372486, "balanced core": 0.05259515133015473, "superset": 0.11369206228658875, "balanced": 0.13453835116331675, "core": 0.18569843656348187, "minimal": 0.18569843656348187, "sense": 0.18569843656348187, "contained": 0.18569843656348187}}, {"docstring": "Given a basis, any orientation equals the orientation given by that basis or its negation.\n", "keywords": {"orientation equals": 0.06340461682679863, "negation": 0.12363091320521931, "equals the orientation": 0.13561210463159817, "basis": 0.14868279128010753, "orientation": 0.14868279128010753, "equals": 0.2005079697193566}}, {"docstring": "The new distance is uniformly continuous.\n", "keywords": {"uniformly continuous": 0.04940384002065631, "distance is uniformly": 0.09700399286574239, "continuous": 0.15831692877998726, "distance": 0.29736558256021506, "uniformly": 0.29736558256021506}}, {"docstring": "On square matrices, `mul_left_comm` applies under `det`.\n", "keywords": {"mul": 0.04491197687864554, "left": 0.04491197687864554, "comm": 0.04491197687864554, "det": 0.04491197687864554, "square matrices": 0.04940384002065631, "matrices": 0.15831692877998726, "applies": 0.15831692877998726, "square": 0.29736558256021506}}, {"docstring": "Sum of a multiset of elements in an `add_submonoid` of an `add_comm_monoid` is in the `add_submonoid`.\n", "keywords": {"add": 0.012616079950459014, "submonoid": 0.023264649583682996, "multiset of elements": 0.023478396598924825, "comm": 0.06037786452709367, "monoid": 0.06037786452709367, "Sum": 0.10252384836042068, "multiset": 0.15145892749810547, "elements": 0.15145892749810547}}, {"docstring": "The conjugate of the golden ratio is irrational.\n", "keywords": {"ratio is irrational": 0.015380821171891606, "golden ratio": 0.02570861714399338, "irrational": 0.09568045026443411, "conjugate": 0.15831692877998726, "golden": 0.15831692877998726, "ratio": 0.15831692877998726}}, {"docstring": " If `C` holds for the `algebra_map` of `r : R` into `exterior_algebra R M`, the `\u03b9` of `x : M`, and is preserved under addition and muliplication, then it holds for all of `exterior_algebra R M`.\n", "keywords": {"addition and muliplication": 0.01208472927391371, "preserved under addition": 0.016796432981697695, "algebra": 0.023877549999942866, "exterior": 0.023947002035544326, "map": 0.061515127169190206, "holds": 0.06674457252556332, "muliplication": 0.09290274147644657, "preserved": 0.12852615747836663, "addition": 0.12852615747836663}}, {"docstring": " Let `{x | p x}` be an additive subsemigroup of an additive commutative monoid `M`. Let `f : M \u2192 N` be a map subadditive on `{x | p x}`, i.e., `p x \u2192 p y \u2192 f (x + y) \u2264 f x + f y`. Let `g i`, `i \u2208 s`, be a nonempty finite family of elements of `M` such that `\u2200 i \u2208 s, p (g i)`. Then `f (\u2211 i in s, g i) \u2264 \u2211 i in s, f (g i)`.\n", "keywords": {"additive commutative monoid": 0.0014420927441090518, "additive subsemigroup": 0.012828795787315675, "additive commutative": 0.012828795787315675, "commutative monoid": 0.014744101175678754, "additive": 0.04789135747085257, "monoid": 0.10987504304330521, "subsemigroup": 0.13223995987587403, "commutative": 0.13223995987587403, "map subadditive": 0.1360797143123447, "nonempty finite family": 0.13838347849153482, "nonempty finite": 0.23389422403348575, "finite family": 0.23389422403348575, "family of elements": 0.23389422403348575, "map": 0.34609258272189697, "subadditive": 0.34609258272189697, "nonempty": 0.4353823136818795, "finite": 0.4353823136818795, "family": 0.4353823136818795, "elements": 0.4353823136818795}}, {"docstring": "The sets of factors of coprime `a` and `b` are disjoint\n", "keywords": {"factors of coprime": 0.015380821171891606, "sets of factors": 0.02570861714399338, "coprime": 0.09568045026443411, "disjoint": 0.09568045026443411, "sets": 0.15831692877998726, "factors": 0.15831692877998726}}, {"docstring": "The order on `\u03b9 \u2192\u2080 \u2115` is well-founded.\n", "keywords": {"well-founded": 0.15831692877998726, "order": 0.29736558256021506}}, {"docstring": " If `f` has a local min on `s` at `a` and `y` belongs to the positive tangent cone of `s` at `a`, then `0 \u2264 f' y`.\n", "keywords": {"positive tangent cone": 0.0016012214736657916, "local min": 0.013527995261974615, "positive tangent": 0.013527995261974615, "tangent cone": 0.013527995261974615, "belongs": 0.0771485953923296, "local": 0.1155310835876123, "min": 0.1155310835876123, "positive": 0.1155310835876123, "tangent": 0.1155310835876123, "cone": 0.1155310835876123}}, {"docstring": " Weighted generalized mean inequality, version for sums over finite sets, with `\u211d\u22650\u221e`-valued functions and real exponents.\n", "keywords": {"Weighted generalized": 0.04940384002065631, "generalized mean inequality": 0.04940384002065631, "version for sums": 0.04940384002065631, "finite sets": 0.04940384002065631, "valued functions": 0.04940384002065631, "real exponents": 0.04940384002065631, "sums over finite": 0.09700399286574239, "functions and real": 0.09700399286574239, "Weighted": 0.15831692877998726, "inequality": 0.15831692877998726, "version": 0.15831692877998726, "sets": 0.15831692877998726, "valued": 0.15831692877998726, "exponents": 0.15831692877998726, "generalized": 0.29736558256021506, "sums": 0.29736558256021506, "finite": 0.29736558256021506, "functions": 0.29736558256021506, "real": 0.29736558256021506}}, {"docstring": " For nonzero integers `a` and `b`, `gcd a b` is the smallest positive natural number that can be written in the form `a * x + b * y` for some pair of integers `x` and `y`\n", "keywords": {"smallest positive natural": 0.0024287169002957616, "positive natural number": 0.0024287169002957616, "nonzero integers": 0.013010696091416026, "smallest positive": 0.017798659388540475, "positive natural": 0.017798659388540475, "natural number": 0.017798659388540475, "pair of integers": 0.03235616592296141, "integers": 0.048561690547210754, "gcd": 0.08886407157392263, "form": 0.08886407157392263, "nonzero": 0.132239959875874, "smallest": 0.132239959875874, "positive": 0.132239959875874, "natural": 0.132239959875874, "number": 0.132239959875874, "written": 0.132239959875874, "pair": 0.132239959875874}}, {"docstring": "Assumes right covariance.\n", "keywords": {"Assumes right covariance": 0.02570861714399338, "Assumes": 0.15831692877998726, "covariance": 0.15831692877998726}}, {"docstring": " For any candidate `f`, `HD(f)` is larger than or equal to the Hausdorff distance in the optimal coupling. This follows from the fact that HD of the optimal candidate is exactly the Hausdorff distance in the optimal coupling, although we only prove here the inequality we need.\n", "keywords": {"Hausdorff distance": 0.008281798431213695, "optimal coupling": 0.01141136336982172, "optimal candidate": 0.039127652414861956, "Hausdorff": 0.04934164401475377, "optimal": 0.055037402837669676, "coupling": 0.06757063168175145, "distance": 0.08255559108309582, "candidate": 0.11402647731306577, "larger": 0.14168192168383814, "equal": 0.14168192168383814, "fact": 0.3643918221199528, "prove": 0.3643918221199528, "inequality": 0.3643918221199528}}, {"docstring": "**Alias** of the forward direction of antisymm_rel_iff_eq`.\n", "keywords": {"direction of antisymm": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "rel": 0.04491197687864554, "iff": 0.04491197687864554, "antisymm": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " The adjoint is unique: a map `A` is the adjoint of `B` iff it satisfies `\u27eaA x, y\u27eb = \u27eax, B y\u27eb` for all `x` and `y`.\n", "keywords": {"iff it satisfies": 0.008779660572863317, "adjoint is unique": 0.03350820084292125, "adjoint": 0.07162298286637953, "unique": 0.09329120537733218, "map": 0.09329120537733218, "iff": 0.09329120537733218, "satisfies": 0.09329120537733218}}, {"docstring": "**Alias** of the forward direction of asymptotics.is_O_with_norm_right`.\n", "keywords": {"direction of asymptotics.is": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "norm": 0.04491197687864554, "asymptotics.is": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "`a \u2264 b` as natural numbers if and only if `a \u2264 b` in `fin n`.\n", "keywords": {"natural numbers": 0.02570861714399338, "fin": 0.09568045026443411, "natural": 0.15831692877998726, "numbers": 0.15831692877998726}}, {"docstring": "**Alias** of the reverse direction of order.pred_lt_pred_iff`.\n", "keywords": {"direction of order.pred": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "pred": 0.04491197687864554, "iff": 0.04491197687864554, "order.pred": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "If you're tempted to use this lemma \"in the wild\", you should probably carefully consider whether you've made a mistake in allowing two instances of `has_zero_morphisms` to exist at all.  See, particularly, the note on `zero_morphisms_of_zero_object` below.\n", "keywords": {"made a mistake": 0.03142433442165886, "mistake in allowing": 0.03142433442165886, "allowing two instances": 0.03142433442165886, "morphisms": 0.0417898923836747, "lemma": 0.1192008334966339, "wild": 0.1192008334966339, "tempted": 0.17454779110930135, "carefully": 0.17454779110930135, "made": 0.17454779110930135, "mistake": 0.17454779110930135, "allowing": 0.17454779110930135, "instances": 0.17454779110930135, "exist": 0.17454779110930135, "object": 0.20910206899588812, "note": 0.42343326428770406}}, {"docstring": " The p-adic norm of the entries of a nonzero Cauchy sequence of rationals is eventually constant.\n", "keywords": {"nonzero Cauchy sequence": 0.0009123104856698896, "nonzero Cauchy": 0.007743432063478832, "Cauchy sequence": 0.007743432063478832, "eventually constant": 0.00899321792126428, "p-adic norm": 0.013527995261974615, "sequence of rationals": 0.013527995261974615, "rationals is eventually": 0.013527995261974615, "Cauchy": 0.06650965107397505, "constant": 0.0771485953923296, "p-adic": 0.1155310835876123, "norm": 0.1155310835876123, "entries": 0.1155310835876123, "nonzero": 0.1155310835876123, "sequence": 0.1155310835876123, "rationals": 0.1155310835876123, "eventually": 0.1155310835876123}}, {"docstring": " The order of a formal power series is at least `n` if the `i`th coefficient is `0` for all `i < n`.\n", "keywords": {"formal power series": 0.0042542192213185686, "formal power": 0.02570861714399338, "power series": 0.02570861714399338, "order": 0.15831692877998726, "formal": 0.15831692877998726, "power": 0.15831692877998726, "series": 0.15831692877998726, "coefficient": 0.15831692877998726}}, {"docstring": "If `L/K` is an algebraic field extension, then the Krull topology on `L \u2243\u2090[K] L` is  totally disconnected.\n", "keywords": {"algebraic field extension": 0.0010606143890052174, "Krull topology": 0.007743432063478832, "field extension": 0.00899321792126428, "totally disconnected": 0.00899321792126428, "algebraic field": 0.013527995261974615, "Krull": 0.06650965107397505, "extension": 0.0771485953923296, "disconnected": 0.0771485953923296, "algebraic": 0.1155310835876123, "field": 0.1155310835876123, "topology": 0.1155310835876123, "totally": 0.1155310835876123}}, {"docstring": "0 is of finite order in any additive monoid.\n", "keywords": {"additive monoid": 0.04940384002065631, "finite order": 0.09700399286574239, "monoid": 0.15831692877998726, "finite": 0.29736558256021506, "order": 0.29736558256021506, "additive": 0.29736558256021506}}, {"docstring": "A module is Noetherian iff every nonempty set of submodules has a maximal submodule among them.\n", "keywords": {"module is Noetherian": 0.017391962598404163, "Noetherian iff": 0.017391962598404163, "iff every nonempty": 0.034987023778306175, "nonempty set": 0.034987023778306175, "maximal submodule": 0.051351238837580325, "Noetherian": 0.0929767246050301, "set of submodules": 0.11245662598947327, "module": 0.18385948854246909, "iff": 0.18385948854246909, "nonempty": 0.18385948854246909, "set": 0.18385948854246909, "maximal": 0.18385948854246909, "submodules": 0.26565442043121734, "submodule": 0.26565442043121734}}, {"docstring": "In an additive semigroup, the sum of add-left-regular elements is add-left.regular.\n", "keywords": {"additive semigroup": 0.04940384002065631, "semigroup": 0.15831692877998726, "elements": 0.15831692877998726, "additive": 0.29736558256021506, "sum": 0.29736558256021506}}, {"docstring": " Given any triangle in an orthocentric system, the fourth point is its orthocenter.\n", "keywords": {"orthocentric system": 0.04940384002065631, "fourth point": 0.09700399286574239, "system": 0.15831692877998726, "orthocenter": 0.15831692877998726, "triangle": 0.29736558256021506, "orthocentric": 0.29736558256021506, "fourth": 0.29736558256021506, "point": 0.29736558256021506}}, {"docstring": "A weaker version of `matrix.adjugate_adjugate` that uses `nontrivial`.\n", "keywords": {"matrix.adjugate": 0.04491197687864554, "adjugate": 0.04491197687864554, "nontrivial": 0.04491197687864554, "weaker version": 0.09700399286574239, "weaker": 0.29736558256021506, "version": 0.29736558256021506}}, {"docstring": "**Alias** of lt_of_mul_lt_mul_left'`.\n", "keywords": {"mul": 0.021352745740207107, "Alias": 0.035514607549195436, "left": 0.05706283858652404}}, {"docstring": " The property of being `C^n`, initially defined in terms of the Fr\u00e9chet derivative, can be reformulated in terms of the one-dimensional derivative.\n", "keywords": {"Fr\u00e9chet derivative": 0.007973496172308536, "initially defined": 0.013546417228156258, "defined in terms": 0.015245046152746466, "reformulated in terms": 0.015245046152746466, "one-dimensional derivative": 0.015245046152746466, "terms": 0.05332403764722467, "derivative": 0.05332403764722467, "Fr\u00e9chet": 0.07417313840262335, "initially": 0.09492398510093508, "property": 0.1408007092310104, "defined": 0.1408007092310104, "reformulated": 0.1408007092310104, "one-dimensional": 0.1408007092310104}}, {"docstring": " Prefer putting constants to the left of `X`.  This lemma is the loop-avoiding `simp` version of `polynomial.X_mul`.\n", "keywords": {"Prefer putting constants": 0.005401660759706154, "Prefer putting": 0.02541909697430123, "putting constants": 0.04188746641162499, "Prefer": 0.12363091320521931, "simp": 0.17881754828257995, "polynomial.X": 0.17881754828257995, "mul": 0.17881754828257995, "putting": 0.2005079697193566, "constants": 0.2005079697193566, "left": 0.2005079697193566, "loop-avoiding": 0.32883716426354986, "version": 0.32883716426354986, "lemma": 0.46553351027698087}}, {"docstring": "**Alias** of the forward direction of lipschitz_with_iff_norm_sub_le`.\n", "keywords": {"direction of lipschitz": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "norm": 0.04491197687864554, "lipschitz": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "On any vector space, multiplication by a scalar is a smooth operation.\n", "keywords": {"vector space": 0.015380821171891606, "smooth operation": 0.015380821171891606, "space": 0.09568045026443411, "multiplication": 0.09568045026443411, "operation": 0.09568045026443411, "vector": 0.15831692877998726, "scalar": 0.15831692877998726, "smooth": 0.15831692877998726}}, {"docstring": " Reformulation of well founded induction on ordinals as a lemma that works with the `induction` tactic, as in `induction i using ordinal.induction with i IH`.\n", "keywords": {"lemma that works": 0.02190347123841009, "founded induction": 0.03764278761872227, "tactic": 0.05815421818951193, "induction": 0.08259639922195942, "Reformulation": 0.09891140904350601, "induction on ordinals": 0.11287251425962766, "founded": 0.14640352592168662, "ordinals": 0.14640352592168662, "lemma": 0.14640352592168662, "works": 0.14640352592168662, "ordinal.induction": 0.14640352592168662}}, {"docstring": "Expand the square\n", "keywords": {"Expand the square": 0.02570861714399338, "Expand": 0.15831692877998726, "square": 0.15831692877998726}}, {"docstring": "`sinh` is injective, `\u2200 a b, sinh a = sinh b \u2192 a = b`.\n", "keywords": {"sinh": 0.052772309593329084, "injective": 0.11142476118001256}}, {"docstring": "Uses `right` co(ntra)variant.\n", "keywords": {"ntra": 0.04491197687864554, "variant": 0.04491197687864554}}, {"docstring": "Characterization of the elements of the uniformity in terms of the extended distance\n", "keywords": {"extended distance": 0.00899321792126428, "uniformity in terms": 0.013527995261974615, "Characterization": 0.0771485953923296, "distance": 0.0771485953923296, "elements": 0.1155310835876123, "uniformity": 0.1155310835876123, "terms": 0.1155310835876123, "extended": 0.1155310835876123}}, {"docstring": "Multiplicative congruence relations preserve inversion.\n", "keywords": {"Multiplicative congruence relations": 0.01655915082773619, "relations preserve inversion": 0.016559150827736194, "congruence relations preserve": 0.03339840940482845, "Multiplicative congruence": 0.04940384002065631, "preserve inversion": 0.04940384002065631, "congruence relations": 0.09700399286574239, "relations preserve": 0.09700399286574239, "Multiplicative": 0.15831692877998726, "inversion": 0.15831692877998726, "congruence": 0.29736558256021506, "relations": 0.29736558256021506, "preserve": 0.29736558256021506}}, {"docstring": " A set is preirreducible if and only if for every cover by two closed sets, it is contained in one of the two covering sets.\n", "keywords": {"closed sets": 0.04012804211656983, "covering sets": 0.04012804211656983, "set is preirreducible": 0.11895745595410895, "sets": 0.1286506280172293, "preirreducible": 0.1499406051001382, "cover": 0.1499406051001382, "closed": 0.1499406051001382, "contained": 0.1499406051001382, "covering": 0.1499406051001382, "set": 0.2573012560344586}}, {"docstring": "`quotient.mk` is a surjective function.\n", "keywords": {"quotient.mk": 0.04491197687864554, "surjective function": 0.04940384002065631, "function": 0.15831692877998726, "surjective": 0.29736558256021506}}, {"docstring": "Note that this is not true for `fintype.card n = 1` since `1 - 2 = 0` and not `-1`.\n", "keywords": {"Note": 0.0771485953923296, "fintype.card": 0.0771485953923296, "true": 0.1155310835876123}}, {"docstring": "The normal closure of s is the smallest normal subgroup containing s.\n", "keywords": {"smallest normal subgroup": 0.011587819648888317, "normal closure": 0.0562460611896591, "smallest normal": 0.0562460611896591, "normal subgroup": 0.0562460611896591, "normal": 0.13945519496053638, "closure": 0.19092478917347616, "smallest": 0.19092478917347616, "subgroup": 0.19092478917347616}}, {"docstring": " `p` is a Taylor series of `f` up to `n+1` if and only if `p.shift` is a Taylor series up to `n` for `p 1`, which is a derivative of `f`.\n", "keywords": {"Taylor series": 0.004937126134286941, "Taylor": 0.030880161776316133, "p.shift": 0.05899937629682816, "series": 0.07915846438999359, "derivative": 0.14832923246533666}}, {"docstring": "There exists at most one `floor_semiring` structure on a linear ordered semiring.\n", "keywords": {"linear ordered semiring": 0.005253288609899719, "ordered semiring": 0.02681089848262901, "linear ordered": 0.035715520099333646, "floor": 0.05393656033701752, "semiring": 0.07030442419566416, "structure": 0.11369206228658875, "exists": 0.18569843656348187, "linear": 0.18569843656348187, "ordered": 0.18569843656348187}}, {"docstring": "**Sum of a Geometric Series**\n", "keywords": {"Geometric Series": 0.012602360123953448, "Sum": 0.08596317751626563, "Series": 0.08596317751626563, "Geometric": 0.1447773057422032}}, {"docstring": "**Alias** of the reverse direction of smooth_partition_of_unity.is_subordinate_to_partition_of_unity`.\n", "keywords": {"direction of smooth": 0.009011535511097367, "reverse direction": 0.012578992104256836, "partition": 0.019053917256533312, "Alias": 0.03381806651421549, "unity.is": 0.0528063806271324, "subordinate": 0.0528063806271324, "unity": 0.0528063806271324, "smooth": 0.08012982629475915, "reverse": 0.11145728654016383, "direction": 0.11145728654016383}}, {"docstring": "`\u220f i, (f i + g i) = (\u220f i, f i) + \u2211 i, g i * (\u220f j < i, f j + g j) * (\u220f j > i, f j)`.\n", "keywords": {}}, {"docstring": "A sequentially complete pseudoemetric space is complete.\n", "keywords": {"sequentially complete pseudoemetric": 0.011587819648888317, "complete pseudoemetric space": 0.011587819648888317, "pseudoemetric space": 0.037831312533597124, "sequentially complete": 0.0562460611896591, "complete pseudoemetric": 0.0562460611896591, "space is complete": 0.12194096740933036, "complete": 0.13945519496053638, "sequentially": 0.19092478917347616, "pseudoemetric": 0.19092478917347616, "space": 0.19092478917347616}}, {"docstring": " The (open) thickening `thickening \u03b4 E` of a fixed subset `E` is an increasing function of the thickening radius `\u03b4`.\n", "keywords": {"fixed subset": 0.015035107645222728, "increasing function": 0.022401895700338237, "thickening radius": 0.02588141212622439, "open": 0.058865175910949544, "thickening": 0.08403798622869686, "subset": 0.10006769949327374, "radius": 0.10006769949327374, "fixed": 0.14802380456229533, "increasing": 0.14802380456229533, "function": 0.14802380456229533}}, {"docstring": " If `(a : \u2115)` is a root of `cyclotomic n (zmod p)`, where `p` is a prime, then `a` and `p` are coprime.\n", "keywords": {"cyclotomic": 0.06844581806138879, "zmod": 0.06844581806138879, "prime": 0.06844581806138879, "coprime": 0.06844581806138879, "root": 0.09568045026443411}}, {"docstring": "A version of `matrix.ext` that unfolds the `matrix.transpose`.\n", "keywords": {"matrix.ext": 0.04491197687864554, "matrix.transpose": 0.04491197687864554, "version": 0.29736558256021506, "unfolds": 0.29736558256021506}}, {"docstring": " There exists only one solution of an ODE \\(\\dot x=v(t, x)\\) in a set `s \u2286 \u211d \u00d7 E` with a given initial value provided that RHS is Lipschitz continuous in `x` within `s`, and we consider only solutions included in `s`.\n", "keywords": {"RHS is Lipschitz": 0.005139555586713697, "provided that RHS": 0.009492054493927761, "Lipschitz continuous": 0.009492054493927761, "initial value provided": 0.017595046402022366, "solutions included": 0.023251977563965413, "ODE": 0.05182746593078839, "RHS": 0.0715071718250839, "Lipschitz": 0.0715071718250839, "dot": 0.0883382645966668, "set": 0.0883382645966668, "exists": 0.13149453879183629, "initial": 0.13149453879183629, "provided": 0.13149453879183629, "continuous": 0.13149453879183629, "included": 0.13149453879183629, "solution": 0.17281028499382256, "solutions": 0.17281028499382256}}, {"docstring": "Symmetric of `filter.map\u2082_map_left_comm`.\n", "keywords": {"filter.map \u2082_ map": 0.02570861714399338, "left": 0.04491197687864554, "comm": 0.04491197687864554, "Symmetric": 0.15831692877998726, "filter.map": 0.15831692877998726, "map": 0.15831692877998726}}, {"docstring": "Gauss' summation formula\n", "keywords": {"Gauss' summation formula": 0.008321268142839145, "Gauss' summation": 0.04940384002065631, "summation formula": 0.04940384002065631, "Gauss'": 0.15831692877998726, "formula": 0.15831692877998726, "summation": 0.29736558256021506}}, {"docstring": " If `f : M \u2192 N` is a submultiplicative function, `f (x * y) \u2264 f x * f y` and `g i`, `i \u2208 s`, is a nonempty finite family of elements of `M`, then `f (\u220f i in s, g i) \u2264 \u220f i in s, f (g i)`.\n", "keywords": {"nonempty finite family": 0.00046709248130178364, "submultiplicative function": 0.004662480015418964, "nonempty finite": 0.005987543063120938, "finite family": 0.005987543063120938, "family of elements": 0.005987543063120938, "function": 0.060154590733539764, "submultiplicative": 0.0771485953923296, "nonempty": 0.0771485953923296, "finite": 0.0771485953923296, "family": 0.0771485953923296, "elements": 0.0771485953923296}}, {"docstring": "**Alias** of ssubset_trans`.\n", "keywords": {"Alias": 0.030396371632413578, "trans": 0.04491197687864554, "ssubset": 0.15831692877998726}}, {"docstring": "`(x, y) \u21a6 x ^ y` is strictly differentiable at `p : \u211d \u00d7 \u211d` such that `p.fst < 0`.\n", "keywords": {"strictly differentiable": 0.02570861714399338, "p.fst": 0.04491197687864554, "strictly": 0.15831692877998726, "differentiable": 0.15831692877998726}}, {"docstring": "A module is Noetherian iff every increasing chain of submodules stabilizes.\n", "keywords": {"module is Noetherian": 0.04498862876540802, "Noetherian iff": 0.04498862876540802, "submodules stabilizes": 0.04940384002065631, "iff every increasing": 0.09700399286574239, "increasing chain": 0.09700399286574239, "chain of submodules": 0.09700399286574239, "Noetherian": 0.1447773057422032, "stabilizes": 0.15831692877998726, "module": 0.29736558256021506, "iff": 0.29736558256021506, "increasing": 0.29736558256021506, "chain": 0.29736558256021506, "submodules": 0.29736558256021506}}, {"docstring": "Any element commutes with itself.\n", "keywords": {"element commutes": 0.09700399286574239, "element": 0.29736558256021506, "commutes": 0.29736558256021506}}, {"docstring": "Uses `right` co(ntra)variant.\n", "keywords": {"ntra": 0.04491197687864554, "variant": 0.04491197687864554}}, {"docstring": "If `X` is not a compact space, then the natural embedding `X \u2192 alexandroff X` has dense range.\n", "keywords": {"compact space": 0.00899321792126428, "natural embedding": 0.00899321792126428, "dense range": 0.00899321792126428, "space": 0.0771485953923296, "embedding": 0.0771485953923296, "alexandroff": 0.0771485953923296, "range": 0.0771485953923296, "compact": 0.1155310835876123, "natural": 0.1155310835876123, "dense": 0.1155310835876123}}, {"docstring": "Convex **Jensen's inequality**, `finset.center_mass` version.\n", "keywords": {"Jensen inequality": 0.013797198203993007, "Convex": 0.04491197687864554, "finset.center": 0.04491197687864554, "mass": 0.04491197687864554, "version": 0.04491197687864554, "Jensen": 0.08596317751626563, "inequality": 0.15831692877998726}}, {"docstring": "Shows how the entries of the sequence of the computed continued fraction can be obtained by the fractional parts of the stream of integer and fractional parts.\n", "keywords": {"computed continued fraction": 0.0010655604796610148, "fractional parts": 0.0046183653735704456, "computed continued": 0.01033815036603184, "continued fraction": 0.01033815036603184, "stream of integer": 0.01033815036603184, "integer and fractional": 0.024860333124838964, "fractional": 0.0478335509652962, "parts": 0.0478335509652962, "Shows": 0.07636756015111258, "entries": 0.10115516112043156, "sequence": 0.10115516112043156, "computed": 0.10115516112043156, "continued": 0.10115516112043156, "fraction": 0.10115516112043156, "obtained": 0.10115516112043156, "stream": 0.10115516112043156, "integer": 0.10115516112043156}}, {"docstring": "The orthocenter lies in the altitudes.\n", "keywords": {"orthocenter lies": 0.02570861714399338, "altitudes": 0.09568045026443411, "orthocenter": 0.15831692877998726, "lies": 0.15831692877998726}}, {"docstring": " An element a of a semigroup with a distributive negation divides the negation of an element b iff a divides b.\n", "keywords": {"distributive negation divides": 0.003289551374517148, "distributive negation": 0.019963611584944467, "negation divides": 0.02570861714399338, "element b iff": 0.0388160083175745, "iff a divides": 0.048002939596752045, "element": 0.06294116458067843, "negation": 0.07915846438999363, "divides": 0.07915846438999363, "divides the negation": 0.0988754652468552, "semigroup": 0.12363091320521931, "distributive": 0.12363091320521931, "iff": 0.12363091320521931}}, {"docstring": "If the angle \u2220ABC at a point is \u03c0, the angle \u2220BAC is 0.\n", "keywords": {"angle": 0.04408578671136769, "ABC": 0.064011398160278, "BAC": 0.064011398160278, "point": 0.19092478917347616}}, {"docstring": "Every topological vector space over \u211d is path connected.  Not an instance, because it creates enormous TC subproblems (turn on `pp.all`).\n", "keywords": {"topological vector space": 0.06672462416318604, "path connected": 0.07796891081290885, "topological vector": 0.1495930091794576, "vector space": 0.1495930091794576, "pp.all": 0.17881754828257995, "connected": 0.2005079697193566, "topological": 0.36073110501666333, "vector": 0.36073110501666333, "space": 0.36073110501666333, "path": 0.36073110501666333, "enormous TC subproblems": 0.4456055016437946, "instance": 0.46553351027698087, "subproblems": 0.46553351027698087, "turn": 0.46553351027698087, "creates": 0.6621399683957523, "enormous": 0.6621399683957523, "creates enormous": 0.7807198046783035}}, {"docstring": "**Alias** of `left.add_neg_of_neg_of_nonpos`.\n", "keywords": {"neg": 0.020602899695743707, "Alias": 0.03498516242744211, "left.add": 0.055708263664958506, "nonpos": 0.055708263664958506}}, {"docstring": " Two nonzero vectors `x y` in a real normed space are on the same ray if and only if the unit vectors `\u2225x\u2225\u207b\u00b9 \u2022 x` and `\u2225y\u2225\u207b\u00b9 \u2022 y` are equal.\n", "keywords": {"real normed space": 0.0028710480839241738, "nonzero vectors": 0.01490801077769086, "unit vectors": 0.01490801077769086, "real normed": 0.01986718810864864, "normed space": 0.01986718810864864, "vectors": 0.052621912705633725, "\u2225\u207b\u00b9": 0.052621912705633725, "equal": 0.09405136374190334, "nonzero": 0.13957138628574278, "real": 0.13957138628574278, "normed": 0.13957138628574278, "space": 0.13957138628574278, "ray": 0.13957138628574278, "unit": 0.13957138628574278}}, {"docstring": " `same_ray` is transitive unless the vector in the middle is zero and both other vectors are nonzero.\n", "keywords": {"ray": 0.054709255964732355, "vectors are nonzero": 0.07301337118426866, "nonzero": 0.11521656054299435, "transitive": 0.1879836817695587, "middle": 0.1879836817695587, "vector": 0.2733568418908229, "vectors": 0.2733568418908229}}, {"docstring": "If `\ud835\udd5c` is a nondiscrete normed field, any T2 topology on `\ud835\udd5c` which makes it a topological vector    space over itself (with the norm topology) is *equal* to the norm topology.\n", "keywords": {"nondiscrete normed field": 0.0022534802396232964, "topological vector space": 0.003377029788270189, "norm topology": 0.010922536113834905, "normed field": 0.014828404343786157, "nondiscrete normed": 0.022100112769122965, "topological vector": 0.022100112769122965, "vector space": 0.022100112769122965, "norm": 0.05699024958895423, "equal": 0.05843553361234116, "topology": 0.06251966189602619, "field": 0.09936908226344737, "nondiscrete": 0.14704508975047056, "normed": 0.14704508975047056, "makes": 0.14704508975047056, "topological": 0.14704508975047056, "vector": 0.14704508975047056, "space": 0.14704508975047056}}, {"docstring": "Additive congruence relations preserve subtraction.\n", "keywords": {"Additive congruence relations": 0.01655915082773619, "relations preserve subtraction": 0.016559150827736194, "congruence relations preserve": 0.03339840940482845, "Additive congruence": 0.04940384002065631, "preserve subtraction": 0.04940384002065631, "congruence relations": 0.09700399286574239, "relations preserve": 0.09700399286574239, "Additive": 0.15831692877998726, "subtraction": 0.15831692877998726, "congruence": 0.29736558256021506, "relations": 0.29736558256021506, "preserve": 0.29736558256021506}}, {"docstring": "  A property holds for all polynomials of positive `degree` with coefficients in a semiring `R` if it holds for * `a * X`, with `a \u2208 R`, * `p * X`, with `p \u2208 R[X]`, * `p + a`, with `a \u2208 R`, `p \u2208 R[X]`, with appropriate restrictions on each term.  See `nat_degree_ne_zero_induction_on` for a similar statement involving no explicit multiplication.\n", "keywords": {"property holds": 0.010876995620383748, "polynomials of positive": 0.010980637940604871, "similar statement involving": 0.039808982842201614, "degree": 0.043349444159006184, "holds": 0.04645462557701391, "explicit multiplication": 0.09011917240889285, "positive": 0.09378492886338423, "semiring": 0.09378492886338423, "term": 0.09378492886338423, "similar statement": 0.1083552221105857, "statement involving": 0.1083552221105857, "involving no explicit": 0.1083552221105857, "property": 0.11581149835382257, "polynomials": 0.11581149835382257, "coefficients": 0.11581149835382257, "restrictions": 0.11581149835382257, "nat": 0.21580243272668717, "induction": 0.21580243272668717, "multiplication": 0.2643977649251584, "similar": 0.3126694411723379}}, {"docstring": "If a sequence terminated at position `n`, it also terminated at `m \u2265 n `.\n", "keywords": {"terminated at position": 0.02683006950161641, "sequence terminated": 0.04437656514447953, "terminated": 0.10901343189444501, "position": 0.11984314898676356, "sequence": 0.19488865479360015}}, {"docstring": " A verbose specialization of `add_salem_spencer.le_add_roth_number`, sometimes convenient in practice.\n", "keywords": {"add": 0.018830794223096383, "convenient in practice": 0.020435055290363522, "verbose specialization": 0.033892441937102495, "salem": 0.052376395424323874, "spencer.le": 0.052376395424323874, "roth": 0.052376395424323874, "number": 0.052376395424323874, "practice": 0.11060549338282699, "verbose": 0.18105634546484617, "specialization": 0.18105634546484617, "convenient": 0.18105634546484617}}, {"docstring": "**Alias** of the reverse direction of strict_mono_on_comp_of_dual_iff`.\n", "keywords": {"direction of strict": 0.00899321792126428, "reverse direction": 0.013527995261974615, "Alias": 0.030396371632413578, "mono": 0.04491197687864554, "comp": 0.04491197687864554, "dual": 0.04491197687864554, "iff": 0.04491197687864554, "strict": 0.0771485953923296, "reverse": 0.1155310835876123, "direction": 0.1155310835876123}}, {"docstring": " If `f` is a nontrivial countably generated filter, then there exists a sequence that converges to `f`.\n", "keywords": {"countably generated filter": 0.0025258761156662004, "nontrivial countably generated": 0.0042542192213185686, "generated filter": 0.015380821171891606, "nontrivial countably": 0.02570861714399338, "countably generated": 0.02570861714399338, "exists a sequence": 0.02570861714399338, "sequence that converges": 0.02570861714399338, "filter": 0.09568045026443411, "nontrivial": 0.15831692877998726, "countably": 0.15831692877998726, "generated": 0.15831692877998726, "exists": 0.15831692877998726, "sequence": 0.15831692877998726, "converges": 0.15831692877998726}}, {"docstring": " If `f x = g x` for all `x \u2208 s` and `f`, `g` are continuous on `t`, `s \u2286 t \u2286 closure s`, then `f x = g x` for all `x \u2208 t`. See also `set.eq_on.closure`.\n", "keywords": {"closure": 0.07862947958994491, "continuous": 0.10028582371075691, "set.eq": 0.17881754828257995, "on.closure": 0.17881754828257995}}, {"docstring": "If every coefficient of a polynomial is in an ideal `I`, then so is the polynomial itself\n", "keywords": {"ideal": 0.11984314898676356, "polynomial": 0.14323823713631006, "coefficient": 0.19488865479360015}}, {"docstring": "Transfer `is_o` over a `local_homeomorph`.\n", "keywords": {"Transfer": 0.04491197687864554, "local": 0.04491197687864554, "homeomorph": 0.04491197687864554}}, {"docstring": "**Alias** of the reverse direction of asymptotics.is_O_with_norm_norm`.\n", "keywords": {"norm": 0.02006098734604785, "direction of asymptotics.is": 0.022138323509052035, "Alias": 0.034588515384495436, "reverse direction": 0.03663237450220032, "asymptotics.is": 0.11521656054299435, "reverse": 0.1879836817695587, "direction": 0.1879836817695587}}, {"docstring": "Constructor for `small \u03b1` from an explicit witness type and equivalence.\n", "keywords": {"explicit witness type": 0.03339840940482845, "type and equivalence": 0.04940384002065631, "explicit witness": 0.09700399286574239, "witness type": 0.09700399286574239, "Constructor": 0.15831692877998726, "small": 0.15831692877998726, "equivalence": 0.15831692877998726, "explicit": 0.29736558256021506, "witness": 0.29736558256021506, "type": 0.29736558256021506}}, {"docstring": " Conjugation acting on fixed element of the group is continuous when both `mul` and `inv` are continuous.\n", "keywords": {"Conjugation acting": 0.020744656539556924, "acting on fixed": 0.03439110359613085, "fixed element": 0.03439110359613085, "mul": 0.0528063806271324, "inv": 0.0528063806271324, "group is continuous": 0.11047974441476761, "Conjugation": 0.11145728654016383, "continuous": 0.1314201551237121, "acting": 0.1823394614884183, "fixed": 0.1823394614884183, "element": 0.1823394614884183, "group": 0.1823394614884183}}, {"docstring": "**Alias** of the forward direction of inv_lt_inv_iff`.\n", "keywords": {"Alias": 0.034588515384495436, "forward direction": 0.03663237450220032, "iff": 0.054709255964732355, "direction of inv": 0.06460392234869006, "inv": 0.07162298286637953, "forward": 0.1879836817695587, "direction": 0.1879836817695587}}, {"docstring": "An uncurried version of `finset.sum_product`\n", "keywords": {"finset.sum": 0.04491197687864554, "product": 0.04491197687864554, "uncurried version": 0.09700399286574239, "uncurried": 0.29736558256021506, "version": 0.29736558256021506}}, {"docstring": "If `f` and `g` are two torus integrable functions, then so is `f + g`.\n", "keywords": {"torus integrable functions": 0.0025258761156662004, "integrable functions": 0.015380821171891606, "torus integrable": 0.02570861714399338, "functions": 0.09568045026443411, "torus": 0.15831692877998726, "integrable": 0.15831692877998726}}, {"docstring": "Expressing the uniformity in terms of `edist`\n", "keywords": {"edist": 0.04491197687864554, "Expressing the uniformity": 0.04940384002065631, "uniformity in terms": 0.09700399286574239, "Expressing": 0.15831692877998726, "uniformity": 0.29736558256021506, "terms": 0.29736558256021506}}, {"docstring": "For the `I`-adic topology, the neighborhoods of zero has basis given by the powers of `I`.\n", "keywords": {"adic topology": 0.005987543063120938, "adic": 0.0771485953923296, "topology": 0.0771485953923296, "neighborhoods": 0.1155310835876123, "basis": 0.1155310835876123, "powers": 0.1155310835876123}}, {"docstring": "**Liouville's theorem**: a complex differentiable bounded function is a constant.\n", "keywords": {"complex differentiable bounded": 0.0042542192213185686, "differentiable bounded function": 0.0042542192213185686, "Liouville theorem": 0.005484890844946624, "complex differentiable": 0.02570861714399338, "differentiable bounded": 0.02570861714399338, "bounded function": 0.02570861714399338, "Liouville": 0.057012387690331526, "theorem": 0.09568045026443411, "constant": 0.09568045026443411, "complex": 0.15831692877998726, "differentiable": 0.15831692877998726, "bounded": 0.15831692877998726, "function": 0.15831692877998726}}, {"docstring": "The separable degree divides the degree.\n", "keywords": {"separable degree divides": 0.012476328642182708, "separable degree": 0.05913243875864445, "degree divides": 0.05913243875864445, "divides the degree": 0.12748048004056906, "degree": 0.14323823713631006, "separable": 0.19488865479360015, "divides": 0.19488865479360015}}, {"docstring": " The **Weinstein\u2013Aronszajn identity**. Note the `1` on the LHS is of shape m\u00d7m, while the `1` on the RHS is of shape n\u00d7n.\n", "keywords": {"Aronszajn identity": 0.005640088156109963, "Weinstein": 0.04154171593922837, "Aronszajn": 0.05405655871456151, "identity": 0.10375162798716249, "shape": 0.15623982925647517, "LHS": 0.1994344978371916, "RHS": 0.1994344978371916, "Note": 0.2867584112776268}}, {"docstring": "On an empty space, bounded continuous functions are at distance 0\n", "keywords": {"bounded continuous functions": 0.01655915082773619, "empty space": 0.04940384002065631, "bounded continuous": 0.04940384002065631, "continuous functions": 0.09700399286574239, "space": 0.15831692877998726, "bounded": 0.15831692877998726, "distance": 0.15831692877998726, "empty": 0.29736558256021506, "continuous": 0.29736558256021506, "functions": 0.29736558256021506}}, {"docstring": "Two ways of removing the constant coefficient of a power series are the same.\n", "keywords": {"removing the constant": 0.02570861714399338, "constant coefficient": 0.02570861714399338, "power series": 0.02570861714399338, "removing": 0.15831692877998726, "constant": 0.15831692877998726, "coefficient": 0.15831692877998726, "power": 0.15831692877998726, "series": 0.15831692877998726}}, {"docstring": "The right inverse of an isometry is an isometry.\n", "keywords": {"isometry": 0.11357121248292479, "inverse": 0.2005079697193566}}, {"docstring": " A one-dimensional isocrystal over an algebraically closed field admits an isomorphism to one of the standard (indexed by `m : \u2124`) one-dimensional isocrystals.\n", "keywords": {"algebraically closed field": 0.007493603982362141, "closed field admits": 0.007493603982362141, "algebraically closed": 0.03718843747800602, "closed field": 0.03718843747800602, "field admits": 0.03718843747800602, "admits an isomorphism": 0.03718843747800602, "one-dimensional isocrystal": 0.04579892781271444, "one-dimensional": 0.10463417723629108, "standard": 0.1161324896811994, "indexed": 0.1161324896811994, "algebraically": 0.18935428276389019, "closed": 0.18935428276389019, "field": 0.18935428276389019, "admits": 0.18935428276389019, "isomorphism": 0.18935428276389019, "isocrystal": 0.20926835447258216}}, {"docstring": "**Alias** of the forward direction of le_sub_iff_add_le'`.\n", "keywords": {"forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "add": 0.04491197687864554, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "`monge_point_weights_with_circumcenter` sums to 1.\n", "keywords": {"monge": 0.04491197687864554, "point": 0.04491197687864554, "weights": 0.04491197687864554, "circumcenter": 0.04491197687864554, "sums": 0.15831692877998726}}, {"docstring": "The non-commutative version of `finset.prod_mul_distrib`\n", "keywords": {"finset.prod": 0.04491197687864554, "mul": 0.04491197687864554, "distrib": 0.04491197687864554, "non-commutative version": 0.09700399286574239, "non-commutative": 0.29736558256021506, "version": 0.29736558256021506}}, {"docstring": "A monoid `M` is finitely generated if and only if `monoid_algebra R M` is of finite type.\n", "keywords": {"finite type": 0.021567786782198985, "finitely generated": 0.035715520099333646, "monoid": 0.07030442419566416, "algebra": 0.11369206228658875, "type": 0.11369206228658875, "finitely": 0.18569843656348187, "generated": 0.18569843656348187, "finite": 0.18569843656348187}}, {"docstring": " Given `c = line_map a b r`, `a < c`, the point `(c, f c)` is strictly above the segment `[(a, f a), (b, f b)]` if and only if `slope f a b < slope f a c`.\n", "keywords": {"slope": 0.026369104746389253, "line": 0.05393656033701752, "map": 0.07201108509564766, "point": 0.07201108509564766, "segment": 0.07201108509564766, "strictly": 0.09202664026077896}}, {"docstring": " An element of `s` that is not an element of `erase s a` must be `a`.\n", "keywords": {"element": 0.07915846438999363, "erase": 0.12363091320521931}}, {"docstring": "The trace of a linear map correspond to the contraction pairing under the isomorphism `End(M) \u2243 M* \u2297 M`\n", "keywords": {"linear map correspond": 0.0016012214736657916, "linear map": 0.013527995261974615, "map correspond": 0.013527995261974615, "contraction pairing": 0.013527995261974615, "End": 0.030396371632413578, "isomorphism": 0.0771485953923296, "trace": 0.1155310835876123, "linear": 0.1155310835876123, "map": 0.1155310835876123, "correspond": 0.1155310835876123, "contraction": 0.1155310835876123, "pairing": 0.1155310835876123}}, {"docstring": "For maps between vector spaces, `mfderiv_within` and `fderiv_within` coincide\n", "keywords": {"vector spaces": 0.015380821171891606, "maps between vector": 0.02570861714399338, "mfderiv": 0.04491197687864554, "fderiv": 0.04491197687864554, "coincide": 0.04491197687864554, "spaces": 0.09568045026443411, "maps": 0.15831692877998726, "vector": 0.15831692877998726}}, {"docstring": "**Alias** of the reverse direction of finset.card_pos`.\n", "keywords": {"direction of finset.card": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "pos": 0.04491197687864554, "finset.card": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "Symmetric of `filter.map\u2082_map_left_anticomm`.\n", "keywords": {"filter.map \u2082_ map": 0.02570861714399338, "left": 0.04491197687864554, "anticomm": 0.04491197687864554, "Symmetric": 0.15831692877998726, "filter.map": 0.15831692877998726, "map": 0.15831692877998726}}, {"docstring": "An integral element of an algebra is algebraic.\n", "keywords": {"algebra is algebraic": 0.015380821171891606, "integral element": 0.02570861714399338, "algebraic": 0.09568045026443411, "integral": 0.15831692877998726, "element": 0.15831692877998726, "algebra": 0.15831692877998726}}, {"docstring": "**Alias** of the forward direction of le_sub_iff_add_le`.\n", "keywords": {"forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "add": 0.04491197687864554, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "For `p \u2260 0, p \u2260 1, `padic_val_int p p` is 1.\n", "keywords": {"padic": 0.04491197687864554, "val": 0.04491197687864554, "int": 0.06844581806138879}}, {"docstring": "An explicit description of `\u03c7\u2088'` on integers / naturals\n", "keywords": {"naturals": 0.04491197687864554, "explicit description": 0.09700399286574239, "integers": 0.15831692877998726, "explicit": 0.29736558256021506, "description": 0.29736558256021506}}, {"docstring": "The sum of `f i` over `i \u2208 {a, b}`, `a \u2260 b`, is equal to `f a + f b`.\n", "keywords": {"sum": 0.1155310835876123, "equal": 0.1155310835876123}}, {"docstring": "A nontrivial monoid is not torsion-free if any nontrivial element has finite order.\n", "keywords": {"finite order": 0.021567786782198985, "element has finite": 0.035715520099333646, "nontrivial monoid": 0.05259515133015473, "nontrivial element": 0.05259515133015473, "order": 0.11369206228658875, "nontrivial": 0.13453835116331675, "monoid": 0.18569843656348187, "torsion-free": 0.18569843656348187, "element": 0.18569843656348187, "finite": 0.18569843656348187}}, {"docstring": "An exponential lower bound on the central binomial coefficient. This bound is of interest because it appears in [Tochiori's refinement of Erd\u0151s's proof of Bertrand's postulate](tochiori_bertrand).\n", "keywords": {"central binomial coefficient": 0.005203621711966651, "exponential lower bound": 0.01529094833556122, "binomial coefficient": 0.025765925599220623, "exponential lower": 0.0379332102597423, "central binomial": 0.0379332102597423, "lower bound": 0.07323006676183065, "refinement of Erd\u0151s": 0.12507741440580547, "Erd\u0151s proof": 0.12507741440580547, "Tochiori": 0.12593716512083575, "Tochiori refinement": 0.12809402601762696, "coefficient": 0.13139304727920198, "Bertrand postulate": 0.1439630913670634, "bound": 0.17846025462290366, "Bertrand": 0.18269270117908282, "exponential": 0.1911723571806515, "lower": 0.1911723571806515, "central": 0.1911723571806515, "binomial": 0.1911723571806515, "Erd\u0151s": 0.24660212844434662, "postulate": 0.3444196796358625}}, {"docstring": "Partial function extensionality\n", "keywords": {"Partial function extensionality": 0.008321268142839145, "Partial function": 0.04940384002065631, "function extensionality": 0.04940384002065631, "Partial": 0.15831692877998726, "extensionality": 0.15831692877998726, "function": 0.29736558256021506}}, {"docstring": "An inner product with a sum on the right.\n", "keywords": {"product": 0.29736558256021506, "sum": 0.29736558256021506}}, {"docstring": " An induction principle for finite types, analogous to `nat.rec`. It effectively says that every `fintype` is either `empty` or `option \u03b1`, up to an `equiv`.\n", "keywords": {"finite types": 0.02541909697430123, "induction principle": 0.04188746641162499, "principle for finite": 0.04188746641162499, "nat.rec": 0.05899937629682816, "types": 0.12363091320521931, "analogous": 0.12363091320521931, "fintype": 0.17881754828257995, "empty": 0.17881754828257995, "equiv": 0.17881754828257995, "induction": 0.2005079697193566, "principle": 0.2005079697193566, "finite": 0.2005079697193566, "option": 0.32883716426354986, "effectively": 0.46553351027698087}}, {"docstring": " In a complete space, the sum of a converging power series `p` admits `p` as a power series. This is not totally obvious as we need to check the convergence of the series.\n", "keywords": {"converging power series": 0.008530604632200806, "power series": 0.01968084264099485, "complete space": 0.029110754193504545, "converging power": 0.040972321779770206, "series": 0.06492458919832082, "admits": 0.08372133441717093, "power": 0.09721796382179462, "space": 0.13973862464452408, "complete": 0.20243000046541582, "sum": 0.20243000046541582, "converging": 0.20243000046541582, "totally obvious": 0.28122846499024384, "check the convergence": 0.28122846499024384, "totally": 0.46850728554503884, "obvious": 0.46850728554503884, "check": 0.46850728554503884, "convergence": 0.46850728554503884}}, {"docstring": "`E.mk_sol` indeed gives solutions to `E`.\n", "keywords": {"E.mk": 0.030396371632413578, "sol": 0.04491197687864554, "solutions": 0.29736558256021506}}, {"docstring": "First case of the inductive step: assuming that `\u2200 (s : finset \u03b9), s.nonempty \u2192 s \u2260 univ \u2192 s.card < (s.bUnion t).card` and that the statement of **Hall's Marriage Theorem** is true for all `\u03b9'` of cardinality \u2264 `n`, then it is true for `\u03b9` of cardinality `n + 1`.\n", "keywords": {"Hall Marriage Theorem": 0.0001425048025209993, "Hall Marriage": 0.0029757521502817735, "Marriage Theorem": 0.0029757521502817735, "inductive step": 0.009011535511097367, "cardinality": 0.029146961447667184, "true": 0.04092200269394482, "Hall": 0.04765068368560932, "Theorem": 0.04765068368560932, "s.nonempty": 0.0528063806271324, "univ": 0.0528063806271324, "s.card": 0.0528063806271324, "card": 0.0528063806271324, "Marriage": 0.06226402419328029, "step": 0.08012982629475915, "assuming": 0.08012982629475915, "finset": 0.08012982629475915, "s.bUnion": 0.08012982629475915, "case": 0.11145728654016383, "inductive": 0.11145728654016383, "statement": 0.11145728654016383}}, {"docstring": "A function is `C^(n + 1)` on a domain iff locally, it has a derivative which is `C^n`.\n", "keywords": {"domain iff locally": 0.0010606143890052174, "iff locally": 0.00899321792126428, "domain iff": 0.013527995261974615, "locally": 0.0771485953923296, "function": 0.1155310835876123, "domain": 0.1155310835876123, "iff": 0.1155310835876123, "derivative": 0.1155310835876123}}, {"docstring": "An alternative characterization of a maximal linearly independent family, quantifying over types (in the same universe as `M`) into which the indexing family injects.\n", "keywords": {"indexing family injects": 0.00547662532111528, "maximal linearly independent": 0.006265290071490465, "linearly independent family": 0.009214898386865239, "quantifying over types": 0.01207746271572421, "family injects": 0.028850471065862877, "alternative characterization": 0.033100028790236186, "maximal linearly": 0.033100028790236186, "linearly independent": 0.033100028790236186, "independent family": 0.04816043877099025, "indexing family": 0.04816043877099025, "quantifying": 0.10923981997294611, "types": 0.10923981997294611, "injects": 0.10923981997294611, "family": 0.12834816870701238, "alternative": 0.17899586521379354, "characterization": 0.17899586521379354, "maximal": 0.17899586521379354, "linearly": 0.17899586521379354, "independent": 0.17899586521379354, "universe": 0.17899586521379354}}, {"docstring": " A nonempty preorder with no maximal element is infinite. This is not an instance to avoid a cycle with `infinite \u03b1 \u2192 nontrivial \u03b1 \u2192 nonempty \u03b1`.\n", "keywords": {"maximal element": 0.03763407739923406, "nonempty preorder": 0.07269394577610493, "element is infinite": 0.15138186076528942, "nonempty": 0.17791964105827468, "infinite": 0.17791964105827468, "preorder": 0.19044453900858593, "maximal": 0.19044453900858593, "element": 0.19044453900858593, "instance to avoid": 0.25342300681454566, "avoid a cycle": 0.25342300681454566, "nontrivial": 0.34335610232496827, "instance": 0.4496495765069246, "avoid": 0.4496495765069246, "cycle": 0.4496495765069246}}, {"docstring": " To show a function into matrices is continuous it suffices to show the coefficients of the resulting matrix are continuous\n", "keywords": {"function into matrices": 0.037831312533597124, "resulting matrix": 0.037831312533597124, "suffices to show": 0.04212793185246166, "show a function": 0.09464369245534064, "show the coefficients": 0.09464369245534064, "show": 0.10586606907408062, "matrices is continuous": 0.12194096740933036, "matrix are continuous": 0.12194096740933036, "continuous it suffices": 0.12194096740933039, "continuous": 0.13945519496053638, "function": 0.19092478917347616, "matrices": 0.19092478917347616, "suffices": 0.19092478917347616, "coefficients": 0.19092478917347616, "resulting": 0.19092478917347616, "matrix": 0.19092478917347616}}, {"docstring": "**Alias** of mul_sub_left_distrib`.\n", "keywords": {"Alias": 0.030396371632413578, "left": 0.04491197687864554, "distrib": 0.04491197687864554, "mul": 0.15831692877998726}}, {"docstring": "**Alias** of the reverse direction of multiset.Ioc_eq_zero_iff`.\n", "keywords": {"direction of multiset.Ioc": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "multiset.Ioc": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " For `1 \u2264 p`, the `p`-th power of the sum of `f i` is bounded above by a constant times the sum of the `p`-th powers of `f i`. Version for sums over finite sets, with `\u211d\u22650`-valued functions.\n", "keywords": {"constant times": 0.03065453152238551, "times the sum": 0.0800373255202259, "power": 0.12144818777261854, "powers": 0.12144818777261854, "valued functions": 0.12598900653789646, "sum": 0.1307314304533728, "finite sets": 0.16340264042637093, "bounded": 0.1724609536080282, "constant": 0.1724609536080282, "times": 0.1724609536080282, "Version for sums": 0.24922610265698694, "sums": 0.2614628609067456, "sums over finite": 0.30264025641507236, "Version": 0.33450240956426514, "sets": 0.33450240956426514, "valued": 0.33450240956426514, "functions": 0.33450240956426514, "finite": 0.4198844336613173}}, {"docstring": " If `dist (f n) (f (n+1))` is bounded by `(C / 2) / 2^n`, then the distance from `f n` to the limit of `f` is bounded above by `C / 2^n`.\n", "keywords": {"bounded": 0.049557796192334434, "dist": 0.055708263664958506, "distance": 0.1036452554536235, "limit": 0.1036452554536235}}, {"docstring": " The Sup of a non-empty set is its least upper bound for a conditionally complete lattice with a top.\n", "keywords": {"conditionally complete lattice": 0.0016012214736657916, "non-empty set": 0.013527995261974615, "upper bound": 0.013527995261974615, "conditionally complete": 0.013527995261974615, "complete lattice": 0.013527995261974615, "top": 0.0771485953923296, "non-empty": 0.1155310835876123, "set": 0.1155310835876123, "upper": 0.1155310835876123, "bound": 0.1155310835876123, "conditionally": 0.1155310835876123, "complete": 0.1155310835876123, "lattice": 0.1155310835876123}}, {"docstring": "The sum of `f y` over `y \u2208 set.range g` equals the sum of `f (g i)` over all `i` provided that `g` is injective.\n", "keywords": {"equals the sum": 0.009800167631153751, "sum": 0.05201485183844375, "set.range": 0.09329120537733218, "equals": 0.09329120537733218, "provided": 0.09329120537733218, "injective": 0.09329120537733218}}, {"docstring": "A monoid is a submonoid of itself.\n", "keywords": {"monoid": 0.15831692877998726, "submonoid": 0.15831692877998726}}, {"docstring": " Shows that the sequence of numerators of the fractional parts of the stream is strictly antitone.\n", "keywords": {"strictly antitone": 0.00899321792126428, "sequence of numerators": 0.013527995261974615, "fractional parts": 0.013527995261974615, "stream is strictly": 0.013527995261974615, "Shows": 0.0771485953923296, "antitone": 0.0771485953923296, "sequence": 0.1155310835876123, "numerators": 0.1155310835876123, "fractional": 0.1155310835876123, "parts": 0.1155310835876123, "stream": 0.1155310835876123, "strictly": 0.1155310835876123}}, {"docstring": "See `lt_tsub_iff_left_of_le` for a weaker statement in a partial order.\n", "keywords": {"partial order": 0.015380821171891606, "weaker statement": 0.02570861714399338, "tsub": 0.04491197687864554, "iff": 0.04491197687864554, "left": 0.04491197687864554, "order": 0.09568045026443411, "weaker": 0.15831692877998726, "statement": 0.15831692877998726, "partial": 0.15831692877998726}}, {"docstring": " If `f` has a local max on `s` at `a` and `y` belongs to the positive tangent cone of `s` at `a`, then `f' y \u2264 0`.\n", "keywords": {"positive tangent cone": 0.0016012214736657916, "local max": 0.013527995261974615, "positive tangent": 0.013527995261974615, "tangent cone": 0.013527995261974615, "belongs": 0.0771485953923296, "local": 0.1155310835876123, "max": 0.1155310835876123, "positive": 0.1155310835876123, "tangent": 0.1155310835876123, "cone": 0.1155310835876123}}, {"docstring": "A variant of `range_coe`. Try to use `range_coe` if possible.  This version is useful when defining a new type that is defined as the subtype of something.  In that case, the coercion doesn't fire anymore.\n", "keywords": {"range": 0.05565317968655455, "coe": 0.05565317968655455, "variant": 0.2948627399921474, "case": 0.5932643863489403, "anymore": 0.5932643863489403, "version": 0.6790676153737297, "defining": 0.6790676153737297, "type": 0.6790676153737297, "defined": 0.6790676153737297, "subtype": 0.6790676153737297, "coercion": 0.72168614963271, "fire": 0.72168614963271, "fire anymore": 0.7487124382842474}}, {"docstring": "In a (nontrivial) complex Banach algebra, every element has nonempty spectrum.\n", "keywords": {"complex Banach algebra": 0.003875396501262652, "complex Banach": 0.023458380875189744, "Banach algebra": 0.023458380875189744, "nontrivial": 0.04491197687864554, "nonempty spectrum": 0.04940384002065631, "element has nonempty": 0.09700399286574239, "Banach": 0.1447773057422032, "complex": 0.15831692877998726, "algebra": 0.15831692877998726, "spectrum": 0.15831692877998726, "element": 0.29736558256021506, "nonempty": 0.29736558256021506}}, {"docstring": " The pigeonhole principle for finitely many pigeons counted by heads: given a function `f`, a finite sets `s` in its domain, a finite set `t` in its codomain, and a natural number `n` such that `card s \u2264 card t * n`, there exists `y \u2208 t` such that its preimage in `s` has no more than `n` elements. See also `finset.exists_card_fiber_lt_of_card_lt_mul` for a stronger statement.\n", "keywords": {"finite sets": 0.008569575190379186, "counted by heads": 0.01804326833945956, "natural number": 0.01804326833945956, "pigeonhole principle": 0.02369845272041318, "principle for finitely": 0.02369845272041318, "finitely many pigeons": 0.02369845272041318, "pigeons counted": 0.02369845272041318, "card": 0.04754886141462236, "finite": 0.05300883230255212, "sets": 0.08014477195872653, "set": 0.08014477195872653, "elements": 0.08387879343739738, "heads": 0.11648633975248622, "function": 0.11648633975248622, "domain": 0.11648633975248622, "codomain": 0.11648633975248622, "number": 0.11648633975248622, "exists": 0.11648633975248622, "stronger statement": 0.1371313983332116, "pigeonhole": 0.15215070618784204}}, {"docstring": "**Alias** of lt_of_lt_of_le`.\n", "keywords": {"Alias": 0.030396371632413578}}, {"docstring": " Given a point `x` in the convex hull of `s` and a point `y` in the convex hull of `t`, there exist points `x' \u2208 s` and `y' \u2208 t` at distance at least `dist x y`.\n", "keywords": {"convex hull": 0.00793286866762234, "exist points": 0.016526088633183042, "point": 0.052144225682252174, "convex": 0.06248589258587618, "hull": 0.06248589258587618, "points": 0.10428845136450435, "dist": 0.10570086230597084, "exist": 0.15588894939228992, "distance": 0.15588894939228992}}, {"docstring": "For any `y < 1` and any positive `x`, there exists `n : \u2115` with `y ^ n < x`.\n", "keywords": {"positive": 0.09568045026443411, "exists": 0.09568045026443411}}, {"docstring": "If `s` is bounded, then so is `s \u2229 t`\n", "keywords": {"bounded": 0.09568045026443411}}, {"docstring": "Twice the angle between a vector and a multiple of that vector is 0.\n", "keywords": {"vector": 0.14323823713631006, "angle": 0.19488865479360015, "multiple": 0.19488865479360015}}, {"docstring": "If `1 < p`, then `q p`, the smallest prime factor of `mersenne p`, is more than 2.\n", "keywords": {"smallest prime factor": 0.0016012214736657916, "smallest prime": 0.013527995261974615, "prime factor": 0.013527995261974615, "mersenne": 0.0771485953923296, "smallest": 0.1155310835876123, "prime": 0.1155310835876123, "factor": 0.1155310835876123}}, {"docstring": "Any map on a subsingleton is an isometry\n", "keywords": {"isometry": 0.15831692877998726, "map": 0.29736558256021506, "subsingleton": 0.29736558256021506}}, {"docstring": "The restriction of a symmetric bilinear form on a submodule is also symmetric.\n", "keywords": {"symmetric bilinear form": 0.010962043841203115, "bilinear form": 0.03663237450220032, "symmetric bilinear": 0.05417025203414716, "symmetric": 0.13667842094541144, "restriction": 0.1879836817695587, "bilinear": 0.1879836817695587, "form": 0.1879836817695587, "submodule": 0.1879836817695587}}, {"docstring": "The closure of the interval `(a, +\u221e)` is the closed interval `[a, +\u221e)`.\n", "keywords": {"closed interval": 0.016122598444234554, "interval": 0.055127829619426576, "closure": 0.14390902704051098, "closed": 0.14390902704051098}}, {"docstring": " The sine of the angle between two vectors, multiplied by the product of their norms.\n", "keywords": {"vectors": 0.0771485953923296, "multiplied": 0.0771485953923296, "norms": 0.0771485953923296, "sine": 0.1155310835876123, "angle": 0.1155310835876123, "product": 0.1155310835876123}}, {"docstring": "`cyclotomic n \u2124` is irreducible.\n", "keywords": {"cyclotomic": 0.15831692877998726, "irreducible": 0.15831692877998726}}, {"docstring": "For maps between vector spaces, `mdifferentiable` and `differentiable` coincide\n", "keywords": {"mdifferentiable": 0.04491197687864554, "coincide": 0.04491197687864554, "vector spaces": 0.04940384002065631, "maps between vector": 0.09700399286574239, "spaces": 0.15831692877998726, "maps": 0.29736558256021506, "vector": 0.29736558256021506}}, {"docstring": "Two formal power series are equal if all their coefficients are equal.\n", "keywords": {"formal power series": 0.007321883374053632, "formal power": 0.03663237450220032, "power series": 0.03663237450220032, "series are equal": 0.04051498248759491, "coefficients are equal": 0.04051498248759491, "equal": 0.10356599227702172, "formal": 0.1879836817695587, "power": 0.1879836817695587, "series": 0.1879836817695587, "coefficients": 0.1879836817695587}}, {"docstring": " Induction principle for `finset`s in any type from which a given function `f` maps to a linearly ordered type : a predicate is true on all `s : finset \u03b1` provided that:  * it is true on the empty `finset`, * for every `s : finset \u03b1` and an element `a` such that for elements of `s` denoted by `x` we have   `f x \u2264 f a`, `p s` implies `p (insert a s)`.\n", "keywords": {"linearly ordered type": 0.0012960336931488938, "predicate is true": 0.008248126769963553, "Induction principle": 0.008311201570845615, "linearly ordered": 0.01061889620430199, "ordered type": 0.012384607646844509, "finset": 0.013827888776117524, "true": 0.03990358609289688, "type": 0.0596706463974447, "implies": 0.06036637872351746, "Induction": 0.08041244043386897, "function": 0.08041244043386897, "maps": 0.08041244043386897, "provided": 0.08041244043386897, "empty": 0.08041244043386897, "denoted": 0.08041244043386897, "insert": 0.08041244043386897, "principle": 0.10250521968741812, "linearly": 0.10250521968741812, "ordered": 0.10250521968741812, "predicate": 0.10250521968741812}}, {"docstring": " A more general version of `finprod_mem_union` that requires `s \u2229 mul_support f` and `t \u2229 mul_support f` rather than `s` and `t` to be finite.\n", "keywords": {"mul": 0.020312026404878777, "general version": 0.03718843747800602, "support": 0.043493458706749734, "finprod": 0.055174169687121036, "mem": 0.055174169687121036, "union": 0.055174169687121036, "requires": 0.1161324896811994, "finite": 0.1161324896811994, "general": 0.18935428276389019, "version": 0.18935428276389019}}, {"docstring": "If a function `f` is `periodic` with positive period `c`, then for all `x` there exists some  `y \u2208 Ico 0 c` such that `f x = f y`.\n", "keywords": {"positive period": 0.00899321792126428, "Ico": 0.030396371632413578, "periodic": 0.04491197687864554, "function": 0.0771485953923296, "period": 0.0771485953923296, "positive": 0.1155310835876123, "exists": 0.1155310835876123}}, {"docstring": "If the angle between two vectors is 0, the inner product equals the product of the norms.\n", "keywords": {"product equals": 0.016781270735569963, "equals the product": 0.04095532377320458, "product": 0.07162298286637953, "norms": 0.08293109455034965, "angle": 0.11521656054299435, "vectors": 0.11521656054299435, "equals": 0.11521656054299435}}, {"docstring": "Premature version of the lemma. Prefer using `left_invariant` instead.\n", "keywords": {"Premature version": 0.07796891081290885, "left": 0.17881754828257995, "invariant": 0.17881754828257995, "Premature": 0.2005079697193566, "lemma": 0.2005079697193566, "version": 0.36073110501666333, "Prefer": 0.46553351027698087}}, {"docstring": "Rational numbers are dense in a linear ordered archimedean field.\n", "keywords": {"ordered archimedean field": 0.016559150827736194, "linear ordered archimedean": 0.03339840940482845, "Rational numbers": 0.04940384002065631, "archimedean field": 0.04940384002065631, "numbers are dense": 0.09700399286574239, "linear ordered": 0.09700399286574239, "ordered archimedean": 0.09700399286574239, "Rational": 0.15831692877998726, "field": 0.15831692877998726, "numbers": 0.29736558256021506, "dense": 0.29736558256021506, "linear": 0.29736558256021506, "ordered": 0.29736558256021506, "archimedean": 0.29736558256021506}}, {"docstring": " If a vector `v\u2081` is on the same ray as a nonzero vector `v\u2082`, then it is equal to `c \u2022 v\u2082` for some nonnegative `c`.\n", "keywords": {"nonzero vector": 0.014618695703961359, "vector": 0.05201485183844375, "nonnegative": 0.09329120537733218, "ray": 0.1384995633470844, "nonzero": 0.1384995633470844, "equal": 0.1384995633470844}}, {"docstring": "Replacing a set by its closure does not change the Hausdorff distance.\n", "keywords": {"Hausdorff distance": 0.023458380875189744, "change the Hausdorff": 0.04498862876540802, "Replacing a set": 0.04940384002065631, "Hausdorff": 0.1447773057422032, "Replacing": 0.15831692877998726, "distance": 0.15831692877998726, "set": 0.29736558256021506, "closure": 0.29736558256021506, "change": 0.29736558256021506}}, {"docstring": "The midpoint of the segment AB is the same distance from A as it is from B.\n", "keywords": {"midpoint": 0.1155310835876123, "segment": 0.1155310835876123, "distance": 0.1155310835876123}}, {"docstring": "If `v` is a valuation on a division ring then `v(x) = 0` iff `x = 0`.\n", "keywords": {"division ring": 0.02570861714399338, "iff": 0.04491197687864554, "valuation": 0.15831692877998726, "division": 0.15831692877998726, "ring": 0.15831692877998726}}, {"docstring": "A ray does not equal its own negation.\n", "keywords": {"negation": 0.15831692877998726, "ray": 0.29736558256021506, "equal": 0.29736558256021506}}, {"docstring": "`\u03c7\u2088'` takes values in `{0, 1, -1}`\n", "keywords": {}}, {"docstring": "  The `i + j`-th element of a list coincides with the `j`-th element of the list obtained by dropping the first `i` elements. Version designed to rewrite from the small list to the big list.\n", "keywords": {"obtained by dropping": 0.025352899646504754, "list coincides": 0.053319012144560876, "list obtained": 0.053319012144560876, "element": 0.055690026416501996, "list": 0.0804794580748145, "elements": 0.11138005283300399, "small list": 0.1449268892918279, "big list": 0.1449268892918279, "Version designed": 0.14994647962112853, "coincides": 0.15724510567942473, "obtained": 0.15724510567942473, "dropping": 0.15724510567942473, "designed to rewrite": 0.18289336848462526, "Version": 0.3316137006460071, "designed": 0.39321147279387364, "rewrite": 0.39321147279387364, "small": 0.39321147279387364, "big": 0.39321147279387364}}, {"docstring": "`{a}.min' _` is `a`.\n", "keywords": {"min": 0.04491197687864554}}, {"docstring": " If `x^n`, `n > 0`, is integer and is not the `n`-th power of an integer, then `x` is irrational.\n", "keywords": {"irrational": 0.09713402394201612, "integer": 0.09770854302279938, "power": 0.14390902704051098}}, {"docstring": "A function is a conformal map if and only if its differential is a conformal linear map\n", "keywords": {"conformal linear map": 0.004847808993396671, "conformal linear": 0.023068286813727114, "linear map": 0.029938721750981816, "conformal map": 0.03176191027644991, "conformal": 0.07726414307411156, "map": 0.09960683487150054, "function": 0.14591593823007556, "differential": 0.14591593823007556, "linear": 0.14591593823007556}}, {"docstring": "Cauchy's Mean Value Theorem, extended `deriv` version.\n", "keywords": {"extended": 0.04491197687864554, "deriv": 0.04491197687864554, "version": 0.04491197687864554, "Theorem": 0.08596317751626563, "Cauchy": 0.15831692877998726}}, {"docstring": "To check convex independence, one only has to check finsets thanks to Carath\u00e9odory's theorem.\n", "keywords": {"check convex independence": 0.0018450831366575615, "Carath\u00e9odory theorem": 0.0067655633397559894, "convex independence": 0.012741693123860753, "check convex": 0.019600059420660194, "check finsets": 0.019600059420660194, "check": 0.07030442419566416, "Carath\u00e9odory": 0.07302339921823223, "independence": 0.09202664026077896, "theorem": 0.09202664026077896, "convex": 0.1367145963576765, "finsets": 0.1367145963576765}}, {"docstring": "Under the coercion from `\u2124` to `\u211d`, inverse images of compact sets are finite.\n", "keywords": {"inverse images": 0.04940384002065631, "sets are finite": 0.04940384002065631, "images of compact": 0.09700399286574239, "compact sets": 0.09700399286574239, "inverse": 0.15831692877998726, "finite": 0.15831692877998726, "coercion": 0.29736558256021506, "images": 0.29736558256021506, "compact": 0.29736558256021506, "sets": 0.29736558256021506}}, {"docstring": "For finite index types, the `subgroup.pi` is generated by the embeddings of the additive groups.\n", "keywords": {"finite index types": 0.0010606143890052174, "index types": 0.00899321792126428, "additive groups": 0.00899321792126428, "finite index": 0.013527995261974615, "subgroup.pi": 0.04491197687864554, "types": 0.0771485953923296, "groups": 0.0771485953923296, "finite": 0.1155310835876123, "index": 0.1155310835876123, "generated": 0.1155310835876123, "embeddings": 0.1155310835876123, "additive": 0.1155310835876123}}, {"docstring": "**Alias** of the reverse direction of cont_mdiff_iff_cont_diff`.\n", "keywords": {"Alias": 0.03402676245250578, "reverse direction": 0.034987023778306175, "mdiff": 0.05331699930238388, "iff": 0.05331699930238388, "diff": 0.05331699930238388, "direction of cont": 0.06131733975553988, "cont": 0.069255433448279, "reverse": 0.18385948854246909, "direction": 0.18385948854246909}}, {"docstring": " On a set with unique derivatives, a `C^n` function has derivatives up to `n` which are continuous.\n", "keywords": {"set with unique": 0.03663237450220032, "unique derivatives": 0.05417025203414716, "function has derivatives": 0.07301337118426868, "function": 0.11521656054299435, "continuous": 0.11521656054299435, "derivatives": 0.13667842094541144, "set": 0.1879836817695587, "unique": 0.1879836817695587}}, {"docstring": "A compact set in an emetric space is separable, i.e., it is the closure of a countable set.\n", "keywords": {"space is separable": 0.021114872146320036, "emetric space": 0.03498702377830618, "compact set": 0.05135123883758033, "countable set": 0.05135123883758033, "separable": 0.11246769819744629, "set": 0.13282721021560867, "compact": 0.1838594885424691, "emetric": 0.1838594885424691, "space": 0.1838594885424691, "closure": 0.1838594885424691, "countable": 0.1838594885424691}}, {"docstring": "Two submonoids are equal if they have the same elements.\n", "keywords": {"submonoids are equal": 0.09700399286574239, "elements": 0.15831692877998726, "submonoids": 0.29736558256021506, "equal": 0.29736558256021506}}, {"docstring": " Every basis vector from `adjust_to_orientation` is either that from the original basis or its negation.\n", "keywords": {"basis vector": 0.05259515133015473, "original basis": 0.05259515133015473, "adjust": 0.05393656033701752, "orientation": 0.05393656033701752, "negation": 0.11369206228658875, "basis": 0.13453835116331675, "vector": 0.18569843656348187, "original": 0.18569843656348187}}, {"docstring": "A list with negative sum must have positive length.\n", "keywords": {"positive length": 0.04940384002065631, "list with negative": 0.09700399286574239, "negative sum": 0.09700399286574239, "length": 0.15831692877998726, "list": 0.29736558256021506, "negative": 0.29736558256021506, "sum": 0.29736558256021506, "positive": 0.29736558256021506}}, {"docstring": "The operator norm of the projection is `0` if the subspace is dense.\n", "keywords": {"subspace is dense": 0.00899321792126428, "operator norm": 0.013527995261974615, "dense": 0.0771485953923296, "operator": 0.1155310835876123, "norm": 0.1155310835876123, "projection": 0.1155310835876123, "subspace": 0.1155310835876123}}, {"docstring": " If the distance between `s n` and `s m`, `n, m \u2265 N` is bounded above by `b N` and `b` converges to zero, then `s` is a Cauchy sequence.\n", "keywords": {"Cauchy sequence": 0.003917546799371481, "Cauchy": 0.057012387690331526, "converges": 0.06844581806138879, "sequence": 0.06844581806138879, "distance": 0.09568045026443411, "bounded": 0.09568045026443411}}, {"docstring": " For `0 \u2264 x`, the only problematic case in the equality `x ^ y * x ^ z = x ^ (y + z)` is for `x = 0` and `y + z = 0`, where the right hand side is `1` while the left hand side can vanish. The inequality is always true, though, and given in this lemma.\n", "keywords": {"left hand side": 0.0021552124648381173, "hand side": 0.007421773396209464, "left hand": 0.017321357996471262, "problematic case": 0.020221027977736575, "side can vanish": 0.032775893131073305, "hand": 0.060469906910671535, "side": 0.060469906910671535, "equality": 0.10744665946764294, "vanish": 0.10744665946764294, "problematic": 0.14078438231419763, "case": 0.14078438231419763, "left": 0.14078438231419763, "true": 0.2948270607118151, "lemma": 0.2948270607118151, "inequality": 0.3626795871726954}}, {"docstring": " If `f : M \u2192 N` is a subadditive function, `f (x + y) \u2264 f x + f y` and `g i`, `i \u2208 s`, is a nonempty finite family of elements of `M`, then `f (\u2211 i in s, g i) \u2264 \u2211 i in s, f (g i)`.\n", "keywords": {"nonempty finite family": 0.00046709248130178364, "subadditive function": 0.004662480015418964, "nonempty finite": 0.005987543063120938, "finite family": 0.005987543063120938, "family of elements": 0.005987543063120938, "function": 0.060154590733539764, "subadditive": 0.0771485953923296, "nonempty": 0.0771485953923296, "finite": 0.0771485953923296, "family": 0.0771485953923296, "elements": 0.0771485953923296}}, {"docstring": "`factors` can be constructed inductively by extracting `min_fac`, for sufficiently large `n`.\n", "keywords": {"factors": 0.04491197687864554, "min": 0.04491197687864554, "fac": 0.04491197687864554, "inductively by extracting": 0.04940384002065631, "sufficiently large": 0.04940384002065631, "constructed inductively": 0.09700399286574239, "extracting": 0.15831692877998726, "large": 0.15831692877998726, "constructed": 0.29736558256021506, "inductively": 0.29736558256021506, "sufficiently": 0.29736558256021506}}, {"docstring": "If `s` has a greatest element, then it is bounded above.\n", "keywords": {"greatest element": 0.04940384002065631, "element": 0.15831692877998726, "greatest": 0.29736558256021506, "bounded": 0.29736558256021506}}, {"docstring": "The strong pigeonhole principle for finitely many pigeons and pigeonholes. There is a pigeonhole with at least as many pigeons as the ceiling of the average number of pigeons across all pigeonholes. (\"The maximum is at least the mean\" specialized to integers.)  More formally, given a function `f` between finite types `\u03b1` and `\u03b2` and a number `n` such that `card \u03b2 * n < card \u03b1`, there exists an element `y : \u03b2` such that its preimage has more than `n` elements.\n", "keywords": {"strong pigeonhole principle": 0.021206915681202622, "principle for finitely": 0.04573062182022199, "strong pigeonhole": 0.09119152065343179, "pigeonhole principle": 0.09119152065343179, "pigeons": 0.10954666513053636, "finitely many pigeons": 0.1214832654864876, "pigeonhole": 0.19981580591119055, "strong": 0.2091190708501056, "principle": 0.2091190708501056, "finitely": 0.2091190708501056, "card": 0.24986675149227014, "number": 0.26256575446357217, "specialized to integers": 0.3257772530617831, "average number": 0.33580265934066017, "ceiling": 0.47871137790847995, "average": 0.47871137790847995, "specialized": 0.49570705148314725, "integers": 0.49570705148314725, "element": 0.4997335029845403, "elements": 0.4997335029845403}}, {"docstring": " If `e` is an `order_iso` between `fin n` and `fin m`, then `n = m` and `e` is the identity map. In this lemma we state that for each `i : fin n` we have `(e i : \u2115) = (i : \u2115)`.\n", "keywords": {"identity map": 0.03039006157391374, "fin": 0.06651796501339545, "order": 0.08567857901209482, "iso": 0.08567857901209482, "map": 0.14280134968233082, "identity": 0.20653687739949222, "lemma we state": 0.291045330626253, "lemma": 0.4747987559899346, "state": 0.4747987559899346}}, {"docstring": "Assumes left covariance. The lemma assuming right covariance is `right.add_pos`.\n", "keywords": {"Assumes left covariance": 0.021279743632738882, "Assumes left": 0.038712704770480444, "left covariance": 0.1273706910391025, "Assumes": 0.1531727145735673, "right.add": 0.21826204231687923, "pos": 0.21826204231687923, "covariance": 0.23216465691767033, "left": 0.2433193585127945, "lemma assuming": 0.38571507274593425, "lemma": 0.5275897320195264, "assuming": 0.5275897320195264, "assuming right covariance": 0.5846700711531686}}, {"docstring": "An `add_monoid` is an `add_submonoid` of itself.\n", "keywords": {"add": 0.021352745740207107, "monoid": 0.05706283858652404, "submonoid": 0.05706283858652404}}, {"docstring": " If a function is integrable at `\ud835\udcdd[s] x` for each point `x` of a compact set `s`, then it is integrable on `s`.\n", "keywords": {"compact set": 0.013089923375762187, "function is integrable": 0.020241076619814977, "integrable": 0.07162298286637953, "point": 0.09329120537733218, "set": 0.09329120537733218, "function": 0.1384995633470844, "compact": 0.1384995633470844}}, {"docstring": "`option.map f` is injective if `f` is injective.\n", "keywords": {"injective": 0.11357121248292479, "option.map": 0.12363091320521931}}, {"docstring": "The function `exp(x) / x ^ s` tends to `+\u221e` at `+\u221e`, for any real number `s`.\n", "keywords": {"real number": 0.015380821171891606, "exp": 0.04491197687864554, "function": 0.09568045026443411, "number": 0.09568045026443411, "real": 0.15831692877998726}}, {"docstring": "The set of fixed points of the conjugation action of `G` on itself is the center of `G`.\n", "keywords": {"set of fixed": 0.009239332327148086, "fixed points": 0.009239332327148086, "conjugation action": 0.009239332327148086, "set": 0.09568045026443411, "fixed": 0.09568045026443411, "points": 0.09568045026443411, "conjugation": 0.09568045026443411, "action": 0.09568045026443411, "center": 0.09568045026443411}}, {"docstring": "Moving to the opposite additive commutative monoid commutes with summing.\n", "keywords": {"opposite additive commutative": 0.03339840940482845, "additive commutative monoid": 0.03339840940482845, "commutative monoid commutes": 0.03339840940482845, "commutes with summing": 0.04940384002065631, "opposite additive": 0.09700399286574239, "additive commutative": 0.09700399286574239, "commutative monoid": 0.09700399286574239, "monoid commutes": 0.09700399286574239, "Moving": 0.15831692877998726, "summing": 0.15831692877998726, "opposite": 0.29736558256021506, "additive": 0.29736558256021506, "commutative": 0.29736558256021506, "monoid": 0.29736558256021506, "commutes": 0.29736558256021506}}, {"docstring": " If a function is continuous within `s` at `x`, then it tends to `f x` within `s` by definition. We register this fact for use with the dot notation, especially to use `tendsto.comp` as `continuous_within_at.comp` will have a different meaning.\n", "keywords": {"definition": 0.12102666257279926, "function is continuous": 0.13359747832016683, "dot notation": 0.16056327145649474, "continuous": 0.16781817241196398, "function": 0.17705097305926945, "tendsto.comp": 0.21197353881683212, "at.comp": 0.21197353881683212, "register this fact": 0.22382557528037253, "notation": 0.32350596561652023, "meaning": 0.32350596561652023, "register": 0.4276565147820152, "fact": 0.4276565147820152, "dot": 0.4276565147820152}}, {"docstring": "See also `finset.sup_product_left`.\n", "keywords": {"finset.sup": 0.04491197687864554, "product": 0.04491197687864554, "left": 0.04491197687864554}}, {"docstring": "**Alias** of the reverse direction of strict_anti_to_dual_comp_iff`.\n", "keywords": {"direction of strict": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "anti": 0.04491197687864554, "dual": 0.04491197687864554, "comp": 0.04491197687864554, "iff": 0.04491197687864554, "strict": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "**Alias** of le_of_le_of_eq'`.\n", "keywords": {"Alias": 0.030396371632413578}}, {"docstring": "A sum over `powerset s` is equal to the double sum over sets of subsets of `s` with `card s = k`, for `k = 1, ..., card s`\n", "keywords": {"double sum": 0.014179954458918205, "sum over sets": 0.014179954458918205, "sets of subsets": 0.014218983619329623, "card": 0.0319727021571942, "sum": 0.05904204734277306, "powerset": 0.08531189896378533, "equal": 0.11840455484321102, "double": 0.11840455484321102, "sets": 0.11840455484321102, "subsets": 0.11840455484321102}}, {"docstring": "**Alias** of filter.tendsto_at_top_at_top_iff_of_monotone`.\n", "keywords": {"top": 0.02006098734604785, "Alias": 0.034588515384495436, "iff": 0.054709255964732355, "monotone": 0.054709255964732355, "filter.tendsto": 0.11521656054299435}}, {"docstring": "Bernoulli's inequality for `n : \u2115`, `-2 \u2264 a`.\n", "keywords": {"Bernoulli inequality": 0.04940384002065631, "Bernoulli": 0.15831692877998726, "inequality": 0.29736558256021506}}, {"docstring": "**Alias** of the forward direction of left.one_le_inv_iff`.\n", "keywords": {"direction of left.one": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "inv": 0.04491197687864554, "iff": 0.04491197687864554, "left.one": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "If an additive indicator function is not equal to `0` at a point, then that point is in the set.\n", "keywords": {"additive indicator function": 0.007041919398291632, "additive indicator": 0.035715520099333646, "indicator function": 0.035715520099333646, "set": 0.11369206228658875, "point": 0.13453835116331675, "additive": 0.18569843656348187, "indicator": 0.18569843656348187, "function": 0.18569843656348187, "equal": 0.18569843656348187}}, {"docstring": " Two multiplicative functions `f` and `g` are equal if and only if they agree on prime powers\n", "keywords": {"multiplicative functions": 0.015380821171891606, "prime powers": 0.015380821171891606, "agree on prime": 0.02570861714399338, "functions": 0.09568045026443411, "powers": 0.09568045026443411, "multiplicative": 0.15831692877998726, "equal": 0.15831692877998726, "agree": 0.15831692877998726, "prime": 0.15831692877998726}}, {"docstring": " See also `filter.tendsto.at_bot_mul_neg_const` for a version of this lemma for `linear_ordered_field`s which does not require the `archimedean` assumption.\n", "keywords": {"bot": 0.04491197687864554, "mul": 0.04491197687864554, "neg": 0.04491197687864554, "const": 0.04491197687864554, "linear": 0.04491197687864554, "ordered": 0.04491197687864554, "field": 0.04491197687864554, "archimedean": 0.04491197687864554, "assumption": 0.04491197687864554, "version": 0.15831692877998726, "lemma": 0.15831692877998726, "require": 0.15831692877998726}}, {"docstring": " The convergents coincide in the expected way at the squashed position if the partial denominator at the squashed position is not zero.\n", "keywords": {"squashed position": 0.0040042757664383285, "convergents coincide": 0.011092580781904698, "partial denominator": 0.011092580781904698, "squashed": 0.03946455954222964, "position": 0.05032948733097156, "convergents": 0.10474199420438675, "coincide": 0.10474199420438675, "expected": 0.10474199420438675, "partial": 0.10474199420438675, "denominator": 0.10474199420438675}}, {"docstring": "A quadratic has roots if and only if its discriminant equals some square.\n", "keywords": {"equals some square": 0.015380821171891606, "quadratic has roots": 0.02570861714399338, "discriminant equals": 0.02570861714399338, "square": 0.09568045026443411, "quadratic": 0.15831692877998726, "roots": 0.15831692877998726, "discriminant": 0.15831692877998726, "equals": 0.15831692877998726}}, {"docstring": "Gives a recurrence to compute the `n + 1`th value of the sequence of integer and fractional parts of a value in case of termination.\n", "keywords": {"case of termination": 0.0065920978564317735, "recurrence to compute": 0.009239332327148086, "sequence of integer": 0.009239332327148086, "integer and fractional": 0.009239332327148086, "fractional parts": 0.009239332327148086, "termination": 0.06844581806138879, "recurrence": 0.09568045026443411, "compute": 0.09568045026443411, "sequence": 0.09568045026443411, "integer": 0.09568045026443411, "fractional": 0.09568045026443411, "parts": 0.09568045026443411, "case": 0.09568045026443411}}, {"docstring": "Composing two associative operations of `f : \u03b1 \u2192 \u03b1 \u2192 \u03b1` on the left is equal to an associative operation on the left.\n", "keywords": {"associative operations": 0.026690841538117772, "Composing two associative": 0.040490549336971424, "left is equal": 0.05863499612301378, "associative": 0.08061786523087176, "left": 0.08061786523087176, "Composing": 0.10159647344475727, "equal": 0.1501629736875757, "operations": 0.16123573046174353, "operation": 0.16123573046174353}}, {"docstring": "To match `mul_one_eq_id`.\n", "keywords": {"mul": 0.04491197687864554, "match": 0.15831692877998726}}, {"docstring": "`cyclotomic n` is monic.\n", "keywords": {"cyclotomic": 0.15831692877998726, "monic": 0.15831692877998726}}, {"docstring": " One of de Morgan's laws: the negation of a conjunction is logically equivalent to the disjunction of the negations.\n", "keywords": {"Morgan laws": 0.006652513650129948, "conjunction is logically": 0.018641876658774394, "logically equivalent": 0.018641876658774394, "Morgan": 0.07261214632111582, "laws": 0.09101163530720666, "conjunction": 0.135280142484453, "logically": 0.135280142484453, "equivalent": 0.135280142484453, "disjunction": 0.135280142484453, "negation": 0.138510866896558, "negations": 0.138510866896558}}, {"docstring": "If `f a = 0` when `a \u2209 s`, then the sum of `f i` over `i \u2208 insert a s` equals the sum of `f i` over `i \u2208 s`.\n", "keywords": {"equals the sum": 0.007942711351828013, "sum": 0.0456089852516003, "insert": 0.08638782221675846, "equals": 0.08638782221675846}}, {"docstring": "**Alias** of the forward direction of antilipschitz_with_iff_le_mul_nndist`.\n", "keywords": {"direction of antilipschitz": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "mul": 0.04491197687864554, "nndist": 0.04491197687864554, "antilipschitz": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " The complex hyperbolic cosine function is everywhere strictly differentiable, with the derivative `sinh x`.\n", "keywords": {"complex hyperbolic cosine": 0.0042542192213185686, "hyperbolic cosine function": 0.0042542192213185686, "strictly differentiable": 0.015380821171891606, "complex hyperbolic": 0.02570861714399338, "hyperbolic cosine": 0.02570861714399338, "cosine function": 0.02570861714399338, "differentiable": 0.09568045026443411, "derivative": 0.09568045026443411, "sinh": 0.09568045026443411, "complex": 0.15831692877998726, "hyperbolic": 0.15831692877998726, "cosine": 0.15831692877998726, "function": 0.15831692877998726, "strictly": 0.15831692877998726}}, {"docstring": " Every pair `![c, d]` of coprime integers is the \"bottom_row\" of some element `g=[[*,*],[c,d]]` of `SL(2,\u2124)`.\n", "keywords": {"coprime integers": 0.013527995261974615, "bottom": 0.04491197687864554, "row": 0.04491197687864554, "pair": 0.0771485953923296, "element": 0.0771485953923296, "coprime": 0.1155310835876123, "integers": 0.1155310835876123}}, {"docstring": "**Alias** of left.one_lt_mul'`.\n", "keywords": {"Alias": 0.030396371632413578, "mul": 0.04491197687864554, "left.one": 0.15831692877998726}}, {"docstring": "Auxiliary lemma for `is_stopping_time.measurable_set_lt`.\n", "keywords": {"stopping": 0.04491197687864554, "time.measurable": 0.04491197687864554, "set": 0.04491197687864554, "Auxiliary lemma": 0.04940384002065631, "Auxiliary": 0.15831692877998726, "lemma": 0.29736558256021506}}, {"docstring": "The composition of two semiring homomorphisms is a semiring homomorphism.\n", "keywords": {"semiring homomorphisms": 0.05738242751169008, "semiring": 0.11647786950765905, "composition": 0.2040190808014209, "homomorphisms": 0.2329557390153181}}, {"docstring": "**Alias** of the forward direction of complete_lattice.independent_iff_sup_indep_univ`.\n", "keywords": {"direction of complete": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "lattice.independent": 0.04491197687864554, "iff": 0.04491197687864554, "indep": 0.04491197687864554, "univ": 0.04491197687864554, "complete": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "Given binary relations `r, s` with `r` contained in `s`, the smallest additive congruence relation containing `s` contains the smallest additive congruence relation containing `r`.\n", "keywords": {"smallest additive congruence": 0.0010753764056543969, "additive congruence relation": 0.001432441887761585, "smallest additive": 0.008215426285944788, "additive congruence": 0.008215426285944788, "congruence relation": 0.010897218158843409, "binary relations": 0.027151279936866828, "smallest": 0.0635713060933742, "additive": 0.0635713060933742, "congruence": 0.0635713060933742, "relation": 0.08388049446228996, "contained": 0.10690699979538555, "binary": 0.15756687370442096, "relations": 0.1677609889245799}}, {"docstring": "One form of **Cramer's rule**. See `matrix.mul_vec_cramer` for a stronger form.\n", "keywords": {"Cramer rule": 0.037301297964502135, "Cramer": 0.10754497810258336, "rule": 0.16718560905139174, "matrix.mul": 0.2365661206214104, "vec": 0.2365661206214104, "form": 0.24516296616129382, "stronger form": 0.37245760303821884, "stronger": 0.5534686723650176}}, {"docstring": " A set `s` is not bounded below if and only if for each `x` there exists `y \u2208 s` that is less than `x`. A version for preorders is called `not_bdd_below_iff'`.\n", "keywords": {"set": 0.10028582371075691, "exists": 0.10028582371075691, "preorders is called": 0.11755105063023073, "bounded": 0.14832923246533666, "version for preorders": 0.165573765898185, "bdd": 0.17881754828257995, "iff": 0.17881754828257995, "called": 0.2790829227183407, "version": 0.37689977775222827, "preorders": 0.37689977775222827}}, {"docstring": " The cardinality of `fin (bit0 k)` is even, `fact` version. This `fact` is needed as an instance by `matrix.special_linear_group.has_neg`.\n", "keywords": {"fact": 0.04210098516959556, "fin": 0.07127359713294396, "version": 0.07127359713294396, "matrix.special": 0.2104440927400966, "linear": 0.2104440927400966, "group.has": 0.2104440927400966, "neg": 0.2104440927400966, "cardinality": 0.2348735419198309, "needed": 0.5160054651028707, "instance": 0.5160054651028707}}, {"docstring": "Alternative description for odd `n : \u2115` in terms of powers of `-1`\n", "keywords": {"Alternative description": 0.015380821171891606, "description for odd": 0.015380821171891606, "terms of powers": 0.02570861714399338, "Alternative": 0.09568045026443411, "odd": 0.09568045026443411, "description": 0.15831692877998726, "terms": 0.15831692877998726, "powers": 0.15831692877998726}}, {"docstring": "`raise l n` is an non-decreasing sequence.\n", "keywords": {"non-decreasing sequence": 0.04940384002065631, "raise": 0.15831692877998726, "sequence": 0.15831692877998726, "non-decreasing": 0.29736558256021506}}, {"docstring": "Shows how the entries of the sequence of the computed continued fraction can be obtained by the integer parts of the stream of integer and fractional parts.\n", "keywords": {"computed continued fraction": 0.0010655604796610148, "computed continued": 0.01033815036603184, "continued fraction": 0.01033815036603184, "fractional parts": 0.012088600551609154, "integer parts": 0.01413958392591425, "stream of integer": 0.030279377671229107, "integer and fractional": 0.030279377671229107, "integer": 0.05903906243931906, "parts": 0.05903906243931906, "Shows": 0.07636756015111258, "entries": 0.10115516112043156, "sequence": 0.10115516112043156, "computed": 0.10115516112043156, "continued": 0.10115516112043156, "fraction": 0.10115516112043156, "obtained": 0.10115516112043156, "stream": 0.10115516112043156, "fractional": 0.10115516112043156}}, {"docstring": " **Gram-Schmidt Orthonormalization**: `gram_schmidt_normed` produces an orthornormal system of vectors.\n", "keywords": {"Gram-Schmidt Orthonormalization": 0.013797198203993007, "gram": 0.04491197687864554, "schmidt": 0.04491197687864554, "normed": 0.04491197687864554, "produces an orthornormal": 0.04940384002065631, "system of vectors": 0.04940384002065631, "Orthonormalization": 0.08596317751626563, "orthornormal system": 0.09700399286574239, "Gram-Schmidt": 0.15831692877998726, "produces": 0.15831692877998726, "vectors": 0.15831692877998726, "orthornormal": 0.29736558256021506, "system": 0.29736558256021506}}, {"docstring": "A right-regular element of a `nontrivial` `mul_zero_class` is non-zero.\n", "keywords": {"right-regular element": 0.02570861714399338, "nontrivial": 0.04491197687864554, "mul": 0.04491197687864554, "class": 0.04491197687864554, "non-zero": 0.09568045026443411, "right-regular": 0.15831692877998726, "element": 0.15831692877998726}}, {"docstring": "The negative of a `C^n` function at a point is `C^n` at this point.\n", "keywords": {"function": 0.11984314898676356, "point": 0.14323823713631006, "negative": 0.19488865479360015}}, {"docstring": "Twice the angle between a multiple of a vector and that vector is 0.\n", "keywords": {"vector": 0.14323823713631006, "angle": 0.19488865479360015, "multiple": 0.19488865479360015}}, {"docstring": "Additive group homomorphisms preserve subtraction.\n", "keywords": {"Additive group homomorphisms": 0.01655915082773619, "homomorphisms preserve subtraction": 0.016559150827736194, "group homomorphisms preserve": 0.03339840940482845, "Additive group": 0.04940384002065631, "preserve subtraction": 0.04940384002065631, "group homomorphisms": 0.09700399286574239, "homomorphisms preserve": 0.09700399286574239, "Additive": 0.15831692877998726, "subtraction": 0.15831692877998726, "group": 0.29736558256021506, "homomorphisms": 0.29736558256021506, "preserve": 0.29736558256021506}}, {"docstring": "A Hausdorff space with a clopen basis is totally separated.\n", "keywords": {"Hausdorff space": 0.013797198203993007, "totally separated": 0.015380821171891606, "clopen basis": 0.02570861714399338, "basis is totally": 0.02570861714399338, "Hausdorff": 0.08596317751626563, "separated": 0.09568045026443411, "space": 0.15831692877998726, "clopen": 0.15831692877998726, "basis": 0.15831692877998726, "totally": 0.15831692877998726}}, {"docstring": "If two homomorphism from a group to a monoid are equal at `x`, then they are equal at `x\u207b\u00b9`.\n", "keywords": {"monoid are equal": 0.028813693746012673, "equal": 0.07334489383741183, "homomorphism": 0.19092478917347616, "group": 0.19092478917347616, "monoid": 0.19092478917347616}}, {"docstring": "An ideal is trivial if its localization at every maximal ideal is trivial.\n", "keywords": {"ideal is trivial": 0.027200199006318638, "maximal ideal": 0.04771708711059453, "ideal": 0.11357121248292479, "trivial": 0.11357121248292479, "localization": 0.2005079697193566, "maximal": 0.2005079697193566}}, {"docstring": "In a compact space, all sets are bounded\n", "keywords": {"compact space": 0.04940384002065631, "sets are bounded": 0.04940384002065631, "space": 0.15831692877998726, "bounded": 0.15831692877998726, "compact": 0.29736558256021506, "sets": 0.29736558256021506}}, {"docstring": " If `n` is strictly smaller than the order of `\u03c8`, then the `n`th coefficient of its product with any other power series is `0`.\n", "keywords": {"strictly smaller": 0.02570861714399338, "power series": 0.02570861714399338, "strictly": 0.15831692877998726, "smaller": 0.15831692877998726, "order": 0.15831692877998726, "coefficient": 0.15831692877998726, "product": 0.15831692877998726, "power": 0.15831692877998726, "series": 0.15831692877998726}}, {"docstring": "**Alias** of the reverse direction of finset.Ioc_eq_empty_iff`.\n", "keywords": {"direction of finset.Ioc": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "empty": 0.04491197687864554, "iff": 0.04491197687864554, "finset.Ioc": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " The function we actually integrate over `[0, 2\u03c0]` in the definition of `circle_integral` is integrable.\n", "keywords": {"circle": 0.04491197687864554, "integral": 0.04491197687864554, "integrable": 0.09568045026443411, "function": 0.15831692877998726, "integrate": 0.15831692877998726, "definition": 0.15831692877998726}}, {"docstring": "The equivalence classes of the equivalence relation defined by a partition of \u03b1 equal    the original partition.\n", "keywords": {"equivalence relation defined": 0.003191577779342574, "relation defined": 0.02064652498550541, "equal the original": 0.02064652498550541, "equivalence classes": 0.02162879641957819, "equivalence relation": 0.02162879641957819, "original partition": 0.02811486821694386, "equivalence": 0.07442578585270056, "partition": 0.09613435444394655, "classes": 0.14222822903176371, "relation": 0.14222822903176371, "defined": 0.14222822903176371, "equal": 0.14222822903176371, "original": 0.14222822903176371}}, {"docstring": "**Alias** of the forward direction of lt_inv_mul_iff_mul_lt`.\n", "keywords": {"mul": 0.019648131954263418, "Alias": 0.034278050535979626, "forward direction": 0.035715520099333646, "inv": 0.05393656033701752, "iff": 0.05393656033701752, "forward": 0.18569843656348187, "direction": 0.18569843656348187}}, {"docstring": "**Alias** of the reverse direction of filter.disjoint_principal_principal`.\n", "keywords": {"principal": 0.02006098734604785, "direction of filter.disjoint": 0.022138323509052035, "Alias": 0.034588515384495436, "reverse direction": 0.03663237450220032, "filter.disjoint": 0.11521656054299435, "reverse": 0.1879836817695587, "direction": 0.1879836817695587}}, {"docstring": "**Alias** of the forward direction of list.prefix_nil_iff`.\n", "keywords": {"direction of list.prefix": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "nil": 0.04491197687864554, "iff": 0.04491197687864554, "list.prefix": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "Krull's theorem: a nontrivial ring has a maximal ideal.\n", "keywords": {"Krull theorem": 0.009239332327148086, "maximal ideal": 0.015380821171891606, "nontrivial ring": 0.02570861714399338, "Krull": 0.09568045026443411, "theorem": 0.09568045026443411, "ideal": 0.09568045026443411, "nontrivial": 0.15831692877998726, "ring": 0.15831692877998726, "maximal": 0.15831692877998726}}, {"docstring": "`real.cosh` is always positive\n", "keywords": {"real.cosh": 0.04491197687864554, "positive": 0.15831692877998726}}, {"docstring": "The multiplicity of `p` in `(p * (n + 1))!` is one more than the sum  of the multiplicities of `p` in `(p * n)!` and `n + 1`.\n", "keywords": {"multiplicity": 0.09568045026443411, "sum": 0.09568045026443411, "multiplicities": 0.09568045026443411}}, {"docstring": "Swapping elements in `\u03c3` with equal values in `v` results in an addition that cancels\n", "keywords": {"Swapping elements": 0.00899321792126428, "addition that cancels": 0.00899321792126428, "Swapping": 0.0771485953923296, "results": 0.0771485953923296, "cancels": 0.0771485953923296, "elements": 0.1155310835876123, "equal": 0.1155310835876123, "addition": 0.1155310835876123}}, {"docstring": " The exponential map in a complete normed field `\ud835\udd42` of characteristic zero has derivative `exp \ud835\udd42 x` at any point `x` in the disk of convergence.\n", "keywords": {"complete normed field": 0.0025258761156662004, "normed field": 0.015380821171891606, "disk of convergence": 0.015380821171891606, "exponential map": 0.02570861714399338, "complete normed": 0.02570861714399338, "field": 0.09568045026443411, "derivative": 0.09568045026443411, "exp": 0.09568045026443411, "point": 0.09568045026443411, "convergence": 0.09568045026443411, "exponential": 0.15831692877998726, "map": 0.15831692877998726, "complete": 0.15831692877998726, "normed": 0.15831692877998726, "characteristic": 0.15831692877998726, "disk": 0.15831692877998726}}, {"docstring": "If multiplying by `1` on either side is the identity, `1` is regular.\n", "keywords": {"identity": 0.09568045026443411, "regular": 0.09568045026443411, "multiplying": 0.15831692877998726, "side": 0.15831692877998726}}, {"docstring": " An affinely independent family is injective, if the underlying ring is nontrivial.\n", "keywords": {"affinely independent family": 0.0042542192213185686, "family is injective": 0.015380821171891606, "ring is nontrivial": 0.015380821171891606, "affinely independent": 0.02570861714399338, "independent family": 0.02570861714399338, "underlying ring": 0.02570861714399338, "injective": 0.09568045026443411, "nontrivial": 0.09568045026443411, "affinely": 0.15831692877998726, "independent": 0.15831692877998726, "family": 0.15831692877998726, "underlying": 0.15831692877998726, "ring": 0.15831692877998726}}, {"docstring": " We can assume that a minimal solution to `a ^ 4 + b ^ 4 = c ^ 2` has `a` odd and `c` positive.\n", "keywords": {"minimal solution": 0.013527995261974615, "positive": 0.04491197687864554, "odd": 0.0771485953923296, "assume": 0.1155310835876123, "minimal": 0.1155310835876123, "solution": 0.1155310835876123}}, {"docstring": "The sum of a monotone function and a strictly monotone function is strictly monotone.\n", "keywords": {"strictly monotone function": 0.005969477003180055, "monotone function": 0.015889194666568494, "strictly monotone": 0.015889194666568494, "monotone": 0.05771958920065093, "function": 0.08893464428012506, "strictly": 0.08893464428012506, "function is strictly": 0.11998482209440742, "sum": 0.16020926794283838}}, {"docstring": "A key numerical identity needed for the proof of `witt_vector.map_frobenius_poly`.\n", "keywords": {"key numerical identity": 0.03339840940482845, "numerical identity needed": 0.03339840940482845, "witt": 0.04491197687864554, "vector.map": 0.04491197687864554, "frobenius": 0.04491197687864554, "poly": 0.04491197687864554, "key numerical": 0.09700399286574239, "numerical identity": 0.09700399286574239, "identity needed": 0.09700399286574239, "key": 0.29736558256021506, "numerical": 0.29736558256021506, "identity": 0.29736558256021506, "needed": 0.29736558256021506, "proof": 0.29736558256021506}}, {"docstring": "The points of a face of a simplex are given by `mono_of_fin`.\n", "keywords": {"mono": 0.04491197687864554, "fin": 0.04491197687864554, "points": 0.1155310835876123, "face": 0.1155310835876123, "simplex": 0.1155310835876123}}, {"docstring": " The linear map corresponding to `affine_combination` is `weighted_vsub`.\n", "keywords": {"affine": 0.04491197687864554, "combination": 0.04491197687864554, "weighted": 0.04491197687864554, "vsub": 0.04491197687864554, "linear map": 0.09700399286574239, "linear": 0.29736558256021506, "map": 0.29736558256021506}}, {"docstring": " If `f` is a box additive function on subboxes of `I` and `\u03c0\u2081`, `\u03c0\u2082` are two prepartitions of `I` that cover the same part of `I`, then `\u2211 J in \u03c0\u2081.boxes, f J = \u2211 J in \u03c0\u2082.boxes, f J`.\n", "keywords": {"box additive function": 0.0014340776174631702, "box additive": 0.012578992104256836, "additive function": 0.012578992104256836, "function on subboxes": 0.012578992104256836, "boxes": 0.04092200269394482, "box": 0.11145728654016383, "additive": 0.11145728654016383, "function": 0.11145728654016383, "subboxes": 0.11145728654016383, "prepartitions": 0.11145728654016383, "cover": 0.11145728654016383, "part": 0.11145728654016383}}, {"docstring": "`split_on x` is the left inverse of `intercalate [x]`, on the domain  consisting of each nonempty list of lists `ls` whose elements do not contain `x`\n", "keywords": {"left inverse": 0.018034246898548233, "domain consisting": 0.018034246898548233, "nonempty list": 0.023937535241430174, "split": 0.052376395424323874, "intercalate": 0.052376395424323874, "list of lists": 0.11750297871207885, "left": 0.13309686053898662, "inverse": 0.13309686053898662, "domain": 0.13309686053898662, "consisting": 0.13309686053898662, "nonempty": 0.13309686053898662, "elements": 0.13309686053898662, "list": 0.17564595615029244, "lists": 0.17564595615029244}}, {"docstring": "Construct `has_binary_product Q P` from `has_binary_product P Q`. This can't be an instance, as it would cause a loop in typeclass search.\n", "keywords": {"binary": 0.026945516146251545, "Construct": 0.0804103925056583, "product": 0.09278175148819089, "typeclass search": 0.2864155255305087, "instance": 0.4059300471627769, "search": 0.4059300471627769, "loop in typeclass": 0.43027726970573454, "loop": 0.5484841522346542, "typeclass": 0.5484841522346542}}, {"docstring": " If there exists a distance that a point has from all vertices of a simplex, the orthogonal projection of that point onto the subspace spanned by that simplex is its circumcenter.\n", "keywords": {"exists a distance": 0.019557279302732804, "orthogonal projection": 0.019557279302732804, "subspace spanned": 0.019557279302732804, "point": 0.09269208833952335, "simplex": 0.09269208833952335, "circumcenter": 0.09329120537733218, "exists": 0.1384995633470844, "distance": 0.1384995633470844, "vertices": 0.1384995633470844, "orthogonal": 0.1384995633470844, "projection": 0.1384995633470844, "subspace": 0.1384995633470844, "spanned": 0.1384995633470844}}, {"docstring": " Given `c = line_map a b r`, `c < b`, the point `(c, f c)` is strictly below the segment `[(a, f a), (b, f b)]` if and only if `slope f a b < slope f c b`.\n", "keywords": {"slope": 0.026369104746389253, "line": 0.05393656033701752, "map": 0.07201108509564766, "point": 0.07201108509564766, "segment": 0.07201108509564766, "strictly": 0.09202664026077896}}, {"docstring": " The **sum of the angles of a triangle** (possibly degenerate, where the given vertex is distinct from the others), angle-at-point.\n", "keywords": {"possibly degenerate": 0.00470688094720815, "vertex is distinct": 0.009239332327148086, "sum": 0.06844581806138879, "triangle": 0.06844581806138879, "possibly": 0.06844581806138879, "degenerate": 0.06844581806138879, "angles": 0.09568045026443411, "vertex": 0.09568045026443411, "distinct": 0.09568045026443411}}, {"docstring": "Group homomorphisms preserve integer power.\n", "keywords": {"Group homomorphisms preserve": 0.01655915082773619, "preserve integer power": 0.016559150827736194, "homomorphisms preserve integer": 0.03339840940482845, "Group homomorphisms": 0.04940384002065631, "integer power": 0.04940384002065631, "homomorphisms preserve": 0.09700399286574239, "preserve integer": 0.09700399286574239, "Group": 0.15831692877998726, "power": 0.15831692877998726, "homomorphisms": 0.29736558256021506, "preserve": 0.29736558256021506, "integer": 0.29736558256021506}}, {"docstring": "If X is is_compact then pr\u2082 : X \u00d7 Y \u2192 Y is a closed map\n", "keywords": {"closed map": 0.00899321792126428, "compact": 0.0771485953923296, "map": 0.0771485953923296, "closed": 0.1155310835876123}}, {"docstring": " An equivalent definition for prime powers: `n` is a prime power iff there is a unique prime dividing it.\n", "keywords": {"unique prime dividing": 0.0054451518230198585, "prime power iff": 0.005894631464012527, "equivalent definition": 0.023478396598924825, "power iff": 0.02536363305303039, "unique prime": 0.034240290150938706, "prime dividing": 0.034240290150938706, "prime powers": 0.03702092807439601, "prime": 0.07286179262720191, "definition for prime": 0.10513035523482941, "equivalent": 0.15145892749810547, "definition": 0.15145892749810547, "iff": 0.15145892749810547, "unique": 0.15145892749810547, "dividing": 0.15145892749810547, "powers": 0.1633197378433209, "power": 0.1633197378433209}}, {"docstring": "Every point is a fixed point of `id`.\n", "keywords": {"fixed point": 0.06340461682679863, "point": 0.14868279128010753, "fixed": 0.2005079697193566}}, {"docstring": " When a function is `C^n` in a set `s` of unique differentiability, it admits `ftaylor_series_within \ud835\udd5c f s` as a Taylor series up to order `n` in `s`.\n", "keywords": {"unique differentiability": 0.012051537142168538, "Taylor series": 0.012804598759651162, "ftaylor": 0.052376395424323874, "Taylor": 0.07197839425549828, "series": 0.08782297807514622, "set": 0.08946888050496495, "differentiability": 0.08946888050496495, "admits": 0.08946888050496495, "order": 0.08946888050496495, "function": 0.13309686053898662, "unique": 0.13309686053898662}}, {"docstring": "As well as being linear, `\u03b9 Q` squares to the quadratic form\n", "keywords": {"quadratic form": 0.015380821171891606, "linear": 0.09568045026443411, "squares": 0.09568045026443411, "form": 0.09568045026443411, "quadratic": 0.15831692877998726}}, {"docstring": " A normed vector space over a nondiscrete normed field is a noncompact space. This cannot be an instance because in order to apply it, Lean would have to search for `normed_space \ud835\udd5c E` with unknown `\ud835\udd5c`. We register this as an instance in two cases: `\ud835\udd5c = E` and `\ud835\udd5c = \u211d`.\n", "keywords": {"nondiscrete normed field": 0.020549420482708494, "normed vector space": 0.044497148324197655, "normed vector": 0.08983885648837923, "vector space": 0.08983885648837923, "nondiscrete normed": 0.08983885648837923, "normed field": 0.08983885648837923, "noncompact space": 0.08983885648837923, "normed": 0.133341444873582, "space": 0.133341444873582, "Lean": 0.19815198684019142, "vector": 0.2060703534283602, "nondiscrete": 0.2060703534283602, "field": 0.2060703534283602, "noncompact": 0.2060703534283602, "instance": 0.21697918538276087, "order to apply": 0.2899227011787967, "unknown": 0.3849991044096393, "order": 0.47408833347786455, "apply": 0.47408833347786455, "search": 0.47408833347786455}}, {"docstring": "Applying a multilinear map to a vector is continuous in both coordinates.\n", "keywords": {"Applying a multilinear": 0.015380821171891606, "multilinear map": 0.02570861714399338, "vector is continuous": 0.02570861714399338, "Applying": 0.09568045026443411, "coordinates": 0.09568045026443411, "multilinear": 0.15831692877998726, "map": 0.15831692877998726, "vector": 0.15831692877998726, "continuous": 0.15831692877998726}}, {"docstring": "A sigma-finite measure is absolutely continuous with respect to some finite measure.\n", "keywords": {"absolutely continuous": 0.035715520099333646, "continuous with respect": 0.035715520099333646, "sigma-finite measure": 0.05259515133015473, "finite measure": 0.05259515133015473, "measure is absolutely": 0.11487806119690562, "measure": 0.13453835116331675, "sigma-finite": 0.18569843656348187, "absolutely": 0.18569843656348187, "continuous": 0.18569843656348187, "respect": 0.18569843656348187, "finite": 0.18569843656348187}}, {"docstring": "Extensionality rule for additive congruence relations.\n", "keywords": {"additive congruence relations": 0.016559150827736194, "Extensionality rule": 0.04940384002065631, "congruence relations": 0.04940384002065631, "rule for additive": 0.09700399286574239, "additive congruence": 0.09700399286574239, "Extensionality": 0.15831692877998726, "relations": 0.15831692877998726, "rule": 0.29736558256021506, "additive": 0.29736558256021506, "congruence": 0.29736558256021506}}, {"docstring": "See also `algebra.norm_eq_zero_iff'` if you already have rewritten with `algebra.norm_apply`.\n", "keywords": {"algebra.norm": 0.020602899695743707, "apply": 0.055708263664958506, "iff": 0.11718348279991213, "rewritten": 0.19092478917347616}}, {"docstring": " For 0 < x \u2264 1 we have x - x ^ 3 / 4 < sin x.  This is also true for x > 1, but it's nontrivial for x just above 1. This inequality is not tight; the tighter inequality is sin x > x - x ^ 3 / 6 for all x > 0, but this inequality has a simpler proof.\n", "keywords": {"inequality": 0.11453038737192511, "sin": 0.12635266837265893, "tighter inequality": 0.18598002505914896, "simpler proof": 0.23273302594159914, "inequality is sin": 0.24688505361274907, "true": 0.3655921511792993, "nontrivial": 0.3655921511792993, "tight": 0.41365858478410866, "proof": 0.41365858478410866, "tighter": 0.4564013738948566, "simpler": 0.4564013738948566}}, {"docstring": "Characterize the equality of points with the vanishing of the nonnegative distance\n", "keywords": {"Characterize the equality": 0.00899321792126428, "nonnegative distance": 0.00899321792126428, "equality of points": 0.013527995261974615, "Characterize": 0.0771485953923296, "distance": 0.0771485953923296, "equality": 0.1155310835876123, "points": 0.1155310835876123, "vanishing": 0.1155310835876123, "nonnegative": 0.1155310835876123}}, {"docstring": "Product of a multiset of elements in a subfield is in the subfield.\n", "keywords": {"multiset of elements": 0.037831312533597124, "Product": 0.11718348279991213, "subfield": 0.13945519496053638, "multiset": 0.19092478917347616, "elements": 0.19092478917347616}}, {"docstring": "**Alias** of the forward direction of sub_pos`.\n", "keywords": {"forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "pos": 0.04491197687864554, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "The Legendre symbol of `a^2` at `p` is 1 if `p \u2224 a`.\n", "keywords": {"Legendre symbol": 0.013797198203993007, "Legendre": 0.08596317751626563, "symbol": 0.15831692877998726}}, {"docstring": " H\u00f6lder inequality: the scalar product of two functions is bounded by the product of their `L^p` and `L^q` norms when `p` and `q` are conjugate exponents. Version for sums over finite sets, with `\u211d\u22650`-valued functions.\n", "keywords": {"H\u00f6lder inequality": 0.024025565434766742, "conjugate exponents": 0.038712704770480444, "scalar product": 0.06260426827505094, "product": 0.12106698562302544, "H\u00f6lder": 0.1531727145735673, "inequality": 0.1531727145735673, "norms": 0.1531727145735673, "exponents": 0.1531727145735673, "valued functions": 0.21824965394572685, "functions": 0.23216465691767033, "scalar": 0.2433193585127945, "bounded": 0.2433193585127945, "conjugate": 0.2433193585127945, "functions is bounded": 0.24763572414817117, "Version for sums": 0.2555837115374544, "finite sets": 0.2555837115374544, "sums over finite": 0.38571507274593425, "Version": 0.3858257107143767, "sets": 0.3858257107143767, "valued": 0.3858257107143767}}, {"docstring": "`ideal_of_cofinals p \ud835\udc9f` is `\ud835\udc9f`-generic.\n", "keywords": {"ideal": 0.04491197687864554, "generic": 0.04491197687864554, "cofinals": 0.09568045026443411}}, {"docstring": "The set of finite subsets of a countable set is countable.\n", "keywords": {"finite subsets": 0.04188746641162499, "countable set": 0.09700399286574239, "set of finite": 0.13561210463159817, "set": 0.14868279128010753, "countable": 0.14868279128010753, "finite": 0.2005079697193566, "subsets": 0.2005079697193566, "set is countable": 0.2858772036260003}}, {"docstring": "Over any ring `R` satisfying the strong rank condition, if `b` is a basis for a module `M`, and `s` is a linearly independent set, then the cardinality of `s` is bounded by the cardinality of `b`.\n", "keywords": {"strong rank condition": 0.0015622890266839998, "linearly independent set": 0.0015622890266839998, "satisfying the strong": 0.011631263860918884, "rank condition": 0.011631263860918884, "independent set": 0.011631263860918884, "strong rank": 0.017416869738890953, "linearly independent": 0.017416869738890953, "cardinality": 0.047809466130962576, "ring": 0.0878757573221198, "satisfying": 0.0878757573221198, "condition": 0.0878757573221198, "module": 0.0878757573221198, "set": 0.0878757573221198, "strong": 0.13083850849172096, "rank": 0.13083850849172096, "basis": 0.13083850849172096, "linearly": 0.13083850849172096, "independent": 0.13083850849172096, "bounded": 0.13083850849172096}}, {"docstring": " When `M` is finite free, the trace of a linear map correspond to the contraction pairing under the isomorphism `End(M) \u2243 M* \u2297 M`\n", "keywords": {"linear map correspond": 0.0008990471097494833, "finite free": 0.0065920978564317735, "linear map": 0.009239332327148086, "map correspond": 0.009239332327148086, "contraction pairing": 0.009239332327148086, "End": 0.030396371632413578, "free": 0.06844581806138879, "isomorphism": 0.06844581806138879, "finite": 0.09568045026443411, "trace": 0.09568045026443411, "linear": 0.09568045026443411, "map": 0.09568045026443411, "correspond": 0.09568045026443411, "contraction": 0.09568045026443411, "pairing": 0.09568045026443411}}, {"docstring": "For `r` strictly smaller than the radius of `p`, then `\u2225p\u2099\u2225 r\u207f` is bounded.\n", "keywords": {"strictly smaller": 0.04940384002065631, "strictly": 0.15831692877998726, "bounded": 0.15831692877998726, "smaller": 0.29736558256021506, "radius": 0.29736558256021506}}, {"docstring": " If `\ud835\udcaa` satisfies `v.integers \ud835\udcaa` where `v` is a valuation on a field, then `\ud835\udcaa` is a valuation ring.\n", "keywords": {"valuation ring": 0.013544593182520747, "satisfies": 0.054709255964732355, "valuation": 0.07162298286637953, "v.integers": 0.09329120537733218, "field": 0.09329120537733218, "ring": 0.09329120537733218}}, {"docstring": "**Alias** of measure_theory.measure.absolutely_continuous_of_eq`.\n", "keywords": {"Alias": 0.030396371632413578, "continuous": 0.04491197687864554, "measure": 0.09568045026443411}}, {"docstring": "A variant of `finset.add_sum_erase` with the addition swapped.\n", "keywords": {"finset.add": 0.04491197687864554, "sum": 0.04491197687864554, "erase": 0.04491197687864554, "addition swapped": 0.04940384002065631, "swapped": 0.15831692877998726, "variant": 0.29736558256021506, "addition": 0.29736558256021506}}, {"docstring": "The product of any function over an empty set is `1`.\n", "keywords": {"empty set": 0.09700399286574239, "product": 0.29736558256021506, "function": 0.29736558256021506, "empty": 0.29736558256021506, "set": 0.29736558256021506}}, {"docstring": "The diagonal matrix `diagonal v` is symmetric.\n", "keywords": {"diagonal matrix": 0.035552851931764155, "matrix": 0.11984314898676356, "symmetric": 0.11984314898676356, "diagonal": 0.14323823713631006}}, {"docstring": " If `{s i | p i}` is a basis of a filter `l` and `V \u2208 l`, then `{s i | p i \u2227 s i \u2286 V}` is a basis of `l`.\n", "keywords": {"basis": 0.04219450044961737, "filter": 0.08280939275679769}}, {"docstring": "The function `x \u21a6 x\u207b\u00b9` tends to `+\u221e` on the right of `0`.\n", "keywords": {"function": 0.09568045026443411}}, {"docstring": "The orthocenter equals the Monge point.\n", "keywords": {"Monge point": 0.008293207122436794, "equals the Monge": 0.013797198203993007, "orthocenter equals": 0.02570861714399338, "Monge": 0.08596317751626563, "point": 0.09568045026443411, "orthocenter": 0.15831692877998726, "equals": 0.15831692877998726}}, {"docstring": "Composition by an injective function on the left is itself injective.\n", "keywords": {"injective function": 0.0562460611896591, "Composition": 0.11718348279991213, "injective": 0.13945519496053638, "function": 0.19092478917347616, "left": 0.19092478917347616}}, {"docstring": "Ordinal games are numeric.\n", "keywords": {"Ordinal games": 0.04940384002065631, "games are numeric": 0.04940384002065631, "Ordinal": 0.15831692877998726, "numeric": 0.15831692877998726, "games": 0.29736558256021506}}, {"docstring": " If `F\u2099` tends uniformly to `f` on a set `s`, and `g\u2099` tends to `x` within `s`, then `F\u2099 g\u2099` tends to `f x` if `f` is continuous at `x` within `s`.\n", "keywords": {"set": 0.0771485953923296, "uniformly": 0.1155310835876123, "continuous": 0.1155310835876123}}, {"docstring": " When the derivative of a function is nonnegative, then it is automatically integrable, Ioc version.\n", "keywords": {"Ioc version": 0.005484890844946624, "function is nonnegative": 0.015380821171891606, "automatically integrable": 0.015380821171891606, "Ioc": 0.057012387690331526, "nonnegative": 0.09568045026443411, "integrable": 0.09568045026443411, "version": 0.09568045026443411, "derivative": 0.15831692877998726, "function": 0.15831692877998726, "automatically": 0.15831692877998726}}, {"docstring": "The property satisfied by the (circumcenter, circumradius) pair.\n", "keywords": {"property satisfied": 0.02570861714399338, "circumcenter": 0.04491197687864554, "circumradius": 0.04491197687864554, "pair": 0.04491197687864554, "property": 0.15831692877998726, "satisfied": 0.15831692877998726}}, {"docstring": " If `f` is a strictly monotone function on a left neighborhood of `a` and the image of this neighborhood under `f` meets every interval `[b, f a)`, `b < f a`, then `f` is continuous at `a` from the left.  The assumption `hfs : \u2200 b < f a, \u2203 c \u2208 s, f c \u2208 Ico b (f a)` is required because otherwise the function `f : \u211d \u2192 \u211d` given by `f x = if x < 0 then x else x + 1` would be a counter-example at `a = 0`.\n", "keywords": {"strictly monotone function": 0.002025191408147252, "meets every interval": 0.008643091624853851, "left neighborhood": 0.009348308617381278, "strictly monotone": 0.011859198563186865, "monotone function": 0.01821652543996119, "left": 0.04811893373144426, "neighborhood": 0.04811893373144426, "function": 0.0826281024680004, "meets": 0.09256904841496645, "interval": 0.09256904841496645, "strictly": 0.10825990166891256, "monotone": 0.10825990166891256, "image": 0.10825990166891256, "continuous": 0.10825990166891256, "Ico": 0.15138410959866605, "hfs": 0.22648867203048192, "assumption": 0.2616085068615822, "required": 0.29658727789118194, "counter-example": 0.29658727789118194}}, {"docstring": "The minimal polynomial of `0` is `X`.\n", "keywords": {"minimal polynomial": 0.09700399286574239, "minimal": 0.29736558256021506, "polynomial": 0.29736558256021506}}, {"docstring": "`arsinh` is the left inverse of `sinh`.\n", "keywords": {"arsinh": 0.04491197687864554, "sinh": 0.04491197687864554, "left inverse": 0.09700399286574239, "left": 0.29736558256021506, "inverse": 0.29736558256021506}}, {"docstring": " From a lower bound on `sqrt_two_add_series 0 n = 2 cos (\u03c0 / 2 ^ (n+1))` of the form `2 - ((a - 1 / 4 ^ n) / 2 ^ (n + 1)) ^ 2 \u2264 sqrt_two_add_series 0 n`, one can deduce the upper bound `\u03c0 < a` thanks to basic trigonometric formulas as expressed in `pi_lt_sqrt_two_add_series`.\n", "keywords": {"basic trigonometric formulas": 0.00157446800591198, "sqrt": 0.013317655549643422, "add": 0.013317655549643422, "series": 0.013317655549643422, "deduce the upper": 0.01337849109787037, "basic trigonometric": 0.01337849109787037, "trigonometric formulas": 0.01337849109787037, "formulas as expressed": 0.01337849109787037, "lower bound": 0.016595932770703897, "upper bound": 0.016595932770703897, "cos": 0.06211796664525684, "bound": 0.07104042933481054, "form": 0.08707008076515127, "lower": 0.11489939076266599, "deduce": 0.11489939076266599, "upper": 0.11489939076266599, "basic": 0.11489939076266599, "trigonometric": 0.11489939076266599, "formulas": 0.11489939076266599, "expressed": 0.11489939076266599}}, {"docstring": " If the codomain of an injective function is a subsingleton, then the domain is a subsingleton as well.\n", "keywords": {"injective function": 0.03663237450220032, "subsingleton": 0.10356599227702172, "codomain": 0.1879836817695587, "injective": 0.1879836817695587, "function": 0.1879836817695587, "domain": 0.1879836817695587}}, {"docstring": " Given a predicate on two naturals `P : \u2115 \u2192 \u2115 \u2192 Prop`, `P a b` is true for all `a < b` if `P (a + 1) (a + 1)` is true for all `a`, `P 0 (b + 1)` is true for all `b` and for all `a < b`, `P (a + 1) b` is true and `P a (b + 1)` is true implies `P (a + 1) (b + 1)` is true.\n", "keywords": {"true implies": 0.006233004401641324, "true": 0.012372671852276498, "Prop": 0.0401219746920957, "naturals": 0.08344188959470587, "implies": 0.08344188959470587, "predicate": 0.09775230943124207}}, {"docstring": " The nilpotency class of a nilpotent `G` is equal to the smallest `n` for which the descending central series reaches `\u22a5` in its `n`'th term.\n", "keywords": {"central series reaches": 0.0010606143890052174, "descending central series": 0.0016012214736657916, "series reaches": 0.00899321792126428, "nilpotency class": 0.013527995261974615, "descending central": 0.013527995261974615, "central series": 0.013527995261974615, "nilpotent": 0.0771485953923296, "smallest": 0.0771485953923296, "reaches": 0.0771485953923296, "term": 0.0771485953923296, "nilpotency": 0.1155310835876123, "class": 0.1155310835876123, "equal": 0.1155310835876123, "descending": 0.1155310835876123, "central": 0.1155310835876123, "series": 0.1155310835876123}}, {"docstring": " **Equality case of Rearrangement Inequality**: Pointwise scalar multiplication of `f` and `g`, which monovary together, is unchanged by a permutation if and only if `f` and `g \u2218 \u03c3` monovary together. Stated by permuting the entries of `g`.\n", "keywords": {"Pointwise scalar multiplication": 0.0019254155628980188, "Rearrangement Inequality": 0.0050414360735746774, "Equality case": 0.010681703670791362, "Pointwise scalar": 0.010681703670791362, "case of Rearrangement": 0.0144961168780819, "scalar multiplication": 0.031040804666112243, "Equality": 0.060911257173420906, "Inequality": 0.060911257173420906, "Pointwise": 0.060911257173420906, "monovary": 0.07953440658135287, "Rearrangement": 0.08235173134587291, "Stated by permuting": 0.1549537691794176, "case": 0.17351161766281323, "scalar": 0.17351161766281323, "multiplication": 0.17351161766281323, "unchanged": 0.17351161766281323, "permutation": 0.17351161766281323, "permuting the entries": 0.21626281206510953, "Stated": 0.31817081130554614, "permuting": 0.42167437397336704}}, {"docstring": "**Alias** of not_is_max_of_lt`.\n", "keywords": {"Alias": 0.030396371632413578, "max": 0.04491197687864554}}, {"docstring": " An auxiliary lemma used to prove that the same point can't belong to more than `2 ^ fintype.card \u03b9` closed boxes of a prepartition.\n", "keywords": {"closed boxes": 0.015380821171891606, "auxiliary lemma": 0.02570861714399338, "fintype.card": 0.09568045026443411, "closed": 0.09568045026443411, "prepartition": 0.09568045026443411, "auxiliary": 0.15831692877998726, "lemma": 0.15831692877998726, "prove": 0.15831692877998726, "point": 0.15831692877998726, "belong": 0.15831692877998726, "boxes": 0.15831692877998726}}, {"docstring": "If two differentiable functions on `[a, b]` have the same derivative within `[a, b]` everywhere  on `[a, b)` and are equal at `a`, then they are equal everywhere on `[a, b]`.\n", "keywords": {"differentiable functions": 0.01085898992882147, "equal": 0.049557796192334434, "differentiable": 0.1036452554536235, "functions": 0.1036452554536235, "derivative": 0.1036452554536235}}, {"docstring": "This is the `list.prod` version of `mul_inv_rev`\n", "keywords": {"list.prod": 0.04491197687864554, "mul": 0.04491197687864554, "inv": 0.04491197687864554, "rev": 0.04491197687864554, "version": 0.15831692877998726}}, {"docstring": " A function is strongly measurable if and only if it is measurable and has separable range.\n", "keywords": {"separable range": 0.022138323509052035, "function is strongly": 0.03663237450220032, "strongly measurable": 0.05417025203414716, "range": 0.11521656054299435, "measurable": 0.13667842094541144, "function": 0.1879836817695587, "strongly": 0.1879836817695587, "separable": 0.1879836817695587}}, {"docstring": "If `0 < n`, then `a 1` has order `2 * n`.\n", "keywords": {"order": 0.09568045026443411}}, {"docstring": " The sum of two upper semicontinuous functions is upper semicontinuous. Formulated with an explicit continuity assumption on addition, for application to `ereal`. The unprimed version of the lemma uses `[has_continuous_add]`.\n", "keywords": {"upper semicontinuous functions": 0.007327296516767814, "upper semicontinuous": 0.016851204808897166, "semicontinuous functions": 0.03821554584844725, "functions is upper": 0.08667762295794612, "upper": 0.09028232117950413, "semicontinuous": 0.09028232117950413, "explicit continuity assumption": 0.1917383839555026, "sum": 0.2038542769622493, "functions": 0.2038542769622493, "assumption on addition": 0.20587493759307618, "ereal": 0.2425057621221154, "explicit continuity": 0.28461618066910277, "continuity assumption": 0.28461618066910277, "continuous": 0.31807004650910337, "add": 0.31807004650910337, "Formulated": 0.36270881646612724, "addition": 0.36270881646612724, "unprimed version": 0.46742777496856974, "explicit": 0.47069880880967624, "continuity": 0.47069880880967624}}, {"docstring": " Just as `tensor_product.ext` is marked `ext` instead of `tensor_product.ext'`, this is a better `ext` lemma than `tensor_product.algebra_tensor_module.ext` below.  See note [partially-applied ext lemmas].\n", "keywords": {"tensor": 0.011648474514392396, "product.ext": 0.035999087770067106, "partially-applied ext lemmas": 0.07623135796227934, "product.algebra": 0.0989820451674182, "module.ext": 0.0989820451674182, "ext": 0.13503463412982764, "marked": 0.14650256367571413, "ext lemmas": 0.16240672232283057, "partially-applied ext": 0.17827730000209457, "lemma": 0.34488909436973564, "lemmas": 0.34488909436973564, "note": 0.3734926936064705, "partially-applied": 0.3734926936064705}}, {"docstring": "A finset is bounded above.\n", "keywords": {"finset is bounded": 0.09700399286574239, "finset": 0.29736558256021506, "bounded": 0.29736558256021506}}, {"docstring": "A function `-f` is convex iff `f` is concave.\n", "keywords": {"convex iff": 0.015380821171891606, "function": 0.09568045026443411, "iff": 0.09568045026443411, "concave": 0.09568045026443411, "convex": 0.15831692877998726}}, {"docstring": "The `add_subgroup` generated by a set includes the set.\n", "keywords": {"set includes": 0.05417025203414716, "add": 0.054709255964732355, "subgroup": 0.054709255964732355, "generated": 0.11521656054299435, "includes the set": 0.11793310824193863, "set": 0.13667842094541144, "includes": 0.1879836817695587}}, {"docstring": "Left-multiplying a permutation with `swap i j` twice gives the original permutation.   This specialization of `swap_mul_self` is useful when using cosets of permutations.\n", "keywords": {"original permutation": 0.10851382780939597, "swap": 0.12258716109777466, "Left-multiplying": 0.14785619304818992, "Left-multiplying a permutation": 0.18102638863081016, "original": 0.21328645712451538, "permutation": 0.2294830918380903, "mul": 0.2531576511174968, "specialization": 0.48495692933076867, "cosets": 0.48495692933076867, "cosets of permutations": 0.6269995533998775}}, {"docstring": "The kernel of `S.normed_mk` is `S`.\n", "keywords": {"S.normed": 0.030396371632413578, "kernel": 0.29736558256021506}}, {"docstring": "In a seminormed ring, the right-multiplication `add_monoid_hom` is bounded.\n", "keywords": {"add": 0.04491197687864554, "monoid": 0.04491197687864554, "hom": 0.04491197687864554, "seminormed ring": 0.04940384002065631, "ring": 0.15831692877998726, "right-multiplication": 0.15831692877998726, "bounded": 0.15831692877998726, "seminormed": 0.29736558256021506}}, {"docstring": "If all points are equal to a given point `x`, then `\u03b1` is a subsingleton.\n", "keywords": {"subsingleton": 0.11984314898676356, "points are equal": 0.12748048004056908, "equal": 0.19488865479360015, "points": 0.28647647427262013, "point": 0.28647647427262013}}, {"docstring": " In a join, taking the first elements up to an index which is the sum of the lengths of the first `i` sublists, is the same as taking the join of the first `i` sublists.\n", "keywords": {"sublists": 0.0220371240994345, "taking the join": 0.022698855913906094, "taking": 0.04300112363181095, "join": 0.051108319229887504, "elements": 0.09279563255530926, "index": 0.09279563255530926, "sum": 0.09279563255530926, "lengths": 0.09279563255530926}}, {"docstring": "An `add_submonoid` is closed under multiplication by naturals.\n", "keywords": {"add": 0.04491197687864554, "submonoid": 0.04491197687864554, "multiplication by naturals": 0.04940384002065631, "closed under multiplication": 0.09700399286574239, "naturals": 0.15831692877998726, "closed": 0.29736558256021506, "multiplication": 0.29736558256021506}}, {"docstring": "An intermediate field is closed under inverses.\n", "keywords": {"closed under inverses": 0.04940384002065631, "intermediate field": 0.09700399286574239, "field is closed": 0.09700399286574239, "inverses": 0.15831692877998726, "intermediate": 0.29736558256021506, "field": 0.29736558256021506, "closed": 0.29736558256021506}}, {"docstring": " A version of Bolzano-Weistrass: in a uniform space with countably generated uniformity filter (e.g., in a metric space), a set is compact if and only if it is sequentially compact.\n", "keywords": {"generated uniformity filter": 0.0010893000257479592, "countably generated uniformity": 0.0015241954247089146, "version of Bolzano-Weistrass": 0.009386651690650429, "uniformity filter": 0.009386651690650429, "countably generated": 0.013095151449018445, "generated uniformity": 0.013095151449018445, "uniform space": 0.016245817372079578, "metric space": 0.016245817372079578, "sequentially compact": 0.016245817372079578, "space with countably": 0.039755149664920254, "set is compact": 0.039755149664920254, "space": 0.07030442419566416, "compact": 0.07030442419566416, "Bolzano-Weistrass": 0.08179429269966654, "filter": 0.08179429269966654, "version": 0.11369206228658875, "uniform": 0.11369206228658875, "countably": 0.11369206228658875, "generated": 0.11369206228658875, "uniformity": 0.11369206228658875}}, {"docstring": " The sum of two lower semicontinuous functions is lower semicontinuous. Formulated with `[has_continuous_add]`. The primed version of the lemma uses an explicit continuity assumption on addition, for application to `ereal`.\n", "keywords": {"lower semicontinuous functions": 0.007327296516767814, "lower semicontinuous": 0.016851204808897166, "semicontinuous functions": 0.03821554584844725, "functions is lower": 0.08667762295794612, "lower": 0.09028232117950413, "semicontinuous": 0.09028232117950413, "sum": 0.2038542769622493, "functions": 0.2038542769622493, "continuous": 0.2425057621221154, "add": 0.2425057621221154, "ereal": 0.31807004650910337, "assumption on addition": 0.3438068115293896, "Formulated": 0.36270881646612724, "explicit continuity assumption": 0.44505054844584063, "addition": 0.4533135999375753, "primed version": 0.46742777496856974, "explicit continuity": 0.46742777496856974, "continuity assumption": 0.46742777496856974, "primed": 0.5643894539005718, "version": 0.5643894539005718}}, {"docstring": "**Alias** of left.one_lt_mul_of_lt_of_le`.\n", "keywords": {"Alias": 0.030396371632413578, "mul": 0.04491197687864554, "left.one": 0.0771485953923296}}, {"docstring": " this is slightly different from `measurable.piecewise`. It can be used to show `measurable (ite (x=0) 0 1)` by `exact measurable.ite (measurable_set_singleton 0) measurable_const measurable_const`, but replacing `measurable.ite` by `measurable.piecewise` in that example proof does not work.\n", "keywords": {"measurable.piecewise": 0.053825923249759565, "measurable": 0.09220429041338604, "exact measurable.ite": 0.14088765382341673, "const measurable": 0.14796656632838875, "measurable.ite": 0.17474036523779768, "const": 0.17474036523779768, "slightly": 0.18471336893993398, "ite": 0.25910470260934576, "set": 0.25910470260934576, "singleton": 0.25910470260934576, "show": 0.35335140439185764, "exact": 0.35335140439185764, "replacing": 0.35335140439185764, "work": 0.35335140439185764, "proof": 0.4403610554723892}}, {"docstring": " The open sets containing `a` are a basis for the neighborhood filter. See `nhds_basis_opens'` for a variant using open neighborhoods instead.\n", "keywords": {"neighborhood filter": 0.06395966831717596, "open sets": 0.11389228278370994, "filter": 0.15171991381813393, "basis": 0.19811093811859587, "sets": 0.21842172026740816, "open neighborhoods": 0.22771477615684985, "open": 0.23405896688026967, "nhds": 0.25893692362763004, "neighborhood": 0.39622187623719174, "opens": 0.46811793376053934, "variant": 0.49253805317324434, "variant using open": 0.6518749729962787}}, {"docstring": "If a function `f` is `periodic` with positive period `c`, then for all `x` there exists some  `y \u2208 Ico a (a + c)` such that `f x = f y`.\n", "keywords": {"positive period": 0.00899321792126428, "periodic": 0.04491197687864554, "Ico": 0.04776309965539685, "function": 0.0771485953923296, "period": 0.0771485953923296, "positive": 0.1155310835876123, "exists": 0.1155310835876123}}, {"docstring": "A variant of `normed_group.tendsto_at_top` that uses `\u2203 N, \u2200 n > N, ...` rather than `\u2203 N, \u2200 n \u2265 N, ...`\n", "keywords": {"normed": 0.04491197687864554, "group.tendsto": 0.04491197687864554, "top": 0.04491197687864554, "variant": 0.0771485953923296}}, {"docstring": " If the `R`-integral element `a : S` has coordinates `< y` with respect to some basis `b`, its norm is strictly less than `norm_bound abv b * y ^ dim S`.\n", "keywords": {"integral element": 0.012220051967672856, "bound abv": 0.020171377334626643, "norm is strictly": 0.10742270288518663, "integral": 0.10987504304330521, "element": 0.10987504304330521, "coordinates": 0.10987504304330521, "basis": 0.10987504304330521, "bound": 0.10987504304330521, "dim": 0.10987504304330521, "norm": 0.12922594861139264, "respect": 0.17995476918065306, "strictly": 0.17995476918065306, "abv": 0.17995476918065306}}, {"docstring": " In the characteristic zero case, the weights in the centroid indexed by a `fintype` sum to 1 if the number of points is `n + 1`.\n", "keywords": {"characteristic zero case": 0.0065920978564317735, "centroid indexed": 0.009239332327148086, "number of points": 0.009239332327148086, "fintype": 0.04491197687864554, "case": 0.06844581806138879, "sum": 0.06844581806138879, "characteristic": 0.09568045026443411, "weights": 0.09568045026443411, "centroid": 0.09568045026443411, "indexed": 0.09568045026443411, "number": 0.09568045026443411, "points": 0.09568045026443411}}, {"docstring": "The intersection of two `add_submonoid`s of an `add_monoid` `M` is an `add_submonoid` of M.\n", "keywords": {"add": 0.013888451504233358, "submonoid": 0.025153267469130616, "monoid": 0.06346985717121927, "intersection": 0.15842879763921927}}, {"docstring": "Two congruence relations are equal iff their underlying binary relations are equal.\n", "keywords": {"underlying binary relations": 0.00926703262758182, "relations are equal": 0.02495406599442899, "iff their underlying": 0.039481144315219374, "underlying binary": 0.039481144315219374, "congruence relations": 0.04437656514447953, "equal iff": 0.04437656514447953, "binary relations": 0.04437656514447953, "relations": 0.10901343189444501, "equal": 0.10901343189444501, "congruence": 0.19488865479360015, "iff": 0.19488865479360015, "underlying": 0.19488865479360015, "binary": 0.19488865479360015}}, {"docstring": "`same_ray.neg` as an `iff`.\n", "keywords": {"ray.neg": 0.04491197687864554, "iff": 0.04491197687864554}}, {"docstring": " Given a subgroup `H` of a decidable linearly ordered archimedean abelian group `G`, if there exists a minimal element `a` of `H \u2229 G_{>0}` then `H` is generated by `a`.\n", "keywords": {"archimedean abelian group": 0.00045942001571077094, "decidable linearly ordered": 0.0006133431289448148, "linearly ordered archimedean": 0.0006133431289448148, "ordered archimedean abelian": 0.0006133431289448148, "abelian group": 0.005380746843605012, "minimal element": 0.005380746843605012, "decidable linearly": 0.00717258304785508, "linearly ordered": 0.00717258304785508, "ordered archimedean": 0.00717258304785508, "archimedean abelian": 0.00717258304785508, "exists a minimal": 0.00717258304785508, "subgroup": 0.06341998722529081, "group": 0.06341998722529081, "element": 0.06341998722529081, "decidable": 0.08438900089923473, "linearly": 0.08438900089923473, "ordered": 0.08438900089923473, "archimedean": 0.08438900089923473, "abelian": 0.08438900089923473, "exists": 0.08438900089923473}}, {"docstring": "Assumes left covariance. The lemma assuming right covariance is `right.add_neg`.\n", "keywords": {"Assumes left covariance": 0.021279743632738882, "Assumes left": 0.038712704770480444, "left covariance": 0.1273706910391025, "Assumes": 0.1531727145735673, "right.add": 0.21826204231687923, "neg": 0.21826204231687923, "covariance": 0.23216465691767033, "left": 0.2433193585127945, "lemma assuming": 0.38571507274593425, "lemma": 0.5275897320195264, "assuming": 0.5275897320195264, "assuming right covariance": 0.5846700711531686}}, {"docstring": "  The sum of the `k` initial terms of the Liouville number to base `m` is a ratio of natural numbers where the denominator is `m ^ k!`.\n", "keywords": {"Liouville number": 0.008462564212884023, "initial terms": 0.008870694726817624, "ratio of natural": 0.012385089084719787, "natural numbers": 0.015198370033106133, "number to base": 0.027296658390848872, "Liouville": 0.06199730211833934, "initial": 0.07949602794131501, "base": 0.07949602794131501, "sum": 0.11060549338282699, "terms": 0.11060549338282699, "ratio": 0.11060549338282699, "natural": 0.11060549338282699, "denominator": 0.11060549338282699, "number": 0.13535347335948783, "numbers": 0.13535347335948783}}, {"docstring": " A function `f` continuous on a compact set `K` is integrable on this set with respect to any locally finite measure.\n", "keywords": {"locally finite measure": 0.003880277136642503, "finite measure": 0.020435055290363522, "locally finite": 0.033892441937102495, "compact set": 0.04949487345881267, "set with respect": 0.10882816095144712, "function": 0.11060549338282699, "continuous": 0.11060549338282699, "measure": 0.11060549338282699, "set": 0.13023752997463905, "compact": 0.18105634546484617, "integrable": 0.18105634546484617, "respect": 0.18105634546484617, "locally": 0.18105634546484617, "finite": 0.18105634546484617}}, {"docstring": " The derivative of the zero section of the tangent bundle maps `\u27e8x, v\u27e9` to `\u27e8\u27e8x, 0\u27e9, \u27e8v, 0\u27e9\u27e9`.  Note that, as currently framed, this is a statement in coordinates, thus reliant on the choice of the coordinate system we use on the tangent bundle.  However, the result itself is coordinate-dependent only to the extent that the coordinates determine a splitting of the tangent bundle.  Moreover, there is a canonical splitting at each point of the zero section (since there is a canonical horizontal space there, the tangent space to the zero section, in addition to the canonical vertical space which is the kernel of the derivative of the projection), and this canonical splitting is also the one that comes from the coordinates on the tangent bundle in our definitions. So this statement is not as crazy as it may seem.  TODO define splittings of vector bundles; state this result invariantly.\n", "keywords": {"tangent bundle maps": 0.009455640986856044, "tangent bundle": 0.012831680009318978, "tangent": 0.03775594282339777, "bundle maps": 0.04670426001614663, "bundle": 0.0646532698637545, "canonical splitting": 0.0812549574228529, "tangent space": 0.09502543143864235, "canonical": 0.09956840135684952, "coordinates": 0.10206162258340182, "section": 0.10242217700214729, "splitting": 0.11699853313297047, "TODO define splittings": 0.13074593356417072, "space": 0.15322832907768205, "coordinate system": 0.15685643954689127, "derivative": 0.16591094323883204, "maps": 0.17253691085994236, "coordinates determine": 0.1965996230029906, "vector bundles": 0.19851424418345714, "canonical horizontal space": 0.20324437886755245, "canonical vertical space": 0.20324437886755245}}, {"docstring": "If a direct product has finite order then so does each component.\n", "keywords": {"direct product": 0.09700399286574239, "product has finite": 0.09700399286574239, "finite order": 0.09700399286574239, "component": 0.15831692877998726, "direct": 0.29736558256021506, "product": 0.29736558256021506, "finite": 0.29736558256021506, "order": 0.29736558256021506}}, {"docstring": " If a function tends to negative infinity along a filter, then this function divided by a positive constant also tends to negative infinity.\n", "keywords": {"positive constant": 0.02198562329295767, "function divided": 0.030322790873945838, "negative": 0.03787863113987834, "filter": 0.09910285154256718, "function": 0.10032724128195009, "divided": 0.14667192704153995, "positive": 0.14667192704153995, "constant": 0.14667192704153995}}, {"docstring": "An additive monoid homomorphism preserves addition.\n", "keywords": {"homomorphism preserves addition": 0.016559150827736194, "additive monoid homomorphism": 0.03339840940482845, "monoid homomorphism preserves": 0.03339840940482845, "preserves addition": 0.04940384002065631, "additive monoid": 0.09700399286574239, "monoid homomorphism": 0.09700399286574239, "homomorphism preserves": 0.09700399286574239, "addition": 0.15831692877998726, "additive": 0.29736558256021506, "monoid": 0.29736558256021506, "homomorphism": 0.29736558256021506, "preserves": 0.29736558256021506}}, {"docstring": "Expand the square\n", "keywords": {"Expand the square": 0.02570861714399338, "Expand": 0.15831692877998726, "square": 0.15831692877998726}}, {"docstring": "If `x \u2208 s` and `y \u2208 interior s`, then the segment `(x, y]` is included in `interior s`.\n", "keywords": {"interior": 0.03674010039257565, "segment": 0.09713402394201612, "included": 0.14390902704051098}}, {"docstring": " The image of `I` in the localization at `I.prime_compl` is a maximal ideal, and in particular it is the unique maximal ideal given by the local ring structure `at_prime.local_ring`\n", "keywords": {"local ring structure": 0.001542137166232012, "unique maximal ideal": 0.0016924099748353433, "maximal ideal": 0.006994794043624981, "ring structure": 0.012746905608932614, "unique maximal": 0.014052048455559032, "local ring": 0.01778182519769534, "I.prime": 0.03514374828050166, "compl": 0.05611144792238854, "prime.local": 0.05611144792238854, "maximal": 0.058729421122071655, "ideal": 0.058729421122071655, "ring": 0.07404538123493588, "structure": 0.08499157470006824, "image": 0.1179760024298328, "localization": 0.1179760024298328, "unique": 0.1179760024298328, "local": 0.1179760024298328}}, {"docstring": "A subfield is closed under inverses.\n", "keywords": {"closed under inverses": 0.04940384002065631, "subfield is closed": 0.09700399286574239, "inverses": 0.15831692877998726, "subfield": 0.29736558256021506, "closed": 0.29736558256021506}}, {"docstring": "For presheaves valued in a concrete category, whose forgetful functor reflects isomorphisms and preserves limits, the sheaf condition in terms of unique gluings is equivalent to the usual one in terms of equalizer diagrams.\n", "keywords": {"forgetful functor reflects": 0.0021825692466523336, "functor reflects isomorphisms": 0.0021825692466523336, "concrete category": 0.011069274448723401, "preserves limits": 0.011069274448723401, "equalizer diagrams": 0.011069274448723401, "condition in terms": 0.01193891321301122, "terms of unique": 0.01193891321301122, "terms of equalizer": 0.01193891321301122, "presheaves valued": 0.016590423018674662, "forgetful functor": 0.016590423018674662, "functor reflects": 0.016590423018674662, "reflects isomorphisms": 0.016590423018674662, "isomorphisms and preserves": 0.016590423018674662, "sheaf condition": 0.016590423018674662, "unique gluings": 0.016590423018674662, "gluings is equivalent": 0.016590423018674662, "terms": 0.04617690064479968, "category": 0.08570033504272234, "limits": 0.08570033504272234, "diagrams": 0.08570033504272234}}, {"docstring": "A vector is in the same ray as a positive multiple of one it is in the same ray as.\n", "keywords": {"positive multiple": 0.037831312533597124, "ray": 0.07334489383741183, "vector": 0.19092478917347616, "positive": 0.19092478917347616, "multiple": 0.19092478917347616}}, {"docstring": " A set `s` is in the neighbourhood of `a` iff there is some basis set `t`, which contains `a` and is itself contained in `s`.\n", "keywords": {"basis set": 0.014618695703961359, "set": 0.05201485183844375, "iff": 0.09329120537733218, "neighbourhood": 0.1384995633470844, "basis": 0.1384995633470844, "contained": 0.1384995633470844}}, {"docstring": "**Alias** of sq_pos_of_ne_zero`.\n", "keywords": {"Alias": 0.030396371632413578, "pos": 0.04491197687864554}}, {"docstring": " The `list` of a vector after a `reverse`, retrieved by `to_list` is equal to the `list.reverse` after retrieving a vector's `to_list`.\n", "keywords": {"list": 0.012616079950459014, "retrieving a vector": 0.02536363305303039, "reverse": 0.06037786452709367, "list.reverse": 0.06037786452709367, "vector": 0.08165986892166045, "retrieved": 0.10252384836042068, "equal": 0.15145892749810547, "retrieving": 0.15145892749810547}}, {"docstring": " If `0 \u2264 r < 1`, then `n * r ^ n` tends to zero. This is a specialized version of `tendsto_self_mul_const_pow_of_abs_lt_one`, singled out for ease of application.\n", "keywords": {"ease of application": 0.11755105063023073, "specialized version": 0.165573765898185, "tendsto": 0.17881754828257995, "mul": 0.17881754828257995, "const": 0.17881754828257995, "pow": 0.17881754828257995, "abs": 0.17881754828257995, "singled": 0.2790829227183407, "application": 0.2790829227183407, "specialized": 0.37689977775222827, "version": 0.37689977775222827, "ease": 0.37689977775222827}}, {"docstring": "A disjoint union of complete metric spaces is complete.\n", "keywords": {"complete metric spaces": 0.010962043841203115, "disjoint union": 0.03663237450220032, "metric spaces": 0.03663237450220032, "complete metric": 0.05417025203414716, "union of complete": 0.11793310824193863, "spaces is complete": 0.11793310824193863, "complete": 0.13667842094541144, "disjoint": 0.1879836817695587, "union": 0.1879836817695587, "metric": 0.1879836817695587, "spaces": 0.1879836817695587}}, {"docstring": "**Alias** of the reverse direction of asymptotics.is_o_iff_tendsto`.\n", "keywords": {"direction of asymptotics.is": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "tendsto": 0.04491197687864554, "asymptotics.is": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "If `x` and `y` are joined in the set `F`, then they are joined in the subtype `F`.\n", "keywords": {"joined": 0.07571113878390312, "set": 0.11984314898676356, "subtype": 0.11984314898676356}}, {"docstring": "**Alias** of the forward direction of measurable_iff_comap_le`.\n", "keywords": {"direction of measurable": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "comap": 0.04491197687864554, "measurable": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " A variation of the emetric characterization of Cauchy sequences that deals with `\u211d\u22650` upper bounds.\n", "keywords": {"upper bounds": 0.009239332327148086, "characterization of Cauchy": 0.013797198203993007, "Cauchy sequences": 0.013797198203993007, "emetric characterization": 0.02570861714399338, "sequences that deals": 0.02570861714399338, "Cauchy": 0.08596317751626563, "upper": 0.09568045026443411, "bounds": 0.09568045026443411, "variation": 0.15831692877998726, "emetric": 0.15831692877998726, "characterization": 0.15831692877998726, "sequences": 0.15831692877998726, "deals": 0.15831692877998726}}, {"docstring": "The kernel of `A \u2192\u2090[R\u2081] I.quotient` is `I`.\n", "keywords": {"I.quotient": 0.030396371632413578, "kernel": 0.29736558256021506}}, {"docstring": "If a function is analytic on a set `s`, so is its Fr\u00e9chet derivative.\n", "keywords": {"Fr\u00e9chet derivative": 0.008293207122436794, "function is analytic": 0.02570861714399338, "Fr\u00e9chet": 0.08596317751626563, "set": 0.09568045026443411, "derivative": 0.09568045026443411, "function": 0.15831692877998726, "analytic": 0.15831692877998726}}, {"docstring": "**Alias** of the reverse direction of le_sub_iff_add_le'`.\n", "keywords": {"reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "add": 0.04491197687864554, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "The subring generated by a set includes the set.\n", "keywords": {"subring generated": 0.037831312533597124, "set includes": 0.0562460611896591, "includes the set": 0.12194096740933036, "set": 0.13945519496053638, "subring": 0.19092478917347616, "generated": 0.19092478917347616, "includes": 0.19092478917347616}}, {"docstring": "Shows that the partial denominators `b\u1d62` correspond to an integer.\n", "keywords": {"partial denominators": 0.04940384002065631, "Shows": 0.15831692877998726, "denominators": 0.15831692877998726, "correspond": 0.15831692877998726, "integer": 0.15831692877998726, "partial": 0.29736558256021506}}, {"docstring": "The product of two Chebyshev polynomials is the sum of two other Chebyshev polynomials.\n", "keywords": {"Chebyshev polynomials": 0.012345575238852761, "Chebyshev": 0.053042023920720195, "polynomials": 0.11357121248292479, "product": 0.2005079697193566, "sum": 0.2005079697193566}}, {"docstring": " The `n+1`st term of the upper central series `H i` has underlying set equal to the `x` such that `\u2045x,G\u2046 \u2286 H n`\n", "keywords": {"upper central series": 0.0010606143890052174, "underlying set equal": 0.0016012214736657916, "central series": 0.00899321792126428, "upper central": 0.013527995261974615, "underlying set": 0.013527995261974615, "set equal": 0.013527995261974615, "series": 0.0771485953923296, "term": 0.1155310835876123, "upper": 0.1155310835876123, "central": 0.1155310835876123, "underlying": 0.1155310835876123, "set": 0.1155310835876123, "equal": 0.1155310835876123}}, {"docstring": "The Legendre symbol is multiplicative in `a` for `p` fixed.\n", "keywords": {"fixed": 0.04491197687864554, "Legendre symbol": 0.04498862876540802, "symbol is multiplicative": 0.09700399286574239, "Legendre": 0.1447773057422032, "symbol": 0.29736558256021506, "multiplicative": 0.29736558256021506}}, {"docstring": "Given a bilinear form `B` and some `x` such that `B x x \u2260 0`, the span of the singleton of `x`  is complement to its orthogonal complement.\n", "keywords": {"bilinear form": 0.009386651690650429, "orthogonal complement": 0.016245817372079578, "complement": 0.07030442419566416, "form": 0.08179429269966654, "bilinear": 0.11369206228658875, "span": 0.11369206228658875, "singleton": 0.11369206228658875, "orthogonal": 0.11369206228658875}}, {"docstring": "In a semigroup, the product of right-regular elements is right-regular.\n", "keywords": {"right-regular elements": 0.0562460611896591, "semigroup": 0.11718348279991213, "product of right-regular": 0.12194096740933036, "elements is right-regular": 0.12194096740933036, "right-regular": 0.13945519496053638, "product": 0.19092478917347616, "elements": 0.19092478917347616}}, {"docstring": " If `\u03b1` is a nontrivial separable dense linear order, then there exists a countable dense set `s : set \u03b1` that contains neither top nor bottom elements of `\u03b1`. For a dense set containing both bot and top elements, see `exists_countable_dense_bot_top`.\n", "keywords": {"dense linear order": 0.013825852591965455, "separable dense linear": 0.01920946089133563, "nontrivial separable dense": 0.019209460891335635, "linear order": 0.030368843863455505, "nontrivial separable": 0.041507494353651454, "countable dense set": 0.06558814019825597, "bottom elements": 0.07441471344544057, "dense set": 0.07686232587094022, "separable dense": 0.08702489432951085, "dense linear": 0.08702489432951085, "dense": 0.10025636725122096, "set": 0.11075112217718404, "top": 0.13594093548858074, "order": 0.14763981133663662, "countable dense": 0.16161815903621052, "top elements": 0.1648090485533502, "exists": 0.17347017311161486, "countable": 0.17347017311161486, "elements": 0.17347017311161486, "nontrivial": 0.19963287398968832}}, {"docstring": "The exponent of a generalized eigenvalue is never 0.\n", "keywords": {"generalized eigenvalue": 0.09700399286574239, "exponent": 0.29736558256021506, "generalized": 0.29736558256021506, "eigenvalue": 0.29736558256021506}}, {"docstring": " If `\u03b4` is small enough, a `(1-\u03b4)`-separated set in the ball of radius `2` also has cardinality at most `multiplicity E`.\n", "keywords": {"separated set": 0.04940384002065631, "ball of radius": 0.04940384002065631, "separated": 0.15831692877998726, "radius": 0.15831692877998726, "multiplicity": 0.15831692877998726, "small": 0.29736558256021506, "set": 0.29736558256021506, "ball": 0.29736558256021506, "cardinality": 0.29736558256021506}}, {"docstring": "The only prime divisor of positive prime power `p^k` is `p` itself\n", "keywords": {"positive prime power": 0.006901478775605423, "prime power": 0.03378800767844735, "divisor of positive": 0.037831312533597124, "prime divisor": 0.0562460611896591, "positive prime": 0.0562460611896591, "power": 0.11718348279991213, "prime": 0.13945519496053638, "divisor": 0.19092478917347616, "positive": 0.19092478917347616}}, {"docstring": "If two points belong to some set, their edistance is bounded by the diameter of the set\n", "keywords": {"points belong": 0.035715520099333646, "edistance is bounded": 0.035715520099333646, "set": 0.07030442419566416, "points": 0.18569843656348187, "belong": 0.18569843656348187, "edistance": 0.18569843656348187, "bounded": 0.18569843656348187, "diameter": 0.18569843656348187}}, {"docstring": "Distinct elements of a set of sets partitioning \u03b1 are disjoint.\n", "keywords": {"Distinct elements": 0.022138323509052035, "sets partitioning": 0.05417025203414716, "Distinct": 0.11521656054299435, "disjoint": 0.11521656054299435, "elements": 0.1879836817695587, "partitioning": 0.1879836817695587, "set of sets": 0.2470711517255815, "set": 0.2733568418908229, "sets": 0.2733568418908229}}, {"docstring": "The function `exp_neg_inv_glue` is positive on `(0, +\u221e)`.\n", "keywords": {"exp": 0.04491197687864554, "neg": 0.04491197687864554, "inv": 0.04491197687864554, "glue": 0.04491197687864554, "function": 0.15831692877998726, "positive": 0.29736558256021506}}, {"docstring": "The ring of Witt Vectors of a perfect field of positive characteristic is a DVR.\n", "keywords": {"Witt Vectors": 0.00444318827900726, "ring of Witt": 0.007743432063478832, "perfect field": 0.013527995261974615, "field of positive": 0.013527995261974615, "positive characteristic": 0.013527995261974615, "DVR": 0.04776309965539685, "Witt": 0.06650965107397505, "Vectors": 0.06650965107397505, "ring": 0.1155310835876123, "perfect": 0.1155310835876123, "field": 0.1155310835876123, "positive": 0.1155310835876123, "characteristic": 0.1155310835876123}}, {"docstring": "If all elements of a `finset` satisfy the predicate `p`, `s.filter p` is `s`.\n", "keywords": {"satisfy the predicate": 0.009239332327148086, "finset": 0.04491197687864554, "satisfy": 0.09568045026443411, "predicate": 0.09568045026443411, "s.filter": 0.09568045026443411, "elements": 0.15831692877998726}}, {"docstring": "See also `cardinal.aleph_0_le_mul_iff`.\n", "keywords": {"cardinal.aleph": 0.04491197687864554, "mul": 0.04491197687864554, "iff": 0.04491197687864554}}, {"docstring": " Special case of the sandwich theorem: if the norm of `f` is bounded by a real function `g` which tends to `0`, then `f` tends to `0`.\n", "keywords": {"Special case": 0.015380821171891606, "sandwich theorem": 0.015380821171891606, "real function": 0.015380821171891606, "Special": 0.09568045026443411, "theorem": 0.09568045026443411, "function": 0.09568045026443411, "case": 0.15831692877998726, "sandwich": 0.15831692877998726, "norm": 0.15831692877998726, "bounded": 0.15831692877998726, "real": 0.15831692877998726}}, {"docstring": "The intersection of a disjoint covering by two open sets of a clopen set will be clopen.\n", "keywords": {"disjoint covering": 0.039481144315219374, "open sets": 0.05913243875864445, "clopen set": 0.08940622963610957, "clopen": 0.14323823713631006, "intersection": 0.19488865479360015, "disjoint": 0.19488865479360015, "covering": 0.19488865479360015, "open": 0.19488865479360015, "sets": 0.28647647427262013, "set": 0.28647647427262013}}, {"docstring": "The injection of `Y` in the optimal coupling between `X` and `Y` is an isometry.\n", "keywords": {"optimal coupling": 0.02570861714399338, "isometry": 0.09568045026443411, "injection": 0.15831692877998726, "optimal": 0.15831692877998726, "coupling": 0.15831692877998726}}, {"docstring": "Elements of an add left cancel semigroup are add-left-regular.\n", "keywords": {"add left cancel": 0.03339840940482845, "left cancel semigroup": 0.03339840940482845, "add left": 0.09700399286574239, "left cancel": 0.09700399286574239, "cancel semigroup": 0.09700399286574239, "Elements": 0.15831692877998726, "add": 0.29736558256021506, "left": 0.29736558256021506, "cancel": 0.29736558256021506, "semigroup": 0.29736558256021506}}, {"docstring": " If `\u2225x + y\u2225 = \u2225x\u2225 + \u2225y\u2225` implies that `x y : E` are in the same ray, then `E` is a strictly convex space.\n", "keywords": {"strictly convex space": 0.0006400448072512631, "convex space": 0.0065920978564317735, "strictly convex": 0.009239332327148086, "implies": 0.06844581806138879, "ray": 0.06844581806138879, "space": 0.06844581806138879, "strictly": 0.09568045026443411, "convex": 0.09568045026443411}}, {"docstring": "The recurrence relation for the indefinite version of the `\u0393` function.\n", "keywords": {"recurrence relation": 0.013527995261974615, "indefinite version": 0.013527995261974615, "function": 0.04491197687864554, "recurrence": 0.1155310835876123, "relation": 0.1155310835876123, "indefinite": 0.1155310835876123, "version": 0.1155310835876123}}, {"docstring": " If a function `f` has a power series `p` around `x`, then the function `z \u21a6 f (z - y)` has the same power series around `x + y`.\n", "keywords": {"power series": 0.027200199006318638, "function": 0.07915846438999363, "power": 0.11357121248292479, "series": 0.11357121248292479}}, {"docstring": "See `add_tsub_le_assoc` for an inequality.\n", "keywords": {"add": 0.04491197687864554, "tsub": 0.04491197687864554, "assoc": 0.04491197687864554, "inequality": 0.15831692877998726}}, {"docstring": " For positive values, the derivative of the `n`-th auxiliary function `f_aux n` is the `n+1`-th auxiliary function.\n", "keywords": {"auxiliary function": 0.004266969724163102, "function": 0.03756449529879747, "auxiliary": 0.05631466302318476, "aux": 0.09856372721054514, "positive": 0.14591593823007556, "derivative": 0.14591593823007556}}, {"docstring": " A random variable that `has_pdf` transformed under a `quasi_measure_preserving` map also `has_pdf` if `(map g (map X \u2119)).have_lebesgue_decomposition \u03bc`.  `quasi_measure_preserving_has_pdf'` is more useful in the case we are working with a probability measure and a real-valued random variable.\n", "keywords": {"random variable": 0.04171308063017994, "real-valued random variable": 0.0466568757531128, "map": 0.0484055212663015, "quasi": 0.05571757803511688, "preserving": 0.05571757803511688, "pdf": 0.07972465777952398, "lebesgue": 0.09475804842995243, "measure": 0.13027357707049847, "random": 0.13874632079022273, "variable": 0.13874632079022273, "transformed": 0.14056703082011543, "decomposition": 0.14056703082011543, "real-valued random": 0.14266832917659433, "probability measure": 0.21336606694131313, "case": 0.44994135674248886, "working": 0.44994135674248886, "probability": 0.44994135674248886, "real-valued": 0.44994135674248886}}, {"docstring": "Like `submodule.map_mul`, but with the multiplication reversed.\n", "keywords": {"submodule.map": 0.04491197687864554, "mul": 0.04491197687864554, "multiplication reversed": 0.04940384002065631, "reversed": 0.15831692877998726, "multiplication": 0.29736558256021506}}, {"docstring": "Every vector in `std_simplex \ud835\udd5c \u03b9` has `max`-norm at most `1`.\n", "keywords": {"std": 0.04491197687864554, "max": 0.04491197687864554, "simplex": 0.15831692877998726, "norm": 0.15831692877998726, "vector": 0.29736558256021506}}, {"docstring": " An alternative definition of the gauge using scalar multiplication on the element rather than on the set.\n", "keywords": {"alternative definition": 0.013527995261974615, "gauge using scalar": 0.013527995261974615, "scalar multiplication": 0.013527995261974615, "set": 0.0771485953923296, "alternative": 0.1155310835876123, "definition": 0.1155310835876123, "gauge": 0.1155310835876123, "scalar": 0.1155310835876123, "multiplication": 0.1155310835876123, "element": 0.1155310835876123}}, {"docstring": "**Alias** of pgame.lf_of_le_of_lf`.\n", "keywords": {"Alias": 0.030396371632413578, "pgame.lf": 0.0771485953923296}}, {"docstring": "See also `ideal.mem_quotient_iff_mem_sup` if the assumption `I \u2264 J` is not available.\n", "keywords": {"ideal.mem": 0.04491197687864554, "quotient": 0.04491197687864554, "iff": 0.04491197687864554, "mem": 0.04491197687864554, "assumption": 0.15831692877998726}}, {"docstring": "A sort of triangle inequality.\n", "keywords": {"triangle inequality": 0.04940384002065631, "sort of triangle": 0.09700399286574239, "inequality": 0.15831692877998726, "sort": 0.29736558256021506, "triangle": 0.29736558256021506}}, {"docstring": " Reformulate in the `structure_groupoid` namespace the compatibility condition of charts in a charted space admitting a structure groupoid, to make it more easily accessible with dot notation.\n", "keywords": {"charted space admitting": 0.006729036199826389, "namespace the compatibility": 0.020921027161117343, "dot notation": 0.020921027161117343, "compatibility condition": 0.03467504983336206, "condition of charts": 0.03467504983336206, "charted space": 0.03467504983336206, "space admitting": 0.03467504983336206, "easily accessible": 0.03467504983336206, "accessible with dot": 0.03467504983336206, "structure groupoid": 0.03772615166492731, "groupoid": 0.06880581048934313, "admitting a structure": 0.11142126287965812, "Reformulate": 0.11193974053503682, "namespace": 0.11193974053503682, "notation": 0.11193974053503682, "structure": 0.1320914290199833, "compatibility": 0.1830655221354772, "condition": 0.1830655221354772, "charts": 0.1830655221354772, "charted": 0.1830655221354772}}, {"docstring": "**Alias** of `left.add_neg`.\n", "keywords": {"Alias": 0.030396371632413578, "left.add": 0.04491197687864554, "neg": 0.04491197687864554}}, {"docstring": "A finite field has prime power cardinality.\n", "keywords": {"prime power cardinality": 0.016559150827736194, "power cardinality": 0.04940384002065631, "finite field": 0.09700399286574239, "field has prime": 0.09700399286574239, "prime power": 0.09700399286574239, "cardinality": 0.15831692877998726, "finite": 0.29736558256021506, "field": 0.29736558256021506, "prime": 0.29736558256021506, "power": 0.29736558256021506}}, {"docstring": "The unique maximal ideal of the localization at `I.prime_compl` lies over the ideal `I`.\n", "keywords": {"unique maximal ideal": 0.0034967383756502376, "unique maximal": 0.018641876658774394, "maximal ideal": 0.024893945799064354, "I.prime": 0.03402676245250578, "compl": 0.05331699930238388, "ideal": 0.08977403887827273, "lies": 0.09101163530720666, "unique": 0.135280142484453, "maximal": 0.135280142484453, "localization": 0.135280142484453}}, {"docstring": "Negating the orientation negates the value of `oangle`.\n", "keywords": {"Negating the orientation": 0.015380821171891606, "orientation negates": 0.02570861714399338, "oangle": 0.04491197687864554, "Negating": 0.09568045026443411, "orientation": 0.15831692877998726, "negates": 0.15831692877998726}}, {"docstring": "Let `f` and `g` be two maps to the same commutative additive monoid. This lemma gives a sufficient condition for comparison of the filter `at_top.map (\u03bb s, \u2211 b in s, f b)` with `at_top.map (\u03bb s, \u2211 b in s, g b)`. This is useful to compare the set of limit points of `\u2211 b in s, f b` as `s \u2192 at_top` with the similar set for `g`.\n", "keywords": {"commutative additive monoid": 0.002318510720929846, "additive monoid": 0.015946439970704558, "commutative additive": 0.020225511349197704, "top.map": 0.08029913272768167, "monoid": 0.11147853784320853, "maps": 0.14079967931199863, "commutative": 0.14079967931199863, "additive": 0.14079967931199863, "sufficient condition": 0.15148695929723774, "condition for comparison": 0.15148695929723774, "set": 0.2181985860053738, "similar set": 0.24661042425622437, "limit points": 0.2586425000167907, "filter": 0.30349938342575905, "top": 0.31807004650910337, "lemma": 0.36270881646612724, "sufficient": 0.36270881646612724, "condition": 0.36270881646612724, "comparison": 0.36270881646612724, "compare": 0.4533135999375753}}, {"docstring": "A group is finitely generated if and only if it is finitely generated as a monoid.\n", "keywords": {"finitely generated": 0.018650942614307144, "group is finitely": 0.03278451112147437, "finitely": 0.07915846438999363, "generated": 0.11357121248292479, "monoid": 0.12363091320521931, "group": 0.2005079697193566}}, {"docstring": "A rewrite lemma for `padic_val_rat p (q^k)` with condition `q \u2260 0`.\n", "keywords": {"rewrite lemma": 0.02570861714399338, "padic": 0.04491197687864554, "val": 0.04491197687864554, "rat": 0.09568045026443411, "condition": 0.09568045026443411, "rewrite": 0.15831692877998726, "lemma": 0.15831692877998726}}, {"docstring": "The chain rule.\n", "keywords": {"chain rule": 0.04940384002065631, "rule": 0.15831692877998726, "chain": 0.29736558256021506}}, {"docstring": " If a function `f` is differentiable and `f'` is strictly monotone on `\u211d` then `f` is strictly convex.\n", "keywords": {"strictly convex": 0.013544593182520747, "strictly monotone": 0.020241076619814977, "strictly": 0.07162298286637953, "function": 0.09329120537733218, "convex": 0.09329120537733218, "differentiable": 0.1384995633470844, "monotone": 0.1384995633470844}}, {"docstring": "**Alias** of the forward direction of left.one_lt_inv_iff`.\n", "keywords": {"direction of left.one": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "inv": 0.04491197687864554, "iff": 0.04491197687864554, "left.one": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " Given a closed nonempty subset `s` of `\u03a0 (n : \u2115), E n`, there exists a retraction onto this set, i.e., a continuous map with range equal to `s`, equal to the identity on `s`.\n", "keywords": {"closed nonempty subset": 0.0015868982743929682, "nonempty subset": 0.011752516585960321, "closed nonempty": 0.017595046402022366, "exists a retraction": 0.017595046402022366, "continuous map": 0.017595046402022366, "map with range": 0.017595046402022366, "range equal": 0.017808697046944787, "equal": 0.06653164730624736, "subset": 0.0883382645966668, "set": 0.0883382645966668, "closed": 0.13149453879183629, "nonempty": 0.13149453879183629, "exists": 0.13149453879183629, "retraction": 0.13149453879183629, "continuous": 0.13149453879183629, "map": 0.13149453879183629, "range": 0.13149453879183629, "identity": 0.13149453879183629}}, {"docstring": " Given `pb : power_basis K S`, then the norm of `pb.gen` is `(-1) ^ pb.dim * coeff (minpoly K pb.gen) 0`.\n", "keywords": {"minpoly K pb.gen": 0.038807727509031706, "power": 0.05331699930238388, "pb.dim": 0.05331699930238388, "coeff": 0.05331699930238388, "pb.gen": 0.069255433448279, "basis": 0.11246769819744627, "minpoly": 0.11246769819744627, "norm": 0.18385948854246909}}, {"docstring": " To prove a property of a finite product, it suffices to prove that the property is multiplicative and holds on the factors.\n", "keywords": {"finite product": 0.022885248721446715, "multiplicative and holds": 0.037831312533597124, "suffices to prove": 0.04212793185246166, "prove": 0.10586606907408062, "product": 0.11718348279991213, "factors": 0.11718348279991213, "property is multiplicative": 0.12194096740933039, "property": 0.13945519496053638, "finite": 0.19092478917347616, "suffices": 0.19092478917347616, "multiplicative": 0.19092478917347616, "holds": 0.19092478917347616, "prove a property": 0.20081151690422566}}, {"docstring": "Polarization identity: The real inner product, in terms of the norm.\n", "keywords": {"Polarization identity": 0.009239332327148086, "real inner product": 0.015380821171891606, "Polarization": 0.09568045026443411, "identity": 0.09568045026443411, "product": 0.09568045026443411, "norm": 0.09568045026443411, "real": 0.15831692877998726, "terms": 0.15831692877998726}}, {"docstring": "The second projection in a product is a topological fiber bundle.\n", "keywords": {"topological fiber bundle": 0.0025258761156662004, "fiber bundle": 0.015380821171891606, "topological fiber": 0.02570861714399338, "bundle": 0.09568045026443411, "projection": 0.15831692877998726, "product": 0.15831692877998726, "topological": 0.15831692877998726, "fiber": 0.15831692877998726}}, {"docstring": "When `p` is prime, then the totient of `p ^ n` is `p ^ (n - 1) * (p - 1)`\n", "keywords": {"prime": 0.06844581806138879, "totient": 0.09568045026443411}}, {"docstring": "The presheaf of not-necessarily-continuous functions to a target type `T` satsifies the sheaf condition.\n", "keywords": {"target type": 0.015380821171891606, "satsifies the sheaf": 0.015380821171891606, "sheaf condition": 0.015380821171891606, "functions": 0.09568045026443411, "type": 0.09568045026443411, "satsifies": 0.09568045026443411, "condition": 0.09568045026443411, "presheaf": 0.15831692877998726, "target": 0.15831692877998726, "sheaf": 0.15831692877998726}}, {"docstring": "The function `x ^ (1 / x)` tends to `1` at `+\u221e`.\n", "keywords": {"function": 0.09568045026443411}}, {"docstring": "This lemma corresponds to one of the coherence laws for duals in rigid categories, see  `category_theory.monoidal.rigid`.\n", "keywords": {"category": 0.04491197687864554, "rigid categories": 0.04940384002065631, "lemma corresponds": 0.09700399286574239, "coherence laws": 0.09700399286574239, "laws for duals": 0.09700399286574239, "duals in rigid": 0.09700399286574239, "categories": 0.15831692877998726, "lemma": 0.29736558256021506, "corresponds": 0.29736558256021506, "coherence": 0.29736558256021506, "laws": 0.29736558256021506, "duals": 0.29736558256021506, "rigid": 0.29736558256021506}}, {"docstring": "Cardinality of an `Ico` of finsets.\n", "keywords": {"Ico": 0.030396371632413578, "Cardinality": 0.09568045026443411, "finsets": 0.09568045026443411}}, {"docstring": "The constant coefficient of the minimal polynomial of `x` is `0` if and only if `x = 0`.\n", "keywords": {"constant coefficient": 0.02570861714399338, "minimal polynomial": 0.02570861714399338, "constant": 0.15831692877998726, "coefficient": 0.15831692877998726, "minimal": 0.15831692877998726, "polynomial": 0.15831692877998726}}, {"docstring": " Minkowski inequality: the `L_p` seminorm of the infinite sum of two vectors is less than or equal to the infinite sum of the `L_p`-seminorms of the summands, if these infinite sums both exist. A version for `\u211d`-valued functions. For an alternative version, convenient if the infinite sums are not already expressed as `p`-th powers, see `Lp_add_le_tsum_of_nonneg`.\n", "keywords": {"Minkowski inequality": 0.021335642665532867, "infinite sum": 0.03520396294546179, "infinite": 0.059289028666558746, "seminorm": 0.09771687757648555, "seminorms": 0.09771687757648555, "sum": 0.13867810941444397, "sums": 0.13867810941444397, "sums both exist": 0.1413615485961721, "Minkowski": 0.14453353355146054, "inequality": 0.14453353355146054, "summands": 0.14453353355146054, "exist": 0.14453353355146054, "valued functions": 0.15841043333053947, "vectors": 0.18077989376880668, "equal": 0.18077989376880668, "version": 0.21399843061103183, "alternative version": 0.2916367408453298, "valued": 0.369794681572942, "functions": 0.369794681572942, "add": 0.3857852046458176}}, {"docstring": " If a function has zero Fr\u00e9chet derivative at every point of a convex set, then it is a constant on this set.\n", "keywords": {"Fr\u00e9chet derivative": 0.00992042969782043, "convex set": 0.013774556686415806, "set": 0.05021947817312067, "Fr\u00e9chet": 0.07261214632111582, "function": 0.135280142484453, "derivative": 0.135280142484453, "point": 0.135280142484453, "convex": 0.135280142484453, "constant": 0.135280142484453}}, {"docstring": " If `c` is a colimiting binary coproduct cocone, and we have an initial object, then we have `is_pushout 0 0 c.inl c.inr` (where each `0` is the unique morphism from the initial object).\n", "keywords": {"binary coproduct cocone": 0.0018272602444849633, "colimiting binary coproduct": 0.0027442145684420877, "initial object": 0.004901287485935649, "c.inl c.inr": 0.008653024715792958, "coproduct cocone": 0.012904998963208847, "colimiting binary": 0.019286283660143136, "binary coproduct": 0.019286283660143136, "unique morphism": 0.019286283660143136, "object": 0.03421799084244534, "pushout": 0.05430009520648986, "initial": 0.07092334359166409, "cocone": 0.09262176965879712, "c.inl": 0.09262176965879712, "c.inr": 0.09262176965879712, "colimiting": 0.13755493784698053, "binary": 0.13755493784698053, "coproduct": 0.13755493784698053, "unique": 0.13755493784698053, "morphism": 0.13755493784698053}}, {"docstring": "A `forget\u2082 C D` forgetful functor between concrete categories `C` and `D` where `forget C` reflects isomorphisms, itself reflects isomorphisms.\n", "keywords": {"reflects isomorphisms": 0.005968438570165026, "forgetful functor": 0.014750006497112582, "concrete categories": 0.014750006497112582, "functor between concrete": 0.02198562329295767, "isomorphisms": 0.03787863113987834, "forget": 0.05676635054588953, "reflects": 0.07785437699288038, "forgetful": 0.09910285154256718, "categories": 0.09910285154256718, "functor": 0.14667192704153995, "concrete": 0.14667192704153995}}, {"docstring": " If a function `f` is analytic on a set `s` and `g` is linear, then `g \u2218 f` is analytic on `s`.\n", "keywords": {"analytic": 0.05332403764722467, "function": 0.09492398510093508, "set": 0.09492398510093508, "linear": 0.09492398510093508}}, {"docstring": "A set in a linear ordered field is strictly convex if and only if it is convex.\n", "keywords": {"linear ordered field": 0.007041919398291632, "linear ordered": 0.035715520099333646, "ordered field": 0.035715520099333646, "field is strictly": 0.035715520099333646, "strictly convex": 0.05259515133015473, "convex": 0.13453835116331675, "set": 0.18569843656348187, "linear": 0.18569843656348187, "ordered": 0.18569843656348187, "field": 0.18569843656348187, "strictly": 0.18569843656348187}}, {"docstring": "If `C` has a terminal object and binary products, then it has finite products.\n", "keywords": {"binary products": 0.027673082137283082, "finite products": 0.027673082137283082, "terminal object": 0.03663237450220032, "object and binary": 0.03663237450220032, "products": 0.07162298286637953, "terminal": 0.1879836817695587, "object": 0.1879836817695587, "binary": 0.1879836817695587, "finite": 0.1879836817695587}}, {"docstring": " Minkowski inequality: the `L_p` seminorm of the sum of two vectors is less than or equal to the sum of the `L_p`-seminorms of the summands. A version for `\u211d`-valued nonnegative functions.\n", "keywords": {"Minkowski inequality": 0.011440508155383859, "valued nonnegative functions": 0.04022814553430709, "sum": 0.0470181469610055, "seminorm": 0.0708556241860872, "seminorms": 0.0708556241860872, "Minkowski": 0.10635367123359185, "inequality": 0.10635367123359185, "summands": 0.10635367123359185, "valued nonnegative": 0.11768545655046211, "nonnegative functions": 0.11768545655046211, "vectors": 0.139405236860154, "equal": 0.139405236860154, "valued": 0.2924525188766874, "functions": 0.2924525188766874, "version": 0.3600375770318291, "nonnegative": 0.3600375770318291}}, {"docstring": " A subspace is less than another if and only if it is less than or equal to the second subspace and there is a point only in the second.\n", "keywords": {"subspace": 0.09770854302279938, "equal": 0.14390902704051098, "point": 0.14390902704051098}}, {"docstring": " this is slightly different from `strongly_measurable.piecewise`. It can be used to show `strongly_measurable (ite (x=0) 0 1)` by `exact strongly_measurable.ite (measurable_set_singleton 0) strongly_measurable_const strongly_measurable_const`, but replacing `strongly_measurable.ite` by `strongly_measurable.piecewise` in that example proof does not work.\n", "keywords": {"strongly": 0.03299912200043629, "measurable": 0.04145107130156347, "measurable.piecewise": 0.06270095915196637, "const strongly": 0.0838818575221885, "exact strongly": 0.08846935704494585, "measurable.ite": 0.11679553267683736, "slightly": 0.16516041586702657, "const": 0.16751575985625566, "ite": 0.2936103161351247, "set": 0.2936103161351247, "singleton": 0.2936103161351247, "show": 0.3518651371493423, "exact": 0.3518651371493423, "replacing": 0.3518651371493423, "work": 0.3518651371493423, "proof": 0.40726465809233087}}, {"docstring": " Coercing a subspace to a set then taking the affine span produces the original subspace.\n", "keywords": {"affine span produces": 0.006644547988061552, "set then taking": 0.03439110359613085, "taking the affine": 0.03439110359613085, "affine span": 0.03439110359613085, "span produces": 0.03439110359613085, "produces the original": 0.03439110359613085, "original subspace": 0.05033870131288873, "Coercing a subspace": 0.06831905985192865, "Coercing": 0.11145728654016383, "subspace": 0.1314201551237121, "set": 0.1823394614884183, "taking": 0.1823394614884183, "affine": 0.1823394614884183, "span": 0.1823394614884183, "produces": 0.1823394614884183, "original": 0.1823394614884183}}, {"docstring": "The block matrix `A.from_blocks 0 0 D` is diagonal if `A` and `D` are diagonal.\n", "keywords": {"A.from": 0.03625524040669144, "block matrix": 0.0381667238781621, "matrix": 0.12363091320521931, "diagonal": 0.14868279128010753, "block": 0.29736558256021506, "blocks": 0.29736558256021506}}, {"docstring": "The strong pigeonhole principle for finitely many pigeons and pigeonholes. There is a pigeonhole with at least as many pigeons as the ceiling of the average number of pigeons across all pigeonholes.\n", "keywords": {"strong pigeonhole principle": 0.021292131221609865, "principle for finitely": 0.0401461328390386, "strong pigeonhole": 0.09738126245499545, "pigeonhole principle": 0.09738126245499545, "pigeons": 0.11746760768564829, "finitely many pigeons": 0.12189306843591761, "strong": 0.19646024408037197, "principle": 0.19646024408037197, "finitely": 0.19646024408037197, "pigeonhole": 0.22584640665548655, "average number": 0.26722243963997633, "number of pigeons": 0.4460262236086639, "ceiling": 0.45920862335777335, "average": 0.45920862335777335, "number": 0.45920862335777335, "pigeons and pigeonholes": 0.5920298137377745}}, {"docstring": "Extra simp lemma that `dsimp` can use. `simp` will never use this.\n", "keywords": {"Extra simp lemma": 0.02500995304854036, "dsimp": 0.07915015343857928, "Extra simp": 0.08453883749566703, "simp lemma": 0.14033512486368607, "Extra": 0.16205454282434614, "simp": 0.2405027004070563, "lemma": 0.25584912197094006}}, {"docstring": "Postcomposing `f` with `prod.fst` is continuous\n", "keywords": {"Postcomposing": 0.04491197687864554, "prod.fst": 0.04491197687864554, "continuous": 0.15831692877998726}}, {"docstring": "**Alias** of lt_of_le_not_le`.\n", "keywords": {"Alias": 0.030396371632413578}}, {"docstring": " A single-point face equals the 0-simplex constructed with `mk_of_point`.\n", "keywords": {"single-point face equals": 0.03339840940482845, "point": 0.04491197687864554, "single-point face": 0.09700399286574239, "face equals": 0.09700399286574239, "constructed": 0.15831692877998726, "single-point": 0.29736558256021506, "face": 0.29736558256021506, "equals": 0.29736558256021506}}, {"docstring": "A stronger version of `mul_left_injective`\n", "keywords": {"mul": 0.04491197687864554, "left": 0.04491197687864554, "injective": 0.04491197687864554, "stronger version": 0.09700399286574239, "stronger": 0.29736558256021506, "version": 0.29736558256021506}}, {"docstring": "A set `s` is nonempty if the sum of some function over `s` is not equal to `0`.\n", "keywords": {"set": 0.09568045026443411, "nonempty": 0.15831692877998726, "sum": 0.15831692877998726, "function": 0.15831692877998726, "equal": 0.15831692877998726}}, {"docstring": "Polarization identity: The real part of the  inner product, in terms of the norm.\n", "keywords": {"Polarization identity": 0.005987543063120938, "real part": 0.013527995261974615, "Polarization": 0.0771485953923296, "identity": 0.0771485953923296, "product": 0.0771485953923296, "norm": 0.0771485953923296, "real": 0.1155310835876123, "part": 0.1155310835876123, "terms": 0.1155310835876123}}, {"docstring": " If `u` is a monotone function with linear ordered codomain and the range of `u` is not bounded below, then `tendsto u at_bot at_bot`.\n", "keywords": {"linear ordered codomain": 0.002477776488322723, "monotone function": 0.018034246898548233, "function with linear": 0.018034246898548233, "linear ordered": 0.018034246898548233, "ordered codomain": 0.018034246898548233, "bot": 0.04902532341292284, "tendsto": 0.08946888050496495, "monotone": 0.13309686053898662, "function": 0.13309686053898662, "linear": 0.13309686053898662, "ordered": 0.13309686053898662, "codomain": 0.13309686053898662, "range": 0.13309686053898662, "bounded": 0.13309686053898662}}, {"docstring": "If `l\u2081` is a sublist of `l\u2082` and all elements of `l\u2082` are nonnegative, then `l\u2081.sum \u2264 l\u2082.sum`. One can prove a stronger version assuming `\u2200 a \u2208 l\u2082.diff l\u2081, 0 \u2264 a` instead of `\u2200 a \u2208 l\u2082, 0 \u2264 a` but this lemma is not yet in `mathlib`.\n", "keywords": {"stronger version assuming": 0.026958520480298006, "sum": 0.035022735802968996, "version assuming": 0.08010401626670255, "nonnegative": 0.08852959963208827, "prove a stronger": 0.09462458358480581, "stronger version": 0.09462458358480581, "sublist": 0.10707231661842652, "elements": 0.10707231661842652, "mathlib": 0.2104440927400966, "assuming": 0.25224311355993506, "prove": 0.2940149351268243, "stronger": 0.2940149351268243, "version": 0.2940149351268243, "diff": 0.2940149351268243, "lemma": 0.2940149351268243}}, {"docstring": " The cardinality of the multivariate polynomial ring, `mv_polynomial \u03c3 R` is at most the maximum of `#R`, `#\u03c3` and `\u2135\u2080`\n", "keywords": {"multivariate polynomial ring": 0.0025243034372519164, "polynomial ring": 0.017599084419657855, "multivariate polynomial": 0.02635223776265893, "polynomial": 0.09269208833952335, "ring": 0.09329120537733218, "cardinality": 0.1384995633470844, "multivariate": 0.1384995633470844, "maximum": 0.1384995633470844}}, {"docstring": " Right `mul` by a `k : \u03b1` over `[ring \u03b1]` is injective, if `k` is not a zero divisor. The typeclass that restricts all terms of `\u03b1` to have this property is `no_zero_divisors`.\n", "keywords": {"mul": 0.07341787287626325, "ring": 0.12347017160866493, "injective": 0.12347017160866493, "divisor": 0.20866796822137398, "divisors": 0.20866796822137398, "typeclass that restricts": 0.2310668116414145, "restricts all terms": 0.2310668116414145, "typeclass": 0.433239428475304, "restricts": 0.433239428475304, "terms": 0.433239428475304, "property": 0.433239428475304}}, {"docstring": "**Alias** of btw_cyclic_right`.\n", "keywords": {"Alias": 0.030396371632413578, "cyclic": 0.04491197687864554, "btw": 0.15831692877998726}}, {"docstring": "Twice the angle between two multiples of a vector is 0.\n", "keywords": {"angle": 0.29736558256021506, "multiples": 0.29736558256021506, "vector": 0.29736558256021506}}, {"docstring": "See `lt_of_tsub_lt_tsub_right_of_le` for a weaker statement in a partial order.\n", "keywords": {"tsub": 0.02006098734604785, "partial order": 0.022138323509052035, "weaker statement": 0.03663237450220032, "order": 0.11521656054299435, "weaker": 0.1879836817695587, "statement": 0.1879836817695587, "partial": 0.1879836817695587}}, {"docstring": "For elements `a` and `b` of a linear order, either `min a b = a` and `a \u2264 b`,    or `min a b = b` and `b < a`.    Use cases on this lemma to automate linarith in inequalities\n", "keywords": {"linear order": 0.010739853115675078, "min": 0.0303158165344704, "linarith in inequalities": 0.08842223439488099, "elements": 0.09274956608533924, "order": 0.09274956608533924, "lemma to automate": 0.10635075369747363, "automate linarith": 0.10635075369747363, "linear": 0.11456370890593566, "inequalities": 0.26202348110511703, "cases": 0.3100443831824829, "lemma": 0.3100443831824829, "automate": 0.3100443831824829, "linarith": 0.3100443831824829}}, {"docstring": "The definition of `x \u2264 y` on pre-games, in terms of `\u2264` two moves later.\n", "keywords": {"pre-games": 0.09568045026443411, "definition": 0.15831692877998726, "terms": 0.15831692877998726, "moves": 0.15831692877998726}}, {"docstring": " A convex combination of two centers of mass is a center of mass as well. This version works if two centers of mass share the set of original points.\n", "keywords": {"centers of mass": 0.02427444114511273, "convex combination": 0.0269019230820554, "mass": 0.07866751510273261, "centers": 0.09809432241943083, "mass share": 0.10465738067981037, "original points": 0.1527579864697411, "convex": 0.1618553949067042, "combination": 0.1618553949067042, "version works": 0.192119234036815, "share the set": 0.192119234036815, "set of original": 0.192119234036815, "center": 0.19618864483886167, "points": 0.3300959605188167, "version": 0.4014445586660804, "works": 0.4014445586660804, "share": 0.4014445586660804, "set": 0.4014445586660804, "original": 0.4014445586660804}}, {"docstring": " A function `f : \ud835\udd5c \u2192 \ud835\udd5c` is strictly convex iff for any three points `x < y < z` the slope of the secant line of `f` on `[x, y]` is strictly less than the slope of the secant line of `f` on `[x, z]`.\n", "keywords": {"strictly convex iff": 0.002009594502056255, "secant line": 0.004619666163574043, "convex iff": 0.01552184797949213, "strictly convex": 0.015808981659215463, "slope": 0.04784022513221706, "secant": 0.04784022513221706, "line": 0.04784022513221706, "strictly": 0.06294116458067843, "function": 0.08922538916412363, "points": 0.08922538916412363, "convex": 0.12363091320521931, "iff": 0.12363091320521931}}, {"docstring": "Two sets are at zero Hausdorff edistance if and only if they have the same closure\n", "keywords": {"Hausdorff edistance": 0.013797198203993007, "Hausdorff": 0.08596317751626563, "closure": 0.09568045026443411, "sets": 0.15831692877998726, "edistance": 0.15831692877998726}}, {"docstring": "In a locally compact T\u2082 space, every point has an open neighborhood with compact closure\n", "keywords": {"compact closure": 0.03079770075447456, "open neighborhood": 0.03498702377830618, "locally compact": 0.05135123883758033, "space": 0.053316999302383886, "neighborhood with compact": 0.11245662598947327, "closure": 0.11246769819744629, "compact": 0.13282721021560867, "locally": 0.1838594885424691, "point": 0.1838594885424691, "open": 0.1838594885424691, "neighborhood": 0.1838594885424691}}, {"docstring": "`Lp_trim_to_Lp_meas_subgroup` is a right inverse of `Lp_meas_subgroup_to_Lp_trim`.\n", "keywords": {"trim": 0.023392504197764657, "meas": 0.023392504197764657, "subgroup": 0.023392504197764657, "inverse": 0.12673465915833815}}, {"docstring": "Analogue of `closure_le_closed_iff_le` but with the `p` that was fed into the `mk\u2083` constructor.\n", "keywords": {"closure": 0.04491197687864554, "closed": 0.04491197687864554, "iff": 0.04491197687864554, "Analogue": 0.09568045026443411, "constructor": 0.09568045026443411, "fed": 0.15831692877998726}}, {"docstring": " If a filter `f` is majorated by some `\ud835\udcdd a`, then it is majorated by `\ud835\udcdd (Lim f)`. We formulate this lemma with a `[nonempty \u03b1]` argument of `Lim` derived from `h` to make it useful for types without a `[nonempty \u03b1]` instance. Because of the built-in proof irrelevance, Lean will unify this instance with any other instance.\n", "keywords": {"Lim": 0.06336888913141, "majorated": 0.06612353034306893, "nonempty": 0.13438808151124784, "filter": 0.14580383614351344, "Lean will unify": 0.16876310682588472, "instance": 0.17714220638867653, "Lean": 0.26049241067935636, "formulate this lemma": 0.26917382154171277, "built-in proof irrelevance": 0.30705260409949847, "proof irrelevance": 0.34569209422396424, "argument": 0.3721834517410156, "derived": 0.3721834517410156, "built-in proof": 0.4435516705700463, "formulate": 0.4605278059868975, "lemma": 0.4605278059868975, "make": 0.4605278059868975, "types": 0.4605278059868975, "irrelevance": 0.46343390502520426, "built-in": 0.5543141217025529, "proof": 0.5543141217025529}}, {"docstring": "Arrays converted to lists are the same as `of_fn` on the indexing function of the array.\n", "keywords": {"converted to lists": 0.019557279302732804, "indexing function": 0.019557279302732804, "Arrays converted": 0.02635223776265893, "converted": 0.1384995633470844, "lists": 0.1384995633470844, "indexing": 0.1384995633470844, "function": 0.1384995633470844, "Arrays": 0.1853841766790467, "array": 0.1853841766790467}}, {"docstring": "The real logarithm function tends to `+\u221e` at `+\u221e`.\n", "keywords": {"real logarithm function": 0.0042542192213185686, "real logarithm": 0.02570861714399338, "logarithm function": 0.02570861714399338, "real": 0.15831692877998726, "logarithm": 0.15831692877998726, "function": 0.15831692877998726}}, {"docstring": "A Cauchy sequence on the natural numbers is bounded.\n", "keywords": {"Cauchy sequence": 0.04498862876540802, "numbers is bounded": 0.04940384002065631, "natural numbers": 0.09700399286574239, "Cauchy": 0.1447773057422032, "bounded": 0.15831692877998726, "sequence": 0.29736558256021506, "natural": 0.29736558256021506, "numbers": 0.29736558256021506}}, {"docstring": " An integral domain in which there is an irreducible element `p` such that every nonzero element is associated to a power of `p` is a unique factorization domain. See `discrete_valuation_ring.of_has_unit_mul_pow_irreducible_factorization`.\n", "keywords": {"unique factorization domain": 0.02023347656051595, "integral domain": 0.04850310299911367, "nonzero element": 0.04850310299911367, "unique factorization": 0.07640277746686783, "irreducible element": 0.09406160709671875, "factorization domain": 0.09406160709671875, "domain": 0.11835539137930692, "element": 0.11835539137930692, "irreducible": 0.18160281635537215, "factorization": 0.18160281635537215, "integral": 0.1954257385705354, "nonzero": 0.1954257385705354, "power": 0.1954257385705354, "unique": 0.1954257385705354, "discrete": 0.232946730592177, "valuation": 0.232946730592177, "ring.of": 0.232946730592177, "unit": 0.232946730592177, "mul": 0.232946730592177, "pow": 0.232946730592177}}, {"docstring": "Shows that `int_fract_pair.stream` has the sequence property, that is once we return `none` at position `n`, we also return `none` at `n + 1`.\n", "keywords": {"sequence property": 0.020744656539556924, "int": 0.0528063806271324, "fract": 0.0528063806271324, "pair.stream": 0.0528063806271324, "return": 0.06839635777587466, "Shows": 0.11145728654016383, "property": 0.11145728654016383, "position": 0.11145728654016383, "sequence": 0.1823394614884183}}, {"docstring": " For `r` strictly smaller than the radius of `p`, then `\u2225p\u2099\u2225 r\u207f` tends to zero exponentially: for some `0 < a < 1`, `\u2225p n\u2225 r\u207f = o(a\u207f)`.\n", "keywords": {"strictly smaller": 0.015380821171891606, "strictly": 0.09568045026443411, "exponentially": 0.09568045026443411, "smaller": 0.15831692877998726, "radius": 0.15831692877998726}}, {"docstring": "The other direction does not hold because of the `h`-`h` cross terms on the RHS.\n", "keywords": {"cross terms": 0.00899321792126428, "RHS": 0.04776309965539685, "cross": 0.0771485953923296, "direction": 0.1155310835876123, "hold": 0.1155310835876123, "terms": 0.1155310835876123}}, {"docstring": " If a `finset` of a subtype is converted to the main type with `embedding.subtype`, the result does not contain any value that does not satisfy the property of the subtype.\n", "keywords": {"main type": 0.012385089084719787, "satisfy the property": 0.012385089084719787, "subtype is converted": 0.037394484593030464, "finset": 0.052376395424323874, "embedding.subtype": 0.052376395424323874, "subtype": 0.06767673667974392, "converted": 0.11060549338282699, "main": 0.11060549338282699, "type": 0.11060549338282699, "result": 0.11060549338282699, "satisfy": 0.11060549338282699, "property": 0.11060549338282699}}, {"docstring": "Dividing out by a prime factor reduces the padic_val_nat by 1.\n", "keywords": {"prime factor reduces": 0.0042542192213185686, "reduces the padic": 0.015380821171891606, "prime factor": 0.02570861714399338, "factor reduces": 0.02570861714399338, "val": 0.04491197687864554, "Dividing": 0.09568045026443411, "padic": 0.09568045026443411, "nat": 0.09568045026443411, "prime": 0.15831692877998726, "factor": 0.15831692877998726, "reduces": 0.15831692877998726}}, {"docstring": " Two vectors `x y` in a real normed space are on the ray if and only if one of them is zero or the unit vectors `\u2225x\u2225\u207b\u00b9 \u2022 x` and `\u2225y\u2225\u207b\u00b9 \u2022 y` are equal.\n", "keywords": {"real normed space": 0.002950351281893197, "unit vectors": 0.015245046152746466, "real normed": 0.020225813225353943, "normed space": 0.020225813225353943, "vectors": 0.05332403764722467, "\u2225\u207b\u00b9": 0.05332403764722467, "equal": 0.09492398510093508, "real": 0.1408007092310104, "normed": 0.1408007092310104, "space": 0.1408007092310104, "ray": 0.1408007092310104, "unit": 0.1408007092310104}}, {"docstring": "If a function is `antiperiodic` with antiperiod `c`, then it is also `periodic` with period  `2 * c`.\n", "keywords": {"antiperiodic": 0.04491197687864554, "periodic": 0.04491197687864554, "antiperiod": 0.09568045026443411, "period": 0.09568045026443411, "function": 0.15831692877998726}}, {"docstring": "A bilinear form is nondegenerate if the quadratic form it is associated with is anisotropic.\n", "keywords": {"bilinear form": 0.02635223776265893, "quadratic form": 0.02635223776265893, "form is nondegenerate": 0.06177684479462527, "form": 0.09269208833952335, "anisotropic": 0.09329120537733218, "bilinear": 0.1384995633470844, "nondegenerate": 0.1384995633470844, "quadratic": 0.1384995633470844}}, {"docstring": " Given a point in the affine span from which all the points are equidistant, that distance is the circumradius.\n", "keywords": {"affine span": 0.01904688389482227, "points are equidistant": 0.04108589655370922, "equidistant": 0.09202664026077896, "circumradius": 0.09202664026077896, "affine": 0.1367145963576765, "span": 0.1367145963576765, "distance": 0.1367145963576765, "point": 0.18213622310077732, "points": 0.18213622310077732}}, {"docstring": "The intersection of an indexed set of submonoids of a monoid `M` is a submonoid of `M`.\n", "keywords": {"indexed set": 0.013453448411345069, "set of submonoids": 0.03297697282223996, "monoid": 0.08293109455034965, "submonoids": 0.11348267744974394, "submonoid": 0.11348267744974394, "intersection": 0.11521656054299435, "indexed": 0.11521656054299435, "set": 0.11521656054299435}}, {"docstring": "Closure of a subsemiring `S` equals `S`.\n", "keywords": {"equals": 0.04491197687864554, "Closure": 0.09568045026443411, "subsemiring": 0.09568045026443411}}, {"docstring": "`same_ray` is reflexive.\n", "keywords": {"ray": 0.04491197687864554, "reflexive": 0.15831692877998726}}, {"docstring": "This lemma is analogous to `quotient.mk_out'`.\n", "keywords": {"quotient.mk": 0.04491197687864554, "lemma is analogous": 0.09700399286574239, "lemma": 0.29736558256021506, "analogous": 0.29736558256021506}}, {"docstring": "`option \u03b1` is a `subsingleton` if and only if `\u03b1` is empty.\n", "keywords": {"subsingleton": 0.04491197687864554, "option": 0.09568045026443411, "empty": 0.09568045026443411}}, {"docstring": "**K\u00f6nig's theorem**\n", "keywords": {"K\u00f6nig theorem": 0.013797198203993007, "K\u00f6nig": 0.08596317751626563, "theorem": 0.15831692877998726}}, {"docstring": "Negating the first vector passed to `oangle` does not change twice the angle.\n", "keywords": {"vector passed": 0.02570861714399338, "oangle": 0.04491197687864554, "Negating": 0.09568045026443411, "angle": 0.09568045026443411, "vector": 0.15831692877998726, "passed": 0.15831692877998726, "change": 0.15831692877998726}}, {"docstring": "If a function `f` is `periodic` with positive period `c`, then for all `x` there exists some  `y \u2208 Ioc a (a + c)` such that `f x = f y`.\n", "keywords": {"positive period": 0.00899321792126428, "periodic": 0.04491197687864554, "Ioc": 0.04776309965539685, "function": 0.0771485953923296, "period": 0.0771485953923296, "positive": 0.1155310835876123, "exists": 0.1155310835876123}}, {"docstring": "Harder inclusion: at a point in `D f K`, the function `f` has a derivative, in `K`.\n", "keywords": {"Harder inclusion": 0.009239332327148086, "Harder": 0.09568045026443411, "inclusion": 0.09568045026443411, "function": 0.09568045026443411, "derivative": 0.09568045026443411, "point": 0.15831692877998726}}, {"docstring": "The diameter of a subsingleton vanishes.\n", "keywords": {"subsingleton vanishes": 0.04940384002065631, "vanishes": 0.15831692877998726, "diameter": 0.29736558256021506, "subsingleton": 0.29736558256021506}}, {"docstring": " For filtrations indexed by `\u2115`, the stopped process obtained from an adapted process is adapted.\n", "keywords": {"stopped process obtained": 0.012476328642182708, "filtrations indexed": 0.039481144315219374, "stopped process": 0.05913243875864445, "process obtained": 0.05913243875864445, "adapted process": 0.08940622963610957, "process": 0.14323823713631006, "adapted": 0.14323823713631006, "filtrations": 0.19488865479360015, "indexed": 0.19488865479360015, "stopped": 0.19488865479360015, "obtained": 0.19488865479360015, "process is adapted": 0.2679012462364596}}, {"docstring": "**Alias** of `left.add_pos'`.\n", "keywords": {"Alias": 0.030396371632413578, "left.add": 0.04491197687864554, "pos": 0.04491197687864554}}, {"docstring": " Given a Borel-measurable function from a Polish space to a second-countable space, there exists a finer Polish topology on the source space for which the function is continuous.\n", "keywords": {"finer Polish topology": 0.0012859700780871515, "finer Polish": 0.010068497112175348, "Polish topology": 0.010068497112175348, "Borel-measurable function": 0.010732435828171346, "Polish space": 0.015683293880634854, "exists a finer": 0.01580841718935523, "second-countable space": 0.024702419387639875, "source space": 0.024702419387639875, "function is continuous": 0.035900376647702285, "Polish": 0.039952645086263415, "space": 0.0644142839932175, "Borel-measurable": 0.06620470910031033, "function": 0.08019424814686, "continuous": 0.09006456095517573, "second-countable": 0.1247493497913561, "exists": 0.1247493497913561, "finer": 0.1247493497913561, "topology": 0.1247493497913561, "source": 0.1247493497913561}}, {"docstring": "Associative racks are uninteresting.\n", "keywords": {"Associative racks": 0.04940384002065631, "racks are uninteresting": 0.04940384002065631, "Associative": 0.15831692877998726, "uninteresting": 0.15831692877998726, "racks": 0.29736558256021506}}, {"docstring": " Multiplying the first vector passed to `oangle` by a nonzero real does not change twice the angle.\n", "keywords": {"vector passed": 0.02570861714399338, "nonzero real": 0.02570861714399338, "oangle": 0.04491197687864554, "Multiplying": 0.09568045026443411, "angle": 0.09568045026443411, "vector": 0.15831692877998726, "passed": 0.15831692877998726, "nonzero": 0.15831692877998726, "real": 0.15831692877998726, "change": 0.15831692877998726}}, {"docstring": "The **triangle inequality** for complex numbers.\n", "keywords": {"triangle inequality": 0.02570861714399338, "complex numbers": 0.04940384002065631, "triangle": 0.15831692877998726, "inequality": 0.15831692877998726, "numbers": 0.15831692877998726, "complex": 0.29736558256021506}}, {"docstring": "**Alias** of the reverse direction of sub_lt_self_iff`.\n", "keywords": {"reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "The group exponent exists for any bounded torsion group.\n", "keywords": {"group exponent exists": 0.010962043841203115, "bounded torsion group": 0.010962043841203115, "exponent exists": 0.03663237450220032, "bounded torsion": 0.03663237450220032, "group exponent": 0.05417025203414716, "torsion group": 0.05417025203414716, "group": 0.13667842094541144, "exponent": 0.1879836817695587, "exists": 0.1879836817695587, "bounded": 0.1879836817695587, "torsion": 0.1879836817695587}}, {"docstring": " Given a basis `v` indexed by `\u03b9`, the canonical linear equivalence between `\u03b9 \u2192 R` and `M` maps a function `x : \u03b9 \u2192 R` to the linear combination `\u2211_i x i \u2022 v i`.\n", "keywords": {"canonical linear equivalence": 0.003391113505728255, "maps a function": 0.008198084585814738, "linear combination": 0.01625939630580789, "canonical linear": 0.02437189179902695, "linear equivalence": 0.02437189179902695, "linear": 0.08871286057464066, "basis": 0.09017440044927587, "indexed": 0.09017440044927587, "maps": 0.09017440044927587, "function": 0.09017440044927587, "combination": 0.09017440044927587, "canonical": 0.13409574860218185, "equivalence": 0.13409574860218185}}, {"docstring": " The Double Negation Theorem: `\u00ac \u00ac P` is equivalent to `P`. The left-to-right direction, double negation elimination (DNE), is classically true but not constructively.\n", "keywords": {"Double Negation Theorem": 0.006172366592470146, "Negation Theorem": 0.02068524667628159, "double negation elimination": 0.03796571453328407, "Double Negation": 0.04023597804882625, "Theorem": 0.07425972513849939, "negation elimination": 0.11993395245439568, "DNE": 0.1325310009866505, "Double": 0.13645376837511822, "Negation": 0.13645376837511822, "direction": 0.22302132203417566, "equivalent": 0.24845137053071667, "elimination": 0.39240470458943716, "constructively": 0.39240470458943716, "classically true": 0.39991598651204907, "classically": 0.5344823842910187, "true": 0.5344823842910187}}, {"docstring": "**Alias** of the reverse direction of strict_mono_comp_of_dual_iff`.\n", "keywords": {"direction of strict": 0.00899321792126428, "reverse direction": 0.013527995261974615, "Alias": 0.030396371632413578, "mono": 0.04491197687864554, "comp": 0.04491197687864554, "dual": 0.04491197687864554, "iff": 0.04491197687864554, "strict": 0.0771485953923296, "reverse": 0.1155310835876123, "direction": 0.1155310835876123}}, {"docstring": "An identity local homeomorphism belongs to the `C^n` groupoid.\n", "keywords": {"identity local homeomorphism": 0.03339840940482845, "local homeomorphism belongs": 0.03339840940482845, "groupoid": 0.04491197687864554, "identity local": 0.09700399286574239, "local homeomorphism": 0.09700399286574239, "homeomorphism belongs": 0.09700399286574239, "identity": 0.29736558256021506, "local": 0.29736558256021506, "homeomorphism": 0.29736558256021506, "belongs": 0.29736558256021506}}, {"docstring": "Two equivalent local homeomorphisms have the same source\n", "keywords": {"equivalent local homeomorphisms": 0.03339840940482845, "equivalent local": 0.09700399286574239, "local homeomorphisms": 0.09700399286574239, "source": 0.15831692877998726, "equivalent": 0.29736558256021506, "local": 0.29736558256021506, "homeomorphisms": 0.29736558256021506}}, {"docstring": " A nonempty separable space admits a sequence with dense range. Instead of running `cases` on the conclusion of this lemma, you might want to use `topological_space.dense_seq` and `topological_space.dense_range_dense_seq`.  If `\u03b1` might be empty, then `exists_countable_dense` is the main way to use separability of `\u03b1`.\n", "keywords": {"nonempty separable space": 0.01447407212327469, "separable space admits": 0.01447407212327469, "nonempty separable": 0.05691870483245947, "separable space": 0.05691870483245947, "space admits": 0.05691870483245947, "admits a sequence": 0.05691870483245947, "topological": 0.0948249886144425, "space.dense": 0.0948249886144425, "seq": 0.0948249886144425, "range": 0.1329050399923123, "dense range": 0.16444368581257215, "dense": 0.1770948823837523, "nonempty": 0.2320634330317093, "separable": 0.2320634330317093, "space": 0.2320634330317093, "admits": 0.2320634330317093, "sequence": 0.2320634330317093, "cases": 0.27422123825584316, "sequence with dense": 0.32271312183403456, "exists": 0.3550361007851306}}, {"docstring": " Given stopping times `\u03c4` and `\u03b7` which are bounded below, `set.piecewise s \u03c4 \u03b7` is also a stopping time with respect to the same filtration.\n", "keywords": {"stopping times": 0.04990813198885798, "time with respect": 0.09916653097095413, "stopping": 0.10901343189444501, "set.piecewise": 0.11984314898676356, "filtration": 0.11984314898676356, "bounded": 0.19488865479360015, "respect": 0.19488865479360015, "times": 0.21802686378889002, "time": 0.21802686378889002}}, {"docstring": " Caratheodory theorem. If `m` is a metric outer measure, then every Borel measurable set `t` is Caratheodory measurable: for any (not necessarily measurable) set `s` we have `\u03bc (s \u2229 t) + \u03bc (s \\ t) = \u03bc s`.\n", "keywords": {"Caratheodory theorem": 0.030393254773969515, "Borel measurable set": 0.05647397017109099, "metric outer measure": 0.09939584214213201, "Caratheodory": 0.11206278826758263, "Caratheodory measurable": 0.13099713927755768, "theorem": 0.13160814984798166, "Borel measurable": 0.13445385577678404, "set": 0.16901341472266415, "measurable": 0.1722612644411382, "outer measure": 0.17464955723234385, "measurable set": 0.2116612026190187, "metric outer": 0.22834444950404395, "Borel": 0.2293388023264178, "necessarily measurable": 0.2866945971817883, "measure": 0.34484507175866613, "metric": 0.4311567065520097, "outer": 0.4311567065520097, "necessarily": 0.4311567065520097}}, {"docstring": "A vector is in the same ray as a nonnegative multiple of itself.\n", "keywords": {"nonnegative multiple": 0.02570861714399338, "vector": 0.15831692877998726, "ray": 0.15831692877998726, "nonnegative": 0.15831692877998726, "multiple": 0.15831692877998726}}, {"docstring": "**Alias** of the reverse direction of strict_anti_comp_of_dual_iff`.\n", "keywords": {"direction of strict": 0.00899321792126428, "reverse direction": 0.013527995261974615, "Alias": 0.030396371632413578, "anti": 0.04491197687864554, "comp": 0.04491197687864554, "dual": 0.04491197687864554, "iff": 0.04491197687864554, "strict": 0.0771485953923296, "reverse": 0.1155310835876123, "direction": 0.1155310835876123}}, {"docstring": "If \u2220ABC = \u03c0 then dist A B \u2260 0.\n", "keywords": {"ABC": 0.030396371632413578, "dist": 0.29736558256021506}}, {"docstring": "Inverses of elements of finite order have finite order.\n", "keywords": {"Inverses of elements": 0.02541909697430123, "finite order": 0.027200199006318638, "elements of finite": 0.10583238594216893, "finite": 0.11357121248292479, "order": 0.11357121248292479, "Inverses": 0.12363091320521931, "order have finite": 0.1804246332749005, "elements": 0.2005079697193566}}, {"docstring": " The difference `f m\u2081 - f m\u2082` is controlled in terms of `\u2225f\u2225` and `\u2225m\u2081 - m\u2082\u2225`, precise version. For a less precise but more usable version, see `norm_image_sub_le`. The bound reads `\u2225f m - f m'\u2225 \u2264   \u2225f\u2225 * \u2225m 1 - m' 1\u2225 * max \u2225m 2\u2225 \u2225m' 2\u2225 * max \u2225m 3\u2225 \u2225m' 3\u2225 * ... * max \u2225m n\u2225 \u2225m' n\u2225 + ...`, where the other terms in the sum are the same products where `1` is replaced by any `i`.\n", "keywords": {"precise version": 0.030744450422679315, "usable version": 0.05915430532162614, "max": 0.06950289247757273, "version": 0.07914749424608632, "controlled in terms": 0.09189780408693742, "precise": 0.0942146778878954, "difference": 0.12281951612365874, "controlled": 0.13567576508803372, "terms": 0.14802258622807832, "bound reads": 0.22484771976534026, "norm": 0.30106985951401277, "image": 0.30106985951401277, "usable": 0.35282549301818633, "reads": 0.41468667243330776, "bound": 0.44267634120062743, "sum": 0.4932612633838409, "products": 0.4932612633838409, "replaced": 0.4932612633838409}}, {"docstring": " The **Schwarz Lemma**: if `f : \u2102 \u2192 \u2102` sends an open disk to itself and the center `c` of this disk to itself, then for any point `z` of this disk we have `dist (f z) c \u2264 dist z c`.\n", "keywords": {"Schwarz Lemma": 0.003150628214787119, "sends an open": 0.015411349595587466, "open disk": 0.02659432560802636, "Schwarz": 0.0560422423979744, "Lemma": 0.0560422423979744, "disk": 0.057649601779692944, "dist": 0.05865445176797713, "sends": 0.1013272142599222, "center": 0.1013272142599222, "point": 0.1013272142599222, "open": 0.14978645964327916}}, {"docstring": " **Strict inequality case of Rearrangement Inequality**: Pointwise multiplication of `f` and `g`, which monovary together, is strictly decreased by a permutation if and only if `f \u2218 \u03c3` and `g` do not monovary together. Stated by permuting the entries of `f`.\n", "keywords": {"Strict inequality case": 0.0016642028270215602, "Strict inequality": 0.008747117210927207, "Pointwise multiplication": 0.011683623122683102, "Rearrangement Inequality": 0.011811652352352629, "case of Rearrangement": 0.01579306427698067, "inequality case": 0.02602119105438165, "strictly decreased": 0.03495776414940041, "Strict": 0.06283799353160062, "Pointwise": 0.06283799353160062, "inequality": 0.06899702012035523, "Rearrangement": 0.08459615986079659, "monovary": 0.08562916729374415, "Stated by permuting": 0.17147630665836236, "case": 0.1837851895373716, "multiplication": 0.1837851895373716, "strictly": 0.1837851895373716, "decreased": 0.1837851895373716, "permutation": 0.1837851895373716, "permuting the entries": 0.23851325396085266, "Stated": 0.3335528702481384}}, {"docstring": " `finsupp.single a b` is injective in `b`. For the statement that it is injective in `a`, see `finsupp.single_left_injective`\n", "keywords": {"injective": 0.09804571483002, "finsupp.single": 0.1303344210748144, "left": 0.2689769154190613, "statement": 0.505457725342219}}, {"docstring": " If `s`, `t` are disjoint convex sets, `s` is compact and `t` is closed then we can find open disjoint convex sets containing them.\n", "keywords": {"disjoint convex sets": 0.004348839771587354, "open disjoint convex": 0.007647177076780686, "find open disjoint": 0.009899908000963324, "disjoint convex": 0.018044698947888176, "convex sets": 0.018044698947888176, "find open": 0.04097695443922855, "open disjoint": 0.04644456336635502, "convex": 0.07785437699288043, "disjoint": 0.11185087393202754, "sets": 0.11185087393202754, "compact": 0.19840347794534322, "closed": 0.19840347794534322, "find": 0.19840347794534322, "open": 0.19840347794534322}}, {"docstring": "A point belongs to the closure of `s` iff its infimum edistance to this set vanishes\n", "keywords": {"iff its infimum": 0.015380821171891606, "set vanishes": 0.015380821171891606, "point belongs": 0.02570861714399338, "infimum edistance": 0.02570861714399338, "iff": 0.09568045026443411, "vanishes": 0.09568045026443411, "point": 0.15831692877998726, "belongs": 0.15831692877998726, "closure": 0.15831692877998726, "infimum": 0.15831692877998726, "edistance": 0.15831692877998726, "set": 0.15831692877998726}}, {"docstring": "A continuous function which tendsto `at_bot` `at_top` and to `at_top` `at_bot` is surjective.\n", "keywords": {"function which tendsto": 0.010461294309803722, "continuous function": 0.0145716641419346, "bot": 0.021352745740207107, "top": 0.021352745740207107, "tendsto": 0.08638782221675846, "surjective": 0.08638782221675846, "continuous": 0.11984314898676356, "function": 0.11984314898676356}}, {"docstring": " **The Lebesgue Decomposition theorem between a signed measure and a measure**: Given a signed measure `s` and a \u03c3-finite measure `\u03bc`, there exist a signed measure `t` and a measurable and integrable function `f`, such that `t` is mutually singular with respect to `\u03bc` and `s = t + \u03bc.with_density\u1d65 f`. In this case `t = s.singular_part \u03bc` and `f = s.rn_deriv \u03bc`.\n", "keywords": {"Lebesgue Decomposition theorem": 0.0007214965466642711, "signed measure": 0.004480370216491351, "Lebesgue Decomposition": 0.004701289244689845, "Decomposition theorem": 0.010402793079985167, "exist a signed": 0.012754310185519119, "integrable function": 0.018307227778432113, "measurable and integrable": 0.023178331289048632, "mutually singular": 0.023178331289048632, "singular with respect": 0.023178331289048632, "\u03c3-finite measure": 0.02443999548576011, "signed": 0.027891136044530414, "measure": 0.03170145354640892, "Lebesgue": 0.06840534004280228, "Decomposition": 0.06840534004280228, "\u03bc.with": 0.09062968219670559, "function": 0.11944785157993282, "density\u1d65": 0.11944785157993282, "theorem": 0.1505100208497825, "\u03c3-finite": 0.1505100208497825, "exist": 0.1505100208497825}}, {"docstring": " If `x` is in the base field `K`, then the trace is `[L : K] * x`.  (If `L` is not finite-dimensional over `K`, then `trace` and `finrank` return `0`.)\n", "keywords": {"base field": 0.024076315522185962, "field": 0.12696931063105557, "trace": 0.1739726675965165, "base": 0.18516501832552387, "finrank": 0.22125774619993788, "return": 0.22125774619993788, "finite-dimensional": 0.44109960011701166}}, {"docstring": "`cyclotomic n \u211a` is irreducible.\n", "keywords": {"cyclotomic": 0.15831692877998726, "irreducible": 0.15831692877998726}}, {"docstring": "Rectangles formed by \u03c0-systems form a \u03c0-system.\n", "keywords": {"Rectangles formed": 0.022885248721446715, "\u03c0-systems form": 0.0562460611896591, "Rectangles": 0.11718348279991213, "formed by \u03c0-systems": 0.12194096740933036, "form a \u03c0-system": 0.12194096740933036, "formed": 0.19092478917347616, "form": 0.19092478917347616, "\u03c0-systems": 0.27891038992107275, "\u03c0-system": 0.27891038992107275}}, {"docstring": " The exponential map in a complete normed field `\ud835\udd42` of characteristic zero has strict derivative `1` at zero, as long as it converges on a neighborhood of zero.\n", "keywords": {"complete normed field": 0.0010606143890052174, "normed field": 0.00899321792126428, "strict derivative": 0.00899321792126428, "exponential map": 0.013527995261974615, "complete normed": 0.013527995261974615, "field": 0.0771485953923296, "derivative": 0.0771485953923296, "exponential": 0.1155310835876123, "map": 0.1155310835876123, "complete": 0.1155310835876123, "normed": 0.1155310835876123, "characteristic": 0.1155310835876123, "strict": 0.1155310835876123, "long": 0.1155310835876123, "converges": 0.1155310835876123, "neighborhood": 0.1155310835876123}}, {"docstring": " In a Banach algebra `A` over `\ud835\udd5c`, for `a : A` the function `\u03bb z, (1 - z \u2022 a)\u207b\u00b9` is differentiable on any closed ball centered at zero of radius `r < (spectral_radius \ud835\udd5c a)\u207b\u00b9`.\n", "keywords": {"closed ball centered": 0.0007327157796580952, "Banach algebra": 0.0036666810458206895, "closed ball": 0.008069272527900925, "ball centered": 0.008069272527900925, "radius": 0.04902532341292284, "Banach": 0.05221458631645785, "spectral": 0.052376395424323874, "algebra": 0.06996676351255691, "function": 0.06996676351255691, "differentiable": 0.08946888050496495, "closed": 0.08946888050496495, "ball": 0.08946888050496495, "centered": 0.08946888050496495}}, {"docstring": "The `ts` argument to `permutations_aux2` can be folded into the `f` argument.\n", "keywords": {"permutations": 0.055708263664958506, "argument": 0.07334489383741183, "folded": 0.19092478917347616}}, {"docstring": "For any relation `r` on `\u03b1`, multiset addition `multiset \u03b1 \u00d7 multiset \u03b1 \u2192 multiset \u03b1` is a  fibration between the game sum of `cut_expand r` with itself and `cut_expand r` itself.\n", "keywords": {"multiset addition": 0.007477692615615378, "game sum": 0.017946235661975462, "multiset": 0.01930737815231364, "cut": 0.025305674847318462, "expand": 0.03844561323755291, "relation": 0.09610564014237062, "addition": 0.09610564014237062, "fibration": 0.13277743138743603, "game": 0.13277743138743603, "sum": 0.13277743138743603}}, {"docstring": " We can write both `n.factorization p` and `n.factors.count p` to represent the power of `p` in the factorization of `n`: we declare the former to be the simp-normal form. However, since `factorization` is a finsupp it's noncomputable.  This theorem can also be used in reverse to compute values of `factorization n p` when required.\n", "keywords": {"simp-normal form": 0.025197030211215665, "represent the power": 0.034570306642918935, "n.factorization": 0.13445297188201463, "form": 0.13445297188201463, "factorization": 0.13945997315998312, "finsupp it noncomputable": 0.18094116376426828, "write": 0.1827980721273009, "represent": 0.1827980721273009, "power": 0.1827980721273009, "declare": 0.1827980721273009, "simp-normal": 0.1827980721273009, "noncomputable": 0.3504391114139616, "reverse to compute": 0.392532966967316, "finsupp": 0.43721650456047984, "required": 0.44009550564306216, "theorem": 0.530927628375335, "reverse": 0.530927628375335, "compute": 0.530927628375335}}, {"docstring": "An intermediate field is closed under multiplication.\n", "keywords": {"closed under multiplication": 0.04940384002065631, "intermediate field": 0.09700399286574239, "field is closed": 0.09700399286574239, "multiplication": 0.15831692877998726, "intermediate": 0.29736558256021506, "field": 0.29736558256021506, "closed": 0.29736558256021506}}, {"docstring": "Pointwise minimum of two monotone functions is a monotone function.\n", "keywords": {"Pointwise minimum": 0.02541909697430123, "monotone functions": 0.054400398012637276, "monotone": 0.11357121248292479, "Pointwise": 0.12363091320521931, "minimum": 0.2005079697193566, "functions": 0.22714242496584958, "function": 0.22714242496584958}}, {"docstring": " If the first `n` derivatives within a set of a function are continuous, and its first `n-1` derivatives are differentiable, then the function is `C^n`. This is not an equivalence in general, but this is an equivalence when the set has unique derivatives, see `cont_diff_on_iff_continuous_on_differentiable_on_deriv`.\n", "keywords": {"continuous": 0.12393176389310419, "differentiable": 0.12393176389310419, "function": 0.13393273378065368, "derivatives": 0.15444092553708852, "set": 0.19621669377746478, "function are continuous": 0.22318104773670697, "equivalence": 0.24141048732069018, "cont": 0.2559047353209458, "diff": 0.2559047353209458, "iff": 0.2559047353209458, "deriv": 0.2559047353209458, "unique derivatives": 0.29260321774882087, "general": 0.37942260787119025, "derivatives are differentiable": 0.3836534459356154, "equivalence in general": 0.41867498381009005, "set has unique": 0.44049167629304037, "unique": 0.48857384577836305}}, {"docstring": "In a space with second countable topology and a sigma-finite measure, `fin_strongly_measurable`  and `measurable` are equivalent.\n", "keywords": {"measurable": 0.018830794223096383, "sigma-finite measure": 0.020435055290363522, "countable topology": 0.033892441937102495, "fin": 0.052376395424323874, "strongly": 0.052376395424323874, "measure": 0.11060549338282699, "equivalent": 0.11060549338282699, "space": 0.18105634546484617, "countable": 0.18105634546484617, "topology": 0.18105634546484617, "sigma-finite": 0.18105634546484617}}, {"docstring": "If \u2220BCD = \u03c0, then \u2220ABC = \u2220ABD.\n", "keywords": {"BCD": 0.030396371632413578, "ABC": 0.030396371632413578, "ABD": 0.030396371632413578}}, {"docstring": " A version of `measure_theory.outer_measure.ext` that assumes `\u03bc\u2081 s = \u03bc\u2082 s` on all *nonempty* sets `s`, and gets `\u03bc\u2081 \u2205 = \u03bc\u2082 \u2205` from `measure_theory.outer_measure.empty'`.\n", "keywords": {"measure": 0.020602899695743707, "theory.outer": 0.020602899695743707, "measure.ext": 0.055708263664958506, "nonempty": 0.055708263664958506, "sets": 0.055708263664958506, "measure.empty": 0.055708263664958506, "assumes": 0.08439943001984396, "version": 0.11718348279991213}}, {"docstring": "An uncurried version of `finset.prod_product`.\n", "keywords": {"finset.prod": 0.04491197687864554, "product": 0.04491197687864554, "uncurried version": 0.09700399286574239, "uncurried": 0.29736558256021506, "version": 0.29736558256021506}}, {"docstring": "The sheaf condition in terms of an equalizer diagram is equivalent to the reformulation in terms of the presheaf preserving the limit of the diagram consisting of the `U i` and `U i \u2293 U j`.\n", "keywords": {"condition in terms": 0.006379096667925256, "reformulation in terms": 0.006379096667925256, "sheaf condition": 0.008653024715792958, "presheaf preserving": 0.008653024715792958, "preserving the limit": 0.008653024715792958, "equalizer diagram": 0.009628859458023827, "diagram consisting": 0.009628859458023827, "diagram is equivalent": 0.024517242507894936, "terms": 0.03421799084244534, "diagram": 0.051483732084204585, "sheaf": 0.09262176965879712, "condition": 0.09262176965879712, "equalizer": 0.09262176965879712, "equivalent": 0.09262176965879712, "reformulation": 0.09262176965879712, "presheaf": 0.09262176965879712, "preserving": 0.09262176965879712, "limit": 0.09262176965879712, "consisting": 0.09262176965879712}}, {"docstring": "The angle between a negative multiple of a vector and a vector.\n", "keywords": {"negative multiple": 0.020225813225353943, "vector": 0.07334489383741181, "angle": 0.1408007092310104, "negative": 0.1408007092310104, "multiple": 0.1408007092310104}}, {"docstring": "**Alias** of the reverse direction of monotone_comp_of_dual_iff`.\n", "keywords": {"direction of monotone": 0.00899321792126428, "reverse direction": 0.013527995261974615, "Alias": 0.030396371632413578, "comp": 0.04491197687864554, "dual": 0.04491197687864554, "iff": 0.04491197687864554, "monotone": 0.0771485953923296, "reverse": 0.1155310835876123, "direction": 0.1155310835876123}}, {"docstring": " If the `n`th coefficient of a formal power series is nonzero, then the order of the power series is less than or equal to `n`.\n", "keywords": {"formal power series": 0.002408565735662993, "power series": 0.008191967567321105, "series is nonzero": 0.010498683550000354, "formal power": 0.02162879641957819, "series": 0.054147325146855434, "power": 0.07442578585270056, "nonzero": 0.09593831581184391, "coefficient": 0.14222822903176371, "formal": 0.14222822903176371, "order": 0.14222822903176371, "equal": 0.14222822903176371}}, {"docstring": "**Alias** of the forward direction of mdifferentiable_within_at_iff_differentiable_within_at`.\n", "keywords": {"direction of mdifferentiable": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "differentiable": 0.04491197687864554, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "See also `complex.continuous_at_cpow` and `complex.continuous_at_cpow_of_re_pos`.\n", "keywords": {"complex.continuous": 0.02317053471260329, "cpow": 0.02317053471260329, "pos": 0.06021916407649213}}, {"docstring": "`std_simplex \u211d \u03b9` is compact.\n", "keywords": {"std": 0.04491197687864554, "simplex": 0.15831692877998726, "compact": 0.15831692877998726}}, {"docstring": " Explicit bound on `HD (dist)`. This means that when looking for minimizers it will be sufficient to look for functions with `HD(f)` bounded by this bound.\n", "keywords": {"dist": 0.07440863577088691, "Explicit bound": 0.07656831788175336, "Explicit": 0.1531727145735673, "bound": 0.23216465691767033, "bounded": 0.3858257107143767, "minimizers": 0.5275897320195265, "sufficient": 0.5275897320195265, "functions": 0.5275897320195265}}, {"docstring": " A set `s` is not bounded above if and only if for each `x` there exists `y \u2208 s` such that `x` is not greater than or equal to `y`. This version only assumes `preorder` structure and uses `\u00ac(y \u2264 x)`. A version for linear orders is called `not_bdd_above_iff`.\n", "keywords": {"set": 0.13343740079446478, "exists": 0.13343740079446478, "bounded": 0.19393914971321496, "greater": 0.19393914971321496, "equal": 0.19393914971321496, "preorder": 0.23125675974693613, "version": 0.25288568797087435, "bdd": 0.3047259420193848, "iff": 0.3047259420193848, "orders is called": 0.31655599955359376, "assumes": 0.3484488916272334, "structure": 0.3484488916272334, "version only assumes": 0.3988690344429355, "linear orders": 0.4315070252368061, "called": 0.43793939989430847, "linear": 0.5490314130785605, "orders": 0.5490314130785605, "version for linear": 0.6818525436036904}}, {"docstring": " Pythagorean triples are interchangable, i.e `x * x + y * y = y * y + x * x = z * z`. This comes from additive commutativity.\n", "keywords": {"Pythagorean triples": 0.011154056927717123, "triples are interchangable": 0.011154056927717123, "Pythagorean": 0.08922538916412363, "interchangable": 0.08922538916412363, "additive commutativity": 0.09108482621177338, "triples": 0.12363091320521931, "commutativity": 0.25386721785551913, "additive": 0.32883716426354986}}, {"docstring": "**Alias** of dimH_finite`.\n", "keywords": {"Alias": 0.030396371632413578, "finite": 0.04491197687864554, "dimH": 0.15831692877998726}}, {"docstring": " The intersection of distinct prime powers in a Dedekind domain is the product of these prime powers.\n", "keywords": {"distinct prime powers": 0.009986353232843035, "Dedekind domain": 0.018691730414022122, "prime powers": 0.024140905658634568, "intersection of distinct": 0.038584678130008584, "distinct prime": 0.0431505389096901, "Dedekind": 0.09519633810991462, "prime": 0.10730569120144322, "powers": 0.10730569120144322, "intersection": 0.19274649316101516, "distinct": 0.19274649316101516, "domain": 0.19274649316101516, "product": 0.19274649316101516}}, {"docstring": "`int.clog b` and `zpow b` (almost) form a Galois connection.\n", "keywords": {"form a Galois": 0.008293207122436794, "Galois connection": 0.008293207122436794, "Galois": 0.08596317751626563, "int.clog": 0.09568045026443411, "zpow": 0.09568045026443411, "form": 0.09568045026443411, "connection": 0.09568045026443411}}, {"docstring": "A point is in an `Icc` iff it can be expressed as a convex combination of the endpoints.\n", "keywords": {"convex combination": 0.02570861714399338, "Icc": 0.030396371632413578, "iff": 0.09568045026443411, "endpoints": 0.09568045026443411, "point": 0.15831692877998726, "expressed": 0.15831692877998726, "convex": 0.15831692877998726, "combination": 0.15831692877998726}}, {"docstring": "Induction principle starting at a non-zero number. For maps to a `Sort*` see `le_rec_on`.\n", "keywords": {"Induction principle starting": 0.005401660759706154, "Induction principle": 0.02541909697430123, "non-zero number": 0.02541909697430123, "principle starting": 0.04188746641162499, "Sort": 0.11555589791117535, "Induction": 0.12363091320521931, "number": 0.12363091320521931, "rec": 0.17881754828257995, "principle": 0.2005079697193566, "starting": 0.2005079697193566, "non-zero": 0.2005079697193566, "maps": 0.46553351027698087}}, {"docstring": " **Equality case of Rearrangement Inequality**: Pointwise scalar multiplication of `f` and `g`, which monovary together, is unchanged by a permutation if and only if `f \u2218 \u03c3` and `g` monovary together. Stated by permuting the entries of `g`.\n", "keywords": {"Pointwise scalar multiplication": 0.0019254155628980188, "Rearrangement Inequality": 0.0050414360735746774, "Equality case": 0.010681703670791362, "Pointwise scalar": 0.010681703670791362, "case of Rearrangement": 0.0144961168780819, "scalar multiplication": 0.031040804666112243, "Equality": 0.060911257173420906, "Inequality": 0.060911257173420906, "Pointwise": 0.060911257173420906, "monovary": 0.07953440658135287, "Rearrangement": 0.08235173134587291, "Stated by permuting": 0.1549537691794176, "case": 0.17351161766281323, "scalar": 0.17351161766281323, "multiplication": 0.17351161766281323, "unchanged": 0.17351161766281323, "permutation": 0.17351161766281323, "permuting the entries": 0.21626281206510953, "Stated": 0.31817081130554614, "permuting": 0.42167437397336704}}, {"docstring": " **Rearrangement Inequality**: Pointwise scalar multiplication of `f` and `g` is maximized when `f` and `g` monovary together. Stated by permuting the entries of `g`.\n", "keywords": {"Pointwise scalar multiplication": 0.001271864619686412, "Rearrangement Inequality": 0.0031146356952437464, "Pointwise scalar": 0.008334116283452563, "scalar multiplication": 0.02249651976012989, "Rearrangement": 0.05572221155747183, "Inequality": 0.05572221155747183, "Pointwise": 0.05572221155747183, "monovary": 0.10028582371075691, "Stated by permuting": 0.11755105063023073, "scalar": 0.14832923246533666, "multiplication": 0.14832923246533666, "maximized": 0.14832923246533666, "permuting the entries": 0.165573765898185, "Stated": 0.2790829227183407, "permuting": 0.37689977775222827, "entries": 0.37689977775222827}}, {"docstring": " Induction principle to build a sequence, by adding one point at a time satisfying a given relation with respect to all the previously chosen points.  More precisely, Assume that, for any finite set `s`, one can find another point satisfying some relation `r` with respect to all the points in `s`. Then one may construct a function `f : \u2115 \u2192 \u03b1` such that `r (f m) (f n)` holds whenever `m < n`. We also ensure that all constructed points satisfy a given predicate `P`.\n", "keywords": {"previously chosen points": 0.02535287591081438, "Induction principle": 0.03342606556447309, "build a sequence": 0.03342606556447309, "principle to build": 0.043450896440003335, "previously chosen": 0.043450896440003335, "time satisfying": 0.07379167651158283, "chosen points": 0.11037932783253034, "respect": 0.11749165358422033, "Induction": 0.15850482507573482, "sequence": 0.15850482507573482, "points": 0.16237970957934877, "satisfying": 0.1683813496937387, "relation": 0.1683813496937387, "relation with respect": 0.17791561297804898, "point satisfying": 0.19624420657185965, "Assume": 0.19685497893415244, "principle": 0.20406257481339157, "build": 0.20406257481339157, "adding": 0.20406257481339157, "time": 0.20406257481339157}}, {"docstring": " Any pair of finite measures `\u03bc` and `\u03bd`, `have_lebesgue_decomposition`. That is to say, there exist a measure `\u03be` and a measurable function `f`, such that `\u03be` is mutually singular with respect to `\u03bd` and `\u03bc = \u03be + \u03bd.with_density f`.  This is not an instance since this is also shown for the more general \u03c3-finite measures with `measure_theory.measure.have_lebesgue_decomposition_of_sigma_finite`.\n", "keywords": {"lebesgue": 0.08284907989330598, "decomposition": 0.08284907989330598, "pair of finite": 0.1976128618757803, "pair": 0.20466520455423018, "measurable function": 0.2206078239440065, "finite": 0.2213596564158933, "measures": 0.2493125803911795, "measure": 0.2493125803911795, "finite measures": 0.2832868380920124, "\u03bd.with": 0.2842899911876742, "mutually singular": 0.28655297851580364, "singular with respect": 0.28655297851580364, "sigma": 0.3665734564163814, "general \u03c3-finite measures": 0.36666375015584785, "function": 0.3829623991271415, "density": 0.3829623991271415, "\u03c3-finite measures": 0.39281624768046464, "general \u03c3-finite": 0.4704175819027461, "exist": 0.4719419973408592, "measurable": 0.4719419973408592}}, {"docstring": "Inverses of elements of finite additive order have finite additive order.\n", "keywords": {"finite additive order": 0.004836221624721983, "finite additive": 0.019341598041498438, "additive order": 0.019341598041498438, "Inverses of elements": 0.026057303212184805, "additive": 0.08061786523087178, "elements of finite": 0.10868044142040656, "finite": 0.11549095123814725, "order": 0.11549095123814725, "Inverses": 0.12520420549175446, "order have finite": 0.18558150351287403, "elements": 0.20283314940424746}}, {"docstring": "Shows that the integer parts of the continued fraction are at least one.\n", "keywords": {"integer parts": 0.02570861714399338, "continued fraction": 0.02570861714399338, "Shows": 0.09568045026443411, "integer": 0.15831692877998726, "parts": 0.15831692877998726, "continued": 0.15831692877998726, "fraction": 0.15831692877998726}}, {"docstring": "The minimal distance to a set is continuous in point\n", "keywords": {"continuous in point": 0.04940384002065631, "minimal distance": 0.09700399286574239, "set is continuous": 0.09700399286574239, "point": 0.15831692877998726, "minimal": 0.29736558256021506, "distance": 0.29736558256021506, "set": 0.29736558256021506, "continuous": 0.29736558256021506}}, {"docstring": " Angle at center of a circle equals twice angle at circumference, oriented vector angle form with radius specified.\n", "keywords": {"oriented vector angle": 0.0030636983505871406, "vector angle form": 0.004603707094290848, "oriented vector": 0.014403555314280002, "circle equals": 0.021479477819866782, "form with radius": 0.021479477819866782, "vector angle": 0.030375062563429815, "angle form": 0.030375062563429815, "angle at circumference": 0.03584126121659767, "Angle at center": 0.0528691017207608, "Angle": 0.0677647047566666, "equals twice angle": 0.09514406143010301, "circumference": 0.09791785820909267, "oriented": 0.09791785820909267, "center": 0.14500969419684506, "circle": 0.14500969419684506, "equals": 0.14500969419684506, "vector": 0.14500969419684506, "form": 0.14500969419684506, "radius": 0.14500969419684506}}, {"docstring": "**Alias** of the reverse direction of measurable_iff_comap_le`.\n", "keywords": {"direction of measurable": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "comap": 0.04491197687864554, "measurable": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "Every point is covered by chosen balls, before `p.last_step`.\n", "keywords": {"p.last": 0.04491197687864554, "step": 0.04491197687864554, "chosen balls": 0.04940384002065631, "point is covered": 0.09700399286574239, "covered by chosen": 0.09700399286574239, "balls": 0.15831692877998726, "point": 0.29736558256021506, "covered": 0.29736558256021506, "chosen": 0.29736558256021506}}, {"docstring": "A product over `s.subtype p` equals one over `s.filter p`.\n", "keywords": {"s.subtype": 0.09568045026443411, "equals": 0.09568045026443411, "s.filter": 0.09568045026443411, "product": 0.15831692877998726}}, {"docstring": "Assumes left covariance.\n", "keywords": {"Assumes left covariance": 0.008321268142839145, "Assumes left": 0.04940384002065631, "left covariance": 0.04940384002065631, "Assumes": 0.15831692877998726, "covariance": 0.15831692877998726, "left": 0.29736558256021506}}, {"docstring": "A complex differentiable function `f : \u2102 \u2192 E` is analytic at every point.\n", "keywords": {"complex differentiable function": 0.016559150827736194, "differentiable function": 0.04940384002065631, "complex differentiable": 0.09700399286574239, "function": 0.15831692877998726, "point": 0.15831692877998726, "complex": 0.29736558256021506, "differentiable": 0.29736558256021506, "analytic": 0.29736558256021506}}, {"docstring": " Commutativity of actions is a symmetric relation. This lemma can't be an instance because this would cause a loop in the instance search graph.\n", "keywords": {"Commutativity of actions": 0.03702481907590181, "symmetric relation": 0.03702481907590181, "Commutativity": 0.1497391925531594, "relation": 0.1497391925531594, "actions": 0.23843406751375792, "symmetric": 0.23843406751375792, "instance search graph": 0.24208255529126432, "search graph": 0.2464148712192172, "instance": 0.30351064940010786, "graph": 0.37951425938754646, "instance search": 0.4624443418465675, "lemma": 0.5209261917026199, "loop": 0.5209261917026199, "search": 0.5209261917026199}}, {"docstring": " The convolution is continuous if one function is integrable and the other is bounded and continuous.\n", "keywords": {"function is integrable": 0.019557279302732804, "convolution is continuous": 0.06177684479462527, "bounded and continuous": 0.06177684479462527, "continuous": 0.09269208833952335, "convolution": 0.1384995633470844, "function": 0.1384995633470844, "integrable": 0.1384995633470844, "bounded": 0.1384995633470844}}, {"docstring": " In a normed vector space `E`, there can be no satellite configuration with `multiplicity E + 1` points and the parameter `good_\u03c4 E`. This will ensure that in the inductive construction to get the Besicovitch covering families, there will never be more than `multiplicity E` nonempty families.\n", "keywords": {"normed vector space": 0.0026580947039025753, "vector space": 0.016951155097562426, "normed vector": 0.023429465030212888, "satellite configuration": 0.023429465030212888, "Besicovitch covering families": 0.029069264924033878, "multiplicity": 0.06458387216829861, "good": 0.07341787287626325, "Besicovitch covering": 0.08947848698108392, "nonempty families": 0.09254659500393542, "space": 0.11016584643300398, "points": 0.11016584643300398, "parameter": 0.11016584643300398, "covering families": 0.12073178983902322, "families": 0.1408543811072372, "normed": 0.1513046335336394, "vector": 0.1513046335336394, "satellite": 0.1513046335336394, "configuration": 0.1513046335336394, "inductive construction": 0.1712768859673408, "Besicovitch": 0.21477334452696845}}, {"docstring": " The auxiliary set corresponding to the composition of partial sums asymptotically contains all possible compositions.\n", "keywords": {"partial sums asymptotically": 0.007041919398291632, "auxiliary set": 0.035715520099333646, "partial sums": 0.035715520099333646, "sums asymptotically": 0.035715520099333646, "composition of partial": 0.11487806119690562, "auxiliary": 0.18569843656348187, "set": 0.18569843656348187, "partial": 0.18569843656348187, "sums": 0.18569843656348187, "asymptotically": 0.18569843656348187, "composition": 0.2690767023266335}}, {"docstring": "A function is `C^(n + 1)` at a point iff locally, it has a derivative which is `C^n`.\n", "keywords": {"point iff locally": 0.0010606143890052174, "iff locally": 0.00899321792126428, "point iff": 0.013527995261974615, "locally": 0.0771485953923296, "function": 0.1155310835876123, "point": 0.1155310835876123, "iff": 0.1155310835876123, "derivative": 0.1155310835876123}}, {"docstring": "A finitely presented algebra is of finite type.\n", "keywords": {"finitely presented algebra": 0.03339840940482845, "finite type": 0.04940384002065631, "finitely presented": 0.09700399286574239, "presented algebra": 0.09700399286574239, "type": 0.15831692877998726, "finitely": 0.29736558256021506, "presented": 0.29736558256021506, "algebra": 0.29736558256021506, "finite": 0.29736558256021506}}, {"docstring": " Given a family of points, if we use a member of the family as a base point, the `weighted_vsub_of_point` does not depend on the value of the weights at this point.\n", "keywords": {"base point": 0.016876725988014495, "point": 0.0421334149615753, "weighted": 0.0629483379837471, "vsub": 0.0629483379837471, "family": 0.08643341894102655, "family of points": 0.11844695532572518, "points": 0.1264002448847259, "member": 0.13130219201242474, "base": 0.13130219201242474, "depend": 0.13130219201242474, "weights": 0.13130219201242474}}, {"docstring": "`a < b` as natural numbers if and only if `a < b` in `fin n`.\n", "keywords": {"natural numbers": 0.02570861714399338, "fin": 0.09568045026443411, "natural": 0.15831692877998726, "numbers": 0.15831692877998726}}, {"docstring": "A subgroup `K` includes `closure k` if and only if it includes `k`.\n", "keywords": {"includes": 0.055127829619426576, "subgroup": 0.09713402394201612, "closure": 0.09713402394201612}}, {"docstring": "Alias of `zsmul_right_inj`, for ease of discovery alongside `zsmul_le_zsmul_iff'` and `zsmul_lt_zsmul_iff'`.\n", "keywords": {"zsmul": 0.006947731365216964, "discovery alongside": 0.01149182769133687, "ease of discovery": 0.015189371892318074, "iff": 0.05037451224226699, "inj": 0.06638525851253083, "Alias": 0.09288174174581286, "alongside": 0.09288174174581286, "ease": 0.12231969132779077, "discovery": 0.12231969132779077}}, {"docstring": "The p-adic norm respects division.\n", "keywords": {"norm respects division": 0.016559150827736194, "p-adic norm respects": 0.03339840940482845, "respects division": 0.04940384002065631, "p-adic norm": 0.09700399286574239, "norm respects": 0.09700399286574239, "division": 0.15831692877998726, "p-adic": 0.29736558256021506, "norm": 0.29736558256021506, "respects": 0.29736558256021506}}, {"docstring": "Right multiplication in a ring is an additive monoid morphism.\n", "keywords": {"additive monoid morphism": 0.016559150827736194, "monoid morphism": 0.04940384002065631, "additive monoid": 0.09700399286574239, "morphism": 0.15831692877998726, "multiplication": 0.29736558256021506, "ring": 0.29736558256021506, "additive": 0.29736558256021506, "monoid": 0.29736558256021506}}, {"docstring": " A function which is continuous on a set `s` is almost everywhere strongly measurable with respect to `\u03bc.restrict s` when either the source space or the target space is second-countable.\n", "keywords": {"strongly measurable": 0.017595046402022366, "measurable with respect": 0.017595046402022366, "source space": 0.023251977563965413, "target space": 0.023251977563965413, "space is second-countable": 0.037682341941210055, "space": 0.08640514249691128, "set": 0.0883382645966668, "\u03bc.restrict": 0.0883382645966668, "second-countable": 0.0883382645966668, "function": 0.13149453879183629, "continuous": 0.13149453879183629, "strongly": 0.13149453879183629, "measurable": 0.13149453879183629, "respect": 0.13149453879183629, "source": 0.13149453879183629, "target": 0.13149453879183629}}, {"docstring": "An induction principle for closure membership for predicates with two arguments.\n", "keywords": {"induction principle": 0.02570861714399338, "principle for closure": 0.02570861714399338, "closure membership": 0.02570861714399338, "membership for predicates": 0.02570861714399338, "arguments": 0.09568045026443411, "induction": 0.15831692877998726, "principle": 0.15831692877998726, "closure": 0.15831692877998726, "membership": 0.15831692877998726, "predicates": 0.15831692877998726}}, {"docstring": "`has_scalar` version of `comp_mul_left`\n", "keywords": {"scalar": 0.04491197687864554, "comp": 0.04491197687864554, "mul": 0.04491197687864554, "left": 0.04491197687864554, "version": 0.15831692877998726}}, {"docstring": "A subring is closed under negation.\n", "keywords": {"closed under negation": 0.04940384002065631, "subring is closed": 0.09700399286574239, "negation": 0.15831692877998726, "subring": 0.29736558256021506, "closed": 0.29736558256021506}}, {"docstring": "**Alias** of lt_or_eq_of_le`.\n", "keywords": {"Alias": 0.030396371632413578}}, {"docstring": "The real interval `[0, 1]` is a set of unique differentiability.\n", "keywords": {"real interval": 0.04940384002065631, "unique differentiability": 0.04940384002065631, "set of unique": 0.09700399286574239, "interval": 0.15831692877998726, "differentiability": 0.15831692877998726, "real": 0.29736558256021506, "set": 0.29736558256021506, "unique": 0.29736558256021506}}, {"docstring": "An auxiliary lemma for `linear_independent_le_basis`: we handle the case where the basis `b` is infinite.\n", "keywords": {"auxiliary lemma": 0.03439110359613085, "handle the case": 0.03439110359613085, "linear": 0.0528063806271324, "independent": 0.0528063806271324, "basis": 0.06839635777587466, "infinite": 0.11145728654016383, "auxiliary": 0.1823394614884183, "lemma": 0.1823394614884183, "handle": 0.1823394614884183, "case": 0.1823394614884183}}, {"docstring": " A continuous function on a closed interval with `f a = f b` takes either its maximum or its minimum value at a point in the interior of the interval.\n", "keywords": {"continuous function": 0.012578992104256836, "closed interval": 0.015482601066086234, "interval": 0.06839635777587466, "continuous": 0.11145728654016383, "function": 0.11145728654016383, "closed": 0.11145728654016383, "maximum": 0.11145728654016383, "minimum": 0.11145728654016383, "point": 0.11145728654016383, "interior": 0.11145728654016383}}, {"docstring": " The exponential map in a commutative Banach-algebra `\ud835\udd38` over a normed field `\ud835\udd42` of characteristic zero has Fr\u00e9chet-derivative `exp \ud835\udd42 x \u2022 1 : \ud835\udd38 \u2192L[\ud835\udd42] \ud835\udd38` at any point `x` in the disk of convergence.\n", "keywords": {"commutative Banach-algebra": 0.005548741293751374, "normed field": 0.00899321792126428, "disk of convergence": 0.00899321792126428, "exponential map": 0.013527995261974615, "Banach-algebra": 0.04776309965539685, "Fr\u00e9chet-derivative": 0.04776309965539685, "field": 0.0771485953923296, "exp": 0.0771485953923296, "point": 0.0771485953923296, "convergence": 0.0771485953923296, "exponential": 0.1155310835876123, "map": 0.1155310835876123, "commutative": 0.1155310835876123, "normed": 0.1155310835876123, "characteristic": 0.1155310835876123, "disk": 0.1155310835876123}}, {"docstring": "Binary strict **rearrangement inequality**.\n", "keywords": {"Binary strict": 0.02570861714399338, "rearrangement inequality": 0.02570861714399338, "Binary": 0.15831692877998726, "strict": 0.15831692877998726, "rearrangement": 0.15831692877998726, "inequality": 0.15831692877998726}}, {"docstring": " If a type carries two unital binary operations that distribute over each other, then these operations are commutative.  In fact, they give a commutative monoid structure, see `eckmann_hilton.comm_monoid`.\n", "keywords": {"unital binary operations": 0.026347846206964447, "type carries": 0.0689240256486952, "carries two unital": 0.0689240256486952, "unital binary": 0.0689240256486952, "binary operations": 0.09177007045257439, "operations": 0.16551142833564586, "operations that distribute": 0.18920460760791769, "eckmann": 0.22810824333536373, "hilton.comm": 0.22810824333536373, "commutative": 0.23924085102603296, "commutative monoid structure": 0.24375845329767196, "type": 0.25392876379467555, "carries": 0.25392876379467555, "unital": 0.25392876379467555, "binary": 0.25392876379467555, "distribute": 0.25392876379467555, "monoid": 0.3160777540947682, "monoid structure": 0.3377272920631148, "fact": 0.39936926939872885, "structure": 0.39936926939872885}}, {"docstring": "**Alias** of the forward direction of asymptotics.is_O_with_norm_left`.\n", "keywords": {"direction of asymptotics.is": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "norm": 0.04491197687864554, "left": 0.04491197687864554, "asymptotics.is": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "To prove something about polynomials, it suffices to show the condition is closed under taking sums, and it holds for monomials.\n", "keywords": {"taking sums": 0.015380821171891606, "holds for monomials": 0.015380821171891606, "suffices to show": 0.02570861714399338, "show the condition": 0.02570861714399338, "condition is closed": 0.02570861714399338, "closed under taking": 0.02570861714399338, "polynomials": 0.09568045026443411, "sums": 0.09568045026443411, "monomials": 0.09568045026443411, "prove": 0.15831692877998726, "suffices": 0.15831692877998726, "show": 0.15831692877998726, "condition": 0.15831692877998726, "closed": 0.15831692877998726, "taking": 0.15831692877998726, "holds": 0.15831692877998726}}, {"docstring": " This lemma says that `\u03bb x, a ^ x` is strictly differentiable for `a < 0`. Note that these values of `a` are outside of the \"official\" domain of `a ^ x`, and we may redefine `a ^ x` for negative `a` if some other definition will be more convenient.\n", "keywords": {"strictly differentiable": 0.010159422250580143, "lemma": 0.10028582371075691, "strictly": 0.10028582371075691, "differentiable": 0.10028582371075691, "official": 0.17881754828257995, "Note": 0.22862739428695167, "domain": 0.22862739428695167, "redefine": 0.22862739428695167, "negative": 0.22862739428695167, "convenient": 0.22862739428695167, "definition": 0.2790829227183407}}, {"docstring": " The set of points which are isolated on the left is countable when the space is second-countable.\n", "keywords": {"space is second-countable": 0.00899321792126428, "set of points": 0.013527995261974615, "left is countable": 0.013527995261974615, "second-countable": 0.0771485953923296, "set": 0.1155310835876123, "points": 0.1155310835876123, "isolated": 0.1155310835876123, "left": 0.1155310835876123, "countable": 0.1155310835876123, "space": 0.1155310835876123}}, {"docstring": " Additivity of a multilinear map along all coordinates at the same time, writing `f (m + m')` as the sum  of `f (s.piecewise m m')` over all sets `s`.\n", "keywords": {"multilinear map": 0.009239332327148086, "writing": 0.04491197687864554, "Additivity": 0.06844581806138879, "time": 0.06844581806138879, "s.piecewise": 0.06844581806138879, "sets": 0.06844581806138879, "multilinear": 0.09568045026443411, "map": 0.09568045026443411, "coordinates": 0.09568045026443411, "sum": 0.09568045026443411}}, {"docstring": " If for any three points `x < y < z`, the slope of the secant line of `f : \ud835\udd5c \u2192 \ud835\udd5c` on `[x, y]` is greater than the slope of the secant line of `f` on `[x, z]`, then `f` is concave.\n", "keywords": {"secant line": 0.004619666163574043, "slope": 0.04784022513221706, "secant": 0.04784022513221706, "line": 0.04784022513221706, "points": 0.08922538916412363, "concave": 0.08922538916412363, "greater": 0.12363091320521931}}, {"docstring": " If `s` is a measurable set, then `\ud835\udcdd[s] a` is a measurably generated filter for each `a`. This cannot be an `instance` because it depends on a non-instance `hs : measurable_set s`.\n", "keywords": {"measurably generated filter": 0.003176167788249899, "measurably generated": 0.021228876264270686, "generated filter": 0.021228876264270686, "measurable set": 0.06676764925004709, "measurable": 0.125088714341066, "set": 0.125088714341066, "measurably": 0.1441789836111891, "generated": 0.1441789836111891, "filter": 0.1441789836111891, "instance": 0.22989350183706597, "non-instance": 0.30063633329181444, "depends": 0.3691259849200222}}, {"docstring": "Extra simp lemma that `dsimp` can use. `simp` will never use this.\n", "keywords": {"Extra simp lemma": 0.02500995304854036, "dsimp": 0.07915015343857928, "Extra simp": 0.08453883749566703, "simp lemma": 0.14033512486368607, "Extra": 0.16205454282434614, "simp": 0.2405027004070563, "lemma": 0.25584912197094006}}, {"docstring": "Scalar multiplication commutes with the inclusion of each component into the direct sum.\n", "keywords": {"Scalar multiplication commutes": 0.0025258761156662004, "Scalar multiplication": 0.015380821171891606, "direct sum": 0.015380821171891606, "multiplication commutes": 0.02570861714399338, "Scalar": 0.09568045026443411, "sum": 0.09568045026443411, "multiplication": 0.15831692877998726, "commutes": 0.15831692877998726, "inclusion": 0.15831692877998726, "component": 0.15831692877998726, "direct": 0.15831692877998726}}, {"docstring": " If one splits a list along a composition, and then joins the sublists, one gets back the original list.\n", "keywords": {"joins the sublists": 0.021114872146320036, "back the original": 0.03498702377830618, "original list": 0.05135123883758033, "splits a list": 0.11245662598947327, "composition": 0.11246769819744629, "sublists": 0.11246769819744629, "list": 0.13282721021560867, "splits": 0.1838594885424691, "joins": 0.1838594885424691, "back": 0.1838594885424691, "original": 0.1838594885424691}}, {"docstring": "A special case of `continuous_on.comp_fract`.\n", "keywords": {"continuous": 0.04491197687864554, "on.comp": 0.04491197687864554, "fract": 0.04491197687864554, "special case": 0.09700399286574239, "special": 0.29736558256021506, "case": 0.29736558256021506}}, {"docstring": " If a function `f` is continuous on a convex set `D \u2286 \u211d`, is twice differentiable on its interior, and `f''` is strictly positive on the interior, then `f` is strictly convex on `D`. Note that we don't require twice differentiability explicitly as it already implied by the second derivative being strictly positive.\n", "keywords": {"convex set": 0.025938139619888535, "strictly positive": 0.03595226488474196, "strictly convex": 0.05517516853818968, "interior": 0.06122328628444225, "strictly": 0.08769635521324817, "convex": 0.09937709833046966, "function": 0.12720416778358418, "set": 0.12720416778358418, "positive": 0.12748742522249815, "continuous": 0.1734651840809652, "differentiable": 0.1734651840809652, "require twice differentiability": 0.2161643117459098, "differentiability explicitly": 0.2161643117459098, "derivative being strictly": 0.3055933601905702, "Note": 0.33606701543788686, "require": 0.4215954059226303, "differentiability": 0.4215954059226303, "explicitly": 0.4215954059226303, "implied": 0.4215954059226303, "derivative": 0.4215954059226303}}, {"docstring": "**Alias** of the forward direction of order.pred_lt_pred_iff`.\n", "keywords": {"direction of order.pred": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "pred": 0.04491197687864554, "iff": 0.04491197687864554, "order.pred": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "Given two elements `b`, `c` of a `cancel_monoid_with_zero` and a nonzero element `a`, `a*b` divides `a*c` iff `b` divides `c`.\n", "keywords": {"nonzero element": 0.00859916398811872, "divides": 0.021352745740207107, "cancel": 0.05706283858652404, "monoid": 0.05706283858652404, "iff": 0.05706283858652404, "elements": 0.08040632340484048, "element": 0.08040632340484048, "nonzero": 0.10603455617644456}}, {"docstring": " Commutativity of additive actions is a symmetric relation. This lemma can't be an instance because this would cause a loop in the instance search graph.\n", "keywords": {"Commutativity of additive": 0.036378432021021534, "symmetric relation": 0.036378432021021534, "additive actions": 0.059260526860675365, "Commutativity": 0.14840353637699516, "relation": 0.14840353637699516, "instance search graph": 0.23603434104734863, "additive": 0.2365273465835411, "actions": 0.2365273465835411, "symmetric": 0.2365273465835411, "search graph": 0.24288129287790988, "instance": 0.3019247536779512, "graph": 0.3770378920346049, "instance search": 0.4555487937736221, "lemma": 0.5182978603858105, "loop": 0.5182978603858105, "search": 0.5182978603858105}}, {"docstring": "A pi type is nontrivial if it's nonempty everywhere and nontrivial somewhere.\n", "keywords": {"type is nontrivial": 0.12748048004056906, "nontrivial": 0.14323823713631006, "type": 0.19488865479360015, "nonempty": 0.19488865479360015}}, {"docstring": " If a `finset` of a subtype is converted to the main type with `embedding.subtype`, all elements of the result have the property of the subtype.\n", "keywords": {"main type": 0.012385089084719787, "subtype is converted": 0.037394484593030464, "finset": 0.052376395424323874, "embedding.subtype": 0.052376395424323874, "subtype": 0.06767673667974392, "converted": 0.11060549338282699, "main": 0.11060549338282699, "type": 0.11060549338282699, "elements": 0.11060549338282699, "result": 0.11060549338282699, "property": 0.11060549338282699}}, {"docstring": "If a continuous map `f` maps `s` to `t`, then it maps `closure s` to `closure t`.\n", "keywords": {"continuous map": 0.025542235432263437, "closure": 0.06626030218517898, "maps": 0.07704593263708079, "map": 0.15409186527416158, "continuous": 0.1616313649453326}}, {"docstring": " Not an instance since `\ud835\udd5c` can't be inferred. See `normed_space.to_locally_convex_space` for a slightly weaker instance version.\n", "keywords": {"inferred": 0.14840353637699516, "weaker instance version": 0.1546629928250128, "instance version": 0.2071197415663574, "normed": 0.21197353881683212, "space.to": 0.21197353881683212, "locally": 0.21197353881683212, "convex": 0.21197353881683212, "space": 0.21197353881683212, "instance": 0.22753915903640465, "slightly weaker instance": 0.2424934071895529, "weaker instance": 0.30867119531750287, "slightly weaker": 0.3673019860549203, "version": 0.3770378920346049, "slightly": 0.5182978603858105, "weaker": 0.5182978603858105}}, {"docstring": " If a ball in a proper space includes a closed set `s`, then there exists a ball with the same center and a strictly smaller radius that includes `s`.\n", "keywords": {"strictly smaller radius": 0.0010655604796610148, "proper space includes": 0.001247778679158908, "closed set": 0.007785112635212619, "exists a ball": 0.009771784832171294, "proper space": 0.01033815036603184, "strictly smaller": 0.01033815036603184, "smaller radius": 0.01033815036603184, "space includes": 0.012088600551609154, "includes a closed": 0.030279377671229107, "radius that includes": 0.030279377671229107, "ball": 0.0478335509652962, "includes": 0.05903906243931906, "set": 0.07636756015111258, "proper": 0.10115516112043156, "space": 0.10115516112043156, "closed": 0.10115516112043156, "exists": 0.10115516112043156, "center": 0.10115516112043156, "strictly": 0.10115516112043156, "smaller": 0.10115516112043156}}, {"docstring": " *Urysohn's metrization theorem* (Tychonoff's version): a regular topological space with second countable topology `X` is metrizable, i.e., there exists a metric space structure that generates the same topology.\n", "keywords": {"Urysohn metrization theorem": 0.0013272544558001341, "Tychonoff version": 0.007035796950799888, "regular topological space": 0.009976191211952827, "metric space structure": 0.009976191211952827, "Urysohn metrization": 0.011557966362703787, "metrization theorem": 0.020921027161117343, "countable topology": 0.025842978083571163, "regular topological": 0.03467504983336206, "exists a metric": 0.03467504983336206, "structure that generates": 0.03467504983336206, "topological space": 0.050820597877387894, "metric space": 0.050820597877387894, "space structure": 0.050820597877387894, "Urysohn": 0.06241429839313376, "Tychonoff": 0.06241429839313376, "topology": 0.06880581048934313, "theorem": 0.11193974053503682, "version": 0.11193974053503682, "metrizable": 0.11193974053503682, "space": 0.13209142901998333}}, {"docstring": "The `v`-adic valuation of a sum is bounded above by the maximum of the valuations.\n", "keywords": {"adic valuation": 0.017599084419657855, "sum is bounded": 0.019557279302732804, "adic": 0.09329120537733218, "sum": 0.1384995633470844, "bounded": 0.1384995633470844, "maximum": 0.1384995633470844, "valuation": 0.1853841766790467, "valuations": 0.1853841766790467}}, {"docstring": "Two subsemigroups are equal if they have the same elements.\n", "keywords": {"subsemigroups are equal": 0.09700399286574239, "elements": 0.15831692877998726, "subsemigroups": 0.29736558256021506, "equal": 0.29736558256021506}}, {"docstring": "In a separable space, a family of nonempty disjoint open sets is countable.\n", "keywords": {"nonempty disjoint open": 0.0042542192213185686, "disjoint open sets": 0.0042542192213185686, "separable space": 0.015380821171891606, "sets is countable": 0.015380821171891606, "family of nonempty": 0.02570861714399338, "nonempty disjoint": 0.02570861714399338, "disjoint open": 0.02570861714399338, "open sets": 0.02570861714399338, "space": 0.09568045026443411, "countable": 0.09568045026443411, "separable": 0.15831692877998726, "family": 0.15831692877998726, "nonempty": 0.15831692877998726, "disjoint": 0.15831692877998726, "open": 0.15831692877998726, "sets": 0.15831692877998726}}, {"docstring": " If `f` sends two periodic points `x` and `y` of positive periods to the same point, then `x = y`.\n", "keywords": {"sends two periodic": 0.022138323509052035, "periodic points": 0.027673082137283082, "positive periods": 0.03663237450220032, "sends": 0.11521656054299435, "points": 0.14324596573275905, "point": 0.14324596573275905, "periodic": 0.1879836817695587, "positive": 0.1879836817695587, "periods": 0.1879836817695587}}, {"docstring": "In a commutative monoid, an element `a` divides an element `b` iff `a` divides all left    associates of `b`.\n", "keywords": {"commutative monoid": 0.013833902242147065, "divides an element": 0.020251543406469834, "left associates": 0.02064652498550541, "element": 0.03606013103477163, "divides all left": 0.038368417651393795, "divides": 0.054147325146855434, "iff": 0.05632962681207606, "monoid": 0.09593831581184391, "commutative": 0.14222822903176371, "left": 0.14222822903176371, "associates": 0.14222822903176371}}, {"docstring": "Assumes left covariance.\n", "keywords": {"Assumes left covariance": 0.008321268142839145, "Assumes left": 0.04940384002065631, "left covariance": 0.04940384002065631, "Assumes": 0.15831692877998726, "covariance": 0.15831692877998726, "left": 0.29736558256021506}}, {"docstring": "Shows that the `n + 1`th integer part `b\u2099\u208a\u2081` of the stream is smaller or equal than the inverse of the `n`th fractional part `fr\u2099` of the stream. This result is straight-forward as `b\u2099\u208a\u2081` is defined as the floor of `1 / fr\u2099`\n", "keywords": {"integer part": 0.01183762437800477, "fractional part": 0.01183762437800477, "smaller or equal": 0.017567419131441008, "stream is smaller": 0.03621931016711813, "part": 0.04451960990882013, "fr\u2099": 0.04625562257584001, "stream": 0.055043299852171754, "Shows": 0.10379416872596303, "integer": 0.13139304727920198, "smaller": 0.13139304727920198, "equal": 0.13139304727920198, "inverse": 0.13139304727920198, "fractional": 0.13139304727920198, "result is straight-forward": 0.13459072968625924, "result": 0.3444196796358625, "straight-forward": 0.3444196796358625, "defined": 0.3444196796358625, "floor": 0.3444196796358625}}, {"docstring": "The p-adic value of an integer `z \u2260 0` is the multiplicity of `p` in `z`.\n", "keywords": {"integer": 0.09568045026443411, "p-adic": 0.15831692877998726, "multiplicity": 0.15831692877998726}}, {"docstring": "`game_add` is a `subrelation` of `prod.lex`.\n", "keywords": {"game": 0.04491197687864554, "add": 0.04491197687864554, "subrelation": 0.04491197687864554, "prod.lex": 0.04491197687864554}}, {"docstring": "The intersection of an open dense set with a dense set is a dense set.\n", "keywords": {"open dense set": 0.00575310306913915, "dense set": 0.01111547820112007, "open dense": 0.026628163883647565, "dense": 0.05277230959332906, "set": 0.06794458488847384, "intersection": 0.16383273847958243, "open": 0.16383273847958243}}, {"docstring": "Two triangles with the same points have the same orthocenter.\n", "keywords": {"orthocenter": 0.09568045026443411, "triangles": 0.15831692877998726, "points": 0.15831692877998726}}, {"docstring": "An element `a` is `M`-regular if and only if a positive power of `a` is `M`-regular.\n", "keywords": {"positive power": 0.020225813225353943, "regular": 0.05332403764722467, "element": 0.09492398510093508, "positive": 0.1408007092310104, "power": 0.1408007092310104}}, {"docstring": " If `dist (f n) (f (n+1))` is bounded by `C * r^n`, `r < 1`, then the distance from `f 0` to the limit of `f` is bounded above by `C / (1 - r)`.\n", "keywords": {"dist": 0.055708263664958506, "bounded": 0.05815404476918013, "distance": 0.11718348279991213, "limit": 0.11718348279991213}}, {"docstring": " Consider a disjoint family of intervals `(x, y)` with `x < y` in a second-countable space. Then the family is countable. This is not a straightforward consequence of second-countability as some of these intervals might be empty (but in fact this can happen only for countably many of them).\n", "keywords": {"second-countable space": 0.02314711644969516, "disjoint family": 0.05797037445324595, "space": 0.12884645072003895, "family": 0.15603292546019193, "disjoint": 0.175584571545148, "second-countable": 0.175584571545148, "intervals": 0.19834223277694737, "family is countable": 0.2382104965557869, "countable": 0.3393573829177788, "straightforward consequence": 0.3680743489639643, "consequence of second-countability": 0.3680743489639643, "family of intervals": 0.3834748818311032, "empty": 0.42804693086123485, "straightforward": 0.5186960327062603, "consequence": 0.5186960327062603, "second-countability": 0.5186960327062603, "fact": 0.5186960327062603, "happen": 0.5186960327062603, "countably": 0.5186960327062603}}, {"docstring": "**Alias** of the reverse direction of neg_strict_convex_on_iff`.\n", "keywords": {"direction of neg": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "strict": 0.04491197687864554, "convex": 0.04491197687864554, "iff": 0.04491197687864554, "neg": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "The right injection of a space in a disjoint union is an isometry\n", "keywords": {"disjoint union": 0.02570861714399338, "isometry": 0.09568045026443411, "injection": 0.15831692877998726, "space": 0.15831692877998726, "disjoint": 0.15831692877998726, "union": 0.15831692877998726}}, {"docstring": "The function `update f a : \u03c0 a \u2192 \u03a0 a, \u03c0 a` is always measurable.  This doesn't require `f` to be measurable.  This should not be confused with the statement that `update f a x` is measurable.\n", "keywords": {"measurable": 0.08816566466920864, "update": 0.11639500186424936, "function": 0.14874045279071021, "require": 0.3776636783628022, "confused": 0.5461581775082489, "statement": 0.5461581775082489}}, {"docstring": "Any element additively semiconjugates `0` to `0`.\n", "keywords": {"element additively semiconjugates": 0.0025258761156662004, "additively semiconjugates": 0.015380821171891606, "element additively": 0.02570861714399338, "semiconjugates": 0.09568045026443411, "element": 0.15831692877998726, "additively": 0.15831692877998726}}, {"docstring": " Two `composition_series` are equal if they are the same length and have the same `i`th element for every `i`\n", "keywords": {"composition": 0.04491197687864554, "series": 0.04491197687864554, "equal": 0.15831692877998726, "length": 0.15831692877998726, "element": 0.15831692877998726}}, {"docstring": " If `\u03bc` is a measure finite at filter `l` and `f` is a function such that its norm is bounded above at `l`, then `f` is integrable at `l`.\n", "keywords": {"finite at filter": 0.0065920978564317735, "measure finite": 0.009239332327148086, "norm is bounded": 0.009239332327148086, "filter": 0.06844581806138879, "measure": 0.09568045026443411, "finite": 0.09568045026443411, "function": 0.09568045026443411, "norm": 0.09568045026443411, "bounded": 0.09568045026443411, "integrable": 0.09568045026443411}}, {"docstring": " Two local homeomorphisms are equal when they have equal `to_fun`, `inv_fun` and `source`. It is not sufficient to have equal `to_fun` and `source`, as this only determines `inv_fun` on the target. This would only be true for a weaker notion of equality, arguably the right one, called `eq_on_source`.\n", "keywords": {"fun": 0.022550232682259325, "source": 0.04301158644014677, "local homeomorphisms": 0.052610471225784015, "inv": 0.06646858295253788, "equal": 0.12624509961565614, "local": 0.22356419637158154, "homeomorphisms": 0.22356419637158154, "homeomorphisms are equal": 0.23767605200572198, "called": 0.393034915823603, "determines": 0.40984144874120026, "target": 0.40984144874120026, "notion of equality": 0.4249758741278533, "sufficient": 0.5000055640905027, "equality": 0.5029285383688847, "arguably": 0.5029285383688847, "weaker notion": 0.5423582088642558, "true": 0.5929942528078431, "weaker": 0.5929942528078431, "notion": 0.5929942528078431}}, {"docstring": "Free modules are projective.\n", "keywords": {"Free modules": 0.04940384002065631, "modules are projective": 0.04940384002065631, "Free": 0.15831692877998726, "projective": 0.15831692877998726, "modules": 0.29736558256021506}}, {"docstring": " The `n+1`-th iterated derivative can be obtained by taking the `n`-th derivative of the derivative.\n", "keywords": {"obtained by taking": 0.024662903654370644, "iterated derivative": 0.04402106909902688, "derivative": 0.09059379888612011, "iterated": 0.15514278968948286, "obtained": 0.15514278968948286, "taking": 0.15514278968948286}}, {"docstring": "For subsets of \u2115, we can show that colex is equivalent to binary.\n", "keywords": {"equivalent to binary": 0.04940384002065631, "show that colex": 0.09700399286574239, "colex is equivalent": 0.09700399286574239, "binary": 0.15831692877998726, "subsets": 0.29736558256021506, "show": 0.29736558256021506, "colex": 0.29736558256021506, "equivalent": 0.29736558256021506}}, {"docstring": "Assumes left covariance.\n", "keywords": {"Assumes left covariance": 0.008321268142839145, "Assumes left": 0.04940384002065631, "left covariance": 0.04940384002065631, "Assumes": 0.15831692877998726, "covariance": 0.15831692877998726, "left": 0.29736558256021506}}, {"docstring": " For all `0 \u2264 x < \u03c0/2` we have `x < tan x`.  This is proved by checking that the function `tan x - x` vanishes at zero and has non-negative derivative.\n", "keywords": {"tan": 0.06089930403262147, "non-negative derivative": 0.11286975610175627, "proved by checking": 0.14297905941816277, "function": 0.2867584112776268, "vanishes": 0.2867584112776268, "derivative": 0.2867584112776268, "proved": 0.35368535792510575, "checking": 0.35368535792510575, "non-negative": 0.35368535792510575}}, {"docstring": "Assumes right covariance. The lemma assuming left covariance is `left.add_nonneg`.\n", "keywords": {"Assumes right covariance": 0.15195679415702995, "Assumes": 0.1531727145735673, "left.add": 0.2182620423168793, "nonneg": 0.2182620423168793, "covariance": 0.23216465691767033, "assuming left covariance": 0.2636654148178027, "lemma assuming left": 0.3201847146816566, "left covariance": 0.32446011851782974, "lemma assuming": 0.38571507274593436, "assuming left": 0.38571507274593436, "lemma": 0.5275897320195265, "assuming": 0.5275897320195265, "left": 0.5275897320195265}}, {"docstring": "If `M \u2264 N` are submonoids of `R`, then `N\u207b\u00b9S` is also the localization of `M\u207b\u00b9S` at `N`.\n", "keywords": {"submonoids": 0.1155310835876123, "localization": 0.1155310835876123}}, {"docstring": " Given a Polish space, and countably many finer Polish topologies, there exists another Polish topology which is finer than all of them.\n", "keywords": {"finer Polish topologies": 0.002552813362012048, "Polish space": 0.011665424817831692, "Polish topologies": 0.011665424817831692, "Polish topology": 0.017329874882601334, "finer Polish": 0.024180265002244315, "Polish": 0.037490177544606706, "exists another Polish": 0.05903804119710079, "countably many finer": 0.0753408235608056, "space": 0.10252384836042068, "topologies": 0.10252384836042068, "finer": 0.1049580867604466, "countably": 0.15145892749810547, "exists": 0.15145892749810547, "topology": 0.15145892749810547}}, {"docstring": "The inductively defined smallest congruence relation containing a binary relation `r` equals    the infimum of the set of congruence relations containing `r`.\n", "keywords": {"inductively defined smallest": 0.003469853724036919, "defined smallest congruence": 0.0037134583972046045, "smallest congruence relation": 0.003759480575429343, "equals the infimum": 0.015099935621315529, "inductively defined": 0.02249651976012989, "defined smallest": 0.02249651976012989, "binary relation": 0.022770293819005468, "smallest congruence": 0.024047742351991808, "congruence relation": 0.024340843589242808, "set of congruence": 0.05698855545313889, "relation": 0.0750470774044633, "congruence": 0.07915846438999359, "equals": 0.10028582371075691, "inductively": 0.14832923246533666, "defined": 0.14832923246533666, "smallest": 0.14832923246533666, "binary": 0.14832923246533666, "infimum": 0.14832923246533666, "set": 0.14832923246533666, "relations": 0.1500941548089266}}, {"docstring": "An extensionality lemma for `R \u2243L[R] M`.\n", "keywords": {"extensionality lemma": 0.02570861714399338, "extensionality": 0.15831692877998726, "lemma": 0.15831692877998726}}, {"docstring": "**Fermat's Theorem**: the derivative of a function at a local extremum equals zero.\n", "keywords": {"Fermat Theorem": 0.0032610119837787367, "local extremum equals": 0.0042542192213185686, "local extremum": 0.02570861714399338, "extremum equals": 0.02570861714399338, "Fermat": 0.057012387690331526, "Theorem": 0.057012387690331526, "derivative": 0.15831692877998726, "function": 0.15831692877998726, "local": 0.15831692877998726, "extremum": 0.15831692877998726, "equals": 0.15831692877998726}}, {"docstring": "See also `cardinal.aleph_0_le_mul_iff'`.\n", "keywords": {"cardinal.aleph": 0.04491197687864554, "mul": 0.04491197687864554, "iff": 0.04491197687864554}}, {"docstring": "A submonoid contains the monoid's 1.\n", "keywords": {"monoid": 0.15831692877998726, "submonoid": 0.29736558256021506}}, {"docstring": " If a vector space has a finite basis, then its dimension (seen as a cardinal) is equal to the cardinality of the basis.\n", "keywords": {"finite basis": 0.01347319449596249, "vector space": 0.018310930906343142, "basis": 0.04956935957632033, "dimension": 0.09017440044927587, "cardinal": 0.09017440044927587, "vector": 0.13409574860218185, "space": 0.13409574860218185, "finite": 0.13409574860218185, "equal": 0.13409574860218185, "cardinality": 0.13409574860218185}}, {"docstring": " The main proof-by-reflection theorem. Given reflected csring expressions `r\u2081` and `r\u2082` plus a storage `t` of atoms, if both expressions go to the same Horner normal form, then the original non-reflected expressions are equal. `H` follows from kernel reduction and is therefore `rfl`.\n", "keywords": {"Horner normal form": 0.06782751179846062, "theorem": 0.08897527674729179, "Horner normal": 0.1421348539609109, "main": 0.14794035445537265, "expressions": 0.18983261556120187, "normal form": 0.2232297219800688, "Horner": 0.256525580986529, "reflected csring expressions": 0.27913408434480497, "original non-reflected expressions": 0.27913408434480497, "reflected csring": 0.3077793899279827, "original non-reflected": 0.3077793899279827, "rfl": 0.3307402930137609, "storage": 0.37617633467278705, "atoms": 0.37617633467278705, "form": 0.37617633467278705, "equal": 0.37617633467278705, "csring expressions": 0.38174397174764885, "non-reflected expressions": 0.38174397174764885, "reflected": 0.4851237345029309, "csring": 0.4851237345029309}}, {"docstring": "**Alias** of the reverse direction of smul_neg_iff_of_neg`.\n", "keywords": {"direction of smul": 0.012741693123860753, "reverse direction": 0.01904688389482227, "neg": 0.019648131954263418, "Alias": 0.034278050535979626, "iff": 0.05393656033701752, "smul": 0.09202664026077896, "reverse": 0.1367145963576765, "direction": 0.1367145963576765}}, {"docstring": " Send a set of `x`'es in a finite extension `L` of the fraction field of `R` to `(y : R) \u2022 x \u2208 integral_closure R L`.\n", "keywords": {"Send a set": 0.00899321792126428, "finite extension": 0.00899321792126428, "fraction field": 0.013527995261974615, "integral": 0.04491197687864554, "Send": 0.0771485953923296, "extension": 0.0771485953923296, "closure": 0.0771485953923296, "set": 0.1155310835876123, "finite": 0.1155310835876123, "fraction": 0.1155310835876123, "field": 0.1155310835876123}}, {"docstring": " If `x^n = m` is an integer and `n` does not divide the `multiplicity p m`, then `x` is irrational.\n", "keywords": {"multiplicity": 0.09568045026443411, "irrational": 0.09568045026443411, "integer": 0.15831692877998726, "divide": 0.15831692877998726}}, {"docstring": "Binary **rearrangement inequality**.\n", "keywords": {"rearrangement inequality": 0.02570861714399338, "Binary": 0.04491197687864554, "rearrangement": 0.15831692877998726, "inequality": 0.15831692877998726}}, {"docstring": "An integral domain in which there is an irreducible element `p` such that every nonzero element is associated to a power of `p` is a discrete valuation ring.\n", "keywords": {"discrete valuation ring": 0.0016481455113524755, "valuation ring": 0.012051537142168538, "integral domain": 0.018034246898548233, "discrete valuation": 0.018034246898548233, "irreducible element": 0.023937535241430174, "nonzero element": 0.023937535241430174, "element": 0.08782297807514622, "ring": 0.08946888050496495, "integral": 0.13309686053898662, "domain": 0.13309686053898662, "irreducible": 0.13309686053898662, "nonzero": 0.13309686053898662, "power": 0.13309686053898662, "discrete": 0.13309686053898662, "valuation": 0.13309686053898662}}, {"docstring": "The second projection within a domain at a point in a product is `C^\u221e`.\n", "keywords": {"projection": 0.1155310835876123, "domain": 0.1155310835876123, "point": 0.1155310835876123, "product": 0.1155310835876123}}, {"docstring": " A subfamily of an orthonormal family (i.e., a composition with an injective map) is an orthonormal family.\n", "keywords": {"orthonormal family": 0.004083890065624342, "injective map": 0.014176630379520855, "family": 0.03674010039257565, "orthonormal": 0.055127829619426576, "map": 0.09713402394201612, "subfamily": 0.14390902704051098, "composition": 0.14390902704051098, "injective": 0.14390902704051098}}, {"docstring": "We have `2 \u2260 0` in a nontrivial ring whose characteristic is not `2`.\n", "keywords": {"nontrivial ring": 0.02570861714399338, "ring whose characteristic": 0.02570861714399338, "nontrivial": 0.15831692877998726, "ring": 0.15831692877998726, "characteristic": 0.15831692877998726}}, {"docstring": "To prove a property of a finite sum, it suffices to prove that the property is additive and holds on the summands.\n", "keywords": {"finite sum": 0.022885248721446715, "additive and holds": 0.037831312533597124, "suffices to prove": 0.04212793185246166, "prove": 0.10586606907408062, "sum": 0.11718348279991213, "summands": 0.11718348279991213, "property is additive": 0.12194096740933039, "property": 0.13945519496053638, "finite": 0.19092478917347616, "suffices": 0.19092478917347616, "additive": 0.19092478917347616, "holds": 0.19092478917347616, "prove a property": 0.20081151690422566}}, {"docstring": "A finite set is bounded\n", "keywords": {"set is bounded": 0.04940384002065631, "finite set": 0.09700399286574239, "bounded": 0.15831692877998726, "finite": 0.29736558256021506, "set": 0.29736558256021506}}, {"docstring": " If a function tends to infinity along a filter, then this function multiplied by a positive constant (on the right) also tends to infinity. For a version working in `\u2115` or `\u2124`, use `filter.tendsto.at_top_mul_const'` instead.\n", "keywords": {"positive constant": 0.017934473654079117, "function multiplied": 0.02762442478198571, "function": 0.086463051071557, "filter": 0.11333669386941954, "constant": 0.11333669386941954, "multiplied": 0.1554527012770092, "positive": 0.1554527012770092, "version working": 0.17935612784125676, "top": 0.22125774619993788, "mul": 0.22125774619993788, "const": 0.3074506896868104, "version": 0.38997397536695666, "working": 0.38997397536695666}}, {"docstring": "`cyclotomic n \u2124` is the minimal polynomial of a primitive `n`-th root of unity `\u03bc`.\n", "keywords": {"root of unity": 0.015380821171891606, "minimal polynomial": 0.02570861714399338, "cyclotomic": 0.09568045026443411, "primitive": 0.09568045026443411, "unity": 0.09568045026443411, "minimal": 0.15831692877998726, "polynomial": 0.15831692877998726, "root": 0.15831692877998726}}, {"docstring": " If `0 \u2264 r < 1`, then `n ^ k r ^ n` tends to zero for any natural `k`. This is a specialized version of `tendsto_pow_const_mul_const_pow_of_abs_lt_one`, singled out for ease of application.\n", "keywords": {"pow": 0.07767607699655694, "const": 0.07767607699655694, "natural": 0.128104973733605, "ease of application": 0.17631404289660177, "tendsto": 0.22302132203417566, "mul": 0.22302132203417566, "abs": 0.22302132203417566, "specialized version": 0.24501414226073304, "singled": 0.3378743228266075, "application": 0.3378743228266075, "specialized": 0.44361725888738957, "version": 0.44361725888738957, "ease": 0.44361725888738957}}, {"docstring": " If `s` is a closed set and two functions `f` and `g` are continuous on `s`, then the set `{x \u2208 s | f x \u2264 g x}` is a closed set.\n", "keywords": {"closed set": 0.015618870638040105, "closed": 0.06413440160927163, "set": 0.07871881127264589, "functions": 0.10752717485860083, "continuous": 0.15842879763921927}}, {"docstring": "`of_fn` on an empty domain is the empty list.\n", "keywords": {"empty list": 0.035552851931764155, "empty domain": 0.05913243875864445, "list": 0.11984314898676356, "empty": 0.14323823713631006, "domain": 0.19488865479360015}}, {"docstring": "If `generalized_continued_fraction.of v` terminates, then there is `n : \u2115` such that the `n`th convergent is exactly `v`.\n", "keywords": {"generalized": 0.04491197687864554, "continued": 0.04491197687864554, "terminates": 0.04491197687864554, "fraction.of": 0.09568045026443411, "convergent": 0.15831692877998726}}, {"docstring": " When `\u03b1` and `\u03b2` are in the same universe, this is the same as the result of `equiv_functor.map_equiv`.\n", "keywords": {"equiv": 0.020602899695743707, "functor.map": 0.055708263664958506, "universe": 0.09492398510093508, "result": 0.1408007092310104}}, {"docstring": "In a commutative monoid, an element `a` divides an element `b` iff all  left associates of `a` divide `b`.\n", "keywords": {"commutative monoid": 0.013833902242147065, "iff all left": 0.013833902242147065, "divides an element": 0.020251543406469834, "left associates": 0.02064652498550541, "element": 0.03606013103477163, "monoid": 0.09593831581184391, "iff": 0.09593831581184391, "divides": 0.10829465029371087, "divide": 0.10829465029371087, "commutative": 0.14222822903176371, "left": 0.14222822903176371, "associates": 0.14222822903176371}}, {"docstring": " The norm of `lsmul` equals 1 in any nontrivial normed group.  This is `continuous_linear_map.op_norm_lsmul_le` as an equality.\n", "keywords": {"nontrivial normed group": 0.011326803112663958, "normed group": 0.04131246820716694, "lsmul": 0.045519088506279205, "nontrivial normed": 0.06700577021681149, "equals": 0.0771485953923296, "group": 0.15831692877998726, "continuous": 0.22501140196509825, "linear": 0.22501140196509825, "map.op": 0.22501140196509825, "norm": 0.2370366908187126, "nontrivial": 0.2505951825352756, "normed": 0.2505951825352756, "equality": 0.3951375787241905}}, {"docstring": "Symmetric of `finset.image\u2082_image_left_comm`.\n", "keywords": {"finset.image \u2082_ image": 0.02570861714399338, "left": 0.04491197687864554, "comm": 0.04491197687864554, "Symmetric": 0.15831692877998726, "finset.image": 0.15831692877998726, "image": 0.15831692877998726}}, {"docstring": " Given two thresholds `p < q`, the sets `{x | v.lim_ratio \u03c1 x < p}` and `{x | q < v.lim_ratio \u03c1 x}` are obviously disjoint. The key to proving that `v.lim_ratio \u03c1` is almost everywhere measurable is to show that these sets have measurable supersets which are also disjoint, up to zero measure. This is the content of this lemma.\n", "keywords": {"v.lim": 0.034061261720516156, "ratio": 0.050327952313233684, "disjoint": 0.12371284338576721, "thresholds": 0.16006516631450465, "sets": 0.18443991972546234, "measurable": 0.2597047136274878, "key to proving": 0.3125615963660992, "measurable supersets": 0.33952170632388207, "measure": 0.3982635296791594, "key": 0.4879866730126161, "proving": 0.4879866730126161, "show": 0.4879866730126161, "supersets": 0.4879866730126161, "lemma": 0.4909083704840301, "sets have measurable": 0.5771893529509851, "content": 0.5813390113272435}}, {"docstring": " A function is `C^(n + 1)` on a domain with unique derivatives if and only if it is differentiable there, and its derivative (formulated with `deriv_within`) is `C^n`.\n", "keywords": {"domain with unique": 0.018641876658774394, "unique derivatives": 0.024893945799064354, "deriv": 0.05331699930238388, "formulated": 0.09101163530720666, "function": 0.135280142484453, "domain": 0.135280142484453, "unique": 0.135280142484453, "differentiable": 0.135280142484453, "derivatives": 0.17954807775654547}}, {"docstring": "Two `add_subgroup`s are equal if they have the same elements.\n", "keywords": {"add": 0.04491197687864554, "subgroup": 0.04491197687864554, "elements": 0.15831692877998726, "equal": 0.29736558256021506}}, {"docstring": "Harmonic series is not unconditionally summable.\n", "keywords": {"Harmonic series": 0.04940384002065631, "unconditionally summable": 0.04940384002065631, "Harmonic": 0.15831692877998726, "summable": 0.15831692877998726, "series": 0.29736558256021506, "unconditionally": 0.29736558256021506}}, {"docstring": "The characteristic equals the exponential characteristic iff the former is prime.\n", "keywords": {"exponential characteristic iff": 0.003796865164394668, "equals the exponential": 0.019557279302732804, "characteristic equals": 0.02635223776265893, "exponential characteristic": 0.02635223776265893, "characteristic iff": 0.02635223776265893, "characteristic": 0.09269208833952335, "prime": 0.09329120537733218, "equals": 0.1384995633470844, "exponential": 0.1384995633470844, "iff": 0.1384995633470844}}, {"docstring": "If `X` has subobject lattice `{\u22a5, \u22a4}`, then `X` is simple.\n", "keywords": {"subobject lattice": 0.015380821171891606, "lattice": 0.09568045026443411, "simple": 0.09568045026443411, "subobject": 0.15831692877998726}}, {"docstring": "Elements of disjoint, normal subgroups commute\n", "keywords": {"normal subgroups commute": 0.008321268142839145, "Elements of disjoint": 0.02570861714399338, "normal subgroups": 0.04940384002065631, "subgroups commute": 0.04940384002065631, "Elements": 0.15831692877998726, "disjoint": 0.15831692877998726, "normal": 0.15831692877998726, "commute": 0.15831692877998726, "subgroups": 0.29736558256021506}}, {"docstring": "The function `(1 + t/x) ^ x` tends to `exp t` at `+\u221e` for naturals `x`.\n", "keywords": {"function": 0.0771485953923296, "exp": 0.0771485953923296, "naturals": 0.0771485953923296}}, {"docstring": " If the multiplicative support of `f` is finite, then for every `x` in the domain of `f`, `f x` divides `finprod f`.\n", "keywords": {"multiplicative support": 0.009239332327148086, "divides": 0.04491197687864554, "finite": 0.06844581806138879, "finprod": 0.06844581806138879, "multiplicative": 0.09568045026443411, "support": 0.09568045026443411, "domain": 0.09568045026443411}}, {"docstring": " The integral of a nonnegative function w.r.t. a volume generated by a locally-finite measure is nonnegative.\n", "keywords": {"nonnegative function": 0.01625939630580789, "volume generated": 0.018310930906343142, "locally-finite measure": 0.018310930906343142, "measure is nonnegative": 0.057554627632877955, "nonnegative": 0.08871286057464066, "function": 0.09017440044927587, "integral": 0.13409574860218185, "volume": 0.13409574860218185, "generated": 0.13409574860218185, "locally-finite": 0.13409574860218185, "measure": 0.13409574860218185}}, {"docstring": "Pulling back a Polish topology under an equiv gives again a Polish topology.\n", "keywords": {"Polish topology": 0.008865005057921, "back a Polish": 0.015727687192458092, "Pulling back": 0.02459177073035948, "Polish": 0.03921180520110237, "topology": 0.11107071682746067, "Pulling": 0.12156210109285605, "back": 0.19744254481508877, "equiv": 0.19744254481508877}}, {"docstring": " Given a compact set in a proper space, the measure of its `r`-closed thickenings converges to its measure as `r` tends to `0`.\n", "keywords": {"closed thickenings converges": 0.003969605018367032, "proper space": 0.020744656539556924, "closed thickenings": 0.020744656539556924, "compact set": 0.03439110359613085, "thickenings converges": 0.03439110359613085, "space": 0.11145728654016383, "closed": 0.11145728654016383, "measure": 0.1314201551237121, "compact": 0.1823394614884183, "set": 0.1823394614884183, "proper": 0.1823394614884183, "thickenings": 0.1823394614884183, "converges": 0.1823394614884183}}, {"docstring": " In the specific case of multilinear maps on spaces indexed by `fin (n+1)`, where one can build an element of `\u03a0(i : fin (n+1)), M i` using `cons`, one can express directly the multiplicativity of a multilinear map along the first variable.\n", "keywords": {"specific case": 0.019759017604293553, "spaces indexed": 0.019759017604293553, "build an element": 0.019759017604293553, "express directly": 0.019759017604293553, "directly the multiplicativity": 0.019759017604293553, "fin": 0.020224371215251474, "multilinear maps": 0.021261181864573712, "case of multilinear": 0.04925743771710562, "maps on spaces": 0.04925743771710562, "cons": 0.055012255605756503, "multilinear": 0.07214318191126844, "variable": 0.0937866855411403, "specific": 0.13919828894679062, "case": 0.13919828894679062, "spaces": 0.13919828894679062, "indexed": 0.13919828894679062, "build": 0.13919828894679062, "element": 0.13919828894679062, "express": 0.13919828894679062, "directly": 0.13919828894679062}}, {"docstring": "If a category has all binary coproducts and all coequalizers, then it also has all pushouts.    As usual, this is not an instance, since there may be a more direct way to construct    pushouts.\n", "keywords": {"binary coproducts": 0.032945302382736935, "construct pushouts": 0.09758609362850307, "pushouts": 0.1033267718872057, "coequalizers": 0.1221512649852118, "category": 0.1785903903600119, "binary": 0.1785903903600119, "coproducts": 0.1785903903600119, "usual": 0.3258146251285017, "instance": 0.3258146251285017, "direct": 0.4302357358329322, "construct": 0.4302357358329322}}, {"docstring": "The inverse of a group homomorphism is a group homomorphism if the target is commutative.\n", "keywords": {"group homomorphism": 0.017773687275607644, "target is commutative": 0.02459177073035948, "group": 0.07726414307411157, "homomorphism": 0.11107071682746067, "commutative": 0.12156210109285605, "inverse": 0.19744254481508877, "target": 0.19744254481508877}}, {"docstring": "The second modified cyclotomic polyomial is `X + 1` if the characteristic of `R` is not `2`.\n", "keywords": {"modified cyclotomic polyomial": 0.0042542192213185686, "modified cyclotomic": 0.02570861714399338, "cyclotomic polyomial": 0.02570861714399338, "modified": 0.15831692877998726, "cyclotomic": 0.15831692877998726, "polyomial": 0.15831692877998726, "characteristic": 0.15831692877998726}}, {"docstring": " The product of a list of positive natural numbers is positive, and likewise for any nontrivial ordered semiring.\n", "keywords": {"nontrivial ordered semiring": 0.003880277136642503, "positive natural numbers": 0.009594358938760443, "ordered semiring": 0.020435055290363522, "natural numbers": 0.033892441937102495, "nontrivial ordered": 0.033892441937102495, "positive natural": 0.04949487345881267, "list of positive": 0.10882816095144712, "numbers is positive": 0.10882816095144712, "semiring": 0.11060549338282699, "positive": 0.13023752997463905, "product": 0.18105634546484617, "list": 0.18105634546484617, "natural": 0.18105634546484617, "numbers": 0.18105634546484617, "likewise": 0.18105634546484617, "nontrivial": 0.18105634546484617, "ordered": 0.18105634546484617}}, {"docstring": " Given a point in the affine span from which all the points are equidistant, that point is the circumcenter.\n", "keywords": {"affine span": 0.023732923233905415, "points are equidistant": 0.085077633387816, "equidistant": 0.103096657787716, "circumcenter": 0.103096657787716, "point": 0.1318400049084515, "affine": 0.15225875770903138, "span": 0.15225875770903138, "points": 0.263680009816903}}, {"docstring": "The image of the filter `at_top` on `Ioi a` under the coercion equals `at_top`.\n", "keywords": {"coercion equals": 0.012741693123860753, "top": 0.019648131954263418, "Ioi": 0.05307550101705468, "filter": 0.09202664026077896, "equals": 0.09202664026077896, "image": 0.1367145963576765, "coercion": 0.1367145963576765}}, {"docstring": "On `game`, simp-normal inequalities should use as few negations as possible.\n", "keywords": {"simp-normal inequalities": 0.015380821171891606, "game": 0.04491197687864554, "simp-normal": 0.09568045026443411, "inequalities": 0.15831692877998726, "negations": 0.15831692877998726}}, {"docstring": " The congruence relation used to localize a `comm_monoid` at a submonoid can be expressed equivalently as an infimum (see `localization.r`) or explicitly (see `localization.r'`).\n", "keywords": {"localization.r": 0.018476855251993128, "congruence relation": 0.033100028790236186, "expressed equivalently": 0.033100028790236186, "comm": 0.051687907611449965, "monoid": 0.051687907611449965, "infimum": 0.10923981997294611, "explicitly": 0.10923981997294611, "congruence": 0.17899586521379354, "relation": 0.17899586521379354, "localize": 0.17899586521379354, "submonoid": 0.17899586521379354, "expressed": 0.17899586521379354, "equivalently": 0.17899586521379354}}, {"docstring": "If a subgroup of a topological group has `1` in its interior, then it is open.\n", "keywords": {"topological group": 0.02570861714399338, "interior": 0.09568045026443411, "open": 0.09568045026443411, "subgroup": 0.15831692877998726, "topological": 0.15831692877998726, "group": 0.15831692877998726}}, {"docstring": " Multiplying the first vector passed to `oangle` by a positive real does not change the angle.\n", "keywords": {"change the angle": 0.015380821171891606, "vector passed": 0.02570861714399338, "positive real": 0.02570861714399338, "oangle": 0.04491197687864554, "Multiplying": 0.09568045026443411, "angle": 0.09568045026443411, "vector": 0.15831692877998726, "passed": 0.15831692877998726, "positive": 0.15831692877998726, "real": 0.15831692877998726, "change": 0.15831692877998726}}, {"docstring": "The cross product of two vectors is perpendicular to the first vector.\n", "keywords": {"cross product": 0.037831312533597124, "vectors is perpendicular": 0.12194096740933039, "cross": 0.19092478917347616, "product": 0.19092478917347616, "perpendicular": 0.19092478917347616, "vectors": 0.27891038992107275, "vector": 0.27891038992107275}}, {"docstring": " The circumradius of a simplex with at least two points is positive.\n", "keywords": {"points is positive": 0.04940384002065631, "positive": 0.15831692877998726, "circumradius": 0.29736558256021506, "simplex": 0.29736558256021506, "points": 0.29736558256021506}}, {"docstring": " The list that makes up a `vector` made up of a single element, retrieved via `to_list`, is equal to the list of that single element.\n", "keywords": {"single element": 0.006735321131621115, "element": 0.04032009703387271, "vector": 0.060788587812935495, "list": 0.06648456721729691, "single": 0.08241297087035726, "list that makes": 0.09793857465258611, "made": 0.10318978615207167, "retrieved": 0.10318978615207167, "makes": 0.15238874947317055, "equal": 0.15238874947317055}}, {"docstring": "`\u03c7\u2088` takes values in `{0, 1, -1}`\n", "keywords": {}}, {"docstring": "A module has dimension 1 iff there is some nonzero `v : V` so every vector is a multiple of `v`.\n", "keywords": {"module has dimension": 0.00899321792126428, "dimension": 0.0771485953923296, "iff": 0.0771485953923296, "nonzero": 0.0771485953923296, "module": 0.1155310835876123, "vector": 0.1155310835876123, "multiple": 0.1155310835876123}}, {"docstring": "**Alias** of the reverse direction of ennreal.of_real_eq_zero`.\n", "keywords": {"direction of ennreal.of": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "real": 0.04491197687864554, "ennreal.of": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " Show that the response for left provided by `left_response` preserves the left-player-wins condition.\n", "keywords": {"condition": 0.05632962681207606, "left provided": 0.05755977077196411, "Show": 0.11840455484321102, "preserves": 0.11840455484321102, "response": 0.1411879566095664, "left": 0.1411879566095664, "provided": 0.19274649316101516, "response for left": 0.2612951038999884}}, {"docstring": "**Alias** of the forward direction of is_compact_iff_ultrafilter_le_nhds`.\n", "keywords": {"forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "compact": 0.04491197687864554, "iff": 0.04491197687864554, "ultrafilter": 0.04491197687864554, "nhds": 0.04491197687864554, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "There is no surjection from `\u03b1 : Type u` into `Type u`. This theorem  demonstrates why `Type : Type` would be inconsistent in Lean.\n", "keywords": {"Type": 0.0228427086148051, "inconsistent in Lean": 0.09624178469987604, "Lean": 0.1931498475640949, "surjection": 0.1935010205184483, "theorem demonstrates": 0.2603949423426964, "theorem": 0.45453041186073795, "demonstrates": 0.45453041186073795, "inconsistent": 0.45453041186073795}}, {"docstring": " If a function is differentiable on the right of a point `a : \u211d`, continuous at `a`, and its derivative also converges at `a`, then `f` is differentiable on the right at `a`.\n", "keywords": {"function is differentiable": 0.00627747783360919, "derivative also converges": 0.008541237424818026, "differentiable": 0.03389408175523106, "point": 0.07201108509564766, "continuous": 0.07201108509564766, "function": 0.09202664026077896, "derivative": 0.09202664026077896, "converges": 0.09202664026077896}}, {"docstring": "Young's inequality, a version for nonnegative real numbers.\n", "keywords": {"nonnegative real numbers": 0.016559150827736194, "Young inequality": 0.02570861714399338, "real numbers": 0.04940384002065631, "version for nonnegative": 0.09700399286574239, "nonnegative real": 0.09700399286574239, "Young": 0.15831692877998726, "inequality": 0.15831692877998726, "numbers": 0.15831692877998726, "version": 0.29736558256021506, "nonnegative": 0.29736558256021506, "real": 0.29736558256021506}}, {"docstring": " The composition of a local homeomorphism from `H` to `M` and its inverse belongs to the `C^n` groupoid.\n", "keywords": {"local homeomorphism": 0.02570861714399338, "inverse belongs": 0.02570861714399338, "groupoid": 0.04491197687864554, "composition": 0.15831692877998726, "local": 0.15831692877998726, "homeomorphism": 0.15831692877998726, "inverse": 0.15831692877998726, "belongs": 0.15831692877998726}}, {"docstring": "A key divisibility fact for the proof of `witt_vector.map_frobenius_poly`.\n", "keywords": {"key divisibility fact": 0.03339840940482845, "witt": 0.04491197687864554, "vector.map": 0.04491197687864554, "frobenius": 0.04491197687864554, "poly": 0.04491197687864554, "key divisibility": 0.09700399286574239, "divisibility fact": 0.09700399286574239, "key": 0.29736558256021506, "divisibility": 0.29736558256021506, "fact": 0.29736558256021506, "proof": 0.29736558256021506}}, {"docstring": " The function `(b * exp x + c) / (x ^ n)` tends to `+\u221e` at `+\u221e`, for any natural number `n` and any real numbers `b` and `c` such that `b` is positive.\n", "keywords": {"natural number": 0.014146116061608767, "real numbers": 0.014146116061608767, "function": 0.09202664026077896, "exp": 0.09202664026077896, "positive": 0.09202664026077896, "number": 0.10202857019797992, "numbers": 0.10202857019797992, "natural": 0.1367145963576765, "real": 0.1367145963576765}}, {"docstring": " The inverse of a map which preserves multiplication, preserves multiplication when the target is commutative.\n", "keywords": {"target is commutative": 0.02391462167226668, "preserves multiplication": 0.02495406599442899, "map which preserves": 0.09916653097095413, "preserves": 0.10901343189444501, "multiplication": 0.10901343189444501, "commutative": 0.11984314898676356, "inverse": 0.19488865479360015, "map": 0.19488865479360015, "target": 0.19488865479360015}}, {"docstring": " The left inverse to a formal multilinear series is indeed a left inverse, provided its linear term is invertible.\n", "keywords": {"formal multilinear series": 0.007493603982362141, "provided its linear": 0.022484625344159365, "term is invertible": 0.022484625344159365, "left inverse": 0.02289946390635722, "formal multilinear": 0.03718843747800602, "multilinear series": 0.03718843747800602, "linear term": 0.03718843747800602, "left": 0.10463417723629108, "inverse": 0.10463417723629108, "provided": 0.1161324896811994, "invertible": 0.1161324896811994, "formal": 0.18935428276389019, "multilinear": 0.18935428276389019, "series": 0.18935428276389019, "linear": 0.18935428276389019, "term": 0.18935428276389019}}, {"docstring": "Definition of `x \u2264 y` on pre-games, in terms of `\u29cf`\n", "keywords": {"Definition": 0.09568045026443411, "pre-games": 0.09568045026443411, "terms": 0.15831692877998726}}, {"docstring": "The set of natural number powers of an element of a monoid `M` is a submonoid of `M`.\n", "keywords": {"natural number powers": 0.0008990471097494833, "set of natural": 0.009239332327148086, "natural number": 0.009239332327148086, "number powers": 0.009239332327148086, "monoid": 0.06844581806138879, "set": 0.09568045026443411, "natural": 0.09568045026443411, "number": 0.09568045026443411, "powers": 0.09568045026443411, "element": 0.09568045026443411, "submonoid": 0.09568045026443411}}, {"docstring": "Zero additively semiconjugates any element to itself.\n", "keywords": {"additively semiconjugates": 0.09700399286574239, "semiconjugates any element": 0.09700399286574239, "additively": 0.29736558256021506, "semiconjugates": 0.29736558256021506, "element": 0.29736558256021506}}, {"docstring": "`int.clog b` and `zpow b` (almost) form a Galois connection.\n", "keywords": {"form a Galois": 0.008293207122436794, "Galois connection": 0.008293207122436794, "Galois": 0.08596317751626563, "int.clog": 0.09568045026443411, "zpow": 0.09568045026443411, "form": 0.09568045026443411, "connection": 0.09568045026443411}}, {"docstring": "The composition of two ring homomorphisms is a ring homomorphism.\n", "keywords": {"ring homomorphisms": 0.05738242751169008, "ring": 0.11647786950765905, "composition": 0.2040190808014209, "homomorphisms": 0.2329557390153181}}, {"docstring": "This lemma corresponds to one of the coherence laws for duals in rigid categories, see  `category_theory.monoidal.rigid`.\n", "keywords": {"category": 0.04491197687864554, "rigid categories": 0.04940384002065631, "lemma corresponds": 0.09700399286574239, "coherence laws": 0.09700399286574239, "laws for duals": 0.09700399286574239, "duals in rigid": 0.09700399286574239, "categories": 0.15831692877998726, "lemma": 0.29736558256021506, "corresponds": 0.29736558256021506, "coherence": 0.29736558256021506, "laws": 0.29736558256021506, "duals": 0.29736558256021506, "rigid": 0.29736558256021506}}, {"docstring": " An `affine_combination` with sum of weights 1 is in the `affine_span` of an indexed family, if the underlying ring is nontrivial.\n", "keywords": {"affine": 0.018640908132686783, "sum of weights": 0.020171377334626643, "indexed family": 0.020171377334626643, "ring is nontrivial": 0.020171377334626643, "underlying ring": 0.03346752176983843, "combination": 0.052008009273421085, "span": 0.052008009273421085, "weights": 0.10987504304330521, "family": 0.10987504304330521, "nontrivial": 0.10987504304330521, "sum": 0.17995476918065306, "indexed": 0.17995476918065306, "underlying": 0.17995476918065306, "ring": 0.17995476918065306}}, {"docstring": " Unlike `support_congr`, which assumes that `\u2200 (x \u2208 g.support), f x = g x)`, here we have the weaker assumption that `\u2200 (x \u2208 f.support), f x = g x`.\n", "keywords": {"weaker assumption": 0.005987543063120938, "Unlike": 0.04491197687864554, "support": 0.04491197687864554, "congr": 0.04491197687864554, "g.support": 0.04491197687864554, "f.support": 0.04491197687864554, "assumes": 0.0771485953923296, "weaker": 0.0771485953923296, "assumption": 0.0771485953923296}}, {"docstring": "If `t` is bounded, then so is `s \u2229 t`\n", "keywords": {"bounded": 0.09568045026443411}}, {"docstring": "Cardinality of an `Ioc` of finsets.\n", "keywords": {"Ioc": 0.030396371632413578, "Cardinality": 0.09568045026443411, "finsets": 0.09568045026443411}}, {"docstring": " The angle between two vectors is zero if and only if they are nonzero and one is a positive multiple of the other.\n", "keywords": {"positive multiple": 0.02570861714399338, "angle": 0.15831692877998726, "vectors": 0.15831692877998726, "nonzero": 0.15831692877998726, "positive": 0.15831692877998726, "multiple": 0.15831692877998726}}, {"docstring": "If `A` is subterminal, the unique morphism from it to the terminal object is a monomorphism. The converse of `is_subterminal_of_mono_terminal_from`.\n", "keywords": {"unique morphism": 0.038582279020236365, "terminal object": 0.07439207246646563, "subterminal": 0.11121265807107177, "monomorphism": 0.1325513591249599, "terminal": 0.17962235342287336, "unique": 0.19274072340671292, "morphism": 0.19274072340671292, "object": 0.19274072340671292, "mono": 0.22989350183706597, "converse": 0.45332097725137205}}, {"docstring": "**Alias** of the forward direction of int.is_unit_iff_nat_abs_eq`.\n", "keywords": {"direction of int.is": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "unit": 0.04491197687864554, "iff": 0.04491197687864554, "nat": 0.04491197687864554, "abs": 0.04491197687864554, "int.is": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "If `x` and `y` are on the same ray as `z`, then so is `x + y`.\n", "keywords": {"ray": 0.15831692877998726}}, {"docstring": " An embedding from a topological space to a metric space is an isometry with respect to the induced metric space structure on the source space.\n", "keywords": {"induced metric space": 0.00397894651268886, "metric space structure": 0.00397894651268886, "metric space": 0.014715923544063054, "isometry with respect": 0.017180242469831658, "induced metric": 0.017962946412716035, "topological space": 0.028135593581307364, "space structure": 0.028135593581307364, "source space": 0.028135593581307364, "space": 0.052641712586693964, "metric": 0.0678890798004651, "embedding": 0.12996179062726113, "topological": 0.12996179062726113, "isometry": 0.12996179062726113, "respect": 0.12996179062726113, "induced": 0.12996179062726113, "structure": 0.12996179062726113, "source": 0.12996179062726113}}, {"docstring": "An isometry preserves edistances.\n", "keywords": {"isometry preserves edistances": 0.016559150827736194, "preserves edistances": 0.04940384002065631, "isometry preserves": 0.09700399286574239, "edistances": 0.15831692877998726, "isometry": 0.29736558256021506, "preserves": 0.29736558256021506}}, {"docstring": " Prefer putting constants to the left of `X ^ n`.  This lemma is the loop-avoiding `simp` version of `X_pow_mul_assoc`.\n", "keywords": {"Prefer putting constants": 0.005401660759706154, "Prefer putting": 0.02541909697430123, "putting constants": 0.04188746641162499, "Prefer": 0.12363091320521931, "simp": 0.17881754828257995, "pow": 0.17881754828257995, "mul": 0.17881754828257995, "assoc": 0.17881754828257995, "putting": 0.2005079697193566, "constants": 0.2005079697193566, "left": 0.2005079697193566, "loop-avoiding": 0.32883716426354986, "version": 0.32883716426354986, "lemma": 0.46553351027698087}}, {"docstring": "`count p n` can be expressed as the cardinality of `{k // k < n \u2227 p k}`.\n", "keywords": {"count": 0.0771485953923296, "expressed": 0.1155310835876123, "cardinality": 0.1155310835876123}}, {"docstring": "Two elements are equal if their coordinates are equal.\n", "keywords": {"elements are equal": 0.04437656514447953, "coordinates are equal": 0.04437656514447953, "equal": 0.10901343189444501, "elements": 0.19488865479360015, "coordinates": 0.19488865479360015}}, {"docstring": "Constructs an ordered module given an `ordered_add_comm_group`, a cone, and a proof that the order relation is the one defined by the cone.\n", "keywords": {"order relation": 0.019286283660143136, "ordered module": 0.025918337545600415, "Constructs an ordered": 0.041651221166323416, "cone": 0.051483732084204585, "add": 0.05430009520648986, "comm": 0.05430009520648986, "group": 0.05430009520648986, "ordered": 0.09183075782934418, "Constructs": 0.09262176965879712, "module": 0.13755493784698053, "proof": 0.13755493784698053, "order": 0.13755493784698053, "relation": 0.13755493784698053, "defined": 0.13755493784698053}}, {"docstring": " If a subset of a real vector space contains a segment, then the direction of this segment belongs to the tangent cone at its endpoints.\n", "keywords": {"real vector space": 0.0024287169002957616, "real vector": 0.017798659388540475, "vector space": 0.017798659388540475, "tangent cone": 0.017798659388540475, "segment belongs": 0.02356920246205565, "segment": 0.08706326953080504, "endpoints": 0.08886407157392263, "subset": 0.132239959875874, "real": 0.132239959875874, "vector": 0.132239959875874, "space": 0.132239959875874, "direction": 0.132239959875874, "belongs": 0.132239959875874, "tangent": 0.132239959875874, "cone": 0.132239959875874}}, {"docstring": "The additive congruence relation used to localize an `add_comm_monoid` at a submonoid can be expressed equivalently as an infimum (see `add_localization.r`) or explicitly (see `add_localization.r'`).\n", "keywords": {"additive congruence relation": 0.003160468805589013, "add": 0.011379867652144104, "additive congruence": 0.021159974244976832, "congruence relation": 0.021159974244976832, "expressed equivalently": 0.021159974244976832, "localization.r": 0.02136268972749829, "comm": 0.05708058999153848, "monoid": 0.05708058999153848, "infimum": 0.09716295641363648, "explicitly": 0.09716295641363648, "additive": 0.14394967063606187, "congruence": 0.14394967063606187, "relation": 0.14394967063606187, "localize": 0.14394967063606187, "submonoid": 0.14394967063606187, "expressed": 0.14394967063606187, "equivalently": 0.14394967063606187}}, {"docstring": " If `t` is a finite set of pairwise disjoint finite sets, then the product of `f a` over `a \u2208 \u22c3\u2080 t` is the product over `s \u2208 t` of the products of `f a` over `a \u2208 s`.\n", "keywords": {"pairwise disjoint finite": 0.0016890493026548836, "disjoint finite sets": 0.00171798864208544, "pairwise disjoint": 0.013856771487068513, "disjoint finite": 0.014091496607291358, "finite set": 0.014330254025310362, "set of pairwise": 0.034911415836739026, "product": 0.04978538211313046, "finite": 0.05943020922842295, "products": 0.09957076422626092, "pairwise": 0.11690759448097396, "disjoint": 0.11690759448097396, "set": 0.1188604184568459, "sets": 0.1188604184568459}}, {"docstring": "Convex **Jensen's inequality**, `finset.sum` version.\n", "keywords": {"Jensen inequality": 0.013797198203993007, "Convex": 0.04491197687864554, "finset.sum": 0.04491197687864554, "version": 0.04491197687864554, "Jensen": 0.08596317751626563, "inequality": 0.15831692877998726}}, {"docstring": " A product of a function `f : fin (n + 1) \u2192 \u03b2` over all `fin (n + 1)` is the product of `f (fin.last n)` plus the remaining product\n", "keywords": {"fin": 0.024397827871872953, "remaining product": 0.033324317031067335, "product": 0.06904399485134782, "function": 0.10556226050272582, "fin.last": 0.10556226050272582, "remaining": 0.1556959951131179}}, {"docstring": " If a function is `C^n` with `1 \u2264 n` around a point, then the derivative of `f` at this point is also a strict derivative.\n", "keywords": {"strict derivative": 0.03117712943655666, "point": 0.10191687733271076, "derivative": 0.10191687733271076, "function": 0.14832923246533666, "strict": 0.14832923246533666}}, {"docstring": " The `polar` of closed ball in a normed space `E` is the closed ball of the dual with inverse radius.\n", "keywords": {"closed ball": 0.010995547936910564, "normed space": 0.013546417228156258, "inverse radius": 0.013546417228156258, "dual with inverse": 0.020225813225353943, "polar": 0.055708263664958506, "closed": 0.07334489383741181, "ball": 0.07334489383741181, "space": 0.09492398510093508, "radius": 0.09492398510093508, "normed": 0.1408007092310104, "dual": 0.1408007092310104, "inverse": 0.1408007092310104}}, {"docstring": "The p-adic norm is nonnegative.\n", "keywords": {"norm is nonnegative": 0.04940384002065631, "p-adic norm": 0.09700399286574239, "nonnegative": 0.15831692877998726, "p-adic": 0.29736558256021506, "norm": 0.29736558256021506}}, {"docstring": "The image of an `add_monoid` hom is an `add_submonoid` of the codomain.\n", "keywords": {"add": 0.019648131954263418, "monoid": 0.05393656033701752, "submonoid": 0.05393656033701752, "hom": 0.11369206228658875, "codomain": 0.11369206228658875, "image": 0.18569843656348187}}, {"docstring": "Symmetric of `filter.map_map\u2082_right_comm`.\n", "keywords": {"filter.map": 0.04491197687864554, "comm": 0.04491197687864554, "Symmetric": 0.15831692877998726, "map": 0.15831692877998726}}, {"docstring": "If `f : \u03b1 \u2192 \u03b2` is a fibration between relations `r\u03b1` and `r\u03b2`, and `a : \u03b1` is  accessible under `r\u03b1`, then `f a` is accessible under `r\u03b2`.\n", "keywords": {"fibration between relations": 0.014176630379520855, "accessible": 0.055127829619426576, "relations": 0.09713402394201612, "fibration": 0.14390902704051098}}, {"docstring": " The orthogonal projection of the circumcenter onto a face is the circumcenter of that face.\n", "keywords": {"orthogonal projection": 0.02249651976012989, "circumcenter": 0.07915846438999359, "face": 0.10191687733271076, "orthogonal": 0.14832923246533666, "projection": 0.14832923246533666}}, {"docstring": " Given `c = line_map a b r`, `a < c < b`, the point `(c, f c)` is non-strictly below the segment `[(a, f a), (b, f b)]` if and only if `slope f a c \u2264 slope f c b`.\n", "keywords": {"slope": 0.026369104746389253, "line": 0.05393656033701752, "map": 0.07201108509564766, "point": 0.07201108509564766, "segment": 0.07201108509564766, "non-strictly": 0.09202664026077896}}, {"docstring": "Equality behind `commute a b`; useful for rewriting.\n", "keywords": {"Equality": 0.15831692877998726, "commute": 0.15831692877998726, "rewriting": 0.15831692877998726}}, {"docstring": "Weighted generalized mean inequality, version for two elements of `\u211d\u22650` and real exponents.\n", "keywords": {"Weighted generalized": 0.04940384002065631, "generalized mean inequality": 0.04940384002065631, "real exponents": 0.04940384002065631, "Weighted": 0.15831692877998726, "inequality": 0.15831692877998726, "version": 0.15831692877998726, "exponents": 0.15831692877998726, "generalized": 0.29736558256021506, "elements": 0.29736558256021506, "real": 0.29736558256021506}}, {"docstring": " The inner product of two vectors given with `weighted_vsub`, in terms of the pairwise distances.\n", "keywords": {"pairwise distances": 0.015380821171891606, "weighted": 0.04491197687864554, "vsub": 0.04491197687864554, "distances": 0.09568045026443411, "product": 0.15831692877998726, "vectors": 0.15831692877998726, "terms": 0.15831692877998726, "pairwise": 0.15831692877998726}}, {"docstring": " Theorems about `padic_norm_e` are named with a `'` so the names do not conflict with the equivalent theorems about `norm` (`\u2225 \u2225`).\n", "keywords": {"norm": 0.021352745740207107, "equivalent theorems": 0.04437656514447953, "padic": 0.05706283858652404, "Theorems": 0.10901343189444501, "named": 0.19488865479360015, "conflict": 0.19488865479360015, "equivalent": 0.19488865479360015}}, {"docstring": "The determinant of `conj_lie`, as a linear map.\n", "keywords": {"conj": 0.04491197687864554, "lie": 0.04491197687864554, "linear map": 0.04940384002065631, "map": 0.15831692877998726, "determinant": 0.29736558256021506, "linear": 0.29736558256021506}}, {"docstring": "A specialization of 'the smallest additive congruence relation containing an additive congruence relation `c` equals `c`'.\n", "keywords": {"additive congruence relation": 0.0045743476429141025, "smallest additive congruence": 0.00800109250015267, "additive congruence": 0.018650942614307144, "congruence relation": 0.018650942614307144, "smallest additive": 0.04771708711059453, "equals": 0.05899937629682816, "congruence": 0.07915846438999363, "additive": 0.11357121248292479, "relation": 0.11357121248292479, "specialization": 0.2005079697193566, "smallest": 0.2005079697193566}}, {"docstring": "`dvd` is injective in the left argument\n", "keywords": {"dvd": 0.04491197687864554, "left argument": 0.04940384002065631, "argument": 0.15831692877998726, "injective": 0.29736558256021506, "left": 0.29736558256021506}}, {"docstring": "Mapping a multiset through a predicate and counting the `true`s yields the cardinality of the set filtered by the predicate. Note that this uses the notion of a multiset of `Prop`s - due to the decidability requirements of `count`, the decidability instance on the LHS is different from the RHS. In particular, the decidability instance on the left leaks `classical.dec_eq`. See [here](https://github.com/leanprover-community/mathlib/pull/11306#discussion_r782286812) for more discussion.\n", "keywords": {"yields the cardinality": 0.018786437334300344, "set filtered": 0.018786437334300344, "Mapping a multiset": 0.021617572801630375, "decidability instance": 0.030557797867045114, "predicate and counting": 0.03715880471015615, "predicate": 0.054760003739235175, "decidability": 0.07550160933352285, "decidability requirements": 0.08691968507472471, "multiset": 0.08960232696463272, "true": 0.1011255862703019, "Mapping": 0.11807808240349395, "instance": 0.1271399079488797, "counting": 0.13579401733997368, "yields": 0.13579401733997368, "cardinality": 0.13579401733997368, "set": 0.13579401733997368, "filtered": 0.13579401733997368, "Prop": 0.1510379946679659, "RHS": 0.16787135057580282, "LHS": 0.18440188231169471}}, {"docstring": "**Alias** of the forward direction of strict_convex_iff_ord_connected`.\n", "keywords": {"direction of strict": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "convex": 0.04491197687864554, "iff": 0.04491197687864554, "ord": 0.04491197687864554, "connected": 0.04491197687864554, "strict": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "The *adjoint action* of a rack on itself is `op'`, and the adjoint action of `x \u25c3 y` is the conjugate of the action of `y` by the action of `x`. It is another way to understand the self-distributivity axiom.  This is used in the natural rack homomorphism `to_conj` from `R` to `conj (R \u2243 R)` defined by `op'`.\n", "keywords": {"adjoint action": 0.00679208835537459, "action": 0.02350058668448779, "adjoint": 0.0712860923699966, "natural rack homomorphism": 0.13948354045833167, "conj": 0.1459611987671159, "conjugate": 0.1728793702619101, "rack": 0.17578734426397058, "self-distributivity axiom": 0.18106708565519403, "rack homomorphism": 0.1905446671146054, "understand the self-distributivity": 0.2149232105074355, "natural rack": 0.22056833502913653, "axiom": 0.36450014023695115, "understand": 0.42059804059284245, "self-distributivity": 0.42059804059284245, "homomorphism": 0.4552327558253301, "defined": 0.4552327558253301, "natural": 0.5140004098393857}}, {"docstring": "**Alias** of the forward direction of list.suffix_nil_iff`.\n", "keywords": {"direction of list.suffix": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "nil": 0.04491197687864554, "iff": 0.04491197687864554, "list.suffix": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " The sequential closure of a set is contained in the closure of that set. The converse is not true.\n", "keywords": {"sequential closure": 0.039125378999743735, "closure": 0.0947878602322814, "set is contained": 0.1110119870828085, "set": 0.1207504852315805, "sequential": 0.19861310018350192, "contained": 0.19861310018350192, "true": 0.35520562385871335, "converse": 0.46258320047845314}}, {"docstring": "The composition of `quotient.mk` and a function with dense range has dense range.\n", "keywords": {"dense range": 0.02595416362410219, "quotient.mk": 0.05794058924527716, "function with dense": 0.10215850587430082, "dense": 0.11107071682746067, "range": 0.11107071682746067, "range has dense": 0.17380702710672757, "composition": 0.19744254481508877, "function": 0.19744254481508877}}, {"docstring": "When the reference set is dense, the embedding map is an isometry on its image.\n", "keywords": {"set is dense": 0.015380821171891606, "reference set": 0.02570861714399338, "embedding map": 0.02570861714399338, "dense": 0.09568045026443411, "image": 0.09568045026443411, "reference": 0.15831692877998726, "set": 0.15831692877998726, "embedding": 0.15831692877998726, "map": 0.15831692877998726, "isometry": 0.15831692877998726}}, {"docstring": "**Alias** of `left.add_pos_of_nonneg_of_pos`.\n", "keywords": {"pos": 0.020602899695743707, "Alias": 0.03498516242744211, "left.add": 0.055708263664958506, "nonneg": 0.055708263664958506}}, {"docstring": "Binary **rearrangement inequality**.\n", "keywords": {"rearrangement inequality": 0.02570861714399338, "Binary": 0.04491197687864554, "rearrangement": 0.15831692877998726, "inequality": 0.15831692877998726}}, {"docstring": "A finite set is bounded below.\n", "keywords": {"finite set": 0.09700399286574239, "set is bounded": 0.09700399286574239, "finite": 0.29736558256021506, "set": 0.29736558256021506, "bounded": 0.29736558256021506}}, {"docstring": " **Hausdorff's maximality principle**  There exists a maximal totally ordered set of `\u03b1`. Note that we do not require `\u03b1` to be partially ordered by `r`.\n", "keywords": {"Hausdorff maximality principle": 0.002642672347401873, "Hausdorff maximality": 0.01721312597228178, "maximal totally ordered": 0.03193894097092339, "totally ordered set": 0.03193894097092339, "maximality principle": 0.035823369414816786, "exists a maximal": 0.058386506213951056, "maximal totally": 0.058386506213951056, "Hausdorff": 0.0720466338245492, "totally ordered": 0.11900804226284042, "ordered set": 0.11900804226284042, "principle": 0.14724705908851674, "ordered": 0.22640134908386225, "maximality": 0.2348735419198309, "exists": 0.2348735419198309, "maximal": 0.2348735419198309, "totally": 0.2348735419198309, "set": 0.2348735419198309, "partially ordered": 0.3048845311104686, "Note": 0.3748840432180225, "require": 0.3748840432180225}}, {"docstring": "**Gauss's Lemma** for `\u2124` states that a primitive integer polynomial is irreducible iff it is  irreducible over `\u211a`.\n", "keywords": {"Gauss Lemma": 0.0038918968483365474, "primitive integer polynomial": 0.006644547988061552, "primitive integer": 0.03439110359613085, "integer polynomial": 0.03439110359613085, "polynomial is irreducible": 0.037547207484142704, "irreducible iff": 0.037547207484142704, "Gauss": 0.06226402419328029, "Lemma": 0.06226402419328029, "irreducible": 0.09923368367615536, "states": 0.11145728654016383, "primitive": 0.1823394614884183, "integer": 0.1823394614884183, "polynomial": 0.1823394614884183, "iff": 0.1823394614884183}}, {"docstring": "Given a chain from `a` to `b`, and a predicate true at `b`, if `r x y \u2192 p y \u2192 p x` then the predicate is true at `a`. That is, we can propagate the predicate all the way up the chain.\n", "keywords": {"predicate true": 0.07093695508407002, "true": 0.0943208516265672, "predicate": 0.11704413971725426, "chain": 0.1707077569454557, "predicate is true": 0.24530606522710766, "propagate the predicate": 0.2970709789988762, "propagate": 0.45809110834573713}}, {"docstring": " If a function `f` is twice differentiable on an open convex set `D \u2286 \u211d` and `f''` is strictly negative on `D`, then `f` is strictly concave on `D`. Note that we don't require twice differentiability explicitly as it already implied by the second derivative being strictly negative.\n", "keywords": {"open convex set": 0.00574358671213317, "convex set": 0.0274938898910848, "open convex": 0.04041301317282671, "strictly negative": 0.05133996479045569, "strictly concave": 0.06574541284012125, "strictly": 0.10433571621985527, "function": 0.13576856027650855, "set": 0.13576856027650855, "negative": 0.14874824153011415, "differentiable": 0.1970868863517791, "open": 0.1970868863517791, "convex": 0.1970868863517791, "concave": 0.1970868863517791, "require twice differentiability": 0.2686780140637021, "differentiability explicitly": 0.2686780140637021, "Note": 0.3530061493665469, "derivative being strictly": 0.3943851639800081, "require": 0.46019337044815234, "differentiability": 0.46019337044815234, "explicitly": 0.46019337044815234}}, {"docstring": "A sufficient condition for the Church-Rosser property.\n", "keywords": {"Church-Rosser property": 0.04940384002065631, "sufficient condition": 0.09700399286574239, "property": 0.15831692877998726, "sufficient": 0.29736558256021506, "condition": 0.29736558256021506, "Church-Rosser": 0.29736558256021506}}, {"docstring": "The distance between two points in a set is controlled by the diameter of the set.\n", "keywords": {"set is controlled": 0.06177684479462527, "set": 0.09269208833952335, "distance": 0.1384995633470844, "points": 0.1384995633470844, "controlled": 0.1384995633470844, "diameter": 0.1384995633470844}}, {"docstring": "The sheaf condition in terms of a limit diagram over all `{ V : opens X // \u2203 i, V \u2264 U i }` is equivalent to the reformulation in terms of a limit diagram over `U i` and `U i \u2293 U j`.\n", "keywords": {"limit diagram": 0.004316058496214479, "condition in terms": 0.011316121703659742, "reformulation in terms": 0.011316121703659742, "sheaf condition": 0.014846954793547482, "terms": 0.04625538145093589, "limit": 0.04625538145093589, "diagram": 0.04625538145093589, "opens": 0.08721891946868728, "sheaf": 0.12095349351053106, "condition": 0.12095349351053106, "equivalent": 0.12095349351053106, "reformulation": 0.12095349351053106}}, {"docstring": "**Alias** of right_distrib`.\n", "keywords": {"Alias": 0.030396371632413578, "distrib": 0.04491197687864554}}, {"docstring": "Pythagorean theorem, if-and-only-if vector inner product form.\n", "keywords": {"Pythagorean theorem": 0.02570861714399338, "vector inner product": 0.04940384002065631, "product form": 0.04940384002065631, "Pythagorean": 0.15831692877998726, "theorem": 0.15831692877998726, "vector": 0.15831692877998726, "form": 0.15831692877998726, "product": 0.29736558256021506}}, {"docstring": "Assumes left covariance.\n", "keywords": {"Assumes left covariance": 0.008321268142839145, "Assumes left": 0.04940384002065631, "left covariance": 0.04940384002065631, "Assumes": 0.15831692877998726, "covariance": 0.15831692877998726, "left": 0.29736558256021506}}, {"docstring": "**Alias** of ssubset_of_subset_not_subset`.\n", "keywords": {"subset": 0.021352745740207107, "Alias": 0.035514607549195436, "ssubset": 0.11984314898676356}}, {"docstring": "See also `finset.prod_bij`.\n", "keywords": {"finset.prod": 0.04491197687864554, "bij": 0.04491197687864554}}, {"docstring": "Sufficient conditions to show that the p-adic valuation of `q` is less than or equal to the p-adic vlauation of `q + r`.\n", "keywords": {"Sufficient conditions": 0.021114872146320032, "conditions to show": 0.034987023778306175, "p-adic valuation": 0.038330279597458564, "p-adic vlauation": 0.038330279597458564, "p-adic": 0.10038999320777726, "Sufficient": 0.11246769819744627, "conditions": 0.18385948854246909, "show": 0.18385948854246909, "valuation": 0.18385948854246909, "equal": 0.18385948854246909, "vlauation": 0.18385948854246909}}, {"docstring": " If a product of a `finset` of a subsingleton type has a given value, so do the terms in that product.\n", "keywords": {"subsingleton type": 0.013453448411345069, "finset": 0.054709255964732355, "product": 0.07162298286637953, "subsingleton": 0.11521656054299435, "type": 0.11521656054299435, "terms": 0.11521656054299435}}, {"docstring": " In the range `[0, \u03c0 / 2]`, we have a linear lower bound on `sin`. This inequality forms one half of Jordan's inequality, the other half is `real.sin_lt`\n", "keywords": {"linear lower bound": 0.018665921022078, "linear lower": 0.06700577021681149, "lower bound": 0.06700577021681149, "sin": 0.0771485953923296, "range": 0.15831692877998726, "real.sin": 0.22501140196509825, "Jordan inequality": 0.2267080672378807, "linear": 0.2505951825352756, "lower": 0.2505951825352756, "bound": 0.2505951825352756, "Jordan": 0.2948270607118151, "inequality": 0.3134212329211776, "half": 0.3134212329211776, "half of Jordan": 0.4055108871020017, "inequality forms": 0.5078886707330216, "forms": 0.5373296883685575, "forms one half": 0.8758389169258062}}, {"docstring": " A point in a metric space belongs to the (open) `\u03b4`-thickening of a subset `E` if and only if it is at distance less than `\u03b4` from some point of `E`.\n", "keywords": {"metric space belongs": 0.002535831815717203, "metric space": 0.018310930906343142, "space belongs": 0.018310930906343142, "open": 0.0528063806271324, "point": 0.08871286057464066, "thickening": 0.09017440044927587, "subset": 0.09017440044927587, "metric": 0.13409574860218185, "space": 0.13409574860218185, "belongs": 0.13409574860218185, "distance": 0.13409574860218185}}, {"docstring": "The p-adic value of an integer `z \u2260 0` is its p-adic_value as a rational\n", "keywords": {"integer": 0.11984314898676356, "rational": 0.11984314898676356, "p-adic": 0.14323823713631006}}, {"docstring": " If `L/K` is a field extension and an element `y` of `K` is a root of the minimal polynomial of an element `x \u2208 L`, then `y` maps to `x` under the field embedding.\n", "keywords": {"field embedding": 0.018329095544611738, "minimal polynomial": 0.020225813225353943, "field extension": 0.027430531955772185, "element": 0.03548996106871502, "field": 0.094808423351325, "maps": 0.09492398510093508, "embedding": 0.09492398510093508, "extension": 0.1408007092310104, "root": 0.1408007092310104, "minimal": 0.1408007092310104, "polynomial": 0.1408007092310104}}, {"docstring": " Changing coordinates between two elements of the maximal atlas gives rise to an element of the structure groupoid.\n", "keywords": {"Changing coordinates": 0.020744656539556924, "structure groupoid": 0.020744656539556924, "maximal atlas": 0.03439110359613085, "atlas gives rise": 0.03439110359613085, "Changing": 0.11145728654016383, "groupoid": 0.11145728654016383, "coordinates": 0.1823394614884183, "maximal": 0.1823394614884183, "atlas": 0.1823394614884183, "rise": 0.1823394614884183, "structure": 0.1823394614884183, "elements": 0.19846736735231071, "element": 0.19846736735231071}}, {"docstring": "**Alias** of the reverse direction of is_min_to_dual_iff`.\n", "keywords": {"reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "min": 0.04491197687864554, "dual": 0.04491197687864554, "iff": 0.04491197687864554, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " If a set has zero measure in a neighborhood of each of its points, then it has zero measure in a second-countable space.\n", "keywords": {"second-countable space": 0.012741693123860753, "measure": 0.05101428509898996, "points": 0.09202664026077896, "space": 0.09202664026077896, "set": 0.1367145963576765, "neighborhood": 0.1367145963576765, "second-countable": 0.1367145963576765}}, {"docstring": "**Alias** of the reverse direction of asymptotics.is_o_iff_forall_is_O_with`.\n", "keywords": {"direction of asymptotics.is": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "forall": 0.04491197687864554, "asymptotics.is": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "Indexed version of the above lemma `exists_lt_of_lt_cSup`. When `b < supr f`, there is an element `i` such that `b < f i`.\n", "keywords": {"Indexed version": 0.02541909697430123, "exists": 0.05899937629682816, "cSup": 0.05899937629682816, "Indexed": 0.12363091320521931, "lemma": 0.12363091320521931, "version": 0.2005079697193566, "supr": 0.32883716426354986, "element": 0.32883716426354986}}, {"docstring": " For any function `f` from a normed vector space to a Banach space, the set of points `x` such that `f` is analytic at `x` is open.\n", "keywords": {"normed vector space": 0.009594358938760443, "set of points": 0.020435055290363522, "Banach space": 0.024621638903181246, "normed vector": 0.033892441937102495, "vector space": 0.04949487345881267, "Banach": 0.09225444226215379, "function": 0.11060549338282699, "points": 0.11060549338282699, "open": 0.11060549338282699, "space": 0.13023752997463905, "normed": 0.18105634546484617, "vector": 0.18105634546484617, "set": 0.18105634546484617, "analytic": 0.18105634546484617}}, {"docstring": " An induction principle for permutations. If `P` holds for the identity permutation, and is preserved under composition with a non-trivial swap, then `P` holds for all permutations.\n", "keywords": {"induction principle": 0.04482689692617938, "permutations": 0.1325049055109628, "holds": 0.13954146135917034, "identity permutation": 0.14425126093763552, "principle for permutations": 0.16436469607546694, "induction": 0.20713198455404339, "principle": 0.20713198455404339, "non-trivial swap": 0.21176197370600428, "preserved under composition": 0.2924801649597749, "swap": 0.3673621349224128, "identity": 0.4757034115784038, "preserved": 0.4757034115784038, "composition": 0.4757034115784038, "non-trivial": 0.4757034115784038}}, {"docstring": "A closed interval in a densely ordered conditionally complete linear order is preconnected.\n", "keywords": {"densely ordered conditionally": 0.0042542192213185686, "ordered conditionally complete": 0.0042542192213185686, "conditionally complete linear": 0.0042542192213185686, "complete linear order": 0.0042542192213185686, "order is preconnected": 0.015380821171891606, "closed interval": 0.02570861714399338, "densely ordered": 0.02570861714399338, "ordered conditionally": 0.02570861714399338, "conditionally complete": 0.02570861714399338, "complete linear": 0.02570861714399338, "linear order": 0.02570861714399338, "preconnected": 0.09568045026443411, "closed": 0.15831692877998726, "interval": 0.15831692877998726, "densely": 0.15831692877998726, "ordered": 0.15831692877998726, "conditionally": 0.15831692877998726, "complete": 0.15831692877998726, "linear": 0.15831692877998726, "order": 0.15831692877998726}}, {"docstring": " A continuous function on a closed interval with `f a = f b` has a local extremum at some point of the corresponding open interval.\n", "keywords": {"continuous function": 0.012578992104256836, "local extremum": 0.012578992104256836, "closed interval": 0.015482601066086234, "open interval": 0.015482601066086234, "interval": 0.06839635777587466, "continuous": 0.11145728654016383, "function": 0.11145728654016383, "closed": 0.11145728654016383, "local": 0.11145728654016383, "extremum": 0.11145728654016383, "point": 0.11145728654016383, "open": 0.11145728654016383}}, {"docstring": "In a group that satisifes the normalizer condition, every maximal subgroup is normal\n", "keywords": {"normalizer condition": 0.04940384002065631, "subgroup is normal": 0.04940384002065631, "group that satisifes": 0.09700399286574239, "satisifes the normalizer": 0.09700399286574239, "maximal subgroup": 0.09700399286574239, "condition": 0.15831692877998726, "normal": 0.15831692877998726, "group": 0.29736558256021506, "satisifes": 0.29736558256021506, "normalizer": 0.29736558256021506, "maximal": 0.29736558256021506, "subgroup": 0.29736558256021506}}, {"docstring": "Two filters are equal when their underlying sets are equal.\n", "keywords": {"underlying sets": 0.037831312533597124, "filters are equal": 0.04212793185246166, "sets are equal": 0.04212793185246166, "equal": 0.10586606907408062, "filters": 0.19092478917347616, "underlying": 0.19092478917347616, "sets": 0.19092478917347616}}, {"docstring": " In a linear ordered field, for positive `a` and `b` we have `a\u207b\u00b9 \u2264 b \u2194 b\u207b\u00b9 \u2264 a`. See also `inv_le_of_inv_le` for a one-sided implication with one fewer assumption.\n", "keywords": {"linear ordered field": 0.0024400234642094946, "ordered field": 0.016018634870496127, "linear ordered": 0.02216221073515605, "inv": 0.07170568664164803, "field": 0.10707231661842652, "positive": 0.10707231661842652, "fewer assumption": 0.12387522129842544, "linear": 0.14724705908851674, "ordered": 0.14724705908851674, "one-sided implication": 0.16351863533044358, "assumption": 0.2940149351268243, "one-sided": 0.3748840432180225, "implication": 0.3748840432180225, "fewer": 0.3748840432180225}}, {"docstring": " The product of an element of `S` and an element of the additive closure of a multiplicative submonoid `S` is contained in the additive closure of `S`.\n", "keywords": {"additive closure": 0.00345820326272229, "multiplicative submonoid": 0.008928168471285964, "element": 0.041439408874615564, "additive": 0.041439408874615564, "closure": 0.041439408874615564, "submonoid": 0.08181382661701696, "product": 0.10816217784964993, "multiplicative": 0.10816217784964993, "contained": 0.10816217784964993}}, {"docstring": "If there exists a `b` such that `a = u a`, then `b = l a` is one such element.\n", "keywords": {"element": 0.06844581806138879, "exists": 0.09568045026443411}}, {"docstring": " For every prepartition `\u03c0` of `I` there exists a prepartition that covers exactly `I \\ \u03c0.Union`.\n", "keywords": {"\u03c0.Union": 0.055708263664958506, "exists a prepartition": 0.12194096740933036, "prepartition that covers": 0.12194096740933039, "prepartition": 0.13945519496053638, "exists": 0.19092478917347616, "covers": 0.19092478917347616}}, {"docstring": " A two-argument function applied to two `ite`s is a `ite` of that two-argument function applied to each of the branches.\n", "keywords": {"two-argument function applied": 0.0035121815863573985, "function applied": 0.013926396726657426, "two-argument function": 0.020157331984499715, "ite": 0.023475115800335837, "function": 0.08230740764692174, "applied": 0.08230740764692174, "two-argument": 0.11770621898149182, "branches": 0.1270037047429506}}, {"docstring": "A useful special case of `continuous.path_extend`.\n", "keywords": {"continuous.path": 0.04491197687864554, "extend": 0.04491197687864554, "special case": 0.09700399286574239, "special": 0.29736558256021506, "case": 0.29736558256021506}}, {"docstring": " A strictly concave function on an open segment is strictly lower-bounded by the min of its endpoints.\n", "keywords": {"strictly concave function": 0.009836841595559516, "concave function": 0.03439110359613085, "open segment": 0.03439110359613085, "strictly concave": 0.05033870131288873, "strictly lower-bounded": 0.05033870131288873, "segment is strictly": 0.11047974441476761, "endpoints": 0.11145728654016383, "strictly": 0.1314201551237121, "concave": 0.1823394614884183, "function": 0.1823394614884183, "open": 0.1823394614884183, "segment": 0.1823394614884183, "lower-bounded": 0.1823394614884183, "min": 0.1823394614884183}}, {"docstring": "Assumes left covariance. The lemma assuming right covariance is `right.add_nonneg`.\n", "keywords": {"Assumes left covariance": 0.021279743632738882, "Assumes left": 0.038712704770480444, "left covariance": 0.1273706910391025, "Assumes": 0.1531727145735673, "right.add": 0.21826204231687923, "nonneg": 0.21826204231687923, "covariance": 0.23216465691767033, "left": 0.2433193585127945, "lemma assuming": 0.38571507274593425, "lemma": 0.5275897320195264, "assuming": 0.5275897320195264, "assuming right covariance": 0.5846700711531686}}, {"docstring": " The trimmed property of a measure \u03bc states that `\u03bc.to_outer_measure.trim = \u03bc.to_outer_measure`. This theorem shows that a restricted trimmed outer measure is a trimmed outer measure.\n", "keywords": {"trimmed outer measure": 0.030118873451841485, "\u03bc.to": 0.038077930284264955, "trimmed outer": 0.05812281164266978, "outer measure": 0.06614086180444277, "outer": 0.07079427713292187, "restricted trimmed outer": 0.0716568511373327, "trimmed property": 0.08155214823676812, "measure.trim": 0.10284145966196173, "measure": 0.10314002051576429, "trimmed": 0.12258503170192978, "property": 0.20503558560640422, "states": 0.20503558560640422, "restricted trimmed": 0.2103130552590242, "measure \u03bc states": 0.2619263183276519, "theorem shows": 0.28743951126421236, "theorem": 0.4725087074763678, "shows": 0.4725087074763678, "restricted": 0.4725087074763678}}, {"docstring": " The range of a function from a `unique` type contains just the function applied to its single value.\n", "keywords": {"function applied": 0.05259515133015473, "unique": 0.05393656033701752, "type": 0.11369206228658875, "function": 0.13453835116331675, "range": 0.18569843656348187, "applied": 0.18569843656348187, "single": 0.18569843656348187}}, {"docstring": "A finite dimensional space has positive `finrank` iff it is nontrivial.\n", "keywords": {"finite dimensional space": 0.03339840940482845, "finrank": 0.04491197687864554, "space has positive": 0.04940384002065631, "finite dimensional": 0.09700399286574239, "dimensional space": 0.09700399286574239, "positive": 0.15831692877998726, "iff": 0.15831692877998726, "nontrivial": 0.15831692877998726, "finite": 0.29736558256021506, "dimensional": 0.29736558256021506, "space": 0.29736558256021506}}, {"docstring": "A pair (i, j) is contained in the antidiagonal of `n` if and only if `i + j = n`.\n", "keywords": {"pair": 0.09568045026443411, "contained": 0.15831692877998726, "antidiagonal": 0.15831692877998726}}, {"docstring": " If two measures agree on all measurable subsets of `s` and `t`, then they agree on all measurable subsets of `s \u222a t`.\n", "keywords": {"measurable subsets": 0.013838200960749896, "measures agree": 0.0505794609345379, "measurable": 0.08205340856523911, "subsets": 0.08205340856523911, "agree": 0.1173736768400546, "measures": 0.20509004731457245}}, {"docstring": "The range of any family of ordinals is bounded above. See also `lsub_not_mem_range`.\n", "keywords": {"family of ordinals": 0.0647213843491835, "ordinals is bounded": 0.0647213843491835, "lsub": 0.22125774619993788, "mem": 0.22125774619993788, "range": 0.23433876543145388, "family": 0.246550513069643, "ordinals": 0.246550513069643, "bounded": 0.246550513069643}}, {"docstring": " If a multiplicative indicator function is not equal to `1` at a point, then that point is in the set.\n", "keywords": {"multiplicative indicator function": 0.007041919398291632, "multiplicative indicator": 0.035715520099333646, "indicator function": 0.035715520099333646, "set": 0.11369206228658875, "point": 0.13453835116331675, "multiplicative": 0.18569843656348187, "indicator": 0.18569843656348187, "function": 0.18569843656348187, "equal": 0.18569843656348187}}, {"docstring": "`ord \u2218 aleph'` enumerates the ordinals that are cardinals.\n", "keywords": {"ord": 0.04491197687864554, "aleph enumerates": 0.04940384002065631, "enumerates the ordinals": 0.09700399286574239, "aleph": 0.15831692877998726, "cardinals": 0.15831692877998726, "enumerates": 0.29736558256021506, "ordinals": 0.29736558256021506}}, {"docstring": "Every polynomial is a polynomial in finitely many variables.\n", "keywords": {"finitely many variables": 0.02391462167226668, "variables": 0.11984314898676356, "polynomial in finitely": 0.12748048004056908, "polynomial": 0.14323823713631006, "finitely": 0.19488865479360015}}, {"docstring": "**Alias** of the forward direction of is_extr_filter_dual_iff`.\n", "keywords": {"forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "extr": 0.04491197687864554, "filter": 0.04491197687864554, "dual": 0.04491197687864554, "iff": 0.04491197687864554, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "For `d \u2223 n`, the totient of `n/d` equals the number of values `k < n` such that `gcd n k = d`\n", "keywords": {"equals the number": 0.0065920978564317735, "equals": 0.06844581806138879, "gcd": 0.06844581806138879, "totient": 0.09568045026443411, "number": 0.09568045026443411}}, {"docstring": "Given two elements `a`, `b` of a commutative `cancel_monoid_with_zero` and a nonzero  element `c`, `a*c` divides `b*c` iff `a` divides `b`.\n", "keywords": {"nonzero element": 0.008336109563110943, "divides": 0.020944683225967962, "cancel": 0.05632962681207606, "monoid": 0.05632962681207606, "iff": 0.05632962681207606, "elements": 0.07892911908445928, "element": 0.07892911908445928, "commutative": 0.07915285623416611, "nonzero": 0.10474199420438675}}, {"docstring": "Symmetric of `finset.image_image\u2082_right_comm`.\n", "keywords": {"finset.image": 0.04491197687864554, "comm": 0.04491197687864554, "Symmetric": 0.15831692877998726, "image": 0.15831692877998726}}, {"docstring": "Any partial order can be extended to a linear order.\n", "keywords": {"partial order": 0.0562460611896591, "linear order": 0.0562460611896591, "order": 0.13945519496053638, "partial": 0.19092478917347616, "extended": 0.19092478917347616, "linear": 0.19092478917347616}}, {"docstring": "If `a` commutes with both `b` and `c`, then it commutes with their product.\n", "keywords": {"commutes": 0.11357121248292479, "product": 0.12363091320521931}}, {"docstring": "A greatest element of a set is the supremum of this set.\n", "keywords": {"greatest element": 0.037831312533597124, "set": 0.13945519496053638, "greatest": 0.19092478917347616, "element": 0.19092478917347616, "supremum": 0.19092478917347616}}, {"docstring": "A single point is collinear.\n", "keywords": {"point is collinear": 0.04940384002065631, "single point": 0.09700399286574239, "collinear": 0.15831692877998726, "single": 0.29736558256021506, "point": 0.29736558256021506}}, {"docstring": "The cardinality of the complex numbers, as a type.\n", "keywords": {"complex numbers": 0.015380821171891606, "numbers": 0.09568045026443411, "type": 0.09568045026443411, "cardinality": 0.15831692877998726, "complex": 0.15831692877998726}}, {"docstring": " An induction principle for closure membership. If `p` holds for `1`, and all elements of `s`, and is preserved under addition, negation, and multiplication, then `p` holds for all elements of the closure of `s`.\n", "keywords": {"induction principle": 0.04013144143432476, "closure membership": 0.05189264969389657, "holds": 0.13089221514293597, "membership": 0.1352784111955579, "principle for closure": 0.15962977986846352, "elements": 0.17826839753681534, "closure": 0.18233747514864834, "preserved under addition": 0.19281326521520784, "induction": 0.1964256808545537, "principle": 0.1964256808545537, "negation": 0.23408280182656144, "addition": 0.3520512103630526, "multiplication": 0.3520512103630526, "preserved": 0.4591542486422362}}, {"docstring": " Any increasing map `f` from `fin k` to a finset of cardinality `k` has to coincide with the increasing bijection `order_emb_of_fin s h`.\n", "keywords": {"finset of cardinality": 0.022484625344159365, "increasing map": 0.033106336491195223, "increasing bijection": 0.033106336491195223, "order": 0.055174169687121036, "emb": 0.055174169687121036, "fin": 0.0724218931801197, "map": 0.1161324896811994, "cardinality": 0.1161324896811994, "bijection": 0.1161324896811994, "increasing": 0.1379692702710049, "finset": 0.18935428276389019, "coincide": 0.18935428276389019}}, {"docstring": "The sum of any function over an empty set is `0`.\n", "keywords": {"empty set": 0.09700399286574239, "sum": 0.29736558256021506, "function": 0.29736558256021506, "empty": 0.29736558256021506, "set": 0.29736558256021506}}, {"docstring": "If `A` is qualified as an adjacency matrix,    then the adjacency matrix of the graph induced by `A` is itself.\n", "keywords": {"adjacency matrix": 0.02595416362410219, "graph induced": 0.040564923574392765, "adjacency": 0.11107071682746067, "matrix": 0.11107071682746067, "qualified": 0.19744254481508877, "graph": 0.19744254481508877, "induced": 0.19744254481508877}}, {"docstring": "The zeroth Pythagorean triple is all zeros.\n", "keywords": {"zeroth Pythagorean triple": 0.015042304599106411, "zeroth Pythagorean": 0.04498862876540802, "Pythagorean triple": 0.04498862876540802, "Pythagorean": 0.1447773057422032, "zeroth": 0.29736558256021506, "triple": 0.29736558256021506}}, {"docstring": " If a function `f` is continuous on a convex set `D \u2286 \u211d`, is differentiable on its interior, and `f'` is strictly monotone on the interior, then `f` is strictly convex on `D`.\n", "keywords": {"convex set": 0.01356299224102744, "strictly monotone": 0.014958263669780153, "strictly convex": 0.019050409605795095, "interior": 0.04625538145093589, "strictly": 0.06092346392912917, "convex": 0.07671213513331894, "function": 0.08721891946868728, "set": 0.08721891946868728, "continuous": 0.12095349351053106, "differentiable": 0.12095349351053106, "monotone": 0.12095349351053106}}, {"docstring": " The `at_top` filter for an open interval `Ioo a b` comes from the left-neighbourhoods filter at the right endpoint in the ambient order.\n", "keywords": {"open interval": 0.008870694726817624, "ambient order": 0.008870694726817624, "left-neighbourhoods filter": 0.015198370033106133, "Ioo": 0.04742583229733244, "top": 0.052376395424323874, "filter": 0.06767673667974392, "interval": 0.07949602794131501, "order": 0.07949602794131501, "open": 0.11060549338282699, "left-neighbourhoods": 0.11060549338282699, "endpoint": 0.11060549338282699, "ambient": 0.11060549338282699}}, {"docstring": "If a 2-vector `p` satisfies `is_coprime (p 0) (p 1)`, then `p \u2260 0`.\n", "keywords": {"satisfies": 0.04491197687864554, "coprime": 0.04491197687864554}}, {"docstring": " Since the map `b \u21a6 cramer A b` is linear in `b`, it must be multiplication by some matrix. This matrix is `A.adjugate`.\n", "keywords": {"map": 0.12696931063105557, "cramer": 0.12696931063105557, "A.adjugate": 0.13190621396102437, "matrix": 0.1739726675965165, "linear": 0.18516501832552387, "multiplication": 0.18516501832552387}}, {"docstring": "An inductive property of the central binomial coefficient.\n", "keywords": {"central binomial coefficient": 0.016559150827736194, "binomial coefficient": 0.04940384002065631, "inductive property": 0.09700399286574239, "central binomial": 0.09700399286574239, "coefficient": 0.15831692877998726, "inductive": 0.29736558256021506, "property": 0.29736558256021506, "central": 0.29736558256021506, "binomial": 0.29736558256021506}}, {"docstring": "If `f` and `g` are maps with dense range, then `prod.map f g` has dense range.\n", "keywords": {"dense range": 0.011107954925954924, "range": 0.04784022513221706, "maps with dense": 0.10583238594216893, "dense": 0.11357121248292479, "prod.map": 0.12363091320521931, "maps": 0.2005079697193566}}, {"docstring": "Adding a point to a set preserves its boundedness below.\n", "keywords": {"Adding a point": 0.015380821171891606, "set preserves": 0.02570861714399338, "preserves its boundedness": 0.02570861714399338, "Adding": 0.09568045026443411, "point": 0.15831692877998726, "set": 0.15831692877998726, "preserves": 0.15831692877998726, "boundedness": 0.15831692877998726}}, {"docstring": "Pythagorean theorem, if-and-only-if vector angle form.\n", "keywords": {"vector angle form": 0.008321268142839145, "Pythagorean theorem": 0.02570861714399338, "vector angle": 0.04940384002065631, "angle form": 0.04940384002065631, "Pythagorean": 0.15831692877998726, "theorem": 0.15831692877998726, "vector": 0.15831692877998726, "form": 0.15831692877998726, "angle": 0.29736558256021506}}, {"docstring": "For the equality, see `inf_edist_thickening`.\n", "keywords": {"edist": 0.04491197687864554, "thickening": 0.04491197687864554, "equality": 0.15831692877998726}}, {"docstring": "Sum of elements in a `intermediate_field` indexed by a `finset` is in the `intermediate_field`.\n", "keywords": {"intermediate": 0.021352745740207107, "field": 0.021352745740207107, "Sum of elements": 0.02391462167226668, "finset": 0.05706283858652404, "Sum": 0.11984314898676356, "indexed": 0.11984314898676356, "elements": 0.19488865479360015}}, {"docstring": "The set in the definition of division is nonempty.\n", "keywords": {"division is nonempty": 0.015380821171891606, "definition of division": 0.02570861714399338, "nonempty": 0.09568045026443411, "set": 0.15831692877998726, "definition": 0.15831692877998726, "division": 0.15831692877998726}}, {"docstring": "To prove a relation on pairs of `finset X`, it suffices to show that it is   * symmetric,   * it holds when one of the `finset`s is empty,   * it holds for pairs of singletons,   * if it holds for `[a, c]` and for `[b, c]`, then it holds for `[a \u222a b, c]`.\n", "keywords": {"pairs of singletons": 0.008703408346730173, "prove a relation": 0.011323514414320404, "suffices to show": 0.011323514414320404, "holds": 0.018476713113284512, "holds for pairs": 0.026336303345069922, "relation on pairs": 0.0280192468593076, "finset": 0.041946360575463394, "pairs": 0.05193112911158055, "symmetric": 0.06240990554692328, "empty": 0.08307457170946214, "singletons": 0.08307457170946214, "prove": 0.10581459304964143, "relation": 0.10581459304964143, "suffices": 0.10581459304964143, "show": 0.10581459304964143}}, {"docstring": "**Alias** of the forward direction of algebraic_independent_subtype_range`.\n", "keywords": {"direction of algebraic": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "independent": 0.04491197687864554, "subtype": 0.04491197687864554, "range": 0.04491197687864554, "algebraic": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "Subsequent Fibonacci numbers are coprime,  see https://proofwiki.org/wiki/Consecutive_Fibonacci_Numbers_are_Coprime\n", "keywords": {"Subsequent Fibonacci numbers": 0.007568253837993474, "Subsequent Fibonacci": 0.023458380875189744, "Fibonacci numbers": 0.04498862876540802, "numbers are coprime": 0.04940384002065631, "Fibonacci": 0.1447773057422032, "Subsequent": 0.15831692877998726, "coprime": 0.15831692877998726, "numbers": 0.29736558256021506}}, {"docstring": " In the characteristic zero case, the weights in the centroid sum to 1 if the set is nonempty.\n", "keywords": {"characteristic zero case": 0.0065920978564317735, "set is nonempty": 0.0065920978564317735, "centroid sum": 0.009239332327148086, "case": 0.06844581806138879, "nonempty": 0.06844581806138879, "characteristic": 0.09568045026443411, "weights": 0.09568045026443411, "centroid": 0.09568045026443411, "sum": 0.09568045026443411, "set": 0.09568045026443411}}, {"docstring": " If `l\u2081` is a sublist of `l\u2082` and all elements of `l\u2082` are greater than or equal to one, then `l\u2081.prod \u2264 l\u2082.prod`. One can prove a stronger version assuming `\u2200 a \u2208 l\u2082.diff l\u2081, 1 \u2264 a` instead of `\u2200 a \u2208 l\u2082, 1 \u2264 a` but this lemma is not yet in `mathlib`.\n", "keywords": {"stronger version assuming": 0.0264265533569587, "prod": 0.034693267728363265, "version assuming": 0.07909154660407904, "prove a stronger": 0.09344719366263635, "stronger version": 0.09344719366263635, "sublist": 0.10630075322936205, "elements": 0.10630075322936205, "greater": 0.10630075322936205, "equal": 0.10630075322936205, "mathlib": 0.20910206899588812, "assuming": 0.25071917675807687, "prove": 0.2923372953262933, "stronger": 0.2923372953262933, "version": 0.2923372953262933, "diff": 0.2923372953262933, "lemma": 0.2923372953262933}}, {"docstring": "A finite group of prime order is simple.\n", "keywords": {"order is simple": 0.04940384002065631, "finite group": 0.09700399286574239, "group of prime": 0.09700399286574239, "prime order": 0.09700399286574239, "simple": 0.15831692877998726, "finite": 0.29736558256021506, "group": 0.29736558256021506, "prime": 0.29736558256021506, "order": 0.29736558256021506}}, {"docstring": "**Kaminski's Equation**\n", "keywords": {"Kaminski Equation": 0.007444681613352736, "Kaminski": 0.08596317751626563, "Equation": 0.08596317751626563}}, {"docstring": "**Alias** of ge_antisymm`.\n", "keywords": {"Alias": 0.030396371632413578, "antisymm": 0.04491197687864554}}, {"docstring": "On non-dependent functions, `pi.single` is symmetric in the two indices.\n", "keywords": {"pi.single": 0.04491197687864554, "non-dependent functions": 0.04940384002065631, "functions": 0.15831692877998726, "indices": 0.15831692877998726, "non-dependent": 0.29736558256021506, "symmetric": 0.29736558256021506}}, {"docstring": " If the multiplication is smooth, then it is continuous. This is not an instance for technical reasons, see note [Design choices about smooth algebraic structures].\n", "keywords": {"smooth algebraic structures": 0.06468766104286576, "Design choices": 0.08540409672192315, "continuous": 0.12005345163377214, "multiplication is smooth": 0.1318782810331473, "technical reasons": 0.15843936916307186, "algebraic structures": 0.15843936916307186, "smooth algebraic": 0.16538414766813989, "smooth": 0.16679617783864303, "multiplication": 0.17571731612679403, "Design": 0.1849603183624796, "instance for technical": 0.2209631936168556, "choices about smooth": 0.3193232916312825, "reasons": 0.32150010055562234, "note": 0.32150010055562234, "structures": 0.32150010055562234, "instance": 0.42541096826386726, "technical": 0.42541096826386726, "choices": 0.42541096826386726, "algebraic": 0.42541096826386726}}, {"docstring": "Given a point, a bounded subset is included in some ball around this point\n", "keywords": {"bounded subset": 0.03663237450220032, "subset is included": 0.03663237450220032, "point": 0.07162298286637953, "bounded": 0.1879836817695587, "subset": 0.1879836817695587, "included": 0.1879836817695587, "ball": 0.1879836817695587}}, {"docstring": "A set is contained in its own (open) thickening.\n", "keywords": {"open": 0.04491197687864554, "thickening": 0.04491197687864554, "set is contained": 0.09700399286574239, "set": 0.29736558256021506, "contained": 0.29736558256021506}}, {"docstring": "The angle between a positive multiple of a vector and a vector.\n", "keywords": {"positive multiple": 0.020225813225353943, "vector": 0.07334489383741181, "angle": 0.1408007092310104, "positive": 0.1408007092310104, "multiple": 0.1408007092310104}}, {"docstring": "The sum of two strictly monotone functions is strictly monotone.\n", "keywords": {"strictly monotone functions": 0.011782282943034048, "strictly monotone": 0.027200199006318638, "monotone functions": 0.04771708711059453, "functions is strictly": 0.10583238594216893, "strictly": 0.11357121248292479, "monotone": 0.11357121248292479, "sum": 0.2005079697193566, "functions": 0.2005079697193566}}, {"docstring": "TODO: Generalise to `finite_cancel_monoid`.\n", "keywords": {"TODO": 0.030396371632413578, "finite": 0.04491197687864554, "cancel": 0.04491197687864554, "monoid": 0.04491197687864554, "Generalise": 0.08596317751626563}}, {"docstring": "Note that since `star_semigroup_of_comm` is reducible, `simp` can already prove this. -\n", "keywords": {"star": 0.05899937629682816, "semigroup": 0.05899937629682816, "comm": 0.05899937629682816, "simp": 0.05899937629682816, "Note": 0.2005079697193566, "reducible": 0.2005079697193566, "prove": 0.36073110501666333}}, {"docstring": "Given an open subgroup `U` and an element `r` of a nonarchimedean ring, there is an open  subgroup `V` such that `r \u2022 V` is contained in `U`.\n", "keywords": {"open subgroup": 0.004083890065624342, "nonarchimedean ring": 0.014176630379520855, "subgroup": 0.03674010039257565, "open": 0.055127829619426576, "element": 0.09713402394201612, "ring": 0.09713402394201612, "nonarchimedean": 0.14390902704051098, "contained": 0.14390902704051098}}, {"docstring": " Let `f : \u211d \u2192 \u211d` be a differentiable function. If `f'` is nonpositive, then `f` is an antitone function.\n", "keywords": {"differentiable function": 0.04479060836584392, "function": 0.11121265807107177, "antitone function": 0.11213682462213963, "differentiable": 0.19274072340671292, "nonpositive": 0.3467063614068829, "antitone": 0.45332097725137205}}, {"docstring": "The smallest additive congruence relation containing a binary relation `r` is contained in any additive congruence relation containing `r`.\n", "keywords": {"additive congruence relation": 0.0018701154948582764, "smallest additive congruence": 0.0035381045160666705, "congruence relation": 0.01048922222333827, "additive congruence": 0.010890989345827527, "binary relation": 0.026304888365324807, "smallest additive": 0.027317899426710843, "relation": 0.05480541626328293, "congruence": 0.06248589258587618, "additive": 0.08528980488723031, "smallest": 0.15588894939228992, "binary": 0.15588894939228992, "contained": 0.15588894939228992}}, {"docstring": " The weighted sum is unaffected by changing the weights to the corresponding indicator function and adding points to the set.\n", "keywords": {"weighted sum": 0.009239332327148086, "sum is unaffected": 0.009239332327148086, "unaffected by changing": 0.009239332327148086, "changing the weights": 0.009239332327148086, "indicator function": 0.009239332327148086, "function and adding": 0.009239332327148086, "adding points": 0.009239332327148086, "set": 0.06844581806138879, "weighted": 0.09568045026443411, "sum": 0.09568045026443411, "unaffected": 0.09568045026443411, "changing": 0.09568045026443411, "weights": 0.09568045026443411, "indicator": 0.09568045026443411, "function": 0.09568045026443411, "adding": 0.09568045026443411, "points": 0.09568045026443411}}, {"docstring": " A function `f : \u03b1 \u2192 \u211d` which is `K`-Lipschitz on a subset `s` admits a `K`-Lipschitz extension to the whole space.\n", "keywords": {"Lipschitz extension": 0.007948334753004932, "Lipschitz": 0.02883985003140916, "function": 0.09202664026077896, "subset": 0.09202664026077896, "admits": 0.09202664026077896, "space": 0.09202664026077896, "extension": 0.1367145963576765}}, {"docstring": "A version of Riesz lemma: given a strict closed subspace `F`, one may find an element of norm `\u2264 R` which is at distance  at least `1` of every element of `F`. Here, `R` is any given constant strictly larger than the norm of an element of norm `> 1`. For a version without an `R`, see `riesz_lemma`.  Since we are considering a general nondiscrete normed field, there may be a gap in possible norms (for instance no element of norm in `(1,2)`). Hence, we can not allow `R` arbitrarily close to `1`, and require `R > \u2225c\u2225` for some `c : \ud835\udd5c` with norm `> 1`.\n", "keywords": {"strict closed subspace": 0.009069482692304542, "closed subspace": 0.03939808837114158, "strict closed": 0.048018083727494956, "element": 0.06977528984612816, "norm": 0.09625697276752809, "Riesz lemma": 0.09894724564605797, "element of norm": 0.09895882933243172, "find an element": 0.13640485337358624, "Riesz": 0.14020882242236637, "lemma": 0.16054305813151676, "subspace": 0.17708232371170674, "version": 0.18431904187966475, "strict": 0.21405137601044896, "closed": 0.21405137601044896, "find": 0.21405137601044896, "distance": 0.21405137601044896, "constant strictly larger": 0.22051883114562043, "constant strictly": 0.3093932984589723, "strictly larger": 0.3093932984589723, "version of Riesz": 0.32542802790963904}}, {"docstring": " If `p` is a prime such that `p \u2223 n`, then `expand R p (cyclotomic n R) = cyclotomic (p * n) R`.\n", "keywords": {"cyclotomic": 0.0456089852516003, "expand": 0.08638782221675846, "prime": 0.11984314898676356}}, {"docstring": "If `y` and `z` are on the same ray as `x`, then so is `y + z`.\n", "keywords": {"ray": 0.15831692877998726}}, {"docstring": "The values before the squashed position stay the same.\n", "keywords": {"squashed position stay": 0.0016012214736657916, "squashed position": 0.013527995261974615, "position stay": 0.013527995261974615, "squashed": 0.1155310835876123, "position": 0.1155310835876123, "stay": 0.1155310835876123}}, {"docstring": "A simplification of `padic_val_nat` when one input is prime, by analogy with `padic_val_rat_def`.\n", "keywords": {"padic": 0.020312026404878777, "val": 0.020312026404878777, "input is prime": 0.022484625344159365, "nat": 0.055174169687121036, "rat": 0.055174169687121036, "def": 0.055174169687121036, "prime": 0.1161324896811994, "simplification": 0.18935428276389019, "input": 0.18935428276389019, "analogy": 0.18935428276389019}}, {"docstring": "`quotient.mk'` is a surjective function.\n", "keywords": {"surjective function": 0.04940384002065631, "quotient.mk": 0.15831692877998726, "function": 0.15831692877998726, "surjective": 0.29736558256021506}}, {"docstring": "The element `0` is `M`-regular if and only if `M` is trivial.\n", "keywords": {"element": 0.09568045026443411, "regular": 0.09568045026443411, "trivial": 0.09568045026443411}}, {"docstring": " The strong form of **Hindman's theorem**: in any finite cover of an FP-set, one the parts contains an FP-set.\n", "keywords": {"Hindman theorem": 0.00698827627992516, "strong form": 0.03439110359613085, "finite cover": 0.03439110359613085, "FP-set": 0.04092200269394482, "Hindman": 0.06226402419328029, "theorem": 0.11145728654016383, "strong": 0.1823394614884183, "form": 0.1823394614884183, "finite": 0.1823394614884183, "cover": 0.1823394614884183, "parts": 0.1823394614884183}}, {"docstring": " An element `k` is compact if and only if any directed set with `Sup` above `k` already got above `k` at some point in the set.\n", "keywords": {"directed set": 0.02635223776265893, "set": 0.09269208833952335, "element": 0.09329120537733218, "compact": 0.1384995633470844, "directed": 0.1384995633470844, "point": 0.1384995633470844}}, {"docstring": "For `n \u2260 m`, `(n, m)` is in the transitive closure of a relation `~` if `i ~ pred i` and  `pred i ~ i` for all `i` between `n` and `m`.\n", "keywords": {"transitive closure": 0.01085898992882147, "pred": 0.029139853932674247, "relation": 0.07830062329966068, "transitive": 0.1036452554536235, "closure": 0.1036452554536235}}, {"docstring": " If two functions `g` and `f` have power series `q` and `p` respectively at `f x` and `x`, then `g \u2218 f` admits the power series `q.comp p` at `x`.\n", "keywords": {"power series": 0.005872959520157839, "series": 0.03756449529879747, "admits the power": 0.037843859265708296, "power": 0.07726414307411156, "functions": 0.09856372721054514, "admits": 0.09856372721054514, "q.comp": 0.09856372721054514}}, {"docstring": "Converse of pons asinorum, angle-at-point form.\n", "keywords": {"form": 0.04491197687864554, "Converse of pons": 0.04940384002065631, "pons asinorum": 0.04940384002065631, "Converse": 0.15831692877998726, "asinorum": 0.15831692877998726, "pons": 0.29736558256021506}}, {"docstring": "A function which can be locally uniformly approximated by continuous functions is continuous.\n", "keywords": {"locally uniformly approximated": 0.008567054330850995, "locally uniformly": 0.040564923574392765, "uniformly approximated": 0.040564923574392765, "continuous functions": 0.09279441717942427, "approximated by continuous": 0.1311351076396852, "continuous": 0.14570071893270706, "locally": 0.19744254481508877, "uniformly": 0.19744254481508877, "approximated": 0.19744254481508877, "functions is continuous": 0.2759527366667114, "function": 0.2914014378654141, "functions": 0.2914014378654141}}, {"docstring": "The triangle (polygon) inequality for sequences of points; `finset.Ico` version.\n", "keywords": {"polygon": 0.04491197687864554, "finset.Ico": 0.04491197687864554, "version": 0.04491197687864554, "inequality for sequences": 0.04940384002065631, "sequences of points": 0.04940384002065631, "triangle": 0.15831692877998726, "inequality": 0.15831692877998726, "points": 0.15831692877998726, "sequences": 0.29736558256021506}}, {"docstring": " The sum of two `C^n` functions within a set at a point is `C^n` within this set at this point.\n", "keywords": {"set": 0.11357121248292479, "functions": 0.12363091320521931, "point": 0.14868279128010753, "sum": 0.2005079697193566}}, {"docstring": "Symmetric of `finset.image_image\u2082_distrib_left`.\n", "keywords": {"image \u2082_ distrib": 0.02570861714399338, "finset.image": 0.04491197687864554, "left": 0.04491197687864554, "Symmetric": 0.15831692877998726, "image": 0.15831692877998726, "distrib": 0.15831692877998726}}, {"docstring": "`Lp_trim_to_Lp_meas_subgroup` is a left inverse of `Lp_meas_subgroup_to_Lp_trim`.\n", "keywords": {"left inverse": 0.015925746558120745, "trim": 0.022926948811930963, "meas": 0.022926948811930963, "subgroup": 0.022926948811930963, "left": 0.12520420549175446, "inverse": 0.12520420549175446}}, {"docstring": " Two finite-dimensional normed spaces are continuously linearly equivalent if and only if they have the same (finite) dimension.\n", "keywords": {"finite-dimensional normed spaces": 0.0042542192213185686, "continuously linearly equivalent": 0.0042542192213185686, "finite-dimensional normed": 0.02570861714399338, "normed spaces": 0.02570861714399338, "spaces are continuously": 0.02570861714399338, "continuously linearly": 0.02570861714399338, "linearly equivalent": 0.02570861714399338, "finite": 0.04491197687864554, "dimension": 0.04491197687864554, "finite-dimensional": 0.15831692877998726, "normed": 0.15831692877998726, "spaces": 0.15831692877998726, "continuously": 0.15831692877998726, "linearly": 0.15831692877998726, "equivalent": 0.15831692877998726}}, {"docstring": "A more explicit version of `convex_hull_eq_union`.\n", "keywords": {"convex": 0.04491197687864554, "hull": 0.04491197687864554, "union": 0.04491197687864554, "explicit version": 0.09700399286574239, "explicit": 0.29736558256021506, "version": 0.29736558256021506}}, {"docstring": "A module has dimension 1 iff there is some `v : V` so `{v}` is a basis.\n", "keywords": {"module has dimension": 0.00899321792126428, "dimension": 0.0771485953923296, "iff": 0.0771485953923296, "basis": 0.0771485953923296, "module": 0.1155310835876123}}, {"docstring": "`0 + x` is equivalent to `x`.\n", "keywords": {"equivalent": 0.15831692877998726}}, {"docstring": " The closed thickening `cthickening \u03b4 E` with a fixed thickening radius `\u03b4` is an increasing function of the subset `E`.\n", "keywords": {"fixed thickening radius": 0.005849844637586219, "thickening radius": 0.03017959306974641, "increasing function": 0.03439110359613085, "closed thickening": 0.05033870131288873, "fixed thickening": 0.05033870131288873, "cthickening": 0.11145728654016383, "radius": 0.11145728654016383, "subset": 0.11145728654016383, "closed": 0.1823394614884183, "fixed": 0.1823394614884183, "increasing": 0.1823394614884183, "function": 0.1823394614884183}}, {"docstring": " Given a predicate on functions `\u03a0 i, finset (\u03b1 i)` defined on a finite type, it is true on all maps provided that it is true on `\u03bb _, \u2205` and for any function `g : \u03a0 i, finset (\u03b1 i)`, an index `i : \u03b9`, and an element`x : \u03b1 i` that is strictly greater than all elements of `g i`, `p g` implies `p (update g i (insert x (g i)))`.  This lemma requires `linear_order` instances on all `\u03b1 i`. See also `finset.induction_on_pi` for a version that `x \u2209 g i` instead of ` does not need `\u03a0 i, linear_order (\u03b1 i)`.\n", "keywords": {"finite type": 0.012821119622446284, "maps provided": 0.014515454047241272, "strictly greater": 0.014515454047241272, "predicate on functions": 0.023513502300145175, "finset": 0.02931909205175392, "true": 0.038290298181145994, "functions": 0.07658059636229199, "function": 0.07658059636229199, "linear": 0.09065293670883487, "order": 0.09065293670883487, "implies": 0.0926010379763017, "element": 0.09626655439729409, "elements": 0.09626655439729409, "lemma requires": 0.10301305116109606, "defined": 0.10582961697678488, "type": 0.10582961697678488, "index": 0.10582961697678488, "update": 0.10582961697678488, "insert": 0.10582961697678488, "predicate": 0.1196150921306959}}, {"docstring": " If `f` satisfies a boundedness property around `0`, one can deduce a bound on `f m\u2081 - f m\u2082` using the multilinearity. Here, we give a usable but not very precise version. See `norm_image_sub_le_of_bound'` for a more precise but less usable version. The bound is `\u2225f m - f m'\u2225 \u2264 C * card \u03b9 * \u2225m - m'\u2225 * (max \u2225m\u2225 \u2225m'\u2225) ^ (card \u03b9 - 1)`.\n", "keywords": {"satisfies a boundedness": 0.023634677102138527, "boundedness property": 0.028388737427681218, "precise version": 0.1310082375972494, "usable version": 0.1310082375972494, "bound": 0.13237378149862686, "satisfies": 0.13896655787252787, "multilinearity": 0.13896655787252787, "version": 0.15093360005337628, "boundedness": 0.166147718912776, "property": 0.166147718912776, "deduce": 0.166147718912776, "deduce a bound": 0.1836233809327935, "card": 0.18799458993824716, "usable": 0.19186109287411618, "precise": 0.19186109287411618, "give a usable": 0.3561669393052107, "norm": 0.39219538148988997, "image": 0.39219538148988997, "give": 0.40899020508312867, "max": 0.44158234090434756}}, {"docstring": "Elements of finite order are closed under multiplication.\n", "keywords": {"Elements of finite": 0.04940384002065631, "closed under multiplication": 0.04940384002065631, "finite order": 0.09700399286574239, "order are closed": 0.09700399286574239, "Elements": 0.15831692877998726, "multiplication": 0.15831692877998726, "finite": 0.29736558256021506, "order": 0.29736558256021506, "closed": 0.29736558256021506}}, {"docstring": " Same as `monotone.covariant_of_const`, but with the constant on the other side of the operator.  E.g., `\u2200 (m : \u2115), monotone f \u2192 monotone (\u03bb n, f (n + m))`.\n", "keywords": {"monotone.covariant": 0.07562090863435546, "const": 0.07562090863435546, "operator": 0.12696931063105557, "monotone": 0.167613780587124, "constant": 0.18516501832552387, "side": 0.18516501832552387}}, {"docstring": "Being in the shadow of `\ud835\udc9c` means we have a superset in `\ud835\udc9c`.\n", "keywords": {"shadow": 0.15831692877998726, "superset": 0.15831692877998726}}, {"docstring": " If the inner product of two unit vectors is strictly less than `1`, then the two vectors are distinct. One form of the equality case for Cauchy-Schwarz.\n", "keywords": {"unit vectors": 0.03935277298049871, "vectors are distinct": 0.061833211669469035, "vectors is strictly": 0.08894856624393728, "vectors": 0.10600449438550293, "distinct": 0.1221512649852118, "case for Cauchy-Schwarz": 0.16303019397374632, "product": 0.1785903903600119, "unit": 0.1785903903600119, "strictly": 0.1785903903600119, "equality case": 0.22714863390129153, "Cauchy-Schwarz": 0.3258146251285017, "form": 0.4302357358329322, "equality": 0.4302357358329322, "case": 0.4302357358329322}}, {"docstring": "The p-adic norm of an integer is at most 1.\n", "keywords": {"p-adic norm": 0.09700399286574239, "p-adic": 0.29736558256021506, "norm": 0.29736558256021506, "integer": 0.29736558256021506}}, {"docstring": " The localization at of an integral domain to a set of non-zero elements is an integral domain. See note [reducible non-instances].\n", "keywords": {"integral domain": 0.023926088925826594, "set of non-zero": 0.06840758008791419, "non-zero elements": 0.06840758008791419, "integral": 0.0896880507105299, "domain": 0.12729375898531767, "reducible non-instances": 0.18848740928022725, "localization": 0.2530367690088724, "set": 0.2530367690088724, "non-zero": 0.2530367690088724, "elements": 0.2530367690088724, "note": 0.39823908368262456, "reducible": 0.39823908368262456, "non-instances": 0.39823908368262456}}, {"docstring": "**Alias** of mul_sub_right_distrib`.\n", "keywords": {"Alias": 0.030396371632413578, "distrib": 0.04491197687864554, "mul": 0.15831692877998726}}, {"docstring": "Symmetric of `filter.map_map\u2082_antidistrib_right`.\n", "keywords": {"map \u2082_ antidistrib": 0.02570861714399338, "filter.map": 0.04491197687864554, "Symmetric": 0.15831692877998726, "map": 0.15831692877998726, "antidistrib": 0.15831692877998726}}, {"docstring": "A map of rings that is a semiring homomorphism is also a ring homomorphism.\n", "keywords": {"semiring homomorphism": 0.03117712943655666, "ring homomorphism": 0.04334928425311119, "map of rings": 0.07190362830540235, "homomorphism": 0.10191687733271076, "map": 0.14832923246533666, "semiring": 0.14832923246533666, "rings": 0.20383375466542153, "ring": 0.20383375466542153}}, {"docstring": "`basis.det` is not the zero map.\n", "keywords": {"basis.det": 0.04491197687864554, "map": 0.15831692877998726}}, {"docstring": "**Alias** of the reverse direction of tsub_nonpos`.\n", "keywords": {"direction of tsub": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "nonpos": 0.04491197687864554, "tsub": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "In a preadditive category, if the product of `X` and `Y` exists, then the    binary biproduct of `X` and `Y` exists.\n", "keywords": {"exists": 0.019648131954263418, "preadditive category": 0.021567786782198985, "binary biproduct": 0.035715520099333646, "category": 0.11369206228658875, "preadditive": 0.18569843656348187, "product": 0.18569843656348187, "binary": 0.18569843656348187, "biproduct": 0.18569843656348187}}, {"docstring": " If a monotone function `u : \u03b9 \u2192 \u03b1` tends to `at_top` along *some* non-trivial filter `l`, then it tends to `at_top` along `at_top`.\n", "keywords": {"non-trivial filter": 0.010743108496861263, "top": 0.012755616032281777, "monotone function": 0.015947706066152048, "function": 0.103096657787716, "non-trivial": 0.103096657787716, "filter": 0.103096657787716, "monotone": 0.15225875770903138}}, {"docstring": "Nonzero elements have nonzero adic valuation.\n", "keywords": {"nonzero adic valuation": 0.006901478775605423, "adic valuation": 0.022885248721446715, "Nonzero elements": 0.0562460611896591, "nonzero adic": 0.0562460611896591, "valuation": 0.11718348279991213, "elements have nonzero": 0.12194096740933036, "Nonzero": 0.13945519496053638, "elements": 0.19092478917347616, "adic": 0.19092478917347616}}, {"docstring": "A nontrivial finite dimensional space has positive `finrank`.\n", "keywords": {"nontrivial finite dimensional": 0.03339840940482845, "finite dimensional space": 0.03339840940482845, "finrank": 0.04491197687864554, "space has positive": 0.04940384002065631, "nontrivial finite": 0.09700399286574239, "finite dimensional": 0.09700399286574239, "dimensional space": 0.09700399286574239, "positive": 0.15831692877998726, "nontrivial": 0.29736558256021506, "finite": 0.29736558256021506, "dimensional": 0.29736558256021506, "space": 0.29736558256021506}}, {"docstring": "The inner product of a column of A and a column of B is an entry of A\u1d34 \u2b1d B\n", "keywords": {"column": 0.0456089852516003, "product": 0.11984314898676356, "entry": 0.11984314898676356}}, {"docstring": "Group homomorphisms preserve division.\n", "keywords": {"Group homomorphisms preserve": 0.01655915082773619, "homomorphisms preserve division": 0.016559150827736194, "Group homomorphisms": 0.04940384002065631, "preserve division": 0.04940384002065631, "homomorphisms preserve": 0.09700399286574239, "Group": 0.15831692877998726, "division": 0.15831692877998726, "homomorphisms": 0.29736558256021506, "preserve": 0.29736558256021506}}, {"docstring": "Given a finite set `s`, the sum of `f i / g i` over `i \u2208 s` equals the sum of `f i` over `i \u2208 s` minus the sum of `g i` over `i \u2208 s`.\n", "keywords": {"equals the sum": 0.004829246850193831, "minus the sum": 0.004829246850193831, "finite set": 0.007576733965429868, "sum": 0.020571714869365307, "set": 0.077874520754567, "equals": 0.077874520754567, "minus": 0.077874520754567, "finite": 0.09656250441100277}}, {"docstring": " **Tychonoff's theorem** formulated in terms of filters: `filter.cocompact` on an indexed product type `\u03a0 d, \u03ba d` the `filter.Coprod` of filters `filter.cocompact` on `\u03ba d`.\n", "keywords": {"indexed product type": 0.0018668968525283821, "Tychonoff theorem": 0.005015521736111405, "terms of filters": 0.00967260216904803, "formulated in terms": 0.013089923375762187, "product type": 0.013089923375762187, "indexed product": 0.019557279302732804, "filter.cocompact": 0.02006098734604785, "filters": 0.03458472718821289, "Tychonoff": 0.05349370067360373, "filter.Coprod": 0.054709255964732355, "theorem": 0.09329120537733218, "formulated": 0.09329120537733218, "type": 0.09329120537733218, "terms": 0.1384995633470844, "indexed": 0.1384995633470844, "product": 0.1384995633470844}}, {"docstring": " In a normed ring, the coercion from `R\u02e3` (equipped with the induced topology from the embedding in `R \u00d7 R`) to `R` is an open embedding.\n", "keywords": {"normed ring": 0.012240009979360944, "induced topology": 0.018310930906343142, "open embedding": 0.02437189179902695, "embedding": 0.08871286057464066, "ring": 0.09017440044927587, "equipped": 0.09017440044927587, "normed": 0.13409574860218185, "coercion": 0.13409574860218185, "induced": 0.13409574860218185, "topology": 0.13409574860218185, "open": 0.13409574860218185}}, {"docstring": "If we start with a multiset of primes, take the product and then factor it, we get back the original multiset.\n", "keywords": {"back the original": 0.03498702377830618, "original multiset": 0.05135123883758033, "multiset of primes": 0.06956410889469504, "primes": 0.11246769819744629, "multiset": 0.13282721021560867, "start": 0.1838594885424691, "product": 0.1838594885424691, "factor": 0.1838594885424691, "back": 0.1838594885424691, "original": 0.1838594885424691}}, {"docstring": "The second projection in a product of topological spaces sends open sets to open sets.\n", "keywords": {"topological spaces sends": 0.007931133193188878, "spaces sends open": 0.008897885504732549, "sends open sets": 0.009986353232843035, "open sets": 0.024140905658634568, "product of topological": 0.038584678130008584, "topological spaces": 0.038584678130008584, "spaces sends": 0.038584678130008584, "sends open": 0.0431505389096901, "open": 0.10730569120144322, "sets": 0.10730569120144322, "sets to open": 0.16405259049401655, "projection": 0.19274649316101516, "product": 0.19274649316101516, "topological": 0.19274649316101516, "spaces": 0.19274649316101516, "sends": 0.19274649316101516}}, {"docstring": " If `(p : \u03b9 \u2192 Prop, s : \u03b9 \u2192 set \u03b1)` is a basis of a filter `f`, `g` is a monotone function `set \u03b1 \u2192 filter \u03b3`, and for each `i`, `(pg : \u03b2 i \u2192 Prop, sg : \u03b2 i \u2192 set \u03b1)` is a basis of the filter `g (s i)`, then `(\u03bb (i : \u03b9) (x : \u03b2 i), p i \u2227 pg i x, \u03bb (i : \u03b9) (x : \u03b2 i), sg i x)` is a basis of the filter `f.lift g`.  This basis is parametrized by `i : \u03b9` and `x : \u03b2 i`, so in order to formulate this fact using `has_basis` one has to use `\u03a3 i, \u03b2 i` as the index type. See also `filter.has_basis.mem_lift_iff` for the corresponding `mem_iff` statement formulated without using a sigma type.\n", "keywords": {"monotone function": 0.019486588332580386, "Prop": 0.019934638406204602, "set": 0.022780084962170405, "filter": 0.02416376522572291, "basis": 0.0272254256583428, "index type": 0.11166588931245233, "function": 0.13121711108423642, "f.lift": 0.13121711108423642, "type": 0.13503830944472472, "sigma type": 0.14297383003365394, "monotone": 0.14566788736153363, "iff": 0.15257519289279428, "order to formulate": 0.16053801692503222, "formulate this fact": 0.16053801692503222, "basis is parametrized": 0.17685073318318983, "statement formulated": 0.25099312489827597, "parametrized": 0.37192833092076055, "order": 0.37192833092076055, "formulate": 0.37192833092076055, "fact": 0.37192833092076055}}, {"docstring": " For any `p : \u2115` and any function `g : \u03b1 \u2192 \u2115` that's non-zero on `S : finset \u03b1`, the power of `p` in `S.prod g` equals the sum over `x \u2208 S` of the powers of `p` in `g x`. Generalises `factorization_mul`, which is the special case where `S.card = 2` and `g = id`.\n", "keywords": {"equals the sum": 0.01558934809874684, "S.prod": 0.055634667437334875, "power": 0.09616884813881316, "powers": 0.09616884813881316, "function": 0.10561787888104197, "finset": 0.10561787888104197, "equals": 0.10561787888104197, "S.card": 0.12704470021859623, "non-zero": 0.14533572323085503, "sum": 0.14533572323085503, "special case": 0.15991384681661985, "Generalises": 0.20791243635202292, "factorization": 0.20791243635202292, "mul": 0.20791243635202292, "special": 0.3713044625068338, "case": 0.3713044625068338}}, {"docstring": "**Triangle inequality** for the norm.\n", "keywords": {"Triangle inequality": 0.013797198203993007, "Triangle": 0.08596317751626563, "inequality": 0.15831692877998726, "norm": 0.15831692877998726}}, {"docstring": "As well as being linear, `\u03b9 m` squares to zero\n", "keywords": {"linear": 0.09568045026443411, "squares": 0.09568045026443411}}, {"docstring": "Easy inclusion: a differentiability point with derivative in `K` belongs to `D f K`.\n", "keywords": {"Easy inclusion": 0.009239332327148086, "differentiability point": 0.02570861714399338, "point with derivative": 0.02570861714399338, "Easy": 0.09568045026443411, "inclusion": 0.09568045026443411, "belongs": 0.09568045026443411, "differentiability": 0.15831692877998726, "point": 0.15831692877998726, "derivative": 0.15831692877998726}}, {"docstring": "Vandermonde's identity\n", "keywords": {"Vandermonde identity": 0.02570861714399338, "Vandermonde": 0.15831692877998726, "identity": 0.15831692877998726}}, {"docstring": "Direct products of torsion free groups are torsion free.\n", "keywords": {"torsion free groups": 0.011041420469275918, "Direct products": 0.02459177073035948, "torsion free": 0.02595416362410219, "free groups": 0.045872129360315365, "products of torsion": 0.10215850587430082, "groups are torsion": 0.10215850587430082, "torsion": 0.11107071682746067, "free": 0.11107071682746067, "Direct": 0.12156210109285605, "products": 0.19744254481508877, "groups": 0.19744254481508877}}, {"docstring": " The norm of `q.comp_along_composition p c` is controlled by the product of the norms of the relevant bits of `q` and `p`.\n", "keywords": {"relevant bits": 0.01281102963567174, "q.comp": 0.053316999302383886, "composition": 0.08088209179216702, "norm": 0.08293829952712643, "norms": 0.08293829952712643, "controlled": 0.11246769819744629, "product": 0.11246769819744629, "relevant": 0.11246769819744629, "bits": 0.11246769819744629}}, {"docstring": "An unbundled version of `repr_eq_iff`\n", "keywords": {"repr": 0.04491197687864554, "iff": 0.04491197687864554, "unbundled version": 0.09700399286574239, "unbundled": 0.29736558256021506, "version": 0.29736558256021506}}, {"docstring": " Shows that the recurrence relation (`convergents`) and direct evaluation (`convergents'`) of a (regular) continued fraction coincide.\n", "keywords": {"continued fraction coincide": 0.002280304343915301, "recurrence relation": 0.020171377334626643, "direct evaluation": 0.020171377334626643, "continued fraction": 0.020171377334626643, "fraction coincide": 0.020171377334626643, "regular": 0.052008009273421085, "convergents": 0.06706294711327264, "Shows": 0.10987504304330521, "relation": 0.10987504304330521, "evaluation": 0.10987504304330521, "continued": 0.10987504304330521, "coincide": 0.10987504304330521, "recurrence": 0.17995476918065306, "direct": 0.17995476918065306, "fraction": 0.17995476918065306}}, {"docstring": "**Alias** of the reverse direction of left.one_lt_inv_iff`.\n", "keywords": {"direction of left.one": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "inv": 0.04491197687864554, "iff": 0.04491197687864554, "left.one": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "The constant term of `cyclotomic n R` is `1` if `2 \u2264 n`.\n", "keywords": {"constant term": 0.02570861714399338, "cyclotomic": 0.09568045026443411, "constant": 0.15831692877998726, "term": 0.15831692877998726}}, {"docstring": "`nonempty_compacts.to_closeds` is a uniform embedding (as it is an isometry)\n", "keywords": {"uniform embedding": 0.015380821171891606, "nonempty": 0.04491197687864554, "compacts.to": 0.04491197687864554, "closeds": 0.04491197687864554, "embedding": 0.09568045026443411, "isometry": 0.09568045026443411, "uniform": 0.15831692877998726}}, {"docstring": "The `v`-adic valuation on `R` is bounded above by 1.\n", "keywords": {"adic valuation": 0.04940384002065631, "adic": 0.15831692877998726, "valuation": 0.29736558256021506, "bounded": 0.29736558256021506}}, {"docstring": "The sheaf condition in terms of an equalizer diagram is equivalent to the reformulation in terms of a limit diagram over `U i` and `U i \u2293 U j`.\n", "keywords": {"condition in terms": 0.015245046152746466, "reformulation in terms": 0.015245046152746466, "sheaf condition": 0.020225813225353943, "equalizer diagram": 0.027430531955772185, "limit diagram": 0.027430531955772185, "terms": 0.05332403764722467, "diagram is equivalent": 0.06405909490722952, "diagram": 0.094808423351325, "sheaf": 0.1408007092310104, "condition": 0.1408007092310104, "equalizer": 0.1408007092310104, "equivalent": 0.1408007092310104, "reformulation": 0.1408007092310104, "limit": 0.1408007092310104}}, {"docstring": "Given two orthogonal vectors, their sum and difference have equal norms.\n", "keywords": {"orthogonal vectors": 0.04940384002065631, "equal norms": 0.04940384002065631, "sum and difference": 0.09700399286574239, "difference have equal": 0.09700399286574239, "vectors": 0.15831692877998726, "norms": 0.15831692877998726, "orthogonal": 0.29736558256021506, "sum": 0.29736558256021506, "difference": 0.29736558256021506, "equal": 0.29736558256021506}}, {"docstring": "The other direction does not hold because of the `u`-`u` cross terms on the RHS.\n", "keywords": {"cross terms": 0.00899321792126428, "RHS": 0.04776309965539685, "cross": 0.0771485953923296, "direction": 0.1155310835876123, "hold": 0.1155310835876123, "terms": 0.1155310835876123}}, {"docstring": " A convex combination of two centers of mass is a center of mass as well. This version deals with two different index types.\n", "keywords": {"centers of mass": 0.03434289779549658, "convex combination": 0.038582279020236365, "mass": 0.09110793528889599, "centers": 0.18221587057779198, "center": 0.18221587057779198, "index types": 0.18647785413926865, "convex": 0.19274072340671292, "combination": 0.19274072340671292, "version deals": 0.25865309594422875, "types": 0.3467063614068829, "version": 0.45332097725137205, "deals": 0.45332097725137205, "index": 0.45332097725137205}}, {"docstring": " A variant of Zorn's lemma. If every nonempty chain of a nonempty type has an upper bound, then there is a maximal element.\n", "keywords": {"Zorn lemma": 0.010164502069905159, "variant of Zorn": 0.014940036229028246, "Zorn": 0.08314056054721641, "lemma": 0.12102666257279926, "upper bound": 0.16056327145649474, "maximal element": 0.16056327145649474, "variant": 0.17705097305926945, "nonempty": 0.23986829973003046, "nonempty chain": 0.25811876959512836, "nonempty type": 0.25811876959512836, "bound": 0.32350596561652023, "element": 0.32350596561652023, "chain": 0.4276565147820152, "type": 0.4276565147820152, "upper": 0.4276565147820152, "maximal": 0.4276565147820152}}, {"docstring": "The measure of a set under `pure a` is `1` for sets containing `a` and `0` otherwise\n", "keywords": {"pure": 0.09713402394201612, "measure": 0.14390902704051098, "set": 0.19541708604559876, "sets": 0.19541708604559876}}, {"docstring": "A concave function on a segment is lower-bounded by the min of its endpoints.\n", "keywords": {"concave function": 0.02570861714399338, "segment is lower-bounded": 0.02570861714399338, "endpoints": 0.09568045026443411, "concave": 0.15831692877998726, "function": 0.15831692877998726, "segment": 0.15831692877998726, "lower-bounded": 0.15831692877998726, "min": 0.15831692877998726}}, {"docstring": "The union of two bounded sets is bounded.\n", "keywords": {"bounded sets": 0.05913243875864445, "sets is bounded": 0.12748048004056906, "bounded": 0.14323823713631006, "union": 0.19488865479360015, "sets": 0.19488865479360015}}, {"docstring": "Additive homomorphisms preserve `bit0`.\n", "keywords": {"Additive homomorphisms preserve": 0.008321268142839145, "Additive homomorphisms": 0.04940384002065631, "homomorphisms preserve": 0.04940384002065631, "Additive": 0.15831692877998726, "preserve": 0.15831692877998726, "homomorphisms": 0.29736558256021506}}, {"docstring": "**Alias** of the forward direction of has_deriv_within_at_congr_set`.\n", "keywords": {"forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "deriv": 0.04491197687864554, "congr": 0.04491197687864554, "set": 0.04491197687864554, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " If the distance between consecutive points of a sequence is estimated by a summable series, then the original sequence is a Cauchy sequence.\n", "keywords": {"Cauchy sequence": 0.013991533849774591, "summable series": 0.014403555314280002, "distance between consecutive": 0.021479477819866782, "consecutive points": 0.021479477819866782, "original sequence": 0.027288646082713832, "sequence is estimated": 0.04782082005386333, "sequence": 0.06106202591780962, "Cauchy": 0.07532489493788304, "series": 0.09791785820909267, "distance": 0.14500969419684506, "consecutive": 0.14500969419684506, "points": 0.14500969419684506, "estimated": 0.14500969419684506, "summable": 0.14500969419684506, "original": 0.14500969419684506}}, {"docstring": "A version of `nat.exists_infinite_primes` using the `bdd_above` predicate.\n", "keywords": {"nat.exists": 0.04491197687864554, "infinite": 0.04491197687864554, "primes": 0.04491197687864554, "bdd": 0.04491197687864554, "predicate": 0.04491197687864554, "version": 0.29736558256021506}}, {"docstring": "**Summation by parts** for ranges\n", "keywords": {"Summation by parts": 0.013797198203993007, "Summation": 0.08596317751626563, "parts": 0.15831692877998726, "ranges": 0.15831692877998726}}, {"docstring": "Sum of a multiset of elements in an `add_submonoid` of an `add_comm_monoid` is in the `add_submonoid`.\n", "keywords": {"add": 0.012616079950459014, "submonoid": 0.023264649583682996, "multiset of elements": 0.023478396598924825, "comm": 0.06037786452709367, "monoid": 0.06037786452709367, "Sum": 0.10252384836042068, "multiset": 0.15145892749810547, "elements": 0.15145892749810547}}, {"docstring": " The mean value theorem on a convex set in dimension 1: if the derivative of a function within this set is bounded by `C`, then the function is `C`-Lipschitz. Version with `deriv_within`\n", "keywords": {"Lipschitz": 0.04238206425577961, "convex set": 0.044559701767579396, "set in dimension": 0.06930136657061406, "set is bounded": 0.0994502542170838, "set": 0.11318070994262608, "function": 0.11318070994262608, "dimension": 0.129389133019644, "theorem": 0.1884545376459065, "convex": 0.1884545376459065, "derivative": 0.1884545376459065, "bounded": 0.1884545376459065, "deriv": 0.22501140196509825, "Version": 0.3404402136765515}}, {"docstring": " The exponential in a Banach-algebra `\ud835\udd38` over `\ud835\udd42 = \u211d` or `\ud835\udd42 = \u2102` has strict Fr\u00e9chet-derivative `1 : \ud835\udd38 \u2192L[\ud835\udd42] \ud835\udd38` at zero.\n", "keywords": {"strict Fr\u00e9chet-derivative": 0.005548741293751374, "Banach-algebra": 0.04776309965539685, "Fr\u00e9chet-derivative": 0.04776309965539685, "exponential": 0.1155310835876123, "strict": 0.1155310835876123}}, {"docstring": "Two bases are equal if their basis vectors are the same.\n", "keywords": {"bases are equal": 0.02570861714399338, "basis vectors": 0.02570861714399338, "bases": 0.15831692877998726, "equal": 0.15831692877998726, "basis": 0.15831692877998726, "vectors": 0.15831692877998726}}, {"docstring": " If `s` is a convex set, then `a \u2022 s + b \u2022 interior s \u2286 interior s` for all `0 \u2264 a`, `0 < b`, `a + b = 1`. See also `convex.combo_closure_interior_subset_interior` for a stronger version.\n", "keywords": {"convex set": 0.021786084795612032, "interior": 0.035261995580054634, "set": 0.12801953565520405, "stronger version": 0.1605691047236775, "convex": 0.1665493561396732, "convex.combo": 0.2614994545772466, "closure": 0.2614994545772466, "subset": 0.2614994545772466, "version": 0.33770316900908626, "stronger": 0.40969045393250325}}, {"docstring": "**Alias** of the forward direction of left.inv_lt_one_iff`.\n", "keywords": {"direction of left.inv": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "left.inv": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "**Alias** of the forward direction of is_extr_on_dual_iff`.\n", "keywords": {"forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "extr": 0.04491197687864554, "dual": 0.04491197687864554, "iff": 0.04491197687864554, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " Theorems about `padic_norm_e` are named with a `'` so the names do not conflict with the equivalent theorems about `norm` (`\u2225 \u2225`).\n", "keywords": {"norm": 0.021352745740207107, "equivalent theorems": 0.04437656514447953, "padic": 0.05706283858652404, "Theorems": 0.10901343189444501, "named": 0.19488865479360015, "conflict": 0.19488865479360015, "equivalent": 0.19488865479360015}}, {"docstring": " Weighted generalized mean inequality, version for sums over finite sets, with `\u211d\u22650`-valued functions and real exponents.\n", "keywords": {"Weighted generalized": 0.04940384002065631, "generalized mean inequality": 0.04940384002065631, "version for sums": 0.04940384002065631, "finite sets": 0.04940384002065631, "valued functions": 0.04940384002065631, "real exponents": 0.04940384002065631, "sums over finite": 0.09700399286574239, "functions and real": 0.09700399286574239, "Weighted": 0.15831692877998726, "inequality": 0.15831692877998726, "version": 0.15831692877998726, "sets": 0.15831692877998726, "valued": 0.15831692877998726, "exponents": 0.15831692877998726, "generalized": 0.29736558256021506, "sums": 0.29736558256021506, "finite": 0.29736558256021506, "functions": 0.29736558256021506, "real": 0.29736558256021506}}, {"docstring": "**Alias** of the reverse direction of strict_anti_on_comp_of_dual_iff`.\n", "keywords": {"direction of strict": 0.00899321792126428, "reverse direction": 0.013527995261974615, "Alias": 0.030396371632413578, "anti": 0.04491197687864554, "comp": 0.04491197687864554, "dual": 0.04491197687864554, "iff": 0.04491197687864554, "strict": 0.0771485953923296, "reverse": 0.1155310835876123, "direction": 0.1155310835876123}}, {"docstring": " A set is eventually carried into any open neighbourhood of its \u03c9-limit: if `c` is a compact set such that `closure {\u03d5 t x | t \u2208 v, x \u2208 s} \u2286 c` for some `v \u2208 f` and `n` is an open neighbourhood of `\u03c9 f \u03d5 s`, then for some `u \u2208 f` we have `closure {\u03d5 t x | t \u2208 u, x \u2208 s} \u2286 n`.\n", "keywords": {"open neighbourhood": 0.0037182528735141295, "eventually carried": 0.010159422250580143, "compact set": 0.011721941822198672, "closure": 0.02245598843932277, "set is eventually": 0.029429862386845196, "neighbourhood": 0.0385742976961648, "open": 0.04784022513221706, "set": 0.05776554179380615, "\u03c9-limit": 0.07862947958994491, "eventually": 0.10028582371075691, "carried": 0.10028582371075691, "compact": 0.10028582371075691}}, {"docstring": " The nilpotency class of a nilpotent `G` is equal to the smallest `n` for which an ascending central series reaches `G` in its `n`'th term.\n", "keywords": {"central series reaches": 0.0025258761156662004, "ascending central series": 0.0042542192213185686, "series reaches": 0.015380821171891606, "nilpotency class": 0.02570861714399338, "ascending central": 0.02570861714399338, "central series": 0.02570861714399338, "nilpotent": 0.09568045026443411, "smallest": 0.09568045026443411, "reaches": 0.09568045026443411, "term": 0.09568045026443411, "nilpotency": 0.15831692877998726, "class": 0.15831692877998726, "equal": 0.15831692877998726, "ascending": 0.15831692877998726, "central": 0.15831692877998726, "series": 0.15831692877998726}}, {"docstring": " If the Hausdorff distance is `<r`, then any point in one of the sets has a corresponding point at distance `<r` in the other set\n", "keywords": {"Hausdorff distance": 0.016538701559779555, "Hausdorff": 0.07715430965998664, "distance": 0.10543560813537892, "point": 0.10543560813537892, "point at distance": 0.15930039100091614, "sets": 0.21087121627075783, "set": 0.21087121627075783}}, {"docstring": " A version of `comm` with `r` explicit.  This lemma matches the lemmas from lean core in `init.algebra.classes`, but is missing there.\n", "keywords": {"comm": 0.07258934678807509, "explicit": 0.07258934678807509, "version": 0.23843406751375792, "lean core": 0.3724275679522048, "lemma matches": 0.4624443418465675, "matches": 0.5209261917026199, "lean": 0.5209261917026199, "core": 0.5209261917026199, "missing": 0.5209261917026199, "lemma": 0.6070212988002157, "lemmas": 0.6070212988002157, "matches the lemmas": 0.8044041031124162, "lemmas from lean": 0.8044041031124162}}, {"docstring": " **Rearrangement Inequality**: Pointwise scalar multiplication of `f` and `g` is minimized when `f` and `g` antivary together. Stated by permuting the entries of `g`.\n", "keywords": {"Pointwise scalar multiplication": 0.001271864619686412, "Rearrangement Inequality": 0.0031146356952437464, "Pointwise scalar": 0.008334116283452563, "scalar multiplication": 0.02249651976012989, "Rearrangement": 0.05572221155747183, "Inequality": 0.05572221155747183, "Pointwise": 0.05572221155747183, "antivary": 0.10028582371075691, "Stated by permuting": 0.11755105063023073, "scalar": 0.14832923246533666, "multiplication": 0.14832923246533666, "minimized": 0.14832923246533666, "permuting the entries": 0.165573765898185, "Stated": 0.2790829227183407, "permuting": 0.37689977775222827, "entries": 0.37689977775222827}}, {"docstring": "An element of `S` admitting a left inverse in `R` is `M`-regular.\n", "keywords": {"regular": 0.04491197687864554, "admitting a left": 0.04940384002065631, "left inverse": 0.09700399286574239, "admitting": 0.15831692877998726, "element": 0.29736558256021506, "left": 0.29736558256021506, "inverse": 0.29736558256021506}}, {"docstring": " The pigeonhole principle for finitely many pigeons counted by weight, non-strict inequality version: if the total weight of a finite set of pigeons is greater than or equal to `n \u2022 b`, and they are sorted into `n > 0` pigeonholes, then for some pigeonhole, the total weight of the pigeons in this pigeonhole is greater than or equal to `b`.\n", "keywords": {"non-strict inequality version": 0.0012644982383904334, "total weight": 0.007233548053275426, "non-strict inequality": 0.012906749834788353, "inequality version": 0.012906749834788353, "principle for finitely": 0.017920479134597413, "finite set": 0.017920479134597413, "pigeons counted": 0.029325983898671516, "pigeonhole principle": 0.034376393841681806, "weight": 0.0444351907477972, "total": 0.05348907676643541, "greater": 0.05348907676643541, "equal": 0.05348907676643541, "counted by weight": 0.061264230160180594, "pigeons": 0.07157486183939546, "pigeons is greater": 0.0751392510727093, "pigeonhole": 0.0834915604956076, "finitely many pigeons": 0.09176477129428676, "set of pigeons": 0.09176477129428676, "non-strict": 0.09603500085846951, "version": 0.09603500085846951}}, {"docstring": "For natural numbers the filters `cofinite` and `at_top` coincide.\n", "keywords": {"cofinite": 0.04491197687864554, "top": 0.04491197687864554, "coincide": 0.04491197687864554, "numbers the filters": 0.04940384002065631, "natural numbers": 0.09700399286574239, "filters": 0.15831692877998726, "natural": 0.29736558256021506, "numbers": 0.29736558256021506}}, {"docstring": "A variant\n", "keywords": {"variant": 0.15831692877998726}}, {"docstring": "Split the sum definining a Liouville number into the first `k` term and the rest.\n", "keywords": {"definining a Liouville": 0.007743432063478832, "Liouville number": 0.007743432063478832, "Split the sum": 0.00899321792126428, "sum definining": 0.013527995261974615, "Liouville": 0.06650965107397505, "Split": 0.0771485953923296, "term": 0.0771485953923296, "rest": 0.0771485953923296, "sum": 0.1155310835876123, "definining": 0.1155310835876123, "number": 0.1155310835876123}}, {"docstring": "The operator norm of the projection is at most `1`.\n", "keywords": {"operator norm": 0.02570861714399338, "operator": 0.15831692877998726, "norm": 0.15831692877998726, "projection": 0.15831692877998726}}, {"docstring": "**Alias** of the reverse direction of smul_neg_iff_of_pos`.\n", "keywords": {"direction of smul": 0.00899321792126428, "reverse direction": 0.013527995261974615, "Alias": 0.030396371632413578, "neg": 0.04491197687864554, "iff": 0.04491197687864554, "pos": 0.04491197687864554, "smul": 0.0771485953923296, "reverse": 0.1155310835876123, "direction": 0.1155310835876123}}, {"docstring": "**Alias** of the forward direction of is_square_iff_exists_sq`.\n", "keywords": {"forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "square": 0.04491197687864554, "iff": 0.04491197687864554, "exists": 0.04491197687864554, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "**Alias** of left.one_lt_mul_of_le_of_lt`.\n", "keywords": {"Alias": 0.030396371632413578, "mul": 0.04491197687864554, "left.one": 0.0771485953923296}}, {"docstring": "The `v`-adic valuation on `R` is bounded above by 1.\n", "keywords": {"adic valuation": 0.04940384002065631, "adic": 0.15831692877998726, "valuation": 0.29736558256021506, "bounded": 0.29736558256021506}}, {"docstring": " Given a predicate on functions `\u03a0 i, finset (\u03b1 i)` defined on a finite type, it is true on all maps provided that it is true on `\u03bb _, \u2205` and for any function `g : \u03a0 i, finset (\u03b1 i)`, an index `i : \u03b9`, and an element`x : \u03b1 i` that is strictly less than all elements of `g i`, `p g` implies `p (update g i (insert x (g i)))`.  This lemma requires `linear_order` instances on all `\u03b1 i`. See also `finset.induction_on_pi` for a version that `x \u2209 g i` instead of ` does not need `\u03a0 i, linear_order (\u03b1 i)`.\n", "keywords": {"finite type": 0.012977589192181721, "maps provided": 0.014691510236630066, "predicate on functions": 0.023815587710877988, "finset": 0.02954756057013799, "true": 0.03858294412942916, "functions": 0.07716588825885833, "function": 0.07716588825885833, "linear": 0.09115506452390677, "order": 0.09115506452390677, "implies": 0.09316987201844401, "element": 0.09698650019060097, "elements": 0.09698650019060097, "lemma requires": 0.10408278543745506, "defined": 0.1064701773379489, "type": 0.1064701773379489, "index": 0.1064701773379489, "update": 0.1064701773379489, "insert": 0.1064701773379489, "predicate": 0.12032786407782493, "finite": 0.12032786407782493}}, {"docstring": "An 'unapplied' analogue of `finset.prod_apply`.\n", "keywords": {"unapplied": 0.04491197687864554, "finset.prod": 0.04491197687864554, "apply": 0.04491197687864554, "analogue": 0.15831692877998726}}, {"docstring": " The rays given by two nonzero vectors are equal if and only if those vectors satisfy `same_ray`.\n", "keywords": {"vectors satisfy": 0.03672426843567709, "nonzero vectors": 0.06104740651975287, "satisfy": 0.12156210109285605, "vectors are equal": 0.1311351076396852, "vectors": 0.14570071893270706, "nonzero": 0.19744254481508877, "equal": 0.19744254481508877, "rays": 0.2914014378654141, "ray": 0.2914014378654141}}, {"docstring": "A sum taken over a conditional whose condition is an equality test on the index and whose alternative is `0` has value either the term at that index or `0`.  The difference with `finset.sum_ite_eq` is that the arguments to `eq` are swapped.\n", "keywords": {"conditional whose condition": 0.021578258620195793, "equality test": 0.021578258620195793, "index": 0.07953440658135291, "sum": 0.14533572323085503, "conditional": 0.14533572323085503, "condition": 0.14533572323085503, "equality": 0.14533572323085503, "test": 0.14533572323085503, "alternative": 0.14533572323085503, "term": 0.14533572323085503, "finset.sum": 0.20791243635202292, "ite": 0.20791243635202292, "swapped": 0.29084826087808563, "difference": 0.3713044625068338, "arguments": 0.3713044625068338}}, {"docstring": "The cardinality of a quaternion algebra, as a type.\n", "keywords": {"quaternion algebra": 0.015380821171891606, "algebra": 0.09568045026443411, "type": 0.09568045026443411, "cardinality": 0.15831692877998726, "quaternion": 0.15831692877998726}}, {"docstring": "The difference of two `C^n` functions on a domain is `C^n`.\n", "keywords": {"functions": 0.09568045026443411, "difference": 0.15831692877998726, "domain": 0.15831692877998726}}, {"docstring": " If `f` is a monotone function on a neighborhood of `a` and the image of this neighborhood under `f` meets every interval `(b, f a)`, `b < f a`, and every interval `(f a, b)`, `b > f a`, then `f` is continuous at `a`.\n", "keywords": {"meets every interval": 0.0036965579675940943, "monotone function": 0.007331479493103858, "interval": 0.026216408325030176, "neighborhood": 0.04478074116273408, "meets": 0.07024119602617745, "monotone": 0.08531189896378533, "function": 0.08531189896378533, "image": 0.08531189896378533, "continuous": 0.08531189896378533}}, {"docstring": "Being in the upper shadow of `\ud835\udc9c` means we have a superset in `\ud835\udc9c`.\n", "keywords": {"upper shadow": 0.02570861714399338, "upper": 0.15831692877998726, "shadow": 0.15831692877998726, "superset": 0.15831692877998726}}, {"docstring": "A strongly measurable function is measurable.\n", "keywords": {"strongly measurable function": 0.012476328642182708, "strongly measurable": 0.05913243875864445, "measurable function": 0.05913243875864445, "function is measurable": 0.12748048004056906, "measurable": 0.14323823713631006, "strongly": 0.19488865479360015, "function": 0.19488865479360015}}, {"docstring": " Auxiliary definition: Multivariate polynomials in finitely many variables over an integral domain form an integral domain. This fact is proven by transport of structure from the `mv_polynomial.is_domain_fin`, and then used to prove the general case without finiteness hypotheses. See `mv_polynomial.is_domain` for the general case.\n", "keywords": {"Multivariate polynomials": 0.013884585507515377, "integral domain form": 0.013940884247466114, "Auxiliary definition": 0.023895917378936406, "form an integral": 0.029782564561794744, "integral domain": 0.030591137443627254, "polynomials in finitely": 0.04437548747091655, "finitely many variables": 0.04437548747091655, "Multivariate": 0.06643564650315686, "integral": 0.07015252841459782, "domain form": 0.09254311823524713, "general case": 0.09271850536025784, "polynomial.is": 0.10013720611174884, "domain": 0.10273118987696078, "Auxiliary": 0.15276854711387922, "definition": 0.15276854711387922, "general": 0.1801975225983029, "prove the general": 0.20611602901089243, "polynomials": 0.2061309636011895, "finitely": 0.2061309636011895, "variables": 0.2061309636011895}}, {"docstring": "A pair `(t\u2081, t\u2082)` of multisets is contained in `antidiagonal s`    if and only if `t\u2081 + t\u2082 = s`.\n", "keywords": {"multisets is contained": 0.009239332327148086, "pair": 0.06844581806138879, "antidiagonal": 0.06844581806138879, "multisets": 0.09568045026443411, "contained": 0.09568045026443411}}, {"docstring": "  A property holds for all polynomials of non-zero `nat_degree` with coefficients in a semiring `R` if it holds for * `p + a`, with `a \u2208 R`, `p \u2208 R[X]`, * `p + q`, with `p, q \u2208 R[X]`, * monomials with nonzero coefficient and non-zero exponent, with appropriate restrictions on each term. Note that multiplication is \"hidden\" in the assumption on monomials, so there is no explicit multiplication in the statement. See `degree_pos_induction_on` for a similar statement involving more explicit multiplications.\n", "keywords": {"non-zero exponent": 0.026103949640608887, "property holds": 0.027857609685457186, "nonzero coefficient": 0.03410303117328026, "holds": 0.07553496881814012, "polynomials of non-zero": 0.07825344791084514, "degree": 0.08113442682374668, "non-zero": 0.09191075454675258, "nat": 0.10035077787947591, "monomials with nonzero": 0.12329981287392278, "coefficient and non-zero": 0.1267321358068905, "semiring": 0.1383944061686411, "exponent": 0.1383944061686411, "term": 0.1383944061686411, "monomials": 0.15107832402685542, "property": 0.1794042981996834, "polynomials": 0.1794042981996834, "nonzero": 0.1794042981996834, "restrictions": 0.1794042981996834, "coefficients": 0.18382150909350517, "explicit": 0.19129504535040565}}, {"docstring": " An additive monoid `M` is finitely generated if and only if `add_monoid_algebra R M` is of finite type.\n", "keywords": {"finite type": 0.020744656539556924, "additive monoid": 0.025580763661104764, "finitely generated": 0.03439110359613085, "add": 0.0528063806271324, "monoid": 0.06839635777587466, "algebra": 0.11145728654016383, "type": 0.11145728654016383, "additive": 0.1823394614884183, "finitely": 0.1823394614884183, "generated": 0.1823394614884183, "finite": 0.1823394614884183}}, {"docstring": "Cauchy condensation test for a series of `nnreal` version.\n", "keywords": {"Cauchy condensation test": 0.01655915082773619, "nnreal": 0.04491197687864554, "version": 0.04491197687864554, "Cauchy condensation": 0.04940384002065631, "condensation test": 0.09700399286574239, "Cauchy": 0.15831692877998726, "condensation": 0.29736558256021506, "test": 0.29736558256021506, "series": 0.29736558256021506}}, {"docstring": "If `n \u2260 0` in `F`, then ` X ^ n - a` is separable for any `a \u2260 0`.\n", "keywords": {"separable": 0.15831692877998726}}, {"docstring": " If `a \u2264 b`, then `(-\u221e, a) \u2286 (-\u221e, b)`. In preorders, this is just an implication. If you need the equivalence in linear orders, use `Iio_subset_Iio_iff`.\n", "keywords": {"Iio": 0.0707248212798997, "subset": 0.31807004650910337, "iff": 0.31807004650910337, "preorders": 0.4187126706439023, "implication": 0.4187126706439023, "linear orders": 0.5001019392897985, "orders": 0.5120663821591114, "equivalence": 0.6510457398118691, "linear": 0.6510457398118691, "equivalence in linear": 0.7356909151878849}}, {"docstring": " A version of `has_compact_support.continuous_convolution_right` that works if `G` is not locally compact but requires that `g` is integrable.\n", "keywords": {"locally compact": 0.05033870131288873, "support.continuous": 0.0528063806271324, "convolution": 0.0528063806271324, "compact but requires": 0.11047974441476764, "integrable": 0.11145728654016383, "compact": 0.1314201551237121, "version": 0.1823394614884183, "works": 0.1823394614884183, "locally": 0.1823394614884183, "requires": 0.1823394614884183}}, {"docstring": "A lower bound on the multiplicity of `p` in `choose n k`.\n", "keywords": {"lower bound": 0.09700399286574239, "choose": 0.15831692877998726, "lower": 0.29736558256021506, "bound": 0.29736558256021506, "multiplicity": 0.29736558256021506}}, {"docstring": "The inductive principle used to prove propositions about the elements of a quotient by an additive congruence relation.\n", "keywords": {"additive congruence relation": 0.0025258761156662004, "congruence relation": 0.015380821171891606, "inductive principle": 0.02570861714399338, "prove propositions": 0.02570861714399338, "additive congruence": 0.02570861714399338, "relation": 0.09568045026443411, "inductive": 0.15831692877998726, "principle": 0.15831692877998726, "prove": 0.15831692877998726, "propositions": 0.15831692877998726, "elements": 0.15831692877998726, "quotient": 0.15831692877998726, "additive": 0.15831692877998726, "congruence": 0.15831692877998726}}, {"docstring": " If there is a primitive `n`-th root of unity in `K`, then `\u220f i in nat.divisors n, cyclotomic' i K = X ^ n - 1`.\n", "keywords": {"root of unity": 0.013527995261974615, "cyclotomic": 0.04491197687864554, "primitive": 0.0771485953923296, "root": 0.1155310835876123, "unity": 0.1155310835876123, "nat.divisors": 0.1155310835876123}}, {"docstring": "**Alias** of left.neg_lt_self`.\n", "keywords": {"Alias": 0.030396371632413578, "left.neg": 0.15831692877998726}}, {"docstring": "A submonoid is closed under multiplication.\n", "keywords": {"closed under multiplication": 0.04940384002065631, "submonoid is closed": 0.09700399286574239, "multiplication": 0.15831692877998726, "submonoid": 0.29736558256021506, "closed": 0.29736558256021506}}, {"docstring": "**Alias** of the forward direction of asymptotics.is_o_iff_forall_is_O_with`.\n", "keywords": {"direction of asymptotics.is": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "forall": 0.04491197687864554, "asymptotics.is": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "An induction principle for additive closure membership for predicates with two arguments.\n", "keywords": {"additive closure membership": 0.0042542192213185686, "induction principle": 0.02570861714399338, "principle for additive": 0.02570861714399338, "additive closure": 0.02570861714399338, "closure membership": 0.02570861714399338, "membership for predicates": 0.02570861714399338, "arguments": 0.09568045026443411, "induction": 0.15831692877998726, "principle": 0.15831692877998726, "additive": 0.15831692877998726, "closure": 0.15831692877998726, "membership": 0.15831692877998726, "predicates": 0.15831692877998726}}, {"docstring": "Definition of `x \u2264 y` on numeric pre-games, in terms of `<`\n", "keywords": {"numeric pre-games": 0.015380821171891606, "Definition": 0.09568045026443411, "pre-games": 0.09568045026443411, "numeric": 0.15831692877998726, "terms": 0.15831692877998726}}, {"docstring": " Subtracting a point from the point `p` is an injective function.\n", "keywords": {"injective function": 0.022885248721446715, "Subtracting a point": 0.0755376268286288, "Subtracting": 0.11718348279991213, "function": 0.11718348279991213, "point": 0.13945519496053638, "injective": 0.19092478917347616}}, {"docstring": "Pullback a `no_zero_smul_divisors` instance along an injective function.\n", "keywords": {"smul": 0.04491197687864554, "divisors": 0.04491197687864554, "injective function": 0.04940384002065631, "Pullback": 0.15831692877998726, "instance": 0.15831692877998726, "function": 0.15831692877998726, "injective": 0.29736558256021506}}, {"docstring": "Lagrange's Mean Value Theorem, `has_deriv_at` version\n", "keywords": {"deriv": 0.04491197687864554, "version": 0.04491197687864554, "Theorem": 0.08596317751626563, "Lagrange": 0.15831692877998726}}, {"docstring": " An affine subspace constructed from a point and a direction is nonempty.\n", "keywords": {"affine subspace constructed": 0.0042542192213185686, "direction is nonempty": 0.015380821171891606, "affine subspace": 0.02570861714399338, "subspace constructed": 0.02570861714399338, "nonempty": 0.09568045026443411, "affine": 0.15831692877998726, "subspace": 0.15831692877998726, "constructed": 0.15831692877998726, "point": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "For `n < m`, `(n, m)` is in the transitive closure of a relation `~` for `n \u2260 m` if `pred i ~ i`  for all `i` between `n` and `m`.\n", "keywords": {"transitive closure": 0.009239332327148086, "relation": 0.06844581806138879, "pred": 0.06844581806138879, "transitive": 0.09568045026443411, "closure": 0.09568045026443411}}, {"docstring": "The following diagram commutes: ```text truncated_witt_vector p n (zmod p) ----> truncated_witt_vector p m (zmod p)             |                                        |             |                                        |             v                                        v           zmod (p^n) ----------------------------> zmod (p^m) ``` Here the vertical arrows are `(truncated_witt_vector.zmod_equiv_trunc p _).symm`, the horizontal arrow at the top is `zmod.cast_hom`, and the horizontal arrow at the bottom is `truncated_witt_vector.truncate`.\n", "keywords": {"horizontal arrow": 0.0042402796175853, "text truncated": 0.0073188046307899384, "diagram commutes": 0.008619764719378512, "witt": 0.009340357110885322, "vertical arrows": 0.010498107233963903, "truncated": 0.021864629732162622, "zmod": 0.029514226759259524, "vector": 0.033481129382517155, "horizontal": 0.04163401637130129, "arrow": 0.0504950331185023, "vector.zmod": 0.06486742237210819, "equiv": 0.06486742237210819, "symm": 0.06486742237210819, "zmod.cast": 0.06486742237210819, "hom": 0.06486742237210819, "vector.truncate": 0.06486742237210819, "commutes": 0.08307514237908202, "text": 0.08307514237908202, "trunc": 0.08307514237908202, "arrows": 0.1009900662370046}}, {"docstring": "Shows that `fib` indeed satisfies the Fibonacci recurrence `F\u2099\u208a\u2082 = F\u2099 + F\u2099\u208a\u2081.`\n", "keywords": {"Fibonacci recurrence": 0.005157590407455398, "satisfies the Fibonacci": 0.007743432063478832, "fib": 0.04491197687864554, "Fibonacci": 0.06650965107397505, "Shows": 0.0771485953923296, "recurrence": 0.0771485953923296, "satisfies": 0.1155310835876123}}, {"docstring": "A semiring homomorphism is a monoid homomorphism.\n", "keywords": {"semiring homomorphism": 0.05913243875864445, "monoid homomorphism": 0.05913243875864445, "homomorphism": 0.14323823713631006, "semiring": 0.19488865479360015, "monoid": 0.19488865479360015}}, {"docstring": "subtypes by an all-false predicate are false.\n", "keywords": {"predicate are false": 0.04940384002065631, "all-false predicate": 0.09700399286574239, "subtypes": 0.15831692877998726, "false": 0.15831692877998726, "all-false": 0.29736558256021506, "predicate": 0.29736558256021506}}, {"docstring": " Every irreducible polynomial can be contracted to a separable polynomial. https://stacks.math.columbia.edu/tag/09H0\n", "keywords": {"irreducible polynomial": 0.08896099380767705, "separable polynomial": 0.08896099380767705, "polynomial": 0.16299886812352193, "irreducible": 0.2505951825352756, "contracted": 0.2505951825352756, "separable": 0.2505951825352756}}, {"docstring": "**Alias** of the forward direction of convex_iff_ord_connected`.\n", "keywords": {"direction of convex": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "ord": 0.04491197687864554, "connected": 0.04491197687864554, "convex": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "The rank of `M \u00d7 N` is `(module.rank R M).lift + (module.rank R N).lift`.\n", "keywords": {"lift": 0.02317053471260329, "module.rank": 0.049279142876773374, "rank": 0.2040190808014209}}, {"docstring": "To prove two algebra structures on a fixed `[comm_semiring R] [semiring A]` agree, it suffices to check the `algebra_map`s agree.\n", "keywords": {"suffices to check": 0.03886567352795349, "comm": 0.056560163438398744, "map": 0.056560163438398744, "algebra structures": 0.058051617757398206, "semiring": 0.07482876671341214, "agree": 0.07482876671341214, "fixed": 0.11885714341470131, "prove two algebra": 0.125410617056658, "algebra": 0.1418319503011877, "prove": 0.19342090051671243, "structures": 0.19342090051671243, "suffices": 0.19342090051671243, "check": 0.19342090051671243}}, {"docstring": " The main feature of the Besicovitch Vitali family is that its filter at a point `x` corresponds to convergence along closed balls. We record one of the two implications here, which will enable us to deduce specific statements on differentiation of measures in this context from the general versions.\n", "keywords": {"Besicovitch Vitali family": 0.000547423531150457, "Besicovitch Vitali": 0.0043602070549573334, "Vitali family": 0.008212739846353857, "corresponds to convergence": 0.011154056927717123, "closed balls": 0.011154056927717123, "main feature": 0.01552184797949213, "convergence along closed": 0.01552184797949213, "deduce specific statements": 0.04761981136383764, "Besicovitch": 0.06588837669267192, "Vitali": 0.06588837669267192, "point": 0.08922538916412363, "corresponds": 0.08922538916412363, "balls": 0.08922538916412363, "general versions": 0.09108482621177338, "deduce specific": 0.12124452117740256, "specific statements": 0.12124452117740256, "statements on differentiation": 0.12124452117740256, "differentiation of measures": 0.12124452117740256, "main": 0.12363091320521931, "feature": 0.12363091320521931}}, {"docstring": "If a group exponent exists, the group is torsion.\n", "keywords": {"group exponent exists": 0.006901478775605423, "exponent exists": 0.022885248721446715, "group exponent": 0.0562460611896591, "group is torsion": 0.07553762682862881, "exists": 0.11718348279991213, "torsion": 0.11718348279991213, "group": 0.13945519496053638, "exponent": 0.19092478917347616}}, {"docstring": "**Alias** of the reverse direction of asymptotics.is_O_with_neg_left`.\n", "keywords": {"direction of asymptotics.is": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "neg": 0.04491197687864554, "left": 0.04491197687864554, "asymptotics.is": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " A smooth (semi)ring is a topological (semi)ring. This is not an instance for technical reasons, see note [Design choices about smooth algebraic structures].\n", "keywords": {"semi": 0.02638246116974664, "ring": 0.09110793528889603, "Design choices": 0.1365487104640474, "topological": 0.16205454282434614, "smooth algebraic structures": 0.19599664637307132, "Design": 0.22075851095444446, "smooth": 0.2405027004070563, "technical reasons": 0.2798687528962147, "algebraic structures": 0.2798687528962147, "smooth algebraic": 0.35460485137785114, "reasons": 0.40179717860981823, "note": 0.40179717860981823, "structures": 0.40179717860981823, "instance for technical": 0.42082946769804974, "instance": 0.544229518153821, "technical": 0.544229518153821, "choices": 0.544229518153821, "algebraic": 0.544229518153821, "choices about smooth": 0.6333818627846869}}, {"docstring": "An `add_submonoid` contains the monoid's 0.\n", "keywords": {"add": 0.04491197687864554, "submonoid": 0.04491197687864554, "monoid": 0.15831692877998726}}, {"docstring": "A continuous function with compact support is bounded above.\n", "keywords": {"continuous function": 0.09700399286574239, "function with compact": 0.09700399286574239, "compact support": 0.09700399286574239, "support is bounded": 0.09700399286574239, "continuous": 0.29736558256021506, "function": 0.29736558256021506, "compact": 0.29736558256021506, "support": 0.29736558256021506, "bounded": 0.29736558256021506}}, {"docstring": "Directional derivative agrees with `has_fderiv`.\n", "keywords": {"Directional derivative agrees": 0.01655915082773619, "fderiv": 0.04491197687864554, "Directional derivative": 0.04940384002065631, "derivative agrees": 0.09700399286574239, "Directional": 0.15831692877998726, "derivative": 0.29736558256021506, "agrees": 0.29736558256021506}}, {"docstring": "If `m\u2081 s = op (m\u2082 s)` for all `s`, then the same is true for `m\u2081.trim` and `m\u2082.trim`.\n", "keywords": {"trim": 0.04784022513221706, "true": 0.12363091320521931}}, {"docstring": "The associated bilinear form of an anisotropic quadratic form is nondegenerate.\n", "keywords": {"anisotropic quadratic form": 0.010962043841203115, "anisotropic quadratic": 0.03663237450220032, "bilinear form": 0.05417025203414716, "quadratic form": 0.05417025203414716, "form is nondegenerate": 0.07301337118426866, "nondegenerate": 0.11521656054299435, "form": 0.13667842094541144, "bilinear": 0.1879836817695587, "anisotropic": 0.1879836817695587, "quadratic": 0.1879836817695587}}, {"docstring": " As the thickening radius \u03b4 tends to 0, the \u03b4-thickened indicator of a set E (in \u03b1) tends pointwise (i.e., w.r.t. the product topology on `\u03b1 \u2192 \u211d\u22650\u221e`) to the indicator function of the closure of E.  This statement is for the unbundled `\u211d\u22650\u221e`-valued functions `thickened_indicator_aux \u03b4 E`, see `thickened_indicator_tendsto_indicator_closure` for the version for bundled `\u211d\u22650`-valued bounded continuous functions.\n", "keywords": {"thickening radius": 0.021359874152908482, "product topology": 0.021359874152908482, "\u03b4-thickened indicator": 0.045387700517420186, "bounded continuous functions": 0.04710593230614003, "valued bounded continuous": 0.05393063024243877, "indicator": 0.060045551945930184, "valued functions": 0.07940267602133136, "indicator function": 0.08325998649404547, "thickened": 0.09804148636976893, "continuous functions": 0.1046171807916154, "closure": 0.11614426989554802, "pointwise": 0.11783936039059546, "valued bounded": 0.11894495059892014, "functions": 0.12800377960642773, "version for bundled": 0.13280967643239006, "valued": 0.1436709171248469, "thickening": 0.14461387016034485, "radius": 0.14461387016034485, "\u03b4-thickened": 0.14461387016034485, "set": 0.14461387016034485}}, {"docstring": "Two different points can be separated by open sets.\n", "keywords": {"open sets": 0.04940384002065631, "separated by open": 0.09700399286574239, "sets": 0.15831692877998726, "points": 0.29736558256021506, "separated": 0.29736558256021506, "open": 0.29736558256021506}}, {"docstring": "Congruence lemma for constructing `ex.sum`.\n", "keywords": {"ex.sum": 0.04491197687864554, "Congruence lemma": 0.04940384002065631, "lemma for constructing": 0.04940384002065631, "Congruence": 0.15831692877998726, "constructing": 0.15831692877998726, "lemma": 0.29736558256021506}}, {"docstring": "If `k:\u2115` divides coprime `a` and `b` then `k = 1`\n", "keywords": {"divides coprime": 0.009239332327148086, "divides": 0.09568045026443411, "coprime": 0.09568045026443411}}, {"docstring": "`A` is in the `r`-th slice of `\ud835\udc9c` iff it's in `\ud835\udc9c` and has cardinality `r`.\n", "keywords": {"iff": 0.09568045026443411, "cardinality": 0.09568045026443411, "slice": 0.15831692877998726}}, {"docstring": "Shows the correctness of `comp_exact_value` in case the continued fraction `generalized_continued_fraction.of v` did not terminate at position `n`. That is, we obtain the value `v` if we pass the two successive (auxiliary) continuants at positions `n` and `n + 1` as well as the fractional part at `int_fract_pair.stream n` to `comp_exact_value`.  The correctness might be seen more readily if one uses `convergents'` to evaluate the continued fraction. Here is an example to illustrate the idea:  Let `(v : \u211a) := 3.4`. We have - `generalized_continued_fraction.int_fract_pair.stream v 0 = some \u27e83, 0.4\u27e9`, and - `generalized_continued_fraction.int_fract_pair.stream v 1 = some \u27e82, 0.5\u27e9`. Now `(generalized_continued_fraction.of v).convergents' 1 = 3 + 1/2`, and our fractional term at position `2` is `0.5`. We hence have `v = 3 + 1/(2 + 0.5) = 3 + 1/2.5 = 3.4`. This computation corresponds exactly to the one using the recurrence equation in `comp_exact_value`.\n", "keywords": {"terminate at position": 0.05020188467312884, "continued fraction": 0.05955205313305201, "continued": 0.0605856279393615, "comp": 0.06190861865707715, "exact": 0.06190861865707715, "generalized": 0.06792779123402132, "Shows the correctness": 0.07587814009141985, "fract": 0.09660872349617809, "position": 0.1081461791087471, "continuants at positions": 0.10860785710402303, "pair.stream": 0.12338240398707008, "fraction": 0.14638796913380991, "term at position": 0.17492200194155222, "correctness": 0.18318380115090402, "Shows": 0.19250256969762317, "fraction.of": 0.20168091327058843, "positions": 0.2162923582174942, "case": 0.22100701181375929, "terminate": 0.22100701181375929, "fraction.int": 0.22258751814775798}}, {"docstring": "Given additive congruence relations `c, d` on an `add_monoid` such that `d` contains `c`, the definition of the homomorphism from the quotient by `c` to the quotient by `d` induced by `d`'s quotient map.\n", "keywords": {"additive congruence relations": 0.001279246248080295, "congruence relations": 0.010443522453968283, "quotient map": 0.010786155758956974, "additive congruence": 0.01454727196365706, "quotient": 0.04121030440173978, "add": 0.057012387690331526, "monoid": 0.057012387690331526, "relations": 0.08631381754973053, "induced": 0.08631381754973053, "map": 0.08631381754973053, "additive": 0.11974424094284829, "congruence": 0.11974424094284829, "definition": 0.11974424094284829, "homomorphism": 0.11974424094284829}}, {"docstring": "An equivalent expression of `subgroup.fg` in terms of `set.finite` instead of `finset`.\n", "keywords": {"equivalent expression": 0.013527995261974615, "subgroup.fg": 0.04491197687864554, "set.finite": 0.04491197687864554, "finset": 0.04491197687864554, "equivalent": 0.1155310835876123, "expression": 0.1155310835876123, "terms": 0.1155310835876123}}, {"docstring": "A common special case of `image\u2082_congr`\n", "keywords": {"image \u2082_ congr": 0.02570861714399338, "common special case": 0.03339840940482845, "common special": 0.09700399286574239, "special case": 0.09700399286574239, "image": 0.15831692877998726, "congr": 0.15831692877998726, "common": 0.29736558256021506, "special": 0.29736558256021506, "case": 0.29736558256021506}}, {"docstring": " An element of a group acting on a Type is regular. This relies on the availability of the inverse given by groups, since there is no `left_cancel_smul` typeclass.\n", "keywords": {"Type is regular": 0.015467395315596946, "Type": 0.1041608709219513, "group acting": 0.11760060981182185, "regular": 0.14623340726105694, "left": 0.20910206899588812, "cancel": 0.20910206899588812, "smul": 0.20910206899588812, "typeclass": 0.20910206899588812, "element": 0.23342178605055275, "acting": 0.23342178605055275, "group": 0.45079755916013814, "groups": 0.45079755916013814, "relies": 0.5139833378573802, "availability": 0.5139833378573802, "inverse": 0.5139833378573802}}, {"docstring": "The composition of addition preserving maps also preserves addition\n", "keywords": {"addition preserving maps": 0.010962043841203115, "preserving maps": 0.03663237450220032, "maps also preserves": 0.03663237450220032, "addition preserving": 0.05417025203414716, "preserves addition": 0.05417025203414716, "composition of addition": 0.11793310824193863, "addition": 0.13667842094541144, "composition": 0.1879836817695587, "preserving": 0.1879836817695587, "maps": 0.1879836817695587, "preserves": 0.1879836817695587}}, {"docstring": "**Alias** of the reverse direction of holder_with_one`.\n", "keywords": {"direction of holder": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "holder": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " Multiplying by all the matrices either in `list_transvec_col M` and `list_transvec_row M` kills all the coefficients in the last column but the last one.\n", "keywords": {"list": 0.020312026404878777, "transvec": 0.020312026404878777, "Multiplying": 0.08361462103586328, "col": 0.08361462103586328, "row": 0.08361462103586328, "kills": 0.08361462103586328, "matrices": 0.1161324896811994, "coefficients": 0.1161324896811994, "column": 0.1161324896811994}}, {"docstring": "For `n \u2264 m`, `(n, m)` is in the reflexive-transitive closure of `~` if `pred i ~ i`  for all `i` between `n` and `m`.\n", "keywords": {"reflexive-transitive closure": 0.013527995261974615, "pred": 0.0771485953923296, "reflexive-transitive": 0.1155310835876123, "closure": 0.1155310835876123}}, {"docstring": "Generalization of `finset.sum_comm` to the case when the inner `finset`s depend on the outer variable.\n", "keywords": {"outer variable": 0.00899321792126428, "finset.sum": 0.04491197687864554, "comm": 0.04491197687864554, "finset": 0.04491197687864554, "Generalization": 0.0771485953923296, "variable": 0.0771485953923296, "case": 0.1155310835876123, "depend": 0.1155310835876123, "outer": 0.1155310835876123}}, {"docstring": " **Rearrangement Inequality**: Pointwise multiplication of `f` and `g` is minimized when `f` and `g` antivary together. Stated by permuting the entries of `g`.\n", "keywords": {"Rearrangement Inequality": 0.0031146356952437464, "Pointwise multiplication": 0.008334116283452563, "Rearrangement": 0.05572221155747183, "Inequality": 0.05572221155747183, "Pointwise": 0.05572221155747183, "antivary": 0.10028582371075691, "Stated by permuting": 0.11755105063023073, "multiplication": 0.14832923246533666, "minimized": 0.14832923246533666, "permuting the entries": 0.165573765898185, "Stated": 0.2790829227183407, "permuting": 0.37689977775222827, "entries": 0.37689977775222827}}, {"docstring": "A bounded function `u` is in particular eventually bounded.\n", "keywords": {"bounded function": 0.035552851931764155, "eventually bounded": 0.05913243875864445, "function": 0.11984314898676356, "bounded": 0.14323823713631006, "eventually": 0.19488865479360015}}, {"docstring": "**Alias** of left.mul_le_one`.\n", "keywords": {"Alias": 0.030396371632413578, "left.mul": 0.15831692877998726}}, {"docstring": "If `R` has characteristic `p`, then so does Frac(R).\n", "keywords": {"Frac": 0.057012387690331526, "characteristic": 0.09568045026443411}}, {"docstring": " The successive derivatives of the auxiliary function `f_aux 0` are the functions `f_aux n`, by induction.\n", "keywords": {"auxiliary function": 0.016122598444234554, "successive derivatives": 0.02114777441281124, "aux": 0.055127829619426576, "induction": 0.09713402394201612, "function": 0.11025565923885315, "functions": 0.11025565923885315, "successive": 0.14390902704051098, "derivatives": 0.14390902704051098, "auxiliary": 0.14390902704051098}}, {"docstring": "If no element satisfies `p` in the list `xs`, then `xs.split_on_p p = [xs]`\n", "keywords": {"element satisfies": 0.00899321792126428, "xs.split": 0.04491197687864554, "satisfies": 0.0771485953923296, "list": 0.0771485953923296, "element": 0.1155310835876123}}, {"docstring": "Cauchy\u2013Schwarz inequality for real inner products.\n", "keywords": {"Schwarz inequality": 0.026233073037508336, "Cauchy": 0.04491197687864554, "real inner products": 0.04940384002065631, "Schwarz": 0.08596317751626563, "inequality for real": 0.09700399286574239, "products": 0.15831692877998726, "inequality": 0.29736558256021506, "real": 0.29736558256021506}}, {"docstring": " **Strict inequality case of Rearrangement Inequality**: Pointwise scalar multiplication of `f` and `g`, which monovary together, is strictly decreased by a permutation if and only if `f` and `g \u2218 \u03c3` do not monovary together. Stated by permuting the entries of `g`.\n", "keywords": {"Strict inequality case": 0.0016376672505466826, "Pointwise scalar multiplication": 0.002200769509641363, "Strict inequality": 0.00866958983340238, "Pointwise scalar": 0.011561263824295709, "Rearrangement Inequality": 0.011712586350570936, "case of Rearrangement": 0.015634960653391074, "inequality case": 0.025703411153376713, "scalar multiplication": 0.03447074540170908, "strictly decreased": 0.03447074540170908, "Strict": 0.06261045944724858, "Pointwise": 0.06261045944724858, "inequality": 0.0686392828174212, "Rearrangement": 0.08433210096311344, "monovary": 0.08488187343535045, "Stated by permuting": 0.16944032286186908, "case": 0.18254344008272147, "scalar": 0.18254344008272147, "multiplication": 0.18254344008272147, "strictly": 0.18254344008272147, "decreased": 0.18254344008272147}}, {"docstring": "A more general version of `finsum_mem_union_inter` that requires `s \u2229 support f` and `t \u2229 support f` rather than `s` and `t` to be finite.\n", "keywords": {"general version": 0.033892441937102495, "support": 0.04046434749914615, "finsum": 0.052376395424323874, "mem": 0.052376395424323874, "union": 0.052376395424323874, "inter": 0.052376395424323874, "requires": 0.11060549338282699, "finite": 0.11060549338282699, "general": 0.18105634546484617, "version": 0.18105634546484617}}, {"docstring": "**Alias** of left.inv_le_one_iff`.\n", "keywords": {"Alias": 0.030396371632413578, "iff": 0.04491197687864554, "left.inv": 0.15831692877998726}}, {"docstring": " There exists a non-null vector with respect to any quadratic form `Q` whose associated bilinear form is non-zero, i.e. there exists `x` such that `Q x \u2260 0`.\n", "keywords": {"non-null vector": 0.037831312533597124, "vector with respect": 0.037831312533597124, "quadratic form": 0.0562460611896591, "bilinear form": 0.0562460611896591, "form is non-zero": 0.07553762682862881, "exists a non-null": 0.09464369245534064, "exists": 0.10586606907408062, "non-zero": 0.11718348279991213, "form": 0.13945519496053638, "non-null": 0.19092478917347616, "vector": 0.19092478917347616, "respect": 0.19092478917347616, "quadratic": 0.19092478917347616, "bilinear": 0.19092478917347616}}, {"docstring": " The diameter of a union is controlled by the diameter of the sets, and the edistance between two points in the sets.\n", "keywords": {"union is controlled": 0.01137117696571328, "sets": 0.030180843258257848, "diameter": 0.04020316170242024, "union": 0.10603455617644456, "controlled": 0.10603455617644456, "edistance": 0.10603455617644456, "points": 0.10603455617644456}}, {"docstring": " Composition of a local equiv and its inverse is equivalent to the restriction of the identity to the source\n", "keywords": {"local equiv": 0.013527995261974615, "inverse is equivalent": 0.013527995261974615, "Composition": 0.0771485953923296, "source": 0.0771485953923296, "local": 0.1155310835876123, "equiv": 0.1155310835876123, "inverse": 0.1155310835876123, "equivalent": 0.1155310835876123, "restriction": 0.1155310835876123, "identity": 0.1155310835876123}}, {"docstring": " A `comm_ring` `K` which is the localization of an integral domain `R` at `R - {0}` is an integral domain.\n", "keywords": {"integral domain": 0.007308209373897523, "domain": 0.04661236163529819, "comm": 0.05794058924527716, "ring": 0.05794058924527716, "integral": 0.07726414307411157, "localization": 0.19744254481508877}}, {"docstring": "The scalar quadruple product identity, related to the Binet-Cauchy identity.\n", "keywords": {"quadruple product identity": 0.005253288609899719, "scalar quadruple product": 0.007041919398291632, "product identity": 0.02681089848262901, "Binet-Cauchy identity": 0.02681089848262901, "scalar quadruple": 0.035715520099333646, "quadruple product": 0.035715520099333646, "identity": 0.07030442419566416, "related": 0.11369206228658875, "scalar": 0.18569843656348187, "quadruple": 0.18569843656348187, "product": 0.18569843656348187, "Binet-Cauchy": 0.18569843656348187}}, {"docstring": " For `1 \u2264 p`, the `p`-th power of the sum of `f i` is bounded above by a constant times the sum of the `p`-th powers of `f i`. Version for sums over finite sets, with `\u211d\u22650\u221e`-valued functions.\n", "keywords": {"constant times": 0.03065453152238551, "times the sum": 0.0800373255202259, "power": 0.12144818777261854, "powers": 0.12144818777261854, "valued functions": 0.12598900653789646, "sum": 0.1307314304533728, "finite sets": 0.16340264042637093, "bounded": 0.1724609536080282, "constant": 0.1724609536080282, "times": 0.1724609536080282, "Version for sums": 0.24922610265698694, "sums": 0.2614628609067456, "sums over finite": 0.30264025641507236, "Version": 0.33450240956426514, "sets": 0.33450240956426514, "valued": 0.33450240956426514, "functions": 0.33450240956426514, "finite": 0.4198844336613173}}, {"docstring": "A free module with a basis indexed by a `fintype` is finite.\n", "keywords": {"free module": 0.013527995261974615, "basis indexed": 0.013527995261974615, "fintype": 0.04491197687864554, "finite": 0.0771485953923296, "free": 0.1155310835876123, "module": 0.1155310835876123, "basis": 0.1155310835876123, "indexed": 0.1155310835876123}}, {"docstring": "  If an element `b` becomes right-regular after multiplying it on the right by a right-regular element, then `b` is right-regular.\n", "keywords": {"right-regular element": 0.04006891176196023, "element": 0.06626030218517898, "right-regular": 0.0969037914791671, "right-regular after multiplying": 0.14070433962090234, "multiplying": 0.1616313649453326}}, {"docstring": "`pow b` and `log b` (almost) form a Galois connection.\n", "keywords": {"form a Galois": 0.008293207122436794, "Galois connection": 0.008293207122436794, "Galois": 0.08596317751626563, "pow": 0.09568045026443411, "log": 0.09568045026443411, "form": 0.09568045026443411, "connection": 0.09568045026443411}}, {"docstring": "If a finset `u` is contained in the sum of two sets `s - t`, we can find two finsets `s'`, `t'` such that `s' \u2286 s`, `t' \u2286 t` and `u \u2286 s' - t'`.\n", "keywords": {"find two finsets": 0.020047210059068708, "finset": 0.0757224611147761, "finsets": 0.0757224611147761, "sets": 0.07692947664055963, "contained": 0.10187934809188742, "sum": 0.10187934809188742, "find": 0.10187934809188742}}, {"docstring": " **Strict inequality case of the Rearrangement Inequality**: Pointwise multiplication of `f` and `g`, which antivary together, is strictly decreased by a permutation if and only if `f` and `g \u2218 \u03c3` do not antivary together. Stated by permuting the entries of `g`.\n", "keywords": {"Strict inequality case": 0.0016642028270215602, "Strict inequality": 0.008747117210927207, "Pointwise multiplication": 0.011683623122683102, "Rearrangement Inequality": 0.011811652352352629, "inequality case": 0.02602119105438165, "strictly decreased": 0.03495776414940041, "Strict": 0.06283799353160062, "Pointwise": 0.06283799353160062, "inequality": 0.06899702012035523, "Rearrangement": 0.08459615986079659, "antivary": 0.08562916729374415, "Stated by permuting": 0.17147630665836236, "case": 0.1837851895373716, "multiplication": 0.1837851895373716, "strictly": 0.1837851895373716, "decreased": 0.1837851895373716, "permutation": 0.1837851895373716, "permuting the entries": 0.23851325396085266, "Stated": 0.3335528702481384, "permuting": 0.4388397201336416}}, {"docstring": "Every subgroup of `\u2124` is cyclic.\n", "keywords": {"cyclic": 0.15831692877998726, "subgroup": 0.29736558256021506}}, {"docstring": "`X` commutes with everything, even when the coefficients are noncommutative.\n", "keywords": {"coefficients are noncommutative": 0.04940384002065631, "commutes": 0.15831692877998726, "noncommutative": 0.15831692877998726, "coefficients": 0.29736558256021506}}, {"docstring": "A symmetric block matrix `A.from_blocks B C D` is diagonal    if  `A` and `D` are diagonal and `B` is `0`.\n", "keywords": {"symmetric block matrix": 0.00779694594409481, "A.from": 0.03585264365440632, "block matrix": 0.03672426843567709, "symmetric block": 0.06104740651975287, "matrix": 0.12156210109285605, "diagonal": 0.14570071893270706, "symmetric": 0.19744254481508877, "block": 0.2914014378654141, "blocks": 0.2914014378654141}}, {"docstring": "Jacobi identity: For a cross product of three vectors,    their sum over the three even permutations is equal to the zero vector.\n", "keywords": {"Jacobi identity": 0.012578992104256836, "cross product": 0.03439110359613085, "permutations is equal": 0.03439110359613085, "Jacobi": 0.11145728654016383, "identity": 0.11145728654016383, "vectors": 0.13679271555174932, "vector": 0.13679271555174932, "cross": 0.1823394614884183, "product": 0.1823394614884183, "sum": 0.1823394614884183, "permutations": 0.1823394614884183, "equal": 0.1823394614884183}}, {"docstring": " **Equality case of the Rearrangement Inequality**: Pointwise scalar multiplication of `f` and `g`, which antivary together, is unchanged by a permutation if and only if `f` and `g \u2218 \u03c3` antivary together. Stated by permuting the entries of `g`.\n", "keywords": {"Pointwise scalar multiplication": 0.0019254155628980188, "Rearrangement Inequality": 0.0050414360735746774, "Equality case": 0.010681703670791362, "Pointwise scalar": 0.010681703670791362, "scalar multiplication": 0.031040804666112243, "Equality": 0.060911257173420906, "Inequality": 0.060911257173420906, "Pointwise": 0.060911257173420906, "antivary": 0.07953440658135287, "Rearrangement": 0.08235173134587291, "Stated by permuting": 0.1549537691794176, "case": 0.17351161766281323, "scalar": 0.17351161766281323, "multiplication": 0.17351161766281323, "unchanged": 0.17351161766281323, "permutation": 0.17351161766281323, "permuting the entries": 0.21626281206510953, "Stated": 0.31817081130554614, "permuting": 0.42167437397336704, "entries": 0.42167437397336704}}, {"docstring": " If two partial refinements `v\u2081`, `v\u2082` belong to a chain (hence, they are comparable) and `i` belongs to the carriers of both partial refinements, then `v\u2081 i = v\u2082 i`.\n", "keywords": {"partial refinements": 0.0043455008519110265, "refinements": 0.034222909030694394, "partial": 0.06294116458067843, "chain": 0.08922538916412363, "comparable": 0.08922538916412363, "carriers": 0.12363091320521931, "belong": 0.12588232916135686, "belongs": 0.12588232916135686}}, {"docstring": " Write the iterated Fr\u00e9chet derivative as the composition of a continuous linear equiv and the iterated derivative.\n", "keywords": {"iterated Fr\u00e9chet derivative": 0.0021685808594799666, "continuous linear equiv": 0.002950351281893197, "iterated Fr\u00e9chet": 0.011000128179261149, "Write the iterated": 0.0141210054546179, "Fr\u00e9chet derivative": 0.014265107890262672, "continuous linear": 0.020225813225353943, "linear equiv": 0.020225813225353943, "iterated derivative": 0.02861065623655176, "iterated": 0.07334489383741181, "Fr\u00e9chet": 0.07417313840262335, "derivative": 0.094808423351325, "Write": 0.09492398510093508, "composition": 0.1408007092310104, "continuous": 0.1408007092310104, "linear": 0.1408007092310104, "equiv": 0.1408007092310104}}, {"docstring": " The order of a formal power series is exactly `n` if the `n`th coefficient is nonzero, and the `i`th coefficient is `0` for all `i < n`.\n", "keywords": {"formal power series": 0.00269253313269109, "coefficient is nonzero": 0.009478341963114085, "formal power": 0.01904688389482227, "power series": 0.01904688389482227, "coefficient": 0.05101428509898996, "nonzero": 0.09202664026077896, "order": 0.1367145963576765, "formal": 0.1367145963576765, "power": 0.1367145963576765, "series": 0.1367145963576765}}, {"docstring": "monotonicity of `\u2264` with respect to `\u2192`\n", "keywords": {"monotonicity": 0.15831692877998726, "respect": 0.29736558256021506}}, {"docstring": "The contrapositive of `list.nodup_iff_sublist`.\n", "keywords": {"list.nodup": 0.04491197687864554, "iff": 0.04491197687864554, "sublist": 0.04491197687864554, "contrapositive": 0.29736558256021506}}, {"docstring": " If a product of a `finset` of size at most 1 has a given value, so do the terms in that product.\n", "keywords": {"finset": 0.055708263664958506, "product": 0.094808423351325, "size": 0.1408007092310104, "terms": 0.1408007092310104}}, {"docstring": "`cyclotomic n \u211a` is the minimal polynomial of a primitive `n`-th root of unity `\u03bc`.\n", "keywords": {"root of unity": 0.015380821171891606, "minimal polynomial": 0.02570861714399338, "cyclotomic": 0.09568045026443411, "primitive": 0.09568045026443411, "unity": 0.09568045026443411, "minimal": 0.15831692877998726, "polynomial": 0.15831692877998726, "root": 0.15831692877998726}}, {"docstring": " The comap of the cocompact filter on `\u03b2` by a continuous function `f : \u03b1 \u2192 \u03b2` is less than or equal to the cocompact filter on `\u03b1`. This is a reformulation of the fact that images of compact sets are compact.\n", "keywords": {"cocompact filter": 0.006445737448513723, "continuous function": 0.019948614751785023, "cocompact": 0.05640788938657872, "filter": 0.05640788938657872, "function": 0.11956933951061942, "comap": 0.16357413056415673, "continuous": 0.16357413056415673, "equal": 0.16357413056415673, "fact that images": 0.195605644208659, "compact sets": 0.21639414430728257, "compact": 0.21990974511311018, "reformulation": 0.4044796838522386, "fact": 0.4044796838522386, "images": 0.4044796838522386, "sets": 0.4044796838522386, "images of compact": 0.4072120381550656, "sets are compact": 0.4072120381550656}}, {"docstring": "`F` is a function field over `Fq` iff it is a finite extension of `Fq(t)`.\n", "keywords": {"function field": 0.02570861714399338, "finite extension": 0.02570861714399338, "iff": 0.09568045026443411, "function": 0.15831692877998726, "field": 0.15831692877998726, "finite": 0.15831692877998726, "extension": 0.15831692877998726}}, {"docstring": "**Alias** of the forward direction of is_max_on_dual_iff`.\n", "keywords": {"forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "max": 0.04491197687864554, "dual": 0.04491197687864554, "iff": 0.04491197687864554, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "If there is an `r`-chain starting from `a` and ending at `b`, then `a` and `b` are related by the reflexive transitive closure of `r`. The converse of `exists_chain_of_relation_refl_trans_gen`.\n", "keywords": {"reflexive transitive closure": 0.005677237761441965, "reflexive transitive": 0.031040804666112243, "transitive closure": 0.031040804666112243, "chain starting": 0.036130890502720225, "chain": 0.1004859839593637, "starting": 0.17351161766281323, "ending": 0.17351161766281323, "related": 0.17351161766281323, "reflexive": 0.17351161766281323, "transitive": 0.17351161766281323, "closure": 0.17351161766281323, "exists": 0.20791243635202292, "relation": 0.20791243635202292, "refl": 0.20791243635202292, "trans": 0.20791243635202292, "gen": 0.20791243635202292, "converse": 0.42167437397336704}}, {"docstring": "**Alias** of sbtw_of_btw_not_btw`.\n", "keywords": {"btw": 0.021352745740207107, "Alias": 0.035514607549195436, "sbtw": 0.11984314898676356}}, {"docstring": " One implication of the portmanteau theorem: Weak convergence of finite measures implies that the limsup of the measures of any closed set is at most the measure of the closed set under the limit measure.\n", "keywords": {"finite measures implies": 0.001279889142323079, "Weak convergence": 0.00489901716548364, "closed set": 0.005182081129712687, "portmanteau theorem": 0.00857805869151267, "convergence of finite": 0.01095640000485738, "finite measures": 0.012042251221818165, "measures implies": 0.012042251221818165, "limit measure": 0.012042251221818165, "Weak": 0.0468294236719743, "closed": 0.05064051800601727, "set": 0.05064051800601727, "measures": 0.05714935282318629, "measure": 0.05714935282318629, "theorem": 0.08169806503303566, "implication": 0.10410407429858246, "portmanteau": 0.10410407429858246, "convergence": 0.10410407429858246, "finite": 0.10410407429858246, "implies": 0.10410407429858246, "limsup": 0.10410407429858246}}, {"docstring": "If a function has a Taylor series at order at least 1, then at points in the interior of the    domain of definition, the term of order 1 of this series is a strict derivative of `f`.\n", "keywords": {"Taylor series": 0.006800699220866311, "domain of definition": 0.007785112635212619, "strict derivative": 0.01033815036603184, "term of order": 0.030279377671229107, "Taylor": 0.057205872149083584, "series": 0.05903906243931906, "order": 0.05903906243931906, "series at order": 0.060586518716429116, "definition": 0.07636756015111258, "function": 0.10115516112043156, "points": 0.10115516112043156, "interior": 0.10115516112043156, "domain": 0.10115516112043156, "term": 0.10115516112043156, "strict": 0.10115516112043156, "derivative": 0.10115516112043156}}, {"docstring": "The product over `univ` of a sum can be written as a sum over the product of sets,  `fintype.pi_finset`. `finset.prod_sum` is an alternative statement when the product is not  over `univ`\n", "keywords": {"univ": 0.05384564569522227, "fintype.pi": 0.09151677397475798, "finset": 0.09151677397475798, "product": 0.11593007971752908, "sum": 0.12656987107283652, "sets": 0.15188533266438198, "product of sets": 0.15221105359008513, "written": 0.21864111904426214, "finset.prod": 0.2591835232703774, "alternative statement": 0.3208471999954998, "alternative": 0.4928591649229246, "statement": 0.4928591649229246}}, {"docstring": "The first projection in a product is `C^\u221e`.\n", "keywords": {"projection": 0.29736558256021506, "product": 0.29736558256021506}}, {"docstring": " If `R` is of characteristic `p` and `\u00acp \u2223 m`, then `cyclotomic (p ^ k * m) R = (cyclotomic m R) ^ (p ^ k - p ^ (k - 1))`.\n", "keywords": {"cyclotomic": 0.04219450044961737, "characteristic": 0.08280939275679769}}, {"docstring": "Assumes right covariance.\n", "keywords": {"Assumes right covariance": 0.02570861714399338, "Assumes": 0.15831692877998726, "covariance": 0.15831692877998726}}, {"docstring": "If a preconnected set contains endpoints of an interval, then it includes the whole interval.\n", "keywords": {"preconnected set": 0.03663237450220032, "set contains endpoints": 0.03663237450220032, "interval": 0.07162298286637953, "preconnected": 0.1879836817695587, "set": 0.1879836817695587, "endpoints": 0.1879836817695587, "includes": 0.1879836817695587}}, {"docstring": " If `M \u2264 N` are submonoids of `R`, then the natural map `M\u207b\u00b9S \u2192+* N\u207b\u00b9S` commutes with the localization maps\n", "keywords": {"natural map": 0.027673082137283082, "localization maps": 0.027673082137283082, "commutes": 0.11521656054299435, "map": 0.14324596573275905, "maps": 0.14324596573275905, "submonoids": 0.1879836817695587, "natural": 0.1879836817695587, "localization": 0.1879836817695587}}, {"docstring": " If all elements of a `finset` satisfy the predicate `p`, `s.subtype p` converts back to `s` with `embedding.subtype`.\n", "keywords": {"satisfy the predicate": 0.009239332327148086, "converts back": 0.015380821171891606, "finset": 0.04491197687864554, "embedding.subtype": 0.04491197687864554, "satisfy": 0.09568045026443411, "predicate": 0.09568045026443411, "s.subtype": 0.09568045026443411, "converts": 0.09568045026443411, "elements": 0.15831692877998726, "back": 0.15831692877998726}}, {"docstring": "If `f : \u2115 \u2192 \u03b1` has sum `a`, then the partial sums `\u2211_{i=0}^{n-1} f i` converge to `a`.\n", "keywords": {"partial sums": 0.03040783387545046, "converge": 0.11984314898676356, "sum": 0.15142227756780624, "sums": 0.15142227756780624, "partial": 0.19488865479360015}}, {"docstring": "**Alias** of the reverse direction of filter.principal_is_measurably_generated_iff`.\n", "keywords": {"direction of filter.principal": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "measurably": 0.04491197687864554, "generated": 0.04491197687864554, "iff": 0.04491197687864554, "filter.principal": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "If `p \u2224 a`, then `legendre_sym p a` is `1` or `-1`.\n", "keywords": {"legendre": 0.04491197687864554, "sym": 0.09568045026443411}}, {"docstring": " Composition of a continuous map with dense range and a function with dense range has dense range.\n", "keywords": {"dense range": 0.009832170463431489, "continuous map": 0.025890808665511578, "map with dense": 0.04276333205075055, "function with dense": 0.04276333205075055, "dense": 0.04964555523461969, "range": 0.06412433779697296, "Composition": 0.10783961123504282, "range has dense": 0.15017363270783904, "continuous": 0.15886280928376606, "map": 0.15886280928376606, "function": 0.15886280928376606}}, {"docstring": " A point is in an `Ioc` iff it can be expressed as a semistrict convex combination of the endpoints.\n", "keywords": {"semistrict convex combination": 0.0042542192213185686, "semistrict convex": 0.02570861714399338, "convex combination": 0.02570861714399338, "Ioc": 0.030396371632413578, "iff": 0.09568045026443411, "endpoints": 0.09568045026443411, "point": 0.15831692877998726, "expressed": 0.15831692877998726, "semistrict": 0.15831692877998726, "convex": 0.15831692877998726, "combination": 0.15831692877998726}}, {"docstring": "Given an add_monoid homomorphism `f : M \u2192+ N` and an element `x : M`, if `x` has a right inverse, then `f x` has a right inverse too.\n", "keywords": {"monoid homomorphism": 0.008779660572863317, "inverse": 0.07162298286637953, "add": 0.09329120537733218, "monoid": 0.09329120537733218, "homomorphism": 0.09329120537733218, "element": 0.09329120537733218}}, {"docstring": "The generators of the exterior algebra are disjoint from its scalars.\n", "keywords": {"exterior algebra": 0.02570861714399338, "algebra are disjoint": 0.02570861714399338, "scalars": 0.09568045026443411, "generators": 0.15831692877998726, "exterior": 0.15831692877998726, "algebra": 0.15831692877998726, "disjoint": 0.15831692877998726}}, {"docstring": "If ` x * y = a * p ^ n` where `p` is prime, then `x` and `y` can both be written  as the product of a power of `p` and a divisor of `a`.\n", "keywords": {"prime": 0.06844581806138879, "written": 0.09568045026443411, "product": 0.09568045026443411, "power": 0.09568045026443411, "divisor": 0.09568045026443411}}, {"docstring": "**Alias** of the reverse direction of is_bot_to_dual_iff`.\n", "keywords": {"reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "bot": 0.04491197687864554, "dual": 0.04491197687864554, "iff": 0.04491197687864554, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " If `edist (f n) (f (n+1))` is bounded by `C * 2^-n`, then the distance from `f 0` to the limit of `f` is bounded above by `2 * C`.\n", "keywords": {"edist": 0.055708263664958506, "bounded": 0.05815404476918013, "distance": 0.11718348279991213, "limit": 0.11718348279991213}}, {"docstring": "If the additive supports of `f` and `g` are finite, then the sum of `f i - g i` equals the sum of `f i` minus the sum of `g i`.\n", "keywords": {"equals the sum": 0.007246691631915269, "minus the sum": 0.007246691631915269, "additive supports": 0.015876462971787696, "sum": 0.026568936978197902, "finite": 0.09026273698178425, "equals": 0.09026273698178425, "minus": 0.09026273698178425, "additive": 0.1250133601147411, "supports": 0.1250133601147411}}, {"docstring": "**Alias** of the forward direction of odd_iff_exists_bit1`.\n", "keywords": {"direction of odd": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "exists": 0.04491197687864554, "odd": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "A rewrite lemma for `padic_val_nat p (q * r)` with conditions `q \u2260 0`, `r \u2260 0`.\n", "keywords": {"rewrite lemma": 0.02570861714399338, "padic": 0.04491197687864554, "val": 0.04491197687864554, "nat": 0.09568045026443411, "conditions": 0.09568045026443411, "rewrite": 0.15831692877998726, "lemma": 0.15831692877998726}}, {"docstring": " If `f^n x - x`, `n > 0`, is an integer number `m` for some point `x`, then `\u03c4 f = m / n`. On the circle this means that a map with a periodic orbit has a rational rotation number.\n", "keywords": {"integer number": 0.03832061041600143, "rational rotation number": 0.05360581647696429, "rotation number": 0.09758609362850307, "number": 0.1033267718872057, "point": 0.1221512649852118, "integer": 0.1785903903600119, "periodic orbit": 0.22714863390129153, "rational rotation": 0.22714863390129153, "circle": 0.4302357358329322, "map": 0.4302357358329322, "periodic": 0.4302357358329322, "orbit": 0.4302357358329322, "rational": 0.4302357358329322, "rotation": 0.4302357358329322}}, {"docstring": "`finset.noncomm_sum` is \u201cinjective\u201d in `f` if `f` maps into independent subgroups. This generalizes (one direction of) `add_subgroup.disjoint_iff_add_eq_zero`.\n", "keywords": {"maps into independent": 0.035823369414816786, "independent subgroups": 0.035823369414816786, "finset.noncomm": 0.07127359713294396, "sum": 0.07127359713294396, "injective": 0.07127359713294396, "add": 0.07170568664164803, "maps": 0.14724705908851674, "subgroups": 0.14724705908851674, "subgroup.disjoint": 0.2104440927400966, "iff": 0.2104440927400966, "independent": 0.2348735419198309, "generalizes": 0.3748840432180225, "direction": 0.5160054651028707}}, {"docstring": " Given a finite set `s` and an element `a \u2209 s`, the product of `f i` over `i \u2208 insert a s` equals `f a` times the product of `f i` over `i \u2208 s`.\n", "keywords": {"times the product": 0.006753527323813782, "finite set": 0.009180130876077282, "product": 0.041469149763563216, "equals": 0.05331699930238388, "set": 0.08088209179216702, "element": 0.08088209179216702, "insert": 0.08088209179216702, "times": 0.08088209179216702, "finite": 0.11246769819744627}}, {"docstring": "Law of cosines (cosine rule), vector angle form.\n", "keywords": {"vector angle form": 0.0025275806504392972, "vector angle": 0.021567786782198985, "angle form": 0.021567786782198985, "cosine rule": 0.031557281947372486, "Law of cosines": 0.0710891909196062, "Law": 0.11369206228658875, "rule": 0.11369206228658875, "vector": 0.11369206228658875, "form": 0.11369206228658875, "angle": 0.18569843656348187, "cosines": 0.2690767023266335, "cosine": 0.2690767023266335}}, {"docstring": " Dividing `a` by itself and then multiplying by itself results in `a` (whether or not `a` is zero).\n", "keywords": {"Dividing": 0.04491197687864554, "multiplying": 0.1155310835876123, "results": 0.1155310835876123}}, {"docstring": "Deprecated: use `fun_like.congr_fun` instead.\n", "keywords": {"fun": 0.021352745740207107, "Deprecated": 0.05706283858652404, "like.congr": 0.05706283858652404}}, {"docstring": " If a function is continuous on a set for some topologies, then it is continuous on the same set with respect to any coarser topology on the target space.\n", "keywords": {"target space": 0.013301486222606386, "function is continuous": 0.01490801077769086, "coarser topology": 0.01986718810864864, "continuous": 0.052621912705633725, "set with respect": 0.06283328817485677, "set": 0.09367462051261369, "topologies": 0.09405136374190334, "space": 0.09405136374190334, "function": 0.13957138628574278, "respect": 0.13957138628574278, "coarser": 0.13957138628574278, "topology": 0.13957138628574278, "target": 0.13957138628574278}}, {"docstring": "An `add_subgroup` is closed under inverse.\n", "keywords": {"add": 0.04491197687864554, "subgroup": 0.04491197687864554, "closed under inverse": 0.04940384002065631, "inverse": 0.15831692877998726, "closed": 0.29736558256021506}}, {"docstring": " To show a category is a `initial_mono_class` it suffices to show every morphism out of the initial object is a monomorphism.\n", "keywords": {"suffices to show": 0.02063316919723774, "initial object": 0.02685070135884219, "show a category": 0.049558570185640125, "show every morphism": 0.049558570185640125, "mono": 0.055174169687121036, "class": 0.055174169687121036, "show": 0.07242189318011968, "initial": 0.09367462051261369, "monomorphism": 0.09405136374190334, "category": 0.13957138628574278, "suffices": 0.13957138628574278, "morphism": 0.13957138628574278, "object": 0.13957138628574278}}, {"docstring": "The n-ary version of `set.mul_subset_mul`.\n", "keywords": {"set.mul": 0.04491197687864554, "subset": 0.04491197687864554, "mul": 0.04491197687864554, "n-ary version": 0.09700399286574239, "n-ary": 0.29736558256021506, "version": 0.29736558256021506}}, {"docstring": "Uniformizers are nonzero.\n", "keywords": {"Uniformizers are nonzero": 0.02570861714399338, "Uniformizers": 0.15831692877998726, "nonzero": 0.15831692877998726}}, {"docstring": "In the model space, the identity is in any maximal atlas.\n", "keywords": {"model space": 0.015380821171891606, "maximal atlas": 0.015380821171891606, "space": 0.09568045026443411, "atlas": 0.09568045026443411, "model": 0.15831692877998726, "identity": 0.15831692877998726, "maximal": 0.15831692877998726}}, {"docstring": " Weighted generalized mean inequality, version for two elements of `\u211d\u22650\u221e` and real exponents.\n", "keywords": {"Weighted generalized": 0.04940384002065631, "generalized mean inequality": 0.04940384002065631, "real exponents": 0.04940384002065631, "Weighted": 0.15831692877998726, "inequality": 0.15831692877998726, "version": 0.15831692877998726, "exponents": 0.15831692877998726, "generalized": 0.29736558256021506, "elements": 0.29736558256021506, "real": 0.29736558256021506}}, {"docstring": "Two elements are related by a congruence relation `c` iff they are represented by the same    element of the quotient by `c`.\n", "keywords": {"congruence relation": 0.012465543599998139, "elements are related": 0.05867165447781048, "relation": 0.09101163530720666, "iff": 0.09101163530720666, "related": 0.13528014248445303, "congruence": 0.13528014248445303, "represented": 0.13528014248445303, "quotient": 0.13528014248445303, "elements": 0.17954807775654547, "element": 0.17954807775654547}}, {"docstring": "Sum of a list of elements in a `subsemiring` is in the `subsemiring`.\n", "keywords": {"subsemiring": 0.020602899695743707, "list of elements": 0.037831312533597124, "Sum": 0.11718348279991213, "list": 0.19092478917347616, "elements": 0.19092478917347616}}, {"docstring": "A fixed point of `f` is a periodic point of `f` of any prescribed period.\n", "keywords": {"prescribed period": 0.013089923375762187, "fixed point": 0.020241076619814977, "periodic point": 0.020241076619814977, "point": 0.07162298286637953, "period": 0.09329120537733218, "fixed": 0.1384995633470844, "periodic": 0.1384995633470844, "prescribed": 0.1384995633470844}}, {"docstring": "The sum of entries in a row of Pascal's triangle\n", "keywords": {"Pascal triangle": 0.008293207122436794, "row of Pascal": 0.013797198203993007, "sum of entries": 0.02570861714399338, "Pascal": 0.08596317751626563, "triangle": 0.09568045026443411, "sum": 0.15831692877998726, "entries": 0.15831692877998726, "row": 0.15831692877998726}}, {"docstring": " A \"continuous induction principle\" for a closed interval: if a set `s` meets `[a, b]` on a closed subset, contains `a`, and for any `a \u2264 x < y \u2264 b`, `x \u2208 s`, the set `s \u2229 (x, y]` is not empty, then `[a, b] \u2286 s`.\n", "keywords": {"continuous induction principle": 0.0004022446002823217, "closed interval": 0.005127390457466708, "closed subset": 0.005127390457466708, "continuous induction": 0.005787763160008585, "induction principle": 0.005787763160008585, "set": 0.031028507901841126, "closed": 0.03706150995237497, "meets": 0.055174169687121036, "continuous": 0.06882119000615357, "principle": 0.06882119000615357, "interval": 0.06882119000615357, "subset": 0.06882119000615357, "empty": 0.06882119000615357, "induction": 0.08361462103586328}}, {"docstring": " In an infinite-dimensional normed space, there exists a sequence of points which are all bounded by `R` and at distance at least `1`. For a version not assuming `c` and `R`, see `exists_seq_norm_le_one_le_norm_sub`.\n", "keywords": {"infinite-dimensional normed space": 0.01072033765063219, "normed space": 0.03985444220279051, "infinite-dimensional normed": 0.0647213843491835, "sequence of points": 0.0647213843491835, "norm": 0.07682300082487513, "space": 0.1554527012770092, "seq": 0.22125774619993788, "exists": 0.23433876543145388, "infinite-dimensional": 0.246550513069643, "normed": 0.246550513069643, "sequence": 0.246550513069643, "points": 0.246550513069643, "bounded": 0.246550513069643, "distance": 0.246550513069643, "exists a sequence": 0.25329947348658116, "version not assuming": 0.2617398023141667, "assuming": 0.38997397536695666, "version": 0.5319420725534505}}, {"docstring": "Uses `left` co(ntra)variant.\n", "keywords": {"left": 0.04491197687864554, "ntra": 0.04491197687864554, "variant": 0.04491197687864554}}, {"docstring": "The coercions are respectively `int.cast`, `zmod.cast`, and `zmod.cast`.\n", "keywords": {"zmod.cast": 0.021352745740207107, "int.cast": 0.05706283858652404, "coercions": 0.19488865479360015}}, {"docstring": "The central binomial coefficient is the largest binomial coefficient.\n", "keywords": {"central binomial coefficient": 0.011782282943034048, "largest binomial coefficient": 0.011782282943034048, "binomial coefficient": 0.027200199006318638, "central binomial": 0.04771708711059453, "largest binomial": 0.04771708711059453, "binomial": 0.11357121248292479, "coefficient": 0.11357121248292479, "central": 0.2005079697193566, "largest": 0.2005079697193566}}, {"docstring": " A version of `pi.single_smul` for non-dependent functions. It is useful in cases Lean fails to apply `pi.single_smul`.\n", "keywords": {"non-dependent functions": 0.04220829187219763, "pi.single": 0.04605813218940234, "smul": 0.04605813218940234, "cases Lean fails": 0.15409535028882462, "functions": 0.1600514523587571, "cases Lean": 0.1903222395180181, "Lean fails": 0.1903222395180181, "version": 0.2530367690088724, "non-dependent": 0.2530367690088724, "fails to apply": 0.27432053812932977, "Lean": 0.295793911298683, "apply": 0.39823908368262456, "cases": 0.540549862748956, "fails": 0.540549862748956}}, {"docstring": " **Maximum modulus principle** on a closed ball: if `f : E \u2192 F` is continuous on a closed ball, is complex differentiable on the corresponding open ball, and the norm `\u2225f w\u2225` takes its maximum value on the open ball at its center, then the norm `\u2225f w\u2225` is constant on the closed ball.\n", "keywords": {"Maximum modulus principle": 0.0011368192129655571, "closed ball": 0.005983388799652149, "open ball": 0.01060734889578414, "modulus principle": 0.011176050893056054, "Maximum modulus": 0.012186046617281732, "complex differentiable": 0.014777274849889692, "ball": 0.03325698648816584, "closed": 0.035348241067269456, "norm": 0.03716806606131755, "Maximum": 0.04988393266957103, "open": 0.0624650222186929, "principle": 0.09159036435561972, "center": 0.09159036435561972, "modulus": 0.1206734721864547, "continuous": 0.1206734721864547, "complex": 0.1206734721864547, "differentiable": 0.1206734721864547, "constant": 0.1206734721864547}}, {"docstring": "We make this the simp lemma instead of `range_coe`. The reason is that if we write  for `s : set \u03b1` the function `coe : s \u2192 \u03b1`, then the inferred implicit arguments of `coe` are  `coe \u03b1 (\u03bb x, x \u2208 s)`.\n", "keywords": {"simp lemma": 0.032507734215156056, "coe": 0.05891136567594303, "range": 0.08748536059286677, "inferred implicit arguments": 0.12948373611388236, "make": 0.1774380243995947, "simp": 0.1774380243995947, "lemma": 0.1774380243995947, "inferred implicit": 0.2246591600839151, "implicit arguments": 0.2246591600839151, "set": 0.34222197787006525, "function": 0.34222197787006525, "reason": 0.42830628550293587, "write": 0.42830628550293587, "inferred": 0.42830628550293587, "implicit": 0.42830628550293587, "arguments": 0.42830628550293587}}, {"docstring": "Two elements `a` and `b` are add-regular if and only if both sums `a + b` and `b + a` are add-regular.\n", "keywords": {"add-regular": 0.07571113878390312, "elements": 0.09713402394201612, "sums": 0.09713402394201612}}, {"docstring": "**Alias** of the forward direction of inv_mul_lt_iff_lt_mul`.\n", "keywords": {"mul": 0.019648131954263418, "direction of inv": 0.021567786782198985, "Alias": 0.034278050535979626, "forward direction": 0.035715520099333646, "iff": 0.05393656033701752, "inv": 0.11369206228658875, "forward": 0.18569843656348187, "direction": 0.18569843656348187}}, {"docstring": "**Alias** of sq_sub_sq`.\n", "keywords": {"Alias": 0.030396371632413578}}, {"docstring": "Finset **stars and bars** for the case `n = 2`.\n", "keywords": {"stars and bars": 0.02570861714399338, "Finset": 0.04491197687864554, "stars": 0.15831692877998726, "bars": 0.15831692877998726, "case": 0.15831692877998726}}, {"docstring": " Let `g : \u03b3 \u2192 \u03b2` be an injective function and `f : \u03b2 \u2192 \u03b1` be a function from the codomain of `g` to a commutative monoid. Suppose that `f x = 1` outside of the range of `g`. Then the filters `at_top.map (\u03bb s, \u220f i in s, f (g i))` and `at_top.map (\u03bb s, \u220f i in s, f i)` coincide.  The additive version of this lemma is used to prove the equality `\u2211' x, f (g x) = \u2211' y, f y` under the same assumptions.\n", "keywords": {"commutative monoid": 0.01853915833510359, "injective function": 0.02143460980194663, "function": 0.06929049804221499, "top.map": 0.11331800594363892, "monoid": 0.12020179387143623, "injective": 0.15142630815467564, "codomain": 0.15142630815467564, "commutative": 0.15142630815467564, "prove the equality": 0.3173912004642562, "Suppose": 0.3218063264770338, "coincide": 0.3368308473196396, "additive version": 0.3810907373974294, "range": 0.3826252361172577, "filters": 0.4087469440330248, "equality": 0.45864539085179734, "assumptions": 0.45864539085179734, "additive": 0.5252947862497207, "version": 0.5252947862497207, "lemma": 0.5252947862497207, "prove": 0.5252947862497207}}, {"docstring": "A point `a` is in the closure of `s` iff all basis sets containing `a` intersect `s`.\n", "keywords": {"iff all basis": 0.00899321792126428, "basis sets": 0.013527995261974615, "intersect": 0.04491197687864554, "point": 0.0771485953923296, "iff": 0.0771485953923296, "closure": 0.1155310835876123, "basis": 0.1155310835876123, "sets": 0.1155310835876123}}, {"docstring": "The antidiagonal of `n` does not contain duplicate entries.\n", "keywords": {"duplicate entries": 0.04940384002065631, "entries": 0.15831692877998726, "antidiagonal": 0.29736558256021506, "duplicate": 0.29736558256021506}}, {"docstring": "If two nonzero vectors are equivalent, so are their negations.\n", "keywords": {"vectors are equivalent": 0.015380821171891606, "nonzero vectors": 0.02570861714399338, "equivalent": 0.09568045026443411, "negations": 0.09568045026443411, "nonzero": 0.15831692877998726, "vectors": 0.15831692877998726}}, {"docstring": "A compact set is bounded above\n", "keywords": {"compact set": 0.09700399286574239, "set is bounded": 0.09700399286574239, "compact": 0.29736558256021506, "set": 0.29736558256021506, "bounded": 0.29736558256021506}}, {"docstring": " Definition of `is_O` in terms of `is_O_with`. We record it in a lemma as `is_O` is irreducible.\n", "keywords": {"Definition": 0.08922538916412363, "terms": 0.12363091320521931, "irreducible": 0.25386721785551913, "record": 0.32883716426354986, "lemma": 0.32883716426354986}}, {"docstring": "recF is insensitive to the representation\n", "keywords": {"recF is insensitive": 0.04940384002065631, "recF": 0.15831692877998726, "representation": 0.15831692877998726, "insensitive": 0.29736558256021506}}, {"docstring": " If for each `x : \u03b1`, exactly one of `g \u2022 x`, `g : G`, belongs to a measurable set `s`, then `s` is a fundamental domain for the action of `G` on `\u03b1`.\n", "keywords": {"measurable set": 0.0065920978564317735, "fundamental domain": 0.009239332327148086, "belongs": 0.06844581806138879, "set": 0.06844581806138879, "measurable": 0.09568045026443411, "fundamental": 0.09568045026443411, "domain": 0.09568045026443411, "action": 0.09568045026443411}}, {"docstring": " All points have distance from the circumcenter equal to the circumradius.\n", "keywords": {"points have distance": 0.02570861714399338, "circumcenter equal": 0.02570861714399338, "circumradius": 0.09568045026443411, "points": 0.15831692877998726, "distance": 0.15831692877998726, "circumcenter": 0.15831692877998726, "equal": 0.15831692877998726}}, {"docstring": "The circumcenter lies in the affine span.\n", "keywords": {"affine span": 0.015380821171891606, "circumcenter lies": 0.02570861714399338, "span": 0.09568045026443411, "circumcenter": 0.15831692877998726, "lies": 0.15831692877998726, "affine": 0.15831692877998726}}, {"docstring": " The **extreme value theorem**: if a continuous function `f` tends to infinity away from compact sets, then it has a global minimum.\n", "keywords": {"extreme value theorem": 0.009239332327148086, "continuous function": 0.015380821171891606, "compact sets": 0.015380821171891606, "global minimum": 0.015380821171891606, "extreme": 0.09568045026443411, "theorem": 0.09568045026443411, "function": 0.09568045026443411, "sets": 0.09568045026443411, "minimum": 0.09568045026443411, "continuous": 0.15831692877998726, "compact": 0.15831692877998726, "global": 0.15831692877998726}}, {"docstring": " Useful lemma to show `x` generates a power basis: the powers of `x` less than the degree of `x`'s minimal polynomial are linearly independent.\n", "keywords": {"lemma to show": 0.011891118324371971, "linearly independent": 0.011891118324371971, "power basis": 0.015716788421000303, "minimal polynomial": 0.017798659388540475, "polynomial are linearly": 0.017798659388540475, "generates a power": 0.03815710246094349, "show": 0.08886407157392263, "generates": 0.08886407157392263, "basis": 0.08886407157392263, "independent": 0.08886407157392263, "lemma": 0.132239959875874, "degree": 0.132239959875874, "minimal": 0.132239959875874, "polynomial": 0.132239959875874, "linearly": 0.132239959875874, "power": 0.17412653906161007, "powers": 0.17412653906161007}}, {"docstring": " Given two finite disjoint sets `s` and `t`, the product of `f i` over `i \u2208 s \u222a t` equals the product of `f i` over `i \u2208 s` times the product of `f i` over `i \u2208 t`.\n", "keywords": {"finite disjoint sets": 0.0008393894251988401, "equals the product": 0.005121530309892729, "times the product": 0.005121530309892729, "disjoint sets": 0.008135445870728102, "finite disjoint": 0.010396529907707848, "product": 0.02134989394979851, "sets": 0.0795543981429962, "equals": 0.0795543981429962, "times": 0.0795543981429962, "finite": 0.10143744007623053, "disjoint": 0.10143744007623053}}, {"docstring": "The prime factorizations of coprime `a` and `b` are disjoint\n", "keywords": {"factorizations of coprime": 0.04940384002065631, "prime factorizations": 0.09700399286574239, "coprime": 0.15831692877998726, "disjoint": 0.15831692877998726, "prime": 0.29736558256021506, "factorizations": 0.29736558256021506}}, {"docstring": "Closure of a subfield `S` equals `S`.\n", "keywords": {"equals": 0.04491197687864554, "Closure": 0.09568045026443411, "subfield": 0.09568045026443411}}, {"docstring": "**Alias** of the forward direction of is_min_filter_dual_iff`.\n", "keywords": {"forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "min": 0.04491197687864554, "filter": 0.04491197687864554, "dual": 0.04491197687864554, "iff": 0.04491197687864554, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "An element of a DVR is irreducible iff it is a uniformizer, that is, generates the  maximal ideal of R\n", "keywords": {"DVR is irreducible": 0.007743432063478832, "generates the maximal": 0.00899321792126428, "irreducible iff": 0.013527995261974615, "maximal ideal": 0.013527995261974615, "DVR": 0.06650965107397505, "uniformizer": 0.0771485953923296, "generates": 0.0771485953923296, "element": 0.1155310835876123, "irreducible": 0.1155310835876123, "iff": 0.1155310835876123, "maximal": 0.1155310835876123, "ideal": 0.1155310835876123}}, {"docstring": "**Alias** of eq_of_ge_of_not_gt`.\n", "keywords": {"Alias": 0.030396371632413578}}, {"docstring": " **Tietze extension theorem** for real-valued bounded continuous maps, a version with a closed embedding and unbundled composition. If `e : C(X, Y)` is a closed embedding of a topological space into a normal topological space and `f : X \u2192\u1d47 \u211d` is a bounded continuous function, then there exists a bounded continuous function `g : Y \u2192\u1d47 \u211d` of the same norm such that `g \u2218 e = f`.\n", "keywords": {"Tietze extension theorem": 0.0009035827375307223, "bounded continuous maps": 0.0031828451127824606, "bounded continuous function": 0.003356802430508926, "real-valued bounded continuous": 0.003939712982044623, "Tietze extension": 0.007781213591916553, "bounded continuous": 0.009031849856260958, "extension theorem": 0.016147902544903107, "unbundled composition": 0.016147902544903107, "closed embedding": 0.01628973030239666, "continuous maps": 0.018820506771661458, "continuous function": 0.01955496215923884, "real-valued bounded": 0.023221065769282966, "normal topological space": 0.049983175704958346, "bounded": 0.05414050515415474, "continuous": 0.05414050515415474, "Tietze": 0.05526013746873904, "topological space": 0.05716986424701837, "embedding and unbundled": 0.06483834863580935, "closed": 0.08144512142577041, "embedding": 0.09684904467699873}}, {"docstring": "Sum of a multiset of elements in an `add_subgroup` of an `add_comm_group` is in the `add_subgroup`.\n", "keywords": {"add": 0.012616079950459014, "subgroup": 0.023264649583682996, "multiset of elements": 0.023478396598924825, "comm": 0.06037786452709367, "group": 0.06037786452709367, "Sum": 0.10252384836042068, "multiset": 0.15145892749810547, "elements": 0.15145892749810547}}, {"docstring": "The centroid as an affine combination over a `fintype`.\n", "keywords": {"fintype": 0.04491197687864554, "affine combination": 0.09700399286574239, "centroid": 0.29736558256021506, "affine": 0.29736558256021506, "combination": 0.29736558256021506}}, {"docstring": "The function `exp(x)/x^n` tends to `+\u221e` at `+\u221e`, for any natural number `n`\n", "keywords": {"natural number": 0.015380821171891606, "exp": 0.04491197687864554, "function": 0.09568045026443411, "number": 0.09568045026443411, "natural": 0.15831692877998726}}, {"docstring": "See https://proofwiki.org/wiki/Fibonacci_Number_in_terms_of_Smaller_Fibonacci_Numbers\n", "keywords": {}}, {"docstring": " To prove a proposition about a nonempty `s : finset \u03b1`, it suffices to show it holds for all singletons and that if it holds for nonempty `t : finset \u03b1`, then it also holds for the `finset` obtained by inserting an element in `t`.\n", "keywords": {"obtained by inserting": 0.011900346268469574, "prove a proposition": 0.016544083802593097, "suffices to show": 0.016544083802593097, "inserting an element": 0.016544083802593097, "finset": 0.023527707154080955, "show it holds": 0.02562682076710138, "holds for nonempty": 0.028055991785303415, "holds": 0.03651353437847909, "nonempty": 0.050243231435856815, "obtained": 0.09218570934002178, "prove": 0.12757284830373247, "proposition": 0.12757284830373247, "suffices": 0.12757284830373247, "show": 0.12757284830373247, "singletons": 0.12757284830373247, "inserting": 0.12757284830373247, "element": 0.12757284830373247}}, {"docstring": " Nonzero fractional ideals in a Dedekind domain are units.  This is also available as `_root_.mul_inv_cancel`, using the `comm_group_with_zero` instance defined below.\n", "keywords": {"Nonzero fractional ideals": 0.03356262313410168, "Dedekind domain": 0.0605689221549672, "Nonzero fractional": 0.07796891081290885, "domain are units": 0.07796891081290885, "fractional ideals": 0.1495930091794576, "Dedekind": 0.15831692877998726, "root": 0.17881754828257995, "mul": 0.17881754828257995, "inv": 0.17881754828257995, "cancel": 0.17881754828257995, "comm": 0.17881754828257995, "group": 0.17881754828257995, "Nonzero": 0.2005079697193566, "units": 0.2005079697193566, "fractional": 0.36073110501666333, "ideals": 0.36073110501666333, "domain": 0.36073110501666333, "instance defined": 0.4456055016437946, "instance": 0.46553351027698087, "defined": 0.6621399683957523}}, {"docstring": "A version of `measurable_sub_const` that assumes `has_measurable_add` instead of  `has_measurable_sub`. This can be nice to avoid unnecessary type-class assumptions.\n", "keywords": {"measurable": 0.01386697698957806, "const": 0.0818089342753849, "add": 0.0818089342753849, "unnecessary type-class assumptions": 0.12432728514372494, "assumes": 0.13673760491885523, "avoid unnecessary type-class": 0.17746395262536388, "type-class assumptions": 0.19623480154395043, "version": 0.19839312014049212, "nice to avoid": 0.2717231716913961, "avoid unnecessary": 0.2717231716913961, "unnecessary type-class": 0.2717231716913961, "assumptions": 0.3548890112331873, "nice": 0.46223949004159565, "avoid": 0.46223949004159565, "unnecessary": 0.46223949004159565, "type-class": 0.46223949004159565}}, {"docstring": "The map sending a congruence relation to its underlying binary relation is injective.\n", "keywords": {"underlying binary relation": 0.010130364612108918, "map sending": 0.034987023778306175, "sending a congruence": 0.034987023778306175, "underlying binary": 0.034987023778306175, "congruence relation": 0.051351238837580325, "binary relation": 0.051351238837580325, "relation is injective": 0.06956410889469503, "injective": 0.11246769819744627, "relation": 0.13282721021560867, "map": 0.18385948854246909, "sending": 0.18385948854246909, "congruence": 0.18385948854246909, "underlying": 0.18385948854246909, "binary": 0.18385948854246909}}, {"docstring": "**Alias** of filter.tendsto_at_bot_at_bot_iff_of_monotone`.\n", "keywords": {"bot": 0.02006098734604785, "Alias": 0.034588515384495436, "iff": 0.054709255964732355, "monotone": 0.054709255964732355, "filter.tendsto": 0.11521656054299435}}, {"docstring": " A \"continuous induction principle\" for a closed interval: if a set `s` meets `[a, b]` on a closed subset, contains `a`, and the set `s \u2229 [a, b)` has no maximal point, then `b \u2208 s`.\n", "keywords": {"continuous induction principle": 0.0004384562407322761, "closed interval": 0.005554639397919753, "closed subset": 0.005554639397919753, "continuous induction": 0.006174597635276308, "induction principle": 0.006174597635276308, "maximal point": 0.006174597635276308, "set": 0.03231531110234649, "closed": 0.03929965248611285, "meets": 0.054709255964732355, "continuous": 0.07027995752974672, "principle": 0.07027995752974672, "interval": 0.07027995752974672, "subset": 0.07027995752974672, "point": 0.07027995752974672, "induction": 0.08731800873187644, "maximal": 0.08731800873187644}}, {"docstring": "**Alias** of sq_nonneg`.\n", "keywords": {"Alias": 0.030396371632413578, "nonneg": 0.04491197687864554}}, {"docstring": "Haar measure of the frontier of a convex set is zero.\n", "keywords": {"Haar measure": 0.015380821171891606, "convex set": 0.02570861714399338, "Haar": 0.09568045026443411, "measure": 0.15831692877998726, "frontier": 0.15831692877998726, "convex": 0.15831692877998726, "set": 0.15831692877998726}}, {"docstring": "Shows that the integer parts of the stream are at least one.\n", "keywords": {"integer parts": 0.02570861714399338, "Shows": 0.09568045026443411, "integer": 0.15831692877998726, "parts": 0.15831692877998726, "stream": 0.15831692877998726}}, {"docstring": " If two derivations agree on `X i`, `i \u2208 s`, then they agree on all polynomials from `mv_polynomial.supported R s`.\n", "keywords": {"derivations agree": 0.04212793185246166, "agree": 0.10586606907408062, "polynomial.supported": 0.11718348279991213, "derivations": 0.19092478917347616, "polynomials": 0.19092478917347616}}, {"docstring": " `comap (algebra_map R S)` is a surjection from the max spec of `S` to max spec of `R`. `hP : (algebra_map R S).ker \u2264 P` is a slight generalization of the extension being injective\n", "keywords": {"max spec": 0.013961862319351996, "algebra": 0.048786899708232745, "spec": 0.07078087965808927, "map": 0.08061438164435375, "comap": 0.08277789341219716, "max": 0.09594812889846516, "extension being injective": 0.19982598141561259, "surjection": 0.2004414838583919, "ker": 0.23863984905110158, "slight generalization": 0.27652844496986745, "injective": 0.3578318841249809, "slight": 0.4654303048138128, "generalization": 0.4654303048138128, "extension": 0.4654303048138128}}, {"docstring": " If `f : \u03b1 \u2192 \u03b2` sends the measure `\u03bca` to `\u03bcb` and `g : \u03b3 \u2192 \u03b4` sends the measure `\u03bcc` to `\u03bcd`, then `prod.map f g` sends `\u03bca.prod \u03bcc` to `\u03bcb.prod \u03bcd`.\n", "keywords": {"sends the measure": 0.0067119294467338905, "sends": 0.028654392505421886, "measure": 0.04178797173006444, "prod.map": 0.10556226050272582, "\u03bca.prod": 0.10556226050272582, "\u03bcb.prod": 0.10556226050272582}}, {"docstring": "The `abs` function on `\u2102` is proper.\n", "keywords": {"abs": 0.04491197687864554, "function": 0.15831692877998726, "proper": 0.15831692877998726}}, {"docstring": " Rewriting equality in the dependent type `\u03a3 (a : composition n), composition a.length)` in non-dependent terms with lists, requiring that the blocks coincide.\n", "keywords": {"composition a.length": 0.014569465960316767, "Rewriting equality": 0.019743941211743603, "dependent type": 0.019743941211743603, "terms with lists": 0.019743941211743603, "blocks coincide": 0.019743941211743603, "non-dependent terms": 0.03277825745301808, "composition": 0.06606607740528617, "Rewriting": 0.10868092541297539, "type": 0.10868092541297539, "a.length": 0.10868092541297539, "lists": 0.10868092541297539, "requiring": 0.10868092541297539, "coincide": 0.10868092541297539, "equality": 0.1781514608044755, "dependent": 0.1781514608044755, "non-dependent": 0.1781514608044755, "terms": 0.1781514608044755, "blocks": 0.1781514608044755}}, {"docstring": "If a polynomial of degree 2 is always nonnegative, then its discriminant is nonpositive\n", "keywords": {"polynomial of degree": 0.015380821171891606, "discriminant is nonpositive": 0.015380821171891606, "degree": 0.09568045026443411, "nonnegative": 0.09568045026443411, "nonpositive": 0.09568045026443411, "polynomial": 0.15831692877998726, "discriminant": 0.15831692877998726}}, {"docstring": " An affine subspace constructed from a point and a direction contains that point.\n", "keywords": {"affine subspace constructed": 0.007321883374053632, "affine subspace": 0.03663237450220032, "subspace constructed": 0.03663237450220032, "point": 0.13667842094541144, "affine": 0.1879836817695587, "subspace": 0.1879836817695587, "constructed": 0.1879836817695587, "direction": 0.1879836817695587}}, {"docstring": "The inductive principle used to prove propositions about the elements of a quotient by a    congruence relation.\n", "keywords": {"congruence relation": 0.015380821171891606, "inductive principle": 0.02570861714399338, "prove propositions": 0.02570861714399338, "relation": 0.09568045026443411, "inductive": 0.15831692877998726, "principle": 0.15831692877998726, "prove": 0.15831692877998726, "propositions": 0.15831692877998726, "elements": 0.15831692877998726, "quotient": 0.15831692877998726, "congruence": 0.15831692877998726}}, {"docstring": " The supremum of a family of commutative additive submonoids is equal to the range of `dfinsupp.sum_add_hom`; that is, every element in the `supr` can be produced from taking a finite number of non-zero elements of `S i`, coercing them to `\u03b3`, and summing them.\n", "keywords": {"commutative additive submonoids": 0.0008424396044743023, "family of commutative": 0.008850183953515773, "commutative additive": 0.008850183953515773, "additive submonoids": 0.008850183953515773, "submonoids is equal": 0.008850183953515773, "produced from taking": 0.008850183953515773, "taking a finite": 0.008850183953515773, "finite number": 0.008850183953515773, "number of non-zero": 0.008850183953515773, "non-zero elements": 0.010036419331802396, "dfinsupp.sum": 0.0500842937933616, "add": 0.0500842937933616, "hom": 0.0500842937933616, "supr": 0.0500842937933616, "coercing": 0.07056630705449163, "supremum": 0.0936618669136407, "family": 0.0936618669136407, "commutative": 0.0936618669136407, "additive": 0.0936618669136407, "submonoids": 0.0936618669136407}}, {"docstring": "If `q \u2260 0`, then `padic_norm p q \u2260 0`.\n", "keywords": {"padic": 0.04491197687864554, "norm": 0.09568045026443411}}, {"docstring": "The categorical notion of projective object agrees with the explicit module-theoretic notion.\n", "keywords": {"projective object agrees": 0.006822309199625383, "explicit module-theoretic notion": 0.01013036461210892, "projective object": 0.03498702377830618, "object agrees": 0.03498702377830618, "explicit module-theoretic": 0.03498702377830618, "categorical notion": 0.05135123883758033, "module-theoretic notion": 0.05135123883758033, "notion of projective": 0.11245662598947329, "notion": 0.13282721021560867, "categorical": 0.1838594885424691, "projective": 0.1838594885424691, "object": 0.1838594885424691, "agrees": 0.1838594885424691, "explicit": 0.1838594885424691, "module-theoretic": 0.1838594885424691}}, {"docstring": "The category of R-modules has kernels, given by the inclusion of the kernel submodule.\n", "keywords": {"category of R-modules": 0.010288589410371531, "kernel submodule": 0.017599084419657855, "R-modules has kernels": 0.033573873566541165, "R-modules": 0.07352956284046248, "submodule": 0.09329120537733218, "category": 0.1384995633470844, "inclusion": 0.1384995633470844, "kernels": 0.1853841766790467, "kernel": 0.1853841766790467}}, {"docstring": "A subsemiring is closed under addition.\n", "keywords": {"closed under addition": 0.04940384002065631, "subsemiring is closed": 0.09700399286574239, "addition": 0.15831692877998726, "subsemiring": 0.29736558256021506, "closed": 0.29736558256021506}}, {"docstring": " If `f` is a H\u00f6lder continuous map with exponent `r > 0`, then the Hausdorff dimension of its range is at most the Hausdorff dimension of its domain divided by `r`.\n", "keywords": {"H\u00f6lder continuous map": 0.0036178569051186194, "Hausdorff dimension": 0.005554209217562058, "H\u00f6lder continuous": 0.01819280626056972, "map with exponent": 0.022484625344159365, "continuous map": 0.03718843747800602, "domain divided": 0.03718843747800602, "Hausdorff": 0.037924917031700145, "dimension": 0.0724218931801197, "H\u00f6lder": 0.09436143525868045, "exponent": 0.1161324896811994, "continuous": 0.18935428276389019, "map": 0.18935428276389019, "range": 0.18935428276389019, "domain": 0.18935428276389019, "divided": 0.18935428276389019}}, {"docstring": "If a nondegenerate configuration has at least as many points as lines, then there exists  an injective function `f` from lines to points, such that `f l` does not lie on `l`.\n", "keywords": {"injective function": 0.022885248721446715, "nondegenerate configuration": 0.037831312533597124, "exists an injective": 0.037831312533597124, "function": 0.11718348279991213, "points": 0.13945519496053638, "lines": 0.13945519496053638, "nondegenerate": 0.19092478917347616, "configuration": 0.19092478917347616, "exists": 0.19092478917347616, "injective": 0.19092478917347616, "lie": 0.19092478917347616, "points as lines": 0.25578024704229213, "lines to points": 0.25578024704229213}}, {"docstring": " Lagrange multipliers theorem: if `\u03c6 : E \u2192 \u211d` has a local extremum on the set `{x | f x = f x\u2080}` at `x\u2080`, and both `f : E \u2192 \u211d` and `\u03c6` are strictly differentiable at `x\u2080`, then there exist `a b : \u211d` such that `(a, b) \u2260 0` and `a \u2022 f' + b \u2022 \u03c6' = 0`.\n", "keywords": {"Lagrange multipliers theorem": 0.00034425638182974976, "Lagrange multipliers": 0.005380746843605012, "multipliers theorem": 0.005380746843605012, "local extremum": 0.00717258304785508, "strictly differentiable": 0.00717258304785508, "Lagrange": 0.06341998722529081, "theorem": 0.06341998722529081, "set": 0.06341998722529081, "exist": 0.06341998722529081, "multipliers": 0.08438900089923473, "local": 0.08438900089923473, "extremum": 0.08438900089923473, "strictly": 0.08438900089923473, "differentiable": 0.08438900089923473}}, {"docstring": "If a matrix has a repeated column, the determinant will be zero.\n", "keywords": {"repeated column": 0.015380821171891606, "column": 0.09568045026443411, "matrix": 0.15831692877998726, "repeated": 0.15831692877998726, "determinant": 0.15831692877998726}}, {"docstring": "If `x^n = 1`, but `x^(n/p) \u2260 1` for all prime factors `p` of `r`, then `x` has order `n` in `G`.\n", "keywords": {"prime factors": 0.00899321792126428, "factors": 0.0771485953923296, "order": 0.0771485953923296, "prime": 0.1155310835876123}}, {"docstring": "The `add_submonoid` generated by an element of an `add_monoid` equals the set of natural number multiples of the element.\n", "keywords": {"natural number multiples": 0.0028031323823187906, "equals the set": 0.013089923375762187, "set of natural": 0.019557279302732804, "natural number": 0.019557279302732804, "number multiples": 0.019557279302732804, "add": 0.02006098734604785, "submonoid": 0.054709255964732355, "monoid": 0.054709255964732355, "element": 0.09269208833952335, "generated": 0.09329120537733218, "equals": 0.09329120537733218, "set": 0.1384995633470844, "natural": 0.1384995633470844, "number": 0.1384995633470844, "multiples": 0.1384995633470844}}, {"docstring": "Spheres are bounded\n", "keywords": {"Spheres are bounded": 0.02570861714399338, "Spheres": 0.15831692877998726, "bounded": 0.15831692877998726}}, {"docstring": "The lower central series of a group is a descending central series.\n", "keywords": {"lower central series": 0.011041420469275918, "descending central series": 0.011041420469275918, "central series": 0.02595416362410219, "lower central": 0.045872129360315365, "descending central": 0.045872129360315365, "central": 0.11107071682746067, "series": 0.11107071682746067, "lower": 0.19744254481508877, "group": 0.19744254481508877, "descending": 0.19744254481508877}}, {"docstring": " Show that the response for right provided by `right_response` preserves the right-player-wins condition.\n", "keywords": {"condition": 0.05393656033701752, "Show": 0.11369206228658875, "preserves": 0.11369206228658875, "response": 0.13453835116331675, "provided": 0.18569843656348187}}, {"docstring": " The polar `polar \ud835\udd5c s` of a set `s : E` is a closed subset when the weak star topology is used.\n", "keywords": {"weak star topology": 0.006822309199625383, "closed subset": 0.03498702377830618, "weak star": 0.03498702377830618, "star topology": 0.03498702377830618, "set": 0.11246769819744629, "polar": 0.13282721021560867, "closed": 0.1838594885424691, "subset": 0.1838594885424691, "weak": 0.1838594885424691, "star": 0.1838594885424691, "topology": 0.1838594885424691}}, {"docstring": " There exists only one solution of an ODE \\(\\dot x=v(t, x)\\) with a given initial value provided that RHS is Lipschitz continuous in `x`.\n", "keywords": {"RHS is Lipschitz": 0.00444318827900726, "provided that RHS": 0.007743432063478832, "Lipschitz continuous": 0.007743432063478832, "initial value provided": 0.013527995261974615, "ODE": 0.04776309965539685, "RHS": 0.06650965107397505, "Lipschitz": 0.06650965107397505, "dot": 0.0771485953923296, "exists": 0.1155310835876123, "solution": 0.1155310835876123, "initial": 0.1155310835876123, "provided": 0.1155310835876123, "continuous": 0.1155310835876123}}, {"docstring": "A function is `C^(n + 1)` if and only if it is differentiable,  and its derivative (formulated in terms of `deriv`) is `C^n`.\n", "keywords": {"formulated in terms": 0.00899321792126428, "deriv": 0.04491197687864554, "differentiable": 0.0771485953923296, "derivative": 0.0771485953923296, "formulated": 0.0771485953923296, "function": 0.1155310835876123, "terms": 0.1155310835876123}}, {"docstring": "`cyclotomic n` is primitive.\n", "keywords": {"cyclotomic": 0.15831692877998726, "primitive": 0.15831692877998726}}, {"docstring": "The set difference of a compact set and an open set is a compact set.\n", "keywords": {"compact set": 0.014316299993846135, "set difference": 0.03466979769927926, "open set": 0.03466979769927926, "compact": 0.05775910548065407, "set": 0.06024070644806414, "difference": 0.1390591235647482, "open": 0.1390591235647482}}, {"docstring": "An explicit description of `\u03c7\u2088` on integers / naturals\n", "keywords": {"naturals": 0.04491197687864554, "explicit description": 0.09700399286574239, "integers": 0.15831692877998726, "explicit": 0.29736558256021506, "description": 0.29736558256021506}}, {"docstring": "Two substructures are equal if they have the same elements.\n", "keywords": {"substructures are equal": 0.09700399286574239, "elements": 0.15831692877998726, "substructures": 0.29736558256021506, "equal": 0.29736558256021506}}, {"docstring": " The order of the `\u2194` has been chosen so that `rw sbtw_cyclic` cycles to the right while `rw \u2190sbtw_cyclic` cycles to the left (thus following the prepended arrow).\n", "keywords": {"prepended arrow": 0.008738307654480722, "cyclic": 0.021671764809268954, "cycles": 0.030623319316313288, "sbtw": 0.04077981936982048, "left": 0.08093438251860743, "arrow": 0.08093438251860743, "order": 0.10703252219984087, "chosen": 0.10703252219984087, "prepended": 0.10703252219984087}}, {"docstring": "`monge_point_vsub_face_centroid_weights_with_circumcenter` sums to 0.\n", "keywords": {"monge": 0.04491197687864554, "point": 0.04491197687864554, "vsub": 0.04491197687864554, "face": 0.04491197687864554, "centroid": 0.04491197687864554, "weights": 0.04491197687864554, "circumcenter": 0.04491197687864554, "sums": 0.15831692877998726}}, {"docstring": "The topology given by the closure operator `J.close` on a Grothendieck topology is the same as `J`.\n", "keywords": {"closure operator": 0.013089923375762187, "Grothendieck topology": 0.013819595378686359, "J.close": 0.034588515384495436, "Grothendieck": 0.07352956284046248, "topology": 0.09269208833952335, "operator": 0.09329120537733218, "closure": 0.1384995633470844}}, {"docstring": "The first modified cyclotomic polyomial is `X - 1`.\n", "keywords": {"modified cyclotomic polyomial": 0.03339840940482845, "modified cyclotomic": 0.09700399286574239, "cyclotomic polyomial": 0.09700399286574239, "modified": 0.29736558256021506, "cyclotomic": 0.29736558256021506, "polyomial": 0.29736558256021506}}, {"docstring": " **Equality case of Rearrangement Inequality**: Pointwise scalar multiplication of `f` and `g`, which monovary together, is unchanged by a permutation if and only if `f` and `g \u2218 \u03c3` monovary together. Stated by permuting the entries of `g`.\n", "keywords": {"Pointwise scalar multiplication": 0.0019254155628980188, "Rearrangement Inequality": 0.0050414360735746774, "Equality case": 0.010681703670791362, "Pointwise scalar": 0.010681703670791362, "case of Rearrangement": 0.0144961168780819, "scalar multiplication": 0.031040804666112243, "Equality": 0.060911257173420906, "Inequality": 0.060911257173420906, "Pointwise": 0.060911257173420906, "monovary": 0.07953440658135287, "Rearrangement": 0.08235173134587291, "Stated by permuting": 0.1549537691794176, "case": 0.17351161766281323, "scalar": 0.17351161766281323, "multiplication": 0.17351161766281323, "unchanged": 0.17351161766281323, "permutation": 0.17351161766281323, "permuting the entries": 0.21626281206510953, "Stated": 0.31817081130554614, "permuting": 0.42167437397336704}}, {"docstring": "Product of elements of a subring of a `comm_ring` indexed by a `finset` is in the    subring.\n", "keywords": {"Product of elements": 0.012465543599998139, "comm": 0.05331699930238388, "ring": 0.05331699930238388, "finset": 0.05331699930238388, "subring": 0.08977403887827273, "Product": 0.09101163530720666, "indexed": 0.09101163530720666, "elements": 0.135280142484453}}, {"docstring": " This holds for all integral domains (see `matrix.exists_mul_vec_eq_zero_iff`), not just fields, but it's easier to prove it for the field of fractions first.\n", "keywords": {"integral domains": 0.019943439662486344, "easier to prove": 0.033100028790236186, "matrix.exists": 0.051687907611449965, "mul": 0.051687907611449965, "vec": 0.051687907611449965, "iff": 0.051687907611449965, "field of fractions": 0.10620858116989315, "domains": 0.10923981997294611, "holds": 0.17899586521379354, "integral": 0.17899586521379354, "easier": 0.17899586521379354, "prove": 0.17899586521379354, "fractions": 0.17899586521379354, "fields": 0.25669633741402476, "field": 0.25669633741402476}}, {"docstring": "Given finite sets `s` and `t`, the sum of `f i` over `i \u2208 s \u222a t` plus the sum of `f i` over `i \u2208 s \u2229 t` equals the sum of `f i` over `i \u2208 s` plus the sum of `f i` over `i \u2208 t`.\n", "keywords": {"equals the sum": 0.004940419744866268, "finite sets": 0.008263395658745504, "sum": 0.01494096786693015, "sets": 0.08225926247052373, "equals": 0.08225926247052373, "finite": 0.09963220354319292}}, {"docstring": " The seminorm of an element in a product space is `< r` if and only if the norm of each component is.\n", "keywords": {"product space": 0.02570861714399338, "seminorm": 0.15831692877998726, "element": 0.15831692877998726, "product": 0.15831692877998726, "space": 0.15831692877998726, "norm": 0.15831692877998726, "component": 0.15831692877998726}}, {"docstring": "Over a ring `R` of characteristic zero, `\u03bb n, cyclotomic n R` is injective.\n", "keywords": {"ring": 0.09568045026443411, "cyclotomic": 0.09568045026443411, "injective": 0.09568045026443411, "characteristic": 0.15831692877998726}}, {"docstring": " If a map between pseudometric spaces is a uniform embedding then the distance between `f x` and `f y` is controlled in terms of the distance between `x` and `y`.\n", "keywords": {"map between pseudometric": 0.018310930906343142, "pseudometric spaces": 0.018310930906343142, "uniform embedding": 0.018310930906343142, "controlled in terms": 0.018310930906343142, "distance": 0.04956935957632033, "map": 0.13409574860218185, "pseudometric": 0.13409574860218185, "spaces": 0.13409574860218185, "uniform": 0.13409574860218185, "embedding": 0.13409574860218185, "controlled": 0.13409574860218185, "terms": 0.13409574860218185}}, {"docstring": "Introduction rule to prove that `b` is the infimum of `s`: it suffices to check that `b` is smaller than all elements of `s`, and that this is not the case of any `w>b`. See `Inf_eq_of_forall_ge_of_forall_gt_exists_lt` for a version in complete lattices.\n", "keywords": {"Introduction rule": 0.012544939971126365, "rule to prove": 0.016562276936031732, "suffices to check": 0.016562276936031732, "forall": 0.0696073264253005, "Introduction": 0.09706468591500717, "complete lattices": 0.10083679712893848, "rule": 0.12764183123541892, "prove": 0.12764183123541892, "infimum": 0.12764183123541892, "suffices": 0.12764183123541892, "check": 0.12764183123541892, "smaller": 0.12764183123541892, "elements": 0.12764183123541892, "case": 0.12764183123541892, "version in complete": 0.12807296918403185, "exists": 0.205890188530506, "lattices": 0.27185414680683095, "version": 0.336945873981842, "complete": 0.336945873981842}}, {"docstring": "The upper shadow of the empty set is empty.\n", "keywords": {"upper shadow": 0.037831312533597124, "empty set": 0.0562460611896591, "set is empty": 0.12194096740933036, "empty": 0.13945519496053638, "upper": 0.19092478917347616, "shadow": 0.19092478917347616, "set": 0.19092478917347616}}, {"docstring": "The intersection of a compact set and a closed set is a compact set.\n", "keywords": {"compact set": 0.015618870638040105, "closed set": 0.03886819368026632, "compact": 0.06413440160927163, "set": 0.07871881127264589, "intersection": 0.15842879763921927, "closed": 0.15842879763921927}}, {"docstring": "Baire theorem: the intersection of two dense G\u03b4 sets is dense.\n", "keywords": {"Baire theorem": 0.013453448411345069, "Baire": 0.11521656054299435, "theorem": 0.11521656054299435, "dense G\u03b4 sets": 0.1179331082419386, "sets is dense": 0.11793310824193863, "dense": 0.13667842094541144, "intersection": 0.1879836817695587, "sets": 0.1879836817695587}}, {"docstring": " Alternatizing a multilinear map that is already alternating results in a scale factor of `n!`, where `n` is the number of inputs.\n", "keywords": {"Alternatizing a multilinear": 0.015380821171891606, "number of inputs": 0.015380821171891606, "multilinear map": 0.02570861714399338, "alternating results": 0.02570861714399338, "scale factor": 0.02570861714399338, "Alternatizing": 0.09568045026443411, "inputs": 0.09568045026443411, "multilinear": 0.15831692877998726, "map": 0.15831692877998726, "alternating": 0.15831692877998726, "results": 0.15831692877998726, "scale": 0.15831692877998726, "factor": 0.15831692877998726, "number": 0.15831692877998726}}, {"docstring": "`padic_val_int p 0` is 0 for any `p`.\n", "keywords": {"padic": 0.04491197687864554, "val": 0.04491197687864554, "int": 0.09568045026443411}}, {"docstring": "The 0 of the quotient of an `add_monoid` by an additive congruence relation is the equivalence class of the `add_monoid`'s 0.\n", "keywords": {"additive congruence relation": 0.0016726844279478638, "additive congruence": 0.013923161052069546, "congruence relation": 0.013923161052069546, "equivalence class": 0.013923161052069546, "add": 0.020602899695743707, "monoid": 0.020602899695743707, "quotient": 0.11718348279991213, "additive": 0.11718348279991213, "congruence": 0.11718348279991213, "relation": 0.11718348279991213, "equivalence": 0.11718348279991213, "class": 0.11718348279991213}}, {"docstring": " The diameter of a union is controlled by the sum of the diameters, and the distance between any two points in each of the sets. This lemma is true without any side condition, since it is obviously true if `s \u222a t` is unbounded.\n", "keywords": {"union is controlled": 0.019466893266031477, "sets": 0.10538752815290522, "side condition": 0.11588876317377503, "diameter": 0.11801984138419522, "diameters": 0.11801984138419522, "union": 0.13818527286514595, "controlled": 0.13818527286514595, "sum": 0.13818527286514595, "distance": 0.13818527286514595, "points": 0.13818527286514595, "true": 0.1851752904075755, "condition": 0.29034507216173455, "unbounded": 0.29034507216173455, "lemma is true": 0.29866436524374446, "lemma": 0.35768931264291, "side": 0.35768931264291}}, {"docstring": "A monotone function on a sup-semilattice is directed.\n", "keywords": {"sup-semilattice is directed": 0.015380821171891606, "monotone function": 0.02570861714399338, "directed": 0.09568045026443411, "monotone": 0.15831692877998726, "function": 0.15831692877998726, "sup-semilattice": 0.15831692877998726}}, {"docstring": " If `f` is continuous multilinear, then `f (\u03a3_{j\u2081} g\u2081 j\u2081, ..., \u03a3_{j\u2099} g\u2099 j\u2099)` is the sum of `f (g\u2081 (r 1), ..., g\u2099 (r n))` where `r` ranges over all functions `r`. This follows from multilinearity by expanding successively with respect to each coordinate.\n", "keywords": {"continuous multilinear": 0.011154056927717123, "multilinear": 0.08922538916412363, "ranges": 0.08922538916412363, "functions": 0.08922538916412363, "multilinearity by expanding": 0.12124452117740256, "expanding successively": 0.12124452117740256, "successively with respect": 0.12124452117740256, "continuous": 0.12363091320521931, "sum": 0.12363091320521931, "coordinate": 0.25386721785551913, "multilinearity": 0.32883716426354986, "expanding": 0.32883716426354986, "successively": 0.32883716426354986, "respect": 0.32883716426354986}}, {"docstring": "A continuous function with compact support has a global minimum.\n", "keywords": {"global minimum": 0.015380821171891606, "continuous function": 0.02570861714399338, "function with compact": 0.02570861714399338, "compact support": 0.02570861714399338, "minimum": 0.09568045026443411, "continuous": 0.15831692877998726, "function": 0.15831692877998726, "compact": 0.15831692877998726, "support": 0.15831692877998726, "global": 0.15831692877998726}}, {"docstring": " Euclid's lemma: if `a \u2223 b * c` and `gcd a c = 1` then `a \u2223 b`. Compare with `is_coprime.dvd_of_dvd_mul_left` and `unique_factorization_monoid.dvd_of_dvd_mul_left_of_no_prime_factors`\n", "keywords": {"Euclid lemma": 0.017567419131441008, "dvd": 0.08016670556001776, "mul": 0.08016670556001776, "left": 0.08016670556001776, "Euclid": 0.13139304727920198, "lemma": 0.13139304727920198, "gcd": 0.13139304727920198, "coprime.dvd": 0.22810824333536373, "unique": 0.22810824333536373, "factorization": 0.22810824333536373, "monoid.dvd": 0.22810824333536373, "prime": 0.22810824333536373, "factors": 0.22810824333536373, "Compare": 0.3444196796358625}}, {"docstring": "`nndist x x` vanishes\n", "keywords": {"vanishes": 0.04491197687864554, "nndist": 0.09568045026443411}}, {"docstring": "image2 is monotone with respect to `\u2286`.\n", "keywords": {"monotone with respect": 0.09700399286574239, "monotone": 0.29736558256021506, "respect": 0.29736558256021506}}, {"docstring": "A variant of `finset.mul_prod_erase` with the multiplication swapped.\n", "keywords": {"finset.mul": 0.04491197687864554, "prod": 0.04491197687864554, "erase": 0.04491197687864554, "multiplication swapped": 0.04940384002065631, "swapped": 0.15831692877998726, "variant": 0.29736558256021506, "multiplication": 0.29736558256021506}}, {"docstring": " If a function `f` is twice differentiable on a open convex set `D \u2286 \u211d` and `f''` is nonnegative on `D`, then `f` is convex on `D`.\n", "keywords": {"open convex set": 0.002411270598783175, "convex set": 0.017047117983997207, "open convex": 0.025536557885239508, "convex": 0.09106811155038866, "function": 0.09202664026077896, "set": 0.09202664026077896, "differentiable": 0.1367145963576765, "open": 0.1367145963576765, "nonnegative": 0.1367145963576765}}, {"docstring": " If `\u03b1` is a separable topological space with a partial order, then there exists a countable dense set `s : set \u03b1` that contains those of both bottom and top elements of `\u03b1` that actually exist. For a dense set containing neither bot nor top elements, see `exists_countable_dense_no_bot_top`.\n", "keywords": {"separable topological space": 0.00834228501715342, "partial order": 0.029146768486219138, "separable topological": 0.03987134040705828, "topological space": 0.03987134040705828, "countable dense set": 0.04868198351761121, "top elements": 0.05099795972220941, "dense set": 0.059316816221815116, "dense": 0.10855222337853634, "set": 0.10855222337853634, "top": 0.10855222337853634, "countable dense": 0.12512900135250093, "elements": 0.142106138168238, "order": 0.1446346946443789, "countable": 0.17075195538441992, "bottom and top": 0.1849303146531009, "separable": 0.1958125908052999, "topological": 0.1958125908052999, "space": 0.1958125908052999, "partial": 0.1958125908052999, "bottom": 0.1958125908052999}}, {"docstring": " For an endomorphism of a Noetherian module, the maximal eigenspace is always of the form kernel `(f - \u03bc \u2022 id) ^ k` for some `k`.\n", "keywords": {"Noetherian module": 0.008293207122436794, "form kernel": 0.015380821171891606, "maximal eigenspace": 0.02570861714399338, "Noetherian": 0.08596317751626563, "module": 0.09568045026443411, "kernel": 0.09568045026443411, "endomorphism": 0.15831692877998726, "maximal": 0.15831692877998726, "eigenspace": 0.15831692877998726, "form": 0.15831692877998726}}, {"docstring": "The triple product of `u`, `v`, and `w` is equal to the determinant of the matrix    with those vectors as its rows.\n", "keywords": {"triple product": 0.013527995261974615, "rows": 0.0771485953923296, "triple": 0.1155310835876123, "product": 0.1155310835876123, "equal": 0.1155310835876123, "determinant": 0.1155310835876123, "matrix": 0.1155310835876123, "vectors": 0.1155310835876123}}, {"docstring": "Pythagorean theorem, vector angle form.\n", "keywords": {"vector angle form": 0.008321268142839145, "Pythagorean theorem": 0.02570861714399338, "vector angle": 0.04940384002065631, "angle form": 0.04940384002065631, "Pythagorean": 0.15831692877998726, "theorem": 0.15831692877998726, "vector": 0.15831692877998726, "form": 0.15831692877998726, "angle": 0.29736558256021506}}, {"docstring": " If there is a primitive `n`th root of unity in `K`, then `X ^ n - 1 = \u220f (X - \u03bc)`, where `\u03bc` varies over the `n`-th roots of unity.\n", "keywords": {"root of unity": 0.018631302664197734, "unity": 0.07915846438999359, "primitive": 0.10028582371075691, "varies": 0.10028582371075691, "root": 0.1155310835876123, "roots": 0.1155310835876123}}, {"docstring": "In a monoid with zero, if zero equals one, then zero is the only element.\n", "keywords": {"element": 0.0771485953923296, "monoid": 0.1155310835876123, "equals": 0.1155310835876123}}, {"docstring": "If `f` is `C^1` at `x`, then `f` is Lipschitz in a neighborhood of `x`.\n", "keywords": {"Lipschitz": 0.08596317751626563, "neighborhood": 0.15831692877998726}}, {"docstring": " Given a local homeomorphism `e` from a space `\u03b1` into `H`, if its source covers the whole space `\u03b1`, then the induced charted space structure on `\u03b1` is `has_groupoid G` for any structure groupoid `G` which is closed under restrictions.\n", "keywords": {"induced charted space": 0.006109142094474147, "charted space structure": 0.00856858462591845, "local homeomorphism": 0.015128790481509835, "closed under restrictions": 0.015128790481509835, "source covers": 0.02253863322292181, "induced charted": 0.02253863322292181, "charted space": 0.03907580240837552, "structure groupoid": 0.04346546897471769, "space structure": 0.05451587861619989, "space": 0.08443363630807477, "homeomorphism": 0.10038276126215359, "restrictions": 0.10038276126215359, "structure": 0.10204768298555947, "groupoid": 0.10204768298555947, "local": 0.14846494626519982, "source": 0.14846494626519982, "covers": 0.14846494626519982, "induced": 0.14846494626519982, "charted": 0.14846494626519982, "closed": 0.14846494626519982}}, {"docstring": " A set is a neighborhood of `a` within `(-\u221e, a]` if and only if it contains an interval `(l, a]` with `l < a`, provided `a` is not a bottom element.\n", "keywords": {"bottom element": 0.0038595505094717398, "provided": 0.04491197687864554, "interval": 0.05617160784335063, "element": 0.05617160784335063, "set": 0.06844581806138879, "neighborhood": 0.06844581806138879, "bottom": 0.06844581806138879}}, {"docstring": "`complex.exp z \u2192 0` as `complex.re z \u2192 -\u221e`.\n", "keywords": {"complex.exp": 0.09568045026443411, "complex.re": 0.09568045026443411}}, {"docstring": " For positive values, the derivative of the `n`-th auxiliary function `f_aux n` (given in this statement in unfolded form) is the `n+1`-th auxiliary function, since the polynomial `P_aux (n+1)` was chosen precisely to ensure this.\n", "keywords": {"auxiliary function": 0.0027896000481621858, "unfolded form": 0.00998901268061666, "statement in unfolded": 0.013923161052069546, "chosen precisely": 0.013923161052069546, "precisely to ensure": 0.013923161052069546, "function": 0.03146277825206327, "auxiliary": 0.04408578671136769, "aux": 0.04408578671136769, "form": 0.08439943001984396, "polynomial": 0.08439943001984396, "positive": 0.11718348279991213, "derivative": 0.11718348279991213, "statement": 0.11718348279991213, "unfolded": 0.11718348279991213, "chosen": 0.11718348279991213, "precisely": 0.11718348279991213, "ensure": 0.11718348279991213}}, {"docstring": "The (open) thickening of a set contains the closure of the set.\n", "keywords": {"open": 0.055708263664958506, "set": 0.094808423351325, "thickening": 0.09492398510093508, "closure": 0.1408007092310104}}, {"docstring": " Pythagorean theorem, subtracting vectors, vector inner product form.\n", "keywords": {"Pythagorean theorem": 0.013095151449018445, "product form": 0.021567786782198985, "subtracting vectors": 0.031557281947372486, "Pythagorean": 0.11369206228658875, "theorem": 0.11369206228658875, "subtracting": 0.11369206228658875, "form": 0.11369206228658875, "vector inner product": 0.11487806119690562, "product": 0.18569843656348187, "vectors": 0.2690767023266335, "vector": 0.2690767023266335}}, {"docstring": "This relies on `default \u2115 = 0`.\n", "keywords": {"default": 0.15831692877998726, "relies": 0.29736558256021506}}, {"docstring": " A function is `C^n` at a point, for `n : \u2115`, if and only if it is `C^n` on a neighborhood of this point.\n", "keywords": {"point": 0.055127829619426576, "function": 0.14390902704051098, "neighborhood": 0.14390902704051098}}, {"docstring": "A common special case of `image3_congr`\n", "keywords": {"common special case": 0.03339840940482845, "congr": 0.04491197687864554, "common special": 0.09700399286574239, "special case": 0.09700399286574239, "common": 0.29736558256021506, "special": 0.29736558256021506, "case": 0.29736558256021506}}, {"docstring": " If `x` is a letter and `w` is a word such that `xw` reduces to the empty word, then `w` reduces to `x\u207b\u00b9`\n", "keywords": {"reduces": 0.04784022513221706, "empty word": 0.06340461682679863, "word": 0.14868279128010753, "letter": 0.2005079697193566, "empty": 0.2005079697193566}}, {"docstring": "The sum of two monotone functions is monotone.\n", "keywords": {"monotone functions": 0.05913243875864445, "functions is monotone": 0.12748048004056906, "monotone": 0.14323823713631006, "sum": 0.19488865479360015, "functions": 0.19488865479360015}}, {"docstring": "Precomposing `f` with `prod.snd` is continuous\n", "keywords": {"Precomposing": 0.04491197687864554, "prod.snd": 0.04491197687864554, "continuous": 0.15831692877998726}}, {"docstring": " Heine-Cantor: a continuous function on a compact separated set of a uniform space is uniformly continuous.\n", "keywords": {"compact separated set": 0.002477776488322723, "compact separated": 0.018034246898548233, "separated set": 0.018034246898548233, "uniform space": 0.018034246898548233, "space is uniformly": 0.018034246898548233, "continuous function": 0.023937535241430174, "uniformly continuous": 0.023937535241430174, "Heine-Cantor": 0.052376395424323874, "continuous": 0.08782297807514622, "function": 0.13309686053898662, "compact": 0.13309686053898662, "separated": 0.13309686053898662, "set": 0.13309686053898662, "uniform": 0.13309686053898662, "space": 0.13309686053898662, "uniformly": 0.13309686053898662}}, {"docstring": "The functor Compactum_to_CompHaus is faithful.\n", "keywords": {"CompHaus is faithful": 0.02570861714399338, "functor Compactum": 0.026233073037508336, "Compactum": 0.08596317751626563, "CompHaus": 0.15831692877998726, "faithful": 0.15831692877998726, "functor": 0.29736558256021506}}, {"docstring": " If `x \u2260 y` belong to the same closed ball, then the open segment with endpoints `x` and `y` is included in the corresponding open ball.\n", "keywords": {"segment with endpoints": 0.013833902242147065, "closed ball": 0.015643506311977654, "open ball": 0.021264433667096305, "open segment": 0.02811486821694386, "ball": 0.054147325146855434, "belong": 0.09593831581184391, "endpoints": 0.09593831581184391, "open": 0.09613435444394655, "closed": 0.14222822903176371, "segment": 0.14222822903176371, "included": 0.14222822903176371}}, {"docstring": "The product of two independent, integrable, real_valued random variables is integrable.\n", "keywords": {"valued random variables": 0.004077346538176823, "valued random": 0.021114872146320032, "random variables": 0.034987023778306175, "real": 0.05331699930238388, "variables is integrable": 0.06131733975553988, "integrable": 0.069255433448279, "independent": 0.11246769819744627, "valued": 0.11246769819744627, "product": 0.18385948854246909, "random": 0.18385948854246909, "variables": 0.18385948854246909}}, {"docstring": "`\u2228` distributes over `\u2227` (on the right).\n", "keywords": {"distributes": 0.15831692877998726}}, {"docstring": "If a function applied at a point is 0, a sum is unchanged by removing that point, if present, from a `finset`.\n", "keywords": {"function applied": 0.012578992104256836, "sum is unchanged": 0.012578992104256836, "unchanged by removing": 0.012578992104256836, "removing that point": 0.03803679030233875, "finset": 0.0528063806271324, "point": 0.06839635777587466, "present": 0.08012982629475915, "function": 0.11145728654016383, "applied": 0.11145728654016383, "sum": 0.11145728654016383, "unchanged": 0.11145728654016383, "removing": 0.11145728654016383}}, {"docstring": "If `f` and `g` are two torus integrable functions, then so is `f - g`.\n", "keywords": {"torus integrable functions": 0.0025258761156662004, "integrable functions": 0.015380821171891606, "torus integrable": 0.02570861714399338, "functions": 0.09568045026443411, "torus": 0.15831692877998726, "integrable": 0.15831692877998726}}, {"docstring": " To show a property hold on all `unitization R A` it suffices to show it holds on terms of the form `inl r + a`.  This can be used as `induction x using unitization.ind`.\n", "keywords": {"property hold": 0.03449378939752614, "suffices to show": 0.03449378939752614, "holds on terms": 0.03449378939752614, "show a property": 0.07905360384756138, "show": 0.08846600694276306, "show it holds": 0.11893601905008722, "unitization": 0.129389133019644, "form": 0.129389133019644, "inl": 0.129389133019644, "hold": 0.17693201388552612, "holds": 0.17693201388552612, "property": 0.1884545376459065, "suffices": 0.1884545376459065, "terms": 0.1884545376459065, "induction": 0.3404402136765515, "unitization.ind": 0.3404402136765515}}, {"docstring": "If you do not localize at any zero-divisors, localization preserves cardinality.\n", "keywords": {"localization preserves cardinality": 0.008321268142839145, "localization preserves": 0.04940384002065631, "preserves cardinality": 0.04940384002065631, "zero-divisors": 0.15831692877998726, "localization": 0.15831692877998726, "cardinality": 0.15831692877998726, "localize": 0.29736558256021506, "preserves": 0.29736558256021506}}, {"docstring": " Let `c : set (set \u03b1)` be an open cover of a compact set `s`. Then there exists an entourage `n` such that for each `x \u2208 s` its `n`-neighborhood is contained in some `t \u2208 c`.\n", "keywords": {"open cover": 0.04315527690446945, "compact set": 0.06274602381562458, "set": 0.09675936117139498, "open": 0.20339603106483087, "cover": 0.20339603106483087, "compact": 0.20339603106483087, "exists an entourage": 0.20505794753988754, "neighborhood is contained": 0.20505794753988754, "entourage": 0.3620558707913512, "neighborhood": 0.3620558707913512, "exists": 0.46999483014518423, "contained": 0.46999483014518423}}, {"docstring": "**Alias** of the forward direction of le_inv_mul_iff_mul_le`.\n", "keywords": {"mul": 0.019648131954263418, "Alias": 0.034278050535979626, "forward direction": 0.035715520099333646, "inv": 0.05393656033701752, "iff": 0.05393656033701752, "forward": 0.18569843656348187, "direction": 0.18569843656348187}}, {"docstring": "An element of a monoid is in the set of that element's natural number powers.\n", "keywords": {"natural number powers": 0.004210515236259915, "element natural number": 0.010494743012823167, "number powers": 0.021567786782198985, "natural number": 0.035715520099333646, "element natural": 0.05259515133015473, "powers": 0.11369206228658875, "element": 0.13453835116331675, "monoid": 0.18569843656348187, "set": 0.18569843656348187, "natural": 0.18569843656348187, "number": 0.18569843656348187}}, {"docstring": " **Sylvester's law of inertia**: A nondegenerate real quadratic form is equivalent to a weighted sum of squares with the weights being \u00b11.\n", "keywords": {"nondegenerate real quadratic": 0.0042542192213185686, "real quadratic form": 0.0042542192213185686, "Sylvester law": 0.009108237309423345, "law of inertia": 0.015380821171891606, "nondegenerate real": 0.02570861714399338, "real quadratic": 0.02570861714399338, "quadratic form": 0.02570861714399338, "form is equivalent": 0.02570861714399338, "weighted sum": 0.02570861714399338, "sum of squares": 0.02570861714399338, "Sylvester": 0.057012387690331526, "inertia": 0.09568045026443411, "law": 0.15831692877998726, "nondegenerate": 0.15831692877998726, "real": 0.15831692877998726, "quadratic": 0.15831692877998726, "form": 0.15831692877998726, "equivalent": 0.15831692877998726, "weighted": 0.15831692877998726, "sum": 0.15831692877998726}}, {"docstring": "Determinant of 0x0 matrix\n", "keywords": {"matrix": 0.04491197687864554, "Determinant": 0.15831692877998726}}, {"docstring": "Any `z : \u210d` can be moved to `\ud835\udc9f` by an element of `SL(2,\u2124)`\n", "keywords": {"moved": 0.29736558256021506, "element": 0.29736558256021506}}, {"docstring": " A continuous function is strongly measurable when either the source space or the target space is second-countable.\n", "keywords": {"continuous function": 0.03439110359613085, "function is strongly": 0.03439110359613085, "strongly measurable": 0.03439110359613085, "source space": 0.05033870131288873, "target space": 0.05033870131288873, "space is second-countable": 0.06831905985192867, "second-countable": 0.11145728654016383, "space": 0.1314201551237121, "continuous": 0.1823394614884183, "function": 0.1823394614884183, "strongly": 0.1823394614884183, "measurable": 0.1823394614884183, "source": 0.1823394614884183, "target": 0.1823394614884183}}, {"docstring": " Assumes left covariance. The lemma assuming right covariance is `right.mul_lt_one_of_le_of_lt`.\n", "keywords": {"Assumes left covariance": 0.022198737363026126, "Assumes left": 0.03985444220279051, "left covariance": 0.13064959758481184, "Assumes": 0.1554527012770092, "right.mul": 0.22125774619993788, "covariance": 0.23433876543145388, "left": 0.246550513069643, "lemma assuming": 0.39462694305349416, "lemma": 0.5319420725534505, "assuming": 0.5319420725534505, "assuming right covariance": 0.5970566294903761}}, {"docstring": "For any `p`, the power of `p` in `x^n` is `n` times the power in `x`\n", "keywords": {"times the power": 0.028893199202175198, "power": 0.11357121248292479, "times": 0.12363091320521931}}, {"docstring": "`-a \u2264 b \u2194 -b \u2264 a` on `ereal`.\n", "keywords": {"ereal": 0.04491197687864554}}, {"docstring": " Induction principle for `ratfunc K`: if `f p q : P (p / q)` for all `p q : polynomial K`, then `P` holds on all elements of `ratfunc K`.  See also `induction_on'`, which is a recursion principle defined in terms of `ratfunc.mk`.\n", "keywords": {"ratfunc": 0.03819376380415168, "Induction principle": 0.04559103545006946, "recursion principle defined": 0.048263389083464885, "Induction": 0.08562588484568008, "recursion principle": 0.10544033925198255, "principle defined": 0.10544033925198255, "polynomial": 0.1124662208865963, "holds": 0.1124662208865963, "principle": 0.12730707531359556, "elements": 0.14710468925728304, "defined in terms": 0.16324902484554962, "ratfunc.mk": 0.23408280182656144, "recursion": 0.374618265993631, "defined": 0.374618265993631, "terms": 0.374618265993631}}, {"docstring": "The \u03c9-limit of a nonempty set w.r.t. a nontrivial filter is nonempty.\n", "keywords": {"nonempty set": 0.031557281947372486, "nontrivial filter": 0.035715520099333646, "set": 0.11369206228658875, "filter is nonempty": 0.11487806119690562, "nonempty": 0.13453835116331675, "\u03c9-limit": 0.18569843656348187, "nontrivial": 0.18569843656348187, "filter": 0.18569843656348187}}, {"docstring": " The product of a list of Lipschitz continuous endomorphisms is a Lipschitz continuous endomorphism.\n", "keywords": {"Lipschitz continuous endomorphisms": 0.004287041892686707, "Lipschitz continuous": 0.00877036955144821, "continuous endomorphisms": 0.038683196082996876, "list of Lipschitz": 0.05226774467029389, "Lipschitz": 0.053457026500644086, "continuous": 0.08061786523087178, "product": 0.20283314940424746, "list": 0.20283314940424746, "endomorphisms": 0.2309819024762945}}, {"docstring": "Addition of a `u : add_units M` on the right doesn't affect `is_add_unit`.\n", "keywords": {"add": 0.02245598843932277, "Addition": 0.12363091320521931, "affect": 0.12363091320521931, "units": 0.15831692877998726, "unit": 0.15831692877998726}}, {"docstring": " A compact element `k` has the property that any directed set lying strictly below `k` has its Sup strictly below `k`.\n", "keywords": {"directed set lying": 0.002605889616655122, "set lying strictly": 0.002670247221209645, "compact element": 0.012465543599998139, "directed set": 0.018641876658774394, "set lying": 0.018641876658774394, "lying strictly": 0.01909557836111971, "strictly": 0.069255433448279, "element": 0.09101163530720666, "compact": 0.135280142484453, "property": 0.135280142484453, "directed": 0.135280142484453, "set": 0.135280142484453, "lying": 0.135280142484453}}, {"docstring": "Summing an indicator function over a possibly larger `finset` is the same as summing the original function over the original `finset`.\n", "keywords": {"possibly larger": 0.015391226559158887, "finset": 0.022805428960578612, "indicator function": 0.02461462086832806, "original function": 0.026435973727096607, "Summing an indicator": 0.07338814090695724, "summing the original": 0.07842369256375532, "function": 0.08024199688466521, "original": 0.08024199688466521, "larger": 0.10126023850781558, "Summing": 0.10323551202386773, "indicator": 0.14969278847029802, "possibly": 0.14969278847029802}}, {"docstring": " The weighted sum is unaffected by removing the base point, if present, from the set of points.\n", "keywords": {"base point": 0.01347319449596249, "weighted sum": 0.018310930906343142, "sum is unaffected": 0.018310930906343142, "unaffected by removing": 0.018310930906343142, "removing the base": 0.018310930906343142, "set of points": 0.03342034432864887, "present": 0.09017440044927587, "point": 0.09913871915264066, "points": 0.09913871915264066, "weighted": 0.13409574860218185, "sum": 0.13409574860218185, "unaffected": 0.13409574860218185, "removing": 0.13409574860218185, "base": 0.13409574860218185, "set": 0.13409574860218185}}, {"docstring": "The angle between two vectors does not depend on their order.\n", "keywords": {"order": 0.15831692877998726, "angle": 0.29736558256021506, "vectors": 0.29736558256021506, "depend": 0.29736558256021506}}, {"docstring": "A special case of the equivalence closure of an equivalence relation r equalling r.\n", "keywords": {"special case": 0.035715520099333646, "relation r equalling": 0.035715520099333646, "equivalence closure": 0.05259515133015473, "equivalence relation": 0.05259515133015473, "equivalence": 0.13453835116331675, "special": 0.18569843656348187, "case": 0.18569843656348187, "closure": 0.18569843656348187, "relation": 0.18569843656348187, "equalling": 0.18569843656348187}}, {"docstring": "**Cantor's theorem**\n", "keywords": {"Cantor theorem": 0.013797198203993007, "Cantor": 0.08596317751626563, "theorem": 0.15831692877998726}}, {"docstring": "An auxiliary result en route to `modular_group.eq_smul_self_of_mem_fdo_mem_fdo`.\n", "keywords": {"mem": 0.020602899695743707, "fdo": 0.020602899695743707, "auxiliary result": 0.037831312533597124, "result en route": 0.037831312533597124, "modular": 0.055708263664958506, "group.eq": 0.055708263664958506, "smul": 0.055708263664958506, "auxiliary": 0.19092478917347616, "result": 0.19092478917347616, "route": 0.19092478917347616}}, {"docstring": "If a direct product has finite additive order then so does each component.\n", "keywords": {"finite additive order": 0.03339840940482845, "direct product": 0.09700399286574239, "product has finite": 0.09700399286574239, "finite additive": 0.09700399286574239, "additive order": 0.09700399286574239, "component": 0.15831692877998726, "direct": 0.29736558256021506, "product": 0.29736558256021506, "finite": 0.29736558256021506, "additive": 0.29736558256021506, "order": 0.29736558256021506}}, {"docstring": "The cross product of two vectors is perpendicular to the second vector.\n", "keywords": {"cross product": 0.037831312533597124, "vectors is perpendicular": 0.12194096740933039, "cross": 0.19092478917347616, "product": 0.19092478917347616, "perpendicular": 0.19092478917347616, "vectors": 0.27891038992107275, "vector": 0.27891038992107275}}, {"docstring": "Definition of the function on the quotient by an additive congruence relation `c` induced by a function that is constant on `c`'s equivalence classes.\n", "keywords": {"additive congruence relation": 0.0038047582963498796, "congruence relation": 0.020171377334626643, "equivalence classes": 0.020171377334626643, "additive congruence": 0.03346752176983843, "Definition": 0.10987504304330521, "relation": 0.10987504304330521, "induced": 0.10987504304330521, "classes": 0.10987504304330521, "function": 0.12922594861139264, "quotient": 0.17995476918065306, "additive": 0.17995476918065306, "congruence": 0.17995476918065306, "constant": 0.17995476918065306, "equivalence": 0.17995476918065306}}, {"docstring": "`exp` is strictly convex on the whole real line.\n", "keywords": {"exp": 0.04491197687864554, "real line": 0.04940384002065631, "strictly convex": 0.09700399286574239, "line": 0.15831692877998726, "strictly": 0.29736558256021506, "convex": 0.29736558256021506, "real": 0.29736558256021506}}, {"docstring": " If `u` is a monotone function with linear ordered codomain and the range of `u` is not bounded above, then `tendsto u at_top at_top`.\n", "keywords": {"linear ordered codomain": 0.002477776488322723, "monotone function": 0.018034246898548233, "function with linear": 0.018034246898548233, "linear ordered": 0.018034246898548233, "ordered codomain": 0.018034246898548233, "top": 0.04902532341292284, "tendsto": 0.08946888050496495, "monotone": 0.13309686053898662, "function": 0.13309686053898662, "linear": 0.13309686053898662, "ordered": 0.13309686053898662, "codomain": 0.13309686053898662, "range": 0.13309686053898662, "bounded": 0.13309686053898662}}, {"docstring": "Multiplicative congruence relations preserve multiplication.\n", "keywords": {"Multiplicative congruence relations": 0.01655915082773619, "relations preserve multiplication": 0.016559150827736194, "congruence relations preserve": 0.03339840940482845, "Multiplicative congruence": 0.04940384002065631, "preserve multiplication": 0.04940384002065631, "congruence relations": 0.09700399286574239, "relations preserve": 0.09700399286574239, "Multiplicative": 0.15831692877998726, "multiplication": 0.15831692877998726, "congruence": 0.29736558256021506, "relations": 0.29736558256021506, "preserve": 0.29736558256021506}}, {"docstring": "**Alias** of the reverse direction of sub_lt_iff_lt_add'`.\n", "keywords": {"reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "add": 0.04491197687864554, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " `multiset.map f` preserves `count` if `f` is injective on the set of elements contained in the multiset\n", "keywords": {"set of elements": 0.02570861714399338, "elements contained": 0.02570861714399338, "preserves": 0.04491197687864554, "count": 0.04491197687864554, "multiset.map": 0.09568045026443411, "multiset": 0.09568045026443411, "injective": 0.15831692877998726, "set": 0.15831692877998726, "elements": 0.15831692877998726, "contained": 0.15831692877998726}}, {"docstring": "Given any distinguished triangle `T`, then we know `T.inv_rotate` is also distinguished.\n", "keywords": {"distinguished triangle": 0.03378800767844735, "T.inv": 0.03498516242744211, "rotate": 0.055708263664958506, "triangle": 0.11718348279991213, "distinguished": 0.13945519496053638}}, {"docstring": "The composition of `C^n` functions is `C^n`.\n", "keywords": {"functions": 0.09568045026443411, "composition": 0.15831692877998726}}, {"docstring": "The determinant of `conj_lie`, as a linear equiv.\n", "keywords": {"conj": 0.04491197687864554, "lie": 0.04491197687864554, "linear equiv": 0.04940384002065631, "equiv": 0.15831692877998726, "determinant": 0.29736558256021506, "linear": 0.29736558256021506}}, {"docstring": "A rotation of a nonzero vector equals that vector if and only if the angle is zero.\n", "keywords": {"nonzero vector equals": 0.010962043841203115, "nonzero vector": 0.05417025203414716, "vector equals": 0.05417025203414716, "equals that vector": 0.11793310824193863, "vector": 0.13667842094541144, "rotation": 0.1879836817695587, "nonzero": 0.1879836817695587, "equals": 0.1879836817695587, "angle": 0.1879836817695587}}, {"docstring": "The p-adic value of an natural is its p-adic_value as an integer\n", "keywords": {"integer": 0.11984314898676356, "p-adic": 0.14323823713631006, "natural": 0.19488865479360015}}, {"docstring": "See `inv_le_inv_of_le` for the implication from right-to-left with one fewer assumption.\n", "keywords": {"inv": 0.02006098734604785, "fewer assumption": 0.022138323509052035, "assumption": 0.11521656054299435, "implication": 0.1879836817695587, "fewer": 0.1879836817695587}}, {"docstring": "The order of the product of two formal power series is at least the sum of their orders.\n", "keywords": {"formal power series": 0.00269253313269109, "formal power": 0.01904688389482227, "power series": 0.01904688389482227, "product": 0.1367145963576765, "formal": 0.1367145963576765, "power": 0.1367145963576765, "series": 0.1367145963576765, "sum": 0.1367145963576765, "order": 0.18213622310077732, "orders": 0.18213622310077732}}, {"docstring": " If the product of `f i` over `i \u2208 s` is not equal to `1`, then there is some `x \u2208 s` such that `f x \u2260 1`.\n", "keywords": {"product": 0.15831692877998726, "equal": 0.15831692877998726}}, {"docstring": "This lemma is analogous to `quotient.out_eq'`.\n", "keywords": {"quotient.out": 0.04491197687864554, "lemma is analogous": 0.09700399286574239, "lemma": 0.29736558256021506, "analogous": 0.29736558256021506}}, {"docstring": "Inversion is a group homomorphism if the group is commutative.\n", "keywords": {"group homomorphism": 0.0562460611896591, "group is commutative": 0.07553762682862881, "Inversion": 0.11718348279991213, "commutative": 0.11718348279991213, "group": 0.13945519496053638, "homomorphism": 0.19092478917347616}}, {"docstring": "The closure of a totally bounded set is totally bounded.\n", "keywords": {"totally bounded set": 0.011782282943034048, "totally bounded": 0.027200199006318638, "bounded set": 0.04771708711059453, "set is totally": 0.10583238594216893, "totally": 0.11357121248292479, "bounded": 0.11357121248292479, "closure": 0.2005079697193566, "set": 0.2005079697193566}}, {"docstring": "The function `x ^ (-1 / x)` tends to `1` at `+\u221e`.\n", "keywords": {"function": 0.09568045026443411}}, {"docstring": " **Tietze extension theorem** for real-valued bounded continuous maps, a version for a closed embedding. Let `e` be a closed embedding of a nonempty topological space `X` into a normal topological space `Y`. Let `f` be a bounded continuous real-valued function on `X`. Then there exists a bounded continuous function `g : Y \u2192\u1d47 \u211d` such that `g \u2218 e = f` and each value `g y` belongs to a closed interval `[f x\u2081, f x\u2082]` for some `x\u2081` and `x\u2082`.\n", "keywords": {"Tietze extension theorem": 0.0017519787310464013, "Tietze extension": 0.011262456079337688, "bounded continuous maps": 0.019449677303234696, "extension theorem": 0.027712958352298943, "closed embedding": 0.02987196612509282, "bounded continuous": 0.03991040591592602, "real-valued bounded continuous": 0.051253158507772276, "bounded continuous real-valued": 0.051253158507772276, "topological space": 0.054829480476717186, "continuous maps": 0.055003993737779706, "nonempty topological space": 0.05983144980214978, "normal topological space": 0.05983144980214978, "Tietze": 0.0621060173406263, "bounded continuous function": 0.07360843589507467, "closed": 0.07811743746071605, "continuous real-valued function": 0.08713839520861194, "bounded": 0.10280346401012086, "continuous": 0.11556953214073351, "embedding": 0.1202800573171177, "real-valued bounded": 0.12229969610934266}}, {"docstring": " The set of cluster points of a filter is closed. In particular, the set of limit points of a sequence is closed.\n", "keywords": {"filter is closed": 0.025951079503582344, "set of cluster": 0.0354202211587133, "cluster points": 0.04541133922065523, "sequence is closed": 0.06570229192862045, "closed": 0.07360459871808932, "set of limit": 0.09096202138778617, "set": 0.09954301717952428, "limit points": 0.11841171013975674, "points": 0.12640180548160176, "cluster": 0.17182795856791505, "filter": 0.17182795856791505, "limit": 0.41880289468275533, "sequence": 0.41880289468275533}}, {"docstring": "**Alias** of not_lt_of_le`.\n", "keywords": {"Alias": 0.030396371632413578}}, {"docstring": "The **alternating series test** for monotone sequences.\n", "keywords": {"alternating series test": 0.008321268142839145, "alternating series": 0.04940384002065631, "series test": 0.04940384002065631, "monotone sequences": 0.04940384002065631, "alternating": 0.15831692877998726, "test": 0.15831692877998726, "sequences": 0.15831692877998726, "series": 0.29736558256021506, "monotone": 0.29736558256021506}}, {"docstring": "The sum of `f` over `insert a s` is the same as the sum over `s`, as long as `f a = 0`.\n", "keywords": {"sum": 0.07571113878390312, "insert": 0.09713402394201612, "long": 0.14390902704051098}}, {"docstring": " If `a` is a greatest lower bound for sets `s` and `p`, then it is a greater lower bound for any set `t`, `s \u2286 t \u2286 p`.\n", "keywords": {"greatest lower bound": 0.0030179793906191677, "greater lower bound": 0.0030179793906191677, "lower bound": 0.009678262319695142, "greatest lower": 0.02481238520841141, "greater lower": 0.02481238520841141, "bound for sets": 0.034851497250274664, "bound": 0.05888572039821348, "lower": 0.08061786523087176, "sets": 0.11777144079642696, "set": 0.11777144079642696, "greatest": 0.1501629736875757, "greater": 0.1501629736875757}}, {"docstring": "`liminf` over `\u2115` is measurable. See `measurable_liminf'` for a version with a general filter.\n", "keywords": {"liminf": 0.15228179662245217, "measurable": 0.15228179662245217, "general filter": 0.3038602100374199, "filter": 0.41661206222086244, "version": 0.5593851868498433, "general": 0.5593851868498433}}, {"docstring": "If `x` is a fixed point of `f` and `g`, then it is a fixed point of `f \u2218 g`.\n", "keywords": {"fixed point": 0.01285430857199669, "fixed": 0.07915846438999363, "point": 0.07915846438999363}}, {"docstring": "Any non-zero natural number `m` is greater than b^((number of digits in the base b representation of m) - 1)\n", "keywords": {"non-zero natural number": 0.010130364612108918, "non-zero natural": 0.034987023778306175, "base b representation": 0.034987023778306175, "natural number": 0.051351238837580325, "number of digits": 0.11245662598947327, "number": 0.13282721021560867, "non-zero": 0.18385948854246909, "natural": 0.18385948854246909, "greater": 0.18385948854246909, "digits": 0.18385948854246909, "base": 0.18385948854246909, "representation": 0.18385948854246909}}, {"docstring": " The mean value theorem on a convex set: if the derivative of a function is bounded by `C`, then the function is `C`-Lipschitz. Version with `fderiv`.\n", "keywords": {"convex set": 0.022301551378828607, "function is bounded": 0.030370647063816338, "Lipschitz": 0.04096847175859269, "function": 0.08252252056410837, "set": 0.1221512649852118, "theorem": 0.1785903903600119, "convex": 0.1785903903600119, "derivative": 0.1785903903600119, "bounded": 0.1785903903600119, "fderiv": 0.21373773690901868, "Version": 0.3258146251285017}}, {"docstring": "**Fermat's Theorem**: the derivative of a function at a local extremum equals zero.\n", "keywords": {"Fermat Theorem": 0.0032610119837787367, "local extremum equals": 0.0042542192213185686, "local extremum": 0.02570861714399338, "extremum equals": 0.02570861714399338, "Fermat": 0.057012387690331526, "Theorem": 0.057012387690331526, "derivative": 0.15831692877998726, "function": 0.15831692877998726, "local": 0.15831692877998726, "extremum": 0.15831692877998726, "equals": 0.15831692877998726}}, {"docstring": " The (open) thickening `thickening \u03b4 E` with a fixed thickening radius `\u03b4` is an increasing function of the subset `E`.\n", "keywords": {"fixed thickening radius": 0.004015027085385503, "increasing function": 0.022401895700338237, "thickening radius": 0.02588141212622439, "fixed thickening": 0.03876555391209268, "open": 0.058865175910949544, "thickening": 0.08403798622869686, "radius": 0.10006769949327374, "subset": 0.10006769949327374, "fixed": 0.14802380456229533, "increasing": 0.14802380456229533, "function": 0.14802380456229533}}, {"docstring": "Engel's theorem.\n", "keywords": {"Engel theorem": 0.02570861714399338, "Engel": 0.15831692877998726, "theorem": 0.15831692877998726}}, {"docstring": "The Bernstein polynomials are linearly independent.  We prove by induction that the collection of `bernstein_polynomial n \u03bd` for `\u03bd = 0, ..., k` are linearly independent. The inductive step relies on the observation that the `(n-k)`-th derivative, evaluated at 1, annihilates `bernstein_polynomial n \u03bd` for `\u03bd < k`, but has a nonzero value at `\u03bd = k`.\n", "keywords": {"linearly independent": 0.01866027806393138, "independent": 0.08371198628255615, "Bernstein": 0.10435446779224967, "linearly": 0.10744531522853644, "Bernstein polynomials": 0.12327226809444336, "polynomial": 0.17527422352114216, "polynomials are linearly": 0.21470834825399915, "prove by induction": 0.24336503513405838, "inductive step relies": 0.34575041227896497, "annihilates": 0.3709890190885207, "inductive step": 0.403484380232722, "step relies": 0.403484380232722, "prove": 0.4424149212617386, "induction": 0.4424149212617386, "collection": 0.4424149212617386, "derivative": 0.4592572525319743, "evaluated": 0.4592572525319743, "inductive": 0.5361787175814756, "step": 0.5361787175814756, "relies": 0.5361787175814756}}, {"docstring": "The intersection of an indexed set of `add_submonoid`s of an `add_monoid` `M` is an `add_submonoid` of `M`.\n", "keywords": {"add": 0.012958127674006455, "indexed set": 0.01665351519807109, "submonoid": 0.02377908293441822, "monoid": 0.06123741645018452, "intersection": 0.127987181588862, "indexed": 0.127987181588862, "set": 0.127987181588862}}, {"docstring": " Two finite measures on a Borel space are equal if they agree on all left-closed right-infinite intervals.\n", "keywords": {"left-closed right-infinite intervals": 0.0025258761156662004, "Borel space": 0.013797198203993007, "right-infinite intervals": 0.015380821171891606, "finite measures": 0.02570861714399338, "space are equal": 0.02570861714399338, "left-closed right-infinite": 0.02570861714399338, "Borel": 0.08596317751626563, "intervals": 0.09568045026443411, "finite": 0.15831692877998726, "measures": 0.15831692877998726, "space": 0.15831692877998726, "equal": 0.15831692877998726, "agree": 0.15831692877998726, "left-closed": 0.15831692877998726, "right-infinite": 0.15831692877998726}}, {"docstring": "Deprecated: use `fun_like.ext_iff` instead.\n", "keywords": {"Deprecated": 0.04491197687864554, "fun": 0.04491197687864554, "like.ext": 0.04491197687864554, "iff": 0.04491197687864554}}, {"docstring": " Composing an independent indexed family with an injective function on the index results in another indepedendent indexed family.\n", "keywords": {"independent indexed family": 0.00928043415947468, "Composing an independent": 0.022484625344159365, "indexed family": 0.02289946390635722, "injective function": 0.03718843747800602, "index results": 0.03718843747800602, "independent indexed": 0.0412608560367292, "indexed": 0.10463417723629108, "family": 0.10463417723629108, "Composing": 0.1161324896811994, "independent": 0.18935428276389019, "injective": 0.18935428276389019, "function": 0.18935428276389019, "index": 0.18935428276389019, "results": 0.18935428276389019, "indepedendent": 0.18935428276389019}}, {"docstring": " Minimum principle for concave functions. If a function `f` is concave on the convex hull of `s`, then the eventual minimum of `f` on `convex_hull \ud835\udd5c s` lies in `s`.\n", "keywords": {"Minimum principle": 0.08898477077777367, "concave functions": 0.10370734290127355, "principle for concave": 0.18121817229761847, "Minimum": 0.19320409170100414, "concave": 0.19320409170100414, "principle": 0.21146941524644683, "eventual minimum": 0.22901924901830872, "functions": 0.24316958858487542, "function": 0.24316958858487542, "convex": 0.27557492779917425, "hull": 0.27557492779917425, "lies": 0.3734743703110962, "convex hull": 0.4362990525959586, "eventual": 0.4822441699088324}}, {"docstring": "Ordinals that are cardinals are unbounded.\n", "keywords": {"cardinals are unbounded": 0.015380821171891606, "Ordinals": 0.09568045026443411, "unbounded": 0.09568045026443411, "cardinals": 0.15831692877998726}}, {"docstring": " See also `filter.tendsto.at_top_mul_neg_const` for a version of this lemma for `linear_ordered_field`s which does not require the `archimedean` assumption.\n", "keywords": {"top": 0.04491197687864554, "mul": 0.04491197687864554, "neg": 0.04491197687864554, "const": 0.04491197687864554, "linear": 0.04491197687864554, "ordered": 0.04491197687864554, "field": 0.04491197687864554, "archimedean": 0.04491197687864554, "assumption": 0.04491197687864554, "version": 0.15831692877998726, "lemma": 0.15831692877998726, "require": 0.15831692877998726}}, {"docstring": "If `|z| < 1`, then applying `S` strictly decreases `im`.\n", "keywords": {"strictly decreases": 0.02570861714399338, "applying": 0.15831692877998726, "strictly": 0.15831692877998726, "decreases": 0.15831692877998726}}, {"docstring": "**Summation by parts**, also known as **Abel's lemma** or an **Abel transformation**\n", "keywords": {"Summation by parts": 0.007360818540270905, "Abel lemma": 0.00876455650525867, "Abel transformation": 0.00876455650525867, "Abel": 0.03770467732596057, "Summation": 0.06341998722529081, "parts": 0.11521656054299435, "lemma": 0.11521656054299435, "transformation": 0.11521656054299435}}, {"docstring": " A version of the **Hahn-Banach theorem**: given disjoint convex sets `s`, `t` where `s` is compact and `t` is closed, there is a continuous linear functional which strongly separates them.\n", "keywords": {"disjoint convex sets": 0.0010606143890052174, "continuous linear functional": 0.0016012214736657916, "Hahn-Banach theorem": 0.005987543063120938, "convex sets": 0.00899321792126428, "disjoint convex": 0.013527995261974615, "continuous linear": 0.013527995261974615, "linear functional": 0.013527995261974615, "functional which strongly": 0.013527995261974615, "strongly separates": 0.013527995261974615, "Hahn-Banach": 0.0771485953923296, "theorem": 0.0771485953923296, "sets": 0.0771485953923296, "closed": 0.0771485953923296, "version": 0.1155310835876123, "disjoint": 0.1155310835876123, "convex": 0.1155310835876123, "compact": 0.1155310835876123, "continuous": 0.1155310835876123, "linear": 0.1155310835876123, "functional": 0.1155310835876123}}, {"docstring": "Uses `right` co(ntra)variant.\n", "keywords": {"ntra": 0.04491197687864554, "variant": 0.04491197687864554}}, {"docstring": "The closure of a set `s` is dense if and only if `s` is dense.\n", "keywords": {"dense": 0.10901343189444501, "set": 0.11984314898676356, "closure": 0.19488865479360015}}, {"docstring": "An auxiliary lemma that can be used to prove `\u21d1(f ^ n) = (\u21d1f^[n])`.\n", "keywords": {"auxiliary lemma": 0.02570861714399338, "prove": 0.09568045026443411, "auxiliary": 0.15831692877998726, "lemma": 0.15831692877998726}}, {"docstring": "Two local equivs that have the same `source`, same `to_fun` and same `inv_fun`, coincide.\n", "keywords": {"local equivs": 0.01904688389482227, "fun": 0.019648131954263418, "source": 0.05393656033701752, "inv": 0.05393656033701752, "coincide": 0.05393656033701752, "local": 0.1367145963576765, "equivs": 0.1367145963576765}}, {"docstring": "If a normed space is non-trivial, then the norm of the identity equals `1`.\n", "keywords": {"space is non-trivial": 0.015380821171891606, "identity equals": 0.015380821171891606, "normed space": 0.02570861714399338, "non-trivial": 0.09568045026443411, "equals": 0.09568045026443411, "normed": 0.15831692877998726, "space": 0.15831692877998726, "norm": 0.15831692877998726, "identity": 0.15831692877998726}}, {"docstring": "If a function `f` is differentiable and `f'` is monotone on `\u211d` then `f` is convex.\n", "keywords": {"function": 0.0771485953923296, "convex": 0.0771485953923296, "differentiable": 0.1155310835876123, "monotone": 0.1155310835876123}}, {"docstring": "**Alias** of the reverse direction of left.one_lt_inv_iff`.\n", "keywords": {"direction of left.one": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "inv": 0.04491197687864554, "iff": 0.04491197687864554, "left.one": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "When `p \u2224 a`, then `legendre_sym p a = 1` iff `a` is a square mod `p`.\n", "keywords": {"square mod": 0.0065920978564317735, "legendre": 0.04491197687864554, "iff": 0.04491197687864554, "sym": 0.06844581806138879, "mod": 0.06844581806138879, "square": 0.09568045026443411}}, {"docstring": " The **Banach-Alaoglu theorem**: the polar set of a neighborhood `s` of the origin in a normed space `E` is a compact subset of `weak_dual \ud835\udd5c E`.\n", "keywords": {"Banach-Alaoglu theorem": 0.005987543063120938, "normed space": 0.00899321792126428, "polar set": 0.013527995261974615, "compact subset": 0.013527995261974615, "weak": 0.04491197687864554, "Banach-Alaoglu": 0.0771485953923296, "theorem": 0.0771485953923296, "neighborhood": 0.0771485953923296, "space": 0.0771485953923296, "dual": 0.0771485953923296, "polar": 0.1155310835876123, "set": 0.1155310835876123, "origin": 0.1155310835876123, "normed": 0.1155310835876123, "compact": 0.1155310835876123, "subset": 0.1155310835876123}}, {"docstring": "In a sequential space, continuity and sequential continuity coincide.\n", "keywords": {"sequential continuity coincide": 0.012713202827692952, "sequential space": 0.0381667238781621, "continuity coincide": 0.0381667238781621, "sequential continuity": 0.09700399286574239, "space": 0.12363091320521931, "coincide": 0.12363091320521931, "sequential": 0.14868279128010753, "continuity": 0.14868279128010753, "continuity and sequential": 0.2858772036260003}}, {"docstring": "**Alias** of le_of_eq_of_le`.\n", "keywords": {"Alias": 0.030396371632413578}}, {"docstring": "Negating the orientation negates the angle in `rotation`.\n", "keywords": {"Negating the orientation": 0.015380821171891606, "orientation negates": 0.02570861714399338, "negates the angle": 0.02570861714399338, "rotation": 0.04491197687864554, "Negating": 0.09568045026443411, "orientation": 0.15831692877998726, "negates": 0.15831692877998726, "angle": 0.15831692877998726}}, {"docstring": " We can regard `coe_supr_of_chain` as the statement that `coe : (submodule R M) \u2192 set M` is Scott continuous for the \u03c9-complete partial order induced by the complete lattice structures.\n", "keywords": {"complete lattice structures": 0.0014886859682603716, "\u03c9-complete partial order": 0.0022402919889933973, "partial order induced": 0.0022402919889933973, "Scott continuous": 0.009193802857286484, "lattice structures": 0.01126465640262647, "\u03c9-complete partial": 0.016877863891825266, "partial order": 0.016877863891825266, "order induced": 0.016877863891825266, "complete lattice": 0.016877863891825266, "coe": 0.017899347444869363, "supr": 0.05054734298756545, "chain": 0.05054734298756545, "Scott": 0.07071251249924661, "regard": 0.08646269674286734, "submodule": 0.08646269674286734, "set": 0.08646269674286734, "structures": 0.08646269674286734, "statement": 0.12883217637511718, "continuous": 0.12883217637511718, "\u03c9-complete": 0.12883217637511718}}, {"docstring": "A multiset is accessible under `cut_expand` if all its singleton subsets are,  assuming `r` is irreflexive.\n", "keywords": {"multiset is accessible": 0.02570861714399338, "singleton subsets": 0.02570861714399338, "cut": 0.04491197687864554, "expand": 0.04491197687864554, "assuming": 0.04491197687864554, "irreflexive": 0.09568045026443411, "multiset": 0.15831692877998726, "accessible": 0.15831692877998726, "singleton": 0.15831692877998726, "subsets": 0.15831692877998726}}, {"docstring": "A more workable definition for `enum_ord`.\n", "keywords": {"enum": 0.04491197687864554, "ord": 0.04491197687864554, "workable definition": 0.09700399286574239, "workable": 0.29736558256021506, "definition": 0.29736558256021506}}, {"docstring": "`circumcenter_weights_with_circumcenter` sums to 1.\n", "keywords": {"circumcenter": 0.021352745740207107, "weights": 0.05706283858652404, "sums": 0.11984314898676356}}, {"docstring": "The frontier of the closed thickening of a set is contained in an `inf_edist` level set.\n", "keywords": {"level set": 0.03017959306974641, "closed thickening": 0.03439110359613085, "edist": 0.0528063806271324, "set is contained": 0.11047974441476764, "level": 0.11145728654016383, "set": 0.1314201551237121, "frontier": 0.1823394614884183, "closed": 0.1823394614884183, "thickening": 0.1823394614884183, "contained": 0.1823394614884183}}, {"docstring": "**Rolle's Theorem** `has_deriv_at` version\n", "keywords": {"Rolle Theorem": 0.007444681613352736, "deriv": 0.04491197687864554, "version": 0.04491197687864554, "Rolle": 0.08596317751626563, "Theorem": 0.08596317751626563}}, {"docstring": "**Fermat's Theorem**: the derivative of a function at a local maximum equals zero.\n", "keywords": {"Fermat Theorem": 0.0032610119837787367, "local maximum equals": 0.0042542192213185686, "local maximum": 0.02570861714399338, "maximum equals": 0.02570861714399338, "Fermat": 0.057012387690331526, "Theorem": 0.057012387690331526, "derivative": 0.15831692877998726, "function": 0.15831692877998726, "local": 0.15831692877998726, "maximum": 0.15831692877998726, "equals": 0.15831692877998726}}, {"docstring": " If `R` is of characteristic zero, then `\u03b6` is a root of `cyclotomic n R` if and only if it is a primitive `n`-th root of unity.\n", "keywords": {"root of unity": 0.013544593182520747, "root": 0.07162298286637953, "cyclotomic": 0.09329120537733218, "primitive": 0.09329120537733218, "unity": 0.09329120537733218, "characteristic": 0.1384995633470844}}, {"docstring": "The sine of `\u03c0 / 3` is `\u221a3 / 2`.\n", "keywords": {"sine": 0.15831692877998726}}, {"docstring": "`padic_norm p` is symmetric.\n", "keywords": {"padic": 0.04491197687864554, "norm": 0.15831692877998726, "symmetric": 0.15831692877998726}}, {"docstring": " If `\u03bc i` is a countable family of outer measures, then for every set `s` there exists a measurable set `t \u2287 s` such that `\u03bc i t = (\u03bc i).trim s` for all `i`.\n", "keywords": {"outer measures": 0.009011535511097367, "measurable set": 0.00920608973030006, "countable family": 0.012578992104256836, "family of outer": 0.012578992104256836, "exists a measurable": 0.012578992104256836, "set": 0.04092200269394482, "measures": 0.08012982629475915, "trim": 0.08012982629475915, "countable": 0.11145728654016383, "family": 0.11145728654016383, "outer": 0.11145728654016383, "exists": 0.11145728654016383, "measurable": 0.11145728654016383}}, {"docstring": "See `int.induction_on'` for an induction in both directions.\n", "keywords": {"int.induction": 0.04491197687864554, "directions": 0.15831692877998726, "induction": 0.29736558256021506}}, {"docstring": " The natural degree of `cyclotomic' n R` is `totient n` if there is a primitive root of unity in `R`.\n", "keywords": {"natural degree": 0.02570861714399338, "primitive root": 0.02570861714399338, "root of unity": 0.02570861714399338, "cyclotomic": 0.04491197687864554, "totient": 0.09568045026443411, "natural": 0.15831692877998726, "degree": 0.15831692877998726, "primitive": 0.15831692877998726, "root": 0.15831692877998726, "unity": 0.15831692877998726}}, {"docstring": " If `a` is the least element of `s` and `b` is the least element of `t`, then `min a b` is the least element of `s \u222a t`.\n", "keywords": {"element": 0.038510361195870764, "min": 0.11142476118001256}}, {"docstring": "The other direction does not hold because of the `s`-`s` cross terms on the RHS.\n", "keywords": {"cross terms": 0.00899321792126428, "RHS": 0.04776309965539685, "cross": 0.0771485953923296, "direction": 0.1155310835876123, "hold": 0.1155310835876123, "terms": 0.1155310835876123}}, {"docstring": " The measure of a closed ball can be expressed in terms of the measure of the closed unit ball. Use instead `add_haar_closed_ball`, which uses the measure of the open unit ball as a standard form.\n", "keywords": {"expressed in terms": 0.03217228314776879, "closed unit ball": 0.03746270901870393, "unit ball": 0.045897175070019995, "open unit ball": 0.048649179196755696, "measure": 0.05840192066479498, "ball": 0.08366936349797045, "closed unit": 0.09461468072229574, "closed": 0.11469047527099559, "open unit": 0.12009978612347653, "unit": 0.12560839226415482, "closed ball": 0.13013881735153676, "expressed": 0.17654883037226915, "terms": 0.17654883037226915, "standard form": 0.1777574988655795, "add": 0.2753165103646335, "haar": 0.2753165103646335, "form": 0.35361866938137193, "open": 0.4268122416427046, "standard": 0.4268122416427046}}, {"docstring": "The `0` element is not `M`-regular, on a non-trivial module.\n", "keywords": {"regular": 0.04491197687864554, "non-trivial module": 0.04940384002065631, "element": 0.15831692877998726, "module": 0.15831692877998726, "non-trivial": 0.29736558256021506}}, {"docstring": "**Alias** of two_mul_le_add_sq`.\n", "keywords": {"Alias": 0.030396371632413578, "mul": 0.04491197687864554, "add": 0.04491197687864554}}, {"docstring": "Sum over a sigma type equals the sum of fiberwise sums. For rewriting in the reverse direction, use `finset.sum_sigma'`\n", "keywords": {"sigma type equals": 0.01960137430172867, "type equals": 0.04482689692617938, "fiberwise sums": 0.06563674807747755, "sigma type": 0.08548665180899907, "Sum": 0.14868279128010753, "equals the sum": 0.18104938051619054, "sum of fiberwise": 0.18104938051619054, "sigma": 0.19010636530481273, "type": 0.20713198455404339, "equals": 0.20713198455404339, "fiberwise": 0.20713198455404339, "reverse direction": 0.21176197370600428, "finset.sum": 0.24621274290295234, "sums": 0.29736558256021506, "direction": 0.3673621349224128, "rewriting": 0.4757034115784038, "reverse": 0.4757034115784038}}, {"docstring": "A space is totally disconnected iff its connected components are singletons.\n", "keywords": {"totally disconnected iff": 0.03339840940482845, "components are singletons": 0.04940384002065631, "space is totally": 0.09700399286574239, "totally disconnected": 0.09700399286574239, "disconnected iff": 0.09700399286574239, "iff its connected": 0.09700399286574239, "connected components": 0.09700399286574239, "singletons": 0.15831692877998726, "space": 0.29736558256021506, "totally": 0.29736558256021506, "disconnected": 0.29736558256021506, "iff": 0.29736558256021506, "connected": 0.29736558256021506, "components": 0.29736558256021506}}, {"docstring": "**Alias** of the forward direction of same_ray_iff_inv_norm_smul_eq_of_ne`.\n", "keywords": {"forward direction": 0.013527995261974615, "Alias": 0.030396371632413578, "ray": 0.04491197687864554, "iff": 0.04491197687864554, "inv": 0.04491197687864554, "norm": 0.04491197687864554, "smul": 0.04491197687864554, "forward": 0.1155310835876123, "direction": 0.1155310835876123}}, {"docstring": "Alternate statement of the **Weinstein\u2013Aronszajn identity**\n", "keywords": {"Aronszajn identity": 0.013797198203993007, "Weinstein": 0.030396371632413578, "Alternate statement": 0.04940384002065631, "Aronszajn": 0.08596317751626563, "Alternate": 0.15831692877998726, "identity": 0.15831692877998726, "statement": 0.29736558256021506}}, {"docstring": "An additive group homomorphism sends 0 to 0.\n", "keywords": {"group homomorphism sends": 0.0025258761156662004, "additive group homomorphism": 0.0042542192213185686, "homomorphism sends": 0.015380821171891606, "additive group": 0.02570861714399338, "group homomorphism": 0.02570861714399338, "sends": 0.09568045026443411, "additive": 0.15831692877998726, "group": 0.15831692877998726, "homomorphism": 0.15831692877998726}}, {"docstring": " If a continuous map with dense range maps a dense set to a subset of `t`, then `t` is a dense set.\n", "keywords": {"dense range maps": 0.0033869530829266125, "dense set": 0.00996125177056215, "dense range": 0.019039834113314186, "continuous map": 0.02270040280335732, "range maps": 0.02270040280335732, "dense": 0.04786220743821034, "set": 0.06801939479357878, "maps a dense": 0.08132503862364437, "map with dense": 0.11706849323080094, "continuous": 0.1301241842589393, "range": 0.1301241842589393, "subset": 0.1301241842589393, "map": 0.1705796097744607, "maps": 0.1705796097744607}}, {"docstring": " The Roth number is a subadditive function. Note that by Fekete's lemma this shows that the limit `roth_number_nat N / N` exists, but Roth's theorem gives the stronger result that this limit is actually `0`.\n", "keywords": {"subadditive function": 0.0289132409489086, "Roth": 0.09029196624696001, "Roth number": 0.1122246667585361, "Fekete lemma": 0.13325651871211874, "function": 0.1392597354171449, "Roth theorem": 0.14500094689637263, "number": 0.18624963956552917, "subadditive": 0.2017866607817524, "exists": 0.2401643771526955, "Fekete": 0.2515159957112124, "limit": 0.2658080080852406, "lemma this shows": 0.27970408624556065, "stronger result": 0.27970408624556065, "Note": 0.3597580601501892, "nat": 0.3597580601501892, "lemma": 0.4675140070775802, "shows": 0.4675140070775802, "theorem": 0.4675140070775802, "stronger": 0.4675140070775802, "result": 0.4675140070775802}}, {"docstring": "**Dirichlet's test** for antitone sequences.\n", "keywords": {"Dirichlet test": 0.013797198203993007, "antitone sequences": 0.04940384002065631, "Dirichlet": 0.08596317751626563, "test": 0.15831692877998726, "sequences": 0.15831692877998726, "antitone": 0.29736558256021506}}, {"docstring": "The diameter is monotonous with respect to inclusion\n", "keywords": {"respect to inclusion": 0.04940384002065631, "diameter is monotonous": 0.09700399286574239, "monotonous with respect": 0.09700399286574239, "inclusion": 0.15831692877998726, "diameter": 0.29736558256021506, "monotonous": 0.29736558256021506, "respect": 0.29736558256021506}}, {"docstring": "`x^m`, `m : \u2124` is convex on `(0, +\u221e)` for all `m`\n", "keywords": {"convex": 0.1155310835876123}}, {"docstring": "**Alias** of left.mul_eq_mul_iff_eq_and_eq`.\n", "keywords": {"Alias": 0.030396371632413578, "mul": 0.04491197687864554, "iff": 0.04491197687864554, "left.mul": 0.0771485953923296}}, {"docstring": "If two sets intersect, the diameter of the union is bounded by the sum of the diameters.\n", "keywords": {"sets intersect": 0.009386651690650429, "union is bounded": 0.013095151449018445, "intersect": 0.08179429269966654, "diameter": 0.11132229801625332, "diameters": 0.11132229801625332, "sets": 0.11369206228658875, "union": 0.11369206228658875, "bounded": 0.11369206228658875, "sum": 0.11369206228658875}}, {"docstring": "It is equivalent to sum a function over `fin n` or `finset.range n`.\n", "keywords": {"equivalent to sum": 0.02570861714399338, "sum a function": 0.02570861714399338, "fin": 0.09568045026443411, "finset.range": 0.09568045026443411, "equivalent": 0.15831692877998726, "sum": 0.15831692877998726, "function": 0.15831692877998726}}, {"docstring": "A field extension is algebraic if it is finite.\n", "keywords": {"field extension": 0.02570861714399338, "extension is algebraic": 0.02570861714399338, "finite": 0.09568045026443411, "field": 0.15831692877998726, "extension": 0.15831692877998726, "algebraic": 0.15831692877998726}}, {"docstring": " Summing `a^s.card * b^(n-s.card)` over all finite subsets `s` of a fintype of cardinality `n` gives `(a + b)^n`. The \"good\" proof involves expanding along all coordinates using the fact that `x^n` is multilinear, but multilinear maps are only available now over rings, so we give instead a proof reducing to the usual binomial theorem to have a result over semirings.\n", "keywords": {"finite subsets": 0.013182877867568644, "fintype of cardinality": 0.013182877867568644, "usual binomial theorem": 0.05553489342606381, "proof involves expanding": 0.05721840403091449, "Summing": 0.07127359713294396, "s.card": 0.07127359713294396, "subsets": 0.09951320759376356, "cardinality": 0.09951320759376356, "result over semirings": 0.1051849636800318, "finite": 0.1307499892069333, "fintype": 0.1307499892069333, "involves expanding": 0.13346443707706773, "usual binomial": 0.13346443707706773, "binomial theorem": 0.13346443707706773, "proof involves": 0.1372387974631529, "multilinear maps": 0.1372387974631529, "proof reducing": 0.1372387974631529, "proof": 0.17583948802085428, "multilinear": 0.17583948802085428, "good": 0.2104440927400966}}, {"docstring": "For any `p`, the power of `p` in `n^k` is `k` times the power in `n`\n", "keywords": {"times the power": 0.028893199202175198, "power": 0.11357121248292479, "times": 0.12363091320521931}}, {"docstring": " If two words have a common maximal reduction, then they correspond to the same element in the free group.\n", "keywords": {"common maximal reduction": 0.0025258761156662004, "maximal reduction": 0.015380821171891606, "free group": 0.015380821171891606, "common maximal": 0.02570861714399338, "reduction": 0.09568045026443411, "group": 0.09568045026443411, "words": 0.15831692877998726, "common": 0.15831692877998726, "maximal": 0.15831692877998726, "correspond": 0.15831692877998726, "element": 0.15831692877998726, "free": 0.15831692877998726}}, {"docstring": " Same as `nth_zero_mul_tail_prod`, but avoiding the `list.head` garbage complication by requiring the list to be nonempty.\n", "keywords": {"garbage complication": 0.015380821171891606, "complication by requiring": 0.02570861714399338, "requiring the list": 0.02570861714399338, "nth": 0.04491197687864554, "mul": 0.04491197687864554, "tail": 0.04491197687864554, "prod": 0.04491197687864554, "list.head": 0.04491197687864554, "garbage": 0.09568045026443411, "nonempty": 0.09568045026443411, "avoiding": 0.15831692877998726, "complication": 0.15831692877998726, "requiring": 0.15831692877998726, "list": 0.15831692877998726}}, {"docstring": "If `f` is a monotone function from `\u2115` to a preorder such that `x` lies between `f n` and  `f (n + 1)`, then `x` doesn't lie in the range of `f`.\n", "keywords": {"monotone function": 0.013453448411345069, "monotone": 0.11521656054299435, "function": 0.11521656054299435, "preorder": 0.11521656054299435, "range": 0.11521656054299435, "lies": 0.14324596573275905, "lie": 0.14324596573275905}}, {"docstring": "The zeroth modified cyclotomic polyomial is `1`.\n", "keywords": {"zeroth modified cyclotomic": 0.03339840940482845, "modified cyclotomic polyomial": 0.03339840940482845, "zeroth modified": 0.09700399286574239, "modified cyclotomic": 0.09700399286574239, "cyclotomic polyomial": 0.09700399286574239, "zeroth": 0.29736558256021506, "modified": 0.29736558256021506, "cyclotomic": 0.29736558256021506, "polyomial": 0.29736558256021506}}, {"docstring": "If a `l : list \u03b1` is `nodup l`, then all of its cyclic permutants are distinct.\n", "keywords": {"permutants are distinct": 0.015380821171891606, "cyclic permutants": 0.02570861714399338, "list": 0.09568045026443411, "nodup": 0.09568045026443411, "distinct": 0.09568045026443411, "cyclic": 0.15831692877998726, "permutants": 0.15831692877998726}}, {"docstring": "The reduction modulo `p` of the minimal polynomial of a root of unity `\u03bc` is separable.\n", "keywords": {"reduction modulo": 0.00899321792126428, "root of unity": 0.00899321792126428, "minimal polynomial": 0.013527995261974615, "modulo": 0.0771485953923296, "unity": 0.0771485953923296, "separable": 0.0771485953923296, "reduction": 0.1155310835876123, "minimal": 0.1155310835876123, "polynomial": 0.1155310835876123, "root": 0.1155310835876123}}, {"docstring": "The exponential map in `\ud835\udd42 = \u211d` or `\ud835\udd42 = \u2102` has strict derivative `1` at zero.\n", "keywords": {"strict derivative": 0.015380821171891606, "exponential map": 0.02570861714399338, "derivative": 0.09568045026443411, "exponential": 0.15831692877998726, "map": 0.15831692877998726, "strict": 0.15831692877998726}}, {"docstring": "A Liouville number is a Liouville number with any real exponent.\n", "keywords": {"Liouville number": 0.009181733294351749, "real exponent": 0.02541909697430123, "Liouville": 0.039693884779430415, "number": 0.11357121248292479, "exponent": 0.12363091320521931, "real": 0.2005079697193566}}, {"docstring": " Any matrix can be written as the product of transvections, a diagonal matrix, and transvections.\n", "keywords": {"diagonal matrix": 0.06104740651975287, "product of transvections": 0.07261862019402937, "transvections": 0.07726414307411157, "matrix": 0.14570071893270706, "written": 0.19744254481508877, "product": 0.19744254481508877, "diagonal": 0.19744254481508877}}, {"docstring": " In a finite-dimensional space, its dimension (seen as a cardinal) coincides with its `finrank`.\n", "keywords": {"finite-dimensional space": 0.015380821171891606, "finrank": 0.04491197687864554, "space": 0.09568045026443411, "dimension": 0.09568045026443411, "cardinal": 0.09568045026443411, "coincides": 0.09568045026443411, "finite-dimensional": 0.15831692877998726}}, {"docstring": "**Alias** of `left.add_pos`.\n", "keywords": {"Alias": 0.030396371632413578, "left.add": 0.04491197687864554, "pos": 0.04491197687864554}}, {"docstring": "Given a map `f : N \u2192 M` and an equivalence relation `r` on `\u03b2`, the equivalence relation    induced on `\u03b1` by `f` equals the kernel of `r`'s quotient map composed with `f`.\n", "keywords": {"equivalence relation induced": 0.0036410416144289164, "quotient map composed": 0.004486912379056007, "equivalence relation": 0.012053224280605516, "equals the kernel": 0.014444143345573873, "relation induced": 0.022785677162418617, "quotient map": 0.029581009763283855, "map composed": 0.029581009763283855, "equivalence": 0.07671213513331894, "relation": 0.07671213513331894, "equals": 0.09805740926331882, "map": 0.09893255831095867, "induced": 0.14520555658610762, "kernel": 0.14520555658610762, "quotient": 0.14520555658610762, "composed": 0.14520555658610762}}, {"docstring": " The series `\u2211' n, x ^ n / n!` is summable of any `x : \u211d`. See also `exp_series_div_summable` for a version that also works in `\u2102`, and `exp_series_summable'` for a version that works in any normed algebra over `\u211d` or `\u2102`.\n", "keywords": {"series": 0.09912911891641889, "exp": 0.1033814525378459, "summable": 0.16259747567906802, "version": 0.20998480301671388, "works": 0.2552173611191447, "div": 0.27147276295844197, "normed algebra": 0.348973297335776, "version that works": 0.49957247620382345, "normed": 0.5086211576237086, "algebra": 0.5086211576237086}}, {"docstring": "The minimal distance to a set (as `\u211d\u22650`) is uniformly continuous in point\n", "keywords": {"continuous in point": 0.04940384002065631, "minimal distance": 0.09700399286574239, "uniformly continuous": 0.09700399286574239, "set": 0.15831692877998726, "point": 0.15831692877998726, "minimal": 0.29736558256021506, "distance": 0.29736558256021506, "uniformly": 0.29736558256021506, "continuous": 0.29736558256021506}}, {"docstring": "This is the version of **Hall's Marriage Theorem** in terms of indexed families of finite sets `t : \u03b9 \u2192 finset \u03b1`.  It states that there is a set of distinct representatives if and only if every union of `k` of the sets has at least `k` elements.  Recall that `s.bUnion t` is the union of all the sets `t i` for `i \u2208 s`.  This theorem is bootstrapped from `finset.all_card_le_bUnion_card_iff_exists_injective'`, which has the additional constraint that `\u03b9` is a `fintype`.\n", "keywords": {"Hall Marriage Theorem": 0.0012412819176418847, "Hall Marriage": 0.004179835813907243, "Marriage Theorem": 0.02037540080914026, "terms of indexed": 0.027770702865276158, "indexed families": 0.027770702865276158, "families of finite": 0.027770702865276158, "finite sets": 0.05365087626509676, "Hall": 0.05974571420684289, "Marriage": 0.06966922337099077, "sets": 0.103255575880375, "finset": 0.1345202430021591, "Theorem": 0.14330957746204173, "card": 0.15236378634942147, "version": 0.16437861578739896, "terms": 0.16437861578739896, "indexed": 0.16437861578739896, "families": 0.16437861578739896, "finite": 0.16437861578739896, "union": 0.1725638969305888, "distinct representatives": 0.1972462767922165}}, {"docstring": "A special case of `colex_hom` which is sometimes useful.\n", "keywords": {"colex": 0.04491197687864554, "hom": 0.04491197687864554, "special case": 0.09700399286574239, "special": 0.29736558256021506, "case": 0.29736558256021506}}, {"docstring": "Commuting elements of finite order are closed under multiplication.\n", "keywords": {"Commuting elements": 0.04940384002065631, "closed under multiplication": 0.04940384002065631, "elements of finite": 0.09700399286574239, "finite order": 0.09700399286574239, "order are closed": 0.09700399286574239, "Commuting": 0.15831692877998726, "multiplication": 0.15831692877998726, "elements": 0.29736558256021506, "finite": 0.29736558256021506, "order": 0.29736558256021506, "closed": 0.29736558256021506}}, {"docstring": "Moving to the opposite group or group_with_zero commutes with taking powers.\n", "keywords": {"taking powers": 0.021567786782198985, "commutes with taking": 0.035715520099333646, "opposite group": 0.05259515133015473, "Moving": 0.11369206228658875, "powers": 0.11369206228658875, "group": 0.13453835116331675, "opposite": 0.18569843656348187, "commutes": 0.18569843656348187, "taking": 0.18569843656348187, "group or group": 0.2404655753837288}}, {"docstring": " In an open set, the iterated derivative within this set coincides with the global iterated derivative.\n", "keywords": {"global iterated derivative": 0.011782282943034048, "iterated derivative": 0.027200199006318638, "global iterated": 0.04771708711059453, "open set": 0.06340461682679863, "set coincides": 0.06340461682679863, "iterated": 0.11357121248292479, "derivative": 0.11357121248292479, "set": 0.14868279128010753, "open": 0.2005079697193566, "coincides": 0.2005079697193566, "global": 0.2005079697193566}}, {"docstring": "**Alias** of the reverse direction of is_max_on_dual_iff`.\n", "keywords": {"reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "max": 0.04491197687864554, "dual": 0.04491197687864554, "iff": 0.04491197687864554, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "Composition of first-order homomorphisms is associative.\n", "keywords": {"Composition of first-order": 0.04940384002065631, "homomorphisms is associative": 0.04940384002065631, "first-order homomorphisms": 0.09700399286574239, "Composition": 0.15831692877998726, "associative": 0.15831692877998726, "first-order": 0.29736558256021506, "homomorphisms": 0.29736558256021506}}, {"docstring": " The **Schwarz Lemma**: if `f : \u2102 \u2192 \u2102` sends an open disk with center `c` and a positive radius `R\u2081` to an open disk with center `f c` and radius `R\u2082`, then the absolute value of the derivative of `f` at `c` is at most the ratio `R\u2082 / R\u2081`.\n", "keywords": {"Schwarz Lemma": 0.002506173412742144, "disk with center": 0.0030538750467910057, "open disk": 0.004284181029385966, "sends an open": 0.008083874424388406, "positive radius": 0.01124676882632119, "center": 0.03293142581387477, "open": 0.046085705343764403, "disk": 0.046085705343764403, "radius": 0.046085705343764403, "Schwarz": 0.04999908208411247, "Lemma": 0.04999908208411247, "sends": 0.08700148317065824, "ratio": 0.08700148317065824, "positive": 0.12066307452866079, "absolute": 0.12066307452866079, "derivative": 0.12066307452866079}}, {"docstring": " If a function has a Taylor series at order at least `1`, then the term of order `1` of this series is a derivative of `f`.\n", "keywords": {"Taylor series": 0.014879681247693342, "term of order": 0.06722676226840862, "Taylor": 0.07502681962702384, "series": 0.09770854302279938, "order": 0.09770854302279938, "series at order": 0.14030894128388027, "function": 0.14390902704051098, "term": 0.14390902704051098, "derivative": 0.14390902704051098}}, {"docstring": "The support of `n.factorization` is exactly `n.factors.to_finset`\n", "keywords": {"n.factorization": 0.04491197687864554, "finset": 0.04491197687864554, "support": 0.29736558256021506}}, {"docstring": "`\u03c7\u2084` takes values in `{0, 1, -1}`\n", "keywords": {}}, {"docstring": " A version of `antisymm` with `r` explicit.  This lemma matches the lemmas from lean core in `init.algebra.classes`, but is missing there.\n", "keywords": {"antisymm": 0.07258934678807509, "explicit": 0.07258934678807509, "version": 0.23843406751375792, "lean core": 0.3724275679522048, "lemma matches": 0.4624443418465675, "matches": 0.5209261917026199, "lean": 0.5209261917026199, "core": 0.5209261917026199, "missing": 0.5209261917026199, "lemma": 0.6070212988002157, "lemmas": 0.6070212988002157, "matches the lemmas": 0.8044041031124162, "lemmas from lean": 0.8044041031124162}}, {"docstring": "**Alias** of add_sq`.\n", "keywords": {"Alias": 0.030396371632413578, "add": 0.15831692877998726}}, {"docstring": "`cyclotomic' n R` is monic.\n", "keywords": {"cyclotomic": 0.04491197687864554, "monic": 0.15831692877998726}}, {"docstring": " Taking the span by a large ring of the span by the small ring is the same as taking the span by just the large ring.\n", "keywords": {"Taking the span": 0.004321324734698542, "large ring": 0.00769991675566413, "small ring": 0.015264163476010185, "span": 0.025509916831744722, "ring": 0.04515214734550917, "Taking": 0.05598211191448767, "large": 0.05598211191448767, "small": 0.11099266717765445}}, {"docstring": "By definition, if `f` is not invertible then `inverse f = 0`.\n", "keywords": {"definition": 0.09568045026443411, "inverse": 0.09568045026443411, "invertible": 0.15831692877998726}}, {"docstring": "The Legendre symbol depends only on `a` mod `p`.\n", "keywords": {"Legendre symbol depends": 0.015042304599106411, "mod": 0.04491197687864554, "Legendre symbol": 0.04498862876540802, "symbol depends": 0.09700399286574239, "Legendre": 0.1447773057422032, "symbol": 0.29736558256021506, "depends": 0.29736558256021506}}, {"docstring": "A division_ring is one-dimensional as a vector space over itself.\n", "keywords": {"ring is one-dimensional": 0.015380821171891606, "vector space": 0.02570861714399338, "division": 0.09568045026443411, "ring": 0.09568045026443411, "one-dimensional": 0.15831692877998726, "vector": 0.15831692877998726, "space": 0.15831692877998726}}, {"docstring": " The inner product of a nonzero vector with a positive multiple of itself, divided by the product of their norms, has value 1.\n", "keywords": {"nonzero vector": 0.018641876658774398, "positive multiple": 0.018641876658774398, "product": 0.069255433448279, "divided": 0.09101163530720666, "norms": 0.09101163530720666, "nonzero": 0.13528014248445303, "vector": 0.13528014248445303, "positive": 0.13528014248445303, "multiple": 0.13528014248445303}}, {"docstring": "Bernoulli's inequality reformulated to estimate `a^n`.\n", "keywords": {"Bernoulli inequality reformulated": 0.01655915082773619, "Bernoulli inequality": 0.04940384002065631, "reformulated to estimate": 0.04940384002065631, "inequality reformulated": 0.09700399286574239, "Bernoulli": 0.15831692877998726, "estimate": 0.15831692877998726, "inequality": 0.29736558256021506, "reformulated": 0.29736558256021506}}, {"docstring": "A map to an additive group preserving addition is an additive monoid homomorphism.\n", "keywords": {"additive monoid homomorphism": 0.004473279713626478, "group preserving addition": 0.006822309199625383, "additive group preserving": 0.007491922961721225, "monoid homomorphism": 0.021114872146320036, "group preserving": 0.03498702377830618, "preserving addition": 0.03498702377830618, "additive group": 0.03833027959745858, "additive monoid": 0.03833027959745858, "additive": 0.10038999320777728, "homomorphism": 0.11246769819744629, "map": 0.1838594885424691, "group": 0.1838594885424691, "preserving": 0.1838594885424691, "addition": 0.1838594885424691, "monoid": 0.1838594885424691}}, {"docstring": "**Alias** of `ne_of_mem_of_not_mem`.\n", "keywords": {"mem": 0.02245598843932277, "Alias": 0.03625524040669144}}, {"docstring": " If `f` is an antitone function from `\u2115` to a preorder such that `x` lies between `f (n + 1)` and `f n`, then `x` doesn't lie in the range of `f`.\n", "keywords": {"antitone function": 0.013453448411345069, "antitone": 0.11521656054299435, "function": 0.11521656054299435, "preorder": 0.11521656054299435, "range": 0.11521656054299435, "lies": 0.14324596573275905, "lie": 0.14324596573275905}}, {"docstring": "The presheaf of `J`-closed sieves is a `J`-sheaf. The proof of this is adapted from [MM92], Chatper III, Section 7, Lemma 1.\n", "keywords": {"closed sieves": 0.02541909697430123, "Chatper III": 0.040278556425967886, "sheaf": 0.05899937629682816, "Section": 0.11555589791117535, "Lemma": 0.11555589791117535, "closed": 0.12363091320521931, "Chatper": 0.19677146788549632, "III": 0.19677146788549632, "presheaf": 0.2005079697193566, "sieves": 0.2005079697193566, "proof": 0.46553351027698087, "adapted": 0.46553351027698087}}, {"docstring": "Show that `nat.choose` is increasing for small values of the right argument.\n", "keywords": {"nat.choose": 0.04491197687864554, "increasing for small": 0.09700399286574239, "Show": 0.15831692877998726, "argument": 0.15831692877998726, "increasing": 0.29736558256021506, "small": 0.29736558256021506}}, {"docstring": " A point is in the `affine_span` of an indexed family if and only if it is an `affine_combination` with sum of weights 1, provided the underlying ring is nontrivial.\n", "keywords": {"sum of weights": 0.011631263860918884, "provided the underlying": 0.011631263860918884, "ring is nontrivial": 0.011631263860918884, "indexed family": 0.017416869738890953, "underlying ring": 0.017416869738890953, "affine": 0.018333336826096672, "span": 0.0514064682630094, "combination": 0.0514064682630094, "weights": 0.0878757573221198, "provided": 0.0878757573221198, "nontrivial": 0.0878757573221198, "point": 0.13083850849172096, "indexed": 0.13083850849172096, "family": 0.13083850849172096, "sum": 0.13083850849172096, "underlying": 0.13083850849172096, "ring": 0.13083850849172096}}, {"docstring": " Composition by continuous linear maps on the left preserves `C^n` functions in a domain at a point.\n", "keywords": {"continuous linear maps": 0.0042542192213185686, "Composition by continuous": 0.015380821171891606, "left preserves": 0.015380821171891606, "continuous linear": 0.02570861714399338, "linear maps": 0.02570861714399338, "Composition": 0.09568045026443411, "preserves": 0.09568045026443411, "functions": 0.09568045026443411, "point": 0.09568045026443411, "continuous": 0.15831692877998726, "linear": 0.15831692877998726, "maps": 0.15831692877998726, "left": 0.15831692877998726, "domain": 0.15831692877998726}}, {"docstring": "Cardinality of an `Ioo` of finsets.\n", "keywords": {"Ioo": 0.030396371632413578, "Cardinality": 0.09568045026443411, "finsets": 0.09568045026443411}}, {"docstring": "Precomposing `f` with `prod.fst` is `C^n`\n", "keywords": {"Precomposing": 0.04491197687864554, "prod.fst": 0.04491197687864554}}, {"docstring": "The head term of the sequence with head of `v` is just the integer part of `v`.\n", "keywords": {"integer part": 0.019557279302732804, "head term": 0.02635223776265893, "sequence with head": 0.06177684479462527, "head": 0.09269208833952335, "term": 0.1384995633470844, "sequence": 0.1384995633470844, "integer": 0.1384995633470844, "part": 0.1384995633470844}}, {"docstring": "The `diag` of `s : finset \u03b1` is sent on a finset of `sym2 \u03b1` of card `s.card`.\n", "keywords": {"diag": 0.054709255964732355, "s.card": 0.054709255964732355, "finset": 0.09269208833952335, "card": 0.09329120537733218}}, {"docstring": " Writing explicitly the `n+1`-th derivative as the composition of a currying linear equiv, and the derivative of the `n`-th derivative.\n", "keywords": {"currying linear equiv": 0.0014033964188006848, "Writing explicitly": 0.011105384224262597, "linear equiv": 0.011105384224262597, "currying linear": 0.015455129647434142, "derivative": 0.0531317968436764, "Writing": 0.08902894120058116, "equiv": 0.08902894120058116, "explicitly": 0.12336897526125244, "composition": 0.12336897526125244, "currying": 0.12336897526125244, "linear": 0.12336897526125244}}, {"docstring": "**Alias** of the forward direction of lt_sub_iff_add_lt`.\n", "keywords": {"forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "add": 0.04491197687864554, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "The indexed minimum of a function is bounded below by a uniform lower bound\n", "keywords": {"uniform lower bound": 0.0025258761156662004, "lower bound": 0.015380821171891606, "indexed minimum": 0.02570861714399338, "function is bounded": 0.02570861714399338, "uniform lower": 0.02570861714399338, "bound": 0.09568045026443411, "indexed": 0.15831692877998726, "minimum": 0.15831692877998726, "function": 0.15831692877998726, "bounded": 0.15831692877998726, "uniform": 0.15831692877998726, "lower": 0.15831692877998726}}, {"docstring": " Two finite measures on a Borel space are equal if they agree on all left-infinite right-closed intervals.\n", "keywords": {"left-infinite right-closed intervals": 0.0025258761156662004, "Borel space": 0.013797198203993007, "right-closed intervals": 0.015380821171891606, "finite measures": 0.02570861714399338, "space are equal": 0.02570861714399338, "left-infinite right-closed": 0.02570861714399338, "Borel": 0.08596317751626563, "intervals": 0.09568045026443411, "finite": 0.15831692877998726, "measures": 0.15831692877998726, "space": 0.15831692877998726, "equal": 0.15831692877998726, "agree": 0.15831692877998726, "left-infinite": 0.15831692877998726, "right-closed": 0.15831692877998726}}, {"docstring": " For every set `s` and a countable collection of measures `\u03bc i` there exists a measurable superset `t \u2287 s` such that each measure `\u03bc i` takes the same value on `s` and `t`.\n", "keywords": {"measurable superset": 0.012465543599998139, "countable collection": 0.018641876658774394, "exists a measurable": 0.018641876658774394, "collection of measures": 0.034111848419289444, "set": 0.09101163530720666, "superset": 0.09101163530720666, "measures": 0.10043895634624134, "measure": 0.10043895634624134, "countable": 0.135280142484453, "collection": 0.135280142484453, "exists": 0.135280142484453, "measurable": 0.135280142484453}}, {"docstring": "Note that `star_one` is already a global simp lemma, but this one works with dsimp too\n", "keywords": {"global simp lemma": 0.0025258761156662004, "simp lemma": 0.015380821171891606, "global simp": 0.02570861714399338, "works with dsimp": 0.02570861714399338, "star": 0.04491197687864554, "Note": 0.09568045026443411, "lemma": 0.09568045026443411, "global": 0.15831692877998726, "simp": 0.15831692877998726, "works": 0.15831692877998726, "dsimp": 0.15831692877998726}}, {"docstring": "Corollary of Hahn-Banach.  Given a nonzero element `x` of a normed space, there exists an    element of the dual space, of norm `1`, whose value on `x` is `\u2225x\u2225`.\n", "keywords": {"Corollary of Hahn-Banach": 0.01384579851817244, "Corollary": 0.11686192903066005, "Hahn-Banach": 0.11686192903066005, "normed space": 0.13529302245728006, "dual space": 0.13529302245728006, "space": 0.14962134509685407, "nonzero element": 0.20752361735411642, "element": 0.21577345703011622, "norm": 0.31486955834465635, "exists an element": 0.3923092631469853, "nonzero": 0.39823908368262456, "normed": 0.39823908368262456, "exists": 0.39823908368262456, "dual": 0.39823908368262456}}, {"docstring": " The product `x * r`, `r : \u211a`, `r \u2260 0`, is a Liouville number with exponent `p` if and only if `x` satisfies the same condition.\n", "keywords": {"Liouville number": 0.007743432063478832, "number with exponent": 0.00899321792126428, "Liouville": 0.06650965107397505, "product": 0.0771485953923296, "exponent": 0.0771485953923296, "satisfies": 0.0771485953923296, "condition": 0.0771485953923296, "number": 0.1155310835876123}}, {"docstring": " An affine combination is unaffected by changing the weights to the corresponding indicator function and adding points to the set.\n", "keywords": {"affine combination": 0.013527995261974615, "combination is unaffected": 0.013527995261974615, "unaffected by changing": 0.013527995261974615, "changing the weights": 0.013527995261974615, "indicator function": 0.013527995261974615, "function and adding": 0.013527995261974615, "adding points": 0.013527995261974615, "set": 0.0771485953923296, "affine": 0.1155310835876123, "combination": 0.1155310835876123, "unaffected": 0.1155310835876123, "changing": 0.1155310835876123, "weights": 0.1155310835876123, "indicator": 0.1155310835876123, "function": 0.1155310835876123, "adding": 0.1155310835876123, "points": 0.1155310835876123}}, {"docstring": "Two solutions are equal iff they are equal on `range E.order`.\n", "keywords": {"range E.order": 0.007360818540270905, "solutions are equal": 0.04051498248759491, "equal iff": 0.04051498248759491, "E.order": 0.06341998722529081, "equal": 0.10356599227702172, "range": 0.11521656054299435, "solutions": 0.1879836817695587, "iff": 0.1879836817695587}}, {"docstring": "The real exponential function tends to `+\u221e` at `+\u221e`.\n", "keywords": {"real exponential function": 0.0042542192213185686, "real exponential": 0.02570861714399338, "exponential function": 0.02570861714399338, "real": 0.15831692877998726, "exponential": 0.15831692877998726, "function": 0.15831692877998726}}, {"docstring": " If two functions coincide on a set `s` of unique differentiability, then their iterated differentials within this set coincide.\n", "keywords": {"unique differentiability": 0.0233550736766052, "iterated differentials": 0.038584678130008584, "functions coincide": 0.05755977077196411, "set coincide": 0.08664488659198114, "differentiability": 0.11840455484321102, "coincide": 0.1411879566095664, "set": 0.1411879566095664, "functions": 0.19274649316101516, "unique": 0.19274649316101516, "iterated": 0.19274649316101516, "differentials": 0.19274649316101516}}, {"docstring": " The sum of two upper semicontinuous functions is upper semicontinuous. Formulated with `[has_continuous_add]`. The primed version of the lemma uses an explicit continuity assumption on addition, for application to `ereal`.\n", "keywords": {"upper semicontinuous functions": 0.007327296516767814, "upper semicontinuous": 0.016851204808897166, "semicontinuous functions": 0.03821554584844725, "functions is upper": 0.08667762295794612, "upper": 0.09028232117950413, "semicontinuous": 0.09028232117950413, "sum": 0.2038542769622493, "functions": 0.2038542769622493, "continuous": 0.2425057621221154, "add": 0.2425057621221154, "ereal": 0.31807004650910337, "assumption on addition": 0.3438068115293896, "Formulated": 0.36270881646612724, "explicit continuity assumption": 0.44505054844584063, "addition": 0.4533135999375753, "primed version": 0.46742777496856974, "explicit continuity": 0.46742777496856974, "continuity assumption": 0.46742777496856974, "primed": 0.5643894539005718, "version": 0.5643894539005718}}, {"docstring": "A singleton `{a}` is accessible under `cut_expand r` if `a` is accessible under `r`,  assuming `r` is irreflexive.\n", "keywords": {"accessible": 0.05101428509898996, "cut": 0.05393656033701752, "assuming": 0.05393656033701752, "singleton": 0.09202664026077896, "expand": 0.09202664026077896, "irreflexive": 0.09202664026077896}}, {"docstring": " Constructing an affine subspace from a point in a subspace and that subspace's direction yields the original subspace.\n", "keywords": {"subspace direction yields": 0.004528803558513516, "Constructing an affine": 0.01257393079264129, "direction yields": 0.01746556715975535, "yields the original": 0.01746556715975535, "affine subspace": 0.03310867127057209, "subspace direction": 0.03310867127057209, "original subspace": 0.03310867127057209, "subspace": 0.061151099157254175, "Constructing": 0.0947791560973086, "affine": 0.13101815702343766, "point": 0.13101815702343766, "direction": 0.13101815702343766, "yields": 0.13101815702343766, "original": 0.13101815702343766}}, {"docstring": "We can also define permutation matrices by permuting the rows of the identity matrix.\n", "keywords": {"define permutation matrices": 0.0042542192213185686, "identity matrix": 0.015380821171891606, "define permutation": 0.02570861714399338, "permutation matrices": 0.02570861714399338, "matrices by permuting": 0.02570861714399338, "permuting the rows": 0.02570861714399338, "matrix": 0.09568045026443411, "define": 0.15831692877998726, "permutation": 0.15831692877998726, "matrices": 0.15831692877998726, "permuting": 0.15831692877998726, "rows": 0.15831692877998726, "identity": 0.15831692877998726}}, {"docstring": "Prefer `boundaries_to_cycles`.\n", "keywords": {"Prefer": 0.04491197687864554, "boundaries": 0.04491197687864554, "cycles": 0.04491197687864554}}, {"docstring": "On non-dependent functions, `pi.mul_single` is symmetric in the two indices.\n", "keywords": {"pi.mul": 0.04491197687864554, "single": 0.04491197687864554, "non-dependent functions": 0.04940384002065631, "functions": 0.15831692877998726, "indices": 0.15831692877998726, "non-dependent": 0.29736558256021506, "symmetric": 0.29736558256021506}}, {"docstring": " If the inner product of two vectors is equal to the product of their norms (i.e., `\u27eax, y\u27eb = \u2225x\u2225 * \u2225y\u2225`), then the two vectors are nonnegative real multiples of each other. One form of the equality case for Cauchy-Schwarz. Compare `abs_inner_eq_norm_iff`, which takes the weaker hypothesis `abs \u27eax, y\u27eb = \u2225x\u2225 * \u2225y\u2225`.\n", "keywords": {"nonnegative real multiples": 0.0038017578780442512, "nonnegative real": 0.023884242856266835, "real multiples": 0.023884242856266835, "vectors is equal": 0.04589362407841557, "vectors are nonnegative": 0.04589362407841557, "product": 0.06104232052681061, "vectors": 0.06104232052681061, "abs": 0.11911636296366937, "case for Cauchy-Schwarz": 0.14253638033698168, "equal": 0.15273209520009845, "nonnegative": 0.15273209520009845, "real": 0.15273209520009845, "multiples": 0.15273209520009845, "equality case": 0.17404031672856876, "norms": 0.23840552254880937, "norm": 0.23840552254880937, "weaker hypothesis": 0.24401564491441155, "Cauchy-Schwarz": 0.3240203308698378, "Compare": 0.33909653557002245, "iff": 0.33909653557002245}}, {"docstring": "If `l\u2081 l\u2082` and `l\u2083` are lists and `l\u2081 ++ l\u2082` and `l\u2082 ++ l\u2083` both satisfy  `chain' R`, then so does `l\u2081 ++ l\u2082 ++ l\u2083` provided `l\u2082 \u2260 []`\n", "keywords": {"chain": 0.04491197687864554, "satisfy": 0.05299653348376953, "provided": 0.05299653348376953, "lists": 0.061630273523589456}}, {"docstring": " A nondegenerate quadratic form on the complex numbers is equivalent to the sum of squares, i.e. `weighted_sum_squares` with weight `\u03bb i : \u03b9, 1`.\n", "keywords": {"nondegenerate quadratic form": 0.007321883374053632, "nondegenerate quadratic": 0.03663237450220032, "quadratic form": 0.03663237450220032, "complex numbers": 0.03663237450220032, "numbers is equivalent": 0.03663237450220032, "weighted": 0.054709255964732355, "squares": 0.07162298286637953, "weight": 0.11521656054299435, "sum": 0.13667842094541144, "sum of squares": 0.13873553855515972, "nondegenerate": 0.1879836817695587, "quadratic": 0.1879836817695587, "form": 0.1879836817695587, "complex": 0.1879836817695587, "numbers": 0.1879836817695587, "equivalent": 0.1879836817695587}}, {"docstring": "A single vertex, in terms of `points_with_circumcenter`.\n", "keywords": {"points": 0.04491197687864554, "circumcenter": 0.04491197687864554, "single vertex": 0.04940384002065631, "vertex": 0.15831692877998726, "single": 0.29736558256021506, "terms": 0.29736558256021506}}, {"docstring": "If every vector is a multiple of some `v : V`, then `V` has dimension at most one.\n", "keywords": {"vector": 0.1155310835876123, "multiple": 0.1155310835876123, "dimension": 0.1155310835876123}}, {"docstring": "The product of `f` over `insert a s` is the same as the product over `s`, as long as `a` is in `s` or `f a = 1`.\n", "keywords": {"product": 0.07571113878390312, "insert": 0.09713402394201612, "long": 0.14390902704051098}}, {"docstring": "When all the indexed types are the same, the dependent product is just the regular product.\n", "keywords": {"indexed types": 0.013453448411345069, "dependent product": 0.016781270735569963, "regular product": 0.016781270735569963, "product": 0.07162298286637953, "indexed": 0.11521656054299435, "types": 0.11521656054299435, "dependent": 0.11521656054299435, "regular": 0.11521656054299435}}, {"docstring": "Pullback a `nontrivial` instance along a function sending `0` to `0` and `1` to `1`.\n", "keywords": {"function sending": 0.015380821171891606, "nontrivial": 0.04491197687864554, "Pullback": 0.09568045026443411, "instance": 0.09568045026443411, "sending": 0.09568045026443411, "function": 0.15831692877998726}}, {"docstring": " `smul` is a closed map in the second argument.  The lemma that `smul` is a closed map in the first argument (for a normed space over a complete normed field) is `is_closed_map_smul_left` in `analysis.normed_space.finite_dimension`.\n", "keywords": {"closed map": 0.029709164426189878, "smul": 0.03066820110400703, "closed": 0.07894147206098148, "map": 0.07894147206098148, "argument": 0.10913304520895652, "complete normed field": 0.1342545151162162, "normed field": 0.21841904421327585, "normed": 0.2490980054046153, "left": 0.2645596274674012, "analysis.normed": 0.2645596274674012, "space.finite": 0.2645596274674012, "dimension": 0.2645596274674012, "normed space": 0.28676451125722124, "complete normed": 0.28676451125722124, "field": 0.3598268592587876, "lemma": 0.447328000380988, "space": 0.447328000380988, "complete": 0.447328000380988}}, {"docstring": " Suppose all distances from `p\u2081` and `p\u2082` to the points of a simplex are equal, and that `p\u2081` and `p\u2082` lie in the affine span of `p` with the vertices of that simplex.  Then `p\u2081` and `p\u2082` are equal or reflections of each other in the affine span of the vertices of the simplex.\n", "keywords": {"affine span": 0.014012865816899533, "Suppose all distances": 0.01661849894241743, "affine": 0.08255559108309582, "span": 0.08255559108309582, "vertices": 0.08255559108309582, "simplex": 0.08350024319554306, "equal": 0.09812030466485057, "Suppose": 0.11537702779048872, "distances": 0.14168192168383814, "points": 0.14168192168383814, "lie": 0.14168192168383814, "simplex are equal": 0.1491736854242377, "equal or reflections": 0.15936728487253646, "reflections": 0.3643918221199528}}, {"docstring": " The composition of a continuous linear map with a continuous multilinear map is a bounded bilinear operation.\n", "keywords": {"bounded bilinear operation": 0.00196598076995442, "continuous linear map": 0.004199094682732426, "continuous multilinear map": 0.004199094682732426, "bilinear operation": 0.013546417228156258, "bounded bilinear": 0.020225813225353943, "continuous linear": 0.02108961152940521, "continuous multilinear": 0.02108961152940521, "linear map": 0.027430531955772185, "multilinear map": 0.027430531955772185, "continuous": 0.07334489383741181, "map": 0.094808423351325, "operation": 0.09492398510093508, "composition": 0.1408007092310104, "linear": 0.1408007092310104, "multilinear": 0.1408007092310104, "bounded": 0.1408007092310104, "bilinear": 0.1408007092310104}}, {"docstring": " The exponential map in a commutative Banach-algebra `\ud835\udd38` over `\ud835\udd42 = \u211d` or `\ud835\udd42 = \u2102` has Fr\u00e9chet-derivative `exp \ud835\udd42 x \u2022 1 : \ud835\udd38 \u2192L[\ud835\udd42] \ud835\udd38` at any point `x`.\n", "keywords": {"commutative Banach-algebra": 0.004156274195678376, "exponential map": 0.009239332327148086, "Banach-algebra": 0.04325931859548787, "Fr\u00e9chet-derivative": 0.04325931859548787, "exp": 0.06844581806138879, "point": 0.06844581806138879, "exponential": 0.09568045026443411, "map": 0.09568045026443411, "commutative": 0.09568045026443411}}, {"docstring": " Two multivariate polynomials over an infinite integral domain are equal if they are equal upon evaluating them on an arbitrary assignment of the variables.\n", "keywords": {"infinite integral domain": 0.0063724208254466, "multivariate polynomials": 0.03346752176983843, "infinite integral": 0.03346752176983843, "integral domain": 0.03346752176983843, "arbitrary assignment": 0.03346752176983843, "domain are equal": 0.036342152494152444, "equal upon evaluating": 0.08286183772138443, "equal": 0.09743480643470091, "variables": 0.10987504304330521, "multivariate": 0.17995476918065306, "polynomials": 0.17995476918065306, "infinite": 0.17995476918065306, "integral": 0.17995476918065306, "domain": 0.17995476918065306, "evaluating": 0.17995476918065306, "arbitrary": 0.17995476918065306, "assignment": 0.17995476918065306}}, {"docstring": "A variant of `matrix.det_units_conj`.\n", "keywords": {"matrix.det": 0.04491197687864554, "units": 0.04491197687864554, "conj": 0.04491197687864554, "variant": 0.29736558256021506}}, {"docstring": "**Alias** of left.mul_eq_mul_iff_eq_and_eq`.\n", "keywords": {"Alias": 0.030396371632413578, "mul": 0.04491197687864554, "iff": 0.04491197687864554, "left.mul": 0.0771485953923296}}, {"docstring": "A function is `C^(n + 1)` on a domain iff locally, it has a derivative which is `C^n`.\n", "keywords": {"domain iff locally": 0.0010606143890052174, "iff locally": 0.00899321792126428, "domain iff": 0.013527995261974615, "locally": 0.0771485953923296, "function": 0.1155310835876123, "domain": 0.1155310835876123, "iff": 0.1155310835876123, "derivative": 0.1155310835876123}}, {"docstring": "**Alias** of the forward direction of mdifferentiable_on_iff_differentiable_on`.\n", "keywords": {"direction of mdifferentiable": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "differentiable": 0.04491197687864554, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "When a list of the form `[...xs, sep, ...as]` is split on `p`, the first element is `xs`,  assuming no element in `xs` satisfies `p` but `sep` does satisfy `p`\n", "keywords": {"sep": 0.020602899695743707, "assuming no element": 0.04388107386360311, "satisfies": 0.055708263664958506, "element": 0.094808423351325, "form": 0.09492398510093508, "assuming": 0.09492398510093508, "satisfy": 0.09492398510093508, "list": 0.1408007092310104, "split": 0.1408007092310104}}, {"docstring": "**Alias** of btw_of_sbtw`.\n", "keywords": {"Alias": 0.030396371632413578, "sbtw": 0.04491197687864554, "btw": 0.09568045026443411}}, {"docstring": " The circumcenter of a simplex, in terms of `points_with_circumcenter`.\n", "keywords": {"points": 0.055708263664958506, "simplex": 0.11718348279991213, "circumcenter": 0.13945519496053638, "terms": 0.19092478917347616}}, {"docstring": " If `a \u2264 b`, then `(b, +\u221e) \u2286 [a, +\u221e)`. In preorders, this is just an implication. If you need the equivalence in dense linear orders, use `Ioi_subset_Ici_iff`.\n", "keywords": {"Ioi": 0.16940121402170724, "Ici": 0.16940121402170724, "subset": 0.26303348124903125, "iff": 0.26303348124903125, "dense linear orders": 0.35136518550240553, "linear orders": 0.35487136790899465, "preorders": 0.3553358554145339, "implication": 0.3553358554145339, "orders": 0.44538603402402266, "equivalence in dense": 0.5286731219590494, "dense linear": 0.5286731219590494, "equivalence": 0.5880798524606783, "dense": 0.5880798524606783, "linear": 0.5880798524606783}}, {"docstring": "The product of the constant function `0` over any set equals `0`.\n", "keywords": {"constant function": 0.015380821171891606, "set equals": 0.015380821171891606, "function": 0.09568045026443411, "equals": 0.09568045026443411, "product": 0.15831692877998726, "constant": 0.15831692877998726, "set": 0.15831692877998726}}, {"docstring": " The exponential in a Banach-algebra `\ud835\udd38` over a normed field `\ud835\udd42` has strict Fr\u00e9chet-derivative `1 : \ud835\udd38 \u2192L[\ud835\udd42] \ud835\udd38` at zero, as long as it converges on a neighborhood of zero.\n", "keywords": {"strict Fr\u00e9chet-derivative": 0.005548741293751374, "normed field": 0.00899321792126428, "Banach-algebra": 0.04776309965539685, "Fr\u00e9chet-derivative": 0.04776309965539685, "field": 0.0771485953923296, "exponential": 0.1155310835876123, "normed": 0.1155310835876123, "strict": 0.1155310835876123, "long": 0.1155310835876123, "converges": 0.1155310835876123, "neighborhood": 0.1155310835876123}}, {"docstring": "Reorder a product.  The difference with `prod_bij'` is that the bijection is specified as a surjective injection, rather than by an inverse function.\n", "keywords": {"Reorder a product": 0.01552184797949213, "Reorder": 0.12363091320521931, "product": 0.12363091320521931, "prod": 0.17881754828257995, "surjective injection": 0.18075564686791562, "inverse function": 0.18075564686791562, "bij": 0.32883716426354986, "injection": 0.32883716426354986, "function": 0.32883716426354986, "difference": 0.46553351027698087, "bijection": 0.46553351027698087, "surjective": 0.46553351027698087, "inverse": 0.46553351027698087}}, {"docstring": "Reduction to diagonal form by elementary operations is invariant under reindexing.\n", "keywords": {"Reduction to diagonal": 0.04940384002065631, "invariant under reindexing": 0.04940384002065631, "diagonal form": 0.09700399286574239, "form by elementary": 0.09700399286574239, "elementary operations": 0.09700399286574239, "operations is invariant": 0.09700399286574239, "Reduction": 0.15831692877998726, "reindexing": 0.15831692877998726, "diagonal": 0.29736558256021506, "form": 0.29736558256021506, "elementary": 0.29736558256021506, "operations": 0.29736558256021506, "invariant": 0.29736558256021506}}, {"docstring": "The trace map from a finite field to its prime field is nongedenerate.\n", "keywords": {"trace map": 0.035715520099333646, "finite field": 0.05259515133015473, "prime field": 0.05259515133015473, "field is nongedenerate": 0.0710891909196062, "nongedenerate": 0.11369206228658875, "field": 0.13453835116331675, "trace": 0.18569843656348187, "map": 0.18569843656348187, "finite": 0.18569843656348187, "prime": 0.18569843656348187}}, {"docstring": "Given a CHSH tuple (A\u2080, A\u2081, B\u2080, B\u2081) in a *commutative* ordered `*`-algebra over \u211d, `A\u2080 * B\u2080 + A\u2080 * B\u2081 + A\u2081 * B\u2080 - A\u2081 * B\u2081 \u2264 2`.  (We could work over \u2124[\u215f2] if we wanted to!)\n", "keywords": {"CHSH tuple": 0.007701730664586866, "commutative": 0.05899937629682816, "ordered": 0.05899937629682816, "CHSH": 0.07621084492189614, "tuple": 0.10028582371075691, "algebra": 0.10028582371075691, "work": 0.37689977775222827, "wanted": 0.37689977775222827}}, {"docstring": "TODO: Generalise to `submonoid.powers`.\n", "keywords": {"TODO": 0.030396371632413578, "submonoid.powers": 0.04491197687864554, "Generalise": 0.08596317751626563}}, {"docstring": "An induction principle for additive closure membership. If `p` holds for `0` and all elements of `s`, and is preserved under addition, then `p` holds for all elements of the additive closure of `s`.\n", "keywords": {"additive closure membership": 0.015817853456621213, "induction principle": 0.04372598164085685, "closure membership": 0.04545878333566454, "additive closure": 0.05220691164844203, "holds": 0.13754430191315367, "membership": 0.1414157594010238, "principle for additive": 0.142670717019886, "additive": 0.1537386583321911, "closure": 0.1537386583321911, "elements": 0.18611416151487303, "induction": 0.2046805318390021, "principle": 0.2046805318390021, "preserved under addition": 0.20735178944546265, "addition": 0.3638846520020924, "preserved": 0.4719654628809573}}, {"docstring": " If `f` sends two periodic points `x` and `y` of the same positive period to the same point, then `x = y`. For a similar statement about points of different periods see `eq_of_apply_eq`.\n", "keywords": {"sends two periodic": 0.03148889601639561, "positive period": 0.08777926344231442, "periodic points": 0.10513363408208994, "sends": 0.14538016786146507, "periodic": 0.20998472877949162, "positive": 0.20998472877949162, "points": 0.22652136642273069, "apply": 0.24943440037652218, "similar statement": 0.2994017296427462, "period": 0.3842938595979171, "periods": 0.3842938595979171, "point": 0.45304273284546137, "similar": 0.48001568896154584, "statement": 0.48001568896154584, "statement about points": 0.6112835000778742}}, {"docstring": "The torsion submonoid of an abelian group equals the torsion subgroup as a submonoid.\n", "keywords": {"abelian group equals": 0.00821679711802916, "abelian group": 0.039481144315219374, "group equals": 0.039481144315219374, "equals the torsion": 0.04437656514447953, "torsion subgroup": 0.04437656514447953, "torsion submonoid": 0.06662066514907422, "torsion": 0.10901343189444501, "submonoid": 0.14323823713631006, "abelian": 0.19488865479360015, "group": 0.19488865479360015, "equals": 0.19488865479360015, "subgroup": 0.19488865479360015}}, {"docstring": "**Alias** of the reverse direction of complete_lattice.is_Sup_finite_compact_iff_is_sup_closed_compact`.\n", "keywords": {"compact": 0.018830794223096383, "direction of complete": 0.020435055290363522, "Alias": 0.033641197513274955, "reverse direction": 0.033892441937102495, "lattice.is": 0.052376395424323874, "finite": 0.052376395424323874, "iff": 0.052376395424323874, "closed": 0.052376395424323874, "complete": 0.11060549338282699, "reverse": 0.18105634546484617, "direction": 0.18105634546484617}}, {"docstring": " A product over `powerset s` is equal to the double product over sets of subsets of `s` with `card s = k`, for `k = 1, ..., card s`.\n", "keywords": {"double product": 0.014179954458918205, "product over sets": 0.014179954458918205, "sets of subsets": 0.014218983619329623, "card": 0.0319727021571942, "product": 0.05904204734277306, "powerset": 0.08531189896378533, "equal": 0.11840455484321102, "double": 0.11840455484321102, "sets": 0.11840455484321102, "subsets": 0.11840455484321102}}, {"docstring": " The second theorem that characterises the function `reduce`: the maximal reduction of a word only reduces to itself.\n", "keywords": {"characterises the function": 0.012465543599998139, "theorem that characterises": 0.018641876658774394, "maximal reduction": 0.018641876658774394, "word only reduces": 0.05867165447781048, "function": 0.09101163530720666, "theorem": 0.135280142484453, "characterises": 0.135280142484453, "maximal": 0.135280142484453, "reduction": 0.135280142484453, "word": 0.135280142484453, "reduce": 0.17954807775654547, "reduces": 0.17954807775654547}}, {"docstring": "Helper lemma for the evaluation of `prec` in the base case.\n", "keywords": {"Helper lemma": 0.015380821171891606, "base case": 0.015380821171891606, "prec": 0.04491197687864554, "Helper": 0.09568045026443411, "case": 0.09568045026443411, "lemma": 0.15831692877998726, "evaluation": 0.15831692877998726, "base": 0.15831692877998726}}, {"docstring": " A real-valued random variable `X` `has_pdf X \u2119 \u03bb` (where `\u03bb` is the Lebesgue measure) if and only if the push-forward measure of `\u2119` along `X` is absolutely continuous with respect to `\u03bb`.\n", "keywords": {"real-valued random variable": 0.0016151890443214874, "random variable": 0.011891118324371971, "Lebesgue measure": 0.01264754388322106, "real-valued random": 0.017798659388540475, "absolutely continuous": 0.017798659388540475, "continuous with respect": 0.017798659388540475, "push-forward measure": 0.02356920246205565, "Lebesgue": 0.07172704070418667, "measure": 0.08706326953080504, "variable": 0.08886407157392263, "pdf": 0.08886407157392263, "real-valued": 0.132239959875874, "random": 0.132239959875874, "push-forward": 0.132239959875874, "absolutely": 0.132239959875874, "continuous": 0.132239959875874, "respect": 0.132239959875874}}, {"docstring": " A function on `[0, 1]` with the norm of the derivative within `[0, 1]` bounded by `C` satisfies `\u2225f 1 - f 0\u2225 \u2264 C`, `has_deriv_within_at` version.\n", "keywords": {"satisfies": 0.04491197687864554, "deriv": 0.04491197687864554, "version": 0.04491197687864554, "bounded": 0.0771485953923296, "function": 0.1155310835876123, "norm": 0.1155310835876123, "derivative": 0.1155310835876123}}, {"docstring": "If `0 < n`, then `quaternion_group n` has `4n` elements.\n", "keywords": {"quaternion": 0.04491197687864554, "elements": 0.04491197687864554, "group": 0.09568045026443411}}, {"docstring": "A set is contained in its affine span.\n", "keywords": {"affine span": 0.04940384002065631, "set is contained": 0.09700399286574239, "span": 0.15831692877998726, "set": 0.29736558256021506, "contained": 0.29736558256021506, "affine": 0.29736558256021506}}, {"docstring": " If a function is `C^n` with `1 \u2264 n` around a point, and its derivative at that point is given to us as `f'`, then `f'` is also a strict derivative.\n", "keywords": {"strict derivative": 0.03117712943655666, "point": 0.10191687733271076, "derivative": 0.10191687733271076, "function": 0.14832923246533666, "strict": 0.14832923246533666}}, {"docstring": " Given three nonzero vectors, the angle between the first and the second plus the angle between the second and the third equals the angle between the first and the third.\n", "keywords": {"equals the angle": 0.0052704429424274965, "nonzero vectors": 0.006828097155944431, "angle": 0.019444284326463328, "vectors": 0.07545593074802887, "nonzero": 0.08987750021439836, "equals": 0.08987750021439836}}, {"docstring": "The edist to a set is bounded above by the edist to any of its points\n", "keywords": {"set is bounded": 0.037831312533597124, "edist": 0.07334489383741183, "points": 0.11718348279991213, "set": 0.19092478917347616, "bounded": 0.19092478917347616}}, {"docstring": "`z - (to_zmod z : \u2124_[p])` is contained in the maximal ideal of `\u2124_[p]`, for every `z : \u2124_[p]`.  The coercion from `zmod p` to `\u2124_[p]` is `zmod.has_coe_t`, which coerces `zmod p` into artibrary rings. This is unfortunate, but a consequence of the fact that we allow `zmod p` to coerce to rings of arbitrary characteristic, instead of only rings of characteristic `p`. This coercion is only a ring homomorphism if it coerces into a ring whose characteristic divides `p`. While this is not the case here we can still make use of the coercion.\n", "keywords": {"maximal ideal": 0.04387618859575776, "zmod": 0.049445516751682655, "rings": 0.138322494515662, "coercion": 0.15445588974205524, "characteristic": 0.16937528056591777, "contained": 0.20501703656635667, "maximal": 0.20501703656635667, "ideal": 0.20501703656635667, "ring": 0.20748374177349305, "coerces": 0.2235793673526974, "artibrary rings": 0.24388007696749978, "ring homomorphism": 0.3428491700768061, "zmod.has": 0.37483460340321034, "coe": 0.37483460340321034, "arbitrary characteristic": 0.4038507534670894, "characteristic divides": 0.40698636110626446, "coerce": 0.4471587347053948, "artibrary": 0.4724803424730861, "unfortunate": 0.518872229704398, "consequence": 0.5661463030732702}}, {"docstring": " There exists a non-null vector with respect to any symmetric, nonzero bilinear form `B` on a module `M` over a ring `R` with invertible `2`, i.e. there exists some `x : M` such that `B x x \u2260 0`.\n", "keywords": {"nonzero bilinear form": 0.0010567658645955185, "nonzero bilinear": 0.011752516585960321, "bilinear form": 0.011752516585960321, "non-null vector": 0.017595046402022366, "vector with respect": 0.017595046402022366, "exists a non-null": 0.0433072671931538, "exists": 0.06653164730624736, "symmetric": 0.0883382645966668, "nonzero": 0.0883382645966668, "form": 0.0883382645966668, "module": 0.0883382645966668, "ring": 0.0883382645966668, "invertible": 0.0883382645966668, "non-null": 0.13149453879183629, "vector": 0.13149453879183629, "respect": 0.13149453879183629, "bilinear": 0.13149453879183629}}, {"docstring": " The basis constructed in `orthogonal_family.subordinate_orthonormal_basis` is subordinate to the `orthogonal_family` in question.\n", "keywords": {"orthogonal": 0.020602899695743707, "family.subordinate": 0.055708263664958506, "orthonormal": 0.055708263664958506, "family": 0.055708263664958506, "basis constructed": 0.0562460611896591, "question": 0.11718348279991213, "basis": 0.13945519496053638, "constructed": 0.19092478917347616, "subordinate": 0.19092478917347616}}, {"docstring": "See Theorem 6.6, C\u0103lug\u0103reanu\n", "keywords": {"C\u0103lug\u0103reanu": 0.030396371632413578, "Theorem": 0.08596317751626563}}, {"docstring": "An isometry from a complete emetric space is a closed embedding\n", "keywords": {"complete emetric space": 0.0042542192213185686, "closed embedding": 0.015380821171891606, "complete emetric": 0.02570861714399338, "emetric space": 0.02570861714399338, "embedding": 0.09568045026443411, "isometry": 0.15831692877998726, "complete": 0.15831692877998726, "emetric": 0.15831692877998726, "space": 0.15831692877998726, "closed": 0.15831692877998726}}, {"docstring": "Construct terminal object in the over category. This isn't an instance as it's not typically the way we want to define terminal objects. (For instance, this gives a terminal object which is different from the generic one given by `over_product_of_wide_pullback` above.)\n", "keywords": {"Construct terminal object": 0.04521649917717324, "Construct terminal": 0.08243997851229581, "terminal object": 0.11450658356123712, "terminal": 0.1438900302265086, "Construct": 0.17643392163296817, "category": 0.17643392163296817, "define terminal objects": 0.18217026010167106, "object": 0.2158350453397629, "instance": 0.29370771172558985, "define terminal": 0.302184577932864, "product": 0.37878964254284114, "wide": 0.37878964254284114, "pullback": 0.37878964254284114, "objects": 0.4316700906795258, "typically": 0.5375858018942757, "define": 0.5375858018942757, "generic": 0.628774385399924}}, {"docstring": "If advancing one step from `a` leads to `b : \u03b2`, then `f.fix a = b`\n", "keywords": {"advancing one step": 0.02570861714399338, "leads": 0.09568045026443411, "f.fix": 0.09568045026443411, "advancing": 0.15831692877998726, "step": 0.15831692877998726}}, {"docstring": "`has_scalar` version of `one_mul_eq_id`\n", "keywords": {"scalar": 0.04491197687864554, "mul": 0.04491197687864554, "version": 0.15831692877998726}}, {"docstring": "A nonzero object has nontrivial subobject lattice.\n", "keywords": {"nontrivial subobject lattice": 0.016559150827736194, "subobject lattice": 0.04940384002065631, "nonzero object": 0.09700399286574239, "object has nontrivial": 0.09700399286574239, "nontrivial subobject": 0.09700399286574239, "lattice": 0.15831692877998726, "nonzero": 0.29736558256021506, "object": 0.29736558256021506, "nontrivial": 0.29736558256021506, "subobject": 0.29736558256021506}}, {"docstring": " In a linearly ordered field with the order topology, if `f` tends to a positive constant `C` and `g` tends to `at_top` then `f * g` tends to `at_top`.\n", "keywords": {"linearly ordered field": 0.002535831815717203, "order topology": 0.012240009979360944, "positive constant": 0.012240009979360944, "linearly ordered": 0.018310930906343142, "ordered field": 0.018310930906343142, "top": 0.019053917256533312, "topology": 0.09017440044927587, "constant": 0.09017440044927587, "linearly": 0.13409574860218185, "ordered": 0.13409574860218185, "field": 0.13409574860218185, "order": 0.13409574860218185, "positive": 0.13409574860218185}}, {"docstring": " Proves that `f` satisfies `is_locally_homeomorph`. The condition `h` is weaker than definition of `is_locally_homeomorph`, since it only requires `e : local_homeomorph X Y` to agree with `f` on its source `e.source`, as opposed to on the whole space `X`.\n", "keywords": {"locally": 0.047867332740317084, "satisfies": 0.08119255078535711, "homeomorph": 0.0835969275732229, "Proves": 0.13576856027650855, "local": 0.23483372406308306, "e.source": 0.23483372406308306, "weaker than definition": 0.2686780140637021, "condition": 0.3530061493665469, "requires": 0.3530061493665469, "source": 0.3530061493665469, "space": 0.3530061493665469, "weaker": 0.46019337044815234, "definition": 0.46019337044815234, "agree": 0.46019337044815234, "opposed": 0.46019337044815234}}, {"docstring": "A regular topological space with second countable topology can be embedded into `l^\u221e = \u2115 \u2192\u1d47 \u211d`.\n", "keywords": {"regular topological space": 0.03339840940482845, "regular topological": 0.09700399286574239, "topological space": 0.09700399286574239, "countable topology": 0.09700399286574239, "regular": 0.29736558256021506, "topological": 0.29736558256021506, "space": 0.29736558256021506, "countable": 0.29736558256021506, "topology": 0.29736558256021506, "embedded": 0.29736558256021506}}, {"docstring": " If `P : \u2124 \u2192 Prop` is a predicate such that the set `{m : P m}` is bounded above and nonempty, then this set has the greatest element. This lemma uses classical logic to avoid assumption `[decidable_pred P]`. See `int.greatest_of_bdd` for a constructive counterpart.\n", "keywords": {"greatest element": 0.025507852905700554, "Prop": 0.0426361564213057, "set": 0.106574448147145, "nonempty": 0.1307270118629463, "element": 0.1307270118629463, "avoid assumption": 0.18228268651744198, "predicate": 0.19026967628231284, "bounded": 0.19026967628231284, "greatest": 0.19026967628231284, "decidable": 0.2270801223820393, "lemma uses classical": 0.253026592038712, "classical logic": 0.253026592038712, "logic to avoid": 0.253026592038712, "int.greatest": 0.29973977589903367, "bdd": 0.29973977589903367, "constructive counterpart": 0.30671026542383745, "assumption": 0.3431003426192771, "pred": 0.3431003426192771, "counterpart": 0.43212824916040704, "lemma": 0.44936882421953867}}, {"docstring": "The zeroth cyclotomic polyomial is `1`.\n", "keywords": {"zeroth cyclotomic polyomial": 0.03339840940482845, "zeroth cyclotomic": 0.09700399286574239, "cyclotomic polyomial": 0.09700399286574239, "zeroth": 0.29736558256021506, "cyclotomic": 0.29736558256021506, "polyomial": 0.29736558256021506}}, {"docstring": "Equivalence closure is idempotent.\n", "keywords": {"Equivalence closure": 0.04940384002065631, "closure is idempotent": 0.04940384002065631, "Equivalence": 0.15831692877998726, "idempotent": 0.15831692877998726, "closure": 0.29736558256021506}}, {"docstring": "A subfield is closed under division.\n", "keywords": {"closed under division": 0.04940384002065631, "subfield is closed": 0.09700399286574239, "division": 0.15831692877998726, "subfield": 0.29736558256021506, "closed": 0.29736558256021506}}, {"docstring": "**Alias** of euclidean_geometry.dist_sq_eq_dist_sq_add_dist_sq_sub_two_mul_dist_mul_dist_mul_cos_angle`.\n", "keywords": {"dist": 0.009198647884643741, "mul": 0.01431127884867528, "Alias": 0.0382379486608084, "geometry.dist": 0.06443654907243483, "add": 0.06443654907243483, "cos": 0.06443654907243483, "angle": 0.06443654907243483, "euclidean": 0.09716047230841572}}, {"docstring": " If a finset `u` is contained in the scalar product of two sets `s \u2022 t`, we can find two finsets `s'`, `t'` such that `s' \u2286 s`, `t' \u2286 t` and `u \u2286 s' \u2022 t'`.\n", "keywords": {"scalar product": 0.010205618855225404, "find two finsets": 0.019421205961481128, "finset": 0.07422074326256899, "finsets": 0.07422074326256899, "sets": 0.07586813767572746, "contained": 0.1005112751044989, "scalar": 0.1005112751044989, "product": 0.1005112751044989, "find": 0.1005112751044989}}, {"docstring": " A set is irreducible if and only if for every cover by a finite collection of closed sets, it is contained in one of the members of the collection.\n", "keywords": {"finite collection": 0.027430531955772185, "closed sets": 0.027430531955772185, "set is irreducible": 0.06405909490722952, "collection of closed": 0.06405909490722952, "collection": 0.094808423351325, "irreducible": 0.1408007092310104, "cover": 0.1408007092310104, "finite": 0.1408007092310104, "closed": 0.1408007092310104, "contained": 0.1408007092310104, "members": 0.1408007092310104, "set": 0.18961684670265, "sets": 0.18961684670265}}, {"docstring": " Dividing by an element is the same as multiplying by its inverse.  This is a duplicate of `div_inv_monoid.div_eq_mul_inv` ensuring that the types unfold better.\n", "keywords": {"inv": 0.0710838878218359, "Dividing": 0.14623340726105694, "inverse": 0.14623340726105694, "div": 0.20910206899588812, "monoid.div": 0.20910206899588812, "mul": 0.20910206899588812, "element": 0.23342178605055275, "multiplying": 0.23342178605055275, "types unfold": 0.3590259390453561, "ensuring": 0.37298875481161287, "duplicate": 0.5139833378573802, "types": 0.5139833378573802, "unfold": 0.5139833378573802}}, {"docstring": "**Alias** of multiset.subset_of_le`.\n", "keywords": {"Alias": 0.030396371632413578, "multiset.subset": 0.09568045026443411}}, {"docstring": "If a filter is converging, its limsup coincides with its limit.\n", "keywords": {"filter is converging": 0.015380821171891606, "limsup coincides": 0.02570861714399338, "converging": 0.09568045026443411, "limit": 0.09568045026443411, "filter": 0.15831692877998726, "limsup": 0.15831692877998726, "coincides": 0.15831692877998726}}, {"docstring": "A continuous, periodic function has compact range.\n", "keywords": {"periodic function": 0.04940384002065631, "compact range": 0.04940384002065631, "function has compact": 0.09700399286574239, "continuous": 0.15831692877998726, "periodic": 0.15831692877998726, "range": 0.15831692877998726, "function": 0.29736558256021506, "compact": 0.29736558256021506}}, {"docstring": "The `(m * n)`-th Chebyshev polynomial is the composition of the `m`-th and `n`-th\n", "keywords": {"Chebyshev polynomial": 0.007743432063478832, "Chebyshev": 0.06650965107397505, "polynomial": 0.1155310835876123, "composition": 0.1155310835876123}}, {"docstring": "If there are zero morphisms, any terminal object is a zero object.\n", "keywords": {"terminal object": 0.05913243875864445, "morphisms": 0.11984314898676356, "object": 0.14323823713631006, "terminal": 0.19488865479360015}}, {"docstring": " The function `x^(-n)` tends to `0` at `+\u221e` for any positive natural `n`. A version for positive real powers exists as `tendsto_rpow_neg_at_top`.\n", "keywords": {"positive natural": 0.07143683563426448, "function": 0.14724705908851674, "natural": 0.14724705908851674, "tendsto": 0.2104440927400966, "rpow": 0.2104440927400966, "neg": 0.2104440927400966, "top": 0.2104440927400966, "positive": 0.22640134908386225, "positive real powers": 0.2375322133547646, "real powers exists": 0.2886396231172225, "positive real": 0.3048845311104686, "real powers": 0.3628836306470974, "powers exists": 0.3628836306470974, "version": 0.5160054651028707, "real": 0.5160054651028707, "powers": 0.5160054651028707, "exists": 0.5160054651028707, "version for positive": 0.5528566284596398}}, {"docstring": "This is the `iff` version of `matrix.is_symm.from_blocks`.\n", "keywords": {"iff": 0.04491197687864554, "matrix.is": 0.04491197687864554, "symm.from": 0.04491197687864554, "blocks": 0.04491197687864554, "version": 0.15831692877998726}}, {"docstring": "If `F` has odd characteristic, then for nonzero `a : F`, we have that `a ^ (#F / 2) = \u00b11`.\n", "keywords": {"odd characteristic": 0.00899321792126428, "characteristic": 0.0771485953923296, "nonzero": 0.0771485953923296, "odd": 0.1155310835876123}}, {"docstring": " A family of vectors is linearly independent if they are nonzero and orthogonal.\n", "keywords": {"nonzero and orthogonal": 0.04940384002065631, "family of vectors": 0.09700399286574239, "vectors is linearly": 0.09700399286574239, "linearly independent": 0.09700399286574239, "orthogonal": 0.15831692877998726, "family": 0.29736558256021506, "vectors": 0.29736558256021506, "linearly": 0.29736558256021506, "independent": 0.29736558256021506, "nonzero": 0.29736558256021506}}, {"docstring": "In a non-trivial ring, the element `0` is not left-regular -- with typeclasses.\n", "keywords": {"non-trivial ring": 0.04940384002065631, "ring": 0.15831692877998726, "element": 0.15831692877998726, "left-regular": 0.15831692877998726, "typeclasses": 0.15831692877998726, "non-trivial": 0.29736558256021506}}, {"docstring": "Extra simp lemma that `dsimp` can use. `simp` will never use this.\n", "keywords": {"Extra simp lemma": 0.02500995304854036, "dsimp": 0.07915015343857928, "Extra simp": 0.08453883749566703, "simp lemma": 0.14033512486368607, "Extra": 0.16205454282434614, "simp": 0.2405027004070563, "lemma": 0.25584912197094006}}, {"docstring": " A regular topological space with second countable topology is a normal space. This lemma is not an instance to avoid a loop.\n", "keywords": {"regular topological space": 0.007246803222070906, "regular topological": 0.032361484023902806, "countable topology": 0.032361484023902806, "topological space": 0.03857816158761385, "normal space": 0.03857816158761385, "space": 0.10489964727219744, "avoid a loop": 0.16056327145649474, "regular": 0.17705097305926945, "topological": 0.17705097305926945, "countable": 0.17705097305926945, "topology": 0.17705097305926945, "normal": 0.17705097305926945, "instance to avoid": 0.22382557528037253, "loop": 0.32350596561652023, "lemma": 0.4276565147820152, "instance": 0.4276565147820152, "avoid": 0.4276565147820152}}, {"docstring": " Bounding the Hausdorff distance by exhibiting, for any point in each set, another point in the other set at controlled distance\n", "keywords": {"Bounding the Hausdorff": 0.011941017893451427, "Hausdorff distance": 0.029141685082446724, "controlled distance": 0.06177937892048141, "distance by exhibiting": 0.08220438907724607, "Hausdorff": 0.09655605661463627, "point": 0.11185087393202754, "Bounding": 0.122209967475991, "exhibiting": 0.122209967475991, "set at controlled": 0.13252784443166432, "distance": 0.14663241076608644, "set": 0.14663241076608644, "controlled": 0.19840347794534322}}, {"docstring": "All triangles in an orthocentric system have the same circumradius.\n", "keywords": {"orthocentric system": 0.09700399286574239, "circumradius": 0.15831692877998726, "triangles": 0.29736558256021506, "orthocentric": 0.29736558256021506, "system": 0.29736558256021506}}, {"docstring": " A set is a neighborhood of `a` within `(-\u221e, a]` if and only if it contains an interval `(l, a]` with `l < a`.\n", "keywords": {"interval": 0.060154590733539764, "set": 0.0771485953923296, "neighborhood": 0.0771485953923296}}, {"docstring": "A substructure `S` includes `closure L s` if and only if it includes `s`.\n", "keywords": {"includes": 0.055127829619426576, "substructure": 0.09713402394201612, "closure": 0.09713402394201612}}, {"docstring": "Product of a multiset of elements in a subgroup of a `comm_group` is in the subgroup.\n", "keywords": {"multiset of elements": 0.01904688389482227, "comm": 0.05393656033701752, "group": 0.05393656033701752, "subgroup": 0.09106811155038866, "Product": 0.09202664026077896, "multiset": 0.1367145963576765, "elements": 0.1367145963576765}}, {"docstring": "An additive monoid is not a torsion monoid if it has an element of infinite order.\n", "keywords": {"infinite order": 0.021567786782198985, "element of infinite": 0.035715520099333646, "additive monoid": 0.05259515133015473, "torsion monoid": 0.05259515133015473, "order": 0.11369206228658875, "monoid": 0.13453835116331675, "additive": 0.18569843656348187, "torsion": 0.18569843656348187, "element": 0.18569843656348187, "infinite": 0.18569843656348187}}, {"docstring": "A function `f` on `fin (n + 1)` is monotone if and only if `f i \u2264 f (i + 1)` for all `i`.\n", "keywords": {"fin": 0.04491197687864554, "function": 0.0771485953923296, "monotone": 0.1155310835876123}}, {"docstring": " Viewing a module as an affine space modelled on itself, a `weighted_vsub` is just a linear combination.\n", "keywords": {"affine space modelled": 0.0016012214736657916, "Viewing a module": 0.00899321792126428, "linear combination": 0.00899321792126428, "affine space": 0.013527995261974615, "space modelled": 0.013527995261974615, "weighted": 0.04491197687864554, "vsub": 0.04491197687864554, "Viewing": 0.0771485953923296, "combination": 0.0771485953923296, "module": 0.1155310835876123, "affine": 0.1155310835876123, "space": 0.1155310835876123, "modelled": 0.1155310835876123, "linear": 0.1155310835876123}}, {"docstring": "Root of a quadratic when its discriminant equals zero\n", "keywords": {"discriminant equals": 0.09700399286574239, "Root": 0.15831692877998726, "quadratic": 0.29736558256021506, "discriminant": 0.29736558256021506, "equals": 0.29736558256021506}}, {"docstring": "For any `m : M` and any `0 < \u03b5`, there is `s \u2208 S` such that `\u2225m + s\u2225 < \u2225mk' S m\u2225 + \u03b5`.\n", "keywords": {}}, {"docstring": " If `f` is complex differentiable on an open disc of radius `R > 0`, is continuous on its closure, and its values on the boundary circle of this disc are bounded from above by `C`, then the norm of its derivative at the center is at most `C / R`.\n", "keywords": {"complex differentiable": 0.01725930885760724, "boundary circle": 0.01725930885760724, "open disc": 0.022731165958219224, "disc of radius": 0.0369013403878876, "disc are bounded": 0.05402465708940729, "disc": 0.08531676164130114, "radius": 0.08746487982807136, "closure": 0.08746487982807136, "complex": 0.13025543809633414, "differentiable": 0.13025543809633414, "open": 0.13025543809633414, "continuous": 0.13025543809633414, "boundary": 0.13025543809633414, "circle": 0.13025543809633414, "bounded": 0.13025543809633414, "norm": 0.13025543809633414, "derivative": 0.13025543809633414, "center": 0.13025543809633414}}, {"docstring": " All points have distance to the circumcenter equal to the circumradius.\n", "keywords": {"points have distance": 0.02570861714399338, "circumcenter equal": 0.02570861714399338, "circumradius": 0.09568045026443411, "points": 0.15831692877998726, "distance": 0.15831692877998726, "circumcenter": 0.15831692877998726, "equal": 0.15831692877998726}}, {"docstring": " The right inverse to a formal multilinear series is indeed a right inverse, provided its linear term is invertible and its constant term vanishes.\n", "keywords": {"constant term vanishes": 0.006525501026847568, "formal multilinear series": 0.007321883374053632, "provided its linear": 0.022138323509052035, "term vanishes": 0.0325194426147957, "formal multilinear": 0.03663237450220032, "multilinear series": 0.03663237450220032, "linear term": 0.05417025203414716, "constant term": 0.05417025203414716, "inverse": 0.10356599227702172, "provided": 0.11521656054299435, "vanishes": 0.11521656054299435, "term is invertible": 0.1179331082419386, "term": 0.13667842094541144, "formal": 0.1879836817695587, "multilinear": 0.1879836817695587, "series": 0.1879836817695587, "linear": 0.1879836817695587, "invertible": 0.1879836817695587, "constant": 0.1879836817695587}}, {"docstring": "The determinant of `conj_ae`, as a linear equiv.\n", "keywords": {"conj": 0.04491197687864554, "linear equiv": 0.04940384002065631, "equiv": 0.15831692877998726, "determinant": 0.29736558256021506, "linear": 0.29736558256021506}}, {"docstring": "A version of `padic_val_rat.pow` for `padic_val_nat`\n", "keywords": {"padic": 0.02184815412823125, "val": 0.02184815412823125, "rat.pow": 0.05794058924527716, "nat": 0.05794058924527716, "version": 0.19744254481508877}}, {"docstring": " If `irreducible (cyclotomic (2 ^ k) K)` (in particular for `K = \u211a`) and `k` is at least `2`, then the norm of `\u03b6 - 1` is `2`.\n", "keywords": {"irreducible": 0.04491197687864554, "cyclotomic": 0.04491197687864554, "norm": 0.09568045026443411}}, {"docstring": "A generalized eigenvalue for some exponent `k` is also    a generalized eigenvalue for exponents larger than `k`.\n", "keywords": {"generalized eigenvalue": 0.013838200960749896, "exponents larger": 0.06705074907268331, "generalized": 0.08205340856523911, "eigenvalue": 0.08205340856523911, "eigenvalue for exponents": 0.11430404419064027, "larger": 0.20509004731457245, "exponent": 0.306389567614564, "exponents": 0.306389567614564}}, {"docstring": "Extra simp lemma that `dsimp` can use. `simp` will never use this.\n", "keywords": {"Extra simp lemma": 0.02500995304854036, "dsimp": 0.07915015343857928, "Extra simp": 0.08453883749566703, "simp lemma": 0.14033512486368607, "Extra": 0.16205454282434614, "simp": 0.2405027004070563, "lemma": 0.25584912197094006}}, {"docstring": "Product of a multiset of elements in a submonoid of a `comm_monoid` is in the submonoid.\n", "keywords": {"multiset of elements": 0.01904688389482227, "comm": 0.05393656033701752, "monoid": 0.05393656033701752, "submonoid": 0.09106811155038866, "Product": 0.09202664026077896, "multiset": 0.1367145963576765, "elements": 0.1367145963576765}}, {"docstring": " The complex hyperbolic sine function is everywhere strictly differentiable, with the derivative `cosh x`.\n", "keywords": {"complex hyperbolic sine": 0.0042542192213185686, "hyperbolic sine function": 0.0042542192213185686, "strictly differentiable": 0.015380821171891606, "complex hyperbolic": 0.02570861714399338, "hyperbolic sine": 0.02570861714399338, "sine function": 0.02570861714399338, "differentiable": 0.09568045026443411, "derivative": 0.09568045026443411, "cosh": 0.09568045026443411, "complex": 0.15831692877998726, "hyperbolic": 0.15831692877998726, "sine": 0.15831692877998726, "function": 0.15831692877998726, "strictly": 0.15831692877998726}}, {"docstring": "`cyclotomic n R` can be expressed as a product in a fraction field of `polynomial R`  using M\u00f6bius inversion.\n", "keywords": {"M\u00f6bius inversion": 0.008293207122436794, "fraction field": 0.02570861714399338, "M\u00f6bius": 0.08596317751626563, "cyclotomic": 0.09568045026443411, "polynomial": 0.09568045026443411, "inversion": 0.09568045026443411, "expressed": 0.15831692877998726, "product": 0.15831692877998726, "fraction": 0.15831692877998726, "field": 0.15831692877998726}}, {"docstring": "`s.to_colex < {r}.to_colex` iff all elements of `s` are less than `r`.\n", "keywords": {"colex": 0.020602899695743707, "iff all elements": 0.022885248721446715, "s.to": 0.055708263664958506, "iff": 0.11718348279991213, "elements": 0.19092478917347616}}, {"docstring": "The Hausdorff distance from `s` to `t` and from `t` to `s` coincide\n", "keywords": {"Hausdorff distance": 0.013797198203993007, "coincide": 0.04491197687864554, "Hausdorff": 0.08596317751626563, "distance": 0.15831692877998726}}, {"docstring": "`yoneda.obj X` is a sheaf for the canonical topology.\n", "keywords": {"canonical topology": 0.04940384002065631, "yoneda.obj": 0.15831692877998726, "topology": 0.15831692877998726, "sheaf": 0.29736558256021506, "canonical": 0.29736558256021506}}, {"docstring": " A function `f : \u03b1 \u2192 (\u03b9 \u2192 \u211d)` which is `K`-Lipschitz on a subset `s` admits a `K`-Lipschitz extension to the whole space. TODO: state the same result (with the same proof) for the space `\u2113^\u221e (\u03b9, \u211d)` over a possibly infinite type `\u03b9`.\n", "keywords": {"Lipschitz extension": 0.008655204086591376, "Lipschitz": 0.027814594701840514, "possibly infinite type": 0.06520776685735168, "space": 0.08966302297220581, "function": 0.11241827525043117, "subset": 0.11241827525043117, "admits": 0.11241827525043117, "TODO": 0.13134436834995109, "infinite type": 0.13439345365944994, "extension": 0.1542523707523809, "possibly infinite": 0.17700288089721447, "state": 0.30550125483876306, "result": 0.30550125483876306, "proof": 0.30550125483876306, "type": 0.30550125483876306, "possibly": 0.3877942850578501, "infinite": 0.3877942850578501}}, {"docstring": "The kernel of the quotient map induced by a congruence relation `c` equals `c`.\n", "keywords": {"quotient map induced": 0.0042542192213185686, "congruence relation": 0.015380821171891606, "quotient map": 0.02570861714399338, "map induced": 0.02570861714399338, "equals": 0.04491197687864554, "relation": 0.09568045026443411, "kernel": 0.15831692877998726, "quotient": 0.15831692877998726, "map": 0.15831692877998726, "induced": 0.15831692877998726, "congruence": 0.15831692877998726}}, {"docstring": "A positive multiple of a vector is in the same ray as that vector.\n", "keywords": {"positive multiple": 0.037831312533597124, "vector": 0.13945519496053638, "positive": 0.19092478917347616, "multiple": 0.19092478917347616, "ray": 0.19092478917347616}}, {"docstring": "We have that `ring_char (zmod n) = n`.\n", "keywords": {"ring": 0.04491197687864554, "char": 0.04491197687864554, "zmod": 0.09568045026443411}}, {"docstring": " A preconnected set in a conditionally complete linear order is either one of the intervals `[Inf s, Sup s]`, `[Inf s, Sup s)`, `(Inf s, Sup s]`, `(Inf s, Sup s)`, `[Inf s, +\u221e)`, `(Inf s, +\u221e)`, `(-\u221e, Sup s]`, `(-\u221e, Sup s)`, `(-\u221e, +\u221e)`, or `\u2205`. The converse statement requires `\u03b1` to be densely ordererd.\n", "keywords": {"conditionally complete linear": 0.002223284334235522, "complete linear order": 0.002223284334235522, "preconnected set": 0.016793443013718552, "conditionally complete": 0.016793443013718552, "complete linear": 0.016793443013718552, "linear order": 0.016793443013718552, "converse statement requires": 0.046975279539727834, "intervals": 0.11280843591010571, "statement requires": 0.11576316339395867, "densely ordererd": 0.11576316339395867, "preconnected": 0.12851490631899565, "set": 0.12851490631899565, "conditionally": 0.12851490631899565, "complete": 0.12851490631899565, "linear": 0.12851490631899565, "order": 0.12851490631899565, "converse statement": 0.12957864036034725, "requires": 0.3063302555557318, "ordererd": 0.3063302555557318, "converse": 0.3386947568099469}}, {"docstring": "On non-dependent functions, `pi.mul_single` can be expressed as an `ite`\n", "keywords": {"pi.mul": 0.04491197687864554, "single": 0.04491197687864554, "ite": 0.04491197687864554, "non-dependent functions": 0.04940384002065631, "functions": 0.15831692877998726, "non-dependent": 0.29736558256021506, "expressed": 0.29736558256021506}}, {"docstring": "**Alias** of the reverse direction of strict_mono_on_to_dual_comp_iff`.\n", "keywords": {"direction of strict": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "mono": 0.04491197687864554, "dual": 0.04491197687864554, "comp": 0.04491197687864554, "iff": 0.04491197687864554, "strict": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " Sum of elements in a `subring` of a `ring` indexed by a `finset` is in the `subring`.\n", "keywords": {"Sum of elements": 0.012741693123860753, "subring": 0.019648131954263418, "ring": 0.05393656033701752, "finset": 0.05393656033701752, "Sum": 0.09202664026077896, "indexed": 0.09202664026077896, "elements": 0.1367145963576765}}, {"docstring": "If `g` is a topological embedding, then `f` is strongly measurable iff `g \u2218 f` is.\n", "keywords": {"strongly measurable iff": 0.0010606143890052174, "topological embedding": 0.00899321792126428, "measurable iff": 0.00899321792126428, "strongly measurable": 0.013527995261974615, "embedding": 0.0771485953923296, "iff": 0.0771485953923296, "topological": 0.1155310835876123, "strongly": 0.1155310835876123, "measurable": 0.1155310835876123}}, {"docstring": " If `x` is in the base field `K`, then the norm is `x ^ [L : K]`.  (If `L` is not finite-dimensional over `K`, then `norm = 1 = x ^ 0 = x ^ (finrank L K)`.)\n", "keywords": {"base field": 0.018631302664197744, "field": 0.11553108358761233, "norm": 0.1430164761977166, "base": 0.15831692877998726, "finrank": 0.3120806116026233, "finite-dimensional": 0.3951375787241905}}, {"docstring": "A reversed version of `fin.cast_eq_cast` that is easier to rewrite with.\n", "keywords": {"fin.cast": 0.04491197687864554, "cast": 0.04491197687864554, "reversed version": 0.09700399286574239, "easier to rewrite": 0.09700399286574239, "reversed": 0.29736558256021506, "version": 0.29736558256021506, "easier": 0.29736558256021506, "rewrite": 0.29736558256021506}}, {"docstring": "Polarization identity: The imaginary part of the inner product, in terms of the norm.\n", "keywords": {"Polarization identity": 0.005987543063120938, "imaginary part": 0.013527995261974615, "Polarization": 0.0771485953923296, "identity": 0.0771485953923296, "product": 0.0771485953923296, "norm": 0.0771485953923296, "imaginary": 0.1155310835876123, "part": 0.1155310835876123, "terms": 0.1155310835876123}}, {"docstring": "A version of `nat.div_lt_self` using successors, rather than additional hypotheses.\n", "keywords": {"nat.div": 0.04491197687864554, "additional hypotheses": 0.04940384002065631, "successors": 0.15831692877998726, "hypotheses": 0.15831692877998726, "version": 0.29736558256021506, "additional": 0.29736558256021506}}, {"docstring": " In the characteristic zero case, the centroid lies in the affine span if the number of points is not zero.\n", "keywords": {"characteristic zero case": 0.0065920978564317735, "centroid lies": 0.009239332327148086, "affine span": 0.009239332327148086, "number of points": 0.009239332327148086, "case": 0.06844581806138879, "characteristic": 0.09568045026443411, "centroid": 0.09568045026443411, "lies": 0.09568045026443411, "affine": 0.09568045026443411, "span": 0.09568045026443411, "number": 0.09568045026443411, "points": 0.09568045026443411}}, {"docstring": "A version of `submodule.span_eq` for when the span is by a smaller ring.\n", "keywords": {"smaller ring": 0.015380821171891606, "submodule.span": 0.04491197687864554, "ring": 0.09568045026443411, "version": 0.15831692877998726, "span": 0.15831692877998726, "smaller": 0.15831692877998726}}, {"docstring": "All generalized eigenvalues are eigenvalues.\n", "keywords": {"generalized eigenvalues": 0.06340461682679863, "eigenvalues": 0.14868279128010753, "generalized": 0.2005079697193566, "eigenvalues are eigenvalues": 0.2858772036260003}}, {"docstring": "Sum of a list of elements in an intermediate field is in the intermediate_field.\n", "keywords": {"list of elements": 0.040564923574392765, "intermediate field": 0.09279441717942427, "Sum": 0.12156210109285605, "intermediate": 0.14570071893270706, "field": 0.14570071893270706, "list": 0.19744254481508877, "elements": 0.19744254481508877}}, {"docstring": "The angle between the negation of two vectors.\n", "keywords": {"vectors": 0.09568045026443411, "angle": 0.15831692877998726, "negation": 0.15831692877998726}}, {"docstring": "After filtering out everything that does not equal a given value, at most that value remains.  This is equivalent to `filter_eq'` with the equality the other way.\n", "keywords": {"remains": 0.12363091320521931, "filter": 0.17881754828257995, "filtering": 0.2005079697193566, "equal": 0.2005079697193566, "equivalent": 0.46553351027698087, "equality": 0.46553351027698087}}, {"docstring": " The uniform space structure associated to an abelian group filter basis via the associated topological abelian group structure is compatible with its group structure.\n", "keywords": {"group filter basis": 0.0048215886294145196, "abelian group filter": 0.005292182120524935, "topological abelian group": 0.005292182120524935, "uniform space structure": 0.006034813532884485, "abelian group structure": 0.007964876801220473, "abelian group": 0.01622044697959822, "group structure": 0.022070425411338468, "uniform space": 0.024774942342626713, "filter basis": 0.024774942342626713, "topological abelian": 0.027135702762816287, "group filter": 0.029605287728560505, "space structure": 0.03685401948865613, "group": 0.0616432020197091, "structure": 0.07619981437643263, "abelian": 0.08495543637512122, "structure is compatible": 0.1117421284058446, "uniform": 0.15548628151514407, "space": 0.15548628151514407, "filter": 0.15548628151514407, "basis": 0.15548628151514407}}, {"docstring": " Let `p` be a predicate on `box \u03b9`, let `I` be a box. Suppose that the following two properties hold true.  * Consider a smaller box `J \u2264 I`. The hyperplanes passing through the center of `J` split it into   `2 ^ n` boxes. If `p` holds true on each of these boxes, then it true on `J`. * For each `z` in the closed box `I.Icc` there exists a neighborhood `U` of `z` within `I.Icc` such   that for every box `J \u2264 I` such that `z \u2208 J.Icc \u2286 U`, if `J` is homothetic to `I` with a   coefficient of the form `1 / 2 ^ m`, then `p` is true on `J`.  Then `p I` is true. See also `box_integral.box.subbox_induction_on'` for a version using `box_integral.box.split_center_box` instead of `box_integral.prepartition.split_center`.\n", "keywords": {"box": 0.07143438878647337, "true": 0.09028204551997808, "center": 0.21441122213080688, "predicate": 0.2517154666589432, "I.Icc": 0.25378051618167796, "boxes": 0.264278837878147, "properties hold true": 0.26449124117695155, "hold true": 0.3157999511532265, "holds true": 0.3157999511532265, "properties hold": 0.40149242281352293, "Suppose": 0.4912342252943618, "hold": 0.5316805802429558, "holds": 0.5316805802429558, "properties": 0.5388101911697792, "smaller": 0.6299235396507858, "split": 0.632886287997832, "J.Icc": 0.6367503805077043, "induction": 0.666332433458616, "hyperplanes": 0.6759539865079257, "passing": 0.6759539865079257}}, {"docstring": "If `f : \u03b1 \u2192 \u03b2` is `0`-antilipschitz, then `\u03b1` is a `subsingleton`.\n", "keywords": {"antilipschitz": 0.04491197687864554, "subsingleton": 0.04491197687864554}}, {"docstring": "  An element is right-regular if and only if multiplying it on the right with a right-regular element is right-regular.\n", "keywords": {"element is right-regular": 0.03923447718921346, "right-regular element": 0.04614480516682393, "right-regular": 0.08154106429019745, "element": 0.09015781704888436, "multiplying": 0.1616313649453326}}, {"docstring": "Expand the square\n", "keywords": {"Expand the square": 0.02570861714399338, "Expand": 0.15831692877998726, "square": 0.15831692877998726}}, {"docstring": "If `u` is a sequence which is unbounded above, then after any point, it reaches a value strictly greater than all previous values.\n", "keywords": {"strictly greater": 0.02570861714399338, "point": 0.09568045026443411, "sequence": 0.15831692877998726, "unbounded": 0.15831692877998726, "reaches": 0.15831692877998726, "strictly": 0.15831692877998726, "greater": 0.15831692877998726, "previous": 0.15831692877998726}}, {"docstring": " A topological ring is `J`-adic if and only if it admits the powers of `J` as a basis of open neighborhoods of zero.\n", "keywords": {"topological ring": 0.013527995261974615, "admits the powers": 0.013527995261974615, "basis of open": 0.013527995261974615, "open neighborhoods": 0.013527995261974615, "adic": 0.0771485953923296, "topological": 0.1155310835876123, "ring": 0.1155310835876123, "admits": 0.1155310835876123, "powers": 0.1155310835876123, "basis": 0.1155310835876123, "open": 0.1155310835876123, "neighborhoods": 0.1155310835876123}}, {"docstring": "Hausdorff measure `\u03bcH[d] s` is monotone in `d`.\n", "keywords": {"Hausdorff measure": 0.009239332327148086, "Hausdorff": 0.09568045026443411, "measure": 0.09568045026443411, "monotone": 0.15831692877998726}}, {"docstring": "Representation of a difference of two squares of commuting elements as a product.\n", "keywords": {"squares of commuting": 0.013527995261974615, "commuting elements": 0.013527995261974615, "Representation": 0.0771485953923296, "product": 0.0771485953923296, "difference": 0.1155310835876123, "squares": 0.1155310835876123, "commuting": 0.1155310835876123, "elements": 0.1155310835876123}}, {"docstring": "The angle between the negation of a nonzero vector and that vector is `\u03c0`.\n", "keywords": {"nonzero vector": 0.0562460611896591, "vector": 0.13945519496053638, "angle": 0.19092478917347616, "negation": 0.19092478917347616, "nonzero": 0.19092478917347616}}, {"docstring": " The subalgebra of `C(circle, \u2102)` generated by `z ^ n` for `n \u2208 \u2124` is in fact the linear span of these functions.\n", "keywords": {"fact the linear": 0.02570861714399338, "linear span": 0.02570861714399338, "circle": 0.04491197687864554, "generated": 0.09568045026443411, "functions": 0.09568045026443411, "subalgebra": 0.15831692877998726, "fact": 0.15831692877998726, "linear": 0.15831692877998726, "span": 0.15831692877998726}}, {"docstring": " The Monge plane associated with vertices `i\u2081` and `i\u2082` equals that associated with `i\u2082` and `i\u2081`.\n", "keywords": {"Monge plane": 0.005484890844946624, "Monge": 0.057012387690331526, "vertices": 0.06844581806138879, "plane": 0.09568045026443411, "equals": 0.09568045026443411}}, {"docstring": "**Alias** of the reverse direction of order.pred_lt_iff_not_is_min`.\n", "keywords": {"direction of order.pred": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "min": 0.04491197687864554, "order.pred": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "**Alias** of the reverse direction of measure_theory.measure.ext_iff_of_sUnion_eq_univ`.\n", "keywords": {"direction of measure": 0.00899321792126428, "reverse direction": 0.013527995261974615, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "sUnion": 0.04491197687864554, "univ": 0.04491197687864554, "measure": 0.0771485953923296, "reverse": 0.1155310835876123, "direction": 0.1155310835876123}}, {"docstring": "Sophie Germain's identity, see <https://www.cut-the-knot.org/blue/SophieGermainIdentity.shtml>.\n", "keywords": {"Sophie Germain identity": 0.003875396501262652, "Sophie Germain": 0.023458380875189744, "Germain identity": 0.023458380875189744, "Germain": 0.1447773057422032, "Sophie": 0.15831692877998726, "identity": 0.15831692877998726}}, {"docstring": " Induction principle for matrices based on transvections: if a property is true for all diagonal matrices, all transvections, and is stable under product, then it is true for all matrices. This is the useful way to say that matrices are generated by diagonal matrices and transvections.  We state a slightly more general version: to prove a property for a matrix `M`, it suffices to assume that the diagonal matrices we consider have the same determinant as `M`. This is useful to obtain similar principles for `SL\u2099` or `GL\u2099`.\n", "keywords": {"stable under product": 0.03652705883137159, "diagonal matrices": 0.054327878380455046, "true": 0.07077815243881912, "matrices": 0.0721633000771124, "Induction principle": 0.07629314610924529, "transvections": 0.07850367549191141, "matrices based": 0.09960866633010382, "diagonal": 0.10789007764921772, "property is true": 0.1153946840291672, "based on transvections": 0.14993790071224655, "Induction": 0.16843902728798635, "product": 0.16843902728798635, "property": 0.18383664016424986, "based": 0.20921428541782036, "stable": 0.20921428541782036, "prove a property": 0.26656207953790134, "similar principles": 0.3540293908890138, "obtain similar principles": 0.3905373909093375, "matrices and transvections": 0.4057833712581077, "general version": 0.40792102037883343}}, {"docstring": " A limit (over a general filter) of measurable functions valued in a (pseudo) metrizable space is measurable.\n", "keywords": {"measurable functions valued": 0.003303977098058869, "general filter": 0.012051537142168538, "metrizable space": 0.012051537142168538, "functions valued": 0.018034246898548233, "measurable functions": 0.023937535241430174, "pseudo": 0.052376395424323874, "space is measurable": 0.05662301314248226, "measurable": 0.08782297807514622, "limit": 0.08946888050496495, "filter": 0.08946888050496495, "metrizable": 0.08946888050496495, "general": 0.13309686053898662, "functions": 0.13309686053898662, "valued": 0.13309686053898662, "space": 0.13309686053898662}}, {"docstring": "If a point `x` belongs to `s`, then its edist to `s` vanishes\n", "keywords": {"vanishes": 0.04491197687864554, "point": 0.09568045026443411, "belongs": 0.09568045026443411, "edist": 0.15831692877998726}}, {"docstring": "A finite dimensional module has dimension at most 1 iff there is some `v : V` so every vector is a multiple of `v`.\n", "keywords": {"finite dimensional module": 0.0016012214736657916, "finite dimensional": 0.013527995261974615, "dimensional module": 0.013527995261974615, "module has dimension": 0.013527995261974615, "iff": 0.0771485953923296, "finite": 0.1155310835876123, "dimensional": 0.1155310835876123, "module": 0.1155310835876123, "dimension": 0.1155310835876123, "vector": 0.1155310835876123, "multiple": 0.1155310835876123}}, {"docstring": "The element `0` is `M`-regular if and only if `M` is trivial.\n", "keywords": {"element": 0.09568045026443411, "regular": 0.09568045026443411, "trivial": 0.09568045026443411}}, {"docstring": " Given a family of points `p : \u03b9' \u2192 P` and an affine basis `b`, if the matrix whose rows are the coordinates of `p` with respect `b` has a right inverse, then `p` is affine independent.\n", "keywords": {"family of points": 0.00875085431208752, "affine basis": 0.010702953661890531, "affine independent": 0.010702953661890531, "matrix whose rows": 0.012220051967672856, "affine": 0.06706294711327264, "points": 0.07895278969183914, "basis": 0.07895278969183914, "respect": 0.07895278969183914, "inverse": 0.07895278969183914, "independent": 0.07895278969183914, "family": 0.10987504304330521, "matrix": 0.10987504304330521, "rows": 0.10987504304330521, "coordinates": 0.10987504304330521}}, {"docstring": "**Intermediate Value Theorem** for continuous functions on connected spaces.\n", "keywords": {"Intermediate Value Theorem": 0.007444681613352736, "connected spaces": 0.04940384002065631, "Intermediate": 0.08596317751626563, "Theorem": 0.08596317751626563, "continuous functions": 0.09700399286574239, "functions on connected": 0.09700399286574239, "spaces": 0.15831692877998726, "continuous": 0.29736558256021506, "functions": 0.29736558256021506, "connected": 0.29736558256021506}}, {"docstring": "If `dist (f n) (f (n+1))` is bounded by `(C / 2) / 2^n`, then `f` is a Cauchy sequence.\n", "keywords": {"Cauchy sequence": 0.005157590407455398, "dist": 0.04491197687864554, "Cauchy": 0.06650965107397505, "sequence": 0.0771485953923296, "bounded": 0.1155310835876123}}, {"docstring": "Definition of `x \u29cf y` on pre-games built using the constructor.\n", "keywords": {"pre-games built": 0.09700399286574239, "Definition": 0.15831692877998726, "constructor": 0.15831692877998726, "pre-games": 0.29736558256021506, "built": 0.29736558256021506}}, {"docstring": "A group element has finite order iff its order is positive.\n", "keywords": {"finite order iff": 0.010494743012823167, "group element": 0.035715520099333646, "element has finite": 0.035715520099333646, "finite order": 0.05259515133015473, "order iff": 0.05259515133015473, "order is positive": 0.0710891909196062, "positive": 0.11369206228658875, "iff its order": 0.11487806119690562, "order": 0.13453835116331675, "group": 0.18569843656348187, "element": 0.18569843656348187, "finite": 0.18569843656348187, "iff": 0.18569843656348187}}, {"docstring": " In a second countable topology, the first function in an identically distributed pair is a.e. strongly measurable. So is the second function, but use `h.symm.ae_strongly_measurable_fst` as `h.ae_strongly_measurable_snd` has a different meaning.\n", "keywords": {"identically distributed pair": 0.010772351141633213, "countable topology": 0.03213513817451824, "identically distributed": 0.04704959177432487, "distributed pair": 0.04704959177432487, "strongly measurable": 0.07984894282289791, "strongly": 0.09064248989889793, "measurable": 0.09064248989889793, "topology": 0.1468754817924987, "function": 0.19356668742836222, "countable": 0.21197971499276713, "identically": 0.21197971499276713, "distributed": 0.21197971499276713, "pair": 0.21197971499276713, "fst": 0.25168477963842906, "h.ae": 0.25168477963842906, "snd": 0.25168477963842906, "meaning": 0.3741900910967621}}, {"docstring": "Two `convex_cone`s are equal if the underlying sets are equal.\n", "keywords": {"underlying sets": 0.03663237450220032, "sets are equal": 0.04051498248759491, "convex": 0.054709255964732355, "cone": 0.054709255964732355, "equal": 0.10356599227702172, "underlying": 0.1879836817695587, "sets": 0.1879836817695587}}, {"docstring": "The square of the symbol is 1 if `p \u2224 a`.\n", "keywords": {"square": 0.15831692877998726, "symbol": 0.15831692877998726}}, {"docstring": "A set of orthogonal vectors `v` with respect to some bilinear form `B` is linearly independent  if for all `i`, `B (v i) (v i) \u2260 0`.\n", "keywords": {"orthogonal vectors": 0.00899321792126428, "bilinear form": 0.00899321792126428, "set of orthogonal": 0.013527995261974615, "linearly independent": 0.013527995261974615, "vectors": 0.0771485953923296, "form": 0.0771485953923296, "set": 0.1155310835876123, "orthogonal": 0.1155310835876123, "respect": 0.1155310835876123, "bilinear": 0.1155310835876123, "linearly": 0.1155310835876123, "independent": 0.1155310835876123}}, {"docstring": "**Alias** of lt_of_lt_of_le'`.\n", "keywords": {"Alias": 0.030396371632413578}}, {"docstring": "The element `0` is left-regular if and only if `R` is trivial.\n", "keywords": {"element": 0.09568045026443411, "trivial": 0.09568045026443411, "left-regular": 0.15831692877998726}}, {"docstring": "A group `G` is finitely generated if and only if `add_monoid_algebra R G` is of finite type.\n", "keywords": {"finite type": 0.015380821171891606, "finitely generated": 0.02570861714399338, "add": 0.04491197687864554, "monoid": 0.04491197687864554, "group": 0.09568045026443411, "algebra": 0.09568045026443411, "type": 0.09568045026443411, "finitely": 0.15831692877998726, "generated": 0.15831692877998726, "finite": 0.15831692877998726}}, {"docstring": "An element is in the closure of a two-element set if it is a linear combination of those two elements.\n", "keywords": {"two-element set": 0.035715520099333646, "linear combination": 0.035715520099333646, "closure": 0.18569843656348187, "two-element": 0.18569843656348187, "set": 0.18569843656348187, "linear": 0.18569843656348187, "combination": 0.18569843656348187, "element": 0.2690767023266335, "elements": 0.2690767023266335}}, {"docstring": "Over any ring `R`, if `b` is an infinite basis for a module `M`, and `s` is a maximal linearly independent set, then the cardinality of `b` is bounded by the cardinality of `s`.\n", "keywords": {"linearly independent set": 0.0016151890443214874, "maximal linearly independent": 0.0024287169002957616, "independent set": 0.011891118324371971, "infinite basis": 0.017798659388540475, "maximal linearly": 0.017798659388540475, "linearly independent": 0.017798659388540475, "cardinality": 0.048561690547210754, "ring": 0.08886407157392263, "module": 0.08886407157392263, "set": 0.08886407157392263, "infinite": 0.132239959875874, "basis": 0.132239959875874, "maximal": 0.132239959875874, "linearly": 0.132239959875874, "independent": 0.132239959875874, "bounded": 0.132239959875874}}, {"docstring": "One direction of `tsub_eq_zero_iff_le`, as a `@[simp]`-lemma.\n", "keywords": {"tsub": 0.04491197687864554, "iff": 0.04491197687864554, "simp": 0.04491197687864554, "lemma": 0.04491197687864554, "direction": 0.29736558256021506}}, {"docstring": "The p-adic norm of `p` is less than 1 if `p` is prime.  See also `padic_norm.padic_norm_p_lt_one` for a version assuming `1 < p`.\n", "keywords": {"p-adic norm": 0.044494278521941884, "prime": 0.11159279293228641, "version assuming": 0.13274903703483396, "norm": 0.13905502865190497, "p-adic": 0.1531727145735673, "padic": 0.2182620423168793, "norm.padic": 0.2182620423168793, "assuming": 0.30374316422779024, "version": 0.3858257107143767}}, {"docstring": "The Haar measure is unique up to scaling. More precisely: every \u03c3-finite left invariant measure  is a scalar multiple of the Haar measure.  This is slightly weaker than assuming that `\u03bc` is a Haar measure (in particular we don't require  `\u03bc \u2260 0`).\n", "keywords": {"Haar measure": 0.019352585350529937, "Haar": 0.05715410334700149, "measure": 0.08000593578322075, "left invariant measure": 0.12514321892134936, "measure is unique": 0.15462194826884518, "scaling": 0.15898400306080968, "invariant measure": 0.18416432364177002, "unique": 0.21396918619618713, "\u03c3-finite left invariant": 0.22027538629396431, "\u03c3-finite left": 0.30918990540390734, "left invariant": 0.30918990540390734, "scalar multiple": 0.30918990540390734, "precisely": 0.39633263571171146, "\u03c3-finite": 0.48597209147104203, "left": 0.48597209147104203, "invariant": 0.48597209147104203, "scalar": 0.48597209147104203, "multiple": 0.48597209147104203, "require": 0.4888932442890152, "slightly weaker": 0.5052885557465898}}, {"docstring": "A function `f` goes to `-\u221e` independent of an order-preserving embedding `e`.\n", "keywords": {"order-preserving embedding": 0.04940384002065631, "function": 0.15831692877998726, "independent": 0.15831692877998726, "embedding": 0.15831692877998726, "order-preserving": 0.29736558256021506}}, {"docstring": " `t` is in the upper shadow of `\ud835\udc9c` iff we can remove an element from it so that the resulting finset is in `\ud835\udc9c`.\n", "keywords": {"upper shadow": 0.02570861714399338, "remove an element": 0.02570861714399338, "resulting finset": 0.02570861714399338, "iff": 0.09568045026443411, "upper": 0.15831692877998726, "shadow": 0.15831692877998726, "remove": 0.15831692877998726, "element": 0.15831692877998726, "resulting": 0.15831692877998726, "finset": 0.15831692877998726}}, {"docstring": "If an irreducible has a prime factorization,  then it is an associate of one of its prime factors.\n", "keywords": {"prime factorization": 0.0325194426147957, "prime factors": 0.0325194426147957, "factorization": 0.11521656054299435, "factors": 0.11521656054299435, "prime": 0.13667842094541144, "irreducible": 0.1879836817695587, "associate": 0.1879836817695587}}, {"docstring": " The closed thickening `cthickening \u03b4 E` of a fixed subset `E` is an increasing function of the thickening radius `\u03b4`.\n", "keywords": {"fixed subset": 0.020744656539556924, "thickening radius": 0.03017959306974641, "increasing function": 0.03439110359613085, "closed thickening": 0.05033870131288873, "cthickening": 0.11145728654016383, "subset": 0.11145728654016383, "radius": 0.11145728654016383, "closed": 0.1823394614884183, "fixed": 0.1823394614884183, "increasing": 0.1823394614884183, "function": 0.1823394614884183}}, {"docstring": "A polynomial splits if and only if it has as many roots as its degree.\n", "keywords": {"polynomial splits": 0.02570861714399338, "degree": 0.09568045026443411, "polynomial": 0.15831692877998726, "splits": 0.15831692877998726, "roots": 0.15831692877998726}}, {"docstring": " `linear_map.to_matrix'` is a particular case of `linear_map.to_matrix`, for the standard basis `pi.basis_fun R n`.\n", "keywords": {"linear": 0.021671764809268954, "map.to": 0.021671764809268954, "standard basis": 0.024350955846805595, "pi.basis": 0.05762960968289995, "matrix": 0.07671213513331894, "basis": 0.12095349351053106, "fun": 0.12095349351053106, "case": 0.1965390350921557, "standard": 0.1965390350921557}}, {"docstring": "**Alias** of the forward direction of mdifferentiable_iff_differentiable`.\n", "keywords": {"direction of mdifferentiable": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "differentiable": 0.04491197687864554, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "See `lt_of_tsub_lt_tsub_left` for a stronger statement in a linear order.\n", "keywords": {"tsub": 0.019648131954263418, "linear order": 0.021567786782198985, "stronger statement": 0.035715520099333646, "left": 0.05393656033701752, "order": 0.11369206228658875, "stronger": 0.18569843656348187, "statement": 0.18569843656348187, "linear": 0.18569843656348187}}, {"docstring": "This is the `list.sum` version of `add_neg_rev`\n", "keywords": {"list.sum": 0.04491197687864554, "add": 0.04491197687864554, "neg": 0.04491197687864554, "rev": 0.04491197687864554, "version": 0.15831692877998726}}, {"docstring": "If the elements of a set are independent, then any pair within that set is disjoint.\n", "keywords": {"set are independent": 0.07301337118426866, "set is disjoint": 0.07301337118426866, "independent": 0.11521656054299435, "disjoint": 0.11521656054299435, "set": 0.13667842094541144, "elements": 0.1879836817695587, "pair": 0.1879836817695587}}, {"docstring": " If a collection of submodules has just two indices, `i` and `j`, then `direct_sum.is_internal` is equivalent to `is_compl`.\n", "keywords": {"collection of submodules": 0.02570861714399338, "direct": 0.04491197687864554, "sum.is": 0.04491197687864554, "internal": 0.04491197687864554, "compl": 0.04491197687864554, "indices": 0.09568045026443411, "collection": 0.15831692877998726, "submodules": 0.15831692877998726, "equivalent": 0.15831692877998726}}, {"docstring": " Let `f` be a contracting map with constant `K`; let `g` be another map uniformly `C`-close to `f`. If `x` and `y` are their fixed points, then `dist x y \u2264 C / (1 - K)`.\n", "keywords": {"map uniformly": 0.04940445185968178, "contracting map": 0.08094423627943145, "map with constant": 0.10689794907618666, "constant": 0.1513046335336394, "uniformly": 0.1513046335336394, "close": 0.1513046335336394, "map": 0.15557541181235449, "contracting": 0.24066430701107397, "fixed points": 0.25058000616119436, "points": 0.3824015048530132, "dist": 0.3824015048530132, "fixed": 0.5239807616855658}}, {"docstring": "`to_\u0393_Spec_fun` is continuous.\n", "keywords": {"Spec": 0.030396371632413578, "fun": 0.04491197687864554, "continuous": 0.15831692877998726}}, {"docstring": "Product of a list of elements in a submonoid is in the submonoid.\n", "keywords": {"list of elements": 0.037831312533597124, "Product": 0.11718348279991213, "submonoid": 0.13945519496053638, "list": 0.19092478917347616, "elements": 0.19092478917347616}}, {"docstring": "A monoid is not a torsion monoid if it has an element of infinite order.\n", "keywords": {"infinite order": 0.022138323509052035, "element of infinite": 0.03663237450220032, "torsion monoid": 0.05417025203414716, "order": 0.11521656054299435, "monoid": 0.13667842094541144, "torsion": 0.1879836817695587, "element": 0.1879836817695587, "infinite": 0.1879836817695587}}, {"docstring": " Given `c = line_map a b r`, `c < b`, the point `(c, f c)` is non-strictly above the segment `[(a, f a), (b, f b)]` if and only if `slope f c b \u2264 slope f a b`.\n", "keywords": {"slope": 0.026369104746389253, "line": 0.05393656033701752, "map": 0.07201108509564766, "point": 0.07201108509564766, "segment": 0.07201108509564766, "non-strictly": 0.09202664026077896}}, {"docstring": "Given congruence relations `c, d` on a monoid such that `d` contains `c`, the definition of    the homomorphism from the quotient by `c` to the quotient by `d` induced by `d`'s quotient    map.\n", "keywords": {"congruence relations": 0.010849179083141073, "quotient map": 0.011364530632575332, "quotient": 0.04256968143644196, "relations": 0.08798773338320563, "induced": 0.08798773338320563, "map": 0.08798773338320563, "congruence": 0.12197993148826404, "monoid": 0.12197993148826404, "definition": 0.12197993148826404, "homomorphism": 0.12197993148826404}}, {"docstring": " A uniform space is complete provided that (a) its uniformity filter has a countable basis; (b) any sequence satisfying a \"controlled\" version of the Cauchy condition converges.\n", "keywords": {"Cauchy condition converges": 0.00037911714239608754, "Cauchy condition": 0.005484890844946624, "countable basis": 0.0065920978564317735, "condition converges": 0.0065920978564317735, "uniform space": 0.009239332327148086, "space is complete": 0.009239332327148086, "complete provided": 0.009239332327148086, "uniformity filter": 0.009239332327148086, "sequence satisfying": 0.009239332327148086, "controlled": 0.04491197687864554, "Cauchy": 0.057012387690331526, "basis": 0.06844581806138879, "version": 0.06844581806138879, "converges": 0.06844581806138879, "uniform": 0.09568045026443411, "space": 0.09568045026443411, "complete": 0.09568045026443411, "provided": 0.09568045026443411, "uniformity": 0.09568045026443411, "filter": 0.09568045026443411}}, {"docstring": "If `C` has an initial object and binary coproducts, then it has finite coproducts.\n", "keywords": {"binary coproducts": 0.027673082137283082, "finite coproducts": 0.027673082137283082, "initial object": 0.03663237450220032, "object and binary": 0.03663237450220032, "coproducts": 0.07162298286637953, "initial": 0.1879836817695587, "object": 0.1879836817695587, "binary": 0.1879836817695587, "finite": 0.1879836817695587}}, {"docstring": "**Alias** of lt_of_le_of_ne'`.\n", "keywords": {"Alias": 0.030396371632413578}}, {"docstring": "**Alias** of the reverse direction of neg_convex_on_iff`.\n", "keywords": {"direction of neg": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "convex": 0.04491197687864554, "iff": 0.04491197687864554, "neg": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "The rank of `M \u2297[R] N` is `(module.rank R M).lift * (module.rank R N).lift`.\n", "keywords": {"lift": 0.02317053471260329, "module.rank": 0.039759025025420225, "rank": 0.15109932261208045}}, {"docstring": "If a preconnected set contains endpoints of an interval, then it includes the whole interval.\n", "keywords": {"preconnected set": 0.03663237450220032, "set contains endpoints": 0.03663237450220032, "interval": 0.07162298286637953, "preconnected": 0.1879836817695587, "set": 0.1879836817695587, "endpoints": 0.1879836817695587, "includes": 0.1879836817695587}}, {"docstring": " The norm of the identity is at most `1`. It is in fact `1`, except when the space is trivial where it is `0`. It means that one can not do better than an inequality in general.\n", "keywords": {"norm": 0.13696809108329627, "identity": 0.13696809108329627, "space is trivial": 0.1445099069107937, "inequality in general": 0.18970645222564492, "fact": 0.2768162971845457, "space": 0.3553358554145339, "trivial": 0.3553358554145339, "general": 0.3580186829102008, "inequality": 0.44538603402402266}}, {"docstring": " Given `c = line_map a b r`, `c < b`, the point `(c, f c)` is non-strictly below the segment `[(a, f a), (b, f b)]` if and only if `slope f a b \u2264 slope f c b`.\n", "keywords": {"slope": 0.026369104746389253, "line": 0.05393656033701752, "map": 0.07201108509564766, "point": 0.07201108509564766, "segment": 0.07201108509564766, "non-strictly": 0.09202664026077896}}, {"docstring": "**Alias** of the reverse direction of smul_pos_iff_of_neg`.\n", "keywords": {"direction of smul": 0.00899321792126428, "reverse direction": 0.013527995261974615, "Alias": 0.030396371632413578, "pos": 0.04491197687864554, "iff": 0.04491197687864554, "neg": 0.04491197687864554, "smul": 0.0771485953923296, "reverse": 0.1155310835876123, "direction": 0.1155310835876123}}, {"docstring": " Coercing an in-range number to `fin (n + 1)`, and converting back to `\u2115`, results in that number.\n", "keywords": {"Coercing an in-range": 0.021114872146320032, "converting back": 0.034987023778306175, "in-range number": 0.051351238837580325, "fin": 0.05331699930238388, "Coercing": 0.11246769819744627, "results": 0.11246769819744627, "number": 0.13282721021560867, "in-range": 0.18385948854246909, "converting": 0.18385948854246909, "back": 0.18385948854246909}}, {"docstring": "`mul_right_comm` for `algebra`s when one element is from the base ring.\n", "keywords": {"mul": 0.04491197687864554, "comm": 0.04491197687864554, "algebra": 0.04491197687864554, "base ring": 0.04940384002065631, "ring": 0.15831692877998726, "element": 0.29736558256021506, "base": 0.29736558256021506}}, {"docstring": "`a \u2264 -b \u2192 b \u2264 -a` on ereal\n", "keywords": {"ereal": 0.09568045026443411}}, {"docstring": "An equivalent expression of `add_subgroup.fg` in terms of `set.finite` instead of `finset`.\n", "keywords": {"equivalent expression": 0.013527995261974615, "add": 0.04491197687864554, "subgroup.fg": 0.04491197687864554, "set.finite": 0.04491197687864554, "finset": 0.04491197687864554, "equivalent": 0.1155310835876123, "expression": 0.1155310835876123, "terms": 0.1155310835876123}}, {"docstring": "**Alias** of the reverse direction of multiset.dedup_eq_self`.\n", "keywords": {"direction of multiset.dedup": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "multiset.dedup": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " For a groupoid `G` which is `closed_under_restriction`, being a local structomorphism is a local invariant property.\n", "keywords": {"local invariant property": 0.0017768654250291172, "invariant property": 0.012465543599998139, "local structomorphism": 0.01909557836111971, "local invariant": 0.01909557836111971, "closed": 0.05331699930238388, "restriction": 0.05331699930238388, "local": 0.069255433448279, "groupoid": 0.09101163530720666, "property": 0.09101163530720666, "structomorphism": 0.135280142484453, "invariant": 0.135280142484453}}, {"docstring": " If a type carries two unital binary operations that distribute over each other, then they have the same unit elements.  In fact, the two operations are the same, and give a commutative monoid structure, see `eckmann_hilton.comm_monoid`.\n", "keywords": {"unital binary operations": 0.013017489785706365, "unit elements": 0.0230555325575343, "type carries": 0.03403279149924244, "carries two unital": 0.03403279149924244, "unital binary": 0.03403279149924244, "binary operations": 0.06620894096355065, "commutative monoid structure": 0.11274796052922274, "elements": 0.12422079926394097, "operations that distribute": 0.13929305746210574, "operations": 0.17114440058206973, "type": 0.18141852464992714, "carries": 0.18141852464992714, "unital": 0.18141852464992714, "binary": 0.18141852464992714, "distribute": 0.18141852464992714, "unit": 0.18141852464992714, "monoid structure": 0.1924989456818646, "eckmann": 0.21697543702759264, "hilton.comm": 0.21697543702759264, "give a commutative": 0.23330683730650822}}, {"docstring": "As `0` is the default value for `real.Sup` of the empty set or sets which are not bounded above, it suffices to show that `S` is bounded below by `0` to show that `0 \u2264 Inf S`.\n", "keywords": {"suffices to show": 0.016499633164586736, "empty set": 0.029581009763283855, "show": 0.05589253802182822, "real.Sup": 0.05762960968289995, "bounded": 0.09893255831095867, "set or sets": 0.14324865740468262, "default": 0.14520555658610762, "empty": 0.14520555658610762, "suffices": 0.14520555658610762, "set": 0.19786511662191733, "sets": 0.19786511662191733}}, {"docstring": " Every positive `x` is between two successive integer powers of another `y` greater than one. This is the same as `exists_mem_Ioc_zpow`, but with \u2264 and < the other way around.\n", "keywords": {"successive integer powers": 0.009001679881101624, "successive integer": 0.04188746641162499, "integer powers": 0.04188746641162499, "Ioc": 0.11555589791117535, "positive": 0.12363091320521931, "greater": 0.12363091320521931, "exists": 0.17881754828257995, "mem": 0.17881754828257995, "zpow": 0.17881754828257995, "successive": 0.2005079697193566, "integer": 0.2005079697193566, "powers": 0.2005079697193566}}, {"docstring": " **Abel-Ruffini Theorem** (one direction): An irreducible polynomial with an `is_solvable_by_rad` root has solvable Galois group\n", "keywords": {"solvable Galois group": 0.0027696451063753285, "Abel-Ruffini Theorem": 0.0068330400702793425, "Galois group": 0.010208095033754586, "solvable Galois": 0.02434792863470522, "irreducible polynomial": 0.03346752176983843, "rad": 0.052008009273421085, "Theorem": 0.06176713399260923, "root has solvable": 0.0663938400060379, "Galois": 0.09196758915656232, "Abel-Ruffini": 0.10987504304330521, "direction": 0.10987504304330521, "root": 0.10987504304330521, "group": 0.10987504304330521, "solvable": 0.12922594861139264, "irreducible": 0.17995476918065306, "polynomial": 0.17995476918065306}}, {"docstring": "Expressing `has_fderiv_at f f' x` in terms of `has_deriv_at`\n", "keywords": {"Expressing": 0.04491197687864554, "fderiv": 0.04491197687864554, "deriv": 0.04491197687864554, "terms": 0.15831692877998726}}, {"docstring": " An induction principle for closure membership. If `p` holds for all elements of `s`, and is preserved under function symbols, then `p` holds for all elements of the closure of `s`.\n", "keywords": {"induction principle": 0.041067145989475896, "closure membership": 0.05303379658192498, "holds": 0.13264405558464026, "membership": 0.13690089622781554, "principle for closure": 0.16269363174436116, "elements": 0.18034450672916197, "closure": 0.18393912731976153, "function symbols": 0.19661905478275257, "induction": 0.19861310018350192, "principle": 0.19861310018350192, "preserved under function": 0.2722374662885858, "symbols": 0.35520562385871335, "preserved": 0.46258320047845314, "function": 0.46258320047845314}}, {"docstring": " A null measurable set `t` is Carath\u00e9odory measurable: for any `s`, we have `\u03bc (s \u2229 t) + \u03bc (s \\ t) = \u03bc s`.\n", "keywords": {"null measurable set": 0.0015058460508901108, "Carath\u00e9odory measurable": 0.009478822829965372, "measurable set": 0.0125357335508132, "null measurable": 0.017490271332507117, "Carath\u00e9odory": 0.064011398160278, "measurable": 0.07334489383741183, "set": 0.08439943001984396, "null": 0.11718348279991213}}, {"docstring": "If the only elements outside `s` are those left fixed by `\u03c3`, then mapping by `\u03c3` has no effect.\n", "keywords": {"left fixed": 0.02570861714399338, "effect": 0.09568045026443411, "elements": 0.15831692877998726, "left": 0.15831692877998726, "fixed": 0.15831692877998726, "mapping": 0.15831692877998726}}, {"docstring": "**Alias** of the forward direction of order.pred_le_pred_iff`.\n", "keywords": {"direction of order.pred": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "pred": 0.04491197687864554, "iff": 0.04491197687864554, "order.pred": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " A set `s` is preconnected if and only if for every cover by two closed sets that are disjoint on `s`, it is contained in one of the two covering sets.\n", "keywords": {"closed sets": 0.03876555391209268, "covering sets": 0.03876555391209268, "sets": 0.12605697934304527, "preconnected": 0.14802380456229533, "cover": 0.14802380456229533, "closed": 0.14802380456229533, "disjoint": 0.14802380456229533, "contained": 0.14802380456229533, "covering": 0.14802380456229533, "set": 0.25211395868609054}}, {"docstring": "Updating a nonzero element and taking the tail commute.\n", "keywords": {"Updating a nonzero": 0.04940384002065631, "tail commute": 0.04940384002065631, "nonzero element": 0.09700399286574239, "element and taking": 0.09700399286574239, "taking the tail": 0.09700399286574239, "Updating": 0.15831692877998726, "commute": 0.15831692877998726, "nonzero": 0.29736558256021506, "element": 0.29736558256021506, "taking": 0.29736558256021506, "tail": 0.29736558256021506}}, {"docstring": " Embedding `i : fin n` into `fin (n + 1)` using a pivot `p` that is greater results in a value that is less than `p`.\n", "keywords": {"greater results": 0.03663237450220032, "Embedding": 0.054709255964732355, "fin": 0.07162298286637953, "pivot": 0.11521656054299435, "greater": 0.1879836817695587, "results": 0.1879836817695587}}, {"docstring": " The `at_top` filter for an open interval `Ici a` comes from the `at_top` filter in the ambient order.\n", "keywords": {"open interval": 0.013833902242147065, "ambient order": 0.013833902242147065, "top": 0.020944683225967962, "filter": 0.054147325146855434, "Ici": 0.05435364549612988, "interval": 0.09593831581184391, "order": 0.09593831581184391, "open": 0.14222822903176371, "ambient": 0.14222822903176371}}, {"docstring": "**Alias** of the forward direction of asymptotics.is_O_with_neg_right`.\n", "keywords": {"direction of asymptotics.is": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "neg": 0.04491197687864554, "asymptotics.is": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "The affine span, converted to a set, is `span_points`.\n", "keywords": {"affine span": 0.027673082137283082, "points": 0.054709255964732355, "span": 0.07162298286637953, "converted": 0.11521656054299435, "set": 0.11521656054299435, "affine": 0.1879836817695587}}, {"docstring": "The product of two `C^n`functions is `C^n`.\n", "keywords": {"functions": 0.09568045026443411, "product": 0.15831692877998726}}, {"docstring": "Any sieve is smaller than its closure.\n", "keywords": {"sieve is smaller": 0.09700399286574239, "closure": 0.15831692877998726, "sieve": 0.29736558256021506, "smaller": 0.29736558256021506}}, {"docstring": "Gauss' summation formula\n", "keywords": {"Gauss' summation formula": 0.008321268142839145, "Gauss' summation": 0.04940384002065631, "summation formula": 0.04940384002065631, "Gauss'": 0.15831692877998726, "formula": 0.15831692877998726, "summation": 0.29736558256021506}}, {"docstring": "**Alias** of the forward direction of lt_inv'`.\n", "keywords": {"forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "inv": 0.04491197687864554, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " The first coefficient of a composition of formal multilinear series is the composition of the first coefficients seen as continuous linear maps.\n", "keywords": {"continuous linear maps": 0.00196598076995442, "formal multilinear series": 0.002950351281893197, "linear maps": 0.013546417228156258, "formal multilinear": 0.020225813225353943, "multilinear series": 0.020225813225353943, "continuous linear": 0.020225813225353943, "composition of formal": 0.02108961152940521, "composition": 0.07334489383741181, "maps": 0.09492398510093508, "formal": 0.1408007092310104, "multilinear": 0.1408007092310104, "series": 0.1408007092310104, "continuous": 0.1408007092310104, "linear": 0.1408007092310104, "coefficient": 0.14668978767482363}}, {"docstring": " If `R` is a ring which is a topological semiring, then it is automatically a topological ring. This exists so that one can place a topological ring structure on `R` without explicitly proving `continuous_neg`.\n", "keywords": {"topological semiring": 0.03026584452613267, "topological ring": 0.0386388861219166, "topological ring structure": 0.04098700246702917, "automatically a topological": 0.04164985988075803, "topological": 0.07432178405318286, "place a topological": 0.10644327448662097, "ring": 0.10724282834090067, "semiring": 0.13175469915436278, "ring structure": 0.1611927573543337, "explicitly proving": 0.1749716561891143, "automatically": 0.1793306010504313, "continuous": 0.25222474969506875, "neg": 0.25222474969506875, "proving": 0.34513469575859723, "exists": 0.43147108028269887, "place": 0.43147108028269887, "structure": 0.43147108028269887, "explicitly": 0.43147108028269887}}, {"docstring": "**Alias** of eq_or_lt_of_le`.\n", "keywords": {"Alias": 0.030396371632413578}}, {"docstring": "The Kuratowski embedding is an isometry.\n", "keywords": {"Kuratowski embedding": 0.04498862876540802, "Kuratowski": 0.1447773057422032, "isometry": 0.15831692877998726, "embedding": 0.29736558256021506}}, {"docstring": "Expand `inner (x + y) (x + y)`\n", "keywords": {"Expand": 0.04491197687864554}}, {"docstring": "The Jordan decomposition of a signed measure is unique.\n", "keywords": {"Jordan decomposition": 0.04498862876540802, "measure is unique": 0.04940384002065631, "signed measure": 0.09700399286574239, "Jordan": 0.1447773057422032, "unique": 0.15831692877998726, "decomposition": 0.29736558256021506, "signed": 0.29736558256021506, "measure": 0.29736558256021506}}, {"docstring": " Composition by continuous linear equivs on the left respects higher differentiability on domains.\n", "keywords": {"continuous linear equivs": 0.0042542192213185686, "left respects higher": 0.0042542192213185686, "respects higher differentiability": 0.0042542192213185686, "Composition by continuous": 0.015380821171891606, "differentiability on domains": 0.015380821171891606, "continuous linear": 0.02570861714399338, "linear equivs": 0.02570861714399338, "left respects": 0.02570861714399338, "respects higher": 0.02570861714399338, "higher differentiability": 0.02570861714399338, "Composition": 0.09568045026443411, "domains": 0.09568045026443411, "continuous": 0.15831692877998726, "linear": 0.15831692877998726, "equivs": 0.15831692877998726, "left": 0.15831692877998726, "respects": 0.15831692877998726, "higher": 0.15831692877998726, "differentiability": 0.15831692877998726}}, {"docstring": "The set of natural number multiples of an element of an `add_submonoid` is a subset of the `add_submonoid`.\n", "keywords": {"natural number multiples": 0.0016726844279478638, "set of natural": 0.013923161052069546, "natural number": 0.013923161052069546, "number multiples": 0.013923161052069546, "add": 0.020602899695743707, "submonoid": 0.020602899695743707, "set": 0.11718348279991213, "natural": 0.11718348279991213, "number": 0.11718348279991213, "multiples": 0.11718348279991213, "element": 0.11718348279991213, "subset": 0.11718348279991213}}, {"docstring": "The **Heine\u2013Borel theorem**: In a proper space, a closed bounded set is compact.\n", "keywords": {"closed bounded set": 0.0042542192213185686, "Borel theorem": 0.005484890844946624, "proper space": 0.015380821171891606, "set is compact": 0.015380821171891606, "closed bounded": 0.02570861714399338, "bounded set": 0.02570861714399338, "Heine": 0.030396371632413578, "Borel": 0.057012387690331526, "theorem": 0.09568045026443411, "space": 0.09568045026443411, "compact": 0.09568045026443411, "proper": 0.15831692877998726, "closed": 0.15831692877998726, "bounded": 0.15831692877998726, "set": 0.15831692877998726}}, {"docstring": " The `i`-th sublist in the splitting of a list `l` along a composition `c`, is the slice of `l` between the indices `c.size_up_to i` and `c.size_up_to (i+1)`, i.e., the indices in the `i`-th block of the composition.\n", "keywords": {"c.size": 0.021671764809268954, "composition": 0.03483861303986918, "indices": 0.042318970408436074, "list": 0.07396643205251528, "sublist": 0.09180994495797792, "splitting": 0.09180994495797792, "slice": 0.09180994495797792, "block": 0.09180994495797792}}, {"docstring": " The integral defining the `\u0393` function converges for complex `s` with `0 < re s`.  This is proved by reduction to the real case.\n", "keywords": {"function converges": 0.015099935621315529, "converges for complex": 0.015099935621315529, "integral defining": 0.02249651976012989, "function": 0.10028582371075691, "complex": 0.10028582371075691, "real case": 0.11755105063023073, "integral": 0.14832923246533666, "defining": 0.14832923246533666, "converges": 0.14832923246533666, "proved by reduction": 0.165573765898185, "case": 0.2790829227183407, "proved": 0.37689977775222827, "reduction": 0.37689977775222827, "real": 0.37689977775222827}}, {"docstring": " Given an element `a` of the submonoid of a monoid `M` generated by a set `s`, there exists a list of elements of `s` whose product is `a`.\n", "keywords": {"exists a list": 0.009798670017578762, "list of elements": 0.028522548426614943, "monoid": 0.07431450488929812, "generated": 0.07431450488929812, "set": 0.07431450488929812, "submonoid": 0.0985067904415808, "exists": 0.0985067904415808, "list": 0.0985067904415808, "product": 0.0985067904415808, "element": 0.11375875983529411, "elements": 0.11375875983529411}}, {"docstring": "**Alias** of lt_of_lt_of_eq`.\n", "keywords": {"Alias": 0.030396371632413578}}, {"docstring": " The inner product of a linear combination of a set of orthonormal vectors with one of those vectors picks out the coefficient of that vector.\n", "keywords": {"linear combination": 0.011791779281441954, "set of orthonormal": 0.011791779281441954, "orthonormal vectors": 0.016514709421906745, "vectors picks": 0.016514709421906745, "vectors": 0.07524595803548341, "product": 0.10795533203491868, "linear": 0.10795533203491868, "combination": 0.10795533203491868, "set": 0.10795533203491868, "orthonormal": 0.10795533203491868, "picks": 0.10795533203491868, "coefficient": 0.10795533203491868, "vector": 0.15049191607096682}}, {"docstring": "**Alias** of the reverse direction of multiplicity.dvd_iff_multiplicity_pos`.\n", "keywords": {"direction of multiplicity.dvd": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "multiplicity": 0.04491197687864554, "pos": 0.04491197687864554, "multiplicity.dvd": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " If `f` has formal power series `\u2211 n, p\u2099` on a ball of radius `r`, then for `y, z` in any smaller ball, the norm of the difference `f y - f z - p 1 (\u03bb _, y - z)` is bounded above by `C * (max \u2225y - x\u2225 \u2225z - x\u2225) * \u2225y - z\u2225`.\n", "keywords": {"formal power series": 0.0007058593654121888, "power series": 0.007159317564538786, "formal power": 0.009515836280616039, "smaller ball": 0.010942129436490769, "ball of radius": 0.021105666198721763, "max": 0.052008009273421085, "ball": 0.055741499059047184, "series": 0.07321609116840826, "radius": 0.07321609116840826, "difference": 0.07321609116840826, "formal": 0.09708830355970632, "power": 0.09708830355970632, "smaller": 0.09708830355970632, "norm": 0.09708830355970632, "bounded": 0.09708830355970632}}, {"docstring": " The sum of two upper semicontinuous functions is upper semicontinuous. Formulated with `[has_continuous_add]`. The primed version of the lemma uses an explicit continuity assumption on addition, for application to `ereal`.\n", "keywords": {"upper semicontinuous functions": 0.007327296516767814, "upper semicontinuous": 0.016851204808897166, "semicontinuous functions": 0.03821554584844725, "functions is upper": 0.08667762295794612, "upper": 0.09028232117950413, "semicontinuous": 0.09028232117950413, "sum": 0.2038542769622493, "functions": 0.2038542769622493, "continuous": 0.2425057621221154, "add": 0.2425057621221154, "ereal": 0.31807004650910337, "assumption on addition": 0.3438068115293896, "Formulated": 0.36270881646612724, "explicit continuity assumption": 0.44505054844584063, "addition": 0.4533135999375753, "primed version": 0.46742777496856974, "explicit continuity": 0.46742777496856974, "continuity assumption": 0.46742777496856974, "primed": 0.5643894539005718, "version": 0.5643894539005718}}, {"docstring": " The product of `f y` over `y \u2208 set.range g` equals the product of `f (g i)` over all `i` provided that `g` is injective.\n", "keywords": {"equals the product": 0.009800167631153751, "product": 0.05201485183844375, "set.range": 0.09329120537733218, "equals": 0.09329120537733218, "provided": 0.09329120537733218, "injective": 0.09329120537733218}}, {"docstring": " An induction principle to deduce results for `angle` from those for `\u211d`, used with `induction \u03b8 using real.angle.induction_on`.\n", "keywords": {"principle to deduce": 0.035715520099333646, "deduce results": 0.035715520099333646, "induction principle": 0.05259515133015473, "angle": 0.05393656033701752, "induction": 0.13453835116331675, "principle": 0.18569843656348187, "deduce": 0.18569843656348187, "results": 0.18569843656348187}}, {"docstring": "The indexed infimum of a function is bounded above by the value taken at one point\n", "keywords": {"indexed infimum": 0.02570861714399338, "function is bounded": 0.02570861714399338, "point": 0.09568045026443411, "indexed": 0.15831692877998726, "infimum": 0.15831692877998726, "function": 0.15831692877998726, "bounded": 0.15831692877998726}}, {"docstring": "Shows that $e^{x} * e^{-x} = 1$\n", "keywords": {"Shows": 0.09568045026443411}}, {"docstring": "The auxiliary continuants before the squashed position stay the same.\n", "keywords": {"squashed position stay": 0.0016012214736657916, "auxiliary continuants": 0.013527995261974615, "squashed position": 0.013527995261974615, "position stay": 0.013527995261974615, "auxiliary": 0.1155310835876123, "continuants": 0.1155310835876123, "squashed": 0.1155310835876123, "position": 0.1155310835876123, "stay": 0.1155310835876123}}, {"docstring": " If `find p` returns `some i`, then `p j` does not hold for `j < i`, i.e., `i` is minimal among the indices where `p` holds.\n", "keywords": {"returns": 0.054709255964732355, "find": 0.09329120537733218, "minimal": 0.1384995633470844, "indices": 0.1384995633470844, "hold": 0.1853841766790467, "holds": 0.1853841766790467}}, {"docstring": "A helper lemma for `multilinear_map.dom_coprod_alternization`.\n", "keywords": {"multilinear": 0.04491197687864554, "map.dom": 0.04491197687864554, "coprod": 0.04491197687864554, "alternization": 0.04491197687864554, "helper lemma": 0.09700399286574239, "helper": 0.29736558256021506, "lemma": 0.29736558256021506}}, {"docstring": "If there is a primitive `n`-th root of unity in `K`, then `X ^ n - 1`splits.\n", "keywords": {"root of unity": 0.02570861714399338, "splits": 0.04491197687864554, "primitive": 0.09568045026443411, "root": 0.15831692877998726, "unity": 0.15831692877998726}}, {"docstring": " Taking the first `l\u2081.length + i` elements in `l\u2081 ++ l\u2082` is the same as appending the first `i` elements of `l\u2082` to `l\u2081`.\n", "keywords": {"elements": 0.0388450670452431, "Taking": 0.07830062329966068, "length": 0.07830062329966068, "appending": 0.1036452554536235}}, {"docstring": "**Alias** of the reverse direction of le_sub_iff_add_le`.\n", "keywords": {"reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "add": 0.04491197687864554, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "The second projection at a point in a product is `C^\u221e`.\n", "keywords": {"projection": 0.15831692877998726, "point": 0.15831692877998726, "product": 0.15831692877998726}}, {"docstring": " Assumes right covariance. The lemma assuming left covariance is `left.mul_lt_one`.\n", "keywords": {"Assumes": 0.1554527012770092, "Assumes right covariance": 0.15550511668375397, "left.mul": 0.22125774619993788, "covariance": 0.23433876543145388, "assuming left covariance": 0.2741996606407343, "left covariance": 0.33210654690690034, "lemma assuming left": 0.33289593951751206, "lemma assuming": 0.39462694305349416, "assuming left": 0.39462694305349416, "lemma": 0.5319420725534505, "assuming": 0.5319420725534505, "left": 0.5319420725534505}}, {"docstring": "$x^n-y^n = (x-y) \\sum x^ky^{n-1-k}$ reformulated without `-` signs.\n", "keywords": {"signs": 0.04491197687864554, "sum": 0.09568045026443411, "reformulated": 0.09568045026443411}}, {"docstring": " The shadow of `falling m \ud835\udc9c` is disjoint from the `n`-sized elements of `\ud835\udc9c`, thanks to the antichain property.\n", "keywords": {"sized elements": 0.00899321792126428, "antichain property": 0.00899321792126428, "falling": 0.0771485953923296, "sized": 0.0771485953923296, "property": 0.0771485953923296, "shadow": 0.1155310835876123, "disjoint": 0.1155310835876123, "elements": 0.1155310835876123, "antichain": 0.1155310835876123}}, {"docstring": " For any three points in an orthocentric system generated by triangle `t`, there is a point in the subspace spanned by the triangle from which the distance of all those three points equals the circumradius.\n", "keywords": {"orthocentric system generated": 0.001918980733288297, "equals the circumradius": 0.010950223607557402, "orthocentric system": 0.015242402092303405, "system generated": 0.015242402092303405, "subspace spanned": 0.015242402092303405, "points equals": 0.01602601556134906, "generated by triangle": 0.04703881998590793, "points": 0.064364870990261, "triangle": 0.07814678709510423, "circumradius": 0.08839982026819171, "orthocentric": 0.12252983058564054, "system": 0.12252983058564054, "generated": 0.12252983058564054, "subspace": 0.12252983058564054, "spanned": 0.12252983058564054, "distance": 0.12252983058564054, "equals": 0.12252983058564054, "point": 0.128729741980522}}, {"docstring": "A subsemiring contains the semiring's 1.\n", "keywords": {"semiring": 0.15831692877998726, "subsemiring": 0.29736558256021506}}, {"docstring": "Rearrangement of `polynomial.sum_range_pow_eq_bernoulli_sub`.\n", "keywords": {"polynomial.sum": 0.04491197687864554, "range": 0.04491197687864554, "pow": 0.04491197687864554, "bernoulli": 0.04491197687864554, "Rearrangement": 0.15831692877998726}}, {"docstring": "A certain linear combination of the previous three identities, which we'll want later.\n", "keywords": {"previous three identities": 0.04940384002065631, "linear combination": 0.09700399286574239, "identities": 0.15831692877998726, "linear": 0.29736558256021506, "combination": 0.29736558256021506, "previous": 0.29736558256021506}}, {"docstring": "An explicit version of **B\u00e9zout's lemma** for Euclidean domains.\n", "keywords": {"B\u00e9zout lemma": 0.013797198203993007, "Euclidean domains": 0.023458380875189744, "B\u00e9zout": 0.08596317751626563, "explicit version": 0.09700399286574239, "Euclidean": 0.1447773057422032, "lemma": 0.15831692877998726, "domains": 0.15831692877998726, "explicit": 0.29736558256021506, "version": 0.29736558256021506}}, {"docstring": "The identity map preserves multiplication.\n", "keywords": {"map preserves multiplication": 0.016559150827736194, "identity map preserves": 0.03339840940482845, "preserves multiplication": 0.04940384002065631, "identity map": 0.09700399286574239, "map preserves": 0.09700399286574239, "multiplication": 0.15831692877998726, "identity": 0.29736558256021506, "map": 0.29736558256021506, "preserves": 0.29736558256021506}}, {"docstring": "The product of a Liouville number and a nonzero rational number is again a Liouville number.\n", "keywords": {"nonzero rational number": 0.006066974834826864, "Liouville number": 0.007475965728633385, "nonzero rational": 0.024843479720507586, "Liouville": 0.032146791508256736, "rational number": 0.03699458183918262, "number": 0.07637706038702928, "product": 0.1556959951131179, "nonzero": 0.1556959951131179, "rational": 0.1556959951131179}}, {"docstring": " If the extended distance between consecutive points of a sequence is estimated by a summable series of `nnreal`s, then the original sequence is a Cauchy sequence.\n", "keywords": {"Cauchy sequence": 0.013504260725188764, "extended distance": 0.020792453401133174, "distance between consecutive": 0.020792453401133174, "consecutive points": 0.020792453401133174, "summable series": 0.020792453401133174, "original sequence": 0.026121261382246075, "sequence is estimated": 0.04588251566808174, "nnreal": 0.05654387216689109, "sequence": 0.059455229634205825, "Cauchy": 0.07470229078715576, "extended": 0.14271977194687208, "distance": 0.14271977194687208, "consecutive": 0.14271977194687208, "points": 0.14271977194687208, "estimated": 0.14271977194687208, "summable": 0.14271977194687208, "series": 0.14271977194687208, "original": 0.14271977194687208}}, {"docstring": "The identity map is a semiring homomorphism.\n", "keywords": {"semiring homomorphism": 0.04940384002065631, "identity map": 0.09700399286574239, "homomorphism": 0.15831692877998726, "identity": 0.29736558256021506, "map": 0.29736558256021506, "semiring": 0.29736558256021506}}, {"docstring": "As expected, the Fibonacci sequence is a solution of `fib_rec`.\n", "keywords": {"fib": 0.04491197687864554, "rec": 0.04491197687864554, "Fibonacci sequence": 0.04498862876540802, "Fibonacci": 0.1447773057422032, "expected": 0.15831692877998726, "sequence": 0.29736558256021506, "solution": 0.29736558256021506}}, {"docstring": "For `n \u2260 m`,`(n, m)` is in the transitive closure of a relation `~` if `i ~ succ i` and  `succ i ~ i` for all `i` between `n` and `m`.\n", "keywords": {"transitive closure": 0.01085898992882147, "succ": 0.029139853932674247, "relation": 0.07830062329966068, "transitive": 0.1036452554536235, "closure": 0.1036452554536235}}, {"docstring": " The function `(x ^ n) / (b * exp x + c)` tends to `0` at `+\u221e`, for any natural number `n` and any real numbers `b` and `c` such that `b` is nonzero.\n", "keywords": {"natural number": 0.014146116061608767, "real numbers": 0.014146116061608767, "function": 0.09202664026077896, "exp": 0.09202664026077896, "nonzero": 0.09202664026077896, "number": 0.10202857019797992, "numbers": 0.10202857019797992, "natural": 0.1367145963576765, "real": 0.1367145963576765}}, {"docstring": "For the equality, see `cthickening_thickening`.\n", "keywords": {"cthickening": 0.04491197687864554, "equality": 0.15831692877998726}}, {"docstring": "A minimal polynomial is not `1`.\n", "keywords": {"minimal polynomial": 0.09700399286574239, "minimal": 0.29736558256021506, "polynomial": 0.29736558256021506}}, {"docstring": " Given a `cont_diff` function over `\ud835\udd42` (which is `\u211d` or `\u2102`) with an invertible derivative at `a`, the inverse function (produced by `cont_diff.to_local_homeomorph`) is also `cont_diff`.\n", "keywords": {"cont": 0.012303426844691396, "diff": 0.022790002739106262, "invertible derivative": 0.022902815606702678, "inverse function": 0.03186128822416174, "diff.to": 0.059572864407278624, "local": 0.059572864407278624, "homeomorph": 0.059572864407278624, "produced": 0.10121745919027951, "function": 0.10317744397286273, "invertible": 0.14963295453349099, "derivative": 0.14963295453349099, "inverse": 0.14963295453349099}}, {"docstring": "A surjective map has dense range.\n", "keywords": {"dense range": 0.04940384002065631, "surjective map": 0.09700399286574239, "map has dense": 0.09700399286574239, "range": 0.15831692877998726, "surjective": 0.29736558256021506, "map": 0.29736558256021506, "dense": 0.29736558256021506}}, {"docstring": "In an `n`-dimensional space, the rank is at most `m`.\n", "keywords": {"dimensional space": 0.02570861714399338, "dimensional": 0.15831692877998726, "space": 0.15831692877998726, "rank": 0.29736558256021506}}, {"docstring": " The sum of two upper semicontinuous functions is upper semicontinuous. Formulated with an explicit continuity assumption on addition, for application to `ereal`. The unprimed version of the lemma uses `[has_continuous_add]`.\n", "keywords": {"upper semicontinuous functions": 0.007327296516767814, "upper semicontinuous": 0.016851204808897166, "semicontinuous functions": 0.03821554584844725, "functions is upper": 0.08667762295794612, "upper": 0.09028232117950413, "semicontinuous": 0.09028232117950413, "explicit continuity assumption": 0.1917383839555026, "sum": 0.2038542769622493, "functions": 0.2038542769622493, "assumption on addition": 0.20587493759307618, "ereal": 0.2425057621221154, "explicit continuity": 0.28461618066910277, "continuity assumption": 0.28461618066910277, "continuous": 0.31807004650910337, "add": 0.31807004650910337, "Formulated": 0.36270881646612724, "addition": 0.36270881646612724, "unprimed version": 0.46742777496856974, "explicit": 0.47069880880967624, "continuity": 0.47069880880967624}}, {"docstring": " A sequentially complete uniform space with a countable basis of the uniformity filter is complete.\n", "keywords": {"sequentially complete uniform": 0.009836841595559516, "complete uniform space": 0.009836841595559516, "uniform space": 0.03439110359613085, "countable basis": 0.03439110359613085, "uniformity filter": 0.03439110359613085, "sequentially complete": 0.05033870131288873, "complete uniform": 0.05033870131288873, "filter is complete": 0.11047974441476761, "complete": 0.1314201551237121, "sequentially": 0.1823394614884183, "uniform": 0.1823394614884183, "space": 0.1823394614884183, "countable": 0.1823394614884183, "basis": 0.1823394614884183, "uniformity": 0.1823394614884183, "filter": 0.1823394614884183}}, {"docstring": "Another version of `polynomial.sum_bernoulli`.\n", "keywords": {"polynomial.sum": 0.04491197687864554, "bernoulli": 0.04491197687864554, "version": 0.29736558256021506}}, {"docstring": "If `m` and `n` are `fintype` that lie in the same universe, the rank of `m \u00d7 n` matrices is  `(# n * # m).lift`.\n", "keywords": {"fintype": 0.04491197687864554, "lift": 0.04491197687864554, "universe": 0.0771485953923296, "matrices": 0.0771485953923296, "lie": 0.1155310835876123, "rank": 0.1155310835876123}}, {"docstring": "**Alias** of `left.add_nonneg`.\n", "keywords": {"Alias": 0.030396371632413578, "left.add": 0.04491197687864554, "nonneg": 0.04491197687864554}}, {"docstring": " A version of `exists_idempotent_of_compact_t2_of_continuous_mul_left` where the idempotent lies in some specified nonempty compact subsemigroup.\n", "keywords": {"nonempty compact subsemigroup": 0.0025243034372519164, "compact subsemigroup": 0.017599084419657855, "idempotent lies": 0.02635223776265893, "nonempty compact": 0.02635223776265893, "exists": 0.054709255964732355, "continuous": 0.054709255964732355, "mul": 0.054709255964732355, "left": 0.054709255964732355, "idempotent": 0.09269208833952335, "compact": 0.09269208833952335, "subsemigroup": 0.09329120537733218, "version": 0.1384995633470844, "lies": 0.1384995633470844, "nonempty": 0.1384995633470844}}, {"docstring": "In a seminormed ring, the left-multiplication `add_monoid_hom` is bounded.\n", "keywords": {"add": 0.04491197687864554, "monoid": 0.04491197687864554, "hom": 0.04491197687864554, "seminormed ring": 0.04940384002065631, "ring": 0.15831692877998726, "left-multiplication": 0.15831692877998726, "bounded": 0.15831692877998726, "seminormed": 0.29736558256021506}}, {"docstring": "Colex is an extension of the base ordering on \u03b1.\n", "keywords": {"base ordering": 0.09700399286574239, "Colex": 0.15831692877998726, "extension": 0.29736558256021506, "base": 0.29736558256021506, "ordering": 0.29736558256021506}}, {"docstring": "The presheaf valued in `punit` over any topological space is a sheaf.\n", "keywords": {"punit": 0.04491197687864554, "presheaf valued": 0.09700399286574239, "topological space": 0.09700399286574239, "sheaf": 0.15831692877998726, "presheaf": 0.29736558256021506, "valued": 0.29736558256021506, "topological": 0.29736558256021506, "space": 0.29736558256021506}}, {"docstring": "The intersection of a closed set and a compact set is a compact set.\n", "keywords": {"compact set": 0.015618870638040105, "closed set": 0.03886819368026632, "compact": 0.06413440160927163, "set": 0.07871881127264589, "intersection": 0.15842879763921927, "closed": 0.15842879763921927}}, {"docstring": "If `0 < n`, then `dihedral_group n` has `2n` elements.\n", "keywords": {"dihedral": 0.04491197687864554, "elements": 0.04491197687864554, "group": 0.09568045026443411}}, {"docstring": "In a locally compact space, every compact set is contained in the interior of a compact set.\n", "keywords": {"locally compact space": 0.003813698946513917, "compact set": 0.01931183272322324, "compact space": 0.02376398925399853, "locally compact": 0.03548219205177234, "set is contained": 0.061624617659079124, "compact": 0.07445801674689752, "set": 0.0832400932521967, "space": 0.10391704273842664, "locally": 0.1534034365742674, "contained": 0.1534034365742674, "interior": 0.1534034365742674}}, {"docstring": " If the multiplicative supports of `f` and `g` are finite, then the product of `f i / g i` equals the product of `f i` divided by the product of `g i`.\n", "keywords": {"equals the product": 0.007246691631915269, "multiplicative supports": 0.015876462971787696, "product": 0.026568936978197902, "finite": 0.09026273698178425, "equals": 0.09026273698178425, "divided": 0.09026273698178425, "multiplicative": 0.1250133601147411, "supports": 0.1250133601147411}}, {"docstring": "A sum over `s.subtype p` equals one over `s.filter p`.\n", "keywords": {"s.subtype": 0.09568045026443411, "equals": 0.09568045026443411, "s.filter": 0.09568045026443411, "sum": 0.15831692877998726}}, {"docstring": " A function `f` maps upwards closed sets (at_top sets) to upwards closed sets when it is a Galois insertion. The Galois \"insertion\" and \"connection\" is weakened to only require it to be an insertion and a connetion above `b'`.\n", "keywords": {"upwards closed sets": 0.005453824402809984, "maps upwards closed": 0.0058580100490871105, "upwards closed": 0.018228928337934283, "closed sets": 0.023103299039083806, "maps upwards": 0.034373518797203816, "top sets": 0.043541499276775406, "closed": 0.08087950894658054, "sets": 0.09101160730959573, "Galois": 0.1050998079919518, "upwards": 0.10872789703276788, "Galois insertion": 0.10980511035105468, "function": 0.15281838844298845, "maps": 0.15281838844298845, "top": 0.15281838844298845, "insertion": 0.15689989734744117, "connection": 0.2605732129055626, "weakened": 0.4946651631726185, "require": 0.4946651631726185, "connetion": 0.4946651631726185}}, {"docstring": "Out of three elements of a `linear_ordered_ring`, two must have the same sign.\n", "keywords": {"linear": 0.04491197687864554, "ordered": 0.04491197687864554, "ring": 0.04491197687864554, "sign": 0.09568045026443411, "elements": 0.15831692877998726}}, {"docstring": " **Rearrangement Inequality**: Pointwise multiplication of `f` and `g` is maximized when `f` and `g` monovary together. Stated by permuting the entries of `f`.\n", "keywords": {"Rearrangement Inequality": 0.0031146356952437464, "Pointwise multiplication": 0.008334116283452563, "Rearrangement": 0.05572221155747183, "Inequality": 0.05572221155747183, "Pointwise": 0.05572221155747183, "monovary": 0.10028582371075691, "Stated by permuting": 0.11755105063023073, "multiplication": 0.14832923246533666, "maximized": 0.14832923246533666, "permuting the entries": 0.165573765898185, "Stated": 0.2790829227183407, "permuting": 0.37689977775222827, "entries": 0.37689977775222827}}, {"docstring": "We can approximate `a / b : L` with `q / r`, where `r` has finitely many options for `L`.\n", "keywords": {"finitely many options": 0.02570861714399338, "approximate": 0.09568045026443411, "finitely": 0.15831692877998726, "options": 0.15831692877998726}}, {"docstring": "If `s` and `t` are bounded above sets in a `semilattice_sup`, then so is `s \u222a t`.\n", "keywords": {"bounded above sets": 0.02570861714399338, "semilattice": 0.04491197687864554, "bounded": 0.15831692877998726, "sets": 0.15831692877998726}}, {"docstring": "The union of two sets is bounded above if and only if each of the sets is.\n", "keywords": {"sets is bounded": 0.04437656514447953, "sets": 0.10901343189444501, "union": 0.19488865479360015, "bounded": 0.19488865479360015}}, {"docstring": " A version of `has_compact_support.continuous_convolution_left` that works if `G` is not locally compact but requires that `g` is integrable.\n", "keywords": {"locally compact": 0.04949487345881267, "support.continuous": 0.052376395424323874, "convolution": 0.052376395424323874, "left": 0.052376395424323874, "compact but requires": 0.10882816095144712, "integrable": 0.11060549338282699, "compact": 0.13023752997463905, "version": 0.18105634546484617, "works": 0.18105634546484617, "locally": 0.18105634546484617, "requires": 0.18105634546484617}}, {"docstring": " The sum of two lower semicontinuous functions is lower semicontinuous. Formulated with an explicit continuity assumption on addition, for application to `ereal`. The unprimed version of the lemma uses `[has_continuous_add]`.\n", "keywords": {"lower semicontinuous functions": 0.007327296516767814, "lower semicontinuous": 0.016851204808897166, "semicontinuous functions": 0.03821554584844725, "functions is lower": 0.08667762295794612, "lower": 0.09028232117950413, "semicontinuous": 0.09028232117950413, "explicit continuity assumption": 0.1917383839555026, "sum": 0.2038542769622493, "functions": 0.2038542769622493, "assumption on addition": 0.20587493759307618, "ereal": 0.2425057621221154, "explicit continuity": 0.28461618066910277, "continuity assumption": 0.28461618066910277, "continuous": 0.31807004650910337, "add": 0.31807004650910337, "Formulated": 0.36270881646612724, "addition": 0.36270881646612724, "unprimed version": 0.46742777496856974, "explicit": 0.47069880880967624, "continuity": 0.47069880880967624}}, {"docstring": "The finrank of `(\u03b9 \u2192 R)` is `fintype.card \u03b9`.\n", "keywords": {"fintype.card": 0.09568045026443411, "finrank": 0.15831692877998726}}, {"docstring": " The pigeonhole principle for finitely many pigeons counted by heads: there is a pigeonhole with at most as many pigeons as the floor of the average number of pigeons across all pigeonholes.  (\"The minimum is at most the mean\" specialized to integers.)  More formally, given a function `f`, a finite sets `s` in its domain, a finite set `t` in its codomain, and a natural number `n` such that `card s < card t * n`, there exists `y \u2208 t` such that its preimage in `s` has less than `n` elements.\n", "keywords": {"counted by heads": 0.02572230631859467, "pigeons counted": 0.031453368078410475, "principle for finitely": 0.03359215177580624, "pigeonhole principle": 0.036948865394092874, "finitely many pigeons": 0.05476071965500144, "pigeons": 0.05638349514384239, "average number": 0.0750004012305793, "pigeonhole": 0.09882560005922711, "heads": 0.13910277539473598, "specialized to integers": 0.14838102197497458, "finite sets": 0.16073609118998702, "principle": 0.18027865547682534, "finitely": 0.18027865547682534, "counted": 0.18027865547682534, "floor": 0.18027865547682534, "average": 0.18027865547682534, "number": 0.1934998596303859, "finite": 0.20493169749074835, "card": 0.20493169749074835, "number of pigeons": 0.23526588250947159}}, {"docstring": "Any category with products and equalizers has all limits.  See <https://stacks.math.columbia.edu/tag/002N>.\n", "keywords": {"category with products": 0.1495930091794576, "products and equalizers": 0.1495930091794576, "limits": 0.2005079697193566, "category": 0.36073110501666333, "products": 0.36073110501666333, "equalizers": 0.36073110501666333}}, {"docstring": "If `C` has all limits of diagrams `pair X Y`, then it has all binary products\n", "keywords": {"limits of diagrams": 0.015380821171891606, "binary products": 0.015380821171891606, "diagrams": 0.09568045026443411, "pair": 0.09568045026443411, "products": 0.09568045026443411, "limits": 0.15831692877998726, "binary": 0.15831692877998726}}, {"docstring": " Let `X` be a topological space and let `s, t \u2286 X` be two subsets.  If there is an inclusion `t \u2286 s`, then the topological space structure on `t` induced by `X` is the same as the one obtained by the induced topological space structure on `s`.\n", "keywords": {"topological space structure": 0.017534108986178857, "topological space": 0.02644821149510495, "space structure": 0.050289634530403755, "induced topological space": 0.05211972504392525, "space": 0.0820034669623161, "topological": 0.09960535862264402, "subsets": 0.14425530823313737, "induced topological": 0.18078253266463842, "structure": 0.18573924794973942, "induced": 0.2561843481137578, "inclusion": 0.3692700094905303, "obtained": 0.4574266745821309}}, {"docstring": "`padic_val_rat p q` is symmetric in `q`.\n", "keywords": {"padic": 0.04491197687864554, "val": 0.04491197687864554, "rat": 0.09568045026443411, "symmetric": 0.15831692877998726}}, {"docstring": " If the directions of two nonempty affine subspaces are complements of each other, they intersect in exactly one point.\n", "keywords": {"nonempty affine subspaces": 0.0042542192213185686, "nonempty affine": 0.02570861714399338, "affine subspaces": 0.02570861714399338, "subspaces are complements": 0.02570861714399338, "point": 0.09568045026443411, "directions": 0.15831692877998726, "nonempty": 0.15831692877998726, "affine": 0.15831692877998726, "subspaces": 0.15831692877998726, "complements": 0.15831692877998726, "intersect": 0.15831692877998726}}, {"docstring": "The composition of `C^n` functions at points is `C^n`.\n", "keywords": {"functions at points": 0.015380821171891606, "functions": 0.09568045026443411, "composition": 0.15831692877998726, "points": 0.15831692877998726}}, {"docstring": "The **alternating series test** for antitone sequences.\n", "keywords": {"alternating series test": 0.008321268142839145, "alternating series": 0.04940384002065631, "series test": 0.04940384002065631, "antitone sequences": 0.04940384002065631, "alternating": 0.15831692877998726, "test": 0.15831692877998726, "sequences": 0.15831692877998726, "series": 0.29736558256021506, "antitone": 0.29736558256021506}}, {"docstring": "If all elements of a `finset` fail to satisfy the predicate `p`, `s.filter p` is `\u2205`.\n", "keywords": {"fail to satisfy": 0.015380821171891606, "satisfy the predicate": 0.015380821171891606, "finset": 0.04491197687864554, "fail": 0.09568045026443411, "predicate": 0.09568045026443411, "s.filter": 0.09568045026443411, "elements": 0.15831692877998726, "satisfy": 0.15831692877998726}}, {"docstring": " If a small natural number is divisible by a larger natural number, the small number is zero.\n", "keywords": {"larger natural number": 0.005008170218688229, "small natural number": 0.007210822908060662, "natural number": 0.015118097135652368, "larger natural": 0.028278856603798964, "small number": 0.03905207960828067, "small natural": 0.04037446048852797, "number is divisible": 0.04798889937176477, "number": 0.056197734384502714, "natural": 0.08704027729228296, "small": 0.11146455649386641, "divisible": 0.15797947932871687, "larger": 0.15797947932871687}}, {"docstring": "Shows that the sequence of denominators is monotone, that is `B\u2099 \u2264 B\u2099\u208a\u2081`.\n", "keywords": {"denominators is monotone": 0.015380821171891606, "sequence of denominators": 0.02570861714399338, "Shows": 0.09568045026443411, "monotone": 0.09568045026443411, "sequence": 0.15831692877998726, "denominators": 0.15831692877998726}}, {"docstring": "Equality behind `add_commute a b`; useful for rewriting.\n", "keywords": {"add": 0.04491197687864554, "Equality": 0.15831692877998726, "commute": 0.15831692877998726, "rewriting": 0.15831692877998726}}, {"docstring": "The value of `ultrafilter.extend f` on an ultrafilter `b` is the  unique limit of the ultrafilter `b.map f` in `\u03b3`.\n", "keywords": {"unique limit": 0.019557279302732804, "ultrafilter": 0.05201485183844375, "ultrafilter.extend": 0.09329120537733218, "b.map": 0.09329120537733218, "unique": 0.1384995633470844, "limit": 0.1384995633470844}}, {"docstring": " If `(a : \u2115)` is a root of `cyclotomic n (zmod p)`, then the multiplicative order of `a` modulo `p` divides `n`.\n", "keywords": {"multiplicative order": 0.013527995261974615, "modulo": 0.04491197687864554, "divides": 0.04491197687864554, "cyclotomic": 0.0771485953923296, "zmod": 0.0771485953923296, "root": 0.1155310835876123, "multiplicative": 0.1155310835876123, "order": 0.1155310835876123}}, {"docstring": "The geometric sequence `\u03bb n, \u03c6^n` is a solution of `fib_rec`.\n", "keywords": {"geometric sequence": 0.015380821171891606, "fib": 0.04491197687864554, "rec": 0.04491197687864554, "sequence": 0.09568045026443411, "geometric": 0.15831692877998726, "solution": 0.15831692877998726}}, {"docstring": "Every ideal of the product ring is of the form `I \u00d7 J`, where `I` and `J` can be explicitly    given as the image under the projection maps.\n", "keywords": {"projection maps": 0.0065920978564317735, "product ring": 0.009239332327148086, "form": 0.06844581806138879, "maps": 0.06844581806138879, "ideal": 0.09568045026443411, "product": 0.09568045026443411, "ring": 0.09568045026443411, "explicitly": 0.09568045026443411, "image": 0.09568045026443411, "projection": 0.09568045026443411}}, {"docstring": " Auxiliary lemma ensuring that, under the assumptions defining the tangent cone, the sequence `d` tends to 0 at infinity.\n", "keywords": {"Auxiliary lemma ensuring": 0.0010606143890052177, "Auxiliary lemma": 0.00899321792126428, "tangent cone": 0.00899321792126428, "lemma ensuring": 0.013527995261974615, "assumptions defining": 0.013527995261974615, "defining the tangent": 0.013527995261974615, "Auxiliary": 0.0771485953923296, "cone": 0.0771485953923296, "sequence": 0.0771485953923296, "lemma": 0.1155310835876123, "ensuring": 0.1155310835876123, "assumptions": 0.1155310835876123, "defining": 0.1155310835876123, "tangent": 0.1155310835876123}}, {"docstring": " If the distance between any two points in a nonempty set is bounded by some constant, this constant bounds the diameter.\n", "keywords": {"bounds the diameter": 0.020744656539556924, "nonempty set": 0.03439110359613085, "set is bounded": 0.03439110359613085, "constant bounds": 0.05033870131288873, "diameter": 0.11145728654016383, "constant": 0.1314201551237121, "distance": 0.1823394614884183, "points": 0.1823394614884183, "nonempty": 0.1823394614884183, "set": 0.1823394614884183, "bounded": 0.1823394614884183, "bounds": 0.1823394614884183}}, {"docstring": "Uniqueness property of `box_integral.partition.bUnion_index`.\n", "keywords": {"box": 0.04491197687864554, "index": 0.04491197687864554, "Uniqueness property": 0.04940384002065631, "Uniqueness": 0.15831692877998726, "property": 0.29736558256021506}}, {"docstring": "A series whose terms are bounded by the terms of a converging geometric series converges.\n", "keywords": {"geometric series converges": 0.00743554027099545, "converging geometric series": 0.012476328642182706, "series converges": 0.035552851931764155, "converging geometric": 0.039481144315219374, "geometric series": 0.05913243875864445, "converges": 0.11984314898676356, "terms are bounded": 0.12748048004056908, "series": 0.14323823713631006, "terms": 0.14323823713631006, "bounded": 0.19488865479360015, "converging": 0.19488865479360015, "geometric": 0.19488865479360015, "series whose terms": 0.2679012462364596}}, {"docstring": " If functions `f'` and `f` are inverse on `s` and `t`, `f` maps `s` into `t`, and `f'` maps `t` into `s`, then `f` is a bijection between `s` and `t`. The `maps_to` arguments can be deduced from `surj_on` statements using `left_inv_on.maps_to` and `right_inv_on.maps_to`.\n", "keywords": {"maps": 0.0625962114093873, "inv": 0.08956666041730367, "on.maps": 0.08956666041730367, "functions": 0.11944488874071287, "inverse": 0.155855278742161, "bijection": 0.155855278742161, "surj": 0.24651190480935437, "left": 0.24651190480935437, "arguments": 0.3202420163655913, "statements": 0.3202420163655913, "deduced": 0.3907029274746275}}, {"docstring": "Bind operation for `sup_indep`.\n", "keywords": {"indep": 0.04491197687864554, "Bind operation": 0.04940384002065631, "Bind": 0.15831692877998726, "operation": 0.29736558256021506}}, {"docstring": " In a Banach-algebra `\ud835\udd38` over a normed field `\ud835\udd42` of characteristic zero, if `x` and `y` are in the disk of convergence and commute, then `exp \ud835\udd42 (x + y) = (exp \ud835\udd42 x) * (exp \ud835\udd42 y)`.\n", "keywords": {"normed field": 0.010849179083141073, "convergence and commute": 0.010849179083141073, "disk of convergence": 0.015103835216116659, "exp": 0.01803208752898384, "Banach-algebra": 0.050323249253911136, "field": 0.08798773338320563, "commute": 0.08798773338320563, "normed": 0.12197993148826404, "characteristic": 0.12197993148826404, "disk": 0.12197993148826404, "convergence": 0.12197993148826404}}, {"docstring": "Independence of functions `f` and `g` into arbitrary types is characterized by the relation  `E[(\u03c6 \u2218 f) * (\u03c8 \u2218 g)] = E[\u03c6 \u2218 f] * E[\u03c8 \u2218 g]` for all measurable `\u03c6` and `\u03c8` with values in `\u211d`  satisfying appropriate integrability conditions.\n", "keywords": {"Independence of functions": 0.00470688094720815, "satisfying appropriate integrability": 0.0065920978564317735, "integrability conditions": 0.0065920978564317735, "arbitrary types": 0.009239332327148086, "types is characterized": 0.009239332327148086, "Independence": 0.06844581806138879, "functions": 0.06844581806138879, "relation": 0.06844581806138879, "measurable": 0.06844581806138879, "satisfying": 0.06844581806138879, "conditions": 0.06844581806138879, "arbitrary": 0.09568045026443411, "types": 0.09568045026443411, "characterized": 0.09568045026443411, "integrability": 0.09568045026443411}}, {"docstring": " An interval of length `a` filtered over a periodic predicate of period `a` has cardinality equal to the number naturals below `a` for which `p a` is true.\n", "keywords": {"interval of length": 0.005380746843605012, "predicate of period": 0.005380746843605012, "periodic predicate": 0.00717258304785508, "cardinality equal": 0.00717258304785508, "number naturals": 0.00717258304785508, "length": 0.06341998722529081, "filtered": 0.06341998722529081, "period": 0.06341998722529081, "true": 0.06341998722529081, "interval": 0.08438900089923473, "periodic": 0.08438900089923473, "predicate": 0.08438900089923473, "cardinality": 0.08438900089923473, "equal": 0.08438900089923473, "number": 0.08438900089923473, "naturals": 0.08438900089923473}}, {"docstring": "If `P` is a monic polynomial that splits, then `P.next_coeff` equals the sum of the roots.\n", "keywords": {"polynomial that splits": 0.015380821171891606, "equals the sum": 0.015380821171891606, "monic polynomial": 0.02570861714399338, "P.next": 0.030396371632413578, "coeff": 0.04491197687864554, "splits": 0.09568045026443411, "equals": 0.09568045026443411, "roots": 0.09568045026443411, "monic": 0.15831692877998726, "polynomial": 0.15831692877998726, "sum": 0.15831692877998726}}, {"docstring": "Open balls are bounded\n", "keywords": {"Open balls": 0.04940384002065631, "balls are bounded": 0.04940384002065631, "Open": 0.15831692877998726, "bounded": 0.15831692877998726, "balls": 0.29736558256021506}}, {"docstring": " If `f` satisfies a boundedness property around `0`, one can deduce a bound on `f m\u2081 - f m\u2082` using the multilinearity. Here, we give a precise but hard to use version. See `norm_image_sub_le_of_bound` for a less precise but more usable version. The bound reads `\u2225f m - f m'\u2225 \u2264   C * \u2225m 1 - m' 1\u2225 * max \u2225m 2\u2225 \u2225m' 2\u2225 * max \u2225m 3\u2225 \u2225m' 3\u2225 * ... * max \u2225m n\u2225 \u2225m' n\u2225 + ...`, where the other terms in the sum are the same products where `1` is replaced by any `i`.\n", "keywords": {"satisfies a boundedness": 0.01995810946176743, "boundedness property": 0.02235366738764914, "max": 0.08192956393565053, "bound": 0.10460275346438487, "precise but hard": 0.12634472735315436, "satisfies": 0.13233150516344, "multilinearity": 0.13233150516344, "version": 0.13677694514101776, "deduce a bound": 0.1371756074998044, "usable version": 0.1466516502047352, "boundedness": 0.1478678685157977, "property": 0.1478678685157977, "deduce": 0.1478678685157977, "precise": 0.149148938129987, "bound reads": 0.1799820940924863, "give a precise": 0.2515409181697201, "give": 0.3760413739362343, "hard": 0.3760413739362343, "norm": 0.4020062833314396, "image": 0.4020062833314396}}, {"docstring": " When `M` is finite free, the trace of a linear map correspond to the contraction pairing under the isomorphism `End(M) \u2243 M* \u2297 M`\n", "keywords": {"linear map correspond": 0.0008990471097494833, "finite free": 0.0065920978564317735, "linear map": 0.009239332327148086, "map correspond": 0.009239332327148086, "contraction pairing": 0.009239332327148086, "End": 0.030396371632413578, "free": 0.06844581806138879, "isomorphism": 0.06844581806138879, "finite": 0.09568045026443411, "trace": 0.09568045026443411, "linear": 0.09568045026443411, "map": 0.09568045026443411, "correspond": 0.09568045026443411, "contraction": 0.09568045026443411, "pairing": 0.09568045026443411}}, {"docstring": " `s` is in the upper shadow of `\ud835\udc9c` iff there is an `t \u2208 \ud835\udc9c` from which we can remove one element to get `s`.\n", "keywords": {"upper shadow": 0.02570861714399338, "remove one element": 0.02570861714399338, "iff": 0.09568045026443411, "upper": 0.15831692877998726, "shadow": 0.15831692877998726, "remove": 0.15831692877998726, "element": 0.15831692877998726}}, {"docstring": "Non-dependent version of `coe_fn_coe_base`, helps `rw` figure out the argument.\n", "keywords": {"coe": 0.019648131954263418, "Non-dependent version": 0.021567786782198985, "base": 0.05393656033701752, "Non-dependent": 0.11369206228658875, "figure": 0.11369206228658875, "argument": 0.11369206228658875, "version": 0.18569843656348187}}, {"docstring": "If `a`, `b` are positive, the prime divisors of `a * b` are the union of those of `a` and `b`\n", "keywords": {"prime divisors": 0.013527995261974615, "positive": 0.0771485953923296, "prime": 0.1155310835876123, "divisors": 0.1155310835876123, "union": 0.1155310835876123}}, {"docstring": " If `a \u2264 b`, then `(b, +\u221e) \u2286 (a, +\u221e)`. In preorders, this is just an implication. If you need the equivalence in linear orders, use `Ioi_subset_Ioi_iff`.\n", "keywords": {"Ioi": 0.0707248212798997, "subset": 0.31807004650910337, "iff": 0.31807004650910337, "preorders": 0.4187126706439023, "implication": 0.4187126706439023, "linear orders": 0.5001019392897985, "orders": 0.5120663821591114, "equivalence": 0.6510457398118691, "linear": 0.6510457398118691, "equivalence in linear": 0.7356909151878849}}, {"docstring": " For a function on a convex set in a linearly ordered space (where the order and the algebraic structures aren't necessarily compatible), in order to prove that it is convex, it suffices to verify the inequality `f (a \u2022 x + b \u2022 y) \u2264 a \u2022 f x + b \u2022 f y` for `x < y` and positive `a`, `b`. The main use case is `E = \ud835\udd5c` however one can apply it, e.g., to `\ud835\udd5c^n` with lexicographic order.\n", "keywords": {"linearly ordered space": 0.0018263447420417656, "ordered space": 0.013619546354222894, "necessarily compatible": 0.013619546354222894, "verify the inequality": 0.013619546354222894, "linearly ordered": 0.017307727632361308, "algebraic structures": 0.017307727632361308, "suffices to verify": 0.017307727632361308, "convex set": 0.017416939162416264, "convex": 0.06562193326285877, "order": 0.0802249901349966, "lexicographic order": 0.0898424218981943, "order to prove": 0.09901361610988368, "space": 0.10301342124031465, "compatible": 0.10301342124031465, "inequality": 0.10301342124031465, "positive": 0.10301342124031465, "function": 0.13043491345148592, "set": 0.13043491345148592, "linearly": 0.13043491345148592, "ordered": 0.13043491345148592}}, {"docstring": "**Alias** of the reverse direction of monotone_on_comp_of_dual_iff`.\n", "keywords": {"direction of monotone": 0.00899321792126428, "reverse direction": 0.013527995261974615, "Alias": 0.030396371632413578, "comp": 0.04491197687864554, "dual": 0.04491197687864554, "iff": 0.04491197687864554, "monotone": 0.0771485953923296, "reverse": 0.1155310835876123, "direction": 0.1155310835876123}}, {"docstring": "**Alias** of sbtw_cyclic_left`.\n", "keywords": {"Alias": 0.030396371632413578, "cyclic": 0.04491197687864554, "left": 0.04491197687864554, "sbtw": 0.15831692877998726}}, {"docstring": " See also `filter.tendsto.at_bot_mul_const` for a version of this lemma for `linear_ordered_field`s which does not require the `archimedean` assumption.\n", "keywords": {"bot": 0.04491197687864554, "mul": 0.04491197687864554, "const": 0.04491197687864554, "linear": 0.04491197687864554, "ordered": 0.04491197687864554, "field": 0.04491197687864554, "archimedean": 0.04491197687864554, "assumption": 0.04491197687864554, "version": 0.15831692877998726, "lemma": 0.15831692877998726, "require": 0.15831692877998726}}, {"docstring": "**Alias** of the reverse direction of mdifferentiable_on_iff_differentiable_on`.\n", "keywords": {"direction of mdifferentiable": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "differentiable": 0.04491197687864554, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "A minimal polynomial is nonzero.\n", "keywords": {"polynomial is nonzero": 0.04940384002065631, "minimal polynomial": 0.09700399286574239, "nonzero": 0.15831692877998726, "minimal": 0.29736558256021506, "polynomial": 0.29736558256021506}}, {"docstring": "Write `witt_structure_rat p \u03c6 n` in terms of `witt_structure_rat p \u03c6 i` for `i < n`.\n", "keywords": {"witt": 0.022926948811930963, "structure": 0.022926948811930963, "rat": 0.048789167937164486, "Write": 0.059806314729142, "terms": 0.20283314940424746}}, {"docstring": " If `x \u2260 y` belong to the same closed ball, then a convex combination of `x` and `y` with positive coefficients belongs to the corresponding open ball.\n", "keywords": {"positive coefficients belongs": 0.008593502756179337, "closed ball": 0.028813693746012673, "open ball": 0.028813693746012673, "convex combination": 0.037831312533597124, "positive coefficients": 0.037831312533597124, "coefficients belongs": 0.04212793185246166, "ball": 0.07334489383741183, "closed": 0.19092478917347616, "convex": 0.19092478917347616, "combination": 0.19092478917347616, "positive": 0.19092478917347616, "coefficients": 0.19092478917347616, "open": 0.19092478917347616, "belong": 0.21173213814816125, "belongs": 0.21173213814816125}}, {"docstring": "Postcomposing `f` with `prod.snd` is continuous at `x`\n", "keywords": {"Postcomposing": 0.04491197687864554, "prod.snd": 0.04491197687864554, "continuous": 0.29736558256021506}}, {"docstring": "Abelian groups have nilpotency class at most one\n", "keywords": {"Abelian groups": 0.04940384002065631, "groups have nilpotency": 0.09700399286574239, "nilpotency class": 0.09700399286574239, "Abelian": 0.15831692877998726, "groups": 0.29736558256021506, "nilpotency": 0.29736558256021506, "class": 0.29736558256021506}}, {"docstring": "**Alias** of the forward direction of inv_lt'`.\n", "keywords": {"direction of inv": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "inv": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " The inner product of two weighted sums, where the weights in each sum add to 0, in terms of the norms of pairwise differences.\n", "keywords": {"pairwise differences": 0.012051537142168538, "norms of pairwise": 0.018034246898548233, "weighted sums": 0.023937535241430174, "sum add": 0.023937535241430174, "differences": 0.08946888050496495, "product": 0.13309686053898662, "weighted": 0.13309686053898662, "weights": 0.13309686053898662, "add": 0.13309686053898662, "terms": 0.13309686053898662, "norms": 0.13309686053898662, "pairwise": 0.13309686053898662, "sums": 0.17564595615029244, "sum": 0.17564595615029244}}, {"docstring": " The norm on a real normed space is convex on any convex set. See also `seminorm.convex_on` and `convex_on_univ_norm`.\n", "keywords": {"real normed space": 0.00606332643195694, "real normed": 0.03240099222718639, "normed space": 0.03240099222718639, "convex set": 0.04986319364499169, "convex": 0.1217207764539426, "set": 0.13006528941675286, "norm": 0.15719619136718707, "real": 0.1771556257563685, "normed": 0.1771556257563685, "space": 0.1771556257563685, "space is convex": 0.18365654531093123, "seminorm.convex": 0.24943440037652218, "univ": 0.24943440037652218}}, {"docstring": " Let `{x | p x}` be a subsemigroup of a commutative additive monoid `M`. Let `f : M \u2192 N` be a map such that `f 0 = 0` and `f` is subadditive on `{x | p x}`, i.e. `p x \u2192 p y \u2192 f (x + y) \u2264 f x + f y`. Let `g i`, `i \u2208 s`, be a finite family of elements of `M` such that `\u2200 i \u2208 s, p (g i)`. Then `f (\u2211 x in s, g x) \u2264 \u2211 x in s, f (g x)`.\n", "keywords": {"commutative additive monoid": 0.000760763701602287, "additive monoid": 0.007876341082811154, "commutative additive": 0.009125021736448368, "monoid": 0.08218126042220884, "subsemigroup": 0.09509210613126085, "commutative": 0.09509210613126085, "additive": 0.09509210613126085, "finite family": 0.1370217448104557, "family of elements": 0.1370217448104557, "map": 0.2673813115504628, "subadditive": 0.2673813115504628, "finite": 0.34714455807623124, "family": 0.34714455807623124, "elements": 0.34714455807623124}}, {"docstring": "A special case of `f \u2218 id = f`, `f` a localization map.\n", "keywords": {"localization map": 0.00899321792126428, "special case": 0.013527995261974615, "map": 0.0771485953923296, "special": 0.1155310835876123, "case": 0.1155310835876123, "localization": 0.1155310835876123}}, {"docstring": "The degree of `cyclotomic n R` is positive.\n", "keywords": {"cyclotomic": 0.15831692877998726, "positive": 0.15831692877998726, "degree": 0.29736558256021506}}, {"docstring": "A more general version of `finsum_mem_union` that requires `s \u2229 support f` and `t \u2229 support f` rather than `s` and `t` to be finite.\n", "keywords": {"general version": 0.03439110359613085, "support": 0.04092200269394482, "finsum": 0.0528063806271324, "mem": 0.0528063806271324, "union": 0.0528063806271324, "requires": 0.11145728654016383, "finite": 0.11145728654016383, "general": 0.1823394614884183, "version": 0.1823394614884183}}, {"docstring": "Variant of the mean value inequality on a convex set. Version with `fderiv`.\n", "keywords": {"convex set": 0.07796891081290885, "fderiv": 0.17881754828257995, "Variant": 0.2005079697193566, "set": 0.2005079697193566, "inequality": 0.36073110501666333, "convex": 0.36073110501666333, "Version": 0.46553351027698087}}, {"docstring": "Seminorm-balls are convex.\n", "keywords": {"Seminorm-balls are convex": 0.02570861714399338, "Seminorm-balls": 0.15831692877998726, "convex": 0.15831692877998726}}, {"docstring": "Parallelogram law\n", "keywords": {"Parallelogram law": 0.02570861714399338, "Parallelogram": 0.15831692877998726, "law": 0.15831692877998726}}, {"docstring": "Verschiebung is the same as multiplication by `p` on the ring of Witt vectors of `zmod p`.\n", "keywords": {"ring of Witt": 0.013797198203993007, "Witt vectors": 0.013797198203993007, "Witt": 0.08596317751626563, "Verschiebung": 0.09568045026443411, "zmod": 0.09568045026443411, "multiplication": 0.15831692877998726, "ring": 0.15831692877998726, "vectors": 0.15831692877998726}}, {"docstring": "Two simplices with the same points have the same circumcenter.\n", "keywords": {"circumcenter": 0.09568045026443411, "simplices": 0.15831692877998726, "points": 0.15831692877998726}}, {"docstring": " In a commutative Banach-algebra `\ud835\udd38` over `\ud835\udd42 = \u211d` or `\ud835\udd42 = \u2102`, `exp \ud835\udd42 (x+y) = (exp \ud835\udd42 x) * (exp \ud835\udd42 y)`.\n", "keywords": {"commutative Banach-algebra": 0.005892405411510322, "exp": 0.019755481867657996, "Banach-algebra": 0.04981479432925768, "commutative": 0.11759334626031925}}, {"docstring": " A measure which is finite on compact sets in a locally compact space is locally finite. Not registered as an instance to avoid a loop with the other direction.\n", "keywords": {"locally compact space": 0.01231070417383099, "compact sets": 0.047955646507117214, "compact space": 0.047955646507117214, "locally compact": 0.05861034186909045, "locally finite": 0.05861034186909045, "space is locally": 0.10621571965380347, "finite": 0.11764922358066403, "compact": 0.11764922358066403, "locally": 0.11764922358066403, "finite on compact": 0.1914589291009703, "measure": 0.19448127235461415, "sets": 0.19448127235461415, "space": 0.19448127235461415, "instance to avoid": 0.2626481263808912, "avoid a loop": 0.2626481263808912, "direction": 0.34923579093543095, "registered": 0.4560852048781111, "instance": 0.4560852048781111, "avoid": 0.4560852048781111, "loop": 0.4560852048781111}}, {"docstring": " Adding an element at the beginning of a tuple and then updating it amounts to adding it directly.\n", "keywords": {"updating it amounts": 0.03498702377830618, "adding it directly": 0.06956410889469504, "amounts to adding": 0.11245662598947327, "Adding an element": 0.11245662598947329, "directly": 0.11246769819744629, "Adding": 0.13282721021560867, "element": 0.1838594885424691, "beginning": 0.1838594885424691, "tuple": 0.1838594885424691, "updating": 0.1838594885424691, "amounts": 0.1838594885424691}}, {"docstring": " Given a predicate on functions `\u03a0 i, finset (\u03b1 i)` defined on a finite type, it is true on all maps provided that it is true on `\u03bb _, \u2205` and for any function `g : \u03a0 i, finset (\u03b1 i)`, an index `i : \u03b9`, and `x \u2209 g i`, `p g` implies `p (update g i (insert x (g i)))`.  See also `finset.induction_on_pi_max` and `finset.induction_on_pi_min` for specialized versions that require `\u03a0 i, linear_order (\u03b1 i)`.\n", "keywords": {"finite type": 0.009862288712530065, "maps provided": 0.011555918914723708, "predicate on functions": 0.019795538785287344, "finset": 0.025317749539298537, "true": 0.03566300123546264, "functions": 0.07132600247092528, "function": 0.07132600247092528, "implies": 0.07672996943391129, "finset.induction": 0.0781445564917237, "versions that require": 0.08224895669414367, "defined": 0.09137097565943862, "type": 0.09137097565943862, "index": 0.09137097565943862, "update": 0.09137097565943862, "insert": 0.09137097565943862, "specialized versions": 0.09433465734062044, "predicate": 0.1068826702165894, "finite": 0.1068826702165894, "maps": 0.1068826702165894, "provided": 0.1068826702165894}}, {"docstring": "`multiset.map f` preserves `count` if `f` is injective\n", "keywords": {"preserves": 0.04491197687864554, "count": 0.04491197687864554, "multiset.map": 0.09568045026443411, "injective": 0.09568045026443411}}, {"docstring": "Alternative version of `list.prod_update_nth` when the list is over a group\n", "keywords": {"list.prod": 0.04491197687864554, "update": 0.04491197687864554, "nth": 0.04491197687864554, "Alternative version": 0.04940384002065631, "Alternative": 0.15831692877998726, "group": 0.15831692877998726, "version": 0.29736558256021506, "list": 0.29736558256021506}}, {"docstring": "**Alias** of the forward direction of finset.inv_nonempty_iff`.\n", "keywords": {"direction of finset.inv": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "nonempty": 0.04491197687864554, "iff": 0.04491197687864554, "finset.inv": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " The composition `l \u2218 f` where `l : F \u2192 E` and `f : \ud835\udd5c \u2192 F`, has a derivative within a set equal to the Fr\u00e9chet derivative of `l` applied to the derivative of `f`.\n", "keywords": {"Fr\u00e9chet derivative": 0.00808846730672922, "set equal": 0.012402885817916232, "derivative": 0.04447638824122113, "Fr\u00e9chet": 0.06013354687754092, "composition": 0.08377900881718926, "applied": 0.08377900881718926, "set": 0.11068395919254974, "equal": 0.11068395919254974}}, {"docstring": "Express `nndist` in terms of `edist`\n", "keywords": {"Express": 0.04491197687864554, "nndist": 0.04491197687864554, "edist": 0.04491197687864554, "terms": 0.29736558256021506}}, {"docstring": "A variant of `matrix.mv_polynomial_X_map_eval\u2082` with a bundled `alg_hom` on the LHS.\n", "keywords": {"matrix.mv": 0.04491197687864554, "polynomial": 0.04491197687864554, "map": 0.04491197687864554, "alg": 0.04491197687864554, "hom": 0.04491197687864554, "LHS": 0.057012387690331526, "eval": 0.09568045026443411, "bundled": 0.09568045026443411, "variant": 0.15831692877998726}}, {"docstring": " In a monoid with zero, zero equals one if and only if all elements of that semiring are equal.\n", "keywords": {"semiring are equal": 0.12194096740933036, "monoid": 0.19092478917347616, "elements": 0.19092478917347616, "semiring": 0.19092478917347616, "equals": 0.27891038992107275, "equal": 0.27891038992107275}}, {"docstring": "If `\u03b1` is an infinite type, then `\u03b1 \u00d7 \u03b1` and `\u03b1` have the same cardinality.\n", "keywords": {"infinite type": 0.0065920978564317735, "type": 0.06844581806138879, "cardinality": 0.06844581806138879, "infinite": 0.09568045026443411}}, {"docstring": "If `\u03c6` is a normed bump function, compute `\u03c6 \u22c6 g` if `g` is constant on `metric.ball x\u2080 \u03c6.R`.\n", "keywords": {"normed bump function": 0.0025258761156662004, "bump function": 0.015380821171891606, "normed bump": 0.02570861714399338, "compute": 0.04491197687864554, "function": 0.09568045026443411, "metric.ball": 0.09568045026443411, "normed": 0.15831692877998726, "bump": 0.15831692877998726, "constant": 0.15831692877998726}}, {"docstring": "Two equivalent local equivs have the same source\n", "keywords": {"equivalent local equivs": 0.03339840940482845, "equivalent local": 0.09700399286574239, "local equivs": 0.09700399286574239, "source": 0.15831692877998726, "equivalent": 0.29736558256021506, "local": 0.29736558256021506, "equivs": 0.29736558256021506}}, {"docstring": " Intermediate value theorem for two functions: if `f` and `g` are two functions continuous on a preconnected set `s` and for some `a b \u2208 s` we have `f a \u2264 g a` and `g b \u2264 f b`, then for some `x \u2208 s` we have `f x = g x`.\n", "keywords": {"Intermediate value theorem": 0.009386651690650429, "preconnected set": 0.009386651690650429, "functions continuous": 0.012818701037910368, "functions": 0.05566114900812666, "Intermediate": 0.08179429269966654, "set": 0.08179429269966654, "theorem": 0.11369206228658875, "continuous": 0.11369206228658875, "preconnected": 0.11369206228658875}}, {"docstring": " See also `complex.continuous_at_cpow_const` for a version that assumes `z \u2260 0` but makes no assumptions about `w`.\n", "keywords": {"complex.continuous": 0.04491197687864554, "cpow": 0.04491197687864554, "const": 0.04491197687864554, "version that assumes": 0.04940384002065631, "makes no assumptions": 0.09700399286574239, "assumes": 0.15831692877998726, "version": 0.29736558256021506, "makes": 0.29736558256021506, "assumptions": 0.29736558256021506}}, {"docstring": " Two measures which are finite on closed-open intervals are equal if the agree on all open-closed intervals.\n", "keywords": {"finite on closed-open": 0.034987023778306175, "closed-open intervals": 0.051351238837580325, "open-closed intervals": 0.051351238837580325, "intervals are equal": 0.11245662598947327, "intervals": 0.13282721021560867, "measures": 0.18385948854246909, "finite": 0.18385948854246909, "closed-open": 0.18385948854246909, "equal": 0.18385948854246909, "agree": 0.18385948854246909, "open-closed": 0.18385948854246909}}, {"docstring": "A version of `continuous_inf_dom_left` for binary functions\n", "keywords": {"continuous": 0.04491197687864554, "dom": 0.04491197687864554, "left": 0.04491197687864554, "binary functions": 0.04940384002065631, "functions": 0.15831692877998726, "version": 0.29736558256021506, "binary": 0.29736558256021506}}, {"docstring": " If `\u03c0` is a partition of `I`, then there exists a finite set `s` of hyperplanes such that `split_many I s \u2264 \u03c0`.\n", "keywords": {"finite set": 0.015380821171891606, "exists a finite": 0.02570861714399338, "split": 0.04491197687864554, "set": 0.09568045026443411, "partition": 0.15831692877998726, "exists": 0.15831692877998726, "finite": 0.15831692877998726, "hyperplanes": 0.15831692877998726}}, {"docstring": " **Legendre's Theorem**  The multiplicity of a prime in `n!` is the sum of the quotients `n / p ^ i`. This sum is expressed over the finset `Ico 1 b` where `b` is any bound greater than `log p n`.\n", "keywords": {"Legendre Theorem": 0.003126012090400368, "Legendre": 0.05582356662607999, "Theorem": 0.05582356662607999, "quotients": 0.10630075322936205, "Ico": 0.12748790005930788, "sum": 0.13364860469108616, "multiplicity": 0.14623340726105694, "prime": 0.14623340726105694, "bound greater": 0.1616029063170083, "sum is expressed": 0.2230084422926204, "finset": 0.2923372953262933, "log": 0.2923372953262933, "expressed": 0.37298875481161287, "bound": 0.37298875481161287, "greater": 0.37298875481161287}}, {"docstring": " Given a finite set `s`, the product of `f i * g i` over `i \u2208 s` equals the product of `f i` over `i \u2208 s` times the product of `g i` over `i \u2208 s`.\n", "keywords": {"equals the product": 0.004829246850193831, "times the product": 0.004829246850193831, "finite set": 0.007576733965429868, "product": 0.020571714869365307, "set": 0.077874520754567, "equals": 0.077874520754567, "times": 0.077874520754567, "finite": 0.09656250441100277}}, {"docstring": " If `E` is a nontrivial normed space over a nondiscrete normed field `\ud835\udd5c`, then `E` is unbounded: for any `c : \u211d`, there exists a vector `x : E` with norm strictly greater than `c`.\n", "keywords": {"nondiscrete normed field": 0.0021032528023050994, "norm strictly greater": 0.0023865934611261787, "nontrivial normed space": 0.0031678434866632852, "exists a vector": 0.011752516585960321, "normed field": 0.015502416866670433, "norm strictly": 0.017595046402022366, "strictly greater": 0.017595046402022366, "nontrivial normed": 0.023251977563965413, "normed space": 0.023251977563965413, "nondiscrete normed": 0.023251977563965413, "normed": 0.08640514249691128, "field": 0.0883382645966668, "unbounded": 0.0883382645966668, "vector": 0.0883382645966668, "nontrivial": 0.13149453879183629, "space": 0.13149453879183629, "nondiscrete": 0.13149453879183629, "exists": 0.13149453879183629, "norm": 0.13149453879183629, "strictly": 0.13149453879183629}}, {"docstring": " The property of being `C^n`, initially defined in terms of the Fr\u00e9chet derivative, can be reformulated in terms of the one-dimensional derivative on sets with unique derivatives.\n", "keywords": {"initially defined": 0.014828404343786157, "defined in terms": 0.01704596780073021, "reformulated in terms": 0.01704596780073021, "Fr\u00e9chet derivative": 0.019294530470392805, "sets with unique": 0.022100112769122965, "one-dimensional derivative": 0.0380842291898487, "unique derivatives": 0.0380842291898487, "terms": 0.05699024958895423, "Fr\u00e9chet": 0.07587041692982494, "initially": 0.09936908226344737, "derivative on sets": 0.11395999139559262, "derivative": 0.12474755846130707, "property": 0.14704508975047056, "defined": 0.14704508975047056, "reformulated": 0.14704508975047056, "one-dimensional": 0.14704508975047056, "sets": 0.14704508975047056, "unique": 0.14704508975047056}}, {"docstring": "**Alias** of the reverse direction of is_max_filter_dual_iff`.\n", "keywords": {"reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "max": 0.04491197687864554, "filter": 0.04491197687864554, "dual": 0.04491197687864554, "iff": 0.04491197687864554, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "Any two nonzero left-invariant measures are absolutely continuous w.r.t. each other.\n", "keywords": {"nonzero left-invariant measures": 0.03339840940482845, "absolutely continuous": 0.04940384002065631, "nonzero left-invariant": 0.09700399286574239, "left-invariant measures": 0.09700399286574239, "measures are absolutely": 0.09700399286574239, "continuous": 0.15831692877998726, "nonzero": 0.29736558256021506, "left-invariant": 0.29736558256021506, "measures": 0.29736558256021506, "absolutely": 0.29736558256021506}}, {"docstring": "Sum of elements in an `add_submonoid` of an `add_comm_monoid` indexed by a `finset` is in the `add_submonoid`.\n", "keywords": {"add": 0.012329400381139773, "Sum of elements": 0.015411349595587466, "submonoid": 0.022829596169123615, "comm": 0.0596404586934656, "monoid": 0.0596404586934656, "finset": 0.0596404586934656, "Sum": 0.1013272142599222, "indexed": 0.1013272142599222, "elements": 0.14978645964327916}}, {"docstring": " **Maximum modulus principle**: if `f : E \u2192 F` is complex differentiable on a nonempty bounded set `U` and is continuous on its closure, then there exists a point `z \u2208 frontier U` such that `\u03bb z, \u2225f z\u2225` takes it maximum value on `closure U` at `z`.\n", "keywords": {"Maximum modulus principle": 0.000915821030267581, "nonempty bounded set": 0.0010703368733089073, "modulus principle": 0.009277824860263103, "bounded set": 0.009277824860263103, "exists a point": 0.009277824860263103, "Maximum modulus": 0.011088453307348945, "complex differentiable": 0.012945447846677583, "nonempty bounded": 0.012945447846677583, "Maximum": 0.04850497828042653, "closure": 0.06975210110781825, "principle": 0.0813148616571504, "set": 0.0813148616571504, "point": 0.0813148616571504, "frontier": 0.0813148616571504, "modulus": 0.11304868402153367, "complex": 0.11304868402153367, "differentiable": 0.11304868402153367, "nonempty": 0.11304868402153367, "bounded": 0.11304868402153367, "continuous": 0.11304868402153367}}, {"docstring": "$\\lim_{x\\to+\\infty}|x|=+\\infty$\n", "keywords": {"infty": 0.02245598843932277, "lim": 0.05899937629682816}}, {"docstring": "If `\u2200 I > J, P I` implies `P J`, then `P` holds for all submodules.\n", "keywords": {"implies": 0.04491197687864554, "holds": 0.0771485953923296, "submodules": 0.0771485953923296}}, {"docstring": " If `f` and `g` are two exact solutions of the same ODE, then the distance between them can't grow faster than exponentially. This is a simple corollary of Gr\u00f6nwall's inequality, and some people call this Gr\u00f6nwall's inequality too.  This version assumes all inequalities to be true in the whole space.\n", "keywords": {"faster than exponentially": 0.028842219113334244, "exact solutions": 0.04234451590198387, "grow faster": 0.04234451590198387, "Gr\u00f6nwall inequality": 0.057897820367707714, "ODE": 0.06594390564498799, "Gr\u00f6nwall": 0.12085326255275429, "exponentially": 0.13908713173569395, "exact": 0.2015547062251367, "solutions": 0.2015547062251367, "distance": 0.2015547062251367, "grow": 0.2015547062251367, "faster": 0.2015547062251367, "inequality": 0.21467881006288766, "corollary of Gr\u00f6nwall": 0.24723666413525158, "call this Gr\u00f6nwall": 0.24723666413525158, "simple corollary": 0.27915536550116243, "people call": 0.27915536550116243, "space": 0.44978981696302306, "version assumes": 0.4589923825313695, "assumes all inequalities": 0.4589923825313695}}, {"docstring": " The weighted sum is unaffected by changing the weights to the corresponding indicator function and adding points to the set.\n", "keywords": {"weighted sum": 0.009239332327148086, "sum is unaffected": 0.009239332327148086, "unaffected by changing": 0.009239332327148086, "changing the weights": 0.009239332327148086, "indicator function": 0.009239332327148086, "function and adding": 0.009239332327148086, "adding points": 0.009239332327148086, "set": 0.06844581806138879, "weighted": 0.09568045026443411, "sum": 0.09568045026443411, "unaffected": 0.09568045026443411, "changing": 0.09568045026443411, "weights": 0.09568045026443411, "indicator": 0.09568045026443411, "function": 0.09568045026443411, "adding": 0.09568045026443411, "points": 0.09568045026443411}}, {"docstring": "Uniformisers exist in a DVR\n", "keywords": {"Uniformisers exist": 0.04940384002065631, "DVR": 0.08596317751626563, "Uniformisers": 0.15831692877998726, "exist": 0.29736558256021506}}, {"docstring": "The norm of the projection is smaller or equal to the norm of the original element.\n", "keywords": {"original element": 0.009386651690650429, "projection is smaller": 0.013095151449018445, "smaller or equal": 0.013095151449018445, "norm": 0.04213844269123149, "element": 0.08179429269966654, "projection": 0.11369206228658875, "smaller": 0.11369206228658875, "equal": 0.11369206228658875, "original": 0.11369206228658875}}, {"docstring": "Closure of a substructure `S` equals `S`.\n", "keywords": {"equals": 0.04491197687864554, "Closure": 0.09568045026443411, "substructure": 0.09568045026443411}}, {"docstring": " The product of two elements of the additive closure of a submonoid `M` is an element of the additive closure of `M`.\n", "keywords": {"additive closure": 0.003732910352912089, "additive": 0.043042116806526344, "closure": 0.043042116806526344, "submonoid": 0.0839129427108544, "elements": 0.1095496626521568, "element": 0.1095496626521568, "product": 0.11085570077618385}}, {"docstring": "`s \u2208 \u2202 \ud835\udc9c` iff `s` is exactly one element less than something from `\ud835\udc9c`\n", "keywords": {"iff": 0.04491197687864554, "element": 0.15831692877998726}}, {"docstring": " The multiplicity of an irreducible factor of a nonzero element is exactly the number of times the normalized factor occurs in the `normalized_factors`.  See also `count_normalized_factors_eq` which expands the definition of `multiplicity` to produce a specification for `count (normalized_factors _) _`..\n", "keywords": {"nonzero element": 0.032935974148252736, "number of times": 0.032935974148252736, "normalized factor occurs": 0.03950164962452204, "irreducible factor": 0.08220021636945103, "factor occurs": 0.08220021636945103, "normalized": 0.0972720898396486, "count": 0.10726422670674526, "factors": 0.14178997777922184, "multiplicity": 0.15047750167366059, "irreducible": 0.17856591154394183, "nonzero": 0.17856591154394183, "element": 0.17856591154394183, "number": 0.17856591154394183, "times": 0.17856591154394183, "occurs": 0.17856591154394183, "normalized factor": 0.19833166752879255, "factor": 0.21268496666883274, "times the normalized": 0.2194088276852491, "expands the definition": 0.22709563292424592, "produce a specification": 0.22709563292424592}}, {"docstring": "A version of `exp_sum_of_commute` for a commutative Banach-algebra.\n", "keywords": {"commutative Banach-algebra": 0.009108237309423345, "exp": 0.04491197687864554, "sum": 0.04491197687864554, "commute": 0.04491197687864554, "Banach-algebra": 0.057012387690331526, "version": 0.15831692877998726, "commutative": 0.15831692877998726}}, {"docstring": "The derivative of `tan x - x` is `1/(cos x)^2 - 1` away from the zeroes of cos.\n", "keywords": {"zeroes of cos": 0.06405909490722954, "cos": 0.094808423351325, "tan": 0.09492398510093508, "derivative": 0.1408007092310104, "zeroes": 0.1408007092310104}}, {"docstring": "See also `basis.to_matrix_reindex` which gives the `simp` normal form of this result.\n", "keywords": {"basis.to": 0.04491197687864554, "matrix": 0.04491197687864554, "reindex": 0.04491197687864554, "simp": 0.04491197687864554, "normal form": 0.04940384002065631, "normal": 0.15831692877998726, "result": 0.15831692877998726, "form": 0.29736558256021506}}, {"docstring": "**Alias** of dimH_coe_finset`.\n", "keywords": {"Alias": 0.030396371632413578, "coe": 0.04491197687864554, "finset": 0.04491197687864554, "dimH": 0.15831692877998726}}, {"docstring": " If `x` is a fixed point of `f` and `g` is a left inverse of `f`, then `x` is a fixed point of `g`.\n", "keywords": {"fixed point": 0.0067639976309873074, "left inverse": 0.02249651976012989, "fixed": 0.05776554179380615, "point": 0.05776554179380615, "left": 0.14832923246533666, "inverse": 0.14832923246533666}}, {"docstring": "**B\u00e9zout's lemma**\n", "keywords": {"B\u00e9zout lemma": 0.013797198203993007, "B\u00e9zout": 0.08596317751626563, "lemma": 0.15831692877998726}}, {"docstring": "The ring of polynomials in finitely many variables is finitely presented.\n", "keywords": {"finitely presented": 0.0325194426147957, "ring of polynomials": 0.03663237450220032, "presented": 0.11521656054299435, "finitely many variables": 0.1179331082419386, "polynomials in finitely": 0.11793310824193863, "variables is finitely": 0.11793310824193863, "finitely": 0.13667842094541144, "ring": 0.1879836817695587, "polynomials": 0.1879836817695587, "variables": 0.1879836817695587}}, {"docstring": " A function `f` on `fin (n + 1)` is strictly antitone if and only if `f (i + 1) < f i` for all `i`.\n", "keywords": {"strictly antitone": 0.013527995261974615, "fin": 0.04491197687864554, "function": 0.0771485953923296, "strictly": 0.1155310835876123, "antitone": 0.1155310835876123}}, {"docstring": "The equivalence closure of a binary relation r is contained in any equivalence    relation containing r.\n", "keywords": {"equivalence closure": 0.06104740651975287, "binary relation": 0.06104740651975287, "equivalence relation": 0.09279441717942427, "equivalence": 0.14570071893270706, "relation": 0.14570071893270706, "closure": 0.19744254481508877, "binary": 0.19744254481508877, "contained": 0.19744254481508877}}, {"docstring": " If a function admits a power series expansion `p` on an open ball `B (x, r)`, then it is analytic at every point of this ball.\n", "keywords": {"power series expansion": 0.003880277136642503, "series expansion": 0.020435055290363522, "open ball": 0.025122266705129008, "function admits": 0.033892441937102495, "admits a power": 0.033892441937102495, "power series": 0.033892441937102495, "ball": 0.06767673667974392, "expansion": 0.11060549338282699, "function": 0.18105634546484617, "admits": 0.18105634546484617, "power": 0.18105634546484617, "series": 0.18105634546484617, "open": 0.18105634546484617, "analytic": 0.18105634546484617, "point": 0.18105634546484617}}, {"docstring": "The definition of `x \u29cf 0` on pre-games, in terms of `\u29cf 0` two moves later.\n", "keywords": {"pre-games": 0.09568045026443411, "definition": 0.15831692877998726, "terms": 0.15831692877998726, "moves": 0.15831692877998726}}, {"docstring": " Multiplying the first vector passed to `oangle` by a negative real produces the same angle as negating that vector.\n", "keywords": {"negative real produces": 0.0064971092056266945, "negative real": 0.033892441937102495, "real produces": 0.033892441937102495, "angle as negating": 0.033892441937102495, "vector passed": 0.04949487345881267, "oangle": 0.052376395424323874, "negating that vector": 0.10882816095144712, "Multiplying": 0.11060549338282699, "vector": 0.13023752997463905, "passed": 0.18105634546484617, "negative": 0.18105634546484617, "real": 0.18105634546484617, "produces": 0.18105634546484617, "angle": 0.18105634546484617, "negating": 0.18105634546484617}}, {"docstring": " **Nakayama's Lemma**. Atiyah-Macdonald 2.5, Eisenbud 4.7, Matsumura 2.2, [Stacks 00DV](https://stacks.math.columbia.edu/tag/00DV)\n", "keywords": {"Nakayama Lemma": 0.00950861230958936, "Nakayama": 0.09705179139403544, "Lemma": 0.09705179139403544, "Eisenbud": 0.11555589791117535, "Matsumura": 0.11555589791117535, "Stacks": 0.11555589791117535, "Atiyah-Macdonald": 0.17881754828257995}}, {"docstring": "The determinant of `rotation` (as a linear equiv) is equal to `1`.\n", "keywords": {"rotation": 0.04491197687864554, "linear equiv": 0.04940384002065631, "equiv": 0.15831692877998726, "determinant": 0.29736558256021506, "linear": 0.29736558256021506, "equal": 0.29736558256021506}}, {"docstring": "An alternative version of `subtype.forall`. This one is useful if Lean cannot figure out `q`  when using `subtype.forall` from right to left.\n", "keywords": {"subtype.forall": 0.044631026753425326, "alternative version": 0.0647213843491835, "Lean cannot figure": 0.18478385137268613, "alternative": 0.246550513069643, "version": 0.246550513069643, "Lean": 0.2931976921533319, "left": 0.38997397536695666, "figure": 0.5319420725534505}}, {"docstring": "1 is of finite order in any monoid.\n", "keywords": {"finite order": 0.09700399286574239, "monoid": 0.15831692877998726, "finite": 0.29736558256021506, "order": 0.29736558256021506}}, {"docstring": "The fundamental property of the operator norm: `\u2225f x\u2225 \u2264 \u2225f\u2225 * \u2225x\u2225`.\n", "keywords": {"operator norm": 0.0065920978564317735, "fundamental property": 0.009239332327148086, "norm": 0.06844581806138879, "fundamental": 0.09568045026443411, "property": 0.09568045026443411, "operator": 0.09568045026443411}}, {"docstring": " **Rearrangement Inequality**: Pointwise multiplication of `f` and `g` is maximized when `f` and `g` monovary together. Stated by permuting the entries of `g`.\n", "keywords": {"Rearrangement Inequality": 0.0031146356952437464, "Pointwise multiplication": 0.008334116283452563, "Rearrangement": 0.05572221155747183, "Inequality": 0.05572221155747183, "Pointwise": 0.05572221155747183, "monovary": 0.10028582371075691, "Stated by permuting": 0.11755105063023073, "multiplication": 0.14832923246533666, "maximized": 0.14832923246533666, "permuting the entries": 0.165573765898185, "Stated": 0.2790829227183407, "permuting": 0.37689977775222827, "entries": 0.37689977775222827}}, {"docstring": "The monomials `z ^ n` are an orthonormal set with respect to Haar measure on the circle.\n", "keywords": {"respect to Haar": 0.013797198203993007, "Haar measure": 0.013797198203993007, "orthonormal set": 0.02570861714399338, "set with respect": 0.02570861714399338, "Haar": 0.08596317751626563, "monomials": 0.09568045026443411, "circle": 0.09568045026443411, "orthonormal": 0.15831692877998726, "set": 0.15831692877998726, "respect": 0.15831692877998726, "measure": 0.15831692877998726}}, {"docstring": "If matrix A is left invertible, then its inverse equals its left inverse.\n", "keywords": {"left invertible": 0.03672426843567709, "inverse equals": 0.06104740651975287, "left inverse": 0.09279441717942427, "invertible": 0.12156210109285605, "equals its left": 0.1311351076396852, "left": 0.14570071893270706, "inverse": 0.14570071893270706, "matrix": 0.19744254481508877, "equals": 0.19744254481508877}}, {"docstring": "To match `one_mul_eq_id`.\n", "keywords": {"mul": 0.04491197687864554, "match": 0.15831692877998726}}, {"docstring": "If `R` is of characteristic `p` and `\u00acp \u2223 m`, then `\u03b6` is a root of `cyclotomic (p ^ k * m) R` if and only if it is a primitive `m`-th root of unity.\n", "keywords": {"root of unity": 0.013544593182520747, "cyclotomic": 0.054709255964732355, "root": 0.07162298286637953, "characteristic": 0.09329120537733218, "primitive": 0.09329120537733218, "unity": 0.09329120537733218}}, {"docstring": " A nonzero vector is in the same ray as a multiple of itself if and only if that multiple is positive.\n", "keywords": {"nonzero vector": 0.03663237450220032, "multiple is positive": 0.07301337118426866, "positive": 0.11521656054299435, "multiple": 0.13667842094541144, "nonzero": 0.1879836817695587, "vector": 0.1879836817695587, "ray": 0.1879836817695587}}, {"docstring": " Given a bounded bilinear map `f`, the map associating to a point `p` the derivative of `f` at `p` is itself a bounded linear map.\n", "keywords": {"bounded bilinear map": 0.007139548027796462, "bounded linear map": 0.007139548027796462, "bounded bilinear": 0.02536363305303039, "bounded linear": 0.02536363305303039, "bilinear map": 0.04123428594263107, "map associating": 0.04123428594263107, "linear map": 0.04123428594263107, "bounded": 0.08165986892166045, "map": 0.08715531685954774, "point": 0.10252384836042068, "bilinear": 0.15145892749810547, "associating": 0.15145892749810547, "derivative": 0.15145892749810547, "linear": 0.15145892749810547}}, {"docstring": " The product `r * x`, `r : \u211a`, `r \u2260 0`, is a Liouville number with exponent `p` if and only if `x` satisfies the same condition.\n", "keywords": {"Liouville number": 0.007743432063478832, "number with exponent": 0.00899321792126428, "Liouville": 0.06650965107397505, "product": 0.0771485953923296, "exponent": 0.0771485953923296, "satisfies": 0.0771485953923296, "condition": 0.0771485953923296, "number": 0.1155310835876123}}, {"docstring": "The basic open sets for the topology on ultrafilters are open.\n", "keywords": {"basic open sets": 0.010962043841203115, "topology on ultrafilters": 0.03663237450220032, "basic open": 0.05417025203414716, "open sets": 0.05417025203414716, "ultrafilters are open": 0.11793310824193863, "open": 0.13667842094541144, "basic": 0.1879836817695587, "sets": 0.1879836817695587, "topology": 0.1879836817695587, "ultrafilters": 0.1879836817695587}}, {"docstring": "**Alias** of the reverse direction of asymptotics.is_o_neg_left`.\n", "keywords": {"direction of asymptotics.is": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "neg": 0.04491197687864554, "left": 0.04491197687864554, "asymptotics.is": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "**Alias** of zero_lt_one`.\n", "keywords": {"Alias": 0.030396371632413578}}, {"docstring": " A Gr\u00f6nwall-like inequality: if `f : \u211d \u2192 E` is continuous on `[a, b]`, has right derivative `f' x` at every point `x \u2208 [a, b)`, and satisfies the inequalities `\u2225f a\u2225 \u2264 \u03b4`, `\u2200 x \u2208 [a, b), \u2225f' x\u2225 \u2264 K * \u2225f x\u2225 + \u03b5`, then `\u2225f x\u2225` is bounded by `gronwall_bound \u03b4 K \u03b5 (x - a)` on `[a, b]`.\n", "keywords": {"Gr\u00f6nwall-like inequality": 0.0026210954070897334, "satisfies the inequalities": 0.004191105078215276, "gronwall": 0.04491197687864554, "Gr\u00f6nwall-like": 0.045178330473335034, "inequality": 0.057864980816844346, "derivative": 0.057864980816844346, "point": 0.057864980816844346, "inequalities": 0.057864980816844346, "bound": 0.057864980816844346, "continuous": 0.07212675038589919, "satisfies": 0.07212675038589919, "bounded": 0.07212675038589919}}, {"docstring": "The submonoid generated by a set includes the set.\n", "keywords": {"submonoid generated": 0.037831312533597124, "set includes": 0.0562460611896591, "includes the set": 0.12194096740933036, "set": 0.13945519496053638, "submonoid": 0.19092478917347616, "generated": 0.19092478917347616, "includes": 0.19092478917347616}}, {"docstring": " To check that a function is `n` times continuously differentiable, it suffices to check that its first `n` derivatives are differentiable. This is slightly too strong as the condition we require on the `n`-th derivative is differentiability instead of continuity, but it has the advantage of avoiding the discussion of continuity in the proof (and for `n = \u221e` this is optimal).\n", "keywords": {"times continuously differentiable": 0.0015541569985374978, "continuously differentiable": 0.013964834588006486, "suffices to check": 0.013964834588006486, "times continuously": 0.015717065725386736, "check": 0.04837233355953981, "differentiable": 0.04837233355953981, "derivatives are differentiable": 0.08984197870595773, "times": 0.10869582222614935, "discussion of continuity": 0.1358136605951222, "function": 0.14235930785650577, "continuously": 0.14235930785650577, "suffices": 0.14235930785650577, "slightly too strong": 0.15436399786402075, "condition we require": 0.15436399786402075, "advantage of avoiding": 0.15436399786402075, "avoiding the discussion": 0.15436399786402075, "continuity": 0.1634951030925526, "derivative is differentiability": 0.20229634999229681, "derivatives": 0.24740669268700874, "proof": 0.29752850624804505}}, {"docstring": " If a function coincides with a measurable function outside of a countable set, it is measurable.\n", "keywords": {"countable set": 0.014591879414444505, "function coincides": 0.029938721750981816, "measurable function": 0.04132615975118968, "set": 0.09856372721054514, "function": 0.09960683487150054, "measurable": 0.09960683487150054, "coincides": 0.14591593823007556, "countable": 0.14591593823007556}}, {"docstring": "The composition of maps which preserve multiplication, also preserves multiplication.\n", "keywords": {"preserve multiplication": 0.022215909851909847, "composition of maps": 0.04188746641162499, "multiplication": 0.04784022513221706, "maps which preserve": 0.10583238594216893, "composition": 0.2005079697193566, "maps": 0.2005079697193566, "preserve": 0.22714242496584958, "preserves": 0.22714242496584958}}, {"docstring": "The composite of two monoid homomorphisms is a monoid homomorphism.\n", "keywords": {"monoid homomorphisms": 0.05738242751169008, "monoid": 0.11647786950765905, "composite": 0.2040190808014209, "homomorphisms": 0.2329557390153181}}, {"docstring": "The eigenspace is a subspace of the generalized eigenspace.\n", "keywords": {"generalized eigenspace": 0.05913243875864445, "eigenspace": 0.14323823713631006, "subspace": 0.19488865479360015, "generalized": 0.19488865479360015}}, {"docstring": "An additive subsemigroup `S` includes `closure s` if and only if it includes `s`\n", "keywords": {"additive subsemigroup": 0.013546417228156258, "includes": 0.05332403764722467, "subsemigroup": 0.09492398510093508, "closure": 0.09492398510093508, "additive": 0.1408007092310104}}, {"docstring": " `disjointed f` is the unique sequence that is pairwise disjoint and has the same partial sups as `f`.\n", "keywords": {"unique sequence": 0.02570861714399338, "pairwise disjoint": 0.02570861714399338, "disjointed": 0.09568045026443411, "unique": 0.15831692877998726, "sequence": 0.15831692877998726, "pairwise": 0.15831692877998726, "disjoint": 0.15831692877998726, "partial": 0.15831692877998726}}, {"docstring": "In a space with second countable topology, measurable implies ae strongly measurable.\n", "keywords": {"countable topology": 0.021567786782198985, "implies ae strongly": 0.035715520099333646, "measurable implies": 0.05259515133015473, "strongly measurable": 0.05259515133015473, "topology": 0.11369206228658875, "measurable": 0.13453835116331675, "space": 0.18569843656348187, "countable": 0.18569843656348187, "implies": 0.18569843656348187, "strongly": 0.18569843656348187}}, {"docstring": "For square matrices the usual `continuous_mul` can be used.\n", "keywords": {"continuous": 0.04491197687864554, "mul": 0.04491197687864554, "matrices the usual": 0.04940384002065631, "square matrices": 0.09700399286574239, "usual": 0.15831692877998726, "square": 0.29736558256021506, "matrices": 0.29736558256021506}}, {"docstring": "The antidiagonal of `0` is the list `[(0, 0)]`\n", "keywords": {"list": 0.0771485953923296, "antidiagonal": 0.1155310835876123}}, {"docstring": "Rotation by 0 is the identity.\n", "keywords": {"Rotation": 0.15831692877998726, "identity": 0.15831692877998726}}, {"docstring": " The `at_bot` filter for an open interval `Iic a` comes from the `at_bot` filter in the ambient order.\n", "keywords": {"open interval": 0.013833902242147065, "ambient order": 0.013833902242147065, "bot": 0.020944683225967962, "filter": 0.054147325146855434, "Iic": 0.05435364549612988, "interval": 0.09593831581184391, "order": 0.09593831581184391, "open": 0.14222822903176371, "ambient": 0.14222822903176371}}, {"docstring": "The empty word `[]` only reduces to itself.\n", "keywords": {"empty word": 0.04940384002065631, "word": 0.15831692877998726, "empty": 0.29736558256021506, "reduces": 0.29736558256021506}}, {"docstring": "An intermediate field contains the ring's 0.\n", "keywords": {"intermediate field": 0.09700399286574239, "ring": 0.15831692877998726, "intermediate": 0.29736558256021506, "field": 0.29736558256021506}}, {"docstring": "Deprecated: use `fun_like.congr_arg` instead.\n", "keywords": {"Deprecated": 0.04491197687864554, "fun": 0.04491197687864554, "like.congr": 0.04491197687864554, "arg": 0.04491197687864554}}, {"docstring": "**Alias** of left.one_le_inv_iff`.\n", "keywords": {"Alias": 0.030396371632413578, "inv": 0.04491197687864554, "iff": 0.04491197687864554, "left.one": 0.15831692877998726}}, {"docstring": "An additive subgroup is closed under subtraction.\n", "keywords": {"closed under subtraction": 0.04940384002065631, "additive subgroup": 0.09700399286574239, "subgroup is closed": 0.09700399286574239, "subtraction": 0.15831692877998726, "additive": 0.29736558256021506, "subgroup": 0.29736558256021506, "closed": 0.29736558256021506}}, {"docstring": "The region between two measurable functions on a measurable set is measurable.\n", "keywords": {"measurable functions": 0.04402106909902688, "measurable set": 0.04402106909902688, "measurable": 0.09059379888612011, "set is measurable": 0.1283150167556085, "region": 0.15514278968948286, "functions": 0.15514278968948286, "set": 0.15514278968948286}}, {"docstring": "Lemma to normalize a vector in a normed space `E` over either `\u2102` or `\u211d` to unit length.\n", "keywords": {"Lemma to normalize": 0.015380821171891606, "normed space": 0.015380821171891606, "unit length": 0.015380821171891606, "normalize a vector": 0.02570861714399338, "Lemma": 0.09568045026443411, "space": 0.09568045026443411, "length": 0.09568045026443411, "normalize": 0.15831692877998726, "vector": 0.15831692877998726, "normed": 0.15831692877998726, "unit": 0.15831692877998726}}, {"docstring": "**Alias** of left.inv_lt_one_iff`.\n", "keywords": {"Alias": 0.030396371632413578, "iff": 0.04491197687864554, "left.inv": 0.15831692877998726}}, {"docstring": " While in many cases `fin.cast` is better than `equiv.cast`/`cast`, sometimes we want to apply a generic theorem about `cast`.\n", "keywords": {"cast": 0.019320982933644253, "apply a generic": 0.034987023778306175, "generic theorem": 0.034987023778306175, "fin.cast": 0.05331699930238388, "equiv.cast": 0.05331699930238388, "cases": 0.11246769819744627, "apply": 0.18385948854246909, "generic": 0.18385948854246909, "theorem": 0.18385948854246909}}, {"docstring": " Reindexing both indices along the same equivalence preserves the determinant.  For the `simp` version of this lemma, see `det_minor_equiv_self`.\n", "keywords": {"Reindexing both indices": 0.015099935621315529, "preserves the determinant": 0.015099935621315529, "equivalence preserves": 0.02249651976012989, "Reindexing": 0.10028582371075691, "determinant": 0.10028582371075691, "indices": 0.14832923246533666, "equivalence": 0.14832923246533666, "preserves": 0.14832923246533666, "simp": 0.17881754828257995, "det": 0.17881754828257995, "minor": 0.17881754828257995, "equiv": 0.17881754828257995, "version": 0.2790829227183407, "lemma": 0.2790829227183407}}, {"docstring": "**Alias** of `quot.lift_beta`.\n", "keywords": {"Alias": 0.030396371632413578, "quot.lift": 0.04491197687864554, "beta": 0.04491197687864554}}, {"docstring": " Left `mul` by a `k : \u03b1` over `[ring \u03b1]` is injective, if `k` is not a zero divisor. The typeclass that restricts all terms of `\u03b1` to have this property is `no_zero_divisors`.\n", "keywords": {"Left": 0.07258934678807509, "mul": 0.07258934678807509, "ring": 0.1221512649852118, "injective": 0.1221512649852118, "divisor": 0.2066535437744114, "divisors": 0.2066535437744114, "typeclass that restricts": 0.22714863390129153, "restricts all terms": 0.22714863390129153, "typeclass": 0.4302357358329322, "restricts": 0.4302357358329322, "terms": 0.4302357358329322, "property": 0.4302357358329322}}, {"docstring": "`mul_action.to_perm` is injective on faithful actions.\n", "keywords": {"mul": 0.04491197687864554, "action.to": 0.04491197687864554, "perm": 0.04491197687864554, "faithful actions": 0.04940384002065631, "injective on faithful": 0.09700399286574239, "actions": 0.15831692877998726, "injective": 0.29736558256021506, "faithful": 0.29736558256021506}}, {"docstring": "A version of `submodule.span_le_restrict_scalars` with coercions.\n", "keywords": {"submodule.span": 0.04491197687864554, "restrict": 0.04491197687864554, "scalars": 0.04491197687864554, "coercions": 0.15831692877998726, "version": 0.29736558256021506}}, {"docstring": "The inner product of a vector with a multiple of itself.\n", "keywords": {"product": 0.15831692877998726, "vector": 0.15831692877998726, "multiple": 0.15831692877998726}}, {"docstring": "**Alias** of the forward direction of filter.tendsto_iff_comap`.\n", "keywords": {"direction of filter.tendsto": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "comap": 0.04491197687864554, "filter.tendsto": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "A map out of a sum type is continuous if its restriction to each summand is.\n", "keywords": {"sum type": 0.02570861714399338, "type is continuous": 0.02570861714399338, "map": 0.15831692877998726, "sum": 0.15831692877998726, "type": 0.15831692877998726, "continuous": 0.15831692877998726, "restriction": 0.15831692877998726, "summand": 0.15831692877998726}}, {"docstring": " In the characteristic zero case, the weights in the centroid indexed by a `fintype` sum to 1 if the set is nonempty.\n", "keywords": {"characteristic zero case": 0.0065920978564317735, "set is nonempty": 0.0065920978564317735, "centroid indexed": 0.009239332327148086, "fintype": 0.04491197687864554, "case": 0.06844581806138879, "sum": 0.06844581806138879, "nonempty": 0.06844581806138879, "characteristic": 0.09568045026443411, "weights": 0.09568045026443411, "centroid": 0.09568045026443411, "indexed": 0.09568045026443411, "set": 0.09568045026443411}}, {"docstring": "Given an add_monoid homomorphism `f : M \u2192+ N` and an element `x : M`, if `x` has a left inverse, then `f x` has a left inverse too. For elements invertible on both sides see `is_add_unit.map`.\n", "keywords": {"left inverse": 0.014814429385982762, "monoid homomorphism": 0.020406515003670612, "left": 0.07291387705277787, "inverse": 0.09866520767294637, "add": 0.11783358800820773, "monoid": 0.1414157594010238, "homomorphism": 0.1414157594010238, "elements invertible": 0.21622364180020204, "unit.map": 0.2434407749908416, "element": 0.37668603275201884, "elements": 0.37668603275201884, "invertible": 0.4719654628809573, "sides": 0.4719654628809573}}, {"docstring": " If `s` is a convex set, then `a \u2022 interior s + b \u2022 s \u2286 interior s` for all `0 < a`, `0 \u2264 b`, `a + b = 1`. See also `convex.combo_interior_closure_subset_interior` for a stronger version.\n", "keywords": {"convex set": 0.021786084795612032, "interior": 0.035261995580054634, "set": 0.12801953565520405, "stronger version": 0.1605691047236775, "convex": 0.1665493561396732, "convex.combo": 0.2614994545772466, "closure": 0.2614994545772466, "subset": 0.2614994545772466, "version": 0.33770316900908626, "stronger": 0.40969045393250325}}, {"docstring": "**Alias** of the reverse direction of inv_mul_lt_iff_lt_mul`.\n", "keywords": {"mul": 0.019648131954263418, "direction of inv": 0.021567786782198985, "Alias": 0.034278050535979626, "reverse direction": 0.035715520099333646, "iff": 0.05393656033701752, "inv": 0.11369206228658875, "reverse": 0.18569843656348187, "direction": 0.18569843656348187}}, {"docstring": "The vector space of functions on a fintype \u03b9 has finrank equal to the cardinality of \u03b9.\n", "keywords": {"vector space": 0.02570861714399338, "space of functions": 0.02570861714399338, "finrank equal": 0.02570861714399338, "vector": 0.15831692877998726, "space": 0.15831692877998726, "functions": 0.15831692877998726, "fintype": 0.15831692877998726, "finrank": 0.15831692877998726, "equal": 0.15831692877998726, "cardinality": 0.15831692877998726}}, {"docstring": " The distance from `x` to `s` or `t` is controlled in terms of the Hausdorff distance between `s` and `t`\n", "keywords": {"Hausdorff distance": 0.02714404025350355, "controlled in terms": 0.037831312533597124, "Hausdorff": 0.09474983170388594, "distance": 0.13945519496053638, "controlled": 0.19092478917347616, "terms": 0.19092478917347616}}, {"docstring": "The composition of Frobenius and Verschiebung is multiplication by `p`.\n", "keywords": {"Frobenius and Verschiebung": 0.02140921543860024, "composition of Frobenius": 0.04498862876540802, "Verschiebung is multiplication": 0.04498862876540802, "Frobenius": 0.1447773057422032, "Verschiebung": 0.1447773057422032, "composition": 0.29736558256021506, "multiplication": 0.29736558256021506}}, {"docstring": "**Alias** of the reverse direction of cont_mdiff_within_at_iff_cont_diff_within_at`.\n", "keywords": {"Alias": 0.03402676245250578, "reverse direction": 0.034987023778306175, "mdiff": 0.05331699930238388, "iff": 0.05331699930238388, "diff": 0.05331699930238388, "direction of cont": 0.06131733975553988, "cont": 0.069255433448279, "reverse": 0.18385948854246909, "direction": 0.18385948854246909}}, {"docstring": "Shows that the fractional parts of the stream are nonnegative.\n", "keywords": {"stream are nonnegative": 0.015380821171891606, "fractional parts": 0.02570861714399338, "Shows": 0.09568045026443411, "nonnegative": 0.09568045026443411, "fractional": 0.15831692877998726, "parts": 0.15831692877998726, "stream": 0.15831692877998726}}, {"docstring": "Product of a list of elements in a subgroup is in the subgroup.\n", "keywords": {"list of elements": 0.037831312533597124, "Product": 0.11718348279991213, "subgroup": 0.13945519496053638, "list": 0.19092478917347616, "elements": 0.19092478917347616}}, {"docstring": "The natural square root is at most the real square root\n", "keywords": {"natural square root": 0.011782282943034048, "real square root": 0.011782282943034048, "square root": 0.027200199006318638, "natural square": 0.04771708711059453, "real square": 0.04771708711059453, "square": 0.11357121248292479, "root": 0.11357121248292479, "natural": 0.2005079697193566, "real": 0.2005079697193566}}, {"docstring": "A non-commutative variant of `list.prod_reverse`\n", "keywords": {"list.prod": 0.04491197687864554, "reverse": 0.04491197687864554, "non-commutative variant": 0.09700399286574239, "non-commutative": 0.29736558256021506, "variant": 0.29736558256021506}}, {"docstring": "the assumption `(\u03c3 a).nonempty` is necessary and cannot be removed without    further conditions on the algebra `A` and scalar field `\ud835\udd5c`.\n", "keywords": {"scalar field": 0.015380821171891606, "nonempty": 0.04491197687864554, "assumption": 0.09568045026443411, "algebra": 0.09568045026443411, "field": 0.09568045026443411, "removed": 0.15831692877998726, "conditions": 0.15831692877998726, "scalar": 0.15831692877998726}}, {"docstring": " The **alternating series test** for monotone sequences. See also `tendsto_alternating_series_of_monotone_tendsto_zero`.\n", "keywords": {"alternating series test": 0.03905931209618585, "tendsto": 0.09268550773276726, "series test": 0.10109751338217146, "monotone sequences": 0.10109751338217146, "alternating": 0.15887565083603308, "test": 0.1794320556891372, "sequences": 0.1794320556891372, "alternating series": 0.19416253801849712, "series": 0.25584955354295913, "monotone": 0.25584955354295913}}, {"docstring": "A blunt cone (one not containing `0`) is always salient.\n", "keywords": {"blunt cone": 0.04940384002065631, "cone": 0.15831692877998726, "salient": 0.15831692877998726, "blunt": 0.29736558256021506}}, {"docstring": "The sum of `f y` over `y \u2208 set.range g` equals the sum of `f (g i)` over all `i` provided that `g` is injective on `support (f \u2218 g)`.\n", "keywords": {"equals the sum": 0.006941216592732799, "sum": 0.04213844269123149, "support": 0.05393656033701752, "set.range": 0.08179429269966654, "equals": 0.08179429269966654, "provided": 0.08179429269966654, "injective": 0.11369206228658875}}, {"docstring": " To check that a function is `n` times continuously differentiable, it suffices to check that its first `n` derivatives are differentiable. This is slightly too strong as the condition we require on the `n`-th derivative is differentiability instead of continuity, but it has the advantage of avoiding the discussion of continuity in the proof (and for `n = \u221e` this is optimal).\n", "keywords": {"times continuously differentiable": 0.0015541569985374978, "continuously differentiable": 0.013964834588006486, "suffices to check": 0.013964834588006486, "times continuously": 0.015717065725386736, "check": 0.04837233355953981, "differentiable": 0.04837233355953981, "derivatives are differentiable": 0.08984197870595773, "times": 0.10869582222614935, "discussion of continuity": 0.1358136605951222, "function": 0.14235930785650577, "continuously": 0.14235930785650577, "suffices": 0.14235930785650577, "slightly too strong": 0.15436399786402075, "condition we require": 0.15436399786402075, "advantage of avoiding": 0.15436399786402075, "avoiding the discussion": 0.15436399786402075, "continuity": 0.1634951030925526, "derivative is differentiability": 0.20229634999229681, "derivatives": 0.24740669268700874, "proof": 0.29752850624804505}}, {"docstring": "The finrank of `M \u2297[R] N` is `(finrank R M) * (finrank R N)`.\n", "keywords": {"finrank": 0.08353172751175852}}, {"docstring": " If `(X - a) ^ n` divides a polynomial `p` then the multiplicity of `a` as root of `p` is at least `n`.\n", "keywords": {"divides a polynomial": 0.005987543063120938, "divides": 0.0771485953923296, "polynomial": 0.0771485953923296, "multiplicity": 0.1155310835876123, "root": 0.1155310835876123}}, {"docstring": "This is the version of **Hall's Marriage Theorem** in terms of indexed families of finite sets `t : \u03b9 \u2192 finset \u03b1` with `\u03b9` a `fintype`. It states that there is a set of distinct representatives if and only if every union of `k` of the sets has at least `k` elements.  See `finset.all_card_le_bUnion_card_iff_exists_injective` for a version where the `fintype \u03b9` constraint is removed.\n", "keywords": {"Hall Marriage Theorem": 0.0002335230657141269, "Hall Marriage": 0.004010984202271268, "Marriage Theorem": 0.004010984202271268, "terms of indexed": 0.024255363183422477, "indexed families": 0.024255363183422477, "families of finite": 0.024255363183422477, "finite sets": 0.04352157766420611, "Hall": 0.0578189550328372, "Theorem": 0.0578189550328372, "Marriage": 0.06909430439607274, "fintype": 0.12001182893639019, "card": 0.12010364052296679, "finset": 0.12222753795137548, "sets": 0.13551065149685115, "terms": 0.1538862326286892, "indexed": 0.1538862326286892, "families": 0.1538862326286892, "finite": 0.1538862326286892, "version": 0.16521258514343973, "distinct representatives": 0.17628755364209792}}, {"docstring": "Subsets of a given closed subset form a closed set\n", "keywords": {"closed subset form": 0.02141879874542179, "closed set": 0.0381667238781621, "subset form": 0.06340461682679863, "closed subset": 0.09700399286574239, "set": 0.12363091320521931, "form a closed": 0.13561210463159817, "closed": 0.14868279128010753, "form": 0.2005079697193566, "Subsets": 0.29736558256021506, "subset": 0.29736558256021506}}, {"docstring": " A version of `continuous.tendsto` that allows one to specify a simpler form of the limit. E.g., one can write `continuous_exp.tendsto' 0 1 exp_zero`.\n", "keywords": {"simpler form": 0.04188746641162499, "continuous.tendsto": 0.05899937629682816, "limit": 0.12363091320521931, "continuous": 0.17881754828257995, "exp.tendsto": 0.17881754828257995, "exp": 0.17881754828257995, "version": 0.2005079697193566, "simpler": 0.2005079697193566, "form": 0.2005079697193566, "write": 0.32883716426354986}}, {"docstring": "If a function is `C^n` around each point in a set, then it is `C^n` on the set.\n", "keywords": {"set": 0.07571113878390312, "function": 0.19488865479360015, "point": 0.19488865479360015}}, {"docstring": "Non-zero elements of an integral domain are regular.\n", "keywords": {"Non-zero elements": 0.04940384002065631, "domain are regular": 0.04940384002065631, "integral domain": 0.09700399286574239, "Non-zero": 0.15831692877998726, "regular": 0.15831692877998726, "elements": 0.29736558256021506, "integral": 0.29736558256021506, "domain": 0.29736558256021506}}, {"docstring": "Two natural numbers are equal if and only if the have the same multiples.\n", "keywords": {"natural numbers": 0.02570861714399338, "numbers are equal": 0.02570861714399338, "multiples": 0.09568045026443411, "natural": 0.15831692877998726, "numbers": 0.15831692877998726, "equal": 0.15831692877998726}}, {"docstring": "A minimal polynomial is irreducible.\n", "keywords": {"polynomial is irreducible": 0.04940384002065631, "minimal polynomial": 0.09700399286574239, "irreducible": 0.15831692877998726, "minimal": 0.29736558256021506, "polynomial": 0.29736558256021506}}, {"docstring": "A variant of `graded_monoid.mk_list_dprod` for rewriting in the other direction.\n", "keywords": {"graded": 0.04491197687864554, "monoid.mk": 0.04491197687864554, "list": 0.04491197687864554, "dprod": 0.04491197687864554, "direction": 0.15831692877998726, "variant": 0.29736558256021506, "rewriting": 0.29736558256021506}}, {"docstring": " If a function tends to infinity along a filter, then this function multiplied by a positive constant (on the right) also tends to infinity. The archimedean assumption is convenient to get a statement that works on `\u2115`, `\u2124` and `\u211d`, although not necessary (a version in ordered fields is given in `filter.tendsto.at_top_mul_const`).\n", "keywords": {"positive constant": 0.01365667095949902, "function multiplied": 0.018700083029965984, "function": 0.06900720818438551, "filter": 0.10129341725804307, "constant": 0.10129341725804307, "multiplied": 0.13300646162349797, "positive": 0.13300646162349797, "archimedean assumption": 0.13743285316711215, "assumption is convenient": 0.13743285316711215, "statement that works": 0.13743285316711215, "version in ordered": 0.13743285316711215, "ordered fields": 0.13743285316711215, "top": 0.21373773690901868, "mul": 0.21373773690901868, "const": 0.21373773690901868, "archimedean": 0.3476021046389493, "assumption": 0.3476021046389493, "convenient": 0.3476021046389493, "statement": 0.3476021046389493, "works": 0.3476021046389493}}, {"docstring": "A self-map preserving a finite measure is conservative.\n", "keywords": {"measure is conservative": 0.015380821171891606, "self-map preserving": 0.02570861714399338, "preserving a finite": 0.02570861714399338, "finite measure": 0.02570861714399338, "conservative": 0.09568045026443411, "self-map": 0.15831692877998726, "preserving": 0.15831692877998726, "finite": 0.15831692877998726, "measure": 0.15831692877998726}}, {"docstring": "**Alias** of superset_of_eq`.\n", "keywords": {"Alias": 0.030396371632413578, "superset": 0.09568045026443411}}, {"docstring": " A set is a neighborhood of `a` within `(-\u221e, a]` if and only if it contains an interval `[l, a]` with `l < a`.\n", "keywords": {"interval": 0.060154590733539764, "set": 0.0771485953923296, "neighborhood": 0.0771485953923296}}, {"docstring": " If an element `x` is a root of a polynomial `p`, then the minimal polynomial of `x` divides `p`.\n", "keywords": {"minimal polynomial": 0.05417025203414716, "divides": 0.054709255964732355, "element": 0.11521656054299435, "polynomial": 0.13667842094541144, "root": 0.1879836817695587, "minimal": 0.1879836817695587}}, {"docstring": "Symmetric of `finset.image_image\u2082_right_anticomm`.\n", "keywords": {"finset.image": 0.04491197687864554, "anticomm": 0.04491197687864554, "Symmetric": 0.15831692877998726, "image": 0.15831692877998726}}, {"docstring": "The identity is a group homomorphism.\n", "keywords": {"group homomorphism": 0.04940384002065631, "homomorphism": 0.15831692877998726, "identity": 0.29736558256021506, "group": 0.29736558256021506}}, {"docstring": " If a predicate depends only on `f x - x` and holds for all `0 \u2264 x \u2264 1`, then it holds for all `x`.\n", "keywords": {"predicate depends": 0.0145716641419346, "holds": 0.0600992383382869, "predicate": 0.11984314898676356, "depends": 0.11984314898676356}}, {"docstring": "**Alias** of the forward direction of function.injective_iff_pairwise_ne`.\n", "keywords": {"direction of function.injective": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "pairwise": 0.04491197687864554, "function.injective": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "Note: `sym.map_id` is not simp-normal, as simp ends up unfolding `id` with `sym.map_congr`\n", "keywords": {"sym.map": 0.019320982933644256, "ends up unfolding": 0.021114872146320036, "simp ends": 0.03498702377830618, "Note": 0.053316999302383886, "congr": 0.053316999302383886, "simp-normal": 0.11246769819744629, "unfolding": 0.11246769819744629, "simp": 0.1838594885424691, "ends": 0.1838594885424691}}, {"docstring": "The evaluation of the character at the identity is the dimension of the representation.\n", "keywords": {"representation": 0.06341998722529081, "evaluation": 0.08438900089923473, "character": 0.08438900089923473, "identity": 0.08438900089923473, "dimension": 0.08438900089923473}}, {"docstring": " Let `p` be a predicate on `box \u03b9`, let `I` be a box. Suppose that the following two properties hold true.  * `H_ind` : Consider a smaller box `J \u2264 I`. The hyperplanes passing through the center of `J` split   it into `2 ^ n` boxes. If `p` holds true on each of these boxes, then it true on `J`.  * `H_nhds` : For each `z` in the closed box `I.Icc` there exists a neighborhood `U` of `z` within   `I.Icc` such that for every box `J \u2264 I` such that `z \u2208 J.Icc \u2286 U`, if `J` is homothetic to `I`   with a coefficient of the form `1 / 2 ^ m`, then `p` is true on `J`.  Then `p I` is true. See also `box_integral.box.subbox_induction_on` for a version using `box_integral.prepartition.split_center` instead of `box_integral.box.split_center_box`.  The proof still works if we assume `H_ind` only for subboxes `J \u2264 I` that are homothetic to `I` with a coefficient of the form `2\u207b\u1d50` but we do not need this generalization yet.\n", "keywords": {"box": 0.07051291396833821, "true": 0.08930820841547608, "center": 0.21246441711738934, "ind": 0.23205294934437717, "predicate": 0.24946867404024706, "I.Icc": 0.2496367637258022, "properties hold true": 0.2558981298660949, "boxes": 0.2627877136504795, "form": 0.27118290013701085, "coefficient": 0.294579626987346, "hold true": 0.30904866474249876, "holds true": 0.30904866474249876, "homothetic": 0.3152676128855168, "properties hold": 0.3952774447852528, "Suppose": 0.48824447151507433, "hold": 0.5287004718127062, "holds": 0.5287004718127062, "properties": 0.5358358439582699, "smaller": 0.627130163938412, "split": 0.6301021435471769}}, {"docstring": "If a function is analytic on a set `s`, so are its successive Fr\u00e9chet derivative.\n", "keywords": {"successive Fr\u00e9chet derivative": 0.0013485152131775047, "Fr\u00e9chet derivative": 0.008293207122436794, "successive Fr\u00e9chet": 0.013797198203993007, "function is analytic": 0.02570861714399338, "Fr\u00e9chet": 0.08596317751626563, "set": 0.09568045026443411, "derivative": 0.09568045026443411, "function": 0.15831692877998726, "analytic": 0.15831692877998726, "successive": 0.15831692877998726}}, {"docstring": "If two subtypes of a fintype have equal cardinality, so do their complements.\n", "keywords": {"equal cardinality": 0.04940384002065631, "fintype have equal": 0.09700399286574239, "cardinality": 0.15831692877998726, "complements": 0.15831692877998726, "subtypes": 0.29736558256021506, "fintype": 0.29736558256021506, "equal": 0.29736558256021506}}, {"docstring": " The mean value theorem on a convex set in dimension 1: if the derivative of a function is bounded by `C`, then the function is `C`-Lipschitz. Version with `has_deriv_within`.\n", "keywords": {"set in dimension": 0.021897096923229387, "function is bounded": 0.029758867094589372, "convex set": 0.032361484023902806, "Lipschitz": 0.040742737524486844, "function": 0.08161172169586978, "dimension": 0.12102666257279926, "theorem": 0.17705097305926945, "convex": 0.17705097305926945, "set": 0.17705097305926945, "derivative": 0.17705097305926945, "bounded": 0.17705097305926945, "deriv": 0.21197353881683212, "Version": 0.32350596561652023}}, {"docstring": " A more general version of `finprod_mem_insert` that requires `s \u2229 mul_support f` rather than `s` to be finite.\n", "keywords": {"general version": 0.02570861714399338, "finprod": 0.04491197687864554, "mem": 0.04491197687864554, "insert": 0.04491197687864554, "mul": 0.04491197687864554, "requires": 0.09568045026443411, "support": 0.09568045026443411, "finite": 0.09568045026443411, "general": 0.15831692877998726, "version": 0.15831692877998726}}, {"docstring": " If `f` has a local min on `s` at `a`, `f'` is the derivative of `f` at `a` within `s`, and `y` belongs to the positive tangent cone of `s` at `a`, then `0 \u2264 f' y`.\n", "keywords": {"positive tangent cone": 0.0008990471097494833, "local min": 0.009239332327148086, "positive tangent": 0.009239332327148086, "tangent cone": 0.009239332327148086, "belongs": 0.06844581806138879, "local": 0.09568045026443411, "min": 0.09568045026443411, "derivative": 0.09568045026443411, "positive": 0.09568045026443411, "tangent": 0.09568045026443411, "cone": 0.09568045026443411}}, {"docstring": "**Dirichlet's Test** for monotone sequences.\n", "keywords": {"Dirichlet Test": 0.007444681613352736, "monotone sequences": 0.04940384002065631, "Dirichlet": 0.08596317751626563, "Test": 0.08596317751626563, "sequences": 0.15831692877998726, "monotone": 0.29736558256021506}}, {"docstring": " The negation of an element a of a semigroup with a distributive negation divides another element b iff a divides b.\n", "keywords": {"distributive negation divides": 0.003289551374517148, "distributive negation": 0.019963611584944467, "negation divides": 0.02570861714399338, "element b iff": 0.048002939596752045, "iff a divides": 0.048002939596752045, "negation": 0.07915846438999363, "element": 0.07915846438999363, "divides": 0.07915846438999363, "divides another element": 0.0988754652468552, "semigroup": 0.12363091320521931, "distributive": 0.12363091320521931, "iff": 0.12363091320521931}}, {"docstring": " The set of all permutations of `option \u03b1` can be constructed by augmenting the set of permutations of `\u03b1` by each element of `option \u03b1` in turn.\n", "keywords": {"augmenting the set": 0.009045439945924204, "constructed by augmenting": 0.011837544825484802, "set of permutations": 0.022585505418976616, "option": 0.031129769383034658, "set": 0.041439408874615564, "permutations": 0.05278571237629435, "turn": 0.08181382661701696, "constructed": 0.10816217784964993, "augmenting": 0.10816217784964993, "element": 0.10816217784964993}}, {"docstring": " A version of the **direct comparison test** for conditionally convergent series. See `cauchy_seq_finset_of_norm_bounded` for the same statement about absolutely convergent ones.\n", "keywords": {"direct comparison test": 0.005233488099453622, "conditionally convergent series": 0.01802919854367747, "direct comparison": 0.034537838502064384, "comparison test": 0.034537838502064384, "convergent series": 0.06913707769786397, "conditionally convergent": 0.11525577922598268, "direct": 0.14453368873287326, "test": 0.14453368873287326, "series": 0.14453368873287326, "cauchy": 0.20684865028795477, "seq": 0.20684865028795477, "finset": 0.20684865028795477, "norm": 0.20684865028795477, "bounded": 0.20684865028795477, "convergent": 0.22370647017289, "version": 0.23098282466116205, "comparison": 0.23098282466116205, "conditionally": 0.23098282466116205, "absolutely convergent": 0.29606463509384623, "statement about absolutely": 0.3525887336522249}}, {"docstring": "Convex hull of a finite set is closed.\n", "keywords": {"Convex hull": 0.04940384002065631, "set is closed": 0.04940384002065631, "finite set": 0.09700399286574239, "Convex": 0.15831692877998726, "closed": 0.15831692877998726, "hull": 0.29736558256021506, "finite": 0.29736558256021506, "set": 0.29736558256021506}}, {"docstring": " Multiplying by all the matrices either in `list_transvec_col M` and `list_transvec_row M` turns the matrix in block-diagonal form.\n", "keywords": {"list": 0.02006098734604785, "transvec": 0.02006098734604785, "turns the matrix": 0.022138323509052035, "block-diagonal form": 0.022138323509052035, "matrix in block-diagonal": 0.03663237450220032, "Multiplying": 0.11521656054299435, "col": 0.11521656054299435, "row": 0.11521656054299435, "turns": 0.11521656054299435, "form": 0.11521656054299435, "matrices": 0.1879836817695587, "matrix": 0.1879836817695587, "block-diagonal": 0.1879836817695587}}, {"docstring": " The direction of an affine subspace constructed from a point and a direction.\n", "keywords": {"affine subspace constructed": 0.007321883374053632, "affine subspace": 0.03663237450220032, "subspace constructed": 0.03663237450220032, "direction": 0.13667842094541144, "affine": 0.1879836817695587, "subspace": 0.1879836817695587, "constructed": 0.1879836817695587, "point": 0.1879836817695587}}, {"docstring": "**Alias** of le_of_eq_of_le'`.\n", "keywords": {"Alias": 0.030396371632413578}}, {"docstring": "Two vectors with zero angle between them are equal if and only if they have equal norms.\n", "keywords": {"equal norms": 0.03378800767844735, "norms": 0.11718348279991213, "equal": 0.13945519496053638, "vectors": 0.19092478917347616, "angle": 0.19092478917347616}}, {"docstring": "`intercalate [x]` is the left inverse of `split_on x`\n", "keywords": {"left inverse": 0.02570861714399338, "intercalate": 0.04491197687864554, "split": 0.04491197687864554, "left": 0.15831692877998726, "inverse": 0.15831692877998726}}, {"docstring": "If `a` and `b` are related by the reflexive transitive closure of `r`, then there is a `r`-chain starting from `a` and ending on `b`. The converse of `relation_refl_trans_gen_of_exists_chain`.\n", "keywords": {"reflexive transitive closure": 0.005677237761441965, "reflexive transitive": 0.031040804666112243, "transitive closure": 0.031040804666112243, "chain starting": 0.036130890502720225, "chain": 0.1004859839593637, "related": 0.17351161766281323, "reflexive": 0.17351161766281323, "transitive": 0.17351161766281323, "closure": 0.17351161766281323, "starting": 0.17351161766281323, "ending": 0.17351161766281323, "relation": 0.20791243635202292, "refl": 0.20791243635202292, "trans": 0.20791243635202292, "gen": 0.20791243635202292, "exists": 0.20791243635202292, "converse": 0.42167437397336704}}, {"docstring": "A subfield contains the field's 0.\n", "keywords": {"field": 0.15831692877998726, "subfield": 0.29736558256021506}}, {"docstring": " An element is in the closure of a two-element set if it is a linear combination of those two elements.\n", "keywords": {"two-element set": 0.035715520099333646, "linear combination": 0.035715520099333646, "closure": 0.18569843656348187, "two-element": 0.18569843656348187, "set": 0.18569843656348187, "linear": 0.18569843656348187, "combination": 0.18569843656348187, "element": 0.2690767023266335, "elements": 0.2690767023266335}}, {"docstring": "The n-ary version of `set.add_subset_add`.\n", "keywords": {"set.add": 0.04491197687864554, "subset": 0.04491197687864554, "add": 0.04491197687864554, "n-ary version": 0.09700399286574239, "n-ary": 0.29736558256021506, "version": 0.29736558256021506}}, {"docstring": "In the domain of a bundle trivialization, the projection is continuous\n", "keywords": {"bundle trivialization": 0.015380821171891606, "projection is continuous": 0.015380821171891606, "trivialization": 0.09568045026443411, "continuous": 0.09568045026443411, "domain": 0.15831692877998726, "bundle": 0.15831692877998726, "projection": 0.15831692877998726}}, {"docstring": "When lowered to a prop, `matrix.diagonal_invertible_equiv_invertible` forms an `iff`.\n", "keywords": {"invertible": 0.019320982933644253, "matrix.diagonal": 0.05331699930238388, "equiv": 0.05331699930238388, "iff": 0.05331699930238388, "prop": 0.11246769819744627, "forms": 0.11246769819744627, "lowered": 0.18385948854246909}}, {"docstring": "This lemma is useful for working with `\u211d\u02e3`\n", "keywords": {"lemma": 0.29736558256021506, "working": 0.29736558256021506}}, {"docstring": "a minimal solution to `a ^ 4 + b ^ 4 = c ^ 2` must have `a` and `b` coprime.\n", "keywords": {"minimal solution": 0.013527995261974615, "coprime": 0.04491197687864554, "minimal": 0.1155310835876123, "solution": 0.1155310835876123}}, {"docstring": "**Alias** of lt_of_mul_lt_mul_left'`.\n", "keywords": {"mul": 0.021352745740207107, "Alias": 0.035514607549195436, "left": 0.05706283858652404}}, {"docstring": "**Alias** of eq_or_ssubset_of_subset`.\n", "keywords": {"Alias": 0.030396371632413578, "ssubset": 0.04491197687864554, "subset": 0.04491197687864554}}, {"docstring": "The definition of `x \u29cf y` on pre-games, in terms of `\u29cf` two moves later.\n", "keywords": {"pre-games": 0.09568045026443411, "definition": 0.15831692877998726, "terms": 0.15831692877998726, "moves": 0.15831692877998726}}, {"docstring": "If `R` is \"smaller\" ring than `S` then the span by `R` is smaller than the span by `S`.\n", "keywords": {"span": 0.08136984231491272, "ring": 0.12600799873373572, "smaller": 0.15213428770536155}}, {"docstring": "A letter only reduces to itself.\n", "keywords": {"letter only reduces": 0.09700399286574239, "letter": 0.29736558256021506, "reduces": 0.29736558256021506}}, {"docstring": "The complex sine function is everywhere strictly differentiable, with the derivative `cos x`.\n", "keywords": {"complex sine function": 0.0042542192213185686, "strictly differentiable": 0.015380821171891606, "complex sine": 0.02570861714399338, "sine function": 0.02570861714399338, "differentiable": 0.09568045026443411, "derivative": 0.09568045026443411, "cos": 0.09568045026443411, "complex": 0.15831692877998726, "sine": 0.15831692877998726, "function": 0.15831692877998726, "strictly": 0.15831692877998726}}, {"docstring": "If the elements of a set are independent, then any pair within that set is disjoint.\n", "keywords": {"set are independent": 0.07301337118426866, "set is disjoint": 0.07301337118426866, "independent": 0.11521656054299435, "disjoint": 0.11521656054299435, "set": 0.13667842094541144, "elements": 0.1879836817695587, "pair": 0.1879836817695587}}, {"docstring": " Multiplicativity of a multilinear map along all coordinates at the same time, writing `f (\u03bbi, c i \u2022 m i)` as `(\u220f i, c i) \u2022 f m`.\n", "keywords": {"multilinear map": 0.009239332327148086, "writing": 0.04491197687864554, "Multiplicativity": 0.06844581806138879, "time": 0.06844581806138879, "multilinear": 0.09568045026443411, "map": 0.09568045026443411, "coordinates": 0.09568045026443411}}, {"docstring": " The multiplicity of `m` in `n` is the number of positive natural numbers `i` such that `m ^ i` divides `n`. This set is expressed by filtering `Ico 1 b` where `b` is any bound greater than `log m n`.\n", "keywords": {"positive natural numbers": 0.006903571435500246, "positive natural": 0.03142433442165886, "natural numbers": 0.03733990409981358, "divides": 0.07073956283945361, "number of positive": 0.0848435411807395, "Ico": 0.12748790005930788, "expressed by filtering": 0.1565870030412261, "multiplicity": 0.17454779110930135, "positive": 0.17454779110930135, "natural": 0.17454779110930135, "number": 0.20622331152678647, "numbers": 0.20622331152678647, "set is expressed": 0.21846569551000553, "bound greater": 0.21846569551000553, "filtering": 0.3197366584666406, "log": 0.3197366584666406, "set": 0.42343326428770406, "expressed": 0.42343326428770406, "bound": 0.42343326428770406, "greater": 0.42343326428770406}}, {"docstring": "A continuous function with compact support is integrable on the whole space.\n", "keywords": {"continuous function": 0.09700399286574239, "function with compact": 0.09700399286574239, "compact support": 0.09700399286574239, "support is integrable": 0.09700399286574239, "space": 0.15831692877998726, "continuous": 0.29736558256021506, "function": 0.29736558256021506, "compact": 0.29736558256021506, "support": 0.29736558256021506, "integrable": 0.29736558256021506}}, {"docstring": " The convergent of `generalized_continued_fraction.of v` at step `n - 1` is exactly `v` if the `int_fract_pair.stream` of the corresponding continued fraction terminated at step `n`.\n", "keywords": {"continued fraction terminated": 0.003796865164394668, "terminated at step": 0.00967260216904803, "fraction terminated": 0.019557279302732804, "continued fraction": 0.02635223776265893, "step": 0.03458472718821289, "generalized": 0.054709255964732355, "int": 0.054709255964732355, "fract": 0.054709255964732355, "pair.stream": 0.054709255964732355, "continued": 0.09269208833952335, "fraction.of": 0.09329120537733218, "convergent": 0.1384995633470844, "fraction": 0.1384995633470844, "terminated": 0.1384995633470844}}, {"docstring": "The image of the unit ball under a continuous multilinear map is bounded.\n", "keywords": {"continuous multilinear map": 0.0042542192213185686, "map is bounded": 0.015380821171891606, "unit ball": 0.02570861714399338, "continuous multilinear": 0.02570861714399338, "multilinear map": 0.02570861714399338, "bounded": 0.09568045026443411, "image": 0.15831692877998726, "unit": 0.15831692877998726, "ball": 0.15831692877998726, "continuous": 0.15831692877998726, "multilinear": 0.15831692877998726, "map": 0.15831692877998726}}, {"docstring": "Every set has a measurable superset. Declare this as local instance as needed.\n", "keywords": {"measurable superset": 0.02541909697430123, "superset": 0.12363091320521931, "instance as needed": 0.18075564686791562, "set": 0.2005079697193566, "measurable": 0.2005079697193566, "local instance": 0.2766850298235749, "Declare": 0.32883716426354986, "needed": 0.32883716426354986, "local": 0.46553351027698087, "instance": 0.46553351027698087}}, {"docstring": "The coproduct of the cofinite filters on two types is the cofinite filter on their product.\n", "keywords": {"cofinite filters": 0.012848351110241563, "cofinite": 0.05631466302318476, "product": 0.09856372721054514, "filters": 0.11262932604636952, "filter": 0.11262932604636952, "coproduct": 0.14591593823007556, "types": 0.14591593823007556}}, {"docstring": " Open elements `s : set (\u03b1 \u00d7 \u03b1)` of `\ud835\udce4 \u03b1` such that `(x, y) \u2208 s \u2194 (y, x) \u2208 s` form a basis of `\ud835\udce4 \u03b1`.\n", "keywords": {"Open elements": 0.00470688094720815, "form a basis": 0.0065920978564317735, "set": 0.04491197687864554, "Open": 0.06844581806138879, "elements": 0.06844581806138879, "form": 0.06844581806138879, "basis": 0.09568045026443411}}, {"docstring": "An element a divides the sum b + a if and only if a divides b.\n", "keywords": {"element a divides": 0.022276459697343733, "divides the sum": 0.05315066605935327, "divides": 0.07571113878390312, "element": 0.14390902704051098, "sum": 0.14390902704051098}}, {"docstring": " If `f` is strictly monotone both on `(-\u221e, a]` and `[a, \u221e)`, then it is strictly monotone on the whole line.\n", "keywords": {"strictly monotone": 0.01970251668748186, "strictly": 0.08136984231491272, "monotone": 0.11647786950765905, "line": 0.12600799873373572}}, {"docstring": "This is also available as `_root_.div_eq_mul_inv`, using the `comm_group_with_zero` instance defined below.\n", "keywords": {"root": 0.04491197687864554, "div": 0.04491197687864554, "mul": 0.04491197687864554, "inv": 0.04491197687864554, "comm": 0.04491197687864554, "group": 0.04491197687864554, "instance defined": 0.04940384002065631, "instance": 0.15831692877998726, "defined": 0.29736558256021506}}, {"docstring": " In a linearly ordered additive commutative group with the order topology, if `f` tends to `C` and `g` tends to `at_top` then `f + g` tends to `at_top`.\n", "keywords": {"linearly ordered additive": 0.002535831815717203, "ordered additive commutative": 0.002535831815717203, "additive commutative group": 0.002535831815717203, "order topology": 0.012240009979360944, "linearly ordered": 0.018310930906343142, "ordered additive": 0.018310930906343142, "additive commutative": 0.018310930906343142, "commutative group": 0.018310930906343142, "top": 0.019053917256533312, "topology": 0.09017440044927587, "linearly": 0.13409574860218185, "ordered": 0.13409574860218185, "additive": 0.13409574860218185, "commutative": 0.13409574860218185, "group": 0.13409574860218185, "order": 0.13409574860218185}}, {"docstring": "The sum over the values of the quadratic character is zero when the characteristic is odd.\n", "keywords": {"characteristic is odd": 0.0065920978564317735, "quadratic character": 0.009239332327148086, "odd": 0.06844581806138879, "sum": 0.09568045026443411, "quadratic": 0.09568045026443411, "character": 0.09568045026443411, "characteristic": 0.09568045026443411}}, {"docstring": "The intersection of a dense set with an open dense set is a dense set.\n", "keywords": {"open dense set": 0.00575310306913915, "dense set": 0.01111547820112007, "open dense": 0.026628163883647565, "dense": 0.05277230959332906, "set": 0.06794458488847384, "intersection": 0.16383273847958243, "open": 0.16383273847958243}}, {"docstring": " When passed an `equiv.sum_congr`, `multilinear_map.dom_dom_congr` distributes over `multilinear_map.dom_coprod`.\n", "keywords": {"congr": 0.021671764809268954, "multilinear": 0.021671764809268954, "map.dom": 0.021671764809268954, "equiv.sum": 0.05762960968289995, "dom": 0.05762960968289995, "coprod": 0.05762960968289995, "distributes": 0.12095349351053106, "passed": 0.1965390350921557}}, {"docstring": "A point belongs to the closure of `s` iff its infimum distance to this set vanishes\n", "keywords": {"iff its infimum": 0.015380821171891606, "set vanishes": 0.015380821171891606, "point belongs": 0.02570861714399338, "infimum distance": 0.02570861714399338, "iff": 0.09568045026443411, "vanishes": 0.09568045026443411, "point": 0.15831692877998726, "belongs": 0.15831692877998726, "closure": 0.15831692877998726, "infimum": 0.15831692877998726, "distance": 0.15831692877998726, "set": 0.15831692877998726}}, {"docstring": "Assumes left covariance. The lemma assuming right covariance is `right.add_nonpos`.\n", "keywords": {"Assumes left covariance": 0.021279743632738882, "Assumes left": 0.038712704770480444, "left covariance": 0.1273706910391025, "Assumes": 0.1531727145735673, "right.add": 0.21826204231687923, "nonpos": 0.21826204231687923, "covariance": 0.23216465691767033, "left": 0.2433193585127945, "lemma assuming": 0.38571507274593425, "lemma": 0.5275897320195264, "assuming": 0.5275897320195264, "assuming right covariance": 0.5846700711531686}}, {"docstring": " If `\u03c4` is a `canonically_ordered_add_monoid` (e.g., `\u2115` or `\u211d\u22650`), then the notions `is_fw_invariant` and `is_invariant` are equivalent.\n", "keywords": {"invariant": 0.019320982933644253, "canonically": 0.05331699930238388, "ordered": 0.05331699930238388, "add": 0.05331699930238388, "monoid": 0.05331699930238388, "notions": 0.09101163530720666, "equivalent": 0.09101163530720666}}, {"docstring": "A submonoid `S` includes `closure s` if and only if it includes `s`.\n", "keywords": {"includes": 0.055127829619426576, "submonoid": 0.09713402394201612, "closure": 0.09713402394201612}}, {"docstring": "The bijection `order_emb_of_fin s h` sends `k-1` to the maximum of `s`.\n", "keywords": {"order": 0.04491197687864554, "emb": 0.04491197687864554, "sends": 0.04491197687864554, "bijection": 0.09568045026443411, "fin": 0.09568045026443411, "maximum": 0.15831692877998726}}, {"docstring": "**Alias** of filter.tendsto.congr_dist`.\n", "keywords": {"Alias": 0.030396371632413578, "dist": 0.04491197687864554}}, {"docstring": " **Cantor's diagonal argument** implies that there are no surjective functions from `\u03b1` to `set \u03b1`.\n", "keywords": {"Cantor diagonal argument": 0.0008884020862469475, "Cantor diagonal": 0.009108237309423345, "diagonal argument": 0.015380821171891606, "surjective functions": 0.02570861714399338, "Cantor": 0.057012387690331526, "argument": 0.09568045026443411, "implies": 0.09568045026443411, "set": 0.09568045026443411, "diagonal": 0.15831692877998726, "surjective": 0.15831692877998726, "functions": 0.15831692877998726}}, {"docstring": "`cont_diff_bump` is `\ud835\udc9e\u207f` in all its arguments.\n", "keywords": {"cont": 0.04491197687864554, "diff": 0.04491197687864554, "bump": 0.04491197687864554, "arguments": 0.15831692877998726}}, {"docstring": " Given `x` and `y` between `0` and `1`, `x` is between two successive powers of `y`. This is the same as `exists_nat_pow_near`, but for elements between `0` and `1`\n", "keywords": {"successive powers": 0.02249651976012989, "successive": 0.14832923246533666, "powers": 0.14832923246533666, "exists": 0.17881754828257995, "nat": 0.17881754828257995, "pow": 0.17881754828257995, "elements": 0.37689977775222827}}, {"docstring": "Product of a list of elements in a subring is in the subring.\n", "keywords": {"list of elements": 0.037831312533597124, "Product": 0.11718348279991213, "subring": 0.13945519496053638, "list": 0.19092478917347616, "elements": 0.19092478917347616}}, {"docstring": " A finite dimensional vector space Over an `is_R_or_C` is a proper metric space.  This is not an instance because it would cause a search for `finite_dimensional ?x E` before `is_R_or_C ?x`.\n", "keywords": {"proper metric space": 0.006027179545854322, "dimensional vector space": 0.011261635047504428, "finite dimensional vector": 0.018551992768193994, "proper metric": 0.029527803889518457, "vector space": 0.03373991764648858, "metric space": 0.03373991764648858, "dimensional vector": 0.05404699289804751, "space": 0.09636208798950592, "finite dimensional": 0.1009221938284742, "finite": 0.1513857623382664, "dimensional": 0.1513857623382664, "vector": 0.16935441927574127, "proper": 0.16935441927574127, "metric": 0.16935441927574127, "instance": 0.4145537065509203, "search": 0.4145537065509203}}, {"docstring": " If the distance between any two points in a set is bounded by some constant, this constant bounds the diameter.\n", "keywords": {"bounds the diameter": 0.021114872146320032, "set is bounded": 0.034987023778306175, "constant bounds": 0.051351238837580325, "diameter": 0.11246769819744627, "constant": 0.13282721021560867, "distance": 0.18385948854246909, "points": 0.18385948854246909, "set": 0.18385948854246909, "bounded": 0.18385948854246909, "bounds": 0.18385948854246909}}, {"docstring": "An open set is a G\u03b4 set.\n", "keywords": {"open set": 0.06340461682679863, "set": 0.14868279128010753, "open": 0.2005079697193566}}, {"docstring": " The direct comparison test for series:  if the norm of `f` is bounded by a real function `g` which is summable, then `f` is summable.\n", "keywords": {"direct comparison test": 0.002477776488322723, "test for series": 0.012051537142168538, "real function": 0.012051537142168538, "direct comparison": 0.018034246898548233, "comparison test": 0.018034246898548233, "summable": 0.032524255736777925, "series": 0.08946888050496495, "function": 0.08946888050496495, "direct": 0.13309686053898662, "comparison": 0.13309686053898662, "test": 0.13309686053898662, "norm": 0.13309686053898662, "bounded": 0.13309686053898662, "real": 0.13309686053898662}}, {"docstring": " If a continuous multilinear map is constructed from a multilinear map via the constructor `mk_continuous`, then its norm is bounded by the bound given to the constructor if it is nonnegative.\n", "keywords": {"continuous multilinear map": 0.005336176583458466, "multilinear map": 0.012525534843071673, "norm is bounded": 0.02210710824386826, "continuous multilinear": 0.03251013733085801, "map is constructed": 0.055874674858259636, "multilinear": 0.0781646504872054, "map": 0.0781646504872054, "constructor": 0.0781646504872054, "nonnegative": 0.09938532796588936, "continuous": 0.10070571056908109, "constructed": 0.1470678571383035, "norm": 0.1470678571383035, "bounded": 0.1470678571383035, "bound": 0.1470678571383035}}, {"docstring": "**Alias** of the forward direction of list.mem_map`.\n", "keywords": {"direction of list.mem": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "map": 0.04491197687864554, "list.mem": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "A variant of `complete_lattice.independent_iff_sup_indep` for `fintype`s.\n", "keywords": {"complete": 0.04491197687864554, "lattice.independent": 0.04491197687864554, "iff": 0.04491197687864554, "indep": 0.04491197687864554, "fintype": 0.04491197687864554, "variant": 0.29736558256021506}}, {"docstring": "In an additive semigroup, the sum of add-right-regular elements is add-right-regular.\n", "keywords": {"additive semigroup": 0.022138323509052035, "semigroup": 0.11521656054299435, "elements": 0.11521656054299435, "additive": 0.1879836817695587, "sum": 0.1879836817695587}}, {"docstring": " A useful consequence of the Lebesgue number lemma: given any compact set `K` contained in an open set `U`, we can find an (open) entourage `V` such that the ball of size `V` about any point of `K` is contained in `U`.\n", "keywords": {"Lebesgue number lemma": 0.001004894190048311, "Lebesgue number": 0.010456957112656555, "number lemma": 0.0133790279726172, "ball of size": 0.0133790279726172, "compact set": 0.015014468702707789, "open set": 0.02027972304579316, "set": 0.0528442712437429, "entourage": 0.05534373266229944, "contained": 0.07271431959057123, "Lebesgue": 0.07393969949726542, "open": 0.09403398900518366, "lemma": 0.09432847694695894, "size": 0.09432847694695894, "consequence": 0.13996189928515157, "number": 0.13996189928515157, "compact": 0.13996189928515157, "find": 0.13996189928515157, "ball": 0.13996189928515157, "point": 0.13996189928515157}}, {"docstring": "**Alias** of the reverse direction of set.not_one_mem_div_iff`.\n", "keywords": {"direction of set.not": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "mem": 0.04491197687864554, "div": 0.04491197687864554, "iff": 0.04491197687864554, "set.not": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "If a formal power series is invertible, then so is its constant coefficient.\n", "keywords": {"formal power series": 0.0042542192213185686, "series is invertible": 0.015380821171891606, "constant coefficient": 0.015380821171891606, "formal power": 0.02570861714399338, "power series": 0.02570861714399338, "invertible": 0.09568045026443411, "coefficient": 0.09568045026443411, "formal": 0.15831692877998726, "power": 0.15831692877998726, "series": 0.15831692877998726, "constant": 0.15831692877998726}}, {"docstring": "If a function admits a power series expansion on a disk, then it is continuous there.\n", "keywords": {"power series expansion": 0.0016012214736657916, "function admits": 0.013527995261974615, "admits a power": 0.013527995261974615, "power series": 0.013527995261974615, "series expansion": 0.013527995261974615, "disk": 0.0771485953923296, "function": 0.1155310835876123, "admits": 0.1155310835876123, "power": 0.1155310835876123, "series": 0.1155310835876123, "expansion": 0.1155310835876123, "continuous": 0.1155310835876123}}, {"docstring": " Embedding `i : fin n` into `fin (n + 1)` with a hole around `p : fin (n + 1)` embeds `i` by `succ` when the resulting `p < i.succ`.\n", "keywords": {"fin": 0.04343368128437256, "Embedding": 0.058865175910949544, "embeds": 0.058865175910949544, "succ": 0.058865175910949544, "i.succ": 0.058865175910949544, "resulting": 0.10006769949327374, "hole": 0.14802380456229533}}, {"docstring": "The set of points where a function is continuous is a G\u03b4 set.\n", "keywords": {"function is continuous": 0.037831312533597124, "set of points": 0.12194096740933039, "set": 0.13945519496053638, "points": 0.19092478917347616, "function": 0.19092478917347616, "continuous": 0.19092478917347616}}, {"docstring": " A vector is in the `vector_span` of an indexed family if and only if it is a `weighted_vsub` with sum of weights 0.\n", "keywords": {"sum of weights": 0.020744656539556924, "indexed family": 0.03439110359613085, "span": 0.0528063806271324, "weighted": 0.0528063806271324, "vsub": 0.0528063806271324, "weights": 0.11145728654016383, "vector": 0.1314201551237121, "indexed": 0.1823394614884183, "family": 0.1823394614884183, "sum": 0.1823394614884183}}, {"docstring": "**Alias** of the reverse direction of filter.germ.coe_tendsto`.\n", "keywords": {"reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "tendsto": 0.04491197687864554, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "The multiplicity of `p + q` is at least the minimum of the multiplicities.\n", "keywords": {"multiplicities": 0.0771485953923296, "multiplicity": 0.1155310835876123, "minimum": 0.1155310835876123}}, {"docstring": " In a strictly convex space, the triangle inequality turns into an equality if and only if the middle point belongs to the segment joining two other points.\n", "keywords": {"strictly convex space": 0.0015622890266839998, "triangle inequality turns": 0.0023499445201701115, "middle point belongs": 0.0031133792469181785, "convex space": 0.011631263860918884, "strictly convex": 0.017416869738890953, "triangle inequality": 0.017416869738890953, "inequality turns": 0.017416869738890953, "segment joining": 0.017416869738890953, "middle point": 0.022975231256290595, "point belongs": 0.022975231256290595, "space": 0.0878757573221198, "strictly": 0.13083850849172096, "convex": 0.13083850849172096, "triangle": 0.13083850849172096, "inequality": 0.13083850849172096, "turns": 0.13083850849172096, "equality": 0.13083850849172096, "middle": 0.13083850849172096, "belongs": 0.13083850849172096, "segment": 0.13083850849172096}}, {"docstring": "Exposed points exactly correspond to exposed singletons.\n", "keywords": {"exposed singletons": 0.03378800767844735, "points exactly correspond": 0.037831312533597124, "Exposed points": 0.0562460611896591, "singletons": 0.11718348279991213, "correspond to exposed": 0.12194096740933036, "Exposed": 0.13945519496053638, "points": 0.19092478917347616, "correspond": 0.19092478917347616}}, {"docstring": " Inductive step for the reduction: if one knows that any size `r` matrix can be reduced to diagonal form by elementary operations, then one deduces it for matrices over `fin r \u2295 unit`.\n", "keywords": {"Inductive step": 0.015380821171891606, "elementary operations": 0.015380821171891606, "reduced to diagonal": 0.02570861714399338, "diagonal form": 0.02570861714399338, "form by elementary": 0.02570861714399338, "unit": 0.04491197687864554, "Inductive": 0.09568045026443411, "reduction": 0.09568045026443411, "size": 0.09568045026443411, "matrix": 0.09568045026443411, "operations": 0.09568045026443411, "fin": 0.09568045026443411, "step": 0.15831692877998726, "reduced": 0.15831692877998726, "diagonal": 0.15831692877998726, "form": 0.15831692877998726, "elementary": 0.15831692877998726, "deduces": 0.15831692877998726, "matrices": 0.15831692877998726}}, {"docstring": "See `add_tsub_cancel_right` for the equality if `contravariant_class \u03b1 \u03b1 (+) (\u2264)`.\n", "keywords": {"add": 0.04491197687864554, "tsub": 0.04491197687864554, "cancel": 0.04491197687864554, "contravariant": 0.04491197687864554, "class": 0.09568045026443411, "equality": 0.15831692877998726}}, {"docstring": "The distance on `nonempty_compacts \u03b1` is the Hausdorff distance, by construction\n", "keywords": {"Hausdorff distance": 0.026378926493064607, "nonempty": 0.054709255964732355, "Hausdorff": 0.09401982591602405, "compacts": 0.11521656054299435, "construction": 0.11521656054299435, "distance": 0.13667842094541144}}, {"docstring": "Involuting an `ite` of an involuted value `x : \u03b1` negates the `Prop` condition in the `ite`.\n", "keywords": {"ite": 0.019648131954263418, "Prop": 0.034278050535979626, "Involuting": 0.11369206228658875, "negates": 0.11369206228658875, "condition": 0.11369206228658875, "involuted": 0.18569843656348187}}, {"docstring": "In a space with second countable topology, measurable implies strongly measurable.\n", "keywords": {"measurable implies strongly": 0.010494743012823167, "implies strongly measurable": 0.010494743012823167, "countable topology": 0.021567786782198985, "implies strongly": 0.035715520099333646, "measurable implies": 0.05259515133015473, "strongly measurable": 0.05259515133015473, "topology": 0.11369206228658875, "measurable": 0.13453835116331675, "space": 0.18569843656348187, "countable": 0.18569843656348187, "implies": 0.18569843656348187, "strongly": 0.18569843656348187}}, {"docstring": "The variable of the power series ring over an integral domain is prime.\n", "keywords": {"power series ring": 0.0042542192213185686, "domain is prime": 0.015380821171891606, "power series": 0.02570861714399338, "series ring": 0.02570861714399338, "integral domain": 0.02570861714399338, "prime": 0.09568045026443411, "variable": 0.15831692877998726, "power": 0.15831692877998726, "series": 0.15831692877998726, "ring": 0.15831692877998726, "integral": 0.15831692877998726, "domain": 0.15831692877998726}}, {"docstring": "The second projection in a product is `C^\u221e`.\n", "keywords": {"projection": 0.29736558256021506, "product": 0.29736558256021506}}, {"docstring": "For rewriting in the reverse direction, see `fin.cast_add_nat_left`.\n", "keywords": {"fin.cast": 0.04491197687864554, "add": 0.04491197687864554, "nat": 0.04491197687864554, "left": 0.04491197687864554, "reverse direction": 0.04940384002065631, "direction": 0.15831692877998726, "rewriting": 0.29736558256021506, "reverse": 0.29736558256021506}}, {"docstring": "The function exp_neg_inv_glue` is nonnegative.\n", "keywords": {"neg": 0.04491197687864554, "inv": 0.04491197687864554, "glue": 0.04491197687864554, "function exp": 0.04940384002065631, "exp": 0.15831692877998726, "nonnegative": 0.15831692877998726, "function": 0.29736558256021506}}, {"docstring": "See `lt_tsub_iff_left_of_le_of_le` for a weaker statement in a partial order.\n", "keywords": {"partial order": 0.015380821171891606, "weaker statement": 0.02570861714399338, "tsub": 0.04491197687864554, "iff": 0.04491197687864554, "left": 0.04491197687864554, "order": 0.09568045026443411, "weaker": 0.15831692877998726, "statement": 0.15831692877998726, "partial": 0.15831692877998726}}, {"docstring": "The prime spectrum of the zero ring is empty.\n", "keywords": {"ring is empty": 0.015380821171891606, "prime spectrum": 0.02570861714399338, "empty": 0.09568045026443411, "prime": 0.15831692877998726, "spectrum": 0.15831692877998726, "ring": 0.15831692877998726}}, {"docstring": " For every prime `p` dividing the order of a finite group `G` there exists an element of order `p` in `G`. This is known as Cauchy's theorem.\n", "keywords": {"finite group": 0.03702481907590181, "exists an element": 0.06027763669363039, "dividing the order": 0.10481969574931883, "Cauchy theorem": 0.12358374456703337, "prime": 0.1497391925531594, "dividing": 0.1497391925531594, "group": 0.1497391925531594, "order": 0.15392083341699683, "element of order": 0.16605370802918226, "finite": 0.23843406751375792, "exists": 0.23843406751375792, "element": 0.23843406751375792, "Cauchy": 0.2898196345811465, "theorem": 0.37951425938754646}}, {"docstring": " For a function on a convex set in a linearly ordered space (where the order and the algebraic structures aren't necessarily compatible), in order to prove that it is convex, it suffices to verify the inequality `f (a \u2022 x + b \u2022 y) \u2264 a \u2022 f x + b \u2022 f y` only for `x < y` and positive `a`, `b`. The main use case is `E = \ud835\udd5c` however one can apply it, e.g., to `\ud835\udd5c^n` with lexicographic order.\n", "keywords": {"linearly ordered space": 0.0018263447420417656, "ordered space": 0.013619546354222894, "necessarily compatible": 0.013619546354222894, "verify the inequality": 0.013619546354222894, "linearly ordered": 0.017307727632361308, "algebraic structures": 0.017307727632361308, "suffices to verify": 0.017307727632361308, "convex set": 0.017416939162416264, "convex": 0.06562193326285877, "order": 0.0802249901349966, "lexicographic order": 0.0898424218981943, "order to prove": 0.09901361610988368, "space": 0.10301342124031465, "compatible": 0.10301342124031465, "inequality": 0.10301342124031465, "positive": 0.10301342124031465, "function": 0.13043491345148592, "set": 0.13043491345148592, "linearly": 0.13043491345148592, "ordered": 0.13043491345148592}}, {"docstring": "The handshaking lemma.  See also `simple_graph.sum_degrees_eq_twice_card_edges`.\n", "keywords": {"handshaking lemma": 0.07796891081290885, "simple": 0.17881754828257995, "graph.sum": 0.17881754828257995, "degrees": 0.17881754828257995, "card": 0.17881754828257995, "edges": 0.17881754828257995, "lemma": 0.2005079697193566, "handshaking": 0.36073110501666333}}, {"docstring": " Continuity at a point can be read under right composition with a local homeomorphism, if the point is in its target\n", "keywords": {"local homeomorphism": 0.021114872146320036, "Continuity": 0.11246769819744629, "homeomorphism": 0.11246769819744629, "target": 0.11246769819744629, "point": 0.13282721021560867, "read": 0.1838594885424691, "composition": 0.1838594885424691, "local": 0.1838594885424691}}, {"docstring": "For any sum along `{0, ..., n-1}` of a commutative-monoid-valued function, we can verify that it's equal to a different function just by checking differences of adjacent terms. This is a discrete analogue of the fundamental theorem of calculus.\n", "keywords": {"adjacent terms": 0.015411105191775794, "checking differences": 0.0213356894579572, "differences of adjacent": 0.0213356894579572, "function": 0.07899466372375519, "terms": 0.10500809729033178, "theorem of calculus": 0.11989767689589947, "sum": 0.14453368873287326, "verify": 0.14453368873287326, "equal": 0.14453368873287326, "checking": 0.14453368873287326, "differences": 0.14453368873287326, "adjacent": 0.14453368873287326, "discrete analogue": 0.15841072361684636, "fundamental theorem": 0.15841072361684636, "calculus": 0.2895152337022981, "discrete": 0.36979497406271966, "analogue": 0.36979497406271966, "fundamental": 0.36979497406271966, "theorem": 0.36979497406271966}}, {"docstring": "**Alias** of the reverse direction of lt_sub_iff_add_lt`.\n", "keywords": {"reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "add": 0.04491197687864554, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " A function is `C^(n + 1)` on an open domain if and only if it is differentiable there, and its derivative (formulated with `deriv`) is `C^n`.\n", "keywords": {"open domain": 0.013527995261974615, "deriv": 0.04491197687864554, "derivative": 0.0771485953923296, "formulated": 0.0771485953923296, "function": 0.1155310835876123, "open": 0.1155310835876123, "domain": 0.1155310835876123, "differentiable": 0.1155310835876123}}, {"docstring": " If variable assignments `v` and `w` agree on all variables that occur in term `t`, the value of `t` under `v` and `w` are identical.\n", "keywords": {"occur in term": 0.021567786782198985, "variable assignments": 0.031557281947372486, "assignments": 0.11369206228658875, "agree": 0.11369206228658875, "term": 0.11369206228658875, "identical": 0.11369206228658875, "variables that occur": 0.11487806119690562, "occur": 0.18569843656348187, "variable": 0.2690767023266335, "variables": 0.2690767023266335}}, {"docstring": "Express `dist` in terms of `edist`\n", "keywords": {"Express": 0.04491197687864554, "dist": 0.04491197687864554, "edist": 0.04491197687864554, "terms": 0.29736558256021506}}, {"docstring": "A characterization of `enum_ord`: it is the unique strict monotonic function with range `S`.\n", "keywords": {"unique strict monotonic": 0.03339840940482845, "strict monotonic function": 0.03339840940482845, "enum": 0.04491197687864554, "ord": 0.04491197687864554, "function with range": 0.04940384002065631, "unique strict": 0.09700399286574239, "strict monotonic": 0.09700399286574239, "monotonic function": 0.09700399286574239, "range": 0.15831692877998726, "characterization": 0.29736558256021506, "unique": 0.29736558256021506, "strict": 0.29736558256021506, "monotonic": 0.29736558256021506, "function": 0.29736558256021506}}, {"docstring": "If the result of equality elimination is unsatisfiable, the original clause is unsatisfiable.\n", "keywords": {"elimination is unsatisfiable": 0.015898905083503986, "clause is unsatisfiable": 0.015898905083503986, "result of equality": 0.035715520099333646, "equality elimination": 0.035715520099333646, "original clause": 0.035715520099333646, "unsatisfiable": 0.04213844269123149, "result": 0.18569843656348187, "equality": 0.18569843656348187, "elimination": 0.18569843656348187, "original": 0.18569843656348187, "clause": 0.18569843656348187}}, {"docstring": " The affine span of a single point, coerced to a set, contains just that point.\n", "keywords": {"single point": 0.02681089848262901, "affine span": 0.035715520099333646, "point": 0.07030442419566416, "coerced": 0.11369206228658875, "set": 0.11369206228658875, "affine": 0.18569843656348187, "span": 0.18569843656348187, "single": 0.18569843656348187}}, {"docstring": " Auxiliary lemma to prove that the composition of formal multilinear series is associative.  Consider a composition `a` of `n` and a composition `b` of `a.length`. Grouping together some blocks of `a` according to `b` as in `a.gather b`, one can compute the total size of the blocks of `a` up to an index `size_up_to b i + j` (where the `j` corresponds to a set of blocks of `a` that do not fill a whole block of `a.gather b`). The first part corresponds to a sum of blocks in `a.gather b`, and the second one to a sum of blocks in the next block of `sigma_composition_aux a b`. This is the content of this lemma.\n", "keywords": {"formal multilinear series": 0.007483082609934602, "series is associative": 0.03304350413025396, "formal multilinear": 0.0371545015811384, "multilinear series": 0.0371545015811384, "blocks": 0.06286115260576217, "composition": 0.06939989669584931, "Auxiliary lemma": 0.07863640855596139, "a.gather": 0.10170063006196384, "block": 0.1571528815144054, "Auxiliary": 0.16899875046969956, "associative": 0.16899875046969956, "lemma to prove": 0.1780506014778689, "sum of blocks": 0.18035901168697818, "composition of formal": 0.18092631504815482, "prove": 0.18927096288309506, "formal": 0.18927096288309506, "multilinear": 0.18927096288309506, "series": 0.18927096288309506, "corresponds": 0.21481955970031555, "lemma": 0.2156925305316933}}, {"docstring": "Path composition commutes with products\n", "keywords": {"Path composition commutes": 0.01655915082773619, "Path composition": 0.04940384002065631, "commutes with products": 0.04940384002065631, "composition commutes": 0.09700399286574239, "Path": 0.15831692877998726, "products": 0.15831692877998726, "composition": 0.29736558256021506, "commutes": 0.29736558256021506}}, {"docstring": " `g \u2218 f` is `C^n` within `s` at `x` if `g` is `C^n` at `f x` and `f` is `C^n` within `s` at `x`.\n", "keywords": {}}, {"docstring": "  Two elements `a` and `b` are regular if and only if both products `a * b` and `b * a` are regular.\n", "keywords": {"regular": 0.07571113878390312, "elements": 0.09713402394201612, "products": 0.09713402394201612}}, {"docstring": "If `K` is a complete subset, then any cauchy sequence in `K` converges to a point in `K`\n", "keywords": {"complete subset": 0.00899321792126428, "cauchy sequence": 0.013527995261974615, "subset": 0.0771485953923296, "converges": 0.0771485953923296, "complete": 0.1155310835876123, "cauchy": 0.1155310835876123, "sequence": 0.1155310835876123, "point": 0.1155310835876123}}, {"docstring": " If a family of open sets `s` is such that every open neighbourhood contains some member of `s`, then `s` is a topological basis.\n", "keywords": {"topological basis": 0.012465543599998139, "open sets": 0.01661242725142902, "open neighbourhood": 0.024893945799064357, "family of open": 0.05867165447781048, "open": 0.08977403887827273, "sets": 0.09101163530720666, "basis": 0.09101163530720666, "family": 0.13528014248445303, "neighbourhood": 0.13528014248445303, "member": 0.13528014248445303, "topological": 0.13528014248445303}}, {"docstring": " If `m : \u2115` is coprime with `n`, then the minimal polynomials of a primitive `n`-th root of unity `\u03bc` and of `\u03bc ^ m` are the same.\n", "keywords": {"root of unity": 0.00899321792126428, "minimal polynomials": 0.013527995261974615, "primitive": 0.0771485953923296, "unity": 0.0771485953923296, "coprime": 0.1155310835876123, "minimal": 0.1155310835876123, "polynomials": 0.1155310835876123, "root": 0.1155310835876123}}, {"docstring": "The p-adic norm of `q` is `1` if `q` is prime and not equal to `p`.\n", "keywords": {"p-adic norm": 0.02570861714399338, "p-adic": 0.15831692877998726, "norm": 0.15831692877998726, "prime": 0.15831692877998726, "equal": 0.15831692877998726}}, {"docstring": "**Alias** of lt_mul_of_inv_mul_lt`.\n", "keywords": {"mul": 0.021352745740207107, "Alias": 0.035514607549195436, "inv": 0.05706283858652404}}, {"docstring": "The kernel of the quotient map induced by an additive congruence relation `c` equals `c`.\n", "keywords": {"additive congruence relation": 0.0025258761156662004, "quotient map induced": 0.0042542192213185686, "congruence relation": 0.015380821171891606, "quotient map": 0.02570861714399338, "map induced": 0.02570861714399338, "additive congruence": 0.02570861714399338, "equals": 0.04491197687864554, "relation": 0.09568045026443411, "kernel": 0.15831692877998726, "quotient": 0.15831692877998726, "map": 0.15831692877998726, "induced": 0.15831692877998726, "additive": 0.15831692877998726, "congruence": 0.15831692877998726}}, {"docstring": "The product map of two `C^n` functions is `C^n`.\n", "keywords": {"product map": 0.02570861714399338, "functions": 0.09568045026443411, "product": 0.15831692877998726, "map": 0.15831692877998726}}, {"docstring": " A more general version of `finprod_mem_mul_distrib` that only requires `s \u2229 mul_support f` and `s \u2229 mul_support g` rather than `s` to be finite.\n", "keywords": {"mul": 0.012085080135563813, "general version": 0.02249651976012989, "support": 0.05776554179380615, "finprod": 0.05899937629682816, "mem": 0.05899937629682816, "distrib": 0.05899937629682816, "requires": 0.10028582371075691, "finite": 0.10028582371075691, "general": 0.14832923246533666, "version": 0.14832923246533666}}, {"docstring": " If `E` is a vector space over a division rings `R` and has a monoid action by `\u03b1`, then that action commutes by scalar multiplication of inverses of integers in `R`\n", "keywords": {"division rings": 0.011752516585960321, "vector space": 0.017595046402022366, "commutes by scalar": 0.017595046402022366, "scalar multiplication": 0.017595046402022366, "multiplication of inverses": 0.017595046402022366, "inverses of integers": 0.017595046402022366, "monoid action": 0.023251977563965413, "action commutes": 0.023251977563965413, "action": 0.08640514249691128, "rings": 0.0883382645966668, "vector": 0.13149453879183629, "space": 0.13149453879183629, "division": 0.13149453879183629, "monoid": 0.13149453879183629, "commutes": 0.13149453879183629, "scalar": 0.13149453879183629, "multiplication": 0.13149453879183629, "inverses": 0.13149453879183629, "integers": 0.13149453879183629}}, {"docstring": "If there's more than 1 element, the min' is less than the max'. An alternate version of `min'_lt_max'` which is sometimes more convenient.\n", "keywords": {"element": 0.08191285426104689, "min": 0.24516296616129382, "max": 0.24516296616129382, "convenient": 0.41079773749817783, "alternate version": 0.4416026334777926, "alternate": 0.5534686723650176, "version": 0.5534686723650176}}, {"docstring": "Let `X` be a topological space, and suppose that for all distinct `x,y \u2208 X`, there  is some clopen set `U` such that `x \u2208 U` and `y \u2209 U`. Then `X` is totally disconnected.\n", "keywords": {"topological space": 0.011154056927717123, "clopen set": 0.011154056927717123, "space": 0.08922538916412363, "distinct": 0.08922538916412363, "set": 0.08922538916412363, "totally disconnected": 0.09108482621177338, "topological": 0.12363091320521931, "suppose": 0.12363091320521931, "clopen": 0.12363091320521931, "disconnected": 0.25386721785551913, "totally": 0.32883716426354986}}, {"docstring": "If two `monoid_with_zero_hom`s agree on the positive naturals they are equal.\n", "keywords": {"monoid": 0.04491197687864554, "hom": 0.04491197687864554, "positive naturals": 0.09700399286574239, "equal": 0.15831692877998726, "agree": 0.29736558256021506, "positive": 0.29736558256021506, "naturals": 0.29736558256021506}}, {"docstring": "Two vectors are equal if and only if they have equal norms and zero angle between them.\n", "keywords": {"equal norms": 0.0562460611896591, "vectors are equal": 0.12194096740933036, "equal": 0.13945519496053638, "vectors": 0.19092478917347616, "norms": 0.19092478917347616, "angle": 0.19092478917347616}}, {"docstring": "Embedding `i : fin n` into `fin (n + 1)` is always about some hole `p`.\n", "keywords": {"Embedding": 0.05706283858652404, "fin": 0.07571113878390312, "hole": 0.11984314898676356}}, {"docstring": "`cast_succ i` is positive when `i` is positive\n", "keywords": {"cast": 0.05706283858652404, "positive": 0.10901343189444501, "succ": 0.11984314898676356}}, {"docstring": " The inner product of two non-zero vectors equals the product of their norms if and only if the angle between the two vectors is 0.\n", "keywords": {"non-zero vectors equals": 0.002280381173668405, "non-zero vectors": 0.01848231979674799, "vectors equals": 0.01848231979674799, "equals the product": 0.036107893167731796, "product": 0.0600992383382869, "vectors": 0.07571113878390312, "non-zero": 0.11984314898676356, "equals": 0.11984314898676356, "norms": 0.11984314898676356, "angle": 0.11984314898676356}}, {"docstring": "If `\u03c6` satisfies `\u2225\u03c6\u2225 \u2264 C`, then the same is true for the lifted morphism.\n", "keywords": {"lifted morphism": 0.015380821171891606, "satisfies": 0.04491197687864554, "morphism": 0.09568045026443411, "true": 0.15831692877998726, "lifted": 0.15831692877998726}}, {"docstring": "Prime `p` divides the product of a list `L` iff it divides some `a \u2208 L`\n", "keywords": {"Prime": 0.054709255964732355, "iff it divides": 0.07301337118426868, "list": 0.11521656054299435, "iff": 0.11521656054299435, "divides the product": 0.1179331082419386, "divides": 0.13667842094541144, "product": 0.1879836817695587}}, {"docstring": " Assumes right covariance. The lemma assuming left covariance is `left.one_lt_mul_of_le_of_lt`.\n", "keywords": {"Assumes right covariance": 0.15195679415702995, "Assumes": 0.1531727145735673, "left.one": 0.2182620423168793, "mul": 0.2182620423168793, "covariance": 0.23216465691767033, "assuming left covariance": 0.2636654148178027, "lemma assuming left": 0.3201847146816566, "left covariance": 0.32446011851782974, "lemma assuming": 0.38571507274593436, "assuming left": 0.38571507274593436, "lemma": 0.5275897320195265, "assuming": 0.5275897320195265, "left": 0.5275897320195265}}, {"docstring": " Let `f` be a function continuous on a convex (or, equivalently, connected) subset `D` of the real line. If `f` is differentiable on the interior of `D` and `f' < C`, then `f` grows slower than `C * x` on `D`, i.e., `f y - f x < C * (y - x)` whenever `x, y \u2208 D`, `x < y`.\n", "keywords": {"real line": 0.007948096222458798, "function continuous": 0.010159422250580143, "equivalently": 0.05899937629682816, "connected": 0.05899937629682816, "subset": 0.05899937629682816, "grows slower": 0.06815467895249562, "convex": 0.07862947958994491, "line": 0.07862947958994491, "function": 0.10028582371075691, "continuous": 0.10028582371075691, "real": 0.10028582371075691, "grows": 0.22862739428695167, "differentiable": 0.2790829227183407, "interior": 0.2790829227183407, "slower": 0.2790829227183407}}, {"docstring": "The limit of a convergent sequence in a sequentially closed set is in that set.\n", "keywords": {"sequentially closed set": 0.010494743012823167, "convergent sequence": 0.035715520099333646, "sequentially closed": 0.035715520099333646, "closed set": 0.05259515133015473, "set": 0.13453835116331675, "limit": 0.18569843656348187, "convergent": 0.18569843656348187, "sequence": 0.18569843656348187, "sequentially": 0.18569843656348187, "closed": 0.18569843656348187}}, {"docstring": "Generalized eigenrange and generalized eigenspace for exponent `finrank K V` are disjoint.\n", "keywords": {"eigenspace for exponent": 0.021567786782198985, "Generalized eigenrange": 0.05259515133015473, "generalized eigenspace": 0.05259515133015473, "exponent": 0.11369206228658875, "finrank": 0.11369206228658875, "disjoint": 0.11369206228658875, "eigenrange and generalized": 0.11487806119690562, "Generalized": 0.13453835116331675, "eigenrange": 0.18569843656348187, "eigenspace": 0.18569843656348187}}, {"docstring": "On non-dependent functions, `function.update` can be expressed as an `ite`\n", "keywords": {"function.update": 0.04491197687864554, "ite": 0.04491197687864554, "non-dependent functions": 0.04940384002065631, "functions": 0.15831692877998726, "non-dependent": 0.29736558256021506, "expressed": 0.29736558256021506}}, {"docstring": " The cast of the successor is the succesor of the cast. See `fin.succ_cast_eq` for rewriting in the reverse direction.\n", "keywords": {"cast": 0.08156997642012244, "reverse direction": 0.14191310150259986, "successor": 0.15516728303674054, "succesor": 0.15516728303674054, "fin.succ": 0.24554012576073395, "direction": 0.31910267615286586, "rewriting": 0.3894565294745413, "reverse": 0.3894565294745413}}, {"docstring": "To prove an inequality between the lifts to a common universe of two different supremums, it suffices to show that the lift of each cardinal from the smaller supremum if bounded by the lift of some cardinal from the larger supremum.\n", "keywords": {"prove an inequality": 0.012733370331156313, "common universe": 0.012733370331156313, "suffices to show": 0.012733370331156313, "smaller supremum": 0.018340836048045255, "larger supremum": 0.018340836048045255, "lift": 0.04595542120144012, "cardinal": 0.05573371734619395, "supremum if bounded": 0.06187263271770995, "supremum": 0.08031041103230205, "lifts": 0.09191084240288024, "prove": 0.11213059450973376, "inequality": 0.11213059450973376, "common": 0.11213059450973376, "universe": 0.11213059450973376, "suffices": 0.11213059450973376, "show": 0.11213059450973376, "smaller": 0.11213059450973376, "bounded": 0.11213059450973376, "larger": 0.11213059450973376, "supremums": 0.1606208220646041}}, {"docstring": " The measurable superset `to_measurable \u03bc t` of `t` (which has the same measure as `t`) satisfies, for any measurable set `s`, the equality `\u03bc (to_measurable \u03bc t \u2229 s) = \u03bc (t \u2229 s)`. This only holds when `\u03bc` is \u03c3-finite. For a version without this assumption (but requiring that `t` has finite measure), see `measure_to_measurable_inter`.\n", "keywords": {"measurable superset": 0.07035819257101848, "measurable set": 0.07035819257101848, "measurable": 0.08668668606762898, "satisfies": 0.1160927001617473, "measure": 0.1395251546736647, "superset": 0.1516572343359717, "set": 0.1516572343359717, "equality": 0.1516572343359717, "finite measure": 0.29315791998437085, "\u03c3-finite": 0.383049586256943, "inter": 0.39925016007243974, "holds": 0.4478005379332608, "assumption": 0.47494872828421586, "version": 0.5415970626164771, "requiring": 0.5415970626164771, "finite": 0.5415970626164771}}, {"docstring": " The degree-sum formula.  This is also known as the handshaking lemma, which might more specifically refer to `simple_graph.even_card_odd_degree_vertices`.\n", "keywords": {"degree-sum formula": 0.02541909697430123, "formula": 0.12363091320521931, "simple": 0.17881754828257995, "graph.even": 0.17881754828257995, "card": 0.17881754828257995, "odd": 0.17881754828257995, "degree": 0.17881754828257995, "vertices": 0.17881754828257995, "handshaking lemma": 0.18075564686791562, "degree-sum": 0.2005079697193566, "specifically refer": 0.2766850298235749, "lemma": 0.32883716426354986, "handshaking": 0.46553351027698087, "specifically": 0.46553351027698087, "refer": 0.46553351027698087}}, {"docstring": " The closure of the interval `(-\u221e, a)` is the closed interval `(-\u221e, a]`, unless `a` is a bottom element.\n", "keywords": {"bottom element": 0.00964721495732046, "closed interval": 0.010003459729722266, "interval": 0.042981588758132815, "element": 0.08293109455034965, "closure": 0.11521656054299435, "closed": 0.11521656054299435, "bottom": 0.11521656054299435}}, {"docstring": " Three points are affinely independent if and only if they are not collinear.\n", "keywords": {"points are affinely": 0.02570861714399338, "affinely independent": 0.02570861714399338, "collinear": 0.09568045026443411, "points": 0.15831692877998726, "affinely": 0.15831692877998726, "independent": 0.15831692877998726}}, {"docstring": "The finite field `F` has even cardinality iff it has characteristic `2`.\n", "keywords": {"finite field": 0.015380821171891606, "cardinality iff": 0.02570861714399338, "field": 0.09568045026443411, "characteristic": 0.09568045026443411, "finite": 0.15831692877998726, "cardinality": 0.15831692877998726, "iff": 0.15831692877998726}}, {"docstring": "**Liouville's theorem**: a complex differentiable bounded function `f : E \u2192 F` is a constant.\n", "keywords": {"differentiable bounded function": 0.0025258761156662004, "complex differentiable bounded": 0.0042542192213185686, "Liouville theorem": 0.005484890844946624, "bounded function": 0.015380821171891606, "complex differentiable": 0.02570861714399338, "differentiable bounded": 0.02570861714399338, "Liouville": 0.057012387690331526, "theorem": 0.09568045026443411, "function": 0.09568045026443411, "constant": 0.09568045026443411, "complex": 0.15831692877998726, "differentiable": 0.15831692877998726, "bounded": 0.15831692877998726}}, {"docstring": " **Intermediate value theorem**: if `f` is continuous on an order-connected set `s` and `a`, `b` are two points of this set, then `f` sends `s` to a superset of `[f x, f y]`.\n", "keywords": {"Intermediate value theorem": 0.0038328758502990325, "order-connected set": 0.00920608973030006, "set": 0.04092200269394482, "Intermediate": 0.04765068368560932, "sends": 0.0528063806271324, "theorem": 0.08012982629475915, "continuous": 0.11145728654016383, "order-connected": 0.11145728654016383, "points": 0.11145728654016383, "superset": 0.11145728654016383}}, {"docstring": "For `a : F`, `quadratic_char F a = -1 \u2194 \u00ac is_square a`.\n", "keywords": {"quadratic": 0.04491197687864554, "char": 0.0771485953923296, "square": 0.0771485953923296}}, {"docstring": "Law of Excluded Middle.\n", "keywords": {"Excluded Middle": 0.012602360123953448, "Law of Excluded": 0.023458380875189744, "Middle": 0.08596317751626563, "Excluded": 0.1447773057422032, "Law": 0.15831692877998726}}, {"docstring": " For `r` strictly smaller than the radius of `p`, then `\u2225p\u2099\u2225 r\u207f` tends to zero exponentially: for some `0 < a < 1` and `C > 0`,  `\u2225p n\u2225 * r ^ n \u2264 C * a ^ n`.\n", "keywords": {"strictly smaller": 0.00899321792126428, "strictly": 0.0771485953923296, "exponentially": 0.0771485953923296, "smaller": 0.1155310835876123, "radius": 0.1155310835876123}}, {"docstring": "Sum of a list of elements in an `add_submonoid` is in the `add_submonoid`.\n", "keywords": {"add": 0.02184815412823125, "submonoid": 0.02184815412823125, "list of elements": 0.040564923574392765, "Sum": 0.12156210109285605, "list": 0.19744254481508877, "elements": 0.19744254481508877}}, {"docstring": "A subgroup contains the group's 1.\n", "keywords": {"group": 0.15831692877998726, "subgroup": 0.29736558256021506}}, {"docstring": "Cauchy\u2013Schwarz inequality. This proof follows \"Proof 2\" on Wikipedia.\n", "keywords": {"Schwarz inequality": 0.011951407027787993, "Schwarz": 0.07459883109391804, "Cauchy": 0.0771485953923296, "inequality": 0.15831692877998726, "Wikipedia": 0.21873304579817127, "proof": 0.22747679012881583}}, {"docstring": " An induction principle for span membership. If `p` holds for 0 and all elements of `s`, and is preserved under addition and scalar multiplication, then `p` holds for all elements of the span of `s`.\n", "keywords": {"induction principle": 0.04013144143432476, "span membership": 0.05189264969389657, "holds": 0.13089221514293597, "membership": 0.1352784111955579, "principle for span": 0.15962977986846352, "elements": 0.17826839753681534, "span": 0.18233747514864834, "scalar multiplication": 0.19281326521520784, "induction": 0.1964256808545537, "principle": 0.1964256808545537, "preserved under addition": 0.2671422553027709, "addition and scalar": 0.2671422553027709, "multiplication": 0.3520512103630526, "preserved": 0.4591542486422362, "addition": 0.4591542486422362, "scalar": 0.4591542486422362}}, {"docstring": "Indexed version of the above lemma `exists_lt_of_cInf_lt` When `infi f < a`, there is an element `i` such that `f i < a`.\n", "keywords": {"Indexed version": 0.015380821171891606, "exists": 0.04491197687864554, "cInf": 0.04491197687864554, "Indexed": 0.09568045026443411, "lemma": 0.09568045026443411, "infi": 0.09568045026443411, "element": 0.09568045026443411, "version": 0.15831692877998726}}, {"docstring": "The function `exp (b * x) / x ^ s` tends to `+\u221e` at `+\u221e`, for any real `s` and `b > 0`.\n", "keywords": {"exp": 0.04491197687864554, "function": 0.09568045026443411, "real": 0.09568045026443411}}, {"docstring": "The leading coefficient of a product of polynomials is equal to the product of the leading coefficients, provided that this product is nonzero.  See `polynomial.leading_coeff_prod` (without the `'`) for a version for integral domains, where this condition is automatically satisfied.\n", "keywords": {"leading coefficient": 0.018031522399309656, "polynomials is equal": 0.028816117629977194, "product of polynomials": 0.054323602834302716, "leading": 0.058224161364531624, "product": 0.06024184261772644, "product is nonzero": 0.07399738535399678, "provided": 0.12248504179011051, "nonzero": 0.12248504179011051, "coefficient": 0.1521030534124997, "integral domains": 0.15503176582819808, "automatically satisfied": 0.15503176582819808, "polynomials": 0.1673589160919142, "equal": 0.1673589160919142, "version for integral": 0.2033727970578553, "condition is automatically": 0.2033727970578553, "polynomial.leading": 0.23679089953448632, "coeff": 0.23679089953448632, "prod": 0.23679089953448632, "domains": 0.326497927876277, "satisfied": 0.326497927876277}}, {"docstring": "`fintype.sum_equiv` is a variant of `finset.sum_bij` that accepts `function.bijective`.  See `function.bijective.sum_comp` for a version without `h`.\n", "keywords": {"fintype.sum": 0.05899937629682816, "equiv": 0.05899937629682816, "finset.sum": 0.05899937629682816, "bij": 0.05899937629682816, "function.bijective": 0.05899937629682816, "accepts": 0.12363091320521931, "comp": 0.17881754828257995, "variant": 0.2005079697193566, "version": 0.46553351027698087}}, {"docstring": " Composition by continuous linear maps on the left preserves `C^n` functions in a domain at a point.\n", "keywords": {"continuous linear maps": 0.0042542192213185686, "Composition by continuous": 0.015380821171891606, "left preserves": 0.015380821171891606, "continuous linear": 0.02570861714399338, "linear maps": 0.02570861714399338, "Composition": 0.09568045026443411, "preserves": 0.09568045026443411, "functions": 0.09568045026443411, "point": 0.09568045026443411, "continuous": 0.15831692877998726, "linear": 0.15831692877998726, "maps": 0.15831692877998726, "left": 0.15831692877998726, "domain": 0.15831692877998726}}, {"docstring": "An increasing function is injective\n", "keywords": {"function is injective": 0.04940384002065631, "increasing function": 0.09700399286574239, "injective": 0.15831692877998726, "increasing": 0.29736558256021506, "function": 0.29736558256021506}}, {"docstring": " This application lemma only works in special circumstances. Given knowledge of when `\u03bc \u2264 \u03bd` and `\u03bd \u2264 \u03bc`, a more general application lemma can be written.\n", "keywords": {"special circumstances": 0.04325492719738993, "works in special": 0.07004375124078006, "application lemma": 0.09055454939118943, "general application lemma": 0.1420830150784373, "circumstances": 0.16205454282434614, "application": 0.19579208512096213, "lemma": 0.19579208512096213, "lemma only works": 0.22315333290187733, "works": 0.25584912197094006, "special": 0.25584912197094006, "general application": 0.27082834325462596, "written": 0.40179717860981823, "knowledge": 0.544229518153821, "general": 0.544229518153821}}, {"docstring": "A common special case of `image2_congr`\n", "keywords": {"common special case": 0.03339840940482845, "congr": 0.04491197687864554, "common special": 0.09700399286574239, "special case": 0.09700399286574239, "common": 0.29736558256021506, "special": 0.29736558256021506, "case": 0.29736558256021506}}, {"docstring": "The map sending an additive congruence relation to its underlying equivalence relation is injective.\n", "keywords": {"additive congruence relation": 0.009836841595559516, "underlying equivalence relation": 0.009836841595559516, "map sending": 0.03439110359613085, "sending an additive": 0.03439110359613085, "additive congruence": 0.03439110359613085, "underlying equivalence": 0.03439110359613085, "congruence relation": 0.05033870131288873, "equivalence relation": 0.05033870131288873, "relation is injective": 0.06831905985192867, "injective": 0.11145728654016383, "relation": 0.1314201551237121, "map": 0.1823394614884183, "sending": 0.1823394614884183, "additive": 0.1823394614884183, "congruence": 0.1823394614884183, "underlying": 0.1823394614884183, "equivalence": 0.1823394614884183}}, {"docstring": " The angle between the negation of a nonzero vector and that vector.\n", "keywords": {"nonzero vector": 0.0562460611896591, "vector": 0.13945519496053638, "angle": 0.19092478917347616, "negation": 0.19092478917347616, "nonzero": 0.19092478917347616}}, {"docstring": "Sum of elements in an `add_submonoid` of an `add_comm_monoid` indexed by a `finset` is in the `add_submonoid`.\n", "keywords": {"add": 0.012329400381139773, "Sum of elements": 0.015411349595587466, "submonoid": 0.022829596169123615, "comm": 0.0596404586934656, "monoid": 0.0596404586934656, "finset": 0.0596404586934656, "Sum": 0.1013272142599222, "indexed": 0.1013272142599222, "elements": 0.14978645964327916}}, {"docstring": " An equivalent definition for prime powers: `n` is a prime power iff there is a prime `p` and a natural `k` such that `n` can be written as `p^(k+1)`.\n", "keywords": {"prime power iff": 0.004128763641361978, "equivalent definition": 0.023478396598924825, "power iff": 0.02536363305303039, "prime powers": 0.026123341455308938, "prime": 0.05196001066075503, "definition for prime": 0.07887523882817453, "natural": 0.10252384836042068, "equivalent": 0.15145892749810547, "definition": 0.15145892749810547, "iff": 0.15145892749810547, "written": 0.15145892749810547, "powers": 0.1633197378433209, "power": 0.1633197378433209}}, {"docstring": "`circle_map` is `2\u03c0`-periodic.\n", "keywords": {"circle": 0.04491197687864554, "map": 0.04491197687864554, "periodic": 0.04491197687864554}}, {"docstring": "Triangle inequality for the extended distance\n", "keywords": {"Triangle inequality": 0.04940384002065631, "extended distance": 0.04940384002065631, "Triangle": 0.15831692877998726, "distance": 0.15831692877998726, "inequality": 0.29736558256021506, "extended": 0.29736558256021506}}, {"docstring": " If we apply `prod_extend_right a (\u03c3 a)` for all `a : \u03b1` in turn, we get `prod_congr_right \u03c3`.\n", "keywords": {"prod": 0.02006098734604785, "extend": 0.054709255964732355, "congr": 0.054709255964732355, "apply": 0.09329120537733218, "turn": 0.09329120537733218}}, {"docstring": " If `irreducible (cyclotomic (2 ^ (k + 1)) K)` (in particular for `K = \u211a`), then the norm of `\u03b6 ^ (2 ^ k) - 1` is `(-2) ^ (2 ^ k)`.\n", "keywords": {"irreducible": 0.04491197687864554, "cyclotomic": 0.04491197687864554, "norm": 0.08438900089923473}}, {"docstring": "Only assumes left strict covariance\n", "keywords": {"left strict covariance": 0.016559150827736194, "assumes left strict": 0.03339840940482845, "strict covariance": 0.04940384002065631, "assumes left": 0.09700399286574239, "left strict": 0.09700399286574239, "covariance": 0.15831692877998726, "assumes": 0.29736558256021506, "left": 0.29736558256021506, "strict": 0.29736558256021506}}, {"docstring": "`E.mk_sol init`'s first `E.order` terms are `init`.\n", "keywords": {"sol init": 0.016781270735569963, "E.mk": 0.034588515384495436, "E.order": 0.034588515384495436, "init": 0.07162298286637953, "sol": 0.11521656054299435, "terms": 0.11521656054299435}}, {"docstring": "If `u` is a sequence which is unbounded below, then after any point, it reaches a value strictly smaller than all previous values.\n", "keywords": {"strictly smaller": 0.02570861714399338, "point": 0.09568045026443411, "sequence": 0.15831692877998726, "unbounded": 0.15831692877998726, "reaches": 0.15831692877998726, "strictly": 0.15831692877998726, "smaller": 0.15831692877998726, "previous": 0.15831692877998726}}, {"docstring": "The sum of two squares is zero iff both elements are zero.\n", "keywords": {"iff both elements": 0.02570861714399338, "sum": 0.15831692877998726, "squares": 0.15831692877998726, "iff": 0.15831692877998726, "elements": 0.15831692877998726}}, {"docstring": "Assumes right covariance. The lemma assuming left covariance is `left.add_neg'`.\n", "keywords": {"Assumes right covariance": 0.15195679415702995, "Assumes": 0.1531727145735673, "left.add": 0.2182620423168793, "neg": 0.2182620423168793, "covariance": 0.23216465691767033, "assuming left covariance": 0.2636654148178027, "lemma assuming left": 0.3201847146816566, "left covariance": 0.32446011851782974, "lemma assuming": 0.38571507274593436, "assuming left": 0.38571507274593436, "lemma": 0.5275897320195265, "assuming": 0.5275897320195265, "left": 0.5275897320195265}}, {"docstring": "A `finset` of a subsingleton type has cardinality at most one.\n", "keywords": {"subsingleton type": 0.02570861714399338, "type has cardinality": 0.02570861714399338, "finset": 0.04491197687864554, "subsingleton": 0.15831692877998726, "type": 0.15831692877998726, "cardinality": 0.15831692877998726}}, {"docstring": "We don't want the definition of 'simple' to include the zero object, so we check that here.\n", "keywords": {"simple": 0.04491197687864554, "object": 0.09568045026443411, "definition": 0.15831692877998726, "include": 0.15831692877998726, "check": 0.15831692877998726}}, {"docstring": "An element admitting a right additive opposite is add-right-regular.\n", "keywords": {"element admitting": 0.09700399286574239, "additive opposite": 0.09700399286574239, "element": 0.29736558256021506, "admitting": 0.29736558256021506, "additive": 0.29736558256021506, "opposite": 0.29736558256021506}}, {"docstring": "The sum of two additive group homomorphisms is an additive group homomorphism if the target is commutative.\n", "keywords": {"additive group homomorphisms": 0.009148695285828205, "additive group": 0.018650942614307144, "target is commutative": 0.02541909697430123, "group homomorphisms": 0.03730188522861429, "group": 0.07915846438999363, "additive": 0.11357121248292479, "commutative": 0.12363091320521931, "sum": 0.2005079697193566, "target": 0.2005079697193566, "homomorphisms": 0.22714242496584958}}, {"docstring": "A nontrivial torsion-free group is not torsion.\n", "keywords": {"nontrivial torsion-free group": 0.03339840940482845, "nontrivial torsion-free": 0.09700399286574239, "torsion-free group": 0.09700399286574239, "torsion": 0.15831692877998726, "nontrivial": 0.29736558256021506, "torsion-free": 0.29736558256021506, "group": 0.29736558256021506}}, {"docstring": "Two gcfs `g` and `g'` are equal if and only if their components are equal.\n", "keywords": {"components are equal": 0.04437656514447953, "equal": 0.10901343189444501, "gcfs": 0.11984314898676356, "components": 0.19488865479360015}}, {"docstring": "The first coefficient of `id \ud835\udd5c E` is the identity.\n", "keywords": {"identity": 0.09568045026443411, "coefficient": 0.15831692877998726}}, {"docstring": "The sum of a strictly monotone function and a monotone function is strictly monotone.\n", "keywords": {"strictly monotone function": 0.005969477003180055, "strictly monotone": 0.015889194666568494, "monotone function": 0.015889194666568494, "monotone": 0.05771958920065093, "strictly": 0.08893464428012506, "function": 0.08893464428012506, "function is strictly": 0.11998482209440742, "sum": 0.16020926794283838}}, {"docstring": "Introduction rule to prove that `b` is the infimum of `s`: it suffices to check that `b` is smaller than all elements of `s`, and that this is not the case of any `w > b`. See `cInf_eq_of_forall_ge_of_forall_gt_exists_lt` for a version in conditionally complete lattices.\n", "keywords": {"Introduction rule": 0.012425402340664025, "rule to prove": 0.016406548337108775, "suffices to check": 0.016406548337108775, "conditionally complete lattices": 0.03982929793930291, "forall": 0.06921048787109704, "Introduction": 0.09659898051390273, "complete lattices": 0.10001743800601984, "rule": 0.12705006278260775, "prove": 0.12705006278260775, "infimum": 0.12705006278260775, "suffices": 0.12705006278260775, "check": 0.12705006278260775, "smaller": 0.12705006278260775, "elements": 0.12705006278260775, "case": 0.12705006278260775, "version in conditionally": 0.12705633976208477, "conditionally complete": 0.12705633976208477, "cInf": 0.20502090629626074, "exists": 0.20502090629626074, "lattices": 0.2708013337253117}}, {"docstring": "A monotone function with densely ordered codomain and a dense range is continuous.\n", "keywords": {"densely ordered codomain": 0.0042542192213185686, "range is continuous": 0.015380821171891606, "monotone function": 0.02570861714399338, "function with densely": 0.02570861714399338, "densely ordered": 0.02570861714399338, "ordered codomain": 0.02570861714399338, "dense range": 0.02570861714399338, "continuous": 0.09568045026443411, "monotone": 0.15831692877998726, "function": 0.15831692877998726, "densely": 0.15831692877998726, "ordered": 0.15831692877998726, "codomain": 0.15831692877998726, "dense": 0.15831692877998726, "range": 0.15831692877998726}}, {"docstring": "If `s \u2286 t`, then the diameter of `s` is bounded by that of `t`, provided `t` is bounded.\n", "keywords": {"provided": 0.05706283858652404, "bounded": 0.07571113878390312, "diameter": 0.14390902704051098}}, {"docstring": "Additive congruence relations preserve addition.\n", "keywords": {"Additive congruence relations": 0.01655915082773619, "relations preserve addition": 0.016559150827736194, "congruence relations preserve": 0.03339840940482845, "Additive congruence": 0.04940384002065631, "preserve addition": 0.04940384002065631, "congruence relations": 0.09700399286574239, "relations preserve": 0.09700399286574239, "Additive": 0.15831692877998726, "addition": 0.15831692877998726, "congruence": 0.29736558256021506, "relations": 0.29736558256021506, "preserve": 0.29736558256021506}}, {"docstring": "Two subrings are equal if they have the same elements.\n", "keywords": {"subrings are equal": 0.09700399286574239, "elements": 0.15831692877998726, "subrings": 0.29736558256021506, "equal": 0.29736558256021506}}, {"docstring": "An intermediate field is closed under addition.\n", "keywords": {"closed under addition": 0.04940384002065631, "intermediate field": 0.09700399286574239, "field is closed": 0.09700399286574239, "addition": 0.15831692877998726, "intermediate": 0.29736558256021506, "field": 0.29736558256021506, "closed": 0.29736558256021506}}, {"docstring": " To show a category is a `initial_mono_class` it suffices to give an initial object such that every morphism out of it is a monomorphism.\n", "keywords": {"show a category": 0.017798659388540475, "suffices to give": 0.017798659388540475, "initial object": 0.02356920246205565, "mono": 0.052008009273421085, "class": 0.052008009273421085, "give an initial": 0.05583139354179816, "initial": 0.08706326953080504, "monomorphism": 0.08886407157392263, "show": 0.132239959875874, "category": 0.132239959875874, "suffices": 0.132239959875874, "give": 0.132239959875874, "object": 0.132239959875874, "morphism": 0.132239959875874}}, {"docstring": "Empty relation is well-founded\n", "keywords": {"Empty relation": 0.04940384002065631, "relation is well-founded": 0.04940384002065631, "Empty": 0.15831692877998726, "well-founded": 0.15831692877998726, "relation": 0.29736558256021506}}, {"docstring": " If a function converges to a value in a multiplicative topological group, then its inverse converges to the inverse of this value. For the version in normed fields assuming additionally that the limit is nonzero, use `tendsto.inv'`.\n", "keywords": {"multiplicative topological group": 0.004483488383527668, "topological group": 0.02335939204334099, "function converges": 0.03198030426629327, "multiplicative topological": 0.03447074540170908, "inverse converges": 0.038379559560383004, "converges": 0.08488187343535045, "inverse": 0.1088601449746389, "group": 0.12504522868882575, "normed fields assuming": 0.14022748206969773, "fields assuming additionally": 0.14022748206969773, "limit is nonzero": 0.16944032286186908, "function": 0.18254344008272147, "multiplicative": 0.18254344008272147, "topological": 0.18254344008272147, "tendsto.inv": 0.21826204231687923, "version in normed": 0.23577550321407248, "normed fields": 0.23577550321407248, "fields assuming": 0.23577550321407248, "assuming additionally": 0.23577550321407248, "nonzero": 0.33171045238853597}}, {"docstring": "A sequence converges if every subsequence has a convergent subsequence.\n", "keywords": {"sequence converges": 0.037831312533597124, "convergent subsequence": 0.0562460611896591, "subsequence": 0.13945519496053638, "sequence": 0.19092478917347616, "converges": 0.19092478917347616, "convergent": 0.19092478917347616}}, {"docstring": "A more general version of `finsum_mem_add_distrib` that only requires `s \u2229 support f` and `s \u2229 support g` rather than `s` to be finite.\n", "keywords": {"general version": 0.018034246898548233, "support": 0.04902532341292284, "finsum": 0.052376395424323874, "mem": 0.052376395424323874, "add": 0.052376395424323874, "distrib": 0.052376395424323874, "requires": 0.08946888050496495, "finite": 0.08946888050496495, "general": 0.13309686053898662, "version": 0.13309686053898662}}, {"docstring": "Multiplying by all the matrices in `list_transvec_row M` does not change the last column.\n", "keywords": {"list": 0.04491197687864554, "transvec": 0.04491197687864554, "Multiplying": 0.09568045026443411, "row": 0.09568045026443411, "column": 0.09568045026443411, "matrices": 0.15831692877998726, "change": 0.15831692877998726}}, {"docstring": "A real differentiable function of the complex plane into some complex normed space `E` is    conformal at a point `z` if it is holomorphic at that point with a nonvanishing differential.    This is a version of the Cauchy-Riemann equations.\n", "keywords": {"complex normed space": 0.00300810443278252, "real differentiable function": 0.003760127843112974, "normed space": 0.01715967730884209, "nonvanishing differential": 0.01715967730884209, "real differentiable": 0.02371261095394405, "differentiable function": 0.02371261095394405, "complex plane": 0.02630619934481666, "complex normed": 0.02630619934481666, "complex": 0.08420744640724641, "point": 0.08420744640724641, "space": 0.1108458198469406, "differential": 0.1108458198469406, "Cauchy-Riemann equations": 0.13126736564655972, "real": 0.15219509685315077, "differentiable": 0.15219509685315077, "function": 0.15219509685315077, "plane": 0.15219509685315077, "normed": 0.15219509685315077, "conformal": 0.15219509685315077, "holomorphic": 0.15219509685315077}}, {"docstring": "There exists `\u03c0 \u2208 K` with `v`-adic valuation `multiplicative.of_add (-1)`.\n", "keywords": {"adic valuation": 0.02570861714399338, "multiplicative.of": 0.04491197687864554, "add": 0.04491197687864554, "exists": 0.15831692877998726, "adic": 0.15831692877998726, "valuation": 0.15831692877998726}}, {"docstring": "**Alias** of the forward direction of list.nodup_attach`.\n", "keywords": {"direction of list.nodup": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "attach": 0.04491197687864554, "list.nodup": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " If `f` has a local max on `s` at `a` and both `y` and `-y` belong to the positive tangent cone of `s` at `a`, then `f' y = 0`.\n", "keywords": {"positive tangent cone": 0.0016012214736657916, "local max": 0.013527995261974615, "positive tangent": 0.013527995261974615, "tangent cone": 0.013527995261974615, "belong": 0.0771485953923296, "local": 0.1155310835876123, "max": 0.1155310835876123, "positive": 0.1155310835876123, "tangent": 0.1155310835876123, "cone": 0.1155310835876123}}, {"docstring": "If a multivariate formal power series is invertible, then so is its constant coefficient.\n", "keywords": {"multivariate formal power": 0.0042542192213185686, "formal power series": 0.0042542192213185686, "series is invertible": 0.015380821171891606, "constant coefficient": 0.015380821171891606, "multivariate formal": 0.02570861714399338, "formal power": 0.02570861714399338, "power series": 0.02570861714399338, "invertible": 0.09568045026443411, "coefficient": 0.09568045026443411, "multivariate": 0.15831692877998726, "formal": 0.15831692877998726, "power": 0.15831692877998726, "series": 0.15831692877998726, "constant": 0.15831692877998726}}, {"docstring": " Rational root theorem part 1: if `r : f.codomain` is a root of a polynomial over the ufd `A`, then the numerator of `r` divides the constant coefficient\n", "keywords": {"Rational root theorem": 0.0021032528023050994, "root theorem part": 0.0021032528023050994, "theorem part": 0.011752516585960321, "divides the constant": 0.011752516585960321, "constant coefficient": 0.011752516585960321, "Rational root": 0.015502416866670433, "root theorem": 0.023251977563965413, "f.codomain": 0.051687907611449965, "root": 0.08640514249691128, "Rational": 0.0883382645966668, "part": 0.0883382645966668, "ufd": 0.0883382645966668, "divides": 0.0883382645966668, "coefficient": 0.0883382645966668, "theorem": 0.13149453879183629, "polynomial": 0.13149453879183629, "numerator": 0.13149453879183629, "constant": 0.13149453879183629}}, {"docstring": "If `S` is a sub-`R`-algebra of `A` and `S` is finitely-generated as an `R`-module,  then all elements of `S` are integral over `R`.\n", "keywords": {"module": 0.04491197687864554, "algebra": 0.0771485953923296, "finitely-generated": 0.1155310835876123, "elements": 0.1155310835876123, "integral": 0.1155310835876123}}, {"docstring": "Given sets `s, t` of a commutative `add_monoid M`, `x \u2208 M` is in the `add_submonoid` of `M` generated by `s \u222a t` iff there exists an element of the `add_submonoid` generated by `s` and an element of the `add_submonoid` generated by `t` whose sum is `x`.\n", "keywords": {"add": 0.009463954983169744, "iff there exists": 0.013524815779546288, "submonoid": 0.014671209726394593, "exists an element": 0.015291745475168253, "generated": 0.02236993774120863, "element": 0.05548855105604946, "sets": 0.09832504329014995, "commutative": 0.09832504329014995, "monoid": 0.09832504329014995, "iff": 0.09832504329014995, "exists": 0.13571655445724842, "sum": 0.13571655445724842}}, {"docstring": " The norm of the sum of two vectors equals the norm of their difference if and only if the angle between them is \u03c0/2.\n", "keywords": {"equals the norm": 0.009674308380218665, "vectors equals": 0.013095151449018445, "norm": 0.04213844269123149, "sum": 0.11369206228658875, "vectors": 0.11369206228658875, "equals": 0.11369206228658875, "difference": 0.11369206228658875, "angle": 0.11369206228658875}}, {"docstring": "The (open) thickening is an open set.\n", "keywords": {"open set": 0.035552851931764155, "thickening": 0.11984314898676356, "set": 0.11984314898676356, "open": 0.14323823713631006}}, {"docstring": "The reduction step does not change the product vector.\n", "keywords": {"product vector": 0.015380821171891606, "reduction step": 0.02570861714399338, "change the product": 0.02570861714399338, "vector": 0.09568045026443411, "reduction": 0.15831692877998726, "step": 0.15831692877998726, "change": 0.15831692877998726, "product": 0.15831692877998726}}, {"docstring": "A set is contained in its `span_points`.\n", "keywords": {"span": 0.04491197687864554, "points": 0.04491197687864554, "set is contained": 0.09700399286574239, "set": 0.29736558256021506, "contained": 0.29736558256021506}}, {"docstring": "**Alias** of the forward direction of order.succ_lt_succ_iff`.\n", "keywords": {"direction of order.succ": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "succ": 0.04491197687864554, "iff": 0.04491197687864554, "order.succ": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "**Alias** of filter.tendsto_at_top_at_top_of_monotone`.\n", "keywords": {"top": 0.020602899695743707, "Alias": 0.03498516242744211, "monotone": 0.055708263664958506, "filter.tendsto": 0.11718348279991213}}, {"docstring": "**Alias** of the reverse direction of mdifferentiable_iff_differentiable`.\n", "keywords": {"direction of mdifferentiable": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "differentiable": 0.04491197687864554, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "An inequality involving `2`.\n", "keywords": {"inequality involving": 0.04940384002065631, "involving": 0.15831692877998726, "inequality": 0.29736558256021506}}, {"docstring": "Variant of Hahn-Banach, eliminating the hypothesis that `x` be nonzero, and choosing    the dual element arbitrarily when `x = 0`.\n", "keywords": {"dual element arbitrarily": 0.0042542192213185686, "Variant of Hahn-Banach": 0.009239332327148086, "eliminating the hypothesis": 0.015380821171891606, "choosing the dual": 0.02570861714399338, "dual element": 0.02570861714399338, "element arbitrarily": 0.02570861714399338, "Variant": 0.09568045026443411, "Hahn-Banach": 0.09568045026443411, "eliminating": 0.09568045026443411, "nonzero": 0.09568045026443411, "hypothesis": 0.15831692877998726, "choosing": 0.15831692877998726, "dual": 0.15831692877998726, "element": 0.15831692877998726, "arbitrarily": 0.15831692877998726}}, {"docstring": "The product of `M`-regular elements is `M`-regular.\n", "keywords": {"regular elements": 0.03040783387545046, "regular": 0.07571113878390312, "product": 0.19488865479360015, "elements": 0.19488865479360015}}, {"docstring": "A block matrix `A.from_blocks B C D` is symmetric,    if `A` and `D` are symmetric and `B\u1d40 = C`.\n", "keywords": {"A.from": 0.03625524040669144, "block matrix": 0.0381667238781621, "matrix": 0.12363091320521931, "symmetric": 0.14868279128010753, "block": 0.29736558256021506, "blocks": 0.29736558256021506}}, {"docstring": " If `m` and `m'` are finite products in `M`, then so is `m * m'`, provided that `m'` is obtained from a subsequence of `M` starting sufficiently late.\n", "keywords": {"starting sufficiently late": 0.0002442446479797515, "starting sufficiently": 0.004191105078215276, "sufficiently late": 0.004191105078215276, "finite products": 0.005229473243173595, "provided": 0.057864980816844346, "starting": 0.057864980816844346, "late": 0.057864980816844346, "finite": 0.07212675038589919, "products": 0.07212675038589919, "obtained": 0.07212675038589919, "subsequence": 0.07212675038589919, "sufficiently": 0.07212675038589919}}, {"docstring": "`hs.to_cone s` is the least cone that includes `s`.\n", "keywords": {"hs.to": 0.05706283858652404, "cone that includes": 0.07902625570811261, "includes": 0.11984314898676356, "cone": 0.14323823713631006}}, {"docstring": " The `n`-th Fr\u00e9chet derivative applied to a vector `(m 0, ..., m (n-1))` is the derivative multiplied by the product of the `m i`s.\n", "keywords": {"Fr\u00e9chet derivative applied": 0.001037518490902873, "Fr\u00e9chet derivative": 0.00893113435400529, "derivative applied": 0.016245817372079578, "derivative multiplied": 0.016245817372079578, "Fr\u00e9chet": 0.06295532167170864, "derivative": 0.07030442419566416, "vector": 0.08179429269966654, "applied": 0.11369206228658875, "multiplied": 0.11369206228658875, "product": 0.11369206228658875}}, {"docstring": "`complex.conj` is analogous to `clifford_algebra.involute`.\n", "keywords": {"complex.conj": 0.04491197687864554, "clifford": 0.04491197687864554, "algebra.involute": 0.04491197687864554, "analogous": 0.29736558256021506}}, {"docstring": " The geometric mean is less than or equal to the arithmetic mean, weighted version for `nnreal`-valued functions.\n", "keywords": {"valued functions": 0.009239332327148086, "weighted version": 0.015380821171891606, "nnreal": 0.04491197687864554, "weighted": 0.09568045026443411, "valued": 0.09568045026443411, "functions": 0.09568045026443411, "geometric": 0.15831692877998726, "equal": 0.15831692877998726, "arithmetic": 0.15831692877998726, "version": 0.15831692877998726}}, {"docstring": "**Liouville's Theorem**\n", "keywords": {"Liouville Theorem": 0.007444681613352736, "Liouville": 0.08596317751626563, "Theorem": 0.08596317751626563}}, {"docstring": " This is not a simp lemma, as it is usually preferable to use the lemmas about `C` and `X` instead.\n", "keywords": {"simp lemma": 0.05913243875864445, "simp": 0.19488865479360015, "preferable": 0.19488865479360015, "lemma": 0.28647647427262013, "lemmas": 0.28647647427262013}}, {"docstring": " If `f` has a formal Taylor series `p` up to order `1` on `{x} \u222a s`, where `s` is a convex set, then `f` is Lipschitz in a neighborhood of `x` within `s`.\n", "keywords": {"formal Taylor series": 0.0006052376660884209, "Taylor series": 0.005157590407455398, "formal Taylor": 0.007743432063478832, "convex set": 0.00899321792126428, "Taylor": 0.06650965107397505, "Lipschitz": 0.06650965107397505, "series": 0.0771485953923296, "order": 0.0771485953923296, "set": 0.0771485953923296, "formal": 0.1155310835876123, "convex": 0.1155310835876123, "neighborhood": 0.1155310835876123}}, {"docstring": "For `n \u2260 1`, the `n`-th coefficient of `id \ud835\udd5c E` is zero, by definition.\n", "keywords": {"definition": 0.09568045026443411, "coefficient": 0.15831692877998726}}, {"docstring": "The composition operator (in the target) with a Lipschitz map is Lipschitz\n", "keywords": {"composition operator": 0.022138323509052035, "Lipschitz map": 0.024550967085429223, "map is Lipschitz": 0.05780785423552633, "Lipschitz": 0.06373601253135279, "operator": 0.11521656054299435, "target": 0.11521656054299435, "composition": 0.1879836817695587, "map": 0.1879836817695587}}, {"docstring": " The `cons` and `head`/`tail` functions are mutually inverse, unlike in the case of `list` where this only holds for nonempty lists.\n", "keywords": {"functions are mutually": 0.019943439662486344, "mutually inverse": 0.019943439662486344, "nonempty lists": 0.024398907343669427, "holds for nonempty": 0.033100028790236186, "cons": 0.051687907611449965, "head": 0.051687907611449965, "tail": 0.051687907611449965, "functions": 0.10923981997294611, "inverse": 0.10923981997294611, "unlike": 0.10923981997294611, "list": 0.13306329461249475, "lists": 0.13306329461249475, "mutually": 0.17899586521379354, "case": 0.17899586521379354, "holds": 0.17899586521379354, "nonempty": 0.17899586521379354}}, {"docstring": " If `f` and `g` are two approximate solutions of the same ODE, then the distance between them can't grow faster than exponentially. This is a simple corollary of Gr\u00f6nwall's inequality, and some people call this Gr\u00f6nwall's inequality too.  This version assumes all inequalities to be true in some time-dependent set `s t`, and assumes that the solutions never leave this set.\n", "keywords": {"faster than exponentially": 0.026068801375543467, "grow faster": 0.03574211017516329, "Gr\u00f6nwall inequality": 0.04731945108169297, "ODE": 0.06321898677802118, "approximate solutions": 0.08315258307837753, "Gr\u00f6nwall": 0.10898716760226661, "exponentially": 0.13676667940027915, "approximate": 0.1857651650374203, "distance": 0.1857651650374203, "grow": 0.1857651650374203, "faster": 0.1857651650374203, "inequality": 0.19831860453756683, "set": 0.20651386532156993, "solutions": 0.2066292653830171, "corollary of Gr\u00f6nwall": 0.21086255739028725, "call this Gr\u00f6nwall": 0.21086255739028725, "simple corollary": 0.24290617143040935, "people call": 0.24290617143040935, "assumes": 0.277871323378317, "time-dependent set": 0.284219438637742}}, {"docstring": "Every nonempty `word M` can be constructed as a `neword M i j`\n", "keywords": {"nonempty": 0.09568045026443411, "word": 0.09568045026443411, "neword": 0.09568045026443411, "constructed": 0.15831692877998726}}, {"docstring": "Unbundled bounded linear functions are `C^\u221e`.\n", "keywords": {"Unbundled bounded linear": 0.01655915082773619, "bounded linear functions": 0.03339840940482845, "Unbundled bounded": 0.04940384002065631, "bounded linear": 0.09700399286574239, "linear functions": 0.09700399286574239, "Unbundled": 0.15831692877998726, "bounded": 0.29736558256021506, "linear": 0.29736558256021506, "functions": 0.29736558256021506}}, {"docstring": " The pigeonhole principle for finitely many pigeons counted by weight, strict inequality version: if the total weight of a finite set of pigeons is less than `n \u2022 b`, they are sorted into some pigeonholes, and for all but `n` pigeonholes the total weight of the pigeons there is nonnegative, then for at least one of these `n` pigeonholes, the total weight of the pigeons in this pigeonhole is less than `b`.\n", "keywords": {"strict inequality version": 0.000928206860611251, "total weight": 0.0024968522309944496, "strict inequality": 0.010229639498741843, "inequality version": 0.010229639498741843, "principle for finitely": 0.013042053232078316, "finite set": 0.013042053232078316, "pigeons counted": 0.01914313673835651, "weight": 0.023193127902509287, "pigeonhole principle": 0.02428489518359315, "total": 0.0267136075944607, "pigeons": 0.04138649795873222, "counted by weight": 0.04769148522623145, "pigeonholes": 0.0696522199981193, "pigeonholes the total": 0.07514354518848228, "finitely many pigeons": 0.07709257120127673, "set of pigeons": 0.07709257120127673, "strict": 0.0892444003106389, "version": 0.0892444003106389, "nonnegative": 0.0892444003106389, "principle": 0.11346430235859237}}, {"docstring": "Shows that $(e^{X})^k = e^{kX}$.\n", "keywords": {"Shows": 0.09568045026443411}}, {"docstring": " If a function is differentiable, and has two derivatives at `x`, then the second derivative is symmetric.\n", "keywords": {"function is differentiable": 0.022885248721446715, "derivative is symmetric": 0.07553762682862881, "differentiable": 0.11718348279991213, "symmetric": 0.11718348279991213, "function": 0.19092478917347616, "derivatives": 0.27891038992107275}}, {"docstring": "If `u` is a solution to `E` and `init` designates its first `E.order` values,  then `u = E.mk_sol init`. This proves that `E.mk_sol init` is the only solution  of `E` whose first `E.order` values are given by `init`.\n", "keywords": {"sol init": 0.015737234841863085, "E.order": 0.03646283959572001, "E.mk": 0.03646283959572001, "init": 0.04410310413561109, "sol": 0.08648500075195187, "designates": 0.1486240933692325, "solution": 0.17435486921900026, "proves": 0.4661138318356935}}, {"docstring": "If \u2220ABC = \u03c0, then (dist A C) = (dist A B) + (dist B C).\n", "keywords": {"dist": 0.038510361195870764, "ABC": 0.03874456518394108}}, {"docstring": " For maps between vector spaces, `mdifferentiable_within_at` and `fdifferentiable_within_at` coincide\n", "keywords": {"vector spaces": 0.015380821171891606, "maps between vector": 0.02570861714399338, "mdifferentiable": 0.04491197687864554, "coincide": 0.04491197687864554, "spaces": 0.09568045026443411, "maps": 0.15831692877998726, "vector": 0.15831692877998726}}, {"docstring": "Moving to the opposite monoid commutes with taking powers.\n", "keywords": {"opposite monoid commutes": 0.03339840940482845, "taking powers": 0.04940384002065631, "opposite monoid": 0.09700399286574239, "monoid commutes": 0.09700399286574239, "commutes with taking": 0.09700399286574239, "Moving": 0.15831692877998726, "powers": 0.15831692877998726, "opposite": 0.29736558256021506, "monoid": 0.29736558256021506, "commutes": 0.29736558256021506, "taking": 0.29736558256021506}}, {"docstring": "If the product of `f i` over `i \u2208 s` is not equal to `0`, then there is some `x \u2208 s` such that `f x \u2260 0`.\n", "keywords": {"product": 0.15831692877998726, "equal": 0.15831692877998726}}, {"docstring": "`opow b` and `log b` (almost) form a Galois connection.\n", "keywords": {"form a Galois": 0.008293207122436794, "Galois connection": 0.008293207122436794, "Galois": 0.08596317751626563, "opow": 0.09568045026443411, "log": 0.09568045026443411, "form": 0.09568045026443411, "connection": 0.09568045026443411}}, {"docstring": "The product of `f` over `insert a s` is the same as the product over `s`, as long as `f a = 1`.\n", "keywords": {"product": 0.07571113878390312, "insert": 0.09713402394201612, "long": 0.14390902704051098}}, {"docstring": " `fin` as a map from `\u2115` to `Type` is injective. Note that since this is a statement about equality of types, using it should be avoided if possible.\n", "keywords": {"fin": 0.07341787287626325, "injective": 0.1513046335336394, "Type": 0.20226633569428903, "types": 0.20226633569428903, "equality of types": 0.22576999812023454, "map": 0.24066430701107397, "statement about equality": 0.3784658464863935, "Note": 0.3824015048530132, "statement": 0.5239807616855658, "equality": 0.5239807616855658, "avoided": 0.5239807616855658}}, {"docstring": " If a function `f : \u03b1 \u2192 \u03b2` is such that the level sets `{f < p}` and `{q < f}` have measurable supersets which are disjoint up to measure zero when `p < q`, then `f` is almost-everywhere measurable. It is even enough to have this for `p` and `q` in a countable dense set.\n", "keywords": {"measurable supersets": 0.028818579880008327, "almost-everywhere measurable": 0.028818579880008327, "level sets": 0.02998883673187236, "countable dense set": 0.03798387852780506, "dense set": 0.07836339000825342, "measurable": 0.0884660069427631, "function": 0.11553108358761233, "level": 0.15831692877998726, "supersets": 0.15831692877998726, "disjoint": 0.15831692877998726, "measure": 0.15831692877998726, "almost-everywhere": 0.15831692877998726, "sets": 0.1839076291568319, "set": 0.1839076291568319, "countable dense": 0.18502185387940306, "countable": 0.3951375787241905, "dense": 0.3951375787241905}}, {"docstring": "In a commutative ring, make `simp` prefer leaving the order unchanged.\n", "keywords": {"make": 0.04491197687864554, "simp": 0.04491197687864554, "commutative ring": 0.04940384002065631, "prefer leaving": 0.04940384002065631, "order unchanged": 0.04940384002065631, "leaving the order": 0.09700399286574239, "ring": 0.15831692877998726, "prefer": 0.15831692877998726, "unchanged": 0.15831692877998726, "commutative": 0.29736558256021506, "leaving": 0.29736558256021506, "order": 0.29736558256021506}}, {"docstring": "Torsion by a set is torsion by the ideal generated by it.\n", "keywords": {"ideal generated": 0.020225813225353943, "set is torsion": 0.05055947907065001, "Torsion": 0.07334489383741181, "set": 0.1408007092310104, "ideal": 0.1408007092310104, "generated": 0.1408007092310104}}, {"docstring": "If a normed space is non-trivial, then the norm of the identity equals `1`.\n", "keywords": {"space is non-trivial": 0.015380821171891606, "identity equals": 0.015380821171891606, "normed space": 0.02570861714399338, "non-trivial": 0.09568045026443411, "equals": 0.09568045026443411, "normed": 0.15831692877998726, "space": 0.15831692877998726, "norm": 0.15831692877998726, "identity": 0.15831692877998726}}, {"docstring": " If `K` is an uncountable algebraically closed field, then its cardinality is the same as that of a transcendence basis.\n", "keywords": {"algebraically closed field": 0.0025258761156662004, "uncountable algebraically closed": 0.0042542192213185686, "closed field": 0.015380821171891606, "transcendence basis": 0.015380821171891606, "uncountable algebraically": 0.02570861714399338, "algebraically closed": 0.02570861714399338, "field": 0.09568045026443411, "basis": 0.09568045026443411, "uncountable": 0.15831692877998726, "algebraically": 0.15831692877998726, "closed": 0.15831692877998726, "cardinality": 0.15831692877998726, "transcendence": 0.15831692877998726}}, {"docstring": "The kernel of the natural homomorphism from a monoid to its quotient by a congruence    relation `c` equals `c`.\n", "keywords": {"congruence relation": 0.015380821171891606, "natural homomorphism": 0.02570861714399338, "equals": 0.04491197687864554, "relation": 0.09568045026443411, "kernel": 0.15831692877998726, "natural": 0.15831692877998726, "homomorphism": 0.15831692877998726, "monoid": 0.15831692877998726, "quotient": 0.15831692877998726, "congruence": 0.15831692877998726}}, {"docstring": "Binary strict **rearrangement inequality**.\n", "keywords": {"Binary strict": 0.02570861714399338, "rearrangement inequality": 0.02570861714399338, "Binary": 0.15831692877998726, "strict": 0.15831692877998726, "rearrangement": 0.15831692877998726, "inequality": 0.15831692877998726}}, {"docstring": "An outer measure constructed using `outer_measure.mk_metric'` is a metric outer measure.\n", "keywords": {"outer measure constructed": 0.006399140694712682, "metric outer measure": 0.009235271677191402, "outer measure": 0.019214287931532, "measure constructed": 0.028278856603798964, "metric outer": 0.04974843482415945, "measure.mk": 0.06326960397839644, "outer": 0.07086081501061242, "measure": 0.08704027729228296, "metric": 0.11146455649386641, "constructed": 0.15797947932871687}}, {"docstring": "The negative of a `C^n`function is `C^n`.\n", "keywords": {"function": 0.09568045026443411, "negative": 0.15831692877998726}}, {"docstring": " For GCD domains, the minimal polynomial divides any primitive polynomial that has the integral element as root.\n", "keywords": {"minimal polynomial divides": 0.009594358938760443, "GCD domains": 0.010309039981220859, "element as root": 0.020435055290363522, "divides any primitive": 0.033892441937102495, "integral element": 0.033892441937102495, "minimal polynomial": 0.04949487345881267, "polynomial divides": 0.04949487345881267, "primitive polynomial": 0.04949487345881267, "GCD": 0.09225444226215379, "domains": 0.11060549338282699, "root": 0.11060549338282699, "polynomial": 0.13023752997463905, "minimal": 0.18105634546484617, "divides": 0.18105634546484617, "primitive": 0.18105634546484617, "integral": 0.18105634546484617, "element": 0.18105634546484617}}, {"docstring": "Composing an alternating map with the identity linear map in each argument.\n", "keywords": {"identity linear map": 0.010494743012823167, "Composing an alternating": 0.021567786782198985, "identity linear": 0.035715520099333646, "alternating map": 0.05259515133015473, "linear map": 0.05259515133015473, "Composing": 0.11369206228658875, "argument": 0.11369206228658875, "map": 0.13453835116331675, "alternating": 0.18569843656348187, "identity": 0.18569843656348187, "linear": 0.18569843656348187}}, {"docstring": "The composition of a `C^n` function on a domain with a `C^n` function is `C^n`.\n", "keywords": {"function": 0.055127829619426576, "composition": 0.14390902704051098, "domain": 0.14390902704051098}}, {"docstring": " Rewriting equality in the dependent type `\u03a3 (c : composition n), \u03a0 (i : fin c.length), composition (c.blocks_fun i)` in non-dependent terms with lists, requiring that the lists of blocks coincide.\n", "keywords": {"fin c.length": 0.012689511504896014, "Rewriting equality": 0.020921027161117343, "dependent type": 0.020921027161117343, "blocks coincide": 0.020921027161117343, "non-dependent terms": 0.03467504983336206, "c.blocks": 0.05305011591020645, "composition": 0.06880581048934313, "terms with lists": 0.11142126287965813, "lists of blocks": 0.11142126287965813, "Rewriting": 0.11193974053503682, "type": 0.11193974053503682, "fin": 0.11193974053503682, "c.length": 0.11193974053503682, "fun": 0.11193974053503682, "requiring": 0.11193974053503682, "coincide": 0.11193974053503682, "lists": 0.13209142901998333, "equality": 0.1830655221354772, "dependent": 0.1830655221354772, "non-dependent": 0.1830655221354772}}, {"docstring": "A pair (i, j) is contained in the antidiagonal of `n` if and only if `i + j = n`.\n", "keywords": {"pair": 0.09568045026443411, "contained": 0.15831692877998726, "antidiagonal": 0.15831692877998726}}, {"docstring": "The function `\u03bb x, x\u207b\u00b9` is integrable on `a..b` if and only if `a = b` or `0 \u2209 [a, b]`.\n", "keywords": {"function": 0.0771485953923296, "integrable": 0.1155310835876123}}, {"docstring": " In the case of the manifold structure on a vector space, the extended charts are just the identity.\n", "keywords": {"vector space": 0.0065920978564317735, "manifold structure": 0.009239332327148086, "extended charts": 0.009239332327148086, "space": 0.06844581806138879, "identity": 0.06844581806138879, "case": 0.09568045026443411, "manifold": 0.09568045026443411, "structure": 0.09568045026443411, "vector": 0.09568045026443411, "extended": 0.09568045026443411, "charts": 0.09568045026443411}}, {"docstring": " Note we use `\u2191i = 0` instead of `i = 0` as `fin 0` has no `0`. This means that we cannot state this with `pi.single` as we did with `matrix.circulant_single`.\n", "keywords": {"fin": 0.05899937629682816, "Note": 0.08922538916412363, "pi.single": 0.17881754828257995, "matrix.circulant": 0.17881754828257995, "single": 0.17881754828257995, "state": 0.32883716426354986}}, {"docstring": "If `M` is nondegenerate and `v \u2260 0`, then there is some `w` such that `w \u2b1d M \u2b1d v \u2260 0`.\n", "keywords": {"nondegenerate": 0.15831692877998726}}, {"docstring": "`affine_span` is monotone.\n", "keywords": {"affine": 0.04491197687864554, "span": 0.04491197687864554, "monotone": 0.15831692877998726}}, {"docstring": "**Alias** of pow_two`.\n", "keywords": {"Alias": 0.030396371632413578, "pow": 0.15831692877998726}}, {"docstring": " If `E` is a vector space over a division rings `R` and has a monoid action by `\u03b1`, then that action commutes by scalar multiplication of inverses of natural numbers in `R`.\n", "keywords": {"division rings": 0.011631263860918884, "vector space": 0.017416869738890953, "commutes by scalar": 0.017416869738890953, "scalar multiplication": 0.017416869738890953, "multiplication of inverses": 0.017416869738890953, "inverses of natural": 0.017416869738890953, "natural numbers": 0.017416869738890953, "monoid action": 0.022975231256290595, "action commutes": 0.022975231256290595, "action": 0.08582803953788926, "rings": 0.0878757573221198, "vector": 0.13083850849172096, "space": 0.13083850849172096, "division": 0.13083850849172096, "monoid": 0.13083850849172096, "commutes": 0.13083850849172096, "scalar": 0.13083850849172096, "multiplication": 0.13083850849172096, "inverses": 0.13083850849172096, "natural": 0.13083850849172096}}, {"docstring": "**Alias** of the forward direction of linear_independent_subtype_range`.\n", "keywords": {"direction of linear": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "independent": 0.04491197687864554, "subtype": 0.04491197687864554, "range": 0.04491197687864554, "linear": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " If `f` is a function to a regular space `Y` which has a limit within `A` at any point of a set `B \u2286 closure A`, then `extend_from A f` is continuous on `B`.\n", "keywords": {"regular space": 0.004191105078215276, "extend": 0.04491197687864554, "space": 0.057864980816844346, "set": 0.057864980816844346, "closure": 0.057864980816844346, "function": 0.07212675038589919, "regular": 0.07212675038589919, "limit": 0.07212675038589919, "point": 0.07212675038589919, "continuous": 0.07212675038589919}}, {"docstring": "A dependent version of `submodule.span_induction`.\n", "keywords": {"submodule.span": 0.04491197687864554, "induction": 0.04491197687864554, "dependent version": 0.09700399286574239, "dependent": 0.29736558256021506, "version": 0.29736558256021506}}, {"docstring": "Every neighbourhood of the origin is absorbent.\n", "keywords": {"origin is absorbent": 0.04940384002065631, "absorbent": 0.15831692877998726, "neighbourhood": 0.29736558256021506, "origin": 0.29736558256021506}}, {"docstring": " Given a measure `\u03bc`, signed measures `s` and `t`, and a function `f` such that `t` is mutually singular with respect to `\u03bc` and `s = t + \u03bc.with_density\u1d65 f`, we have `t = singular_part s \u03bc`, i.e. `t` is the singular part of the Lebesgue decomposition between `s` and `\u03bc`.\n", "keywords": {"Lebesgue decomposition": 0.006593505374262518, "signed measures": 0.007054836972878893, "mutually singular": 0.017191494032889176, "singular part": 0.020852867514424153, "singular": 0.05142776313041779, "singular with respect": 0.05855566963515207, "\u03bc.with": 0.059059025484270174, "Lebesgue": 0.05979573784673322, "part": 0.06619935312062596, "signed": 0.08289099372069944, "function": 0.08289099372069944, "density\u1d65": 0.08289099372069944, "measure": 0.08451358342194344, "measures": 0.08451358342194344, "mutually": 0.10954486168250284, "respect": 0.10954486168250284, "decomposition": 0.10954486168250284}}, {"docstring": "Bilinear functions are `C^\u221e`.\n", "keywords": {"Bilinear functions": 0.04940384002065631, "Bilinear": 0.15831692877998726, "functions": 0.29736558256021506}}, {"docstring": "The map sending an additive congruence relation to its underlying binary relation is injective.\n", "keywords": {"additive congruence relation": 0.009836841595559516, "underlying binary relation": 0.009836841595559516, "map sending": 0.03439110359613085, "sending an additive": 0.03439110359613085, "additive congruence": 0.03439110359613085, "underlying binary": 0.03439110359613085, "congruence relation": 0.05033870131288873, "binary relation": 0.05033870131288873, "relation is injective": 0.06831905985192867, "injective": 0.11145728654016383, "relation": 0.1314201551237121, "map": 0.1823394614884183, "sending": 0.1823394614884183, "additive": 0.1823394614884183, "congruence": 0.1823394614884183, "underlying": 0.1823394614884183, "binary": 0.1823394614884183}}, {"docstring": "`has_colimits_of_size_shrink.{v u} C` tries to obtain `has_colimits_of_size.{v u} C` from some other `has_colimits_of_size C`.\n", "keywords": {"colimits": 0.0133739915640319, "shrink.": 0.06225387256995397, "size.": 0.06225387256995397, "size": 0.06236197769706054, "obtain": 0.10556226050272582}}, {"docstring": " At every point, the auxiliary function `f_aux n` has a derivative which is equal to `f_aux (n+1)`.\n", "keywords": {"auxiliary function": 0.021567786782198985, "aux": 0.07030442419566416, "point": 0.11369206228658875, "function": 0.11369206228658875, "auxiliary": 0.18569843656348187, "derivative": 0.18569843656348187, "equal": 0.18569843656348187}}, {"docstring": " If `R` is of characteristic `p` and `\u00acp \u2223 n`, then `cyclotomic (n * p) R = (cyclotomic n R) ^ (p - 1)`.\n", "keywords": {"cyclotomic": 0.04784022513221706, "characteristic": 0.08922538916412363}}, {"docstring": "The difference of two `C^n` functions at a point is `C^n` at this point.\n", "keywords": {"functions": 0.11984314898676356, "point": 0.14323823713631006, "difference": 0.19488865479360015}}, {"docstring": "Second case of the inductive step: assuming that `\u2203 (s : finset \u03b9), s \u2260 univ \u2192 s.card = (s.bUnion t).card` and that the statement of **Hall's Marriage Theorem** is true for all `\u03b9'` of cardinality \u2264 `n`, then it is true for `\u03b9` of cardinality `n + 1`.\n", "keywords": {"Hall Marriage Theorem": 0.00014361561925920713, "Hall Marriage": 0.0029909151721391205, "Marriage Theorem": 0.0029909151721391205, "inductive step": 0.009091829896311552, "cardinality": 0.02933742015645326, "true": 0.041182674803481534, "Hall": 0.047777454061188135, "Theorem": 0.047777454061188135, "univ": 0.05305011591020645, "s.card": 0.05305011591020645, "card": 0.05305011591020645, "Marriage": 0.06241429839313376, "step": 0.0804889599901522, "assuming": 0.0804889599901522, "finset": 0.0804889599901522, "s.bUnion": 0.0804889599901522, "case": 0.11193974053503682, "inductive": 0.11193974053503682, "statement": 0.11193974053503682}}, {"docstring": "**Alias** of the forward direction of left.one_le_inv_iff`.\n", "keywords": {"direction of left.one": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "inv": 0.04491197687864554, "iff": 0.04491197687864554, "left.one": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " If two sets `s` and `t` are included in a set `u`, and `\u03bc s + \u03bc t > \u03bc u`, then `s` intersects `t`. Version assuming that `s` is measurable.\n", "keywords": {"intersects": 0.07562090863435546, "sets": 0.10523229996605092, "set": 0.10523229996605092, "Version assuming": 0.13623163683076128, "included": 0.1554527012770092, "Version": 0.3074506896868104, "measurable": 0.3074506896868104, "assuming": 0.38997397536695666}}, {"docstring": " While `fin.coe_order_iso_apply` is a more general case of this, we mark this `simp` anyway as it is eligible for `dsimp`.\n", "keywords": {"general case": 0.02570861714399338, "fin.coe": 0.04491197687864554, "order": 0.04491197687864554, "iso": 0.04491197687864554, "apply": 0.04491197687864554, "simp": 0.04491197687864554, "dsimp": 0.04491197687864554, "general": 0.15831692877998726, "case": 0.15831692877998726, "mark": 0.15831692877998726, "eligible": 0.15831692877998726}}, {"docstring": " If a function `f` is strictly monotone on a right neighborhood of `a` and the image of this neighborhood under `f` includes `Ioi (f a)`, then `f` is continuous at `a` from the right.\n", "keywords": {"strictly monotone": 0.009798670017578762, "Ioi": 0.03381806651421549, "includes": 0.0528063806271324, "neighborhood": 0.056879379917647056, "function": 0.07431450488929812, "strictly": 0.0985067904415808, "monotone": 0.0985067904415808, "image": 0.0985067904415808, "continuous": 0.0985067904415808}}, {"docstring": "A subring contains the ring's 0.\n", "keywords": {"ring": 0.15831692877998726, "subring": 0.29736558256021506}}, {"docstring": "**Alias** of dvd.intro_left`.\n", "keywords": {"Alias": 0.030396371632413578, "left": 0.04491197687864554, "dvd.intro": 0.15831692877998726}}, {"docstring": "One semiconjugates any element to itself.\n", "keywords": {"semiconjugates any element": 0.09700399286574239, "semiconjugates": 0.29736558256021506, "element": 0.29736558256021506}}, {"docstring": "An auxiliary lemma for `complex.norm_dslope_le_div_of_maps_to_ball`.\n", "keywords": {"complex.norm": 0.04491197687864554, "dslope": 0.04491197687864554, "div": 0.04491197687864554, "maps": 0.04491197687864554, "ball": 0.04491197687864554, "auxiliary lemma": 0.09700399286574239, "auxiliary": 0.29736558256021506, "lemma": 0.29736558256021506}}, {"docstring": "Assumes right covariance.\n", "keywords": {"Assumes right covariance": 0.02570861714399338, "Assumes": 0.15831692877998726, "covariance": 0.15831692877998726}}, {"docstring": "Chain rule for formal derivative of polynomials.\n", "keywords": {"Chain rule": 0.04940384002065631, "derivative of polynomials": 0.04940384002065631, "rule for formal": 0.09700399286574239, "formal derivative": 0.09700399286574239, "Chain": 0.15831692877998726, "polynomials": 0.15831692877998726, "rule": 0.29736558256021506, "formal": 0.29736558256021506, "derivative": 0.29736558256021506}}, {"docstring": "**Alias** of the forward direction of inseparable_iff_nhds_eq`.\n", "keywords": {"direction of inseparable": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "nhds": 0.04491197687864554, "inseparable": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "Shortcut lemma for `matrix.to_lin_mul` and `linear_map.comp_apply`.\n", "keywords": {"matrix.to": 0.04491197687864554, "lin": 0.04491197687864554, "mul": 0.04491197687864554, "linear": 0.04491197687864554, "map.comp": 0.04491197687864554, "apply": 0.04491197687864554, "Shortcut lemma": 0.04940384002065631, "Shortcut": 0.15831692877998726, "lemma": 0.29736558256021506}}, {"docstring": " To prove a property of a finite product, it suffices to prove that the property is multiplicative and holds on factors.\n", "keywords": {"finite product": 0.022885248721446715, "holds on factors": 0.022885248721446715, "multiplicative and holds": 0.037831312533597124, "suffices to prove": 0.04212793185246166, "prove": 0.10586606907408062, "product": 0.11718348279991213, "factors": 0.11718348279991213, "property is multiplicative": 0.12194096740933039, "property": 0.13945519496053638, "finite": 0.19092478917347616, "suffices": 0.19092478917347616, "multiplicative": 0.19092478917347616, "holds": 0.19092478917347616, "prove a property": 0.20081151690422566}}, {"docstring": " The sum of two lower semicontinuous functions is lower semicontinuous. Formulated with an explicit continuity assumption on addition, for application to `ereal`. The unprimed version of the lemma uses `[has_continuous_add]`.\n", "keywords": {"lower semicontinuous functions": 0.007327296516767814, "lower semicontinuous": 0.016851204808897166, "semicontinuous functions": 0.03821554584844725, "functions is lower": 0.08667762295794612, "lower": 0.09028232117950413, "semicontinuous": 0.09028232117950413, "explicit continuity assumption": 0.1917383839555026, "sum": 0.2038542769622493, "functions": 0.2038542769622493, "assumption on addition": 0.20587493759307618, "ereal": 0.2425057621221154, "explicit continuity": 0.28461618066910277, "continuity assumption": 0.28461618066910277, "continuous": 0.31807004650910337, "add": 0.31807004650910337, "Formulated": 0.36270881646612724, "addition": 0.36270881646612724, "unprimed version": 0.46742777496856974, "explicit": 0.47069880880967624, "continuity": 0.47069880880967624}}, {"docstring": "A variant of `module.ext` that's convenient for term-mode.\n", "keywords": {"module.ext": 0.04491197687864554, "convenient for term-mode": 0.04940384002065631, "term-mode": 0.15831692877998726, "variant": 0.29736558256021506, "convenient": 0.29736558256021506}}, {"docstring": "**Alias** of decidable.eq_or_lt_of_le`.\n", "keywords": {"Alias": 0.030396371632413578, "decidable.eq": 0.09568045026443411}}, {"docstring": " The `add_submonoid` generated by an element of an `add_monoid` equals the set of natural number multiples of the element.\n", "keywords": {"natural number multiples": 0.0028031323823187906, "equals the set": 0.013089923375762187, "set of natural": 0.019557279302732804, "natural number": 0.019557279302732804, "number multiples": 0.019557279302732804, "add": 0.02006098734604785, "submonoid": 0.054709255964732355, "monoid": 0.054709255964732355, "element": 0.09269208833952335, "generated": 0.09329120537733218, "equals": 0.09329120537733218, "set": 0.1384995633470844, "natural": 0.1384995633470844, "number": 0.1384995633470844, "multiples": 0.1384995633470844}}, {"docstring": "Assumes left covariance.\n", "keywords": {"Assumes left covariance": 0.008321268142839145, "Assumes left": 0.04940384002065631, "left covariance": 0.04940384002065631, "Assumes": 0.15831692877998726, "covariance": 0.15831692877998726, "left": 0.29736558256021506}}, {"docstring": "An orthonormal set is linearly independent.\n", "keywords": {"linearly independent": 0.04940384002065631, "orthonormal set": 0.09700399286574239, "set is linearly": 0.09700399286574239, "independent": 0.15831692877998726, "orthonormal": 0.29736558256021506, "set": 0.29736558256021506, "linearly": 0.29736558256021506}}, {"docstring": " Composing an indepedent indexed family with an order isomorphism on the elements results in another indepedendent indexed family.\n", "keywords": {"indepedent indexed family": 0.00928043415947468, "indepedendent indexed family": 0.00928043415947468, "Composing an indepedent": 0.022484625344159365, "indexed family": 0.02289946390635722, "order isomorphism": 0.03718843747800602, "elements results": 0.03718843747800602, "indepedent indexed": 0.0412608560367292, "indepedendent indexed": 0.0412608560367292, "indexed": 0.10463417723629108, "family": 0.10463417723629108, "Composing": 0.1161324896811994, "indepedent": 0.18935428276389019, "order": 0.18935428276389019, "isomorphism": 0.18935428276389019, "elements": 0.18935428276389019, "results": 0.18935428276389019, "indepedendent": 0.18935428276389019}}, {"docstring": "If `x` is in the base field `K`, then the trace is `[L : K] * x`.\n", "keywords": {"base field": 0.015380821171891606, "field": 0.09568045026443411, "base": 0.15831692877998726, "trace": 0.15831692877998726}}, {"docstring": "The nilpotency class of a product is the max of the nilpotency classes of the factors\n", "keywords": {"nilpotency class": 0.012818701037910368, "nilpotency classes": 0.012818701037910368, "nilpotency": 0.05566114900812666, "factors": 0.08179429269966654, "class": 0.11369206228658875, "product": 0.11369206228658875, "max": 0.11369206228658875, "classes": 0.11369206228658875}}, {"docstring": " **Strict inequality case of the Rearrangement Inequality**: Pointwise scalar multiplication of `f` and `g`, which antivary together, is strictly decreased by a permutation if and only if `f` and `g \u2218 \u03c3` do not antivary together. Stated by permuting the entries of `g`.\n", "keywords": {"Strict inequality case": 0.0016376672505466826, "Pointwise scalar multiplication": 0.002200769509641363, "Strict inequality": 0.00866958983340238, "Pointwise scalar": 0.011561263824295709, "Rearrangement Inequality": 0.011712586350570936, "inequality case": 0.025703411153376713, "scalar multiplication": 0.03447074540170908, "strictly decreased": 0.03447074540170908, "Strict": 0.06261045944724858, "Pointwise": 0.06261045944724858, "inequality": 0.0686392828174212, "Rearrangement": 0.08433210096311344, "antivary": 0.08488187343535045, "Stated by permuting": 0.16944032286186908, "case": 0.18254344008272147, "scalar": 0.18254344008272147, "multiplication": 0.18254344008272147, "strictly": 0.18254344008272147, "decreased": 0.18254344008272147, "permutation": 0.18254344008272147}}, {"docstring": " Minkowski inequality: the `L_p` seminorm of the sum of two vectors is less than or equal to the sum of the `L_p`-seminorms of the summands. A version for `\u211d\u22650\u221e` valued nonnegative functions.\n", "keywords": {"Minkowski inequality": 0.011440508155383859, "valued nonnegative functions": 0.04022814553430709, "sum": 0.0470181469610055, "seminorm": 0.0708556241860872, "seminorms": 0.0708556241860872, "Minkowski": 0.10635367123359185, "inequality": 0.10635367123359185, "summands": 0.10635367123359185, "valued nonnegative": 0.11768545655046211, "nonnegative functions": 0.11768545655046211, "vectors": 0.139405236860154, "equal": 0.139405236860154, "valued": 0.2924525188766874, "functions": 0.2924525188766874, "version": 0.3600375770318291, "nonnegative": 0.3600375770318291}}, {"docstring": "Express `dist` in terms of `nndist`\n", "keywords": {"Express": 0.04491197687864554, "dist": 0.04491197687864554, "nndist": 0.04491197687864554, "terms": 0.29736558256021506}}, {"docstring": " The set of points which are isolated on the right is countable when the space is second-countable.\n", "keywords": {"space is second-countable": 0.00899321792126428, "set of points": 0.013527995261974615, "second-countable": 0.0771485953923296, "set": 0.1155310835876123, "points": 0.1155310835876123, "isolated": 0.1155310835876123, "countable": 0.1155310835876123, "space": 0.1155310835876123}}, {"docstring": "The `add_submonoid` generated by a set includes the set.\n", "keywords": {"set includes": 0.05417025203414716, "add": 0.054709255964732355, "submonoid": 0.054709255964732355, "generated": 0.11521656054299435, "includes the set": 0.11793310824193863, "set": 0.13667842094541144, "includes": 0.1879836817695587}}, {"docstring": "A variant of `prod_range_succ` which pulls off the first  term in the product rather than the last.\n", "keywords": {"prod": 0.04491197687864554, "range": 0.04491197687864554, "succ": 0.04491197687864554, "variant": 0.1155310835876123, "pulls": 0.1155310835876123, "term": 0.1155310835876123, "product": 0.1155310835876123}}, {"docstring": "The function `lmul_left_right : \ud835\udd5c' \u00d7 \ud835\udd5c' \u2192 (\ud835\udd5c' \u2192L[\ud835\udd5c] \ud835\udd5c')` is a bounded bilinear map.\n", "keywords": {"bounded bilinear map": 0.00045942001571077094, "bilinear map": 0.005380746843605012, "bounded bilinear": 0.00717258304785508, "lmul": 0.04491197687864554, "left": 0.04491197687864554, "function": 0.06341998722529081, "map": 0.06341998722529081, "bounded": 0.08438900089923473, "bilinear": 0.08438900089923473}}, {"docstring": " If `s` is a convex set, then `a \u2022 interior s + b \u2022 closure s \u2286 interior s` for all `0 < a`, `0 \u2264 b`, `a + b = 1`. See also `convex.combo_interior_self_subset_interior` for a weaker version.\n", "keywords": {"convex set": 0.021786084795612032, "interior": 0.035261995580054634, "set": 0.12801953565520405, "closure": 0.12801953565520405, "weaker version": 0.1605691047236775, "convex": 0.1665493561396732, "convex.combo": 0.2614994545772466, "subset": 0.2614994545772466, "version": 0.33770316900908626, "weaker": 0.40969045393250325}}, {"docstring": "The recurrence relation for the `\u0393` integral.\n", "keywords": {"recurrence relation": 0.02570861714399338, "integral": 0.04491197687864554, "recurrence": 0.15831692877998726, "relation": 0.15831692877998726}}, {"docstring": "The push-forward of an ideal `I` of `R` to `polynomial R` via inclusion is exactly the set of polynomials whose coefficients are in `I`\n", "keywords": {"set of polynomials": 0.06004269098969672, "polynomials whose coefficients": 0.06004269098969672, "ideal": 0.09202664026077896, "push-forward": 0.1367145963576765, "inclusion": 0.1367145963576765, "set": 0.1367145963576765, "coefficients": 0.1367145963576765, "polynomial": 0.18213622310077732}}, {"docstring": "**Alias** of zero_lt_two`.\n", "keywords": {"Alias": 0.030396371632413578}}, {"docstring": "**Alias** of the reverse direction of list.nodup_attach`.\n", "keywords": {"direction of list.nodup": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "attach": 0.04491197687864554, "list.nodup": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " Writing explicitly the `n+1`-th derivative as the composition of a currying linear equiv, and the derivative of the `n`-th derivative.\n", "keywords": {"currying linear equiv": 0.0014033964188006848, "Writing explicitly": 0.011105384224262597, "linear equiv": 0.011105384224262597, "currying linear": 0.015455129647434142, "derivative": 0.0531317968436764, "Writing": 0.08902894120058116, "equiv": 0.08902894120058116, "explicitly": 0.12336897526125244, "composition": 0.12336897526125244, "currying": 0.12336897526125244, "linear": 0.12336897526125244}}, {"docstring": "In a nontrivial ring, `matrix.mv_polynomial_X m m R` has non-zero determinant.\n", "keywords": {"nontrivial ring": 0.015380821171891606, "non-zero determinant": 0.015380821171891606, "matrix.mv": 0.04491197687864554, "polynomial": 0.04491197687864554, "ring": 0.09568045026443411, "determinant": 0.09568045026443411, "nontrivial": 0.15831692877998726, "non-zero": 0.15831692877998726}}, {"docstring": " The `off_diag` of `s : finset \u03b1` is sent on a finset of `sym2 \u03b1` of card `s.off_diag.card / 2`. This is because every element `\u27e6(x, y)\u27e7` of `sym2 \u03b1` not on the diagonal comes from exactly two pairs: `(x, y)` and `(y, x)`.\n", "keywords": {"diag": 0.07807632871846422, "s.off": 0.07807632871846422, "diag.card": 0.07807632871846422, "finset": 0.0896880507105299, "card": 0.11686192903066005, "element": 0.31486955834465635, "pairs": 0.31486955834465635, "diagonal": 0.39823908368262456}}, {"docstring": "A one-dimensional formal multilinear series representing the zero function is zero.\n", "keywords": {"one-dimensional formal multilinear": 0.0042542192213185686, "formal multilinear series": 0.0042542192213185686, "multilinear series representing": 0.0042542192213185686, "one-dimensional formal": 0.02570861714399338, "formal multilinear": 0.02570861714399338, "multilinear series": 0.02570861714399338, "series representing": 0.02570861714399338, "one-dimensional": 0.15831692877998726, "formal": 0.15831692877998726, "multilinear": 0.15831692877998726, "series": 0.15831692877998726, "representing": 0.15831692877998726, "function": 0.15831692877998726}}, {"docstring": "The intersection of two submonoids of a monoid `M` is a submonoid of `M`.\n", "keywords": {"monoid": 0.09713402394201612, "intersection": 0.14390902704051098, "submonoids": 0.15142227756780624, "submonoid": 0.15142227756780624}}, {"docstring": "An element is a root of its minimal polynomial.\n", "keywords": {"minimal polynomial": 0.04940384002065631, "polynomial": 0.15831692877998726, "element": 0.29736558256021506, "root": 0.29736558256021506, "minimal": 0.29736558256021506}}, {"docstring": " Given a finite set `t` and a subset `s` of `t`, the product of `f i` over `i \u2208 s` times the product of `f i` over `t \\ s` equals the product of `f i` over `i \u2208 t`.\n", "keywords": {"times the product": 0.005912198442193929, "equals the product": 0.005912198442193929, "finite set": 0.009359785613913036, "product": 0.023384735132999254, "set": 0.08377900881718926, "subset": 0.08377900881718926, "times": 0.08377900881718926, "equals": 0.08377900881718926, "finite": 0.11068395919254974}}, {"docstring": " An element of a `cancel_monoid_with_zero` fixed by left multiplication by an element other than one must be zero.\n", "keywords": {"fixed by left": 0.021567786782198985, "left multiplication": 0.035715520099333646, "cancel": 0.05393656033701752, "monoid": 0.05393656033701752, "element": 0.10179911835611566, "fixed": 0.11369206228658875, "left": 0.18569843656348187, "multiplication": 0.18569843656348187}}, {"docstring": "Uses `right` co(ntra)variant.\n", "keywords": {"ntra": 0.04491197687864554, "variant": 0.04491197687864554}}, {"docstring": " A finite dimensional space has zero `finrank` iff it is a subsingleton. This is the `finrank` version of `dim_zero_iff`.\n", "keywords": {"finite dimensional space": 0.020006203729407694, "finrank": 0.04668181625884174, "finite dimensional": 0.07004375124078006, "dimensional space": 0.07004375124078006, "iff": 0.14587031701600586, "subsingleton": 0.16205454282434614, "dim": 0.22989350183706597, "finite": 0.25584912197094006, "dimensional": 0.25584912197094006, "space": 0.25584912197094006, "version": 0.40179717860981823}}, {"docstring": "If `monoid_algebra R M` is of finite type then `M` is finitely generated.\n", "keywords": {"finitely generated": 0.015380821171891606, "finite type": 0.02570861714399338, "monoid": 0.04491197687864554, "algebra": 0.09568045026443411, "generated": 0.09568045026443411, "finite": 0.15831692877998726, "type": 0.15831692877998726, "finitely": 0.15831692877998726}}, {"docstring": "A version of `con.induction_on` for predicates which take two arguments.\n", "keywords": {"con.induction": 0.04491197687864554, "arguments": 0.15831692877998726, "version": 0.29736558256021506, "predicates": 0.29736558256021506}}, {"docstring": " The closed ball of radius `\u03b4` centered at a point of `E` is included in the closed thickening of `E`.\n", "keywords": {"ball of radius": 0.012465543599998139, "closed ball": 0.019095578361119712, "closed thickening": 0.019095578361119712, "closed": 0.069255433448279, "radius": 0.09101163530720666, "centered": 0.09101163530720666, "ball": 0.13528014248445303, "point": 0.13528014248445303, "included": 0.13528014248445303, "thickening": 0.13528014248445303}}, {"docstring": "Note that the `is_scalar_tower \u03b1 \u03b2 \u03b2` typeclass argument is usually satisfied by `algebra \u03b1 \u03b2`.\n", "keywords": {"typeclass argument": 0.00899321792126428, "scalar": 0.04491197687864554, "Note": 0.0771485953923296, "tower": 0.0771485953923296, "typeclass": 0.0771485953923296, "algebra": 0.0771485953923296, "argument": 0.1155310835876123, "satisfied": 0.1155310835876123}}, {"docstring": "If `s : set \u03b1` and `t : set \u03b2` are finite sets, then summing over `s` commutes with summing over `t`.\n", "keywords": {"commutes with summing": 0.046004492563633884, "finite sets": 0.04663496316190882, "summing": 0.08741972024424244, "commutes": 0.10752717485860083, "set": 0.1406216785841228, "finite": 0.15842879763921927, "sets": 0.2812433571682456}}, {"docstring": "Assumes right covariance. The lemma assuming left covariance is `left.add_pos`.\n", "keywords": {"Assumes right covariance": 0.15195679415702995, "Assumes": 0.1531727145735673, "left.add": 0.2182620423168793, "pos": 0.2182620423168793, "covariance": 0.23216465691767033, "assuming left covariance": 0.2636654148178027, "lemma assuming left": 0.3201847146816566, "left covariance": 0.32446011851782974, "lemma assuming": 0.38571507274593436, "assuming left": 0.38571507274593436, "lemma": 0.5275897320195265, "assuming": 0.5275897320195265, "left": 0.5275897320195265}}, {"docstring": " `s` is in the shadow of `\ud835\udc9c` iff there is an `t \u2208 \ud835\udc9c` from which we can remove one element to get `s`.\n", "keywords": {"remove one element": 0.02570861714399338, "iff": 0.09568045026443411, "shadow": 0.15831692877998726, "remove": 0.15831692877998726, "element": 0.15831692877998726}}, {"docstring": "The minimal distance of a point to a set containing it vanishes\n", "keywords": {"minimal distance": 0.02570861714399338, "vanishes": 0.09568045026443411, "minimal": 0.15831692877998726, "distance": 0.15831692877998726, "point": 0.15831692877998726, "set": 0.15831692877998726}}, {"docstring": "An induction principle for closure membership for predicates with two arguments.\n", "keywords": {"induction principle": 0.02570861714399338, "principle for closure": 0.02570861714399338, "closure membership": 0.02570861714399338, "membership for predicates": 0.02570861714399338, "arguments": 0.09568045026443411, "induction": 0.15831692877998726, "principle": 0.15831692877998726, "closure": 0.15831692877998726, "membership": 0.15831692877998726, "predicates": 0.15831692877998726}}, {"docstring": " If a function `f` to a regular space `Y` has a limit within a dense set `A` for any `x`, then `extend_from A f` is continuous.\n", "keywords": {"regular space": 0.004662480015418964, "dense set": 0.004662480015418964, "extend": 0.04491197687864554, "function": 0.060154590733539764, "space": 0.060154590733539764, "set": 0.060154590733539764, "continuous": 0.060154590733539764, "regular": 0.0771485953923296, "limit": 0.0771485953923296, "dense": 0.0771485953923296}}, {"docstring": "The \"most used\" implication of `add_and_add_iff`, with split hypotheses, instead of `\u2227`.\n", "keywords": {"add": 0.02006098734604785, "split hypotheses": 0.022138323509052035, "iff": 0.054709255964732355, "implication": 0.11521656054299435, "hypotheses": 0.11521656054299435, "split": 0.1879836817695587}}, {"docstring": "A H\u00f6lder continuous function is uniformly continuous\n", "keywords": {"H\u00f6lder continuous function": 0.0055304017961131935, "H\u00f6lder continuous": 0.02714404025350355, "function is uniformly": 0.037831312533597124, "continuous function": 0.0562460611896591, "uniformly continuous": 0.0562460611896591, "H\u00f6lder": 0.09474983170388594, "continuous": 0.13945519496053638, "function": 0.19092478917347616, "uniformly": 0.19092478917347616}}, {"docstring": "**Alias** of the forward direction of inv_lt_inv_iff`.\n", "keywords": {"Alias": 0.034588515384495436, "forward direction": 0.03663237450220032, "iff": 0.054709255964732355, "direction of inv": 0.06460392234869006, "inv": 0.07162298286637953, "forward": 0.1879836817695587, "direction": 0.1879836817695587}}, {"docstring": "Another way of expressing `strong_induction_on`: the `(<)` relation is well-founded.\n", "keywords": {"relation is well-founded": 0.02570861714399338, "strong": 0.04491197687864554, "induction": 0.04491197687864554, "expressing": 0.15831692877998726, "relation": 0.15831692877998726, "well-founded": 0.15831692877998726}}, {"docstring": "Additive congruence relations are transitive.\n", "keywords": {"Additive congruence relations": 0.01655915082773619, "Additive congruence": 0.04940384002065631, "relations are transitive": 0.04940384002065631, "congruence relations": 0.09700399286574239, "Additive": 0.15831692877998726, "transitive": 0.15831692877998726, "congruence": 0.29736558256021506, "relations": 0.29736558256021506}}, {"docstring": "Bessel's inequality for finite sums.\n", "keywords": {"Bessel inequality": 0.04940384002065631, "finite sums": 0.04940384002065631, "inequality for finite": 0.09700399286574239, "Bessel": 0.15831692877998726, "sums": 0.15831692877998726, "inequality": 0.29736558256021506, "finite": 0.29736558256021506}}, {"docstring": "When we have `[comm_semiring R]`, the function `C` is the same as `algebra_map R R[X]`.  (But note that `C` is defined when `R` is not necessarily commutative, in which case `algebra_map` is not available.)\n", "keywords": {"algebra": 0.045519088506279205, "comm": 0.0771485953923296, "map": 0.09195381457841595, "semiring": 0.11553108358761233, "function": 0.11553108358761233, "necessarily commutative": 0.14066026668792161, "commutative": 0.3120806116026233, "case": 0.3120806116026233, "note": 0.3951375787241905, "defined": 0.3951375787241905, "necessarily": 0.3951375787241905}}, {"docstring": " A set `s` is not bounded below if and only if for each `x` there exists `y \u2208 s` such that `x` is not less than or equal to `y`. This version only assumes `preorder` structure and uses `\u00ac(x \u2264 y)`. A version for linear orders is called `not_bdd_below_iff`.\n", "keywords": {"set": 0.13430340746323932, "exists": 0.13430340746323932, "bounded": 0.19510940414603561, "equal": 0.19510940414603561, "preorder": 0.23258721851169967, "version": 0.2538191281841209, "bdd": 0.30631066152125025, "iff": 0.30631066152125025, "orders is called": 0.3197230881934916, "assumes": 0.35014648048956554, "structure": 0.35014648048956554, "version only assumes": 0.4025870464341271, "linear orders": 0.4356857921136023, "called": 0.43977869575565837, "linear": 0.5508799901107649, "orders": 0.5508799901107649, "version for linear": 0.6878980719915804}}, {"docstring": "**Stewart's Theorem**.\n", "keywords": {"Stewart Theorem": 0.007444681613352736, "Stewart": 0.08596317751626563, "Theorem": 0.08596317751626563}}, {"docstring": "The coercion to the quotient of a congruence relation commutes with multiplication (by    definition).\n", "keywords": {"congruence relation commutes": 0.0042542192213185686, "commutes with multiplication": 0.015380821171891606, "congruence relation": 0.02570861714399338, "relation commutes": 0.02570861714399338, "multiplication": 0.09568045026443411, "definition": 0.09568045026443411, "coercion": 0.15831692877998726, "quotient": 0.15831692877998726, "congruence": 0.15831692877998726, "relation": 0.15831692877998726, "commutes": 0.15831692877998726}}, {"docstring": "The product of `f a + g a` over all of `s` is the sum  over the powerset of `s` of the product of `f` over a subset `t` times  the product of `g` over the complement of `t`\n", "keywords": {"times the product": 0.0046028968860635944, "product": 0.019941737367049385, "subset": 0.07658656172861597, "times": 0.07658656172861597, "sum": 0.09499730793466643, "powerset": 0.09499730793466643, "complement": 0.09499730793466643}}, {"docstring": "Odd Bernoulli numbers (greater than 1) are zero.\n", "keywords": {"Odd Bernoulli numbers": 0.003875396501262652, "Odd Bernoulli": 0.023458380875189744, "Bernoulli numbers": 0.023458380875189744, "Bernoulli": 0.1447773057422032, "Odd": 0.15831692877998726, "numbers": 0.15831692877998726, "greater": 0.15831692877998726}}, {"docstring": " The Compactness Theorem of first-order logic: A theory is satisfiable if and only if it is finitely satisfiable.\n", "keywords": {"Compactness Theorem": 0.008720053313048794, "Theorem of first-order": 0.017391962598404163, "first-order logic": 0.021114872146320032, "finitely satisfiable": 0.051351238837580325, "Compactness": 0.0929767246050301, "Theorem": 0.0929767246050301, "theory is satisfiable": 0.11245662598947327, "logic": 0.11246769819744627, "satisfiable": 0.13282721021560867, "first-order": 0.18385948854246909, "theory": 0.18385948854246909, "finitely": 0.18385948854246909}}, {"docstring": "The angle at a point is at most \u03c0.\n", "keywords": {"angle": 0.15831692877998726, "point": 0.15831692877998726}}, {"docstring": "See `add_tsub_assoc_of_le` for the equality.\n", "keywords": {"add": 0.04491197687864554, "tsub": 0.04491197687864554, "assoc": 0.04491197687864554, "equality": 0.15831692877998726}}, {"docstring": "**Alias** of the reverse direction of sub_pos`.\n", "keywords": {"reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "pos": 0.04491197687864554, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "the minimal distance is always nonnegative\n", "keywords": {"minimal distance": 0.09700399286574239, "nonnegative": 0.15831692877998726, "minimal": 0.29736558256021506, "distance": 0.29736558256021506}}, {"docstring": " If `h` is a topological fiber bundle over a conditionally complete linear order, then it is trivial over any closed interval.\n", "keywords": {"complete linear order": 0.0025258761156662004, "topological fiber bundle": 0.0042542192213185686, "conditionally complete linear": 0.0042542192213185686, "linear order": 0.015380821171891606, "closed interval": 0.015380821171891606, "topological fiber": 0.02570861714399338, "fiber bundle": 0.02570861714399338, "conditionally complete": 0.02570861714399338, "complete linear": 0.02570861714399338, "order": 0.09568045026443411, "interval": 0.09568045026443411, "topological": 0.15831692877998726, "fiber": 0.15831692877998726, "bundle": 0.15831692877998726, "conditionally": 0.15831692877998726, "complete": 0.15831692877998726, "linear": 0.15831692877998726, "trivial": 0.15831692877998726, "closed": 0.15831692877998726}}, {"docstring": "The second element of a chain is irreducible.\n", "keywords": {"chain is irreducible": 0.04940384002065631, "irreducible": 0.15831692877998726, "element": 0.29736558256021506, "chain": 0.29736558256021506}}, {"docstring": "The product of a strictly monotone function and a monotone function is strictly monotone.\n", "keywords": {"strictly monotone function": 0.005969477003180055, "strictly monotone": 0.015889194666568494, "monotone function": 0.015889194666568494, "monotone": 0.05771958920065093, "strictly": 0.08893464428012506, "function": 0.08893464428012506, "function is strictly": 0.11998482209440742, "product": 0.16020926794283838}}, {"docstring": "Any nonempty Polish space is the continuous image of the fundamental space `\u2115 \u2192 \u2115`.\n", "keywords": {"nonempty Polish space": 0.0050924743075367014, "nonempty Polish": 0.017658958508402847, "Polish space": 0.025792302341534866, "continuous image": 0.035715520099333646, "fundamental space": 0.05259515133015473, "Polish": 0.09344467948467797, "space": 0.13453835116331675, "nonempty": 0.18569843656348187, "continuous": 0.18569843656348187, "image": 0.18569843656348187, "fundamental": 0.18569843656348187}}, {"docstring": " The iterated differential within a set `s` at a point `x` is not modified if one intersects `s` with an open set containing `x`.\n", "keywords": {"iterated differential": 0.034987023778306175, "open set": 0.051351238837580325, "point": 0.11246769819744627, "intersects": 0.11246769819744627, "set": 0.13282721021560867, "iterated": 0.18385948854246909, "differential": 0.18385948854246909, "modified": 0.18385948854246909, "open": 0.18385948854246909}}, {"docstring": "**Alias** of the reverse direction of lipschitz_on_with_iff_dist_le_mul`.\n", "keywords": {"direction of lipschitz": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "dist": 0.04491197687864554, "mul": 0.04491197687864554, "lipschitz": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "`\u2124` with its usual ring structure is not a field.\n", "keywords": {"usual ring structure": 0.03339840940482845, "usual ring": 0.09700399286574239, "ring structure": 0.09700399286574239, "field": 0.15831692877998726, "usual": 0.29736558256021506, "ring": 0.29736558256021506, "structure": 0.29736558256021506}}, {"docstring": " Let `{x | p x}` be a subsemigroup of a commutative monoid `M`. Let `f : M \u2192 N` be a map such that `f 1 = 1` and `f` is submultiplicative on `{x | p x}`, i.e., `p x \u2192 p y \u2192 f (x * y) \u2264 f x * f y`. Let `g i`, `i \u2208 s`, be a finite family of elements of `M` such that `\u2200 i \u2208 s, p (g i)`. Then `f (\u220f i in s, g i) \u2264 \u220f i in s, f (g i)`.\n", "keywords": {"commutative monoid": 0.009230376283656094, "monoid": 0.08694429213997827, "subsemigroup": 0.10519328464496844, "commutative": 0.10519328464496844, "finite family": 0.16159836193228425, "family of elements": 0.16159836193228425, "map": 0.2899204041465753, "submultiplicative": 0.2899204041465753, "finite": 0.37298424001381364, "family": 0.37298424001381364, "elements": 0.37298424001381364}}, {"docstring": "**Fermat's Theorem**: the derivative of a function at a local maximum equals zero.\n", "keywords": {"Fermat Theorem": 0.0032610119837787367, "local maximum equals": 0.0042542192213185686, "local maximum": 0.02570861714399338, "maximum equals": 0.02570861714399338, "Fermat": 0.057012387690331526, "Theorem": 0.057012387690331526, "derivative": 0.15831692877998726, "function": 0.15831692877998726, "local": 0.15831692877998726, "maximum": 0.15831692877998726, "equals": 0.15831692877998726}}, {"docstring": " If `x` and `y` are distinct letters and `w\u2081 w\u2082` are words such that `xw\u2081` reduces to `yw\u2082`, then `w\u2081` reduces to `x\u207b\u00b9yw\u2082`.\n", "keywords": {"distinct letters": 0.020225813225353943, "reduces": 0.05332403764722467, "distinct": 0.1408007092310104, "letters": 0.1408007092310104, "words": 0.1408007092310104}}, {"docstring": " If `{s i | p i}` is a basis of a filter `l` and each `s i` includes `s j` such that `p j \u2227 q j`, then `{s j | p j \u2227 q j}` is a basis of `l`.\n", "keywords": {"basis": 0.03674010039257565, "includes": 0.05706283858652404, "filter": 0.07610073008164243}}, {"docstring": "If the unique morphism from `A` to a terminal object is a monomorphism, `A` is subterminal. The converse of `is_subterminal.mono_is_terminal_from`.\n", "keywords": {"unique morphism": 0.023429465030212888, "terminal object": 0.04345039133945653, "monomorphism": 0.11016584643300398, "subterminal": 0.11016584643300398, "terminal": 0.13760672610172298, "unique": 0.1513046335336394, "morphism": 0.1513046335336394, "object": 0.1513046335336394, "subterminal.mono": 0.21580243272668717, "converse": 0.3824015048530132}}, {"docstring": " A vector space has dimension at most `1` if and only if there is a single vector of which all vectors are multiples.\n", "keywords": {"space has dimension": 0.023732923233905415, "vector space": 0.04182683747999633, "single vector": 0.04182683747999633, "vectors are multiples": 0.085077633387816, "multiples": 0.103096657787716, "vector": 0.1318400049084515, "space": 0.15225875770903138, "dimension": 0.15225875770903138, "single": 0.15225875770903138, "vectors": 0.263680009816903}}, {"docstring": "In a locally compact space every point has a compact neighborhood.\n", "keywords": {"locally compact space": 0.010962043841203115, "compact neighborhood": 0.0325194426147957, "space every point": 0.03663237450220032, "locally compact": 0.05417025203414716, "compact space": 0.05417025203414716, "neighborhood": 0.11521656054299435, "compact": 0.13667842094541144, "locally": 0.1879836817695587, "space": 0.1879836817695587, "point": 0.1879836817695587}}, {"docstring": "The sum of two `C^n` functions at a point is `C^n` at this point.\n", "keywords": {"functions": 0.11984314898676356, "point": 0.14323823713631006, "sum": 0.19488865479360015}}, {"docstring": " **Rolle's Theorem**, a version for a function on an open interval: if `f` has the same limit `l` at `\ud835\udcdd[>] a` and `\ud835\udcdd[<] b`, then `deriv f c = 0` for some `c \u2208 (a, b)`. This version does not require differentiability of `f` because we define `deriv f c = 0` whenever `f` is not differentiable at `c`.\n", "keywords": {"Rolle Theorem": 0.0029788039995229387, "open interval": 0.014778219610636767, "Rolle": 0.054497312589669264, "Theorem": 0.054497312589669264, "deriv": 0.061839897768986546, "interval": 0.10538752815290522, "limit": 0.10538752815290522, "version": 0.12050909473379261, "function": 0.13818527286514595, "open": 0.13818527286514595, "require differentiability": 0.14671225102572735, "define": 0.29034507216173455, "require": 0.35768931264291, "differentiability": 0.35768931264291, "differentiable": 0.35768931264291}}, {"docstring": " In the characteristic zero case, the weights in the centroid indexed by a `fintype` sum to 1 if the number of points is not zero.\n", "keywords": {"characteristic zero case": 0.0065920978564317735, "centroid indexed": 0.009239332327148086, "number of points": 0.009239332327148086, "fintype": 0.04491197687864554, "case": 0.06844581806138879, "sum": 0.06844581806138879, "characteristic": 0.09568045026443411, "weights": 0.09568045026443411, "centroid": 0.09568045026443411, "indexed": 0.09568045026443411, "number": 0.09568045026443411, "points": 0.09568045026443411}}, {"docstring": "Two `composition_series` are equal if they have the same elements. See also `ext_fun`.\n", "keywords": {"composition": 0.05899937629682816, "series": 0.05899937629682816, "ext": 0.17881754828257995, "fun": 0.17881754828257995, "elements": 0.2005079697193566, "equal": 0.36073110501666333}}, {"docstring": "A bounded continuous function on a finite-measure space is in `Lp`.\n", "keywords": {"bounded continuous function": 0.0042542192213185686, "bounded continuous": 0.02570861714399338, "continuous function": 0.02570861714399338, "finite-measure space": 0.02570861714399338, "bounded": 0.15831692877998726, "continuous": 0.15831692877998726, "function": 0.15831692877998726, "finite-measure": 0.15831692877998726, "space": 0.15831692877998726}}, {"docstring": " We'd like to state this as `L.head * L.tail.prod = L.prod`, but because `L.head` relies on an inhabited instance to return a garbage value on the empty list, this is not possible. Instead, we write the statement in terms of `(L.nth 0).get_or_else 1`.\n", "keywords": {"L.head": 0.014271686893694636, "empty list": 0.03419969733027349, "L.prod": 0.039954682789842065, "inhabited instance": 0.05582649005076364, "instance to return": 0.05582649005076364, "return a garbage": 0.05582649005076364, "L.nth": 0.12628676402702455, "relies": 0.1438116176495284, "list": 0.1438116176495284, "state": 0.2299449545753006, "inhabited": 0.2299449545753006, "instance": 0.2299449545753006, "return": 0.2299449545753006, "garbage": 0.2299449545753006, "empty": 0.2299449545753006, "write the statement": 0.3498660406641243, "statement in terms": 0.3498660406641243, "write": 0.5091028863598569, "statement": 0.5091028863598569, "terms": 0.5091028863598569}}, {"docstring": "An isometry from a metric space is a uniform embedding\n", "keywords": {"uniform embedding": 0.015380821171891606, "metric space": 0.02570861714399338, "embedding": 0.09568045026443411, "isometry": 0.15831692877998726, "metric": 0.15831692877998726, "space": 0.15831692877998726, "uniform": 0.15831692877998726}}, {"docstring": " Assumes left covariance. The lemma assuming right covariance is `right.one_lt_mul_of_lt_of_le`.\n", "keywords": {"Assumes left covariance": 0.021279743632738882, "Assumes left": 0.038712704770480444, "left covariance": 0.1273706910391025, "Assumes": 0.1531727145735673, "right.one": 0.21826204231687923, "mul": 0.21826204231687923, "covariance": 0.23216465691767033, "left": 0.2433193585127945, "lemma assuming": 0.38571507274593425, "lemma": 0.5275897320195264, "assuming": 0.5275897320195264, "assuming right covariance": 0.5846700711531686}}, {"docstring": "The last element of a `vector`, given that the vector is at least one element.\n", "keywords": {"element": 0.14868279128010753, "vector": 0.14868279128010753}}, {"docstring": "The product of two dense inducings is a dense inducing\n", "keywords": {"dense inducings": 0.05738242751169008, "dense": 0.11647786950765905, "product": 0.2040190808014209, "inducings": 0.2329557390153181, "inducing": 0.2329557390153181}}, {"docstring": " The function `continuous_linear_map.smul_right`, associating to a continuous linear map `f : E \u2192 \ud835\udd5c` and a scalar `c : F` the tensor product `f \u2297 c` as a continuous linear map from `E` to `F`, is a bounded bilinear map.\n", "keywords": {"continuous linear map": 0.0012078538441356072, "bounded bilinear map": 0.0031732142225835537, "continuous linear": 0.006620921213173765, "linear map": 0.010257552242880138, "tensor product": 0.01246225659038897, "bounded bilinear": 0.017312868054511748, "bilinear map": 0.023478625256490363, "continuous": 0.03810626603510201, "linear": 0.03810626603510201, "map": 0.05861589379454152, "map.smul": 0.0625099031084014, "function": 0.09435406298103612, "associating": 0.09435406298103612, "scalar": 0.09435406298103612, "product": 0.09435406298103612, "tensor": 0.13045395211071698, "bounded": 0.13045395211071698, "bilinear": 0.13045395211071698}}, {"docstring": "For maps between vector spaces, `mdifferentiable_on` and `differentiable_on` coincide\n", "keywords": {"vector spaces": 0.015380821171891606, "maps between vector": 0.02570861714399338, "mdifferentiable": 0.04491197687864554, "coincide": 0.04491197687864554, "spaces": 0.09568045026443411, "maps": 0.15831692877998726, "vector": 0.15831692877998726}}, {"docstring": "For any natural numbers n, a, and b, one of the following holds: 1. n < a 2. n \u2265 b 3. n \u2208 Ico a b\n", "keywords": {"natural numbers": 0.02140921543860024, "holds": 0.10519328464496844, "natural": 0.1447773057422032, "numbers": 0.1447773057422032, "Ico": 0.26713017289461305}}, {"docstring": " A monotone function remains monotone when composed with the partial application of a covariant operator. E.g., `\u2200 (m : \u2115), monotone f \u2192 monotone (\u03bb n, f (m + n))`.\n", "keywords": {"monotone function remains": 0.017931542148367757, "function remains monotone": 0.017931542148367757, "covariant operator": 0.026315247688663595, "function remains": 0.03607318651103269, "partial application": 0.03607318651103269, "monotone function": 0.08720855786006582, "remains monotone": 0.08720855786006582, "monotone": 0.10747048646976573, "operator": 0.1374135768949114, "function": 0.1865937257639863, "remains": 0.1865937257639863, "composed": 0.1865937257639863, "partial": 0.1865937257639863, "application": 0.1865937257639863, "covariant": 0.1865937257639863, "monotone when composed": 0.24541481245388616}}, {"docstring": "Two pseudo metric space structures with the same distance function coincide.\n", "keywords": {"distance function coincide": 0.016559150827736194, "pseudo metric space": 0.03339840940482845, "metric space structures": 0.03339840940482845, "function coincide": 0.04940384002065631, "pseudo metric": 0.09700399286574239, "metric space": 0.09700399286574239, "space structures": 0.09700399286574239, "distance function": 0.09700399286574239, "coincide": 0.15831692877998726, "pseudo": 0.29736558256021506, "metric": 0.29736558256021506, "space": 0.29736558256021506, "structures": 0.29736558256021506, "distance": 0.29736558256021506, "function": 0.29736558256021506}}, {"docstring": " As an intermediate step to show that `\u03bc.with_density (v.lim_ratio_meas h\u03c1) = \u03c1`, we show here that `\u03bc.with_density (v.lim_ratio_meas h\u03c1) \u2264 t^2 \u03c1` for any `t > 1`.\n", "keywords": {"\u03bc.with": 0.023392504197764657, "density": 0.023392504197764657, "v.lim": 0.023392504197764657, "ratio": 0.023392504197764657, "intermediate step": 0.04390881698443257, "meas": 0.04972514527124059, "step to show": 0.1424920768233321, "show": 0.153194783807282, "intermediate": 0.20509004731457245, "step": 0.20509004731457245}}, {"docstring": "Postcomposing `f` with `prod.snd` is `C^n` at `x`\n", "keywords": {"Postcomposing": 0.04491197687864554, "prod.snd": 0.04491197687864554}}, {"docstring": "Cauchy condensation test for series of nonnegative real numbers.\n", "keywords": {"Cauchy condensation test": 0.01655915082773619, "nonnegative real numbers": 0.016559150827736194, "Cauchy condensation": 0.04940384002065631, "real numbers": 0.04940384002065631, "condensation test": 0.09700399286574239, "test for series": 0.09700399286574239, "series of nonnegative": 0.09700399286574239, "nonnegative real": 0.09700399286574239, "Cauchy": 0.15831692877998726, "numbers": 0.15831692877998726, "condensation": 0.29736558256021506, "test": 0.29736558256021506, "series": 0.29736558256021506, "nonnegative": 0.29736558256021506, "real": 0.29736558256021506}}, {"docstring": " Vertical Angles Theorem: angles opposite each other, formed by two intersecting straight lines, are equal.\n", "keywords": {"Vertical Angles Theorem": 0.0011961233521892356, "intersecting straight lines": 0.003880277136642503, "Angles Theorem": 0.010560893152917477, "Vertical Angles": 0.018998335010606094, "straight lines": 0.020435055290363522, "angles opposite": 0.031480389378991176, "intersecting straight": 0.033892441937102495, "Theorem": 0.06199730211833934, "Angles": 0.08428210506425245, "Vertical": 0.11060549338282699, "formed": 0.11060549338282699, "lines": 0.11060549338282699, "equal": 0.11060549338282699, "opposite": 0.18105634546484617, "intersecting": 0.18105634546484617, "straight": 0.18105634546484617}}, {"docstring": "Given all finite wide pullbacks in `C`, construct finite products in `C/B`.\n", "keywords": {"construct finite products": 0.006525501026847568, "finite wide pullbacks": 0.010962043841203115, "construct finite": 0.0325194426147957, "wide pullbacks": 0.03663237450220032, "finite wide": 0.05417025203414716, "finite products": 0.05417025203414716, "construct": 0.11521656054299435, "finite": 0.13667842094541144, "wide": 0.1879836817695587, "pullbacks": 0.1879836817695587, "products": 0.1879836817695587}}, {"docstring": " The norm of a bounded continuous function is the supremum of `\u2225f x\u2225`. We use `Inf` to ensure that the definition works if `\u03b1` has no elements.\n", "keywords": {"bounded continuous function": 0.003469853724036919, "bounded continuous": 0.02249651976012989, "continuous function": 0.02249651976012989, "norm": 0.14832923246533666, "bounded": 0.14832923246533666, "continuous": 0.14832923246533666, "function": 0.14832923246533666, "supremum": 0.14832923246533666, "definition works": 0.165573765898185, "elements": 0.2790829227183407, "ensure": 0.37689977775222827, "definition": 0.37689977775222827, "works": 0.37689977775222827}}, {"docstring": " If `dist (f n) (f (n+1))` is bounded by `(C / 2) / 2^n`, then the distance from `f 0` to the limit of `f` is bounded above by `C`.\n", "keywords": {"dist": 0.055708263664958506, "bounded": 0.05815404476918013, "distance": 0.11718348279991213, "limit": 0.11718348279991213}}, {"docstring": "Intersecting with a neighborhood of the point does not change the tangent cone.\n", "keywords": {"tangent cone": 0.015380821171891606, "change the tangent": 0.02570861714399338, "Intersecting": 0.09568045026443411, "cone": 0.09568045026443411, "neighborhood": 0.15831692877998726, "point": 0.15831692877998726, "change": 0.15831692877998726, "tangent": 0.15831692877998726}}, {"docstring": "If a function is `C^n`, then its bundled derivative is `C^m` when `m+1 \u2264 n`.\n", "keywords": {"bundled derivative": 0.02570861714399338, "function": 0.15831692877998726, "bundled": 0.15831692877998726, "derivative": 0.15831692877998726}}, {"docstring": "If `0 < n`, then `a i` has order `(2 * n) / gcd (2 * n) i`.\n", "keywords": {"gcd": 0.04491197687864554, "order": 0.0771485953923296}}, {"docstring": " `centroid_weights_with_circumcenter` sums to 1, if the `finset` is nonempty.\n", "keywords": {"centroid": 0.04491197687864554, "weights": 0.04491197687864554, "circumcenter": 0.04491197687864554, "finset": 0.04491197687864554, "sums": 0.15831692877998726, "nonempty": 0.15831692877998726}}, {"docstring": "Definition of `\u2264` for additive congruence relations.\n", "keywords": {"additive congruence relations": 0.016559150827736194, "congruence relations": 0.04940384002065631, "additive congruence": 0.09700399286574239, "Definition": 0.15831692877998726, "relations": 0.15831692877998726, "additive": 0.29736558256021506, "congruence": 0.29736558256021506}}, {"docstring": "The identity map is a monoid homomorphism.\n", "keywords": {"monoid homomorphism": 0.04940384002065631, "identity map": 0.09700399286574239, "homomorphism": 0.15831692877998726, "identity": 0.29736558256021506, "map": 0.29736558256021506, "monoid": 0.29736558256021506}}, {"docstring": " **Riesz's theorem**: if a closed ball with center zero of positive radius is compact in a vector space, then the space is finite-dimensional.\n", "keywords": {"Riesz theorem": 0.006770983566939632, "closed ball": 0.033100028790236186, "ball with center": 0.033100028790236186, "positive radius": 0.033100028790236186, "radius is compact": 0.033100028790236186, "vector space": 0.04816043877099025, "Riesz": 0.06156588033918026, "space is finite-dimensional": 0.06562928105097784, "theorem": 0.10923981997294611, "finite-dimensional": 0.10923981997294611, "space": 0.12834816870701238, "closed": 0.17899586521379354, "ball": 0.17899586521379354, "center": 0.17899586521379354, "positive": 0.17899586521379354, "radius": 0.17899586521379354, "compact": 0.17899586521379354, "vector": 0.17899586521379354}}, {"docstring": "b < Sup s when there is an element a in s with b < a, when s is bounded above. This is essentially an iff, except that the assumptions for the two implications are slightly different (one needs boundedness above for one direction, nonemptiness and linear order for the other one), so we formulate separately the two implications, contrary to the complete_lattice case.\n", "keywords": {"lattice case": 0.0779795899677144, "essentially an iff": 0.0985927663962335, "nonemptiness and linear": 0.0985927663962335, "linear order": 0.12528814182816947, "formulate separately": 0.12528814182816947, "element": 0.12601639351324403, "bounded": 0.12601639351324403, "implications": 0.14451504516812774, "implications are slightly": 0.21698710079072664, "iff": 0.26895845697576326, "direction": 0.26895845697576326, "nonemptiness": 0.26895845697576326, "contrary": 0.26895845697576326, "complete": 0.26895845697576326, "lattice": 0.26895845697576326, "case": 0.26895845697576326, "essentially": 0.33367457264788625, "assumptions": 0.33367457264788625, "slightly": 0.33367457264788625, "boundedness": 0.33367457264788625}}, {"docstring": " Computing the `multilinear_map.alternatization` of the `multilinear_map.dom_coprod` is the same as computing the `alternating_map.dom_coprod` of the `multilinear_map.alternatization`s.\n", "keywords": {"multilinear": 0.013883438546432647, "map.alternatization": 0.025145959052879724, "map.dom": 0.025145959052879724, "coprod": 0.025145959052879724, "Computing": 0.05969060532153082, "alternating": 0.06345822244698579}}, {"docstring": "`x + 0` is equivalent to `x`.\n", "keywords": {"equivalent": 0.15831692877998726}}, {"docstring": "The p-adic norm of `p` is `1/p` if `p` is prime.  See also `padic_norm.padic_norm_p` for a version that assumes `1 < p`.\n", "keywords": {"p-adic norm": 0.033456910817875336, "prime": 0.10375162798716249, "version that assumes": 0.11286975610175627, "norm": 0.11891832586815977, "p-adic": 0.13611772524108948, "padic": 0.2182620423168793, "norm.padic": 0.2182620423168793, "assumes": 0.2867584112776268, "version": 0.35368535792510575}}, {"docstring": "Compressing a finset doesn't change its size.\n", "keywords": {"Compressing a finset": 0.04940384002065631, "change its size": 0.04940384002065631, "Compressing": 0.15831692877998726, "size": 0.15831692877998726, "finset": 0.29736558256021506, "change": 0.29736558256021506}}, {"docstring": "When we have `[comm_semiring R]`, the function `C` is the same as `algebra_map R R[T;T\u207b\u00b9]`. (But note that `C` is defined when `R` is not necessarily commutative, in which case `algebra_map` is not available.)\n", "keywords": {"algebra": 0.045519088506279205, "comm": 0.0771485953923296, "map": 0.09195381457841595, "semiring": 0.11553108358761233, "function": 0.11553108358761233, "necessarily commutative": 0.14066026668792161, "commutative": 0.3120806116026233, "case": 0.3120806116026233, "note": 0.3951375787241905, "defined": 0.3951375787241905, "necessarily": 0.3951375787241905}}, {"docstring": " If A is an R-algebra all of whose elements are integral over R, and B is an A-algebra all of whose elements are integral over A, then all elements of B are integral over R.\n", "keywords": {"elements are integral": 0.021166160373209876, "integral": 0.038510361195870764, "elements": 0.06794458488847384, "R-algebra": 0.08010561870176523, "A-algebra": 0.08010561870176523}}, {"docstring": "**Alias** of filter.nmem_hyperfilter_of_finite`.\n", "keywords": {"Alias": 0.030396371632413578, "hyperfilter": 0.04491197687864554, "finite": 0.04491197687864554, "filter.nmem": 0.09568045026443411}}, {"docstring": " Assumes left covariance. The lemma assuming right covariance is `right.mul_le_one`.\n", "keywords": {"Assumes left covariance": 0.022198737363026126, "Assumes left": 0.03985444220279051, "left covariance": 0.13064959758481184, "Assumes": 0.1554527012770092, "right.mul": 0.22125774619993788, "covariance": 0.23433876543145388, "left": 0.246550513069643, "lemma assuming": 0.39462694305349416, "lemma": 0.5319420725534505, "assuming": 0.5319420725534505, "assuming right covariance": 0.5970566294903761}}, {"docstring": "Relation `\u03bb f g, tendsto (\u03bb x, (f x, g x)) l (\ud835\udce4 \u03b1)` is symmetric\n", "keywords": {"Relation": 0.04491197687864554, "tendsto": 0.04491197687864554, "symmetric": 0.0771485953923296}}, {"docstring": "Symmetric of `filter.map_map\u2082_antidistrib_left`.\n", "keywords": {"map \u2082_ antidistrib": 0.02570861714399338, "filter.map": 0.04491197687864554, "left": 0.04491197687864554, "Symmetric": 0.15831692877998726, "map": 0.15831692877998726, "antidistrib": 0.15831692877998726}}, {"docstring": "Given a compact set `K` inside an open set `U`, there is a open neighborhood `V` of `0` such that `K + V \u2286 U`.\n", "keywords": {"compact set": 0.03147064175861185, "open neighborhood": 0.03672426843567709, "open set": 0.04715305578486013, "set": 0.07726414307411157, "inside an open": 0.08132750272243246, "inside": 0.12156210109285605, "neighborhood": 0.12156210109285605, "open": 0.14570071893270706, "compact": 0.19744254481508877}}, {"docstring": "The set in the definition of `log` is nonempty.\n", "keywords": {"log": 0.04491197687864554, "nonempty": 0.09568045026443411, "set": 0.15831692877998726, "definition": 0.15831692877998726}}, {"docstring": " **Fermat's theorem on the sum of two squares**. Every prime congruent to 1 mod 4 is the sum of two squares. Also known as **Fermat's Christmas theorem**.\n", "keywords": {"Fermat Christmas theorem": 0.10219973800974623, "Fermat Christmas": 0.10914155187560534, "squares": 0.11663042119361348, "Fermat": 0.12243424861266247, "sum": 0.17550242590496243, "Fermat theorem": 0.18521442001915364, "mod": 0.28158912530113567, "theorem": 0.3190912958318335, "Christmas theorem": 0.34491280182783446, "Christmas": 0.40185579281264705, "prime congruent": 0.5943716451445222, "prime": 0.6105683111687461, "congruent": 0.6105683111687461}}, {"docstring": "A continuous function which tendsto `at_top` `at_top` and to `at_bot` `at_bot` is surjective.\n", "keywords": {"function which tendsto": 0.010461294309803722, "continuous function": 0.0145716641419346, "top": 0.021352745740207107, "bot": 0.021352745740207107, "tendsto": 0.08638782221675846, "surjective": 0.08638782221675846, "continuous": 0.11984314898676356, "function": 0.11984314898676356}}, {"docstring": "`map_alg` is the morphism induced by `R \u2192 S`.\n", "keywords": {"map": 0.04491197687864554, "alg": 0.04491197687864554, "morphism induced": 0.09700399286574239, "morphism": 0.29736558256021506, "induced": 0.29736558256021506}}, {"docstring": "If `a` commutes with `b`, then `b` commutes with `a`.\n", "keywords": {"commutes": 0.04784022513221706}}, {"docstring": " Given `f : \u03b2 \u2192 \u211d\u22650\u221e`, if `f` sends `{i | p i}` to a set of positive numbers accumulating to zero, then `f i`-neighborhoods of the diagonal form a basis of `\ud835\udce4 \u03b1`.  For specific bases see `uniformity_basis_edist`, `uniformity_basis_edist'`, `uniformity_basis_edist_nnreal`, and `uniformity_basis_edist_inv_nat`.\n", "keywords": {"positive numbers accumulating": 0.006374201806079363, "set of positive": 0.033473612150022945, "positive numbers": 0.033473612150022945, "numbers accumulating": 0.033473612150022945, "diagonal form": 0.033473612150022945, "uniformity": 0.037350570469224915, "edist": 0.037350570469224915, "basis": 0.08579893020018933, "sends": 0.10069817098494649, "neighborhoods": 0.13885317163396338, "set": 0.1799706121180221, "positive": 0.1799706121180221, "numbers": 0.1799706121180221, "accumulating": 0.1799706121180221, "diagonal": 0.1799706121180221, "form": 0.1799706121180221, "specific bases": 0.23014541841071143, "form a basis": 0.253504948013343, "nnreal": 0.28000164209001627, "inv": 0.28000164209001627}}, {"docstring": "The leading coefficient of a product of polynomials is equal to the product of the leading coefficients, provided that this product is nonzero.  See `polynomial.leading_coeff_multiset_prod` (without the `'`) for a version for integral domains, where this condition is automatically satisfied.\n", "keywords": {"leading coefficient": 0.01768972158171169, "polynomials is equal": 0.028409776581179488, "product of polynomials": 0.05343911915403966, "leading": 0.057668251123560964, "product": 0.05964693296419347, "product is nonzero": 0.07290416048086794, "provided": 0.12159732541750698, "nonzero": 0.12159732541750698, "coefficient": 0.1507088766428992, "integral domains": 0.15316885596826418, "automatically satisfied": 0.15316885596826418, "polynomials": 0.16620757414968715, "equal": 0.16620757414968715, "version for integral": 0.20099694037156443, "condition is automatically": 0.20099694037156443, "polynomial.leading": 0.23529688303595092, "coeff": 0.23529688303595092, "multiset": 0.23529688303595092, "prod": 0.23529688303595092, "domains": 0.3246786945365658}}, {"docstring": "Two `convex_cone`s are equal if and only if the underlying sets are equal.\n", "keywords": {"underlying sets": 0.03663237450220032, "sets are equal": 0.04051498248759491, "convex": 0.054709255964732355, "cone": 0.054709255964732355, "equal": 0.10356599227702172, "underlying": 0.1879836817695587, "sets": 0.1879836817695587}}, {"docstring": "**Alias** of pgame.lf_of_lf_of_lt`.\n", "keywords": {"Alias": 0.030396371632413578, "pgame.lf": 0.0771485953923296}}, {"docstring": "In a Polish space, a set is clopenable if and only if it is Borel-measurable.\n", "keywords": {"Polish space": 0.008293207122436794, "set is clopenable": 0.02570861714399338, "Borel-measurable": 0.057012387690331526, "Polish": 0.08596317751626563, "space": 0.09568045026443411, "set": 0.15831692877998726, "clopenable": 0.15831692877998726}}, {"docstring": " The `at_bot` filter for an open interval `Ioo a b` comes from the right-neighbourhoods filter at the left endpoint in the ambient order.\n", "keywords": {"open interval": 0.00875085431208752, "ambient order": 0.00875085431208752, "left endpoint": 0.012220051967672856, "right-neighbourhoods filter": 0.014957518676362061, "Ioo": 0.04723195439619874, "bot": 0.052008009273421085, "filter": 0.06706294711327264, "interval": 0.07895278969183914, "order": 0.07895278969183914, "open": 0.10987504304330521, "right-neighbourhoods": 0.10987504304330521, "left": 0.10987504304330521, "endpoint": 0.10987504304330521, "ambient": 0.10987504304330521}}, {"docstring": "The `v`-adic valuation of a product equals the product of the valuations.\n", "keywords": {"adic valuation": 0.02086821647147932, "product equals": 0.03117712943655666, "equals the product": 0.07190362830540235, "adic": 0.10028582371075691, "product": 0.10191687733271076, "equals": 0.14832923246533666, "valuation": 0.20383375466542153, "valuations": 0.20383375466542153}}, {"docstring": " The sum of two lower semicontinuous functions is lower semicontinuous. Formulated with `[has_continuous_add]`. The primed version of the lemma uses an explicit continuity assumption on addition, for application to `ereal`.\n", "keywords": {"lower semicontinuous functions": 0.007327296516767814, "lower semicontinuous": 0.016851204808897166, "semicontinuous functions": 0.03821554584844725, "functions is lower": 0.08667762295794612, "lower": 0.09028232117950413, "semicontinuous": 0.09028232117950413, "sum": 0.2038542769622493, "functions": 0.2038542769622493, "continuous": 0.2425057621221154, "add": 0.2425057621221154, "ereal": 0.31807004650910337, "assumption on addition": 0.3438068115293896, "Formulated": 0.36270881646612724, "explicit continuity assumption": 0.44505054844584063, "addition": 0.4533135999375753, "primed version": 0.46742777496856974, "explicit continuity": 0.46742777496856974, "continuity assumption": 0.46742777496856974, "primed": 0.5643894539005718, "version": 0.5643894539005718}}, {"docstring": "**Alias** of the forward direction of set.pairwise_iff_of_refl`.\n", "keywords": {"direction of set.pairwise": 0.00899321792126428, "forward direction": 0.013527995261974615, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "refl": 0.04491197687864554, "set.pairwise": 0.0771485953923296, "forward": 0.1155310835876123, "direction": 0.1155310835876123}}, {"docstring": " The inner product of two vectors, divided by the product of their norms, has absolute value 1 if and only if they are nonzero and one is a multiple of the other. One form of equality case for Cauchy-Schwarz.\n", "keywords": {"product": 0.06431948505617668, "vectors": 0.10707231661842652, "divided": 0.10707231661842652, "norms": 0.10707231661842652, "case for Cauchy-Schwarz": 0.12387522129842544, "absolute": 0.14724705908851674, "nonzero": 0.14724705908851674, "multiple": 0.14724705908851674, "form of equality": 0.16351863533044358, "equality case": 0.16351863533044358, "Cauchy-Schwarz": 0.2940149351268243, "form": 0.3748840432180225, "equality": 0.3748840432180225, "case": 0.3748840432180225}}, {"docstring": " If measure `\u03bc` is invariant under a group action and is nonzero on a compact set `K`, then it is positive on any nonempty open set. In case of a regular measure, one can assume `\u03bc \u2260 0` instead of `\u03bc K \u2260 0`, see `measure_theory.measure_is_open_pos_of_smul_invariant_of_ne_zero`.\n", "keywords": {"nonempty open set": 0.006902150210253495, "compact set": 0.020879684701530912, "group action": 0.030036106610721605, "open set": 0.037900369574704974, "nonempty open": 0.054922479978923924, "set": 0.05988579023569479, "measure": 0.07028892281449567, "regular measure": 0.0964035242853713, "invariant": 0.1524417768420202, "open": 0.1524417768420202, "group": 0.1707637149478047, "action": 0.1707637149478047, "nonzero": 0.1707637149478047, "compact": 0.1707637149478047, "positive": 0.1707637149478047, "nonempty": 0.1707637149478047, "theory.measure": 0.24119905778809464, "pos": 0.24119905778809464, "smul": 0.24119905778809464, "assume": 0.33184996030770336}}, {"docstring": "**Alias** of the forward direction of left.inv_lt_one_iff`.\n", "keywords": {"direction of left.inv": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "left.inv": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "A subset of a monoid is contained in the submonoid it generates.\n", "keywords": {"submonoid it generates": 0.015380821171891606, "monoid is contained": 0.02570861714399338, "generates": 0.09568045026443411, "subset": 0.15831692877998726, "monoid": 0.15831692877998726, "contained": 0.15831692877998726, "submonoid": 0.15831692877998726}}, {"docstring": "Any category with coproducts and coequalizers has all colimits.  See <https://stacks.math.columbia.edu/tag/002P>.\n", "keywords": {"category with coproducts": 0.1495930091794576, "coproducts and coequalizers": 0.1495930091794576, "colimits": 0.2005079697193566, "category": 0.36073110501666333, "coproducts": 0.36073110501666333, "coequalizers": 0.36073110501666333}}, {"docstring": "Alternative version of `list.sum_update_nth` when the list is over a group\n", "keywords": {"list.sum": 0.04491197687864554, "update": 0.04491197687864554, "nth": 0.04491197687864554, "Alternative version": 0.04940384002065631, "Alternative": 0.15831692877998726, "group": 0.15831692877998726, "version": 0.29736558256021506, "list": 0.29736558256021506}}, {"docstring": " If for any three points `x < y < z`, the slope of the secant line of `f : \ud835\udd5c \u2192 \ud835\udd5c` on `[x, y]` is strictly less than the slope of the secant line of `f` on `[x, z]`, then `f` is strictly convex.\n", "keywords": {"secant line": 0.0049045089489616655, "strictly convex": 0.011929892451163002, "slope": 0.049279142876773374, "secant": 0.049279142876773374, "line": 0.049279142876773374, "strictly": 0.06476922048698919, "points": 0.09100964857932636, "convex": 0.09100964857932636}}, {"docstring": "A specialization of 'the smallest congruence relation containing a congruence relation `c`    equals `c`'.\n", "keywords": {"smallest congruence relation": 0.011041420469275918, "congruence relation": 0.02595416362410219, "smallest congruence": 0.045872129360315365, "equals": 0.05794058924527716, "congruence": 0.11107071682746067, "relation": 0.11107071682746067, "specialization": 0.19744254481508877, "smallest": 0.19744254481508877}}, {"docstring": "The variant of `chaar_self` for `haar_content`\n", "keywords": {"chaar": 0.04491197687864554, "haar": 0.04491197687864554, "content": 0.04491197687864554, "variant": 0.29736558256021506}}, {"docstring": "The union of two sets is bounded above if and only if each of the sets is.\n", "keywords": {"sets is bounded": 0.04437656514447953, "sets": 0.10901343189444501, "union": 0.19488865479360015, "bounded": 0.19488865479360015}}, {"docstring": "**Alias** of the forward direction of left.inv_le_one_iff`.\n", "keywords": {"direction of left.inv": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "left.inv": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " **Faulhaber's theorem** relating the **sum of of p-th powers** to the Bernoulli numbers: $$\\sum_{k=0}^{n-1} k^p = \\sum_{i=0}^p B_i\\binom{p+1}{i}\\frac{n^{p+1-i}}{p+1}.$$ See https://proofwiki.org/wiki/Faulhaber%27s_Formula and [orosi2018faulhaber] for the proof provided here.\n", "keywords": {"Faulhaber theorem": 0.003602872047384462, "Bernoulli numbers": 0.004525127411482514, "p-th powers": 0.008097996958838451, "proof provided": 0.010748901363648316, "sum": 0.026310753043695477, "Faulhaber": 0.0460863682476127, "binom": 0.055413277415157024, "frac": 0.055413277415157024, "Bernoulli": 0.05783031387816628, "theorem": 0.07789587456680477, "relating": 0.07789587456680477, "powers": 0.07789587456680477, "numbers": 0.07789587456680477, "p-th": 0.10312415426021215, "proof": 0.10312415426021215, "provided": 0.10312415426021215}}, {"docstring": " Sum of elements in an `subsemiring` of an `semiring` indexed by a `finset` is in the `add_subsemiring`.\n", "keywords": {"subsemiring": 0.019320982933644253, "Sum of elements": 0.021114872146320032, "semiring": 0.05331699930238388, "finset": 0.05331699930238388, "add": 0.05331699930238388, "Sum": 0.11246769819744627, "indexed": 0.11246769819744627, "elements": 0.18385948854246909}}, {"docstring": "The sheaf condition in terms of an equalizer diagram is equivalent to the reformulation in terms of a limit diagram over all `{ V : opens X // \u2203 i, V \u2264 U i }`.\n", "keywords": {"condition in terms": 0.02820023318873729, "reformulation in terms": 0.02820023318873729, "sheaf condition": 0.03718843747800602, "equalizer diagram": 0.05513073320374301, "limit diagram": 0.05513073320374301, "terms": 0.0724218931801197, "opens": 0.1161324896811994, "diagram is equivalent": 0.11979010729051287, "diagram": 0.1379692702710049, "sheaf": 0.18935428276389019, "condition": 0.18935428276389019, "equalizer": 0.18935428276389019, "equivalent": 0.18935428276389019, "reformulation": 0.18935428276389019, "limit": 0.18935428276389019}}, {"docstring": " Two lists of sublists are equal iff their joins coincide, as well as the lengths of the sublists.\n", "keywords": {"joins coincide": 0.021114872146320036, "equal iff": 0.03498702377830618, "iff their joins": 0.03498702377830618, "lists of sublists": 0.11245662598947327, "sublists are equal": 0.11245662598947329, "coincide": 0.11246769819744629, "sublists": 0.13282721021560867, "lists": 0.1838594885424691, "equal": 0.1838594885424691, "iff": 0.1838594885424691, "joins": 0.1838594885424691, "lengths": 0.1838594885424691}}, {"docstring": "If a function is `C^n` with `n \u2265 1` at a point, then it is differentiable there.\n", "keywords": {"point": 0.09568045026443411, "function": 0.15831692877998726, "differentiable": 0.15831692877998726}}, {"docstring": "The closed thickening of the empty set is empty.\n", "keywords": {"closed thickening": 0.037831312533597124, "empty set": 0.0562460611896591, "set is empty": 0.12194096740933036, "empty": 0.13945519496053638, "closed": 0.19092478917347616, "thickening": 0.19092478917347616, "set": 0.19092478917347616}}, {"docstring": " In a first-countable space, a cluster point `x` of a sequence is the limit of some subsequence.\n", "keywords": {"first-countable space": 0.00899321792126428, "cluster point": 0.00899321792126428, "space": 0.0771485953923296, "point": 0.0771485953923296, "subsequence": 0.0771485953923296, "first-countable": 0.1155310835876123, "cluster": 0.1155310835876123, "sequence": 0.1155310835876123, "limit": 0.1155310835876123}}, {"docstring": " **Equality case of Rearrangement Inequality**: Pointwise multiplication of `f` and `g`, which monovary together, is unchanged by a permutation if and only if `f \u2218 \u03c3` and `g` monovary together. Stated by permuting the entries of `g`.\n", "keywords": {"Rearrangement Inequality": 0.005072352361797871, "Equality case": 0.01078166215070159, "Pointwise multiplication": 0.01078166215070159, "case of Rearrangement": 0.01462575590160924, "Equality": 0.06111024253988877, "Inequality": 0.06111024253988877, "Pointwise": 0.06111024253988877, "monovary": 0.08014015496625508, "Rearrangement": 0.08258441204389066, "Stated by permuting": 0.1565870030412261, "case": 0.17454779110930135, "multiplication": 0.17454779110930135, "unchanged": 0.17454779110930135, "permutation": 0.17454779110930135, "permuting the entries": 0.21846569551000553, "Stated": 0.3197366584666406, "permuting": 0.42343326428770406, "entries": 0.42343326428770406}}, {"docstring": "**Fermat's Theorem**: the derivative of a function at a local minimum equals zero.\n", "keywords": {"Fermat Theorem": 0.0032610119837787367, "local minimum equals": 0.0042542192213185686, "local minimum": 0.02570861714399338, "minimum equals": 0.02570861714399338, "Fermat": 0.057012387690331526, "Theorem": 0.057012387690331526, "derivative": 0.15831692877998726, "function": 0.15831692877998726, "local": 0.15831692877998726, "minimum": 0.15831692877998726, "equals": 0.15831692877998726}}, {"docstring": "**Alias** of the reverse direction of is_min_on_dual_iff`.\n", "keywords": {"reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "min": 0.04491197687864554, "dual": 0.04491197687864554, "iff": 0.04491197687864554, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "`(n, m)` is in the reflexive-transitive closure of `~` if `i ~ pred i` and `pred i ~ i`  for all `i` between `n` and `m`.\n", "keywords": {"reflexive-transitive closure": 0.01137117696571328, "pred": 0.030180843258257848, "reflexive-transitive": 0.10603455617644456, "closure": 0.10603455617644456}}, {"docstring": "The equivalence closure of an equivalence relation r is r.\n", "keywords": {"equivalence closure": 0.05913243875864445, "equivalence relation": 0.05913243875864445, "equivalence": 0.14323823713631006, "closure": 0.19488865479360015, "relation": 0.19488865479360015}}, {"docstring": " The open thickening `thickening \u03b4 E` is contained in the closed thickening `cthickening \u03b4 E` with the same radius.\n", "keywords": {"open thickening": 0.04012804211656983, "closed thickening": 0.04012804211656983, "thickening": 0.08576708534481953, "radius": 0.10143744007623053, "open": 0.1499406051001382, "contained": 0.1499406051001382, "closed": 0.1499406051001382}}, {"docstring": "`reverse` is a no-op over `clifford_algebra_complex.Q`.\n", "keywords": {"reverse": 0.04491197687864554, "clifford": 0.04491197687864554, "algebra": 0.04491197687864554, "complex.Q": 0.04491197687864554, "no-op": 0.29736558256021506}}, {"docstring": " Let `f` be a function continuous on a convex (or, equivalently, connected) subset `D` of the real line. If `f` is differentiable on the interior of `D` and `f'` is positive, then `f` is a strictly monotone function on `D`. Note that we don't require differentiability explicitly as it already implied by the derivative being strictly positive.\n", "keywords": {"real line": 0.023286016349787653, "function continuous": 0.0582911150771627, "equivalently": 0.08674561280890349, "connected": 0.08674561280890349, "subset": 0.08674561280890349, "strictly monotone function": 0.09218300012171499, "convex": 0.12923411784309569, "line": 0.12923411784309569, "monotone function": 0.15375537185006571, "function": 0.15640341861475937, "positive": 0.15841833473776223, "strictly positive": 0.1671056551971177, "continuous": 0.176084438198033, "real": 0.176084438198033, "strictly": 0.22595166141614692, "strictly monotone": 0.23842756901983925, "require differentiability explicitly": 0.297971525630468, "require differentiability": 0.369749654255619, "differentiability explicitly": 0.369749654255619, "differentiable": 0.42603013982188465}}, {"docstring": " The neighbourhood filter of a nonzero element consists of all sets containing that element.\n", "keywords": {"nonzero element consists": 0.010494743012823167, "neighbourhood filter": 0.035715520099333646, "nonzero element": 0.05259515133015473, "element consists": 0.05259515133015473, "element": 0.13453835116331675, "neighbourhood": 0.18569843656348187, "filter": 0.18569843656348187, "nonzero": 0.18569843656348187, "consists": 0.18569843656348187, "sets": 0.18569843656348187}}, {"docstring": " `\u220f i, (1 - f i) = 1 - \u2211 i, f i * (\u220f j < i, 1 - f j)`. This formula is useful in construction of a partition of unity from a collection of \u201cbump\u201d functions.\n", "keywords": {"partition of unity": 0.09827342448325681, "bump": 0.17881754828257995, "functions": 0.17881754828257995, "formula": 0.29913195375393087, "construction": 0.29913195375393087, "partition": 0.29913195375393087, "unity": 0.29913195375393087, "collection": 0.29913195375393087}}, {"docstring": "Avoid in favor of `nat.factorial_mul_desc_factorial` if you can. \u2115-division isn't worth it.\n", "keywords": {"nat.factorial": 0.05899937629682816, "mul": 0.05899937629682816, "desc": 0.05899937629682816, "factorial": 0.05899937629682816, "Avoid in favor": 0.07796891081290885, "Avoid": 0.2005079697193566, "favor": 0.36073110501666333, "\u2115-division": 0.46553351027698087, "worth": 0.6621399683957523}}, {"docstring": "A sum over all subsets of `s \u222a {x}` is obtained by summing the sum over all subsets of `s`, and over all subsets of `s` to which one adds `x`.\n", "keywords": {"obtained by summing": 0.024843479720507586, "subsets": 0.03467656789229584, "summing the sum": 0.06380299299961537, "sum": 0.0851294669924546, "adds": 0.10556226050272582, "obtained": 0.1556959951131179, "summing": 0.1556959951131179}}, {"docstring": " The predistance on the disjoint union `\u03a3 n, X n` can be computed in any `X k` for large enough `k`.\n", "keywords": {"disjoint union": 0.015380821171891606, "union": 0.09568045026443411, "predistance": 0.15831692877998726, "disjoint": 0.15831692877998726, "computed": 0.15831692877998726, "large": 0.15831692877998726}}, {"docstring": "If the inner product of two vectors is equal to the product of their norms, then the two vectors are multiples of each other. One form of the equality case for Cauchy-Schwarz. Compare `inner_eq_norm_mul_iff`, which takes the stronger hypothesis `\u27eax, y\u27eb = \u2225x\u2225 * \u2225y\u2225`.\n", "keywords": {"vectors is equal": 0.052875099585175014, "vectors are multiples": 0.052875099585175014, "product": 0.06668731332813752, "vectors": 0.06668731332813752, "case for Cauchy-Schwarz": 0.1540963402682239, "equal": 0.16266672820049644, "multiples": 0.16266672820049644, "equality case": 0.19376182621946939, "norms": 0.2522537355178166, "norm": 0.2522537355178166, "stronger hypothesis": 0.2624300548332116, "Cauchy-Schwarz": 0.3314171624618621, "Compare": 0.3340129676395363, "mul": 0.3340129676395363, "iff": 0.3340129676395363, "form": 0.40287958959612563, "equality": 0.40287958959612563, "case": 0.40287958959612563, "hypothesis": 0.41934878347704535, "stronger": 0.49571362783747086}}, {"docstring": " `t` is in the shadow of `\ud835\udc9c` iff we can add an element to it so that the resulting finset is in `\ud835\udc9c`.\n", "keywords": {"add an element": 0.02570861714399338, "resulting finset": 0.02570861714399338, "iff": 0.09568045026443411, "shadow": 0.15831692877998726, "add": 0.15831692877998726, "element": 0.15831692877998726, "resulting": 0.15831692877998726, "finset": 0.15831692877998726}}, {"docstring": "The composition of two group homomorphisms is a group homomorphism.\n", "keywords": {"group homomorphisms": 0.05738242751169008, "group": 0.11647786950765905, "composition": 0.2040190808014209, "homomorphisms": 0.2329557390153181}}, {"docstring": " If `f` is multilinear, then `f (\u03a3_{j\u2081 \u2208 A\u2081} g\u2081 j\u2081, ..., \u03a3_{j\u2099 \u2208 A\u2099} g\u2099 j\u2099)` is the sum of `f (g\u2081 (r 1), ..., g\u2099 (r n))` where `r` ranges over all functions with `r 1 \u2208 A\u2081`, ..., `r n \u2208 A\u2099`. This follows from multilinearity by expanding successively with respect to each coordinate.\n", "keywords": {"multilinear": 0.08280939275679769, "ranges": 0.08280939275679769, "multilinearity by expanding": 0.09827342448325681, "expanding successively": 0.09827342448325681, "successively with respect": 0.09827342448325681, "sum": 0.10944015281422888, "functions": 0.10944015281422888, "coordinate": 0.23871522237376758, "multilinearity": 0.29913195375393087, "expanding": 0.29913195375393087, "successively": 0.29913195375393087, "respect": 0.29913195375393087}}, {"docstring": " For every point \u0393\u2080, and every \u201cneighbourhood\u201d s of it (described by nhds_fun), there is a smaller \u201cneighbourhood\u201d t \u2286 s, such that s is a \u201cneighbourhood\u201c of all the points in t.\n", "keywords": {"neighbourhood": 0.0133739915640319, "fun": 0.06225387256995397, "nhds": 0.09398067895883618, "smaller": 0.09398067895883618, "point": 0.1702589339849092, "points": 0.1702589339849092}}, {"docstring": "If `x \u2208 closure s` and `y \u2208 interior s`, then the segment `(x, y]` is included in `interior s`.\n", "keywords": {"interior": 0.03548996106871502, "closure": 0.09492398510093508, "segment": 0.09492398510093508, "included": 0.1408007092310104}}, {"docstring": "A ring is algebraic over the ring `A` iff it is algebraic over the field of fractions of `A`.\n", "keywords": {"field of fractions": 0.021754649297288254, "ring is algebraic": 0.054086157056202885, "algebraic": 0.05631466302318476, "iff": 0.09856372721054514, "ring": 0.09960683487150054, "field": 0.14591593823007556, "fractions": 0.14591593823007556}}, {"docstring": "If `f` is invariant under the action of a countable group `G`, and `\u03bc` is a `G`-invariant  measure with a fundamental domain `s`, then the `ess_sup` of `f` restricted to `s` is the same as  that of `f` on all of its domain.\n", "keywords": {"countable group": 0.009805590062567161, "fundamental domain": 0.01020509927619487, "invariant measure": 0.017108858828715295, "domain": 0.043493458706749734, "ess": 0.055174169687121036, "invariant": 0.0724218931801197, "group": 0.08361462103586328, "restricted": 0.08361462103586328, "action": 0.1161324896811994, "countable": 0.1161324896811994, "measure": 0.1161324896811994, "fundamental": 0.1161324896811994}}, {"docstring": " A polynomial `p` that has as many roots as its degree can be written `p = p.leading_coeff * \u220f(X - a)`, for `a` in `p.roots`.\n", "keywords": {"p.leading": 0.04491197687864554, "coeff": 0.04491197687864554, "p.roots": 0.04491197687864554, "polynomial": 0.0771485953923296, "written": 0.0771485953923296, "roots": 0.1155310835876123, "degree": 0.1155310835876123}}, {"docstring": "Closed balls defined using the distance or the edistance coincide\n", "keywords": {"Closed balls defined": 0.0025258761156662004, "Closed balls": 0.015380821171891606, "edistance coincide": 0.015380821171891606, "balls defined": 0.02570861714399338, "Closed": 0.09568045026443411, "coincide": 0.09568045026443411, "balls": 0.15831692877998726, "defined": 0.15831692877998726, "distance": 0.15831692877998726, "edistance": 0.15831692877998726}}, {"docstring": " The affine span is the `Inf` of subspaces containing the given points.\n", "keywords": {"affine span": 0.013527995261974615, "points": 0.0771485953923296, "affine": 0.1155310835876123, "span": 0.1155310835876123, "subspaces": 0.1155310835876123}}, {"docstring": "A matrix is hermitian iff the corresponding linear map is self adjoint.\n", "keywords": {"matrix is hermitian": 0.02570861714399338, "hermitian iff": 0.02570861714399338, "linear map": 0.02570861714399338, "adjoint": 0.09568045026443411, "matrix": 0.15831692877998726, "hermitian": 0.15831692877998726, "iff": 0.15831692877998726, "linear": 0.15831692877998726, "map": 0.15831692877998726}}, {"docstring": "The new distance is an extension of the original distance.\n", "keywords": {"original distance": 0.05913243875864445, "distance": 0.14323823713631006, "extension": 0.19488865479360015, "original": 0.19488865479360015}}, {"docstring": "The sum of two well-founded games is well-founded.\n", "keywords": {"well-founded games": 0.05913243875864445, "games is well-founded": 0.12748048004056906, "well-founded": 0.14323823713631006, "sum": 0.19488865479360015, "games": 0.19488865479360015}}, {"docstring": " Given a `p : R[X]` and a root `x : S`, then `p.leading_coeff \u2022 x : S` is integral over `R`.\n", "keywords": {"p.leading": 0.04491197687864554, "coeff": 0.04491197687864554, "root": 0.0771485953923296, "integral": 0.1155310835876123}}, {"docstring": "`\u220f i in nat.divisors n, cyclotomic i R = X ^ n - 1`.\n", "keywords": {"cyclotomic": 0.09568045026443411, "nat.divisors": 0.15831692877998726}}, {"docstring": " There exist two lists of `transvection_struct` such that multiplying by them on the left and on the right makes a matrix block-diagonal.\n", "keywords": {"matrix block-diagonal": 0.015380821171891606, "exist two lists": 0.02570861714399338, "makes a matrix": 0.02570861714399338, "transvection": 0.04491197687864554, "struct": 0.04491197687864554, "block-diagonal": 0.09568045026443411, "exist": 0.15831692877998726, "lists": 0.15831692877998726, "multiplying": 0.15831692877998726, "left": 0.15831692877998726, "makes": 0.15831692877998726, "matrix": 0.15831692877998726}}, {"docstring": " The centroid lies in the affine span if the number of points, converted to `k`, is not zero.\n", "keywords": {"number of points": 0.00899321792126428, "centroid lies": 0.013527995261974615, "affine span": 0.013527995261974615, "points": 0.0771485953923296, "converted": 0.0771485953923296, "centroid": 0.1155310835876123, "lies": 0.1155310835876123, "affine": 0.1155310835876123, "span": 0.1155310835876123, "number": 0.1155310835876123}}, {"docstring": "A finpartition gives rise to a setoid partition\n", "keywords": {"setoid partition": 0.015380821171891606, "finpartition gives rise": 0.02570861714399338, "partition": 0.09568045026443411, "finpartition": 0.15831692877998726, "rise": 0.15831692877998726, "setoid": 0.15831692877998726}}, {"docstring": " `primitive_roots n K` is a subset of the roots of the minimal polynomial of a primitive `n`-th root of unity `\u03bc`.\n", "keywords": {"minimal polynomial": 0.01665351519807109, "root of unity": 0.028588919216132515, "primitive": 0.050500780955931066, "roots": 0.08498011242573636, "unity": 0.09249729698685674, "subset": 0.127987181588862, "minimal": 0.127987181588862, "polynomial": 0.127987181588862, "root": 0.16996022485147272}}, {"docstring": " `tail` and `init` commute. We state this lemma in a non-dependent setting, as otherwise it would involve a cast to convince Lean that the two types are equal, making it harder to use.\n", "keywords": {"tail": 0.05899937629682816, "init": 0.05899937629682816, "commute": 0.05899937629682816, "convince Lean": 0.14487691114143314, "non-dependent setting": 0.18075564686791562, "types are equal": 0.18075564686791562, "making it harder": 0.18075564686791562, "Lean": 0.2718250226855089, "state this lemma": 0.2766850298235749, "involve a cast": 0.2766850298235749, "cast to convince": 0.2766850298235749, "setting": 0.32883716426354986, "equal": 0.32883716426354986, "making": 0.32883716426354986, "state": 0.46553351027698087, "lemma": 0.46553351027698087, "non-dependent": 0.46553351027698087, "involve": 0.46553351027698087, "cast": 0.46553351027698087, "convince": 0.46553351027698087}}, {"docstring": " If `f x - x` is an integer number `m` for some point `x`, then `\u03c4 f = m`. On the circle this means that a map with a fixed point has rotation number zero.\n", "keywords": {"integer number": 0.07640277746686783, "number": 0.18160281635537215, "point": 0.18160281635537215, "integer": 0.1954257385705354, "fixed point": 0.19932127536432387, "rotation number": 0.19932127536432387, "point has rotation": 0.3770878952164064, "circle": 0.45757843052457975, "map": 0.45757843052457975, "fixed": 0.45757843052457975, "rotation": 0.45757843052457975}}, {"docstring": "The function we are mapping along is `S\u207b\u00b9` in [Halmos, \u00a759],  where `S` is the map in `map_prod_mul_eq`.\n", "keywords": {"Halmos": 0.034278050535979626, "prod": 0.05393656033701752, "mul": 0.05393656033701752, "map": 0.13453835116331675, "function": 0.18569843656348187, "mapping": 0.18569843656348187}}, {"docstring": "The exponential map in `\ud835\udd42 = \u211d` or `\ud835\udd42 = \u2102` has derivative `1` at zero.\n", "keywords": {"exponential map": 0.02570861714399338, "derivative": 0.09568045026443411, "exponential": 0.15831692877998726, "map": 0.15831692877998726}}, {"docstring": "A Cauchy sequence in a complete space converges\n", "keywords": {"complete space converges": 0.0025258761156662004, "Cauchy sequence": 0.013797198203993007, "space converges": 0.015380821171891606, "complete space": 0.02570861714399338, "Cauchy": 0.08596317751626563, "converges": 0.09568045026443411, "sequence": 0.15831692877998726, "complete": 0.15831692877998726, "space": 0.15831692877998726}}, {"docstring": "Alternative version with a weaker hypothesis on `r`, but assuming the measure is volume.\n", "keywords": {"Alternative version": 0.04940384002065631, "measure is volume": 0.04940384002065631, "weaker hypothesis": 0.09700399286574239, "assuming the measure": 0.09700399286574239, "Alternative": 0.15831692877998726, "volume": 0.15831692877998726, "version": 0.29736558256021506, "weaker": 0.29736558256021506, "hypothesis": 0.29736558256021506, "assuming": 0.29736558256021506, "measure": 0.29736558256021506}}, {"docstring": " *Diagonalization theorem*, *spectral theorem* for matrices; A hermitian matrix can be diagonalized by a change of basis.  For the spectral theorem on linear maps, see `diagonalization_basis_apply_self_apply`.\n", "keywords": {"hermitian matrix": 0.04745714154976425, "spectral theorem": 0.07301322054011963, "Diagonalization theorem": 0.07616923544888002, "Diagonalization": 0.08835181006468533, "apply": 0.09285612683000731, "change of basis": 0.12007633988505088, "basis": 0.12234888729382003, "theorem": 0.13351569537490307, "matrices": 0.14753183234220418, "spectral": 0.15905718450740072, "hermitian": 0.21285441221553603, "matrix": 0.21285441221553603, "diagonalized": 0.21285441221553603, "change": 0.21285441221553603, "linear maps": 0.2222228741459097, "maps": 0.3754152489212834, "linear": 0.4843133536853139, "theorem on linear": 0.5389310046676369}}, {"docstring": "There exists a vertex of minimal degree. Note the assumption of being nonempty is necessary, as the lemma implies there exists a vertex.\n", "keywords": {"minimal degree": 0.04220829187219763, "exists a vertex": 0.06308029827222979, "exists": 0.1443434034241445, "degree": 0.1600514523587571, "implies there exists": 0.1849037767794334, "vertex": 0.19402892330378615, "vertex of minimal": 0.21877105951027842, "minimal": 0.2530367690088724, "Note the assumption": 0.27432053812932977, "Note": 0.39823908368262456, "lemma implies": 0.41281681384501107, "assumption": 0.540549862748956, "nonempty": 0.540549862748956, "lemma": 0.540549862748956, "implies": 0.540549862748956}}, {"docstring": "If `a` commutes with both `b` and `c`, then it commutes with their sum.\n", "keywords": {"commutes": 0.11357121248292479, "sum": 0.12363091320521931}}, {"docstring": "If `p` lifts and `(r : R)` then `r \u2022 p` lifts.\n", "keywords": {"lifts": 0.05776554179380615}}, {"docstring": "Sum of a list of elements in an `add_submonoid` is in the `add_submonoid`.\n", "keywords": {"add": 0.02184815412823125, "submonoid": 0.02184815412823125, "list of elements": 0.040564923574392765, "Sum": 0.12156210109285605, "list": 0.19744254481508877, "elements": 0.19744254481508877}}, {"docstring": " A version of `coord_change_apply` that fully unfolds `coord_change`. The right-hand side is ugly, but has good definitional properties for specifically defined trivializations.\n", "keywords": {"coord": 0.02409537683162935, "change": 0.02409537683162935, "fully unfolds": 0.038228265724809404, "apply": 0.07388986235567108, "unfolds": 0.15219509685315075, "specifically defined trivializations": 0.1994558251780519, "version": 0.2419307581620854, "fully": 0.2419307581620854, "side is ugly": 0.2529606141172602, "defined trivializations": 0.2529606141172602, "good definitional properties": 0.31483308693172435, "right-hand side": 0.3819154413401555, "good definitional": 0.3819154413401555, "definitional properties": 0.3819154413401555, "properties for specifically": 0.3819154413401555, "specifically defined": 0.3819154413401555, "ugly": 0.3840365975713041, "trivializations": 0.3840365975713041, "right-hand": 0.5257059278079758, "side": 0.5257059278079758}}, {"docstring": "`sinh` is surjective, `\u2200 b, \u2203 a, sinh a = b`. In this case, we use `a = arsinh b`.\n", "keywords": {"sinh": 0.06699974934534486, "surjective": 0.1325513591249599, "case": 0.3467063614068829, "arsinh": 0.3467063614068829}}, {"docstring": "A set is residual (comeagre) if and only if it includes a dense `G\u03b4` set.\n", "keywords": {"includes a dense": 0.022138323509052035, "comeagre": 0.054709255964732355, "set is residual": 0.07301337118426866, "residual": 0.11521656054299435, "dense": 0.11521656054299435, "set": 0.13667842094541144, "includes": 0.1879836817695587}}, {"docstring": "A filter lies below the neighborhood filter at `a` iff it contains every open set around `a`.\n", "keywords": {"open set": 0.01904688389482227, "filter lies": 0.025536557885239508, "neighborhood filter": 0.025536557885239508, "filter": 0.09106811155038866, "iff": 0.09202664026077896, "lies": 0.1367145963576765, "neighborhood": 0.1367145963576765, "open": 0.1367145963576765, "set": 0.1367145963576765}}, {"docstring": "Congruence lemma for constructing `ex.prod`.\n", "keywords": {"ex.prod": 0.04491197687864554, "Congruence lemma": 0.04940384002065631, "lemma for constructing": 0.04940384002065631, "Congruence": 0.15831692877998726, "constructing": 0.15831692877998726, "lemma": 0.29736558256021506}}, {"docstring": "A circulant of `v` is symmetric iff `v` equals its reverse.\n", "keywords": {"equals its reverse": 0.009239332327148086, "symmetric iff": 0.015380821171891606, "iff": 0.09568045026443411, "equals": 0.09568045026443411, "reverse": 0.09568045026443411, "circulant": 0.15831692877998726, "symmetric": 0.15831692877998726}}, {"docstring": " The `n`-th Fr\u00e9chet derivative applied to a vector `(m 0, ..., m (n-1))` is the derivative multiplied by the product of the `m i`s.\n", "keywords": {"Fr\u00e9chet derivative applied": 0.001037518490902873, "Fr\u00e9chet derivative": 0.00893113435400529, "derivative applied": 0.016245817372079578, "derivative multiplied": 0.016245817372079578, "Fr\u00e9chet": 0.06295532167170864, "derivative": 0.07030442419566416, "vector": 0.08179429269966654, "applied": 0.11369206228658875, "multiplied": 0.11369206228658875, "product": 0.11369206228658875}}, {"docstring": " In a strictly convex space, two vectors `x`, `y` are in the same ray if and only if the triangle inequality for `x` and `y` becomes an equality.\n", "keywords": {"strictly convex space": 0.0025258761156662004, "convex space": 0.015380821171891606, "strictly convex": 0.02570861714399338, "triangle inequality": 0.02570861714399338, "space": 0.09568045026443411, "vectors": 0.09568045026443411, "equality": 0.09568045026443411, "strictly": 0.15831692877998726, "convex": 0.15831692877998726, "ray": 0.15831692877998726, "triangle": 0.15831692877998726, "inequality": 0.15831692877998726}}, {"docstring": "Auxiliary lemma for `biprod.unique_up_to_iso`.\n", "keywords": {"biprod.unique": 0.04491197687864554, "iso": 0.04491197687864554, "Auxiliary lemma": 0.04940384002065631, "Auxiliary": 0.15831692877998726, "lemma": 0.29736558256021506}}, {"docstring": "Two additive congruence relations are equal iff their underlying binary relations are equal.\n", "keywords": {"additive congruence relations": 0.008897885504732549, "underlying binary relations": 0.008897885504732549, "relations are equal": 0.024140905658634568, "additive congruence": 0.038584678130008584, "iff their underlying": 0.038584678130008584, "underlying binary": 0.038584678130008584, "congruence relations": 0.0431505389096901, "equal iff": 0.0431505389096901, "binary relations": 0.0431505389096901, "relations": 0.10730569120144322, "equal": 0.10730569120144322, "additive": 0.19274649316101516, "congruence": 0.19274649316101516, "iff": 0.19274649316101516, "underlying": 0.19274649316101516, "binary": 0.19274649316101516}}, {"docstring": " In the specific case of multilinear maps on spaces indexed by `fin (n+1)`, where one can build an element of `\u03a0(i : fin (n+1)), M i` using `cons`, one can express directly the multiplicativity of a multilinear map along the first variable.\n", "keywords": {"specific case": 0.019759017604293553, "spaces indexed": 0.019759017604293553, "build an element": 0.019759017604293553, "express directly": 0.019759017604293553, "directly the multiplicativity": 0.019759017604293553, "fin": 0.020224371215251474, "multilinear maps": 0.021261181864573712, "case of multilinear": 0.04925743771710562, "maps on spaces": 0.04925743771710562, "cons": 0.055012255605756503, "multilinear": 0.07214318191126844, "variable": 0.0937866855411403, "specific": 0.13919828894679062, "case": 0.13919828894679062, "spaces": 0.13919828894679062, "indexed": 0.13919828894679062, "build": 0.13919828894679062, "element": 0.13919828894679062, "express": 0.13919828894679062, "directly": 0.13919828894679062}}, {"docstring": " If the angle between two vectors is 0, the norm of their sum equals the sum of their norms.\n", "keywords": {"sum equals": 0.029938721750981816, "equals the sum": 0.06932480070695124, "sum": 0.09960683487150054, "angle": 0.14591593823007556, "vectors": 0.14591593823007556, "equals": 0.14591593823007556, "norm": 0.1992136697430011, "norms": 0.1992136697430011}}, {"docstring": "See `is_coprime.prod_right` for the corresponding lemma about `is_coprime`\n", "keywords": {"coprime.prod": 0.04491197687864554, "coprime": 0.04491197687864554, "lemma": 0.15831692877998726}}, {"docstring": "Bernoulli's inequality reformulated to estimate `(n : K)`.\n", "keywords": {"Bernoulli inequality reformulated": 0.01655915082773619, "Bernoulli inequality": 0.04940384002065631, "reformulated to estimate": 0.04940384002065631, "inequality reformulated": 0.09700399286574239, "Bernoulli": 0.15831692877998726, "estimate": 0.15831692877998726, "inequality": 0.29736558256021506, "reformulated": 0.29736558256021506}}, {"docstring": " If $x \u2264 f x$ for all $x$ (we write this as `id \u2264 f`), then the same is true for any iterate `f^[n]` of `f`.\n", "keywords": {"iterate": 0.06844581806138879, "write": 0.09568045026443411, "true": 0.09568045026443411}}, {"docstring": " If a function `f` is concave on `s`, then the value it takes at some center of mass of points of `s` is greater than the value it takes on one of those points.\n", "keywords": {"center of mass": 0.013095151449018445, "mass of points": 0.039755149664920254, "points": 0.07030442419566416, "function": 0.08179429269966654, "concave": 0.11369206228658875, "center": 0.11369206228658875, "mass": 0.11369206228658875, "greater": 0.11369206228658875}}, {"docstring": "A strongly measurable function is almost everywhere measurable.\n", "keywords": {"strongly measurable function": 0.012476328642182708, "strongly measurable": 0.05913243875864445, "measurable function": 0.05913243875864445, "measurable": 0.14323823713631006, "strongly": 0.19488865479360015, "function": 0.19488865479360015}}, {"docstring": "**Alias** of the reverse direction of sub_nonpos`.\n", "keywords": {"reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "nonpos": 0.04491197687864554, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " Given a particular witness to an element being algebraic over an algebra `R \u2192 S`, We can localize to a submonoid containing the leading coefficient to make it integral. Explicitly, the map between the localizations will be an integral ring morphism\n", "keywords": {"element being algebraic": 0.03039516180502021, "leading coefficient": 0.03039516180502021, "coefficient to make": 0.03039516180502021, "integral ring morphism": 0.060585054148254415, "algebra": 0.11716529569858515, "make it integral": 0.12682109168937294, "ring morphism": 0.15219636652310117, "integral ring": 0.15889118945330435, "integral": 0.1637394370252445, "witness": 0.17175141526611762, "element": 0.17175141526611762, "algebraic": 0.17175141526611762, "localize": 0.17175141526611762, "submonoid": 0.17175141526611762, "leading": 0.17175141526611762, "coefficient": 0.17175141526611762, "make": 0.17175141526611762, "Explicitly": 0.205890188530506, "morphism": 0.3155033075714363, "map": 0.41867195128317747}}, {"docstring": "**Alias** of ssubset_or_eq_of_subset`.\n", "keywords": {"Alias": 0.030396371632413578, "subset": 0.04491197687864554, "ssubset": 0.09568045026443411}}, {"docstring": "The sum of two `C^n` functions on a domain is `C^n`.\n", "keywords": {"functions": 0.09568045026443411, "sum": 0.15831692877998726, "domain": 0.15831692877998726}}, {"docstring": " If there is a primitive `n`-th root of unity in `K`, then `cyclotomic' n K` comes from a monic polynomial with integer coefficients.\n", "keywords": {"integer coefficients": 0.015380821171891606, "root of unity": 0.02570861714399338, "monic polynomial": 0.02570861714399338, "polynomial with integer": 0.02570861714399338, "cyclotomic": 0.04491197687864554, "primitive": 0.09568045026443411, "coefficients": 0.09568045026443411, "root": 0.15831692877998726, "unity": 0.15831692877998726, "monic": 0.15831692877998726, "polynomial": 0.15831692877998726, "integer": 0.15831692877998726}}, {"docstring": "Composing a `prod.map` with another `prod.map` is equal to a single `prod.map` of composed functions, fully applied.\n", "keywords": {"fully applied": 0.009880128750971665, "prod.map": 0.011769747790693987, "composed functions": 0.014693759054709975, "Composing": 0.09891140904350601, "single": 0.09891140904350601, "functions": 0.09891140904350601, "fully": 0.09891140904350601, "applied": 0.09891140904350601, "equal": 0.14640352592168662, "composed": 0.14640352592168662}}, {"docstring": "`succ_above` is injective at the pivot\n", "keywords": {"succ": 0.04491197687864554, "pivot": 0.15831692877998726, "injective": 0.29736558256021506}}, {"docstring": " `smul` is a closed map in the second argument.  The lemma that `smul` is a closed map in the first argument (for a normed space over a complete normed field) is `is_closed_map_smul_left` in `analysis.normed_space.finite_dimension`.\n", "keywords": {"closed map": 0.029709164426189878, "smul": 0.03066820110400703, "closed": 0.07894147206098148, "map": 0.07894147206098148, "argument": 0.10913304520895652, "complete normed field": 0.1342545151162162, "normed field": 0.21841904421327585, "normed": 0.2490980054046153, "left": 0.2645596274674012, "analysis.normed": 0.2645596274674012, "space.finite": 0.2645596274674012, "dimension": 0.2645596274674012, "normed space": 0.28676451125722124, "complete normed": 0.28676451125722124, "field": 0.3598268592587876, "lemma": 0.447328000380988, "space": 0.447328000380988, "complete": 0.447328000380988}}, {"docstring": " If the liminf and the limsup of a function coincide, then the limit of the function exists and has the same value\n", "keywords": {"function coincide": 0.008957571248366441, "function exists": 0.011901756931844268, "function": 0.05850971036743835, "coincide": 0.07586813767572746, "liminf": 0.1005112751044989, "limsup": 0.1005112751044989, "limit": 0.1005112751044989, "exists": 0.1005112751044989}}, {"docstring": " The angle between two nonzero vectors is `\u03b8` if and only if the second vector is the first rotated by `\u03b8` and scaled by a positive real.\n", "keywords": {"positive real": 0.012465543599998139, "nonzero vectors": 0.01909557836111971, "real": 0.09101163530720666, "angle": 0.135280142484453, "nonzero": 0.135280142484453, "rotated": 0.135280142484453, "scaled": 0.135280142484453, "positive": 0.135280142484453, "vectors": 0.138510866896558, "vector": 0.138510866896558}}, {"docstring": " **Rolle's Theorem**, a version for a function on an open interval: if `f` has derivative `f'` on `(a, b)` and has the same limit `l` at `\ud835\udcdd[>] a` and `\ud835\udcdd[<] b`, then `f' c = 0` for some `c \u2208 (a, b)`.\n", "keywords": {"Rolle Theorem": 0.00165133706345023, "open interval": 0.005380746843605012, "Rolle": 0.04060313590085896, "Theorem": 0.04060313590085896, "interval": 0.06341998722529081, "derivative": 0.06341998722529081, "limit": 0.06341998722529081, "version": 0.08438900089923473, "function": 0.08438900089923473, "open": 0.08438900089923473}}, {"docstring": "We can assume that a minimal solution to `a ^ 4 + b ^ 4 = c ^ 2` has `a` odd.\n", "keywords": {"minimal solution": 0.013527995261974615, "odd": 0.04491197687864554, "assume": 0.1155310835876123, "minimal": 0.1155310835876123, "solution": 0.1155310835876123}}, {"docstring": "Show that `to_envel_group.map_aux` sends equivalent expressions to equal terms.\n", "keywords": {"sends equivalent expressions": 0.0025258761156662004, "sends equivalent": 0.015380821171891606, "equal terms": 0.015380821171891606, "equivalent expressions": 0.02570861714399338, "expressions to equal": 0.02570861714399338, "envel": 0.04491197687864554, "group.map": 0.04491197687864554, "aux": 0.04491197687864554, "Show": 0.09568045026443411, "sends": 0.09568045026443411, "terms": 0.09568045026443411, "equivalent": 0.15831692877998726, "expressions": 0.15831692877998726, "equal": 0.15831692877998726}}, {"docstring": " Note: this lemma is specifically about `fintype.of_is_empty`. For a statement about arbitrary `fintype` instances, use `fintype.card_eq_zero_iff`.\n", "keywords": {"lemma is specifically": 0.04188746641162499, "Note": 0.05899937629682816, "fintype.of": 0.05899937629682816, "empty": 0.05899937629682816, "fintype": 0.17881754828257995, "instances": 0.17881754828257995, "fintype.card": 0.17881754828257995, "iff": 0.17881754828257995, "statement about arbitrary": 0.18075564686791562, "lemma": 0.2005079697193566, "specifically": 0.2005079697193566, "arbitrary": 0.32883716426354986, "statement": 0.46553351027698087}}, {"docstring": " The weighted sum is unaffected by adding the base point, whether or not present, to the set of points.\n", "keywords": {"base point": 0.01347319449596249, "weighted sum": 0.018310930906343142, "sum is unaffected": 0.018310930906343142, "unaffected by adding": 0.018310930906343142, "adding the base": 0.018310930906343142, "set of points": 0.03342034432864887, "present": 0.09017440044927587, "point": 0.09913871915264066, "points": 0.09913871915264066, "weighted": 0.13409574860218185, "sum": 0.13409574860218185, "unaffected": 0.13409574860218185, "adding": 0.13409574860218185, "base": 0.13409574860218185, "set": 0.13409574860218185}}, {"docstring": "Polarization identity: The real inner product, in terms of the norm.\n", "keywords": {"Polarization identity": 0.009239332327148086, "real inner product": 0.015380821171891606, "Polarization": 0.09568045026443411, "identity": 0.09568045026443411, "product": 0.09568045026443411, "norm": 0.09568045026443411, "real": 0.15831692877998726, "terms": 0.15831692877998726}}, {"docstring": " `matrix.to_lin'` is a particular case of `matrix.to_lin`, for the standard basis `pi.basis_fun R n`.\n", "keywords": {"matrix.to": 0.020944683225967962, "standard basis": 0.0233550736766052, "pi.basis": 0.05632962681207606, "lin": 0.07442578585270058, "basis": 0.11840455484321102, "fun": 0.11840455484321102, "case": 0.19274649316101516, "standard": 0.19274649316101516}}, {"docstring": "**Alias** of the reverse direction of int.nat_abs_odd`.\n", "keywords": {"direction of int.nat": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "abs": 0.04491197687864554, "odd": 0.04491197687864554, "int.nat": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "Given `pb : power_basis K S`, the trace of `pb.gen` is `-(minpoly K pb.gen).next_coeff`.\n", "keywords": {"minpoly K pb.gen": 0.039755149664920254, "power": 0.05393656033701752, "coeff": 0.05393656033701752, "pb.gen": 0.07030442419566416, "basis": 0.11369206228658875, "minpoly": 0.11369206228658875, "trace": 0.18569843656348187}}, {"docstring": "The class number of a principal ideal domain is `1`.\n", "keywords": {"principal ideal domain": 0.03339840940482845, "class number": 0.09700399286574239, "principal ideal": 0.09700399286574239, "ideal domain": 0.09700399286574239, "class": 0.29736558256021506, "number": 0.29736558256021506, "principal": 0.29736558256021506, "ideal": 0.29736558256021506, "domain": 0.29736558256021506}}, {"docstring": "Two pre-sets are equivalent iff they have the same members.\n", "keywords": {"pre-sets are equivalent": 0.09700399286574239, "equivalent iff": 0.09700399286574239, "members": 0.15831692877998726, "pre-sets": 0.29736558256021506, "equivalent": 0.29736558256021506, "iff": 0.29736558256021506}}, {"docstring": "The (Bochner) integral of the product of two independent, nonnegative random  variables is the product of their integrals. The proof is just plumbing around  `lintegral_mul_eq_lintegral_mul_lintegral_of_indep_fun'`.\n", "keywords": {"nonnegative random variables": 0.004217040061470593, "nonnegative random": 0.022983382088890694, "random variables": 0.03158997523342065, "Bochner": 0.04496295150814336, "lintegral": 0.04694007981799093, "product": 0.06198741173857074, "mul": 0.08964178424411055, "independent": 0.12838795225931474, "nonnegative": 0.12838795225931474, "random": 0.1749931650410544, "variables": 0.1749931650410544, "integral": 0.20101668037511172, "integrals": 0.20101668037511172, "indep": 0.24665413347420567, "fun": 0.24665413347420567, "proof": 0.42418734714194095, "plumbing": 0.42418734714194095}}, {"docstring": " In a linearly ordered field with the order topology, if `f` tends to a negative constant `C` and `g` tends to `at_top` then `f * g` tends to `at_bot`.\n", "keywords": {"linearly ordered field": 0.0016012214736657916, "order topology": 0.00899321792126428, "negative constant": 0.00899321792126428, "linearly ordered": 0.013527995261974615, "ordered field": 0.013527995261974615, "top": 0.04491197687864554, "bot": 0.04491197687864554, "topology": 0.0771485953923296, "constant": 0.0771485953923296, "linearly": 0.1155310835876123, "ordered": 0.1155310835876123, "field": 0.1155310835876123, "order": 0.1155310835876123, "negative": 0.1155310835876123}}, {"docstring": "In a proper pseudometric space, all spheres are compact.\n", "keywords": {"proper pseudometric space": 0.016559150827736194, "pseudometric space": 0.04940384002065631, "spheres are compact": 0.04940384002065631, "proper pseudometric": 0.09700399286574239, "space": 0.15831692877998726, "compact": 0.15831692877998726, "proper": 0.29736558256021506, "pseudometric": 0.29736558256021506, "spheres": 0.29736558256021506}}, {"docstring": "Multiplicative congruence relations preserve integer powers.\n", "keywords": {"Multiplicative congruence relations": 0.01655915082773619, "preserve integer powers": 0.016559150827736194, "congruence relations preserve": 0.03339840940482845, "relations preserve integer": 0.03339840940482845, "Multiplicative congruence": 0.04940384002065631, "integer powers": 0.04940384002065631, "congruence relations": 0.09700399286574239, "relations preserve": 0.09700399286574239, "preserve integer": 0.09700399286574239, "Multiplicative": 0.15831692877998726, "powers": 0.15831692877998726, "congruence": 0.29736558256021506, "relations": 0.29736558256021506, "preserve": 0.29736558256021506, "integer": 0.29736558256021506}}, {"docstring": " A set is a neighborhood of `a` within `(a, +\u221e)` if and only if it contains an interval `(a, u]` with `a < u`.\n", "keywords": {"interval": 0.060154590733539764, "set": 0.0771485953923296, "neighborhood": 0.0771485953923296}}, {"docstring": "If `a \u2208 s` is known, see also `finset.card_insert_of_mem` and `finset.card_insert_of_not_mem`.\n", "keywords": {"finset.card": 0.02245598843932277, "insert": 0.02245598843932277, "mem": 0.02245598843932277}}, {"docstring": "The ray given by the negation of a nonzero vector.\n", "keywords": {"nonzero vector": 0.015380821171891606, "vector": 0.09568045026443411, "ray": 0.15831692877998726, "negation": 0.15831692877998726, "nonzero": 0.15831692877998726}}, {"docstring": "A subfield is closed under subtraction.\n", "keywords": {"closed under subtraction": 0.04940384002065631, "subfield is closed": 0.09700399286574239, "subtraction": 0.15831692877998726, "subfield": 0.29736558256021506, "closed": 0.29736558256021506}}, {"docstring": " A polynomial over the integers is divisible by `n : \u2115` if and only if it is zero over `zmod n`.\n", "keywords": {"integers is divisible": 0.02570861714399338, "zmod": 0.09568045026443411, "polynomial": 0.15831692877998726, "integers": 0.15831692877998726, "divisible": 0.15831692877998726}}, {"docstring": "For nonzero `a : F`, `quadratic_char F a = 1 \u2194 is_square a`.\n", "keywords": {"quadratic": 0.04491197687864554, "nonzero": 0.0771485953923296, "char": 0.0771485953923296, "square": 0.0771485953923296}}, {"docstring": "An additive unit in an additive monoid is add-regular.\n", "keywords": {"monoid is add-regular": 0.022885248721446715, "additive unit": 0.04212793185246166, "additive monoid": 0.04212793185246166, "additive": 0.10586606907408062, "add-regular": 0.11718348279991213, "unit": 0.19092478917347616, "monoid": 0.19092478917347616}}, {"docstring": "This relies on `default \u2115 = 0`.\n", "keywords": {"default": 0.15831692877998726, "relies": 0.29736558256021506}}, {"docstring": " If `p` is an invariant submodule of an endomorphism `f`, then the `\u03bc`-eigenspace of the restriction of `f` to `p` is a submodule of the `\u03bc`-eigenspace of `f`.\n", "keywords": {"invariant submodule": 0.011394535228919686, "eigenspace": 0.03086786478138232, "submodule": 0.05236195680757446, "endomorphism": 0.08136026145759775, "invariant": 0.1075796554388875, "restriction": 0.1075796554388875}}, {"docstring": " A helper lemma used to prove that the (scalar or usual) product of a function that tends to zero and a bounded function tends to zero. This lemma is formulated for any binary operation `op : E \u2192 F \u2192 G` with an estimate `\u2225op x y\u2225 \u2264 \u2225x\u2225 * \u2225y\u2225` instead of multiplication so that it can be applied to `(*)`, `flip (*)`, `(\u2022)`, and `flip (\u2022)`.\n", "keywords": {"scalar or usual": 0.013527995261974622, "bounded function": 0.028818579880008327, "helper lemma": 0.04743175126848605, "flip": 0.07864511008830634, "function": 0.0884660069427631, "scalar": 0.11553108358761233, "usual": 0.11553108358761233, "product": 0.11553108358761233, "binary operation": 0.14066026668792161, "lemma": 0.1430164761977166, "helper": 0.15831692877998726, "prove": 0.15831692877998726, "bounded": 0.15831692877998726, "lemma is formulated": 0.2526385806553442, "operation": 0.3120806116026233, "estimate": 0.3120806116026233, "formulated": 0.3951375787241905, "binary": 0.3951375787241905, "multiplication": 0.3951375787241905, "applied": 0.3951375787241905}}, {"docstring": "An additive submonoid `S` includes `closure s` if and only if it includes `s`\n", "keywords": {"additive submonoid": 0.013546417228156258, "includes": 0.05332403764722467, "submonoid": 0.09492398510093508, "closure": 0.09492398510093508, "additive": 0.1408007092310104}}, {"docstring": "**Alias** of the forward direction of asymptotics.is_O_norm_left`.\n", "keywords": {"direction of asymptotics.is": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "norm": 0.04491197687864554, "left": 0.04491197687864554, "asymptotics.is": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "When Inf s < b, there is an element a in s with a < b, if s is nonempty and the order is a linear order.\n", "keywords": {"linear order": 0.02635223776265893, "order": 0.09269208833952335, "element": 0.1384995633470844, "nonempty": 0.1384995633470844, "linear": 0.1384995633470844}}, {"docstring": " If a map `f` is `contracting_with K`, and `s` is a forward-invariant set, then restriction of `f` to `s` is `contracting_with K` as well.\n", "keywords": {"forward-invariant set": 0.013089923375762187, "contracting": 0.02006098734604785, "map": 0.09329120537733218, "set": 0.09329120537733218, "forward-invariant": 0.1384995633470844, "restriction": 0.1384995633470844}}, {"docstring": "Convex hull of a finite set is compact.\n", "keywords": {"Convex hull": 0.04940384002065631, "set is compact": 0.04940384002065631, "finite set": 0.09700399286574239, "Convex": 0.15831692877998726, "compact": 0.15831692877998726, "hull": 0.29736558256021506, "finite": 0.29736558256021506, "set": 0.29736558256021506}}, {"docstring": " A pseudometric space is second countable if, for every `\u03b5 > 0`, there is a countable set which is `\u03b5`-dense.\n", "keywords": {"pseudometric space": 0.019557279302732804, "countable set": 0.02635223776265893, "dense": 0.054709255964732355, "countable": 0.09269208833952335, "pseudometric": 0.1384995633470844, "space": 0.1384995633470844, "set": 0.1384995633470844}}, {"docstring": "For an index `i : fin n`, the `nth` element of `scanl` of a vector `v : vector \u03b1 n` at `i.succ`, is equal to the application function `f : \u03b2 \u2192 \u03b1 \u2192 \u03b2` of the `i.cast_succ` element of `scanl f b v` and `nth v i`.  This lemma is the `nth` version of `scanl_cons`.\n", "keywords": {"application function": 0.019827644359346124, "element": 0.042789913852303144, "nth": 0.06415375283655254, "scanl": 0.06415375283655254, "vector": 0.08697335070716745, "i.succ": 0.0880947088967354, "i.cast": 0.0880947088967354, "succ": 0.0880947088967354, "index": 0.12212270075145082, "fin": 0.12212270075145082, "function": 0.12212270075145082, "equal": 0.15920178770005614, "application": 0.15920178770005614, "cons": 0.25122566563996607, "version": 0.3257561086225569, "lemma": 0.3967221821427092}}, {"docstring": "The weak-star topology is coarser than the dual-norm topology.\n", "keywords": {"weak-star topology": 0.0562460611896591, "dual-norm topology": 0.0562460611896591, "topology is coarser": 0.12194096740933039, "topology": 0.13945519496053638, "weak-star": 0.19092478917347616, "coarser": 0.19092478917347616, "dual-norm": 0.19092478917347616}}, {"docstring": "Ring homomorphisms map zero to zero.\n", "keywords": {"Ring homomorphisms map": 0.0025258761156662004, "Ring homomorphisms": 0.015380821171891606, "homomorphisms map": 0.02570861714399338, "Ring": 0.09568045026443411, "homomorphisms": 0.15831692877998726, "map": 0.15831692877998726}}, {"docstring": " Swapping elements in `\u03c3` with equal values in `v` result in zero if the swap has no effect on the quotient.\n", "keywords": {"Swapping elements": 0.00899321792126428, "Swapping": 0.0771485953923296, "result": 0.0771485953923296, "quotient": 0.0771485953923296, "elements": 0.1155310835876123, "equal": 0.1155310835876123, "swap": 0.1155310835876123, "effect": 0.1155310835876123}}, {"docstring": "`![a, b, ...] 1` is equal to `b`.   The simplifier needs a special lemma for length `\u2265 2`, in addition to  `cons_val_succ`, because `1 : fin 1 = 0 : fin 1`.\n", "keywords": {"fin": 0.10632924603153436, "lemma for length": 0.26554864175606696, "cons": 0.312362147990656, "val": 0.312362147990656, "succ": 0.312362147990656, "special lemma": 0.3431605285562027, "equal": 0.4122906395087072, "length": 0.41512657722586704, "simplifier": 0.5054575682917825, "special": 0.5054575682917825, "lemma": 0.5054575682917825, "addition": 0.5054575682917825}}, {"docstring": "**Alias** of the reverse direction of finset.sup_indep_iff_pairwise_disjoint`.\n", "keywords": {"direction of finset.sup": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "indep": 0.04491197687864554, "iff": 0.04491197687864554, "pairwise": 0.04491197687864554, "disjoint": 0.04491197687864554, "finset.sup": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "Pushforward a `nontrivial` instance along an injective function.\n", "keywords": {"nontrivial": 0.04491197687864554, "injective function": 0.04940384002065631, "Pushforward": 0.15831692877998726, "instance": 0.15831692877998726, "function": 0.15831692877998726, "injective": 0.29736558256021506}}, {"docstring": "The function `x ^ (-y)` tends to `0` at `+\u221e` for any positive real `y`.\n", "keywords": {"positive real": 0.015380821171891606, "function": 0.09568045026443411, "real": 0.09568045026443411, "positive": 0.15831692877998726}}, {"docstring": " Let `f : \u211d \u2192 \u211d` be a differentiable function. If `f'` is nonnegative, then `f` is a monotone function.\n", "keywords": {"differentiable function": 0.04479060836584392, "function": 0.11121265807107177, "monotone function": 0.11213682462213963, "differentiable": 0.19274072340671292, "nonnegative": 0.3467063614068829, "monotone": 0.45332097725137205}}, {"docstring": "Colex doesn't care if you remove the other set\n", "keywords": {"Colex": 0.15831692877998726, "set": 0.15831692877998726, "care": 0.29736558256021506, "remove": 0.29736558256021506}}, {"docstring": "`choose n r` is maximised when `r` is `n/2`.\n", "keywords": {"choose": 0.09568045026443411, "maximised": 0.15831692877998726}}, {"docstring": "A semiring is local if it is nontrivial and the set of nonunits is closed under the addition.\n", "keywords": {"semiring is local": 0.013527995261974615, "set of nonunits": 0.013527995261974615, "nonunits is closed": 0.013527995261974615, "addition": 0.0771485953923296, "semiring": 0.1155310835876123, "local": 0.1155310835876123, "nontrivial": 0.1155310835876123, "set": 0.1155310835876123, "nonunits": 0.1155310835876123, "closed": 0.1155310835876123}}, {"docstring": " If there is a primitive `n`-th root of unity in `K`, then `cyclotomic n K = \u220f \u03bc in primitive_roots n R, (X - C \u03bc)`. In particular, `cyclotomic n K = cyclotomic' n K`\n", "keywords": {"cyclotomic": 0.051002834842184194, "primitive": 0.06476349993832281, "root of unity": 0.0816592333739719, "unity": 0.17493421126308942, "root": 0.19741676243235035, "roots": 0.19741676243235035}}, {"docstring": " If a point has the same distance from all vertices of a simplex, the orthogonal projection of that point onto the subspace spanned by that simplex is its circumcenter.\n", "keywords": {"orthogonal projection": 0.01986718810864864, "subspace spanned": 0.01986718810864864, "point": 0.09367462051261369, "simplex": 0.09367462051261369, "circumcenter": 0.09405136374190334, "distance": 0.13957138628574278, "vertices": 0.13957138628574278, "orthogonal": 0.13957138628574278, "projection": 0.13957138628574278, "subspace": 0.13957138628574278, "spanned": 0.13957138628574278}}, {"docstring": "The identity map is an additive monoid homomorphism.\n", "keywords": {"additive monoid homomorphism": 0.016559150827736194, "monoid homomorphism": 0.04940384002065631, "identity map": 0.09700399286574239, "additive monoid": 0.09700399286574239, "homomorphism": 0.15831692877998726, "identity": 0.29736558256021506, "map": 0.29736558256021506, "additive": 0.29736558256021506, "monoid": 0.29736558256021506}}, {"docstring": " A telescoping product along `{0, ..., n - 1}` of a commutative group valued function reduces to the ratio of the last and first factors.\n", "keywords": {"commutative group valued": 0.0042542192213185686, "group valued function": 0.0042542192213185686, "valued function reduces": 0.0042542192213185686, "telescoping product": 0.02570861714399338, "commutative group": 0.02570861714399338, "group valued": 0.02570861714399338, "valued function": 0.02570861714399338, "function reduces": 0.02570861714399338, "factors": 0.09568045026443411, "telescoping": 0.15831692877998726, "product": 0.15831692877998726, "commutative": 0.15831692877998726, "group": 0.15831692877998726, "valued": 0.15831692877998726, "function": 0.15831692877998726, "reduces": 0.15831692877998726, "ratio": 0.15831692877998726}}, {"docstring": "An injective sequence `f : \u2115 \u2192 \u2115` tends to infinity at infinity.\n", "keywords": {"injective sequence": 0.02391462167226668, "sequence": 0.11984314898676356, "injective": 0.19488865479360015}}, {"docstring": "**Formula for the Number of Combinations**\n", "keywords": {"Number of Combinations": 0.012602360123953448, "Formula": 0.08596317751626563, "Combinations": 0.08596317751626563, "Number": 0.1447773057422032}}, {"docstring": "The rank of a free module `M` over `R` is the cardinality of `choose_basis_index R M`.\n", "keywords": {"free module": 0.015380821171891606, "choose": 0.04491197687864554, "basis": 0.04491197687864554, "module": 0.09568045026443411, "index": 0.09568045026443411, "rank": 0.15831692877998726, "free": 0.15831692877998726, "cardinality": 0.15831692877998726}}, {"docstring": " On a set with unique derivatives, a `C^n` function has derivatives less than `n` which are differentiable.\n", "keywords": {"set with unique": 0.03663237450220032, "unique derivatives": 0.05417025203414716, "function has derivatives": 0.07301337118426868, "function": 0.11521656054299435, "differentiable": 0.11521656054299435, "derivatives": 0.13667842094541144, "set": 0.1879836817695587, "unique": 0.1879836817695587}}, {"docstring": "The `tail` of a vector made up of one element is `nil`.\n", "keywords": {"vector made": 0.02570861714399338, "tail": 0.04491197687864554, "nil": 0.04491197687864554, "vector": 0.15831692877998726, "made": 0.15831692877998726, "element": 0.15831692877998726}}, {"docstring": "**Liouville's theorem**: a complex differentiable bounded function is a constant.\n", "keywords": {"complex differentiable bounded": 0.0042542192213185686, "differentiable bounded function": 0.0042542192213185686, "Liouville theorem": 0.005484890844946624, "complex differentiable": 0.02570861714399338, "differentiable bounded": 0.02570861714399338, "bounded function": 0.02570861714399338, "Liouville": 0.057012387690331526, "theorem": 0.09568045026443411, "constant": 0.09568045026443411, "complex": 0.15831692877998726, "differentiable": 0.15831692877998726, "bounded": 0.15831692877998726, "function": 0.15831692877998726}}, {"docstring": " The inner product of a linear combination of a set of orthonormal vectors with one of those vectors picks out the coefficient of that vector.\n", "keywords": {"linear combination": 0.011791779281441954, "set of orthonormal": 0.011791779281441954, "orthonormal vectors": 0.016514709421906745, "vectors picks": 0.016514709421906745, "vectors": 0.07524595803548341, "product": 0.10795533203491868, "linear": 0.10795533203491868, "combination": 0.10795533203491868, "set": 0.10795533203491868, "orthonormal": 0.10795533203491868, "picks": 0.10795533203491868, "coefficient": 0.10795533203491868, "vector": 0.15049191607096682}}, {"docstring": "Any `n`-th primitive root of unity is a root of `cyclotomic n K`.\n", "keywords": {"primitive root": 0.04212793185246166, "root of unity": 0.04212793185246166, "root": 0.10586606907408062, "cyclotomic": 0.11718348279991213, "primitive": 0.19092478917347616, "unity": 0.19092478917347616}}, {"docstring": "Replacing a set by its closure does not change the Hausdorff distance.\n", "keywords": {"Hausdorff distance": 0.023458380875189744, "change the Hausdorff": 0.04498862876540802, "Replacing a set": 0.04940384002065631, "Hausdorff": 0.1447773057422032, "Replacing": 0.15831692877998726, "distance": 0.15831692877998726, "set": 0.29736558256021506, "closure": 0.29736558256021506, "change": 0.29736558256021506}}, {"docstring": " Given measures `\u03bc` and `\u03bd`, if `s` is a measure mutually singular to `\u03bd` and `f` is a measurable function such that `\u03bc = s + f\u03bd`, then `s = \u03bc.singular_part \u03bc`.  This theorem provides the uniqueness of the `singular_part` in the Lebesgue decomposition theorem, while `measure_theory.measure.eq_rn_deriv` provides the uniqueness of the `rn_deriv`.\n", "keywords": {"measure mutually singular": 0.01646877856001976, "measurable function": 0.02662785229857146, "mutually singular": 0.046422351760227666, "Lebesgue decomposition theorem": 0.05021744252844499, "measure mutually": 0.05329811063926506, "\u03bc.singular": 0.08920518637008824, "Lebesgue decomposition": 0.09331601926575328, "deriv": 0.0934783567224936, "part": 0.09349233911249732, "singular": 0.13773001230715495, "uniqueness": 0.15533779355374713, "measure": 0.15709738818725738, "mutually": 0.16105030381340424, "measurable": 0.16105030381340424, "function": 0.16105030381340424, "decomposition theorem": 0.2059588620131615, "Lebesgue": 0.21336962295198172, "theorem": 0.21347159336137478, "measures": 0.31419477637451476, "decomposition": 0.40001649751146273}}, {"docstring": " If `R` is a ring, then prime ideals in the localization at `M` correspond to prime ideals in the original ring `R` that are disjoint from `M`. This lemma gives the particular case for an ideal and its comap, see `le_rel_iso_of_prime` for the more general relation isomorphism\n", "keywords": {"original ring": 0.02243320002260813, "prime ideals": 0.042146556781705966, "ring": 0.062399093084833074, "general relation isomorphism": 0.09424766893047568, "prime": 0.0970923964861686, "correspond to prime": 0.11369733871640388, "correspond": 0.12902265761747717, "ideals": 0.13344703387779297, "relation isomorphism": 0.16900297422729635, "localization": 0.17581179666105354, "original": 0.17581179666105354, "disjoint": 0.17581179666105354, "general relation": 0.22116546946011093, "rel": 0.24770734657762153, "iso": 0.24770734657762153, "ideal": 0.26689406775558594, "comap": 0.33970921555624467, "isomorphism": 0.33970921555624467, "lemma": 0.4255703897621618, "case": 0.4255703897621618}}, {"docstring": "The sheaf condition in terms of unique gluings can be obtained from the usual \"equalizer\" sheaf condition.\n", "keywords": {"sheaf condition": 0.023467299911778393, "terms of unique": 0.037831312533597124, "unique gluings": 0.037831312533597124, "equalizer": 0.055708263664958506, "condition in terms": 0.09464369245534064, "sheaf": 0.10586606907408062, "condition": 0.10586606907408062, "usual": 0.11718348279991213, "terms": 0.19092478917347616, "unique": 0.19092478917347616, "gluings": 0.19092478917347616, "obtained": 0.19092478917347616}}, {"docstring": " The pigeonhole principle for finitely many pigeons counted by weight, strict inequality version: if the total weight of a finite set of pigeons is greater than `n \u2022 b`, they are sorted into some pigeonholes, and for all but `n` pigeonholes the total weight of the pigeons there is nonpositive, then for at least one of these `n` pigeonholes, the total weight of the pigeons in this pigeonhole is greater than `b`.\n", "keywords": {"strict inequality version": 0.0009212307187764782, "total weight": 0.0024694350289970438, "strict inequality": 0.010178909268174162, "inequality version": 0.010178909268174162, "principle for finitely": 0.012978067427450163, "finite set": 0.012978067427450163, "pigeons counted": 0.018991872294961056, "weight": 0.023058465741907515, "pigeonhole principle": 0.02408656092637564, "total": 0.02657673825360778, "pigeons": 0.04116537519496833, "greater": 0.0467791136985298, "counted by weight": 0.04735589139325914, "pigeons is greater": 0.06469684466803814, "pigeonholes": 0.06926468800845205, "pigeonholes the total": 0.07451671102680199, "finitely many pigeons": 0.07660521291873795, "set of pigeons": 0.07660521291873795, "pigeonhole is greater": 0.08617219105656092, "strict": 0.08902212446623245}}, {"docstring": "In a topological vector space, the closure of a convex set is convex.\n", "keywords": {"topological vector space": 0.004210515236259915, "vector space": 0.021567786782198985, "topological vector": 0.035715520099333646, "convex set": 0.05259515133015473, "space": 0.11369206228658875, "set is convex": 0.11487806119690562, "convex": 0.13453835116331675, "topological": 0.18569843656348187, "vector": 0.18569843656348187, "closure": 0.18569843656348187, "set": 0.18569843656348187}}, {"docstring": "Colex doesn't care if you remove the other set\n", "keywords": {"Colex": 0.15831692877998726, "set": 0.15831692877998726, "care": 0.29736558256021506, "remove": 0.29736558256021506}}, {"docstring": " Two multilinear maps indexed by a `fintype` are equal if they are equal when all arguments are basis vectors. Unlike `basis.ext_multilinear_fin`, this only uses a single basis; a dependently-typed version would still be true, but the proof would need a dependently-typed version of `dom_dom_congr`.\n", "keywords": {"multilinear maps indexed": 0.009420659141031688, "maps indexed": 0.028754752770067622, "basis vectors": 0.03803945968026729, "multilinear maps": 0.052713353392258286, "dependently-typed version": 0.06836286221841725, "equal": 0.07594639106932093, "fintype": 0.08191285426104689, "dom": 0.08440910107426096, "arguments are basis": 0.11410885336347762, "vectors": 0.12235137520224683, "single basis": 0.14030041176645466, "multilinear": 0.14975510149395752, "basis": 0.14975510149395752, "dependently-typed": 0.1568265146099903, "maps": 0.16718560905139174, "indexed": 0.16718560905139174, "arguments": 0.16718560905139174, "version": 0.19174103305361334, "Unlike": 0.2365661206214104, "basis.ext": 0.2365661206214104}}, {"docstring": " Given a set `A` and a set `B` inside it, we can shrink `A` to any appropriate size, and keep `B` inside it.\n", "keywords": {"set": 0.034222909030694394, "inside": 0.034222909030694394, "shrink": 0.08922538916412363, "size": 0.08922538916412363}}, {"docstring": " Any finite-dimensional vector space over a proper field is proper. We do not register this as an instance to avoid an instance loop when trying to prove the properness of `\ud835\udd5c`, and the search for `\ud835\udd5c` as an unknown metavariable. Declare the instance explicitly when needed.\n", "keywords": {"finite-dimensional vector space": 0.012184918860731858, "finite-dimensional vector": 0.050945339510829385, "vector space": 0.050945339510829385, "proper field": 0.058822010318830116, "proper": 0.12616088899567768, "field is proper": 0.1276295126180439, "instance": 0.18101112422398893, "finite-dimensional": 0.22017203985509987, "vector": 0.22017203985509987, "space": 0.22017203985509987, "field": 0.22017203985509987, "unknown metavariable": 0.23594131819540315, "prove the properness": 0.3247096715053703, "instance loop": 0.36771273352983835, "metavariable": 0.38558389995500464, "explicitly when needed": 0.3907375104487467, "instance explicitly": 0.4693691595043237, "Declare": 0.47762035489857085, "needed": 0.47762035489857085, "register": 0.49509353881427104}}, {"docstring": "Alias of the backwards direction of `even_iff_exists_two_nsmul`.\n", "keywords": {"backwards direction": 0.02570861714399338, "iff": 0.04491197687864554, "exists": 0.04491197687864554, "nsmul": 0.04491197687864554, "Alias": 0.09568045026443411, "backwards": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "A convex function on a segment is upper-bounded by the max of its endpoints.\n", "keywords": {"convex function": 0.02570861714399338, "segment is upper-bounded": 0.02570861714399338, "endpoints": 0.09568045026443411, "convex": 0.15831692877998726, "function": 0.15831692877998726, "segment": 0.15831692877998726, "upper-bounded": 0.15831692877998726, "max": 0.15831692877998726}}, {"docstring": "If a set is bounded below and above, and nonempty, its infimum is less than or equal to its supremum.\n", "keywords": {"set is bounded": 0.02570861714399338, "nonempty": 0.09568045026443411, "supremum": 0.09568045026443411, "set": 0.15831692877998726, "bounded": 0.15831692877998726, "infimum": 0.15831692877998726, "equal": 0.15831692877998726}}, {"docstring": "**Alias** of the reverse direction of sub_le_self_iff`.\n", "keywords": {"reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "The matrix representation of `conj_ae`.\n", "keywords": {"conj": 0.04491197687864554, "matrix representation": 0.09700399286574239, "matrix": 0.29736558256021506, "representation": 0.29736558256021506}}, {"docstring": "The angle between a vector and the zero vector.\n", "keywords": {"vector": 0.14868279128010753, "angle": 0.2005079697193566}}, {"docstring": "An induction principle for `module.ray`, used as `induction x using module.ray.ind`.\n", "keywords": {"module.ray": 0.055708263664958506, "induction principle": 0.0562460611896591, "induction": 0.13945519496053638, "principle": 0.19092478917347616}}, {"docstring": "A number satisfying the Liouville condition with exponent `p > 1` is an irrational number.\n", "keywords": {"satisfying the Liouville": 0.017658958508402847, "Liouville condition": 0.017658958508402847, "condition with exponent": 0.021567786782198985, "number satisfying": 0.05259515133015473, "irrational number": 0.05259515133015473, "Liouville": 0.09344467948467797, "exponent": 0.11369206228658875, "number": 0.13453835116331675, "satisfying": 0.18569843656348187, "condition": 0.18569843656348187, "irrational": 0.18569843656348187}}, {"docstring": "If adding `0` on either side is the identity, `0` is regular.\n", "keywords": {"adding": 0.09568045026443411, "identity": 0.09568045026443411, "regular": 0.09568045026443411, "side": 0.15831692877998726}}, {"docstring": "The definition of `affine_independent`.\n", "keywords": {"affine": 0.04491197687864554, "independent": 0.04491197687864554, "definition": 0.29736558256021506}}, {"docstring": "An additive Lie group is an additive topological group. This is not an instance for technical reasons, see note [Design choices about smooth algebraic structures].\n", "keywords": {"additive Lie group": 0.003398971976012007, "additive topological group": 0.007639853226771103, "additive Lie": 0.01470077936404414, "Lie group": 0.01892241820141466, "additive topological": 0.03249759914384524, "topological group": 0.04204172119011679, "Lie": 0.08459615986079659, "additive": 0.08562916729374415, "Design choices": 0.09038305288543198, "smooth algebraic structures": 0.09987848512230381, "group": 0.10976272338098009, "technical reasons": 0.17147630665836236, "algebraic structures": 0.17147630665836236, "topological": 0.1837851895373716, "Design": 0.18888696310793077, "instance for technical": 0.23851325396085266, "choices about smooth": 0.23851325396085266, "smooth algebraic": 0.23851325396085266, "reasons": 0.3335528702481384, "note": 0.3335528702481384}}, {"docstring": "In a non-trivial ring, the element `0` is not regular -- with typeclasses.\n", "keywords": {"non-trivial ring": 0.04940384002065631, "ring": 0.15831692877998726, "element": 0.15831692877998726, "regular": 0.15831692877998726, "typeclasses": 0.15831692877998726, "non-trivial": 0.29736558256021506}}, {"docstring": " If a function is `C^n` within a set at a point, with `n \u2265 1`, then it is differentiable within this set at this point.\n", "keywords": {"point": 0.05776554179380615, "set": 0.07915846438999359, "function": 0.14832923246533666, "differentiable": 0.14832923246533666}}, {"docstring": "In a locally compact T\u2082 space, every compact set has an open neighborhood with compact closure.\n", "keywords": {"open neighborhood": 0.022401895700338237, "compact closure": 0.02588141212622439, "locally compact": 0.03876555391209268, "compact set": 0.03876555391209268, "space": 0.058865175910949544, "compact": 0.08403798622869686, "closure": 0.10006769949327374, "neighborhood with compact": 0.1156327147669075, "locally": 0.14802380456229533, "set": 0.14802380456229533, "open": 0.14802380456229533, "neighborhood": 0.14802380456229533}}, {"docstring": "A uniformly Cauchy sequence converges uniformly to its limit\n", "keywords": {"Cauchy sequence converges": 0.0035497933710139182, "uniformly Cauchy sequence": 0.005280748297269333, "sequence converges uniformly": 0.010962043841203115, "Cauchy sequence": 0.017992190482742136, "uniformly Cauchy": 0.026378926493064607, "sequence converges": 0.03663237450220032, "converges uniformly": 0.05417025203414716, "Cauchy": 0.09401982591602405, "limit": 0.11521656054299435, "uniformly": 0.13667842094541144, "sequence": 0.1879836817695587, "converges": 0.1879836817695587}}, {"docstring": "The edist to a set and to its closure coincide\n", "keywords": {"closure coincide": 0.015380821171891606, "coincide": 0.09568045026443411, "edist": 0.15831692877998726, "set": 0.15831692877998726, "closure": 0.15831692877998726}}, {"docstring": "Assumes left covariance. The lemma assuming right covariance is `right.add_pos_of_nonneg_of_pos`.\n", "keywords": {"Assumes left covariance": 0.025009953048540364, "Assumes left": 0.04325492719738993, "pos": 0.08105151263492691, "left covariance": 0.14033512486368607, "Assumes": 0.16205454282434614, "right.add": 0.22989350183706597, "nonneg": 0.22989350183706597, "covariance": 0.2405027004070563, "left": 0.25584912197094006, "lemma assuming": 0.42082946769804974, "lemma": 0.544229518153821, "assuming": 0.544229518153821, "assuming right covariance": 0.6333818627846869}}, {"docstring": "Implication `\u2192` is transitive. If `P \u2192 Q` and `Q \u2192 R` then `P \u2192 R`.\n", "keywords": {"Implication": 0.05899937629682816, "transitive": 0.10028582371075691}}, {"docstring": "**Alias** of decidable.lt_or_eq_of_le`.\n", "keywords": {"Alias": 0.030396371632413578, "decidable.lt": 0.09568045026443411}}, {"docstring": "**Alias** of the forward direction of sub_neg`.\n", "keywords": {"forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "neg": 0.04491197687864554, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "`centroid_weights` at any point.\n", "keywords": {"centroid": 0.04491197687864554, "weights": 0.04491197687864554, "point": 0.15831692877998726}}, {"docstring": "**Alias** of the forward direction of cont_mdiff_at_iff_cont_diff_at`.\n", "keywords": {"Alias": 0.03402676245250578, "forward direction": 0.034987023778306175, "mdiff": 0.05331699930238388, "iff": 0.05331699930238388, "diff": 0.05331699930238388, "direction of cont": 0.06131733975553988, "cont": 0.069255433448279, "forward": 0.18385948854246909, "direction": 0.18385948854246909}}, {"docstring": "**Alias** of le_of_le_of_eq`.\n", "keywords": {"Alias": 0.030396371632413578}}, {"docstring": "If `n > 0` then `m` is not divisible by `n` iff it is between `n * k` and `n * (k + 1)`  for some `k`.\n", "keywords": {"iff": 0.06844581806138879, "divisible": 0.09568045026443411}}, {"docstring": "If a product is anisotropic then its components must be. The converse is not true.\n", "keywords": {"product is anisotropic": 0.04188746641162499, "product": 0.2005079697193566, "anisotropic": 0.2005079697193566, "components": 0.2005079697193566, "true": 0.32883716426354986, "converse": 0.46553351027698087}}, {"docstring": "The derivative (in the analysis sense) of a polynomial `p` is given by `p.derivative`.\n", "keywords": {"analysis sense": 0.015380821171891606, "p.derivative": 0.04491197687864554, "derivative": 0.09568045026443411, "sense": 0.09568045026443411, "polynomial": 0.09568045026443411, "analysis": 0.15831692877998726}}, {"docstring": "Picard-Lindel\u00f6f (Cauchy-Lipschitz) theorem.\n", "keywords": {"Picard-Lindel\u00f6f": 0.04491197687864554, "Cauchy-Lipschitz": 0.04491197687864554, "theorem": 0.04491197687864554}}, {"docstring": "The only constant in a maximal ideal over a field is `0`.\n", "keywords": {"maximal ideal": 0.02570861714399338, "constant": 0.15831692877998726, "maximal": 0.15831692877998726, "ideal": 0.15831692877998726, "field": 0.15831692877998726}}, {"docstring": "In a preadditive category, if the coproduct of `X` and `Y` exists, then the    binary biproduct of `X` and `Y` exists.\n", "keywords": {"exists": 0.019648131954263418, "preadditive category": 0.021567786782198985, "binary biproduct": 0.035715520099333646, "category": 0.11369206228658875, "preadditive": 0.18569843656348187, "coproduct": 0.18569843656348187, "binary": 0.18569843656348187, "biproduct": 0.18569843656348187}}, {"docstring": "The ultrafilter lemma: Any proper filter is contained in an ultrafilter.\n", "keywords": {"ultrafilter lemma": 0.0325194426147957, "proper filter": 0.03663237450220032, "filter is contained": 0.03663237450220032, "lemma": 0.11521656054299435, "ultrafilter": 0.13667842094541144, "proper": 0.1879836817695587, "filter": 0.1879836817695587, "contained": 0.1879836817695587}}, {"docstring": "If `C` has all colimits of diagrams `pair X Y`, then it has all binary coproducts\n", "keywords": {"colimits of diagrams": 0.015380821171891606, "binary coproducts": 0.015380821171891606, "diagrams": 0.09568045026443411, "pair": 0.09568045026443411, "coproducts": 0.09568045026443411, "colimits": 0.15831692877998726, "binary": 0.15831692877998726}}, {"docstring": "If you add multiples of row `B k` to other rows, the determinant doesn't change.\n", "keywords": {"add multiples": 0.03663237450220032, "multiples of row": 0.06460392234869006, "change": 0.11521656054299435, "row": 0.14324596573275905, "rows": 0.14324596573275905, "add": 0.1879836817695587, "multiples": 0.1879836817695587, "determinant": 0.1879836817695587}}, {"docstring": "A point in the antidiagonal is determined by its first co-ordinate.\n", "keywords": {"antidiagonal is determined": 0.09700399286574239, "co-ordinate": 0.15831692877998726, "point": 0.29736558256021506, "antidiagonal": 0.29736558256021506, "determined": 0.29736558256021506}}, {"docstring": "If `0 < n`, then `xa i` has order 4.\n", "keywords": {"order": 0.15831692877998726}}, {"docstring": "A sum is add-regular if and only if the summands are.\n", "keywords": {"sum is add-regular": 0.02570861714399338, "sum": 0.15831692877998726, "add-regular": 0.15831692877998726, "summands": 0.15831692877998726}}, {"docstring": " If `U` is a neighborhood of each point of a set `s` then it is a neighborhood of `s`: it contains an open set containing `s`.\n", "keywords": {"open set": 0.03117712943655666, "neighborhood": 0.05776554179380615, "set": 0.10191687733271076, "point": 0.14832923246533666, "open": 0.14832923246533666}}, {"docstring": "A constant size neighborhood of the diagonal is an entourage.\n", "keywords": {"constant size neighborhood": 0.03339840940482845, "constant size": 0.09700399286574239, "size neighborhood": 0.09700399286574239, "entourage": 0.15831692877998726, "constant": 0.29736558256021506, "size": 0.29736558256021506, "neighborhood": 0.29736558256021506, "diagonal": 0.29736558256021506}}, {"docstring": " Assumes left covariance. The lemma assuming right covariance is `right.one_lt_mul_of_le_of_lt`.\n", "keywords": {"Assumes left covariance": 0.021279743632738882, "Assumes left": 0.038712704770480444, "left covariance": 0.1273706910391025, "Assumes": 0.1531727145735673, "right.one": 0.21826204231687923, "mul": 0.21826204231687923, "covariance": 0.23216465691767033, "left": 0.2433193585127945, "lemma assuming": 0.38571507274593425, "lemma": 0.5275897320195264, "assuming": 0.5275897320195264, "assuming right covariance": 0.5846700711531686}}, {"docstring": "If `x` is a fixed point of `f \u2218 g` and `g`, then it is a fixed point of `f`.\n", "keywords": {"fixed point": 0.01285430857199669, "fixed": 0.07915846438999363, "point": 0.07915846438999363}}, {"docstring": "Rotating both vectors by the same angle does not change the angle between those vectors.\n", "keywords": {"Rotating both vectors": 0.08414606766344489, "Rotating": 0.12363091320521931, "change the angle": 0.13561210463159817, "vectors": 0.14868279128010753, "angle": 0.14868279128010753, "change": 0.2005079697193566}}, {"docstring": "The set in `enum_ord_def` is nonempty.\n", "keywords": {"enum": 0.04491197687864554, "ord": 0.04491197687864554, "def": 0.04491197687864554, "nonempty": 0.15831692877998726, "set": 0.29736558256021506}}, {"docstring": " In the category `Module R`, if `x` and `y` are pseudoequal, then the range of the associated morphisms is the same.\n", "keywords": {"Module": 0.04325931859548787, "category": 0.06844581806138879, "pseudoequal": 0.06844581806138879, "range": 0.09568045026443411, "morphisms": 0.09568045026443411}}, {"docstring": "A version of `nth_le_map` that can be used for rewriting.\n", "keywords": {"nth": 0.04491197687864554, "map": 0.04491197687864554, "rewriting": 0.15831692877998726, "version": 0.29736558256021506}}, {"docstring": "`x * (y + z)` is equivalent to `x * y + x * z.`\n", "keywords": {"equivalent": 0.1155310835876123}}, {"docstring": "The variables of the product of a family of polynomials are a subset of the union of the sets of variables of each polynomial.\n", "keywords": {"sets of variables": 0.019198310733994986, "family of polynomials": 0.02261398168341928, "variables": 0.04095849640549082, "product": 0.08981241977410774, "family": 0.08981241977410774, "subset": 0.08981241977410774, "union": 0.08981241977410774, "sets": 0.08981241977410774, "polynomials": 0.09744328649149729}}, {"docstring": "The function `x ^ y` tends to `+\u221e` at `+\u221e` for any positive real `y`.\n", "keywords": {"positive real": 0.015380821171891606, "function": 0.09568045026443411, "real": 0.09568045026443411, "positive": 0.15831692877998726}}, {"docstring": "The injection into an additive pi group with the same values commutes.\n", "keywords": {"additive pi group": 0.02570861714399338, "commutes": 0.09568045026443411, "injection": 0.15831692877998726, "additive": 0.15831692877998726, "group": 0.15831692877998726}}, {"docstring": " If an integer with larger absolute value divides an integer, it is zero.\n", "keywords": {"larger absolute": 0.037831312533597124, "absolute value divides": 0.037831312533597124, "divides an integer": 0.04212793185246166, "integer with larger": 0.09464369245534064, "integer": 0.10586606907408062, "larger": 0.19092478917347616, "absolute": 0.19092478917347616, "divides": 0.19092478917347616}}, {"docstring": " Second technical lemma to control the growth of coefficients of the inverse. Bound the explicit expression for `\u2211_{k<n+1} a\u1d4f Q\u2096` in terms of a sum of powers of the same sum one step before, in the specific setup we are interesting in, by reducing to the general bound in `radius_right_inv_pos_of_radius_pos_aux1`.\n", "keywords": {"technical lemma": 0.01668469489267346, "lemma to control": 0.01668469489267346, "control the growth": 0.01668469489267346, "growth of coefficients": 0.01668469489267346, "radius": 0.07767607699655694, "pos": 0.07767607699655694, "inverse": 0.10111634876540783, "technical": 0.128104973733605, "lemma": 0.128104973733605, "control": 0.128104973733605, "growth": 0.128104973733605, "coefficients": 0.128104973733605, "explicit expression": 0.128870830660737, "specific setup": 0.128870830660737, "general bound": 0.1289871625731776, "Bound": 0.16907223810919214, "sum": 0.16907223810919214, "inv": 0.22302132203417566, "Bound the explicit": 0.25707589278000414, "sum of powers": 0.25707589278000414}}, {"docstring": "The minimal distance to a set and its closure coincide\n", "keywords": {"closure coincide": 0.04940384002065631, "minimal distance": 0.09700399286574239, "coincide": 0.15831692877998726, "minimal": 0.29736558256021506, "distance": 0.29736558256021506, "set": 0.29736558256021506, "closure": 0.29736558256021506}}, {"docstring": " If a word reduces to another word, then they have a common maximal reduction.\n", "keywords": {"common maximal reduction": 0.004380378746946019, "maximal reduction": 0.022138323509052035, "common maximal": 0.03663237450220032, "word reduces": 0.05417025203414716, "reduction": 0.11521656054299435, "word": 0.13667842094541144, "reduces": 0.1879836817695587, "common": 0.1879836817695587, "maximal": 0.1879836817695587}}, {"docstring": "**Alias** of the forward direction of lt_inv'`.\n", "keywords": {"forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "inv": 0.04491197687864554, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "Two natural numbers are equal if and only if the have the same divisors.\n", "keywords": {"natural numbers": 0.02570861714399338, "numbers are equal": 0.02570861714399338, "divisors": 0.09568045026443411, "natural": 0.15831692877998726, "numbers": 0.15831692877998726, "equal": 0.15831692877998726}}, {"docstring": "Embedding `fin n` into `fin (n + 1)` with a hole around `last n` embeds by `cast_succ`.\n", "keywords": {"fin": 0.05101428509898996, "Embedding": 0.05393656033701752, "cast": 0.05393656033701752, "succ": 0.05393656033701752, "embeds": 0.09202664026077896, "hole": 0.1367145963576765}}, {"docstring": "`exp` is convex on the whole real line.\n", "keywords": {"exp": 0.04491197687864554, "real line": 0.04940384002065631, "line": 0.15831692877998726, "convex": 0.29736558256021506, "real": 0.29736558256021506}}, {"docstring": " Given an embedding of a topological space into a metrizable space, the source space is also metrizable.\n", "keywords": {"topological space": 0.044452488571508804, "source space": 0.044452488571508804, "metrizable space": 0.06346648566569672, "space": 0.09111894729694096, "metrizable": 0.10915928911237684, "embedding": 0.1556959951131179, "topological": 0.1556959951131179, "source": 0.1556959951131179}}, {"docstring": "Gives a recurrence to compute the `n + 1`th value of the sequence of integer and fractional parts of a value in case of non-termination.\n", "keywords": {"case of non-termination": 0.0065920978564317735, "recurrence to compute": 0.009239332327148086, "sequence of integer": 0.009239332327148086, "integer and fractional": 0.009239332327148086, "fractional parts": 0.009239332327148086, "non-termination": 0.06844581806138879, "recurrence": 0.09568045026443411, "compute": 0.09568045026443411, "sequence": 0.09568045026443411, "integer": 0.09568045026443411, "fractional": 0.09568045026443411, "parts": 0.09568045026443411, "case": 0.09568045026443411}}, {"docstring": "The separable degree equals the degree of any separable contraction, i.e., it is unique.\n", "keywords": {"separable degree equals": 0.020113802469063535, "separable contraction": 0.03672426843567709, "degree equals": 0.06104740651975287, "separable degree": 0.09279441717942427, "contraction": 0.12156210109285605, "unique": 0.12156210109285605, "equals the degree": 0.1311351076396852, "separable": 0.14570071893270706, "degree": 0.14570071893270706, "equals": 0.19744254481508877}}, {"docstring": "The `last` element of a vector is the `head` of the `reverse` vector.\n", "keywords": {"head": 0.055708263664958506, "reverse": 0.055708263664958506, "vector": 0.094808423351325, "element": 0.09492398510093508}}, {"docstring": "The angle between two nonnegative multiples of the same vector is 0.\n", "keywords": {"nonnegative multiples": 0.02570861714399338, "angle": 0.15831692877998726, "nonnegative": 0.15831692877998726, "multiples": 0.15831692877998726, "vector": 0.15831692877998726}}, {"docstring": "The Sprague-Grundy theorem which states that every impartial game is equivalent to a game of nim, namely the game of nim corresponding to the games Grundy value\n", "keywords": {"games Grundy": 0.01269885742978305, "Sprague-Grundy theorem": 0.01754270654797597, "theorem which states": 0.01754270654797597, "impartial game": 0.024811547550561332, "game of nim": 0.03061906975598311, "game": 0.06146340436095732, "Grundy": 0.06800587944062954, "nim": 0.06896994976535331, "game is equivalent": 0.0953396412465916, "Sprague-Grundy": 0.13130219201242474, "theorem": 0.13130219201242474, "states": 0.13130219201242474, "impartial": 0.13130219201242474, "equivalent": 0.13130219201242474, "games": 0.18439021308287196}}, {"docstring": "**Alias** of le_trans`.\n", "keywords": {"Alias": 0.030396371632413578, "trans": 0.04491197687864554}}, {"docstring": "The determinant formula `A\u2099 * B\u2099\u208a\u2081 - B\u2099 * A\u2099\u208a\u2081 = (-1)^(n + 1)`\n", "keywords": {"determinant formula": 0.015380821171891606, "formula": 0.09568045026443411, "determinant": 0.15831692877998726}}, {"docstring": "The identity is an additive group homomorphism.\n", "keywords": {"additive group homomorphism": 0.016559150827736194, "group homomorphism": 0.04940384002065631, "additive group": 0.09700399286574239, "homomorphism": 0.15831692877998726, "identity": 0.29736558256021506, "additive": 0.29736558256021506, "group": 0.29736558256021506}}, {"docstring": " The product of a multiset of elements of a submonoid of a `comm_monoid` is an element of the submonoid.\n", "keywords": {"multiset of elements": 0.027726939884450675, "comm": 0.05706283858652404, "monoid": 0.05706283858652404, "submonoid": 0.0631426511852481, "elements": 0.10249760936743825, "element": 0.10249760936743825, "product": 0.10603455617644456, "multiset": 0.10603455617644456}}, {"docstring": "Expand the square\n", "keywords": {"Expand the square": 0.02570861714399338, "Expand": 0.15831692877998726, "square": 0.15831692877998726}}, {"docstring": " In a linearly ordered additive commutative group with the order topology, if `f` tends to `C` and `g` tends to `at_bot` then `f + g` tends to `at_bot`.\n", "keywords": {"linearly ordered additive": 0.002535831815717203, "ordered additive commutative": 0.002535831815717203, "additive commutative group": 0.002535831815717203, "order topology": 0.012240009979360944, "linearly ordered": 0.018310930906343142, "ordered additive": 0.018310930906343142, "additive commutative": 0.018310930906343142, "commutative group": 0.018310930906343142, "bot": 0.019053917256533312, "topology": 0.09017440044927587, "linearly": 0.13409574860218185, "ordered": 0.13409574860218185, "additive": 0.13409574860218185, "commutative": 0.13409574860218185, "group": 0.13409574860218185, "order": 0.13409574860218185}}, {"docstring": "If the angle \u2220ABC at a point is \u03c0, the angle \u2220BCA is 0.\n", "keywords": {"angle": 0.04408578671136769, "ABC": 0.064011398160278, "BCA": 0.064011398160278, "point": 0.19092478917347616}}, {"docstring": " Note this is not an instance as `char_zero` implies `nontrivial`, and this would risk forming a loop.\n", "keywords": {"forming a loop": 0.015380821171891606, "risk forming": 0.02570861714399338, "char": 0.04491197687864554, "implies": 0.04491197687864554, "nontrivial": 0.04491197687864554, "Note": 0.09568045026443411, "loop": 0.09568045026443411, "instance": 0.15831692877998726, "risk": 0.15831692877998726, "forming": 0.15831692877998726}}, {"docstring": " If there is a scalar `c` with `\u2225c\u2225>1`, then any element can be moved by scalar multiplication to any shell of width `\u2225c\u2225`. Also recap information on the norm of the rescaling element that shows up in applications.\n", "keywords": {"shell of width": 0.024076315522185962, "scalar multiplication": 0.042775717923645304, "moved by scalar": 0.09587040298592882, "scalar": 0.11076880219112877, "width": 0.12696931063105557, "element": 0.1739726675965165, "rescaling element": 0.1813049721218753, "moved": 0.18516501832552387, "multiplication": 0.18516501832552387, "shell": 0.18516501832552387, "recap information": 0.2415710628628518, "applications": 0.33559480906340394, "element that shows": 0.34655458748107965, "recap": 0.44109960011701166, "information": 0.44109960011701166, "norm": 0.44109960011701166, "rescaling": 0.44109960011701166, "shows": 0.44109960011701166}}, {"docstring": "Shows that the partial numerators `a\u1d62` of the continued fraction are equal to one and the partial denominators `b\u1d62` correspond to integers.\n", "keywords": {"correspond to integers": 0.008069272527900925, "partial numerators": 0.01225837168007993, "partial denominators": 0.01225837168007993, "continued fraction": 0.018034246898548233, "fraction are equal": 0.018034246898548233, "partial": 0.0676767366797439, "Shows": 0.08946888050496495, "numerators": 0.08946888050496495, "denominators": 0.08946888050496495, "correspond": 0.08946888050496495, "integers": 0.08946888050496495, "continued": 0.13309686053898662, "fraction": 0.13309686053898662, "equal": 0.13309686053898662}}, {"docstring": "The `weighted_vsub` for an empty set is 0.\n", "keywords": {"weighted": 0.04491197687864554, "vsub": 0.04491197687864554, "empty set": 0.09700399286574239, "empty": 0.29736558256021506, "set": 0.29736558256021506}}, {"docstring": " If there exists a two-sided inverse `M'` for `M` (indexed differently), then `det (N \u2b1d M) = det (M \u2b1d N)`.\n", "keywords": {"indexed differently": 0.0067353679932798255, "two-sided inverse": 0.009386651690650429, "exists a two-sided": 0.013095151449018445, "det": 0.019648131954263418, "inverse": 0.08179429269966654, "indexed": 0.08179429269966654, "differently": 0.08179429269966654, "exists": 0.11369206228658875, "two-sided": 0.11369206228658875}}, {"docstring": " Negating a single basis vector (represented using `units_smul`) negates the corresponding orientation.\n", "keywords": {"single basis vector": 0.016559150827736194, "units": 0.04491197687864554, "smul": 0.04491197687864554, "Negating a single": 0.04940384002065631, "basis vector": 0.04940384002065631, "single basis": 0.09700399286574239, "Negating": 0.15831692877998726, "vector": 0.15831692877998726, "represented": 0.15831692877998726, "negates": 0.15831692877998726, "orientation": 0.15831692877998726, "single": 0.29736558256021506, "basis": 0.29736558256021506}}, {"docstring": " If `\u03b1` has no zero divisors, then the product of two elements equals zero iff one of them equals zero.\n", "keywords": {"elements equals": 0.020241076619814977, "equals zero iff": 0.020241076619814977, "equals": 0.07162298286637953, "divisors": 0.09329120537733218, "product": 0.1384995633470844, "elements": 0.1384995633470844, "iff": 0.1384995633470844}}, {"docstring": "The `tail` of a `nil` vector is `nil`.\n", "keywords": {"nil": 0.021352745740207107, "tail": 0.05706283858652404, "vector": 0.11984314898676356}}, {"docstring": " The downward **local LYM inequality**. `\ud835\udc9c` takes up less of `\u03b1^(r)` (the finsets of card `r`) than `\u2202\ud835\udc9c` takes up of `\u03b1^(r - 1)`.\n", "keywords": {"local LYM inequality": 0.0007851660833755705, "local LYM": 0.007701730664586866, "LYM inequality": 0.007701730664586866, "LYM": 0.07621084492189614, "downward": 0.10028582371075691, "local": 0.10028582371075691, "inequality": 0.10028582371075691, "finsets of card": 0.11755105063023073, "card": 0.2790829227183407, "finsets": 0.37689977775222827}}, {"docstring": "`pure : \u03b1 \u2192 ultrafilter \u03b1` defines a dense inducing of `\u03b1` in `ultrafilter \u03b1`.\n", "keywords": {"defines a dense": 0.00964721495732046, "dense inducing": 0.013453448411345069, "ultrafilter": 0.03065348613113714, "pure": 0.054709255964732355, "defines": 0.08293109455034965, "dense": 0.11521656054299435, "inducing": 0.11521656054299435}}, {"docstring": " The `n`th coefficient of a formal power series is `0` if `n` is strictly smaller than the order of the power series.\n", "keywords": {"formal power series": 0.0033460474322437174, "power series": 0.011329418756312097, "strictly smaller": 0.02064652498550541, "formal power": 0.02162879641957819, "power": 0.07442578585270056, "series": 0.07442578585270056, "coefficient": 0.14222822903176371, "formal": 0.14222822903176371, "strictly": 0.14222822903176371, "smaller": 0.14222822903176371, "order": 0.14222822903176371}}, {"docstring": "For `m \u2264 n`, `(n, m)` is in the reflexive-transitive closure of `~` if `i ~ pred i`  for all `i` between `n` and `m`.\n", "keywords": {"reflexive-transitive closure": 0.013527995261974615, "pred": 0.0771485953923296, "reflexive-transitive": 0.1155310835876123, "closure": 0.1155310835876123}}, {"docstring": "The `0`-th auxiliary function `f_aux 0` coincides with `exp_neg_inv_glue`, by definition.\n", "keywords": {"auxiliary function": 0.015380821171891606, "aux": 0.04491197687864554, "exp": 0.04491197687864554, "neg": 0.04491197687864554, "inv": 0.04491197687864554, "glue": 0.04491197687864554, "function": 0.09568045026443411, "coincides": 0.09568045026443411, "definition": 0.09568045026443411, "auxiliary": 0.15831692877998726}}, {"docstring": "M\u00f6bius inversion for functions to a `comm_group`.\n", "keywords": {"comm": 0.04491197687864554, "group": 0.04491197687864554, "M\u00f6bius inversion": 0.04940384002065631, "inversion for functions": 0.09700399286574239, "M\u00f6bius": 0.15831692877998726, "inversion": 0.29736558256021506, "functions": 0.29736558256021506}}, {"docstring": "Two bilinear forms are equal when they are equal on all basis vectors.\n", "keywords": {"basis vectors": 0.022138323509052035, "bilinear forms": 0.03663237450220032, "forms are equal": 0.04051498248759491, "equal": 0.10356599227702172, "vectors": 0.11521656054299435, "bilinear": 0.1879836817695587, "forms": 0.1879836817695587, "basis": 0.1879836817695587}}, {"docstring": "The angle between the negation of a vector and another vector.\n", "keywords": {"vector": 0.14323823713631006, "angle": 0.19488865479360015, "negation": 0.19488865479360015}}, {"docstring": " If there is a nonzero vector and every other vector is a multiple of it, then the module has dimension one.\n", "keywords": {"module has dimension": 0.03663237450220032, "nonzero vector": 0.05417025203414716, "vector": 0.13667842094541144, "nonzero": 0.1879836817695587, "multiple": 0.1879836817695587, "module": 0.1879836817695587, "dimension": 0.1879836817695587}}, {"docstring": " If two cyclic permutations agree on all terms in their intersection, and that intersection is not empty, then the two cyclic permutations must be equal.\n", "keywords": {"cyclic permutations agree": 0.007647177076780686, "cyclic permutations": 0.018044698947888176, "permutations agree": 0.04644456336635502, "cyclic": 0.07785437699288043, "permutations": 0.11185087393202754, "empty": 0.122209967475991, "equal": 0.122209967475991, "intersection": 0.14663241076608644, "agree": 0.19840347794534322, "terms": 0.19840347794534322}}, {"docstring": "Ring homomorphisms preserve additive inverses.\n", "keywords": {"Ring homomorphisms preserve": 0.01655915082773619, "preserve additive inverses": 0.016559150827736194, "homomorphisms preserve additive": 0.03339840940482845, "Ring homomorphisms": 0.04940384002065631, "additive inverses": 0.04940384002065631, "homomorphisms preserve": 0.09700399286574239, "preserve additive": 0.09700399286574239, "Ring": 0.15831692877998726, "inverses": 0.15831692877998726, "homomorphisms": 0.29736558256021506, "preserve": 0.29736558256021506, "additive": 0.29736558256021506}}, {"docstring": "The angle \u2220AAB at a point.\n", "keywords": {"AAB": 0.08596317751626563, "angle": 0.15831692877998726, "point": 0.15831692877998726}}, {"docstring": "**Alias** of the reverse direction of set.sized_union`.\n", "keywords": {"direction of set.sized": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "union": 0.04491197687864554, "set.sized": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "If `0 < n`, then `sr i` has order 2.\n", "keywords": {"order": 0.15831692877998726}}, {"docstring": " A number satisfies the Liouville condition with any exponent if and only if it is a Liouville number.\n", "keywords": {"Liouville condition": 0.02660633017046327, "Liouville number": 0.03977130262227975, "number satisfies": 0.06104740651975287, "satisfies the Liouville": 0.062152806956535925, "Liouville": 0.06563119360924669, "number": 0.14570071893270706, "satisfies": 0.19744254481508877, "condition": 0.19744254481508877, "exponent": 0.19744254481508877}}, {"docstring": " The product of elements of a submonoid of a `comm_monoid` indexed by a `finset` is an element of the submonoid.\n", "keywords": {"product of elements": 0.03511390057775492, "comm": 0.05632962681207606, "monoid": 0.05632962681207606, "finset": 0.05632962681207606, "submonoid": 0.07442578585270058, "indexed": 0.08531189896378533, "elements": 0.11808409468554612, "element": 0.11808409468554612, "product": 0.11840455484321102}}, {"docstring": "The map `coe_fn : (r \u2243 s) \u2192 (r \u2192 s)` is injective.\n", "keywords": {"coe": 0.04491197687864554, "map": 0.09568045026443411, "injective": 0.09568045026443411}}, {"docstring": " Given three nonzero vectors, the angle between the first and the third minus the angle between the second and the third equals the angle between the first and the second.\n", "keywords": {"minus the angle": 0.004966181306367437, "equals the angle": 0.004966181306367437, "nonzero vectors": 0.006553883815486385, "angle": 0.018701283614014252, "vectors": 0.07392362528831797, "nonzero": 0.08808023247765763, "minus": 0.08808023247765763, "equals": 0.08808023247765763}}, {"docstring": "Any open set is the union of the basis sets contained in it.\n", "keywords": {"basis sets contained": 0.010962043841203115, "open set": 0.05417025203414716, "basis sets": 0.05417025203414716, "sets contained": 0.05417025203414716, "open": 0.1879836817695587, "union": 0.1879836817695587, "basis": 0.1879836817695587, "contained": 0.1879836817695587, "set": 0.2733568418908229, "sets": 0.2733568418908229}}, {"docstring": "**Alias** of the forward direction of order.succ_le_succ_iff`.\n", "keywords": {"direction of order.succ": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "succ": 0.04491197687864554, "iff": 0.04491197687864554, "order.succ": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "In a Henstock prepartition, there are at most `2 ^ fintype.card \u03b9` boxes with a given tag.\n", "keywords": {"Henstock prepartition": 0.008293207122436794, "Henstock": 0.08596317751626563, "prepartition": 0.09568045026443411, "fintype.card": 0.09568045026443411, "boxes": 0.09568045026443411, "tag": 0.09568045026443411}}, {"docstring": "A natural number `m` divides the sum `n + m` if and only if `m` divides `n`.\n", "keywords": {"natural number": 0.013546417228156258, "divides the sum": 0.02593095746307935, "divides": 0.05332403764722467, "number": 0.09492398510093508, "sum": 0.09492398510093508, "natural": 0.1408007092310104}}, {"docstring": "If a finset has cardinality larger than `finrank + 1`, then there is a nontrivial linear relation amongst its elements, such that the coefficients of the relation sum to zero.\n", "keywords": {"nontrivial linear relation": 0.009389984584069899, "finset has cardinality": 0.03346752176983843, "cardinality larger": 0.03346752176983843, "nontrivial linear": 0.03346752176983843, "linear relation": 0.04877831388921351, "relation sum": 0.04877831388921351, "finrank": 0.052008009273421085, "elements": 0.10987504304330521, "relation": 0.12922594861139264, "finset": 0.17995476918065306, "cardinality": 0.17995476918065306, "larger": 0.17995476918065306, "nontrivial": 0.17995476918065306, "linear": 0.17995476918065306, "coefficients": 0.17995476918065306, "sum": 0.17995476918065306}}, {"docstring": " The dimension theorem: if `v` and `v'` are two bases, their index types have the same cardinalities.\n", "keywords": {"dimension theorem": 0.015380821171891606, "index types": 0.02570861714399338, "theorem": 0.09568045026443411, "bases": 0.09568045026443411, "cardinalities": 0.09568045026443411, "dimension": 0.15831692877998726, "index": 0.15831692877998726, "types": 0.15831692877998726}}, {"docstring": "In a normed ring, the powers of an element x with `\u2225x\u2225 < 1` tend to zero.\n", "keywords": {"normed ring": 0.015380821171891606, "ring": 0.09568045026443411, "tend": 0.09568045026443411, "normed": 0.15831692877998726, "powers": 0.15831692877998726, "element": 0.15831692877998726}}, {"docstring": "A minimal polynomial is prime.\n", "keywords": {"polynomial is prime": 0.04940384002065631, "minimal polynomial": 0.09700399286574239, "prime": 0.15831692877998726, "minimal": 0.29736558256021506, "polynomial": 0.29736558256021506}}, {"docstring": "Open elements of `\ud835\udce4 \u03b1` form a basis of `\ud835\udce4 \u03b1`.\n", "keywords": {"Open elements": 0.015380821171891606, "form a basis": 0.015380821171891606, "Open": 0.09568045026443411, "form": 0.09568045026443411, "elements": 0.15831692877998726, "basis": 0.15831692877998726}}, {"docstring": "**Alias** of the forward direction of sub_nonneg`.\n", "keywords": {"forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "nonneg": 0.04491197687864554, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "**Alias** of the reverse direction of nat.count_succ_eq_succ_count_iff`.\n", "keywords": {"succ": 0.019320982933644253, "direction of nat.count": 0.021114872146320032, "Alias": 0.03402676245250578, "reverse direction": 0.034987023778306175, "count": 0.05331699930238388, "iff": 0.05331699930238388, "nat.count": 0.11246769819744627, "reverse": 0.18385948854246909, "direction": 0.18385948854246909}}, {"docstring": "Given subsets `t` and `s` of an `add_monoid M`, if `s \u2286 t`, the `add_submonoid` of `M` generated by `s` is contained in the `add_submonoid` generated by `t`.\n", "keywords": {"add": 0.013409635007445988, "submonoid": 0.02445052153898405, "generated": 0.041874917190854496, "subsets": 0.10570086230597084, "monoid": 0.10570086230597084, "contained": 0.15588894939228992}}, {"docstring": "Two continuous functions to a t2-space that agree on the dense range of a function are equal.\n", "keywords": {"dense range": 0.03498702377830618, "continuous functions": 0.05135123883758033, "function are equal": 0.06956410889469504, "equal": 0.11246769819744629, "continuous": 0.1838594885424691, "agree": 0.1838594885424691, "dense": 0.1838594885424691, "range": 0.1838594885424691, "functions": 0.26565442043121734, "function": 0.26565442043121734}}, {"docstring": " **The Radon-Nikodym theorem**: Given two measures `\u03bc` and `\u03bd`, if `have_lebesgue_decomposition \u03bc \u03bd`, then `\u03bc` is absolutely continuous to `\u03bd` if and only if `\u03bd.with_density (rn_deriv \u03bc \u03bd) = \u03bc`.\n", "keywords": {"Radon-Nikodym theorem": 0.005380746843605012, "absolutely continuous": 0.00717258304785508, "lebesgue": 0.04491197687864554, "\u03bd.with": 0.04491197687864554, "density": 0.04491197687864554, "theorem": 0.06341998722529081, "measures": 0.06341998722529081, "decomposition": 0.06341998722529081, "deriv": 0.06341998722529081, "Radon-Nikodym": 0.08438900089923473, "absolutely": 0.08438900089923473, "continuous": 0.08438900089923473}}, {"docstring": " If `f : \u2102 \u2192 E` is complex differentiable on an open disc of positive radius and is continuous on its closure, then it is analytic on the open disc with coefficients of the power series given by Cauchy integral formulas.\n", "keywords": {"Cauchy integral formulas": 0.0009077361067695831, "open disc": 0.00965124432482185, "Cauchy integral": 0.00985006848951363, "integral formulas": 0.01234743235138359, "complex differentiable": 0.018468580949925956, "positive radius": 0.018468580949925956, "power series": 0.018468580949925956, "disc of positive": 0.045692289292208366, "disc with coefficients": 0.045692289292208366, "open": 0.0688058104893431, "disc": 0.0688058104893431, "Cauchy": 0.07243348905134826, "closure": 0.0905741201720188, "formulas": 0.0905741201720188, "complex": 0.13466134432795604, "differentiable": 0.13466134432795604, "positive": 0.13466134432795604, "radius": 0.13466134432795604, "continuous": 0.13466134432795604, "analytic": 0.13466134432795604}}, {"docstring": "A version of `nat.sub_succ` in the form `_ - 1` instead of `nat.pred _`.\n", "keywords": {"nat.sub": 0.04491197687864554, "succ": 0.04491197687864554, "nat.pred": 0.04491197687864554, "form": 0.09568045026443411, "version": 0.15831692877998726}}, {"docstring": " The topology induced under an inclusion `f : X \u2192 Y` from the discrete topological space `Y` is the discrete topology on `X`.\n", "keywords": {"discrete topological space": 0.002219280070543347, "topological space": 0.014176630379520855, "discrete topological": 0.022276459697343733, "topology induced": 0.02893602993452452, "discrete topology": 0.030492797372809896, "discrete": 0.07571113878390312, "inclusion": 0.09713402394201612, "space": 0.09713402394201612, "topology": 0.09770854302279938, "induced": 0.14390902704051098, "topological": 0.14390902704051098}}, {"docstring": " Multiplying by all the matrices in `list_transvec_row M` kills all the coefficients in the last row but the last one.\n", "keywords": {"list": 0.05331699930238388, "transvec": 0.05331699930238388, "row": 0.069255433448279, "Multiplying": 0.08088209179216702, "kills": 0.08088209179216702, "matrices": 0.11246769819744627, "coefficients": 0.11246769819744627}}, {"docstring": " A filter which is eventually bounded is in particular frequently bounded (in the opposite direction). At least if the filter is not trivial.\n", "keywords": {"opposite direction": 0.027002057875293115, "eventually bounded": 0.04850310299911367, "frequently bounded": 0.04850310299911367, "bounded": 0.11835539137930692, "direction": 0.1345376346685726, "filter": 0.18160281635537215, "eventually": 0.1954257385705354, "frequently": 0.1954257385705354, "opposite": 0.1954257385705354, "trivial": 0.3506046867654162}}, {"docstring": "`cantor_function c` is injective if `0 < c < 1/2`.\n", "keywords": {"cantor": 0.04491197687864554, "function": 0.09568045026443411, "injective": 0.15831692877998726}}, {"docstring": "Rotation by \u03c0 is negation.\n", "keywords": {"Rotation": 0.15831692877998726, "negation": 0.15831692877998726}}, {"docstring": " The `(m * n)`-th Dickson polynomial of the first kind is the composition of the `m`-th and `n`-th.\n", "keywords": {"Dickson polynomial": 0.005484890844946624, "Dickson": 0.057012387690331526, "polynomial": 0.09568045026443411, "kind": 0.09568045026443411, "composition": 0.09568045026443411}}, {"docstring": "For elements `a` and `b` of a linear order, either `max a b = a` and `b \u2264 a`,    or `max a b = b` and `a < b`.    Use cases on this lemma to automate linarith in inequalities\n", "keywords": {"linear order": 0.010739853115675078, "max": 0.0303158165344704, "linarith in inequalities": 0.08842223439488099, "elements": 0.09274956608533924, "order": 0.09274956608533924, "lemma to automate": 0.10635075369747363, "automate linarith": 0.10635075369747363, "linear": 0.11456370890593566, "inequalities": 0.26202348110511703, "cases": 0.3100443831824829, "lemma": 0.3100443831824829, "automate": 0.3100443831824829, "linarith": 0.3100443831824829}}, {"docstring": " Generalization of `finset.prod_comm` to the case when the inner `finset`s depend on the outer variable.\n", "keywords": {"outer variable": 0.00899321792126428, "finset.prod": 0.04491197687864554, "comm": 0.04491197687864554, "finset": 0.04491197687864554, "Generalization": 0.0771485953923296, "variable": 0.0771485953923296, "case": 0.1155310835876123, "depend": 0.1155310835876123, "outer": 0.1155310835876123}}, {"docstring": " One subspace is less than or equal to another if and only if all its points are in the second subspace.\n", "keywords": {"subspace": 0.14323823713631006, "equal": 0.19488865479360015, "points": 0.19488865479360015}}, {"docstring": "A subring `t` includes `closure s` if and only if it includes `s`.\n", "keywords": {"includes": 0.07571113878390312, "subring": 0.11984314898676356, "closure": 0.11984314898676356}}, {"docstring": " If a nonempty ball in a proper space includes a closed set `s`, then there exists a nonempty ball with the same center and a strictly smaller radius that includes `s`.\n", "keywords": {"strictly smaller radius": 0.001147827560663897, "proper space includes": 0.001358428175886335, "nonempty ball": 0.003880029234739574, "exists a nonempty": 0.008117578269752564, "closed set": 0.008181888119776161, "proper space": 0.01085898992882147, "strictly smaller": 0.01085898992882147, "smaller radius": 0.01085898992882147, "space includes": 0.012830609003700626, "includes a closed": 0.031993675688683956, "radius that includes": 0.031993675688683956, "nonempty": 0.0388450670452431, "ball": 0.049557796192334434, "includes": 0.061112637987524886, "set": 0.07830062329966068, "proper": 0.1036452554536235, "space": 0.1036452554536235, "closed": 0.1036452554536235, "exists": 0.1036452554536235, "center": 0.1036452554536235}}, {"docstring": "A real normed vector space is strictly convex provided that the unit ball is strictly convex.\n", "keywords": {"strictly convex provided": 0.006278813851926188, "real normed vector": 0.007493603982362141, "normed vector space": 0.007493603982362141, "strictly convex": 0.015629355252023386, "space is strictly": 0.02820023318873729, "ball is strictly": 0.02820023318873729, "real normed": 0.03718843747800602, "normed vector": 0.03718843747800602, "vector space": 0.03718843747800602, "unit ball": 0.03718843747800602, "convex provided": 0.0412608560367292, "strictly": 0.0724218931801197, "convex": 0.10463417723629108, "real": 0.18935428276389019, "normed": 0.18935428276389019, "vector": 0.18935428276389019, "space": 0.18935428276389019, "provided": 0.18935428276389019, "unit": 0.18935428276389019, "ball": 0.18935428276389019}}, {"docstring": "The `simp` normal form for a quadratic form is `coe_fn`, not `to_fun`.\n", "keywords": {"normal form": 0.031557281947372486, "quadratic form": 0.05259515133015473, "simp": 0.05393656033701752, "coe": 0.05393656033701752, "fun": 0.05393656033701752, "normal": 0.11369206228658875, "form": 0.13453835116331675, "quadratic": 0.18569843656348187}}, {"docstring": "If an initial object `0` exists in a CCC then every morphism from it is monic.\n", "keywords": {"initial object": 0.04940384002065631, "CCC": 0.1447773057422032, "object": 0.15831692877998726, "exists": 0.15831692877998726, "monic": 0.15831692877998726, "initial": 0.29736558256021506, "morphism": 0.29736558256021506}}, {"docstring": "Two finite measures are equal if they are equal on the \u03c0-system generating the \u03c3-algebra  (and `univ`).\n", "keywords": {"generating the \u03c3-algebra": 0.021114872146320032, "finite measures": 0.034987023778306175, "\u03c0-system generating": 0.034987023778306175, "measures are equal": 0.038330279597458564, "univ": 0.05331699930238388, "equal": 0.10038999320777726, "\u03c3-algebra": 0.11246769819744627, "finite": 0.18385948854246909, "measures": 0.18385948854246909, "\u03c0-system": 0.18385948854246909, "generating": 0.18385948854246909}}, {"docstring": "If the sequence already terminated at position `n + 1`, nothing gets squashed.\n", "keywords": {"terminated at position": 0.04940384002065631, "sequence already terminated": 0.09700399286574239, "position": 0.15831692877998726, "squashed": 0.15831692877998726, "sequence": 0.29736558256021506, "terminated": 0.29736558256021506}}, {"docstring": "If `a` is accessible under `r\u03b1` and `b` is accessible under `r\u03b2`, then `(a, b)` is  accessible under `relation.game_add r\u03b1 r\u03b2`. Notice that `prod.lex_accessible` requires the  stronger condition `\u2200 b, acc r\u03b2 b`.\n", "keywords": {"accessible": 0.04625437838887542, "relation.game": 0.09100924235497614, "add": 0.13527675880801351, "requires the stronger": 0.18277836945133702, "stronger condition": 0.18277836945133702, "prod.lex": 0.2580102255039807, "Notice": 0.35204798814466653, "requires": 0.35204798814466653, "condition": 0.35204798814466653, "acc": 0.35204798814466653, "stronger": 0.43895455328509764}}, {"docstring": "If a function is continuous on a measurable set `s`, then it is measurable at the filter  `\ud835\udcdd[s] x` for all `x`.\n", "keywords": {"measurable set": 0.0325194426147957, "function is continuous": 0.03663237450220032, "set": 0.11521656054299435, "filter": 0.11521656054299435, "measurable": 0.13667842094541144, "function": 0.1879836817695587, "continuous": 0.1879836817695587}}, {"docstring": "The function `(1 + t/x) ^ x` tends to `exp t` at `+\u221e`.\n", "keywords": {"function": 0.09568045026443411, "exp": 0.09568045026443411}}, {"docstring": " Let `f` be a function continuous on a convex (or, equivalently, connected) subset `D` of the real line. If `f` is differentiable on the interior of `D` and `f'` is nonpositive, then `f` is an antitone function on `D`.\n", "keywords": {"real line": 0.015790175212724515, "function continuous": 0.04067778610166757, "equivalently": 0.07073956283945361, "connected": 0.07073956283945361, "subset": 0.07073956283945361, "convex": 0.10630075322936205, "line": 0.10630075322936205, "antitone function": 0.11073944941271935, "function": 0.13364860469108616, "continuous": 0.14623340726105694, "real": 0.14623340726105694, "nonpositive": 0.2923372953262933, "differentiable": 0.37298875481161287, "interior": 0.37298875481161287, "antitone": 0.37298875481161287}}, {"docstring": "An involution commutes across an equality. Compare to `function.injective.eq_iff`.\n", "keywords": {"involution commutes": 0.04188746641162499, "equality": 0.12363091320521931, "iff": 0.17881754828257995, "involution": 0.2005079697193566, "commutes": 0.2005079697193566, "Compare": 0.32883716426354986}}, {"docstring": " So-named because the coercion is `nat.cast` into `zmod`. For `nat.cast` into an arbitrary ring, see `zmod.nat_cast_val`.\n", "keywords": {"nat.cast": 0.04286717638245821, "zmod": 0.07258934678807509, "So-named": 0.1497391925531594, "zmod.nat": 0.21373773690901868, "cast": 0.21373773690901868, "val": 0.21373773690901868, "coercion": 0.23843406751375792, "arbitrary ring": 0.2464148712192172, "ring": 0.37951425938754646, "arbitrary": 0.5209261917026199}}, {"docstring": "Two bases are equal if they assign the same coordinates.\n", "keywords": {"bases are equal": 0.09700399286574239, "coordinates": 0.15831692877998726, "bases": 0.29736558256021506, "equal": 0.29736558256021506, "assign": 0.29736558256021506}}, {"docstring": "**Fermat's Theorem**: the derivative of a function at a local minimum equals zero.\n", "keywords": {"Fermat Theorem": 0.0032610119837787367, "local minimum equals": 0.0042542192213185686, "local minimum": 0.02570861714399338, "minimum equals": 0.02570861714399338, "Fermat": 0.057012387690331526, "Theorem": 0.057012387690331526, "derivative": 0.15831692877998726, "function": 0.15831692877998726, "local": 0.15831692877998726, "minimum": 0.15831692877998726, "equals": 0.15831692877998726}}, {"docstring": "An analytic function is infinitely differentiable.\n", "keywords": {"infinitely differentiable": 0.04940384002065631, "analytic function": 0.09700399286574239, "function is infinitely": 0.09700399286574239, "differentiable": 0.15831692877998726, "analytic": 0.29736558256021506, "function": 0.29736558256021506, "infinitely": 0.29736558256021506}}, {"docstring": " Product of elements of a list `L` equals zero if and only if `0 \u2208 L`. See also `list.prod_eq_zero` for an implication that needs weaker typeclass assumptions.\n", "keywords": {"Product of elements": 0.02541909697430123, "weaker typeclass assumptions": 0.11501181900411048, "Product": 0.12363091320521931, "list": 0.12363091320521931, "equals": 0.12363091320521931, "list.prod": 0.17881754828257995, "typeclass assumptions": 0.18075564686791562, "elements": 0.2005079697193566, "weaker typeclass": 0.2766850298235749, "assumptions": 0.32883716426354986, "implication": 0.46553351027698087, "weaker": 0.46553351027698087, "typeclass": 0.46553351027698087}}, {"docstring": " Assumes right covariance. The lemma assuming left covariance is `left.one_lt_mul'`.\n", "keywords": {"Assumes right covariance": 0.15195679415702995, "Assumes": 0.1531727145735673, "left.one": 0.2182620423168793, "mul": 0.2182620423168793, "covariance": 0.23216465691767033, "assuming left covariance": 0.2636654148178027, "lemma assuming left": 0.3201847146816566, "left covariance": 0.32446011851782974, "lemma assuming": 0.38571507274593436, "assuming left": 0.38571507274593436, "lemma": 0.5275897320195265, "assuming": 0.5275897320195265, "left": 0.5275897320195265}}, {"docstring": "A point is in an `Ioo` iff it can be expressed as a strict convex combination of the endpoints.\n", "keywords": {"strict convex combination": 0.0042542192213185686, "strict convex": 0.02570861714399338, "convex combination": 0.02570861714399338, "Ioo": 0.030396371632413578, "iff": 0.09568045026443411, "endpoints": 0.09568045026443411, "point": 0.15831692877998726, "expressed": 0.15831692877998726, "strict": 0.15831692877998726, "convex": 0.15831692877998726, "combination": 0.15831692877998726}}, {"docstring": "If a gcf terminated at position `n`, it also terminated at `m \u2265 n`.\n", "keywords": {"terminated at position": 0.02683006950161641, "gcf terminated": 0.04437656514447953, "terminated": 0.10901343189444501, "position": 0.11984314898676356, "gcf": 0.19488865479360015}}, {"docstring": "Submonoids are closed under natural powers.\n", "keywords": {"Submonoids are closed": 0.04940384002065631, "natural powers": 0.04940384002065631, "closed under natural": 0.09700399286574239, "Submonoids": 0.15831692877998726, "powers": 0.15831692877998726, "closed": 0.29736558256021506, "natural": 0.29736558256021506}}, {"docstring": "**Alias** of the reverse direction of has_mfderiv_within_at_iff_has_fderiv_within_at`.\n", "keywords": {"reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "mfderiv": 0.04491197687864554, "iff": 0.04491197687864554, "fderiv": 0.04491197687864554, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " If an affine subspace contains a set of points, it contains the `span_points` of that set.\n", "keywords": {"affine subspace": 0.040564923574392765, "span": 0.05794058924527716, "points": 0.07726414307411157, "set": 0.14570071893270706, "set of points": 0.15584462708215419, "affine": 0.19744254481508877, "subspace": 0.19744254481508877}}, {"docstring": " The pigeonhole principle for finitely many pigeons of different weights, strict inequality version: there is a pigeonhole with the total weight of pigeons in it greater than `b` provided that the total number of pigeonholes times `b` is less than the total weight of all pigeons.\n", "keywords": {"strict inequality version": 0.00123809518153274, "total weight": 0.00779283867886045, "strict inequality": 0.012729137304712644, "inequality version": 0.012729137304712644, "total number": 0.015609577775446122, "principle for finitely": 0.01767774231457477, "pigeonholes times": 0.020657923697067884, "pigeonhole principle": 0.028776525826688343, "total": 0.03887181793657505, "weight": 0.06579956337366495, "pigeons": 0.07074370456789453, "finitely many pigeons": 0.09033588165304433, "number of pigeonholes": 0.09033588165304433, "strict": 0.09536684262739953, "version": 0.09536684262739953, "provided": 0.09536684262739953, "times": 0.09536684262739953, "pigeonhole": 0.10611555685184179, "weight of pigeons": 0.112847865293687, "weights": 0.1315991267473299}}, {"docstring": "The cross product satisfies the Leibniz lie property.\n", "keywords": {"Leibniz lie property": 0.0013485152131775047, "cross product satisfies": 0.0042542192213185686, "satisfies the Leibniz": 0.013797198203993007, "Leibniz lie": 0.013797198203993007, "lie property": 0.015380821171891606, "cross product": 0.02570861714399338, "product satisfies": 0.02570861714399338, "Leibniz": 0.08596317751626563, "property": 0.09568045026443411, "cross": 0.15831692877998726, "product": 0.15831692877998726, "satisfies": 0.15831692877998726, "lie": 0.15831692877998726}}, {"docstring": "`mul_left_comm` for `algebra`s when one element is from the base ring.\n", "keywords": {"mul": 0.04491197687864554, "left": 0.04491197687864554, "comm": 0.04491197687864554, "algebra": 0.04491197687864554, "base ring": 0.04940384002065631, "ring": 0.15831692877998726, "element": 0.29736558256021506, "base": 0.29736558256021506}}, {"docstring": "The sets `primitive_roots k R` are pairwise disjoint.\n", "keywords": {"primitive": 0.04491197687864554, "pairwise disjoint": 0.04940384002065631, "sets": 0.15831692877998726, "roots": 0.15831692877998726, "disjoint": 0.15831692877998726, "pairwise": 0.29736558256021506}}, {"docstring": "Elements of a right cancel semigroup are right regular.\n", "keywords": {"cancel semigroup": 0.02570861714399338, "Elements": 0.09568045026443411, "regular": 0.09568045026443411, "cancel": 0.15831692877998726, "semigroup": 0.15831692877998726}}, {"docstring": " If `x` is an adherent (cluster) point for a Cauchy filter `f`, then it is a limit point for `f`.\n", "keywords": {"Cauchy filter": 0.010737997933289386, "limit point": 0.039293477084795844, "cluster": 0.05393656033701752, "Cauchy": 0.09344467948467797, "point": 0.10179911835611566, "adherent": 0.11369206228658875, "filter": 0.11369206228658875, "limit": 0.18569843656348187}}, {"docstring": "Two permutations `f g : perm \u03b1` have the same cycle factors iff they are the same.\n", "keywords": {"cycle factors iff": 0.0042542192213185686, "cycle factors": 0.02570861714399338, "factors iff": 0.02570861714399338, "permutations": 0.09568045026443411, "perm": 0.09568045026443411, "cycle": 0.15831692877998726, "factors": 0.15831692877998726, "iff": 0.15831692877998726}}, {"docstring": " The strong pigeonhole principle for finitely many pigeons and pigeonholes.  Given a function `f` between finite types `\u03b1` and `\u03b2` and a number `b` such that `card \u03b1 \u2264 card \u03b2 \u2022 b`, there exists an element `y : \u03b2` such that its preimage has at most `b` elements. See also `fintype.exists_card_fiber_lt_of_card_lt_nsmul` for a stronger statement.\n", "keywords": {"strong pigeonhole principle": 0.010235244747007897, "principle for finitely": 0.04294375634692697, "finitely many pigeons": 0.04294375634692697, "strong pigeonhole": 0.04686173518074982, "pigeonhole principle": 0.04686173518074982, "card": 0.09512628365470802, "pigeons and pigeonholes": 0.10416474017966663, "strong": 0.20291753164511378, "principle": 0.20291753164511378, "finitely": 0.20291753164511378, "pigeons": 0.20291753164511378, "finite types": 0.21730852685460442, "pigeonhole": 0.22060201189650275, "element": 0.3560641695209663, "elements": 0.3560641695209663, "stronger statement": 0.36205868380252626, "fintype.exists": 0.36407610856088846, "fiber": 0.36407610856088846, "nsmul": 0.36407610856088846, "exists an element": 0.3785756810212855}}, {"docstring": " If every element belongs to exactly `n` finsets, then the sum of their sizes is `n` times how many they are.\n", "keywords": {"element belongs": 0.02570861714399338, "finsets": 0.04491197687864554, "times": 0.09568045026443411, "element": 0.15831692877998726, "belongs": 0.15831692877998726, "sum": 0.15831692877998726, "sizes": 0.15831692877998726}}, {"docstring": " The pigeonhole principle for finitely many pigeons counted by weight, non-strict inequality version: if the total weight of a finite set of pigeons is greater than or equal to `n \u2022 b`, they are sorted into some pigeonholes, and for all but `n > 0` pigeonholes the total weight of the pigeons there is nonpositive, then for at least one of these `n` pigeonholes, the total weight of the pigeons in this pigeonhole is greater than or equal to `b`.\n", "keywords": {"non-strict inequality version": 0.0009147783691947567, "total weight": 0.002444235171496136, "non-strict inequality": 0.010131869348889665, "inequality version": 0.010131869348889665, "principle for finitely": 0.01291873196303512, "finite set": 0.01291873196303512, "pigeons counted": 0.0188522909850149, "weight": 0.022934098369954036, "pigeonhole principle": 0.023903632010172506, "total": 0.026450165404291685, "pigeons": 0.040960973929464226, "greater": 0.04660464834622397, "equal": 0.04660464834622397, "counted by weight": 0.04704592036546737, "pigeons is greater": 0.06423431592088173, "pigeonholes": 0.06890661462530852, "pigeonholes the total": 0.07393874324404598, "finitely many pigeons": 0.07615452132626359, "set of pigeons": 0.07615452132626359, "pigeonhole is greater": 0.085581440859667}}, {"docstring": " Test for convergence of the `p`-series: the real-valued series `\u2211' n : \u2115, 1 / n ^ p` converges if and only if `1 < p`.\n", "keywords": {"Test for convergence": 0.013089923375762187, "real-valued series": 0.014618695703961359, "series": 0.05201485183844375, "Test": 0.09329120537733218, "converges": 0.09329120537733218, "convergence": 0.1384995633470844, "real-valued": 0.1384995633470844}}, {"docstring": "Given a compact set `K` inside an open set `U`, there is a open neighborhood `V` of `1`  such that `V * K \u2286 U`.\n", "keywords": {"compact set": 0.03147064175861185, "open neighborhood": 0.03672426843567709, "open set": 0.04715305578486013, "set": 0.07726414307411157, "inside an open": 0.08132750272243246, "inside": 0.12156210109285605, "neighborhood": 0.12156210109285605, "open": 0.14570071893270706, "compact": 0.19744254481508877}}, {"docstring": " A nonempty preorder with no minimal element is infinite. This is not an instance to avoid a cycle with `infinite \u03b1 \u2192 nontrivial \u03b1 \u2192 nonempty \u03b1`.\n", "keywords": {"minimal element": 0.03763407739923406, "nonempty preorder": 0.07269394577610493, "element is infinite": 0.15138186076528942, "nonempty": 0.17791964105827468, "infinite": 0.17791964105827468, "preorder": 0.19044453900858593, "minimal": 0.19044453900858593, "element": 0.19044453900858593, "instance to avoid": 0.25342300681454566, "avoid a cycle": 0.25342300681454566, "nontrivial": 0.34335610232496827, "instance": 0.4496495765069246, "avoid": 0.4496495765069246, "cycle": 0.4496495765069246}}, {"docstring": " This is a useful lemma to prove that a certain operation preserves functions being `C^n`. When you do induction on `n`, this gives a useful characterization of a function being `C^(n+1)`, assuming you have already computed the derivative. The advantage of this version over `cont_diff_succ_iff_fderiv` is that both occurences of `cont_diff` are for functions with the same domain and codomain (`E` and `F`). This is not the case for `cont_diff_succ_iff_fderiv`, which often requires an inconvenient need to generalize `F`, which results in universe issues (see the discussion in the section of `cont_diff.comp`).  This lemma avoids these universe issues, but only applies for finite dimensional `E`.\n", "keywords": {"operation preserves functions": 0.016397093007475497, "operation preserves": 0.0411498421671864, "cont": 0.047144091634592045, "preserves functions": 0.07523517394721022, "diff": 0.07550636185715785, "universe issues": 0.12365133612948614, "succ": 0.14178819545337565, "iff": 0.14178819545337565, "fderiv": 0.14178819545337565, "functions": 0.17597865851169586, "issues": 0.19384850371064172, "prove": 0.19880507565022915, "operation": 0.19880507565022915, "preserves": 0.19880507565022915, "lemma to prove": 0.21115661475383446, "computed the derivative": 0.22549881870530133, "lemma": 0.24759172949345618, "universe": 0.2557022278989066, "function": 0.3519573170233917, "domain and codomain": 0.3752036998384498}}, {"docstring": " If a function `f` is continuous on a convex set `D \u2286 \u211d`, is differentiable on its interior, and `f'` is monotone on the interior, then `f` is convex on `D`.\n", "keywords": {"convex set": 0.01286214417415525, "interior": 0.04478074116273408, "convex": 0.07442578585270058, "function": 0.08531189896378533, "set": 0.08531189896378533, "continuous": 0.11840455484321102, "differentiable": 0.11840455484321102, "monotone": 0.11840455484321102}}, {"docstring": " The **alternating series test** for antitone sequences. See also `tendsto_alternating_series_of_antitone_tendsto_zero`.\n", "keywords": {"alternating series test": 0.03905931209618585, "tendsto": 0.09268550773276726, "series test": 0.10109751338217146, "antitone sequences": 0.10109751338217146, "alternating": 0.15887565083603308, "test": 0.1794320556891372, "sequences": 0.1794320556891372, "alternating series": 0.19416253801849712, "series": 0.25584955354295913, "antitone": 0.25584955354295913}}, {"docstring": "Vieta's formula for a quadratic equation, relating the coefficients of the polynomial with  its roots. This particular version states that if we have a root `x` of a monic quadratic  polynomial, then there is another root `y` such that `x + y` is negative the `a_1` coefficient  and `x * y` is the `a_0` coefficient.\n", "keywords": {"Vieta formula": 0.021013334339624972, "quadratic equation": 0.03640129332074884, "monic quadratic polynomial": 0.041610288969961745, "quadratic polynomial": 0.08464734092159594, "root": 0.09939258117162271, "relating the coefficients": 0.11881721053010241, "Vieta": 0.12572640162464238, "equation": 0.12572640162464238, "relating": 0.12572640162464238, "monic quadratic": 0.12746525399915912, "quadratic": 0.13967940820463795, "polynomial": 0.13967940820463795, "coefficient": 0.1596493018148322, "formula": 0.16369562433569276, "version states": 0.19585305555398094, "roots": 0.19878516234324542, "version": 0.40469353536953, "states": 0.40469353536953, "monic": 0.40469353536953, "negative": 0.40469353536953}}, {"docstring": "Helper lemma for the more general case: `is_min_on.of_is_local_min_on_of_convex_on`.\n", "keywords": {"min": 0.019053917256533312, "Helper lemma": 0.020744656539556924, "general case": 0.020744656539556924, "on.of": 0.0528063806271324, "local": 0.0528063806271324, "convex": 0.0528063806271324, "Helper": 0.11145728654016383, "case": 0.11145728654016383, "lemma": 0.1823394614884183, "general": 0.1823394614884183}}, {"docstring": "Iff version of extensionality rule for congruence relations.\n", "keywords": {"Iff version": 0.04940384002065631, "congruence relations": 0.04940384002065631, "version of extensionality": 0.09700399286574239, "extensionality rule": 0.09700399286574239, "rule for congruence": 0.09700399286574239, "Iff": 0.15831692877998726, "relations": 0.15831692877998726, "version": 0.29736558256021506, "extensionality": 0.29736558256021506, "rule": 0.29736558256021506, "congruence": 0.29736558256021506}}, {"docstring": "The order of the sum of two formal power series is at least the minimum of their orders.\n", "keywords": {"formal power series": 0.00269253313269109, "formal power": 0.01904688389482227, "power series": 0.01904688389482227, "sum": 0.1367145963576765, "formal": 0.1367145963576765, "power": 0.1367145963576765, "series": 0.1367145963576765, "minimum": 0.1367145963576765, "order": 0.18213622310077732, "orders": 0.18213622310077732}}, {"docstring": "The quotient norm is nonnegative.\n", "keywords": {"norm is nonnegative": 0.04940384002065631, "quotient norm": 0.09700399286574239, "nonnegative": 0.15831692877998726, "quotient": 0.29736558256021506, "norm": 0.29736558256021506}}, {"docstring": "Expand the square\n", "keywords": {"Expand the square": 0.02570861714399338, "Expand": 0.15831692877998726, "square": 0.15831692877998726}}, {"docstring": "The equivalence relation made from the equivalence classes of an equivalence    relation r equals r.\n", "keywords": {"equivalence relation made": 0.0053248654959341755, "equivalence relation": 0.016296012274160672, "relation made": 0.027230476903750824, "equivalence classes": 0.02972144087024041, "equivalence": 0.06179472555968223, "relation r equals": 0.06380299299961538, "relation": 0.0851294669924546, "made": 0.1556959951131179, "classes": 0.1556959951131179, "equals": 0.1556959951131179}}, {"docstring": "If `C` and `D` generate the \u03c3-algebras on `\u03b1` resp. `\u03b2`, then rectangles formed by `C` and `D`  generate the \u03c3-algebra on `\u03b1 \u00d7 \u03b2`.\n", "keywords": {"generate the \u03c3-algebras": 0.06405405451236211, "resp": 0.08373376031090686, "generate": 0.09882684952535489, "\u03c3-algebras": 0.30456359324490434, "\u03c3-algebra": 0.30456359324490434, "rectangles formed": 0.45541719602843195, "rectangles": 0.5593851868498433, "formed": 0.5593851868498433}}, {"docstring": "`same_ray` is symmetric.\n", "keywords": {"ray": 0.04491197687864554, "symmetric": 0.15831692877998726}}, {"docstring": " The norm of `f.comp_along_composition p c` is controlled by the product of the norms of the relevant bits of `f` and `p`.\n", "keywords": {"relevant bits": 0.01281102963567174, "f.comp": 0.053316999302383886, "composition": 0.08088209179216702, "norm": 0.08293829952712643, "norms": 0.08293829952712643, "controlled": 0.11246769819744629, "product": 0.11246769819744629, "relevant": 0.11246769819744629, "bits": 0.11246769819744629}}, {"docstring": "For the single implications with fewer assumptions, see `one_div_lt_one_div_of_lt` and  `lt_of_one_div_lt_one_div`\n", "keywords": {"div": 0.00932045406634339, "fewer assumptions": 0.013354668549352425, "single implications": 0.018532313889308878, "implications with fewer": 0.018532313889308878, "assumptions": 0.09769992342467647, "single": 0.13488927415883753, "implications": 0.13488927415883753, "fewer": 0.13488927415883753}}, {"docstring": "Alternative definition of set convexity, using division.\n", "keywords": {"Alternative definition": 0.04940384002065631, "set convexity": 0.04940384002065631, "definition of set": 0.09700399286574239, "Alternative": 0.15831692877998726, "convexity": 0.15831692877998726, "division": 0.15831692877998726, "definition": 0.29736558256021506, "set": 0.29736558256021506}}, {"docstring": " `innerSL` is an isometry. Note that the associated `linear_isometry` is defined in `inner_product_space.dual` as `to_dual_map`.\n", "keywords": {"innerSL": 0.07258934678807509, "isometry": 0.13638902991725962, "linear": 0.21373773690901868, "product": 0.21373773690901868, "space.dual": 0.21373773690901868, "dual": 0.21373773690901868, "map": 0.21373773690901868, "Note": 0.37951425938754646, "defined": 0.5209261917026199}}, {"docstring": "If `\u03b1` is a preorder with no maximal element, then `at_top \u2264 cofinite`.\n", "keywords": {"top": 0.04491197687864554, "cofinite": 0.04491197687864554, "maximal element": 0.04940384002065631, "element": 0.15831692877998726, "preorder": 0.29736558256021506, "maximal": 0.29736558256021506}}, {"docstring": "A semiring is local if it has a unique maximal ideal.\n", "keywords": {"unique maximal ideal": 0.0025258761156662004, "maximal ideal": 0.015380821171891606, "semiring is local": 0.02570861714399338, "unique maximal": 0.02570861714399338, "ideal": 0.09568045026443411, "semiring": 0.15831692877998726, "local": 0.15831692877998726, "unique": 0.15831692877998726, "maximal": 0.15831692877998726}}, {"docstring": " A product of a function over a `finset` in a subtype equals a product in the main type of a function that agrees with the first function on that `finset`.\n", "keywords": {"equals a product": 0.010418137275597912, "subtype equals": 0.010762734988585008, "main type": 0.010762734988585008, "finset": 0.023509470704055593, "function": 0.03938489216226218, "function that agrees": 0.044119983574050003, "product": 0.04995997751473051, "subtype": 0.10318978615207167, "equals": 0.10318978615207167, "main": 0.10318978615207167, "type": 0.10318978615207167, "agrees": 0.10318978615207167}}, {"docstring": "A version of `set.mem_finset_sum` with a simpler RHS for sums over a fintype.\n", "keywords": {"simpler RHS": 0.00992042969782043, "RHS for sums": 0.03224283814667961, "set.mem": 0.05331699930238388, "finset": 0.05331699930238388, "RHS": 0.07261214632111582, "fintype": 0.09101163530720666, "version": 0.135280142484453, "simpler": 0.135280142484453, "sum": 0.17954807775654547, "sums": 0.17954807775654547}}, {"docstring": "The `k`th coefficient of `polynomial.taylor r f` is `(polynomial.hasse_deriv k f).eval r`.\n", "keywords": {"polynomial.hasse": 0.04491197687864554, "polynomial.taylor": 0.09568045026443411, "deriv": 0.09568045026443411, "eval": 0.09568045026443411, "coefficient": 0.15831692877998726}}, {"docstring": " The \"greater than\" relation on `upto p` is well founded if (and only if) there exists a value satisfying `p`.\n", "keywords": {"greater": 0.09568045026443411, "relation": 0.09568045026443411, "upto": 0.09568045026443411, "satisfying": 0.09568045026443411, "founded": 0.15831692877998726, "exists": 0.15831692877998726}}, {"docstring": " A subspace is complement to its orthogonal complement with respect to some reflexive bilinear form if and only if that bilinear form restricted on to the subspace is nondegenerate.\n", "keywords": {"reflexive bilinear form": 0.0038367786168695913, "bilinear form restricted": 0.0038367786168695913, "bilinear form": 0.012525534843071673, "subspace is nondegenerate": 0.015782041889550694, "reflexive bilinear": 0.02353204081265201, "form restricted": 0.02353204081265201, "orthogonal complement": 0.03052534171702672, "complement with respect": 0.07054804767593278, "subspace is complement": 0.07477315412295657, "subspace": 0.0781646504872054, "bilinear": 0.0781646504872054, "form": 0.0781646504872054, "nondegenerate": 0.09938532796588936, "complement": 0.10070571056908109, "orthogonal": 0.1470678571383035, "respect": 0.1470678571383035, "reflexive": 0.1470678571383035, "restricted": 0.1470678571383035}}, {"docstring": " A fully expanded sum version of Vieta's formula, evaluated at the roots. The product of linear terms `X + r i` is equal to `\u2211 j in range (n + 1), e_j * X ^ (n - j)`, where `e_j` is the `j`th symmetric polynomial of the constant terms `r i`.\n", "keywords": {"fully expanded sum": 0.0021459211714998246, "expanded sum version": 0.0021459211714998246, "Vieta formula": 0.006285217648527183, "version of Vieta": 0.00828292986583197, "fully expanded": 0.016406548337108775, "expanded sum": 0.016406548337108775, "sum version": 0.016406548337108775, "Vieta": 0.06465865783040382, "linear terms": 0.08743846607219677, "constant terms": 0.08743846607219677, "formula": 0.09659898051390273, "evaluated": 0.09659898051390273, "roots": 0.09659898051390273, "terms": 0.11974089126271785, "fully": 0.12705006278260775, "expanded": 0.12705006278260775, "sum": 0.12705006278260775, "version": 0.12705006278260775, "product of linear": 0.12705633976208477, "symmetric polynomial": 0.12705633976208477}}, {"docstring": " A function on `[a, b]` with the norm of the right derivative bounded by `C` satisfies `\u2225f x - f a\u2225 \u2264 C * (x - a)`.\n", "keywords": {"derivative bounded": 0.009239332327148086, "satisfies": 0.04491197687864554, "function": 0.09568045026443411, "norm": 0.09568045026443411, "derivative": 0.09568045026443411, "bounded": 0.09568045026443411}}, {"docstring": "If a vector space has a finite basis, then it is finite-dimensional.\n", "keywords": {"finite basis": 0.015380821171891606, "vector space": 0.02570861714399338, "basis": 0.09568045026443411, "finite-dimensional": 0.09568045026443411, "vector": 0.15831692877998726, "space": 0.15831692877998726, "finite": 0.15831692877998726}}, {"docstring": " Dropping the elements up to `n` in `l\u2081 ++ l\u2082` is the same as dropping the elements up to `n` in `l\u2081`, dropping the elements up to `n - l\u2081.length` in `l\u2082`, and appending them.\n", "keywords": {"Dropping the elements": 0.0037610921427181617, "elements": 0.02812966696641158, "Dropping": 0.04407124330936486, "length": 0.09220612519689587, "appending": 0.12145861573270843}}, {"docstring": " If `f a = 1` when `a \u2209 s`, then the product of `f i` over `i \u2208 insert a s` equals the product of `f i` over `i \u2208 s`.\n", "keywords": {"equals the product": 0.007942711351828013, "product": 0.0456089852516003, "insert": 0.08638782221675846, "equals": 0.08638782221675846}}, {"docstring": "**Alias** of the reverse direction of is_extr_filter_dual_iff`.\n", "keywords": {"reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "extr": 0.04491197687864554, "filter": 0.04491197687864554, "dual": 0.04491197687864554, "iff": 0.04491197687864554, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "There exists `\u03c0 \u2208 R` with `v`-adic valuation `multiplicative.of_add (-1)`.\n", "keywords": {"adic valuation": 0.02570861714399338, "multiplicative.of": 0.04491197687864554, "add": 0.04491197687864554, "exists": 0.15831692877998726, "adic": 0.15831692877998726, "valuation": 0.15831692877998726}}, {"docstring": "A version of the **binomial theorem** for noncommutative semirings.\n", "keywords": {"binomial theorem": 0.02570861714399338, "noncommutative semirings": 0.04940384002065631, "binomial": 0.15831692877998726, "theorem": 0.15831692877998726, "semirings": 0.15831692877998726, "version": 0.29736558256021506, "noncommutative": 0.29736558256021506}}, {"docstring": "For `m < n`, `(n, m)` is in the transitive closure of a relation `~` for `n \u2260 m` if `i ~ pred i`  for all `i` between `n` and `m`.\n", "keywords": {"transitive closure": 0.009239332327148086, "relation": 0.06844581806138879, "pred": 0.06844581806138879, "transitive": 0.09568045026443411, "closure": 0.09568045026443411}}, {"docstring": "If `F` has odd characteristic, then `quadratic_char F` takes the value `-1`.\n", "keywords": {"odd characteristic": 0.015380821171891606, "quadratic": 0.04491197687864554, "characteristic": 0.09568045026443411, "char": 0.09568045026443411, "odd": 0.15831692877998726}}, {"docstring": "Polarization identity: The real part of the  inner product, in terms of the norm.\n", "keywords": {"Polarization identity": 0.005987543063120938, "real part": 0.013527995261974615, "Polarization": 0.0771485953923296, "identity": 0.0771485953923296, "product": 0.0771485953923296, "norm": 0.0771485953923296, "real": 0.1155310835876123, "part": 0.1155310835876123, "terms": 0.1155310835876123}}, {"docstring": "An `add_subgroup` contains the group's 0.\n", "keywords": {"add": 0.04491197687864554, "subgroup": 0.04491197687864554, "group": 0.15831692877998726}}, {"docstring": "We can shrink `A` to any smaller size.\n", "keywords": {"smaller size": 0.04940384002065631, "shrink": 0.15831692877998726, "size": 0.15831692877998726, "smaller": 0.29736558256021506}}, {"docstring": "A variation around the pseudometric characterization of Cauchy sequences\n", "keywords": {"Cauchy sequences": 0.023458380875189744, "characterization of Cauchy": 0.04498862876540802, "pseudometric characterization": 0.09700399286574239, "Cauchy": 0.1447773057422032, "sequences": 0.15831692877998726, "variation": 0.29736558256021506, "pseudometric": 0.29736558256021506, "characterization": 0.29736558256021506}}, {"docstring": "The composition operator (in the target) with a Lipschitz map is continuous\n", "keywords": {"Lipschitz map": 0.013797198203993007, "composition operator": 0.015380821171891606, "map is continuous": 0.015380821171891606, "Lipschitz": 0.08596317751626563, "operator": 0.09568045026443411, "target": 0.09568045026443411, "continuous": 0.09568045026443411, "composition": 0.15831692877998726, "map": 0.15831692877998726}}, {"docstring": " An order isomorphism between types with ordered subtraction preserves subtraction provided that it preserves addition.\n", "keywords": {"preserves subtraction provided": 0.017568046856521587, "ordered subtraction preserves": 0.01756804685652159, "subtraction preserves subtraction": 0.026785398368622346, "preserves addition": 0.03378800767844735, "order isomorphism": 0.037831312533597124, "isomorphism between types": 0.037831312533597124, "types with ordered": 0.037831312533597124, "ordered subtraction": 0.0562460611896591, "subtraction provided": 0.0562460611896591, "subtraction preserves": 0.08435290273549796, "preserves subtraction": 0.08435290273549796, "addition": 0.11718348279991213, "subtraction": 0.13945519496053638, "preserves": 0.13945519496053638, "order": 0.19092478917347616, "isomorphism": 0.19092478917347616, "types": 0.19092478917347616, "ordered": 0.19092478917347616, "provided": 0.19092478917347616}}, {"docstring": "**Alias** of cardinal.mk_congr`.\n", "keywords": {"Alias": 0.030396371632413578, "congr": 0.04491197687864554, "cardinal.mk": 0.15831692877998726}}, {"docstring": " **Rearrangement Inequality**: Pointwise scalar multiplication of `f` and `g` is maximized when `f` and `g` monovary together. Stated by permuting the entries of `f`.\n", "keywords": {"Pointwise scalar multiplication": 0.001271864619686412, "Rearrangement Inequality": 0.0031146356952437464, "Pointwise scalar": 0.008334116283452563, "scalar multiplication": 0.02249651976012989, "Rearrangement": 0.05572221155747183, "Inequality": 0.05572221155747183, "Pointwise": 0.05572221155747183, "monovary": 0.10028582371075691, "Stated by permuting": 0.11755105063023073, "scalar": 0.14832923246533666, "multiplication": 0.14832923246533666, "maximized": 0.14832923246533666, "permuting the entries": 0.165573765898185, "Stated": 0.2790829227183407, "permuting": 0.37689977775222827, "entries": 0.37689977775222827}}, {"docstring": "The image of stone_cech_unit is dense. (But stone_cech_unit need  not be an embedding, for example if \u03b1 is not Hausdorff.)\n", "keywords": {"cech": 0.04974309391556624, "unit is dense": 0.11965493030034306, "stone": 0.15323737026073897, "unit": 0.15323737026073897, "dense": 0.17182795856791505, "image of stone": 0.18653117847285564, "Hausdorff": 0.22579597569785792, "image": 0.2694601965222793, "embedding": 0.41880289468275533}}, {"docstring": "**Alias** of pgame.lf_of_fuzzy`.\n", "keywords": {"Alias": 0.030396371632413578, "fuzzy": 0.04491197687864554, "pgame.lf": 0.09568045026443411}}, {"docstring": "Bind operation for `sup_indep`.\n", "keywords": {"indep": 0.04491197687864554, "Bind operation": 0.04940384002065631, "Bind": 0.15831692877998726, "operation": 0.29736558256021506}}, {"docstring": "See `tsub_lt_tsub_iff_left_of_le` for a stronger statement in a linear order.\n", "keywords": {"tsub": 0.019320982933644256, "linear order": 0.021114872146320036, "stronger statement": 0.03498702377830618, "iff": 0.053316999302383886, "left": 0.053316999302383886, "order": 0.11246769819744629, "stronger": 0.1838594885424691, "statement": 0.1838594885424691, "linear": 0.1838594885424691}}, {"docstring": "For a self-adjoint operator `T`, the function `\u03bb x, \u27eaT x, x\u27eb` is real-valued.\n", "keywords": {"self-adjoint operator": 0.00899321792126428, "operator": 0.0771485953923296, "function": 0.0771485953923296, "real-valued": 0.0771485953923296, "self-adjoint": 0.1155310835876123}}, {"docstring": "The (Bochner) integral of the product of two independent, integrable random  variables is the product of their integrals. The proof is pedestrian decomposition  into their positive and negative parts in order to apply `indep_fun.integral_mul_of_nonneg`  four times.\n", "keywords": {"integrable random variables": 0.0025008350612636, "integrable random": 0.016281477206089707, "random variables": 0.02251957186859842, "Bochner": 0.040742737524486844, "product": 0.04943689479069736, "independent": 0.10795320618316272, "integrable": 0.10795320618316272, "order to apply": 0.1255869120426714, "random": 0.14840353637699516, "variables": 0.14840353637699516, "integral": 0.1632234433917396, "integrals": 0.1632234433917396, "proof is pedestrian": 0.16571524955496025, "pedestrian decomposition": 0.16571524955496025, "positive and negative": 0.16571524955496025, "negative parts": 0.16571524955496025, "parts in order": 0.16571524955496025, "indep": 0.21197353881683212, "fun.integral": 0.21197353881683212, "mul": 0.21197353881683212}}, {"docstring": "Two equivalent local equivs have the same target\n", "keywords": {"equivalent local equivs": 0.03339840940482845, "equivalent local": 0.09700399286574239, "local equivs": 0.09700399286574239, "target": 0.15831692877998726, "equivalent": 0.29736558256021506, "local": 0.29736558256021506, "equivs": 0.29736558256021506}}, {"docstring": "`std_simplex \u211d \u03b9` is bounded.\n", "keywords": {"std": 0.04491197687864554, "simplex": 0.15831692877998726, "bounded": 0.15831692877998726}}, {"docstring": " Given finite sets `s` and `t`, the product of `f i` over `i \u2208 s \u222a t` times the product of `f i` over `i \u2208 s \u2229 t` equals the product of `f i` over `i \u2208 s` times the product of `f i` over `i \u2208 t`.\n", "keywords": {"times the product": 0.0019619478802313938, "equals the product": 0.004836755894932045, "finite sets": 0.008159889258926734, "product": 0.014721584748430534, "times": 0.03318731516709466, "sets": 0.08174178216911933, "equals": 0.08174178216911933, "finite": 0.09901722436537884}}, {"docstring": "Defining property of the solution space : `u` is a solution  iff it belongs to the solution space.\n", "keywords": {"solution space": 0.007466863120163012, "Defining property": 0.016199470991553867, "iff it belongs": 0.024099744342406085, "solution iff": 0.028472805997337213, "space": 0.040766003602524706, "solution": 0.060156299443941484, "Defining": 0.10391704273842664, "property": 0.1534034365742674, "iff": 0.1534034365742674, "belongs": 0.1534034365742674}}, {"docstring": " Auxiliary lemma: Multivariate polynomials over an integral domain with variables indexed by `fin n` form an integral domain. This fact is proven inductively, and then used to prove the general case without any finiteness hypotheses. See `mv_polynomial.is_domain` for the general case.\n", "keywords": {"Multivariate polynomials": 0.01621653676265396, "form an integral": 0.025018998774711174, "Auxiliary lemma": 0.02586445598546744, "integral domain": 0.038726628688386645, "variables indexed": 0.05471159578568737, "Multivariate": 0.07006466057398543, "integral": 0.07686016851219829, "general case": 0.11513240234006467, "domain": 0.155879378670335, "Auxiliary": 0.1587839797064094, "lemma": 0.1587839797064094, "fin": 0.1587839797064094, "form": 0.1587839797064094, "general": 0.19512518988185742, "polynomials": 0.22775757529601173, "variables": 0.22775757529601173, "indexed": 0.22775757529601173, "case": 0.23980356347530546, "prove the general": 0.24605719108645896, "proven inductively": 0.25057072585891}}, {"docstring": "See also `comp_open_symm_mem_uniformity_sets`.\n", "keywords": {"comp": 0.04491197687864554, "open": 0.04491197687864554, "symm": 0.04491197687864554, "mem": 0.04491197687864554, "uniformity": 0.04491197687864554, "sets": 0.04491197687864554}}, {"docstring": " While in many cases `fin.cast` is better than `equiv.cast`/`cast`, sometimes we want to apply a generic theorem about `cast`.\n", "keywords": {"cast": 0.019320982933644253, "apply a generic": 0.034987023778306175, "generic theorem": 0.034987023778306175, "fin.cast": 0.05331699930238388, "equiv.cast": 0.05331699930238388, "cases": 0.11246769819744627, "apply": 0.18385948854246909, "generic": 0.18385948854246909, "theorem": 0.18385948854246909}}, {"docstring": " If the distance between any two points in a set is bounded by some constant `C`, then `ennreal.of_real C`  bounds the emetric diameter of this set.\n", "keywords": {"bounds the emetric": 0.020171377334626643, "emetric diameter": 0.03346752176983843, "ennreal.of": 0.052008009273421085, "set is bounded": 0.10742270288518663, "constant": 0.10987504304330521, "real": 0.10987504304330521, "bounds": 0.10987504304330521, "set": 0.12922594861139264, "distance": 0.17995476918065306, "points": 0.17995476918065306, "bounded": 0.17995476918065306, "emetric": 0.17995476918065306, "diameter": 0.17995476918065306}}, {"docstring": "In a connected category, any two objects are related by `zigzag`.\n", "keywords": {"zigzag": 0.04491197687864554, "connected category": 0.04940384002065631, "objects are related": 0.09700399286574239, "category": 0.15831692877998726, "connected": 0.29736558256021506, "objects": 0.29736558256021506, "related": 0.29736558256021506}}, {"docstring": "The cosine of the angle between two vectors.\n", "keywords": {"vectors": 0.09568045026443411, "cosine": 0.15831692877998726, "angle": 0.15831692877998726}}, {"docstring": "A totally bounded set is bounded\n", "keywords": {"totally bounded set": 0.012476328642182708, "totally bounded": 0.05913243875864445, "bounded set": 0.05913243875864445, "set is bounded": 0.12748048004056906, "bounded": 0.14323823713631006, "totally": 0.19488865479360015, "set": 0.19488865479360015}}, {"docstring": "The identity map is conservative w.r.t. any measure.\n", "keywords": {"map is conservative": 0.04940384002065631, "identity map": 0.09700399286574239, "conservative": 0.15831692877998726, "measure": 0.15831692877998726, "identity": 0.29736558256021506, "map": 0.29736558256021506}}, {"docstring": "A piecewise function on countably many pieces is measurable if all the data is measurable.\n", "keywords": {"piecewise function": 0.035715520099333646, "function on countably": 0.035715520099333646, "countably many pieces": 0.035715520099333646, "pieces is measurable": 0.039293477084795844, "data is measurable": 0.039293477084795844, "measurable": 0.10179911835611566, "piecewise": 0.18569843656348187, "function": 0.18569843656348187, "countably": 0.18569843656348187, "pieces": 0.18569843656348187, "data": 0.18569843656348187}}, {"docstring": "A local minimum of a convex function is a global minimum.\n", "keywords": {"convex function": 0.019557279302732804, "local minimum": 0.02635223776265893, "global minimum": 0.02635223776265893, "minimum": 0.09269208833952335, "local": 0.1384995633470844, "convex": 0.1384995633470844, "function": 0.1384995633470844, "global": 0.1384995633470844}}, {"docstring": "Uses `right` co(ntra)variant.\n", "keywords": {"ntra": 0.04491197687864554, "variant": 0.04491197687864554}}, {"docstring": "There exists at most one `floor_ring` structure on a given linear ordered ring.\n", "keywords": {"linear ordered ring": 0.005253288609899719, "ordered ring": 0.02681089848262901, "linear ordered": 0.035715520099333646, "floor": 0.05393656033701752, "ring": 0.07030442419566416, "structure": 0.11369206228658875, "exists": 0.18569843656348187, "linear": 0.18569843656348187, "ordered": 0.18569843656348187}}, {"docstring": " The sum of `1/(c^i)^2` above a threshold `j` is comparable to `1/j^2`, up to a multiplicative constant.\n", "keywords": {"multiplicative constant": 0.015380821171891606, "threshold": 0.09568045026443411, "constant": 0.09568045026443411, "sum": 0.15831692877998726, "comparable": 0.15831692877998726, "multiplicative": 0.15831692877998726}}, {"docstring": "Bitwise extensionality: Two numbers agree if they agree at every bit position.\n", "keywords": {"Bitwise extensionality": 0.013095151449018445, "bit position": 0.021567786782198985, "numbers agree": 0.05259515133015473, "Bitwise": 0.11369206228658875, "extensionality": 0.11369206228658875, "position": 0.11369206228658875, "agree": 0.13453835116331675, "numbers": 0.18569843656348187, "bit": 0.18569843656348187}}, {"docstring": "If a Cauchy sequence has a convergent subsequence, then it converges.\n", "keywords": {"Cauchy sequence": 0.013797198203993007, "convergent subsequence": 0.015380821171891606, "Cauchy": 0.08596317751626563, "subsequence": 0.09568045026443411, "converges": 0.09568045026443411, "sequence": 0.15831692877998726, "convergent": 0.15831692877998726}}, {"docstring": "The `nonsing_inv` of `A` is a right inverse.\n", "keywords": {"nonsing": 0.04491197687864554, "inv": 0.04491197687864554, "inverse": 0.09568045026443411}}, {"docstring": " A series of non-negative real numbers converges to `r` in the sense of `has_sum` if and only if the sequence of partial sum converges to `r`.\n", "keywords": {"non-negative real numbers": 0.0028710480839241738, "real numbers converges": 0.0029834933651055333, "partial sum converges": 0.0040547768529782995, "series of non-negative": 0.01986718810864864, "non-negative real": 0.01986718810864864, "real numbers": 0.01986718810864864, "sequence of partial": 0.01986718810864864, "numbers converges": 0.02063316919723774, "partial sum": 0.02685070135884219, "sum converges": 0.02789329634803439, "converges": 0.07242189318011968, "sum": 0.09367462051261369, "series": 0.13957138628574278, "non-negative": 0.13957138628574278, "real": 0.13957138628574278, "numbers": 0.13957138628574278, "sense": 0.13957138628574278, "sequence": 0.13957138628574278, "partial": 0.13957138628574278}}, {"docstring": " In a linearly ordered field with the order topology, if `f` tends to `at_bot` and `g` tends to a negative constant `C` then `f * g` tends to `at_top`.\n", "keywords": {"linearly ordered field": 0.0016012214736657916, "order topology": 0.00899321792126428, "negative constant": 0.00899321792126428, "linearly ordered": 0.013527995261974615, "ordered field": 0.013527995261974615, "bot": 0.04491197687864554, "top": 0.04491197687864554, "topology": 0.0771485953923296, "constant": 0.0771485953923296, "linearly": 0.1155310835876123, "ordered": 0.1155310835876123, "field": 0.1155310835876123, "order": 0.1155310835876123, "negative": 0.1155310835876123}}, {"docstring": "The span of a finite subset is compact in the lattice of submodules.\n", "keywords": {"lattice of submodules": 0.015380821171891606, "finite subset": 0.02570861714399338, "subset is compact": 0.02570861714399338, "submodules": 0.09568045026443411, "span": 0.15831692877998726, "finite": 0.15831692877998726, "subset": 0.15831692877998726, "compact": 0.15831692877998726, "lattice": 0.15831692877998726}}, {"docstring": "Assumes left covariance.\n", "keywords": {"Assumes left covariance": 0.008321268142839145, "Assumes left": 0.04940384002065631, "left covariance": 0.04940384002065631, "Assumes": 0.15831692877998726, "covariance": 0.15831692877998726, "left": 0.29736558256021506}}, {"docstring": "`order_emb_of_fin {a} h` sends any argument to `a`.\n", "keywords": {"sends any argument": 0.015380821171891606, "order": 0.04491197687864554, "emb": 0.04491197687864554, "fin": 0.04491197687864554, "sends": 0.09568045026443411, "argument": 0.15831692877998726}}, {"docstring": "If `s` has a greatest lower bound, then it is bounded below.\n", "keywords": {"greatest lower bound": 0.016559150827736194, "lower bound": 0.04940384002065631, "greatest lower": 0.09700399286574239, "bound": 0.15831692877998726, "greatest": 0.29736558256021506, "lower": 0.29736558256021506, "bounded": 0.29736558256021506}}, {"docstring": " `f` is eventually bounded if and only if, there exists an admissible set on which it is bounded.\n", "keywords": {"exists an admissible": 0.03663237450220032, "admissible set": 0.03663237450220032, "eventually bounded": 0.05417025203414716, "bounded": 0.13667842094541144, "eventually": 0.1879836817695587, "exists": 0.1879836817695587, "admissible": 0.1879836817695587, "set": 0.1879836817695587}}, {"docstring": " If two complex differentiable functions `f g : E \u2192 F` are equal on the boundary of a bounded set `U`, then they are equal on `U`.\n", "keywords": {"complex differentiable functions": 0.0040773465381768225, "differentiable functions": 0.021114872146320032, "bounded set": 0.021114872146320032, "complex differentiable": 0.034987023778306175, "equal": 0.069255433448279, "functions": 0.11246769819744627, "set": 0.11246769819744627, "complex": 0.18385948854246909, "differentiable": 0.18385948854246909, "boundary": 0.18385948854246909, "bounded": 0.18385948854246909}}, {"docstring": "**Alias** of the reverse direction of has_compact_support_norm_iff`.\n", "keywords": {"reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "compact": 0.04491197687864554, "support": 0.04491197687864554, "norm": 0.04491197687864554, "iff": 0.04491197687864554, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "The p-adic norm of 1 is 1.\n", "keywords": {"p-adic norm": 0.02570861714399338, "p-adic": 0.15831692877998726, "norm": 0.15831692877998726}}, {"docstring": "Subtracting an element is the same as adding by its negative.  This is a duplicate of `sub_neg_monoid.sub_eq_mul_neg` ensuring that the types unfold better.\n", "keywords": {"Subtracting an element": 0.035823369414816786, "neg": 0.07170568664164803, "Subtracting": 0.14724705908851674, "negative": 0.14724705908851674, "monoid.sub": 0.2104440927400966, "mul": 0.2104440927400966, "element": 0.2348735419198309, "adding": 0.2348735419198309, "types unfold": 0.3628836306470974, "ensuring": 0.3748840432180225, "duplicate": 0.5160054651028707, "types": 0.5160054651028707, "unfold": 0.5160054651028707}}, {"docstring": "Like `submodule.map_pow`\n", "keywords": {"submodule.map": 0.04491197687864554, "pow": 0.04491197687864554}}, {"docstring": "A specialized ext lemma for equality of psigma types over an indexed subtype.\n", "keywords": {"specialized ext lemma": 0.03339840940482845, "indexed subtype": 0.04940384002065631, "specialized ext": 0.09700399286574239, "ext lemma": 0.09700399286574239, "lemma for equality": 0.09700399286574239, "equality of psigma": 0.09700399286574239, "psigma types": 0.09700399286574239, "subtype": 0.15831692877998726, "specialized": 0.29736558256021506, "ext": 0.29736558256021506, "lemma": 0.29736558256021506, "equality": 0.29736558256021506, "psigma": 0.29736558256021506, "types": 0.29736558256021506, "indexed": 0.29736558256021506}}, {"docstring": "Given a pullback in `C`, construct a binary product in `C/B`.\n", "keywords": {"construct a binary": 0.015380821171891606, "binary product": 0.02570861714399338, "construct": 0.09568045026443411, "pullback": 0.15831692877998726, "binary": 0.15831692877998726, "product": 0.15831692877998726}}, {"docstring": " A map between emetric spaces is a uniform embedding if and only if the edistance between `f x` and `f y` is controlled in terms of the distance between `x` and `y` and conversely.\n", "keywords": {"map between emetric": 0.009239332327148086, "emetric spaces": 0.009239332327148086, "uniform embedding": 0.009239332327148086, "controlled in terms": 0.009239332327148086, "conversely": 0.06844581806138879, "map": 0.09568045026443411, "emetric": 0.09568045026443411, "spaces": 0.09568045026443411, "uniform": 0.09568045026443411, "embedding": 0.09568045026443411, "edistance": 0.09568045026443411, "controlled": 0.09568045026443411, "terms": 0.09568045026443411, "distance": 0.09568045026443411}}, {"docstring": " Any `1`-separated set in the ball of radius `2` has cardinality at most `5 ^ dim`. This is useful to show that the supremum in the definition of `besicovitch.multiplicity E` is well behaved.\n", "keywords": {"separated set": 0.015099935621315529, "ball of radius": 0.015099935621315529, "dim": 0.05899937629682816, "separated": 0.10028582371075691, "radius": 0.10028582371075691, "set": 0.14832923246533666, "ball": 0.14832923246533666, "cardinality": 0.14832923246533666, "besicovitch.multiplicity": 0.2790829227183407, "behaved": 0.2790829227183407, "show": 0.37689977775222827, "supremum": 0.37689977775222827, "definition": 0.37689977775222827}}, {"docstring": "We can assume that a minimal solution to `a ^ 4 + b ^ 4 = c ^ 2` has positive `c`.\n", "keywords": {"minimal solution": 0.02570861714399338, "positive": 0.09568045026443411, "assume": 0.15831692877998726, "minimal": 0.15831692877998726, "solution": 0.15831692877998726}}, {"docstring": "`A[x]` is a fractional ideal for every integral `x`.\n", "keywords": {"fractional ideal": 0.02570861714399338, "integral": 0.09568045026443411, "fractional": 0.15831692877998726, "ideal": 0.15831692877998726}}, {"docstring": "If {r} is less than or equal to s in the colexicographical sense,  then s contains an element greater than or equal to r.\n", "keywords": {"colexicographical sense": 0.022138323509052035, "element greater": 0.03663237450220032, "equal": 0.07162298286637953, "sense": 0.11521656054299435, "colexicographical": 0.1879836817695587, "element": 0.1879836817695587, "greater": 0.1879836817695587}}, {"docstring": " If the elements of a set are independent, then any element is disjoint from the `Sup` of some subset of the rest.\n", "keywords": {"set are independent": 0.012741693123860753, "element is disjoint": 0.06004269098969672, "independent": 0.09202664026077896, "rest": 0.09202664026077896, "set": 0.1367145963576765, "disjoint": 0.1367145963576765, "subset": 0.1367145963576765, "elements": 0.18213622310077732, "element": 0.18213622310077732}}, {"docstring": "A version of the global `continuous_inv` suitable for dot notation.\n", "keywords": {"continuous": 0.04491197687864554, "inv": 0.04491197687864554, "suitable for dot": 0.04940384002065631, "dot notation": 0.04940384002065631, "global": 0.15831692877998726, "suitable": 0.15831692877998726, "notation": 0.15831692877998726, "version": 0.29736558256021506, "dot": 0.29736558256021506}}, {"docstring": "**Alias** of `left.add_pos_of_pos_of_nonneg`.\n", "keywords": {"pos": 0.020602899695743707, "Alias": 0.03498516242744211, "left.add": 0.055708263664958506, "nonneg": 0.055708263664958506}}, {"docstring": " A function which is continuous on a set `s` is almost everywhere measurable with respect to `\u03bc.restrict s`.\n", "keywords": {"measurable with respect": 0.02570861714399338, "set": 0.09568045026443411, "\u03bc.restrict": 0.09568045026443411, "function": 0.15831692877998726, "continuous": 0.15831692877998726, "measurable": 0.15831692877998726, "respect": 0.15831692877998726}}, {"docstring": " If `R` is of characteristic `p` and `p \u2223 n`, then `cyclotomic (n * p) R = (cyclotomic n R) ^ p`.\n", "keywords": {"cyclotomic": 0.04784022513221706, "characteristic": 0.08922538916412363}}, {"docstring": "**Alias** of the forward direction of has_deriv_within_at_Ioi_iff_Ici`.\n", "keywords": {"forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "Ioi": 0.030396371632413578, "Ici": 0.030396371632413578, "deriv": 0.04491197687864554, "iff": 0.04491197687864554, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "The direct path from `0` to `v` is shorter than the path with `u` inserted in between.\n", "keywords": {"direct path": 0.0562460611896591, "inserted": 0.11718348279991213, "path": 0.13945519496053638, "direct": 0.19092478917347616, "shorter": 0.19092478917347616}}, {"docstring": " **Rearrangement Inequality**: Pointwise scalar multiplication of `f` and `g` is minimized when `f` and `g` antivary together. Stated by permuting the entries of `f`.\n", "keywords": {"Pointwise scalar multiplication": 0.001271864619686412, "Rearrangement Inequality": 0.0031146356952437464, "Pointwise scalar": 0.008334116283452563, "scalar multiplication": 0.02249651976012989, "Rearrangement": 0.05572221155747183, "Inequality": 0.05572221155747183, "Pointwise": 0.05572221155747183, "antivary": 0.10028582371075691, "Stated by permuting": 0.11755105063023073, "scalar": 0.14832923246533666, "multiplication": 0.14832923246533666, "minimized": 0.14832923246533666, "permuting the entries": 0.165573765898185, "Stated": 0.2790829227183407, "permuting": 0.37689977775222827, "entries": 0.37689977775222827}}, {"docstring": " If a function `f` is continuous on a convex set `D \u2286 \u211d`, is twice differentiable on its interior, and `f''` is nonpositive on the interior, then `f` is concave on `D`.\n", "keywords": {"convex set": 0.009011535511097367, "interior": 0.04092200269394482, "function": 0.08012982629475915, "set": 0.08012982629475915, "continuous": 0.11145728654016383, "convex": 0.11145728654016383, "differentiable": 0.11145728654016383, "nonpositive": 0.11145728654016383, "concave": 0.11145728654016383}}, {"docstring": "If a set `s` does not contain any elements between any pair of elements `x, z \u2208 s` with `x \u2264 z` (i.e if given `x, y, z \u2208 s` such that `x \u2264 y \u2264 z`, then `y` is either `x` or `z`), then `s` is finite.\n", "keywords": {"pair of elements": 0.031993675688683956, "elements": 0.061112637987524886, "set": 0.07830062329966068, "finite": 0.07830062329966068, "pair": 0.1036452554536235}}, {"docstring": "An auxiliary lemma for manipulating sequence indices.\n", "keywords": {"manipulating sequence indices": 0.016559150827736194, "sequence indices": 0.04940384002065631, "auxiliary lemma": 0.09700399286574239, "lemma for manipulating": 0.09700399286574239, "manipulating sequence": 0.09700399286574239, "indices": 0.15831692877998726, "auxiliary": 0.29736558256021506, "lemma": 0.29736558256021506, "manipulating": 0.29736558256021506, "sequence": 0.29736558256021506}}, {"docstring": " If the derivative of a function is never equal to `m`, then either it is always greater than `m`, or it is always less than `m`.\n", "keywords": {"derivative": 0.1155310835876123, "function": 0.1155310835876123, "equal": 0.1155310835876123, "greater": 0.1155310835876123}}, {"docstring": "The reduction modulo `p` of the minimal polynomial of a root of unity `\u03bc` is squarefree.\n", "keywords": {"reduction modulo": 0.00899321792126428, "root of unity": 0.00899321792126428, "minimal polynomial": 0.013527995261974615, "modulo": 0.0771485953923296, "unity": 0.0771485953923296, "squarefree": 0.0771485953923296, "reduction": 0.1155310835876123, "minimal": 0.1155310835876123, "polynomial": 0.1155310835876123, "root": 0.1155310835876123}}, {"docstring": " The set of all permutations of `fin (n + 1)` can be constructed by augmenting the set of permutations of `fin n` by each element of `fin (n + 1)` in turn.\n", "keywords": {"augmenting the set": 0.010322725218492791, "constructed by augmenting": 0.013131219327399486, "set of permutations": 0.026183232016520865, "fin": 0.031531695300810424, "set": 0.04487294478926483, "permutations": 0.057042420906002415, "turn": 0.08624735562203181, "constructed": 0.1138464986812353, "augmenting": 0.1138464986812353, "element": 0.1138464986812353}}, {"docstring": " If a function `f` is convex on `s`, then the value it takes at some center of mass of points of `s` is less than the value it takes on one of those points.\n", "keywords": {"center of mass": 0.013453448411345069, "mass of points": 0.04095532377320458, "points": 0.07162298286637953, "function": 0.08293109455034965, "convex": 0.11521656054299435, "center": 0.11521656054299435, "mass": 0.11521656054299435}}, {"docstring": "If `p` is prime, and `a` doesn't divide `p^k`, but `a` does divide `p^(k+1)` then `a = p^(k+1)`.\n", "keywords": {"divide": 0.04784022513221706, "prime": 0.08922538916412363}}, {"docstring": " The complex hyperbolic cosine function is everywhere differentiable, with the derivative `sinh x`.\n", "keywords": {"complex hyperbolic cosine": 0.0042542192213185686, "hyperbolic cosine function": 0.0042542192213185686, "complex hyperbolic": 0.02570861714399338, "hyperbolic cosine": 0.02570861714399338, "cosine function": 0.02570861714399338, "differentiable": 0.09568045026443411, "derivative": 0.09568045026443411, "sinh": 0.09568045026443411, "complex": 0.15831692877998726, "hyperbolic": 0.15831692877998726, "cosine": 0.15831692877998726, "function": 0.15831692877998726}}, {"docstring": "The maps `to_inductive_limit n` are compatible with the maps `f n`.\n", "keywords": {"maps": 0.04408578671136769, "inductive": 0.055708263664958506, "limit": 0.11718348279991213, "compatible": 0.19092478917347616}}, {"docstring": "Deprecated: use `fun_like.congr_fun` instead.\n", "keywords": {"fun": 0.021352745740207107, "Deprecated": 0.05706283858652404, "like.congr": 0.05706283858652404}}, {"docstring": "A rewrite lemma for `padic_val_rat p (q / r)` with conditions `q \u2260 0`, `r \u2260 0`.\n", "keywords": {"rewrite lemma": 0.02570861714399338, "padic": 0.04491197687864554, "val": 0.04491197687864554, "rat": 0.09568045026443411, "conditions": 0.09568045026443411, "rewrite": 0.15831692877998726, "lemma": 0.15831692877998726}}, {"docstring": "A function is interval integrable with respect to a given measure `\u03bc` on `a..b` if and  only if it is integrable on `interval_oc a b` with respect to `\u03bc`. This is an equivalent  definition of `interval_integrable`.\n", "keywords": {"respect": 0.08526340718900302, "measure": 0.15884637440969426, "interval": 0.16157046601139377, "integrable": 0.16157046601139377, "integrable with respect": 0.21783815534752704, "function": 0.2278397325662929, "function is interval": 0.2948244823364068, "interval integrable": 0.30709580643034734, "equivalent definition": 0.3443736065569154, "equivalent": 0.5061216796639354, "definition": 0.5061216796639354}}, {"docstring": "Determinant of 3x3 matrix\n", "keywords": {"matrix": 0.04491197687864554, "Determinant": 0.15831692877998726}}, {"docstring": "In a nontrivial monoid with zero, zero and one are different.\n", "keywords": {"nontrivial monoid": 0.02570861714399338, "nontrivial": 0.15831692877998726, "monoid": 0.15831692877998726}}, {"docstring": "Right-multiplying a permutation with `swap i j` twice gives the original permutation.   This specialization of `swap_mul_self` is useful when using cosets of permutations.\n", "keywords": {"original permutation": 0.10851382780939597, "swap": 0.12258716109777466, "Right-multiplying": 0.14785619304818992, "Right-multiplying a permutation": 0.18102638863081016, "original": 0.21328645712451538, "permutation": 0.2294830918380903, "mul": 0.2531576511174968, "specialization": 0.48495692933076867, "cosets": 0.48495692933076867, "cosets of permutations": 0.6269995533998775}}, {"docstring": " If `E` is a vector space over two division rings `R` and `S`, then scalar multiplications agree on rational numbers in `R` and `S`.\n", "keywords": {"scalar multiplications agree": 0.0042542192213185686, "division rings": 0.015380821171891606, "vector space": 0.02570861714399338, "scalar multiplications": 0.02570861714399338, "multiplications agree": 0.02570861714399338, "agree on rational": 0.02570861714399338, "rational numbers": 0.02570861714399338, "rings": 0.09568045026443411, "vector": 0.15831692877998726, "space": 0.15831692877998726, "division": 0.15831692877998726, "scalar": 0.15831692877998726, "multiplications": 0.15831692877998726, "agree": 0.15831692877998726, "rational": 0.15831692877998726, "numbers": 0.15831692877998726}}, {"docstring": "The degree of `cyclotomic n` is `totient n`.\n", "keywords": {"cyclotomic": 0.09568045026443411, "totient": 0.09568045026443411, "degree": 0.15831692877998726}}, {"docstring": " When the derivative of a function is nonnegative, then it is automatically integrable, interval version.\n", "keywords": {"interval version": 0.009239332327148086, "function is nonnegative": 0.015380821171891606, "automatically integrable": 0.015380821171891606, "nonnegative": 0.09568045026443411, "integrable": 0.09568045026443411, "interval": 0.09568045026443411, "version": 0.09568045026443411, "derivative": 0.15831692877998726, "function": 0.15831692877998726, "automatically": 0.15831692877998726}}, {"docstring": " The set of differentiability points of a function, with derivative in a given complete set, is Borel-measurable.\n", "keywords": {"differentiability points": 0.03498702377830618, "complete set": 0.05135123883758033, "Borel-measurable": 0.06257809066078279, "set of differentiability": 0.11245662598947329, "function": 0.11246769819744629, "set": 0.13282721021560867, "differentiability": 0.1838594885424691, "points": 0.1838594885424691, "derivative": 0.1838594885424691, "complete": 0.1838594885424691}}, {"docstring": "The leading coefficient of a product of polynomials is equal to the product of the leading coefficients.  See `polynomial.leading_coeff_multiset_prod'` (with a `'`) for a version for commutative semirings, where additionally, the product of the leading coefficients must be nonzero.\n", "keywords": {"leading coefficients": 0.0197089928943823, "polynomials is equal": 0.0273911446255073, "product of polynomials": 0.03344478123422515, "leading": 0.053046497983166026, "product": 0.06606670492047544, "coefficients": 0.11915059975866775, "commutative semirings": 0.15511385243468492, "polynomials": 0.16328157520897937, "equal": 0.16328157520897937, "version for commutative": 0.195010403465311, "polynomial.leading": 0.2569430367823125, "coeff": 0.2569430367823125, "multiset": 0.2569430367823125, "prod": 0.2569430367823125, "semirings": 0.33241663186451476, "additionally": 0.33241663186451476, "nonzero": 0.33241663186451476, "version": 0.40396435667875424, "commutative": 0.40396435667875424}}, {"docstring": "A prime power divides `n!` iff it is at most the sum of the quotients `n / p ^ i`.  This sum is expressed over the set `Ico 1 b` where `b` is any bound greater than `log p n`\n", "keywords": {"prime power divides": 0.0038833895823138826, "power divides": 0.021248340299531192, "prime power": 0.03142433442165886, "divides": 0.1192008334966339, "iff": 0.1192008334966339, "quotients": 0.1192008334966339, "Ico": 0.12748790005930788, "sum": 0.1658975107802271, "prime": 0.17454779110930135, "power": 0.17454779110930135, "bound greater": 0.21846569551000553, "sum is expressed": 0.3160108111306524, "set": 0.3197366584666406, "log": 0.3197366584666406, "expressed": 0.42343326428770406, "bound": 0.42343326428770406, "greater": 0.42343326428770406}}, {"docstring": "The length of the antidiagonal of `n` is `n + 1`.\n", "keywords": {"length": 0.15831692877998726, "antidiagonal": 0.15831692877998726}}, {"docstring": "If `f \u2264 g` and `f` is monotone, then `f^[n] \u2264 g^[n]`.\n", "keywords": {"monotone": 0.0771485953923296}}, {"docstring": " In a linearly ordered additive commutative group with the order topology, if `f` tends to `at_top` and `g` tends to `C` then `f + g` tends to `at_top`.\n", "keywords": {"linearly ordered additive": 0.002535831815717203, "ordered additive commutative": 0.002535831815717203, "additive commutative group": 0.002535831815717203, "order topology": 0.012240009979360944, "linearly ordered": 0.018310930906343142, "ordered additive": 0.018310930906343142, "additive commutative": 0.018310930906343142, "commutative group": 0.018310930906343142, "top": 0.019053917256533312, "topology": 0.09017440044927587, "linearly": 0.13409574860218185, "ordered": 0.13409574860218185, "additive": 0.13409574860218185, "commutative": 0.13409574860218185, "group": 0.13409574860218185, "order": 0.13409574860218185}}, {"docstring": " `s.subtype p` converts back to `s.filter p` with `embedding.subtype`.\n", "keywords": {"converts back": 0.015380821171891606, "embedding.subtype": 0.04491197687864554, "s.subtype": 0.09568045026443411, "converts": 0.09568045026443411, "s.filter": 0.09568045026443411, "back": 0.15831692877998726}}, {"docstring": "Rectangles form a \u03c0-system.\n", "keywords": {"Rectangles form": 0.04940384002065631, "form a \u03c0-system": 0.04940384002065631, "Rectangles": 0.15831692877998726, "\u03c0-system": 0.15831692877998726, "form": 0.29736558256021506}}, {"docstring": " The Inf of a bounded-below set is its greatest lower bound for a conditionally complete lattice with a top.\n", "keywords": {"greatest lower bound": 0.0016012214736657916, "conditionally complete lattice": 0.0016012214736657916, "bounded-below set": 0.013527995261974615, "greatest lower": 0.013527995261974615, "lower bound": 0.013527995261974615, "conditionally complete": 0.013527995261974615, "complete lattice": 0.013527995261974615, "top": 0.0771485953923296, "bounded-below": 0.1155310835876123, "set": 0.1155310835876123, "greatest": 0.1155310835876123, "lower": 0.1155310835876123, "bound": 0.1155310835876123, "conditionally": 0.1155310835876123, "complete": 0.1155310835876123, "lattice": 0.1155310835876123}}, {"docstring": "Embedding a positive `fin n` results in a positive fin (n + 1)`\n", "keywords": {"Embedding a positive": 0.028893199202175198, "positive fin": 0.07243705238449377, "positive": 0.11357121248292479, "Embedding": 0.12363091320521931, "results": 0.12363091320521931, "fin": 0.14868279128010753}}, {"docstring": "An antitone function on an inf-semilattice is directed.\n", "keywords": {"inf-semilattice is directed": 0.015380821171891606, "antitone function": 0.02570861714399338, "directed": 0.09568045026443411, "antitone": 0.15831692877998726, "function": 0.15831692877998726, "inf-semilattice": 0.15831692877998726}}, {"docstring": "If `m` and `n` are `fintype`, the rank of `m \u00d7 n` matrices is `(# m).lift * (# n).lift`.\n", "keywords": {"lift": 0.020602899695743707, "fintype": 0.055708263664958506, "matrices": 0.09492398510093508, "rank": 0.1408007092310104}}, {"docstring": " The scalar action via `has_mul.to_has_opposite_scalar` is transformed by the same map as the elements of the matrix, when `f` preserves multiplication.\n", "keywords": {"preserves multiplication": 0.006272643794944024, "scalar action": 0.014957518676362061, "mul.to": 0.052008009273421085, "opposite": 0.052008009273421085, "scalar": 0.06706294711327264, "matrix": 0.07895278969183914, "preserves": 0.07895278969183914, "multiplication": 0.07895278969183914, "action": 0.10987504304330521, "transformed": 0.10987504304330521, "map": 0.10987504304330521, "elements": 0.10987504304330521}}, {"docstring": "`clog b` and `pow b` form a Galois connection.\n", "keywords": {"form a Galois": 0.008293207122436794, "Galois connection": 0.008293207122436794, "Galois": 0.08596317751626563, "clog": 0.09568045026443411, "pow": 0.09568045026443411, "form": 0.09568045026443411, "connection": 0.09568045026443411}}, {"docstring": " Given a monoid homomorphism `f : M \u2192* N` and an element `x : M`, if `x` has a left inverse, then `f x` has a left inverse too. For elements invertible on both sides see `is_unit.map`.\n", "keywords": {"left inverse": 0.014089890863446109, "monoid homomorphism": 0.02870059001627704, "left": 0.07110536533612949, "inverse": 0.09636208798950592, "homomorphism": 0.13874228850015136, "monoid": 0.20109116132670046, "elements invertible": 0.20959444189965545, "unit.map": 0.23937626944391205, "element": 0.3714892235338079, "elements": 0.3714892235338079, "invertible": 0.4664378224654198, "sides": 0.4664378224654198}}, {"docstring": "The closed thickening is a closed set.\n", "keywords": {"closed set": 0.035552851931764155, "closed thickening": 0.05913243875864445, "set": 0.11984314898676356, "closed": 0.14323823713631006, "thickening": 0.19488865479360015}}, {"docstring": " This lemma characterizes discrete topological spaces as those whose singletons are neighbourhoods.\n", "keywords": {"lemma characterizes discrete": 0.03339840940482845, "characterizes discrete topological": 0.03339840940482845, "discrete topological spaces": 0.03339840940482845, "singletons are neighbourhoods": 0.04940384002065631, "lemma characterizes": 0.09700399286574239, "characterizes discrete": 0.09700399286574239, "discrete topological": 0.09700399286574239, "topological spaces": 0.09700399286574239, "neighbourhoods": 0.15831692877998726, "lemma": 0.29736558256021506, "characterizes": 0.29736558256021506, "discrete": 0.29736558256021506, "topological": 0.29736558256021506, "spaces": 0.29736558256021506, "singletons": 0.29736558256021506}}, {"docstring": "Every terminating continued fraction corresponds to a rational number.\n", "keywords": {"terminating continued fraction": 0.03339840940482845, "continued fraction corresponds": 0.03339840940482845, "rational number": 0.04940384002065631, "terminating continued": 0.09700399286574239, "continued fraction": 0.09700399286574239, "fraction corresponds": 0.09700399286574239, "number": 0.15831692877998726, "terminating": 0.29736558256021506, "continued": 0.29736558256021506, "fraction": 0.29736558256021506, "corresponds": 0.29736558256021506, "rational": 0.29736558256021506}}, {"docstring": "Additive group homomorphisms preserve negation.\n", "keywords": {"Additive group homomorphisms": 0.01655915082773619, "homomorphisms preserve negation": 0.016559150827736194, "group homomorphisms preserve": 0.03339840940482845, "Additive group": 0.04940384002065631, "preserve negation": 0.04940384002065631, "group homomorphisms": 0.09700399286574239, "homomorphisms preserve": 0.09700399286574239, "Additive": 0.15831692877998726, "negation": 0.15831692877998726, "group": 0.29736558256021506, "homomorphisms": 0.29736558256021506, "preserve": 0.29736558256021506}}, {"docstring": "The chain rule.\n", "keywords": {"chain rule": 0.04940384002065631, "rule": 0.15831692877998726, "chain": 0.29736558256021506}}, {"docstring": "Product of elements of a submonoid of a `comm_monoid` indexed by a `finset` is in the    submonoid.\n", "keywords": {"Product of elements": 0.012465543599998139, "comm": 0.05331699930238388, "monoid": 0.05331699930238388, "finset": 0.05331699930238388, "submonoid": 0.08977403887827273, "Product": 0.09101163530720666, "indexed": 0.09101163530720666, "elements": 0.135280142484453}}, {"docstring": " If the domain of a `uniform_inducing` map `f` is a `separated_space`, then `f` is injective, hence it is a `uniform_embedding`.\n", "keywords": {"uniform": 0.019053917256533312, "inducing": 0.0528063806271324, "map": 0.0528063806271324, "separated": 0.0528063806271324, "space": 0.0528063806271324, "embedding": 0.0528063806271324, "injective": 0.09017440044927587, "domain": 0.13409574860218185}}, {"docstring": " The Lusin-Souslin theorem: the range of a continuous injective function defined on a Polish space is Borel-measurable.\n", "keywords": {"continuous injective function": 0.0042542192213185686, "injective function defined": 0.0042542192213185686, "space is Borel-measurable": 0.009108237309423345, "Polish space": 0.013797198203993007, "Lusin-Souslin theorem": 0.015380821171891606, "continuous injective": 0.02570861714399338, "injective function": 0.02570861714399338, "function defined": 0.02570861714399338, "Borel-measurable": 0.057012387690331526, "Polish": 0.08596317751626563, "theorem": 0.09568045026443411, "Lusin-Souslin": 0.15831692877998726, "range": 0.15831692877998726, "continuous": 0.15831692877998726, "injective": 0.15831692877998726, "function": 0.15831692877998726, "defined": 0.15831692877998726, "space": 0.15831692877998726}}, {"docstring": " For a self-adjoint operator `T`, a local extremum of the Rayleigh quotient of `T` on a sphere centred at the origin is an eigenvector of `T`.\n", "keywords": {"Rayleigh quotient": 0.007743432063478832, "self-adjoint operator": 0.00899321792126428, "local extremum": 0.013527995261974615, "sphere centred": 0.013527995261974615, "Rayleigh": 0.06650965107397505, "operator": 0.0771485953923296, "self-adjoint": 0.1155310835876123, "local": 0.1155310835876123, "extremum": 0.1155310835876123, "quotient": 0.1155310835876123, "sphere": 0.1155310835876123, "centred": 0.1155310835876123, "origin": 0.1155310835876123, "eigenvector": 0.1155310835876123}}, {"docstring": "The p-adic norm respects the triangle inequality: the norm of `p + q` is at most the norm of `p` plus the norm of `q`.\n", "keywords": {"p-adic norm respects": 0.001656790335189335, "triangle inequality": 0.010969376760057202, "p-adic norm": 0.013511552295585157, "norm respects": 0.013511552295585157, "respects the triangle": 0.014507448820109544, "norm": 0.027870749529523592, "inequality": 0.09073525187755371, "p-adic": 0.11958257570425374, "respects": 0.11958257570425374, "triangle": 0.11958257570425374}}, {"docstring": "**Alias** of the reverse direction of is_min_filter_dual_iff`.\n", "keywords": {"reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "min": 0.04491197687864554, "filter": 0.04491197687864554, "dual": 0.04491197687864554, "iff": 0.04491197687864554, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "The Haar measure equals the Lebesgue measure on `\u211d`.\n", "keywords": {"Haar measure equals": 0.0055304017961131935, "equals the Lebesgue": 0.018423372132524086, "Haar measure": 0.02714404025350355, "Lebesgue measure": 0.02714404025350355, "measure equals": 0.0562460611896591, "Haar": 0.09474983170388594, "Lebesgue": 0.09474983170388594, "measure": 0.13945519496053638, "equals": 0.19092478917347616}}, {"docstring": "`R` is finitely presented as `R`-algebra.\n", "keywords": {"finitely presented": 0.02570861714399338, "algebra": 0.04491197687864554, "finitely": 0.15831692877998726, "presented": 0.15831692877998726}}, {"docstring": "If a function `f` equals `0` on a set `s`, then the product of `f i` over `i \u2208 s` equals `0`.\n", "keywords": {"equals": 0.020602899695743707, "function": 0.11718348279991213, "set": 0.11718348279991213, "product": 0.19092478917347616}}, {"docstring": " Given a localization map `f : M \u2192* N` for a submonoid `S \u2286 M`, for all `z : N` we have that if `x : M, y \u2208 S` are such that `z * f y = f x`, then `f x * (f y)\u207b\u00b9 = z`.\n", "keywords": {"localization map": 0.005380746843605012, "map": 0.06341998722529081, "submonoid": 0.06341998722529081, "localization": 0.08438900089923473}}, {"docstring": " If `\u03b1` is a nonempty preorder with no maximal elements, then there exists a strictly monotone function `\u2115 \u2192 \u03b1`.\n", "keywords": {"strictly monotone function": 0.0025258761156662004, "maximal elements": 0.015380821171891606, "monotone function": 0.015380821171891606, "nonempty preorder": 0.02570861714399338, "exists a strictly": 0.02570861714399338, "strictly monotone": 0.02570861714399338, "elements": 0.09568045026443411, "function": 0.09568045026443411, "nonempty": 0.15831692877998726, "preorder": 0.15831692877998726, "maximal": 0.15831692877998726, "exists": 0.15831692877998726, "strictly": 0.15831692877998726, "monotone": 0.15831692877998726}}, {"docstring": "Negating the second vector passed to `oangle` adds `\u03c0` to the angle.\n", "keywords": {"vector passed": 0.02570861714399338, "oangle": 0.04491197687864554, "adds": 0.04491197687864554, "Negating": 0.09568045026443411, "angle": 0.09568045026443411, "vector": 0.15831692877998726, "passed": 0.15831692877998726}}, {"docstring": "Reorder a sum.  The difference with `sum_bij` is that the bijection is specified with an inverse, rather than as a surjective injection.\n", "keywords": {"Reorder a sum": 0.09597703100139496, "sum": 0.13760672610172298, "Reorder": 0.1513046335336394, "bij": 0.21580243272668717, "surjective injection": 0.25058000616119436, "inverse": 0.3824015048530132, "injection": 0.3824015048530132, "difference": 0.5239807616855658, "bijection": 0.5239807616855658, "surjective": 0.5239807616855658}}, {"docstring": "The `v`-adic valuation of `r \u2208 R` is less than 1 if and only if `v` divides the ideal `(r)`.\n", "keywords": {"divides the ideal": 0.005987543063120938, "adic valuation": 0.00899321792126428, "adic": 0.0771485953923296, "divides": 0.0771485953923296, "ideal": 0.0771485953923296, "valuation": 0.1155310835876123}}, {"docstring": "The points of a face of a simplex are given by `mono_of_fin`.\n", "keywords": {"mono": 0.04491197687864554, "fin": 0.04491197687864554, "points": 0.1155310835876123, "face": 0.1155310835876123, "simplex": 0.1155310835876123}}, {"docstring": "**Alias** of the reverse direction of is_square_inv`.\n", "keywords": {"reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "square": 0.04491197687864554, "inv": 0.04491197687864554, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " In a Banach-algebra `\ud835\udd38` over `\ud835\udd42 = \u211d` or `\ud835\udd42 = \u2102`, if a family of elements `f i` mutually commute then `exp \ud835\udd42 (\u2211 i, f i) = \u220f i, exp \ud835\udd42 (f i)`.\n", "keywords": {"family of elements": 0.007684199917514015, "mutually commute": 0.007684199917514015, "exp": 0.02781242331054668, "Banach-algebra": 0.04536895566520174, "elements": 0.07586813767572746, "mutually": 0.07586813767572746, "family": 0.1005112751044989, "commute": 0.1005112751044989}}, {"docstring": "Everything in the `r`-th slice of `\ud835\udc9c` has size `r`.\n", "keywords": {"size": 0.09568045026443411, "slice": 0.15831692877998726}}, {"docstring": " `slope f a c` is an affine combination of `slope f a b` and `slope f b c`. This version uses `line_map` to express this property.\n", "keywords": {"slope": 0.02491713864357769, "affine combination": 0.04315527690446945, "affine": 0.20339603106483087, "combination": 0.20339603106483087, "express this property": 0.20505794753988754, "line": 0.2419870397426118, "map": 0.2419870397426118, "property": 0.3620558707913512, "version": 0.46999483014518423, "express": 0.46999483014518423}}, {"docstring": " In the characteristic zero case, the centroid lies in the affine span if the number of points is `n + 1`.\n", "keywords": {"characteristic zero case": 0.0065920978564317735, "centroid lies": 0.009239332327148086, "affine span": 0.009239332327148086, "number of points": 0.009239332327148086, "case": 0.06844581806138879, "characteristic": 0.09568045026443411, "centroid": 0.09568045026443411, "lies": 0.09568045026443411, "affine": 0.09568045026443411, "span": 0.09568045026443411, "number": 0.09568045026443411, "points": 0.09568045026443411}}, {"docstring": " A point is in the affine span of a single point if and only if they are equal.\n", "keywords": {"affine span": 0.03663237450220032, "single point": 0.05417025203414716, "equal": 0.11521656054299435, "point": 0.13667842094541144, "affine": 0.1879836817695587, "span": 0.1879836817695587, "single": 0.1879836817695587}}, {"docstring": "Given any distinguished triangle `T`, then we know `T.rotate` is also distinguished.\n", "keywords": {"T.rotate": 0.035514607549195436, "distinguished triangle": 0.035552851931764155, "triangle": 0.11984314898676356, "distinguished": 0.14323823713631006}}, {"docstring": "The first cyclotomic polyomial is `X - 1`.\n", "keywords": {"cyclotomic polyomial": 0.09700399286574239, "cyclotomic": 0.29736558256021506, "polyomial": 0.29736558256021506}}, {"docstring": "If a function is interval integrable with respect to a given measure `\u03bc` on `a..b` then  it is integrable on `interval_oc a b` with respect to `\u03bc`.\n", "keywords": {"interval integrable": 0.04494138389934498, "integrable with respect": 0.05852943042998517, "respect": 0.05888572039821348, "function is interval": 0.07390467857585918, "measure": 0.10159647344475727, "interval": 0.10369247975016448, "integrable": 0.10369247975016448, "function": 0.1501629736875757}}, {"docstring": "The p-adic norm of 0 is 0.\n", "keywords": {"p-adic norm": 0.02570861714399338, "p-adic": 0.15831692877998726, "norm": 0.15831692877998726}}, {"docstring": " If a point belongs to the closure of `s`, then its infimum distance to `s` equals zero. The converse is true provided that `s` is nonempty, see `mem_closure_iff_inf_dist_zero`.\n", "keywords": {"point belongs": 0.030700180363587775, "infimum distance": 0.030700180363587775, "equals": 0.11777198021367995, "closure": 0.1643845092711225, "point": 0.17258549299654868, "belongs": 0.17258549299654868, "infimum": 0.17258549299654868, "distance": 0.17258549299654868, "mem": 0.20684865028795477, "iff": 0.20684865028795477, "dist": 0.20684865028795477, "converse is true": 0.21430171753146993, "true provided": 0.21430171753146993, "nonempty": 0.31676849500916915, "converse": 0.4200969429841209, "true": 0.4200969429841209, "provided": 0.4200969429841209}}, {"docstring": "The angle \u2220ABA at a point.\n", "keywords": {"ABA": 0.08596317751626563, "angle": 0.15831692877998726, "point": 0.15831692877998726}}, {"docstring": "We cannot replace `<` by `\u2264` in the hypotheses. Otherwise for `b < a = d < c` the l.h.s. is `\u2205` and the r.h.s. is `{a}`.\n", "keywords": {"replace": 0.10028582371075691, "hypotheses": 0.10028582371075691}}, {"docstring": " A preconnected set is either one of the intervals `Icc`, `Ico`, `Ioc`, `Ioo`, `Ici`, `Ioi`, `Iic`, `Iio`, or `univ`, or `\u2205`. The converse statement requires `\u03b1` to be densely ordered. Though one can represent `\u2205` as `(Inf s, Inf s)`, we include it into the list of possible cases to improve readability.\n", "keywords": {"preconnected set": 0.03607367925275576, "Icc": 0.04211983864331912, "Ico": 0.04211983864331912, "Ioc": 0.04211983864331912, "Ioo": 0.04211983864331912, "Ici": 0.04211983864331912, "Ioi": 0.04211983864331912, "Iic": 0.04211983864331912, "Iio": 0.04211983864331912, "univ": 0.07628408883696117, "converse statement requires": 0.10429616111063773, "intervals": 0.1280204403215895, "statement requires": 0.1761228147823515, "densely ordered": 0.1761228147823515, "preconnected": 0.18659495577726268, "set": 0.18659495577726268, "converse statement": 0.2447572861337526, "improve readability": 0.29697937327252566, "requires": 0.3377049815696464, "ordered": 0.3377049815696464}}, {"docstring": "If you add multiples of previous columns to the next columns, the determinant doesn't change.\n", "keywords": {"add multiples": 0.035715520099333646, "multiples of previous": 0.035715520099333646, "previous columns": 0.05259515133015473, "change": 0.11369206228658875, "columns": 0.13453835116331675, "add": 0.18569843656348187, "multiples": 0.18569843656348187, "previous": 0.18569843656348187, "determinant": 0.18569843656348187}}, {"docstring": "The diameter of a ball of radius `r` is at most `2 r`.\n", "keywords": {"ball of radius": 0.015380821171891606, "radius": 0.09568045026443411, "diameter": 0.15831692877998726, "ball": 0.15831692877998726}}, {"docstring": "`succ_above` is injective at the pivot\n", "keywords": {"succ": 0.04491197687864554, "pivot": 0.15831692877998726, "injective": 0.29736558256021506}}, {"docstring": "The `simp` version of `mul_assoc`, in the presence of `T`'s.\n", "keywords": {"simp": 0.04491197687864554, "mul": 0.04491197687864554, "assoc": 0.04491197687864554, "version": 0.09568045026443411, "presence": 0.15831692877998726}}, {"docstring": "**Alias** of sbtw_cyclic_right`.\n", "keywords": {"Alias": 0.030396371632413578, "cyclic": 0.04491197687864554, "sbtw": 0.15831692877998726}}, {"docstring": " The conclusion is the usual meaning of \"glue nicely\" in textbooks. It turns out to be quite unusable, as it's about faces as sets in space rather than simplices. Further,  additional structure on `\ud835\udd5c` means the only choice of `u` is `s \u2229 t` (but it's hard to prove).\n", "keywords": {"glue nicely": 0.012571559314626916, "usual meaning": 0.027581485432184485, "glue": 0.11142476118001256, "nicely": 0.11142476118001256, "textbooks": 0.11142476118001256, "conclusion": 0.16383273847958243, "usual": 0.16383273847958243, "meaning": 0.16383273847958243, "faces as sets": 0.19613242932716538, "sets in space": 0.19613242932716538, "additional structure": 0.23956129807083346, "hard to prove": 0.23956129807083346, "unusable": 0.3033846052649951, "simplices": 0.3033846052649951, "additional": 0.3881970960906714, "prove": 0.3881970960906714, "turns": 0.4049347717850166, "faces": 0.4049347717850166, "sets": 0.4049347717850166, "space": 0.4049347717850166}}, {"docstring": " A version of `strongly_measurable_const` that assumes `f x = f y` for all `x, y`. This version works for functions between empty types.\n", "keywords": {"strongly": 0.07258934678807509, "measurable": 0.07258934678807509, "const": 0.07258934678807509, "assumes": 0.1497391925531594, "version": 0.22884533441049013, "empty types": 0.2464148712192172, "version works": 0.3130649625167197, "works for functions": 0.3724275679522048, "functions between empty": 0.3724275679522048, "types": 0.37951425938754646, "works": 0.5209261917026199, "functions": 0.5209261917026199, "empty": 0.5209261917026199}}, {"docstring": "If a function `f` is differentiable and `f'` is antitone on `\u211d` then `f` is concave.\n", "keywords": {"function": 0.0771485953923296, "concave": 0.0771485953923296, "differentiable": 0.1155310835876123, "antitone": 0.1155310835876123}}, {"docstring": "This lemma is meant to be used with `null_homotopic_map'_f_of_not_rel_left`\n", "keywords": {"null": 0.04491197687864554, "homotopic": 0.04491197687864554, "rel": 0.04491197687864554, "left": 0.04491197687864554, "lemma is meant": 0.09700399286574239, "map": 0.15831692877998726, "lemma": 0.29736558256021506, "meant": 0.29736558256021506}}, {"docstring": " Over a characteristic-zero division ring, the centroids given by two subsets of the points of a simplex are equal if and only if those faces are given by the same subset of points.\n", "keywords": {"characteristic-zero division ring": 0.0019125991188942981, "division ring": 0.013301486222606386, "characteristic-zero division": 0.01986718810864864, "simplex are equal": 0.01986718810864864, "subset of points": 0.06508647886011353, "points": 0.09367462051261369, "ring": 0.09405136374190334, "characteristic-zero": 0.13957138628574278, "division": 0.13957138628574278, "centroids": 0.13957138628574278, "simplex": 0.13957138628574278, "equal": 0.13957138628574278, "faces": 0.13957138628574278, "subsets": 0.14484378636023937, "subset": 0.14484378636023937}}, {"docstring": "The quadratic character is multiplicative.\n", "keywords": {"character is multiplicative": 0.04940384002065631, "quadratic character": 0.09700399286574239, "multiplicative": 0.15831692877998726, "quadratic": 0.29736558256021506, "character": 0.29736558256021506}}, {"docstring": "The injection from a subtype is an isometry\n", "keywords": {"isometry": 0.15831692877998726, "injection": 0.29736558256021506, "subtype": 0.29736558256021506}}, {"docstring": "  Summing `a^s.card * b^(n-s.card)` over all finite subsets `s` of a `finset` gives `(a + b)^s.card`.\n", "keywords": {"finite subsets": 0.012741693123860753, "s.card": 0.019648131954263418, "Summing": 0.05393656033701752, "finset": 0.05393656033701752, "subsets": 0.09202664026077896, "finite": 0.1367145963576765}}, {"docstring": "A subfield is closed under multiplication.\n", "keywords": {"closed under multiplication": 0.04940384002065631, "subfield is closed": 0.09700399286574239, "multiplication": 0.15831692877998726, "subfield": 0.29736558256021506, "closed": 0.29736558256021506}}, {"docstring": "Only assumes right strict covariance\n", "keywords": {"strict covariance": 0.04940384002065631, "assumes right strict": 0.09700399286574239, "covariance": 0.15831692877998726, "assumes": 0.29736558256021506, "strict": 0.29736558256021506}}, {"docstring": "**Alias** of ne_of_ssubset`.\n", "keywords": {"Alias": 0.030396371632413578, "ssubset": 0.04491197687864554}}, {"docstring": "An element admitting a right inverse is right-regular.\n", "keywords": {"inverse is right-regular": 0.04940384002065631, "element admitting": 0.09700399286574239, "right-regular": 0.15831692877998726, "element": 0.29736558256021506, "admitting": 0.29736558256021506, "inverse": 0.29736558256021506}}, {"docstring": "**Alias** of the forward direction of measurable_iff_le_map`.\n", "keywords": {"direction of measurable": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "map": 0.04491197687864554, "measurable": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " If `f x = O(g x)` along `cofinite`, then there exists a positive constant `C` such that `\u2225f x\u2225 \u2264 C * \u2225g x\u2225` whenever `g x \u2260 0`.\n", "keywords": {"positive constant": 0.005380746843605012, "exists a positive": 0.00717258304785508, "cofinite": 0.04491197687864554, "constant": 0.06341998722529081, "exists": 0.08438900089923473, "positive": 0.08438900089923473}}, {"docstring": " A finite family of vectors is linearly independent if and only if its cardinality equals the dimension of its span.\n", "keywords": {"finite family": 0.02570861714399338, "family of vectors": 0.02570861714399338, "vectors is linearly": 0.02570861714399338, "linearly independent": 0.02570861714399338, "cardinality equals": 0.02570861714399338, "equals the dimension": 0.02570861714399338, "span": 0.09568045026443411, "finite": 0.15831692877998726, "family": 0.15831692877998726, "vectors": 0.15831692877998726, "linearly": 0.15831692877998726, "independent": 0.15831692877998726, "cardinality": 0.15831692877998726, "equals": 0.15831692877998726, "dimension": 0.15831692877998726}}, {"docstring": " The sine of the sum of two angles in a possibly degenerate triangle (where two given sides are nonzero), vector angle form.\n", "keywords": {"vector angle form": 0.0033286291275342068, "possibly degenerate triangle": 0.0038047582963498796, "degenerate triangle": 0.020171377334626643, "sides are nonzero": 0.020171377334626643, "vector angle": 0.029227395770283462, "angle form": 0.029227395770283462, "possibly degenerate": 0.03346752176983843, "triangle": 0.10987504304330521, "nonzero": 0.10987504304330521, "vector": 0.10987504304330521, "form": 0.10987504304330521, "sine": 0.17995476918065306, "sum": 0.17995476918065306, "possibly": 0.17995476918065306, "degenerate": 0.17995476918065306, "sides": 0.17995476918065306, "angles": 0.2584518972227853, "angle": 0.2584518972227853}}, {"docstring": "Right-regular multiplication on `R` is equivalent to `R\u1d50\u1d52\u1d56`-regularity of `R` itself.\n", "keywords": {"Right-regular multiplication": 0.015380821171891606, "R\u1d50\u1d52\u1d56": 0.030396371632413578, "Right-regular": 0.09568045026443411, "regularity": 0.09568045026443411, "multiplication": 0.15831692877998726, "equivalent": 0.15831692877998726}}, {"docstring": " Given a finite-dimensional normed real vector space, the interior of the convex hull of an affine basis is the set of points whose barycentric coordinates are strictly positive with respect to this basis.  TODO Restate this result for affine spaces (instead of vector spaces) once the definition of convexity is generalised to this setting.\n", "keywords": {"finite-dimensional normed real": 0.0032405270153205044, "real vector space": 0.004525692856120987, "normed real vector": 0.004767967125194773, "finite-dimensional normed": 0.02151009845665344, "normed real": 0.02151009845665344, "convex hull": 0.02151009845665344, "set of points": 0.02151009845665344, "points whose barycentric": 0.02151009845665344, "barycentric coordinates": 0.02151009845665344, "coordinates are strictly": 0.02151009845665344, "strictly positive": 0.02151009845665344, "positive with respect": 0.02151009845665344, "vector space": 0.029836346741853793, "real vector": 0.03141124112016653, "affine spaces": 0.0359810975915469, "TODO Restate": 0.03621175873737181, "affine basis": 0.04035006833968969, "spaces": 0.06902303713844334, "basis": 0.07707903411993762, "Restate this result": 0.0821952715199184}}, {"docstring": " If `\u03c6` is a normed bump function, approximate `(\u03c6 \u22c6 g) x\u2080` if `g` is near `g x\u2080` on a ball with radius `\u03c6.R` around `x\u2080`.\n", "keywords": {"normed bump function": 0.0010606143890052174, "bump function": 0.00899321792126428, "ball with radius": 0.00899321792126428, "normed bump": 0.013527995261974615, "approximate": 0.04491197687864554, "function": 0.0771485953923296, "radius": 0.0771485953923296, "normed": 0.1155310835876123, "bump": 0.1155310835876123, "ball": 0.1155310835876123}}, {"docstring": "Two elements are related by an additive congruence relation `c` iff they are represented by the same element of the quotient by `c`.\n", "keywords": {"additive congruence relation": 0.0016871549255843255, "congruence relation": 0.012240009979360944, "additive congruence": 0.018310930906343142, "elements are related": 0.05755462763287794, "relation": 0.09017440044927587, "iff": 0.09017440044927587, "related": 0.13409574860218185, "additive": 0.13409574860218185, "congruence": 0.13409574860218185, "represented": 0.13409574860218185, "quotient": 0.13409574860218185, "elements": 0.17742572114928132, "element": 0.17742572114928132}}, {"docstring": "This is the same as `order_of_pos' but with one fewer explicit assumption since this is  automatic in case of a finite cancellative monoid.\n", "keywords": {"finite cancellative monoid": 0.0025258761156662004, "fewer explicit assumption": 0.0042542192213185686, "cancellative monoid": 0.015380821171891606, "fewer explicit": 0.02570861714399338, "explicit assumption": 0.02570861714399338, "automatic in case": 0.02570861714399338, "finite cancellative": 0.02570861714399338, "order": 0.04491197687864554, "pos'": 0.09568045026443411, "monoid": 0.09568045026443411, "fewer": 0.15831692877998726, "explicit": 0.15831692877998726, "assumption": 0.15831692877998726, "automatic": 0.15831692877998726, "case": 0.15831692877998726, "finite": 0.15831692877998726, "cancellative": 0.15831692877998726}}, {"docstring": "`nsmul` is equal to any other module structure via a cast.\n", "keywords": {"nsmul": 0.04491197687864554, "module structure": 0.09700399286574239, "cast": 0.15831692877998726, "equal": 0.29736558256021506, "module": 0.29736558256021506, "structure": 0.29736558256021506}}, {"docstring": "The Tarski-Vaught test for elementarity of an embedding.\n", "keywords": {"Tarski-Vaught test": 0.09700399286574239, "test for elementarity": 0.09700399286574239, "embedding": 0.15831692877998726, "Tarski-Vaught": 0.29736558256021506, "test": 0.29736558256021506, "elementarity": 0.29736558256021506}}, {"docstring": "Postcomposing `f` with `prod.fst` is `C^n` at `(x, y)`\n", "keywords": {"Postcomposing": 0.04491197687864554, "prod.fst": 0.04491197687864554}}, {"docstring": "Two cases of the **Schwarz Lemma** (derivative and distance), merged together.\n", "keywords": {"Schwarz Lemma": 0.007444681613352736, "derivative and distance": 0.02570861714399338, "Schwarz": 0.08596317751626563, "Lemma": 0.08596317751626563, "derivative": 0.15831692877998726, "distance": 0.15831692877998726, "merged": 0.15831692877998726, "cases": 0.29736558256021506}}, {"docstring": " For all `\u03b5 > 0` and finite families `A`, we can partition the remainders of `A` mod `b` into `abv.card \u03b5` sets, such that all elements in each part of remainders are close together.\n", "keywords": {"finite families": 0.020171377334626643, "mod": 0.052008009273421085, "sets": 0.052008009273421085, "remainders are close": 0.10742270288518663, "partition the remainders": 0.10742270288518664, "part of remainders": 0.10742270288518664, "families": 0.10987504304330521, "abv.card": 0.10987504304330521, "remainders": 0.12922594861139264, "finite": 0.17995476918065306, "partition": 0.17995476918065306, "elements": 0.17995476918065306, "part": 0.17995476918065306, "close": 0.17995476918065306}}, {"docstring": " If `P : \u2124 \u2192 Prop` is a predicate such that the set `{m : P m}` is bounded below and nonempty, then this set has the least element. This lemma uses classical logic to avoid assumption `[decidable_pred P]`. See `int.least_of_bdd` for a constructive counterpart.\n", "keywords": {"Prop": 0.042746905642057687, "set": 0.10708394537672279, "nonempty": 0.13131376587409008, "element": 0.13131376587409008, "avoid assumption": 0.18362817280437604, "predicate": 0.19106493974805283, "bounded": 0.19106493974805283, "decidable": 0.22798592199981768, "lemma uses classical": 0.25483159921791065, "classical logic": 0.25483159921791065, "logic to avoid": 0.25483159921791065, "int.least": 0.30082260408300643, "bdd": 0.30082260408300643, "constructive counterpart": 0.3088331406051663, "assumption": 0.34426280461682385, "pred": 0.34426280461682385, "counterpart": 0.43339334120756096, "lemma": 0.45064433560500183, "classical": 0.45064433560500183, "logic": 0.45064433560500183}}, {"docstring": "**Fundamental theorem of algebra**: every non constant complex polynomial  has a root\n", "keywords": {"Fundamental theorem": 0.026233073037508336, "constant complex polynomial": 0.03339840940482845, "theorem of algebra": 0.04940384002065631, "Fundamental": 0.08596317751626563, "constant complex": 0.09700399286574239, "complex polynomial": 0.09700399286574239, "algebra": 0.15831692877998726, "root": 0.15831692877998726, "theorem": 0.29736558256021506, "constant": 0.29736558256021506, "complex": 0.29736558256021506, "polynomial": 0.29736558256021506}}, {"docstring": "A finset is bounded below.\n", "keywords": {"finset is bounded": 0.09700399286574239, "finset": 0.29736558256021506, "bounded": 0.29736558256021506}}, {"docstring": "Ring homomorphisms preserve subtraction.\n", "keywords": {"Ring homomorphisms preserve": 0.01655915082773619, "homomorphisms preserve subtraction": 0.016559150827736194, "Ring homomorphisms": 0.04940384002065631, "preserve subtraction": 0.04940384002065631, "homomorphisms preserve": 0.09700399286574239, "Ring": 0.15831692877998726, "subtraction": 0.15831692877998726, "homomorphisms": 0.29736558256021506, "preserve": 0.29736558256021506}}, {"docstring": " **Equality case of Rearrangement Inequality**: Pointwise multiplication of `f` and `g`, which monovary together, is unchanged by a permutation if and only if `f \u2218 \u03c3` and `g` monovary together. Stated by permuting the entries of `f`.\n", "keywords": {"Rearrangement Inequality": 0.005072352361797871, "Equality case": 0.01078166215070159, "Pointwise multiplication": 0.01078166215070159, "case of Rearrangement": 0.01462575590160924, "Equality": 0.06111024253988877, "Inequality": 0.06111024253988877, "Pointwise": 0.06111024253988877, "monovary": 0.08014015496625508, "Rearrangement": 0.08258441204389066, "Stated by permuting": 0.1565870030412261, "case": 0.17454779110930135, "multiplication": 0.17454779110930135, "unchanged": 0.17454779110930135, "permutation": 0.17454779110930135, "permuting the entries": 0.21846569551000553, "Stated": 0.3197366584666406, "permuting": 0.42343326428770406, "entries": 0.42343326428770406}}, {"docstring": "Non-dependent version of `function.update_comp_eq_of_injective'`\n", "keywords": {"Non-dependent version": 0.015380821171891606, "function.update": 0.04491197687864554, "comp": 0.04491197687864554, "injective": 0.04491197687864554, "Non-dependent": 0.09568045026443411, "version": 0.15831692877998726}}, {"docstring": " If `f` is a monotone function on a right neighborhood of `a` and the image of this neighborhood under `f` meets every interval `(f a, b)`, `b > f a`, then `f` is continuous at `a` from the right.  The assumption `hfs : \u2200 b > f a, \u2203 c \u2208 s, f c \u2208 Ioo (f a) b` cannot be replaced by the weaker assumption `hfs : \u2200 b > f a, \u2203 c \u2208 s, f c \u2208 Ioc (f a) b` we use for strictly monotone functions because otherwise the function `ceil : \u211d \u2192 \u2124` would be a counter-example at `a = 0`.\n", "keywords": {"strictly monotone functions": 0.007722596924937224, "meets every interval": 0.009863430830918589, "monotone function": 0.023184277719357032, "strictly monotone": 0.04779613002044238, "neighborhood": 0.04975715377693236, "monotone": 0.07444104971434774, "weaker assumption": 0.07479086058273848, "function": 0.07609694684532782, "hfs": 0.08878055315080037, "meets": 0.0988286080901161, "interval": 0.0988286080901161, "image": 0.11283620222395042, "continuous": 0.11283620222395042, "assumption": 0.11355888260173415, "Ioo": 0.14000029188268293, "Ioc": 0.14000029188268293, "functions": 0.15219389369065564, "ceil": 0.2450191259525712, "replaced": 0.3063892048453691, "weaker": 0.3063892048453691}}, {"docstring": "Auxiliary lemma for `biproduct.unique_up_to_iso`.\n", "keywords": {"biproduct.unique": 0.04491197687864554, "iso": 0.04491197687864554, "Auxiliary lemma": 0.04940384002065631, "Auxiliary": 0.15831692877998726, "lemma": 0.29736558256021506}}, {"docstring": "The relation between `\u03c7\u2084`, `\u03c7\u2088` and `\u03c7\u2088'`\n", "keywords": {"relation": 0.1155310835876123}}, {"docstring": " Assumes left covariance. The lemma assuming right covariance is `right.one_lt_mul'`.\n", "keywords": {"Assumes left covariance": 0.021279743632738882, "Assumes left": 0.038712704770480444, "left covariance": 0.1273706910391025, "Assumes": 0.1531727145735673, "right.one": 0.21826204231687923, "mul": 0.21826204231687923, "covariance": 0.23216465691767033, "left": 0.2433193585127945, "lemma assuming": 0.38571507274593425, "lemma": 0.5275897320195264, "assuming": 0.5275897320195264, "assuming right covariance": 0.5846700711531686}}, {"docstring": "The projection on the base of a topological vector bundle created from core is continuous\n", "keywords": {"topological vector bundle": 0.0042542192213185686, "vector bundle created": 0.0042542192213185686, "core is continuous": 0.015380821171891606, "topological vector": 0.02570861714399338, "vector bundle": 0.02570861714399338, "bundle created": 0.02570861714399338, "created from core": 0.02570861714399338, "continuous": 0.09568045026443411, "projection": 0.15831692877998726, "base": 0.15831692877998726, "topological": 0.15831692877998726, "vector": 0.15831692877998726, "bundle": 0.15831692877998726, "created": 0.15831692877998726, "core": 0.15831692877998726}}, {"docstring": "The pigeonhole principle for infinitely many pigeons in finitely many pigeonholes. If there are infinitely many pigeons in finitely many pigeonholes, then there are at least two pigeons in the same pigeonhole.  See also: `fintype.exists_ne_map_eq_of_card_lt`, `fintype.exists_infinite_fiber`.\n", "keywords": {"pigeons in finitely": 0.041053025867356145, "infinitely many pigeons": 0.08411563782758695, "pigeons": 0.09443525337802537, "pigeonhole principle": 0.11685645914720015, "finitely many pigeonholes": 0.13255169359890484, "finitely": 0.1339121375335768, "fintype.exists": 0.15565067094598908, "infinitely": 0.16619578565514692, "principle for infinitely": 0.17496876503570297, "pigeonhole": 0.22366028370865354, "principle": 0.23390337878488526, "map": 0.40710223509268106, "card": 0.40710223509268106, "infinite": 0.40710223509268106, "fiber": 0.40710223509268106}}, {"docstring": "Ring homomorphisms preserve `bit1`.\n", "keywords": {"Ring homomorphisms preserve": 0.008321268142839145, "Ring homomorphisms": 0.04940384002065631, "homomorphisms preserve": 0.04940384002065631, "Ring": 0.15831692877998726, "preserve": 0.15831692877998726, "homomorphisms": 0.29736558256021506}}, {"docstring": "The only divisors of prime powers are prime powers.\n", "keywords": {"prime powers": 0.02869121375584504, "divisors of prime": 0.11015378969485166, "prime": 0.11647786950765905, "powers": 0.11647786950765905, "powers are prime": 0.18825856358798018, "divisors": 0.2040190808014209}}, {"docstring": "Product of a list of elements in a `subsemiring` is in the `subsemiring`.\n", "keywords": {"subsemiring": 0.020602899695743707, "list of elements": 0.037831312533597124, "Product": 0.11718348279991213, "list": 0.19092478917347616, "elements": 0.19092478917347616}}, {"docstring": "A nontrivial torsion-free additive group is not torsion.\n", "keywords": {"nontrivial torsion-free additive": 0.03339840940482845, "torsion-free additive group": 0.03339840940482845, "nontrivial torsion-free": 0.09700399286574239, "torsion-free additive": 0.09700399286574239, "additive group": 0.09700399286574239, "torsion": 0.15831692877998726, "nontrivial": 0.29736558256021506, "torsion-free": 0.29736558256021506, "additive": 0.29736558256021506, "group": 0.29736558256021506}}, {"docstring": "A nonnegative multiple of a vector is in the same ray as one it is in the same ray as.\n", "keywords": {"nonnegative multiple": 0.037831312533597124, "ray": 0.07334489383741183, "nonnegative": 0.19092478917347616, "multiple": 0.19092478917347616, "vector": 0.19092478917347616}}, {"docstring": "Rotating the first vector by the angle between the two vectors results an an angle of 0.\n", "keywords": {"vectors results": 0.03117712943655666, "Rotating": 0.10028582371075691, "angle": 0.10191687733271076, "results": 0.14832923246533666, "vector": 0.20383375466542153, "vectors": 0.20383375466542153}}, {"docstring": "Closed entourages form a basis of the uniformity filter.\n", "keywords": {"Closed entourages form": 0.01655915082773619, "Closed entourages": 0.04940384002065631, "uniformity filter": 0.04940384002065631, "entourages form": 0.09700399286574239, "form a basis": 0.09700399286574239, "Closed": 0.15831692877998726, "filter": 0.15831692877998726, "entourages": 0.29736558256021506, "form": 0.29736558256021506, "basis": 0.29736558256021506, "uniformity": 0.29736558256021506}}, {"docstring": " If a vector space is finite-dimensional, then the cardinality of any basis is equal to its `finrank`.\n", "keywords": {"space is finite-dimensional": 0.015380821171891606, "vector space": 0.02570861714399338, "basis is equal": 0.02570861714399338, "finrank": 0.04491197687864554, "finite-dimensional": 0.09568045026443411, "vector": 0.15831692877998726, "space": 0.15831692877998726, "cardinality": 0.15831692877998726, "basis": 0.15831692877998726, "equal": 0.15831692877998726}}, {"docstring": "Deprecated. Use `fun_like.coe_injective` instead.\n", "keywords": {"Deprecated": 0.05899937629682816, "fun": 0.17881754828257995, "like.coe": 0.17881754828257995, "injective": 0.17881754828257995}}, {"docstring": "If `r \u2260 0` and `\u2225p\u2099\u2225 r\u207f = O(a\u207f)` for some `-1 < a < 1`, then `r < p.radius`.\n", "keywords": {"p.radius": 0.04491197687864554}}, {"docstring": " Adding an element at the beginning of a tuple and then updating it amounts to adding it directly.\n", "keywords": {"updating it amounts": 0.03498702377830618, "adding it directly": 0.06956410889469504, "amounts to adding": 0.11245662598947327, "Adding an element": 0.11245662598947329, "directly": 0.11246769819744629, "Adding": 0.13282721021560867, "element": 0.1838594885424691, "beginning": 0.1838594885424691, "tuple": 0.1838594885424691, "updating": 0.1838594885424691, "amounts": 0.1838594885424691}}, {"docstring": "In a locally compact regular space, given a compact set `K` inside an open set `U`, we can find a open set `V` between these sets with compact closure: `K \u2286 V` and the closure of `V` is inside `U`.\n", "keywords": {"compact regular space": 0.0031765946730797586, "locally compact regular": 0.004437246051228461, "regular space": 0.013537091911365715, "open set": 0.017253690987702245, "locally compact": 0.0313138315279035, "compact regular": 0.0313138315279035, "compact closure": 0.04236258266412207, "find a open": 0.048446957989698135, "compact set": 0.054103120238814556, "open": 0.07266603907871239, "compact": 0.07454199733516344, "set": 0.07650603217493429, "inside": 0.09086807760587966, "closure": 0.09086807760587966, "space": 0.09836999343492359, "inside an open": 0.102924115313591, "locally": 0.13577602442836895, "regular": 0.13577602442836895, "find": 0.13577602442836895, "sets": 0.22951809652480287}}, {"docstring": "**Alias** of subset_trans`.\n", "keywords": {"Alias": 0.030396371632413578, "trans": 0.04491197687864554, "subset": 0.15831692877998726}}, {"docstring": " For any `x : \u211d` the sequence $\\frac{f^n(x)-x}{n}$ tends to the translation number of `f`. In particular, this limit does not depend on `x`.\n", "keywords": {"translation number": 0.01552184797949213, "frac": 0.05899937629682816, "sequence": 0.08922538916412363, "translation": 0.12363091320521931, "number": 0.12363091320521931, "limit": 0.32883716426354986, "depend": 0.32883716426354986}}, {"docstring": "A limit (over a general filter) of measurable `\u211d\u22650\u221e` valued functions is measurable.\n", "keywords": {"general filter": 0.021567786782198985, "valued functions": 0.021567786782198985, "functions is measurable": 0.06276771995988077, "measurable": 0.07030442419566416, "limit": 0.11369206228658875, "filter": 0.11369206228658875, "valued": 0.11369206228658875, "general": 0.18569843656348187, "functions": 0.18569843656348187}}, {"docstring": " Note that `smul_inv'` refers to the group case, and `smul_inv` has an additional inverse on `x`.\n", "keywords": {"smul": 0.020602899695743707, "group case": 0.022885248721446715, "inv refers": 0.028813693746012673, "additional inverse": 0.037831312533597124, "inv": 0.07334489383741183, "Note": 0.11718348279991213, "case": 0.11718348279991213, "refers": 0.19092478917347616, "group": 0.19092478917347616, "additional": 0.19092478917347616, "inverse": 0.19092478917347616}}, {"docstring": " The conditional probability measure of any finite measure on any set of positive measure is a probability measure.\n", "keywords": {"conditional probability measure": 0.004693610564541162, "probability measure": 0.016700014590639956, "set of positive": 0.018446453876916073, "conditional probability": 0.019669371935067258, "finite measure": 0.03129722244606366, "positive measure": 0.03129722244606366, "measure": 0.056373449771838564, "probability": 0.07166610103730862, "conditional": 0.13458211372284087, "finite": 0.13458211372284087, "set": 0.13458211372284087, "positive": 0.13458211372284087}}, {"docstring": "Twice the angle between a vector and its negation is 0.\n", "keywords": {"angle": 0.29736558256021506, "vector": 0.29736558256021506, "negation": 0.29736558256021506}}, {"docstring": "If one controls the norm of every `f x`, then one controls the norm of `f`.\n", "keywords": {"controls the norm": 0.01285430857199669, "controls": 0.07915846438999363, "norm": 0.07915846438999363}}, {"docstring": "The angle between the zero vector and a vector.\n", "keywords": {"vector": 0.14868279128010753, "angle": 0.2005079697193566}}, {"docstring": " Two strictly monotone functions from `fin n` are equal provided that their ranges are equal.\n", "keywords": {"strictly monotone functions": 0.006822309199625382, "strictly monotone": 0.034987023778306175, "monotone functions": 0.034987023778306175, "equal provided": 0.038330279597458564, "ranges are equal": 0.038330279597458564, "equal": 0.10038999320777726, "fin": 0.11246769819744627, "strictly": 0.18385948854246909, "monotone": 0.18385948854246909, "functions": 0.18385948854246909, "provided": 0.18385948854246909, "ranges": 0.18385948854246909}}, {"docstring": " If `ring_char R = 2`, where `R` is a finite reduced commutative ring, then every `a : R` is a square.\n", "keywords": {"reduced commutative ring": 0.001992219989310195, "finite reduced commutative": 0.00269253313269109, "commutative ring": 0.014146116061608767, "finite reduced": 0.01904688389482227, "reduced commutative": 0.01904688389482227, "ring": 0.05101428509898996, "char": 0.09202664026077896, "square": 0.09202664026077896, "finite": 0.1367145963576765, "reduced": 0.1367145963576765, "commutative": 0.1367145963576765}}, {"docstring": " If `s` is a measurable set, then the outer measure of `t` with respect to the restriction of the measure to `s` equals the outer measure of `t \u2229 s`. This is an alternate version of `measure.restrict_apply`, requiring that `s` is measurable instead of `t`.\n", "keywords": {"outer measure": 0.00714119321506442, "equals the outer": 0.012926530162436643, "measurable set": 0.03235393371923996, "measure": 0.043449056171024306, "outer": 0.054014492293691756, "set": 0.11813095740520926, "equals": 0.11813095740520926, "measurable": 0.13264923663302283, "respect": 0.15421096544393592, "restriction": 0.15421096544393592, "alternate version": 0.17692192868025408, "measure.restrict": 0.2441878156284487, "apply": 0.2441878156284487, "requiring": 0.3175157269198967, "alternate": 0.3877189296606018, "version": 0.3877189296606018}}, {"docstring": " Let `K` be the field of fraction of an integrally closed domain `R` and let `L` be a separable extension of `K`, generated by an integral power basis `B` such that the minimal polynomial of `B.gen` is Eisenstein at `p`. Given `z : L` integral over `R`, if `p ^ n \u2022 z \u2208 adjoin R {B.gen}`, then `z \u2208 adjoin R {B.gen}`. Together with `algebra.discr_mul_is_integral_mem_adjoin` this result often allows to compute the ring of integers of `L`.\n", "keywords": {"integrally closed domain": 0.0037705969800450136, "integral power basis": 0.008154785502553644, "B.gen": 0.019398204090818886, "closed domain": 0.021974352839133775, "power basis": 0.021974352839133775, "field of fraction": 0.027751818051145773, "integrally closed": 0.027751818051145773, "separable extension": 0.027751818051145773, "minimal polynomial": 0.027751818051145773, "integral power": 0.058938867701402595, "Eisenstein": 0.07112276462161725, "adjoin": 0.07445603074625326, "integral": 0.11290366800181675, "domain": 0.13085023403371707, "generated": 0.13085023403371707, "basis": 0.13085023403371707, "field": 0.16432422507217048, "fraction": 0.16432422507217048, "integrally": 0.16432422507217048, "closed": 0.16432422507217048}}, {"docstring": "Characterization of the boundedness of the range of a function\n", "keywords": {"Characterization": 0.0771485953923296, "function": 0.0771485953923296, "boundedness": 0.1155310835876123, "range": 0.1155310835876123}}, {"docstring": " Induction principle for `finset`s in a linearly ordered type: a predicate is true on all `s : finset \u03b1` provided that:  * it is true on the empty `finset`, * for every `s : finset \u03b1` and an element `a` strictly less than all elements of `s`, `p s`   implies `p (insert a s)`.\n", "keywords": {"linearly ordered type": 0.0008713407394223732, "predicate is true": 0.008283920938723212, "Induction principle": 0.008339739352642504, "ordered type": 0.008339739352642504, "linearly ordered": 0.010654996071504151, "finset": 0.013878141608278808, "true": 0.04000809979004685, "implies": 0.06047259340699353, "Induction": 0.08055090253430222, "type": 0.08055090253430222, "provided": 0.08055090253430222, "empty": 0.08055090253430222, "strictly": 0.08055090253430222, "insert": 0.08055090253430222, "principle": 0.1026774757563983, "linearly": 0.1026774757563983, "ordered": 0.1026774757563983, "predicate": 0.1026774757563983, "element": 0.11964040349184528, "elements": 0.11964040349184528}}, {"docstring": "If M is the midpoint of the segment AB, then \u2220AMB = \u03c0.\n", "keywords": {"AMB": 0.030396371632413578, "midpoint": 0.15831692877998726, "segment": 0.15831692877998726}}, {"docstring": "The `n`th element of a list\n", "keywords": {"list": 0.15831692877998726, "element": 0.29736558256021506}}, {"docstring": "**Alias** of norm_add_sq`.\n", "keywords": {"Alias": 0.030396371632413578, "add": 0.04491197687864554, "norm": 0.15831692877998726}}, {"docstring": " The inner product of two vectors, divided by the product of their norms, has value 1 if and only if they are nonzero and one is a positive multiple of the other.\n", "keywords": {"positive multiple": 0.018641876658774398, "product": 0.069255433448279, "vectors": 0.09101163530720666, "divided": 0.09101163530720666, "norms": 0.09101163530720666, "nonzero": 0.13528014248445303, "positive": 0.13528014248445303, "multiple": 0.13528014248445303}}, {"docstring": "If advancing one step from `a` on `f` leads to `a' : \u03b1`, then `f.fix a = f.fix a'`\n", "keywords": {"advancing one step": 0.013923161052069546, "f.fix": 0.03146277825206327, "leads": 0.08439943001984396, "advancing": 0.11718348279991213, "step": 0.11718348279991213}}, {"docstring": "The set of fixed points of a continuous map is a closed set.\n", "keywords": {"fixed points": 0.035715520099333646, "continuous map": 0.035715520099333646, "closed set": 0.05259515133015473, "set of fixed": 0.11487806119690562, "set": 0.13453835116331675, "fixed": 0.18569843656348187, "points": 0.18569843656348187, "continuous": 0.18569843656348187, "map": 0.18569843656348187, "closed": 0.18569843656348187}}, {"docstring": "**Alias** of the reverse direction of real.convex_iff_is_preconnected`.\n", "keywords": {"direction of real.convex": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "preconnected": 0.04491197687864554, "real.convex": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " The `at_top` filter for an open interval `Ioi a` comes from the `at_top` filter in the ambient order.\n", "keywords": {"open interval": 0.013833902242147065, "ambient order": 0.013833902242147065, "top": 0.020944683225967962, "filter": 0.054147325146855434, "Ioi": 0.05435364549612988, "interval": 0.09593831581184391, "order": 0.09593831581184391, "open": 0.14222822903176371, "ambient": 0.14222822903176371}}, {"docstring": "**Divergence of the Harmonic Series**\n", "keywords": {"Harmonic Series": 0.012602360123953448, "Divergence": 0.08596317751626563, "Series": 0.08596317751626563, "Harmonic": 0.1447773057422032}}, {"docstring": "Non-dependent version of `function.update_comp_eq_of_not_mem_range'`\n", "keywords": {"Non-dependent version": 0.015380821171891606, "function.update": 0.04491197687864554, "comp": 0.04491197687864554, "mem": 0.04491197687864554, "range": 0.04491197687864554, "Non-dependent": 0.09568045026443411, "version": 0.15831692877998726}}, {"docstring": "**Alias** of the forward direction of real.convex_iff_is_preconnected`.\n", "keywords": {"direction of real.convex": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "preconnected": 0.04491197687864554, "real.convex": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "A function `f` grows to `+\u221e` independent of an order-preserving embedding `e`.\n", "keywords": {"order-preserving embedding": 0.04940384002065631, "function": 0.15831692877998726, "grows": 0.15831692877998726, "independent": 0.15831692877998726, "embedding": 0.15831692877998726, "order-preserving": 0.29736558256021506}}, {"docstring": "Two subsemirings are equal if they have the same elements.\n", "keywords": {"subsemirings are equal": 0.09700399286574239, "elements": 0.15831692877998726, "subsemirings": 0.29736558256021506, "equal": 0.29736558256021506}}, {"docstring": "Picard-Lindel\u00f6f (Cauchy-Lipschitz) theorem.\n", "keywords": {"Picard-Lindel\u00f6f": 0.04491197687864554, "Cauchy-Lipschitz": 0.04491197687864554, "theorem": 0.04491197687864554}}, {"docstring": "For a bounded set `s : set \u211d`, its `metric.diam` is equal to `Sup s - Inf s`.\n", "keywords": {"bounded set": 0.02635223776265893, "metric.diam": 0.054709255964732355, "set": 0.09269208833952335, "bounded": 0.1384995633470844, "equal": 0.1384995633470844}}, {"docstring": " The cardinality of the multiset `nth_roots \u2191n (1 : R)` is `n` if there is a primitive root of unity in `R`.\n", "keywords": {"primitive root": 0.05259515133015473, "nth": 0.05393656033701752, "multiset": 0.11369206228658875, "root of unity": 0.11487806119690562, "cardinality": 0.18569843656348187, "primitive": 0.18569843656348187, "unity": 0.18569843656348187, "roots": 0.2690767023266335, "root": 0.2690767023266335}}, {"docstring": " Taking a product over `s : finset \u03b1` is the same as multiplying the value on a single element `f a` by the product of `s.erase a`.\n", "keywords": {"single element": 0.009180130876077285, "Taking a product": 0.0283434008717333, "product": 0.06925543344827902, "Taking": 0.08088209179216702, "finset": 0.08088209179216702, "element": 0.08088209179216702, "s.erase": 0.08088209179216702, "multiplying": 0.11246769819744629, "single": 0.11246769819744629}}, {"docstring": "A topological fiber bundle constructed from core is indeed a topological fiber bundle.\n", "keywords": {"topological fiber bundle": 0.0032938263800797386, "fiber bundle constructed": 0.008409139787516754, "topological fiber": 0.013345420769058893, "fiber bundle": 0.019341598041498438, "constructed from core": 0.04290651575450026, "bundle constructed": 0.049153675083198865, "topological": 0.08061786523087178, "fiber": 0.08061786523087178, "bundle": 0.11549095123814725, "constructed": 0.20283314940424746, "core": 0.20283314940424746}}, {"docstring": "**Alias** of the reverse direction of order_dual.to_dual_le_to_dual`.\n", "keywords": {"dual": 0.019648131954263418, "direction of order": 0.021567786782198985, "Alias": 0.034278050535979626, "reverse direction": 0.035715520099333646, "dual.to": 0.05393656033701752, "order": 0.11369206228658875, "reverse": 0.18569843656348187, "direction": 0.18569843656348187}}, {"docstring": "If two points are at distance 0, then they coincide.\n", "keywords": {"distance": 0.15831692877998726, "coincide": 0.15831692877998726, "points": 0.29736558256021506}}, {"docstring": "A product of induced topologies is induced by the product map\n", "keywords": {"product map": 0.0381667238781621, "induced topologies": 0.06340461682679863, "map": 0.12363091320521931, "topologies is induced": 0.13561210463159817, "product": 0.14868279128010753, "induced": 0.14868279128010753, "topologies": 0.2005079697193566, "product of induced": 0.2858772036260003}}, {"docstring": "`0 * x` is equivalent to `0`.\n", "keywords": {"equivalent": 0.15831692877998726}}, {"docstring": "If, for any `a : \u03b1`, `\u03b2 a` is finite, then the cardinality of `W_type \u03b2`  is at most the maximum of the cardinality of `\u03b1` and `\u2135\u2080`\n", "keywords": {"cardinality": 0.05332403764722467, "finite": 0.09492398510093508, "type": 0.09492398510093508, "maximum": 0.1408007092310104}}, {"docstring": "The ray given by a positive multiple of a nonzero vector.\n", "keywords": {"nonzero vector": 0.015380821171891606, "positive multiple": 0.02570861714399338, "vector": 0.09568045026443411, "ray": 0.15831692877998726, "positive": 0.15831692877998726, "multiple": 0.15831692877998726, "nonzero": 0.15831692877998726}}, {"docstring": " A set is a neighborhood of `a` within `(a, +\u221e)` if and only if it contains an interval `(a, u)` with `a < u`.\n", "keywords": {"interval": 0.060154590733539764, "set": 0.0771485953923296, "neighborhood": 0.0771485953923296}}, {"docstring": " **Rearrangement Inequality**: Pointwise scalar multiplication of `f` and `g` is minimized when `f` and `g` antivary together. Stated by permuting the entries of `f`.\n", "keywords": {"Pointwise scalar multiplication": 0.001271864619686412, "Rearrangement Inequality": 0.0031146356952437464, "Pointwise scalar": 0.008334116283452563, "scalar multiplication": 0.02249651976012989, "Rearrangement": 0.05572221155747183, "Inequality": 0.05572221155747183, "Pointwise": 0.05572221155747183, "antivary": 0.10028582371075691, "Stated by permuting": 0.11755105063023073, "scalar": 0.14832923246533666, "multiplication": 0.14832923246533666, "minimized": 0.14832923246533666, "permuting the entries": 0.165573765898185, "Stated": 0.2790829227183407, "permuting": 0.37689977775222827, "entries": 0.37689977775222827}}, {"docstring": " If a topological space admits an atlas with locally compact charts, then the space itself is locally compact.\n", "keywords": {"locally compact charts": 0.006738963929378225, "topological space admits": 0.013309502369705531, "locally compact": 0.026339320718187967, "compact charts": 0.028106988580267674, "admits an atlas": 0.04097695443922855, "topological space": 0.06177937892048141, "space admits": 0.06177937892048141, "atlas with locally": 0.10330038770694525, "locally": 0.11185087393202754, "compact": 0.11185087393202754, "charts": 0.122209967475991, "space": 0.14663241076608644, "topological": 0.19840347794534322, "admits": 0.19840347794534322, "atlas": 0.19840347794534322}}, {"docstring": " One of de Morgan's laws: the negation of a disjunction is logically equivalent to the conjunction of the negations.\n", "keywords": {"Morgan laws": 0.006652513650129948, "disjunction is logically": 0.018641876658774394, "logically equivalent": 0.018641876658774394, "Morgan": 0.07261214632111582, "laws": 0.09101163530720666, "disjunction": 0.135280142484453, "logically": 0.135280142484453, "equivalent": 0.135280142484453, "conjunction": 0.135280142484453, "negation": 0.138510866896558, "negations": 0.138510866896558}}, {"docstring": " Second Main Fundamental Domain Lemma: if both `z` and `g \u2022 z` are in the open domain `\ud835\udc9f\u1d52`, where `z : \u210d` and `g : SL(2,\u2124)`, then `z = g \u2022 z`.\n", "keywords": {"Fundamental Domain Lemma": 0.0002237391724935356, "Main Fundamental Domain": 0.00028135417407700546, "Main Fundamental": 0.0033099010684553704, "Domain Lemma": 0.003867938511840469, "Fundamental Domain": 0.004861187558579311, "open domain": 0.008655162399738141, "Domain": 0.04211301669456886, "Lemma": 0.04574636906819685, "Main": 0.05743676318514099, "Fundamental": 0.05743676318514099, "open": 0.10187934809188742}}, {"docstring": " A product taken over a conditional whose condition is an equality test on the index and whose alternative is `1` has value either the term at that index or `1`.  The difference with `finset.prod_ite_eq` is that the arguments to `eq` are swapped.\n", "keywords": {"conditional whose condition": 0.021578258620195793, "equality test": 0.021578258620195793, "index": 0.07953440658135291, "product": 0.14533572323085503, "conditional": 0.14533572323085503, "condition": 0.14533572323085503, "equality": 0.14533572323085503, "test": 0.14533572323085503, "alternative": 0.14533572323085503, "term": 0.14533572323085503, "finset.prod": 0.20791243635202292, "ite": 0.20791243635202292, "swapped": 0.29084826087808563, "difference": 0.3713044625068338, "arguments": 0.3713044625068338}}, {"docstring": "The lift of a supremum is the supremum of the lifts.\n", "keywords": {"supremum": 0.10191687733271076, "lift": 0.15831692877998718, "lifts": 0.15831692877998718}}, {"docstring": " The `n`-th element in a join of sublists is the `j`-th element of the `i`th sublist, where `n` can be obtained in terms of `i` and `j` by adding the lengths of all the sublists of index `< i`, and adding `j`.\n", "keywords": {"obtained in terms": 0.01283603780491021, "adding the lengths": 0.03866538051856038, "sublists of index": 0.0483802286713877, "element": 0.05607143085965795, "join of sublists": 0.062457553230922884, "adding": 0.06891263861079308, "sublists": 0.08086723651615002, "index": 0.08525524620171859, "join": 0.1125760278679013, "obtained": 0.1125760278679013, "terms": 0.1125760278679013, "lengths": 0.1125760278679013, "sublist": 0.16173447303230004}}, {"docstring": "**Alias** of the forward direction of asymptotics.is_O_neg_left`.\n", "keywords": {"direction of asymptotics.is": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "neg": 0.04491197687864554, "left": 0.04491197687864554, "asymptotics.is": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "On `game`, simp-normal inequalities should use as few negations as possible.\n", "keywords": {"simp-normal inequalities": 0.015380821171891606, "game": 0.04491197687864554, "simp-normal": 0.09568045026443411, "inequalities": 0.15831692877998726, "negations": 0.15831692877998726}}, {"docstring": "The shadow of a family of `r`-sets is a family of `r - 1`-sets.\n", "keywords": {"family": 0.059463729216923555, "sets": 0.059463729216923555, "shadow": 0.15109932261208045}}, {"docstring": "The sum of a list of elements of an `add_submonoid` is an element of the `add_submonoid`.\n", "keywords": {"add": 0.022926948811930963, "submonoid": 0.022926948811930963, "list of elements": 0.039980565673599415, "sum": 0.12520420549175446, "list": 0.12520420549175446, "elements": 0.12829429951680435, "element": 0.12829429951680435}}, {"docstring": " Taking the affine span of a set, adding a point and taking the span again produces the same results as adding the point to the set and taking the span.\n", "keywords": {"Taking the affine": 0.008895797174837032, "taking the span": 0.009704235306248601, "affine span": 0.014196576934468231, "Taking": 0.027137481650645258, "results as adding": 0.035236956389414105, "point and taking": 0.03855091489727149, "set and taking": 0.03855091489727149, "span": 0.043081665381347584, "span again produces": 0.04981051972589412, "set": 0.06484532360003088, "adding": 0.06484532360003088, "point": 0.06484532360003088, "adding a point": 0.07090894100965507, "adding the point": 0.07090894100965507, "affine": 0.10830481428555064, "produces": 0.10830481428555064, "results": 0.10830481428555064}}, {"docstring": "The character of a representation is constant on conjugacy classes.\n", "keywords": {"conjugacy classes": 0.04940384002065631, "representation is constant": 0.09700399286574239, "constant on conjugacy": 0.09700399286574239, "classes": 0.15831692877998726, "character": 0.29736558256021506, "representation": 0.29736558256021506, "constant": 0.29736558256021506, "conjugacy": 0.29736558256021506}}, {"docstring": "`trim` is additive.\n", "keywords": {"trim": 0.04491197687864554, "additive": 0.15831692877998726}}, {"docstring": "If there are more pigeons than pigeonholes, then there are two pigeons in the same pigeonhole.\n", "keywords": {"pigeons": 0.14868279128010753, "pigeonholes": 0.15831692877998726, "pigeons than pigeonholes": 0.16174026929783902}}, {"docstring": "In degree `0`, the null homotopic map `H\u03c3` is zero.\n", "keywords": {"null homotopic map": 0.016559150827736194, "homotopic map": 0.04940384002065631, "null homotopic": 0.09700399286574239, "degree": 0.15831692877998726, "map": 0.15831692877998726, "null": 0.29736558256021506, "homotopic": 0.29736558256021506}}, {"docstring": " Absolute convergence of the integral which will give the derivative of the `\u0393` function on `1 < re s`.\n", "keywords": {"Absolute convergence": 0.00899321792126428, "give the derivative": 0.013527995261974615, "Absolute": 0.0771485953923296, "function": 0.0771485953923296, "convergence": 0.1155310835876123, "integral": 0.1155310835876123, "give": 0.1155310835876123, "derivative": 0.1155310835876123}}, {"docstring": "An uncurried version of `finset.prod_product_right`\n", "keywords": {"finset.prod": 0.04491197687864554, "product": 0.04491197687864554, "uncurried version": 0.09700399286574239, "uncurried": 0.29736558256021506, "version": 0.29736558256021506}}, {"docstring": "If `1 < |z|`, then `|S \u2022 z| < 1`.\n", "keywords": {}}, {"docstring": "Any element of the spectrum of a selfadjoint is real.\n", "keywords": {"selfadjoint is real": 0.015380821171891606, "real": 0.09568045026443411, "element": 0.15831692877998726, "spectrum": 0.15831692877998726, "selfadjoint": 0.15831692877998726}}, {"docstring": " A function which can be locally uniformly approximated by functions which are continuous on a set is continuous on this set.\n", "keywords": {"locally uniformly approximated": 0.009001679881101624, "locally uniformly": 0.04188746641162499, "uniformly approximated": 0.04188746641162499, "approximated by functions": 0.10583238594216893, "continuous": 0.11357121248292479, "set": 0.14868279128010753, "locally": 0.2005079697193566, "uniformly": 0.2005079697193566, "approximated": 0.2005079697193566, "set is continuous": 0.22507131211787937, "function": 0.22714242496584958, "functions": 0.22714242496584958}}, {"docstring": " The number of times an irreducible factor `p` appears in `normalized_factors x` is defined by the number of times it divides `x`.  See also `multiplicity_eq_count_normalized_factors` if `n` is given by `multiplicity p x`.\n", "keywords": {"number of times": 0.01815300021658052, "normalized": 0.05410614618921042, "times it divides": 0.07820950917189548, "number": 0.08071122488468786, "times": 0.10851667194260102, "times an irreducible": 0.11050982700798744, "irreducible factor": 0.11511190712482802, "divides": 0.15258357984680845, "multiplicity": 0.20033855538924117, "irreducible": 0.21956680580977211, "defined": 0.21956680580977211, "factors": 0.2350742809513356, "count": 0.2602236931826535, "factor": 0.4701485619026712}}, {"docstring": " This lemma shows that the image of `x` of a closure operator built from the `mk\u2083` constructor respects `p`, the property that was fed into it.\n", "keywords": {"closure operator built": 0.0016012214736657916, "constructor respects": 0.00899321792126428, "lemma shows": 0.013527995261974615, "closure operator": 0.013527995261974615, "operator built": 0.013527995261974615, "respects": 0.0771485953923296, "lemma": 0.1155310835876123, "shows": 0.1155310835876123, "image": 0.1155310835876123, "closure": 0.1155310835876123, "operator": 0.1155310835876123, "built": 0.1155310835876123, "constructor": 0.1155310835876123, "property": 0.1155310835876123, "fed": 0.1155310835876123}}, {"docstring": "A left-regular element of a `nontrivial` `mul_zero_class` is non-zero.\n", "keywords": {"left-regular element": 0.02570861714399338, "nontrivial": 0.04491197687864554, "mul": 0.04491197687864554, "class": 0.04491197687864554, "non-zero": 0.09568045026443411, "left-regular": 0.15831692877998726, "element": 0.15831692877998726}}, {"docstring": "**Alias** of the reverse direction of asymptotics.is_O_with_norm_left`.\n", "keywords": {"direction of asymptotics.is": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "norm": 0.04491197687864554, "left": 0.04491197687864554, "asymptotics.is": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "Lemmas showing projection is the inverse of product\n", "keywords": {"Lemmas showing projection": 0.01655915082773619, "Lemmas showing": 0.04940384002065631, "inverse of product": 0.04940384002065631, "showing projection": 0.09700399286574239, "Lemmas": 0.15831692877998726, "product": 0.15831692877998726, "showing": 0.29736558256021506, "projection": 0.29736558256021506, "inverse": 0.29736558256021506}}, {"docstring": "This is the `list.prod` version of `mul_inv`\n", "keywords": {"list.prod": 0.04491197687864554, "mul": 0.04491197687864554, "inv": 0.04491197687864554, "version": 0.15831692877998726}}, {"docstring": "A type is either a subsingleton or nontrivial.\n", "keywords": {"subsingleton or nontrivial": 0.015380821171891606, "nontrivial": 0.09568045026443411, "type": 0.15831692877998726, "subsingleton": 0.15831692877998726}}, {"docstring": " If `A` is a family of enough low-degree polynomials over a finite ring, there is a pair of elements in `A` (with different indices but not necessarily distinct), such that their difference has small degree.\n", "keywords": {"finite ring": 0.005380746843605012, "necessarily distinct": 0.005380746843605012, "small degree": 0.005380746843605012, "low-degree polynomials": 0.00717258304785508, "pair of elements": 0.00717258304785508, "difference has small": 0.00717258304785508, "ring": 0.06341998722529081, "distinct": 0.06341998722529081, "degree": 0.06341998722529081, "family": 0.08438900089923473, "low-degree": 0.08438900089923473, "polynomials": 0.08438900089923473, "finite": 0.08438900089923473, "pair": 0.08438900089923473, "elements": 0.08438900089923473, "indices": 0.08438900089923473, "necessarily": 0.08438900089923473, "difference": 0.08438900089923473, "small": 0.08438900089923473}}, {"docstring": " The iterated differential within a set `s` at a point `x` is not modified if one intersects `s` with a neighborhood of `x`.\n", "keywords": {"iterated differential": 0.013527995261974615, "set": 0.0771485953923296, "point": 0.0771485953923296, "intersects": 0.0771485953923296, "iterated": 0.1155310835876123, "differential": 0.1155310835876123, "modified": 0.1155310835876123, "neighborhood": 0.1155310835876123}}, {"docstring": " If `ring_char F` is odd, then `quadratic_char F a` can be computed in terms of `a ^ (fintype.card F / 2)`.\n", "keywords": {"computed in terms": 0.018641876658774398, "char": 0.03334619869293711, "ring": 0.053316999302383886, "quadratic": 0.053316999302383886, "odd": 0.09101163530720666, "fintype.card": 0.09101163530720666, "computed": 0.13528014248445303, "terms": 0.13528014248445303}}, {"docstring": "The scalar multiplication of two `C^n` functions at a point is `C^n` at this point.\n", "keywords": {"scalar multiplication": 0.037831312533597124, "functions": 0.11718348279991213, "point": 0.13945519496053638, "scalar": 0.19092478917347616, "multiplication": 0.19092478917347616}}, {"docstring": " If a normed ring `\ud835\udd38` is a normed algebra over two fields, then they define the same `exp_series` on `\ud835\udd38`.\n", "keywords": {"normed ring": 0.023102956859254058, "normed algebra": 0.03833027959745858, "exp": 0.053316999302383886, "series": 0.053316999302383886, "normed": 0.10038999320777728, "ring": 0.11246769819744629, "fields": 0.11246769819744629, "algebra": 0.1838594885424691, "define": 0.1838594885424691}}, {"docstring": " A map between two inner product spaces is a conformal map if and only if it preserves inner products up to a scalar factor, i.e., there exists a positive `c : \u211d` such that `\u27eaf u, f v\u27eb = c * \u27eau, v\u27eb` for all `u`, `v`.\n", "keywords": {"scalar factor": 0.009805590062567161, "exists a positive": 0.009805590062567161, "product spaces": 0.013511317635085635, "preserves inner products": 0.013511317635085635, "conformal map": 0.017108858828715295, "map": 0.0724218931801197, "factor": 0.08361462103586328, "positive": 0.08361462103586328, "product": 0.11479298905284506, "products": 0.11479298905284506, "spaces": 0.1161324896811994, "conformal": 0.1161324896811994, "preserves": 0.1161324896811994, "scalar": 0.1161324896811994, "exists": 0.1161324896811994}}, {"docstring": "Symmetric of `filter.map_map\u2082_right_anticomm`.\n", "keywords": {"filter.map": 0.04491197687864554, "anticomm": 0.04491197687864554, "Symmetric": 0.15831692877998726, "map": 0.15831692877998726}}, {"docstring": "Primes greater than about `2 * n / 3` and less than `n` do not appear in the factorization of `central_binom n`.\n", "keywords": {"Primes greater": 0.00899321792126428, "central": 0.04491197687864554, "Primes": 0.0771485953923296, "binom": 0.0771485953923296, "greater": 0.1155310835876123, "factorization": 0.1155310835876123}}, {"docstring": " If the angle between two vectors is \u03c0, the norm of their difference equals the sum of their norms.\n", "keywords": {"difference equals": 0.01904688389482227, "equals the sum": 0.01904688389482227, "angle": 0.1367145963576765, "vectors": 0.1367145963576765, "difference": 0.1367145963576765, "equals": 0.1367145963576765, "sum": 0.1367145963576765, "norm": 0.18213622310077732, "norms": 0.18213622310077732}}, {"docstring": "**Alias** of the reverse direction of antitone_to_dual_comp_iff`.\n", "keywords": {"direction of antitone": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "dual": 0.04491197687864554, "comp": 0.04491197687864554, "iff": 0.04491197687864554, "antitone": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "The **extreme value theorem**: a continuous function realizes its maximum on a compact set.\n", "keywords": {"continuous function realizes": 0.0042542192213185686, "extreme value theorem": 0.009239332327148086, "compact set": 0.015380821171891606, "continuous function": 0.02570861714399338, "function realizes": 0.02570861714399338, "realizes its maximum": 0.02570861714399338, "extreme": 0.09568045026443411, "theorem": 0.09568045026443411, "set": 0.09568045026443411, "continuous": 0.15831692877998726, "function": 0.15831692877998726, "realizes": 0.15831692877998726, "maximum": 0.15831692877998726, "compact": 0.15831692877998726}}, {"docstring": " The \"clifford conjugate\" (aka `involute \u2218 reverse = reverse \u2218 involute`) maps to the quaternion conjugate.\n", "keywords": {"clifford conjugate": 0.01939829505479924, "involute": 0.0220371240994345, "reverse": 0.0220371240994345, "quaternion conjugate": 0.031877969496436134, "aka": 0.05827187674593231, "conjugate": 0.07785437699288043, "clifford": 0.122209967475991, "maps": 0.122209967475991, "quaternion": 0.19840347794534322}}, {"docstring": "If `a^(p-1) = 1 mod p`, but `a^((p-1)/q) \u2260 1 mod p` for all prime factors `q` of `p-1`, then `p` is prime. This is true because `a` has order `p-1` in the multiplicative group mod `p`, so this group must itself have order `p-1`, which only happens when `p` is prime.\n", "keywords": {"prime factors": 0.04186281767968532, "multiplicative group mod": 0.08093937091253878, "mod": 0.09259144793726161, "prime": 0.09960535862264402, "factors": 0.13446645607297683, "group mod": 0.14641371067932998, "order": 0.16993596321121762, "group": 0.22988903117651854, "multiplicative group": 0.24175110774207925, "true": 0.4234339452490259, "multiplicative": 0.4234339452490259}}, {"docstring": " An unbounded set has zero diameter. If you would prefer to get the value \u221e, use `emetric.diam`. This lemma makes it possible to avoid side conditions in some situations\n", "keywords": {"unbounded set": 0.050888965170882816, "diameter": 0.13696809108329627, "emetric.diam": 0.19677146788549632, "unbounded": 0.2200560909321288, "set": 0.2200560909321288, "situations": 0.44538603402402266, "prefer": 0.4949246952252326, "lemma makes": 0.5286731219590494, "avoid side": 0.5286731219590494, "side conditions": 0.5286731219590494, "avoid side conditions": 0.5507976380437665, "lemma": 0.5880798524606783, "makes": 0.5880798524606783, "avoid": 0.5880798524606783, "side": 0.5880798524606783, "conditions": 0.5880798524606783}}, {"docstring": " **Equality case of the Rearrangement Inequality**: Pointwise scalar multiplication of `f` and `g`, which antivary together, is unchanged by a permutation if and only if `f \u2218 \u03c3` and `g` antivary together. Stated by permuting the entries of `f`.\n", "keywords": {"Pointwise scalar multiplication": 0.0019254155628980188, "Rearrangement Inequality": 0.0050414360735746774, "Equality case": 0.010681703670791362, "Pointwise scalar": 0.010681703670791362, "scalar multiplication": 0.031040804666112243, "Equality": 0.060911257173420906, "Inequality": 0.060911257173420906, "Pointwise": 0.060911257173420906, "antivary": 0.07953440658135287, "Rearrangement": 0.08235173134587291, "Stated by permuting": 0.1549537691794176, "case": 0.17351161766281323, "scalar": 0.17351161766281323, "multiplication": 0.17351161766281323, "unchanged": 0.17351161766281323, "permutation": 0.17351161766281323, "permuting the entries": 0.21626281206510953, "Stated": 0.31817081130554614, "permuting": 0.42167437397336704, "entries": 0.42167437397336704}}, {"docstring": " The closure of the interval `(a, +\u221e)` is the closed interval `[a, +\u221e)`, unless `a` is a top element.\n", "keywords": {"top element": 0.00964721495732046, "closed interval": 0.010003459729722266, "interval": 0.042981588758132815, "element": 0.08293109455034965, "closure": 0.11521656054299435, "closed": 0.11521656054299435, "top": 0.11521656054299435}}, {"docstring": " A strictly convex function on an open segment is strictly upper-bounded by the max of its endpoints.\n", "keywords": {"strictly convex function": 0.009836841595559516, "convex function": 0.03439110359613085, "open segment": 0.03439110359613085, "strictly convex": 0.05033870131288873, "strictly upper-bounded": 0.05033870131288873, "segment is strictly": 0.11047974441476761, "endpoints": 0.11145728654016383, "strictly": 0.1314201551237121, "convex": 0.1823394614884183, "function": 0.1823394614884183, "open": 0.1823394614884183, "segment": 0.1823394614884183, "upper-bounded": 0.1823394614884183, "max": 0.1823394614884183}}, {"docstring": "To prove a property of a product, it suffices to prove that the property is multiplicative and holds on factors.\n", "keywords": {"holds on factors": 0.0233550736766052, "multiplicative and holds": 0.038584678130008584, "suffices to prove": 0.0431505389096901, "prove": 0.10730569120144322, "product": 0.11840455484321102, "factors": 0.11840455484321102, "property is multiplicative": 0.1244669424000432, "property": 0.1411879566095664, "suffices": 0.19274649316101516, "multiplicative": 0.19274649316101516, "holds": 0.19274649316101516, "prove a property": 0.20525303731368727}}, {"docstring": "Concave **Jensen's inequality**, `finset.center_mass` version.\n", "keywords": {"Jensen inequality": 0.013797198203993007, "Concave": 0.04491197687864554, "finset.center": 0.04491197687864554, "mass": 0.04491197687864554, "version": 0.04491197687864554, "Jensen": 0.08596317751626563, "inequality": 0.15831692877998726}}, {"docstring": "**Alias** of the reverse direction of strict_mono_to_dual_comp_iff`.\n", "keywords": {"direction of strict": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "mono": 0.04491197687864554, "dual": 0.04491197687864554, "comp": 0.04491197687864554, "iff": 0.04491197687864554, "strict": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "An additive group is finitely generated if and only if it is finitely generated as an additive monoid.\n", "keywords": {"finitely generated": 0.019341598041498438, "additive monoid": 0.029781174332346342, "group is finitely": 0.033809660486119025, "additive group": 0.049153675083198865, "finitely": 0.08061786523087178, "additive": 0.11549095123814725, "generated": 0.11549095123814725, "monoid": 0.12520420549175446, "group": 0.20283314940424746}}, {"docstring": "`S.normed_mk` agrees with `quotient_add_group.mk' S`.\n", "keywords": {"S.normed": 0.030396371632413578, "quotient": 0.04491197687864554, "add": 0.04491197687864554, "group.mk": 0.04491197687864554, "agrees": 0.15831692877998726}}, {"docstring": "`(A \u2297 B).is_diag` if both `A` and `B` are diagonal.\n", "keywords": {"diag": 0.04491197687864554, "diagonal": 0.09568045026443411}}, {"docstring": " The exponential map in a complete normed field `\ud835\udd42` of characteristic zero has derivative `1` at zero, as long as it converges on a neighborhood of zero.\n", "keywords": {"complete normed field": 0.0010606143890052174, "normed field": 0.00899321792126428, "exponential map": 0.013527995261974615, "complete normed": 0.013527995261974615, "field": 0.0771485953923296, "derivative": 0.0771485953923296, "exponential": 0.1155310835876123, "map": 0.1155310835876123, "complete": 0.1155310835876123, "normed": 0.1155310835876123, "characteristic": 0.1155310835876123, "long": 0.1155310835876123, "converges": 0.1155310835876123, "neighborhood": 0.1155310835876123}}, {"docstring": "**Alias** of the reverse direction of set.injective_cod_restrict`.\n", "keywords": {"direction of set.injective": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "cod": 0.04491197687864554, "restrict": 0.04491197687864554, "set.injective": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " The `take_until` and `drop_until` functions split a walk into two pieces. The lemma `count_support_take_until_eq_one` specifies where this split occurs.\n", "keywords": {"functions split": 0.042340872995322666, "drop": 0.07188367843871574, "functions": 0.12102666257279926, "pieces": 0.12102666257279926, "split occurs": 0.12180611121305976, "split a walk": 0.13359747832016686, "split": 0.16781817241196398, "walk": 0.17705097305926945, "count": 0.21197353881683212, "support": 0.21197353881683212, "lemma": 0.32350596561652023, "specifies": 0.32350596561652023, "occurs": 0.32350596561652023}}, {"docstring": "`simple_func.lintegral` is monotone both in function and in measure.\n", "keywords": {"simple": 0.04491197687864554, "func.lintegral": 0.04491197687864554, "measure": 0.09568045026443411, "monotone": 0.15831692877998726, "function": 0.15831692877998726}}, {"docstring": " `finset.noncomm_prod` is \u201cinjective\u201d in `f` if `f` maps into independent subgroups.  This generalizes (one direction of) `subgroup.disjoint_iff_mul_eq_one`.\n", "keywords": {"maps into independent": 0.02541909697430123, "independent subgroups": 0.02541909697430123, "finset.noncomm": 0.05899937629682816, "prod": 0.05899937629682816, "injective": 0.05899937629682816, "maps": 0.12363091320521931, "subgroups": 0.12363091320521931, "subgroup.disjoint": 0.17881754828257995, "iff": 0.17881754828257995, "mul": 0.17881754828257995, "independent": 0.2005079697193566, "generalizes": 0.32883716426354986, "direction": 0.46553351027698087}}, {"docstring": "The $L^1$ norm is less than the $L^\\infty$ norm scaled by the cardinality.\n", "keywords": {"norm scaled": 0.015245046152746466, "norm": 0.05332403764722467, "infty": 0.055708263664958506, "cardinality": 0.09492398510093508, "scaled": 0.1408007092310104}}, {"docstring": "Properties of division with remainder for a / b.\n", "keywords": {"Properties of division": 0.04940384002065631, "division with remainder": 0.09700399286574239, "Properties": 0.15831692877998726, "division": 0.29736558256021506, "remainder": 0.29736558256021506}}, {"docstring": " Let `{x | p x}` be a subsemigroup of a commutative monoid `M`. Let `f : M \u2192 N` be a map submultiplicative on `{x | p x}`, i.e., `p x \u2192 p y \u2192 f (x * y) \u2264 f x * f y`. Let `g i`, `i \u2208 s`, be a nonempty finite family of elements of `M` such that `\u2200 i \u2208 s, p (g i)`. Then `f (\u220f x in s, g x) \u2264 \u220f x in s, f (g x)`.\n", "keywords": {"commutative monoid": 0.007876341082811154, "nonempty finite family": 0.05793079740242835, "map submultiplicative": 0.07699753230836169, "monoid": 0.08218126042220884, "subsemigroup": 0.09509210613126085, "commutative": 0.09509210613126085, "nonempty finite": 0.1370217448104557, "finite family": 0.1370217448104557, "family of elements": 0.1370217448104557, "map": 0.2673813115504628, "submultiplicative": 0.2673813115504628, "nonempty": 0.34714455807623124, "finite": 0.34714455807623124, "family": 0.34714455807623124, "elements": 0.34714455807623124}}, {"docstring": "**Alias** of metric.bounded_of_finite`.\n", "keywords": {"Alias": 0.030396371632413578, "finite": 0.04491197687864554, "metric.bounded": 0.09568045026443411}}, {"docstring": "**Tychonoff's theorem** formulated using `set.pi`: product of compact sets is compact.\n", "keywords": {"Tychonoff theorem": 0.007087898542062096, "compact sets": 0.051351238837580325, "set.pi": 0.05331699930238388, "Tychonoff": 0.06257809066078279, "product of compact": 0.06956410889469501, "sets is compact": 0.11245662598947327, "theorem": 0.11246769819744627, "formulated": 0.11246769819744627, "product": 0.11246769819744627, "compact": 0.13282721021560867, "sets": 0.18385948854246909}}, {"docstring": "The degree of a product of polynomials is equal to the sum of the degrees, where the degree of the zero polynomial is \u22a5. `[nontrivial R]` is needed, otherwise for `l = []` we have `\u22a5` in the LHS and `0` in the RHS.\n", "keywords": {"polynomials is equal": 0.01549991452627088, "product of polynomials": 0.03808851607866805, "degree": 0.03985346270574366, "degrees": 0.07970692541148731, "polynomials": 0.11344077444489854, "product": 0.13454892410797142, "equal": 0.13454892410797142, "sum": 0.13454892410797142, "RHS": 0.1660351874423949, "LHS": 0.19108678788047018, "nontrivial": 0.299044624244958, "needed": 0.299044624244958}}, {"docstring": "The composition of `map_equiv`s is carried over the `equiv_functor`. For plain `functor`s, this lemma is named `map_map` when applied or `map_comp_map` when not applied.\n", "keywords": {"map": 0.015241937447802374, "equiv": 0.0365460142806581, "functor": 0.058746233421205815, "composition": 0.17884985164559855, "carried": 0.17884985164559855, "lemma is named": 0.18181845369275768, "applied": 0.23507725802126012, "comp": 0.2784694828000445, "plain": 0.3572263366231791, "named": 0.3572263366231791, "lemma": 0.43066911011142944}}, {"docstring": "One is `M`-regular always.\n", "keywords": {"regular": 0.15831692877998726}}, {"docstring": "See <https://stacks.math.columbia.edu/tag/00Z7>\n", "keywords": {}}, {"docstring": "The bundled derivative of a `C^{n+1}` function is `C^n`.\n", "keywords": {"bundled derivative": 0.02570861714399338, "function": 0.09568045026443411, "bundled": 0.15831692877998726, "derivative": 0.15831692877998726}}, {"docstring": "Given a map f from \u03b1 to \u03b2, the kernel of f is the unique equivalence relation on \u03b1 whose    induced map from the quotient of \u03b1 to \u03b2 is injective.\n", "keywords": {"unique equivalence relation": 0.002535831815717203, "unique equivalence": 0.018310930906343142, "equivalence relation": 0.018310930906343142, "induced map": 0.02437189179902695, "map": 0.08871286057464066, "injective": 0.09017440044927587, "kernel": 0.13409574860218185, "unique": 0.13409574860218185, "equivalence": 0.13409574860218185, "relation": 0.13409574860218185, "induced": 0.13409574860218185, "quotient": 0.13409574860218185}}, {"docstring": "Two closed sets are at zero Hausdorff edistance if and only if they coincide\n", "keywords": {"Hausdorff edistance": 0.013797198203993007, "closed sets": 0.02570861714399338, "Hausdorff": 0.08596317751626563, "coincide": 0.09568045026443411, "closed": 0.15831692877998726, "sets": 0.15831692877998726, "edistance": 0.15831692877998726}}, {"docstring": " If a reflexive relation `r : \u03b1 \u2192 \u03b1 \u2192 Prop` holds over `x y : \u03b1`, then it holds whether or not `x \u2260 y`. Unlike `reflexive.ne_imp_iff`, this uses `[is_refl \u03b1 r]`.\n", "keywords": {"reflexive relation": 0.01658795817991718, "Prop": 0.04096847175859269, "holds": 0.08252252056410839, "relation": 0.10897138829065033, "reflexive": 0.1497391925531594, "Unlike": 0.21373773690901868, "reflexive.ne": 0.21373773690901868, "imp": 0.21373773690901868, "iff": 0.21373773690901868, "refl": 0.2981226766650414}}, {"docstring": " At all points of a linearly ordered commutative group with a zero element adjoined, the pure filter is smaller than the filter given by nhds_fun.\n", "keywords": {"linearly ordered commutative": 0.006172028049662181, "ordered commutative group": 0.006172028049662181, "element adjoined": 0.019743941211743603, "linearly ordered": 0.03277825745301808, "ordered commutative": 0.03277825745301808, "commutative group": 0.03277825745301808, "pure filter": 0.04762083978464814, "fun": 0.0514064682630094, "filter is smaller": 0.10514656598600668, "adjoined": 0.10868092541297539, "nhds": 0.10868092541297539, "filter": 0.12757733838039498, "points": 0.1781514608044755, "linearly": 0.1781514608044755, "ordered": 0.1781514608044755, "commutative": 0.1781514608044755, "group": 0.1781514608044755, "element": 0.1781514608044755, "pure": 0.1781514608044755, "smaller": 0.1781514608044755}}, {"docstring": "As a binary function, `fin.cons` is injective.\n", "keywords": {"fin.cons": 0.04491197687864554, "binary function": 0.04940384002065631, "function": 0.15831692877998726, "injective": 0.15831692877998726, "binary": 0.29736558256021506}}, {"docstring": " Given three nonzero vectors, adding the angles between them in cyclic order, with the first vector in each angle negated, results in \u03c0. If the vectors add to 0, this is a version of the sum of the angles of a triangle.\n", "keywords": {"cyclic order": 0.019561080820523987, "angle negated": 0.03379558456480049, "nonzero vectors": 0.05132311969920293, "adding the angles": 0.05785867710761824, "adding": 0.12129755590880277, "order": 0.12129755590880277, "negated": 0.12129755590880277, "results": 0.12129755590880277, "angles": 0.13475448982496005, "vectors add": 0.13878844757701606, "vectors": 0.15431896013595722, "nonzero": 0.1581712505591422, "cyclic": 0.1581712505591422, "angle": 0.2695089796499201, "vector": 0.30863792027191445, "triangle": 0.32406297685552543, "add": 0.39487622055868254, "version": 0.39487622055868254, "sum": 0.39487622055868254}}, {"docstring": "**Alias** of the reverse direction of div_eq_one`.\n", "keywords": {"direction of div": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "div": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "**Alias** of lt_of_le_of_lt`.\n", "keywords": {"Alias": 0.030396371632413578}}, {"docstring": "For normed groups, an operator is zero iff its norm vanishes.\n", "keywords": {"normed groups": 0.04940384002065631, "norm vanishes": 0.04940384002065631, "iff its norm": 0.09700399286574239, "groups": 0.15831692877998726, "vanishes": 0.15831692877998726, "normed": 0.29736558256021506, "operator": 0.29736558256021506, "iff": 0.29736558256021506, "norm": 0.29736558256021506}}, {"docstring": "**Alias** of the forward direction of sub_lt_iff_lt_add'`.\n", "keywords": {"forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "add": 0.04491197687864554, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " Given `pb : power_basis K S`, then the trace of `pb.gen` is `((minpoly K pb.gen).map (algebra_map K F)).roots.sum`.\n", "keywords": {"minpoly K pb.gen": 0.02593095746307935, "pb.gen": 0.05332403764722467, "map": 0.05332403764722467, "power": 0.055708263664958506, "algebra": 0.055708263664958506, "roots.sum": 0.055708263664958506, "basis": 0.09492398510093508, "minpoly": 0.09492398510093508, "trace": 0.1408007092310104}}, {"docstring": "A uniform bound for the `s`-derivative of the `\u0393` integrand for `s` in vertical strips.\n", "keywords": {"vertical strips": 0.015380821171891606, "uniform bound": 0.02570861714399338, "derivative": 0.09568045026443411, "integrand": 0.09568045026443411, "strips": 0.09568045026443411, "uniform": 0.15831692877998726, "bound": 0.15831692877998726, "vertical": 0.15831692877998726}}, {"docstring": "A dependent version of `submonoid.closure_induction`.\n", "keywords": {"submonoid.closure": 0.04491197687864554, "induction": 0.04491197687864554, "dependent version": 0.09700399286574239, "dependent": 0.29736558256021506, "version": 0.29736558256021506}}, {"docstring": "This lemma is useful for working with the `int_degree` of a rational function.\n", "keywords": {"int": 0.04491197687864554, "degree": 0.04491197687864554, "rational function": 0.04940384002065631, "function": 0.15831692877998726, "lemma": 0.29736558256021506, "working": 0.29736558256021506, "rational": 0.29736558256021506}}, {"docstring": " To prove that the lift of a supremum is bounded by some cardinal `t`, it suffices to show that the lift of each cardinal is bounded by `t`.\n", "keywords": {"supremum is bounded": 0.031877969496436134, "suffices to show": 0.04097695443922855, "lift": 0.07785437699288043, "bounded": 0.07785437699288043, "cardinal is bounded": 0.10441584779951466, "cardinal": 0.14663241076608644, "prove": 0.19840347794534322, "supremum": 0.19840347794534322, "suffices": 0.19840347794534322, "show": 0.19840347794534322}}, {"docstring": " `x` is a cluster point of a set `s` if every neighbourhood of `x` meets `s` on a nonempty set.\n", "keywords": {"nonempty set": 0.014146116061608767, "cluster point": 0.01904688389482227, "set": 0.05101428509898996, "meets": 0.05393656033701752, "cluster": 0.1367145963576765, "point": 0.1367145963576765, "neighbourhood": 0.1367145963576765, "nonempty": 0.1367145963576765}}, {"docstring": "The strong pigeonhole principle for finitely many pigeons and pigeonholes. There is a pigeonhole with at most as many pigeons as the floor of the average number of pigeons across all pigeonholes. (\"The minimum is at most the mean\" specialized to integers.)  More formally, given a function `f` between finite types `\u03b1` and `\u03b2` and a number `n` such that `card \u03b1 < card \u03b2 * n`, there exists an element `y : \u03b2` such that its preimage has less than `n` elements.\n", "keywords": {"strong pigeonhole principle": 0.021206915681202622, "principle for finitely": 0.04573062182022199, "strong pigeonhole": 0.09119152065343179, "pigeonhole principle": 0.09119152065343179, "pigeons": 0.10954666513053636, "finitely many pigeons": 0.1214832654864876, "pigeonhole": 0.19981580591119055, "strong": 0.2091190708501056, "principle": 0.2091190708501056, "finitely": 0.2091190708501056, "card": 0.24986675149227014, "number": 0.26256575446357217, "specialized to integers": 0.3257772530617831, "average number": 0.33580265934066017, "floor": 0.47871137790847995, "average": 0.47871137790847995, "specialized": 0.49570705148314725, "integers": 0.49570705148314725, "element": 0.4997335029845403, "elements": 0.4997335029845403}}, {"docstring": "Deprecated. Use `fun_like.coe_injective` instead.\n", "keywords": {"Deprecated": 0.05899937629682816, "fun": 0.17881754828257995, "like.coe": 0.17881754828257995, "injective": 0.17881754828257995}}, {"docstring": " If zero is an element of a list `L`, then `list.prod L = 0`. If the domain is a nontrivial monoid with zero with no divisors, then this implication becomes an `iff`, see `list.prod_eq_zero_iff`.\n", "keywords": {"iff": 0.07975778315078337, "list.prod": 0.10993590514319534, "list": 0.13085599654324231, "element": 0.19044453900858593, "nontrivial monoid": 0.25342300681454566, "divisors": 0.34335610232496827, "domain": 0.4496495765069246, "nontrivial": 0.4496495765069246, "monoid": 0.4496495765069246, "implication": 0.4496495765069246}}, {"docstring": "Congruence relations are symmetric.\n", "keywords": {"Congruence relations": 0.04940384002065631, "relations are symmetric": 0.04940384002065631, "Congruence": 0.15831692877998726, "symmetric": 0.15831692877998726, "relations": 0.29736558256021506}}, {"docstring": " If a function is differentiable inside a convex set with nonempty interior, and has a second derivative at a point of this convex set, then this second derivative is symmetric.\n", "keywords": {"convex set": 0.0071512280674448075, "nonempty interior": 0.010284849344883894, "function is differentiable": 0.014329453017822688, "differentiable inside": 0.014329453017822688, "derivative is symmetric": 0.025992383708703555, "inside a convex": 0.03542459905278265, "set with nonempty": 0.03542459905278265, "convex": 0.05937335332994984, "set": 0.05937335332994984, "derivative": 0.05937335332994984, "interior": 0.08565028372171016, "symmetric": 0.08565028372171016, "function": 0.11885714341470131, "differentiable": 0.11885714341470131, "inside": 0.11885714341470131, "nonempty": 0.11885714341470131, "point": 0.11885714341470131}}, {"docstring": " Given two maps `f : \u03b1 \u2192 \u03b2` and `g : \u03b2 \u2192 \u03b1`, `g` is a bijective map between the fixed points of `f \u2218 g` and the fixed points of `g \u2218 f`. The inverse map is `f`, see `inv_on_fixed_pts_comp`.\n", "keywords": {"fixed points": 0.017169854013332708, "points": 0.0697259617269504, "fixed": 0.07935743777272107, "bijective map": 0.07983117072217993, "bijective": 0.18986511248325144, "map": 0.1946890257585392, "inverse map": 0.21171171196695956, "inv": 0.2656551942045955, "pts": 0.2656551942045955, "comp": 0.2656551942045955, "maps": 0.3893780515170784, "inverse": 0.4487186401087124}}, {"docstring": " The function `continuous_linear_equiv.inverse` can be written in terms of `ring.inverse` for the ring of self-maps of the domain.\n", "keywords": {"written in terms": 0.013527995261974615, "ring of self-maps": 0.013527995261974615, "continuous": 0.04491197687864554, "linear": 0.04491197687864554, "equiv.inverse": 0.04491197687864554, "ring.inverse": 0.04491197687864554, "function": 0.0771485953923296, "domain": 0.0771485953923296, "written": 0.1155310835876123, "terms": 0.1155310835876123, "ring": 0.1155310835876123, "self-maps": 0.1155310835876123}}, {"docstring": "The inverse of `rotation` is rotation by the negation of the angle.\n", "keywords": {"rotation": 0.094808423351325, "angle": 0.09492398510093508, "inverse": 0.1408007092310104, "negation": 0.1408007092310104}}, {"docstring": " If a complex function is differentiable at a real point, then the induced real function is also differentiable at this point, with a derivative equal to the real part of the complex derivative.\n", "keywords": {"induced real function": 0.00808485199496969, "derivative equal": 0.035245190028201215, "real point": 0.03537461113057034, "complex function": 0.038682905860058694, "induced real": 0.04453206998014841, "real part": 0.04453206998014841, "real function": 0.048918404219772484, "complex derivative": 0.05014664834699713, "point": 0.06242718010531789, "function is differentiable": 0.06950266326107873, "function": 0.0852138388463465, "differentiable": 0.0852138388463465, "real": 0.09121561589843971, "complex": 0.10926120470902587, "derivative": 0.10926120470902587, "induced": 0.1557975610652636, "equal": 0.1557975610652636, "part": 0.1557975610652636}}, {"docstring": "If `s` and `t` are two fundamental domains of the same action, then their measures are equal.\n", "keywords": {"measures are equal": 0.015380821171891606, "fundamental domains": 0.02570861714399338, "action": 0.09568045026443411, "equal": 0.09568045026443411, "fundamental": 0.15831692877998726, "domains": 0.15831692877998726, "measures": 0.15831692877998726}}, {"docstring": "The equiv version of `fin.pred_above_zero`.\n", "keywords": {"fin.pred": 0.04491197687864554, "equiv version": 0.09700399286574239, "equiv": 0.29736558256021506, "version": 0.29736558256021506}}, {"docstring": "**Alias** of star_ring_end_self_apply`.\n", "keywords": {"Alias": 0.030396371632413578, "ring": 0.04491197687864554, "end": 0.04491197687864554, "apply": 0.04491197687864554, "star": 0.15831692877998726}}, {"docstring": "If `S` is a subset of `R`, and `S` is covering, then `R` is covering as well.  See <https://stacks.math.columbia.edu/tag/00Z5> (2), or discussion after [MM92] Chapter III, Section 2, Definition 1.\n", "keywords": {"Chapter III": 0.03598771450916284, "covering": 0.08252252056410837, "Section": 0.1291963090738588, "Definition": 0.1291963090738588, "subset": 0.1785903903600119, "Chapter": 0.18638022455635891, "III": 0.18638022455635891, "discussion": 0.4302357358329322}}, {"docstring": "Product of a list of elements in a subfield is in the subfield.\n", "keywords": {"list of elements": 0.037831312533597124, "Product": 0.11718348279991213, "subfield": 0.13945519496053638, "list": 0.19092478917347616, "elements": 0.19092478917347616}}, {"docstring": "Two simplices are equal if they have the same points.\n", "keywords": {"simplices are equal": 0.09700399286574239, "points": 0.15831692877998726, "simplices": 0.29736558256021506, "equal": 0.29736558256021506}}, {"docstring": "The antidiagonal of `n` does not contain duplicate entries.\n", "keywords": {"duplicate entries": 0.04940384002065631, "entries": 0.15831692877998726, "antidiagonal": 0.29736558256021506, "duplicate": 0.29736558256021506}}, {"docstring": "The bijection `order_emb_of_fin s h` sends `0` to the minimum of `s`.\n", "keywords": {"order": 0.04491197687864554, "emb": 0.04491197687864554, "sends": 0.04491197687864554, "bijection": 0.09568045026443411, "fin": 0.09568045026443411, "minimum": 0.15831692877998726}}, {"docstring": "The canonical injection from the type to the free group is an injection.\n", "keywords": {"free group": 0.019557279302732804, "canonical injection": 0.02635223776265893, "injection": 0.09269208833952335, "canonical": 0.1384995633470844, "type": 0.1384995633470844, "free": 0.1384995633470844, "group": 0.1384995633470844}}, {"docstring": " If `\u03b1` has no zero divisors, then for elements `a, b : \u03b1`, `a * b` equals zero iff so is `b * a`.\n", "keywords": {"equals zero iff": 0.00899321792126428, "divisors": 0.0771485953923296, "elements": 0.0771485953923296, "equals": 0.0771485953923296, "iff": 0.1155310835876123}}, {"docstring": " If `A \u2286 B`, then `A \u2264 B` in the colex order. Note the converse does not hold, as `\u2286` is not a linear order.\n", "keywords": {"colex order": 0.041258687514342134, "linear order": 0.10423034356167891, "order": 0.1069960715371627, "Note the converse": 0.17375126351151512, "colex": 0.18516501832552387, "Note": 0.33559480906340394, "hold": 0.33559480906340394, "converse": 0.44109960011701166, "linear": 0.44109960011701166}}, {"docstring": "We can approximate `a / b : L` with `q / r`, where `r` has finitely many options for `L`.\n", "keywords": {"finitely many options": 0.02570861714399338, "approximate": 0.09568045026443411, "finitely": 0.15831692877998726, "options": 0.15831692877998726}}, {"docstring": "In a monoid, an element a divides an element b iff all associates of `a` divide `b`.\n", "keywords": {"iff all associates": 0.021754649297288254, "element b iff": 0.054870563172814704, "divides an element": 0.07321484742785422, "element": 0.07726414307411156, "monoid": 0.09856372721054514, "element a divides": 0.11674959517150914, "iff": 0.14591593823007556, "associates": 0.14591593823007556, "divides": 0.1992136697430011, "divide": 0.1992136697430011}}, {"docstring": "The p-adic norm of `p` is less than 1 if `1 < p`.  See also `padic_norm.padic_norm_p_lt_one_of_prime` for a version assuming `prime p`.\n", "keywords": {"p-adic norm": 0.05102418927928111, "norm": 0.14765014545490998, "version assuming": 0.15026214093214924, "prime": 0.15400643065643568, "p-adic": 0.1643991344743863, "padic": 0.232946730592177, "norm.padic": 0.232946730592177, "assuming": 0.32181149080910315, "version": 0.4059300471627769}}, {"docstring": "If `f` is monotone, `g` is antitone, and `f \u2264 g`, then for all `a`, `b` we have `f a \u2264 g b`.\n", "keywords": {"monotone": 0.0771485953923296, "antitone": 0.0771485953923296}}, {"docstring": "If `p` is prime, then `cyclotomic p R = \u2211 i in range p, X ^ i`.\n", "keywords": {"prime": 0.0771485953923296, "cyclotomic": 0.0771485953923296, "range": 0.1155310835876123}}, {"docstring": " A continuous function is box-integrable with respect to any locally finite measure.  This is true for any volume with bounded variation.\n", "keywords": {"locally finite measure": 0.005401660759706154, "finite measure": 0.02541909697430123, "continuous function": 0.04188746641162499, "function is box-integrable": 0.04188746641162499, "box-integrable with respect": 0.04188746641162499, "locally finite": 0.04188746641162499, "measure": 0.12363091320521931, "bounded variation": 0.18075564686791562, "continuous": 0.2005079697193566, "function": 0.2005079697193566, "box-integrable": 0.2005079697193566, "respect": 0.2005079697193566, "locally": 0.2005079697193566, "finite": 0.2005079697193566, "volume with bounded": 0.2766850298235749, "variation": 0.32883716426354986, "true": 0.46553351027698087, "volume": 0.46553351027698087, "bounded": 0.46553351027698087}}, {"docstring": "A dependent version of `add_subgroup.closure_induction`.\n", "keywords": {"add": 0.04491197687864554, "subgroup.closure": 0.04491197687864554, "induction": 0.04491197687864554, "dependent version": 0.09700399286574239, "dependent": 0.29736558256021506, "version": 0.29736558256021506}}, {"docstring": "Every finite convergent corresponds to a rational number.\n", "keywords": {"finite convergent corresponds": 0.03339840940482845, "rational number": 0.04940384002065631, "finite convergent": 0.09700399286574239, "convergent corresponds": 0.09700399286574239, "number": 0.15831692877998726, "finite": 0.29736558256021506, "convergent": 0.29736558256021506, "corresponds": 0.29736558256021506, "rational": 0.29736558256021506}}, {"docstring": " H\u00f6lder inequality: the scalar product of two functions is bounded by the product of their `L^p` and `L^q` norms when `p` and `q` are conjugate exponents. Version for sums over finite sets, with `\u211d\u22650\u221e`-valued functions.\n", "keywords": {"H\u00f6lder inequality": 0.024025565434766742, "conjugate exponents": 0.038712704770480444, "scalar product": 0.06260426827505094, "product": 0.12106698562302544, "H\u00f6lder": 0.1531727145735673, "inequality": 0.1531727145735673, "norms": 0.1531727145735673, "exponents": 0.1531727145735673, "valued functions": 0.21824965394572685, "functions": 0.23216465691767033, "scalar": 0.2433193585127945, "bounded": 0.2433193585127945, "conjugate": 0.2433193585127945, "functions is bounded": 0.24763572414817117, "Version for sums": 0.2555837115374544, "finite sets": 0.2555837115374544, "sums over finite": 0.38571507274593425, "Version": 0.3858257107143767, "sets": 0.3858257107143767, "valued": 0.3858257107143767}}, {"docstring": "Being `C^n` is a local property.\n", "keywords": {"local property": 0.04940384002065631, "property": 0.15831692877998726, "local": 0.29736558256021506}}, {"docstring": "Any power of an `M`-regular element is `M`-regular.\n", "keywords": {"regular element": 0.03040783387545046, "regular": 0.07571113878390312, "power": 0.19488865479360015, "element": 0.19488865479360015}}, {"docstring": "Engel's theorem.\n", "keywords": {"Engel theorem": 0.02570861714399338, "Engel": 0.15831692877998726, "theorem": 0.15831692877998726}}, {"docstring": " The `n`th coefficient of `id \ud835\udd5c E` is the identity when `n = 1`. We state this in a dependent way, as it will often appear in this form.\n", "keywords": {"coefficient": 0.2005079697193566, "identity": 0.2005079697193566, "form": 0.32883716426354986, "state": 0.46553351027698087, "dependent": 0.46553351027698087}}, {"docstring": " A geometric series in a complete normed ring is summable. Proved above (same name, different namespace) for not-necessarily-complete normed fields.\n", "keywords": {"complete normed ring": 0.03265300337069717, "ring is summable": 0.036378432021021534, "geometric series": 0.059260526860675365, "complete normed": 0.12062203836488773, "normed ring": 0.12062203836488773, "summable": 0.14840353637699516, "normed fields": 0.2071197415663574, "normed": 0.22753915903640465, "geometric": 0.2365273465835411, "series": 0.2365273465835411, "complete": 0.2365273465835411, "ring": 0.2365273465835411, "Proved": 0.3770378920346049, "namespace": 0.3770378920346049, "fields": 0.3770378920346049}}, {"docstring": "**Alias** of the reverse direction of antilipschitz_with_iff_le_mul_nndist`.\n", "keywords": {"direction of antilipschitz": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "mul": 0.04491197687864554, "nndist": 0.04491197687864554, "antilipschitz": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "The exponential characteristic is one iff the characteristic is zero.\n", "keywords": {"exponential characteristic": 0.04437656514447953, "iff the characteristic": 0.09916653097095413, "characteristic": 0.10901343189444501, "exponential": 0.19488865479360015, "iff": 0.19488865479360015}}, {"docstring": "Every chain is contained in a maximal chain. This generalizes Hausdorff's maximality principle.\n", "keywords": {"maximal chain": 0.08303696244858728, "Hausdorff maximality principle": 0.09159149954937451, "generalizes Hausdorff maximality": 0.1410071936802689, "chain": 0.1575511279697302, "chain is contained": 0.17314790275908196, "generalizes Hausdorff": 0.18201620829691315, "Hausdorff maximality": 0.18201620829691315, "contained": 0.2433193585127945, "maximal": 0.2433193585127945, "maximality principle": 0.25558371153745446, "Hausdorff": 0.29187056346848844, "principle": 0.3858257107143767, "generalizes": 0.5275897320195265, "maximality": 0.5275897320195265}}, {"docstring": "Composing a `prod.map` with another `prod.map` is equal to a single `prod.map` of composed functions.\n", "keywords": {"prod.map": 0.012355538996295002, "composed functions": 0.015444495608482297, "Composing": 0.10143744007623053, "single": 0.10143744007623053, "functions": 0.10143744007623053, "equal": 0.1499406051001382, "composed": 0.1499406051001382}}, {"docstring": " If one multiplies by `c i` the coordinates in a finset `s`, then the image under a multilinear map is multiplied by `\u220f i in s, c i`. This is mainly an auxiliary statement to prove the result when `s = univ`, given in `map_smul_univ`, although it can be useful in its own right as it does not require the index set `\u03b9` to be finite.\n", "keywords": {"multilinear map": 0.04299858029211815, "univ": 0.07370969073461107, "map is multiplied": 0.0950813502999256, "finset": 0.10954357103952082, "index set": 0.1286987464177552, "map": 0.1369729561919034, "multiplies": 0.15048928354683433, "coordinates": 0.15048928354683433, "image": 0.15048928354683433, "multilinear": 0.15048928354683433, "multiplied": 0.15048928354683433, "auxiliary statement": 0.16970639310928604, "statement to prove": 0.16970639310928604, "prove the result": 0.16970639310928604, "require the index": 0.16970639310928604, "smul": 0.21472745434875906, "set": 0.2993543712465874, "finite": 0.2993543712465874, "auxiliary": 0.3808997343782561, "statement": 0.3808997343782561}}, {"docstring": "The gauge is always nonnegative.\n", "keywords": {"nonnegative": 0.15831692877998726, "gauge": 0.29736558256021506}}, {"docstring": "The frontier of a closed set has no interior point.\n", "keywords": {"interior point": 0.04940384002065631, "closed set": 0.09700399286574239, "point": 0.15831692877998726, "frontier": 0.29736558256021506, "closed": 0.29736558256021506, "set": 0.29736558256021506, "interior": 0.29736558256021506}}, {"docstring": "Product of a multiset of elements in a subring of a `comm_ring` is in the subring.\n", "keywords": {"multiset of elements": 0.01904688389482227, "comm": 0.05393656033701752, "ring": 0.05393656033701752, "subring": 0.09106811155038866, "Product": 0.09202664026077896, "multiset": 0.1367145963576765, "elements": 0.1367145963576765}}, {"docstring": "An isometry from a metric space is an embedding\n", "keywords": {"metric space": 0.02570861714399338, "embedding": 0.09568045026443411, "isometry": 0.15831692877998726, "metric": 0.15831692877998726, "space": 0.15831692877998726}}, {"docstring": "The fundamental property of the adjoint.\n", "keywords": {"fundamental property": 0.02570861714399338, "adjoint": 0.09568045026443411, "fundamental": 0.15831692877998726, "property": 0.15831692877998726}}, {"docstring": "The quotient valuation on R/J has support supp(v)/J if J \u2286 supp v.\n", "keywords": {"quotient valuation": 0.020225813225353943, "support supp": 0.027430531955772185, "supp": 0.094808423351325, "quotient": 0.1408007092310104, "valuation": 0.1408007092310104, "support": 0.1408007092310104}}, {"docstring": " Two parametrizations `order_emb_of_fin` of the same set take the same value on `i` and `j` if and only if `i = j`. Since they can be defined on a priori not defeq types `fin k` and `fin l` (although necessarily `k = l`), the conclusion is rather written `(i : \u2115) = (j : \u2115)`.\n", "keywords": {"order": 0.07999758143476218, "emb": 0.07999758143476218, "fin": 0.08240681504309437, "parametrizations": 0.13388740268453142, "defeq types": 0.1895720872392319, "set": 0.19454737979353426, "priori not defeq": 0.2628003803679277, "types": 0.349331689244158, "necessarily": 0.349331689244158, "written": 0.349331689244158, "defined": 0.4561898757446447, "priori": 0.4561898757446447, "defeq": 0.4561898757446447, "conclusion": 0.4561898757446447}}, {"docstring": "The cartesian product of `C^n` functions at a point in a domain is `C^n`.\n", "keywords": {"cartesian product": 0.02570861714399338, "functions": 0.09568045026443411, "cartesian": 0.15831692877998726, "product": 0.15831692877998726, "point": 0.15831692877998726, "domain": 0.15831692877998726}}, {"docstring": " In a linearly ordered field with the order topology, if `f` tends to a positive constant `C` and `g` tends to `at_bot` then `f * g` tends to `at_bot`.\n", "keywords": {"linearly ordered field": 0.002535831815717203, "order topology": 0.012240009979360944, "positive constant": 0.012240009979360944, "linearly ordered": 0.018310930906343142, "ordered field": 0.018310930906343142, "bot": 0.019053917256533312, "topology": 0.09017440044927587, "constant": 0.09017440044927587, "linearly": 0.13409574860218185, "ordered": 0.13409574860218185, "field": 0.13409574860218185, "order": 0.13409574860218185, "positive": 0.13409574860218185}}, {"docstring": "A preadditive category with finite products has finite biproducts.\n", "keywords": {"finite biproducts": 0.0325194426147957, "preadditive category": 0.03663237450220032, "finite products": 0.05417025203414716, "biproducts": 0.11521656054299435, "category with finite": 0.11793310824193863, "products has finite": 0.11793310824193863, "finite": 0.13667842094541144, "preadditive": 0.1879836817695587, "category": 0.1879836817695587, "products": 0.1879836817695587}}, {"docstring": " Two elements `a` and `b` are `M`-regular if and only if both products `a * b` and `b * a` are `M`-regular.\n", "keywords": {"regular": 0.055127829619426576, "elements": 0.09713402394201612, "products": 0.09713402394201612}}, {"docstring": " If a function `f` is continuous on a convex set `D \u2286 \u211d`, is twice differentiable on its interior, and `f''` is strictly negative on the interior, then `f` is strictly concave on `D`. Note that we don't require twice differentiability explicitly as it already implied by the second derivative being strictly negative.\n", "keywords": {"convex set": 0.021256456601509544, "strictly negative": 0.03386305231509576, "strictly concave": 0.04496900680900701, "interior": 0.05882981371070782, "strictly": 0.08507754384536713, "function": 0.12344751934762334, "set": 0.12344751934762334, "negative": 0.1242596261049861, "continuous": 0.16860625721283634, "convex": 0.16860625721283634, "differentiable": 0.16860625721283634, "concave": 0.16860625721283634, "require twice differentiability": 0.2059596438445089, "differentiability explicitly": 0.2059596438445089, "derivative being strictly": 0.29143958455763597, "Note": 0.32846345804056937, "require": 0.4132612439789689, "differentiability": 0.4132612439789689, "explicitly": 0.4132612439789689, "implied": 0.4132612439789689}}, {"docstring": "A block matrix `A.from_blocks B C D` is hermitian,    if `A` and `D` are hermitian and `B\u1d34 = C`.\n", "keywords": {"A.from": 0.03625524040669144, "block matrix": 0.0381667238781621, "matrix": 0.12363091320521931, "hermitian": 0.14868279128010753, "block": 0.29736558256021506, "blocks": 0.29736558256021506}}, {"docstring": " If one joins a list of lists and then splits the join along the right composition, one gets back the original list of lists.\n", "keywords": {"back the original": 0.018446453876916073, "original list": 0.025330807356670895, "splits the join": 0.05832235502765556, "list of lists": 0.06322102116798006, "list": 0.09178414886044307, "lists": 0.09178414886044307, "composition": 0.09746790692633854, "splits": 0.13458211372284087, "back": 0.13458211372284087, "original": 0.13458211372284087, "joins a list": 0.16209136996257803, "joins": 0.17934044918831277, "join": 0.17934044918831277}}, {"docstring": "`k \u2022 circulant v` is another circulant matrix `circulant (k \u2022 v)`.\n", "keywords": {"circulant matrix": 0.03426936640311118, "circulant": 0.09912186085340502, "matrix": 0.11142476118001256}}, {"docstring": " If `M / S / R` is a scalar tower, and `M / R` is Noetherian, then `M / S` is also noetherian.\n", "keywords": {"scalar tower": 0.014176630379520855, "Noetherian": 0.03894747678624248, "tower": 0.09713402394201612, "scalar": 0.14390902704051098}}, {"docstring": "If any two objects in an nonempty category are linked by a sequence of (potentially reversed) morphisms, then J is connected.  The converse of `exists_zigzag'`.\n", "keywords": {"potentially reversed": 0.01552184797949213, "nonempty category": 0.04188746641162499, "category are linked": 0.04188746641162499, "morphisms": 0.05899937629682816, "potentially": 0.12363091320521931, "reversed": 0.12363091320521931, "connected": 0.12363091320521931, "exists": 0.17881754828257995, "zigzag": 0.17881754828257995, "objects": 0.2005079697193566, "nonempty": 0.2005079697193566, "category": 0.2005079697193566, "linked": 0.2005079697193566, "sequence": 0.2005079697193566, "converse": 0.46553351027698087}}, {"docstring": " If `R` is a Jacobson ring, then maximal ideals in the localization at `y` correspond to maximal ideals in the original ring `R` that don't contain `y`. This lemma gives the correspondence in the particular case of an ideal and its map. See `le_rel_iso_of_maximal` for the more general statement, and the reverse of this implication\n", "keywords": {"Jacobson ring": 0.007901623753342212, "original ring": 0.018517244292044495, "maximal ideals": 0.03725814800528872, "ring": 0.05495786029567015, "Jacobson": 0.07132444320660393, "maximal": 0.10426863344211375, "ideals": 0.11084939339437475, "correspond to maximal": 0.12242882597212207, "correspond": 0.131745406353862, "localization": 0.1654048189856117, "original": 0.1654048189856117, "ideal": 0.2216987867887495, "general statement": 0.2779016162819512, "map": 0.34511633518738344, "rel": 0.36065041874897263, "iso": 0.36065041874897263, "lemma": 0.4076923676506278, "correspondence": 0.4076923676506278, "case": 0.4076923676506278, "statement": 0.4343214881463378}}, {"docstring": "See also `is_open_iff_open_ball_subset`.\n", "keywords": {"open": 0.020602899695743707, "iff": 0.055708263664958506, "ball": 0.055708263664958506, "subset": 0.055708263664958506}}, {"docstring": " Any matrix can be reduced to diagonal form by elementary operations. Formulated here on `Type 0` because we will make an induction using `fin r`. See `exists_list_transvec_mul_mul_list_transvec_eq_diagonal` for the general version (which follows from this one and reindexing).\n", "keywords": {"elementary operations": 0.055065454100602255, "form by elementary": 0.08839556286481262, "list": 0.11719873936673093, "transvec": 0.11719873936673093, "mul": 0.11719873936673093, "Type": 0.14386117287204594, "operations": 0.1831377905260319, "diagonal form": 0.20998740419359957, "matrix": 0.28498490135981175, "reduced": 0.28498490135981175, "form": 0.28498490135981175, "elementary": 0.28498490135981175, "diagonal": 0.3044812461737101, "exists": 0.3351932739850602, "reduced to diagonal": 0.37910928463463855, "Formulated": 0.43777575298818777, "fin": 0.43777575298818777, "make an induction": 0.5084719082156968, "version": 0.5314935412320358, "reindexing": 0.5314935412320358}}, {"docstring": " Over a characteristic-zero division ring, the centroids of two faces of a simplex are equal if and only if those faces are given by the same subset of points.\n", "keywords": {"characteristic-zero division ring": 0.0016481455113524755, "division ring": 0.012051537142168538, "subset of points": 0.012051537142168538, "characteristic-zero division": 0.018034246898548233, "simplex are equal": 0.018034246898548233, "faces": 0.08782297807514622, "ring": 0.08946888050496495, "points": 0.08946888050496495, "characteristic-zero": 0.13309686053898662, "division": 0.13309686053898662, "centroids": 0.13309686053898662, "simplex": 0.13309686053898662, "equal": 0.13309686053898662, "subset": 0.13309686053898662}}, {"docstring": " A Lie group is a topological group. This is not an instance for technical reasons, see note [Design choices about smooth algebraic structures].\n", "keywords": {"Lie group": 0.032304811308782995, "topological group": 0.07541768859639163, "Lie": 0.1041608709219513, "Design choices": 0.12214196540058082, "group": 0.15021892821003216, "smooth algebraic structures": 0.1793278604158236, "Design": 0.2117717665214912, "topological": 0.23342178605055275, "technical reasons": 0.23717973302929607, "algebraic structures": 0.23717973302929607, "instance for technical": 0.3590259390453561, "choices about smooth": 0.3590259390453561, "smooth algebraic": 0.3590259390453561, "reasons": 0.37298875481161287, "note": 0.37298875481161287, "structures": 0.37298875481161287, "instance": 0.5139833378573802, "technical": 0.5139833378573802, "choices": 0.5139833378573802, "smooth": 0.5139833378573802}}, {"docstring": "The minimal distance to a set is uniformly continuous in point\n", "keywords": {"continuous in point": 0.04940384002065631, "minimal distance": 0.09700399286574239, "set is uniformly": 0.09700399286574239, "uniformly continuous": 0.09700399286574239, "point": 0.15831692877998726, "minimal": 0.29736558256021506, "distance": 0.29736558256021506, "set": 0.29736558256021506, "uniformly": 0.29736558256021506, "continuous": 0.29736558256021506}}, {"docstring": " If `R` is a Jacobson ring, then maximal ideals in the localization at `y` correspond to maximal ideals in the original ring `R` that don't contain `y`. This lemma gives the correspondence in the particular case of an ideal and its comap. See `le_rel_iso_of_maximal` for the more general relation isomorphism\n", "keywords": {"Jacobson ring": 0.009323788067246905, "original ring": 0.022419643284988067, "maximal ideals": 0.04859667419647526, "ring": 0.06061504429721792, "Jacobson": 0.07619938422861658, "maximal": 0.11732455407968145, "ideals": 0.1258384080454163, "correspond": 0.13958966861602132, "correspond to maximal": 0.14138939169708134, "localization": 0.18087939261170255, "original": 0.18087939261170255, "ideal": 0.2516768160908326, "general relation isomorphism": 0.2527142350436936, "relation isomorphism": 0.31217755130252217, "comap": 0.36039166644303305, "rel": 0.3630911664878883, "iso": 0.3630911664878883, "general relation": 0.3859680269289475, "lemma": 0.43404576304392806, "correspondence": 0.43404576304392806}}, {"docstring": "The elements of a set of sets partitioning \u03b1 are the equivalence classes of the    equivalence relation defined by the set of sets.\n", "keywords": {"equivalence relation defined": 0.002607936782193081, "relation defined": 0.017959788475527386, "equivalence classes": 0.019007097541816436, "equivalence relation": 0.019007097541816436, "sets partitioning": 0.024300231834620836, "set of sets": 0.06040631999937623, "equivalence": 0.0702139331695686, "set": 0.08930337103629704, "sets": 0.08930337103629704, "elements": 0.1328266737880457, "partitioning": 0.1328266737880457, "classes": 0.1328266737880457, "relation": 0.1328266737880457, "defined": 0.1328266737880457}}, {"docstring": " The set of right differentiability points of a function, with derivative in a given complete set, is Borel-measurable.\n", "keywords": {"differentiability points": 0.03498702377830618, "complete set": 0.05135123883758033, "Borel-measurable": 0.06257809066078279, "function": 0.11246769819744629, "set": 0.13282721021560867, "differentiability": 0.1838594885424691, "points": 0.1838594885424691, "derivative": 0.1838594885424691, "complete": 0.1838594885424691}}, {"docstring": "The main characterization theorem for multiplicative principal ordinals.\n", "keywords": {"multiplicative principal ordinals": 0.016559150827736194, "main characterization theorem": 0.03339840940482845, "principal ordinals": 0.04940384002065631, "main characterization": 0.09700399286574239, "characterization theorem": 0.09700399286574239, "theorem for multiplicative": 0.09700399286574239, "multiplicative principal": 0.09700399286574239, "ordinals": 0.15831692877998726, "main": 0.29736558256021506, "characterization": 0.29736558256021506, "theorem": 0.29736558256021506, "multiplicative": 0.29736558256021506, "principal": 0.29736558256021506}}, {"docstring": "The maximum degree in the graph is at least the degree of any particular vertex.\n", "keywords": {"maximum degree": 0.027430531955772185, "degree": 0.094808423351325, "vertex": 0.09492398510093508, "maximum": 0.1408007092310104, "graph": 0.1408007092310104}}, {"docstring": "Product of a multiset of elements in an intermediate field is in the intermediate_field.\n", "keywords": {"multiset of elements": 0.040564923574392765, "intermediate field": 0.09279441717942427, "Product": 0.12156210109285605, "intermediate": 0.14570071893270706, "field": 0.14570071893270706, "multiset": 0.19744254481508877, "elements": 0.19744254481508877}}, {"docstring": "A unique factorization domain with at least one irreducible element in which all irreducible elements are associated is a discrete valuation ring.\n", "keywords": {"discrete valuation ring": 0.0046062759746501175, "unique factorization domain": 0.007693932974338547, "valuation ring": 0.022885248721446715, "unique factorization": 0.037831312533597124, "factorization domain": 0.037831312533597124, "discrete valuation": 0.037831312533597124, "irreducible element": 0.046934599823556786, "irreducible": 0.10586606907408062, "ring": 0.11718348279991213, "unique": 0.19092478917347616, "factorization": 0.19092478917347616, "domain": 0.19092478917347616, "discrete": 0.19092478917347616, "valuation": 0.19092478917347616, "element": 0.21173213814816125, "elements": 0.21173213814816125}}, {"docstring": " If `g` semiconjugates `fa` to `fb`, then it sends fixed points of `fa` to fixed points of `fb`.\n", "keywords": {"sends fixed points": 0.00800109250015267, "fixed points": 0.018650942614307144, "sends fixed": 0.04771708711059453, "semiconjugates": 0.05899937629682816, "points": 0.07915846438999363, "fixed": 0.11357121248292479, "sends": 0.2005079697193566}}, {"docstring": "Uniformisers exist in a DVR\n", "keywords": {"Uniformisers exist": 0.04940384002065631, "DVR": 0.08596317751626563, "Uniformisers": 0.15831692877998726, "exist": 0.29736558256021506}}, {"docstring": " Assumes right covariance. The lemma assuming left covariance is `left.one_le_mul`.\n", "keywords": {"Assumes right covariance": 0.15195679415702995, "Assumes": 0.1531727145735673, "left.one": 0.2182620423168793, "mul": 0.2182620423168793, "covariance": 0.23216465691767033, "assuming left covariance": 0.2636654148178027, "lemma assuming left": 0.3201847146816566, "left covariance": 0.32446011851782974, "lemma assuming": 0.38571507274593436, "assuming left": 0.38571507274593436, "lemma": 0.5275897320195265, "assuming": 0.5275897320195265, "left": 0.5275897320195265}}, {"docstring": " Given a closed set `S` in a compact T\u2080 space, there is some `x \u2208 S` such that `{x}` is closed.\n", "keywords": {"closed set": 0.03378800767844735, "space": 0.055708263664958506, "set": 0.11718348279991213, "compact": 0.11718348279991213, "closed": 0.13945519496053638}}, {"docstring": "**Alias** of the forward direction of inv_le'`.\n", "keywords": {"direction of inv": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "inv": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " H\u00f6lder inequality: the scalar product of two functions is bounded by the product of their `L^p` and `L^q` norms when `p` and `q` are conjugate exponents. Version for sums over finite sets, with real-valued nonnegative functions.\n", "keywords": {"H\u00f6lder inequality": 0.02371261095394404, "conjugate exponents": 0.038228265724809404, "scalar product": 0.06174525295667715, "product": 0.12018829219117252, "H\u00f6lder": 0.15219509685315075, "inequality": 0.15219509685315075, "norms": 0.15219509685315075, "exponents": 0.15219509685315075, "functions": 0.23122513593216523, "scalar": 0.2419307581620854, "bounded": 0.2419307581620854, "conjugate": 0.2419307581620854, "functions is bounded": 0.24522062421271126, "Version for sums": 0.2529606141172602, "finite sets": 0.2529606141172602, "real-valued nonnegative functions": 0.2592309533006177, "nonnegative functions": 0.3212009200974368, "sums over finite": 0.3819154413401555, "real-valued nonnegative": 0.3819154413401555, "Version": 0.3840365975713041}}, {"docstring": " A metric space is second countable if one can reconstruct up to any `\u03b5>0` any element of the space from countably many data.\n", "keywords": {"countably many data": 0.021114872146320036, "metric space": 0.05135123883758033, "space from countably": 0.11245662598947329, "data": 0.11246769819744629, "space": 0.13282721021560867, "metric": 0.1838594885424691, "countable": 0.1838594885424691, "reconstruct": 0.1838594885424691, "element": 0.1838594885424691, "countably": 0.1838594885424691}}, {"docstring": "Assumes left covariance.\n", "keywords": {"Assumes left covariance": 0.008321268142839145, "Assumes left": 0.04940384002065631, "left covariance": 0.04940384002065631, "Assumes": 0.15831692877998726, "covariance": 0.15831692877998726, "left": 0.29736558256021506}}, {"docstring": "If a function `f` vanishes outside of a finite set `s`, then it `has_sum` `\u2211 b in s, f b`.\n", "keywords": {"finite set": 0.015380821171891606, "sum": 0.04491197687864554, "function": 0.09568045026443411, "vanishes": 0.09568045026443411, "set": 0.09568045026443411, "finite": 0.15831692877998726}}, {"docstring": " If a function has a Taylor series at order at least `1` on a neighborhood of `x`, then it is differentiable at `x`.\n", "keywords": {"Taylor series": 0.007743432063478832, "series at order": 0.013527995261974615, "Taylor": 0.06650965107397505, "function": 0.1155310835876123, "series": 0.1155310835876123, "order": 0.1155310835876123, "neighborhood": 0.1155310835876123, "differentiable": 0.1155310835876123}}, {"docstring": "The product of two circulant matrices `circulant v` and `circulant w` is    the circulant matrix generated by `mul_vec (circulant v) w`.\n", "keywords": {"circulant matrix generated": 0.0033711276133070412, "matrix generated": 0.014908441218643664, "circulant matrices": 0.020235696225524014, "circulant matrix": 0.026829673596225744, "circulant": 0.04311657827144195, "mul": 0.06573924075022843, "vec": 0.06573924075022843, "matrices": 0.09200328713354768, "product": 0.12120001855939953, "matrix": 0.12120001855939953, "generated": 0.12120001855939953}}, {"docstring": "The evaluation map is continuous, as a joint function of `u` and `x`\n", "keywords": {"map is continuous": 0.04940384002065631, "evaluation map": 0.09700399286574239, "joint function": 0.09700399286574239, "continuous": 0.15831692877998726, "evaluation": 0.29736558256021506, "map": 0.29736558256021506, "joint": 0.29736558256021506, "function": 0.29736558256021506}}, {"docstring": "Cauchy\u2013Schwarz inequality with norm\n", "keywords": {"Schwarz inequality": 0.026233073037508336, "Cauchy": 0.04491197687864554, "inequality with norm": 0.04940384002065631, "Schwarz": 0.08596317751626563, "norm": 0.15831692877998726, "inequality": 0.29736558256021506}}, {"docstring": "**Alias** of norm_sub_sq`.\n", "keywords": {"Alias": 0.030396371632413578, "norm": 0.15831692877998726}}, {"docstring": " When indexed by only two distinct elements, `direct_sum.is_internal` implies the two submodules are complementary. Over a `ring R`, this is true as an iff, as `direct_sum.is_internal_iff_is_compl`. -\n", "keywords": {"direct": 0.05571241802550196, "sum.is": 0.05571241802550196, "internal": 0.05571241802550196, "distinct elements": 0.05960414506115183, "submodules are complementary": 0.05960414506115183, "elements": 0.19061029866446144, "implies": 0.19061029866446144, "complementary": 0.19061029866446144, "iff": 0.23581103279393326, "compl": 0.26659995354143634, "indexed": 0.2951117168078354, "distinct": 0.2951117168078354, "submodules": 0.2951117168078354, "ring": 0.44991556091976015, "true": 0.5925102215508762}}, {"docstring": "`exp (-b * x)` is integrable on `(a, \u221e)`.\n", "keywords": {"exp": 0.04491197687864554, "integrable": 0.29736558256021506}}, {"docstring": "`cyclotomic' n K` splits.\n", "keywords": {"cyclotomic": 0.04491197687864554, "splits": 0.04491197687864554}}, {"docstring": "Mapping under `id` does not change a vector.\n", "keywords": {"change a vector": 0.04940384002065631, "Mapping": 0.15831692877998726, "vector": 0.15831692877998726, "change": 0.29736558256021506}}, {"docstring": " If `A` is a finitely presented `R`-algebra, then `mv_polynomial (fin n) A` is finitely presented as `R`-algebra.\n", "keywords": {"finitely presented": 0.013345420769058886, "algebra": 0.022926948811930963, "polynomial": 0.059806314729142, "finitely": 0.08061786523087176, "presented": 0.08061786523087176, "fin": 0.10159647344475727}}, {"docstring": " This lemma shows that `restrict` and `to_outer_measure` commute. Note that the LHS has a restrict on measures and the RHS has a restrict on outer measures.\n", "keywords": {"lemma shows": 0.05152528077015581, "commute": 0.09284294967949627, "restrict": 0.09513935212199048, "outer": 0.2001638585619832, "lemma": 0.22136060049957015, "shows": 0.22136060049957015, "outer measures": 0.23378195198886823, "measures": 0.23666111801143935, "LHS": 0.259759454590502, "RHS": 0.259759454590502, "restrict on outer": 0.3173578944289816, "Note": 0.38722201669702777, "restrict on measures": 0.41973889796658254, "measure": 0.4733222360228787}}, {"docstring": "A rewrite lemma for `padic_val_rat p q` when `q` is expressed in terms of `rat.mk`.\n", "keywords": {"rewrite lemma": 0.02570861714399338, "expressed in terms": 0.02570861714399338, "padic": 0.04491197687864554, "val": 0.04491197687864554, "rat.mk": 0.04491197687864554, "rat": 0.09568045026443411, "rewrite": 0.15831692877998726, "lemma": 0.15831692877998726, "expressed": 0.15831692877998726, "terms": 0.15831692877998726}}, {"docstring": "The nilpotency class of a nilpotent `G` is equal to the length of the lower central series.\n", "keywords": {"lower central series": 0.0010606143890052174, "central series": 0.00899321792126428, "nilpotency class": 0.013527995261974615, "lower central": 0.013527995261974615, "nilpotent": 0.0771485953923296, "series": 0.0771485953923296, "nilpotency": 0.1155310835876123, "class": 0.1155310835876123, "equal": 0.1155310835876123, "length": 0.1155310835876123, "lower": 0.1155310835876123, "central": 0.1155310835876123}}, {"docstring": " If `f` has a local max on `s` at `a`, `f'` is a derivative of `f` at `a` within `s`, and both `y` and `-y` belong to the positive tangent cone of `s` at `a`, then `f' y \u2264 0`.\n", "keywords": {"positive tangent cone": 0.0006133431289448148, "local max": 0.00717258304785508, "positive tangent": 0.00717258304785508, "tangent cone": 0.00717258304785508, "belong": 0.06341998722529081, "local": 0.08438900089923473, "max": 0.08438900089923473, "derivative": 0.08438900089923473, "positive": 0.08438900089923473, "tangent": 0.08438900089923473, "cone": 0.08438900089923473}}, {"docstring": "Expand the square\n", "keywords": {"Expand the square": 0.02570861714399338, "Expand": 0.15831692877998726, "square": 0.15831692877998726}}, {"docstring": "An intermediate field is closed under scalar multiplication.\n", "keywords": {"scalar multiplication": 0.04940384002065631, "intermediate field": 0.09700399286574239, "field is closed": 0.09700399286574239, "closed under scalar": 0.09700399286574239, "multiplication": 0.15831692877998726, "intermediate": 0.29736558256021506, "field": 0.29736558256021506, "closed": 0.29736558256021506, "scalar": 0.29736558256021506}}, {"docstring": " For any given tree `t` of atoms and any reflected expression `r`, the Horner form of `r` is a valid csring expression, and under `t`, the Horner form evaluates to the same thing as `r`.\n", "keywords": {"Horner form evaluates": 0.0013260881986010356, "valid csring expression": 0.002329073644897968, "Horner form": 0.0045163936061276755, "reflected expression": 0.015793097091739112, "csring expression": 0.015793097091739112, "valid csring": 0.020803568001713568, "form evaluates": 0.02183109509090737, "Horner": 0.029908037909185274, "expression": 0.05445455692328286, "form": 0.07482876671341211, "tree": 0.09631441144923199, "atoms": 0.14275713507656845, "reflected": 0.14275713507656845, "valid": 0.14275713507656845, "csring": 0.14275713507656845, "evaluates": 0.14275713507656845, "thing": 0.14275713507656845}}, {"docstring": " In a linearly ordered field with the order topology, if `f` tends to a negative constant `C` and `g` tends to `at_bot` then `f * g` tends to `at_top`.\n", "keywords": {"linearly ordered field": 0.0016012214736657916, "order topology": 0.00899321792126428, "negative constant": 0.00899321792126428, "linearly ordered": 0.013527995261974615, "ordered field": 0.013527995261974615, "bot": 0.04491197687864554, "top": 0.04491197687864554, "topology": 0.0771485953923296, "constant": 0.0771485953923296, "linearly": 0.1155310835876123, "ordered": 0.1155310835876123, "field": 0.1155310835876123, "order": 0.1155310835876123, "negative": 0.1155310835876123}}, {"docstring": " To show a category is a `initial_mono_class` it suffices to show the unique morphism from an initial object to a terminal object is a monomorphism.\n", "keywords": {"suffices to show": 0.014052048455559032, "unique morphism": 0.014114791577289064, "terminal object": 0.01778182519769534, "initial object": 0.022422621616740322, "show a category": 0.03482139782907152, "show the unique": 0.03482139782907152, "mono": 0.05611144792238854, "class": 0.05611144792238854, "show": 0.058729421122071655, "initial": 0.07404538123493588, "object": 0.07404538123493588, "monomorphism": 0.08499157470006824, "category": 0.1179760024298328, "suffices": 0.1179760024298328, "unique": 0.1179760024298328, "morphism": 0.1179760024298328, "terminal": 0.1179760024298328}}, {"docstring": "`matrix.is_diag.diagonal_diag` as an iff.\n", "keywords": {"matrix.is": 0.04491197687864554, "diag.diagonal": 0.04491197687864554, "diag": 0.04491197687864554, "iff": 0.15831692877998726}}, {"docstring": "The product of a list of elements of a submonoid is an element of the submonoid.\n", "keywords": {"list of elements": 0.0388160083175745, "submonoid": 0.07915846438999363, "product": 0.12363091320521931, "list": 0.12363091320521931, "elements": 0.12588232916135686, "element": 0.12588232916135686}}, {"docstring": "A restatement of `metric_space.tendsto_at_top` in terms of the norm.\n", "keywords": {"metric": 0.04491197687864554, "space.tendsto": 0.04491197687864554, "top": 0.04491197687864554, "norm": 0.09568045026443411, "restatement": 0.15831692877998726, "terms": 0.15831692877998726}}, {"docstring": "A non-commutative variant of `list.sum_reverse`\n", "keywords": {"list.sum": 0.04491197687864554, "reverse": 0.04491197687864554, "non-commutative variant": 0.09700399286574239, "non-commutative": 0.29736558256021506, "variant": 0.29736558256021506}}, {"docstring": "A nonzero left-invariant regular measure gives positive mass to any open set.\n", "keywords": {"nonzero left-invariant regular": 0.03339840940482845, "left-invariant regular measure": 0.03339840940482845, "open set": 0.04940384002065631, "nonzero left-invariant": 0.09700399286574239, "left-invariant regular": 0.09700399286574239, "regular measure": 0.09700399286574239, "measure gives positive": 0.09700399286574239, "positive mass": 0.09700399286574239, "set": 0.15831692877998726, "nonzero": 0.29736558256021506, "left-invariant": 0.29736558256021506, "regular": 0.29736558256021506, "measure": 0.29736558256021506, "positive": 0.29736558256021506, "mass": 0.29736558256021506, "open": 0.29736558256021506}}, {"docstring": " The `n+1`-th iterated derivative can be obtained by differentiating the `n`-th iterated derivative.\n", "keywords": {"iterated derivative": 0.018650942614307144, "obtained by differentiating": 0.04188746641162499, "iterated": 0.07915846438999363, "derivative": 0.11357121248292479, "obtained": 0.2005079697193566, "differentiating": 0.2005079697193566}}, {"docstring": "A group homomorphism sends 1 to 1.\n", "keywords": {"group homomorphism sends": 0.0025258761156662004, "homomorphism sends": 0.015380821171891606, "group homomorphism": 0.02570861714399338, "sends": 0.09568045026443411, "group": 0.15831692877998726, "homomorphism": 0.15831692877998726}}, {"docstring": " `p` is a Taylor series of `f` up to `n+1` if and only if `p.shift` is a Taylor series up to `n` for `p 1`, which is a derivative of `f`.\n", "keywords": {"Taylor series": 0.004937126134286941, "Taylor": 0.030880161776316133, "p.shift": 0.05899937629682816, "series": 0.07915846438999359, "derivative": 0.14832923246533666}}, {"docstring": "The function `x * log (1 + t / x)` tends to `t` at `+\u221e`.\n", "keywords": {"log": 0.04491197687864554, "function": 0.09568045026443411}}, {"docstring": "Postcomposing `f` with `prod.snd` is continuous\n", "keywords": {"Postcomposing": 0.04491197687864554, "prod.snd": 0.04491197687864554, "continuous": 0.15831692877998726}}, {"docstring": "**Alias** of the forward direction of left.inv_le_one_iff`.\n", "keywords": {"direction of left.inv": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "left.inv": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "The subgroup generated by an element of a group equals the set of integer number powers of    the element.\n", "keywords": {"integer number powers": 0.002477776488322723, "subgroup generated": 0.018034246898548233, "group equals": 0.018034246898548233, "equals the set": 0.018034246898548233, "set of integer": 0.018034246898548233, "integer number": 0.018034246898548233, "number powers": 0.018034246898548233, "element": 0.08782297807514622, "subgroup": 0.13309686053898662, "generated": 0.13309686053898662, "group": 0.13309686053898662, "equals": 0.13309686053898662, "set": 0.13309686053898662, "integer": 0.13309686053898662, "number": 0.13309686053898662, "powers": 0.13309686053898662}}, {"docstring": "The inductively defined equivalence closure of a binary relation r is the infimum    of the set of all equivalence relations containing r.\n", "keywords": {"inductively defined equivalence": 0.004023478032557392, "defined equivalence closure": 0.004023478032557392, "inductively defined": 0.020225813225353943, "defined equivalence": 0.027430531955772185, "equivalence closure": 0.027430531955772185, "binary relation": 0.027430531955772185, "equivalence relations": 0.03729549109900027, "equivalence": 0.094808423351325, "inductively": 0.1408007092310104, "defined": 0.1408007092310104, "closure": 0.1408007092310104, "binary": 0.1408007092310104, "infimum": 0.1408007092310104, "set": 0.1408007092310104, "relation": 0.18961684670265, "relations": 0.18961684670265}}, {"docstring": "Sum of a list of elements in an `add_subgroup` is in the `add_subgroup`.\n", "keywords": {"add": 0.02184815412823125, "subgroup": 0.02184815412823125, "list of elements": 0.040564923574392765, "Sum": 0.12156210109285605, "list": 0.19744254481508877, "elements": 0.19744254481508877}}, {"docstring": " Given `f : normed_group_hom G H` for some complete `G` and a subgroup `K` of `H`, if every element `x` of `K` has a preimage under `f` whose norm is at most `C*\u2225x\u2225` then the same holds for elements of the (topological) closure of `K` with constant `C+\u03b5` instead of `C`, for any positive `\u03b5`.\n", "keywords": {"holds for elements": 0.026654286100438095, "normed": 0.051156545382028185, "group": 0.051156545382028185, "topological": 0.051156545382028185, "hom": 0.07204380010119749, "complete": 0.07204380010119749, "subgroup": 0.07204380010119749, "closure": 0.07204380010119749, "constant": 0.07204380010119749, "positive": 0.07204380010119749, "preimage": 0.09557320190198669, "norm": 0.09557320190198669, "holds": 0.09557320190198669, "element": 0.10908064892685267, "elements": 0.10908064892685267}}, {"docstring": "Can't be an instance because it would cause a loop `ufm \u2192 wf_dvd_monoid \u2192 ufm \u2192 ...`.\n", "keywords": {"ufm": 0.02006098734604785, "dvd": 0.054709255964732355, "monoid": 0.054709255964732355, "loop": 0.09329120537733218, "instance": 0.1384995633470844}}, {"docstring": "A category is essentially small if and only if the underlying type of its skeleton (i.e. the \"set\" of isomorphism classes) is small, and it is locally small.\n", "keywords": {"isomorphism classes": 0.014152926958059081, "category is essentially": 0.021113118111357788, "underlying type": 0.021113118111357788, "essentially small": 0.035888336329939076, "locally small": 0.035888336329939076, "set": 0.057012387690331526, "small": 0.08031189392060768, "skeleton": 0.09705179139403543, "classes": 0.09705179139403543, "category": 0.14379350201253976, "essentially": 0.14379350201253976, "underlying": 0.14379350201253976, "type": 0.14379350201253976, "isomorphism": 0.14379350201253976, "locally": 0.14379350201253976}}, {"docstring": " If two integers are congruent to a sufficiently large modulus, they are equal.\n", "keywords": {"sufficiently large modulus": 0.0025258761156662004, "large modulus": 0.015380821171891606, "integers are congruent": 0.02570861714399338, "sufficiently large": 0.02570861714399338, "modulus": 0.09568045026443411, "equal": 0.09568045026443411, "integers": 0.15831692877998726, "congruent": 0.15831692877998726, "sufficiently": 0.15831692877998726, "large": 0.15831692877998726}}, {"docstring": "The order of the formal power series `X` is `1`.\n", "keywords": {"formal power series": 0.0025258761156662004, "power series": 0.015380821171891606, "formal power": 0.02570861714399338, "series": 0.09568045026443411, "order": 0.15831692877998726, "formal": 0.15831692877998726, "power": 0.15831692877998726}}, {"docstring": "See also `cardinal.nsmul_lt_aleph_0_iff` for a hypothesis-free version.\n", "keywords": {"cardinal.nsmul": 0.04491197687864554, "aleph": 0.04491197687864554, "iff": 0.04491197687864554, "hypothesis-free version": 0.04940384002065631, "version": 0.15831692877998726, "hypothesis-free": 0.29736558256021506}}, {"docstring": "The injection of `X` in the optimal coupling between `X` and `Y` is an isometry.\n", "keywords": {"optimal coupling": 0.02570861714399338, "isometry": 0.09568045026443411, "injection": 0.15831692877998726, "optimal": 0.15831692877998726, "coupling": 0.15831692877998726}}, {"docstring": "The n-ary version of `set.add_mem_add`.\n", "keywords": {"set.add": 0.04491197687864554, "mem": 0.04491197687864554, "add": 0.04491197687864554, "n-ary version": 0.09700399286574239, "n-ary": 0.29736558256021506, "version": 0.29736558256021506}}, {"docstring": "**Alias** of the reverse direction of lt_inv_mul_iff_mul_lt`.\n", "keywords": {"mul": 0.019648131954263418, "Alias": 0.034278050535979626, "reverse direction": 0.035715520099333646, "inv": 0.05393656033701752, "iff": 0.05393656033701752, "reverse": 0.18569843656348187, "direction": 0.18569843656348187}}, {"docstring": " **Maximum modulus principle**: if `f : E \u2192 F` is complex differentiable on a set `s`, the norm of `f` takes it maximum on `s` at `z` and `w` is a point such that the closed ball with center `z` and radius `dist w z` is included in `s`, then `\u2225f w\u2225 = \u2225f z\u2225`.\n", "keywords": {"Maximum modulus principle": 0.0005475317216252623, "modulus principle": 0.006874322981577748, "ball with center": 0.006874322981577748, "Maximum modulus": 0.0075450009739080354, "complex differentiable": 0.009140988596936784, "closed ball": 0.009140988596936784, "Maximum": 0.039340890988696954, "principle": 0.07173547972184384, "set": 0.07173547972184384, "center": 0.07173547972184384, "radius": 0.07173547972184384, "dist": 0.07173547972184384, "modulus": 0.09517451237331251, "complex": 0.09517451237331251, "differentiable": 0.09517451237331251, "norm": 0.09517451237331251, "point": 0.09517451237331251, "closed": 0.09517451237331251, "ball": 0.09517451237331251, "included": 0.09517451237331251}}, {"docstring": " A set of linearly independent vectors in a module `M` over a semiring `K` is also linearly independent over a subring `R` of `K`. The implementation uses minimal assumptions about the relationship between `R`, `K` and `M`. The version where `K` is an `R`-algebra is `linear_independent.restrict_scalars_algebras`.\n", "keywords": {"linearly independent vectors": 0.004486283152042092, "linearly independent": 0.011901541764509568, "independent vectors": 0.028143568010868206, "set of linearly": 0.06570193021311149, "linearly": 0.07623921185838067, "independent": 0.07623921185838067, "module": 0.13190326374903477, "semiring": 0.13190326374903477, "subring": 0.13190326374903477, "set": 0.17952171948451756, "vectors": 0.17952171948451756, "implementation uses minimal": 0.22916896463557482, "minimal assumptions": 0.22916896463557482, "linear": 0.32978697507475263, "independent.restrict": 0.32978697507475263, "scalars": 0.32978697507475263, "algebra": 0.4007786472828307, "algebras": 0.4007786472828307, "implementation": 0.43178953083660293, "minimal": 0.43178953083660293}}, {"docstring": "Alternative definition of star-convexity, in terms of pointwise set operations.\n", "keywords": {"pointwise set operations": 0.0025258761156662004, "Alternative definition": 0.015380821171891606, "definition of star-convexity": 0.015380821171891606, "set operations": 0.015380821171891606, "terms of pointwise": 0.02570861714399338, "pointwise set": 0.02570861714399338, "Alternative": 0.09568045026443411, "star-convexity": 0.09568045026443411, "operations": 0.09568045026443411, "definition": 0.15831692877998726, "terms": 0.15831692877998726, "pointwise": 0.15831692877998726, "set": 0.15831692877998726}}, {"docstring": "A real differentiable map `f` is conformal at point `x` if and only if its    differential `fderiv \u211d f x` at that point scales every inner product by a positive scalar.\n", "keywords": {"real differentiable map": 0.0037398923342470327, "differentiable map": 0.019943439662486344, "positive scalar": 0.019943439662486344, "real differentiable": 0.033100028790236186, "point scales": 0.04816043877099025, "conformal at point": 0.10620858116989315, "map": 0.10923981997294611, "differential": 0.10923981997294611, "fderiv": 0.10923981997294611, "scalar": 0.10923981997294611, "point": 0.12834816870701238, "real": 0.17899586521379354, "differentiable": 0.17899586521379354, "conformal": 0.17899586521379354, "scales": 0.17899586521379354, "product": 0.17899586521379354, "positive": 0.17899586521379354}}, {"docstring": " The angle between two vectors is \u03c0 if and only if they are nonzero and one is a negative multiple of the other.\n", "keywords": {"negative multiple": 0.02570861714399338, "angle": 0.15831692877998726, "vectors": 0.15831692877998726, "nonzero": 0.15831692877998726, "negative": 0.15831692877998726, "multiple": 0.15831692877998726}}, {"docstring": " The order of the `\u2194` has been chosen so that `rw btw_cyclic` cycles to the right while `rw \u2190btw_cyclic` cycles to the left (thus following the prepended arrow).\n", "keywords": {"prepended arrow": 0.008738307654480722, "cyclic": 0.021671764809268954, "cycles": 0.030623319316313288, "btw": 0.04077981936982048, "left": 0.08093438251860743, "arrow": 0.08093438251860743, "order": 0.10703252219984087, "chosen": 0.10703252219984087, "prepended": 0.10703252219984087}}, {"docstring": "If `0 < n`, then `r 1` has order `n`.\n", "keywords": {"order": 0.09568045026443411}}, {"docstring": "Pullback a `nontrivial` instance along a surjective function.\n", "keywords": {"surjective function": 0.015380821171891606, "nontrivial": 0.04491197687864554, "Pullback": 0.09568045026443411, "instance": 0.09568045026443411, "function": 0.09568045026443411, "surjective": 0.15831692877998726}}, {"docstring": "Represent a divisor of `m * n` as a product of a divisor of `m` and a divisor of `n`.  Note: In general, this representation is highly non-unique.\n", "keywords": {"Represent a divisor": 0.011787311071121027, "divisor": 0.03092177561644721, "Represent": 0.12558559778925976, "highly non-unique": 0.16160274240137681, "product": 0.1713735584707713, "representation is highly": 0.21174657256505464, "Note": 0.2419870397426118, "general": 0.3328042035767708, "non-unique": 0.3328042035767708, "representation": 0.4180250376667794, "highly": 0.4180250376667794}}, {"docstring": "**Alias** of the reverse direction of dense_closure`.\n", "keywords": {"direction of dense": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "closure": 0.04491197687864554, "dense": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "**Number of Subsets of a Set**\n", "keywords": {"Number of Subsets": 0.004925103769790319, "Number": 0.057012387690331526, "Set": 0.057012387690331526, "Subsets": 0.08596317751626563}}, {"docstring": " The exponential map in a commutative Banach-algebra `\ud835\udd38` over a normed field `\ud835\udd42` of characteristic zero has strict Fr\u00e9chet-derivative `exp \ud835\udd42 x \u2022 1 : \ud835\udd38 \u2192L[\ud835\udd42] \ud835\udd38` at any point `x` in the disk of convergence.\n", "keywords": {"commutative Banach-algebra": 0.005548741293751374, "strict Fr\u00e9chet-derivative": 0.005548741293751374, "normed field": 0.00899321792126428, "disk of convergence": 0.00899321792126428, "exponential map": 0.013527995261974615, "Banach-algebra": 0.04776309965539685, "Fr\u00e9chet-derivative": 0.04776309965539685, "field": 0.0771485953923296, "exp": 0.0771485953923296, "point": 0.0771485953923296, "convergence": 0.0771485953923296, "exponential": 0.1155310835876123, "map": 0.1155310835876123, "commutative": 0.1155310835876123, "normed": 0.1155310835876123, "characteristic": 0.1155310835876123, "strict": 0.1155310835876123, "disk": 0.1155310835876123}}, {"docstring": "Units of a monoid divide any element of the monoid.\n", "keywords": {"divide any element": 0.037831312533597124, "monoid divide": 0.0562460611896591, "Units": 0.11718348279991213, "monoid": 0.13945519496053638, "divide": 0.19092478917347616, "element": 0.19092478917347616}}, {"docstring": "`limsup` over a general filter is measurable. See `measurable_limsup` for the version over `\u2115`.\n", "keywords": {"limsup": 0.04934106913932707, "general filter": 0.07718963315665864, "measurable": 0.15228179662245217, "filter is measurable": 0.18422273852469898, "general": 0.26769077553528936, "filter": 0.26769077553528936, "version": 0.5593851868498433}}, {"docstring": "If a vector is in the same ray as its negation, that vector is zero.\n", "keywords": {"vector": 0.10901343189444501, "negation": 0.11984314898676356, "ray": 0.19488865479360015}}, {"docstring": "A function `f` on `fin (n + 1)` is antitone if and only if `f (i + 1) \u2264 f i` for all `i`.\n", "keywords": {"fin": 0.04491197687864554, "function": 0.0771485953923296, "antitone": 0.1155310835876123}}, {"docstring": "`0` is always a square (in a monoid with zero).\n", "keywords": {"square": 0.09568045026443411, "monoid": 0.15831692877998726}}, {"docstring": "If a vector space has a finite dimension, the index set of `basis.of_vector_space` is finite.\n", "keywords": {"finite dimension": 0.03717212910775401, "index set": 0.04097695443922855, "basis.of": 0.05827187674593231, "vector space": 0.09409699779279646, "dimension": 0.122209967475991, "vector": 0.14663241076608644, "space": 0.14663241076608644, "finite": 0.14663241076608644, "index": 0.19840347794534322, "set": 0.19840347794534322}}, {"docstring": "An element `a` is regular if and only if a positive power of `a` is regular.\n", "keywords": {"positive power": 0.020225813225353943, "regular": 0.07334489383741181, "element": 0.09492398510093508, "positive": 0.1408007092310104, "power": 0.1408007092310104}}, {"docstring": "If the unique morphism from `A` to the terminal object is a monomorphism, `A` is subterminal. The converse of `is_subterminal.mono_terminal_from`.\n", "keywords": {"unique morphism": 0.03363638967973331, "terminal object": 0.06549153349904037, "monomorphism": 0.12347017160866493, "subterminal": 0.12347017160866493, "terminal": 0.17036656557017907, "unique": 0.1803934615806633, "morphism": 0.1803934615806633, "object": 0.1803934615806633, "subterminal.mono": 0.21580243272668717, "converse": 0.433239428475304}}, {"docstring": "General theorem for `finset.induction_on_pi`-style induction principles.\n", "keywords": {"style induction principles": 0.008321268142839145, "finset.induction": 0.04491197687864554, "General theorem": 0.04940384002065631, "style induction": 0.04940384002065631, "induction principles": 0.04940384002065631, "General": 0.15831692877998726, "style": 0.15831692877998726, "principles": 0.15831692877998726, "theorem": 0.29736558256021506, "induction": 0.29736558256021506}}, {"docstring": " If `f` has a local max on `s` at `a`, `f'` is the derivative of `f` at `a` within `s`, and `y` belongs to the positive tangent cone of `s` at `a`, then `f' y \u2264 0`.\n", "keywords": {"positive tangent cone": 0.0008990471097494833, "local max": 0.009239332327148086, "positive tangent": 0.009239332327148086, "tangent cone": 0.009239332327148086, "belongs": 0.06844581806138879, "local": 0.09568045026443411, "max": 0.09568045026443411, "derivative": 0.09568045026443411, "positive": 0.09568045026443411, "tangent": 0.09568045026443411, "cone": 0.09568045026443411}}, {"docstring": "Commutativity of convolution\n", "keywords": {"Commutativity of convolution": 0.02570861714399338, "Commutativity": 0.15831692877998726, "convolution": 0.15831692877998726}}, {"docstring": "A subsemiring `S` includes `closure s` if and only if it includes `s`.\n", "keywords": {"includes": 0.055127829619426576, "subsemiring": 0.09713402394201612, "closure": 0.09713402394201612}}, {"docstring": " A version of the **Hahn-Banach theorem**: given disjoint convex sets `s`, `t` where `s` is open, there is a continuous linear functional which separates them.\n", "keywords": {"disjoint convex sets": 0.0025258761156662004, "continuous linear functional": 0.0042542192213185686, "Hahn-Banach theorem": 0.009239332327148086, "convex sets": 0.015380821171891606, "disjoint convex": 0.02570861714399338, "continuous linear": 0.02570861714399338, "linear functional": 0.02570861714399338, "functional which separates": 0.02570861714399338, "Hahn-Banach": 0.09568045026443411, "theorem": 0.09568045026443411, "sets": 0.09568045026443411, "open": 0.09568045026443411, "version": 0.15831692877998726, "disjoint": 0.15831692877998726, "convex": 0.15831692877998726, "continuous": 0.15831692877998726, "linear": 0.15831692877998726, "functional": 0.15831692877998726, "separates": 0.15831692877998726}}, {"docstring": " In a finite-dimensional vector space, the zero map has determinant `1` in dimension `0`, and `0` otherwise. We give a formula that also works in infinite dimension, where we define the determinant to be `1`.\n", "keywords": {"finite-dimensional vector space": 0.0048214741288271894, "vector space": 0.02450457676658725, "finite-dimensional vector": 0.036119736129487094, "infinite dimension": 0.10582084736518821, "dimension": 0.1078569244093817, "space": 0.128104973733605, "map has determinant": 0.1463278208519534, "determinant": 0.1751322568019964, "finite-dimensional": 0.18670988494849627, "vector": 0.18670988494849627, "map": 0.18670988494849627, "give a formula": 0.24501414226073304, "works in infinite": 0.24501414226073304, "define the determinant": 0.35108763127762, "give": 0.44361725888738957, "formula": 0.44361725888738957, "works": 0.44361725888738957, "infinite": 0.44361725888738957, "define": 0.44361725888738957}}, {"docstring": " If `minimals r s` is included in but *shadows* the antichain `t`, then it is actually equal to `t`.\n", "keywords": {"shadows": 0.04491197687864554, "minimals": 0.09568045026443411, "antichain": 0.09568045026443411, "included": 0.15831692877998726, "equal": 0.15831692877998726}}, {"docstring": "The normal closure of a set is a subgroup.\n", "keywords": {"normal closure": 0.02570861714399338, "subgroup": 0.09568045026443411, "normal": 0.15831692877998726, "closure": 0.15831692877998726, "set": 0.15831692877998726}}, {"docstring": " If `g` (semi)conjugates `fa` to `fb`, then it sends fixed points of `fa` to fixed points of `fb`.\n", "keywords": {"sends fixed points": 0.007490280862116321, "fixed points": 0.017773687275607644, "sends fixed": 0.045872129360315365, "semi": 0.05794058924527716, "conjugates": 0.05794058924527716, "points": 0.07726414307411157, "fixed": 0.11107071682746067, "sends": 0.19744254481508877}}, {"docstring": " For any `a > 1` and a natural `n` we have `n \u2264 a ^ n / (a - 1)`. See also `nat.cast_le_pow_sub_div_sub` for a stronger inequality with `a ^ n - 1` in the numerator.\n", "keywords": {"natural": 0.07862947958994491, "stronger inequality": 0.08446611338711053, "nat.cast": 0.17881754828257995, "pow": 0.17881754828257995, "div": 0.17881754828257995, "numerator": 0.22862739428695167, "stronger": 0.2790829227183407, "inequality": 0.2790829227183407}}, {"docstring": "Symmetric of `finset.image_image\u2082_antidistrib_left`.\n", "keywords": {"image \u2082_ antidistrib": 0.02570861714399338, "finset.image": 0.04491197687864554, "left": 0.04491197687864554, "Symmetric": 0.15831692877998726, "image": 0.15831692877998726, "antidistrib": 0.15831692877998726}}, {"docstring": "**Alias** of the reverse direction of complete_lattice.set_independent_iff_pairwise_disjoint`.\n", "keywords": {"direction of complete": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "lattice.set": 0.04491197687864554, "independent": 0.04491197687864554, "iff": 0.04491197687864554, "pairwise": 0.04491197687864554, "disjoint": 0.04491197687864554, "complete": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " All n-simplices among cospherical points in n-space have the same circumcenter.\n", "keywords": {"n-simplices among cospherical": 0.09700399286574239, "cospherical points": 0.09700399286574239, "points in n-space": 0.09700399286574239, "circumcenter": 0.15831692877998726, "n-simplices": 0.29736558256021506, "cospherical": 0.29736558256021506, "points": 0.29736558256021506, "n-space": 0.29736558256021506}}, {"docstring": " `a` is in the UV-compressed family iff it's in the original and its compression is in the original, or it's not in the original but it's the compression of something in the original.\n", "keywords": {"UV-compressed family iff": 0.001421719020992077, "UV-compressed family": 0.012507342943599108, "family iff": 0.012507342943599108, "original": 0.029657443077062827, "compression": 0.06748713011154947, "UV-compressed": 0.11114333860348975, "family": 0.11114333860348975, "iff": 0.11114333860348975}}, {"docstring": " If there is an element with norm different from `0`, then the norm of the identity equals `1`. (Since we are working with seminorms supposing that the space is non-trivial is not enough.)\n", "keywords": {"identity equals": 0.022301551378828607, "element with norm": 0.08894856624393728, "norm": 0.10600449438550293, "equals": 0.1221512649852118, "element": 0.1785903903600119, "identity": 0.1785903903600119, "working with seminorms": 0.22714863390129153, "seminorms supposing": 0.22714863390129153, "space is non-trivial": 0.22714863390129153, "working": 0.4302357358329322, "seminorms": 0.4302357358329322, "supposing": 0.4302357358329322, "space": 0.4302357358329322, "non-trivial": 0.4302357358329322}}, {"docstring": " If `f` has a local min on `s` at `a` and both `y` and `-y` belong to the positive tangent cone of `s` at `a`, then `f' y = 0`.\n", "keywords": {"positive tangent cone": 0.0016012214736657916, "local min": 0.013527995261974615, "positive tangent": 0.013527995261974615, "tangent cone": 0.013527995261974615, "belong": 0.0771485953923296, "local": 0.1155310835876123, "min": 0.1155310835876123, "positive": 0.1155310835876123, "tangent": 0.1155310835876123, "cone": 0.1155310835876123}}, {"docstring": " Bisimulation principle the values `\u27e8a,f\u27e9` of the polynomial functor representing `cofix F \u03b1` as well as an invariant `Q : \u03b2 \u2192 Prop` and a state `\u03b2` generating the left-hand side and right-hand side of the equality through functions `u v : \u03b2 \u2192 cofix F \u03b1`\n", "keywords": {"polynomial functor representing": 0.0010381902438949457, "Bisimulation principle": 0.009091829896311552, "functor representing": 0.009091829896311552, "generating the left-hand": 0.009091829896311552, "equality through functions": 0.009091829896311552, "polynomial functor": 0.012689511504896014, "left-hand side": 0.015645211253253456, "right-hand side": 0.015645211253253456, "cofix": 0.02933742015645326, "Prop": 0.03391786476781318, "side and right-hand": 0.03840367315732268, "side": 0.06880581048934313, "Bisimulation": 0.0804889599901522, "representing": 0.0804889599901522, "invariant": 0.0804889599901522, "state": 0.0804889599901522, "generating": 0.0804889599901522, "functions": 0.0804889599901522, "principle": 0.11193974053503682, "polynomial": 0.11193974053503682}}, {"docstring": " The function `z ^ w` is continuous in `(z, w)` provided that `z` does not belong to the interval `(-\u221e, 0]` on the real line. See also `complex.continuous_at_cpow_zero_of_re_pos` for a version that works for `z = 0` but assumes `0 < re w`.\n", "keywords": {"real line": 0.011154056927717123, "function": 0.08922538916412363, "provided": 0.08922538916412363, "interval": 0.08922538916412363, "line": 0.08922538916412363, "version that works": 0.12124452117740256, "continuous": 0.12363091320521931, "belong": 0.12363091320521931, "real": 0.12363091320521931, "complex.continuous": 0.17881754828257995, "cpow": 0.17881754828257995, "pos": 0.17881754828257995, "assumes": 0.25386721785551913, "version": 0.32883716426354986, "works": 0.32883716426354986}}, {"docstring": " A closed ball in a product space is a product of closed balls. See also `metric.closed_ball_pi` for a version assuming `0 \u2264 r` instead of `nonempty \u03b2`.\n", "keywords": {"product space": 0.03187212498249308, "closed ball": 0.05399706292238554, "closed": 0.0850029502246912, "product": 0.0850029502246912, "product of closed": 0.11130091103836921, "ball": 0.1506734548846323, "version assuming": 0.17901690817107055, "space": 0.18168586645340876, "metric.closed": 0.2552396270992323, "balls": 0.3013469097692646, "assuming": 0.3487422008605116, "nonempty": 0.3487422008605116, "version": 0.43538104235296526}}, {"docstring": "The cosine of `\u03c0 / 3` is `1 / 2`.\n", "keywords": {"cosine": 0.29736558256021506}}, {"docstring": " Embed `fin n` into `fin (n + 1)` by inserting around a specified pivot `p : fin (n + 1)` into the `univ`\n", "keywords": {"fin": 0.04576824472363173, "Embed": 0.06073113495971585, "univ": 0.06073113495971585, "pivot": 0.103096657787716, "inserting": 0.15225875770903138}}, {"docstring": "If a real differentiable map `f` is conformal at a point `x`,    then it preserves the angles at that point.\n", "keywords": {"real differentiable map": 0.0040773465381768225, "differentiable map": 0.021114872146320032, "real differentiable": 0.034987023778306175, "preserves the angles": 0.034987023778306175, "point": 0.069255433448279, "map": 0.11246769819744627, "real": 0.18385948854246909, "differentiable": 0.18385948854246909, "conformal": 0.18385948854246909, "preserves": 0.18385948854246909, "angles": 0.18385948854246909}}, {"docstring": "Shows that $e^{aX} * e^{bX} = e^{(a + b)X}$\n", "keywords": {"Shows": 0.0771485953923296}}, {"docstring": "**Alias** of nat.sq_sub_sq`.\n", "keywords": {"Alias": 0.030396371632413578, "nat.sq": 0.15831692877998726}}, {"docstring": "Restatement of `single_mul_single`, which will simplify expressions in `simp` normal form,  when associativity may otherwise need to be carefully applied.\n", "keywords": {"normal form": 0.01207746271572421, "single": 0.018476855251993128, "carefully applied": 0.019943439662486344, "simplify expressions": 0.033100028790236186, "mul": 0.051687907611449965, "simp": 0.051687907611449965, "Restatement": 0.10923981997294611, "normal": 0.10923981997294611, "form": 0.10923981997294611, "applied": 0.10923981997294611, "simplify": 0.17899586521379354, "expressions": 0.17899586521379354, "associativity": 0.17899586521379354, "carefully": 0.17899586521379354}}, {"docstring": "The minimal polynomial of a root of unity `\u03bc` divides `X ^ n - 1`.\n", "keywords": {"root of unity": 0.015380821171891606, "minimal polynomial": 0.02570861714399338, "divides": 0.04491197687864554, "unity": 0.09568045026443411, "minimal": 0.15831692877998726, "polynomial": 0.15831692877998726, "root": 0.15831692877998726}}, {"docstring": "Note that `b \u2208 (s.filter (\u03bb ab, prod.fst ab = a)).image prod.snd` iff `(a, b) \u2208 s` so we can simplify the right hand side of this lemma. However the form stated here is more useful for iterating this lemma, e.g., if we have `f : \u03b1 \u00d7 \u03b2 \u00d7 \u03b3 \u2192 M`.\n", "keywords": {"image prod.snd": 0.021578258620195793, "hand side": 0.05695550697646169, "s.filter": 0.07026717154473598, "iff": 0.07026717154473598, "lemma": 0.08462502603021309, "iterating this lemma": 0.09491477353012231, "Note": 0.14533572323085503, "prod.fst": 0.14533572323085503, "image": 0.14533572323085503, "prod.snd": 0.14533572323085503, "simplify": 0.2321344025274505, "hand": 0.2321344025274505, "side": 0.2321344025274505, "form stated": 0.3556212968930714, "form": 0.5121824452574515, "stated": 0.5121824452574515, "iterating": 0.5121824452574515}}, {"docstring": " The pullback of the `filter.cofinite` under an injective function is equal to `filter.cofinite`. See also `filter.comap_cofinite_le` and `function.injective.tendsto_cofinite`.\n", "keywords": {"filter.cofinite": 0.02638246116974664, "injective function": 0.07004375124078006, "function is equal": 0.07004375124078006, "cofinite": 0.08105151263492691, "filter.comap": 0.22989350183706597, "pullback": 0.25584912197094006, "injective": 0.25584912197094006, "function": 0.25584912197094006, "equal": 0.25584912197094006}}, {"docstring": " `fintype.prod_bijective` is a variant of `finset.prod_bij` that accepts `function.bijective`.  See `function.bijective.prod_comp` for a version without `h`.\n", "keywords": {"fintype.prod": 0.05899937629682816, "bijective": 0.05899937629682816, "finset.prod": 0.05899937629682816, "bij": 0.05899937629682816, "function.bijective": 0.05899937629682816, "accepts": 0.12363091320521931, "comp": 0.17881754828257995, "variant": 0.2005079697193566, "version": 0.46553351027698087}}, {"docstring": " If `dist (f n) (f (n+1))` is bounded by `C * r^n`, `r < 1`, then the distance from `f n` to the limit of `f` is bounded above by `C * r^n / (1 - r)`.\n", "keywords": {"bounded": 0.049557796192334434, "dist": 0.055708263664958506, "distance": 0.1036452554536235, "limit": 0.1036452554536235}}, {"docstring": "The left inverse of matrix A is unique when existing.\n", "keywords": {"unique when existing": 0.04940384002065631, "left inverse": 0.09700399286574239, "inverse of matrix": 0.09700399286574239, "existing": 0.15831692877998726, "left": 0.29736558256021506, "inverse": 0.29736558256021506, "matrix": 0.29736558256021506, "unique": 0.29736558256021506}}, {"docstring": " Given a multilinear map in `n` variables, if one restricts it to `k` variables putting `z` on the other coordinates, then the resulting restricted function satisfies an inequality `\u2225f.restr v\u2225 \u2264 C * \u2225z\u2225^(n-k) * \u03a0 \u2225v i\u2225` if the original function satisfies `\u2225f v\u2225 \u2264 C * \u03a0 \u2225v i\u2225`.\n", "keywords": {"restricted function satisfies": 0.0010221059264181255, "original function satisfies": 0.0010221059264181255, "resulting restricted function": 0.0010728563669182237, "function satisfies": 0.00487020890104286, "variables putting": 0.006024272616213492, "restricted function": 0.010219798637325311, "original function": 0.010219798637325311, "multilinear map": 0.010723023052362737, "resulting restricted": 0.010723023052362737, "satisfies an inequality": 0.01988029788198353, "variables": 0.0384843469659897, "function": 0.049108189942944115, "satisfies": 0.049108189942944115, "putting": 0.07780043771823257, "coordinates": 0.07780043771823257, "inequality": 0.07780043771823257, "f.restr": 0.07780043771823257, "multilinear": 0.1030012607488911, "map": 0.1030012607488911, "restricts": 0.1030012607488911}}, {"docstring": "**Alias** of the forward direction of asymptotics.is_o_norm_left`.\n", "keywords": {"direction of asymptotics.is": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "norm": 0.04491197687864554, "left": 0.04491197687864554, "asymptotics.is": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "Additive closure of an additive submonoid `S` equals `S`\n", "keywords": {"additive submonoid": 0.03378800767844735, "equals": 0.055708263664958506, "Additive closure": 0.0562460611896591, "submonoid": 0.11718348279991213, "Additive": 0.13945519496053638, "closure": 0.19092478917347616}}, {"docstring": "If a category has all binary products and all equalizers, then it also has all pullbacks.    As usual, this is not an instance, since there may be a more direct way to construct    pullbacks.\n", "keywords": {"binary products": 0.032945302382736935, "construct pullbacks": 0.09758609362850307, "pullbacks": 0.1033267718872057, "equalizers": 0.1221512649852118, "category": 0.1785903903600119, "binary": 0.1785903903600119, "products": 0.1785903903600119, "usual": 0.3258146251285017, "instance": 0.3258146251285017, "direct": 0.4302357358329322, "construct": 0.4302357358329322}}, {"docstring": "A locally compact Hausdorff totally disconnected space has a basis with clopen elements.\n", "keywords": {"locally compact Hausdorff": 0.002263175936744087, "compact Hausdorff totally": 0.002263175936744087, "Hausdorff totally disconnected": 0.002263175936744087, "totally disconnected space": 0.0042542192213185686, "compact Hausdorff": 0.013797198203993007, "Hausdorff totally": 0.013797198203993007, "clopen elements": 0.015380821171891606, "locally compact": 0.02570861714399338, "totally disconnected": 0.02570861714399338, "disconnected space": 0.02570861714399338, "basis with clopen": 0.02570861714399338, "Hausdorff": 0.08596317751626563, "elements": 0.09568045026443411, "locally": 0.15831692877998726, "compact": 0.15831692877998726, "totally": 0.15831692877998726, "disconnected": 0.15831692877998726, "space": 0.15831692877998726, "basis": 0.15831692877998726, "clopen": 0.15831692877998726}}, {"docstring": "The pointwise distance is controlled by the distance between functions, by definition.\n", "keywords": {"pointwise distance": 0.05417025203414716, "distance between functions": 0.07301337118426866, "functions": 0.11521656054299435, "definition": 0.11521656054299435, "distance is controlled": 0.1179331082419386, "distance": 0.13667842094541144, "pointwise": 0.1879836817695587, "controlled": 0.1879836817695587}}, {"docstring": "`has_limits_of_size_shrink.{v u} C` tries to obtain `has_limits_of_size.{v u} C` from some other `has_limits_of_size C`.\n", "keywords": {"limits": 0.0133739915640319, "shrink.": 0.06225387256995397, "size.": 0.06225387256995397, "size": 0.06236197769706054, "obtain": 0.10556226050272582}}, {"docstring": "The `v`-adic valuation of `0 : R` equals 0.\n", "keywords": {"adic valuation": 0.015380821171891606, "equals": 0.04491197687864554, "adic": 0.09568045026443411, "valuation": 0.15831692877998726}}, {"docstring": "Given two finite disjoint sets `s` and `t`, the sum of `f i` over `i \u2208 s \u222a t` equals the sum of `f i` over `i \u2208 s` plus the sum of `f i` over `i \u2208 t`.\n", "keywords": {"finite disjoint sets": 0.000882328013656715, "equals the sum": 0.00537246209073151, "disjoint sets": 0.008409399943720228, "finite disjoint": 0.010743108496861263, "sum": 0.0220212305474073, "sets": 0.08088789541707538, "equals": 0.08088789541707538, "finite": 0.103096657787716, "disjoint": 0.103096657787716}}, {"docstring": "See `lt_tsub_iff_right_of_le` for a weaker statement in a partial order.\n", "keywords": {"partial order": 0.015380821171891606, "weaker statement": 0.02570861714399338, "tsub": 0.04491197687864554, "iff": 0.04491197687864554, "order": 0.09568045026443411, "weaker": 0.15831692877998726, "statement": 0.15831692877998726, "partial": 0.15831692877998726}}, {"docstring": "The orthocenter lies in the affine span.\n", "keywords": {"affine span": 0.015380821171891606, "orthocenter lies": 0.02570861714399338, "span": 0.09568045026443411, "orthocenter": 0.15831692877998726, "lies": 0.15831692877998726, "affine": 0.15831692877998726}}, {"docstring": " If the sequence has not terminated before position `n + 1`, the value at `n + 1` gets squashed into position `n`.\n", "keywords": {"terminated before position": 0.03746536804325532, "squashed into position": 0.03746536804325532, "position": 0.05332403764722467, "sequence": 0.1408007092310104, "terminated": 0.1408007092310104, "squashed": 0.1408007092310104}}, {"docstring": "The pretopology associated to a space induces the Grothendieck topology associated to the space.\n", "keywords": {"induces the Grothendieck": 0.010288589410371531, "Grothendieck topology": 0.010288589410371531, "space induces": 0.02635223776265893, "Grothendieck": 0.07352956284046248, "space": 0.09269208833952335, "pretopology": 0.1384995633470844, "induces": 0.1384995633470844, "topology": 0.1384995633470844}}, {"docstring": "The **extreme value theorem**: a continuous function realizes its minimum on a compact set.\n", "keywords": {"continuous function realizes": 0.0042542192213185686, "extreme value theorem": 0.009239332327148086, "compact set": 0.015380821171891606, "continuous function": 0.02570861714399338, "function realizes": 0.02570861714399338, "realizes its minimum": 0.02570861714399338, "extreme": 0.09568045026443411, "theorem": 0.09568045026443411, "set": 0.09568045026443411, "continuous": 0.15831692877998726, "function": 0.15831692877998726, "realizes": 0.15831692877998726, "minimum": 0.15831692877998726, "compact": 0.15831692877998726}}, {"docstring": "Analog of `polynomial.induction_on`.\n", "keywords": {"polynomial.induction": 0.04491197687864554, "Analog": 0.15831692877998726}}, {"docstring": "A linear map maps a generalized eigenrange into itself.\n", "keywords": {"linear map maps": 0.01756804685652159, "generalized eigenrange": 0.037831312533597124, "linear map": 0.0562460611896591, "map maps": 0.08435290273549796, "maps a generalized": 0.12194096740933039, "linear": 0.19092478917347616, "generalized": 0.19092478917347616, "eigenrange": 0.19092478917347616, "map": 0.27891038992107275, "maps": 0.27891038992107275}}, {"docstring": "The number of times a positive integer `i` appears in the partition `of_sums n l hl` is the same as the number of times it appears in the multiset `l`. (For `i = 0`, `partition.non_zero` combined with `multiset.count_eq_zero_of_not_mem` gives that this is `0` instead.)\n", "keywords": {"number of times": 0.0056770515912395346, "positive integer": 0.015049384802057406, "times a positive": 0.04130262174652696, "number": 0.0470181469610055, "times": 0.05969309478390106, "integer": 0.10635367123359185, "partition": 0.10635367123359185, "sums": 0.10635367123359185, "multiset": 0.10635367123359185, "positive": 0.139405236860154, "partition.non": 0.22302132203417566, "multiset.count": 0.22302132203417566, "mem": 0.22302132203417566, "combined": 0.2924525188766874}}, {"docstring": "If every functor `yoneda.obj X` is a `J`-sheaf, then `J` is subcanonical.\n", "keywords": {"sheaf": 0.04491197687864554, "functor": 0.09568045026443411, "yoneda.obj": 0.09568045026443411, "subcanonical": 0.09568045026443411}}, {"docstring": "Congruence relations are reflexive.\n", "keywords": {"Congruence relations": 0.04940384002065631, "relations are reflexive": 0.04940384002065631, "Congruence": 0.15831692877998726, "reflexive": 0.15831692877998726, "relations": 0.29736558256021506}}, {"docstring": "Strictly monotone functions preserve the colex ordering.\n", "keywords": {"Strictly monotone functions": 0.01655915082773619, "monotone functions preserve": 0.03339840940482845, "Strictly monotone": 0.04940384002065631, "colex ordering": 0.04940384002065631, "monotone functions": 0.09700399286574239, "functions preserve": 0.09700399286574239, "preserve the colex": 0.09700399286574239, "Strictly": 0.15831692877998726, "ordering": 0.15831692877998726, "monotone": 0.29736558256021506, "functions": 0.29736558256021506, "preserve": 0.29736558256021506, "colex": 0.29736558256021506}}, {"docstring": "Seminorm-balls containing the origin are absorbent.\n", "keywords": {"origin are absorbent": 0.04940384002065631, "Seminorm-balls": 0.15831692877998726, "absorbent": 0.15831692877998726, "origin": 0.29736558256021506}}, {"docstring": " We can infer `finite_dimensional K V` in the presence of `[fact (finrank K V = n + 1)]`. Declare this as a local instance where needed.\n", "keywords": {"finite": 0.05899937629682816, "fact": 0.05899937629682816, "infer": 0.12363091320521931, "dimensional": 0.12363091320521931, "finrank": 0.12363091320521931, "instance where needed": 0.18075564686791562, "presence": 0.2005079697193566, "local instance": 0.2766850298235749, "Declare": 0.32883716426354986, "needed": 0.32883716426354986, "local": 0.46553351027698087, "instance": 0.46553351027698087}}, {"docstring": "**Alias** of le_of_lt`.\n", "keywords": {"Alias": 0.030396371632413578}}, {"docstring": "If a sum of a `finset` of a subsingleton type has a given value, so do the terms in that sum.\n", "keywords": {"subsingleton type": 0.013453448411345069, "finset": 0.054709255964732355, "sum": 0.07162298286637953, "subsingleton": 0.11521656054299435, "type": 0.11521656054299435, "terms": 0.11521656054299435}}, {"docstring": "For 0 < x, we have sin x < x.\n", "keywords": {"sin": 0.1155310835876123}}, {"docstring": "Elements of an add cancel monoid are regular.  Add cancel semigroups do not appear to exist.\n", "keywords": {"monoid are regular": 0.04449651730999523, "add cancel monoid": 0.0563863220362426, "add cancel": 0.09281308662789661, "cancel monoid": 0.11424755197075569, "Add cancel semigroups": 0.14776819076184114, "Elements": 0.1643991344743863, "regular": 0.1643991344743863, "add": 0.19784073698196622, "cancel": 0.19784073698196622, "monoid": 0.25913107553909676, "cancel semigroups": 0.2771800156281399, "exist": 0.4059300471627769, "semigroups": 0.5484841522346542}}, {"docstring": " The frontier of a closed strictly convex set only contains trivial arithmetic progressions. The idea is that an arithmetic progression is contained on a line and the frontier of a strictly convex set does not contain lines.\n", "keywords": {"strictly convex set": 0.015378614471942928, "closed strictly convex": 0.019519215575692972, "trivial arithmetic progressions": 0.026294566051321105, "strictly convex": 0.04178859986531093, "convex set": 0.04178859986531093, "closed strictly": 0.07190317742881001, "trivial arithmetic": 0.07190317742881001, "arithmetic progressions": 0.1115054062381842, "frontier": 0.12176032248295941, "convex": 0.12176032248295941, "strictly": 0.15836608361364057, "set": 0.15836608361364057, "arithmetic": 0.15836608361364057, "closed": 0.2117875135888509, "trivial": 0.2117875135888509, "progressions": 0.31673216722728115, "progression is contained": 0.3421003887072275, "idea": 0.4827202313534919, "contained": 0.4827202313534919, "line": 0.5517844754056571}}, {"docstring": "A subsemiring is closed under multiplication.\n", "keywords": {"closed under multiplication": 0.04940384002065631, "subsemiring is closed": 0.09700399286574239, "multiplication": 0.15831692877998726, "subsemiring": 0.29736558256021506, "closed": 0.29736558256021506}}, {"docstring": " For every element in the span of a set, there exists a finite subset of the set such that the element is contained in the span of the subset.\n", "keywords": {"exists a finite": 0.012359505093542401, "finite subset": 0.015037673336885644, "element is contained": 0.03703326934187817, "span": 0.04282355063441492, "element": 0.06704020463534766, "set": 0.06704020463534766, "subset": 0.06704020463534766, "exists": 0.11049259107697211, "finite": 0.11049259107697211, "contained": 0.11049259107697211}}, {"docstring": " The `\u2264` order on subspaces is the same as that on the corresponding sets.\n", "keywords": {"order on subspaces": 0.00899321792126428, "order": 0.0771485953923296, "sets": 0.0771485953923296, "subspaces": 0.1155310835876123}}, {"docstring": "See also `smul_right_injective`. TODO: provide a `no_zero_smul_divisors` instance. We can't do that here because importing that definition would create import cycles.\n", "keywords": {"smul": 0.04809062948733813, "injective": 0.08157742654639781, "TODO": 0.13692760280501112, "divisors": 0.23576002486810305, "instance": 0.23576002486810305, "provide": 0.4097165700294581, "import cycles": 0.4772943671703898, "cycles": 0.5027994610872996, "create import cycles": 0.5829418650356095, "importing": 0.6425759450336398, "definition": 0.6425759450336398, "create": 0.6425759450336398, "import": 0.6425759450336398, "importing that definition": 0.7032985001092985, "definition would create": 0.7032985001092985, "create import": 0.7032985001092985}}, {"docstring": "Assumes right covariance. The lemma assuming left covariance is `left.add_neg_of_nonpos_of_neg`.\n", "keywords": {"neg": 0.08105151263492691, "Assumes": 0.16205454282434614, "Assumes right covariance": 0.16594183792672998, "left.add": 0.22989350183706597, "nonpos": 0.22989350183706597, "covariance": 0.2405027004070563, "assuming left covariance": 0.3062531289877704, "left covariance": 0.35460485137785114, "lemma assuming left": 0.37155912399617924, "lemma assuming": 0.42082946769804974, "assuming left": 0.42082946769804974, "lemma": 0.544229518153821, "assuming": 0.544229518153821, "left": 0.544229518153821}}, {"docstring": "A continuous, periodic function is bounded.\n", "keywords": {"periodic function": 0.04940384002065631, "function is bounded": 0.04940384002065631, "continuous": 0.15831692877998726, "periodic": 0.15831692877998726, "bounded": 0.15831692877998726, "function": 0.29736558256021506}}, {"docstring": "For the equality, see `cthickening_cthickening`.\n", "keywords": {"cthickening": 0.02245598843932277, "equality": 0.12363091320521931}}, {"docstring": " Convex hull of `s` is equal to the set of all centers of masses of `finset`s `t`, `z '' t \u2286 s`. This version allows finsets in any type in any universe.\n", "keywords": {"Convex hull": 0.016281477206089707, "centers of masses": 0.02251957186859842, "Convex": 0.10795320618316272, "hull": 0.14840353637699516, "equal": 0.14840353637699516, "set": 0.14840353637699516, "centers": 0.14840353637699516, "masses": 0.14840353637699516, "version allows finsets": 0.2282336982200753, "finset": 0.27069431577351616, "finsets": 0.27069431577351616, "universe": 0.2959241090540141, "version": 0.3770378920346049, "type": 0.3770378920346049}}, {"docstring": "**Alias** of the forward direction of left.one_lt_inv_iff`.\n", "keywords": {"direction of left.one": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "inv": 0.04491197687864554, "iff": 0.04491197687864554, "left.one": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "The normal closure of `s` is the smallest normal subgroup containing `s`.\n", "keywords": {"smallest normal subgroup": 0.011587819648888317, "normal closure": 0.0562460611896591, "smallest normal": 0.0562460611896591, "normal subgroup": 0.0562460611896591, "normal": 0.13945519496053638, "closure": 0.19092478917347616, "smallest": 0.19092478917347616, "subgroup": 0.19092478917347616}}, {"docstring": "The natural degree of `cyclotomic n` is `totient n`.\n", "keywords": {"natural degree": 0.02570861714399338, "cyclotomic": 0.09568045026443411, "totient": 0.09568045026443411, "natural": 0.15831692877998726, "degree": 0.15831692877998726}}, {"docstring": "**Alias** of the forward direction of directed_on_iff_directed`.\n", "keywords": {"Alias": 0.034588515384495436, "forward direction": 0.03663237450220032, "iff": 0.054709255964732355, "direction of directed": 0.06460392234869006, "directed": 0.07162298286637953, "forward": 0.1879836817695587, "direction": 0.1879836817695587}}, {"docstring": "If `m` and `n` are `fintype`, the finrank of `m \u00d7 n` matrices is  `(fintype.card m) * (fintype.card n)`.\n", "keywords": {"fintype.card": 0.05332403764722467, "fintype": 0.055708263664958506, "matrices": 0.09492398510093508, "finrank": 0.1408007092310104}}, {"docstring": " Vitali covering theorem: given a set `t` of subsets of a type, one may extract a disjoint subfamily `u` such that the `\u03c4`-enlargment of this family covers all elements of `t`, where `\u03c4 > 1` is any fixed number.  When `t` is a family of balls, the `\u03c4`-enlargment of `ball x r` is `ball x ((1+2\u03c4) r)`. In general, it is expressed in terms of a function `\u03b4` (think \"radius\" or \"diameter\"), positive and bounded on all elements of `t`. The condition is that every element `a` of `t` should intersect an element `b` of `u` of size larger than that of `a` up to `\u03c4`, i.e., `\u03b4 b \u2265 \u03b4 a / \u03c4`.\n", "keywords": {"Vitali covering theorem": 0.002384059931100661, "Vitali covering": 0.018363917321702315, "covering theorem": 0.018363917321702315, "disjoint subfamily": 0.018363917321702315, "fixed number": 0.018363917321702315, "extract a disjoint": 0.020930331895772016, "family covers": 0.03058835679549099, "enlargment": 0.0736077129003359, "covers all elements": 0.08452383258839052, "family": 0.10364561096555136, "Vitali": 0.12594250342253557, "theorem": 0.12594250342253557, "set": 0.12594250342253557, "type": 0.12594250342253557, "subfamily": 0.12594250342253557, "number": 0.12594250342253557, "elements": 0.12669601330073757, "element": 0.12669601330073757, "ball": 0.12782360691821218, "covering": 0.14318252078542715}}, {"docstring": "Polynomial evaluation commutes with `multiset.prod`\n", "keywords": {"Polynomial evaluation commutes": 0.01655915082773619, "multiset.prod": 0.04491197687864554, "Polynomial evaluation": 0.04940384002065631, "evaluation commutes": 0.09700399286574239, "Polynomial": 0.15831692877998726, "evaluation": 0.29736558256021506, "commutes": 0.29736558256021506}}, {"docstring": "The uniqueness part of the universal property for quotients of an arbitrary type.\n", "keywords": {"arbitrary type": 0.015380821171891606, "uniqueness part": 0.02570861714399338, "universal property": 0.02570861714399338, "property for quotients": 0.02570861714399338, "type": 0.09568045026443411, "uniqueness": 0.15831692877998726, "part": 0.15831692877998726, "universal": 0.15831692877998726, "property": 0.15831692877998726, "quotients": 0.15831692877998726, "arbitrary": 0.15831692877998726}}, {"docstring": " Reindexing both indices along the same equivalence preserves the determinant.  For the `simp` version of this lemma, see `det_minor_equiv_self`.\n", "keywords": {"Reindexing both indices": 0.015099935621315529, "preserves the determinant": 0.015099935621315529, "equivalence preserves": 0.02249651976012989, "Reindexing": 0.10028582371075691, "determinant": 0.10028582371075691, "indices": 0.14832923246533666, "equivalence": 0.14832923246533666, "preserves": 0.14832923246533666, "simp": 0.17881754828257995, "det": 0.17881754828257995, "minor": 0.17881754828257995, "equiv": 0.17881754828257995, "version": 0.2790829227183407, "lemma": 0.2790829227183407}}, {"docstring": "An open convex set is strictly convex.\n", "keywords": {"open convex set": 0.011587819648888317, "set is strictly": 0.037831312533597124, "open convex": 0.0562460611896591, "convex set": 0.0562460611896591, "strictly convex": 0.0562460611896591, "convex": 0.13945519496053638, "open": 0.19092478917347616, "set": 0.19092478917347616, "strictly": 0.19092478917347616}}, {"docstring": "The element `0` is right-regular if and only if `R` is trivial.\n", "keywords": {"element": 0.09568045026443411, "trivial": 0.09568045026443411, "right-regular": 0.15831692877998726}}, {"docstring": "**Alias** of the forward direction of cont_mdiff_iff_cont_diff`.\n", "keywords": {"Alias": 0.03402676245250578, "forward direction": 0.034987023778306175, "mdiff": 0.05331699930238388, "iff": 0.05331699930238388, "diff": 0.05331699930238388, "direction of cont": 0.06131733975553988, "cont": 0.069255433448279, "forward": 0.18385948854246909, "direction": 0.18385948854246909}}, {"docstring": "Definition of `x \u2264 y` on pre-games built using the constructor.\n", "keywords": {"pre-games built": 0.09700399286574239, "Definition": 0.15831692877998726, "constructor": 0.15831692877998726, "pre-games": 0.29736558256021506, "built": 0.29736558256021506}}, {"docstring": " `points_with_circumcenter`, applied to `circumcenter_index`, equals the circumcenter.\n", "keywords": {"circumcenter": 0.04576824472363173, "equals the circumcenter": 0.0501965012392464, "points": 0.06073113495971585, "index": 0.06073113495971585, "applied": 0.103096657787716, "equals": 0.103096657787716}}, {"docstring": " Sum of a multiset of elements in a `subsemiring` of a `semiring` is in the `add_subsemiring`.\n", "keywords": {"multiset of elements": 0.01904688389482227, "subsemiring": 0.019648131954263418, "semiring": 0.05393656033701752, "add": 0.05393656033701752, "Sum": 0.09202664026077896, "multiset": 0.1367145963576765, "elements": 0.1367145963576765}}, {"docstring": "To prove a property of a sum, it suffices to prove that the property is additive and holds on summands.\n", "keywords": {"holds on summands": 0.0233550736766052, "additive and holds": 0.038584678130008584, "suffices to prove": 0.0431505389096901, "prove": 0.10730569120144322, "sum": 0.11840455484321102, "summands": 0.11840455484321102, "property is additive": 0.1244669424000432, "property": 0.1411879566095664, "suffices": 0.19274649316101516, "additive": 0.19274649316101516, "holds": 0.19274649316101516, "prove a property": 0.20525303731368727}}, {"docstring": "Assumes left covariance. The lemma assuming right covariance is `right.add_neg'`.\n", "keywords": {"Assumes left covariance": 0.021279743632738882, "Assumes left": 0.038712704770480444, "left covariance": 0.1273706910391025, "Assumes": 0.1531727145735673, "right.add": 0.21826204231687923, "neg": 0.21826204231687923, "covariance": 0.23216465691767033, "left": 0.2433193585127945, "lemma assuming": 0.38571507274593425, "lemma": 0.5275897320195264, "assuming": 0.5275897320195264, "assuming right covariance": 0.5846700711531686}}, {"docstring": " A variant of `matrix.det_neg` with scalar multiplication by `units \u2124` instead of multiplication by `R`.\n", "keywords": {"scalar multiplication": 0.039293477084795844, "matrix.det": 0.05393656033701752, "neg": 0.05393656033701752, "multiplication": 0.10179911835611566, "units": 0.11369206228658875, "variant": 0.18569843656348187, "scalar": 0.18569843656348187}}, {"docstring": "The angle between two vectors is nonnegative.\n", "keywords": {"vectors is nonnegative": 0.04940384002065631, "nonnegative": 0.15831692877998726, "angle": 0.29736558256021506, "vectors": 0.29736558256021506}}, {"docstring": "A simplification of one side of an equation exploiting right distributivity in rings  and the definition of subtraction.\n", "keywords": {"definition of subtraction": 0.00899321792126428, "equation exploiting": 0.013527995261974615, "exploiting right distributivity": 0.013527995261974615, "distributivity in rings": 0.013527995261974615, "subtraction": 0.0771485953923296, "simplification": 0.1155310835876123, "side": 0.1155310835876123, "equation": 0.1155310835876123, "exploiting": 0.1155310835876123, "distributivity": 0.1155310835876123, "rings": 0.1155310835876123, "definition": 0.1155310835876123}}, {"docstring": " A function is `C^(n + 1)` on a domain with unique derivatives if and only if it is differentiable there, and its derivative (expressed with `fderiv_within`) is `C^n`.\n", "keywords": {"domain with unique": 0.018641876658774394, "unique derivatives": 0.024893945799064354, "fderiv": 0.05331699930238388, "expressed": 0.09101163530720666, "function": 0.135280142484453, "domain": 0.135280142484453, "unique": 0.135280142484453, "differentiable": 0.135280142484453, "derivatives": 0.17954807775654547}}, {"docstring": "Given a submodule `M \u2286 R` and a prime ideal `p` of `S = M\u207b\u00b9R`, with `f : R \u2192+* S` the localization map, then `T = S\u209a` is the localization of `R` at `f\u207b\u00b9(p)`.\n", "keywords": {"localization map": 0.009500655628901641, "prime ideal": 0.00964721495732046, "localization": 0.05674133872487197, "submodule": 0.08293109455034965, "ideal": 0.08293109455034965, "map": 0.08293109455034965, "prime": 0.11521656054299435}}, {"docstring": " Angle at center of a circle equals twice angle at circumference, oriented vector angle form.\n", "keywords": {"oriented vector angle": 0.003178739549761358, "vector angle form": 0.003178739549761358, "oriented vector": 0.014693759054709975, "angle form": 0.0208536076673079, "circle equals": 0.02190347123841009, "vector angle": 0.031178611805947967, "angle at circumference": 0.03674485857760081, "Angle at center": 0.05418657865125862, "Angle": 0.06884146237769838, "equals twice angle": 0.09724177890939777, "circumference": 0.09891140904350601, "oriented": 0.09891140904350601, "form": 0.09891140904350601, "center": 0.14640352592168662, "circle": 0.14640352592168662, "equals": 0.14640352592168662, "vector": 0.14640352592168662}}, {"docstring": "If a function has a power series on a ball, then so does its derivative.\n", "keywords": {"power series": 0.013527995261974615, "ball": 0.0771485953923296, "derivative": 0.0771485953923296, "function": 0.1155310835876123, "power": 0.1155310835876123, "series": 0.1155310835876123}}, {"docstring": " When b < Sup s, there is an element a in s with b < a, if s is nonempty and the order is a linear order.\n", "keywords": {"linear order": 0.027430531955772185, "order": 0.094808423351325, "element": 0.1408007092310104, "nonempty": 0.1408007092310104, "linear": 0.1408007092310104}}, {"docstring": "The empty set is collinear.\n", "keywords": {"set is collinear": 0.04940384002065631, "empty set": 0.09700399286574239, "collinear": 0.15831692877998726, "empty": 0.29736558256021506, "set": 0.29736558256021506}}, {"docstring": " Writing explicitly the `n+1`-th derivative as the composition of a currying linear equiv, and the `n`-th derivative of the derivative.\n", "keywords": {"currying linear equiv": 0.0014033964188006848, "Writing explicitly": 0.011105384224262597, "linear equiv": 0.011105384224262597, "currying linear": 0.015455129647434142, "derivative": 0.0531317968436764, "Writing": 0.08902894120058116, "equiv": 0.08902894120058116, "explicitly": 0.12336897526125244, "composition": 0.12336897526125244, "currying": 0.12336897526125244, "linear": 0.12336897526125244}}, {"docstring": " If `f : X \u2192 Y` is Lipschitz in a neighborhood of each point `x : X`, then the Hausdorff dimension of `range f` is at most the Hausdorff dimension of `X`.\n", "keywords": {"Hausdorff dimension": 0.002369937232248445, "Hausdorff": 0.025858468534971937, "dimension": 0.0456089852516003, "Lipschitz": 0.06479692170400903, "point": 0.08638782221675846, "range": 0.08638782221675846, "neighborhood": 0.11984314898676356}}, {"docstring": " Poincar\u00e9 recurrence theorem: given a conservative map `f` and a measurable set `s`, the set of points `x \u2208 s` such that `x` does not return to `s` after `\u2265 n` iterations has measure zero.\n", "keywords": {"Poincar\u00e9 recurrence theorem": 0.0010567658645955185, "Poincar\u00e9 recurrence": 0.011752516585960321, "recurrence theorem": 0.011752516585960321, "conservative map": 0.011752516585960321, "iterations has measure": 0.011752516585960321, "measurable set": 0.023251977563965413, "set of points": 0.037682341941210055, "set": 0.08640514249691128, "Poincar\u00e9": 0.0883382645966668, "theorem": 0.0883382645966668, "map": 0.0883382645966668, "points": 0.0883382645966668, "iterations": 0.0883382645966668, "recurrence": 0.13149453879183629, "conservative": 0.13149453879183629, "measurable": 0.13149453879183629, "return": 0.13149453879183629, "measure": 0.13149453879183629}}, {"docstring": "**Alias** of the forward direction of unique_mdiff_on_iff_unique_diff_on`.\n", "keywords": {"Alias": 0.03402676245250578, "forward direction": 0.034987023778306175, "mdiff": 0.05331699930238388, "iff": 0.05331699930238388, "diff": 0.05331699930238388, "direction of unique": 0.06131733975553988, "unique": 0.069255433448279, "forward": 0.18385948854246909, "direction": 0.18385948854246909}}, {"docstring": " Assumes right covariance. The lemma assuming left covariance is `left.one_lt_mul`.\n", "keywords": {"Assumes right covariance": 0.15195679415702995, "Assumes": 0.1531727145735673, "left.one": 0.2182620423168793, "mul": 0.2182620423168793, "covariance": 0.23216465691767033, "assuming left covariance": 0.2636654148178027, "lemma assuming left": 0.3201847146816566, "left covariance": 0.32446011851782974, "lemma assuming": 0.38571507274593436, "assuming left": 0.38571507274593436, "lemma": 0.5275897320195265, "assuming": 0.5275897320195265, "left": 0.5275897320195265}}, {"docstring": "Degen's eight squares identity, see <https://en.wikipedia.org/wiki/Degen%27s_eight-square_identity>.  This sign choice here corresponds to the signs obtained by multiplying two octonions.\n", "keywords": {"Degen eight squares": 0.036378432021021534, "squares identity": 0.036378432021021534, "Degen": 0.14840353637699516, "identity": 0.14840353637699516, "squares": 0.2365273465835411, "multiplying two octonions": 0.24288129287790988, "choice here corresponds": 0.3673019860549203, "obtained by multiplying": 0.3673019860549203, "octonions": 0.3770378920346049, "sign choice": 0.4555487937736221, "signs obtained": 0.4555487937736221, "choice": 0.5182978603858105, "corresponds": 0.5182978603858105, "obtained": 0.5182978603858105, "multiplying": 0.5182978603858105, "sign": 0.6038495073559024, "signs": 0.6038495073559024}}, {"docstring": " If `M` is an `R`-module with one and `M` has characteristic zero, then `R` has characteristic zero as well. Usually `M` is an `R`-algebra.\n", "keywords": {"characteristic": 0.0698723210395759, "module": 0.13690089622781554, "algebra": 0.2365661206214104}}, {"docstring": "Assumes left covariance. The lemma assuming right covariance is `right.add_neg_of_neg_of_nonpos`.\n", "keywords": {"Assumes left covariance": 0.025009953048540364, "Assumes left": 0.04325492719738993, "neg": 0.08105151263492691, "left covariance": 0.14033512486368607, "Assumes": 0.16205454282434614, "right.add": 0.22989350183706597, "nonpos": 0.22989350183706597, "covariance": 0.2405027004070563, "left": 0.25584912197094006, "lemma assuming": 0.42082946769804974, "lemma": 0.544229518153821, "assuming": 0.544229518153821, "assuming right covariance": 0.6333818627846869}}, {"docstring": "An equivalent expression of `add_submonoid.fg` in terms of `set.finite` instead of `finset`.\n", "keywords": {"equivalent expression": 0.013527995261974615, "add": 0.04491197687864554, "submonoid.fg": 0.04491197687864554, "set.finite": 0.04491197687864554, "finset": 0.04491197687864554, "equivalent": 0.1155310835876123, "expression": 0.1155310835876123, "terms": 0.1155310835876123}}, {"docstring": " Two alternating maps indexed by a `fintype` are equal if they are equal when all arguments are distinct basis vectors.\n", "keywords": {"distinct basis vectors": 0.0016481455113524755, "alternating maps indexed": 0.002477776488322723, "basis vectors": 0.012051537142168538, "alternating maps": 0.018034246898548233, "maps indexed": 0.018034246898548233, "arguments are distinct": 0.018034246898548233, "distinct basis": 0.018034246898548233, "fintype": 0.052376395424323874, "equal": 0.0676767366797439, "vectors": 0.08946888050496495, "alternating": 0.13309686053898662, "maps": 0.13309686053898662, "indexed": 0.13309686053898662, "arguments": 0.13309686053898662, "distinct": 0.13309686053898662, "basis": 0.13309686053898662}}, {"docstring": "Given a chain from `a` to `b`, and a predicate true at `b`, if `r x y \u2192 p y \u2192 p x` then the predicate is true everywhere in the chain and at `a`. That is, we can propagate the predicate up the chain.\n", "keywords": {"predicate true": 0.09926219128234116, "chain": 0.12207517781005672, "predicate": 0.12207517781005672, "true": 0.12328321503285479, "propagate the predicate": 0.3214763854677222, "predicate is true": 0.3234758555977116, "propagate": 0.47120032406972445}}, {"docstring": "If one controls the norm of every `f x`, then one controls the norm of `f`.\n", "keywords": {"controls the norm": 0.01285430857199669, "controls": 0.07915846438999363, "norm": 0.07915846438999363}}, {"docstring": "If the diagonal morphism of `A` is an isomorphism, then it is subterminal. The converse of `is_subterminal.is_iso_diag`.\n", "keywords": {"diagonal morphism": 0.02249651976012989, "isomorphism": 0.10028582371075691, "subterminal": 0.10028582371075691, "diagonal": 0.14832923246533666, "morphism": 0.14832923246533666, "subterminal.is": 0.17881754828257995, "iso": 0.17881754828257995, "diag": 0.17881754828257995, "converse": 0.37689977775222827}}, {"docstring": "Any Haar measure is invariant under inversion in a commutative group.\n", "keywords": {"Haar measure": 0.04498862876540802, "commutative group": 0.04940384002065631, "measure is invariant": 0.09700399286574239, "invariant under inversion": 0.09700399286574239, "Haar": 0.1447773057422032, "group": 0.15831692877998726, "measure": 0.29736558256021506, "invariant": 0.29736558256021506, "inversion": 0.29736558256021506, "commutative": 0.29736558256021506}}, {"docstring": "If `A` is subterminal, its diagonal morphism is an isomorphism. The converse of `is_subterminal_of_is_iso_diag`.\n", "keywords": {"diagonal morphism": 0.024025565434766742, "subterminal": 0.0890539252249518, "isomorphism": 0.11159279293228641, "diagonal": 0.1531727145735673, "morphism": 0.1531727145735673, "iso": 0.2182620423168793, "diag": 0.2182620423168793, "converse": 0.3858257107143767}}, {"docstring": "For a perfect ring, it itself is the perfection.\n", "keywords": {"perfect ring": 0.04940384002065631, "ring": 0.15831692877998726, "perfection": 0.15831692877998726, "perfect": 0.29736558256021506}}, {"docstring": "If `R` has characteristic `0`, then so does Frac(R).\n", "keywords": {"Frac": 0.057012387690331526, "characteristic": 0.09568045026443411}}, {"docstring": " The sum of two lower semicontinuous functions is lower semicontinuous. Formulated with an explicit continuity assumption on addition, for application to `ereal`. The unprimed version of the lemma uses `[has_continuous_add]`.\n", "keywords": {"lower semicontinuous functions": 0.007327296516767814, "lower semicontinuous": 0.016851204808897166, "semicontinuous functions": 0.03821554584844725, "functions is lower": 0.08667762295794612, "lower": 0.09028232117950413, "semicontinuous": 0.09028232117950413, "explicit continuity assumption": 0.1917383839555026, "sum": 0.2038542769622493, "functions": 0.2038542769622493, "assumption on addition": 0.20587493759307618, "ereal": 0.2425057621221154, "explicit continuity": 0.28461618066910277, "continuity assumption": 0.28461618066910277, "continuous": 0.31807004650910337, "add": 0.31807004650910337, "Formulated": 0.36270881646612724, "addition": 0.36270881646612724, "unprimed version": 0.46742777496856974, "explicit": 0.47069880880967624, "continuity": 0.47069880880967624}}, {"docstring": "The recurrence relation for the `\u0393` function.\n", "keywords": {"recurrence relation": 0.02570861714399338, "function": 0.04491197687864554, "recurrence": 0.15831692877998726, "relation": 0.15831692877998726}}, {"docstring": "The finrank of a finite product is the sum of the finranks.\n", "keywords": {"finite product": 0.020225813225353943, "finite": 0.1408007092310104, "product": 0.1408007092310104, "sum": 0.1408007092310104, "finrank": 0.14668978767482363, "finranks": 0.14668978767482363}}, {"docstring": "**Alias** of left.one_lt_inv_iff`.\n", "keywords": {"Alias": 0.030396371632413578, "inv": 0.04491197687864554, "iff": 0.04491197687864554, "left.one": 0.15831692877998726}}, {"docstring": "**Irrationality of the Square Root of 2**\n", "keywords": {"Square Root": 0.007444681613352736, "Irrationality": 0.057012387690331526, "Square": 0.08596317751626563, "Root": 0.08596317751626563}}, {"docstring": "Finite product of finite sets is finite\n", "keywords": {"Finite product": 0.04698957307803754, "finite sets": 0.04698957307803754, "Finite": 0.09417066770840032, "product of finite": 0.1353174801668506, "sets is finite": 0.1353174801668506, "product": 0.15886280928376606, "sets": 0.15886280928376606}}, {"docstring": "A special case of `finset.inf_eq_infi` that omits the useless `x \u2208 univ` binder.\n", "keywords": {"finset.inf": 0.04491197687864554, "infi": 0.04491197687864554, "univ": 0.04491197687864554, "binder": 0.04491197687864554, "omits the useless": 0.04940384002065631, "special case": 0.09700399286574239, "useless": 0.15831692877998726, "special": 0.29736558256021506, "case": 0.29736558256021506, "omits": 0.29736558256021506}}, {"docstring": " The finite product of a family of sets of unique differentiability is a set of unique differentiability.\n", "keywords": {"unique differentiability": 0.006095657985347912, "sets of unique": 0.012191315970695824, "finite product": 0.01552184797949213, "family of sets": 0.0388160083175745, "unique": 0.04784022513221706, "differentiability": 0.06294116458067843, "finite": 0.12363091320521931, "product": 0.12363091320521931, "family": 0.12363091320521931, "sets": 0.12588232916135686, "set": 0.12588232916135686}}, {"docstring": "The compact-open topology is equal to the compact-convergence topology.\n", "keywords": {"compact-open topology": 0.0562460611896591, "compact-convergence topology": 0.0562460611896591, "topology is equal": 0.12194096740933039, "topology": 0.13945519496053638, "compact-open": 0.19092478917347616, "equal": 0.19092478917347616, "compact-convergence": 0.19092478917347616}}, {"docstring": "If `f` is a monotone function from `\u2124` to a preorder and `x` lies between `f n` and  `f (n + 1)`, then `x` doesn't lie in the range of `f`.\n", "keywords": {"monotone function": 0.013453448411345069, "monotone": 0.11521656054299435, "function": 0.11521656054299435, "preorder": 0.11521656054299435, "range": 0.11521656054299435, "lies": 0.14324596573275905, "lie": 0.14324596573275905}}, {"docstring": " If `M'` is a two-sided inverse for `M` (indexed differently), `det (M \u2b1d N \u2b1d M') = det N`.  See `matrix.det_conj` and `matrix.det_conj'` for the case when `M' = M\u207b\u00b9` or vice versa.\n", "keywords": {"indexed differently": 0.011573697772028478, "two-sided inverse": 0.018641390616933425, "det": 0.04632278036783436, "matrix.det": 0.08315011038879998, "indexed": 0.10696391848114116, "differently": 0.10696391848114116, "vice versa": 0.11535621257343408, "conj": 0.13089221514293597, "two-sided": 0.1352784111955579, "inverse": 0.1352784111955579, "versa": 0.29377954659652855, "case": 0.3520512103630526, "vice": 0.3520512103630526}}, {"docstring": " To show a property is true on the even or odd part, it suffices to show it is true on the scalars or vectors (respectively), closed under addition, and under left-multiplication by a pair of vectors.\n", "keywords": {"closed under addition": 0.013923161052069546, "odd part": 0.022885248721446715, "property is true": 0.028813693746012673, "suffices to show": 0.04212793185246166, "scalars or vectors": 0.06702339176182229, "pair of vectors": 0.06702339176182229, "true": 0.07334489383741183, "vectors": 0.07334489383741183, "show a property": 0.09464369245534064, "show": 0.10586606907408062, "part": 0.11718348279991213, "closed": 0.11718348279991213, "addition": 0.11718348279991213, "property": 0.19092478917347616, "odd": 0.19092478917347616, "suffices": 0.19092478917347616, "scalars": 0.19092478917347616, "left-multiplication": 0.19092478917347616, "pair": 0.19092478917347616}}, {"docstring": " A linearly-independent subset of a module over a ring satisfying the strong rank condition must be finite if the module is Noetherian.\n", "keywords": {"strong rank condition": 0.0024287169002957616, "linearly-independent subset": 0.017798659388540475, "ring satisfying": 0.017798659388540475, "satisfying the strong": 0.017798659388540475, "strong rank": 0.017798659388540475, "rank condition": 0.017798659388540475, "module is Noetherian": 0.022659449748479443, "Noetherian": 0.052008009273421085, "module": 0.08706326953080504, "linearly-independent": 0.132239959875874, "subset": 0.132239959875874, "ring": 0.132239959875874, "satisfying": 0.132239959875874, "strong": 0.132239959875874, "rank": 0.132239959875874, "condition": 0.132239959875874, "finite": 0.132239959875874}}, {"docstring": " If a `cont_mdiff` function `f : M \u2192 E`, where `M` is some manifold, takes values in the sphere, then it restricts to a `cont_mdiff` function from `M` to the sphere.\n", "keywords": {"cont": 0.02317053471260329, "mdiff": 0.02317053471260329, "sphere": 0.039759025025420225, "function": 0.059463729216923555, "manifold": 0.10226642604417549, "restricts": 0.15109932261208045}}, {"docstring": " A change of basis formula for barycentric coordinates.  See also `affine_basis.to_matrix_vec_mul_coords`.\n", "keywords": {"barycentric coordinates": 0.07796891081290885, "change of basis": 0.1495930091794576, "basis formula": 0.1495930091794576, "formula for barycentric": 0.1495930091794576, "affine": 0.17881754828257995, "basis.to": 0.17881754828257995, "matrix": 0.17881754828257995, "vec": 0.17881754828257995, "mul": 0.17881754828257995, "coords": 0.17881754828257995, "coordinates": 0.2005079697193566, "change": 0.36073110501666333, "basis": 0.36073110501666333, "formula": 0.36073110501666333, "barycentric": 0.36073110501666333}}, {"docstring": " `if ... then ... else` characterization of an indexed set of vectors being orthonormal.  (Inner product equals Kronecker delta.)\n", "keywords": {"Kronecker delta": 0.2722623505437095, "equals Kronecker delta": 0.303467823270413, "equals Kronecker": 0.3737565631155434, "vectors being orthonormal": 0.38599679376725615, "Kronecker": 0.4178540393604482, "product equals Kronecker": 0.45867854281053455, "characterization": 0.4613789858464135, "orthonormal": 0.4613789858464135, "delta": 0.5121371841744414, "indexed set": 0.5732105463588063, "set of vectors": 0.5732105463588063, "indexed": 0.6036200563782421, "set": 0.6036200563782421, "vectors": 0.6036200563782421, "product": 0.6511101154454433, "equals": 0.6511101154454433, "product equals": 0.7359434914074432}}, {"docstring": "Shows that for any `q : \u211a` with `0 < q < 1`, the numerator of the fractional part of `int_fract_pair.of q\u207b\u00b9` is smaller than the numerator of `q`.\n", "keywords": {"fractional part": 0.012578992104256836, "numerator": 0.04092200269394482, "int": 0.0528063806271324, "fract": 0.0528063806271324, "Shows": 0.08012982629475915, "pair.of": 0.08012982629475915, "fractional": 0.11145728654016383, "part": 0.11145728654016383, "smaller": 0.11145728654016383}}, {"docstring": "For the single implications with fewer assumptions, see `one_div_lt_one_div_of_lt` and  `lt_of_one_div_lt_one_div`\n", "keywords": {"div": 0.00932045406634339, "fewer assumptions": 0.013354668549352425, "single implications": 0.018532313889308878, "implications with fewer": 0.018532313889308878, "assumptions": 0.09769992342467647, "single": 0.13488927415883753, "implications": 0.13488927415883753, "fewer": 0.13488927415883753}}, {"docstring": "The range of `nonempty_compacts.to_closeds` is closed in a complete space\n", "keywords": {"complete space": 0.021567786782198985, "nonempty": 0.05393656033701752, "compacts.to": 0.05393656033701752, "space": 0.11369206228658875, "range": 0.18569843656348187, "complete": 0.18569843656348187, "closeds": 0.2690767023266335, "closed": 0.2690767023266335}}, {"docstring": "A vector equals a rotation of that vector if and only if the vector or the angle is zero.\n", "keywords": {"equals a rotation": 0.024662903654370644, "vector equals": 0.04402106909902688, "vector": 0.09059379888612011, "equals": 0.15514278968948286, "rotation": 0.15514278968948286, "angle": 0.15514278968948286}}, {"docstring": " If `K` and `L` are fields and `is_scalar_tower R K L`, and `b : \u03b9 \u2192 L` satisfies ` \u2200 i, is_integral R (b i)`, then `is_integral R (discr K b)`.\n", "keywords": {"integral": 0.03389408175523106, "scalar": 0.05393656033701752, "satisfies": 0.05393656033701752, "tower": 0.09202664026077896, "discr": 0.09202664026077896, "fields": 0.1367145963576765}}, {"docstring": "The direct path from 0 to x is shorter than the path with y \"inserted\" in between.\n", "keywords": {"inserted": 0.055708263664958506, "direct path": 0.0562460611896591, "path": 0.13945519496053638, "direct": 0.19092478917347616, "shorter": 0.19092478917347616}}, {"docstring": "With `w : \u2200 ..., f \u226b g = h` (with universal quantifiers tolerated), `elementwise_of w : \u2200 ... (x : X), g (f x) = h x`.  The type and proof of `elementwise_of h` is generated by `tactic.derive_elementwise_proof` which makes `elementwise_of` meta-programming adjacent. It is not called as a tactic but as an expression. The goal is to avoid creating assumptions that are dismissed after one use:  ```lean example (M N K : Mon.{u}) (f : M \u27f6 N) (g : N \u27f6 K) (h : M \u27f6 K) (w : f \u226b g = h) (m : M) :   g (f m) = h m := begin   rw elementwise_of w, end ```\n", "keywords": {"universal quantifiers tolerated": 0.0055914750912446605, "quantifiers tolerated": 0.02872549759536303, "universal quantifiers": 0.03516819732370416, "elementwise": 0.06301736109166886, "tolerated": 0.15149505704959423, "universal": 0.18431878257547224, "quantifiers": 0.18431878257547224, "proof": 0.24990899582499201, "Mon.": 0.2828403438142858, "meta-programming adjacent": 0.2907850612935163, "tactic.derive": 0.4088762274895027, "makes": 0.4746342569952211, "meta-programming": 0.4746342569952211, "adjacent": 0.4746342569952211, "end": 0.4917744280164344, "expression": 0.5254281737252271, "type": 0.5334539248881958, "generated": 0.5334539248881958, "begin rw elementwise": 0.5439787620574573, "lean": 0.5582733656528686}}, {"docstring": "**Alias** of the reverse direction of polynomial.nat_degree_le_iff_degree_le`.\n", "keywords": {"degree": 0.019648131954263418, "direction of polynomial.nat": 0.021567786782198985, "Alias": 0.034278050535979626, "reverse direction": 0.035715520099333646, "iff": 0.05393656033701752, "polynomial.nat": 0.11369206228658875, "reverse": 0.18569843656348187, "direction": 0.18569843656348187}}, {"docstring": "A convex independent family is injective.\n", "keywords": {"convex independent family": 0.03339840940482845, "family is injective": 0.04940384002065631, "convex independent": 0.09700399286574239, "independent family": 0.09700399286574239, "injective": 0.15831692877998726, "convex": 0.29736558256021506, "independent": 0.29736558256021506, "family": 0.29736558256021506}}, {"docstring": "Given a finite set `s`, the sum of `f i + g i` over `i \u2208 s` equals the sum of `f i` over `i \u2208 s` plus the sum of `g i` over `i \u2208 s`.\n", "keywords": {"equals the sum": 0.005125036136356481, "finite set": 0.007891865592742416, "sum": 0.021383977062469698, "set": 0.0794816925129306, "equals": 0.0794816925129306, "finite": 0.09851415428627766}}, {"docstring": " Third (main) version, with pointwise equicontinuity and range in a compact subset, but without closedness. The closure is then compact\n", "keywords": {"pointwise equicontinuity": 0.06027763669363039, "equicontinuity and range": 0.06027763669363039, "main": 0.07258934678807509, "version": 0.07258934678807509, "compact subset": 0.07357675771145666, "subset": 0.1497391925531594, "closedness": 0.1497391925531594, "compact": 0.22884533441049013, "pointwise": 0.23843406751375792, "equicontinuity": 0.23843406751375792, "range": 0.23843406751375792, "closure": 0.5209261917026199}}, {"docstring": " A special case of the **Matrix determinant lemma** for when `A = I`.  TODO: show this more generally.\n", "keywords": {"Matrix determinant lemma": 0.0017064785794898276, "Matrix determinant": 0.013388015649928907, "determinant lemma": 0.02541909697430123, "special case": 0.04188746641162499, "Matrix": 0.06588837669267192, "TODO": 0.11555589791117535, "lemma": 0.12363091320521931, "special": 0.2005079697193566, "case": 0.2005079697193566, "determinant": 0.2005079697193566, "show": 0.32883716426354986, "generally": 0.32883716426354986}}, {"docstring": "Assumes left covariance.\n", "keywords": {"Assumes left covariance": 0.008321268142839145, "Assumes left": 0.04940384002065631, "left covariance": 0.04940384002065631, "Assumes": 0.15831692877998726, "covariance": 0.15831692877998726, "left": 0.29736558256021506}}, {"docstring": "The circumradius is non-negative.\n", "keywords": {"circumradius is non-negative": 0.04940384002065631, "non-negative": 0.15831692877998726, "circumradius": 0.29736558256021506}}, {"docstring": " As the thickening radius \u03b4 tends to 0, the \u03b4-thickened indicator of a set E (in \u03b1) tends pointwise to the indicator function of the closure of E.  Note: This version is for the bundled bounded continuous functions, but the topology is not the topology on `\u03b1 \u2192\u1d47 \u211d\u22650`. Coercions to functions `\u03b1 \u2192 \u211d\u22650` are done first, so the topology instance is the product topology (the topology of pointwise convergence).\n", "keywords": {"\u03b4-thickened indicator": 0.021871358505292978, "thickening radius": 0.024497037874952755, "indicator function": 0.03934576637369992, "bounded continuous functions": 0.05739884993760437, "topology": 0.06078195834352371, "indicator": 0.06920669403438225, "bundled bounded continuous": 0.0882333430492771, "continuous functions": 0.11888304676116121, "functions": 0.1367507958463338, "pointwise": 0.15092260250971662, "pointwise convergence": 0.1521444466500064, "thickening": 0.1546327335564056, "radius": 0.1546327335564056, "\u03b4-thickened": 0.1546327335564056, "set": 0.1546327335564056, "closure": 0.1546327335564056, "topology instance": 0.17107167954523744, "product topology": 0.17107167954523744, "bundled bounded": 0.17774723013471205, "bounded continuous": 0.17774723013471205}}, {"docstring": " The affine span of the orthocenter and a vertex is contained in the altitude.\n", "keywords": {"affine span": 0.013527995261974615, "vertex is contained": 0.013527995261974615, "altitude": 0.0771485953923296, "affine": 0.1155310835876123, "span": 0.1155310835876123, "orthocenter": 0.1155310835876123, "vertex": 0.1155310835876123, "contained": 0.1155310835876123}}, {"docstring": "Precomposing `f` with `prod.snd` is `C^n`\n", "keywords": {"Precomposing": 0.04491197687864554, "prod.snd": 0.04491197687864554}}, {"docstring": "**Alias** of the reverse direction of finset.sym2_nonempty`.\n", "keywords": {"reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "nonempty": 0.04491197687864554, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " Given a neighborhood `U` of `1` there is an open neighborhood `V` of `1` such that `VV \u2286 U`.\n", "keywords": {"open neighborhood": 0.03278451112147437, "neighborhood": 0.07915846438999363, "open": 0.2005079697193566}}, {"docstring": " If a formal multilinear series `p` represents the zero function at `x : E`, then the terms `p n (\u03bb i, y)` appearing the in sum are zero for any `n : \u2115`, `y : E`.\n", "keywords": {"formal multilinear series": 0.0010606143890052174, "multilinear series": 0.00899321792126428, "formal multilinear": 0.013527995261974615, "series": 0.0771485953923296, "represents": 0.0771485953923296, "terms": 0.0771485953923296, "appearing": 0.0771485953923296, "formal": 0.1155310835876123, "multilinear": 0.1155310835876123, "function": 0.1155310835876123, "sum": 0.1155310835876123}}, {"docstring": "**Alias** of the forward direction of lipschitz_with_iff_dist_le_mul`.\n", "keywords": {"direction of lipschitz": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "dist": 0.04491197687864554, "mul": 0.04491197687864554, "lipschitz": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "The finrank of the direct sum is the sum of the finranks.\n", "keywords": {"direct sum": 0.020935822459369965, "sum": 0.08136984231491272, "direct": 0.12600799873373572, "finrank": 0.12953844097397837, "finranks": 0.12953844097397837}}, {"docstring": " A set is a neighborhood of `a` within `(-\u221e, a]` if and only if it contains an interval `[l, a]` with `l < a`.\n", "keywords": {"interval": 0.060154590733539764, "set": 0.0771485953923296, "neighborhood": 0.0771485953923296}}, {"docstring": " If `p` is a prime factor of `b` then the power of `p` in `b` is the same that in `a * b`, for any `a` coprime to `b`.\n", "keywords": {"prime factor": 0.009239332327148086, "coprime": 0.06844581806138879, "prime": 0.09568045026443411, "factor": 0.09568045026443411, "power": 0.09568045026443411}}, {"docstring": "The degree of a minimal polynomial is positive.\n", "keywords": {"polynomial is positive": 0.04940384002065631, "minimal polynomial": 0.09700399286574239, "positive": 0.15831692877998726, "degree": 0.29736558256021506, "minimal": 0.29736558256021506, "polynomial": 0.29736558256021506}}, {"docstring": "A real continuous linear map on the complex plane is conformal if and only if the map or its    conjugate is complex linear, and the map is nonvanishing.\n", "keywords": {"real continuous linear": 0.0051517413039285954, "continuous linear map": 0.007578783007543917, "real continuous": 0.02331172468856548, "plane is conformal": 0.02331172468856548, "continuous linear": 0.03255409573064573, "complex plane": 0.03255409573064573, "complex linear": 0.04562415094908094, "linear map": 0.04755016437041537, "map": 0.07243464626491239, "map is nonvanishing": 0.07263801927702278, "conjugate is complex": 0.07475541974321925, "nonvanishing": 0.10214714531433151, "linear": 0.10444306284395974, "complex": 0.10444306284395974, "real": 0.15093266057183136, "continuous": 0.15093266057183136, "plane": 0.15093266057183136, "conformal": 0.15093266057183136, "conjugate": 0.15093266057183136}}, {"docstring": "**Alias** of the reverse direction of is_max_to_dual_iff`.\n", "keywords": {"reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "max": 0.04491197687864554, "dual": 0.04491197687864554, "iff": 0.04491197687864554, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " The sine of the sum of the angles of a possibly degenerate triangle (where two given sides are nonzero), vector angle form.\n", "keywords": {"vector angle form": 0.0014265357591421166, "possibly degenerate triangle": 0.0016151890443214874, "degenerate triangle": 0.011891118324371971, "sides are nonzero": 0.011891118324371971, "vector angle": 0.015716788421000303, "angle form": 0.015716788421000303, "possibly degenerate": 0.017798659388540475, "triangle": 0.08886407157392263, "nonzero": 0.08886407157392263, "vector": 0.08886407157392263, "form": 0.08886407157392263, "sine": 0.132239959875874, "sum": 0.132239959875874, "possibly": 0.132239959875874, "degenerate": 0.132239959875874, "sides": 0.132239959875874, "angles": 0.17412653906161007, "angle": 0.17412653906161007}}, {"docstring": "`fib n` is a strong divisibility sequence,  see https://proofwiki.org/wiki/GCD_of_Fibonacci_Numbers\n", "keywords": {"strong divisibility sequence": 0.016559150827736194, "divisibility sequence": 0.04940384002065631, "strong divisibility": 0.09700399286574239, "fib": 0.15831692877998726, "sequence": 0.15831692877998726, "strong": 0.29736558256021506, "divisibility": 0.29736558256021506}}, {"docstring": "A rearrangement and `sqrt` of `real.cosh_sq_sub_sinh_sq`.\n", "keywords": {"sqrt": 0.04491197687864554, "real.cosh": 0.04491197687864554, "sinh": 0.04491197687864554, "rearrangement": 0.15831692877998726}}, {"docstring": " If self-maps `f` and `g` commute, then `g` is bijective on the set of fixed points of `f \u2218 g`. This is a particular case of `function.bij_on_fixed_pts_comp`.\n", "keywords": {"fixed points": 0.06317914585211948, "commute": 0.07188367843871574, "self-maps": 0.12102666257279926, "set of fixed": 0.13359747832016683, "fixed": 0.16781817241196398, "bijective": 0.17705097305926945, "set": 0.17705097305926945, "points": 0.17705097305926945, "function.bij": 0.21197353881683212, "pts": 0.21197353881683212, "comp": 0.21197353881683212, "case": 0.4276565147820152}}, {"docstring": "If `\u2205 \u2260 U \u2286 S \u2286 Z` such that `U` is open and `Z` is preirreducible, then `S` is irreducible.\n", "keywords": {"preirreducible": 0.0771485953923296, "irreducible": 0.0771485953923296, "open": 0.1155310835876123}}, {"docstring": " To prove a function to a `t1_space` is continuous at some point `a`, it suffices to prove that `f` admits *some* limit at `a`.\n", "keywords": {"suffices to prove": 0.012206995818413651, "prove a function": 0.03057033566280819, "space": 0.0528063806271324, "admits": 0.0528063806271324, "prove": 0.05410046522304627, "point": 0.08012982629475915, "limit": 0.08012982629475915, "function": 0.11145728654016383, "continuous": 0.11145728654016383, "suffices": 0.11145728654016383}}, {"docstring": "Use linearity of `cramer` to take it out of a summation.\n", "keywords": {"cramer": 0.04491197687864554, "summation": 0.09568045026443411, "linearity": 0.15831692877998726}}, {"docstring": "Deprecated: use `fun_like.congr_arg` instead.\n", "keywords": {"Deprecated": 0.04491197687864554, "fun": 0.04491197687864554, "like.congr": 0.04491197687864554, "arg": 0.04491197687864554}}, {"docstring": "`legendre_sym p (-1)` is given by `\u03c7\u2084 p`.\n", "keywords": {"legendre": 0.04491197687864554, "sym": 0.09568045026443411}}, {"docstring": "An element of a ring multiplied by the additive inverse of one is the element's additive  inverse.\n", "keywords": {"element additive inverse": 0.01919104955473744, "additive inverse": 0.02817978557005342, "ring multiplied": 0.04290651575450026, "element additive": 0.07496826985274804, "additive": 0.11549095123814725, "inverse": 0.11549095123814725, "element": 0.15096417332079662, "ring": 0.20283314940424746, "multiplied": 0.20283314940424746}}, {"docstring": "The variant of `is_left_invariant_chaar` for `haar_content`\n", "keywords": {"left": 0.04491197687864554, "invariant": 0.04491197687864554, "chaar": 0.04491197687864554, "haar": 0.04491197687864554, "content": 0.04491197687864554, "variant": 0.29736558256021506}}, {"docstring": "**Alias** of zero_lt_three`.\n", "keywords": {"Alias": 0.030396371632413578}}, {"docstring": " A function on `[a, b]` with the norm of the derivative within `[a, b]` bounded by `C` satisfies `\u2225f x - f a\u2225 \u2264 C * (x - a)`, `has_deriv_within_at` version.\n", "keywords": {"satisfies": 0.04491197687864554, "deriv": 0.04491197687864554, "version": 0.04491197687864554, "bounded": 0.06341998722529081, "function": 0.08438900089923473, "norm": 0.08438900089923473, "derivative": 0.08438900089923473}}, {"docstring": "The indices of `quotient.out'` and `indexed_partition.out` are equal.\n", "keywords": {"indexed": 0.04491197687864554, "partition.out": 0.04491197687864554, "quotient.out": 0.15831692877998726, "equal": 0.15831692877998726, "indices": 0.29736558256021506}}, {"docstring": "`{a}.max' _` is `a`.\n", "keywords": {"max": 0.04491197687864554}}, {"docstring": "A function is partial recursive if and only if there is a code implementing it.\n", "keywords": {"function is partial": 0.02570861714399338, "partial recursive": 0.02570861714399338, "code implementing": 0.02570861714399338, "function": 0.15831692877998726, "partial": 0.15831692877998726, "recursive": 0.15831692877998726, "code": 0.15831692877998726, "implementing": 0.15831692877998726}}, {"docstring": "Products commute with path composition.    This is `trans_prod_eq_prod_trans` descended to the quotient.\n", "keywords": {"Products commute": 0.04325492719738993, "path composition": 0.04325492719738993, "commute with path": 0.07004375124078006, "trans": 0.08105151263492691, "prod": 0.08105151263492691, "Products": 0.16205454282434614, "composition": 0.16205454282434614, "commute": 0.25584912197094006, "path": 0.25584912197094006, "descended": 0.40179717860981823, "quotient": 0.40179717860981823}}, {"docstring": " If `c` is a limiting binary product cone, and we have a terminal object, then we have `is_pullback c.fst c.snd 0 0` (where each `0` is the unique morphism to the terminal object).\n", "keywords": {"pullback c.fst c.snd": 0.0012186874329842604, "binary product cone": 0.0018272602444849633, "limiting binary product": 0.0027442145684420877, "terminal object": 0.004901287485935649, "product cone": 0.012904998963208847, "pullback c.fst": 0.012904998963208847, "c.fst c.snd": 0.012904998963208847, "limiting binary": 0.019286283660143136, "binary product": 0.019286283660143136, "unique morphism": 0.019286283660143136, "object": 0.03421799084244534, "terminal": 0.07092334359166409, "cone": 0.09262176965879712, "pullback": 0.09262176965879712, "c.snd": 0.09262176965879712, "limiting": 0.13755493784698053, "binary": 0.13755493784698053, "product": 0.13755493784698053, "c.fst": 0.13755493784698053, "unique": 0.13755493784698053}}, {"docstring": " The cosine of the sum of two angles in a possibly degenerate triangle (where two given sides are nonzero), vector angle form.\n", "keywords": {"vector angle form": 0.0033286291275342068, "possibly degenerate triangle": 0.0038047582963498796, "degenerate triangle": 0.020171377334626643, "sides are nonzero": 0.020171377334626643, "vector angle": 0.029227395770283462, "angle form": 0.029227395770283462, "possibly degenerate": 0.03346752176983843, "triangle": 0.10987504304330521, "nonzero": 0.10987504304330521, "vector": 0.10987504304330521, "form": 0.10987504304330521, "cosine": 0.17995476918065306, "sum": 0.17995476918065306, "possibly": 0.17995476918065306, "degenerate": 0.17995476918065306, "sides": 0.17995476918065306, "angles": 0.2584518972227853, "angle": 0.2584518972227853}}, {"docstring": "An element is add-left-regular if and only if adding to it on the left a add-left-regular element is add-left-regular.\n", "keywords": {"element": 0.08741972024424244, "adding": 0.15842879763921927, "left": 0.15842879763921927}}, {"docstring": " A very useful criterion to show that a space is complete is to show that all sequences which satisfy a bound of the form `dist (u n) (u m) < B N` for all `n m \u2265 N` are converging. This is often applied for `B N = 2^{-N}`, i.e., with a very fast convergence to `0`, which makes it possible to use arguments of converging series, while this is impossible to do in general for arbitrary Cauchy sequences.\n", "keywords": {"criterion to show": 0.010645725914642966, "arbitrary Cauchy sequences": 0.015605664832408012, "space is complete": 0.016039098033445963, "satisfy a bound": 0.016039098033445963, "Cauchy sequences": 0.041662670017112866, "show": 0.04191906435183153, "converging series": 0.062251485966487115, "sequences which satisfy": 0.06352711204953701, "arbitrary Cauchy": 0.06702642942657963, "dist": 0.07478438744409445, "form": 0.09911326019159511, "sequences": 0.10598798131997342, "converging": 0.10598798131997342, "fast convergence": 0.12465005050995545, "general for arbitrary": 0.12465005050995545, "criterion": 0.1256419767999726, "space": 0.1256419767999726, "complete": 0.1256419767999726, "satisfy": 0.1256419767999726, "bound": 0.1256419767999726}}, {"docstring": " Given a point `x` in the convex hull of `s` and a point `y`, there exists a point of `s` at distance at least `dist x y` from `y`.\n", "keywords": {"convex hull": 0.022999258646887014, "exists a point": 0.026672172213124314, "point": 0.05775453373026645, "dist": 0.10143744007623053, "convex": 0.1499406051001382, "hull": 0.1499406051001382, "exists": 0.1499406051001382, "distance": 0.1499406051001382}}, {"docstring": "The operator norm satisfies the triangle inequality.\n", "keywords": {"operator norm satisfies": 0.0042542192213185686, "triangle inequality": 0.015380821171891606, "operator norm": 0.02570861714399338, "norm satisfies": 0.02570861714399338, "satisfies the triangle": 0.02570861714399338, "inequality": 0.09568045026443411, "operator": 0.15831692877998726, "norm": 0.15831692877998726, "satisfies": 0.15831692877998726, "triangle": 0.15831692877998726}}, {"docstring": "Conjugation by a fixed element is continuous when `mul` is continuous.\n", "keywords": {"fixed element": 0.03663237450220032, "element is continuous": 0.04051498248759491, "mul": 0.054709255964732355, "continuous": 0.10356599227702172, "Conjugation": 0.11521656054299435, "fixed": 0.1879836817695587, "element": 0.1879836817695587}}, {"docstring": " Vitali covering theorem, closed balls version: given a family `t` of closed balls, one can extract a disjoint subfamily `u \u2286 t` so that all balls in `t` are covered by the 5-times dilations of balls in `u`.\n", "keywords": {"Vitali covering theorem": 0.00107101762547937, "closed balls version": 0.0019684105509588635, "closed balls": 0.010578290858973933, "Vitali covering": 0.011572643906542323, "covering theorem": 0.011572643906542323, "disjoint subfamily": 0.011572643906542323, "balls version": 0.014779356107127772, "extract a disjoint": 0.016095381189824006, "balls": 0.040056387471728634, "dilations of balls": 0.0617339771086972, "closed": 0.06465340357040254, "Vitali": 0.09089753774818946, "theorem": 0.09089753774818946, "version": 0.09089753774818946, "family": 0.09089753774818946, "subfamily": 0.09089753774818946, "dilations": 0.09089753774818946, "covering": 0.12585874437170733, "extract": 0.12585874437170733, "disjoint": 0.12585874437170733}}, {"docstring": " A point is in an `Ico` iff it can be expressed as a semistrict convex combination of the endpoints.\n", "keywords": {"semistrict convex combination": 0.0042542192213185686, "semistrict convex": 0.02570861714399338, "convex combination": 0.02570861714399338, "Ico": 0.030396371632413578, "iff": 0.09568045026443411, "endpoints": 0.09568045026443411, "point": 0.15831692877998726, "expressed": 0.15831692877998726, "semistrict": 0.15831692877998726, "convex": 0.15831692877998726, "combination": 0.15831692877998726}}, {"docstring": "**Alias** of neg_sq`.\n", "keywords": {"Alias": 0.030396371632413578, "neg": 0.15831692877998726}}, {"docstring": " If two points `x, y` coincide up to length `n`, and the longest common prefix of `x` with `s` is strictly shorter than `n`, then the longest common prefix of `y` with `s` is the same, and both cylinders of this length based at `x` and `y` coincide.\n", "keywords": {"longest common prefix": 0.0008006107368328958, "longest common": 0.0067639976309873074, "common prefix": 0.0067639976309873074, "strictly shorter": 0.02249651976012989, "length based": 0.03117712943655666, "coincide": 0.05776554179380615, "longest": 0.05776554179380615, "common": 0.05776554179380615, "prefix": 0.05776554179380615, "points": 0.10028582371075691, "length": 0.10191687733271076, "strictly": 0.14832923246533666, "shorter": 0.14832923246533666, "cylinders": 0.14832923246533666, "based": 0.14832923246533666}}, {"docstring": "Restriction of local equivs respects equivalence\n", "keywords": {"equivs respects equivalence": 0.016559150827736194, "local equivs respects": 0.03339840940482845, "Restriction of local": 0.04940384002065631, "respects equivalence": 0.04940384002065631, "local equivs": 0.09700399286574239, "equivs respects": 0.09700399286574239, "Restriction": 0.15831692877998726, "equivalence": 0.15831692877998726, "local": 0.29736558256021506, "equivs": 0.29736558256021506, "respects": 0.29736558256021506}}, {"docstring": "Representation of a difference of two squares in a commutative ring as a product.\n", "keywords": {"commutative ring": 0.013527995261974615, "Representation": 0.0771485953923296, "product": 0.0771485953923296, "difference": 0.1155310835876123, "squares": 0.1155310835876123, "commutative": 0.1155310835876123, "ring": 0.1155310835876123}}, {"docstring": "Pushforward a `no_zero_divisors` instance along an injective function.\n", "keywords": {"divisors": 0.04491197687864554, "injective function": 0.04940384002065631, "Pushforward": 0.15831692877998726, "instance": 0.15831692877998726, "function": 0.15831692877998726, "injective": 0.29736558256021506}}, {"docstring": "The uncurrying process is a continuous map between function spaces.\n", "keywords": {"function spaces": 0.04940384002065631, "uncurrying process": 0.09700399286574239, "continuous map": 0.09700399286574239, "map between function": 0.09700399286574239, "spaces": 0.15831692877998726, "uncurrying": 0.29736558256021506, "process": 0.29736558256021506, "continuous": 0.29736558256021506, "map": 0.29736558256021506, "function": 0.29736558256021506}}, {"docstring": "If `circulant v` is symmetric, `\u2200 i j : I, v (- i) = v i`.\n", "keywords": {"circulant": 0.06844581806138879, "symmetric": 0.06844581806138879}}, {"docstring": "There are finitely many subsets of a given finite set\n", "keywords": {"finite set": 0.04940384002065631, "finitely many subsets": 0.09700399286574239, "set": 0.15831692877998726, "finitely": 0.29736558256021506, "subsets": 0.29736558256021506, "finite": 0.29736558256021506}}, {"docstring": "We can define `esymm \u03c3 R n` as a sum over explicit monomials\n", "keywords": {"explicit monomials": 0.04940384002065631, "sum over explicit": 0.09700399286574239, "define": 0.15831692877998726, "esymm": 0.15831692877998726, "monomials": 0.15831692877998726, "sum": 0.29736558256021506, "explicit": 0.29736558256021506}}, {"docstring": "The lifting of a norm nonincreasing morphism is norm nonincreasing.\n", "keywords": {"norm nonincreasing morphism": 0.011782282943034048, "norm nonincreasing": 0.027200199006318638, "nonincreasing morphism": 0.04771708711059453, "morphism is norm": 0.10583238594216893, "norm": 0.11357121248292479, "nonincreasing": 0.11357121248292479, "lifting": 0.2005079697193566, "morphism": 0.2005079697193566}}, {"docstring": "The right inverse of matrix A is unique when existing.\n", "keywords": {"unique when existing": 0.04940384002065631, "inverse of matrix": 0.09700399286574239, "existing": 0.15831692877998726, "inverse": 0.29736558256021506, "matrix": 0.29736558256021506, "unique": 0.29736558256021506}}, {"docstring": "**Alias** of ultrafilter.exists_le`.\n", "keywords": {"Alias": 0.030396371632413578, "ultrafilter.exists": 0.15831692877998726}}, {"docstring": "The topological closure of a normal subgroup is normal.\n", "keywords": {"topological closure": 0.037831312533597124, "normal subgroup": 0.0562460611896591, "subgroup is normal": 0.12194096740933036, "normal": 0.13945519496053638, "topological": 0.19092478917347616, "closure": 0.19092478917347616, "subgroup": 0.19092478917347616}}, {"docstring": " If a subspace is less than another, there is a point only in the second.\n", "keywords": {"subspace": 0.15831692877998726, "point": 0.15831692877998726}}, {"docstring": "The triangle inequality for `uniform_space.ball`\n", "keywords": {"uniform": 0.04491197687864554, "space.ball": 0.04491197687864554, "triangle inequality": 0.09700399286574239, "triangle": 0.29736558256021506, "inequality": 0.29736558256021506}}, {"docstring": "**Alias** of the reverse direction of antitone_on_to_dual_comp_iff`.\n", "keywords": {"direction of antitone": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "dual": 0.04491197687864554, "comp": 0.04491197687864554, "iff": 0.04491197687864554, "antitone": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "The vector space of functions on `fin n` has finrank equal to `n`.\n", "keywords": {"vector space": 0.02570861714399338, "space of functions": 0.02570861714399338, "finrank equal": 0.02570861714399338, "fin": 0.09568045026443411, "vector": 0.15831692877998726, "space": 0.15831692877998726, "functions": 0.15831692877998726, "finrank": 0.15831692877998726, "equal": 0.15831692877998726}}, {"docstring": " *Nakayama's Lemma** - A slightly more general version of (2) in [Stacks 00DV](https://stacks.math.columbia.edu/tag/00DV). See also `eq_bot_of_le_smul_of_le_jacobson_bot` for the special case when `J = \u22a5`.\n", "keywords": {"Nakayama Lemma": 0.003723997957846523, "slightly more general": 0.031040804666112243, "general version": 0.031040804666112243, "Stacks": 0.040218329855935465, "Nakayama": 0.060911257173420906, "Lemma": 0.060911257173420906, "bot": 0.07053509240093724, "slightly": 0.17351161766281323, "general": 0.17351161766281323, "version": 0.17351161766281323, "smul": 0.20791243635202292, "jacobson": 0.20791243635202292, "special case": 0.21626281206510953, "special": 0.42167437397336704, "case": 0.42167437397336704}}, {"docstring": "Only assumes right strict covariance.\n", "keywords": {"strict covariance": 0.04940384002065631, "assumes right strict": 0.09700399286574239, "covariance": 0.15831692877998726, "assumes": 0.29736558256021506, "strict": 0.29736558256021506}}, {"docstring": "In a pseudo metric space with a conditionally complete linear order such that the order and the    metric structure give the same topology, any order-bounded set is metric-bounded.\n", "keywords": {"conditionally complete linear": 0.002646763217128346, "pseudo metric space": 0.0035586004500426306, "complete linear order": 0.0035586004500426306, "metric structure give": 0.0035586004500426306, "set is metric-bounded": 0.012596191271856471, "conditionally complete": 0.01883351639801717, "complete linear": 0.01883351639801717, "structure give": 0.01883351639801717, "order-bounded set": 0.01883351639801717, "pseudo metric": 0.025197502692452464, "metric space": 0.025197502692452464, "linear order": 0.025197502692452464, "metric structure": 0.025197502692452464, "metric": 0.09038697863330873, "order": 0.09038697863330873, "topology": 0.09149320931920597, "metric-bounded": 0.09149320931920597, "pseudo": 0.13596092028323714, "space": 0.13596092028323714, "conditionally": 0.13596092028323714}}, {"docstring": "If `n \u2022 x = 0`, then `m \u2022 x` is the same as `(m % n) \u2022 x`\n", "keywords": {}}, {"docstring": "Expand `\u27eax - y, x - y\u27eb_\u211d`\n", "keywords": {"Expand": 0.04491197687864554}}, {"docstring": " If `f` is multilinear, then `f (\u03a3_{j\u2081 \u2208 A\u2081} g\u2081 j\u2081, ..., \u03a3_{j\u2099 \u2208 A\u2099} g\u2099 j\u2099)` is the sum of `f (g\u2081 (r 1), ..., g\u2099 (r n))` where `r` ranges over all functions with `r 1 \u2208 A\u2081`, ..., `r n \u2208 A\u2099`. This follows from multilinearity by expanding successively with respect to each coordinate. Here, we give an auxiliary statement tailored for an inductive proof. Use instead `map_sum_finset`.\n", "keywords": {"multilinear": 0.11693489898727037, "ranges": 0.11693489898727037, "functions": 0.15271286195149, "multilinearity by expanding": 0.17400296534563955, "expanding successively": 0.17400296534563955, "successively with respect": 0.17400296534563955, "sum": 0.19633598159058321, "auxiliary statement tailored": 0.20304176235442548, "inductive proof": 0.2366670084973367, "give an auxiliary": 0.2945300413067751, "auxiliary statement": 0.2945300413067751, "statement tailored": 0.2945300413067751, "coordinate": 0.31502206386803827, "map": 0.3631539159077436, "finset": 0.3631539159077436, "multilinearity": 0.38498492839998333, "expanding": 0.38498492839998333, "successively": 0.38498492839998333, "respect": 0.38498492839998333, "proof": 0.40121412461884354}}, {"docstring": " Induction principle to build a sequence, by adding one point at a time satisfying a given symmetric relation with respect to all the previously chosen points.  More precisely, Assume that, for any finite set `s`, one can find another point satisfying some relation `r` with respect to all the points in `s`. Then one may construct a function `f : \u2115 \u2192 \u03b1` such that `r (f m) (f n)` holds whenever `m \u2260 n`. We also ensure that all constructed points satisfy a given predicate `P`.\n", "keywords": {"previously chosen points": 0.024835459493079668, "Induction principle": 0.03296366186165962, "build a sequence": 0.03296366186165962, "principle to build": 0.042860771011722275, "previously chosen": 0.042860771011722275, "time satisfying": 0.07284586156271891, "symmetric relation": 0.07284586156271891, "chosen points": 0.1089840396404482, "respect": 0.1167537163313008, "Induction": 0.15741045798961814, "sequence": 0.15741045798961814, "points": 0.1615844360716104, "satisfying": 0.16746371993895842, "relation": 0.16746371993895842, "relation with respect": 0.1759051221366668, "point satisfying": 0.19382627235264316, "Assume": 0.19636678943945168, "principle": 0.20272944156420752, "build": 0.20272944156420752, "adding": 0.20272944156420752}}, {"docstring": "A transcendental real number is irrational.\n", "keywords": {"transcendental real number": 0.03339840940482845, "number is irrational": 0.04940384002065631, "transcendental real": 0.09700399286574239, "real number": 0.09700399286574239, "irrational": 0.15831692877998726, "transcendental": 0.29736558256021506, "real": 0.29736558256021506, "number": 0.29736558256021506}}, {"docstring": "In a space with second countable topology, measurable implies strongly measurable.\n", "keywords": {"measurable implies strongly": 0.010494743012823167, "implies strongly measurable": 0.010494743012823167, "countable topology": 0.021567786782198985, "implies strongly": 0.035715520099333646, "measurable implies": 0.05259515133015473, "strongly measurable": 0.05259515133015473, "topology": 0.11369206228658875, "measurable": 0.13453835116331675, "space": 0.18569843656348187, "countable": 0.18569843656348187, "implies": 0.18569843656348187, "strongly": 0.18569843656348187}}, {"docstring": "To prove a property of a finite sum, it suffices to prove that the property is additive and holds on summands.\n", "keywords": {"finite sum": 0.022885248721446715, "holds on summands": 0.022885248721446715, "additive and holds": 0.037831312533597124, "suffices to prove": 0.04212793185246166, "prove": 0.10586606907408062, "sum": 0.11718348279991213, "summands": 0.11718348279991213, "property is additive": 0.12194096740933039, "property": 0.13945519496053638, "finite": 0.19092478917347616, "suffices": 0.19092478917347616, "additive": 0.19092478917347616, "holds": 0.19092478917347616, "prove a property": 0.20081151690422566}}, {"docstring": "The set of natural number multiples of an element of an `add_monoid` is closed under addition.\n", "keywords": {"natural number multiples": 0.0016012214736657916, "closed under addition": 0.00899321792126428, "set of natural": 0.013527995261974615, "natural number": 0.013527995261974615, "number multiples": 0.013527995261974615, "add": 0.04491197687864554, "monoid": 0.04491197687864554, "addition": 0.0771485953923296, "set": 0.1155310835876123, "natural": 0.1155310835876123, "number": 0.1155310835876123, "multiples": 0.1155310835876123, "element": 0.1155310835876123, "closed": 0.1155310835876123}}, {"docstring": "Constant functions are torus integrable\n", "keywords": {"Constant functions": 0.04940384002065631, "torus integrable": 0.04940384002065631, "functions are torus": 0.09700399286574239, "Constant": 0.15831692877998726, "integrable": 0.15831692877998726, "functions": 0.29736558256021506, "torus": 0.29736558256021506}}, {"docstring": " The inner product of a nonzero vector with a nonzero multiple of itself, divided by the product of their norms, has absolute value 1.\n", "keywords": {"nonzero vector": 0.02162879641957819, "nonzero multiple": 0.02162879641957819, "product": 0.07442578585270056, "nonzero": 0.07442578585270056, "divided": 0.09593831581184391, "norms": 0.09593831581184391, "vector": 0.14222822903176371, "multiple": 0.14222822903176371, "absolute": 0.14222822903176371}}, {"docstring": "Uses `left` co(ntra)variant.\n", "keywords": {"left": 0.04491197687864554, "ntra": 0.04491197687864554, "variant": 0.04491197687864554}}, {"docstring": " If a vector `v\u2082` is on the same ray as a nonzero vector `v\u2081`, then it is equal to `c \u2022 v\u2081` for some nonnegative `c`.\n", "keywords": {"nonzero vector": 0.014618695703961359, "vector": 0.05201485183844375, "nonnegative": 0.09329120537733218, "ray": 0.1384995633470844, "nonzero": 0.1384995633470844, "equal": 0.1384995633470844}}, {"docstring": " The Hausdorff distance to the empty set vanishes (if you want to have the more reasonable value \u221e instead, use `Hausdorff_edist`, which takes values in \u211d\u22650\u221e)\n", "keywords": {"empty set vanishes": 0.0017342432755507887, "set vanishes": 0.012465543599998139, "Hausdorff distance": 0.01250616413768685, "empty set": 0.018641876658774398, "Hausdorff": 0.04565227248125874, "edist": 0.053316999302383886, "vanishes": 0.09101163530720666, "distance": 0.13528014248445303, "empty": 0.13528014248445303, "set": 0.13528014248445303, "reasonable": 0.13528014248445303}}, {"docstring": " The eigenspaces of a linear operator form an independent family of subspaces of `V`.  That is, any eigenspace has trivial intersection with the span of all the other eigenspaces.\n", "keywords": {"linear operator form": 0.0050309237512786605, "linear operator": 0.028686701651320336, "operator form": 0.028686701651320336, "form an independent": 0.028686701651320336, "independent family": 0.028686701651320336, "family of subspaces": 0.028686701651320336, "linear": 0.16699318409230973, "operator": 0.16699318409230973, "form": 0.16699318409230973, "independent": 0.16699318409230973, "family": 0.16699318409230973, "subspaces": 0.16699318409230973, "eigenspaces": 0.17281074585027592, "trivial intersection": 0.20261685117552355, "eigenspace has trivial": 0.39344726527500484, "trivial": 0.41046311666174845, "intersection": 0.41046311666174845, "span": 0.41046311666174845}}, {"docstring": "This relies on `default \u2115 = 0`.\n", "keywords": {"default": 0.15831692877998726, "relies": 0.29736558256021506}}, {"docstring": "For positive `a` and `b`, the prime factors of `a * b` are the union of those of `a` and `b`\n", "keywords": {"prime factors": 0.013527995261974615, "positive": 0.0771485953923296, "prime": 0.1155310835876123, "factors": 0.1155310835876123, "union": 0.1155310835876123}}, {"docstring": "Assumes left covariance.\n", "keywords": {"Assumes left covariance": 0.008321268142839145, "Assumes left": 0.04940384002065631, "left covariance": 0.04940384002065631, "Assumes": 0.15831692877998726, "covariance": 0.15831692877998726, "left": 0.29736558256021506}}, {"docstring": " For `1 \u2264 p`, the `p`-th power of the sum of `f i` is bounded above by a constant times the sum of the `p`-th powers of `f i`. Version for sums over finite sets, with nonnegative `\u211d`-valued functions.\n", "keywords": {"constant times": 0.029950421182924594, "times the sum": 0.07822446445503588, "power": 0.11953886906671703, "powers": 0.11953886906671703, "valued functions": 0.12344217264721558, "sum": 0.12916740678184935, "finite sets": 0.16020751873931022, "bounded": 0.1705270610562953, "constant": 0.1705270610562953, "times": 0.1705270610562953, "Version for sums": 0.24446004717354408, "sums": 0.2583348135636987, "sums over finite": 0.29699431753002364, "Version": 0.33147930309005896, "sets": 0.33147930309005896, "nonnegative": 0.33147930309005896, "valued": 0.33147930309005896, "functions": 0.33147930309005896, "finite": 0.4165726965139037}}, {"docstring": "Higman's Lemma, which states that for any reflexive, transitive relation `r` which is  partially well-ordered on a set `s`, the relation `list.sublist_forall\u2082 r` is partially  well-ordered on the set of lists of elements of `s`. That relation is defined so that  `list.sublist_forall\u2082 r l\u2081 l\u2082` whenever `l\u2081` related pointwise by `r` to a sublist of `l\u2082`.\n", "keywords": {"partially well-ordered": 0.007814532325600195, "Higman Lemma": 0.007946842527144884, "lists of elements": 0.031618099277706674, "transitive relation": 0.04864675941980583, "list.sublist": 0.05076488853752821, "Lemma": 0.06138111958334657, "partially": 0.062025309180813726, "well-ordered": 0.062025309180813726, "forall": 0.07503485999765178, "set of lists": 0.08313951766490342, "set": 0.10056438123870137, "relation": 0.12038746471430177, "Higman": 0.128446469845672, "reflexive": 0.128446469845672, "transitive": 0.128446469845672, "states": 0.1750686580884522, "lists": 0.1750686580884522, "elements": 0.1750686580884522, "related pointwise": 0.21957654140826383, "defined": 0.42431505295019695}}, {"docstring": " `cons` and `snoc` commute. We state this lemma in a non-dependent setting, as otherwise it would involve a cast to convince Lean that the two types are equal, making it harder to use.\n", "keywords": {"cons": 0.05899937629682816, "snoc": 0.05899937629682816, "commute": 0.05899937629682816, "convince Lean": 0.14487691114143314, "non-dependent setting": 0.18075564686791562, "types are equal": 0.18075564686791562, "making it harder": 0.18075564686791562, "Lean": 0.2718250226855089, "state this lemma": 0.2766850298235749, "involve a cast": 0.2766850298235749, "cast to convince": 0.2766850298235749, "setting": 0.32883716426354986, "equal": 0.32883716426354986, "making": 0.32883716426354986, "state": 0.46553351027698087, "lemma": 0.46553351027698087, "non-dependent": 0.46553351027698087, "involve": 0.46553351027698087, "cast": 0.46553351027698087, "convince": 0.46553351027698087}}, {"docstring": " `squarefree` is multiplicative. Note that the \u2192 direction does not require `hmn` and generalizes to arbitrary commutative monoids. See `squarefree.of_mul_left` and `squarefree.of_mul_right` above for auxiliary lemmas.\n", "keywords": {"squarefree": 0.0850231087017539, "squarefree.of": 0.10981566331343563, "mul": 0.10981566331343563, "multiplicative": 0.1729238413759102, "hmn": 0.24398801826330285, "arbitrary commutative monoids": 0.28089736326253734, "commutative monoids": 0.31069733039988884, "left": 0.31981916680757855, "Note": 0.4206738249779228, "direction": 0.4206738249779228, "require": 0.4206738249779228, "monoids": 0.4206738249779228, "generalizes to arbitrary": 0.4652571911672674, "arbitrary commutative": 0.4652571911672674, "auxiliary lemmas": 0.5051800297950717, "lemmas": 0.5140780916393809, "generalizes": 0.5634944156918988, "arbitrary": 0.5634944156918988, "commutative": 0.5634944156918988, "auxiliary": 0.6528728829047435}}, {"docstring": "If \u2220BCD = \u03c0, then \u2220ACB + \u2220ACD = \u03c0.\n", "keywords": {"BCD": 0.030396371632413578, "ACB": 0.030396371632413578, "ACD": 0.030396371632413578}}, {"docstring": "\u03b5-characterization of the closure in pseudoemetric spaces\n", "keywords": {"pseudoemetric spaces": 0.04940384002065631, "closure in pseudoemetric": 0.09700399286574239, "\u03b5-characterization": 0.15831692877998726, "spaces": 0.15831692877998726, "closure": 0.29736558256021506, "pseudoemetric": 0.29736558256021506}}, {"docstring": "If a category has all coproducts then in particular it has finite coproducts.\n", "keywords": {"finite coproducts": 0.05913243875864445, "coproducts": 0.14323823713631006, "category": 0.19488865479360015, "finite": 0.19488865479360015}}, {"docstring": "If `s.nth n = some a\u2099` for some value `a\u2099`, then there is also some value `a\u2098` such that `s.nth = some a\u2098` for `m \u2264 n`.\n", "keywords": {"s.nth": 0.04784022513221706}}, {"docstring": " For functions to `\u211d`, it suffices to prove `f x \u2264 f y + K * dist x y`; this version doesn't assume `0\u2264K`.\n", "keywords": {"suffices to prove": 0.015380821171891606, "prove": 0.09568045026443411, "dist": 0.09568045026443411, "assume": 0.09568045026443411, "functions": 0.15831692877998726, "suffices": 0.15831692877998726, "version": 0.15831692877998726}}, {"docstring": "There are no perfect squares strictly between m\u00b2 and (m+1)\u00b2\n", "keywords": {"perfect squares strictly": 0.03339840940482845, "perfect squares": 0.09700399286574239, "squares strictly": 0.09700399286574239, "perfect": 0.29736558256021506, "squares": 0.29736558256021506, "strictly": 0.29736558256021506}}, {"docstring": "Abbreviation for `single_eq_of_ne h.symm`, for ease of use by `simp`.\n", "keywords": {"single": 0.04491197687864554, "simp": 0.04491197687864554, "Abbreviation": 0.09568045026443411, "h.symm": 0.09568045026443411, "ease": 0.15831692877998726}}, {"docstring": "If `univ` is complete, the space is a complete space\n", "keywords": {"univ": 0.06021916407649213, "complete space": 0.1020247529225597, "complete": 0.15213428770536155, "space": 0.15213428770536155}}, {"docstring": "**Alias** of the reverse direction of multiset.Ico_eq_zero_iff`.\n", "keywords": {"direction of multiset.Ico": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "multiset.Ico": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " If one adds to a vector `m'` another vector `m`, but only for coordinates in a finset `t`, then the image under a multilinear map `f` is the sum of `f (s.piecewise m m')` along all subsets `s` of `t`. This is mainly an auxiliary statement to prove the result when `t = univ`, given in `map_add_univ`, although it can be useful in its own right as it does not require the index set `\u03b9` to be finite.\n", "keywords": {"multilinear map": 0.030311547596161288, "vector": 0.054326839519986875, "univ": 0.07918142447359434, "map": 0.09242533879392889, "finset": 0.11617342065399669, "s.piecewise": 0.11617342065399669, "subsets": 0.11617342065399669, "index set": 0.14196633483741602, "coordinates": 0.15915434375055962, "image": 0.15915434375055962, "multilinear": 0.15915434375055962, "sum": 0.15915434375055962, "auxiliary statement": 0.186691751576882, "statement to prove": 0.186691751576882, "prove the result": 0.186691751576882, "require the index": 0.186691751576882, "adds": 0.28731531420262835, "add": 0.28731531420262835, "set": 0.3134284866941976, "finite": 0.3134284866941976}}, {"docstring": "Precomposing `f` with `prod.fst` is continuous at `x : \u03b1 \u00d7 \u03b2`\n", "keywords": {"Precomposing": 0.04491197687864554, "prod.fst": 0.04491197687864554, "continuous": 0.29736558256021506}}, {"docstring": "If the `p ^ n`th cyclotomic polynomial is irreducible, so is the `p ^ m`th, for `m \u2264 n`.\n", "keywords": {"polynomial is irreducible": 0.015380821171891606, "cyclotomic polynomial": 0.02570861714399338, "irreducible": 0.09568045026443411, "cyclotomic": 0.15831692877998726, "polynomial": 0.15831692877998726}}, {"docstring": "A finite dimensional space has positive `finrank` iff it has a nonzero element.\n", "keywords": {"finite dimensional space": 0.0042542192213185686, "space has positive": 0.015380821171891606, "nonzero element": 0.015380821171891606, "finite dimensional": 0.02570861714399338, "dimensional space": 0.02570861714399338, "finrank": 0.04491197687864554, "positive": 0.09568045026443411, "iff": 0.09568045026443411, "element": 0.09568045026443411, "finite": 0.15831692877998726, "dimensional": 0.15831692877998726, "space": 0.15831692877998726, "nonzero": 0.15831692877998726}}, {"docstring": "Linear independent families are injective, even if you multiply either side.\n", "keywords": {"Linear independent families": 0.01655915082773619, "Linear independent": 0.04940384002065631, "families are injective": 0.04940384002065631, "multiply either side": 0.04940384002065631, "independent families": 0.09700399286574239, "Linear": 0.15831692877998726, "injective": 0.15831692877998726, "side": 0.15831692877998726, "independent": 0.29736558256021506, "families": 0.29736558256021506, "multiply": 0.29736558256021506}}, {"docstring": " If there are no configurations of satellites with `N+1` points, one never uses more than `N` distinct families in the Besicovitch inductive construction.\n", "keywords": {"Besicovitch inductive construction": 0.0013485152131775047, "Besicovitch inductive": 0.013797198203993007, "distinct families": 0.015380821171891606, "inductive construction": 0.015380821171891606, "configurations of satellites": 0.02570861714399338, "points": 0.04491197687864554, "Besicovitch": 0.08596317751626563, "distinct": 0.09568045026443411, "construction": 0.09568045026443411, "configurations": 0.15831692877998726, "satellites": 0.15831692877998726, "families": 0.15831692877998726, "inductive": 0.15831692877998726}}, {"docstring": " In a pseudometric space, unifom Cauchy sequences are characterized by the fact that, eventually, the distance between all its elements is uniformly, arbitrarily small\n", "keywords": {"unifom Cauchy sequences": 0.0013485152131775045, "unifom Cauchy": 0.008293207122436794, "arbitrarily small": 0.009239332327148086, "Cauchy sequences": 0.013797198203993007, "pseudometric space": 0.015380821171891606, "elements is uniformly": 0.015380821171891606, "sequences are characterized": 0.02570861714399338, "eventually": 0.04491197687864554, "Cauchy": 0.08596317751626563, "space": 0.09568045026443411, "unifom": 0.09568045026443411, "uniformly": 0.09568045026443411, "arbitrarily": 0.09568045026443411, "small": 0.09568045026443411, "pseudometric": 0.15831692877998726, "sequences": 0.15831692877998726, "characterized": 0.15831692877998726, "fact": 0.15831692877998726, "distance": 0.15831692877998726, "elements": 0.15831692877998726}}, {"docstring": "The sum defined in Bessel's inequality is summable.\n", "keywords": {"defined in Bessel": 0.04498862876540802, "Bessel inequality": 0.04498862876540802, "inequality is summable": 0.04940384002065631, "sum defined": 0.09700399286574239, "Bessel": 0.1447773057422032, "summable": 0.15831692877998726, "sum": 0.29736558256021506, "defined": 0.29736558256021506, "inequality": 0.29736558256021506}}, {"docstring": " In a sequential space, a point belongs to the closure of a set iff it is a limit of a sequence taking values in this set.\n", "keywords": {"sequential space": 0.007159317564538786, "point belongs": 0.009515836280616039, "sequence taking": 0.009515836280616039, "set iff": 0.010942129436490769, "set": 0.055741499059047184, "space": 0.07321609116840826, "sequential": 0.09708830355970632, "point": 0.09708830355970632, "belongs": 0.09708830355970632, "closure": 0.09708830355970632, "iff": 0.09708830355970632, "limit": 0.09708830355970632, "sequence": 0.09708830355970632, "taking": 0.09708830355970632}}, {"docstring": "A slight strengthening of `exists_nontrivial_relation_sum_zero_of_dim_succ_lt_card` available when working over an ordered field: we can ensure a positive coefficient, not just a nonzero coefficient.\n", "keywords": {"ordered field": 0.01126465640262647, "positive coefficient": 0.012191473029481656, "nonzero coefficient": 0.012191473029481656, "slight strengthening": 0.016877863891825266, "ensure a positive": 0.016877863891825266, "coefficient": 0.046745431038860266, "exists": 0.05054734298756545, "nontrivial": 0.05054734298756545, "relation": 0.05054734298756545, "sum": 0.05054734298756545, "dim": 0.05054734298756545, "succ": 0.05054734298756545, "card": 0.05054734298756545, "field": 0.08646269674286734, "slight": 0.12883217637511718, "strengthening": 0.12883217637511718, "working": 0.12883217637511718, "ordered": 0.12883217637511718, "ensure": 0.12883217637511718, "positive": 0.12883217637511718}}, {"docstring": " An `affine_combination` equals a point if that point is in the set and has weight 1 and the other points in the set have weight 0.\n", "keywords": {"affine": 0.06233957425208533, "combination": 0.06233957425208533, "weight": 0.06248589258587618, "set": 0.08528980488723031, "set have weight": 0.08588743540837315, "equals a point": 0.08966583311606009, "equals": 0.10570086230597084, "point": 0.13695399767979963, "points": 0.27390799535959925}}, {"docstring": " A version of `edist_le_range_sum_edist` with each intermediate distance replaced with an upper estimate.\n", "keywords": {"intermediate distance replaced": 0.0064971092056266945, "edist": 0.018830794223096383, "upper estimate": 0.020435055290363522, "intermediate distance": 0.033892441937102495, "distance replaced": 0.033892441937102495, "range": 0.052376395424323874, "sum": 0.052376395424323874, "estimate": 0.11060549338282699, "version": 0.18105634546484617, "intermediate": 0.18105634546484617, "distance": 0.18105634546484617, "replaced": 0.18105634546484617, "upper": 0.18105634546484617}}, {"docstring": "The multiplicity of `p : \u2115` in `a : \u2124` is finite exactly when `a \u2260 0`.\n", "keywords": {"multiplicity": 0.15831692877998726, "finite": 0.15831692877998726}}, {"docstring": " The inner product of two non-zero vectors equals the negative product of their norms if and only if the angle between the two vectors is \u03c0.\n", "keywords": {"non-zero vectors equals": 0.002185396474134092, "negative product": 0.014179954458918205, "equals the negative": 0.014218983619329623, "non-zero vectors": 0.017940907267098162, "vectors equals": 0.017940907267098162, "product": 0.05904204734277306, "vectors": 0.07442578585270058, "non-zero": 0.11840455484321102, "equals": 0.11840455484321102, "negative": 0.11840455484321102, "norms": 0.11840455484321102, "angle": 0.11840455484321102}}, {"docstring": "The square of the quadratic character on nonzero arguments is `1`.\n", "keywords": {"quadratic character": 0.02570861714399338, "character on nonzero": 0.02570861714399338, "nonzero arguments": 0.02570861714399338, "square": 0.15831692877998726, "quadratic": 0.15831692877998726, "character": 0.15831692877998726, "nonzero": 0.15831692877998726, "arguments": 0.15831692877998726}}, {"docstring": " Given a fixed continuous linear map `g`, associating to a continuous multilinear map `f` the continuous multilinear map `f (g m\u2081, ..., g m\u2099)` is a bounded linear operation.\n", "keywords": {"continuous multilinear map": 0.0017418286744526874, "bounded linear operation": 0.004095616508859934, "continuous linear map": 0.006266671264393898, "multilinear map": 0.007007689961622231, "fixed continuous linear": 0.009399290023394886, "continuous multilinear": 0.015618870638040105, "linear operation": 0.02466284636987343, "linear map": 0.024716501178470227, "map": 0.035918487071917075, "bounded linear": 0.03676709386146187, "fixed continuous": 0.03886819368026632, "continuous linear": 0.055812374908135017, "multilinear": 0.06413440160927163, "continuous": 0.07871881127264589, "associating": 0.10752717485860083, "operation": 0.10752717485860083, "linear": 0.11192161732228732, "fixed": 0.15842879763921927, "bounded": 0.15842879763921927}}, {"docstring": "Shows that the fractional parts of the stream are in `[0,1)`.\n", "keywords": {"fractional parts": 0.02570861714399338, "Shows": 0.09568045026443411, "fractional": 0.15831692877998726, "parts": 0.15831692877998726, "stream": 0.15831692877998726}}, {"docstring": " A map between metric spaces is a uniform embedding if and only if the distance between `f x` and `f y` is controlled in terms of the distance between `x` and `y` and conversely.\n", "keywords": {"map between metric": 0.012385089084719787, "metric spaces": 0.012385089084719787, "uniform embedding": 0.012385089084719787, "controlled in terms": 0.012385089084719787, "distance": 0.04046434749914615, "conversely": 0.07949602794131501, "map": 0.11060549338282699, "metric": 0.11060549338282699, "spaces": 0.11060549338282699, "uniform": 0.11060549338282699, "embedding": 0.11060549338282699, "controlled": 0.11060549338282699, "terms": 0.11060549338282699}}, {"docstring": "When lowered to a prop, `matrix.invertible_equiv_det_invertible` forms an `iff`.\n", "keywords": {"matrix.invertible": 0.04491197687864554, "equiv": 0.04491197687864554, "det": 0.04491197687864554, "invertible": 0.04491197687864554, "iff": 0.04491197687864554, "prop": 0.15831692877998726, "forms": 0.15831692877998726, "lowered": 0.29736558256021506}}, {"docstring": " **Cantor's diagonal argument** implies that there are no injective functions from `set \u03b1` to `\u03b1`.\n", "keywords": {"Cantor diagonal argument": 0.0008884020862469475, "Cantor diagonal": 0.009108237309423345, "diagonal argument": 0.015380821171891606, "injective functions": 0.02570861714399338, "Cantor": 0.057012387690331526, "argument": 0.09568045026443411, "implies": 0.09568045026443411, "set": 0.09568045026443411, "diagonal": 0.15831692877998726, "injective": 0.15831692877998726, "functions": 0.15831692877998726}}, {"docstring": "If `f` and `g` are quadratic polynomials, then the `f.eval a + g.eval b = 0` has a solution.\n", "keywords": {"quadratic polynomials": 0.015380821171891606, "polynomials": 0.09568045026443411, "f.eval": 0.09568045026443411, "g.eval": 0.09568045026443411, "solution": 0.09568045026443411, "quadratic": 0.15831692877998726}}, {"docstring": "Two simplices with the same points have the same Monge point.\n", "keywords": {"Monge point": 0.02819344415317236, "Monge": 0.09571595561806069, "simplices": 0.19488865479360015, "points": 0.28647647427262013, "point": 0.28647647427262013}}, {"docstring": "**Alias** of the reverse direction of order.lt_succ_iff_not_is_max`.\n", "keywords": {"direction of order.lt": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "succ": 0.04491197687864554, "iff": 0.04491197687864554, "max": 0.04491197687864554, "order.lt": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "**Alias** of the reverse direction of continuous_iff_seq_continuous`.\n", "keywords": {"Alias": 0.034278050535979626, "reverse direction": 0.035715520099333646, "iff": 0.05393656033701752, "seq": 0.05393656033701752, "direction of continuous": 0.06276771995988077, "continuous": 0.07030442419566416, "reverse": 0.18569843656348187, "direction": 0.18569843656348187}}, {"docstring": "An additive monoid is not torsion free if any nontrivial element has finite order.\n", "keywords": {"finite order": 0.04940384002065631, "additive monoid": 0.09700399286574239, "torsion free": 0.09700399286574239, "nontrivial element": 0.09700399286574239, "element has finite": 0.09700399286574239, "order": 0.15831692877998726, "additive": 0.29736558256021506, "monoid": 0.29736558256021506, "torsion": 0.29736558256021506, "free": 0.29736558256021506, "nontrivial": 0.29736558256021506, "element": 0.29736558256021506, "finite": 0.29736558256021506}}, {"docstring": "This is the same as `add_order_of_pos' but with one fewer explicit assumption since this is   automatic in case of a finite cancellative additive monoid.\n", "keywords": {"cancellative additive monoid": 0.0025258761156662004, "fewer explicit assumption": 0.0042542192213185686, "finite cancellative additive": 0.0042542192213185686, "additive monoid": 0.015380821171891606, "fewer explicit": 0.02570861714399338, "explicit assumption": 0.02570861714399338, "automatic in case": 0.02570861714399338, "finite cancellative": 0.02570861714399338, "cancellative additive": 0.02570861714399338, "add": 0.04491197687864554, "order": 0.04491197687864554, "pos'": 0.09568045026443411, "monoid": 0.09568045026443411, "fewer": 0.15831692877998726, "explicit": 0.15831692877998726, "assumption": 0.15831692877998726, "automatic": 0.15831692877998726, "case": 0.15831692877998726, "finite": 0.15831692877998726, "cancellative": 0.15831692877998726}}, {"docstring": "A dependent version of `subsemigroup.closure_induction`.\n", "keywords": {"subsemigroup.closure": 0.04491197687864554, "induction": 0.04491197687864554, "dependent version": 0.09700399286574239, "dependent": 0.29736558256021506, "version": 0.29736558256021506}}, {"docstring": "The Hausdorff distance is controlled by the diameter of the union\n", "keywords": {"Hausdorff distance": 0.007743432063478832, "distance is controlled": 0.013527995261974615, "Hausdorff": 0.06650965107397505, "union": 0.0771485953923296, "distance": 0.1155310835876123, "controlled": 0.1155310835876123, "diameter": 0.1155310835876123}}, {"docstring": "An element `y` is in the \u03c9-limit of `x` w.r.t. `f` if the forward    images of `x` frequently (w.r.t. `f`) falls within an arbitrary    neighbourhood of `y`.\n", "keywords": {"element": 0.13908713173569395, "\u03c9-limit": 0.2015547062251367, "frequently": 0.23990156604454824, "forward images": 0.27915536550116243, "falls": 0.44978981696302306, "arbitrary neighbourhood": 0.4589923825313695, "forward": 0.4671553656013124, "images": 0.4671553656013124, "arbitrary": 0.5608881010751107, "neighbourhood": 0.5608881010751107}}, {"docstring": "Assumes right covariance. The lemma assuming left covariance is `left.add_nonpos`.\n", "keywords": {"Assumes right covariance": 0.15195679415702995, "Assumes": 0.1531727145735673, "left.add": 0.2182620423168793, "nonpos": 0.2182620423168793, "covariance": 0.23216465691767033, "assuming left covariance": 0.2636654148178027, "lemma assuming left": 0.3201847146816566, "left covariance": 0.32446011851782974, "lemma assuming": 0.38571507274593436, "assuming left": 0.38571507274593436, "lemma": 0.5275897320195265, "assuming": 0.5275897320195265, "left": 0.5275897320195265}}, {"docstring": "The subsemigroup generated by a set includes the set.\n", "keywords": {"subsemigroup generated": 0.037831312533597124, "set includes": 0.0562460611896591, "includes the set": 0.12194096740933036, "set": 0.13945519496053638, "subsemigroup": 0.19092478917347616, "generated": 0.19092478917347616, "includes": 0.19092478917347616}}, {"docstring": " A helper lemma used to prove that the (scalar or usual) product of a function that tends to zero and a bounded function tends to zero. This lemma is formulated for any binary operation `op : E \u2192 F \u2192 G` with an estimate `\u2225op x y\u2225 \u2264 A * \u2225x\u2225 * \u2225y\u2225` for some constant A instead of multiplication so that it can be applied to `(*)`, `flip (*)`, `(\u2022)`, and `flip (\u2022)`.\n", "keywords": {"scalar or usual": 0.011516571836255814, "bounded function": 0.02099497087339433, "helper lemma": 0.035262605409115515, "function": 0.07352121318390686, "flip": 0.07798499974986901, "scalar": 0.10670262638725675, "usual": 0.10670262638725675, "product": 0.10670262638725675, "binary operation": 0.11833688412405846, "lemma": 0.12178249332846001, "helper": 0.13984566650583186, "prove": 0.13984566650583186, "bounded": 0.13984566650583186, "lemma is formulated": 0.19667701959307257, "operation": 0.293211735606971, "estimate": 0.293211735606971, "formulated": 0.3608827574733224, "binary": 0.3608827574733224, "constant": 0.3608827574733224, "multiplication": 0.3608827574733224}}, {"docstring": "`padic_val_rat p 0` is 0 for any `p`.\n", "keywords": {"padic": 0.04491197687864554, "val": 0.04491197687864554, "rat": 0.09568045026443411}}, {"docstring": "The coercion to the quotient of an additive congruence relation commutes with addition (by definition).\n", "keywords": {"additive congruence relation": 0.0042542192213185686, "congruence relation commutes": 0.0042542192213185686, "commutes with addition": 0.015380821171891606, "additive congruence": 0.02570861714399338, "congruence relation": 0.02570861714399338, "relation commutes": 0.02570861714399338, "addition": 0.09568045026443411, "definition": 0.09568045026443411, "coercion": 0.15831692877998726, "quotient": 0.15831692877998726, "additive": 0.15831692877998726, "congruence": 0.15831692877998726, "relation": 0.15831692877998726, "commutes": 0.15831692877998726}}, {"docstring": " The gauge evaluated at `0` is always zero (mathematically this requires `0` to be in the set `s` but, the real infimum of the empty set in Lean being defined as `0`, it holds unconditionally).\n", "keywords": {"mathematically this requires": 0.006131551750404216, "Lean being defined": 0.006716511151994096, "holds unconditionally": 0.008556802448034093, "gauge evaluated": 0.011952723664711083, "real infimum": 0.011952723664711083, "empty set": 0.014569465960316767, "set in Lean": 0.020812743523505657, "Lean": 0.06138796274651049, "set": 0.06606607740528617, "mathematically": 0.07806526077627396, "requires": 0.07806526077627396, "unconditionally": 0.07806526077627396, "gauge": 0.10868092541297539, "evaluated": 0.10868092541297539, "real": 0.10868092541297539, "infimum": 0.10868092541297539, "empty": 0.10868092541297539, "defined": 0.10868092541297539, "holds": 0.10868092541297539}}, {"docstring": " A variant of `cardinal.lift_mk_eq` with specialized universes. Because Lean often can not realize it should use this specialization itself, we provide this statement separately so you don't have to solve the specialization problem either.\n", "keywords": {"specialized universes": 0.03534037364729901, "cardinal.lift": 0.07073956283945361, "universes": 0.14623340726105694, "variant": 0.23342178605055275, "specialized": 0.23342178605055275, "Lean": 0.287657828219919, "specialization": 0.29932267694672315, "provide this statement": 0.3590259390453561, "statement separately": 0.3590259390453561, "specialization problem": 0.44444742697649514, "realize": 0.5139833378573802, "provide": 0.5139833378573802, "statement": 0.5139833378573802, "separately": 0.5139833378573802, "solve": 0.5139833378573802, "problem": 0.5139833378573802, "solve the specialization": 0.7759935832183138}}, {"docstring": "The support of `factorization n` is exactly the finset of normalized factors\n", "keywords": {"normalized factors": 0.015380821171891606, "finset of normalized": 0.02570861714399338, "factorization": 0.09568045026443411, "factors": 0.09568045026443411, "support": 0.15831692877998726, "finset": 0.15831692877998726, "normalized": 0.15831692877998726}}, {"docstring": " If a finset `u` is contained in the product of two sets `s / t`, we can find two finsets `s'`, `t'` such that `s' \u2286 s`, `t' \u2286 t` and `u \u2286 s' / t'`.\n", "keywords": {"find two finsets": 0.020047210059068708, "finset": 0.0757224611147761, "finsets": 0.0757224611147761, "sets": 0.07692947664055963, "contained": 0.10187934809188742, "product": 0.10187934809188742, "find": 0.10187934809188742}}, {"docstring": "Pons asinorum, vector angle form.\n", "keywords": {"vector angle form": 0.008321268142839145, "Pons asinorum": 0.02570861714399338, "vector angle": 0.04940384002065631, "angle form": 0.04940384002065631, "Pons": 0.15831692877998726, "asinorum": 0.15831692877998726, "vector": 0.15831692877998726, "form": 0.15831692877998726, "angle": 0.29736558256021506}}, {"docstring": " A version of `commute.add_pow` that avoids \u2115-subtraction by summing over the antidiagonal and also with the binomial coefficient applied via scalar action of \u2115.\n", "keywords": {"binomial coefficient applied": 0.0042542192213185686, "avoids \u2115-subtraction": 0.013797198203993007, "\u2115-subtraction by summing": 0.013797198203993007, "binomial coefficient": 0.02570861714399338, "coefficient applied": 0.02570861714399338, "applied via scalar": 0.02570861714399338, "scalar action": 0.02570861714399338, "commute.add": 0.04491197687864554, "pow": 0.04491197687864554, "\u2115-subtraction": 0.08596317751626563, "version": 0.15831692877998726, "avoids": 0.15831692877998726, "summing": 0.15831692877998726, "antidiagonal": 0.15831692877998726, "binomial": 0.15831692877998726, "coefficient": 0.15831692877998726, "applied": 0.15831692877998726, "scalar": 0.15831692877998726, "action": 0.15831692877998726}}, {"docstring": " A version of `quotient.induction_on` taking `{s : setoid \u03b1}` as an implicit argument instead of an instance argument.\n", "keywords": {"implicit argument": 0.051351238837580325, "instance argument": 0.051351238837580325, "quotient.induction": 0.05331699930238388, "taking": 0.05331699930238388, "setoid": 0.11246769819744627, "argument": 0.13282721021560867, "version": 0.18385948854246909, "implicit": 0.18385948854246909, "instance": 0.18385948854246909}}, {"docstring": "Auxiliary lemma to control elements in a join.\n", "keywords": {"Auxiliary lemma": 0.04940384002065631, "lemma to control": 0.09700399286574239, "control elements": 0.09700399286574239, "Auxiliary": 0.15831692877998726, "join": 0.15831692877998726, "lemma": 0.29736558256021506, "control": 0.29736558256021506, "elements": 0.29736558256021506}}, {"docstring": "An alternative version of `subtype.exists`. This one is useful if Lean cannot figure out `q`  when using `subtype.exists` from right to left.\n", "keywords": {"subtype.exists": 0.044631026753425326, "alternative version": 0.0647213843491835, "Lean cannot figure": 0.18478385137268613, "alternative": 0.246550513069643, "version": 0.246550513069643, "Lean": 0.2931976921533319, "left": 0.38997397536695666, "figure": 0.5319420725534505}}, {"docstring": "A variation on Fermat's little theorem. See `zmod.pow_card_sub_one_eq_one`\n", "keywords": {"Fermat little theorem": 0.012144316412564459, "variation on Fermat": 0.01984585111858601, "Fermat": 0.09705179139403544, "theorem": 0.12363091320521931, "zmod.pow": 0.17881754828257995, "card": 0.17881754828257995, "variation": 0.2005079697193566}}, {"docstring": "A version of `add_con.induction_on` for predicates which take two arguments.\n", "keywords": {"add": 0.04491197687864554, "con.induction": 0.04491197687864554, "arguments": 0.15831692877998726, "version": 0.29736558256021506, "predicates": 0.29736558256021506}}, {"docstring": "A sequential limit of strongly measurable functions is strongly measurable.\n", "keywords": {"strongly measurable functions": 0.011041420469275918, "strongly measurable": 0.02595416362410219, "sequential limit": 0.040564923574392765, "measurable functions": 0.045872129360315365, "limit of strongly": 0.10215850587430082, "functions is strongly": 0.10215850587430082, "strongly": 0.11107071682746067, "measurable": 0.11107071682746067, "sequential": 0.19744254481508877, "limit": 0.19744254481508877, "functions": 0.19744254481508877}}, {"docstring": " The original list `L` can be recovered by joining the lists produced by `split_on_p p L`, interspersed with the elements `L.filter p`.\n", "keywords": {"recovered by joining": 0.018034246898548233, "original list": 0.023937535241430174, "lists produced": 0.023937535241430174, "L.filter": 0.05221458631645785, "split": 0.052376395424323874, "joining the lists": 0.05662301314248226, "interspersed": 0.08946888050496495, "elements": 0.08946888050496495, "original": 0.13309686053898662, "recovered": 0.13309686053898662, "joining": 0.13309686053898662, "produced": 0.13309686053898662, "list": 0.17564595615029244, "lists": 0.17564595615029244}}, {"docstring": "Additive congruence relations are reflexive.\n", "keywords": {"Additive congruence relations": 0.01655915082773619, "Additive congruence": 0.04940384002065631, "relations are reflexive": 0.04940384002065631, "congruence relations": 0.09700399286574239, "Additive": 0.15831692877998726, "reflexive": 0.15831692877998726, "congruence": 0.29736558256021506, "relations": 0.29736558256021506}}, {"docstring": "See `lt_of_tsub_lt_tsub_right` for a stronger statement in a linear order.\n", "keywords": {"tsub": 0.02006098734604785, "linear order": 0.022138323509052035, "stronger statement": 0.03663237450220032, "order": 0.11521656054299435, "stronger": 0.1879836817695587, "statement": 0.1879836817695587, "linear": 0.1879836817695587}}, {"docstring": "As `0` is the default value for `real.Sup` of the empty set, it suffices to show that `S` is bounded above by `0` to show that `Sup S \u2264 0`.\n", "keywords": {"empty set": 0.012465543599998139, "suffices to show": 0.013774556686415806, "show": 0.05021947817312067, "real.Sup": 0.05331699930238388, "set": 0.09101163530720666, "default": 0.135280142484453, "empty": 0.135280142484453, "suffices": 0.135280142484453, "bounded": 0.135280142484453}}, {"docstring": " Theorem of bark and tree : if a set is within a (pre)connected set and its closure, then it is (pre)connected as well.\n", "keywords": {"pre": 0.0220371240994345, "Theorem of bark": 0.024849403147288854, "bark and tree": 0.024849403147288854, "connected set": 0.04784886576770305, "connected": 0.07785437699288043, "Theorem": 0.122209967475991, "tree": 0.122209967475991, "closure": 0.122209967475991, "set": 0.14663241076608644, "bark": 0.19840347794534322}}, {"docstring": " Variant of the mean value inequality on a convex set, using a bound on the difference between the derivative and a fixed linear map, rather than a bound on the derivative itself. Version with `has_fderiv_within`.\n", "keywords": {"fixed linear map": 0.002894952548177382, "convex set": 0.017934473654079117, "linear map": 0.017934473654079117, "fixed linear": 0.024763977275537166, "bound": 0.05261614998302546, "derivative": 0.0689945936685475, "Variant": 0.11333669386941954, "set": 0.11333669386941954, "map": 0.11333669386941954, "inequality": 0.1554527012770092, "convex": 0.1554527012770092, "difference": 0.1554527012770092, "fixed": 0.1554527012770092, "linear": 0.1554527012770092, "fderiv": 0.22125774619993788, "Version": 0.3074506896868104}}, {"docstring": " If two vectors are on the same ray then both scaled by the same action are also on the same ray.\n", "keywords": {"ray": 0.07334489383741181, "vectors": 0.1408007092310104, "scaled": 0.1408007092310104, "action": 0.1408007092310104}}, {"docstring": "Additive group homomorphisms preserve subtraction.\n", "keywords": {"Additive group homomorphisms": 0.01655915082773619, "homomorphisms preserve subtraction": 0.016559150827736194, "group homomorphisms preserve": 0.03339840940482845, "Additive group": 0.04940384002065631, "preserve subtraction": 0.04940384002065631, "group homomorphisms": 0.09700399286574239, "homomorphisms preserve": 0.09700399286574239, "Additive": 0.15831692877998726, "subtraction": 0.15831692877998726, "group": 0.29736558256021506, "homomorphisms": 0.29736558256021506, "preserve": 0.29736558256021506}}, {"docstring": "An additive group homomorphism is an additive monoid homomorphism.\n", "keywords": {"additive group homomorphism": 0.01585158101302609, "additive monoid homomorphism": 0.01585158101302609, "additive group": 0.04771708711059453, "additive monoid": 0.04771708711059453, "group homomorphism": 0.06340461682679863, "monoid homomorphism": 0.06340461682679863, "additive": 0.11357121248292479, "homomorphism": 0.14868279128010753, "group": 0.2005079697193566, "monoid": 0.2005079697193566}}, {"docstring": " The norm of the identity is at most `1`. It is in fact `1`, except when the norm of every element vanishes, where it is `0`. (Since we are working with seminorms this can happen even if the space is non-trivial.) It means that one can not do better than an inequality in general.\n", "keywords": {"norm": 0.10231123835881609, "element vanishes": 0.17062562752497584, "identity": 0.1767736811242606, "space is non-trivial": 0.28857133107703387, "fact": 0.3411965848846539, "vanishes": 0.3411965848846539, "working with seminorms": 0.3720644311770897, "inequality in general": 0.37813520078137985, "element": 0.42719047284475026, "non-trivial": 0.43005390349178513, "general": 0.48043984750371127, "working": 0.5207410614977271, "seminorms": 0.5207410614977271, "happen": 0.5207410614977271, "space": 0.5207410614977271, "inequality": 0.5711053935942731}}, {"docstring": " If one affine subspace is less than or equal to another, the same applies to their directions.\n", "keywords": {"affine subspace": 0.02570861714399338, "directions": 0.09568045026443411, "affine": 0.15831692877998726, "subspace": 0.15831692877998726, "equal": 0.15831692877998726, "applies": 0.15831692877998726}}, {"docstring": " If a function `f` is continuous on a convex set `D \u2286 \u211d`, is differentiable on its interior, and `f'` is antitone on the interior, then `f` is concave on `D`.\n", "keywords": {"convex set": 0.009011535511097367, "interior": 0.04092200269394482, "function": 0.08012982629475915, "set": 0.08012982629475915, "continuous": 0.11145728654016383, "convex": 0.11145728654016383, "differentiable": 0.11145728654016383, "antitone": 0.11145728654016383, "concave": 0.11145728654016383}}, {"docstring": "Given a wide pullback in `C`, construct a product in `C/B`.\n", "keywords": {"construct a product": 0.015380821171891606, "wide pullback": 0.02570861714399338, "construct": 0.09568045026443411, "wide": 0.15831692877998726, "pullback": 0.15831692877998726, "product": 0.15831692877998726}}, {"docstring": "`I\u207b\u00b9` is the inverse of `I` if `I` has an inverse.\n", "keywords": {"inverse": 0.10191687733271076}}, {"docstring": " The subalgebra of `C(circle, \u2102)` generated by `z ^ n` for `n \u2208 \u2124` is invariant under complex conjugation.\n", "keywords": {"complex conjugation": 0.015380821171891606, "invariant under complex": 0.02570861714399338, "circle": 0.04491197687864554, "generated": 0.09568045026443411, "conjugation": 0.09568045026443411, "subalgebra": 0.15831692877998726, "invariant": 0.15831692877998726, "complex": 0.15831692877998726}}, {"docstring": "The sum of embeddings is an embedding.\n", "keywords": {"sum of embeddings": 0.13561210463159817, "sum": 0.2005079697193566, "embeddings": 0.29736558256021506, "embedding": 0.29736558256021506}}, {"docstring": "Path composition commutes with products\n", "keywords": {"Path composition commutes": 0.01655915082773619, "Path composition": 0.04940384002065631, "commutes with products": 0.04940384002065631, "composition commutes": 0.09700399286574239, "Path": 0.15831692877998726, "products": 0.15831692877998726, "composition": 0.29736558256021506, "commutes": 0.29736558256021506}}, {"docstring": "A version of `matrix.ext_iff` that unfolds the `matrix.transpose`.\n", "keywords": {"matrix.ext": 0.04491197687864554, "iff": 0.04491197687864554, "matrix.transpose": 0.04491197687864554, "version": 0.29736558256021506, "unfolds": 0.29736558256021506}}, {"docstring": "**Alias** of the reverse direction of measurable_iff_le_map`.\n", "keywords": {"direction of measurable": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "map": 0.04491197687864554, "measurable": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " Consider a function `f : \u03b1 \u00d7 \u03b2 \u2192 \u03b3`. Suppose that it is continuous on each \u201cvertical section\u201d `{a} \u00d7 univ`, `a : \u03b1`, and is Lipschitz continuous on each \u201chorizontal section\u201d `univ \u00d7 {b}`, `b : \u03b2` with the same Lipschitz constant `K`. Then it is continuous.  The actual statement uses (Lipschitz) continuity of `\u03bb y, f (a, y)` and `\u03bb x, f (x, b)` instead of continuity of `f` on subsets of the product space.\n", "keywords": {"univ": 0.10945480257782601, "Lipschitz": 0.11772899886835991, "continuous": 0.1445908816154583, "function": 0.17193520697818443, "Lipschitz constant": 0.17368207899664997, "Lipschitz continuous": 0.18092037629727406, "section": 0.193362241010565, "vertical section": 0.19336336634093576, "horizontal section": 0.19336336634093576, "continuity": 0.3025648416731815, "Suppose": 0.41898630710876256, "vertical": 0.41898630710876256, "horizontal": 0.41898630710876256, "constant": 0.41898630710876256, "space": 0.5628531872862514, "product space": 0.5764011593886618, "actual": 0.649625359798255, "statement": 0.649625359798255, "subsets": 0.649625359798255, "product": 0.649625359798255}}, {"docstring": " If `f : \u2102 \u2192 E` is complex differentiable on a closed disc of positive radius, then it is analytic on the corresponding open disc, and the coefficients of the power series are given by Cauchy integral formulas. See also `complex.has_fpower_series_on_ball_of_differentiable_off_countable` for a version of this lemma with weaker assumptions.\n", "keywords": {"Cauchy integral formulas": 0.0012849765078053277, "Cauchy integral": 0.011302941953930418, "positive radius": 0.01723389929226066, "integral formulas": 0.01723389929226066, "closed disc": 0.02643204301128304, "open disc": 0.02643204301128304, "complex differentiable": 0.04412290666835508, "power series": 0.04412290666835508, "disc of positive": 0.06209609919424286, "Cauchy": 0.0732841660182143, "disc": 0.08442488128014729, "radius": 0.11108684933926685, "formulas": 0.11108684933926685, "weaker assumptions": 0.13174480353401127, "differentiable": 0.13854230802699688, "series": 0.13854230802699688, "complex": 0.1525106165403513, "closed": 0.1525106165403513, "positive": 0.1525106165403513, "analytic": 0.1525106165403513}}, {"docstring": " If a function is differentiable and injective on a measurable set `s`, then its restriction to `s` is a measurable embedding.\n", "keywords": {"measurable set": 0.012767043132948382, "measurable embedding": 0.012767043132948382, "function is differentiable": 0.018641876658774394, "differentiable and injective": 0.018641876658774394, "measurable": 0.069255433448279, "set": 0.09101163530720666, "embedding": 0.09101163530720666, "function": 0.135280142484453, "differentiable": 0.135280142484453, "injective": 0.135280142484453, "restriction": 0.135280142484453}}, {"docstring": "The kernel morphism of a zero morphism is an isomorphism\n", "keywords": {"kernel morphism": 0.05913243875864445, "isomorphism": 0.11984314898676356, "morphism": 0.14323823713631006, "kernel": 0.19488865479360015}}, {"docstring": "**Alias** of the forward direction of sub_nonpos`.\n", "keywords": {"forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "nonpos": 0.04491197687864554, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "For `m < n`, `(n, m)` is in the transitive closure of a relation `~` if `succ i ~ i`  for all `i` between `n` and `m`.\n", "keywords": {"transitive closure": 0.013527995261974615, "relation": 0.0771485953923296, "succ": 0.0771485953923296, "transitive": 0.1155310835876123, "closure": 0.1155310835876123}}, {"docstring": " If, for all `x` in a set `s`, one has frequently `q < \u03c1 a / \u03bc a`, then `q * \u03bc s \u2264 \u03c1 s`, as proved in `measure_le_of_frequently_le`. Since `\u03c1 a / \u03bc a` tends almost everywhere to `v.lim_ratio_meas h\u03c1 x`, the same property holds for sets `s` on which `q < v.lim_ratio_meas h\u03c1`.\n", "keywords": {"frequently": 0.05556323512328092, "measure": 0.08697918992803758, "v.lim": 0.09067758920160383, "ratio": 0.09067758920160383, "meas": 0.12092626271319618, "proved": 0.15734121711617913, "holds for sets": 0.15858126996414348, "set": 0.18280845629257125, "sets": 0.18280845629257125, "property holds": 0.18308382625665404, "property": 0.39338448863683595, "holds": 0.39338448863683595}}, {"docstring": "An exponential lower bound on the central binomial coefficient. This bound is weaker than `four_pow_n_lt_n_mul_central_binom`, but it is of historical interest because it appears in Erd\u0151s's proof of Bertrand's postulate.\n", "keywords": {"central binomial coefficient": 0.020546115486730215, "exponential lower bound": 0.03449093151409623, "binomial coefficient": 0.03778968415624223, "exponential lower": 0.06148019930999511, "lower bound": 0.12470949484661577, "central binomial": 0.12470949484661577, "Bertrand postulate": 0.12509742225848872, "coefficient": 0.1513046335336394, "Erd\u0151s proof": 0.17973782615309083, "proof of Bertrand": 0.17973782615309083, "pow": 0.21580243272668717, "mul": 0.21580243272668717, "binom": 0.21580243272668717, "bound": 0.230365520888437, "central": 0.230365520888437, "exponential": 0.24066430701107397, "lower": 0.24066430701107397, "binomial": 0.24066430701107397, "Erd\u0151s": 0.2907626634476023, "Bertrand": 0.2907626634476023}}, {"docstring": " Additivity of a continuous multilinear map along all coordinates at the same time, writing `f (m + m')` as the sum  of `f (s.piecewise m m')` over all sets `s`.\n", "keywords": {"continuous multilinear map": 0.0008990471097494833, "continuous multilinear": 0.009239332327148086, "multilinear map": 0.009239332327148086, "writing": 0.04491197687864554, "Additivity": 0.06844581806138879, "time": 0.06844581806138879, "s.piecewise": 0.06844581806138879, "sets": 0.06844581806138879, "continuous": 0.09568045026443411, "multilinear": 0.09568045026443411, "map": 0.09568045026443411, "coordinates": 0.09568045026443411, "sum": 0.09568045026443411}}, {"docstring": "`padic_val_rat p 1` is 0 for any `p`.\n", "keywords": {"padic": 0.04491197687864554, "val": 0.04491197687864554, "rat": 0.09568045026443411}}, {"docstring": "A binary injective function is injective when only the right argument varies.\n", "keywords": {"binary injective function": 0.010962043841203115, "argument varies": 0.022138323509052035, "binary injective": 0.05417025203414716, "injective function": 0.05417025203414716, "varies": 0.11521656054299435, "function is injective": 0.11793310824193863, "injective": 0.13667842094541144, "binary": 0.1879836817695587, "function": 0.1879836817695587, "argument": 0.1879836817695587}}, {"docstring": "A group homomorphism is a monoid homomorphism.\n", "keywords": {"group homomorphism": 0.05913243875864445, "monoid homomorphism": 0.05913243875864445, "homomorphism": 0.14323823713631006, "group": 0.19488865479360015, "monoid": 0.19488865479360015}}, {"docstring": "`x^n`, `n : \u2115` is strictly convex on the whole real line whenever `n \u2260 0` is even.\n", "keywords": {"strictly convex": 0.013527995261974615, "real line": 0.013527995261974615, "strictly": 0.1155310835876123, "convex": 0.1155310835876123, "real": 0.1155310835876123, "line": 0.1155310835876123}}, {"docstring": "Hilbert basis theorem: a polynomial ring over a noetherian ring is a noetherian ring.\n", "keywords": {"Hilbert basis theorem": 0.0017244540847864663, "noetherian ring": 0.013984820309993255, "Hilbert basis": 0.016199470991553867, "basis theorem": 0.016199470991553867, "polynomial ring": 0.03548219205177234, "noetherian": 0.060903728797914024, "ring": 0.07445801674689752, "Hilbert": 0.10391704273842664, "theorem": 0.10391704273842664, "basis": 0.1534034365742674, "polynomial": 0.1534034365742674}}, {"docstring": " Let `f` be a function continuous on a convex (or, equivalently, connected) subset `D` of the real line. If `f` is differentiable on the interior of `D` and `f' \u2264 C`, then `f` grows at most as fast as `C * x` on `D`, i.e., `f y - f x \u2264 C * (y - x)` whenever `x, y \u2208 D`, `x \u2264 y`.\n", "keywords": {"real line": 0.007948096222458798, "function continuous": 0.010159422250580143, "equivalently": 0.05899937629682816, "connected": 0.05899937629682816, "subset": 0.05899937629682816, "convex": 0.07862947958994491, "line": 0.07862947958994491, "function": 0.10028582371075691, "continuous": 0.10028582371075691, "real": 0.10028582371075691, "grows": 0.22862739428695167, "differentiable": 0.2790829227183407, "interior": 0.2790829227183407, "fast": 0.2790829227183407}}, {"docstring": "Left-regular multiplication on `R` is equivalent to `R`-regularity of `R` itself.\n", "keywords": {"Left-regular multiplication": 0.00899321792126428, "Left-regular": 0.0771485953923296, "regularity": 0.0771485953923296, "multiplication": 0.1155310835876123, "equivalent": 0.1155310835876123}}, {"docstring": "See also `finset.product_bUnion`.\n", "keywords": {"finset.product": 0.04491197687864554, "bUnion": 0.04491197687864554}}, {"docstring": " Showing one side of the equivalence between the definitions `is_dedekind_domain_inv` and `is_dedekind_domain` of Dedekind domains.\n", "keywords": {"Showing one side": 0.016976488912374355, "Dedekind domains": 0.028182925845569355, "inv": 0.06277812920049468, "dedekind": 0.062864810349904, "domain": 0.07267027944154449, "Showing": 0.10640984343471895, "definitions": 0.10640984343471895, "domains": 0.14534055888308897, "side": 0.15687551234391603, "equivalence": 0.15687551234391603}}, {"docstring": " If a monotone function `u : \u03b9 \u2192 \u03b1` tends to `at_bot` along *some* non-trivial filter `l`, then it tends to `at_bot` along `at_bot`.\n", "keywords": {"non-trivial filter": 0.010743108496861263, "bot": 0.012755616032281777, "monotone function": 0.015947706066152048, "function": 0.103096657787716, "non-trivial": 0.103096657787716, "filter": 0.103096657787716, "monotone": 0.15225875770903138}}, {"docstring": "Equivalence of nonzero vectors, in terms of same_ray.\n", "keywords": {"Equivalence of nonzero": 0.015380821171891606, "nonzero vectors": 0.015380821171891606, "ray": 0.04491197687864554, "Equivalence": 0.09568045026443411, "vectors": 0.09568045026443411, "nonzero": 0.15831692877998726, "terms": 0.15831692877998726}}, {"docstring": "**Alias** of zero_lt_four`.\n", "keywords": {"Alias": 0.030396371632413578}}, {"docstring": "See also `finsum_eq_of_bijective`, `fintype.sum_bijective` and `finset.sum_bij`.\n", "keywords": {"bijective": 0.02006098734604785, "finsum": 0.054709255964732355, "fintype.sum": 0.054709255964732355, "finset.sum": 0.054709255964732355, "bij": 0.054709255964732355}}, {"docstring": "The angle at a point is nonnegative.\n", "keywords": {"point is nonnegative": 0.04940384002065631, "nonnegative": 0.15831692877998726, "angle": 0.29736558256021506, "point": 0.29736558256021506}}, {"docstring": "`choose n 2` is the `n`-th triangle number.\n", "keywords": {"triangle number": 0.015380821171891606, "choose": 0.09568045026443411, "number": 0.09568045026443411, "triangle": 0.15831692877998726}}, {"docstring": "**Alias** of lt_of_eq_of_lt'`.\n", "keywords": {"Alias": 0.030396371632413578}}, {"docstring": "If `M` is finite and free, `finrank M = rank M`.\n", "keywords": {"finite and free": 0.00899321792126428, "free": 0.0771485953923296, "finrank": 0.0771485953923296, "rank": 0.0771485953923296, "finite": 0.1155310835876123}}, {"docstring": "Concatenating the first element of a tuple with its tail gives back the original tuple\n", "keywords": {"tail gives back": 0.035715520099333646, "back the original": 0.035715520099333646, "original tuple": 0.05259515133015473, "Concatenating": 0.11369206228658875, "tuple": 0.13453835116331675, "element": 0.18569843656348187, "tail": 0.18569843656348187, "back": 0.18569843656348187, "original": 0.18569843656348187}}, {"docstring": " This is just a special case of the global `smul_mul_assoc` lemma that requires less typeclass search (and was here first).\n", "keywords": {"smul": 0.04491197687864554, "mul": 0.04491197687864554, "assoc": 0.04491197687864554, "lemma that requires": 0.04940384002065631, "typeclass search": 0.04940384002065631, "special case": 0.09700399286574239, "requires less typeclass": 0.09700399286574239, "global": 0.15831692877998726, "lemma": 0.15831692877998726, "search": 0.15831692877998726, "special": 0.29736558256021506, "case": 0.29736558256021506, "requires": 0.29736558256021506, "typeclass": 0.29736558256021506}}, {"docstring": " The type of ordinals in universe `u` is not `small.{u}`. This is the type-theoretic analog of the Burali-Forti paradox.\n", "keywords": {"ordinals in universe": 0.015099935621315529, "type of ordinals": 0.02249651976012989, "small.": 0.05899937629682816, "universe": 0.10028582371075691, "Burali-Forti paradox": 0.11755105063023073, "type": 0.14832923246533666, "ordinals": 0.14832923246533666, "type-theoretic analog": 0.165573765898185, "paradox": 0.2790829227183407, "type-theoretic": 0.37689977775222827, "analog": 0.37689977775222827, "Burali-Forti": 0.37689977775222827}}, {"docstring": "**Alias** of the reverse direction of neg_strict_concave_on_iff`.\n", "keywords": {"direction of neg": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "strict": 0.04491197687864554, "concave": 0.04491197687864554, "iff": 0.04491197687864554, "neg": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "If two continuous functions on `[a, b]` have the same right derivative and are equal at `a`,  then they are equal everywhere on `[a, b]`.\n", "keywords": {"continuous functions": 0.020225813225353943, "equal": 0.07334489383741181, "continuous": 0.1408007092310104, "functions": 0.1408007092310104, "derivative": 0.1408007092310104}}, {"docstring": " The angle at the apex of an isosceles triangle is `\u03c0` minus twice a base angle, oriented vector angle form.\n", "keywords": {"oriented vector angle": 0.0037133477531779554, "vector angle form": 0.0037133477531779554, "oriented vector": 0.014403555314280002, "isosceles triangle": 0.021479477819866782, "angle form": 0.024488271749421246, "base angle": 0.03669766191769447, "vector angle": 0.03669766191769447, "angle": 0.08137068741048219, "minus": 0.09791785820909267, "oriented": 0.09791785820909267, "form": 0.09791785820909267, "apex": 0.14500969419684506, "isosceles": 0.14500969419684506, "triangle": 0.14500969419684506, "base": 0.14500969419684506, "vector": 0.14500969419684506}}, {"docstring": "An element is add-right-regular if and only if adding it on the right to a add-right-regular element is add-right-regular.\n", "keywords": {"element": 0.09015781704888436, "adding": 0.1616313649453326}}, {"docstring": " Series divergence test: if `f` is a convergent series, then `f x` tends to zero along `cofinite`.\n", "keywords": {"Series divergence test": 0.006525501026847568, "divergence test": 0.022138323509052035, "Series divergence": 0.05417025203414716, "convergent series": 0.05417025203414716, "cofinite": 0.054709255964732355, "test": 0.11521656054299435, "Series": 0.13667842094541144, "divergence": 0.1879836817695587, "convergent": 0.1879836817695587}}, {"docstring": " **Riesz's theorem**: if a closed ball of positive radius is compact in a vector space, then the space is finite-dimensional.\n", "keywords": {"Riesz theorem": 0.0068330400702793425, "closed ball": 0.03346752176983843, "ball of positive": 0.03346752176983843, "positive radius": 0.03346752176983843, "radius is compact": 0.03346752176983843, "vector space": 0.04877831388921351, "Riesz": 0.06176713399260923, "space is finite-dimensional": 0.0663938400060379, "theorem": 0.10987504304330521, "finite-dimensional": 0.10987504304330521, "space": 0.12922594861139264, "closed": 0.17995476918065306, "ball": 0.17995476918065306, "positive": 0.17995476918065306, "radius": 0.17995476918065306, "compact": 0.17995476918065306, "vector": 0.17995476918065306}}, {"docstring": "An additive group homomorphism is injective if its kernel is trivial.\n", "keywords": {"additive group homomorphism": 0.0042542192213185686, "kernel is trivial": 0.015380821171891606, "additive group": 0.02570861714399338, "group homomorphism": 0.02570861714399338, "homomorphism is injective": 0.02570861714399338, "trivial": 0.09568045026443411, "additive": 0.15831692877998726, "group": 0.15831692877998726, "homomorphism": 0.15831692877998726, "injective": 0.15831692877998726, "kernel": 0.15831692877998726}}, {"docstring": " **Rearrangement Inequality**: Pointwise scalar multiplication of `f` and `g` is maximized when `f` and `g` monovary together. Stated by permuting the entries of `f`.\n", "keywords": {"Pointwise scalar multiplication": 0.001271864619686412, "Rearrangement Inequality": 0.0031146356952437464, "Pointwise scalar": 0.008334116283452563, "scalar multiplication": 0.02249651976012989, "Rearrangement": 0.05572221155747183, "Inequality": 0.05572221155747183, "Pointwise": 0.05572221155747183, "monovary": 0.10028582371075691, "Stated by permuting": 0.11755105063023073, "scalar": 0.14832923246533666, "multiplication": 0.14832923246533666, "maximized": 0.14832923246533666, "permuting the entries": 0.165573765898185, "Stated": 0.2790829227183407, "permuting": 0.37689977775222827, "entries": 0.37689977775222827}}, {"docstring": "`m` is not divisible by `n` iff it is between `n * k` and `n * (k + 1)` for some `k`.\n", "keywords": {"iff": 0.0771485953923296, "divisible": 0.1155310835876123}}, {"docstring": " Write the iterated derivative as the composition of a continuous linear equiv and the iterated Fr\u00e9chet derivative\n", "keywords": {"iterated Fr\u00e9chet derivative": 0.0021685808594799666, "continuous linear equiv": 0.002950351281893197, "iterated Fr\u00e9chet": 0.011000128179261149, "Write the iterated": 0.0141210054546179, "Fr\u00e9chet derivative": 0.014265107890262672, "continuous linear": 0.020225813225353943, "linear equiv": 0.020225813225353943, "iterated derivative": 0.02861065623655176, "iterated": 0.07334489383741181, "Fr\u00e9chet": 0.07417313840262335, "derivative": 0.094808423351325, "Write": 0.09492398510093508, "composition": 0.1408007092310104, "continuous": 0.1408007092310104, "linear": 0.1408007092310104, "equiv": 0.1408007092310104}}, {"docstring": "`X ^ n - a` is monic.\n", "keywords": {"monic": 0.15831692877998726}}, {"docstring": " Shows that the `n`th denominator is greater than or equal to the `n + 1`th fibonacci number, that is `nat.fib (n + 1) \u2264 B\u2099`.\n", "keywords": {"fibonacci number": 0.00899321792126428, "denominator is greater": 0.013527995261974615, "nat.fib": 0.04491197687864554, "Shows": 0.0771485953923296, "number": 0.0771485953923296, "denominator": 0.1155310835876123, "greater": 0.1155310835876123, "equal": 0.1155310835876123, "fibonacci": 0.1155310835876123}}, {"docstring": " Induction principle for `ratfunc K`: if `f p q : P (ratfunc.mk p q)` for all `p q`, then `P` holds on all elements of `ratfunc K`.  See also `induction_on`, which is a recursion principle defined in terms of `algebra_map`.\n", "keywords": {"ratfunc": 0.03762931414416494, "Induction principle": 0.0446717808470731, "recursion principle defined": 0.04685492317113657, "Induction": 0.08475199594448732, "recursion principle": 0.10348114423253522, "principle defined": 0.10348114423253522, "ratfunc.mk": 0.11123787339453431, "holds": 0.11123787339453431, "principle": 0.1261372842619134, "elements": 0.14556006925329204, "defined in terms": 0.16033530994679432, "algebra": 0.23187318976123666, "map": 0.23187318976123666, "recursion": 0.3717259102962292, "defined": 0.3717259102962292, "terms": 0.3717259102962292}}, {"docstring": " The supremum of a family of submodules is equal to the range of `dfinsupp.lsum`; that is every element in the `supr` can be produced from taking a finite number of non-zero elements of `p i`, coercing them to `N`, and summing them.\n", "keywords": {"family of submodules": 0.009071367319285083, "submodules is equal": 0.009071367319285083, "produced from taking": 0.009071367319285083, "taking a finite": 0.009071367319285083, "finite number": 0.009071367319285083, "number of non-zero": 0.009071367319285083, "non-zero elements": 0.010335156430446083, "dfinsupp.lsum": 0.05073074730801677, "supr": 0.05073074730801677, "coercing": 0.07145724125381893, "supremum": 0.09481464751642843, "family": 0.09481464751642843, "submodules": 0.09481464751642843, "equal": 0.09481464751642843, "range": 0.09481464751642843, "produced": 0.09481464751642843, "taking": 0.09481464751642843, "finite": 0.09481464751642843, "number": 0.09481464751642843, "non-zero": 0.09481464751642843}}, {"docstring": "For `m \u2264 n`, `(n, m)` is in the reflexive-transitive closure of `~` if `succ i ~ i`  for all `i` between `n` and `m`.\n", "keywords": {"reflexive-transitive closure": 0.013527995261974615, "succ": 0.0771485953923296, "reflexive-transitive": 0.1155310835876123, "closure": 0.1155310835876123}}, {"docstring": "Continuity of `urysohns.CU.lim`. See module docstring for a sketch of the proofs.\n", "keywords": {"Continuity": 0.12363091320521931, "module docstring": 0.2766850298235749, "proofs": 0.32883716426354986, "module": 0.46553351027698087, "docstring": 0.46553351027698087, "sketch": 0.46553351027698087}}, {"docstring": " The strong pigeonhole principle for finitely many pigeons and pigeonholes.  Given a function `f` between finite types `\u03b1` and `\u03b2` and a number `n` such that `card \u03b2 * n \u2264 card \u03b1`, there exists an element `y : \u03b2` such that its preimage has at least `n` elements. See also `fintype.exists_lt_card_fiber_of_mul_lt_card` for a stronger statement.\n", "keywords": {"strong pigeonhole principle": 0.010235244747007897, "principle for finitely": 0.04294375634692697, "finitely many pigeons": 0.04294375634692697, "strong pigeonhole": 0.04686173518074982, "pigeonhole principle": 0.04686173518074982, "card": 0.09512628365470802, "pigeons and pigeonholes": 0.10416474017966663, "strong": 0.20291753164511378, "principle": 0.20291753164511378, "finitely": 0.20291753164511378, "pigeons": 0.20291753164511378, "finite types": 0.21730852685460442, "pigeonhole": 0.22060201189650275, "element": 0.3560641695209663, "elements": 0.3560641695209663, "stronger statement": 0.36205868380252626, "fintype.exists": 0.36407610856088846, "fiber": 0.36407610856088846, "mul": 0.36407610856088846, "exists an element": 0.3785756810212855}}, {"docstring": "Binet's formula as a function equality.\n", "keywords": {"Binet formula": 0.04940384002065631, "function equality": 0.04940384002065631, "Binet": 0.15831692877998726, "equality": 0.15831692877998726, "formula": 0.29736558256021506, "function": 0.29736558256021506}}, {"docstring": "An inducing map with an open range is an open map.\n", "keywords": {"open range": 0.024047742351991808, "inducing map": 0.03117712943655666, "open map": 0.03334643460336021, "open": 0.07915846438999359, "map": 0.10191687733271076, "inducing": 0.14832923246533666, "range": 0.14832923246533666}}, {"docstring": " The `at_bot` filter for an open interval `Iio a` comes from the `at_bot` filter in the ambient order.\n", "keywords": {"open interval": 0.013833902242147065, "ambient order": 0.013833902242147065, "bot": 0.020944683225967962, "filter": 0.054147325146855434, "Iio": 0.05435364549612988, "interval": 0.09593831581184391, "order": 0.09593831581184391, "open": 0.14222822903176371, "ambient": 0.14222822903176371}}, {"docstring": " If `B/K` is a nontrivial algebra over a field, and `x` is an element of `K`, then the minimal polynomial of `algebra_map K B x` is `X - C x`.\n", "keywords": {"minimal polynomial": 0.01281102963567174, "nontrivial algebra": 0.015824512606866667, "algebra": 0.06925543344827902, "field": 0.08088209179216702, "map": 0.08088209179216702, "nontrivial": 0.11246769819744629, "element": 0.11246769819744629, "minimal": 0.11246769819744629, "polynomial": 0.11246769819744629}}, {"docstring": " Bounding the Hausdorff edistance by exhibiting, for any point in each set, another point in the other set at controlled distance\n", "keywords": {"Bounding the Hausdorff": 0.011227778593761756, "Hausdorff edistance": 0.018423372132524086, "edistance by exhibiting": 0.022885248721446715, "controlled distance": 0.022885248721446715, "Hausdorff": 0.09474983170388594, "point": 0.10586606907408062, "Bounding": 0.11718348279991213, "exhibiting": 0.11718348279991213, "distance": 0.11718348279991213, "set at controlled": 0.12194096740933039, "set": 0.13945519496053638, "edistance": 0.19092478917347616, "controlled": 0.19092478917347616}}, {"docstring": "Polynomial evaluation commutes with `list.prod`\n", "keywords": {"Polynomial evaluation commutes": 0.01655915082773619, "list.prod": 0.04491197687864554, "Polynomial evaluation": 0.04940384002065631, "evaluation commutes": 0.09700399286574239, "Polynomial": 0.15831692877998726, "evaluation": 0.29736558256021506, "commutes": 0.29736558256021506}}, {"docstring": " In the tangent bundle to the model space, the charts are just the canonical identification between a product type and a sigma type, a.k.a. `equiv.sigma_equiv_prod`.\n", "keywords": {"model space": 0.015411105191775794, "tangent bundle": 0.0213356894579572, "canonical identification": 0.0213356894579572, "product type": 0.023368392381867425, "sigma type": 0.023368392381867425, "type": 0.07899466372375519, "space": 0.10500809729033178, "tangent": 0.14453368873287326, "bundle": 0.14453368873287326, "model": 0.14453368873287326, "charts": 0.14453368873287326, "canonical": 0.14453368873287326, "identification": 0.14453368873287326, "product": 0.14453368873287326, "sigma": 0.14453368873287326, "equiv.sigma": 0.20684865028795477, "equiv": 0.20684865028795477, "prod": 0.20684865028795477}}, {"docstring": "An auxiliary lemma for Liouville's theorem `differentiable.apply_eq_apply_of_bounded`.\n", "keywords": {"Liouville theorem": 0.023458380875189744, "differentiable.apply": 0.04491197687864554, "apply": 0.04491197687864554, "bounded": 0.04491197687864554, "lemma for Liouville": 0.04498862876540802, "auxiliary lemma": 0.09700399286574239, "Liouville": 0.1447773057422032, "theorem": 0.15831692877998726, "auxiliary": 0.29736558256021506, "lemma": 0.29736558256021506}}, {"docstring": "The real diagonal matrix `diagonal v` is hermitian.\n", "keywords": {"real diagonal matrix": 0.006901478775605423, "diagonal matrix": 0.03378800767844735, "real diagonal": 0.0562460611896591, "matrix": 0.11718348279991213, "hermitian": 0.11718348279991213, "diagonal": 0.13945519496053638, "real": 0.19092478917347616}}, {"docstring": "`fib (n + 2)` is strictly monotone.\n", "keywords": {"fib": 0.04491197687864554, "strictly monotone": 0.04940384002065631, "monotone": 0.15831692877998726, "strictly": 0.29736558256021506}}, {"docstring": "The `average_map` sends elements of `V` to the subspace of invariants.\n", "keywords": {"sends elements": 0.015380821171891606, "subspace of invariants": 0.015380821171891606, "average": 0.04491197687864554, "map": 0.04491197687864554, "sends": 0.09568045026443411, "invariants": 0.09568045026443411, "elements": 0.15831692877998726, "subspace": 0.15831692877998726}}, {"docstring": "If `f = g = h` everywhere but at `i`, where `f i = g i + h i`, then the product of `f` over `s`  is the sum of the products of `g` and `h`.\n", "keywords": {"product": 0.09568045026443411, "products": 0.09568045026443411, "sum": 0.12363091320521931}}, {"docstring": "**Formula for the Number of Combinations**\n", "keywords": {"Number of Combinations": 0.012602360123953448, "Formula": 0.08596317751626563, "Combinations": 0.08596317751626563, "Number": 0.1447773057422032}}, {"docstring": "If a group exponent exists, the group is additively torsion.\n", "keywords": {"group exponent exists": 0.006525501026847568, "exponent exists": 0.022138323509052035, "additively torsion": 0.022138323509052035, "group exponent": 0.05417025203414716, "exists": 0.11521656054299435, "torsion": 0.11521656054299435, "group is additively": 0.1179331082419386, "group": 0.13667842094541144, "exponent": 0.1879836817695587, "additively": 0.1879836817695587}}, {"docstring": "First version, with pointwise equicontinuity and range in a compact space\n", "keywords": {"compact space": 0.04940384002065631, "pointwise equicontinuity": 0.09700399286574239, "equicontinuity and range": 0.09700399286574239, "version": 0.15831692877998726, "space": 0.15831692877998726, "pointwise": 0.29736558256021506, "equicontinuity": 0.29736558256021506, "range": 0.29736558256021506, "compact": 0.29736558256021506}}, {"docstring": " A version of `quotient.induction_on\u2083` taking `{s\u2081 : setoid \u03b1} {s\u2082 : setoid \u03b2} {s\u2083 : setoid \u03b3}` as implicit arguments instead of instance arguments.\n", "keywords": {"implicit arguments": 0.03283771010389657, "instance arguments": 0.03283771010389657, "setoid": 0.045318628803737875, "quotient.induction": 0.06037786452709367, "taking": 0.10252384836042068, "arguments": 0.1049580867604466, "version": 0.15145892749810547, "implicit": 0.15145892749810547, "instance": 0.15145892749810547}}, {"docstring": "See note [partially-applied ext lemmas].\n", "keywords": {"partially-applied ext lemmas": 0.008321268142839145, "partially-applied ext": 0.04940384002065631, "ext lemmas": 0.04940384002065631, "note": 0.15831692877998726, "partially-applied": 0.15831692877998726, "lemmas": 0.15831692877998726, "ext": 0.29736558256021506}}, {"docstring": "`zpow b` and `int.log b` (almost) form a Galois connection.\n", "keywords": {"form a Galois": 0.008293207122436794, "Galois connection": 0.008293207122436794, "Galois": 0.08596317751626563, "zpow": 0.09568045026443411, "int.log": 0.09568045026443411, "form": 0.09568045026443411, "connection": 0.09568045026443411}}, {"docstring": "Given an open finite set `S` in a T\u2080 space, there is some `x \u2208 S` such that `{x}` is open.\n", "keywords": {"open finite set": 0.006901478775605423, "finite set": 0.022885248721446715, "space": 0.055708263664958506, "open finite": 0.0562460611896591, "set": 0.11718348279991213, "open": 0.13945519496053638, "finite": 0.19092478917347616}}, {"docstring": " Like `swap_induction_on`, but with the composition on the right of `f`.  An induction principle for permutations. If `P` holds for the identity permutation, and is preserved under composition with a non-trivial swap, then `P` holds for all permutations.\n", "keywords": {"swap": 0.18660428299977214, "holds": 0.2077142839875152, "induction": 0.22301656196397493, "permutations": 0.2277089732108538, "composition": 0.26927020535933543, "non-trivial swap": 0.3101899994281635, "induction principle": 0.3200351720691991, "identity permutation": 0.4062779026255075, "principle": 0.5435570025415472, "identity": 0.6343689366020735, "preserved": 0.6343689366020735, "non-trivial": 0.6343689366020735, "principle for permutations": 0.7031659585036445, "preserved under composition": 0.8927626387702193}}, {"docstring": "Add an instance to \"undo\" coercion transitivity into a chain of coercions, because   most simp lemmas are stated with respect to simple coercions and will not match when   part of a chain.\n", "keywords": {"Add an instance": 0.01418497479576194, "simp lemmas": 0.021159974244976832, "lemmas are stated": 0.021159974244976832, "stated with respect": 0.021159974244976832, "respect to simple": 0.021159974244976832, "match when part": 0.021159974244976832, "coercion transitivity": 0.03599146900687668, "simple coercions": 0.03599146900687668, "undo": 0.05708058999153848, "chain": 0.07574239163915727, "Add": 0.09716295641363648, "coercions": 0.12067094743381088, "instance": 0.14394967063606187, "transitivity": 0.14394967063606187, "simp": 0.14394967063606187, "lemmas": 0.14394967063606187, "stated": 0.14394967063606187, "respect": 0.14394967063606187, "simple": 0.14394967063606187, "match": 0.14394967063606187}}, {"docstring": " the minimal distance to the empty set is 0 (if you want to have the more reasonable value \u221e instead, use `inf_edist`, which takes values in \u211d\u22650\u221e)\n", "keywords": {"minimal distance": 0.013527995261974615, "empty set": 0.013527995261974615, "edist": 0.04491197687864554, "minimal": 0.1155310835876123, "distance": 0.1155310835876123, "empty": 0.1155310835876123, "set": 0.1155310835876123, "reasonable": 0.1155310835876123}}, {"docstring": " Every x greater than or equal to 1 is between two successive natural-number powers of every y greater than one.\n", "keywords": {"successive natural-number powers": 0.007321883374053632, "successive natural-number": 0.03663237450220032, "natural-number powers": 0.03663237450220032, "greater": 0.10356599227702172, "equal": 0.1879836817695587, "successive": 0.1879836817695587, "natural-number": 0.1879836817695587, "powers": 0.1879836817695587}}, {"docstring": " The product of `f y` over `y \u2208 set.range g` equals the product of `f (g i)` over all `i` provided that `g` is injective on `mul_support (f \u2218 g)`.\n", "keywords": {"equals the product": 0.006753527323813784, "product": 0.041469149763563216, "mul": 0.053316999302383886, "support": 0.053316999302383886, "set.range": 0.08088209179216702, "equals": 0.08088209179216702, "provided": 0.08088209179216702, "injective": 0.11246769819744629}}, {"docstring": " The dimension of a noetherian module over a division ring, as a cardinal, is strictly less than the first infinite cardinal `\u2135\u2080`.\n", "keywords": {"division ring": 0.012240009979360944, "infinite cardinal": 0.01347319449596249, "noetherian module": 0.018310930906343142, "cardinal": 0.04956935957632033, "ring": 0.09017440044927587, "dimension": 0.13409574860218185, "noetherian": 0.13409574860218185, "module": 0.13409574860218185, "division": 0.13409574860218185, "strictly": 0.13409574860218185, "infinite": 0.13409574860218185}}, {"docstring": "We can swap `a` and `b` in a minimal solution to `a ^ 4 + b ^ 4 = c ^ 2`.\n", "keywords": {"minimal solution": 0.013527995261974615, "swap": 0.0771485953923296, "minimal": 0.1155310835876123, "solution": 0.1155310835876123}}, {"docstring": " Strict convexity is equivalent to `\u2225a \u2022 x + b \u2022 y\u2225 < 1` for all `x` and `y` of norm at most `1` and all strictly positive `a` and `b` such that `a + b = 1`. This shows that we only need to check it for fixed `a` and `b`.\n", "keywords": {"Strict convexity": 0.011154056927717123, "strictly positive": 0.011154056927717123, "convexity is equivalent": 0.01552184797949213, "Strict": 0.08922538916412363, "positive": 0.08922538916412363, "convexity": 0.12363091320521931, "equivalent": 0.12363091320521931, "norm": 0.12363091320521931, "strictly": 0.12363091320521931, "fixed": 0.25386721785551913, "shows": 0.32883716426354986, "check": 0.32883716426354986}}, {"docstring": "**De Moivre's formula**\n", "keywords": {"Moivre formula": 0.023458380875189744, "Moivre": 0.1447773057422032, "formula": 0.15831692877998726}}, {"docstring": "Composition of elementary embeddings is associative.\n", "keywords": {"Composition of elementary": 0.04940384002065631, "embeddings is associative": 0.04940384002065631, "elementary embeddings": 0.09700399286574239, "Composition": 0.15831692877998726, "associative": 0.15831692877998726, "elementary": 0.29736558256021506, "embeddings": 0.29736558256021506}}, {"docstring": "The direction of the affine span is the `vector_span`.\n", "keywords": {"affine span": 0.027430531955772185, "vector": 0.055708263664958506, "span": 0.094808423351325, "direction": 0.1408007092310104, "affine": 0.1408007092310104}}, {"docstring": "An intermediate field is closed under subtraction\n", "keywords": {"closed under subtraction": 0.04940384002065631, "intermediate field": 0.09700399286574239, "field is closed": 0.09700399286574239, "subtraction": 0.15831692877998726, "intermediate": 0.29736558256021506, "field": 0.29736558256021506, "closed": 0.29736558256021506}}, {"docstring": "An `add_subgroup` is closed under subtraction.\n", "keywords": {"add": 0.04491197687864554, "subgroup": 0.04491197687864554, "closed under subtraction": 0.04940384002065631, "subtraction": 0.15831692877998726, "closed": 0.29736558256021506}}, {"docstring": "Fekete's lemma: a subadditive sequence which is bounded below converges.\n", "keywords": {"Fekete lemma": 0.02570861714399338, "bounded below converges": 0.04940384002065631, "subadditive sequence": 0.09700399286574239, "Fekete": 0.15831692877998726, "lemma": 0.15831692877998726, "converges": 0.15831692877998726, "subadditive": 0.29736558256021506, "sequence": 0.29736558256021506, "bounded": 0.29736558256021506}}, {"docstring": "When there is a global minimum, every set is bounded below.\n", "keywords": {"global minimum": 0.015380821171891606, "set is bounded": 0.02570861714399338, "minimum": 0.09568045026443411, "global": 0.15831692877998726, "set": 0.15831692877998726, "bounded": 0.15831692877998726}}, {"docstring": " **Equality case of Rearrangement Inequality**: Pointwise scalar multiplication of `f` and `g`, which monovary together, is unchanged by a permutation if and only if `f \u2218 \u03c3` and `g` monovary together. Stated by permuting the entries of `f`.\n", "keywords": {"Pointwise scalar multiplication": 0.0019254155628980188, "Rearrangement Inequality": 0.0050414360735746774, "Equality case": 0.010681703670791362, "Pointwise scalar": 0.010681703670791362, "case of Rearrangement": 0.0144961168780819, "scalar multiplication": 0.031040804666112243, "Equality": 0.060911257173420906, "Inequality": 0.060911257173420906, "Pointwise": 0.060911257173420906, "monovary": 0.07953440658135287, "Rearrangement": 0.08235173134587291, "Stated by permuting": 0.1549537691794176, "case": 0.17351161766281323, "scalar": 0.17351161766281323, "multiplication": 0.17351161766281323, "unchanged": 0.17351161766281323, "permutation": 0.17351161766281323, "permuting the entries": 0.21626281206510953, "Stated": 0.31817081130554614, "permuting": 0.42167437397336704}}, {"docstring": " If every element belongs to at least `n` finsets, then the sum of their sizes is at least `n` times how many they are.\n", "keywords": {"element belongs": 0.02570861714399338, "finsets": 0.04491197687864554, "times": 0.09568045026443411, "element": 0.15831692877998726, "belongs": 0.15831692877998726, "sum": 0.15831692877998726, "sizes": 0.15831692877998726}}, {"docstring": " Given three nonzero vectors, the angle between the second and the third plus the angle between the first and the second equals the angle between the first and the third.\n", "keywords": {"equals the angle": 0.0052704429424274965, "nonzero vectors": 0.006828097155944431, "angle": 0.019444284326463328, "vectors": 0.07545593074802887, "nonzero": 0.08987750021439836, "equals": 0.08987750021439836}}, {"docstring": " Gives a `set.finite` for the `finset` coerced to a `set`. This is a wrapper around `set.finite_of_fintype`.\n", "keywords": {"set.finite": 0.044631026753425326, "finset": 0.07562090863435546, "set": 0.07562090863435546, "coerced": 0.12696931063105557, "fintype": 0.22125774619993788, "wrapper": 0.44109960011701166}}, {"docstring": "**Alias** of the forward direction of subsingleton_iff_zero_eq_one`.\n", "keywords": {"direction of subsingleton": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "subsingleton": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " The `i + j`-th element of a list coincides with the `j`-th element of the list obtained by dropping the first `i` elements. Version designed to rewrite from the big list to the small list.\n", "keywords": {"obtained by dropping": 0.025352899646504754, "list coincides": 0.053319012144560876, "list obtained": 0.053319012144560876, "element": 0.055690026416501996, "list": 0.0804794580748145, "elements": 0.11138005283300399, "big list": 0.1449268892918279, "small list": 0.1449268892918279, "Version designed": 0.14994647962112853, "coincides": 0.15724510567942473, "obtained": 0.15724510567942473, "dropping": 0.15724510567942473, "designed to rewrite": 0.18289336848462526, "Version": 0.3316137006460071, "designed": 0.39321147279387364, "rewrite": 0.39321147279387364, "big": 0.39321147279387364, "small": 0.39321147279387364}}, {"docstring": "The first projection within a domain at a point in a product is `C^\u221e`.\n", "keywords": {"projection": 0.1155310835876123, "domain": 0.1155310835876123, "point": 0.1155310835876123, "product": 0.1155310835876123}}, {"docstring": "**Alias** of the reverse direction of mdifferentiable_at_iff_differentiable_at`.\n", "keywords": {"direction of mdifferentiable": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "differentiable": 0.04491197687864554, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "The range of `to_span_singleton x` is the span of `x`.\n", "keywords": {"singleton": 0.11984314898676356, "span": 0.14323823713631006, "range": 0.19488865479360015}}, {"docstring": " If `m` and `n` are natural numbers, then the natural number `m^n` is even if and only if `m` is even and `n` is positive.\n", "keywords": {"natural numbers": 0.013110400705784906, "numbers": 0.07951805005084045, "number": 0.07951805005084045, "natural": 0.08136984231491269, "positive": 0.10226642604417549}}, {"docstring": "Pons asinorum, oriented vector angle form.\n", "keywords": {"oriented vector angle": 0.01655915082773619, "vector angle form": 0.016559150827736194, "Pons asinorum": 0.02570861714399338, "oriented vector": 0.04940384002065631, "angle form": 0.04940384002065631, "vector angle": 0.09700399286574239, "Pons": 0.15831692877998726, "asinorum": 0.15831692877998726, "oriented": 0.15831692877998726, "form": 0.15831692877998726, "vector": 0.29736558256021506, "angle": 0.29736558256021506}}, {"docstring": "Characteristic `\u2260 2` and nontrivial implies that `-1 \u2260 1`.\n", "keywords": {"nontrivial implies": 0.02570861714399338, "Characteristic": 0.04491197687864554, "nontrivial": 0.15831692877998726, "implies": 0.15831692877998726}}, {"docstring": " An element of a complex star module can be decomposed into self-adjoint \"real\" and \"imaginary\" parts\n", "keywords": {"complex star module": 0.03339840940482845, "real": 0.04491197687864554, "imaginary": 0.04491197687864554, "parts": 0.04491197687864554, "decomposed into self-adjoint": 0.04940384002065631, "complex star": 0.09700399286574239, "star module": 0.09700399286574239, "self-adjoint": 0.15831692877998726, "element": 0.29736558256021506, "complex": 0.29736558256021506, "star": 0.29736558256021506, "module": 0.29736558256021506, "decomposed": 0.29736558256021506}}, {"docstring": "Uses `left` co(ntra)variant.\n", "keywords": {"left": 0.04491197687864554, "ntra": 0.04491197687864554, "variant": 0.04491197687864554}}, {"docstring": "The indexed infimum of two functions are comparable if the functions are pointwise comparable\n", "keywords": {"indexed infimum": 0.040564923574392765, "functions are pointwise": 0.045872129360315365, "pointwise comparable": 0.06104740651975287, "functions": 0.11107071682746067, "comparable": 0.14570071893270706, "functions are comparable": 0.1471918801978465, "indexed": 0.19744254481508877, "infimum": 0.19744254481508877, "pointwise": 0.19744254481508877}}, {"docstring": "**Alias** of measure_theory.measure.absolutely_continuous_of_le`.\n", "keywords": {"Alias": 0.030396371632413578, "continuous": 0.04491197687864554, "measure": 0.09568045026443411}}, {"docstring": " If every element belongs to exactly `n` finsets, then the sum of their sizes is `n` times how many they are.\n", "keywords": {"element belongs": 0.02570861714399338, "finsets": 0.04491197687864554, "times": 0.09568045026443411, "element": 0.15831692877998726, "belongs": 0.15831692877998726, "sum": 0.15831692877998726, "sizes": 0.15831692877998726}}, {"docstring": " If the order of a formal power series is finite, then the coefficient indexed by the order is nonzero.\n", "keywords": {"formal power series": 0.002535831815717203, "series is finite": 0.012240009979360944, "formal power": 0.018310930906343142, "power series": 0.018310930906343142, "coefficient indexed": 0.018310930906343142, "order is nonzero": 0.031098151442834513, "order": 0.06839635777587465, "finite": 0.09017440044927587, "nonzero": 0.09017440044927587, "formal": 0.13409574860218185, "power": 0.13409574860218185, "series": 0.13409574860218185, "coefficient": 0.13409574860218185, "indexed": 0.13409574860218185}}, {"docstring": "Composition of local equivs respects equivalence\n", "keywords": {"equivs respects equivalence": 0.016559150827736194, "local equivs respects": 0.03339840940482845, "Composition of local": 0.04940384002065631, "respects equivalence": 0.04940384002065631, "local equivs": 0.09700399286574239, "equivs respects": 0.09700399286574239, "Composition": 0.15831692877998726, "equivalence": 0.15831692877998726, "local": 0.29736558256021506, "equivs": 0.29736558256021506, "respects": 0.29736558256021506}}, {"docstring": "See `lt_tsub_iff_left` for a stronger statement in a linear order.\n", "keywords": {"linear order": 0.015380821171891606, "stronger statement": 0.02570861714399338, "tsub": 0.04491197687864554, "iff": 0.04491197687864554, "left": 0.04491197687864554, "order": 0.09568045026443411, "stronger": 0.15831692877998726, "statement": 0.15831692877998726, "linear": 0.15831692877998726}}, {"docstring": " A function which can be locally uniformly approximated by functions which are continuous within a set at a point is continuous within this set at this point.\n", "keywords": {"locally uniformly approximated": 0.0035703670745683364, "locally uniformly": 0.022921555553433986, "uniformly approximated": 0.022921555553433986, "approximated by functions": 0.05820974749820646, "continuous": 0.08024199688466521, "set": 0.08024199688466521, "point": 0.10323551202386773, "point is continuous": 0.1241076723476779, "locally": 0.14969278847029802, "uniformly": 0.14969278847029802, "approximated": 0.14969278847029802, "function": 0.16048399376933042, "functions": 0.16048399376933042}}, {"docstring": " A `weighted_vsub` with sum of weights 0 is in the `vector_span` of an indexed family.\n", "keywords": {"sum of weights": 0.015380821171891606, "indexed family": 0.015380821171891606, "weighted": 0.04491197687864554, "vsub": 0.04491197687864554, "vector": 0.04491197687864554, "span": 0.04491197687864554, "weights": 0.09568045026443411, "family": 0.09568045026443411, "sum": 0.15831692877998726, "indexed": 0.15831692877998726}}, {"docstring": "A function `-f` is strictly concave iff `f` is strictly convex.\n", "keywords": {"strictly concave iff": 0.004852550456099045, "concave iff": 0.022138323509052035, "strictly convex": 0.024448499122065027, "strictly concave": 0.04051498248759491, "strictly": 0.10356599227702172, "function": 0.11521656054299435, "iff": 0.11521656054299435, "convex": 0.11521656054299435, "concave": 0.1879836817695587}}, {"docstring": "Assumes right covariance.\n", "keywords": {"Assumes right covariance": 0.02570861714399338, "Assumes": 0.15831692877998726, "covariance": 0.15831692877998726}}, {"docstring": "Assumes left covariance. The lemma assuming right covariance is `right.add_neg_of_nonpos_of_neg`.\n", "keywords": {"Assumes left covariance": 0.025009953048540364, "Assumes left": 0.04325492719738993, "neg": 0.08105151263492691, "left covariance": 0.14033512486368607, "Assumes": 0.16205454282434614, "right.add": 0.22989350183706597, "nonpos": 0.22989350183706597, "covariance": 0.2405027004070563, "left": 0.25584912197094006, "lemma assuming": 0.42082946769804974, "lemma": 0.544229518153821, "assuming": 0.544229518153821, "assuming right covariance": 0.6333818627846869}}, {"docstring": "The supremum of a singleton is the element of the singleton\n", "keywords": {"singleton": 0.09770854302279938, "supremum": 0.14390902704051098, "element": 0.14390902704051098}}, {"docstring": " The pigeonhole principle for finitely many pigeons of different weights, non-strict inequality version: there is a pigeonhole with the total weight of pigeons in it less than or equal to `b` provided that the total number of pigeonholes times `b` is greater than or equal to the total weight of all pigeons.\n", "keywords": {"non-strict inequality version": 0.0012378664336869577, "total weight": 0.007791042937490355, "non-strict inequality": 0.01272759276006767, "inequality version": 0.01272759276006767, "total number": 0.015606833625438346, "principle for finitely": 0.017675631119816727, "pigeonholes times": 0.020654483192976903, "pigeonhole principle": 0.02877176796279679, "total": 0.03886736997496381, "equal": 0.05291050545029078, "weight": 0.06579216186099208, "pigeons": 0.07073648571183865, "finitely many pigeons": 0.09032348134583623, "number of pigeonholes": 0.09032348134583623, "non-strict": 0.09536101189860946, "version": 0.09536101189860946, "provided": 0.09536101189860946, "times": 0.09536101189860946, "pigeonhole": 0.10610472856775795, "weight of pigeons": 0.112828197980024}}, {"docstring": " A set is a neighborhood of `a` within `[a, +\u221e)` if and only if it contains an interval `[a, u]` with `a < u`.\n", "keywords": {"interval": 0.060154590733539764, "set": 0.0771485953923296, "neighborhood": 0.0771485953923296}}, {"docstring": "**Cauchy\u2013Schwarz inequality**. This proof follows \"Proof 2\" on Wikipedia. We need this for the `core` structure to prove the triangle inequality below when showing the core is a normed group.\n", "keywords": {"Schwarz inequality": 0.034879364209002124, "Cauchy": 0.04652254634197217, "Schwarz": 0.06886066776937627, "proof": 0.19006996888135314, "Wikipedia": 0.20435634565584102, "inequality": 0.2447245886752865, "core": 0.31499835064196896, "structure to prove": 0.38953081496439873, "normed group": 0.38953081496439873, "triangle inequality": 0.40377085673723107, "structure": 0.4770264854439938, "group": 0.4770264854439938, "prove the triangle": 0.5275390453935067, "prove": 0.587666784337383, "triangle": 0.587666784337383, "showing": 0.587666784337383, "normed": 0.587666784337383, "showing the core": 1.0033472429331138}}, {"docstring": "`(n, m)` is in the transitive closure of a reflexive relation `~` if `i ~ pred i` and  `pred i ~ i` for all `i` between `n` and `m`.\n", "keywords": {"reflexive relation": 0.007899436963316861, "transitive closure": 0.010488263465887495, "pred": 0.028386692508603012, "relation": 0.07692947664055963, "transitive": 0.10187934809188742, "closure": 0.10187934809188742, "reflexive": 0.10187934809188742}}, {"docstring": " If `n` has only one element, the determinant of an `n` by `n` matrix is just that element. Although `unique` implies `decidable_eq` and `fintype`, the instances might not be syntactically equal. Thus, we need to fill in the args explicitly.\n", "keywords": {"element": 0.06269818411330766, "matrix": 0.13430340746323932, "syntactically equal": 0.19053931839477956, "determinant": 0.19510940414603561, "unique": 0.23258721851169967, "implies": 0.23258721851169967, "decidable": 0.23258721851169967, "fintype": 0.23258721851169967, "args explicitly": 0.3197230881934916, "equal": 0.35014648048956554, "explicitly": 0.43977869575565837, "instances": 0.45707882162261554, "syntactically": 0.45707882162261554, "fill": 0.5508799901107649, "args": 0.5508799901107649}}, {"docstring": " This is an intermediate result that is later replaced by `real.add_one_le_exp`; use that lemma instead.\n", "keywords": {"intermediate result": 0.02570861714399338, "real.add": 0.04491197687864554, "exp": 0.04491197687864554, "intermediate": 0.15831692877998726, "result": 0.15831692877998726, "replaced": 0.15831692877998726, "lemma": 0.15831692877998726}}, {"docstring": "If the p-adic norms of `q` and `r` are different, then the norm of `q + r` is equal to the max of the norms of `q` and `r`.\n", "keywords": {"p-adic norms": 0.014806869218432002, "norms": 0.05634287515026417, "norm": 0.11268575030052834, "p-adic": 0.12948243007791269, "equal": 0.12948243007791269, "max": 0.12948243007791269}}, {"docstring": "The geometric sequence `\u03bb n, \u03c8^n` is a solution of `fib_rec`.\n", "keywords": {"geometric sequence": 0.015380821171891606, "fib": 0.04491197687864554, "rec": 0.04491197687864554, "sequence": 0.09568045026443411, "geometric": 0.15831692877998726, "solution": 0.15831692877998726}}, {"docstring": "The operator norm of the projection is `1` if the subspace is not dense.\n", "keywords": {"operator norm": 0.013527995261974615, "dense": 0.0771485953923296, "operator": 0.1155310835876123, "norm": 0.1155310835876123, "projection": 0.1155310835876123, "subspace": 0.1155310835876123}}, {"docstring": "Any ascending central series for a group is bounded above by the upper central series.\n", "keywords": {"ascending central series": 0.010456048867975921, "upper central series": 0.010456048867975921, "central series": 0.02495406599442899, "group is bounded": 0.039481144315219374, "ascending central": 0.04437656514447953, "upper central": 0.04437656514447953, "central": 0.10901343189444501, "series": 0.10901343189444501, "ascending": 0.19488865479360015, "group": 0.19488865479360015, "bounded": 0.19488865479360015, "upper": 0.19488865479360015}}, {"docstring": " If a point belongs to an open ball, then there is a strictly smaller radius whose ball also contains it.  See also `exists_lt_subset_ball`.\n", "keywords": {"strictly smaller radius": 0.009031705025397548, "point belongs": 0.04197795670412043, "strictly smaller": 0.04197795670412043, "smaller radius": 0.04197795670412043, "open ball": 0.09596441743194624, "ball": 0.14541564714288155, "point": 0.2007157173514208, "belongs": 0.2007157173514208, "open": 0.2007157173514208, "strictly": 0.2007157173514208, "smaller": 0.2007157173514208, "radius": 0.2007157173514208, "radius whose ball": 0.23844234024693453, "exists": 0.2389507251657923, "subset": 0.2389507251657923}}, {"docstring": " **Krein-Milman theorem**: In a LCTVS (currently only in normed `\u211d`-spaces), any compact convex set is the closure of the convex hull of its extreme points.\n", "keywords": {"compact convex set": 0.009062863878918739, "Krein-Milman theorem": 0.011952723664711083, "extreme points": 0.019743941211743603, "compact convex": 0.04762083978464814, "convex set": 0.04762083978464814, "convex hull": 0.04762083978464814, "spaces": 0.0514064682630094, "LCTVS": 0.06138796274651049, "Krein-Milman": 0.10868092541297539, "theorem": 0.10868092541297539, "normed": 0.10868092541297539, "points": 0.10868092541297539, "convex": 0.12757733838039498, "compact": 0.1781514608044755, "set": 0.1781514608044755, "closure": 0.1781514608044755, "hull": 0.1781514608044755, "extreme": 0.1781514608044755}}, {"docstring": " If a continuous multilinear map is constructed from a multilinear map via the constructor `mk_continuous`, then its norm is bounded by the bound given to the constructor if it is nonnegative.\n", "keywords": {"continuous multilinear map": 0.005336176583458466, "multilinear map": 0.012525534843071673, "norm is bounded": 0.02210710824386826, "continuous multilinear": 0.03251013733085801, "map is constructed": 0.055874674858259636, "multilinear": 0.0781646504872054, "map": 0.0781646504872054, "constructor": 0.0781646504872054, "nonnegative": 0.09938532796588936, "continuous": 0.10070571056908109, "constructed": 0.1470678571383035, "norm": 0.1470678571383035, "bounded": 0.1470678571383035, "bound": 0.1470678571383035}}, {"docstring": "\u03b5-characterization of the closure in pseudometric spaces\n", "keywords": {"pseudometric spaces": 0.04940384002065631, "closure in pseudometric": 0.09700399286574239, "\u03b5-characterization": 0.15831692877998726, "spaces": 0.15831692877998726, "closure": 0.29736558256021506, "pseudometric": 0.29736558256021506}}, {"docstring": " In a linearly ordered field with the order topology, if `f` tends to `at_top` and `g` tends to a positive constant `C` then `f * g` tends to `at_top`.\n", "keywords": {"linearly ordered field": 0.002535831815717203, "order topology": 0.012240009979360944, "positive constant": 0.012240009979360944, "linearly ordered": 0.018310930906343142, "ordered field": 0.018310930906343142, "top": 0.019053917256533312, "topology": 0.09017440044927587, "constant": 0.09017440044927587, "linearly": 0.13409574860218185, "ordered": 0.13409574860218185, "field": 0.13409574860218185, "order": 0.13409574860218185, "positive": 0.13409574860218185}}, {"docstring": " In a pseudometric space, Cauchy sequences are characterized by the fact that, eventually, the distance between its elements is arbitrarily small\n", "keywords": {"Cauchy sequences": 0.009108237309423345, "pseudometric space": 0.015380821171891606, "arbitrarily small": 0.015380821171891606, "sequences are characterized": 0.02570861714399338, "elements is arbitrarily": 0.02570861714399338, "eventually": 0.04491197687864554, "Cauchy": 0.057012387690331526, "space": 0.09568045026443411, "small": 0.09568045026443411, "pseudometric": 0.15831692877998726, "sequences": 0.15831692877998726, "characterized": 0.15831692877998726, "fact": 0.15831692877998726, "distance": 0.15831692877998726, "elements": 0.15831692877998726, "arbitrarily": 0.15831692877998726}}, {"docstring": " H\u00f6lder inequality: the scalar product of two functions is bounded by the product of their `L^p` and `L^q` norms when `p` and `q` are conjugate exponents. A version for `nnreal`-valued functions. For an alternative version, convenient if the infinite sums are not already expressed as `p`-th powers, see `inner_le_Lp_mul_Lq_tsum_of_nonneg`.\n", "keywords": {"H\u00f6lder inequality": 0.020831673494171837, "conjugate exponents": 0.030411270399159654, "scalar product": 0.039421508390750405, "product": 0.09178518594300986, "H\u00f6lder": 0.14285156800252638, "inequality": 0.14285156800252638, "norms": 0.14285156800252638, "exponents": 0.14285156800252638, "valued functions": 0.161593633423342, "functions is bounded": 0.17410344106515196, "functions": 0.18972742917909138, "scalar": 0.2066041071328704, "bounded": 0.2066041071328704, "conjugate": 0.2066041071328704, "nnreal": 0.24561612140602881, "version": 0.2627618252873632, "mul": 0.321737937295333, "tsum": 0.321737937295333, "nonneg": 0.321737937295333, "valued": 0.36661472592007727}}, {"docstring": "Pseudoequality is transitive: Just take the pullback. The pullback morphisms will    be epimorphisms since in an abelian category, pullbacks of epimorphisms are epimorphisms.\n", "keywords": {"Pseudoequality is transitive": 0.024967992194519086, "Pseudoequality": 0.1560761912048481, "transitive": 0.1560761912048481, "pullback": 0.19450465891702232, "epimorphisms": 0.21064749154765058, "pullback morphisms": 0.24201296831777097, "abelian category": 0.24363244959454475, "pullbacks": 0.38900931783404463, "category": 0.3911024914486243, "morphisms": 0.5009016979840055, "abelian": 0.5009016979840055, "pullbacks of epimorphisms": 0.8377575563526827, "epimorphisms are epimorphisms": 1.5707549446460956}}, {"docstring": "The substructure generated by a set includes the set.\n", "keywords": {"substructure generated": 0.037831312533597124, "set includes": 0.0562460611896591, "includes the set": 0.12194096740933036, "set": 0.13945519496053638, "substructure": 0.19092478917347616, "generated": 0.19092478917347616, "includes": 0.19092478917347616}}, {"docstring": "This replaces `(g\u2022z).re = a/c + *` in the standard theory with the following novel identity:  `g \u2022 z = (a c + b d) / (c^2 + d^2) + (d z - c) / ((c^2 + d^2) (c z + d))`  which does not need to be decomposed depending on whether `c = 0`.\n", "keywords": {"standard theory": 0.005229473243173595, "decomposed depending": 0.005229473243173595, "replaces": 0.057864980816844346, "identity": 0.057864980816844346, "standard": 0.07212675038589919, "theory": 0.07212675038589919, "decomposed": 0.07212675038589919, "depending": 0.07212675038589919}}, {"docstring": "Product of elements of a submonoid of a `comm_monoid` indexed by a `finset` is in the    submonoid.\n", "keywords": {"Product of elements": 0.012465543599998139, "comm": 0.05331699930238388, "monoid": 0.05331699930238388, "finset": 0.05331699930238388, "submonoid": 0.08977403887827273, "Product": 0.09101163530720666, "indexed": 0.09101163530720666, "elements": 0.135280142484453}}, {"docstring": "Cauchy's Mean Value Theorem, `deriv` version.\n", "keywords": {"deriv": 0.04491197687864554, "version": 0.04491197687864554, "Theorem": 0.08596317751626563, "Cauchy": 0.15831692877998726}}, {"docstring": " If a a formal multilinear series has a positive radius of convergence, then its right inverse also has a positive radius of convergence.\n", "keywords": {"formal multilinear series": 0.0019035822029382567, "radius of convergence": 0.003178101858920796, "positive radius": 0.00445632759084731, "formal multilinear": 0.015161720635084234, "multilinear series": 0.015161720635084234, "convergence": 0.03360000303906402, "positive": 0.04699447171101985, "radius": 0.04699447171101985, "formal": 0.122209967475991, "multilinear": 0.122209967475991, "series": 0.122209967475991, "inverse": 0.122209967475991}}, {"docstring": " `is_dedekind_domain` and `is_dedekind_domain_inv` are equivalent ways to express that an integral domain is a Dedekind domain.\n", "keywords": {"integral domain": 0.03822477050613843, "Dedekind domain": 0.043668444482301144, "dedekind": 0.05205806470256033, "inv": 0.06612499813501872, "domain": 0.06697857516635275, "equivalent": 0.1374224238987721, "express": 0.1374224238987721, "integral": 0.1374224238987721}}, {"docstring": "Pythagorean theorem, subtracting vectors, if-and-only-if vector angle form.\n", "keywords": {"vector angle form": 0.006026046305276699, "Pythagorean theorem": 0.012811029635671736, "angle form": 0.021114872146320032, "subtracting vectors": 0.03079770075447455, "vector angle": 0.051351238837580325, "Pythagorean": 0.11246769819744627, "theorem": 0.11246769819744627, "subtracting": 0.11246769819744627, "form": 0.11246769819744627, "angle": 0.18385948854246909, "vectors": 0.26565442043121734, "vector": 0.26565442043121734}}, {"docstring": "Given binary relations `r, s` with `r` contained in `s`, the smallest congruence relation    containing `s` contains the smallest congruence relation containing `r`.\n", "keywords": {"smallest congruence relation": 0.001452461505816666, "smallest congruence": 0.008286276588021496, "congruence relation": 0.010999839450196695, "binary relations": 0.02736306152414341, "smallest": 0.06384038905425339, "congruence": 0.06384038905425339, "relation": 0.08429660157675407, "contained": 0.10720382857785782, "binary": 0.15797947932871687, "relations": 0.16859320315350815}}, {"docstring": "Assumes right covariance.\n", "keywords": {"Assumes right covariance": 0.02570861714399338, "Assumes": 0.15831692877998726, "covariance": 0.15831692877998726}}, {"docstring": "`x^n`, `n : \u2115` is convex on the whole real line whenever `n` is even\n", "keywords": {"real line": 0.013527995261974615, "convex": 0.1155310835876123, "real": 0.1155310835876123, "line": 0.1155310835876123}}, {"docstring": " A function is `C^(n + 1)` on an open domain if and only if it is differentiable there, and its derivative (expressed with `fderiv`) is `C^n`.\n", "keywords": {"open domain": 0.013527995261974615, "fderiv": 0.04491197687864554, "derivative": 0.0771485953923296, "expressed": 0.0771485953923296, "function": 0.1155310835876123, "open": 0.1155310835876123, "domain": 0.1155310835876123, "differentiable": 0.1155310835876123}}, {"docstring": "This is a special case of `tsub_le_iff_right`, which should be used instead of this.  This is needed to prove `has_ordered_sub (multiset \u03b1)`.\n", "keywords": {"special case": 0.02249651976012989, "tsub": 0.05899937629682816, "iff": 0.05899937629682816, "needed to prove": 0.11755105063023073, "special": 0.14832923246533666, "case": 0.14832923246533666, "ordered": 0.17881754828257995, "prove": 0.2790829227183407, "multiset": 0.2790829227183407, "needed": 0.37689977775222827}}, {"docstring": "See also `continuous_map.continuous_coe`\n", "keywords": {"continuous": 0.04491197687864554, "map.continuous": 0.04491197687864554, "coe": 0.04491197687864554}}, {"docstring": " Given two points `x \u2260 y`, we can find neighbourhoods `x \u2208 V\u2081 \u2286 U\u2081` and `y \u2208 V\u2082 \u2286 U\u2082`, with the `V\u2096` closed and the `U\u2096` open, such that the `U\u2096` are disjoint.\n", "keywords": {"find neighbourhoods": 0.00899321792126428, "open": 0.04491197687864554, "points": 0.0771485953923296, "neighbourhoods": 0.0771485953923296, "closed": 0.0771485953923296, "disjoint": 0.0771485953923296, "find": 0.1155310835876123}}, {"docstring": "**Alias** of dvd_mul_of_dvd_right`.\n", "keywords": {"Alias": 0.035514607549195436, "mul": 0.05706283858652404, "dvd": 0.07571113878390312}}, {"docstring": "See also `monotone.map_bdd_below`.\n", "keywords": {"monotone.map": 0.04491197687864554, "bdd": 0.04491197687864554}}, {"docstring": "**Alias** of the reverse direction of nat.count_succ_eq_count_iff`.\n", "keywords": {"direction of nat.count": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "succ": 0.04491197687864554, "count": 0.04491197687864554, "iff": 0.04491197687864554, "nat.count": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "Multiplicative congruence relations preserve division.\n", "keywords": {"Multiplicative congruence relations": 0.01655915082773619, "relations preserve division": 0.016559150827736194, "congruence relations preserve": 0.03339840940482845, "Multiplicative congruence": 0.04940384002065631, "preserve division": 0.04940384002065631, "congruence relations": 0.09700399286574239, "relations preserve": 0.09700399286574239, "Multiplicative": 0.15831692877998726, "division": 0.15831692877998726, "congruence": 0.29736558256021506, "relations": 0.29736558256021506, "preserve": 0.29736558256021506}}, {"docstring": "Negation is an `add_group` homomorphism if the `add_group` is commutative.\n", "keywords": {"add": 0.02184815412823125, "group": 0.02184815412823125, "Negation": 0.12156210109285605, "homomorphism": 0.12156210109285605, "commutative": 0.12156210109285605}}, {"docstring": " `slope f a b` is an affine combination of `slope f a (line_map a b r)` and `slope f (line_map a b r) b`. We use `line_map` to express this property.\n", "keywords": {"slope": 0.0288012603313754, "line": 0.03295863656183036, "affine combination": 0.041273198239298016, "map": 0.05726921725983683, "affine": 0.1990910406649399, "combination": 0.1990910406649399, "express this property": 0.21016346580928366, "property": 0.3748207333611027, "express": 0.4633291005993457}}, {"docstring": "The $S_n^m$ theorem: There is a computable function, namely `nat.partrec.code.curry`, that takes a program and a \u2115 `n`, and returns a new program using `n` as the first argument.\n", "keywords": {"computable function": 0.009180130876077282, "theorem": 0.05331699930238388, "program": 0.069255433448279, "function": 0.08088209179216702, "argument": 0.08088209179216702, "computable": 0.11246769819744627, "returns": 0.11246769819744627}}, {"docstring": "If `w\u2081 w\u2082` are words such that `w\u2081` reduces to `w\u2082`, then `w\u2082` is a sublist of `w\u2081`.\n", "keywords": {"words": 0.0771485953923296, "reduces": 0.0771485953923296, "sublist": 0.0771485953923296}}, {"docstring": "**Quadratic reciprocity theorem**\n", "keywords": {"Quadratic reciprocity theorem": 0.004390086440759893, "Quadratic reciprocity": 0.026233073037508336, "reciprocity theorem": 0.04940384002065631, "Quadratic": 0.08596317751626563, "theorem": 0.15831692877998726, "reciprocity": 0.29736558256021506}}, {"docstring": "An element of an algebra over a field is algebraic if and only if it is integral.\n", "keywords": {"field is algebraic": 0.02570861714399338, "integral": 0.09568045026443411, "element": 0.15831692877998726, "algebra": 0.15831692877998726, "field": 0.15831692877998726, "algebraic": 0.15831692877998726}}, {"docstring": "**Alias** of dvd_mul_of_dvd_left`.\n", "keywords": {"Alias": 0.03498516242744211, "mul": 0.055708263664958506, "left": 0.055708263664958506, "dvd": 0.07334489383741183}}, {"docstring": " If vectors `v\u2081` and `v\u2082` are on the same ray, then they are nonnegative multiples of the same vector. Actually, this vector can be assumed to be `v\u2081 + v\u2082`, see `same_ray.exists_eq_smul_add`.\n", "keywords": {"nonnegative multiples": 0.030257526714662884, "ray": 0.12558559778925976, "nonnegative": 0.1713735584707713, "multiples": 0.1713735584707713, "vector": 0.17703191816533684, "ray.exists": 0.2419870397426118, "smul": 0.2419870397426118, "add": 0.2419870397426118, "vectors": 0.3540638363306737, "assumed": 0.4180250376667794}}, {"docstring": " The pigeonhole principle for finitely many pigeons counted by heads: there is a pigeonhole with at least as many pigeons as the ceiling of the average number of pigeons across all pigeonholes. (\"The maximum is at least the mean\" specialized to integers.)  More formally, given a function between finite sets `s` and `t` and a natural number `n` such that `card t * n < card s`, there exists `y \u2208 t` such that its preimage in `s` has more than `n` elements.\n", "keywords": {"counted by heads": 0.024812089113024516, "pigeons counted": 0.030160709296172997, "principle for finitely": 0.03242320966541167, "pigeonhole principle": 0.03545192899234939, "finitely many pigeons": 0.05262658947073946, "pigeons": 0.05507014139770634, "average number": 0.0726235497967667, "pigeonhole": 0.09660081953843404, "heads": 0.13662178954955315, "specialized to integers": 0.14388571334847414, "principle": 0.17721444653533652, "finitely": 0.17721444653533652, "counted": 0.17721444653533652, "ceiling": 0.17721444653533652, "average": 0.17721444653533652, "number": 0.19102975864184912, "card": 0.20179621881059107, "number of pigeons": 0.2282433015019027, "natural number": 0.2488176439960917, "finite sets": 0.30189581916661384}}, {"docstring": " If `a` is a least upper bound for sets `s` and `p`, then it is a least upper bound for any set `t`, `s \u2286 t \u2286 p`.\n", "keywords": {"upper bound": 0.0067639976309873074, "bound for sets": 0.033620172694634534, "upper": 0.05776554179380615, "bound": 0.05776554179380615, "sets": 0.1155310835876123, "set": 0.1155310835876123}}, {"docstring": "`cyclotomic n R` comes from `cyclotomic n \u2124`.\n", "keywords": {"cyclotomic": 0.04784022513221706}}, {"docstring": "If `ring_char F = 2`, then `quadratic_char F` takes the value `1` on nonzero elements.\n", "keywords": {"nonzero elements": 0.022138323509052035, "char": 0.042981588758132815, "ring": 0.054709255964732355, "quadratic": 0.054709255964732355, "elements": 0.11521656054299435, "nonzero": 0.1879836817695587}}, {"docstring": "The degree of a product of polynomials is equal to the sum of the degrees.  See `polynomial.nat_degree_prod'` (with a `'`) for a version for commutative semirings, where additionally, the product of the leading coefficients must be nonzero.\n", "keywords": {"polynomials is equal": 0.022280320377335232, "product of polynomials": 0.03250315153617803, "product": 0.10661747070340775, "degree": 0.11600592944212966, "commutative semirings": 0.1300941450229365, "polynomials": 0.1476303724845068, "equal": 0.1476303724845068, "sum": 0.1476303724845068, "version for commutative": 0.1642454082149536, "leading coefficients": 0.1642454082149536, "degrees": 0.23201185888425932, "polynomial.nat": 0.23483372406308306, "prod": 0.23483372406308306, "semirings": 0.30649174009369745, "additionally": 0.30649174009369745, "nonzero": 0.30649174009369745, "version": 0.3755989344857946, "commutative": 0.3755989344857946, "leading": 0.3755989344857946, "coefficients": 0.3755989344857946}}, {"docstring": " If a real function `f` has a derivative `g` everywhere but at a point, and `f` and `g` are continuous at this point, then `g` is also the derivative of `f` at this point.\n", "keywords": {"real function": 0.016710264777316255, "point": 0.03467656789229584, "function": 0.10556226050272582, "derivative": 0.10915928911237684, "real": 0.1556959951131179, "continuous": 0.1556959951131179}}, {"docstring": "Avoid in favor of `nat.factorial_mul_asc_factorial` if you can. \u2115-division isn't worth it.\n", "keywords": {"nat.factorial": 0.05899937629682816, "mul": 0.05899937629682816, "asc": 0.05899937629682816, "factorial": 0.05899937629682816, "Avoid in favor": 0.07796891081290885, "Avoid": 0.2005079697193566, "favor": 0.36073110501666333, "\u2115-division": 0.46553351027698087, "worth": 0.6621399683957523}}, {"docstring": "The **Cayley-Hamilton Theorem**, that the characteristic polynomial of a matrix, applied to the matrix itself, is zero.  This holds over any commutative ring.  See `linear_map.aeval_self_charpoly` for the equivalent statement about endomorphisms.\n", "keywords": {"Cayley-Hamilton Theorem": 0.007042275450839844, "characteristic polynomial": 0.027013471187715684, "Theorem": 0.05901364083575788, "matrix": 0.0843798428598995, "Cayley-Hamilton": 0.11849851183635983, "applied": 0.11849851183635983, "commutative ring": 0.14673058044448692, "characteristic": 0.16218180398017965, "polynomial": 0.16218180398017965, "statement about endomorphisms": 0.2505035848980416, "linear": 0.3032982795431962, "map.aeval": 0.3032982795431962, "charpoly": 0.3032982795431962, "ring": 0.31827974973100065, "equivalent statement": 0.32423914301524753, "holds": 0.4020223829085479, "commutative": 0.4020223829085479, "endomorphisms": 0.4048363431934775, "equivalent": 0.49482258179881333, "statement": 0.49482258179881333}}, {"docstring": "Variant of Hahn-Banach, eliminating the hypothesis that `x` be nonzero, but only ensuring that    the dual element has norm at most `1` (this can not be improved for the trivial    vector space).\n", "keywords": {"trivial vector space": 0.0010606143890052174, "Variant of Hahn-Banach": 0.005987543063120938, "eliminating the hypothesis": 0.00899321792126428, "vector space": 0.00899321792126428, "dual element": 0.013527995261974615, "element has norm": 0.013527995261974615, "trivial vector": 0.013527995261974615, "Variant": 0.0771485953923296, "Hahn-Banach": 0.0771485953923296, "eliminating": 0.0771485953923296, "nonzero": 0.0771485953923296, "space": 0.0771485953923296, "hypothesis": 0.1155310835876123, "ensuring": 0.1155310835876123, "dual": 0.1155310835876123, "element": 0.1155310835876123, "norm": 0.1155310835876123, "improved": 0.1155310835876123, "trivial": 0.1155310835876123, "vector": 0.1155310835876123}}, {"docstring": "A more convenient spelling of `polynomial.of_finsupp.inj_eq` in terms of `iff`.\n", "keywords": {"convenient spelling": 0.02570861714399338, "polynomial.of": 0.04491197687864554, "finsupp.inj": 0.04491197687864554, "iff": 0.04491197687864554, "convenient": 0.15831692877998726, "spelling": 0.15831692877998726, "terms": 0.15831692877998726}}, {"docstring": "Precomposing `f` with `prod.snd` is `C^n` at `x : E \u00d7 F`\n", "keywords": {"Precomposing": 0.04491197687864554, "prod.snd": 0.04491197687864554}}, {"docstring": "Embed `fin n` into `fin (n + 1)` by prepending zero to the `univ`\n", "keywords": {"Embed": 0.055708263664958506, "univ": 0.055708263664958506, "fin": 0.07334489383741183, "prepending": 0.19092478917347616}}, {"docstring": "The first element of `scanl` of a vector `v : vector \u03b1 n`, retrieved via `head`, is the starting value `b : \u03b2`.\n", "keywords": {"scanl": 0.05393656033701752, "head": 0.05393656033701752, "retrieved": 0.11369206228658875, "vector": 0.13453835116331675, "element": 0.18569843656348187, "starting": 0.18569843656348187}}, {"docstring": "If `n \u2260 m`, then `(cyclotomic n \u211a)` and `(cyclotomic m \u211a)` are coprime.\n", "keywords": {"cyclotomic": 0.07915846438999363, "coprime": 0.12363091320521931}}, {"docstring": " Weighted generalized mean inequality, version sums over finite sets, with `\u211d\u22650`-valued functions and natural exponent.\n", "keywords": {"Weighted generalized": 0.04940384002065631, "generalized mean inequality": 0.04940384002065631, "version sums": 0.04940384002065631, "finite sets": 0.04940384002065631, "valued functions": 0.04940384002065631, "natural exponent": 0.04940384002065631, "sums over finite": 0.09700399286574239, "functions and natural": 0.09700399286574239, "Weighted": 0.15831692877998726, "inequality": 0.15831692877998726, "version": 0.15831692877998726, "sets": 0.15831692877998726, "valued": 0.15831692877998726, "exponent": 0.15831692877998726, "generalized": 0.29736558256021506, "sums": 0.29736558256021506, "finite": 0.29736558256021506, "functions": 0.29736558256021506, "natural": 0.29736558256021506}}, {"docstring": " **Rearrangement Inequality**: Pointwise multiplication of `f` and `g` is minimized when `f` and `g` antivary together. Stated by permuting the entries of `f`.\n", "keywords": {"Rearrangement Inequality": 0.0031146356952437464, "Pointwise multiplication": 0.008334116283452563, "Rearrangement": 0.05572221155747183, "Inequality": 0.05572221155747183, "Pointwise": 0.05572221155747183, "antivary": 0.10028582371075691, "Stated by permuting": 0.11755105063023073, "multiplication": 0.14832923246533666, "minimized": 0.14832923246533666, "permuting the entries": 0.165573765898185, "Stated": 0.2790829227183407, "permuting": 0.37689977775222827, "entries": 0.37689977775222827}}, {"docstring": "The `nonsing_inv` of `A` is a left inverse.\n", "keywords": {"left inverse": 0.015380821171891606, "nonsing": 0.04491197687864554, "inv": 0.04491197687864554, "inverse": 0.09568045026443411, "left": 0.15831692877998726}}, {"docstring": "The minimal distance to a set is `< r` iff there exists a point in this set at distance `< r`\n", "keywords": {"iff there exists": 0.02391462167226668, "exists a point": 0.039481144315219374, "minimal distance": 0.05913243875864445, "iff": 0.11984314898676356, "distance": 0.14323823713631006, "set": 0.14323823713631006, "minimal": 0.19488865479360015, "exists": 0.19488865479360015, "point": 0.19488865479360015, "set at distance": 0.2679012462364596}}, {"docstring": "The sum of a multiset of elements of an `add_submonoid` of an `add_comm_monoid` is an element of the `add_submonoid`.\n", "keywords": {"add": 0.013070502988876066, "submonoid": 0.023947002035544326, "multiset of elements": 0.03277171185593228, "comm": 0.061515127169190206, "monoid": 0.061515127169190206, "sum": 0.1138464986812353, "multiset": 0.1138464986812353, "elements": 0.11408484181200483, "element": 0.11408484181200483}}, {"docstring": "**Alias** of measure_theory.measure.absolutely_continuous.ae_le`.\n", "keywords": {"Alias": 0.030396371632413578, "continuous.ae": 0.04491197687864554, "measure": 0.15831692877998726}}, {"docstring": "For `p \u2260 0, p \u2260 1, `padic_val_rat p p` is 1.\n", "keywords": {"padic": 0.04491197687864554, "val": 0.04491197687864554, "rat": 0.06844581806138879}}, {"docstring": " Taking the first `n` elements in `l\u2081 ++ l\u2082` is the same as appending the first `n` elements of `l\u2081` to the first `n - l\u2081.length` elements of `l\u2082`.\n", "keywords": {"elements": 0.025056073197608046, "Taking": 0.08692043619874455, "length": 0.08692043619874455, "appending": 0.11470792651749655}}, {"docstring": "Every nonzero natural number has a unique prime factorization\n", "keywords": {"unique prime factorization": 0.016559150827736194, "nonzero natural number": 0.03339840940482845, "prime factorization": 0.04940384002065631, "nonzero natural": 0.09700399286574239, "natural number": 0.09700399286574239, "unique prime": 0.09700399286574239, "factorization": 0.15831692877998726, "nonzero": 0.29736558256021506, "natural": 0.29736558256021506, "number": 0.29736558256021506, "unique": 0.29736558256021506, "prime": 0.29736558256021506}}, {"docstring": "Alternative definition of star-convexity, using division.\n", "keywords": {"Alternative definition": 0.04940384002065631, "definition of star-convexity": 0.04940384002065631, "Alternative": 0.15831692877998726, "star-convexity": 0.15831692877998726, "division": 0.15831692877998726, "definition": 0.29736558256021506}}, {"docstring": "**Alias** of norm_add_sq_real`.\n", "keywords": {"Alias": 0.030396371632413578, "add": 0.04491197687864554, "real": 0.04491197687864554, "norm": 0.15831692877998726}}, {"docstring": " If `I` divides `J`, then `I` contains `J`.  In a Dedekind domain, to divide and contain are equivalent, see `ideal.dvd_iff_le`.\n", "keywords": {"Dedekind domain": 0.1291007848378438, "ideal.dvd": 0.22125774619993788, "iff": 0.22125774619993788, "Dedekind": 0.2931976921533319, "domain": 0.38997397536695666, "equivalent": 0.38997397536695666, "divides": 0.46867753086290775, "divide": 0.46867753086290775}}, {"docstring": " If `l` is already `list.sorted` with respect to `r`, then `insertion_sort` does not change it.\n", "keywords": {"list.sorted": 0.04491197687864554, "insertion": 0.04491197687864554, "sort": 0.04491197687864554, "respect": 0.29736558256021506, "change": 0.29736558256021506}}, {"docstring": "**Alias** of superset_antisymm`.\n", "keywords": {"Alias": 0.030396371632413578, "antisymm": 0.04491197687864554, "superset": 0.15831692877998726}}, {"docstring": "If `1 < x`, then `x^k` divides `x^l` if and only if `k` is at most `l`.\n", "keywords": {"divides": 0.04491197687864554}}, {"docstring": " Note: this lemma is specifically about `fintype.of_is_empty`. For a statement about arbitrary `fintype` instances, use `finset.univ_eq_empty`.\n", "keywords": {"empty": 0.042456298470187136, "lemma is specifically": 0.059260526860675365, "Note": 0.07188367843871574, "fintype.of": 0.07188367843871574, "fintype": 0.21197353881683212, "instances": 0.21197353881683212, "finset.univ": 0.21197353881683212, "lemma": 0.2365273465835411, "specifically": 0.2365273465835411, "statement about arbitrary": 0.24288129287790988, "arbitrary": 0.3770378920346049, "statement": 0.5182978603858105}}, {"docstring": " The projection from a topological fiber bundle with a nonempty fiber to its base is a surjective map.\n", "keywords": {"topological fiber bundle": 0.003391113505728255, "surjective map": 0.012240009979360944, "topological fiber": 0.02437189179902695, "fiber bundle": 0.02437189179902695, "nonempty fiber": 0.02437189179902695, "fiber": 0.08871286057464066, "map": 0.09017440044927587, "projection": 0.13409574860218185, "topological": 0.13409574860218185, "bundle": 0.13409574860218185, "nonempty": 0.13409574860218185, "base": 0.13409574860218185, "surjective": 0.13409574860218185}}, {"docstring": "On square matrices, `mul_right_comm` applies under `det`.\n", "keywords": {"mul": 0.04491197687864554, "comm": 0.04491197687864554, "det": 0.04491197687864554, "square matrices": 0.04940384002065631, "matrices": 0.15831692877998726, "applies": 0.15831692877998726, "square": 0.29736558256021506}}, {"docstring": "The function we are mapping along is `SR` in [Halmos, \u00a759],  where `S` is the map in `map_prod_mul_eq` and `R` is `prod.swap`.\n", "keywords": {"Halmos": 0.03402676245250578, "prod": 0.05331699930238388, "mul": 0.05331699930238388, "prod.swap": 0.05331699930238388, "map": 0.08977403887827273, "function": 0.135280142484453, "mapping": 0.135280142484453}}, {"docstring": "If the stabilizer of `x` is `S`, then the stabilizer of `g \u2022 x` is `gSg\u207b\u00b9`.\n", "keywords": {"stabilizer": 0.07915846438999363, "gSg": 0.12363091320521931}}, {"docstring": "Balls at the origin are balanced.\n", "keywords": {"origin are balanced": 0.04940384002065631, "Balls": 0.15831692877998726, "balanced": 0.15831692877998726, "origin": 0.29736558256021506}}, {"docstring": "Uniform converence implies pointwise convergence.\n", "keywords": {"Uniform converence implies": 0.01655915082773619, "implies pointwise convergence": 0.016559150827736194, "converence implies pointwise": 0.03339840940482845, "Uniform converence": 0.04940384002065631, "pointwise convergence": 0.04940384002065631, "converence implies": 0.09700399286574239, "implies pointwise": 0.09700399286574239, "Uniform": 0.15831692877998726, "convergence": 0.15831692877998726, "implies": 0.29736558256021506, "pointwise": 0.29736558256021506}}, {"docstring": "Two subfields are equal if they have the same elements.\n", "keywords": {"subfields are equal": 0.09700399286574239, "elements": 0.15831692877998726, "subfields": 0.29736558256021506, "equal": 0.29736558256021506}}, {"docstring": " If a function tends to negative infinity along a filter, then this function multiplied by a positive constant (on the right) also tends to negative infinity.\n", "keywords": {"positive constant": 0.014750006497112582, "function multiplied": 0.030322790873945838, "negative": 0.03787863113987834, "filter": 0.09910285154256718, "constant": 0.09910285154256718, "function": 0.10032724128195009, "multiplied": 0.14667192704153995, "positive": 0.14667192704153995}}, {"docstring": "The kernel of the natural homomorphism from an `add_monoid` to its quotient by an additive congruence relation `c` equals `c`.\n", "keywords": {"additive congruence relation": 0.0025258761156662004, "congruence relation": 0.015380821171891606, "natural homomorphism": 0.02570861714399338, "additive congruence": 0.02570861714399338, "add": 0.04491197687864554, "monoid": 0.04491197687864554, "equals": 0.04491197687864554, "relation": 0.09568045026443411, "kernel": 0.15831692877998726, "natural": 0.15831692877998726, "homomorphism": 0.15831692877998726, "quotient": 0.15831692877998726, "additive": 0.15831692877998726, "congruence": 0.15831692877998726}}, {"docstring": "Given a closed set `s`, a point belongs to `s` iff its infimum distance to this set vanishes\n", "keywords": {"iff its infimum": 0.020744656539556924, "set vanishes": 0.03017959306974641, "point belongs": 0.03439110359613085, "infimum distance": 0.03439110359613085, "closed set": 0.05033870131288873, "iff": 0.11145728654016383, "vanishes": 0.11145728654016383, "set": 0.1314201551237121, "closed": 0.1823394614884183, "point": 0.1823394614884183, "belongs": 0.1823394614884183, "infimum": 0.1823394614884183, "distance": 0.1823394614884183}}, {"docstring": "Helper lemma for the evaluation of `prec` in the recursive case.\n", "keywords": {"Helper lemma": 0.015380821171891606, "recursive case": 0.015380821171891606, "prec": 0.04491197687864554, "Helper": 0.09568045026443411, "case": 0.09568045026443411, "lemma": 0.15831692877998726, "evaluation": 0.15831692877998726, "recursive": 0.15831692877998726}}, {"docstring": " Write the iterated derivative as the composition of a continuous linear equiv and the iterated Fr\u00e9chet derivative\n", "keywords": {"iterated Fr\u00e9chet derivative": 0.0021685808594799666, "continuous linear equiv": 0.002950351281893197, "iterated Fr\u00e9chet": 0.011000128179261149, "Write the iterated": 0.0141210054546179, "Fr\u00e9chet derivative": 0.014265107890262672, "continuous linear": 0.020225813225353943, "linear equiv": 0.020225813225353943, "iterated derivative": 0.02861065623655176, "iterated": 0.07334489383741181, "Fr\u00e9chet": 0.07417313840262335, "derivative": 0.094808423351325, "Write": 0.09492398510093508, "composition": 0.1408007092310104, "continuous": 0.1408007092310104, "linear": 0.1408007092310104, "equiv": 0.1408007092310104}}, {"docstring": "Postcomposing `f` with `prod.fst` is continuous at `x`\n", "keywords": {"Postcomposing": 0.04491197687864554, "prod.fst": 0.04491197687864554, "continuous": 0.29736558256021506}}, {"docstring": " The projection from a topological fiber bundle with a nonempty fiber to its base is a quotient map.\n", "keywords": {"topological fiber bundle": 0.003391113505728255, "quotient map": 0.012240009979360944, "topological fiber": 0.02437189179902695, "fiber bundle": 0.02437189179902695, "nonempty fiber": 0.02437189179902695, "fiber": 0.08871286057464066, "map": 0.09017440044927587, "projection": 0.13409574860218185, "topological": 0.13409574860218185, "bundle": 0.13409574860218185, "nonempty": 0.13409574860218185, "base": 0.13409574860218185, "quotient": 0.13409574860218185}}, {"docstring": "The closure of the open interval `(a, b)` is the closed interval `[a, b]`.\n", "keywords": {"open interval": 0.015245046152746466, "closed interval": 0.015245046152746466, "interval": 0.05332403764722467, "closure": 0.1408007092310104, "open": 0.1408007092310104, "closed": 0.1408007092310104}}, {"docstring": "**Alias** of the reverse direction of ordering.compares_swap`.\n", "keywords": {"direction of ordering.compares": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "swap": 0.04491197687864554, "ordering.compares": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "A version of the global `continuous_mul` suitable for dot notation.\n", "keywords": {"continuous": 0.04491197687864554, "mul": 0.04491197687864554, "suitable for dot": 0.04940384002065631, "dot notation": 0.04940384002065631, "global": 0.15831692877998726, "suitable": 0.15831692877998726, "notation": 0.15831692877998726, "version": 0.29736558256021506, "dot": 0.29736558256021506}}, {"docstring": "The union of two sets is bounded iff each of the sets is bounded.\n", "keywords": {"sets is bounded": 0.027200199006318638, "bounded iff": 0.04771708711059453, "sets": 0.11357121248292479, "bounded": 0.11357121248292479, "union": 0.2005079697193566, "iff": 0.2005079697193566}}, {"docstring": "The length of a path is at least the length of the shortest path\n", "keywords": {"shortest path": 0.03264371920909407, "length": 0.059463729216923555, "path": 0.10460600410791432, "shortest": 0.15109932261208045}}, {"docstring": " The adjoint of the linear map associated to a matrix is the linear map associated to the conjugate transpose of that matrix.\n", "keywords": {"linear map": 0.004619666163574043, "conjugate transpose": 0.01552184797949213, "linear": 0.04784022513221706, "map": 0.04784022513221706, "matrix": 0.07915846438999363, "adjoint": 0.12363091320521931, "conjugate": 0.12363091320521931, "transpose": 0.12363091320521931}}, {"docstring": "The minimal distance to a singleton is the distance to the unique point in this singleton\n", "keywords": {"unique point": 0.021754649297288254, "minimal distance": 0.023068286813727114, "distance": 0.07726414307411156, "singleton": 0.09960683487150054, "minimal": 0.14591593823007556, "unique": 0.14591593823007556, "point": 0.14591593823007556}}, {"docstring": "The \"most used\" implication of `mul_and_mul_iff`, with split hypotheses, instead of `\u2227`.\n", "keywords": {"mul": 0.02006098734604785, "split hypotheses": 0.022138323509052035, "iff": 0.054709255964732355, "implication": 0.11521656054299435, "hypotheses": 0.11521656054299435, "split": 0.1879836817695587}}, {"docstring": "Assumes right covariance.\n", "keywords": {"Assumes right covariance": 0.02570861714399338, "Assumes": 0.15831692877998726, "covariance": 0.15831692877998726}}, {"docstring": "**Alias** of the reverse direction of order_dual.to_dual_lt_to_dual`.\n", "keywords": {"dual": 0.019648131954263418, "direction of order": 0.021567786782198985, "Alias": 0.034278050535979626, "reverse direction": 0.035715520099333646, "dual.to": 0.05393656033701752, "order": 0.11369206228658875, "reverse": 0.18569843656348187, "direction": 0.18569843656348187}}, {"docstring": "**Alias** of the reverse direction of sub_neg`.\n", "keywords": {"reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "neg": 0.04491197687864554, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "The cardinality of the quaternions, as a type.\n", "keywords": {"quaternions": 0.09568045026443411, "type": 0.09568045026443411, "cardinality": 0.15831692877998726}}, {"docstring": "Symmetric of `finset.image_image\u2082_distrib_right`.\n", "keywords": {"image \u2082_ distrib": 0.02570861714399338, "finset.image": 0.04491197687864554, "Symmetric": 0.15831692877998726, "image": 0.15831692877998726, "distrib": 0.15831692877998726}}, {"docstring": "**Fermat's Theorem**: the derivative of a function at a local minimum equals zero.\n", "keywords": {"Fermat Theorem": 0.0032610119837787367, "local minimum equals": 0.0042542192213185686, "local minimum": 0.02570861714399338, "minimum equals": 0.02570861714399338, "Fermat": 0.057012387690331526, "Theorem": 0.057012387690331526, "derivative": 0.15831692877998726, "function": 0.15831692877998726, "local": 0.15831692877998726, "minimum": 0.15831692877998726, "equals": 0.15831692877998726}}, {"docstring": "Every element `a` in a nontrivial finite-dimensional algebra `A` over an algebraically closed field `\ud835\udd5c` has non-empty spectrum.\n", "keywords": {"nontrivial finite-dimensional algebra": 0.0010606143890052174, "algebraically closed field": 0.0010606143890052174, "finite-dimensional algebra": 0.00899321792126428, "closed field": 0.00899321792126428, "non-empty spectrum": 0.00899321792126428, "nontrivial finite-dimensional": 0.013527995261974615, "algebraically closed": 0.013527995261974615, "element": 0.0771485953923296, "algebra": 0.0771485953923296, "field": 0.0771485953923296, "spectrum": 0.0771485953923296, "nontrivial": 0.1155310835876123, "finite-dimensional": 0.1155310835876123, "algebraically": 0.1155310835876123, "closed": 0.1155310835876123, "non-empty": 0.1155310835876123}}, {"docstring": "An intermediate field is closed under negation.\n", "keywords": {"closed under negation": 0.04940384002065631, "intermediate field": 0.09700399286574239, "field is closed": 0.09700399286574239, "negation": 0.15831692877998726, "intermediate": 0.29736558256021506, "field": 0.29736558256021506, "closed": 0.29736558256021506}}, {"docstring": "Modus tollens. If an implication is true, then so is its contrapositive.\n", "keywords": {"Modus tollens": 0.01552184797949213, "Modus": 0.12363091320521931, "tollens": 0.12363091320521931, "implication is true": 0.18075564686791562, "true": 0.32883716426354986, "contrapositive": 0.32883716426354986, "implication": 0.46553351027698087}}, {"docstring": " **Equality case of the Rearrangement Inequality**: Pointwise scalar multiplication of `f` and `g`, which antivary together, is unchanged by a permutation if and only if `f` and `g \u2218 \u03c3` antivary together. Stated by permuting the entries of `g`.\n", "keywords": {"Pointwise scalar multiplication": 0.0019254155628980188, "Rearrangement Inequality": 0.0050414360735746774, "Equality case": 0.010681703670791362, "Pointwise scalar": 0.010681703670791362, "scalar multiplication": 0.031040804666112243, "Equality": 0.060911257173420906, "Inequality": 0.060911257173420906, "Pointwise": 0.060911257173420906, "antivary": 0.07953440658135287, "Rearrangement": 0.08235173134587291, "Stated by permuting": 0.1549537691794176, "case": 0.17351161766281323, "scalar": 0.17351161766281323, "multiplication": 0.17351161766281323, "unchanged": 0.17351161766281323, "permutation": 0.17351161766281323, "permuting the entries": 0.21626281206510953, "Stated": 0.31817081130554614, "permuting": 0.42167437397336704, "entries": 0.42167437397336704}}, {"docstring": "Any element semiconjugates `1` to `1`.\n", "keywords": {"element semiconjugates": 0.015380821171891606, "semiconjugates": 0.09568045026443411, "element": 0.15831692877998726}}, {"docstring": "A subfield contains the field's 1.\n", "keywords": {"field": 0.15831692877998726, "subfield": 0.29736558256021506}}, {"docstring": " A stronger version of `finset.fold_ite`, but relies on an explicit proof of idempotency on the seed element, rather than relying on typeclass idempotency over the whole type.\n", "keywords": {"seed element": 0.01152406736086625, "stronger version": 0.01725930885760724, "explicit proof": 0.01725930885760724, "relying on typeclass": 0.01725930885760724, "typeclass idempotency": 0.022731165958219224, "finset.fold": 0.051156545382028185, "ite": 0.051156545382028185, "proof of idempotency": 0.05402465708940729, "idempotency": 0.08531676164130114, "element": 0.08746487982807136, "type": 0.08746487982807136, "stronger": 0.13025543809633414, "version": 0.13025543809633414, "relies": 0.13025543809633414, "explicit": 0.13025543809633414, "proof": 0.13025543809633414, "seed": 0.13025543809633414, "relying": 0.13025543809633414, "typeclass": 0.13025543809633414}}, {"docstring": "The interpretation in terms of whether `-1` is a square in `F`\n", "keywords": {"interpretation in terms": 0.02570861714399338, "interpretation": 0.15831692877998726, "terms": 0.15831692877998726, "square": 0.15831692877998726}}, {"docstring": " `convergents'` returns the same value for a gcf and the corresponding squashed gcf at the squashed position.\n", "keywords": {"convergents returns": 0.014591879414444505, "squashed position": 0.020028506366584774, "squashed gcf": 0.04132615975118968, "convergents": 0.09856372721054514, "position": 0.09856372721054514, "gcf": 0.09960683487150054, "squashed": 0.09960683487150054, "returns": 0.14591593823007556}}, {"docstring": "If a module has a finite dimension, all bases are indexed by a finite type.\n", "keywords": {"finite dimension": 0.01310939229726267, "finite type": 0.01310939229726267, "bases are indexed": 0.01904688389482227, "finite": 0.07030442419566416, "dimension": 0.09202664026077896, "type": 0.09202664026077896, "module": 0.1367145963576765, "bases": 0.1367145963576765, "indexed": 0.1367145963576765}}, {"docstring": " `points_with_circumcenter`, applied to a `point_index` value, equals `points` applied to that value.\n", "keywords": {"points": 0.02006098734604785, "point": 0.0401219746920957, "applied": 0.04178797173006444, "circumcenter": 0.06225387256995397, "index": 0.06225387256995397, "equals": 0.06225387256995397}}, {"docstring": " The sum of two lower semicontinuous functions is lower semicontinuous. Formulated with an explicit continuity assumption on addition, for application to `ereal`. The unprimed version of the lemma uses `[has_continuous_add]`.\n", "keywords": {"lower semicontinuous functions": 0.007327296516767814, "lower semicontinuous": 0.016851204808897166, "semicontinuous functions": 0.03821554584844725, "functions is lower": 0.08667762295794612, "lower": 0.09028232117950413, "semicontinuous": 0.09028232117950413, "explicit continuity assumption": 0.1917383839555026, "sum": 0.2038542769622493, "functions": 0.2038542769622493, "assumption on addition": 0.20587493759307618, "ereal": 0.2425057621221154, "explicit continuity": 0.28461618066910277, "continuity assumption": 0.28461618066910277, "continuous": 0.31807004650910337, "add": 0.31807004650910337, "Formulated": 0.36270881646612724, "addition": 0.36270881646612724, "unprimed version": 0.46742777496856974, "explicit": 0.47069880880967624, "continuity": 0.47069880880967624}}, {"docstring": " A convex set in a finite dimensional real vector space is null measurable with respect to an additive Haar measure on this space.\n", "keywords": {"additive Haar measure": 0.0030504489757802776, "finite dimensional real": 0.006089936190040564, "dimensional real vector": 0.006089936190040564, "real vector space": 0.008929337345400317, "additive Haar": 0.016462557677370277, "Haar measure": 0.016462557677370277, "convex set": 0.03249356950085711, "finite dimensional": 0.03249356950085711, "dimensional real": 0.03249356950085711, "real vector": 0.03249356950085711, "null measurable": 0.03249356950085711, "measurable with respect": 0.03249356950085711, "vector space": 0.047144520510864076, "Haar": 0.09129581932349395, "space is null": 0.1042077586299381, "space": 0.12689355643328784, "convex": 0.1774005791880223, "set": 0.1774005791880223, "finite": 0.1774005791880223, "dimensional": 0.1774005791880223}}, {"docstring": "**Alias** of the reverse direction of le_inv_mul_iff_mul_le`.\n", "keywords": {"mul": 0.019648131954263418, "Alias": 0.034278050535979626, "reverse direction": 0.035715520099333646, "inv": 0.05393656033701752, "iff": 0.05393656033701752, "reverse": 0.18569843656348187, "direction": 0.18569843656348187}}, {"docstring": "**Alias** of is_totally_disconnected_of_is_totally_separated`.\n", "keywords": {"totally": 0.020602899695743707, "Alias": 0.03498516242744211, "disconnected": 0.055708263664958506, "separated": 0.055708263664958506}}, {"docstring": "Singletons are bounded.\n", "keywords": {"Singletons are bounded": 0.02570861714399338, "Singletons": 0.15831692877998726, "bounded": 0.15831692877998726}}, {"docstring": "For the single implications with fewer assumptions, see `one_div_lt_one_div_of_neg_of_lt` and  `lt_of_one_div_lt_one_div`\n", "keywords": {"div": 0.008967485577883209, "fewer assumptions": 0.012927747587830957, "single implications": 0.017949171226940622, "implications with fewer": 0.017949171226940622, "neg": 0.06371744298068603, "assumptions": 0.09611368803643895, "single": 0.1327880990447932, "implications": 0.1327880990447932, "fewer": 0.1327880990447932}}, {"docstring": "If `g` maps a second argument of 0 to 0, summing it over the result of `on_finset` is the same as summing it over the original `finset`.\n", "keywords": {"finset": 0.021352745740207107, "summing": 0.07571113878390312, "maps": 0.09713402394201612, "original": 0.09713402394201612, "argument": 0.14390902704051098, "result": 0.14390902704051098}}, {"docstring": "An induction principle for additive closure membership. If `p` holds for `0` and all elements of `k`, and is preserved under addition and inverses, then `p` holds for all elements of the additive closure of `k`.\n", "keywords": {"additive closure membership": 0.015286833558194593, "induction principle": 0.04274035635323964, "closure membership": 0.04445757486113398, "additive closure": 0.051121466359897845, "holds": 0.135740780075095, "membership": 0.1397580964788896, "principle for additive": 0.13992215036955882, "additive": 0.15228179662245211, "closure": 0.15228179662245211, "elements": 0.18399707418782207, "induction": 0.20245615212496318, "principle": 0.20245615212496318, "addition and inverses": 0.203386912815087, "preserved under addition": 0.2812905075546711, "inverses": 0.36071482037488045, "preserved": 0.46854761761533015, "addition": 0.46854761761533015}}, {"docstring": "For type-valued presheaves, the sheaf condition in terms of unique gluings is equivalent to the usual sheaf condition in terms of equalizer diagrams.\n", "keywords": {"usual sheaf condition": 0.00667013361824365, "condition in terms": 0.011211310808370161, "sheaf condition": 0.01633263957304726, "type-valued presheaves": 0.02318964696236301, "equalizer diagrams": 0.02318964696236301, "terms of unique": 0.029282411849602945, "terms of equalizer": 0.029282411849602945, "unique gluings": 0.03831948387660884, "gluings is equivalent": 0.03831948387660884, "usual sheaf": 0.04278976621083365, "condition": 0.07404538123493588, "terms": 0.07404538123493588, "sheaf": 0.10679940517385458, "presheaves": 0.1179760024298328, "diagrams": 0.1179760024298328, "type-valued": 0.19210750149298308, "unique": 0.19210750149298308, "gluings": 0.19210750149298308, "equivalent": 0.19210750149298308, "usual": 0.19210750149298308}}, {"docstring": "The cokernel of a zero morphism is an isomorphism\n", "keywords": {"isomorphism": 0.15831692877998726, "cokernel": 0.29736558256021506, "morphism": 0.29736558256021506}}, {"docstring": "A Lipschitz function is uniformly continuous\n", "keywords": {"Lipschitz function": 0.04498862876540802, "uniformly continuous": 0.04940384002065631, "function is uniformly": 0.09700399286574239, "Lipschitz": 0.1447773057422032, "continuous": 0.15831692877998726, "function": 0.29736558256021506, "uniformly": 0.29736558256021506}}, {"docstring": "**Alias** of cross_anticomm`.\n", "keywords": {"Alias": 0.030396371632413578, "anticomm": 0.04491197687864554, "cross": 0.15831692877998726}}, {"docstring": "A condition for `padic_val_rat p (n\u2081 / d\u2081) \u2264 padic_val_rat p (n\u2082 / d\u2082), in terms of divisibility by `p^n`.\n", "keywords": {"padic": 0.02245598843932277, "val": 0.02245598843932277, "terms of divisibility": 0.02249651976012989, "rat": 0.0385742976961648, "condition": 0.14832923246533666, "terms": 0.14832923246533666, "divisibility": 0.14832923246533666}}, {"docstring": "**Alias** of star_ring_end_self_apply`.\n", "keywords": {"Alias": 0.030396371632413578, "ring": 0.04491197687864554, "end": 0.04491197687864554, "apply": 0.04491197687864554, "star": 0.15831692877998726}}, {"docstring": "**Alias** of the forward direction of approximates_linear_on.approximates_linear_on_iff_lipschitz_on_with`.\n", "keywords": {"linear": 0.019053917256533312, "direction of approximates": 0.020744656539556924, "Alias": 0.03381806651421549, "forward direction": 0.03439110359613085, "on.approximates": 0.0528063806271324, "iff": 0.0528063806271324, "lipschitz": 0.0528063806271324, "approximates": 0.11145728654016383, "forward": 0.1823394614884183, "direction": 0.1823394614884183}}, {"docstring": " When a function is `C^n` in a set `s` of unique differentiability, it admits `ftaylor_series_within \ud835\udd5c f s` as a Taylor series up to order `n` in `s`.\n", "keywords": {"unique differentiability": 0.012051537142168538, "Taylor series": 0.012804598759651162, "ftaylor": 0.052376395424323874, "Taylor": 0.07197839425549828, "series": 0.08782297807514622, "set": 0.08946888050496495, "differentiability": 0.08946888050496495, "admits": 0.08946888050496495, "order": 0.08946888050496495, "function": 0.13309686053898662, "unique": 0.13309686053898662}}, {"docstring": "Balls defined using the distance or the edistance coincide\n", "keywords": {"Balls defined": 0.015380821171891606, "edistance coincide": 0.015380821171891606, "Balls": 0.09568045026443411, "coincide": 0.09568045026443411, "defined": 0.15831692877998726, "distance": 0.15831692877998726, "edistance": 0.15831692877998726}}, {"docstring": "Auxiliary lemma to control elements in a join.\n", "keywords": {"Auxiliary lemma": 0.04940384002065631, "lemma to control": 0.09700399286574239, "control elements": 0.09700399286574239, "Auxiliary": 0.15831692877998726, "join": 0.15831692877998726, "lemma": 0.29736558256021506, "control": 0.29736558256021506, "elements": 0.29736558256021506}}, {"docstring": " The norm of the tensor product of a scalar linear map and of an element of a normed space is the product of the norms.\n", "keywords": {"scalar linear map": 0.0011161561659491543, "tensor product": 0.010146087194549376, "scalar linear": 0.010660048110124063, "linear map": 0.010660048110124063, "normed space": 0.010660048110124063, "product": 0.04889983293918258, "norm": 0.09779966587836517, "norms": 0.09779966587836517, "tensor": 0.10270155830966059, "scalar": 0.10270155830966059, "linear": 0.10270155830966059, "map": 0.10270155830966059, "element": 0.10270155830966059, "normed": 0.10270155830966059, "space": 0.10270155830966059}}, {"docstring": "A rewrite lemma for `padic_val_rat p (q * r)` with conditions `q \u2260 0`, `r \u2260 0`.\n", "keywords": {"rewrite lemma": 0.02570861714399338, "padic": 0.04491197687864554, "val": 0.04491197687864554, "rat": 0.09568045026443411, "conditions": 0.09568045026443411, "rewrite": 0.15831692877998726, "lemma": 0.15831692877998726}}, {"docstring": " If \u03b3 is a nonzero element of a linearly ordered group with zero element adjoined, then {\u03b3} is a neighbourhood of \u03b3.\n", "keywords": {"linearly ordered group": 0.0026058896166551234, "element adjoined": 0.01661242725142902, "linearly ordered": 0.018641876658774398, "ordered group": 0.018641876658774398, "nonzero element": 0.024893945799064357, "element": 0.08977403887827273, "adjoined": 0.09101163530720666, "nonzero": 0.13528014248445303, "linearly": 0.13528014248445303, "ordered": 0.13528014248445303, "group": 0.13528014248445303, "neighbourhood": 0.13528014248445303}}, {"docstring": "Every linear operator on a vector space over an algebraically closed field has    an eigenvalue.\n", "keywords": {"algebraically closed field": 0.0042542192213185686, "linear operator": 0.02570861714399338, "vector space": 0.02570861714399338, "algebraically closed": 0.02570861714399338, "closed field": 0.02570861714399338, "eigenvalue": 0.09568045026443411, "linear": 0.15831692877998726, "operator": 0.15831692877998726, "vector": 0.15831692877998726, "space": 0.15831692877998726, "algebraically": 0.15831692877998726, "closed": 0.15831692877998726, "field": 0.15831692877998726}}, {"docstring": "`q` is the minimum factor of `mersenne p`, so `M p = 0` in `X q`.\n", "keywords": {"minimum factor": 0.02570861714399338, "mersenne": 0.09568045026443411, "minimum": 0.15831692877998726, "factor": 0.15831692877998726}}, {"docstring": "The identity is an isometry\n", "keywords": {"isometry": 0.15831692877998726, "identity": 0.29736558256021506}}, {"docstring": "Reorder a product.  The difference with `prod_bij` is that the bijection is specified with an inverse, rather than as a surjective injection.\n", "keywords": {"Reorder a product": 0.01552184797949213, "Reorder": 0.12363091320521931, "product": 0.12363091320521931, "prod": 0.17881754828257995, "bij": 0.17881754828257995, "surjective injection": 0.18075564686791562, "inverse": 0.32883716426354986, "injection": 0.32883716426354986, "difference": 0.46553351027698087, "bijection": 0.46553351027698087, "surjective": 0.46553351027698087}}, {"docstring": " When one splits a list along a composition `c`, the lengths of the sublists thus created are given by the block sizes in `c`.\n", "keywords": {"splits a list": 0.013527995261974615, "sublists thus created": 0.013527995261974615, "block sizes": 0.013527995261974615, "composition": 0.0771485953923296, "splits": 0.1155310835876123, "list": 0.1155310835876123, "lengths": 0.1155310835876123, "sublists": 0.1155310835876123, "created": 0.1155310835876123, "block": 0.1155310835876123, "sizes": 0.1155310835876123}}, {"docstring": "We will apply the above step recursively.  The following result is used to ensure that the process terminates.\n", "keywords": {"step recursively": 0.015099935621315529, "recursively": 0.10028582371075691, "process terminates": 0.11755105063023073, "apply": 0.14832923246533666, "step": 0.14832923246533666, "terminates": 0.2790829227183407, "result": 0.37689977775222827, "ensure": 0.37689977775222827, "process": 0.37689977775222827}}, {"docstring": "Two points coincide if their distance is `< \u03b5` for all positive \u03b5\n", "keywords": {"points coincide": 0.02570861714399338, "points": 0.15831692877998726, "coincide": 0.15831692877998726, "distance": 0.15831692877998726, "positive": 0.15831692877998726}}, {"docstring": " An element of a ring is algebraic over the ring `A` iff it is algebraic over the field of fractions of `A`.\n", "keywords": {"field of fractions": 0.02114777441281124, "ring is algebraic": 0.0520835489385413, "algebraic": 0.055127829619426576, "iff": 0.09713402394201612, "ring": 0.09770854302279938, "element": 0.14390902704051098, "field": 0.14390902704051098, "fractions": 0.14390902704051098}}, {"docstring": " Given `c = line_map a b r`, `c < b`, the point `(c, f c)` is strictly above the segment `[(a, f a), (b, f b)]` if and only if `slope f c b < slope f a b`.\n", "keywords": {"slope": 0.026369104746389253, "line": 0.05393656033701752, "map": 0.07201108509564766, "point": 0.07201108509564766, "segment": 0.07201108509564766, "strictly": 0.09202664026077896}}, {"docstring": "A set of disjoint sets covering \u03b1 partition \u03b1 (classical).\n", "keywords": {"disjoint sets covering": 0.010962043841203115, "covering \u03b1 partition": 0.03663237450220032, "disjoint sets": 0.05417025203414716, "sets covering": 0.05417025203414716, "classical": 0.054709255964732355, "set of disjoint": 0.1179331082419386, "disjoint": 0.1879836817695587, "covering": 0.1879836817695587, "partition": 0.1879836817695587, "set": 0.2733568418908229, "sets": 0.2733568418908229}}, {"docstring": " In a real vector space, a convex set with nonempty interior is a set of unique differentiability at every point of its closure.\n", "keywords": {"real vector space": 0.0015868982743929682, "vector space": 0.011752516585960321, "real vector": 0.017595046402022366, "nonempty interior": 0.017595046402022366, "unique differentiability": 0.017595046402022366, "convex set": 0.023251977563965413, "set with nonempty": 0.05514841133955279, "set of unique": 0.05514841133955279, "set": 0.08640514249691128, "space": 0.0883382645966668, "closure": 0.0883382645966668, "real": 0.13149453879183629, "vector": 0.13149453879183629, "convex": 0.13149453879183629, "nonempty": 0.13149453879183629, "interior": 0.13149453879183629, "unique": 0.13149453879183629, "differentiability": 0.13149453879183629, "point": 0.13149453879183629}}, {"docstring": "A linear upper bound on the size of the `prime_counting'` function\n", "keywords": {"linear upper bound": 0.0042542192213185686, "counting function": 0.009239332327148086, "linear upper": 0.02570861714399338, "upper bound": 0.02570861714399338, "prime": 0.04491197687864554, "counting": 0.09568045026443411, "function": 0.09568045026443411, "linear": 0.15831692877998726, "upper": 0.15831692877998726, "bound": 0.15831692877998726, "size": 0.15831692877998726}}, {"docstring": "If we know that `parser.nat` was successful, starting at position `n` and ending at position `n'`, then it must be the case that for all `k : \u2115`, `n \u2264 k`, `k < n'`, the character at the `k`th position in `cb : char_buffer` is \"numeric\", that is, is between `'0'` and `'9'` inclusive.  This is a necessary part of proving one of the directions of `nat_eq_done`.\n", "keywords": {"starting at position": 0.03577528866225718, "ending at position": 0.048693510121355546, "position": 0.0563965421304412, "parser.nat": 0.07793739192948973, "char": 0.07793739192948973, "buffer": 0.07793739192948973, "numeric": 0.07793739192948973, "inclusive": 0.07793739192948973, "successful": 0.11666270712969631, "starting": 0.11666270712969631, "ending": 0.15979192452979435, "case": 0.15979192452979435, "character": 0.15979192452979435, "part of proving": 0.1879672220326179, "nat": 0.22694023288088733, "part": 0.39777623478598034, "proving": 0.39777623478598034, "directions": 0.39777623478598034}}, {"docstring": "Two equivalence relations are equal iff all their equivalence classes are equal.\n", "keywords": {"relations are equal": 0.045872129360315365, "equal iff": 0.045872129360315365, "classes are equal": 0.045872129360315365, "equivalence relations": 0.06104740651975287, "equivalence classes": 0.06104740651975287, "equal": 0.11107071682746067, "equivalence": 0.14570071893270706, "relations": 0.19744254481508877, "iff": 0.19744254481508877, "classes": 0.19744254481508877}}, {"docstring": " If a left-invariant measure gives positive mass to a compact set, then it gives positive mass to any open set.\n", "keywords": {"positive mass": 0.012423826389091432, "measure gives positive": 0.031877969496436134, "compact set": 0.031877969496436134, "open set": 0.031877969496436134, "left-invariant measure": 0.04097695443922855, "positive": 0.07785437699288043, "mass": 0.07785437699288043, "set": 0.07785437699288043, "left-invariant": 0.19840347794534322, "measure": 0.19840347794534322, "compact": 0.19840347794534322, "open": 0.19840347794534322}}, {"docstring": " In an infinite dimensional space, given a finite number of points, one may find a point with norm at most `R` which is at distance at least `1` of all these points.\n", "keywords": {"infinite dimensional space": 0.002156714441734562, "dimensional space": 0.014403555314280002, "infinite dimensional": 0.021479477819866782, "finite number": 0.021479477819866782, "space": 0.09791785820909267, "number of points": 0.1105342884275028, "find a point": 0.1105342884275028, "point with norm": 0.1105342884275028, "points": 0.12205603111572327, "infinite": 0.14500969419684506, "dimensional": 0.14500969419684506, "finite": 0.14500969419684506, "number": 0.14500969419684506, "find": 0.14500969419684506, "norm": 0.14500969419684506, "distance": 0.14500969419684506, "point": 0.24411206223144655}}, {"docstring": "The rank of a finite and free module is finite.\n", "keywords": {"free module": 0.037831312533597124, "module is finite": 0.12194096740933036, "finite and free": 0.12194096740933039, "finite": 0.13945519496053638, "rank": 0.19092478917347616, "free": 0.19092478917347616, "module": 0.19092478917347616}}, {"docstring": " The monomial function `x^n` tends to `+\u221e` at `+\u221e` for any positive natural `n`. A version for positive real powers exists as `tendsto_rpow_at_top`.\n", "keywords": {"monomial function": 0.035823369414816786, "positive natural": 0.07143683563426448, "function": 0.14724705908851674, "natural": 0.14724705908851674, "tendsto": 0.2104440927400966, "rpow": 0.2104440927400966, "top": 0.2104440927400966, "positive": 0.22640134908386225, "monomial": 0.2348735419198309, "positive real powers": 0.2375322133547646, "real powers exists": 0.2886396231172225, "positive real": 0.3048845311104686, "real powers": 0.3628836306470974, "powers exists": 0.3628836306470974, "version": 0.5160054651028707, "real": 0.5160054651028707, "powers": 0.5160054651028707, "exists": 0.5160054651028707, "version for positive": 0.5528566284596398}}, {"docstring": "M\u00f6bius inversion for functions to an `add_comm_group`.\n", "keywords": {"add": 0.04491197687864554, "comm": 0.04491197687864554, "group": 0.04491197687864554, "M\u00f6bius inversion": 0.04940384002065631, "inversion for functions": 0.09700399286574239, "M\u00f6bius": 0.15831692877998726, "inversion": 0.29736558256021506, "functions": 0.29736558256021506}}, {"docstring": " The **Schwarz Lemma**: if `f : \u2102 \u2192 \u2102` sends an open disk of positive radius to itself and the center of this disk to itself, then the absolute value of the derivative of `f` at the center of this disk is at most `1`.\n", "keywords": {"Schwarz Lemma": 0.002261867941167778, "sends an open": 0.008976855782909333, "positive radius": 0.011901338533018167, "open disk": 0.01415837792750491, "center": 0.041608530076667476, "disk": 0.04290991399350733, "Schwarz": 0.047505404327206645, "Lemma": 0.047505404327206645, "disk of positive": 0.049697988108738385, "sends": 0.08203784138516276, "open": 0.10844981593068187, "positive": 0.10844981593068187, "radius": 0.10844981593068187, "absolute": 0.10844981593068187, "derivative": 0.10844981593068187}}, {"docstring": " **Equality case of Rearrangement Inequality**: Pointwise multiplication of `f` and `g`, which monovary together, is unchanged by a permutation if and only if `f` and `g \u2218 \u03c3` monovary together. Stated by permuting the entries of `g`.\n", "keywords": {"Rearrangement Inequality": 0.005072352361797871, "Equality case": 0.01078166215070159, "Pointwise multiplication": 0.01078166215070159, "case of Rearrangement": 0.01462575590160924, "Equality": 0.06111024253988877, "Inequality": 0.06111024253988877, "Pointwise": 0.06111024253988877, "monovary": 0.08014015496625508, "Rearrangement": 0.08258441204389066, "Stated by permuting": 0.1565870030412261, "case": 0.17454779110930135, "multiplication": 0.17454779110930135, "unchanged": 0.17454779110930135, "permutation": 0.17454779110930135, "permuting the entries": 0.21846569551000553, "Stated": 0.3197366584666406, "permuting": 0.42343326428770406, "entries": 0.42343326428770406}}, {"docstring": "The subsemiring generated by a set includes the set.\n", "keywords": {"subsemiring generated": 0.037831312533597124, "set includes": 0.0562460611896591, "includes the set": 0.12194096740933036, "set": 0.13945519496053638, "subsemiring": 0.19092478917347616, "generated": 0.19092478917347616, "includes": 0.19092478917347616}}, {"docstring": " If `p` is a prime factor of `a` then the power of `p` in `a` is the same that in `a * b`, for any `b` coprime to `a`.\n", "keywords": {"prime factor": 0.00717258304785508, "coprime": 0.06341998722529081, "prime": 0.08438900089923473, "factor": 0.08438900089923473, "power": 0.08438900089923473}}, {"docstring": " If `\u03b1` has no zero divisors, then the product of two elements equals zero iff one of them equals zero.\n", "keywords": {"elements equals": 0.020241076619814977, "equals zero iff": 0.020241076619814977, "equals": 0.07162298286637953, "divisors": 0.09329120537733218, "product": 0.1384995633470844, "elements": 0.1384995633470844, "iff": 0.1384995633470844}}, {"docstring": "The direct path from 0 to y is shorter than the path with x \"inserted\" in between.\n", "keywords": {"inserted": 0.055708263664958506, "direct path": 0.0562460611896591, "path": 0.13945519496053638, "direct": 0.19092478917347616, "shorter": 0.19092478917347616}}, {"docstring": " Composition by continuous linear equivs on the left respects higher differentiability on domains.\n", "keywords": {"continuous linear equivs": 0.0042542192213185686, "left respects higher": 0.0042542192213185686, "respects higher differentiability": 0.0042542192213185686, "Composition by continuous": 0.015380821171891606, "differentiability on domains": 0.015380821171891606, "continuous linear": 0.02570861714399338, "linear equivs": 0.02570861714399338, "left respects": 0.02570861714399338, "respects higher": 0.02570861714399338, "higher differentiability": 0.02570861714399338, "Composition": 0.09568045026443411, "domains": 0.09568045026443411, "continuous": 0.15831692877998726, "linear": 0.15831692877998726, "equivs": 0.15831692877998726, "left": 0.15831692877998726, "respects": 0.15831692877998726, "higher": 0.15831692877998726, "differentiability": 0.15831692877998726}}, {"docstring": "`arsinh` is the right inverse of `sinh`.\n", "keywords": {"arsinh": 0.04491197687864554, "sinh": 0.04491197687864554, "inverse": 0.29736558256021506}}, {"docstring": "A list with positive sum must have positive length.\n", "keywords": {"positive length": 0.03378800767844735, "positive sum": 0.0562460611896591, "length": 0.11718348279991213, "list with positive": 0.12194096740933036, "positive": 0.13945519496053638, "list": 0.19092478917347616, "sum": 0.19092478917347616}}, {"docstring": " An orthogonal family forms an independent family of subspaces; that is, any collection of elements each from a different subspace in the family is linearly independent. In particular, the pairwise intersections of elements of the family are 0.\n", "keywords": {"orthogonal family forms": 0.017182947280508967, "linearly independent": 0.04488731666593399, "collection of elements": 0.05596080484191074, "orthogonal family": 0.0819411971313361, "family forms": 0.0819411971313361, "independent family": 0.09812792283739913, "family": 0.09922750561757587, "forms an independent": 0.10013187315646183, "independent": 0.11256868942568495, "elements": 0.13886716734143872, "intersections of elements": 0.14291854692789524, "orthogonal": 0.1908123943882418, "forms": 0.1908123943882418, "collection": 0.1908123943882418, "linearly": 0.1908123943882418, "subspaces": 0.2251373788513699, "subspace": 0.2251373788513699, "family is linearly": 0.23741279184888237, "pairwise intersections": 0.25425780307431733, "family of subspaces": 0.3339333349972376}}, {"docstring": "An inner product with a sum on the left.\n", "keywords": {"left": 0.15831692877998726, "product": 0.29736558256021506, "sum": 0.29736558256021506}}, {"docstring": "The p-adic value of an integer `z \u2260 0` is its p-adic_value as a rational\n", "keywords": {"integer": 0.11984314898676356, "rational": 0.11984314898676356, "p-adic": 0.14323823713631006}}, {"docstring": "Finitely generated submodules are precisely compact elements in the submodule lattice.\n", "keywords": {"Finitely generated submodules": 0.006026046305276699, "precisely compact elements": 0.006822309199625382, "Finitely generated": 0.021114872146320032, "submodule lattice": 0.03079770075447455, "precisely compact": 0.034987023778306175, "compact elements": 0.034987023778306175, "generated submodules": 0.051351238837580325, "submodules are precisely": 0.11245662598947327, "Finitely": 0.11246769819744627, "lattice": 0.11246769819744627, "generated": 0.18385948854246909, "precisely": 0.18385948854246909, "compact": 0.18385948854246909, "elements": 0.18385948854246909, "submodules": 0.26565442043121734, "submodule": 0.26565442043121734}}, {"docstring": " Assumes right covariance. The lemma assuming left covariance is `left.mul_lt_one'`.\n", "keywords": {"Assumes": 0.1554527012770092, "Assumes right covariance": 0.15550511668375397, "left.mul": 0.22125774619993788, "covariance": 0.23433876543145388, "assuming left covariance": 0.2741996606407343, "left covariance": 0.33210654690690034, "lemma assuming left": 0.33289593951751206, "lemma assuming": 0.39462694305349416, "assuming left": 0.39462694305349416, "lemma": 0.5319420725534505, "assuming": 0.5319420725534505, "left": 0.5319420725534505}}, {"docstring": "**Alias** of the reverse direction of holder_on_with_one`.\n", "keywords": {"direction of holder": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "holder": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "The sum of the composition of functions `f` and `g`, is the sum over `b \u2208 s.image g` of `f b` times of the cardinality of the fibre of `b`. See also `finset.sum_image`.\n", "keywords": {"composition of functions": 0.011900488980731722, "sum": 0.0500315567141328, "functions": 0.09627843715008771, "s.image": 0.09627843715008771, "times": 0.09627843715008771, "composition": 0.1221512649852118, "cardinality": 0.1221512649852118, "fibre": 0.1221512649852118, "finset.sum": 0.21373773690901868, "image": 0.21373773690901868}}, {"docstring": "Assumes right covariance.\n", "keywords": {"Assumes right covariance": 0.02570861714399338, "Assumes": 0.15831692877998726, "covariance": 0.15831692877998726}}, {"docstring": "The determinant of `rotation` (as a linear map) is equal to `1`.\n", "keywords": {"rotation": 0.04491197687864554, "linear map": 0.04940384002065631, "map": 0.15831692877998726, "determinant": 0.29736558256021506, "linear": 0.29736558256021506, "equal": 0.29736558256021506}}, {"docstring": "If there exists an `a` such that `b = l a`, then `a = u b` is one such element.\n", "keywords": {"element": 0.0771485953923296, "exists": 0.1155310835876123}}, {"docstring": "Direct products of additive torsion free groups are torsion free.\n", "keywords": {"additive torsion free": 0.010456048867975921, "torsion free groups": 0.010456048867975921, "Direct products": 0.02391462167226668, "torsion free": 0.02495406599442899, "products of additive": 0.039481144315219374, "additive torsion": 0.04437656514447953, "free groups": 0.04437656514447953, "groups are torsion": 0.09916653097095413, "torsion": 0.10901343189444501, "free": 0.10901343189444501, "Direct": 0.11984314898676356, "products": 0.19488865479360015, "additive": 0.19488865479360015, "groups": 0.19488865479360015}}, {"docstring": "The adjacency matrix of `G` is an adjacency matrix.\n", "keywords": {"adjacency matrix": 0.027200199006318638, "adjacency": 0.11357121248292479, "matrix": 0.11357121248292479}}, {"docstring": "Some basic API lemmas\n", "keywords": {"basic API lemmas": 0.007568253837993473, "API lemmas": 0.023458380875189744, "basic API": 0.04498862876540802, "API": 0.1447773057422032, "lemmas": 0.15831692877998726, "basic": 0.29736558256021506}}, {"docstring": "**Alias** of dvd.intro`.\n", "keywords": {"Alias": 0.030396371632413578, "dvd.intro": 0.15831692877998726}}, {"docstring": "A closed subset of a compact set is a compact set.\n", "keywords": {"compact set": 0.009315651332098867, "closed subset": 0.02249651976012989, "compact": 0.05776554179380615, "set": 0.07915846438999359, "closed": 0.14832923246533666, "subset": 0.14832923246533666}}, {"docstring": "A version of `continuous_inf_dom_right` for binary functions\n", "keywords": {"continuous": 0.04491197687864554, "dom": 0.04491197687864554, "binary functions": 0.04940384002065631, "functions": 0.15831692877998726, "version": 0.29736558256021506, "binary": 0.29736558256021506}}, {"docstring": "If a nondegenerate configuration has a unique line through any two points, then `|P| \u2264 |L|`.\n", "keywords": {"nondegenerate configuration": 0.02570861714399338, "unique line": 0.02570861714399338, "points": 0.09568045026443411, "nondegenerate": 0.15831692877998726, "configuration": 0.15831692877998726, "unique": 0.15831692877998726, "line": 0.15831692877998726}}, {"docstring": " The exponential map in a complete normed field `\ud835\udd42` of characteristic zero has strict derivative `exp \ud835\udd42 x` at any point `x` in the disk of convergence.\n", "keywords": {"complete normed field": 0.0025258761156662004, "normed field": 0.015380821171891606, "strict derivative": 0.015380821171891606, "disk of convergence": 0.015380821171891606, "exponential map": 0.02570861714399338, "complete normed": 0.02570861714399338, "field": 0.09568045026443411, "derivative": 0.09568045026443411, "exp": 0.09568045026443411, "point": 0.09568045026443411, "convergence": 0.09568045026443411, "exponential": 0.15831692877998726, "map": 0.15831692877998726, "complete": 0.15831692877998726, "normed": 0.15831692877998726, "characteristic": 0.15831692877998726, "strict": 0.15831692877998726, "disk": 0.15831692877998726}}, {"docstring": " Sending `fin (n+1)` to `fin n` by subtracting one from anything above `p` then back to `fin (n+1)` with a gap around `p` is the identity away from `p`.\n", "keywords": {"fin": 0.04447638824122113, "Sending": 0.059708349732654514, "subtracting": 0.1499406051001382, "back": 0.1499406051001382, "gap": 0.1499406051001382, "identity": 0.1499406051001382}}, {"docstring": " Note: this lemma is specifically about `fintype.of_subsingleton`. For a statement about arbitrary `fintype` instances, use either `fintype.card_le_one_iff_subsingleton` or `fintype.card_unique`.\n", "keywords": {"subsingleton": 0.044631026753425326, "lemma is specifically": 0.0647213843491835, "Note": 0.07562090863435546, "fintype.of": 0.07562090863435546, "fintype.card": 0.07682300082487513, "fintype": 0.22125774619993788, "instances": 0.22125774619993788, "iff": 0.22125774619993788, "unique": 0.22125774619993788, "lemma": 0.246550513069643, "specifically": 0.246550513069643, "statement about arbitrary": 0.2617398023141667, "arbitrary": 0.38997397536695666, "statement": 0.5319420725534505}}, {"docstring": "Given all wide pullbacks in `C`, construct products in `C/B`.\n", "keywords": {"construct products": 0.015380821171891606, "wide pullbacks": 0.02570861714399338, "construct": 0.09568045026443411, "wide": 0.15831692877998726, "pullbacks": 0.15831692877998726, "products": 0.15831692877998726}}, {"docstring": " The inner product of two vectors, divided by the product of their norms, has value -1 if and only if they are nonzero and one is a negative multiple of the other.\n", "keywords": {"negative multiple": 0.018641876658774398, "product": 0.069255433448279, "vectors": 0.09101163530720666, "divided": 0.09101163530720666, "norms": 0.09101163530720666, "nonzero": 0.13528014248445303, "negative": 0.13528014248445303, "multiple": 0.13528014248445303}}, {"docstring": "Elements of finite additive order are closed under addition.\n", "keywords": {"finite additive order": 0.03339840940482845, "Elements of finite": 0.04940384002065631, "closed under addition": 0.04940384002065631, "finite additive": 0.09700399286574239, "additive order": 0.09700399286574239, "order are closed": 0.09700399286574239, "Elements": 0.15831692877998726, "addition": 0.15831692877998726, "finite": 0.29736558256021506, "additive": 0.29736558256021506, "order": 0.29736558256021506, "closed": 0.29736558256021506}}, {"docstring": "A minimal polynomial is not a unit.\n", "keywords": {"minimal polynomial": 0.02570861714399338, "unit": 0.09568045026443411, "minimal": 0.15831692877998726, "polynomial": 0.15831692877998726}}, {"docstring": " If `f : \u03b9 \u2192 filter \u03b1` is directed, `\u03b9` is not empty, and `\u2200 i, f i \u2260 \u22a5`, then `infi f \u2260 \u22a5`. See also `infi_ne_bot_of_directed` for a version assuming `nonempty \u03b1` instead of `nonempty \u03b9`.\n", "keywords": {"directed": 0.11584635595819967, "infi": 0.11584635595819967, "filter": 0.13874228850015136, "empty": 0.13874228850015136, "nonempty": 0.18269899892831928, "version assuming": 0.20097116219473396, "bot": 0.23937626944391205, "assuming": 0.35876280059460885, "version": 0.4664378224654198}}, {"docstring": " Convert back any exotic `\u2124`-smul to the canonical instance. This should not be needed since in mathlib all `add_comm_group`s should normally have exactly one `\u2124`-module structure by design.\n", "keywords": {"Convert back": 0.02541909697430123, "back any exotic": 0.02541909697430123, "canonical instance": 0.02541909697430123, "Convert": 0.12363091320521931, "exotic": 0.12363091320521931, "smul": 0.12363091320521931, "instance": 0.12363091320521931, "add": 0.17881754828257995, "comm": 0.17881754828257995, "group": 0.17881754828257995, "module structure": 0.18075564686791562, "structure by design": 0.18075564686791562, "back": 0.2005079697193566, "canonical": 0.2005079697193566, "module": 0.32883716426354986, "design": 0.32883716426354986, "needed": 0.46553351027698087, "mathlib": 0.46553351027698087, "structure": 0.46553351027698087}}, {"docstring": "The centroid can be regarded as a center of mass.\n", "keywords": {"center of mass": 0.04940384002065631, "mass": 0.15831692877998726, "centroid": 0.29736558256021506, "regarded": 0.29736558256021506, "center": 0.29736558256021506}}, {"docstring": "**Alias** of not_is_min_of_lt`.\n", "keywords": {"Alias": 0.030396371632413578, "min": 0.04491197687864554}}, {"docstring": "**Alias** of the reverse direction of sub_nonneg`.\n", "keywords": {"reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "nonneg": 0.04491197687864554, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "For maps between vector spaces, `mfderiv` and `fderiv` coincide\n", "keywords": {"mfderiv": 0.04491197687864554, "fderiv": 0.04491197687864554, "coincide": 0.04491197687864554, "vector spaces": 0.04940384002065631, "maps between vector": 0.09700399286574239, "spaces": 0.15831692877998726, "maps": 0.29736558256021506, "vector": 0.29736558256021506}}, {"docstring": "Given a compact set `K` inside an open set `U`, there is a open neighborhood `V` of `1`  such that `K * V \u2286 U`.\n", "keywords": {"compact set": 0.03147064175861185, "open neighborhood": 0.03672426843567709, "open set": 0.04715305578486013, "set": 0.07726414307411157, "inside an open": 0.08132750272243246, "inside": 0.12156210109285605, "neighborhood": 0.12156210109285605, "open": 0.14570071893270706, "compact": 0.19744254481508877}}, {"docstring": "An intermediate field contains the image of the smaller field.\n", "keywords": {"intermediate field": 0.0562460611896591, "smaller field": 0.0562460611896591, "field": 0.13945519496053638, "intermediate": 0.19092478917347616, "image": 0.19092478917347616, "smaller": 0.19092478917347616}}, {"docstring": "`next_or` does not depend on the default value, if the next value appears.\n", "keywords": {"depend": 0.15831692877998726, "default": 0.15831692877998726}}, {"docstring": "**Alias** of the reverse direction of multiset.Icc_eq_zero_iff`.\n", "keywords": {"direction of multiset.Icc": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "multiset.Icc": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "**Intersecting Secants Theorem**.\n", "keywords": {"Intersecting Secants Theorem": 0.0011031048803583578, "Intersecting Secants": 0.012602360123953448, "Secants Theorem": 0.012602360123953448, "Intersecting": 0.08596317751626563, "Theorem": 0.08596317751626563, "Secants": 0.1447773057422032}}, {"docstring": "Factoring a prime gives the corresponding one-element multiset.\n", "keywords": {"Factoring a prime": 0.04940384002065631, "one-element multiset": 0.04940384002065631, "Factoring": 0.15831692877998726, "multiset": 0.15831692877998726, "prime": 0.29736558256021506, "one-element": 0.29736558256021506}}, {"docstring": "Closed balls defined using the distance or the edistance coincide\n", "keywords": {"Closed balls defined": 0.0025258761156662004, "Closed balls": 0.015380821171891606, "edistance coincide": 0.015380821171891606, "balls defined": 0.02570861714399338, "Closed": 0.09568045026443411, "coincide": 0.09568045026443411, "balls": 0.15831692877998726, "defined": 0.15831692877998726, "distance": 0.15831692877998726, "edistance": 0.15831692877998726}}, {"docstring": "Cannot be an instance because `power_basis` cannot be a class.\n", "keywords": {"power": 0.04491197687864554, "basis": 0.04491197687864554, "class": 0.09568045026443411, "instance": 0.15831692877998726}}, {"docstring": " If `s` and `t` are `\u03bc`-a.e. disjoint, then `s \\ u` and `t` are disjoint for some measurable null set `u`.\n", "keywords": {"measurable null set": 0.0046062759746501175, "null set": 0.022885248721446715, "measurable null": 0.037831312533597124, "set": 0.11718348279991213, "disjoint": 0.13945519496053638, "measurable": 0.19092478917347616, "null": 0.19092478917347616}}, {"docstring": "**Alias** of the forward direction of lt_sub_iff_add_lt'`.\n", "keywords": {"forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "add": 0.04491197687864554, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "Given an element `a` of the `add_submonoid` of an `add_monoid M` generated by a set `s`, there exists a list of elements of `s` whose sum is `a`.\n", "keywords": {"exists a list": 0.013671134401986838, "add": 0.020312026404878777, "list of elements": 0.04168745462632639, "submonoid": 0.055174169687121036, "monoid": 0.08361462103586328, "generated": 0.08361462103586328, "set": 0.08361462103586328, "exists": 0.1161324896811994, "list": 0.1161324896811994, "sum": 0.1161324896811994, "element": 0.1448437863602394, "elements": 0.1448437863602394}}, {"docstring": " A set in a nontrivial densely linear ordered type is dense in the sense of topology if and only if for any `a < b` there exists `c \u2208 s`, `a < c < b`. Each implication requires less typeclass assumptions.\n", "keywords": {"nontrivial densely linear": 0.0019726475682715263, "densely linear ordered": 0.0019726475682715263, "linear ordered type": 0.0019726475682715263, "nontrivial densely": 0.01552184797949213, "densely linear": 0.01552184797949213, "linear ordered": 0.01552184797949213, "ordered type": 0.01552184797949213, "type is dense": 0.01552184797949213, "sense of topology": 0.01552184797949213, "exists": 0.08922538916412363, "typeclass assumptions": 0.09108482621177338, "implication requires": 0.12124452117740256, "requires less typeclass": 0.12124452117740256, "set": 0.12363091320521931, "nontrivial": 0.12363091320521931, "densely": 0.12363091320521931, "linear": 0.12363091320521931, "ordered": 0.12363091320521931, "type": 0.12363091320521931, "dense": 0.12363091320521931}}, {"docstring": " In a linear ordered field, for positive `a` and `b` we have `a\u207b\u00b9 < b \u2194 b\u207b\u00b9 < a`. See also `inv_lt_of_inv_lt` for a one-sided implication with one fewer assumption.\n", "keywords": {"linear ordered field": 0.0024400234642094946, "ordered field": 0.016018634870496127, "linear ordered": 0.02216221073515605, "inv": 0.07170568664164803, "field": 0.10707231661842652, "positive": 0.10707231661842652, "fewer assumption": 0.12387522129842544, "linear": 0.14724705908851674, "ordered": 0.14724705908851674, "one-sided implication": 0.16351863533044358, "assumption": 0.2940149351268243, "one-sided": 0.3748840432180225, "implication": 0.3748840432180225, "fewer": 0.3748840432180225}}, {"docstring": " The Hausdorff dimension of the range of a `C\u00b9`-smooth function defined on a finite dimensional real normed space is at most the dimension of its domain as a vector space over `\u211d`.\n", "keywords": {"smooth function defined": 0.0017617228491498167, "finite dimensional real": 0.002646763217128346, "dimensional real normed": 0.002646763217128346, "real normed space": 0.0035586004500426306, "Hausdorff dimension": 0.010261220803700602, "smooth function": 0.012596191271856471, "function defined": 0.01883351639801717, "finite dimensional": 0.01883351639801717, "dimensional real": 0.01883351639801717, "real normed": 0.01883351639801717, "normed space": 0.025197502692452464, "vector space": 0.025197502692452464, "dimension": 0.06975210110781824, "Hausdorff": 0.07280782547924058, "space": 0.09038697863330873, "smooth": 0.09149320931920597, "range": 0.13596092028323714, "function": 0.13596092028323714, "defined": 0.13596092028323714, "finite": 0.13596092028323714}}, {"docstring": "If `p` is a prime factor of `a` then `p` is also a prime factor of `a * b` for any `b > 0`\n", "keywords": {"prime factor": 0.004619666163574043, "prime": 0.04784022513221706, "factor": 0.04784022513221706}}, {"docstring": "`zsmul` is equal to any other module structure via a cast.\n", "keywords": {"zsmul": 0.04491197687864554, "module structure": 0.09700399286574239, "cast": 0.15831692877998726, "equal": 0.29736558256021506, "module": 0.29736558256021506, "structure": 0.29736558256021506}}, {"docstring": " If `(p : \u03b9 \u2192 Prop, s : \u03b9 \u2192 set \u03b1)` is a basis of a filter `f`, `g` is a monotone function `set \u03b1 \u2192 filter \u03b3`, and for each `i`, `(pg : \u03b2 i \u2192 Prop, sg : \u03b2 i \u2192 set \u03b1)` is a basis of the filter `g (s i)`, then `(\u03bb (i : \u03b9) (x : \u03b2 i), p i \u2227 pg i x, \u03bb (i : \u03b9) (x : \u03b2 i), sg i x)` is a basis of the filter `f.lift g`.  This basis is parametrized by `i : \u03b9` and `x : \u03b2 i`, so in order to formulate this fact using `has_basis` one has to use `\u03a3 i, \u03b2 i` as the index type, see `filter.has_basis.lift`. This lemma states the corresponding `mem_iff` statement without using a sigma type.\n", "keywords": {"monotone function": 0.019175280739306334, "Prop": 0.019825017411353462, "set": 0.022498950254378244, "filter": 0.023857206067968373, "basis": 0.026927075311203922, "index type": 0.11013069995471964, "function": 0.13017605069047364, "f.lift": 0.13017605069047364, "type": 0.13413702985732845, "sigma type": 0.14108805588567327, "monotone": 0.14453124964569955, "order to formulate": 0.15840616102259386, "formulate this fact": 0.15840616102259386, "basis is parametrized": 0.17437659575525302, "lemma states": 0.2697039344149464, "filter.has": 0.31357842547074743, "basis.lift": 0.31357842547074743, "parametrized": 0.3697903767915558, "order": 0.3697903767915558, "formulate": 0.3697903767915558}}, {"docstring": "**Alias** of the reverse direction of finset.subset_powerset_len_univ_iff`.\n", "keywords": {"direction of finset.subset": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "powerset": 0.04491197687864554, "len": 0.04491197687864554, "univ": 0.04491197687864554, "iff": 0.04491197687864554, "finset.subset": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "An induction principle for closure membership for predicates with two arguments.\n", "keywords": {"induction principle": 0.02570861714399338, "principle for closure": 0.02570861714399338, "closure membership": 0.02570861714399338, "membership for predicates": 0.02570861714399338, "arguments": 0.09568045026443411, "induction": 0.15831692877998726, "principle": 0.15831692877998726, "closure": 0.15831692877998726, "membership": 0.15831692877998726, "predicates": 0.15831692877998726}}, {"docstring": "Any three points in a cospherical set are affinely independent.\n", "keywords": {"affinely independent": 0.04940384002065631, "cospherical set": 0.09700399286574239, "set are affinely": 0.09700399286574239, "independent": 0.15831692877998726, "points": 0.29736558256021506, "cospherical": 0.29736558256021506, "set": 0.29736558256021506, "affinely": 0.29736558256021506}}, {"docstring": "In a non-trivial `mul_zero_class`, the `0` element is not left-regular.\n", "keywords": {"mul": 0.04491197687864554, "class": 0.04491197687864554, "non-trivial": 0.15831692877998726, "element": 0.15831692877998726, "left-regular": 0.15831692877998726}}, {"docstring": "A compact set is bounded\n", "keywords": {"set is bounded": 0.04940384002065631, "compact set": 0.09700399286574239, "bounded": 0.15831692877998726, "compact": 0.29736558256021506, "set": 0.29736558256021506}}, {"docstring": " The original holor can be recovered from its slices by multiplying with unit vectors and summing up.\n", "keywords": {"original holor": 0.09700399286574239, "slices by multiplying": 0.09700399286574239, "multiplying with unit": 0.09700399286574239, "unit vectors": 0.09700399286574239, "vectors and summing": 0.09700399286574239, "original": 0.29736558256021506, "holor": 0.29736558256021506, "recovered": 0.29736558256021506, "slices": 0.29736558256021506, "multiplying": 0.29736558256021506, "unit": 0.29736558256021506, "vectors": 0.29736558256021506, "summing": 0.29736558256021506}}, {"docstring": "A finite set is bounded above.\n", "keywords": {"finite set": 0.09700399286574239, "set is bounded": 0.09700399286574239, "finite": 0.29736558256021506, "set": 0.29736558256021506, "bounded": 0.29736558256021506}}, {"docstring": "The degree of a product of polynomials is equal to the sum of the degrees, where the degree of the zero polynomial is \u22a5.\n", "keywords": {"polynomials is equal": 0.013546180738739306, "product of polynomials": 0.033661880941261824, "degree": 0.04298158875813282, "degrees": 0.08596317751626564, "product": 0.1151365990389872, "equal": 0.1151365990389872, "sum": 0.1151365990389872, "polynomials": 0.11608067570711267}}, {"docstring": "Negation of the condition `P : Prop` in a `dite` is the same as swapping the branches.\n", "keywords": {"swapping the branches": 0.00899321792126428, "Prop": 0.030396371632413578, "dite": 0.04491197687864554, "Negation": 0.0771485953923296, "condition": 0.0771485953923296, "branches": 0.0771485953923296, "swapping": 0.1155310835876123}}, {"docstring": "Closure of a subring `S` equals `S`.\n", "keywords": {"equals": 0.04491197687864554, "Closure": 0.09568045026443411, "subring": 0.09568045026443411}}, {"docstring": " Induction principle for the algebra generated by a set `s`: show that `p x y` holds for any `x y \u2208 adjoin R s` given that that it holds for `x y \u2208 s` and that it satisfies a number of natural properties.\n", "keywords": {"Induction principle": 0.008556802448034093, "natural properties": 0.008556802448034093, "algebra generated": 0.011952723664711083, "satisfies a number": 0.011952723664711083, "number of natural": 0.011952723664711083, "holds": 0.05219834354711508, "Induction": 0.07806526077627396, "set": 0.07806526077627396, "show": 0.07806526077627396, "adjoin": 0.07806526077627396, "properties": 0.07806526077627396, "principle": 0.10868092541297539, "algebra": 0.10868092541297539, "generated": 0.10868092541297539, "satisfies": 0.10868092541297539, "number": 0.10868092541297539, "natural": 0.10868092541297539}}, {"docstring": "Converse of pons asinorum, vector angle form.\n", "keywords": {"vector angle form": 0.008321268142839145, "Converse of pons": 0.04940384002065631, "pons asinorum": 0.04940384002065631, "vector angle": 0.04940384002065631, "angle form": 0.04940384002065631, "Converse": 0.15831692877998726, "asinorum": 0.15831692877998726, "vector": 0.15831692877998726, "form": 0.15831692877998726, "pons": 0.29736558256021506, "angle": 0.29736558256021506}}, {"docstring": " The left inverse does not depend on the zeroth coefficient of a formal multilinear series.\n", "keywords": {"formal multilinear series": 0.0025258761156662004, "multilinear series": 0.015380821171891606, "left inverse": 0.02570861714399338, "zeroth coefficient": 0.02570861714399338, "formal multilinear": 0.02570861714399338, "series": 0.09568045026443411, "left": 0.15831692877998726, "inverse": 0.15831692877998726, "depend": 0.15831692877998726, "zeroth": 0.15831692877998726, "coefficient": 0.15831692877998726, "formal": 0.15831692877998726, "multilinear": 0.15831692877998726}}, {"docstring": "The indexed supremum of two functions are comparable if the functions are pointwise comparable\n", "keywords": {"indexed supremum": 0.040564923574392765, "functions are pointwise": 0.045872129360315365, "pointwise comparable": 0.06104740651975287, "functions": 0.11107071682746067, "comparable": 0.14570071893270706, "functions are comparable": 0.1471918801978465, "indexed": 0.19744254481508877, "supremum": 0.19744254481508877, "pointwise": 0.19744254481508877}}, {"docstring": "Additive congruence relations preserve integer scaling.\n", "keywords": {"Additive congruence relations": 0.01655915082773619, "preserve integer scaling": 0.016559150827736194, "congruence relations preserve": 0.03339840940482845, "relations preserve integer": 0.03339840940482845, "Additive congruence": 0.04940384002065631, "integer scaling": 0.04940384002065631, "congruence relations": 0.09700399286574239, "relations preserve": 0.09700399286574239, "preserve integer": 0.09700399286574239, "Additive": 0.15831692877998726, "scaling": 0.15831692877998726, "congruence": 0.29736558256021506, "relations": 0.29736558256021506, "preserve": 0.29736558256021506, "integer": 0.29736558256021506}}, {"docstring": "**Alias** of the reverse direction of cont_mdiff_on_iff_cont_diff_on`.\n", "keywords": {"Alias": 0.03402676245250578, "reverse direction": 0.034987023778306175, "mdiff": 0.05331699930238388, "iff": 0.05331699930238388, "diff": 0.05331699930238388, "direction of cont": 0.06131733975553988, "cont": 0.069255433448279, "reverse": 0.18385948854246909, "direction": 0.18385948854246909}}, {"docstring": "Note that the `smul_comm_class \u03b1 \u03b2 \u03b2` typeclass argument is usually satisfied by `algebra \u03b1 \u03b2`.\n", "keywords": {"typeclass argument": 0.00899321792126428, "smul": 0.04491197687864554, "comm": 0.04491197687864554, "Note": 0.0771485953923296, "class": 0.0771485953923296, "typeclass": 0.0771485953923296, "algebra": 0.0771485953923296, "argument": 0.1155310835876123, "satisfied": 0.1155310835876123}}, {"docstring": " The Galois insertion associated to a closure operator can be used to reconstruct the closure operator. Note that the inverse in the opposite direction does not hold in general.\n", "keywords": {"closure operator": 0.009930510851601506, "Galois insertion": 0.011780903597442417, "reconstruct the closure": 0.05333798976087399, "closure": 0.06977507315241412, "operator": 0.06977507315241412, "Galois": 0.07425972513849939, "hold in general": 0.13830332156988706, "insertion": 0.1567973745636324, "reconstruct": 0.1567973745636324, "opposite direction": 0.18200718244465583, "Note": 0.3096281242706372, "general": 0.3096281242706372, "inverse": 0.39240470458943716, "opposite": 0.39240470458943716, "direction": 0.39240470458943716, "hold": 0.39240470458943716}}, {"docstring": "**Alias** of the reverse direction of complete_lattice.is_sup_closed_compact_iff_well_founded`.\n", "keywords": {"direction of complete": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "lattice.is": 0.04491197687864554, "closed": 0.04491197687864554, "compact": 0.04491197687864554, "iff": 0.04491197687864554, "founded": 0.04491197687864554, "complete": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "A finite dimensional space is nontrivial if it has positive `finrank`.\n", "keywords": {"finite dimensional space": 0.03339840940482845, "finrank": 0.04491197687864554, "finite dimensional": 0.09700399286574239, "dimensional space": 0.09700399286574239, "space is nontrivial": 0.09700399286574239, "positive": 0.15831692877998726, "finite": 0.29736558256021506, "dimensional": 0.29736558256021506, "space": 0.29736558256021506, "nontrivial": 0.29736558256021506}}, {"docstring": "**Alias** of dimH_subsingleton`.\n", "keywords": {"Alias": 0.030396371632413578, "subsingleton": 0.04491197687864554, "dimH": 0.15831692877998726}}, {"docstring": " The following statements are equivalent:  0. `s` is a neighborhood of `a` within `(a, +\u221e)` 1. `s` is a neighborhood of `a` within `(a, b]` 2. `s` is a neighborhood of `a` within `(a, b)` 3. `s` includes `(a, u)` for some `u \u2208 (a, b]` 4. `s` includes `(a, u)` for some `u > a`\n", "keywords": {"statements are equivalent": 0.03123552813091622, "neighborhood": 0.09195252014081291, "equivalent": 0.16439970681491667, "statements": 0.18424255507290094, "includes": 0.19359724877049725}}, {"docstring": " In a real normed space, the image of the unit ball under scalar multiplication by a positive constant `r` is the ball of radius `r`.\n", "keywords": {"real normed space": 0.0015868982743929682, "normed space": 0.011752516585960321, "positive constant": 0.011752516585960321, "real normed": 0.017595046402022366, "scalar multiplication": 0.017595046402022366, "unit ball": 0.023251977563965413, "ball of radius": 0.037682341941210055, "ball under scalar": 0.05514841133955279, "ball": 0.08640514249691128, "space": 0.0883382645966668, "constant": 0.0883382645966668, "radius": 0.0883382645966668, "real": 0.13149453879183629, "normed": 0.13149453879183629, "image": 0.13149453879183629, "unit": 0.13149453879183629, "scalar": 0.13149453879183629, "multiplication": 0.13149453879183629, "positive": 0.13149453879183629}}, {"docstring": "Negation of the condition `P : Prop` in a `ite` is the same as swapping the branches.\n", "keywords": {"swapping the branches": 0.00899321792126428, "Prop": 0.030396371632413578, "ite": 0.04491197687864554, "Negation": 0.0771485953923296, "condition": 0.0771485953923296, "branches": 0.0771485953923296, "swapping": 0.1155310835876123}}, {"docstring": "This can be used to turn `is_chain (\u2265)` into `is_chain (\u2264)` and vice-versa.\n", "keywords": {"chain": 0.021352745740207107, "turn": 0.11984314898676356, "vice-versa": 0.11984314898676356}}, {"docstring": " Bounding the Hausdorff edistance by bounding the edistance of any point in each set to the other set\n", "keywords": {"Bounding the Hausdorff": 0.012520315988577207, "Hausdorff edistance": 0.016161824468403405, "Hausdorff": 0.07669203367645613, "bounding the edistance": 0.07909251378973291, "Bounding": 0.08061786523087176, "edistance": 0.10369247975016448, "set": 0.10369247975016448, "edistance by bounding": 0.12504831268518427, "point": 0.1501629736875757}}, {"docstring": " A uniform embedding from a uniform space to a metric space is an isometry with respect to the induced metric space structure on the source space.\n", "keywords": {"induced metric space": 0.00419703848328064, "metric space structure": 0.00419703848328064, "metric space": 0.015328622927957317, "isometry with respect": 0.017582891116534834, "uniform embedding": 0.018499714151450502, "induced metric": 0.018499714151450502, "space structure": 0.029120683654812084, "source space": 0.029120683654812084, "uniform space": 0.030657245855914634, "space": 0.05381644715160454, "uniform": 0.06908978889839106, "metric": 0.06908978889839106, "embedding": 0.1314498954804892, "isometry": 0.1314498954804892, "respect": 0.1314498954804892, "induced": 0.1314498954804892, "structure": 0.1314498954804892, "source": 0.1314498954804892}}, {"docstring": " **Sperner's theorem**. The size of an antichain in `finset \u03b1` is bounded by the size of the maximal layer in `finset \u03b1`. This precisely means that `finset \u03b1` is a Sperner order.\n", "keywords": {"Sperner theorem": 0.05142573786165655, "finset": 0.08498249433759747, "Sperner": 0.14409970326160387, "theorem": 0.1697105518431889, "Sperner order": 0.17168327018956175, "size": 0.20527914392423913, "maximal layer": 0.38228118622337237, "order": 0.5084223878225196, "antichain": 0.5258880036475456, "bounded": 0.5258880036475456, "maximal": 0.5258880036475456, "layer": 0.5258880036475456, "precisely": 0.6177431144780275}}, {"docstring": "The degree of the minimal polynomial of `\u03bc` is at least `totient n`.\n", "keywords": {"minimal polynomial": 0.02570861714399338, "totient": 0.09568045026443411, "degree": 0.15831692877998726, "minimal": 0.15831692877998726, "polynomial": 0.15831692877998726}}, {"docstring": " The downward **local LYM inequality**, with cancelled denominators. `\ud835\udc9c` takes up less of `\u03b1^(r)` (the finsets of card `r`) than `\u2202\ud835\udc9c` takes up of `\u03b1^(r - 1)`.\n", "keywords": {"local LYM inequality": 0.0007851660833755705, "local LYM": 0.007701730664586866, "LYM inequality": 0.007701730664586866, "cancelled denominators": 0.015099935621315529, "LYM": 0.07621084492189614, "downward": 0.10028582371075691, "local": 0.10028582371075691, "inequality": 0.10028582371075691, "denominators": 0.10028582371075691, "finsets of card": 0.11755105063023073, "cancelled": 0.14832923246533666, "card": 0.2790829227183407, "finsets": 0.37689977775222827}}, {"docstring": "In a separable space, a family of disjoint sets with nonempty interiors is countable.\n", "keywords": {"separable space": 0.015380821171891606, "interiors is countable": 0.015380821171891606, "family of disjoint": 0.02570861714399338, "disjoint sets": 0.02570861714399338, "sets with nonempty": 0.02570861714399338, "nonempty interiors": 0.02570861714399338, "space": 0.09568045026443411, "countable": 0.09568045026443411, "separable": 0.15831692877998726, "family": 0.15831692877998726, "disjoint": 0.15831692877998726, "sets": 0.15831692877998726, "nonempty": 0.15831692877998726, "interiors": 0.15831692877998726}}, {"docstring": "Two affine subspaces are equal if they have the same points.\n", "keywords": {"affine subspaces": 0.09700399286574239, "subspaces are equal": 0.09700399286574239, "points": 0.15831692877998726, "affine": 0.29736558256021506, "subspaces": 0.29736558256021506, "equal": 0.29736558256021506}}, {"docstring": " The pigeonhole principle for finitely many pigeons counted by weight, non-strict inequality version: if the total weight of a finite set of pigeons is less than or equal to `n \u2022 b`, and they are sorted into `n > 0` pigeonholes, then for some pigeonhole, the total weight of the pigeons in this pigeonhole is less than or equal to `b`.\n", "keywords": {"non-strict inequality version": 0.0012662995225527988, "total weight": 0.007245302510657987, "non-strict inequality": 0.012918819419196299, "inequality version": 0.012918819419196299, "principle for finitely": 0.017936971576688186, "finite set": 0.017936971576688186, "pigeons counted": 0.029363490562258676, "pigeonhole principle": 0.03442282906640187, "weight": 0.044473945718881316, "total": 0.05352806907007824, "equal": 0.05352806907007824, "counted by weight": 0.061335376282171984, "pigeons": 0.0716314181800122, "pigeonhole": 0.08356282104223589, "finitely many pigeons": 0.09186208269511821, "set of pigeons": 0.09186208269511821, "non-strict": 0.09608023833092227, "version": 0.09608023833092227, "principle": 0.13274376026242707, "finitely": 0.13274376026242707}}, {"docstring": " The sum of the angles of a possibly degenerate triangle (where the two given sides are nonzero), vector angle form.\n", "keywords": {"vector angle form": 0.0014594378848666867, "possibly degenerate triangle": 0.0016481455113524755, "degenerate triangle": 0.012051537142168538, "sides are nonzero": 0.012051537142168538, "vector angle": 0.015965746323698286, "angle form": 0.015965746323698286, "possibly degenerate": 0.018034246898548233, "triangle": 0.08946888050496495, "nonzero": 0.08946888050496495, "vector": 0.08946888050496495, "form": 0.08946888050496495, "sum": 0.13309686053898662, "possibly": 0.13309686053898662, "degenerate": 0.13309686053898662, "sides": 0.13309686053898662, "angles": 0.17564595615029244, "angle": 0.17564595615029244}}, {"docstring": " The centroid of some vertices of a simplex, in terms of `points_with_circumcenter`.\n", "keywords": {"points": 0.04491197687864554, "circumcenter": 0.04491197687864554, "simplex": 0.0771485953923296, "centroid": 0.1155310835876123, "vertices": 0.1155310835876123, "terms": 0.1155310835876123}}, {"docstring": " The **Lubell-Yamamoto-Meshalkin inequality**. If `\ud835\udc9c` is an antichain, then the sum of the proportion of elements it takes from each layer is less than `1`.\n", "keywords": {"inequality": 0.05899937629682816, "proportion of elements": 0.165573765898185, "antichain": 0.2790829227183407, "sum": 0.37689977775222827, "proportion": 0.37689977775222827, "elements": 0.37689977775222827, "layer": 0.37689977775222827}}, {"docstring": "An element `x : \u03b1` of `l : list \u03b1` is a duplicate iff it can be found at two distinct indices `n m : \u2115` inside the list `l`.\n", "keywords": {"distinct indices": 0.020744656539556924, "duplicate iff": 0.03439110359613085, "inside the list": 0.06831905985192865, "element": 0.11145728654016383, "indices": 0.11145728654016383, "inside": 0.11145728654016383, "list": 0.1314201551237121, "duplicate": 0.1823394614884183, "iff": 0.1823394614884183, "found": 0.1823394614884183, "distinct": 0.1823394614884183}}, {"docstring": "**Alias** of the forward direction of inv_mul_lt_iff_lt_mul`.\n", "keywords": {"mul": 0.019648131954263418, "direction of inv": 0.021567786782198985, "Alias": 0.034278050535979626, "forward direction": 0.035715520099333646, "iff": 0.05393656033701752, "inv": 0.11369206228658875, "forward": 0.18569843656348187, "direction": 0.18569843656348187}}, {"docstring": "Shows that `A\u2099 = b\u2099 * A\u2099\u208b\u2081 + a\u2099 * A\u2099\u208b\u2082`.\n", "keywords": {"Shows": 0.06844581806138879}}, {"docstring": "Sum of a multiset of elements in a `subfield` is in the `subfield`.\n", "keywords": {"subfield": 0.020602899695743707, "multiset of elements": 0.037831312533597124, "Sum": 0.11718348279991213, "multiset": 0.19092478917347616, "elements": 0.19092478917347616}}, {"docstring": "**Alias** of the reverse direction of asymptotics.is_O_norm_left`.\n", "keywords": {"direction of asymptotics.is": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "norm": 0.04491197687864554, "left": 0.04491197687864554, "asymptotics.is": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "**Alias** of the reverse direction of set.not_one_mem_div_iff`.\n", "keywords": {"direction of set.not": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "mem": 0.04491197687864554, "div": 0.04491197687864554, "iff": 0.04491197687864554, "set.not": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " If `\u2225f n\u2225 \u2264 C * r ^ n` for all `n : \u2115` and some `r < 1`, then the partial sums of `f` form a Cauchy sequence. This lemma does not assume `0 \u2264 r` or `0 \u2264 C`.\n", "keywords": {"form a Cauchy": 0.007701730664586866, "Cauchy sequence": 0.007701730664586866, "partial sums": 0.02249651976012989, "Cauchy": 0.07621084492189614, "form": 0.10028582371075691, "sequence": 0.10028582371075691, "partial": 0.14832923246533666, "sums": 0.14832923246533666, "assume": 0.2790829227183407, "lemma": 0.37689977775222827}}, {"docstring": "**Alias** of norm_sub_sq_real`.\n", "keywords": {"Alias": 0.030396371632413578, "real": 0.04491197687864554, "norm": 0.15831692877998726}}, {"docstring": "Lagrange's **Mean Value Theorem**, `deriv` version.\n", "keywords": {"Lagrange": 0.04491197687864554, "deriv": 0.04491197687864554, "version": 0.04491197687864554, "Theorem": 0.08596317751626563}}, {"docstring": "Inf s < b when there is an element a in s with a < b, when s is bounded below. This is essentially an iff, except that the assumptions for the two implications are slightly different (one needs boundedness below for one direction, nonemptiness and linear order for the other one), so we formulate separately the two implications, contrary to the complete_lattice case.\n", "keywords": {"lattice case": 0.07747253747566739, "essentially an iff": 0.0979682773979528, "nonemptiness and linear": 0.0979682773979528, "linear order": 0.12451286160689713, "formulate separately": 0.12451286160689713, "element": 0.12556138008896928, "bounded": 0.12556138008896928, "implications": 0.14398740024103926, "implications are slightly": 0.21561924526959375, "iff": 0.2681456682222876, "direction": 0.2681456682222876, "nonemptiness": 0.2681456682222876, "contrary": 0.2681456682222876, "complete": 0.2681456682222876, "lattice": 0.2681456682222876, "case": 0.2681456682222876, "essentially": 0.3327552327188329, "assumptions": 0.3327552327188329, "slightly": 0.3327552327188329, "boundedness": 0.3327552327188329}}, {"docstring": "Assumes right covariance.\n", "keywords": {"Assumes right covariance": 0.02570861714399338, "Assumes": 0.15831692877998726, "covariance": 0.15831692877998726}}, {"docstring": "The `r` argument to `permutations_aux2` is the same as appending.\n", "keywords": {"permutations": 0.04491197687864554, "argument": 0.09568045026443411, "appending": 0.09568045026443411}}, {"docstring": "Cauchy\u2013Schwarz inequality with norm\n", "keywords": {"Schwarz inequality": 0.026233073037508336, "Cauchy": 0.04491197687864554, "inequality with norm": 0.04940384002065631, "Schwarz": 0.08596317751626563, "norm": 0.15831692877998726, "inequality": 0.29736558256021506}}, {"docstring": "If `0 < n`, then `i : zmod n` has order `n / gcd n i`.\n", "keywords": {"zmod": 0.06844581806138879, "order": 0.06844581806138879, "gcd": 0.06844581806138879}}, {"docstring": "Scalar multiplication preserves neighborhoods.\n", "keywords": {"Scalar multiplication preserves": 0.01655915082773619, "multiplication preserves neighborhoods": 0.016559150827736194, "Scalar multiplication": 0.04940384002065631, "preserves neighborhoods": 0.04940384002065631, "multiplication preserves": 0.09700399286574239, "Scalar": 0.15831692877998726, "neighborhoods": 0.15831692877998726, "multiplication": 0.29736558256021506, "preserves": 0.29736558256021506}}, {"docstring": "Cauchy's **Mean Value Theorem**, `has_deriv_at` version.\n", "keywords": {"Cauchy": 0.04491197687864554, "deriv": 0.04491197687864554, "version": 0.04491197687864554, "Theorem": 0.08596317751626563}}, {"docstring": " The distance between two points given with `affine_combination`, in terms of the pairwise distances between the points in that combination.\n", "keywords": {"pairwise distances": 0.024047742351991808, "combination": 0.05776554179380615, "affine": 0.05899937629682816, "points": 0.10191687733271076, "terms": 0.14832923246533666, "pairwise": 0.14832923246533666, "distance": 0.15831692877998718, "distances": 0.15831692877998718}}, {"docstring": "**Alias** of the forward direction of mul_sub_mul_div_mul_neg_iff`.\n", "keywords": {"forward direction": 0.022401895700338237, "Alias": 0.03620452014532985, "mul": 0.04343368128437256, "div": 0.058865175910949544, "neg": 0.058865175910949544, "iff": 0.058865175910949544, "direction of mul": 0.06604405377106645, "forward": 0.14802380456229533, "direction": 0.14802380456229533}}, {"docstring": " Shows that the recurrence relation (`convergents`) and direct evaluation (`convergents'`) of the gcf coincide at position `n` if the sequence of fractions contains strictly positive values only. Requiring positivity of all values is just one possible condition to obtain this result. For example, the dual - sequences with strictly negative values only - would also work.  In practice, one most commonly deals with (regular) continued fractions, which satisfy the positivity criterion required here. The analogous result for them (see `continued_fractions.convergents_eq_convergents`) hence follows directly from this theorem.\n", "keywords": {"recurrence relation": 0.025757698755576673, "direct evaluation": 0.025757698755576673, "coincide at position": 0.025757698755576673, "gcf coincide": 0.03245523984865425, "strictly positive": 0.07000008925528274, "convergents": 0.11159820350619178, "Shows": 0.14163007310949266, "relation": 0.14163007310949266, "evaluation": 0.14163007310949266, "position": 0.14163007310949266, "recurrence": 0.1772992078071002, "direct": 0.1772992078071002, "gcf": 0.1772992078071002, "coincide": 0.1772992078071002, "positive": 0.1772992078071002, "strictly": 0.18449219123938418, "Requiring positivity": 0.20132240749393127, "continued": 0.2090090367429777, "fractions": 0.2111047285280857, "continued fractions": 0.21431608306328587}}, {"docstring": "In a preadditive category, if all binary coproducts exist, then all binary biproducts exist.\n", "keywords": {"binary coproducts exist": 0.007087139883606203, "preadditive category": 0.02391462167226668, "coproducts exist": 0.03040783387545046, "biproducts exist": 0.03040783387545046, "binary coproducts": 0.04437656514447953, "binary biproducts": 0.04437656514447953, "exist": 0.07571113878390312, "binary": 0.10901343189444501, "category": 0.11984314898676356, "preadditive": 0.19488865479360015, "coproducts": 0.19488865479360015, "biproducts": 0.19488865479360015}}, {"docstring": "**Alias** of the reverse direction of set.range_iff_surjective`.\n", "keywords": {"direction of set.range": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "surjective": 0.04491197687864554, "set.range": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " An induction principle for closure membership. If `p` holds for all elements of `s`, and is preserved under multiplication, then `p` holds for all elements of the closure of `s`.\n", "keywords": {"induction principle": 0.04214176950703559, "closure membership": 0.05434212699580431, "holds": 0.13463809596664322, "membership": 0.13874228850015136, "principle for closure": 0.16619536763397152, "elements": 0.18269899892831928, "closure": 0.18574461176690396, "preserved under multiplication": 0.20097116219473396, "induction": 0.20109116132670046, "principle": 0.20109116132670046, "multiplication": 0.35876280059460885, "preserved": 0.4664378224654198}}, {"docstring": "The minimum of the valuations of `q` and `r` is less than or equal to the valuation of `q + r`.\n", "keywords": {"valuations": 0.11025565923885315, "valuation": 0.11025565923885315, "minimum": 0.14390902704051098, "equal": 0.14390902704051098}}, {"docstring": "`adjust_to_orientation` gives a basis with the required orientation.\n", "keywords": {"required orientation": 0.028813693746012673, "adjust": 0.055708263664958506, "orientation": 0.07334489383741183, "basis": 0.19092478917347616, "required": 0.19092478917347616}}, {"docstring": "Special case of `cont_diff_bump_of_inner.convolution_tendsto_right'` where `g` is continuous.\n", "keywords": {"Special case": 0.015380821171891606, "cont": 0.04491197687864554, "diff": 0.04491197687864554, "bump": 0.04491197687864554, "inner.convolution": 0.04491197687864554, "tendsto": 0.04491197687864554, "Special": 0.09568045026443411, "continuous": 0.09568045026443411, "case": 0.15831692877998726}}, {"docstring": " The Chevalley\u2013Warning theorem. Let `(f i)` be a finite family of multivariate polynomials in finitely many variables (`X s`, `s : \u03c3`) over a finite field of characteristic `p`. Assume that the sum of the total degrees of the `f i` is less than the cardinality of `\u03c3`. Then the number of common solutions of the `f i` is divisible by `p`.\n", "keywords": {"Warning theorem": 0.005669473490030345, "Chevalley": 0.05330646749460862, "Warning": 0.05330646749460862, "finite family": 0.10062047366257186, "finite field": 0.10062047366257186, "theorem": 0.10575661887725908, "finitely many variables": 0.11059799505083658, "field of characteristic": 0.11059799505083658, "family of multivariate": 0.13248831003104716, "multivariate polynomials": 0.13248831003104716, "polynomials in finitely": 0.13248831003104716, "finite": 0.13364319758105211, "total degrees": 0.22810033368793894, "variables": 0.29115111161627727, "characteristic": 0.29115111161627727, "number of common": 0.30160646160483506, "common solutions": 0.30160646160483506, "family": 0.34203607677352005, "multivariate": 0.34203607677352005, "polynomials": 0.34203607677352005}}, {"docstring": " The prime divisors of the characteristic of a finite commutative ring are exactly the prime divisors of its cardinality.\n", "keywords": {"finite commutative ring": 0.003044349585015597, "prime divisors": 0.005933451566668624, "finite commutative": 0.02064652498550541, "commutative ring": 0.02064652498550541, "prime": 0.054147325146855434, "divisors": 0.054147325146855434, "cardinality": 0.09593831581184391, "characteristic": 0.14222822903176371, "finite": 0.14222822903176371, "commutative": 0.14222822903176371, "ring": 0.14222822903176371}}, {"docstring": "A reformulation of the definition of locally compact space: In a locally compact space,  every open set containing `x` has a compact subset containing `x` in its interior.\n", "keywords": {"locally compact space": 0.001190800402490312, "compact space": 0.007055355260670541, "locally compact": 0.014658224154681123, "open set": 0.02331172468856548, "compact subset": 0.02717781877268271, "space": 0.03968695503380177, "compact": 0.058433847587107055, "definition of locally": 0.05933575737851797, "locally": 0.08123565896485528, "interior": 0.10214714531433151, "reformulation": 0.15093266057183136, "definition": 0.15093266057183136, "open": 0.15093266057183136, "set": 0.15093266057183136, "subset": 0.15093266057183136}}, {"docstring": " A weaker version of `finset.fold_ite'`, relying on typeclass idempotency over the whole type, instead of solely on the seed element. However, this is easier to use because it does not generate side goals.\n", "keywords": {"relying on typeclass": 0.02541909697430123, "seed element": 0.02541909697430123, "weaker version": 0.04188746641162499, "typeclass idempotency": 0.04188746641162499, "finset.fold": 0.05899937629682816, "ite": 0.05899937629682816, "generate side goals": 0.11501181900411048, "relying": 0.12363091320521931, "type": 0.12363091320521931, "element": 0.12363091320521931, "side goals": 0.18075564686791562, "weaker": 0.2005079697193566, "version": 0.2005079697193566, "typeclass": 0.2005079697193566, "idempotency": 0.2005079697193566, "solely": 0.2005079697193566, "seed": 0.2005079697193566, "generate side": 0.2766850298235749, "goals": 0.32883716426354986, "easier": 0.46553351027698087}}, {"docstring": "A polynomial `p` lifts if and only if it is in the image of `map_alg`.\n", "keywords": {"map": 0.04491197687864554, "alg": 0.04491197687864554, "polynomial": 0.09568045026443411, "lifts": 0.09568045026443411, "image": 0.15831692877998726}}, {"docstring": "**Alias** of the reverse direction of same_ray_neg_iff`.\n", "keywords": {"reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "ray": 0.04491197687864554, "neg": 0.04491197687864554, "iff": 0.04491197687864554, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " Since the definition of `box_integral.prepartition.compl` uses `Exists.some`, the result depends only on `\u03c0.Union`.\n", "keywords": {"result depends": 0.02570861714399338, "Exists.some": 0.030396371632413578, "box": 0.04491197687864554, "\u03c0.Union": 0.04491197687864554, "definition": 0.15831692877998726, "result": 0.15831692877998726, "depends": 0.15831692877998726}}, {"docstring": " Euclid's lemma: if `a \u2223 b * c` and `a` and `c` have no common prime factors, `a \u2223 b`. Compare `is_coprime.dvd_of_dvd_mul_left`.\n", "keywords": {"common prime factors": 0.0023160866321010193, "Euclid lemma": 0.010159422250580143, "prime factors": 0.015099935621315529, "common prime": 0.02249651976012989, "Euclid": 0.10028582371075691, "lemma": 0.10028582371075691, "factors": 0.10028582371075691, "common": 0.14832923246533666, "prime": 0.14832923246533666, "Compare": 0.17881754828257995, "coprime.dvd": 0.17881754828257995, "dvd": 0.17881754828257995, "mul": 0.17881754828257995, "left": 0.17881754828257995}}, {"docstring": " If the input vectors of `gram_schmidt` are linearly independent, then the output vectors are non-zero.\n", "keywords": {"linearly independent": 0.020744656539556924, "input vectors": 0.05033870131288873, "output vectors": 0.05033870131288873, "gram": 0.0528063806271324, "schmidt": 0.0528063806271324, "vectors are non-zero": 0.06831905985192867, "independent": 0.11145728654016383, "non-zero": 0.11145728654016383, "vectors": 0.1314201551237121, "input": 0.1823394614884183, "linearly": 0.1823394614884183, "output": 0.1823394614884183}}, {"docstring": "If `x` is in the base field `K`, then the norm is `x ^ [L : K]`.\n", "keywords": {"base field": 0.015380821171891606, "field": 0.09568045026443411, "base": 0.15831692877998726, "norm": 0.15831692877998726}}, {"docstring": " Multiplying `a\u207b\u00b9` by `a` twice results in `a` (whether or not `a` is zero).\n", "keywords": {"Multiplying": 0.04491197687864554, "results": 0.09568045026443411}}, {"docstring": "**Alias** of left.one_le_inv_iff`.\n", "keywords": {"Alias": 0.030396371632413578, "inv": 0.04491197687864554, "iff": 0.04491197687864554, "left.one": 0.15831692877998726}}, {"docstring": "For the equality, see `thickening_thickening`.\n", "keywords": {"thickening": 0.02245598843932277, "equality": 0.12363091320521931}}, {"docstring": "The negation of a map which preserves addition, preserves addition when the target is commutative.\n", "keywords": {"target is commutative": 0.02391462167226668, "preserves addition": 0.02495406599442899, "map which preserves": 0.09916653097095413, "preserves": 0.10901343189444501, "addition": 0.10901343189444501, "commutative": 0.11984314898676356, "negation": 0.19488865479360015, "map": 0.19488865479360015, "target": 0.19488865479360015}}, {"docstring": "See also `finprod_mem_finset_product'`.\n", "keywords": {"finprod": 0.04491197687864554, "mem": 0.04491197687864554, "finset": 0.04491197687864554, "product": 0.04491197687864554}}, {"docstring": "A variant of `nth_le_rotate` useful for rewrites.\n", "keywords": {"nth": 0.04491197687864554, "rotate": 0.04491197687864554, "rewrites": 0.15831692877998726, "variant": 0.29736558256021506}}, {"docstring": "The minimal distance is monotonous with respect to inclusion\n", "keywords": {"respect to inclusion": 0.04940384002065631, "minimal distance": 0.09700399286574239, "distance is monotonous": 0.09700399286574239, "monotonous with respect": 0.09700399286574239, "inclusion": 0.15831692877998726, "minimal": 0.29736558256021506, "distance": 0.29736558256021506, "monotonous": 0.29736558256021506, "respect": 0.29736558256021506}}, {"docstring": "Product of elements of a subgroup of a `comm_group` indexed by a `finset` is in the    subgroup.\n", "keywords": {"Product of elements": 0.012465543599998139, "comm": 0.05331699930238388, "group": 0.05331699930238388, "finset": 0.05331699930238388, "subgroup": 0.08977403887827273, "Product": 0.09101163530720666, "indexed": 0.09101163530720666, "elements": 0.135280142484453}}, {"docstring": "Congruence relations are transitive.\n", "keywords": {"Congruence relations": 0.04940384002065631, "relations are transitive": 0.04940384002065631, "Congruence": 0.15831692877998726, "transitive": 0.15831692877998726, "relations": 0.29736558256021506}}, {"docstring": "The cardinality of the antidiagonal of `n` is `n + 1`.\n", "keywords": {"cardinality": 0.15831692877998726, "antidiagonal": 0.15831692877998726}}, {"docstring": "A continuous function with compact support is bounded above.\n", "keywords": {"continuous function": 0.09700399286574239, "function with compact": 0.09700399286574239, "compact support": 0.09700399286574239, "support is bounded": 0.09700399286574239, "continuous": 0.29736558256021506, "function": 0.29736558256021506, "compact": 0.29736558256021506, "support": 0.29736558256021506, "bounded": 0.29736558256021506}}, {"docstring": "A Lipschitz function is continuous\n", "keywords": {"Lipschitz function": 0.04498862876540802, "function is continuous": 0.04940384002065631, "Lipschitz": 0.1447773057422032, "continuous": 0.15831692877998726, "function": 0.29736558256021506}}, {"docstring": "**Alias** of the reverse direction of has_mfderiv_at_iff_has_fderiv_at`.\n", "keywords": {"reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "mfderiv": 0.04491197687864554, "iff": 0.04491197687864554, "fderiv": 0.04491197687864554, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "**Alias** of the reverse direction of order.pred_ne_pred_iff`.\n", "keywords": {"direction of order.pred": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "pred": 0.04491197687864554, "iff": 0.04491197687864554, "order.pred": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "A version of `right_iff_left_not_left` with explicit `r` and `s`.\n", "keywords": {"left": 0.020602899695743707, "iff": 0.055708263664958506, "explicit": 0.11718348279991213, "version": 0.19092478917347616}}, {"docstring": "Preconnected sets are either contained in or disjoint to any given clopen set.\n", "keywords": {"Preconnected sets": 0.0325194426147957, "clopen set": 0.05417025203414716, "Preconnected": 0.11521656054299435, "contained": 0.1879836817695587, "disjoint": 0.1879836817695587, "clopen": 0.1879836817695587, "sets": 0.2733568418908229, "set": 0.2733568418908229}}, {"docstring": "**Alias** of the reverse direction of lt_sub_iff_add_lt'`.\n", "keywords": {"reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "iff": 0.04491197687864554, "add": 0.04491197687864554, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "A variant of `sum_range_succ` which pulls off the first term in the sum   rather than the last.\n", "keywords": {"range": 0.05393656033701752, "succ": 0.05393656033701752, "sum": 0.09106811155038866, "variant": 0.1367145963576765, "pulls": 0.1367145963576765, "term": 0.1367145963576765}}, {"docstring": " Bernoulli's inequality. This version works for semirings but requires additional hypotheses `0 \u2264 a * a` and `0 \u2264 (1 + a) * (1 + a)`.\n", "keywords": {"Bernoulli inequality": 0.008025058930468495, "requires additional hypotheses": 0.03520310942691324, "Bernoulli": 0.08922538916412363, "inequality": 0.08922538916412363, "additional hypotheses": 0.09108482621177338, "version works": 0.12124452117740256, "works for semirings": 0.12124452117740256, "semirings but requires": 0.12124452117740256, "requires additional": 0.12124452117740256, "hypotheses": 0.25386721785551913, "version": 0.32883716426354986, "works": 0.32883716426354986, "semirings": 0.32883716426354986, "requires": 0.32883716426354986, "additional": 0.32883716426354986}}, {"docstring": "A subring is closed under addition.\n", "keywords": {"closed under addition": 0.04940384002065631, "subring is closed": 0.09700399286574239, "addition": 0.15831692877998726, "subring": 0.29736558256021506, "closed": 0.29736558256021506}}, {"docstring": " The cosine of the sum of the angles of a possibly degenerate triangle (where two given sides are nonzero), vector angle form.\n", "keywords": {"vector angle form": 0.0014265357591421166, "possibly degenerate triangle": 0.0016151890443214874, "degenerate triangle": 0.011891118324371971, "sides are nonzero": 0.011891118324371971, "vector angle": 0.015716788421000303, "angle form": 0.015716788421000303, "possibly degenerate": 0.017798659388540475, "triangle": 0.08886407157392263, "nonzero": 0.08886407157392263, "vector": 0.08886407157392263, "form": 0.08886407157392263, "cosine": 0.132239959875874, "sum": 0.132239959875874, "possibly": 0.132239959875874, "degenerate": 0.132239959875874, "sides": 0.132239959875874, "angles": 0.17412653906161007, "angle": 0.17412653906161007}}, {"docstring": "**Alias** of the forward direction of inv_le'`.\n", "keywords": {"direction of inv": 0.015380821171891606, "forward direction": 0.02570861714399338, "Alias": 0.030396371632413578, "inv": 0.09568045026443411, "forward": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": "Easy inclusion: a differentiability point with derivative in `K` belongs to `D f K`.\n", "keywords": {"Easy inclusion": 0.009239332327148086, "differentiability point": 0.02570861714399338, "point with derivative": 0.02570861714399338, "Easy": 0.09568045026443411, "inclusion": 0.09568045026443411, "belongs": 0.09568045026443411, "differentiability": 0.15831692877998726, "point": 0.15831692877998726, "derivative": 0.15831692877998726}}, {"docstring": "Any simple object in a preadditive category is indecomposable.\n", "keywords": {"category is indecomposable": 0.04940384002065631, "simple object": 0.09700399286574239, "preadditive category": 0.09700399286574239, "indecomposable": 0.15831692877998726, "simple": 0.29736558256021506, "object": 0.29736558256021506, "preadditive": 0.29736558256021506, "category": 0.29736558256021506}}, {"docstring": " If the angle between two vectors is \u03c0, the inner product equals the negative product of the norms.\n", "keywords": {"equals the negative": 0.013095151449018445, "product equals": 0.016245817372079578, "negative product": 0.016245817372079578, "product": 0.07030442419566416, "norms": 0.08179429269966654, "angle": 0.11369206228658875, "vectors": 0.11369206228658875, "equals": 0.11369206228658875, "negative": 0.11369206228658875}}, {"docstring": "`1 * x` is equivalent to `x`.\n", "keywords": {"equivalent": 0.15831692877998726}}, {"docstring": "For the outer measure coming from a content, all Borel sets are measurable.\n", "keywords": {"outer measure coming": 0.03339840940482845, "Borel sets": 0.04498862876540802, "sets are measurable": 0.04940384002065631, "outer measure": 0.09700399286574239, "measure coming": 0.09700399286574239, "Borel": 0.1447773057422032, "content": 0.15831692877998726, "measurable": 0.15831692877998726, "outer": 0.29736558256021506, "measure": 0.29736558256021506, "coming": 0.29736558256021506, "sets": 0.29736558256021506}}, {"docstring": "Two equivalence relations are equal iff their underlying binary operations are equal.\n", "keywords": {"underlying binary operations": 0.006822309199625382, "equivalence relations": 0.034987023778306175, "iff their underlying": 0.034987023778306175, "underlying binary": 0.034987023778306175, "binary operations": 0.034987023778306175, "relations are equal": 0.038330279597458564, "equal iff": 0.038330279597458564, "operations are equal": 0.038330279597458564, "equal": 0.10038999320777726, "equivalence": 0.18385948854246909, "relations": 0.18385948854246909, "iff": 0.18385948854246909, "underlying": 0.18385948854246909, "binary": 0.18385948854246909, "operations": 0.18385948854246909}}, {"docstring": "Elements of an add right cancel semigroup are add-right-regular\n", "keywords": {"add right cancel": 0.09700399286574239, "cancel semigroup": 0.09700399286574239, "Elements": 0.15831692877998726, "add": 0.29736558256021506, "cancel": 0.29736558256021506, "semigroup": 0.29736558256021506}}, {"docstring": " Adding the angles between two vectors in each order, with the second vector in each angle negated, results in 0.\n", "keywords": {"angle negated": 0.01934892234613409, "Adding the angles": 0.04608664580965232, "Adding": 0.09713402394201612, "order": 0.09713402394201612, "negated": 0.09713402394201612, "results": 0.09713402394201612, "vectors": 0.15142227756780624, "vector": 0.15142227756780624, "angles": 0.19541708604559876, "angle": 0.19541708604559876}}, {"docstring": "The coercion from `lp E p` to `\u03a0 i, E i` is uniformly continuous.\n", "keywords": {"uniformly continuous": 0.015380821171891606, "continuous": 0.09568045026443411, "coercion": 0.15831692877998726, "uniformly": 0.15831692877998726}}, {"docstring": "Main statement of the Nullstellensatz\n", "keywords": {"Main statement": 0.04940384002065631, "Nullstellensatz": 0.08596317751626563, "Main": 0.15831692877998726, "statement": 0.29736558256021506}}, {"docstring": " The pigeonhole principle for finitely many pigeons counted by weight, non-strict inequality version: if the total weight of a finite set of pigeons is less than or equal to `n \u2022 b`, they are sorted into some pigeonholes, and for all but `n > 0` pigeonholes the total weight of the pigeons there is nonnegative, then for at least one of these `n` pigeonholes, the total weight of the pigeons in this pigeonhole is less than or equal to `b`.\n", "keywords": {"non-strict inequality version": 0.0009212307187764782, "total weight": 0.0024694350289970438, "non-strict inequality": 0.010178909268174162, "inequality version": 0.010178909268174162, "principle for finitely": 0.012978067427450163, "finite set": 0.012978067427450163, "pigeons counted": 0.018991872294961056, "weight": 0.023058465741907515, "pigeonhole principle": 0.02408656092637564, "total": 0.02657673825360778, "pigeons": 0.04116537519496833, "equal": 0.0467791136985298, "counted by weight": 0.04735589139325914, "pigeonholes": 0.06926468800845205, "pigeonholes the total": 0.07451671102680199, "finitely many pigeons": 0.07660521291873795, "set of pigeons": 0.07660521291873795, "non-strict": 0.08902212446623245, "version": 0.08902212446623245, "nonnegative": 0.08902212446623245}}, {"docstring": "A continuous function with compact support is bounded below.\n", "keywords": {"continuous function": 0.09700399286574239, "function with compact": 0.09700399286574239, "compact support": 0.09700399286574239, "support is bounded": 0.09700399286574239, "continuous": 0.29736558256021506, "function": 0.29736558256021506, "compact": 0.29736558256021506, "support": 0.29736558256021506, "bounded": 0.29736558256021506}}, {"docstring": " On a set with unique differentiability, any choice of iterated differential has to coincide with the one we have chosen in `iterated_fderiv_within \ud835\udd5c m f s`.\n", "keywords": {"unique differentiability": 0.020435055290363522, "set with unique": 0.033892441937102495, "iterated differential": 0.04949487345881267, "fderiv": 0.052376395424323874, "choice of iterated": 0.10882816095144712, "differentiability": 0.11060549338282699, "iterated": 0.13023752997463905, "set": 0.18105634546484617, "unique": 0.18105634546484617, "choice": 0.18105634546484617, "differential": 0.18105634546484617, "coincide": 0.18105634546484617, "chosen": 0.18105634546484617}}, {"docstring": "One direction of `div_le_iff` where `b` is allowed to be `0` (but `c` must be nonnegative)\n", "keywords": {"div": 0.04491197687864554, "iff": 0.04491197687864554, "nonnegative": 0.09568045026443411, "direction": 0.15831692877998726, "allowed": 0.15831692877998726}}, {"docstring": "**Alias** of flow.continuous`.\n", "keywords": {"Alias": 0.030396371632413578, "flow.continuous": 0.15831692877998726}}, {"docstring": " The pigeonhole principle for finitely many pigeons counted by heads: given a function between finite sets `s` and `t` and a natural number `b` such that `card t * n \u2264 card s`, there exists `y \u2208 t` such that its preimage in `s` has at least `n` elements. See also `finset.exists_lt_card_fiber_of_mul_lt_card_of_maps_to` for a stronger statement.\n", "keywords": {"counted by heads": 0.020637266594986464, "finite sets": 0.020637266594986464, "natural number": 0.020637266594986464, "pigeonhole principle": 0.02842327199218019, "principle for finitely": 0.02842327199218019, "finitely many pigeons": 0.02842327199218019, "pigeons counted": 0.02842327199218019, "function between finite": 0.02842327199218019, "card": 0.05434857343351108, "elements": 0.0814056219786931, "heads": 0.12162690767796851, "sets": 0.12162690767796851, "number": 0.12162690767796851, "exists": 0.12162690767796851, "stronger statement": 0.15323080301200853, "pigeonhole": 0.1662459552194571, "principle": 0.1662459552194571, "finitely": 0.1662459552194571, "pigeons": 0.1662459552194571, "counted": 0.1662459552194571}}, {"docstring": " `sin ((n + 1) * \u03b8)` is equal to `sin \u03b8` multiplied with the `n`-th Chebyshev polynomial of the second kind evaluated on `cos \u03b8`.\n", "keywords": {"Chebyshev polynomial": 0.009785871589879784, "kind evaluated": 0.018310930906343142, "sin": 0.04956935957632033, "Chebyshev": 0.07226952721156656, "multiplied": 0.09017440044927587, "cos": 0.09017440044927587, "equal": 0.13409574860218185, "polynomial": 0.13409574860218185, "kind": 0.13409574860218185, "evaluated": 0.13409574860218185}}, {"docstring": " Vieta's formula for the coefficients of the product of linear terms `X + r i`, The `k`th coefficient is `\u2211 t in powerset_len (card \u03c3 - k) (univ : finset \u03c3), \u220f i in t, r i`, i.e. the symmetric polynomial `esymm \u03c3 R (card \u03c3 - k)` of the constant terms `r i`.\n", "keywords": {"linear terms": 0.007774532029023942, "constant terms": 0.007774532029023942, "Vieta formula": 0.007899436963316861, "symmetric polynomial": 0.007899436963316861, "product of linear": 0.010488263465887495, "card": 0.028386692508603012, "terms": 0.03786123055738805, "len": 0.054709255964732355, "univ": 0.054709255964732355, "Vieta": 0.07692947664055963, "powerset": 0.07692947664055963, "finset": 0.07692947664055963, "polynomial": 0.07692947664055963, "esymm": 0.07692947664055963, "formula": 0.10187934809188742, "product": 0.10187934809188742, "linear": 0.10187934809188742, "symmetric": 0.10187934809188742, "constant": 0.10187934809188742, "coefficients": 0.1192755223470423}}, {"docstring": "An additive subgroup `K` includes `closure k` if and only if it includes `k`\n", "keywords": {"additive subgroup": 0.013546417228156258, "includes": 0.05332403764722467, "subgroup": 0.09492398510093508, "closure": 0.09492398510093508, "additive": 0.1408007092310104}}, {"docstring": "Permuting the columns changes the sign of the determinant.\n", "keywords": {"Permuting the columns": 0.00899321792126428, "Permuting": 0.0771485953923296, "determinant": 0.0771485953923296, "columns": 0.1155310835876123, "sign": 0.1155310835876123}}, {"docstring": " An injective measurable function from a Polish space to a second-countable topological space is a measurable embedding.\n", "keywords": {"injective measurable function": 0.004023478032557392, "second-countable topological space": 0.004023478032557392, "Polish space": 0.014265107890262672, "measurable embedding": 0.018329095544611738, "second-countable topological": 0.020225813225353943, "injective measurable": 0.027430531955772185, "measurable function": 0.027430531955772185, "topological space": 0.027430531955772185, "Polish": 0.07417313840262335, "measurable": 0.094808423351325, "space": 0.094808423351325, "embedding": 0.09492398510093508, "injective": 0.1408007092310104, "function": 0.1408007092310104, "second-countable": 0.1408007092310104, "topological": 0.1408007092310104}}, {"docstring": " Given `f : \u03b2 \u2192 \u211d`, if `f` sends `{i | p i}` to a set of positive numbers accumulating to zero, then `f i`-neighborhoods of the diagonal form a basis of `\ud835\udce4 \u03b1`.  For specific bases see `uniformity_basis_dist`, `uniformity_basis_dist_inv_nat_succ`, and `uniformity_basis_dist_inv_nat_pos`.\n", "keywords": {"positive numbers accumulating": 0.007426186610717834, "set of positive": 0.036970686073743854, "positive numbers": 0.036970686073743854, "numbers accumulating": 0.036970686073743854, "diagonal form": 0.036970686073743854, "uniformity": 0.05301083730062912, "dist": 0.05301083730062912, "sends": 0.09375429005858181, "inv": 0.09929297484926089, "nat": 0.09929297484926089, "basis": 0.10870217718778918, "neighborhoods": 0.13915261617565372, "set": 0.18881892258596694, "positive": 0.18881892258596694, "numbers": 0.18881892258596694, "accumulating": 0.18881892258596694, "diagonal": 0.18881892258596694, "form": 0.18881892258596694, "specific bases": 0.249747951155733, "form a basis": 0.250285367511265}}, {"docstring": "**Alias** of left_distrib`.\n", "keywords": {"Alias": 0.030396371632413578, "distrib": 0.04491197687864554, "left": 0.15831692877998726}}, {"docstring": "Natural division is always less than division in the field.\n", "keywords": {"Natural division": 0.035552851931764155, "Natural": 0.11984314898676356, "field": 0.11984314898676356, "division": 0.14323823713631006}}, {"docstring": "The angle between a nonnegative multiple of a vector and that vector is 0.\n", "keywords": {"nonnegative multiple": 0.037831312533597124, "vector": 0.13945519496053638, "angle": 0.19092478917347616, "nonnegative": 0.19092478917347616, "multiple": 0.19092478917347616}}, {"docstring": "**Alias** of the reverse direction of closure_nonempty_iff`.\n", "keywords": {"direction of closure": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "nonempty": 0.04491197687864554, "iff": 0.04491197687864554, "closure": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " Note that `b \u2208 (s.filter (\u03bb ab, prod.fst ab = a)).image prod.snd` iff `(a, b) \u2208 s` so we can simplify the right hand side of this lemma. However the form stated here is more useful for iterating this lemma, e.g., if we have `f : \u03b1 \u00d7 \u03b2 \u00d7 \u03b3 \u2192 M`.\n", "keywords": {"image prod.snd": 0.021578258620195793, "hand side": 0.05695550697646169, "s.filter": 0.07026717154473598, "iff": 0.07026717154473598, "lemma": 0.08462502603021309, "iterating this lemma": 0.09491477353012231, "Note": 0.14533572323085503, "prod.fst": 0.14533572323085503, "image": 0.14533572323085503, "prod.snd": 0.14533572323085503, "simplify": 0.2321344025274505, "hand": 0.2321344025274505, "side": 0.2321344025274505, "form stated": 0.3556212968930714, "form": 0.5121824452574515, "stated": 0.5121824452574515, "iterating": 0.5121824452574515}}, {"docstring": "A locally constant function is constant on any preconnected set.\n", "keywords": {"locally constant function": 0.010962043841203115, "preconnected set": 0.022138323509052035, "locally constant": 0.05417025203414716, "constant function": 0.05417025203414716, "set": 0.11521656054299435, "function is constant": 0.11793310824193863, "constant": 0.13667842094541144, "locally": 0.1879836817695587, "function": 0.1879836817695587, "preconnected": 0.1879836817695587}}, {"docstring": "If `g, h \u2264 f` and `g i + h i \u2264 f i`, then the product of `f` over `s` is at least the  sum of the products of `g` and `h`. This is the version for `canonically_ordered_comm_semiring`.\n", "keywords": {"product": 0.10315348612417582, "products": 0.10315348612417582, "sum": 0.1531727145735673, "canonically": 0.2182620423168793, "ordered": 0.2182620423168793, "comm": 0.2182620423168793, "semiring": 0.2182620423168793, "version": 0.3858257107143767}}, {"docstring": "Two different points are affinely independent.\n", "keywords": {"affinely independent": 0.04940384002065631, "points are affinely": 0.09700399286574239, "independent": 0.15831692877998726, "points": 0.29736558256021506, "affinely": 0.29736558256021506}}, {"docstring": "**Alias** of the reverse direction of finset.Ico_eq_empty_iff`.\n", "keywords": {"direction of finset.Ico": 0.015380821171891606, "reverse direction": 0.02570861714399338, "Alias": 0.030396371632413578, "empty": 0.04491197687864554, "iff": 0.04491197687864554, "finset.Ico": 0.09568045026443411, "reverse": 0.15831692877998726, "direction": 0.15831692877998726}}, {"docstring": " A product over all subsets of `s \u222a {x}` is obtained by multiplying the product over all subsets of `s`, and over all subsets of `s` to which one adds `x`.\n", "keywords": {"obtained by multiplying": 0.024843479720507586, "subsets": 0.03467656789229584, "multiplying the product": 0.06380299299961537, "product": 0.0851294669924546, "adds": 0.10556226050272582, "obtained": 0.1556959951131179, "multiplying": 0.1556959951131179}}, {"docstring": " If we fix a background affine basis `b`, then for any other basis `b\u2082`, we can characterise the barycentric coordinates provided by `b\u2082` in terms of determinants relative to `b`.\n", "keywords": {"background affine basis": 0.0009751173254057544, "barycentric coordinates provided": 0.0013483513109263543, "affine basis": 0.008757840211319088, "fix a background": 0.01207746271572421, "background affine": 0.01207746271572421, "characterise the barycentric": 0.01207746271572421, "barycentric coordinates": 0.01207746271572421, "coordinates provided": 0.01207746271572421, "terms of determinants": 0.01207746271572421, "determinants relative": 0.01207746271572421, "basis": 0.03973737022273376, "fix": 0.10923981997294611, "background": 0.10923981997294611, "affine": 0.10923981997294611, "characterise": 0.10923981997294611, "barycentric": 0.10923981997294611, "coordinates": 0.10923981997294611, "provided": 0.10923981997294611, "terms": 0.10923981997294611, "determinants": 0.10923981997294611}}, {"docstring": "The norm of the projection is smaller or equal to the norm of the original element.", "keywords": {"original element": 0.009386651690650429, "projection is smaller": 0.013095151449018445, "smaller or equal": 0.013095151449018445, "norm": 0.04213844269123149, "element": 0.08179429269966654, "projection": 0.11369206228658875, "smaller": 0.11369206228658875, "equal": 0.11369206228658875, "original": 0.11369206228658875}}]