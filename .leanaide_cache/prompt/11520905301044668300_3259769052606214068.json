[["If `task : Task Œ±` then `task.get : Œ±` blocks the current thread until the\nvalue is available, and then returns the result of the task. ",{"type":"{Œ± : Type u} ‚Üí Task Œ± ‚Üí Œ±","name":"Task.get","isProp":false,"docString":"If `task : Task Œ±` then `task.get : Œ±` blocks the current thread until the\nvalue is available, and then returns the result of the task. ","distance":1.9581269160399319417820152011699974536895751953125}],[" The center of the group of units of a `GroupWithZero` type `M` equals the preimage of the center of `M` under the underlying value function.",{"type":"‚àÄ {M : Type u_1} [inst : GroupWithZero M], Set.center MÀ£ = Units.val ‚Åª¬π' Set.center M","name":"Set.center_units_eq","isProp":true,"docString":" The center of the group of units of a `GroupWithZero` type `M` equals the preimage of the center of `M` under the underlying value function.","distance":1.985351891890575704024968217709101736545562744140625}],["This theorem, `neg_zero`, states that for any type `G` that is a member of the `NegZeroClass`, the negation of zero equals zero. In mathematical terms, it means that if `G` has a negation operation and a zero element, then the negation of the zero element is equal to the zero element itself.",{"type":"‚àÄ {G : Type u_1} [inst : NegZeroClass G], -0 = 0","name":"neg_zero","isProp":true,"docString":"This theorem, `neg_zero`, states that for any type `G` that is a member of the `NegZeroClass`, the negation of zero equals zero. In mathematical terms, it means that if `G` has a negation operation and a zero element, then the negation of the zero element is equal to the zero element itself.","distance":1.98764735365070865924508325406350195407867431640625}],["Construct a `Zero C` for a category with a zero object.\nThis can not be a global instance as it will trigger for every `Zero C` typeclass search.\n",{"type":"(C : Type u) ‚Üí [inst : CategoryTheory.Category.{v, u} C] ‚Üí [inst : CategoryTheory.Limits.HasZeroObject C] ‚Üí Zero C","name":"CategoryTheory.Limits.HasZeroObject.zero'","isProp":false,"docString":"Construct a `Zero C` for a category with a zero object.\nThis can not be a global instance as it will trigger for every `Zero C` typeclass search.\n","distance":1.961787069179010689623510188539512455463409423828125}],[" If a function `f : Œ± ‚Üí Œ≤` is eventually constant along a filter `l` on `Œ±`, then the composition `g ‚àò f` of `g : Œ≤ ‚Üí Œ≥` with `f` is also eventually constant along `l`.",{"type":"‚àÄ {Œ± : Type u_1} {Œ≤ : Type u_2} {Œ≥ : Type u_3} {l : Filter Œ±} {f : Œ± ‚Üí Œ≤},\n  Filter.EventuallyConst f l ‚Üí ‚àÄ (g : Œ≤ ‚Üí Œ≥), Filter.EventuallyConst (g ‚àò f) l","name":"Filter.EventuallyConst.comp","isProp":true,"docString":" If a function `f : Œ± ‚Üí Œ≤` is eventually constant along a filter `l` on `Œ±`, then the composition `g ‚àò f` of `g : Œ≤ ‚Üí Œ≥` with `f` is also eventually constant along `l`.","distance":1.987309515446163299401405311073176562786102294921875}],["The theorem `RatFunc.num_zero` states that for any type `K` that is a field, the numerator of the zero rational function (which is represented as `RatFunc.num 0`) is zero. In other words, if you have a rational function which is zero, then its numerator is also zero. This is applicable in any field `K`.",{"type":"‚àÄ {K : Type u} [inst : Field K], RatFunc.num 0 = 0","name":"RatFunc.num_zero","isProp":true,"docString":"The theorem `RatFunc.num_zero` states that for any type `K` that is a field, the numerator of the zero rational function (which is represented as `RatFunc.num 0`) is zero. In other words, if you have a rational function which is zero, then its numerator is also zero. This is applicable in any field `K`.","distance":1.9881921346016369067655205071787349879741668701171875}],["Construct a function from a default value `H0`, and a function to use if there exists a value\nsatisfying the predicate. ",{"type":"{Œ± : Prop} ‚Üí {p : Œ± ‚Üí Prop} ‚Üí {C : Sort u_1} ‚Üí C ‚Üí ((a : Œ±) ‚Üí p a ‚Üí C) ‚Üí C","name":"Classical.existsCases","isProp":false,"docString":"Construct a function from a default value `H0`, and a function to use if there exists a value\nsatisfying the predicate. ","distance":1.9663730544310797920815048200893215835094451904296875}],["Computes `‚åämax 0 (log‚ÇÇ n)‚åã`.\n\n`log2 0 = log2 1 = 0`, `log2 2 = 1`, ..., `log2 (2^i) = i`, etc.\n",{"type":"‚Ñï ‚Üí ‚Ñï","name":"Nat.log2","isProp":false,"docString":"Computes `‚åämax 0 (log‚ÇÇ n)‚åã`.\n\n`log2 0 = log2 1 = 0`, `log2 2 = 1`, ..., `log2 (2^i) = i`, etc.\n","distance":1.9693066631812765621134531102143228054046630859375}],["`spawn fn : Task Œ±` constructs and immediately launches a new task for\nevaluating the function `fn () : Œ±` asynchronously.\n\n`prio`, if provided, is the priority of the task.\n",{"type":"{Œ± : Type u} ‚Üí (Unit ‚Üí Œ±) ‚Üí optParam Task.Priority Task.Priority.default ‚Üí Task Œ±","name":"Task.spawn","isProp":false,"docString":"`spawn fn : Task Œ±` constructs and immediately launches a new task for\nevaluating the function `fn () : Œ±` asynchronously.\n\n`prio`, if provided, is the priority of the task.\n","distance":1.9693153408056314201957093246164731681346893310546875}],["Retrieves the value of `a : Part Œ±` if it exists, and return the provided default value\notherwise. ",{"type":"{Œ± : Type u_1} ‚Üí (a : Part Œ±) ‚Üí [inst : Decidable a.Dom] ‚Üí Œ± ‚Üí Œ±","name":"Part.getOrElse","isProp":false,"docString":"Retrieves the value of `a : Part Œ±` if it exists, and return the provided default value\notherwise. ","distance":1.9693491664199209711938465261482633650302886962890625}],["Gadget for optional parameter support.\n\nA binder like `(x : Œ± := default)` in a declaration is syntax sugar for\n`x : optParam Œ± default`, and triggers the elaborator to attempt to use\n`default` to supply the argument if it is not supplied.\n",{"type":"(Œ± : Sort u) ‚Üí Œ± ‚Üí Sort u","name":"optParam","isProp":false,"docString":"Gadget for optional parameter support.\n\nA binder like `(x : Œ± := default)` in a declaration is syntax sugar for\n`x : optParam Œ± default`, and triggers the elaborator to attempt to use\n`default` to supply the argument if it is not supplied.\n","distance":1.9698737140871429573962814174592494964599609375}],["An estimator for the priority of the key.\n(We will assume we have `[‚àÄ a : Œ±, Estimator (prio a) (Œµ a)]`.) ",{"type":"{Œ± : Sort u_1} ‚Üí {œâ : Type u_2} ‚Üí {prio : Œ± ‚Üí Thunk œâ} ‚Üí {Œµ : Œ± ‚Üí Type} ‚Üí (self : BestFirstNode prio Œµ) ‚Üí Œµ self.key","name":"BestFirstNode.estimator","isProp":false,"docString":"An estimator for the priority of the key.\n(We will assume we have `[‚àÄ a : Œ±, Estimator (prio a) (Œµ a)]`.) ","distance":1.9712069188521434970340351355844177305698394775390625}],["`f : Œ± ‚Üí+* Œ≤` has a trivial codomain iff its range is `{0}`. ",{"type":"‚àÄ {Œ± : Type u_2} {Œ≤ : Type u_3} {x : NonAssocSemiring Œ±} {x_1 : NonAssocSemiring Œ≤} (f : Œ± ‚Üí+* Œ≤),\n  0 = 1 ‚Üî Set.range ‚áëf = {0}","name":"RingHom.codomain_trivial_iff_range_eq_singleton_zero","isProp":true,"docString":"`f : Œ± ‚Üí+* Œ≤` has a trivial codomain iff its range is `{0}`. ","distance":1.972720604894285134633946654503233730792999267578125}],["Given a point `x` in a product space `Œ† (n : ‚Ñï), E n`, and `s` a subset of this space, then\n`longestPrefix x s` if the largest `n` for which there is an element of `s` having the same\nprefix of length `n` as `x`. If there is no such `n`, use `0` by convention. ",{"type":"{E : ‚Ñï ‚Üí Type u_2} ‚Üí ((n : ‚Ñï) ‚Üí E n) ‚Üí Set ((n : ‚Ñï) ‚Üí E n) ‚Üí ‚Ñï","name":"PiNat.longestPrefix","isProp":false,"docString":"Given a point `x` in a product space `Œ† (n : ‚Ñï), E n`, and `s` a subset of this space, then\n`longestPrefix x s` if the largest `n` for which there is an element of `s` having the same\nprefix of length `n` as `x`. If there is no such `n`, use `0` by convention. ","distance":1.97673872175974896236994027276523411273956298828125}],["The name of the global preprocessor, used in trace output. ",{"type":"Linarith.GlobalPreprocessor ‚Üí String","name":"Linarith.GlobalPreprocessor.name","isProp":false,"docString":"The name of the global preprocessor, used in trace output. ","distance":1.9770839810855582729942625519470311701297760009765625}],["The default priority `default = 1000`, which is used when no priority is set. ",{"type":"Lean.ParserDescr","name":"prioDefault","isProp":false,"docString":"The default priority `default = 1000`, which is used when no priority is set. ","distance":1.9781185620334917896201432085945270955562591552734375}],["`x.iget i` takes the component of `x` designated by `i` if any is or returns\na default value ",{"type":"{P : PFunctor.{u}} ‚Üí [inst : DecidableEq P.A] ‚Üí {Œ± : Type u_1} ‚Üí [inst : Inhabited Œ±] ‚Üí ‚ÜëP Œ± ‚Üí PFunctor.Idx P ‚Üí Œ±","name":"PFunctor.Obj.iget","isProp":false,"docString":"`x.iget i` takes the component of `x` designated by `i` if any is or returns\na default value ","distance":1.98162924688250807747635917621664702892303466796875}],["The default priority for spawned tasks, also the lowest priority: `0`. ",{"type":"Task.Priority","name":"Task.Priority.default","isProp":false,"docString":"The default priority for spawned tasks, also the lowest priority: `0`. ","distance":1.9819097575706792202510087008704431354999542236328125}],["**Maximum principle** for convex functions on a segment. If a function `f` is convex on the\nsegment `[x, y]`, then the eventual maximum of `f` on `[x, y]` is at `x` or `y`. ",{"type":"‚àÄ {ùïú : Type u_1} {E : Type u_2} {Œ≤ : Type u_4} [inst : LinearOrderedField ùïú] [inst_1 : AddCommGroup E]\n  [inst_2 : LinearOrderedAddCommGroup Œ≤] [inst_3 : Module ùïú E] [inst_4 : Module ùïú Œ≤] [inst_5 : OrderedSMul ùïú Œ≤]\n  {f : E ‚Üí Œ≤} {x y z : E}, ConvexOn ùïú (segment ùïú x y) f ‚Üí z ‚àà segment ùïú x y ‚Üí f z ‚â§ max (f x) (f y)","name":"ConvexOn.le_max_of_mem_segment","isProp":true,"docString":"**Maximum principle** for convex functions on a segment. If a function `f` is convex on the\nsegment `[x, y]`, then the eventual maximum of `f` on `[x, y]` is at `x` or `y`. ","distance":1.982141186343677308201449704938568174839019775390625}],["Given two integers, return their GCD and an equality proof.\nPanics if `ex` or `ey` aren't integer literals. ",{"type":"(ex ey : Q(‚Ñ§)) ‚Üí (ed : Q(‚Ñï)) √ó Q(Int.gcd ¬´$ex¬ª ¬´$ey¬ª = ¬´$ed¬ª)","name":"Tactic.NormNum.proveIntGCD","isProp":false,"docString":"Given two integers, return their GCD and an equality proof.\nPanics if `ex` or `ey` aren't integer literals. ","distance":1.983132431995556554937820692430250346660614013671875}],["Shortcut instance to help typeclass inference out. ",{"type":"{V : Type u_1} ‚Üí\n  {P : Type u_2} ‚Üí\n    [inst : NormedAddCommGroup V] ‚Üí [inst_1 : MetricSpace P] ‚Üí [inst_2 : NormedAddTorsor V P] ‚Üí AddTorsor V P","name":"NormedAddTorsor.toAddTorsor'","isProp":false,"docString":"Shortcut instance to help typeclass inference out. ","distance":1.9832852374438492137898037981358356773853302001953125}],["Name to use for the declaration for a type that is `Equiv` to the given type. ",{"type":"Mathlib.ProxyType.ProxyEquivConfig ‚Üí Lean.Name","name":"Mathlib.ProxyType.ProxyEquivConfig.proxyName","isProp":false,"docString":"Name to use for the declaration for a type that is `Equiv` to the given type. ","distance":1.9833899215816013228419478764408268034458160400390625}],["Creates a `TypeName` instance.\n\nFor safety, it is required that the constant `typeName` is definitionally equal\nto `Œ±`.\n",{"type":"(Œ± : Type u) ‚Üí Lean.Name ‚Üí TypeName Œ±","name":"TypeName.mk","isProp":false,"docString":"Creates a `TypeName` instance.\n\nFor safety, it is required that the constant `typeName` is definitionally equal\nto `Œ±`.\n","distance":1.9835661127542447701443961705081164836883544921875}],["A type synonym for the given `V`, associated with the L`p` norm. Note that by default this just\nforgets the norm structure on `V`; it is up to downstream users to implement the L`p` norm (for\ninstance, on `Prod` and finite `Pi` types). ",{"type":"ENNReal ‚Üí Type uV ‚Üí Type uV","name":"WithLp","isProp":false,"docString":"A type synonym for the given `V`, associated with the L`p` norm. Note that by default this just\nforgets the norm structure on `V`; it is up to downstream users to implement the L`p` norm (for\ninstance, on `Prod` and finite `Pi` types). ","distance":1.9836549044562641341826747520826756954193115234375}]]