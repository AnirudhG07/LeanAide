[["If `task : Task α` then `task.get : α` blocks the current thread until the\nvalue is available, and then returns the result of the task. ",{"type":"{α : Type u} → Task α → α","name":"Task.get","isProp":false,"docString":"If `task : Task α` then `task.get : α` blocks the current thread until the\nvalue is available, and then returns the result of the task. ","distance":1.9450300362649126650893549594911746680736541748046875}],[" If `A` is a set-like type, `M₁` has an identity element `e` for some operation, and `1` is in class `OneMemClass`, then `coe (1 : M₁) = e`.",{"type":"∀ {A : Type u_4} {M₁ : Type u_5} [inst : SetLike A M₁] [inst_1 : One M₁] [hA : OneMemClass A M₁] (S' : A), ↑1 = 1","name":"OneMemClass.coe_one","isProp":true,"docString":" If `A` is a set-like type, `M₁` has an identity element `e` for some operation, and `1` is in class `OneMemClass`, then `coe (1 : M₁) = e`.","distance":1.966860740622597969462503897375427186489105224609375}],["The theorem `ExtremallyDisconnected.open_closure` states that for any type `X` equipped with a topological space structure and the property of being extremally disconnected, any set `U` of `X` that is open has the property that its closure is also open. Here, the closure of a set is defined as the smallest closed set containing the set, and the openness of a set is subject to the definition of open sets in the ambient topological space. In other words, in an extremally disconnected topological space, the closure of any open set remains open.",{"type":"∀ {X : Type u} [inst : TopologicalSpace X] [self : ExtremallyDisconnected X] (U : Set X), IsOpen U → IsOpen (closure U)","name":"ExtremallyDisconnected.open_closure","isProp":true,"docString":"The theorem `ExtremallyDisconnected.open_closure` states that for any type `X` equipped with a topological space structure and the property of being extremally disconnected, any set `U` of `X` that is open has the property that its closure is also open. Here, the closure of a set is defined as the smallest closed set containing the set, and the openness of a set is subject to the definition of open sets in the ambient topological space. In other words, in an extremally disconnected topological space, the closure of any open set remains open.","distance":1.9667422489278243435961712748394347727298736572265625}],["Shortcut instance to help typeclass inference out. ",{"type":"{V : Type u_1} →\n  {P : Type u_2} →\n    [inst : NormedAddCommGroup V] → [inst_1 : MetricSpace P] → [inst_2 : NormedAddTorsor V P] → AddTorsor V P","name":"NormedAddTorsor.toAddTorsor'","isProp":false,"docString":"Shortcut instance to help typeclass inference out. ","distance":1.94647812197882341678223383496515452861785888671875}],[" A type `α` is empty if and only if there exists no function from `α` to `False`.",{"type":"∀ {α : Sort u_1}, IsEmpty α ↔ α → False","name":"isEmpty_iff","isProp":true,"docString":" A type `α` is empty if and only if there exists no function from `α` to `False`.","distance":1.96687258386146357480583901633508503437042236328125}],["This theorem, termed as an alias of the forward direction of `Filter.eventuallyConst_iff_exists_eventuallyEq`, states that for any types `α` and `β`, a filter `l` on `α`, and a function `f` from `α` to `β`, given that type `β` is nonempty, if the function `f` is eventually constant along the filter `l` (as defined by `Filter.EventuallyConst`), then there exists a constant `c` such that the function `f` is eventually equivalent to the function that always returns `c` for all inputs (expressed as `l.EventuallyEq f fun x => c`). In simpler terms, if a function stabilizes to a constant value under a certain filter, we can find that constant.",{"type":"∀ {α : Type u_1} {β : Type u_2} {l : Filter α} {f : α → β} [inst : Nonempty β],\n  Filter.EventuallyConst f l → ∃ c, l.EventuallyEq f fun x => c","name":"Filter.EventuallyConst.eventuallyEq_const","isProp":true,"docString":"This theorem, termed as an alias of the forward direction of `Filter.eventuallyConst_iff_exists_eventuallyEq`, states that for any types `α` and `β`, a filter `l` on `α`, and a function `f` from `α` to `β`, given that type `β` is nonempty, if the function `f` is eventually constant along the filter `l` (as defined by `Filter.EventuallyConst`), then there exists a constant `c` such that the function `f` is eventually equivalent to the function that always returns `c` for all inputs (expressed as `l.EventuallyEq f fun x => c`). In simpler terms, if a function stabilizes to a constant value under a certain filter, we can find that constant.","distance":1.966784369472401206024869679822586476802825927734375}],["Construct a `Zero C` for a category with a zero object.\nThis can not be a global instance as it will trigger for every `Zero C` typeclass search.\n",{"type":"(C : Type u) → [inst : CategoryTheory.Category.{v, u} C] → [inst : CategoryTheory.Limits.HasZeroObject C] → Zero C","name":"CategoryTheory.Limits.HasZeroObject.zero'","isProp":false,"docString":"Construct a `Zero C` for a category with a zero object.\nThis can not be a global instance as it will trigger for every `Zero C` typeclass search.\n","distance":1.9466687098123724997122963031870312988758087158203125}],["A choice-free shortcut instance.",{"type":"∀ (α : Type u) [inst : OrderedAddCommGroup α],\n  ContravariantClass α α (Function.swap fun x x_1 => x + x_1) fun x x_1 => x ≤ x_1","name":"OrderedAddCommGroup.to_contravariantClass_right_le","isProp":true,"docString":"A choice-free shortcut instance.","distance":1.947189952049111827392380291712470352649688720703125}],["The name of the preprocessor, used in trace output. ",{"type":"Linarith.Preprocessor → String","name":"Linarith.Preprocessor.name","isProp":false,"docString":"The name of the preprocessor, used in trace output. ","distance":1.9490487161221541345668128997203893959522247314453125}],["A shortcut instance to prevent timing out. Hopefully to be removed in the future. ",{"type":"(R : Type u) →\n  (S : Type v) →\n    [inst : CommRing R] →\n      [inst_1 : CommRing S] →\n        [inst_2 : Algebra R S] → Module (TensorProduct R S S) ↥(Ideal.cotangentIdeal (KaehlerDifferential.ideal R S))","name":"instSS","isProp":false,"docString":"A shortcut instance to prevent timing out. Hopefully to be removed in the future. ","distance":1.9529489486474134185556295051355846226215362548828125}],["The stalk at `x` of a `PresheafedSpace`.\n",{"type":"{C : Type u} →\n  [inst : CategoryTheory.Category.{v, u} C] →\n    [inst_1 : CategoryTheory.Limits.HasColimits C] → (X : AlgebraicGeometry.PresheafedSpace C) → ↑↑X → C","name":"AlgebraicGeometry.PresheafedSpace.stalk","isProp":false,"docString":"The stalk at `x` of a `PresheafedSpace`.\n","distance":1.9543747386713772318245219139498658478260040283203125}],["The constant presheaf on `X` with value `Z`. ",{"type":"{C : Type u_1} → [inst : CategoryTheory.Category.{u_2, u_1} C] → TopCat → C → AlgebraicGeometry.PresheafedSpace C","name":"AlgebraicGeometry.PresheafedSpace.const","isProp":false,"docString":"The constant presheaf on `X` with value `Z`. ","distance":1.9545221878268750348439652952947653830051422119140625}],["The name of the global preprocessor, used in trace output. ",{"type":"Linarith.GlobalPreprocessor → String","name":"Linarith.GlobalPreprocessor.name","isProp":false,"docString":"The name of the global preprocessor, used in trace output. ","distance":1.955167823753310774037572628003545105457305908203125}],["Produce a string for a given `InjectiveFunction`.\nThe output is of the form `[x₀ ↦ f x₀, .. xₙ ↦ f xₙ, x ↦ x]`.\nUnlike for `TotalFunction`, the default value is not a constant\nbut the identity function.\n",{"type":"{α : Type u} → [inst : Repr α] → SlimCheck.InjectiveFunction α → String","name":"SlimCheck.InjectiveFunction.repr","isProp":false,"docString":"Produce a string for a given `InjectiveFunction`.\nThe output is of the form `[x₀ ↦ f x₀, .. xₙ ↦ f xₙ, x ↦ x]`.\nUnlike for `TotalFunction`, the default value is not a constant\nbut the identity function.\n","distance":1.9552332023185317044777775663533248007297515869140625}],["`spawn fn : Task α` constructs and immediately launches a new task for\nevaluating the function `fn () : α` asynchronously.\n\n`prio`, if provided, is the priority of the task.\n",{"type":"{α : Type u} → (Unit → α) → optParam Task.Priority Task.Priority.default → Task α","name":"Task.spawn","isProp":false,"docString":"`spawn fn : Task α` constructs and immediately launches a new task for\nevaluating the function `fn () : α` asynchronously.\n\n`prio`, if provided, is the priority of the task.\n","distance":1.95602349620236282135010696947574615478515625}],["Returns the projection information of a structure. ",{"type":"List Simps.ProjectionData → String → Lean.Name → Lean.MessageData","name":"Simps.projectionsInfo","isProp":false,"docString":"Returns the projection information of a structure. ","distance":1.95632443167401159911378272227011620998382568359375}],["Cast a `SNum` to the corresponding integer. ",{"type":"SNum → ℤ","name":"Int.ofSnum","isProp":false,"docString":"Cast a `SNum` to the corresponding integer. ","distance":1.958655582876720036011874981340952217578887939453125}],["Extract the constant from `hf : AntilipschitzWith K f`. This is useful, e.g.,\nif `K` is given by a long formula, and we want to reuse this value. ",{"type":"{α : Type u_1} →\n  {β : Type u_2} →\n    [inst : PseudoEMetricSpace α] →\n      [inst_1 : PseudoEMetricSpace β] → {K : NNReal} → {f : α → β} → AntilipschitzWith K f → NNReal","name":"AntilipschitzWith.k","isProp":false,"docString":"Extract the constant from `hf : AntilipschitzWith K f`. This is useful, e.g.,\nif `K` is given by a long formula, and we want to reuse this value. ","distance":1.9588961873959409576428924992796964943408966064453125}],["If `y ∈ closure {p₀}`, then the stalk of `skyscraperPresheaf p₀ A` at `y` is `A`.\n",{"type":"{X : TopCat} →\n  (p₀ : ↑X) →\n    [inst : (U : TopologicalSpace.Opens ↑X) → Decidable (p₀ ∈ U)] →\n      {C : Type v} →\n        [inst_1 : CategoryTheory.Category.{u, v} C] →\n          (A : C) →\n            [inst_2 : CategoryTheory.Limits.HasTerminal C] →\n              [inst_3 : CategoryTheory.Limits.HasColimits C] →\n                {y : ↑X} → p₀ ⤳ y → (TopCat.Presheaf.stalk (skyscraperPresheaf p₀ A) y ≅ A)","name":"skyscraperPresheafStalkOfSpecializes","isProp":false,"docString":"If `y ∈ closure {p₀}`, then the stalk of `skyscraperPresheaf p₀ A` at `y` is `A`.\n","distance":1.958904927727001865633837951463647186756134033203125}],["The cocone at `A` for the stalk functor of `skyscraperPresheaf p₀ A` when `y ∈ closure {p₀}`\n",{"type":"{X : TopCat} →\n  (p₀ : ↑X) →\n    [inst : (U : TopologicalSpace.Opens ↑X) → Decidable (p₀ ∈ U)] →\n      {C : Type v} →\n        [inst_1 : CategoryTheory.Category.{u, v} C] →\n          (A : C) →\n            [inst_2 : CategoryTheory.Limits.HasTerminal C] →\n              {y : ↑X} →\n                p₀ ⤳ y →\n                  CategoryTheory.Limits.Cocone\n                    (CategoryTheory.Functor.comp (TopologicalSpace.OpenNhds.inclusion y).op (skyscraperPresheaf p₀ A))","name":"skyscraperPresheafCoconeOfSpecializes","isProp":false,"docString":"The cocone at `A` for the stalk functor of `skyscraperPresheaf p₀ A` when `y ∈ closure {p₀}`\n","distance":1.95892716953884615804781788028776645660400390625}],["A choice-free shortcut instance. ",{"type":"∀ (α : Type u) [inst : OrderedCommGroup α], ContravariantClass α α (fun x x_1 => x * x_1) fun x x_1 => x ≤ x_1","name":"OrderedCommGroup.to_contravariantClass_left_le","isProp":true,"docString":"A choice-free shortcut instance. ","distance":1.959210001379446897118441484053619205951690673828125}],["Delaborator that prints the current application with universe parameters on the head symbol,\nunless `pp.universes` is explicitly set to `false`.\n",{"type":"Lean.PrettyPrinter.Delaborator.Delab","name":"Mathlib.PPWithUniv.delabWithUniv","isProp":false,"docString":"Delaborator that prints the current application with universe parameters on the head symbol,\nunless `pp.universes` is explicitly set to `false`.\n","distance":1.959677843284518328204057979746721684932708740234375}],["Formats a `CompSource` for printing. ",{"type":"Linarith.CompSource → String","name":"Linarith.CompSource.toString","isProp":false,"docString":"Formats a `CompSource` for printing. ","distance":1.9602280043692326128024205900146625936031341552734375}],["Term elaborator that retrieves the current `SearchPath`.\n\nTypical usage is `searchPathRef.set compile_time_search_path%`.\n\nThis must not be used in files that are potentially compiled on another machine and then\nimported.\n(That is, if used in an imported file it will embed the search path from whichever machine\ncompiled the `.olean`.)\n",{"type":"Lean.ParserDescr","name":"«termCompile_time_search_path%»","isProp":false,"docString":"Term elaborator that retrieves the current `SearchPath`.\n\nTypical usage is `searchPathRef.set compile_time_search_path%`.\n\nThis must not be used in files that are potentially compiled on another machine and then\nimported.\n(That is, if used in an imported file it will embed the search path from whichever machine\ncompiled the `.olean`.)\n","distance":1.960318811632818292167712570517323911190032958984375}]]