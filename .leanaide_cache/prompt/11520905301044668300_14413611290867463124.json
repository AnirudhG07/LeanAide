[["Shortcut instance to help typeclass inference out. ",{"type":"{V : Type u_1} →\n  {P : Type u_2} →\n    [inst : NormedAddCommGroup V] → [inst_1 : MetricSpace P] → [inst_2 : NormedAddTorsor V P] → AddTorsor V P","name":"NormedAddTorsor.toAddTorsor'","isProp":false,"docString":"Shortcut instance to help typeclass inference out. ","distance":1.9427377489785999653548742571729235351085662841796875}],[" If `A` is a set-like type, `M₁` has an identity element `e` for some operation, and `1` is in class `OneMemClass`, then `coe (1 : M₁) = e`.",{"type":"∀ {A : Type u_4} {M₁ : Type u_5} [inst : SetLike A M₁] [inst_1 : One M₁] [hA : OneMemClass A M₁] (S' : A), ↑1 = 1","name":"OneMemClass.coe_one","isProp":true,"docString":" If `A` is a set-like type, `M₁` has an identity element `e` for some operation, and `1` is in class `OneMemClass`, then `coe (1 : M₁) = e`.","distance":1.964181563321393486631905034300871193408966064453125}],["The theorem `GaloisConnection.u_top` states that for any types `α` and `β` which have a partial order and a predefined maximum element (top), if two functions `l : α → β` and `u : β → α` form a Galois connection, then the maximum element of type `β` when mapped through the function `u` gives the maximum element (top) of type `α`. In other words, for a Galois connection, the function `u` sends the top element of `β` to the top element of `α`.",{"type":"∀ {α : Type u} {β : Type v} [inst : PartialOrder α] [inst_1 : Preorder β] [inst_2 : OrderTop α] [inst_3 : OrderTop β]\n  {l : α → β} {u : β → α}, GaloisConnection l u → u ⊤ = ⊤","name":"GaloisConnection.u_top","isProp":true,"docString":"The theorem `GaloisConnection.u_top` states that for any types `α` and `β` which have a partial order and a predefined maximum element (top), if two functions `l : α → β` and `u : β → α` form a Galois connection, then the maximum element of type `β` when mapped through the function `u` gives the maximum element (top) of type `α`. In other words, for a Galois connection, the function `u` sends the top element of `β` to the top element of `α`.","distance":1.9658566844645812832226283717318437993526458740234375}],["A choice-free shortcut instance.",{"type":"∀ (α : Type u) [inst : OrderedAddCommGroup α],\n  ContravariantClass α α (Function.swap fun x x_1 => x + x_1) fun x x_1 => x ≤ x_1","name":"OrderedAddCommGroup.to_contravariantClass_right_le","isProp":true,"docString":"A choice-free shortcut instance.","distance":1.944776854091042395111799123696982860565185546875}],[" A type `α` is empty if and only if there exists no function from `α` to `False`.",{"type":"∀ {α : Sort u_1}, IsEmpty α ↔ α → False","name":"isEmpty_iff","isProp":true,"docString":" A type `α` is empty if and only if there exists no function from `α` to `False`.","distance":1.96994617137290450870068525546230375766754150390625}],["The theorem `ExtremallyDisconnected.open_closure` states that for any type `X` equipped with a topological space structure and the property of being extremally disconnected, any set `U` of `X` that is open has the property that its closure is also open. Here, the closure of a set is defined as the smallest closed set containing the set, and the openness of a set is subject to the definition of open sets in the ambient topological space. In other words, in an extremally disconnected topological space, the closure of any open set remains open.",{"type":"∀ {X : Type u} [inst : TopologicalSpace X] [self : ExtremallyDisconnected X] (U : Set X), IsOpen U → IsOpen (closure U)","name":"ExtremallyDisconnected.open_closure","isProp":true,"docString":"The theorem `ExtremallyDisconnected.open_closure` states that for any type `X` equipped with a topological space structure and the property of being extremally disconnected, any set `U` of `X` that is open has the property that its closure is also open. Here, the closure of a set is defined as the smallest closed set containing the set, and the openness of a set is subject to the definition of open sets in the ambient topological space. In other words, in an extremally disconnected topological space, the closure of any open set remains open.","distance":1.9677087111925264384382217031088657677173614501953125}],["Construct a `Zero C` for a category with a zero object.\nThis can not be a global instance as it will trigger for every `Zero C` typeclass search.\n",{"type":"(C : Type u) → [inst : CategoryTheory.Category.{v, u} C] → [inst : CategoryTheory.Limits.HasZeroObject C] → Zero C","name":"CategoryTheory.Limits.HasZeroObject.zero'","isProp":false,"docString":"Construct a `Zero C` for a category with a zero object.\nThis can not be a global instance as it will trigger for every `Zero C` typeclass search.\n","distance":1.94928037354021999050246449769474565982818603515625}],["A shortcut instance to prevent timing out. Hopefully to be removed in the future. ",{"type":"(R : Type u) →\n  (S : Type v) →\n    [inst : CommRing R] →\n      [inst_1 : CommRing S] →\n        [inst_2 : Algebra R S] → Module (TensorProduct R S S) ↥(Ideal.cotangentIdeal (KaehlerDifferential.ideal R S))","name":"instSS","isProp":false,"docString":"A shortcut instance to prevent timing out. Hopefully to be removed in the future. ","distance":1.9510963517847301762486722509493120014667510986328125}],["The `title` property, if any, to set on the displayed `<a>` link. ",{"type":"ProofWidgets.MakeEditLinkProps → Option String","name":"ProofWidgets.MakeEditLinkProps.title?","isProp":false,"docString":"The `title` property, if any, to set on the displayed `<a>` link. ","distance":1.952623892771907065935010905377566814422607421875}],["The constant presheaf on `X` with value `Z`. ",{"type":"{C : Type u_1} → [inst : CategoryTheory.Category.{u_2, u_1} C] → TopCat → C → AlgebraicGeometry.PresheafedSpace C","name":"AlgebraicGeometry.PresheafedSpace.const","isProp":false,"docString":"The constant presheaf on `X` with value `Z`. ","distance":1.9539426258578249662178905055043287575244903564453125}],["The name of the preprocessor, used in trace output. ",{"type":"Linarith.Preprocessor → String","name":"Linarith.Preprocessor.name","isProp":false,"docString":"The name of the preprocessor, used in trace output. ","distance":1.9557808402243967993427986584720201790332794189453125}],["The stalk at `x` of a `PresheafedSpace`.\n",{"type":"{C : Type u} →\n  [inst : CategoryTheory.Category.{v, u} C] →\n    [inst_1 : CategoryTheory.Limits.HasColimits C] → (X : AlgebraicGeometry.PresheafedSpace C) → ↑↑X → C","name":"AlgebraicGeometry.PresheafedSpace.stalk","isProp":false,"docString":"The stalk at `x` of a `PresheafedSpace`.\n","distance":1.9567166521586771832375006852089427411556243896484375}],["A choice-free shortcut instance. ",{"type":"∀ (α : Type u) [inst : OrderedCommGroup α], ContravariantClass α α (fun x x_1 => x * x_1) fun x x_1 => x ≤ x_1","name":"OrderedCommGroup.to_contravariantClass_left_le","isProp":true,"docString":"A choice-free shortcut instance. ","distance":1.956771808557128178307493726606480777263641357421875}],["Returns the projection information of a structure. ",{"type":"List Simps.ProjectionData → String → Lean.Name → Lean.MessageData","name":"Simps.projectionsInfo","isProp":false,"docString":"Returns the projection information of a structure. ","distance":1.9568616709980393153500699554570019245147705078125}],["If `task : Task α` then `task.get : α` blocks the current thread until the\nvalue is available, and then returns the result of the task. ",{"type":"{α : Type u} → Task α → α","name":"Task.get","isProp":false,"docString":"If `task : Task α` then `task.get : α` blocks the current thread until the\nvalue is available, and then returns the result of the task. ","distance":1.95704882527109536027865033247508108615875244140625}],["Cast a `SNum` to the corresponding integer. ",{"type":"SNum → ℤ","name":"Int.ofSnum","isProp":false,"docString":"Cast a `SNum` to the corresponding integer. ","distance":1.9588129738887307684791494466480799019336700439453125}],["Provide a coercion to `Type u` for a concrete category. This is not marked as an instance\nas it could potentially apply to every type, and so is too expensive in typeclass search.\n\nYou can use it on particular examples as:\n```\ninstance : HasCoeToSort X := ConcreteCategory.hasCoeToSort X\n```\n",{"type":"(C : Type u) →\n  [inst : CategoryTheory.Category.{v, u} C] → [inst : CategoryTheory.ConcreteCategory C] → CoeSort C (Type w)","name":"CategoryTheory.ConcreteCategory.hasCoeToSort","isProp":false,"docString":"Provide a coercion to `Type u` for a concrete category. This is not marked as an instance\nas it could potentially apply to every type, and so is too expensive in typeclass search.\n\nYou can use it on particular examples as:\n```\ninstance : HasCoeToSort X := ConcreteCategory.hasCoeToSort X\n```\n","distance":1.959593874715890304827325962833128869533538818359375}],["The name of the global preprocessor, used in trace output. ",{"type":"Linarith.GlobalPreprocessor → String","name":"Linarith.GlobalPreprocessor.name","isProp":false,"docString":"The name of the global preprocessor, used in trace output. ","distance":1.9605016498501350863392644896521233022212982177734375}],["The number of upcrossings of a realization of a stochastic process (`upcrossings` takes value\nin `ℝ≥0∞` and so is allowed to be `∞`). ",{"type":"{Ω : Type u_1} →\n  {ι : Type u_2} → [inst : Preorder ι] → [inst : OrderBot ι] → [inst : InfSet ι] → ℝ → ℝ → (ι → Ω → ℝ) → Ω → ENNReal","name":"MeasureTheory.upcrossings","isProp":false,"docString":"The number of upcrossings of a realization of a stochastic process (`upcrossings` takes value\nin `ℝ≥0∞` and so is allowed to be `∞`). ","distance":1.961158167827523168824654931086115539073944091796875}],["Delaborator that prints the current application with universe parameters on the head symbol,\nunless `pp.universes` is explicitly set to `false`.\n",{"type":"Lean.PrettyPrinter.Delaborator.Delab","name":"Mathlib.PPWithUniv.delabWithUniv","isProp":false,"docString":"Delaborator that prints the current application with universe parameters on the head symbol,\nunless `pp.universes` is explicitly set to `false`.\n","distance":1.9616484268840339577621989519684575498104095458984375}],["The sum of a function over `PointsWithCircumcenterIndex`. ",{"type":"∀ {α : Type u_3} [inst : AddCommMonoid α] {n : ℕ} (f : Affine.Simplex.PointsWithCircumcenterIndex n → α),\n  (Finset.sum Finset.univ fun i => f i) =\n    (Finset.sum Finset.univ fun i => f (Affine.Simplex.PointsWithCircumcenterIndex.pointIndex i)) +\n      f Affine.Simplex.PointsWithCircumcenterIndex.circumcenterIndex","name":"Affine.Simplex.sum_pointsWithCircumcenter","isProp":true,"docString":"The sum of a function over `PointsWithCircumcenterIndex`. ","distance":1.962848501028144454494395176880061626434326171875}],["The cocone at `A` for the stalk functor of `skyscraperPresheaf p₀ A` when `y ∈ closure {p₀}`\n",{"type":"{X : TopCat} →\n  (p₀ : ↑X) →\n    [inst : (U : TopologicalSpace.Opens ↑X) → Decidable (p₀ ∈ U)] →\n      {C : Type v} →\n        [inst_1 : CategoryTheory.Category.{u, v} C] →\n          (A : C) →\n            [inst_2 : CategoryTheory.Limits.HasTerminal C] →\n              {y : ↑X} →\n                p₀ ⤳ y →\n                  CategoryTheory.Limits.Cocone\n                    (CategoryTheory.Functor.comp (TopologicalSpace.OpenNhds.inclusion y).op (skyscraperPresheaf p₀ A))","name":"skyscraperPresheafCoconeOfSpecializes","isProp":false,"docString":"The cocone at `A` for the stalk functor of `skyscraperPresheaf p₀ A` when `y ∈ closure {p₀}`\n","distance":1.962980639868664667346820351667702198028564453125}],["If `y ∈ closure {p₀}`, then the stalk of `skyscraperPresheaf p₀ A` at `y` is `A`.\n",{"type":"{X : TopCat} →\n  (p₀ : ↑X) →\n    [inst : (U : TopologicalSpace.Opens ↑X) → Decidable (p₀ ∈ U)] →\n      {C : Type v} →\n        [inst_1 : CategoryTheory.Category.{u, v} C] →\n          (A : C) →\n            [inst_2 : CategoryTheory.Limits.HasTerminal C] →\n              [inst_3 : CategoryTheory.Limits.HasColimits C] →\n                {y : ↑X} → p₀ ⤳ y → (TopCat.Presheaf.stalk (skyscraperPresheaf p₀ A) y ≅ A)","name":"skyscraperPresheafStalkOfSpecializes","isProp":false,"docString":"If `y ∈ closure {p₀}`, then the stalk of `skyscraperPresheaf p₀ A` at `y` is `A`.\n","distance":1.96344606870672411247369382181204855442047119140625}],["Creates a `TypeName` instance.\n\nFor safety, it is required that the constant `typeName` is definitionally equal\nto `α`.\n",{"type":"(α : Type u) → Lean.Name → TypeName α","name":"TypeName.mk","isProp":false,"docString":"Creates a `TypeName` instance.\n\nFor safety, it is required that the constant `typeName` is definitionally equal\nto `α`.\n","distance":1.963697516707018753123747956124134361743927001953125}]]