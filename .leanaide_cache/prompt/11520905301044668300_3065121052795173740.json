[["Any graph on `n` vertices has at most `n.choose 2` edges. ",{"type":"∀ {V : Type u_1} {G : SimpleGraph V} [inst : Fintype ↑G.edgeSet] [inst_1 : Fintype V],\n  G.edgeFinset.card ≤ (Fintype.card V).choose 2","name":"SimpleGraph.card_edgeFinset_le_card_choose_two","isProp":true,"docString":"Any graph on `n` vertices has at most `n.choose 2` edges. ","distance":0.67821978457174003640517412350163795053958892822265625}],[" The number of edges in a graph with n vertices is at most n choose 2.",{"type":"∀ {V : Type u_1} {G : SimpleGraph V} [inst : Fintype ↑G.edgeSet] [inst_1 : Fintype V],\n  G.edgeFinset.card ≤ (Fintype.card V).choose 2","name":"SimpleGraph.card_edgeFinset_le_card_choose_two","isProp":true,"docString":" The number of edges in a graph with n vertices is at most n choose 2.","distance":0.68852340334066630678222509232000447809696197509765625}],["This theorem states that for any given graph 'G' with vertex set 'V', the number of edges in 'G' is at most the binomial coefficient \"n choose 2\", where 'n' is the number of vertices in 'V'. This is a consequence of the fact that any pair of distinct vertices can contribute at most one edge, and there are \"n choose 2\" such pairs in a graph with 'n' vertices.",{"type":"∀ {V : Type u_1} {G : SimpleGraph V} [inst : Fintype ↑G.edgeSet] [inst_1 : Fintype V],\n  G.edgeFinset.card ≤ (Fintype.card V).choose 2","name":"SimpleGraph.card_edgeFinset_le_card_choose_two","isProp":true,"docString":"This theorem states that for any given graph 'G' with vertex set 'V', the number of edges in 'G' is at most the binomial coefficient \"n choose 2\", where 'n' is the number of vertices in 'V'. This is a consequence of the fact that any pair of distinct vertices can contribute at most one edge, and there are \"n choose 2\" such pairs in a graph with 'n' vertices.","distance":0.837995247619591765442237374372780323028564453125}],["The complete graph on `n` vertices has `n.choose 2` edges. ",{"type":"∀ {V : Type u_1} [inst : Fintype V] [inst_1 : DecidableEq V], ⊤.edgeFinset.card = (Fintype.card V).choose 2","name":"SimpleGraph.card_edgeFinset_top_eq_card_choose_two","isProp":true,"docString":"The complete graph on `n` vertices has `n.choose 2` edges. ","distance":0.7049055271446296178083912309375591576099395751953125}],[" The complete graph on a finite set of `n` vertices has `n choose 2` edges.",{"type":"∀ {V : Type u_1} [inst : Fintype V] [inst_1 : DecidableEq V], ⊤.edgeFinset.card = (Fintype.card V).choose 2","name":"SimpleGraph.card_edgeFinset_top_eq_card_choose_two","isProp":true,"docString":" The complete graph on a finite set of `n` vertices has `n choose 2` edges.","distance":0.750471784631538962884178545209579169750213623046875}],["This theorem states that the complete graph on `n` vertices has `n.choose 2` edges. Here, `V` represents the set of vertices and is assumed to be a finite type (`Fintype V`). `DecidableEq V` means that equality between two vertices can be definitively determined. The notation `⊤.edgeFinset.card` represents the number of edges in the complete graph on `V`, and `(Fintype.card V).choose 2` is the binomial coefficient \"n choose 2\", which corresponds to the number of ways to choose 2 elements from a set of `n` elements. Thus, the theorem asserts that the number of edges in a complete graph with `n` vertices is equal to the number of ways to choose 2 vertices from the `n` vertices, which is what is expected in a complete graph since every pair of distinct vertices is connected by an edge.",{"type":"∀ {V : Type u_1} [inst : Fintype V] [inst_1 : DecidableEq V], ⊤.edgeFinset.card = (Fintype.card V).choose 2","name":"SimpleGraph.card_edgeFinset_top_eq_card_choose_two","isProp":true,"docString":"This theorem states that the complete graph on `n` vertices has `n.choose 2` edges. Here, `V` represents the set of vertices and is assumed to be a finite type (`Fintype V`). `DecidableEq V` means that equality between two vertices can be definitively determined. The notation `⊤.edgeFinset.card` represents the number of edges in the complete graph on `V`, and `(Fintype.card V).choose 2` is the binomial coefficient \"n choose 2\", which corresponds to the number of ways to choose 2 elements from a set of `n` elements. Thus, the theorem asserts that the number of edges in a complete graph with `n` vertices is equal to the number of ways to choose 2 vertices from the `n` vertices, which is what is expected in a complete graph since every pair of distinct vertices is connected by an edge.","distance":0.91553448642187884587428925442509353160858154296875}],["The path graph on `n` vertices. ",{"type":"(n : ℕ) → SimpleGraph (Fin n)","name":"SimpleGraph.pathGraph","isProp":false,"docString":"The path graph on `n` vertices. ","distance":0.9163857806697166541454180332948453724384307861328125}],["The cardinality of the antidiagonal of `n` is `n + 1`. ",{"type":"∀ (n : ℕ), (Finset.antidiagonal n).card = n + 1","name":"Finset.Nat.card_antidiagonal","isProp":true,"docString":"The cardinality of the antidiagonal of `n` is `n + 1`. ","distance":0.93720601654377178046928520416258834302425384521484375}],["A graph has edge-disjoint triangles if each edge belongs to at most one triangle. ",{"type":"{α : Type u_1} → SimpleGraph α → Prop","name":"SimpleGraph.EdgeDisjointTriangles","isProp":false,"docString":"A graph has edge-disjoint triangles if each edge belongs to at most one triangle. ","distance":0.94334134774311662052781457532546482980251312255859375}],["The cardinality of the antidiagonal of `n` is `n+1`. ",{"type":"∀ (n : ℕ), (Multiset.Nat.antidiagonal n).card = n + 1","name":"Multiset.Nat.card_antidiagonal","isProp":true,"docString":"The cardinality of the antidiagonal of `n` is `n+1`. ","distance":0.9434215975231412532053809627541340887546539306640625}],["Adding an edge increases the clique number by at most one. ",{"type":"∀ {α : Type u_1} {G : SimpleGraph α} {n : ℕ},\n  G.CliqueFree n → ∀ (v w : α), (G ⊔ SimpleGraph.edge v w).CliqueFree (n + 1)","name":"SimpleGraph.CliqueFree.sup_edge","isProp":true,"docString":"Adding an edge increases the clique number by at most one. ","distance":0.952468861112989895190139577607624232769012451171875}],["The length of the antidiagonal of `n` is `n + 1`. ",{"type":"∀ (n : ℕ), (List.Nat.antidiagonal n).length = n + 1","name":"List.Nat.length_antidiagonal","isProp":true,"docString":"The length of the antidiagonal of `n` is `n + 1`. ","distance":0.96422871127954568049034378418582491576671600341796875}],["An edge of a graph is a *bridge* if, after removing it, its incident vertices\nare no longer reachable from one another. ",{"type":"{V : Type u} → SimpleGraph V → Sym2 V → Prop","name":"SimpleGraph.IsBridge","isProp":false,"docString":"An edge of a graph is a *bridge* if, after removing it, its incident vertices\nare no longer reachable from one another. ","distance":0.9685152351932877490270357156987302005290985107421875}],["There is an equivalence between the set of edges incident to a given\nvertex and the set of vertices adjacent to the vertex. ",{"type":"{V : Type u} → (G : SimpleGraph V) → [inst : DecidableEq V] → (v : V) → ↑(G.incidenceSet v) ≃ ↑(G.neighborSet v)","name":"SimpleGraph.incidenceSetEquivNeighborSet","isProp":false,"docString":"There is an equivalence between the set of edges incident to a given\nvertex and the set of vertices adjacent to the vertex. ","distance":0.98055315616041849313688771871966309845447540283203125}],["The edge set of an Eulerian graph is finite. ",{"type":"{V : Type u_1} →\n  {G : SimpleGraph V} → [inst : DecidableEq V] → {u v : V} → {p : G.Walk u v} → p.IsEulerian → Fintype ↑G.edgeSet","name":"SimpleGraph.Walk.IsEulerian.fintypeEdgeSet","isProp":false,"docString":"The edge set of an Eulerian graph is finite. ","distance":0.98294864583967822557752924694796092808246612548828125}],["Equivalence between Dyck words of semilength `n` and rooted binary trees with\n`n` internal nodes. ",{"type":"(n : ℕ) → { p // p.semilength = n } ≃ { x // x ∈ Tree.treesOfNumNodesEq n }","name":"DyckWord.equivTreesOfNumNodesEq","isProp":false,"docString":"Equivalence between Dyck words of semilength `n` and rooted binary trees with\n`n` internal nodes. ","distance":0.9832807127249945100544437082135118544101715087890625}],["The spine of an `n`-simplex in `X` is the path of edges of length `n` formed by\ntraversing through its vertices in order.",{"type":"(X : SSet) → (n : ℕ) → X.obj (Opposite.op (SimplexCategory.mk n)) → X.Path n","name":"SSet.spine","isProp":false,"docString":"The spine of an `n`-simplex in `X` is the path of edges of length `n` formed by\ntraversing through its vertices in order.","distance":1.001752134659077864142773250932805240154266357421875}],["O(n). True if the trees have the same elements, ignoring structural differences.\n\nEquiv {1, 2, 4} {2, 1, 1, 4} = true\nEquiv {1, 2, 4} {1, 2, 3} = false ",{"type":"{α : Type u_1} → Ordnode α → Ordnode α → Prop","name":"Ordnode.Equiv","isProp":false,"docString":"O(n). True if the trees have the same elements, ignoring structural differences.\n\nEquiv {1, 2, 4} {2, 1, 1, 4} = true\nEquiv {1, 2, 4} {1, 2, 3} = false ","distance":1.0039270296923543668299316777847707271575927734375}],["Explicit lower bound on the **Ruzsa-Szemerédi problem**.\n\nThere exists a graph with `n` vertices and\n`(n / 3 - 2) * (n - 3) / 6 * exp (-4 * sqrt (log ((n - 3) / 6)))` edges such that each edge belongs\nto exactly one triangle. ",{"type":"∀ (n : ℕ), (↑n / 3 - 2) * ↑((n - 3) / 6) * Real.exp (-4 * √(Real.log ↑((n - 3) / 6))) ≤ ↑(ruzsaSzemerediNumberNat n)","name":"ruzsaSzemerediNumberNat_lower_bound","isProp":true,"docString":"Explicit lower bound on the **Ruzsa-Szemerédi problem**.\n\nThere exists a graph with `n` vertices and\n`(n / 3 - 2) * (n - 3) / 6 * exp (-4 * sqrt (log ((n - 3) / 6)))` edges such that each edge belongs\nto exactly one triangle. ","distance":1.004723261325600969229299153084866702556610107421875}],["The one-edge subgraph. ",{"type":"{V : Type u} → (G : SimpleGraph V) → {v w : V} → G.Adj v w → G.Subgraph","name":"SimpleGraph.subgraphOfAdj","isProp":false,"docString":"The one-edge subgraph. ","distance":1.0087223862608123425843587028793990612030029296875}],["Given a vertex with one edge in a graph of cycles this gives the other edge incident\nto the same vertex.\n",{"type":"∀ {V : Type u_1} {G : SimpleGraph V} {v w : V}, G.IsCycles → G.Adj v w → ∃ w', w ≠ w' ∧ G.Adj v w'","name":"SimpleGraph.IsCycles.other_adj_of_adj","isProp":true,"docString":"Given a vertex with one edge in a graph of cycles this gives the other edge incident\nto the same vertex.\n","distance":1.011798948636766226627514697611331939697265625}],["Given a vertex, returns the unique edge of the matching it is incident to. ",{"type":"{V : Type u_1} → {G : SimpleGraph V} → {M : G.Subgraph} → M.IsMatching → ↑M.verts → ↑M.edgeSet","name":"SimpleGraph.Subgraph.IsMatching.toEdge","isProp":false,"docString":"Given a vertex, returns the unique edge of the matching it is incident to. ","distance":1.0182880958860074382954508109833113849163055419921875}],["The maximum degree of a nonempty graph is less than the number of vertices. Note that the assumption\nthat `V` is nonempty is necessary, as otherwise this would assert the existence of a\nnatural number less than zero. ",{"type":"∀ {V : Type u_1} (G : SimpleGraph V) [inst : Fintype V] [inst_1 : DecidableRel G.Adj] [inst_2 : Nonempty V],\n  G.maxDegree < Fintype.card V","name":"SimpleGraph.maxDegree_lt_card_verts","isProp":true,"docString":"The maximum degree of a nonempty graph is less than the number of vertices. Note that the assumption\nthat `V` is nonempty is necessary, as otherwise this would assert the existence of a\nnatural number less than zero. ","distance":1.0192676859750771090062926305108703672885894775390625}],["Asymptotic lower bound on the **Ruzsa-Szemerédi problem**.\n\nThere exists a graph with `n` vertices and `Ω((n ^ 2 * exp (-4 * sqrt (log n))))` edges such that\neach edge belongs to exactly one triangle. ",{"type":"(fun n => ↑n ^ 2 * Real.exp (-4 * √(Real.log ↑n))) =O[Filter.atTop] fun n => ↑(ruzsaSzemerediNumberNat n)","name":"ruzsaSzemerediNumberNat_asymptotic_lower_bound","isProp":true,"docString":"Asymptotic lower bound on the **Ruzsa-Szemerédi problem**.\n\nThere exists a graph with `n` vertices and `Ω((n ^ 2 * exp (-4 * sqrt (log n))))` edges such that\neach edge belongs to exactly one triangle. ","distance":1.0271796193612294789687666707322932779788970947265625}]]