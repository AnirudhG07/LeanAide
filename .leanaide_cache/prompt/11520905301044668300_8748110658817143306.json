[["If `task : Task Œ±` then `task.get : Œ±` blocks the current thread until the\nvalue is available, and then returns the result of the task. ",{"type":"{Œ± : Type u} ‚Üí Task Œ± ‚Üí Œ±","name":"Task.get","isProp":false,"docString":"If `task : Task Œ±` then `task.get : Œ±` blocks the current thread until the\nvalue is available, and then returns the result of the task. ","distance":1.9653417305695828343203857002663426101207733154296875}],[" The center of the group of units of a `GroupWithZero` type `M` equals the preimage of the center of `M` under the underlying value function.",{"type":"‚àÄ {M : Type u_1} [inst : GroupWithZero M], Set.center MÀ£ = Units.val ‚Åª¬π' Set.center M","name":"Set.center_units_eq","isProp":true,"docString":" The center of the group of units of a `GroupWithZero` type `M` equals the preimage of the center of `M` under the underlying value function.","distance":1.9837896443531854995256935580982826650142669677734375}],["This theorem, `neg_zero`, states that for any type `G` that is a member of the `NegZeroClass`, the negation of zero equals zero. In mathematical terms, it means that if `G` has a negation operation and a zero element, then the negation of the zero element is equal to the zero element itself.",{"type":"‚àÄ {G : Type u_1} [inst : NegZeroClass G], -0 = 0","name":"neg_zero","isProp":true,"docString":"This theorem, `neg_zero`, states that for any type `G` that is a member of the `NegZeroClass`, the negation of zero equals zero. In mathematical terms, it means that if `G` has a negation operation and a zero element, then the negation of the zero element is equal to the zero element itself.","distance":1.9851837768617925927827627674560062587261199951171875}],["Construct a `Zero C` for a category with a zero object.\nThis can not be a global instance as it will trigger for every `Zero C` typeclass search.\n",{"type":"(C : Type u) ‚Üí [inst : CategoryTheory.Category.{v, u} C] ‚Üí [inst : CategoryTheory.Limits.HasZeroObject C] ‚Üí Zero C","name":"CategoryTheory.Limits.HasZeroObject.zero'","isProp":false,"docString":"Construct a `Zero C` for a category with a zero object.\nThis can not be a global instance as it will trigger for every `Zero C` typeclass search.\n","distance":1.9677842221673638167800390874617733061313629150390625}],[" In a Henstock prepartition, the number of boxes with the same tag value under the tagging function is bounded by 2 raised to the power of the number of indices.",{"type":"‚àÄ {Œπ : Type u_1} {I : BoxIntegral.Box Œπ} {œÄ : BoxIntegral.TaggedPrepartition I} [inst : Fintype Œπ],\n  œÄ.IsHenstock ‚Üí ‚àÄ (x : Œπ ‚Üí ‚Ñù), (Finset.filter (fun J => œÄ.tag J = x) œÄ.boxes).card ‚â§ 2 ^ Fintype.card Œπ","name":"BoxIntegral.TaggedPrepartition.IsHenstock.card_filter_tag_eq_le","isProp":true,"docString":" In a Henstock prepartition, the number of boxes with the same tag value under the tagging function is bounded by 2 raised to the power of the number of indices.","distance":1.9863771937696463876221741884364746510982513427734375}],["The theorem `padicValNat.zero` states that for any natural number `p`, the `p`-adic valuation of `0` is `0`. This is consistent with the definition of `p`-adic valuation, which specifies that the `p`-adic valuation of `0` defaults to `0` regardless of the value of `p`.",{"type":"‚àÄ {p : ‚Ñï}, padicValNat p 0 = 0","name":"padicValNat.zero","isProp":true,"docString":"The theorem `padicValNat.zero` states that for any natural number `p`, the `p`-adic valuation of `0` is `0`. This is consistent with the definition of `p`-adic valuation, which specifies that the `p`-adic valuation of `0` defaults to `0` regardless of the value of `p`.","distance":1.99026113573600493822368662222288548946380615234375}],["Computes `‚åämax 0 (log‚ÇÇ n)‚åã`.\n\n`log2 0 = log2 1 = 0`, `log2 2 = 1`, ..., `log2 (2^i) = i`, etc.\n",{"type":"‚Ñï ‚Üí ‚Ñï","name":"Nat.log2","isProp":false,"docString":"Computes `‚åämax 0 (log‚ÇÇ n)‚åã`.\n\n`log2 0 = log2 1 = 0`, `log2 2 = 1`, ..., `log2 (2^i) = i`, etc.\n","distance":1.9681309864116698360447799132089130580425262451171875}],["Construct a function from a default value `H0`, and a function to use if there exists a value\nsatisfying the predicate. ",{"type":"{Œ± : Prop} ‚Üí {p : Œ± ‚Üí Prop} ‚Üí {C : Sort u_1} ‚Üí C ‚Üí ((a : Œ±) ‚Üí p a ‚Üí C) ‚Üí C","name":"Classical.existsCases","isProp":false,"docString":"Construct a function from a default value `H0`, and a function to use if there exists a value\nsatisfying the predicate. ","distance":1.969898964673503005684551681042648851871490478515625}],["Given a point `x` in a product space `Œ† (n : ‚Ñï), E n`, and `s` a subset of this space, then\n`longestPrefix x s` if the largest `n` for which there is an element of `s` having the same\nprefix of length `n` as `x`. If there is no such `n`, use `0` by convention. ",{"type":"{E : ‚Ñï ‚Üí Type u_2} ‚Üí ((n : ‚Ñï) ‚Üí E n) ‚Üí Set ((n : ‚Ñï) ‚Üí E n) ‚Üí ‚Ñï","name":"PiNat.longestPrefix","isProp":false,"docString":"Given a point `x` in a product space `Œ† (n : ‚Ñï), E n`, and `s` a subset of this space, then\n`longestPrefix x s` if the largest `n` for which there is an element of `s` having the same\nprefix of length `n` as `x`. If there is no such `n`, use `0` by convention. ","distance":1.970092665280457122634061306598596274852752685546875}],["The default priority `default = 1000`, which is used when no priority is set. ",{"type":"Lean.ParserDescr","name":"prioDefault","isProp":false,"docString":"The default priority `default = 1000`, which is used when no priority is set. ","distance":1.9724761122999223683649461236200295388698577880859375}],["An estimator for the priority of the key.\n(We will assume we have `[‚àÄ a : Œ±, Estimator (prio a) (Œµ a)]`.) ",{"type":"{Œ± : Sort u_1} ‚Üí {œâ : Type u_2} ‚Üí {prio : Œ± ‚Üí Thunk œâ} ‚Üí {Œµ : Œ± ‚Üí Type} ‚Üí (self : BestFirstNode prio Œµ) ‚Üí Œµ self.key","name":"BestFirstNode.estimator","isProp":false,"docString":"An estimator for the priority of the key.\n(We will assume we have `[‚àÄ a : Œ±, Estimator (prio a) (Œµ a)]`.) ","distance":1.973543476317110911821828267420642077922821044921875}],["**Maximum principle** for convex functions on a segment. If a function `f` is convex on the\nsegment `[x, y]`, then the eventual maximum of `f` on `[x, y]` is at `x` or `y`. ",{"type":"‚àÄ {ùïú : Type u_1} {E : Type u_2} {Œ≤ : Type u_4} [inst : LinearOrderedField ùïú] [inst_1 : AddCommGroup E]\n  [inst_2 : LinearOrderedAddCommGroup Œ≤] [inst_3 : Module ùïú E] [inst_4 : Module ùïú Œ≤] [inst_5 : OrderedSMul ùïú Œ≤]\n  {f : E ‚Üí Œ≤} {x y z : E}, ConvexOn ùïú (segment ùïú x y) f ‚Üí z ‚àà segment ùïú x y ‚Üí f z ‚â§ max (f x) (f y)","name":"ConvexOn.le_max_of_mem_segment","isProp":true,"docString":"**Maximum principle** for convex functions on a segment. If a function `f` is convex on the\nsegment `[x, y]`, then the eventual maximum of `f` on `[x, y]` is at `x` or `y`. ","distance":1.974135532973762874320300397812388837337493896484375}],["Gadget for optional parameter support.\n\nA binder like `(x : Œ± := default)` in a declaration is syntax sugar for\n`x : optParam Œ± default`, and triggers the elaborator to attempt to use\n`default` to supply the argument if it is not supplied.\n",{"type":"(Œ± : Sort u) ‚Üí Œ± ‚Üí Sort u","name":"optParam","isProp":false,"docString":"Gadget for optional parameter support.\n\nA binder like `(x : Œ± := default)` in a declaration is syntax sugar for\n`x : optParam Œ± default`, and triggers the elaborator to attempt to use\n`default` to supply the argument if it is not supplied.\n","distance":1.9754896029830659731629793895990587770938873291015625}],["Shortcut instance to help typeclass inference out. ",{"type":"{V : Type u_1} ‚Üí\n  {P : Type u_2} ‚Üí\n    [inst : NormedAddCommGroup V] ‚Üí [inst_1 : MetricSpace P] ‚Üí [inst_2 : NormedAddTorsor V P] ‚Üí AddTorsor V P","name":"NormedAddTorsor.toAddTorsor'","isProp":false,"docString":"Shortcut instance to help typeclass inference out. ","distance":1.9766215083064293533965383176109753549098968505859375}],["Name to use for the declaration for a type that is `Equiv` to the given type. ",{"type":"Mathlib.ProxyType.ProxyEquivConfig ‚Üí Lean.Name","name":"Mathlib.ProxyType.ProxyEquivConfig.proxyName","isProp":false,"docString":"Name to use for the declaration for a type that is `Equiv` to the given type. ","distance":1.976714725956794982408837313414551317691802978515625}],["`className` is the name of the class we are looking for. ",{"type":"Simps.AutomaticProjectionData ‚Üí Lean.Name","name":"Simps.AutomaticProjectionData.className","isProp":false,"docString":"`className` is the name of the class we are looking for. ","distance":1.9772151760692693311938228362123481929302215576171875}],["`f : Œ± ‚Üí+* Œ≤` has a trivial codomain iff its range is `{0}`. ",{"type":"‚àÄ {Œ± : Type u_2} {Œ≤ : Type u_3} {x : NonAssocSemiring Œ±} {x_1 : NonAssocSemiring Œ≤} (f : Œ± ‚Üí+* Œ≤),\n  0 = 1 ‚Üî Set.range ‚áëf = {0}","name":"RingHom.codomain_trivial_iff_range_eq_singleton_zero","isProp":true,"docString":"`f : Œ± ‚Üí+* Œ≤` has a trivial codomain iff its range is `{0}`. ","distance":1.97737962088590091269679760443978011608123779296875}],["Count the heartbeats used in the enclosed command.\n\nThis is most useful for setting sufficient but reasonable limits via `set_option maxHeartbeats`\nfor long running declarations.\n\nIf you do so, please resist the temptation to set the limit as low as possible.\nAs the `simp` set and other features of the library evolve,\nother contributors will find that their (likely unrelated) changes\nhave pushed the declaration over the limit.\n`count_heartbearts in` will automatically suggest a `set_option maxHeartbeats` via \"Try this:\"\nusing the least number of the form `2^k * 200000` that suffices.\n\nNote that that internal heartbeat counter accessible via `IO.getNumHeartbeats`\nhas granularity 1000 times finer that the limits set by `set_option maxHeartbeats`.\nAs this is intended as a user command, we divide by 1000.\n",{"type":"Lean.ParserDescr","name":"Mathlib.CountHeartbeats.commandCount_heartbeatsIn__","isProp":false,"docString":"Count the heartbeats used in the enclosed command.\n\nThis is most useful for setting sufficient but reasonable limits via `set_option maxHeartbeats`\nfor long running declarations.\n\nIf you do so, please resist the temptation to set the limit as low as possible.\nAs the `simp` set and other features of the library evolve,\nother contributors will find that their (likely unrelated) changes\nhave pushed the declaration over the limit.\n`count_heartbearts in` will automatically suggest a `set_option maxHeartbeats` via \"Try this:\"\nusing the least number of the form `2^k * 200000` that suffices.\n\nNote that that internal heartbeat counter accessible via `IO.getNumHeartbeats`\nhas granularity 1000 times finer that the limits set by `set_option maxHeartbeats`.\nAs this is intended as a user command, we divide by 1000.\n","distance":1.97912180027798800807659063138999044895172119140625}],["**Minimum principle** for concave functions on a segment. If a function `f` is concave on the\nsegment `[x, y]`, then the eventual minimum of `f` on `[x, y]` is at `x` or `y`. ",{"type":"‚àÄ {ùïú : Type u_1} {E : Type u_2} {Œ≤ : Type u_4} [inst : LinearOrderedField ùïú] [inst_1 : AddCommGroup E]\n  [inst_2 : LinearOrderedAddCommGroup Œ≤] [inst_3 : Module ùïú E] [inst_4 : Module ùïú Œ≤] [inst_5 : OrderedSMul ùïú Œ≤]\n  {f : E ‚Üí Œ≤} {x y z : E}, ConcaveOn ùïú (segment ùïú x y) f ‚Üí z ‚àà segment ùïú x y ‚Üí min (f x) (f y) ‚â§ f z","name":"ConcaveOn.min_le_of_mem_segment","isProp":true,"docString":"**Minimum principle** for concave functions on a segment. If a function `f` is concave on the\nsegment `[x, y]`, then the eventual minimum of `f` on `[x, y]` is at `x` or `y`. ","distance":1.9792153218931647362666126355179585516452789306640625}],["`sigmaFiberEquiv f` for `f : Œ± ‚Üí Œ≤` is the natural equivalence between\nthe type of all fibres of `f` and the total space `Œ±`. ",{"type":"{Œ± : Type u_1} ‚Üí {Œ≤ : Type u_2} ‚Üí (f : Œ± ‚Üí Œ≤) ‚Üí (y : Œ≤) √ó { x // f x = y } ‚âÉ Œ±","name":"Equiv.sigmaFiberEquiv","isProp":false,"docString":"`sigmaFiberEquiv f` for `f : Œ± ‚Üí Œ≤` is the natural equivalence between\nthe type of all fibres of `f` and the total space `Œ±`. ","distance":1.979267374530262912912803585641086101531982421875}],["Retrieves the value of `a : Part Œ±` if it exists, and return the provided default value\notherwise. ",{"type":"{Œ± : Type u_1} ‚Üí (a : Part Œ±) ‚Üí [inst : Decidable a.Dom] ‚Üí Œ± ‚Üí Œ±","name":"Part.getOrElse","isProp":false,"docString":"Retrieves the value of `a : Part Œ±` if it exists, and return the provided default value\notherwise. ","distance":1.9795062116583961309146388884983025491237640380859375}],["`inferInstance` synthesizes a value of any target type by typeclass\ninference. This function has the same type signature as the identity\nfunction, but the square brackets on the `[i : Œ±]` argument means that it will\nattempt to construct this argument by typeclass inference. (This will fail if\n`Œ±` is not a `class`.) Example:\n```\n#check (inferInstance : Inhabited Nat) -- Inhabited Nat\n\ndef foo : Inhabited (Nat √ó Nat) :=\n  inferInstance\n\nexample : foo.default = (default, default) :=\n  rfl\n```\n",{"type":"{Œ± : Sort u} ‚Üí [i : Œ±] ‚Üí Œ±","name":"inferInstance","isProp":false,"docString":"`inferInstance` synthesizes a value of any target type by typeclass\ninference. This function has the same type signature as the identity\nfunction, but the square brackets on the `[i : Œ±]` argument means that it will\nattempt to construct this argument by typeclass inference. (This will fail if\n`Œ±` is not a `class`.) Example:\n```\n#check (inferInstance : Inhabited Nat) -- Inhabited Nat\n\ndef foo : Inhabited (Nat √ó Nat) :=\n  inferInstance\n\nexample : foo.default = (default, default) :=\n  rfl\n```\n","distance":1.9797485270751404851097277060034684836864471435546875}],["The name of the global preprocessor, used in trace output. ",{"type":"Linarith.GlobalPreprocessor ‚Üí String","name":"Linarith.GlobalPreprocessor.name","isProp":false,"docString":"The name of the global preprocessor, used in trace output. ","distance":1.9797791369753687806820607875124551355838775634765625}],["`spawn fn : Task Œ±` constructs and immediately launches a new task for\nevaluating the function `fn () : Œ±` asynchronously.\n\n`prio`, if provided, is the priority of the task.\n",{"type":"{Œ± : Type u} ‚Üí (Unit ‚Üí Œ±) ‚Üí optParam Task.Priority Task.Priority.default ‚Üí Task Œ±","name":"Task.spawn","isProp":false,"docString":"`spawn fn : Task Œ±` constructs and immediately launches a new task for\nevaluating the function `fn () : Œ±` asynchronously.\n\n`prio`, if provided, is the priority of the task.\n","distance":1.9799820753760897229511783734778873622417449951171875}]]