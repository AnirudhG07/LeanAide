[["A (positive) natural number `n` is a sum of two squares if and only if the exponent of\nevery prime `q` such that `q % 4 = 3` in the prime factorization of `n` is even.\n(The assumption `0 < n` is not present, since for `n = 0`, both sides are satisfied;\nthe right hand side holds, since `padicValNat q 0 = 0` by definition.) ",{"type":"∀ {n : ℕ}, (∃ x y, n = x ^ 2 + y ^ 2) ↔ ∀ {q : ℕ}, Nat.Prime q → q % 4 = 3 → Even (padicValNat q n)","name":"Nat.eq_sq_add_sq_iff","isProp":true,"docString":"A (positive) natural number `n` is a sum of two squares if and only if the exponent of\nevery prime `q` such that `q % 4 = 3` in the prime factorization of `n` is even.\n(The assumption `0 < n` is not present, since for `n = 0`, both sides are satisfied;\nthe right hand side holds, since `padicValNat q 0 = 0` by definition.) ","distance":0.9506724214310058318488927397993393242359161376953125}],[" The number of positive multiples of `n` less than or equal to `N` is equal to the integer part of `N` divided by `n`.",{"type":"∀ (N n : ℕ), (Finset.filter (fun k => k ≠ 0 ∧ n ∣ k) (Finset.range N.succ)).card = N / n","name":"Nat.card_multiples'","isProp":true,"docString":" The number of positive multiples of `n` less than or equal to `N` is equal to the integer part of `N` divided by `n`.","distance":0.93867796598977559785481616927427239716053009033203125}],["A positive natural number `n` can be expressed as the sum of two squares if and only if for every prime number `q` in its prime factorization, where `q` modulo 4 equals 3, the `q`-adic valuation of `n` (the highest power of `q` that divides `n`) is an even number. Note that the assumption `n > 0` is not required since for `n = 0`, both conditions are automatically satisfied; the right-hand side is true because by definition `padicValNat q 0 = 0`.",{"type":"∀ {n : ℕ}, (∃ x y, n = x ^ 2 + y ^ 2) ↔ ∀ {q : ℕ}, q.Prime → q % 4 = 3 → Even (padicValNat q n)","name":"Nat.eq_sq_add_sq_iff","isProp":true,"docString":"A positive natural number `n` can be expressed as the sum of two squares if and only if for every prime number `q` in its prime factorization, where `q` modulo 4 equals 3, the `q`-adic valuation of `n` (the highest power of `q` that divides `n`) is an even number. Note that the assumption `n > 0` is not required since for `n = 0`, both conditions are automatically satisfied; the right-hand side is true because by definition `padicValNat q 0 = 0`.","distance":0.91713098590895469897077418863773345947265625}],["The L function of the trivial Dirichlet character mod `N` is obtained from the Riemann\nzeta function by multiplying with `∏ p ∈ N.primeFactors, (1 - (p : ℂ) ^ (-s))`. ",{"type":"∀ {N : ℕ} [inst : NeZero N] {s : ℂ},\n  s ≠ 1 → DirichletCharacter.LFunctionTrivChar N s = (∏ p ∈ N.primeFactors, (1 - ↑p ^ (-s))) * riemannZeta s","name":"DirichletCharacter.LFunctionTrivChar_eq_mul_riemannZeta","isProp":true,"docString":"The L function of the trivial Dirichlet character mod `N` is obtained from the Riemann\nzeta function by multiplying with `∏ p ∈ N.primeFactors, (1 - (p : ℂ) ^ (-s))`. ","distance":0.9537264484557947952225731569342315196990966796875}],[" A natural number `n` can be expressed as the sum of two squares if and only if the highest power of every prime `q` in its prime factorization, where `q` is congruent to 3 modulo 4, in its prime factorization has even power.",{"type":"∀ {n : ℕ}, (∃ x y, n = x ^ 2 + y ^ 2) ↔ ∀ {q : ℕ}, q.Prime → q % 4 = 3 → Even (padicValNat q n)","name":"Nat.eq_sq_add_sq_iff","isProp":true,"docString":" A natural number `n` can be expressed as the sum of two squares if and only if the highest power of every prime `q` in its prime factorization, where `q` is congruent to 3 modulo 4, in its prime factorization has even power.","distance":0.95205677389206522232001361771835945546627044677734375}],["This theorem states that for any given non-negative integers `N` and `n`, the number of positive multiples of `n` that are less than or equal to `N` is precisely `⌊N/n⌋`. This is calculated by filtering out all the elements in the set of natural numbers from `0` to `N` (inclusive) that are divisible by `n` and not equal to `0`, and then counting the number of such elements. The theorem also suggests referring to a similar theorem, `Nat.card_multiples`, which might be a version shifted by one.",{"type":"∀ (N n : ℕ), (Finset.filter (fun k => k ≠ 0 ∧ n ∣ k) (Finset.range N.succ)).card = N / n","name":"Nat.card_multiples'","isProp":true,"docString":"This theorem states that for any given non-negative integers `N` and `n`, the number of positive multiples of `n` that are less than or equal to `N` is precisely `⌊N/n⌋`. This is calculated by filtering out all the elements in the set of natural numbers from `0` to `N` (inclusive) that are divisible by `n` and not equal to `0`, and then counting the number of such elements. The theorem also suggests referring to a similar theorem, `Nat.card_multiples`, which might be a version shifted by one.","distance":0.960569898255897225425314900348894298076629638671875}],["The `L`-function of the trivial character mod `N`. ",{"type":"(N : ℕ) → [inst : NeZero N] → ℂ → ℂ","name":"DirichletCharacter.LFunctionTrivChar","isProp":false,"docString":"The `L`-function of the trivial character mod `N`. ","distance":0.97378580978563855641283453223877586424350738525390625}],["`q` is defined as the minimum factor of `mersenne p`, bundled as an `ℕ+`. ",{"type":"ℕ → ℕ+","name":"LucasLehmer.q","isProp":false,"docString":"`q` is defined as the minimum factor of `mersenne p`, bundled as an `ℕ+`. ","distance":0.97526441815522602052368483782629482448101043701171875}],["**Hermite Theorem**. Let `N` be an integer. There are only finitely many number fields\n(in some fixed extension of `ℚ`) of discriminant bounded by `N`. ",{"type":"∀ (A : Type u_2) [inst : Field A] [inst_1 : CharZero A] (N : ℕ), {K | |NumberField.discr ↥↑K| ≤ ↑N}.Finite","name":"NumberField.finite_of_discr_bdd","isProp":true,"docString":"**Hermite Theorem**. Let `N` be an integer. There are only finitely many number fields\n(in some fixed extension of `ℚ`) of discriminant bounded by `N`. ","distance":0.98070151663894000737542455681250430643558502197265625}],["There are exactly `⌊N/n⌋` positive multiples of `n` that are `≤ N`.\nSee `Nat.card_multiples` for a \"shifted-by-one\" version. ",{"type":"∀ (N n : ℕ), (Finset.filter (fun k => k ≠ 0 ∧ n ∣ k) (Finset.range N.succ)).card = N / n","name":"Nat.card_multiples'","isProp":true,"docString":"There are exactly `⌊N/n⌋` positive multiples of `n` that are `≤ N`.\nSee `Nat.card_multiples` for a \"shifted-by-one\" version. ","distance":0.98116470745710382406201688354485668241977691650390625}],["The L function of the trivial Dirichlet character mod `N` has a simple pole with\nresidue `∏ p ∈ N.primeFactors, (1 - p⁻¹)` at `s = 1`. ",{"type":"∀ {N : ℕ} [inst : NeZero N],\n  Filter.Tendsto (fun s => (s - 1) * DirichletCharacter.LFunctionTrivChar N s) (nhdsWithin 1 {1}ᶜ)\n    (nhds (∏ p ∈ N.primeFactors, (1 - (↑p)⁻¹)))","name":"DirichletCharacter.LFunctionTrivChar_residue_one","isProp":true,"docString":"The L function of the trivial Dirichlet character mod `N` has a simple pole with\nresidue `∏ p ∈ N.primeFactors, (1 - p⁻¹)` at `s = 1`. ","distance":0.98476023504527054885926418137387372553348541259765625}],["The product of the prime factors of `n` that are less than `N` is an `N`-smooth number. ",{"type":"∀ (n N : ℕ), (List.filter (fun x => decide (x < N)) n.primeFactorsList).prod ∈ N.smoothNumbers","name":"Nat.prod_mem_smoothNumbers","isProp":true,"docString":"The product of the prime factors of `n` that are less than `N` is an `N`-smooth number. ","distance":0.9989317325643181089134259309503249824047088623046875}],["The non-zero non-`s`-factored numbers are `≥ N` when `s` contains all primes less than `N`. ",{"type":"∀ {N : ℕ} {s : Finset ℕ}, N.primesBelow ≤ s → (Nat.factoredNumbers s)ᶜ \\ {0} ⊆ {n | N ≤ n}","name":"Nat.factoredNumbers_compl","isProp":true,"docString":"The non-zero non-`s`-factored numbers are `≥ N` when `s` contains all primes less than `N`. ","distance":1.005977788976737397064198376028798520565032958984375}],["If `n` is a squarefree natural number, then `-1` is a square modulo `n` if and only if\n`n` is not divisible by a prime `q` such that `q % 4 = 3`. ",{"type":"∀ {n : ℕ}, Squarefree n → (IsSquare (-1) ↔ ∀ {q : ℕ}, Nat.Prime q → q ∣ n → q % 4 ≠ 3)","name":"ZMod.isSquare_neg_one_iff","isProp":true,"docString":"If `n` is a squarefree natural number, then `-1` is a square modulo `n` if and only if\n`n` is not divisible by a prime `q` such that `q % 4 = 3`. ","distance":1.00765650307555798548264647251926362514495849609375}],["If `n` is a squarefree natural number, then `-1` is a square modulo `n` if and only if\n`n` has no divisor `q` that is `≡ 3 mod 4`. ",{"type":"∀ {n : ℕ}, Squarefree n → (IsSquare (-1) ↔ ∀ {q : ℕ}, q ∣ n → q % 4 ≠ 3)","name":"ZMod.isSquare_neg_one_iff'","isProp":true,"docString":"If `n` is a squarefree natural number, then `-1` is a square modulo `n` if and only if\n`n` has no divisor `q` that is `≡ 3 mod 4`. ","distance":1.0297628915000558436076971702277660369873046875}],["positive integers summing to `n`",{"type":"{n : ℕ} → n.Partition → Multiset ℕ","name":"Nat.Partition.parts","isProp":false,"docString":"positive integers summing to `n`","distance":1.0305935010172520005511387353180907666683197021484375}],["The completed L-function of a function `ZMod N → ℂ`, modified by adding multiples of `N ^ (-s) / s`\nand `N ^ (-s) / (1 - s)` to make it entire.\n",{"type":"{N : ℕ} → [inst : NeZero N] → (ZMod N → ℂ) → ℂ → ℂ","name":"ZMod.completedLFunction₀","isProp":false,"docString":"The completed L-function of a function `ZMod N → ℂ`, modified by adding multiples of `N ^ (-s) / s`\nand `N ^ (-s) / (1 - s)` to make it entire.\n","distance":1.0380858226119447085267211150494404137134552001953125}],["**Legendre's Theorem**\n\nTaking (`p - 1`) times the `p`-adic valuation of `n!` equals `n` minus the sum of base `p` digits\nof `n`. ",{"type":"∀ {p : ℕ} [hp : Fact (Nat.Prime p)] (n : ℕ), (p - 1) * padicValNat p n.factorial = n - (p.digits n).sum","name":"sub_one_mul_padicValNat_factorial","isProp":true,"docString":"**Legendre's Theorem**\n\nTaking (`p - 1`) times the `p`-adic valuation of `n!` equals `n` minus the sum of base `p` digits\nof `n`. ","distance":1.041313640731104772640946976025588810443878173828125}],["If the factorization of `n` contains just one number `p` then `n` is a power of `p` ",{"type":"∀ {n p k : ℕ}, n ≠ 0 → (n.factorization = fun₀ | p => k) → n = p ^ k","name":"Nat.eq_pow_of_factorization_eq_single","isProp":true,"docString":"If the factorization of `n` contains just one number `p` then `n` is a power of `p` ","distance":1.0420419238320832722166642270167358219623565673828125}],["We can express `qrSign m n` as a power of `-1` when `m` and `n` are odd. ",{"type":"∀ {m n : ℕ}, Odd m → Odd n → qrSign m n = (-1) ^ (m / 2 * (n / 2))","name":"qrSign.neg_one_pow","isProp":true,"docString":"We can express `qrSign m n` as a power of `-1` when `m` and `n` are odd. ","distance":1.045552906223324196588464474189095199108123779296875}],["For `p ≠ 1`, the `p`-adic valuation of a natural `n ≠ 0` is the largest natural number `k` such\nthat `p^k` divides `n`. If `n = 0` or `p = 1`, then `padicValNat p q` defaults to `0`. ",{"type":"ℕ → ℕ → ℕ","name":"padicValNat","isProp":false,"docString":"For `p ≠ 1`, the `p`-adic valuation of a natural `n ≠ 0` is the largest natural number `k` such\nthat `p^k` divides `n`. If `n = 0` or `p = 1`, then `padicValNat p q` defaults to `0`. ","distance":1.0465433382415494367734254410606808960437774658203125}],["An induction lemma for polynomials. It takes a natural number `N` as a parameter, that is\nrequired to be at least as big as the `nat_degree` of the polynomial.  This is useful to prove\nresults where you want to change each term in a polynomial to something else depending on the\n`nat_degree` of the polynomial itself and not on the specific `nat_degree` of each term. ",{"type":"∀ {R : Type u_1} [inst : Semiring R] (P : Polynomial R → Prop) (N : ℕ),\n  P 0 →\n    (∀ (n : ℕ) (r : R), r ≠ 0 → n ≤ N → P (Polynomial.C r * Polynomial.X ^ n)) →\n      (∀ (f g : Polynomial R), f.natDegree < g.natDegree → g.natDegree ≤ N → P f → P g → P (f + g)) →\n        ∀ (f : Polynomial R), f.natDegree ≤ N → P f","name":"Polynomial.induction_with_natDegree_le","isProp":true,"docString":"An induction lemma for polynomials. It takes a natural number `N` as a parameter, that is\nrequired to be at least as big as the `nat_degree` of the polynomial.  This is useful to prove\nresults where you want to change each term in a polynomial to something else depending on the\n`nat_degree` of the polynomial itself and not on the specific `nat_degree` of each term. ","distance":1.0494902478467464934652753072441555559635162353515625}],["If `n` is a nonzero natural number and `p ≠ 1`, then there are natural numbers `e`\nand `n'` such that `n'` is not divisible by `p` and `n = p^e * n'`. ",{"type":"∀ {n : ℕ}, n ≠ 0 → ∀ (p : ℕ), p ≠ 1 → ∃ e n', ¬p ∣ n' ∧ n = p ^ e * n'","name":"Nat.exists_eq_pow_mul_and_not_dvd","isProp":true,"docString":"If `n` is a nonzero natural number and `p ≠ 1`, then there are natural numbers `e`\nand `n'` such that `n'` is not divisible by `p` and `n = p^e * n'`. ","distance":1.050142583954977393290164400241337716579437255859375}],["If the division equation `d.toNat * q.toNat + r.toNat = n.toNat` holds,\nthen `n.umod d = r`. ",{"type":"∀ {w : ℕ} {d n q r : BitVec w}, r < d → d.toNat * q.toNat + r.toNat = n.toNat → n % d = r","name":"BitVec.umod_eq_of_mul_add_toNat","isProp":true,"docString":"If the division equation `d.toNat * q.toNat + r.toNat = n.toNat` holds,\nthen `n.umod d = r`. ","distance":1.0514264984054850771144629106856882572174072265625}]]