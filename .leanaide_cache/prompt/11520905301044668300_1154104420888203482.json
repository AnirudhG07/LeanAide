[["Convert a pre-set to a `set` of pre-sets. ",{"type":"PSet → Set PSet","name":"PSet.toSet","isProp":false,"docString":"Convert a pre-set to a `set` of pre-sets. ","distance":1.956469435088217689866496584727428853511810302734375}],[" For any function `f` from type `α` to type `β`, `Set.range f = f '' Set.univ`.",{"type":"∀ {α : Type u_1} {β : Type u_2} {f : α → β}, f '' Set.univ = Set.range f","name":"Set.image_univ","isProp":true,"docString":" For any function `f` from type `α` to type `β`, `Set.range f = f '' Set.univ`.","distance":1.9843962548505746923410697490908205509185791015625}],["This theorem states that for any positive number `n` of type `PosNum`, the double coercion of `n` to natural number and then to integer is equal to the direct coercion of `n` to integer. Essentially, it ensures that converting a positive number to a natural number and then to an integer yields the same result as directly converting the positive number to an integer.",{"type":"∀ (n : PosNum), ↑↑n = ↑n","name":"PosNum.to_nat_to_int","isProp":true,"docString":"This theorem states that for any positive number `n` of type `PosNum`, the double coercion of `n` to natural number and then to integer is equal to the direct coercion of `n` to integer. Essentially, it ensures that converting a positive number to a natural number and then to an integer yields the same result as directly converting the positive number to an integer.","distance":1.99016572325494234263487669522874057292938232421875}],["The universal set `Set.univ` in a preconnected space is a preconnected set. ",{"type":"∀ {α : Type u} [inst : TopologicalSpace α] [self : PreconnectedSpace α], IsPreconnected Set.univ","name":"PreconnectedSpace.isPreconnected_univ","isProp":true,"docString":"The universal set `Set.univ` in a preconnected space is a preconnected set. ","distance":1.95704131083274557312279284815303981304168701171875}],[" Given functions between sets and principal filters, the preimage filter of a function applied to a principal filter is equal to the principal filter of the preimage of the set under the function.",{"type":"∀ {α : Type u} {β : Type v} {m : α → β} {t : Set β}, Filter.comap m (Filter.principal t) = Filter.principal (m ⁻¹' t)","name":"Filter.comap_principal","isProp":true,"docString":" Given functions between sets and principal filters, the preimage filter of a function applied to a principal filter is equal to the principal filter of the preimage of the set under the function.","distance":1.9868531502332960059220567927695810794830322265625}],["The theorem `PreconnectedSpace.isPreconnected_univ` states that the universal set, denoted by `Set.univ`, in a preconnected space is a preconnected set. Here, a preconnected space is a topological space that can't be represented as a union of two disjoint nonempty open sets. Hence, in any preconnected topological space, no non-trivial open partition exists for the universal set, which means it is preconnected. The universal set in this context refers to the set containing all elements of the given type, akin to the entire space in topological terms.",{"type":"∀ {α : Type u} [inst : TopologicalSpace α] [self : PreconnectedSpace α], IsPreconnected Set.univ","name":"PreconnectedSpace.isPreconnected_univ","isProp":true,"docString":"The theorem `PreconnectedSpace.isPreconnected_univ` states that the universal set, denoted by `Set.univ`, in a preconnected space is a preconnected set. Here, a preconnected space is a topological space that can't be represented as a union of two disjoint nonempty open sets. Hence, in any preconnected topological space, no non-trivial open partition exists for the universal set, which means it is preconnected. The universal set in this context refers to the set containing all elements of the given type, akin to the entire space in topological terms.","distance":1.991316461912971735870314660132862627506256103515625}],["If we dilate a convex set about a point in its interior by a scale `t > 1`, the interior of\nthe result includes the closure of the original set.\n\nTODO Generalise this from convex sets to sets that are balanced / star-shaped about `x`. ",{"type":"∀ {E : Type u_3} [inst : AddCommGroup E] [inst_1 : Module ℝ E] [inst_2 : TopologicalSpace E]\n  [inst_3 : TopologicalAddGroup E] [inst_4 : ContinuousSMul ℝ E] {s : Set E},\n  Convex ℝ s → ∀ {x : E}, x ∈ interior s → ∀ (t : ℝ), 1 < t → closure s ⊆ interior (⇑(AffineMap.homothety x t) '' s)","name":"Convex.closure_subset_interior_image_homothety_of_one_lt","isProp":true,"docString":"If we dilate a convex set about a point in its interior by a scale `t > 1`, the interior of\nthe result includes the closure of the original set.\n\nTODO Generalise this from convex sets to sets that are balanced / star-shaped about `x`. ","distance":1.9580588852966618329531911513186059892177581787109375}],["A link that, when clicked, makes the specified edit\nand potentially moves the cursor\nor makes a selection. ",{"type":"ProofWidgets.Component ProofWidgets.MakeEditLinkProps","name":"ProofWidgets.MakeEditLink","isProp":false,"docString":"A link that, when clicked, makes the specified edit\nand potentially moves the cursor\nor makes a selection. ","distance":1.9582012886847739441265048299101181328296661376953125}],["Converts `x : Num` to `-x : ZNum`. ",{"type":"Num → ZNum","name":"Num.toZNumNeg","isProp":false,"docString":"Converts `x : Num` to `-x : ZNum`. ","distance":1.962877344085617981050972957746125757694244384765625}],["Which textual range to select after the edit.\nThe range is interpreted in the file that `edit` applies to.\nIf present and `start == end`, the cursor is moved to `start` and nothing is selected.\nIf not present, the selection is not changed. ",{"type":"ProofWidgets.MakeEditLinkProps → Option Lean.Lsp.Range","name":"ProofWidgets.MakeEditLinkProps.newSelection?","isProp":false,"docString":"Which textual range to select after the edit.\nThe range is interpreted in the file that `edit` applies to.\nIf present and `start == end`, the cursor is moved to `start` and nothing is selected.\nIf not present, the selection is not changed. ","distance":1.96427735791185664737668048474006354808807373046875}],["Converts a `ZNum` to a `PosNum`, mapping all out of range values to `1`. ",{"type":"ZNum → PosNum","name":"PosNum.ofZNum","isProp":false,"docString":"Converts a `ZNum` to a `PosNum`, mapping all out of range values to `1`. ","distance":1.9644773105580941585657228642958216369152069091796875}],["If we dilate the interior of a convex set about a point in its interior by a scale `t > 1`,\nthe result includes the closure of the original set.\n\nTODO Generalise this from convex sets to sets that are balanced / star-shaped about `x`. ",{"type":"∀ {E : Type u_3} [inst : AddCommGroup E] [inst_1 : Module ℝ E] [inst_2 : TopologicalSpace E]\n  [inst_3 : TopologicalAddGroup E] [inst_4 : ContinuousSMul ℝ E] {s : Set E},\n  Convex ℝ s → ∀ {x : E}, x ∈ interior s → ∀ (t : ℝ), 1 < t → closure s ⊆ ⇑(AffineMap.homothety x t) '' interior s","name":"Convex.closure_subset_image_homothety_interior_of_one_lt","isProp":true,"docString":"If we dilate the interior of a convex set about a point in its interior by a scale `t > 1`,\nthe result includes the closure of the original set.\n\nTODO Generalise this from convex sets to sets that are balanced / star-shaped about `x`. ","distance":1.96507561973020639101150663918815553188323974609375}],["`castPosNum` casts a `PosNum` into any type which has `1` and `+`. ",{"type":"{α : Type u_1} → [inst : One α] → [inst : Add α] → PosNum → α","name":"castPosNum","isProp":false,"docString":"`castPosNum` casts a `PosNum` into any type which has `1` and `+`. ","distance":1.97365744949527677221112753613851964473724365234375}],["Auxiliary function for `getRawProjections`.\nFind custom projections, automatically found by simps.\nThese come from `DFunLike` and `SetLike` instances. ",{"type":"Lean.Name → Array Simps.ParsedProjectionData → Lean.CoreM (Array Simps.ParsedProjectionData)","name":"Simps.findAutomaticProjections","isProp":false,"docString":"Auxiliary function for `getRawProjections`.\nFind custom projections, automatically found by simps.\nThese come from `DFunLike` and `SetLike` instances. ","distance":1.973806073291390905666276012198068201541900634765625}],["The predecessor of a `PosNum` as a `Num`. ",{"type":"PosNum → Num","name":"PosNum.pred'","isProp":false,"docString":"The predecessor of a `PosNum` as a `Num`. ","distance":1.9765455355109835533511386529426090419292449951171875}],["the condition that `premap` is in the presieve ",{"type":"∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] {D : Type u₂} [inst_1 : CategoryTheory.Category.{v₂, u₂} D]\n  {F : CategoryTheory.Functor C D} {X : C} {S : CategoryTheory.Presieve X} {Y : D} {f : Y ⟶ F.obj X}\n  (self : CategoryTheory.Presieve.FunctorPushforwardStructure F S f), S self.premap","name":"CategoryTheory.Presieve.FunctorPushforwardStructure.cover","isProp":true,"docString":"the condition that `premap` is in the presieve ","distance":1.9770920497636976786992590859881602227687835693359375}],["This is the `List.sum` version of `add_neg`",{"type":"∀ {G : Type u_7} [inst : AddCommGroup G] (L : List G), -List.sum L = List.sum (List.map (fun x => -x) L)","name":"List.sum_neg","isProp":true,"docString":"This is the `List.sum` version of `add_neg`","distance":1.9770957225861855999227145730401389300823211669921875}],["If a preconnected set contains endpoints of an interval, then it includes the whole interval. ",{"type":"∀ {α : Type v} [inst : LinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderClosedTopology α] {s : Set α},\n  IsPreconnected s → ∀ {a b : α}, a ∈ s → b ∈ s → Set.Icc a b ⊆ s","name":"IsPreconnected.Icc_subset","isProp":true,"docString":"If a preconnected set contains endpoints of an interval, then it includes the whole interval. ","distance":1.977348836598569636890943002072162926197052001953125}],["The weighted sum is unaffected by changing the weights to the\ncorresponding indicator function and adding points to the set. ",{"type":"∀ {k : Type u_1} {V : Type u_2} {P : Type u_3} [inst : Ring k] [inst_1 : AddCommGroup V] [inst_2 : Module k V]\n  [S : AddTorsor V P] {ι : Type u_4} (w : ι → k) (p : ι → P) {s₁ s₂ : Finset ι},\n  s₁ ⊆ s₂ → (Finset.weightedVSub s₁ p) w = (Finset.weightedVSub s₂ p) (Set.indicator (↑s₁) w)","name":"Finset.weightedVSub_indicator_subset","isProp":true,"docString":"The weighted sum is unaffected by changing the weights to the\ncorresponding indicator function and adding points to the set. ","distance":1.9774305677819496995795134353102184832096099853515625}],["index set of an open cover of a scheme `X` ",{"type":"{X : AlgebraicGeometry.Scheme} → AlgebraicGeometry.Scheme.OpenCover X → Type v","name":"AlgebraicGeometry.Scheme.OpenCover.J","isProp":false,"docString":"index set of an open cover of a scheme `X` ","distance":1.97756727532556286774934051209129393100738525390625}],["Right-shift the binary representation of a `PosNum`. ",{"type":"PosNum → ℕ → Num","name":"PosNum.shiftr","isProp":false,"docString":"Right-shift the binary representation of a `PosNum`. ","distance":1.9782978188137594344198078033514320850372314453125}],["This component shows a selection of all known and applicable `ProofWidgets.ExprPresenter`s which\nare used to render the expression when selected. The one with highest precedence (TODO) is shown by\ndefault. ",{"type":"ProofWidgets.Component ProofWidgets.ExprPresentationProps","name":"ProofWidgets.ExprPresentation","isProp":false,"docString":"This component shows a selection of all known and applicable `ProofWidgets.ExprPresenter`s which\nare used to render the expression when selected. The one with highest precedence (TODO) is shown by\ndefault. ","distance":1.9783957646655920825651264749467372894287109375}],["Construct an affine scheme from a scheme and the information that it is affine.\nAlso see `AffineScheme.of` for a typeclass version. ",{"type":"(X : AlgebraicGeometry.Scheme) → AlgebraicGeometry.IsAffine X → AlgebraicGeometry.AffineScheme","name":"AlgebraicGeometry.AffineScheme.mk","isProp":false,"docString":"Construct an affine scheme from a scheme and the information that it is affine.\nAlso see `AffineScheme.of` for a typeclass version. ","distance":1.979967583801926167552664992399513721466064453125}],["Override the list of preprocessors. ",{"type":"Linarith.LinarithConfig → Option (List Linarith.GlobalBranchingPreprocessor)","name":"Linarith.LinarithConfig.preprocessors","isProp":false,"docString":"Override the list of preprocessors. ","distance":1.981098986875220901993088773451745510101318359375}]]