[["A (positive) natural number `n` is a sum of two squares if and only if the exponent of\nevery prime `q` such that `q % 4 = 3` in the prime factorization of `n` is even.\n(The assumption `0 < n` is not present, since for `n = 0`, both sides are satisfied;\nthe right hand side holds, since `padicValNat q 0 = 0` by definition.) ",{"type":"∀ {n : ℕ}, (∃ x y, n = x ^ 2 + y ^ 2) ↔ ∀ {q : ℕ}, Nat.Prime q → q % 4 = 3 → Even (padicValNat q n)","name":"Nat.eq_sq_add_sq_iff","isProp":true,"docString":"A (positive) natural number `n` is a sum of two squares if and only if the exponent of\nevery prime `q` such that `q % 4 = 3` in the prime factorization of `n` is even.\n(The assumption `0 < n` is not present, since for `n = 0`, both sides are satisfied;\nthe right hand side holds, since `padicValNat q 0 = 0` by definition.) ","distance":0.92267794714997553029434129712171852588653564453125}],[" For every non-negative real number `q`, we have `q ≥ 0`.",{"type":"∀ {q : NNReal}, (0 ≤ ↑q) = True","name":"Mathlib.Data.Real.NNReal._auxLemma.29","isProp":true,"docString":" For every non-negative real number `q`, we have `q ≥ 0`.","distance":0.82539704202365216101355827049701474606990814208984375}],["A positive natural number `n` can be expressed as the sum of two squares if and only if for every prime number `q` in its prime factorization, where `q` modulo 4 equals 3, the `q`-adic valuation of `n` (the highest power of `q` that divides `n`) is an even number. Note that the assumption `n > 0` is not required since for `n = 0`, both conditions are automatically satisfied; the right-hand side is true because by definition `padicValNat q 0 = 0`.",{"type":"∀ {n : ℕ}, (∃ x y, n = x ^ 2 + y ^ 2) ↔ ∀ {q : ℕ}, q.Prime → q % 4 = 3 → Even (padicValNat q n)","name":"Nat.eq_sq_add_sq_iff","isProp":true,"docString":"A positive natural number `n` can be expressed as the sum of two squares if and only if for every prime number `q` in its prime factorization, where `q` modulo 4 equals 3, the `q`-adic valuation of `n` (the highest power of `q` that divides `n`) is an even number. Note that the assumption `n > 0` is not required since for `n = 0`, both conditions are automatically satisfied; the right-hand side is true because by definition `padicValNat q 0 = 0`.","distance":0.874585400517378541707103067892603576183319091796875}],["Reinterpret a rational number `q` as a non-negative rational number. Returns `0` if `q ≤ 0`. ",{"type":"ℚ → ℚ≥0","name":"Rat.toNNRat","isProp":false,"docString":"Reinterpret a rational number `q` as a non-negative rational number. Returns `0` if `q ≤ 0`. ","distance":0.93633859169091782082006147902575321495532989501953125}],[" For any semiring `R` and its exponential characteristic `q`, $0 < q^n$ for all natural numbers `n`.",{"type":"∀ (R : Type u) [inst : Semiring R] (q : ℕ) [inst : ExpChar R q] (n : ℕ), 0 < q ^ n","name":"expChar_pow_pos","isProp":true,"docString":" For any semiring `R` and its exponential characteristic `q`, $0 < q^n$ for all natural numbers `n`.","distance":0.90214008911726040196299436502158641815185546875}],["This theorem states that for any rational number 'q', the function `Rat.toNNRat` that maps 'q' to a non-negative rational number returns 0 if and only if 'q' is less than or equal to 0. This means the conversion of 'q' to a non-negative rational number will yield 0 precisely when 'q' is not positive.",{"type":"∀ {q : ℚ}, q.toNNRat = 0 ↔ q ≤ 0","name":"Rat.toNNRat_eq_zero","isProp":true,"docString":"This theorem states that for any rational number 'q', the function `Rat.toNNRat` that maps 'q' to a non-negative rational number returns 0 if and only if 'q' is less than or equal to 0. This means the conversion of 'q' to a non-negative rational number will yield 0 precisely when 'q' is not positive.","distance":0.88602075587139139667414156065206043422222137451171875}],["If `n` is a squarefree natural number, then `-1` is a square modulo `n` if and only if\n`n` is not divisible by a prime `q` such that `q % 4 = 3`. ",{"type":"∀ {n : ℕ}, Squarefree n → (IsSquare (-1) ↔ ∀ {q : ℕ}, Nat.Prime q → q ∣ n → q % 4 ≠ 3)","name":"ZMod.isSquare_neg_one_iff","isProp":true,"docString":"If `n` is a squarefree natural number, then `-1` is a square modulo `n` if and only if\n`n` is not divisible by a prime `q` such that `q % 4 = 3`. ","distance":0.9467774332750054089302693682839162647724151611328125}],["`qp = q - 1` ",{"type":"PNat.XgcdType → ℕ","name":"PNat.XgcdType.qp","isProp":false,"docString":"`qp = q - 1` ","distance":0.9535591338939948258257572888396680355072021484375}],["If the `p`-adic norm of `q` is 0, then `q` is `0`. ",{"type":"∀ {p : ℕ} [hp : Fact (Nat.Prime p)] {q : ℚ}, padicNorm p q = 0 → q = 0","name":"padicNorm.zero_of_padicNorm_eq_zero","isProp":true,"docString":"If the `p`-adic norm of `q` is 0, then `q` is `0`. ","distance":0.95573924086807782174446401768364012241363525390625}],["Note that `0 : 0 →qᵢ Q` alone would not be well-typed as the RHS. ",{"type":"∀ {ι : Type u_1} {R : Type u_2} {P : Type u_7} {Mᵢ : ι → Type u_8} [inst : CommSemiring R]\n  [inst_1 : (i : ι) → AddCommMonoid (Mᵢ i)] [inst_2 : AddCommMonoid P] [inst_3 : (i : ι) → Module R (Mᵢ i)]\n  [inst_4 : Module R P] [inst_5 : Fintype ι] [inst_6 : DecidableEq ι] {i j : ι} (h : i ≠ j)\n  (Q : QuadraticMap R (Mᵢ i) P),\n  (QuadraticMap.Isometry.proj i Q).comp (QuadraticMap.Isometry.single (Pi.single i Q) j) =\n    QuadraticMap.Isometry.comp 0 (QuadraticMap.Isometry.ofEq ⋯)","name":"QuadraticMap.Isometry.proj_comp_single_of_ne","isProp":true,"docString":"Note that `0 : 0 →qᵢ Q` alone would not be well-typed as the RHS. ","distance":0.95691252655388814307713118978426791727542877197265625}],["`q` is defined as the minimum factor of `mersenne p`, bundled as an `ℕ+`. ",{"type":"ℕ → ℕ+","name":"LucasLehmer.q","isProp":false,"docString":"`q` is defined as the minimum factor of `mersenne p`, bundled as an `ℕ+`. ","distance":0.9580388969319060255003250858862884342670440673828125}],["The `L`-function of the trivial character mod `N`. ",{"type":"(N : ℕ) → [inst : NeZero N] → ℂ → ℂ","name":"DirichletCharacter.LFunctionTrivChar","isProp":false,"docString":"The `L`-function of the trivial character mod `N`. ","distance":0.96040550574931415894752717576920986175537109375}],["If `n` is a squarefree natural number, then `-1` is a square modulo `n` if and only if\n`n` has no divisor `q` that is `≡ 3 mod 4`. ",{"type":"∀ {n : ℕ}, Squarefree n → (IsSquare (-1) ↔ ∀ {q : ℕ}, q ∣ n → q % 4 ≠ 3)","name":"ZMod.isSquare_neg_one_iff'","isProp":true,"docString":"If `n` is a squarefree natural number, then `-1` is a square modulo `n` if and only if\n`n` has no divisor `q` that is `≡ 3 mod 4`. ","distance":0.9652845285877369452265384097700007259845733642578125}],["positive integers summing to `n`",{"type":"{n : ℕ} → n.Partition → Multiset ℕ","name":"Nat.Partition.parts","isProp":false,"docString":"positive integers summing to `n`","distance":0.96661208998416026094702147020143456757068634033203125}],["**Hermite Theorem**. Let `N` be an integer. There are only finitely many number fields\n(in some fixed extension of `ℚ`) of discriminant bounded by `N`. ",{"type":"∀ (A : Type u_2) [inst : Field A] [inst_1 : CharZero A] (N : ℕ), {K | |NumberField.discr ↥↑K| ≤ ↑N}.Finite","name":"NumberField.finite_of_discr_bdd","isProp":true,"docString":"**Hermite Theorem**. Let `N` be an integer. There are only finitely many number fields\n(in some fixed extension of `ℚ`) of discriminant bounded by `N`. ","distance":0.97454244943110535093211410639923997223377227783203125}],["For `p ≠ 1`, the `p`-adic valuation of a natural `n ≠ 0` is the largest natural number `k` such\nthat `p^k` divides `n`. If `n = 0` or `p = 1`, then `padicValNat p q` defaults to `0`. ",{"type":"ℕ → ℕ → ℕ","name":"padicValNat","isProp":false,"docString":"For `p ≠ 1`, the `p`-adic valuation of a natural `n ≠ 0` is the largest natural number `k` such\nthat `p^k` divides `n`. If `n = 0` or `p = 1`, then `padicValNat p q` defaults to `0`. ","distance":0.97475024654018371794705899446853436529636383056640625}],["There are exactly `⌊N/n⌋` positive multiples of `n` that are `≤ N`.\nSee `Nat.card_multiples` for a \"shifted-by-one\" version. ",{"type":"∀ (N n : ℕ), (Finset.filter (fun k => k ≠ 0 ∧ n ∣ k) (Finset.range N.succ)).card = N / n","name":"Nat.card_multiples'","isProp":true,"docString":"There are exactly `⌊N/n⌋` positive multiples of `n` that are `≤ N`.\nSee `Nat.card_multiples` for a \"shifted-by-one\" version. ","distance":0.986295993798579129219206151901744306087493896484375}],["The L function of the trivial Dirichlet character mod `N` is obtained from the Riemann\nzeta function by multiplying with `∏ p ∈ N.primeFactors, (1 - (p : ℂ) ^ (-s))`. ",{"type":"∀ {N : ℕ} [inst : NeZero N] {s : ℂ},\n  s ≠ 1 → DirichletCharacter.LFunctionTrivChar N s = (∏ p ∈ N.primeFactors, (1 - ↑p ^ (-s))) * riemannZeta s","name":"DirichletCharacter.LFunctionTrivChar_eq_mul_riemannZeta","isProp":true,"docString":"The L function of the trivial Dirichlet character mod `N` is obtained from the Riemann\nzeta function by multiplying with `∏ p ∈ N.primeFactors, (1 - (p : ℂ) ^ (-s))`. ","distance":0.99199293127267595959750678957789205014705657958984375}],["The sum of `x ^ i` as `x` ranges over a finite field of cardinality `q`\nis equal to `0` if `i < q - 1`. ",{"type":"∀ (K : Type u_1) [inst : Field K] [inst_1 : Fintype K], ∀ i < Fintype.card K - 1, ∑ x : K, x ^ i = 0","name":"FiniteField.sum_pow_lt_card_sub_one","isProp":true,"docString":"The sum of `x ^ i` as `x` ranges over a finite field of cardinality `q`\nis equal to `0` if `i < q - 1`. ","distance":0.9929978930353389188212531735189259052276611328125}],["The sum of `x ^ i` as `x` ranges over the units of a finite field of cardinality `q`\nis equal to `0` unless `(q - 1) ∣ i`, in which case the sum is `q - 1`. ",{"type":"∀ (K : Type u_1) [inst : Field K] [inst_1 : Fintype K] [inst_2 : DecidableEq K] (i : ℕ),\n  ∑ x : Kˣ, ↑x ^ i = if Fintype.card K - 1 ∣ i then -1 else 0","name":"FiniteField.sum_pow_units","isProp":true,"docString":"The sum of `x ^ i` as `x` ranges over the units of a finite field of cardinality `q`\nis equal to `0` unless `(q - 1) ∣ i`, in which case the sum is `q - 1`. ","distance":0.9969036256493144509960302457329817116260528564453125}],["All the `Q q` coincide with `0` in degree 0. ",{"type":"∀ {C : Type u_1} [inst : CategoryTheory.Category.{u_2, u_1} C] [inst_1 : CategoryTheory.Preadditive C]\n  {X : CategoryTheory.SimplicialObject C} (q : ℕ), (AlgebraicTopology.DoldKan.Q q).f 0 = 0","name":"AlgebraicTopology.DoldKan.Q_f_0_eq","isProp":true,"docString":"All the `Q q` coincide with `0` in degree 0. ","distance":0.99893667875470182337949154316447675228118896484375}],["If the division equation `d.toNat * q.toNat + r.toNat = n.toNat` holds,\nthen `n.umod d = r`. ",{"type":"∀ {w : ℕ} {d n q r : BitVec w}, r < d → d.toNat * q.toNat + r.toNat = n.toNat → n % d = r","name":"BitVec.umod_eq_of_mul_add_toNat","isProp":true,"docString":"If the division equation `d.toNat * q.toNat + r.toNat = n.toNat` holds,\nthen `n.umod d = r`. ","distance":1.003581088278286959081242457614280283451080322265625}],["If the division equation `d.toNat * q.toNat + r.toNat = n.toNat` holds,\nthen `n.udiv d = q`. ",{"type":"∀ {w : ℕ} {d n q r : BitVec w}, 0 < d → r < d → d.toNat * q.toNat + r.toNat = n.toNat → n / d = q","name":"BitVec.udiv_eq_of_mul_add_toNat","isProp":true,"docString":"If the division equation `d.toNat * q.toNat + r.toNat = n.toNat` holds,\nthen `n.udiv d = q`. ","distance":1.0039941440871660294220646392204798758029937744140625}],["The geometric sequence `q^n` is a solution of `E` iff\n`q` is a root of `E`'s characteristic polynomial. ",{"type":"∀ {α : Type u_1} [inst : CommRing α] (E : LinearRecurrence α) (q : α),\n  (E.IsSolution fun n => q ^ n) ↔ E.charPoly.IsRoot q","name":"LinearRecurrence.geom_sol_iff_root_charPoly","isProp":true,"docString":"The geometric sequence `q^n` is a solution of `E` iff\n`q` is a root of `E`'s characteristic polynomial. ","distance":1.004121878360445752065288615995086729526519775390625}]]