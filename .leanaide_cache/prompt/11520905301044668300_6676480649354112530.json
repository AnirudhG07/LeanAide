[["Checks that `id` has not already been `#align`ed or `#noalign`ed. ",{"type":"{m : Type ‚Üí Type} ‚Üí [inst : Monad m] ‚Üí [inst : Lean.MonadEnv m] ‚Üí [inst : Lean.MonadError m] ‚Üí Lean.Name ‚Üí m Unit","name":"Mathlib.Prelude.Rename.ensureUnused","isProp":false,"docString":"Checks that `id` has not already been `#align`ed or `#noalign`ed. ","distance":1.979095713449539051254078003694303333759307861328125}],[" Given a non-zero point `x` in a topological space `G` with inversion, a nontrivially normed field `ùïú`, a normed additive group `E` over `ùïú` as a normed space, another topological space `H`, and a model `I` with corners, the function `y ‚Ü¶ 1/y` is smooth at `x` in the function space from `E` to `E` and from `H` to `H`.",{"type":"‚àÄ {ùïú : Type u_1} [inst : NontriviallyNormedField ùïú] {H : Type u_2} [inst_1 : TopologicalSpace H] {E : Type u_3}\n  [inst_2 : NormedAddCommGroup E] [inst_3 : NormedSpace ùïú E] {I : ModelWithCorners ùïú E H} {G : Type u_4}\n  [inst_4 : Inv G] [inst_5 : Zero G] [inst_6 : TopologicalSpace G] [inst_7 : ChartedSpace H G] [self : SmoothInv‚ÇÄ I G]\n  ‚¶Éx : G‚¶Ñ, x ‚â† 0 ‚Üí SmoothAt I I (fun y => y‚Åª¬π) x","name":"SmoothInv‚ÇÄ.smoothAt_inv‚ÇÄ","isProp":true,"docString":" Given a non-zero point `x` in a topological space `G` with inversion, a nontrivially normed field `ùïú`, a normed additive group `E` over `ùïú` as a normed space, another topological space `H`, and a model `I` with corners, the function `y ‚Ü¶ 1/y` is smooth at `x` in the function space from `E` to `E` and from `H` to `H`.","distance":2.00666560054863030160277048707939684391021728515625}],["This theorem states that for any topological space `Œ±` and any discrete topological space `Y`, if `Œ±` is preconnected and `f` is a continuous function from `Œ±` to `Y`, then the function `f` will produce the same output for any two inputs `x` and `y` from `Œ±`. This is a version of `isPreconnected.constant` theorem specialized for `PreconnectedSpace`.",{"type":"‚àÄ {Œ± : Type u} [inst : TopologicalSpace Œ±] {Y : Type u_3} [inst_1 : TopologicalSpace Y] [inst_2 : DiscreteTopology Y],\n  PreconnectedSpace Œ± ‚Üí ‚àÄ {f : Œ± ‚Üí Y}, Continuous f ‚Üí ‚àÄ {x y : Œ±}, f x = f y","name":"PreconnectedSpace.constant","isProp":true,"docString":"This theorem states that for any topological space `Œ±` and any discrete topological space `Y`, if `Œ±` is preconnected and `f` is a continuous function from `Œ±` to `Y`, then the function `f` will produce the same output for any two inputs `x` and `y` from `Œ±`. This is a version of `isPreconnected.constant` theorem specialized for `PreconnectedSpace`.","distance":1.9990559856973260099977096615475602447986602783203125}],["The default priority for spawned tasks, also the lowest priority: `0`. ",{"type":"Task.Priority","name":"Task.Priority.default","isProp":false,"docString":"The default priority for spawned tasks, also the lowest priority: `0`. ","distance":1.9798821221257132396686984066036529839038848876953125}],[" For any nontrivially normed field `ùïú`, normed additive commutative group `E`, normed space `E` over `ùïú`, and topological space `H`, the function `I` from `ùïú` to `E` defined in a Model With Corners `I` of types `ùïú`, `E`, and `H` is uniquely differentiable on its entire range.",{"type":"‚àÄ {ùïú : Type u_1} [inst : NontriviallyNormedField ùïú] {E : Type u_2} [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace ùïú E] {H : Type u_3} [inst_3 : TopologicalSpace H] (I : ModelWithCorners ùïú E H),\n  UniqueDiffOn ùïú (Set.range ‚ÜëI)","name":"ModelWithCorners.unique_diff","isProp":true,"docString":" For any nontrivially normed field `ùïú`, normed additive commutative group `E`, normed space `E` over `ùïú`, and topological space `H`, the function `I` from `ùïú` to `E` defined in a Model With Corners `I` of types `ùïú`, `E`, and `H` is uniquely differentiable on its entire range.","distance":2.010913549971087288525950498296879231929779052734375}],["The theorem `Homeomorph.isPathConnected_preimage` states that for any topological spaces `X` and `Y`, and any homeomorphism `h` from `X` to `Y`, a set `s` in `Y` is path-connected if and only if its preimage under `h` in `X` is path-connected. In other words, a homeomorphism preserves the property of being path-connected between the original set and its image under the homeomorphism. A path-connected set, in this context, is defined as a set which contains at least one point that can be connected to all other points in the set via a path within the set.",{"type":"‚àÄ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] {s : Set Y} (h : X ‚âÉ‚Çú Y),\n  IsPathConnected (‚áëh ‚Åª¬π' s) ‚Üî IsPathConnected s","name":"Homeomorph.isPathConnected_preimage","isProp":true,"docString":"The theorem `Homeomorph.isPathConnected_preimage` states that for any topological spaces `X` and `Y`, and any homeomorphism `h` from `X` to `Y`, a set `s` in `Y` is path-connected if and only if its preimage under `h` in `X` is path-connected. In other words, a homeomorphism preserves the property of being path-connected between the original set and its image under the homeomorphism. A path-connected set, in this context, is defined as a set which contains at least one point that can be connected to all other points in the set via a path within the set.","distance":2.007503465561217392831849792855791747570037841796875}],["Returns the \"sign\" of the integer as another integer: `1` for positive numbers,\n`-1` for negative numbers, and `0` for `0`.\n",{"type":"‚Ñ§ ‚Üí ‚Ñ§","name":"Int.sign","isProp":false,"docString":"Returns the \"sign\" of the integer as another integer: `1` for positive numbers,\n`-1` for negative numbers, and `0` for `0`.\n","distance":1.984330371816349636304721570922993123531341552734375}],["`className` is the name of the class we are looking for. ",{"type":"Simps.AutomaticProjectionData ‚Üí Lean.Name","name":"Simps.AutomaticProjectionData.className","isProp":false,"docString":"`className` is the name of the class we are looking for. ","distance":1.9872315927869779184078424805193208158016204833984375}],["**Minimum principle** for concave functions on a segment. If a function `f` is concave on the\nsegment `[x, y]`, then the eventual minimum of `f` on `[x, y]` is at `x` or `y`. ",{"type":"‚àÄ {ùïú : Type u_1} {E : Type u_2} {Œ≤ : Type u_4} [inst : LinearOrderedField ùïú] [inst_1 : AddCommGroup E]\n  [inst_2 : LinearOrderedAddCommGroup Œ≤] [inst_3 : Module ùïú E] [inst_4 : Module ùïú Œ≤] [inst_5 : OrderedSMul ùïú Œ≤]\n  {f : E ‚Üí Œ≤} {x y z : E}, ConcaveOn ùïú (segment ùïú x y) f ‚Üí z ‚àà segment ùïú x y ‚Üí min (f x) (f y) ‚â§ f z","name":"ConcaveOn.min_le_of_mem_segment","isProp":true,"docString":"**Minimum principle** for concave functions on a segment. If a function `f` is concave on the\nsegment `[x, y]`, then the eventual minimum of `f` on `[x, y]` is at `x` or `y`. ","distance":1.9898407986581361228672903962433338165283203125}],["**Minimum principle** for concave functions on an interval. If a function `f` is concave on the\ninterval `[x, y]`, then the eventual minimum of `f` on `[x, y]` is at `x` or `y`. ",{"type":"‚àÄ {ùïú : Type u_1} {Œ≤ : Type u_4} [inst : LinearOrderedField ùïú] [inst_1 : LinearOrderedAddCommGroup Œ≤]\n  [inst_2 : Module ùïú Œ≤] [inst_3 : OrderedSMul ùïú Œ≤] {f : ùïú ‚Üí Œ≤} {x y z : ùïú},\n  ConcaveOn ùïú (Set.Icc x y) f ‚Üí z ‚àà Set.Icc x y ‚Üí min (f x) (f y) ‚â§ f z","name":"ConcaveOn.min_le_of_mem_Icc","isProp":true,"docString":"**Minimum principle** for concave functions on an interval. If a function `f` is concave on the\ninterval `[x, y]`, then the eventual minimum of `f` on `[x, y]` is at `x` or `y`. ","distance":1.99406220450896665141726771253161132335662841796875}],["Characterization of minimizers for the projection on a convex set in a real inner product\nspace. ",{"type":"‚àÄ {F : Type u_3} [inst : NormedAddCommGroup F] [inst_1 : InnerProductSpace ‚Ñù F] {K : Set F},\n  Convex ‚Ñù K ‚Üí ‚àÄ {u v : F}, v ‚àà K ‚Üí (‚Äñu - v‚Äñ = ‚®Ö w, ‚Äñu - ‚Üëw‚Äñ ‚Üî ‚àÄ w ‚àà K, ‚ü™u - v, w - v‚ü´_‚Ñù ‚â§ 0)","name":"norm_eq_iInf_iff_real_inner_le_zero","isProp":true,"docString":"Characterization of minimizers for the projection on a convex set in a real inner product\nspace. ","distance":1.9942114933022152545305516468943096697330474853515625}],["Imaginary unit in `K`. Meant to be set to `0` for `K = ‚Ñù`. ",{"type":"{K : semiOutParam (Type u_1)} ‚Üí [self : IsROrC K] ‚Üí K","name":"IsROrC.I","isProp":false,"docString":"Imaginary unit in `K`. Meant to be set to `0` for `K = ‚Ñù`. ","distance":1.9959271576205888099053709083818830549716949462890625}],["Default definition of `min`. ",{"type":"{Œ± : Type u} ‚Üí [inst : LE Œ±] ‚Üí [inst : DecidableRel fun x x_1 => x ‚â§ x_1] ‚Üí Œ± ‚Üí Œ± ‚Üí Œ±","name":"minDefault","isProp":false,"docString":"Default definition of `min`. ","distance":1.9967732431480127441858485326520167291164398193359375}],["The highest regular priority for spawned tasks: `8`.\n\nSpawning a task with a priority higher than `Task.Priority.max` is not an error but\nwill spawn a dedicated worker for the task, see `Task.Priority.dedicated`.\nRegular priority tasks are placed in a thread pool and worked on according to the priority order.\n",{"type":"Task.Priority","name":"Task.Priority.max","isProp":false,"docString":"The highest regular priority for spawned tasks: `8`.\n\nSpawning a task with a priority higher than `Task.Priority.max` is not an error but\nwill spawn a dedicated worker for the task, see `Task.Priority.dedicated`.\nRegular priority tasks are placed in a thread pool and worked on according to the priority order.\n","distance":1.9978731547998374029617707492434419691562652587890625}],["The orthogonal projection of `y` on `U` minimizes the distance `‚Äñy - x‚Äñ` for `x ‚àà U`. ",{"type":"‚àÄ {ùïú : Type u_1} {E : Type u_2} [inst : IsROrC ùïú] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace ùïú E]\n  {U : Submodule ùïú E} [inst_3 : HasOrthogonalProjection U] (y : E), ‚Äñy - ‚Üë((orthogonalProjection U) y)‚Äñ = ‚®Ö x, ‚Äñy - ‚Üëx‚Äñ","name":"orthogonalProjection_minimal","isProp":true,"docString":"The orthogonal projection of `y` on `U` minimizes the distance `‚Äñy - x‚Äñ` for `x ‚àà U`. ","distance":1.9990875093676165885625550799886696040630340576171875}],["A `PreconnectedSpace` version of `isPreconnected.constant` ",{"type":"‚àÄ {Œ± : Type u} [inst : TopologicalSpace Œ±] {Y : Type u_3} [inst_1 : TopologicalSpace Y] [inst_2 : DiscreteTopology Y],\n  PreconnectedSpace Œ± ‚Üí ‚àÄ {f : Œ± ‚Üí Y}, Continuous f ‚Üí ‚àÄ {x y : Œ±}, f x = f y","name":"PreconnectedSpace.constant","isProp":true,"docString":"A `PreconnectedSpace` version of `isPreconnected.constant` ","distance":2.000984757456261586838763832929544150829315185546875}],["A solution is `1` or `-1` if and only if `y = 0`. ",{"type":"‚àÄ {d : ‚Ñ§} {a : Pell.Solution‚ÇÅ d}, a = 1 ‚à® a = -1 ‚Üî Pell.Solution‚ÇÅ.y a = 0","name":"Pell.Solution‚ÇÅ.eq_one_or_neg_one_iff_y_eq_zero","isProp":true,"docString":"A solution is `1` or `-1` if and only if `y = 0`. ","distance":2.001146526623480692563816774054430425167083740234375}],["Auxiliary function for `getRawProjections`.\nGenerates the default projection, and looks for a custom projection declared by the user,\nand replaces the default projection with the custom one, if it can find it. ",{"type":"Lean.Name ‚Üí Simps.ParsedProjectionData ‚Üí List Lean.Level ‚Üí Lean.CoreM Simps.ParsedProjectionData","name":"Simps.findProjection","isProp":false,"docString":"Auxiliary function for `getRawProjections`.\nGenerates the default projection, and looks for a custom projection declared by the user,\nand replaces the default projection with the custom one, if it can find it. ","distance":2.0013463477935662382378723123110830783843994140625}],["The rank of a module as a natural number.\n\nDefined by convention to be `0` if the space has infinite rank.\n\nFor a vector space `M` over a field `R`, this is the same as the finite dimension\nof `M` over `R`.\n",{"type":"(R : Type u_1) ‚Üí (M : Type u_2) ‚Üí [inst : Semiring R] ‚Üí [inst_1 : AddCommGroup M] ‚Üí [inst : Module R M] ‚Üí ‚Ñï","name":"FiniteDimensional.finrank","isProp":false,"docString":"The rank of a module as a natural number.\n\nDefined by convention to be `0` if the space has infinite rank.\n\nFor a vector space `M` over a field `R`, this is the same as the finite dimension\nof `M` over `R`.\n","distance":2.002552921366338001263329715584404766559600830078125}],["Retrieve all names in the environment satisfying a predicate.\n",{"type":"(Lean.Name ‚Üí Bool) ‚Üí Lean.CoreM (Array Lean.Name)","name":"allNames","isProp":false,"docString":"Retrieve all names in the environment satisfying a predicate.\n","distance":2.00277508760147693323006024002097547054290771484375}],["The minimum operation: `min x y`. ",{"type":"{Œ± : Type u} ‚Üí [self : Min Œ±] ‚Üí Œ± ‚Üí Œ± ‚Üí Œ±","name":"Min.min","isProp":false,"docString":"The minimum operation: `min x y`. ","distance":2.004556477435631922645598024246282875537872314453125}],["The default priority `default = 1000`, which is used when no priority is set. ",{"type":"Lean.ParserDescr","name":"prioDefault","isProp":false,"docString":"The default priority `default = 1000`, which is used when no priority is set. ","distance":2.007183182243943431188881731941364705562591552734375}],["Semigroup homomorphism between the function spaces `I ‚Üí Œ±` and `I ‚Üí Œ≤`, induced by a semigroup\nhomomorphism `f` between `Œ±` and `Œ≤`. ",{"type":"{Œ± : Type u_3} ‚Üí {Œ≤ : Type u_4} ‚Üí [inst : Mul Œ±] ‚Üí [inst_1 : Mul Œ≤] ‚Üí (Œ± ‚Üí‚Çô* Œ≤) ‚Üí (I : Type u_5) ‚Üí (I ‚Üí Œ±) ‚Üí‚Çô* I ‚Üí Œ≤","name":"MulHom.compLeft","isProp":false,"docString":"Semigroup homomorphism between the function spaces `I ‚Üí Œ±` and `I ‚Üí Œ≤`, induced by a semigroup\nhomomorphism `f` between `Œ±` and `Œ≤`. ","distance":2.00774307328433820885038585402071475982666015625}],["Tests whether `declName` has the `@[simp]` attribute in `env`. ",{"type":"Lean.Environment ‚Üí Lean.Name ‚Üí Bool","name":"hasSimpAttribute","isProp":false,"docString":"Tests whether `declName` has the `@[simp]` attribute in `env`. ","distance":2.008015730259737896545857438468374311923980712890625}]]