[["Returns the \"sign\" of the integer as another integer: `1` for positive numbers,\n`-1` for negative numbers, and `0` for `0`.\n",{"type":"ℤ → ℤ","name":"Int.sign","isProp":false,"docString":"Returns the \"sign\" of the integer as another integer: `1` for positive numbers,\n`-1` for negative numbers, and `0` for `0`.\n","distance":1.950752128998553214245248454972170293331146240234375}],[" For any inner product space `(E, ⟨·, ·⟩)` over commutative scalar type `𝕜`, ⟨0, x⟩ = 0 for all `x ∈ E`.",{"type":"∀ {𝕜 : Type u_1} {E : Type u_2} [inst : RCLike 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  (x : E), ⟪0, x⟫_𝕜 = 0","name":"inner_zero_left","isProp":true,"docString":" For any inner product space `(E, ⟨·, ·⟩)` over commutative scalar type `𝕜`, ⟨0, x⟩ = 0 for all `x ∈ E`.","distance":1.9717856620212084184373679818236269056797027587890625}],["This theorem states that for any type `α` equipped with a Bornology structure and assumed to be a Bounded Space, the filter of cobounded sets in this Bornology is the bottom filter. In other words, in a bounded space, there are no cobounded sets in the corresponding Bornology, or the concept of cobounded sets becomes trivial.",{"type":"∀ (α : Type u_2) [inst : Bornology α] [inst_1 : BoundedSpace α], Bornology.cobounded α = ⊥","name":"Bornology.cobounded_eq_bot","isProp":true,"docString":"This theorem states that for any type `α` equipped with a Bornology structure and assumed to be a Bounded Space, the filter of cobounded sets in this Bornology is the bottom filter. In other words, in a bounded space, there are no cobounded sets in the corresponding Bornology, or the concept of cobounded sets becomes trivial.","distance":1.9634743183938538901855963558773510158061981201171875}],["The default priority for spawned tasks, also the lowest priority: `0`. ",{"type":"Task.Priority","name":"Task.Priority.default","isProp":false,"docString":"The default priority for spawned tasks, also the lowest priority: `0`. ","distance":1.9516375648417880750429276304203085601329803466796875}],[" For any nontrivially normed field `𝕜`, normed additive commutative group `E`, normed space `E` over `𝕜`, and topological space `H`, the function `I` from `𝕜` to `E` defined in a Model With Corners `I` of types `𝕜`, `E`, and `H` is uniquely differentiable on its entire range.",{"type":"∀ {𝕜 : Type u_1} [inst : NontriviallyNormedField 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E] {H : Type u_3} [inst_3 : TopologicalSpace H] (I : ModelWithCorners 𝕜 E H),\n  UniqueDiffOn 𝕜 (Set.range ↑I)","name":"ModelWithCorners.unique_diff","isProp":true,"docString":" For any nontrivially normed field `𝕜`, normed additive commutative group `E`, normed space `E` over `𝕜`, and topological space `H`, the function `I` from `𝕜` to `E` defined in a Model With Corners `I` of types `𝕜`, `E`, and `H` is uniquely differentiable on its entire range.","distance":1.9750110675086161027280695634544827044010162353515625}],["This theorem states that for any topological space `α` and any discrete topological space `Y`, if `α` is preconnected and `f` is a continuous function from `α` to `Y`, then the function `f` will produce the same output for any two inputs `x` and `y` from `α`. This is a version of `isPreconnected.constant` theorem specialized for `PreconnectedSpace`.",{"type":"∀ {α : Type u} [inst : TopologicalSpace α] {Y : Type u_3} [inst_1 : TopologicalSpace Y] [inst_2 : DiscreteTopology Y],\n  PreconnectedSpace α → ∀ {f : α → Y}, Continuous f → ∀ {x y : α}, f x = f y","name":"PreconnectedSpace.constant","isProp":true,"docString":"This theorem states that for any topological space `α` and any discrete topological space `Y`, if `α` is preconnected and `f` is a continuous function from `α` to `Y`, then the function `f` will produce the same output for any two inputs `x` and `y` from `α`. This is a version of `isPreconnected.constant` theorem specialized for `PreconnectedSpace`.","distance":1.968672696635179075741461929283104836940765380859375}],["Default definition of `min`. ",{"type":"{α : Type u} → [inst : LE α] → [inst : DecidableRel fun x x_1 => x ≤ x_1] → α → α → α","name":"minDefault","isProp":false,"docString":"Default definition of `min`. ","distance":1.9571444933996848813961833002394996583461761474609375}],["Checks that `id` has not already been `#align`ed or `#noalign`ed. ",{"type":"{m : Type → Type} → [inst : Monad m] → [inst : Lean.MonadEnv m] → [inst : Lean.MonadError m] → Lean.Name → m Unit","name":"Mathlib.Prelude.Rename.ensureUnused","isProp":false,"docString":"Checks that `id` has not already been `#align`ed or `#noalign`ed. ","distance":1.9612451939361410513384953446802683174610137939453125}],["The highest regular priority for spawned tasks: `8`.\n\nSpawning a task with a priority higher than `Task.Priority.max` is not an error but\nwill spawn a dedicated worker for the task, see `Task.Priority.dedicated`.\nRegular priority tasks are placed in a thread pool and worked on according to the priority order.\n",{"type":"Task.Priority","name":"Task.Priority.max","isProp":false,"docString":"The highest regular priority for spawned tasks: `8`.\n\nSpawning a task with a priority higher than `Task.Priority.max` is not an error but\nwill spawn a dedicated worker for the task, see `Task.Priority.dedicated`.\nRegular priority tasks are placed in a thread pool and worked on according to the priority order.\n","distance":1.96309103915827787290027117705903947353363037109375}],["The minimum operation: `min x y`. ",{"type":"{α : Type u} → [self : Min α] → α → α → α","name":"Min.min","isProp":false,"docString":"The minimum operation: `min x y`. ","distance":1.96446015968192622125343405059538781642913818359375}],["**Minimum principle** for concave functions on an interval. If a function `f` is concave on the\ninterval `[x, y]`, then the eventual minimum of `f` on `[x, y]` is at `x` or `y`. ",{"type":"∀ {𝕜 : Type u_1} {β : Type u_4} [inst : LinearOrderedField 𝕜] [inst_1 : LinearOrderedAddCommGroup β]\n  [inst_2 : Module 𝕜 β] [inst_3 : OrderedSMul 𝕜 β] {f : 𝕜 → β} {x y z : 𝕜},\n  ConcaveOn 𝕜 (Set.Icc x y) f → z ∈ Set.Icc x y → min (f x) (f y) ≤ f z","name":"ConcaveOn.min_le_of_mem_Icc","isProp":true,"docString":"**Minimum principle** for concave functions on an interval. If a function `f` is concave on the\ninterval `[x, y]`, then the eventual minimum of `f` on `[x, y]` is at `x` or `y`. ","distance":1.9648577309625860909392258690786547958850860595703125}],["The default priority `default = 1000`, which is used when no priority is set. ",{"type":"Lean.ParserDescr","name":"prioDefault","isProp":false,"docString":"The default priority `default = 1000`, which is used when no priority is set. ","distance":1.966144458975023656677194594522006809711456298828125}],["A solution is `1` or `-1` if and only if `y = 0`. ",{"type":"∀ {d : ℤ} {a : Pell.Solution₁ d}, a = 1 ∨ a = -1 ↔ Pell.Solution₁.y a = 0","name":"Pell.Solution₁.eq_one_or_neg_one_iff_y_eq_zero","isProp":true,"docString":"A solution is `1` or `-1` if and only if `y = 0`. ","distance":1.96743041367110294004305615089833736419677734375}],["**Minimum principle** for concave functions on a segment. If a function `f` is concave on the\nsegment `[x, y]`, then the eventual minimum of `f` on `[x, y]` is at `x` or `y`. ",{"type":"∀ {𝕜 : Type u_1} {E : Type u_2} {β : Type u_4} [inst : LinearOrderedField 𝕜] [inst_1 : AddCommGroup E]\n  [inst_2 : LinearOrderedAddCommGroup β] [inst_3 : Module 𝕜 E] [inst_4 : Module 𝕜 β] [inst_5 : OrderedSMul 𝕜 β]\n  {f : E → β} {x y z : E}, ConcaveOn 𝕜 (segment 𝕜 x y) f → z ∈ segment 𝕜 x y → min (f x) (f y) ≤ f z","name":"ConcaveOn.min_le_of_mem_segment","isProp":true,"docString":"**Minimum principle** for concave functions on a segment. If a function `f` is concave on the\nsegment `[x, y]`, then the eventual minimum of `f` on `[x, y]` is at `x` or `y`. ","distance":1.96764097650581337717312635504640638828277587890625}],["`toNNReal x` returns `x` if it is real, otherwise 0. ",{"type":"ENNReal → NNReal","name":"ENNReal.toNNReal","isProp":false,"docString":"`toNNReal x` returns `x` if it is real, otherwise 0. ","distance":1.9679546468583584140077391566592268645763397216796875}],["The rank of a module as a natural number.\n\nDefined by convention to be `0` if the space has infinite rank.\n\nFor a vector space `M` over a field `R`, this is the same as the finite dimension\nof `M` over `R`.\n",{"type":"(R : Type u_1) → (M : Type u_2) → [inst : Semiring R] → [inst_1 : AddCommGroup M] → [inst : Module R M] → ℕ","name":"FiniteDimensional.finrank","isProp":false,"docString":"The rank of a module as a natural number.\n\nDefined by convention to be `0` if the space has infinite rank.\n\nFor a vector space `M` over a field `R`, this is the same as the finite dimension\nof `M` over `R`.\n","distance":1.9681427655866665649142532856785692274570465087890625}],["The value `BoxIntegral.IntegrationParams.GP = ⊥`\n(`bRiemann = false`, `bHenstock = true`, `bDistortion = true`)\ncorresponds to a generalization of the Henstock integral such that the Divergence theorem holds true\nwithout additional integrability assumptions, see the module docstring for details. ",{"type":"Inhabited BoxIntegral.IntegrationParams","name":"BoxIntegral.IntegrationParams.instInhabitedIntegrationParams","isProp":false,"docString":"The value `BoxIntegral.IntegrationParams.GP = ⊥`\n(`bRiemann = false`, `bHenstock = true`, `bDistortion = true`)\ncorresponds to a generalization of the Henstock integral such that the Divergence theorem holds true\nwithout additional integrability assumptions, see the module docstring for details. ","distance":1.9684529262348802181037399350316263735294342041015625}],["Imaginary unit in `K`. Meant to be set to `0` for `K = ℝ`. ",{"type":"{K : semiOutParam (Type u_1)} → [self : IsROrC K] → K","name":"IsROrC.I","isProp":false,"docString":"Imaginary unit in `K`. Meant to be set to `0` for `K = ℝ`. ","distance":1.969598687138701453847033917554654181003570556640625}],["Characterization of minimizers for the projection on a convex set in a real inner product\nspace. ",{"type":"∀ {F : Type u_3} [inst : NormedAddCommGroup F] [inst_1 : InnerProductSpace ℝ F] {K : Set F},\n  Convex ℝ K → ∀ {u v : F}, v ∈ K → (‖u - v‖ = ⨅ w, ‖u - ↑w‖ ↔ ∀ w ∈ K, ⟪u - v, w - v⟫_ℝ ≤ 0)","name":"norm_eq_iInf_iff_real_inner_le_zero","isProp":true,"docString":"Characterization of minimizers for the projection on a convex set in a real inner product\nspace. ","distance":1.971173819635022805840662840637378394603729248046875}],["Helper function for `#long_names` and `#long_instances`. ",{"type":"Std.HashMap Lean.Name (Array Lean.Name) → IO Unit","name":"printNameHashMap","isProp":false,"docString":"Helper function for `#long_names` and `#long_instances`. ","distance":1.9712543496644006069118404411710798740386962890625}],["The seminorm controls the Schwartz estimate for any fixed `x`.\n\nVariant for functions `𝓢(ℝ, F)`. ",{"type":"∀ (𝕜 : Type u_1) {F : Type u_5} [inst : NormedAddCommGroup F] [inst_1 : NormedSpace ℝ F] [inst_2 : NormedField 𝕜]\n  [inst_3 : NormedSpace 𝕜 F] [inst_4 : SMulCommClass ℝ 𝕜 F] (k n : ℕ) (f : SchwartzMap ℝ F) (x : ℝ),\n  |x| ^ k * ‖iteratedDeriv n (⇑f) x‖ ≤ (SchwartzMap.seminorm 𝕜 k n) f","name":"SchwartzMap.le_seminorm'","isProp":true,"docString":"The seminorm controls the Schwartz estimate for any fixed `x`.\n\nVariant for functions `𝓢(ℝ, F)`. ","distance":1.971453755851929390274790421244688332080841064453125}],["`SimpleFunc.integral` and `SimpleFunc.lintegral` agree when the integrand has type\n`α →ₛ ℝ≥0∞`. But since `ℝ≥0∞` is not a `NormedSpace`, we need some form of coercion.\nSee `integral_eq_lintegral` for a simpler version. ",{"type":"∀ {α : Type u_1} {E : Type u_2} [inst : NormedAddCommGroup E] {m : MeasurableSpace α} {μ : MeasureTheory.Measure α}\n  {f : MeasureTheory.SimpleFunc α E} {g : E → ENNReal},\n  MeasureTheory.Integrable ↑f →\n    g 0 = 0 →\n      (∀ (b : E), g b ≠ ⊤) →\n        MeasureTheory.SimpleFunc.integral μ (MeasureTheory.SimpleFunc.map (ENNReal.toReal ∘ g) f) =\n          ENNReal.toReal (∫⁻ (a : α), g (↑f a) ∂μ)","name":"MeasureTheory.SimpleFunc.integral_eq_lintegral'","isProp":true,"docString":"`SimpleFunc.integral` and `SimpleFunc.lintegral` agree when the integrand has type\n`α →ₛ ℝ≥0∞`. But since `ℝ≥0∞` is not a `NormedSpace`, we need some form of coercion.\nSee `integral_eq_lintegral` for a simpler version. ","distance":1.9720027218811650993046669100294820964336395263671875}],["`toReal x` returns `x` if it is real, `0` otherwise. ",{"type":"ENNReal → ℝ","name":"ENNReal.toReal","isProp":false,"docString":"`toReal x` returns `x` if it is real, `0` otherwise. ","distance":1.9725016646645261442216678915428929030895233154296875}],["**Minimum principle** for concave functions. If a function `f` is concave on the convex hull of\n`s`, then the eventual minimum of `f` on `convexHull 𝕜 s` lies in `s`. ",{"type":"∀ {𝕜 : Type u_1} {E : Type u_2} {β : Type u_4} [inst : LinearOrderedField 𝕜] [inst_1 : AddCommGroup E]\n  [inst_2 : LinearOrderedAddCommGroup β] [inst_3 : Module 𝕜 E] [inst_4 : Module 𝕜 β] [inst_5 : OrderedSMul 𝕜 β]\n  {s : Set E} {f : E → β}, ConcaveOn 𝕜 ((convexHull 𝕜) s) f → ∀ {x : E}, x ∈ (convexHull 𝕜) s → ∃ y ∈ s, f y ≤ f x","name":"ConcaveOn.exists_le_of_mem_convexHull","isProp":true,"docString":"**Minimum principle** for concave functions. If a function `f` is concave on the convex hull of\n`s`, then the eventual minimum of `f` on `convexHull 𝕜 s` lies in `s`. ","distance":1.9725884336083918668691694620065391063690185546875}]]