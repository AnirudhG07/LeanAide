[["If `task : Task Œ±` then `task.get : Œ±` blocks the current thread until the\nvalue is available, and then returns the result of the task. ",{"type":"{Œ± : Type u} ‚Üí Task Œ± ‚Üí Œ±","name":"Task.get","isProp":false,"docString":"If `task : Task Œ±` then `task.get : Œ±` blocks the current thread until the\nvalue is available, and then returns the result of the task. ","distance":1.9530924764783093028341909302980639040470123291015625}],[" If a function `f : Œ± ‚Üí Œ≤` is eventually constant along a filter `l` on `Œ±`, then the composition `g ‚àò f` of `g : Œ≤ ‚Üí Œ≥` with `f` is also eventually constant along `l`.",{"type":"‚àÄ {Œ± : Type u_1} {Œ≤ : Type u_2} {Œ≥ : Type u_3} {l : Filter Œ±} {f : Œ± ‚Üí Œ≤},\n  Filter.EventuallyConst f l ‚Üí ‚àÄ (g : Œ≤ ‚Üí Œ≥), Filter.EventuallyConst (g ‚àò f) l","name":"Filter.EventuallyConst.comp","isProp":true,"docString":" If a function `f : Œ± ‚Üí Œ≤` is eventually constant along a filter `l` on `Œ±`, then the composition `g ‚àò f` of `g : Œ≤ ‚Üí Œ≥` with `f` is also eventually constant along `l`.","distance":1.9796720714041173838637632798054255545139312744140625}],["This theorem, `neg_zero`, states that for any type `G` that is a member of the `NegZeroClass`, the negation of zero equals zero. In mathematical terms, it means that if `G` has a negation operation and a zero element, then the negation of the zero element is equal to the zero element itself.",{"type":"‚àÄ {G : Type u_1} [inst : NegZeroClass G], -0 = 0","name":"neg_zero","isProp":true,"docString":"This theorem, `neg_zero`, states that for any type `G` that is a member of the `NegZeroClass`, the negation of zero equals zero. In mathematical terms, it means that if `G` has a negation operation and a zero element, then the negation of the zero element is equal to the zero element itself.","distance":1.9855139874709719638445903910906054079532623291015625}],["Construct a function from a default value `H0`, and a function to use if there exists a value\nsatisfying the predicate. ",{"type":"{Œ± : Prop} ‚Üí {p : Œ± ‚Üí Prop} ‚Üí {C : Sort u_1} ‚Üí C ‚Üí ((a : Œ±) ‚Üí p a ‚Üí C) ‚Üí C","name":"Classical.existsCases","isProp":false,"docString":"Construct a function from a default value `H0`, and a function to use if there exists a value\nsatisfying the predicate. ","distance":1.958000362550681217044257209636270999908447265625}],[" If functions `f` and `g` are eventually constant along filter `l` on type `Œ±`, then their composition `x ‚Ü¶ op (f x) (g x)` is also eventually constant along filter `l`, where `op` is a binary operation from `Œ≤` and `Œ≥` to `Œ¥`.",{"type":"‚àÄ {Œ± : Type u_1} {Œ≤ : Type u_2} {Œ≥ : Type u_3} {Œ¥ : Type u_4} {l : Filter Œ±} {f : Œ± ‚Üí Œ≤} {g : Œ± ‚Üí Œ≥},\n  Filter.EventuallyConst f l ‚Üí\n    ‚àÄ (op : Œ≤ ‚Üí Œ≥ ‚Üí Œ¥), Filter.EventuallyConst g l ‚Üí Filter.EventuallyConst (fun x => op (f x) (g x)) l","name":"Filter.EventuallyConst.comp‚ÇÇ","isProp":true,"docString":" If functions `f` and `g` are eventually constant along filter `l` on type `Œ±`, then their composition `x ‚Ü¶ op (f x) (g x)` is also eventually constant along filter `l`, where `op` is a binary operation from `Œ≤` and `Œ≥` to `Œ¥`.","distance":1.984874450220534214395229355432093143463134765625}],["The theorem `RatFunc.num_zero` states that for any type `K` that is a field, the numerator of the zero rational function (which is represented as `RatFunc.num 0`) is zero. In other words, if you have a rational function which is zero, then its numerator is also zero. This is applicable in any field `K`.",{"type":"‚àÄ {K : Type u} [inst : Field K], RatFunc.num 0 = 0","name":"RatFunc.num_zero","isProp":true,"docString":"The theorem `RatFunc.num_zero` states that for any type `K` that is a field, the numerator of the zero rational function (which is represented as `RatFunc.num 0`) is zero. In other words, if you have a rational function which is zero, then its numerator is also zero. This is applicable in any field `K`.","distance":1.987766860462028883915763799450360238552093505859375}],["`spawn fn : Task Œ±` constructs and immediately launches a new task for\nevaluating the function `fn () : Œ±` asynchronously.\n\n`prio`, if provided, is the priority of the task.\n",{"type":"{Œ± : Type u} ‚Üí (Unit ‚Üí Œ±) ‚Üí optParam Task.Priority Task.Priority.default ‚Üí Task Œ±","name":"Task.spawn","isProp":false,"docString":"`spawn fn : Task Œ±` constructs and immediately launches a new task for\nevaluating the function `fn () : Œ±` asynchronously.\n\n`prio`, if provided, is the priority of the task.\n","distance":1.96437282691621017960414974368177354335784912109375}],["Construct a `Zero C` for a category with a zero object.\nThis can not be a global instance as it will trigger for every `Zero C` typeclass search.\n",{"type":"(C : Type u) ‚Üí [inst : CategoryTheory.Category.{v, u} C] ‚Üí [inst : CategoryTheory.Limits.HasZeroObject C] ‚Üí Zero C","name":"CategoryTheory.Limits.HasZeroObject.zero'","isProp":false,"docString":"Construct a `Zero C` for a category with a zero object.\nThis can not be a global instance as it will trigger for every `Zero C` typeclass search.\n","distance":1.966266533836134033919051944394595921039581298828125}],["`f : Œ± ‚Üí+* Œ≤` has a trivial codomain iff its range is `{0}`. ",{"type":"‚àÄ {Œ± : Type u_2} {Œ≤ : Type u_3} {x : NonAssocSemiring Œ±} {x_1 : NonAssocSemiring Œ≤} (f : Œ± ‚Üí+* Œ≤),\n  0 = 1 ‚Üî Set.range ‚áëf = {0}","name":"RingHom.codomain_trivial_iff_range_eq_singleton_zero","isProp":true,"docString":"`f : Œ± ‚Üí+* Œ≤` has a trivial codomain iff its range is `{0}`. ","distance":1.96698079021046456915655653574503958225250244140625}],["Gadget for optional parameter support.\n\nA binder like `(x : Œ± := default)` in a declaration is syntax sugar for\n`x : optParam Œ± default`, and triggers the elaborator to attempt to use\n`default` to supply the argument if it is not supplied.\n",{"type":"(Œ± : Sort u) ‚Üí Œ± ‚Üí Sort u","name":"optParam","isProp":false,"docString":"Gadget for optional parameter support.\n\nA binder like `(x : Œ± := default)` in a declaration is syntax sugar for\n`x : optParam Œ± default`, and triggers the elaborator to attempt to use\n`default` to supply the argument if it is not supplied.\n","distance":1.9670839444675969343023780311341397464275360107421875}],["Retrieves the value of `a : Part Œ±` if it exists, and return the provided default value\notherwise. ",{"type":"{Œ± : Type u_1} ‚Üí (a : Part Œ±) ‚Üí [inst : Decidable a.Dom] ‚Üí Œ± ‚Üí Œ±","name":"Part.getOrElse","isProp":false,"docString":"Retrieves the value of `a : Part Œ±` if it exists, and return the provided default value\notherwise. ","distance":1.9695868659556854396441849530674517154693603515625}],["Computes `‚åämax 0 (log‚ÇÇ n)‚åã`.\n\n`log2 0 = log2 1 = 0`, `log2 2 = 1`, ..., `log2 (2^i) = i`, etc.\n",{"type":"‚Ñï ‚Üí ‚Ñï","name":"Nat.log2","isProp":false,"docString":"Computes `‚åämax 0 (log‚ÇÇ n)‚åã`.\n\n`log2 0 = log2 1 = 0`, `log2 2 = 1`, ..., `log2 (2^i) = i`, etc.\n","distance":1.9707434181280605312025500097661279141902923583984375}],["An estimator for the priority of the key.\n(We will assume we have `[‚àÄ a : Œ±, Estimator (prio a) (Œµ a)]`.) ",{"type":"{Œ± : Sort u_1} ‚Üí {œâ : Type u_2} ‚Üí {prio : Œ± ‚Üí Thunk œâ} ‚Üí {Œµ : Œ± ‚Üí Type} ‚Üí (self : BestFirstNode prio Œµ) ‚Üí Œµ self.key","name":"BestFirstNode.estimator","isProp":false,"docString":"An estimator for the priority of the key.\n(We will assume we have `[‚àÄ a : Œ±, Estimator (prio a) (Œµ a)]`.) ","distance":1.9727773654608762310402880757465027272701263427734375}],["The name of the global preprocessor, used in trace output. ",{"type":"Linarith.GlobalPreprocessor ‚Üí String","name":"Linarith.GlobalPreprocessor.name","isProp":false,"docString":"The name of the global preprocessor, used in trace output. ","distance":1.9739069300715501587006883710273541510105133056640625}],["**Maximum principle** for convex functions on a segment. If a function `f` is convex on the\nsegment `[x, y]`, then the eventual maximum of `f` on `[x, y]` is at `x` or `y`. ",{"type":"‚àÄ {ùïú : Type u_1} {E : Type u_2} {Œ≤ : Type u_4} [inst : LinearOrderedField ùïú] [inst_1 : AddCommGroup E]\n  [inst_2 : LinearOrderedAddCommGroup Œ≤] [inst_3 : Module ùïú E] [inst_4 : Module ùïú Œ≤] [inst_5 : OrderedSMul ùïú Œ≤]\n  {f : E ‚Üí Œ≤} {x y z : E}, ConvexOn ùïú (segment ùïú x y) f ‚Üí z ‚àà segment ùïú x y ‚Üí f z ‚â§ max (f x) (f y)","name":"ConvexOn.le_max_of_mem_segment","isProp":true,"docString":"**Maximum principle** for convex functions on a segment. If a function `f` is convex on the\nsegment `[x, y]`, then the eventual maximum of `f` on `[x, y]` is at `x` or `y`. ","distance":1.9741104236409403593910383278853259980678558349609375}],["Given a point `x` in a product space `Œ† (n : ‚Ñï), E n`, and `s` a subset of this space, then\n`longestPrefix x s` if the largest `n` for which there is an element of `s` having the same\nprefix of length `n` as `x`. If there is no such `n`, use `0` by convention. ",{"type":"{E : ‚Ñï ‚Üí Type u_2} ‚Üí ((n : ‚Ñï) ‚Üí E n) ‚Üí Set ((n : ‚Ñï) ‚Üí E n) ‚Üí ‚Ñï","name":"PiNat.longestPrefix","isProp":false,"docString":"Given a point `x` in a product space `Œ† (n : ‚Ñï), E n`, and `s` a subset of this space, then\n`longestPrefix x s` if the largest `n` for which there is an element of `s` having the same\nprefix of length `n` as `x`. If there is no such `n`, use `0` by convention. ","distance":1.9752772078823042090078843102673999965190887451171875}],["Name to use for the declaration for a type that is `Equiv` to the given type. ",{"type":"Mathlib.ProxyType.ProxyEquivConfig ‚Üí Lean.Name","name":"Mathlib.ProxyType.ProxyEquivConfig.proxyName","isProp":false,"docString":"Name to use for the declaration for a type that is `Equiv` to the given type. ","distance":1.976142811982821712035729433409869670867919921875}],["Produce a string for a given `InjectiveFunction`.\nThe output is of the form `[x‚ÇÄ ‚Ü¶ f x‚ÇÄ, .. x‚Çô ‚Ü¶ f x‚Çô, x ‚Ü¶ x]`.\nUnlike for `TotalFunction`, the default value is not a constant\nbut the identity function.\n",{"type":"{Œ± : Type u} ‚Üí [inst : Repr Œ±] ‚Üí SlimCheck.InjectiveFunction Œ± ‚Üí String","name":"SlimCheck.InjectiveFunction.repr","isProp":false,"docString":"Produce a string for a given `InjectiveFunction`.\nThe output is of the form `[x‚ÇÄ ‚Ü¶ f x‚ÇÄ, .. x‚Çô ‚Ü¶ f x‚Çô, x ‚Ü¶ x]`.\nUnlike for `TotalFunction`, the default value is not a constant\nbut the identity function.\n","distance":1.9779377730411493718776227979105897247791290283203125}],["`bind x f` does a monad \"bind\" operation on the task `x` with function `f`:\nthat is, it constructs (and immediately launches) a new task which will wait\nfor the value of `x` to be available and then calls `f` on the result,\nresulting in a new task which is then run for a result.\n\n`prio`, if provided, is the priority of the task.\n",{"type":"{Œ± : Type u} ‚Üí {Œ≤ : Type v} ‚Üí Task Œ± ‚Üí (Œ± ‚Üí Task Œ≤) ‚Üí optParam Task.Priority Task.Priority.default ‚Üí Task Œ≤","name":"Task.bind","isProp":false,"docString":"`bind x f` does a monad \"bind\" operation on the task `x` with function `f`:\nthat is, it constructs (and immediately launches) a new task which will wait\nfor the value of `x` to be available and then calls `f` on the result,\nresulting in a new task which is then run for a result.\n\n`prio`, if provided, is the priority of the task.\n","distance":1.9785367240247071496384023703285492956638336181640625}],["The default priority `default = 1000`, which is used when no priority is set. ",{"type":"Lean.ParserDescr","name":"prioDefault","isProp":false,"docString":"The default priority `default = 1000`, which is used when no priority is set. ","distance":1.978823491157346570190611600992269814014434814453125}],["`x.iget i` takes the component of `x` designated by `i` if any is or returns\na default value ",{"type":"{P : PFunctor.{u}} ‚Üí [inst : DecidableEq P.A] ‚Üí {Œ± : Type u_1} ‚Üí [inst : Inhabited Œ±] ‚Üí ‚ÜëP Œ± ‚Üí PFunctor.Idx P ‚Üí Œ±","name":"PFunctor.Obj.iget","isProp":false,"docString":"`x.iget i` takes the component of `x` designated by `i` if any is or returns\na default value ","distance":1.979228669108775928719978765002451837062835693359375}],["`sigmaFiberEquiv f` for `f : Œ± ‚Üí Œ≤` is the natural equivalence between\nthe type of all fibres of `f` and the total space `Œ±`. ",{"type":"{Œ± : Type u_1} ‚Üí {Œ≤ : Type u_2} ‚Üí (f : Œ± ‚Üí Œ≤) ‚Üí (y : Œ≤) √ó { x // f x = y } ‚âÉ Œ±","name":"Equiv.sigmaFiberEquiv","isProp":false,"docString":"`sigmaFiberEquiv f` for `f : Œ± ‚Üí Œ≤` is the natural equivalence between\nthe type of all fibres of `f` and the total space `Œ±`. ","distance":1.979616374651964161301975764217786490917205810546875}],["Display a widget panel allowing to generate a `gcongr` call with holes specified by selecting\nsubexpressions in the goal.",{"type":"Lean.ParserDescr","name":"tacticGcongr?","isProp":false,"docString":"Display a widget panel allowing to generate a `gcongr` call with holes specified by selecting\nsubexpressions in the goal.","distance":1.979767736345687811905236230813898146152496337890625}],["The resulting value of type `Œ≤`. The input `x : Œ±` is a parameter to\nthe type class, so the value of type `Œ≤` may possibly depend on additional\ntypeclasses on `x`. ",{"type":"{Œ± : Sort u} ‚Üí (x : Œ±) ‚Üí {Œ≤ : Sort v} ‚Üí [self : CoeDep Œ± x Œ≤] ‚Üí Œ≤","name":"CoeDep.coe","isProp":false,"docString":"The resulting value of type `Œ≤`. The input `x : Œ±` is a parameter to\nthe type class, so the value of type `Œ≤` may possibly depend on additional\ntypeclasses on `x`. ","distance":1.9799066116847303664627588659641332924365997314453125}]]