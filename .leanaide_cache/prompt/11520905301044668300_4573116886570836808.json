[["Any nonzero natural number is the product of an odd part `m` and a power of\ntwo `2 ^ k`. ",{"type":"∀ {n : ℕ}, n ≠ 0 → ∃ k m, Odd m ∧ n = 2 ^ k * m","name":"Nat.exists_eq_two_pow_mul_odd","isProp":true,"docString":"Any nonzero natural number is the product of an odd part `m` and a power of\ntwo `2 ^ k`. ","distance":0.73901974547654869507340436030062846839427947998046875}],[" An integer is even if and only if it is not odd, where an integer is even if it can be expressed as the sum of two identical integers, and odd if it can be written in the form 2*k + 1 for some integer k.",{"type":"∀ {n : ℤ}, Even n ↔ ¬Odd n","name":"Int.even_iff_not_odd","isProp":true,"docString":" An integer is even if and only if it is not odd, where an integer is even if it can be expressed as the sum of two identical integers, and odd if it can be written in the form 2*k + 1 for some integer k.","distance":0.5311542350324192085508911986835300922393798828125}],["This theorem states that for every natural number `n`, `n` is even if and only if `n` is not odd. Here, a number is defined as being even if it can be expressed as the sum of two identical numbers, and as being odd if it can be represented as `2*k + 1` for some natural number `k`. In other words, a natural number cannot be both even and odd simultaneously.",{"type":"∀ {n : ℕ}, Even n ↔ ¬Odd n","name":"Nat.even_iff_not_odd","isProp":true,"docString":"This theorem states that for every natural number `n`, `n` is even if and only if `n` is not odd. Here, a number is defined as being even if it can be expressed as the sum of two identical numbers, and as being odd if it can be represented as `2*k + 1` for some natural number `k`. In other words, a natural number cannot be both even and odd simultaneously.","distance":0.7226198423824217176303363885381259024143218994140625}],["An element `a` of a semiring is odd if there exists `k` such `a = 2*k + 1`. ",{"type":"{α : Type u_2} → [inst : Semiring α] → α → Prop","name":"Odd","isProp":false,"docString":"An element `a` of a semiring is odd if there exists `k` such `a = 2*k + 1`. ","distance":0.8468385083006919611392504521063528954982757568359375}],[" Every integer can be classified as even (being expressible as 2*r for some integer r) or odd (being expressible as 2*k + 1 for some integer k).",{"type":"∀ (n : ℤ), Even n ∨ Odd n","name":"Int.even_or_odd","isProp":true,"docString":" Every integer can be classified as even (being expressible as 2*r for some integer r) or odd (being expressible as 2*k + 1 for some integer k).","distance":0.58073197828681255572291775024496018886566162109375}],["This theorem states that for every integer `n`, `n` is either even or odd. In the context of the defined terms, an integer is even if it can be expressed as twice some integer, i.e., `n = 2*r` for some integer `r`. On the other hand, an integer is odd if it can be expressed in the form `n = 2*k + 1` for some integer `k`. This theorem is a reflection of the fundamental dichotomy of integers into even and odd numbers.",{"type":"∀ (n : ℤ), Even n ∨ Odd n","name":"Int.even_or_odd","isProp":true,"docString":"This theorem states that for every integer `n`, `n` is either even or odd. In the context of the defined terms, an integer is even if it can be expressed as twice some integer, i.e., `n = 2*r` for some integer `r`. On the other hand, an integer is odd if it can be expressed in the form `n = 2*k + 1` for some integer `k`. This theorem is a reflection of the fundamental dichotomy of integers into even and odd numbers.","distance":0.7275147526271095177463621439528651535511016845703125}],["A `k`-smooth number can be written as a square times a product of distinct primes `< k`. ",{"type":"∀ {n k : ℕ}, n ∈ k.smoothNumbers → ∃ s ∈ k.primesBelow.powerset, ∃ m, n = m ^ 2 * s.prod id","name":"Nat.eq_prod_primes_mul_sq_of_mem_smoothNumbers","isProp":true,"docString":"A `k`-smooth number can be written as a square times a product of distinct primes `< k`. ","distance":0.91586621660209821538245478222961537539958953857421875}],["If `n` is even and `a` is even, then `n % a` is even. ",{"type":"∀ {n a : ℕ}, Even n → Even a → Even (n % a)","name":"Even.mod_even","isProp":true,"docString":"If `n` is even and `a` is even, then `n % a` is even. ","distance":0.97111433976592298478180964593775570392608642578125}],["If `a` is even, then `n` is odd iff `n % a` is odd. ",{"type":"∀ {n a : ℕ}, Even a → (Odd (n % a) ↔ Odd n)","name":"Odd.mod_even_iff","isProp":true,"docString":"If `a` is even, then `n` is odd iff `n % a` is odd. ","distance":0.9802269182522136414803526349714957177639007568359375}],["If `s` is an infinite set of natural numbers and `k > 0`, then `s` contains two elements `m < n`\nthat are equal mod `k`. ",{"type":"∀ {s : Set ℕ}, s.Infinite → ∀ {k : ℕ}, 0 < k → ∃ m ∈ s, ∃ n ∈ s, m < n ∧ m ≡ n [MOD k]","name":"Nat.exists_lt_modEq_of_infinite","isProp":true,"docString":"If `s` is an infinite set of natural numbers and `k > 0`, then `s` contains two elements `m < n`\nthat are equal mod `k`. ","distance":0.9805788881599060147209456772543489933013916015625}],["If `a` is even, then `n` is even iff `n % a` is even. ",{"type":"∀ {n a : ℕ}, Even a → (Even (n % a) ↔ Even n)","name":"Even.mod_even_iff","isProp":true,"docString":"If `a` is even, then `n` is even iff `n % a` is even. ","distance":0.980688986065117784818312429706566035747528076171875}],["A natural number is odd iff it has residue `1` or `3` mod `4`",{"type":"∀ {n : ℕ}, n % 2 = 1 ↔ n % 4 = 1 ∨ n % 4 = 3","name":"Nat.odd_mod_four_iff","isProp":true,"docString":"A natural number is odd iff it has residue `1` or `3` mod `4`","distance":0.9808302010246305879803685456863604485988616943359375}],["If `m` and `n` are natural numbers, then the natural number `m^n` is even\nif and only if `m` is even and `n` is positive. ",{"type":"∀ {m n : ℕ}, Even (m ^ n) ↔ Even m ∧ n ≠ 0","name":"Nat.even_pow","isProp":true,"docString":"If `m` and `n` are natural numbers, then the natural number `m^n` is even\nif and only if `m` is even and `n` is positive. ","distance":0.98396354702980259876454738332540728151798248291015625}],["`2` is not a factor of an odd natural number. ",{"type":"∀ {m n : ℕ}, Odd n → m ∣ n → m ≠ 2","name":"Odd.ne_two_of_dvd_nat","isProp":true,"docString":"`2` is not a factor of an odd natural number. ","distance":0.98806936667806255503165857589920051395893096923828125}],["Strong recursion principle on even and odd numbers: if for all `i : ℕ` we can prove `P (2 * i)`\nfrom `P j` for all `j < 2 * i` and we can prove `P (2 * i + 1)` from `P j` for all `j < 2 * i + 1`,\nthen we have `P n` for all `n : ℕ`. ",{"type":"{P : ℕ → Sort u_1} →\n  ((n : ℕ) → ((k : ℕ) → k < 2 * n → P k) → P (2 * n)) →\n    ((n : ℕ) → ((k : ℕ) → k < 2 * n + 1 → P k) → P (2 * n + 1)) → (n : ℕ) → P n","name":"Nat.evenOddStrongRec","isProp":false,"docString":"Strong recursion principle on even and odd numbers: if for all `i : ℕ` we can prove `P (2 * i)`\nfrom `P j` for all `j < 2 * i` and we can prove `P (2 * i + 1)` from `P j` for all `j < 2 * i + 1`,\nthen we have `P n` for all `n : ℕ`. ","distance":0.99402447589908449199214146574377082288265228271484375}],["`i + k : Fin2 (n + k)` when `i : Fin2 n` and `k : ℕ` ",{"type":"{n : ℕ} → Fin2 n → (k : ℕ) → Fin2 (n + k)","name":"Fin2.add","isProp":false,"docString":"`i + k : Fin2 (n + k)` when `i : Fin2 n` and `k : ℕ` ","distance":0.99935797873613652075874824731727130711078643798828125}],["If `n` is odd and `a` is even, then `n % a` is odd. ",{"type":"∀ {n a : ℕ}, Odd n → Even a → Odd (n % a)","name":"Odd.mod_even","isProp":true,"docString":"If `n` is odd and `a` is even, then `n % a` is odd. ","distance":1.0017997312064910175877230358310043811798095703125}],["Equivalence between the set of natural numbers which are `≥ k` and `ℕ`, given by `n → n - k`. ",{"type":"(k : ℕ) → { n // n ∉ Multiset.range k } ≃ ℕ","name":"notMemRangeEquiv","isProp":false,"docString":"Equivalence between the set of natural numbers which are `≥ k` and `ℕ`, given by `n → n - k`. ","distance":1.0044191457407549705749261192977428436279296875}],["Given a finset equipartitioned into `k` parts, its elements can be enumerated such that\nelements in the same part have congruent indices modulo `k`. ",{"type":"∀ {α : Type u_1} [inst : DecidableEq α] {s : Finset α} {P : Finpartition s},\n  P.IsEquipartition →\n    ∃ f, ∀ (a b : { x // x ∈ s }), P.part ↑a = P.part ↑b ↔ ↑(f a) % P.parts.card = ↑(f b) % P.parts.card","name":"Finpartition.IsEquipartition.exists_partPreservingEquiv","isProp":true,"docString":"Given a finset equipartitioned into `k` parts, its elements can be enumerated such that\nelements in the same part have congruent indices modulo `k`. ","distance":1.0127764989861403055471100742579437792301177978515625}],["We define `m % k` in the same way as for `ℕ`\nexcept that when `m = n * k` we take `m % k = k` This ensures that `m % k` is always positive.\n",{"type":"ℕ+ → ℕ+ → ℕ+","name":"PNat.mod","isProp":false,"docString":"We define `m % k` in the same way as for `ℕ`\nexcept that when `m = n * k` we take `m % k = k` This ensures that `m % k` is always positive.\n","distance":1.0137966641505029574688023785711266100406646728515625}],["Any constant function is even. ",{"type":"∀ {α : Type u_1} {β : Type u_2} [inst : Neg α] (b : β), Function.Even fun x => b","name":"Function.Even.const","isProp":true,"docString":"Any constant function is even. ","distance":1.01566127277504758552595376386307179927825927734375}],["Send `k : Fin (n+1)` to the equally spaced points `k/n` in the unit interval.\n",{"type":"{n : ℕ} → Fin (n + 1) → ↑unitInterval","name":"bernstein.z","isProp":false,"docString":"Send `k : Fin (n+1)` to the equally spaced points `k/n` in the unit interval.\n","distance":1.022530347974654585385678728925995528697967529296875}],["In `Fin n`, all elements are even for odd `n`,\notherwise an element is even iff its `Fin.val` value is even. ",{"type":"∀ {n : ℕ} {k : Fin n}, Even k ↔ Odd n ∨ Even ↑k","name":"Fin.even_iff","isProp":true,"docString":"In `Fin n`, all elements are even for odd `n`,\notherwise an element is even iff its `Fin.val` value is even. ","distance":1.0230273637398592523339857507380656898021697998046875}],["The multisets of size `k` over `Fin n+2` not containing `0`\nare equivalent to those of size `k` over `Fin n+1`,\nas demonstrated by respectively decrementing or incrementing every element of the multiset.\n",{"type":"{n k : ℕ} → { s // 0 ∉ s } ≃ Sym (Fin n.succ) k","name":"Sym.e2","isProp":false,"docString":"The multisets of size `k` over `Fin n+2` not containing `0`\nare equivalent to those of size `k` over `Fin n+1`,\nas demonstrated by respectively decrementing or incrementing every element of the multiset.\n","distance":1.028160775604553212048131172196008265018463134765625}]]