[["an arrow ",{"type":"{V : Type u} ‚Üí [inst : Quiver V] ‚Üí (self : Quiver.Total V) ‚Üí self.left ‚ü∂ self.right","name":"Quiver.Total.hom","isProp":false,"docString":"an arrow ","distance":0.421161786445117536370474908835603855550289154052734375}],[" For any œÉ-finite measurable kernels Œ∑ from Œ≤ to Œ≥ and Œ∫ from Œ± to Œ≤ in probability theory, the composition of Œ∑ and Œ∫ is equal to the product kernel of Œ∫ with Œ∑ viewed as a kernel from Œ± to Œ≥.",{"type":"‚àÄ {Œ± : Type u_1} {Œ≤ : Type u_2} {mŒ± : MeasurableSpace Œ±} {mŒ≤ : MeasurableSpace Œ≤} {Œ≥ : Type u_4}\n  {mŒ≥ : MeasurableSpace Œ≥} (Œ∑ : ‚Ü•(ProbabilityTheory.kernel Œ≤ Œ≥)) [inst : ProbabilityTheory.IsSFiniteKernel Œ∑]\n  (Œ∫ : ‚Ü•(ProbabilityTheory.kernel Œ± Œ≤)) [inst : ProbabilityTheory.IsSFiniteKernel Œ∫],\n  ProbabilityTheory.kernel.comp Œ∑ Œ∫ =\n    ProbabilityTheory.kernel.snd (ProbabilityTheory.kernel.compProd Œ∫ (ProbabilityTheory.kernel.prodMkLeft Œ± Œ∑))","name":"ProbabilityTheory.kernel.comp_eq_snd_compProd","isProp":true,"docString":" For any œÉ-finite measurable kernels Œ∑ from Œ≤ to Œ≥ and Œ∫ from Œ± to Œ≤ in probability theory, the composition of Œ∑ and Œ∫ is equal to the product kernel of Œ∫ with Œ∑ viewed as a kernel from Œ± to Œ≥.","distance":0.51535047384741272669117506666225381195545196533203125}],["The **Chicken McNugget Theorem** states that for any two coprime natural numbers `m` and `n`, both greater than one, the Frobenius number (the largest number that cannot be expressed as a sum of any combination of `m` and `n`) is calculated by the formula `m * n - m - n`.",{"type":"‚àÄ {m n : ‚Ñï}, m.Coprime n ‚Üí 1 < m ‚Üí 1 < n ‚Üí FrobeniusNumber (m * n - m - n) {m, n}","name":"frobeniusNumber_pair","isProp":true,"docString":"The **Chicken McNugget Theorem** states that for any two coprime natural numbers `m` and `n`, both greater than one, the Frobenius number (the largest number that cannot be expressed as a sum of any combination of `m` and `n`) is calculated by the formula `m * n - m - n`.","distance":0.51257345180919944294117840399849228560924530029296875}],["The empty word ",{"type":"{G : Type u_1} ‚Üí\n  [inst : Group G] ‚Üí\n    {A B : Subgroup G} ‚Üí {d : HNNExtension.NormalWord.TransversalPair G A B} ‚Üí HNNExtension.NormalWord d","name":"HNNExtension.NormalWord.empty","isProp":false,"docString":"The empty word ","distance":0.4240659846637424568172036742907948791980743408203125}],[" For any pre-games x and y, the birthday of their sum (x + y) equals the Hessenberg sum of their individual birthdays.",{"type":"‚àÄ (x y : SetTheory.PGame), (x + y).birthday = x.birthday.nadd y.birthday","name":"SetTheory.PGame.birthday_add","isProp":true,"docString":" For any pre-games x and y, the birthday of their sum (x + y) equals the Hessenberg sum of their individual birthdays.","distance":0.53066432266624208313743338294443674385547637939453125}],["This theorem, named `convolution_flip`, states the commutativity of convolution. In the setting where `ùïú` is a nontrivially normed field, `E`, `E'`, and `F` are normed add commutative groups which are normed spaces over `ùïú`, `G` is an additive group with a measure `Œº` that is both add-left-invariant and neg-invariant, and `f` and `g` are measurable functions from `G` to `E` and `E'` respectively, the convolution of `g` and `f` under the flipped linear map `L.flip` is equal to the convolution of `f` and `g` under the linear map `L`. This essentially means that the order of `f` and `g` in the convolution operation can be reversed if the operator `L` is also flipped.",{"type":"‚àÄ {ùïú : Type uùïú} {G : Type uG} {E : Type uE} {E' : Type uE'} {F : Type uF} [inst : NormedAddCommGroup E]\n  [inst_1 : NormedAddCommGroup E'] [inst_2 : NormedAddCommGroup F] {f : G ‚Üí E} {g : G ‚Üí E'}\n  [inst_3 : NontriviallyNormedField ùïú] [inst_4 : NormedSpace ùïú E] [inst_5 : NormedSpace ùïú E'] [inst_6 : NormedSpace ùïú F]\n  (L : E ‚ÜíL[ùïú] E' ‚ÜíL[ùïú] F) [inst_7 : MeasurableSpace G] {Œº : MeasureTheory.Measure G} [inst_8 : NormedSpace ‚Ñù F]\n  [inst_9 : AddCommGroup G] [inst_10 : Œº.IsAddLeftInvariant] [inst_11 : Œº.IsNegInvariant] [inst_12 : MeasurableNeg G]\n  [inst_13 : MeasurableAdd G], convolution g f L.flip Œº = convolution f g L Œº","name":"convolution_flip","isProp":true,"docString":"This theorem, named `convolution_flip`, states the commutativity of convolution. In the setting where `ùïú` is a nontrivially normed field, `E`, `E'`, and `F` are normed add commutative groups which are normed spaces over `ùïú`, `G` is an additive group with a measure `Œº` that is both add-left-invariant and neg-invariant, and `f` and `g` are measurable functions from `G` to `E` and `E'` respectively, the convolution of `g` and `f` under the flipped linear map `L.flip` is equal to the convolution of `f` and `g` under the linear map `L`. This essentially means that the order of `f` and `g` in the convolution operation can be reversed if the operator `L` is also flipped.","distance":0.518254482122975534963416066602803766727447509765625}],["The empty weak sequence ",{"type":"{Œ± : Type u} ‚Üí Stream'.WSeq Œ±","name":"Stream'.WSeq.nil","isProp":false,"docString":"The empty weak sequence ","distance":0.427870725720866651453633267010445706546306610107421875}],["The empty reduced word. ",{"type":"(G : Type u_1) ‚Üí [inst : Group G] ‚Üí (A B : Subgroup G) ‚Üí HNNExtension.NormalWord.ReducedWord G A B","name":"HNNExtension.NormalWord.ReducedWord.empty","isProp":false,"docString":"The empty reduced word. ","distance":0.429410212049807948897495180062833242118358612060546875}],["The empty pre-set ",{"type":"PSet","name":"PSet.empty","isProp":false,"docString":"The empty pre-set ","distance":0.43171730559482901501411333811120130121707916259765625}],["The unique empty cycle. ",{"type":"{Œ± : Type u_1} ‚Üí Cycle Œ±","name":"Cycle.nil","isProp":false,"docString":"The unique empty cycle. ","distance":0.43221437786705241279605616000480949878692626953125}],["The product of a family of triangles. ",{"type":"{C : Type u} ‚Üí\n  [inst : CategoryTheory.Category.{v, u} C] ‚Üí\n    [inst_1 : CategoryTheory.HasShift C ‚Ñ§] ‚Üí\n      {J : Type u_1} ‚Üí\n        (T : J ‚Üí CategoryTheory.Pretriangulated.Triangle C) ‚Üí\n          [inst_2 : CategoryTheory.Limits.HasProduct fun j => (T j).obj‚ÇÅ] ‚Üí\n            [inst_3 : CategoryTheory.Limits.HasProduct fun j => (T j).obj‚ÇÇ] ‚Üí\n              [inst_4 : CategoryTheory.Limits.HasProduct fun j => (T j).obj‚ÇÉ] ‚Üí\n                [inst_5 : CategoryTheory.Limits.HasProduct fun j => (CategoryTheory.shiftFunctor C 1).obj (T j).obj‚ÇÅ] ‚Üí\n                  CategoryTheory.Pretriangulated.Triangle C","name":"CategoryTheory.Pretriangulated.productTriangle","isProp":false,"docString":"The product of a family of triangles. ","distance":0.433843403296932328405688394923345185816287994384765625}],["Young diagram from a sorted list ",{"type":"(w : List ‚Ñï) ‚Üí List.Sorted (fun x x_1 => x ‚â• x_1) w ‚Üí YoungDiagram","name":"YoungDiagram.ofRowLens","isProp":false,"docString":"Young diagram from a sorted list ","distance":0.43460944582690974602456890352186746895313262939453125}],["A heavily unfolded version of the definition of multiplication ",{"type":"‚àÄ {Œπ : Type u_1} [inst : DecidableEq Œπ] (A : Œπ ‚Üí Type u_2) [inst_1 : (i : Œπ) ‚Üí AddCommMonoid (A i)]\n  [inst_2 : AddMonoid Œπ] [inst_3 : DirectSum.GSemiring A] [inst_4 : (i : Œπ) ‚Üí (x : A i) ‚Üí Decidable (x ‚â† 0)]\n  (a a' : DirectSum Œπ fun i => A i),\n  a * a' =\n    Finset.sum (DFinsupp.support a √óÀ¢ DFinsupp.support a') fun ij =>\n      (DirectSum.of (fun i => A i) (ij.1 + ij.2)) (GradedMonoid.GMul.mul (a ij.1) (a' ij.2))","name":"DirectSum.mul_eq_sum_support_ghas_mul","isProp":true,"docString":"A heavily unfolded version of the definition of multiplication ","distance":0.435069796958375720752343340791412629187107086181640625}],["an endomorphism of the object ",{"type":"{C : Type u_1} ‚Üí\n  [inst : CategoryTheory.Category.{u_2, u_1} C] ‚Üí (self : CategoryTheory.Idempotents.Karoubi C) ‚Üí self.X ‚ü∂ self.X","name":"CategoryTheory.Idempotents.Karoubi.p","isProp":false,"docString":"an endomorphism of the object ","distance":0.435079514678477996536543059846735559403896331787109375}],["The empty sequence ",{"type":"{Œ± : Type u} ‚Üí Stream'.Seq Œ±","name":"Stream'.Seq.nil","isProp":false,"docString":"The empty sequence ","distance":0.438806482045316192941442068331525661051273345947265625}],["the second object of a triangle ",{"type":"{C : Type u} ‚Üí\n  [inst : CategoryTheory.Category.{v, u} C] ‚Üí\n    [inst_1 : CategoryTheory.HasShift C ‚Ñ§] ‚Üí CategoryTheory.Pretriangulated.Triangle C ‚Üí C","name":"CategoryTheory.Pretriangulated.Triangle.obj‚ÇÇ","isProp":false,"docString":"the second object of a triangle ","distance":0.439117400231471111116121619488694705069065093994140625}],["Open balls are bounded ",{"type":"‚àÄ {Œ± : Type u} [inst : PseudoMetricSpace Œ±] {x : Œ±} {r : ‚Ñù}, Bornology.IsBounded (Metric.ball x r)","name":"Metric.isBounded_ball","isProp":true,"docString":"Open balls are bounded ","distance":0.43916284695674978610924199529108591377735137939453125}],["the second morphism of a triangle ",{"type":"{C : Type u} ‚Üí\n  [inst : CategoryTheory.Category.{v, u} C] ‚Üí\n    [inst_1 : CategoryTheory.HasShift C ‚Ñ§] ‚Üí (self : CategoryTheory.Pretriangulated.Triangle C) ‚Üí self.obj‚ÇÇ ‚ü∂ self.obj‚ÇÉ","name":"CategoryTheory.Pretriangulated.Triangle.mor‚ÇÇ","isProp":false,"docString":"the second morphism of a triangle ","distance":0.44095300440621054693934866008930839598178863525390625}],["Composition of two kernels. ",{"type":"{Œ± : Type u_1} ‚Üí\n  {Œ≤ : Type u_2} ‚Üí\n    {mŒ± : MeasurableSpace Œ±} ‚Üí\n      {mŒ≤ : MeasurableSpace Œ≤} ‚Üí\n        {Œ≥ : Type u_4} ‚Üí\n          {mŒ≥ : MeasurableSpace Œ≥} ‚Üí\n            ‚Ü•(ProbabilityTheory.kernel Œ≤ Œ≥) ‚Üí ‚Ü•(ProbabilityTheory.kernel Œ± Œ≤) ‚Üí ‚Ü•(ProbabilityTheory.kernel Œ± Œ≥)","name":"ProbabilityTheory.kernel.comp","isProp":false,"docString":"Composition of two kernels. ","distance":0.441970006549224636582806624574004672467708587646484375}],["The product of two two-pointings. ",{"type":"{Œ± : Type u_1} ‚Üí {Œ≤ : Type u_2} ‚Üí TwoPointing Œ± ‚Üí TwoPointing Œ≤ ‚Üí TwoPointing (Œ± √ó Œ≤)","name":"TwoPointing.prod","isProp":false,"docString":"The product of two two-pointings. ","distance":0.44272766908256311335634336501243524253368377685546875}],["Balls at the origin are absorbent. ",{"type":"‚àÄ {ùïú : Type u_3} {E : Type u_7} [inst : NormedField ùïú] [inst_1 : SeminormedAddCommGroup E] [inst_2 : NormedSpace ùïú E]\n  {r : ‚Ñù}, 0 < r ‚Üí Absorbent ùïú (Metric.ball 0 r)","name":"absorbent_ball_zero","isProp":true,"docString":"Balls at the origin are absorbent. ","distance":0.443650138307203179000026693756808526813983917236328125}],["Boolean exclusive or ",{"type":"Bool ‚Üí Bool ‚Üí Bool","name":"Bool.xor","isProp":false,"docString":"Boolean exclusive or ","distance":0.4440552416079537323412296245805919170379638671875}],["A product of distinguished triangles is distinguished ",{"type":"‚àÄ {C : Type u} [inst : CategoryTheory.Category.{v, u} C] [inst_1 : CategoryTheory.Limits.HasZeroObject C]\n  [inst_2 : CategoryTheory.HasShift C ‚Ñ§] [inst_3 : CategoryTheory.Preadditive C]\n  [inst_4 : ‚àÄ (n : ‚Ñ§), CategoryTheory.Functor.Additive (CategoryTheory.shiftFunctor C n)]\n  [hC : CategoryTheory.Pretriangulated C] {J : Type u_1} (T : J ‚Üí CategoryTheory.Pretriangulated.Triangle C),\n  (‚àÄ (j : J), T j ‚àà CategoryTheory.Pretriangulated.distinguishedTriangles) ‚Üí\n    ‚àÄ [inst_5 : CategoryTheory.Limits.HasProduct fun j => (T j).obj‚ÇÅ]\n      [inst_6 : CategoryTheory.Limits.HasProduct fun j => (T j).obj‚ÇÇ]\n      [inst_7 : CategoryTheory.Limits.HasProduct fun j => (T j).obj‚ÇÉ]\n      [inst_8 : CategoryTheory.Limits.HasProduct fun j => (CategoryTheory.shiftFunctor C 1).obj (T j).obj‚ÇÅ],\n      CategoryTheory.Pretriangulated.productTriangle T ‚àà CategoryTheory.Pretriangulated.distinguishedTriangles","name":"CategoryTheory.Pretriangulated.productTriangle_distinguished","isProp":true,"docString":"A product of distinguished triangles is distinguished ","distance":0.4442560159506514505523000480025075376033782958984375}],["The ball package made of unit balls. ",{"type":"(Œ± : Type u_1) ‚Üí Besicovitch.BallPackage Œ± Œ±","name":"Besicovitch.unitBallPackage","isProp":false,"docString":"The ball package made of unit balls. ","distance":0.44433624803689830695674345406587235629558563232421875}]]