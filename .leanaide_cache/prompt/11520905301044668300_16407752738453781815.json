[["An edge of a graph is a *bridge* if, after removing it, its incident vertices\nare no longer reachable from one another. ",{"type":"{V : Type u} → SimpleGraph V → Sym2 V → Prop","name":"SimpleGraph.IsBridge","isProp":false,"docString":"An edge of a graph is a *bridge* if, after removing it, its incident vertices\nare no longer reachable from one another. ","distance":0.719083734005606434180890573770739138126373291015625}],[" In a free groupoid with a wide, arborescent subquiver of symmetrized generators, any edge connecting generators yields the identity morphism when forming a loop in the spanning tree.",{"type":"∀ {G : Type u} [inst : CategoryTheory.Groupoid G] [inst_1 : IsFreeGroupoid G]\n  (T : WideSubquiver (Quiver.Symmetrify (IsFreeGroupoid.Generators G)))\n  [inst_2 : Quiver.Arborescence (WideSubquiver.toType (Quiver.Symmetrify (IsFreeGroupoid.Generators G)) T)]\n  {a b : IsFreeGroupoid.Generators G},\n  ∀ e ∈ Quiver.wideSubquiverSymmetrify T a b,\n    IsFreeGroupoid.SpanningTree.loopOfHom T (IsFreeGroupoid.of e) =\n      CategoryTheory.CategoryStruct.id (IsFreeGroupoid.SpanningTree.root' T)","name":"IsFreeGroupoid.SpanningTree.loopOfHom_eq_id","isProp":true,"docString":" In a free groupoid with a wide, arborescent subquiver of symmetrized generators, any edge connecting generators yields the identity morphism when forming a loop in the spanning tree.","distance":1.0569333900036210760475796632817946374416351318359375}],["This theorem asserts that for any given type `V` and any simple graph `G` of this type, if the graph `G` is a tree, then it is connected. In graph theory terms, a graph is said to be a tree if it is a undirected graph in which any two vertices are connected by exactly one path. The connectivity of a graph is guaranteed if it is a tree. This theorem essentially formalizes this property.",{"type":"∀ {V : Type u} {G : SimpleGraph V}, G.IsTree → G.Connected","name":"SimpleGraph.IsTree.isConnected","isProp":true,"docString":"This theorem asserts that for any given type `V` and any simple graph `G` of this type, if the graph `G` is a tree, then it is connected. In graph theory terms, a graph is said to be a tree if it is a undirected graph in which any two vertices are connected by exactly one path. The connectivity of a graph is guaranteed if it is a tree. This theorem essentially formalizes this property.","distance":1.1486559574597132726836434812867082655429840087890625}],["Turning an edge in the spanning tree into a loop gives the identity loop. ",{"type":"∀ {G : Type u} [inst : CategoryTheory.Groupoid G] [inst_1 : IsFreeGroupoid G]\n  (T : WideSubquiver (Quiver.Symmetrify (IsFreeGroupoid.Generators G)))\n  [inst_2 : Quiver.Arborescence (WideSubquiver.toType (Quiver.Symmetrify (IsFreeGroupoid.Generators G)) T)]\n  {a b : IsFreeGroupoid.Generators G},\n  ∀ e ∈ Quiver.wideSubquiverSymmetrify T a b,\n    IsFreeGroupoid.SpanningTree.loopOfHom T (IsFreeGroupoid.of e) =\n      CategoryTheory.CategoryStruct.id (IsFreeGroupoid.SpanningTree.root'✝ T)","name":"IsFreeGroupoid.SpanningTree.loopOfHom_eq_id","isProp":true,"docString":"Turning an edge in the spanning tree into a loop gives the identity loop. ","distance":0.8234464021409284573138620544341392815113067626953125}],[" In a simple graph, no edge can connect a vertex to itself.",{"type":"∀ {V : Type u} (G : SimpleGraph V) {e : Sym2 V}, e ∈ G.edgeSet → ¬e.IsDiag","name":"SimpleGraph.not_isDiag_of_mem_edgeSet","isProp":true,"docString":" In a simple graph, no edge can connect a vertex to itself.","distance":1.1027032585235236883391962692257948219776153564453125}],["This theorem states that for any groupoid `G` that is free, given a wide subquiver `T` of the symmetrized generators of `G` that forms an arborescence (a directed, rooted tree), any edge `e` in the symmetrized wide subquiver `T` that connects two generators `a` and `b` of `G` will, when used to create a loop in the spanning tree of `T`, yield the identity loop. In other words, if you start at the root of the tree, follow the path defined by the edge `e`, and return to the root, you end up with the identity morphism on the root of the tree.",{"type":"∀ {G : Type u} [inst : CategoryTheory.Groupoid G] [inst_1 : IsFreeGroupoid G]\n  (T : WideSubquiver (Quiver.Symmetrify (IsFreeGroupoid.Generators G)))\n  [inst_2 : Quiver.Arborescence (WideSubquiver.toType (Quiver.Symmetrify (IsFreeGroupoid.Generators G)) T)]\n  {a b : IsFreeGroupoid.Generators G},\n  ∀ e ∈ Quiver.wideSubquiverSymmetrify T a b,\n    IsFreeGroupoid.SpanningTree.loopOfHom T (IsFreeGroupoid.of e) =\n      CategoryTheory.CategoryStruct.id (IsFreeGroupoid.SpanningTree.root' T)","name":"IsFreeGroupoid.SpanningTree.loopOfHom_eq_id","isProp":true,"docString":"This theorem states that for any groupoid `G` that is free, given a wide subquiver `T` of the symmetrized generators of `G` that forms an arborescence (a directed, rooted tree), any edge `e` in the symmetrized wide subquiver `T` that connects two generators `a` and `b` of `G` will, when used to create a loop in the spanning tree of `T`, yield the identity loop. In other words, if you start at the root of the tree, follow the path defined by the edge `e`, and return to the root, you end up with the identity morphism on the root of the tree.","distance":1.150645881091231448323242148035205900669097900390625}],["Every edge in a walk's edge list is an edge of the graph.\nIt is written in this form (rather than using `⊆`) to avoid unsightly coercions. ",{"type":"∀ {V : Type u} {G : SimpleGraph V} {u v : V} (p : G.Walk u v) ⦃e : Sym2 V⦄, e ∈ p.edges → e ∈ G.edgeSet","name":"SimpleGraph.Walk.edges_subset_edgeSet","isProp":true,"docString":"Every edge in a walk's edge list is an edge of the graph.\nIt is written in this form (rather than using `⊆`) to avoid unsightly coercions. ","distance":1.0022857503729858397178986706421710550785064697265625}],["The root of an arborescence. ",{"type":"(V : Type u) → [inst : Quiver V] → [inst : Quiver.Arborescence V] → V","name":"Quiver.root","isProp":false,"docString":"The root of an arborescence. ","distance":1.0288557453414401976488079526461660861968994140625}],["There is a unique path from the root to any other vertex. ",{"type":"{V : Type u} →\n  {inst : Quiver V} → [self : Quiver.Arborescence V] → (b : V) → Unique (Quiver.Path Quiver.Arborescence.root b)","name":"Quiver.Arborescence.uniquePath","isProp":false,"docString":"There is a unique path from the root to any other vertex. ","distance":1.0295122790547994728882486015208996832370758056640625}],["The edges of a trail as a finset, since each edge in a trail appears exactly once. ",{"type":"{V : Type u_1} → {G : SimpleGraph V} → {u v : V} → {p : G.Walk u v} → p.IsTrail → Finset (Sym2 V)","name":"SimpleGraph.Walk.IsTrail.edgesFinset","isProp":false,"docString":"The edges of a trail as a finset, since each edge in a trail appears exactly once. ","distance":1.0377446240764178764237612995202653110027313232421875}],["The root of the arborescence. ",{"type":"{V : Type u} → {inst : Quiver V} → [self : Quiver.Arborescence V] → V","name":"Quiver.Arborescence.root","isProp":false,"docString":"The root of the arborescence. ","distance":1.0744685628846706304528879627468995749950408935546875}],["Build a tree from three nodes, right associated (ignores the invariants). ",{"type":"{α : Type u_1} → Ordnode α → α → Ordnode α → α → Ordnode α → Ordnode α","name":"Ordnode.node3R","isProp":false,"docString":"Build a tree from three nodes, right associated (ignores the invariants). ","distance":1.0858809289409812048887715718592517077922821044921875}],["The edge set of an Eulerian graph is finite. ",{"type":"{V : Type u_1} →\n  {G : SimpleGraph V} → [inst : DecidableEq V] → {u v : V} → {p : G.Walk u v} → p.IsEulerian → Fintype ↑G.edgeSet","name":"SimpleGraph.Walk.IsEulerian.fintypeEdgeSet","isProp":false,"docString":"The edge set of an Eulerian graph is finite. ","distance":1.091978709541922665238189438241533935070037841796875}],["A graph has edge-disjoint triangles if each edge belongs to at most one triangle. ",{"type":"{α : Type u_1} → SimpleGraph α → Prop","name":"SimpleGraph.EdgeDisjointTriangles","isProp":false,"docString":"A graph has edge-disjoint triangles if each edge belongs to at most one triangle. ","distance":1.0979247243367191710916586089297197759151458740234375}],["The one-edge subgraph. ",{"type":"{V : Type u} → (G : SimpleGraph V) → {v w : V} → G.Adj v w → G.Subgraph","name":"SimpleGraph.subgraphOfAdj","isProp":false,"docString":"The one-edge subgraph. ","distance":1.1107915302739446161695013870485126972198486328125}],["An isomorphism of graphs induces an equivalence of edge sets. ",{"type":"{V : Type u_1} → {W : Type u_2} → {G : SimpleGraph V} → {G' : SimpleGraph W} → G ≃g G' → ↑G.edgeSet ≃ ↑G'.edgeSet","name":"SimpleGraph.Iso.mapEdgeSet","isProp":false,"docString":"An isomorphism of graphs induces an equivalence of edge sets. ","distance":1.1145397944284951563531649298965930938720703125}],["A graph embedding induces an embedding of edge sets. ",{"type":"{V : Type u_1} → {W : Type u_2} → {G : SimpleGraph V} → {G' : SimpleGraph W} → G ↪g G' → ↑G.edgeSet ↪ ↑G'.edgeSet","name":"SimpleGraph.Embedding.mapEdgeSet","isProp":false,"docString":"A graph embedding induces an embedding of edge sets. ","distance":1.1155014658841808650180382755934260785579681396484375}],["Build a tree from three nodes, left associated (ignores the invariants). ",{"type":"{α : Type u_1} → Ordnode α → α → Ordnode α → α → Ordnode α → Ordnode α","name":"Ordnode.node3L","isProp":false,"docString":"Build a tree from three nodes, left associated (ignores the invariants). ","distance":1.1163327654175503322875329104135744273662567138671875}],["The head of the trees are equal ",{"type":"∀ {F : PFunctor.{u}} {R : F.M → F.M → Prop},\n  PFunctor.M.IsBisimulation R →\n    ∀ {a a' : F.A} {f : F.B a → F.M} {f' : F.B a' → F.M}, R (PFunctor.M.mk ⟨a, f⟩) (PFunctor.M.mk ⟨a', f'⟩) → a = a'","name":"PFunctor.M.IsBisimulation.head","isProp":true,"docString":"The head of the trees are equal ","distance":1.1179778218726144078942752457805909216403961181640625}],["The resulting tree is well formed. ",{"type":"∀ {α : Type u_1} {cmp : α → α → Ordering} {t : Batteries.RBSet α cmp} {cut : α → Ordering} {f : Option α → Option α}\n  [self : t.AlterWF cut f], Batteries.RBNode.WF cmp (Batteries.RBNode.alter cut f ↑t)","name":"Batteries.RBSet.AlterWF.wf","isProp":true,"docString":"The resulting tree is well formed. ","distance":1.1184541516362751512048134827637113630771636962890625}],["The depth of a finitely branching tree. ",{"type":"{α : Type u_1} → {β : α → Type u_2} → [inst : (a : α) → Fintype (β a)] → WType β → ℕ","name":"WType.depth","isProp":false,"docString":"The depth of a finitely branching tree. ","distance":1.120052874571239254208876445773057639598846435546875}],["Asserts that `p` holds on every element of the tree. ",{"type":"{α : Type u_1} → (α → Prop) → Batteries.RBNode α → Prop","name":"Batteries.RBNode.All","isProp":false,"docString":"Asserts that `p` holds on every element of the tree. ","distance":1.121052659216914104689521991531364619731903076171875}],["The `edges` of a walk is the list of edges it visits in order.\nThis is defined to be the list of edges underlying `SimpleGraph.Walk.darts`. ",{"type":"{V : Type u} → {G : SimpleGraph V} → {u v : V} → G.Walk u v → List (Sym2 V)","name":"SimpleGraph.Walk.edges","isProp":false,"docString":"The `edges` of a walk is the list of edges it visits in order.\nThis is defined to be the list of edges underlying `SimpleGraph.Walk.darts`. ","distance":1.1238248855090013922364278187160380184650421142578125}],["For every vertex `a`, there is a canonical hom from the root, given by the path in the tree. ",{"type":"{G : Type u} →\n  [inst : CategoryTheory.Groupoid G] →\n    [inst_1 : IsFreeGroupoid G] →\n      (T : WideSubquiver (Quiver.Symmetrify (IsFreeGroupoid.Generators G))) →\n        [inst_2 : Quiver.Arborescence (WideSubquiver.toType (Quiver.Symmetrify (IsFreeGroupoid.Generators G)) T)] →\n          (a : G) → IsFreeGroupoid.SpanningTree.root'✝ T ⟶ a","name":"IsFreeGroupoid.SpanningTree.treeHom","isProp":false,"docString":"For every vertex `a`, there is a canonical hom from the root, given by the path in the tree. ","distance":1.128859529831161889745771986781619489192962646484375}]]