[["If `f` is a function differentiable on the open unit ball, and there exists an `r < 1` such that\nany value of `‖f‖` on the open ball is bounded above by some value on the closed ball of radius `r`,\nthen `f` is constant. ",{"type":"∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type v} [inst_2 : NormedAddCommGroup F]\n  [inst_3 : NormedSpace ℂ F] [inst_4 : StrictConvexSpace ℝ F] [inst_5 : ProperSpace E] {f : E → F} {r b : ℝ},\n  DifferentiableOn ℂ f (Metric.ball 0 b) →\n    0 ≤ r →\n      r < b →\n        (∀ z ∈ Metric.ball 0 b, ∃ w ∈ Metric.closedBall 0 r, ‖f z‖ ≤ ‖f w‖) →\n          Set.EqOn f (Function.const E (f 0)) (Metric.ball 0 b)","name":"Complex.eq_const_of_exists_le","isProp":true,"docString":"If `f` is a function differentiable on the open unit ball, and there exists an `r < 1` such that\nany value of `‖f‖` on the open ball is bounded above by some value on the closed ball of radius `r`,\nthen `f` is constant. ","distance":0.59806957066113841658960836866754107177257537841796875}],[" If `f` is a complex differentiable and norm-bounded function from a complex normed additive commutative group to another, then `f` is constant.",{"type":"∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type v} [inst_2 : NormedAddCommGroup F]\n  [inst_3 : NormedSpace ℂ F] {f : E → F},\n  Differentiable ℂ f → Bornology.IsBounded (Set.range f) → ∀ (z w : E), f z = f w","name":"Differentiable.apply_eq_apply_of_bounded","isProp":true,"docString":" If `f` is a complex differentiable and norm-bounded function from a complex normed additive commutative group to another, then `f` is constant.","distance":0.64945089458303695284513423757744021713733673095703125}],["This theorem is a corollary of Liouville's theorem, stating that if a function `f` from a complex normed additive commutative group `E` to another such group `F` is differentiable everywhere, and if this function tends to a finite value `c` at infinity (more precisely, along the filter `cocompact E`, which in proper spaces is synonymous with being co-bounded), then the function takes the constant value `c` everywhere in `E`. In other words, any such differentiable function that has a limiting value at infinity must be a constant function.",{"type":"∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type v} [inst_2 : NormedAddCommGroup F]\n  [inst_3 : NormedSpace ℂ F] [inst_4 : Nontrivial E] {f : E → F},\n  Differentiable ℂ f → ∀ {c : F} (x : E), Filter.Tendsto f (Filter.cocompact E) (nhds c) → f x = c","name":"Differentiable.apply_eq_of_tendsto_cocompact","isProp":true,"docString":"This theorem is a corollary of Liouville's theorem, stating that if a function `f` from a complex normed additive commutative group `E` to another such group `F` is differentiable everywhere, and if this function tends to a finite value `c` at infinity (more precisely, along the filter `cocompact E`, which in proper spaces is synonymous with being co-bounded), then the function takes the constant value `c` everywhere in `E`. In other words, any such differentiable function that has a limiting value at infinity must be a constant function.","distance":0.86747617331234605497769507564953528344631195068359375}],["If `f` is bounded, then the abscissa of absolute convergence of `f` is bounded above by `1`. ",{"type":"∀ {f : ℕ → ℂ}, (∃ C, ∀ (n : ℕ), n ≠ 0 → ‖f n‖ ≤ C) → LSeries.abscissaOfAbsConv f ≤ 1","name":"LSeries.abscissaOfAbsConv_le_of_le_const","isProp":true,"docString":"If `f` is bounded, then the abscissa of absolute convergence of `f` is bounded above by `1`. ","distance":0.69068537992144152237727894316776655614376068115234375}],[" If `f` is a holomorphic function on the compact, connected complex manifold `M`, then `f` is constant.",{"type":"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type u_2} [inst_2 : NormedAddCommGroup F]\n  [inst_3 : NormedSpace ℂ F] {H : Type u_3} [inst_4 : TopologicalSpace H] {I : ModelWithCorners ℂ E H}\n  [inst_5 : I.Boundaryless] {M : Type u_4} [inst_6 : TopologicalSpace M] [inst_7 : CompactSpace M]\n  [inst_8 : ChartedSpace H M] [inst_9 : SmoothManifoldWithCorners I M] [inst_10 : PreconnectedSpace M] {f : M → F},\n  MDifferentiable I (modelWithCornersSelf ℂ F) f → ∀ (a b : M), f a = f b","name":"MDifferentiable.apply_eq_of_compactSpace","isProp":true,"docString":" If `f` is a holomorphic function on the compact, connected complex manifold `M`, then `f` is constant.","distance":0.73134908800076947610335764693445526063442230224609375}],["This theorem is a corollary of Liouville's theorem and it states that, for any complex differentiable function `f` from a non-trivial normed additive commutative group `E` to another normed additive commutative group `F`, if the function `f` tends to a finite value `c` at infinity (that is, along the filter generated by complements to compact sets in `E`, which in proper spaces coincides with the filter of sets not bounded above), then the function `f` must be a constant function with the value `c`. In other words, if the limit of the function `f` as it approaches infinity (in the sense of `Filter.cocompact`) is `c`, then `f` is the constant function that always returns `c` for any input from `E`.",{"type":"∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type v} [inst_2 : NormedAddCommGroup F]\n  [inst_3 : NormedSpace ℂ F] [inst_4 : Nontrivial E] {f : E → F},\n  Differentiable ℂ f → ∀ {c : F}, Filter.Tendsto f (Filter.cocompact E) (nhds c) → f = Function.const E c","name":"Differentiable.eq_const_of_tendsto_cocompact","isProp":true,"docString":"This theorem is a corollary of Liouville's theorem and it states that, for any complex differentiable function `f` from a non-trivial normed additive commutative group `E` to another normed additive commutative group `F`, if the function `f` tends to a finite value `c` at infinity (that is, along the filter generated by complements to compact sets in `E`, which in proper spaces coincides with the filter of sets not bounded above), then the function `f` must be a constant function with the value `c`. In other words, if the limit of the function `f` as it approaches infinity (in the sense of `Filter.cocompact`) is `c`, then `f` is the constant function that always returns `c` for any input from `E`.","distance":0.87863976856535519477375828500953502953052520751953125}],["If `f` is differentiable on the open unit ball `{z : ℂ | ‖z‖ < 1}`, and `‖f‖` attains a maximum\nin this open ball, then `f` is constant.",{"type":"∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type v} [inst_2 : NormedAddCommGroup F]\n  [inst_3 : NormedSpace ℂ F] [inst_4 : StrictConvexSpace ℝ F] {f : E → F} {b : ℝ},\n  DifferentiableOn ℂ f (Metric.ball 0 b) →\n    ∀ {v : E},\n      v ∈ Metric.ball 0 b →\n        IsMaxOn (norm ∘ f) (Metric.ball 0 b) v → Set.EqOn f (Function.const E (f v)) (Metric.ball 0 b)","name":"Complex.eq_const_of_exists_max","isProp":true,"docString":"If `f` is differentiable on the open unit ball `{z : ℂ | ‖z‖ < 1}`, and `‖f‖` attains a maximum\nin this open ball, then `f` is constant.","distance":0.70506399374781281164104029812733642756938934326171875}],["If `f` is monotone and antitone on a directed order, then `f` is constant. ",{"type":"∀ {α : Type u} {β : Type v} [inst : PartialOrder β] [inst_1 : Preorder α] {f : α → β}\n  [inst_2 : IsDirected α fun x1 x2 => x1 ≤ x2], Monotone f → Antitone f → ∀ (a b : α), f a = f b","name":"constant_of_monotone_antitone","isProp":true,"docString":"If `f` is monotone and antitone on a directed order, then `f` is constant. ","distance":0.71004129142428451526569688212475739419460296630859375}],["`f` is eventually bounded if and only if, there exists an admissible set on which it is\nbounded. ",{"type":"∀ {α : Type u_1} {r : α → α → Prop} {f : Filter α}, Filter.IsBounded r f ↔ ∃ s ∈ f.sets, ∃ b, s ⊆ {x | r x b}","name":"Filter.isBounded_iff","isProp":true,"docString":"`f` is eventually bounded if and only if, there exists an admissible set on which it is\nbounded. ","distance":0.714398493592834693544091351213864982128143310546875}],["If the germ of `f` w.r.t. each `\u0000\u0000 x` is constant, `f` is locally constant. ",{"type":"∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] {f : X → Y},\n  (∀ (x : X), (↑f).IsConstant) → IsLocallyConstant f","name":"IsLocallyConstant.of_germ_isConstant","isProp":true,"docString":"If the germ of `f` w.r.t. each `\u0000\u0000 x` is constant, `f` is locally constant. ","distance":0.72186166699445608596619194941013120114803314208984375}],["If `f` has a formal power series at x bounded by `1`, then `f` is constant equal\nto `f x` in a neighborhood of `x`. ",{"type":"∀ {\u0000\u0000 : Type u_1} {E : Type u_2} {F : Type u_3} [inst : NontriviallyNormedField \u0000\u0000] [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace \u0000\u0000 E] [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace \u0000\u0000 F] {f : E → F}\n  {pf : FormalMultilinearSeries \u0000\u0000 E F} {x : E}, HasFiniteFPowerSeriesAt f pf x 1 → f =ᶠ[nhds x] fun x_1 => f x","name":"HasFiniteFPowerSeriesAt.eventually_const_of_bound_one","isProp":true,"docString":"If `f` has a formal power series at x bounded by `1`, then `f` is constant equal\nto `f x` in a neighborhood of `x`. ","distance":0.72672344714535197507387920268229208886623382568359375}],["If `f` is monotone and antitone on a directed set `s`, then `f` is constant on `s`. ",{"type":"∀ {α : Type u} {β : Type v} [inst : PartialOrder β] [inst_1 : Preorder α] {f : α → β} {s : Set α},\n  MonotoneOn f s →\n    AntitoneOn f s → DirectedOn (fun x1 x2 => x1 ≤ x2) s → ∀ ⦃a : α⦄, a ∈ s → ∀ ⦃b : α⦄, b ∈ s → f a = f b","name":"constant_of_monotoneOn_antitoneOn","isProp":true,"docString":"If `f` is monotone and antitone on a directed set `s`, then `f` is constant on `s`. ","distance":0.7292144098687562969729469841695390641689300537109375}],["If `f` has a formal power series on a ball bounded by `1`, then `f` is constant equal\nto `f x` on the ball. ",{"type":"∀ {\u0000\u0000 : Type u_1} {E : Type u_2} {F : Type u_3} [inst : NontriviallyNormedField \u0000\u0000] [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace \u0000\u0000 E] [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace \u0000\u0000 F] {f : E → F}\n  {pf : FormalMultilinearSeries \u0000\u0000 E F} {x : E} {r : ENNReal},\n  HasFiniteFPowerSeriesOnBall f pf x 1 r → ∀ y ∈ EMetric.ball x r, f y = f x","name":"HasFiniteFPowerSeriesOnBall.eq_const_of_bound_one","isProp":true,"docString":"If `f` has a formal power series on a ball bounded by `1`, then `f` is constant equal\nto `f x` on the ball. ","distance":0.74269561642567605286302523381891660392284393310546875}],["If `f` is bounded and not trivial, then it is equivalent to a p-adic absolute value. ",{"type":"∀ {f : MulRingNorm ℚ},\n  f ≠ 1 → (∀ (n : ℕ), f ↑n ≤ 1) → ∃! p, ∃ (x : Fact (Nat.Prime p)), f.equiv (Rat.MulRingNorm.mulRingNorm_padic p)","name":"Rat.MulRingNorm.mulRingNorm_equiv_padic_of_bounded","isProp":true,"docString":"If `f` is bounded and not trivial, then it is equivalent to a p-adic absolute value. ","distance":0.7472097844157647994478566033649258315563201904296875}],["**Liouville's theorem**: a complex differentiable bounded function `f : E → F` is a constant. ",{"type":"∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type v} [inst_2 : NormedAddCommGroup F]\n  [inst_3 : NormedSpace ℂ F] {f : E → F},\n  Differentiable ℂ f → Bornology.IsBounded (Set.range f) → ∀ (z w : E), f z = f w","name":"Differentiable.apply_eq_apply_of_bounded","isProp":true,"docString":"**Liouville's theorem**: a complex differentiable bounded function `f : E → F` is a constant. ","distance":0.7498820652625288740722453439957462251186370849609375}],["Constant functions are Lipschitz (with any constant). ",{"type":"∀ {α : Type u} {β : Type v} [inst : PseudoEMetricSpace α] [inst_1 : PseudoEMetricSpace β] (b : β),\n  LipschitzWith 0 fun x => b","name":"LipschitzWith.const","isProp":true,"docString":"Constant functions are Lipschitz (with any constant). ","distance":0.75044321873224595353946142495260573923587799072265625}],["Constant as a continuous bounded function. ",{"type":"(α : Type u) →\n  {β : Type v} → [inst : TopologicalSpace α] → [inst_1 : PseudoMetricSpace β] → β → BoundedContinuousFunction α β","name":"BoundedContinuousFunction.const","isProp":false,"docString":"Constant as a continuous bounded function. ","distance":0.76523226314859049690397796439356170594692230224609375}],["If `f` is not bounded and not trivial, then it is equivalent to the standard absolute value on\n`ℚ`. ",{"type":"∀ {f : MulRingNorm ℚ}, (¬∀ (n : ℕ), f ↑n ≤ 1) → f.equiv Rat.MulRingNorm.mulRingNorm_real","name":"Rat.MulRingNorm.mulRingNorm_equiv_standard_of_unbounded","isProp":true,"docString":"If `f` is not bounded and not trivial, then it is equivalent to the standard absolute value on\n`ℚ`. ","distance":0.77834403446899191880703483548131771385669708251953125}],["If preimage of each singleton under `f : α → β` is either empty or the whole type,\nthen `f` is a constant. ",{"type":"∀ {α : Type u_1} {β : Type u_2} [inst : Nonempty β] {f : α → β},\n  (∀ (b : β), f ⁻¹' {b} = ∅ ∨ f ⁻¹' {b} = Set.univ) → ∃ b, f = Function.const α b","name":"Set.exists_eq_const_of_preimage_singleton","isProp":true,"docString":"If preimage of each singleton under `f : α → β` is either empty or the whole type,\nthen `f` is a constant. ","distance":0.78683538228038540918163334936252795159816741943359375}],["If `f : \u0000\u0000 → G`, `\u0000\u0000 = R` or `\u0000\u0000 = ℂ`, is differentiable everywhere and its derivative equal zero,\nthen it is a constant function. ",{"type":"∀ {\u0000\u0000 : Type u_3} {G : Type u_4} [inst : RCLike \u0000\u0000] [inst_1 : NormedAddCommGroup G] [inst_2 : NormedSpace \u0000\u0000 G]\n  {f : \u0000\u0000 → G}, Differentiable \u0000\u0000 f → (∀ (x : \u0000\u0000), deriv f x = 0) → ∀ (x y : \u0000\u0000), f x = f y","name":"is_const_of_deriv_eq_zero","isProp":true,"docString":"If `f : \u0000\u0000 → G`, `\u0000\u0000 = R` or `\u0000\u0000 = ℂ`, is differentiable everywhere and its derivative equal zero,\nthen it is a constant function. ","distance":0.79433934896549918125430167492595501244068145751953125}],["`f` is Lipschitz iff it is Lipschitz on the entire space. ",{"type":"∀ {α : Type u} {β : Type v} [inst : PseudoEMetricSpace α] [inst_1 : PseudoEMetricSpace β] {K : NNReal} {f : α → β},\n  LipschitzOnWith K f Set.univ ↔ LipschitzWith K f","name":"lipschitzOnWith_univ","isProp":true,"docString":"`f` is Lipschitz iff it is Lipschitz on the entire space. ","distance":0.8001310862397279510815906178322620689868927001953125}],["If `f` is `O(1)`, then the abscissa of absolute convergence of `f` is bounded above by `1`. ",{"type":"∀ {f : ℕ → ℂ}, f =O[Filter.atTop] 1 → LSeries.abscissaOfAbsConv f ≤ 1","name":"LSeries.abscissaOfAbsConv_le_one_of_isBigO_one","isProp":true,"docString":"If `f` is `O(1)`, then the abscissa of absolute convergence of `f` is bounded above by `1`. ","distance":0.80166959859600839255477922051795758306980133056640625}],["If a function `f : M → F` from a complex manifold to a complex normed space is holomorphic on a\n(pre)connected compact open set, then it is a constant on this set. ",{"type":"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {F : Type u_2} [inst_2 : NormedAddCommGroup F]\n  [inst_3 : NormedSpace ℂ F] {H : Type u_3} [inst_4 : TopologicalSpace H] {I : ModelWithCorners ℂ E H}\n  [inst_5 : I.Boundaryless] {M : Type u_4} [inst_6 : TopologicalSpace M] [inst_7 : ChartedSpace H M]\n  [inst_8 : SmoothManifoldWithCorners I M] {f : M → F} {U : Set M} {a b : M},\n  MDifferentiableOn I (modelWithCornersSelf ℂ F) f U →\n    IsPreconnected U → IsCompact U → IsOpen U → a ∈ U → b ∈ U → f a = f b","name":"MDifferentiableOn.apply_eq_of_isPreconnected_isCompact_isOpen","isProp":true,"docString":"If a function `f : M → F` from a complex manifold to a complex normed space is holomorphic on a\n(pre)connected compact open set, then it is a constant on this set. ","distance":0.806025709664763834183531798771582543849945068359375}],["A continuous function is bounded above on a compact set. ",{"type":"∀ {α : Type u_2} {β : Type u_3} [inst : LinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : TopologicalSpace β]\n  [inst_3 : ClosedIciTopology α] [inst_4 : Nonempty α] {f : β → α} {K : Set β},\n  IsCompact K → ContinuousOn f K → BddAbove (f '' K)","name":"IsCompact.bddAbove_image","isProp":true,"docString":"A continuous function is bounded above on a compact set. ","distance":0.80953191092035137188531734864227473735809326171875}]]