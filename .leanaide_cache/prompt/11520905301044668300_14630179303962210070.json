[["The sum of the values of an odd function is 0. ",{"type":"∀ {α : Type u_3} {β : Type u_4} [inst : AddCommGroup β] [inst_1 : NoZeroSMulDivisors ℕ β] [inst_2 : Fintype α]\n  [inst_3 : InvolutiveNeg α] {f : α → β}, Function.Odd f → ∑ a : α, f a = 0","name":"Function.Odd.sum_eq_zero","isProp":true,"docString":"The sum of the values of an odd function is 0. ","distance":0.60259813246669136077571238274686038494110107421875}],[" The sum of two integers is even if and only if both integers are even.",{"type":"∀ {n : ℤ}, Even n = (n % 2 = 0)","name":"Mathlib.Data.Int.Parity._auxLemma.21","isProp":true,"docString":" The sum of two integers is even if and only if both integers are even.","distance":0.28704172246503756316116096058976836502552032470703125}],["This theorem states that for all natural numbers `m` and `n`, the sum `m + n` is even if and only if `m` and `n` are both even or both odd. In other words, the parity of the sum of two natural numbers is the same as the parity of the individual numbers. Here, `Even` is a property of a number that is defined to be true if the number can be expressed as the sum of two equal numbers.",{"type":"∀ {m n : ℕ}, Even (m + n) ↔ (Even m ↔ Even n)","name":"Nat.even_add","isProp":true,"docString":"This theorem states that for all natural numbers `m` and `n`, the sum `m + n` is even if and only if `m` and `n` are both even or both odd. In other words, the parity of the sum of two natural numbers is the same as the parity of the individual numbers. Here, `Even` is a property of a number that is defined to be true if the number can be expressed as the sum of two equal numbers.","distance":0.61639964523070556179362711191060952842235565185546875}],["The convolution of two even functions is also even. ",{"type":"∀ {\u0000\u0000 : Type u\u0000\u0000} {G : Type uG} {E : Type uE} {E' : Type uE'} {F : Type uF} [inst : NormedAddCommGroup E]\n  [inst_1 : NormedAddCommGroup E'] [inst_2 : NormedAddCommGroup F] {f : G → E} {g : G → E'} {x : G}\n  [inst_3 : NontriviallyNormedField \u0000\u0000] [inst_4 : NormedSpace \u0000\u0000 E] [inst_5 : NormedSpace \u0000\u0000 E'] [inst_6 : NormedSpace \u0000\u0000 F]\n  (L : E →L[\u0000\u0000] E' →L[\u0000\u0000] F) [inst_7 : MeasurableSpace G] {μ : MeasureTheory.Measure G} [inst_8 : NormedSpace ℝ F]\n  [inst_9 : AddCommGroup G] [inst_10 : μ.IsAddLeftInvariant] [inst_11 : μ.IsNegInvariant] [inst_12 : MeasurableNeg G]\n  [inst_13 : MeasurableAdd G],\n  (∀ᵐ (x : G) ∂μ, f (-x) = f x) →\n    (∀ᵐ (x : G) ∂μ, g (-x) = g x) → MeasureTheory.convolution f g L μ (-x) = MeasureTheory.convolution f g L μ x","name":"MeasureTheory.convolution_neg_of_neg_eq","isProp":true,"docString":"The convolution of two even functions is also even. ","distance":0.67259231298392985198830729132168926298618316650390625}],[" The sum of two natural numbers is even if and only if both numbers are even or both are odd.",{"type":"∀ {m n : ℕ}, Even (m + n) ↔ (Even m ↔ Even n)","name":"Nat.even_add","isProp":true,"docString":" The sum of two natural numbers is even if and only if both numbers are even or both are odd.","distance":0.310228337000388154631735915245371870696544647216796875}],["The theorem `Even.mod_even` states that for any two natural numbers `n` and `a`, if both `n` and `a` are even (i.e., each can be expressed as twice some other natural number), then the remainder when `n` is divided by `a` is also even.",{"type":"∀ {n a : ℕ}, Even n → Even a → Even (n % a)","name":"Even.mod_even","isProp":true,"docString":"The theorem `Even.mod_even` states that for any two natural numbers `n` and `a`, if both `n` and `a` are even (i.e., each can be expressed as twice some other natural number), then the remainder when `n` is divided by `a` is also even.","distance":0.7273927658105068250193880885490216314792633056640625}],["If `n` is even and `a` is even, then `n % a` is even. ",{"type":"∀ {n a : ℕ}, Even n → Even a → Even (n % a)","name":"Even.mod_even","isProp":true,"docString":"If `n` is even and `a` is even, then `n % a` is even. ","distance":0.7346024060957556667261769689503125846385955810546875}],["Any constant function is even. ",{"type":"∀ {α : Type u_1} {β : Type u_2} [inst : Neg α] (b : β), Function.Even fun x => b","name":"Function.Even.const","isProp":true,"docString":"Any constant function is even. ","distance":0.7841701110429186716288540992536582052707672119140625}],["If `a` is even, then `n` is even iff `n % a` is even. ",{"type":"∀ {n a : ℕ}, Even a → (Even (n % a) ↔ Even n)","name":"Even.mod_even_iff","isProp":true,"docString":"If `a` is even, then `n` is even iff `n % a` is even. ","distance":0.78693485579930289031125312249059788882732391357421875}],["If `f` is even and `g` is odd, then `f ∘ g` is even. ",{"type":"∀ {α : Type u_1} {β : Type u_2} [inst : Neg α] {γ : Type u_3} [inst_1 : Neg β] {f : β → γ},\n  Function.Even f → ∀ {g : α → β}, Function.Odd g → Function.Even (f ∘ g)","name":"Function.Even.comp_odd","isProp":true,"docString":"If `f` is even and `g` is odd, then `f ∘ g` is even. ","distance":0.81577225711562018073408353302511386573314666748046875}],["If `n` is odd and `a` is even, then `n % a` is odd. ",{"type":"∀ {n a : ℕ}, Odd n → Even a → Odd (n % a)","name":"Odd.mod_even","isProp":true,"docString":"If `n` is odd and `a` is even, then `n % a` is odd. ","distance":0.82336415870736290312237315447418950498104095458984375}],["If `a` is even, then `n` is odd iff `n % a` is odd. ",{"type":"∀ {n a : ℕ}, Even a → (Odd (n % a) ↔ Odd n)","name":"Odd.mod_even_iff","isProp":true,"docString":"If `a` is even, then `n` is odd iff `n % a` is odd. ","distance":0.82464514154895007802537065799697302281856536865234375}],["The sum of two squares is zero iff both elements are zero. ",{"type":"∀ {α : Type u} [inst : Semiring α] [inst_1 : LinearOrder α] {a b : α} [inst_2 : IsRightCancelAdd α]\n  [inst_3 : NoZeroDivisors α] [inst_4 : ZeroLEOneClass α] [inst_5 : ExistsAddOfLE α] [inst_6 : PosMulMono α]\n  [inst_7 : AddLeftMono α] [inst_8 : AddLeftStrictMono α], a * a + b * b = 0 ↔ a = 0 ∧ b = 0","name":"mul_self_add_mul_self_eq_zero","isProp":true,"docString":"The sum of two squares is zero iff both elements are zero. ","distance":0.85976523142689809109384668772690929472446441650390625}],["The set of natural numbers that are sums of two squares is closed under multiplication. ",{"type":"∀ {a b x y u v : ℕ}, a = x ^ 2 + y ^ 2 → b = u ^ 2 + v ^ 2 → ∃ r s, a * b = r ^ 2 + s ^ 2","name":"Nat.sq_add_sq_mul","isProp":true,"docString":"The set of natural numbers that are sums of two squares is closed under multiplication. ","distance":0.88047340585046807159841364409658126533031463623046875}],["In `Fin n`, all elements are even for odd `n`,\notherwise an element is even iff its `Fin.val` value is even. ",{"type":"∀ {n : ℕ} {k : Fin n}, Even k ↔ Odd n ∨ Even ↑k","name":"Fin.even_iff","isProp":true,"docString":"In `Fin n`, all elements are even for odd `n`,\notherwise an element is even iff its `Fin.val` value is even. ","distance":0.88341876382715700533054814513889141380786895751953125}],["If `m` and `n` are natural numbers, then the natural number `m^n` is even\nif and only if `m` is even and `n` is positive. ",{"type":"∀ {m n : ℕ}, Even (m ^ n) ↔ Even m ∧ n ≠ 0","name":"Nat.even_pow","isProp":true,"docString":"If `m` and `n` are natural numbers, then the natural number `m^n` is even\nif and only if `m` is even and `n` is positive. ","distance":0.89759737574733733378451461248914711177349090576171875}],["Strong recursion principle on even and odd numbers: if for all `i : ℕ` we can prove `P (2 * i)`\nfrom `P j` for all `j < 2 * i` and we can prove `P (2 * i + 1)` from `P j` for all `j < 2 * i + 1`,\nthen we have `P n` for all `n : ℕ`. ",{"type":"{P : ℕ → Sort u_1} →\n  ((n : ℕ) → ((k : ℕ) → k < 2 * n → P k) → P (2 * n)) →\n    ((n : ℕ) → ((k : ℕ) → k < 2 * n + 1 → P k) → P (2 * n + 1)) → (n : ℕ) → P n","name":"Nat.evenOddStrongRec","isProp":false,"docString":"Strong recursion principle on even and odd numbers: if for all `i : ℕ` we can prove `P (2 * i)`\nfrom `P j` for all `j < 2 * i` and we can prove `P (2 * i + 1)` from `P j` for all `j < 2 * i + 1`,\nthen we have `P n` for all `n : ℕ`. ","distance":0.9099928695421646285268479914520867168903350830078125}],["The sum of two vector measure is a vector measure. ",{"type":"{α : Type u_1} →\n  {m : MeasurableSpace α} →\n    {M : Type u_3} →\n      [inst : AddCommMonoid M] →\n        [inst_1 : TopologicalSpace M] →\n          [inst_2 : ContinuousAdd M] →\n            MeasureTheory.VectorMeasure α M → MeasureTheory.VectorMeasure α M → MeasureTheory.VectorMeasure α M","name":"MeasureTheory.VectorMeasure.add","isProp":false,"docString":"The sum of two vector measure is a vector measure. ","distance":0.918427117109052115750955636030994355678558349609375}],["The sum of two elements of an additive subsemigroup belongs to the subsemigroup. ",{"type":"∀ {M : Type u_3} [inst : Add M] (self : AddSubsemigroup M) {a b : M},\n  a ∈ self.carrier → b ∈ self.carrier → a + b ∈ self.carrier","name":"AddSubsemigroup.add_mem'","isProp":true,"docString":"The sum of two elements of an additive subsemigroup belongs to the subsemigroup. ","distance":0.92345665177524571820555365775362588465213775634765625}],["Two natural numbers are equal if and only if they have the same multiples. ",{"type":"∀ {m n : ℕ}, (∀ (a : ℕ), m ∣ a ↔ n ∣ a) ↔ m = n","name":"Nat.dvd_right_iff_eq","isProp":true,"docString":"Two natural numbers are equal if and only if they have the same multiples. ","distance":0.93368872485963827489996447184239514172077178955078125}],["If `f` is arbitrary and `g` is even, then `f ∘ g` is even. ",{"type":"∀ {α : Type u_1} {β : Type u_2} [inst : Neg α] {γ : Type u_3} {g : α → β},\n  Function.Even g → ∀ (f : β → γ), Function.Even (f ∘ g)","name":"Function.Even.left_comp","isProp":true,"docString":"If `f` is arbitrary and `g` is even, then `f ∘ g` is even. ","distance":0.9353504841521742552146179150440730154514312744140625}],["The product of two positive elements is positive. ",{"type":"∀ {α : Type u} [self : StrictOrderedRing α] (a b : α), 0 < a → 0 < b → 0 < a * b","name":"StrictOrderedRing.mul_pos","isProp":true,"docString":"The product of two positive elements is positive. ","distance":0.9465658147084663465165021989378146827220916748046875}],["A sum is add-regular if and only if the summands are.",{"type":"∀ {R : Type u_1} [inst : AddCommSemigroup R] {a b : R}, IsAddRegular (a + b) ↔ IsAddRegular a ∧ IsAddRegular b","name":"isAddRegular_add_iff","isProp":true,"docString":"A sum is add-regular if and only if the summands are.","distance":0.94927944773620709373318504731287248432636260986328125}],["positive integers summing to `n`",{"type":"{n : ℕ} → n.Partition → Multiset ℕ","name":"Nat.Partition.parts","isProp":false,"docString":"positive integers summing to `n`","distance":0.9516427092441579471682189250714145600795745849609375}]]