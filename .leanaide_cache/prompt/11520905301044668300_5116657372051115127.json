[["If we dilate a convex set about a point in its interior by a scale `t > 1`, the interior of\nthe result includes the closure of the original set.\n\nTODO Generalise this from convex sets to sets that are balanced / star-shaped about `x`. ",{"type":"∀ {E : Type u_3} [inst : AddCommGroup E] [inst_1 : Module ℝ E] [inst_2 : TopologicalSpace E]\n  [inst_3 : TopologicalAddGroup E] [inst_4 : ContinuousSMul ℝ E] {s : Set E},\n  Convex ℝ s → ∀ {x : E}, x ∈ interior s → ∀ (t : ℝ), 1 < t → closure s ⊆ interior (⇑(AffineMap.homothety x t) '' s)","name":"Convex.closure_subset_interior_image_homothety_of_one_lt","isProp":true,"docString":"If we dilate a convex set about a point in its interior by a scale `t > 1`, the interior of\nthe result includes the closure of the original set.\n\nTODO Generalise this from convex sets to sets that are balanced / star-shaped about `x`. ","distance":1.9684477334611030219235772165120579302310943603515625}],[" For any function `f` from type `α` to type `β`, `Set.range f = f '' Set.univ`.",{"type":"∀ {α : Type u_1} {β : Type u_2} {f : α → β}, f '' Set.univ = Set.range f","name":"Set.image_univ","isProp":true,"docString":" For any function `f` from type `α` to type `β`, `Set.range f = f '' Set.univ`.","distance":2.0060711307085963284180252230726182460784912109375}],["This theorem states that for any positive number `n` of type `PosNum`, the double coercion of `n` to natural number and then to integer is equal to the direct coercion of `n` to integer. Essentially, it ensures that converting a positive number to a natural number and then to an integer yields the same result as directly converting the positive number to an integer.",{"type":"∀ (n : PosNum), ↑↑n = ↑n","name":"PosNum.to_nat_to_int","isProp":true,"docString":"This theorem states that for any positive number `n` of type `PosNum`, the double coercion of `n` to natural number and then to integer is equal to the direct coercion of `n` to integer. Essentially, it ensures that converting a positive number to a natural number and then to an integer yields the same result as directly converting the positive number to an integer.","distance":2.00716982425635759312854133895598351955413818359375}],["A link that, when clicked, makes the specified edit\nand potentially moves the cursor\nor makes a selection. ",{"type":"ProofWidgets.Component ProofWidgets.MakeEditLinkProps","name":"ProofWidgets.MakeEditLink","isProp":false,"docString":"A link that, when clicked, makes the specified edit\nand potentially moves the cursor\nor makes a selection. ","distance":1.9729339564874501800062489564879797399044036865234375}],[" For any compact set in a metric space and any open cover, there exists a positive number δ such that for each point in the set, there is an open set in the cover containing a ball of radius δ around that point.",{"type":"∀ {α : Type u} [inst : PseudoMetricSpace α] {s : Set α} {ι : Sort u_3} {c : ι → Set α},\n  IsCompact s → (∀ (i : ι), IsOpen (c i)) → s ⊆ ⋃ i, c i → ∃ δ > 0, ∀ x ∈ s, ∃ i, Metric.ball x δ ⊆ c i","name":"lebesgue_number_lemma_of_metric","isProp":true,"docString":" For any compact set in a metric space and any open cover, there exists a positive number δ such that for each point in the set, there is an open set in the cover containing a ball of radius δ around that point.","distance":2.006383603516221025842014569207094609737396240234375}],["This theorem, named `MeasureTheory.StronglyMeasurable.integral_prod_right`, states that the Bochner integral is measurable. More specifically, given a function `f` from `α` to `β` to `E`, where `α`, `β`, and `E` are types, `α` and `β` have associated measurable spaces, `E` is a normed add commutative group and a normed space over the real numbers, and `ν` is a sigma-finite measure on `β`, if the function `f` in uncurried form is strongly measurable (i.e., it is the limit point of simple functions), then the function which takes `x` in `α` to the Bochner integral of `f x` with respect to `ν` is also strongly measurable. This theorem provides an important result used in the proof of Fubini's theorem, specifically for the measurability of the integrand on the right-hand-side of the theorem.",{"type":"∀ {α : Type u_1} {β : Type u_3} {E : Type u_6} [inst : MeasurableSpace α] [inst_1 : MeasurableSpace β]\n  {ν : MeasureTheory.Measure β} [inst_2 : NormedAddCommGroup E] [inst_3 : NormedSpace ℝ E]\n  [inst_4 : MeasureTheory.SigmaFinite ν] ⦃f : α → β → E⦄,\n  MeasureTheory.StronglyMeasurable (Function.uncurry f) → MeasureTheory.StronglyMeasurable fun x => ∫ (y : β), f x y ∂ν","name":"MeasureTheory.StronglyMeasurable.integral_prod_right","isProp":true,"docString":"This theorem, named `MeasureTheory.StronglyMeasurable.integral_prod_right`, states that the Bochner integral is measurable. More specifically, given a function `f` from `α` to `β` to `E`, where `α`, `β`, and `E` are types, `α` and `β` have associated measurable spaces, `E` is a normed add commutative group and a normed space over the real numbers, and `ν` is a sigma-finite measure on `β`, if the function `f` in uncurried form is strongly measurable (i.e., it is the limit point of simple functions), then the function which takes `x` in `α` to the Bochner integral of `f x` with respect to `ν` is also strongly measurable. This theorem provides an important result used in the proof of Fubini's theorem, specifically for the measurability of the integrand on the right-hand-side of the theorem.","distance":2.0100076332680227864102562307380139827728271484375}],["Converts a `ZNum` to a `PosNum`, mapping all out of range values to `1`. ",{"type":"ZNum → PosNum","name":"PosNum.ofZNum","isProp":false,"docString":"Converts a `ZNum` to a `PosNum`, mapping all out of range values to `1`. ","distance":1.97523369716537633422603903454728424549102783203125}],["If we dilate the interior of a convex set about a point in its interior by a scale `t > 1`,\nthe result includes the closure of the original set.\n\nTODO Generalise this from convex sets to sets that are balanced / star-shaped about `x`. ",{"type":"∀ {E : Type u_3} [inst : AddCommGroup E] [inst_1 : Module ℝ E] [inst_2 : TopologicalSpace E]\n  [inst_3 : TopologicalAddGroup E] [inst_4 : ContinuousSMul ℝ E] {s : Set E},\n  Convex ℝ s → ∀ {x : E}, x ∈ interior s → ∀ (t : ℝ), 1 < t → closure s ⊆ ⇑(AffineMap.homothety x t) '' interior s","name":"Convex.closure_subset_image_homothety_interior_of_one_lt","isProp":true,"docString":"If we dilate the interior of a convex set about a point in its interior by a scale `t > 1`,\nthe result includes the closure of the original set.\n\nTODO Generalise this from convex sets to sets that are balanced / star-shaped about `x`. ","distance":1.975944735198591928337918943725526332855224609375}],["Which textual range to select after the edit.\nThe range is interpreted in the file that `edit` applies to.\nIf present and `start == end`, the cursor is moved to `start` and nothing is selected.\nIf not present, the selection is not changed. ",{"type":"ProofWidgets.MakeEditLinkProps → Option Lean.Lsp.Range","name":"ProofWidgets.MakeEditLinkProps.newSelection?","isProp":false,"docString":"Which textual range to select after the edit.\nThe range is interpreted in the file that `edit` applies to.\nIf present and `start == end`, the cursor is moved to `start` and nothing is selected.\nIf not present, the selection is not changed. ","distance":1.9761135852304929638734165564528666436672210693359375}],["`castPosNum` casts a `PosNum` into any type which has `1` and `+`. ",{"type":"{α : Type u_1} → [inst : One α] → [inst : Add α] → PosNum → α","name":"castPosNum","isProp":false,"docString":"`castPosNum` casts a `PosNum` into any type which has `1` and `+`. ","distance":1.97904906175531447587445654789917171001434326171875}],["The universal set `Set.univ` in a preconnected space is a preconnected set. ",{"type":"∀ {α : Type u} [inst : TopologicalSpace α] [self : PreconnectedSpace α], IsPreconnected Set.univ","name":"PreconnectedSpace.isPreconnected_univ","isProp":true,"docString":"The universal set `Set.univ` in a preconnected space is a preconnected set. ","distance":1.9816996646604980725214772974140942096710205078125}],["Right-shift the binary representation of a `PosNum`. ",{"type":"PosNum → ℕ → Num","name":"PosNum.shiftr","isProp":false,"docString":"Right-shift the binary representation of a `PosNum`. ","distance":1.982390262051981100199782304116524755954742431640625}],["Converts `x : Num` to `-x : ZNum`. ",{"type":"Num → ZNum","name":"Num.toZNumNeg","isProp":false,"docString":"Converts `x : Num` to `-x : ZNum`. ","distance":1.9842625270894787004039017119794152677059173583984375}],["Convert a pre-set to a `set` of pre-sets. ",{"type":"PSet → Set PSet","name":"PSet.toSet","isProp":false,"docString":"Convert a pre-set to a `set` of pre-sets. ","distance":1.984793973178204939955548979924060404300689697265625}],["Auxiliary function for `getRawProjections`.\nFind custom projections, automatically found by simps.\nThese come from `DFunLike` and `SetLike` instances. ",{"type":"Lean.Name → Array Simps.ParsedProjectionData → Lean.CoreM (Array Simps.ParsedProjectionData)","name":"Simps.findAutomaticProjections","isProp":false,"docString":"Auxiliary function for `getRawProjections`.\nFind custom projections, automatically found by simps.\nThese come from `DFunLike` and `SetLike` instances. ","distance":1.984891243682972206130443737492896616458892822265625}],["This is the `List.sum` version of `add_neg`",{"type":"∀ {G : Type u_7} [inst : AddCommGroup G] (L : List G), -List.sum L = List.sum (List.map (fun x => -x) L)","name":"List.sum_neg","isProp":true,"docString":"This is the `List.sum` version of `add_neg`","distance":1.9856188529637250894666067324578762054443359375}],["The weighted sum is unaffected by changing the weights to the\ncorresponding indicator function and adding points to the set. ",{"type":"∀ {k : Type u_1} {V : Type u_2} {P : Type u_3} [inst : Ring k] [inst_1 : AddCommGroup V] [inst_2 : Module k V]\n  [S : AddTorsor V P] {ι : Type u_4} (w : ι → k) (p : ι → P) {s₁ s₂ : Finset ι},\n  s₁ ⊆ s₂ → (Finset.weightedVSub s₁ p) w = (Finset.weightedVSub s₂ p) (Set.indicator (↑s₁) w)","name":"Finset.weightedVSub_indicator_subset","isProp":true,"docString":"The weighted sum is unaffected by changing the weights to the\ncorresponding indicator function and adding points to the set. ","distance":1.9859920252898872750080272453487850725650787353515625}],["The predecessor of a `PosNum` as a `Num`. ",{"type":"PosNum → Num","name":"PosNum.pred'","isProp":false,"docString":"The predecessor of a `PosNum` as a `Num`. ","distance":1.98625131949340438808349063037894666194915771484375}],["`centroidWeights` gives the weights for the centroid as a\nconstant function, which is suitable when summing over the points\nwhose centroid is being taken.  This function gives the weights in a\nform suitable for summing over a larger set of points, as an indicator\nfunction that is zero outside the set whose centroid is being taken.\nIn the case of a `Fintype`, the sum may be over `univ`. ",{"type":"(k : Type u_1) → [inst : DivisionRing k] → {ι : Type u_4} → Finset ι → ι → k","name":"Finset.centroidWeightsIndicator","isProp":false,"docString":"`centroidWeights` gives the weights for the centroid as a\nconstant function, which is suitable when summing over the points\nwhose centroid is being taken.  This function gives the weights in a\nform suitable for summing over a larger set of points, as an indicator\nfunction that is zero outside the set whose centroid is being taken.\nIn the case of a `Fintype`, the sum may be over `univ`. ","distance":1.988840591474869246013668089290149509906768798828125}],["the condition that `premap` is in the presieve ",{"type":"∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] {D : Type u₂} [inst_1 : CategoryTheory.Category.{v₂, u₂} D]\n  {F : CategoryTheory.Functor C D} {X : C} {S : CategoryTheory.Presieve X} {Y : D} {f : Y ⟶ F.obj X}\n  (self : CategoryTheory.Presieve.FunctorPushforwardStructure F S f), S self.premap","name":"CategoryTheory.Presieve.FunctorPushforwardStructure.cover","isProp":true,"docString":"the condition that `premap` is in the presieve ","distance":1.9902122677305220665999740958795882761478424072265625}],["A special case of `Set.image_finset_sum_pi` for `Finset.univ`. ",{"type":"∀ {ι : Type u_1} {α : Type u_2} [inst : AddCommMonoid α] [inst_1 : Fintype ι] (S : ι → Set α),\n  (fun f => Finset.sum Finset.univ fun i => f i) '' Set.pi Set.univ S = Finset.sum Finset.univ fun i => S i","name":"Set.image_fintype_sum_pi","isProp":true,"docString":"A special case of `Set.image_finset_sum_pi` for `Finset.univ`. ","distance":1.99253313113506802523033911711536347866058349609375}],["Left-shift the binary representation of a `PosNum`. ",{"type":"PosNum → ℕ → PosNum","name":"PosNum.shiftl","isProp":false,"docString":"Left-shift the binary representation of a `PosNum`. ","distance":1.992924388091615650608900978113524615764617919921875}],["The restriction of a presheafed space along an open embedding into the space.\n",{"type":"{C : Type u_1} →\n  [inst : CategoryTheory.Category.{u_2, u_1} C] →\n    {U : TopCat} →\n      (X : AlgebraicGeometry.PresheafedSpace C) → {f : U ⟶ ↑X} → OpenEmbedding ⇑f → AlgebraicGeometry.PresheafedSpace C","name":"AlgebraicGeometry.PresheafedSpace.restrict","isProp":false,"docString":"The restriction of a presheafed space along an open embedding into the space.\n","distance":1.993008412974163423569962105830200016498565673828125}],["If a preconnected set contains endpoints of an interval, then it includes the whole interval. ",{"type":"∀ {α : Type v} [inst : LinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderClosedTopology α] {s : Set α},\n  IsPreconnected s → ∀ {a b : α}, a ∈ s → b ∈ s → Set.Icc a b ⊆ s","name":"IsPreconnected.Icc_subset","isProp":true,"docString":"If a preconnected set contains endpoints of an interval, then it includes the whole interval. ","distance":1.993583999602709599940908447024412453174591064453125}]]