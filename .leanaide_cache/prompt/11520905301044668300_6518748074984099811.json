[["The command `sudo set_option name val` is similar to `set_option name val`,\nbut it also allows to set undeclared options.\n",{"type":"Lean.ParserDescr","name":"commandSudoSet_option___","isProp":false,"docString":"The command `sudo set_option name val` is similar to `set_option name val`,\nbut it also allows to set undeclared options.\n","distance":1.957810673652277788647779743769206106662750244140625}],[" For complex numbers `u` with positive real part and natural number `n`, the Beta function `β(u, n+1)` equals `fact(n) / prod(i in range (n+1), u + i)`.",{"type":"∀ {u : ℂ}, 0 < u.re → ∀ (n : ℕ), u.betaIntegral (↑n + 1) = ↑n.factorial / (Finset.range (n + 1)).prod fun j => u + ↑j","name":"Complex.betaIntegral_eval_nat_add_one_right","isProp":true,"docString":" For complex numbers `u` with positive real part and natural number `n`, the Beta function `β(u, n+1)` equals `fact(n) / prod(i in range (n+1), u + i)`.","distance":1.989702731419691783543157725944183766841888427734375}],["This theorem provides an explicit formula for the Beta function in the complex plane when the second argument is a positive integer. For any complex number `u` with positive real part and any natural number `n`, the Beta function of `u` and `n + 1` is equal to the factorial of `n` divided by the product of `u` plus each natural number less than `n + 1`.",{"type":"∀ {u : ℂ}, 0 < u.re → ∀ (n : ℕ), u.betaIntegral (↑n + 1) = ↑n.factorial / (Finset.range (n + 1)).prod fun j => u + ↑j","name":"Complex.betaIntegral_eval_nat_add_one_right","isProp":true,"docString":"This theorem provides an explicit formula for the Beta function in the complex plane when the second argument is a positive integer. For any complex number `u` with positive real part and any natural number `n`, the Beta function of `u` and `n + 1` is equal to the factorial of `n` divided by the product of `u` plus each natural number less than `n + 1`.","distance":1.9880030599181852668522196836420334875583648681640625}],["The default priority `default = 1000`, which is used when no priority is set. ",{"type":"Lean.ParserDescr","name":"prioDefault","isProp":false,"docString":"The default priority `default = 1000`, which is used when no priority is set. ","distance":1.9652741454161599676808691583573818206787109375}],[" For all natural numbers `n`, converting `n` to another type and then back to a natural number results in the original natural number `n`.",{"type":"∀ (n : ℕ), ↑n = ↑n","name":"Nat.cast_withBot","isProp":true,"docString":" For all natural numbers `n`, converting `n` to another type and then back to a natural number results in the original natural number `n`.","distance":1.993252843114356576137424781336449086666107177734375}],["The theorem `Nat.prime_two` asserts that the number 2 is a prime number. In the context of natural numbers, a prime number is defined as a natural number greater than or equal to 2 whose only divisors are itself and 1. Therefore, this theorem is confirming that 2, which is divisible only by itself and 1, satisfies this property and is therefore a prime number.",{"type":"Nat.Prime 2","name":"Nat.prime_two","isProp":true,"docString":"The theorem `Nat.prime_two` asserts that the number 2 is a prime number. In the context of natural numbers, a prime number is defined as a natural number greater than or equal to 2 whose only divisors are itself and 1. Therefore, this theorem is confirming that 2, which is divisible only by itself and 1, satisfies this property and is therefore a prime number.","distance":1.9882709939195775117326547842822037637233734130859375}],["`sqrt z` is the square root of an integer `z`. If `z` is positive, it returns the largest\ninteger `r` such that `r * r ≤ n`. If it is negative, it returns `0`. For example, `sqrt (-1) = 0`,\n`sqrt 1 = 1`, `sqrt 2 = 1` ",{"type":"ℤ → ℤ","name":"Int.sqrt","isProp":false,"docString":"`sqrt z` is the square root of an integer `z`. If `z` is positive, it returns the largest\ninteger `r` such that `r * r ≤ n`. If it is negative, it returns `0`. For example, `sqrt (-1) = 0`,\n`sqrt 1 = 1`, `sqrt 2 = 1` ","distance":1.9698447315126734746826286936993710696697235107421875}],["Count the heartbeats used in the enclosed command.\n\nThis is most useful for setting sufficient but reasonable limits via `set_option maxHeartbeats`\nfor long running declarations.\n\nIf you do so, please resist the temptation to set the limit as low as possible.\nAs the `simp` set and other features of the library evolve,\nother contributors will find that their (likely unrelated) changes\nhave pushed the declaration over the limit.\n`count_heartbearts in` will automatically suggest a `set_option maxHeartbeats` via \"Try this:\"\nusing the least number of the form `2^k * 200000` that suffices.\n\nNote that that internal heartbeat counter accessible via `IO.getNumHeartbeats`\nhas granularity 1000 times finer that the limits set by `set_option maxHeartbeats`.\nAs this is intended as a user command, we divide by 1000.\n",{"type":"Lean.ParserDescr","name":"Mathlib.CountHeartbeats.commandCount_heartbeatsIn__","isProp":false,"docString":"Count the heartbeats used in the enclosed command.\n\nThis is most useful for setting sufficient but reasonable limits via `set_option maxHeartbeats`\nfor long running declarations.\n\nIf you do so, please resist the temptation to set the limit as low as possible.\nAs the `simp` set and other features of the library evolve,\nother contributors will find that their (likely unrelated) changes\nhave pushed the declaration over the limit.\n`count_heartbearts in` will automatically suggest a `set_option maxHeartbeats` via \"Try this:\"\nusing the least number of the form `2^k * 200000` that suffices.\n\nNote that that internal heartbeat counter accessible via `IO.getNumHeartbeats`\nhas granularity 1000 times finer that the limits set by `set_option maxHeartbeats`.\nAs this is intended as a user command, we divide by 1000.\n","distance":1.970539401000162005317406510584987699985504150390625}],["The distortion of a box `I` is the maximum of the ratios of the lengths of its edges.\nIt is defined as the maximum of the ratios\n`nndist I.lower I.upper / nndist (I.lower i) (I.upper i)`. ",{"type":"{ι : Type u_1} → [inst : Fintype ι] → BoxIntegral.Box ι → NNReal","name":"BoxIntegral.Box.distortion","isProp":false,"docString":"The distortion of a box `I` is the maximum of the ratios of the lengths of its edges.\nIt is defined as the maximum of the ratios\n`nndist I.lower I.upper / nndist (I.lower i) (I.upper i)`. ","distance":1.971086696078339084436947814538143575191497802734375}],["The command `sudo set_option name val in term` is similar to `set_option name val in term`,\nbut it also allows to set undeclared options.\n",{"type":"Lean.ParserDescr","name":"termSudoSet_option___In_","isProp":false,"docString":"The command `sudo set_option name val in term` is similar to `set_option name val in term`,\nbut it also allows to set undeclared options.\n","distance":1.971434111050859083746900068945251405239105224609375}],["The von Neumann bornology defined by the von Neumann bounded sets.\n\nNote that this is not registered as an instance, in order to avoid diamonds with the\nmetric bornology.",{"type":"(𝕜 : Type u_1) →\n  (E : Type u_3) →\n    [inst : NormedField 𝕜] →\n      [inst_1 : AddCommGroup E] →\n        [inst_2 : Module 𝕜 E] → [inst_3 : TopologicalSpace E] → [inst : ContinuousSMul 𝕜 E] → Bornology E","name":"Bornology.vonNBornology","isProp":false,"docString":"The von Neumann bornology defined by the von Neumann bounded sets.\n\nNote that this is not registered as an instance, in order to avoid diamonds with the\nmetric bornology.","distance":1.9725456076842784458591495422297157347202301025390625}],["The action of the original normed_field on `RestrictScalars 𝕜 𝕜' E`.\nThis is not an instance as it would be contrary to the purpose of `RestrictScalars`.\n",{"type":"{𝕜 : Type u_8} →\n  {𝕜' : Type u_9} →\n    {E : Type u_10} →\n      [inst : NormedField 𝕜'] →\n        [inst_1 : SeminormedAddCommGroup E] → [I : NormedSpace 𝕜' E] → NormedSpace 𝕜' (RestrictScalars 𝕜 𝕜' E)","name":"Module.RestrictScalars.normedSpaceOrig","isProp":false,"docString":"The action of the original normed_field on `RestrictScalars 𝕜 𝕜' E`.\nThis is not an instance as it would be contrary to the purpose of `RestrictScalars`.\n","distance":1.97392337788884741911488163168542087078094482421875}],["Create an element of type `Order.Ideal.PrimePair` from an ideal satisfying the predicate\n`Order.Ideal.IsPrime`. ",{"type":"{P : Type u_1} → [inst : Preorder P] → {I : Order.Ideal P} → Order.Ideal.IsPrime I → Order.Ideal.PrimePair P","name":"Order.Ideal.IsPrime.toPrimePair","isProp":false,"docString":"Create an element of type `Order.Ideal.PrimePair` from an ideal satisfying the predicate\n`Order.Ideal.IsPrime`. ","distance":1.9741859197269653325435001534060575067996978759765625}],["Reverse of `Set.codRestrict_restrict`. ",{"type":"∀ {α : Type u_1} {β : Type u_2} {s : Set α} {t : Set β} {f : α → β} (h : Set.MapsTo f s t),\n  Set.MapsTo.restrict f s t h = Set.codRestrict (Set.restrict s f) t (_ : ∀ (x : ↑s), f ↑x ∈ t)","name":"Set.MapsTo.restrict_eq_codRestrict","isProp":true,"docString":"Reverse of `Set.codRestrict_restrict`. ","distance":1.97607036501591437627212144434452056884765625}],["Return the current `maxHeartbeats`. ",{"type":"Lean.CoreM ℕ","name":"getMaxHeartbeats","isProp":false,"docString":"Return the current `maxHeartbeats`. ","distance":1.9761508757598378327458021885831840336322784423828125}],["Create an element of type `Order.Ideal` from a set satisfying the predicate\n`Order.IsIdeal`. ",{"type":"{P : Type u_1} → [inst : LE P] → {I : Set P} → Order.IsIdeal I → Order.Ideal P","name":"Order.IsIdeal.toIdeal","isProp":false,"docString":"Create an element of type `Order.Ideal` from a set satisfying the predicate\n`Order.IsIdeal`. ","distance":1.976907265422999326887065763003192842006683349609375}],["`IsSpecial'` is an alternative of `IsSpecial`. ",{"type":"PNat.XgcdType → Prop","name":"PNat.XgcdType.IsSpecial'","isProp":false,"docString":"`IsSpecial'` is an alternative of `IsSpecial`. ","distance":1.9769985005248014164891401378554292023181915283203125}],["`properDivisors n` is the `Finset` of divisors of `n`, other than `n`.\nAs a special case, `properDivisors 0 = ∅`. ",{"type":"ℕ → Finset ℕ","name":"Nat.properDivisors","isProp":false,"docString":"`properDivisors n` is the `Finset` of divisors of `n`, other than `n`.\nAs a special case, `properDivisors 0 = ∅`. ","distance":1.9801794950421529595274705570773221552371978759765625}],["The exponential characteristic is a prime number or one.\nSee also `CharP.char_is_prime_or_zero`. ",{"type":"∀ (R : Type u) [inst : Semiring R] (q : ℕ) [hq : ExpChar R q], Nat.Prime q ∨ q = 1","name":"expChar_is_prime_or_one","isProp":true,"docString":"The exponential characteristic is a prime number or one.\nSee also `CharP.char_is_prime_or_zero`. ","distance":1.9809977101184728098814957775175571441650390625}],["Auxiliary function for `getRawProjections`.\nGenerates the default projection, and looks for a custom projection declared by the user,\nand replaces the default projection with the custom one, if it can find it. ",{"type":"Lean.Name → Simps.ParsedProjectionData → List Lean.Level → Lean.CoreM Simps.ParsedProjectionData","name":"Simps.findProjection","isProp":false,"docString":"Auxiliary function for `getRawProjections`.\nGenerates the default projection, and looks for a custom projection declared by the user,\nand replaces the default projection with the custom one, if it can find it. ","distance":1.981193911432963972174547961913049221038818359375}],["`normalClosure` as a `ClosureOperator`. ",{"type":"(F : Type u_1) →\n  (L : Type u_3) →\n    [inst : Field F] →\n      [inst_1 : Field L] → [inst_2 : Algebra F L] → [inst_3 : Normal F L] → ClosureOperator (IntermediateField F L)","name":"IntermediateField.closureOperator","isProp":false,"docString":"`normalClosure` as a `ClosureOperator`. ","distance":1.9815731906748539348228632661630399525165557861328125}],["Returns a code for the constant function outputting a particular natural. ",{"type":"ℕ → Nat.Partrec.Code","name":"Nat.Partrec.Code.const","isProp":false,"docString":"Returns a code for the constant function outputting a particular natural. ","distance":1.9816503872881339187728144679567776620388031005859375}],["TODO: prove this in greater generality. ",{"type":"∀ {m : Type u_2} {n : Type u_3} {R : Type u_5} [inst : Fintype n] [inst_1 : Fintype m] [inst_2 : LinearOrderedField R]\n  (A : Matrix m n R), Matrix.rank (Matrix.transpose A) = Matrix.rank A","name":"Matrix.rank_transpose","isProp":true,"docString":"TODO: prove this in greater generality. ","distance":1.982017355649381418203347493545152246952056884765625}],["This is the `norm_num` plug-in that evaluates Jacobi symbols on natural numbers. ",{"type":"Mathlib.Meta.NormNum.NormNumExt","name":"Tactic.NormNum.evalJacobiSymNat","isProp":false,"docString":"This is the `norm_num` plug-in that evaluates Jacobi symbols on natural numbers. ","distance":1.98235934729339557947014327510260045528411865234375}]]