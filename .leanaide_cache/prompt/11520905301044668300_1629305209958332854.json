[["Returns the \"sign\" of the integer as another integer: `1` for positive numbers,\n`-1` for negative numbers, and `0` for `0`.\n",{"type":"‚Ñ§ ‚Üí ‚Ñ§","name":"Int.sign","isProp":false,"docString":"Returns the \"sign\" of the integer as another integer: `1` for positive numbers,\n`-1` for negative numbers, and `0` for `0`.\n","distance":1.9467589465000350035239762291894294321537017822265625}],[" For an additive group `G` and its subgroup `H`, `coerce H to set = {-} : set G <=> H = G`.",{"type":"‚àÄ {G : Type u_1} [inst : AddGroup G] {H : AddSubgroup G}, ‚ÜëH = Set.univ ‚Üî H = ‚ä§","name":"AddSubgroup.coe_eq_univ","isProp":true,"docString":" For an additive group `G` and its subgroup `H`, `coerce H to set = {-} : set G <=> H = G`.","distance":1.985972777895245400259227608330547809600830078125}],["The theorem `Int.sign_zero` asserts that the sign of the integer 0 is also 0. In other words, when the function `Int.sign` is applied to the integer 0, it returns 0, which is consistent with the definition of the sign function that assigns `0` to `0`, `1` to positive integers, and `-1` to negative integers.",{"type":"Int.sign 0 = 0","name":"Int.sign_zero","isProp":true,"docString":"The theorem `Int.sign_zero` asserts that the sign of the integer 0 is also 0. In other words, when the function `Int.sign` is applied to the integer 0, it returns 0, which is consistent with the definition of the sign function that assigns `0` to `0`, `1` to positive integers, and `-1` to negative integers.","distance":1.9816200407658326465565323815098963677883148193359375}],["Default definition of `min`. ",{"type":"{Œ± : Type u} ‚Üí [inst : LE Œ±] ‚Üí [inst : DecidableRel fun x x_1 => x ‚â§ x_1] ‚Üí Œ± ‚Üí Œ± ‚Üí Œ±","name":"minDefault","isProp":false,"docString":"Default definition of `min`. ","distance":1.969928412576084753027316764928400516510009765625}],[" Given a non-zero point `x` in a topological space `G` with inversion, a nontrivially normed field `ùïú`, a normed additive group `E` over `ùïú` as a normed space, another topological space `H`, and a model `I` with corners, the function `y ‚Ü¶ 1/y` is smooth at `x` in the function space from `E` to `E` and from `H` to `H`.",{"type":"‚àÄ {ùïú : Type u_1} [inst : NontriviallyNormedField ùïú] {H : Type u_2} [inst_1 : TopologicalSpace H] {E : Type u_3}\n  [inst_2 : NormedAddCommGroup E] [inst_3 : NormedSpace ùïú E] {I : ModelWithCorners ùïú E H} {G : Type u_4}\n  [inst_4 : Inv G] [inst_5 : Zero G] [inst_6 : TopologicalSpace G] [inst_7 : ChartedSpace H G] [self : SmoothInv‚ÇÄ I G]\n  ‚¶Éx : G‚¶Ñ, x ‚â† 0 ‚Üí SmoothAt I I (fun y => y‚Åª¬π) x","name":"SmoothInv‚ÇÄ.smoothAt_inv‚ÇÄ","isProp":true,"docString":" Given a non-zero point `x` in a topological space `G` with inversion, a nontrivially normed field `ùïú`, a normed additive group `E` over `ùïú` as a normed space, another topological space `H`, and a model `I` with corners, the function `y ‚Ü¶ 1/y` is smooth at `x` in the function space from `E` to `E` and from `H` to `H`.","distance":1.999556662772025816821042099036276340484619140625}],["This theorem, `hammingDist_pos`, states that for any types `Œπ` and `Œ≤`, where `Œ≤` is a function from `Œπ` to another type and `Œπ` is a fintype, i.e., a finite type, and we have decidable equality for all `i : Œπ` over `Œ≤ i`, then the Hamming distance between two functions `x` and `y` (from `Œπ` to `Œ≤`) is greater than zero if and only if `x` is not equal to `y`. In other words, the Hamming distance measures how different the two functions are, with a zero distance implying that the functions are the same.",{"type":"‚àÄ {Œπ : Type u_2} {Œ≤ : Œπ ‚Üí Type u_3} [inst : Fintype Œπ] [inst_1 : (i : Œπ) ‚Üí DecidableEq (Œ≤ i)] {x y : (i : Œπ) ‚Üí Œ≤ i},\n  0 < hammingDist x y ‚Üî x ‚â† y","name":"hammingDist_pos","isProp":true,"docString":"This theorem, `hammingDist_pos`, states that for any types `Œπ` and `Œ≤`, where `Œ≤` is a function from `Œπ` to another type and `Œπ` is a fintype, i.e., a finite type, and we have decidable equality for all `i : Œπ` over `Œ≤ i`, then the Hamming distance between two functions `x` and `y` (from `Œπ` to `Œ≤`) is greater than zero if and only if `x` is not equal to `y`. In other words, the Hamming distance measures how different the two functions are, with a zero distance implying that the functions are the same.","distance":1.9862508159714471478451969232992269098758697509765625}],["Builds a `Primcodable` instance from an equivalence to a `Primcodable` type. ",{"type":"(Œ± : Type u_1) ‚Üí {Œ≤ : Type u_2} ‚Üí [inst : Primcodable Œ±] ‚Üí Œ≤ ‚âÉ Œ± ‚Üí Primcodable Œ≤","name":"Primcodable.ofEquiv","isProp":false,"docString":"Builds a `Primcodable` instance from an equivalence to a `Primcodable` type. ","distance":1.9708712528197025459775204581092111766338348388671875}],["Construct a `Zero C` for a category with a zero object.\nThis can not be a global instance as it will trigger for every `Zero C` typeclass search.\n",{"type":"(C : Type u) ‚Üí [inst : CategoryTheory.Category.{v, u} C] ‚Üí [inst : CategoryTheory.Limits.HasZeroObject C] ‚Üí Zero C","name":"CategoryTheory.Limits.HasZeroObject.zero'","isProp":false,"docString":"Construct a `Zero C` for a category with a zero object.\nThis can not be a global instance as it will trigger for every `Zero C` typeclass search.\n","distance":1.972075256072314264343958711833693087100982666015625}],["A type endowed with `0` and unary `-` is an `NegZeroClass`, if it admits an\ninjective map that preserves `0` and unary `-` to an `NegZeroClass`.",{"type":"{M‚ÇÅ : Type u_1} ‚Üí\n  {M‚ÇÇ : Type u_2} ‚Üí\n    [inst : Zero M‚ÇÅ] ‚Üí\n      [inst_1 : Neg M‚ÇÅ] ‚Üí\n        [inst_2 : NegZeroClass M‚ÇÇ] ‚Üí\n          (f : M‚ÇÅ ‚Üí M‚ÇÇ) ‚Üí Function.Injective f ‚Üí f 0 = 0 ‚Üí (‚àÄ (x : M‚ÇÅ), f (-x) = -f x) ‚Üí NegZeroClass M‚ÇÅ","name":"Function.Injective.negZeroClass","isProp":false,"docString":"A type endowed with `0` and unary `-` is an `NegZeroClass`, if it admits an\ninjective map that preserves `0` and unary `-` to an `NegZeroClass`.","distance":1.9734766421901477340128394644125364720821380615234375}],["Returns the projection information of a structure. ",{"type":"List Simps.ProjectionData ‚Üí String ‚Üí Lean.Name ‚Üí Lean.MessageData","name":"Simps.projectionsInfo","isProp":false,"docString":"Returns the projection information of a structure. ","distance":1.973492038133996206994424937875010073184967041015625}],["Characterization of minimizers for the projection on a convex set in a real inner product\nspace. ",{"type":"‚àÄ {F : Type u_3} [inst : NormedAddCommGroup F] [inst_1 : InnerProductSpace ‚Ñù F] {K : Set F},\n  Convex ‚Ñù K ‚Üí ‚àÄ {u v : F}, v ‚àà K ‚Üí (‚Äñu - v‚Äñ = ‚®Ö w, ‚Äñu - ‚Üëw‚Äñ ‚Üî ‚àÄ w ‚àà K, ‚ü™u - v, w - v‚ü´_‚Ñù ‚â§ 0)","name":"norm_eq_iInf_iff_real_inner_le_zero","isProp":true,"docString":"Characterization of minimizers for the projection on a convex set in a real inner product\nspace. ","distance":1.973646177500224752066060318611562252044677734375}],["Checks that `id` has not already been `#align`ed or `#noalign`ed. ",{"type":"{m : Type ‚Üí Type} ‚Üí [inst : Monad m] ‚Üí [inst : Lean.MonadEnv m] ‚Üí [inst : Lean.MonadError m] ‚Üí Lean.Name ‚Üí m Unit","name":"Mathlib.Prelude.Rename.ensureUnused","isProp":false,"docString":"Checks that `id` has not already been `#align`ed or `#noalign`ed. ","distance":1.974317156649159965553508300217799842357635498046875}],["Corresponds to `zero_eq_dist`. ",{"type":"‚àÄ {Œπ : Type u_2} {Œ≤ : Œπ ‚Üí Type u_3} [inst : Fintype Œπ] [inst_1 : (i : Œπ) ‚Üí DecidableEq (Œ≤ i)] {x y : (i : Œπ) ‚Üí Œ≤ i},\n  0 = hammingDist x y ‚Üî x = y","name":"hamming_zero_eq_dist","isProp":true,"docString":"Corresponds to `zero_eq_dist`. ","distance":1.9749726315315940805561467641382478177547454833984375}],["Given a point `x` in a product space `Œ† (n : ‚Ñï), E n`, and `s` a subset of this space, then\n`shortestPrefixDiff x s` if the smallest `n` for which there is no element of `s` having the same\nprefix of length `n` as `x`. If there is no such `n`, then use `0` by convention. ",{"type":"{E : ‚Ñï ‚Üí Type u_2} ‚Üí ((n : ‚Ñï) ‚Üí E n) ‚Üí Set ((n : ‚Ñï) ‚Üí E n) ‚Üí ‚Ñï","name":"PiNat.shortestPrefixDiff","isProp":false,"docString":"Given a point `x` in a product space `Œ† (n : ‚Ñï), E n`, and `s` a subset of this space, then\n`shortestPrefixDiff x s` if the smallest `n` for which there is no element of `s` having the same\nprefix of length `n` as `x`. If there is no such `n`, then use `0` by convention. ","distance":1.975649705858745885933558383840136229991912841796875}],["Attribute for identifying `positivity` extensions. ",{"type":"Lean.ParserDescr","name":"positivity","isProp":false,"docString":"Attribute for identifying `positivity` extensions. ","distance":1.976148293765700003632446168921887874603271484375}],["Parse a rule for `initialize_simps_projections`. It is `<name>‚Üí<name>`, `-<name>`, `+<name>`\nor `as_prefix <name>`.",{"type":"Lean.Syntax ‚Üí Lean.Elab.Command.CommandElabM Simps.ProjectionRule","name":"Simps.elabSimpsRule","isProp":false,"docString":"Parse a rule for `initialize_simps_projections`. It is `<name>‚Üí<name>`, `-<name>`, `+<name>`\nor `as_prefix <name>`.","distance":1.977051854469350278264982989639975130558013916015625}],["Canonical prefunctor from `B` to `free_bicategory B`. ",{"type":"{B : Type u} ‚Üí [inst : Quiver B] ‚Üí B ‚•§q CategoryTheory.FreeBicategory B","name":"CategoryTheory.FreeBicategory.of","isProp":false,"docString":"Canonical prefunctor from `B` to `free_bicategory B`. ","distance":1.9771336106577137581297165525029413402080535888671875}],["specialized cases distinction for an arrow in the category of 0-length type vectors ",{"type":"{Œ≤ : TypeVec.Arrow Fin2.elim0 Fin2.elim0 ‚Üí Sort u_1} ‚Üí\n  Œ≤ TypeVec.nilFun ‚Üí (f : TypeVec.Arrow Fin2.elim0 Fin2.elim0) ‚Üí Œ≤ f","name":"TypeVec.typevecCasesNil‚ÇÇ","isProp":false,"docString":"specialized cases distinction for an arrow in the category of 0-length type vectors ","distance":1.9774452751491511381942700609215535223484039306640625}],["A `PreconnectedSpace` version of `isPreconnected.constant` ",{"type":"‚àÄ {Œ± : Type u} [inst : TopologicalSpace Œ±] {Y : Type u_3} [inst_1 : TopologicalSpace Y] [inst_2 : DiscreteTopology Y],\n  PreconnectedSpace Œ± ‚Üí ‚àÄ {f : Œ± ‚Üí Y}, Continuous f ‚Üí ‚àÄ {x y : Œ±}, f x = f y","name":"PreconnectedSpace.constant","isProp":true,"docString":"A `PreconnectedSpace` version of `isPreconnected.constant` ","distance":1.979882773487851910232393493060953915119171142578125}],["Function elaborating `initialize_simps_projections`. ",{"type":"Lean.Elab.Command.CommandElab","name":"Simps.elabInitializeSimpsProjections","isProp":false,"docString":"Function elaborating `initialize_simps_projections`. ","distance":1.9814405222670596895540029436233453452587127685546875}],["cases distinction for an arrow in the category of 0-length type vectors ",{"type":"{Œ≤ : (v : TypeVec.{u_2} 0) ‚Üí (v' : TypeVec.{u_3} 0) ‚Üí TypeVec.Arrow v v' ‚Üí Sort u_1} ‚Üí\n  Œ≤ Fin2.elim0 Fin2.elim0 TypeVec.nilFun ‚Üí\n    (v : TypeVec.{u_2} 0) ‚Üí (v' : TypeVec.{u_3} 0) ‚Üí (fs : TypeVec.Arrow v v') ‚Üí Œ≤ v v' fs","name":"TypeVec.typevecCasesNil‚ÇÉ","isProp":false,"docString":"cases distinction for an arrow in the category of 0-length type vectors ","distance":1.98182966639499102967647559125907719135284423828125}],["**Minimum principle** for concave functions on a segment. If a function `f` is concave on the\nsegment `[x, y]`, then the eventual minimum of `f` on `[x, y]` is at `x` or `y`. ",{"type":"‚àÄ {ùïú : Type u_1} {E : Type u_2} {Œ≤ : Type u_4} [inst : LinearOrderedField ùïú] [inst_1 : AddCommGroup E]\n  [inst_2 : LinearOrderedAddCommGroup Œ≤] [inst_3 : Module ùïú E] [inst_4 : Module ùïú Œ≤] [inst_5 : OrderedSMul ùïú Œ≤]\n  {f : E ‚Üí Œ≤} {x y z : E}, ConcaveOn ùïú (segment ùïú x y) f ‚Üí z ‚àà segment ùïú x y ‚Üí min (f x) (f y) ‚â§ f z","name":"ConcaveOn.min_le_of_mem_segment","isProp":true,"docString":"**Minimum principle** for concave functions on a segment. If a function `f` is concave on the\nsegment `[x, y]`, then the eventual minimum of `f` on `[x, y]` is at `x` or `y`. ","distance":1.9826075204678319519047136054723523557186126708984375}],["The set of functions on `X ‚äï Y` that are candidates distances to realize the\nminimum of the Hausdorff distances between `X` and `Y` in a coupling. ",{"type":"(X : Type u) ‚Üí (Y : Type v) ‚Üí [inst : MetricSpace X] ‚Üí [inst : MetricSpace Y] ‚Üí Set (GromovHausdorff.ProdSpaceFun X Y)","name":"GromovHausdorff.candidates","isProp":false,"docString":"The set of functions on `X ‚äï Y` that are candidates distances to realize the\nminimum of the Hausdorff distances between `X` and `Y` in a coupling. ","distance":1.982977843548765495285124416113831102848052978515625}],["**Minimum principle** for concave functions on an interval. If a function `f` is concave on the\ninterval `[x, y]`, then the eventual minimum of `f` on `[x, y]` is at `x` or `y`. ",{"type":"‚àÄ {ùïú : Type u_1} {Œ≤ : Type u_4} [inst : LinearOrderedField ùïú] [inst_1 : LinearOrderedAddCommGroup Œ≤]\n  [inst_2 : Module ùïú Œ≤] [inst_3 : OrderedSMul ùïú Œ≤] {f : ùïú ‚Üí Œ≤} {x y z : ùïú},\n  ConcaveOn ùïú (Set.Icc x y) f ‚Üí z ‚àà Set.Icc x y ‚Üí min (f x) (f y) ‚â§ f z","name":"ConcaveOn.min_le_of_mem_Icc","isProp":true,"docString":"**Minimum principle** for concave functions on an interval. If a function `f` is concave on the\ninterval `[x, y]`, then the eventual minimum of `f` on `[x, y]` is at `x` or `y`. ","distance":1.9840323426731087952390453210682608187198638916015625}]]