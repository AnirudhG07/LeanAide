[["The value `BoxIntegral.IntegrationParams.GP = ‚ä•`\n(`bRiemann = false`, `bHenstock = true`, `bDistortion = true`)\ncorresponds to a generalization of the Henstock integral such that the Divergence theorem holds true\nwithout additional integrability assumptions, see the module docstring for details. ",{"type":"Inhabited BoxIntegral.IntegrationParams","name":"BoxIntegral.IntegrationParams.instInhabitedIntegrationParams","isProp":false,"docString":"The value `BoxIntegral.IntegrationParams.GP = ‚ä•`\n(`bRiemann = false`, `bHenstock = true`, `bDistortion = true`)\ncorresponds to a generalization of the Henstock integral such that the Divergence theorem holds true\nwithout additional integrability assumptions, see the module docstring for details. ","distance":1.962503073859607649609415602753870189189910888671875}],[" If `A` is a set-like type, `M‚ÇÅ` has an identity element `e` for some operation, and `1` is in class `OneMemClass`, then `coe (1 : M‚ÇÅ) = e`.",{"type":"‚àÄ {A : Type u_4} {M‚ÇÅ : Type u_5} [inst : SetLike A M‚ÇÅ] [inst_1 : One M‚ÇÅ] [hA : OneMemClass A M‚ÇÅ] (S' : A), ‚Üë1 = 1","name":"OneMemClass.coe_one","isProp":true,"docString":" If `A` is a set-like type, `M‚ÇÅ` has an identity element `e` for some operation, and `1` is in class `OneMemClass`, then `coe (1 : M‚ÇÅ) = e`.","distance":1.9821853634777497621399788840790279209613800048828125}],["The theorem `RatFunc.num_zero` states that for any type `K` that is a field, the numerator of the zero rational function (which is represented as `RatFunc.num 0`) is zero. In other words, if you have a rational function which is zero, then its numerator is also zero. This is applicable in any field `K`.",{"type":"‚àÄ {K : Type u} [inst : Field K], RatFunc.num 0 = 0","name":"RatFunc.num_zero","isProp":true,"docString":"The theorem `RatFunc.num_zero` states that for any type `K` that is a field, the numerator of the zero rational function (which is represented as `RatFunc.num 0`) is zero. In other words, if you have a rational function which is zero, then its numerator is also zero. This is applicable in any field `K`.","distance":1.990075016895250126225391795742325484752655029296875}],["Shortcut instance to help typeclass inference out. ",{"type":"{V : Type u_1} ‚Üí\n  {P : Type u_2} ‚Üí\n    [inst : NormedAddCommGroup V] ‚Üí [inst_1 : MetricSpace P] ‚Üí [inst_2 : NormedAddTorsor V P] ‚Üí AddTorsor V P","name":"NormedAddTorsor.toAddTorsor'","isProp":false,"docString":"Shortcut instance to help typeclass inference out. ","distance":1.962986817432071262601311900652945041656494140625}],[" The hyperbolic sine function is an odd function, i.e., $\\sinh(-x) = -\\sinh(x)$ for all $x \\in \\mathbb{R}$.",{"type":"‚àÄ (x : ‚Ñù), (-x).sinh = -x.sinh","name":"Real.sinh_neg","isProp":true,"docString":" The hyperbolic sine function is an odd function, i.e., $\\sinh(-x) = -\\sinh(x)$ for all $x \\in \\mathbb{R}$.","distance":1.9826604490779995426663617763551883399486541748046875}],["This theorem states that the slit plane (which is the complex plane with the closed negative real axis removed) is star-convex at any positive number. In other words, for any positive complex number `z`, every line segment that starts at `z` and ends at any point in the slit plane is entirely contained within the slit plane.",{"type":"‚àÄ {z : ‚ÑÇ}, 0 < z ‚Üí StarConvex ‚Ñù z Complex.slitPlane","name":"Complex.starConvex_slitPlane","isProp":true,"docString":"This theorem states that the slit plane (which is the complex plane with the closed negative real axis removed) is star-convex at any positive number. In other words, for any positive complex number `z`, every line segment that starts at `z` and ends at any point in the slit plane is entirely contained within the slit plane.","distance":1.993627817539241231514779428835026919841766357421875}],["Construct a `Zero C` for a category with a zero object.\nThis can not be a global instance as it will trigger for every `Zero C` typeclass search.\n",{"type":"(C : Type u) ‚Üí [inst : CategoryTheory.Category.{v, u} C] ‚Üí [inst : CategoryTheory.Limits.HasZeroObject C] ‚Üí Zero C","name":"CategoryTheory.Limits.HasZeroObject.zero'","isProp":false,"docString":"Construct a `Zero C` for a category with a zero object.\nThis can not be a global instance as it will trigger for every `Zero C` typeclass search.\n","distance":1.9667631387976032275588522679754532873630523681640625}],["The stalk at `x` of a `PresheafedSpace`.\n",{"type":"{C : Type u} ‚Üí\n  [inst : CategoryTheory.Category.{v, u} C] ‚Üí\n    [inst_1 : CategoryTheory.Limits.HasColimits C] ‚Üí (X : AlgebraicGeometry.PresheafedSpace C) ‚Üí ‚Üë‚ÜëX ‚Üí C","name":"AlgebraicGeometry.PresheafedSpace.stalk","isProp":false,"docString":"The stalk at `x` of a `PresheafedSpace`.\n","distance":1.967033165901111768647524513653479516506195068359375}],["**Maximum principle** for convex functions on a segment. If a function `f` is convex on the\nsegment `[x, y]`, then the eventual maximum of `f` on `[x, y]` is at `x` or `y`. ",{"type":"‚àÄ {ùïú : Type u_1} {E : Type u_2} {Œ≤ : Type u_4} [inst : LinearOrderedField ùïú] [inst_1 : AddCommGroup E]\n  [inst_2 : LinearOrderedAddCommGroup Œ≤] [inst_3 : Module ùïú E] [inst_4 : Module ùïú Œ≤] [inst_5 : OrderedSMul ùïú Œ≤]\n  {f : E ‚Üí Œ≤} {x y z : E}, ConvexOn ùïú (segment ùïú x y) f ‚Üí z ‚àà segment ùïú x y ‚Üí f z ‚â§ max (f x) (f y)","name":"ConvexOn.le_max_of_mem_segment","isProp":true,"docString":"**Maximum principle** for convex functions on a segment. If a function `f` is convex on the\nsegment `[x, y]`, then the eventual maximum of `f` on `[x, y]` is at `x` or `y`. ","distance":1.971754136867094775453779220697470009326934814453125}],["**Minimum principle** for concave functions on a segment. If a function `f` is concave on the\nsegment `[x, y]`, then the eventual minimum of `f` on `[x, y]` is at `x` or `y`. ",{"type":"‚àÄ {ùïú : Type u_1} {E : Type u_2} {Œ≤ : Type u_4} [inst : LinearOrderedField ùïú] [inst_1 : AddCommGroup E]\n  [inst_2 : LinearOrderedAddCommGroup Œ≤] [inst_3 : Module ùïú E] [inst_4 : Module ùïú Œ≤] [inst_5 : OrderedSMul ùïú Œ≤]\n  {f : E ‚Üí Œ≤} {x y z : E}, ConcaveOn ùïú (segment ùïú x y) f ‚Üí z ‚àà segment ùïú x y ‚Üí min (f x) (f y) ‚â§ f z","name":"ConcaveOn.min_le_of_mem_segment","isProp":true,"docString":"**Minimum principle** for concave functions on a segment. If a function `f` is concave on the\nsegment `[x, y]`, then the eventual minimum of `f` on `[x, y]` is at `x` or `y`. ","distance":1.97360736543047554647500874125398695468902587890625}],["Gadget for marking semi output parameters in type classes.\n\nSemi-output parameters influence the order in which arguments to type class\ninstances are processed.  Lean determines an order where all non-(semi-)output\nparameters to the instance argument have to be figured out before attempting to\nsynthesize an argument (that is, they do not contain assignable metavariables\ncreated during TC synthesis). This rules out instances such as `[Mul Œ≤] : Add\nŒ±` (because `Œ≤` could be anything). Marking a parameter as semi-output is a\npromise that instances of the type class will always fill in a value for that\nparameter.\n\nFor example, the `Coe` class is defined as:\n```\nclass Coe (Œ± : semiOutParam (Sort u)) (Œ≤ : Sort v)\n```\nThis means that all `Coe` instances should provide a concrete value for `Œ±`\n(i.e., not an assignable metavariable). An instance like `Coe Nat Int` or `Coe\nŒ± (Option Œ±)` is fine, but `Coe Œ± Nat` is not since it does not provide a value\nfor `Œ±`.\n",{"type":"Sort u ‚Üí Sort u","name":"semiOutParam","isProp":false,"docString":"Gadget for marking semi output parameters in type classes.\n\nSemi-output parameters influence the order in which arguments to type class\ninstances are processed.  Lean determines an order where all non-(semi-)output\nparameters to the instance argument have to be figured out before attempting to\nsynthesize an argument (that is, they do not contain assignable metavariables\ncreated during TC synthesis). This rules out instances such as `[Mul Œ≤] : Add\nŒ±` (because `Œ≤` could be anything). Marking a parameter as semi-output is a\npromise that instances of the type class will always fill in a value for that\nparameter.\n\nFor example, the `Coe` class is defined as:\n```\nclass Coe (Œ± : semiOutParam (Sort u)) (Œ≤ : Sort v)\n```\nThis means that all `Coe` instances should provide a concrete value for `Œ±`\n(i.e., not an assignable metavariable). An instance like `Coe Nat Int` or `Coe\nŒ± (Option Œ±)` is fine, but `Coe Œ± Nat` is not since it does not provide a value\nfor `Œ±`.\n","distance":1.974280745439573880872785593965090811252593994140625}],["Get the projections used by `simps` associated to a given structure `str`.\n\nThe returned information is also stored in the environment extension `Simps.structureExt`, which\nis given to `str`. If `str` already has this attribute, the information is read from this\nextension instead. See the documentation for this extension for the data this tactic returns.\n\nThe returned universe levels are the universe levels of the structure. For the projections there\nare three cases\n* If the declaration `{StructureName}.Simps.{projectionName}` has been declared, then the value\n  of this declaration is used (after checking that it is definitionally equal to the actual\n  projection. If you rename the projection name, the declaration should have the *new* projection\n  name.\n* You can also declare a custom projection that is a composite of multiple projections.\n* Otherwise, for every class with the `notation_class` attribute, and the structure has an\n  instance of that notation class, then the projection of that notation class is used for the\n  projection that is definitionally equal to it (if there is such a projection).\n  This means in practice that coercions to function types and sorts will be used instead of\n  a projection, if this coercion is definitionally equal to a projection. Furthermore, for\n  notation classes like `Mul` and `Zero` those projections are used instead of the\n  corresponding projection.\n  Projections for coercions and notation classes are not automatically generated if they are\n  composites of multiple projections (for example when you use `extend` without the\n  `oldStructureCmd` (does this exist?)).\n* Otherwise, the projection of the structure is chosen.\n  For example: ``getRawProjections env `Prod`` gives the default projections.\n```\n  ([u, v], [(`fst, `(Prod.fst.{u v}), [0], true, false),\n     (`snd, `(@Prod.snd.{u v}), [1], true, false)])\n```\n\nOptionally, this command accepts three optional arguments:\n* If `traceIfExists` the command will always generate a trace message when the structure already\n  has an entry in `structureExt`.\n* The `rules` argument specifies whether projections should be added, renamed, used as prefix, and\n  not used by default.\n* if `trc` is true, this tactic will trace information just as if\n  `set_option trace.simps.verbose true` was set.\n",{"type":"Lean.Syntax ‚Üí\n  Lean.Name ‚Üí\n    optParam Bool false ‚Üí\n      optParam (Array Simps.ProjectionRule) #[] ‚Üí\n        optParam Bool false ‚Üí Lean.CoreM (List Lean.Name √ó Array Simps.ProjectionData)","name":"Simps.getRawProjections","isProp":false,"docString":"Get the projections used by `simps` associated to a given structure `str`.\n\nThe returned information is also stored in the environment extension `Simps.structureExt`, which\nis given to `str`. If `str` already has this attribute, the information is read from this\nextension instead. See the documentation for this extension for the data this tactic returns.\n\nThe returned universe levels are the universe levels of the structure. For the projections there\nare three cases\n* If the declaration `{StructureName}.Simps.{projectionName}` has been declared, then the value\n  of this declaration is used (after checking that it is definitionally equal to the actual\n  projection. If you rename the projection name, the declaration should have the *new* projection\n  name.\n* You can also declare a custom projection that is a composite of multiple projections.\n* Otherwise, for every class with the `notation_class` attribute, and the structure has an\n  instance of that notation class, then the projection of that notation class is used for the\n  projection that is definitionally equal to it (if there is such a projection).\n  This means in practice that coercions to function types and sorts will be used instead of\n  a projection, if this coercion is definitionally equal to a projection. Furthermore, for\n  notation classes like `Mul` and `Zero` those projections are used instead of the\n  corresponding projection.\n  Projections for coercions and notation classes are not automatically generated if they are\n  composites of multiple projections (for example when you use `extend` without the\n  `oldStructureCmd` (does this exist?)).\n* Otherwise, the projection of the structure is chosen.\n  For example: ``getRawProjections env `Prod`` gives the default projections.\n```\n  ([u, v], [(`fst, `(Prod.fst.{u v}), [0], true, false),\n     (`snd, `(@Prod.snd.{u v}), [1], true, false)])\n```\n\nOptionally, this command accepts three optional arguments:\n* If `traceIfExists` the command will always generate a trace message when the structure already\n  has an entry in `structureExt`.\n* The `rules` argument specifies whether projections should be added, renamed, used as prefix, and\n  not used by default.\n* if `trc` is true, this tactic will trace information just as if\n  `set_option trace.simps.verbose true` was set.\n","distance":1.9753469630799067591198081572656519711017608642578125}],["Construct a bundled `SemigroupCat` from the underlying type and typeclass. ",{"type":"(M : Type u) ‚Üí [inst : Semigroup M] ‚Üí SemigroupCat","name":"SemigroupCat.of","isProp":false,"docString":"Construct a bundled `SemigroupCat` from the underlying type and typeclass. ","distance":1.977587368460251848745201641577295958995819091796875}],["Construct a bundled `MeasCat` from the underlying type and the typeclass. ",{"type":"(Œ± : Type u) ‚Üí [ms : MeasurableSpace Œ±] ‚Üí MeasCat","name":"MeasCat.of","isProp":false,"docString":"Construct a bundled `MeasCat` from the underlying type and the typeclass. ","distance":1.9780228130594339486236776792793534696102142333984375}],["A constructor for objects of the category `CompHaus`,\ntaking a type, and bundling the compact Hausdorff topology\nfound by typeclass inference. ",{"type":"(X : Type u_1) ‚Üí [inst : TopologicalSpace X] ‚Üí [inst_1 : CompactSpace X] ‚Üí [inst : T2Space X] ‚Üí CompHaus","name":"CompHaus.of","isProp":false,"docString":"A constructor for objects of the category `CompHaus`,\ntaking a type, and bundling the compact Hausdorff topology\nfound by typeclass inference. ","distance":1.9780667586680260594533820039941929280757904052734375}],["Construct a bundled `Cat` from the underlying type and the typeclass. ",{"type":"(C : Type u) ‚Üí [inst : CategoryTheory.Category.{v, u} C] ‚Üí CategoryTheory.Cat","name":"CategoryTheory.Cat.of","isProp":false,"docString":"Construct a bundled `Cat` from the underlying type and the typeclass. ","distance":1.9792989867092247724400522201904095709323883056640625}],["Euclidean center of the circle with center `z` and radius `r` in the hyperbolic metric. ",{"type":"UpperHalfPlane ‚Üí ‚Ñù ‚Üí UpperHalfPlane","name":"UpperHalfPlane.center","isProp":false,"docString":"Euclidean center of the circle with center `z` and radius `r` in the hyperbolic metric. ","distance":1.980129956185418649283747072331607341766357421875}],["Construct a bundled `UniformSpace` from the underlying type and the typeclass. ",{"type":"(Œ± : Type u) ‚Üí [inst : UniformSpace Œ±] ‚Üí UniformSpaceCat","name":"UniformSpaceCat.of","isProp":false,"docString":"Construct a bundled `UniformSpace` from the underlying type and the typeclass. ","distance":1.9807395147102806465255753209930844604969024658203125}],["**Maximum principle** for convex functions on an interval. If a function `f` is convex on the\ninterval `[x, y]`, then the eventual maximum of `f` on `[x, y]` is at `x` or `y`. ",{"type":"‚àÄ {ùïú : Type u_1} {Œ≤ : Type u_4} [inst : LinearOrderedField ùïú] [inst_1 : LinearOrderedAddCommGroup Œ≤]\n  [inst_2 : Module ùïú Œ≤] [inst_3 : OrderedSMul ùïú Œ≤] {f : ùïú ‚Üí Œ≤} {x y z : ùïú},\n  ConvexOn ùïú (Set.Icc x y) f ‚Üí z ‚àà Set.Icc x y ‚Üí f z ‚â§ max (f x) (f y)","name":"ConvexOn.le_max_of_mem_Icc","isProp":true,"docString":"**Maximum principle** for convex functions on an interval. If a function `f` is convex on the\ninterval `[x, y]`, then the eventual maximum of `f` on `[x, y]` is at `x` or `y`. ","distance":1.98140477401350079134090265142731368541717529296875}],["Construct a bundled `UniformSpace` from the underlying type and the appropriate typeclasses. ",{"type":"(X : Type u) ‚Üí [inst : UniformSpace X] ‚Üí [inst_1 : CompleteSpace X] ‚Üí [inst : SeparatedSpace X] ‚Üí CpltSepUniformSpace","name":"CpltSepUniformSpace.of","isProp":false,"docString":"Construct a bundled `UniformSpace` from the underlying type and the appropriate typeclasses. ","distance":1.981609279100614795510182375437580049037933349609375}],["A choice-free shortcut instance.",{"type":"‚àÄ (Œ± : Type u) [inst : OrderedAddCommGroup Œ±],\n  ContravariantClass Œ± Œ± (Function.swap fun x x_1 => x + x_1) fun x x_1 => x ‚â§ x_1","name":"OrderedAddCommGroup.to_contravariantClass_right_le","isProp":true,"docString":"A choice-free shortcut instance.","distance":1.981858698802103635472349196788854897022247314453125}],["The name of the global branching preprocessor, used in trace output. ",{"type":"Linarith.GlobalBranchingPreprocessor ‚Üí String","name":"Linarith.GlobalBranchingPreprocessor.name","isProp":false,"docString":"The name of the global branching preprocessor, used in trace output. ","distance":1.982012109867252735995180046302266418933868408203125}],["A `GlobalPreprocessor` lifts to a `GlobalBranchingPreprocessor` by producing only one branch.\n",{"type":"Linarith.GlobalPreprocessor ‚Üí Linarith.GlobalBranchingPreprocessor","name":"Linarith.GlobalPreprocessor.branching","isProp":false,"docString":"A `GlobalPreprocessor` lifts to a `GlobalBranchingPreprocessor` by producing only one branch.\n","distance":1.9825254645704804001837828764109872281551361083984375}],["A function `f : Œ± ‚Üí ‚Ñì^‚àû(Œπ, ‚Ñù)` which is `K`-Lipschitz on a subset `s` admits a `K`-Lipschitz\nextension to the whole space.\n\nTheorem 2.2 of [Assaf Naor, *Metric Embeddings and Lipschitz Extensions*][Naor-2015]\n\nThe same result for the case of a finite type `Œπ` is implemented in\n`LipschitzOnWith.extend_pi`.\n",{"type":"‚àÄ {Œ± : Type u} [inst : PseudoMetricSpace Œ±] {s : Set Œ±} {Œπ : Type u_1} {f : Œ± ‚Üí ‚Ü•(lp (fun i => ‚Ñù) ‚ä§)} {K : NNReal},\n  LipschitzOnWith K f s ‚Üí ‚àÉ g, LipschitzWith K g ‚àß Set.EqOn f g s","name":"LipschitzOnWith.extend_lp_infty","isProp":true,"docString":"A function `f : Œ± ‚Üí ‚Ñì^‚àû(Œπ, ‚Ñù)` which is `K`-Lipschitz on a subset `s` admits a `K`-Lipschitz\nextension to the whole space.\n\nTheorem 2.2 of [Assaf Naor, *Metric Embeddings and Lipschitz Extensions*][Naor-2015]\n\nThe same result for the case of a finite type `Œπ` is implemented in\n`LipschitzOnWith.extend_pi`.\n","distance":1.9827287619810165519851352655678056180477142333984375}]]