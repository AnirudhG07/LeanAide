[["Any graph on `n` vertices has at most `n.choose 2` edges. ",{"type":"∀ {V : Type u_1} {G : SimpleGraph V} [inst : Fintype ↑G.edgeSet] [inst_1 : Fintype V],\n  G.edgeFinset.card ≤ (Fintype.card V).choose 2","name":"SimpleGraph.card_edgeFinset_le_card_choose_two","isProp":true,"docString":"Any graph on `n` vertices has at most `n.choose 2` edges. ","distance":0.7693180194027602336603877120069228112697601318359375}],[" The number of edges in a graph with n vertices is at most n choose 2.",{"type":"∀ {V : Type u_1} {G : SimpleGraph V} [inst : Fintype ↑G.edgeSet] [inst_1 : Fintype V],\n  G.edgeFinset.card ≤ (Fintype.card V).choose 2","name":"SimpleGraph.card_edgeFinset_le_card_choose_two","isProp":true,"docString":" The number of edges in a graph with n vertices is at most n choose 2.","distance":0.783283259851845770072031882591545581817626953125}],["This theorem states that for any given graph 'G' with vertex set 'V', the number of edges in 'G' is at most the binomial coefficient \"n choose 2\", where 'n' is the number of vertices in 'V'. This is a consequence of the fact that any pair of distinct vertices can contribute at most one edge, and there are \"n choose 2\" such pairs in a graph with 'n' vertices.",{"type":"∀ {V : Type u_1} {G : SimpleGraph V} [inst : Fintype ↑G.edgeSet] [inst_1 : Fintype V],\n  G.edgeFinset.card ≤ (Fintype.card V).choose 2","name":"SimpleGraph.card_edgeFinset_le_card_choose_two","isProp":true,"docString":"This theorem states that for any given graph 'G' with vertex set 'V', the number of edges in 'G' is at most the binomial coefficient \"n choose 2\", where 'n' is the number of vertices in 'V'. This is a consequence of the fact that any pair of distinct vertices can contribute at most one edge, and there are \"n choose 2\" such pairs in a graph with 'n' vertices.","distance":0.7756267426398579800661536864936351776123046875}],["The complete graph on `n` vertices has `n.choose 2` edges. ",{"type":"∀ {V : Type u_1} [inst : Fintype V] [inst_1 : DecidableEq V], ⊤.edgeFinset.card = (Fintype.card V).choose 2","name":"SimpleGraph.card_edgeFinset_top_eq_card_choose_two","isProp":true,"docString":"The complete graph on `n` vertices has `n.choose 2` edges. ","distance":0.806383537957766183268404347472824156284332275390625}],[" The complete graph on a finite set of `n` vertices has `n choose 2` edges.",{"type":"∀ {V : Type u_1} [inst : Fintype V] [inst_1 : DecidableEq V], ⊤.edgeFinset.card = (Fintype.card V).choose 2","name":"SimpleGraph.card_edgeFinset_top_eq_card_choose_two","isProp":true,"docString":" The complete graph on a finite set of `n` vertices has `n choose 2` edges.","distance":0.8439962973848447180813536760979332029819488525390625}],["This theorem states that the complete graph on `n` vertices has `n.choose 2` edges. Here, `V` represents the set of vertices and is assumed to be a finite type (`Fintype V`). `DecidableEq V` means that equality between two vertices can be definitively determined. The notation `⊤.edgeFinset.card` represents the number of edges in the complete graph on `V`, and `(Fintype.card V).choose 2` is the binomial coefficient \"n choose 2\", which corresponds to the number of ways to choose 2 elements from a set of `n` elements. Thus, the theorem asserts that the number of edges in a complete graph with `n` vertices is equal to the number of ways to choose 2 vertices from the `n` vertices, which is what is expected in a complete graph since every pair of distinct vertices is connected by an edge.",{"type":"∀ {V : Type u_1} [inst : Fintype V] [inst_1 : DecidableEq V], ⊤.edgeFinset.card = (Fintype.card V).choose 2","name":"SimpleGraph.card_edgeFinset_top_eq_card_choose_two","isProp":true,"docString":"This theorem states that the complete graph on `n` vertices has `n.choose 2` edges. Here, `V` represents the set of vertices and is assumed to be a finite type (`Fintype V`). `DecidableEq V` means that equality between two vertices can be definitively determined. The notation `⊤.edgeFinset.card` represents the number of edges in the complete graph on `V`, and `(Fintype.card V).choose 2` is the binomial coefficient \"n choose 2\", which corresponds to the number of ways to choose 2 elements from a set of `n` elements. Thus, the theorem asserts that the number of edges in a complete graph with `n` vertices is equal to the number of ways to choose 2 vertices from the `n` vertices, which is what is expected in a complete graph since every pair of distinct vertices is connected by an edge.","distance":0.8453047069664643142772320061339996755123138427734375}],["The path graph on `n` vertices. ",{"type":"(n : ℕ) → SimpleGraph (Fin n)","name":"SimpleGraph.pathGraph","isProp":false,"docString":"The path graph on `n` vertices. ","distance":0.95590598102258572676959147429442964494228363037109375}],["Asymptotic lower bound on the **Ruzsa-Szemerédi problem**.\n\nThere exists a graph with `n` vertices and `Ω((n ^ 2 * exp (-4 * sqrt (log n))))` edges such that\neach edge belongs to exactly one triangle. ",{"type":"(fun n => ↑n ^ 2 * Real.exp (-4 * √(Real.log ↑n))) =O[Filter.atTop] fun n => ↑(ruzsaSzemerediNumberNat n)","name":"ruzsaSzemerediNumberNat_asymptotic_lower_bound","isProp":true,"docString":"Asymptotic lower bound on the **Ruzsa-Szemerédi problem**.\n\nThere exists a graph with `n` vertices and `Ω((n ^ 2 * exp (-4 * sqrt (log n))))` edges such that\neach edge belongs to exactly one triangle. ","distance":0.9575007851941332859269095933996140956878662109375}],["Explicit lower bound on the **Ruzsa-Szemerédi problem**.\n\nThere exists a graph with `n` vertices and\n`(n / 3 - 2) * (n - 3) / 6 * exp (-4 * sqrt (log ((n - 3) / 6)))` edges such that each edge belongs\nto exactly one triangle. ",{"type":"∀ (n : ℕ), (↑n / 3 - 2) * ↑((n - 3) / 6) * Real.exp (-4 * √(Real.log ↑((n - 3) / 6))) ≤ ↑(ruzsaSzemerediNumberNat n)","name":"ruzsaSzemerediNumberNat_lower_bound","isProp":true,"docString":"Explicit lower bound on the **Ruzsa-Szemerédi problem**.\n\nThere exists a graph with `n` vertices and\n`(n / 3 - 2) * (n - 3) / 6 * exp (-4 * sqrt (log ((n - 3) / 6)))` edges such that each edge belongs\nto exactly one triangle. ","distance":0.95815405173172774055956324446015059947967529296875}],["The maximum degree of a nonempty graph is less than the number of vertices. Note that the assumption\nthat `V` is nonempty is necessary, as otherwise this would assert the existence of a\nnatural number less than zero. ",{"type":"∀ {V : Type u_1} (G : SimpleGraph V) [inst : Fintype V] [inst_1 : DecidableRel G.Adj] [inst_2 : Nonempty V],\n  G.maxDegree < Fintype.card V","name":"SimpleGraph.maxDegree_lt_card_verts","isProp":true,"docString":"The maximum degree of a nonempty graph is less than the number of vertices. Note that the assumption\nthat `V` is nonempty is necessary, as otherwise this would assert the existence of a\nnatural number less than zero. ","distance":0.96268182396752888241309165096026845276355743408203125}],["A graph has edge-disjoint triangles if each edge belongs to at most one triangle. ",{"type":"{α : Type u_1} → SimpleGraph α → Prop","name":"SimpleGraph.EdgeDisjointTriangles","isProp":false,"docString":"A graph has edge-disjoint triangles if each edge belongs to at most one triangle. ","distance":0.96617090763012314358348930909414775669574737548828125}],["There exists a vertex of maximal degree. Note the assumption of being nonempty is necessary, as\nthe lemma implies there exists a vertex. ",{"type":"∀ {V : Type u_1} (G : SimpleGraph V) [inst : Fintype V] [inst_1 : DecidableRel G.Adj] [inst_2 : Nonempty V],\n  ∃ v, G.maxDegree = G.degree v","name":"SimpleGraph.exists_maximal_degree_vertex","isProp":true,"docString":"There exists a vertex of maximal degree. Note the assumption of being nonempty is necessary, as\nthe lemma implies there exists a vertex. ","distance":0.9783764928688876150175701695843599736690521240234375}],["There is an equivalence between the set of edges incident to a given\nvertex and the set of vertices adjacent to the vertex. ",{"type":"{V : Type u} → (G : SimpleGraph V) → [inst : DecidableEq V] → (v : V) → ↑(G.incidenceSet v) ≃ ↑(G.neighborSet v)","name":"SimpleGraph.incidenceSetEquivNeighborSet","isProp":false,"docString":"There is an equivalence between the set of edges incident to a given\nvertex and the set of vertices adjacent to the vertex. ","distance":0.981036936374951817896317152190022170543670654296875}],["An edge of a graph is a *bridge* if, after removing it, its incident vertices\nare no longer reachable from one another. ",{"type":"{V : Type u} → SimpleGraph V → Sym2 V → Prop","name":"SimpleGraph.IsBridge","isProp":false,"docString":"An edge of a graph is a *bridge* if, after removing it, its incident vertices\nare no longer reachable from one another. ","distance":0.99121398425183937508364806490135379135608673095703125}],["There exists a vertex of minimal degree. Note the assumption of being nonempty is necessary, as\nthe lemma implies there exists a vertex. ",{"type":"∀ {V : Type u_1} (G : SimpleGraph V) [inst : Fintype V] [inst_1 : DecidableRel G.Adj] [inst_2 : Nonempty V],\n  ∃ v, G.minDegree = G.degree v","name":"SimpleGraph.exists_minimal_degree_vertex","isProp":true,"docString":"There exists a vertex of minimal degree. Note the assumption of being nonempty is necessary, as\nthe lemma implies there exists a vertex. ","distance":0.99593141532875961718929147536982782185077667236328125}],["The edge set of an Eulerian graph is finite. ",{"type":"{V : Type u_1} →\n  {G : SimpleGraph V} → [inst : DecidableEq V] → {u v : V} → {p : G.Walk u v} → p.IsEulerian → Fintype ↑G.edgeSet","name":"SimpleGraph.Walk.IsEulerian.fintypeEdgeSet","isProp":false,"docString":"The edge set of an Eulerian graph is finite. ","distance":1.00326464605503762328453376539982855319976806640625}],["Equivalence between Dyck words of semilength `n` and rooted binary trees with\n`n` internal nodes. ",{"type":"(n : ℕ) → { p // p.semilength = n } ≃ { x // x ∈ Tree.treesOfNumNodesEq n }","name":"DyckWord.equivTreesOfNumNodesEq","isProp":false,"docString":"Equivalence between Dyck words of semilength `n` and rooted binary trees with\n`n` internal nodes. ","distance":1.0101500174791728792200729003525339066982269287109375}],["A Finset of all trees with `n` nodes. See `mem_treesOfNodesEq` ",{"type":"ℕ → Finset (Tree Unit)","name":"Tree.treesOfNumNodesEq","isProp":false,"docString":"A Finset of all trees with `n` nodes. See `mem_treesOfNodesEq` ","distance":1.016602235639785245524535639560781419277191162109375}],["The cardinality of the antidiagonal of `n` is `n + 1`. ",{"type":"∀ (n : ℕ), (Finset.antidiagonal n).card = n + 1","name":"Finset.Nat.card_antidiagonal","isProp":true,"docString":"The cardinality of the antidiagonal of `n` is `n + 1`. ","distance":1.0203549595595140520032373387948609888553619384765625}],["The cardinality of the antidiagonal of `n` is `n+1`. ",{"type":"∀ (n : ℕ), (Multiset.Nat.antidiagonal n).card = n + 1","name":"Multiset.Nat.card_antidiagonal","isProp":true,"docString":"The cardinality of the antidiagonal of `n` is `n+1`. ","distance":1.02275142090240223069486091844737529754638671875}],["**Turán's theorem**. `turanGraph n r` is, up to isomorphism, the unique\n`r + 1`-cliquefree Turán-maximal graph on `n` vertices. ",{"type":"∀ {V : Type u_1} [inst : Fintype V] {G : SimpleGraph V} [inst_1 : DecidableRel G.Adj] {r : ℕ},\n  0 < r → (G.IsTuranMaximal r ↔ Nonempty (G ≃g SimpleGraph.turanGraph (Fintype.card V) r))","name":"SimpleGraph.isTuranMaximal_iff_nonempty_iso_turanGraph","isProp":true,"docString":"**Turán's theorem**. `turanGraph n r` is, up to isomorphism, the unique\n`r + 1`-cliquefree Turán-maximal graph on `n` vertices. ","distance":1.024441817100683937979965776321478188037872314453125}],["Adding an edge increases the clique number by at most one. ",{"type":"∀ {α : Type u_1} {G : SimpleGraph α} {n : ℕ},\n  G.CliqueFree n → ∀ (v w : α), (G ⊔ SimpleGraph.edge v w).CliqueFree (n + 1)","name":"SimpleGraph.CliqueFree.sup_edge","isProp":true,"docString":"Adding an edge increases the clique number by at most one. ","distance":1.02656233243690753198507081833668053150177001953125}],["Turning an edge in the spanning tree into a loop gives the identity loop. ",{"type":"∀ {G : Type u} [inst : CategoryTheory.Groupoid G] [inst_1 : IsFreeGroupoid G]\n  (T : WideSubquiver (Quiver.Symmetrify (IsFreeGroupoid.Generators G)))\n  [inst_2 : Quiver.Arborescence (WideSubquiver.toType (Quiver.Symmetrify (IsFreeGroupoid.Generators G)) T)]\n  {a b : IsFreeGroupoid.Generators G},\n  ∀ e ∈ Quiver.wideSubquiverSymmetrify T a b,\n    IsFreeGroupoid.SpanningTree.loopOfHom T (IsFreeGroupoid.of e) =\n      CategoryTheory.CategoryStruct.id (IsFreeGroupoid.SpanningTree.root'✝ T)","name":"IsFreeGroupoid.SpanningTree.loopOfHom_eq_id","isProp":true,"docString":"Turning an edge in the spanning tree into a loop gives the identity loop. ","distance":1.026977452914829225250059607787989079952239990234375}],["Density of edges of a graph between two finsets of vertices. ",{"type":"{α : Type u_4} → (G : SimpleGraph α) → [inst : DecidableRel G.Adj] → Finset α → Finset α → ℚ","name":"SimpleGraph.edgeDensity","isProp":false,"docString":"Density of edges of a graph between two finsets of vertices. ","distance":1.029382631170223216798831344931386411190032958984375}]]