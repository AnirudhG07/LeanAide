[["If we dilate a convex set about a point in its interior by a scale `t > 1`, the interior of\nthe result includes the closure of the original set.\n\nTODO Generalise this from convex sets to sets that are balanced / star-shaped about `x`. ",{"type":"∀ {E : Type u_3} [inst : AddCommGroup E] [inst_1 : Module ℝ E] [inst_2 : TopologicalSpace E]\n  [inst_3 : TopologicalAddGroup E] [inst_4 : ContinuousSMul ℝ E] {s : Set E},\n  Convex ℝ s → ∀ {x : E}, x ∈ interior s → ∀ (t : ℝ), 1 < t → closure s ⊆ interior (⇑(AffineMap.homothety x t) '' s)","name":"Convex.closure_subset_interior_image_homothety_of_one_lt","isProp":true,"docString":"If we dilate a convex set about a point in its interior by a scale `t > 1`, the interior of\nthe result includes the closure of the original set.\n\nTODO Generalise this from convex sets to sets that are balanced / star-shaped about `x`. ","distance":1.9630374877582827952693378392723388969898223876953125}],[" For all natural numbers n, pred(1 + n) = n.",{"type":"∀ (n : ℕ), (1 + n).pred = n","name":"Nat.pred_one_add","isProp":true,"docString":" For all natural numbers n, pred(1 + n) = n.","distance":1.993869105411505415759165771305561065673828125}],["This theorem states that for any positive number `n` of type `PosNum`, the double coercion of `n` to natural number and then to integer is equal to the direct coercion of `n` to integer. Essentially, it ensures that converting a positive number to a natural number and then to an integer yields the same result as directly converting the positive number to an integer.",{"type":"∀ (n : PosNum), ↑↑n = ↑n","name":"PosNum.to_nat_to_int","isProp":true,"docString":"This theorem states that for any positive number `n` of type `PosNum`, the double coercion of `n` to natural number and then to integer is equal to the direct coercion of `n` to integer. Essentially, it ensures that converting a positive number to a natural number and then to an integer yields the same result as directly converting the positive number to an integer.","distance":2.007401877128691669582849499420262873172760009765625}],["A link that, when clicked, makes the specified edit\nand potentially moves the cursor\nor makes a selection. ",{"type":"ProofWidgets.Component ProofWidgets.MakeEditLinkProps","name":"ProofWidgets.MakeEditLink","isProp":false,"docString":"A link that, when clicked, makes the specified edit\nand potentially moves the cursor\nor makes a selection. ","distance":1.96893546493492177518191965646110475063323974609375}],[" For any compact set in a metric space and any open cover, there exists a positive number δ such that for each point in the set, there is an open set in the cover containing a ball of radius δ around that point.",{"type":"∀ {α : Type u} [inst : PseudoMetricSpace α] {s : Set α} {ι : Sort u_3} {c : ι → Set α},\n  IsCompact s → (∀ (i : ι), IsOpen (c i)) → s ⊆ ⋃ i, c i → ∃ δ > 0, ∀ x ∈ s, ∃ i, Metric.ball x δ ⊆ c i","name":"lebesgue_number_lemma_of_metric","isProp":true,"docString":" For any compact set in a metric space and any open cover, there exists a positive number δ such that for each point in the set, there is an open set in the cover containing a ball of radius δ around that point.","distance":2.001116023868356297299442303483374416828155517578125}],["The theorem `MeasureTheory.MeasurePreserving.integrable_comp_emb` states that for any types `α`, `β`, and `δ`, given a measurable space `α`, a measure `μ` on `α`, a measurable space `δ`, a normed additively commutative group `β`, a function `f : α → δ`, and a measure `ν` on `δ`, if `f` is a measure-preserving function from `μ` to `ν` and `f` is a measurable embedding, then for any function `g : δ → β`, the function `g` composed with `f` (`g ∘ f`) is integrable with respect to `μ` if and only if `g` is integrable with respect to `ν`. In simpler terms, it says that under these conditions, the integrability of a function composed with a measure-preserving function is preserved.",{"type":"∀ {α : Type u_1} {β : Type u_2} {δ : Type u_4} {m : MeasurableSpace α} {μ : MeasureTheory.Measure α}\n  [inst : MeasurableSpace δ] [inst_1 : NormedAddCommGroup β] {f : α → δ} {ν : MeasureTheory.Measure δ},\n  MeasureTheory.MeasurePreserving f μ ν →\n    MeasurableEmbedding f → ∀ {g : δ → β}, MeasureTheory.Integrable (g ∘ f) μ ↔ MeasureTheory.Integrable g ν","name":"MeasureTheory.MeasurePreserving.integrable_comp_emb","isProp":true,"docString":"The theorem `MeasureTheory.MeasurePreserving.integrable_comp_emb` states that for any types `α`, `β`, and `δ`, given a measurable space `α`, a measure `μ` on `α`, a measurable space `δ`, a normed additively commutative group `β`, a function `f : α → δ`, and a measure `ν` on `δ`, if `f` is a measure-preserving function from `μ` to `ν` and `f` is a measurable embedding, then for any function `g : δ → β`, the function `g` composed with `f` (`g ∘ f`) is integrable with respect to `μ` if and only if `g` is integrable with respect to `ν`. In simpler terms, it says that under these conditions, the integrability of a function composed with a measure-preserving function is preserved.","distance":2.00953339575811273931549294502474367618560791015625}],["If we dilate the interior of a convex set about a point in its interior by a scale `t > 1`,\nthe result includes the closure of the original set.\n\nTODO Generalise this from convex sets to sets that are balanced / star-shaped about `x`. ",{"type":"∀ {E : Type u_3} [inst : AddCommGroup E] [inst_1 : Module ℝ E] [inst_2 : TopologicalSpace E]\n  [inst_3 : TopologicalAddGroup E] [inst_4 : ContinuousSMul ℝ E] {s : Set E},\n  Convex ℝ s → ∀ {x : E}, x ∈ interior s → ∀ (t : ℝ), 1 < t → closure s ⊆ ⇑(AffineMap.homothety x t) '' interior s","name":"Convex.closure_subset_image_homothety_interior_of_one_lt","isProp":true,"docString":"If we dilate the interior of a convex set about a point in its interior by a scale `t > 1`,\nthe result includes the closure of the original set.\n\nTODO Generalise this from convex sets to sets that are balanced / star-shaped about `x`. ","distance":1.969623676319744998153282722341828048229217529296875}],["Converts a `ZNum` to a `PosNum`, mapping all out of range values to `1`. ",{"type":"ZNum → PosNum","name":"PosNum.ofZNum","isProp":false,"docString":"Converts a `ZNum` to a `PosNum`, mapping all out of range values to `1`. ","distance":1.9713246253010805464356280936044640839099884033203125}],["`castPosNum` casts a `PosNum` into any type which has `1` and `+`. ",{"type":"{α : Type u_1} → [inst : One α] → [inst : Add α] → PosNum → α","name":"castPosNum","isProp":false,"docString":"`castPosNum` casts a `PosNum` into any type which has `1` and `+`. ","distance":1.9756388253422423328942159059806726872920989990234375}],["Which textual range to select after the edit.\nThe range is interpreted in the file that `edit` applies to.\nIf present and `start == end`, the cursor is moved to `start` and nothing is selected.\nIf not present, the selection is not changed. ",{"type":"ProofWidgets.MakeEditLinkProps → Option Lean.Lsp.Range","name":"ProofWidgets.MakeEditLinkProps.newSelection?","isProp":false,"docString":"Which textual range to select after the edit.\nThe range is interpreted in the file that `edit` applies to.\nIf present and `start == end`, the cursor is moved to `start` and nothing is selected.\nIf not present, the selection is not changed. ","distance":1.9769050823036324882053804685710929334163665771484375}],["**Internal use only**\n\nO(1). Construct a node with the correct size information, without rebalancing. ",{"type":"{α : Type u_1} → Ordnode α → α → Ordnode α → Ordnode α","name":"Ordnode.node'","isProp":false,"docString":"**Internal use only**\n\nO(1). Construct a node with the correct size information, without rebalancing. ","distance":1.9779013192934302711734062540926970541477203369140625}],["Auxiliary function for `getRawProjections`.\nFind custom projections, automatically found by simps.\nThese come from `DFunLike` and `SetLike` instances. ",{"type":"Lean.Name → Array Simps.ParsedProjectionData → Lean.CoreM (Array Simps.ParsedProjectionData)","name":"Simps.findAutomaticProjections","isProp":false,"docString":"Auxiliary function for `getRawProjections`.\nFind custom projections, automatically found by simps.\nThese come from `DFunLike` and `SetLike` instances. ","distance":1.9783697676199383241879559136577881872653961181640625}],["The universal set `Set.univ` in a preconnected space is a preconnected set. ",{"type":"∀ {α : Type u} [inst : TopologicalSpace α] [self : PreconnectedSpace α], IsPreconnected Set.univ","name":"PreconnectedSpace.isPreconnected_univ","isProp":true,"docString":"The universal set `Set.univ` in a preconnected space is a preconnected set. ","distance":1.9829681974878987649191230957512743771076202392578125}],["Right-shift the binary representation of a `PosNum`. ",{"type":"PosNum → ℕ → Num","name":"PosNum.shiftr","isProp":false,"docString":"Right-shift the binary representation of a `PosNum`. ","distance":1.9832028467488689305042726118699647486209869384765625}],["The predecessor of a `PosNum` as a `Num`. ",{"type":"PosNum → Num","name":"PosNum.pred'","isProp":false,"docString":"The predecessor of a `PosNum` as a `Num`. ","distance":1.9845899837133964549451548009528778493404388427734375}],["the condition that `premap` is in the presieve ",{"type":"∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] {D : Type u₂} [inst_1 : CategoryTheory.Category.{v₂, u₂} D]\n  {F : CategoryTheory.Functor C D} {X : C} {S : CategoryTheory.Presieve X} {Y : D} {f : Y ⟶ F.obj X}\n  (self : CategoryTheory.Presieve.FunctorPushforwardStructure F S f), S self.premap","name":"CategoryTheory.Presieve.FunctorPushforwardStructure.cover","isProp":true,"docString":"the condition that `premap` is in the presieve ","distance":1.9854987353113047188202244797139428555965423583984375}],["The restriction of a presheafed space along an open embedding into the space.\n",{"type":"{C : Type u_1} →\n  [inst : CategoryTheory.Category.{u_2, u_1} C] →\n    {U : TopCat} →\n      (X : AlgebraicGeometry.PresheafedSpace C) → {f : U ⟶ ↑X} → OpenEmbedding ⇑f → AlgebraicGeometry.PresheafedSpace C","name":"AlgebraicGeometry.PresheafedSpace.restrict","isProp":false,"docString":"The restriction of a presheafed space along an open embedding into the space.\n","distance":1.9862285206218179833825843161321245133876800537109375}],["The weighted sum is unaffected by changing the weights to the\ncorresponding indicator function and adding points to the set. ",{"type":"∀ {k : Type u_1} {V : Type u_2} {P : Type u_3} [inst : Ring k] [inst_1 : AddCommGroup V] [inst_2 : Module k V]\n  [S : AddTorsor V P] {ι : Type u_4} (w : ι → k) (p : ι → P) {s₁ s₂ : Finset ι},\n  s₁ ⊆ s₂ → (Finset.weightedVSub s₁ p) w = (Finset.weightedVSub s₂ p) (Set.indicator (↑s₁) w)","name":"Finset.weightedVSub_indicator_subset","isProp":true,"docString":"The weighted sum is unaffected by changing the weights to the\ncorresponding indicator function and adding points to the set. ","distance":1.9876534411245183608940578778856433928012847900390625}],["A \"proxy type\" equivalent to `Affine.Simplex.PointsWithCircumcenterIndex` that is constructed from `Unit`, `PLift`, `Sigma`, `Empty`, and `Sum`. See `Affine.Simplex.PointsWithCircumcenterIndex.proxyTypeEquiv` for the equivalence. (Generated by the `proxy_equiv%` elaborator.)",{"type":"ℕ → Type","name":"Affine.Simplex.PointsWithCircumcenterIndex.proxyType","isProp":false,"docString":"A \"proxy type\" equivalent to `Affine.Simplex.PointsWithCircumcenterIndex` that is constructed from `Unit`, `PLift`, `Sigma`, `Empty`, and `Sum`. See `Affine.Simplex.PointsWithCircumcenterIndex.proxyTypeEquiv` for the equivalence. (Generated by the `proxy_equiv%` elaborator.)","distance":1.988292334762415958238079838338308036327362060546875}],["Converts `x : Num` to `-x : ZNum`. ",{"type":"Num → ZNum","name":"Num.toZNumNeg","isProp":false,"docString":"Converts `x : Num` to `-x : ZNum`. ","distance":1.98907163008165266404603244154714047908782958984375}],["A dilation maps balls to balls and scales the radius by `ratio f`. ",{"type":"∀ {α : Type u_1} {β : Type u_2} {F : Type u_4} [inst : PseudoMetricSpace α] [inst_1 : PseudoMetricSpace β]\n  [inst_2 : DilationClass F α β] (f : F) (x : α) (r' : ℝ),\n  Set.MapsTo (⇑f) (Metric.ball x r') (Metric.ball (f x) (↑(Dilation.ratio f) * r'))","name":"Dilation.mapsTo_ball","isProp":true,"docString":"A dilation maps balls to balls and scales the radius by `ratio f`. ","distance":1.9893079253115943938468035412370227277278900146484375}],["Convert a pre-set to a `set` of pre-sets. ",{"type":"PSet → Set PSet","name":"PSet.toSet","isProp":false,"docString":"Convert a pre-set to a `set` of pre-sets. ","distance":1.989762081069875510053179823444224894046783447265625}],["A \"proxy type\" equivalent to `Symbol` that is constructed from `Unit`, `PLift`, `Sigma`, `Empty`, and `Sum`. See `Symbol.proxyTypeEquiv` for the equivalence. (Generated by the `proxy_equiv%` elaborator.)",{"type":"Type u_1 → Type u_2 → Type (max u_1 u_2)","name":"Symbol.proxyType","isProp":false,"docString":"A \"proxy type\" equivalent to `Symbol` that is constructed from `Unit`, `PLift`, `Sigma`, `Empty`, and `Sum`. See `Symbol.proxyTypeEquiv` for the equivalence. (Generated by the `proxy_equiv%` elaborator.)","distance":1.9906967009408897961719731029006652534008026123046875}],["Left-shift the binary representation of a `PosNum`. ",{"type":"PosNum → ℕ → PosNum","name":"PosNum.shiftl","isProp":false,"docString":"Left-shift the binary representation of a `PosNum`. ","distance":1.991869888882157990650512147112749516963958740234375}]]