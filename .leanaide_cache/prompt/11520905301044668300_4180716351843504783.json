[["A tail-recursive version of `List.length`, used to implement `List.length`\nwithout running out of stack space.\n",{"type":"{Œ± : Type u_1} ‚Üí List Œ± ‚Üí ‚Ñï","name":"List.lengthTR","isProp":false,"docString":"A tail-recursive version of `List.length`, used to implement `List.length`\nwithout running out of stack space.\n","distance":2.02246785176019105989553281688131392002105712890625}],[" For any integer `a`, `-a + a = 0`.",{"type":"‚àÄ (a : ‚Ñ§), -a + a = 0","name":"Int.add_left_neg","isProp":true,"docString":" For any integer `a`, `-a + a = 0`.","distance":2.013068299057490406767101376317441463470458984375}],["The theorem `Homeomorph.isPathConnected_preimage` states that for any topological spaces `X` and `Y`, and any homeomorphism `h` from `X` to `Y`, a set `s` in `Y` is path-connected if and only if its preimage under `h` in `X` is path-connected. In other words, a homeomorphism preserves the property of being path-connected between the original set and its image under the homeomorphism. A path-connected set, in this context, is defined as a set which contains at least one point that can be connected to all other points in the set via a path within the set.",{"type":"‚àÄ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] {s : Set Y} (h : X ‚âÉ‚Çú Y),\n  IsPathConnected (‚áëh ‚Åª¬π' s) ‚Üî IsPathConnected s","name":"Homeomorph.isPathConnected_preimage","isProp":true,"docString":"The theorem `Homeomorph.isPathConnected_preimage` states that for any topological spaces `X` and `Y`, and any homeomorphism `h` from `X` to `Y`, a set `s` in `Y` is path-connected if and only if its preimage under `h` in `X` is path-connected. In other words, a homeomorphism preserves the property of being path-connected between the original set and its image under the homeomorphism. A path-connected set, in this context, is defined as a set which contains at least one point that can be connected to all other points in the set via a path within the set.","distance":2.0448579606454675428039990947581827640533447265625}],["Using `homogeneousLocalizationToStalk`, we construct a ring isomorphism between stalk at `x`\nand homogeneous localization at `x` for any point `x` in `Proj`.",{"type":"{R : Type u_1} ‚Üí\n  {A : Type u_2} ‚Üí\n    [inst : CommRing R] ‚Üí\n      [inst_1 : CommRing A] ‚Üí\n        [inst_2 : Algebra R A] ‚Üí\n          (ùíú : ‚Ñï ‚Üí Submodule R A) ‚Üí\n            [inst_3 : GradedAlgebra ùíú] ‚Üí\n              (x : ‚Üë(ProjectiveSpectrum.top ùíú)) ‚Üí\n                ‚Üë(TopCat.Presheaf.stalk\n                      (TopCat.Sheaf.presheaf (AlgebraicGeometry.ProjectiveSpectrum.Proj.structureSheaf ùíú)) x) ‚âÉ+*\n                  ‚Üë(CommRingCat.of (HomogeneousLocalization.AtPrime ùíú (HomogeneousIdeal.toIdeal x.asHomogeneousIdeal)))","name":"AlgebraicGeometry.Proj.stalkIso'","isProp":false,"docString":"Using `homogeneousLocalizationToStalk`, we construct a ring isomorphism between stalk at `x`\nand homogeneous localization at `x` for any point `x` in `Proj`.","distance":2.023003601163762876780083388439379632472991943359375}],[" For all integers `a` and `b`, if `a = b`, then `a - b = 0`.",{"type":"‚àÄ {a b : ‚Ñ§}, a = b ‚Üí a - b = 0","name":"Int.sub_eq_zero_of_eq","isProp":true,"docString":" For all integers `a` and `b`, if `a = b`, then `a - b = 0`.","distance":2.01349238029271315753021553973667323589324951171875}],["This theorem states that for any positive number `n` of type `PosNum`, the double coercion of `n` to natural number and then to integer is equal to the direct coercion of `n` to integer. Essentially, it ensures that converting a positive number to a natural number and then to an integer yields the same result as directly converting the positive number to an integer.",{"type":"‚àÄ (n : PosNum), ‚Üë‚Üën = ‚Üën","name":"PosNum.to_nat_to_int","isProp":true,"docString":"This theorem states that for any positive number `n` of type `PosNum`, the double coercion of `n` to natural number and then to integer is equal to the direct coercion of `n` to integer. Essentially, it ensures that converting a positive number to a natural number and then to an integer yields the same result as directly converting the positive number to an integer.","distance":2.04824893654604966997112569515593349933624267578125}],["The `title` property, if any, to set on the displayed `<a>` link. ",{"type":"ProofWidgets.MakeEditLinkProps ‚Üí Option String","name":"ProofWidgets.MakeEditLinkProps.title?","isProp":false,"docString":"The `title` property, if any, to set on the displayed `<a>` link. ","distance":2.02549929285647234422640394768677651882171630859375}],["**Alias** of `isTotallyDisconnected_of_isTotallySeparated`.",{"type":"‚àÄ {Œ± : Type u} [inst : TopologicalSpace Œ±] {s : Set Œ±}, IsTotallySeparated s ‚Üí IsTotallyDisconnected s","name":"IsTotallySeparated.isTotallyDisconnected","isProp":true,"docString":"**Alias** of `isTotallyDisconnected_of_isTotallySeparated`.","distance":2.026176523920144578738700147368945181369781494140625}],["A choice-free shortcut instance.",{"type":"‚àÄ (Œ± : Type u) [inst : OrderedAddCommGroup Œ±],\n  ContravariantClass Œ± Œ± (Function.swap fun x x_1 => x + x_1) fun x x_1 => x ‚â§ x_1","name":"OrderedAddCommGroup.to_contravariantClass_right_le","isProp":true,"docString":"A choice-free shortcut instance.","distance":2.02763171921001283948271520785056054592132568359375}],["This instance is provided instead of `StarAlgHomClass` to avoid type class inference loops.\nSee note [lower instance priority] ",{"type":"{F : Type u_1} ‚Üí\n  {A : Type u_2} ‚Üí\n    [inst : NormedRing A] ‚Üí\n      [inst_1 : NormedAlgebra ‚ÑÇ A] ‚Üí\n        [inst_2 : CompleteSpace A] ‚Üí\n          [inst_3 : StarRing A] ‚Üí\n            [inst_4 : CstarRing A] ‚Üí [inst_5 : StarModule ‚ÑÇ A] ‚Üí [hF : AlgHomClass F ‚ÑÇ A ‚ÑÇ] ‚Üí StarHomClass F A ‚ÑÇ","name":"WeakDual.Complex.instStarHomClass","isProp":false,"docString":"This instance is provided instead of `StarAlgHomClass` to avoid type class inference loops.\nSee note [lower instance priority] ","distance":2.0278460914678628768115231650881469249725341796875}],["A `PreconnectedSpace` version of `isPreconnected.constant` ",{"type":"‚àÄ {Œ± : Type u} [inst : TopologicalSpace Œ±] {Y : Type u_3} [inst_1 : TopologicalSpace Y] [inst_2 : DiscreteTopology Y],\n  PreconnectedSpace Œ± ‚Üí ‚àÄ {f : Œ± ‚Üí Y}, Continuous f ‚Üí ‚àÄ {x y : Œ±}, f x = f y","name":"PreconnectedSpace.constant","isProp":true,"docString":"A `PreconnectedSpace` version of `isPreconnected.constant` ","distance":2.03130196599477397256805488723330199718475341796875}],["Evaluating a path homotopy at an intermediate point, giving us a `Path`.\n",{"type":"{X : Type u} ‚Üí\n  [inst : TopologicalSpace X] ‚Üí {x‚ÇÄ x‚ÇÅ : X} ‚Üí {p‚ÇÄ p‚ÇÅ : Path x‚ÇÄ x‚ÇÅ} ‚Üí Path.Homotopy p‚ÇÄ p‚ÇÅ ‚Üí ‚ÜëunitInterval ‚Üí Path x‚ÇÄ x‚ÇÅ","name":"Path.Homotopy.eval","isProp":false,"docString":"Evaluating a path homotopy at an intermediate point, giving us a `Path`.\n","distance":2.032718107185107481171826293575577437877655029296875}],["The reverse of a path is another path.  See also `SimpleGraph.Walk.reverse`. ",{"type":"{V : Type u} ‚Üí {G : SimpleGraph V} ‚Üí {u v : V} ‚Üí SimpleGraph.Path G u v ‚Üí SimpleGraph.Path G v u","name":"SimpleGraph.Path.reverse","isProp":false,"docString":"The reverse of a path is another path.  See also `SimpleGraph.Walk.reverse`. ","distance":2.0329405026919769028381779207848012447357177734375}],["Given a walk, produces a walk from it by bypassing subwalks between repeated vertices.\nThe result is a path, as shown in `SimpleGraph.Walk.bypass_isPath`.\nThis is packaged up in `SimpleGraph.Walk.toPath`. ",{"type":"{V : Type u} ‚Üí\n  {G : SimpleGraph V} ‚Üí [inst : DecidableEq V] ‚Üí {u v : V} ‚Üí SimpleGraph.Walk G u v ‚Üí SimpleGraph.Walk G u v","name":"SimpleGraph.Walk.bypass","isProp":false,"docString":"Given a walk, produces a walk from it by bypassing subwalks between repeated vertices.\nThe result is a path, as shown in `SimpleGraph.Walk.bypass_isPath`.\nThis is packaged up in `SimpleGraph.Walk.toPath`. ","distance":2.0333826298878019400717676035128533840179443359375}],["**Alias** of `sq_pos_of_ne_zero`.",{"type":"‚àÄ {R : Type u_3} [inst : LinearOrderedRing R] (a : R), a ‚â† 0 ‚Üí 0 < a ^ 2","name":"pow_two_pos_of_ne_zero","isProp":true,"docString":"**Alias** of `sq_pos_of_ne_zero`.","distance":2.033503053747430566744469615514390170574188232421875}],["The initial state for the TM2 emulator, given an initial TM2 state. All stacks start out empty\nexcept for the input stack, and the stack bottom mark is set at the head. ",{"type":"{K : Type u_1} ‚Üí [inst : DecidableEq K] ‚Üí {Œì : K ‚Üí Type u_2} ‚Üí (k : K) ‚Üí List (Œì k) ‚Üí List Turing.TM2to1.Œì'","name":"Turing.TM2to1.trInit","isProp":false,"docString":"The initial state for the TM2 emulator, given an initial TM2 state. All stacks start out empty\nexcept for the input stack, and the stack bottom mark is set at the head. ","distance":2.033637053741549127749976833001710474491119384765625}],["Use path-connectedness to build a path between two points. ",{"type":"{X : Type u_1} ‚Üí [inst : TopologicalSpace X] ‚Üí [inst_1 : PathConnectedSpace X] ‚Üí (x y : X) ‚Üí Path x y","name":"PathConnectedSpace.somePath","isProp":false,"docString":"Use path-connectedness to build a path between two points. ","distance":2.03567045837425997234504393418319523334503173828125}],["The constant path from a point to itself ",{"type":"{X : Type u_1} ‚Üí [inst : TopologicalSpace X] ‚Üí (x : X) ‚Üí Path x x","name":"Path.refl","isProp":false,"docString":"The constant path from a point to itself ","distance":2.03613857518521346179340980597771704196929931640625}],["The *principle of isolated zeros* for an analytic function, global version: if a function is\nanalytic on a connected set `U` and vanishes in arbitrary neighborhoods of a point `z‚ÇÄ ‚àà U`, then\nit is identically zero in `U`.\nFor higher-dimensional versions requiring that the function vanishes in a neighborhood of `z‚ÇÄ`,\nsee `AnalyticOn.eqOn_zero_of_preconnected_of_eventuallyEq_zero`. ",{"type":"‚àÄ {ùïú : Type u_1} [inst : NontriviallyNormedField ùïú] {E : Type u_2} [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace ùïú E] {f : ùïú ‚Üí E} {z‚ÇÄ : ùïú} {U : Set ùïú},\n  AnalyticOn ùïú f U ‚Üí IsPreconnected U ‚Üí z‚ÇÄ ‚àà U ‚Üí (‚àÉ·∂† (z : ùïú) in nhdsWithin z‚ÇÄ {z‚ÇÄ}·∂ú, f z = 0) ‚Üí Set.EqOn f 0 U","name":"AnalyticOn.eqOn_zero_of_preconnected_of_frequently_eq_zero","isProp":true,"docString":"The *principle of isolated zeros* for an analytic function, global version: if a function is\nanalytic on a connected set `U` and vanishes in arbitrary neighborhoods of a point `z‚ÇÄ ‚àà U`, then\nit is identically zero in `U`.\nFor higher-dimensional versions requiring that the function vanishes in a neighborhood of `z‚ÇÄ`,\nsee `AnalyticOn.eqOn_zero_of_preconnected_of_eventuallyEq_zero`. ","distance":2.037225991080693798807033090270124375820159912109375}],["A `GlobalPreprocessor` lifts to a `GlobalBranchingPreprocessor` by producing only one branch.\n",{"type":"Linarith.GlobalPreprocessor ‚Üí Linarith.GlobalBranchingPreprocessor","name":"Linarith.GlobalPreprocessor.branching","isProp":false,"docString":"A `GlobalPreprocessor` lifts to a `GlobalBranchingPreprocessor` by producing only one branch.\n","distance":2.037551135755588216369460496935062110424041748046875}],["Hint for the unused variables linter. Copies the one for `variable`. ",{"type":"Lean.Linter.IgnoreFunction","name":"Mathlib.Command.Variable.ignorevariable?","isProp":false,"docString":"Hint for the unused variables linter. Copies the one for `variable`. ","distance":2.03880794737616977130301165743730962276458740234375}],["The distance between two vertices is the length of the shortest walk between them.\nIf no such walk exists, this uses the junk value of `0`. ",{"type":"{V : Type u_1} ‚Üí SimpleGraph V ‚Üí V ‚Üí V ‚Üí ‚Ñï","name":"SimpleGraph.dist","isProp":false,"docString":"The distance between two vertices is the length of the shortest walk between them.\nIf no such walk exists, this uses the junk value of `0`. ","distance":2.038936169220388894274265112471766769886016845703125}],["A choice-free shortcut instance. ",{"type":"‚àÄ (Œ± : Type u) [inst : OrderedCommGroup Œ±], ContravariantClass Œ± Œ± (fun x x_1 => x * x_1) fun x x_1 => x ‚â§ x_1","name":"OrderedCommGroup.to_contravariantClass_left_le","isProp":true,"docString":"A choice-free shortcut instance. ","distance":2.03905295538469744087706203572452068328857421875}],["An isomorphism between presheafed spaces induces an isomorphism of stalks.\n",{"type":"{C : Type u} ‚Üí\n  [inst : CategoryTheory.Category.{v, u} C] ‚Üí\n    [inst_1 : CategoryTheory.Limits.HasColimits C] ‚Üí\n      {X Y : AlgebraicGeometry.PresheafedSpace C} ‚Üí\n        (Œ± : X ‚âÖ Y) ‚Üí\n          (x : ‚Üë‚ÜëX) ‚Üí\n            AlgebraicGeometry.PresheafedSpace.stalk Y (Œ±.hom.base x) ‚âÖ AlgebraicGeometry.PresheafedSpace.stalk X x","name":"AlgebraicGeometry.PresheafedSpace.stalkMap.stalkIso","isProp":false,"docString":"An isomorphism between presheafed spaces induces an isomorphism of stalks.\n","distance":2.039803653594995491715735624893568456172943115234375}]]