[["There exists infinitely many deficient numbers ",{"type":"{n | n.Deficient}.Infinite","name":"Nat.infinite_deficient","isProp":true,"docString":"There exists infinitely many deficient numbers ","distance":0.70119771260094843068344516723300330340862274169921875}],[" An integer is odd if and only if it is not even. In other words, an integer is odd if and only if it cannot be expressed as the sum of two equal integers.",{"type":"∀ {n : ℤ}, Odd n = ¬Even n","name":"Mathlib.Data.Int.Parity._auxLemma.4","isProp":true,"docString":" An integer is odd if and only if it is not even. In other words, an integer is odd if and only if it cannot be expressed as the sum of two equal integers.","distance":0.63624701904464087132140548419556580483913421630859375}],["The theorem `Mathlib.Data.Int.Parity._auxLemma.4` states that for any integer `n`, `n` is odd if and only if `n` is not even. In mathematical terms, an integer `n` is considered odd (as per the given definition) if there exists another integer `k` such that `n = 2*k + 1`, and it is considered even if there exists an integer `r` such that `n = r + r`. The theorem establishes the mutual exclusivity of these two properties, meaning an integer can't be both odd and even at the same time.",{"type":"∀ {n : ℤ}, Odd n = ¬Even n","name":"Mathlib.Data.Int.Parity._auxLemma.4","isProp":true,"docString":"The theorem `Mathlib.Data.Int.Parity._auxLemma.4` states that for any integer `n`, `n` is odd if and only if `n` is not even. In mathematical terms, an integer `n` is considered odd (as per the given definition) if there exists another integer `k` such that `n = 2*k + 1`, and it is considered even if there exists an integer `r` such that `n = r + r`. The theorem establishes the mutual exclusivity of these two properties, meaning an integer can't be both odd and even at the same time.","distance":0.778521025003822142451781473937444388866424560546875}],["The L-function of an odd function vanishes at negative odd integers. ",{"type":"∀ {N : ℕ} [inst : NeZero N] {Φ : ZMod N → ℂ}, Function.Odd Φ → ∀ (n : ℕ), ZMod.LFunction Φ (-(2 * ↑n) - 1) = 0","name":"ZMod.LFunction_neg_two_mul_nat_sub_one","isProp":true,"docString":"The L-function of an odd function vanishes at negative odd integers. ","distance":0.78755150022689957012289596605114638805389404296875}],[" Every integer can be classified as even (being expressible as 2*r for some integer r) or odd (being expressible as 2*k + 1 for some integer k).",{"type":"∀ (n : ℤ), Even n ∨ Odd n","name":"Int.even_or_odd","isProp":true,"docString":" Every integer can be classified as even (being expressible as 2*r for some integer r) or odd (being expressible as 2*k + 1 for some integer k).","distance":0.670552956409231182277608240838162600994110107421875}],["The theorem `Int.even_iff_not_odd` states that for every integer `n`, `n` is even if and only if `n` is not odd. Here, an integer `n` is defined as \"even\" if it can be expressed as the sum of two identical integers, and \"odd\" if it can be written in the form `2*k + 1` for some integer `k`. This theorem formalizes a basic property of integers in the mathematical field of number theory.",{"type":"∀ {n : ℤ}, Even n ↔ ¬Odd n","name":"Int.even_iff_not_odd","isProp":true,"docString":"The theorem `Int.even_iff_not_odd` states that for every integer `n`, `n` is even if and only if `n` is not odd. Here, an integer `n` is defined as \"even\" if it can be expressed as the sum of two identical integers, and \"odd\" if it can be written in the form `2*k + 1` for some integer `k`. This theorem formalizes a basic property of integers in the mathematical field of number theory.","distance":0.7844132208319642973748386793886311352252960205078125}],["The zero function is odd. ",{"type":"∀ {α : Type u_1} {β : Type u_2} [inst : Neg α] [inst_1 : NegZeroClass β], Function.Odd fun x => 0","name":"Function.Odd.zero","isProp":true,"docString":"The zero function is odd. ","distance":0.79517277115439599644020063351490534842014312744140625}],["A natural number is odd iff it has residue `1` or `3` mod `4`",{"type":"∀ {n : ℕ}, n % 2 = 1 ↔ n % 4 = 1 ∨ n % 4 = 3","name":"Nat.odd_mod_four_iff","isProp":true,"docString":"A natural number is odd iff it has residue `1` or `3` mod `4`","distance":0.82649687171158847664997892934479750692844390869140625}],["The sum of the values of an odd function is 0. ",{"type":"∀ {α : Type u_3} {β : Type u_4} [inst : AddCommGroup β] [inst_1 : NoZeroSMulDivisors ℕ β] [inst_2 : Fintype α]\n  [inst_3 : InvolutiveNeg α] {f : α → β}, Function.Odd f → ∑ a : α, f a = 0","name":"Function.Odd.sum_eq_zero","isProp":true,"docString":"The sum of the values of an odd function is 0. ","distance":0.83908362844270756308873160378425382077693939208984375}],["The finset of those partitions in which every part is odd. ",{"type":"(n : ℕ) → Finset n.Partition","name":"Nat.Partition.odds","isProp":false,"docString":"The finset of those partitions in which every part is odd. ","distance":0.855479030749379365516915640910156071186065673828125}],["In `Fin n`, all elements are odd for odd `n`,\notherwise an element is odd iff its `Fin.val` value is odd. ",{"type":"∀ {n : ℕ} [inst : NeZero n] {k : Fin n}, Odd k ↔ Odd n ∨ Odd ↑k","name":"Fin.odd_iff","isProp":true,"docString":"In `Fin n`, all elements are odd for odd `n`,\notherwise an element is odd iff its `Fin.val` value is odd. ","distance":0.861967868681430271493582040420733392238616943359375}],["Any constant function is even. ",{"type":"∀ {α : Type u_1} {β : Type u_2} [inst : Neg α] (b : β), Function.Even fun x => b","name":"Function.Even.const","isProp":true,"docString":"Any constant function is even. ","distance":0.87702489191442978277990505375782959163188934326171875}],["Strong recursion principle on even and odd numbers: if for all `i : ℕ` we can prove `P (2 * i)`\nfrom `P j` for all `j < 2 * i` and we can prove `P (2 * i + 1)` from `P j` for all `j < 2 * i + 1`,\nthen we have `P n` for all `n : ℕ`. ",{"type":"{P : ℕ → Sort u_1} →\n  ((n : ℕ) → ((k : ℕ) → k < 2 * n → P k) → P (2 * n)) →\n    ((n : ℕ) → ((k : ℕ) → k < 2 * n + 1 → P k) → P (2 * n + 1)) → (n : ℕ) → P n","name":"Nat.evenOddStrongRec","isProp":false,"docString":"Strong recursion principle on even and odd numbers: if for all `i : ℕ` we can prove `P (2 * i)`\nfrom `P j` for all `j < 2 * i` and we can prove `P (2 * i + 1)` from `P j` for all `j < 2 * i + 1`,\nthen we have `P n` for all `n : ℕ`. ","distance":0.8807298067659263818285353409009985625743865966796875}],["If `a` is even, then `n` is odd iff `n % a` is odd. ",{"type":"∀ {n a : ℕ}, Even a → (Odd (n % a) ↔ Odd n)","name":"Odd.mod_even_iff","isProp":true,"docString":"If `a` is even, then `n` is odd iff `n % a` is odd. ","distance":0.8868172405829726212544983354746364057064056396484375}],["Any infinite set of naturals is denumerable. ",{"type":"(s : Set ℕ) → [inst : DecidablePred fun x => x ∈ s] → [inst : Infinite ↑s] → Denumerable ↑s","name":"Nat.Subtype.denumerable","isProp":false,"docString":"Any infinite set of naturals is denumerable. ","distance":0.895707851083013650850261910818517208099365234375}],["The L-function of an even function vanishes at negative even integers. ",{"type":"∀ {N : ℕ} [inst : NeZero N] {Φ : ZMod N → ℂ}, Function.Even Φ → ∀ (n : ℕ), ZMod.LFunction Φ (-(2 * (↑n + 1))) = 0","name":"ZMod.LFunction_neg_two_mul_nat_add_one","isProp":true,"docString":"The L-function of an even function vanishes at negative even integers. ","distance":0.902961217614950850673949389602057635784149169921875}],["The infinite monadic lazy list of natural numbers.",{"type":"{m : Type → Type} → [inst : Monad m] → MLList m ℕ","name":"MLList.range","isProp":false,"docString":"The infinite monadic lazy list of natural numbers.","distance":0.90318896327121322986641871466417796909809112548828125}],["Infinitely many natural numbers are equal to `d` mod `n`. ",{"type":"∀ {n : ℕ}, n ≠ 0 → ∀ (d : ℕ), ∃ᶠ (m : ℕ) in Filter.atTop, m ≡ d [MOD n]","name":"Nat.frequently_modEq","isProp":true,"docString":"Infinitely many natural numbers are equal to `d` mod `n`. ","distance":0.90898133366957456491519451446947641670703887939453125}],["Every nonzero natural number has a unique prime factorization ",{"type":"Set.InjOn Nat.factorization {x | x ≠ 0}","name":"Nat.factorization_inj","isProp":true,"docString":"Every nonzero natural number has a unique prime factorization ","distance":0.9113193237317733785829432235914282500743865966796875}],["The finset of those partitions in which every part is odd and used at most once. ",{"type":"(n : ℕ) → Finset n.Partition","name":"Nat.Partition.oddDistincts","isProp":false,"docString":"The finset of those partitions in which every part is odd and used at most once. ","distance":0.912329559513396670666907084523700177669525146484375}],["The L-function of an odd Dirichlet character vanishes at negative odd integers. ",{"type":"∀ {N : ℕ} [inst : NeZero N] {χ : DirichletCharacter ℂ N},\n  χ.Odd → ∀ (n : ℕ), DirichletCharacter.LFunction χ (-(2 * ↑n) - 1) = 0","name":"DirichletCharacter.Odd.LFunction_neg_two_mul_nat_sub_one","isProp":true,"docString":"The L-function of an odd Dirichlet character vanishes at negative odd integers. ","distance":0.91337445635974667812462257643346674740314483642578125}],["Type of natural numbers with infinity (`⊤`) ",{"type":"Type","name":"PartENat","isProp":false,"docString":"Type of natural numbers with infinity (`⊤`) ","distance":0.919223164409273874042582974652759730815887451171875}],["Any nonzero natural number is the product of an odd part `m` and a power of\ntwo `2 ^ k`. ",{"type":"∀ {n : ℕ}, n ≠ 0 → ∃ k m, Odd m ∧ n = 2 ^ k * m","name":"Nat.exists_eq_two_pow_mul_odd","isProp":true,"docString":"Any nonzero natural number is the product of an odd part `m` and a power of\ntwo `2 ^ k`. ","distance":0.92383356218569800955009441167931072413921356201171875}],["To prove Fermat's Last Theorem, it suffices to prove it for odd prime exponents.\n",{"type":"(∀ (p : ℕ), Nat.Prime p → Odd p → FermatLastTheoremFor p) → FermatLastTheorem","name":"FermatLastTheorem.of_odd_primes","isProp":true,"docString":"To prove Fermat's Last Theorem, it suffices to prove it for odd prime exponents.\n","distance":0.92440352210772547270067889257916249334812164306640625}]]