[["`2` is not a factor of an odd natural number. ",{"type":"∀ {m n : ℕ}, Odd n → m ∣ n → m ≠ 2","name":"Odd.ne_two_of_dvd_nat","isProp":true,"docString":"`2` is not a factor of an odd natural number. ","distance":0.8473845071620675906132191812503151595592498779296875}],[" For any cardinal number `c`, `c` is non-zero if and only if `c` is greater than or equal to one.",{"type":"∀ {c : Cardinal.{u_1}}, 1 ≤ c ↔ c ≠ 0","name":"Cardinal.one_le_iff_ne_zero","isProp":true,"docString":" For any cardinal number `c`, `c` is non-zero if and only if `c` is greater than or equal to one.","distance":0.9421117285071625158110464326455257833003997802734375}],["This theorem asserts that for every natural number `n` and for every function `C` from natural numbers to a type, if `n` can be represented as a binary number by appending the binary digit equivalent of whether `n` is odd (`Nat.bodd n`) to the binary representation of the floor division of `n` by 2 (`Nat.div2 n`), then the value of `C` at `n` is the same as the value of `C` at the binary number representation of `n`. In other words, the function `C` is invariant under the operation of binary representation of numbers.",{"type":"∀ {C : ℕ → Sort u_1} (n : ℕ), Nat.bit n.bodd n.div2 = n → C n = C (Nat.bit n.bodd n.div2)","name":"Nat.binaryRec.proof_5","isProp":true,"docString":"This theorem asserts that for every natural number `n` and for every function `C` from natural numbers to a type, if `n` can be represented as a binary number by appending the binary digit equivalent of whether `n` is odd (`Nat.bodd n`) to the binary representation of the floor division of `n` by 2 (`Nat.div2 n`), then the value of `C` at `n` is the same as the value of `C` at the binary number representation of `n`. In other words, the function `C` is invariant under the operation of binary representation of numbers.","distance":0.9856146140700463575967660290189087390899658203125}],["`2` is a square modulo an odd prime `p` iff `p` is congruent to `1` or `7` mod `8`. ",{"type":"∀ {p : ℕ} [inst : Fact (Nat.Prime p)], p ≠ 2 → (IsSquare 2 ↔ p % 8 = 1 ∨ p % 8 = 7)","name":"ZMod.exists_sq_eq_two_iff","isProp":true,"docString":"`2` is a square modulo an odd prime `p` iff `p` is congruent to `1` or `7` mod `8`. ","distance":0.88867949315943295385267219899105839431285858154296875}],[" If `0 < c < 1/2`, then the Cantor function `cantorFunction c` is an injection from the set of binary sequences to itself.",{"type":"∀ {c : ℝ}, 0 < c → c < 1 / 2 → Function.Injective (Cardinal.cantorFunction c)","name":"Cardinal.cantorFunction_injective","isProp":true,"docString":" If `0 < c < 1/2`, then the Cantor function `cantorFunction c` is an injection from the set of binary sequences to itself.","distance":0.9534489333166515923068118354422040283679962158203125}],["The theorem `Nat.coprime_two_left` states that for any natural number `n`, `n` and `2` are coprime (or relatively prime, meaning their greatest common divisor is `1`) if and only if `n` is odd. In other words, a natural number shares no common factor greater than `1` with `2` precisely when it is odd, which is defined as there existing a natural number `k` such that `n = 2*k + 1`.",{"type":"∀ {n : ℕ}, Nat.Coprime 2 n ↔ Odd n","name":"Nat.coprime_two_left","isProp":true,"docString":"The theorem `Nat.coprime_two_left` states that for any natural number `n`, `n` and `2` are coprime (or relatively prime, meaning their greatest common divisor is `1`) if and only if `n` is odd. In other words, a natural number shares no common factor greater than `1` with `2` precisely when it is odd, which is defined as there existing a natural number `k` such that `n = 2*k + 1`.","distance":1.007601059310165414473203782108612358570098876953125}],["If a function is `antiperiodic` with antiperiod `c`, then it is also `Periodic` with period\n`2 • c`. ",{"type":"∀ {α : Type u_1} {β : Type u_2} {f : α → β} {c : α} [inst : AddMonoid α] [inst_1 : InvolutiveNeg β],\n  Function.Antiperiodic f c → Function.Periodic f (2 • c)","name":"Function.Antiperiodic.periodic","isProp":true,"docString":"If a function is `antiperiodic` with antiperiod `c`, then it is also `Periodic` with period\n`2 • c`. ","distance":0.93337639379965775532355110044591128826141357421875}],["An inequality involving `2`. ",{"type":"∀ {α : Type u_2} [inst : LinearOrderedField α] {a : α}, 2 ≤ a → (1 - 1 / a)⁻¹ ≤ 2","name":"sub_one_div_inv_le_two","isProp":true,"docString":"An inequality involving `2`. ","distance":0.93811602074766520242832257281406782567501068115234375}],["If a function is `antiperiodic` with antiperiod `c`, then it is also `Periodic` with period\n`2 * c`. ",{"type":"∀ {α : Type u_1} {β : Type u_2} {f : α → β} {c : α} [inst : Semiring α] [inst_1 : InvolutiveNeg β],\n  Function.Antiperiodic f c → Function.Periodic f (2 * c)","name":"Function.Antiperiodic.periodic_two_mul","isProp":true,"docString":"If a function is `antiperiodic` with antiperiod `c`, then it is also `Periodic` with period\n`2 * c`. ","distance":0.9454180731643690993593054372468031942844390869140625}],["Two elements are related by an additive congruence relation `c` iff\nthey are represented by the same element of the quotient by `c`.",{"type":"∀ {M : Type u_1} [inst : Add M] (c : AddCon M) {a b : M}, ↑a = ↑b ↔ c a b","name":"AddCon.eq","isProp":true,"docString":"Two elements are related by an additive congruence relation `c` iff\nthey are represented by the same element of the quotient by `c`.","distance":0.97022465090081755345607916751760058104991912841796875}],["`C` has quotients by finite groups (G2). ",{"type":"∀ {C : Type u₁} {inst : CategoryTheory.Category.{u₂, u₁} C} [self : CategoryTheory.PreGaloisCategory C] (G : Type u₂)\n  [inst_1 : Group G] [inst_2 : Finite G], CategoryTheory.Limits.HasColimitsOfShape (CategoryTheory.SingleObj G) C","name":"CategoryTheory.PreGaloisCategory.hasQuotientsByFiniteGroups","isProp":true,"docString":"`C` has quotients by finite groups (G2). ","distance":0.98242774857029424584453636271064169704914093017578125}],["Two elements are related by a congruence relation `c` iff they are represented by the same\nelement of the quotient by `c`. ",{"type":"∀ {M : Type u_1} [inst : Mul M] (c : Con M) {a b : M}, ↑a = ↑b ↔ c a b","name":"Con.eq","isProp":true,"docString":"Two elements are related by a congruence relation `c` iff they are represented by the same\nelement of the quotient by `c`. ","distance":0.98255315017387501175250008600414730608463287353515625}],["`-2` is a square modulo an odd prime `p` iff `p` is congruent to `1` or `3` mod `8`. ",{"type":"∀ {p : ℕ} [inst : Fact (Nat.Prime p)], p ≠ 2 → (IsSquare (-2) ↔ p % 8 = 1 ∨ p % 8 = 3)","name":"ZMod.exists_sq_eq_neg_two_iff","isProp":true,"docString":"`-2` is a square modulo an odd prime `p` iff `p` is congruent to `1` or `3` mod `8`. ","distance":0.9850942310177590588438079066690988838672637939453125}],["The `c₄` coefficient of a Weierstrass curve. ",{"type":"{R : Type u} → [inst : CommRing R] → WeierstrassCurve R → R","name":"WeierstrassCurve.c₄","isProp":false,"docString":"The `c₄` coefficient of a Weierstrass curve. ","distance":0.989827881109011986637824520585127174854278564453125}],["The binary function on the quotient by a congruence relation `c`\ninduced by a binary function that is constant on `c`'s equivalence classes.",{"type":"{M : Type u_1} →\n  [inst : Add M] →\n    {β : Sort u_4} →\n      {c : AddCon M} →\n        c.Quotient → c.Quotient → (f : M → M → β) → (∀ (a₁ a₂ b₁ b₂ : M), c a₁ b₁ → c a₂ b₂ → f a₁ a₂ = f b₁ b₂) → β","name":"AddCon.liftOn₂","isProp":false,"docString":"The binary function on the quotient by a congruence relation `c`\ninduced by a binary function that is constant on `c`'s equivalence classes.","distance":0.99036784681444733902111465795314870774745941162109375}],["The binary function on the quotient by a congruence relation `c` induced by a binary function\nthat is constant on `c`'s equivalence classes. ",{"type":"{M : Type u_1} →\n  [inst : Mul M] →\n    {β : Sort u_4} →\n      {c : Con M} →\n        c.Quotient → c.Quotient → (f : M → M → β) → (∀ (a₁ a₂ b₁ b₂ : M), c a₁ b₁ → c a₂ b₂ → f a₁ a₂ = f b₁ b₂) → β","name":"Con.liftOn₂","isProp":false,"docString":"The binary function on the quotient by a congruence relation `c` induced by a binary function\nthat is constant on `c`'s equivalence classes. ","distance":0.99101785477143311542391757029690779745578765869140625}],["The `c₆` coefficient of a Weierstrass curve. ",{"type":"{R : Type u} → [inst : CommRing R] → WeierstrassCurve R → R","name":"WeierstrassCurve.c₆","isProp":false,"docString":"The `c₆` coefficient of a Weierstrass curve. ","distance":0.99374977138003706134128378835157491266727447509765625}],["A regular element `c` is right-regular ",{"type":"∀ {R : Type u_1} [inst : Mul R] {c : R}, IsRegular c → IsRightRegular c","name":"IsRegular.right","isProp":true,"docString":"A regular element `c` is right-regular ","distance":1.0046804803153788210323682505986653268337249755859375}],["`2` is a square in `F` iff `#F` is not congruent to `3` or `5` mod `8`. ",{"type":"∀ {F : Type u_1} [inst : Field F] [inst_1 : Fintype F], IsSquare 2 ↔ Fintype.card F % 8 ≠ 3 ∧ Fintype.card F % 8 ≠ 5","name":"FiniteField.isSquare_two_iff","isProp":true,"docString":"`2` is a square in `F` iff `#F` is not congruent to `3` or `5` mod `8`. ","distance":1.0095971280170754624805340426973998546600341796875}],["`cantorFunction c` is injective if `0 < c < 1/2`. ",{"type":"∀ {c : ℝ}, 0 < c → c < 1 / 2 → Function.Injective (Cardinal.cantorFunction c)","name":"Cardinal.cantorFunction_injective","isProp":true,"docString":"`cantorFunction c` is injective if `0 < c < 1/2`. ","distance":1.0119180965456304743810278523596934974193572998046875}],["Any group of exponent two is abelian. ",{"type":"{G : Type u} → [inst : Group G] → Monoid.exponent G = 2 → CommGroup G","name":"instCommGroupOfExponentTwo","isProp":false,"docString":"Any group of exponent two is abelian. ","distance":1.0150850706669398704207196715287864208221435546875}],["In a finite field of characteristic `2`, all elements are squares. ",{"type":"∀ {F : Type u_3} [inst : Field F] [inst_1 : Finite F], ringChar F = 2 → ∀ (a : F), IsSquare a","name":"FiniteField.isSquare_of_char_two","isProp":true,"docString":"In a finite field of characteristic `2`, all elements are squares. ","distance":1.0175573907547457164213255964568816125392913818359375}],["`cantorFunction c` is strictly increasing with if `0 < c < 1/2`, if we endow `ℕ → Bool` with a\nlexicographic order. The lexicographic order doesn't exist for these infinitary products, so we\nexplicitly write out what it means. ",{"type":"∀ {c : ℝ},\n  0 < c →\n    c < 1 / 2 →\n      ∀ {n : ℕ} {f g : ℕ → Bool},\n        (∀ k < n, f k = g k) → f n = false → g n = true → Cardinal.cantorFunction c f < Cardinal.cantorFunction c g","name":"Cardinal.increasing_cantorFunction","isProp":true,"docString":"`cantorFunction c` is strictly increasing with if `0 < c < 1/2`, if we endow `ℕ → Bool` with a\nlexicographic order. The lexicographic order doesn't exist for these infinitary products, so we\nexplicitly write out what it means. ","distance":1.019182309207628644998067102278582751750946044921875}],["An add-regular element `c` is right-regular ",{"type":"∀ {R : Type u_2} [inst : Add R] {c : R}, IsAddRegular c → IsAddRightRegular c","name":"IsAddRegular.right","isProp":true,"docString":"An add-regular element `c` is right-regular ","distance":1.0194842626167262000791424725321121513843536376953125}]]