[["For positive `a` and `b`, the prime factors of `a * b` are the union of those of `a` and `b` ",{"type":"∀ {a b : ℕ}, a ≠ 0 → b ≠ 0 → (a * b).primeFactorsList.Perm (a.primeFactorsList ++ b.primeFactorsList)","name":"Nat.perm_primeFactorsList_mul","isProp":true,"docString":"For positive `a` and `b`, the prime factors of `a * b` are the union of those of `a` and `b` ","distance":0.88724857536230972154811524887918494641780853271484375}],[" If two natural numbers `a` and `b` are coprime, then the prime factorization of their product `a * b` is the concatenation of the prime factorizations of `a` and `b`.",{"type":"∀ {a b : ℕ}, a.Coprime b → (a * b).factorization = a.factorization + b.factorization","name":"Nat.factorization_mul_of_coprime","isProp":true,"docString":" If two natural numbers `a` and `b` are coprime, then the prime factorization of their product `a * b` is the concatenation of the prime factorizations of `a` and `b`.","distance":0.82525282802248367541864126906148158013820648193359375}],["This theorem states that for any two integers `a` and `b`, if you add `a` to the sum of `-a` and `b`, you will get `b`. In more formal mathematical terms, this is expressing the property that adding the additive inverse of a number to that number results in zero, which when added to any other number, leaves that number unchanged. Thus, `a + (-a + b) = b` for all integers `a` and `b`.",{"type":"∀ (a b : ℤ), a + (-a + b) = b","name":"Int.add_neg_cancel_left","isProp":true,"docString":"This theorem states that for any two integers `a` and `b`, if you add `a` to the sum of `-a` and `b`, you will get `b`. In more formal mathematical terms, this is expressing the property that adding the additive inverse of a number to that number results in zero, which when added to any other number, leaves that number unchanged. Thus, `a + (-a + b) = b` for all integers `a` and `b`.","distance":0.94106866150869894482866584439761936664581298828125}],["Two elements additively commute if `a + b = b + a`",{"type":"{S : Type u_3} → [inst : Add S] → S → S → Prop","name":"AddCommute","isProp":false,"docString":"Two elements additively commute if `a + b = b + a`","distance":0.8931891856080447222865359435672871768474578857421875}],[" For all natural numbers `a` and `b`, `(a ^ 2) - (b ^ 2)` equals `(a + b) * (a - b)`.",{"type":"∀ (a b : ℕ), a ^ 2 - b ^ 2 = (a + b) * (a - b)","name":"Nat.pow_two_sub_pow_two","isProp":true,"docString":" For all natural numbers `a` and `b`, `(a ^ 2) - (b ^ 2)` equals `(a + b) * (a - b)`.","distance":0.8838212104310276817642488822457380592823028564453125}],["This theorem states that for any two integers `a` and `b`, if you subtract `b` from `a` and then add `b` back, you get `a` back. In mathematical terms, it states that for all integers `a` and `b`, the equation `a - b + b = a` holds. This essentially captures the property of subtraction and addition being inverse operations.",{"type":"∀ (a b : ℤ), a - b + b = a","name":"Int.sub_add_cancel","isProp":true,"docString":"This theorem states that for any two integers `a` and `b`, if you subtract `b` from `a` and then add `b` back, you get `a` back. In mathematical terms, it states that for all integers `a` and `b`, the equation `a - b + b = a` holds. This essentially captures the property of subtraction and addition being inverse operations.","distance":0.9472516447294452301974843067000620067119598388671875}],["The sets of factors of coprime `a` and `b` are disjoint ",{"type":"∀ {a b : ℕ}, a.Coprime b → a.primeFactorsList.Disjoint b.primeFactorsList","name":"Nat.coprime_primeFactorsList_disjoint","isProp":true,"docString":"The sets of factors of coprime `a` and `b` are disjoint ","distance":0.894907371127981132730155877652578055858612060546875}],["For coprime `a` and `b`, the prime factors of `a * b` are the union of those of `a` and `b` ",{"type":"∀ {a b : ℕ}, a.Coprime b → (a * b).primeFactorsList.Perm (a.primeFactorsList ++ b.primeFactorsList)","name":"Nat.perm_primeFactorsList_mul_of_coprime","isProp":true,"docString":"For coprime `a` and `b`, the prime factors of `a * b` are the union of those of `a` and `b` ","distance":0.90020277994995201442662846602615900337696075439453125}],["`a + b` computes the sum of `a` and `b`.\nThe meaning of this notation is type-dependent. ",{"type":"Lean.TrailingParserDescr","name":"«term_+_»","isProp":false,"docString":"`a + b` computes the sum of `a` and `b`.\nThe meaning of this notation is type-dependent. ","distance":0.90937707375468901371817764811567030847072601318359375}],["`a +ᵥ b` computes the sum of `a` and `b`. The meaning of this notation is type-dependent,\nbut it is intended to be used for left actions. ",{"type":"{G : Type u} → {P : Type v} → [self : VAdd G P] → G → P → P","name":"VAdd.vadd","isProp":false,"docString":"`a +ᵥ b` computes the sum of `a` and `b`. The meaning of this notation is type-dependent,\nbut it is intended to be used for left actions. ","distance":0.92088022605967145839400700424448587000370025634765625}],["Two elements commute if `a * b = b * a`. ",{"type":"{S : Type u_3} → [inst : Mul S] → S → S → Prop","name":"Commute","isProp":false,"docString":"Two elements commute if `a * b = b * a`. ","distance":0.92271009310250107215978232488851062953472137451171875}],["We can swap `a` and `b` in a minimal solution to `a ^ 4 + b ^ 4 = c ^ 2`. ",{"type":"∀ {a b c : ℤ}, Fermat42.Minimal a b c → Fermat42.Minimal b a c","name":"Fermat42.minimal_comm","isProp":true,"docString":"We can swap `a` and `b` in a minimal solution to `a ^ 4 + b ^ 4 = c ^ 2`. ","distance":0.9289042215886629261234475052333436906337738037109375}],["Shows that $e^{aX} * e^{bX} = e^{(a + b)X}$ ",{"type":"∀ {A : Type u_1} [inst : CommRing A] [inst_1 : Algebra ℚ A] (a b : A),\n  (PowerSeries.rescale a) (PowerSeries.exp A) * (PowerSeries.rescale b) (PowerSeries.exp A) =\n    (PowerSeries.rescale (a + b)) (PowerSeries.exp A)","name":"PowerSeries.exp_mul_exp_eq_exp_add","isProp":true,"docString":"Shows that $e^{aX} * e^{bX} = e^{(a + b)X}$ ","distance":0.9313088484630309693557137507013976573944091796875}],["`a +ᵥ b` computes the sum of `a` and `b`.\nThe meaning of this notation is type-dependent. ",{"type":"{α : Type u} → {β : Type v} → {γ : outParam (Type w)} → [self : HVAdd α β γ] → α → β → γ","name":"HVAdd.hVAdd","isProp":false,"docString":"`a +ᵥ b` computes the sum of `a` and `b`.\nThe meaning of this notation is type-dependent. ","distance":0.93187877801758267626297538299695588648319244384765625}],["`a • b` computes the product of `a` and `b`. The meaning of this notation is type-dependent,\nbut it is intended to be used for left actions. ",{"type":"{M : Type u} → {α : Type v} → [self : SMul M α] → M → α → α","name":"SMul.smul","isProp":false,"docString":"`a • b` computes the product of `a` and `b`. The meaning of this notation is type-dependent,\nbut it is intended to be used for left actions. ","distance":0.9426464355170518505389054553234018385410308837890625}],["If `a` commutes with both `b` and `c`, then it commutes with their sum.",{"type":"∀ {S : Type u_3} [inst : AddSemigroup S] {a b c : S}, AddCommute a b → AddCommute a c → AddCommute a (b + c)","name":"AddCommute.add_right","isProp":true,"docString":"If `a` commutes with both `b` and `c`, then it commutes with their sum.","distance":0.94408677694794718160409274787525646388530731201171875}],["`a • b` computes the product of `a` and `b`.\nThe meaning of this notation is type-dependent, but it is intended to be used for left actions. ",{"type":"{α : Type u} → {β : Type v} → {γ : outParam (Type w)} → [self : HSMul α β γ] → α → β → γ","name":"HSMul.hSMul","isProp":false,"docString":"`a • b` computes the product of `a` and `b`.\nThe meaning of this notation is type-dependent, but it is intended to be used for left actions. ","distance":0.94663458559037627626508992761955596506595611572265625}],["If `a` commutes with `b`, then `b` commutes with `a`.",{"type":"∀ {S : Type u_3} [inst : Add S] {a b : S}, AddCommute a b → AddCommute b a","name":"AddCommute.symm","isProp":true,"docString":"If `a` commutes with `b`, then `b` commutes with `a`.","distance":0.94963264893461885041148207164951600134372711181640625}],["If `a` commutes with `b`, then `b` commutes with `a`. ",{"type":"∀ {S : Type u_3} [inst : Mul S] {a b : S}, Commute a b → Commute b a","name":"Commute.symm","isProp":true,"docString":"If `a` commutes with `b`, then `b` commutes with `a`. ","distance":0.9512101164696702415568552169133909046649932861328125}],["a minimal solution to `a ^ 4 + b ^ 4 = c ^ 2` must have `a` and `b` coprime. ",{"type":"∀ {a b c : ℤ}, Fermat42.Minimal a b c → IsCoprime a b","name":"Fermat42.coprime_of_minimal","isProp":true,"docString":"a minimal solution to `a ^ 4 + b ^ 4 = c ^ 2` must have `a` and `b` coprime. ","distance":0.96464286271055821320175027722143568098545074462890625}],["If `a` commutes with both `b` and `c`, then it commutes with their product. ",{"type":"∀ {S : Type u_3} [inst : Semigroup S] {a b c : S}, Commute a b → Commute a c → Commute a (b * c)","name":"Commute.mul_right","isProp":true,"docString":"If `a` commutes with both `b` and `c`, then it commutes with their product. ","distance":0.96558460953418834282757643450167961418628692626953125}],["Given `S' : Solution'`, we may assume that `λ ^ 2` divides `S'.a + S'.b ∨ λ ^ 2` (see also the\nresult below). ",{"type":"∀ {K : Type u_1} [inst : Field K] {ζ : K} {hζ : IsPrimitiveRoot ζ ↑3} (S' : FermatLastTheoremForThreeGen.Solution' hζ)\n  [inst_1 : NumberField K] [inst_2 : IsCyclotomicExtension {3} ℚ K] [inst_3 : DecidableRel fun a b => a ∣ b],\n  ∃ a' b',\n    a' ^ 3 + b' ^ 3 = ↑S'.u * S'.c ^ 3 ∧\n      IsCoprime a' b' ∧ ¬hζ.toInteger - 1 ∣ a' ∧ ¬hζ.toInteger - 1 ∣ b' ∧ (hζ.toInteger - 1) ^ 2 ∣ a' + b'","name":"FermatLastTheoremForThreeGen.ex_cube_add_cube_eq_and_isCoprime_and_not_dvd_and_dvd","isProp":true,"docString":"Given `S' : Solution'`, we may assume that `λ ^ 2` divides `S'.a + S'.b ∨ λ ^ 2` (see also the\nresult below). ","distance":0.96583465918203759148497056230553425848484039306640625}],["Two elements `a` and `b` commute if `a * b = b * a`.\n",{"type":"∀ {S : Type u_3} [inst : Mul S] (a b : S), Commute a b ↔ a * b = b * a","name":"commute_iff_eq","isProp":true,"docString":"Two elements `a` and `b` commute if `a * b = b * a`.\n","distance":0.966190247069778518351768070715479552745819091796875}],["The symbol `J(a^2 | b)` is `1` when `a` and `b` are coprime. ",{"type":"∀ {a : ℤ} {b : ℕ}, a.gcd ↑b = 1 → jacobiSym (a ^ 2) b = 1","name":"jacobiSym.sq_one'","isProp":true,"docString":"The symbol `J(a^2 | b)` is `1` when `a` and `b` are coprime. ","distance":0.9663925485378144220049989598919637501239776611328125}]]