[["Returns the \"sign\" of the integer as another integer: `1` for positive numbers,\n`-1` for negative numbers, and `0` for `0`.\n",{"type":"‚Ñ§ ‚Üí ‚Ñ§","name":"Int.sign","isProp":false,"docString":"Returns the \"sign\" of the integer as another integer: `1` for positive numbers,\n`-1` for negative numbers, and `0` for `0`.\n","distance":1.933711987219907779689265225897543132305145263671875}],[" Given a non-zero point `x` in a topological space `G` with inversion, a nontrivially normed field `ùïú`, a normed additive group `E` over `ùïú` as a normed space, another topological space `H`, and a model `I` with corners, the function `y ‚Ü¶ 1/y` is smooth at `x` in the function space from `E` to `E` and from `H` to `H`.",{"type":"‚àÄ {ùïú : Type u_1} [inst : NontriviallyNormedField ùïú] {H : Type u_2} [inst_1 : TopologicalSpace H] {E : Type u_3}\n  [inst_2 : NormedAddCommGroup E] [inst_3 : NormedSpace ùïú E] {I : ModelWithCorners ùïú E H} {G : Type u_4}\n  [inst_4 : Inv G] [inst_5 : Zero G] [inst_6 : TopologicalSpace G] [inst_7 : ChartedSpace H G] [self : SmoothInv‚ÇÄ I G]\n  ‚¶Éx : G‚¶Ñ, x ‚â† 0 ‚Üí SmoothAt I I (fun y => y‚Åª¬π) x","name":"SmoothInv‚ÇÄ.smoothAt_inv‚ÇÄ","isProp":true,"docString":" Given a non-zero point `x` in a topological space `G` with inversion, a nontrivially normed field `ùïú`, a normed additive group `E` over `ùïú` as a normed space, another topological space `H`, and a model `I` with corners, the function `y ‚Ü¶ 1/y` is smooth at `x` in the function space from `E` to `E` and from `H` to `H`.","distance":1.975954412259735892831713499617762863636016845703125}],["The theorem `Int.sign_zero` asserts that the sign of the integer 0 is also 0. In other words, when the function `Int.sign` is applied to the integer 0, it returns 0, which is consistent with the definition of the sign function that assigns `0` to `0`, `1` to positive integers, and `-1` to negative integers.",{"type":"Int.sign 0 = 0","name":"Int.sign_zero","isProp":true,"docString":"The theorem `Int.sign_zero` asserts that the sign of the integer 0 is also 0. In other words, when the function `Int.sign` is applied to the integer 0, it returns 0, which is consistent with the definition of the sign function that assigns `0` to `0`, `1` to positive integers, and `-1` to negative integers.","distance":1.973777025982727639785707651753909885883331298828125}],["A `PreconnectedSpace` version of `isPreconnected.constant` ",{"type":"‚àÄ {Œ± : Type u} [inst : TopologicalSpace Œ±] {Y : Type u_3} [inst_1 : TopologicalSpace Y] [inst_2 : DiscreteTopology Y],\n  PreconnectedSpace Œ± ‚Üí ‚àÄ {f : Œ± ‚Üí Y}, Continuous f ‚Üí ‚àÄ {x y : Œ±}, f x = f y","name":"PreconnectedSpace.constant","isProp":true,"docString":"A `PreconnectedSpace` version of `isPreconnected.constant` ","distance":1.9664917356405824389042891198187135159969329833984375}],[" For any nontrivially normed field `ùïú`, normed additive commutative group `E`, normed space `E` over `ùïú`, and topological space `H`, the function `I` from `ùïú` to `E` defined in a Model With Corners `I` of types `ùïú`, `E`, and `H` is uniquely differentiable on its entire range.",{"type":"‚àÄ {ùïú : Type u_1} [inst : NontriviallyNormedField ùïú] {E : Type u_2} [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace ùïú E] {H : Type u_3} [inst_3 : TopologicalSpace H] (I : ModelWithCorners ùïú E H),\n  UniqueDiffOn ùïú (Set.range ‚ÜëI)","name":"ModelWithCorners.unique_diff","isProp":true,"docString":" For any nontrivially normed field `ùïú`, normed additive commutative group `E`, normed space `E` over `ùïú`, and topological space `H`, the function `I` from `ùïú` to `E` defined in a Model With Corners `I` of types `ùïú`, `E`, and `H` is uniquely differentiable on its entire range.","distance":1.9853222288943168649666404235176742076873779296875}],["This theorem, named `sign_pos`, states that for any type `Œ±` that has a zero, a preorder (a binary relation that is reflexive and transitive), and a decidable relation for less than, if a certain element `a` of type `Œ±` is greater than zero, then the sign of `a` is 1. The sign is determined by the `SignType.sign` function, which assigns 1 if the element is positive, -1 if it is negative, and 0 otherwise.",{"type":"‚àÄ {Œ± : Type u_1} [inst : Zero Œ±] [inst_1 : Preorder Œ±] [inst_2 : DecidableRel fun x x_1 => x < x_1] {a : Œ±},\n  0 < a ‚Üí SignType.sign a = 1","name":"sign_pos","isProp":true,"docString":"This theorem, named `sign_pos`, states that for any type `Œ±` that has a zero, a preorder (a binary relation that is reflexive and transitive), and a decidable relation for less than, if a certain element `a` of type `Œ±` is greater than zero, then the sign of `a` is 1. The sign is determined by the `SignType.sign` function, which assigns 1 if the element is positive, -1 if it is negative, and 0 otherwise.","distance":1.9756419783706375969956070548505522310733795166015625}],["**Minimum principle** for concave functions on a segment. If a function `f` is concave on the\nsegment `[x, y]`, then the eventual minimum of `f` on `[x, y]` is at `x` or `y`. ",{"type":"‚àÄ {ùïú : Type u_1} {E : Type u_2} {Œ≤ : Type u_4} [inst : LinearOrderedField ùïú] [inst_1 : AddCommGroup E]\n  [inst_2 : LinearOrderedAddCommGroup Œ≤] [inst_3 : Module ùïú E] [inst_4 : Module ùïú Œ≤] [inst_5 : OrderedSMul ùïú Œ≤]\n  {f : E ‚Üí Œ≤} {x y z : E}, ConcaveOn ùïú (segment ùïú x y) f ‚Üí z ‚àà segment ùïú x y ‚Üí min (f x) (f y) ‚â§ f z","name":"ConcaveOn.min_le_of_mem_segment","isProp":true,"docString":"**Minimum principle** for concave functions on a segment. If a function `f` is concave on the\nsegment `[x, y]`, then the eventual minimum of `f` on `[x, y]` is at `x` or `y`. ","distance":1.971526280916684914501502134953625500202178955078125}],["Default definition of `min`. ",{"type":"{Œ± : Type u} ‚Üí [inst : LE Œ±] ‚Üí [inst : DecidableRel fun x x_1 => x ‚â§ x_1] ‚Üí Œ± ‚Üí Œ± ‚Üí Œ±","name":"minDefault","isProp":false,"docString":"Default definition of `min`. ","distance":1.9725508954435471142829783275374211370944976806640625}],["Checks that `id` has not already been `#align`ed or `#noalign`ed. ",{"type":"{m : Type ‚Üí Type} ‚Üí [inst : Monad m] ‚Üí [inst : Lean.MonadEnv m] ‚Üí [inst : Lean.MonadError m] ‚Üí Lean.Name ‚Üí m Unit","name":"Mathlib.Prelude.Rename.ensureUnused","isProp":false,"docString":"Checks that `id` has not already been `#align`ed or `#noalign`ed. ","distance":1.9733270231688335716313531520427204668521881103515625}],["The set of functions on `X ‚äï Y` that are candidates distances to realize the\nminimum of the Hausdorff distances between `X` and `Y` in a coupling. ",{"type":"(X : Type u) ‚Üí (Y : Type v) ‚Üí [inst : MetricSpace X] ‚Üí [inst : MetricSpace Y] ‚Üí Set (GromovHausdorff.ProdSpaceFun X Y)","name":"GromovHausdorff.candidates","isProp":false,"docString":"The set of functions on `X ‚äï Y` that are candidates distances to realize the\nminimum of the Hausdorff distances between `X` and `Y` in a coupling. ","distance":1.973719896141687524249164198408834636211395263671875}],["The distance between two vertices is the length of the shortest walk between them.\nIf no such walk exists, this uses the junk value of `0`. ",{"type":"{V : Type u_1} ‚Üí SimpleGraph V ‚Üí V ‚Üí V ‚Üí ‚Ñï","name":"SimpleGraph.dist","isProp":false,"docString":"The distance between two vertices is the length of the shortest walk between them.\nIf no such walk exists, this uses the junk value of `0`. ","distance":1.974009443548796927103694542893208563327789306640625}],["Imaginary unit in `K`. Meant to be set to `0` for `K = ‚Ñù`. ",{"type":"{K : semiOutParam (Type u_1)} ‚Üí [self : IsROrC K] ‚Üí K","name":"IsROrC.I","isProp":false,"docString":"Imaginary unit in `K`. Meant to be set to `0` for `K = ‚Ñù`. ","distance":1.974632331772463000874040517373941838741302490234375}],["Helper function for `#long_names` and `#long_instances`. ",{"type":"Std.HashMap Lean.Name (Array Lean.Name) ‚Üí IO Unit","name":"printNameHashMap","isProp":false,"docString":"Helper function for `#long_names` and `#long_instances`. ","distance":1.9748740199833587638522658380679786205291748046875}],["The default cost structure, for which all operations cost `1`. ",{"type":"{Œ± : Type u_1} ‚Üí [inst : DecidableEq Œ±] ‚Üí Levenshtein.Cost Œ± Œ± ‚Ñï","name":"Levenshtein.defaultCost","isProp":false,"docString":"The default cost structure, for which all operations cost `1`. ","distance":1.9769025996877045425748065099469386041164398193359375}],["Corresponds to `zero_eq_dist`. ",{"type":"‚àÄ {Œπ : Type u_2} {Œ≤ : Œπ ‚Üí Type u_3} [inst : Fintype Œπ] [inst_1 : (i : Œπ) ‚Üí DecidableEq (Œ≤ i)] {x y : (i : Œπ) ‚Üí Œ≤ i},\n  0 = hammingDist x y ‚Üî x = y","name":"hamming_zero_eq_dist","isProp":true,"docString":"Corresponds to `zero_eq_dist`. ","distance":1.9773173633402556514937487008864991366863250732421875}],["A solution is `1` or `-1` if and only if `y = 0`. ",{"type":"‚àÄ {d : ‚Ñ§} {a : Pell.Solution‚ÇÅ d}, a = 1 ‚à® a = -1 ‚Üî Pell.Solution‚ÇÅ.y a = 0","name":"Pell.Solution‚ÇÅ.eq_one_or_neg_one_iff_y_eq_zero","isProp":true,"docString":"A solution is `1` or `-1` if and only if `y = 0`. ","distance":1.977550087032830194999633022234775125980377197265625}],["The default priority for spawned tasks, also the lowest priority: `0`. ",{"type":"Task.Priority","name":"Task.Priority.default","isProp":false,"docString":"The default priority for spawned tasks, also the lowest priority: `0`. ","distance":1.9775579834247338784081193807651288807392120361328125}],["A tactic that solves `0 ‚â§ ‚Üëx`, `0 ‚â§ 1 - ‚Üëx`, `‚Üëx ‚â§ 1`, and `1 - ‚Üëx ‚â§ 1` for `x : I`. ",{"type":"Lean.ParserDescr","name":"Tactic.Interactive.tacticUnit_interval","isProp":false,"docString":"A tactic that solves `0 ‚â§ ‚Üëx`, `0 ‚â§ 1 - ‚Üëx`, `‚Üëx ‚â§ 1`, and `1 - ‚Üëx ‚â§ 1` for `x : I`. ","distance":1.9790246826013293546253635213361121714115142822265625}],["Characterization of minimizers for the projection on a convex set in a real inner product\nspace. ",{"type":"‚àÄ {F : Type u_3} [inst : NormedAddCommGroup F] [inst_1 : InnerProductSpace ‚Ñù F] {K : Set F},\n  Convex ‚Ñù K ‚Üí ‚àÄ {u v : F}, v ‚àà K ‚Üí (‚Äñu - v‚Äñ = ‚®Ö w, ‚Äñu - ‚Üëw‚Äñ ‚Üî ‚àÄ w ‚àà K, ‚ü™u - v, w - v‚ü´_‚Ñù ‚â§ 0)","name":"norm_eq_iInf_iff_real_inner_le_zero","isProp":true,"docString":"Characterization of minimizers for the projection on a convex set in a real inner product\nspace. ","distance":1.979385399933907052627546363510191440582275390625}],["Cost structure for strings, where cost is the length of the token.\n",{"type":"Levenshtein.Cost String String ‚Ñï","name":"Levenshtein.stringLengthCost","isProp":false,"docString":"Cost structure for strings, where cost is the length of the token.\n","distance":1.9800532462245314935245232845772989094257354736328125}],["cases distinction for an arrow in the category of 0-length type vectors ",{"type":"{Œ≤ : (v : TypeVec.{u_2} 0) ‚Üí (v' : TypeVec.{u_3} 0) ‚Üí TypeVec.Arrow v v' ‚Üí Sort u_1} ‚Üí\n  Œ≤ Fin2.elim0 Fin2.elim0 TypeVec.nilFun ‚Üí\n    (v : TypeVec.{u_2} 0) ‚Üí (v' : TypeVec.{u_3} 0) ‚Üí (fs : TypeVec.Arrow v v') ‚Üí Œ≤ v v' fs","name":"TypeVec.typevecCasesNil‚ÇÉ","isProp":false,"docString":"cases distinction for an arrow in the category of 0-length type vectors ","distance":1.980337686778918193652998525067232549190521240234375}],["**Minimum principle** for concave functions on an interval. If a function `f` is concave on the\ninterval `[x, y]`, then the eventual minimum of `f` on `[x, y]` is at `x` or `y`. ",{"type":"‚àÄ {ùïú : Type u_1} {Œ≤ : Type u_4} [inst : LinearOrderedField ùïú] [inst_1 : LinearOrderedAddCommGroup Œ≤]\n  [inst_2 : Module ùïú Œ≤] [inst_3 : OrderedSMul ùïú Œ≤] {f : ùïú ‚Üí Œ≤} {x y z : ùïú},\n  ConcaveOn ùïú (Set.Icc x y) f ‚Üí z ‚àà Set.Icc x y ‚Üí min (f x) (f y) ‚â§ f z","name":"ConcaveOn.min_le_of_mem_Icc","isProp":true,"docString":"**Minimum principle** for concave functions on an interval. If a function `f` is concave on the\ninterval `[x, y]`, then the eventual minimum of `f` on `[x, y]` is at `x` or `y`. ","distance":1.9810496805778659012986508969333954155445098876953125}],["The default priority `default = 1000`, which is used when no priority is set. ",{"type":"Lean.ParserDescr","name":"prioDefault","isProp":false,"docString":"The default priority `default = 1000`, which is used when no priority is set. ","distance":1.9815176808733367952441994930268265306949615478515625}],["specialized cases distinction for an arrow in the category of 0-length type vectors ",{"type":"{Œ≤ : TypeVec.Arrow Fin2.elim0 Fin2.elim0 ‚Üí Sort u_1} ‚Üí\n  Œ≤ TypeVec.nilFun ‚Üí (f : TypeVec.Arrow Fin2.elim0 Fin2.elim0) ‚Üí Œ≤ f","name":"TypeVec.typevecCasesNil‚ÇÇ","isProp":false,"docString":"specialized cases distinction for an arrow in the category of 0-length type vectors ","distance":1.98193557350320315180169927771203219890594482421875}]]