[["Convert a pre-set to a `set` of pre-sets. ",{"type":"PSet → Set PSet","name":"PSet.toSet","isProp":false,"docString":"Convert a pre-set to a `set` of pre-sets. ","distance":1.9772511653246469531808315878151915967464447021484375}],[" A set in a sigma-finite measurable space has positive measure if and only if there exists a finite measure spanning set index such that the intersection of the set with that spanning set has positive measure.",{"type":"∀ {α : Type u_1} [inst : MeasurableSpace α] {μ : MeasureTheory.Measure α} [inst_1 : MeasureTheory.SigmaFinite μ]\n  (s : Set α), (∃ n, 0 < ↑↑μ (s ∩ MeasureTheory.spanningSets μ n)) ↔ 0 < ↑↑μ s","name":"MeasureTheory.Measure.exists_measure_inter_spanningSets_pos","isProp":true,"docString":" A set in a sigma-finite measurable space has positive measure if and only if there exists a finite measure spanning set index such that the intersection of the set with that spanning set has positive measure.","distance":2.00639114367195414700972833088599145412445068359375}],["This theorem states that for any positive number `n` of type `PosNum`, the double coercion of `n` to natural number and then to integer is equal to the direct coercion of `n` to integer. Essentially, it ensures that converting a positive number to a natural number and then to an integer yields the same result as directly converting the positive number to an integer.",{"type":"∀ (n : PosNum), ↑↑n = ↑n","name":"PosNum.to_nat_to_int","isProp":true,"docString":"This theorem states that for any positive number `n` of type `PosNum`, the double coercion of `n` to natural number and then to integer is equal to the direct coercion of `n` to integer. Essentially, it ensures that converting a positive number to a natural number and then to an integer yields the same result as directly converting the positive number to an integer.","distance":2.002362524013112210496956322458572685718536376953125}],["Restrict a prepartition to a box. ",{"type":"{ι : Type u_1} →\n  {I : BoxIntegral.Box ι} → BoxIntegral.Prepartition I → (J : BoxIntegral.Box ι) → BoxIntegral.Prepartition J","name":"BoxIntegral.Prepartition.restrict","isProp":false,"docString":"Restrict a prepartition to a box. ","distance":1.988937617345639896626607878715731203556060791015625}],[" For every positive number `n` in Lean, the double-coercion `n` to natural number and then to number equals the positive version of `n`. In mathematical notation, for all positive numbers $n$, we have $\\text{Num.pos}\\ n = n$.",{"type":"∀ (n : PosNum), ↑↑n = Num.pos n","name":"PosNum.of_to_nat","isProp":true,"docString":" For every positive number `n` in Lean, the double-coercion `n` to natural number and then to number equals the positive version of `n`. In mathematical notation, for all positive numbers $n$, we have $\\text{Num.pos}\\ n = n$.","distance":2.00962989350427978507696025189943611621856689453125}],["This theorem states that for every positive number `n`, the double-coercion of `n` (which converts it first into a natural number and then into a number) gives the positive version of `n`. In other words, converting a positive number to a natural number and then to a generic number preserves its positivity. This can be symbolically represented in LaTeX as, for all positive numbers $n$, we have $n = \\text{Num.pos} \\ n$.",{"type":"∀ (n : PosNum), ↑↑n = Num.pos n","name":"PosNum.of_to_nat","isProp":true,"docString":"This theorem states that for every positive number `n`, the double-coercion of `n` (which converts it first into a natural number and then into a number) gives the positive version of `n`. In other words, converting a positive number to a natural number and then to a generic number preserves its positivity. This can be symbolically represented in LaTeX as, for all positive numbers $n$, we have $n = \\text{Num.pos} \\ n$.","distance":2.01310983910898944060363646713085472583770751953125}],["The edit to perform on the file. ",{"type":"ProofWidgets.MakeEditLinkProps → Lean.Lsp.TextDocumentEdit","name":"ProofWidgets.MakeEditLinkProps.edit","isProp":false,"docString":"The edit to perform on the file. ","distance":1.9896433368661534668575541218160651624202728271484375}],["Right-shift the binary representation of a `PosNum`. ",{"type":"PosNum → ℕ → Num","name":"PosNum.shiftr","isProp":false,"docString":"Right-shift the binary representation of a `PosNum`. ","distance":1.989758738230038570549140786170028150081634521484375}],["Converts a `ZNum` to a `PosNum`, mapping all out of range values to `1`. ",{"type":"ZNum → PosNum","name":"PosNum.ofZNum","isProp":false,"docString":"Converts a `ZNum` to a `PosNum`, mapping all out of range values to `1`. ","distance":1.99129651035894994492991827428340911865234375}],["`whatsnew in $command` executes the command and then prints the\ndeclarations that were added to the environment. ",{"type":"Lean.ParserDescr","name":"Mathlib.WhatsNew.commandWhatsnewIn__","isProp":false,"docString":"`whatsnew in $command` executes the command and then prints the\ndeclarations that were added to the environment. ","distance":1.9917739093542199402264714080956764519214630126953125}],["The universal set `Set.univ` in a preconnected space is a preconnected set. ",{"type":"∀ {α : Type u} [inst : TopologicalSpace α] [self : PreconnectedSpace α], IsPreconnected Set.univ","name":"PreconnectedSpace.isPreconnected_univ","isProp":true,"docString":"The universal set `Set.univ` in a preconnected space is a preconnected set. ","distance":1.99198357914662693701757234521210193634033203125}],["If we dilate a convex set about a point in its interior by a scale `t > 1`, the interior of\nthe result includes the closure of the original set.\n\nTODO Generalise this from convex sets to sets that are balanced / star-shaped about `x`. ",{"type":"∀ {E : Type u_3} [inst : AddCommGroup E] [inst_1 : Module ℝ E] [inst_2 : TopologicalSpace E]\n  [inst_3 : TopologicalAddGroup E] [inst_4 : ContinuousSMul ℝ E] {s : Set E},\n  Convex ℝ s → ∀ {x : E}, x ∈ interior s → ∀ (t : ℝ), 1 < t → closure s ⊆ interior (⇑(AffineMap.homothety x t) '' s)","name":"Convex.closure_subset_interior_image_homothety_of_one_lt","isProp":true,"docString":"If we dilate a convex set about a point in its interior by a scale `t > 1`, the interior of\nthe result includes the closure of the original set.\n\nTODO Generalise this from convex sets to sets that are balanced / star-shaped about `x`. ","distance":1.99198585056132859705257942550815641880035400390625}],["the condition that `premap` is in the presieve ",{"type":"∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] {D : Type u₂} [inst_1 : CategoryTheory.Category.{v₂, u₂} D]\n  {F : CategoryTheory.Functor C D} {X : C} {S : CategoryTheory.Presieve X} {Y : D} {f : Y ⟶ F.obj X}\n  (self : CategoryTheory.Presieve.FunctorPushforwardStructure F S f), S self.premap","name":"CategoryTheory.Presieve.FunctorPushforwardStructure.cover","isProp":true,"docString":"the condition that `premap` is in the presieve ","distance":1.992381282454988689067931773024611175060272216796875}],["Elaborate a `#noalign` command. ",{"type":"Lean.Elab.Command.CommandElab","name":"Mathlib.Prelude.Rename.elabNoAlign","isProp":false,"docString":"Elaborate a `#noalign` command. ","distance":1.99241935831806671330923563800752162933349609375}],["Which textual range to select after the edit.\nThe range is interpreted in the file that `edit` applies to.\nIf present and `start == end`, the cursor is moved to `start` and nothing is selected.\nIf not present, the selection is not changed. ",{"type":"ProofWidgets.MakeEditLinkProps → Option Lean.Lsp.Range","name":"ProofWidgets.MakeEditLinkProps.newSelection?","isProp":false,"docString":"Which textual range to select after the edit.\nThe range is interpreted in the file that `edit` applies to.\nIf present and `start == end`, the cursor is moved to `start` and nothing is selected.\nIf not present, the selection is not changed. ","distance":1.9929086155002828650850688063655979931354522705078125}],["The weighted sum is unaffected by changing the weights to the\ncorresponding indicator function and adding points to the set. ",{"type":"∀ {k : Type u_1} {V : Type u_2} {P : Type u_3} [inst : Ring k] [inst_1 : AddCommGroup V] [inst_2 : Module k V]\n  [S : AddTorsor V P] {ι : Type u_4} (w : ι → k) (p : ι → P) {s₁ s₂ : Finset ι},\n  s₁ ⊆ s₂ → (Finset.weightedVSub s₁ p) w = (Finset.weightedVSub s₂ p) (Set.indicator (↑s₁) w)","name":"Finset.weightedVSub_indicator_subset","isProp":true,"docString":"The weighted sum is unaffected by changing the weights to the\ncorresponding indicator function and adding points to the set. ","distance":1.995619627223706782359613498556427657604217529296875}],["The default priority `default = 1000`, which is used when no priority is set. ",{"type":"Lean.ParserDescr","name":"prioDefault","isProp":false,"docString":"The default priority `default = 1000`, which is used when no priority is set. ","distance":1.995936904872289030521415043040178716182708740234375}],["The command `sudo set_option name val` is similar to `set_option name val`,\nbut it also allows to set undeclared options.\n",{"type":"Lean.ParserDescr","name":"commandSudoSet_option___","isProp":false,"docString":"The command `sudo set_option name val` is similar to `set_option name val`,\nbut it also allows to set undeclared options.\n","distance":1.996027267262100668432367456261999905109405517578125}],["Returns the projection information of a structure. ",{"type":"List Simps.ProjectionData → String → Lean.Name → Lean.MessageData","name":"Simps.projectionsInfo","isProp":false,"docString":"Returns the projection information of a structure. ","distance":1.996351573294056880314428781275637447834014892578125}],["Right-shift the binary representation of a `Num`. ",{"type":"Num → ℕ → Num","name":"Num.shiftr","isProp":false,"docString":"Right-shift the binary representation of a `Num`. ","distance":1.9967327220843136270644890828407369554042816162109375}],["First samples a proxy value and interprets it. Especially useful if\nthe proxy and target type are the same. ",{"type":"(α : Type u) → [inst : SlimCheck.SampleableExt α] → SlimCheck.Gen α","name":"SlimCheck.SampleableExt.interpSample","isProp":false,"docString":"First samples a proxy value and interprets it. Especially useful if\nthe proxy and target type are the same. ","distance":1.9977024583794882328646735913935117423534393310546875}],["A \"proxy type\" equivalent to `Affine.Simplex.PointsWithCircumcenterIndex` that is constructed from `Unit`, `PLift`, `Sigma`, `Empty`, and `Sum`. See `Affine.Simplex.PointsWithCircumcenterIndex.proxyTypeEquiv` for the equivalence. (Generated by the `proxy_equiv%` elaborator.)",{"type":"ℕ → Type","name":"Affine.Simplex.PointsWithCircumcenterIndex.proxyType","isProp":false,"docString":"A \"proxy type\" equivalent to `Affine.Simplex.PointsWithCircumcenterIndex` that is constructed from `Unit`, `PLift`, `Sigma`, `Empty`, and `Sum`. See `Affine.Simplex.PointsWithCircumcenterIndex.proxyTypeEquiv` for the equivalence. (Generated by the `proxy_equiv%` elaborator.)","distance":1.997946118205248478005842116544954478740692138671875}],["A link that, when clicked, makes the specified edit\nand potentially moves the cursor\nor makes a selection. ",{"type":"ProofWidgets.Component ProofWidgets.MakeEditLinkProps","name":"ProofWidgets.MakeEditLink","isProp":false,"docString":"A link that, when clicked, makes the specified edit\nand potentially moves the cursor\nor makes a selection. ","distance":1.9981655796931916402314755032421089708805084228515625}],["Retrieve all names in the environment satisfying a predicate.\n",{"type":"(Lean.Name → Bool) → Lean.CoreM (Array Lean.Name)","name":"allNames","isProp":false,"docString":"Retrieve all names in the environment satisfying a predicate.\n","distance":1.9988119594148761049012819057679735124111175537109375}]]