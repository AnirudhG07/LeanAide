[["A (positive) natural number `n` is a sum of two squares if and only if the exponent of\nevery prime `q` such that `q % 4 = 3` in the prime factorization of `n` is even.\n(The assumption `0 < n` is not present, since for `n = 0`, both sides are satisfied;\nthe right hand side holds, since `padicValNat q 0 = 0` by definition.) ",{"type":"∀ {n : ℕ}, (∃ x y, n = x ^ 2 + y ^ 2) ↔ ∀ {q : ℕ}, Nat.Prime q → q % 4 = 3 → Even (padicValNat q n)","name":"Nat.eq_sq_add_sq_iff","isProp":true,"docString":"A (positive) natural number `n` is a sum of two squares if and only if the exponent of\nevery prime `q` such that `q % 4 = 3` in the prime factorization of `n` is even.\n(The assumption `0 < n` is not present, since for `n = 0`, both sides are satisfied;\nthe right hand side holds, since `padicValNat q 0 = 0` by definition.) ","distance":0.93252316226604603510708102476201020181179046630859375}],[" For every non-negative real number `q`, we have `q ≥ 0`.",{"type":"∀ {q : NNReal}, (0 ≤ ↑q) = True","name":"Mathlib.Data.Real.NNReal._auxLemma.29","isProp":true,"docString":" For every non-negative real number `q`, we have `q ≥ 0`.","distance":0.86406932341056563728898254339583218097686767578125}],["A positive natural number `n` can be expressed as the sum of two squares if and only if for every prime number `q` in its prime factorization, where `q` modulo 4 equals 3, the `q`-adic valuation of `n` (the highest power of `q` that divides `n`) is an even number. Note that the assumption `n > 0` is not required since for `n = 0`, both conditions are automatically satisfied; the right-hand side is true because by definition `padicValNat q 0 = 0`.",{"type":"∀ {n : ℕ}, (∃ x y, n = x ^ 2 + y ^ 2) ↔ ∀ {q : ℕ}, q.Prime → q % 4 = 3 → Even (padicValNat q n)","name":"Nat.eq_sq_add_sq_iff","isProp":true,"docString":"A positive natural number `n` can be expressed as the sum of two squares if and only if for every prime number `q` in its prime factorization, where `q` modulo 4 equals 3, the `q`-adic valuation of `n` (the highest power of `q` that divides `n`) is an even number. Note that the assumption `n > 0` is not required since for `n = 0`, both conditions are automatically satisfied; the right-hand side is true because by definition `padicValNat q 0 = 0`.","distance":0.88407651132947540073558911899453960359096527099609375}],["positive integers summing to `n`",{"type":"{n : ℕ} → n.Partition → Multiset ℕ","name":"Nat.Partition.parts","isProp":false,"docString":"positive integers summing to `n`","distance":0.95443873921503830093371334442053921520709991455078125}],[" For all non-negative rational numbers `q`, `Rat.toNNRat q = q`.",{"type":"∀ (q : ℚ), 0 ≤ q → ↑q.toNNRat = q","name":"Rat.coe_toNNRat","isProp":true,"docString":" For all non-negative rational numbers `q`, `Rat.toNNRat q = q`.","distance":0.92466138963448163412550684370216913521289825439453125}],["This theorem asserts that for any rational number `q`, if `q` is non-negative (i.e., `q` is greater than or equal to zero), then converting `q` to a non-negative rational number using the function `Rat.toNNRat` and then converting it back to a regular rational number yields the original value `q`. In mathematical terms, it states that for all `q` in the set of rational numbers, `ℚ`, such that `0 ≤ q`, the function `Rat.toNNRat` is effectively an identity operation.",{"type":"∀ (q : ℚ), 0 ≤ q → ↑q.toNNRat = q","name":"Rat.coe_toNNRat","isProp":true,"docString":"This theorem asserts that for any rational number `q`, if `q` is non-negative (i.e., `q` is greater than or equal to zero), then converting `q` to a non-negative rational number using the function `Rat.toNNRat` and then converting it back to a regular rational number yields the original value `q`. In mathematical terms, it states that for all `q` in the set of rational numbers, `ℚ`, such that `0 ≤ q`, the function `Rat.toNNRat` is effectively an identity operation.","distance":0.92498789175538032036882896136376075446605682373046875}],["The `L`-function of the trivial character mod `N`. ",{"type":"(N : ℕ) → [inst : NeZero N] → ℂ → ℂ","name":"DirichletCharacter.LFunctionTrivChar","isProp":false,"docString":"The `L`-function of the trivial character mod `N`. ","distance":0.96698294284287644728692612261511385440826416015625}],["There are exactly `⌊N/n⌋` positive multiples of `n` that are `≤ N`.\nSee `Nat.card_multiples` for a \"shifted-by-one\" version. ",{"type":"∀ (N n : ℕ), (Finset.filter (fun k => k ≠ 0 ∧ n ∣ k) (Finset.range N.succ)).card = N / n","name":"Nat.card_multiples'","isProp":true,"docString":"There are exactly `⌊N/n⌋` positive multiples of `n` that are `≤ N`.\nSee `Nat.card_multiples` for a \"shifted-by-one\" version. ","distance":0.9685384794221036930395030140061862766742706298828125}],["`q` is defined as the minimum factor of `mersenne p`, bundled as an `ℕ+`. ",{"type":"ℕ → ℕ+","name":"LucasLehmer.q","isProp":false,"docString":"`q` is defined as the minimum factor of `mersenne p`, bundled as an `ℕ+`. ","distance":0.96914249819040587663465657897177152335643768310546875}],["`qp = q - 1` ",{"type":"PNat.XgcdType → ℕ","name":"PNat.XgcdType.qp","isProp":false,"docString":"`qp = q - 1` ","distance":0.9725625527253305424579821192310191690921783447265625}],["**Hermite Theorem**. Let `N` be an integer. There are only finitely many number fields\n(in some fixed extension of `ℚ`) of discriminant bounded by `N`. ",{"type":"∀ (A : Type u_2) [inst : Field A] [inst_1 : CharZero A] (N : ℕ), {K | |NumberField.discr ↥↑K| ≤ ↑N}.Finite","name":"NumberField.finite_of_discr_bdd","isProp":true,"docString":"**Hermite Theorem**. Let `N` be an integer. There are only finitely many number fields\n(in some fixed extension of `ℚ`) of discriminant bounded by `N`. ","distance":0.9768591659292287232574381050653755664825439453125}],["If `n` is a squarefree natural number, then `-1` is a square modulo `n` if and only if\n`n` is not divisible by a prime `q` such that `q % 4 = 3`. ",{"type":"∀ {n : ℕ}, Squarefree n → (IsSquare (-1) ↔ ∀ {q : ℕ}, Nat.Prime q → q ∣ n → q % 4 ≠ 3)","name":"ZMod.isSquare_neg_one_iff","isProp":true,"docString":"If `n` is a squarefree natural number, then `-1` is a square modulo `n` if and only if\n`n` is not divisible by a prime `q` such that `q % 4 = 3`. ","distance":0.9786470459645115749225396939436905086040496826171875}],["The L function of the trivial Dirichlet character mod `N` is obtained from the Riemann\nzeta function by multiplying with `∏ p ∈ N.primeFactors, (1 - (p : ℂ) ^ (-s))`. ",{"type":"∀ {N : ℕ} [inst : NeZero N] {s : ℂ},\n  s ≠ 1 → DirichletCharacter.LFunctionTrivChar N s = (∏ p ∈ N.primeFactors, (1 - ↑p ^ (-s))) * riemannZeta s","name":"DirichletCharacter.LFunctionTrivChar_eq_mul_riemannZeta","isProp":true,"docString":"The L function of the trivial Dirichlet character mod `N` is obtained from the Riemann\nzeta function by multiplying with `∏ p ∈ N.primeFactors, (1 - (p : ℂ) ^ (-s))`. ","distance":0.99187110953351387276910600121482275426387786865234375}],["For `p ≠ 1`, the `p`-adic valuation of a natural `n ≠ 0` is the largest natural number `k` such\nthat `p^k` divides `n`. If `n = 0` or `p = 1`, then `padicValNat p q` defaults to `0`. ",{"type":"ℕ → ℕ → ℕ","name":"padicValNat","isProp":false,"docString":"For `p ≠ 1`, the `p`-adic valuation of a natural `n ≠ 0` is the largest natural number `k` such\nthat `p^k` divides `n`. If `n = 0` or `p = 1`, then `padicValNat p q` defaults to `0`. ","distance":0.992988707890550159618214820511639118194580078125}],["Reinterpret a rational number `q` as a non-negative rational number. Returns `0` if `q ≤ 0`. ",{"type":"ℚ → ℚ≥0","name":"Rat.toNNRat","isProp":false,"docString":"Reinterpret a rational number `q` as a non-negative rational number. Returns `0` if `q ≤ 0`. ","distance":0.99625156995255803593636301229707896709442138671875}],["If `n` is a squarefree natural number, then `-1` is a square modulo `n` if and only if\n`n` has no divisor `q` that is `≡ 3 mod 4`. ",{"type":"∀ {n : ℕ}, Squarefree n → (IsSquare (-1) ↔ ∀ {q : ℕ}, q ∣ n → q % 4 ≠ 3)","name":"ZMod.isSquare_neg_one_iff'","isProp":true,"docString":"If `n` is a squarefree natural number, then `-1` is a square modulo `n` if and only if\n`n` has no divisor `q` that is `≡ 3 mod 4`. ","distance":1.00491430472327980538693736889399588108062744140625}],["If the division equation `d.toNat * q.toNat + r.toNat = n.toNat` holds,\nthen `n.umod d = r`. ",{"type":"∀ {w : ℕ} {d n q r : BitVec w}, r < d → d.toNat * q.toNat + r.toNat = n.toNat → n % d = r","name":"BitVec.umod_eq_of_mul_add_toNat","isProp":true,"docString":"If the division equation `d.toNat * q.toNat + r.toNat = n.toNat` holds,\nthen `n.umod d = r`. ","distance":1.0053771877114783261930597291211597621440887451171875}],["The geometric sequence `q^n` is a solution of `E` iff\n`q` is a root of `E`'s characteristic polynomial. ",{"type":"∀ {α : Type u_1} [inst : CommRing α] (E : LinearRecurrence α) (q : α),\n  (E.IsSolution fun n => q ^ n) ↔ E.charPoly.IsRoot q","name":"LinearRecurrence.geom_sol_iff_root_charPoly","isProp":true,"docString":"The geometric sequence `q^n` is a solution of `E` iff\n`q` is a root of `E`'s characteristic polynomial. ","distance":1.0114501487224336617742892485694028437137603759765625}],["If the division equation `d.toNat * q.toNat + r.toNat = n.toNat` holds,\nthen `n.udiv d = q`. ",{"type":"∀ {w : ℕ} {d n q r : BitVec w}, 0 < d → r < d → d.toNat * q.toNat + r.toNat = n.toNat → n / d = q","name":"BitVec.udiv_eq_of_mul_add_toNat","isProp":true,"docString":"If the division equation `d.toNat * q.toNat + r.toNat = n.toNat` holds,\nthen `n.udiv d = q`. ","distance":1.0149016735264615451939107515499927103519439697265625}],["The set of pairs of coprime integers congruent to `a` mod `N`. ",{"type":"(N : ℕ) → (Fin 2 → ZMod N) → Set (Fin 2 → ℤ)","name":"EisensteinSeries.gammaSet","isProp":false,"docString":"The set of pairs of coprime integers congruent to `a` mod `N`. ","distance":1.016779263489487217242412953055463731288909912109375}],["`n` is a prime power if there is a prime `p` and a positive natural `k` such that `n` can be\nwritten as `p^k`. ",{"type":"{R : Type u_1} → [inst : CommMonoidWithZero R] → R → Prop","name":"IsPrimePow","isProp":false,"docString":"`n` is a prime power if there is a prime `p` and a positive natural `k` such that `n` can be\nwritten as `p^k`. ","distance":1.01847573344602704281669502961449325084686279296875}],["The L function of the trivial Dirichlet character mod `N` has a simple pole with\nresidue `∏ p ∈ N.primeFactors, (1 - p⁻¹)` at `s = 1`. ",{"type":"∀ {N : ℕ} [inst : NeZero N],\n  Filter.Tendsto (fun s => (s - 1) * DirichletCharacter.LFunctionTrivChar N s) (nhdsWithin 1 {1}ᶜ)\n    (nhds (∏ p ∈ N.primeFactors, (1 - (↑p)⁻¹)))","name":"DirichletCharacter.LFunctionTrivChar_residue_one","isProp":true,"docString":"The L function of the trivial Dirichlet character mod `N` has a simple pole with\nresidue `∏ p ∈ N.primeFactors, (1 - p⁻¹)` at `s = 1`. ","distance":1.0194635472104789375435984766227193176746368408203125}],["If `n` is a nonzero natural number and `p ≠ 1`, then there are natural numbers `e`\nand `n'` such that `n'` is not divisible by `p` and `n = p^e * n'`. ",{"type":"∀ {n : ℕ}, n ≠ 0 → ∀ (p : ℕ), p ≠ 1 → ∃ e n', ¬p ∣ n' ∧ n = p ^ e * n'","name":"Nat.exists_eq_pow_mul_and_not_dvd","isProp":true,"docString":"If `n` is a nonzero natural number and `p ≠ 1`, then there are natural numbers `e`\nand `n'` such that `n'` is not divisible by `p` and `n = p^e * n'`. ","distance":1.0231705435773557066880812271847389638423919677734375}],["**Legendre's Theorem**\n\nTaking (`p - 1`) times the `p`-adic valuation of `n!` equals `n` minus the sum of base `p` digits\nof `n`. ",{"type":"∀ {p : ℕ} [hp : Fact (Nat.Prime p)] (n : ℕ), (p - 1) * padicValNat p n.factorial = n - (p.digits n).sum","name":"sub_one_mul_padicValNat_factorial","isProp":true,"docString":"**Legendre's Theorem**\n\nTaking (`p - 1`) times the `p`-adic valuation of `n!` equals `n` minus the sum of base `p` digits\nof `n`. ","distance":1.0246157792232015726341387562570162117481231689453125}]]