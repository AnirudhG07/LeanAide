[["Shortcut instance to help typeclass inference out. ",{"type":"{V : Type u_1} →\n  {P : Type u_2} →\n    [inst : NormedAddCommGroup V] → [inst_1 : MetricSpace P] → [inst_2 : NormedAddTorsor V P] → AddTorsor V P","name":"NormedAddTorsor.toAddTorsor'","isProp":false,"docString":"Shortcut instance to help typeclass inference out. ","distance":1.9304417818396653050427858033799566328525543212890625}],[" The hyperbolic sine function is defined as `sinh(x) = (e^x - e^(-x))/2`.",{"type":"∀ (x : ℝ), x.sinh = (x.exp - (-x).exp) / 2","name":"Real.sinh_eq","isProp":true,"docString":" The hyperbolic sine function is defined as `sinh(x) = (e^x - e^(-x))/2`.","distance":1.944552416470541000848015755764208734035491943359375}],["This theorem defines the Riemann zeta function, `riemannZeta`, in terms of the completed Riemann zeta function `riemannCompletedZeta` and the complex Gamma function `Complex.Gamma`. Specifically, for any complex number `s` other than `0`, `riemannZeta(s)` is equal to `π^(s/2) * riemannCompletedZeta(s) / Γ(s/2)`, where `Γ` denotes the complex Gamma function. However, at `s = 0`, `riemannZeta` is specifically defined to be `-1/2`.",{"type":"riemannZeta = Function.update (fun s => ↑Real.pi ^ (s / 2) * riemannCompletedZeta s / (s / 2).Gamma) 0 (-1 / 2)","name":"riemannZeta_def","isProp":true,"docString":"This theorem defines the Riemann zeta function, `riemannZeta`, in terms of the completed Riemann zeta function `riemannCompletedZeta` and the complex Gamma function `Complex.Gamma`. Specifically, for any complex number `s` other than `0`, `riemannZeta(s)` is equal to `π^(s/2) * riemannCompletedZeta(s) / Γ(s/2)`, where `Γ` denotes the complex Gamma function. However, at `s = 0`, `riemannZeta` is specifically defined to be `-1/2`.","distance":1.9562200537325666882537689161836169660091400146484375}],["A choice-free shortcut instance.",{"type":"∀ (α : Type u) [inst : OrderedAddCommGroup α],\n  ContravariantClass α α (Function.swap fun x x_1 => x + x_1) fun x x_1 => x ≤ x_1","name":"OrderedAddCommGroup.to_contravariantClass_right_le","isProp":true,"docString":"A choice-free shortcut instance.","distance":1.9312879337138662005912692620768211781978607177734375}],[" For any field `K` and constant `c` in `K`, the denominator of the constant rational function `RatFunc.C c` is `1`.",{"type":"∀ {K : Type u} [inst : Field K] (c : K), (RatFunc.C c).denom = 1","name":"RatFunc.denom_C","isProp":true,"docString":" For any field `K` and constant `c` in `K`, the denominator of the constant rational function `RatFunc.C c` is `1`.","distance":1.94584590741837804017677626688964664936065673828125}],["The theorem `GaloisConnection.u_top` states that for any types `α` and `β` which have a partial order and a predefined maximum element (top), if two functions `l : α → β` and `u : β → α` form a Galois connection, then the maximum element of type `β` when mapped through the function `u` gives the maximum element (top) of type `α`. In other words, for a Galois connection, the function `u` sends the top element of `β` to the top element of `α`.",{"type":"∀ {α : Type u} {β : Type v} [inst : PartialOrder α] [inst_1 : Preorder β] [inst_2 : OrderTop α] [inst_3 : OrderTop β]\n  {l : α → β} {u : β → α}, GaloisConnection l u → u ⊤ = ⊤","name":"GaloisConnection.u_top","isProp":true,"docString":"The theorem `GaloisConnection.u_top` states that for any types `α` and `β` which have a partial order and a predefined maximum element (top), if two functions `l : α → β` and `u : β → α` form a Galois connection, then the maximum element of type `β` when mapped through the function `u` gives the maximum element (top) of type `α`. In other words, for a Galois connection, the function `u` sends the top element of `β` to the top element of `α`.","distance":1.9564153729409807791483899563900195062160491943359375}],["Construct a `Zero C` for a category with a zero object.\nThis can not be a global instance as it will trigger for every `Zero C` typeclass search.\n",{"type":"(C : Type u) → [inst : CategoryTheory.Category.{v, u} C] → [inst : CategoryTheory.Limits.HasZeroObject C] → Zero C","name":"CategoryTheory.Limits.HasZeroObject.zero'","isProp":false,"docString":"Construct a `Zero C` for a category with a zero object.\nThis can not be a global instance as it will trigger for every `Zero C` typeclass search.\n","distance":1.9333657245341535624305606688722036778926849365234375}],["A choice-free shortcut instance. ",{"type":"∀ (α : Type u) [inst : OrderedCommGroup α], ContravariantClass α α (fun x x_1 => x * x_1) fun x x_1 => x ≤ x_1","name":"OrderedCommGroup.to_contravariantClass_left_le","isProp":true,"docString":"A choice-free shortcut instance. ","distance":1.942087807540724408994492478086613118648529052734375}],["The value `BoxIntegral.IntegrationParams.GP = ⊥`\n(`bRiemann = false`, `bHenstock = true`, `bDistortion = true`)\ncorresponds to a generalization of the Henstock integral such that the Divergence theorem holds true\nwithout additional integrability assumptions, see the module docstring for details. ",{"type":"Inhabited BoxIntegral.IntegrationParams","name":"BoxIntegral.IntegrationParams.instInhabitedIntegrationParams","isProp":false,"docString":"The value `BoxIntegral.IntegrationParams.GP = ⊥`\n(`bRiemann = false`, `bHenstock = true`, `bDistortion = true`)\ncorresponds to a generalization of the Henstock integral such that the Divergence theorem holds true\nwithout additional integrability assumptions, see the module docstring for details. ","distance":1.9421488843031815552109264899627305567264556884765625}],["If `task : Task α` then `task.get : α` blocks the current thread until the\nvalue is available, and then returns the result of the task. ",{"type":"{α : Type u} → Task α → α","name":"Task.get","isProp":false,"docString":"If `task : Task α` then `task.get : α` blocks the current thread until the\nvalue is available, and then returns the result of the task. ","distance":1.942174738888201357411844583111815154552459716796875}],["Get the projections used by `simps` associated to a given structure `str`.\n\nThe returned information is also stored in the environment extension `Simps.structureExt`, which\nis given to `str`. If `str` already has this attribute, the information is read from this\nextension instead. See the documentation for this extension for the data this tactic returns.\n\nThe returned universe levels are the universe levels of the structure. For the projections there\nare three cases\n* If the declaration `{StructureName}.Simps.{projectionName}` has been declared, then the value\n  of this declaration is used (after checking that it is definitionally equal to the actual\n  projection. If you rename the projection name, the declaration should have the *new* projection\n  name.\n* You can also declare a custom projection that is a composite of multiple projections.\n* Otherwise, for every class with the `notation_class` attribute, and the structure has an\n  instance of that notation class, then the projection of that notation class is used for the\n  projection that is definitionally equal to it (if there is such a projection).\n  This means in practice that coercions to function types and sorts will be used instead of\n  a projection, if this coercion is definitionally equal to a projection. Furthermore, for\n  notation classes like `Mul` and `Zero` those projections are used instead of the\n  corresponding projection.\n  Projections for coercions and notation classes are not automatically generated if they are\n  composites of multiple projections (for example when you use `extend` without the\n  `oldStructureCmd` (does this exist?)).\n* Otherwise, the projection of the structure is chosen.\n  For example: ``getRawProjections env `Prod`` gives the default projections.\n```\n  ([u, v], [(`fst, `(Prod.fst.{u v}), [0], true, false),\n     (`snd, `(@Prod.snd.{u v}), [1], true, false)])\n```\n\nOptionally, this command accepts three optional arguments:\n* If `traceIfExists` the command will always generate a trace message when the structure already\n  has an entry in `structureExt`.\n* The `rules` argument specifies whether projections should be added, renamed, used as prefix, and\n  not used by default.\n* if `trc` is true, this tactic will trace information just as if\n  `set_option trace.simps.verbose true` was set.\n",{"type":"Lean.Syntax →\n  Lean.Name →\n    optParam Bool false →\n      optParam (Array Simps.ProjectionRule) #[] →\n        optParam Bool false → Lean.CoreM (List Lean.Name × Array Simps.ProjectionData)","name":"Simps.getRawProjections","isProp":false,"docString":"Get the projections used by `simps` associated to a given structure `str`.\n\nThe returned information is also stored in the environment extension `Simps.structureExt`, which\nis given to `str`. If `str` already has this attribute, the information is read from this\nextension instead. See the documentation for this extension for the data this tactic returns.\n\nThe returned universe levels are the universe levels of the structure. For the projections there\nare three cases\n* If the declaration `{StructureName}.Simps.{projectionName}` has been declared, then the value\n  of this declaration is used (after checking that it is definitionally equal to the actual\n  projection. If you rename the projection name, the declaration should have the *new* projection\n  name.\n* You can also declare a custom projection that is a composite of multiple projections.\n* Otherwise, for every class with the `notation_class` attribute, and the structure has an\n  instance of that notation class, then the projection of that notation class is used for the\n  projection that is definitionally equal to it (if there is such a projection).\n  This means in practice that coercions to function types and sorts will be used instead of\n  a projection, if this coercion is definitionally equal to a projection. Furthermore, for\n  notation classes like `Mul` and `Zero` those projections are used instead of the\n  corresponding projection.\n  Projections for coercions and notation classes are not automatically generated if they are\n  composites of multiple projections (for example when you use `extend` without the\n  `oldStructureCmd` (does this exist?)).\n* Otherwise, the projection of the structure is chosen.\n  For example: ``getRawProjections env `Prod`` gives the default projections.\n```\n  ([u, v], [(`fst, `(Prod.fst.{u v}), [0], true, false),\n     (`snd, `(@Prod.snd.{u v}), [1], true, false)])\n```\n\nOptionally, this command accepts three optional arguments:\n* If `traceIfExists` the command will always generate a trace message when the structure already\n  has an entry in `structureExt`.\n* The `rules` argument specifies whether projections should be added, renamed, used as prefix, and\n  not used by default.\n* if `trc` is true, this tactic will trace information just as if\n  `set_option trace.simps.verbose true` was set.\n","distance":1.9431616592089888673200448465649969875812530517578125}],["Provide a coercion to `Type u` for a concrete category. This is not marked as an instance\nas it could potentially apply to every type, and so is too expensive in typeclass search.\n\nYou can use it on particular examples as:\n```\ninstance : HasCoeToSort X := ConcreteCategory.hasCoeToSort X\n```\n",{"type":"(C : Type u) →\n  [inst : CategoryTheory.Category.{v, u} C] → [inst : CategoryTheory.ConcreteCategory C] → CoeSort C (Type w)","name":"CategoryTheory.ConcreteCategory.hasCoeToSort","isProp":false,"docString":"Provide a coercion to `Type u` for a concrete category. This is not marked as an instance\nas it could potentially apply to every type, and so is too expensive in typeclass search.\n\nYou can use it on particular examples as:\n```\ninstance : HasCoeToSort X := ConcreteCategory.hasCoeToSort X\n```\n","distance":1.94497645727042733909684102400206029415130615234375}],["Constant function as a `SimpleFunc`. ",{"type":"(α : Type u_5) → {β : Type u_6} → [inst : MeasurableSpace α] → β → MeasureTheory.SimpleFunc α β","name":"MeasureTheory.SimpleFunc.const","isProp":false,"docString":"Constant function as a `SimpleFunc`. ","distance":1.94554145075792472852072023670189082622528076171875}],["Construct a function from a default value `H0`, and a function to use if there exists a value\nsatisfying the predicate. ",{"type":"{α : Prop} → {p : α → Prop} → {C : Sort u_1} → C → ((a : α) → p a → C) → C","name":"Classical.existsCases","isProp":false,"docString":"Construct a function from a default value `H0`, and a function to use if there exists a value\nsatisfying the predicate. ","distance":1.9457159294312731390164117328822612762451171875}],["The constant presheaf on `X` with value `Z`. ",{"type":"{C : Type u_1} → [inst : CategoryTheory.Category.{u_2, u_1} C] → TopCat → C → AlgebraicGeometry.PresheafedSpace C","name":"AlgebraicGeometry.PresheafedSpace.const","isProp":false,"docString":"The constant presheaf on `X` with value `Z`. ","distance":1.9461808805612854644806475334917195141315460205078125}],["Cast a `SNum` to the corresponding integer. ",{"type":"SNum → ℤ","name":"Int.ofSnum","isProp":false,"docString":"Cast a `SNum` to the corresponding integer. ","distance":1.947153858256748915067646521492861211299896240234375}],["A shortcut instance to prevent timing out. Hopefully to be removed in the future. ",{"type":"(R : Type u) →\n  (S : Type v) →\n    [inst : CommRing R] →\n      [inst_1 : CommRing S] →\n        [inst_2 : Algebra R S] → Module (TensorProduct R S S) ↥(Ideal.cotangentIdeal (KaehlerDifferential.ideal R S))","name":"instSS","isProp":false,"docString":"A shortcut instance to prevent timing out. Hopefully to be removed in the future. ","distance":1.9473797280483633453940228719147853553295135498046875}],["Term elaborator that retrieves the current `SearchPath`.\n\nTypical usage is `searchPathRef.set compile_time_search_path%`.\n\nThis must not be used in files that are potentially compiled on another machine and then\nimported.\n(That is, if used in an imported file it will embed the search path from whichever machine\ncompiled the `.olean`.)\n",{"type":"Lean.ParserDescr","name":"«termCompile_time_search_path%»","isProp":false,"docString":"Term elaborator that retrieves the current `SearchPath`.\n\nTypical usage is `searchPathRef.set compile_time_search_path%`.\n\nThis must not be used in files that are potentially compiled on another machine and then\nimported.\n(That is, if used in an imported file it will embed the search path from whichever machine\ncompiled the `.olean`.)\n","distance":1.9474116639335499190366363109205849468708038330078125}],["If `k` is omitted from the set, its Schnirelmann density is upper bounded by `1 - k⁻¹`.\n",{"type":"∀ {A : Set ℕ} [inst : DecidablePred fun x => x ∈ A] {k : ℕ}, k ∉ A → schnirelmannDensity A ≤ 1 - (↑k)⁻¹","name":"schnirelmannDensity_le_of_not_mem","isProp":true,"docString":"If `k` is omitted from the set, its Schnirelmann density is upper bounded by `1 - k⁻¹`.\n","distance":1.9483726641663274836702157699619419872760772705078125}],["Generate a random natural number in the interval [lo, hi]. ",{"type":"{gen : Type u} → [inst : RandomGen gen] → gen → ℕ → ℕ → ℕ × gen","name":"randNat","isProp":false,"docString":"Generate a random natural number in the interval [lo, hi]. ","distance":1.948475280890991090387842632480897009372711181640625}],["Returns the \"sign\" of the integer as another integer: `1` for positive numbers,\n`-1` for negative numbers, and `0` for `0`.\n",{"type":"ℤ → ℤ","name":"Int.sign","isProp":false,"docString":"Returns the \"sign\" of the integer as another integer: `1` for positive numbers,\n`-1` for negative numbers, and `0` for `0`.\n","distance":1.948759548574448441371487206197343766689300537109375}],["Given a `G`-action on `H`, this is `k[H]` bundled with the natural representation\n`G →* End(k[H])` as a term of type `Rep k G`. ",{"type":"(k G : Type u) → [inst : CommRing k] → [inst_1 : Monoid G] → (H : Type u) → [inst_2 : MulAction G H] → Rep k G","name":"Rep.ofMulAction","isProp":false,"docString":"Given a `G`-action on `H`, this is `k[H]` bundled with the natural representation\n`G →* End(k[H])` as a term of type `Rep k G`. ","distance":1.9488340544997837522345207617036066949367523193359375}],["Returns the projection information of a structure. ",{"type":"List Simps.ProjectionData → String → Lean.Name → Lean.MessageData","name":"Simps.projectionsInfo","isProp":false,"docString":"Returns the projection information of a structure. ","distance":1.9493033823267589266237109768553636968135833740234375}],["Gadget for marking semi output parameters in type classes.\n\nSemi-output parameters influence the order in which arguments to type class\ninstances are processed.  Lean determines an order where all non-(semi-)output\nparameters to the instance argument have to be figured out before attempting to\nsynthesize an argument (that is, they do not contain assignable metavariables\ncreated during TC synthesis). This rules out instances such as `[Mul β] : Add\nα` (because `β` could be anything). Marking a parameter as semi-output is a\npromise that instances of the type class will always fill in a value for that\nparameter.\n\nFor example, the `Coe` class is defined as:\n```\nclass Coe (α : semiOutParam (Sort u)) (β : Sort v)\n```\nThis means that all `Coe` instances should provide a concrete value for `α`\n(i.e., not an assignable metavariable). An instance like `Coe Nat Int` or `Coe\nα (Option α)` is fine, but `Coe α Nat` is not since it does not provide a value\nfor `α`.\n",{"type":"Sort u → Sort u","name":"semiOutParam","isProp":false,"docString":"Gadget for marking semi output parameters in type classes.\n\nSemi-output parameters influence the order in which arguments to type class\ninstances are processed.  Lean determines an order where all non-(semi-)output\nparameters to the instance argument have to be figured out before attempting to\nsynthesize an argument (that is, they do not contain assignable metavariables\ncreated during TC synthesis). This rules out instances such as `[Mul β] : Add\nα` (because `β` could be anything). Marking a parameter as semi-output is a\npromise that instances of the type class will always fill in a value for that\nparameter.\n\nFor example, the `Coe` class is defined as:\n```\nclass Coe (α : semiOutParam (Sort u)) (β : Sort v)\n```\nThis means that all `Coe` instances should provide a concrete value for `α`\n(i.e., not an assignable metavariable). An instance like `Coe Nat Int` or `Coe\nα (Option α)` is fine, but `Coe α Nat` is not since it does not provide a value\nfor `α`.\n","distance":1.9494095824609620759559902580804191529750823974609375}]]