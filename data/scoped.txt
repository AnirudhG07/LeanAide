scoped syntax:1075 term noWs atomic("[" term "⁻¹" noWs "]") : term
scoped syntax (name := bigsum) "∑ " extBinder ", " term:67 : term
scoped syntax (name := bigprod) "∏ " extBinder ", " term:67 : term
scoped syntax (name := bigsumin) "∑ " extBinder " in " term ", " term:67 : term
scoped syntax (name := bigprodin) "∏ " extBinder " in " term ", " term:67 : term
scoped[Witt] notation "W_" => wittPolynomial p
scoped[Witt] notation "W" => wittPolynomial p _
scoped[Isocrystal] notation "K(" p ", " k ")" => FractionRing (WittVector p k)
scoped[Isocrystal] notation "φ(" p ", " k ")" => WittVector.FractionRing.frobeniusRingHom p k
scoped[Isocrystal] notation "Φ(" p ", " k ")" => WittVector.Isocrystal.frobenius p k
scoped[Isocrystal] notation:50 M " →ᶠⁱ[" p ", " k "] " M₂ => WittVector.IsocrystalHom p k M M₂
scoped[Isocrystal] notation:50 M " ≃ᶠⁱ[" p ", " k "] " M₂ => WittVector.IsocrystalEquiv p k M M₂
scoped[Witt] notation "W_" => wittPolynomial p
scoped[Witt] notation "W" => wittPolynomial p _
scoped[nonZeroDivisors] notation:9000 R "⁰" => nonZeroDivisors R
scoped[nonZeroSMulDivisors] notation:9000 R "⁰[" M "]" => nonZeroSMulDivisors R M
scoped[DiscreteValuation] notation "ℕₘ₀" => WithZero (Multiplicative ℕ)
scoped[DiscreteValuation] notation "ℤₘ₀" => WithZero (Multiplicative ℤ)
scoped notation "d⁄dX" => derivative
scoped notation:9000 R "⟦X⟧" => PowerSeries R
scoped[FinsetFamily] notation "𝓒 " => UV.compression
scoped[FinsetFamily] notation "𝓓 " => Down.compression
scoped[PolynomialPolynomial] notation "Y" => Polynomial.X
scoped[PolynomialPolynomial] notation R "[X][Y]" => Polynomial (Polynomial R)
scoped[WeierstrassCurve] notation W "⟮" S "⟯" => Point (baseChange W S)
scoped[Simplicial] notation "[" n "]" => SimplexCategory.mk n
scoped[Simplicial] notation "Δ[" n "]" => SSet.standardSimplex.obj (SimplexCategory.mk n)
scoped[Simplicial] notation "∂Δ[" n "]" => SSet.boundary n
scoped[Simplicial] notation "Λ[" n ", " i "]" => SSet.horn (n : ℕ) i
scoped notation "π" => FundamentalGroupoid.fundamentalGroupoidFunctor
scoped notation "πₓ" => FundamentalGroupoid.fundamentalGroupoidFunctor.obj
scoped notation "πₘ" => FundamentalGroupoid.fundamentalGroupoidFunctor.map
scoped[DoldKan] notation "K[" X "]" => AlgebraicTopology.AlternatingFaceMapComplex.obj X
scoped[DoldKan] notation "N[" X "]" => AlgebraicTopology.NormalizedMooreComplex.obj X
scoped[Uniformity] notation "𝓢" => separationRel
scoped[Uniformity] notation "𝓤[" u "]" => @uniformity _ u
scoped[Uniformity] notation "𝓤" => uniformity
scoped[Uniformity] notation "UniformContinuous[" u₁ ", " u₂ "]" => @UniformContinuous _ _ u₁ u₂
scoped[UniformConvergence] notation:25 α " →ᵤ " β:0 => UniformFun α β
scoped[UniformConvergence] notation:25 α " →ᵤ[" 𝔖 "] " β:0 => UniformOnFun α β 𝔖
scoped[ZeroAtInfty] notation (priority := 2000) "C₀(" α ", " β ")" => ZeroAtInftyContinuousMap α β
scoped[ZeroAtInfty] notation α " →C₀ " β => ZeroAtInftyContinuousMap α β
scoped[unitInterval] notation "I" => unitInterval
scoped notation "σ" => unitInterval.symm
scoped notation "∞" => OnePoint.infty
scoped[AlgebraicGeometry] notation:80 x " |_ₗ " U " ⟪" e "⟫ " =>
scoped[Topology] notation "I^" N => N → I
scoped[Topology.Homotopy] notation "Ω" => LoopSpace
scoped[Topology.Homotopy] notation "Ω^" => GenLoop
scoped[Topology] notation "π_" => HomotopyGroup.Pi
scoped[HSpaces] notation x "⋀" y => HSpace.hmul (x, y)
scoped[Topology] notation (name := IsOpen_of) "IsOpen[" t "]" => @IsOpen _ t
scoped[Topology] notation (name := IsClosed_of) "IsClosed[" t "]" => @IsClosed _ t
scoped[Topology] notation (name := closure_of) "closure[" t "]" => @closure _ t
scoped[Topology] notation "𝓝" => nhds
scoped[Topology] notation "𝓝[" s "] " x:100 => nhdsWithin x s
scoped[Topology] notation "𝓝[≠] " x:100 => nhdsWithin x (@singleton _ (Set _) instSingletonSet x)ᶜ
scoped[Topology] notation "𝓝[≥] " x:100 => nhdsWithin x (Set.Ici x)
scoped[Topology] notation "𝓝[≤] " x:100 => nhdsWithin x (Set.Iic x)
scoped[Topology] notation "𝓝[>] " x:100 => nhdsWithin x (Set.Ioi x)
scoped[Topology] notation "𝓝[<] " x:100 => nhdsWithin x (Set.Iio x)
scoped[Topology] notation (name := Continuous_of) "Continuous[" t₁ ", " t₂ "]" =>
scoped[FirstOrder] notation:25 A " →[" L "] " B => FirstOrder.Language.Hom L A B
scoped[FirstOrder] notation:25 A " ↪[" L "] " B => FirstOrder.Language.Embedding L A B
scoped[FirstOrder] notation:25 A " ≃[" L "] " B => FirstOrder.Language.Equiv L A B
scoped[FirstOrder] notation:95 L "[[" α "]]" => Language.withConstants L α
scoped[FirstOrder] notation:25 A " ↪ₑ[" L "] " B => FirstOrder.Language.ElementaryEmbedding L A B
scoped[ComplexConjugate] notation "conj" => starRingEnd _
scoped[BigOperators] notation3"∑ᶠ "(...)", "r:67:(scoped f => finsum f) => r
scoped[BigOperators] notation3"∏ᶠ "(...)", "r:67:(scoped f => finprod f) => r
scoped[AddMonoidAlgebra] notation:9000 R:max "[" A "]" => AddMonoidAlgebra R A
scoped[DualNumber] notation "ε" => DualNumber.eps
scoped[Quaternion] notation "ℍ[" R "," a "," b "]" => QuaternionAlgebra R a b
scoped[Quaternion] notation "ℍ[" R "]" => Quaternion R
scoped[DirectSum] notation3 "⨁ "(...)", "r:(scoped f => DirectSum _ f) => r
scoped[ModuleCat] notation "↟" f:1024 => ModuleCat.asHom f
scoped[ModuleCat] notation "↾" f:1024 => ModuleCat.asHomRight f
scoped[ModuleCat] notation "↿" f:1024 => ModuleCat.asHomLeft f
scoped notation "ω_" o => ord <| aleph o
scoped notation "ω₁" => ord <| aleph 1
scoped notation "ℵ₀" => Cardinal.aleph0
scoped notation "𝔠" => Cardinal.continuum
scoped notation "ω" => Ordinal.omega
scoped[TensorProduct] notation3:100"⨂["R"] "(...)", "r:(scoped f => PiTensorProduct R f) => r
scoped[Affine] notation "AffineSpace" => AddTorsor
scoped[TensorProduct] notation:100 "⨂[" R "]^" n:arg => TensorPower R n
scoped[LinearAlgebra.Projectivization] notation "ℙ" => Projectivization
scoped[TensorProduct] notation:100 M " ⊗[" R "] " N:100 => TensorProduct R M N
scoped[MatrixGroups] notation "SL(" n ", " R ")" => Matrix.SpecialLinearGroup (Fin n) R
scoped notation "↾" f:200 => CategoryTheory.asHom f
scoped [CategoryTheory] notation "𝟭" => Functor.id -- Type this as `\sb1`
scoped notation "𝟙_ " C:max => (MonoidalCategoryStruct.tensorUnit : C)
scoped notation "α_" => MonoidalCategoryStruct.associator
scoped notation "λ_" => MonoidalCategoryStruct.leftUnitor
scoped notation "ρ_" => MonoidalCategoryStruct.rightUnitor
scoped notation "𝟙" => CategoryStruct.id  -- type as \b1
scoped notation "α_" => Bicategory.associator
scoped notation "λ_" => Bicategory.leftUnitor
scoped notation "ρ_" => Bicategory.rightUnitor
scoped notation μ "[" s "|" t "]" => ProbabilityTheory.cond μ t s
scoped notation:60 μ "[|" t "]" => ProbabilityTheory.cond μ t
scoped[ProbabilityTheory] notation "𝔼[" X "|" m "]" =>
scoped[ProbabilityTheory] notation P "[" X "]" => ∫ x, ↑(X x) ∂P
scoped[ProbabilityTheory] notation "𝔼[" X "]" => ∫ a, (X : _ → _) a
scoped[ProbabilityTheory] notation P "⟦" s "|" m "⟧" =>
scoped[ProbabilityTheory] notation:50 X " =ₐₛ " Y:50 => X =ᵐ[MeasureTheory.MeasureSpace.volume] Y
scoped[ProbabilityTheory] notation:50 X " ≤ₐₛ " Y:50 => X ≤ᵐ[MeasureTheory.MeasureSpace.volume] Y
scoped[ProbabilityTheory] notation "∂" P "/∂" Q:100 => MeasureTheory.Measure.rnDeriv P Q
scoped[ProbabilityTheory] notation "ℙ" => MeasureTheory.MeasureSpace.volume
scoped notation "eVar[" X "]" => ProbabilityTheory.evariance X MeasureTheory.MeasureSpace.volume
scoped notation "Var[" X "]" => ProbabilityTheory.variance X MeasureTheory.MeasureSpace.volume
scoped[LaurentPolynomial] notation:9000 R "[T;T⁻¹]" => LaurentPolynomial R
scoped[Polynomial] notation:9000 R "[X]" => Polynomial R
scoped notation a "::" b => bit a b
scoped notation a "::" b => bit a b
scoped[ComplexStarModule] notation "ℜ" => realPart
scoped[ComplexStarModule] notation "ℑ" => imaginaryPart
scoped notation "cexp" => Complex.exp
scoped notation "rexp" => Real.exp
scoped notation:10000 n "‼" => Nat.doubleFactorial n
scoped notation:10000 n "!" => Nat.factorial n
scoped notation "sf" n:60 => Nat.superFactorial n
scoped notation "φ" => Nat.totient
scoped[NNRat] notation "ℚ≥0" => NNRat
scoped notation a " :: " b => cons' a b
scoped[ENNReal] notation "ℝ≥0∞" => ENNReal
scoped[ENNReal] notation "∞" => (⊤ : ENNReal)
scoped notation "ℝ≥0" => NNReal
scoped[Interval] notation "[[" a ", " b "]]" => Set.uIcc a b
scoped notation a " :: " b => cons a b
scoped notation:max "π" F':max E':max => Bundle.TotalSpace.proj (F := F') (E := E')
scoped notation as " {" m " ↦ " a "}" => List.Func.set a as m
scoped notation μ "[" f "|" m "]" => MeasureTheory.condexp m μ f
scoped notation:25 α' " →₁[" μ "] " E => MeasureTheory.Lp (α := α') E 1 μ
scoped notation:25 α' " →₂[" μ "] " E => MeasureTheory.Lp (α := α') E 2 μ
scoped notation "StronglyMeasurable[" m "]" => @MeasureTheory.StronglyMeasurable _ _ _ m
scoped notation "MeasurableSet[" m "]" => @MeasurableSet _ m
scoped notation "Measurable[" m "]" => @Measurable _ _ m _
scoped[MeasureTheory] notation "μH[" d "]" => MeasureTheory.Measure.hausdorffMeasure d
scoped notation "𝓟" => Filter.principal
scoped[FinsetInterval] notation "[[" a ", " b "]]" => Finset.uIcc a b
scoped[UnitDisc] notation "𝔻" => Complex.UnitDisc
scoped[UpperHalfPlane] notation "ℍ" => UpperHalfPlane
scoped[RealInnerProductSpace] notation "⟪" x ", " y "⟫" => @inner ℝ _ _ x y
scoped[ComplexInnerProductSpace] notation "⟪" x ", " y "⟫" => @inner ℂ _ _ x y
scoped notation:25 ι " →ᵇᵃ " M => BoxIntegral.BoxAdditiveMap ι M ⊤
scoped notation:25 ι " →ᵇᵃ[" I "] " M => BoxIntegral.BoxAdditiveMap ι M I
scoped[SchwartzSpace] notation "𝓢(" E ", " F ")" => SchwartzMap E F
scoped[FourierTransform] notation e "[" x "]" => (e (Multiplicative.ofAdd x) : ℂ)
scoped[FourierTransform] notation "𝓕" => Real.fourierIntegral
scoped[Convolution] notation:67 f " ⋆[" L:67 ", " μ:67 "] " g:66 => convolution f g L μ
scoped[Gradient] notation "∇" => gradient
scoped[MultiplierAlgebra] notation "𝓜(" 𝕜 ", " A ")" => DoubleCentralizer 𝕜 A
scoped[lp] notation "ℓ^∞(" ι ", " E ")" => lp (fun i : ι => E) ∞
scoped[lp] notation "ℓ^∞(" ι ")" => lp (fun i : ι => ℝ) ∞
scoped notation "π" => Real.pi
scoped[Quaternion] notation "ℍ" => Quaternion ℝ
scoped[Convex] notation (priority := high) "[" x "-[" 𝕜 "]" y "]" => segment 𝕜 x y
scoped notation:50 u " ~[" l:50 "] " v:50 => Asymptotics.IsEquivalent l u v
scoped[omegaLimit] notation "ω" => omegaLimit
scoped[omegaLimit] notation "ω⁺" => omegaLimit Filter.atTop
scoped[omegaLimit] notation "ω⁻" => omegaLimit Filter.atBot
scoped notation "∡" => EuclideanGeometry.oangle
scoped notation "∠" => EuclideanGeometry.angle
scoped[Manifold] notation M " ≃ₘ^" n:1000 "⟮" I ", " J "⟯ " N => Diffeomorph I J M N n
scoped[Manifold] notation M " ≃ₘ⟮" I ", " J "⟯ " N => Diffeomorph I J M N ⊤
scoped[LieGroup] notation "𝑳" => smoothLeftMul
scoped[LieGroup] notation "𝑹" => smoothRightMul
scoped[Manifold] notation "Cₛ^" n "⟮" I "; " F ", " V "⟯" => ContMDiffSection I F n V
scoped[Derivation] notation "C^" n "⟮" I ", " M "; " 𝕜 "⟯⟨" x "⟩" => PointedSmoothMap 𝕜 I M n x
scoped[Manifold] notation "𝒅" => fdifferential
scoped[Manifold] notation "𝒅ₕ" => hfdifferential
scoped[Manifold] notation "C^" n "⟮" I ", " M "; " I' ", " M' "⟯" => ContMDiffMap I I' M M' n
scoped[Manifold] notation "∞" => (⊤ : ℕ∞)
scoped[Manifold] notation "𝓘(" 𝕜 ", " E ")" => modelWithCornersSelf 𝕜 E
scoped[Manifold] notation "𝓘(" 𝕜 ")" => modelWithCornersSelf 𝕜 𝕜
scoped[NumberTheorySymbols] notation "J(" a " | " b ")" => jacobiSym a b
scoped[Nat.ArithmeticFunction] notation "Λ" => Nat.ArithmeticFunction.vonMangoldt
scoped[Modular] notation "𝒟" => ModularGroup.fd
scoped[Modular] notation "𝒟ᵒ" => ModularGroup.fdo
scoped[ModularForm] notation:100 f " ∣[" k ";" γ "] " a:100 => SlashAction.map γ k a f
scoped[ModularForm] notation:100 f " ∣[" k "] " a:100 => SlashAction.map ℂ k a f
scoped[Nat.ArithmeticFunction] notation "ζ" => Nat.ArithmeticFunction.zeta
scoped[Nat.ArithmeticFunction] notation "σ" => Nat.ArithmeticFunction.sigma
scoped[Nat.ArithmeticFunction] notation "Ω" => Nat.ArithmeticFunction.cardFactors
scoped[Nat.ArithmeticFunction] notation "ω" => Nat.ArithmeticFunction.cardDistinctFactors
scoped[Nat.ArithmeticFunction] notation "μ" => Nat.ArithmeticFunction.moebius
scoped notation:35 x " D∧ " y => Dioph.inter x y
scoped notation:35 x " D∨ " y => Dioph.union x y
scoped notation:30 "D∃" => Dioph.vec_ex1_dioph
scoped notation " D≡ " => Dioph.modEq_dioph
scoped notation "π" => Nat.primeCounting
scoped notation "π'" => Nat.primeCounting'
scoped notation "𝓞" => NumberField.ringOfIntegers
