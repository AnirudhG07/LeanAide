{"text":"If every proper closed subset of a topological space is compact, then the space itself is compact.","fullPrompt":[{"role":"system","content":"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code."},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: In a Noetherian space, all sets are compact. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace.NoetherianSpace α] (s : Set α), IsCompact s"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: In a `T2Space`, every compact set is closed. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : T2Space X] {s : Set X}, IsCompact s → IsClosed s"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  In a Noetherian topological space, every set is compact.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace.NoetherianSpace α] (s : Set α), IsCompact s"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  If `X` is a compact topological space and `s` is a closed subset of `X`, then `s` is compact.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X : Type u} [inst : TopologicalSpace X] {s : Set X} [inst_1 : CompactSpace X], IsClosed s → IsCompact s"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for any topological space `X` with an R1 space structure (every pair of distinct points in `X` has disjoint neighborhoods), if `K` is a compact set and `s` is a subset of `K`, then the closure of `s` is also compact. In other words, the closure of any subset of a compact set in such a space is itself compact. It underscores a fundamental property of compact sets in topological spaces: compactness is preserved under closure operations.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : R1Space X] {s K : Set X},\n  IsCompact K → s ⊆ K → IsCompact (closure s)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that a closed subset of a compact set is also a compact set. More specifically, given any type `X` with a topological space structure, and any two sets `s` and `t` of type `X`, if `s` is compact, `t` is closed, and `t` is a subset of `s`, then `t` is also compact. In mathematical terms, it encapsulates the property that compactness is hereditary with respect to taking closed subsets within topological spaces.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X : Type u} [inst : TopologicalSpace X] {s t : Set X}, IsCompact s → IsClosed t → t ⊆ s → IsCompact t"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for any type 'X' equipped with a topological structure, the universal set of 'X' is compact if and only if 'X' itself is a compact space. In terms of mathematics, a space 'X' is compact if for any collection of open covers, there is a finite subcover. Thus, the theorem is saying that this property for the entire space 'X' is equivalent to the same property for the universal set, which includes all elements of 'X'.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X : Type u} [inst : TopologicalSpace X], IsCompact Set.univ ↔ CompactSpace X"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The theorem states that in a given topological space, if we have a compact set and a closed set, the intersection of the two sets is also a compact set. Here, a compact set is defined such that for every nontrivial filter that contains the set, there exists an element in the set such that every set of the filter meets every neighborhood of that element. A set is closed if it contains all its limit points.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X : Type u} [inst : TopologicalSpace X] {s t : Set X}, IsCompact t → IsClosed s → IsCompact (s ∩ t)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  In a Noetherian topological space, every set is compact.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace.NoetherianSpace α] (s : Set α), IsCompact s"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  If a closed subset of a compact topological space is compact.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X : Type u} [inst : TopologicalSpace X] {s t : Set X}, IsCompact s → IsClosed t → t ⊆ s → IsCompact t"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  In a topological space, any non-empty compact subset is compact.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} [inst : TopologicalSpace α] (s : TopologicalSpace.NonemptyCompacts α), IsCompact ↑s"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  Every positive compact subset of a topological space is compact.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} [inst : TopologicalSpace α] (s : TopologicalSpace.PositiveCompacts α), IsCompact ↑s"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A closed subset of a compact set is a compact set. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X : Type u} [inst : TopologicalSpace X] {s t : Set X}, IsCompact s → IsClosed t → t ⊆ s → IsCompact t"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: If a topological space admits an atlas with locally compact charts, then the space itself\nis locally compact. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (H : Type u) (M : Type u_2) [inst : TopologicalSpace H] [inst_1 : TopologicalSpace M] [inst_2 : ChartedSpace H M]\n  [inst : LocallyCompactSpace H], LocallyCompactSpace M"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: In a weakly locally compact space,\nevery compact set is contained in the interior of a compact set. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : WeaklyLocallyCompactSpace X] {K : Set X},\n  IsCompact K → ∃ K', IsCompact K' ∧ K ⊆ interior K'"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: In a Noetherian space, all sets are compact. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace.NoetherianSpace α] (s : Set α), IsCompact s"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: For any topological space `X`, its one point compactification is a compact space. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X : Type u_1} [inst : TopologicalSpace X], CompactSpace (OnePoint X)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: In a compact space, the type of closed subsets is compact. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u} [inst : EMetricSpace α] [inst_1 : CompactSpace α], CompactSpace (TopologicalSpace.Closeds α)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The underlying topological space is compact.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (self : CompHaus), CompactSpace ↑self.toTop"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Finite topological spaces are compact. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X : Type u} [inst : TopologicalSpace X] [inst_1 : Finite X], CompactSpace X"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: If every proper closed subset of a topological space is compact, then the space itself is compact.\n\nGive ONLY the Lean code"}]}
{"text":"Every prime that is `1` greater than a multiple of `4` can be expressed as the sum of two squares.","fullPrompt":[{"role":"system","content":"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code."},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  A natural number `n` can be expressed as the sum of two squares if and only if the highest power of every prime `q` in its prime factorization, where `q` is congruent to 3 modulo 4, in its prime factorization has even power.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {n : ℕ}, (∃ x y, n = x ^ 2 + y ^ 2) ↔ ∀ {q : ℕ}, Nat.Prime q → q % 4 = 3 → Even (padicValNat q n)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  For every prime number p not congruent to 3 modulo 4, there exist integers a and b such that a^2 + b^2 = p.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {p : ℕ} [inst : Fact (Nat.Prime p)], p % 4 ≠ 3 → ∃ a b, a ^ 2 + b ^ 2 = p"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: **Fermat's theorem on the sum of two squares**. Every prime not congruent to 3 mod 4 is the sum\nof two squares. Also known as **Fermat's Christmas theorem**. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {p : ℕ} [inst : Fact (Nat.Prime p)], p % 4 ≠ 3 → ∃ a b, a ^ 2 + b ^ 2 = p"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  Every prime number can be expressed as the sum of the squares of four natural numbers.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {p : ℕ}, Nat.Prime p → ∃ a b c d, a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 = p"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: **Four squares theorem** \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (n : ℕ), ∃ a b c d, a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 = n"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  Every natural number can be expressed as the sum of four squares of natural numbers.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (n : ℕ), ∃ a b c d, a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 = n"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Lagrange's **four squares theorem** for a prime number. Use `Nat.sum_four_squares` instead. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {p : ℕ}, Nat.Prime p → ∃ a b c d, a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 = p"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A positive natural number `n` can be expressed as the sum of two squares if and only if for every prime number `q` in its prime factorization, where `q` modulo 4 equals 3, the `q`-adic valuation of `n` (the highest power of `q` that divides `n`) is an even number. Note that the assumption `n > 0` is not required since for `n = 0`, both conditions are automatically satisfied; the right-hand side is true because by definition `padicValNat q 0 = 0`.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {n : ℕ}, (∃ x y, n = x ^ 2 + y ^ 2) ↔ ∀ {q : ℕ}, q.Prime → q % 4 = 3 → Even (padicValNat q n)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for any natural numbers `p` and `n`, if `p` is a prime number and `p` divides `n` such that `-1` is a square modulo `n`, then the remainder of `p` when divided by `4` cannot be `3`. In other words, any prime `p` that divides a number `n` where `-1` is a perfect square in the modulo `n` arithmetic must be of the form `4k + 1` or `4k + 2` for some natural number `k`, but can't be of the form `4k + 3`.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {p n : ℕ}, p.Prime → p ∣ n → IsSquare (-1) → p % 4 ≠ 3"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The theorem `Nat.Prime.sum_four_squares` is known as Lagrange's Four Squares theorem for a prime number. It asserts that for any prime number `p`, there exist four natural numbers `a`, `b`, `c`, and `d` such that the sum of their squares equals `p` i.e., `a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 = p`. In other words, every prime number can be expressed as the sum of four square numbers. The function `Nat.sum_four_squares` should be used for practical computations.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {p : ℕ}, p.Prime → ∃ a b c d, a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 = p"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The \"Four Squares Theorem\" states that for any natural number `n`, there exist four natural numbers `a`, `b`, `c`, and `d`, such that the sum of their squares equals `n`. In other words, any natural number can be expressed as the sum of four perfect squares.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (n : ℕ), ∃ a b c d, a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 = n"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  For any composite natural number `n` greater than 1, the square of its smallest prime factor is less than or equal to `n`.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {n : ℕ}, 0 < n → ¬n.Prime → n.minFac ^ 2 ≤ n"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  A natural number `n` can be expressed as the sum of two squares if and only if the highest power of every prime `q` in its prime factorization, where `q` is congruent to 3 modulo 4, in its prime factorization has even power.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {n : ℕ}, (∃ x y, n = x ^ 2 + y ^ 2) ↔ ∀ {q : ℕ}, q.Prime → q % 4 = 3 → Even (padicValNat q n)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  Every natural number can be expressed as the sum of four squares of natural numbers.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (n : ℕ), ∃ a b c d, a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 = n"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  Every prime number can be expressed as the sum of the squares of four natural numbers.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {p : ℕ}, p.Prime → ∃ a b c d, a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 = p"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The special case of Graham's conjecture where all numbers are squarefree. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {n : ℕ} (f : ℕ → ℕ), (∀ k < n, Squarefree (f k)) → Nat.GrahamConjecture n f"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: **Euler's four-square identity**, a version for natural numbers. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (a b c d x y z w : ℕ),\n  Int.natAbs (↑a * ↑x - ↑b * ↑y - ↑c * ↑z - ↑d * ↑w) ^ 2 + Int.natAbs (↑a * ↑y + ↑b * ↑x + ↑c * ↑w - ↑d * ↑z) ^ 2 +\n        Int.natAbs (↑a * ↑z - ↑b * ↑w + ↑c * ↑x + ↑d * ↑y) ^ 2 +\n      Int.natAbs (↑a * ↑w + ↑b * ↑z - ↑c * ↑y + ↑d * ↑x) ^ 2 =\n    (a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2) * (x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The Law of Quadratic Reciprocity: if `p` and `q` are odd primes and `p % 4 = 1`,\nthen `(q / p) = (p / q)`. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {p q : ℕ} [inst : Fact (Nat.Prime p)] [inst_1 : Fact (Nat.Prime q)],\n  p % 4 = 1 → q ≠ 2 → legendreSym q ↑p = legendreSym p ↑q"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A prime natural number is prime in `ℤ[i]` if and only if it is `3` mod `4` \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (p : ℕ) [inst : Fact (Nat.Prime p)], Prime ↑p ↔ p % 4 = 3"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: **Four squares theorem** \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (n : ℕ), ∃ a b c d, a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 = n"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: **Fermat's theorem on the sum of two squares**. Every prime not congruent to 3 mod 4 is the sum\nof two squares. Also known as **Fermat's Christmas theorem**. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {p : ℕ} [inst : Fact (Nat.Prime p)], p % 4 ≠ 3 → ∃ a b, a ^ 2 + b ^ 2 = p"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: If `-1` is a square modulo the natural number `n`, then `n` is a sum of two squares. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {n : ℕ}, IsSquare (-1) → ∃ x y, n = x ^ 2 + y ^ 2"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The set of natural numbers that are sums of two squares is closed under multiplication. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {a b x y u v : ℕ}, a = x ^ 2 + y ^ 2 → b = u ^ 2 + v ^ 2 → ∃ r s, a * b = r ^ 2 + s ^ 2"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Every prime that is `1` greater than a multiple of `4` can be expressed as the sum of two squares.\n\nGive ONLY the Lean code"}]}
{"text":"The product of two numbers, each of which is the sum of four squares, is itself a sum of four squares.","fullPrompt":[{"role":"system","content":"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code."},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  For any commutative ring `R` and elements `x₁, x₂, x₃, x₄, y₁, y₂, y₃, y₄` in `R`, the quadratic forms `∑xi²` and `∑ji²` are equal if and only if there exist unique i, j in {1, 2, 3, 4} such that `x₁x₂ + x₃x₄ = yi² + yj²` and `x₁x₃ + x₂x₄ = yi yj`.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u_1} [inst : CommRing R] {x₁ x₂ x₃ x₄ y₁ y₂ y₃ y₄ : R},\n  (x₁ ^ 2 + x₂ ^ 2 + x₃ ^ 2 + x₄ ^ 2) * (y₁ ^ 2 + y₂ ^ 2 + y₃ ^ 2 + y₄ ^ 2) =\n    (x₁ * y₁ - x₂ * y₂ - x₃ * y₃ - x₄ * y₄) ^ 2 + (x₁ * y₂ + x₂ * y₁ + x₃ * y₄ - x₄ * y₃) ^ 2 +\n        (x₁ * y₃ - x₂ * y₄ + x₃ * y₁ + x₄ * y₂) ^ 2 +\n      (x₁ * y₄ + x₂ * y₃ - x₃ * y₂ + x₄ * y₁) ^ 2"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  For any natural numbers a, b, c, d, x, y, z, w, the sum of the squares of the four expressions axBx - bயcZd - cwd - dw, aYx + bXa + cWz - dZx, aZx - bWy + cXd + dY, and aWy + bZx - cYx + dX is equal to the product of the sum of the squares of axbx, bya By, cZcZ, and dwd.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (a b c d x y z w : ℕ),\n  (↑a * ↑x - ↑b * ↑y - ↑c * ↑z - ↑d * ↑w).natAbs ^ 2 + (↑a * ↑y + ↑b * ↑x + ↑c * ↑w - ↑d * ↑z).natAbs ^ 2 +\n        (↑a * ↑z - ↑b * ↑w + ↑c * ↑x + ↑d * ↑y).natAbs ^ 2 +\n      (↑a * ↑w + ↑b * ↑z - ↑c * ↑y + ↑d * ↑x).natAbs ^ 2 =\n    (a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2) * (x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Lagrange's **four squares theorem** for a prime number. Use `Nat.sum_four_squares` instead. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {p : ℕ}, Nat.Prime p → ∃ a b c d, a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 = p"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  For any commutative ring R and elements a, b, c, d, x, y, z, w, the following equality holds: (a^2 + b^2 + c^2 + d^2) * (x^2 + y^2 + z^2 + w^2) = (a^2 + b^2 + (c + d)^2) * (x^2 + y^2 + (z + w)^2)\n\nOr, in more concise form:\n(∑(a, b, c, d)^2) * (∑(x, y, z, w)^2) = (∑(a, b, c+d)^2) * (∑(x, y, z+w)^2)\n\nWhere ∑ represents the sum of squares of the elements inside the parentheses.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u_1} [inst : CommRing R] (a b c d x y z w : R),\n  (a * x - b * y - c * z - d * w) ^ 2 + (a * y + b * x + c * w - d * z) ^ 2 + (a * z - b * w + c * x + d * y) ^ 2 +\n      (a * w + b * z - c * y + d * x) ^ 2 =\n    (a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2) * (x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: **Four squares theorem** \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (n : ℕ), ∃ a b c d, a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 = n"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  Every natural number can be expressed as the sum of four squares of natural numbers.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (n : ℕ), ∃ a b c d, a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 = n"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The set of natural numbers that are sums of two squares is closed under multiplication. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {a b x y u v : ℕ}, a = x ^ 2 + y ^ 2 → b = u ^ 2 + v ^ 2 → ∃ r s, a * b = r ^ 2 + s ^ 2"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem, known as Euler's four-square identity, states that for any commutative ring `R` and any eight elements `x₁`, `x₂`, `x₃`, `x₄`, `y₁`, `y₂`, `y₃`, `y₄` of `R`, the sum of the squares of the `x` elements multiplied by the sum of the squares of the `y` elements equals the sum of the squares of four different combinations of the `x` and `y` elements. These combinations mimic the multiplication of two quaternions. The identity is a fundamental result in number theory and has applications in the representation of numbers as sums of squares.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u_1} [inst : CommRing R] {x₁ x₂ x₃ x₄ y₁ y₂ y₃ y₄ : R},\n  (x₁ ^ 2 + x₂ ^ 2 + x₃ ^ 2 + x₄ ^ 2) * (y₁ ^ 2 + y₂ ^ 2 + y₃ ^ 2 + y₄ ^ 2) =\n    (x₁ * y₁ - x₂ * y₂ - x₃ * y₃ - x₄ * y₄) ^ 2 + (x₁ * y₂ + x₂ * y₁ + x₃ * y₄ - x₄ * y₃) ^ 2 +\n        (x₁ * y₃ - x₂ * y₄ + x₃ * y₁ + x₄ * y₂) ^ 2 +\n      (x₁ * y₄ + x₂ * y₃ - x₃ * y₂ + x₄ * y₁) ^ 2"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This is a natural number version of Euler's four-square identity. The theorem states that for any eight natural numbers (a, b, c, d, x, y, z, w), the sum of squares of four specific expressions which involve these natural numbers, each taken to the power of two, is equal to the product of the sum of squares of (a, b, c, d) and the sum of squares of (x, y, z, w). These four expressions are: the absolute value of (a*x - b*y - c*z - d*w), the absolute value of (a*y + b*x + c*w - d*z), the absolute value of (a*z - b*w + c*x + d*y), and the absolute value of (a*w + b*z - c*y + d*x).\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (a b c d x y z w : ℕ),\n  (↑a * ↑x - ↑b * ↑y - ↑c * ↑z - ↑d * ↑w).natAbs ^ 2 + (↑a * ↑y + ↑b * ↑x + ↑c * ↑w - ↑d * ↑z).natAbs ^ 2 +\n        (↑a * ↑z - ↑b * ↑w + ↑c * ↑x + ↑d * ↑y).natAbs ^ 2 +\n      (↑a * ↑w + ↑b * ↑z - ↑c * ↑y + ↑d * ↑x).natAbs ^ 2 =\n    (a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2) * (x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for any natural numbers `a`, `b`, `x`, `y`, `u`, and `v`, if `a` equals the sum of squares of `x` and `y`, and `b` equals the sum of squares of `u` and `v`, then there exist natural numbers `r` and `s` such that the product of `a` and `b` equals the sum of squares of `r` and `s`. In other words, the set of natural numbers that can be expressed as the sum of two squares is closed under multiplication.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {a b x y u v : ℕ}, a = x ^ 2 + y ^ 2 → b = u ^ 2 + v ^ 2 → ∃ r s, a * b = r ^ 2 + s ^ 2"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The \"Four Squares Theorem\" states that for any natural number `n`, there exist four natural numbers `a`, `b`, `c`, and `d`, such that the sum of their squares equals `n`. In other words, any natural number can be expressed as the sum of four perfect squares.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (n : ℕ), ∃ a b c d, a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 = n"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  The second component of the product of two dual numbers is equal to the sum of the product of their first components and the product of their second components.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u_1} [inst : Semiring R] (x y : DualNumber R),\n  TrivSqZeroExt.snd (x * y) = TrivSqZeroExt.fst x * TrivSqZeroExt.snd y + TrivSqZeroExt.snd x * TrivSqZeroExt.fst y"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  Every prime number can be expressed as the sum of the squares of four natural numbers.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {p : ℕ}, p.Prime → ∃ a b c d, a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 = p"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  In a commutative ring, the product of two sums of squares is a sum of squares.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u_1} [inst : CommRing R] {a b x y u v : R},\n  a = x ^ 2 + y ^ 2 → b = u ^ 2 + v ^ 2 → ∃ r s, a * b = r ^ 2 + s ^ 2"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  Every natural number can be expressed as the sum of four squares of natural numbers.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (n : ℕ), ∃ a b c d, a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 = n"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: The symmetric square is equivalent to the second symmetric power. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"(α : Type u_4) → Sym2 α ≃ Sym α 2"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The product of two Chebyshev polynomials is the sum of two other Chebyshev polynomials. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (R : Type u_1) [inst : CommRing R] (m k : ℕ),\n  2 * Polynomial.Chebyshev.T R m * Polynomial.Chebyshev.T R (m + k) =\n    Polynomial.Chebyshev.T R (2 * m + k) + Polynomial.Chebyshev.T R k"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: If `-1` is a square modulo the natural number `n`, then `n` is a sum of two squares. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {n : ℕ}, IsSquare (-1) → ∃ x y, n = x ^ 2 + y ^ 2"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: **Four squares theorem** \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (n : ℕ), ∃ a b c d, a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 = n"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: **Euler's four-square identity**. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u_1} [inst : CommRing R] (a b c d x y z w : R),\n  (a * x - b * y - c * z - d * w) ^ 2 + (a * y + b * x + c * w - d * z) ^ 2 + (a * z - b * w + c * x + d * y) ^ 2 +\n      (a * w + b * z - c * y + d * x) ^ 2 =\n    (a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2) * (x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: **Euler's four-square identity**, a version for natural numbers. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (a b c d x y z w : ℕ),\n  Int.natAbs (↑a * ↑x - ↑b * ↑y - ↑c * ↑z - ↑d * ↑w) ^ 2 + Int.natAbs (↑a * ↑y + ↑b * ↑x + ↑c * ↑w - ↑d * ↑z) ^ 2 +\n        Int.natAbs (↑a * ↑z - ↑b * ↑w + ↑c * ↑x + ↑d * ↑y) ^ 2 +\n      Int.natAbs (↑a * ↑w + ↑b * ↑z - ↑c * ↑y + ↑d * ↑x) ^ 2 =\n    (a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2) * (x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The sum of two squares is zero iff both elements are zero. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u} [inst : LinearOrderedSemiring α] {a b : α} [inst_1 : ExistsAddOfLE α], a * a + b * b = 0 ↔ a = 0 ∧ b = 0"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The set of natural numbers that are sums of two squares is closed under multiplication. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {a b x y u v : ℕ}, a = x ^ 2 + y ^ 2 → b = u ^ 2 + v ^ 2 → ∃ r s, a * b = r ^ 2 + s ^ 2"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The product of two numbers, each of which is the sum of four squares, is itself a sum of four squares.\n\nGive ONLY the Lean code"}]}
{"text":"A ring with all elements idempotent is commutative.","fullPrompt":[{"role":"system","content":"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code."},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Also see `Ideal.isIdempotentElem_iff_eq_bot_or_top` for integral domains. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsNoetherianRing R] [inst_2 : LocalRing R] (I : Ideal R),   IsIdempotentElem I ↔ I = ⊥ ∨ I = ⊤"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for any commutative ring 'R' which is both a Noetherian and a Local ring, an ideal 'I' in 'R' is idempotent (that is, when you square it, you get the ideal back) if and only if the ideal 'I' is either bot (the zero ideal) or top (the unit ideal). This is a special case of a more general principle observable in integral domains.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsNoetherianRing R] [inst_2 : LocalRing R] (I : Ideal R),\n  IsIdempotentElem I ↔ I = ⊥ ∨ I = ⊤"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that in a linearly ordered commutative ring, the multiplication operation is commutative. Specifically, for any two elements 'a' and 'b' in the ring, the result of multiplying 'a' by 'b' is the same as the result of multiplying 'b' by 'a'. This is a fundamental property of commutative multiplication, and this theorem proves that it holds true in the context of a linearly ordered commutative ring.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u} [self : LinearOrderedCommRing α] (a b : α), a * b = b * a"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that in a non-unital commutative ring, the operation of multiplication is commutative. In other words, for any two elements `a` and `b` of the ring, the product of `a` and `b` is equal to the product of `b` and `a`. The ring is \"non-unital\", meaning it does not necessarily have a multiplicative identity element.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u} [self : NonUnitalCommRing α] (a b : α), a * b = b * a"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that in any Boolean ring, the multiplication of any element with itself always yields the original element. In more mathematical terms, for any Boolean ring `α` and any element `a` of `α`, `a * a = a`. This property is known as idempotence in multiplication.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_4} [self : BooleanRing α] (a : α), a * a = a"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  In a commutative semi-ring without identity, multiplication is commutative.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u} [self : NonUnitalCommSemiring α] (a b : α), a * b = b * a"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  In an ordered commutative ring, multiplication is commutative, that is, `a * b = b * a` for all elements `a` and `b`.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_2} [self : StrictOrderedCommRing α] (a b : α), a * b = b * a"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  In a commutative ring with a linear order, multiplication is commutative.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u} [self : LinearOrderedCommRing α] (a b : α), a * b = b * a"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  In a commutative ring, an ideal is idempotent if and only if it is generated by a single idempotent element.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u_1} [inst : CommRing R] (I : Ideal R),\n  I.FG → (IsIdempotentElem I ↔ ∃ e, IsIdempotentElem e ∧ I = Submodule.span R {e})"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Any element commutes with itself.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {S : Type u_2} [inst : Add S] (a : S), AddCommute a a"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: A prime associative ring has commutative centroid. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"{α : Type u_5} →\n  [inst : NonUnitalRing α] → (∀ (a b : α), (∀ (r : α), a * r * b = 0) → a = 0 ∨ b = 0) → CommRing (CentroidHom α)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Any element commutes with itself. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {S : Type u_2} [inst : Mul S] (a : S), Commute a a"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A ring isomorphism preserves addition. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u_4} {S : Type u_5} [inst : Mul R] [inst_1 : Mul S] [inst_2 : Add R] [inst_3 : Add S] (e : R ≃+* S)\n  (x y : R), e (x + y) = e x + e y"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: Product of two commutative rings is a commutative ring. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"{R : Type u_3} → {S : Type u_5} → [inst : CommRing R] → [inst : CommRing S] → CommRing (R × S)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A ring isomorphism preserves multiplication. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u_4} {S : Type u_5} [inst : Mul R] [inst_1 : Mul S] [inst_2 : Add R] [inst_3 : Add S] (e : R ≃+* S)\n  (x y : R), e (x * y) = e x * e y"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: A non-unital commutative ring is isomorphic to its opposite. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"(R : Type u_4) → [inst : NonUnitalCommSemiring R] → R ≃+* Rᵐᵒᵖ"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Multiplication in a boolean ring is idempotent. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_4} [self : BooleanRing α] (a : α), a * a = a"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A ring with all elements idempotent is commutative.\n\nGive ONLY the Lean code"}]}
{"text":"There are infinitely many pairs of primes that differ exactly by `2`.","fullPrompt":[{"role":"system","content":"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code."},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  The theorem `Nat.prime_two` asserts that 2 is a prime number in the natural numbers, i.e., it is a natural number greater than 1 that has no divisors other than 1 and itself.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"Nat.Prime 2"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Euclid's theorem on the **infinitude of primes**.\nHere given in the form: for every `n`, there exists a prime number `p ≥ n`. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (n : ℕ), ∃ p, n ≤ p ∧ Nat.Prime p"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The theorem `Nat.Prime.two_le` states that for any natural number `p`, if `p` is prime, then `p` is greater than or equal to 2. In other words, it says that all prime numbers are at least 2.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {p : ℕ}, p.Prime → 2 ≤ p"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that the list of prime factors of any natural number `n + 2` can be constructed through an inductive process. The process begins by taking the smallest prime factor (`minFac`) of `n + 2`, and then appending the prime factors of `n + 2` divided by this smallest prime factor. In other words, for any natural number `n`, the prime factorization of `n + 2` is equivalent to the smallest prime factor of `n + 2` prepended to the prime factorization of the quotient of `n + 2` and its smallest prime factor.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (n : ℕ), (n + 2).factors = (n + 2).minFac :: ((n + 2) / (n + 2).minFac).factors"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The theorem `Nat.coprime_two_left` states that for any natural number `n`, `n` and `2` are coprime (or relatively prime, meaning their greatest common divisor is `1`) if and only if `n` is odd. In other words, a natural number shares no common factor greater than `1` with `2` precisely when it is odd, which is defined as there existing a natural number `k` such that `n = 2*k + 1`.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {n : ℕ}, Nat.Coprime 2 n ↔ Odd n"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The theorem `Nat.prime_two` asserts that the number 2 is a prime number. In the context of natural numbers, a prime number is defined as a natural number greater than or equal to 2 whose only divisors are itself and 1. Therefore, this theorem is confirming that 2, which is divisible only by itself and 1, satisfies this property and is therefore a prime number.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"Nat.Prime 2"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  For every natural number `k`, the quotient of `k + 2` by the smallest prime factor of `k + 2` is strictly less than `k + 2`.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {k : ℕ}, (k + 2) / (k + 2).minFac < k + 2"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  A natural number `n` is coprime to 2 if and only if `n` is odd.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {n : ℕ}, Nat.Coprime 2 n ↔ Odd n"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  For any function from natural numbers to some type and any two elements of its product space, the indices at which they first differ are equal.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {E : ℕ → Type u_1} (x y : (n : ℕ) → E n), PiNat.firstDiff x y = PiNat.firstDiff y x"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  For an odd prime number `p`, `2` is a square modulo `p` if and only if `p` is congruent to `1` or `7` modulo `8`.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {p : ℕ} [inst : Fact p.Prime], p ≠ 2 → (IsSquare 2 ↔ p % 8 = 1 ∨ p % 8 = 7)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: `2` is a square modulo an odd prime `p` iff `p` is congruent to `1` or `7` mod `8`. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {p : ℕ} [inst : Fact (Nat.Prime p)], p ≠ 2 → (IsSquare 2 ↔ p % 8 = 1 ∨ p % 8 = 7)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: The type of prime numbers \n\nGive ONLY the Lean code"},{"role":"assistant","content":"Type"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: Two pnats are coprime if their gcd is 1. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"ℕ+ → ℕ+ → Prop"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: An inequality involving `2`. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_2} [inst : LinearOrderedField α] {a : α}, 2 ≤ a → (1 - 1 / a)⁻¹ ≤ 2"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The set of natural numbers that are sums of two squares is closed under multiplication. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {a b x y u v : ℕ}, a = x ^ 2 + y ^ 2 → b = u ^ 2 + v ^ 2 → ∃ r s, a * b = r ^ 2 + s ^ 2"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Every nonzero natural number has a unique prime factorization \n\nGive ONLY the Lean code"},{"role":"assistant","content":"Set.InjOn Nat.factorization {x | x ≠ 0}"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A prime `p` satisfies `p % 2 = 1` if and only if `p ≠ 2`. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {p : ℕ} [inst : Fact (Nat.Prime p)], p % 2 = 1 ↔ p ≠ 2"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: In a finite field of characteristic `2`, all elements are squares. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {F : Type u_3} [inst : Field F] [inst_1 : Finite F], ringChar F = 2 → ∀ (a : F), IsSquare a"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: There are infinitely many pairs of primes that differ exactly by `2`.\n\nGive ONLY the Lean code"}]}
{"text":"Every finite division ring is a field.","fullPrompt":[{"role":"system","content":"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code."},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A finite domain is a field. See also `littleWedderburn` and `Fintype.divisionRingOfIsDomain`. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (D : Type u_1) [inst : Finite D] [inst : Ring D] [inst_1 : IsDomain D], IsField D"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: A finite division ring is a field. See `Finite.isDomain_to_isField` and\n`Fintype.divisionRingOfIsDomain` for more general statements, but these create data, and therefore\nmay cause diamonds if used improperly. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"(D : Type u_1) → [inst : DivisionRing D] → [inst : Finite D] → Field D"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for any division ring `K`, and for any subfield `s` of `K`, if `x` and `y` are elements of `s`, then the result of the division of `x` by `y` (denoted as `x / y`) is also an element of `s`. Essentially, it asserts that a subfield is closed under the operation of division. This means that dividing any two elements of the subfield always results in a value that is also in the subfield.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {K : Type u} [inst : DivisionRing K] (s : Subfield K) {x y : K}, x ∈ s → y ∈ s → x / y ∈ s"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for any division ring `K` and any subfield `s` of `K`, the multiplicative identity, 1, is an element of `s`. In other words, every subfield of a division ring must contain the number 1.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {K : Type u} [inst : DivisionRing K] (s : Subfield K), 1 ∈ s"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for any given division ring `K` and any subfield `s` of `K`, the element `0` (zero) from `K` is also an element in `s`. In other words, every subfield of a division ring must contain the zero of the division ring.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {K : Type u} [inst : DivisionRing K] (s : Subfield K), 0 ∈ s"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that a subfield in a division ring is closed under multiplication. In more detail, for any division ring 'K', given any subfield 's' of 'K', and any two elements 'x' and 'y' in 's', the product of 'x' and 'y' is also an element of 's'. In essence, this means you can multiply any two elements in the subfield and the result will still belong to the same subfield, hence demonstrating the closure property in the context of multiplication.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {K : Type u} [inst : DivisionRing K] (s : Subfield K) {x y : K}, x ∈ s → y ∈ s → x * y ∈ s"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  Every finite field has a cardinality that is a power of a prime number.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} [inst : Fintype α] [inst_1 : Field α], IsPrimePow (Fintype.card α)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  A finite ring and a domain is a field. Every non-zero element in such a finite field has a multiplicative inverse.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (D : Type u_1) [inst : Finite D] [inst : Ring D] [inst_1 : IsDomain D], IsField D"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  In any division ring, the multiplicative inverses of elements in a subfield belong to the same subfield.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {K : Type u} [inst : DivisionRing K] (self : Subfield K), ∀ x ∈ self.carrier, x⁻¹ ∈ self.carrier"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  Every subfield of a division ring contains the multiplicative identity 1.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {K : Type u} [inst : DivisionRing K] (s : Subfield K), 1 ∈ s"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A field is a valuation ring. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (K : Type u) [inst : Field K], ValuationRing K"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: A finite division ring is a field. See `Finite.isDomain_to_isField` and\n`Fintype.divisionRingOfIsDomain` for more general statements, but these create data, and therefore\nmay cause diamonds if used improperly. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"(D : Type u_1) → [inst : DivisionRing D] → [inst : Finite D] → Field D"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: An intermediate field is closed under division. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {K : Type u_1} {L : Type u_2} [inst : Field K] [inst_1 : Field L] [inst_2 : Algebra K L] (S : IntermediateField K L)\n  {x y : L}, x ∈ S → y ∈ S → x / y ∈ S"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: An integral domain that is module-finite as an algebra over a field is a field. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"(F : Type u_1) →\n  (K : Type u_2) →\n    [inst : Field F] →\n      [h : CommRing K] → [inst_1 : IsDomain K] → [inst_2 : Algebra F K] → [inst : FiniteDimensional F K] → Field K"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A finite field has prime power cardinality. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} [inst : Fintype α] [inst_1 : Field α], IsPrimePow (Fintype.card α)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A finite domain is a field. See also `littleWedderburn` and `Fintype.divisionRingOfIsDomain`. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (D : Type u_1) [inst : Finite D] [inst : Ring D] [inst_1 : IsDomain D], IsField D"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: A domain that is module-finite as an algebra over a field is a division ring. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"(F : Type u_1) →\n  (K : Type u_2) →\n    [inst : Field F] →\n      [h : Ring K] → [inst_1 : IsDomain K] → [inst_2 : Algebra F K] → [inst : FiniteDimensional F K] → DivisionRing K"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: Every finite domain is a division ring. More generally, they are fields; this can be found in\n`Mathlib.RingTheory.LittleWedderburn`. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"(R : Type u_3) → [inst : Ring R] → [inst : IsDomain R] → [inst : DecidableEq R] → [inst : Fintype R] → DivisionRing R"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Every finite division ring is a field.\n\nGive ONLY the Lean code"}]}
{"text":"If each of two types can be mapped injectively into the other, then there is a bijection between them.","fullPrompt":[{"role":"system","content":"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code."},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  If `f` is a bijection from set `s` to set `t`, then the image of `s` under `f` is exactly `t`.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} {β : Type u_2} {s : Set α} {t : Set β} {f : α → β}, BijOn f s t → MapsTo f s t"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  A function between types is bijective if and only if it is both injective and surjective on their universal sets.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} {β : Type u_2} {f : α → β}, Bijective f ↔ BijOn f univ univ"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  A function between two finite sets is bijective if and only if it is injective and the cardinalities of the sets are equal.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} {β : Type u_2} [inst : Fintype α] [inst_1 : Fintype β] (f : α → β),   Bijective f ↔ Injective f ∧ Fintype.card α = Fintype.card β"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  The theorem `fin_injective` asserts that the `Fin` function maps distinct natural numbers to distinct types.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"Function.Injective Fin"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: If functions `f'` and `f` are inverse on `s` and `t`, `f` maps `s` into `t`, and `f'` maps `t`\ninto `s`, then `f` is a bijection between `s` and `t`. The `mapsTo` arguments can be deduced from\n`surjOn` statements using `LeftInvOn.mapsTo` and `RightInvOn.mapsTo`. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} {β : Type u_2} {s : Set α} {t : Set β} {f : α → β} {f' : β → α},   InvOn f' f s t → MapsTo f s t → MapsTo f' t s → BijOn f s t"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for any two types `α` and `β`, the cardinality of `α` is equal to the cardinality of `β` if and only if there exists a bijection between `α` and `β`. In other words, there's a one-to-one correspondence between the elements of `α` and `β`.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α β : Type u}, Cardinal.mk α = Cardinal.mk β ↔ Nonempty (α ≃ β)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for any types `α` and `β`, and for any function `f` from `α` to `β`, if `f` is bijective (which means it is both injective and surjective), then `f` is also injective. In other words, if a function maps distinct elements of the domain to distinct elements of the codomain and every element of the codomain is the image of some element of the domain, then it must be the case that the same output from the function implies that the inputs were the same.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Sort u_1} {β : Sort u_2} {f : α → β}, Function.Bijective f → Function.Injective f"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The theorem states that, for any two types 'X' and 'Y' in the same universe 'u', a morphism 'f' from 'X' to 'Y' is an isomorphism if and only if it is bijective. In other words, in the category of types, a morphism (which is simply a function in this context) is an isomorphism (an invertible morphism) exactly when it is a bijective function, i.e., a function that is both injective (no two different inputs have the same output) and surjective (every element in the codomain is an output for at least one input).\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X Y : Type u} (f : X ⟶ Y), CategoryTheory.IsIso f ↔ Function.Bijective f"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  A function between types is bijective if and only if it is both injective and surjective on their universal sets.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} {β : Type u_2} {f : α → β}, Function.Bijective f ↔ Set.BijOn f Set.univ Set.univ"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  If a function between two sets is bijective, then it is injective.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} {β : Type u_2} {s : Set α} {t : Set β} {f : α → β}, Set.BijOn f s t → Set.InjOn f s"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  If a function between two types is bijective on two sets, then it is surjective on one set onto the other.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} {β : Type u_2} {s : Set α} {t : Set β} {f : α → β}, Set.BijOn f s t → Set.SurjOn f s t"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  If two sets have injective functions between them, then they are equal in size and there exists a bijective function between them.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u} {β : Type v} {f : α → β} {g : β → α},\n  Function.Injective f → Function.Injective g → ∃ h, Function.Bijective h"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A morphism in `Type u` is an isomorphism if and only if it is bijective. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X Y : Type u} (f : X ⟶ Y), CategoryTheory.IsIso f ↔ Function.Bijective f"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: A bijective linear map is a linear equivalence. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"{R : Type u_1} →\n  {R₂ : Type u_3} →\n    {M : Type u_9} →\n      {M₂ : Type u_12} →\n        [inst : Semiring R] →\n          [inst_1 : Semiring R₂] →\n            [inst_2 : AddCommMonoid M] →\n              [inst_3 : AddCommMonoid M₂] →\n                {module_M : Module R M} →\n                  {module_M₂ : Module R₂ M₂} →\n                    {σ₁₂ : R →+* R₂} →\n                      {σ₂₁ : R₂ →+* R} →\n                        (f : M →ₛₗ[σ₁₂] M₂) →\n                          [inst_4 : RingHomInvPair σ₁₂ σ₂₁] →\n                            [inst_5 : RingHomInvPair σ₂₁ σ₁₂] → Function.Bijective ⇑f → M ≃ₛₗ[σ₁₂] M₂"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: Bijective affine maps are affine isomorphisms. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"{k : Type u_1} →\n  {P₁ : Type u_2} →\n    {P₂ : Type u_3} →\n      {V₁ : Type u_6} →\n        {V₂ : Type u_7} →\n          [inst : Ring k] →\n            [inst_1 : AddCommGroup V₁] →\n              [inst_2 : Module k V₁] →\n                [inst_3 : AddTorsor V₁ P₁] →\n                  [inst_4 : AddCommGroup V₂] →\n                    [inst_5 : Module k V₂] →\n                      [inst_6 : AddTorsor V₂ P₂] → {φ : P₁ →ᵃ[k] P₂} → Function.Bijective ⇑φ → P₁ ≃ᵃ[k] P₂"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A monomorphism is injective. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u_1} {R₂ : Type u_3} {M : Type u_9} {M₂ : Type u_12} [inst : Semiring R] [inst_1 : Semiring R₂]\n  [inst_2 : AddCommMonoid M] [inst_3 : AddCommMonoid M₂] [inst_4 : Module R M] [inst_5 : Module R₂ M₂] {τ₁₂ : R →+* R₂}\n  {f : M →ₛₗ[τ₁₂] M₂},\n  (∀ (u v : ↥(LinearMap.ker f) →ₗ[R] M), LinearMap.comp f u = LinearMap.comp f v → u = v) → LinearMap.ker f = ⊥"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: A function is called bijective if it is both injective and surjective. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"{α : Sort u₁} → {β : Sort u₂} → (α → β) → Prop"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: If a bounded linear map is a bijection, then its inverse is also a bounded linear map. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {𝕜 : Type u_1} [inst : NontriviallyNormedField 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E]\n  [inst_2 : NormedSpace 𝕜 E] {F : Type u_3} [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F]\n  [inst_5 : CompleteSpace F] [inst_6 : CompleteSpace E] (e : E ≃ₗ[𝕜] F),\n  Continuous ⇑e → Continuous ⇑(LinearEquiv.symm e)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: If a linear map is surjective, then its dual is injective. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u} [inst : CommSemiring R] {M₁ : Type v} {M₂ : Type v'} [inst_1 : AddCommMonoid M₁] [inst_2 : Module R M₁]\n  [inst_3 : AddCommMonoid M₂] [inst_4 : Module R M₂] {f : M₁ →ₗ[R] M₂},\n  Function.Surjective ⇑f → Function.Injective ⇑(LinearMap.dualMap f)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: Any isomorphism between types gives an equivalence. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"{X Y : Type u} → (X ≅ Y) → X ≃ Y"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: If each of two types can be mapped injectively into the other, then there is a bijection between them.\n\nGive ONLY the Lean code"}]}
{"text":"A finite graph in which every pair of vertices have precisely one common neighbour contains a vertex that is adjacent to all other vertices.","fullPrompt":[{"role":"system","content":"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code."},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  In a simple graph, two vertices are adjacent if and only if there exists an edge connecting them.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {V : Type u} {G : SimpleGraph V} {v w : V}, G.Adj v w ↔ v ≠ w ∧ ∃ e ∈ G.edgeSet, v ∈ e ∧ w ∈ e"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Complete graphs are strongly regular. Note that `μ` can take any value\nfor complete graphs, since there are no distinct pairs of non-adjacent vertices. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {V : Type u} [inst : Fintype V] [inst_1 : DecidableEq V] {μ : ℕ},   SimpleGraph.IsSRGWith ⊤ (Fintype.card V) (Fintype.card V - 1) (Fintype.card V - 2) μ"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that in a simple graph, two vertices are considered adjacent if and only if there is an edge between them. The condition `v ≠ w` is necessary to ensure that the two vertices are different endpoints of the edge, because if `v` is equal to `w`, then the existential condition `∃ (e ∈ G.edgeSet), v ∈ e ∧ w ∈ e` would be satisfied by any edge that is incident to `v`.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {V : Type u} {G : SimpleGraph V} {v w : V}, G.Adj v w ↔ v ≠ w ∧ ∃ e ∈ G.edgeSet, v ∈ e ∧ w ∈ e"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The theorem states that for any infinite, preconnected and locally finite simple graph, there always exists at least one end. Here, a simple graph is defined over a set `V` and is locally finite if at every vertex `v` in `V` there is a neighborhood of `v` which meets only finitely many other vertices in the graph. The graph is preconnected if there is a path between any two vertices. An end of a graph is intuitively a \"direction\" in which the graph extends to infinity. According to the theorem, such an end always exists in the graph under the given conditions.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {V : Type} (G : SimpleGraph V) [inst : G.LocallyFinite] [inst : Fact G.Preconnected] [inst : Infinite V],\n  G.end.Nonempty"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for any vertex 'v' of a simple graph 'G', where the set of vertices adjacent to 'v' (the neighbor set of 'v') is finite, a vertex 'w' belongs to the finite version (Finset) of this neighbor set if and only if 'v' is adjacent to 'w' in the graph 'G'. In other words, 'w' is in the finite neighbor set of 'v' precisely when 'w' and 'v' share an edge in 'G'. The adjacency relationship is defined by the function 'G.Adj'.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {V : Type u_1} (G : SimpleGraph V) (v : V) [inst : Fintype ↑(G.neighborSet v)] (w : V),\n  (w ∈ G.neighborFinset v) = G.Adj v w"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for any simple graph `G` with vertices of a certain type `V`, which has a finite number of elements, and for any vertex `v` from `V`, if the adjacency relation `G.Adj` is decidable, then the finite set of neighbours of `v` in `G` is equal to the set of all vertices in `G` that satisfy the adjacency relation with `v`. In other words, the set of neighbours of `v` is the set of all vertices that are adjacent to `v` in the graph `G`.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {V : Type u_1} (G : SimpleGraph V) [inst : Fintype V] {v : V} [inst_1 : DecidableRel G.Adj],\n  G.neighborFinset v = Finset.filter (G.Adj v) Finset.univ"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  In a complete graph, any two distinct vertices are connected by an edge.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {V : Type u} (v w : V), ⊤.Adj v w ↔ v ≠ w"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  For any simple graph and vertex with a finite set of neighbors, the cardinality of the neighbor set equals the degree of the vertex.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {V : Type u_1} (G : SimpleGraph V) (v : V) [inst : Fintype ↑(G.neighborSet v)],\n  Fintype.card ↑(G.neighborSet v) = G.degree v"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  In a simple graph, two vertices are adjacent if and only if there exists an edge connecting them.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {V : Type u} {G : SimpleGraph V} {v w : V}, G.Adj v w ↔ v ≠ w ∧ ∃ e ∈ G.edgeSet, v ∈ e ∧ w ∈ e"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  In a simple graph, the neighbor set of a vertex equals the set of vertices adjacent to it.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {V : Type u} (G : SimpleGraph V) (v w : V), (w ∈ G.neighborSet v) = G.Adj v w"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: There is a unique path from the root to any other vertex. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"{V : Type u} →\n  [inst : Quiver V] → [self : Quiver.Arborescence V] → (b : V) → Unique (Quiver.Path Quiver.Arborescence.root b)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: A clique in a graph is a set of vertices that are pairwise adjacent. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"{α : Type u_1} → SimpleGraph α → Set α → Prop"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: The finite subgraph of G generated by a single vertex. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"{V : Type u} → {G : SimpleGraph V} → V → SimpleGraph.Finsubgraph G"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: If a graph is locally finite at a vertex, then so is a subgraph of that graph. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"{V : Type u} →\n  {G : SimpleGraph V} →\n    {G' : SimpleGraph.Subgraph G} →\n      (v : ↑G'.verts) →\n        [inst : DecidableRel G'.Adj] →\n          [inst : Fintype ↑(SimpleGraph.neighborSet G ↑v)] → Fintype ↑(SimpleGraph.Subgraph.neighborSet G' ↑v)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: There is an equivalence between the set of edges incident to a given\nvertex and the set of vertices adjacent to the vertex. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"{V : Type u} →\n  (G : SimpleGraph V) →\n    [inst : DecidableEq V] → (v : V) → ↑(SimpleGraph.incidenceSet G v) ≃ ↑(SimpleGraph.neighborSet G v)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A locally finite preconnected infinite graph has at least one end. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {V : Type} (G : SimpleGraph V) [inst : SimpleGraph.LocallyFinite G] [inst : Fact (SimpleGraph.Preconnected G)]\n  [inst : Infinite V], Set.Nonempty (SimpleGraph.end G)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: A graph is preconnected if every pair of vertices is reachable from one another. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"{V : Type u} → SimpleGraph V → Prop"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: A graph is locally finite if every vertex has a finite neighbor set. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"{V : Type u} → SimpleGraph V → Type u"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A finite graph in which every pair of vertices have precisely one common neighbour contains a vertex that is adjacent to all other vertices.\n\nGive ONLY the Lean code"}]}
{"text":"The number of partitions with odd parts is equal to the number of partitions with distinct parts.","fullPrompt":[{"role":"system","content":"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code."},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: The finset of those partitions in which each part is used at most once. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"(n : ℕ) → Finset (Nat.Partition n)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  If two partitions of a natural number have equal parts, then they are equal.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {n : ℕ} (x y : Nat.Partition n), x.parts = y.parts → x = y"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: The finset of those partitions in which every part is odd and used at most once. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"(n : ℕ) → Finset (Nat.Partition n)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The theorem `Nat.Partition.count_ofSums_of_ne_zero` states that for any positive integer `i`, the number of times `i` appears in the partition of a number `n` obtained from the multiset `l` whose sum is `n`, is the same as the number of times `i` appears in the original multiset `l`. This only holds true when `i` is not zero. If `i` is zero, then by virtue of partitions not containing zeros and by the property that a multiset count of a non-member is zero, the count in both the partition and the multiset would be zero.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {n : ℕ} {l : Multiset ℕ} (hl : l.sum = n) {i : ℕ},\n  i ≠ 0 → Multiset.count i (Nat.Partition.ofSums n l hl).parts = Multiset.count i l"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem proves that all `parts` of a natural number partition are positive. Given a natural number `n` and a partition `self` of `n`, the theorem asserts that for any natural number `i`, if `i` is in the list of `parts` of the partition, then `i` must be greater than zero.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {n : ℕ} (self : n.Partition) {i : ℕ}, i ∈ self.parts → 0 < i"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem, `Nat.Partition.ext`, states that for any natural number `n` and any two partitions `x` and `y` of `n`, if the parts of `x` and `y` are equal, then `x` and `y` are equal. In simpler terms, it ensures that two partitions of a natural number are considered the same if they have the same parts, regardless of the order in which these parts are supplied.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {n : ℕ} (x y : n.Partition), x.parts = y.parts → x = y"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for any natural number `n` and any partition `self` of `n`, the sum of the `parts` of the partition is equal to `n`. In other words, if you take a natural number and partition it into a set of smaller natural numbers, the sum of these smaller numbers will always equal the original number. This is a fundamental property of number partitions.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {n : ℕ} (self : n.Partition), self.parts.sum = n"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  Every integer can be classified as even (being expressible as 2*r for some integer r) or odd (being expressible as 2*k + 1 for some integer k).\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (n : ℤ), Even n ∨ Odd n"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  For any natural number `n` and its partition `self`, the sum of the parts of `self` equals `n`.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {n : ℕ} (self : n.Partition), self.parts.sum = n"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  Two partitions of a box in Lean 4 are equal if and only if they contain the same set of boxes.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {ι : Type u_1} {I : BoxIntegral.Box ι} {π₁ π₂ : BoxIntegral.Prepartition I},\n  (∀ (J : BoxIntegral.Box ι), J ∈ π₁ ↔ J ∈ π₂) → π₁ = π₂"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  If two partitions of a natural number have equal parts, then they are equal.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {n : ℕ} (x y : n.Partition), x.parts = y.parts → x = y"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: An equipartition is a partition whose parts are all the same size, up to a difference of `1`. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"{α : Type u_1} → [inst : DecidableEq α] → {s : Finset α} → Finpartition s → Prop"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The partition is supremum-independent \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} [inst : Lattice α] [inst_1 : OrderBot α] {a : α} (self : Finpartition a), Finset.SupIndep self.parts id"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: The partition of exactly one part. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"(n : ℕ) → Nat.Partition n"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The increment partition has a prescribed (very big) size in terms of the original partition. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} [inst : Fintype α] {P : Finpartition Finset.univ} {hP : Finpartition.IsEquipartition P}\n  {G : SimpleGraph α} {ε : ℝ},\n  P.parts.card * 16 ^ P.parts.card ≤ Fintype.card α →\n    ¬Finpartition.IsUniform P G ε →\n      (SzemerediRegularity.increment hP G ε).parts.card = SzemerediRegularity.stepBound P.parts.card"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: The partition corresponding to a permutation \n\nGive ONLY the Lean code"},{"role":"assistant","content":"{α : Type u_1} → [inst : Fintype α] → [inst_1 : DecidableEq α] → Equiv.Perm α → Nat.Partition (Fintype.card α)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: The finset of those partitions in which each part is used at most once. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"(n : ℕ) → Finset (Nat.Partition n)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: The finset of those partitions in which every part is odd and used at most once. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"(n : ℕ) → Finset (Nat.Partition n)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: The finset of those partitions in which every part is odd. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"(n : ℕ) → Finset (Nat.Partition n)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The number of partitions with odd parts is equal to the number of partitions with distinct parts.\n\nGive ONLY the Lean code"}]}
{"text":"Every non-empty poset in which every chain has an upper bound contains a maximal element.","fullPrompt":[{"role":"system","content":"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code."},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  For any type `α` and relation `r` on `α`, if `c` is a chain (a subset of `α` where every two elements are related or equal), then there exists a maximal chain `M` that contains `c`.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} {r : α → α → Prop} {c : Set α}, IsChain r c → ∃ M, IsMaxChain r M ∧ c ⊆ M"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  If every chain in a partially ordered set has an upper bound, then the set has a maximal element.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} [inst : PartialOrder α] (s : Set α),   (∀ c ⊆ s, IsChain (fun x x_1 => x ≤ x_1) c → ∀ y ∈ c, ∃ ub ∈ s, ∀ z ∈ c, z ≤ ub) →     ∀ x ∈ s, ∃ m ∈ s, x ≤ m ∧ ∀ z ∈ s, m ≤ z → z = m"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  If every chain in a partially ordered set has an upper bound and the relation is transitive, then the set has a maximal element.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} {r : α → α → Prop},\n  (∀ (c : Set α), IsChain r c → ∃ ub, ∀ a ∈ c, r a ub) →\n    (∀ {a b c : α}, r a b → r b c → r a c) → ∃ m, ∀ (a : α), r m a → r a m"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  If every non-empty chain in a partially ordered set has an upper bound, then the set has a greatest element.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} [inst : PartialOrder α] [inst_1 : Nonempty α],   (∀ (c : Set α), IsChain (fun x x_1 => x ≤ x_1) c → Set.Nonempty c → BddAbove c) → ∃ m, ∀ (a : α), m ≤ a → a = m"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  If every chain in a nonempty type, equipped with a transitive relation having an upper bound for each nonempty chain, has a greatest element.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} {r : α → α → Prop} [inst : Nonempty α],\n  (∀ (c : Set α), IsChain r c → c.Nonempty → ∃ ub, ∀ a ∈ c, r a ub) →\n    (∀ {a b c : α}, r a b → r b c → r a c) → ∃ m, ∀ (a : α), r m a → r a m"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A variant of Zorn's lemma. If every nonempty chain of a nonempty type has an upper bound, then\nthere is a maximal element.\n\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} {r : α → α → Prop} [inst : Nonempty α],   (∀ (c : Set α), IsChain r c → Set.Nonempty c → ∃ ub, ∀ a ∈ c, r a ub) →     (∀ {a b c : α}, r a b → r b c → r a c) → ∃ m, ∀ (a : α), r m a → r a m"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for any type `α` and for any relation `r` on `α`, given a chain `c` (a set of elements of `α` where for any two elements `x` and `y` in `c`, either `x` is related to `y`, `y` is related to `x`, or they are equal), there exists a maximal chain `M` (a chain that can't be strictly included in any other chain) such that `c` is a subset of `M`. This is a generalization of Hausdorff's maximality principle.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} {r : α → α → Prop} {c : Set α}, IsChain r c → ∃ M, IsMaxChain r M ∧ c ⊆ M"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for any type `α` and predicate `P` on set of elements of that type, if there exists an absolute upper bound on the size of a set satisfying the predicate `P`, then the maximal subset property always holds for any set `X`. In terms of matroids, if the size of the set satisfying a condition `P` is bounded, every subset of a given set `X` satisfying `P` is contained in a maximal subset of `X` satisfying `P`.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} {P : Set α → Prop},\n  (∃ n, ∀ (Y : Set α), P Y → Y.encard ≤ ↑n) → ∀ (X : Set α), Matroid.ExistsMaximalSubsetProperty P X"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem is a variant of Zorn's lemma. It states that for any nonempty type `α` with a relation `r`, if every nonempty chain of elements in `α` under this relation has an upper bound, and the relation `r` is transitive, then there exists a maximal element `m` in `α` under relation `r`. Here, an element `m` is considered maximal if for any element `a` in `α`, if `r m a` holds then `r a m` also holds. In other words, `m` is equal to or greater than every other element under the relation `r`.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} {r : α → α → Prop} [inst : Nonempty α],\n  (∀ (c : Set α), IsChain r c → c.Nonempty → ∃ ub, ∀ a ∈ c, r a ub) →\n    (∀ {a b c : α}, r a b → r b c → r a c) → ∃ m, ∀ (a : α), r m a → r a m"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: **Zorn's Lemma:** In the context of a partially ordered set (also known as poset), which also has a greatest element denoted by `⊤`, the poset is said to be coatomic if for every nonempty chain `c` that does not include `⊤`, there exists an upper bound within the set of upper bounds of `c` that is not equal to `⊤`. A chain is a subset of the poset where for any two elements, one must be less than or equal to the other. An upper bound of a set is an element that is greater than or equal to every element in the set.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} [inst : PartialOrder α] [inst_1 : OrderTop α],\n  (∀ (c : Set α), IsChain (fun x x_1 => x ≤ x_1) c → c.Nonempty → ⊤ ∉ c → ∃ x, x ≠ ⊤ ∧ x ∈ upperBounds c) → IsCoatomic α"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  If every chain in a nonempty type, equipped with a transitive relation having an upper bound for each nonempty chain, has a greatest element.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} {r : α → α → Prop} [inst : Nonempty α],\n  (∀ (c : Set α), IsChain r c → c.Nonempty → ∃ ub, ∀ a ∈ c, r a ub) →\n    (∀ {a b c : α}, r a b → r b c → r a c) → ∃ m, ∀ (a : α), r m a → r a m"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  If every non-empty chain in a partially ordered set has an upper bound, then the set has a greatest element.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} [inst : PartialOrder α] [inst_1 : Nonempty α],\n  (∀ (c : Set α), IsChain (fun x x_1 => x ≤ x_1) c → c.Nonempty → BddAbove c) → ∃ m, ∀ (a : α), m ≤ a → a = m"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  If every chain in a partially ordered set has an upper bound and the relation is transitive, then the set has a maximal element.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} {r : α → α → Prop},\n  (∀ (c : Set α), IsChain r c → ∃ ub, ∀ a ∈ c, r a ub) →\n    (∀ {a b c : α}, r a b → r b c → r a c) → ∃ m, ∀ (a : α), r m a → r a m"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  If every chain in a partially ordered set has an upper bound, then the set has a maximal element.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} [inst : PartialOrder α] (s : Set α),\n  (∀ c ⊆ s, IsChain (fun x x_1 => x ≤ x_1) c → ∀ y ∈ c, ∃ ub ∈ s, ∀ z ∈ c, z ≤ ub) →\n    ∀ x ∈ s, ∃ m ∈ s, x ≤ m ∧ ∀ z ∈ s, m ≤ z → z = m"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: The maximal element of every nonempty chain of `extension_of i f`. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"{R : Type u} →\n  [inst : Ring R] →\n    {Q : TypeMax} →\n      [inst_1 : AddCommGroup Q] →\n        [inst_2 : Module R Q] →\n          {M N : Type (max u v)} →\n            [inst_3 : AddCommGroup M] →\n              [inst_4 : AddCommGroup N] →\n                [inst_5 : Module R M] →\n                  [inst_6 : Module R N] →\n                    {i : M →ₗ[R] N} →\n                      {f : M →ₗ[R] Q} →\n                        {c : Set (Module.Baer.ExtensionOf i f)} →\n                          IsChain (fun x x_1 => x ≤ x_1) c → Set.Nonempty c → Module.Baer.ExtensionOf i f"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Any upper bound is more than the set supremum. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} [self : CompleteBooleanAlgebra α] (s : Set α) (a : α), (∀ b ∈ s, b ≤ a) → sSup s ≤ a"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: If there is an absolute upper bound on the size of a set satisfying `P`, then the\nmaximal subset property always holds. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} {P : Set α → Prop},\n  (∃ n, ∀ (Y : Set α), P Y → Set.encard Y ≤ ↑n) → ∀ (X : Set α), Matroid.ExistsMaximalSubsetProperty P X"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: Since every nonempty chain has a maximal element, by Zorn's lemma, there is a maximal\n`extension_of i f`. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"{R : Type u} →\n  [inst : Ring R] →\n    {Q : TypeMax} →\n      [inst_1 : AddCommGroup Q] →\n        [inst_2 : Module R Q] →\n          {M N : Type (max u v)} →\n            [inst_3 : AddCommGroup M] →\n              [inst_4 : AddCommGroup N] →\n                [inst_5 : Module R M] →\n                  [inst_6 : Module R N] →\n                    (i : M →ₗ[R] N) →\n                      (f : M →ₗ[R] Q) → [inst_7 : Fact (Function.Injective ⇑i)] → Module.Baer.ExtensionOf i f"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Any chain in the set of non-principal ideals has an upper bound which is non-principal.\n(Namely, the union of the chain is such an upper bound.)\n\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u} [inst : CommRing R],\n  ∀ c ⊆ nonPrincipals R,\n    IsChain (fun x x_1 => x ≤ x_1) c → ∀ {K : Ideal R}, K ∈ c → ∃ I ∈ nonPrincipals R, ∀ J ∈ c, J ≤ I"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Every chain is contained in a maximal chain. This generalizes Hausdorff's maximality principle.\n\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} {r : α → α → Prop} {c : Set α}, IsChain r c → ∃ M, IsMaxChain r M ∧ c ⊆ M"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: **Zorn's lemma**\n\nIf every chain has an upper bound, then there exists a maximal element. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} {r : α → α → Prop},\n  (∀ (c : Set α), IsChain r c → ∃ ub, ∀ a ∈ c, r a ub) →\n    (∀ {a b c : α}, r a b → r b c → r a c) → ∃ m, ∀ (a : α), r m a → r a m"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A variant of Zorn's lemma. If every nonempty chain of a nonempty type has an upper bound, then\nthere is a maximal element.\n\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} {r : α → α → Prop} [inst : Nonempty α],\n  (∀ (c : Set α), IsChain r c → Set.Nonempty c → ∃ ub, ∀ a ∈ c, r a ub) →\n    (∀ {a b c : α}, r a b → r b c → r a c) → ∃ m, ∀ (a : α), r m a → r a m"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Every non-empty poset in which every chain has an upper bound contains a maximal element.\n\nGive ONLY the Lean code"}]}
{"text":"A group whose automorphism group is cyclic is Abelian.","fullPrompt":[{"role":"system","content":"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code."},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  If a finite group of order `n` has an element of order `n`, then the group is cyclic.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u} [inst : Group α] [inst_1 : Fintype α] (x : α), orderOf x = Fintype.card α → IsCyclic α"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: Cyclotomic extensions are abelian. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"{n : ℕ+} →   (K : Type u_1) →     [inst : Field K] →       {L : Type u_2} →         [inst_1 : CommRing L] →           [inst_2 : IsDomain L] →             [inst_3 : Algebra K L] → [inst_4 : IsCyclotomicExtension {n} K L] → CommGroup (L ≃ₐ[K] L)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that every subgroup of integers (`ℤ`) is cyclic. More specifically, it asserts that for every subgroup `H` of the integers, there exists an integer `a` such that `H` is the subgroup generated by `{a}`. This means that every element of `H` can be written as a sum or difference of copies of `a`, which is the formal definition of a cyclic group in group theory.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (H : AddSubgroup ℤ), ∃ a, H = AddSubgroup.closure {a}"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for any category `C` that is also a groupoid, any subgroupoid `S` of `C`, and any arrows `f` from `c` to `d` in `C`, if `f` is an element of the arrows of `S` from `c` to `d`, then `c` is an element of the set of objects in `S` that have nontrivial isotropy. Here, isotropy refers to the symmetry of an object - in this case, the object `c` has nontrivial isotropy if there is at least one arrow (or morphism) in `S` that begins and ends at `c`.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {C : Type u} [inst : CategoryTheory.Groupoid C] (S : CategoryTheory.Subgroupoid C) {c d : C} {f : c ⟶ d},\n  f ∈ S.arrows c d → c ∈ S.objs"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for any given additive group `G` and an element `g` in `G`, `g` is an element of the subgroup generated by `g` itself. In other words, every element in an additive group is in the additive subgroup generated by itself. This is a fundamental property of groups in mathematics: any element of a group forms a cyclic subgroup with itself.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : AddGroup G] (g : G), g ∈ AddSubgroup.zmultiples g"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  Given an additive subgroup of an Archimedean linear ordered additive commutative group that is disjoint with the open interval from 0 to a positive number, the subgroup is cyclic.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : LinearOrderedAddCommGroup G] [inst_1 : Archimedean G] {H : AddSubgroup G} {a : G},\n  0 < a → Disjoint (↑H) (Set.Ioo 0 a) → ∃ b, H = AddSubgroup.closure {b}"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  A finite additive group of prime order is cyclic.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u} [inst : AddGroup α] [inst_1 : Fintype α] {p : ℕ} [hp : Fact p.Prime], Fintype.card α = p → IsAddCyclic α"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  A finite group of prime order is cyclic.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u} [inst : Group α] [inst_1 : Fintype α] {p : ℕ} [hp : Fact p.Prime], Fintype.card α = p → IsCyclic α"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  Every finitely generated abelian group is isomorphic to the direct product of a free abelian group and a finite direct sum of cyclic groups of prime power order.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (G : Type u) [inst : AddCommGroup G] [hG : AddGroup.FG G],\n  ∃ n ι x p, ∃ (_ : ∀ (i : ι), (p i).Prime), ∃ e, Nonempty (G ≃+ (Fin n →₀ ℤ) × DirectSum ι fun i => ZMod (p i ^ e i))"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A finite group of prime order is cyclic.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u} [inst : AddGroup α] [inst_1 : Fintype α] {p : ℕ} [hp : Fact (Nat.Prime p)],\n  Fintype.card α = p → IsAddCyclic α"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: The group of multiplicative automorphisms. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"(M : Type u_4) → [inst : Mul M] → Type u_4"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: A group is commutative if the quotient by the center is cyclic. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"{G : Type u_1} →\n  {H : Type u_2} →\n    [inst : Group G] →\n      [inst_1 : Group H] → [inst_2 : IsCyclic H] → (f : G →* H) → MonoidHom.ker f ≤ Subgroup.center G → CommGroup G"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A finite subgroup of the unit group of an integral domain is cyclic. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u_1} {G : Type u_2} [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : Group G] [inst_3 : Finite G]\n  (f : G →* R), Function.Injective ⇑f → IsCyclic G"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: The group of ring automorphisms. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"(R : Type u_1) → [inst : Mul R] → [inst : Add R] → Type u_1"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A finite group of prime order is cyclic. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u} [inst : Group α] [inst_1 : Fintype α] {p : ℕ} [hp : Fact (Nat.Prime p)], Fintype.card α = p → IsCyclic α"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: An Abelian group is equivalent to its own abelianization. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"{H : Type u_1} → [inst : CommGroup H] → H ≃* Abelianization H"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: The category of abelian groups is abelian. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"CategoryTheory.Abelian AddCommGroupCat"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A group whose automorphism group is cyclic is Abelian.\n\nGive ONLY the Lean code"}]}
{"text":"A uniformly continuous function of a uniformly continuous function is uniformly continuous.","fullPrompt":[{"role":"system","content":"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code."},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  If `f` is a continuous function from the compact uniform space `α` to the uniform space `β`, then `f` is uniformly continuous.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} {β : Type u_2} [inst : UniformSpace α] [inst_1 : UniformSpace β] [inst_2 : CompactSpace α] {f : α → β},\n  Continuous f → UniformContinuous f"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  If a Lipschitz continuous function with a constant C composes with a bounded continuous function, the result is a uniformly continuous function.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u} {β : Type v} {γ : Type w} [inst : TopologicalSpace α] [inst_1 : PseudoMetricSpace β]\n  [inst_2 : PseudoMetricSpace γ] {G : β → γ} {C : NNReal} (H : LipschitzWith C G),\n  UniformContinuous (BoundedContinuousFunction.comp G H)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  If a function from a topological space into a uniform space can be uniformly approximated by continuous functions, then it is continuous.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u} {β : Type v} [inst : UniformSpace β] {f : α → β} [inst_1 : TopologicalSpace α],\n  (∀ u ∈ uniformity β, ∃ F, Continuous F ∧ ∀ (y : α), (f y, F y) ∈ u) → Continuous f"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  If `f : γ → β` is uniformly continuous and `g : α → γ` is such that `f ∘ g` is uniformly continuous, then `g` is uniformly continuous.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type ua} {β : Type ub} {γ : Type uc} {f : γ → β} {g : α → γ} [v : UniformSpace β] [u : UniformSpace α],   UniformContinuous (f ∘ g) → UniformContinuous g"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  If `F` is a uniformly equicontinuous family of functions from the uniform space `β` to the uniform space `α`, then each function `F i` in `F` is uniformly continuous.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {ι : Type u_1} {α : Type u_7} {β : Type u_9} [uα : UniformSpace α] [uβ : UniformSpace β] {F : ι → β → α},\n  UniformEquicontinuous F → ∀ (i : ι), UniformContinuous (F i)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  If functions `f : α → β` and `g : β → γ` are uniformly continuous, then their composition `g ∘ f : α → γ` is also uniformly continuous.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type ua} {β : Type ub} {γ : Type uc} [inst : UniformSpace α] [inst_1 : UniformSpace β] [inst_2 : UniformSpace γ]   {g : β → γ} {f : α → β}, UniformContinuous g → UniformContinuous f → UniformContinuous (g ∘ f)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The theorem `continuous_of_uniform_approx_of_continuous` states that if we have a function `f` from a topological space `α` into a uniform space `β`, and for every set `u` in the uniformity of `β` we can find a continuous function `F` such that every output pair `(f y, F y)` for all `y` in `α` is in `u`, then `f` itself is continuous. In simpler terms, if a function can be approximated uniformly by continuous functions, then the function itself is continuous.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u} {β : Type v} [inst : UniformSpace β] {f : α → β} [inst_1 : TopologicalSpace α],\n  (∀ u ∈ uniformity β, ∃ F, Continuous F ∧ ∀ (y : α), (f y, F y) ∈ u) → Continuous f"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The theorem `uniformContinuousOn_univ` states that for any two types `α` and `β` equipped with uniform spaces, and any function `f` from `α` to `β`, the function `f` is uniformly continuous on the universal set of `α` (i.e., the set containing all elements of `α`) if and only if `f` is uniformly continuous. In other words, a function is uniformly continuous in general if it is uniformly continuous when considering all possible inputs.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type ua} {β : Type ub} [inst : UniformSpace α] [inst_1 : UniformSpace β] {f : α → β},\n  UniformContinuousOn f Set.univ ↔ UniformContinuous f"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that every function within a uniformly equicontinuous family of functions is uniformly continuous. In other words, given a uniformly equicontinuous family `F` of functions from a uniform space `β` to another uniform space `α`, each individual function `F i` (for any `i` in the indexing set `ι`) is uniformly continuous. This implies that if points in `β` are sufficiently close to each other, their images under any function from the family will also be close to each other, regardless of where the points are located in `β`.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {ι : Type u_1} {α : Type u_7} {β : Type u_9} [uα : UniformSpace α] [uβ : UniformSpace β] {F : ι → β → α},\n  UniformEquicontinuous F → ∀ (i : ι), UniformContinuous (F i)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  The completion of a continuous function between uniform spaces is a continuous function.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} [inst : UniformSpace α] {β : Type u_2} [inst_1 : UniformSpace β] {f : α → β},\n  Continuous (UniformSpace.Completion.map f)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  If a function between uniform spaces is uniformly continuous, then it is continuous.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type ua} {β : Type ub} [inst : UniformSpace α] [inst_1 : UniformSpace β] {f : α → β},\n  UniformContinuous f → Continuous f"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  A constant function between two uniform spaces is uniformly continuous.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type ua} {β : Type ub} [inst : UniformSpace α] [inst_1 : UniformSpace β] {c : α → β},\n  (∀ (a b : α), c a = c b) → UniformContinuous c"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  A continuous function on a compact uniform space is uniformly continuous.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} {β : Type u_2} [inst : UniformSpace α] [inst_1 : UniformSpace β] {s : Set α} {f : α → β},\n  IsCompact s → ContinuousOn f s → UniformContinuousOn f s"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Uniform continuity of the function \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_4} {β : Type u_5} [inst : UniformSpace α] [inst_1 : UniformSpace β] (self : α ≃ᵤ β),\n  UniformContinuous self.toFun"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A constant function is uniformly integrable. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} {β : Type u_2} {ι : Type u_3} {m : MeasurableSpace α} (μ : MeasureTheory.Measure α)\n  [inst : NormedAddCommGroup β] {p : ENNReal} {g : α → β},\n  1 ≤ p → p ≠ ⊤ → MeasureTheory.Memℒp g p → MeasureTheory.UnifIntegrable (fun x => g) p μ"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: A family of continuous functions yields a continuous family of functions. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"{β : Type v} →\n  {γ : Type u_3} →\n    [inst : OmegaCompletePartialOrder β] →\n      [inst_1 : OmegaCompletePartialOrder γ] → {α : Type u_5} → (α → β →𝒄 γ) → β →𝒄 α → γ"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A function which can be locally uniformly approximated by continuous functions is continuous. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u} {β : Type v} [inst : UniformSpace β] {f : α → β} [inst_1 : TopologicalSpace α],\n  (∀ (x : α), ∀ u ∈ uniformity β, ∃ t ∈ nhds x, ∃ F, ContinuousAt F x ∧ ∀ y ∈ t, (f y, F y) ∈ u) → Continuous f"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A locally uniform limit of continuous functions is continuous. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {p : Filter ι}\n  [inst_1 : TopologicalSpace α],\n  TendstoLocallyUniformly F f p → (∀ᶠ (n : ι) in p, Continuous (F n)) → ∀ [inst_2 : Filter.NeBot p], Continuous f"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A function which can be uniformly approximated by continuous functions is continuous. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u} {β : Type v} [inst : UniformSpace β] {f : α → β} [inst_1 : TopologicalSpace α],\n  (∀ u ∈ uniformity β, ∃ F, Continuous F ∧ ∀ (y : α), (f y, F y) ∈ u) → Continuous f"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Each function of a uniformly equicontinuous family is uniformly continuous. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {ι : Type u_1} {α : Type u_6} {β : Type u_7} [inst : UniformSpace α] [inst_1 : UniformSpace β] {F : ι → β → α},\n  UniformEquicontinuous F → ∀ (i : ι), UniformContinuous (F i)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A uniform limit of continuous functions is continuous. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {p : Filter ι}\n  [inst_1 : TopologicalSpace α],\n  TendstoUniformly F f p → (∀ᶠ (n : ι) in p, Continuous (F n)) → ∀ [inst_2 : Filter.NeBot p], Continuous f"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A uniformly continuous function of a uniformly continuous function is uniformly continuous.\n\nGive ONLY the Lean code"}]}
{"text":"A uniformly continuous function of a uniformly continuous function is uniformly continuous.","fullPrompt":[{"role":"system","content":"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code."},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  If `f` is a continuous function from the compact uniform space `α` to the uniform space `β`, then `f` is uniformly continuous.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} {β : Type u_2} [inst : UniformSpace α] [inst_1 : UniformSpace β] [inst_2 : CompactSpace α] {f : α → β},\n  Continuous f → UniformContinuous f"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  If a Lipschitz continuous function with a constant C composes with a bounded continuous function, the result is a uniformly continuous function.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u} {β : Type v} {γ : Type w} [inst : TopologicalSpace α] [inst_1 : PseudoMetricSpace β]\n  [inst_2 : PseudoMetricSpace γ] {G : β → γ} {C : NNReal} (H : LipschitzWith C G),\n  UniformContinuous (BoundedContinuousFunction.comp G H)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  If a function from a topological space into a uniform space can be uniformly approximated by continuous functions, then it is continuous.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u} {β : Type v} [inst : UniformSpace β] {f : α → β} [inst_1 : TopologicalSpace α],\n  (∀ u ∈ uniformity β, ∃ F, Continuous F ∧ ∀ (y : α), (f y, F y) ∈ u) → Continuous f"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  If `f : γ → β` is uniformly continuous and `g : α → γ` is such that `f ∘ g` is uniformly continuous, then `g` is uniformly continuous.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type ua} {β : Type ub} {γ : Type uc} {f : γ → β} {g : α → γ} [v : UniformSpace β] [u : UniformSpace α],   UniformContinuous (f ∘ g) → UniformContinuous g"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  If `F` is a uniformly equicontinuous family of functions from the uniform space `β` to the uniform space `α`, then each function `F i` in `F` is uniformly continuous.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {ι : Type u_1} {α : Type u_7} {β : Type u_9} [uα : UniformSpace α] [uβ : UniformSpace β] {F : ι → β → α},\n  UniformEquicontinuous F → ∀ (i : ι), UniformContinuous (F i)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  If functions `f : α → β` and `g : β → γ` are uniformly continuous, then their composition `g ∘ f : α → γ` is also uniformly continuous.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type ua} {β : Type ub} {γ : Type uc} [inst : UniformSpace α] [inst_1 : UniformSpace β] [inst_2 : UniformSpace γ]   {g : β → γ} {f : α → β}, UniformContinuous g → UniformContinuous f → UniformContinuous (g ∘ f)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The theorem `continuous_of_uniform_approx_of_continuous` states that if we have a function `f` from a topological space `α` into a uniform space `β`, and for every set `u` in the uniformity of `β` we can find a continuous function `F` such that every output pair `(f y, F y)` for all `y` in `α` is in `u`, then `f` itself is continuous. In simpler terms, if a function can be approximated uniformly by continuous functions, then the function itself is continuous.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u} {β : Type v} [inst : UniformSpace β] {f : α → β} [inst_1 : TopologicalSpace α],\n  (∀ u ∈ uniformity β, ∃ F, Continuous F ∧ ∀ (y : α), (f y, F y) ∈ u) → Continuous f"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The theorem `uniformContinuousOn_univ` states that for any two types `α` and `β` equipped with uniform spaces, and any function `f` from `α` to `β`, the function `f` is uniformly continuous on the universal set of `α` (i.e., the set containing all elements of `α`) if and only if `f` is uniformly continuous. In other words, a function is uniformly continuous in general if it is uniformly continuous when considering all possible inputs.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type ua} {β : Type ub} [inst : UniformSpace α] [inst_1 : UniformSpace β] {f : α → β},\n  UniformContinuousOn f Set.univ ↔ UniformContinuous f"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that every function within a uniformly equicontinuous family of functions is uniformly continuous. In other words, given a uniformly equicontinuous family `F` of functions from a uniform space `β` to another uniform space `α`, each individual function `F i` (for any `i` in the indexing set `ι`) is uniformly continuous. This implies that if points in `β` are sufficiently close to each other, their images under any function from the family will also be close to each other, regardless of where the points are located in `β`.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {ι : Type u_1} {α : Type u_7} {β : Type u_9} [uα : UniformSpace α] [uβ : UniformSpace β] {F : ι → β → α},\n  UniformEquicontinuous F → ∀ (i : ι), UniformContinuous (F i)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  The completion of a continuous function between uniform spaces is a continuous function.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} [inst : UniformSpace α] {β : Type u_2} [inst_1 : UniformSpace β] {f : α → β},\n  Continuous (UniformSpace.Completion.map f)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  If a function between uniform spaces is uniformly continuous, then it is continuous.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type ua} {β : Type ub} [inst : UniformSpace α] [inst_1 : UniformSpace β] {f : α → β},\n  UniformContinuous f → Continuous f"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  A constant function between two uniform spaces is uniformly continuous.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type ua} {β : Type ub} [inst : UniformSpace α] [inst_1 : UniformSpace β] {c : α → β},\n  (∀ (a b : α), c a = c b) → UniformContinuous c"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  A continuous function on a compact uniform space is uniformly continuous.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} {β : Type u_2} [inst : UniformSpace α] [inst_1 : UniformSpace β] {s : Set α} {f : α → β},\n  IsCompact s → ContinuousOn f s → UniformContinuousOn f s"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Uniform continuity of the function \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_4} {β : Type u_5} [inst : UniformSpace α] [inst_1 : UniformSpace β] (self : α ≃ᵤ β),\n  UniformContinuous self.toFun"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A constant function is uniformly integrable. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} {β : Type u_2} {ι : Type u_3} {m : MeasurableSpace α} (μ : MeasureTheory.Measure α)\n  [inst : NormedAddCommGroup β] {p : ENNReal} {g : α → β},\n  1 ≤ p → p ≠ ⊤ → MeasureTheory.Memℒp g p → MeasureTheory.UnifIntegrable (fun x => g) p μ"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: A family of continuous functions yields a continuous family of functions. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"{β : Type v} →\n  {γ : Type u_3} →\n    [inst : OmegaCompletePartialOrder β] →\n      [inst_1 : OmegaCompletePartialOrder γ] → {α : Type u_5} → (α → β →𝒄 γ) → β →𝒄 α → γ"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A function which can be locally uniformly approximated by continuous functions is continuous. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u} {β : Type v} [inst : UniformSpace β] {f : α → β} [inst_1 : TopologicalSpace α],\n  (∀ (x : α), ∀ u ∈ uniformity β, ∃ t ∈ nhds x, ∃ F, ContinuousAt F x ∧ ∀ y ∈ t, (f y, F y) ∈ u) → Continuous f"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A locally uniform limit of continuous functions is continuous. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {p : Filter ι}\n  [inst_1 : TopologicalSpace α],\n  TendstoLocallyUniformly F f p → (∀ᶠ (n : ι) in p, Continuous (F n)) → ∀ [inst_2 : Filter.NeBot p], Continuous f"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A function which can be uniformly approximated by continuous functions is continuous. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u} {β : Type v} [inst : UniformSpace β] {f : α → β} [inst_1 : TopologicalSpace α],\n  (∀ u ∈ uniformity β, ∃ F, Continuous F ∧ ∀ (y : α), (f y, F y) ∈ u) → Continuous f"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Each function of a uniformly equicontinuous family is uniformly continuous. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {ι : Type u_1} {α : Type u_6} {β : Type u_7} [inst : UniformSpace α] [inst_1 : UniformSpace β] {F : ι → β → α},\n  UniformEquicontinuous F → ∀ (i : ι), UniformContinuous (F i)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A uniform limit of continuous functions is continuous. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {p : Filter ι}\n  [inst_1 : TopologicalSpace α],\n  TendstoUniformly F f p → (∀ᶠ (n : ι) in p, Continuous (F n)) → ∀ [inst_2 : Filter.NeBot p], Continuous f"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A uniformly continuous function of a uniformly continuous function is uniformly continuous.\n\nGive ONLY the Lean code"}]}
{"text":"A topological space is normal if and only if any two disjoint closed subsets can be separated by a continuous function.","fullPrompt":[{"role":"system","content":"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code."},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  In a normal topological space, for any two disjoint closed sets, there exist disjoint open neighborhoods.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X : Type u} [inst : TopologicalSpace X] [self : NormalSpace X] (s t : Set X),   IsClosed s → IsClosed t → Disjoint s t → SeparatedNhds s t"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that in a separable topological space, if there exists a family of nonempty open sets indexed by a set, and these open sets are pairwise disjoint, then the indexing set is countable. In other words, in a separable space, we can only have a countable number of nonempty open sets that do not intersect each other.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u} [t : TopologicalSpace α] [inst : TopologicalSpace.SeparableSpace α] {ι : Type u_2} {s : ι → Set α}\n  {a : Set ι}, a.PairwiseDisjoint s → (∀ i ∈ a, IsOpen (s i)) → (∀ i ∈ a, (s i).Nonempty) → a.Countable"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The theorem `NormalSpace.normal` states that in a normal topological space, given any two disjoint closed sets, there exist two neighbourhoods of these sets that are also disjoint. In other words, for any topological space that satisfies the condition of being a normal space, and for any two closed sets in this space that do not share any common elements, it is always possible to find two open sets (neighbourhoods), each containing one of the closed sets, which also do not have any common elements. This theorem is a key property of normal spaces in topology.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X : Type u} [inst : TopologicalSpace X] [self : NormalSpace X] (s t : Set X),\n  IsClosed s → IsClosed t → Disjoint s t → SeparatedNhds s t"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  A function between two topological spaces is continuous if and only if it maps every open set to an open set.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] {f : X → Y},\n  Continuous f ↔ ∀ (x : X), ContinuousAt f x"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  In a normal topological space, for every pair of disjoint closed sets, there exists a continuous function mapping all its points to the real numbers between 0 and 1, with values 0 on the first set and 1 on the second set.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : NormalSpace X] {s t : Set X},\n  IsClosed s → IsClosed t → Disjoint s t → ∃ f, Set.EqOn (⇑f) 0 s ∧ Set.EqOn (⇑f) 1 t ∧ ∀ (x : X), f x ∈ Set.Icc 0 1"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  A topological space is discrete if and only if every subset is open.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X : Type u_2} [inst : TopologicalSpace X], (∀ (s : Set X), IsOpen s) ↔ DiscreteTopology X"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  In a normal topological space, for any two disjoint closed sets, there exist disjoint open neighborhoods.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X : Type u} [inst : TopologicalSpace X] [self : NormalSpace X] (s t : Set X),\n  IsClosed s → IsClosed t → Disjoint s t → SeparatedNhds s t"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: In any topological space, the open sets with with discrete complement form a filter. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"(X : Type u_3) → [inst : TopologicalSpace X] → Filter X"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A function between topological spaces is spectral if it is continuous and the preimage of\nevery compact open set is compact open. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_2} {β : Type u_3} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] {f : α → β},\n  IsSpectralMap f → ∀ ⦃s : Set β⦄, IsOpen s → IsCompact s → IsCompact (f ⁻¹' s)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Two disjoint sets in a normal space admit disjoint neighbourhoods. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X : Type u} [inst : TopologicalSpace X] [self : NormalSpace X] (s t : Set X),\n  IsClosed s → IsClosed t → Disjoint s t → SeparatedNhds s t"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: A function between topological spaces is continuous on a subset `s`\nwhen it's continuous at every point of `s` within `s`. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"{α : Type u_1} → {β : Type u_2} → [inst : TopologicalSpace α] → [inst : TopologicalSpace β] → (α → β) → Set α → Prop"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: A function between topological spaces is locally constant if the preimage of any set is open. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"{X : Type u_1} → {Y : Type u_2} → [inst : TopologicalSpace X] → (X → Y) → Prop"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Finite topological spaces are compact. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X : Type u} [inst : TopologicalSpace X] [inst_1 : Finite X], CompactSpace X"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A space with discrete topology is a locally connected space. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (α : Type u_3) [inst : TopologicalSpace α] [inst_1 : DiscreteTopology α], LocallyConnectedSpace α"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A topological space with discrete topology is separable iff it is countable. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u} [t : TopologicalSpace α] [inst : DiscreteTopology α], TopologicalSpace.SeparableSpace α ↔ Countable α"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A topological space is normal if and only if any two disjoint closed subsets can be separated by a continuous function.\n\nGive ONLY the Lean code"}]}
{"text":"If a function from the unit interval to itself has a point of period three, then it has points of all positive periods.","fullPrompt":[{"role":"system","content":"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code."},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  If two points have the same periodicity and are mapped to the same image under a function, then they are equal.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} {f : α → α} {x y : α} {m n : ℕ},\n  Function.IsPeriodicPt f m x → Function.IsPeriodicPt f n y → 0 < m → 0 < n → f x = f y → x = y"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  For any function `f` from type `α` to itself and any periodic point `x` of `f`, the minimal period of `x` is a positive integer.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} {f : α → α} {x : α}, x ∈ Function.periodicPts f → 0 < Function.minimalPeriod f x"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  For any function from a type to itself, the identity element is a periodic point with period 0.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} (f : α → α) (x : α), Function.IsPeriodicPt f 0 x"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  If `x` is a periodic point of period `n` (`n` > 0) for function `f` from type `α` to `α`, then the minimal period of `x` under `f` is also a positive integer.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} {f : α → α} {x : α} {n : ℕ}, 0 < n → Function.IsPeriodicPt f n x → 0 < Function.minimalPeriod f x"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that if a real-valued function `g` is periodic with a positive period `T`, and the integral of `g` over the interval `0` to `T` is positive, then the function that maps a real number `t` to the integral of `g` from `0` to `t` tends to positive infinity as `t` itself tends to positive infinity. It also requires that `g` is interval integrable for any interval `[t1, t2]` with respect to the Lebesgue measure.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {T : ℝ} {g : ℝ → ℝ},\n  Function.Periodic g T →\n    (∀ (t₁ t₂ : ℝ), IntervalIntegrable g MeasureTheory.volume t₁ t₂) →\n      0 < ∫ (x : ℝ) in 0 ..T, g x → 0 < T → Filter.Tendsto (fun t => ∫ (x : ℝ) in 0 ..t, g x) Filter.atTop Filter.atTop"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that if a function `f` from the reals to a normed additively commutative group `E` is periodic with a positive period `T`, then the integral of `f` over any interval of length `T` is the same, regardless of where that interval starts. More formally, for any real numbers `t` and `s`, the integral of `f` from `t` to `t + T` is equal to the integral of `f` from `s` to `s + T`.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] {f : ℝ → E} {T : ℝ},\n  Function.Periodic f T → 0 < T → ∀ (t s : ℝ), ∫ (x : ℝ) in t..t + T, f x = ∫ (x : ℝ) in s..s + T, f x"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for any domain type `α`, endomorphism `f` and point `x`, the minimal period of `x` under `f` is positive if and only if `x` is a periodic point of `f`. In other words, a point `x` in the domain of a function `f` has a nonzero minimal period under `f` if and only if there exists some positive natural number `n` such that `f` applied `n` times to `x` returns `x` (i.e., `x` is in the set of periodic points of `f`).\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} {f : α → α} {x : α}, 0 < Function.minimalPeriod f x ↔ x ∈ Function.periodicPts f"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that if a function `f` is periodic with a positive period `c`, then for every value `x` we can find a `y` in the left-closed right-open interval from 0 to `c` (denoted `Ico 0 c`), such that `f(x) = f(y)`. In other words, within every period of the function, you can find a value that the function has already taken in the first instance of that period.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} {β : Type u_2} {f : α → β} {c : α} [inst : LinearOrderedAddCommGroup α] [inst_1 : Archimedean α],\n  Function.Periodic f c → 0 < c → ∀ (x : α), ∃ y ∈ Set.Ico 0 c, f x = f y"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  Given a periodic function `f` with positive period `c`, there exists a point `y` in the interval `[a, a + c)` such that `f(x) = f(y)` for any `x`.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} {β : Type u_2} {f : α → β} {c : α} [inst : LinearOrderedAddCommGroup α] [inst_1 : Archimedean α],\n  Function.Periodic f c → 0 < c → ∀ (x a : α), ∃ y ∈ Set.Ico a (a + c), f x = f y"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  For any function `f` from type `α` to itself and any periodic point `x` of `f`, the minimal period of `x` is a positive integer.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} {f : α → α} {x : α}, x ∈ Function.periodicPts f → 0 < Function.minimalPeriod f x"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  The lower integral of a function over an additive circle is equal to the lower integral over the corresponding interval in the real numbers for any positive real period.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (T : ℝ) [hT : Fact (0 < T)] (t : ℝ) (f : AddCircle T → ENNReal),\n  ∫⁻ (a : ℝ) in Set.Ioc t (t + T), f ↑a = ∫⁻ (b : AddCircle T), f b"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  For any function from a type to itself, the identity element is a periodic point with period 0.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} (f : α → α) (x : α), Function.IsPeriodicPt f 0 x"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: The set of periodic points of a given (possibly non-minimal) period. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"{α : Type u_1} → (α → α) → ℕ → Set α"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: If a function `f` is `periodic` with positive period `c`, then for all `x` there exists some\n`y ∈ Ico a (a + c)` such that `f x = f y`. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} {β : Type u_2} {f : α → β} {c : α} [inst : LinearOrderedAddCommGroup α] [inst_1 : Archimedean α],\n  Function.Periodic f c → 0 < c → ∀ (x a : α), ∃ y ∈ Set.Ico a (a + c), f x = f y"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: If a function `f` is `periodic` with positive period `c`, then for all `x` there exists some\n`y ∈ Ico 0 c` such that `f x = f y`. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} {β : Type u_2} {f : α → β} {c : α} [inst : LinearOrderedAddCommGroup α] [inst_1 : Archimedean α],\n  Function.Periodic f c → 0 < c → ∀ (x : α), ∃ y ∈ Set.Ico 0 c, f x = f y"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Any three points in a cospherical set are affinely independent. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\n  [inst_3 : NormedAddTorsor V P] {s : Set P},\n  EuclideanGeometry.Cospherical s →\n    ∀ {p₁ p₂ p₃ : P}, p₁ ∈ s → p₂ ∈ s → p₃ ∈ s → p₁ ≠ p₂ → p₁ ≠ p₃ → p₂ ≠ p₃ → AffineIndependent ℝ ![p₁, p₂, p₃]"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: If three points lie in the affine span of two points, the first three points are collinear. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {k : Type u_1} {V : Type u_2} {P : Type u_3} [inst : DivisionRing k] [inst_1 : AddCommGroup V] [inst_2 : Module k V]\n  [inst_3 : AddTorsor V P] {p₁ p₂ p₃ p₄ p₅ : P},\n  p₁ ∈ affineSpan k {p₄, p₅} → p₂ ∈ affineSpan k {p₄, p₅} → p₃ ∈ affineSpan k {p₄, p₅} → Collinear k {p₁, p₂, p₃}"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: For the identity map, all points are periodic. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} (n : ℕ) (x : α), Function.IsPeriodicPt id n x"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A fixed point of `f` is a periodic point of `f` of any prescribed period. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} {f : α → α} {x : α}, Function.IsFixedPt f x → ∀ (n : ℕ), Function.IsPeriodicPt f n x"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Any point is a periodic point of period `0`. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} (f : α → α) (x : α), Function.IsPeriodicPt f 0 x"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: If a function from the unit interval to itself has a point of period three, then it has points of all positive periods.\n\nGive ONLY the Lean code"}]}
{"text":"A terminal object in a category is unique up to unique isomorphism.","fullPrompt":[{"role":"system","content":"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code."},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: An arbitrary choice of terminal object, if one exists.\nYou can use the notation `⊤_ C`.\nThis object is characterized by having a unique morphism from any object.\n\n\nGive ONLY the Lean code"},{"role":"assistant","content":"(C : Type u₁) → [inst : Category.{v₁, u₁} C] → [inst : Limits.HasTerminal C] → C"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: We can more explicitly show that a category has a terminal object by specifying the object,\nand showing there is a unique morphism to it from any other object. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {C : Type u₁} [inst : Category.{v₁, u₁} C] (X : C) [h : (Y : C) → Unique (Y ⟶ X)], Limits.HasTerminal C"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that in any category `C`, if there exists an object `I` such that every morphism originating from `I` is an isomorphism, then `C` possesses strict terminal objects. In other words, if every morphism from a certain object in the category has an inverse, the category has strict terminal objects, i.e., objects for which there is exactly one morphism going into it from any other object.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {C : Type u} [inst : CategoryTheory.Category.{v, u} C] (I : C),\n  (∀ (A : C) (f : I ⟶ A), CategoryTheory.IsIso f) → CategoryTheory.Limits.HasStrictTerminalObjects C"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for any type `C`, if `C` forms a category under some instance and is a PreGalois category, then it possesses a terminal object. In the context of category theory, a terminal object is an object in a category such that there exists a unique morphism from any other object in the category to it.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {C : Type u₁} [inst : CategoryTheory.Category.{u₂, u₁} C] [self : CategoryTheory.PreGaloisCategory C],\n  CategoryTheory.Limits.HasTerminal C"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that in any category 'C', for any two objects 'X' and 'Y' such that 'X' is a terminal object, any two morphisms from 'Y' to 'X' are equal. In other words, if 'X' is a terminal object in the category 'C', then there is a unique morphism from any object 'Y' in 'C' to 'X'.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] {X Y : C},\n  CategoryTheory.Limits.IsTerminal X → ∀ (f g : Y ⟶ X), f = g"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that we can more explicitly demonstrate that a category has a terminal object by specifying an object (`X`) in this category (`C`), and proving that there exists a unique morphism from any other object (`Y`) in the category to this specified object (`X`). In other words, if for every object `Y` in some category `C`, there is a unique morphism from `Y` to a particular object `X`, then `C` has a terminal object. This is a fundamental concept in category theory, where a terminal object is one that has exactly one morphism from every other object in the category.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] (X : C) [h : (Y : C) → Unique (Y ⟶ X)],\n  CategoryTheory.Limits.HasTerminal C"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  A category has a terminal object if and only if there exists an object with a unique morphism to every other object.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] (X : C) [h : (Y : C) → Unique (Y ⟶ X)],\n  CategoryTheory.Limits.HasTerminal C"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  In a category with a terminal object, a subterminal object is isomorphic to the kernel of the unique morphism to the terminal object, which is a monomorphism.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] {A : C} [inst_1 : CategoryTheory.Limits.HasTerminal C],\n  CategoryTheory.IsSubterminal A → CategoryTheory.Mono (CategoryTheory.Limits.terminal.from A)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  In any category, a terminal object has unique morphisms from any object.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] {X Y : C},\n  CategoryTheory.Limits.IsTerminal X → ∀ (f g : Y ⟶ X), f = g"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  In any category, a terminal object is the unique object mapping to every other object via monomorphisms.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] {X Y : C},\n  CategoryTheory.Limits.IsTerminal X → ∀ (f : X ⟶ Y), CategoryTheory.Mono f"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: An object `Y` is terminal if for every `X` there is a unique morphism `X ⟶ Y`\n(as an instance). \n\nGive ONLY the Lean code"},{"role":"assistant","content":"{C : Type u₁} →\n  [inst : CategoryTheory.Category.{v₁, u₁} C] →\n    (Y : C) → [h : (X : C) → Unique (X ⟶ Y)] → CategoryTheory.Limits.IsTerminal Y"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: A terminal object is terminal. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"{C : Type u₁} →\n  [inst : CategoryTheory.Category.{v₁, u₁} C] →\n    [inst_1 : CategoryTheory.Limits.HasTerminal C] → CategoryTheory.Limits.IsTerminal (⊤_ C)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: If a cartesian closed category has an initial object which is isomorphic to the terminal object,\nthen each homset has exactly one element.\n\n\nGive ONLY the Lean code"},{"role":"assistant","content":"{C : Type u} →\n  [inst : CategoryTheory.Category.{v, u} C] →\n    [inst_1 : CategoryTheory.Limits.HasFiniteProducts C] →\n      [inst_2 : CategoryTheory.CartesianClosed C] →\n        [inst_3 : CategoryTheory.Limits.HasInitial C] → (⊥_ C ≅ ⊤_ C) → (X Y : C) → Unique (X ⟶ Y)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: An object `Y` is terminal iff for every `X` there is a unique morphism `X ⟶ Y`. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"{C : Type u₁} →\n  [inst : CategoryTheory.Category.{v₁, u₁} C] →\n    (F : CategoryTheory.Functor (CategoryTheory.Discrete PEmpty.{1}) C) →\n      (Y : C) →\n        CategoryTheory.Limits.IsLimit\n            { pt := Y,\n              π :=\n                CategoryTheory.NatTrans.mk fun X =>\n                  id (CategoryTheory.Discrete.casesOn X fun as => (_ : False).elim) } ≃\n          ((X : C) → Unique (X ⟶ Y))"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: The (unique) isomorphism between the chosen terminal object and the chosen zero object. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"{C : Type u} →\n  [inst : CategoryTheory.Category.{v, u} C] →\n    [inst_1 : CategoryTheory.Limits.HasZeroObject C] → [inst_2 : CategoryTheory.Limits.HasTerminal C] → 0 ≅ ⊤_ C"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: The (unique) isomorphism between any terminal object and the zero object. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"{C : Type u} →\n  [inst : CategoryTheory.Category.{v, u} C] →\n    {X Y : C} → CategoryTheory.Limits.IsZero X → CategoryTheory.Limits.IsTerminal Y → (X ≅ Y)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: We can more explicitly show that a category has a terminal object by specifying the object,\nand showing there is a unique morphism to it from any other object. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] (X : C) [h : (Y : C) → Unique (Y ⟶ X)],\n  CategoryTheory.Limits.HasTerminal C"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: The (unique) isomorphism between the chosen terminal object and any other terminal object. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"{C : Type u₁} →\n  [inst : CategoryTheory.Category.{v₁, u₁} C] →\n    [inst_1 : CategoryTheory.Limits.HasTerminal C] → {P : C} → CategoryTheory.Limits.IsTerminal P → (⊤_ C ≅ P)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A terminal object in a category is unique up to unique isomorphism.\n\nGive ONLY the Lean code"}]}
{"text":"The complement of the union of two sets is the intersection of their complements.","fullPrompt":[{"role":"system","content":"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code."},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  The complement of the union of a family of sets equals the intersection of their complements.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {β : Type u_2} {ι : Sort u_4} (s : ι → Set β), (⋃ i, s i)ᶜ = ⋂ i, (s i)ᶜ"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  The theorem asserts that for any set `s` of type `α`, the union of `s` intersected with `t` and `s` intersected with the complement of `t` equals `s`, i.e., `s ∩ t ∪ s ∩ t^c = s`.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u} (s t : Set α), s ∩ t ∪ s ∩ tᶜ = s"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  The complement of the intersection of sets `s` and `t` equals the union of their complements: `(s ∩ t)ᶜ = sᶜ ∪ tᶜ`.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u} (s t : Set α), (s ∩ t)ᶜ = sᶜ ∪ tᶜ"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  The complement of the union of two sets is equal to the intersection of their complements: $(s \\cup t)^c = s^c \\cap t^c$.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u} (s t : Set α), (s ∪ t)ᶜ = sᶜ ∩ tᶜ"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  The complement of the union of two sets is equal to the intersection of their complements: $(s \\cup t)^c = s^c \\cap t^c$.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u} (s t : Set α), (s ∪ t)ᶜ = sᶜ ∩ tᶜ"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  The complement of the intersection of sets `s` and `t` equals the union of their complements: `(s ∩ t)ᶜ = sᶜ ∪ tᶜ`.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u} (s t : Set α), (s ∩ t)ᶜ = sᶜ ∪ tᶜ"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for any two sets `s` and `t` of some type `α`, the complement of the intersection of `s` and `t` (denoted as `(s ∩ t)ᶜ`) is equal to the union of the complements of `s` and `t` (denoted as `sᶜ ∪ tᶜ`). This theorem is a formalization of one of the De Morgan's laws from set theory in Lean 4.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u} (s t : Set α), (s ∩ t)ᶜ = sᶜ ∪ tᶜ"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for any type `α` and any two indexed collections of sets `(s i j)` indexed by `ι` and `κ i` respectively, the complement of the intersection over all `i` and `j` of the sets `(s i j)` is equal to the union over all `i` and `j` of the complements of the sets `(s i j)`. In mathematical terms, this corresponds to the statement that the complement of an intersection is equal to the union of the complements, generalized to two levels of indexing.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} {ι : Sort u_4} {κ : ι → Sort u_7} (s : (i : ι) → κ i → Set α), (⋂ i, ⋂ j, s i j)ᶜ = ⋃ i, ⋃ j, (s i j)ᶜ"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem, `Set.compl_union`, states that for all types `α`, and for any two sets `s` and `t` of this type, the complement of the union of `s` and `t` is equal to the intersection of the complement of `s` and the complement of `t`. In mathematical terms, this can be written as $(s \\cup t)^c = s^c \\cap t^c$. This is a fundamental theorem in set theory that reflects the relationship between union, intersection, and complement operations in sets.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u} (s t : Set α), (s ∪ t)ᶜ = sᶜ ∩ tᶜ"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  The complement of the intersection of a family of sets indexed by an index type is equal to the union of the complements of the sets in the family. (In mathematical notation: (⋂i∈I si)c = ⋃i∈I sc, where I is an index set, si is a set for each i in I, and ^c denotes the complement of a set.)\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {β : Type u_2} {ι : Sort u_4} (s : ι → Set β), (⋂ i, s i)ᶜ = ⋃ i, (s i)ᶜ"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  The complement of the union of a set of subsets is equal to the intersection of the complements of those subsets. (De Morgan's law for sets)\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} (S : Set (Set α)), S.sUnionᶜ = (compl '' S).sInter"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  The complement of the union of two sets is equal to the intersection of their complements: $(s \\cup t)^c = s^c \\cap t^c$.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u} (s t : Set α), (s ∪ t)ᶜ = sᶜ ∩ tᶜ"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  The complement of the union of a family of sets equals the intersection of their complements.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {β : Type u_2} {ι : Sort u_4} (s : ι → Set β), (⋃ i, s i)ᶜ = ⋂ i, (s i)ᶜ"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The indicator of a disjoint union of two sets is the sum of the indicators of the sets. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} {E : Type u_2} {m0 : MeasurableSpace α} {p : ENNReal} {μ : MeasureTheory.Measure α}\n  [inst : NormedAddCommGroup E] {s t : Set α} (hs : MeasurableSet s) (ht : MeasurableSet t) (hμs : ↑↑μ s ≠ ⊤)\n  (hμt : ↑↑μ t ≠ ⊤),\n  s ∩ t = ∅ →\n    ∀ (c : E),\n      MeasureTheory.indicatorConstLp p (_ : MeasurableSet (s ∪ t)) (_ : ↑↑μ (s ∪ t) ≠ ⊤) c =\n        MeasureTheory.indicatorConstLp p hs hμs c + MeasureTheory.indicatorConstLp p ht hμt c"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The union of two bounded sets is bounded. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {𝕜 : Type u_1} {E : Type u_3} [inst : SeminormedRing 𝕜] [inst_1 : SMul 𝕜 E] [inst_2 : Zero E]\n  [inst_3 : TopologicalSpace E] {s₁ s₂ : Set E},\n  Bornology.IsVonNBounded 𝕜 s₁ → Bornology.IsVonNBounded 𝕜 s₂ → Bornology.IsVonNBounded 𝕜 (s₁ ∪ s₂)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The intersection of a compact set and a closed set is a compact set. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X : Type u} [inst : TopologicalSpace X] {s t : Set X}, IsCompact s → IsClosed t → IsCompact (s ∩ t)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: The complement of a closed set as an open set. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"{α : Type u_2} → [inst : TopologicalSpace α] → TopologicalSpace.Closeds α → TopologicalSpace.Opens α"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: The complement of a lower set as an upper set. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"{α : Type u_1} → [inst : LE α] → LowerSet α → UpperSet α"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: The complement of an open set as a closed set. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"{α : Type u_2} → [inst : TopologicalSpace α] → TopologicalSpace.Opens α → TopologicalSpace.Closeds α"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The complement of a set has the same frontier as the original set. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X : Type u} [inst : TopologicalSpace X] (s : Set X), frontier sᶜ = frontier s"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The complement of a closed set is an open set. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X : Type u} [inst : TopologicalSpace X] {s : Set X} [self : IsClosed s], IsOpen sᶜ"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The complement of the union of two sets is the intersection of their complements.\n\nGive ONLY the Lean code"}]}
{"text":"The sum of the cubes of two positive integers is never equal to the cube of a third integer.","fullPrompt":[{"role":"system","content":"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code."},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  If `p` is a prime number and `x, y` are nonzero elements of `ZMod p` such that `x^2 = -y^2`, then `p` is not congruent to 3 modulo 4.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {p : ℕ} [inst : Fact (Nat.Prime p)] {x y : ZMod p}, y ≠ 0 → x ^ 2 = -y ^ 2 → p % 4 ≠ 3"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem is a specific case of Fermat's Last Theorem for n=4 over natural numbers. It states that if `a`, `b`, and `c` are non-zero natural numbers, then the equation `a ^ 4 + b ^ 4` is not equal to `c ^ 4`, implying that there are no three natural numbers `a`, `b`, and `c` that satisfy this equation. In mathematical terms, it asserts that $a^4 + b^4 \\neq c^4$ for all non-zero natural numbers `a`, `b`, and `c`.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"FermatLastTheoremFor 4"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The theorem states that for any three non-zero integers `a`, `b`, and `c` that satisfy the equation `a ^ 4 + b ^ 4 = c ^ 2`, there exists a minimal solution involving another set of integers `a0`, `b0`, and `c0`, where `a0` is odd. A minimal solution here means that there are no other solutions with a smaller `c` (in terms of absolute value).\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {a b c : ℤ}, Fermat42 a b c → ∃ a0 b0 c0, Fermat42.Minimal a0 b0 c0 ∧ a0 % 2 = 1"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for every positive natural number `n`, the integer representation of `n` is not equal to zero. In other words, there is no positive natural number that equals zero when converted to an integer.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (n : ℕ+), ↑n ≠ 0"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The theorem states that for all natural numbers `m` and `n`, if `n` is strictly greater than the square of `m` but is also strictly less than the square of `m+1`, then there does not exist any natural number `t` such that `t` squared equals `n`. In other words, there are no perfect squares strictly between `m²` and `(m+1)²`.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {m n : ℕ}, m * m < n → n < (m + 1) * (m + 1) → ¬∃ t, t * t = n"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  For any nontrivial ring R and positive natural number n, the polynomial X^n - a is never equal to the zero polynomial.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u} [inst : Ring R] [inst_1 : Nontrivial R] {n : ℕ}, 0 < n → ∀ (a : R), Polynomial.X ^ n - Polynomial.C a ≠ 0"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  Given three non-zero integers a, b, and c satisfying a^4 +b^4 = c^2, there exist odd a' and positive c' such that a'^4 + b^4 = c'^2 and c' is smaller in absolute value than any other solution.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {a b c : ℤ}, Fermat42 a b c → ∃ a0 b0 c0, Fermat42.Minimal a0 b0 c0 ∧ a0 % 2 = 1 ∧ 0 < c0"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  For all non-zero natural numbers `a`, `b`, and `c`, `a^4 + b^4 ≠ c^4`.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"FermatLastTheoremFor 4"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  For all natural numbers `m` and `n`, if `m² < n < (m+1)²`, then `n` is not the square of any natural number.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {m n : ℕ}, m * m < n → n < (m + 1) * (m + 1) → ¬∃ t, t * t = n"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: If the angle between three points is nonzero, the first and third points are not equal. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\n  [inst_3 : NormedAddTorsor V P] [hd2 : Fact (FiniteDimensional.finrank ℝ V = 2)] [inst_4 : Module.Oriented ℝ V (Fin 2)]\n  {p₁ p₂ p₃ : P}, EuclideanGeometry.oangle p₁ p₂ p₃ ≠ 0 → p₁ ≠ p₃"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: If the angle between three points is `π / 2`, the first and third points are not equal. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\n  [inst_3 : NormedAddTorsor V P] [hd2 : Fact (FiniteDimensional.finrank ℝ V = 2)] [inst_4 : Module.Oriented ℝ V (Fin 2)]\n  {p₁ p₂ p₃ : P}, EuclideanGeometry.oangle p₁ p₂ p₃ = ↑(Real.pi / 2) → p₁ ≠ p₃"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A power of a fundamental solution is never equal to the negative of a power of this\nfundamental solution. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {d : ℤ} {a : Pell.Solution₁ d}, Pell.IsFundamental a → ∀ {n n' : ℤ}, a ^ n ≠ -a ^ n'"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The set of natural numbers that are sums of two squares is closed under multiplication. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {a b x y u v : ℕ}, a = x ^ 2 + y ^ 2 → b = u ^ 2 + v ^ 2 → ∃ r s, a * b = r ^ 2 + s ^ 2"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: If the sign of the angle between three points is positive, the first two points are not\nequal. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\n  [inst_3 : NormedAddTorsor V P] [hd2 : Fact (FiniteDimensional.finrank ℝ V = 2)] [inst_4 : Module.Oriented ℝ V (Fin 2)]\n  {p₁ p₂ p₃ : P}, Real.Angle.sign (EuclideanGeometry.oangle p₁ p₂ p₃) = 1 → p₁ ≠ p₂"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: If the sign of the angle between three points is positive, the first and third points are not\nequal. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\n  [inst_3 : NormedAddTorsor V P] [hd2 : Fact (FiniteDimensional.finrank ℝ V = 2)] [inst_4 : Module.Oriented ℝ V (Fin 2)]\n  {p₁ p₂ p₃ : P}, Real.Angle.sign (EuclideanGeometry.oangle p₁ p₂ p₃) = 1 → p₁ ≠ p₃"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: There are no perfect squares strictly between m² and (m+1)² \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {n m : ℕ}, m * m < n → n < (m + 1) * (m + 1) → ¬∃ t, t * t = n"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The sum of two squares is zero iff both elements are zero. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u} [inst : LinearOrderedSemiring α] {a b : α} [inst_1 : ExistsAddOfLE α], a * a + b * b = 0 ↔ a = 0 ∧ b = 0"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The sum of the cubes of two positive integers is never equal to the cube of a third integer.\n\nGive ONLY the Lean code"}]}
{"text":"If every element of a group `G` has order `2`, then every pair of elements of `G` commutes.","fullPrompt":[{"role":"system","content":"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code."},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  The number of commuting element pairs in the Dihedral group of order 2n for an odd natural number n is n*(n+3).\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {n : ℕ}, Odd n → Nat.card { p // Commute p.1 p.2 } = n * (n + 3)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A group of order `p ^ 2` is commutative. See also `IsPGroup.commGroupOfCardEqPrimeSq`\nfor the `CommGroup` instance. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {p : ℕ} {G : Type u_1} [inst : Group G] [inst_1 : Fintype G] [inst_2 : Fact (Nat.Prime p)],   card G = p ^ 2 → ∀ (a b : G), a * b = b * a"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The theorem `DihedralGroup.card_commute_odd` states that for any odd natural number `n`, the number of pairs of elements in the Dihedral group of order `2n` that commute (i.e., their multiplication is commutative) is equal to `n*(n+3)`. Here, an element `a` of a semiring is said to be odd if there exists an integer `k` such that `a = 2*k + 1`. Commutativity between two elements `a` and `b` means `a * b = b * a`. The Dihedral group of order `2n` is a mathematical construct used in group theory, a branch of abstract algebra.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {n : ℕ}, Odd n → Nat.card { p // Commute p.1 p.2 } = n * (n + 3)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for any group `G`, the first term in the upper central series of `G` is equal to the center of `G`. In other words, for any group, the set of elements that commute with everything in the group is the same as the first term in the upper central series of the group.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (G : Type u_1) [inst : Group G], upperCentralSeries G 1 = Subgroup.center G"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for any type `G` that is a group, given two elements `g₁` and `g₂` of `G` and two subgroups `H₁` and `H₂` of `G`, if `g₁` is in `H₁` and `g₂` is in `H₂`, then the commutator (denoted by `⁅ , ⁆`) of `g₁` and `g₂` is in the commutator subgroup of `H₁` and `H₂`. In more mathematical terms: for all groups G, all elements g₁, g₂ in G, and all subgroups H₁, H₂ of G, if g₁ is in H₁ and g₂ is in H₂, then the element resulting from the group commutator operation with g₁ and g₂ is an element of the subgroup resulting from the commutator operation with H₁ and H₂.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : Group G] {g₁ g₂ : G} {H₁ H₂ : Subgroup G}, g₁ ∈ H₁ → g₂ ∈ H₂ → ⁅g₁, g₂⁆ ∈ ⁅H₁, H₂⁆"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for any type `G` that forms a group with some operation, and for any subgroups `H₁`, `H₂`, and `H₃` of `G`, the commutator subgroup generated by `H₁` and `H₂` is a subset of `H₃` if and only if for every element `g₁` in `H₁` and every element `g₂` in `H₂`, the commutator of `g₁` and `g₂` is an element of `H₃`. The commutator of two elements in a group is defined as the product of the first element and the second, followed by the product of the inverse of the first and the inverse of the second.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : Group G] {H₁ H₂ H₃ : Subgroup G}, ⁅H₁, H₂⁆ ≤ H₃ ↔ ∀ g₁ ∈ H₁, ∀ g₂ ∈ H₂, ⁅g₁, g₂⁆ ∈ H₃"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  In a monoid, if two commuting elements of finite order exist, then their product also has finite order.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : Monoid G] {x y : G}, Commute x y → IsOfFinOrder x → IsOfFinOrder y → IsOfFinOrder (x * y)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  If `H` is a commutative subgroup of the group `G`, then the multiplication of any two elements in `H` is commutative.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : Group G] {H : Subgroup G}, H.IsCommutative → Std.Commutative fun x x_1 => x * x_1"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  In a group `G`, if `g₁` and `g₂` commute (i.e., `g₁ * g₂ = g₂ * g₁`), then their group commutator `[g₁, g₂] = g₁ * g₂ * g₁⁻¹ * g₂⁻¹` equals the identity element `1`.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : Group G] {g₁ g₂ : G}, Commute g₁ g₂ → ⁅g₁, g₂⁆ = 1"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  For any prime number `p` and finite group `G` of order `p^2`, `G` is commutative.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {p : ℕ} {G : Type u_1} [inst : Group G] [inst_1 : Fintype G] [inst_2 : Fact p.Prime],\n  Fintype.card G = p ^ 2 → ∀ (a b : G), a * b = b * a"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: If `G` is a commutative group, then `M →* G` is a commutative group too. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"{M : Type u_1} → {G : Type u_2} → [inst : MulOneClass M] → [inst_1 : CommGroup G] → CommGroup (M →* G)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: If n is odd, then the Dihedral group of order $2n$ has $n(n+3)$ pairs of commuting elements. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {n : ℕ}, Odd n → Nat.card { p // Commute p.1 p.2 } = n * (n + 3)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Elements of disjoint, normal subgroups commute. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : Group G] (H₁ H₂ : Subgroup G),\n  Subgroup.Normal H₁ → Subgroup.Normal H₂ → Disjoint H₁ H₂ → ∀ (x y : G), x ∈ H₁ → y ∈ H₂ → Commute x y"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Elements of disjoint, normal subgroups commute.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : AddGroup G] (H₁ H₂ : AddSubgroup G),\n  AddSubgroup.Normal H₁ → AddSubgroup.Normal H₂ → Disjoint H₁ H₂ → ∀ (x y : G), x ∈ H₁ → y ∈ H₂ → AddCommute x y"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Any element commutes with itself. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {S : Type u_2} [inst : Mul S] (a : S), Commute a a"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: The center of a group `G` is the set of elements that commute with everything in `G` \n\nGive ONLY the Lean code"},{"role":"assistant","content":"(G : Type u_1) → [inst : Group G] → Subgroup G"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Any element commutes with itself.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {S : Type u_2} [inst : Add S] (a : S), AddCommute a a"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: In a group of exponent two, all elements commute. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : Group G], Monoid.exponent G = 2 → ∀ (x y : G), x * y = y * x"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: If every element of a group `G` has order `2`, then every pair of elements of `G` commutes.\n\nGive ONLY the Lean code"}]}
{"text":"The product of two consecutive natural numbers is even.","fullPrompt":[{"role":"system","content":"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code."},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  For all natural numbers m and n, m^n is even if and only if m is even and n is not zero.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {m n : ℕ}, Even (m ^ n) ↔ Even m ∧ n ≠ 0"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  In any semiring, 2 is equal to the sum of two identical elements.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_2} [inst : Semiring α], Even 2"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  For all natural numbers `n`, the product of `n` and `n-1` is an even number. Equivalently, the product of two consecutive natural numbers is an even number.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (n : ℕ), Even (n * (n - 1))"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for any natural number `n`, the number `n + 1` is even if and only if `n` is not even. In other words, if `n` is an odd number, then `n + 1` is an even number, and vice versa.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {m n : ℕ}, Even (m + n) = (Even m ↔ Even n)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for all natural numbers `m` and `n`, the sum `m + n` is even if and only if `m` and `n` are both even or both odd. In other words, the parity of the sum of two natural numbers is the same as the parity of the individual numbers. Here, `Even` is a property of a number that is defined to be true if the number can be expressed as the sum of two equal numbers.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {m n : ℕ}, Even (m + n) ↔ (Even m ↔ Even n)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for every natural number `n`, the number is either even or odd. A natural number `n` is defined as even if it can be expressed as the sum of two identical numbers, and as odd if it can be expressed as `2*k + 1` for some number `k`. Thus, the theorem asserts that any natural number fits one of these two definitions.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (n : ℕ), Even n ∨ Odd n"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for all natural numbers `n`, the product of `n` and `n - 1` is an even number. In mathematical terms, this theorem can be written as: \"∀ n ∈ ℕ, n*(n - 1) is even.\" Here, a number is considered even if it can be expressed as twice another number, in this case, n*(n - 1) = 2*r for some `r`.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (n : ℕ), Even (n * (n - 1))"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  The sum of two integers is even if and only if both integers are even.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {n : ℤ}, Even n = (n % 2 = 0)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  Every natural number can be expressed as an even number (the sum of two identical numbers) or an odd number (2 times an integer plus 1).\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (n : ℕ), Even n ∨ Odd n"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  The sum of two natural numbers is even if and only if both numbers are even or both are odd.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {m n : ℕ}, Even (m + n) ↔ (Even m ↔ Even n)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  For all natural numbers `n`, the product of `n` and `n-1` is an even number. Equivalently, the product of two consecutive natural numbers is an even number.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (n : ℕ), Even (n * (n - 1))"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: The sequence of natural numbers some 0, some 1, ... \n\nGive ONLY the Lean code"},{"role":"assistant","content":"Stream'.Seq ℕ"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The product of two positive elements is positive. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u} [self : StrictOrderedRing α] (a b : α), 0 < a → 0 < b → 0 < a * b"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Every x greater than or equal to 1 is between two successive\nnatural-number powers of every y greater than one. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} [inst : LinearOrderedSemiring α] [inst_1 : Archimedean α] [inst_2 : ExistsAddOfLE α] {x y : α},\n  1 ≤ x → 1 < y → ∃ n, y ^ n ≤ x ∧ x < y ^ (n + 1)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Two natural numbers are equal if and only if they have the same divisors. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {m n : ℕ}, (∀ (a : ℕ), a ∣ m ↔ a ∣ n) ↔ m = n"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The product of two natural numbers is greater than 1 if and only if\nat least one of them is greater than 1 and both are positive. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {m n : ℕ}, 1 < m * n ↔ 0 < m ∧ 0 < n ∧ (1 < m ∨ 1 < n)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The set of natural numbers that are sums of two squares is closed under multiplication. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {a b x y u v : ℕ}, a = x ^ 2 + y ^ 2 → b = u ^ 2 + v ^ 2 → ∃ r s, a * b = r ^ 2 + s ^ 2"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The convolution of two even functions is also even. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {𝕜 : Type u𝕜} {G : Type uG} {E : Type uE} {E' : Type uE'} {F : Type uF} [inst : NormedAddCommGroup E]\n  [inst_1 : NormedAddCommGroup E'] [inst_2 : NormedAddCommGroup F] {f : G → E} {g : G → E'} {x : G}\n  [inst_3 : NontriviallyNormedField 𝕜] [inst_4 : NormedSpace 𝕜 E] [inst_5 : NormedSpace 𝕜 E'] [inst_6 : NormedSpace 𝕜 F]\n  (L : E →L[𝕜] E' →L[𝕜] F) [inst_7 : MeasurableSpace G] {μ : MeasureTheory.Measure G} [inst_8 : NormedSpace ℝ F]\n  [inst_9 : AddCommGroup G] [inst_10 : MeasureTheory.Measure.IsAddLeftInvariant μ]\n  [inst_11 : MeasureTheory.Measure.IsNegInvariant μ] [inst_12 : MeasurableNeg G] [inst_13 : MeasurableAdd G],\n  (∀ᵐ (x : G) ∂μ, f (-x) = f x) → (∀ᵐ (x : G) ∂μ, g (-x) = g x) → convolution f g L (-x) = convolution f g L x"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Two natural numbers are equal if and only if they have the same multiples. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {m n : ℕ}, (∀ (a : ℕ), m ∣ a ↔ n ∣ a) ↔ m = n"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The product of two consecutive natural numbers is even.\n\nGive ONLY the Lean code"}]}
{"text":"Every index 2 subgroup of a group is normal.","fullPrompt":[{"role":"system","content":"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code."},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A subgroup has index two if and only if there exists `a` such that for all `b`, exactly one\nof `b * a` and `b` belong to `H`. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : Group G] {H : Subgroup G}, Subgroup.index H = 2 ↔ ∃ a, ∀ (b : G), Xor' (b * a ∈ H) (b ∈ H)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for any given Type `G` that forms a Group, the index of the top (or universal) subgroup is always equal to 1. In mathematical terms, if `G` is a group, then the index of the top subgroup (which contains all elements of the group) is 1. This is because the top subgroup is essentially the whole group itself, and the index of a group to itself is defined as 1.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : Group G], ⊤.index = 1"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for any given group `G` and two subgroups `H` and `K` of `G`, if `H` is a subgroup of `K`, then the product of the relative index of `H` in `K` and the index of `K` in `G` is equal to the index of `H` in `G`. The relative index of a subgroup is the natural number that represents the index of the subgroup in the larger group, and it returns 0 if the relative index is infinite. Similarly, the index of a subgroup is the size of the set of cosets of the subgroup in the group, represented as a natural number, and returns 0 if the index is infinite.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : Group G] {H K : Subgroup G}, H ≤ K → H.relindex K * K.index = H.index"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for any additive group `G` and any two of its subgroups `H` and `K` such that `H` is a subgroup of `K`, the product of the relative index of `H` in `K` and the index of `K` equals the index of `H`. Here, the relative index of a subgroup is defined as the index of the subgroup formed from the original subgroup and another subgroup, and the index of a subgroup is defined as the cardinality of the quotient group formed by the group and the subgroup. Note that indices are given as natural numbers and are zero in case of infinite indices.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : AddGroup G] {H K : AddSubgroup G}, H ≤ K → H.relindex K * K.index = H.index"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for any group `G` with a subgroup `H` that is a `p`-group (meaning that the number of elements in `H` is equal to `p` raised to the power `n`, where `p` is a prime number), the index of `H` within its normalizer is congruent modulo `p` to the index of `H` in `G`. The normalizer of a group is a superset containing all elements that can multiply with an element of the group to produce another element within the group. The index of a subgroup in a group is the number of distinct left (or right) cosets of the subgroup in the group.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u} [inst : Group G] [inst_1 : Fintype G] {p n : ℕ} [hp : Fact p.Prime] {H : Subgroup G},\n  Fintype.card ↥H = p ^ n →\n    p.ModEq (Fintype.card (↥H.normalizer ⧸ Subgroup.comap H.normalizer.subtype H)) (Fintype.card (G ⧸ H))"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  In a simple group, every normal subgroup is either the trivial group or the entire group.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : Group G] [inst_1 : IsSimpleGroup G] {H : Subgroup G}, H.Normal → H = ⊥ ∨ H = ⊤"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  In a group, if a subgroup is normal, then its elements are closed under conjugation.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : Group G] {H : Subgroup G}, H.Normal → ∀ n ∈ H, ∀ (g : G), g * n * g⁻¹ ∈ H"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  In a simple group, every normal subgroup is either the trivial subgroup or the entire group.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : Group G] [self : IsSimpleGroup G] (H : Subgroup G), H.Normal → H = ⊥ ∨ H = ⊤"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  A subgroup of a group has index 2 if and only if there exists an element such that the subgroup contains exactly one of each pair of elements and their product.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : Group G] {H : Subgroup G}, H.index = 2 ↔ ∃ a, ∀ (b : G), Xor' (b * a ∈ H) (b ∈ H)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: A finite index subgroup has finite quotient. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"{G : Type u_1} → [inst : Group G] → (H : Subgroup G) → [inst_1 : Subgroup.FiniteIndex H] → Fintype (G ⧸ H)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Elements of disjoint, normal subgroups commute.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : AddGroup G] (H₁ H₂ : AddSubgroup G),\n  AddSubgroup.Normal H₁ → AddSubgroup.Normal H₂ → Disjoint H₁ H₂ → ∀ (x y : G), x ∈ H₁ → y ∈ H₂ → AddCommute x y"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: Any group of exponent two is abelian. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"{G : Type u_1} → [inst : Group G] → Monoid.exponent G = 2 → CommGroup G"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The topological closure of a normal additive subgroup is normal.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : TopologicalSpace G] [inst_1 : AddGroup G] [inst_2 : TopologicalAddGroup G] (N : AddSubgroup G)\n  [inst_3 : AddSubgroup.Normal N], AddSubgroup.Normal (AddSubgroup.topologicalClosure N)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Elements of disjoint, normal subgroups commute. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : Group G] (H₁ H₂ : Subgroup G),\n  Subgroup.Normal H₁ → Subgroup.Normal H₂ → Disjoint H₁ H₂ → ∀ (x y : G), x ∈ H₁ → y ∈ H₂ → Commute x y"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: In a group that satisfies the normalizer condition, every maximal subgroup is normal \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : Group G] (H : Subgroup G), NormalizerCondition G → IsCoatom H → Subgroup.Normal H"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The topological closure of a normal subgroup is normal.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : TopologicalSpace G] [inst_1 : Group G] [inst_2 : TopologicalGroup G] (N : Subgroup G)\n  [inst_3 : Subgroup.Normal N], Subgroup.Normal (Subgroup.topologicalClosure N)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The subgroup has finite index \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : Group G] {H : Subgroup G} [self : Subgroup.FiniteIndex H], Subgroup.index H ≠ 0"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Every index 2 subgroup of a group is normal.\n\nGive ONLY the Lean code"}]}
{"text":"Every free group is torsion free.","fullPrompt":[{"role":"system","content":"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code."},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  For any additive commutative group `G`, the quotient `G / torsionSubgroup(G)` is a torsion-free group.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (G : Type u_1) [inst : AddCommGroup G], AddMonoid.IsTorsionFree (G ⧸ AddCommGroup.torsion G)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  For any additive commutative group `G`, the quotient `G / torsionSubgroup(G)` is a torsion-free group.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (G : Type u_1) [inst : AddCommGroup G], AddMonoid.IsTorsionFree (G ⧸ AddCommGroup.torsion G)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Quotienting a group by its torsion subgroup yields a torsion free group. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (G : Type u_1) [inst : CommGroup G], IsTorsionFree (G ⧸ CommGroup.torsion G)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  In an additive group with a nontrivial structure, if every element has finite order, then the group contains a non-zero element of finite order.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : AddGroup G] [hN : Nontrivial G], AddMonoid.IsTorsion G → ¬AddMonoid.IsTorsionFree G"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A nontrivial torsion group is not torsion-free. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : Group G] [hN : Nontrivial G], IsTorsion G → ¬IsTorsionFree G"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  A nontrivial additive group with only the zero element having finite order is torsion-free and hence not a torsion group.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : AddGroup G] [hN : Nontrivial G], AddMonoid.IsTorsionFree G → ¬AddMonoid.IsTorsion G"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A nontrivial torsion-free group is not torsion. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : Group G] [hN : Nontrivial G], IsTorsionFree G → ¬IsTorsion G"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that if a group G is torsion-free, then any subgroup H of G is also torsion-free. Here, a group is said to be torsion-free if the only element of the group that has finite order is the identity element. In other words, no element other than the identity can be raised to some positive power to obtain the identity. Therefore, this theorem asserts that this property of being torsion-free is preserved under taking subgroups, i.e., if a group doesn't have elements of finite order, its subgroups also don't have such elements.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : Group G], Monoid.IsTorsionFree G → ∀ (H : Subgroup G), Monoid.IsTorsionFree ↥H"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that if a group 'G' is additively torsion-free, then any subgroup 'H' of 'G' is also additively torsion-free. Here, an additive group 'G' is said to be torsion-free if the only element of 'G' whose addition to itself a finite number of times gives the zero element is the zero element itself. In other words, no non-zero element of the group has a finite additive order. The theorem extends this property to all subgroups of a torsion-free group.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : AddGroup G], AddMonoid.IsTorsionFree G → ∀ (H : AddSubgroup G), AddMonoid.IsTorsionFree ↥H"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that a nontrivial torsion-free group is not a torsion group. In more detail, for any group `G` which is nontrivial (i.e., it has at least one element that is not the identity), if `G` is torsion-free (meaning every element in the group that isn't the identity has infinite order), then `G` cannot be a torsion group (a group where every element has finite order).\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : Group G] [hN : Nontrivial G], Monoid.IsTorsionFree G → ¬Monoid.IsTorsion G"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for any commutative group `G`, the quotient group formed by dividing `G` with its torsion subgroup is a torsion-free group. Here, a torsion-free group is defined as a group in which only the identity element (1) has a finite order. In other words, the result of dividing a group by its torsion subgroup removes all elements of finite order (except for the identity), thereby creating a group where every non-identity element has infinite order, i.e., a torsion-free group.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (G : Type u_1) [inst : CommGroup G], Monoid.IsTorsionFree (G ⧸ CommGroup.torsion G)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  In a torsion-free group, the size of the product of two nonempty finite sets is greater than or equal to the sum of their sizes minus one.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} [inst : Group α] [inst_1 : DecidableEq α] {s t : Finset α},\n  Monoid.IsTorsionFree α → s.Nonempty → t.Nonempty → s.card + t.card - 1 ≤ (s * t).card"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  If G is a torsion-free group, then every subgroup H of G is also torsion-free.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : Group G], Monoid.IsTorsionFree G → ∀ (H : Subgroup G), Monoid.IsTorsionFree ↥H"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  For any commutative group `G`, the quotient `G / torsion Subgroup(G)` is a torsion-free group.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (G : Type u_1) [inst : CommGroup G], Monoid.IsTorsionFree (G ⧸ CommGroup.torsion G)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  The direct product of a family of torsion-free groups is a torsion-free group.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {η : Type u_3} {Gs : η → Type u_4} [inst : (i : η) → Group (Gs i)],\n  (∀ (i : η), Monoid.IsTorsionFree (Gs i)) → Monoid.IsTorsionFree ((i : η) → Gs i)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Torsion groups are closed under extensions. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} {H : Type u_2} [inst : Group G] {N : Subgroup G} [inst_1 : Group H] {f : G →* H},\n  N = MonoidHom.ker f → Monoid.IsTorsion H → Monoid.IsTorsion ↥N → Monoid.IsTorsion G"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Finite groups are torsion groups. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : Group G] [inst_1 : Finite G], Monoid.IsTorsion G"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Quotienting a group by its torsion subgroup yields a torsion free group. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (G : Type u_1) [inst : CommGroup G], Monoid.IsTorsionFree (G ⧸ CommGroup.torsion G)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A nontrivial torsion-free group is not torsion. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : Group G] [hN : Nontrivial G], Monoid.IsTorsionFree G → ¬Monoid.IsTorsion G"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Subgroups of additive torsion-free groups are additively torsion-free.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : AddGroup G], AddMonoid.IsTorsionFree G → ∀ (H : AddSubgroup G), AddMonoid.IsTorsionFree ↥H"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Direct products of additive torsion free groups are torsion free.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {η : Type u_3} {Gs : η → Type u_4} [inst : (i : η) → AddGroup (Gs i)],\n  (∀ (i : η), AddMonoid.IsTorsionFree (Gs i)) → AddMonoid.IsTorsionFree ((i : η) → Gs i)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Direct products of torsion free groups are torsion free. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {η : Type u_3} {Gs : η → Type u_4} [inst : (i : η) → Group (Gs i)],\n  (∀ (i : η), Monoid.IsTorsionFree (Gs i)) → Monoid.IsTorsionFree ((i : η) → Gs i)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Subgroups of torsion-free groups are torsion-free. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : Group G], Monoid.IsTorsionFree G → ∀ (H : Subgroup G), Monoid.IsTorsionFree ↥H"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Every free group is torsion free.\n\nGive ONLY the Lean code"}]}
{"text":"Every natural number greater than `1` is divisible by a prime number.","fullPrompt":[{"role":"system","content":"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code."},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  A natural number `p` is prime if and only if `p` is greater than 1 and has no divisors other than 1 and `p`.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {p : ℕ}, Nat.Prime p ↔ 2 ≤ p ∧ ∀ (m : ℕ), m ∣ p → m = 1 ∨ m = p"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Euclid's theorem on the **infinitude of primes**.\nHere given in the form: for every `n`, there exists a prime number `p ≥ n`. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (n : ℕ), ∃ p, n ≤ p ∧ Nat.Prime p"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  For every natural number `n` greater than 1, there exists a prime number `p` such that `p` divides `n`.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {n : ℕ}, n ≠ 1 → ∃ p, Nat.Prime p ∧ p ∣ n"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The theorem `Nat.prime_two` asserts that the number 2 is a prime number. In the context of natural numbers, a prime number is defined as a natural number greater than or equal to 2 whose only divisors are itself and 1. Therefore, this theorem is confirming that 2, which is divisible only by itself and 1, satisfies this property and is therefore a prime number.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"Nat.Prime 2"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for any natural number `n`, `n` divides 1 if and only if `n` is equal to 1. In terms of number theory, this means that 1 can only be divided evenly (i.e., without remainder) by the number 1 itself.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {n : ℕ}, n ∣ 1 ↔ n = 1"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for every natural number `p`, if `p` is a prime number, then the set of proper divisors of `p` is the set that contains only the number `1`. In mathematical terms, it establishes that the proper divisors of a prime number `p` are only `1`, since prime numbers are defined as those natural numbers greater than 1 that have no other divisors besides `1` and themselves.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {p : ℕ}, p.Prime → p.properDivisors = {1}"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for any natural number `p` that is prime, and any other natural number `m`, if `m` divides `p` then `m` must be either `1` or `p` itself. This is a property of prime numbers, which are defined as natural numbers greater than or equal to 2 that have no other divisors except for `1` and themselves.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {p : ℕ}, p.Prime → ∀ (m : ℕ), m ∣ p → m = 1 ∨ m = p"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  For every natural number `n`, there exists a prime number `p` such that `p > n`.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (n : ℕ), ∃ p, n ≤ p ∧ p.Prime"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  For every natural number `n` greater than zero, `n` is the product of its prime factors.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {n : ℕ}, n ≠ 0 → n.factors.prod = n"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  For every natural number `n`, there exists a prime number `p` such that `n` is divisible by `p` and `p` is greater than zero.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (n : ℕ), 0 < n.minFac"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  For every natural number `n` greater than 1, there exists a prime number `p` such that `p` divides `n`.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {n : ℕ}, n ≠ 1 → ∃ p, p.Prime ∧ p ∣ n"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Two natural numbers are equal if and only if they have the same multiples. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {m n : ℕ}, (∀ (a : ℕ), m ∣ a ↔ n ∣ a) ↔ m = n"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Infinitely many natural numbers are equal to `d` mod `n`. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {n : ℕ}, n ≠ 0 → ∀ (d : ℕ), ∃ᶠ (m : ℕ) in Filter.atTop, m ≡ d [MOD n]"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The divisors of a product of natural numbers are the pointwise product of the divisors of the\nfactors. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (m n : ℕ), Nat.divisors (m * n) = Nat.divisors m * Nat.divisors n"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The only divisors of prime powers are prime powers. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} [inst : CancelCommMonoidWithZero α] [dec_irr : (p : Associates α) → Decidable (Irreducible p)]\n  [inst_1 : UniqueFactorizationMonoid α] [dec : DecidableEq α] [dec' : DecidableEq (Associates α)] {a p : Associates α},\n  Irreducible p →\n    ∀ [inst_2 : (n : ℕ) → Decidable (a ∣ p ^ n)] {n : ℕ} (h : a ∣ p ^ n),\n      a = p ^ Nat.find (_ : ∃ n, (fun n => a ∣ p ^ n) n)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A prime natural number is prime in `ℤ[i]` if and only if it is `3` mod `4` \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (p : ℕ) [inst : Fact (Nat.Prime p)], Prime ↑p ↔ p % 4 = 3"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Two natural numbers are equal if and only if they have the same divisors. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {m n : ℕ}, (∀ (a : ℕ), a ∣ m ↔ a ∣ n) ↔ m = n"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: If a small natural number is divisible by a larger natural number,\nthe small number is zero. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {a b : ℕ}, a ∣ b → b < a → b = 0"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Every nonzero natural number has a unique prime factorization \n\nGive ONLY the Lean code"},{"role":"assistant","content":"Set.InjOn Nat.factorization {x | x ≠ 0}"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Every natural number greater than `1` is divisible by a prime number.\n\nGive ONLY the Lean code"}]}
{"text":"A finite torsion-free group is trivial","fullPrompt":[{"role":"system","content":"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code."},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A nontrivial torsion-free group is not torsion. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : Group G] [hN : Nontrivial G], IsTorsionFree G → ¬IsTorsion G"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  Every element in a finite additive group has finite additive order.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : AddGroup G] [inst_1 : Finite G], AddMonoid.IsTorsion G"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A nontrivial torsion group is not torsion-free. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : Group G] [hN : Nontrivial G], IsTorsion G → ¬IsTorsionFree G"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  A finite group is a torsion group, meaning every element has finite order.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : Group G] [inst_1 : Finite G], Monoid.IsTorsion G"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Finite groups are torsion groups. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : Group G] [inst_1 : Finite G], IsTorsion G"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that if a group 'G' is additively torsion-free, then any subgroup 'H' of 'G' is also additively torsion-free. Here, an additive group 'G' is said to be torsion-free if the only element of 'G' whose addition to itself a finite number of times gives the zero element is the zero element itself. In other words, no non-zero element of the group has a finite additive order. The theorem extends this property to all subgroups of a torsion-free group.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : AddGroup G], AddMonoid.IsTorsionFree G → ∀ (H : AddSubgroup G), AddMonoid.IsTorsionFree ↥H"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for any commutative group `G`, the quotient group formed by dividing `G` with its torsion subgroup is a torsion-free group. Here, a torsion-free group is defined as a group in which only the identity element (1) has a finite order. In other words, the result of dividing a group by its torsion subgroup removes all elements of finite order (except for the identity), thereby creating a group where every non-identity element has infinite order, i.e., a torsion-free group.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (G : Type u_1) [inst : CommGroup G], Monoid.IsTorsionFree (G ⧸ CommGroup.torsion G)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that a nontrivial torsion-free group is not a torsion group. In more detail, for any group `G` which is nontrivial (i.e., it has at least one element that is not the identity), if `G` is torsion-free (meaning every element in the group that isn't the identity has infinite order), then `G` cannot be a torsion group (a group where every element has finite order).\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : Group G] [hN : Nontrivial G], Monoid.IsTorsionFree G → ¬Monoid.IsTorsion G"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  For any commutative group `G`, the quotient `G / torsion Subgroup(G)` is a torsion-free group.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (G : Type u_1) [inst : CommGroup G], Monoid.IsTorsionFree (G ⧸ CommGroup.torsion G)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  A nontrivial torsion-free group has no elements of finite order.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : Group G] [hN : Nontrivial G], Monoid.IsTorsionFree G → ¬Monoid.IsTorsion G"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  A nontrivial additive group with only the zero element having finite order is torsion-free and hence not a torsion group.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : AddGroup G] [hN : Nontrivial G], AddMonoid.IsTorsionFree G → ¬AddMonoid.IsTorsion G"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  The direct product of a family of torsion-free groups is a torsion-free group.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {η : Type u_3} {Gs : η → Type u_4} [inst : (i : η) → Group (Gs i)],\n  (∀ (i : η), Monoid.IsTorsionFree (Gs i)) → Monoid.IsTorsionFree ((i : η) → Gs i)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Subgroups of additive torsion-free groups are additively torsion-free.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : AddGroup G], AddMonoid.IsTorsionFree G → ∀ (H : AddSubgroup G), AddMonoid.IsTorsionFree ↥H"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Quotienting a group by its additive torsion subgroup yields an additive torsion free group.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (G : Type u_1) [inst : AddCommGroup G], AddMonoid.IsTorsionFree (G ⧸ AddCommGroup.torsion G)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Direct products of torsion free groups are torsion free. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {η : Type u_3} {Gs : η → Type u_4} [inst : (i : η) → Group (Gs i)],\n  (∀ (i : η), Monoid.IsTorsionFree (Gs i)) → Monoid.IsTorsionFree ((i : η) → Gs i)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: The torsion subgroup is finite. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"(K : Type u_1) → [inst : Field K] → [inst_1 : NumberField K] → Fintype ↥(NumberField.Units.torsion K)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A nontrivial torsion-free group is not torsion. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : Group G] [hN : Nontrivial G], Monoid.IsTorsionFree G → ¬Monoid.IsTorsion G"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Quotienting a group by its torsion subgroup yields a torsion free group. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (G : Type u_1) [inst : CommGroup G], Monoid.IsTorsionFree (G ⧸ CommGroup.torsion G)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Subgroups of torsion-free groups are torsion-free. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : Group G], Monoid.IsTorsionFree G → ∀ (H : Subgroup G), Monoid.IsTorsionFree ↥H"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Finite groups are torsion groups. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : Group G] [inst_1 : Finite G], Monoid.IsTorsion G"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A finite torsion-free group is trivial\n\nGive ONLY the Lean code"}]}
{"text":"Every finite division ring is a field.","fullPrompt":[{"role":"system","content":"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code."},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A finite domain is a field. See also `littleWedderburn` and `Fintype.divisionRingOfIsDomain`. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (D : Type u_1) [inst : Finite D] [inst : Ring D] [inst_1 : IsDomain D], IsField D"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: A finite division ring is a field. See `Finite.isDomain_to_isField` and\n`Fintype.divisionRingOfIsDomain` for more general statements, but these create data, and therefore\nmay cause diamonds if used improperly. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"(D : Type u_1) → [inst : DivisionRing D] → [inst : Finite D] → Field D"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for any division ring `K`, and for any subfield `s` of `K`, if `x` and `y` are elements of `s`, then the result of the division of `x` by `y` (denoted as `x / y`) is also an element of `s`. Essentially, it asserts that a subfield is closed under the operation of division. This means that dividing any two elements of the subfield always results in a value that is also in the subfield.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {K : Type u} [inst : DivisionRing K] (s : Subfield K) {x y : K}, x ∈ s → y ∈ s → x / y ∈ s"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for any division ring `K` and any subfield `s` of `K`, the multiplicative identity, 1, is an element of `s`. In other words, every subfield of a division ring must contain the number 1.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {K : Type u} [inst : DivisionRing K] (s : Subfield K), 1 ∈ s"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for any given division ring `K` and any subfield `s` of `K`, the element `0` (zero) from `K` is also an element in `s`. In other words, every subfield of a division ring must contain the zero of the division ring.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {K : Type u} [inst : DivisionRing K] (s : Subfield K), 0 ∈ s"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that a subfield in a division ring is closed under multiplication. In more detail, for any division ring 'K', given any subfield 's' of 'K', and any two elements 'x' and 'y' in 's', the product of 'x' and 'y' is also an element of 's'. In essence, this means you can multiply any two elements in the subfield and the result will still belong to the same subfield, hence demonstrating the closure property in the context of multiplication.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {K : Type u} [inst : DivisionRing K] (s : Subfield K) {x y : K}, x ∈ s → y ∈ s → x * y ∈ s"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  Every finite field has a cardinality that is a power of a prime number.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} [inst : Fintype α] [inst_1 : Field α], IsPrimePow (Fintype.card α)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  A finite ring and a domain is a field. Every non-zero element in such a finite field has a multiplicative inverse.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (D : Type u_1) [inst : Finite D] [inst : Ring D] [inst_1 : IsDomain D], IsField D"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  In any division ring, the multiplicative inverses of elements in a subfield belong to the same subfield.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {K : Type u} [inst : DivisionRing K] (self : Subfield K), ∀ x ∈ self.carrier, x⁻¹ ∈ self.carrier"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  Every subfield of a division ring contains the multiplicative identity 1.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {K : Type u} [inst : DivisionRing K] (s : Subfield K), 1 ∈ s"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A field is a valuation ring. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (K : Type u) [inst : Field K], ValuationRing K"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: A finite division ring is a field. See `Finite.isDomain_to_isField` and\n`Fintype.divisionRingOfIsDomain` for more general statements, but these create data, and therefore\nmay cause diamonds if used improperly. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"(D : Type u_1) → [inst : DivisionRing D] → [inst : Finite D] → Field D"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: An intermediate field is closed under division. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {K : Type u_1} {L : Type u_2} [inst : Field K] [inst_1 : Field L] [inst_2 : Algebra K L] (S : IntermediateField K L)\n  {x y : L}, x ∈ S → y ∈ S → x / y ∈ S"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: An integral domain that is module-finite as an algebra over a field is a field. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"(F : Type u_1) →\n  (K : Type u_2) →\n    [inst : Field F] →\n      [h : CommRing K] → [inst_1 : IsDomain K] → [inst_2 : Algebra F K] → [inst : FiniteDimensional F K] → Field K"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A finite field has prime power cardinality. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} [inst : Fintype α] [inst_1 : Field α], IsPrimePow (Fintype.card α)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A finite domain is a field. See also `littleWedderburn` and `Fintype.divisionRingOfIsDomain`. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (D : Type u_1) [inst : Finite D] [inst : Ring D] [inst_1 : IsDomain D], IsField D"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: A domain that is module-finite as an algebra over a field is a division ring. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"(F : Type u_1) →\n  (K : Type u_2) →\n    [inst : Field F] →\n      [h : Ring K] → [inst_1 : IsDomain K] → [inst_2 : Algebra F K] → [inst : FiniteDimensional F K] → DivisionRing K"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: Every finite domain is a division ring. More generally, they are fields; this can be found in\n`Mathlib.RingTheory.LittleWedderburn`. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"(R : Type u_3) → [inst : Ring R] → [inst : IsDomain R] → [inst : DecidableEq R] → [inst : Fintype R] → DivisionRing R"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Every finite division ring is a field.\n\nGive ONLY the Lean code"}]}
{"text":"Every finite topological space is compact.","fullPrompt":[{"role":"system","content":"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code."},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  In a Noetherian topological space, every set is compact.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace.NoetherianSpace α] (s : Set α), IsCompact s"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  For any topological space `X`, every finite subset `s` of `X` is compact in the sense that for every nontrivial filter `f` containing `s`, there exists an element `x` in `s` such that every set in `f` intersects every neighborhood of `x`.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X : Type u} [inst : TopologicalSpace X] {s : Set X}, Set.Finite s → IsCompact s"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  A compact discrete space is a finite set.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X : Type u} [inst : TopologicalSpace X] [inst_1 : CompactSpace X] [inst : DiscreteTopology X], Finite X"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Finite topological spaces are compact. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X : Type u} [inst : TopologicalSpace X] [inst_1 : Finite X], CompactSpace X"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The theorem states that in a paracompact space, every open cover has a locally finite refinement. Specifically, given any topological space which is paracompact and a set of open subsets that covers the whole space, there exists a new set of open subsets, also covering the whole space, such that every point in the space has a neighborhood which intersects with only finitely many of these new subsets and every new subset is contained within one of the original subsets. This is a key property of paracompact spaces in mathematics, particularly in the field of topology.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X : Type v} [inst : TopologicalSpace X] [self : ParacompactSpace X] (α : Type v) (s : α → Set X),\n  (∀ (a : α), IsOpen (s a)) →\n    ⋃ a, s a = Set.univ →\n      ∃ β t, (∀ (b : β), IsOpen (t b)) ∧ ⋃ b, t b = Set.univ ∧ LocallyFinite t ∧ ∀ (b : β), ∃ a, t b ⊆ s a"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that a topological space is σ-compact if and only if the universal set is σ-compact. In other words, for any topological space 'X', 'X' is said to be σ-compact (meaning it can be represented as a union of countably many compact sets) if and only if the set of all elements of 'X' is also σ-compact.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X : Type u_1} [inst : TopologicalSpace X], IsSigmaCompact Set.univ ↔ SigmaCompactSpace X"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that the underlying topological space of any compact Hausdorff space (denoted as `CompHaus` in Lean 4) is compact. In other words, given any compact Hausdorff space, the associated topology is compact, which means that every open cover of the space has a finite subcover.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (self : CompHaus), CompactSpace ↑self.toTop"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that a compact discrete space is finite. In other words, for any type `X` which has a topological space structure, if `X` is both a compact space and a discrete space, then `X` is finite. The mathematical implications of this are that no infinite set can be both compact and discrete, which is a fundamental property in topology.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X : Type u} [inst : TopologicalSpace X] [inst_1 : CompactSpace X] [inst : DiscreteTopology X], Finite X"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  In a first countable topological space, every compact set is sequentially compact.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : FirstCountableTopology X] {s : Set X},\n  IsCompact s → IsSeqCompact s"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  In a Noetherian topological space, every set is compact.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace.NoetherianSpace α] (s : Set α), IsCompact s"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  Every positive compact subset of a topological space is compact.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} [inst : TopologicalSpace α] (s : TopologicalSpace.PositiveCompacts α), IsCompact ↑s"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  In a discrete topological space, every compact set is finite.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X : Type u} [inst : TopologicalSpace X] {s : Set X} [inst_1 : DiscreteTopology X], IsCompact s → s.Finite"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The product of two compact spaces is compact. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X : Type u} {Y : Type v} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] [inst_2 : CompactSpace X]\n  [inst_3 : CompactSpace Y], CompactSpace (X × Y)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: If `X` is a compact space, then any discrete quotient of `X` is finite. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X : Type u_2} [inst : TopologicalSpace X] (S : DiscreteQuotient X) [inst_1 : CompactSpace X],\n  Finite (Quotient S.toSetoid)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A measure which is finite on compact sets in a locally compact space is locally finite. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} {m0 : MeasurableSpace α} {μ : MeasureTheory.Measure α} [inst : TopologicalSpace α]\n  [inst_1 : WeaklyLocallyCompactSpace α] [inst_2 : MeasureTheory.IsFiniteMeasureOnCompacts μ],\n  MeasureTheory.IsLocallyFiniteMeasure μ"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: In a Noetherian space, all sets are compact. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace.NoetherianSpace α] (s : Set α), IsCompact s"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: For any topological space `X`, its one point compactification is a compact space. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X : Type u_1} [inst : TopologicalSpace X], CompactSpace (OnePoint X)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A compact discrete space is finite. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X : Type u} [inst : TopologicalSpace X] [inst_1 : CompactSpace X] [inst : DiscreteTopology X], Finite X"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The underlying topological space is compact.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (self : CompHaus), CompactSpace ↑self.toTop"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Finite topological spaces are compact. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X : Type u} [inst : TopologicalSpace X] [inst_1 : Finite X], CompactSpace X"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Every finite topological space is compact.\n\nGive ONLY the Lean code"}]}
{"text":"Every surjective homomorphism from a finitely generated free group to itself is injective.","fullPrompt":[{"role":"system","content":"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code."},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  For additive groups α and β, and a function f : α → β that is an additive group homomorphism, f is injective if and only if its kernel {a : α | f(a) = 0} consists only of the additive identity of α.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u} {β : Type v} [inst : AddGroup α] [inst_1 : AddGroup β] {f : α → β},\n  IsAddGroupHom f → (Function.Injective f ↔ ∀ (a : α), f a = 0 → a = 0)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  The canonical map from any type to its additive free group is an injection.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u}, Function.Injective FreeAddGroup.of"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  For every type `α` with decidable equality, the injective function `FreeGroup.toWord` from the free group over `α` to the list of pairs of elements from `α` and booleans uniquely identifies each element in the free group.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u} [inst : DecidableEq α], Function.Injective FreeGroup.toWord"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  The `FreeGroup.of` function mapping each element of type `α` to its corresponding free group element is an injection.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u}, Function.Injective FreeGroup.of"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The canonical map from the type to the free group is an injection. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u}, Function.Injective FreeGroup.of"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that a group homomorphism, `f`, from one group `α` to another group `β`, is injective if and only if its kernel is trivial. In other words, `f` is a one-to-one function if for every element `a` in group `α`, `f(a) = 1` (the identity element in group `β`) implies that `a = 1` (the identity element in `α`). This theorem links the concept of function injectivity with the concept of a trivial kernel in the context of group theory.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u} {β : Type v} [inst : Group α] [inst_1 : Group β] {f : α → β},\n  IsGroupHom f → (Function.Injective f ↔ ∀ (a : α), f a = 1 → a = 1)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The theorem `Subgroup.comap_injective` states that for all groups `G` and `N`, and for all monoid homomorphisms `f` from `G` to `N`, if `f` is a surjective function (that is, for every element in `N`, there exists an element in `G` such that the image of this element under `f` is that element in `N`), then the function `Subgroup.comap f` that maps subgroups of `N` to subgroups of `G` is injective (that is, if `Subgroup.comap f` maps two different subgroups of `N` to the same subgroup of `G`, then the two subgroups of `N` must have been the same to begin with).\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : Group G] {N : Type u_5} [inst_1 : Group N] {f : G →* N},\n  Function.Surjective ⇑f → Function.Injective (Subgroup.comap f)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem asserts that for any given type `G` with a `Group` instance and any two subgroups `H` and `K` of `G`, if `H` is a subset of `K`, then the inclusion homomorphism from `H` to `K` is injective. In other words, if we have two elements from `H` and they map to the same element in `K` through the inclusion homomorphism, then these two elements were originally the same element in `H`.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : Group G] {H K : Subgroup G} (h : H ≤ K), Function.Injective ⇑(Subgroup.inclusion h)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  A group homomorphism between two groups is injective if and only if its kernel is the trivial subgroup.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u} {β : Type v} [inst : Group α] [inst_1 : Group β] {f : α → β},\n  IsGroupHom f → (Function.Injective f ↔ ∀ (a : α), f a = 1 → a = 1)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  A function from a finite type to itself is injective if and only if it is surjective.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} [inst : Finite α] {f : α → α}, Function.Injective f ↔ Function.Surjective f"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  A homomorphism from a group to a monoid is injective if and only if its kernel consists only of the group's identity element.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {F : Type u_8} {G : Type u_9} {H : Type u_10} [inst : Group G] [inst_1 : MulOneClass H] [inst_2 : FunLike F G H]\n  [inst_3 : MonoidHomClass F G H] (f : F), Function.Injective ⇑f ↔ ∀ (a : G), f a = 1 → a = 1"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  A surjective endomorphism of a finite module over a commutative ring is injective.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u_1} [inst : CommRing R] {M : Type u_2} [inst_1 : AddCommGroup M] [inst_2 : Module R M]\n  [inst_3 : Module.Finite R M] (f : M →ₗ[R] M), Function.Surjective ⇑f → Function.Injective ⇑f"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Any injective polynomial map over an algebraic extension of a finite field is surjective. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {ι : Type u_1} {K : Type u_2} {R : Type u_3} [inst : Field K] [inst_1 : Finite K] [inst_2 : CommRing R]\n  [inst_3 : Finite ι] [inst_4 : Algebra K R],\n  Algebra.IsAlgebraic K R →\n    ∀ (ps : ι → MvPolynomial ι R),\n      (Function.Injective fun v i => (MvPolynomial.eval v) (ps i)) →\n        Function.Surjective fun v i => (MvPolynomial.eval v) (ps i)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: On a finite-dimensional space, an injective linear map is surjective. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V]\n  [inst_3 : FiniteDimensional K V] {f : V →ₗ[K] V}, Function.Injective ⇑f → Function.Surjective ⇑f"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: An additive group homomorphism is injective if its kernel is trivial.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u} {β : Type v} [inst : AddGroup α] [inst_1 : AddGroup β] {f : α → β},\n  IsAddGroupHom f → (Function.Injective f ↔ ∀ (a : α), f a = 0 → a = 0)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: The range of an injective group homomorphism is isomorphic to its domain. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"{G : Type u_1} →\n  [inst : Group G] →\n    {N : Type u_5} → [inst_1 : Group N] → {f : G →* N} → Function.Injective ⇑f → G ≃* ↥(MonoidHom.range f)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Any injective endomorphism of an Artinian module is surjective. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u_1} {M : Type u_2} [inst : Ring R] [inst_1 : AddCommGroup M] [inst_2 : Module R M]\n  [inst_3 : IsArtinian R M] (f : M →ₗ[R] M), Function.Injective ⇑f → Function.Surjective ⇑f"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Any surjective endomorphism of a Noetherian module is injective. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u_1} {M : Type u_2} [inst : Ring R] [inst_1 : AddCommGroup M] [inst_2 : Module R M]\n  [inst_3 : IsNoetherian R M] (f : M →ₗ[R] M), Function.Surjective ⇑f → Function.Injective ⇑f"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Every graph homomorphism from a complete graph is injective. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {V : Type u_1} {W : Type u_2} {G' : SimpleGraph W} (f : ⊤ →g G'), Function.Injective ⇑f"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A group homomorphism is injective iff its kernel is trivial. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u} {β : Type v} [inst : Group α] [inst_1 : Group β] {f : α → β},\n  IsGroupHom f → (Function.Injective f ↔ ∀ (a : α), f a = 1 → a = 1)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Every surjective homomorphism from a finitely generated free group to itself is injective.\n\nGive ONLY the Lean code"}]}
{"text":"Every positive even integer greater than $4$ can be written as the sum of two primes.","fullPrompt":[{"role":"system","content":"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code."},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: **Four squares theorem** \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (n : ℕ), ∃ a b c d, a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 = n"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  For every natural number n > 1, there exists a prime number p with n < p <= 2n.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (n : ℕ), n ≠ 0 → ∃ p, Nat.Prime p ∧ n < p ∧ p ≤ 2 * n"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Lagrange's **four squares theorem** for a prime number. Use `Nat.sum_four_squares` instead. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {p : ℕ}, Nat.Prime p → ∃ a b c d, a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 = p"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The theorem `Nat.Prime.two_le` states that for any natural number `p`, if `p` is prime, then `p` is greater than or equal to 2. In other words, it says that all prime numbers are at least 2.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {p : ℕ}, p.Prime → 2 ≤ p"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for any natural number `k`, the sum of the reciprocals of all prime numbers `p` that lie in the range `k ≤ p ≤ 4^(π(k-1)+1)` (where `π` is the prime-counting function) is at least `1/2`. Here, the prime numbers are considered as real numbers. The sum is calculated over the set difference of the primes below `(4 ^ (k.primesBelow.card + 1)).succ` and the primes below `k`.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (k : ℕ), 1 / 2 ≤ ((4 ^ (k.primesBelow.card + 1)).succ.primesBelow \\ k.primesBelow).sum fun p => 1 / ↑p"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem proves Bertrand's postulate for all natural numbers `n` that are greater than or equal to 512. Bertrand's postulate states that for any such `n`, there exists a prime number `p` that is greater than `n` and less than or equal to `2n`. In other words, for every sufficiently large natural number, there is at least one prime number between that number and twice that number.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (n : ℕ), 512 ≤ n → ∃ p, p.Prime ∧ n < p ∧ p ≤ 2 * n"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A positive natural number `n` can be expressed as the sum of two squares if and only if for every prime number `q` in its prime factorization, where `q` modulo 4 equals 3, the `q`-adic valuation of `n` (the highest power of `q` that divides `n`) is an even number. Note that the assumption `n > 0` is not required since for `n = 0`, both conditions are automatically satisfied; the right-hand side is true because by definition `padicValNat q 0 = 0`.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {n : ℕ}, (∃ x y, n = x ^ 2 + y ^ 2) ↔ ∀ {q : ℕ}, q.Prime → q % 4 = 3 → Even (padicValNat q n)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  For any natural number $n$, the product of $n$'s prime factors is a divisor of $n$.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (n : ℕ), (n.primeFactors.prod fun p => p) ∣ n"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  For all positive natural numbers `n`, $4^n \\leq 2\\times n \\times \\binom{2n}{n}$.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (n : ℕ), 0 < n → 4 ^ n ≤ 2 * n * n.centralBinom"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  Every natural number can be expressed as the sum of four squares of natural numbers.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (n : ℕ), ∃ a b c d, a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 = n"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  Every prime number can be expressed as the sum of the squares of four natural numbers.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {p : ℕ}, p.Prime → ∃ a b c d, a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 = p"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: Two pnats are coprime if their gcd is 1. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"ℕ+ → ℕ+ → Prop"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: **Bertrand's Postulate**: For any positive natural number, there is a prime which is greater than\nit, but no more than twice as large.\n\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (n : ℕ), n ≠ 0 → ∃ p, Nat.Prime p ∧ n < p ∧ p ≤ 2 * n"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: Positive integers biject with multisets of primes. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"ℕ+ ≃ PrimeMultiset"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Multiplication by positive integers is injective \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u_1} [inst : Semiring R] [self : BinomialRing R] (n : ℕ), n ≠ 0 → Function.Injective fun x => n • x"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Two prime powers with positive exponents are equal only when the primes and the\nexponents are equal. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {p q m n : ℕ}, Nat.Prime p → Nat.Prime q → p ^ (m + 1) = q ^ (n + 1) → p = q ∧ m = n"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The sum over primes `k ≤ p ≤ 4^(π(k-1)+1)` over `1/p` (as a real number) is at least `1/2`. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (k : ℕ),\n  1 / 2 ≤\n    Finset.sum (Nat.primesBelow (Nat.succ (4 ^ ((Nat.primesBelow k).card + 1))) \\ Nat.primesBelow k) fun p => 1 / ↑p"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The set of natural numbers that are sums of two squares is closed under multiplication. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {a b x y u v : ℕ}, a = x ^ 2 + y ^ 2 → b = u ^ 2 + v ^ 2 → ∃ r s, a * b = r ^ 2 + s ^ 2"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Every nonzero natural number has a unique prime factorization \n\nGive ONLY the Lean code"},{"role":"assistant","content":"Set.InjOn Nat.factorization {x | x ≠ 0}"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Every positive even integer greater than $4$ can be written as the sum of two primes.\n\nGive ONLY the Lean code"}]}
{"text":"Every matrix satisfies its own characteristic polynomial.","fullPrompt":[{"role":"system","content":"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code."},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  For any commutative ring with decidable equality and finite type `n`, the degree of the characteristic polynomial of a `n` by `n` matrix over that ring equals the cardinality of `n`.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u} [inst : CommRing R] {n : Type v} [inst_1 : DecidableEq n] [inst_2 : Fintype n] [inst_3 : Nontrivial R]   (M : Matrix n n R), degree (charpoly M) = ↑(Fintype.card n)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  For any commutative ring R, a non-trivial linear map f from a free and finite R-module M to M, and any basis b of M over R, the characteristic polynomials of f and its matrix representation with respect to basis b are equal.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u_1} {M : Type u_2} [inst : CommRing R] [inst_1 : Nontrivial R] [inst_2 : AddCommGroup M]\n  [inst_3 : Module R M] [inst_4 : Module.Free R M] [inst_5 : Module.Finite R M] (f : M →ₗ[R] M) {ι : Type w}\n  [inst_6 : DecidableEq ι] [inst_7 : Fintype ι] (b : Basis ι R M), ((LinearMap.toMatrix b b) f).charpoly = f.charpoly"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  The characteristic polynomial of any square matrix over a commutative ring with decidable equality has a leading coefficient of 1.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u} [inst : CommRing R] {n : Type v} [inst_1 : DecidableEq n] [inst_2 : Fintype n] (M : Matrix n n R),   Monic (charpoly M)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  The characteristic polynomial of a matrix, when evaluated at the matrix itself, yields the zero matrix.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u_1} [inst : CommRing R] {n : Type u_4} [inst_1 : DecidableEq n] [inst_2 : Fintype n] (M : Matrix n n R),\n  (Polynomial.aeval M) M.charpoly = 0"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The **Cayley-Hamilton Theorem**, that the characteristic polynomial of a matrix,\napplied to the matrix itself, is zero.\n\nThis holds over any commutative ring.\n\nSee `LinearMap.aeval_self_charpoly` for the equivalent statement about endomorphisms.\n\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u_1} [inst : CommRing R] {n : Type u_4} [inst_1 : DecidableEq n] [inst_2 : Fintype n] (M : Matrix n n R),   (Polynomial.aeval M) (Matrix.charpoly M) = 0"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for any commutative ring `R`, any finite type `n` with decidable equality, and any matrix `M` with entries in `R` and indices in `n`, if the row index `i` is not equal to the column index `j`, then the entry of the characteristic matrix of `M` at `(i, j)` is equal to the negation of the entry of `M` at `(i, j)` under the constant polynomial map. In other words, for non-diagonal entries, the characteristic matrix contains the negation of the original matrix's entries, converted to constant polynomials.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u_1} [inst : CommRing R] {n : Type u_4} [inst_1 : DecidableEq n] [inst_2 : Fintype n] (M : Matrix n n R)\n  (i j : n), i ≠ j → M.charmatrix i j = -Polynomial.C (M i j)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for any commutative ring `R`, any type `n` which has decidable equality and is finite, and any nontrivial element of `R`, the degree of the characteristic polynomial of a `n` by `n` matrix `M` with entries in `R` is equal to the cardinality (number of elements) of the type `n` (which represents the dimension of the matrix `M`). In mathematical terms, this theorem conveys that the degree of the characteristic polynomial of a square matrix is equal to the dimension of the matrix.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u} [inst : CommRing R] {n : Type v} [inst_1 : DecidableEq n] [inst_2 : Fintype n] [inst_3 : Nontrivial R]\n  (M : Matrix n n R), M.charpoly.degree = ↑(Fintype.card n)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The theorem `Matrix.charpoly_monic` states that for any type `R` with a commutative ring structure, for any finite type `n` with decidable equality, and for any matrix `M` of size `n x n` with entries in `R`, the characteristic polynomial of `M` is monic. In other words, the leading coefficient of the characteristic polynomial of any such matrix `M` is 1.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u} [inst : CommRing R] {n : Type v} [inst_1 : DecidableEq n] [inst_2 : Fintype n] (M : Matrix n n R),\n  M.charpoly.Monic"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The Cayley-Hamilton theorem states that the characteristic polynomial of a matrix, when applied to the matrix itself, yields zero. This theorem holds for any commutative ring. In particular, for any commutative ring `R`, and for any matrix `M` with entries in `R` and indices from a decidable and finite type `n`, the algebra homomorphism generated by applying the polynomial `Matrix.charpoly M` to the matrix `M` results in zero. There is an equivalent statement about endomorphisms, `LinearMap.aeval_self_charpoly`.\n\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u_1} [inst : CommRing R] {n : Type u_4} [inst_1 : DecidableEq n] [inst_2 : Fintype n] (M : Matrix n n R),\n  (Polynomial.aeval M) M.charpoly = 0"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  The characteristic polynomial of the multiplication-by-an-element map in a commutative algebra equals the minimal polynomial.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u} [inst : CommRing R] {S : Type u_1} [inst_1 : Ring S] [inst_2 : Algebra R S] (h : PowerBasis R S),\n  ((Algebra.leftMulMatrix h.basis) h.gen).charpoly = minpoly R h.gen"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  For any commutative ring R, a non-trivial linear map f from a free and finite R-module M to M, and any basis b of M over R, the characteristic polynomials of f and its matrix representation with respect to basis b are equal.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u_1} {M : Type u_2} [inst : CommRing R] [inst_1 : Nontrivial R] [inst_2 : AddCommGroup M]\n  [inst_3 : Module R M] [inst_4 : Module.Free R M] [inst_5 : Module.Finite R M] (f : M →ₗ[R] M) {ι : Type w}\n  [inst_6 : DecidableEq ι] [inst_7 : Fintype ι] (b : Basis ι R M), ((LinearMap.toMatrix b b) f).charpoly = f.charpoly"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  The characteristic polynomial of any square matrix over a commutative ring with decidable equality has a leading coefficient of 1.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u} [inst : CommRing R] {n : Type v} [inst_1 : DecidableEq n] [inst_2 : Fintype n] (M : Matrix n n R),\n  M.charpoly.Monic"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  The characteristic polynomial of a matrix, when evaluated at the matrix itself, yields the zero matrix.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u_1} [inst : CommRing R] {n : Type u_4} [inst_1 : DecidableEq n] [inst_2 : Fintype n] (M : Matrix n n R),\n  (Polynomial.aeval M) M.charpoly = 0"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: The determinant of a unit matrix is itself a unit. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"{n : Type u} → [inst : DecidableEq n] → [inst_1 : Fintype n] → {R : Type v} → [inst_2 : CommRing R] → GL n R →* Rˣ"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Every polynomial is the sum of its weighted homogeneous components. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u_1} {M : Type u_2} [inst : CommSemiring R] {σ : Type u_3} [inst_1 : AddCommMonoid M] (w : σ → M)\n  (φ : MvPolynomial σ R), (finsum fun m => (MvPolynomial.weightedHomogeneousComponent w m) φ) = φ"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Any matrix polynomial `p` is equivalent under evaluation to `p %ₘ M.charpoly`; that is, `p`\nis equivalent to a polynomial with degree less than the dimension of the matrix. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u} [inst : CommRing R] {n : Type v} [inst_1 : DecidableEq n] [inst_2 : Fintype n] (M : Matrix n n R)\n  (p : Polynomial R), (Polynomial.aeval M) p = (Polynomial.aeval M) (p %ₘ Matrix.charpoly M)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: `charpoly f` is the characteristic polynomial of the matrix of `f` in any basis. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u} {M : Type v} [inst : CommRing R] [inst_1 : Nontrivial R] [inst_2 : AddCommGroup M] [inst_3 : Module R M]\n  [inst_4 : Module.Free R M] [inst_5 : Module.Finite R M] (f : M →ₗ[R] M) {ι : Type w} [inst_6 : DecidableEq ι]\n  [inst_7 : Fintype ι] (b : Basis ι R M), Matrix.charpoly ((LinearMap.toMatrix b b) f) = LinearMap.charpoly f"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: The characteristic polynomial of a matrix `M` is given by $\\det (t I - M)$.\n\n\nGive ONLY the Lean code"},{"role":"assistant","content":"{R : Type u} →\n  [inst : CommRing R] → {n : Type w} → [inst_1 : DecidableEq n] → [inst_2 : Fintype n] → Matrix n n R → Polynomial R"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The minimal polynomial of a nonzero element has nonzero constant coefficient. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {A : Type u_1} {B : Type u_2} [inst : Field A] [inst_1 : Ring B] [inst_2 : IsDomain B] [inst_3 : Algebra A B] {x : B},\n  IsIntegral A x → x ≠ 0 → Polynomial.coeff (minpoly A x) 0 ≠ 0"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Every polynomial is a polynomial in finitely many variables. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {σ : Type u_1} {R : Type u_4} [inst : CommSemiring R] (p : MvPolynomial σ R),\n  ∃ n f, ∃ (_ : Function.Injective f), ∃ q, p = (MvPolynomial.rename f) q"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Every identity matrix is diagonal. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} {n : Type u_4} [inst : DecidableEq n] [inst_1 : Zero α] [inst_2 : One α], Matrix.IsDiag 1"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Every matrix satisfies its own characteristic polynomial.\n\nGive ONLY the Lean code"}]}
{"text":"The square root of an irrational number is irrational.","fullPrompt":[{"role":"system","content":"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code."},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  The golden ratio `(1 + √5) / 2` is not a rational number.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"Irrational goldenRatio"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  The square root of 2 is not a rational number.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"Irrational √2"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: **Irrationality of the Square Root of 2** \n\nGive ONLY the Lean code"},{"role":"assistant","content":"Irrational (Real.sqrt 2)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that if a real number is transcendental over the rational numbers, then that number is irrational. In other words, any real number that cannot be expressed as a root of a non-zero polynomial equation with coefficients in the rational numbers (which defines a transcendental number) is not equal to any rational number and hence, is irrational.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {r : ℝ}, Transcendental ℚ r → Irrational r"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The theorem `goldConj_irrational` states that the conjugate of the golden ratio, which is defined as `(1 - sqrt(5))/2`, is an irrational number. In other words, this number cannot be expressed as a ratio of two integers.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"Irrational goldenConj"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for any real number 'x', if the negation of 'x' (-x) is irrational (meaning that it cannot be expressed as a ratio of two integers), then 'x' itself is also irrational.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {x : ℝ}, Irrational (-x) → Irrational x"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This is the theorem of the \"Irrationality of the Square Root of 2\". It states that the square root of 2 is an irrational number. In other words, the square root of 2 is not equal to any rational number, where a rational number is a number that can be expressed as the quotient of two integers.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"Irrational √2"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  If the product of a rational number and a real number is an irrational number, then the real number is irrational.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (q : ℚ) {x : ℝ}, Irrational (x * ↑q) → Irrational x"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  The square root of 2 is not a rational number.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"Irrational √2"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  The sum of a rational number and an irrational number is irrational.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (q : ℚ) {x : ℝ}, Irrational x → Irrational (↑q + x)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  The square root of 5 minus 1, divided by 2, is an irrational number.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"Irrational goldenConj"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: Square root of a nonnegative real number. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"NNReal ≃o NNReal"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: Negation of rational numbers. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"ℚ → ℚ"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The natural square root is at most the real square root \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {a : ℕ}, ↑(Nat.sqrt a) ≤ Real.sqrt ↑a"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The golden ratio is irrational. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"Irrational goldenRatio"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: **Irrationality of the Square Root of 2** \n\nGive ONLY the Lean code"},{"role":"assistant","content":"Irrational (Real.sqrt 2)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The conjugate of the golden ratio is irrational. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"Irrational goldenConj"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: A real number is irrational if it is not equal to any rational number. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"ℝ → Prop"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A transcendental real number is irrational. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {r : ℝ}, Transcendental ℚ r → Irrational r"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The square root of an irrational number is irrational.\n\nGive ONLY the Lean code"}]}
{"text":"If the square of a number is even, the number itself is even.","fullPrompt":[{"role":"system","content":"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code."},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: If `m` and `n` are natural numbers, then the natural number `m^n` is even\nif and only if `m` is even and `n` is positive. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {m n : ℕ}, Even (m ^ n) ↔ Even m ∧ n ≠ 0"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  A natural number is even if and only if it is not odd. Equivalently, a natural number is even if and only if it can be written as 2 times some natural number, and it is odd if and only if it can be written as 2 times some natural number plus 1.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {n : ℕ}, Even n ↔ ¬Odd n"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  A natural number `n` is even if and only if `n` modulo 2 equals 0.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {n : ℕ}, Even n ↔ n % 2 = 0"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for all natural numbers `n`, the product of `n` and `n - 1` is an even number. In mathematical terms, this theorem can be written as: \"∀ n ∈ ℕ, n*(n - 1) is even.\" Here, a number is considered even if it can be expressed as twice another number, in this case, n*(n - 1) = 2*r for some `r`.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (n : ℕ), Even (n * (n - 1))"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for any natural number `n`, the number `n + 1` is even if and only if `n` is not even. In other words, if `n` is an odd number, then `n + 1` is an even number, and vice versa.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {m n : ℕ}, Even (m + n) = (Even m ↔ Even n)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for all natural numbers `m` and `n`, the sum `m + n` is even if and only if `m` and `n` are both even or both odd. In other words, the parity of the sum of two natural numbers is the same as the parity of the individual numbers. Here, `Even` is a property of a number that is defined to be true if the number can be expressed as the sum of two equal numbers.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {m n : ℕ}, Even (m + n) ↔ (Even m ↔ Even n)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem is stating that for every real number `x`, the square of `x` is equal to the square of `x`. In other words, the square of any real number is always consistent and equal to itself. The square of a number is calculated by raising it to the power of 2, thus `x ^ 2` represents the square of `x` in this context. It's a simple and straightforward mathematical identity.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (x : ℝ), x ^ 2 = x ^ 2"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  Every natural number can be expressed as an even number (the sum of two identical numbers) or an odd number (2 times an integer plus 1).\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (n : ℕ), Even n ∨ Odd n"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  For every real number x, x ^ 2 equals x ^ 2. (The square of a real number is self-equal.)\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (x : ℝ), x ^ 2 = x ^ 2"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  The sum of two natural numbers is even if and only if both numbers are even or both are odd.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {m n : ℕ}, Even (m + n) ↔ (Even m ↔ Even n)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  If a natural number is even, then its absolute value is even.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {n : ℤ}, Even n → Even n.natAbs"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: If `-1` is a square modulo the natural number `n`, then `n` is a sum of two squares. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {n : ℕ}, IsSquare (-1) → ∃ x y, n = x ^ 2 + y ^ 2"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: **Euler's four-square identity**, a version for natural numbers. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (a b c d x y z w : ℕ),\n  Int.natAbs (↑a * ↑x - ↑b * ↑y - ↑c * ↑z - ↑d * ↑w) ^ 2 + Int.natAbs (↑a * ↑y + ↑b * ↑x + ↑c * ↑w - ↑d * ↑z) ^ 2 +\n        Int.natAbs (↑a * ↑z - ↑b * ↑w + ↑c * ↑x + ↑d * ↑y) ^ 2 +\n      Int.natAbs (↑a * ↑w + ↑b * ↑z - ↑c * ↑y + ↑d * ↑x) ^ 2 =\n    (a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2) * (x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: In a finite field of characteristic `2`, all elements are squares. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {F : Type u_3} [inst : Field F] [inst_1 : Finite F], ringChar F = 2 → ∀ (a : F), IsSquare a"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Two natural numbers are equal if and only if they have the same multiples. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {m n : ℕ}, (∀ (a : ℕ), m ∣ a ↔ n ∣ a) ↔ m = n"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The convolution of two even functions is also even. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {𝕜 : Type u𝕜} {G : Type uG} {E : Type uE} {E' : Type uE'} {F : Type uF} [inst : NormedAddCommGroup E]\n  [inst_1 : NormedAddCommGroup E'] [inst_2 : NormedAddCommGroup F] {f : G → E} {g : G → E'} {x : G}\n  [inst_3 : NontriviallyNormedField 𝕜] [inst_4 : NormedSpace 𝕜 E] [inst_5 : NormedSpace 𝕜 E'] [inst_6 : NormedSpace 𝕜 F]\n  (L : E →L[𝕜] E' →L[𝕜] F) [inst_7 : MeasurableSpace G] {μ : MeasureTheory.Measure G} [inst_8 : NormedSpace ℝ F]\n  [inst_9 : AddCommGroup G] [inst_10 : MeasureTheory.Measure.IsAddLeftInvariant μ]\n  [inst_11 : MeasureTheory.Measure.IsNegInvariant μ] [inst_12 : MeasurableNeg G] [inst_13 : MeasurableAdd G],\n  (∀ᵐ (x : G) ∂μ, f (-x) = f x) → (∀ᵐ (x : G) ∂μ, g (-x) = g x) → convolution f g L (-x) = convolution f g L x"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: The symmetric square is equivalent to the second symmetric power. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"(α : Type u_4) → Sym2 α ≃ Sym α 2"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The set of natural numbers that are sums of two squares is closed under multiplication. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {a b x y u v : ℕ}, a = x ^ 2 + y ^ 2 → b = u ^ 2 + v ^ 2 → ∃ r s, a * b = r ^ 2 + s ^ 2"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The sum of two squares is zero iff both elements are zero. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u} [inst : LinearOrderedSemiring α] {a b : α} [inst_1 : ExistsAddOfLE α], a * a + b * b = 0 ↔ a = 0 ∧ b = 0"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: If the square of a number is even, the number itself is even.\n\nGive ONLY the Lean code"}]}
{"text":"In a finite commutative ring, all prime ideals are maximal.","fullPrompt":[{"role":"system","content":"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code."},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  For any commutative semiring R and prime ideal I, the image of I under the localization map at the complement of I is a unique maximal ideal equal to the maximal ideal of the local ring at I.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u_1} [inst : CommSemiring R] {I : Ideal R} [hI : I.IsPrime],\n  Ideal.map (algebraMap R (Localization.AtPrime I)) I = LocalRing.maximalIdeal (Localization I.primeCompl)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  The unique maximal ideal of a commutative semiring localized at the complement of a prime ideal maps back to the original prime ideal under the algebra homomorphism.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u_1} [inst : CommSemiring R] {I : Ideal R} [hI : I.IsPrime],\n  Ideal.comap (algebraMap R (Localization.AtPrime I)) (LocalRing.maximalIdeal (Localization I.primeCompl)) = I"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  In a one-dimensional commutative ring `R` with unit, a prime ideal `p` different from the bottom ideal is a maximal ideal.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u_4} [inst : CommRing R] [inst_1 : DimensionLEOne R] {p : Ideal R}, IsPrime p → p ≠ ⊥ → IsMaximal p"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  If every prime ideal in a commutative ring `R` is principal, then every ideal in `R` is principal.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u} [inst : CommRing R], (∀ (P : Ideal R), P.IsPrime → Submodule.IsPrincipal P) → IsPrincipalIdealRing R"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  In a commutative semiring, a maximal ideal is a prime ideal.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u} [inst : CommSemiring α] {I : Ideal α}, Ideal.IsMaximal I → Ideal.IsPrime I"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for any commutative ring `R` and any ideal `I` of `R`, `I` is a maximal ideal if and only if the quotient of `R` by `I`, denoted as `R/I`, is a field. In other words, it establishes a one-to-one correspondence between the maximal ideals in a ring and the fields obtained by taking the quotient of the ring by these ideals.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u} [inst : CommRing R] (I : Ideal R), I.IsMaximal ↔ IsField (R ⧸ I)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for a given type `R` which forms a commutative ring and has dimension less than or equal to one, if `p` is a prime ideal and it is not the bottom element (the smallest ideal, usually `{0}`), then `p` is a maximal ideal. In the language of ring theory, a prime ideal of a commutative, one-dimensional ring that is not the zero ideal is necessarily a maximal ideal.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u_4} [inst : CommRing R] [inst_1 : Ring.DimensionLEOne R] {p : Ideal R}, p.IsPrime → p ≠ ⊥ → p.IsMaximal"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for any commutative ring `R` with a finite set of maximal ideals, any invertible ideal `I` in `R` is principal. In other words, if we have a commutative ring and the number of its maximal ideals is finite, then any ideal in that ring which has an inverse (i.e., it is a unit) can be generated by a single element.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u_1} [inst : CommRing R], {I | I.IsMaximal}.Finite → ∀ {I : Ideal R}, IsUnit ↑I → Submodule.IsPrincipal I"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for any commutative ring `R` and an ideal `I` of `R`, if the quotient of `R` by `I` forms a field, then the ideal `I` is a maximal ideal. In the context of ring theory, a maximal ideal is an ideal that is maximal in the set of all proper ideals, i.e., it is larger than all other proper ideals, but is not the entire ring itself. This theorem is essentially a characterization of maximal ideals in terms of quotient fields.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u} [inst : CommRing R] (I : Ideal R), IsField (R ⧸ I) → I.IsMaximal"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  In commutative ring theory, an ideal is maximal if and only if the quotient ring forms a field.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u} [inst : CommRing R] (I : Ideal R), IsField (R ⧸ I) → I.IsMaximal"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  In a commutative semiring, a maximal ideal is a prime ideal.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u} [inst : CommSemiring α] {I : Ideal α}, I.IsMaximal → I.IsPrime"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  In a commutative ring with finite numbers of maximal ideas, any invertible ideal is principal.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u_1} [inst : CommRing R], {I | I.IsMaximal}.Finite → ∀ {I : Ideal R}, IsUnit ↑I → Submodule.IsPrincipal I"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  In any commutative Artinian ring, the set of maximal ideals is finite.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (R : Type u_1) [inst : CommRing R] [inst_1 : IsArtinianRing R], {I | I.IsMaximal}.Finite"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: An invertible fractional ideal of a commutative ring with finitely many maximal ideals is principal.\n\nhttps://math.stackexchange.com/a/95857 \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u_1} [inst : CommRing R] {A : Type u_2} [inst_1 : CommRing A] [inst_2 : Algebra R A] {S : Submonoid R}\n  [inst_3 : IsLocalization S A],\n  S ≤ nonZeroDivisors R →\n    Set.Finite {I | Ideal.IsMaximal I} → ∀ (I I' : FractionalIdeal S A), I * I' = 1 → Submodule.IsPrincipal ↑I"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Any finitely generated ideal is principal. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u} [inst : CommRing R] [self : IsBezout R] (I : Ideal R), Ideal.FG I → Submodule.IsPrincipal I"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Krull's theorem: a nontrivial ring has a maximal ideal. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (α : Type u) [inst : Semiring α] [inst_1 : Nontrivial α], ∃ M, Ideal.IsMaximal M"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: An invertible ideal in a commutative ring with finitely many maximal ideals is principal.\n\nhttps://math.stackexchange.com/a/95857 \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u_1} [inst : CommRing R],\n  Set.Finite {I | Ideal.IsMaximal I} → ∀ {I : Ideal R}, IsUnit ↑I → Submodule.IsPrincipal I"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Maximal ideals in complete normed rings are closed. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u_1} [inst : NormedRing R] [inst_1 : CompleteSpace R] {I : Ideal R} [hI : Ideal.IsMaximal I], IsClosed ↑I"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: If the quotient by an ideal is a field, then the ideal is maximal. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u} [inst : CommRing R] (I : Ideal R), IsField (R ⧸ I) → Ideal.IsMaximal I"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The quotient of a ring by an ideal is a field iff the ideal is maximal. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u} [inst : CommRing R] (I : Ideal R), Ideal.IsMaximal I ↔ IsField (R ⧸ I)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: If all prime ideals in a commutative ring are principal, so are all other ideals. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u} [inst : CommRing R],\n  (∀ (P : Ideal R), Ideal.IsPrime P → Submodule.IsPrincipal P) → IsPrincipalIdealRing R"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: In a finite commutative ring, all prime ideals are maximal.\n\nGive ONLY the Lean code"}]}
{"text":"A topological space $X$ is Hausdorff if and only if the diagonal is a closed set in $X × X$.","fullPrompt":[{"role":"system","content":"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code."},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  A topological space `X` is T2 (Hausdorff) if and only if for all distinct points `x` and `y` in `X`, the neighborhood filters of `x` and `y` have empty intersection (i.e., their infimum is the bottom element).\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X : Type u_1} [inst : TopologicalSpace X], T2Space X ↔ Pairwise fun x y => Disjoint (𝓝 x) (𝓝 y)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  In a compact uniform space, the uniformity is equivalent to the filter of neighborhoods of the diagonal.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} [inst : UniformSpace α] [inst_1 : CompactSpace α], nhdsSet (Set.diagonal α) = uniformity α"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  A topological space X equipped with a topology is a T2 space if and only if the diagonal set in X × X is a closed set in the product topology.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X : Type u_1} [inst : TopologicalSpace X], T2Space X ↔ IsClosed (diagonal X)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that the underlying topological space of any compactly generated Hausdorff space (`CompHaus`) is a T2 space. In the realm of topology, a T2 space, also known as a Hausdorff space, is a particular type of topological space where any two distinct points can be separated by disjoint open sets. Therefore, this theorem is affirming the Hausdorff property for compactly generated Hausdorff spaces.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (self : CompHaus), T2Space ↑self.toTop"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for any type `X` equipped with a topological structure, `X` is a T2-space (also known as a Hausdorff space) if and only if for every pair of distinct elements `x` and `y` in `X`, the neighborhoods of `x` and `y` are disjoint. In mathematical terms, the neighborhoods are disjoint if their intersection is the bottom element, symbolically represented as `⊥`. Here, 'disjoint' is generalized from the notion of disjoint sets to elements of a lattice by defining two elements as disjoint if their infimum (greatest lower bound) is the bottom element.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X : Type u_1} [inst : TopologicalSpace X], T2Space X ↔ Pairwise fun x y => Disjoint (nhds x) (nhds y)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The theorem `t2_iff_isClosed_diagonal` states that for any type `X` equipped with a topology (given by the instance `TopologicalSpace X`), `X` is a T2 space if and only if the diagonal set of `X` (which contains all pairs of the form `(a, a)`) is a closed set in the product topology on `X × X`. Here, a T2 space or Hausdorff space is a topological space in which distinct points have disjoint neighborhoods.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X : Type u_1} [inst : TopologicalSpace X], T2Space X ↔ IsClosed (Set.diagonal X)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  A topological space is T2 (Hausdorff) if and only if the neighborhood filters of any two distinct points have empty intersection.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X : Type u_1} [inst : TopologicalSpace X], T2Space X ↔ ∀ {x y : X}, (nhds x ⊓ nhds y).NeBot → x = y"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  A topological space `X` is T2 (Hausdorff) if and only if for all distinct points `x` and `y` in `X`, the neighborhood filters of `x` and `y` have empty intersection (i.e., their infimum is the bottom element).\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X : Type u_1} [inst : TopologicalSpace X], T2Space X ↔ Pairwise fun x y => Disjoint (nhds x) (nhds y)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  In a proper Hausdorff space, a set is compact if and only if it is both closed and bounded.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u} [inst : PseudoMetricSpace α] {s : Set α} [inst_1 : T2Space α] [inst_2 : ProperSpace α],\n  IsCompact s ↔ IsClosed s ∧ Bornology.IsBounded s"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  A topological space X equipped with a topology is a T2 space if and only if the diagonal set in X × X is a closed set in the product topology.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X : Type u_1} [inst : TopologicalSpace X], T2Space X ↔ IsClosed (Set.diagonal X)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Two closed sets are at zero Hausdorff distance if and only if they coincide. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u} [inst : PseudoMetricSpace α] {s t : Set α},\n  IsClosed s → IsClosed t → EMetric.hausdorffEdist s t ≠ ⊤ → (Metric.hausdorffDist s t = 0 ↔ s = t)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Two closed sets are at zero Hausdorff edistance if and only if they coincide. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u} [inst : PseudoEMetricSpace α] {s t : Set α},\n  IsClosed s → IsClosed t → (EMetric.hausdorffEdist s t = 0 ↔ s = t)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The Hausdorff distances between two sets and their closures coincide. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u} [inst : PseudoMetricSpace α] {s t : Set α},\n  Metric.hausdorffDist (closure s) (closure t) = Metric.hausdorffDist s t"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: In a complete space, the type of closed subsets is complete for the\nHausdorff edistance. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u} [inst : EMetricSpace α] [inst_1 : CompleteSpace α], CompleteSpace (TopologicalSpace.Closeds α)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Every two points in a Hausdorff space admit disjoint open neighbourhoods. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X : Type u} [inst : TopologicalSpace X] [self : T2Space X],\n  Pairwise fun x y => ∃ u v, IsOpen u ∧ IsOpen v ∧ x ∈ u ∧ y ∈ v ∧ Disjoint u v"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: The category of compact Hausdorff spaces is reflective in the category of topological spaces.\n\n\nGive ONLY the Lean code"},{"role":"assistant","content":"CategoryTheory.Reflective compHausToTop"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The **Heine–Borel theorem**:\nIn a proper Hausdorff space, a set is compact if and only if it is closed and bounded. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u} [inst : PseudoMetricSpace α] {s : Set α} [inst_1 : T2Space α] [inst_2 : ProperSpace α],\n  IsCompact s ↔ IsClosed s ∧ Bornology.IsBounded s"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A continuous map from a compact space to a Hausdorff space is a closed map. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] [inst_2 : CompactSpace X]\n  [inst_3 : T2Space Y] {f : X → Y}, Continuous f → IsClosedMap f"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A topological space $X$ is Hausdorff if and only if the diagonal is a closed set in $X × X$.\n\nGive ONLY the Lean code"}]}
{"text":"If every point of a subset of a topological space is contained in some open set, the subset itself is open.","fullPrompt":[{"role":"system","content":"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code."},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  A set `s` of type `X` in a topological space is equal to its interior if and only if it is open.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X : Type u} {s : Set X} [inst : TopologicalSpace X], s ⊆ interior s ↔ IsOpen s"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  In any topological space, the interior of a set is an open set.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X : Type u} {s : Set X} [inst : TopologicalSpace X], IsOpen (interior s)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  For any topological space `(α, top)`, every element of `top.opens α` is an open set in `α`.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_2} [inst : TopologicalSpace α] (U : TopologicalSpace.Opens α), IsOpen ↑U"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  In the indiscrete topology, a set is open if and only if it is either the empty set or the entire space.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_2} (U : Set α), IsOpen U ↔ U = ∅ ∨ U = Set.univ"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  A set in a topological space is open if and only if every element in the set is contained in some open subset of the set.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X : Type u} {s : Set X} [inst : TopologicalSpace X], IsOpen s ↔ ∀ x ∈ s, ∃ t ⊆ s, IsOpen t ∧ x ∈ t"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The theorem states that, for any given point in a topological space, the connected component of that point is always a subset of the intersection of all its clopen (both closed and open) neighborhoods. In other words, if you take a point and find all the connected sets that contain this point, and then take the union of these connected sets, this resulting set will always be a subset of the intersection of all the clopen neighborhoods of the given point.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u} [inst : TopologicalSpace α] {x : α}, connectedComponent x ⊆ ⋂ Z, ↑Z"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that in any topological space `X`, if we have a collection `s` of subsets of `X`, where each subset is an open set, then the union of all subsets in this collection (denoted as `s.sUnion`) is also an open set. In other words, in the context of topology, the union of a family of open sets remains open.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X : Type u} [self : TopologicalSpace X] (s : Set (Set X)),\n  (∀ t ∈ s, TopologicalSpace.IsOpen t) → TopologicalSpace.IsOpen s.sUnion"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for any topological space `X` and any open subset `U` of `X`, any point `x` in `U` (considered as a type of elements of `U`) is indeed an element of `U`. In mathematical terms, if `X` is a topological space and `U` is an open subset of `X`, then every point in `U` actually belongs to `U`. This might seem tautological, but it's an important base case in certain types of reasoning about topological spaces and presheaves.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X : TopCat} {U : TopologicalSpace.Opens ↑X} (x : ↥U), ↑x ∈ U"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for any type `X` and any set `s` of type `X` in a given topological space, the set `s` is a subset of its interior if and only if the set `s` is open. In terms of topology, this means that a set is open (i.e., each point in the set is an interior point) if and only if all of its points are interior points, which is true by definition of an open set.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X : Type u} {s : Set X} [inst : TopologicalSpace X], s ⊆ interior s ↔ IsOpen s"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  In any topological space, the interior of a set is a subset of the set itself.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X : Type u} {s : Set X} [inst : TopologicalSpace X], interior s ⊆ s"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  If every subset in a collection of open subsets of a topological space is open, then their union is also open.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X : Type u} [inst : TopologicalSpace X] {s : Set (Set X)}, (∀ t ∈ s, IsOpen t) → IsOpen s.sUnion"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  In a discrete topological space, every subset is open.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : DiscreteTopology α] (s : Set α), IsOpen s"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  A set in a topological space is open if and only if every element in the set is contained in some open subset of the set.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X : Type u} {s : Set X} [inst : TopologicalSpace X], IsOpen s ↔ ∀ x ∈ s, ∃ t ⊆ s, IsOpen t ∧ x ∈ t"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: A subset of a topological space is homeomorphic to its image under a homeomorphism.\n\n\nGive ONLY the Lean code"},{"role":"assistant","content":"{X : Type u_1} →\n  {Y : Type u_2} →\n    [inst : TopologicalSpace X] → [inst_1 : TopologicalSpace Y] → (e : X ≃ₜ Y) → (s : Set X) → ↑s ≃ₜ ↑(⇑e '' s)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The closure of every open set is open. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X : Type u} [inst : TopologicalSpace X] [self : ExtremallyDisconnected X] (U : Set X), IsOpen U → IsOpen (closure U)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A closed subset of a compact set is a compact set. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X : Type u} [inst : TopologicalSpace X] {s t : Set X}, IsCompact s → IsClosed t → t ⊆ s → IsCompact t"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: An open set in the indiscrete topology is either empty or the whole space. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_5} [t : TopologicalSpace α], t = ⊤ → ∀ (U : TopologicalSpace.Opens α), U = ⊥ ∨ U = ⊤"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Characterization of when a subset of the space of points is open. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (L : Type u_1) [inst : CompleteLattice L] (U : Set (Locale.PT L)), IsOpen U ↔ ∃ u, {x | x u} = U"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Every member of an open set in a compact Hausdorff totally disconnected space\nis contained in a clopen set contained in the open set.  \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : T2Space X] [inst_2 : CompactSpace X]\n  [inst_3 : TotallyDisconnectedSpace X] {x : X} {U : Set X}, IsOpen U → x ∈ U → ∃ V, IsClopen V ∧ x ∈ V ∧ V ⊆ U"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: The inclusion of the top open subset (i.e. the whole space) is an isomorphism.\n\n\nGive ONLY the Lean code"},{"role":"assistant","content":"(X : TopCat) → (TopologicalSpace.Opens.toTopCat X).obj ⊤ ≅ X"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: A set is dense in a topological space if every point belongs to its closure. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"{X : Type u} → [inst : TopologicalSpace X] → Set X → Prop"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: If every point of a subset of a topological space is contained in some open set, the subset itself is open.\n\nGive ONLY the Lean code"}]}
{"text":"Every non-identity element of a free group is of infinite order.","fullPrompt":[{"role":"system","content":"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code."},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  If `f` is a homomorphism between additive monoids `G` and `H`, and `x` in `G` has finite additive order `n`, then `f(x)` has finite additive order `n` in `H`.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} {H : Type u_2} [inst : AddMonoid G] [inst_1 : AddMonoid H] (f : G →+ H) {x : G},\n  IsOfFinAddOrder x → IsOfFinAddOrder (f x)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  In a torsion-free monoid, the order of every non-identity element is infinite.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} [inst : Monoid α], Monoid.IsTorsionFree α → Monoid.minOrder α = ⊤"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that if a group has an exponent, then the group is torsion. In other words, for any group `G`, if there exists a positive integer `n` such that raising any element `g` of the group to the power `n` gives the identity element (`g^n = 1`), then all elements of the group `G` are of finite order. Here, an element being \"of finite order\" means that there exists some positive integer `m` such that when the element is raised to the `m`th power, it also yields the identity element.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : Group G], Monoid.ExponentExists G → Monoid.IsTorsion G"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for any commutative group `G`, the quotient group formed by dividing `G` with its torsion subgroup is a torsion-free group. Here, a torsion-free group is defined as a group in which only the identity element (1) has a finite order. In other words, the result of dividing a group by its torsion subgroup removes all elements of finite order (except for the identity), thereby creating a group where every non-identity element has infinite order, i.e., a torsion-free group.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (G : Type u_1) [inst : CommGroup G], Monoid.IsTorsionFree (G ⧸ CommGroup.torsion G)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that a nontrivial torsion group is not torsion-free. In other words, in the context of a group structure `G` (which is assumed to be nontrivial, meaning it has at least one element that is not the identity), if `G` satisfies the property that all of its elements have finite order (meaning for each element, there is a positive integer `n` such that raising the element to the `n`-th power gives the identity), then it cannot also satisfy the property of being torsion-free (meaning, apart from the identity, none of its elements have finite order).\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : Group G] [hN : Nontrivial G], Monoid.IsTorsion G → ¬Monoid.IsTorsionFree G"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that a nontrivial torsion-free group is not a torsion group. In more detail, for any group `G` which is nontrivial (i.e., it has at least one element that is not the identity), if `G` is torsion-free (meaning every element in the group that isn't the identity has infinite order), then `G` cannot be a torsion group (a group where every element has finite order).\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : Group G] [hN : Nontrivial G], Monoid.IsTorsionFree G → ¬Monoid.IsTorsion G"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  Every element in a finite additive group has finite additive order.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : AddGroup G] [inst_1 : Finite G], AddMonoid.IsTorsion G"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  A nontrivial torsion-free group has no elements of finite order.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : Group G] [hN : Nontrivial G], Monoid.IsTorsionFree G → ¬Monoid.IsTorsion G"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  In an additive group with a nontrivial structure, if every element has finite order, then the group contains a non-zero element of finite order.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : AddGroup G] [hN : Nontrivial G], AddMonoid.IsTorsion G → ¬AddMonoid.IsTorsionFree G"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  In a torsion-free monoid, the order of every non-identity element is infinite.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} [inst : Monoid α], Monoid.IsTorsionFree α → Monoid.minOrder α = ⊤"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Elements of finite order are of finite order in submonoids.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : AddMonoid G] {H : AddSubmonoid G} {x : ↥H}, IsOfFinAddOrder ↑x ↔ IsOfFinAddOrder x"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The image of an element of finite order has finite order. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} {H : Type u_2} [inst : Monoid G] [inst_1 : Monoid H] (f : G →* H) {x : G},\n  IsOfFinOrder x → IsOfFinOrder (f x)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: Any free group is isomorphic to \"the\" free group. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"(G : Type u_2) → [inst : Group G] → [inst_1 : IsFreeGroup G] → FreeGroup (IsFreeGroup.Generators G) ≃* G"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A monoid is not a torsion monoid if it has an element of infinite order. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (G : Type u_1) [inst : Monoid G], ¬Monoid.IsTorsion G ↔ ∃ g, ¬IsOfFinOrder g"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: The submonoid generated by an element is a group if that element has finite order. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"{G : Type u_1} → [inst : Monoid G] → {x : G} → IsOfFinOrder x → Group ↥(Submonoid.powers x)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A group element has finite order iff its order is positive. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : Monoid G] {x : G}, 0 < orderOf x ↔ IsOfFinOrder x"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Every nonzero element of a group with zero is invertible. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} [self : LinearOrderedCommGroupWithZero α] (a : α), a ≠ 0 → a * a⁻¹ = 1"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Inverses of elements of finite order have finite order. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : Group G] {x : G}, IsOfFinOrder x⁻¹ ↔ IsOfFinOrder x"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Every non-identity element of a free group is of infinite order.\n\nGive ONLY the Lean code"}]}
{"text":"An element of a discrete valuation ring is a unit if and only if it has a valuation of zero.","fullPrompt":[{"role":"system","content":"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code."},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  If a commutative ring `R` is an integral domain satisfying `DiscreteValuationRing.HasUnitMulPowIrreducibleFactorization` for some irreducible element `p`, then `R` is a discrete valuation ring.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u} [inst : CommRing R] [inst_1 : IsDomain R],\n  DiscreteValuationRing.HasUnitMulPowIrreducibleFactorization R → DiscreteValuationRing R"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: An integral domain in which there is an irreducible element `p`\nsuch that every nonzero element is associated to a power of `p`\nis a discrete valuation ring.\n\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u} [inst : CommRing R] [inst_1 : IsDomain R],   DiscreteValuationRing.HasUnitMulPowIrreducibleFactorization R → DiscreteValuationRing R"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  For any division ring `K` and valuation `v` on `K` into a linear ordered commutative monoid `Γ₀` with zero, `v(x) = 0` if and only if `x = 0`.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {K : Type u_1} [inst : DivisionRing K] {Γ₀ : Type u_4} [inst_1 : LinearOrderedCommMonoidWithZero Γ₀]\n  [inst_2 : Nontrivial Γ₀] (v : Valuation K Γ₀) {x : K}, v x = 0 ↔ x = 0"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: If `v` is a valuation on a division ring then `v(x) = 0` iff `x = 0`. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {K : Type u_1} [inst : DivisionRing K] {Γ₀ : Type u_4} [inst_1 : LinearOrderedCommMonoidWithZero Γ₀]   [inst_2 : Nontrivial Γ₀] (v : Valuation K Γ₀) {x : K}, v x = 0 ↔ x = 0"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The theorem `DiscreteValuationRing.ofHasUnitMulPowIrreducibleFactorization` states that for any type `R` which has a commutative ring structure and is an integral domain, if `R` satisfies the condition `DiscreteValuationRing.HasUnitMulPowIrreducibleFactorization`, which means there exists an irreducible element `p` in `R` such that every nonzero element in `R` is associated with a power of `p`, then `R` is a discrete valuation ring.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u} [inst : CommRing R] [inst_1 : IsDomain R],\n  DiscreteValuationRing.HasUnitMulPowIrreducibleFactorization R → DiscreteValuationRing R"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The theorem `Valuation.map_zero` states that for any ring `R` and any linearly ordered commutative monoid with zero `Γ₀`, the valuation `v` of the zero element of `R` is always zero. In mathematical terms, this can be expressed as ∀v : Valuation R Γ₀, v(0) = 0. This theorem essentially encapsulates the property of valuations that they map the zero element of a ring to the zero element of the ordered monoid.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u_3} {Γ₀ : Type u_4} [inst : Ring R] [inst_1 : LinearOrderedCommMonoidWithZero Γ₀] (v : Valuation R Γ₀),\n  v 0 = 0"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for any division ring `K` and any value `x` from this division ring, if `v` is a valuation on `K` into a type `Γ₀` (which is a linear ordered commutative monoid with zero where zero is not the only element), then the valuation `v(x)` equals zero if and only if `x` equals zero. This means that a valuation `v` maps zero to zero and only zero to zero in the context of a division ring.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {K : Type u_1} [inst : DivisionRing K] {Γ₀ : Type u_4} [inst_1 : LinearOrderedCommMonoidWithZero Γ₀]\n  [inst_2 : Nontrivial Γ₀] (v : Valuation K Γ₀) {x : K}, v x = 0 ↔ x = 0"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  In a group with a zero element, an element is a unit if and only if it is not equal to the zero element.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G₀ : Type u_3} [inst : GroupWithZero G₀] {a : G₀}, IsUnit a ↔ a ≠ 0"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  Two valuations from a ring to a linearly ordered commutative monoid with zero are equal if and only if they assign the same value to every ring element.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u_3} {Γ₀ : Type u_4} [inst : Ring R] [inst_1 : LinearOrderedCommMonoidWithZero Γ₀] {v₁ v₂ : Valuation R Γ₀},\n  v₁ = v₂ ↔ ∀ (r : R), v₁ r = v₂ r"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  In a Discrete Valuation Ring, an element is irreducible if and only if it generates the maximal ideal.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u} [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : DiscreteValuationRing R] (ϖ : R),\n  Irreducible ϖ ↔ LocalRing.maximalIdeal R = Ideal.span {ϖ}"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  In a commutative ring, an element belongs to the zero fractional ideal if and only if it is zero.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u_1} [inst : CommRing R] (S : Submonoid R) {P : Type u_2} [inst_1 : CommRing P] [inst_2 : Algebra R P]\n  {x : P}, x ∈ 0 ↔ x = 0"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: Any valuation ring induces a valuation on its fraction field. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"(A : Type u) →\n  [inst : CommRing A] →\n    (K : Type v) →\n      [inst_1 : Field K] →\n        [inst_2 : Algebra A K] →\n          [inst_3 : IsDomain A] →\n            [inst_4 : ValuationRing A] → [inst_5 : IsFractionRing A K] → Valuation K (ValuationRing.ValueGroup A K)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A ring is a `ℚ`-algebra iff it has equal characteristic zero. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (R : Type u_1) [inst : CommRing R], Nonempty (Algebra ℚ R) ↔ ∀ (I : Ideal R), I ≠ ⊤ → CharZero (R ⧸ I)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A unique factorization domain with at least one irreducible element\nin which all irreducible elements are associated\nis a discrete valuation ring.\n\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u} [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : UniqueFactorizationMonoid R],\n  (∃ p, Irreducible p) → (∀ ⦃p q : R⦄, Irreducible p → Irreducible q → Associated p q) → DiscreteValuationRing R"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: In a monoid with zero, if zero equals one, then zero is the only element. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {M₀ : Type u_2} [inst : MulZeroOneClass M₀], 0 = 1 → ∀ (a : M₀), a = 0"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A product of ideals in an integral domain is zero if and only if one of the terms is zero. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u_2} [inst : CommRing R] [inst_1 : IsDomain R] {s : Multiset (Ideal R)}, Multiset.prod s = ⊥ ↔ ⊥ ∈ s"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: The value group of the valuation ring `A`. Note: this is actually a group with zero. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"(A : Type u) → [inst : CommRing A] → (K : Type v) → [inst_1 : Field K] → [inst : Algebra A K] → Type v"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: The ring of integers under a given valuation is the subring of elements with valuation ≤ 1. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"{R : Type u} →\n  {Γ₀ : Type v} → [inst : Ring R] → [inst_1 : LinearOrderedCommGroupWithZero Γ₀] → Valuation R Γ₀ → Subring R"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: If `v` is a valuation on a division ring then `v(x) = 0` iff `x = 0`. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {K : Type u_1} [inst : DivisionRing K] {Γ₀ : Type u_4} [inst_1 : LinearOrderedCommMonoidWithZero Γ₀]\n  [inst_2 : Nontrivial Γ₀] (v : Valuation K Γ₀) {x : K}, v x = 0 ↔ x = 0"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: An element of a discrete valuation ring is a unit if and only if it has a valuation of zero.\n\nGive ONLY the Lean code"}]}
{"text":"For any two relatively prime positive integers $a$ and $b$, every sufficiently large natural number $N$ can be written as a linear combination $ax + by$ of $a$ and $b$, where both $x$ and $y$ are natural numbers.","fullPrompt":[{"role":"system","content":"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code."},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  If `x` and `y` are elements of a cancellative commutative monoid with zero, `p` is a prime element, and `p^n = axy` for some natural number `n`, then there exist natural numbers `i`, `j` and elements `b`, `c` in the monoid such that `i + j = n`, `a = bc`, `x = bp^i`, and `y = cp^j`.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u_1} [inst : CancelCommMonoidWithZero R] {x y a p : R} {n : ℕ},\n  Prime p → x * y = a * p ^ n → ∃ i j b c, i + j = n ∧ a = b * c ∧ x = b * p ^ i ∧ y = c * p ^ j"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: **Bézout's lemma**: given `x y : ℕ`, `gcd x y = x * a + y * b`, where `a = gcd_a x y` and\n`b = gcd_b x y` are computed by the extended Euclidean algorithm.\n\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (x y : ℕ), ↑(Nat.gcd x y) = ↑x * Nat.gcdA x y + ↑y * Nat.gcdB x y"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  If two natural numbers `a` and `b` are coprime, then the prime factorization of their product `a * b` is the concatenation of the prime factorizations of `a` and `b`.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {a b : ℕ}, a.Coprime b → (a * b).factorization = a.factorization + b.factorization"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: **Four squares theorem** \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (n : ℕ), ∃ a b c d, a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 = n"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  The greatest common divisor of two nonzero integers `a` and `b` is the unique positive integer `d` such that `d` can be expressed as a linear combination of `a` and `b` with integer coefficients.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {a b : ℤ}, a ≠ 0 → IsLeast {n | 0 < n ∧ ∃ x y, ↑n = a * x + b * y} (a.gcd b)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Lagrange's **four squares theorem** for a prime number. Use `Nat.sum_four_squares` instead. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {p : ℕ}, Nat.Prime p → ∃ a b c d, a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 = p"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for any two natural numbers `a` and `b`, `a` is a divisor of the product `a * b`. In mathematical terms, this is the principle that any number `a` divides its own multiplication with any other number `b`.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (a b : ℕ), a ∣ a * b"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for any two natural numbers `a` and `b`, `a` is a divisor of the product of `b` and `a`. In the context of number theory, if we multiply `a` with any natural number `b`, `a` will always divide the resulting product.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (a b : ℕ), a ∣ b * a"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for any two nonzero integers `a` and `b`, the greatest common divisor (gcd) of `a` and `b` is the smallest positive natural number that can be expressed as `a * x + b * y` for some integers `x` and `y`. In other words, the gcd of `a` and `b` is the least positive element of the set of all natural numbers `n` such that `n` can be written as a linear combination of `a` and `b` with integer coefficients.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {a b : ℤ}, a ≠ 0 → IsLeast {n | 0 < n ∧ ∃ x y, ↑n = a * x + b * y} (a.gcd b)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  The greatest common divisor of natural numbers `x` and `y` can be expressed as a linear combination of `x` and `y`, i.e., `gcd x y = x * a + y * b` for some integers `a` and `b`.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (x y : ℕ), ↑(x.gcd y) = ↑x * x.gcdA y + ↑y * x.gcdB y"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  If two natural numbers `a` and `b` are coprime, then the prime factorization of their product `a * b` is the concatenation of the prime factorizations of `a` and `b`.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {a b : ℕ}, a.Coprime b → (a * b).factorization = a.factorization + b.factorization"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  For any integers 'a' and 'b' with 'a' ≤ 'b', there exists a natural number 'n' such that 'b' = 'a' + 'n'.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {a b : ℤ}, a ≤ b → ∃ n, b - a = ↑n"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  For all nonzero natural numbers a and b, the prime factorizations of a * b are equal to the sum of the prime factorizations of a and b.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {a b : ℕ}, a ≠ 0 → b ≠ 0 → (a * b).factorization = a.factorization + b.factorization"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Two natural numbers are equal if and only if they have the same multiples. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {m n : ℕ}, (∀ (a : ℕ), m ∣ a ↔ n ∣ a) ↔ m = n"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: We relate a finite product over primes to an infinite sum over smooth numbers. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u_1} [inst : NormedCommRing R] [inst_1 : CompleteSpace R] {f : ℕ → R},\n  f 1 = 1 →\n    (∀ {m n : ℕ}, Nat.Coprime m n → f (m * n) = f m * f n) →\n      (∀ {p : ℕ}, Nat.Prime p → Summable fun n => ‖f (p ^ n)‖) →\n        ∀ (N : ℕ),\n          (Summable fun m => ‖f ↑m‖) ∧\n            HasSum (fun m => f ↑m) (Finset.prod (Nat.primesBelow N) fun p => ∑' (n : ℕ), f (p ^ n))"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: Multiplication by a natural number. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"{M : Type u} → [self : AddMonoid M] → ℕ → M → M"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: For any two elements `x`, `y` such that `0 < y`, there exists a natural number `n`\nsuch that `x ≤ n • y`. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_2} [inst : OrderedAddCommMonoid α] [self : Archimedean α] (x : α) {y : α}, 0 < y → ∃ n, x ≤ n • y"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: For positive `a` and `b`, the prime factors of `a * b` are the union of those of `a` and `b` \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {a b : ℕ}, a ≠ 0 → b ≠ 0 → List.Perm (Nat.factors (a * b)) (Nat.factors a ++ Nat.factors b)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The set of natural numbers that are sums of two squares is closed under multiplication. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {a b x y u v : ℕ}, a = x ^ 2 + y ^ 2 → b = u ^ 2 + v ^ 2 → ∃ r s, a * b = r ^ 2 + s ^ 2"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Every x greater than or equal to 1 is between two successive\nnatural-number powers of every y greater than one. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} [inst : LinearOrderedSemiring α] [inst_1 : Archimedean α] [inst_2 : ExistsAddOfLE α] {x y : α},\n  1 ≤ x → 1 < y → ∃ n, y ^ n ≤ x ∧ x < y ^ (n + 1)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: For nonzero integers `a` and `b`, `gcd a b` is the smallest positive natural number that can be\nwritten in the form `a * x + b * y` for some pair of integers `x` and `y` \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {a b : ℤ}, a ≠ 0 → IsLeast {n | 0 < n ∧ ∃ x y, ↑n = a * x + b * y} (Int.gcd a b)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: For any two relatively prime positive integers $a$ and $b$, every sufficiently large natural number $N$ can be written as a linear combination $ax + by$ of $a$ and $b$, where both $x$ and $y$ are natural numbers.\n\nGive ONLY the Lean code"}]}
{"text":"Every field is a ring.","fullPrompt":[{"role":"system","content":"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code."},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A field is a valuation ring. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (K : Type u) [inst : Field K], ValuationRing K"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Transferring from `Field` to `IsField`. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (R : Type u) [inst : Field R], IsField R"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The theorem states that the ring of integers of a given number field is not a field itself. In more detail, for any number field 'K', the ring of integers of 'K', which is the integral closure of the integers in the number field, cannot have the structure of a field.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (K : Type u_1) [inst : Field K] [nf : NumberField K], ¬IsField ↥(NumberField.ringOfIntegers K)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for any given ring `R`, the polynomial ring `R[X]` is never a field. In other words, no matter what the ring `R` is, when you consider the set of all polynomials with coefficients in `R`, that set does not form a field.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u} [inst : Ring R], ¬IsField (Polynomial R)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  For uncountable algebraically closed fields K and L of equal characteristic and cardinality greater than that of the set of natural numbers, there exists a ring isomorphism between them.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {K L : Type} [inst : Field K] [inst_1 : Field L] [inst_2 : IsAlgClosed K] [inst_3 : IsAlgClosed L] (p : ℕ)\n  [inst_4 : CharP K p] [inst_5 : CharP L p],\n  Cardinal.aleph0 < Cardinal.mk K → Cardinal.mk K = Cardinal.mk L → Nonempty (K ≃+* L)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  An intermediate field between two fields, being a subring of the containing field, is closed under multiplication.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {K : Type u_1} {L : Type u_2} [inst : Field K] [inst_1 : Field L] [inst_2 : Algebra K L] (S : IntermediateField K L)\n  {x y : L}, x ∈ S → y ∈ S → x * y ∈ S"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  Every subfield of a division ring contains its additive identity (zero).\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {K : Type u} [inst : DivisionRing K] (s : Subfield K), 0 ∈ s"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  Every subfield of a division ring contains the multiplicative identity 1.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {K : Type u} [inst : DivisionRing K] (s : Subfield K), 1 ∈ s"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: Subrings of a ring form a complete lattice. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"{R : Type u} → [inst : Ring R] → CompleteLattice (Subring R)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Fields are commutative. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u} [inst : Semiring R], IsField R → ∀ (x y : R), x * y = y * x"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A linear ordered field that is a floor ring is archimedean. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (α : Type u_2) [inst : LinearOrderedField α] [inst_1 : FloorRing α], Archimedean α"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: Product of two rings is a ring. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"{R : Type u_3} → {S : Type u_5} → [inst : Ring R] → [inst : Ring S] → Ring (R × S)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: Subfields of a ring form a complete lattice. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"{K : Type u} → [inst : DivisionRing K] → CompleteLattice (Subfield K)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: An intermediate field contains the ring's 1. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {K : Type u_1} {L : Type u_2} [inst : Field K] [inst_1 : Field L] [inst_2 : Algebra K L] (S : IntermediateField K L),\n  1 ∈ S"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: An intermediate field contains the ring's 0. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {K : Type u_1} {L : Type u_2} [inst : Field K] [inst_1 : Field L] [inst_2 : Algebra K L] (S : IntermediateField K L),\n  0 ∈ S"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A field is a valuation ring. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (K : Type u) [inst : Field K], ValuationRing K"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Every field is a ring.\n\nGive ONLY the Lean code"}]}
{"text":"The set of units in a ring forms a group.","fullPrompt":[{"role":"system","content":"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code."},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The group of units of a complete normed ring is an open subset of the ring. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u_1} [inst : NormedRing R] [inst_1 : CompleteSpace R], IsOpen {x | IsUnit x}"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that in a given number field `K`, the group of roots of unity of order dividing the order of the torsion subgroup of the group of units is equal to the torsion subgroup itself. In other words, the set of elements in the ring of integers of `K` whose power of the order of the torsion subgroup equals 1 is precisely the same set of elements that form the torsion subgroup in the group of units of the ring of integers.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (K : Type u_1) [inst : Field K] [inst_1 : NumberField K],\n  rootsOfUnity (NumberField.Units.torsionOrder K) ↥(NumberField.ringOfIntegers K) = NumberField.Units.torsion K"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that in the unit group of an integral domain, a unit 'u' is its own multiplicative inverse if and only if 'u' is either 1 or -1. An integral domain here is a specific type of ring 'R' that doesn't allow for zero divisors. The symbol 'Rˣ' represents the group of units in the ring 'R', and 'u⁻¹' is the multiplicative inverse of the unit 'u'.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type x} [inst : Ring R] [inst_1 : NoZeroDivisors R] (u : Rˣ), u⁻¹ = u ↔ u = 1 ∨ u = -1"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for any type `R` that forms a Non-Unitary Non-Associative Ring, and any set `s` of elements of this type `R`, the set `s` is a subset of the Non-Unitary Subring generated by `s`. In other words, all elements in `s` are included in the Non-Unitary Subring that is created by taking `s` as a generating set.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u} [inst : NonUnitalNonAssocRing R] {s : Set R}, s ⊆ ↑(NonUnitalSubring.closure s)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for any complete normed ring `R`, the set of units in `R` forms an open subset of the ring. Here, a unit is defined as an element in the ring that has a two-sided inverse. An open set, in the context of the topological space associated with the ring, is a set where each point is an interior point. A complete space is a space in which every Cauchy sequence converges to a point in the same space.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u_1} [inst : NormedRing R] [inst_1 : CompleteSpace R], IsOpen {x | IsUnit x}"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  For a ring valued with a linearly ordered commutative group, a set is a neighborhood of an element if and only if it contains an open ball around that element defined by a certain valuation condition.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u} [inst : Ring R] {Γ₀ : Type v} [inst_1 : LinearOrderedCommGroupWithZero Γ₀] [_i : Valued R Γ₀] {s : Set R}\n  {x : R}, s ∈ nhds x ↔ ∃ γ, {y | Valued.v (y - x) < ↑γ} ⊆ s"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  The number of units in a finite commutative ring is equal to the cardinality of the ring.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u} [inst : CommMonoid R] [inst_1 : Fintype R] {R' : Type v} [inst_2 : CommRing R'] [inst_3 : DecidableEq R],\n  (Finset.univ.sum fun a => 1 a) = ↑(Fintype.card Rˣ)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  In a local ring, if the sum of two elements equals the identity, then one of them is a unit.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u} [inst : Semiring R] [self : LocalRing R] {a b : R}, a + b = 1 → IsUnit a ∨ IsUnit b"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  The set of units in a complete normed ring forms an open subset of the ring.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u_1} [inst : NormedRing R] [inst_1 : CompleteSpace R], IsOpen {x | IsUnit x}"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: The group of `S`-units is the group of units of the ring of `S`-integers. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"{R : Type u} →\n  [inst : CommRing R] →\n    [inst_1 : IsDomain R] →\n      [inst_2 : IsDedekindDomain R] →\n        (S : Set (IsDedekindDomain.HeightOneSpectrum R)) →\n          (K : Type v) →\n            [inst_3 : Field K] →\n              [inst_4 : Algebra R K] → [inst_5 : IsFractionRing R K] → ↥(Set.unit S K) ≃* (↥(Set.integer S K))ˣ"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: Units of a commutative monoid form a commutative group. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"{α : Type u_1} → [inst : CommMonoid α] → CommGroup αˣ"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: The units of an ordered commutative monoid form an ordered commutative group. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"{α : Type u_1} → [inst : OrderedCommMonoid α] → OrderedCommGroup αˣ"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: A group is isomorphic to its group of units. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"{G : Type u_10} → [inst : Group G] → G ≃* Gˣ"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: Each element of the group of units of a ring has an additive inverse. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"{α : Type u} → [inst : Monoid α] → [inst_1 : HasDistribNeg α] → Neg αˣ"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Definition: Units of a monoid form a group. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"{α : Type u} → [inst : Monoid α] → Group αˣ"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The group of units of a complete normed ring is an open subset of the ring. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u_1} [inst : NormedRing R] [inst_1 : CompleteSpace R], IsOpen {x | IsUnit x}"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The units of a complete normed ring form a Lie group. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {R : Type u_1} [inst : NormedRing R] [inst_1 : CompleteSpace R] {𝕜 : Type u_2} [inst_2 : NontriviallyNormedField 𝕜]\n  [inst_3 : NormedAlgebra 𝕜 R], LieGroup (modelWithCornersSelf 𝕜 R) Rˣ"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The set of units in a ring forms a group.\n\nGive ONLY the Lean code"}]}
{"text":"If the direct product of two groups is torsion free then each of the groups is torsion free.","fullPrompt":[{"role":"system","content":"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code."},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: A nontrivial torsion-free group is not torsion. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : Group G] [hN : Nontrivial G], IsTorsionFree G → ¬IsTorsion G"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  The direct product of a family of torsion-free groups is a torsion-free group.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {η : Type u_3} {Gs : η → Type u_4} [inst : (i : η) → Group (Gs i)],\n  (∀ (i : η), Monoid.IsTorsionFree (Gs i)) → Monoid.IsTorsionFree ((i : η) → Gs i)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Products of nilpotent groups are nilpotent \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G₁ : Type u_2} {G₂ : Type u_3} [inst : Group G₁] [inst_1 : Group G₂] [inst_2 : Group.IsNilpotent G₁]   [inst_3 : Group.IsNilpotent G₂], Group.IsNilpotent (G₁ × G₂)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  For any additive commutative group `G`, the quotient `G / torsionSubgroup(G)` is a torsion-free group.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (G : Type u_1) [inst : AddCommGroup G], AddMonoid.IsTorsionFree (G ⧸ AddCommGroup.torsion G)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  If `Gs` is a family of additive torsion-free groups indexed by a type `η`, then their direct product is also a torsion-free additive group.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {η : Type u_3} {Gs : η → Type u_4} [inst : (i : η) → AddGroup (Gs i)],   (∀ (i : η), AddMonoid.IsTorsionFree (Gs i)) → AddMonoid.IsTorsionFree ((i : η) → Gs i)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  If `Gs` is a family of additive torsion-free groups indexed by a type `η`, then their direct product is also a torsion-free additive group.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {η : Type u_3} {Gs : η → Type u_4} [inst : (i : η) → AddGroup (Gs i)],\n  (∀ (i : η), AddMonoid.IsTorsionFree (Gs i)) → AddMonoid.IsTorsionFree ((i : η) → Gs i)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Direct products of torsion free groups are torsion free. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {η : Type u_3} {Gs : η → Type u_4} [inst : (i : η) → Group (Gs i)],   (∀ (i : η), IsTorsionFree (Gs i)) → IsTorsionFree ((i : η) → Gs i)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that if a group G is torsion-free, then any subgroup H of G is also torsion-free. Here, a group is said to be torsion-free if the only element of the group that has finite order is the identity element. In other words, no element other than the identity can be raised to some positive power to obtain the identity. Therefore, this theorem asserts that this property of being torsion-free is preserved under taking subgroups, i.e., if a group doesn't have elements of finite order, its subgroups also don't have such elements.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : Group G], Monoid.IsTorsionFree G → ∀ (H : Subgroup G), Monoid.IsTorsionFree ↥H"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that for any commutative group `G`, the quotient group formed by dividing `G` with its torsion subgroup is a torsion-free group. Here, a torsion-free group is defined as a group in which only the identity element (1) has a finite order. In other words, the result of dividing a group by its torsion subgroup removes all elements of finite order (except for the identity), thereby creating a group where every non-identity element has infinite order, i.e., a torsion-free group.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (G : Type u_1) [inst : CommGroup G], Monoid.IsTorsionFree (G ⧸ CommGroup.torsion G)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: The theorem states that if we take a direct product of additive torsion-free groups, the resulting group is also torsion-free. In other words, given a family of types `Gs` indexed by a type `η`, where each type in the family forms an additive group and is torsion-free (i.e., the only element with finite additive order is the zero element), then the direct product of these types, seen as an additive group, is also torsion-free.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {η : Type u_3} {Gs : η → Type u_4} [inst : (i : η) → AddGroup (Gs i)],\n  (∀ (i : η), AddMonoid.IsTorsionFree (Gs i)) → AddMonoid.IsTorsionFree ((i : η) → Gs i)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: This theorem states that the direct product of torsion-free groups is also torsion-free. More specifically, given a family of types `Gs` indexed by `η`, each equipped with a group structure, if each group `Gs i` is torsion-free, i.e., every element of each `Gs i` that is not the identity has infinite order, then the direct product group, consisting of functions from `η` to the union of the `Gs i`, is also torsion-free.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {η : Type u_3} {Gs : η → Type u_4} [inst : (i : η) → Group (Gs i)],\n  (∀ (i : η), Monoid.IsTorsionFree (Gs i)) → Monoid.IsTorsionFree ((i : η) → Gs i)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  In a torsion-free group, the size of the product of two nonempty finite sets is greater than or equal to the sum of their sizes minus one.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {α : Type u_1} [inst : Group α] [inst_1 : DecidableEq α] {s t : Finset α},\n  Monoid.IsTorsionFree α → s.Nonempty → t.Nonempty → s.card + t.card - 1 ≤ (s * t).card"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  If 'G' is an additively torsion-free group, then every subgroup of 'G' is also additively torsion-free.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : AddGroup G], AddMonoid.IsTorsionFree G → ∀ (H : AddSubgroup G), AddMonoid.IsTorsionFree ↥H"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  If G is a torsion-free group, then every subgroup H of G is also torsion-free.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : Group G], Monoid.IsTorsionFree G → ∀ (H : Subgroup G), Monoid.IsTorsionFree ↥H"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem:  The direct product of a family of torsion-free groups is a torsion-free group.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {η : Type u_3} {Gs : η → Type u_4} [inst : (i : η) → Group (Gs i)],\n  (∀ (i : η), Monoid.IsTorsionFree (Gs i)) → Monoid.IsTorsionFree ((i : η) → Gs i)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Subgroups of torsion groups are torsion groups. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : Group G], Monoid.IsTorsion G → ∀ (H : Subgroup G), Monoid.IsTorsion ↥H"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Torsion groups are closed under extensions. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} {H : Type u_2} [inst : Group G] {N : Subgroup G} [inst_1 : Group H] {f : G →* H},\n  N = MonoidHom.ker f → Monoid.IsTorsion H → Monoid.IsTorsion ↥N → Monoid.IsTorsion G"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Quotienting a group by its additive torsion subgroup yields an additive torsion free group.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (G : Type u_1) [inst : AddCommGroup G], AddMonoid.IsTorsionFree (G ⧸ AddCommGroup.torsion G)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Quotienting a group by its torsion subgroup yields a torsion free group. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ (G : Type u_1) [inst : CommGroup G], Monoid.IsTorsionFree (G ⧸ CommGroup.torsion G)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Subgroups of additive torsion-free groups are additively torsion-free.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : AddGroup G], AddMonoid.IsTorsionFree G → ∀ (H : AddSubgroup G), AddMonoid.IsTorsionFree ↥H"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Subgroups of torsion-free groups are torsion-free. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {G : Type u_1} [inst : Group G], Monoid.IsTorsionFree G → ∀ (H : Subgroup G), Monoid.IsTorsionFree ↥H"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Direct products of additive torsion free groups are torsion free.\n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {η : Type u_3} {Gs : η → Type u_4} [inst : (i : η) → AddGroup (Gs i)],\n  (∀ (i : η), AddMonoid.IsTorsionFree (Gs i)) → AddMonoid.IsTorsionFree ((i : η) → Gs i)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: Direct products of torsion free groups are torsion free. \n\nGive ONLY the Lean code"},{"role":"assistant","content":"∀ {η : Type u_3} {Gs : η → Type u_4} [inst : (i : η) → Group (Gs i)],\n  (∀ (i : η), Monoid.IsTorsionFree (Gs i)) → Monoid.IsTorsionFree ((i : η) → Gs i)"},{"role":"user","content":"Translate the following statement into Lean 4:\n## Theorem: If the direct product of two groups is torsion free then each of the groups is torsion free.\n\nGive ONLY the Lean code"}]}
