{"text":"If every proper closed subset of a topological space is compact, then the space itself is compact.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The intersection of two open compact subsets of a quasi-separated space is compact.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_3} [inst : TopologicalSpace α] [self : QuasiSeparatedSpace α] (U V : Set α),\\n  IsOpen U → IsCompact U → IsOpen V → IsCompact V → IsCompact (U ∩ V)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If a compact set is included in a measurable set, then so is its closure. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_2} [inst : MeasurableSpace G] [inst_1 : TopologicalSpace G] [inst_2 : BorelSpace G] [inst_3 : Group G]\\n  [inst_4 : TopologicalGroup G] {k s : Set G}, IsCompact k → MeasurableSet s → k ⊆ s → closure k ⊆ s\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A subspace is dense iff its topological closure is the entire space. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} {M : Type v} [inst : Semiring R] [inst_1 : TopologicalSpace M] [inst_2 : AddCommMonoid M]\\n  [inst_3 : Module R M] [inst_4 : ContinuousConstSMul R M] [inst_5 : ContinuousAdd M] {s : Submodule R M},\\n  Dense ↑s ↔ Submodule.topologicalClosure s = ⊤\"},\n {\"role\": \"user\", \"content\": \"The product of two compact spaces is compact. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u} {Y : Type v} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] [inst_2 : CompactSpace X]\\n  [inst_3 : CompactSpace Y], CompactSpace (X × Y)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The intersection of a compact set and a closed set is a compact set. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u} [inst : TopologicalSpace X] {s t : Set X}, IsCompact s → IsClosed t → IsCompact (s ∩ t)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"In a nonempty locally compact space, there exists a compact set with nonempty interior. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : WeaklyLocallyCompactSpace α] [inst_2 : Nonempty α],\\n  Nonempty (TopologicalSpace.PositiveCompacts α)\"},\n {\"role\": \"user\", \"content\": \"In a `T2Space`, every compact set is closed. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : T2Space X] {s : Set X}, IsCompact s → IsClosed s\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The intersection of a closed set and a compact set is a compact set. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u} [inst : TopologicalSpace X] {s t : Set X}, IsCompact t → IsClosed s → IsCompact (s ∩ t)\"},\n {\"role\": \"user\",\n  \"content\": \"A closed subset of a compact set is a compact set. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u} [inst : TopologicalSpace X] {s t : Set X}, IsCompact s → IsClosed t → t ⊆ s → IsCompact t\"},\n {\"role\": \"user\", \"content\": \"In a Noetherian space, all sets are compact. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace.NoetherianSpace α] (s : Set α), IsCompact s\"},\n {\"role\": \"user\",\n  \"content\":\n  \"For any topological space `X`, its one point compactification is a compact space. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X], CompactSpace (OnePoint X)\"},\n {\"role\": \"user\",\n  \"content\": \"In a compact space, the type of closed subsets is compact. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : EMetricSpace α] [inst_1 : CompactSpace α], CompactSpace (TopologicalSpace.Closeds α)\"},\n {\"role\": \"user\", \"content\": \"The underlying topological space is compact.\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ (self : CompHaus), CompactSpace ↑self.toTop\"},\n {\"role\": \"user\", \"content\": \"Finite topological spaces are compact. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u} [inst : TopologicalSpace X] [inst_1 : Finite X], CompactSpace X\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If every proper closed subset of a topological space is compact, then the space itself is compact.\"}]"}
{"text":"Every prime that is `1` greater than a multiple of `4` can be expressed as the sum of two squares.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Lagrange's **four squares theorem** for a prime number. Use `Nat.sum_four_squares` instead. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {p : ℕ}, Nat.Prime p → ∃ a b c d, a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 = p\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Note that most of the lemmas about powers of two refer to it as `sq`. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {M : Type u} [inst : Monoid M] (a : M), a ^ 2 = a * a\"},\n {\"role\": \"user\", \"content\": \"**Euler's four-square identity**. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : CommRing R] (a b c d x y z w : R),\\n  (a * x - b * y - c * z - d * w) ^ 2 + (a * y + b * x + c * w - d * z) ^ 2 + (a * z - b * w + c * x + d * y) ^ 2 +\\n      (a * w + b * z - c * y + d * x) ^ 2 =\\n    (a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2) * (x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2)\"},\n {\"role\": \"user\",\n  \"content\": \"Every nonzero natural number has a unique prime factorization \"},\n {\"role\": \"assistant\", \"content\": \"Set.InjOn Nat.factorization {x | x ≠ 0}\"},\n {\"role\": \"user\",\n  \"content\":\n  \"`2` is a square modulo an odd prime `p` iff `p` is congruent to `1` or `7` mod `8`. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {p : ℕ} [inst : Fact (Nat.Prime p)], p ≠ 2 → (IsSquare 2 ↔ p % 8 = 1 ∨ p % 8 = 7)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If a prime `p` divides `n` such that `-1` is a square modulo `n`, then `p % 4 ≠ 3`. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {p n : ℕ}, Nat.Prime p → p ∣ n → IsSquare (-1) → p % 4 ≠ 3\"},\n {\"role\": \"user\",\n  \"content\":\n  \"In a finite field of characteristic `2`, all elements are squares. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {F : Type u_3} [inst : Field F] [inst_1 : Finite F], ringChar F = 2 → ∀ (a : F), IsSquare a\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The special case of Graham's conjecture where all numbers are squarefree. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {n : ℕ} (f : ℕ → ℕ), (∀ k < n, Squarefree (f k)) → Nat.GrahamConjecture n f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"**Euler's four-square identity**, a version for natural numbers. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (a b c d x y z w : ℕ),\\n  Int.natAbs (↑a * ↑x - ↑b * ↑y - ↑c * ↑z - ↑d * ↑w) ^ 2 + Int.natAbs (↑a * ↑y + ↑b * ↑x + ↑c * ↑w - ↑d * ↑z) ^ 2 +\\n        Int.natAbs (↑a * ↑z - ↑b * ↑w + ↑c * ↑x + ↑d * ↑y) ^ 2 +\\n      Int.natAbs (↑a * ↑w + ↑b * ↑z - ↑c * ↑y + ↑d * ↑x) ^ 2 =\\n    (a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2) * (x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A prime natural number is prime in `ℤ[i]` if and only if it is `3` mod `4` \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ (p : ℕ) [inst : Fact (Nat.Prime p)], Prime ↑p ↔ p % 4 = 3\"},\n {\"role\": \"user\", \"content\": \"**Four squares theorem** \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ (n : ℕ), ∃ a b c d, a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 = n\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If `-1` is a square modulo the natural number `n`, then `n` is a sum of two squares. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {n : ℕ}, IsSquare (-1) → ∃ x y, n = x ^ 2 + y ^ 2\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The set of natural numbers that are sums of two squares is closed under multiplication. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {a b x y u v : ℕ}, a = x ^ 2 + y ^ 2 → b = u ^ 2 + v ^ 2 → ∃ r s, a * b = r ^ 2 + s ^ 2\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Every prime that is `1` greater than a multiple of `4` can be expressed as the sum of two squares.\"}]"}
{"text":"The product of two numbers, each of which is the sum of four squares, is itself a sum of four squares.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\": \"The product of the factors is the original number \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ (n : ℕ+), PrimeMultiset.prod (PNat.factorMultiset n) = n\"},\n {\"role\": \"user\",\n  \"content\":\n  \"In a finite field of characteristic `2`, all elements are squares. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {F : Type u_3} [inst : Field F] [inst_1 : Finite F], ringChar F = 2 → ∀ (a : F), IsSquare a\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Commutativity of a square is preserved when taking quotients by an ideal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} {S : Type v} [inst : CommRing R] [inst_1 : CommRing S] {R' : Type u_5} {S' : Type u_6}\\n  [inst_2 : CommRing R'] [inst_3 : CommRing S'] {f : R →+* S} {f' : R' →+* S'} {g : R →+* R'} {g' : S →+* S'}\\n  (hfg : RingHom.comp f' g = RingHom.comp g' f) (I : Ideal S'),\\n  let leq := (_ : Ideal.comap f (Ideal.comap g' I) ≤ Ideal.comap g (Ideal.comap f' I));\\n  RingHom.comp (Ideal.quotientMap I g' (_ : Ideal.comap g' I ≤ Ideal.comap g' I))\\n      (Ideal.quotientMap (Ideal.comap g' I) f\\n        (_ : Ideal.comap f (Ideal.comap g' I) ≤ Ideal.comap f (Ideal.comap g' I))) =\\n    RingHom.comp (Ideal.quotientMap I f' (_ : Ideal.comap f' I ≤ Ideal.comap f' I))\\n      (Ideal.quotientMap (Ideal.comap f' I) g leq)\"},\n {\"role\": \"user\",\n  \"content\": \"The product of two positive elements is positive. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [self : StrictOrderedRing α] (a b : α), 0 < a → 0 < b → 0 < a * b\"},\n {\"role\": \"user\",\n  \"content\":\n  \"We relate a finite product over primes to an infinite sum over smooth numbers. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : NormedCommRing R] [inst_1 : CompleteSpace R] {f : ℕ → R},\\n  f 1 = 1 →\\n    (∀ {m n : ℕ}, Nat.Coprime m n → f (m * n) = f m * f n) →\\n      (∀ {p : ℕ}, Nat.Prime p → Summable fun n => ‖f (p ^ n)‖) →\\n        ∀ (N : ℕ),\\n          (Summable fun m => ‖f ↑m‖) ∧\\n            HasSum (fun m => f ↑m) (Finset.prod (Nat.primesBelow N) fun p => ∑' (n : ℕ), f (p ^ n))\"},\n {\"role\": \"user\", \"content\": \"Multiplication is commutative. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_5} [self : SeminormedCommRing α] (x y : α), x * y = y * x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The scalar quadruple product identity, related to the Binet-Cauchy identity. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : CommRing R] (u v w x : Fin 3 → R),\\n  Matrix.dotProduct ((crossProduct u) v) ((crossProduct w) x) =\\n    Matrix.dotProduct u w * Matrix.dotProduct v x - Matrix.dotProduct u x * Matrix.dotProduct v w\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The special case of Graham's conjecture where all numbers are squarefree. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {n : ℕ} (f : ℕ → ℕ), (∀ k < n, Squarefree (f k)) → Nat.GrahamConjecture n f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Representation of a difference of two squares in a commutative ring as a product. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type x} [inst : CommRing R] (a b : R), a * a - b * b = (a + b) * (a - b)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Pythagorean theorem, if-and-if vector inner product form using square roots. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {F : Type u_3} [inst : NormedAddCommGroup F] [inst_1 : InnerProductSpace ℝ F] {x y : F},\\n  ‖x + y‖ = Real.sqrt (‖x‖ * ‖x‖ + ‖y‖ * ‖y‖) ↔ inner x y = 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Two natural numbers are equal if and only if they have the same multiples. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {m n : ℕ}, (∀ (a : ℕ), m ∣ a ↔ n ∣ a) ↔ m = n\"},\n {\"role\": \"user\",\n  \"content\": \"Expressing the product of two polynomials as a double sum. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} [inst : Semiring R] {p q : Polynomial R},\\n  p * q =\\n    Finset.sum (Polynomial.support p) fun i =>\\n      Polynomial.sum q fun j a => (Polynomial.monomial (i + j)) (Polynomial.coeff p i * a)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The product of two Chebyshev polynomials is the sum of two other Chebyshev polynomials. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (R : Type u_1) [inst : CommRing R] (m k : ℕ),\\n  2 * Polynomial.Chebyshev.T R m * Polynomial.Chebyshev.T R (m + k) =\\n    Polynomial.Chebyshev.T R (2 * m + k) + Polynomial.Chebyshev.T R k\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If `-1` is a square modulo the natural number `n`, then `n` is a sum of two squares. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {n : ℕ}, IsSquare (-1) → ∃ x y, n = x ^ 2 + y ^ 2\"},\n {\"role\": \"user\", \"content\": \"**Four squares theorem** \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ (n : ℕ), ∃ a b c d, a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 = n\"},\n {\"role\": \"user\", \"content\": \"**Euler's four-square identity**. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : CommRing R] (a b c d x y z w : R),\\n  (a * x - b * y - c * z - d * w) ^ 2 + (a * y + b * x + c * w - d * z) ^ 2 + (a * z - b * w + c * x + d * y) ^ 2 +\\n      (a * w + b * z - c * y + d * x) ^ 2 =\\n    (a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2) * (x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"**Euler's four-square identity**, a version for natural numbers. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (a b c d x y z w : ℕ),\\n  Int.natAbs (↑a * ↑x - ↑b * ↑y - ↑c * ↑z - ↑d * ↑w) ^ 2 + Int.natAbs (↑a * ↑y + ↑b * ↑x + ↑c * ↑w - ↑d * ↑z) ^ 2 +\\n        Int.natAbs (↑a * ↑z - ↑b * ↑w + ↑c * ↑x + ↑d * ↑y) ^ 2 +\\n      Int.natAbs (↑a * ↑w + ↑b * ↑z - ↑c * ↑y + ↑d * ↑x) ^ 2 =\\n    (a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2) * (x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2)\"},\n {\"role\": \"user\",\n  \"content\": \"The sum of two squares is zero iff both elements are zero. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : LinearOrderedRing α] {x y : α}, x * x + y * y = 0 ↔ x = 0 ∧ y = 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The set of natural numbers that are sums of two squares is closed under multiplication. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {a b x y u v : ℕ}, a = x ^ 2 + y ^ 2 → b = u ^ 2 + v ^ 2 → ∃ r s, a * b = r ^ 2 + s ^ 2\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The product of two numbers, each of which is the sum of four squares, is itself a sum of four squares.\"}]"}
{"text":"A ring with all elements idempotent is commutative.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Commuting elements of finite order are closed under multiplication. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Monoid G] {x y : G}, Commute x y → IsOfFinOrder x → IsOfFinOrder y → IsOfFinOrder (x * y)\"},\n {\"role\": \"user\", \"content\": \"An abelian category is idempotent complete. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (D : Type u_2) [inst : CategoryTheory.Category.{u_3, u_2} D] [inst_1 : CategoryTheory.Abelian D],\\n  CategoryTheory.IsIdempotentComplete D\"},\n {\"role\": \"user\",\n  \"content\": \"Composition of non-unital ring homomorphisms is associative. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_2} {β : Type u_3} {γ : Type u_4} [inst : NonUnitalNonAssocSemiring α]\\n  [inst_1 : NonUnitalNonAssocSemiring β] [inst_2 : NonUnitalNonAssocSemiring γ] {δ : Type u_5}\\n  {x : NonUnitalNonAssocSemiring δ} (f : α →ₙ+* β) (g : β →ₙ+* γ) (h : γ →ₙ+* δ),\\n  NonUnitalRingHom.comp (NonUnitalRingHom.comp h g) f = NonUnitalRingHom.comp h (NonUnitalRingHom.comp g f)\"},\n {\"role\": \"user\", \"content\": \"Fields are commutative. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} [inst : Semiring R], IsField R → ∀ (x y : R), x * y = y * x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The additive inverse of one multiplied by an element of a ring is the element's additive\\ninverse. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : MulOneClass α] [inst_1 : HasDistribNeg α] (a : α), -1 * a = -a\"},\n {\"role\": \"user\",\n  \"content\":\n  \"An element of a ring multiplied by the additive inverse of one is the element's additive\\ninverse. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : MulOneClass α] [inst_1 : HasDistribNeg α] (a : α), a * -1 = -a\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A finitely generated idempotent ideal is generated by an idempotent element \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : CommRing R] (I : Ideal R),\\n  Ideal.FG I → (IsIdempotentElem I ↔ ∃ e, IsIdempotentElem e ∧ I = Submodule.span R {e})\"},\n {\"role\": \"user\", \"content\": \"The ring homomorphism is an isometry. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R₁ : Type u_5} {R₂ : Type u_6} [inst : Semiring R₁] [inst_1 : Semiring R₂] [inst_2 : Norm R₁] [inst_3 : Norm R₂]\\n  {σ : R₁ →+* R₂} [self : RingHomIsometric σ] {x : R₁}, ‖σ x‖ = ‖x‖\"},\n {\"role\": \"user\", \"content\": \"Multiplication is commutative \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {ι : Type u_1} {A : ι → Type u_2} [inst : AddCommMonoid ι] [inst_1 : (i : ι) → AddCommMonoid (A i)]\\n  [self : DirectSum.GCommSemiring A] (a b : GradedMonoid A), a * b = b * a\"},\n {\"role\": \"user\", \"content\": \"Multiplication is commutative. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_5} [self : SeminormedCommRing α] (x y : α), x * y = y * x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"By definition, a ring isomorphism preserves the additive structure. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {F : Type u_7} {R : outParam (Type u_8)} {S : outParam (Type u_9)} [inst : Mul R] [inst_1 : Add R] [inst_2 : Mul S]\\n  [inst_3 : Add S] [self : RingEquivClass F R S] (f : F) (a b : R), f (a + b) = f a + f b\"},\n {\"role\": \"user\",\n  \"content\": \"Multiplication is commutative in a commutative semigroup. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_2} [self : StrictOrderedCommRing α] (a b : α), a * b = b * a\"},\n {\"role\": \"user\", \"content\": \"Equivalence closure is idempotent. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} (r : α → α → Prop), EqvGen.Setoid (Setoid.Rel (EqvGen.Setoid r)) = EqvGen.Setoid r\"},\n {\"role\": \"user\", \"content\": \"A ring isomorphism sends zero to zero. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_4} {S : Type u_5} [inst : NonUnitalNonAssocSemiring R] [inst_1 : NonUnitalNonAssocSemiring S]\\n  (f : R ≃+* S), f 0 = 0\"},\n {\"role\": \"user\", \"content\": \"A ring isomorphism sends one to one. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_4} {S : Type u_5} [inst : NonAssocSemiring R] [inst_1 : NonAssocSemiring S] (f : R ≃+* S), f 1 = 1\"},\n {\"role\": \"user\", \"content\": \"Any element commutes with itself.\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {S : Type u_2} [inst : Add S] (a : S), AddCommute a a\"},\n {\"role\": \"user\", \"content\": \"Any element commutes with itself. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {S : Type u_2} [inst : Mul S] (a : S), Commute a a\"},\n {\"role\": \"user\", \"content\": \"A ring isomorphism preserves addition. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_4} {S : Type u_5} [inst : Mul R] [inst_1 : Mul S] [inst_2 : Add R] [inst_3 : Add S] (e : R ≃+* S)\\n  (x y : R), e (x + y) = e x + e y\"},\n {\"role\": \"user\", \"content\": \"A ring isomorphism preserves multiplication. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_4} {S : Type u_5} [inst : Mul R] [inst_1 : Mul S] [inst_2 : Add R] [inst_3 : Add S] (e : R ≃+* S)\\n  (x y : R), e (x * y) = e x * e y\"},\n {\"role\": \"user\",\n  \"content\": \"Multiplication in a boolean ring is idempotent. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {α : Type u_4} [self : BooleanRing α] (a : α), a * a = a\"},\n {\"role\": \"user\",\n  \"content\": \"A ring with all elements idempotent is commutative.\"}]"}
{"text":"There are infinitely many pairs of primes that differ exactly by `2`.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\": \"The only divisors of prime powers are prime powers. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : CancelCommMonoidWithZero α] [dec_irr : (p : Associates α) → Decidable (Irreducible p)]\\n  [inst_1 : UniqueFactorizationMonoid α] [dec : DecidableEq α] [dec' : DecidableEq (Associates α)] {a p : Associates α},\\n  Irreducible p →\\n    ∀ [inst_2 : (n : ℕ) → Decidable (a ∣ p ^ n)] {n : ℕ} (h : a ∣ p ^ n),\\n      a = p ^ Nat.find (_ : ∃ n, (fun n => a ∣ p ^ n) n)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The finite field `F` has even cardinality iff it has characteristic `2`. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {F : Type u_3} [inst : Field F] [inst_1 : Fintype F], ringChar F = 2 ↔ Fintype.card F % 2 = 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"For any positive `k : ℕ` there are infinitely many primes `p` such that `p ≡ 1 [MOD k]`. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {k : ℕ}, k ≠ 0 → Set.Infinite {p | Nat.Prime p ∧ p ≡ 1 [MOD k]}\"},\n {\"role\": \"user\",\n  \"content\": \"Infinitely many natural numbers are equal to `d` mod `n`. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {n : ℕ}, n ≠ 0 → ∀ (d : ℕ), ∃ᶠ (m : ℕ) in Filter.atTop, m ≡ d [MOD n]\"},\n {\"role\": \"user\", \"content\": \"The multiplicity of prime `p` in `p` is `1` \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {p : ℕ}, Nat.Prime p → (Nat.factorization p) p = 1\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The only numbers with empty prime factorization are `0` and `1` \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ (n : ℕ), Nat.factorization n = 0 ↔ n = 0 ∨ n = 1\"},\n {\"role\": \"user\",\n  \"content\": \"In a group of exponent two, all elements commute. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G], Monoid.exponent G = 2 → ∀ (x y : G), x * y = y * x\"},\n {\"role\": \"user\", \"content\": \"`2` is not a factor of an odd natural number. \"},\n {\"role\": \"assistant\", \"content\": \"∀ {m n : ℕ}, Odd n → m ∣ n → m ≠ 2\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Two natural numbers are equal if and only if they have the same multiples. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {m n : ℕ}, (∀ (a : ℕ), m ∣ a ↔ n ∣ a) ↔ m = n\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A prime natural number is prime in `ℤ[i]` if and only if it is `3` mod `4` \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ (p : ℕ) [inst : Fact (Nat.Prime p)], Prime ↑p ↔ p % 4 = 3\"},\n {\"role\": \"user\",\n  \"content\": \"Two (finite) ℤ-bases have the same discriminant. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (A : Type u) {ι : Type w} [inst : DecidableEq ι] [inst_1 : CommRing A] [inst_2 : Fintype ι] (b b' : Basis ι ℤ A),\\n  Algebra.discr ℤ ⇑b = Algebra.discr ℤ ⇑b'\"},\n {\"role\": \"user\",\n  \"content\": \"In a group of exponent two, every element is its own inverse. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G], Monoid.exponent G = 2 → ∀ (x : G), x⁻¹ = x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Two natural numbers are equal if and only if they have the same divisors. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {m n : ℕ}, (∀ (a : ℕ), a ∣ m ↔ a ∣ n) ↔ m = n\"},\n {\"role\": \"user\",\n  \"content\":\n  \"`2` is a square modulo an odd prime `p` iff `p` is congruent to `1` or `7` mod `8`. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {p : ℕ} [inst : Fact (Nat.Prime p)], p ≠ 2 → (IsSquare 2 ↔ p % 8 = 1 ∨ p % 8 = 7)\"},\n {\"role\": \"user\", \"content\": \"An inequality involving `2`. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_2} [inst : LinearOrderedField α] {a : α}, 2 ≤ a → (1 - 1 / a)⁻¹ ≤ 2\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The set of natural numbers that are sums of two squares is closed under multiplication. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {a b x y u v : ℕ}, a = x ^ 2 + y ^ 2 → b = u ^ 2 + v ^ 2 → ∃ r s, a * b = r ^ 2 + s ^ 2\"},\n {\"role\": \"user\",\n  \"content\": \"Every nonzero natural number has a unique prime factorization \"},\n {\"role\": \"assistant\", \"content\": \"Set.InjOn Nat.factorization {x | x ≠ 0}\"},\n {\"role\": \"user\",\n  \"content\": \"A prime `p` satisfies `p % 2 = 1` if and only if `p ≠ 2`. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {p : ℕ} [inst : Fact (Nat.Prime p)], p % 2 = 1 ↔ p ≠ 2\"},\n {\"role\": \"user\",\n  \"content\":\n  \"In a finite field of characteristic `2`, all elements are squares. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {F : Type u_3} [inst : Field F] [inst_1 : Finite F], ringChar F = 2 → ∀ (a : F), IsSquare a\"},\n {\"role\": \"user\",\n  \"content\":\n  \"There are infinitely many pairs of primes that differ exactly by `2`.\"}]"}
{"text":"Every finite division ring is a field.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\", \"content\": \"A subfield is closed under multiplication. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u} [inst : Field K] (s : Subfield K) {x y : K}, x ∈ s → y ∈ s → x * y ∈ s\"},\n {\"role\": \"user\",\n  \"content\": \"An intermediate field is closed under multiplication. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u_1} {L : Type u_2} [inst : Field K] [inst_1 : Field L] [inst_2 : Algebra K L] (S : IntermediateField K L)\\n  {x y : L}, x ∈ S → y ∈ S → x * y ∈ S\"},\n {\"role\": \"user\",\n  \"content\": \"Any infinite type can be endowed a field structure. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {α : Type u} [inst : Infinite α], Nonempty (Field α)\"},\n {\"role\": \"user\",\n  \"content\": \"A normed division ring is a topological division ring. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : NormedDivisionRing α], TopologicalDivisionRing α\"},\n {\"role\": \"user\",\n  \"content\":\n  \"In a finite field of characteristic `2`, all elements are squares. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {F : Type u_3} [inst : Field F] [inst_1 : Finite F], ringChar F = 2 → ∀ (a : F), IsSquare a\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The quotient of a ring by an ideal is a field iff the ideal is maximal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} [inst : CommRing R] (I : Ideal R), Ideal.IsMaximal I ↔ IsField (R ⧸ I)\"},\n {\"role\": \"user\",\n  \"content\": \"An algebraically closed field is also separably closed. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (k : Type u) [inst : Field k] [inst_1 : IsAlgClosed k], IsSepClosed k\"},\n {\"role\": \"user\",\n  \"content\": \"All ideals in a division (semi)ring are trivial. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u} [inst : DivisionSemiring K] (I : Ideal K), I = ⊥ ∨ I = ⊤\"},\n {\"role\": \"user\",\n  \"content\": \"A field extension is algebraic if it is finite. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (K : Type u_1) (A : Type u_5) [inst : Field K] [inst_1 : Ring A] [inst_2 : Algebra K A]\\n  [inst_3 : FiniteDimensional K A], Algebra.IsAlgebraic K A\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A finite subgroup of the unit group of an integral domain is cyclic. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} {G : Type u_2} [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : Group G] [inst_3 : Finite G]\\n  (f : G →* R), Function.Injective ⇑f → IsCyclic G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A module over a division ring is noetherian if and only if it is finitely generated. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V],\\n  IsNoetherian K V ↔ Module.Finite K V\"},\n {\"role\": \"user\",\n  \"content\": \"A linear ordered field that is a floor ring is archimedean. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (α : Type u_2) [inst : LinearOrderedField α] [inst_1 : FloorRing α], Archimedean α\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A field is perfect if every irreducible polynomial is separable. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u_1} [inst : Field K] [self : PerfectField K] {f : Polynomial K}, Irreducible f → Polynomial.Separable f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A finite subgroup of the units of an integral domain is cyclic. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsDomain R] (S : Subgroup Rˣ) [inst_2 : Finite ↥S], IsCyclic ↥S\"},\n {\"role\": \"user\", \"content\": \"A subfield is closed under division. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u} [inst : Field K] (s : Subfield K) {x y : K}, x ∈ s → y ∈ s → x / y ∈ s\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A cyclotomic finite extension of a number field is a number field. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (S : Set ℕ+) (K : Type w) (L : Type z) [inst : Field K] [inst_1 : Field L] [inst_2 : Algebra K L] [h : NumberField K]\\n  [inst_3 : Finite ↑S] [inst : IsCyclotomicExtension S K L], NumberField L\"},\n {\"role\": \"user\", \"content\": \"A field is a valuation ring. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ (K : Type u) [inst : Field K], ValuationRing K\"},\n {\"role\": \"user\",\n  \"content\": \"An intermediate field is closed under division. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u_1} {L : Type u_2} [inst : Field K] [inst_1 : Field L] [inst_2 : Algebra K L] (S : IntermediateField K L)\\n  {x y : L}, x ∈ S → y ∈ S → x / y ∈ S\"},\n {\"role\": \"user\", \"content\": \"A finite field has prime power cardinality. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : Fintype α] [inst_1 : Field α], IsPrimePow (Fintype.card α)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A finite domain is a field. See also `littleWedderburn` and `Fintype.divisionRingOfIsDomain`. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (D : Type u_1) [inst : Finite D] [inst : Ring D] [inst_1 : IsDomain D], IsField D\"},\n {\"role\": \"user\", \"content\": \"Every finite division ring is a field.\"}]"}
{"text":"If each of two types can be mapped injectively into the other, then there is a bijection between them.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The dimensions of the domain and range of an injective linear map are equal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u} {V : Type v} [inst : Ring K] [inst_1 : AddCommGroup V] [inst_2 : Module K V] {V₂ : Type v'}\\n  [inst_3 : AddCommGroup V₂] [inst_4 : Module K V₂] {f : V →ₗ[K] V₂},\\n  Function.Injective ⇑f → FiniteDimensional.finrank K ↥(LinearMap.range f) = FiniteDimensional.finrank K V\"},\n {\"role\": \"user\", \"content\": \"An epimorphism is surjective. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} {M : Type u_2} {R₂ : Type u_3} {M₂ : Type u_4} [inst : Ring R] [inst_1 : Ring R₂]\\n  [inst_2 : AddCommMonoid M] [inst_3 : AddCommGroup M₂] [inst_4 : Module R M] [inst_5 : Module R₂ M₂] {τ₁₂ : R →+* R₂}\\n  [inst_6 : RingHomSurjective τ₁₂] {f : M →ₛₗ[τ₁₂] M₂},\\n  (∀ (u v : M₂ →ₗ[R₂] M₂ ⧸ LinearMap.range f), LinearMap.comp u f = LinearMap.comp v f → u = v) → LinearMap.range f = ⊤\"},\n {\"role\": \"user\",\n  \"content\": \"The induced map from the quotient by the kernel is injective. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} {S : Type v} [inst : CommRing R] [inst_1 : CommRing S] (f : R →+* S),\\n  Function.Injective ⇑(RingHom.kerLift f)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If the equalizer of two morphisms is an epimorphism, then the two morphisms are equal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {C : Type u} [inst : CategoryTheory.Category.{v, u} C] {X Y : C} {f g : X ⟶ Y}\\n  [inst_1 : CategoryTheory.Limits.HasEqualizer f g]\\n  [inst_2 : CategoryTheory.Epi (CategoryTheory.Limits.equalizer.ι f g)], f = g\"},\n {\"role\": \"user\",\n  \"content\": \"The two coercions to functions are jointly injective. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {E : Sort u_1} {α : outParam (Sort u_2)} {β : outParam (Sort u_3)} [self : EquivLike E α β] (e g : E),\\n  EquivLike.coe e = EquivLike.coe g → EquivLike.inv e = EquivLike.inv g → e = g\"},\n {\"role\": \"user\",\n  \"content\": \"Composing with a surjective linear map is injective. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : Semiring R] {M : Type u_2} [inst_1 : AddCommMonoid M] [inst_2 : Module R M] {N : Type u_3}\\n  [inst_3 : AddCommMonoid N] [inst_4 : Module R N] {ι : Type u_7} {M₂ : Type u_10} [inst_5 : AddCommMonoid M₂]\\n  [inst_6 : Module R M₂] (f : M₂ →ₗ[R] M),\\n  Function.Surjective ⇑f → Function.Injective fun g => AlternatingMap.compLinearMap g f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A scheme where the children of each set are pairwise disjoint induces an injective map. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {β : Type u_1} {α : Type u_2} {A : List β → Set α},\\n  CantorScheme.Disjoint A → Function.Injective (CantorScheme.inducedMap A).snd\"},\n {\"role\": \"user\",\n  \"content\":\n  \"On a finite-dimensional space, a linear map is injective if and only if it is surjective. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V]\\n  [inst_3 : FiniteDimensional K V] {f : V →ₗ[K] V}, Function.Injective ⇑f ↔ Function.Surjective ⇑f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The map sending a congruence relation to its underlying binary relation is injective. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {M : Type u_1} [inst : Mul M] {c d : Con M}, ⇑c = ⇑d → c = d\"},\n {\"role\": \"user\",\n  \"content\":\n  \"In any concrete category, injective morphisms are monomorphisms. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {C : Type u} [inst : CategoryTheory.Category.{v, u} C] [inst_1 : CategoryTheory.ConcreteCategory C] {X Y : C}\\n  (f : X ⟶ Y), Function.Injective ⇑f → CategoryTheory.Mono f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The map sending a congruence relation to its underlying equivalence relation is injective. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {M : Type u_1} [inst : Mul M] {c d : Con M}, c.toSetoid = d.toSetoid → c = d\"},\n {\"role\": \"user\",\n  \"content\":\n  \"On a finite-dimensional space, an injective linear map is surjective. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V]\\n  [inst_3 : FiniteDimensional K V] {f : V →ₗ[K] V}, Function.Injective ⇑f → Function.Surjective ⇑f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If two partial homeomorphisms are equivalent, so are their inverses. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} {β : Type u_2} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β]\\n  {e e' : PartialHomeomorph α β}, e ≈ e' → PartialHomeomorph.symm e ≈ PartialHomeomorph.symm e'\"},\n {\"role\": \"user\",\n  \"content\": \"An equivalence of categories transfers enough injectives. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {C : Type u₁} {D : Type u₂} [inst : CategoryTheory.Category.{v₁, u₁} C] [inst_1 : CategoryTheory.Category.{v₂, u₂} D]\\n  (e : CategoryTheory.Functor C D) [inst_2 : CategoryTheory.IsEquivalence e]\\n  [inst_3 : CategoryTheory.EnoughInjectives D], CategoryTheory.EnoughInjectives C\"},\n {\"role\": \"user\", \"content\": \"All maps in the diagram are injective \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {ι : Type u_1} {G : ι → Type u_2} {H : Type u_3} [inst : (i : ι) → Group (G i)] [inst_1 : Group H]\\n  {φ : (i : ι) → H →* G i}, Monoid.PushoutI.NormalWord.Transversal φ → ∀ (i : ι), Function.Injective ⇑(φ i)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"For functions on finite sets, they are bijections iff they map universes into universes. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} {β : Type u_2} [inst : Fintype α] [inst_1 : Fintype β] (f : α → β),\\n  Function.Bijective f ↔ Multiset.map f Finset.univ.val = Finset.univ.val\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A morphism in `Type u` is an isomorphism if and only if it is bijective. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X Y : Type u} (f : X ⟶ Y), CategoryTheory.IsIso f ↔ Function.Bijective f\"},\n {\"role\": \"user\", \"content\": \"A monomorphism is injective. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} {R₂ : Type u_3} {M : Type u_9} {M₂ : Type u_12} [inst : Semiring R] [inst_1 : Semiring R₂]\\n  [inst_2 : AddCommMonoid M] [inst_3 : AddCommMonoid M₂] [inst_4 : Module R M] [inst_5 : Module R₂ M₂] {τ₁₂ : R →+* R₂}\\n  {f : M →ₛₗ[τ₁₂] M₂},\\n  (∀ (u v : ↥(LinearMap.ker f) →ₗ[R] M), LinearMap.comp f u = LinearMap.comp f v → u = v) → LinearMap.ker f = ⊥\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If a bounded linear map is a bijection, then its inverse is also a bounded linear map. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {𝕜 : Type u_1} [inst : NontriviallyNormedField 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] {F : Type u_3} [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F]\\n  [inst_5 : CompleteSpace F] [inst_6 : CompleteSpace E] (e : E ≃ₗ[𝕜] F),\\n  Continuous ⇑e → Continuous ⇑(LinearEquiv.symm e)\"},\n {\"role\": \"user\",\n  \"content\": \"If a linear map is surjective, then its dual is injective. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} [inst : CommSemiring R] {M₁ : Type v} {M₂ : Type v'} [inst_1 : AddCommMonoid M₁] [inst_2 : Module R M₁]\\n  [inst_3 : AddCommMonoid M₂] [inst_4 : Module R M₂] {f : M₁ →ₗ[R] M₂},\\n  Function.Surjective ⇑f → Function.Injective ⇑(LinearMap.dualMap f)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If each of two types can be mapped injectively into the other, then there is a bijection between them.\"}]"}
{"text":"A finite graph in which every pair of vertices have precisely one common neighbour contains a vertex that is adjacent to all other vertices.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\": \"The complete graph on `n` vertices has `n.choose 2` edges. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u} [inst : Fintype V] [inst_1 : DecidableEq V],\\n  Finset.card (SimpleGraph.edgeFinset ⊤) = Nat.choose (Fintype.card V) 2\"},\n {\"role\": \"user\", \"content\": \"Any element commutes with itself. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {S : Type u_2} [inst : Mul S] (a : S), Commute a a\"},\n {\"role\": \"user\",\n  \"content\":\n  \"This lemma characterizes discrete topological spaces as those whose singletons are\\nneighbourhoods. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α], DiscreteTopology α ↔ ∀ (x : α), nhds x = pure x\"},\n {\"role\": \"user\",\n  \"content\": \"A space with discrete topology is a locally connected space. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (α : Type u_3) [inst : TopologicalSpace α] [inst_1 : DiscreteTopology α], LocallyConnectedSpace α\"},\n {\"role\": \"user\", \"content\": \"A finite union of finsets is finite. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} (f : α → Finset β), Set.Finite (Set.range f) → Set.Finite (⋃ a, ↑(f a))\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A linear equivalence which preserves a finite spanning set must have finite order. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} {M : Type u_2} [inst : CommSemiring R] [inst_1 : AddCommMonoid M] [inst_2 : Module R M] {Φ : Set M},\\n  Set.Finite Φ → Submodule.span R Φ = ⊤ → ∀ {e : M ≃ₗ[R] M}, Set.MapsTo (⇑e) Φ Φ → IsOfFinOrder e\"},\n {\"role\": \"user\", \"content\": \"Graph is acyclic. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u} {G : SimpleGraph V}, SimpleGraph.IsTree G → SimpleGraph.IsAcyclic G\"},\n {\"role\": \"user\",\n  \"content\": \"Any graph on `n` vertices has at most `n.choose 2` edges. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u} {G : SimpleGraph V} [inst : Fintype ↑(SimpleGraph.edgeSet G)] [inst_1 : Fintype V]\\n  [inst_2 : DecidableEq V], Finset.card (SimpleGraph.edgeFinset G) ≤ Nat.choose (Fintype.card V) 2\"},\n {\"role\": \"user\", \"content\": \"Graph is connected. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u} {G : SimpleGraph V}, SimpleGraph.IsTree G → SimpleGraph.Connected G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Every finite subset of a linearly independent set is linearly independent. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_2} {M : Type u_4} [inst : Semiring R] [inst_1 : AddCommMonoid M] [inst_2 : Module R M] (s : Set M),\\n  LinearIndependent (ι := { x // x ∈ s }) R Subtype.val → ∀ (t : Finset ↑s), LinearIndependent R Subtype.val\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The maximum degree in the graph is at least the degree of any particular vertex. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u} (G : SimpleGraph V) [inst : Fintype V] [inst_1 : DecidableRel G.Adj] (v : V),\\n  SimpleGraph.degree G v ≤ SimpleGraph.maxDegree G\"},\n {\"role\": \"user\",\n  \"content\": \"A point with a finite neighborhood has to be isolated. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : T1Space X] (x : X) {s : Set X},\\n  s ∈ nhds x → Set.Finite s → IsOpen {x}\"},\n {\"role\": \"user\",\n  \"content\": \"A clique is a set of vertices whose induced graph is complete. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} (G : SimpleGraph α) {s : Set α}, SimpleGraph.IsClique G s ↔ SimpleGraph.induce s G = ⊤\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Every finite subset of an algebraically independent set is algebraically independent. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_3} {A : Type u_5} [inst : CommRing R] [inst_1 : CommRing A] [inst_2 : Algebra R A] (s : Set A),\\n  AlgebraicIndependent R Subtype.val → ∀ (t : Finset ↑s), AlgebraicIndependent R Subtype.val\"},\n {\"role\": \"user\",\n  \"content\":\n  \"In an infinite graph, the set of components out of a finite set is nonempty. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u} (G : SimpleGraph V) [inst : Infinite V] (K : Finset V), Nonempty (SimpleGraph.ComponentCompl G ↑K)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The minimum degree in the graph is at most the degree of any particular vertex. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u} (G : SimpleGraph V) [inst : Fintype V] [inst_1 : DecidableRel G.Adj] (v : V),\\n  SimpleGraph.minDegree G ≤ SimpleGraph.degree G v\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A locally finite preconnected infinite graph has at least one end. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type} (G : SimpleGraph V) [inst : SimpleGraph.LocallyFinite G] [inst : Fact (SimpleGraph.Preconnected G)]\\n  [inst : Infinite V], Set.Nonempty (SimpleGraph.end G)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A finite graph in which every pair of vertices have precisely one common neighbour contains a vertex that is adjacent to all other vertices.\"}]"}
{"text":"The number of partitions with odd parts is equal to the number of partitions with distinct parts.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\": \"Every nonzero natural number has a unique prime factorization \"},\n {\"role\": \"assistant\", \"content\": \"Set.InjOn Nat.factorization {x | x ≠ 0}\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The finite field `F` has even cardinality iff it has characteristic `2`. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {F : Type u_3} [inst : Field F] [inst_1 : Fintype F], ringChar F = 2 ↔ Fintype.card F % 2 = 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If x ∈ α is in 2 elements of a set of sets partitioning α, those 2 sets are equal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} {c : Set (Set α)},\\n  (∀ (a : α), ∃! b x, a ∈ b) → ∀ {x : α} {b b' : Set α}, b ∈ c → x ∈ b → b' ∈ c → x ∈ b' → b = b'\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Conjugacy classes form a partition of G, stated in terms of cardinality. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (G : Type u) [inst : Group G] [inst_1 : Fintype (ConjClasses G)] [inst_2 : Fintype G]\\n  [inst_3 : (x : ConjClasses G) → Fintype ↑(ConjClasses.carrier x)],\\n  (Finset.sum Finset.univ fun x => Finset.card (Set.toFinset (ConjClasses.carrier x))) = Fintype.card G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If we can partition a product into subsets that cancel out, then the whole product cancels. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {β : Type u} {α : Type v} {s : Finset α} {f : α → β} [inst : CommMonoid β] (R : Setoid α)\\n  [inst_1 : DecidableRel Setoid.r],\\n  (∀ x ∈ s, (Finset.prod (Finset.filter (fun y => y ≈ x) s) fun a => f a) = 1) → (Finset.prod s fun x => f x) = 1\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Distinct elements of a set of sets partitioning α are disjoint. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} {c : Set (Set α)}, (∀ (a : α), ∃! b x, a ∈ b) → Set.PairwiseDisjoint c id\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Two natural numbers are equal if and only if they have the same multiples. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {m n : ℕ}, (∀ (a : ℕ), m ∣ a ↔ n ∣ a) ↔ m = n\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The functions in the partition of unity add up to at most `1` everywhere. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {ι : Type uι} {E : Type uE} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] {H : Type uH}\\n  [inst_2 : TopologicalSpace H] {I : ModelWithCorners ℝ E H} {M : Type uM} [inst_3 : TopologicalSpace M]\\n  [inst_4 : ChartedSpace H M] {s : optParam (Set M) Set.univ} (self : SmoothPartitionOfUnity ι I M s) (x : M),\\n  (finsum fun i => (SmoothPartitionOfUnity.toFun s self i) x) ≤ 1\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Two natural numbers are equal if and only if they have the same divisors. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {m n : ℕ}, (∀ (a : ℕ), a ∣ m ↔ a ∣ n) ↔ m = n\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If we can partition a sum into subsets that cancel out, then the whole sum cancels.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {β : Type u} {α : Type v} {s : Finset α} {f : α → β} [inst : AddCommMonoid β] (R : Setoid α)\\n  [inst_1 : DecidableRel Setoid.r],\\n  (∀ x ∈ s, (Finset.sum (Finset.filter (fun y => y ≈ x) s) fun a => f a) = 0) → (Finset.sum s fun x => f x) = 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The indices of `Quotient.out'` and `IndexedPartition.out` are equal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {ι : Type u_1} {α : Type u_2} {s : ι → Set α} (hs : IndexedPartition s) (x : IndexedPartition.Quotient hs),\\n  IndexedPartition.index hs (Quotient.out' x) = IndexedPartition.index hs ((IndexedPartition.out hs) x)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The functions in the partition of unity add up to `1` at any point of `s`. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {ι : Type uι} {E : Type uE} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] {H : Type uH}\\n  [inst_2 : TopologicalSpace H] {I : ModelWithCorners ℝ E H} {M : Type uM} [inst_3 : TopologicalSpace M]\\n  [inst_4 : ChartedSpace H M] {s : optParam (Set M) Set.univ} (self : SmoothPartitionOfUnity ι I M s),\\n  ∀ x ∈ s, (finsum fun i => (SmoothPartitionOfUnity.toFun s self i) x) = 1\"},\n {\"role\": \"user\",\n  \"content\": \"The convolution of two even functions is also even. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {𝕜 : Type u𝕜} {G : Type uG} {E : Type uE} {E' : Type uE'} {F : Type uF} [inst : NormedAddCommGroup E]\\n  [inst_1 : NormedAddCommGroup E'] [inst_2 : NormedAddCommGroup F] {f : G → E} {g : G → E'} {x : G}\\n  [inst_3 : NontriviallyNormedField 𝕜] [inst_4 : NormedSpace 𝕜 E] [inst_5 : NormedSpace 𝕜 E'] [inst_6 : NormedSpace 𝕜 F]\\n  (L : E →L[𝕜] E' →L[𝕜] F) [inst_7 : MeasurableSpace G] {μ : MeasureTheory.Measure G} [inst_8 : NormedSpace ℝ F]\\n  [inst_9 : AddCommGroup G] [inst_10 : MeasureTheory.Measure.IsAddLeftInvariant μ]\\n  [inst_11 : MeasureTheory.Measure.IsNegInvariant μ] [inst_12 : MeasurableNeg G] [inst_13 : MeasurableAdd G],\\n  (∀ᵐ (x : G) ∂μ, f (-x) = f x) → (∀ᵐ (x : G) ∂μ, g (-x) = g x) → convolution f g L (-x) = convolution f g L x\"},\n {\"role\": \"user\",\n  \"content\": \"All the functions in the partition of unity are nonnegative. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {ι : Type uι} {E : Type uE} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] {H : Type uH}\\n  [inst_2 : TopologicalSpace H] {I : ModelWithCorners ℝ E H} {M : Type uM} [inst_3 : TopologicalSpace M]\\n  [inst_4 : ChartedSpace H M] {s : optParam (Set M) Set.univ} (self : SmoothPartitionOfUnity ι I M s) (i : ι) (x : M),\\n  0 ≤ (SmoothPartitionOfUnity.toFun s self i) x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A sum can be partitioned into a sum of sums, each equivalent under a setoid.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {β : Type u} {α : Type v} {s : Finset α} {f : α → β} [inst : AddCommMonoid β] (R : Setoid α)\\n  [inst_1 : DecidableRel Setoid.r],\\n  (Finset.sum s fun x => f x) =\\n    Finset.sum (Finset.image Quotient.mk'' s) fun xbar =>\\n      Finset.sum (Finset.filter (fun x => ⟦x⟧ = xbar) s) fun y => f y\"},\n {\"role\": \"user\", \"content\": \"Equivalence classes partition the type. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {α : Type u_1} {r : Setoid α} (a : α), ∃! b x, a ∈ b\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The increment partition has energy greater than the original one by a known fixed amount. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : Fintype α] {P : Finpartition Finset.univ} {G : SimpleGraph α} {ε : ℝ} [inst_1 : Nonempty α]\\n  (hP : Finpartition.IsEquipartition P),\\n  7 ≤ Finset.card P.parts →\\n    100 < 4 ^ Finset.card P.parts * ε ^ 5 →\\n      Finset.card P.parts * 16 ^ Finset.card P.parts ≤ Fintype.card α →\\n        ¬Finpartition.IsUniform P G ε →\\n          ε ≤ 1 →\\n            ↑(Finpartition.energy P G) + ε ^ 5 / 4 ≤ ↑(Finpartition.energy (SzemerediRegularity.increment hP G ε) G)\"},\n {\"role\": \"user\",\n  \"content\": \"A finpartition gives rise to a setoid partition \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} (f : Finpartition Set.univ), Setoid.IsPartition ↑f.parts\"},\n {\"role\": \"user\", \"content\": \"The partition is supremum-independent \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : Lattice α] [inst_1 : OrderBot α] {a : α} (self : Finpartition a), Finset.SupIndep self.parts id\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The increment partition has a prescribed (very big) size in terms of the original partition. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : Fintype α] {P : Finpartition Finset.univ} {hP : Finpartition.IsEquipartition P}\\n  {G : SimpleGraph α} {ε : ℝ},\\n  Finset.card P.parts * 16 ^ Finset.card P.parts ≤ Fintype.card α →\\n    ¬Finpartition.IsUniform P G ε →\\n      Finset.card (SzemerediRegularity.increment hP G ε).parts = SzemerediRegularity.stepBound (Finset.card P.parts)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The number of partitions with odd parts is equal to the number of partitions with distinct parts.\"}]"}
{"text":"Every non-empty poset in which every chain has an upper bound contains a maximal element.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\": \"The intrinsic interior of a nonempty convex set is nonempty. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : NormedSpace ℝ V] [inst_2 : FiniteDimensional ℝ V] {s : Set V},\\n  Convex ℝ s → Set.Nonempty s → Set.Nonempty (intrinsicInterior ℝ s)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"In a (nontrivial) complex Banach algebra, every element has nonempty spectrum. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {A : Type u_2} [inst : NormedRing A] [inst_1 : NormedAlgebra ℂ A] [inst_2 : CompleteSpace A] [inst_3 : Nontrivial A]\\n  (a : A), Set.Nonempty (spectrum ℂ a)\"},\n {\"role\": \"user\", \"content\": \"A nonempty convex set is connected. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {E : Type u_3} [inst : AddCommGroup E] [inst_1 : Module ℝ E] [inst_2 : TopologicalSpace E]\\n  [inst_3 : TopologicalAddGroup E] [inst_4 : ContinuousSMul ℝ E] {s : Set E},\\n  Convex ℝ s → Set.Nonempty s → IsConnected s\"},\n {\"role\": \"user\",\n  \"content\":\n  \"In a directed order, the union of two sets is bounded above if and only if both sets are. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : Preorder α] [inst_1 : IsDirected α fun x x_1 => x ≤ x_1] {s t : Set α},\\n  BddAbove (s ∪ t) ↔ BddAbove s ∧ BddAbove t\"},\n {\"role\": \"user\",\n  \"content\": \"Any element of a set is more than the set infimum. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_9} [self : CompleteSemilatticeInf α] (s : Set α), ∀ a ∈ s, sInf s ≤ a\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A sequentially compact set in a uniform space is totally bounded. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} [inst : UniformSpace X] {s : Set X}, IsSeqCompact s → TotallyBounded s\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Any uncountable closed set in a second countable space contains a nonempty perfect subset.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] {C : Set α} [inst_1 : SecondCountableTopology α],\\n  IsClosed C → ¬Set.Countable C → ∃ D, Perfect D ∧ Set.Nonempty D ∧ D ⊆ C\"},\n {\"role\": \"user\",\n  \"content\": \"Every set open in the upper topology is a upper set. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : Preorder α] [inst_1 : TopologicalSpace α] [inst_2 : Topology.IsUpper α] {s : Set α},\\n  IsOpen s → IsUpperSet s\"},\n {\"role\": \"user\",\n  \"content\":\n  \"In a directed order, the union of bounded above sets is bounded above. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : Preorder α] [inst_1 : IsDirected α fun x x_1 => x ≤ x_1] {s t : Set α},\\n  BddAbove s → BddAbove t → BddAbove (s ∪ t)\"},\n {\"role\": \"user\", \"content\": \"A chain of lifts has an upper bound. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {F : Type u_1} {E : Type u_2} {K : Type u_3} [inst : Field F] [inst_1 : Field E] [inst_2 : Field K]\\n  [inst_3 : Algebra F E] [inst_4 : Algebra F K] (c : Set (IntermediateField.Lifts F E K)),\\n  IsChain (fun x x_1 => x ≤ x_1) c → ∃ ub, ∀ a ∈ c, a ≤ ub\"},\n {\"role\": \"user\", \"content\": \"A finite set is bounded above.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : Preorder α] [inst_1 : IsDirected α fun x x_1 => x ≤ x_1] [inst_2 : Nonempty α] {s : Set α},\\n  Set.Finite s → BddAbove s\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A finite union of sets which are all bounded above is still bounded above.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} [inst : Preorder α] [inst_1 : IsDirected α fun x x_1 => x ≤ x_1] [inst_2 : Nonempty α]\\n  {I : Set β} {S : β → Set α}, Set.Finite I → (BddAbove (⋃ i ∈ I, S i) ↔ ∀ i ∈ I, BddAbove (S i))\"},\n {\"role\": \"user\",\n  \"content\": \"When there is a global maximum, every set is bounded above. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : Preorder α] [inst_1 : OrderTop α] (s : Set α), BddAbove s\"},\n {\"role\": \"user\", \"content\": \"Any upper bound is more than the set supremum. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [self : CompleteBooleanAlgebra α] (s : Set α) (a : α), (∀ b ∈ s, b ≤ a) → sSup s ≤ a\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Every chain is contained in a maximal chain. This generalizes Hausdorff's maximality principle.\\n\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} {r : α → α → Prop} {c : Set α}, IsChain r c → ∃ M, IsMaxChain r M ∧ c ⊆ M\"},\n {\"role\": \"user\",\n  \"content\":\n  \"**Zorn's lemma**\\n\\nIf every chain has an upper bound, then there exists a maximal element. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} {r : α → α → Prop},\\n  (∀ (c : Set α), IsChain r c → ∃ ub, ∀ a ∈ c, r a ub) →\\n    (∀ {a b c : α}, r a b → r b c → r a c) → ∃ m, ∀ (a : α), r m a → r a m\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Every non-empty poset in which every chain has an upper bound contains a maximal element.\"}]"}
{"text":"A group whose automorphism group is cyclic is Abelian.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\": \"Abelian groups have nilpotency class at most one \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_2} [inst : CommGroup G], Group.nilpotencyClass G ≤ 1\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Subgroups of additive torsion-free groups are additively torsion-free.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddGroup G], AddMonoid.IsTorsionFree G → ∀ (H : AddSubgroup G), AddMonoid.IsTorsionFree ↥H\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The torsion submonoid of an abelian group equals the torsion subgroup as a submonoid. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (G : Type u_1) [inst : CommGroup G], CommMonoid.torsion G = (CommGroup.torsion G).toSubmonoid\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A nilpotent Lie algebra with a representation whose trace form is non-singular is Abelian. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (R : Type u_1) (L : Type u_3) (M : Type u_4) [inst : CommRing R] [inst_1 : LieRing L] [inst_2 : LieAlgebra R L]\\n  [inst_3 : AddCommGroup M] [inst_4 : Module R M] [inst_5 : LieRingModule L M] [inst_6 : LieModule R L M]\\n  [inst_7 : Module.Free R M] [inst_8 : Module.Finite R M] [inst_9 : LieAlgebra.IsNilpotent R L] [inst_10 : IsDomain R]\\n  [inst_11 : IsPrincipalIdealRing R], LinearMap.ker (LieModule.traceForm R L M) = ⊥ → IsLieAbelian L\"},\n {\"role\": \"user\", \"content\": \"An abelian category is idempotent complete. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (D : Type u_2) [inst : CategoryTheory.Category.{u_3, u_2} D] [inst_1 : CategoryTheory.Abelian D],\\n  CategoryTheory.IsIdempotentComplete D\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The right regular action of an additive group on itself is transitive.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_2} [inst : AddGroup G], AddAction.IsPretransitive Gᵃᵒᵖ G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Subgroups of additive torsion groups are additive torsion groups.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddGroup G], AddMonoid.IsTorsion G → ∀ (H : AddSubgroup G), AddMonoid.IsTorsion ↥H\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A group is finitely generated if and only if it is finitely generated as a monoid. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {G : Type u_3} [inst : Group G], Group.FG G ↔ Monoid.FG G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The quotient by the center of a group of cardinality `p ^ 2` is cyclic. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {p : ℕ} {G : Type u_1} [inst : Group G] [inst_1 : Fintype G] [inst_2 : Fact (Nat.Prime p)],\\n  Fintype.card G = p ^ 2 → IsCyclic (G ⧸ Subgroup.center G)\"},\n {\"role\": \"user\",\n  \"content\": \"Subgroups of torsion groups are torsion groups. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G], Monoid.IsTorsion G → ∀ (H : Subgroup G), Monoid.IsTorsion ↥H\"},\n {\"role\": \"user\", \"content\": \"Finite groups are torsion groups. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] [inst_1 : Finite G], Monoid.IsTorsion G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The product of group homomorphisms is a group homomorphism if the target is commutative. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} {β : Type u_2} [inst : Group α] [inst_1 : CommGroup β] {f g : α → β},\\n  IsGroupHom f → IsGroupHom g → IsGroupHom fun a => f a * g a\"},\n {\"role\": \"user\", \"content\": \"A group homomorphism is a monoid homomorphism. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} [inst : Group α] [inst_1 : Group β] {f : α → β}, IsGroupHom f → IsMonoidHom f\"},\n {\"role\": \"user\", \"content\": \"The torsion subgroup is cylic. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (K : Type u_1) [inst : Field K] [inst_1 : NumberField K], IsCyclic ↥(NumberField.Units.torsion K)\"},\n {\"role\": \"user\", \"content\": \"Every subgroup of `ℤ` is cyclic. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ (H : AddSubgroup ℤ), ∃ a, H = AddSubgroup.closure {a}\"},\n {\"role\": \"user\", \"content\": \"Abelian groups are nilpotent \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {G : Type u_2} [inst : CommGroup G], Group.IsNilpotent G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A finite subgroup of the units of an integral domain is cyclic. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsDomain R] (S : Subgroup Rˣ) [inst_2 : Finite ↥S], IsCyclic ↥S\"},\n {\"role\": \"user\", \"content\": \"A finite group of prime order is cyclic.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : AddGroup α] [inst_1 : Fintype α] {p : ℕ} [hp : Fact (Nat.Prime p)],\\n  Fintype.card α = p → IsAddCyclic α\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A finite subgroup of the unit group of an integral domain is cyclic. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} {G : Type u_2} [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : Group G] [inst_3 : Finite G]\\n  (f : G →* R), Function.Injective ⇑f → IsCyclic G\"},\n {\"role\": \"user\", \"content\": \"A finite group of prime order is cyclic. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : Group α] [inst_1 : Fintype α] {p : ℕ} [hp : Fact (Nat.Prime p)], Fintype.card α = p → IsCyclic α\"},\n {\"role\": \"user\",\n  \"content\": \"A group whose automorphism group is cyclic is Abelian.\"}]"}
{"text":"A uniformly continuous function of a uniformly continuous function is uniformly continuous.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A constant sequence of functions is uniformly integrable in the probability sense. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} {β : Type u_2} {ι : Type u_3} {m : MeasurableSpace α} {μ : MeasureTheory.Measure α}\\n  [inst : NormedAddCommGroup β] {p : ENNReal} {g : α → β},\\n  1 ≤ p → p ≠ ⊤ → MeasureTheory.Memℒp g p → MeasureTheory.UniformIntegrable (fun x => g) p μ\"},\n {\"role\": \"user\",\n  \"content\": \"A continuous function is bounded above on a compact set. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} {β : Type u_2} [inst : LinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : TopologicalSpace β]\\n  [inst_3 : ClosedIciTopology α] [inst_4 : Nonempty α] {f : β → α} {K : Set β},\\n  IsCompact K → ContinuousOn f K → BddAbove (f '' K)\"},\n {\"role\": \"user\",\n  \"content\": \"Each function of an equicontinuous family is continuous. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {ι : Type u_1} {X : Type u_3} {α : Type u_6} [inst : TopologicalSpace X] [inst_1 : UniformSpace α] {F : ι → X → α},\\n  Equicontinuous F → ∀ (i : ι), Continuous (F i)\"},\n {\"role\": \"user\", \"content\": \"A Lipschitz function is uniformly continuous. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} [inst : PseudoEMetricSpace α] [inst_1 : PseudoEMetricSpace β] {K : NNReal} {f : α → β},\\n  LipschitzWith K f → UniformContinuous f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A sequentially continuous function defined on a sequential space is continuous. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] [inst_2 : SequentialSpace X]\\n  {f : X → Y}, SeqContinuous f → Continuous f\"},\n {\"role\": \"user\", \"content\": \"Uniform continuity of the function \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_4} {β : Type u_5} [inst : UniformSpace α] [inst_1 : UniformSpace β] (self : α ≃ᵤ β),\\n  UniformContinuous self.toFun\"},\n {\"role\": \"user\", \"content\": \"A constant function is uniformly integrable. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} {β : Type u_2} {ι : Type u_3} {m : MeasurableSpace α} (μ : MeasureTheory.Measure α)\\n  [inst : NormedAddCommGroup β] {p : ENNReal} {g : α → β},\\n  1 ≤ p → p ≠ ⊤ → MeasureTheory.Memℒp g p → MeasureTheory.UnifIntegrable (fun x => g) p μ\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A function which can be locally uniformly approximated by continuous functions is continuous. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} [inst : UniformSpace β] {f : α → β} [inst_1 : TopologicalSpace α],\\n  (∀ (x : α), ∀ u ∈ uniformity β, ∃ t ∈ nhds x, ∃ F, ContinuousAt F x ∧ ∀ y ∈ t, (f y, F y) ∈ u) → Continuous f\"},\n {\"role\": \"user\",\n  \"content\": \"A locally uniform limit of continuous functions is continuous. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {p : Filter ι}\\n  [inst_1 : TopologicalSpace α],\\n  TendstoLocallyUniformly F f p → (∀ᶠ (n : ι) in p, Continuous (F n)) → ∀ [inst_2 : Filter.NeBot p], Continuous f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A function which can be uniformly approximated by continuous functions is continuous. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} [inst : UniformSpace β] {f : α → β} [inst_1 : TopologicalSpace α],\\n  (∀ u ∈ uniformity β, ∃ F, Continuous F ∧ ∀ (y : α), (f y, F y) ∈ u) → Continuous f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Each function of a uniformly equicontinuous family is uniformly continuous. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {ι : Type u_1} {α : Type u_6} {β : Type u_7} [inst : UniformSpace α] [inst_1 : UniformSpace β] {F : ι → β → α},\\n  UniformEquicontinuous F → ∀ (i : ι), UniformContinuous (F i)\"},\n {\"role\": \"user\",\n  \"content\": \"A uniform limit of continuous functions is continuous. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {p : Filter ι}\\n  [inst_1 : TopologicalSpace α],\\n  TendstoUniformly F f p → (∀ᶠ (n : ι) in p, Continuous (F n)) → ∀ [inst_2 : Filter.NeBot p], Continuous f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A uniformly continuous function of a uniformly continuous function is uniformly continuous.\"}]"}
{"text":"A uniformly continuous function of a uniformly continuous function is uniformly continuous.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A constant sequence of functions is uniformly integrable in the probability sense. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} {β : Type u_2} {ι : Type u_3} {m : MeasurableSpace α} {μ : MeasureTheory.Measure α}\\n  [inst : NormedAddCommGroup β] {p : ENNReal} {g : α → β},\\n  1 ≤ p → p ≠ ⊤ → MeasureTheory.Memℒp g p → MeasureTheory.UniformIntegrable (fun x => g) p μ\"},\n {\"role\": \"user\",\n  \"content\": \"A continuous function is bounded above on a compact set. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} {β : Type u_2} [inst : LinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : TopologicalSpace β]\\n  [inst_3 : ClosedIciTopology α] [inst_4 : Nonempty α] {f : β → α} {K : Set β},\\n  IsCompact K → ContinuousOn f K → BddAbove (f '' K)\"},\n {\"role\": \"user\",\n  \"content\": \"Each function of an equicontinuous family is continuous. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {ι : Type u_1} {X : Type u_3} {α : Type u_6} [inst : TopologicalSpace X] [inst_1 : UniformSpace α] {F : ι → X → α},\\n  Equicontinuous F → ∀ (i : ι), Continuous (F i)\"},\n {\"role\": \"user\", \"content\": \"A Lipschitz function is uniformly continuous. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} [inst : PseudoEMetricSpace α] [inst_1 : PseudoEMetricSpace β] {K : NNReal} {f : α → β},\\n  LipschitzWith K f → UniformContinuous f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A sequentially continuous function defined on a sequential space is continuous. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] [inst_2 : SequentialSpace X]\\n  {f : X → Y}, SeqContinuous f → Continuous f\"},\n {\"role\": \"user\", \"content\": \"Uniform continuity of the function \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_4} {β : Type u_5} [inst : UniformSpace α] [inst_1 : UniformSpace β] (self : α ≃ᵤ β),\\n  UniformContinuous self.toFun\"},\n {\"role\": \"user\", \"content\": \"A constant function is uniformly integrable. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} {β : Type u_2} {ι : Type u_3} {m : MeasurableSpace α} (μ : MeasureTheory.Measure α)\\n  [inst : NormedAddCommGroup β] {p : ENNReal} {g : α → β},\\n  1 ≤ p → p ≠ ⊤ → MeasureTheory.Memℒp g p → MeasureTheory.UnifIntegrable (fun x => g) p μ\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A function which can be locally uniformly approximated by continuous functions is continuous. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} [inst : UniformSpace β] {f : α → β} [inst_1 : TopologicalSpace α],\\n  (∀ (x : α), ∀ u ∈ uniformity β, ∃ t ∈ nhds x, ∃ F, ContinuousAt F x ∧ ∀ y ∈ t, (f y, F y) ∈ u) → Continuous f\"},\n {\"role\": \"user\",\n  \"content\": \"A locally uniform limit of continuous functions is continuous. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {p : Filter ι}\\n  [inst_1 : TopologicalSpace α],\\n  TendstoLocallyUniformly F f p → (∀ᶠ (n : ι) in p, Continuous (F n)) → ∀ [inst_2 : Filter.NeBot p], Continuous f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A function which can be uniformly approximated by continuous functions is continuous. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} [inst : UniformSpace β] {f : α → β} [inst_1 : TopologicalSpace α],\\n  (∀ u ∈ uniformity β, ∃ F, Continuous F ∧ ∀ (y : α), (f y, F y) ∈ u) → Continuous f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Each function of a uniformly equicontinuous family is uniformly continuous. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {ι : Type u_1} {α : Type u_6} {β : Type u_7} [inst : UniformSpace α] [inst_1 : UniformSpace β] {F : ι → β → α},\\n  UniformEquicontinuous F → ∀ (i : ι), UniformContinuous (F i)\"},\n {\"role\": \"user\",\n  \"content\": \"A uniform limit of continuous functions is continuous. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {p : Filter ι}\\n  [inst_1 : TopologicalSpace α],\\n  TendstoUniformly F f p → (∀ᶠ (n : ι) in p, Continuous (F n)) → ∀ [inst_2 : Filter.NeBot p], Continuous f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A uniformly continuous function of a uniformly continuous function is uniformly continuous.\"}]"}
{"text":"A topological space is normal if and only if any two disjoint closed subsets can be separated by a continuous function.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"For any topological space `X`, its one point compactification is a compact space. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X], CompactSpace (OnePoint X)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The only open sets in the indiscrete topology are the empty set and the whole space. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {α : Type u_1} (U : Set α), IsOpen U ↔ U = ∅ ∨ U = Set.univ\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The intersection of two open compact subsets of a quasi-separated space is compact.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_3} [inst : TopologicalSpace α] [self : QuasiSeparatedSpace α] (U V : Set α),\\n  IsOpen U → IsCompact U → IsOpen V → IsCompact V → IsCompact (U ∩ V)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The product of a countable family of separable spaces is a separable space. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {ι : Type u_1} {X : ι → Type u_2} [inst : (i : ι) → TopologicalSpace (X i)]\\n  [inst_1 : ∀ (i : ι), TopologicalSpace.SeparableSpace (X i)] [inst_2 : Countable ι],\\n  TopologicalSpace.SeparableSpace ((i : ι) → X i)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A subspace is dense iff its topological closure is the entire space. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} {M : Type v} [inst : Semiring R] [inst_1 : TopologicalSpace M] [inst_2 : AddCommMonoid M]\\n  [inst_3 : Module R M] [inst_4 : ContinuousConstSMul R M] [inst_5 : ContinuousAdd M] {s : Submodule R M},\\n  Dense ↑s ↔ Submodule.topologicalClosure s = ⊤\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Any two points in a path-connected space must be joined by a continuous path. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_4} [inst : TopologicalSpace X] [self : PathConnectedSpace X] (x y : X), Joined x y\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A linear order with order topology is a completely normal Hausdorff topological space. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} [inst : LinearOrder X] [inst_1 : TopologicalSpace X] [inst : OrderTopology X], T5Space X\"},\n {\"role\": \"user\",\n  \"content\":\n  \"In a separable space, a family of nonempty disjoint open sets is countable. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [t : TopologicalSpace α] [inst : TopologicalSpace.SeparableSpace α] {ι : Type u_1} {s : ι → Set α}\\n  {a : Set ι}, Set.PairwiseDisjoint a s → (∀ i ∈ a, IsOpen (s i)) → (∀ i ∈ a, Set.Nonempty (s i)) → Set.Countable a\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Any continuous function on compact Hausdorff spaces is a closed map. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {X Y : CompHaus} (f : X ⟶ Y), IsClosedMap ⇑f\"},\n {\"role\": \"user\",\n  \"content\": \"The product of two separable spaces is a separable space. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [t : TopologicalSpace α] {β : Type u_1} [inst : TopologicalSpace β]\\n  [inst_1 : TopologicalSpace.SeparableSpace α] [inst_2 : TopologicalSpace.SeparableSpace β],\\n  TopologicalSpace.SeparableSpace (α × β)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Every two points in a Hausdorff space admit disjoint open neighbourhoods. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u} [inst : TopologicalSpace X] [self : T2Space X] (x y : X),\\n  x ≠ y → ∃ u v, IsOpen u ∧ IsOpen v ∧ x ∈ u ∧ y ∈ v ∧ Disjoint u v\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Two disjoint sets in a normal space admit disjoint neighbourhoods. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u} [inst : TopologicalSpace X] [self : NormalSpace X] (s t : Set X),\\n  IsClosed s → IsClosed t → Disjoint s t → SeparatedNhds s t\"},\n {\"role\": \"user\", \"content\": \"Finite topological spaces are compact. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u} [inst : TopologicalSpace X] [inst_1 : Finite X], CompactSpace X\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A regular topological space with second countable topology is a normal space. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : RegularSpace X] [inst_2 : SecondCountableTopology X],\\n  NormalSpace X\"},\n {\"role\": \"user\",\n  \"content\": \"A space with discrete topology is a locally connected space. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (α : Type u_3) [inst : TopologicalSpace α] [inst_1 : DiscreteTopology α], LocallyConnectedSpace α\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A topological space with discrete topology is separable iff it is countable. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [t : TopologicalSpace α] [inst : DiscreteTopology α], TopologicalSpace.SeparableSpace α ↔ Countable α\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A topological space is normal if and only if any two disjoint closed subsets can be separated by a continuous function.\"}]"}
{"text":"If a function from the unit interval to itself has a point of period three, then it has points of all positive periods.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Any three points in an orthocentric system are affinely independent. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\\n  [inst_3 : NormedAddTorsor V P] {s : Set P},\\n  EuclideanGeometry.OrthocentricSystem s →\\n    ∀ {p : Fin 3 → P}, Set.range p ⊆ s → Function.Injective p → AffineIndependent ℝ p\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If `f` sends two periodic points `x` and `y` of positive periods to the same point,\\nthen `x = y`. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} {f : α → α} {x y : α} {m n : ℕ},\\n  Function.IsPeriodicPt f m x → Function.IsPeriodicPt f n y → 0 < m → 0 < n → f x = f y → x = y\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Right multiplication by a positive element is strictly monotone. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_2} [self : CanonicallyLinearOrderedSemifield α] (a b c : α), a < b → 0 < c → a * c < b * c\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If three points are not collinear, the angle between them is positive. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\\n  [inst_3 : NormedAddTorsor V P] {p₁ p₂ p₃ : P}, ¬Collinear ℝ {p₁, p₂, p₃} → 0 < EuclideanGeometry.angle p₁ p₂ p₃\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If a point lies in the affine span of two points, those three points are collinear. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {k : Type u_1} {V : Type u_2} {P : Type u_3} [inst : DivisionRing k] [inst_1 : AddCommGroup V] [inst_2 : Module k V]\\n  [inst_3 : AddTorsor V P] {p₁ p₂ p₃ : P}, p₁ ∈ affineSpan k {p₂, p₃} → Collinear k {p₁, p₂, p₃}\"},\n {\"role\": \"user\", \"content\": \"A continuous, periodic function is bounded. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : PseudoMetricSpace α] {f : ℝ → α} {c : ℝ},\\n  Function.Periodic f c → c ≠ 0 → Continuous f → Bornology.IsBounded (Set.range f)\"},\n {\"role\": \"user\",\n  \"content\": \"If the angle between three points is π, they are collinear. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\\n  [inst_3 : NormedAddTorsor V P] {p₁ p₂ p₃ : P}, EuclideanGeometry.angle p₁ p₂ p₃ = Real.pi → Collinear ℝ {p₁, p₂, p₃}\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If two functions are equal in the relevant interval, their interval integrals are also equal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {E : Type u_3} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] {f g : ℝ → E} {μ : MeasureTheory.Measure ℝ}\\n  {a b : ℝ}, Set.EqOn f g (Set.uIcc a b) → ∫ (x : ℝ) in a..b, f x ∂μ = ∫ (x : ℝ) in a..b, g x ∂μ\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If three points are not collinear, the sine of the angle between them is positive. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\\n  [inst_3 : NormedAddTorsor V P] {p₁ p₂ p₃ : P},\\n  ¬Collinear ℝ {p₁, p₂, p₃} → 0 < Real.sin (EuclideanGeometry.angle p₁ p₂ p₃)\"},\n {\"role\": \"user\", \"content\": \"Three points are coplanar. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (k : Type u_1) {V : Type u_2} {P : Type u_3} [inst : DivisionRing k] [inst_1 : AddCommGroup V] [inst_2 : Module k V]\\n  [inst_3 : AddTorsor V P] (p₁ p₂ p₃ : P), Coplanar k {p₁, p₂, p₃}\"},\n {\"role\": \"user\",\n  \"content\": \"A continuous, periodic function has compact range. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {f : ℝ → α} {c : ℝ},\\n  Function.Periodic f c → c ≠ 0 → Continuous f → IsCompact (Set.range f)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Any three points in a cospherical set are affinely independent. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\\n  [inst_3 : NormedAddTorsor V P] {s : Set P},\\n  EuclideanGeometry.Cospherical s →\\n    ∀ {p₁ p₂ p₃ : P}, p₁ ∈ s → p₂ ∈ s → p₃ ∈ s → p₁ ≠ p₂ → p₁ ≠ p₃ → p₂ ≠ p₃ → AffineIndependent ℝ ![p₁, p₂, p₃]\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If three points lie in the affine span of two points, the first three points are collinear. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {k : Type u_1} {V : Type u_2} {P : Type u_3} [inst : DivisionRing k] [inst_1 : AddCommGroup V] [inst_2 : Module k V]\\n  [inst_3 : AddTorsor V P] {p₁ p₂ p₃ p₄ p₅ : P},\\n  p₁ ∈ affineSpan k {p₄, p₅} → p₂ ∈ affineSpan k {p₄, p₅} → p₃ ∈ affineSpan k {p₄, p₅} → Collinear k {p₁, p₂, p₃}\"},\n {\"role\": \"user\", \"content\": \"For the identity map, all points are periodic. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {α : Type u_1} (n : ℕ) (x : α), Function.IsPeriodicPt id n x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A fixed point of `f` is a periodic point of `f` of any prescribed period. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} {f : α → α} {x : α}, Function.IsFixedPt f x → ∀ (n : ℕ), Function.IsPeriodicPt f n x\"},\n {\"role\": \"user\", \"content\": \"Any point is a periodic point of period `0`. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} (f : α → α) (x : α), Function.IsPeriodicPt f 0 x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If a function from the unit interval to itself has a point of period three, then it has points of all positive periods.\"}]"}
{"text":"A terminal object in a category is unique up to unique isomorphism.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The (unique) isomorphism between the chosen terminal object and any other terminal object. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"{C : Type u₁} →\\n  [inst : CategoryTheory.Category.{v₁, u₁} C] →\\n    [inst_1 : CategoryTheory.Limits.HasTerminal C] → {P : C} → CategoryTheory.Limits.IsTerminal P → (⊤_ C ≅ P)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Any category with pullbacks and terminal object has binary products. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (C : Type u) [inst : CategoryTheory.Category.{v, u} C] [inst_1 : CategoryTheory.Limits.HasTerminal C]\\n  [inst_2 : CategoryTheory.Limits.HasPullbacks C], CategoryTheory.Limits.HasBinaryProducts C\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A strong mono category is a category in which every monomorphism is strong. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {C : Type u} [inst : CategoryTheory.Category.{v, u} C] [self : CategoryTheory.StrongMonoCategory C] {X Y : C}\\n  (f : X ⟶ Y) [inst_1 : CategoryTheory.Mono f], CategoryTheory.StrongMono f\"},\n {\"role\": \"user\",\n  \"content\": \"A nonzero epimorphism from a simple object is an isomorphism. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {C : Type u} [inst : CategoryTheory.Category.{v, u} C] [inst_1 : CategoryTheory.Abelian C] {X Y : C}\\n  [inst_2 : CategoryTheory.Simple X] {f : X ⟶ Y} [inst_3 : CategoryTheory.Epi f], f ≠ 0 → CategoryTheory.IsIso f\"},\n {\"role\": \"user\",\n  \"content\": \"A nonzero monomorphism to a simple object is an isomorphism. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {C : Type u} [inst : CategoryTheory.Category.{v, u} C] [inst_1 : CategoryTheory.Limits.HasZeroMorphisms C] {X Y : C}\\n  [inst_2 : CategoryTheory.Simple Y] {f : X ⟶ Y} [inst_3 : CategoryTheory.Mono f], f ≠ 0 → CategoryTheory.IsIso f\"},\n {\"role\": \"user\", \"content\": \"The category `D` has isomorphic objects equal \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] {D : Type u₂} [inst_1 : CategoryTheory.Category.{v₂, u₂} D]\\n  {F : CategoryTheory.Functor D C}, CategoryTheory.IsSkeletonOf C D F → CategoryTheory.Skeletal D\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A category in which coimage-image comparisons are all isomorphisms has images. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {C : Type u} [inst : CategoryTheory.Category.{v, u} C] [inst_1 : CategoryTheory.Preadditive C]\\n  [inst_2 : CategoryTheory.Limits.HasKernels C] [inst_3 : CategoryTheory.Limits.HasCokernels C]\\n  [inst_4 : ∀ {X Y : C} (f : X ⟶ Y), CategoryTheory.IsIso (CategoryTheory.Abelian.coimageImageComparison f)],\\n  CategoryTheory.Limits.HasImages C\"},\n {\"role\": \"user\",\n  \"content\": \"Any morphism from a terminal object is split mono. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] {X Y : C},\\n  CategoryTheory.Limits.IsTerminal X → ∀ (f : X ⟶ Y), CategoryTheory.IsSplitMono f\"},\n {\"role\": \"user\", \"content\": \"An abelian category is idempotent complete. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (D : Type u_2) [inst : CategoryTheory.Category.{u_3, u_2} D] [inst_1 : CategoryTheory.Abelian D],\\n  CategoryTheory.IsIdempotentComplete D\"},\n {\"role\": \"user\",\n  \"content\": \"A category with finite biproducts has a zero object. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (C : Type u) [inst : CategoryTheory.Category.{v, u} C] [inst_1 : CategoryTheory.Limits.HasZeroMorphisms C]\\n  [inst_2 : CategoryTheory.Limits.HasFiniteBiproducts C], CategoryTheory.Limits.HasZeroObject C\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If there are zero morphisms, any terminal object is a zero object. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {C : Type u} [inst : CategoryTheory.Category.{v, u} C] [inst_1 : CategoryTheory.Limits.HasZeroMorphisms C]\\n  [inst_2 : CategoryTheory.Limits.HasTerminal C], CategoryTheory.Limits.HasZeroObject C\"},\n {\"role\": \"user\", \"content\": \"Any morphism from a terminal object is mono. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] {X Y : C},\\n  CategoryTheory.Limits.IsTerminal X → ∀ (f : X ⟶ Y), CategoryTheory.Mono f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The subcategory of subterminal objects is an exponential ideal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] [inst_1 : CategoryTheory.Limits.HasFiniteProducts C]\\n  [inst_2 : CategoryTheory.CartesianClosed C], CategoryTheory.ExponentialIdeal (CategoryTheory.subterminalInclusion C)\"},\n {\"role\": \"user\",\n  \"content\": \"Any two morphisms to a terminal object are equal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] {X Y : C},\\n  CategoryTheory.Limits.IsTerminal X → ∀ (f g : Y ⟶ X), f = g\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A terminal object in a category is unique up to unique isomorphism.\"}]"}
{"text":"The complement of the union of two sets is the intersection of their complements.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If a compact set is covered by two open sets, then we can cover it by two compact subsets. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : T2Space X] {K U V : Set X},\\n  IsCompact K → IsOpen U → IsOpen V → K ⊆ U ∪ V → ∃ K₁ K₂, IsCompact K₁ ∧ IsCompact K₂ ∧ K₁ ⊆ U ∧ K₂ ⊆ V ∧ K = K₁ ∪ K₂\"},\n {\"role\": \"user\",\n  \"content\":\n  \"In a directed order, the union of two sets is bounded above if and only if both sets are. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : Preorder α] [inst_1 : IsDirected α fun x x_1 => x ≤ x_1] {s t : Set α},\\n  BddAbove (s ∪ t) ↔ BddAbove s ∧ BddAbove t\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The supremum of two subspaces is equal to the span of their union. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u_1} {V : Type u_2} [inst : Field K] [inst_1 : AddCommGroup V] [inst_2 : Module K V]\\n  (S T : Set (Projectivization K V)),\\n  Projectivization.Subspace.span (S ∪ T) = Projectivization.Subspace.span S ⊔ Projectivization.Subspace.span T\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The union of all sets in a compact exhaustion equals the entire space. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_4} [inst : TopologicalSpace X] (self : CompactExhaustion X),\\n  ⋃ n, CompactExhaustion.toFun self n = Set.univ\"},\n {\"role\": \"user\",\n  \"content\":\n  \"In a codirected order, the union of two sets is bounded below if and only if both sets are. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : Preorder α] [inst_1 : IsDirected α fun x x_1 => x ≥ x_1] {s t : Set α},\\n  BddBelow (s ∪ t) ↔ BddBelow s ∧ BddBelow t\"},\n {\"role\": \"user\",\n  \"content\": \"The span of a union of sets is the sup of their spans. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (k : Type u_1) (V : Type u_2) {P : Type u_3} [inst : Ring k] [inst_1 : AddCommGroup V] [inst_2 : Module k V]\\n  [S : AddTorsor V P] (s t : Set P), affineSpan k (s ∪ t) = affineSpan k s ⊔ affineSpan k t\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The intersection of a disjoint covering by two open sets of a clopen set will be clopen. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u} [inst : TopologicalSpace X] {s a b : Set X},\\n  IsClopen s → s ⊆ a ∪ b → IsOpen a → IsOpen b → Disjoint a b → IsClopen (s ∩ a)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If two sets intersect, the diameter of the union is bounded by the sum of the diameters. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : PseudoMetricSpace α] {s t : Set α},\\n  Set.Nonempty (s ∩ t) → Metric.diam (s ∪ t) ≤ Metric.diam s + Metric.diam t\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The set difference of a compact set and an open set is a compact set. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u} [inst : TopologicalSpace X] {s t : Set X}, IsCompact s → IsOpen t → IsCompact (s \\\\ t)\"},\n {\"role\": \"user\",\n  \"content\": \"The disjoint union of two compact spaces is compact. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u} {Y : Type v} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] [inst_2 : CompactSpace X]\\n  [inst_3 : CompactSpace Y], CompactSpace (X ⊕ Y)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The intersection of a preperfect set and an open set is preperfect. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] {C U : Set α}, Preperfect C → IsOpen U → Preperfect (U ∩ C)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The cardinality of a union is at most the sum of the cardinalities\\nof the two sets. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} (S T : Set α), Cardinal.mk ↑(S ∪ T) ≤ Cardinal.mk ↑S + Cardinal.mk ↑T\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If two sets belong to a filter, then their intersection belongs to the filter as well. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} (self : Filter α) {x y : Set α}, x ∈ self.sets → y ∈ self.sets → x ∩ y ∈ self.sets\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The intersection of a closed set and a compact set is a compact set. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u} [inst : TopologicalSpace X] {s t : Set X}, IsCompact t → IsClosed s → IsCompact (s ∩ t)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The indicator of a disjoint union of two sets is the sum of the indicators of the sets. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} {E : Type u_2} {m0 : MeasurableSpace α} {p : ENNReal} {μ : MeasureTheory.Measure α}\\n  [inst : NormedAddCommGroup E] {s t : Set α} (hs : MeasurableSet s) (ht : MeasurableSet t) (hμs : ↑↑μ s ≠ ⊤)\\n  (hμt : ↑↑μ t ≠ ⊤),\\n  s ∩ t = ∅ →\\n    ∀ (c : E),\\n      MeasureTheory.indicatorConstLp p (_ : MeasurableSet (s ∪ t)) (_ : ↑↑μ (s ∪ t) ≠ ⊤) c =\\n        MeasureTheory.indicatorConstLp p hs hμs c + MeasureTheory.indicatorConstLp p ht hμt c\"},\n {\"role\": \"user\", \"content\": \"The union of two bounded sets is bounded. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {𝕜 : Type u_1} {E : Type u_3} [inst : SeminormedRing 𝕜] [inst_1 : SMul 𝕜 E] [inst_2 : Zero E]\\n  [inst_3 : TopologicalSpace E] {s₁ s₂ : Set E},\\n  Bornology.IsVonNBounded 𝕜 s₁ → Bornology.IsVonNBounded 𝕜 s₂ → Bornology.IsVonNBounded 𝕜 (s₁ ∪ s₂)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The intersection of a compact set and a closed set is a compact set. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u} [inst : TopologicalSpace X] {s t : Set X}, IsCompact s → IsClosed t → IsCompact (s ∩ t)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The complement of a set has the same frontier as the original set. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] (s : Set α), frontier sᶜ = frontier s\"},\n {\"role\": \"user\", \"content\": \"The complement of a closed set is an open set. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {s : Set α} [self : IsClosed s], IsOpen sᶜ\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The complement of the union of two sets is the intersection of their complements.\"}]"}
{"text":"The sum of the cubes of two positive integers is never equal to the cube of a third integer.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If the angle between three points is `-π / 2`, the first two points are not equal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\\n  [inst_3 : NormedAddTorsor V P] [hd2 : Fact (FiniteDimensional.finrank ℝ V = 2)] [inst_4 : Module.Oriented ℝ V (Fin 2)]\\n  {p₁ p₂ p₃ : P}, EuclideanGeometry.oangle p₁ p₂ p₃ = ↑(-Real.pi / 2) → p₁ ≠ p₂\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If the sign of the angle between three points is nonzero, the first two points are not\\nequal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\\n  [inst_3 : NormedAddTorsor V P] [hd2 : Fact (FiniteDimensional.finrank ℝ V = 2)] [inst_4 : Module.Oriented ℝ V (Fin 2)]\\n  {p₁ p₂ p₃ : P}, Real.Angle.sign (EuclideanGeometry.oangle p₁ p₂ p₃) ≠ 0 → p₁ ≠ p₂\"},\n {\"role\": \"user\", \"content\": \"A sort of triangle inequality. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_2} [inst : LinearOrder α] [inst_1 : LocallyFiniteOrder α] {a b c : α},\\n  Finset.uIcc a c ⊆ Finset.uIcc a b ∪ Finset.uIcc b c\"},\n {\"role\": \"user\",\n  \"content\": \"The n-th harmonic number is not an integer for n ≥ 2. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {n : ℕ}, 2 ≤ n → ¬Rat.isInt (harmonic n) = true\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If the sign of the angle between three points is positive, the last two points are not\\nequal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\\n  [inst_3 : NormedAddTorsor V P] [hd2 : Fact (FiniteDimensional.finrank ℝ V = 2)] [inst_4 : Module.Oriented ℝ V (Fin 2)]\\n  {p₁ p₂ p₃ : P}, Real.Angle.sign (EuclideanGeometry.oangle p₁ p₂ p₃) = 1 → p₃ ≠ p₂\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If the sign of the angle between three points is negative, the first two points are not\\nequal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\\n  [inst_3 : NormedAddTorsor V P] [hd2 : Fact (FiniteDimensional.finrank ℝ V = 2)] [inst_4 : Module.Oriented ℝ V (Fin 2)]\\n  {p₁ p₂ p₃ : P}, Real.Angle.sign (EuclideanGeometry.oangle p₁ p₂ p₃) = -1 → p₁ ≠ p₂\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If the angle between three points is `-π / 2`, the first and third points are not equal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\\n  [inst_3 : NormedAddTorsor V P] [hd2 : Fact (FiniteDimensional.finrank ℝ V = 2)] [inst_4 : Module.Oriented ℝ V (Fin 2)]\\n  {p₁ p₂ p₃ : P}, EuclideanGeometry.oangle p₁ p₂ p₃ = ↑(-Real.pi / 2) → p₁ ≠ p₃\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If the angle between three points is `π / 2`, the first two points are not equal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\\n  [inst_3 : NormedAddTorsor V P] [hd2 : Fact (FiniteDimensional.finrank ℝ V = 2)] [inst_4 : Module.Oriented ℝ V (Fin 2)]\\n  {p₁ p₂ p₃ : P}, EuclideanGeometry.oangle p₁ p₂ p₃ = ↑(Real.pi / 2) → p₁ ≠ p₂\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If the angle between three points is nonzero, the first two points are not equal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\\n  [inst_3 : NormedAddTorsor V P] [hd2 : Fact (FiniteDimensional.finrank ℝ V = 2)] [inst_4 : Module.Oriented ℝ V (Fin 2)]\\n  {p₁ p₂ p₃ : P}, EuclideanGeometry.oangle p₁ p₂ p₃ ≠ 0 → p₁ ≠ p₂\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If the angle between three points is `π`, the first and third points are not equal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\\n  [inst_3 : NormedAddTorsor V P] [hd2 : Fact (FiniteDimensional.finrank ℝ V = 2)] [inst_4 : Module.Oriented ℝ V (Fin 2)]\\n  {p₁ p₂ p₃ : P}, EuclideanGeometry.oangle p₁ p₂ p₃ = ↑Real.pi → p₁ ≠ p₃\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If the angle between three points is `π`, the first two points are not equal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\\n  [inst_3 : NormedAddTorsor V P] [hd2 : Fact (FiniteDimensional.finrank ℝ V = 2)] [inst_4 : Module.Oriented ℝ V (Fin 2)]\\n  {p₁ p₂ p₃ : P}, EuclideanGeometry.oangle p₁ p₂ p₃ = ↑Real.pi → p₁ ≠ p₂\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If the angle between three points is nonzero, the first and third points are not equal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\\n  [inst_3 : NormedAddTorsor V P] [hd2 : Fact (FiniteDimensional.finrank ℝ V = 2)] [inst_4 : Module.Oriented ℝ V (Fin 2)]\\n  {p₁ p₂ p₃ : P}, EuclideanGeometry.oangle p₁ p₂ p₃ ≠ 0 → p₁ ≠ p₃\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If the angle between three points is `π / 2`, the first and third points are not equal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\\n  [inst_3 : NormedAddTorsor V P] [hd2 : Fact (FiniteDimensional.finrank ℝ V = 2)] [inst_4 : Module.Oriented ℝ V (Fin 2)]\\n  {p₁ p₂ p₃ : P}, EuclideanGeometry.oangle p₁ p₂ p₃ = ↑(Real.pi / 2) → p₁ ≠ p₃\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The set of natural numbers that are sums of two squares is closed under multiplication. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {a b x y u v : ℕ}, a = x ^ 2 + y ^ 2 → b = u ^ 2 + v ^ 2 → ∃ r s, a * b = r ^ 2 + s ^ 2\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If the sign of the angle between three points is positive, the first two points are not\\nequal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\\n  [inst_3 : NormedAddTorsor V P] [hd2 : Fact (FiniteDimensional.finrank ℝ V = 2)] [inst_4 : Module.Oriented ℝ V (Fin 2)]\\n  {p₁ p₂ p₃ : P}, Real.Angle.sign (EuclideanGeometry.oangle p₁ p₂ p₃) = 1 → p₁ ≠ p₂\"},\n {\"role\": \"user\",\n  \"content\": \"There are no perfect squares strictly between m² and (m+1)² \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {n m : ℕ}, m * m < n → n < (m + 1) * (m + 1) → ¬∃ t, t * t = n\"},\n {\"role\": \"user\",\n  \"content\": \"The sum of two squares is zero iff both elements are zero. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : LinearOrderedRing α] {x y : α}, x * x + y * y = 0 ↔ x = 0 ∧ y = 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The sum of the cubes of two positive integers is never equal to the cube of a third integer.\"}]"}
{"text":"If every element of a group `G` has order `2`, then every pair of elements of `G` commutes.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If `a` commutes with both `b` and `c`, then it commutes with their sum.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {S : Type u_2} [inst : AddSemigroup S] {a b c : S}, AddCommute a b → AddCommute a c → AddCommute a (b + c)\"},\n {\"role\": \"user\",\n  \"content\": \"A normal element of a star monoid commutes with its adjoint. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : Mul R] [inst_1 : Star R] {x : R} [self : IsStarNormal x], Commute (star x) x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A theorem of Schur: A group with finitely many commutators has finite commutator subgroup. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (G : Type u_1) [inst : Group G] [inst_1 : Finite ↑(commutatorSet G)], Finite ↥(commutator G)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The composition of two group homomorphisms is a group homomorphism. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} [inst : Group α] [inst_1 : Group β] {f : α → β},\\n  IsGroupHom f → ∀ {γ : Type u_1} [inst_2 : Group γ] {g : β → γ}, IsGroupHom g → IsGroupHom (g ∘ f)\"},\n {\"role\": \"user\",\n  \"content\": \"The center of a group acts commutatively on that group. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G], SMulCommClass G (↥(Subgroup.center G)) G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Commuting elements of finite additive order are closed under addition.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddMonoid G] {x y : G},\\n  AddCommute x y → IsOfFinAddOrder x → IsOfFinAddOrder y → IsOfFinAddOrder (x + y)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If `a` commutes with both `b` and `c`, then it commutes with their product. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {S : Type u_2} [inst : Semigroup S] {a b c : S}, Commute a b → Commute a c → Commute a (b * c)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If both `a` and `b` commute with `c`, then their product commutes with `c`. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {S : Type u_2} [inst : Semigroup S] {a b c : S}, Commute a c → Commute b c → Commute (a * b) c\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Self-adjoint elements commute if and only if their product is self-adjoint. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_3} [inst : Mul R] [inst_1 : StarMul R] {x y : R},\\n  IsSelfAdjoint x → IsSelfAdjoint y → (Commute x y ↔ IsSelfAdjoint (x * y))\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If both `a` and `b` commute with `c`, then their product commutes with `c`.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {S : Type u_2} [inst : AddSemigroup S] {a b c : S}, AddCommute a c → AddCommute b c → AddCommute (a + b) c\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If an element in a group has order two, then it is its own inverse. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] {x : G}, orderOf x = 2 → x⁻¹ = x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Commuting elements of finite order are closed under multiplication. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Monoid G] {x y : G}, Commute x y → IsOfFinOrder x → IsOfFinOrder y → IsOfFinOrder (x * y)\"},\n {\"role\": \"user\",\n  \"content\": \"If `a` commutes with `b`, then `b` commutes with `a`. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {S : Type u_2} [inst : Mul S] {a b : S}, Commute a b → Commute b a\"},\n {\"role\": \"user\",\n  \"content\": \"If `a` commutes with `b`, then `b` commutes with `a`.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {S : Type u_2} [inst : Add S] {a b : S}, AddCommute a b → AddCommute b a\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If n is odd, then the Dihedral group of order $2n$ has $n(n+3)$ pairs of commuting elements. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {n : ℕ}, Odd n → Nat.card { p // Commute p.1 p.2 } = n * (n + 3)\"},\n {\"role\": \"user\",\n  \"content\": \"Elements of disjoint, normal subgroups commute. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] (H₁ H₂ : Subgroup G),\\n  Subgroup.Normal H₁ → Subgroup.Normal H₂ → Disjoint H₁ H₂ → ∀ (x y : G), x ∈ H₁ → y ∈ H₂ → Commute x y\"},\n {\"role\": \"user\", \"content\": \"Elements of disjoint, normal subgroups commute.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddGroup G] (H₁ H₂ : AddSubgroup G),\\n  AddSubgroup.Normal H₁ → AddSubgroup.Normal H₂ → Disjoint H₁ H₂ → ∀ (x y : G), x ∈ H₁ → y ∈ H₂ → AddCommute x y\"},\n {\"role\": \"user\", \"content\": \"Any element commutes with itself. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {S : Type u_2} [inst : Mul S] (a : S), Commute a a\"},\n {\"role\": \"user\", \"content\": \"Any element commutes with itself.\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {S : Type u_2} [inst : Add S] (a : S), AddCommute a a\"},\n {\"role\": \"user\",\n  \"content\": \"In a group of exponent two, all elements commute. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G], Monoid.exponent G = 2 → ∀ (x y : G), x * y = y * x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If every element of a group `G` has order `2`, then every pair of elements of `G` commutes.\"}]"}
{"text":"The product of two consecutive natural numbers is even.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\": \"The sum of two finite adèles is a finite adèle. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} {K : Type u_2} [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : IsDedekindDomain R]\\n  [inst_3 : Field K] [inst_4 : Algebra R K] [inst_5 : IsFractionRing R K]\\n  {x y : DedekindDomain.ProdAdicCompletions R K},\\n  DedekindDomain.ProdAdicCompletions.IsFiniteAdele x →\\n    DedekindDomain.ProdAdicCompletions.IsFiniteAdele y → DedekindDomain.ProdAdicCompletions.IsFiniteAdele (x + y)\"},\n {\"role\": \"user\",\n  \"content\": \"The product of non-negative elements is non-negative. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [self : OrderedRing α] (a b : α), 0 ≤ a → 0 ≤ b → 0 ≤ a * b\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If a small natural number is divisible by a larger natural number,\\nthe small number is zero. \"},\n {\"role\": \"assistant\", \"content\": \"∀ {a b : ℕ}, a ∣ b → b < a → b = 0\"},\n {\"role\": \"user\",\n  \"content\": \"The product of two finite adèles is a finite adèle. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} {K : Type u_2} [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : IsDedekindDomain R]\\n  [inst_3 : Field K] [inst_4 : Algebra R K] [inst_5 : IsFractionRing R K]\\n  {x y : DedekindDomain.ProdAdicCompletions R K},\\n  DedekindDomain.ProdAdicCompletions.IsFiniteAdele x →\\n    DedekindDomain.ProdAdicCompletions.IsFiniteAdele y → DedekindDomain.ProdAdicCompletions.IsFiniteAdele (x * y)\"},\n {\"role\": \"user\",\n  \"content\": \"Every nonzero natural number has a unique prime factorization \"},\n {\"role\": \"assistant\", \"content\": \"Set.InjOn Nat.factorization {x | x ≠ 0}\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Two positive naturals are equal if their prime padic valuations are equal \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (a b : ℕ), a ≠ 0 → b ≠ 0 → (a = b ↔ ∀ (p : ℕ), Nat.Prime p → padicValNat p a = padicValNat p b)\"},\n {\"role\": \"user\", \"content\": \"the condition on the two integers \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {n : ℤ} (self : CochainComplex.HomComplex.Triplet n), self.p + n = self.q\"},\n {\"role\": \"user\",\n  \"content\": \"A natural number is odd iff it has residue `1` or `3` mod `4`\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {n : ℕ}, n % 2 = 1 ↔ n % 4 = 1 ∨ n % 4 = 3\"},\n {\"role\": \"user\", \"content\": \"A product of finite numbers is still finite \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {ι : Type u_1} {R : Type u_8} [inst : CommMonoidWithZero R] [inst_1 : NoZeroDivisors R] [inst_2 : Nontrivial R]\\n  [inst_3 : DecidableEq R] [inst_4 : LT R] {s : Finset ι} {f : ι → WithTop R},\\n  (∀ i ∈ s, f i ≠ ⊤) → (Finset.prod s fun i => f i) < ⊤\"},\n {\"role\": \"user\", \"content\": \"`2` is not a factor of an odd natural number. \"},\n {\"role\": \"assistant\", \"content\": \"∀ {m n : ℕ}, Odd n → m ∣ n → m ≠ 2\"},\n {\"role\": \"user\",\n  \"content\": \"The product of two positive elements is positive. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [self : StrictOrderedRing α] (a b : α), 0 < a → 0 < b → 0 < a * b\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Two natural numbers are equal if and only if they have the same divisors. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {m n : ℕ}, (∀ (a : ℕ), a ∣ m ↔ a ∣ n) ↔ m = n\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The set of natural numbers that are sums of two squares is closed under multiplication. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {a b x y u v : ℕ}, a = x ^ 2 + y ^ 2 → b = u ^ 2 + v ^ 2 → ∃ r s, a * b = r ^ 2 + s ^ 2\"},\n {\"role\": \"user\",\n  \"content\": \"The convolution of two even functions is also even. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {𝕜 : Type u𝕜} {G : Type uG} {E : Type uE} {E' : Type uE'} {F : Type uF} [inst : NormedAddCommGroup E]\\n  [inst_1 : NormedAddCommGroup E'] [inst_2 : NormedAddCommGroup F] {f : G → E} {g : G → E'} {x : G}\\n  [inst_3 : NontriviallyNormedField 𝕜] [inst_4 : NormedSpace 𝕜 E] [inst_5 : NormedSpace 𝕜 E'] [inst_6 : NormedSpace 𝕜 F]\\n  (L : E →L[𝕜] E' →L[𝕜] F) [inst_7 : MeasurableSpace G] {μ : MeasureTheory.Measure G} [inst_8 : NormedSpace ℝ F]\\n  [inst_9 : AddCommGroup G] [inst_10 : MeasureTheory.Measure.IsAddLeftInvariant μ]\\n  [inst_11 : MeasureTheory.Measure.IsNegInvariant μ] [inst_12 : MeasurableNeg G] [inst_13 : MeasurableAdd G],\\n  (∀ᵐ (x : G) ∂μ, f (-x) = f x) → (∀ᵐ (x : G) ∂μ, g (-x) = g x) → convolution f g L (-x) = convolution f g L x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Two natural numbers are equal if and only if they have the same multiples. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {m n : ℕ}, (∀ (a : ℕ), m ∣ a ↔ n ∣ a) ↔ m = n\"},\n {\"role\": \"user\",\n  \"content\": \"The product of two consecutive natural numbers is even.\"}]"}
{"text":"Every index 2 subgroup of a group is normal.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\": \"Subgroups of torsion groups are torsion groups. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G], Monoid.IsTorsion G → ∀ (H : Subgroup G), Monoid.IsTorsion ↥H\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The normal closure of s is the smallest normal subgroup containing s. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] {s t : Set G}, IsNormalSubgroup t → s ⊆ t → Group.normalClosure s ⊆ t\"},\n {\"role\": \"user\", \"content\": \"The additive subgroup has finite index \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_2} [inst : AddGroup G] {H : AddSubgroup G} [self : AddSubgroup.FiniteIndex H], AddSubgroup.index H ≠ 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If an element in a group has order two, then it is its own inverse. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] {x : G}, orderOf x = 2 → x⁻¹ = x\"},\n {\"role\": \"user\",\n  \"content\": \"In a group of exponent two, every element is its own inverse. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G], Monoid.exponent G = 2 → ∀ (x : G), x⁻¹ = x\"},\n {\"role\": \"user\", \"content\": \"A subgroup is closed under multiplication. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] (H : Subgroup G) {x y : G}, x ∈ H → y ∈ H → x * y ∈ H\"},\n {\"role\": \"user\", \"content\": \"A subgroup is closed under division. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {M : Type u_5} {S : Type u_6} [inst : DivInvMonoid M] [inst_1 : SetLike S M] [hSM : SubgroupClass S M] {H : S}\\n  {x y : M}, x ∈ H → y ∈ H → x / y ∈ H\"},\n {\"role\": \"user\",\n  \"content\": \"In a group of exponent two, all elements commute. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G], Monoid.exponent G = 2 → ∀ (x y : G), x * y = y * x\"},\n {\"role\": \"user\",\n  \"content\": \"Two subgroups are equal if they have the same elements. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] {H K : Subgroup G}, (∀ (x : G), x ∈ H ↔ x ∈ K) → H = K\"},\n {\"role\": \"user\", \"content\": \"A subgroup contains the group's 1. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {G : Type u_1} [inst : Group G] (H : Subgroup G), 1 ∈ H\"},\n {\"role\": \"user\", \"content\": \"Any normal subgroup is either `⊥` or `⊤` \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] [self : IsSimpleGroup G] (H : Subgroup G), Subgroup.Normal H → H = ⊥ ∨ H = ⊤\"},\n {\"role\": \"user\", \"content\": \"The normal closure of a set is a subgroup. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] (s : Set G), IsSubgroup (Group.normalClosure s)\"},\n {\"role\": \"user\", \"content\": \"The normal closure of s is a normal subgroup. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} {s : Set G} [inst : Group G], IsNormalSubgroup (Group.normalClosure s)\"},\n {\"role\": \"user\", \"content\": \"Elements of disjoint, normal subgroups commute.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddGroup G] (H₁ H₂ : AddSubgroup G),\\n  AddSubgroup.Normal H₁ → AddSubgroup.Normal H₂ → Disjoint H₁ H₂ → ∀ (x y : G), x ∈ H₁ → y ∈ H₂ → AddCommute x y\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The topological closure of a normal additive subgroup is normal.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : TopologicalSpace G] [inst_1 : AddGroup G] [inst_2 : TopologicalAddGroup G] (N : AddSubgroup G)\\n  [inst_3 : AddSubgroup.Normal N], AddSubgroup.Normal (AddSubgroup.topologicalClosure N)\"},\n {\"role\": \"user\",\n  \"content\": \"Elements of disjoint, normal subgroups commute. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] (H₁ H₂ : Subgroup G),\\n  Subgroup.Normal H₁ → Subgroup.Normal H₂ → Disjoint H₁ H₂ → ∀ (x y : G), x ∈ H₁ → y ∈ H₂ → Commute x y\"},\n {\"role\": \"user\",\n  \"content\":\n  \"In a group that satisfies the normalizer condition, every maximal subgroup is normal \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] (H : Subgroup G), NormalizerCondition G → IsCoatom H → Subgroup.Normal H\"},\n {\"role\": \"user\",\n  \"content\": \"The topological closure of a normal subgroup is normal.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : TopologicalSpace G] [inst_1 : Group G] [inst_2 : TopologicalGroup G] (N : Subgroup G)\\n  [inst_3 : Subgroup.Normal N], Subgroup.Normal (Subgroup.topologicalClosure N)\"},\n {\"role\": \"user\", \"content\": \"The subgroup has finite index \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] {H : Subgroup G} [self : Subgroup.FiniteIndex H], Subgroup.index H ≠ 0\"},\n {\"role\": \"user\", \"content\": \"Every index 2 subgroup of a group is normal.\"}]"}
{"text":"Every free group is torsion free.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\", \"content\": \"Torsion submonoids are torsion. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : CommMonoid G], Monoid.IsTorsion ↥(CommMonoid.torsion G)\"},\n {\"role\": \"user\",\n  \"content\": \"The group exponent exists for any bounded torsion group. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G],\\n  Monoid.IsTorsion G → Set.Finite (Set.range fun g => orderOf g) → Monoid.ExponentExists G\"},\n {\"role\": \"user\",\n  \"content\": \"Finite additive groups are additive torsion groups.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddGroup G] [inst_1 : Finite G], AddMonoid.IsTorsion G\"},\n {\"role\": \"user\",\n  \"content\": \"A nontrivial additive torsion group is not torsion-free.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddGroup G] [hN : Nontrivial G], AddMonoid.IsTorsion G → ¬AddMonoid.IsTorsionFree G\"},\n {\"role\": \"user\",\n  \"content\": \"Additive torsion groups are closed under extensions.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} {H : Type u_2} [inst : AddGroup G] {N : AddSubgroup G} [inst_1 : AddGroup H] {f : G →+ H},\\n  N = AddMonoidHom.ker f → AddMonoid.IsTorsion H → AddMonoid.IsTorsion ↥N → AddMonoid.IsTorsion G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Subgroups of additive torsion groups are additive torsion groups.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddGroup G], AddMonoid.IsTorsion G → ∀ (H : AddSubgroup G), AddMonoid.IsTorsion ↥H\"},\n {\"role\": \"user\",\n  \"content\": \"If a group exponent exists, the group is torsion. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G], Monoid.ExponentExists G → Monoid.IsTorsion G\"},\n {\"role\": \"user\", \"content\": \"The torsion subgroup is cylic. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (K : Type u_1) [inst : Field K] [inst_1 : NumberField K], IsCyclic ↥(NumberField.Units.torsion K)\"},\n {\"role\": \"user\",\n  \"content\": \"A nontrivial torsion-free additive group is not torsion.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddGroup G] [hN : Nontrivial G], AddMonoid.IsTorsionFree G → ¬AddMonoid.IsTorsion G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Quotienting a group by its additive torsion subgroup yields an additive torsion free group.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (G : Type u_1) [inst : AddCommGroup G], AddMonoid.IsTorsionFree (G ⧸ AddCommGroup.torsion G)\"},\n {\"role\": \"user\",\n  \"content\": \"A nontrivial torsion group is not torsion-free. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] [hN : Nontrivial G], Monoid.IsTorsion G → ¬Monoid.IsTorsionFree G\"},\n {\"role\": \"user\",\n  \"content\": \"Subgroups of torsion groups are torsion groups. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G], Monoid.IsTorsion G → ∀ (H : Subgroup G), Monoid.IsTorsion ↥H\"},\n {\"role\": \"user\", \"content\": \"Torsion groups are closed under extensions. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} {H : Type u_2} [inst : Group G] {N : Subgroup G} [inst_1 : Group H] {f : G →* H},\\n  N = MonoidHom.ker f → Monoid.IsTorsion H → Monoid.IsTorsion ↥N → Monoid.IsTorsion G\"},\n {\"role\": \"user\", \"content\": \"Finite groups are torsion groups. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] [inst_1 : Finite G], Monoid.IsTorsion G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Quotienting a group by its torsion subgroup yields a torsion free group. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (G : Type u_1) [inst : CommGroup G], Monoid.IsTorsionFree (G ⧸ CommGroup.torsion G)\"},\n {\"role\": \"user\",\n  \"content\": \"A nontrivial torsion-free group is not torsion. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] [hN : Nontrivial G], Monoid.IsTorsionFree G → ¬Monoid.IsTorsion G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Subgroups of additive torsion-free groups are additively torsion-free.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddGroup G], AddMonoid.IsTorsionFree G → ∀ (H : AddSubgroup G), AddMonoid.IsTorsionFree ↥H\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Direct products of additive torsion free groups are torsion free.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {η : Type u_3} {Gs : η → Type u_4} [inst : (i : η) → AddGroup (Gs i)],\\n  (∀ (i : η), AddMonoid.IsTorsionFree (Gs i)) → AddMonoid.IsTorsionFree ((i : η) → Gs i)\"},\n {\"role\": \"user\",\n  \"content\": \"Direct products of torsion free groups are torsion free. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {η : Type u_3} {Gs : η → Type u_4} [inst : (i : η) → Group (Gs i)],\\n  (∀ (i : η), Monoid.IsTorsionFree (Gs i)) → Monoid.IsTorsionFree ((i : η) → Gs i)\"},\n {\"role\": \"user\",\n  \"content\": \"Subgroups of torsion-free groups are torsion-free. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G], Monoid.IsTorsionFree G → ∀ (H : Subgroup G), Monoid.IsTorsionFree ↥H\"},\n {\"role\": \"user\", \"content\": \"Every free group is torsion free.\"}]"}
{"text":"Every natural number greater than `1` is divisible by a prime number.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\", \"content\": \"No zero divisors. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_2} [self : CanonicallyOrderedCommSemiring α] {a b : α}, a * b = 0 → a = 0 ∨ b = 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The only prime divisor of positive prime power `p^k` is `p` itself \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {k p : ℕ}, k ≠ 0 → Nat.Prime p → (p ^ k).primeFactors = {p}\"},\n {\"role\": \"user\",\n  \"content\": \"Exactly `n / p` naturals in `(0, n]` are multiples of `p`. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (n p : ℕ), Finset.card (Finset.filter (fun x => p ∣ x) (Finset.Ioc 0 n)) = n / p\"},\n {\"role\": \"user\", \"content\": \"The multiplicity of prime `p` in `p` is `1` \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {p : ℕ}, Nat.Prime p → (Nat.factorization p) p = 1\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The product of the prime factors of `n` that are less than `N` is an `N`-smooth number. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (n N : ℕ), List.prod (List.filter (fun x => decide (x < N)) (Nat.factors n)) ∈ Nat.smoothNumbers N\"},\n {\"role\": \"user\",\n  \"content\":\n  \"For any positive `k : ℕ` there are infinitely many primes `p` such that `p ≡ 1 [MOD k]`. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {k : ℕ}, k ≠ 0 → Set.Infinite {p | Nat.Prime p ∧ p ≡ 1 [MOD k]}\"},\n {\"role\": \"user\",\n  \"content\": \"All composite numbers are Fermat pseudoprimes to base 1.\\n\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {n : ℕ}, 1 < n → ¬Nat.Prime n → Nat.FermatPsp n 1\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A natural number `m` divides the sum `n + m` if and only if `m` divides `n`.\"},\n {\"role\": \"assistant\", \"content\": \"∀ {m n : ℕ}, m ∣ n + m ↔ m ∣ n\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The only numbers with empty prime factorization are `0` and `1` \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ (n : ℕ), Nat.factorization n = 0 ↔ n = 0 ∨ n = 1\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A natural number `m` divides the sum `m + n` if and only if `m` divides `n`.\"},\n {\"role\": \"assistant\", \"content\": \"∀ {m n : ℕ}, m ∣ m + n ↔ m ∣ n\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Two natural numbers are equal if and only if they have the same multiples. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {m n : ℕ}, (∀ (a : ℕ), m ∣ a ↔ n ∣ a) ↔ m = n\"},\n {\"role\": \"user\",\n  \"content\": \"Exactly `n / p` naturals in `[1, n]` are multiples of `p`. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (n p : ℕ), Finset.card (Finset.filter (fun e => p ∣ e + 1) (Finset.range n)) = n / p\"},\n {\"role\": \"user\",\n  \"content\": \"Infinitely many natural numbers are equal to `d` mod `n`. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {n : ℕ}, n ≠ 0 → ∀ (d : ℕ), ∃ᶠ (m : ℕ) in Filter.atTop, m ≡ d [MOD n]\"},\n {\"role\": \"user\",\n  \"content\": \"The only divisors of prime powers are prime powers. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : CancelCommMonoidWithZero α] [dec_irr : (p : Associates α) → Decidable (Irreducible p)]\\n  [inst_1 : UniqueFactorizationMonoid α] [dec : DecidableEq α] [dec' : DecidableEq (Associates α)] {a p : Associates α},\\n  Irreducible p →\\n    ∀ [inst_2 : (n : ℕ) → Decidable (a ∣ p ^ n)] {n : ℕ} (h : a ∣ p ^ n),\\n      a = p ^ Nat.find (_ : ∃ n, (fun n => a ∣ p ^ n) n)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A prime natural number is prime in `ℤ[i]` if and only if it is `3` mod `4` \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ (p : ℕ) [inst : Fact (Nat.Prime p)], Prime ↑p ↔ p % 4 = 3\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Two natural numbers are equal if and only if they have the same divisors. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {m n : ℕ}, (∀ (a : ℕ), a ∣ m ↔ a ∣ n) ↔ m = n\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If a small natural number is divisible by a larger natural number,\\nthe small number is zero. \"},\n {\"role\": \"assistant\", \"content\": \"∀ {a b : ℕ}, a ∣ b → b < a → b = 0\"},\n {\"role\": \"user\",\n  \"content\": \"Every nonzero natural number has a unique prime factorization \"},\n {\"role\": \"assistant\", \"content\": \"Set.InjOn Nat.factorization {x | x ≠ 0}\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Every natural number greater than `1` is divisible by a prime number.\"}]"}
{"text":"A finite torsion-free group is trivial","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Quotienting by the torsion submodule gives a torsion-free module. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} {M : Type u_2} [inst : CommRing R] [inst_1 : AddCommGroup M] [inst_2 : Module R M],\\n  Submodule.torsion R (M ⧸ Submodule.torsion R M) = ⊥\"},\n {\"role\": \"user\",\n  \"content\": \"The group exponent exists for any bounded torsion group. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G],\\n  Monoid.IsTorsion G → Set.Finite (Set.range fun g => orderOf g) → Monoid.ExponentExists G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If a finite group is the direct product of its Sylow groups, it is nilpotent \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [hG : Group G] [inst : Fintype G],\\n  ((p : { x // x ∈ (Fintype.card G).primeFactors }) → (P : Sylow (↑p) G) → ↥↑P) ≃* G → Group.IsNilpotent G\"},\n {\"role\": \"user\",\n  \"content\": \"Additive torsion groups are closed under extensions.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} {H : Type u_2} [inst : AddGroup G] {N : AddSubgroup G} [inst_1 : AddGroup H] {f : G →+ H},\\n  N = AddMonoidHom.ker f → AddMonoid.IsTorsion H → AddMonoid.IsTorsion ↥N → AddMonoid.IsTorsion G\"},\n {\"role\": \"user\", \"content\": \"A finite group of prime order is simple.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : AddGroup α] [inst_1 : Fintype α] {p : ℕ} [hp : Fact (Nat.Prime p)],\\n  Fintype.card α = p → IsSimpleAddGroup α\"},\n {\"role\": \"user\",\n  \"content\": \"Finite additive groups are additive torsion groups.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddGroup G] [inst_1 : Finite G], AddMonoid.IsTorsion G\"},\n {\"role\": \"user\", \"content\": \"A finite group of prime order is simple. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : Group α] [inst_1 : Fintype α] {p : ℕ} [hp : Fact (Nat.Prime p)],\\n  Fintype.card α = p → IsSimpleGroup α\"},\n {\"role\": \"user\", \"content\": \"A semisimple Abelian Lie algebra is trivial. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (R : Type u) (L : Type v) [inst : CommRing R] [inst_1 : LieRing L] [inst_2 : LieAlgebra R L]\\n  [inst : LieAlgebra.IsSemisimple R L] [h : IsLieAbelian L], Subsingleton L\"},\n {\"role\": \"user\",\n  \"content\": \"A nontrivial torsion group is not torsion-free. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] [hN : Nontrivial G], Monoid.IsTorsion G → ¬Monoid.IsTorsionFree G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Direct products of additive torsion free groups are torsion free.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {η : Type u_3} {Gs : η → Type u_4} [inst : (i : η) → AddGroup (Gs i)],\\n  (∀ (i : η), AddMonoid.IsTorsionFree (Gs i)) → AddMonoid.IsTorsionFree ((i : η) → Gs i)\"},\n {\"role\": \"user\",\n  \"content\": \"Subgroups of torsion groups are torsion groups. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G], Monoid.IsTorsion G → ∀ (H : Subgroup G), Monoid.IsTorsion ↥H\"},\n {\"role\": \"user\",\n  \"content\": \"A nontrivial torsion-free additive group is not torsion.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddGroup G] [hN : Nontrivial G], AddMonoid.IsTorsionFree G → ¬AddMonoid.IsTorsion G\"},\n {\"role\": \"user\", \"content\": \"Torsion groups are closed under extensions. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} {H : Type u_2} [inst : Group G] {N : Subgroup G} [inst_1 : Group H] {f : G →* H},\\n  N = MonoidHom.ker f → Monoid.IsTorsion H → Monoid.IsTorsion ↥N → Monoid.IsTorsion G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Subgroups of additive torsion-free groups are additively torsion-free.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddGroup G], AddMonoid.IsTorsionFree G → ∀ (H : AddSubgroup G), AddMonoid.IsTorsionFree ↥H\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Quotienting a group by its additive torsion subgroup yields an additive torsion free group.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (G : Type u_1) [inst : AddCommGroup G], AddMonoid.IsTorsionFree (G ⧸ AddCommGroup.torsion G)\"},\n {\"role\": \"user\",\n  \"content\": \"Direct products of torsion free groups are torsion free. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {η : Type u_3} {Gs : η → Type u_4} [inst : (i : η) → Group (Gs i)],\\n  (∀ (i : η), Monoid.IsTorsionFree (Gs i)) → Monoid.IsTorsionFree ((i : η) → Gs i)\"},\n {\"role\": \"user\",\n  \"content\": \"A nontrivial torsion-free group is not torsion. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] [hN : Nontrivial G], Monoid.IsTorsionFree G → ¬Monoid.IsTorsion G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Quotienting a group by its torsion subgroup yields a torsion free group. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (G : Type u_1) [inst : CommGroup G], Monoid.IsTorsionFree (G ⧸ CommGroup.torsion G)\"},\n {\"role\": \"user\",\n  \"content\": \"Subgroups of torsion-free groups are torsion-free. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G], Monoid.IsTorsionFree G → ∀ (H : Subgroup G), Monoid.IsTorsionFree ↥H\"},\n {\"role\": \"user\", \"content\": \"Finite groups are torsion groups. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] [inst_1 : Finite G], Monoid.IsTorsion G\"},\n {\"role\": \"user\", \"content\": \"A finite torsion-free group is trivial\"}]"}
{"text":"Every finite division ring is a field.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Quotienting by the torsion submodule gives a torsion-free module. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} {M : Type u_2} [inst : CommRing R] [inst_1 : AddCommGroup M] [inst_2 : Module R M],\\n  Submodule.torsion R (M ⧸ Submodule.torsion R M) = ⊥\"},\n {\"role\": \"user\",\n  \"content\": \"The group exponent exists for any bounded torsion group. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G],\\n  Monoid.IsTorsion G → Set.Finite (Set.range fun g => orderOf g) → Monoid.ExponentExists G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If a finite group is the direct product of its Sylow groups, it is nilpotent \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [hG : Group G] [inst : Fintype G],\\n  ((p : { x // x ∈ (Fintype.card G).primeFactors }) → (P : Sylow (↑p) G) → ↥↑P) ≃* G → Group.IsNilpotent G\"},\n {\"role\": \"user\",\n  \"content\": \"Additive torsion groups are closed under extensions.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} {H : Type u_2} [inst : AddGroup G] {N : AddSubgroup G} [inst_1 : AddGroup H] {f : G →+ H},\\n  N = AddMonoidHom.ker f → AddMonoid.IsTorsion H → AddMonoid.IsTorsion ↥N → AddMonoid.IsTorsion G\"},\n {\"role\": \"user\", \"content\": \"A finite group of prime order is simple.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : AddGroup α] [inst_1 : Fintype α] {p : ℕ} [hp : Fact (Nat.Prime p)],\\n  Fintype.card α = p → IsSimpleAddGroup α\"},\n {\"role\": \"user\",\n  \"content\": \"Finite additive groups are additive torsion groups.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddGroup G] [inst_1 : Finite G], AddMonoid.IsTorsion G\"},\n {\"role\": \"user\", \"content\": \"A finite group of prime order is simple. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : Group α] [inst_1 : Fintype α] {p : ℕ} [hp : Fact (Nat.Prime p)],\\n  Fintype.card α = p → IsSimpleGroup α\"},\n {\"role\": \"user\", \"content\": \"A semisimple Abelian Lie algebra is trivial. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (R : Type u) (L : Type v) [inst : CommRing R] [inst_1 : LieRing L] [inst_2 : LieAlgebra R L]\\n  [inst : LieAlgebra.IsSemisimple R L] [h : IsLieAbelian L], Subsingleton L\"},\n {\"role\": \"user\",\n  \"content\": \"A nontrivial torsion group is not torsion-free. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] [hN : Nontrivial G], Monoid.IsTorsion G → ¬Monoid.IsTorsionFree G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Direct products of additive torsion free groups are torsion free.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {η : Type u_3} {Gs : η → Type u_4} [inst : (i : η) → AddGroup (Gs i)],\\n  (∀ (i : η), AddMonoid.IsTorsionFree (Gs i)) → AddMonoid.IsTorsionFree ((i : η) → Gs i)\"},\n {\"role\": \"user\",\n  \"content\": \"Subgroups of torsion groups are torsion groups. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G], Monoid.IsTorsion G → ∀ (H : Subgroup G), Monoid.IsTorsion ↥H\"},\n {\"role\": \"user\",\n  \"content\": \"A nontrivial torsion-free additive group is not torsion.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddGroup G] [hN : Nontrivial G], AddMonoid.IsTorsionFree G → ¬AddMonoid.IsTorsion G\"},\n {\"role\": \"user\", \"content\": \"Torsion groups are closed under extensions. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} {H : Type u_2} [inst : Group G] {N : Subgroup G} [inst_1 : Group H] {f : G →* H},\\n  N = MonoidHom.ker f → Monoid.IsTorsion H → Monoid.IsTorsion ↥N → Monoid.IsTorsion G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Subgroups of additive torsion-free groups are additively torsion-free.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddGroup G], AddMonoid.IsTorsionFree G → ∀ (H : AddSubgroup G), AddMonoid.IsTorsionFree ↥H\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Quotienting a group by its additive torsion subgroup yields an additive torsion free group.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (G : Type u_1) [inst : AddCommGroup G], AddMonoid.IsTorsionFree (G ⧸ AddCommGroup.torsion G)\"},\n {\"role\": \"user\",\n  \"content\": \"Direct products of torsion free groups are torsion free. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {η : Type u_3} {Gs : η → Type u_4} [inst : (i : η) → Group (Gs i)],\\n  (∀ (i : η), Monoid.IsTorsionFree (Gs i)) → Monoid.IsTorsionFree ((i : η) → Gs i)\"},\n {\"role\": \"user\",\n  \"content\": \"A nontrivial torsion-free group is not torsion. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] [hN : Nontrivial G], Monoid.IsTorsionFree G → ¬Monoid.IsTorsion G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Quotienting a group by its torsion subgroup yields a torsion free group. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (G : Type u_1) [inst : CommGroup G], Monoid.IsTorsionFree (G ⧸ CommGroup.torsion G)\"},\n {\"role\": \"user\",\n  \"content\": \"Subgroups of torsion-free groups are torsion-free. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G], Monoid.IsTorsionFree G → ∀ (H : Subgroup G), Monoid.IsTorsionFree ↥H\"},\n {\"role\": \"user\", \"content\": \"Finite groups are torsion groups. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] [inst_1 : Finite G], Monoid.IsTorsion G\"},\n {\"role\": \"user\", \"content\": \"A finite torsion-free group is trivial\"}]"}
{"text":"Every finite topological space is compact.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\", \"content\": \"All hom spaces are finite dimensional. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {k G : Type u} [inst : Field k] [inst_1 : Monoid G] (V W : FdRep k G), FiniteDimensional k (V ⟶ W)\"},\n {\"role\": \"user\", \"content\": \"A finite space is bounded. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_4} [inst : Bornology α] [inst_1 : Finite α], BoundedSpace α\"},\n {\"role\": \"user\",\n  \"content\":\n  \"In a nonempty locally compact space, there exists a compact set with nonempty interior. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : WeaklyLocallyCompactSpace α] [inst_2 : Nonempty α],\\n  Nonempty (TopologicalSpace.PositiveCompacts α)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A sequentially compact set in a uniform space is totally bounded. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} [inst : UniformSpace X] {s : Set X}, IsSeqCompact s → TotallyBounded s\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Any continuous bijection of compact Hausdorff spaces is an isomorphism. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X Y : CompHaus} (f : X ⟶ Y), Function.Bijective ⇑f → CategoryTheory.IsIso f\"},\n {\"role\": \"user\",\n  \"content\": \"In a compact space, the type of closed subsets is compact. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : EMetricSpace α] [inst_1 : CompactSpace α], CompactSpace (TopologicalSpace.Closeds α)\"},\n {\"role\": \"user\",\n  \"content\": \"The disjoint union of two compact spaces is compact. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u} {Y : Type v} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] [inst_2 : CompactSpace X]\\n  [inst_3 : CompactSpace Y], CompactSpace (X ⊕ Y)\"},\n {\"role\": \"user\", \"content\": \"Convex hull of a finite set is compact. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {E : Type u_3} [inst : AddCommGroup E] [inst_1 : Module ℝ E] [inst_2 : TopologicalSpace E]\\n  [inst_3 : TopologicalAddGroup E] [inst_4 : ContinuousSMul ℝ E] {s : Set E},\\n  Set.Finite s → IsCompact ((convexHull ℝ) s)\"},\n {\"role\": \"user\", \"content\": \"In a `T2Space`, every compact set is closed. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : T2Space X] {s : Set X}, IsCompact s → IsClosed s\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Every open cover of a paracompact space assumes a locally finite refinement. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type v} [inst : TopologicalSpace X] [self : ParacompactSpace X] (α : Type v) (s : α → Set X),\\n  (∀ (a : α), IsOpen (s a)) →\\n    ⋃ a, s a = Set.univ →\\n      ∃ β t, ∃ (_ : ∀ (b : β), IsOpen (t b)) (_ : ⋃ b, t b = Set.univ), LocallyFinite t ∧ ∀ (b : β), ∃ a, t b ⊆ s a\"},\n {\"role\": \"user\", \"content\": \"The product of two compact spaces is compact. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u} {Y : Type v} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] [inst_2 : CompactSpace X]\\n  [inst_3 : CompactSpace Y], CompactSpace (X × Y)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If `X` is a compact space, then any discrete quotient of `X` is finite. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_2} [inst : TopologicalSpace X] (S : DiscreteQuotient X) [inst_1 : CompactSpace X],\\n  Finite (Quotient S.toSetoid)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A measure which is finite on compact sets in a locally compact space is locally finite. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} {m0 : MeasurableSpace α} {μ : MeasureTheory.Measure α} [inst : TopologicalSpace α]\\n  [inst_1 : WeaklyLocallyCompactSpace α] [inst_2 : MeasureTheory.IsFiniteMeasureOnCompacts μ],\\n  MeasureTheory.IsLocallyFiniteMeasure μ\"},\n {\"role\": \"user\", \"content\": \"In a Noetherian space, all sets are compact. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace.NoetherianSpace α] (s : Set α), IsCompact s\"},\n {\"role\": \"user\",\n  \"content\":\n  \"For any topological space `X`, its one point compactification is a compact space. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X], CompactSpace (OnePoint X)\"},\n {\"role\": \"user\", \"content\": \"A compact discrete space is finite. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u} [inst : TopologicalSpace X] [inst_1 : CompactSpace X] [inst : DiscreteTopology X], Finite X\"},\n {\"role\": \"user\", \"content\": \"The underlying topological space is compact.\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ (self : CompHaus), CompactSpace ↑self.toTop\"},\n {\"role\": \"user\", \"content\": \"Finite topological spaces are compact. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u} [inst : TopologicalSpace X] [inst_1 : Finite X], CompactSpace X\"},\n {\"role\": \"user\", \"content\": \"Every finite topological space is compact.\"}]"}
{"text":"Every surjective homomorphism from a finitely generated free group to itself is injective.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The natural homomorphism from a monoid to its quotient by a congruence relation is\\nsurjective. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {M : Type u_1} [inst : MulOneClass M] {c : Con M}, Function.Surjective ⇑(Con.mk' c)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Any continuous bijection of compact Hausdorff spaces is an isomorphism. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X Y : CompHaus} (f : X ⟶ Y), Function.Bijective ⇑f → CategoryTheory.IsIso f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"On a finite-dimensional space, a linear map is injective if and only if it is surjective. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V]\\n  [inst_3 : FiniteDimensional K V] {f : V →ₗ[K] V}, Function.Injective ⇑f ↔ Function.Surjective ⇑f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Composing with a family of surjective linear maps is injective. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type uR} {ι : Type uι} {M₁ : ι → Type v₁} {M₂ : Type v₂} [inst : Semiring R]\\n  [inst_1 : (i : ι) → AddCommMonoid (M₁ i)] [inst_2 : AddCommMonoid M₂] [inst_3 : (i : ι) → Module R (M₁ i)]\\n  [inst_4 : Module R M₂] {M₁' : ι → Type u_1} [inst_5 : (i : ι) → AddCommMonoid (M₁' i)]\\n  [inst_6 : (i : ι) → Module R (M₁' i)] (f : (i : ι) → M₁ i →ₗ[R] M₁' i),\\n  (∀ (i : ι), Function.Surjective ⇑(f i)) → Function.Injective fun g => MultilinearMap.compLinearMap g f\"},\n {\"role\": \"user\", \"content\": \"A monomorphism is injective. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} {R₂ : Type u_3} {M : Type u_9} {M₂ : Type u_12} [inst : Semiring R] [inst_1 : Semiring R₂]\\n  [inst_2 : AddCommMonoid M] [inst_3 : AddCommMonoid M₂] [inst_4 : Module R M] [inst_5 : Module R₂ M₂] {τ₁₂ : R →+* R₂}\\n  {f : M →ₛₗ[τ₁₂] M₂},\\n  (∀ (u v : ↥(LinearMap.ker f) →ₗ[R] M), LinearMap.comp f u = LinearMap.comp f v → u = v) → LinearMap.ker f = ⊥\"},\n {\"role\": \"user\",\n  \"content\": \"A group homomorphism sends inverses to inverses. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} [inst : Group α] [inst_1 : Group β] {f : α → β}, IsGroupHom f → ∀ (a : α), f a⁻¹ = (f a)⁻¹\"},\n {\"role\": \"user\",\n  \"content\": \"Composing with a surjective linear map is injective. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : Semiring R] {M : Type u_2} [inst_1 : AddCommMonoid M] [inst_2 : Module R M] {N : Type u_3}\\n  [inst_3 : AddCommMonoid N] [inst_4 : Module R N] {ι : Type u_7} {M₂ : Type u_10} [inst_5 : AddCommMonoid M₂]\\n  [inst_6 : Module R M₂] (f : M₂ →ₗ[R] M),\\n  Function.Surjective ⇑f → Function.Injective fun g => AlternatingMap.compLinearMap g f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A monoid homomorphism `f` induces an injective homomorphism on the quotient by `f`'s kernel. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {M : Type u_1} {P : Type u_3} [inst : MulOneClass M] [inst_1 : MulOneClass P] (f : M →* P),\\n  Function.Injective ⇑(Con.kerLift f)\"},\n {\"role\": \"user\", \"content\": \"The ring homomorphism is surjective \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R₁ : Type u_1} {R₂ : Type u_2} [inst : Semiring R₁] [inst_1 : Semiring R₂] {σ : R₁ →+* R₂}\\n  [self : RingHomSurjective σ], Function.Surjective ⇑σ\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The induced algebra morphism from the quotient by the kernel is injective. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R₁ : Type u_1} {A : Type u_3} {B : Type u_4} [inst : CommSemiring R₁] [inst_1 : CommRing A] [inst_2 : CommRing B]\\n  [inst_3 : Algebra R₁ A] [inst_4 : Algebra R₁ B] (f : A →ₐ[R₁] B), Function.Injective ⇑(Ideal.kerLiftAlg f)\"},\n {\"role\": \"user\", \"content\": \"Group homomorphisms preserve inverse. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_6} {H : Type u_7} {F : Type u_8} [inst : Group G] [inst_1 : DivisionMonoid H]\\n  [inst_2 : MonoidHomClass F G H] (f : F) (a : G), f a⁻¹ = (f a)⁻¹\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Any surjective endomorphism of a Noetherian module is bijective. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} {M : Type u_2} [inst : Ring R] [inst_1 : AddCommGroup M] [inst_2 : Module R M]\\n  [inst_3 : IsNoetherian R M] (f : M →ₗ[R] M), Function.Surjective ⇑f → Function.Bijective ⇑f\"},\n {\"role\": \"user\",\n  \"content\": \"Any injective endomorphism of an Artinian module is bijective. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} {M : Type u_2} [inst : Ring R] [inst_1 : AddCommGroup M] [inst_2 : Module R M]\\n  [inst_3 : IsArtinian R M] (f : M →ₗ[R] M), Function.Injective ⇑f → Function.Bijective ⇑f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Any injective polynomial map over an algebraic extension of a finite field is surjective. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {ι : Type u_1} {K : Type u_2} {R : Type u_3} [inst : Field K] [inst_1 : Finite K] [inst_2 : CommRing R]\\n  [inst_3 : Finite ι] [inst_4 : Algebra K R],\\n  Algebra.IsAlgebraic K R →\\n    ∀ (ps : ι → MvPolynomial ι R),\\n      (Function.Injective fun v i => (MvPolynomial.eval v) (ps i)) →\\n        Function.Surjective fun v i => (MvPolynomial.eval v) (ps i)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"On a finite-dimensional space, an injective linear map is surjective. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V]\\n  [inst_3 : FiniteDimensional K V] {f : V →ₗ[K] V}, Function.Injective ⇑f → Function.Surjective ⇑f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"An additive group homomorphism is injective if its kernel is trivial.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} [inst : AddGroup α] [inst_1 : AddGroup β] {f : α → β},\\n  IsAddGroupHom f → (Function.Injective f ↔ ∀ (a : α), f a = 0 → a = 0)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Any injective endomorphism of an Artinian module is surjective. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} {M : Type u_2} [inst : Ring R] [inst_1 : AddCommGroup M] [inst_2 : Module R M]\\n  [inst_3 : IsArtinian R M] (f : M →ₗ[R] M), Function.Injective ⇑f → Function.Surjective ⇑f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Any surjective endomorphism of a Noetherian module is injective. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} {M : Type u_2} [inst : Ring R] [inst_1 : AddCommGroup M] [inst_2 : Module R M]\\n  [inst_3 : IsNoetherian R M] (f : M →ₗ[R] M), Function.Surjective ⇑f → Function.Injective ⇑f\"},\n {\"role\": \"user\",\n  \"content\": \"A group homomorphism is injective iff its kernel is trivial. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} [inst : Group α] [inst_1 : Group β] {f : α → β},\\n  IsGroupHom f → (Function.Injective f ↔ ∀ (a : α), f a = 1 → a = 1)\"},\n {\"role\": \"user\",\n  \"content\": \"Every graph homomorphism from a complete graph is injective. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u} {W : Type v} {G' : SimpleGraph W} (f : ⊤ →g G'), Function.Injective ⇑f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Every surjective homomorphism from a finitely generated free group to itself is injective.\"}]"}
{"text":"Every positive even integer can be written as the sum of two primes.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\", \"content\": \"A minimal polynomial is prime. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {A : Type u_1} {B : Type u_2} [inst : Field A] [inst_1 : Ring B] [inst_2 : IsDomain B] [inst_3 : Algebra A B] {x : B},\\n  IsIntegral A x → Prime (minpoly A x)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The only numbers with empty prime factorization are `0` and `1` \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ (n : ℕ), Nat.factorization n = 0 ↔ n = 0 ∨ n = 1\"},\n {\"role\": \"user\", \"content\": \"A finite group of prime order is simple. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : Group α] [inst_1 : Fintype α] {p : ℕ} [hp : Fact (Nat.Prime p)],\\n  Fintype.card α = p → IsSimpleGroup α\"},\n {\"role\": \"user\",\n  \"content\":\n  \"For any positive `k : ℕ` there are infinitely many primes `p` such that `p ≡ 1 [MOD k]`. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {k : ℕ}, k ≠ 0 → Set.Infinite {p | Nat.Prime p ∧ p ≡ 1 [MOD k]}\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If two integers are congruent to a sufficiently large modulus,\\nthey are equal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {a b c : ℤ}, a % b = c → Int.natAbs (a - c) < Int.natAbs b → a = c\"},\n {\"role\": \"user\",\n  \"content\": \"Any common divisor of both elements is a divisor of the GCD. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_2} [inst : CancelCommMonoidWithZero α] [self : GCDMonoid α] {a b c : α}, a ∣ c → a ∣ b → a ∣ gcd c b\"},\n {\"role\": \"user\",\n  \"content\":\n  \"There is a rational power between any two positive elements of an archimedean ordered field. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {n : ℕ} {α : Type u_1} [inst : LinearOrderedField α] [inst_1 : Archimedean α],\\n  n ≠ 0 → ∀ {x y : α}, x < y → 0 < y → ∃ q, 0 < q ∧ x < ↑q ^ n ∧ ↑q ^ n < y\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The numerator and denominator are coprime: it is in \\\"reduced form\\\". \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ (self : ℚ), Nat.Coprime (Int.natAbs self.num) self.den\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If a product lies in the prime ideal, then at least one element lies in the prime ideal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : Semiring α] {I : Ideal α} [self : Ideal.IsPrime I] {x y : α}, x * y ∈ I → x ∈ I ∨ y ∈ I\"},\n {\"role\": \"user\",\n  \"content\": \"The product of two positive elements is positive. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [self : StrictOrderedRing α] (a b : α), 0 < a → 0 < b → 0 < a * b\"},\n {\"role\": \"user\",\n  \"content\":\n  \"We relate a finite product over primes to an infinite sum over smooth numbers. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : NormedCommRing R] [inst_1 : CompleteSpace R] {f : ℕ → R},\\n  f 1 = 1 →\\n    (∀ {m n : ℕ}, Nat.Coprime m n → f (m * n) = f m * f n) →\\n      (∀ {p : ℕ}, Nat.Prime p → Summable fun n => ‖f (p ^ n)‖) →\\n        ∀ (N : ℕ),\\n          (Summable fun m => ‖f ↑m‖) ∧\\n            HasSum (fun m => f ↑m) (Finset.prod (Nat.primesBelow N) fun p => ∑' (n : ℕ), f (p ^ n))\"},\n {\"role\": \"user\",\n  \"content\": \"The only divisors of prime powers are prime powers. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : CancelCommMonoidWithZero α] [dec_irr : (p : Associates α) → Decidable (Irreducible p)]\\n  [inst_1 : UniqueFactorizationMonoid α] [dec : DecidableEq α] [dec' : DecidableEq (Associates α)] {a p : Associates α},\\n  Irreducible p →\\n    ∀ [inst_2 : (n : ℕ) → Decidable (a ∣ p ^ n)] {n : ℕ} (h : a ∣ p ^ n),\\n      a = p ^ Nat.find (_ : ∃ n, (fun n => a ∣ p ^ n) n)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Two natural numbers are equal if and only if they have the same multiples. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {m n : ℕ}, (∀ (a : ℕ), m ∣ a ↔ n ∣ a) ↔ m = n\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Two positive naturals are equal if their prime padic valuations are equal \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (a b : ℕ), a ≠ 0 → b ≠ 0 → (a = b ↔ ∀ (p : ℕ), Nat.Prime p → padicValNat p a = padicValNat p b)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Two natural numbers are equal if and only if they have the same divisors. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {m n : ℕ}, (∀ (a : ℕ), a ∣ m ↔ a ∣ n) ↔ m = n\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The set of natural numbers that are sums of two squares is closed under multiplication. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {a b x y u v : ℕ}, a = x ^ 2 + y ^ 2 → b = u ^ 2 + v ^ 2 → ∃ r s, a * b = r ^ 2 + s ^ 2\"},\n {\"role\": \"user\",\n  \"content\": \"Every nonzero natural number has a unique prime factorization \"},\n {\"role\": \"assistant\", \"content\": \"Set.InjOn Nat.factorization {x | x ≠ 0}\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Every positive even integer can be written as the sum of two primes.\"}]"}
{"text":"Every matrix satisfies its own characteristic polynomial.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\": \"The eigenvalues of a positive definite matrix are positive \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {n : Type u_2} {𝕜 : Type u_4} [inst : Fintype n] [inst_1 : IsROrC 𝕜] [inst_2 : DecidableEq n] {A : Matrix n n 𝕜}\\n  (hA : Matrix.PosDef A) (i : n), 0 < Matrix.IsHermitian.eigenvalues (_ : Matrix.IsHermitian A) i\"},\n {\"role\": \"user\",\n  \"content\": \"The determinant of a permutation matrix equals its sign. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {n : Type u_2} [inst : DecidableEq n] [inst_1 : Fintype n] {R : Type v} [inst_2 : CommRing R] (σ : Equiv.Perm n),\\n  Matrix.det (PEquiv.toMatrix (Equiv.toPEquiv σ)) = ↑↑(Equiv.Perm.sign σ)\"},\n {\"role\": \"user\",\n  \"content\": \"If a matrix has a repeated row, the determinant will be zero. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {n : Type u_2} [inst : DecidableEq n] [inst_1 : Fintype n] {R : Type v} [inst_2 : CommRing R] {M : Matrix n n R}\\n  {i j : n}, i ≠ j → M i = M j → Matrix.det M = 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If a matrix has a repeated column, the determinant will be zero. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {n : Type u_2} [inst : DecidableEq n] [inst_1 : Fintype n] {R : Type v} [inst_2 : CommRing R] {M : Matrix n n R}\\n  {i j : n}, i ≠ j → (∀ (k : n), M k i = M k j) → Matrix.det M = 0\"},\n {\"role\": \"user\", \"content\": \"A minimal polynomial is prime. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {A : Type u_1} {B : Type u_2} [inst : Field A] [inst_1 : Ring B] [inst_2 : IsDomain B] [inst_3 : Algebra A B] {x : B},\\n  IsIntegral A x → Prime (minpoly A x)\"},\n {\"role\": \"user\", \"content\": \"Every Lie algebra is a module over itself. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} {L : Type v} [inst : CommRing R] [inst_1 : LieRing L] [inst_2 : LieAlgebra R L], LieModule R L L\"},\n {\"role\": \"user\",\n  \"content\": \"The degree of a minimal polynomial is positive. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {A : Type u_1} {B : Type u_2} [inst : CommRing A] [inst_1 : Ring B] [inst_2 : Algebra A B] {x : B}\\n  [inst_3 : Nontrivial B], IsIntegral A x → 0 < Polynomial.degree (minpoly A x)\"},\n {\"role\": \"user\", \"content\": \"A minimal polynomial is irreducible. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {A : Type u_1} {B : Type u_2} [inst : CommRing A] [inst_1 : Ring B] [inst_2 : Algebra A B] {x : B}\\n  [inst_3 : IsDomain A] [inst_4 : IsDomain B], IsIntegral A x → Irreducible (minpoly A x)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A nonzero Hermitian matrix has an eigenvector with nonzero eigenvalue. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {𝕜 : Type u_1} [inst : IsROrC 𝕜] {n : Type u_2} [inst_1 : Fintype n] [inst_2 : DecidableEq n] {A : Matrix n n 𝕜},\\n  Matrix.IsHermitian A → A ≠ 0 → ∃ v t, t ≠ 0 ∧ v ≠ 0 ∧ Matrix.mulVec A v = t • v\"},\n {\"role\": \"user\", \"content\": \"A minimal polynomial is monic. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {A : Type u_1} {B : Type u_2} [inst : CommRing A] [inst_1 : Ring B] [inst_2 : Algebra A B] {x : B},\\n  IsIntegral A x → Polynomial.Monic (minpoly A x)\"},\n {\"role\": \"user\", \"content\": \"Every zero matrix is diagonal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} {n : Type u_4} [inst : Zero α], Matrix.IsDiag 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If every coefficient of a polynomial is in an ideal `I`, then so is the polynomial itself \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} [inst : CommSemiring R] (I : Ideal (Polynomial R)) (p : Polynomial R),\\n  (∀ (n : ℕ), Polynomial.coeff p n ∈ Ideal.comap Polynomial.C I) → p ∈ I\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Every polynomial is the sum of its weighted homogeneous components. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} {M : Type u_2} [inst : CommSemiring R] {σ : Type u_3} [inst_1 : AddCommMonoid M] (w : σ → M)\\n  (φ : MvPolynomial σ R), (finsum fun m => (MvPolynomial.weightedHomogeneousComponent w m) φ) = φ\"},\n {\"role\": \"user\",\n  \"content\":\n  \"`charpoly f` is the characteristic polynomial of the matrix of `f` in any basis. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} {M : Type v} [inst : CommRing R] [inst_1 : Nontrivial R] [inst_2 : AddCommGroup M] [inst_3 : Module R M]\\n  [inst_4 : Module.Free R M] [inst_5 : Module.Finite R M] (f : M →ₗ[R] M) {ι : Type w} [inst_6 : DecidableEq ι]\\n  [inst_7 : Fintype ι] (b : Basis ι R M), Matrix.charpoly ((LinearMap.toMatrix b b) f) = LinearMap.charpoly f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The minimal polynomial of a nonzero element has nonzero constant coefficient. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {A : Type u_1} {B : Type u_2} [inst : Field A] [inst_1 : Ring B] [inst_2 : IsDomain B] [inst_3 : Algebra A B] {x : B},\\n  IsIntegral A x → x ≠ 0 → Polynomial.coeff (minpoly A x) 0 ≠ 0\"},\n {\"role\": \"user\",\n  \"content\": \"Every polynomial is a polynomial in finitely many variables. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {σ : Type u_1} {R : Type u_4} [inst : CommSemiring R] (p : MvPolynomial σ R),\\n  ∃ n f, ∃ (_ : Function.Injective f), ∃ q, p = (MvPolynomial.rename f) q\"},\n {\"role\": \"user\", \"content\": \"Every identity matrix is diagonal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} {n : Type u_4} [inst : DecidableEq n] [inst_1 : Zero α] [inst_2 : One α], Matrix.IsDiag 1\"},\n {\"role\": \"user\",\n  \"content\": \"Every matrix satisfies its own characteristic polynomial.\"}]"}
{"text":"The square root of an irrational number is irrational.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"An algebraic integer whose conjugates are all of norm one is a root of unity. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (K : Type u_1) [inst : Field K] [inst_1 : NumberField K] (A : Type u_2) [inst_2 : NormedField A]\\n  [inst_3 : IsAlgClosed A] [inst_4 : NormedAlgebra ℚ A] {x : K},\\n  IsIntegral ℤ x → (∀ (φ : K →+* A), ‖φ x‖ = 1) → ∃ n, ∃ (_ : 0 < n), x ^ n = 1\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Let `r` be an irrational number. Then `B⁺_r` and `B⁺'_r` are equal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {r : ℝ}, Irrational r → {x | ∃ k > 0, beattySeq' r k = x} = {x | ∃ k > 0, beattySeq r k = x}\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Rational numbers are dense in a linear ordered archimedean field. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {𝕜 : Type u_1} [inst : LinearOrderedField 𝕜] [inst_1 : TopologicalSpace 𝕜] [inst_2 : OrderTopology 𝕜]\\n  [inst_3 : Archimedean 𝕜], DenseRange Rat.cast\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Every terminating continued fraction corresponds to a rational number. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u_1} [inst : LinearOrderedField K] [inst_1 : FloorRing K] {v : K},\\n  GeneralizedContinuedFraction.Terminates (GeneralizedContinuedFraction.of v) → ∃ q, v = ↑q\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If `x^n`, `n > 0`, is integer and is not the `n`-th power of an integer, then\\n`x` is irrational. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {x : ℝ} (n : ℕ) (m : ℤ), x ^ n = ↑m → (¬∃ y, x = ↑y) → 0 < n → Irrational x\"},\n {\"role\": \"user\", \"content\": \"The complex numbers are not countable. \"},\n {\"role\": \"assistant\", \"content\": \"¬Set.Countable Set.univ\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A quadratic has no root if its discriminant has no square root. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : CommRing R] {a b c : R},\\n  (∀ (s : R), discrim a b c ≠ s ^ 2) → ∀ (x : R), a * x * x + b * x + c ≠ 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A rational number has only finitely many good rational approximations. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ (ξ : ℚ), Set.Finite {q | |ξ - q| < 1 / ↑q.den ^ 2}\"},\n {\"role\": \"user\",\n  \"content\": \"Every finite convergent corresponds to a rational number. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u_1} [inst : LinearOrderedField K] [inst_1 : FloorRing K] (v : K) (n : ℕ),\\n  ∃ q, GeneralizedContinuedFraction.convergents (GeneralizedContinuedFraction.of v) n = ↑q\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If `x + y` is irrational, then at least one of `x` and `y` is irrational. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {x y : ℝ}, Irrational (x + y) → Irrational x ∨ Irrational y\"},\n {\"role\": \"user\",\n  \"content\": \"The continued fraction of a rational number terminates. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (q : ℚ), GeneralizedContinuedFraction.Terminates (GeneralizedContinuedFraction.of q)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"There is an irrational number `r` between any two reals `x < r < y`. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {x y : ℝ}, x < y → ∃ r, Irrational r ∧ x < r ∧ r < y\"},\n {\"role\": \"user\",\n  \"content\": \"If a rational is not a p-adic integer, it is not an integer. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (p : ℕ) {a : ℚ} [hp : Fact (Nat.Prime p)], 1 < padicNorm p a → ¬Rat.isInt a = true\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A number satisfying the Liouville condition with exponent `p > 1` is an irrational number. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {p x : ℝ}, LiouvilleWith p x → 1 < p → Irrational x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The real square root is at most the natural square root plus one \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {a : ℕ}, Real.sqrt ↑a ≤ ↑(Nat.sqrt a) + 1\"},\n {\"role\": \"user\",\n  \"content\": \"The natural square root is at most the real square root \"},\n {\"role\": \"assistant\", \"content\": \"∀ {a : ℕ}, ↑(Nat.sqrt a) ≤ Real.sqrt ↑a\"},\n {\"role\": \"user\", \"content\": \"The golden ratio is irrational. \"},\n {\"role\": \"assistant\", \"content\": \"Irrational goldenRatio\"},\n {\"role\": \"user\", \"content\": \"**Irrationality of the Square Root of 2** \"},\n {\"role\": \"assistant\", \"content\": \"Irrational (Real.sqrt 2)\"},\n {\"role\": \"user\",\n  \"content\": \"The conjugate of the golden ratio is irrational. \"},\n {\"role\": \"assistant\", \"content\": \"Irrational goldenConj\"},\n {\"role\": \"user\", \"content\": \"A transcendental real number is irrational. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {r : ℝ}, Transcendental ℚ r → Irrational r\"},\n {\"role\": \"user\",\n  \"content\": \"The square root of an irrational number is irrational.\"}]"}
{"text":"If the square of a number is even, the number itself is even.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"`2` is a square in `F` iff `#F` is not congruent to `3` or `5` mod `8`. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {F : Type u_1} [inst : Field F] [inst_1 : Fintype F], IsSquare 2 ↔ Fintype.card F % 8 ≠ 3 ∧ Fintype.card F % 8 ≠ 5\"},\n {\"role\": \"user\", \"content\": \"**Four squares theorem** \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ (n : ℕ), ∃ a b c d, a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 = n\"},\n {\"role\": \"user\", \"content\": \"The square of the symbol is 1 if `p ∤ a`. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (p : ℕ) [inst : Fact (Nat.Prime p)] {a : ℤ}, ↑a ≠ 0 → legendreSym p a ^ 2 = 1\"},\n {\"role\": \"user\", \"content\": \"**Euler's four-square identity**. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : CommRing R] (a b c d x y z w : R),\\n  (a * x - b * y - c * z - d * w) ^ 2 + (a * y + b * x + c * w - d * z) ^ 2 + (a * z - b * w + c * x + d * y) ^ 2 +\\n      (a * w + b * z - c * y + d * x) ^ 2 =\\n    (a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2) * (x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A square has a lifting if and only if its (right) adjoint square has a lifting. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {C : Type u_1} {D : Type u_2} [inst : CategoryTheory.Category.{u_3, u_1} C]\\n  [inst_1 : CategoryTheory.Category.{u_4, u_2} D] {G : CategoryTheory.Functor C D} {F : CategoryTheory.Functor D C}\\n  {A B : C} {X Y : D} {i : A ⟶ B} {p : X ⟶ Y} {u : G.obj A ⟶ X} {v : G.obj B ⟶ Y}\\n  (sq : CategoryTheory.CommSq u (G.map i) p v) (adj : G ⊣ F),\\n  CategoryTheory.CommSq.HasLift\\n      (_ :\\n        CategoryTheory.CommSq ((CategoryTheory.Adjunction.homEquiv adj A X) u) i (F.map p)\\n          ((CategoryTheory.Adjunction.homEquiv adj B Y) v)) ↔\\n    CategoryTheory.CommSq.HasLift sq\"},\n {\"role\": \"user\",\n  \"content\": \"The square of `J(a | b)` is `1` when `a` and `b` are coprime. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {a : ℤ} {b : ℕ}, Int.gcd a ↑b = 1 → jacobiSym a b ^ 2 = 1\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The sum over the values of the quadratic character is zero when the characteristic is odd. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {F : Type u_1} [inst : Field F] [inst_1 : Fintype F] [inst_2 : DecidableEq F],\\n  ringChar F ≠ 2 → (Finset.sum Finset.univ fun a => (quadraticChar F) a) = 0\"},\n {\"role\": \"user\",\n  \"content\": \"The square of a quadratic character is the trivial character. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} [inst : CommRing R] {R' : Type v} [inst_1 : CommRing R'] {χ : MulChar R R'},\\n  MulChar.IsQuadratic χ → χ ^ 2 = 1\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Two natural numbers are equal if and only if they have the same divisors. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {m n : ℕ}, (∀ (a : ℕ), a ∣ m ↔ a ∣ n) ↔ m = n\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The `n`th power of a quadratic character is itself, when `n` is odd. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} [inst : CommRing R] {R' : Type v} [inst_1 : CommRing R'] {χ : MulChar R R'},\\n  MulChar.IsQuadratic χ → ∀ {n : ℕ}, Odd n → χ ^ n = χ\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Commutativity of a square is preserved when taking quotients by an ideal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} {S : Type v} [inst : CommRing R] [inst_1 : CommRing S] {R' : Type u_5} {S' : Type u_6}\\n  [inst_2 : CommRing R'] [inst_3 : CommRing S'] {f : R →+* S} {f' : R' →+* S'} {g : R →+* R'} {g' : S →+* S'}\\n  (hfg : RingHom.comp f' g = RingHom.comp g' f) (I : Ideal S'),\\n  let leq := (_ : Ideal.comap f (Ideal.comap g' I) ≤ Ideal.comap g (Ideal.comap f' I));\\n  RingHom.comp (Ideal.quotientMap I g' (_ : Ideal.comap g' I ≤ Ideal.comap g' I))\\n      (Ideal.quotientMap (Ideal.comap g' I) f\\n        (_ : Ideal.comap f (Ideal.comap g' I) ≤ Ideal.comap f (Ideal.comap g' I))) =\\n    RingHom.comp (Ideal.quotientMap I f' (_ : Ideal.comap f' I ≤ Ideal.comap f' I))\\n      (Ideal.quotientMap (Ideal.comap f' I) g leq)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The special case of Graham's conjecture where all numbers are squarefree. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {n : ℕ} (f : ℕ → ℕ), (∀ k < n, Squarefree (f k)) → Nat.GrahamConjecture n f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The square of the quadratic character on nonzero arguments is `1`. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {F : Type u_1} [inst : Field F] [inst_1 : Fintype F] [inst_2 : DecidableEq F] {a : F},\\n  a ≠ 0 → (quadraticChar F) a ^ 2 = 1\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If `-1` is a square modulo the natural number `n`, then `n` is a sum of two squares. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {n : ℕ}, IsSquare (-1) → ∃ x y, n = x ^ 2 + y ^ 2\"},\n {\"role\": \"user\",\n  \"content\":\n  \"**Euler's four-square identity**, a version for natural numbers. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (a b c d x y z w : ℕ),\\n  Int.natAbs (↑a * ↑x - ↑b * ↑y - ↑c * ↑z - ↑d * ↑w) ^ 2 + Int.natAbs (↑a * ↑y + ↑b * ↑x + ↑c * ↑w - ↑d * ↑z) ^ 2 +\\n        Int.natAbs (↑a * ↑z - ↑b * ↑w + ↑c * ↑x + ↑d * ↑y) ^ 2 +\\n      Int.natAbs (↑a * ↑w + ↑b * ↑z - ↑c * ↑y + ↑d * ↑x) ^ 2 =\\n    (a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2) * (x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"In a finite field of characteristic `2`, all elements are squares. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {F : Type u_3} [inst : Field F] [inst_1 : Finite F], ringChar F = 2 → ∀ (a : F), IsSquare a\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Two natural numbers are equal if and only if they have the same multiples. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {m n : ℕ}, (∀ (a : ℕ), m ∣ a ↔ n ∣ a) ↔ m = n\"},\n {\"role\": \"user\",\n  \"content\": \"The convolution of two even functions is also even. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {𝕜 : Type u𝕜} {G : Type uG} {E : Type uE} {E' : Type uE'} {F : Type uF} [inst : NormedAddCommGroup E]\\n  [inst_1 : NormedAddCommGroup E'] [inst_2 : NormedAddCommGroup F] {f : G → E} {g : G → E'} {x : G}\\n  [inst_3 : NontriviallyNormedField 𝕜] [inst_4 : NormedSpace 𝕜 E] [inst_5 : NormedSpace 𝕜 E'] [inst_6 : NormedSpace 𝕜 F]\\n  (L : E →L[𝕜] E' →L[𝕜] F) [inst_7 : MeasurableSpace G] {μ : MeasureTheory.Measure G} [inst_8 : NormedSpace ℝ F]\\n  [inst_9 : AddCommGroup G] [inst_10 : MeasureTheory.Measure.IsAddLeftInvariant μ]\\n  [inst_11 : MeasureTheory.Measure.IsNegInvariant μ] [inst_12 : MeasurableNeg G] [inst_13 : MeasurableAdd G],\\n  (∀ᵐ (x : G) ∂μ, f (-x) = f x) → (∀ᵐ (x : G) ∂μ, g (-x) = g x) → convolution f g L (-x) = convolution f g L x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The set of natural numbers that are sums of two squares is closed under multiplication. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {a b x y u v : ℕ}, a = x ^ 2 + y ^ 2 → b = u ^ 2 + v ^ 2 → ∃ r s, a * b = r ^ 2 + s ^ 2\"},\n {\"role\": \"user\",\n  \"content\": \"The sum of two squares is zero iff both elements are zero. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : LinearOrderedRing α] {x y : α}, x * x + y * y = 0 ↔ x = 0 ∧ y = 0\"},\n {\"role\": \"user\",\n  \"content\": \"If the square of a number is even, the number itself is even.\"}]"}
{"text":"In a finite commutative ring, all prime ideals are maximal.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The unique maximal ideal of the localization at `I.primeCompl` lies over the ideal `I`. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : CommSemiring R] {I : Ideal R} [hI : Ideal.IsPrime I],\\n  Ideal.comap (algebraMap R (Localization.AtPrime I)) (LocalRing.maximalIdeal (Localization (Ideal.primeCompl I))) = I\"},\n {\"role\": \"user\",\n  \"content\": \"The only constant in a maximal ideal over a field is `0`. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} [inst : Ring R],\\n  IsField R → ∀ (I : Ideal (Polynomial R)) [hI : Ideal.IsMaximal I] (x : R), Polynomial.C x ∈ I → x = 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The prime spectrum of a commutative ring is a compact topological space. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} [inst : CommRing R], CompactSpace (PrimeSpectrum R)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The variable of the power series ring over an integral domain is prime.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsDomain R], Prime PowerSeries.X\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The `Ideal.closure` of a maximal ideal in a complete normed ring is the ideal itself. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : NormedRing R] [inst_1 : CompleteSpace R] {I : Ideal R}, Ideal.IsMaximal I → Ideal.closure I = I\"},\n {\"role\": \"user\",\n  \"content\": \"The kernel of a homomorphism to a field is a maximal ideal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} {K : Type u_2} {F : Type u_3} [inst : Ring R] [inst_1 : Field K] [inst_2 : RingHomClass F R K] (f : F),\\n  Function.Surjective ⇑f → Ideal.IsMaximal (RingHom.ker f)\"},\n {\"role\": \"user\",\n  \"content\": \"This ideal is maximal in the collection of proper ideals. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {P : Type u_1} [inst : LE P] {I : Order.Ideal P} [self : Order.Ideal.IsMaximal I] ⦃J : Order.Ideal P⦄,\\n  I < J → ↑J = Set.univ\"},\n {\"role\": \"user\",\n  \"content\": \"The category of commutative rings has all limits. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"CategoryTheory.Limits.HasLimitsOfSize.{v, v, max u v, max (u + 1) (v + 1)} CommRingCatMax\"},\n {\"role\": \"user\",\n  \"content\": \"When a ring is not a field, the maximal ideals are nontrivial. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : CommSemiring R] [inst_1 : Nontrivial R] {M : Ideal R}, Ideal.IsMaximal M → ¬IsField R → M ≠ ⊥\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A ring is Noetherian if and only if all its ideals are finitely-generated. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (R : Type u_1) [inst : Semiring R], IsNoetherianRing R ↔ ∀ (I : Ideal R), Ideal.FG I\"},\n {\"role\": \"user\", \"content\": \"Any finitely generated ideal is principal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} [inst : CommRing R] [self : IsBezout R] (I : Ideal R), Ideal.FG I → Submodule.IsPrincipal I\"},\n {\"role\": \"user\",\n  \"content\": \"Krull's theorem: a nontrivial ring has a maximal ideal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (α : Type u) [inst : Semiring α] [inst_1 : Nontrivial α], ∃ M, Ideal.IsMaximal M\"},\n {\"role\": \"user\",\n  \"content\": \"Maximal ideals in complete normed rings are closed. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : NormedRing R] [inst_1 : CompleteSpace R] {I : Ideal R} [hI : Ideal.IsMaximal I], IsClosed ↑I\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The quotient of a ring by an ideal is a field iff the ideal is maximal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} [inst : CommRing R] (I : Ideal R), Ideal.IsMaximal I ↔ IsField (R ⧸ I)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If the quotient by an ideal is a field, then the ideal is maximal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} [inst : CommRing R] (I : Ideal R), IsField (R ⧸ I) → Ideal.IsMaximal I\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If all prime ideals in a commutative ring are principal, so are all other ideals. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} [inst : CommRing R],\\n  (∀ (P : Ideal R), Ideal.IsPrime P → Submodule.IsPrincipal P) → IsPrincipalIdealRing R\"},\n {\"role\": \"user\",\n  \"content\": \"In a finite commutative ring, all prime ideals are maximal.\"}]"}
{"text":"A topological space $X$ is Hausdorff if and only if the diagonal is a closed set in $X × X$.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Any continuous bijection of compact Hausdorff spaces is an isomorphism. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X Y : CompHaus} (f : X ⟶ Y), Function.Bijective ⇑f → CategoryTheory.IsIso f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"For any topological space `X`, its one point compactification is a compact space. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X], CompactSpace (OnePoint X)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A linear order with order topology is a completely normal Hausdorff topological space. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} [inst : LinearOrder X] [inst_1 : TopologicalSpace X] [inst : OrderTopology X], T5Space X\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The Hausdorff distance between two sets and their closures coincide \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : PseudoMetricSpace α] {s t : Set α},\\n  Metric.hausdorffDist (closure s) (closure t) = Metric.hausdorffDist s t\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A continuous injective map from a compact space to a Hausdorff space is a closed embedding. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] [inst_2 : CompactSpace X]\\n  [inst_3 : T2Space Y] {f : X → Y}, Continuous f → Function.Injective f → ClosedEmbedding f\"},\n {\"role\": \"user\",\n  \"content\": \"A weakly locally compact Hausdorff space is locally compact. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : WeaklyLocallyCompactSpace X] [inst_2 : T2Space X],\\n  LocallyCompactSpace X\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A continuous surjective map from a compact space to a Hausdorff space is a quotient map. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] [inst_2 : CompactSpace X]\\n  [inst_3 : T2Space Y] {f : X → Y}, Function.Surjective f → Continuous f → QuotientMap f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Two closed sets are at zero Hausdorff edistance if and only if they coincide \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : PseudoEMetricSpace α] {s t : Set α},\\n  IsClosed s → IsClosed t → (EMetric.hausdorffEdist s t = 0 ↔ s = t)\"},\n {\"role\": \"user\", \"content\": \"Stonean spaces are Hausdorff. \"},\n {\"role\": \"assistant\", \"content\": \"∀ (X : Stonean), T2Space (CoeSort.coe X)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Any continuous function on compact Hausdorff spaces is a closed map. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {X Y : CompHaus} (f : X ⟶ Y), IsClosedMap ⇑f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A locally compact Hausdorff space is totally disconnected\\nif and only if it is totally separated. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {H : Type u_3} [inst : TopologicalSpace H] [inst_1 : LocallyCompactSpace H] [inst_2 : T2Space H],\\n  TotallyDisconnectedSpace H ↔ TotallySeparatedSpace H\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A locally compact Hausdorff totally disconnected space has a basis with clopen elements. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {H : Type u_3} [inst : TopologicalSpace H] [inst_1 : LocallyCompactSpace H] [inst_2 : T2Space H]\\n  [inst_3 : TotallyDisconnectedSpace H], TopologicalSpace.IsTopologicalBasis {s | IsClopen s}\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Two closed sets are at zero Hausdorff distance if and only if they coincide \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : PseudoMetricSpace α] {s t : Set α},\\n  IsClosed s → IsClosed t → EMetric.hausdorffEdist s t ≠ ⊤ → (Metric.hausdorffDist s t = 0 ↔ s = t)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"In a complete space, the type of closed subsets is complete for the\\nHausdorff edistance. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : EMetricSpace α] [inst_1 : CompleteSpace α], CompleteSpace (TopologicalSpace.Closeds α)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Every two points in a Hausdorff space admit disjoint open neighbourhoods. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u} [inst : TopologicalSpace X] [self : T2Space X] (x y : X),\\n  x ≠ y → ∃ u v, IsOpen u ∧ IsOpen v ∧ x ∈ u ∧ y ∈ v ∧ Disjoint u v\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A continuous map from a compact space to a Hausdorff space is a closed map. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] [inst_2 : CompactSpace X]\\n  [inst_3 : T2Space Y] {f : X → Y}, Continuous f → IsClosedMap f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A topological space $X$ is Hausdorff if and only if the diagonal is a closed set in $X × X$.\"}]"}
{"text":"If every point of a subset of a topological space is contained in some open set, the subset itself is open.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The first projection in a product of topological spaces sends open sets to open sets. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β], IsOpenMap Prod.fst\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A subspace is dense iff its topological closure is the entire space. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} {M : Type v} [inst : Semiring R] [inst_1 : TopologicalSpace M] [inst_2 : AddCommMonoid M]\\n  [inst_3 : Module R M] [inst_4 : ContinuousConstSMul R M] [inst_5 : ContinuousAdd M] {s : Submodule R M},\\n  Dense ↑s ↔ Submodule.topologicalClosure s = ⊤\"},\n {\"role\": \"user\",\n  \"content\": \"In a compact space, the type of closed subsets is compact. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : EMetricSpace α] [inst_1 : CompactSpace α], CompactSpace (TopologicalSpace.Closeds α)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The only open sets in the indiscrete topology are the empty set and the whole space. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {α : Type u_1} (U : Set α), IsOpen U ↔ U = ∅ ∨ U = Set.univ\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Any uncountable closed set in a second countable space contains a nonempty perfect subset.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] {C : Set α} [inst_1 : SecondCountableTopology α],\\n  IsClosed C → ¬Set.Countable C → ∃ D, Perfect D ∧ Set.Nonempty D ∧ D ⊆ C\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A nonempty open subset of a preirreducible subspace is dense in the subspace. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] {S U : Set X},\\n  IsPreirreducible S → IsOpen U → Set.Nonempty (S ∩ U) → S ⊆ closure (S ∩ U)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Points of a finite set can be separated by open sets from each other. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : T2Space X] {s : Set X},\\n  Set.Finite s → ∃ U, (∀ (x : X), x ∈ U x ∧ IsOpen (U x)) ∧ Set.PairwiseDisjoint s U\"},\n {\"role\": \"user\",\n  \"content\": \"Subsets of a given closed subset form a closed set \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : EMetricSpace α] {s : Set α}, IsClosed s → IsClosed {t | ↑t ⊆ s}\"},\n {\"role\": \"user\",\n  \"content\": \"In a (pre)irreducible space, a nonempty open set is dense. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] {s : Set X} [inst_1 : PreirreducibleSpace X],\\n  IsOpen s → Set.Nonempty s → Dense s\"},\n {\"role\": \"user\", \"content\": \"The closure of every open set is open. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u} [inst : TopologicalSpace X] [self : ExtremallyDisconnected X] (U : Set X), IsOpen U → IsOpen (closure U)\"},\n {\"role\": \"user\",\n  \"content\": \"A closed subset of a compact set is a compact set. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u} [inst : TopologicalSpace X] {s t : Set X}, IsCompact s → IsClosed t → t ⊆ s → IsCompact t\"},\n {\"role\": \"user\",\n  \"content\":\n  \"An open set in the indiscrete topology is either empty or the whole space. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_5} [t : TopologicalSpace α], t = ⊤ → ∀ (U : TopologicalSpace.Opens α), U = ⊥ ∨ U = ⊤\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Characterization of when a subset of the space of points is open. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (L : Type u_1) [inst : CompleteLattice L] (U : Set (Locale.PT L)), IsOpen U ↔ ∃ u, {x | x u} = U\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If every point of a subset of a topological space is contained in some open set, the subset itself is open.\"}]"}
{"text":"Every non-identity element of a free group is of infinite order.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Every nonarchimedean ring is naturally a nonarchimedean additive group. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (R : Type u_1) [inst : Ring R] [inst_1 : TopologicalSpace R] [t : NonarchimedeanRing R], NonarchimedeanAddGroup R\"},\n {\"role\": \"user\",\n  \"content\": \"Subgroups of torsion-free groups are torsion-free. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G], Monoid.IsTorsionFree G → ∀ (H : Subgroup G), Monoid.IsTorsionFree ↥H\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Inverses of elements of finite additive order\\nhave finite additive order.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddGroup G] {x : G}, IsOfFinAddOrder (-x) ↔ IsOfFinAddOrder x\"},\n {\"role\": \"user\", \"content\": \"0 is of finite order in any additive monoid.\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {G : Type u_1} [inst : AddMonoid G], IsOfFinAddOrder 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A nontrivial monoid is not torsion-free if any nontrivial element has finite order. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Monoid G], ¬Monoid.IsTorsionFree G ↔ ∃ g, g ≠ 1 ∧ IsOfFinOrder g\"},\n {\"role\": \"user\", \"content\": \"A finite group of prime order is simple. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : Group α] [inst_1 : Fintype α] {p : ℕ} [hp : Fact (Nat.Prime p)],\\n  Fintype.card α = p → IsSimpleGroup α\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The Nielsen-Schreier theorem: a subgroup of a free group is free. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u} [inst : Group G] [inst_1 : IsFreeGroup G] (H : Subgroup G), IsFreeGroup ↥H\"},\n {\"role\": \"user\", \"content\": \"A finite group of prime order is cyclic.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : AddGroup α] [inst_1 : Fintype α] {p : ℕ} [hp : Fact (Nat.Prime p)],\\n  Fintype.card α = p → IsAddCyclic α\"},\n {\"role\": \"user\", \"content\": \"1 is of finite order in any monoid. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {G : Type u_1} [inst : Monoid G], IsOfFinOrder 1\"},\n {\"role\": \"user\",\n  \"content\": \"The free product of free groups is itself a free group. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {ι : Type u_4} (G : ι → Type u_5) [inst : (i : ι) → Group (G i)] [inst_1 : ∀ (i : ι), IsFreeGroup (G i)],\\n  IsFreeGroup (Monoid.CoprodI G)\"},\n {\"role\": \"user\",\n  \"content\": \"Elements of finite order are closed under multiplication. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : CommMonoid G] {x y : G}, IsOfFinOrder x → IsOfFinOrder y → IsOfFinOrder (x * y)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The image of an element of finite additive order has finite additive order.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} {H : Type u_2} [inst : AddMonoid G] [inst_1 : AddMonoid H] (f : G →+ H) {x : G},\\n  IsOfFinAddOrder x → IsOfFinAddOrder (f x)\"},\n {\"role\": \"user\", \"content\": \"A finite group of prime order is cyclic. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : Group α] [inst_1 : Fintype α] {p : ℕ} [hp : Fact (Nat.Prime p)], Fintype.card α = p → IsCyclic α\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A group element has finite additive order iff its order is positive.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddMonoid G] {x : G}, 0 < addOrderOf x ↔ IsOfFinAddOrder x\"},\n {\"role\": \"user\",\n  \"content\": \"Elements of finite order are of finite order in submonoids.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddMonoid G] {H : AddSubmonoid G} {x : ↥H}, IsOfFinAddOrder ↑x ↔ IsOfFinAddOrder x\"},\n {\"role\": \"user\",\n  \"content\": \"The image of an element of finite order has finite order. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} {H : Type u_2} [inst : Monoid G] [inst_1 : Monoid H] (f : G →* H) {x : G},\\n  IsOfFinOrder x → IsOfFinOrder (f x)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A monoid is not a torsion monoid if it has an element of infinite order. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (G : Type u_1) [inst : Monoid G], ¬Monoid.IsTorsion G ↔ ∃ g, ¬IsOfFinOrder g\"},\n {\"role\": \"user\",\n  \"content\": \"A group element has finite order iff its order is positive. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Monoid G] {x : G}, 0 < orderOf x ↔ IsOfFinOrder x\"},\n {\"role\": \"user\",\n  \"content\": \"Every nonzero element of a group with zero is invertible. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [self : LinearOrderedCommGroupWithZero α] (a : α), a ≠ 0 → a * a⁻¹ = 1\"},\n {\"role\": \"user\",\n  \"content\": \"Inverses of elements of finite order have finite order. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] {x : G}, IsOfFinOrder x⁻¹ ↔ IsOfFinOrder x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Every non-identity element of a free group is of infinite order.\"}]"}
{"text":"An element of a discrete valuation ring is a unit if and only if it has a valuation of zero.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If `v` is an additive valuation on a division ring then `v(x) = ⊤` iff `x = 0`. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u_1} [inst : DivisionRing K] {Γ₀ : Type u_4} [inst_1 : LinearOrderedAddCommMonoidWithTop Γ₀]\\n  [inst_2 : Nontrivial Γ₀] (v : AddValuation K Γ₀) {x : K}, v x = ⊤ ↔ x = 0\"},\n {\"role\": \"user\",\n  \"content\": \"Nonzero divisors have valuation greater than zero. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : IsDedekindDomain R]\\n  (v : IsDedekindDomain.HeightOneSpectrum R) (x : ↥(nonZeroDivisors R)),\\n  0 < IsDedekindDomain.HeightOneSpectrum.intValuationDef v ↑x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"In a normed ring, the powers of an element x with `‖x‖ < 1` tend to zero. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_4} [inst : NormedRing R] {x : R}, ‖x‖ < 1 → Filter.Tendsto (fun n => x ^ n) Filter.atTop (nhds 0)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"In a monoid with zero, either zero and one are nonequal, or zero is the only element. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {M₀ : Type u_2} [inst : MulZeroOneClass M₀], 0 ≠ 1 ∨ ∀ (a : M₀), a = 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A subring of a ring with no zero divisors has no zero divisors. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : Ring R] [inst_1 : NoZeroDivisors R] (s : Subring R), NoZeroDivisors ↥s\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The sum of a nontrivial subgroup of the units of a field is zero. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u_1} [inst : Ring K] [inst_1 : NoZeroDivisors K] {G : Subgroup Kˣ} [inst_2 : Fintype ↥G],\\n  G ≠ ⊥ → (Finset.sum Finset.univ fun x => ↑↑x) = 0\"},\n {\"role\": \"user\", \"content\": \"Nonzero divisors have nonzero valuation. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : IsDedekindDomain R]\\n  (v : IsDedekindDomain.HeightOneSpectrum R) (x : ↥(nonZeroDivisors R)),\\n  IsDedekindDomain.HeightOneSpectrum.intValuationDef v ↑x ≠ 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"In a monoid with zero, zero equals one if and only if all elements of that semiring\\nare equal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {M₀ : Type u_2} [inst : MulZeroOneClass M₀], 0 = 1 ↔ Subsingleton M₀\"},\n {\"role\": \"user\",\n  \"content\": \"An element is in the kernel if and only if it maps to zero.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} {S : Type v} {F : Type u_1} [inst : Semiring R] [inst_1 : Semiring S] [rcf : RingHomClass F R S] (f : F)\\n  {r : R}, r ∈ RingHom.ker f ↔ f r = 0\"},\n {\"role\": \"user\", \"content\": \"Nonzero elements have nonzero adic valuation. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : IsDedekindDomain R]\\n  (v : IsDedekindDomain.HeightOneSpectrum R) (x : R), x ≠ 0 → IsDedekindDomain.HeightOneSpectrum.intValuationDef v x ≠ 0\"},\n {\"role\": \"user\", \"content\": \"The `v`-adic valuation of `0 : R` equals 0. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : IsDedekindDomain R]\\n  (v : IsDedekindDomain.HeightOneSpectrum R), IsDedekindDomain.HeightOneSpectrum.intValuationDef v 0 = 0\"},\n {\"role\": \"user\", \"content\": \"A non-unital subring contains the ring's 0. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} [inst : NonUnitalNonAssocRing R] (s : NonUnitalSubring R), 0 ∈ s\"},\n {\"role\": \"user\",\n  \"content\": \"A nonzero ideal has an element of minimal norm. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} {S : Type u_2} [inst : EuclideanDomain R] [inst_1 : CommRing S] [inst_2 : IsDomain S]\\n  [inst_3 : Algebra R S] (abv : AbsoluteValue R ℤ) (I : ↥(nonZeroDivisors (Ideal S))),\\n  ∃ b ∈ ↑I, b ≠ 0 ∧ ∀ c ∈ ↑I, abv ((Algebra.norm R) c) < abv ((Algebra.norm R) b) → c = 0\"},\n {\"role\": \"user\",\n  \"content\": \"A ring is a `ℚ`-algebra iff it has equal characteristic zero. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (R : Type u_1) [inst : CommRing R], Nonempty (Algebra ℚ R) ↔ ∀ (I : Ideal R), I ≠ ⊤ → CharZero (R ⧸ I)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"In a monoid with zero, if zero equals one, then zero is the only element. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {M₀ : Type u_2} [inst : MulZeroOneClass M₀], 0 = 1 → ∀ (a : M₀), a = 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A product of ideals in an integral domain is zero if and only if one of the terms is zero. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_2} [inst : CommRing R] [inst_1 : IsDomain R] {s : Multiset (Ideal R)},\\n  Multiset.prod s = ⊥ ↔ ∃ I ∈ s, I = ⊥\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If `v` is a valuation on a division ring then `v(x) = 0` iff `x = 0`. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u_1} [inst : DivisionRing K] {Γ₀ : Type u_4} [inst_1 : LinearOrderedCommMonoidWithZero Γ₀]\\n  [inst_2 : Nontrivial Γ₀] (v : Valuation K Γ₀) {x : K}, v x = 0 ↔ x = 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"An element of a discrete valuation ring is a unit if and only if it has a valuation of zero.\"}]"}
{"text":"For any two relatively prime positive integers $a$ and $b$, every sufficiently large natural number $N$ can be written as a linear combination $ax + by$ of $a$ and $b$, where both $x$ and $y$ are natural numbers.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Rational numbers are dense in a linear ordered archimedean field. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {𝕜 : Type u_1} [inst : LinearOrderedField 𝕜] [inst_1 : TopologicalSpace 𝕜] [inst_2 : OrderTopology 𝕜]\\n  [inst_3 : Archimedean 𝕜], DenseRange Rat.cast\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If `p` is a prime factor of `a` then `p` is also a prime factor of `a * b` for any `b > 0` \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {p a b : ℕ}, p ∈ Nat.factors a → b ≠ 0 → p ∈ Nat.factors (a * b)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If two integers are congruent to a sufficiently large modulus,\\nthey are equal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {a b c : ℤ}, a % b = c → Int.natAbs (a - c) < Int.natAbs b → a = c\"},\n {\"role\": \"user\",\n  \"content\":\n  \"There is a rational power between any two positive elements of an archimedean ordered field. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {n : ℕ} {α : Type u_1} [inst : LinearOrderedField α] [inst_1 : Archimedean α],\\n  n ≠ 0 → ∀ {x y : α}, x < y → 0 < y → ∃ q, 0 < q ∧ x < ↑q ^ n ∧ ↑q ^ n < y\"},\n {\"role\": \"user\", \"content\": \"For `a ≤ b`, there is a `c` so `b = a * c`. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [self : CanonicallyOrderedCommMonoid α] {a b : α}, a ≤ b → ∃ c, b = a * c\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Two natural numbers are equal if and only if they have the same divisors. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {m n : ℕ}, (∀ (a : ℕ), a ∣ m ↔ a ∣ n) ↔ m = n\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If `p` is a prime factor of `b` then `p` is also a prime factor of `a * b` for any `a > 0` \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {p a b : ℕ}, p ∈ Nat.factors b → a ≠ 0 → p ∈ Nat.factors (a * b)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"For coprime `a` and `b`, the prime factors of `a * b` are the union of those of `a` and `b` \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {a b : ℕ}, Nat.Coprime a b → List.Perm (Nat.factors (a * b)) (Nat.factors a ++ Nat.factors b)\"},\n {\"role\": \"user\",\n  \"content\": \"Every nonzero natural number has a unique prime factorization \"},\n {\"role\": \"assistant\", \"content\": \"Set.InjOn Nat.factorization {x | x ≠ 0}\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Two natural numbers are equal if and only if they have the same multiples. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {m n : ℕ}, (∀ (a : ℕ), m ∣ a ↔ n ∣ a) ↔ m = n\"},\n {\"role\": \"user\",\n  \"content\":\n  \"We relate a finite product over primes to an infinite sum over smooth numbers. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : NormedCommRing R] [inst_1 : CompleteSpace R] {f : ℕ → R},\\n  f 1 = 1 →\\n    (∀ {m n : ℕ}, Nat.Coprime m n → f (m * n) = f m * f n) →\\n      (∀ {p : ℕ}, Nat.Prime p → Summable fun n => ‖f (p ^ n)‖) →\\n        ∀ (N : ℕ),\\n          (Summable fun m => ‖f ↑m‖) ∧\\n            HasSum (fun m => f ↑m) (Finset.prod (Nat.primesBelow N) fun p => ∑' (n : ℕ), f (p ^ n))\"},\n {\"role\": \"user\",\n  \"content\":\n  \"For positive `a` and `b`, the prime factors of `a * b` are the union of those of `a` and `b` \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {a b : ℕ}, a ≠ 0 → b ≠ 0 → List.Perm (Nat.factors (a * b)) (Nat.factors a ++ Nat.factors b)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The set of natural numbers that are sums of two squares is closed under multiplication. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {a b x y u v : ℕ}, a = x ^ 2 + y ^ 2 → b = u ^ 2 + v ^ 2 → ∃ r s, a * b = r ^ 2 + s ^ 2\"},\n {\"role\": \"user\",\n  \"content\":\n  \"For any two relatively prime positive integers $a$ and $b$, every sufficiently large natural number $N$ can be written as a linear combination $ax + by$ of $a$ and $b$, where both $x$ and $y$ are natural numbers.\"}]"}
{"text":"Every field is a ring.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\": \"The characteristic of a finite ring cannot be zero. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (R : Type u_1) [inst : NonAssocRing R] (p : ℕ) [inst : CharP R p] [inst : Finite R], p ≠ 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If two rings are isomorphic, and the second is a domain, then so is the first. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {A : Type u_7} (B : Type u_8) [inst : Semiring A] [inst_1 : Semiring B] [inst_2 : IsDomain B], A ≃* B → IsDomain A\"},\n {\"role\": \"user\", \"content\": \"A subring contains the ring's 1. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {R : Type u} [inst : Ring R] (s : Subring R), 1 ∈ s\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The quotient of a ring by an ideal is a field iff the ideal is maximal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} [inst : CommRing R] (I : Ideal R), Ideal.IsMaximal I ↔ IsField (R ⧸ I)\"},\n {\"role\": \"user\", \"content\": \"Every ring involution must be its own inverse \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {F : Type u_2} {R : outParam (Type u_3)} [inst : Semiring R] [self : RingInvoClass F R] (f : F) (x : R),\\n  MulOpposite.unop (f (MulOpposite.unop (f x))) = x\"},\n {\"role\": \"user\", \"content\": \"A seminormed ring is a topological ring. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : NonUnitalSeminormedRing α], TopologicalRing α\"},\n {\"role\": \"user\",\n  \"content\": \"When a ring is not a field, the maximal ideals are nontrivial. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : CommSemiring R] [inst_1 : Nontrivial R] {M : Ideal R}, Ideal.IsMaximal M → ¬IsField R → M ≠ ⊥\"},\n {\"role\": \"user\", \"content\": \"A subring contains the ring's 0. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {R : Type u} [inst : Ring R] (s : Subring R), 0 ∈ s\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A field is perfect if every irreducible polynomial is separable. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u_1} [inst : Field K] [self : PerfectField K] {f : Polynomial K}, Irreducible f → Polynomial.Separable f\"},\n {\"role\": \"user\",\n  \"content\": \"Stalks of a locally ringed space are local rings. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (self : AlgebraicGeometry.LocallyRingedSpace) (x : ↑↑self.toPresheafedSpace),\\n  LocalRing ↑(TopCat.Presheaf.stalk self.presheaf x)\"},\n {\"role\": \"user\",\n  \"content\": \"The ring of integers of a number field is not a field. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (K : Type u_1) [inst : Field K] [nf : NumberField K], ¬IsField ↥(NumberField.ringOfIntegers K)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"For a semiring to be a field, it must have two distinct elements. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {R : Type u} [inst : Semiring R], IsField R → ∃ x y, x ≠ y\"},\n {\"role\": \"user\",\n  \"content\": \"All ideals in a division (semi)ring are trivial. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u} [inst : DivisionSemiring K] (I : Ideal K), I = ⊥ ∨ I = ⊤\"},\n {\"role\": \"user\", \"content\": \"The category of rings has all limits. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"CategoryTheory.Limits.HasLimitsOfSize.{v, v, max u v, max (u + 1) (v + 1)} CommSemiRingCatMax\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A perfect field of characteristic `p` (prime) is a perfect ring. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (K : Type u_1) [inst : Field K] [inst_1 : PerfectField K] (p : ℕ) [hp : Fact (Nat.Prime p)] [inst_2 : CharP K p],\\n  PerfectRing K p\"},\n {\"role\": \"user\", \"content\": \"Fields are commutative. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} [inst : Semiring R], IsField R → ∀ (x y : R), x * y = y * x\"},\n {\"role\": \"user\",\n  \"content\": \"A linear ordered field that is a floor ring is archimedean. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (α : Type u_2) [inst : LinearOrderedField α] [inst_1 : FloorRing α], Archimedean α\"},\n {\"role\": \"user\", \"content\": \"An intermediate field contains the ring's 1. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u_1} {L : Type u_2} [inst : Field K] [inst_1 : Field L] [inst_2 : Algebra K L] (S : IntermediateField K L),\\n  1 ∈ S\"},\n {\"role\": \"user\", \"content\": \"An intermediate field contains the ring's 0. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u_1} {L : Type u_2} [inst : Field K] [inst_1 : Field L] [inst_2 : Algebra K L] (S : IntermediateField K L),\\n  0 ∈ S\"},\n {\"role\": \"user\", \"content\": \"A field is a valuation ring. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ (K : Type u) [inst : Field K], ValuationRing K\"},\n {\"role\": \"user\", \"content\": \"Every field is a ring.\"}]"}
{"text":"The set of units in a ring forms a group.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Multivariate formal power series over a local ring form a local ring. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {σ : Type u_1} {R : Type u_2} [inst : CommRing R] [inst_1 : LocalRing R], LocalRing (MvPowerSeries σ R)\"},\n {\"role\": \"user\",\n  \"content\": \"The subring generated by a set includes the set. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} [inst : Ring R] {s : Set R}, s ⊆ ↑(Subring.closure s)\"},\n {\"role\": \"user\", \"content\": \"A unit in a monoid is regular. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : Monoid R] {a : R}, IsUnit a → IsRegular a\"},\n {\"role\": \"user\",\n  \"content\": \"Subgroups of torsion groups are torsion groups. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G], Monoid.IsTorsion G → ∀ (H : Subgroup G), Monoid.IsTorsion ↥H\"},\n {\"role\": \"user\", \"content\": \"A finite group of prime order is cyclic. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : Group α] [inst_1 : Fintype α] {p : ℕ} [hp : Fact (Nat.Prime p)], Fintype.card α = p → IsCyclic α\"},\n {\"role\": \"user\", \"content\": \"The normal closure of a set is a subgroup. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] (s : Set G), IsSubgroup (Group.normalClosure s)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A group is finitely generated if and only if it is finitely generated as a monoid. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {G : Type u_3} [inst : Group G], Group.FG G ↔ Monoid.FG G\"},\n {\"role\": \"user\", \"content\": \"A seminormed ring is a topological ring. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : NonUnitalSeminormedRing α], TopologicalRing α\"},\n {\"role\": \"user\", \"content\": \"A subring contains the ring's 1. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {R : Type u} [inst : Ring R] (s : Subring R), 1 ∈ s\"},\n {\"role\": \"user\",\n  \"content\": \"A normed division ring is a topological division ring. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : NormedDivisionRing α], TopologicalDivisionRing α\"},\n {\"role\": \"user\", \"content\": \"A subring contains the ring's 0. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {R : Type u} [inst : Ring R] (s : Subring R), 0 ∈ s\"},\n {\"role\": \"user\",\n  \"content\": \"The subgroup generated by a set includes the set. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] {k : Set G}, k ⊆ ↑(Subgroup.closure k)\"},\n {\"role\": \"user\", \"content\": \"The unit circle in `ℂ` is a Lie group. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"LieGroup (modelWithCornersSelf ℝ (EuclideanSpace ℝ (Fin 1))) ↥circle\"},\n {\"role\": \"user\",\n  \"content\": \"The center of a group acts commutatively on that group. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G], SMulCommClass G (↥(Subgroup.center G)) G\"},\n {\"role\": \"user\", \"content\": \"Finite groups are torsion groups. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] [inst_1 : Finite G], Monoid.IsTorsion G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A finite subgroup of the unit group of an integral domain is cyclic. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} {G : Type u_2} [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : Group G] [inst_3 : Finite G]\\n  (f : G →* R), Function.Injective ⇑f → IsCyclic G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A finite subgroup of the units of an integral domain is cyclic. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsDomain R] (S : Subgroup Rˣ) [inst_2 : Finite ↥S], IsCyclic ↥S\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The group of units of a complete normed ring is an open subset of the ring. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : NormedRing R] [inst_1 : CompleteSpace R], IsOpen {x | IsUnit x}\"},\n {\"role\": \"user\",\n  \"content\": \"The units of a complete normed ring form a Lie group. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : NormedRing R] [inst_1 : CompleteSpace R] {𝕜 : Type u_2} [inst_2 : NontriviallyNormedField 𝕜]\\n  [inst_3 : NormedAlgebra 𝕜 R], LieGroup (modelWithCornersSelf 𝕜 R) Rˣ\"},\n {\"role\": \"user\", \"content\": \"The set of units in a ring forms a group.\"}]"}
{"text":"If the direct product of two groups is torsion free then each of the groups is torsion free.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Quotienting by the torsion submodule gives a torsion-free module. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} {M : Type u_2} [inst : CommRing R] [inst_1 : AddCommGroup M] [inst_2 : Module R M],\\n  Submodule.torsion R (M ⧸ Submodule.torsion R M) = ⊥\"},\n {\"role\": \"user\",\n  \"content\": \"The free product of free groups is itself a free group. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {ι : Type u_4} (G : ι → Type u_5) [inst : (i : ι) → Group (G i)] [inst_1 : ∀ (i : ι), IsFreeGroup (G i)],\\n  IsFreeGroup (Monoid.CoprodI G)\"},\n {\"role\": \"user\", \"content\": \"The torsion subgroup is cylic. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (K : Type u_1) [inst : Field K] [inst_1 : NumberField K], IsCyclic ↥(NumberField.Units.torsion K)\"},\n {\"role\": \"user\",\n  \"content\": \"A nontrivial torsion group is not torsion-free. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] [hN : Nontrivial G], Monoid.IsTorsion G → ¬Monoid.IsTorsionFree G\"},\n {\"role\": \"user\", \"content\": \"Torsion submonoids are torsion. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : CommMonoid G], Monoid.IsTorsion ↥(CommMonoid.torsion G)\"},\n {\"role\": \"user\",\n  \"content\": \"Additive torsion groups are closed under extensions.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} {H : Type u_2} [inst : AddGroup G] {N : AddSubgroup G} [inst_1 : AddGroup H] {f : G →+ H},\\n  N = AddMonoidHom.ker f → AddMonoid.IsTorsion H → AddMonoid.IsTorsion ↥N → AddMonoid.IsTorsion G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The torsion submonoid of an abelian group equals the torsion subgroup as a submonoid. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (G : Type u_1) [inst : CommGroup G], CommMonoid.torsion G = (CommGroup.torsion G).toSubmonoid\"},\n {\"role\": \"user\",\n  \"content\": \"The image of a quotient is torsion iff the group is torsion. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} {H : Type u_2} [inst : Group G] {N : Subgroup G} [inst_1 : Group H] {f : G →* H},\\n  Function.Surjective ⇑f → N = MonoidHom.ker f → Monoid.IsTorsion ↥N → (Monoid.IsTorsion H ↔ Monoid.IsTorsion G)\"},\n {\"role\": \"user\",\n  \"content\": \"A nontrivial torsion-free group is not torsion. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] [hN : Nontrivial G], Monoid.IsTorsionFree G → ¬Monoid.IsTorsion G\"},\n {\"role\": \"user\",\n  \"content\": \"If a group exponent exists, the group is torsion. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G], Monoid.ExponentExists G → Monoid.IsTorsion G\"},\n {\"role\": \"user\", \"content\": \"Finite groups are torsion groups. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] [inst_1 : Finite G], Monoid.IsTorsion G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Subgroups of additive torsion groups are additive torsion groups.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddGroup G], AddMonoid.IsTorsion G → ∀ (H : AddSubgroup G), AddMonoid.IsTorsion ↥H\"},\n {\"role\": \"user\",\n  \"content\": \"Subgroups of torsion groups are torsion groups. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G], Monoid.IsTorsion G → ∀ (H : Subgroup G), Monoid.IsTorsion ↥H\"},\n {\"role\": \"user\", \"content\": \"Torsion groups are closed under extensions. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} {H : Type u_2} [inst : Group G] {N : Subgroup G} [inst_1 : Group H] {f : G →* H},\\n  N = MonoidHom.ker f → Monoid.IsTorsion H → Monoid.IsTorsion ↥N → Monoid.IsTorsion G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Quotienting a group by its additive torsion subgroup yields an additive torsion free group.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (G : Type u_1) [inst : AddCommGroup G], AddMonoid.IsTorsionFree (G ⧸ AddCommGroup.torsion G)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Quotienting a group by its torsion subgroup yields a torsion free group. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (G : Type u_1) [inst : CommGroup G], Monoid.IsTorsionFree (G ⧸ CommGroup.torsion G)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Subgroups of additive torsion-free groups are additively torsion-free.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddGroup G], AddMonoid.IsTorsionFree G → ∀ (H : AddSubgroup G), AddMonoid.IsTorsionFree ↥H\"},\n {\"role\": \"user\",\n  \"content\": \"Subgroups of torsion-free groups are torsion-free. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G], Monoid.IsTorsionFree G → ∀ (H : Subgroup G), Monoid.IsTorsionFree ↥H\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Direct products of additive torsion free groups are torsion free.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {η : Type u_3} {Gs : η → Type u_4} [inst : (i : η) → AddGroup (Gs i)],\\n  (∀ (i : η), AddMonoid.IsTorsionFree (Gs i)) → AddMonoid.IsTorsionFree ((i : η) → Gs i)\"},\n {\"role\": \"user\",\n  \"content\": \"Direct products of torsion free groups are torsion free. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {η : Type u_3} {Gs : η → Type u_4} [inst : (i : η) → Group (Gs i)],\\n  (∀ (i : η), Monoid.IsTorsionFree (Gs i)) → Monoid.IsTorsionFree ((i : η) → Gs i)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If the direct product of two groups is torsion free then each of the groups is torsion free.\"}]"}
{"text":"If every proper closed subset of a topological space is compact, then the space itself is compact.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A subspace is dense iff its topological closure is the entire space. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} {M : Type v} [inst : Semiring R] [inst_1 : TopologicalSpace M] [inst_2 : AddCommMonoid M]\\n  [inst_3 : Module R M] [inst_4 : ContinuousConstSMul R M] [inst_5 : ContinuousAdd M] {s : Submodule R M},\\n  Dense ↑s ↔ Submodule.topologicalClosure s = ⊤\"},\n {\"role\": \"user\",\n  \"content\":\n  \"In a locally compact space every point has a compact neighborhood. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] (x : α), ∃ K, IsCompact K ∧ K ∈ nhds x\"},\n {\"role\": \"user\", \"content\": \"The product of two compact spaces is compact. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] [inst_2 : CompactSpace α]\\n  [inst_3 : CompactSpace β], CompactSpace (α × β)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The intersection of a compact set and a closed set is a compact set. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {s t : Set α}, IsCompact s → IsClosed t → IsCompact (s ∩ t)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"In a locally compact T₂ space, every compact set has an open neighborhood with compact closure.\\n\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] [inst_2 : T2Space α] {K : Set α},\\n  IsCompact K → ∃ V, IsOpen V ∧ K ⊆ V ∧ IsCompact (closure V)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"In a nonempty locally compact space, there exists a compact set with nonempty interior. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] [inst_2 : Nonempty α],\\n  Nonempty (TopologicalSpace.PositiveCompacts α)\"},\n {\"role\": \"user\", \"content\": \"In a `T2Space`, every compact set is closed. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : T2Space α] {s : Set α}, IsCompact s → IsClosed s\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The intersection of a closed set and a compact set is a compact set. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {s t : Set α}, IsCompact t → IsClosed s → IsCompact (s ∩ t)\"},\n {\"role\": \"user\",\n  \"content\": \"A closed subset of a compact set is a compact set. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {s t : Set α}, IsCompact s → IsClosed t → t ⊆ s → IsCompact t\"},\n {\"role\": \"user\", \"content\": \"In a Noetherian space, all sets are compact. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace.NoetherianSpace α] (s : Set α), IsCompact s\"},\n {\"role\": \"user\",\n  \"content\":\n  \"For any topological space `X`, its one point compactification is a compact space. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X], CompactSpace (OnePoint X)\"},\n {\"role\": \"user\",\n  \"content\": \"In a compact space, the type of closed subsets is compact. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : EMetricSpace α] [inst_1 : CompactSpace α], CompactSpace (TopologicalSpace.Closeds α)\"},\n {\"role\": \"user\", \"content\": \"The underlying topological space is compact.\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ (self : CompHaus), CompactSpace ↑self.toTop\"},\n {\"role\": \"user\",\n  \"content\":\n  \"In a locally compact space, every compact set is contained in the interior of a compact set. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] {K : Set α},\\n  IsCompact K → ∃ K', IsCompact K' ∧ K ⊆ interior K'\"},\n {\"role\": \"user\", \"content\": \"Finite topological spaces are compact. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : Finite α], CompactSpace α\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If every proper closed subset of a topological space is compact, then the space itself is compact.\"}]"}
{"text":"Every prime that is `1` greater than a multiple of `4` can be expressed as the sum of two squares.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\": \"There are no perfect squares strictly between m² and (m+1)² \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {n m : ℕ}, m * m < n → n < (m + 1) * (m + 1) → ¬∃ t, t * t = n\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Lagrange's **four squares theorem** for a prime number. Use `Nat.sum_four_squares` instead. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {p : ℕ}, Nat.Prime p → ∃ a b c d, a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 = p\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Note that most of the lemmas about powers of two refer to it as `sq`. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {M : Type u} [inst : Monoid M] (a : M), a ^ 2 = a * a\"},\n {\"role\": \"user\", \"content\": \"**Euler's four-square identity**. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : CommRing R] (a b c d x y z w : R),\\n  (a * x - b * y - c * z - d * w) ^ 2 + (a * y + b * x + c * w - d * z) ^ 2 + (a * z - b * w + c * x + d * y) ^ 2 +\\n      (a * w + b * z - c * y + d * x) ^ 2 =\\n    (a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2) * (x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"`2` is a square modulo an odd prime `p` iff `p` is congruent to `1` or `7` mod `8`. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {p : ℕ} [inst : Fact (Nat.Prime p)], p ≠ 2 → (IsSquare 2 ↔ p % 8 = 1 ∨ p % 8 = 7)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If a prime `p` divides `n` such that `-1` is a square modulo `n`, then `p % 4 ≠ 3`. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {p n : ℕ}, Nat.Prime p → p ∣ n → IsSquare (-1) → p % 4 ≠ 3\"},\n {\"role\": \"user\",\n  \"content\": \"Every nonzero natural number has a unique prime factorization \"},\n {\"role\": \"assistant\", \"content\": \"Set.InjOn Nat.factorization {x | x ≠ 0}\"},\n {\"role\": \"user\",\n  \"content\":\n  \"In a finite field of characteristic `2`, all elements are squares. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {F : Type u_1} [inst : Field F] [inst_1 : Finite F], ringChar F = 2 → ∀ (a : F), IsSquare a\"},\n {\"role\": \"user\",\n  \"content\":\n  \"**Euler's four-square identity**, a version for natural numbers. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (a b c d x y z w : ℕ),\\n  Int.natAbs (↑a * ↑x - ↑b * ↑y - ↑c * ↑z - ↑d * ↑w) ^ 2 + Int.natAbs (↑a * ↑y + ↑b * ↑x + ↑c * ↑w - ↑d * ↑z) ^ 2 +\\n        Int.natAbs (↑a * ↑z - ↑b * ↑w + ↑c * ↑x + ↑d * ↑y) ^ 2 +\\n      Int.natAbs (↑a * ↑w + ↑b * ↑z - ↑c * ↑y + ↑d * ↑x) ^ 2 =\\n    (a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2) * (x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A prime natural number is prime in `ℤ[i]` if and only if it is `3` mod `4` \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ (p : ℕ) [inst : Fact (Nat.Prime p)], Prime ↑p ↔ p % 4 = 3\"},\n {\"role\": \"user\", \"content\": \"**Four squares theorem** \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ (n : ℕ), ∃ a b c d, a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 = n\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If `-1` is a square modulo the natural number `n`, then `n` is a sum of two squares. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {n : ℕ}, IsSquare (-1) → ∃ x y, n = x ^ 2 + y ^ 2\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The set of natural numbers that are sums of two squares is closed under multiplication. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {a b x y u v : ℕ}, a = x ^ 2 + y ^ 2 → b = u ^ 2 + v ^ 2 → ∃ r s, a * b = r ^ 2 + s ^ 2\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Every prime that is `1` greater than a multiple of `4` can be expressed as the sum of two squares.\"}]"}
{"text":"The product of two numbers, each of which is the sum of four squares, is itself a sum of four squares.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"An open subgroup of a nonarchimedean ring contains the square of another one. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : Ring R] [inst_1 : TopologicalSpace R] [inst_2 : NonarchimedeanRing R] (U : OpenAddSubgroup R),\\n  ∃ V, ↑V * ↑V ⊆ ↑U\"},\n {\"role\": \"user\",\n  \"content\": \"The product of the factors is the original number \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ (n : ℕ+), PrimeMultiset.prod (PNat.factorMultiset n) = n\"},\n {\"role\": \"user\",\n  \"content\":\n  \"In a finite field of characteristic `2`, all elements are squares. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {F : Type u_1} [inst : Field F] [inst_1 : Finite F], ringChar F = 2 → ∀ (a : F), IsSquare a\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Commutativity of a square is preserved when taking quotients by an ideal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} {S : Type v} [inst : CommRing R] [inst_1 : CommRing S] {R' : Type u_1} {S' : Type u_2}\\n  [inst_2 : CommRing R'] [inst_3 : CommRing S'] {f : R →+* S} {f' : R' →+* S'} {g : R →+* R'} {g' : S →+* S'}\\n  (hfg : RingHom.comp f' g = RingHom.comp g' f) (I : Ideal S'),\\n  let leq := (_ : Ideal.comap f (Ideal.comap g' I) ≤ Ideal.comap g (Ideal.comap f' I));\\n  RingHom.comp (Ideal.quotientMap I g' (_ : Ideal.comap g' I ≤ Ideal.comap g' I))\\n      (Ideal.quotientMap (Ideal.comap g' I) f\\n        (_ : Ideal.comap f (Ideal.comap g' I) ≤ Ideal.comap f (Ideal.comap g' I))) =\\n    RingHom.comp (Ideal.quotientMap I f' (_ : Ideal.comap f' I ≤ Ideal.comap f' I))\\n      (Ideal.quotientMap (Ideal.comap f' I) g leq)\"},\n {\"role\": \"user\",\n  \"content\": \"The product of two positive elements is positive. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [self : StrictOrderedRing α] (a b : α), 0 < a → 0 < b → 0 < a * b\"},\n {\"role\": \"user\", \"content\": \"Multiplication is commutative. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [self : SeminormedCommRing α] (x y : α), x * y = y * x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A measure on a product space equals the product measure if they are equal on rectangles. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_2} {β : Type u_1} [inst : MeasurableSpace α] [inst_1 : MeasurableSpace β] {μ : MeasureTheory.Measure α}\\n  {ν : MeasureTheory.Measure β} [inst_2 : MeasureTheory.SigmaFinite ν] [inst_3 : MeasureTheory.SigmaFinite μ]\\n  {μν : MeasureTheory.Measure (α × β)},\\n  (∀ (s : Set α) (t : Set β), MeasurableSet s → MeasurableSet t → ↑↑μν (s ×ˢ t) = ↑↑μ s * ↑↑ν t) →\\n    MeasureTheory.Measure.prod μ ν = μν\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The scalar quadruple product identity, related to the Binet-Cauchy identity. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : CommRing R] (u v w x : Fin 3 → R),\\n  Matrix.dotProduct (↑(↑crossProduct u) v) (↑(↑crossProduct w) x) =\\n    Matrix.dotProduct u w * Matrix.dotProduct v x - Matrix.dotProduct u x * Matrix.dotProduct v w\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Representation of a difference of two squares in a commutative ring as a product. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type x} [inst : CommRing R] (a b : R), a * a - b * b = (a + b) * (a - b)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Pythagorean theorem, if-and-if vector inner product form using square roots. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {F : Type u_1} [inst : NormedAddCommGroup F] [inst_1 : InnerProductSpace ℝ F] {x y : F},\\n  ‖x + y‖ = Real.sqrt (‖x‖ * ‖x‖ + ‖y‖ * ‖y‖) ↔ inner x y = 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Two natural numbers are equal if and only if they have the same multiples. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {m n : ℕ}, (∀ (a : ℕ), m ∣ a ↔ n ∣ a) ↔ m = n\"},\n {\"role\": \"user\",\n  \"content\": \"Expressing the product of two polynomials as a double sum. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} [inst : Semiring R] {p q : Polynomial R},\\n  p * q =\\n    Finset.sum (Polynomial.support p) fun i =>\\n      Polynomial.sum q fun j a => ↑(Polynomial.monomial (i + j)) (Polynomial.coeff p i * a)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The product of two Chebyshev polynomials is the sum of two other Chebyshev polynomials. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (R : Type u_1) [inst : CommRing R] (m k : ℕ),\\n  2 * Polynomial.Chebyshev.T R m * Polynomial.Chebyshev.T R (m + k) =\\n    Polynomial.Chebyshev.T R (2 * m + k) + Polynomial.Chebyshev.T R k\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If `-1` is a square modulo the natural number `n`, then `n` is a sum of two squares. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {n : ℕ}, IsSquare (-1) → ∃ x y, n = x ^ 2 + y ^ 2\"},\n {\"role\": \"user\", \"content\": \"**Four squares theorem** \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ (n : ℕ), ∃ a b c d, a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 = n\"},\n {\"role\": \"user\", \"content\": \"**Euler's four-square identity**. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : CommRing R] (a b c d x y z w : R),\\n  (a * x - b * y - c * z - d * w) ^ 2 + (a * y + b * x + c * w - d * z) ^ 2 + (a * z - b * w + c * x + d * y) ^ 2 +\\n      (a * w + b * z - c * y + d * x) ^ 2 =\\n    (a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2) * (x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"**Euler's four-square identity**, a version for natural numbers. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (a b c d x y z w : ℕ),\\n  Int.natAbs (↑a * ↑x - ↑b * ↑y - ↑c * ↑z - ↑d * ↑w) ^ 2 + Int.natAbs (↑a * ↑y + ↑b * ↑x + ↑c * ↑w - ↑d * ↑z) ^ 2 +\\n        Int.natAbs (↑a * ↑z - ↑b * ↑w + ↑c * ↑x + ↑d * ↑y) ^ 2 +\\n      Int.natAbs (↑a * ↑w + ↑b * ↑z - ↑c * ↑y + ↑d * ↑x) ^ 2 =\\n    (a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2) * (x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2)\"},\n {\"role\": \"user\",\n  \"content\": \"The sum of two squares is zero iff both elements are zero. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : LinearOrderedRing α] {x y : α}, x * x + y * y = 0 ↔ x = 0 ∧ y = 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The set of natural numbers that are sums of two squares is closed under multiplication. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {a b x y u v : ℕ}, a = x ^ 2 + y ^ 2 → b = u ^ 2 + v ^ 2 → ∃ r s, a * b = r ^ 2 + s ^ 2\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The product of two numbers, each of which is the sum of four squares, is itself a sum of four squares.\"}]"}
{"text":"A ring with all elements idempotent is commutative.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\", \"content\": \"Compressing an element is idempotent. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : GeneralizedBooleanAlgebra α] [inst_1 : DecidableRel Disjoint]\\n  [inst_2 : DecidableRel fun x x_1 => x ≤ x_1] (u v a : α), UV.compress u v (UV.compress u v a) = UV.compress u v a\"},\n {\"role\": \"user\", \"content\": \"An abelian category is idempotent complete. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (D : Type u_1) [inst : CategoryTheory.Category D] [inst_1 : CategoryTheory.Abelian D],\\n  CategoryTheory.IsIdempotentComplete D\"},\n {\"role\": \"user\", \"content\": \"Fields are commutative. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} [inst : Semiring R], IsField R → ∀ (x y : R), x * y = y * x\"},\n {\"role\": \"user\",\n  \"content\": \"Composition of non-unital ring homomorphisms is associative. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_2} {β : Type u_3} {γ : Type u_4} [inst : NonUnitalNonAssocSemiring α]\\n  [inst_1 : NonUnitalNonAssocSemiring β] [inst_2 : NonUnitalNonAssocSemiring γ] {δ : Type u_1}\\n  {x : NonUnitalNonAssocSemiring δ} (f : α →ₙ+* β) (g : β →ₙ+* γ) (h : γ →ₙ+* δ),\\n  NonUnitalRingHom.comp (NonUnitalRingHom.comp h g) f = NonUnitalRingHom.comp h (NonUnitalRingHom.comp g f)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The additive inverse of one multiplied by an element of a ring is the element's additive\\ninverse. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : MulOneClass α] [inst_1 : HasDistribNeg α] (a : α), -1 * a = -a\"},\n {\"role\": \"user\",\n  \"content\":\n  \"An element of a ring multiplied by the additive inverse of one is the element's additive\\ninverse. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : MulOneClass α] [inst_1 : HasDistribNeg α] (a : α), a * -1 = -a\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A finitely generated idempotent ideal is generated by an idempotent element \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : CommRing R] (I : Ideal R),\\n  Ideal.FG I → (IsIdempotentElem I ↔ ∃ e, IsIdempotentElem e ∧ I = Submodule.span R {e})\"},\n {\"role\": \"user\", \"content\": \"The ring homomorphism is an isometry. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R₁ : Type u_1} {R₂ : Type u_2} [inst : Semiring R₁] [inst_1 : Semiring R₂] [inst_2 : Norm R₁] [inst_3 : Norm R₂]\\n  {σ : R₁ →+* R₂} [self : RingHomIsometric σ] {x : R₁}, ‖↑σ x‖ = ‖x‖\"},\n {\"role\": \"user\", \"content\": \"Multiplication is commutative \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {ι : Type u_1} {A : ι → Type u_2} [inst : AddCommMonoid ι] [inst_1 : (i : ι) → AddCommMonoid (A i)]\\n  [self : DirectSum.GCommSemiring A] (a b : GradedMonoid A), a * b = b * a\"},\n {\"role\": \"user\", \"content\": \"Multiplication is commutative. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [self : SeminormedCommRing α] (x y : α), x * y = y * x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"By definition, a ring isomorphism preserves the additive structure. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {F : Type u_1} {R : outParam (Type u_2)} {S : outParam (Type u_3)} [inst : Mul R] [inst_1 : Add R] [inst_2 : Mul S]\\n  [inst_3 : Add S] [self : RingEquivClass F R S] (f : F) (a b : R), ↑f (a + b) = ↑f a + ↑f b\"},\n {\"role\": \"user\",\n  \"content\": \"Multiplication is commutative in a commutative semigroup. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [self : StrictOrderedCommRing α] (a b : α), a * b = b * a\"},\n {\"role\": \"user\", \"content\": \"Equivalence closure is idempotent. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} (r : α → α → Prop), EqvGen.Setoid (Setoid.Rel (EqvGen.Setoid r)) = EqvGen.Setoid r\"},\n {\"role\": \"user\", \"content\": \"A ring isomorphism sends zero to zero. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_2} {S : Type u_1} [inst : NonUnitalNonAssocSemiring R] [inst_1 : NonUnitalNonAssocSemiring S]\\n  (f : R ≃+* S), ↑f 0 = 0\"},\n {\"role\": \"user\", \"content\": \"A ring isomorphism sends one to one. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_2} {S : Type u_1} [inst : NonAssocSemiring R] [inst_1 : NonAssocSemiring S] (f : R ≃+* S), ↑f 1 = 1\"},\n {\"role\": \"user\", \"content\": \"Any element commutes with itself.\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {S : Type u_1} [inst : Add S] (a : S), AddCommute a a\"},\n {\"role\": \"user\", \"content\": \"Any element commutes with itself. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {S : Type u_1} [inst : Mul S] (a : S), Commute a a\"},\n {\"role\": \"user\", \"content\": \"A ring isomorphism preserves addition. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} {S : Type u_2} [inst : Mul R] [inst_1 : Mul S] [inst_2 : Add R] [inst_3 : Add S] (e : R ≃+* S)\\n  (x y : R), ↑e (x + y) = ↑e x + ↑e y\"},\n {\"role\": \"user\", \"content\": \"A ring isomorphism preserves multiplication. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} {S : Type u_2} [inst : Mul R] [inst_1 : Mul S] [inst_2 : Add R] [inst_3 : Add S] (e : R ≃+* S)\\n  (x y : R), ↑e (x * y) = ↑e x * ↑e y\"},\n {\"role\": \"user\",\n  \"content\": \"Multiplication in a boolean ring is idempotent. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {α : Type u_1} [self : BooleanRing α] (a : α), a * a = a\"},\n {\"role\": \"user\",\n  \"content\": \"A ring with all elements idempotent is commutative.\"}]"}
{"text":"There are infinitely many pairs of primes that differ exactly by `2`.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"`-2` is a square modulo an odd prime `p` iff `p` is congruent to `1` or `3` mod `8`. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {p : ℕ} [inst : Fact (Nat.Prime p)], p ≠ 2 → (IsSquare (-2) ↔ p % 8 = 1 ∨ p % 8 = 3)\"},\n {\"role\": \"user\",\n  \"content\": \"The only prime factor of prime `p` is `p` itself. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {p q : ℕ}, Nat.Prime p → ↑(Nat.factorization p) q ≠ 0 → p = q\"},\n {\"role\": \"user\",\n  \"content\": \"The sum of `2⁻¹ ^ i` for `n ≤ i` equals `2 * 2⁻¹ ^ n`. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (n : ℕ), (∑' (i : ℕ), if n ≤ i then 2⁻¹ ^ i else 0) = 2 * 2⁻¹ ^ n\"},\n {\"role\": \"user\",\n  \"content\": \"The prime factorizations of coprime `a` and `b` are disjoint \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {a b : ℕ}, Nat.coprime a b → Disjoint (Nat.factorization a).support (Nat.factorization b).support\"},\n {\"role\": \"user\",\n  \"content\": \"The only divisors of prime powers are prime powers. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : CancelCommMonoidWithZero α] [dec_irr : (p : Associates α) → Decidable (Irreducible p)]\\n  [inst_1 : UniqueFactorizationMonoid α] [dec : DecidableEq α] [dec' : DecidableEq (Associates α)] {a p : Associates α},\\n  Irreducible p →\\n    ∀ [inst_2 : (n : ℕ) → Decidable (a ∣ p ^ n)] {n : ℕ} (h : a ∣ p ^ n),\\n      a = p ^ Nat.find (_ : ∃ n, (fun n => a ∣ p ^ n) n)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The finite field `F` has even cardinality iff it has characteristic `2`. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {F : Type u_1} [inst : Field F] [inst_1 : Fintype F], ringChar F = 2 ↔ Fintype.card F % 2 = 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"For any positive `k : ℕ` there are infinitely many primes `p` such that `p ≡ 1 [MOD k]`. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {k : ℕ}, k ≠ 0 → Set.Infinite {p | Nat.Prime p ∧ p ≡ 1 [MOD k]}\"},\n {\"role\": \"user\",\n  \"content\": \"Infinitely many natural numbers are equal to `d` mod `n`. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {n : ℕ}, n ≠ 0 → ∀ (d : ℕ), ∃ᶠ (m : ℕ) in Filter.atTop, m ≡ d [MOD n]\"},\n {\"role\": \"user\", \"content\": \"The multiplicity of prime `p` in `p` is `1` \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {p : ℕ}, Nat.Prime p → ↑(Nat.factorization p) p = 1\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The only numbers with empty prime factorization are `0` and `1` \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ (n : ℕ), Nat.factorization n = 0 ↔ n = 0 ∨ n = 1\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A prime natural number is prime in `ℤ[i]` if and only if it is `3` mod `4` \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ (p : ℕ) [inst : Fact (Nat.Prime p)], Prime ↑p ↔ p % 4 = 3\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Two natural numbers are equal if and only if they have the same multiples. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {m n : ℕ}, (∀ (a : ℕ), m ∣ a ↔ n ∣ a) ↔ m = n\"},\n {\"role\": \"user\", \"content\": \"`2` is not a factor of an odd natural number. \"},\n {\"role\": \"assistant\", \"content\": \"∀ {m n : ℕ}, Odd n → m ∣ n → m ≠ 2\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Two natural numbers are equal if and only if they have the same divisors. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {m n : ℕ}, (∀ (a : ℕ), a ∣ m ↔ a ∣ n) ↔ m = n\"},\n {\"role\": \"user\",\n  \"content\":\n  \"`2` is a square modulo an odd prime `p` iff `p` is congruent to `1` or `7` mod `8`. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {p : ℕ} [inst : Fact (Nat.Prime p)], p ≠ 2 → (IsSquare 2 ↔ p % 8 = 1 ∨ p % 8 = 7)\"},\n {\"role\": \"user\", \"content\": \"An inequality involving `2`. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : LinearOrderedField α] {a : α}, 2 ≤ a → (1 - 1 / a)⁻¹ ≤ 2\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The set of natural numbers that are sums of two squares is closed under multiplication. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {a b x y u v : ℕ}, a = x ^ 2 + y ^ 2 → b = u ^ 2 + v ^ 2 → ∃ r s, a * b = r ^ 2 + s ^ 2\"},\n {\"role\": \"user\",\n  \"content\": \"Every nonzero natural number has a unique prime factorization \"},\n {\"role\": \"assistant\", \"content\": \"Set.InjOn Nat.factorization {x | x ≠ 0}\"},\n {\"role\": \"user\",\n  \"content\": \"A prime `p` satisfies `p % 2 = 1` if and only if `p ≠ 2`. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {p : ℕ} [inst : Fact (Nat.Prime p)], p % 2 = 1 ↔ p ≠ 2\"},\n {\"role\": \"user\",\n  \"content\":\n  \"In a finite field of characteristic `2`, all elements are squares. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {F : Type u_1} [inst : Field F] [inst_1 : Finite F], ringChar F = 2 → ∀ (a : F), IsSquare a\"},\n {\"role\": \"user\",\n  \"content\":\n  \"There are infinitely many pairs of primes that differ exactly by `2`.\"}]"}
{"text":"Every finite division ring is a field.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A ring is Noetherian if and only if all its ideals are finitely-generated. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (R : Type u_1) [inst : Semiring R], IsNoetherianRing R ↔ ∀ (I : Ideal R), Ideal.FG I\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Any conditionally complete linearly ordered field is archimedean. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : ConditionallyCompleteLinearOrderedField α], Archimedean α\"},\n {\"role\": \"user\", \"content\": \"A subfield is closed under multiplication. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u} [inst : Field K] (s : Subfield K) {x y : K}, x ∈ s → y ∈ s → x * y ∈ s\"},\n {\"role\": \"user\",\n  \"content\": \"An intermediate field is closed under multiplication. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u_2} {L : Type u_1} [inst : Field K] [inst_1 : Field L] [inst_2 : Algebra K L] (S : IntermediateField K L)\\n  {x y : L}, x ∈ S → y ∈ S → x * y ∈ S\"},\n {\"role\": \"user\",\n  \"content\": \"Any infinite type can be endowed a field structure. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {α : Type u} [inst : Infinite α], Nonempty (Field α)\"},\n {\"role\": \"user\",\n  \"content\": \"A normed division ring is a topological division ring. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : NormedDivisionRing α], TopologicalDivisionRing α\"},\n {\"role\": \"user\", \"content\": \"A field extension is integral if it is finite. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (K : Type u_1) (L : Type u_2) [inst : Field K] [inst_1 : Field L] [inst_2 : Algebra K L]\\n  [inst_3 : FiniteDimensional K L], Algebra.IsIntegral K L\"},\n {\"role\": \"user\",\n  \"content\":\n  \"In a finite field of characteristic `2`, all elements are squares. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {F : Type u_1} [inst : Field F] [inst_1 : Finite F], ringChar F = 2 → ∀ (a : F), IsSquare a\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The quotient of a ring by an ideal is a field iff the ideal is maximal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} [inst : CommRing R] (I : Ideal R), Ideal.IsMaximal I ↔ IsField (R ⧸ I)\"},\n {\"role\": \"user\",\n  \"content\": \"All ideals in a division (semi)ring are trivial. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u} [inst : DivisionSemiring K] (I : Ideal K), I = ⊥ ∨ I = ⊤\"},\n {\"role\": \"user\",\n  \"content\": \"A field extension is algebraic if it is finite. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (K : Type u_1) (L : Type u_2) [inst : Field K] [inst_1 : Field L] [inst_2 : Algebra K L]\\n  [inst_3 : FiniteDimensional K L], Algebra.IsAlgebraic K L\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A finite subgroup of the unit group of an integral domain is cyclic. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_2} {G : Type u_1} [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : Group G] [inst_3 : Finite G]\\n  (f : G →* R), Function.Injective ↑f → IsCyclic G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A module over a division ring is noetherian if and only if it is finitely generated. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V],\\n  IsNoetherian K V ↔ Module.Finite K V\"},\n {\"role\": \"user\",\n  \"content\": \"A linear ordered field that is a floor ring is archimedean. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (α : Type u_1) [inst : LinearOrderedField α] [inst_1 : FloorRing α], Archimedean α\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A finite subgroup of the units of an integral domain is cyclic. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsDomain R] (S : Subgroup Rˣ) [inst_2 : Finite { x // x ∈ S }],\\n  IsCyclic { x // x ∈ S }\"},\n {\"role\": \"user\", \"content\": \"A subfield is closed under division. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u} [inst : Field K] (s : Subfield K) {x y : K}, x ∈ s → y ∈ s → x / y ∈ s\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A cyclotomic finite extension of a number field is a number field. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (S : Set ℕ+) (K : Type w) (L : Type z) [inst : Field K] [inst_1 : Field L] [inst_2 : Algebra K L] [h : NumberField K]\\n  [inst_3 : Finite ↑S] [inst : IsCyclotomicExtension S K L], NumberField L\"},\n {\"role\": \"user\", \"content\": \"A field is a valuation ring. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ (K : Type u) [inst : Field K], ValuationRing K\"},\n {\"role\": \"user\",\n  \"content\": \"An intermediate field is closed under division. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u_2} {L : Type u_1} [inst : Field K] [inst_1 : Field L] [inst_2 : Algebra K L] (S : IntermediateField K L)\\n  {x y : L}, x ∈ S → y ∈ S → x / y ∈ S\"},\n {\"role\": \"user\", \"content\": \"A finite field has prime power cardinality. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : Fintype α] [inst_1 : Field α], IsPrimePow (Fintype.card α)\"},\n {\"role\": \"user\", \"content\": \"Every finite division ring is a field.\"}]"}
{"text":"If each of two types can be mapped injectively into the other, then there is a bijection between them.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If the coequalizer of two morphisms is a monomorphism, then the two morphisms are equal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {C : Type u} [inst : CategoryTheory.Category C] {X Y : C} {f g : X ⟶ Y}\\n  [inst_1 : CategoryTheory.Limits.HasCoequalizer f g]\\n  [inst_2 : CategoryTheory.Mono (CategoryTheory.Limits.coequalizer.π f g)], f = g\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The induced algebra morphism from the quotient by the kernel is injective. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R₁ : Type u_1} {A : Type u_2} {B : Type u_3} [inst : CommSemiring R₁] [inst_1 : CommRing A] [inst_2 : CommRing B]\\n  [inst_3 : Algebra R₁ A] [inst_4 : Algebra R₁ B] (f : A →ₐ[R₁] B), Function.Injective ↑(Ideal.kerLiftAlg f)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If two maps are homotopic relative to a set, then they are homotopic. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u} {Y : Type v} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] {S : Set X} {f₀ f₁ : C(X, Y)},\\n  ContinuousMap.HomotopicRel f₀ f₁ S → ContinuousMap.Homotopic f₀ f₁\"},\n {\"role\": \"user\", \"content\": \"An epimorphism is surjective. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} {M : Type u_3} {R₂ : Type u_2} {M₂ : Type u_4} [inst : Ring R] [inst_1 : Ring R₂]\\n  [inst_2 : AddCommMonoid M] [inst_3 : AddCommGroup M₂] [inst_4 : Module R M] [inst_5 : Module R₂ M₂] {τ₁₂ : R →+* R₂}\\n  [inst_6 : RingHomSurjective τ₁₂] {f : M →ₛₗ[τ₁₂] M₂},\\n  (∀ (u v : M₂ →ₗ[R₂] M₂ ⧸ LinearMap.range f), LinearMap.comp u f = LinearMap.comp v f → u = v) → LinearMap.range f = ⊤\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The dimensions of the domain and range of an injective linear map are equal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u} {V : Type v} [inst : Ring K] [inst_1 : AddCommGroup V] [inst_2 : Module K V] {V₂ : Type v'}\\n  [inst_3 : AddCommGroup V₂] [inst_4 : Module K V₂] {f : V →ₗ[K] V₂},\\n  Function.Injective ↑f → FiniteDimensional.finrank K { x // x ∈ LinearMap.range f } = FiniteDimensional.finrank K V\"},\n {\"role\": \"user\",\n  \"content\": \"The induced map from the quotient by the kernel is injective. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} {S : Type v} [inst : CommRing R] [inst_1 : CommRing S] (f : R →+* S),\\n  Function.Injective ↑(RingHom.kerLift f)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If two local homeomorphisms are equivalent, so are their inverses \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} {β : Type u_2} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] {e e' : LocalHomeomorph α β},\\n  e ≈ e' → LocalHomeomorph.symm e ≈ LocalHomeomorph.symm e'\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If the equalizer of two morphisms is an epimorphism, then the two morphisms are equal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {C : Type u} [inst : CategoryTheory.Category C] {X Y : C} {f g : X ⟶ Y}\\n  [inst_1 : CategoryTheory.Limits.HasEqualizer f g]\\n  [inst_2 : CategoryTheory.Epi (CategoryTheory.Limits.equalizer.ι f g)], f = g\"},\n {\"role\": \"user\",\n  \"content\": \"The two coercions to functions are jointly injective. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {E : Sort u_1} {α : outParam (Sort u_2)} {β : outParam (Sort u_3)} [self : EquivLike E α β] (e g : E),\\n  EquivLike.coe e = EquivLike.coe g → EquivLike.inv e = EquivLike.inv g → e = g\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A scheme where the children of each set are pairwise disjoint induces an injective map. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {β : Type u_1} {α : Type u_2} {A : List β → Set α},\\n  CantorScheme.Disjoint A → Function.Injective (CantorScheme.inducedMap A).snd\"},\n {\"role\": \"user\",\n  \"content\": \"Composing with a surjective linear map is injective. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : Semiring R] {M : Type u_3} [inst_1 : AddCommMonoid M] [inst_2 : Module R M] {N : Type u_4}\\n  [inst_3 : AddCommMonoid N] [inst_4 : Module R N] {ι : Type u_5} {M₂ : Type u_2} [inst_5 : AddCommMonoid M₂]\\n  [inst_6 : Module R M₂] (f : M₂ →ₗ[R] M),\\n  Function.Surjective ↑f → Function.Injective fun g => AlternatingMap.compLinearMap g f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The map sending a congruence relation to its underlying binary relation is injective. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {M : Type u_1} [inst : Mul M] {c d : Con M}, Setoid.r = Setoid.r → c = d\"},\n {\"role\": \"user\",\n  \"content\":\n  \"On a finite-dimensional space, a linear map is injective if and only if it is surjective. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V]\\n  [inst_3 : FiniteDimensional K V] {f : V →ₗ[K] V}, Function.Injective ↑f ↔ Function.Surjective ↑f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"In any concrete category, injective morphisms are monomorphisms. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {C : Type u} [inst : CategoryTheory.Category C] [inst_1 : CategoryTheory.ConcreteCategory C] {X Y : C} (f : X ⟶ Y),\\n  Function.Injective ↑f → CategoryTheory.Mono f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"On a finite-dimensional space, an injective linear map is surjective. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V]\\n  [inst_3 : FiniteDimensional K V] {f : V →ₗ[K] V}, Function.Injective ↑f → Function.Surjective ↑f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The map sending a congruence relation to its underlying equivalence relation is injective. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {M : Type u_1} [inst : Mul M] {c d : Con M}, c.toSetoid = d.toSetoid → c = d\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A morphism in `Type u` is an isomorphism if and only if it is bijective. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X Y : Type u} (f : X ⟶ Y), CategoryTheory.IsIso f ↔ Function.Bijective f\"},\n {\"role\": \"user\", \"content\": \"A monomorphism is injective. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} {R₂ : Type u_2} {M : Type u_3} {M₂ : Type u_4} [inst : Semiring R] [inst_1 : Semiring R₂]\\n  [inst_2 : AddCommMonoid M] [inst_3 : AddCommMonoid M₂] [inst_4 : Module R M] [inst_5 : Module R₂ M₂] {τ₁₂ : R →+* R₂}\\n  {f : M →ₛₗ[τ₁₂] M₂},\\n  (∀ (u v : { x // x ∈ LinearMap.ker f } →ₗ[R] M), LinearMap.comp f u = LinearMap.comp f v → u = v) →\\n    LinearMap.ker f = ⊥\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If a bounded linear map is a bijection, then its inverse is also a bounded linear map. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {𝕜 : Type u_1} [inst : NontriviallyNormedField 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] {F : Type u_3} [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F]\\n  [inst_5 : CompleteSpace F] [inst_6 : CompleteSpace E] (e : E ≃ₗ[𝕜] F),\\n  Continuous ↑e → Continuous ↑(LinearEquiv.symm e)\"},\n {\"role\": \"user\",\n  \"content\": \"If a linear map is surjective, then its dual is injective. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} [inst : CommSemiring R] {M₁ : Type v} {M₂ : Type v'} [inst_1 : AddCommMonoid M₁] [inst_2 : Module R M₁]\\n  [inst_3 : AddCommMonoid M₂] [inst_4 : Module R M₂] {f : M₁ →ₗ[R] M₂},\\n  Function.Surjective ↑f → Function.Injective ↑(LinearMap.dualMap f)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If each of two types can be mapped injectively into the other, then there is a bijection between them.\"}]"}
{"text":"A finite graph in which every pair of vertices have precisely one common neighbour contains a vertex that is adjacent to all other vertices.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Any two points in a path-connected space must be joined by a continuous path. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] [self : PathConnectedSpace X] (x y : X), Joined x y\"},\n {\"role\": \"user\",\n  \"content\":\n  \"In a locally compact space every point has a compact neighborhood. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] (x : α), ∃ K, IsCompact K ∧ K ∈ nhds x\"},\n {\"role\": \"user\", \"content\": \"Any element commutes with itself. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {S : Type u_1} [inst : Mul S] (a : S), Commute a a\"},\n {\"role\": \"user\",\n  \"content\":\n  \"This lemma characterizes discrete topological spaces as those whose singletons are\\nneighbourhoods. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α], DiscreteTopology α ↔ ∀ (x : α), nhds x = pure x\"},\n {\"role\": \"user\",\n  \"content\": \"A space with discrete topology is a locally connected space. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (α : Type u_1) [inst : TopologicalSpace α] [inst_1 : DiscreteTopology α], LocallyConnectedSpace α\"},\n {\"role\": \"user\", \"content\": \"A finite union of finsets is finite. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} (f : α → Finset β), Set.Finite (Set.range f) → Set.Finite (⋃ (a : α), ↑(f a))\"},\n {\"role\": \"user\", \"content\": \"Graph is acyclic. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u} {G : SimpleGraph V}, SimpleGraph.IsTree G → SimpleGraph.IsAcyclic G\"},\n {\"role\": \"user\", \"content\": \"Graph is connected. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u} {G : SimpleGraph V}, SimpleGraph.IsTree G → SimpleGraph.Connected G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Every finite subset of a linearly independent set is linearly independent. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_2} {M : Type u_1} [inst : Semiring R] [inst_1 : AddCommMonoid M] [inst_2 : Module R M] (s : Set M),\\n  LinearIndependent R Subtype.val → ∀ (t : Finset ↑s), LinearIndependent R Subtype.val\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The maximum degree in the graph is at least the degree of any particular vertex. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u} (G : SimpleGraph V) [inst : Fintype V] [inst_1 : DecidableRel G.Adj] (v : V),\\n  SimpleGraph.degree G v ≤ SimpleGraph.maxDegree G\"},\n {\"role\": \"user\",\n  \"content\": \"A point with a finite neighborhood has to be isolated. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : T1Space α] (x : α) {s : Set α},\\n  s ∈ nhds x → Set.Finite s → IsOpen {x}\"},\n {\"role\": \"user\",\n  \"content\": \"A clique is a set of vertices whose induced graph is complete. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} (G : SimpleGraph α) {s : Set α}, SimpleGraph.IsClique G s ↔ SimpleGraph.induce s G = ⊤\"},\n {\"role\": \"user\",\n  \"content\":\n  \"In an infinite graph, the set of components out of a finite set is nonempty. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u} (G : SimpleGraph V) [inst : Infinite V] (K : Finset V), Nonempty (SimpleGraph.ComponentCompl G ↑K)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Every finite subset of an algebraically independent set is algebraically independent. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_2} {A : Type u_1} [inst : CommRing R] [inst_1 : CommRing A] [inst_2 : Algebra R A] (s : Set A),\\n  AlgebraicIndependent R Subtype.val → ∀ (t : Finset ↑s), AlgebraicIndependent R Subtype.val\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The minimum degree in the graph is at most the degree of any particular vertex. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u} (G : SimpleGraph V) [inst : Fintype V] [inst_1 : DecidableRel G.Adj] (v : V),\\n  SimpleGraph.minDegree G ≤ SimpleGraph.degree G v\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A locally finite preconnected infinite graph has at least one end. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type} (G : SimpleGraph V) [inst : SimpleGraph.LocallyFinite G] [inst : Fact (SimpleGraph.Preconnected G)]\\n  [inst : Infinite V], Set.Nonempty (SimpleGraph.end G)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A finite graph in which every pair of vertices have precisely one common neighbour contains a vertex that is adjacent to all other vertices.\"}]"}
{"text":"The number of partitions with odd parts is equal to the number of partitions with distinct parts.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A product can be partitioned into a product of products, each equivalent under a setoid. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {β : Type u} {α : Type v} {s : Finset α} {f : α → β} [inst : CommMonoid β] (R : Setoid α)\\n  [inst_1 : DecidableRel Setoid.r],\\n  (Finset.prod s fun x => f x) =\\n    Finset.prod (Finset.image Quotient.mk'' s) fun xbar =>\\n      Finset.prod (Finset.filter (fun x => Quotient.mk R x = xbar) s) fun y => f y\"},\n {\"role\": \"user\",\n  \"content\": \"Two holors are equal if all their slices are equal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type} {d : ℕ} {ds : List ℕ} (x y : Holor α (d :: ds)), Holor.slice x = Holor.slice y → x = y\"},\n {\"role\": \"user\",\n  \"content\": \"Every finite convergent corresponds to a rational number. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u_1} [inst : LinearOrderedField K] [inst_1 : FloorRing K] (v : K) (n : ℕ),\\n  ∃ q, GeneralizedContinuedFraction.convergents (GeneralizedContinuedFraction.of v) n = ↑q\"},\n {\"role\": \"user\",\n  \"content\": \"Every nonzero natural number has a unique prime factorization \"},\n {\"role\": \"assistant\", \"content\": \"Set.InjOn Nat.factorization {x | x ≠ 0}\"},\n {\"role\": \"user\",\n  \"content\":\n  \"All elements of a partition of α are the equivalence class of some y ∈ α. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} {c : Set (Set α)} (hc : Setoid.IsPartition c) {s : Set α},\\n  s ∈ c → ∃ y, s = {x | Setoid.Rel (Setoid.mkClasses c (_ : ∀ (a : α), ∃! b x, a ∈ b)) x y}\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The finite field `F` has even cardinality iff it has characteristic `2`. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {F : Type u_1} [inst : Field F] [inst_1 : Fintype F], ringChar F = 2 ↔ Fintype.card F % 2 = 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If x ∈ α is in 2 elements of a set of sets partitioning α, those 2 sets are equal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} {c : Set (Set α)},\\n  (∀ (a : α), ∃! b x, a ∈ b) → ∀ {x : α} {b b' : Set α}, b ∈ c → x ∈ b → b' ∈ c → x ∈ b' → b = b'\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If we can partition a product into subsets that cancel out, then the whole product cancels. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {β : Type u} {α : Type v} {s : Finset α} {f : α → β} [inst : CommMonoid β] (R : Setoid α)\\n  [inst_1 : DecidableRel Setoid.r],\\n  (∀ (x : α), x ∈ s → (Finset.prod (Finset.filter (fun y => y ≈ x) s) fun a => f a) = 1) →\\n    (Finset.prod s fun x => f x) = 1\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Two natural numbers are equal if and only if they have the same multiples. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {m n : ℕ}, (∀ (a : ℕ), m ∣ a ↔ n ∣ a) ↔ m = n\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Distinct elements of a set of sets partitioning α are disjoint. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} {c : Set (Set α)}, (∀ (a : α), ∃! b x, a ∈ b) → Set.PairwiseDisjoint c id\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Two natural numbers are equal if and only if they have the same divisors. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {m n : ℕ}, (∀ (a : ℕ), a ∣ m ↔ a ∣ n) ↔ m = n\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If we can partition a sum into subsets that cancel out, then the whole sum cancels.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {β : Type u} {α : Type v} {s : Finset α} {f : α → β} [inst : AddCommMonoid β] (R : Setoid α)\\n  [inst_1 : DecidableRel Setoid.r],\\n  (∀ (x : α), x ∈ s → (Finset.sum (Finset.filter (fun y => y ≈ x) s) fun a => f a) = 0) →\\n    (Finset.sum s fun x => f x) = 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The indices of `Quotient.out'` and `IndexedPartition.out` are equal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {ι : Type u_1} {α : Type u_2} {s : ι → Set α} (hs : IndexedPartition s) (x : IndexedPartition.Quotient hs),\\n  IndexedPartition.index hs (Quotient.out' x) = IndexedPartition.index hs (↑(IndexedPartition.out hs) x)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A sum can be partitioned into a sum of sums, each equivalent under a setoid.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {β : Type u} {α : Type v} {s : Finset α} {f : α → β} [inst : AddCommMonoid β] (R : Setoid α)\\n  [inst_1 : DecidableRel Setoid.r],\\n  (Finset.sum s fun x => f x) =\\n    Finset.sum (Finset.image Quotient.mk'' s) fun xbar =>\\n      Finset.sum (Finset.filter (fun x => Quotient.mk R x = xbar) s) fun y => f y\"},\n {\"role\": \"user\",\n  \"content\": \"The convolution of two even functions is also even. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {𝕜 : Type u𝕜} {G : Type uG} {E : Type uE} {E' : Type uE'} {F : Type uF} [inst : NormedAddCommGroup E]\\n  [inst_1 : NormedAddCommGroup E'] [inst_2 : NormedAddCommGroup F] {f : G → E} {g : G → E'} {x : G}\\n  [inst_3 : NontriviallyNormedField 𝕜] [inst_4 : NormedSpace 𝕜 E] [inst_5 : NormedSpace 𝕜 E'] [inst_6 : NormedSpace 𝕜 F]\\n  (L : E →L[𝕜] E' →L[𝕜] F) [inst_7 : MeasurableSpace G] {μ : MeasureTheory.Measure G} [inst_8 : NormedSpace ℝ F]\\n  [inst_9 : AddCommGroup G] [inst_10 : MeasureTheory.Measure.IsAddLeftInvariant μ]\\n  [inst_11 : MeasureTheory.Measure.IsNegInvariant μ] [inst_12 : MeasurableNeg G] [inst_13 : MeasurableAdd G],\\n  (∀ᵐ (x : G) ∂μ, f (-x) = f x) → (∀ᵐ (x : G) ∂μ, g (-x) = g x) → convolution f g L (-x) = convolution f g L x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The increment partition has energy greater than the original one by a known fixed amount. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : Fintype α] {P : Finpartition Finset.univ} {G : SimpleGraph α} {ε : ℝ} [inst_1 : Nonempty α]\\n  (hP : Finpartition.IsEquipartition P),\\n  7 ≤ Finset.card P.parts →\\n    100 < 4 ^ Finset.card P.parts * ε ^ 5 →\\n      Finset.card P.parts * 16 ^ Finset.card P.parts ≤ Fintype.card α →\\n        ¬Finpartition.IsUniform P G ε →\\n          ε ≤ 1 →\\n            ↑(Finpartition.energy P G) + ε ^ 5 / 4 ≤ ↑(Finpartition.energy (SzemerediRegularity.increment hP G ε) G)\"},\n {\"role\": \"user\", \"content\": \"Equivalence classes partition the type. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {α : Type u_1} {r : Setoid α} (a : α), ∃! b x, a ∈ b\"},\n {\"role\": \"user\",\n  \"content\": \"A finpartition gives rise to a setoid partition \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} (f : Finpartition Set.univ), Setoid.IsPartition ↑f.parts\"},\n {\"role\": \"user\", \"content\": \"The partition is supremum-independent \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : Lattice α] [inst_1 : OrderBot α] {a : α} (self : Finpartition a), Finset.SupIndep self.parts id\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The increment partition has a prescribed (very big) size in terms of the original partition. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : Fintype α] {P : Finpartition Finset.univ} {hP : Finpartition.IsEquipartition P}\\n  {G : SimpleGraph α} {ε : ℝ},\\n  Finset.card P.parts * 16 ^ Finset.card P.parts ≤ Fintype.card α →\\n    ¬Finpartition.IsUniform P G ε →\\n      Finset.card (SzemerediRegularity.increment hP G ε).parts = SzemerediRegularity.stepBound (Finset.card P.parts)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The number of partitions with odd parts is equal to the number of partitions with distinct parts.\"}]"}
{"text":"Every non-empty poset in which every chain has an upper bound contains a maximal element.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\": \"Adding a point to a set preserves its boundedness above. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {γ : Type w} [inst : SemilatticeSup γ] (a : γ) {s : Set γ}, BddAbove (insert a s) ↔ BddAbove s\"},\n {\"role\": \"user\", \"content\": \"Every Cauchy sequence has a limit. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : LinearOrderedField α] {β : Type u_2} [inst_1 : Ring β] {abv : β → α}\\n  [inst_2 : IsAbsoluteValue abv] [self : CauSeq.IsComplete β abv] (s : CauSeq β abv), ∃ b, s ≈ CauSeq.const abv b\"},\n {\"role\": \"user\",\n  \"content\": \"The intrinsic interior of a nonempty convex set is nonempty. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u_1} [inst : NormedAddCommGroup V] [inst_1 : NormedSpace ℝ V] [inst_2 : FiniteDimensional ℝ V] {s : Set V},\\n  Convex ℝ s → Set.Nonempty s → Set.Nonempty (intrinsicInterior ℝ s)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"In a (nontrivial) complex Banach algebra, every element has nonempty spectrum. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {A : Type u_1} [inst : NormedRing A] [inst_1 : NormedAlgebra ℂ A] [inst_2 : CompleteSpace A] [inst_3 : Nontrivial A]\\n  (a : A), Set.Nonempty (spectrum ℂ a)\"},\n {\"role\": \"user\", \"content\": \"A nonempty convex set is connected. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {E : Type u_1} [inst : AddCommGroup E] [inst_1 : Module ℝ E] [inst_2 : TopologicalSpace E]\\n  [inst_3 : TopologicalAddGroup E] [inst_4 : ContinuousSMul ℝ E] {s : Set E},\\n  Convex ℝ s → Set.Nonempty s → IsConnected s\"},\n {\"role\": \"user\",\n  \"content\": \"Any element of a set is more than the set infimum. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [self : CompleteSemilatticeInf α] (s : Set α) (a : α), a ∈ s → sInf s ≤ a\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A sequentially compact set in a uniform space is totally bounded. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} [inst : UniformSpace X] {s : Set X}, IsSeqCompact s → TotallyBounded s\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The union of two sets is bounded above if and only if each of the sets is.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {γ : Type w} [inst : SemilatticeInf γ] {s t : Set γ}, BddBelow (s ∪ t) ↔ BddBelow s ∧ BddBelow t\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Any uncountable closed set in a second countable space contains a nonempty perfect subset.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] {C : Set α} [inst_1 : TopologicalSpace.SecondCountableTopology α],\\n  IsClosed C → ¬Set.Countable C → ∃ D, Perfect D ∧ Set.Nonempty D ∧ D ⊆ C\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The union of two sets is bounded above if and only if each of the sets is. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {γ : Type w} [inst : SemilatticeSup γ] {s t : Set γ}, BddAbove (s ∪ t) ↔ BddAbove s ∧ BddAbove t\"},\n {\"role\": \"user\", \"content\": \"A finite set is bounded above.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : SemilatticeSup α] [inst_1 : Nonempty α] {s : Set α}, Set.Finite s → BddAbove s\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A finite union of sets which are all bounded above is still bounded above.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} [inst : SemilatticeSup α] [inst_1 : Nonempty α] {I : Set β} {S : β → Set α},\\n  Set.Finite I → (BddAbove (⋃ (i : β) (_ : i ∈ I), S i) ↔ ∀ (i : β), i ∈ I → BddAbove (S i))\"},\n {\"role\": \"user\",\n  \"content\": \"When there is a global maximum, every set is bounded above. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : Preorder α] [inst_1 : OrderTop α] (s : Set α), BddAbove s\"},\n {\"role\": \"user\", \"content\": \"Any upper bound is more than the set supremum. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [self : CompleteBooleanAlgebra α] (s : Set α) (a : α), (∀ (b : α), b ∈ s → b ≤ a) → sSup s ≤ a\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Every chain is contained in a maximal chain. This generalizes Hausdorff's maximality principle.\\n\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} {r : α → α → Prop} {c : Set α}, IsChain r c → ∃ M, IsMaxChain r M ∧ c ⊆ M\"},\n {\"role\": \"user\",\n  \"content\":\n  \"**Zorn's lemma**\\n\\nIf every chain has an upper bound, then there exists a maximal element. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} {r : α → α → Prop},\\n  (∀ (c : Set α), IsChain r c → ∃ ub, ∀ (a : α), a ∈ c → r a ub) →\\n    (∀ {a b c : α}, r a b → r b c → r a c) → ∃ m, ∀ (a : α), r m a → r a m\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Every non-empty poset in which every chain has an upper bound contains a maximal element.\"}]"}
{"text":"A group whose automorphism group is cyclic is Abelian.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\": \"Subgroups of torsion-free groups are torsion-free. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G], Monoid.IsTorsionFree G → ∀ (H : Subgroup G), Monoid.IsTorsionFree { x // x ∈ H }\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Any Haar measure is invariant under inversion in an abelian group. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : CommGroup G] [inst_1 : TopologicalSpace G] [inst_2 : TopologicalGroup G] [inst_3 : T2Space G]\\n  [inst_4 : MeasurableSpace G] [inst_5 : BorelSpace G] [inst_6 : TopologicalSpace.SecondCountableTopology G]\\n  (μ : MeasureTheory.Measure G) [inst_7 : MeasureTheory.Measure.IsHaarMeasure μ] [inst_8 : LocallyCompactSpace G],\\n  MeasureTheory.Measure.IsInvInvariant μ\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Subgroups of additive torsion-free groups are additively torsion-free.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddGroup G],\\n  AddMonoid.IsTorsionFree G → ∀ (H : AddSubgroup G), AddMonoid.IsTorsionFree { x // x ∈ H }\"},\n {\"role\": \"user\",\n  \"content\": \"Abelian groups have nilpotency class at most one \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : CommGroup G], Group.nilpotencyClass G ≤ 1\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The torsion submonoid of an abelian group equals the torsion subgroup as a submonoid. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (G : Type u_1) [inst : CommGroup G], CommMonoid.torsion G = (CommGroup.torsion G).toSubmonoid\"},\n {\"role\": \"user\", \"content\": \"An abelian category is idempotent complete. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (D : Type u_1) [inst : CategoryTheory.Category D] [inst_1 : CategoryTheory.Abelian D],\\n  CategoryTheory.IsIdempotentComplete D\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The right regular action of an additive group on itself is transitive.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddGroup G], AddAction.IsPretransitive Gᵃᵒᵖ G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Subgroups of additive torsion groups are additive torsion groups.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddGroup G], AddMonoid.IsTorsion G → ∀ (H : AddSubgroup G), AddMonoid.IsTorsion { x // x ∈ H }\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A group is finitely generated if and only if it is finitely generated as a monoid. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {G : Type u_1} [inst : Group G], Group.FG G ↔ Monoid.FG G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The quotient by the center of a group of cardinality `p ^ 2` is cyclic. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {p : ℕ} {G : Type u_1} [inst : Group G] [inst_1 : Fintype G] [inst_2 : Fact (Nat.Prime p)],\\n  Fintype.card G = p ^ 2 → IsCyclic (G ⧸ Subgroup.center G)\"},\n {\"role\": \"user\",\n  \"content\": \"Subgroups of torsion groups are torsion groups. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G], Monoid.IsTorsion G → ∀ (H : Subgroup G), Monoid.IsTorsion { x // x ∈ H }\"},\n {\"role\": \"user\", \"content\": \"Finite groups are torsion groups. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] [inst_1 : Finite G], Monoid.IsTorsion G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The product of group homomorphisms is a group homomorphism if the target is commutative. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} {β : Type u_2} [inst : Group α] [inst_1 : CommGroup β] {f g : α → β},\\n  IsGroupHom f → IsGroupHom g → IsGroupHom fun a => f a * g a\"},\n {\"role\": \"user\", \"content\": \"A group homomorphism is a monoid homomorphism. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} [inst : Group α] [inst_1 : Group β] {f : α → β}, IsGroupHom f → IsMonoidHom f\"},\n {\"role\": \"user\", \"content\": \"Every subgroup of `ℤ` is cyclic. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ (H : AddSubgroup ℤ), ∃ a, H = AddSubgroup.closure {a}\"},\n {\"role\": \"user\", \"content\": \"Abelian groups are nilpotent \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {G : Type u_1} [inst : CommGroup G], Group.IsNilpotent G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A finite subgroup of the units of an integral domain is cyclic. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsDomain R] (S : Subgroup Rˣ) [inst_2 : Finite { x // x ∈ S }],\\n  IsCyclic { x // x ∈ S }\"},\n {\"role\": \"user\", \"content\": \"A finite group of prime order is cyclic.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : AddGroup α] [inst_1 : Fintype α] {p : ℕ} [hp : Fact (Nat.Prime p)],\\n  Fintype.card α = p → IsAddCyclic α\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A finite subgroup of the unit group of an integral domain is cyclic. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_2} {G : Type u_1} [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : Group G] [inst_3 : Finite G]\\n  (f : G →* R), Function.Injective ↑f → IsCyclic G\"},\n {\"role\": \"user\", \"content\": \"A finite group of prime order is cyclic. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : Group α] [inst_1 : Fintype α] {p : ℕ} [hp : Fact (Nat.Prime p)], Fintype.card α = p → IsCyclic α\"},\n {\"role\": \"user\",\n  \"content\": \"A group whose automorphism group is cyclic is Abelian.\"}]"}
{"text":"A uniformly continuous function of a uniformly continuous function is uniformly continuous.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\", \"content\": \"Uniform equicontinuity implies equicontinuity. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {ι : Type u_1} {α : Type u_2} {β : Type u_3} [inst : UniformSpace α] [inst_1 : UniformSpace β] {F : ι → β → α},\\n  UniformEquicontinuous F → Equicontinuous F\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A constant sequence of functions is uniformly integrable in the probability sense. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_2} {β : Type u_1} {ι : Type u_3} {m : MeasurableSpace α} {μ : MeasureTheory.Measure α}\\n  [inst : NormedAddCommGroup β] {p : ENNReal} {g : α → β},\\n  1 ≤ p → p ≠ ⊤ → MeasureTheory.Memℒp g p → MeasureTheory.UniformIntegrable (fun x => g) p μ\"},\n {\"role\": \"user\",\n  \"content\": \"Each function of an equicontinuous family is continuous. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {ι : Type u_1} {X : Type u_2} {α : Type u_3} [inst : TopologicalSpace X] [inst_1 : UniformSpace α] {F : ι → X → α},\\n  Equicontinuous F → ∀ (i : ι), Continuous (F i)\"},\n {\"role\": \"user\",\n  \"content\": \"A continuous function is bounded above on a compact set. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} {β : Type u_2} [inst : LinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderClosedTopology α]\\n  [inst_3 : TopologicalSpace β] [inst_4 : Nonempty α] {f : β → α} {K : Set β},\\n  IsCompact K → ContinuousOn f K → BddAbove (f '' K)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A sequentially continuous function defined on a sequential space is continuous. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] [inst_2 : SequentialSpace X]\\n  {f : X → Y}, SeqContinuous f → Continuous f\"},\n {\"role\": \"user\", \"content\": \"Uniform continuity of the function \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} {β : Type u_2} [inst : UniformSpace α] [inst_1 : UniformSpace β] (self : α ≃ᵤ β),\\n  UniformContinuous self.toFun\"},\n {\"role\": \"user\", \"content\": \"A constant function is uniformly integrable. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_2} {β : Type u_1} {ι : Type u_3} {m : MeasurableSpace α} (μ : MeasureTheory.Measure α)\\n  [inst : NormedAddCommGroup β] {p : ENNReal} {g : α → β},\\n  1 ≤ p → p ≠ ⊤ → MeasureTheory.Memℒp g p → MeasureTheory.UnifIntegrable (fun x => g) p μ\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A function which can be locally uniformly approximated by continuous functions is continuous. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} [inst : UniformSpace β] {f : α → β} [inst_1 : TopologicalSpace α],\\n  (∀ (x : α) (u : Set (β × β)),\\n      u ∈ uniformity β → ∃ t, t ∈ nhds x ∧ ∃ F, ContinuousAt F x ∧ ∀ (y : α), y ∈ t → (f y, F y) ∈ u) →\\n    Continuous f\"},\n {\"role\": \"user\",\n  \"content\": \"A locally uniform limit of continuous functions is continuous. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {p : Filter ι}\\n  [inst_1 : TopologicalSpace α],\\n  TendstoLocallyUniformly F f p → (∀ᶠ (n : ι) in p, Continuous (F n)) → ∀ [inst_2 : Filter.NeBot p], Continuous f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A function which can be uniformly approximated by continuous functions is continuous. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} [inst : UniformSpace β] {f : α → β} [inst_1 : TopologicalSpace α],\\n  (∀ (u : Set (β × β)), u ∈ uniformity β → ∃ F, Continuous F ∧ ∀ (y : α), (f y, F y) ∈ u) → Continuous f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Each function of a uniformly equicontinuous family is uniformly continuous. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {ι : Type u_1} {α : Type u_2} {β : Type u_3} [inst : UniformSpace α] [inst_1 : UniformSpace β] {F : ι → β → α},\\n  UniformEquicontinuous F → ∀ (i : ι), UniformContinuous (F i)\"},\n {\"role\": \"user\",\n  \"content\": \"A uniform limit of continuous functions is continuous. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {p : Filter ι}\\n  [inst_1 : TopologicalSpace α],\\n  TendstoUniformly F f p → (∀ᶠ (n : ι) in p, Continuous (F n)) → ∀ [inst_2 : Filter.NeBot p], Continuous f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A uniformly continuous function of a uniformly continuous function is uniformly continuous.\"}]"}
{"text":"A uniformly continuous function of a uniformly continuous function is uniformly continuous.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\", \"content\": \"Uniform equicontinuity implies equicontinuity. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {ι : Type u_1} {α : Type u_2} {β : Type u_3} [inst : UniformSpace α] [inst_1 : UniformSpace β] {F : ι → β → α},\\n  UniformEquicontinuous F → Equicontinuous F\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A constant sequence of functions is uniformly integrable in the probability sense. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_2} {β : Type u_1} {ι : Type u_3} {m : MeasurableSpace α} {μ : MeasureTheory.Measure α}\\n  [inst : NormedAddCommGroup β] {p : ENNReal} {g : α → β},\\n  1 ≤ p → p ≠ ⊤ → MeasureTheory.Memℒp g p → MeasureTheory.UniformIntegrable (fun x => g) p μ\"},\n {\"role\": \"user\",\n  \"content\": \"Each function of an equicontinuous family is continuous. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {ι : Type u_1} {X : Type u_2} {α : Type u_3} [inst : TopologicalSpace X] [inst_1 : UniformSpace α] {F : ι → X → α},\\n  Equicontinuous F → ∀ (i : ι), Continuous (F i)\"},\n {\"role\": \"user\",\n  \"content\": \"A continuous function is bounded above on a compact set. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} {β : Type u_2} [inst : LinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderClosedTopology α]\\n  [inst_3 : TopologicalSpace β] [inst_4 : Nonempty α] {f : β → α} {K : Set β},\\n  IsCompact K → ContinuousOn f K → BddAbove (f '' K)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A sequentially continuous function defined on a sequential space is continuous. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] [inst_2 : SequentialSpace X]\\n  {f : X → Y}, SeqContinuous f → Continuous f\"},\n {\"role\": \"user\", \"content\": \"Uniform continuity of the function \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} {β : Type u_2} [inst : UniformSpace α] [inst_1 : UniformSpace β] (self : α ≃ᵤ β),\\n  UniformContinuous self.toFun\"},\n {\"role\": \"user\", \"content\": \"A constant function is uniformly integrable. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_2} {β : Type u_1} {ι : Type u_3} {m : MeasurableSpace α} (μ : MeasureTheory.Measure α)\\n  [inst : NormedAddCommGroup β] {p : ENNReal} {g : α → β},\\n  1 ≤ p → p ≠ ⊤ → MeasureTheory.Memℒp g p → MeasureTheory.UnifIntegrable (fun x => g) p μ\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A function which can be locally uniformly approximated by continuous functions is continuous. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} [inst : UniformSpace β] {f : α → β} [inst_1 : TopologicalSpace α],\\n  (∀ (x : α) (u : Set (β × β)),\\n      u ∈ uniformity β → ∃ t, t ∈ nhds x ∧ ∃ F, ContinuousAt F x ∧ ∀ (y : α), y ∈ t → (f y, F y) ∈ u) →\\n    Continuous f\"},\n {\"role\": \"user\",\n  \"content\": \"A locally uniform limit of continuous functions is continuous. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {p : Filter ι}\\n  [inst_1 : TopologicalSpace α],\\n  TendstoLocallyUniformly F f p → (∀ᶠ (n : ι) in p, Continuous (F n)) → ∀ [inst_2 : Filter.NeBot p], Continuous f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A function which can be uniformly approximated by continuous functions is continuous. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} [inst : UniformSpace β] {f : α → β} [inst_1 : TopologicalSpace α],\\n  (∀ (u : Set (β × β)), u ∈ uniformity β → ∃ F, Continuous F ∧ ∀ (y : α), (f y, F y) ∈ u) → Continuous f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Each function of a uniformly equicontinuous family is uniformly continuous. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {ι : Type u_1} {α : Type u_2} {β : Type u_3} [inst : UniformSpace α] [inst_1 : UniformSpace β] {F : ι → β → α},\\n  UniformEquicontinuous F → ∀ (i : ι), UniformContinuous (F i)\"},\n {\"role\": \"user\",\n  \"content\": \"A uniform limit of continuous functions is continuous. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {p : Filter ι}\\n  [inst_1 : TopologicalSpace α],\\n  TendstoUniformly F f p → (∀ᶠ (n : ι) in p, Continuous (F n)) → ∀ [inst_2 : Filter.NeBot p], Continuous f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A uniformly continuous function of a uniformly continuous function is uniformly continuous.\"}]"}
{"text":"A topological space is normal if and only if any two disjoint closed subsets can be separated by a continuous function.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"For any topological space `X`, its one point compactification is a compact space. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X], CompactSpace (OnePoint X)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The only open sets in the indiscrete topology are the empty set and the whole space. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {α : Type u_1} (U : Set α), IsOpen U ↔ U = ∅ ∨ U = Set.univ\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The intersection of two open compact subsets of a quasi-separated space is compact.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] [self : QuasiSeparatedSpace α] (U V : Set α),\\n  IsOpen U → IsCompact U → IsOpen V → IsCompact V → IsCompact (U ∩ V)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The product of a countable family of separable spaces is a separable space. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {ι : Type u_1} {X : ι → Type u_2} [inst : (i : ι) → TopologicalSpace (X i)]\\n  [inst_1 : ∀ (i : ι), TopologicalSpace.SeparableSpace (X i)] [inst_2 : Countable ι],\\n  TopologicalSpace.SeparableSpace ((i : ι) → X i)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A subspace is dense iff its topological closure is the entire space. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} {M : Type v} [inst : Semiring R] [inst_1 : TopologicalSpace M] [inst_2 : AddCommMonoid M]\\n  [inst_3 : Module R M] [inst_4 : ContinuousConstSMul R M] [inst_5 : ContinuousAdd M] {s : Submodule R M},\\n  Dense ↑s ↔ Submodule.topologicalClosure s = ⊤\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Any two points in a path-connected space must be joined by a continuous path. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] [self : PathConnectedSpace X] (x y : X), Joined x y\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A linear order with order topology is a completely normal Hausdorff topological space. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} [inst : LinearOrder X] [inst_1 : TopologicalSpace X] [inst : OrderTopology X], T5Space X\"},\n {\"role\": \"user\",\n  \"content\":\n  \"In a separable space, a family of nonempty disjoint open sets is countable. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [t : TopologicalSpace α] [inst : TopologicalSpace.SeparableSpace α] {ι : Type u_1} {s : ι → Set α}\\n  {a : Set ι},\\n  Set.PairwiseDisjoint a s →\\n    (∀ (i : ι), i ∈ a → IsOpen (s i)) → (∀ (i : ι), i ∈ a → Set.Nonempty (s i)) → Set.Countable a\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Any continuous function on compact Hausdorff spaces is a closed map. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {X Y : CompHaus} (f : X ⟶ Y), IsClosedMap ↑f\"},\n {\"role\": \"user\",\n  \"content\": \"The product of two separable spaces is a separable space. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [t : TopologicalSpace α] {β : Type u_1} [inst : TopologicalSpace β]\\n  [inst_1 : TopologicalSpace.SeparableSpace α] [inst_2 : TopologicalSpace.SeparableSpace β],\\n  TopologicalSpace.SeparableSpace (α × β)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Every two points in a Hausdorff space admit disjoint open neighbourhoods. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [self : T2Space α] (x y : α),\\n  x ≠ y → ∃ u v, IsOpen u ∧ IsOpen v ∧ x ∈ u ∧ y ∈ v ∧ Disjoint u v\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Two disjoint sets in a normal space admit disjoint neighbourhoods. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [self : NormalSpace α] (s t : Set α),\\n  IsClosed s → IsClosed t → Disjoint s t → SeparatedNhds s t\"},\n {\"role\": \"user\", \"content\": \"Finite topological spaces are compact. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : Finite α], CompactSpace α\"},\n {\"role\": \"user\",\n  \"content\": \"A space with discrete topology is a locally connected space. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (α : Type u_1) [inst : TopologicalSpace α] [inst_1 : DiscreteTopology α], LocallyConnectedSpace α\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A topological space with discrete topology is separable iff it is countable. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [t : TopologicalSpace α] [inst : DiscreteTopology α], TopologicalSpace.SeparableSpace α ↔ Countable α\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A topological space is normal if and only if any two disjoint closed subsets can be separated by a continuous function.\"}]"}
{"text":"If a function from the unit interval to itself has a point of period three, then it has points of all positive periods.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\", \"content\": \"The inner product is positive (semi)definite. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {𝕜 : Type u_1} {F : Type u_2} [inst : IsROrC 𝕜] [inst_1 : AddCommGroup F] [inst_2 : Module 𝕜 F]\\n  (self : InnerProductSpace.Core 𝕜 F) (x : F), 0 ≤ ↑IsROrC.re (inner x x)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If `f` sends two periodic points `x` and `y` of positive periods to the same point,\\nthen `x = y`. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} {f : α → α} {x y : α} {m n : ℕ},\\n  Function.IsPeriodicPt f m x → Function.IsPeriodicPt f n y → 0 < m → 0 < n → f x = f y → x = y\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Right multiplication by a positive element is strictly monotone. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [self : CanonicallyLinearOrderedSemifield α] (a b c : α), a < b → 0 < c → a * c < b * c\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If a point lies in the affine span of two points, those three points are collinear. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {k : Type u_2} {V : Type u_3} {P : Type u_1} [inst : DivisionRing k] [inst_1 : AddCommGroup V] [inst_2 : Module k V]\\n  [inst_3 : AddTorsor V P] {p₁ p₂ p₃ : P}, p₁ ∈ affineSpan k {p₂, p₃} → Collinear k {p₁, p₂, p₃}\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If three points are not collinear, the angle between them is positive. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\\n  [inst_3 : NormedAddTorsor V P] {p₁ p₂ p₃ : P}, ¬Collinear ℝ {p₁, p₂, p₃} → 0 < EuclideanGeometry.angle p₁ p₂ p₃\"},\n {\"role\": \"user\", \"content\": \"A continuous, periodic function is bounded. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : PseudoMetricSpace α] {f : ℝ → α} {c : ℝ},\\n  Function.Periodic f c → c ≠ 0 → Continuous f → Metric.Bounded (Set.range f)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If two functions are equal in the relevant interval, their interval integrals are also equal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] {f g : ℝ → E} {μ : MeasureTheory.Measure ℝ}\\n  {a b : ℝ}, Set.EqOn f g (Set.uIcc a b) → ∫ (x : ℝ) in a..b, f x ∂μ = ∫ (x : ℝ) in a..b, g x ∂μ\"},\n {\"role\": \"user\",\n  \"content\": \"If the angle between three points is π, they are collinear. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\\n  [inst_3 : NormedAddTorsor V P] {p₁ p₂ p₃ : P}, EuclideanGeometry.angle p₁ p₂ p₃ = Real.pi → Collinear ℝ {p₁, p₂, p₃}\"},\n {\"role\": \"user\", \"content\": \"Three points are coplanar. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (k : Type u_1) {V : Type u_2} {P : Type u_3} [inst : DivisionRing k] [inst_1 : AddCommGroup V] [inst_2 : Module k V]\\n  [inst_3 : AddTorsor V P] (p₁ p₂ p₃ : P), Coplanar k {p₁, p₂, p₃}\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If three points are not collinear, the sine of the angle between them is positive. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\\n  [inst_3 : NormedAddTorsor V P] {p₁ p₂ p₃ : P},\\n  ¬Collinear ℝ {p₁, p₂, p₃} → 0 < Real.sin (EuclideanGeometry.angle p₁ p₂ p₃)\"},\n {\"role\": \"user\",\n  \"content\": \"A continuous, periodic function has compact range. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {f : ℝ → α} {c : ℝ},\\n  Function.Periodic f c → c ≠ 0 → Continuous f → IsCompact (Set.range f)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Any three points in a cospherical set are affinely independent. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u_2} {P : Type u_1} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\\n  [inst_3 : NormedAddTorsor V P] {s : Set P},\\n  EuclideanGeometry.Cospherical s →\\n    ∀ {p₁ p₂ p₃ : P}, p₁ ∈ s → p₂ ∈ s → p₃ ∈ s → p₁ ≠ p₂ → p₁ ≠ p₃ → p₂ ≠ p₃ → AffineIndependent ℝ ![p₁, p₂, p₃]\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If three points lie in the affine span of two points, the first three points are collinear. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {k : Type u_2} {V : Type u_3} {P : Type u_1} [inst : DivisionRing k] [inst_1 : AddCommGroup V] [inst_2 : Module k V]\\n  [inst_3 : AddTorsor V P] {p₁ p₂ p₃ p₄ p₅ : P},\\n  p₁ ∈ affineSpan k {p₄, p₅} → p₂ ∈ affineSpan k {p₄, p₅} → p₃ ∈ affineSpan k {p₄, p₅} → Collinear k {p₁, p₂, p₃}\"},\n {\"role\": \"user\", \"content\": \"For the identity map, all points are periodic. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {α : Type u_1} (n : ℕ) (x : α), Function.IsPeriodicPt id n x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A fixed point of `f` is a periodic point of `f` of any prescribed period. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} {f : α → α} {x : α}, Function.IsFixedPt f x → ∀ (n : ℕ), Function.IsPeriodicPt f n x\"},\n {\"role\": \"user\", \"content\": \"Any point is a periodic point of period `0`. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} (f : α → α) (x : α), Function.IsPeriodicPt f 0 x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If a function from the unit interval to itself has a point of period three, then it has points of all positive periods.\"}]"}
{"text":"A terminal object in a category is unique up to unique isomorphism.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The (unique) isomorphism between the chosen terminal object and any other terminal object. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"{C : Type u₁} →\\n  [inst : CategoryTheory.Category C] →\\n    [inst_1 : CategoryTheory.Limits.HasTerminal C] → {P : C} → CategoryTheory.Limits.IsTerminal P → (⊤_ C ≅ P)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Any category with pullbacks and terminal object has binary products. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (C : Type u) [inst : CategoryTheory.Category C] [inst_1 : CategoryTheory.Limits.HasTerminal C]\\n  [inst_2 : CategoryTheory.Limits.HasPullbacks C], CategoryTheory.Limits.HasBinaryProducts C\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A strong mono category is a category in which every monomorphism is strong. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {C : Type u} [inst : CategoryTheory.Category C] [self : CategoryTheory.StrongMonoCategory C] {X Y : C} (f : X ⟶ Y)\\n  [inst_1 : CategoryTheory.Mono f], CategoryTheory.StrongMono f\"},\n {\"role\": \"user\",\n  \"content\": \"A nonzero epimorphism from a simple object is an isomorphism. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {C : Type u} [inst : CategoryTheory.Category C] [inst_1 : CategoryTheory.Abelian C] {X Y : C}\\n  [inst_2 : CategoryTheory.Simple X] {f : X ⟶ Y} [inst_3 : CategoryTheory.Epi f], f ≠ 0 → CategoryTheory.IsIso f\"},\n {\"role\": \"user\",\n  \"content\": \"A nonzero monomorphism to a simple object is an isomorphism. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {C : Type u} [inst : CategoryTheory.Category C] [inst_1 : CategoryTheory.Limits.HasZeroMorphisms C] {X Y : C}\\n  [inst_2 : CategoryTheory.Simple Y] {f : X ⟶ Y} [inst_3 : CategoryTheory.Mono f], f ≠ 0 → CategoryTheory.IsIso f\"},\n {\"role\": \"user\", \"content\": \"The category `D` has isomorphic objects equal \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {C : Type u₁} [inst : CategoryTheory.Category C] {D : Type u₂} [inst_1 : CategoryTheory.Category D]\\n  {F : CategoryTheory.Functor D C}, CategoryTheory.IsSkeletonOf C D F → CategoryTheory.Skeletal D\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A category in which coimage-image comparisons are all isomorphisms has images. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {C : Type u} [inst : CategoryTheory.Category C] [inst_1 : CategoryTheory.Preadditive C]\\n  [inst_2 : CategoryTheory.Limits.HasKernels C] [inst_3 : CategoryTheory.Limits.HasCokernels C]\\n  [inst_4 : ∀ {X Y : C} (f : X ⟶ Y), CategoryTheory.IsIso (CategoryTheory.Abelian.coimageImageComparison f)],\\n  CategoryTheory.Limits.HasImages C\"},\n {\"role\": \"user\",\n  \"content\": \"Any morphism from a terminal object is split mono. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {C : Type u₁} [inst : CategoryTheory.Category C] {X Y : C},\\n  CategoryTheory.Limits.IsTerminal X → ∀ (f : X ⟶ Y), CategoryTheory.IsSplitMono f\"},\n {\"role\": \"user\", \"content\": \"An abelian category is idempotent complete. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (D : Type u_1) [inst : CategoryTheory.Category D] [inst_1 : CategoryTheory.Abelian D],\\n  CategoryTheory.IsIdempotentComplete D\"},\n {\"role\": \"user\",\n  \"content\": \"A category with finite biproducts has a zero object. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (C : Type u) [inst : CategoryTheory.Category C] [inst_1 : CategoryTheory.Limits.HasZeroMorphisms C]\\n  [inst_2 : CategoryTheory.Limits.HasFiniteBiproducts C], CategoryTheory.Limits.HasZeroObject C\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If there are zero morphisms, any terminal object is a zero object. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {C : Type u} [inst : CategoryTheory.Category C] [inst_1 : CategoryTheory.Limits.HasZeroMorphisms C]\\n  [inst_2 : CategoryTheory.Limits.HasTerminal C], CategoryTheory.Limits.HasZeroObject C\"},\n {\"role\": \"user\", \"content\": \"Any morphism from a terminal object is mono. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {C : Type u₁} [inst : CategoryTheory.Category C] {X Y : C},\\n  CategoryTheory.Limits.IsTerminal X → ∀ (f : X ⟶ Y), CategoryTheory.Mono f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The subcategory of subterminal objects is an exponential ideal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {C : Type u₁} [inst : CategoryTheory.Category C] [inst_1 : CategoryTheory.Limits.HasFiniteProducts C]\\n  [inst_2 : CategoryTheory.CartesianClosed C], CategoryTheory.ExponentialIdeal (CategoryTheory.subterminalInclusion C)\"},\n {\"role\": \"user\",\n  \"content\": \"Any two morphisms to a terminal object are equal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {C : Type u₁} [inst : CategoryTheory.Category C] {X Y : C},\\n  CategoryTheory.Limits.IsTerminal X → ∀ (f g : Y ⟶ X), f = g\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A terminal object in a category is unique up to unique isomorphism.\"}]"}
{"text":"The complement of the union of two sets is the intersection of their complements.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The supremum of two subspaces is equal to the span of their union. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u_2} {V : Type u_1} [inst : Field K] [inst_1 : AddCommGroup V] [inst_2 : Module K V] (S T : Set (ℙ K V)),\\n  Projectivization.Subspace.span (S ∪ T) = Projectivization.Subspace.span S ⊔ Projectivization.Subspace.span T\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The union of all sets in a compact exhaustion equals the entire space. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] (self : CompactExhaustion X),\\n  ⋃ (n : ℕ), CompactExhaustion.toFun self n = Set.univ\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The union of two sets is bounded above if and only if each of the sets is.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {γ : Type w} [inst : SemilatticeInf γ] {s t : Set γ}, BddBelow (s ∪ t) ↔ BddBelow s ∧ BddBelow t\"},\n {\"role\": \"user\",\n  \"content\": \"The span of a union of sets is the sup of their spans. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (k : Type u_2) (V : Type u_3) {P : Type u_1} [inst : Ring k] [inst_1 : AddCommGroup V] [inst_2 : Module k V]\\n  [S : AddTorsor V P] (s t : Set P), affineSpan k (s ∪ t) = affineSpan k s ⊔ affineSpan k t\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The intersection of a disjoint covering by two open sets of a clopen set will be clopen. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {Z a b : Set α},\\n  IsClopen Z → Z ⊆ a ∪ b → IsOpen a → IsOpen b → Disjoint a b → IsClopen (Z ∩ a)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If two sets intersect, the diameter of the union is bounded by the sum of the diameters. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : PseudoMetricSpace α] {s t : Set α},\\n  Set.Nonempty (s ∩ t) → Metric.diam (s ∪ t) ≤ Metric.diam s + Metric.diam t\"},\n {\"role\": \"user\",\n  \"content\": \"The disjoint union of two compact spaces is compact. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] [inst_2 : CompactSpace α]\\n  [inst_3 : CompactSpace β], CompactSpace (α ⊕ β)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The union of two sets is bounded above if and only if each of the sets is. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {γ : Type w} [inst : SemilatticeSup γ] {s t : Set γ}, BddAbove (s ∪ t) ↔ BddAbove s ∧ BddAbove t\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The set difference of a compact set and an open set is a compact set. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {s t : Set α}, IsCompact s → IsOpen t → IsCompact (s \\\\ t)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The intersection of a preperfect set and an open set is preperfect. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] {C U : Set α}, Preperfect C → IsOpen U → Preperfect (U ∩ C)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The cardinality of a union is at most the sum of the cardinalities\\nof the two sets. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} (S T : Set α), Cardinal.mk ↑(S ∪ T) ≤ Cardinal.mk ↑S + Cardinal.mk ↑T\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If two sets belong to a filter, then their intersection belongs to the filter as well. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} (self : Filter α) {x y : Set α}, x ∈ self.sets → y ∈ self.sets → x ∩ y ∈ self.sets\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The intersection of a closed set and a compact set is a compact set. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {s t : Set α}, IsCompact t → IsClosed s → IsCompact (s ∩ t)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The indicator of a disjoint union of two sets is the sum of the indicators of the sets. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} {E : Type u_2} {m0 : MeasurableSpace α} {p : ENNReal} {μ : MeasureTheory.Measure α}\\n  [inst : NormedAddCommGroup E] {s t : Set α} (hs : MeasurableSet s) (ht : MeasurableSet t) (hμs : ↑↑μ s ≠ ⊤)\\n  (hμt : ↑↑μ t ≠ ⊤),\\n  s ∩ t = ∅ →\\n    ∀ (c : E),\\n      MeasureTheory.indicatorConstLp p (_ : MeasurableSet (s ∪ t)) (_ : ↑↑μ (s ∪ t) ≠ ⊤) c =\\n        MeasureTheory.indicatorConstLp p hs hμs c + MeasureTheory.indicatorConstLp p ht hμt c\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The union of two sets is bounded iff each of the sets is bounded. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : PseudoMetricSpace α] {s t : Set α}, Metric.Bounded (s ∪ t) ↔ Metric.Bounded s ∧ Metric.Bounded t\"},\n {\"role\": \"user\", \"content\": \"The union of two bounded sets is bounded. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : PseudoMetricSpace α] {s t : Set α}, Metric.Bounded s → Metric.Bounded t → Metric.Bounded (s ∪ t)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The intersection of a compact set and a closed set is a compact set. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {s t : Set α}, IsCompact s → IsClosed t → IsCompact (s ∩ t)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The complement of a set has the same frontier as the original set. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] (s : Set α), frontier sᶜ = frontier s\"},\n {\"role\": \"user\", \"content\": \"The complement of a closed set is an open set. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {s : Set α} [self : IsClosed s], IsOpen sᶜ\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The complement of the union of two sets is the intersection of their complements.\"}]"}
{"text":"The sum of the cubes of two positive integers is never equal to the cube of a third integer.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\", \"content\": \"`2` is not a factor of an odd natural number. \"},\n {\"role\": \"assistant\", \"content\": \"∀ {m n : ℕ}, Odd n → m ∣ n → m ≠ 2\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If the angle between three points is `-π / 2`, the first two points are not equal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\\n  [inst_3 : NormedAddTorsor V P] [hd2 : Fact (FiniteDimensional.finrank ℝ V = 2)] [inst_4 : Module.Oriented ℝ V (Fin 2)]\\n  {p₁ p₂ p₃ : P}, EuclideanGeometry.oangle p₁ p₂ p₃ = ↑(-Real.pi / 2) → p₁ ≠ p₂\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If the sign of the angle between three points is nonzero, the first two points are not\\nequal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\\n  [inst_3 : NormedAddTorsor V P] [hd2 : Fact (FiniteDimensional.finrank ℝ V = 2)] [inst_4 : Module.Oriented ℝ V (Fin 2)]\\n  {p₁ p₂ p₃ : P}, Real.Angle.sign (EuclideanGeometry.oangle p₁ p₂ p₃) ≠ 0 → p₁ ≠ p₂\"},\n {\"role\": \"user\", \"content\": \"A sort of triangle inequality. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : LinearOrder α] [inst_1 : LocallyFiniteOrder α] {a b c : α},\\n  Finset.uIcc a c ⊆ Finset.uIcc a b ∪ Finset.uIcc b c\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If the sign of the angle between three points is positive, the last two points are not\\nequal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\\n  [inst_3 : NormedAddTorsor V P] [hd2 : Fact (FiniteDimensional.finrank ℝ V = 2)] [inst_4 : Module.Oriented ℝ V (Fin 2)]\\n  {p₁ p₂ p₃ : P}, Real.Angle.sign (EuclideanGeometry.oangle p₁ p₂ p₃) = 1 → p₃ ≠ p₂\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If the sign of the angle between three points is negative, the first two points are not\\nequal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\\n  [inst_3 : NormedAddTorsor V P] [hd2 : Fact (FiniteDimensional.finrank ℝ V = 2)] [inst_4 : Module.Oriented ℝ V (Fin 2)]\\n  {p₁ p₂ p₃ : P}, Real.Angle.sign (EuclideanGeometry.oangle p₁ p₂ p₃) = -1 → p₁ ≠ p₂\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If the angle between three points is `-π / 2`, the first and third points are not equal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\\n  [inst_3 : NormedAddTorsor V P] [hd2 : Fact (FiniteDimensional.finrank ℝ V = 2)] [inst_4 : Module.Oriented ℝ V (Fin 2)]\\n  {p₁ p₂ p₃ : P}, EuclideanGeometry.oangle p₁ p₂ p₃ = ↑(-Real.pi / 2) → p₁ ≠ p₃\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If the angle between three points is `π / 2`, the first two points are not equal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\\n  [inst_3 : NormedAddTorsor V P] [hd2 : Fact (FiniteDimensional.finrank ℝ V = 2)] [inst_4 : Module.Oriented ℝ V (Fin 2)]\\n  {p₁ p₂ p₃ : P}, EuclideanGeometry.oangle p₁ p₂ p₃ = ↑(Real.pi / 2) → p₁ ≠ p₂\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If the angle between three points is nonzero, the first two points are not equal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\\n  [inst_3 : NormedAddTorsor V P] [hd2 : Fact (FiniteDimensional.finrank ℝ V = 2)] [inst_4 : Module.Oriented ℝ V (Fin 2)]\\n  {p₁ p₂ p₃ : P}, EuclideanGeometry.oangle p₁ p₂ p₃ ≠ 0 → p₁ ≠ p₂\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If the angle between three points is `π`, the first and third points are not equal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\\n  [inst_3 : NormedAddTorsor V P] [hd2 : Fact (FiniteDimensional.finrank ℝ V = 2)] [inst_4 : Module.Oriented ℝ V (Fin 2)]\\n  {p₁ p₂ p₃ : P}, EuclideanGeometry.oangle p₁ p₂ p₃ = ↑Real.pi → p₁ ≠ p₃\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If the angle between three points is `π`, the first two points are not equal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\\n  [inst_3 : NormedAddTorsor V P] [hd2 : Fact (FiniteDimensional.finrank ℝ V = 2)] [inst_4 : Module.Oriented ℝ V (Fin 2)]\\n  {p₁ p₂ p₃ : P}, EuclideanGeometry.oangle p₁ p₂ p₃ = ↑Real.pi → p₁ ≠ p₂\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If the angle between three points is nonzero, the first and third points are not equal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\\n  [inst_3 : NormedAddTorsor V P] [hd2 : Fact (FiniteDimensional.finrank ℝ V = 2)] [inst_4 : Module.Oriented ℝ V (Fin 2)]\\n  {p₁ p₂ p₃ : P}, EuclideanGeometry.oangle p₁ p₂ p₃ ≠ 0 → p₁ ≠ p₃\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If the angle between three points is `π / 2`, the first and third points are not equal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\\n  [inst_3 : NormedAddTorsor V P] [hd2 : Fact (FiniteDimensional.finrank ℝ V = 2)] [inst_4 : Module.Oriented ℝ V (Fin 2)]\\n  {p₁ p₂ p₃ : P}, EuclideanGeometry.oangle p₁ p₂ p₃ = ↑(Real.pi / 2) → p₁ ≠ p₃\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The set of natural numbers that are sums of two squares is closed under multiplication. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {a b x y u v : ℕ}, a = x ^ 2 + y ^ 2 → b = u ^ 2 + v ^ 2 → ∃ r s, a * b = r ^ 2 + s ^ 2\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If the sign of the angle between three points is positive, the first two points are not\\nequal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\\n  [inst_3 : NormedAddTorsor V P] [hd2 : Fact (FiniteDimensional.finrank ℝ V = 2)] [inst_4 : Module.Oriented ℝ V (Fin 2)]\\n  {p₁ p₂ p₃ : P}, Real.Angle.sign (EuclideanGeometry.oangle p₁ p₂ p₃) = 1 → p₁ ≠ p₂\"},\n {\"role\": \"user\",\n  \"content\": \"There are no perfect squares strictly between m² and (m+1)² \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {n m : ℕ}, m * m < n → n < (m + 1) * (m + 1) → ¬∃ t, t * t = n\"},\n {\"role\": \"user\",\n  \"content\": \"The sum of two squares is zero iff both elements are zero. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : LinearOrderedRing α] {x y : α}, x * x + y * y = 0 ↔ x = 0 ∧ y = 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The sum of the cubes of two positive integers is never equal to the cube of a third integer.\"}]"}
{"text":"If every element of a group `G` has order `2`, then every pair of elements of `G` commutes.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\", \"content\": \"A finite group of prime order is cyclic. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : Group α] [inst_1 : Fintype α] {p : ℕ} [hp : Fact (Nat.Prime p)], Fintype.card α = p → IsCyclic α\"},\n {\"role\": \"user\",\n  \"content\": \"Every nonzero element of a group with zero is invertible. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [self : LinearOrderedCommGroupWithZero α] (a : α), a ≠ 0 → a * a⁻¹ = 1\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The product of group homomorphisms is a group homomorphism if the target is commutative. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} {β : Type u_2} [inst : Group α] [inst_1 : CommGroup β] {f g : α → β},\\n  IsGroupHom f → IsGroupHom g → IsGroupHom fun a => f a * g a\"},\n {\"role\": \"user\",\n  \"content\": \"A normal element of a star monoid commutes with its adjoint. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : Mul R] [inst_1 : Star R] {x : R} [self : IsStarNormal x], Commute (star x) x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If `a` commutes with both `b` and `c`, then it commutes with their sum.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {S : Type u_1} [inst : AddSemigroup S] {a b c : S}, AddCommute a b → AddCommute a c → AddCommute a (b + c)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A theorem of Schur: A group with finitely many commutators has finite commutator subgroup. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (G : Type u_1) [inst : Group G] [inst_1 : Finite ↑(commutatorSet G)], Finite { x // x ∈ commutator G }\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The composition of two group homomorphisms is a group homomorphism. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} [inst : Group α] [inst_1 : Group β] {f : α → β},\\n  IsGroupHom f → ∀ {γ : Type u_1} [inst_2 : Group γ] {g : β → γ}, IsGroupHom g → IsGroupHom (g ∘ f)\"},\n {\"role\": \"user\",\n  \"content\": \"The center of a group acts commutatively on that group. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G], SMulCommClass G { x // x ∈ Subgroup.center G } G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Commuting elements of finite additive order are closed under addition.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddMonoid G] {x y : G},\\n  AddCommute x y → IsOfFinAddOrder x → IsOfFinAddOrder y → IsOfFinAddOrder (x + y)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If `a` commutes with both `b` and `c`, then it commutes with their product. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {S : Type u_1} [inst : Semigroup S] {a b c : S}, Commute a b → Commute a c → Commute a (b * c)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If both `a` and `b` commute with `c`, then their product commutes with `c`. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {S : Type u_1} [inst : Semigroup S] {a b c : S}, Commute a c → Commute b c → Commute (a * b) c\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If both `a` and `b` commute with `c`, then their product commutes with `c`.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {S : Type u_1} [inst : AddSemigroup S] {a b c : S}, AddCommute a c → AddCommute b c → AddCommute (a + b) c\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Commuting elements of finite order are closed under multiplication. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Monoid G] {x y : G}, Commute x y → IsOfFinOrder x → IsOfFinOrder y → IsOfFinOrder (x * y)\"},\n {\"role\": \"user\",\n  \"content\": \"If `a` commutes with `b`, then `b` commutes with `a`. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {S : Type u_1} [inst : Mul S] {a b : S}, Commute a b → Commute b a\"},\n {\"role\": \"user\",\n  \"content\": \"If `a` commutes with `b`, then `b` commutes with `a`.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {S : Type u_1} [inst : Add S] {a b : S}, AddCommute a b → AddCommute b a\"},\n {\"role\": \"user\",\n  \"content\": \"Elements of disjoint, normal subgroups commute. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] (H₁ H₂ : Subgroup G),\\n  Subgroup.Normal H₁ → Subgroup.Normal H₂ → Disjoint H₁ H₂ → ∀ (x y : G), x ∈ H₁ → y ∈ H₂ → Commute x y\"},\n {\"role\": \"user\", \"content\": \"Elements of disjoint, normal subgroups commute.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddGroup G] (H₁ H₂ : AddSubgroup G),\\n  AddSubgroup.Normal H₁ → AddSubgroup.Normal H₂ → Disjoint H₁ H₂ → ∀ (x y : G), x ∈ H₁ → y ∈ H₂ → AddCommute x y\"},\n {\"role\": \"user\", \"content\": \"Any element commutes with itself. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {S : Type u_1} [inst : Mul S] (a : S), Commute a a\"},\n {\"role\": \"user\", \"content\": \"Any element commutes with itself.\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {S : Type u_1} [inst : Add S] (a : S), AddCommute a a\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If every element of a group `G` has order `2`, then every pair of elements of `G` commutes.\"}]"}
{"text":"The product of two consecutive natural numbers is even.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\": \"Pre-games defined by natural numbers are numeric. \"},\n {\"role\": \"assistant\", \"content\": \"∀ (n : ℕ), PGame.Numeric ↑n\"},\n {\"role\": \"user\", \"content\": \"A sum of finite numbers is still finite \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} {s : Finset α} {f : α → ENNReal}, (∀ (a : α), a ∈ s → f a ≠ ⊤) → (Finset.sum s fun a => f a) < ⊤\"},\n {\"role\": \"user\",\n  \"content\": \"If `n` is even and `a` is even, then `n % a` is even. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {n a : ℕ}, Even n → Even a → Even (n % a)\"},\n {\"role\": \"user\",\n  \"content\": \"The sum of two finite adèles is a finite adèle. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} {K : Type u_2} [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : IsDedekindDomain R]\\n  [inst_3 : Field K] [inst_4 : Algebra R K] [inst_5 : IsFractionRing R K]\\n  {x y : DedekindDomain.ProdAdicCompletions R K},\\n  DedekindDomain.ProdAdicCompletions.IsFiniteAdele x →\\n    DedekindDomain.ProdAdicCompletions.IsFiniteAdele y → DedekindDomain.ProdAdicCompletions.IsFiniteAdele (x + y)\"},\n {\"role\": \"user\",\n  \"content\": \"The product of non-negative elements is non-negative. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [self : OrderedRing α] (a b : α), 0 ≤ a → 0 ≤ b → 0 ≤ a * b\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If a small natural number is divisible by a larger natural number,\\nthe small number is zero. \"},\n {\"role\": \"assistant\", \"content\": \"∀ {a b : ℕ}, a ∣ b → b < a → b = 0\"},\n {\"role\": \"user\",\n  \"content\": \"The product of two finite adèles is a finite adèle. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} {K : Type u_2} [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : IsDedekindDomain R]\\n  [inst_3 : Field K] [inst_4 : Algebra R K] [inst_5 : IsFractionRing R K]\\n  {x y : DedekindDomain.ProdAdicCompletions R K},\\n  DedekindDomain.ProdAdicCompletions.IsFiniteAdele x →\\n    DedekindDomain.ProdAdicCompletions.IsFiniteAdele y → DedekindDomain.ProdAdicCompletions.IsFiniteAdele (x * y)\"},\n {\"role\": \"user\",\n  \"content\": \"Every nonzero natural number has a unique prime factorization \"},\n {\"role\": \"assistant\", \"content\": \"Set.InjOn Nat.factorization {x | x ≠ 0}\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Two positive naturals are equal if their prime padic valuations are equal \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (a b : ℕ), a ≠ 0 → b ≠ 0 → (a = b ↔ ∀ (p : ℕ), Nat.Prime p → padicValNat p a = padicValNat p b)\"},\n {\"role\": \"user\",\n  \"content\": \"A natural number is odd iff it has residue `1` or `3` mod `4`\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {n : ℕ}, n % 2 = 1 ↔ n % 4 = 1 ∨ n % 4 = 3\"},\n {\"role\": \"user\", \"content\": \"A product of finite numbers is still finite \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {ι : Type u_2} {R : Type u_1} [inst : CommMonoidWithZero R] [inst_1 : NoZeroDivisors R] [inst_2 : Nontrivial R]\\n  [inst_3 : DecidableEq R] [inst_4 : LT R] {s : Finset ι} {f : ι → WithTop R},\\n  (∀ (i : ι), i ∈ s → f i ≠ ⊤) → (Finset.prod s fun i => f i) < ⊤\"},\n {\"role\": \"user\", \"content\": \"`2` is not a factor of an odd natural number. \"},\n {\"role\": \"assistant\", \"content\": \"∀ {m n : ℕ}, Odd n → m ∣ n → m ≠ 2\"},\n {\"role\": \"user\",\n  \"content\": \"The product of two positive elements is positive. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [self : StrictOrderedRing α] (a b : α), 0 < a → 0 < b → 0 < a * b\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Two natural numbers are equal if and only if they have the same divisors. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {m n : ℕ}, (∀ (a : ℕ), a ∣ m ↔ a ∣ n) ↔ m = n\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The set of natural numbers that are sums of two squares is closed under multiplication. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {a b x y u v : ℕ}, a = x ^ 2 + y ^ 2 → b = u ^ 2 + v ^ 2 → ∃ r s, a * b = r ^ 2 + s ^ 2\"},\n {\"role\": \"user\",\n  \"content\": \"The convolution of two even functions is also even. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {𝕜 : Type u𝕜} {G : Type uG} {E : Type uE} {E' : Type uE'} {F : Type uF} [inst : NormedAddCommGroup E]\\n  [inst_1 : NormedAddCommGroup E'] [inst_2 : NormedAddCommGroup F] {f : G → E} {g : G → E'} {x : G}\\n  [inst_3 : NontriviallyNormedField 𝕜] [inst_4 : NormedSpace 𝕜 E] [inst_5 : NormedSpace 𝕜 E'] [inst_6 : NormedSpace 𝕜 F]\\n  (L : E →L[𝕜] E' →L[𝕜] F) [inst_7 : MeasurableSpace G] {μ : MeasureTheory.Measure G} [inst_8 : NormedSpace ℝ F]\\n  [inst_9 : AddCommGroup G] [inst_10 : MeasureTheory.Measure.IsAddLeftInvariant μ]\\n  [inst_11 : MeasureTheory.Measure.IsNegInvariant μ] [inst_12 : MeasurableNeg G] [inst_13 : MeasurableAdd G],\\n  (∀ᵐ (x : G) ∂μ, f (-x) = f x) → (∀ᵐ (x : G) ∂μ, g (-x) = g x) → convolution f g L (-x) = convolution f g L x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Two natural numbers are equal if and only if they have the same multiples. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {m n : ℕ}, (∀ (a : ℕ), m ∣ a ↔ n ∣ a) ↔ m = n\"},\n {\"role\": \"user\",\n  \"content\": \"The product of two consecutive natural numbers is even.\"}]"}
{"text":"Every index 2 subgroup of a group is normal.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\": \"A subgroup is either the trivial subgroup or nontrivial. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] (H : Subgroup G), H = ⊥ ∨ Nontrivial { x // x ∈ H }\"},\n {\"role\": \"user\",\n  \"content\": \"The normal closure of `s` is a normal subgroup. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] {s : Set G}, Subgroup.Normal (Subgroup.normalClosure s)\"},\n {\"role\": \"user\", \"content\": \"A subgroup is closed under inverse. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] (H : Subgroup G) {x : G}, x ∈ H → x⁻¹ ∈ H\"},\n {\"role\": \"user\",\n  \"content\": \"Subgroups of torsion groups are torsion groups. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G], Monoid.IsTorsion G → ∀ (H : Subgroup G), Monoid.IsTorsion { x // x ∈ H }\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The normal closure of s is the smallest normal subgroup containing s. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] {s t : Set G}, IsNormalSubgroup t → s ⊆ t → Group.normalClosure s ⊆ t\"},\n {\"role\": \"user\", \"content\": \"The additive subgroup has finite index \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddGroup G] {H : AddSubgroup G} [self : AddSubgroup.FiniteIndex H], AddSubgroup.index H ≠ 0\"},\n {\"role\": \"user\", \"content\": \"A subgroup is closed under multiplication. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] (H : Subgroup G) {x y : G}, x ∈ H → y ∈ H → x * y ∈ H\"},\n {\"role\": \"user\", \"content\": \"A subgroup is closed under division. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {M : Type u_1} {S : Type u_2} [inst : DivInvMonoid M] [inst_1 : SetLike S M] [hSM : SubgroupClass S M] {H : S}\\n  {x y : M}, x ∈ H → y ∈ H → x / y ∈ H\"},\n {\"role\": \"user\",\n  \"content\": \"Two subgroups are equal if they have the same elements. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] {H K : Subgroup G}, (∀ (x : G), x ∈ H ↔ x ∈ K) → H = K\"},\n {\"role\": \"user\", \"content\": \"A subgroup contains the group's 1. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {G : Type u_1} [inst : Group G] (H : Subgroup G), 1 ∈ H\"},\n {\"role\": \"user\", \"content\": \"Any normal subgroup is either `⊥` or `⊤` \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] [self : IsSimpleGroup G] (H : Subgroup G), Subgroup.Normal H → H = ⊥ ∨ H = ⊤\"},\n {\"role\": \"user\", \"content\": \"The normal closure of a set is a subgroup. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] (s : Set G), IsSubgroup (Group.normalClosure s)\"},\n {\"role\": \"user\", \"content\": \"The normal closure of s is a normal subgroup. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} {s : Set G} [inst : Group G], IsNormalSubgroup (Group.normalClosure s)\"},\n {\"role\": \"user\", \"content\": \"Elements of disjoint, normal subgroups commute.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddGroup G] (H₁ H₂ : AddSubgroup G),\\n  AddSubgroup.Normal H₁ → AddSubgroup.Normal H₂ → Disjoint H₁ H₂ → ∀ (x y : G), x ∈ H₁ → y ∈ H₂ → AddCommute x y\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The topological closure of a normal additive subgroup is normal.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : TopologicalSpace G] [inst_1 : AddGroup G] [inst_2 : TopologicalAddGroup G] (N : AddSubgroup G)\\n  [inst_3 : AddSubgroup.Normal N], AddSubgroup.Normal (AddSubgroup.topologicalClosure N)\"},\n {\"role\": \"user\",\n  \"content\": \"Elements of disjoint, normal subgroups commute. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] (H₁ H₂ : Subgroup G),\\n  Subgroup.Normal H₁ → Subgroup.Normal H₂ → Disjoint H₁ H₂ → ∀ (x y : G), x ∈ H₁ → y ∈ H₂ → Commute x y\"},\n {\"role\": \"user\",\n  \"content\":\n  \"In a group that satisfies the normalizer condition, every maximal subgroup is normal \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] (H : Subgroup G), NormalizerCondition G → IsCoatom H → Subgroup.Normal H\"},\n {\"role\": \"user\",\n  \"content\": \"The topological closure of a normal subgroup is normal.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : TopologicalSpace G] [inst_1 : Group G] [inst_2 : TopologicalGroup G] (N : Subgroup G)\\n  [inst_3 : Subgroup.Normal N], Subgroup.Normal (Subgroup.topologicalClosure N)\"},\n {\"role\": \"user\", \"content\": \"The subgroup has finite index \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] {H : Subgroup G} [self : Subgroup.FiniteIndex H], Subgroup.index H ≠ 0\"},\n {\"role\": \"user\", \"content\": \"Every index 2 subgroup of a group is normal.\"}]"}
{"text":"Every free group is torsion free.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Quotienting by the torsion submodule gives a torsion-free module. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_2} {M : Type u_1} [inst : CommRing R] [inst_1 : AddCommGroup M] [inst_2 : Module R M],\\n  Submodule.torsion R (M ⧸ Submodule.torsion R M) = ⊥\"},\n {\"role\": \"user\", \"content\": \"Torsion submonoids are torsion. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : CommMonoid G], Monoid.IsTorsion { x // x ∈ CommMonoid.torsion G }\"},\n {\"role\": \"user\",\n  \"content\": \"The group exponent exists for any bounded torsion group. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G],\\n  Monoid.IsTorsion G → Set.Finite (Set.range fun g => orderOf g) → Monoid.ExponentExists G\"},\n {\"role\": \"user\",\n  \"content\": \"Finite additive groups are additive torsion groups.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddGroup G] [inst_1 : Finite G], AddMonoid.IsTorsion G\"},\n {\"role\": \"user\",\n  \"content\": \"A nontrivial additive torsion group is not torsion-free.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddGroup G] [hN : Nontrivial G], AddMonoid.IsTorsion G → ¬AddMonoid.IsTorsionFree G\"},\n {\"role\": \"user\",\n  \"content\": \"Additive torsion groups are closed under extensions.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} {H : Type u_2} [inst : AddGroup G] {N : AddSubgroup G} [inst_1 : AddGroup H] {f : G →+ H},\\n  N = AddMonoidHom.ker f → AddMonoid.IsTorsion H → AddMonoid.IsTorsion { x // x ∈ N } → AddMonoid.IsTorsion G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Subgroups of additive torsion groups are additive torsion groups.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddGroup G], AddMonoid.IsTorsion G → ∀ (H : AddSubgroup G), AddMonoid.IsTorsion { x // x ∈ H }\"},\n {\"role\": \"user\",\n  \"content\": \"If a group exponent exists, the group is torsion. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G], Monoid.ExponentExists G → Monoid.IsTorsion G\"},\n {\"role\": \"user\",\n  \"content\": \"A nontrivial torsion-free additive group is not torsion.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddGroup G] [hN : Nontrivial G], AddMonoid.IsTorsionFree G → ¬AddMonoid.IsTorsion G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Quotienting a group by its additive torsion subgroup yields an additive torsion free group.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (G : Type u_1) [inst : AddCommGroup G], AddMonoid.IsTorsionFree (G ⧸ AddCommGroup.torsion G)\"},\n {\"role\": \"user\",\n  \"content\": \"A nontrivial torsion group is not torsion-free. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] [hN : Nontrivial G], Monoid.IsTorsion G → ¬Monoid.IsTorsionFree G\"},\n {\"role\": \"user\",\n  \"content\": \"Subgroups of torsion groups are torsion groups. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G], Monoid.IsTorsion G → ∀ (H : Subgroup G), Monoid.IsTorsion { x // x ∈ H }\"},\n {\"role\": \"user\", \"content\": \"Torsion groups are closed under extensions. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} {H : Type u_2} [inst : Group G] {N : Subgroup G} [inst_1 : Group H] {f : G →* H},\\n  N = MonoidHom.ker f → Monoid.IsTorsion H → Monoid.IsTorsion { x // x ∈ N } → Monoid.IsTorsion G\"},\n {\"role\": \"user\", \"content\": \"Finite groups are torsion groups. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] [inst_1 : Finite G], Monoid.IsTorsion G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Quotienting a group by its torsion subgroup yields a torsion free group. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (G : Type u_1) [inst : CommGroup G], Monoid.IsTorsionFree (G ⧸ CommGroup.torsion G)\"},\n {\"role\": \"user\",\n  \"content\": \"A nontrivial torsion-free group is not torsion. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] [hN : Nontrivial G], Monoid.IsTorsionFree G → ¬Monoid.IsTorsion G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Subgroups of additive torsion-free groups are additively torsion-free.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddGroup G],\\n  AddMonoid.IsTorsionFree G → ∀ (H : AddSubgroup G), AddMonoid.IsTorsionFree { x // x ∈ H }\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Direct products of additive torsion free groups are torsion free.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {η : Type u_1} {Gs : η → Type u_2} [inst : (i : η) → AddGroup (Gs i)],\\n  (∀ (i : η), AddMonoid.IsTorsionFree (Gs i)) → AddMonoid.IsTorsionFree ((i : η) → Gs i)\"},\n {\"role\": \"user\",\n  \"content\": \"Direct products of torsion free groups are torsion free. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {η : Type u_1} {Gs : η → Type u_2} [inst : (i : η) → Group (Gs i)],\\n  (∀ (i : η), Monoid.IsTorsionFree (Gs i)) → Monoid.IsTorsionFree ((i : η) → Gs i)\"},\n {\"role\": \"user\",\n  \"content\": \"Subgroups of torsion-free groups are torsion-free. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G], Monoid.IsTorsionFree G → ∀ (H : Subgroup G), Monoid.IsTorsionFree { x // x ∈ H }\"},\n {\"role\": \"user\", \"content\": \"Every free group is torsion free.\"}]"}
{"text":"Every natural number greater than `1` is divisible by a prime number.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\", \"content\": \"The factors of `n` are the prime divisors \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (n : ℕ), List.toFinset (Nat.factors n) = Finset.filter Nat.Prime (Nat.divisors n)\"},\n {\"role\": \"user\", \"content\": \"No zero divisors. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [self : CanonicallyOrderedCommSemiring α] {a b : α}, a * b = 0 → a = 0 ∨ b = 0\"},\n {\"role\": \"user\",\n  \"content\": \"A natural number is odd iff it has residue `1` or `3` mod `4`\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {n : ℕ}, n % 2 = 1 ↔ n % 4 = 1 ∨ n % 4 = 3\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The only prime divisor of positive prime power `p^k` is `p` itself \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {p k : ℕ}, k ≠ 0 → Nat.Prime p → List.toFinset (Nat.factors (p ^ k)) = {p}\"},\n {\"role\": \"user\", \"content\": \"The multiplicity of prime `p` in `p` is `1` \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {p : ℕ}, Nat.Prime p → ↑(Nat.factorization p) p = 1\"},\n {\"role\": \"user\",\n  \"content\": \"Exactly `n / p` naturals in `(0, n]` are multiples of `p`. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (n p : ℕ), Finset.card (Finset.filter (fun x => p ∣ x) (Finset.Ioc 0 n)) = n / p\"},\n {\"role\": \"user\",\n  \"content\":\n  \"For any positive `k : ℕ` there are infinitely many primes `p` such that `p ≡ 1 [MOD k]`. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {k : ℕ}, k ≠ 0 → Set.Infinite {p | Nat.Prime p ∧ p ≡ 1 [MOD k]}\"},\n {\"role\": \"user\",\n  \"content\": \"All composite numbers are Fermat pseudoprimes to base 1.\\n\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {n : ℕ}, 1 < n → ¬Nat.Prime n → FermatPsp n 1\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A natural number `m` divides the sum `n + m` if and only if `m` divides `n`.\"},\n {\"role\": \"assistant\", \"content\": \"∀ {m n : ℕ}, m ∣ n + m ↔ m ∣ n\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The only numbers with empty prime factorization are `0` and `1` \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ (n : ℕ), Nat.factorization n = 0 ↔ n = 0 ∨ n = 1\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A natural number `m` divides the sum `m + n` if and only if `m` divides `n`.\"},\n {\"role\": \"assistant\", \"content\": \"∀ {m n : ℕ}, m ∣ m + n ↔ m ∣ n\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Two natural numbers are equal if and only if they have the same multiples. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {m n : ℕ}, (∀ (a : ℕ), m ∣ a ↔ n ∣ a) ↔ m = n\"},\n {\"role\": \"user\",\n  \"content\": \"Exactly `n / p` naturals in `[1, n]` are multiples of `p`. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (n p : ℕ), Finset.card (Finset.filter (fun e => p ∣ e + 1) (Finset.range n)) = n / p\"},\n {\"role\": \"user\",\n  \"content\": \"Infinitely many natural numbers are equal to `d` mod `n`. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {n : ℕ}, n ≠ 0 → ∀ (d : ℕ), ∃ᶠ (m : ℕ) in Filter.atTop, m ≡ d [MOD n]\"},\n {\"role\": \"user\",\n  \"content\": \"The only divisors of prime powers are prime powers. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : CancelCommMonoidWithZero α] [dec_irr : (p : Associates α) → Decidable (Irreducible p)]\\n  [inst_1 : UniqueFactorizationMonoid α] [dec : DecidableEq α] [dec' : DecidableEq (Associates α)] {a p : Associates α},\\n  Irreducible p →\\n    ∀ [inst_2 : (n : ℕ) → Decidable (a ∣ p ^ n)] {n : ℕ} (h : a ∣ p ^ n),\\n      a = p ^ Nat.find (_ : ∃ n, (fun n => a ∣ p ^ n) n)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A prime natural number is prime in `ℤ[i]` if and only if it is `3` mod `4` \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ (p : ℕ) [inst : Fact (Nat.Prime p)], Prime ↑p ↔ p % 4 = 3\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Two natural numbers are equal if and only if they have the same divisors. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {m n : ℕ}, (∀ (a : ℕ), a ∣ m ↔ a ∣ n) ↔ m = n\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If a small natural number is divisible by a larger natural number,\\nthe small number is zero. \"},\n {\"role\": \"assistant\", \"content\": \"∀ {a b : ℕ}, a ∣ b → b < a → b = 0\"},\n {\"role\": \"user\",\n  \"content\": \"Every nonzero natural number has a unique prime factorization \"},\n {\"role\": \"assistant\", \"content\": \"Set.InjOn Nat.factorization {x | x ≠ 0}\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Every natural number greater than `1` is divisible by a prime number.\"}]"}
{"text":"A finite torsion-free group is trivial","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Quotienting by the torsion submodule gives a torsion-free module. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_2} {M : Type u_1} [inst : CommRing R] [inst_1 : AddCommGroup M] [inst_2 : Module R M],\\n  Submodule.torsion R (M ⧸ Submodule.torsion R M) = ⊥\"},\n {\"role\": \"user\",\n  \"content\": \"The group exponent exists for any bounded torsion group. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G],\\n  Monoid.IsTorsion G → Set.Finite (Set.range fun g => orderOf g) → Monoid.ExponentExists G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If a finite group is the direct product of its Sylow groups, it is nilpotent \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [hG : Group G] [inst : Fintype G],\\n  ((p : { x // x ∈ (Nat.factorization (Fintype.card G)).support }) → (P : Sylow (↑p) G) → { x // x ∈ ↑P }) ≃* G →\\n    Group.IsNilpotent G\"},\n {\"role\": \"user\",\n  \"content\": \"Additive torsion groups are closed under extensions.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} {H : Type u_2} [inst : AddGroup G] {N : AddSubgroup G} [inst_1 : AddGroup H] {f : G →+ H},\\n  N = AddMonoidHom.ker f → AddMonoid.IsTorsion H → AddMonoid.IsTorsion { x // x ∈ N } → AddMonoid.IsTorsion G\"},\n {\"role\": \"user\", \"content\": \"A finite group of prime order is simple.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : AddGroup α] [inst_1 : Fintype α] {p : ℕ} [hp : Fact (Nat.Prime p)],\\n  Fintype.card α = p → IsSimpleAddGroup α\"},\n {\"role\": \"user\",\n  \"content\": \"Finite additive groups are additive torsion groups.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddGroup G] [inst_1 : Finite G], AddMonoid.IsTorsion G\"},\n {\"role\": \"user\", \"content\": \"A finite group of prime order is simple. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : Group α] [inst_1 : Fintype α] {p : ℕ} [hp : Fact (Nat.Prime p)],\\n  Fintype.card α = p → IsSimpleGroup α\"},\n {\"role\": \"user\", \"content\": \"A semisimple Abelian Lie algebra is trivial. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (R : Type u) (L : Type v) [inst : CommRing R] [inst_1 : LieRing L] [inst_2 : LieAlgebra R L]\\n  [inst : LieAlgebra.IsSemisimple R L] [h : IsLieAbelian L], Subsingleton L\"},\n {\"role\": \"user\",\n  \"content\": \"A nontrivial torsion group is not torsion-free. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] [hN : Nontrivial G], Monoid.IsTorsion G → ¬Monoid.IsTorsionFree G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Direct products of additive torsion free groups are torsion free.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {η : Type u_1} {Gs : η → Type u_2} [inst : (i : η) → AddGroup (Gs i)],\\n  (∀ (i : η), AddMonoid.IsTorsionFree (Gs i)) → AddMonoid.IsTorsionFree ((i : η) → Gs i)\"},\n {\"role\": \"user\",\n  \"content\": \"Subgroups of torsion groups are torsion groups. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G], Monoid.IsTorsion G → ∀ (H : Subgroup G), Monoid.IsTorsion { x // x ∈ H }\"},\n {\"role\": \"user\",\n  \"content\": \"A nontrivial torsion-free additive group is not torsion.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddGroup G] [hN : Nontrivial G], AddMonoid.IsTorsionFree G → ¬AddMonoid.IsTorsion G\"},\n {\"role\": \"user\", \"content\": \"Torsion groups are closed under extensions. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} {H : Type u_2} [inst : Group G] {N : Subgroup G} [inst_1 : Group H] {f : G →* H},\\n  N = MonoidHom.ker f → Monoid.IsTorsion H → Monoid.IsTorsion { x // x ∈ N } → Monoid.IsTorsion G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Subgroups of additive torsion-free groups are additively torsion-free.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddGroup G],\\n  AddMonoid.IsTorsionFree G → ∀ (H : AddSubgroup G), AddMonoid.IsTorsionFree { x // x ∈ H }\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Quotienting a group by its additive torsion subgroup yields an additive torsion free group.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (G : Type u_1) [inst : AddCommGroup G], AddMonoid.IsTorsionFree (G ⧸ AddCommGroup.torsion G)\"},\n {\"role\": \"user\",\n  \"content\": \"Direct products of torsion free groups are torsion free. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {η : Type u_1} {Gs : η → Type u_2} [inst : (i : η) → Group (Gs i)],\\n  (∀ (i : η), Monoid.IsTorsionFree (Gs i)) → Monoid.IsTorsionFree ((i : η) → Gs i)\"},\n {\"role\": \"user\",\n  \"content\": \"A nontrivial torsion-free group is not torsion. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] [hN : Nontrivial G], Monoid.IsTorsionFree G → ¬Monoid.IsTorsion G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Quotienting a group by its torsion subgroup yields a torsion free group. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (G : Type u_1) [inst : CommGroup G], Monoid.IsTorsionFree (G ⧸ CommGroup.torsion G)\"},\n {\"role\": \"user\",\n  \"content\": \"Subgroups of torsion-free groups are torsion-free. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G], Monoid.IsTorsionFree G → ∀ (H : Subgroup G), Monoid.IsTorsionFree { x // x ∈ H }\"},\n {\"role\": \"user\", \"content\": \"Finite groups are torsion groups. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] [inst_1 : Finite G], Monoid.IsTorsion G\"},\n {\"role\": \"user\", \"content\": \"A finite torsion-free group is trivial\"}]"}
{"text":"Every finite division ring is a field.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A ring is Noetherian if and only if all its ideals are finitely-generated. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (R : Type u_1) [inst : Semiring R], IsNoetherianRing R ↔ ∀ (I : Ideal R), Ideal.FG I\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Any conditionally complete linearly ordered field is archimedean. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : ConditionallyCompleteLinearOrderedField α], Archimedean α\"},\n {\"role\": \"user\", \"content\": \"A subfield is closed under multiplication. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u} [inst : Field K] (s : Subfield K) {x y : K}, x ∈ s → y ∈ s → x * y ∈ s\"},\n {\"role\": \"user\",\n  \"content\": \"An intermediate field is closed under multiplication. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u_2} {L : Type u_1} [inst : Field K] [inst_1 : Field L] [inst_2 : Algebra K L] (S : IntermediateField K L)\\n  {x y : L}, x ∈ S → y ∈ S → x * y ∈ S\"},\n {\"role\": \"user\",\n  \"content\": \"Any infinite type can be endowed a field structure. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {α : Type u} [inst : Infinite α], Nonempty (Field α)\"},\n {\"role\": \"user\",\n  \"content\": \"A normed division ring is a topological division ring. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : NormedDivisionRing α], TopologicalDivisionRing α\"},\n {\"role\": \"user\", \"content\": \"A field extension is integral if it is finite. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (K : Type u_1) (L : Type u_2) [inst : Field K] [inst_1 : Field L] [inst_2 : Algebra K L]\\n  [inst_3 : FiniteDimensional K L], Algebra.IsIntegral K L\"},\n {\"role\": \"user\",\n  \"content\":\n  \"In a finite field of characteristic `2`, all elements are squares. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {F : Type u_1} [inst : Field F] [inst_1 : Finite F], ringChar F = 2 → ∀ (a : F), IsSquare a\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The quotient of a ring by an ideal is a field iff the ideal is maximal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} [inst : CommRing R] (I : Ideal R), Ideal.IsMaximal I ↔ IsField (R ⧸ I)\"},\n {\"role\": \"user\",\n  \"content\": \"All ideals in a division (semi)ring are trivial. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u} [inst : DivisionSemiring K] (I : Ideal K), I = ⊥ ∨ I = ⊤\"},\n {\"role\": \"user\",\n  \"content\": \"A field extension is algebraic if it is finite. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (K : Type u_1) (L : Type u_2) [inst : Field K] [inst_1 : Field L] [inst_2 : Algebra K L]\\n  [inst_3 : FiniteDimensional K L], Algebra.IsAlgebraic K L\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A finite subgroup of the unit group of an integral domain is cyclic. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_2} {G : Type u_1} [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : Group G] [inst_3 : Finite G]\\n  (f : G →* R), Function.Injective ↑f → IsCyclic G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A module over a division ring is noetherian if and only if it is finitely generated. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V],\\n  IsNoetherian K V ↔ Module.Finite K V\"},\n {\"role\": \"user\",\n  \"content\": \"A linear ordered field that is a floor ring is archimedean. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (α : Type u_1) [inst : LinearOrderedField α] [inst_1 : FloorRing α], Archimedean α\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A finite subgroup of the units of an integral domain is cyclic. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsDomain R] (S : Subgroup Rˣ) [inst_2 : Finite { x // x ∈ S }],\\n  IsCyclic { x // x ∈ S }\"},\n {\"role\": \"user\", \"content\": \"A subfield is closed under division. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u} [inst : Field K] (s : Subfield K) {x y : K}, x ∈ s → y ∈ s → x / y ∈ s\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A cyclotomic finite extension of a number field is a number field. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (S : Set ℕ+) (K : Type w) (L : Type z) [inst : Field K] [inst_1 : Field L] [inst_2 : Algebra K L] [h : NumberField K]\\n  [inst_3 : Finite ↑S] [inst : IsCyclotomicExtension S K L], NumberField L\"},\n {\"role\": \"user\", \"content\": \"A field is a valuation ring. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ (K : Type u) [inst : Field K], ValuationRing K\"},\n {\"role\": \"user\",\n  \"content\": \"An intermediate field is closed under division. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u_2} {L : Type u_1} [inst : Field K] [inst_1 : Field L] [inst_2 : Algebra K L] (S : IntermediateField K L)\\n  {x y : L}, x ∈ S → y ∈ S → x / y ∈ S\"},\n {\"role\": \"user\", \"content\": \"A finite field has prime power cardinality. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : Fintype α] [inst_1 : Field α], IsPrimePow (Fintype.card α)\"},\n {\"role\": \"user\", \"content\": \"Every finite division ring is a field.\"}]"}
{"text":"Every finite topological space is compact.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\", \"content\": \"All hom spaces are finite dimensional. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {k G : Type u} [inst : Field k] [inst_1 : Monoid G] (V W : FdRep k G), FiniteDimensional k (V ⟶ W)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A sequentially compact set in a uniform space is totally bounded. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} [inst : UniformSpace X] {s : Set X}, IsSeqCompact s → TotallyBounded s\"},\n {\"role\": \"user\",\n  \"content\":\n  \"In a nonempty locally compact space, there exists a compact set with nonempty interior. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] [inst_2 : Nonempty α],\\n  Nonempty (TopologicalSpace.PositiveCompacts α)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Any continuous bijection of compact Hausdorff spaces is an isomorphism. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X Y : CompHaus} (f : X ⟶ Y), Function.Bijective ↑f → CategoryTheory.IsIso f\"},\n {\"role\": \"user\",\n  \"content\": \"In a compact space, the type of closed subsets is compact. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : EMetricSpace α] [inst_1 : CompactSpace α], CompactSpace (TopologicalSpace.Closeds α)\"},\n {\"role\": \"user\",\n  \"content\": \"The disjoint union of two compact spaces is compact. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] [inst_2 : CompactSpace α]\\n  [inst_3 : CompactSpace β], CompactSpace (α ⊕ β)\"},\n {\"role\": \"user\", \"content\": \"Convex hull of a finite set is compact. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {E : Type u_1} [inst : AddCommGroup E] [inst_1 : Module ℝ E] [inst_2 : TopologicalSpace E]\\n  [inst_3 : TopologicalAddGroup E] [inst_4 : ContinuousSMul ℝ E] {s : Set E},\\n  Set.Finite s → IsCompact (↑(convexHull ℝ) s)\"},\n {\"role\": \"user\", \"content\": \"In a `T2Space`, every compact set is closed. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : T2Space α] {s : Set α}, IsCompact s → IsClosed s\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Every open cover of a paracompact space assumes a locally finite refinement. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type v} [inst : TopologicalSpace X] [self : ParacompactSpace X] (α : Type v) (s : α → Set X),\\n  (∀ (a : α), IsOpen (s a)) → ⋃ (a : α), s a = Set.univ → ∃ β t x x, LocallyFinite t ∧ ∀ (b : β), ∃ a, t b ⊆ s a\"},\n {\"role\": \"user\", \"content\": \"The product of two compact spaces is compact. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] [inst_2 : CompactSpace α]\\n  [inst_3 : CompactSpace β], CompactSpace (α × β)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"In a locally compact space every point has a compact neighborhood. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] (x : α), ∃ K, IsCompact K ∧ K ∈ nhds x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If `X` is a compact space, then any discrete quotient of `X` is finite. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] (S : DiscreteQuotient X) [inst_1 : CompactSpace X],\\n  Finite (Quotient S.toSetoid)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"In a locally compact space, every compact set is contained in the interior of a compact set. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] {K : Set α},\\n  IsCompact K → ∃ K', IsCompact K' ∧ K ⊆ interior K'\"},\n {\"role\": \"user\", \"content\": \"In a Noetherian space, all sets are compact. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace.NoetherianSpace α] (s : Set α), IsCompact s\"},\n {\"role\": \"user\",\n  \"content\":\n  \"For any topological space `X`, its one point compactification is a compact space. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X], CompactSpace (OnePoint X)\"},\n {\"role\": \"user\", \"content\": \"A compact discrete space is finite. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : CompactSpace α] [inst : DiscreteTopology α], Finite α\"},\n {\"role\": \"user\", \"content\": \"The underlying topological space is compact.\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ (self : CompHaus), CompactSpace ↑self.toTop\"},\n {\"role\": \"user\", \"content\": \"Finite topological spaces are compact. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : Finite α], CompactSpace α\"},\n {\"role\": \"user\", \"content\": \"Every finite topological space is compact.\"}]"}
{"text":"Every surjective homomorphism from a finitely generated free group to itself is injective.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The natural homomorphism from a monoid to its quotient by a congruence relation is\\nsurjective. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {M : Type u_1} [inst : MulOneClass M] {c : Con M}, Function.Surjective ↑(Con.mk' c)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Any continuous bijection of compact Hausdorff spaces is an isomorphism. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X Y : CompHaus} (f : X ⟶ Y), Function.Bijective ↑f → CategoryTheory.IsIso f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The canonical map from the type to the free group is an injection. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {α : Type u}, Function.Injective FreeGroup.of\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Composing with a family of surjective linear maps is injective. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} {ι : Type u'} {M₁ : ι → Type v₁} {M₂ : Type v₂} [inst : Semiring R]\\n  [inst_1 : (i : ι) → AddCommMonoid (M₁ i)] [inst_2 : AddCommMonoid M₂] [inst_3 : (i : ι) → Module R (M₁ i)]\\n  [inst_4 : Module R M₂] {M₁' : ι → Type u_1} [inst_5 : (i : ι) → AddCommMonoid (M₁' i)]\\n  [inst_6 : (i : ι) → Module R (M₁' i)] (f : (i : ι) → M₁ i →ₗ[R] M₁' i),\\n  (∀ (i : ι), Function.Surjective ↑(f i)) → Function.Injective fun g => MultilinearMap.compLinearMap g f\"},\n {\"role\": \"user\", \"content\": \"A monomorphism is injective. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} {R₂ : Type u_2} {M : Type u_3} {M₂ : Type u_4} [inst : Semiring R] [inst_1 : Semiring R₂]\\n  [inst_2 : AddCommMonoid M] [inst_3 : AddCommMonoid M₂] [inst_4 : Module R M] [inst_5 : Module R₂ M₂] {τ₁₂ : R →+* R₂}\\n  {f : M →ₛₗ[τ₁₂] M₂},\\n  (∀ (u v : { x // x ∈ LinearMap.ker f } →ₗ[R] M), LinearMap.comp f u = LinearMap.comp f v → u = v) →\\n    LinearMap.ker f = ⊥\"},\n {\"role\": \"user\",\n  \"content\": \"A group homomorphism sends inverses to inverses. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} [inst : Group α] [inst_1 : Group β] {f : α → β}, IsGroupHom f → ∀ (a : α), f a⁻¹ = (f a)⁻¹\"},\n {\"role\": \"user\",\n  \"content\": \"Composing with a surjective linear map is injective. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : Semiring R] {M : Type u_3} [inst_1 : AddCommMonoid M] [inst_2 : Module R M] {N : Type u_4}\\n  [inst_3 : AddCommMonoid N] [inst_4 : Module R N] {ι : Type u_5} {M₂ : Type u_2} [inst_5 : AddCommMonoid M₂]\\n  [inst_6 : Module R M₂] (f : M₂ →ₗ[R] M),\\n  Function.Surjective ↑f → Function.Injective fun g => AlternatingMap.compLinearMap g f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A monoid homomorphism `f` induces an injective homomorphism on the quotient by `f`'s kernel. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {M : Type u_1} {P : Type u_2} [inst : MulOneClass M] [inst_1 : MulOneClass P] (f : M →* P),\\n  Function.Injective ↑(Con.kerLift f)\"},\n {\"role\": \"user\", \"content\": \"The ring homomorphism is surjective \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R₁ : Type u_1} {R₂ : Type u_2} [inst : Semiring R₁] [inst_1 : Semiring R₂] {σ : R₁ →+* R₂}\\n  [self : RingHomSurjective σ], Function.Surjective ↑σ\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The induced algebra morphism from the quotient by the kernel is injective. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R₁ : Type u_1} {A : Type u_2} {B : Type u_3} [inst : CommSemiring R₁] [inst_1 : CommRing A] [inst_2 : CommRing B]\\n  [inst_3 : Algebra R₁ A] [inst_4 : Algebra R₁ B] (f : A →ₐ[R₁] B), Function.Injective ↑(Ideal.kerLiftAlg f)\"},\n {\"role\": \"user\", \"content\": \"Group homomorphisms preserve inverse. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} {H : Type u_2} {F : Type u_3} [inst : Group G] [inst_1 : DivisionMonoid H]\\n  [inst_2 : MonoidHomClass F G H] (f : F) (a : G), ↑f a⁻¹ = (↑f a)⁻¹\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Any surjective endomorphism of a Noetherian module is bijective. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} {M : Type u_2} [inst : Ring R] [inst_1 : AddCommGroup M] [inst_2 : Module R M]\\n  [inst_3 : IsNoetherian R M] (f : M →ₗ[R] M), Function.Surjective ↑f → Function.Bijective ↑f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Any injective polynomial map over an algebraic extension of a finite field is surjective. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {ι : Type u_1} {K : Type u_2} {R : Type u_3} [inst : Field K] [inst_1 : Finite K] [inst_2 : CommRing R]\\n  [inst_3 : Finite ι] [inst_4 : Algebra K R],\\n  Algebra.IsAlgebraic K R →\\n    ∀ (ps : ι → MvPolynomial ι R),\\n      (Function.Injective fun v i => ↑(MvPolynomial.eval v) (ps i)) →\\n        Function.Surjective fun v i => ↑(MvPolynomial.eval v) (ps i)\"},\n {\"role\": \"user\",\n  \"content\": \"Any injective endomorphism of an Artinian module is bijective. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} {M : Type u_2} [inst : Ring R] [inst_1 : AddCommGroup M] [inst_2 : Module R M]\\n  [inst_3 : IsArtinian R M] (f : M →ₗ[R] M), Function.Injective ↑f → Function.Bijective ↑f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"On a finite-dimensional space, an injective linear map is surjective. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V]\\n  [inst_3 : FiniteDimensional K V] {f : V →ₗ[K] V}, Function.Injective ↑f → Function.Surjective ↑f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"An additive group homomorphism is injective if its kernel is trivial.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} [inst : AddGroup α] [inst_1 : AddGroup β] {f : α → β},\\n  IsAddGroupHom f → (Function.Injective f ↔ ∀ (a : α), f a = 0 → a = 0)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Any injective endomorphism of an Artinian module is surjective. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} {M : Type u_2} [inst : Ring R] [inst_1 : AddCommGroup M] [inst_2 : Module R M]\\n  [inst_3 : IsArtinian R M] (f : M →ₗ[R] M), Function.Injective ↑f → Function.Surjective ↑f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Any surjective endomorphism of a Noetherian module is injective. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} {M : Type u_2} [inst : Ring R] [inst_1 : AddCommGroup M] [inst_2 : Module R M]\\n  [inst_3 : IsNoetherian R M] (f : M →ₗ[R] M), Function.Surjective ↑f → Function.Injective ↑f\"},\n {\"role\": \"user\",\n  \"content\": \"Every graph homomorphism from a complete graph is injective. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u} {W : Type v} {G' : SimpleGraph W} (f : ⊤ →g G'), Function.Injective ↑f\"},\n {\"role\": \"user\",\n  \"content\": \"A group homomorphism is injective iff its kernel is trivial. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} [inst : Group α] [inst_1 : Group β] {f : α → β},\\n  IsGroupHom f → (Function.Injective f ↔ ∀ (a : α), f a = 1 → a = 1)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Every surjective homomorphism from a finitely generated free group to itself is injective.\"}]"}
{"text":"Every positive even integer can be written as the sum of two primes.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"For positive `a` and `b`, the prime factors of `a * b` are the union of those of `a` and `b` \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {a b : ℕ}, a ≠ 0 → b ≠ 0 → Nat.factors (a * b) ~ Nat.factors a ++ Nat.factors b\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The only numbers with empty prime factorization are `0` and `1` \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ (n : ℕ), Nat.factorization n = 0 ↔ n = 0 ∨ n = 1\"},\n {\"role\": \"user\", \"content\": \"A finite group of prime order is simple. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : Group α] [inst_1 : Fintype α] {p : ℕ} [hp : Fact (Nat.Prime p)],\\n  Fintype.card α = p → IsSimpleGroup α\"},\n {\"role\": \"user\",\n  \"content\":\n  \"For any positive `k : ℕ` there are infinitely many primes `p` such that `p ≡ 1 [MOD k]`. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {k : ℕ}, k ≠ 0 → Set.Infinite {p | Nat.Prime p ∧ p ≡ 1 [MOD k]}\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If two integers are congruent to a sufficiently large modulus,\\nthey are equal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {a b c : ℤ}, a % b = c → Int.natAbs (a - c) < Int.natAbs b → a = c\"},\n {\"role\": \"user\",\n  \"content\": \"Any common divisor of both elements is a divisor of the GCD. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : CancelCommMonoidWithZero α] [self : GCDMonoid α] {a b c : α}, a ∣ c → a ∣ b → a ∣ gcd c b\"},\n {\"role\": \"user\",\n  \"content\":\n  \"There is a rational power between any two positive elements of an archimedean ordered field. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {n : ℕ} {α : Type u_1} [inst : LinearOrderedField α] [inst_1 : Archimedean α],\\n  n ≠ 0 → ∀ {x y : α}, x < y → 0 < y → ∃ q, 0 < q ∧ x < ↑q ^ n ∧ ↑q ^ n < y\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The numerator and denominator are coprime: it is in \\\"reduced form\\\". \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ (self : ℚ), Nat.coprime (Int.natAbs self.num) self.den\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If a product lies in the prime ideal, then at least one element lies in the prime ideal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : Semiring α] {I : Ideal α} [self : Ideal.IsPrime I] {x y : α}, x * y ∈ I → x ∈ I ∨ y ∈ I\"},\n {\"role\": \"user\",\n  \"content\": \"The product of two positive elements is positive. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [self : StrictOrderedRing α] (a b : α), 0 < a → 0 < b → 0 < a * b\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If `a`, `b` are positive, the prime divisors of `a * b` are the union of those of `a` and `b` \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {a b : ℕ},\\n  a ≠ 0 → b ≠ 0 → List.toFinset (Nat.factors (a * b)) = List.toFinset (Nat.factors a) ∪ List.toFinset (Nat.factors b)\"},\n {\"role\": \"user\",\n  \"content\": \"The only divisors of prime powers are prime powers. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : CancelCommMonoidWithZero α] [dec_irr : (p : Associates α) → Decidable (Irreducible p)]\\n  [inst_1 : UniqueFactorizationMonoid α] [dec : DecidableEq α] [dec' : DecidableEq (Associates α)] {a p : Associates α},\\n  Irreducible p →\\n    ∀ [inst_2 : (n : ℕ) → Decidable (a ∣ p ^ n)] {n : ℕ} (h : a ∣ p ^ n),\\n      a = p ^ Nat.find (_ : ∃ n, (fun n => a ∣ p ^ n) n)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Two natural numbers are equal if and only if they have the same multiples. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {m n : ℕ}, (∀ (a : ℕ), m ∣ a ↔ n ∣ a) ↔ m = n\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Two positive naturals are equal if their prime padic valuations are equal \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (a b : ℕ), a ≠ 0 → b ≠ 0 → (a = b ↔ ∀ (p : ℕ), Nat.Prime p → padicValNat p a = padicValNat p b)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Two natural numbers are equal if and only if they have the same divisors. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {m n : ℕ}, (∀ (a : ℕ), a ∣ m ↔ a ∣ n) ↔ m = n\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The set of natural numbers that are sums of two squares is closed under multiplication. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {a b x y u v : ℕ}, a = x ^ 2 + y ^ 2 → b = u ^ 2 + v ^ 2 → ∃ r s, a * b = r ^ 2 + s ^ 2\"},\n {\"role\": \"user\",\n  \"content\": \"Every nonzero natural number has a unique prime factorization \"},\n {\"role\": \"assistant\", \"content\": \"Set.InjOn Nat.factorization {x | x ≠ 0}\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Every positive even integer can be written as the sum of two primes.\"}]"}
{"text":"Every matrix satisfies its own characteristic polynomial.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The ring of polynomials in finitely many variables is finitely presented. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (R : Type w₁) [inst : CommRing R] (ι : Type u_2) [inst_1 : Finite ι], Algebra.FinitePresentation R (MvPolynomial ι R)\"},\n {\"role\": \"user\", \"content\": \"`ℚ`-algebra implies equal characteristic. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (R : Type u_1) [inst : CommRing R] [inst_1 : Algebra ℚ R] (I : Ideal R), I ≠ ⊤ → CharZero (R ⧸ I)\"},\n {\"role\": \"user\",\n  \"content\": \"The right inverse of matrix A is unique when existing. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {n : Type u'} {α : Type v} [inst : Fintype n] [inst_1 : DecidableEq n] [inst_2 : CommRing α] {A B C : Matrix n n α},\\n  Matrix.mul A B = 1 → Matrix.mul A C = 1 → B = C\"},\n {\"role\": \"user\",\n  \"content\": \"The determinant of a permutation matrix equals its sign. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {n : Type u_1} [inst : DecidableEq n] [inst_1 : Fintype n] {R : Type v} [inst_2 : CommRing R] (σ : Equiv.Perm n),\\n  Matrix.det (PEquiv.toMatrix (Equiv.toPEquiv σ)) = ↑↑(↑Equiv.Perm.sign σ)\"},\n {\"role\": \"user\",\n  \"content\": \"If a matrix has a repeated row, the determinant will be zero. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {n : Type u_1} [inst : DecidableEq n] [inst_1 : Fintype n] {R : Type v} [inst_2 : CommRing R] {M : Matrix n n R}\\n  {i j : n}, i ≠ j → M i = M j → Matrix.det M = 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If a matrix has a repeated column, the determinant will be zero. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {n : Type u_1} [inst : DecidableEq n] [inst_1 : Fintype n] {R : Type v} [inst_2 : CommRing R] {M : Matrix n n R}\\n  {i j : n}, i ≠ j → (∀ (k : n), M k i = M k j) → Matrix.det M = 0\"},\n {\"role\": \"user\", \"content\": \"A minimal polynomial is prime. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {A : Type u_1} {B : Type u_2} [inst : Field A] [inst_1 : Ring B] [inst_2 : IsDomain B] [inst_3 : Algebra A B] {x : B},\\n  IsIntegral A x → Prime (minpoly A x)\"},\n {\"role\": \"user\",\n  \"content\": \"The degree of a minimal polynomial is positive. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {A : Type u_2} {B : Type u_1} [inst : CommRing A] [inst_1 : Ring B] [inst_2 : Algebra A B] {x : B}\\n  [inst_3 : Nontrivial B], IsIntegral A x → 0 < Polynomial.degree (minpoly A x)\"},\n {\"role\": \"user\", \"content\": \"A minimal polynomial is irreducible. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {A : Type u_1} {B : Type u_2} [inst : CommRing A] [inst_1 : Ring B] [inst_2 : Algebra A B] {x : B}\\n  [inst_3 : IsDomain A] [inst_4 : IsDomain B], IsIntegral A x → Irreducible (minpoly A x)\"},\n {\"role\": \"user\", \"content\": \"A minimal polynomial is monic. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {A : Type u_1} {B : Type u_2} [inst : CommRing A] [inst_1 : Ring B] [inst_2 : Algebra A B] {x : B},\\n  IsIntegral A x → Polynomial.Monic (minpoly A x)\"},\n {\"role\": \"user\", \"content\": \"Every zero matrix is diagonal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} {n : Type u_2} [inst : Zero α], Matrix.IsDiag 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If every coefficient of a polynomial is in an ideal `I`, then so is the polynomial itself \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} [inst : CommSemiring R] (I : Ideal (Polynomial R)) (p : Polynomial R),\\n  (∀ (n : ℕ), Polynomial.coeff p n ∈ Ideal.comap Polynomial.C I) → p ∈ I\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Every polynomial is the sum of its weighted homogeneous components. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} {M : Type u_3} [inst : CommSemiring R] {σ : Type u_2} [inst_1 : AddCommMonoid M] (w : σ → M)\\n  (φ : MvPolynomial σ R), ∑ᶠ (m : M), ↑(MvPolynomial.weightedHomogeneousComponent w m) φ = φ\"},\n {\"role\": \"user\",\n  \"content\":\n  \"`charpoly f` is the characteristic polynomial of the matrix of `f` in any basis. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} {M : Type v} [inst : CommRing R] [inst_1 : Nontrivial R] [inst_2 : AddCommGroup M] [inst_3 : Module R M]\\n  [inst_4 : Module.Free R M] [inst_5 : Module.Finite R M] (f : M →ₗ[R] M) {ι : Type w} [inst_6 : Fintype ι]\\n  (b : Basis ι R M), Matrix.charpoly (↑(LinearMap.toMatrix b b) f) = LinearMap.charpoly f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The minimal polynomial of a nonzero element has nonzero constant coefficient. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {A : Type u_1} {B : Type u_2} [inst : Field A] [inst_1 : Ring B] [inst_2 : IsDomain B] [inst_3 : Algebra A B] {x : B},\\n  IsIntegral A x → x ≠ 0 → Polynomial.coeff (minpoly A x) 0 ≠ 0\"},\n {\"role\": \"user\",\n  \"content\": \"Every polynomial is a polynomial in finitely many variables. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {σ : Type u_1} {R : Type u_2} [inst : CommSemiring R] (p : MvPolynomial σ R),\\n  ∃ n f _hf q, p = ↑(MvPolynomial.rename f) q\"},\n {\"role\": \"user\", \"content\": \"Every identity matrix is diagonal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_2} {n : Type u_1} [inst : DecidableEq n] [inst_1 : Zero α] [inst_2 : One α], Matrix.IsDiag 1\"},\n {\"role\": \"user\",\n  \"content\": \"Every matrix satisfies its own characteristic polynomial.\"}]"}
{"text":"The square root of an irrational number is irrational.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\": \"An ideal is radical iff it is equal to its radical. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} [inst : CommSemiring R] {I : Ideal R}, Ideal.radical I = I ↔ Ideal.IsRadical I\"},\n {\"role\": \"user\",\n  \"content\":\n  \"An algebraic integer whose conjugates are all of norm one is a root of unity. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (K : Type u_1) [inst : Field K] [inst_1 : NumberField K] (A : Type u_2) [inst_2 : NormedField A]\\n  [inst_3 : IsAlgClosed A] [inst_4 : NormedAlgebra ℚ A] {x : K},\\n  IsIntegral ℤ x → (∀ (φ : K →+* A), ‖↑φ x‖ = 1) → ∃ n x_1, x ^ n = 1\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Rational numbers are dense in a linear ordered archimedean field. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {𝕜 : Type u_1} [inst : LinearOrderedField 𝕜] [inst_1 : TopologicalSpace 𝕜] [inst_2 : OrderTopology 𝕜]\\n  [inst_3 : Archimedean 𝕜], DenseRange Rat.cast\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Every terminating continued fraction corresponds to a rational number. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u_1} [inst : LinearOrderedField K] [inst_1 : FloorRing K] {v : K},\\n  GeneralizedContinuedFraction.Terminates (GeneralizedContinuedFraction.of v) → ∃ q, v = ↑q\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If `x^n`, `n > 0`, is integer and is not the `n`-th power of an integer, then\\n`x` is irrational. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {x : ℝ} (n : ℕ) (m : ℤ), x ^ n = ↑m → (¬∃ y, x = ↑y) → 0 < n → Irrational x\"},\n {\"role\": \"user\", \"content\": \"The complex numbers are not countable. \"},\n {\"role\": \"assistant\", \"content\": \"¬Set.Countable Set.univ\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A quadratic has no root if its discriminant has no square root. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : CommRing R] {a b c : R},\\n  (∀ (s : R), discrim a b c ≠ s ^ 2) → ∀ (x : R), a * x * x + b * x + c ≠ 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A rational number has only finitely many good rational approximations. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ (ξ : ℚ), Set.Finite {q | |ξ - q| < 1 / ↑q.den ^ 2}\"},\n {\"role\": \"user\",\n  \"content\": \"Every finite convergent corresponds to a rational number. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u_1} [inst : LinearOrderedField K] [inst_1 : FloorRing K] (v : K) (n : ℕ),\\n  ∃ q, GeneralizedContinuedFraction.convergents (GeneralizedContinuedFraction.of v) n = ↑q\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If `x + y` is irrational, then at least one of `x` and `y` is irrational. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {x y : ℝ}, Irrational (x + y) → Irrational x ∨ Irrational y\"},\n {\"role\": \"user\",\n  \"content\": \"The continued fraction of a rational number terminates. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (q : ℚ), GeneralizedContinuedFraction.Terminates (GeneralizedContinuedFraction.of q)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"There is an irrational number `r` between any two reals `x < r < y`. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {x y : ℝ}, x < y → ∃ r, Irrational r ∧ x < r ∧ r < y\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A number satisfying the Liouville condition with exponent `p > 1` is an irrational number. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {p x : ℝ}, LiouvilleWith p x → 1 < p → Irrational x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The real square root is at most the natural square root plus one \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {a : ℕ}, Real.sqrt ↑a ≤ ↑(Nat.sqrt a) + 1\"},\n {\"role\": \"user\",\n  \"content\": \"The natural square root is at most the real square root \"},\n {\"role\": \"assistant\", \"content\": \"∀ {a : ℕ}, ↑(Nat.sqrt a) ≤ Real.sqrt ↑a\"},\n {\"role\": \"user\", \"content\": \"The golden ratio is irrational. \"},\n {\"role\": \"assistant\", \"content\": \"Irrational goldenRatio\"},\n {\"role\": \"user\", \"content\": \"**Irrationality of the Square Root of 2** \"},\n {\"role\": \"assistant\", \"content\": \"Irrational (Real.sqrt 2)\"},\n {\"role\": \"user\",\n  \"content\": \"The conjugate of the golden ratio is irrational. \"},\n {\"role\": \"assistant\", \"content\": \"Irrational goldenConj\"},\n {\"role\": \"user\", \"content\": \"A transcendental real number is irrational. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {r : ℝ}, Transcendental ℚ r → Irrational r\"},\n {\"role\": \"user\",\n  \"content\": \"The square root of an irrational number is irrational.\"}]"}
{"text":"If the square of a number is even, the number itself is even.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"`2` is a square modulo an odd prime `p` iff `p` is congruent to `1` or `7` mod `8`. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {p : ℕ} [inst : Fact (Nat.Prime p)], p ≠ 2 → (IsSquare 2 ↔ p % 8 = 1 ∨ p % 8 = 7)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"`2` is a square in `F` iff `#F` is not congruent to `3` or `5` mod `8`. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {F : Type u_1} [inst : Field F] [inst_1 : Fintype F], IsSquare 2 ↔ Fintype.card F % 8 ≠ 3 ∧ Fintype.card F % 8 ≠ 5\"},\n {\"role\": \"user\", \"content\": \"**Four squares theorem** \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ (n : ℕ), ∃ a b c d, a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 = n\"},\n {\"role\": \"user\", \"content\": \"The square of the symbol is 1 if `p ∤ a`. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (p : ℕ) [inst : Fact (Nat.Prime p)] {a : ℤ}, ↑a ≠ 0 → legendreSym p a ^ 2 = 1\"},\n {\"role\": \"user\", \"content\": \"**Euler's four-square identity**. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : CommRing R] (a b c d x y z w : R),\\n  (a * x - b * y - c * z - d * w) ^ 2 + (a * y + b * x + c * w - d * z) ^ 2 + (a * z - b * w + c * x + d * y) ^ 2 +\\n      (a * w + b * z - c * y + d * x) ^ 2 =\\n    (a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2) * (x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A square has a lifting if and only if its (right) adjoint square has a lifting. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {C : Type u_1} {D : Type u_4} [inst : CategoryTheory.Category C] [inst_1 : CategoryTheory.Category D]\\n  {G : CategoryTheory.Functor C D} {F : CategoryTheory.Functor D C} {A B : C} {X Y : D} {i : A ⟶ B} {p : X ⟶ Y}\\n  {u : G.obj A ⟶ X} {v : G.obj B ⟶ Y} (sq : CategoryTheory.CommSq u (G.map i) p v) (adj : G ⊣ F),\\n  CategoryTheory.CommSq.HasLift\\n      (_ :\\n        CategoryTheory.CommSq (↑(CategoryTheory.Adjunction.homEquiv adj A X) u) i (F.map p)\\n          (↑(CategoryTheory.Adjunction.homEquiv adj B Y) v)) ↔\\n    CategoryTheory.CommSq.HasLift sq\"},\n {\"role\": \"user\",\n  \"content\": \"The square of `J(a | b)` is `1` when `a` and `b` are coprime. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {a : ℤ} {b : ℕ}, Int.gcd a ↑b = 1 → jacobiSym a b ^ 2 = 1\"},\n {\"role\": \"user\",\n  \"content\": \"The square of a quadratic character is the trivial character. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} [inst : CommRing R] {R' : Type v} [inst_1 : CommRing R'] {χ : MulChar R R'},\\n  MulChar.IsQuadratic χ → χ ^ 2 = 1\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The sum over the values of the quadratic character is zero when the characteristic is odd. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {F : Type u_1} [inst : Field F] [inst_1 : Fintype F] [inst_2 : DecidableEq F],\\n  ringChar F ≠ 2 → (Finset.sum Finset.univ fun a => ↑(quadraticChar F) a) = 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Two natural numbers are equal if and only if they have the same divisors. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {m n : ℕ}, (∀ (a : ℕ), a ∣ m ↔ a ∣ n) ↔ m = n\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The `n`th power of a quadratic character is itself, when `n` is odd. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} [inst : CommRing R] {R' : Type v} [inst_1 : CommRing R'] {χ : MulChar R R'},\\n  MulChar.IsQuadratic χ → ∀ {n : ℕ}, Odd n → χ ^ n = χ\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Commutativity of a square is preserved when taking quotients by an ideal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} {S : Type v} [inst : CommRing R] [inst_1 : CommRing S] {R' : Type u_1} {S' : Type u_2}\\n  [inst_2 : CommRing R'] [inst_3 : CommRing S'] {f : R →+* S} {f' : R' →+* S'} {g : R →+* R'} {g' : S →+* S'}\\n  (hfg : RingHom.comp f' g = RingHom.comp g' f) (I : Ideal S'),\\n  let leq := (_ : Ideal.comap f (Ideal.comap g' I) ≤ Ideal.comap g (Ideal.comap f' I));\\n  RingHom.comp (Ideal.quotientMap I g' (_ : Ideal.comap g' I ≤ Ideal.comap g' I))\\n      (Ideal.quotientMap (Ideal.comap g' I) f\\n        (_ : Ideal.comap f (Ideal.comap g' I) ≤ Ideal.comap f (Ideal.comap g' I))) =\\n    RingHom.comp (Ideal.quotientMap I f' (_ : Ideal.comap f' I ≤ Ideal.comap f' I))\\n      (Ideal.quotientMap (Ideal.comap f' I) g leq)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The square of the quadratic character on nonzero arguments is `1`. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {F : Type u_1} [inst : Field F] [inst_1 : Fintype F] [inst_2 : DecidableEq F] {a : F},\\n  a ≠ 0 → ↑(quadraticChar F) a ^ 2 = 1\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If `-1` is a square modulo the natural number `n`, then `n` is a sum of two squares. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {n : ℕ}, IsSquare (-1) → ∃ x y, n = x ^ 2 + y ^ 2\"},\n {\"role\": \"user\",\n  \"content\":\n  \"**Euler's four-square identity**, a version for natural numbers. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (a b c d x y z w : ℕ),\\n  Int.natAbs (↑a * ↑x - ↑b * ↑y - ↑c * ↑z - ↑d * ↑w) ^ 2 + Int.natAbs (↑a * ↑y + ↑b * ↑x + ↑c * ↑w - ↑d * ↑z) ^ 2 +\\n        Int.natAbs (↑a * ↑z - ↑b * ↑w + ↑c * ↑x + ↑d * ↑y) ^ 2 +\\n      Int.natAbs (↑a * ↑w + ↑b * ↑z - ↑c * ↑y + ↑d * ↑x) ^ 2 =\\n    (a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2) * (x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"In a finite field of characteristic `2`, all elements are squares. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {F : Type u_1} [inst : Field F] [inst_1 : Finite F], ringChar F = 2 → ∀ (a : F), IsSquare a\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Two natural numbers are equal if and only if they have the same multiples. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {m n : ℕ}, (∀ (a : ℕ), m ∣ a ↔ n ∣ a) ↔ m = n\"},\n {\"role\": \"user\",\n  \"content\": \"The convolution of two even functions is also even. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {𝕜 : Type u𝕜} {G : Type uG} {E : Type uE} {E' : Type uE'} {F : Type uF} [inst : NormedAddCommGroup E]\\n  [inst_1 : NormedAddCommGroup E'] [inst_2 : NormedAddCommGroup F] {f : G → E} {g : G → E'} {x : G}\\n  [inst_3 : NontriviallyNormedField 𝕜] [inst_4 : NormedSpace 𝕜 E] [inst_5 : NormedSpace 𝕜 E'] [inst_6 : NormedSpace 𝕜 F]\\n  (L : E →L[𝕜] E' →L[𝕜] F) [inst_7 : MeasurableSpace G] {μ : MeasureTheory.Measure G} [inst_8 : NormedSpace ℝ F]\\n  [inst_9 : AddCommGroup G] [inst_10 : MeasureTheory.Measure.IsAddLeftInvariant μ]\\n  [inst_11 : MeasureTheory.Measure.IsNegInvariant μ] [inst_12 : MeasurableNeg G] [inst_13 : MeasurableAdd G],\\n  (∀ᵐ (x : G) ∂μ, f (-x) = f x) → (∀ᵐ (x : G) ∂μ, g (-x) = g x) → convolution f g L (-x) = convolution f g L x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The set of natural numbers that are sums of two squares is closed under multiplication. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {a b x y u v : ℕ}, a = x ^ 2 + y ^ 2 → b = u ^ 2 + v ^ 2 → ∃ r s, a * b = r ^ 2 + s ^ 2\"},\n {\"role\": \"user\",\n  \"content\": \"The sum of two squares is zero iff both elements are zero. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : LinearOrderedRing α] {x y : α}, x * x + y * y = 0 ↔ x = 0 ∧ y = 0\"},\n {\"role\": \"user\",\n  \"content\": \"If the square of a number is even, the number itself is even.\"}]"}
{"text":"In a finite commutative ring, all prime ideals are maximal.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The unique maximal ideal of the localization at `I.prime_compl` lies over the ideal `I`. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : CommSemiring R] {I : Ideal R} [hI : Ideal.IsPrime I],\\n  Ideal.comap (algebraMap R (Localization.AtPrime I)) (LocalRing.maximalIdeal (Localization (Ideal.primeCompl I))) = I\"},\n {\"role\": \"user\",\n  \"content\": \"The only constant in a maximal ideal over a field is `0`. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} [inst : Ring R],\\n  IsField R → ∀ (I : Ideal (Polynomial R)) [hI : Ideal.IsMaximal I] (x : R), ↑Polynomial.C x ∈ I → x = 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The prime spectrum of a commutative ring is a compact topological space. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} [inst : CommRing R], CompactSpace (PrimeSpectrum R)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The variable of the power series ring over an integral domain is prime.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsDomain R], Prime PowerSeries.X\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The `Ideal.closure` of a maximal ideal in a complete normed ring is the ideal itself. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : NormedRing R] [inst_1 : CompleteSpace R] {I : Ideal R}, Ideal.IsMaximal I → Ideal.closure I = I\"},\n {\"role\": \"user\",\n  \"content\": \"The kernel of a homomorphism to a field is a maximal ideal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} {K : Type u_2} {F : Type u_3} [inst : Ring R] [inst_1 : Field K] [inst_2 : RingHomClass F R K] (f : F),\\n  Function.Surjective ↑f → Ideal.IsMaximal (RingHom.ker f)\"},\n {\"role\": \"user\",\n  \"content\": \"This ideal is maximal in the collection of proper ideals. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {P : Type u_1} [inst : LE P] {I : Order.Ideal P} [self : Order.Ideal.IsMaximal I] ⦃J : Order.Ideal P⦄,\\n  I < J → ↑J = Set.univ\"},\n {\"role\": \"user\",\n  \"content\": \"The category of commutative rings has all limits. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"CategoryTheory.Limits.HasLimitsOfSize.{v, v, max u v, max (u + 1) (v + 1)} CommRingCatMax\"},\n {\"role\": \"user\",\n  \"content\": \"When a ring is not a field, the maximal ideals are nontrivial. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : CommSemiring R] [inst_1 : Nontrivial R] {M : Ideal R}, Ideal.IsMaximal M → ¬IsField R → M ≠ ⊥\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A ring is Noetherian if and only if all its ideals are finitely-generated. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (R : Type u_1) [inst : Semiring R], IsNoetherianRing R ↔ ∀ (I : Ideal R), Ideal.FG I\"},\n {\"role\": \"user\", \"content\": \"Any finitely generated ideal is principal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} [inst : CommRing R] [self : IsBezout R] (I : Ideal R), Ideal.FG I → Submodule.IsPrincipal I\"},\n {\"role\": \"user\",\n  \"content\": \"Krull's theorem: a nontrivial ring has a maximal ideal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (α : Type u) [inst : Semiring α] [inst_1 : Nontrivial α], ∃ M, Ideal.IsMaximal M\"},\n {\"role\": \"user\",\n  \"content\": \"Maximal ideals in complete normed rings are closed. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : NormedRing R] [inst_1 : CompleteSpace R] {I : Ideal R} [hI : Ideal.IsMaximal I], IsClosed ↑I\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The quotient of a ring by an ideal is a field iff the ideal is maximal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} [inst : CommRing R] (I : Ideal R), Ideal.IsMaximal I ↔ IsField (R ⧸ I)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If the quotient by an ideal is a field, then the ideal is maximal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} [inst : CommRing R] (I : Ideal R), IsField (R ⧸ I) → Ideal.IsMaximal I\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If all prime ideals in a commutative ring are principal, so are all other ideals. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} [inst : CommRing R],\\n  (∀ (P : Ideal R), Ideal.IsPrime P → Submodule.IsPrincipal P) → IsPrincipalIdealRing R\"},\n {\"role\": \"user\",\n  \"content\": \"In a finite commutative ring, all prime ideals are maximal.\"}]"}
{"text":"A topological space $X$ is Hausdorff if and only if the diagonal is a closed set in $X × X$.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Any continuous bijection of compact Hausdorff spaces is an isomorphism. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X Y : CompHaus} (f : X ⟶ Y), Function.Bijective ↑f → CategoryTheory.IsIso f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The Hausdorff distance between two sets and their closures coincide \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : PseudoMetricSpace α] {s t : Set α},\\n  Metric.hausdorffDist (closure s) (closure t) = Metric.hausdorffDist s t\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A linear order with order topology is a completely normal Hausdorff topological space. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} [inst : LinearOrder X] [inst_1 : TopologicalSpace X] [inst : OrderTopology X], T5Space X\"},\n {\"role\": \"user\",\n  \"content\":\n  \"For any topological space `X`, its one point compactification is a compact space. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X], CompactSpace (OnePoint X)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A continuous injective map from a compact space to a Hausdorff space is a closed embedding. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] [inst_2 : CompactSpace α]\\n  [inst_3 : T2Space β] {f : α → β}, Continuous f → Function.Injective f → ClosedEmbedding f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A continuous surjective map from a compact space to a Hausdorff space is a quotient map. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] [inst_2 : CompactSpace α]\\n  [inst_3 : T2Space β] {f : α → β}, Function.Surjective f → Continuous f → QuotientMap f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Two closed sets are at zero Hausdorff edistance if and only if they coincide \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : PseudoEMetricSpace α] {s t : Set α},\\n  IsClosed s → IsClosed t → (EMetric.hausdorffEdist s t = 0 ↔ s = t)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Any continuous function on compact Hausdorff spaces is a closed map. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {X Y : CompHaus} (f : X ⟶ Y), IsClosedMap ↑f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A locally compact Hausdorff totally disconnected space has a basis with clopen elements. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {H : Type u_1} [inst : TopologicalSpace H] [inst_1 : LocallyCompactSpace H] [inst_2 : T2Space H]\\n  [inst_3 : TotallyDisconnectedSpace H], TopologicalSpace.IsTopologicalBasis {s | IsClopen s}\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A locally compact Hausdorff space is totally disconnected\\nif and only if it is totally separated. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {H : Type u_1} [inst : TopologicalSpace H] [inst_1 : LocallyCompactSpace H] [inst_2 : T2Space H],\\n  TotallyDisconnectedSpace H ↔ TotallySeparatedSpace H\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Two closed sets are at zero Hausdorff distance if and only if they coincide \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : PseudoMetricSpace α] {s t : Set α},\\n  IsClosed s → IsClosed t → EMetric.hausdorffEdist s t ≠ ⊤ → (Metric.hausdorffDist s t = 0 ↔ s = t)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"In a complete space, the type of closed subsets is complete for the\\nHausdorff edistance. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : EMetricSpace α] [inst_1 : CompleteSpace α], CompleteSpace (TopologicalSpace.Closeds α)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Every two points in a Hausdorff space admit disjoint open neighbourhoods. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [self : T2Space α] (x y : α),\\n  x ≠ y → ∃ u v, IsOpen u ∧ IsOpen v ∧ x ∈ u ∧ y ∈ v ∧ Disjoint u v\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A continuous map from a compact space to a Hausdorff space is a closed map. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] [inst_2 : CompactSpace α]\\n  [inst_3 : T2Space β] {f : α → β}, Continuous f → IsClosedMap f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A topological space $X$ is Hausdorff if and only if the diagonal is a closed set in $X × X$.\"}]"}
{"text":"If every point of a subset of a topological space is contained in some open set, the subset itself is open.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"In a topological vector space, the interior of a convex set is convex. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {𝕜 : Type u_2} {E : Type u_1} [inst : LinearOrderedField 𝕜] [inst_1 : AddCommGroup E] [inst_2 : Module 𝕜 E]\\n  [inst_3 : TopologicalSpace E] [inst_4 : TopologicalAddGroup E] [inst_5 : ContinuousConstSMul 𝕜 E] {s : Set E},\\n  Convex 𝕜 s → Convex 𝕜 (interior s)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The second projection in a product of topological spaces sends open sets to open sets. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β], IsOpenMap Prod.snd\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The first projection in a product of topological spaces sends open sets to open sets. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β], IsOpenMap Prod.fst\"},\n {\"role\": \"user\", \"content\": \"The complement of a closed set is an open set. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {s : Set α} [self : IsClosed s], IsOpen sᶜ\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A subspace is dense iff its topological closure is the entire space. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} {M : Type v} [inst : Semiring R] [inst_1 : TopologicalSpace M] [inst_2 : AddCommMonoid M]\\n  [inst_3 : Module R M] [inst_4 : ContinuousConstSMul R M] [inst_5 : ContinuousAdd M] {s : Submodule R M},\\n  Dense ↑s ↔ Submodule.topologicalClosure s = ⊤\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The only open sets in the indiscrete topology are the empty set and the whole space. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {α : Type u_1} (U : Set α), IsOpen U ↔ U = ∅ ∨ U = Set.univ\"},\n {\"role\": \"user\",\n  \"content\": \"In a compact space, the type of closed subsets is compact. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : EMetricSpace α] [inst_1 : CompactSpace α], CompactSpace (TopologicalSpace.Closeds α)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Any uncountable closed set in a second countable space contains a nonempty perfect subset.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] {C : Set α} [inst_1 : TopologicalSpace.SecondCountableTopology α],\\n  IsClosed C → ¬Set.Countable C → ∃ D, Perfect D ∧ Set.Nonempty D ∧ D ⊆ C\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A nonempty open subset of a preirreducible subspace is dense in the subspace. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {S U : Set α},\\n  IsPreirreducible S → IsOpen U → Set.Nonempty (S ∩ U) → S ⊆ closure (S ∩ U)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Points of a finite set can be separated by open sets from each other. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : T2Space α] {s : Set α},\\n  Set.Finite s → ∃ U, (∀ (x : α), x ∈ U x ∧ IsOpen (U x)) ∧ Set.PairwiseDisjoint s U\"},\n {\"role\": \"user\",\n  \"content\": \"Subsets of a given closed subset form a closed set \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : EMetricSpace α] {s : Set α}, IsClosed s → IsClosed {t | ↑t ⊆ s}\"},\n {\"role\": \"user\",\n  \"content\":\n  \"In a locally compact space, every compact set is contained in the interior of a compact set. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LocallyCompactSpace α] {K : Set α},\\n  IsCompact K → ∃ K', IsCompact K' ∧ K ⊆ interior K'\"},\n {\"role\": \"user\",\n  \"content\": \"In a (pre)irreducible space, a nonempty open set is dense. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : PreirreducibleSpace α] {s : Set α},\\n  IsOpen s → Set.Nonempty s → Dense s\"},\n {\"role\": \"user\",\n  \"content\": \"A closed subset of a compact set is a compact set. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {s t : Set α}, IsCompact s → IsClosed t → t ⊆ s → IsCompact t\"},\n {\"role\": \"user\",\n  \"content\":\n  \"An open set in the indiscrete topology is either empty or the whole space. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [t : TopologicalSpace α], t = ⊤ → ∀ (U : TopologicalSpace.Opens α), U = ⊥ ∨ U = ⊤\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If every point of a subset of a topological space is contained in some open set, the subset itself is open.\"}]"}
{"text":"Every non-identity element of a free group is of infinite order.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A group is finitely generated if and only if it is finitely generated as a monoid. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {G : Type u_1} [inst : Group G], Group.FG G ↔ Monoid.FG G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Every nonarchimedean ring is naturally a nonarchimedean additive group. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (R : Type u_1) [inst : Ring R] [inst_1 : TopologicalSpace R] [t : NonarchimedeanRing R], NonarchimedeanAddGroup R\"},\n {\"role\": \"user\",\n  \"content\": \"Subgroups of torsion-free groups are torsion-free. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G], Monoid.IsTorsionFree G → ∀ (H : Subgroup G), Monoid.IsTorsionFree { x // x ∈ H }\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Inverses of elements of finite additive order\\nhave finite additive order.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddGroup G] {x : G}, IsOfFinAddOrder (-x) ↔ IsOfFinAddOrder x\"},\n {\"role\": \"user\", \"content\": \"0 is of finite order in any additive monoid.\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {G : Type u_1} [inst : AddMonoid G], IsOfFinAddOrder 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A nontrivial monoid is not torsion-free if any nontrivial element has finite order. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (G : Type u_1) [inst : Monoid G], ¬Monoid.IsTorsionFree G ↔ ∃ g, g ≠ 1 ∧ IsOfFinOrder g\"},\n {\"role\": \"user\", \"content\": \"A finite group of prime order is simple. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : Group α] [inst_1 : Fintype α] {p : ℕ} [hp : Fact (Nat.Prime p)],\\n  Fintype.card α = p → IsSimpleGroup α\"},\n {\"role\": \"user\", \"content\": \"A finite group of prime order is cyclic.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : AddGroup α] [inst_1 : Fintype α] {p : ℕ} [hp : Fact (Nat.Prime p)],\\n  Fintype.card α = p → IsAddCyclic α\"},\n {\"role\": \"user\", \"content\": \"1 is of finite order in any monoid. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {G : Type u_1} [inst : Monoid G], IsOfFinOrder 1\"},\n {\"role\": \"user\",\n  \"content\": \"Elements of finite order are closed under multiplication. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : CommMonoid G] {x y : G}, IsOfFinOrder x → IsOfFinOrder y → IsOfFinOrder (x * y)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The image of an element of finite additive order has finite additive order.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_2} {H : Type u_1} [inst : AddMonoid G] [inst_1 : AddMonoid H] (f : G →+ H) {x : G},\\n  IsOfFinAddOrder x → IsOfFinAddOrder (↑f x)\"},\n {\"role\": \"user\", \"content\": \"A finite group of prime order is cyclic. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : Group α] [inst_1 : Fintype α] {p : ℕ} [hp : Fact (Nat.Prime p)], Fintype.card α = p → IsCyclic α\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A group element has finite additive order iff its order is positive.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddMonoid G] {x : G}, 0 < addOrderOf x ↔ IsOfFinAddOrder x\"},\n {\"role\": \"user\",\n  \"content\": \"Elements of finite order are of finite order in submonoids.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddMonoid G] (H : AddSubmonoid G) (x : { x // x ∈ H }), IsOfFinAddOrder x ↔ IsOfFinAddOrder ↑x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Inverses of elements of finite additive order have finite additive order.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddGroup G] {x : G}, IsOfFinAddOrder x → IsOfFinAddOrder (-x)\"},\n {\"role\": \"user\",\n  \"content\": \"The image of an element of finite order has finite order. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_2} {H : Type u_1} [inst : Monoid G] [inst_1 : Monoid H] (f : G →* H) {x : G},\\n  IsOfFinOrder x → IsOfFinOrder (↑f x)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A monoid is not a torsion monoid if it has an element of infinite order. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (G : Type u_1) [inst : Monoid G], ¬Monoid.IsTorsion G ↔ ∃ g, ¬IsOfFinOrder g\"},\n {\"role\": \"user\",\n  \"content\": \"A group element has finite order iff its order is positive. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Monoid G] {x : G}, 0 < orderOf x ↔ IsOfFinOrder x\"},\n {\"role\": \"user\",\n  \"content\": \"Every nonzero element of a group with zero is invertible. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [self : LinearOrderedCommGroupWithZero α] (a : α), a ≠ 0 → a * a⁻¹ = 1\"},\n {\"role\": \"user\",\n  \"content\": \"Inverses of elements of finite order have finite order. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] {x : G}, IsOfFinOrder x⁻¹ ↔ IsOfFinOrder x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Every non-identity element of a free group is of infinite order.\"}]"}
{"text":"An element of a discrete valuation ring is a unit if and only if it has a valuation of zero.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"An ideal which contains an element within `1` of `1 : R` is the unit ideal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : NormedRing R] [inst_1 : CompleteSpace R] (I : Ideal R) {x : R}, x ∈ I → ‖1 - x‖ < 1 → I = ⊤\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If `v` is an additive valuation on a division ring then `v(x) = ⊤` iff `x = 0`. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u_2} [inst : DivisionRing K] {Γ₀ : Type u_1} [inst_1 : LinearOrderedAddCommMonoidWithTop Γ₀]\\n  [inst_2 : Nontrivial Γ₀] (v : AddValuation K Γ₀) {x : K}, ↑v x = ⊤ ↔ x = 0\"},\n {\"role\": \"user\",\n  \"content\": \"Nonzero divisors have valuation greater than zero. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : IsDedekindDomain R]\\n  (v : IsDedekindDomain.HeightOneSpectrum R) (x : { x // x ∈ nonZeroDivisors R }),\\n  0 < IsDedekindDomain.HeightOneSpectrum.intValuationDef v ↑x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"In a normed ring, the powers of an element x with `‖x‖ < 1` tend to zero. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : NormedRing R] {x : R}, ‖x‖ < 1 → Filter.Tendsto (fun n => x ^ n) Filter.atTop (nhds 0)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"In a monoid with zero, either zero and one are nonequal, or zero is the only element. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {M₀ : Type u_1} [inst : MulZeroOneClass M₀], 0 ≠ 1 ∨ ∀ (a : M₀), a = 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A subring of a ring with no zero divisors has no zero divisors. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : Ring R] [inst_1 : NoZeroDivisors R] (s : Subring R), NoZeroDivisors { x // x ∈ s }\"},\n {\"role\": \"user\", \"content\": \"Nonzero divisors have nonzero valuation. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : IsDedekindDomain R]\\n  (v : IsDedekindDomain.HeightOneSpectrum R) (x : { x // x ∈ nonZeroDivisors R }),\\n  IsDedekindDomain.HeightOneSpectrum.intValuationDef v ↑x ≠ 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"In a monoid with zero, zero equals one if and only if all elements of that semiring\\nare equal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {M₀ : Type u_1} [inst : MulZeroOneClass M₀], 0 = 1 ↔ Subsingleton M₀\"},\n {\"role\": \"user\", \"content\": \"Nonzero elements have nonzero adic valuation. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : IsDedekindDomain R]\\n  (v : IsDedekindDomain.HeightOneSpectrum R) (x : R), x ≠ 0 → IsDedekindDomain.HeightOneSpectrum.intValuationDef v x ≠ 0\"},\n {\"role\": \"user\",\n  \"content\": \"An element is in the kernel if and only if it maps to zero.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} {S : Type v} {F : Type u_1} [inst : Semiring R] [inst_1 : Semiring S] [rcf : RingHomClass F R S] (f : F)\\n  {r : R}, r ∈ RingHom.ker f ↔ ↑f r = 0\"},\n {\"role\": \"user\", \"content\": \"The `v`-adic valuation of `0 : R` equals 0. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : IsDedekindDomain R]\\n  (v : IsDedekindDomain.HeightOneSpectrum R), IsDedekindDomain.HeightOneSpectrum.intValuationDef v 0 = 0\"},\n {\"role\": \"user\", \"content\": \"A non-unital subring contains the ring's 0. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} [inst : NonUnitalNonAssocRing R] (s : NonUnitalSubring R), 0 ∈ s\"},\n {\"role\": \"user\",\n  \"content\": \"A nonzero ideal has an element of minimal norm. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_2} {S : Type u_1} [inst : EuclideanDomain R] [inst_1 : CommRing S] [inst_2 : IsDomain S]\\n  [inst_3 : Algebra R S] (abv : AbsoluteValue R ℤ) (I : { x // x ∈ nonZeroDivisors (Ideal S) }),\\n  ∃ b, b ∈ ↑I ∧ b ≠ 0 ∧ ∀ (c : S), c ∈ ↑I → ↑abv (↑(Algebra.norm R) c) < ↑abv (↑(Algebra.norm R) b) → c = 0\"},\n {\"role\": \"user\",\n  \"content\": \"A ring is a `ℚ`-algebra iff it has equal characteristic zero. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (R : Type u_1) [inst : CommRing R], Nonempty (Algebra ℚ R) ↔ ∀ (I : Ideal R), I ≠ ⊤ → CharZero (R ⧸ I)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"In a monoid with zero, if zero equals one, then zero is the only element. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {M₀ : Type u_1} [inst : MulZeroOneClass M₀], 0 = 1 → ∀ (a : M₀), a = 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A product of ideals in an integral domain is zero if and only if one of the terms is zero. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsDomain R] {s : Multiset (Ideal R)},\\n  Multiset.prod s = ⊥ ↔ ∃ I, I ∈ s ∧ I = ⊥\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If `v` is a valuation on a division ring then `v(x) = 0` iff `x = 0`. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u_2} [inst : DivisionRing K] {Γ₀ : Type u_1} [inst_1 : LinearOrderedCommMonoidWithZero Γ₀]\\n  [inst_2 : Nontrivial Γ₀] (v : Valuation K Γ₀) {x : K}, ↑v x = 0 ↔ x = 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"An element of a discrete valuation ring is a unit if and only if it has a valuation of zero.\"}]"}
{"text":"For any two relatively prime positive integers $a$ and $b$, every sufficiently large natural number $N$ can be written as a linear combination $ax + by$ of $a$ and $b$, where both $x$ and $y$ are natural numbers.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\": \"Infinitely many natural numbers are equal to `d` mod `n`. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {n : ℕ}, n ≠ 0 → ∀ (d : ℕ), ∃ᶠ (m : ℕ) in Filter.atTop, m ≡ d [MOD n]\"},\n {\"role\": \"user\",\n  \"content\": \"The prime factorizations of coprime `a` and `b` are disjoint \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {a b : ℕ}, Nat.coprime a b → Disjoint (Nat.factorization a).support (Nat.factorization b).support\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Rational numbers are dense in a linear ordered archimedean field. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {𝕜 : Type u_1} [inst : LinearOrderedField 𝕜] [inst_1 : TopologicalSpace 𝕜] [inst_2 : OrderTopology 𝕜]\\n  [inst_3 : Archimedean 𝕜], DenseRange Rat.cast\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If `p` is a prime factor of `a` then `p` is also a prime factor of `a * b` for any `b > 0` \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {p a b : ℕ}, p ∈ Nat.factors a → b ≠ 0 → p ∈ Nat.factors (a * b)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If two integers are congruent to a sufficiently large modulus,\\nthey are equal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {a b c : ℤ}, a % b = c → Int.natAbs (a - c) < Int.natAbs b → a = c\"},\n {\"role\": \"user\",\n  \"content\":\n  \"There is a rational power between any two positive elements of an archimedean ordered field. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {n : ℕ} {α : Type u_1} [inst : LinearOrderedField α] [inst_1 : Archimedean α],\\n  n ≠ 0 → ∀ {x y : α}, x < y → 0 < y → ∃ q, 0 < q ∧ x < ↑q ^ n ∧ ↑q ^ n < y\"},\n {\"role\": \"user\", \"content\": \"For `a ≤ b`, there is a `c` so `b = a * c`. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [self : CanonicallyOrderedMonoid α] {a b : α}, a ≤ b → ∃ c, b = a * c\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Two natural numbers are equal if and only if they have the same divisors. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {m n : ℕ}, (∀ (a : ℕ), a ∣ m ↔ a ∣ n) ↔ m = n\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If `p` is a prime factor of `b` then `p` is also a prime factor of `a * b` for any `a > 0` \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {p a b : ℕ}, p ∈ Nat.factors b → a ≠ 0 → p ∈ Nat.factors (a * b)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"For coprime `a` and `b` the prime factorization `a * b` is the union of those of `a` and `b` \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {a b : ℕ},\\n  Nat.coprime a b → (Nat.factorization (a * b)).support = (Nat.factorization a).support ∪ (Nat.factorization b).support\"},\n {\"role\": \"user\",\n  \"content\":\n  \"For coprime `a` and `b`, the prime factors of `a * b` are the union of those of `a` and `b` \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {a b : ℕ}, Nat.coprime a b → Nat.factors (a * b) ~ Nat.factors a ++ Nat.factors b\"},\n {\"role\": \"user\",\n  \"content\": \"Every nonzero natural number has a unique prime factorization \"},\n {\"role\": \"assistant\", \"content\": \"Set.InjOn Nat.factorization {x | x ≠ 0}\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Two natural numbers are equal if and only if they have the same multiples. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {m n : ℕ}, (∀ (a : ℕ), m ∣ a ↔ n ∣ a) ↔ m = n\"},\n {\"role\": \"user\",\n  \"content\":\n  \"For positive `a` and `b`, the prime factors of `a * b` are the union of those of `a` and `b` \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {a b : ℕ}, a ≠ 0 → b ≠ 0 → Nat.factors (a * b) ~ Nat.factors a ++ Nat.factors b\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If `a`, `b` are positive, the prime divisors of `a * b` are the union of those of `a` and `b` \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {a b : ℕ},\\n  a ≠ 0 → b ≠ 0 → List.toFinset (Nat.factors (a * b)) = List.toFinset (Nat.factors a) ∪ List.toFinset (Nat.factors b)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The set of natural numbers that are sums of two squares is closed under multiplication. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {a b x y u v : ℕ}, a = x ^ 2 + y ^ 2 → b = u ^ 2 + v ^ 2 → ∃ r s, a * b = r ^ 2 + s ^ 2\"},\n {\"role\": \"user\",\n  \"content\":\n  \"For any two relatively prime positive integers $a$ and $b$, every sufficiently large natural number $N$ can be written as a linear combination $ax + by$ of $a$ and $b$, where both $x$ and $y$ are natural numbers.\"}]"}
{"text":"Every field is a ring.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A ring is Noetherian if and only if all its ideals are finitely-generated. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (R : Type u_1) [inst : Semiring R], IsNoetherianRing R ↔ ∀ (I : Ideal R), Ideal.FG I\"},\n {\"role\": \"user\",\n  \"content\": \"The characteristic of a finite ring cannot be zero. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (R : Type u_1) [inst : NonAssocRing R] (p : ℕ) [inst : CharP R p] [inst : Finite R], p ≠ 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Any conditionally complete linearly ordered field is archimedean. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : ConditionallyCompleteLinearOrderedField α], Archimedean α\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If two rings are isomorphic, and the second is a domain, then so is the first. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {A : Type u_1} (B : Type u_2) [inst : Ring A] [inst_1 : Ring B] [inst_2 : IsDomain B], A ≃+* B → IsDomain A\"},\n {\"role\": \"user\", \"content\": \"A subring contains the ring's 1. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {R : Type u} [inst : Ring R] (s : Subring R), 1 ∈ s\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The quotient of a ring by an ideal is a field iff the ideal is maximal. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} [inst : CommRing R] (I : Ideal R), Ideal.IsMaximal I ↔ IsField (R ⧸ I)\"},\n {\"role\": \"user\", \"content\": \"A seminormed ring is a topological ring. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : NonUnitalSeminormedRing α], TopologicalRing α\"},\n {\"role\": \"user\", \"content\": \"Every ring involution must be its own inverse \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {F : Type u_1} {R : outParam (Type u_2)} [inst : Semiring R] [self : RingInvoClass F R] (f : F) (x : R),\\n  MulOpposite.unop (↑f (MulOpposite.unop (↑f x))) = x\"},\n {\"role\": \"user\",\n  \"content\": \"When a ring is not a field, the maximal ideals are nontrivial. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : CommSemiring R] [inst_1 : Nontrivial R] {M : Ideal R}, Ideal.IsMaximal M → ¬IsField R → M ≠ ⊥\"},\n {\"role\": \"user\", \"content\": \"A subring contains the ring's 0. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {R : Type u} [inst : Ring R] (s : Subring R), 0 ∈ s\"},\n {\"role\": \"user\",\n  \"content\": \"Stalks of a locally ringed space are local rings. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (self : AlgebraicGeometry.LocallyRingedSpace) (x : ↑↑self.toPresheafedSpace),\\n  LocalRing ↑(TopCat.Presheaf.stalk self.presheaf x)\"},\n {\"role\": \"user\",\n  \"content\": \"The ring of integers of a number field is not a field. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (K : Type u_1) [inst : Field K] [nf : NumberField K], ¬IsField { x // x ∈ NumberField.ringOfIntegers K }\"},\n {\"role\": \"user\",\n  \"content\":\n  \"For a semiring to be a field, it must have two distinct elements. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {R : Type u} [inst : Semiring R], IsField R → ∃ x y, x ≠ y\"},\n {\"role\": \"user\",\n  \"content\": \"All ideals in a division (semi)ring are trivial. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u} [inst : DivisionSemiring K] (I : Ideal K), I = ⊥ ∨ I = ⊤\"},\n {\"role\": \"user\", \"content\": \"The category of rings has all limits. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"CategoryTheory.Limits.HasLimitsOfSize.{v, v, max u v, max (u + 1) (v + 1)} CommSemiRingCatMax\"},\n {\"role\": \"user\", \"content\": \"Fields are commutative. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} [inst : Semiring R], IsField R → ∀ (x y : R), x * y = y * x\"},\n {\"role\": \"user\",\n  \"content\": \"A linear ordered field that is a floor ring is archimedean. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (α : Type u_1) [inst : LinearOrderedField α] [inst_1 : FloorRing α], Archimedean α\"},\n {\"role\": \"user\", \"content\": \"An intermediate field contains the ring's 1. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u_2} {L : Type u_1} [inst : Field K] [inst_1 : Field L] [inst_2 : Algebra K L] (S : IntermediateField K L),\\n  1 ∈ S\"},\n {\"role\": \"user\", \"content\": \"An intermediate field contains the ring's 0. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u_2} {L : Type u_1} [inst : Field K] [inst_1 : Field L] [inst_2 : Algebra K L] (S : IntermediateField K L),\\n  0 ∈ S\"},\n {\"role\": \"user\", \"content\": \"A field is a valuation ring. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ (K : Type u) [inst : Field K], ValuationRing K\"},\n {\"role\": \"user\", \"content\": \"Every field is a ring.\"}]"}
{"text":"The set of units in a ring forms a group.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Multivariate formal power series over a local ring form a local ring. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {σ : Type u_1} {R : Type u_2} [inst : CommRing R] [inst_1 : LocalRing R], LocalRing (MvPowerSeries σ R)\"},\n {\"role\": \"user\", \"content\": \"A subgroup is closed under multiplication. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] (H : Subgroup G) {x y : G}, x ∈ H → y ∈ H → x * y ∈ H\"},\n {\"role\": \"user\",\n  \"content\": \"The subring generated by a set includes the set. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} [inst : Ring R] {s : Set R}, s ⊆ ↑(Subring.closure s)\"},\n {\"role\": \"user\", \"content\": \"A unit in a monoid is regular. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : Monoid R] {a : R}, IsUnit a → IsRegular a\"},\n {\"role\": \"user\",\n  \"content\": \"Subgroups of torsion groups are torsion groups. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G], Monoid.IsTorsion G → ∀ (H : Subgroup G), Monoid.IsTorsion { x // x ∈ H }\"},\n {\"role\": \"user\", \"content\": \"A finite group of prime order is cyclic. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : Group α] [inst_1 : Fintype α] {p : ℕ} [hp : Fact (Nat.Prime p)], Fintype.card α = p → IsCyclic α\"},\n {\"role\": \"user\", \"content\": \"The normal closure of a set is a subgroup. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] (s : Set G), IsSubgroup (Group.normalClosure s)\"},\n {\"role\": \"user\", \"content\": \"A seminormed ring is a topological ring. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : NonUnitalSeminormedRing α], TopologicalRing α\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A group is finitely generated if and only if it is finitely generated as a monoid. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {G : Type u_1} [inst : Group G], Group.FG G ↔ Monoid.FG G\"},\n {\"role\": \"user\", \"content\": \"A subring contains the ring's 1. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {R : Type u} [inst : Ring R] (s : Subring R), 1 ∈ s\"},\n {\"role\": \"user\",\n  \"content\": \"A normed division ring is a topological division ring. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : NormedDivisionRing α], TopologicalDivisionRing α\"},\n {\"role\": \"user\", \"content\": \"A subring contains the ring's 0. \"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {R : Type u} [inst : Ring R] (s : Subring R), 0 ∈ s\"},\n {\"role\": \"user\", \"content\": \"The unit circle in `ℂ` is a Lie group. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"LieGroup (modelWithCornersSelf ℝ (EuclideanSpace ℝ (Fin 1))) { x // x ∈ circle }\"},\n {\"role\": \"user\",\n  \"content\": \"The subgroup generated by a set includes the set. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] {k : Set G}, k ⊆ ↑(Subgroup.closure k)\"},\n {\"role\": \"user\",\n  \"content\": \"The center of a group acts commutatively on that group. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G], SMulCommClass G { x // x ∈ Subgroup.center G } G\"},\n {\"role\": \"user\", \"content\": \"Finite groups are torsion groups. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] [inst_1 : Finite G], Monoid.IsTorsion G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A finite subgroup of the unit group of an integral domain is cyclic. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_2} {G : Type u_1} [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : Group G] [inst_3 : Finite G]\\n  (f : G →* R), Function.Injective ↑f → IsCyclic G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"A finite subgroup of the units of an integral domain is cyclic. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsDomain R] (S : Subgroup Rˣ) [inst_2 : Finite { x // x ∈ S }],\\n  IsCyclic { x // x ∈ S }\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The group of units of a complete normed ring is an open subset of the ring. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : NormedRing R] [inst_1 : CompleteSpace R], IsOpen {x | IsUnit x}\"},\n {\"role\": \"user\", \"content\": \"The set of units in a ring forms a group.\"}]"}
{"text":"If the direct product of two groups is torsion free then each of the groups is torsion free.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.\"},\n {\"role\": \"user\",\n  \"content\": \"Torsion by a set is torsion by the ideal generated by it. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_2} {M : Type u_1} [inst : CommSemiring R] [inst_1 : AddCommMonoid M] [inst_2 : Module R M] (s : Set R),\\n  Submodule.torsionBySet R M s = Submodule.torsionBySet R M ↑(Ideal.span s)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The image of a surjective torsion group homomorphism is torsion. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} {H : Type u_2} [inst : Group G] [inst_1 : Group H] {f : G →* H},\\n  Function.Surjective ↑f → Monoid.IsTorsion G → Monoid.IsTorsion H\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Quotienting by the torsion submodule gives a torsion-free module. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_2} {M : Type u_1} [inst : CommRing R] [inst_1 : AddCommGroup M] [inst_2 : Module R M],\\n  Submodule.torsion R (M ⧸ Submodule.torsion R M) = ⊥\"},\n {\"role\": \"user\",\n  \"content\": \"A nontrivial torsion group is not torsion-free. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] [hN : Nontrivial G], Monoid.IsTorsion G → ¬Monoid.IsTorsionFree G\"},\n {\"role\": \"user\", \"content\": \"Torsion submonoids are torsion. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : CommMonoid G], Monoid.IsTorsion { x // x ∈ CommMonoid.torsion G }\"},\n {\"role\": \"user\",\n  \"content\": \"Additive torsion groups are closed under extensions.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} {H : Type u_2} [inst : AddGroup G] {N : AddSubgroup G} [inst_1 : AddGroup H] {f : G →+ H},\\n  N = AddMonoidHom.ker f → AddMonoid.IsTorsion H → AddMonoid.IsTorsion { x // x ∈ N } → AddMonoid.IsTorsion G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"The torsion submonoid of an abelian group equals the torsion subgroup as a submonoid. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (G : Type u_1) [inst : CommGroup G], CommMonoid.torsion G = (CommGroup.torsion G).toSubmonoid\"},\n {\"role\": \"user\",\n  \"content\": \"The image of a quotient is torsion iff the group is torsion. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} {H : Type u_2} [inst : Group G] {N : Subgroup G} [inst_1 : Group H] {f : G →* H},\\n  Function.Surjective ↑f →\\n    N = MonoidHom.ker f → Monoid.IsTorsion { x // x ∈ N } → (Monoid.IsTorsion H ↔ Monoid.IsTorsion G)\"},\n {\"role\": \"user\",\n  \"content\": \"A nontrivial torsion-free group is not torsion. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] [hN : Nontrivial G], Monoid.IsTorsionFree G → ¬Monoid.IsTorsion G\"},\n {\"role\": \"user\",\n  \"content\": \"If a group exponent exists, the group is torsion. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G], Monoid.ExponentExists G → Monoid.IsTorsion G\"},\n {\"role\": \"user\", \"content\": \"Finite groups are torsion groups. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] [inst_1 : Finite G], Monoid.IsTorsion G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Subgroups of additive torsion groups are additive torsion groups.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddGroup G], AddMonoid.IsTorsion G → ∀ (H : AddSubgroup G), AddMonoid.IsTorsion { x // x ∈ H }\"},\n {\"role\": \"user\",\n  \"content\": \"Subgroups of torsion groups are torsion groups. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G], Monoid.IsTorsion G → ∀ (H : Subgroup G), Monoid.IsTorsion { x // x ∈ H }\"},\n {\"role\": \"user\", \"content\": \"Torsion groups are closed under extensions. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} {H : Type u_2} [inst : Group G] {N : Subgroup G} [inst_1 : Group H] {f : G →* H},\\n  N = MonoidHom.ker f → Monoid.IsTorsion H → Monoid.IsTorsion { x // x ∈ N } → Monoid.IsTorsion G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Quotienting a group by its additive torsion subgroup yields an additive torsion free group.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (G : Type u_1) [inst : AddCommGroup G], AddMonoid.IsTorsionFree (G ⧸ AddCommGroup.torsion G)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Quotienting a group by its torsion subgroup yields a torsion free group. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (G : Type u_1) [inst : CommGroup G], Monoid.IsTorsionFree (G ⧸ CommGroup.torsion G)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Subgroups of additive torsion-free groups are additively torsion-free.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddGroup G],\\n  AddMonoid.IsTorsionFree G → ∀ (H : AddSubgroup G), AddMonoid.IsTorsionFree { x // x ∈ H }\"},\n {\"role\": \"user\",\n  \"content\": \"Subgroups of torsion-free groups are torsion-free. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G], Monoid.IsTorsionFree G → ∀ (H : Subgroup G), Monoid.IsTorsionFree { x // x ∈ H }\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Direct products of additive torsion free groups are torsion free.\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {η : Type u_1} {Gs : η → Type u_2} [inst : (i : η) → AddGroup (Gs i)],\\n  (∀ (i : η), AddMonoid.IsTorsionFree (Gs i)) → AddMonoid.IsTorsionFree ((i : η) → Gs i)\"},\n {\"role\": \"user\",\n  \"content\": \"Direct products of torsion free groups are torsion free. \"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {η : Type u_1} {Gs : η → Type u_2} [inst : (i : η) → Group (Gs i)],\\n  (∀ (i : η), Monoid.IsTorsionFree (Gs i)) → Monoid.IsTorsionFree ((i : η) → Gs i)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"If the direct product of two groups is torsion free then each of the groups is torsion free.\"}]"}
{"text":"If every proper closed subset of a topological space is compact, then the space itself is compact.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The intersection of two open compact subsets of a quasi-separated space is compact.\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_3} [inst : TopologicalSpace α] [self : QuasiSeparatedSpace α] (U V : Set α),\\n  IsOpen U → IsCompact U → IsOpen V → IsCompact V → IsCompact (U ∩ V)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If a compact set is included in a measurable set, then so is its closure. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_2} [inst : MeasurableSpace G] [inst_1 : TopologicalSpace G] [inst_2 : BorelSpace G] [inst_3 : Group G]\\n  [inst_4 : TopologicalGroup G] {k s : Set G}, IsCompact k → MeasurableSet s → k ⊆ s → closure k ⊆ s\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A subspace is dense iff its topological closure is the entire space. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} {M : Type v} [inst : Semiring R] [inst_1 : TopologicalSpace M] [inst_2 : AddCommMonoid M]\\n  [inst_3 : Module R M] [inst_4 : ContinuousConstSMul R M] [inst_5 : ContinuousAdd M] {s : Submodule R M},\\n  Dense ↑s ↔ Submodule.topologicalClosure s = ⊤\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The product of two compact spaces is compact. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u} {Y : Type v} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] [inst_2 : CompactSpace X]\\n  [inst_3 : CompactSpace Y], CompactSpace (X × Y)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The intersection of a compact set and a closed set is a compact set. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u} [inst : TopologicalSpace X] {s t : Set X}, IsCompact s → IsClosed t → IsCompact (s ∩ t)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: In a nonempty locally compact space, there exists a compact set with nonempty interior. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : WeaklyLocallyCompactSpace α] [inst_2 : Nonempty α],\\n  Nonempty (TopologicalSpace.PositiveCompacts α)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: In a `T2Space`, every compact set is closed. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : T2Space X] {s : Set X}, IsCompact s → IsClosed s\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The intersection of a closed set and a compact set is a compact set. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u} [inst : TopologicalSpace X] {s t : Set X}, IsCompact t → IsClosed s → IsCompact (s ∩ t)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A closed subset of a compact set is a compact set. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u} [inst : TopologicalSpace X] {s t : Set X}, IsCompact s → IsClosed t → t ⊆ s → IsCompact t\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: In a Noetherian space, all sets are compact. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace.NoetherianSpace α] (s : Set α), IsCompact s\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: For any topological space `X`, its one point compactification is a compact space. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X], CompactSpace (OnePoint X)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: In a compact space, the type of closed subsets is compact. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : EMetricSpace α] [inst_1 : CompactSpace α], CompactSpace (TopologicalSpace.Closeds α)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The underlying topological space is compact.\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ (self : CompHaus), CompactSpace ↑self.toTop\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Finite topological spaces are compact. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u} [inst : TopologicalSpace X] [inst_1 : Finite X], CompactSpace X\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If every proper closed subset of a topological space is compact, then the space itself is compact.\\n\\nGive ONLY the Lean code\"}]"}
{"text":"Every prime that is `1` greater than a multiple of `4` can be expressed as the sum of two squares.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Note that most of the lemmas about powers of two refer to it as `sq`. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {M : Type u} [inst : Monoid M] (a : M), a ^ 2 = a * a\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Lagrange's **four squares theorem** for a prime number. Use `Nat.sum_four_squares` instead. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {p : ℕ}, Nat.Prime p → ∃ a b c d, a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 = p\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: **Euler's four-square identity**. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : CommRing R] (a b c d x y z w : R),\\n  (a * x - b * y - c * z - d * w) ^ 2 + (a * y + b * x + c * w - d * z) ^ 2 + (a * z - b * w + c * x + d * y) ^ 2 +\\n      (a * w + b * z - c * y + d * x) ^ 2 =\\n    (a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2) * (x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: `2` is a square modulo an odd prime `p` iff `p` is congruent to `1` or `7` mod `8`. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {p : ℕ} [inst : Fact (Nat.Prime p)], p ≠ 2 → (IsSquare 2 ↔ p % 8 = 1 ∨ p % 8 = 7)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If a prime `p` divides `n` such that `-1` is a square modulo `n`, then `p % 4 ≠ 3`. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {p n : ℕ}, Nat.Prime p → p ∣ n → IsSquare (-1) → p % 4 ≠ 3\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Every nonzero natural number has a unique prime factorization \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\", \"content\": \"Set.InjOn Nat.factorization {x | x ≠ 0}\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The sum over primes `k ≤ p ≤ 4^(π(k-1)+1)` over `1/p` (as a real number) is at least `1/2`. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (k : ℕ),\\n  1 / 2 ≤\\n    Finset.sum (Nat.primesBelow (Nat.succ (4 ^ ((Nat.primesBelow k).card + 1))) \\\\ Nat.primesBelow k) fun p => 1 / ↑p\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A `k`-smooth number can be written as a square times a product of distinct primes `< k`. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {n k : ℕ}, n ∈ Nat.smoothNumbers k → ∃ s ∈ Finset.powerset (Nat.primesBelow k), ∃ m, n = m ^ 2 * Finset.prod s id\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: In a finite field of characteristic `2`, all elements are squares. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {F : Type u_3} [inst : Field F] [inst_1 : Finite F], ringChar F = 2 → ∀ (a : F), IsSquare a\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The special case of Graham's conjecture where all numbers are squarefree. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {n : ℕ} (f : ℕ → ℕ), (∀ k < n, Squarefree (f k)) → Nat.GrahamConjecture n f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: **Euler's four-square identity**, a version for natural numbers. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (a b c d x y z w : ℕ),\\n  Int.natAbs (↑a * ↑x - ↑b * ↑y - ↑c * ↑z - ↑d * ↑w) ^ 2 + Int.natAbs (↑a * ↑y + ↑b * ↑x + ↑c * ↑w - ↑d * ↑z) ^ 2 +\\n        Int.natAbs (↑a * ↑z - ↑b * ↑w + ↑c * ↑x + ↑d * ↑y) ^ 2 +\\n      Int.natAbs (↑a * ↑w + ↑b * ↑z - ↑c * ↑y + ↑d * ↑x) ^ 2 =\\n    (a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2) * (x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A prime natural number is prime in `ℤ[i]` if and only if it is `3` mod `4` \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ (p : ℕ) [inst : Fact (Nat.Prime p)], Prime ↑p ↔ p % 4 = 3\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: **Four squares theorem** \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ (n : ℕ), ∃ a b c d, a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 = n\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If `-1` is a square modulo the natural number `n`, then `n` is a sum of two squares. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {n : ℕ}, IsSquare (-1) → ∃ x y, n = x ^ 2 + y ^ 2\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The set of natural numbers that are sums of two squares is closed under multiplication. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {a b x y u v : ℕ}, a = x ^ 2 + y ^ 2 → b = u ^ 2 + v ^ 2 → ∃ r s, a * b = r ^ 2 + s ^ 2\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Every prime that is `1` greater than a multiple of `4` can be expressed as the sum of two squares.\\n\\nGive ONLY the Lean code\"}]"}
{"text":"The product of two numbers, each of which is the sum of four squares, is itself a sum of four squares.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The product of the factors is the original number \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ (n : ℕ+), PrimeMultiset.prod (PNat.factorMultiset n) = n\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: In a finite field of characteristic `2`, all elements are squares. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {F : Type u_3} [inst : Field F] [inst_1 : Finite F], ringChar F = 2 → ∀ (a : F), IsSquare a\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Commutativity of a square is preserved when taking quotients by an ideal. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} [inst : CommRing R] {S : Type v} [inst_1 : CommRing S] {R' : Type u_5} {S' : Type u_6}\\n  [inst_2 : CommRing R'] [inst_3 : CommRing S'] {f : R →+* S} {f' : R' →+* S'} {g : R →+* R'} {g' : S →+* S'}\\n  (hfg : RingHom.comp f' g = RingHom.comp g' f) (I : Ideal S'),\\n  let leq := (_ : Ideal.comap f (Ideal.comap g' I) ≤ Ideal.comap g (Ideal.comap f' I));\\n  RingHom.comp (Ideal.quotientMap I g' (_ : Ideal.comap g' I ≤ Ideal.comap g' I))\\n      (Ideal.quotientMap (Ideal.comap g' I) f\\n        (_ : Ideal.comap f (Ideal.comap g' I) ≤ Ideal.comap f (Ideal.comap g' I))) =\\n    RingHom.comp (Ideal.quotientMap I f' (_ : Ideal.comap f' I ≤ Ideal.comap f' I))\\n      (Ideal.quotientMap (Ideal.comap f' I) g leq)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The product of two positive elements is positive. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [self : StrictOrderedRing α] (a b : α), 0 < a → 0 < b → 0 < a * b\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: We relate a finite product over primes to an infinite sum over smooth numbers. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : NormedCommRing R] [inst_1 : CompleteSpace R] {f : ℕ → R},\\n  f 1 = 1 →\\n    (∀ {m n : ℕ}, Nat.Coprime m n → f (m * n) = f m * f n) →\\n      (∀ {p : ℕ}, Nat.Prime p → Summable fun n => ‖f (p ^ n)‖) →\\n        ∀ (N : ℕ),\\n          (Summable fun m => ‖f ↑m‖) ∧\\n            HasSum (fun m => f ↑m) (Finset.prod (Nat.primesBelow N) fun p => ∑' (n : ℕ), f (p ^ n))\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Multiplication is commutative. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_5} [self : SeminormedCommRing α] (x y : α), x * y = y * x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The special case of Graham's conjecture where all numbers are squarefree. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {n : ℕ} (f : ℕ → ℕ), (∀ k < n, Squarefree (f k)) → Nat.GrahamConjecture n f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The scalar quadruple product identity, related to the Binet-Cauchy identity. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : CommRing R] (u v w x : Fin 3 → R),\\n  Matrix.dotProduct ((crossProduct u) v) ((crossProduct w) x) =\\n    Matrix.dotProduct u w * Matrix.dotProduct v x - Matrix.dotProduct u x * Matrix.dotProduct v w\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Representation of a difference of two squares in a commutative ring as a product. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type x} [inst : CommRing R] (a b : R), a * a - b * b = (a + b) * (a - b)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Pythagorean theorem, if-and-if vector inner product form using square roots. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {F : Type u_3} [inst : NormedAddCommGroup F] [inst_1 : InnerProductSpace ℝ F] {x y : F},\\n  ‖x + y‖ = Real.sqrt (‖x‖ * ‖x‖ + ‖y‖ * ‖y‖) ↔ ⟪x, y⟫_ℝ = 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Two natural numbers are equal if and only if they have the same multiples. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {m n : ℕ}, (∀ (a : ℕ), m ∣ a ↔ n ∣ a) ↔ m = n\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Expressing the product of two polynomials as a double sum. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} [inst : Semiring R] {p q : Polynomial R},\\n  p * q =\\n    Finset.sum (Polynomial.support p) fun i =>\\n      Polynomial.sum q fun j a => (Polynomial.monomial (i + j)) (Polynomial.coeff p i * a)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The product of two Chebyshev polynomials is the sum of two other Chebyshev polynomials. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (R : Type u_1) [inst : CommRing R] (m k : ℕ),\\n  2 * Polynomial.Chebyshev.T R m * Polynomial.Chebyshev.T R (m + k) =\\n    Polynomial.Chebyshev.T R (2 * m + k) + Polynomial.Chebyshev.T R k\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If `-1` is a square modulo the natural number `n`, then `n` is a sum of two squares. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {n : ℕ}, IsSquare (-1) → ∃ x y, n = x ^ 2 + y ^ 2\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: **Four squares theorem** \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ (n : ℕ), ∃ a b c d, a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 = n\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: **Euler's four-square identity**. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : CommRing R] (a b c d x y z w : R),\\n  (a * x - b * y - c * z - d * w) ^ 2 + (a * y + b * x + c * w - d * z) ^ 2 + (a * z - b * w + c * x + d * y) ^ 2 +\\n      (a * w + b * z - c * y + d * x) ^ 2 =\\n    (a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2) * (x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: **Euler's four-square identity**, a version for natural numbers. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (a b c d x y z w : ℕ),\\n  Int.natAbs (↑a * ↑x - ↑b * ↑y - ↑c * ↑z - ↑d * ↑w) ^ 2 + Int.natAbs (↑a * ↑y + ↑b * ↑x + ↑c * ↑w - ↑d * ↑z) ^ 2 +\\n        Int.natAbs (↑a * ↑z - ↑b * ↑w + ↑c * ↑x + ↑d * ↑y) ^ 2 +\\n      Int.natAbs (↑a * ↑w + ↑b * ↑z - ↑c * ↑y + ↑d * ↑x) ^ 2 =\\n    (a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2) * (x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The sum of two squares is zero iff both elements are zero. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : LinearOrderedSemiring α] {a b : α} [inst_1 : ExistsAddOfLE α], a * a + b * b = 0 ↔ a = 0 ∧ b = 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The set of natural numbers that are sums of two squares is closed under multiplication. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {a b x y u v : ℕ}, a = x ^ 2 + y ^ 2 → b = u ^ 2 + v ^ 2 → ∃ r s, a * b = r ^ 2 + s ^ 2\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The product of two numbers, each of which is the sum of four squares, is itself a sum of four squares.\\n\\nGive ONLY the Lean code\"}]"}
{"text":"A ring with all elements idempotent is commutative.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Commuting elements of finite order are closed under multiplication. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Monoid G] {x y : G}, Commute x y → IsOfFinOrder x → IsOfFinOrder y → IsOfFinOrder (x * y)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: An abelian category is idempotent complete. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (D : Type u_2) [inst : CategoryTheory.Category.{u_3, u_2} D] [inst_1 : CategoryTheory.Abelian D],\\n  CategoryTheory.IsIdempotentComplete D\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Fields are commutative. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} [inst : Semiring R], IsField R → ∀ (x y : R), x * y = y * x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Composition of non-unital ring homomorphisms is associative. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_2} {β : Type u_3} {γ : Type u_4} [inst : NonUnitalNonAssocSemiring α]\\n  [inst_1 : NonUnitalNonAssocSemiring β] [inst_2 : NonUnitalNonAssocSemiring γ] {δ : Type u_5}\\n  {x : NonUnitalNonAssocSemiring δ} (f : α →ₙ+* β) (g : β →ₙ+* γ) (h : γ →ₙ+* δ),\\n  NonUnitalRingHom.comp (NonUnitalRingHom.comp h g) f = NonUnitalRingHom.comp h (NonUnitalRingHom.comp g f)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A finitely generated idempotent ideal is generated by an idempotent element \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : CommRing R] (I : Ideal R),\\n  Ideal.FG I → (IsIdempotentElem I ↔ ∃ e, IsIdempotentElem e ∧ I = Submodule.span R {e})\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The additive inverse of one multiplied by an element of a ring is the element's additive\\ninverse. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : MulOneClass α] [inst_1 : HasDistribNeg α] (a : α), -1 * a = -a\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: An element of a ring multiplied by the additive inverse of one is the element's additive\\ninverse. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : MulOneClass α] [inst_1 : HasDistribNeg α] (a : α), a * -1 = -a\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The ring homomorphism is an isometry. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R₁ : Type u_5} {R₂ : Type u_6} [inst : Semiring R₁] [inst_1 : Semiring R₂] [inst_2 : Norm R₁] [inst_3 : Norm R₂]\\n  {σ : R₁ →+* R₂} [self : RingHomIsometric σ] {x : R₁}, ‖σ x‖ = ‖x‖\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Multiplication is commutative \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {ι : Type u_1} {A : ι → Type u_2} [inst : AddCommMonoid ι] [inst_1 : (i : ι) → AddCommMonoid (A i)]\\n  [self : DirectSum.GCommSemiring A] (a b : GradedMonoid A), a * b = b * a\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Multiplication is commutative. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_5} [self : SeminormedCommRing α] (x y : α), x * y = y * x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: By definition, a ring isomorphism preserves the additive structure. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {F : Type u_7} {R : outParam (Type u_8)} {S : outParam (Type u_9)} [inst : Mul R] [inst_1 : Add R] [inst_2 : Mul S]\\n  [inst_3 : Add S] [self : RingEquivClass F R S] (f : F) (a b : R), f (a + b) = f a + f b\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Multiplication is commutative in a commutative semigroup. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_2} [self : StrictOrderedCommRing α] (a b : α), a * b = b * a\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Equivalence closure is idempotent. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} (r : α → α → Prop), EqvGen.Setoid (Setoid.Rel (EqvGen.Setoid r)) = EqvGen.Setoid r\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A ring isomorphism sends zero to zero. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_4} {S : Type u_5} [inst : NonUnitalNonAssocSemiring R] [inst_1 : NonUnitalNonAssocSemiring S]\\n  (f : R ≃+* S), f 0 = 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A ring isomorphism sends one to one. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_4} {S : Type u_5} [inst : NonAssocSemiring R] [inst_1 : NonAssocSemiring S] (f : R ≃+* S), f 1 = 1\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Any element commutes with itself.\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {S : Type u_2} [inst : Add S] (a : S), AddCommute a a\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Any element commutes with itself. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {S : Type u_2} [inst : Mul S] (a : S), Commute a a\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A ring isomorphism preserves addition. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_4} {S : Type u_5} [inst : Mul R] [inst_1 : Mul S] [inst_2 : Add R] [inst_3 : Add S] (e : R ≃+* S)\\n  (x y : R), e (x + y) = e x + e y\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A ring isomorphism preserves multiplication. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_4} {S : Type u_5} [inst : Mul R] [inst_1 : Mul S] [inst_2 : Add R] [inst_3 : Add S] (e : R ≃+* S)\\n  (x y : R), e (x * y) = e x * e y\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Multiplication in a boolean ring is idempotent. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {α : Type u_4} [self : BooleanRing α] (a : α), a * a = a\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A ring with all elements idempotent is commutative.\\n\\nGive ONLY the Lean code\"}]"}
{"text":"There are infinitely many pairs of primes that differ exactly by `2`.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The finite field `F` has even cardinality iff it has characteristic `2`. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {F : Type u_3} [inst : Field F] [inst_1 : Fintype F], ringChar F = 2 ↔ Fintype.card F % 2 = 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: For any positive `k : ℕ` there are infinitely many primes `p` such that `p ≡ 1 [MOD k]`. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {k : ℕ}, k ≠ 0 → Set.Infinite {p | Nat.Prime p ∧ p ≡ 1 [MOD k]}\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Infinitely many natural numbers are equal to `d` mod `n`. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {n : ℕ}, n ≠ 0 → ∀ (d : ℕ), ∃ᶠ (m : ℕ) in Filter.atTop, m ≡ d [MOD n]\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The multiplicity of prime `p` in `p` is `1` \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {p : ℕ}, Nat.Prime p → (Nat.factorization p) p = 1\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The only numbers with empty prime factorization are `0` and `1` \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ (n : ℕ), Nat.factorization n = 0 ↔ n = 0 ∨ n = 1\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: In a group of exponent two, all elements commute. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G], Monoid.exponent G = 2 → ∀ (x y : G), x * y = y * x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: `2` is not a factor of an odd natural number. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\", \"content\": \"∀ {m n : ℕ}, Odd n → m ∣ n → m ≠ 2\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Two natural numbers are equal if and only if they have the same multiples. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {m n : ℕ}, (∀ (a : ℕ), m ∣ a ↔ n ∣ a) ↔ m = n\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A prime natural number is prime in `ℤ[i]` if and only if it is `3` mod `4` \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ (p : ℕ) [inst : Fact (Nat.Prime p)], Prime ↑p ↔ p % 4 = 3\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Two (finite) ℤ-bases have the same discriminant. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (A : Type u) {ι : Type w} [inst : DecidableEq ι] [inst_1 : CommRing A] [inst_2 : Fintype ι] (b b' : Basis ι ℤ A),\\n  Algebra.discr ℤ ⇑b = Algebra.discr ℤ ⇑b'\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: In a group of exponent two, every element is its own inverse. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G], Monoid.exponent G = 2 → ∀ (x : G), x⁻¹ = x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Two natural numbers are equal if and only if they have the same divisors. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {m n : ℕ}, (∀ (a : ℕ), a ∣ m ↔ a ∣ n) ↔ m = n\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: `2` is a square modulo an odd prime `p` iff `p` is congruent to `1` or `7` mod `8`. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {p : ℕ} [inst : Fact (Nat.Prime p)], p ≠ 2 → (IsSquare 2 ↔ p % 8 = 1 ∨ p % 8 = 7)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: An inequality involving `2`. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_2} [inst : LinearOrderedField α] {a : α}, 2 ≤ a → (1 - 1 / a)⁻¹ ≤ 2\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The set of natural numbers that are sums of two squares is closed under multiplication. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {a b x y u v : ℕ}, a = x ^ 2 + y ^ 2 → b = u ^ 2 + v ^ 2 → ∃ r s, a * b = r ^ 2 + s ^ 2\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Every nonzero natural number has a unique prime factorization \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\", \"content\": \"Set.InjOn Nat.factorization {x | x ≠ 0}\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A prime `p` satisfies `p % 2 = 1` if and only if `p ≠ 2`. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {p : ℕ} [inst : Fact (Nat.Prime p)], p % 2 = 1 ↔ p ≠ 2\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: In a finite field of characteristic `2`, all elements are squares. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {F : Type u_3} [inst : Field F] [inst_1 : Finite F], ringChar F = 2 → ∀ (a : F), IsSquare a\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: There are infinitely many pairs of primes that differ exactly by `2`.\\n\\nGive ONLY the Lean code\"}]"}
{"text":"Every finite division ring is a field.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: An intermediate field is closed under multiplication. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u_1} {L : Type u_2} [inst : Field K] [inst_1 : Field L] [inst_2 : Algebra K L] (S : IntermediateField K L)\\n  {x y : L}, x ∈ S → y ∈ S → x * y ∈ S\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Any infinite type can be endowed a field structure. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {α : Type u} [inst : Infinite α], Nonempty (Field α)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A normed division ring is a topological division ring. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : NormedDivisionRing α], TopologicalDivisionRing α\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: In a finite field of characteristic `2`, all elements are squares. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {F : Type u_3} [inst : Field F] [inst_1 : Finite F], ringChar F = 2 → ∀ (a : F), IsSquare a\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The quotient of a ring by an ideal is a field iff the ideal is maximal. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} [inst : CommRing R] (I : Ideal R), Ideal.IsMaximal I ↔ IsField (R ⧸ I)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A separably closed perfect field is also algebraically closed. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (k : Type u) [inst : Field k] [inst_1 : IsSepClosed k] [inst_2 : PerfectField k], IsAlgClosed k\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: An algebraically closed field is also separably closed. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (k : Type u) [inst : Field k] [inst_1 : IsAlgClosed k], IsSepClosed k\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: All ideals in a division (semi)ring are trivial. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u} [inst : DivisionSemiring K] (I : Ideal K), I = ⊥ ∨ I = ⊤\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A field extension is algebraic if it is finite. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (K : Type u_1) (A : Type u_5) [inst : Field K] [inst_1 : Ring A] [inst_2 : Algebra K A]\\n  [inst_3 : FiniteDimensional K A], Algebra.IsAlgebraic K A\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A finite subgroup of the unit group of an integral domain is cyclic. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} {G : Type u_2} [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : Group G] [inst_3 : Finite G]\\n  (f : G →* R), Function.Injective ⇑f → IsCyclic G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A module over a division ring is noetherian if and only if it is finitely generated. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V],\\n  IsNoetherian K V ↔ Module.Finite K V\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A linear ordered field that is a floor ring is archimedean. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (α : Type u_2) [inst : LinearOrderedField α] [inst_1 : FloorRing α], Archimedean α\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A field is perfect if every irreducible polynomial is separable. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u_1} [inst : Field K] [self : PerfectField K] {f : Polynomial K}, Irreducible f → Polynomial.Separable f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A finite subgroup of the units of an integral domain is cyclic. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsDomain R] (S : Subgroup Rˣ) [inst_2 : Finite ↥S], IsCyclic ↥S\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A subfield is closed under division. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u} [inst : DivisionRing K] (s : Subfield K) {x y : K}, x ∈ s → y ∈ s → x / y ∈ s\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A cyclotomic finite extension of a number field is a number field. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (S : Set ℕ+) (K : Type w) (L : Type z) [inst : Field K] [inst_1 : Field L] [inst_2 : Algebra K L] [h : NumberField K]\\n  [inst_3 : Finite ↑S] [inst : IsCyclotomicExtension S K L], NumberField L\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A field is a valuation ring. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ (K : Type u) [inst : Field K], ValuationRing K\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: An intermediate field is closed under division. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u_1} {L : Type u_2} [inst : Field K] [inst_1 : Field L] [inst_2 : Algebra K L] (S : IntermediateField K L)\\n  {x y : L}, x ∈ S → y ∈ S → x / y ∈ S\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A finite field has prime power cardinality. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : Fintype α] [inst_1 : Field α], IsPrimePow (Fintype.card α)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A finite domain is a field. See also `littleWedderburn` and `Fintype.divisionRingOfIsDomain`. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (D : Type u_1) [inst : Finite D] [inst : Ring D] [inst_1 : IsDomain D], IsField D\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Every finite division ring is a field.\\n\\nGive ONLY the Lean code\"}]"}
{"text":"If each of two types can be mapped injectively into the other, then there is a bijection between them.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The dimensions of the domain and range of an injective linear map are equal. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} {M : Type v} {N : Type w} [inst : Ring R] [inst_1 : AddCommGroup M] [inst_2 : Module R M]\\n  [inst_3 : AddCommGroup N] [inst_4 : Module R N] {f : M →ₗ[R] N},\\n  Function.Injective ⇑f → FiniteDimensional.finrank R ↥(LinearMap.range f) = FiniteDimensional.finrank R M\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: An epimorphism is surjective. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} {M : Type u_2} {R₂ : Type u_3} {M₂ : Type u_4} [inst : Ring R] [inst_1 : Ring R₂]\\n  [inst_2 : AddCommMonoid M] [inst_3 : AddCommGroup M₂] [inst_4 : Module R M] [inst_5 : Module R₂ M₂] {τ₁₂ : R →+* R₂}\\n  [inst_6 : RingHomSurjective τ₁₂] {f : M →ₛₗ[τ₁₂] M₂},\\n  (∀ (u v : M₂ →ₗ[R₂] M₂ ⧸ LinearMap.range f), LinearMap.comp u f = LinearMap.comp v f → u = v) → LinearMap.range f = ⊤\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The induced map from the quotient by the kernel is injective. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} {S : Type v} [inst : CommRing R] [inst_1 : Semiring S] (f : R →+* S),\\n  Function.Injective ⇑(RingHom.kerLift f)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If the equalizer of two morphisms is an epimorphism, then the two morphisms are equal. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {C : Type u} [inst : CategoryTheory.Category.{v, u} C] {X Y : C} {f g : X ⟶ Y}\\n  [inst_1 : CategoryTheory.Limits.HasEqualizer f g]\\n  [inst_2 : CategoryTheory.Epi (CategoryTheory.Limits.equalizer.ι f g)], f = g\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The two coercions to functions are jointly injective. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {E : Sort u_1} {α : outParam (Sort u_2)} {β : outParam (Sort u_3)} [self : EquivLike E α β] (e g : E),\\n  EquivLike.coe e = EquivLike.coe g → EquivLike.inv e = EquivLike.inv g → e = g\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Composing with a surjective linear map is injective. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : Semiring R] {M : Type u_2} [inst_1 : AddCommMonoid M] [inst_2 : Module R M] {N : Type u_3}\\n  [inst_3 : AddCommMonoid N] [inst_4 : Module R N] {ι : Type u_7} {M₂ : Type u_10} [inst_5 : AddCommMonoid M₂]\\n  [inst_6 : Module R M₂] (f : M₂ →ₗ[R] M),\\n  Function.Surjective ⇑f → Function.Injective fun g => AlternatingMap.compLinearMap g f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A scheme where the children of each set are pairwise disjoint induces an injective map. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {β : Type u_1} {α : Type u_2} {A : List β → Set α},\\n  CantorScheme.Disjoint A → Function.Injective (CantorScheme.inducedMap A).snd\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: On a finite-dimensional space, a linear map is injective if and only if it is surjective. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V]\\n  [inst_3 : FiniteDimensional K V] {f : V →ₗ[K] V}, Function.Injective ⇑f ↔ Function.Surjective ⇑f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The map sending a congruence relation to its underlying binary relation is injective. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {M : Type u_1} [inst : Mul M] {c d : Con M}, ⇑c = ⇑d → c = d\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: In any concrete category, injective morphisms are monomorphisms. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {C : Type u} [inst : CategoryTheory.Category.{v, u} C] [inst_1 : CategoryTheory.ConcreteCategory C] {X Y : C}\\n  (f : X ⟶ Y), Function.Injective ⇑f → CategoryTheory.Mono f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The map sending a congruence relation to its underlying equivalence relation is injective. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {M : Type u_1} [inst : Mul M] {c d : Con M}, c.toSetoid = d.toSetoid → c = d\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: On a finite-dimensional space, an injective linear map is surjective. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V]\\n  [inst_3 : FiniteDimensional K V] {f : V →ₗ[K] V}, Function.Injective ⇑f → Function.Surjective ⇑f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If two partial homeomorphisms are equivalent, so are their inverses. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} {Y : Type u_3} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y]\\n  {e e' : PartialHomeomorph X Y}, e ≈ e' → PartialHomeomorph.symm e ≈ PartialHomeomorph.symm e'\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: An equivalence of categories transfers enough injectives. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {C : Type u₁} {D : Type u₂} [inst : CategoryTheory.Category.{v₁, u₁} C] [inst_1 : CategoryTheory.Category.{v₂, u₂} D]\\n  (e : CategoryTheory.Functor C D) [inst_2 : CategoryTheory.IsEquivalence e]\\n  [inst_3 : CategoryTheory.EnoughInjectives D], CategoryTheory.EnoughInjectives C\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: All maps in the diagram are injective \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {ι : Type u_1} {G : ι → Type u_2} {H : Type u_3} [inst : (i : ι) → Group (G i)] [inst_1 : Group H]\\n  {φ : (i : ι) → H →* G i}, Monoid.PushoutI.NormalWord.Transversal φ → ∀ (i : ι), Function.Injective ⇑(φ i)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: For functions on finite sets, they are bijections iff they map universes into universes. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} {β : Type u_2} [inst : Fintype α] [inst_1 : Fintype β] (f : α → β),\\n  Function.Bijective f ↔ Multiset.map f Finset.univ.val = Finset.univ.val\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A morphism in `Type u` is an isomorphism if and only if it is bijective. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X Y : Type u} (f : X ⟶ Y), CategoryTheory.IsIso f ↔ Function.Bijective f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A monomorphism is injective. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} {R₂ : Type u_3} {M : Type u_9} {M₂ : Type u_12} [inst : Semiring R] [inst_1 : Semiring R₂]\\n  [inst_2 : AddCommMonoid M] [inst_3 : AddCommMonoid M₂] [inst_4 : Module R M] [inst_5 : Module R₂ M₂] {τ₁₂ : R →+* R₂}\\n  {f : M →ₛₗ[τ₁₂] M₂},\\n  (∀ (u v : ↥(LinearMap.ker f) →ₗ[R] M), LinearMap.comp f u = LinearMap.comp f v → u = v) → LinearMap.ker f = ⊥\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If a bounded linear map is a bijection, then its inverse is also a bounded linear map. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {𝕜 : Type u_1} [inst : NontriviallyNormedField 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E]\\n  [inst_2 : NormedSpace 𝕜 E] {F : Type u_3} [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F]\\n  [inst_5 : CompleteSpace F] [inst_6 : CompleteSpace E] (e : E ≃ₗ[𝕜] F),\\n  Continuous ⇑e → Continuous ⇑(LinearEquiv.symm e)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If a linear map is surjective, then its dual is injective. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} [inst : CommSemiring R] {M₁ : Type v} {M₂ : Type v'} [inst_1 : AddCommMonoid M₁] [inst_2 : Module R M₁]\\n  [inst_3 : AddCommMonoid M₂] [inst_4 : Module R M₂] {f : M₁ →ₗ[R] M₂},\\n  Function.Surjective ⇑f → Function.Injective ⇑(LinearMap.dualMap f)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If each of two types can be mapped injectively into the other, then there is a bijection between them.\\n\\nGive ONLY the Lean code\"}]"}
{"text":"A finite graph in which every pair of vertices have precisely one common neighbour contains a vertex that is adjacent to all other vertices.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: This lemma characterizes discrete topological spaces as those whose singletons are\\nneighbourhoods. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α], DiscreteTopology α ↔ ∀ (x : α), nhds x = pure x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A space with discrete topology is a locally connected space. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (α : Type u_3) [inst : TopologicalSpace α] [inst_1 : DiscreteTopology α], LocallyConnectedSpace α\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A finite union of finsets is finite. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} (f : α → Finset β), Set.Finite (Set.range f) → Set.Finite (⋃ a, ↑(f a))\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A linear equivalence which preserves a finite spanning set must have finite order. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} {M : Type u_2} [inst : CommSemiring R] [inst_1 : AddCommMonoid M] [inst_2 : Module R M] {Φ : Set M},\\n  Set.Finite Φ → Submodule.span R Φ = ⊤ → ∀ {e : M ≃ₗ[R] M}, Set.MapsTo (⇑e) Φ Φ → IsOfFinOrder e\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If a graph is cliquefree, any graph that embeds into it is also cliquefree. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} {β : Type u_2} {G : SimpleGraph α} {n : ℕ} {H : SimpleGraph β},\\n  H ↪g G → SimpleGraph.CliqueFree G n → SimpleGraph.CliqueFree H n\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Graph is acyclic. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u} {G : SimpleGraph V}, SimpleGraph.IsTree G → SimpleGraph.IsAcyclic G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The minimal distances to a set and its closure coincide. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : PseudoMetricSpace α] {s : Set α} {x : α}, Metric.infDist x (closure s) = Metric.infDist x s\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Any graph on `n` vertices has at most `n.choose 2` edges. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u} {G : SimpleGraph V} [inst : Fintype ↑(SimpleGraph.edgeSet G)] [inst_1 : Fintype V]\\n  [inst_2 : DecidableEq V], (SimpleGraph.edgeFinset G).card ≤ Nat.choose (Fintype.card V) 2\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Graph is connected. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u} {G : SimpleGraph V}, SimpleGraph.IsTree G → SimpleGraph.Connected G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Every finite subset of a linearly independent set is linearly independent. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_2} {M : Type u_4} [inst : Semiring R] [inst_1 : AddCommMonoid M] [inst_2 : Module R M] (s : Set M),\\n  LinearIndependent (ι := { x // x ∈ s }) R Subtype.val → ∀ (t : Finset ↑s), LinearIndependent R Subtype.val\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The maximum degree in the graph is at least the degree of any particular vertex. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u} (G : SimpleGraph V) [inst : Fintype V] [inst_1 : DecidableRel G.Adj] (v : V),\\n  SimpleGraph.degree G v ≤ SimpleGraph.maxDegree G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A point with a finite neighborhood has to be isolated. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : T1Space X] (x : X) {s : Set X},\\n  s ∈ nhds x → Set.Finite s → IsOpen {x}\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A clique is a set of vertices whose induced graph is complete. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} (G : SimpleGraph α) {s : Set α}, SimpleGraph.IsClique G s ↔ SimpleGraph.induce s G = ⊤\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Every finite subset of an algebraically independent set is algebraically independent. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_3} {A : Type u_5} [inst : CommRing R] [inst_1 : CommRing A] [inst_2 : Algebra R A] (s : Set A),\\n  AlgebraicIndependent R Subtype.val → ∀ (t : Finset ↑s), AlgebraicIndependent R Subtype.val\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: In an infinite graph, the set of components out of a finite set is nonempty. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u} (G : SimpleGraph V) [inst : Infinite V] (K : Finset V), Nonempty (SimpleGraph.ComponentCompl G ↑K)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The minimum degree in the graph is at most the degree of any particular vertex. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u} (G : SimpleGraph V) [inst : Fintype V] [inst_1 : DecidableRel G.Adj] (v : V),\\n  SimpleGraph.minDegree G ≤ SimpleGraph.degree G v\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A locally finite preconnected infinite graph has at least one end. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type} (G : SimpleGraph V) [inst : SimpleGraph.LocallyFinite G] [inst : Fact (SimpleGraph.Preconnected G)]\\n  [inst : Infinite V], Set.Nonempty (SimpleGraph.end G)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A finite graph in which every pair of vertices have precisely one common neighbour contains a vertex that is adjacent to all other vertices.\\n\\nGive ONLY the Lean code\"}]"}
{"text":"The number of partitions with odd parts is equal to the number of partitions with distinct parts.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Every nonzero natural number has a unique prime factorization \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\", \"content\": \"Set.InjOn Nat.factorization {x | x ≠ 0}\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The finite field `F` has even cardinality iff it has characteristic `2`. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {F : Type u_3} [inst : Field F] [inst_1 : Fintype F], ringChar F = 2 ↔ Fintype.card F % 2 = 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If x ∈ α is in 2 elements of a set of sets partitioning α, those 2 sets are equal. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} {c : Set (Set α)},\\n  (∀ (a : α), ∃! b x, a ∈ b) → ∀ {x : α} {b b' : Set α}, b ∈ c → x ∈ b → b' ∈ c → x ∈ b' → b = b'\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Conjugacy classes form a partition of G, stated in terms of cardinality. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (G : Type u) [inst : Group G] [inst_1 : Fintype (ConjClasses G)] [inst_2 : Fintype G]\\n  [inst_3 : (x : ConjClasses G) → Fintype ↑(ConjClasses.carrier x)],\\n  (Finset.sum Finset.univ fun x => (Set.toFinset (ConjClasses.carrier x)).card) = Fintype.card G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If we can partition a product into subsets that cancel out, then the whole product cancels. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {β : Type u} {α : Type v} {s : Finset α} {f : α → β} [inst : CommMonoid β] (R : Setoid α)\\n  [inst_1 : DecidableRel Setoid.r],\\n  (∀ x ∈ s, (Finset.prod (Finset.filter (fun y => y ≈ x) s) fun a => f a) = 1) → (Finset.prod s fun x => f x) = 1\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Two natural numbers are equal if and only if they have the same multiples. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {m n : ℕ}, (∀ (a : ℕ), m ∣ a ↔ n ∣ a) ↔ m = n\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Distinct elements of a set of sets partitioning α are disjoint. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} {c : Set (Set α)}, (∀ (a : α), ∃! b x, a ∈ b) → Set.PairwiseDisjoint c id\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The functions in the partition of unity add up to at most `1` everywhere. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {ι : Type uι} {E : Type uE} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] {H : Type uH}\\n  [inst_2 : TopologicalSpace H] {I : ModelWithCorners ℝ E H} {M : Type uM} [inst_3 : TopologicalSpace M]\\n  [inst_4 : ChartedSpace H M] {s : optParam (Set M) Set.univ} (self : SmoothPartitionOfUnity ι I M s) (x : M),\\n  (finsum fun i => (SmoothPartitionOfUnity.toFun s self i) x) ≤ 1\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Two natural numbers are equal if and only if they have the same divisors. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {m n : ℕ}, (∀ (a : ℕ), a ∣ m ↔ a ∣ n) ↔ m = n\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If we can partition a sum into subsets that cancel out, then the whole sum cancels.\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {β : Type u} {α : Type v} {s : Finset α} {f : α → β} [inst : AddCommMonoid β] (R : Setoid α)\\n  [inst_1 : DecidableRel Setoid.r],\\n  (∀ x ∈ s, (Finset.sum (Finset.filter (fun y => y ≈ x) s) fun a => f a) = 0) → (Finset.sum s fun x => f x) = 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The indices of `Quotient.out'` and `IndexedPartition.out` are equal. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {ι : Type u_1} {α : Type u_2} {s : ι → Set α} (hs : IndexedPartition s) (x : IndexedPartition.Quotient hs),\\n  IndexedPartition.index hs (Quotient.out' x) = IndexedPartition.index hs ((IndexedPartition.out hs) x)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The functions in the partition of unity add up to `1` at any point of `s`. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {ι : Type uι} {E : Type uE} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] {H : Type uH}\\n  [inst_2 : TopologicalSpace H] {I : ModelWithCorners ℝ E H} {M : Type uM} [inst_3 : TopologicalSpace M]\\n  [inst_4 : ChartedSpace H M] {s : optParam (Set M) Set.univ} (self : SmoothPartitionOfUnity ι I M s),\\n  ∀ x ∈ s, (finsum fun i => (SmoothPartitionOfUnity.toFun s self i) x) = 1\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: All the functions in the partition of unity are nonnegative. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {ι : Type uι} {E : Type uE} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] {H : Type uH}\\n  [inst_2 : TopologicalSpace H] {I : ModelWithCorners ℝ E H} {M : Type uM} [inst_3 : TopologicalSpace M]\\n  [inst_4 : ChartedSpace H M] {s : optParam (Set M) Set.univ} (self : SmoothPartitionOfUnity ι I M s) (i : ι) (x : M),\\n  0 ≤ (SmoothPartitionOfUnity.toFun s self i) x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A sum can be partitioned into a sum of sums, each equivalent under a setoid.\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {β : Type u} {α : Type v} {s : Finset α} {f : α → β} [inst : AddCommMonoid β] (R : Setoid α)\\n  [inst_1 : DecidableRel Setoid.r],\\n  (Finset.sum s fun x => f x) =\\n    Finset.sum (Finset.image Quotient.mk'' s) fun xbar =>\\n      Finset.sum (Finset.filter (fun x => ⟦x⟧ = xbar) s) fun y => f y\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The convolution of two even functions is also even. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {𝕜 : Type u𝕜} {G : Type uG} {E : Type uE} {E' : Type uE'} {F : Type uF} [inst : NormedAddCommGroup E]\\n  [inst_1 : NormedAddCommGroup E'] [inst_2 : NormedAddCommGroup F] {f : G → E} {g : G → E'} {x : G}\\n  [inst_3 : NontriviallyNormedField 𝕜] [inst_4 : NormedSpace 𝕜 E] [inst_5 : NormedSpace 𝕜 E'] [inst_6 : NormedSpace 𝕜 F]\\n  (L : E →L[𝕜] E' →L[𝕜] F) [inst_7 : MeasurableSpace G] {μ : MeasureTheory.Measure G} [inst_8 : NormedSpace ℝ F]\\n  [inst_9 : AddCommGroup G] [inst_10 : MeasureTheory.Measure.IsAddLeftInvariant μ]\\n  [inst_11 : MeasureTheory.Measure.IsNegInvariant μ] [inst_12 : MeasurableNeg G] [inst_13 : MeasurableAdd G],\\n  (∀ᵐ (x : G) ∂μ, f (-x) = f x) → (∀ᵐ (x : G) ∂μ, g (-x) = g x) → convolution f g L (-x) = convolution f g L x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Equivalence classes partition the type. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {α : Type u_1} {r : Setoid α} (a : α), ∃! b x, a ∈ b\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The increment partition has energy greater than the original one by a known fixed amount. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : Fintype α] {P : Finpartition Finset.univ} {G : SimpleGraph α} {ε : ℝ} [inst_1 : Nonempty α]\\n  (hP : Finpartition.IsEquipartition P),\\n  7 ≤ P.parts.card →\\n    100 ≤ 4 ^ P.parts.card * ε ^ 5 →\\n      P.parts.card * 16 ^ P.parts.card ≤ Fintype.card α →\\n        ¬Finpartition.IsUniform P G ε →\\n          0 ≤ ε →\\n            ε ≤ 1 →\\n              ↑(Finpartition.energy P G) + ε ^ 5 / 4 ≤ ↑(Finpartition.energy (SzemerediRegularity.increment hP G ε) G)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A finpartition gives rise to a setoid partition \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} (f : Finpartition Set.univ), Setoid.IsPartition ↑f.parts\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The partition is supremum-independent \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : Lattice α] [inst_1 : OrderBot α] {a : α} (self : Finpartition a), Finset.SupIndep self.parts id\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The increment partition has a prescribed (very big) size in terms of the original partition. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : Fintype α] {P : Finpartition Finset.univ} {hP : Finpartition.IsEquipartition P}\\n  {G : SimpleGraph α} {ε : ℝ},\\n  P.parts.card * 16 ^ P.parts.card ≤ Fintype.card α →\\n    ¬Finpartition.IsUniform P G ε →\\n      (SzemerediRegularity.increment hP G ε).parts.card = SzemerediRegularity.stepBound P.parts.card\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The number of partitions with odd parts is equal to the number of partitions with distinct parts.\\n\\nGive ONLY the Lean code\"}]"}
{"text":"Every non-empty poset in which every chain has an upper bound contains a maximal element.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The intrinsic interior of a nonempty convex set is nonempty. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : NormedSpace ℝ V] [inst_2 : FiniteDimensional ℝ V] {s : Set V},\\n  Convex ℝ s → Set.Nonempty s → Set.Nonempty (intrinsicInterior ℝ s)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: In a (nontrivial) complex Banach algebra, every element has nonempty spectrum. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {A : Type u_2} [inst : NormedRing A] [inst_1 : NormedAlgebra ℂ A] [inst_2 : CompleteSpace A] [inst_3 : Nontrivial A]\\n  (a : A), Set.Nonempty (spectrum ℂ a)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A nonempty convex set is connected. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {E : Type u_3} [inst : AddCommGroup E] [inst_1 : Module ℝ E] [inst_2 : TopologicalSpace E]\\n  [inst_3 : TopologicalAddGroup E] [inst_4 : ContinuousSMul ℝ E] {s : Set E},\\n  Convex ℝ s → Set.Nonempty s → IsConnected s\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: In a directed order, the union of two sets is bounded above if and only if both sets are. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : Preorder α] [inst_1 : IsDirected α fun x x_1 => x ≤ x_1] {s t : Set α},\\n  BddAbove (s ∪ t) ↔ BddAbove s ∧ BddAbove t\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Any element of a set is more than the set infimum. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_9} [self : CompleteSemilatticeInf α] (s : Set α), ∀ a ∈ s, sInf s ≤ a\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A sequentially compact set in a uniform space is totally bounded. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} [inst : UniformSpace X] {s : Set X}, IsSeqCompact s → TotallyBounded s\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Any uncountable closed set in a second countable space contains a nonempty perfect subset.\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] {C : Set α} [inst_1 : SecondCountableTopology α],\\n  IsClosed C → ¬Set.Countable C → ∃ D, Perfect D ∧ Set.Nonempty D ∧ D ⊆ C\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Every set open in the upper topology is a upper set. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : Preorder α] [inst_1 : TopologicalSpace α] [inst_2 : Topology.IsUpper α] {s : Set α},\\n  IsOpen s → IsUpperSet s\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: In a directed order, the union of bounded above sets is bounded above. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : Preorder α] [inst_1 : IsDirected α fun x x_1 => x ≤ x_1] {s t : Set α},\\n  BddAbove s → BddAbove t → BddAbove (s ∪ t)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A chain of lifts has an upper bound. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {F : Type u_1} {E : Type u_2} {K : Type u_3} [inst : Field F] [inst_1 : Field E] [inst_2 : Field K]\\n  [inst_3 : Algebra F E] [inst_4 : Algebra F K] (c : Set (IntermediateField.Lifts F E K)),\\n  IsChain (fun x x_1 => x ≤ x_1) c → ∃ ub, ∀ a ∈ c, a ≤ ub\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A finite set is bounded above.\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : Preorder α] [inst_1 : IsDirected α fun x x_1 => x ≤ x_1] [inst_2 : Nonempty α] {s : Set α},\\n  Set.Finite s → BddAbove s\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A finite union of sets which are all bounded above is still bounded above.\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} [inst : Preorder α] [inst_1 : IsDirected α fun x x_1 => x ≤ x_1] [inst_2 : Nonempty α]\\n  {I : Set β} {S : β → Set α}, Set.Finite I → (BddAbove (⋃ i ∈ I, S i) ↔ ∀ i ∈ I, BddAbove (S i))\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: When there is a global maximum, every set is bounded above. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : Preorder α] [inst_1 : OrderTop α] (s : Set α), BddAbove s\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Any upper bound is more than the set supremum. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [self : CompleteBooleanAlgebra α] (s : Set α) (a : α), (∀ b ∈ s, b ≤ a) → sSup s ≤ a\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Every chain is contained in a maximal chain. This generalizes Hausdorff's maximality principle.\\n\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} {r : α → α → Prop} {c : Set α}, IsChain r c → ∃ M, IsMaxChain r M ∧ c ⊆ M\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: **Zorn's lemma**\\n\\nIf every chain has an upper bound, then there exists a maximal element. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} {r : α → α → Prop},\\n  (∀ (c : Set α), IsChain r c → ∃ ub, ∀ a ∈ c, r a ub) →\\n    (∀ {a b c : α}, r a b → r b c → r a c) → ∃ m, ∀ (a : α), r m a → r a m\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Every non-empty poset in which every chain has an upper bound contains a maximal element.\\n\\nGive ONLY the Lean code\"}]"}
{"text":"A group whose automorphism group is cyclic is Abelian.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Abelian groups have nilpotency class at most one \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_2} [inst : CommGroup G], Group.nilpotencyClass G ≤ 1\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Subgroups of additive torsion-free groups are additively torsion-free.\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddGroup G], AddMonoid.IsTorsionFree G → ∀ (H : AddSubgroup G), AddMonoid.IsTorsionFree ↥H\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The torsion submonoid of an abelian group equals the torsion subgroup as a submonoid. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (G : Type u_1) [inst : CommGroup G], CommMonoid.torsion G = (CommGroup.torsion G).toSubmonoid\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A nilpotent Lie algebra with a representation whose trace form is non-singular is Abelian. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (R : Type u_1) (L : Type u_3) (M : Type u_4) [inst : CommRing R] [inst_1 : LieRing L] [inst_2 : LieAlgebra R L]\\n  [inst_3 : AddCommGroup M] [inst_4 : Module R M] [inst_5 : LieRingModule L M] [inst_6 : LieModule R L M]\\n  [inst_7 : Module.Free R M] [inst_8 : Module.Finite R M] [inst_9 : LieAlgebra.IsNilpotent R L] [inst_10 : IsDomain R]\\n  [inst_11 : IsPrincipalIdealRing R], LinearMap.ker (LieModule.traceForm R L M) = ⊥ → IsLieAbelian L\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: An abelian category is idempotent complete. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (D : Type u_2) [inst : CategoryTheory.Category.{u_3, u_2} D] [inst_1 : CategoryTheory.Abelian D],\\n  CategoryTheory.IsIdempotentComplete D\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The right regular action of an additive group on itself is transitive.\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_2} [inst : AddGroup G], AddAction.IsPretransitive Gᵃᵒᵖ G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Subgroups of additive torsion groups are additive torsion groups.\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddGroup G], AddMonoid.IsTorsion G → ∀ (H : AddSubgroup G), AddMonoid.IsTorsion ↥H\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A group is finitely generated if and only if it is finitely generated as a monoid. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {G : Type u_3} [inst : Group G], Group.FG G ↔ Monoid.FG G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The quotient by the center of a group of cardinality `p ^ 2` is cyclic. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {p : ℕ} {G : Type u_1} [inst : Group G] [inst_1 : Fintype G] [inst_2 : Fact (Nat.Prime p)],\\n  Fintype.card G = p ^ 2 → IsCyclic (G ⧸ Subgroup.center G)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Subgroups of torsion groups are torsion groups. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G], Monoid.IsTorsion G → ∀ (H : Subgroup G), Monoid.IsTorsion ↥H\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Finite groups are torsion groups. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] [inst_1 : Finite G], Monoid.IsTorsion G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The product of group homomorphisms is a group homomorphism if the target is commutative. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} {β : Type u_2} [inst : Group α] [inst_1 : CommGroup β] {f g : α → β},\\n  IsGroupHom f → IsGroupHom g → IsGroupHom fun a => f a * g a\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A group homomorphism is a monoid homomorphism. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} [inst : Group α] [inst_1 : Group β] {f : α → β}, IsGroupHom f → IsMonoidHom f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The torsion subgroup is cylic. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (K : Type u_1) [inst : Field K] [inst_1 : NumberField K], IsCyclic ↥(NumberField.Units.torsion K)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Every subgroup of `ℤ` is cyclic. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ (H : AddSubgroup ℤ), ∃ a, H = AddSubgroup.closure {a}\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Abelian groups are nilpotent \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {G : Type u_2} [inst : CommGroup G], Group.IsNilpotent G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A finite subgroup of the units of an integral domain is cyclic. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsDomain R] (S : Subgroup Rˣ) [inst_2 : Finite ↥S], IsCyclic ↥S\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A finite group of prime order is cyclic.\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : AddGroup α] [inst_1 : Fintype α] {p : ℕ} [hp : Fact (Nat.Prime p)],\\n  Fintype.card α = p → IsAddCyclic α\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A finite subgroup of the unit group of an integral domain is cyclic. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} {G : Type u_2} [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : Group G] [inst_3 : Finite G]\\n  (f : G →* R), Function.Injective ⇑f → IsCyclic G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A finite group of prime order is cyclic. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : Group α] [inst_1 : Fintype α] {p : ℕ} [hp : Fact (Nat.Prime p)], Fintype.card α = p → IsCyclic α\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A group whose automorphism group is cyclic is Abelian.\\n\\nGive ONLY the Lean code\"}]"}
{"text":"A uniformly continuous function of a uniformly continuous function is uniformly continuous.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A constant sequence of functions is uniformly integrable in the probability sense. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} {β : Type u_2} {ι : Type u_3} {m : MeasurableSpace α} {μ : MeasureTheory.Measure α}\\n  [inst : NormedAddCommGroup β] {p : ENNReal} {g : α → β},\\n  1 ≤ p → p ≠ ⊤ → MeasureTheory.Memℒp g p → MeasureTheory.UniformIntegrable (fun x => g) p μ\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A continuous function is bounded above on a compact set. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_2} {β : Type u_3} [inst : LinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : TopologicalSpace β]\\n  [inst_3 : ClosedIciTopology α] [inst_4 : Nonempty α] {f : β → α} {K : Set β},\\n  IsCompact K → ContinuousOn f K → BddAbove (f '' K)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Each function of an equicontinuous family is continuous. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {ι : Type u_1} {X : Type u_3} {α : Type u_6} [inst : TopologicalSpace X] [inst_1 : UniformSpace α] {F : ι → X → α},\\n  Equicontinuous F → ∀ (i : ι), Continuous (F i)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A Lipschitz function is uniformly continuous. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} [inst : PseudoEMetricSpace α] [inst_1 : PseudoEMetricSpace β] {K : NNReal} {f : α → β},\\n  LipschitzWith K f → UniformContinuous f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A sequentially continuous function defined on a sequential space is continuous. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] [inst_2 : SequentialSpace X]\\n  {f : X → Y}, SeqContinuous f → Continuous f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Uniform continuity of the function \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_4} {β : Type u_5} [inst : UniformSpace α] [inst_1 : UniformSpace β] (self : α ≃ᵤ β),\\n  UniformContinuous self.toFun\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A constant function is uniformly integrable. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} {β : Type u_2} {ι : Type u_3} {m : MeasurableSpace α} (μ : MeasureTheory.Measure α)\\n  [inst : NormedAddCommGroup β] {p : ENNReal} {g : α → β},\\n  1 ≤ p → p ≠ ⊤ → MeasureTheory.Memℒp g p → MeasureTheory.UnifIntegrable (fun x => g) p μ\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A function which can be locally uniformly approximated by continuous functions is continuous. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} [inst : UniformSpace β] {f : α → β} [inst_1 : TopologicalSpace α],\\n  (∀ (x : α), ∀ u ∈ uniformity β, ∃ t ∈ nhds x, ∃ F, ContinuousAt F x ∧ ∀ y ∈ t, (f y, F y) ∈ u) → Continuous f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A locally uniform limit of continuous functions is continuous. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {p : Filter ι}\\n  [inst_1 : TopologicalSpace α],\\n  TendstoLocallyUniformly F f p → (∀ᶠ (n : ι) in p, Continuous (F n)) → ∀ [inst_2 : Filter.NeBot p], Continuous f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A function which can be uniformly approximated by continuous functions is continuous. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} [inst : UniformSpace β] {f : α → β} [inst_1 : TopologicalSpace α],\\n  (∀ u ∈ uniformity β, ∃ F, Continuous F ∧ ∀ (y : α), (f y, F y) ∈ u) → Continuous f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Each function of a uniformly equicontinuous family is uniformly continuous. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {ι : Type u_1} {α : Type u_6} {β : Type u_7} [inst : UniformSpace α] [inst_1 : UniformSpace β] {F : ι → β → α},\\n  UniformEquicontinuous F → ∀ (i : ι), UniformContinuous (F i)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A uniform limit of continuous functions is continuous. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {p : Filter ι}\\n  [inst_1 : TopologicalSpace α],\\n  TendstoUniformly F f p → (∀ᶠ (n : ι) in p, Continuous (F n)) → ∀ [inst_2 : Filter.NeBot p], Continuous f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A uniformly continuous function of a uniformly continuous function is uniformly continuous.\\n\\nGive ONLY the Lean code\"}]"}
{"text":"A uniformly continuous function of a uniformly continuous function is uniformly continuous.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A constant sequence of functions is uniformly integrable in the probability sense. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} {β : Type u_2} {ι : Type u_3} {m : MeasurableSpace α} {μ : MeasureTheory.Measure α}\\n  [inst : NormedAddCommGroup β] {p : ENNReal} {g : α → β},\\n  1 ≤ p → p ≠ ⊤ → MeasureTheory.Memℒp g p → MeasureTheory.UniformIntegrable (fun x => g) p μ\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A continuous function is bounded above on a compact set. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_2} {β : Type u_3} [inst : LinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : TopologicalSpace β]\\n  [inst_3 : ClosedIciTopology α] [inst_4 : Nonempty α] {f : β → α} {K : Set β},\\n  IsCompact K → ContinuousOn f K → BddAbove (f '' K)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Each function of an equicontinuous family is continuous. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {ι : Type u_1} {X : Type u_3} {α : Type u_6} [inst : TopologicalSpace X] [inst_1 : UniformSpace α] {F : ι → X → α},\\n  Equicontinuous F → ∀ (i : ι), Continuous (F i)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A Lipschitz function is uniformly continuous. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} [inst : PseudoEMetricSpace α] [inst_1 : PseudoEMetricSpace β] {K : NNReal} {f : α → β},\\n  LipschitzWith K f → UniformContinuous f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A sequentially continuous function defined on a sequential space is continuous. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] [inst_2 : SequentialSpace X]\\n  {f : X → Y}, SeqContinuous f → Continuous f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Uniform continuity of the function \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_4} {β : Type u_5} [inst : UniformSpace α] [inst_1 : UniformSpace β] (self : α ≃ᵤ β),\\n  UniformContinuous self.toFun\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A constant function is uniformly integrable. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} {β : Type u_2} {ι : Type u_3} {m : MeasurableSpace α} (μ : MeasureTheory.Measure α)\\n  [inst : NormedAddCommGroup β] {p : ENNReal} {g : α → β},\\n  1 ≤ p → p ≠ ⊤ → MeasureTheory.Memℒp g p → MeasureTheory.UnifIntegrable (fun x => g) p μ\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A function which can be locally uniformly approximated by continuous functions is continuous. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} [inst : UniformSpace β] {f : α → β} [inst_1 : TopologicalSpace α],\\n  (∀ (x : α), ∀ u ∈ uniformity β, ∃ t ∈ nhds x, ∃ F, ContinuousAt F x ∧ ∀ y ∈ t, (f y, F y) ∈ u) → Continuous f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A locally uniform limit of continuous functions is continuous. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {p : Filter ι}\\n  [inst_1 : TopologicalSpace α],\\n  TendstoLocallyUniformly F f p → (∀ᶠ (n : ι) in p, Continuous (F n)) → ∀ [inst_2 : Filter.NeBot p], Continuous f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A function which can be uniformly approximated by continuous functions is continuous. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} [inst : UniformSpace β] {f : α → β} [inst_1 : TopologicalSpace α],\\n  (∀ u ∈ uniformity β, ∃ F, Continuous F ∧ ∀ (y : α), (f y, F y) ∈ u) → Continuous f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Each function of a uniformly equicontinuous family is uniformly continuous. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {ι : Type u_1} {α : Type u_6} {β : Type u_7} [inst : UniformSpace α] [inst_1 : UniformSpace β] {F : ι → β → α},\\n  UniformEquicontinuous F → ∀ (i : ι), UniformContinuous (F i)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A uniform limit of continuous functions is continuous. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {f : α → β} {p : Filter ι}\\n  [inst_1 : TopologicalSpace α],\\n  TendstoUniformly F f p → (∀ᶠ (n : ι) in p, Continuous (F n)) → ∀ [inst_2 : Filter.NeBot p], Continuous f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A uniformly continuous function of a uniformly continuous function is uniformly continuous.\\n\\nGive ONLY the Lean code\"}]"}
{"text":"A topological space is normal if and only if any two disjoint closed subsets can be separated by a continuous function.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: For any topological space `X`, its one point compactification is a compact space. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X], CompactSpace (OnePoint X)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The only open sets in the indiscrete topology are the empty set and the whole space. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {α : Type u_2} (U : Set α), IsOpen U ↔ U = ∅ ∨ U = Set.univ\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The intersection of two open compact subsets of a quasi-separated space is compact.\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_3} [inst : TopologicalSpace α] [self : QuasiSeparatedSpace α] (U V : Set α),\\n  IsOpen U → IsCompact U → IsOpen V → IsCompact V → IsCompact (U ∩ V)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The product of a countable family of separable spaces is a separable space. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {ι : Type u_2} {X : ι → Type u_3} [inst : (i : ι) → TopologicalSpace (X i)]\\n  [inst_1 : ∀ (i : ι), TopologicalSpace.SeparableSpace (X i)] [inst_2 : Countable ι],\\n  TopologicalSpace.SeparableSpace ((i : ι) → X i)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A subspace is dense iff its topological closure is the entire space. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} {M : Type v} [inst : Semiring R] [inst_1 : TopologicalSpace M] [inst_2 : AddCommMonoid M]\\n  [inst_3 : Module R M] [inst_4 : ContinuousConstSMul R M] [inst_5 : ContinuousAdd M] {s : Submodule R M},\\n  Dense ↑s ↔ Submodule.topologicalClosure s = ⊤\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Any two points in a path-connected space must be joined by a continuous path. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_4} [inst : TopologicalSpace X] [self : PathConnectedSpace X] (x y : X), Joined x y\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A linear order with order topology is a completely normal Hausdorff topological space. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} [inst : LinearOrder X] [inst_1 : TopologicalSpace X] [inst : OrderTopology X], T5Space X\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: In a separable space, a family of nonempty disjoint open sets is countable. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [t : TopologicalSpace α] [inst : TopologicalSpace.SeparableSpace α] {ι : Type u_2} {s : ι → Set α}\\n  {a : Set ι}, Set.PairwiseDisjoint a s → (∀ i ∈ a, IsOpen (s i)) → (∀ i ∈ a, Set.Nonempty (s i)) → Set.Countable a\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Any continuous function on compact Hausdorff spaces is a closed map. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {X Y : CompHaus} (f : X ⟶ Y), IsClosedMap ⇑f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The product of two separable spaces is a separable space. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type u_1} [t : TopologicalSpace α] [inst : TopologicalSpace β]\\n  [inst_1 : TopologicalSpace.SeparableSpace α] [inst_2 : TopologicalSpace.SeparableSpace β],\\n  TopologicalSpace.SeparableSpace (α × β)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Every two points in a Hausdorff space admit disjoint open neighbourhoods. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u} [inst : TopologicalSpace X] [self : T2Space X],\\n  Pairwise fun x y => ∃ u v, IsOpen u ∧ IsOpen v ∧ x ∈ u ∧ y ∈ v ∧ Disjoint u v\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Two disjoint sets in a normal space admit disjoint neighbourhoods. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u} [inst : TopologicalSpace X] [self : NormalSpace X] (s t : Set X),\\n  IsClosed s → IsClosed t → Disjoint s t → SeparatedNhds s t\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Finite topological spaces are compact. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u} [inst : TopologicalSpace X] [inst_1 : Finite X], CompactSpace X\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A space with discrete topology is a locally connected space. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (α : Type u_3) [inst : TopologicalSpace α] [inst_1 : DiscreteTopology α], LocallyConnectedSpace α\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A topological space with discrete topology is separable iff it is countable. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [t : TopologicalSpace α] [inst : DiscreteTopology α], TopologicalSpace.SeparableSpace α ↔ Countable α\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A topological space is normal if and only if any two disjoint closed subsets can be separated by a continuous function.\\n\\nGive ONLY the Lean code\"}]"}
{"text":"If a function from the unit interval to itself has a point of period three, then it has points of all positive periods.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Any three points in an orthocentric system are affinely independent. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\\n  [inst_3 : NormedAddTorsor V P] {s : Set P},\\n  EuclideanGeometry.OrthocentricSystem s →\\n    ∀ {p : Fin 3 → P}, Set.range p ⊆ s → Function.Injective p → AffineIndependent ℝ p\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Right multiplication by a positive element is strictly monotone. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_2} [self : CanonicallyLinearOrderedSemifield α] (a b c : α), a < b → 0 < c → a * c < b * c\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If `f` sends two periodic points `x` and `y` of positive periods to the same point,\\nthen `x = y`. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} {f : α → α} {x y : α} {m n : ℕ},\\n  Function.IsPeriodicPt f m x → Function.IsPeriodicPt f n y → 0 < m → 0 < n → f x = f y → x = y\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If three points are not collinear, the angle between them is positive. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\\n  [inst_3 : NormedAddTorsor V P] {p₁ p₂ p₃ : P}, ¬Collinear ℝ {p₁, p₂, p₃} → 0 < EuclideanGeometry.angle p₁ p₂ p₃\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If a point lies in the affine span of two points, those three points are collinear. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {k : Type u_1} {V : Type u_2} {P : Type u_3} [inst : DivisionRing k] [inst_1 : AddCommGroup V] [inst_2 : Module k V]\\n  [inst_3 : AddTorsor V P] {p₁ p₂ p₃ : P}, p₁ ∈ affineSpan k {p₂, p₃} → Collinear k {p₁, p₂, p₃}\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A continuous, periodic function is bounded. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : PseudoMetricSpace α] {f : ℝ → α} {c : ℝ},\\n  Function.Periodic f c → c ≠ 0 → Continuous f → Bornology.IsBounded (Set.range f)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If the angle between three points is π, they are collinear. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\\n  [inst_3 : NormedAddTorsor V P] {p₁ p₂ p₃ : P}, EuclideanGeometry.angle p₁ p₂ p₃ = Real.pi → Collinear ℝ {p₁, p₂, p₃}\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If two functions are equal in the relevant interval, their interval integrals are also equal. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {E : Type u_3} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] {f g : ℝ → E} {μ : MeasureTheory.Measure ℝ}\\n  {a b : ℝ}, Set.EqOn f g (Set.uIcc a b) → ∫ (x : ℝ) in a..b, f x ∂μ = ∫ (x : ℝ) in a..b, g x ∂μ\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If three points are not collinear, the sine of the angle between them is positive. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\\n  [inst_3 : NormedAddTorsor V P] {p₁ p₂ p₃ : P},\\n  ¬Collinear ℝ {p₁, p₂, p₃} → 0 < Real.sin (EuclideanGeometry.angle p₁ p₂ p₃)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Three points are coplanar. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (k : Type u_1) {V : Type u_2} {P : Type u_3} [inst : DivisionRing k] [inst_1 : AddCommGroup V] [inst_2 : Module k V]\\n  [inst_3 : AddTorsor V P] (p₁ p₂ p₃ : P), Coplanar k {p₁, p₂, p₃}\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A continuous, periodic function has compact range. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : TopologicalSpace α] {f : ℝ → α} {c : ℝ},\\n  Function.Periodic f c → c ≠ 0 → Continuous f → IsCompact (Set.range f)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Any three points in a cospherical set are affinely independent. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\\n  [inst_3 : NormedAddTorsor V P] {s : Set P},\\n  EuclideanGeometry.Cospherical s →\\n    ∀ {p₁ p₂ p₃ : P}, p₁ ∈ s → p₂ ∈ s → p₃ ∈ s → p₁ ≠ p₂ → p₁ ≠ p₃ → p₂ ≠ p₃ → AffineIndependent ℝ ![p₁, p₂, p₃]\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If three points lie in the affine span of two points, the first three points are collinear. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {k : Type u_1} {V : Type u_2} {P : Type u_3} [inst : DivisionRing k] [inst_1 : AddCommGroup V] [inst_2 : Module k V]\\n  [inst_3 : AddTorsor V P] {p₁ p₂ p₃ p₄ p₅ : P},\\n  p₁ ∈ affineSpan k {p₄, p₅} → p₂ ∈ affineSpan k {p₄, p₅} → p₃ ∈ affineSpan k {p₄, p₅} → Collinear k {p₁, p₂, p₃}\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: For the identity map, all points are periodic. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {α : Type u_1} (n : ℕ) (x : α), Function.IsPeriodicPt id n x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A fixed point of `f` is a periodic point of `f` of any prescribed period. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} {f : α → α} {x : α}, Function.IsFixedPt f x → ∀ (n : ℕ), Function.IsPeriodicPt f n x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Any point is a periodic point of period `0`. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} (f : α → α) (x : α), Function.IsPeriodicPt f 0 x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If a function from the unit interval to itself has a point of period three, then it has points of all positive periods.\\n\\nGive ONLY the Lean code\"}]"}
{"text":"A terminal object in a category is unique up to unique isomorphism.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The (unique) isomorphism between the chosen terminal object and any other terminal object. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"{C : Type u₁} →\\n  [inst : CategoryTheory.Category.{v₁, u₁} C] →\\n    [inst_1 : CategoryTheory.Limits.HasTerminal C] → {P : C} → CategoryTheory.Limits.IsTerminal P → (⊤_ C ≅ P)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Any category with pullbacks and terminal object has binary products. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (C : Type u) [inst : CategoryTheory.Category.{v, u} C] [inst_1 : CategoryTheory.Limits.HasTerminal C]\\n  [inst_2 : CategoryTheory.Limits.HasPullbacks C], CategoryTheory.Limits.HasBinaryProducts C\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A nonzero epimorphism from a simple object is an isomorphism. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {C : Type u} [inst : CategoryTheory.Category.{v, u} C] [inst_1 : CategoryTheory.Abelian C] {X Y : C}\\n  [inst_2 : CategoryTheory.Simple X] {f : X ⟶ Y} [inst_3 : CategoryTheory.Epi f], f ≠ 0 → CategoryTheory.IsIso f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A strong mono category is a category in which every monomorphism is strong. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {C : Type u} [inst : CategoryTheory.Category.{v, u} C] [self : CategoryTheory.StrongMonoCategory C] {X Y : C}\\n  (f : X ⟶ Y) [inst_1 : CategoryTheory.Mono f], CategoryTheory.StrongMono f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A nonzero monomorphism to a simple object is an isomorphism. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {C : Type u} [inst : CategoryTheory.Category.{v, u} C] [inst_1 : CategoryTheory.Limits.HasZeroMorphisms C] {X Y : C}\\n  [inst_2 : CategoryTheory.Simple Y] {f : X ⟶ Y} [inst_3 : CategoryTheory.Mono f], f ≠ 0 → CategoryTheory.IsIso f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The category `D` has isomorphic objects equal \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] {D : Type u₂} [inst_1 : CategoryTheory.Category.{v₂, u₂} D]\\n  {F : CategoryTheory.Functor D C}, CategoryTheory.IsSkeletonOf C D F → CategoryTheory.Skeletal D\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A category in which coimage-image comparisons are all isomorphisms has images. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {C : Type u} [inst : CategoryTheory.Category.{v, u} C] [inst_1 : CategoryTheory.Preadditive C]\\n  [inst_2 : CategoryTheory.Limits.HasKernels C] [inst_3 : CategoryTheory.Limits.HasCokernels C]\\n  [inst_4 : ∀ {X Y : C} (f : X ⟶ Y), CategoryTheory.IsIso (CategoryTheory.Abelian.coimageImageComparison f)],\\n  CategoryTheory.Limits.HasImages C\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Any morphism from a terminal object is split mono. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] {X Y : C},\\n  CategoryTheory.Limits.IsTerminal X → ∀ (f : X ⟶ Y), CategoryTheory.IsSplitMono f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: An abelian category is idempotent complete. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (D : Type u_2) [inst : CategoryTheory.Category.{u_3, u_2} D] [inst_1 : CategoryTheory.Abelian D],\\n  CategoryTheory.IsIdempotentComplete D\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A category with finite biproducts has a zero object. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (C : Type u) [inst : CategoryTheory.Category.{v, u} C] [inst_1 : CategoryTheory.Limits.HasZeroMorphisms C]\\n  [inst_2 : CategoryTheory.Limits.HasFiniteBiproducts C], CategoryTheory.Limits.HasZeroObject C\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If there are zero morphisms, any terminal object is a zero object. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {C : Type u} [inst : CategoryTheory.Category.{v, u} C] [inst_1 : CategoryTheory.Limits.HasZeroMorphisms C]\\n  [inst_2 : CategoryTheory.Limits.HasTerminal C], CategoryTheory.Limits.HasZeroObject C\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Any morphism from a terminal object is mono. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] {X Y : C},\\n  CategoryTheory.Limits.IsTerminal X → ∀ (f : X ⟶ Y), CategoryTheory.Mono f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The subcategory of subterminal objects is an exponential ideal. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] [inst_1 : CategoryTheory.Limits.HasFiniteProducts C]\\n  [inst_2 : CategoryTheory.CartesianClosed C], CategoryTheory.ExponentialIdeal (CategoryTheory.subterminalInclusion C)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Any two morphisms to a terminal object are equal. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] {X Y : C},\\n  CategoryTheory.Limits.IsTerminal X → ∀ (f g : Y ⟶ X), f = g\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A terminal object in a category is unique up to unique isomorphism.\\n\\nGive ONLY the Lean code\"}]"}
{"text":"The complement of the union of two sets is the intersection of their complements.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If a compact set is covered by two open sets, then we can cover it by two compact subsets. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : R1Space X] {K U V : Set X},\\n  IsCompact K → IsOpen U → IsOpen V → K ⊆ U ∪ V → ∃ K₁ K₂, IsCompact K₁ ∧ IsCompact K₂ ∧ K₁ ⊆ U ∧ K₂ ⊆ V ∧ K = K₁ ∪ K₂\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: In a directed order, the union of two sets is bounded above if and only if both sets are. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : Preorder α] [inst_1 : IsDirected α fun x x_1 => x ≤ x_1] {s t : Set α},\\n  BddAbove (s ∪ t) ↔ BddAbove s ∧ BddAbove t\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The supremum of two subspaces is equal to the span of their union. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u_1} {V : Type u_2} [inst : Field K] [inst_1 : AddCommGroup V] [inst_2 : Module K V]\\n  (S T : Set (Projectivization K V)),\\n  Projectivization.Subspace.span (S ∪ T) = Projectivization.Subspace.span S ⊔ Projectivization.Subspace.span T\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The union of all sets in a compact exhaustion equals the entire space. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_4} [inst : TopologicalSpace X] (self : CompactExhaustion X),\\n  ⋃ n, CompactExhaustion.toFun self n = Set.univ\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: In a codirected order, the union of two sets is bounded below if and only if both sets are. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : Preorder α] [inst_1 : IsDirected α fun x x_1 => x ≥ x_1] {s t : Set α},\\n  BddBelow (s ∪ t) ↔ BddBelow s ∧ BddBelow t\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The span of a union of sets is the sup of their spans. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (k : Type u_1) (V : Type u_2) {P : Type u_3} [inst : Ring k] [inst_1 : AddCommGroup V] [inst_2 : Module k V]\\n  [S : AddTorsor V P] (s t : Set P), affineSpan k (s ∪ t) = affineSpan k s ⊔ affineSpan k t\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The intersection of a disjoint covering by two open sets of a clopen set will be clopen. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u} [inst : TopologicalSpace X] {s a b : Set X},\\n  IsClopen s → s ⊆ a ∪ b → IsOpen a → IsOpen b → Disjoint a b → IsClopen (s ∩ a)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If two sets intersect, the diameter of the union is bounded by the sum of the diameters. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : PseudoMetricSpace α] {s t : Set α},\\n  Set.Nonempty (s ∩ t) → Metric.diam (s ∪ t) ≤ Metric.diam s + Metric.diam t\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The set difference of a compact set and an open set is a compact set. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u} [inst : TopologicalSpace X] {s t : Set X}, IsCompact s → IsOpen t → IsCompact (s \\\\ t)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The disjoint union of two compact spaces is compact. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u} {Y : Type v} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] [inst_2 : CompactSpace X]\\n  [inst_3 : CompactSpace Y], CompactSpace (X ⊕ Y)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The intersection of a preperfect set and an open set is preperfect. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] {C U : Set α}, Preperfect C → IsOpen U → Preperfect (U ∩ C)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The cardinality of a union is at most the sum of the cardinalities\\nof the two sets. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} (S T : Set α), Cardinal.mk ↑(S ∪ T) ≤ Cardinal.mk ↑S + Cardinal.mk ↑T\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If two sets belong to a filter, then their intersection belongs to the filter as well. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} (self : Filter α) {x y : Set α}, x ∈ self.sets → y ∈ self.sets → x ∩ y ∈ self.sets\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The intersection of a closed set and a compact set is a compact set. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u} [inst : TopologicalSpace X] {s t : Set X}, IsCompact t → IsClosed s → IsCompact (s ∩ t)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The indicator of a disjoint union of two sets is the sum of the indicators of the sets. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} {E : Type u_2} {m0 : MeasurableSpace α} {p : ENNReal} {μ : MeasureTheory.Measure α}\\n  [inst : NormedAddCommGroup E] {s t : Set α} (hs : MeasurableSet s) (ht : MeasurableSet t) (hμs : ↑↑μ s ≠ ⊤)\\n  (hμt : ↑↑μ t ≠ ⊤),\\n  s ∩ t = ∅ →\\n    ∀ (c : E),\\n      MeasureTheory.indicatorConstLp p (_ : MeasurableSet (s ∪ t)) (_ : ↑↑μ (s ∪ t) ≠ ⊤) c =\\n        MeasureTheory.indicatorConstLp p hs hμs c + MeasureTheory.indicatorConstLp p ht hμt c\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The union of two bounded sets is bounded. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {𝕜 : Type u_1} {E : Type u_3} [inst : SeminormedRing 𝕜] [inst_1 : SMul 𝕜 E] [inst_2 : Zero E]\\n  [inst_3 : TopologicalSpace E] {s₁ s₂ : Set E},\\n  Bornology.IsVonNBounded 𝕜 s₁ → Bornology.IsVonNBounded 𝕜 s₂ → Bornology.IsVonNBounded 𝕜 (s₁ ∪ s₂)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The intersection of a compact set and a closed set is a compact set. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u} [inst : TopologicalSpace X] {s t : Set X}, IsCompact s → IsClosed t → IsCompact (s ∩ t)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The complement of a set has the same frontier as the original set. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u} [inst : TopologicalSpace X] (s : Set X), frontier sᶜ = frontier s\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The complement of a closed set is an open set. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u} [inst : TopologicalSpace X] {s : Set X} [self : IsClosed s], IsOpen sᶜ\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The complement of the union of two sets is the intersection of their complements.\\n\\nGive ONLY the Lean code\"}]"}
{"text":"The sum of the cubes of two positive integers is never equal to the cube of a third integer.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If the sign of the angle between three points is nonzero, the first two points are not\\nequal. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\\n  [inst_3 : NormedAddTorsor V P] [hd2 : Fact (FiniteDimensional.finrank ℝ V = 2)] [inst_4 : Module.Oriented ℝ V (Fin 2)]\\n  {p₁ p₂ p₃ : P}, Real.Angle.sign (EuclideanGeometry.oangle p₁ p₂ p₃) ≠ 0 → p₁ ≠ p₂\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A sort of triangle inequality. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_2} [inst : LinearOrder α] [inst_1 : LocallyFiniteOrder α] {a b c : α},\\n  Finset.uIcc a c ⊆ Finset.uIcc a b ∪ Finset.uIcc b c\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If the sign of the angle between three points is positive, the last two points are not\\nequal. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\\n  [inst_3 : NormedAddTorsor V P] [hd2 : Fact (FiniteDimensional.finrank ℝ V = 2)] [inst_4 : Module.Oriented ℝ V (Fin 2)]\\n  {p₁ p₂ p₃ : P}, Real.Angle.sign (EuclideanGeometry.oangle p₁ p₂ p₃) = 1 → p₃ ≠ p₂\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The n-th harmonic number is not an integer for n ≥ 2. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {n : ℕ}, 2 ≤ n → ¬Rat.isInt (harmonic n) = true\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If the sign of the angle between three points is negative, the first two points are not\\nequal. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\\n  [inst_3 : NormedAddTorsor V P] [hd2 : Fact (FiniteDimensional.finrank ℝ V = 2)] [inst_4 : Module.Oriented ℝ V (Fin 2)]\\n  {p₁ p₂ p₃ : P}, Real.Angle.sign (EuclideanGeometry.oangle p₁ p₂ p₃) = -1 → p₁ ≠ p₂\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If the angle between three points is `-π / 2`, the first and third points are not equal. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\\n  [inst_3 : NormedAddTorsor V P] [hd2 : Fact (FiniteDimensional.finrank ℝ V = 2)] [inst_4 : Module.Oriented ℝ V (Fin 2)]\\n  {p₁ p₂ p₃ : P}, EuclideanGeometry.oangle p₁ p₂ p₃ = ↑(-Real.pi / 2) → p₁ ≠ p₃\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If the angle between three points is `π / 2`, the first two points are not equal. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\\n  [inst_3 : NormedAddTorsor V P] [hd2 : Fact (FiniteDimensional.finrank ℝ V = 2)] [inst_4 : Module.Oriented ℝ V (Fin 2)]\\n  {p₁ p₂ p₃ : P}, EuclideanGeometry.oangle p₁ p₂ p₃ = ↑(Real.pi / 2) → p₁ ≠ p₂\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If the angle between three points is nonzero, the first two points are not equal. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\\n  [inst_3 : NormedAddTorsor V P] [hd2 : Fact (FiniteDimensional.finrank ℝ V = 2)] [inst_4 : Module.Oriented ℝ V (Fin 2)]\\n  {p₁ p₂ p₃ : P}, EuclideanGeometry.oangle p₁ p₂ p₃ ≠ 0 → p₁ ≠ p₂\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The sum over the reciprocals of the primes diverges. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"¬Summable (Set.indicator {p | Nat.Prime p} fun n => 1 / ↑n)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If the angle between three points is `π`, the first and third points are not equal. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\\n  [inst_3 : NormedAddTorsor V P] [hd2 : Fact (FiniteDimensional.finrank ℝ V = 2)] [inst_4 : Module.Oriented ℝ V (Fin 2)]\\n  {p₁ p₂ p₃ : P}, EuclideanGeometry.oangle p₁ p₂ p₃ = ↑Real.pi → p₁ ≠ p₃\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If the angle between three points is `π`, the first two points are not equal. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\\n  [inst_3 : NormedAddTorsor V P] [hd2 : Fact (FiniteDimensional.finrank ℝ V = 2)] [inst_4 : Module.Oriented ℝ V (Fin 2)]\\n  {p₁ p₂ p₃ : P}, EuclideanGeometry.oangle p₁ p₂ p₃ = ↑Real.pi → p₁ ≠ p₂\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If the angle between three points is nonzero, the first and third points are not equal. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\\n  [inst_3 : NormedAddTorsor V P] [hd2 : Fact (FiniteDimensional.finrank ℝ V = 2)] [inst_4 : Module.Oriented ℝ V (Fin 2)]\\n  {p₁ p₂ p₃ : P}, EuclideanGeometry.oangle p₁ p₂ p₃ ≠ 0 → p₁ ≠ p₃\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If the angle between three points is `π / 2`, the first and third points are not equal. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\\n  [inst_3 : NormedAddTorsor V P] [hd2 : Fact (FiniteDimensional.finrank ℝ V = 2)] [inst_4 : Module.Oriented ℝ V (Fin 2)]\\n  {p₁ p₂ p₃ : P}, EuclideanGeometry.oangle p₁ p₂ p₃ = ↑(Real.pi / 2) → p₁ ≠ p₃\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The set of natural numbers that are sums of two squares is closed under multiplication. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {a b x y u v : ℕ}, a = x ^ 2 + y ^ 2 → b = u ^ 2 + v ^ 2 → ∃ r s, a * b = r ^ 2 + s ^ 2\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If the sign of the angle between three points is positive, the first two points are not\\nequal. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\\n  [inst_3 : NormedAddTorsor V P] [hd2 : Fact (FiniteDimensional.finrank ℝ V = 2)] [inst_4 : Module.Oriented ℝ V (Fin 2)]\\n  {p₁ p₂ p₃ : P}, Real.Angle.sign (EuclideanGeometry.oangle p₁ p₂ p₃) = 1 → p₁ ≠ p₂\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: There are no perfect squares strictly between m² and (m+1)² \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {n m : ℕ}, m * m < n → n < (m + 1) * (m + 1) → ¬∃ t, t * t = n\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The sum of two squares is zero iff both elements are zero. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : LinearOrderedSemiring α] {a b : α} [inst_1 : ExistsAddOfLE α], a * a + b * b = 0 ↔ a = 0 ∧ b = 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The sum of the cubes of two positive integers is never equal to the cube of a third integer.\\n\\nGive ONLY the Lean code\"}]"}
{"text":"If every element of a group `G` has order `2`, then every pair of elements of `G` commutes.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If `a` commutes with both `b` and `c`, then it commutes with their sum.\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {S : Type u_2} [inst : AddSemigroup S] {a b c : S}, AddCommute a b → AddCommute a c → AddCommute a (b + c)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If `f` commutes with `g` and `g'`, then it commutes with `g ∘ g'`. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} {f g g' : α → α}, Function.Commute f g → Function.Commute f g' → Function.Commute f (g ∘ g')\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A theorem of Schur: A group with finitely many commutators has finite commutator subgroup. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (G : Type u_1) [inst : Group G] [inst_1 : Finite ↑(commutatorSet G)], Finite ↥(commutator G)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The composition of two group homomorphisms is a group homomorphism. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} [inst : Group α] [inst_1 : Group β] {f : α → β},\\n  IsGroupHom f → ∀ {γ : Type u_1} [inst_2 : Group γ] {g : β → γ}, IsGroupHom g → IsGroupHom (g ∘ f)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The center of a group acts commutatively on that group. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G], SMulCommClass G (↥(Subgroup.center G)) G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Commuting elements of finite additive order are closed under addition.\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddMonoid G] {x y : G},\\n  AddCommute x y → IsOfFinAddOrder x → IsOfFinAddOrder y → IsOfFinAddOrder (x + y)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If `a` commutes with both `b` and `c`, then it commutes with their product. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {S : Type u_2} [inst : Semigroup S] {a b c : S}, Commute a b → Commute a c → Commute a (b * c)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Self-adjoint elements commute if and only if their product is self-adjoint. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_3} [inst : Mul R] [inst_1 : StarMul R] {x y : R},\\n  IsSelfAdjoint x → IsSelfAdjoint y → (Commute x y ↔ IsSelfAdjoint (x * y))\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If both `a` and `b` commute with `c`, then their product commutes with `c`. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {S : Type u_2} [inst : Semigroup S] {a b c : S}, Commute a c → Commute b c → Commute (a * b) c\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If both `a` and `b` commute with `c`, then their product commutes with `c`.\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {S : Type u_2} [inst : AddSemigroup S] {a b c : S}, AddCommute a c → AddCommute b c → AddCommute (a + b) c\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If an element in a group has order two, then it is its own inverse. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] {x : G}, orderOf x = 2 → x⁻¹ = x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Commuting elements of finite order are closed under multiplication. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Monoid G] {x y : G}, Commute x y → IsOfFinOrder x → IsOfFinOrder y → IsOfFinOrder (x * y)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If `a` commutes with `b`, then `b` commutes with `a`. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {S : Type u_2} [inst : Mul S] {a b : S}, Commute a b → Commute b a\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If `a` commutes with `b`, then `b` commutes with `a`.\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {S : Type u_2} [inst : Add S] {a b : S}, AddCommute a b → AddCommute b a\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If n is odd, then the Dihedral group of order $2n$ has $n(n+3)$ pairs of commuting elements. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {n : ℕ}, Odd n → Nat.card { p // Commute p.1 p.2 } = n * (n + 3)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Elements of disjoint, normal subgroups commute. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] (H₁ H₂ : Subgroup G),\\n  Subgroup.Normal H₁ → Subgroup.Normal H₂ → Disjoint H₁ H₂ → ∀ (x y : G), x ∈ H₁ → y ∈ H₂ → Commute x y\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Elements of disjoint, normal subgroups commute.\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddGroup G] (H₁ H₂ : AddSubgroup G),\\n  AddSubgroup.Normal H₁ → AddSubgroup.Normal H₂ → Disjoint H₁ H₂ → ∀ (x y : G), x ∈ H₁ → y ∈ H₂ → AddCommute x y\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Any element commutes with itself. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {S : Type u_2} [inst : Mul S] (a : S), Commute a a\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Any element commutes with itself.\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {S : Type u_2} [inst : Add S] (a : S), AddCommute a a\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: In a group of exponent two, all elements commute. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G], Monoid.exponent G = 2 → ∀ (x y : G), x * y = y * x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If every element of a group `G` has order `2`, then every pair of elements of `G` commutes.\\n\\nGive ONLY the Lean code\"}]"}
{"text":"The product of two consecutive natural numbers is even.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The sum of two finite adèles is a finite adèle. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} {K : Type u_2} [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : IsDedekindDomain R]\\n  [inst_3 : Field K] [inst_4 : Algebra R K] [inst_5 : IsFractionRing R K]\\n  {x y : DedekindDomain.ProdAdicCompletions R K},\\n  DedekindDomain.ProdAdicCompletions.IsFiniteAdele x →\\n    DedekindDomain.ProdAdicCompletions.IsFiniteAdele y → DedekindDomain.ProdAdicCompletions.IsFiniteAdele (x + y)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The product of non-negative elements is non-negative. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [self : OrderedRing α] (a b : α), 0 ≤ a → 0 ≤ b → 0 ≤ a * b\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If a small natural number is divisible by a larger natural number,\\nthe small number is zero. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\", \"content\": \"∀ {a b : ℕ}, a ∣ b → b < a → b = 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The product of two finite adèles is a finite adèle. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} {K : Type u_2} [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : IsDedekindDomain R]\\n  [inst_3 : Field K] [inst_4 : Algebra R K] [inst_5 : IsFractionRing R K]\\n  {x y : DedekindDomain.ProdAdicCompletions R K},\\n  DedekindDomain.ProdAdicCompletions.IsFiniteAdele x →\\n    DedekindDomain.ProdAdicCompletions.IsFiniteAdele y → DedekindDomain.ProdAdicCompletions.IsFiniteAdele (x * y)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Every nonzero natural number has a unique prime factorization \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\", \"content\": \"Set.InjOn Nat.factorization {x | x ≠ 0}\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Two positive naturals are equal if their prime padic valuations are equal \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (a b : ℕ), a ≠ 0 → b ≠ 0 → (a = b ↔ ∀ (p : ℕ), Nat.Prime p → padicValNat p a = padicValNat p b)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: the condition on the two integers \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {n : ℤ} (self : CochainComplex.HomComplex.Triplet n), self.p + n = self.q\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A natural number is odd iff it has residue `1` or `3` mod `4`\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {n : ℕ}, n % 2 = 1 ↔ n % 4 = 1 ∨ n % 4 = 3\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A product of finite numbers is still finite \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {ι : Type u_1} {R : Type u_8} [inst : CommMonoidWithZero R] [inst_1 : NoZeroDivisors R] [inst_2 : Nontrivial R]\\n  [inst_3 : DecidableEq R] [inst_4 : LT R] {s : Finset ι} {f : ι → WithTop R},\\n  (∀ i ∈ s, f i ≠ ⊤) → (Finset.prod s fun i => f i) < ⊤\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: `2` is not a factor of an odd natural number. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\", \"content\": \"∀ {m n : ℕ}, Odd n → m ∣ n → m ≠ 2\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The product of two positive elements is positive. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [self : StrictOrderedRing α] (a b : α), 0 < a → 0 < b → 0 < a * b\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Two natural numbers are equal if and only if they have the same divisors. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {m n : ℕ}, (∀ (a : ℕ), a ∣ m ↔ a ∣ n) ↔ m = n\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The set of natural numbers that are sums of two squares is closed under multiplication. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {a b x y u v : ℕ}, a = x ^ 2 + y ^ 2 → b = u ^ 2 + v ^ 2 → ∃ r s, a * b = r ^ 2 + s ^ 2\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The convolution of two even functions is also even. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {𝕜 : Type u𝕜} {G : Type uG} {E : Type uE} {E' : Type uE'} {F : Type uF} [inst : NormedAddCommGroup E]\\n  [inst_1 : NormedAddCommGroup E'] [inst_2 : NormedAddCommGroup F] {f : G → E} {g : G → E'} {x : G}\\n  [inst_3 : NontriviallyNormedField 𝕜] [inst_4 : NormedSpace 𝕜 E] [inst_5 : NormedSpace 𝕜 E'] [inst_6 : NormedSpace 𝕜 F]\\n  (L : E →L[𝕜] E' →L[𝕜] F) [inst_7 : MeasurableSpace G] {μ : MeasureTheory.Measure G} [inst_8 : NormedSpace ℝ F]\\n  [inst_9 : AddCommGroup G] [inst_10 : MeasureTheory.Measure.IsAddLeftInvariant μ]\\n  [inst_11 : MeasureTheory.Measure.IsNegInvariant μ] [inst_12 : MeasurableNeg G] [inst_13 : MeasurableAdd G],\\n  (∀ᵐ (x : G) ∂μ, f (-x) = f x) → (∀ᵐ (x : G) ∂μ, g (-x) = g x) → convolution f g L (-x) = convolution f g L x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Two natural numbers are equal if and only if they have the same multiples. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {m n : ℕ}, (∀ (a : ℕ), m ∣ a ↔ n ∣ a) ↔ m = n\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The product of two consecutive natural numbers is even.\\n\\nGive ONLY the Lean code\"}]"}
{"text":"Every index 2 subgroup of a group is normal.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Subgroups of torsion groups are torsion groups. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G], Monoid.IsTorsion G → ∀ (H : Subgroup G), Monoid.IsTorsion ↥H\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The normal closure of s is the smallest normal subgroup containing s. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] {s t : Set G}, IsNormalSubgroup t → s ⊆ t → Group.normalClosure s ⊆ t\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The additive subgroup has finite index \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_2} [inst : AddGroup G] {H : AddSubgroup G} [self : AddSubgroup.FiniteIndex H], AddSubgroup.index H ≠ 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If an element in a group has order two, then it is its own inverse. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] {x : G}, orderOf x = 2 → x⁻¹ = x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: In a group of exponent two, every element is its own inverse. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G], Monoid.exponent G = 2 → ∀ (x : G), x⁻¹ = x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A subgroup is closed under multiplication. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] (H : Subgroup G) {x y : G}, x ∈ H → y ∈ H → x * y ∈ H\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A subgroup is closed under division. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {M : Type u_5} {S : Type u_6} [inst : DivInvMonoid M] [inst_1 : SetLike S M] [hSM : SubgroupClass S M] {H : S}\\n  {x y : M}, x ∈ H → y ∈ H → x / y ∈ H\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: In a group of exponent two, all elements commute. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G], Monoid.exponent G = 2 → ∀ (x y : G), x * y = y * x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Two subgroups are equal if they have the same elements. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] {H K : Subgroup G}, (∀ (x : G), x ∈ H ↔ x ∈ K) → H = K\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A subgroup contains the group's 1. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {G : Type u_1} [inst : Group G] (H : Subgroup G), 1 ∈ H\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Any normal subgroup is either `⊥` or `⊤` \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] [self : IsSimpleGroup G] (H : Subgroup G), Subgroup.Normal H → H = ⊥ ∨ H = ⊤\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The normal closure of a set is a subgroup. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] (s : Set G), IsSubgroup (Group.normalClosure s)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The normal closure of s is a normal subgroup. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} {s : Set G} [inst : Group G], IsNormalSubgroup (Group.normalClosure s)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Elements of disjoint, normal subgroups commute.\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddGroup G] (H₁ H₂ : AddSubgroup G),\\n  AddSubgroup.Normal H₁ → AddSubgroup.Normal H₂ → Disjoint H₁ H₂ → ∀ (x y : G), x ∈ H₁ → y ∈ H₂ → AddCommute x y\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The topological closure of a normal additive subgroup is normal.\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : TopologicalSpace G] [inst_1 : AddGroup G] [inst_2 : TopologicalAddGroup G] (N : AddSubgroup G)\\n  [inst_3 : AddSubgroup.Normal N], AddSubgroup.Normal (AddSubgroup.topologicalClosure N)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Elements of disjoint, normal subgroups commute. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] (H₁ H₂ : Subgroup G),\\n  Subgroup.Normal H₁ → Subgroup.Normal H₂ → Disjoint H₁ H₂ → ∀ (x y : G), x ∈ H₁ → y ∈ H₂ → Commute x y\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: In a group that satisfies the normalizer condition, every maximal subgroup is normal \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] (H : Subgroup G), NormalizerCondition G → IsCoatom H → Subgroup.Normal H\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The topological closure of a normal subgroup is normal.\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : TopologicalSpace G] [inst_1 : Group G] [inst_2 : TopologicalGroup G] (N : Subgroup G)\\n  [inst_3 : Subgroup.Normal N], Subgroup.Normal (Subgroup.topologicalClosure N)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The subgroup has finite index \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] {H : Subgroup G} [self : Subgroup.FiniteIndex H], Subgroup.index H ≠ 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Every index 2 subgroup of a group is normal.\\n\\nGive ONLY the Lean code\"}]"}
{"text":"Every free group is torsion free.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The group exponent exists for any bounded torsion group. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G],\\n  Monoid.IsTorsion G → Set.Finite (Set.range fun g => orderOf g) → Monoid.ExponentExists G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Torsion submonoids are torsion. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : CommMonoid G], Monoid.IsTorsion ↥(CommMonoid.torsion G)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Finite additive groups are additive torsion groups.\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddGroup G] [inst_1 : Finite G], AddMonoid.IsTorsion G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A nontrivial additive torsion group is not torsion-free.\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddGroup G] [hN : Nontrivial G], AddMonoid.IsTorsion G → ¬AddMonoid.IsTorsionFree G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Additive torsion groups are closed under extensions.\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} {H : Type u_2} [inst : AddGroup G] {N : AddSubgroup G} [inst_1 : AddGroup H] {f : G →+ H},\\n  N = AddMonoidHom.ker f → AddMonoid.IsTorsion H → AddMonoid.IsTorsion ↥N → AddMonoid.IsTorsion G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Subgroups of additive torsion groups are additive torsion groups.\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddGroup G], AddMonoid.IsTorsion G → ∀ (H : AddSubgroup G), AddMonoid.IsTorsion ↥H\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If a group exponent exists, the group is torsion. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G], Monoid.ExponentExists G → Monoid.IsTorsion G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The torsion subgroup is cylic. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (K : Type u_1) [inst : Field K] [inst_1 : NumberField K], IsCyclic ↥(NumberField.Units.torsion K)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A nontrivial torsion-free additive group is not torsion.\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddGroup G] [hN : Nontrivial G], AddMonoid.IsTorsionFree G → ¬AddMonoid.IsTorsion G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Quotienting a group by its additive torsion subgroup yields an additive torsion free group.\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (G : Type u_1) [inst : AddCommGroup G], AddMonoid.IsTorsionFree (G ⧸ AddCommGroup.torsion G)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A nontrivial torsion group is not torsion-free. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] [hN : Nontrivial G], Monoid.IsTorsion G → ¬Monoid.IsTorsionFree G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Subgroups of torsion groups are torsion groups. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G], Monoid.IsTorsion G → ∀ (H : Subgroup G), Monoid.IsTorsion ↥H\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Torsion groups are closed under extensions. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} {H : Type u_2} [inst : Group G] {N : Subgroup G} [inst_1 : Group H] {f : G →* H},\\n  N = MonoidHom.ker f → Monoid.IsTorsion H → Monoid.IsTorsion ↥N → Monoid.IsTorsion G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Finite groups are torsion groups. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] [inst_1 : Finite G], Monoid.IsTorsion G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Quotienting a group by its torsion subgroup yields a torsion free group. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (G : Type u_1) [inst : CommGroup G], Monoid.IsTorsionFree (G ⧸ CommGroup.torsion G)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A nontrivial torsion-free group is not torsion. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] [hN : Nontrivial G], Monoid.IsTorsionFree G → ¬Monoid.IsTorsion G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Subgroups of additive torsion-free groups are additively torsion-free.\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddGroup G], AddMonoid.IsTorsionFree G → ∀ (H : AddSubgroup G), AddMonoid.IsTorsionFree ↥H\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Direct products of additive torsion free groups are torsion free.\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {η : Type u_3} {Gs : η → Type u_4} [inst : (i : η) → AddGroup (Gs i)],\\n  (∀ (i : η), AddMonoid.IsTorsionFree (Gs i)) → AddMonoid.IsTorsionFree ((i : η) → Gs i)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Direct products of torsion free groups are torsion free. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {η : Type u_3} {Gs : η → Type u_4} [inst : (i : η) → Group (Gs i)],\\n  (∀ (i : η), Monoid.IsTorsionFree (Gs i)) → Monoid.IsTorsionFree ((i : η) → Gs i)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Subgroups of torsion-free groups are torsion-free. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G], Monoid.IsTorsionFree G → ∀ (H : Subgroup G), Monoid.IsTorsionFree ↥H\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Every free group is torsion free.\\n\\nGive ONLY the Lean code\"}]"}
{"text":"Every natural number greater than `1` is divisible by a prime number.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: No zero divisors. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_2} [self : CanonicallyOrderedCommSemiring α] {a b : α}, a * b = 0 → a = 0 ∨ b = 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A natural number is odd iff it has residue `1` or `3` mod `4`\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {n : ℕ}, n % 2 = 1 ↔ n % 4 = 1 ∨ n % 4 = 3\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The only prime divisor of positive prime power `p^k` is `p` itself \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {k p : ℕ}, k ≠ 0 → Nat.Prime p → (p ^ k).primeFactors = {p}\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The multiplicity of prime `p` in `p` is `1` \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {p : ℕ}, Nat.Prime p → (Nat.factorization p) p = 1\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Exactly `n / p` naturals in `(0, n]` are multiples of `p`. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (n p : ℕ), (Finset.filter (fun x => p ∣ x) (Finset.Ioc 0 n)).card = n / p\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The product of the prime factors of `n` that are less than `N` is an `N`-smooth number. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (n N : ℕ), List.prod (List.filter (fun x => decide (x < N)) (Nat.factors n)) ∈ Nat.smoothNumbers N\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: For any positive `k : ℕ` there are infinitely many primes `p` such that `p ≡ 1 [MOD k]`. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {k : ℕ}, k ≠ 0 → Set.Infinite {p | Nat.Prime p ∧ p ≡ 1 [MOD k]}\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: All composite numbers are Fermat pseudoprimes to base 1.\\n\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {n : ℕ}, 1 < n → ¬Nat.Prime n → Nat.FermatPsp n 1\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A natural number `m` divides the sum `n + m` if and only if `m` divides `n`.\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\", \"content\": \"∀ {m n : ℕ}, m ∣ n + m ↔ m ∣ n\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The only numbers with empty prime factorization are `0` and `1` \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ (n : ℕ), Nat.factorization n = 0 ↔ n = 0 ∨ n = 1\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A natural number `m` divides the sum `m + n` if and only if `m` divides `n`.\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\", \"content\": \"∀ {m n : ℕ}, m ∣ m + n ↔ m ∣ n\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Two natural numbers are equal if and only if they have the same multiples. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {m n : ℕ}, (∀ (a : ℕ), m ∣ a ↔ n ∣ a) ↔ m = n\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Infinitely many natural numbers are equal to `d` mod `n`. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {n : ℕ}, n ≠ 0 → ∀ (d : ℕ), ∃ᶠ (m : ℕ) in Filter.atTop, m ≡ d [MOD n]\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The only divisors of prime powers are prime powers. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : CancelCommMonoidWithZero α] [dec_irr : (p : Associates α) → Decidable (Irreducible p)]\\n  [inst_1 : UniqueFactorizationMonoid α] [dec : DecidableEq α] [dec' : DecidableEq (Associates α)] {a p : Associates α},\\n  Irreducible p →\\n    ∀ [inst_2 : (n : ℕ) → Decidable (a ∣ p ^ n)] {n : ℕ} (h : a ∣ p ^ n),\\n      a = p ^ Nat.find (_ : ∃ n, (fun n => a ∣ p ^ n) n)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A prime natural number is prime in `ℤ[i]` if and only if it is `3` mod `4` \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ (p : ℕ) [inst : Fact (Nat.Prime p)], Prime ↑p ↔ p % 4 = 3\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Two natural numbers are equal if and only if they have the same divisors. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {m n : ℕ}, (∀ (a : ℕ), a ∣ m ↔ a ∣ n) ↔ m = n\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If a small natural number is divisible by a larger natural number,\\nthe small number is zero. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\", \"content\": \"∀ {a b : ℕ}, a ∣ b → b < a → b = 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Every nonzero natural number has a unique prime factorization \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\", \"content\": \"Set.InjOn Nat.factorization {x | x ≠ 0}\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Every natural number greater than `1` is divisible by a prime number.\\n\\nGive ONLY the Lean code\"}]"}
{"text":"A finite torsion-free group is trivial","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Quotienting by the torsion submodule gives a torsion-free module. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} {M : Type u_2} [inst : CommRing R] [inst_1 : AddCommGroup M] [inst_2 : Module R M],\\n  Submodule.torsion R (M ⧸ Submodule.torsion R M) = ⊥\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The group exponent exists for any bounded torsion group. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G],\\n  Monoid.IsTorsion G → Set.Finite (Set.range fun g => orderOf g) → Monoid.ExponentExists G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If a finite group is the direct product of its Sylow groups, it is nilpotent \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [hG : Group G] [inst : Fintype G],\\n  ((p : { x // x ∈ (Fintype.card G).primeFactors }) → (P : Sylow (↑p) G) → ↥↑P) ≃* G → Group.IsNilpotent G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Additive torsion groups are closed under extensions.\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} {H : Type u_2} [inst : AddGroup G] {N : AddSubgroup G} [inst_1 : AddGroup H] {f : G →+ H},\\n  N = AddMonoidHom.ker f → AddMonoid.IsTorsion H → AddMonoid.IsTorsion ↥N → AddMonoid.IsTorsion G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A finite group of prime order is simple.\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : AddGroup α] [inst_1 : Fintype α] {p : ℕ} [hp : Fact (Nat.Prime p)],\\n  Fintype.card α = p → IsSimpleAddGroup α\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Finite additive groups are additive torsion groups.\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddGroup G] [inst_1 : Finite G], AddMonoid.IsTorsion G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A finite group of prime order is simple. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : Group α] [inst_1 : Fintype α] {p : ℕ} [hp : Fact (Nat.Prime p)],\\n  Fintype.card α = p → IsSimpleGroup α\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A nontrivial torsion group is not torsion-free. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] [hN : Nontrivial G], Monoid.IsTorsion G → ¬Monoid.IsTorsionFree G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A semisimple Abelian Lie algebra is trivial. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (R : Type u) (L : Type v) [inst : CommRing R] [inst_1 : LieRing L] [inst_2 : LieAlgebra R L]\\n  [inst : LieAlgebra.IsSemisimple R L] [h : IsLieAbelian L], Subsingleton L\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Direct products of additive torsion free groups are torsion free.\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {η : Type u_3} {Gs : η → Type u_4} [inst : (i : η) → AddGroup (Gs i)],\\n  (∀ (i : η), AddMonoid.IsTorsionFree (Gs i)) → AddMonoid.IsTorsionFree ((i : η) → Gs i)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Subgroups of torsion groups are torsion groups. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G], Monoid.IsTorsion G → ∀ (H : Subgroup G), Monoid.IsTorsion ↥H\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A nontrivial torsion-free additive group is not torsion.\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddGroup G] [hN : Nontrivial G], AddMonoid.IsTorsionFree G → ¬AddMonoid.IsTorsion G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Torsion groups are closed under extensions. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} {H : Type u_2} [inst : Group G] {N : Subgroup G} [inst_1 : Group H] {f : G →* H},\\n  N = MonoidHom.ker f → Monoid.IsTorsion H → Monoid.IsTorsion ↥N → Monoid.IsTorsion G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Subgroups of additive torsion-free groups are additively torsion-free.\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddGroup G], AddMonoid.IsTorsionFree G → ∀ (H : AddSubgroup G), AddMonoid.IsTorsionFree ↥H\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Quotienting a group by its additive torsion subgroup yields an additive torsion free group.\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (G : Type u_1) [inst : AddCommGroup G], AddMonoid.IsTorsionFree (G ⧸ AddCommGroup.torsion G)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Direct products of torsion free groups are torsion free. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {η : Type u_3} {Gs : η → Type u_4} [inst : (i : η) → Group (Gs i)],\\n  (∀ (i : η), Monoid.IsTorsionFree (Gs i)) → Monoid.IsTorsionFree ((i : η) → Gs i)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A nontrivial torsion-free group is not torsion. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] [hN : Nontrivial G], Monoid.IsTorsionFree G → ¬Monoid.IsTorsion G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Quotienting a group by its torsion subgroup yields a torsion free group. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (G : Type u_1) [inst : CommGroup G], Monoid.IsTorsionFree (G ⧸ CommGroup.torsion G)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Subgroups of torsion-free groups are torsion-free. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G], Monoid.IsTorsionFree G → ∀ (H : Subgroup G), Monoid.IsTorsionFree ↥H\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Finite groups are torsion groups. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] [inst_1 : Finite G], Monoid.IsTorsion G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A finite torsion-free group is trivial\\n\\nGive ONLY the Lean code\"}]"}
{"text":"Every finite division ring is a field.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: An intermediate field is closed under multiplication. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u_1} {L : Type u_2} [inst : Field K] [inst_1 : Field L] [inst_2 : Algebra K L] (S : IntermediateField K L)\\n  {x y : L}, x ∈ S → y ∈ S → x * y ∈ S\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Any infinite type can be endowed a field structure. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {α : Type u} [inst : Infinite α], Nonempty (Field α)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A normed division ring is a topological division ring. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : NormedDivisionRing α], TopologicalDivisionRing α\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: In a finite field of characteristic `2`, all elements are squares. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {F : Type u_3} [inst : Field F] [inst_1 : Finite F], ringChar F = 2 → ∀ (a : F), IsSquare a\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The quotient of a ring by an ideal is a field iff the ideal is maximal. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} [inst : CommRing R] (I : Ideal R), Ideal.IsMaximal I ↔ IsField (R ⧸ I)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A separably closed perfect field is also algebraically closed. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (k : Type u) [inst : Field k] [inst_1 : IsSepClosed k] [inst_2 : PerfectField k], IsAlgClosed k\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: An algebraically closed field is also separably closed. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (k : Type u) [inst : Field k] [inst_1 : IsAlgClosed k], IsSepClosed k\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: All ideals in a division (semi)ring are trivial. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u} [inst : DivisionSemiring K] (I : Ideal K), I = ⊥ ∨ I = ⊤\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A field extension is algebraic if it is finite. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (K : Type u_1) (A : Type u_5) [inst : Field K] [inst_1 : Ring A] [inst_2 : Algebra K A]\\n  [inst_3 : FiniteDimensional K A], Algebra.IsAlgebraic K A\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A finite subgroup of the unit group of an integral domain is cyclic. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} {G : Type u_2} [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : Group G] [inst_3 : Finite G]\\n  (f : G →* R), Function.Injective ⇑f → IsCyclic G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A module over a division ring is noetherian if and only if it is finitely generated. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V],\\n  IsNoetherian K V ↔ Module.Finite K V\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A linear ordered field that is a floor ring is archimedean. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (α : Type u_2) [inst : LinearOrderedField α] [inst_1 : FloorRing α], Archimedean α\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A field is perfect if every irreducible polynomial is separable. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u_1} [inst : Field K] [self : PerfectField K] {f : Polynomial K}, Irreducible f → Polynomial.Separable f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A finite subgroup of the units of an integral domain is cyclic. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsDomain R] (S : Subgroup Rˣ) [inst_2 : Finite ↥S], IsCyclic ↥S\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A subfield is closed under division. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u} [inst : DivisionRing K] (s : Subfield K) {x y : K}, x ∈ s → y ∈ s → x / y ∈ s\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A cyclotomic finite extension of a number field is a number field. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (S : Set ℕ+) (K : Type w) (L : Type z) [inst : Field K] [inst_1 : Field L] [inst_2 : Algebra K L] [h : NumberField K]\\n  [inst_3 : Finite ↑S] [inst : IsCyclotomicExtension S K L], NumberField L\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A field is a valuation ring. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ (K : Type u) [inst : Field K], ValuationRing K\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: An intermediate field is closed under division. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u_1} {L : Type u_2} [inst : Field K] [inst_1 : Field L] [inst_2 : Algebra K L] (S : IntermediateField K L)\\n  {x y : L}, x ∈ S → y ∈ S → x / y ∈ S\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A finite field has prime power cardinality. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : Fintype α] [inst_1 : Field α], IsPrimePow (Fintype.card α)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A finite domain is a field. See also `littleWedderburn` and `Fintype.divisionRingOfIsDomain`. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (D : Type u_1) [inst : Finite D] [inst : Ring D] [inst_1 : IsDomain D], IsField D\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Every finite division ring is a field.\\n\\nGive ONLY the Lean code\"}]"}
{"text":"Every finite topological space is compact.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: All hom spaces are finite dimensional. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {k G : Type u} [inst : Field k] [inst_1 : Monoid G] (V W : FdRep k G), FiniteDimensional k (V ⟶ W)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A sequentially compact set in a uniform space is totally bounded. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} [inst : UniformSpace X] {s : Set X}, IsSeqCompact s → TotallyBounded s\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A finite space is bounded. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_4} [inst : Bornology α] [inst_1 : Finite α], BoundedSpace α\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: In a nonempty locally compact space, there exists a compact set with nonempty interior. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : WeaklyLocallyCompactSpace α] [inst_2 : Nonempty α],\\n  Nonempty (TopologicalSpace.PositiveCompacts α)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Any continuous bijection of compact Hausdorff spaces is an isomorphism. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X Y : CompHaus} (f : X ⟶ Y), Function.Bijective ⇑f → CategoryTheory.IsIso f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: In a compact space, the type of closed subsets is compact. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : EMetricSpace α] [inst_1 : CompactSpace α], CompactSpace (TopologicalSpace.Closeds α)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The disjoint union of two compact spaces is compact. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u} {Y : Type v} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] [inst_2 : CompactSpace X]\\n  [inst_3 : CompactSpace Y], CompactSpace (X ⊕ Y)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Convex hull of a finite set is compact. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {E : Type u_3} [inst : AddCommGroup E] [inst_1 : Module ℝ E] [inst_2 : TopologicalSpace E]\\n  [inst_3 : TopologicalAddGroup E] [inst_4 : ContinuousSMul ℝ E] {s : Set E},\\n  Set.Finite s → IsCompact ((convexHull ℝ) s)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: In a `T2Space`, every compact set is closed. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : T2Space X] {s : Set X}, IsCompact s → IsClosed s\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Every open cover of a paracompact space assumes a locally finite refinement. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type v} [inst : TopologicalSpace X] [self : ParacompactSpace X] (α : Type v) (s : α → Set X),\\n  (∀ (a : α), IsOpen (s a)) →\\n    ⋃ a, s a = Set.univ →\\n      ∃ β t, ∃ (_ : ∀ (b : β), IsOpen (t b)) (_ : ⋃ b, t b = Set.univ), LocallyFinite t ∧ ∀ (b : β), ∃ a, t b ⊆ s a\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The product of two compact spaces is compact. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u} {Y : Type v} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] [inst_2 : CompactSpace X]\\n  [inst_3 : CompactSpace Y], CompactSpace (X × Y)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If `X` is a compact space, then any discrete quotient of `X` is finite. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_2} [inst : TopologicalSpace X] (S : DiscreteQuotient X) [inst_1 : CompactSpace X],\\n  Finite (Quotient S.toSetoid)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A measure which is finite on compact sets in a locally compact space is locally finite. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} {m0 : MeasurableSpace α} {μ : MeasureTheory.Measure α} [inst : TopologicalSpace α]\\n  [inst_1 : WeaklyLocallyCompactSpace α] [inst_2 : MeasureTheory.IsFiniteMeasureOnCompacts μ],\\n  MeasureTheory.IsLocallyFiniteMeasure μ\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: In a Noetherian space, all sets are compact. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace.NoetherianSpace α] (s : Set α), IsCompact s\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: For any topological space `X`, its one point compactification is a compact space. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X], CompactSpace (OnePoint X)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A compact discrete space is finite. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u} [inst : TopologicalSpace X] [inst_1 : CompactSpace X] [inst : DiscreteTopology X], Finite X\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The underlying topological space is compact.\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ (self : CompHaus), CompactSpace ↑self.toTop\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Finite topological spaces are compact. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u} [inst : TopologicalSpace X] [inst_1 : Finite X], CompactSpace X\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Every finite topological space is compact.\\n\\nGive ONLY the Lean code\"}]"}
{"text":"Every surjective homomorphism from a finitely generated free group to itself is injective.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The canonical map from the type to the free group is an injection. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {α : Type u}, Function.Injective FreeGroup.of\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The natural homomorphism from a monoid to its quotient by a congruence relation is\\nsurjective. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {M : Type u_1} [inst : MulOneClass M] {c : Con M}, Function.Surjective ⇑(Con.mk' c)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: On a finite-dimensional space, a linear map is injective if and only if it is surjective. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V]\\n  [inst_3 : FiniteDimensional K V] {f : V →ₗ[K] V}, Function.Injective ⇑f ↔ Function.Surjective ⇑f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Composing with a family of surjective linear maps is injective. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type uR} {ι : Type uι} {M₁ : ι → Type v₁} {M₂ : Type v₂} [inst : Semiring R]\\n  [inst_1 : (i : ι) → AddCommMonoid (M₁ i)] [inst_2 : AddCommMonoid M₂] [inst_3 : (i : ι) → Module R (M₁ i)]\\n  [inst_4 : Module R M₂] {M₁' : ι → Type u_1} [inst_5 : (i : ι) → AddCommMonoid (M₁' i)]\\n  [inst_6 : (i : ι) → Module R (M₁' i)] (f : (i : ι) → M₁ i →ₗ[R] M₁' i),\\n  (∀ (i : ι), Function.Surjective ⇑(f i)) → Function.Injective fun g => MultilinearMap.compLinearMap g f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A monomorphism is injective. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} {R₂ : Type u_3} {M : Type u_9} {M₂ : Type u_12} [inst : Semiring R] [inst_1 : Semiring R₂]\\n  [inst_2 : AddCommMonoid M] [inst_3 : AddCommMonoid M₂] [inst_4 : Module R M] [inst_5 : Module R₂ M₂] {τ₁₂ : R →+* R₂}\\n  {f : M →ₛₗ[τ₁₂] M₂},\\n  (∀ (u v : ↥(LinearMap.ker f) →ₗ[R] M), LinearMap.comp f u = LinearMap.comp f v → u = v) → LinearMap.ker f = ⊥\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A group homomorphism sends inverses to inverses. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} [inst : Group α] [inst_1 : Group β] {f : α → β}, IsGroupHom f → ∀ (a : α), f a⁻¹ = (f a)⁻¹\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Composing with a surjective linear map is injective. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : Semiring R] {M : Type u_2} [inst_1 : AddCommMonoid M] [inst_2 : Module R M] {N : Type u_3}\\n  [inst_3 : AddCommMonoid N] [inst_4 : Module R N] {ι : Type u_7} {M₂ : Type u_10} [inst_5 : AddCommMonoid M₂]\\n  [inst_6 : Module R M₂] (f : M₂ →ₗ[R] M),\\n  Function.Surjective ⇑f → Function.Injective fun g => AlternatingMap.compLinearMap g f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A monoid homomorphism `f` induces an injective homomorphism on the quotient by `f`'s kernel. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {M : Type u_1} {P : Type u_3} [inst : MulOneClass M] [inst_1 : MulOneClass P] (f : M →* P),\\n  Function.Injective ⇑(Con.kerLift f)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The ring homomorphism is surjective \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R₁ : Type u_1} {R₂ : Type u_2} [inst : Semiring R₁] [inst_1 : Semiring R₂] {σ : R₁ →+* R₂}\\n  [self : RingHomSurjective σ], Function.Surjective ⇑σ\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The induced algebra morphism from the quotient by the kernel is injective. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R₁ : Type u_1} {A : Type u_3} {B : Type u_4} [inst : CommSemiring R₁] [inst_1 : CommRing A] [inst_2 : Algebra R₁ A]\\n  [inst_3 : Semiring B] [inst_4 : Algebra R₁ B] (f : A →ₐ[R₁] B), Function.Injective ⇑(Ideal.kerLiftAlg f)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Group homomorphisms preserve inverse. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_6} {H : Type u_7} {F : Type u_8} [inst : Group G] [inst_1 : DivisionMonoid H]\\n  [inst_2 : MonoidHomClass F G H] (f : F) (a : G), f a⁻¹ = (f a)⁻¹\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Any surjective endomorphism of a Noetherian module is bijective. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} {M : Type u_2} [inst : Ring R] [inst_1 : AddCommGroup M] [inst_2 : Module R M]\\n  [inst_3 : IsNoetherian R M] (f : M →ₗ[R] M), Function.Surjective ⇑f → Function.Bijective ⇑f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Any injective endomorphism of an Artinian module is bijective. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} {M : Type u_2} [inst : Ring R] [inst_1 : AddCommGroup M] [inst_2 : Module R M]\\n  [inst_3 : IsArtinian R M] (f : M →ₗ[R] M), Function.Injective ⇑f → Function.Bijective ⇑f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Any injective polynomial map over an algebraic extension of a finite field is surjective. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {ι : Type u_1} {K : Type u_2} {R : Type u_3} [inst : Field K] [inst_1 : Finite K] [inst_2 : CommRing R]\\n  [inst_3 : Finite ι] [inst_4 : Algebra K R],\\n  Algebra.IsAlgebraic K R →\\n    ∀ (ps : ι → MvPolynomial ι R),\\n      (Function.Injective fun v i => (MvPolynomial.eval v) (ps i)) →\\n        Function.Surjective fun v i => (MvPolynomial.eval v) (ps i)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: On a finite-dimensional space, an injective linear map is surjective. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V]\\n  [inst_3 : FiniteDimensional K V] {f : V →ₗ[K] V}, Function.Injective ⇑f → Function.Surjective ⇑f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: An additive group homomorphism is injective if its kernel is trivial.\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} [inst : AddGroup α] [inst_1 : AddGroup β] {f : α → β},\\n  IsAddGroupHom f → (Function.Injective f ↔ ∀ (a : α), f a = 0 → a = 0)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Any injective endomorphism of an Artinian module is surjective. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} {M : Type u_2} [inst : Ring R] [inst_1 : AddCommGroup M] [inst_2 : Module R M]\\n  [inst_3 : IsArtinian R M] (f : M →ₗ[R] M), Function.Injective ⇑f → Function.Surjective ⇑f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Any surjective endomorphism of a Noetherian module is injective. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} {M : Type u_2} [inst : Ring R] [inst_1 : AddCommGroup M] [inst_2 : Module R M]\\n  [inst_3 : IsNoetherian R M] (f : M →ₗ[R] M), Function.Surjective ⇑f → Function.Injective ⇑f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Every graph homomorphism from a complete graph is injective. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {V : Type u_1} {W : Type u_2} {G' : SimpleGraph W} (f : ⊤ →g G'), Function.Injective ⇑f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A group homomorphism is injective iff its kernel is trivial. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} {β : Type v} [inst : Group α] [inst_1 : Group β] {f : α → β},\\n  IsGroupHom f → (Function.Injective f ↔ ∀ (a : α), f a = 1 → a = 1)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Every surjective homomorphism from a finitely generated free group to itself is injective.\\n\\nGive ONLY the Lean code\"}]"}
{"text":"Every positive even integer can be written as the sum of two primes.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The sum over the reciprocals of the primes diverges. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"¬Summable (Set.indicator {p | Nat.Prime p} fun n => 1 / ↑n)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: For any positive `k : ℕ` there are infinitely many primes `p` such that `p ≡ 1 [MOD k]`. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {k : ℕ}, k ≠ 0 → Set.Infinite {p | Nat.Prime p ∧ p ≡ 1 [MOD k]}\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If two integers are congruent to a sufficiently large modulus,\\nthey are equal. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {a b c : ℤ}, a % b = c → Int.natAbs (a - c) < Int.natAbs b → a = c\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Any common divisor of both elements is a divisor of the GCD. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_2} [inst : CancelCommMonoidWithZero α] [self : GCDMonoid α] {a b c : α}, a ∣ c → a ∣ b → a ∣ gcd c b\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: There is a rational power between any two positive elements of an archimedean ordered field. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {n : ℕ} {α : Type u_1} [inst : LinearOrderedField α] [inst_1 : Archimedean α],\\n  n ≠ 0 → ∀ {x y : α}, x < y → 0 < y → ∃ q, 0 < q ∧ x < ↑q ^ n ∧ ↑q ^ n < y\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The numerator and denominator are coprime: it is in \\\"reduced form\\\". \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ (self : ℚ), Nat.Coprime (Int.natAbs self.num) self.den\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If a product lies in the prime ideal, then at least one element lies in the prime ideal. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : Semiring α] {I : Ideal α} [self : Ideal.IsPrime I] {x y : α}, x * y ∈ I → x ∈ I ∨ y ∈ I\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The product of two positive elements is positive. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [self : StrictOrderedRing α] (a b : α), 0 < a → 0 < b → 0 < a * b\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: We relate a finite product over primes to an infinite sum over smooth numbers. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : NormedCommRing R] [inst_1 : CompleteSpace R] {f : ℕ → R},\\n  f 1 = 1 →\\n    (∀ {m n : ℕ}, Nat.Coprime m n → f (m * n) = f m * f n) →\\n      (∀ {p : ℕ}, Nat.Prime p → Summable fun n => ‖f (p ^ n)‖) →\\n        ∀ (N : ℕ),\\n          (Summable fun m => ‖f ↑m‖) ∧\\n            HasSum (fun m => f ↑m) (Finset.prod (Nat.primesBelow N) fun p => ∑' (n : ℕ), f (p ^ n))\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The only divisors of prime powers are prime powers. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : CancelCommMonoidWithZero α] [dec_irr : (p : Associates α) → Decidable (Irreducible p)]\\n  [inst_1 : UniqueFactorizationMonoid α] [dec : DecidableEq α] [dec' : DecidableEq (Associates α)] {a p : Associates α},\\n  Irreducible p →\\n    ∀ [inst_2 : (n : ℕ) → Decidable (a ∣ p ^ n)] {n : ℕ} (h : a ∣ p ^ n),\\n      a = p ^ Nat.find (_ : ∃ n, (fun n => a ∣ p ^ n) n)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Two natural numbers are equal if and only if they have the same multiples. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {m n : ℕ}, (∀ (a : ℕ), m ∣ a ↔ n ∣ a) ↔ m = n\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Two positive naturals are equal if their prime padic valuations are equal \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (a b : ℕ), a ≠ 0 → b ≠ 0 → (a = b ↔ ∀ (p : ℕ), Nat.Prime p → padicValNat p a = padicValNat p b)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Two natural numbers are equal if and only if they have the same divisors. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {m n : ℕ}, (∀ (a : ℕ), a ∣ m ↔ a ∣ n) ↔ m = n\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Multiplication by positive integers is injective \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : Semiring R] [self : BinomialRing R] (n : ℕ), n ≠ 0 → Function.Injective fun x => n • x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The set of natural numbers that are sums of two squares is closed under multiplication. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {a b x y u v : ℕ}, a = x ^ 2 + y ^ 2 → b = u ^ 2 + v ^ 2 → ∃ r s, a * b = r ^ 2 + s ^ 2\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Every nonzero natural number has a unique prime factorization \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\", \"content\": \"Set.InjOn Nat.factorization {x | x ≠ 0}\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Every positive even integer can be written as the sum of two primes.\\n\\nGive ONLY the Lean code\"}]"}
{"text":"Every matrix satisfies its own characteristic polynomial.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The determinant of a permutation matrix equals its sign. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {n : Type u_2} [inst : DecidableEq n] [inst_1 : Fintype n] {R : Type v} [inst_2 : CommRing R] (σ : Equiv.Perm n),\\n  Matrix.det (PEquiv.toMatrix (Equiv.toPEquiv σ)) = ↑↑(Equiv.Perm.sign σ)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If a matrix has a repeated row, the determinant will be zero. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {n : Type u_2} [inst : DecidableEq n] [inst_1 : Fintype n] {R : Type v} [inst_2 : CommRing R] {M : Matrix n n R}\\n  {i j : n}, i ≠ j → M i = M j → Matrix.det M = 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A constant polynomial has zero separable degree. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {F : Type u} [inst : Field F] (f : Polynomial F), Polynomial.natDegree f = 0 → Polynomial.natSepDegree f = 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If a matrix has a repeated column, the determinant will be zero. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {n : Type u_2} [inst : DecidableEq n] [inst_1 : Fintype n] {R : Type v} [inst_2 : CommRing R] {M : Matrix n n R}\\n  {i j : n}, i ≠ j → (∀ (k : n), M k i = M k j) → Matrix.det M = 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Every Lie algebra is a module over itself. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} {L : Type v} [inst : CommRing R] [inst_1 : LieRing L] [inst_2 : LieAlgebra R L], LieModule R L L\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A minimal polynomial is prime. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {A : Type u_1} {B : Type u_2} [inst : Field A] [inst_1 : Ring B] [inst_2 : IsDomain B] [inst_3 : Algebra A B] {x : B},\\n  IsIntegral A x → Prime (minpoly A x)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The degree of a minimal polynomial is positive. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {A : Type u_1} {B : Type u_2} [inst : CommRing A] [inst_1 : Ring B] [inst_2 : Algebra A B] {x : B}\\n  [inst_3 : Nontrivial B], IsIntegral A x → 0 < Polynomial.degree (minpoly A x)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A minimal polynomial is irreducible. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {A : Type u_1} {B : Type u_2} [inst : CommRing A] [inst_1 : Ring B] [inst_2 : Algebra A B] {x : B}\\n  [inst_3 : IsDomain A] [inst_4 : IsDomain B], IsIntegral A x → Irreducible (minpoly A x)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A nonzero Hermitian matrix has an eigenvector with nonzero eigenvalue. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {𝕜 : Type u_1} [inst : IsROrC 𝕜] {n : Type u_2} [inst_1 : Fintype n] [inst_2 : DecidableEq n] {A : Matrix n n 𝕜},\\n  Matrix.IsHermitian A → A ≠ 0 → ∃ v t, t ≠ 0 ∧ v ≠ 0 ∧ Matrix.mulVec A v = t • v\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A minimal polynomial is monic. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {A : Type u_1} {B : Type u_2} [inst : CommRing A] [inst_1 : Ring B] [inst_2 : Algebra A B] {x : B},\\n  IsIntegral A x → Polynomial.Monic (minpoly A x)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Every zero matrix is diagonal. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} {n : Type u_4} [inst : Zero α], Matrix.IsDiag 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If every coefficient of a polynomial is in an ideal `I`, then so is the polynomial itself \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} [inst : CommSemiring R] (I : Ideal (Polynomial R)) (p : Polynomial R),\\n  (∀ (n : ℕ), Polynomial.coeff p n ∈ Ideal.comap Polynomial.C I) → p ∈ I\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Every polynomial is the sum of its weighted homogeneous components. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} {M : Type u_2} [inst : CommSemiring R] {σ : Type u_3} [inst_1 : AddCommMonoid M] (w : σ → M)\\n  (φ : MvPolynomial σ R), (finsum fun m => (MvPolynomial.weightedHomogeneousComponent w m) φ) = φ\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: `charpoly f` is the characteristic polynomial of the matrix of `f` in any basis. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} {M : Type v} [inst : CommRing R] [inst_1 : Nontrivial R] [inst_2 : AddCommGroup M] [inst_3 : Module R M]\\n  [inst_4 : Module.Free R M] [inst_5 : Module.Finite R M] (f : M →ₗ[R] M) {ι : Type w} [inst_6 : DecidableEq ι]\\n  [inst_7 : Fintype ι] (b : Basis ι R M), Matrix.charpoly ((LinearMap.toMatrix b b) f) = LinearMap.charpoly f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The minimal polynomial of a nonzero element has nonzero constant coefficient. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {A : Type u_1} {B : Type u_2} [inst : Field A] [inst_1 : Ring B] [inst_2 : IsDomain B] [inst_3 : Algebra A B] {x : B},\\n  IsIntegral A x → x ≠ 0 → Polynomial.coeff (minpoly A x) 0 ≠ 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Every polynomial is a polynomial in finitely many variables. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {σ : Type u_1} {R : Type u_4} [inst : CommSemiring R] (p : MvPolynomial σ R),\\n  ∃ n f, ∃ (_ : Function.Injective f), ∃ q, p = (MvPolynomial.rename f) q\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Every identity matrix is diagonal. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} {n : Type u_4} [inst : DecidableEq n] [inst_1 : Zero α] [inst_2 : One α], Matrix.IsDiag 1\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Every matrix satisfies its own characteristic polynomial.\\n\\nGive ONLY the Lean code\"}]"}
{"text":"The square root of an irrational number is irrational.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: An algebraic integer whose conjugates are all of norm one is a root of unity. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (K : Type u_1) [inst : Field K] [inst_1 : NumberField K] (A : Type u_2) [inst_2 : NormedField A]\\n  [inst_3 : IsAlgClosed A] [inst_4 : NormedAlgebra ℚ A] {x : K},\\n  IsIntegral ℤ x → (∀ (φ : K →+* A), ‖φ x‖ = 1) → ∃ n, ∃ (_ : 0 < n), x ^ n = 1\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Let `r` be an irrational number. Then `B⁺_r` and `B⁺'_r` are equal. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {r : ℝ}, Irrational r → {x | ∃ k > 0, beattySeq' r k = x} = {x | ∃ k > 0, beattySeq r k = x}\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Rational numbers are dense in a linear ordered archimedean field. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {𝕜 : Type u_1} [inst : LinearOrderedField 𝕜] [inst_1 : TopologicalSpace 𝕜] [inst_2 : OrderTopology 𝕜]\\n  [inst_3 : Archimedean 𝕜], DenseRange Rat.cast\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Every terminating continued fraction corresponds to a rational number. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u_1} [inst : LinearOrderedField K] [inst_1 : FloorRing K] {v : K},\\n  GeneralizedContinuedFraction.Terminates (GeneralizedContinuedFraction.of v) → ∃ q, v = ↑q\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If `x^n`, `n > 0`, is integer and is not the `n`-th power of an integer, then\\n`x` is irrational. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {x : ℝ} (n : ℕ) (m : ℤ), x ^ n = ↑m → (¬∃ y, x = ↑y) → 0 < n → Irrational x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The complex numbers are not countable. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\", \"content\": \"¬Set.Countable Set.univ\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A quadratic has no root if its discriminant has no square root. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : CommRing R] {a b c : R},\\n  (∀ (s : R), discrim a b c ≠ s ^ 2) → ∀ (x : R), a * x * x + b * x + c ≠ 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A rational number has only finitely many good rational approximations. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ (ξ : ℚ), Set.Finite {q | |ξ - q| < 1 / ↑q.den ^ 2}\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Every finite convergent corresponds to a rational number. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u_1} [inst : LinearOrderedField K] [inst_1 : FloorRing K] (v : K) (n : ℕ),\\n  ∃ q, GeneralizedContinuedFraction.convergents (GeneralizedContinuedFraction.of v) n = ↑q\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If `x + y` is irrational, then at least one of `x` and `y` is irrational. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {x y : ℝ}, Irrational (x + y) → Irrational x ∨ Irrational y\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The continued fraction of a rational number terminates. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (q : ℚ), GeneralizedContinuedFraction.Terminates (GeneralizedContinuedFraction.of q)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: There is an irrational number `r` between any two reals `x < r < y`. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {x y : ℝ}, x < y → ∃ r, Irrational r ∧ x < r ∧ r < y\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If a rational is not a p-adic integer, it is not an integer. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (p : ℕ) {a : ℚ} [hp : Fact (Nat.Prime p)], 1 < padicNorm p a → ¬Rat.isInt a = true\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A number satisfying the Liouville condition with exponent `p > 1` is an irrational number. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {p x : ℝ}, LiouvilleWith p x → 1 < p → Irrational x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The real square root is at most the natural square root plus one \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {a : ℕ}, Real.sqrt ↑a ≤ ↑(Nat.sqrt a) + 1\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The natural square root is at most the real square root \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\", \"content\": \"∀ {a : ℕ}, ↑(Nat.sqrt a) ≤ Real.sqrt ↑a\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The golden ratio is irrational. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\", \"content\": \"Irrational goldenRatio\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: **Irrationality of the Square Root of 2** \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\", \"content\": \"Irrational (Real.sqrt 2)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The conjugate of the golden ratio is irrational. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\", \"content\": \"Irrational goldenConj\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A transcendental real number is irrational. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {r : ℝ}, Transcendental ℚ r → Irrational r\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The square root of an irrational number is irrational.\\n\\nGive ONLY the Lean code\"}]"}
{"text":"If the square of a number is even, the number itself is even.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: `2` is a square in `F` iff `#F` is not congruent to `3` or `5` mod `8`. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {F : Type u_1} [inst : Field F] [inst_1 : Fintype F], IsSquare 2 ↔ Fintype.card F % 8 ≠ 3 ∧ Fintype.card F % 8 ≠ 5\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: **Four squares theorem** \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ (n : ℕ), ∃ a b c d, a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 = n\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The square of the symbol is 1 if `p ∤ a`. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (p : ℕ) [inst : Fact (Nat.Prime p)] {a : ℤ}, ↑a ≠ 0 → legendreSym p a ^ 2 = 1\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: **Euler's four-square identity**. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : CommRing R] (a b c d x y z w : R),\\n  (a * x - b * y - c * z - d * w) ^ 2 + (a * y + b * x + c * w - d * z) ^ 2 + (a * z - b * w + c * x + d * y) ^ 2 +\\n      (a * w + b * z - c * y + d * x) ^ 2 =\\n    (a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2) * (x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A square has a lifting if and only if its (right) adjoint square has a lifting. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {C : Type u_1} {D : Type u_2} [inst : CategoryTheory.Category.{u_3, u_1} C]\\n  [inst_1 : CategoryTheory.Category.{u_4, u_2} D] {G : CategoryTheory.Functor C D} {F : CategoryTheory.Functor D C}\\n  {A B : C} {X Y : D} {i : A ⟶ B} {p : X ⟶ Y} {u : G.obj A ⟶ X} {v : G.obj B ⟶ Y}\\n  (sq : CategoryTheory.CommSq u (G.map i) p v) (adj : G ⊣ F),\\n  CategoryTheory.CommSq.HasLift\\n      (_ :\\n        CategoryTheory.CommSq ((CategoryTheory.Adjunction.homEquiv adj A X) u) i (F.map p)\\n          ((CategoryTheory.Adjunction.homEquiv adj B Y) v)) ↔\\n    CategoryTheory.CommSq.HasLift sq\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The square of `J(a | b)` is `1` when `a` and `b` are coprime. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {a : ℤ} {b : ℕ}, Int.gcd a ↑b = 1 → jacobiSym a b ^ 2 = 1\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The sum over the values of the quadratic character is zero when the characteristic is odd. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {F : Type u_1} [inst : Field F] [inst_1 : Fintype F] [inst_2 : DecidableEq F],\\n  ringChar F ≠ 2 → (Finset.sum Finset.univ fun a => (quadraticChar F) a) = 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The square of a quadratic character is the trivial character. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} [inst : CommRing R] {R' : Type v} [inst_1 : CommRing R'] {χ : MulChar R R'},\\n  MulChar.IsQuadratic χ → χ ^ 2 = 1\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Two natural numbers are equal if and only if they have the same divisors. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {m n : ℕ}, (∀ (a : ℕ), a ∣ m ↔ a ∣ n) ↔ m = n\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The `n`th power of a quadratic character is itself, when `n` is odd. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} [inst : CommRing R] {R' : Type v} [inst_1 : CommRing R'] {χ : MulChar R R'},\\n  MulChar.IsQuadratic χ → ∀ {n : ℕ}, Odd n → χ ^ n = χ\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Commutativity of a square is preserved when taking quotients by an ideal. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} [inst : CommRing R] {S : Type v} [inst_1 : CommRing S] {R' : Type u_5} {S' : Type u_6}\\n  [inst_2 : CommRing R'] [inst_3 : CommRing S'] {f : R →+* S} {f' : R' →+* S'} {g : R →+* R'} {g' : S →+* S'}\\n  (hfg : RingHom.comp f' g = RingHom.comp g' f) (I : Ideal S'),\\n  let leq := (_ : Ideal.comap f (Ideal.comap g' I) ≤ Ideal.comap g (Ideal.comap f' I));\\n  RingHom.comp (Ideal.quotientMap I g' (_ : Ideal.comap g' I ≤ Ideal.comap g' I))\\n      (Ideal.quotientMap (Ideal.comap g' I) f\\n        (_ : Ideal.comap f (Ideal.comap g' I) ≤ Ideal.comap f (Ideal.comap g' I))) =\\n    RingHom.comp (Ideal.quotientMap I f' (_ : Ideal.comap f' I ≤ Ideal.comap f' I))\\n      (Ideal.quotientMap (Ideal.comap f' I) g leq)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The special case of Graham's conjecture where all numbers are squarefree. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {n : ℕ} (f : ℕ → ℕ), (∀ k < n, Squarefree (f k)) → Nat.GrahamConjecture n f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The square of the quadratic character on nonzero arguments is `1`. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {F : Type u_1} [inst : Field F] [inst_1 : Fintype F] [inst_2 : DecidableEq F] {a : F},\\n  a ≠ 0 → (quadraticChar F) a ^ 2 = 1\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If `-1` is a square modulo the natural number `n`, then `n` is a sum of two squares. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {n : ℕ}, IsSquare (-1) → ∃ x y, n = x ^ 2 + y ^ 2\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: **Euler's four-square identity**, a version for natural numbers. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (a b c d x y z w : ℕ),\\n  Int.natAbs (↑a * ↑x - ↑b * ↑y - ↑c * ↑z - ↑d * ↑w) ^ 2 + Int.natAbs (↑a * ↑y + ↑b * ↑x + ↑c * ↑w - ↑d * ↑z) ^ 2 +\\n        Int.natAbs (↑a * ↑z - ↑b * ↑w + ↑c * ↑x + ↑d * ↑y) ^ 2 +\\n      Int.natAbs (↑a * ↑w + ↑b * ↑z - ↑c * ↑y + ↑d * ↑x) ^ 2 =\\n    (a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2) * (x ^ 2 + y ^ 2 + z ^ 2 + w ^ 2)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: In a finite field of characteristic `2`, all elements are squares. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {F : Type u_3} [inst : Field F] [inst_1 : Finite F], ringChar F = 2 → ∀ (a : F), IsSquare a\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Two natural numbers are equal if and only if they have the same multiples. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {m n : ℕ}, (∀ (a : ℕ), m ∣ a ↔ n ∣ a) ↔ m = n\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The convolution of two even functions is also even. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {𝕜 : Type u𝕜} {G : Type uG} {E : Type uE} {E' : Type uE'} {F : Type uF} [inst : NormedAddCommGroup E]\\n  [inst_1 : NormedAddCommGroup E'] [inst_2 : NormedAddCommGroup F] {f : G → E} {g : G → E'} {x : G}\\n  [inst_3 : NontriviallyNormedField 𝕜] [inst_4 : NormedSpace 𝕜 E] [inst_5 : NormedSpace 𝕜 E'] [inst_6 : NormedSpace 𝕜 F]\\n  (L : E →L[𝕜] E' →L[𝕜] F) [inst_7 : MeasurableSpace G] {μ : MeasureTheory.Measure G} [inst_8 : NormedSpace ℝ F]\\n  [inst_9 : AddCommGroup G] [inst_10 : MeasureTheory.Measure.IsAddLeftInvariant μ]\\n  [inst_11 : MeasureTheory.Measure.IsNegInvariant μ] [inst_12 : MeasurableNeg G] [inst_13 : MeasurableAdd G],\\n  (∀ᵐ (x : G) ∂μ, f (-x) = f x) → (∀ᵐ (x : G) ∂μ, g (-x) = g x) → convolution f g L (-x) = convolution f g L x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The set of natural numbers that are sums of two squares is closed under multiplication. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {a b x y u v : ℕ}, a = x ^ 2 + y ^ 2 → b = u ^ 2 + v ^ 2 → ∃ r s, a * b = r ^ 2 + s ^ 2\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The sum of two squares is zero iff both elements are zero. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : LinearOrderedSemiring α] {a b : α} [inst_1 : ExistsAddOfLE α], a * a + b * b = 0 ↔ a = 0 ∧ b = 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If the square of a number is even, the number itself is even.\\n\\nGive ONLY the Lean code\"}]"}
{"text":"In a finite commutative ring, all prime ideals are maximal.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A finite group of prime order is cyclic. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : Group α] [inst_1 : Fintype α] {p : ℕ} [hp : Fact (Nat.Prime p)], Fintype.card α = p → IsCyclic α\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The unique maximal ideal of the localization at `I.primeCompl` lies over the ideal `I`. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : CommSemiring R] {I : Ideal R} [hI : Ideal.IsPrime I],\\n  Ideal.comap (algebraMap R (Localization.AtPrime I)) (LocalRing.maximalIdeal (Localization (Ideal.primeCompl I))) = I\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The only constant in a maximal ideal over a field is `0`. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} [inst : Ring R],\\n  IsField R → ∀ (I : Ideal (Polynomial R)) [hI : Ideal.IsMaximal I] (x : R), Polynomial.C x ∈ I → x = 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The variable of the power series ring over an integral domain is prime.\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsDomain R], Prime PowerSeries.X\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The `Ideal.closure` of a maximal ideal in a complete normed ring is the ideal itself. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : NormedRing R] [inst_1 : CompleteSpace R] {I : Ideal R}, Ideal.IsMaximal I → Ideal.closure I = I\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The kernel of a homomorphism to a field is a maximal ideal. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} {K : Type u_2} {F : Type u_3} [inst : Ring R] [inst_1 : Field K] [inst_2 : RingHomClass F R K] (f : F),\\n  Function.Surjective ⇑f → Ideal.IsMaximal (RingHom.ker f)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: This ideal is maximal in the collection of proper ideals. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {P : Type u_1} [inst : LE P] {I : Order.Ideal P} [self : Order.Ideal.IsMaximal I] ⦃J : Order.Ideal P⦄,\\n  I < J → ↑J = Set.univ\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The category of commutative rings has all limits. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"CategoryTheory.Limits.HasLimitsOfSize.{v, v, max u v, max (u + 1) (v + 1)} CommRingCatMax\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: When a ring is not a field, the maximal ideals are nontrivial. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : CommSemiring R] [inst_1 : Nontrivial R] {M : Ideal R}, Ideal.IsMaximal M → ¬IsField R → M ≠ ⊥\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A ring is Noetherian if and only if all its ideals are finitely-generated. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (R : Type u_1) [inst : Semiring R], IsNoetherianRing R ↔ ∀ (I : Ideal R), Ideal.FG I\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Any finitely generated ideal is principal. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} [inst : CommRing R] [self : IsBezout R] (I : Ideal R), Ideal.FG I → Submodule.IsPrincipal I\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Krull's theorem: a nontrivial ring has a maximal ideal. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (α : Type u) [inst : Semiring α] [inst_1 : Nontrivial α], ∃ M, Ideal.IsMaximal M\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Maximal ideals in complete normed rings are closed. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : NormedRing R] [inst_1 : CompleteSpace R] {I : Ideal R} [hI : Ideal.IsMaximal I], IsClosed ↑I\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If the quotient by an ideal is a field, then the ideal is maximal. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} [inst : CommRing R] (I : Ideal R), IsField (R ⧸ I) → Ideal.IsMaximal I\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The quotient of a ring by an ideal is a field iff the ideal is maximal. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} [inst : CommRing R] (I : Ideal R), Ideal.IsMaximal I ↔ IsField (R ⧸ I)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If all prime ideals in a commutative ring are principal, so are all other ideals. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} [inst : CommRing R],\\n  (∀ (P : Ideal R), Ideal.IsPrime P → Submodule.IsPrincipal P) → IsPrincipalIdealRing R\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: In a finite commutative ring, all prime ideals are maximal.\\n\\nGive ONLY the Lean code\"}]"}
{"text":"A topological space $X$ is Hausdorff if and only if the diagonal is a closed set in $X × X$.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Finite topological spaces are compact. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u} [inst : TopologicalSpace X] [inst_1 : Finite X], CompactSpace X\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Any continuous bijection of compact Hausdorff spaces is an isomorphism. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X Y : CompHaus} (f : X ⟶ Y), Function.Bijective ⇑f → CategoryTheory.IsIso f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: For any topological space `X`, its one point compactification is a compact space. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X], CompactSpace (OnePoint X)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A linear order with order topology is a completely normal Hausdorff topological space. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} [inst : LinearOrder X] [inst_1 : TopologicalSpace X] [inst : OrderTopology X], T5Space X\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A continuous injective map from a compact space to a Hausdorff space is a closed embedding. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] [inst_2 : CompactSpace X]\\n  [inst_3 : T2Space Y] {f : X → Y}, Continuous f → Function.Injective f → ClosedEmbedding f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A continuous surjective map from a compact space to a Hausdorff space is a quotient map. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] [inst_2 : CompactSpace X]\\n  [inst_3 : T2Space Y] {f : X → Y}, Function.Surjective f → Continuous f → QuotientMap f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Stonean spaces are Hausdorff. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\", \"content\": \"∀ (X : Stonean), T2Space (CoeSort.coe X)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Any continuous function on compact Hausdorff spaces is a closed map. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {X Y : CompHaus} (f : X ⟶ Y), IsClosedMap ⇑f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A locally compact Hausdorff space is totally disconnected\\nif and only if it is totally separated. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {H : Type u_3} [inst : TopologicalSpace H] [inst_1 : LocallyCompactSpace H] [inst_2 : T2Space H],\\n  TotallyDisconnectedSpace H ↔ TotallySeparatedSpace H\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A locally compact Hausdorff totally disconnected space has a basis with clopen elements. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {H : Type u_3} [inst : TopologicalSpace H] [inst_1 : LocallyCompactSpace H] [inst_2 : T2Space H]\\n  [inst_3 : TotallyDisconnectedSpace H], TopologicalSpace.IsTopologicalBasis {s | IsClopen s}\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Two closed sets are at zero Hausdorff distance if and only if they coincide. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : PseudoMetricSpace α] {s t : Set α},\\n  IsClosed s → IsClosed t → EMetric.hausdorffEdist s t ≠ ⊤ → (Metric.hausdorffDist s t = 0 ↔ s = t)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Two closed sets are at zero Hausdorff edistance if and only if they coincide. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : PseudoEMetricSpace α] {s t : Set α},\\n  IsClosed s → IsClosed t → (EMetric.hausdorffEdist s t = 0 ↔ s = t)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The Hausdorff distances between two sets and their closures coincide. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : PseudoMetricSpace α] {s t : Set α},\\n  Metric.hausdorffDist (closure s) (closure t) = Metric.hausdorffDist s t\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: In a complete space, the type of closed subsets is complete for the\\nHausdorff edistance. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : EMetricSpace α] [inst_1 : CompleteSpace α], CompleteSpace (TopologicalSpace.Closeds α)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Every two points in a Hausdorff space admit disjoint open neighbourhoods. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u} [inst : TopologicalSpace X] [self : T2Space X],\\n  Pairwise fun x y => ∃ u v, IsOpen u ∧ IsOpen v ∧ x ∈ u ∧ y ∈ v ∧ Disjoint u v\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A continuous map from a compact space to a Hausdorff space is a closed map. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] [inst_2 : CompactSpace X]\\n  [inst_3 : T2Space Y] {f : X → Y}, Continuous f → IsClosedMap f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A topological space $X$ is Hausdorff if and only if the diagonal is a closed set in $X × X$.\\n\\nGive ONLY the Lean code\"}]"}
{"text":"If every point of a subset of a topological space is contained in some open set, the subset itself is open.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The first projection in a product of topological spaces sends open sets to open sets. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u} {Y : Type v} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y], IsOpenMap Prod.fst\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A subspace is dense iff its topological closure is the entire space. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} {M : Type v} [inst : Semiring R] [inst_1 : TopologicalSpace M] [inst_2 : AddCommMonoid M]\\n  [inst_3 : Module R M] [inst_4 : ContinuousConstSMul R M] [inst_5 : ContinuousAdd M] {s : Submodule R M},\\n  Dense ↑s ↔ Submodule.topologicalClosure s = ⊤\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: In a compact space, the type of closed subsets is compact. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : EMetricSpace α] [inst_1 : CompactSpace α], CompactSpace (TopologicalSpace.Closeds α)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Any uncountable closed set in a second countable space contains a nonempty perfect subset.\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : TopologicalSpace α] {C : Set α} [inst_1 : SecondCountableTopology α],\\n  IsClosed C → ¬Set.Countable C → ∃ D, Perfect D ∧ Set.Nonempty D ∧ D ⊆ C\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The only open sets in the indiscrete topology are the empty set and the whole space. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {α : Type u_2} (U : Set α), IsOpen U ↔ U = ∅ ∨ U = Set.univ\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A nonempty open subset of a preirreducible subspace is dense in the subspace. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] {S U : Set X},\\n  IsPreirreducible S → IsOpen U → Set.Nonempty (S ∩ U) → S ⊆ closure (S ∩ U)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Points of a finite set can be separated by open sets from each other. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : T2Space X] {s : Set X},\\n  Set.Finite s → ∃ U, (∀ (x : X), x ∈ U x ∧ IsOpen (U x)) ∧ Set.PairwiseDisjoint s U\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Subsets of a given closed subset form a closed set \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : EMetricSpace α] {s : Set α}, IsClosed s → IsClosed {t | ↑t ⊆ s}\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: In a (pre)irreducible space, a nonempty open set is dense. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u_1} [inst : TopologicalSpace X] {s : Set X} [inst_1 : PreirreducibleSpace X],\\n  IsOpen s → Set.Nonempty s → Dense s\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The closure of every open set is open. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u} [inst : TopologicalSpace X] [self : ExtremallyDisconnected X] (U : Set X), IsOpen U → IsOpen (closure U)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A closed subset of a compact set is a compact set. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {X : Type u} [inst : TopologicalSpace X] {s t : Set X}, IsCompact s → IsClosed t → t ⊆ s → IsCompact t\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: An open set in the indiscrete topology is either empty or the whole space. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_5} [t : TopologicalSpace α], t = ⊤ → ∀ (U : TopologicalSpace.Opens α), U = ⊥ ∨ U = ⊤\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Characterization of when a subset of the space of points is open. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (L : Type u_1) [inst : CompleteLattice L] (U : Set (Locale.PT L)), IsOpen U ↔ ∃ u, {x | x u} = U\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If every point of a subset of a topological space is contained in some open set, the subset itself is open.\\n\\nGive ONLY the Lean code\"}]"}
{"text":"Every non-identity element of a free group is of infinite order.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Every nonarchimedean ring is naturally a nonarchimedean additive group. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (R : Type u_1) [inst : Ring R] [inst_1 : TopologicalSpace R] [t : NonarchimedeanRing R], NonarchimedeanAddGroup R\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Subgroups of torsion-free groups are torsion-free. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G], Monoid.IsTorsionFree G → ∀ (H : Subgroup G), Monoid.IsTorsionFree ↥H\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Inverses of elements of finite additive order\\nhave finite additive order.\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddGroup G] {x : G}, IsOfFinAddOrder (-x) ↔ IsOfFinAddOrder x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: 0 is of finite order in any additive monoid.\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {G : Type u_1} [inst : AddMonoid G], IsOfFinAddOrder 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A finite group of prime order is simple. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : Group α] [inst_1 : Fintype α] {p : ℕ} [hp : Fact (Nat.Prime p)],\\n  Fintype.card α = p → IsSimpleGroup α\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A nontrivial monoid is not torsion-free if any nontrivial element has finite order. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Monoid G], ¬Monoid.IsTorsionFree G ↔ ∃ g, g ≠ 1 ∧ IsOfFinOrder g\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A finite group of prime order is cyclic.\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : AddGroup α] [inst_1 : Fintype α] {p : ℕ} [hp : Fact (Nat.Prime p)],\\n  Fintype.card α = p → IsAddCyclic α\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The Nielsen-Schreier theorem: a subgroup of a free group is free. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u} [inst : Group G] [inst_1 : IsFreeGroup G] (H : Subgroup G), IsFreeGroup ↥H\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: 1 is of finite order in any monoid. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {G : Type u_1} [inst : Monoid G], IsOfFinOrder 1\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The free product of free groups is itself a free group. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {ι : Type u_4} (G : ι → Type u_5) [inst : (i : ι) → Group (G i)] [inst_1 : ∀ (i : ι), IsFreeGroup (G i)],\\n  IsFreeGroup (Monoid.CoprodI G)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Elements of finite order are closed under multiplication. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : CommMonoid G] {x y : G}, IsOfFinOrder x → IsOfFinOrder y → IsOfFinOrder (x * y)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The image of an element of finite additive order has finite additive order.\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} {H : Type u_2} [inst : AddMonoid G] [inst_1 : AddMonoid H] (f : G →+ H) {x : G},\\n  IsOfFinAddOrder x → IsOfFinAddOrder (f x)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A finite group of prime order is cyclic. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : Group α] [inst_1 : Fintype α] {p : ℕ} [hp : Fact (Nat.Prime p)], Fintype.card α = p → IsCyclic α\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A group element has finite additive order iff its order is positive.\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddMonoid G] {x : G}, 0 < addOrderOf x ↔ IsOfFinAddOrder x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Elements of finite order are of finite order in submonoids.\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddMonoid G] {H : AddSubmonoid G} {x : ↥H}, IsOfFinAddOrder ↑x ↔ IsOfFinAddOrder x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The image of an element of finite order has finite order. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} {H : Type u_2} [inst : Monoid G] [inst_1 : Monoid H] (f : G →* H) {x : G},\\n  IsOfFinOrder x → IsOfFinOrder (f x)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A monoid is not a torsion monoid if it has an element of infinite order. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (G : Type u_1) [inst : Monoid G], ¬Monoid.IsTorsion G ↔ ∃ g, ¬IsOfFinOrder g\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A group element has finite order iff its order is positive. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Monoid G] {x : G}, 0 < orderOf x ↔ IsOfFinOrder x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Every nonzero element of a group with zero is invertible. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [self : LinearOrderedCommGroupWithZero α] (a : α), a ≠ 0 → a * a⁻¹ = 1\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Inverses of elements of finite order have finite order. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] {x : G}, IsOfFinOrder x⁻¹ ↔ IsOfFinOrder x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Every non-identity element of a free group is of infinite order.\\n\\nGive ONLY the Lean code\"}]"}
{"text":"An element of a discrete valuation ring is a unit if and only if it has a valuation of zero.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If `v` is an additive valuation on a division ring then `v(x) = ⊤` iff `x = 0`. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u_1} [inst : DivisionRing K] {Γ₀ : Type u_4} [inst_1 : LinearOrderedAddCommMonoidWithTop Γ₀]\\n  [inst_2 : Nontrivial Γ₀] (v : AddValuation K Γ₀) {x : K}, v x = ⊤ ↔ x = 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Nonzero divisors have valuation greater than zero. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : IsDedekindDomain R]\\n  (v : IsDedekindDomain.HeightOneSpectrum R) (x : ↥(nonZeroDivisors R)),\\n  0 < IsDedekindDomain.HeightOneSpectrum.intValuationDef v ↑x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: In a normed ring, the powers of an element x with `‖x‖ < 1` tend to zero. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_4} [inst : NormedRing R] {x : R}, ‖x‖ < 1 → Filter.Tendsto (fun n => x ^ n) Filter.atTop (nhds 0)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: In a monoid with zero, either zero and one are nonequal, or zero is the only element. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {M₀ : Type u_2} [inst : MulZeroOneClass M₀], 0 ≠ 1 ∨ ∀ (a : M₀), a = 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A subring of a ring with no zero divisors has no zero divisors. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : Ring R] [inst_1 : NoZeroDivisors R] (s : Subring R), NoZeroDivisors ↥s\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The sum of a nontrivial subgroup of the units of a field is zero. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u_1} [inst : Ring K] [inst_1 : NoZeroDivisors K] {G : Subgroup Kˣ} [inst_2 : Fintype ↥G],\\n  G ≠ ⊥ → (Finset.sum Finset.univ fun x => ↑↑x) = 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Nonzero divisors have nonzero valuation. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : IsDedekindDomain R]\\n  (v : IsDedekindDomain.HeightOneSpectrum R) (x : ↥(nonZeroDivisors R)),\\n  IsDedekindDomain.HeightOneSpectrum.intValuationDef v ↑x ≠ 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: In a monoid with zero, zero equals one if and only if all elements of that semiring\\nare equal. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {M₀ : Type u_2} [inst : MulZeroOneClass M₀], 0 = 1 ↔ Subsingleton M₀\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Nonzero elements have nonzero adic valuation. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : IsDedekindDomain R]\\n  (v : IsDedekindDomain.HeightOneSpectrum R) (x : R), x ≠ 0 → IsDedekindDomain.HeightOneSpectrum.intValuationDef v x ≠ 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: An element is in the kernel if and only if it maps to zero.\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} {S : Type v} {F : Type u_1} [inst : Semiring R] [inst_1 : Semiring S] [rcf : RingHomClass F R S] (f : F)\\n  {r : R}, r ∈ RingHom.ker f ↔ f r = 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The `v`-adic valuation of `0 : R` equals 0. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : IsDedekindDomain R]\\n  (v : IsDedekindDomain.HeightOneSpectrum R), IsDedekindDomain.HeightOneSpectrum.intValuationDef v 0 = 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A non-unital subring contains the ring's 0. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} [inst : NonUnitalNonAssocRing R] (s : NonUnitalSubring R), 0 ∈ s\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A nonzero ideal has an element of minimal norm. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} {S : Type u_2} [inst : EuclideanDomain R] [inst_1 : CommRing S] [inst_2 : IsDomain S]\\n  [inst_3 : Algebra R S] (abv : AbsoluteValue R ℤ) (I : ↥(nonZeroDivisors (Ideal S))),\\n  ∃ b ∈ ↑I, b ≠ 0 ∧ ∀ c ∈ ↑I, abv ((Algebra.norm R) c) < abv ((Algebra.norm R) b) → c = 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A ring is a `ℚ`-algebra iff it has equal characteristic zero. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (R : Type u_1) [inst : CommRing R], Nonempty (Algebra ℚ R) ↔ ∀ (I : Ideal R), I ≠ ⊤ → CharZero (R ⧸ I)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: In a monoid with zero, if zero equals one, then zero is the only element. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {M₀ : Type u_2} [inst : MulZeroOneClass M₀], 0 = 1 → ∀ (a : M₀), a = 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A product of ideals in an integral domain is zero if and only if one of the terms is zero. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_2} [inst : CommRing R] [inst_1 : IsDomain R] {s : Multiset (Ideal R)}, Multiset.prod s = ⊥ ↔ ⊥ ∈ s\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If `v` is a valuation on a division ring then `v(x) = 0` iff `x = 0`. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u_1} [inst : DivisionRing K] {Γ₀ : Type u_4} [inst_1 : LinearOrderedCommMonoidWithZero Γ₀]\\n  [inst_2 : Nontrivial Γ₀] (v : Valuation K Γ₀) {x : K}, v x = 0 ↔ x = 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: An element of a discrete valuation ring is a unit if and only if it has a valuation of zero.\\n\\nGive ONLY the Lean code\"}]"}
{"text":"For any two relatively prime positive integers $a$ and $b$, every sufficiently large natural number $N$ can be written as a linear combination $ax + by$ of $a$ and $b$, where both $x$ and $y$ are natural numbers.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Rational numbers are dense in a linear ordered archimedean field. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {𝕜 : Type u_1} [inst : LinearOrderedField 𝕜] [inst_1 : TopologicalSpace 𝕜] [inst_2 : OrderTopology 𝕜]\\n  [inst_3 : Archimedean 𝕜], DenseRange Rat.cast\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If `p` is a prime factor of `a` then `p` is also a prime factor of `a * b` for any `b > 0` \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {p a b : ℕ}, p ∈ Nat.factors a → b ≠ 0 → p ∈ Nat.factors (a * b)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If two integers are congruent to a sufficiently large modulus,\\nthey are equal. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {a b c : ℤ}, a % b = c → Int.natAbs (a - c) < Int.natAbs b → a = c\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: There is a rational power between any two positive elements of an archimedean ordered field. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {n : ℕ} {α : Type u_1} [inst : LinearOrderedField α] [inst_1 : Archimedean α],\\n  n ≠ 0 → ∀ {x y : α}, x < y → 0 < y → ∃ q, 0 < q ∧ x < ↑q ^ n ∧ ↑q ^ n < y\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: For `a ≤ b`, there is a `c` so `b = a * c`. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [self : CanonicallyOrderedCommMonoid α] {a b : α}, a ≤ b → ∃ c, b = a * c\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Two natural numbers are equal if and only if they have the same divisors. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {m n : ℕ}, (∀ (a : ℕ), a ∣ m ↔ a ∣ n) ↔ m = n\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If `p` is a prime factor of `b` then `p` is also a prime factor of `a * b` for any `a > 0` \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {p a b : ℕ}, p ∈ Nat.factors b → a ≠ 0 → p ∈ Nat.factors (a * b)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: For coprime `a` and `b`, the prime factors of `a * b` are the union of those of `a` and `b` \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {a b : ℕ}, Nat.Coprime a b → List.Perm (Nat.factors (a * b)) (Nat.factors a ++ Nat.factors b)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Every nonzero natural number has a unique prime factorization \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\", \"content\": \"Set.InjOn Nat.factorization {x | x ≠ 0}\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Multiplication by positive integers is injective \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : Semiring R] [self : BinomialRing R] (n : ℕ), n ≠ 0 → Function.Injective fun x => n • x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Two natural numbers are equal if and only if they have the same multiples. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {m n : ℕ}, (∀ (a : ℕ), m ∣ a ↔ n ∣ a) ↔ m = n\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: We relate a finite product over primes to an infinite sum over smooth numbers. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : NormedCommRing R] [inst_1 : CompleteSpace R] {f : ℕ → R},\\n  f 1 = 1 →\\n    (∀ {m n : ℕ}, Nat.Coprime m n → f (m * n) = f m * f n) →\\n      (∀ {p : ℕ}, Nat.Prime p → Summable fun n => ‖f (p ^ n)‖) →\\n        ∀ (N : ℕ),\\n          (Summable fun m => ‖f ↑m‖) ∧\\n            HasSum (fun m => f ↑m) (Finset.prod (Nat.primesBelow N) fun p => ∑' (n : ℕ), f (p ^ n))\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: For positive `a` and `b`, the prime factors of `a * b` are the union of those of `a` and `b` \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {a b : ℕ}, a ≠ 0 → b ≠ 0 → List.Perm (Nat.factors (a * b)) (Nat.factors a ++ Nat.factors b)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The set of natural numbers that are sums of two squares is closed under multiplication. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {a b x y u v : ℕ}, a = x ^ 2 + y ^ 2 → b = u ^ 2 + v ^ 2 → ∃ r s, a * b = r ^ 2 + s ^ 2\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: For any two relatively prime positive integers $a$ and $b$, every sufficiently large natural number $N$ can be written as a linear combination $ax + by$ of $a$ and $b$, where both $x$ and $y$ are natural numbers.\\n\\nGive ONLY the Lean code\"}]"}
{"text":"Every field is a ring.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The characteristic of a finite ring cannot be zero. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (R : Type u_1) [inst : NonAssocRing R] (p : ℕ) [inst : CharP R p] [inst : Finite R], p ≠ 0\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If two rings are isomorphic, and the second is a domain, then so is the first. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {A : Type u_7} (B : Type u_8) [inst : Semiring A] [inst_1 : Semiring B] [inst_2 : IsDomain B], A ≃* B → IsDomain A\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A subring contains the ring's 1. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {R : Type u} [inst : Ring R] (s : Subring R), 1 ∈ s\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The quotient of a ring by an ideal is a field iff the ideal is maximal. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} [inst : CommRing R] (I : Ideal R), Ideal.IsMaximal I ↔ IsField (R ⧸ I)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Every ring involution must be its own inverse \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {F : Type u_2} {R : outParam (Type u_3)} [inst : Semiring R] [self : RingInvoClass F R] (f : F) (x : R),\\n  MulOpposite.unop (f (MulOpposite.unop (f x))) = x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A seminormed ring is a topological ring. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : NonUnitalSeminormedRing α], TopologicalRing α\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: When a ring is not a field, the maximal ideals are nontrivial. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : CommSemiring R] [inst_1 : Nontrivial R] {M : Ideal R}, Ideal.IsMaximal M → ¬IsField R → M ≠ ⊥\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A subring contains the ring's 0. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {R : Type u} [inst : Ring R] (s : Subring R), 0 ∈ s\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A field is perfect if every irreducible polynomial is separable. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u_1} [inst : Field K] [self : PerfectField K] {f : Polynomial K}, Irreducible f → Polynomial.Separable f\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Stalks of a locally ringed space are local rings. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (self : AlgebraicGeometry.LocallyRingedSpace) (x : ↑↑self.toPresheafedSpace),\\n  LocalRing ↑(TopCat.Presheaf.stalk self.presheaf x)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The ring of integers of a number field is not a field. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (K : Type u_1) [inst : Field K] [nf : NumberField K], ¬IsField ↥(NumberField.ringOfIntegers K)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: For a semiring to be a field, it must have two distinct elements. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {R : Type u} [inst : Semiring R], IsField R → ∃ x y, x ≠ y\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: All ideals in a division (semi)ring are trivial. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u} [inst : DivisionSemiring K] (I : Ideal K), I = ⊥ ∨ I = ⊤\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The category of rings has all limits. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"CategoryTheory.Limits.HasLimitsOfSize.{v, v, max u v, max (u + 1) (v + 1)} CommSemiRingCatMax\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A perfect field of characteristic `p` (prime) is a perfect ring. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (K : Type u_1) [inst : Field K] [inst_1 : PerfectField K] (p : ℕ) [hp : Fact (Nat.Prime p)] [inst_2 : CharP K p],\\n  PerfectRing K p\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Fields are commutative. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} [inst : Semiring R], IsField R → ∀ (x y : R), x * y = y * x\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A linear ordered field that is a floor ring is archimedean. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (α : Type u_2) [inst : LinearOrderedField α] [inst_1 : FloorRing α], Archimedean α\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: An intermediate field contains the ring's 1. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u_1} {L : Type u_2} [inst : Field K] [inst_1 : Field L] [inst_2 : Algebra K L] (S : IntermediateField K L),\\n  1 ∈ S\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: An intermediate field contains the ring's 0. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {K : Type u_1} {L : Type u_2} [inst : Field K] [inst_1 : Field L] [inst_2 : Algebra K L] (S : IntermediateField K L),\\n  0 ∈ S\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A field is a valuation ring. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ (K : Type u) [inst : Field K], ValuationRing K\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Every field is a ring.\\n\\nGive ONLY the Lean code\"}]"}
{"text":"The set of units in a ring forms a group.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Multivariate formal power series over a local ring form a local ring. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {σ : Type u_1} {R : Type u_2} [inst : CommRing R] [inst_1 : LocalRing R], LocalRing (MvPowerSeries σ R)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The subring generated by a set includes the set. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u} [inst : Ring R] {s : Set R}, s ⊆ ↑(Subring.closure s)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A unit in a monoid is regular. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : Monoid R] {a : R}, IsUnit a → IsRegular a\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Subgroups of torsion groups are torsion groups. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G], Monoid.IsTorsion G → ∀ (H : Subgroup G), Monoid.IsTorsion ↥H\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A finite group of prime order is cyclic. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u} [inst : Group α] [inst_1 : Fintype α] {p : ℕ} [hp : Fact (Nat.Prime p)], Fintype.card α = p → IsCyclic α\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The normal closure of a set is a subgroup. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] (s : Set G), IsSubgroup (Group.normalClosure s)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A seminormed ring is a topological ring. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : NonUnitalSeminormedRing α], TopologicalRing α\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A group is finitely generated if and only if it is finitely generated as a monoid. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {G : Type u_3} [inst : Group G], Group.FG G ↔ Monoid.FG G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A subring contains the ring's 1. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {R : Type u} [inst : Ring R] (s : Subring R), 1 ∈ s\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A normed division ring is a topological division ring. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {α : Type u_1} [inst : NormedDivisionRing α], TopologicalDivisionRing α\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A subring contains the ring's 0. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\": \"∀ {R : Type u} [inst : Ring R] (s : Subring R), 0 ∈ s\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The unit circle in `ℂ` is a Lie group. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"LieGroup (modelWithCornersSelf ℝ (EuclideanSpace ℝ (Fin 1))) ↥circle\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The subgroup generated by a set includes the set. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] {k : Set G}, k ⊆ ↑(Subgroup.closure k)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The center of a group acts commutatively on that group. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G], SMulCommClass G (↥(Subgroup.center G)) G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Finite groups are torsion groups. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] [inst_1 : Finite G], Monoid.IsTorsion G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A finite subgroup of the unit group of an integral domain is cyclic. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} {G : Type u_2} [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : Group G] [inst_3 : Finite G]\\n  (f : G →* R), Function.Injective ⇑f → IsCyclic G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A finite subgroup of the units of an integral domain is cyclic. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsDomain R] (S : Subgroup Rˣ) [inst_2 : Finite ↥S], IsCyclic ↥S\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The group of units of a complete normed ring is an open subset of the ring. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : NormedRing R] [inst_1 : CompleteSpace R], IsOpen {x | IsUnit x}\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The units of a complete normed ring form a Lie group. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} [inst : NormedRing R] [inst_1 : CompleteSpace R] {𝕜 : Type u_2} [inst_2 : NontriviallyNormedField 𝕜]\\n  [inst_3 : NormedAlgebra 𝕜 R], LieGroup (modelWithCornersSelf 𝕜 R) Rˣ\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The set of units in a ring forms a group.\\n\\nGive ONLY the Lean code\"}]"}
{"text":"If the direct product of two groups is torsion free then each of the groups is torsion free.","fullPrompt":"[{\"role\": \"system\",\n  \"content\":\n  \"You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked. Follow EXACTLY any examples given when generating Lean code.\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Quotienting by the torsion submodule gives a torsion-free module. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {R : Type u_1} {M : Type u_2} [inst : CommRing R] [inst_1 : AddCommGroup M] [inst_2 : Module R M],\\n  Submodule.torsion R (M ⧸ Submodule.torsion R M) = ⊥\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The free product of free groups is itself a free group. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {ι : Type u_4} (G : ι → Type u_5) [inst : (i : ι) → Group (G i)] [inst_1 : ∀ (i : ι), IsFreeGroup (G i)],\\n  IsFreeGroup (Monoid.CoprodI G)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The torsion subgroup is cylic. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (K : Type u_1) [inst : Field K] [inst_1 : NumberField K], IsCyclic ↥(NumberField.Units.torsion K)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A nontrivial torsion group is not torsion-free. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] [hN : Nontrivial G], Monoid.IsTorsion G → ¬Monoid.IsTorsionFree G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Torsion submonoids are torsion. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : CommMonoid G], Monoid.IsTorsion ↥(CommMonoid.torsion G)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Additive torsion groups are closed under extensions.\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} {H : Type u_2} [inst : AddGroup G] {N : AddSubgroup G} [inst_1 : AddGroup H] {f : G →+ H},\\n  N = AddMonoidHom.ker f → AddMonoid.IsTorsion H → AddMonoid.IsTorsion ↥N → AddMonoid.IsTorsion G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The torsion submonoid of an abelian group equals the torsion subgroup as a submonoid. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (G : Type u_1) [inst : CommGroup G], CommMonoid.torsion G = (CommGroup.torsion G).toSubmonoid\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: The image of a quotient is torsion iff the group is torsion. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} {H : Type u_2} [inst : Group G] {N : Subgroup G} [inst_1 : Group H] {f : G →* H},\\n  Function.Surjective ⇑f → N = MonoidHom.ker f → Monoid.IsTorsion ↥N → (Monoid.IsTorsion H ↔ Monoid.IsTorsion G)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: A nontrivial torsion-free group is not torsion. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] [hN : Nontrivial G], Monoid.IsTorsionFree G → ¬Monoid.IsTorsion G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If a group exponent exists, the group is torsion. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G], Monoid.ExponentExists G → Monoid.IsTorsion G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Finite groups are torsion groups. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G] [inst_1 : Finite G], Monoid.IsTorsion G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Subgroups of additive torsion groups are additive torsion groups.\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddGroup G], AddMonoid.IsTorsion G → ∀ (H : AddSubgroup G), AddMonoid.IsTorsion ↥H\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Subgroups of torsion groups are torsion groups. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G], Monoid.IsTorsion G → ∀ (H : Subgroup G), Monoid.IsTorsion ↥H\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Torsion groups are closed under extensions. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} {H : Type u_2} [inst : Group G] {N : Subgroup G} [inst_1 : Group H] {f : G →* H},\\n  N = MonoidHom.ker f → Monoid.IsTorsion H → Monoid.IsTorsion ↥N → Monoid.IsTorsion G\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Quotienting a group by its additive torsion subgroup yields an additive torsion free group.\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (G : Type u_1) [inst : AddCommGroup G], AddMonoid.IsTorsionFree (G ⧸ AddCommGroup.torsion G)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Quotienting a group by its torsion subgroup yields a torsion free group. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ (G : Type u_1) [inst : CommGroup G], Monoid.IsTorsionFree (G ⧸ CommGroup.torsion G)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Subgroups of additive torsion-free groups are additively torsion-free.\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : AddGroup G], AddMonoid.IsTorsionFree G → ∀ (H : AddSubgroup G), AddMonoid.IsTorsionFree ↥H\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Subgroups of torsion-free groups are torsion-free. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {G : Type u_1} [inst : Group G], Monoid.IsTorsionFree G → ∀ (H : Subgroup G), Monoid.IsTorsionFree ↥H\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Direct products of additive torsion free groups are torsion free.\\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {η : Type u_3} {Gs : η → Type u_4} [inst : (i : η) → AddGroup (Gs i)],\\n  (∀ (i : η), AddMonoid.IsTorsionFree (Gs i)) → AddMonoid.IsTorsionFree ((i : η) → Gs i)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: Direct products of torsion free groups are torsion free. \\n\\nGive ONLY the Lean code\"},\n {\"role\": \"assistant\",\n  \"content\":\n  \"∀ {η : Type u_3} {Gs : η → Type u_4} [inst : (i : η) → Group (Gs i)],\\n  (∀ (i : η), Monoid.IsTorsionFree (Gs i)) → Monoid.IsTorsionFree ((i : η) → Gs i)\"},\n {\"role\": \"user\",\n  \"content\":\n  \"Translate the following statement into Lean 4:\\n## Theorem: If the direct product of two groups is torsion free then each of the groups is torsion free.\\n\\nGive ONLY the Lean code\"}]"}
