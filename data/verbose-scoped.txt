Mathlib/RingTheory/OreLocalization/Basic.lean:scoped syntax:1075 term noWs atomic("[" term "⁻¹" noWs "]") : term
Mathlib/Algebra/BigOperators/Basic.lean:scoped syntax (name := bigsum) "∑ " extBinder ", " term:67 : term
Mathlib/Algebra/BigOperators/Basic.lean:scoped syntax (name := bigprod) "∏ " extBinder ", " term:67 : term
Mathlib/Algebra/BigOperators/Basic.lean:scoped syntax (name := bigsumin) "∑ " extBinder " in " term ", " term:67 : term
Mathlib/Algebra/BigOperators/Basic.lean:scoped syntax (name := bigprodin) "∏ " extBinder " in " term ", " term:67 : term
Mathlib/RingTheory/WittVector/StructurePolynomial.lean:scoped[Witt] notation "W_" => wittPolynomial p
Mathlib/RingTheory/WittVector/StructurePolynomial.lean:scoped[Witt] notation "W" => wittPolynomial p _
Mathlib/RingTheory/WittVector/Isocrystal.lean:scoped[Isocrystal] notation "K(" p ", " k ")" => FractionRing (WittVector p k)
Mathlib/RingTheory/WittVector/Isocrystal.lean:scoped[Isocrystal] notation "φ(" p ", " k ")" => WittVector.FractionRing.frobeniusRingHom p k
Mathlib/RingTheory/WittVector/Isocrystal.lean:scoped[Isocrystal] notation "Φ(" p ", " k ")" => WittVector.Isocrystal.frobenius p k
Mathlib/RingTheory/WittVector/Isocrystal.lean:scoped[Isocrystal] notation:50 M " →ᶠⁱ[" p ", " k "] " M₂ => WittVector.IsocrystalHom p k M M₂
Mathlib/RingTheory/WittVector/Isocrystal.lean:scoped[Isocrystal] notation:50 M " ≃ᶠⁱ[" p ", " k "] " M₂ => WittVector.IsocrystalEquiv p k M M₂
Mathlib/RingTheory/WittVector/WittPolynomial.lean:scoped[Witt] notation "W_" => wittPolynomial p
Mathlib/RingTheory/WittVector/WittPolynomial.lean:scoped[Witt] notation "W" => wittPolynomial p _
Mathlib/RingTheory/NonZeroDivisors.lean:scoped[nonZeroDivisors] notation:9000 R "⁰" => nonZeroDivisors R
Mathlib/RingTheory/NonZeroDivisors.lean:scoped[nonZeroSMulDivisors] notation:9000 R "⁰[" M "]" => nonZeroSMulDivisors R M
Mathlib/RingTheory/Valuation/Basic.lean:scoped[DiscreteValuation] notation "ℕₘ₀" => WithZero (Multiplicative ℕ)
Mathlib/RingTheory/Valuation/Basic.lean:scoped[DiscreteValuation] notation "ℤₘ₀" => WithZero (Multiplicative ℤ)
Mathlib/RingTheory/PowerSeries/Derivative.lean:scoped notation "d⁄dX" => derivative
Mathlib/RingTheory/PowerSeries/Basic.lean:scoped notation:9000 R "⟦X⟧" => PowerSeries R
Mathlib/Combinatorics/SetFamily/Compression/UV.lean:scoped[FinsetFamily] notation "𝓒 " => UV.compression
Mathlib/Combinatorics/SetFamily/Compression/Down.lean:scoped[FinsetFamily] notation "𝓓 " => Down.compression
Mathlib/AlgebraicGeometry/EllipticCurve/Weierstrass.lean:scoped[PolynomialPolynomial] notation "Y" => Polynomial.X
Mathlib/AlgebraicGeometry/EllipticCurve/Weierstrass.lean:scoped[PolynomialPolynomial] notation R "[X][Y]" => Polynomial (Polynomial R)
Mathlib/AlgebraicGeometry/EllipticCurve/Point.lean:scoped[WeierstrassCurve] notation W "⟮" S "⟯" => Point (baseChange W S)
Mathlib/AlgebraicTopology/SimplexCategory.lean:scoped[Simplicial] notation "[" n "]" => SimplexCategory.mk n
Mathlib/AlgebraicTopology/SimplicialSet.lean:scoped[Simplicial] notation "Δ[" n "]" => SSet.standardSimplex.obj (SimplexCategory.mk n)
Mathlib/AlgebraicTopology/SimplicialSet.lean:scoped[Simplicial] notation "∂Δ[" n "]" => SSet.boundary n
Mathlib/AlgebraicTopology/SimplicialSet.lean:scoped[Simplicial] notation "Λ[" n ", " i "]" => SSet.horn (n : ℕ) i
Mathlib/AlgebraicTopology/FundamentalGroupoid/Basic.lean:scoped notation "π" => FundamentalGroupoid.fundamentalGroupoidFunctor
Mathlib/AlgebraicTopology/FundamentalGroupoid/Basic.lean:scoped notation "πₓ" => FundamentalGroupoid.fundamentalGroupoidFunctor.obj
Mathlib/AlgebraicTopology/FundamentalGroupoid/Basic.lean:scoped notation "πₘ" => FundamentalGroupoid.fundamentalGroupoidFunctor.map
Mathlib/AlgebraicTopology/DoldKan/Notations.lean:scoped[DoldKan] notation "K[" X "]" => AlgebraicTopology.AlternatingFaceMapComplex.obj X
Mathlib/AlgebraicTopology/DoldKan/Notations.lean:scoped[DoldKan] notation "N[" X "]" => AlgebraicTopology.NormalizedMooreComplex.obj X
Mathlib/Topology/UniformSpace/Separation.lean:scoped[Uniformity] notation "𝓢" => separationRel
Mathlib/Topology/UniformSpace/Basic.lean:scoped[Uniformity] notation "𝓤[" u "]" => @uniformity _ u
Mathlib/Topology/UniformSpace/Basic.lean:scoped[Uniformity] notation "𝓤" => uniformity
Mathlib/Topology/UniformSpace/Basic.lean:scoped[Uniformity] notation "UniformContinuous[" u₁ ", " u₂ "]" => @UniformContinuous _ _ u₁ u₂
Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean:scoped[UniformConvergence] notation:25 α " →ᵤ " β:0 => UniformFun α β
Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean:scoped[UniformConvergence] notation:25 α " →ᵤ[" 𝔖 "] " β:0 => UniformOnFun α β 𝔖
Mathlib/Topology/ContinuousFunction/ZeroAtInfty.lean:scoped[ZeroAtInfty] notation (priority := 2000) "C₀(" α ", " β ")" => ZeroAtInftyContinuousMap α β
Mathlib/Topology/ContinuousFunction/ZeroAtInfty.lean:scoped[ZeroAtInfty] notation α " →C₀ " β => ZeroAtInftyContinuousMap α β
Mathlib/Topology/UnitInterval.lean:scoped[unitInterval] notation "I" => unitInterval
Mathlib/Topology/UnitInterval.lean:scoped notation "σ" => unitInterval.symm
Mathlib/Topology/Compactification/OnePoint.lean:scoped notation "∞" => OnePoint.infty
Mathlib/Topology/Sheaves/Presheaf.lean:scoped[AlgebraicGeometry] notation:80 x " |_ₗ " U " ⟪" e "⟫ " =>
Mathlib/Topology/Homotopy/HomotopyGroup.lean:scoped[Topology] notation "I^" N => N → I
Mathlib/Topology/Homotopy/HomotopyGroup.lean:scoped[Topology.Homotopy] notation "Ω" => LoopSpace
Mathlib/Topology/Homotopy/HomotopyGroup.lean:scoped[Topology.Homotopy] notation "Ω^" => GenLoop
Mathlib/Topology/Homotopy/HomotopyGroup.lean:scoped[Topology] notation "π_" => HomotopyGroup.Pi
Mathlib/Topology/Homotopy/HSpaces.lean:scoped[HSpaces] notation x "⋀" y => HSpace.hmul (x, y)
Mathlib/Topology/Basic.lean:scoped[Topology] notation (name := IsOpen_of) "IsOpen[" t "]" => @IsOpen _ t
Mathlib/Topology/Basic.lean:scoped[Topology] notation (name := IsClosed_of) "IsClosed[" t "]" => @IsClosed _ t
Mathlib/Topology/Basic.lean:scoped[Topology] notation (name := closure_of) "closure[" t "]" => @closure _ t
Mathlib/Topology/Basic.lean:scoped[Topology] notation "𝓝" => nhds
Mathlib/Topology/Basic.lean:scoped[Topology] notation "𝓝[" s "] " x:100 => nhdsWithin x s
Mathlib/Topology/Basic.lean:scoped[Topology] notation "𝓝[≠] " x:100 => nhdsWithin x (@singleton _ (Set _) instSingletonSet x)ᶜ
Mathlib/Topology/Basic.lean:scoped[Topology] notation "𝓝[≥] " x:100 => nhdsWithin x (Set.Ici x)
Mathlib/Topology/Basic.lean:scoped[Topology] notation "𝓝[≤] " x:100 => nhdsWithin x (Set.Iic x)
Mathlib/Topology/Basic.lean:scoped[Topology] notation "𝓝[>] " x:100 => nhdsWithin x (Set.Ioi x)
Mathlib/Topology/Basic.lean:scoped[Topology] notation "𝓝[<] " x:100 => nhdsWithin x (Set.Iio x)
Mathlib/Topology/Basic.lean:scoped[Topology] notation (name := Continuous_of) "Continuous[" t₁ ", " t₂ "]" =>
Mathlib/ModelTheory/Basic.lean:scoped[FirstOrder] notation:25 A " →[" L "] " B => FirstOrder.Language.Hom L A B
Mathlib/ModelTheory/Basic.lean:scoped[FirstOrder] notation:25 A " ↪[" L "] " B => FirstOrder.Language.Embedding L A B
Mathlib/ModelTheory/Basic.lean:scoped[FirstOrder] notation:25 A " ≃[" L "] " B => FirstOrder.Language.Equiv L A B
Mathlib/ModelTheory/LanguageMap.lean:scoped[FirstOrder] notation:95 L "[[" α "]]" => Language.withConstants L α
Mathlib/ModelTheory/ElementaryMaps.lean:scoped[FirstOrder] notation:25 A " ↪ₑ[" L "] " B => FirstOrder.Language.ElementaryEmbedding L A B
Mathlib/Algebra/Star/Basic.lean:scoped[ComplexConjugate] notation "conj" => starRingEnd _
Mathlib/Algebra/BigOperators/Finprod.lean:scoped[BigOperators] notation3"∑ᶠ "(...)", "r:67:(scoped f => finsum f) => r
Mathlib/Algebra/BigOperators/Finprod.lean:scoped[BigOperators] notation3"∏ᶠ "(...)", "r:67:(scoped f => finprod f) => r
Mathlib/Algebra/MonoidAlgebra/Basic.lean:scoped[AddMonoidAlgebra] notation:9000 R:max "[" A "]" => AddMonoidAlgebra R A
Mathlib/Algebra/DualNumber.lean:scoped[DualNumber] notation "ε" => DualNumber.eps
Mathlib/Algebra/Quaternion.lean:scoped[Quaternion] notation "ℍ[" R "," a "," b "]" => QuaternionAlgebra R a b
Mathlib/Algebra/Quaternion.lean:scoped[Quaternion] notation "ℍ[" R "]" => Quaternion R
Mathlib/Algebra/DirectSum/Basic.lean:scoped[DirectSum] notation3 "⨁ "(...)", "r:(scoped f => DirectSum _ f) => r
Mathlib/Algebra/Category/ModuleCat/Basic.lean:scoped[ModuleCat] notation "↟" f:1024 => ModuleCat.asHom f
Mathlib/Algebra/Category/ModuleCat/Basic.lean:scoped[ModuleCat] notation "↾" f:1024 => ModuleCat.asHomRight f
Mathlib/Algebra/Category/ModuleCat/Basic.lean:scoped[ModuleCat] notation "↿" f:1024 => ModuleCat.asHomLeft f
Mathlib/SetTheory/Cardinal/Ordinal.lean:scoped notation "ω_" o => ord <| aleph o
Mathlib/SetTheory/Cardinal/Ordinal.lean:scoped notation "ω₁" => ord <| aleph 1
Mathlib/SetTheory/Cardinal/Basic.lean:scoped notation "ℵ₀" => Cardinal.aleph0
Mathlib/SetTheory/Cardinal/Continuum.lean:scoped notation "𝔠" => Cardinal.continuum
Mathlib/SetTheory/Ordinal/Basic.lean:scoped notation "ω" => Ordinal.omega
Mathlib/LinearAlgebra/PiTensorProduct.lean:scoped[TensorProduct] notation3:100"⨂["R"] "(...)", "r:(scoped f => PiTensorProduct R f) => r
Mathlib/LinearAlgebra/AffineSpace/Basic.lean:scoped[Affine] notation "AffineSpace" => AddTorsor
Mathlib/LinearAlgebra/TensorPower.lean:scoped[TensorProduct] notation:100 "⨂[" R "]^" n:arg => TensorPower R n
Mathlib/LinearAlgebra/Projectivization/Basic.lean:scoped[LinearAlgebra.Projectivization] notation "ℙ" => Projectivization
Mathlib/LinearAlgebra/TensorProduct.lean:scoped[TensorProduct] notation:100 M " ⊗[" R "] " N:100 => TensorProduct R M N
Mathlib/LinearAlgebra/Matrix/SpecialLinearGroup.lean:scoped[MatrixGroups] notation "SL(" n ", " R ")" => Matrix.SpecialLinearGroup (Fin n) R
Mathlib/CategoryTheory/Types.lean:scoped notation "↾" f:200 => CategoryTheory.asHom f
Mathlib/CategoryTheory/Functor/Basic.lean:scoped [CategoryTheory] notation "𝟭" => Functor.id -- Type this as `\sb1`
Mathlib/CategoryTheory/Monoidal/Category.lean:scoped notation "𝟙_ " C:max => (MonoidalCategoryStruct.tensorUnit : C)
Mathlib/CategoryTheory/Monoidal/Category.lean:scoped notation "α_" => MonoidalCategoryStruct.associator
Mathlib/CategoryTheory/Monoidal/Category.lean:scoped notation "λ_" => MonoidalCategoryStruct.leftUnitor
Mathlib/CategoryTheory/Monoidal/Category.lean:scoped notation "ρ_" => MonoidalCategoryStruct.rightUnitor
Mathlib/CategoryTheory/Category/Basic.lean:scoped notation "𝟙" => CategoryStruct.id  -- type as \b1
Mathlib/CategoryTheory/Bicategory/Basic.lean:scoped notation "α_" => Bicategory.associator
Mathlib/CategoryTheory/Bicategory/Basic.lean:scoped notation "λ_" => Bicategory.leftUnitor
Mathlib/CategoryTheory/Bicategory/Basic.lean:scoped notation "ρ_" => Bicategory.rightUnitor
Mathlib/Probability/ConditionalProbability.lean:scoped notation μ "[" s "|" t "]" => ProbabilityTheory.cond μ t s
Mathlib/Probability/ConditionalProbability.lean:scoped notation:60 μ "[|" t "]" => ProbabilityTheory.cond μ t
Mathlib/Probability/Notation.lean:scoped[ProbabilityTheory] notation "𝔼[" X "|" m "]" =>
Mathlib/Probability/Notation.lean:scoped[ProbabilityTheory] notation P "[" X "]" => ∫ x, ↑(X x) ∂P
Mathlib/Probability/Notation.lean:scoped[ProbabilityTheory] notation "𝔼[" X "]" => ∫ a, (X : _ → _) a
Mathlib/Probability/Notation.lean:scoped[ProbabilityTheory] notation P "⟦" s "|" m "⟧" =>
Mathlib/Probability/Notation.lean:scoped[ProbabilityTheory] notation:50 X " =ₐₛ " Y:50 => X =ᵐ[MeasureTheory.MeasureSpace.volume] Y
Mathlib/Probability/Notation.lean:scoped[ProbabilityTheory] notation:50 X " ≤ₐₛ " Y:50 => X ≤ᵐ[MeasureTheory.MeasureSpace.volume] Y
Mathlib/Probability/Notation.lean:scoped[ProbabilityTheory] notation "∂" P "/∂" Q:100 => MeasureTheory.Measure.rnDeriv P Q
Mathlib/Probability/Notation.lean:scoped[ProbabilityTheory] notation "ℙ" => MeasureTheory.MeasureSpace.volume
Mathlib/Probability/Variance.lean:scoped notation "eVar[" X "]" => ProbabilityTheory.evariance X MeasureTheory.MeasureSpace.volume
Mathlib/Probability/Variance.lean:scoped notation "Var[" X "]" => ProbabilityTheory.variance X MeasureTheory.MeasureSpace.volume
Mathlib/Data/Polynomial/Laurent.lean:scoped[LaurentPolynomial] notation:9000 R "[T;T⁻¹]" => LaurentPolynomial R
Mathlib/Data/Polynomial/Basic.lean:scoped[Polynomial] notation:9000 R "[X]" => Polynomial R
Mathlib/Data/Num/Bitwise.lean:scoped notation a "::" b => bit a b
Mathlib/Data/Num/Bitwise.lean:scoped notation a "::" b => bit a b
Mathlib/Data/Complex/Module.lean:scoped[ComplexStarModule] notation "ℜ" => realPart
Mathlib/Data/Complex/Module.lean:scoped[ComplexStarModule] notation "ℑ" => imaginaryPart
Mathlib/Data/Complex/Exponential.lean:scoped notation "cexp" => Complex.exp
Mathlib/Data/Complex/Exponential.lean:scoped notation "rexp" => Real.exp
Mathlib/Data/Nat/Factorial/DoubleFactorial.lean:scoped notation:10000 n "‼" => Nat.doubleFactorial n
Mathlib/Data/Nat/Factorial/Basic.lean:scoped notation:10000 n "!" => Nat.factorial n
Mathlib/Data/Nat/Factorial/SuperFactorial.lean:scoped notation "sf" n:60 => Nat.superFactorial n
Mathlib/Data/Nat/Totient.lean:scoped notation "φ" => Nat.totient
Mathlib/Data/Rat/NNRat.lean:scoped[NNRat] notation "ℚ≥0" => NNRat
Mathlib/Data/Sym/Basic.lean:scoped notation a " :: " b => cons' a b
Mathlib/Data/Real/ENNReal.lean:scoped[ENNReal] notation "ℝ≥0∞" => ENNReal
Mathlib/Data/Real/ENNReal.lean:scoped[ENNReal] notation "∞" => (⊤ : ENNReal)
Mathlib/Data/Real/NNReal.lean:scoped notation "ℝ≥0" => NNReal
Mathlib/Data/Set/Intervals/UnorderedInterval.lean:scoped[Interval] notation "[[" a ", " b "]]" => Set.uIcc a b
Mathlib/Data/Vector3.lean:scoped notation a " :: " b => cons a b
Mathlib/Data/Bundle.lean:scoped notation:max "π" F':max E':max => Bundle.TotalSpace.proj (F := F') (E := E')
Mathlib/Data/List/Func.lean:scoped notation as " {" m " ↦ " a "}" => List.Func.set a as m
Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.lean:scoped notation μ "[" f "|" m "]" => MeasureTheory.condexp m μ f
Mathlib/MeasureTheory/Function/LpSpace.lean:scoped notation:25 α' " →₁[" μ "] " E => MeasureTheory.Lp (α := α') E 1 μ
Mathlib/MeasureTheory/Function/LpSpace.lean:scoped notation:25 α' " →₂[" μ "] " E => MeasureTheory.Lp (α := α') E 2 μ
Mathlib/MeasureTheory/Function/StronglyMeasurable/Basic.lean:scoped notation "StronglyMeasurable[" m "]" => @MeasureTheory.StronglyMeasurable _ _ _ m
Mathlib/MeasureTheory/MeasurableSpace/Defs.lean:scoped notation "MeasurableSet[" m "]" => @MeasurableSet _ m
Mathlib/MeasureTheory/MeasurableSpace/Defs.lean:scoped notation "Measurable[" m "]" => @Measurable _ _ m _
Mathlib/MeasureTheory/Measure/Hausdorff.lean:scoped[MeasureTheory] notation "μH[" d "]" => MeasureTheory.Measure.hausdorffMeasure d
Mathlib/Order/Filter/Basic.lean:scoped notation "𝓟" => Filter.principal
Mathlib/Order/LocallyFinite.lean:scoped[FinsetInterval] notation "[[" a ", " b "]]" => Finset.uIcc a b
Mathlib/Analysis/Complex/UnitDisc/Basic.lean:scoped[UnitDisc] notation "𝔻" => Complex.UnitDisc
Mathlib/Analysis/Complex/UpperHalfPlane/Basic.lean:scoped[UpperHalfPlane] notation "ℍ" => UpperHalfPlane
Mathlib/Analysis/InnerProductSpace/Basic.lean:scoped[RealInnerProductSpace] notation "⟪" x ", " y "⟫" => @inner ℝ _ _ x y
Mathlib/Analysis/InnerProductSpace/Basic.lean:scoped[ComplexInnerProductSpace] notation "⟪" x ", " y "⟫" => @inner ℂ _ _ x y
Mathlib/Analysis/BoxIntegral/Partition/Additive.lean:scoped notation:25 ι " →ᵇᵃ " M => BoxIntegral.BoxAdditiveMap ι M ⊤
Mathlib/Analysis/BoxIntegral/Partition/Additive.lean:scoped notation:25 ι " →ᵇᵃ[" I "] " M => BoxIntegral.BoxAdditiveMap ι M I
Mathlib/Analysis/Distribution/SchwartzSpace.lean:scoped[SchwartzSpace] notation "𝓢(" E ", " F ")" => SchwartzMap E F
Mathlib/Analysis/Fourier/FourierTransform.lean:scoped[FourierTransform] notation e "[" x "]" => (e (Multiplicative.ofAdd x) : ℂ)
Mathlib/Analysis/Fourier/FourierTransform.lean:scoped[FourierTransform] notation "𝓕" => Real.fourierIntegral
Mathlib/Analysis/Convolution.lean:scoped[Convolution] notation:67 f " ⋆[" L:67 ", " μ:67 "] " g:66 => convolution f g L μ
Mathlib/Analysis/Calculus/Gradient/Basic.lean:scoped[Gradient] notation "∇" => gradient
Mathlib/Analysis/NormedSpace/Star/Multiplier.lean:scoped[MultiplierAlgebra] notation "𝓜(" 𝕜 ", " A ")" => DoubleCentralizer 𝕜 A
Mathlib/Analysis/NormedSpace/lpSpace.lean:scoped[lp] notation "ℓ^∞(" ι ", " E ")" => lp (fun i : ι => E) ∞
Mathlib/Analysis/NormedSpace/lpSpace.lean:scoped[lp] notation "ℓ^∞(" ι ")" => lp (fun i : ι => ℝ) ∞
Mathlib/Analysis/SpecialFunctions/Trigonometric/Basic.lean:scoped notation "π" => Real.pi
Mathlib/Analysis/Quaternion.lean:scoped[Quaternion] notation "ℍ" => Quaternion ℝ
Mathlib/Analysis/Convex/Segment.lean:scoped[Convex] notation (priority := high) "[" x "-[" 𝕜 "]" y "]" => segment 𝕜 x y
Mathlib/Analysis/Asymptotics/AsymptoticEquivalent.lean:scoped notation:50 u " ~[" l:50 "] " v:50 => Asymptotics.IsEquivalent l u v
Mathlib/Dynamics/OmegaLimit.lean:scoped[omegaLimit] notation "ω" => omegaLimit
Mathlib/Dynamics/OmegaLimit.lean:scoped[omegaLimit] notation "ω⁺" => omegaLimit Filter.atTop
Mathlib/Dynamics/OmegaLimit.lean:scoped[omegaLimit] notation "ω⁻" => omegaLimit Filter.atBot
Mathlib/Geometry/Euclidean/Angle/Oriented/Affine.lean:scoped notation "∡" => EuclideanGeometry.oangle
Mathlib/Geometry/Euclidean/Angle/Unoriented/Affine.lean:scoped notation "∠" => EuclideanGeometry.angle
Mathlib/Geometry/Manifold/Diffeomorph.lean:scoped[Manifold] notation M " ≃ₘ^" n:1000 "⟮" I ", " J "⟯ " N => Diffeomorph I J M N n
Mathlib/Geometry/Manifold/Diffeomorph.lean:scoped[Manifold] notation M " ≃ₘ⟮" I ", " J "⟯ " N => Diffeomorph I J M N ⊤
Mathlib/Geometry/Manifold/Algebra/Monoid.lean:scoped[LieGroup] notation "𝑳" => smoothLeftMul
Mathlib/Geometry/Manifold/Algebra/Monoid.lean:scoped[LieGroup] notation "𝑹" => smoothRightMul
Mathlib/Geometry/Manifold/VectorBundle/SmoothSection.lean:scoped[Manifold] notation "Cₛ^" n "⟮" I "; " F ", " V "⟯" => ContMDiffSection I F n V
Mathlib/Geometry/Manifold/DerivationBundle.lean:scoped[Derivation] notation "C^" n "⟮" I ", " M "; " 𝕜 "⟯⟨" x "⟩" => PointedSmoothMap 𝕜 I M n x
Mathlib/Geometry/Manifold/DerivationBundle.lean:scoped[Manifold] notation "𝒅" => fdifferential
Mathlib/Geometry/Manifold/DerivationBundle.lean:scoped[Manifold] notation "𝒅ₕ" => hfdifferential
Mathlib/Geometry/Manifold/ContMDiffMap.lean:scoped[Manifold] notation "C^" n "⟮" I ", " M "; " I' ", " M' "⟯" => ContMDiffMap I I' M M' n
Mathlib/Geometry/Manifold/SmoothManifoldWithCorners.lean:scoped[Manifold] notation "∞" => (⊤ : ℕ∞)
Mathlib/Geometry/Manifold/SmoothManifoldWithCorners.lean:scoped[Manifold] notation "𝓘(" 𝕜 ", " E ")" => modelWithCornersSelf 𝕜 E
Mathlib/Geometry/Manifold/SmoothManifoldWithCorners.lean:scoped[Manifold] notation "𝓘(" 𝕜 ")" => modelWithCornersSelf 𝕜 𝕜
Mathlib/NumberTheory/LegendreSymbol/JacobiSymbol.lean:scoped[NumberTheorySymbols] notation "J(" a " | " b ")" => jacobiSym a b
Mathlib/NumberTheory/VonMangoldt.lean:scoped[Nat.ArithmeticFunction] notation "Λ" => Nat.ArithmeticFunction.vonMangoldt
Mathlib/NumberTheory/Modular.lean:scoped[Modular] notation "𝒟" => ModularGroup.fd
Mathlib/NumberTheory/Modular.lean:scoped[Modular] notation "𝒟ᵒ" => ModularGroup.fdo
Mathlib/NumberTheory/ModularForms/SlashActions.lean:scoped[ModularForm] notation:100 f " ∣[" k ";" γ "] " a:100 => SlashAction.map γ k a f
Mathlib/NumberTheory/ModularForms/SlashActions.lean:scoped[ModularForm] notation:100 f " ∣[" k "] " a:100 => SlashAction.map ℂ k a f
Mathlib/NumberTheory/ArithmeticFunction.lean:scoped[Nat.ArithmeticFunction] notation "ζ" => Nat.ArithmeticFunction.zeta
Mathlib/NumberTheory/ArithmeticFunction.lean:scoped[Nat.ArithmeticFunction] notation "σ" => Nat.ArithmeticFunction.sigma
Mathlib/NumberTheory/ArithmeticFunction.lean:scoped[Nat.ArithmeticFunction] notation "Ω" => Nat.ArithmeticFunction.cardFactors
Mathlib/NumberTheory/ArithmeticFunction.lean:scoped[Nat.ArithmeticFunction] notation "ω" => Nat.ArithmeticFunction.cardDistinctFactors
Mathlib/NumberTheory/ArithmeticFunction.lean:scoped[Nat.ArithmeticFunction] notation "μ" => Nat.ArithmeticFunction.moebius
Mathlib/NumberTheory/Dioph.lean:scoped notation:35 x " D∧ " y => Dioph.inter x y
Mathlib/NumberTheory/Dioph.lean:scoped notation:35 x " D∨ " y => Dioph.union x y
Mathlib/NumberTheory/Dioph.lean:scoped notation:30 "D∃" => Dioph.vec_ex1_dioph
Mathlib/NumberTheory/Dioph.lean:scoped notation " D≡ " => Dioph.modEq_dioph
Mathlib/NumberTheory/PrimeCounting.lean:scoped notation "π" => Nat.primeCounting
Mathlib/NumberTheory/PrimeCounting.lean:scoped notation "π'" => Nat.primeCounting'
Mathlib/NumberTheory/NumberField/Basic.lean:scoped notation "𝓞" => NumberField.ringOfIntegers
