[{"name":"sub_lt_zero","kind":"theorem","statement":"theorem sub_lt_zero {α : Type u} [add_group α] [has_lt α] [covariant_class α α (function.swap has_add.add) has_lt.lt] {a b : α} : a - b < 0 ↔ a < b","theorem":"{α : Type u} [add_group α] [has_lt α] [covariant_class α α (function.swap has_add.add) has_lt.lt] {a b : α} : a - b < 0 ↔ a < b","args":"{α : Type u} [add_group α] [has_lt α] [covariant_class α α (function.swap has_add.add) has_lt.lt] {a b : α}","doc_string":"**Alias** of sub_neg`.","type":"a - b < 0 ↔ a < b"},{"name":"add_units.is_add_regular","kind":"theorem","statement":"theorem add_units.is_add_regular {R : Type u_1} [add_monoid R] (a : add_units R) : is_add_regular ↑a","theorem":"{R : Type u_1} [add_monoid R] (a : add_units R) : is_add_regular ↑a","args":"{R : Type u_1} [add_monoid R] (a : add_units R)","doc_string":"If `R` is an additive monoid, an element in `add_units R` is add-regular.","type":"is_add_regular ↑a"},{"name":"exists_prime_add_order_of_dvd_card","kind":"theorem","statement":"theorem exists_prime_add_order_of_dvd_card {G : Type u_1} [add_group G] [fintype G] (p : ℕ) [hp : fact (nat.prime p)] (hdvd : p ∣ fintype.card G) : ∃ (x : G), add_order_of x = p","theorem":"{G : Type u_1} [add_group G] [fintype G] (p : ℕ) [hp : fact (nat.prime p)] (hdvd : p ∣ fintype.card G) : ∃ (x : G), add_order_of x = p","args":"{G : Type u_1} [add_group G] [fintype G] (p : ℕ) [hp : fact (nat.prime p)] (hdvd : p ∣ fintype.card G)","doc_string":" For every prime `p` dividing the order of a finite additive group `G` there exists an element of order `p` in `G`. This is the additive version of Cauchy's theorem.","type":"∃ (x : G), add_order_of x = p"},{"name":"lt_add_of_sub_right_lt","kind":"theorem","statement":"theorem lt_add_of_sub_right_lt {α : Type u} [add_group α] [has_lt α] [covariant_class α α (function.swap has_add.add) has_lt.lt] {a b c : α} : a - c < b → a < b + c","theorem":"{α : Type u} [add_group α] [has_lt α] [covariant_class α α (function.swap has_add.add) has_lt.lt] {a b c : α} : a - c < b → a < b + c","args":"{α : Type u} [add_group α] [has_lt α] [covariant_class α α (function.swap has_add.add) has_lt.lt] {a b c : α}","doc_string":"**Alias** of the forward direction of sub_lt_iff_lt_add`.","type":"a - c < b → a < b + c"},{"name":"continuous.fst'","kind":"theorem","statement":"theorem continuous.fst' {α : Type u} {β : Type v} {γ : Type u_1} [topological_space α] [topological_space β] [topological_space γ] {f : α → γ} (hf : continuous f) : continuous (λ (x : α × β), f x.fst)","theorem":"{α : Type u} {β : Type v} {γ : Type u_1} [topological_space α] [topological_space β] [topological_space γ] {f : α → γ} (hf : continuous f) : continuous (λ (x : α × β), f x.fst)","args":"{α : Type u} {β : Type v} {γ : Type u_1} [topological_space α] [topological_space β] [topological_space γ] {f : α → γ} (hf : continuous f)","doc_string":"Precomposing `f` with `prod.fst` is continuous","type":"continuous (λ (x : α × β), f x.fst)"},{"name":"ennreal.coe_sub","kind":"theorem","statement":"theorem ennreal.coe_sub {r p : nnreal} : ↑(r - p) = ↑r - ↑p","theorem":"{r p : nnreal} : ↑(r - p) = ↑r - ↑p","args":"{r p : nnreal}","doc_string":"This is a special case of `with_top.coe_sub` in the `ennreal` namespace","type":"↑(r - p) = ↑r - ↑p"},{"name":"descending_central_series_ge_lower","kind":"theorem","statement":"theorem descending_central_series_ge_lower {G : Type u_1} [group G] (H : ℕ → subgroup G) (hH : is_descending_central_series H) (n : ℕ) : lower_central_series G n ≤ H n","theorem":"{G : Type u_1} [group G] (H : ℕ → subgroup G) (hH : is_descending_central_series H) (n : ℕ) : lower_central_series G n ≤ H n","args":"{G : Type u_1} [group G] (H : ℕ → subgroup G) (hH : is_descending_central_series H) (n : ℕ)","doc_string":"Any descending central series for a group is bounded below by the lower central series.","type":"lower_central_series G n ≤ H n"},{"name":"antitone.ne_of_lt_of_lt_int","kind":"theorem","statement":"theorem antitone.ne_of_lt_of_lt_int {α : Type u} [preorder α] {f : ℤ → α} (hf : antitone f) (n : ℤ) {x : α} (h1 : f (n + 1) < x) (h2 : x < f n) (a : ℤ) : f a ≠ x","theorem":"{α : Type u} [preorder α] {f : ℤ → α} (hf : antitone f) (n : ℤ) {x : α} (h1 : f (n + 1) < x) (h2 : x < f n) (a : ℤ) : f a ≠ x","args":"{α : Type u} [preorder α] {f : ℤ → α} (hf : antitone f) (n : ℤ) {x : α} (h1 : f (n + 1) < x) (h2 : x < f n) (a : ℤ)","doc_string":" If `f` is an antitone function from `ℤ` to a preorder and `x` lies between `f (n + 1)` and `f n`, then `x` doesn't lie in the range of `f`.","type":"f a ≠ x"},{"name":"subgroup.inv_mem","kind":"theorem","statement":"theorem subgroup.inv_mem {G : Type u_1} [group G] (H : subgroup G) {x : G} : x ∈ H → x⁻¹ ∈ H","theorem":"{G : Type u_1} [group G] (H : subgroup G) {x : G} : x ∈ H → x⁻¹ ∈ H","args":"{G : Type u_1} [group G] (H : subgroup G) {x : G}","doc_string":"A subgroup is closed under inverse.","type":"x ∈ H → x⁻¹ ∈ H"},{"name":"real.sq_cos_pi_div_six","kind":"theorem","statement":"theorem real.sq_cos_pi_div_six  : real.cos (real.pi / 6) ^ 2 = 3 / 4","theorem":" : real.cos (real.pi / 6) ^ 2 = 3 / 4","args":"","doc_string":" The square of the cosine of `π / 6` is `3 / 4` (this is sometimes more convenient than the result for cosine itself).","type":"real.cos (real.pi / 6) ^ 2 = 3 / 4"},{"name":"function.injective2.left","kind":"theorem","statement":"theorem function.injective2.left {α : Sort u_1} {β : Sort u_2} {γ : Sort u_3} {f : α → β → γ} (hf : function.injective2 f) (b : β) : function.injective (λ (a : α), f a b)","theorem":"{α : Sort u_1} {β : Sort u_2} {γ : Sort u_3} {f : α → β → γ} (hf : function.injective2 f) (b : β) : function.injective (λ (a : α), f a b)","args":"{α : Sort u_1} {β : Sort u_2} {γ : Sort u_3} {f : α → β → γ} (hf : function.injective2 f) (b : β)","doc_string":"A binary injective function is injective when only the left argument varies.","type":"function.injective (λ (a : α), f a b)"},{"name":"function.is_periodic_pt_zero","kind":"theorem","statement":"theorem function.is_periodic_pt_zero {α : Type u_1} (f : α → α) (x : α) : function.is_periodic_pt f 0 x","theorem":"{α : Type u_1} (f : α → α) (x : α) : function.is_periodic_pt f 0 x","args":"{α : Type u_1} (f : α → α) (x : α)","doc_string":"Any point is a periodic point of period `0`.","type":"function.is_periodic_pt f 0 x"},{"name":"function.injective.exists_ne","kind":"theorem","statement":"theorem function.injective.exists_ne {α : Type u_1} {β : Type u_2} [nontrivial α] {f : α → β} (hf : function.injective f) (y : β) : ∃ (x : α), f x ≠ y","theorem":"{α : Type u_1} {β : Type u_2} [nontrivial α] {f : α → β} (hf : function.injective f) (y : β) : ∃ (x : α), f x ≠ y","args":"{α : Type u_1} {β : Type u_2} [nontrivial α] {f : α → β} (hf : function.injective f) (y : β)","doc_string":" An injective function from a nontrivial type has an argument at which it does not take a given value.","type":"∃ (x : α), f x ≠ y"},{"name":"multiples.is_add_submonoid","kind":"theorem","statement":"theorem multiples.is_add_submonoid {M : Type u_1} [add_monoid M] (x : M) : is_add_submonoid (multiples x)","theorem":"{M : Type u_1} [add_monoid M] (x : M) : is_add_submonoid (multiples x)","args":"{M : Type u_1} [add_monoid M] (x : M)","doc_string":"The set of natural number multiples of an element of an `add_monoid` `M` is an `add_submonoid` of `M`.","type":"is_add_submonoid (multiples x)"},{"name":"is_open_map.to_quotient_map","kind":"theorem","statement":"theorem is_open_map.to_quotient_map {α : Type u_1} {β : Type u_2} [topological_space α] [topological_space β] {f : α → β} (open_map : is_open_map f) (cont : continuous f) (surj : function.surjective f) : quotient_map f","theorem":"{α : Type u_1} {β : Type u_2} [topological_space α] [topological_space β] {f : α → β} (open_map : is_open_map f) (cont : continuous f) (surj : function.surjective f) : quotient_map f","args":"{α : Type u_1} {β : Type u_2} [topological_space α] [topological_space β] {f : α → β} (open_map : is_open_map f) (cont : continuous f) (surj : function.surjective f)","doc_string":"A continuous surjective open map is a quotient map.","type":"quotient_map f"},{"name":"cardinal.ord_card_unbounded'","kind":"theorem","statement":"theorem cardinal.ord_card_unbounded'  : set.unbounded has_lt.lt {b : ordinal | b.card.ord = b ∧ ordinal.omega ≤ b}","theorem":" : set.unbounded has_lt.lt {b : ordinal | b.card.ord = b ∧ ordinal.omega ≤ b}","args":"","doc_string":"Infinite ordinals that are cardinals are unbounded.","type":"set.unbounded has_lt.lt {b : ordinal | b.card.ord = b ∧ ordinal.omega ≤ b}"},{"name":"nat.of_digits_lt_base_pow_length'","kind":"theorem","statement":"theorem nat.of_digits_lt_base_pow_length' {b : ℕ} {l : list ℕ} (hl : ∀ (x : ℕ), x ∈ l → x < b + 2) : nat.of_digits (b + 2) l < (b + 2) ^ l.length","theorem":"{b : ℕ} {l : list ℕ} (hl : ∀ (x : ℕ), x ∈ l → x < b + 2) : nat.of_digits (b + 2) l < (b + 2) ^ l.length","args":"{b : ℕ} {l : list ℕ} (hl : ∀ (x : ℕ), x ∈ l → x < b + 2)","doc_string":"an n-digit number in base b + 2 is less than (b + 2)^n","type":"nat.of_digits (b + 2) l < (b + 2) ^ l.length"},{"name":"nat.odd_mod_four_iff","kind":"theorem","statement":"theorem nat.odd_mod_four_iff {n : ℕ} : n % 2 = 1 ↔ n % 4 = 1 ∨ n % 4 = 3","theorem":"{n : ℕ} : n % 2 = 1 ↔ n % 4 = 1 ∨ n % 4 = 3","args":"{n : ℕ}","doc_string":"A natural number is odd iff it has residue `1` or `3` mod `4`","type":"n % 2 = 1 ↔ n % 4 = 1 ∨ n % 4 = 3"},{"name":"add_subsemigroup.subset_closure","kind":"theorem","statement":"theorem add_subsemigroup.subset_closure {M : Type u_1} [has_add M] {s : set M} : s ⊆ ↑(add_subsemigroup.closure s)","theorem":"{M : Type u_1} [has_add M] {s : set M} : s ⊆ ↑(add_subsemigroup.closure s)","args":"{M : Type u_1} [has_add M] {s : set M}","doc_string":"The `add_subsemigroup` generated by a set includes the set.","type":"s ⊆ ↑(add_subsemigroup.closure s)"},{"name":"is_monoid_hom.inv","kind":"theorem","statement":"theorem is_monoid_hom.inv {α : Type u_1} {β : Type u_2} [mul_one_class α] [comm_group β] {f : α → β} (hf : is_monoid_hom f) : is_monoid_hom (λ (a : α), (f a)⁻¹)","theorem":"{α : Type u_1} {β : Type u_2} [mul_one_class α] [comm_group β] {f : α → β} (hf : is_monoid_hom f) : is_monoid_hom (λ (a : α), (f a)⁻¹)","args":"{α : Type u_1} {β : Type u_2} [mul_one_class α] [comm_group β] {f : α → β} (hf : is_monoid_hom f)","doc_string":" The inverse of a map which preserves multiplication, preserves multiplication when the target is commutative.","type":"is_monoid_hom (λ (a : α), (f a)⁻¹)"},{"name":"category_theory.limits.has_biproduct.of_has_product","kind":"theorem","statement":"theorem category_theory.limits.has_biproduct.of_has_product {C : Type u} [category_theory.category C] [category_theory.preadditive C] {J : Type v} [fintype J] (f : J → C) [category_theory.limits.has_product f] : category_theory.limits.has_biproduct f","theorem":"{C : Type u} [category_theory.category C] [category_theory.preadditive C] {J : Type v} [fintype J] (f : J → C) [category_theory.limits.has_product f] : category_theory.limits.has_biproduct f","args":"{C : Type u} [category_theory.category C] [category_theory.preadditive C] {J : Type v} [fintype J] (f : J → C) [category_theory.limits.has_product f]","doc_string":"In a preadditive category, if the product over `f : J → C` exists,    then the biproduct over `f` exists.","type":"category_theory.limits.has_biproduct f"},{"name":"right.one_lt_inv_iff","kind":"theorem","statement":"theorem right.one_lt_inv_iff {α : Type u} [group α] [has_lt α] [covariant_class α α (function.swap has_mul.mul) has_lt.lt] {a : α} : 1 < a⁻¹ ↔ a < 1","theorem":"{α : Type u} [group α] [has_lt α] [covariant_class α α (function.swap has_mul.mul) has_lt.lt] {a : α} : 1 < a⁻¹ ↔ a < 1","args":"{α : Type u} [group α] [has_lt α] [covariant_class α α (function.swap has_mul.mul) has_lt.lt] {a : α}","doc_string":"Uses `right` co(ntra)variant.","type":"1 < a⁻¹ ↔ a < 1"},{"name":"dvd_add_self_left","kind":"theorem","statement":"theorem dvd_add_self_left {α : Type u} [ring α] {a b : α} : a ∣ a + b ↔ a ∣ b","theorem":"{α : Type u} [ring α] {a b : α} : a ∣ a + b ↔ a ∣ b","args":"{α : Type u} [ring α] {a b : α}","doc_string":"An element a divides the sum a + b if and only if a divides b.","type":"a ∣ a + b ↔ a ∣ b"},{"name":"erased.out_proof","kind":"theorem","statement":"theorem erased.out_proof {p : Prop} (a : erased p) : p","theorem":"{p : Prop} (a : erased p) : p","args":"{p : Prop} (a : erased p)","doc_string":"Extracts the erased value, if it is a proof.","type":"p"},{"name":"division_def","kind":"theorem","statement":"theorem division_def {G : Type u_1} [div_inv_monoid G] (a b : G) : a / b = a * b⁻¹","theorem":"{G : Type u_1} [div_inv_monoid G] (a b : G) : a / b = a * b⁻¹","args":"{G : Type u_1} [div_inv_monoid G] (a b : G)","doc_string":"**Alias** of div_eq_mul_inv`.","type":"a / b = a * b⁻¹"},{"name":"int.nat_abs_pow_two","kind":"theorem","statement":"theorem int.nat_abs_pow_two (x : ℤ) : ↑(x.nat_abs) ^ 2 = x ^ 2","theorem":"(x : ℤ) : ↑(x.nat_abs) ^ 2 = x ^ 2","args":"(x : ℤ)","doc_string":"**Alias** of int.nat_abs_sq`.","type":"↑(x.nat_abs) ^ 2 = x ^ 2"},{"name":"real.sin_pi_div_six","kind":"theorem","statement":"theorem real.sin_pi_div_six  : real.sin (real.pi / 6) = 1 / 2","theorem":" : real.sin (real.pi / 6) = 1 / 2","args":"","doc_string":"The sine of `π / 6` is `1 / 2`.","type":"real.sin (real.pi / 6) = 1 / 2"},{"name":"function.maps_to_fixed_pts_comp","kind":"theorem","statement":"theorem function.maps_to_fixed_pts_comp {α : Type u} {β : Type v} (f : α → β) (g : β → α) : set.maps_to f (function.fixed_points (g ∘ f)) (function.fixed_points (f ∘ g))","theorem":"{α : Type u} {β : Type v} (f : α → β) (g : β → α) : set.maps_to f (function.fixed_points (g ∘ f)) (function.fixed_points (f ∘ g))","args":"{α : Type u} {β : Type v} (f : α → β) (g : β → α)","doc_string":"Any map `f` sends fixed points of `g ∘ f` to fixed points of `f ∘ g`.","type":"set.maps_to f (function.fixed_points (g ∘ f)) (function.fixed_points (f ∘ g))"},{"name":"category_theory.limits.has_binary_biproducts_of_finite_biproducts","kind":"theorem","statement":"theorem category_theory.limits.has_binary_biproducts_of_finite_biproducts (C : Type u) [category_theory.category C] [category_theory.limits.has_zero_morphisms C] [category_theory.limits.has_finite_biproducts C] : category_theory.limits.has_binary_biproducts C","theorem":"(C : Type u) [category_theory.category C] [category_theory.limits.has_zero_morphisms C] [category_theory.limits.has_finite_biproducts C] : category_theory.limits.has_binary_biproducts C","args":"(C : Type u) [category_theory.category C] [category_theory.limits.has_zero_morphisms C] [category_theory.limits.has_finite_biproducts C]","doc_string":"A category with finite biproducts has binary biproducts.  This is not an instance as typically in concrete categories there will be an alternative construction with nicer definitional properties.","type":"category_theory.limits.has_binary_biproducts C"},{"name":"add_lt_of_lt_neg_add","kind":"theorem","statement":"theorem add_lt_of_lt_neg_add {α : Type u} [add_group α] [has_lt α] [covariant_class α α has_add.add has_lt.lt] {a b c : α} : b < -a + c → a + b < c","theorem":"{α : Type u} [add_group α] [has_lt α] [covariant_class α α has_add.add has_lt.lt] {a b c : α} : b < -a + c → a + b < c","args":"{α : Type u} [add_group α] [has_lt α] [covariant_class α α has_add.add has_lt.lt] {a b c : α}","doc_string":"**Alias** of the forward direction of lt_inv_mul_iff_mul_lt`.","type":"b < -a + c → a + b < c"},{"name":"le_refl","kind":"theorem","statement":"theorem le_refl {α : Type u} [preorder α] (a : α) : a ≤ a","theorem":"{α : Type u} [preorder α] (a : α) : a ≤ a","args":"{α : Type u} [preorder α] (a : α)","doc_string":"The relation `≤` on a preorder is reflexive.","type":"a ≤ a"},{"name":"real.tendsto_exp_neg_at_top_nhds_0","kind":"theorem","statement":"theorem real.tendsto_exp_neg_at_top_nhds_0  : filter.tendsto (λ (x : ℝ), real.exp (-x)) filter.at_top (nhds 0)","theorem":" : filter.tendsto (λ (x : ℝ), real.exp (-x)) filter.at_top (nhds 0)","args":"","doc_string":" The real exponential function tends to `0` at `-∞` or, equivalently, `exp(-x)` tends to `0` at `+∞`","type":"filter.tendsto (λ (x : ℝ), real.exp (-x)) filter.at_top (nhds 0)"},{"name":"eq.ge","kind":"theorem","statement":"theorem eq.ge {α : Type u} [preorder α] {x y : α} (h : x = y) : y ≤ x","theorem":"{α : Type u} [preorder α] {x y : α} (h : x = y) : y ≤ x","args":"{α : Type u} [preorder α] {x y : α} (h : x = y)","doc_string":" If `x = y` then `y ≤ x`. Note: this lemma uses `y ≤ x` instead of `x ≥ y`, because `le` is used almost exclusively in mathlib.","type":"y ≤ x"},{"name":"eq.le","kind":"theorem","statement":"theorem eq.le {α : Type u} [preorder α] {a b : α} : a = b → a ≤ b","theorem":"{α : Type u} [preorder α] {a b : α} : a = b → a ≤ b","args":"{α : Type u} [preorder α] {a b : α}","doc_string":"**Alias** of le_of_eq`.","type":"a = b → a ≤ b"},{"name":"pythagorean_triple.mul","kind":"theorem","statement":"theorem pythagorean_triple.mul {x y z : ℤ} (h : pythagorean_triple x y z) (k : ℤ) : pythagorean_triple (k * x) (k * y) (k * z)","theorem":"{x y z : ℤ} (h : pythagorean_triple x y z) (k : ℤ) : pythagorean_triple (k * x) (k * y) (k * z)","args":"{x y z : ℤ} (h : pythagorean_triple x y z) (k : ℤ)","doc_string":" A triple is still a triple if you multiply `x`, `y` and `z` by a constant `k`.","type":"pythagorean_triple (k * x) (k * y) (k * z)"},{"name":"is_max.succ_eq","kind":"theorem","statement":"theorem is_max.succ_eq {α : Type u_1} [partial_order α] [succ_order α] {a : α} : is_max a → order.succ a = a","theorem":"{α : Type u_1} [partial_order α] [succ_order α] {a : α} : is_max a → order.succ a = a","args":"{α : Type u_1} [partial_order α] [succ_order α] {a : α}","doc_string":"**Alias** of the reverse direction of order.succ_eq_iff_is_max`.","type":"is_max a → order.succ a = a"},{"name":"category_theory.abelian.pseudoelement.pseudo_zero_iff","kind":"theorem","statement":"theorem category_theory.abelian.pseudoelement.pseudo_zero_iff {C : Type u} [category_theory.category C] [category_theory.abelian C] {P : C} (a : category_theory.over P) : ↑a = 0 ↔ a.hom = 0","theorem":"{C : Type u} [category_theory.category C] [category_theory.abelian C] {P : C} (a : category_theory.over P) : ↑a = 0 ↔ a.hom = 0","args":"{C : Type u} [category_theory.category C] [category_theory.abelian C] {P : C} (a : category_theory.over P)","doc_string":"The pseudoelement induced by an arrow is zero precisely when that arrow is zero","type":"↑a = 0 ↔ a.hom = 0"},{"name":"and_or_distrib_left","kind":"theorem","statement":"theorem and_or_distrib_left {a b c : Prop} : a ∧ (b ∨ c) ↔ a ∧ b ∨ a ∧ c","theorem":"{a b c : Prop} : a ∧ (b ∨ c) ↔ a ∧ b ∨ a ∧ c","args":"{a b c : Prop}","doc_string":"`∧` distributes over `∨` (on the left).","type":"a ∧ (b ∨ c) ↔ a ∧ b ∨ a ∧ c"},{"name":"set.antitone_bforall","kind":"theorem","statement":"theorem set.antitone_bforall {α : Type u_1} {P : α → Prop} : antitone (λ (s : set α), ∀ (x : α), x ∈ s → P x)","theorem":"{α : Type u_1} {P : α → Prop} : antitone (λ (s : set α), ∀ (x : α), x ∈ s → P x)","args":"{α : Type u_1} {P : α → Prop}","doc_string":"Quantifying over a set is antitone in the set","type":"antitone (λ (s : set α), ∀ (x : α), x ∈ s → P x)"},{"name":"has_lt.lt.trans'","kind":"theorem","statement":"theorem has_lt.lt.trans' {α : Type u} [preorder α] {a b c : α} : b < c → a < b → a < c","theorem":"{α : Type u} [preorder α] {a b c : α} : b < c → a < b → a < c","args":"{α : Type u} [preorder α] {a b c : α}","doc_string":"**Alias** of lt_trans'`.","type":"b < c → a < b → a < c"},{"name":"submonoid.closure_eq","kind":"theorem","statement":"theorem submonoid.closure_eq {M : Type u_1} [mul_one_class M] (S : submonoid M) : submonoid.closure ↑S = S","theorem":"{M : Type u_1} [mul_one_class M] (S : submonoid M) : submonoid.closure ↑S = S","args":"{M : Type u_1} [mul_one_class M] (S : submonoid M)","doc_string":"Closure of a submonoid `S` equals `S`.","type":"submonoid.closure ↑S = S"},{"name":"le_trans","kind":"theorem","statement":"theorem le_trans {α : Type u} [preorder α] {a b c : α} : a ≤ b → b ≤ c → a ≤ c","theorem":"{α : Type u} [preorder α] {a b c : α} : a ≤ b → b ≤ c → a ≤ c","args":"{α : Type u} [preorder α] {a b c : α}","doc_string":"The relation `≤` on a preorder is transitive.","type":"a ≤ b → b ≤ c → a ≤ c"},{"name":"add_nonpos","kind":"theorem","statement":"theorem add_nonpos {α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α has_add.add has_le.le] {a b : α} (ha : a ≤ 0) (hb : b ≤ 0) : a + b ≤ 0","theorem":"{α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α has_add.add has_le.le] {a b : α} (ha : a ≤ 0) (hb : b ≤ 0) : a + b ≤ 0","args":"{α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α has_add.add has_le.le] {a b : α} (ha : a ≤ 0) (hb : b ≤ 0)","doc_string":"**Alias** of `left.add_nonpos`.","type":"a + b ≤ 0"},{"name":"has_lt.lt.asymm","kind":"theorem","statement":"theorem has_lt.lt.asymm {α : Type u} [preorder α] {a b : α} (h : a < b) : ¬b < a","theorem":"{α : Type u} [preorder α] {a b : α} (h : a < b) : ¬b < a","args":"{α : Type u} [preorder α] {a b : α} (h : a < b)","doc_string":"**Alias** of lt_asymm`.","type":"¬b < a"},{"name":"add_commute.is_of_fin_order_add","kind":"theorem","statement":"theorem add_commute.is_of_fin_order_add {G : Type u} {y : G} [add_monoid G] {x : G} (h : add_commute x y) (hx : is_of_fin_add_order x) (hy : is_of_fin_add_order y) : is_of_fin_add_order (x + y)","theorem":"{G : Type u} {y : G} [add_monoid G] {x : G} (h : add_commute x y) (hx : is_of_fin_add_order x) (hy : is_of_fin_add_order y) : is_of_fin_add_order (x + y)","args":"{G : Type u} {y : G} [add_monoid G] {x : G} (h : add_commute x y) (hx : is_of_fin_add_order x) (hy : is_of_fin_add_order y)","doc_string":"Commuting elements of finite additive order are closed under addition.","type":"is_of_fin_add_order (x + y)"},{"name":"add_subsemigroup.ext","kind":"theorem","statement":"theorem add_subsemigroup.ext {M : Type u_1} [has_add M] {S T : add_subsemigroup M} (h : ∀ (x : M), x ∈ S ↔ x ∈ T) : S = T","theorem":"{M : Type u_1} [has_add M] {S T : add_subsemigroup M} (h : ∀ (x : M), x ∈ S ↔ x ∈ T) : S = T","args":"{M : Type u_1} [has_add M] {S T : add_subsemigroup M} (h : ∀ (x : M), x ∈ S ↔ x ∈ T)","doc_string":"Two `add_subsemigroup`s are equal if they have the same elements.","type":"S = T"},{"name":"has_le.le.lt_of_ne","kind":"theorem","statement":"theorem has_le.le.lt_of_ne {α : Type u} [partial_order α] {a b : α} : a ≤ b → a ≠ b → a < b","theorem":"{α : Type u} [partial_order α] {a b : α} : a ≤ b → a ≠ b → a < b","args":"{α : Type u} [partial_order α] {a b : α}","doc_string":"**Alias** of lt_of_le_of_ne`.","type":"a ≤ b → a ≠ b → a < b"},{"name":"right.add_pos_of_nonneg_of_pos","kind":"theorem","statement":"theorem right.add_pos_of_nonneg_of_pos {α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α (function.swap has_add.add) has_le.le] {a b : α} (ha : 0 ≤ a) (hb : 0 < b) : 0 < a + b","theorem":"{α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α (function.swap has_add.add) has_le.le] {a b : α} (ha : 0 ≤ a) (hb : 0 < b) : 0 < a + b","args":"{α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α (function.swap has_add.add) has_le.le] {a b : α} (ha : 0 ≤ a) (hb : 0 < b)","doc_string":"Assumes right covariance. The lemma assuming left covariance is `left.add_pos_of_nonneg_of_pos`.","type":"0 < a + b"},{"name":"le_add_of_sub_left_le","kind":"theorem","statement":"theorem le_add_of_sub_left_le {α : Type u} [add_comm_group α] [has_le α] [covariant_class α α has_add.add has_le.le] {a b c : α} : a - b ≤ c → a ≤ b + c","theorem":"{α : Type u} [add_comm_group α] [has_le α] [covariant_class α α has_add.add has_le.le] {a b c : α} : a - b ≤ c → a ≤ b + c","args":"{α : Type u} [add_comm_group α] [has_le α] [covariant_class α α has_add.add has_le.le] {a b c : α}","doc_string":"**Alias** of the forward direction of sub_le_iff_le_add'`.","type":"a - b ≤ c → a ≤ b + c"},{"name":"not_bdd_above_iff","kind":"theorem","statement":"theorem not_bdd_above_iff {α : Type u_1} [linear_order α] {s : set α} : ¬bdd_above s ↔ ∀ (x : α), ∃ (y : α) (H : y ∈ s), x < y","theorem":"{α : Type u_1} [linear_order α] {s : set α} : ¬bdd_above s ↔ ∀ (x : α), ∃ (y : α) (H : y ∈ s), x < y","args":"{α : Type u_1} [linear_order α] {s : set α}","doc_string":" A set `s` is not bounded above if and only if for each `x` there exists `y ∈ s` that is greater than `x`. A version for preorders is called `not_bdd_above_iff'`.","type":"¬bdd_above s ↔ ∀ (x : α), ∃ (y : α) (H : y ∈ s), x < y"},{"name":"matrix.inv_eq_right_inv","kind":"theorem","statement":"theorem matrix.inv_eq_right_inv {n : Type u'} {α : Type v} [fintype n] [decidable_eq n] [comm_ring α] {A B : matrix n n α} (h : A.mul B = 1) : A⁻¹ = B","theorem":"{n : Type u'} {α : Type v} [fintype n] [decidable_eq n] [comm_ring α] {A B : matrix n n α} (h : A.mul B = 1) : A⁻¹ = B","args":"{n : Type u'} {α : Type v} [fintype n] [decidable_eq n] [comm_ring α] {A B : matrix n n α} (h : A.mul B = 1)","doc_string":"If matrix A is right invertible, then its inverse equals its right inverse.","type":"A⁻¹ = B"},{"name":"Compactum_to_CompHaus.ess_surj","kind":"theorem","statement":"theorem Compactum_to_CompHaus.ess_surj  : category_theory.ess_surj Compactum_to_CompHaus","theorem":" : category_theory.ess_surj Compactum_to_CompHaus","args":"","doc_string":"The functor Compactum_to_CompHaus is essentially surjective.","type":"category_theory.ess_surj Compactum_to_CompHaus"},{"name":"add_subgroup.add_mem","kind":"theorem","statement":"theorem add_subgroup.add_mem {G : Type u_1} [add_group G] (H : add_subgroup G) {x y : G} : x ∈ H → y ∈ H → x + y ∈ H","theorem":"{G : Type u_1} [add_group G] (H : add_subgroup G) {x y : G} : x ∈ H → y ∈ H → x + y ∈ H","args":"{G : Type u_1} [add_group G] (H : add_subgroup G) {x y : G}","doc_string":"An `add_subgroup` is closed under addition.","type":"x ∈ H → y ∈ H → x + y ∈ H"},{"name":"con.coe_one","kind":"theorem","statement":"theorem con.coe_one {M : Type u_1} [mul_one_class M] {c : con M} : ↑1 = 1","theorem":"{M : Type u_1} [mul_one_class M] {c : con M} : ↑1 = 1","args":"{M : Type u_1} [mul_one_class M] {c : con M}","doc_string":"The 1 of the quotient of a monoid by a congruence relation is the equivalence class of the    monoid's 1.","type":"↑1 = 1"},{"name":"is_regular.subsingleton","kind":"theorem","statement":"theorem is_regular.subsingleton {R : Type u_1} [mul_zero_class R] (h : is_regular 0) : subsingleton R","theorem":"{R : Type u_1} [mul_zero_class R] (h : is_regular 0) : subsingleton R","args":"{R : Type u_1} [mul_zero_class R] (h : is_regular 0)","doc_string":"The element `0` is regular if and only if `R` is trivial.","type":"subsingleton R"},{"name":"inv_lt_one'","kind":"theorem","statement":"theorem inv_lt_one' {α : Type u} [group α] [has_lt α] [covariant_class α α has_mul.mul has_lt.lt] {a : α} : a⁻¹ < 1 ↔ 1 < a","theorem":"{α : Type u} [group α] [has_lt α] [covariant_class α α has_mul.mul has_lt.lt] {a : α} : a⁻¹ < 1 ↔ 1 < a","args":"{α : Type u} [group α] [has_lt α] [covariant_class α α has_mul.mul has_lt.lt] {a : α}","doc_string":"**Alias** of left.inv_lt_one_iff`.","type":"a⁻¹ < 1 ↔ 1 < a"},{"name":"multiset.nat.antidiagonal_zero","kind":"theorem","statement":"theorem multiset.nat.antidiagonal_zero  : multiset.nat.antidiagonal 0 = {(0, 0)}","theorem":" : multiset.nat.antidiagonal 0 = {(0, 0)}","args":"","doc_string":"The antidiagonal of `0` is the list `[(0, 0)]`","type":"multiset.nat.antidiagonal 0 = {(0, 0)}"},{"name":"well_founded.cut_expand","kind":"theorem","statement":"theorem well_founded.cut_expand {α : Type u_1} {r : α → α → Prop} (hr : well_founded r) : well_founded (relation.cut_expand r)","theorem":"{α : Type u_1} {r : α → α → Prop} (hr : well_founded r) : well_founded (relation.cut_expand r)","args":"{α : Type u_1} {r : α → α → Prop} (hr : well_founded r)","doc_string":"`cut_expand r` is well-founded when `r` is.","type":"well_founded (relation.cut_expand r)"},{"name":"is_group_hom.injective_iff","kind":"theorem","statement":"theorem is_group_hom.injective_iff {α : Type u} {β : Type v} [group α] [group β] {f : α → β} (hf : is_group_hom f) : function.injective f ↔ ∀ (a : α), f a = 1 → a = 1","theorem":"{α : Type u} {β : Type v} [group α] [group β] {f : α → β} (hf : is_group_hom f) : function.injective f ↔ ∀ (a : α), f a = 1 → a = 1","args":"{α : Type u} {β : Type v} [group α] [group β] {f : α → β} (hf : is_group_hom f)","doc_string":"A group homomorphism is injective iff its kernel is trivial.","type":"function.injective f ↔ ∀ (a : α), f a = 1 → a = 1"},{"name":"int.abs_le_self_pow_two","kind":"theorem","statement":"theorem int.abs_le_self_pow_two (a : ℤ) : ↑(a.nat_abs) ≤ a ^ 2","theorem":"(a : ℤ) : ↑(a.nat_abs) ≤ a ^ 2","args":"(a : ℤ)","doc_string":"**Alias** of int.abs_le_self_sq`.","type":"↑(a.nat_abs) ≤ a ^ 2"},{"name":"list.length_pos_of_one_lt_prod","kind":"theorem","statement":"theorem list.length_pos_of_one_lt_prod {M : Type u_3} [monoid M] [preorder M] (L : list M) (h : 1 < L.prod) : 0 < L.length","theorem":"{M : Type u_3} [monoid M] [preorder M] (L : list M) (h : 1 < L.prod) : 0 < L.length","args":"{M : Type u_3} [monoid M] [preorder M] (L : list M) (h : 1 < L.prod)","doc_string":"A list with product greater than one must have positive length.","type":"0 < L.length"},{"name":"is_mul_hom.to_is_monoid_hom","kind":"theorem","statement":"theorem is_mul_hom.to_is_monoid_hom {α : Type u} {β : Type v} [mul_one_class α] [group β] {f : α → β} (hf : is_mul_hom f) : is_monoid_hom f","theorem":"{α : Type u} {β : Type v} [mul_one_class α] [group β] {f : α → β} (hf : is_mul_hom f) : is_monoid_hom f","args":"{α : Type u} {β : Type v} [mul_one_class α] [group β] {f : α → β} (hf : is_mul_hom f)","doc_string":"A map to a group preserving multiplication is a monoid homomorphism.","type":"is_monoid_hom f"},{"name":"neg_add_lt_of_lt_add","kind":"theorem","statement":"theorem neg_add_lt_of_lt_add {α : Type u} [add_group α] [has_lt α] [covariant_class α α has_add.add has_lt.lt] {a b c : α} : a < b + c → -b + a < c","theorem":"{α : Type u} [add_group α] [has_lt α] [covariant_class α α has_add.add has_lt.lt] {a b c : α} : a < b + c → -b + a < c","args":"{α : Type u} [add_group α] [has_lt α] [covariant_class α α has_add.add has_lt.lt] {a b c : α}","doc_string":"**Alias** of the reverse direction of inv_mul_lt_iff_lt_mul`.","type":"a < b + c → -b + a < c"},{"name":"topological_space.dense_range_dense_seq","kind":"theorem","statement":"theorem topological_space.dense_range_dense_seq (α : Type u) [t : topological_space α] [topological_space.separable_space α] [nonempty α] : dense_range (topological_space.dense_seq α)","theorem":"(α : Type u) [t : topological_space α] [topological_space.separable_space α] [nonempty α] : dense_range (topological_space.dense_seq α)","args":"(α : Type u) [t : topological_space α] [topological_space.separable_space α] [nonempty α]","doc_string":"The sequence `dense_seq α` has dense range.","type":"dense_range (topological_space.dense_seq α)"},{"name":"list.length_pos_of_prod_ne_one","kind":"theorem","statement":"theorem list.length_pos_of_prod_ne_one {M : Type u_3} [monoid M] (L : list M) (h : L.prod ≠ 1) : 0 < L.length","theorem":"{M : Type u_3} [monoid M] (L : list M) (h : L.prod ≠ 1) : 0 < L.length","args":"{M : Type u_3} [monoid M] (L : list M) (h : L.prod ≠ 1)","doc_string":"A list with product not one must have positive length.","type":"0 < L.length"},{"name":"finset.ne_of_mem_slice","kind":"theorem","statement":"theorem finset.ne_of_mem_slice {α : Type u_1} {𝒜 : finset (finset α)} {A₁ A₂ : finset α} {r₁ r₂ : ℕ} (h₁ : A₁ ∈ 𝒜.slice r₁) (h₂ : A₂ ∈ 𝒜.slice r₂) : r₁ ≠ r₂ → A₁ ≠ A₂","theorem":"{α : Type u_1} {𝒜 : finset (finset α)} {A₁ A₂ : finset α} {r₁ r₂ : ℕ} (h₁ : A₁ ∈ 𝒜.slice r₁) (h₂ : A₂ ∈ 𝒜.slice r₂) : r₁ ≠ r₂ → A₁ ≠ A₂","args":"{α : Type u_1} {𝒜 : finset (finset α)} {A₁ A₂ : finset α} {r₁ r₂ : ℕ} (h₁ : A₁ ∈ 𝒜.slice r₁) (h₂ : A₂ ∈ 𝒜.slice r₂)","doc_string":"Elements in distinct slices must be distinct.","type":"r₁ ≠ r₂ → A₁ ≠ A₂"},{"name":"subgroup.closure_eq","kind":"theorem","statement":"theorem subgroup.closure_eq {G : Type u_1} [group G] (K : subgroup G) : subgroup.closure ↑K = K","theorem":"{G : Type u_1} [group G] (K : subgroup G) : subgroup.closure ↑K = K","args":"{G : Type u_1} [group G] (K : subgroup G)","doc_string":"Closure of a subgroup `K` equals `K`.","type":"subgroup.closure ↑K = K"},{"name":"nnreal.summable_of_le","kind":"theorem","statement":"theorem nnreal.summable_of_le {β : Type u_2} {f g : β → nnreal} (hgf : ∀ (b : β), g b ≤ f b) : summable f → summable g","theorem":"{β : Type u_2} {f g : β → nnreal} (hgf : ∀ (b : β), g b ≤ f b) : summable f → summable g","args":"{β : Type u_2} {f g : β → nnreal} (hgf : ∀ (b : β), g b ≤ f b)","doc_string":"Comparison test of convergence of `ℝ≥0`-valued series.","type":"summable f → summable g"},{"name":"function.injective.inj_on","kind":"theorem","statement":"theorem function.injective.inj_on {α : Type u} {β : Type v} {f : α → β} (h : function.injective f) (s : set α) : set.inj_on f s","theorem":"{α : Type u} {β : Type v} {f : α → β} (h : function.injective f) (s : set α) : set.inj_on f s","args":"{α : Type u} {β : Type v} {f : α → β} (h : function.injective f) (s : set α)","doc_string":"**Alias** of set.inj_on_of_injective`.","type":"set.inj_on f s"},{"name":"matrix.det_transpose","kind":"theorem","statement":"theorem matrix.det_transpose {n : Type u_2} [decidable_eq n] [fintype n] {R : Type v} [comm_ring R] (M : matrix n n R) : M.transpose.det = M.det","theorem":"{n : Type u_2} [decidable_eq n] [fintype n] {R : Type v} [comm_ring R] (M : matrix n n R) : M.transpose.det = M.det","args":"{n : Type u_2} [decidable_eq n] [fintype n] {R : Type v} [comm_ring R] (M : matrix n n R)","doc_string":"Transposing a matrix preserves the determinant.","type":"M.transpose.det = M.det"},{"name":"setoid.eqv_gen_mono","kind":"theorem","statement":"theorem setoid.eqv_gen_mono {α : Type u_1} {r s : α → α → Prop} (h : ∀ (x y : α), r x y → s x y) : eqv_gen.setoid r ≤ eqv_gen.setoid s","theorem":"{α : Type u_1} {r s : α → α → Prop} (h : ∀ (x y : α), r x y → s x y) : eqv_gen.setoid r ≤ eqv_gen.setoid s","args":"{α : Type u_1} {r s : α → α → Prop} (h : ∀ (x y : α), r x y → s x y)","doc_string":"Equivalence closure of binary relations is monotone.","type":"eqv_gen.setoid r ≤ eqv_gen.setoid s"},{"name":"is_topological_fiber_bundle_fst","kind":"theorem","statement":"theorem is_topological_fiber_bundle_fst {B : Type u_2} {F : Type u_3} [topological_space B] [topological_space F] : is_topological_fiber_bundle F prod.fst","theorem":"{B : Type u_2} {F : Type u_3} [topological_space B] [topological_space F] : is_topological_fiber_bundle F prod.fst","args":"{B : Type u_2} {F : Type u_3} [topological_space B] [topological_space F]","doc_string":"The first projection in a product is a topological fiber bundle.","type":"is_topological_fiber_bundle F prod.fst"},{"name":"module.nontrivial","kind":"theorem","statement":"theorem module.nontrivial (R : Type u_1) (M : Type u_2) [semiring R] [nontrivial M] [add_comm_monoid M] [module R M] : nontrivial R","theorem":"(R : Type u_1) (M : Type u_2) [semiring R] [nontrivial M] [add_comm_monoid M] [module R M] : nontrivial R","args":"(R : Type u_1) (M : Type u_2) [semiring R] [nontrivial M] [add_comm_monoid M] [module R M]","doc_string":"A semiring is `nontrivial` provided that there exists a nontrivial module over this semiring.","type":"nontrivial R"},{"name":"subsemigroup.closure_le","kind":"theorem","statement":"theorem subsemigroup.closure_le {M : Type u_1} [has_mul M] {s : set M} {S : subsemigroup M} : subsemigroup.closure s ≤ S ↔ s ⊆ ↑S","theorem":"{M : Type u_1} [has_mul M] {s : set M} {S : subsemigroup M} : subsemigroup.closure s ≤ S ↔ s ⊆ ↑S","args":"{M : Type u_1} [has_mul M] {s : set M} {S : subsemigroup M}","doc_string":"A subsemigroup `S` includes `closure s` if and only if it includes `s`.","type":"subsemigroup.closure s ≤ S ↔ s ⊆ ↑S"},{"name":"free_group.red.step.length","kind":"theorem","statement":"theorem free_group.red.step.length {α : Type u} {L₁ L₂ : list (α × bool)} : free_group.red.step L₁ L₂ → L₂.length + 2 = L₁.length","theorem":"{α : Type u} {L₁ L₂ : list (α × bool)} : free_group.red.step L₁ L₂ → L₂.length + 2 = L₁.length","args":"{α : Type u} {L₁ L₂ : list (α × bool)}","doc_string":" Predicate asserting that word `w₁` can be reduced to `w₂` in one step, i.e. there are words `w₃ w₄` and letter `x` such that `w₁ = w₃xx⁻¹w₄` and `w₂ = w₃w₄`","type":"free_group.red.step L₁ L₂ → L₂.length + 2 = L₁.length"},{"name":"mul_is_left_regular_iff","kind":"theorem","statement":"theorem mul_is_left_regular_iff {R : Type u_1} {a : R} [semigroup R] (b : R) (ha : is_left_regular a) : is_left_regular (a * b) ↔ is_left_regular b","theorem":"{R : Type u_1} {a : R} [semigroup R] (b : R) (ha : is_left_regular a) : is_left_regular (a * b) ↔ is_left_regular b","args":"{R : Type u_1} {a : R} [semigroup R] (b : R) (ha : is_left_regular a)","doc_string":"  An element is left-regular if and only if multiplying it on the left by a left-regular element is left-regular.","type":"is_left_regular (a * b) ↔ is_left_regular b"},{"name":"nat.gcd_eq_gcd_ab","kind":"theorem","statement":"theorem nat.gcd_eq_gcd_ab (x y : ℕ) : ↑(x.gcd y) = ↑x * x.gcd_a y + ↑y * x.gcd_b y","theorem":"(x y : ℕ) : ↑(x.gcd y) = ↑x * x.gcd_a y + ↑y * x.gcd_b y","args":"(x y : ℕ)","doc_string":" **Bézout's lemma**: given `x y : ℕ`, `gcd x y = x * a + y * b`, where `a = gcd_a x y` and `b = gcd_b x y` are computed by the extended Euclidean algorithm.","type":"↑(x.gcd y) = ↑x * x.gcd_a y + ↑y * x.gcd_b y"},{"name":"function.surjective.comp_left","kind":"theorem","statement":"theorem function.surjective.comp_left {α : Sort u} {β : Sort v} {γ : Sort w} {g : β → γ} (hg : function.surjective g) : function.surjective (function.comp g)","theorem":"{α : Sort u} {β : Sort v} {γ : Sort w} {g : β → γ} (hg : function.surjective g) : function.surjective (function.comp g)","args":"{α : Sort u} {β : Sort v} {γ : Sort w} {g : β → γ} (hg : function.surjective g)","doc_string":"Composition by an surjective function on the left is itself surjective.","type":"function.surjective (function.comp g)"},{"name":"is_left_regular.of_mul","kind":"theorem","statement":"theorem is_left_regular.of_mul {R : Type u_1} {a b : R} [semigroup R] (ab : is_left_regular (a * b)) : is_left_regular b","theorem":"{R : Type u_1} {a b : R} [semigroup R] (ab : is_left_regular (a * b)) : is_left_regular b","args":"{R : Type u_1} {a b : R} [semigroup R] (ab : is_left_regular (a * b))","doc_string":"  If an element `b` becomes left-regular after multiplying it on the left by a left-regular element, then `b` is left-regular.","type":"is_left_regular b"},{"name":"nat.image_Ico_mod","kind":"theorem","statement":"theorem nat.image_Ico_mod (n a : ℕ) : finset.image (λ (_x : ℕ), _x % a) (finset.Ico n (n + a)) = finset.range a","theorem":"(n a : ℕ) : finset.image (λ (_x : ℕ), _x % a) (finset.Ico n (n + a)) = finset.range a","args":"(n a : ℕ)","doc_string":" Note that while this lemma cannot be easily generalized to a type class, it holds for ℤ as well. See `int.image_Ico_mod` for the ℤ version.","type":"finset.image (λ (_x : ℕ), _x % a) (finset.Ico n (n + a)) = finset.range a"},{"name":"inv_lt_one_iff_one_lt","kind":"theorem","statement":"theorem inv_lt_one_iff_one_lt {α : Type u} [group α] [has_lt α] [covariant_class α α has_mul.mul has_lt.lt] {a : α} : a⁻¹ < 1 ↔ 1 < a","theorem":"{α : Type u} [group α] [has_lt α] [covariant_class α α has_mul.mul has_lt.lt] {a : α} : a⁻¹ < 1 ↔ 1 < a","args":"{α : Type u} [group α] [has_lt α] [covariant_class α α has_mul.mul has_lt.lt] {a : α}","doc_string":"**Alias** of left.inv_lt_one_iff`.","type":"a⁻¹ < 1 ↔ 1 < a"},{"name":"right.add_pos_of_pos_of_nonneg","kind":"theorem","statement":"theorem right.add_pos_of_pos_of_nonneg {α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α (function.swap has_add.add) has_lt.lt] {a b : α} (ha : 0 < a) (hb : 0 ≤ b) : 0 < a + b","theorem":"{α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α (function.swap has_add.add) has_lt.lt] {a b : α} (ha : 0 < a) (hb : 0 ≤ b) : 0 < a + b","args":"{α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α (function.swap has_add.add) has_lt.lt] {a b : α} (ha : 0 < a) (hb : 0 ≤ b)","doc_string":"Assumes right covariance. The lemma assuming left covariance is `left.add_pos_of_pos_of_nonneg`.","type":"0 < a + b"},{"name":"left.one_lt_inv_iff","kind":"theorem","statement":"theorem left.one_lt_inv_iff {α : Type u} [group α] [has_lt α] [covariant_class α α has_mul.mul has_lt.lt] {a : α} : 1 < a⁻¹ ↔ a < 1","theorem":"{α : Type u} [group α] [has_lt α] [covariant_class α α has_mul.mul has_lt.lt] {a : α} : 1 < a⁻¹ ↔ a < 1","args":"{α : Type u} [group α] [has_lt α] [covariant_class α α has_mul.mul has_lt.lt] {a : α}","doc_string":"Uses `left` co(ntra)variant.","type":"1 < a⁻¹ ↔ a < 1"},{"name":"le_rfl","kind":"theorem","statement":"theorem le_rfl {α : Type u} [preorder α] {a : α} : a ≤ a","theorem":"{α : Type u} [preorder α] {a : α} : a ≤ a","args":"{α : Type u} [preorder α] {a : α}","doc_string":"A version of `le_refl` where the argument is implicit","type":"a ≤ a"},{"name":"add_subgroup.closure_eq","kind":"theorem","statement":"theorem add_subgroup.closure_eq {G : Type u_1} [add_group G] (K : add_subgroup G) : add_subgroup.closure ↑K = K","theorem":"{G : Type u_1} [add_group G] (K : add_subgroup G) : add_subgroup.closure ↑K = K","args":"{G : Type u_1} [add_group G] (K : add_subgroup G)","doc_string":"Additive closure of an additive subgroup `K` equals `K`","type":"add_subgroup.closure ↑K = K"},{"name":"sub_left_le_of_le_add","kind":"theorem","statement":"theorem sub_left_le_of_le_add {α : Type u} [add_comm_group α] [has_le α] [covariant_class α α has_add.add has_le.le] {a b c : α} : a ≤ b + c → a - b ≤ c","theorem":"{α : Type u} [add_comm_group α] [has_le α] [covariant_class α α has_add.add has_le.le] {a b c : α} : a ≤ b + c → a - b ≤ c","args":"{α : Type u} [add_comm_group α] [has_le α] [covariant_class α α has_add.add has_le.le] {a b c : α}","doc_string":"**Alias** of the reverse direction of sub_le_iff_le_add'`.","type":"a ≤ b + c → a - b ≤ c"},{"name":"not_is_right_regular_zero","kind":"theorem","statement":"theorem not_is_right_regular_zero {R : Type u_1} [mul_zero_class R] [nR : nontrivial R] : ¬is_right_regular 0","theorem":"{R : Type u_1} [mul_zero_class R] [nR : nontrivial R] : ¬is_right_regular 0","args":"{R : Type u_1} [mul_zero_class R] [nR : nontrivial R]","doc_string":"In a non-trivial ring, the element `0` is not right-regular -- with typeclasses.","type":"¬is_right_regular 0"},{"name":"is_group_hom.map_inv","kind":"theorem","statement":"theorem is_group_hom.map_inv {α : Type u} {β : Type v} [group α] [group β] {f : α → β} (hf : is_group_hom f) (a : α) : f a⁻¹ = (f a)⁻¹","theorem":"{α : Type u} {β : Type v} [group α] [group β] {f : α → β} (hf : is_group_hom f) (a : α) : f a⁻¹ = (f a)⁻¹","args":"{α : Type u} {β : Type v} [group α] [group β] {f : α → β} (hf : is_group_hom f) (a : α)","doc_string":"A group homomorphism sends inverses to inverses.","type":"f a⁻¹ = (f a)⁻¹"},{"name":"ordinal.fp_unbounded","kind":"theorem","statement":"theorem ordinal.fp_unbounded {f : ordinal → ordinal} (H : ordinal.is_normal f) : set.unbounded has_lt.lt (function.fixed_points f)","theorem":"{f : ordinal → ordinal} (H : ordinal.is_normal f) : set.unbounded has_lt.lt (function.fixed_points f)","args":"{f : ordinal → ordinal} (H : ordinal.is_normal f)","doc_string":" The fixed point lemma for normal functions: any normal function has an unbounded set of fixed points.","type":"set.unbounded has_lt.lt (function.fixed_points f)"},{"name":"chart_at_self_eq","kind":"theorem","statement":"theorem chart_at_self_eq {H : Type u_1} [topological_space H] {x : H} : charted_space.chart_at H x = local_homeomorph.refl H","theorem":"{H : Type u_1} [topological_space H] {x : H} : charted_space.chart_at H x = local_homeomorph.refl H","args":"{H : Type u_1} [topological_space H] {x : H}","doc_string":"In the model space, chart_at is always the identity","type":"charted_space.chart_at H x = local_homeomorph.refl H"},{"name":"is_add_left_regular_of_add_eq_zero","kind":"theorem","statement":"theorem is_add_left_regular_of_add_eq_zero {R : Type u_1} {a b : R} [add_monoid R] (h : b + a = 0) : is_add_left_regular a","theorem":"{R : Type u_1} {a b : R} [add_monoid R] (h : b + a = 0) : is_add_left_regular a","args":"{R : Type u_1} {a b : R} [add_monoid R] (h : b + a = 0)","doc_string":"An element admitting a left additive opposite is add-left-regular.","type":"is_add_left_regular a"},{"name":"is_least.bdd_below","kind":"theorem","statement":"theorem is_least.bdd_below {α : Type u} [preorder α] {s : set α} {a : α} (h : is_least s a) : bdd_below s","theorem":"{α : Type u} [preorder α] {s : set α} {a : α} (h : is_least s a) : bdd_below s","args":"{α : Type u} [preorder α] {s : set α} {a : α} (h : is_least s a)","doc_string":"If `s` has a least element, then it is bounded below.","type":"bdd_below s"},{"name":"sub_eq_zero_of_eq","kind":"theorem","statement":"theorem sub_eq_zero_of_eq {G : Type u_2} [add_group G] {a b : G} : a = b → a - b = 0","theorem":"{G : Type u_2} [add_group G] {a b : G} : a = b → a - b = 0","args":"{G : Type u_2} [add_group G] {a b : G}","doc_string":"**Alias** of the reverse direction of sub_eq_zero`.","type":"a = b → a - b = 0"},{"name":"has_le.le.trans_lt'","kind":"theorem","statement":"theorem has_le.le.trans_lt' {α : Type u} [preorder α] {a b c : α} : b ≤ c → a < b → a < c","theorem":"{α : Type u} [preorder α] {a b c : α} : b ≤ c → a < b → a < c","args":"{α : Type u} [preorder α] {a b c : α}","doc_string":"**Alias** of lt_of_le_of_lt'`.","type":"b ≤ c → a < b → a < c"},{"name":"has_binary_products_of_terminal_and_pullbacks","kind":"theorem","statement":"theorem has_binary_products_of_terminal_and_pullbacks (C : Type u) [category_theory.category C] [category_theory.limits.has_terminal C] [category_theory.limits.has_pullbacks C] : category_theory.limits.has_binary_products C","theorem":"(C : Type u) [category_theory.category C] [category_theory.limits.has_terminal C] [category_theory.limits.has_pullbacks C] : category_theory.limits.has_binary_products C","args":"(C : Type u) [category_theory.category C] [category_theory.limits.has_terminal C] [category_theory.limits.has_pullbacks C]","doc_string":"Any category with pullbacks and terminal object has binary products.","type":"category_theory.limits.has_binary_products C"},{"name":"bdd_above.inter_of_left","kind":"theorem","statement":"theorem bdd_above.inter_of_left {α : Type u} [preorder α] {s t : set α} (h : bdd_above s) : bdd_above (s ∩ t)","theorem":"{α : Type u} [preorder α] {s t : set α} (h : bdd_above s) : bdd_above (s ∩ t)","args":"{α : Type u} [preorder α] {s t : set α} (h : bdd_above s)","doc_string":"If `s` is bounded, then so is `s ∩ t`","type":"bdd_above (s ∩ t)"},{"name":"nhds_le_uniformity","kind":"theorem","statement":"theorem nhds_le_uniformity {α : Type u_1} [uniform_space α] (x : α) : nhds (x, x) ≤ uniformity α","theorem":"{α : Type u_1} [uniform_space α] (x : α) : nhds (x, x) ≤ uniformity α","args":"{α : Type u_1} [uniform_space α] (x : α)","doc_string":"Entourages are neighborhoods of the diagonal.","type":"nhds (x, x) ≤ uniformity α"},{"name":"padic_val_int.one","kind":"theorem","statement":"theorem padic_val_int.one {p : ℕ} : padic_val_int p 1 = 0","theorem":"{p : ℕ} : padic_val_int p 1 = 0","args":"{p : ℕ}","doc_string":"`padic_val_int p 1` is 0 for any `p`.","type":"padic_val_int p 1 = 0"},{"name":"polynomial.cyclotomic_two","kind":"theorem","statement":"theorem polynomial.cyclotomic_two (R : Type u_1) [ring R] : polynomial.cyclotomic 2 R = polynomial.X + 1","theorem":"(R : Type u_1) [ring R] : polynomial.cyclotomic 2 R = polynomial.X + 1","args":"(R : Type u_1) [ring R]","doc_string":"The second cyclotomic polyomial is `X + 1`.","type":"polynomial.cyclotomic 2 R = polynomial.X + 1"},{"name":"is_min.pred_eq","kind":"theorem","statement":"theorem is_min.pred_eq {α : Type u_1} [partial_order α] [pred_order α] {a : α} : is_min a → order.pred a = a","theorem":"{α : Type u_1} [partial_order α] [pred_order α] {a : α} : is_min a → order.pred a = a","args":"{α : Type u_1} [partial_order α] [pred_order α] {a : α}","doc_string":"**Alias** of the reverse direction of order.pred_eq_iff_is_min`.","type":"is_min a → order.pred a = a"},{"name":"free_group.reduce.sound","kind":"theorem","statement":"theorem free_group.reduce.sound {α : Type u} {L₁ L₂ : list (α × bool)} [decidable_eq α] (H : free_group.mk L₁ = free_group.mk L₂) : free_group.reduce L₁ = free_group.reduce L₂","theorem":"{α : Type u} {L₁ L₂ : list (α × bool)} [decidable_eq α] (H : free_group.mk L₁ = free_group.mk L₂) : free_group.reduce L₁ = free_group.reduce L₂","args":"{α : Type u} {L₁ L₂ : list (α × bool)} [decidable_eq α] (H : free_group.mk L₁ = free_group.mk L₂)","doc_string":" If two words correspond to the same element in the free group, then they have a common maximal reduction. This is the proof that the function that sends an element of the free group to its maximal reduction is well-defined.","type":"free_group.reduce L₁ = free_group.reduce L₂"},{"name":"add_subgroup.is_open_of_zero_mem_interior","kind":"theorem","statement":"theorem add_subgroup.is_open_of_zero_mem_interior {G : Type u_1} [add_group G] [topological_space G] [topological_add_group G] {H : add_subgroup G} (h_1_int : 0 ∈ interior ↑H) : is_open ↑H","theorem":"{G : Type u_1} [add_group G] [topological_space G] [topological_add_group G] {H : add_subgroup G} (h_1_int : 0 ∈ interior ↑H) : is_open ↑H","args":"{G : Type u_1} [add_group G] [topological_space G] [topological_add_group G] {H : add_subgroup G} (h_1_int : 0 ∈ interior ↑H)","doc_string":"If a subgroup of an additive topological group has `0` in its interior, then it is open.","type":"is_open ↑H"},{"name":"star_div","kind":"theorem","statement":"theorem star_div {R : Type u} [comm_group R] [star_semigroup R] (x y : R) : has_star.star (x / y) = has_star.star x / has_star.star y","theorem":"{R : Type u} [comm_group R] [star_semigroup R] (x y : R) : has_star.star (x / y) = has_star.star x / has_star.star y","args":"{R : Type u} [comm_group R] [star_semigroup R] (x y : R)","doc_string":"When multiplication is commutative, `star` preserves division.","type":"has_star.star (x / y) = has_star.star x / has_star.star y"},{"name":"is_smul_regular.zero","kind":"theorem","statement":"theorem is_smul_regular.zero {R : Type u_1} {M : Type u_3} [monoid_with_zero R] [has_zero M] [mul_action_with_zero R M] [sM : subsingleton M] : is_smul_regular M 0","theorem":"{R : Type u_1} {M : Type u_3} [monoid_with_zero R] [has_zero M] [mul_action_with_zero R M] [sM : subsingleton M] : is_smul_regular M 0","args":"{R : Type u_1} {M : Type u_3} [monoid_with_zero R] [has_zero M] [mul_action_with_zero R M] [sM : subsingleton M]","doc_string":"The element `0` is `M`-regular when `M` is trivial.","type":"is_smul_regular M 0"},{"name":"is_trivial_topological_fiber_bundle_snd","kind":"theorem","statement":"theorem is_trivial_topological_fiber_bundle_snd {B : Type u_2} {F : Type u_3} [topological_space B] [topological_space F] : is_trivial_topological_fiber_bundle F prod.snd","theorem":"{B : Type u_2} {F : Type u_3} [topological_space B] [topological_space F] : is_trivial_topological_fiber_bundle F prod.snd","args":"{B : Type u_2} {F : Type u_3} [topological_space B] [topological_space F]","doc_string":"The second projection in a product is a trivial topological fiber bundle.","type":"is_trivial_topological_fiber_bundle F prod.snd"},{"name":"powers.one_mem","kind":"theorem","statement":"theorem powers.one_mem {M : Type u_1} [monoid M] {x : M} : 1 ∈ powers x","theorem":"{M : Type u_1} [monoid M] {x : M} : 1 ∈ powers x","args":"{M : Type u_1} [monoid M] {x : M}","doc_string":"1 is in the set of natural number powers of an element of a monoid.","type":"1 ∈ powers x"},{"name":"has_le.le.trans'","kind":"theorem","statement":"theorem has_le.le.trans' {α : Type u} [preorder α] {a b c : α} : b ≤ c → a ≤ b → a ≤ c","theorem":"{α : Type u} [preorder α] {a b c : α} : b ≤ c → a ≤ b → a ≤ c","args":"{α : Type u} [preorder α] {a b c : α}","doc_string":"**Alias** of le_trans'`.","type":"b ≤ c → a ≤ b → a ≤ c"},{"name":"W_type.cardinal_mk_le_of_le","kind":"theorem","statement":"theorem W_type.cardinal_mk_le_of_le {α : Type u} {β : α → Type u} {κ : cardinal} (hκ : cardinal.sum (λ (a : α), κ ^ cardinal.mk (β a)) ≤ κ) : cardinal.mk (W_type β) ≤ κ","theorem":"{α : Type u} {β : α → Type u} {κ : cardinal} (hκ : cardinal.sum (λ (a : α), κ ^ cardinal.mk (β a)) ≤ κ) : cardinal.mk (W_type β) ≤ κ","args":"{α : Type u} {β : α → Type u} {κ : cardinal} (hκ : cardinal.sum (λ (a : α), κ ^ cardinal.mk (β a)) ≤ κ)","doc_string":"`#(W_type β)` is the least cardinal `κ` such that `sum (λ a : α, κ ^ #(β a)) ≤ κ`","type":"cardinal.mk (W_type β) ≤ κ"},{"name":"category_theory.limits.has_zero_object_of_has_initial_object","kind":"theorem","statement":"theorem category_theory.limits.has_zero_object_of_has_initial_object {C : Type u} [category_theory.category C] [category_theory.limits.has_zero_morphisms C] [category_theory.limits.has_initial C] : category_theory.limits.has_zero_object C","theorem":"{C : Type u} [category_theory.category C] [category_theory.limits.has_zero_morphisms C] [category_theory.limits.has_initial C] : category_theory.limits.has_zero_object C","args":"{C : Type u} [category_theory.category C] [category_theory.limits.has_zero_morphisms C] [category_theory.limits.has_initial C]","doc_string":"If there are zero morphisms, any initial object is a zero object.","type":"category_theory.limits.has_zero_object C"},{"name":"nat.exists_infinite_primes","kind":"theorem","statement":"theorem nat.exists_infinite_primes (n : ℕ) : ∃ (p : ℕ), n ≤ p ∧ nat.prime p","theorem":"(n : ℕ) : ∃ (p : ℕ), n ≤ p ∧ nat.prime p","args":"(n : ℕ)","doc_string":" Euclid's theorem on the **infinitude of primes**. Here given in the form: for every `n`, there exists a prime number `p ≥ n`.","type":"∃ (p : ℕ), n ≤ p ∧ nat.prime p"},{"name":"add_commute.refl","kind":"theorem","statement":"theorem add_commute.refl {S : Type u_1} [has_add S] (a : S) : add_commute a a","theorem":"{S : Type u_1} [has_add S] (a : S) : add_commute a a","args":"{S : Type u_1} [has_add S] (a : S)","doc_string":"Any element commutes with itself.","type":"add_commute a a"},{"name":"range.is_submonoid","kind":"theorem","statement":"theorem range.is_submonoid {M : Type u_1} [monoid M] {γ : Type u_2} [monoid γ] {f : M → γ} (hf : is_monoid_hom f) : is_submonoid (set.range f)","theorem":"{M : Type u_1} [monoid M] {γ : Type u_2} [monoid γ] {f : M → γ} (hf : is_monoid_hom f) : is_submonoid (set.range f)","args":"{M : Type u_1} [monoid M] {γ : Type u_2} [monoid γ] {f : M → γ} (hf : is_monoid_hom f)","doc_string":"The image of a monoid hom is a submonoid of the codomain.","type":"is_submonoid (set.range f)"},{"name":"add_le_of_le_neg_add","kind":"theorem","statement":"theorem add_le_of_le_neg_add {α : Type u} [add_group α] [has_le α] [covariant_class α α has_add.add has_le.le] {a b c : α} : b ≤ -a + c → a + b ≤ c","theorem":"{α : Type u} [add_group α] [has_le α] [covariant_class α α has_add.add has_le.le] {a b c : α} : b ≤ -a + c → a + b ≤ c","args":"{α : Type u} [add_group α] [has_le α] [covariant_class α α has_add.add has_le.le] {a b c : α}","doc_string":"**Alias** of the forward direction of le_inv_mul_iff_mul_le`.","type":"b ≤ -a + c → a + b ≤ c"},{"name":"is_smul_regular.not_zero","kind":"theorem","statement":"theorem is_smul_regular.not_zero {R : Type u_1} {M : Type u_3} [monoid_with_zero R] [has_zero M] [mul_action_with_zero R M] [nM : nontrivial M] : ¬is_smul_regular M 0","theorem":"{R : Type u_1} {M : Type u_3} [monoid_with_zero R] [has_zero M] [mul_action_with_zero R M] [nM : nontrivial M] : ¬is_smul_regular M 0","args":"{R : Type u_1} {M : Type u_3} [monoid_with_zero R] [has_zero M] [mul_action_with_zero R M] [nM : nontrivial M]","doc_string":"The `0` element is not `M`-regular, on a non-trivial module.","type":"¬is_smul_regular M 0"},{"name":"has_subset.subset.antisymm","kind":"theorem","statement":"theorem has_subset.subset.antisymm {α : Type u} [has_subset α] {a b : α} [is_antisymm α has_subset.subset] (h : a ⊆ b) (h' : b ⊆ a) : a = b","theorem":"{α : Type u} [has_subset α] {a b : α} [is_antisymm α has_subset.subset] (h : a ⊆ b) (h' : b ⊆ a) : a = b","args":"{α : Type u} [has_subset α] {a b : α} [is_antisymm α has_subset.subset] (h : a ⊆ b) (h' : b ⊆ a)","doc_string":"**Alias** of subset_antisymm`.","type":"a = b"},{"name":"category_theory.zigzag_is_connected","kind":"theorem","statement":"theorem category_theory.zigzag_is_connected {J : Type u₁} [category_theory.category J] [nonempty J] (h : ∀ (j₁ j₂ : J), category_theory.zigzag j₁ j₂) : category_theory.is_connected J","theorem":"{J : Type u₁} [category_theory.category J] [nonempty J] (h : ∀ (j₁ j₂ : J), category_theory.zigzag j₁ j₂) : category_theory.is_connected J","args":"{J : Type u₁} [category_theory.category J] [nonempty J] (h : ∀ (j₁ j₂ : J), category_theory.zigzag j₁ j₂)","doc_string":"If any two objects in an nonempty category are related by `zigzag`, the category is connected.","type":"category_theory.is_connected J"},{"name":"int.le_induction_down","kind":"theorem","statement":"theorem int.le_induction_down {P : ℤ → Prop} {m : ℤ} (h0 : P m) (h1 : ∀ (n : ℤ), n ≤ m → P n → P (n - 1)) (n : ℤ) : n ≤ m → P n","theorem":"{P : ℤ → Prop} {m : ℤ} (h0 : P m) (h1 : ∀ (n : ℤ), n ≤ m → P n → P (n - 1)) (n : ℤ) : n ≤ m → P n","args":"{P : ℤ → Prop} {m : ℤ} (h0 : P m) (h1 : ∀ (n : ℤ), n ≤ m → P n → P (n - 1)) (n : ℤ)","doc_string":"See `int.induction_on'` for an induction in both directions.","type":"n ≤ m → P n"},{"name":"is_add_group_hom.mk'","kind":"theorem","statement":"theorem is_add_group_hom.mk' {α : Type u} {β : Type v} [add_group α] [add_group β] {f : α → β} (hf : ∀ (x y : α), f (x + y) = f x + f y) : is_add_group_hom f","theorem":"{α : Type u} {β : Type v} [add_group α] [add_group β] {f : α → β} (hf : ∀ (x y : α), f (x + y) = f x + f y) : is_add_group_hom f","args":"{α : Type u} {β : Type v} [add_group α] [add_group β] {f : α → β} (hf : ∀ (x y : α), f (x + y) = f x + f y)","doc_string":"Construct `is_add_group_hom` from its only hypothesis.","type":"is_add_group_hom f"},{"name":"is_unit.is_smul_regular","kind":"theorem","statement":"theorem is_unit.is_smul_regular {R : Type u_1} (M : Type u_3) {a : R} [monoid R] [mul_action R M] (ua : is_unit a) : is_smul_regular M a","theorem":"{R : Type u_1} (M : Type u_3) {a : R} [monoid R] [mul_action R M] (ua : is_unit a) : is_smul_regular M a","args":"{R : Type u_1} (M : Type u_3) {a : R} [monoid R] [mul_action R M] (ua : is_unit a)","doc_string":"A unit is `M`-regular.","type":"is_smul_regular M a"},{"name":"setoid.ker_lift_injective","kind":"theorem","statement":"theorem setoid.ker_lift_injective {α : Type u_1} {β : Type u_2} (f : α → β) : function.injective (quotient.lift f _)","theorem":"{α : Type u_1} {β : Type u_2} (f : α → β) : function.injective (quotient.lift f _)","args":"{α : Type u_1} {β : Type u_2} (f : α → β)","doc_string":"Given a map f from α to β, the natural map from the quotient of α by the kernel of f is    injective.","type":"function.injective (quotient.lift f _)"},{"name":"tendsto_diag_uniformity","kind":"theorem","statement":"theorem tendsto_diag_uniformity {α : Type u_1} {β : Type u_2} [uniform_space α] (f : β → α) (l : filter β) : filter.tendsto (λ (x : β), (f x, f x)) l (uniformity α)","theorem":"{α : Type u_1} {β : Type u_2} [uniform_space α] (f : β → α) (l : filter β) : filter.tendsto (λ (x : β), (f x, f x)) l (uniformity α)","args":"{α : Type u_1} {β : Type u_2} [uniform_space α] (f : β → α) (l : filter β)","doc_string":"Relation `λ f g, tendsto (λ x, (f x, g x)) l (𝓤 α)` is reflexive.","type":"filter.tendsto (λ (x : β), (f x, f x)) l (uniformity α)"},{"name":"finset.shadow_empty","kind":"theorem","statement":"theorem finset.shadow_empty {α : Type u_1} [decidable_eq α] : ∅.shadow = ∅","theorem":"{α : Type u_1} [decidable_eq α] : ∅.shadow = ∅","args":"{α : Type u_1} [decidable_eq α]","doc_string":"The shadow of the empty set is empty.","type":"∅.shadow = ∅"},{"name":"list.length_pos_of_prod_lt_one","kind":"theorem","statement":"theorem list.length_pos_of_prod_lt_one {M : Type u_3} [monoid M] [preorder M] (L : list M) (h : L.prod < 1) : 0 < L.length","theorem":"{M : Type u_3} [monoid M] [preorder M] (L : list M) (h : L.prod < 1) : 0 < L.length","args":"{M : Type u_3} [monoid M] [preorder M] (L : list M) (h : L.prod < 1)","doc_string":"A list with product less than one must have positive length.","type":"0 < L.length"},{"name":"is_Gδ.union","kind":"theorem","statement":"theorem is_Gδ.union {α : Type u_1} [topological_space α] {s t : set α} (hs : is_Gδ s) (ht : is_Gδ t) : is_Gδ (s ∪ t)","theorem":"{α : Type u_1} [topological_space α] {s t : set α} (hs : is_Gδ s) (ht : is_Gδ t) : is_Gδ (s ∪ t)","args":"{α : Type u_1} [topological_space α] {s t : set α} (hs : is_Gδ s) (ht : is_Gδ t)","doc_string":"The union of two Gδ sets is a Gδ set.","type":"is_Gδ (s ∪ t)"},{"name":"real.not_summable_one_div_nat_cast","kind":"theorem","statement":"theorem real.not_summable_one_div_nat_cast  : ¬summable (λ (n : ℕ), 1 / ↑n)","theorem":" : ¬summable (λ (n : ℕ), 1 / ↑n)","args":"","doc_string":"Harmonic series is not unconditionally summable.","type":"¬summable (λ (n : ℕ), 1 / ↑n)"},{"name":"le_neg_of_le_neg","kind":"theorem","statement":"theorem le_neg_of_le_neg {α : Type u} [add_group α] [has_le α] [covariant_class α α has_add.add has_le.le] [covariant_class α α (function.swap has_add.add) has_le.le] {a b : α} : a ≤ -b → b ≤ -a","theorem":"{α : Type u} [add_group α] [has_le α] [covariant_class α α has_add.add has_le.le] [covariant_class α α (function.swap has_add.add) has_le.le] {a b : α} : a ≤ -b → b ≤ -a","args":"{α : Type u} [add_group α] [has_le α] [covariant_class α α has_add.add has_le.le] [covariant_class α α (function.swap has_add.add) has_le.le] {a b : α}","doc_string":"**Alias** of the forward direction of le_inv'`.","type":"a ≤ -b → b ≤ -a"},{"name":"has_le.le.eq_or_gt","kind":"theorem","statement":"theorem has_le.le.eq_or_gt {α : Type u} [partial_order α] {a b : α} (h : a ≤ b) : b = a ∨ a < b","theorem":"{α : Type u} [partial_order α] {a b : α} (h : a ≤ b) : b = a ∨ a < b","args":"{α : Type u} [partial_order α] {a b : α} (h : a ≤ b)","doc_string":"**Alias** of eq_or_gt_of_le`.","type":"b = a ∨ a < b"},{"name":"nat.set_induction","kind":"theorem","statement":"theorem nat.set_induction {S : set ℕ} (hb : 0 ∈ S) (h_ind : ∀ (k : ℕ), k ∈ S → k + 1 ∈ S) (n : ℕ) : n ∈ S","theorem":"{S : set ℕ} (hb : 0 ∈ S) (h_ind : ∀ (k : ℕ), k ∈ S → k + 1 ∈ S) (n : ℕ) : n ∈ S","args":"{S : set ℕ} (hb : 0 ∈ S) (h_ind : ∀ (k : ℕ), k ∈ S → k + 1 ∈ S) (n : ℕ)","doc_string":"A subset of `ℕ` containing zero and closed under `nat.succ` contains all of `ℕ`.","type":"n ∈ S"},{"name":"le_of_neg_le_neg","kind":"theorem","statement":"theorem le_of_neg_le_neg {α : Type u} [add_group α] [has_le α] [covariant_class α α has_add.add has_le.le] [covariant_class α α (function.swap has_add.add) has_le.le] {a b : α} : -a ≤ -b → b ≤ a","theorem":"{α : Type u} [add_group α] [has_le α] [covariant_class α α has_add.add has_le.le] [covariant_class α α (function.swap has_add.add) has_le.le] {a b : α} : -a ≤ -b → b ≤ a","args":"{α : Type u} [add_group α] [has_le α] [covariant_class α α has_add.add has_le.le] [covariant_class α α (function.swap has_add.add) has_le.le] {a b : α}","doc_string":"**Alias** of the forward direction of neg_le_neg_iff`.","type":"-a ≤ -b → b ≤ a"},{"name":"topological_space.opens.coe_mk","kind":"theorem","statement":"theorem topological_space.opens.coe_mk {α : Type u_1} [topological_space α] {U : set α} {hU : is_open U} : ↑⟨U, hU⟩ = U","theorem":"{α : Type u_1} [topological_space α] {U : set α} {hU : is_open U} : ↑⟨U, hU⟩ = U","args":"{α : Type u_1} [topological_space α] {U : set α} {hU : is_open U}","doc_string":"the coercion `opens α → set α` applied to a pair is the same as taking the first component","type":"↑⟨U, hU⟩ = U"},{"name":"fin.coe_val_eq_self","kind":"theorem","statement":"theorem fin.coe_val_eq_self {n : ℕ} (a : fin (n + 1)) : ↑(a.val) = a","theorem":"{n : ℕ} (a : fin (n + 1)) : ↑(a.val) = a","args":"{n : ℕ} (a : fin (n + 1))","doc_string":" Converting the value of a `fin (n + 1)` to `fin (n + 1)` results in the same value.","type":"↑(a.val) = a"},{"name":"topological_fiber_bundle_core.is_open_map_proj","kind":"theorem","statement":"theorem topological_fiber_bundle_core.is_open_map_proj {ι : Type u_1} {B : Type u_2} {F : Type u_3} [topological_space B] [topological_space F] (Z : topological_fiber_bundle_core ι B F) : is_open_map Z.proj","theorem":"{ι : Type u_1} {B : Type u_2} {F : Type u_3} [topological_space B] [topological_space F] (Z : topological_fiber_bundle_core ι B F) : is_open_map Z.proj","args":"{ι : Type u_1} {B : Type u_2} {F : Type u_3} [topological_space B] [topological_space F] (Z : topological_fiber_bundle_core ι B F)","doc_string":"The projection on the base of a topological bundle created from core is an open map","type":"is_open_map Z.proj"},{"name":"is_of_fin_order.inv","kind":"theorem","statement":"theorem is_of_fin_order.inv {G : Type u} [group G] {x : G} (hx : is_of_fin_order x) : is_of_fin_order x⁻¹","theorem":"{G : Type u} [group G] {x : G} (hx : is_of_fin_order x) : is_of_fin_order x⁻¹","args":"{G : Type u} [group G] {x : G} (hx : is_of_fin_order x)","doc_string":"Inverses of elements of finite order have finite order.","type":"is_of_fin_order x⁻¹"},{"name":"lt_or_lt_iff_ne","kind":"theorem","statement":"theorem lt_or_lt_iff_ne {α : Type u} [linear_order α] {x y : α} : x < y ∨ y < x ↔ x ≠ y","theorem":"{α : Type u} [linear_order α] {x y : α} : x < y ∨ y < x ↔ x ≠ y","args":"{α : Type u} [linear_order α] {x y : α}","doc_string":"A version of `ne_iff_lt_or_gt` with LHS and RHS reversed.","type":"x < y ∨ y < x ↔ x ≠ y"},{"name":"nat.sum_four_squares","kind":"theorem","statement":"theorem nat.sum_four_squares (n : ℕ) : ∃ (a b c d : ℕ), a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 = n","theorem":"(n : ℕ) : ∃ (a b c d : ℕ), a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 = n","args":"(n : ℕ)","doc_string":"**Four squares theorem**","type":"∃ (a b c d : ℕ), a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 = n"},{"name":"compact_space.uniform_continuous_of_continuous","kind":"theorem","statement":"theorem compact_space.uniform_continuous_of_continuous {α : Type u_1} {β : Type u_2} [uniform_space α] [uniform_space β] [compact_space α] [separated_space α] {f : α → β} (h : continuous f) : uniform_continuous f","theorem":"{α : Type u_1} {β : Type u_2} [uniform_space α] [uniform_space β] [compact_space α] [separated_space α] {f : α → β} (h : continuous f) : uniform_continuous f","args":"{α : Type u_1} {β : Type u_2} [uniform_space α] [uniform_space β] [compact_space α] [separated_space α] {f : α → β} (h : continuous f)","doc_string":" Heine-Cantor: a continuous function on a compact separated uniform space is uniformly continuous.","type":"uniform_continuous f"},{"name":"function.injective.tendsto_cofinite","kind":"theorem","statement":"theorem function.injective.tendsto_cofinite {α : Type u_2} {β : Type u_3} {f : α → β} (hf : function.injective f) : filter.tendsto f filter.cofinite filter.cofinite","theorem":"{α : Type u_2} {β : Type u_3} {f : α → β} (hf : function.injective f) : filter.tendsto f filter.cofinite filter.cofinite","args":"{α : Type u_2} {β : Type u_3} {f : α → β} (hf : function.injective f)","doc_string":" For an injective function `f`, inverse images of finite sets are finite. See also `filter.comap_cofinite_le` and `function.injective.comap_cofinite_eq`.","type":"filter.tendsto f filter.cofinite filter.cofinite"},{"name":"function.commute.inv_on_fixed_pts_comp","kind":"theorem","statement":"theorem function.commute.inv_on_fixed_pts_comp {α : Type u} {f g : α → α} (h : function.commute f g) : set.inv_on f g (function.fixed_points (f ∘ g)) (function.fixed_points (f ∘ g))","theorem":"{α : Type u} {f g : α → α} (h : function.commute f g) : set.inv_on f g (function.fixed_points (f ∘ g)) (function.fixed_points (f ∘ g))","args":"{α : Type u} {f g : α → α} (h : function.commute f g)","doc_string":" If self-maps `f` and `g` commute, then they are inverse of each other on the set of fixed points of `f ∘ g`. This is a particular case of `function.inv_on_fixed_pts_comp`.","type":"set.inv_on f g (function.fixed_points (f ∘ g)) (function.fixed_points (f ∘ g))"},{"name":"is_topological_fiber_bundle.continuous_proj","kind":"theorem","statement":"theorem is_topological_fiber_bundle.continuous_proj {B : Type u_2} {F : Type u_3} {Z : Type u_4} [topological_space B] [topological_space F] {proj : Z → B} [topological_space Z] (h : is_topological_fiber_bundle F proj) : continuous proj","theorem":"{B : Type u_2} {F : Type u_3} {Z : Type u_4} [topological_space B] [topological_space F] {proj : Z → B} [topological_space Z] (h : is_topological_fiber_bundle F proj) : continuous proj","args":"{B : Type u_2} {F : Type u_3} {Z : Type u_4} [topological_space B] [topological_space F] {proj : Z → B} [topological_space Z] (h : is_topological_fiber_bundle F proj)","doc_string":"The projection from a topological fiber bundle to its base is continuous.","type":"continuous proj"},{"name":"has_binary_coproducts_of_initial_and_pushouts","kind":"theorem","statement":"theorem has_binary_coproducts_of_initial_and_pushouts (C : Type u) [category_theory.category C] [category_theory.limits.has_initial C] [category_theory.limits.has_pushouts C] : category_theory.limits.has_binary_coproducts C","theorem":"(C : Type u) [category_theory.category C] [category_theory.limits.has_initial C] [category_theory.limits.has_pushouts C] : category_theory.limits.has_binary_coproducts C","args":"(C : Type u) [category_theory.category C] [category_theory.limits.has_initial C] [category_theory.limits.has_pushouts C]","doc_string":"Any category with pushouts and initial object has binary coproducts.","type":"category_theory.limits.has_binary_coproducts C"},{"name":"modular_group.bottom_row_coprime","kind":"theorem","statement":"theorem modular_group.bottom_row_coprime {R : Type u_1} [comm_ring R] (g : matrix.special_linear_group (fin 2) R) : is_coprime (↑g 1 0) (↑g 1 1)","theorem":"{R : Type u_1} [comm_ring R] (g : matrix.special_linear_group (fin 2) R) : is_coprime (↑g 1 0) (↑g 1 1)","args":"{R : Type u_1} [comm_ring R] (g : matrix.special_linear_group (fin 2) R)","doc_string":"The two numbers `c`, `d` in the \"bottom_row\" of `g=[[*,*],[c,d]]` in `SL(2, ℤ)` are coprime.","type":"is_coprime (↑g 1 0) (↑g 1 1)"},{"name":"int.exists_strict_anti","kind":"theorem","statement":"theorem int.exists_strict_anti (α : Type u) [preorder α] [nonempty α] [no_min_order α] [no_max_order α] : ∃ (f : ℤ → α), strict_anti f","theorem":"(α : Type u) [preorder α] [nonempty α] [no_min_order α] [no_max_order α] : ∃ (f : ℤ → α), strict_anti f","args":"(α : Type u) [preorder α] [nonempty α] [no_min_order α] [no_max_order α]","doc_string":" If `α` is a nonempty preorder with no minimal or maximal elements, then there exists a strictly antitone function `f : ℤ → α`.","type":"∃ (f : ℤ → α), strict_anti f"},{"name":"subsemiring.coe_closure_eq","kind":"theorem","statement":"theorem subsemiring.coe_closure_eq {R : Type u} [non_assoc_semiring R] (s : set R) : ↑(subsemiring.closure s) = ↑(add_submonoid.closure ↑(submonoid.closure s))","theorem":"{R : Type u} [non_assoc_semiring R] (s : set R) : ↑(subsemiring.closure s) = ↑(add_submonoid.closure ↑(submonoid.closure s))","args":"{R : Type u} [non_assoc_semiring R] (s : set R)","doc_string":" The elements of the subsemiring closure of `M` are exactly the elements of the additive closure of a multiplicative submonoid `M`.","type":"↑(subsemiring.closure s) = ↑(add_submonoid.closure ↑(submonoid.closure s))"},{"name":"nat.digits_lt_base","kind":"theorem","statement":"theorem nat.digits_lt_base {b m d : ℕ} (hb : 2 ≤ b) (hd : d ∈ b.digits m) : d < b","theorem":"{b m d : ℕ} (hb : 2 ≤ b) (hd : d ∈ b.digits m) : d < b","args":"{b m d : ℕ} (hb : 2 ≤ b) (hd : d ∈ b.digits m)","doc_string":"The digits in the base b expansion of n are all less than b, if b ≥ 2","type":"d < b"},{"name":"category_theory.limits.has_equalizers_of_pullbacks_and_binary_products","kind":"theorem","statement":"theorem category_theory.limits.has_equalizers_of_pullbacks_and_binary_products {C : Type u} [category_theory.category C] [category_theory.limits.has_binary_products C] [category_theory.limits.has_pullbacks C] : category_theory.limits.has_equalizers C","theorem":"{C : Type u} [category_theory.category C] [category_theory.limits.has_binary_products C] [category_theory.limits.has_pullbacks C] : category_theory.limits.has_equalizers C","args":"{C : Type u} [category_theory.category C] [category_theory.limits.has_binary_products C] [category_theory.limits.has_pullbacks C]","doc_string":"Any category with pullbacks and binary products, has equalizers.","type":"category_theory.limits.has_equalizers C"},{"name":"order.succ_lt_succ","kind":"theorem","statement":"theorem order.succ_lt_succ {α : Type u_1} [preorder α] [succ_order α] {a b : α} [no_max_order α] : a < b → order.succ a < order.succ b","theorem":"{α : Type u_1} [preorder α] [succ_order α] {a b : α} [no_max_order α] : a < b → order.succ a < order.succ b","args":"{α : Type u_1} [preorder α] [succ_order α] {a b : α} [no_max_order α]","doc_string":"**Alias** of the reverse direction of order.succ_lt_succ_iff`.","type":"a < b → order.succ a < order.succ b"},{"name":"left.one_lt_mul","kind":"theorem","statement":"theorem left.one_lt_mul {α : Type u_1} [mul_one_class α] [preorder α] [covariant_class α α has_mul.mul has_lt.lt] {a b : α} (ha : 1 < a) (hb : 1 < b) : 1 < a * b","theorem":"{α : Type u_1} [mul_one_class α] [preorder α] [covariant_class α α has_mul.mul has_lt.lt] {a b : α} (ha : 1 < a) (hb : 1 < b) : 1 < a * b","args":"{α : Type u_1} [mul_one_class α] [preorder α] [covariant_class α α has_mul.mul has_lt.lt] {a b : α} (ha : 1 < a) (hb : 1 < b)","doc_string":" Assumes left covariance. The lemma assuming right covariance is `right.one_lt_mul`.","type":"1 < a * b"},{"name":"real.summable_nat_pow_inv","kind":"theorem","statement":"theorem real.summable_nat_pow_inv {p : ℕ} : summable (λ (n : ℕ), (↑n ^ p)⁻¹) ↔ 1 < p","theorem":"{p : ℕ} : summable (λ (n : ℕ), (↑n ^ p)⁻¹) ↔ 1 < p","args":"{p : ℕ}","doc_string":" Test for convergence of the `p`-series: the real-valued series `∑' n : ℕ, (n ^ p)⁻¹` converges if and only if `1 < p`.","type":"summable (λ (n : ℕ), (↑n ^ p)⁻¹) ↔ 1 < p"},{"name":"comp_add_left","kind":"theorem","statement":"theorem comp_add_left {α : Type u_1} [add_semigroup α] (x y : α) : has_add.add x ∘ has_add.add y = has_add.add (x + y)","theorem":"{α : Type u_1} [add_semigroup α] (x y : α) : has_add.add x ∘ has_add.add y = has_add.add (x + y)","args":"{α : Type u_1} [add_semigroup α] (x y : α)","doc_string":"Composing two additions on the left by `y` then `x` is equal to a addition on the left by `x + y`.","type":"has_add.add x ∘ has_add.add y = has_add.add (x + y)"},{"name":"nat.set_induction_bounded","kind":"theorem","statement":"theorem nat.set_induction_bounded {b : ℕ} {S : set ℕ} (hb : b ∈ S) (h_ind : ∀ (k : ℕ), k ∈ S → k + 1 ∈ S) {n : ℕ} (hbn : b ≤ n) : n ∈ S","theorem":"{b : ℕ} {S : set ℕ} (hb : b ∈ S) (h_ind : ∀ (k : ℕ), k ∈ S → k + 1 ∈ S) {n : ℕ} (hbn : b ≤ n) : n ∈ S","args":"{b : ℕ} {S : set ℕ} (hb : b ∈ S) (h_ind : ∀ (k : ℕ), k ∈ S → k + 1 ∈ S) {n : ℕ} (hbn : b ≤ n)","doc_string":"A subset of `ℕ` containing `b : ℕ` and closed under `nat.succ` contains every `n ≥ b`.","type":"n ∈ S"},{"name":"szemeredi_regularity.step_bound_pos","kind":"theorem","statement":"theorem szemeredi_regularity.step_bound_pos {n : ℕ} : 0 < n → 0 < szemeredi_regularity.step_bound n","theorem":"{n : ℕ} : 0 < n → 0 < szemeredi_regularity.step_bound n","args":"{n : ℕ}","doc_string":"**Alias** of the reverse direction of szemeredi_regularity.step_bound_pos_iff`.","type":"0 < n → 0 < szemeredi_regularity.step_bound n"},{"name":"multiples.self_mem","kind":"theorem","statement":"theorem multiples.self_mem {M : Type u_1} [add_monoid M] {x : M} : x ∈ multiples x","theorem":"{M : Type u_1} [add_monoid M] {x : M} : x ∈ multiples x","args":"{M : Type u_1} [add_monoid M] {x : M}","doc_string":"An element of an `add_monoid` is in the set of that element's natural number multiples.","type":"x ∈ multiples x"},{"name":"complex.tendsto_exp_comap_re_at_top","kind":"theorem","statement":"theorem complex.tendsto_exp_comap_re_at_top  : filter.tendsto complex.exp (filter.comap complex.re filter.at_top) (filter.comap complex.abs filter.at_top)","theorem":" : filter.tendsto complex.exp (filter.comap complex.re filter.at_top) (filter.comap complex.abs filter.at_top)","args":"","doc_string":"`complex.abs (complex.exp z) → ∞` as `complex.re z → ∞`. TODO: use `bornology.cobounded`.","type":"filter.tendsto complex.exp (filter.comap complex.re filter.at_top) (filter.comap complex.abs filter.at_top)"},{"name":"rel_embedding.coe_fn_injective","kind":"theorem","statement":"theorem rel_embedding.coe_fn_injective {α : Type u_1} {β : Type u_2} {r : α → α → Prop} {s : β → β → Prop} : function.injective coe_fn","theorem":"{α : Type u_1} {β : Type u_2} {r : α → α → Prop} {s : β → β → Prop} : function.injective coe_fn","args":"{α : Type u_1} {β : Type u_2} {r : α → α → Prop} {s : β → β → Prop}","doc_string":"The map `coe_fn : (r ↪r s) → (α → β)` is injective.","type":"function.injective coe_fn"},{"name":"category_theory.limits.finite_colimits_from_coequalizers_and_finite_coproducts","kind":"theorem","statement":"theorem category_theory.limits.finite_colimits_from_coequalizers_and_finite_coproducts {C : Type u} [category_theory.category C] [category_theory.limits.has_finite_coproducts C] [category_theory.limits.has_coequalizers C] : category_theory.limits.has_finite_colimits C","theorem":"{C : Type u} [category_theory.category C] [category_theory.limits.has_finite_coproducts C] [category_theory.limits.has_coequalizers C] : category_theory.limits.has_finite_colimits C","args":"{C : Type u} [category_theory.category C] [category_theory.limits.has_finite_coproducts C] [category_theory.limits.has_coequalizers C]","doc_string":"Any category with finite coproducts and coequalizers has all finite colimits.  See <https://stacks.math.columbia.edu/tag/002Q>.","type":"category_theory.limits.has_finite_colimits C"},{"name":"add_order_of_pos_iff","kind":"theorem","statement":"theorem add_order_of_pos_iff {G : Type u} {x : G} [add_monoid G] : 0 < add_order_of x ↔ is_of_fin_add_order x","theorem":"{G : Type u} {x : G} [add_monoid G] : 0 < add_order_of x ↔ is_of_fin_add_order x","args":"{G : Type u} {x : G} [add_monoid G]","doc_string":"A group element has finite additive order iff its order is positive.","type":"0 < add_order_of x ↔ is_of_fin_add_order x"},{"name":"has_sum_zero","kind":"theorem","statement":"theorem has_sum_zero {α : Type u_1} {β : Type u_2} [add_comm_monoid α] [topological_space α] : has_sum (λ (b : β), 0) 0","theorem":"{α : Type u_1} {β : Type u_2} [add_comm_monoid α] [topological_space α] : has_sum (λ (b : β), 0) 0","args":"{α : Type u_1} {β : Type u_2} [add_comm_monoid α] [topological_space α]","doc_string":"Constant zero function has sum `0`","type":"has_sum (λ (b : β), 0) 0"},{"name":"turing.list_blank.exists_cons","kind":"theorem","statement":"theorem turing.list_blank.exists_cons {Γ : Type u_1} [inhabited Γ] (l : turing.list_blank Γ) : ∃ (a : Γ) (l' : turing.list_blank Γ), l = turing.list_blank.cons a l'","theorem":"{Γ : Type u_1} [inhabited Γ] (l : turing.list_blank Γ) : ∃ (a : Γ) (l' : turing.list_blank Γ), l = turing.list_blank.cons a l'","args":"{Γ : Type u_1} [inhabited Γ] (l : turing.list_blank Γ)","doc_string":" The `cons` and `head`/`tail` functions are mutually inverse, unlike in the case of `list` where this only holds for nonempty lists.","type":"∃ (a : Γ) (l' : turing.list_blank Γ), l = turing.list_blank.cons a l'"},{"name":"reflexive.ne_imp_iff","kind":"theorem","statement":"theorem reflexive.ne_imp_iff {α : Type u_1} {r : α → α → Prop} (h : reflexive r) {x y : α} : x ≠ y → r x y ↔ r x y","theorem":"{α : Type u_1} {r : α → α → Prop} (h : reflexive r) {x y : α} : x ≠ y → r x y ↔ r x y","args":"{α : Type u_1} {r : α → α → Prop} (h : reflexive r) {x y : α}","doc_string":" If a reflexive relation `r : α → α → Prop` holds over `x y : α`, then it holds whether or not `x ≠ y`.","type":"x ≠ y → r x y ↔ r x y"},{"name":"upper_central_series_is_ascending_central_series","kind":"theorem","statement":"theorem upper_central_series_is_ascending_central_series (G : Type u_1) [group G] : is_ascending_central_series (upper_central_series G)","theorem":"(G : Type u_1) [group G] : is_ascending_central_series (upper_central_series G)","args":"(G : Type u_1) [group G]","doc_string":"The upper central series of a group is an ascending central series.","type":"is_ascending_central_series (upper_central_series G)"},{"name":"nat.prime.mod_two_eq_one_iff_ne_two","kind":"theorem","statement":"theorem nat.prime.mod_two_eq_one_iff_ne_two {p : ℕ} [fact (nat.prime p)] : p % 2 = 1 ↔ p ≠ 2","theorem":"{p : ℕ} [fact (nat.prime p)] : p % 2 = 1 ↔ p ≠ 2","args":"{p : ℕ} [fact (nat.prime p)]","doc_string":"A prime `p` satisfies `p % 2 = 1` if and only if `p ≠ 2`.","type":"p % 2 = 1 ↔ p ≠ 2"},{"name":"list.map_comp_map","kind":"theorem","statement":"theorem list.map_comp_map {α : Type u} {β : Type v} {γ : Type w} (g : β → γ) (f : α → β) : list.map g ∘ list.map f = list.map (g ∘ f)","theorem":"{α : Type u} {β : Type v} {γ : Type w} (g : β → γ) (f : α → β) : list.map g ∘ list.map f = list.map (g ∘ f)","args":"{α : Type u} {β : Type v} {γ : Type w} (g : β → γ) (f : α → β)","doc_string":"Composing a `list.map` with another `list.map` is equal to a single `list.map` of composed functions.","type":"list.map g ∘ list.map f = list.map (g ∘ f)"},{"name":"not_is_right_regular_zero_iff","kind":"theorem","statement":"theorem not_is_right_regular_zero_iff {R : Type u_1} [mul_zero_class R] : ¬is_right_regular 0 ↔ nontrivial R","theorem":"{R : Type u_1} [mul_zero_class R] : ¬is_right_regular 0 ↔ nontrivial R","args":"{R : Type u_1} [mul_zero_class R]","doc_string":"In a non-trivial `mul_zero_class`, the `0` element is not right-regular.","type":"¬is_right_regular 0 ↔ nontrivial R"},{"name":"finset.eq_empty_of_is_empty","kind":"theorem","statement":"theorem finset.eq_empty_of_is_empty {α : Type u_1} [is_empty α] (s : finset α) : s = ∅","theorem":"{α : Type u_1} [is_empty α] (s : finset α) : s = ∅","args":"{α : Type u_1} [is_empty α] (s : finset α)","doc_string":"A `finset` for an empty type is empty.","type":"s = ∅"},{"name":"is_lub.bdd_above","kind":"theorem","statement":"theorem is_lub.bdd_above {α : Type u} [preorder α] {s : set α} {a : α} (h : is_lub s a) : bdd_above s","theorem":"{α : Type u} [preorder α] {s : set α} {a : α} (h : is_lub s a) : bdd_above s","args":"{α : Type u} [preorder α] {s : set α} {a : α} (h : is_lub s a)","doc_string":"If `s` has a least upper bound, then it is bounded above.","type":"bdd_above s"},{"name":"function.injective2.left'","kind":"theorem","statement":"theorem function.injective2.left' {α : Sort u_1} {β : Sort u_2} {γ : Sort u_3} {f : α → β → γ} (hf : function.injective2 f) [nonempty β] : function.injective f","theorem":"{α : Sort u_1} {β : Sort u_2} {γ : Sort u_3} {f : α → β → γ} (hf : function.injective2 f) [nonempty β] : function.injective f","args":"{α : Sort u_1} {β : Sort u_2} {γ : Sort u_3} {f : α → β → γ} (hf : function.injective2 f) [nonempty β]","doc_string":"As a map from the left argument to a unary function, `f` is injective.","type":"function.injective f"},{"name":"is_compact_interval","kind":"theorem","statement":"theorem is_compact_interval {α : Type u_1} [linear_order α] [topological_space α] [compact_Icc_space α] {a b : α} : is_compact (set.interval a b)","theorem":"{α : Type u_1} [linear_order α] [topological_space α] [compact_Icc_space α] {a b : α} : is_compact (set.interval a b)","args":"{α : Type u_1} [linear_order α] [topological_space α] [compact_Icc_space α] {a b : α}","doc_string":"An unordered closed interval is compact.","type":"is_compact (set.interval a b)"},{"name":"ordinal.principal_add_iff_zero_or_omega_opow","kind":"theorem","statement":"theorem ordinal.principal_add_iff_zero_or_omega_opow {o : ordinal} : ordinal.principal has_add.add o ↔ o = 0 ∨ ∃ (a : ordinal), o = ordinal.omega ^ a","theorem":"{o : ordinal} : ordinal.principal has_add.add o ↔ o = 0 ∨ ∃ (a : ordinal), o = ordinal.omega ^ a","args":"{o : ordinal}","doc_string":"The main characterization theorem for additive principal ordinals.","type":"ordinal.principal has_add.add o ↔ o = 0 ∨ ∃ (a : ordinal), o = ordinal.omega ^ a"},{"name":"inv_lt_of_inv_lt'","kind":"theorem","statement":"theorem inv_lt_of_inv_lt' {α : Type u} [group α] [has_lt α] [covariant_class α α has_mul.mul has_lt.lt] [covariant_class α α (function.swap has_mul.mul) has_lt.lt] {a b : α} : a⁻¹ < b → b⁻¹ < a","theorem":"{α : Type u} [group α] [has_lt α] [covariant_class α α has_mul.mul has_lt.lt] [covariant_class α α (function.swap has_mul.mul) has_lt.lt] {a b : α} : a⁻¹ < b → b⁻¹ < a","args":"{α : Type u} [group α] [has_lt α] [covariant_class α α has_mul.mul has_lt.lt] [covariant_class α α (function.swap has_mul.mul) has_lt.lt] {a b : α}","doc_string":"**Alias** of the forward direction of inv_lt'`.","type":"a⁻¹ < b → b⁻¹ < a"},{"name":"pow_two","kind":"theorem","statement":"theorem pow_two {M : Type u} [monoid M] (a : M) : a ^ 2 = a * a","theorem":"{M : Type u} [monoid M] (a : M) : a ^ 2 = a * a","args":"{M : Type u} [monoid M] (a : M)","doc_string":"Note that most of the lemmas about powers of two refer to it as `sq`.","type":"a ^ 2 = a * a"},{"name":"subsemigroup.closure_eq","kind":"theorem","statement":"theorem subsemigroup.closure_eq {M : Type u_1} [has_mul M] (S : subsemigroup M) : subsemigroup.closure ↑S = S","theorem":"{M : Type u_1} [has_mul M] (S : subsemigroup M) : subsemigroup.closure ↑S = S","args":"{M : Type u_1} [has_mul M] (S : subsemigroup M)","doc_string":"Closure of a subsemigroup `S` equals `S`.","type":"subsemigroup.closure ↑S = S"},{"name":"not_is_unit_prime_of_dvd_card","kind":"theorem","statement":"theorem not_is_unit_prime_of_dvd_card {R : Type u_1} [comm_ring R] [fintype R] (p : ℕ) [fact (nat.prime p)] (hp : p ∣ fintype.card R) : ¬is_unit ↑p","theorem":"{R : Type u_1} [comm_ring R] [fintype R] (p : ℕ) [fact (nat.prime p)] (hp : p ∣ fintype.card R) : ¬is_unit ↑p","args":"{R : Type u_1} [comm_ring R] [fintype R] (p : ℕ) [fact (nat.prime p)] (hp : p ∣ fintype.card R)","doc_string":" A prime that does not divide the cardinality of a finite commutative ring `R` is a unit in `R`.","type":"¬is_unit ↑p"},{"name":"neg_nonpos","kind":"theorem","statement":"theorem neg_nonpos {α : Type u} [add_group α] [has_le α] [covariant_class α α has_add.add has_le.le] {a : α} : -a ≤ 0 ↔ 0 ≤ a","theorem":"{α : Type u} [add_group α] [has_le α] [covariant_class α α has_add.add has_le.le] {a : α} : -a ≤ 0 ↔ 0 ≤ a","args":"{α : Type u} [add_group α] [has_le α] [covariant_class α α has_add.add has_le.le] {a : α}","doc_string":"**Alias** of left.inv_le_one_iff`.","type":"-a ≤ 0 ↔ 0 ≤ a"},{"name":"nat.eq_pow_of_factorization_eq_single","kind":"theorem","statement":"theorem nat.eq_pow_of_factorization_eq_single {n p k : ℕ} (hn : n ≠ 0) (h : n.factorization = finsupp.single p k) : n = p ^ k","theorem":"{n p k : ℕ} (hn : n ≠ 0) (h : n.factorization = finsupp.single p k) : n = p ^ k","args":"{n p k : ℕ} (hn : n ≠ 0) (h : n.factorization = finsupp.single p k)","doc_string":"If the factorization of `n` contains just one number `p` then `n` is a power of `p`","type":"n = p ^ k"},{"name":"finset.Icc_eq_empty","kind":"theorem","statement":"theorem finset.Icc_eq_empty {α : Type u_1} [preorder α] [locally_finite_order α] {a b : α} : ¬a ≤ b → finset.Icc a b = ∅","theorem":"{α : Type u_1} [preorder α] [locally_finite_order α] {a b : α} : ¬a ≤ b → finset.Icc a b = ∅","args":"{α : Type u_1} [preorder α] [locally_finite_order α] {a b : α}","doc_string":"**Alias** of the reverse direction of finset.Icc_eq_empty_iff`.","type":"¬a ≤ b → finset.Icc a b = ∅"},{"name":"nat.lt_wf","kind":"theorem","statement":"theorem nat.lt_wf  : well_founded nat.lt","theorem":" : well_founded nat.lt","args":"","doc_string":"less-than is well-founded","type":"well_founded nat.lt"},{"name":"list.length_pos_of_sum_ne_zero","kind":"theorem","statement":"theorem list.length_pos_of_sum_ne_zero {M : Type u_3} [add_monoid M] (L : list M) (h : L.sum ≠ 0) : 0 < L.length","theorem":"{M : Type u_3} [add_monoid M] (L : list M) (h : L.sum ≠ 0) : 0 < L.length","args":"{M : Type u_3} [add_monoid M] (L : list M) (h : L.sum ≠ 0)","doc_string":"A list with sum not zero must have positive length.","type":"0 < L.length"},{"name":"one_lt_mul'","kind":"theorem","statement":"theorem one_lt_mul' {α : Type u_1} [mul_one_class α] [preorder α] [covariant_class α α has_mul.mul has_lt.lt] {a b : α} (ha : 1 < a) (hb : 1 < b) : 1 < a * b","theorem":"{α : Type u_1} [mul_one_class α] [preorder α] [covariant_class α α has_mul.mul has_lt.lt] {a b : α} (ha : 1 < a) (hb : 1 < b) : 1 < a * b","args":"{α : Type u_1} [mul_one_class α] [preorder α] [covariant_class α α has_mul.mul has_lt.lt] {a b : α} (ha : 1 < a) (hb : 1 < b)","doc_string":"**Alias** of left.one_lt_mul`.","type":"1 < a * b"},{"name":"eq.subset","kind":"theorem","statement":"theorem eq.subset {α : Type u_1} {s t : set α} : s = t → s ⊆ t","theorem":"{α : Type u_1} {s t : set α} : s = t → s ⊆ t","args":"{α : Type u_1} {s t : set α}","doc_string":"Duplicate of `eq.subset'`, which currently has elaboration problems.","type":"s = t → s ⊆ t"},{"name":"multiset.sub_zero","kind":"theorem","statement":"theorem multiset.sub_zero {α : Type u_1} [decidable_eq α] (s : multiset α) : s - 0 = s","theorem":"{α : Type u_1} [decidable_eq α] (s : multiset α) : s - 0 = s","args":"{α : Type u_1} [decidable_eq α] (s : multiset α)","doc_string":"This is a special case of `tsub_zero`, which should be used instead of this.  This is needed to prove `has_ordered_sub (multiset α)`.","type":"s - 0 = s"},{"name":"matrix.nonsing_inv_eq_ring_inverse","kind":"theorem","statement":"theorem matrix.nonsing_inv_eq_ring_inverse {n : Type u'} {α : Type v} [fintype n] [decidable_eq n] [comm_ring α] (A : matrix n n α) : A⁻¹ = ring.inverse A","theorem":"{n : Type u'} {α : Type v} [fintype n] [decidable_eq n] [comm_ring α] (A : matrix n n α) : A⁻¹ = ring.inverse A","args":"{n : Type u'} {α : Type v} [fintype n] [decidable_eq n] [comm_ring α] (A : matrix n n α)","doc_string":"The nonsingular inverse is the same as the general `ring.inverse`.","type":"A⁻¹ = ring.inverse A"},{"name":"ring.inverse_non_unit","kind":"theorem","statement":"theorem ring.inverse_non_unit {M₀ : Type u_1} [monoid_with_zero M₀] (x : M₀) (h : ¬is_unit x) : ring.inverse x = 0","theorem":"{M₀ : Type u_1} [monoid_with_zero M₀] (x : M₀) (h : ¬is_unit x) : ring.inverse x = 0","args":"{M₀ : Type u_1} [monoid_with_zero M₀] (x : M₀) (h : ¬is_unit x)","doc_string":"By definition, if `x` is not invertible then `inverse x = 0`.","type":"ring.inverse x = 0"},{"name":"subsingleton.convex_independent","kind":"theorem","statement":"theorem subsingleton.convex_independent {𝕜 : Type u_1} {E : Type u_2} {ι : Type u_3} [ordered_semiring 𝕜] [add_comm_group E] [module 𝕜 E] [subsingleton ι] (p : ι → E) : convex_independent 𝕜 p","theorem":"{𝕜 : Type u_1} {E : Type u_2} {ι : Type u_3} [ordered_semiring 𝕜] [add_comm_group E] [module 𝕜 E] [subsingleton ι] (p : ι → E) : convex_independent 𝕜 p","args":"{𝕜 : Type u_1} {E : Type u_2} {ι : Type u_3} [ordered_semiring 𝕜] [add_comm_group E] [module 𝕜 E] [subsingleton ι] (p : ι → E)","doc_string":"A family with at most one point is convex independent.","type":"convex_independent 𝕜 p"},{"name":"is_square_of_exists_sq","kind":"theorem","statement":"theorem is_square_of_exists_sq {α : Type u_2} [monoid α] (m : α) : (∃ (c : α), m = c ^ 2) → is_square m","theorem":"{α : Type u_2} [monoid α] (m : α) : (∃ (c : α), m = c ^ 2) → is_square m","args":"{α : Type u_2} [monoid α] (m : α)","doc_string":"**Alias** of the reverse direction of is_square_iff_exists_sq`.","type":"(∃ (c : α), m = c ^ 2) → is_square m"},{"name":"category_theory.limits.has_biproduct.of_has_coproduct","kind":"theorem","statement":"theorem category_theory.limits.has_biproduct.of_has_coproduct {C : Type u} [category_theory.category C] [category_theory.preadditive C] {J : Type v} [fintype J] (f : J → C) [category_theory.limits.has_coproduct f] : category_theory.limits.has_biproduct f","theorem":"{C : Type u} [category_theory.category C] [category_theory.preadditive C] {J : Type v} [fintype J] (f : J → C) [category_theory.limits.has_coproduct f] : category_theory.limits.has_biproduct f","args":"{C : Type u} [category_theory.category C] [category_theory.preadditive C] {J : Type v} [fintype J] (f : J → C) [category_theory.limits.has_coproduct f]","doc_string":"In a preadditive category, if the coproduct over `f : J → C` exists,    then the biproduct over `f` exists.","type":"category_theory.limits.has_biproduct f"},{"name":"inv_gold_conj","kind":"theorem","statement":"theorem inv_gold_conj  : golden_conj⁻¹ = -golden_ratio","theorem":" : golden_conj⁻¹ = -golden_ratio","args":"","doc_string":"The opposite of the golden ratio is the inverse of its conjugate.","type":"golden_conj⁻¹ = -golden_ratio"},{"name":"nat.exists_strict_anti'","kind":"theorem","statement":"theorem nat.exists_strict_anti' {α : Type u} [preorder α] [no_min_order α] (a : α) : ∃ (f : ℕ → α), strict_anti f ∧ f 0 = a","theorem":"{α : Type u} [preorder α] [no_min_order α] (a : α) : ∃ (f : ℕ → α), strict_anti f ∧ f 0 = a","args":"{α : Type u} [preorder α] [no_min_order α] (a : α)","doc_string":" If `α` is a preorder with no maximal elements, then there exists a strictly antitone function `ℕ → α` with any prescribed value of `f 0`.","type":"∃ (f : ℕ → α), strict_anti f ∧ f 0 = a"},{"name":"neg_pos","kind":"theorem","statement":"theorem neg_pos {α : Type u} [add_group α] [has_lt α] [covariant_class α α has_add.add has_lt.lt] {a : α} : 0 < -a ↔ a < 0","theorem":"{α : Type u} [add_group α] [has_lt α] [covariant_class α α has_add.add has_lt.lt] {a : α} : 0 < -a ↔ a < 0","args":"{α : Type u} [add_group α] [has_lt α] [covariant_class α α has_add.add has_lt.lt] {a : α}","doc_string":"**Alias** of left.one_lt_inv_iff`.","type":"0 < -a ↔ a < 0"},{"name":"category_theory.is_subterminal.mono_is_terminal_from","kind":"theorem","statement":"theorem category_theory.is_subterminal.mono_is_terminal_from {C : Type u₁} [category_theory.category C] {A : C} (hA : category_theory.is_subterminal A) {T : C} (hT : category_theory.limits.is_terminal T) : category_theory.mono (hT.from A)","theorem":"{C : Type u₁} [category_theory.category C] {A : C} (hA : category_theory.is_subterminal A) {T : C} (hT : category_theory.limits.is_terminal T) : category_theory.mono (hT.from A)","args":"{C : Type u₁} [category_theory.category C] {A : C} (hA : category_theory.is_subterminal A) {T : C} (hT : category_theory.limits.is_terminal T)","doc_string":"If `A` is subterminal, the unique morphism from it to a terminal object is a monomorphism. The converse of `is_subterminal_of_mono_is_terminal_from`.","type":"category_theory.mono (hT.from A)"},{"name":"submonoid.list_prod_mem","kind":"theorem","statement":"theorem submonoid.list_prod_mem {M : Type u_1} [monoid M] (s : submonoid M) {l : list M} (hl : ∀ (x : M), x ∈ l → x ∈ s) : l.prod ∈ s","theorem":"{M : Type u_1} [monoid M] (s : submonoid M) {l : list M} (hl : ∀ (x : M), x ∈ l → x ∈ s) : l.prod ∈ s","args":"{M : Type u_1} [monoid M] (s : submonoid M) {l : list M} (hl : ∀ (x : M), x ∈ l → x ∈ s)","doc_string":"Product of a list of elements in a submonoid is in the submonoid.","type":"l.prod ∈ s"},{"name":"closed_under_restriction_iff_id_le","kind":"theorem","statement":"theorem closed_under_restriction_iff_id_le {H : Type u} [topological_space H] (G : structure_groupoid H) : closed_under_restriction G ↔ id_restr_groupoid ≤ G","theorem":"{H : Type u} [topological_space H] (G : structure_groupoid H) : closed_under_restriction G ↔ id_restr_groupoid ≤ G","args":"{H : Type u} [topological_space H] (G : structure_groupoid H)","doc_string":" A groupoid is closed under restriction if and only if it contains the trivial restriction-closed groupoid.","type":"closed_under_restriction G ↔ id_restr_groupoid ≤ G"},{"name":"is_add_right_regular.of_add","kind":"theorem","statement":"theorem is_add_right_regular.of_add {R : Type u_1} {a b : R} [add_semigroup R] (ab : is_add_right_regular (b + a)) : is_add_right_regular b","theorem":"{R : Type u_1} {a b : R} [add_semigroup R] (ab : is_add_right_regular (b + a)) : is_add_right_regular b","args":"{R : Type u_1} {a b : R} [add_semigroup R] (ab : is_add_right_regular (b + a))","doc_string":"If an element `b` becomes add-right-regular after adding to it on the right a add-right-regular element, then `b` is add-right-regular.","type":"is_add_right_regular b"},{"name":"topological_fiber_bundle_core.continuous_total_space_mk","kind":"theorem","statement":"theorem topological_fiber_bundle_core.continuous_total_space_mk {ι : Type u_1} {B : Type u_2} {F : Type u_3} [topological_space B] [topological_space F] (Z : topological_fiber_bundle_core ι B F) (b : B) : continuous (bundle.total_space_mk b)","theorem":"{ι : Type u_1} {B : Type u_2} {F : Type u_3} [topological_space B] [topological_space F] (Z : topological_fiber_bundle_core ι B F) (b : B) : continuous (bundle.total_space_mk b)","args":"{ι : Type u_1} {B : Type u_2} {F : Type u_3} [topological_space B] [topological_space F] (Z : topological_fiber_bundle_core ι B F) (b : B)","doc_string":"The inclusion of a fiber into the total space is a continuous map.","type":"continuous (bundle.total_space_mk b)"},{"name":"int.exists_strict_mono","kind":"theorem","statement":"theorem int.exists_strict_mono (α : Type u) [preorder α] [nonempty α] [no_min_order α] [no_max_order α] : ∃ (f : ℤ → α), strict_mono f","theorem":"(α : Type u) [preorder α] [nonempty α] [no_min_order α] [no_max_order α] : ∃ (f : ℤ → α), strict_mono f","args":"(α : Type u) [preorder α] [nonempty α] [no_min_order α] [no_max_order α]","doc_string":" If `α` is a nonempty preorder with no minimal or maximal elements, then there exists a strictly monotone function `f : ℤ → α`.","type":"∃ (f : ℤ → α), strict_mono f"},{"name":"nonempty.map","kind":"theorem","statement":"theorem nonempty.map {α : Sort u_1} {β : Sort u_2} (f : α → β) : nonempty α → nonempty β","theorem":"{α : Sort u_1} {β : Sort u_2} (f : α → β) : nonempty α → nonempty β","args":"{α : Sort u_1} {β : Sort u_2} (f : α → β)","doc_string":"Given `f : α → β`, if `α` is nonempty then `β` is also nonempty.  `nonempty` cannot be a `functor`, because `functor` is restricted to `Type`.","type":"nonempty α → nonempty β"},{"name":"nat.of_digits_lt_base_pow_length","kind":"theorem","statement":"theorem nat.of_digits_lt_base_pow_length {b : ℕ} {l : list ℕ} (hb : 2 ≤ b) (hl : ∀ (x : ℕ), x ∈ l → x < b) : nat.of_digits b l < b ^ l.length","theorem":"{b : ℕ} {l : list ℕ} (hb : 2 ≤ b) (hl : ∀ (x : ℕ), x ∈ l → x < b) : nat.of_digits b l < b ^ l.length","args":"{b : ℕ} {l : list ℕ} (hb : 2 ≤ b) (hl : ∀ (x : ℕ), x ∈ l → x < b)","doc_string":"an n-digit number in base b is less than b^n if b ≥ 2","type":"nat.of_digits b l < b ^ l.length"},{"name":"add_semiconj_by.conj_mk","kind":"theorem","statement":"theorem add_semiconj_by.conj_mk {G : Type u} [add_group G] (a x : G) : add_semiconj_by a x (a + x + -a)","theorem":"{G : Type u} [add_group G] (a x : G) : add_semiconj_by a x (a + x + -a)","args":"{G : Type u} [add_group G] (a x : G)","doc_string":"`a` semiconjugates `x` to `a + x + -a`.","type":"add_semiconj_by a x (a + x + -a)"},{"name":"rel_iso.coe_fn_injective","kind":"theorem","statement":"theorem rel_iso.coe_fn_injective {α : Type u_1} {β : Type u_2} {r : α → α → Prop} {s : β → β → Prop} : function.injective coe_fn","theorem":"{α : Type u_1} {β : Type u_2} {r : α → α → Prop} {s : β → β → Prop} : function.injective coe_fn","args":"{α : Type u_1} {β : Type u_2} {r : α → α → Prop} {s : β → β → Prop}","doc_string":" The map `coe_fn : (r ≃r s) → (α → β)` is injective. Lean fails to parse `function.injective (λ e : r ≃r s, (e : α → β))`, so we use a trick to say the same.","type":"function.injective coe_fn"},{"name":"nat_ordinal.induction","kind":"theorem","statement":"theorem nat_ordinal.induction {p : nat_ordinal → Prop} (i : nat_ordinal) (h : ∀ (j : nat_ordinal), (∀ (k : nat_ordinal), k < j → p k) → p j) : p i","theorem":"{p : nat_ordinal → Prop} (i : nat_ordinal) (h : ∀ (j : nat_ordinal), (∀ (k : nat_ordinal), k < j → p k) → p j) : p i","args":"{p : nat_ordinal → Prop} (i : nat_ordinal) (h : ∀ (j : nat_ordinal), (∀ (k : nat_ordinal), k < j → p k) → p j)","doc_string":"`ordinal.induction` but for `nat_ordinal`.","type":"p i"},{"name":"comp_mul_right","kind":"theorem","statement":"theorem comp_mul_right {α : Type u_1} [semigroup α] (x y : α) : ((λ (_x : α), _x * x) ∘ λ (_x : α), _x * y) = λ (_x : α), _x * (y * x)","theorem":"{α : Type u_1} [semigroup α] (x y : α) : ((λ (_x : α), _x * x) ∘ λ (_x : α), _x * y) = λ (_x : α), _x * (y * x)","args":"{α : Type u_1} [semigroup α] (x y : α)","doc_string":"Composing two multiplications on the right by `y` and `x` is equal to a multiplication on the right by `y * x`.","type":"((λ (_x : α), _x * x) ∘ λ (_x : α), _x * y) = λ (_x : α), _x * (y * x)"},{"name":"nat.partrec.code.evaln_prim","kind":"theorem","statement":"theorem nat.partrec.code.evaln_prim  : primrec (λ (a : (ℕ × nat.partrec.code) × ℕ), nat.partrec.code.evaln a.fst.fst a.fst.snd a.snd)","theorem":" : primrec (λ (a : (ℕ × nat.partrec.code) × ℕ), nat.partrec.code.evaln a.fst.fst a.fst.snd a.snd)","args":"","doc_string":"The `nat.partrec.code.evaln` function is primitive recursive.","type":"primrec (λ (a : (ℕ × nat.partrec.code) × ℕ), nat.partrec.code.evaln a.fst.fst a.fst.snd a.snd)"},{"name":"matrix.special_linear_group.coe_GL_pos_coe_GL_coe_matrix","kind":"theorem","statement":"theorem matrix.special_linear_group.coe_GL_pos_coe_GL_coe_matrix {n : Type u} [decidable_eq n] [fintype n] {R : Type v} [linear_ordered_comm_ring R] (g : matrix.special_linear_group n R) : ↑↑↑g = ↑g","theorem":"{n : Type u} [decidable_eq n] [fintype n] {R : Type v} [linear_ordered_comm_ring R] (g : matrix.special_linear_group n R) : ↑↑↑g = ↑g","args":"{n : Type u} [decidable_eq n] [fintype n] {R : Type v} [linear_ordered_comm_ring R] (g : matrix.special_linear_group n R)","doc_string":" Coercing a `special_linear_group` via `GL_pos` and `GL` is the same as coercing striaght to a matrix.","type":"↑↑↑g = ↑g"},{"name":"right.add_pos'","kind":"theorem","statement":"theorem right.add_pos' {α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α (function.swap has_add.add) has_le.le] {a b : α} (ha : 0 < a) (hb : 0 < b) : 0 < a + b","theorem":"{α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α (function.swap has_add.add) has_le.le] {a b : α} (ha : 0 < a) (hb : 0 < b) : 0 < a + b","args":"{α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α (function.swap has_add.add) has_le.le] {a b : α} (ha : 0 < a) (hb : 0 < b)","doc_string":"Assumes right covariance. The lemma assuming left covariance is `left.add_pos'`.","type":"0 < a + b"},{"name":"list.pairwise.pw_filter","kind":"theorem","statement":"theorem list.pairwise.pw_filter {α : Type u_1} {R : α → α → Prop} [decidable_rel R] {l : list α} : list.pairwise R l → list.pw_filter R l = l","theorem":"{α : Type u_1} {R : α → α → Prop} [decidable_rel R] {l : list α} : list.pairwise R l → list.pw_filter R l = l","args":"{α : Type u_1} {R : α → α → Prop} [decidable_rel R] {l : list α}","doc_string":"**Alias** of the reverse direction of list.pw_filter_eq_self`.","type":"list.pairwise R l → list.pw_filter R l = l"},{"name":"list.comp_map","kind":"theorem","statement":"theorem list.comp_map {α : Type u} {β : Type v} {γ : Type w} (h : β → γ) (g : α → β) (l : list α) : list.map (h ∘ g) l = list.map h (list.map g l)","theorem":"{α : Type u} {β : Type v} {γ : Type w} (h : β → γ) (g : α → β) (l : list α) : list.map (h ∘ g) l = list.map h (list.map g l)","args":"{α : Type u} {β : Type v} {γ : Type w} (h : β → γ) (g : α → β) (l : list α)","doc_string":"A single `list.map` of a composition of functions is equal to composing a `list.map` with another `list.map`, fully applied. This is the reverse direction of `list.map_map`.","type":"list.map (h ∘ g) l = list.map h (list.map g l)"},{"name":"category_theory.exact_inl_snd","kind":"theorem","statement":"theorem category_theory.exact_inl_snd {𝒜 : Type u_1} [category_theory.category 𝒜] [category_theory.preadditive 𝒜] [category_theory.limits.has_kernels 𝒜] [category_theory.limits.has_images 𝒜] [category_theory.limits.has_binary_biproducts 𝒜] (A B : 𝒜) : category_theory.exact category_theory.limits.biprod.inl category_theory.limits.biprod.snd","theorem":"{𝒜 : Type u_1} [category_theory.category 𝒜] [category_theory.preadditive 𝒜] [category_theory.limits.has_kernels 𝒜] [category_theory.limits.has_images 𝒜] [category_theory.limits.has_binary_biproducts 𝒜] (A B : 𝒜) : category_theory.exact category_theory.limits.biprod.inl category_theory.limits.biprod.snd","args":"{𝒜 : Type u_1} [category_theory.category 𝒜] [category_theory.preadditive 𝒜] [category_theory.limits.has_kernels 𝒜] [category_theory.limits.has_images 𝒜] [category_theory.limits.has_binary_biproducts 𝒜] (A B : 𝒜)","doc_string":"The sequence `A ⟶ A ⊞ B ⟶ B` is exact.","type":"category_theory.exact category_theory.limits.biprod.inl category_theory.limits.biprod.snd"},{"name":"finset.up_shadow_monotone","kind":"theorem","statement":"theorem finset.up_shadow_monotone {α : Type u_1} [decidable_eq α] [fintype α] : monotone finset.up_shadow","theorem":"{α : Type u_1} [decidable_eq α] [fintype α] : monotone finset.up_shadow","args":"{α : Type u_1} [decidable_eq α] [fintype α]","doc_string":"The upper shadow is monotone.","type":"monotone finset.up_shadow"},{"name":"zero_dvd_iff","kind":"theorem","statement":"theorem zero_dvd_iff {α : Type u_1} [semigroup_with_zero α] {a : α} : 0 ∣ a ↔ a = 0","theorem":"{α : Type u_1} [semigroup_with_zero α] {a : α} : 0 ∣ a ↔ a = 0","args":"{α : Type u_1} [semigroup_with_zero α] {a : α}","doc_string":"Given an element `a` of a commutative semigroup with zero, there exists another element whose    product with zero equals `a` iff `a` equals zero.","type":"0 ∣ a ↔ a = 0"},{"name":"lt_add_of_neg_add_lt_left","kind":"theorem","statement":"theorem lt_add_of_neg_add_lt_left {α : Type u} [add_group α] [has_lt α] [covariant_class α α has_add.add has_lt.lt] {a b c : α} : -b + a < c → a < b + c","theorem":"{α : Type u} [add_group α] [has_lt α] [covariant_class α α has_add.add has_lt.lt] {a b c : α} : -b + a < c → a < b + c","args":"{α : Type u} [add_group α] [has_lt α] [covariant_class α α has_add.add has_lt.lt] {a b c : α}","doc_string":"**Alias** of lt_mul_of_inv_mul_lt`.","type":"-b + a < c → a < b + c"},{"name":"has_sbtw.sbtw.not_btw","kind":"theorem","statement":"theorem has_sbtw.sbtw.not_btw {α : Type u_1} [circular_preorder α] {a b c : α} (h : has_sbtw.sbtw a b c) : ¬has_btw.btw c b a","theorem":"{α : Type u_1} [circular_preorder α] {a b c : α} (h : has_sbtw.sbtw a b c) : ¬has_btw.btw c b a","args":"{α : Type u_1} [circular_preorder α] {a b c : α} (h : has_sbtw.sbtw a b c)","doc_string":"**Alias** of not_btw_of_sbtw`.","type":"¬has_btw.btw c b a"},{"name":"ordered_add_comm_group.le_of_add_le_add_left","kind":"theorem","statement":"theorem ordered_add_comm_group.le_of_add_le_add_left {α : Type u_1} [has_add α] [has_le α] [contravariant_class α α has_add.add has_le.le] {a b c : α} (bc : a + b ≤ a + c) : b ≤ c","theorem":"{α : Type u_1} [has_add α] [has_le α] [contravariant_class α α has_add.add has_le.le] {a b c : α} (bc : a + b ≤ a + c) : b ≤ c","args":"{α : Type u_1} [has_add α] [has_le α] [contravariant_class α α has_add.add has_le.le] {a b c : α} (bc : a + b ≤ a + c)","doc_string":"**Alias** of le_of_mul_le_mul_left'`.","type":"b ≤ c"},{"name":"free_group.reduce.self","kind":"theorem","statement":"theorem free_group.reduce.self {α : Type u} {L : list (α × bool)} [decidable_eq α] : free_group.mk (free_group.reduce L) = free_group.mk L","theorem":"{α : Type u} {L : list (α × bool)} [decidable_eq α] : free_group.mk (free_group.reduce L) = free_group.mk L","args":"{α : Type u} {L : list (α × bool)} [decidable_eq α]","doc_string":" A word and its maximal reduction correspond to the same element of the free group.","type":"free_group.mk (free_group.reduce L) = free_group.mk L"},{"name":"padic_val_nat.one","kind":"theorem","statement":"theorem padic_val_nat.one {p : ℕ} : padic_val_nat p 1 = 0","theorem":"{p : ℕ} : padic_val_nat p 1 = 0","args":"{p : ℕ}","doc_string":"`padic_val_nat p 1` is 0 for any `p`.","type":"padic_val_nat p 1 = 0"},{"name":"subtype.prop","kind":"theorem","statement":"theorem subtype.prop {α : Sort u_1} {p : α → Prop} (x : subtype p) : p ↑x","theorem":"{α : Sort u_1} {p : α → Prop} (x : subtype p) : p ↑x","args":"{α : Sort u_1} {p : α → Prop} (x : subtype p)","doc_string":"A version of `x.property` or `x.2` where `p` is syntactically applied to the coercion of `x`  instead of `x.1`. A similar result is `subtype.mem` in `data.set.basic`.","type":"p ↑x"},{"name":"continuous_map.continuous_restrict","kind":"theorem","statement":"theorem continuous_map.continuous_restrict {α : Type u_1} {β : Type u_2} [topological_space α] [topological_space β] (s : set α) : continuous (λ (F : C(α, β)), continuous_map.restrict s F)","theorem":"{α : Type u_1} {β : Type u_2} [topological_space α] [topological_space β] (s : set α) : continuous (λ (F : C(α, β)), continuous_map.restrict s F)","args":"{α : Type u_1} {β : Type u_2} [topological_space α] [topological_space β] (s : set α)","doc_string":" For any subset `s` of `α`, the restriction of continuous functions to `s` is continuous as a function from `C(α, β)` to `C(s, β)` with their respective compact-open topologies.","type":"continuous (λ (F : C(α, β)), continuous_map.restrict s F)"},{"name":"matrix.transpose_apply","kind":"theorem","statement":"theorem matrix.transpose_apply {m : Type u_2} {n : Type u_3} {α : Type v} (M : matrix m n α) (i : m) (j : n) : M.transpose j i = M i j","theorem":"{m : Type u_2} {n : Type u_3} {α : Type v} (M : matrix m n α) (i : m) (j : n) : M.transpose j i = M i j","args":"{m : Type u_2} {n : Type u_3} {α : Type v} (M : matrix m n α) (i : m) (j : n)","doc_string":"Tell `simp` what the entries are in a transposed matrix.  Compare with `mul_apply`, `diagonal_apply_eq`, etc.","type":"M.transpose j i = M i j"},{"name":"topological_add_group.continuous_conj","kind":"theorem","statement":"theorem topological_add_group.continuous_conj {G : Type w} [topological_space G] [has_neg G] [has_add G] [has_continuous_add G] (g : G) : continuous (λ (h : G), g + h + -g)","theorem":"{G : Type w} [topological_space G] [has_neg G] [has_add G] [has_continuous_add G] (g : G) : continuous (λ (h : G), g + h + -g)","args":"{G : Type w} [topological_space G] [has_neg G] [has_add G] [has_continuous_add G] (g : G)","doc_string":"Conjugation by a fixed element is continuous when `add` is continuous.","type":"continuous (λ (h : G), g + h + -g)"},{"name":"finprod_mem_one","kind":"theorem","statement":"theorem finprod_mem_one {α : Type u_1} {M : Type u_5} [comm_monoid M] (s : set α) : finprod (λ (i : α), finprod (λ (H : i ∈ s), 1)) = 1","theorem":"{α : Type u_1} {M : Type u_5} [comm_monoid M] (s : set α) : finprod (λ (i : α), finprod (λ (H : i ∈ s), 1)) = 1","args":"{α : Type u_1} {M : Type u_5} [comm_monoid M] (s : set α)","doc_string":"The product of the constant function `1` over any set equals `1`.","type":"finprod (λ (i : α), finprod (λ (H : i ∈ s), 1)) = 1"},{"name":"multiples.zero_mem","kind":"theorem","statement":"theorem multiples.zero_mem {M : Type u_1} [add_monoid M] {x : M} : 0 ∈ multiples x","theorem":"{M : Type u_1} [add_monoid M] {x : M} : 0 ∈ multiples x","args":"{M : Type u_1} [add_monoid M] {x : M}","doc_string":"0 is in the set of natural number multiples of an element of an `add_monoid`.","type":"0 ∈ multiples x"},{"name":"comp_mul_left","kind":"theorem","statement":"theorem comp_mul_left {α : Type u_1} [semigroup α] (x y : α) : has_mul.mul x ∘ has_mul.mul y = has_mul.mul (x * y)","theorem":"{α : Type u_1} [semigroup α] (x y : α) : has_mul.mul x ∘ has_mul.mul y = has_mul.mul (x * y)","args":"{α : Type u_1} [semigroup α] (x y : α)","doc_string":"Composing two multiplications on the left by `y` then `x` is equal to a multiplication on the left by `x * y`.","type":"has_mul.mul x ∘ has_mul.mul y = has_mul.mul (x * y)"},{"name":"div_div_self","kind":"theorem","statement":"theorem div_div_self {G₀ : Type u_2} [group_with_zero G₀] (a : G₀) : a / (a / a) = a","theorem":"{G₀ : Type u_2} [group_with_zero G₀] (a : G₀) : a / (a / a) = a","args":"{G₀ : Type u_2} [group_with_zero G₀] (a : G₀)","doc_string":" Dividing `a` by the result of dividing `a` by itself results in `a` (whether or not `a` is zero).","type":"a / (a / a) = a"},{"name":"part.ext","kind":"theorem","statement":"theorem part.ext {α : Type u_1} {o p : part α} (H : ∀ (a : α), a ∈ o ↔ a ∈ p) : o = p","theorem":"{α : Type u_1} {o p : part α} (H : ∀ (a : α), a ∈ o ↔ a ∈ p) : o = p","args":"{α : Type u_1} {o p : part α} (H : ∀ (a : α), a ∈ o ↔ a ∈ p)","doc_string":"`part` extensionality","type":"o = p"},{"name":"rel_hom.coe_fn_injective","kind":"theorem","statement":"theorem rel_hom.coe_fn_injective {α : Type u_1} {β : Type u_2} {r : α → α → Prop} {s : β → β → Prop} : function.injective coe_fn","theorem":"{α : Type u_1} {β : Type u_2} {r : α → α → Prop} {s : β → β → Prop} : function.injective coe_fn","args":"{α : Type u_1} {β : Type u_2} {r : α → α → Prop} {s : β → β → Prop}","doc_string":"The map `coe_fn : (r →r s) → (α → β)` is injective.","type":"function.injective coe_fn"},{"name":"is_add_hom.id","kind":"theorem","statement":"theorem is_add_hom.id {α : Type u} [has_add α] : is_add_hom id","theorem":"{α : Type u} [has_add α] : is_add_hom id","args":"{α : Type u} [has_add α]","doc_string":"The identity map preserves addition","type":"is_add_hom id"},{"name":"char_prime_of_ne_zero","kind":"theorem","statement":"theorem char_prime_of_ne_zero (R : Type u) [semiring R] [nontrivial R] [no_zero_divisors R] {p : ℕ} [hp : char_p R p] (p_ne_zero : p ≠ 0) : nat.prime p","theorem":"(R : Type u) [semiring R] [nontrivial R] [no_zero_divisors R] {p : ℕ} [hp : char_p R p] (p_ne_zero : p ≠ 0) : nat.prime p","args":"(R : Type u) [semiring R] [nontrivial R] [no_zero_divisors R] {p : ℕ} [hp : char_p R p] (p_ne_zero : p ≠ 0)","doc_string":"A helper lemma: the characteristic is prime if it is non-zero.","type":"nat.prime p"},{"name":"has_dvd.dvd.trans","kind":"theorem","statement":"theorem has_dvd.dvd.trans {α : Type u_1} [semigroup α] {a b c : α} : a ∣ b → b ∣ c → a ∣ c","theorem":"{α : Type u_1} [semigroup α] {a b c : α} : a ∣ b → b ∣ c → a ∣ c","args":"{α : Type u_1} [semigroup α] {a b c : α}","doc_string":"**Alias** of dvd_trans`.","type":"a ∣ b → b ∣ c → a ∣ c"},{"name":"list.sorted_insertion_sort","kind":"theorem","statement":"theorem list.sorted_insertion_sort {α : Type uu} (r : α → α → Prop) [decidable_rel r] [is_total α r] [is_trans α r] (l : list α) : list.sorted r (list.insertion_sort r l)","theorem":"{α : Type uu} (r : α → α → Prop) [decidable_rel r] [is_total α r] [is_trans α r] (l : list α) : list.sorted r (list.insertion_sort r l)","args":"{α : Type uu} (r : α → α → Prop) [decidable_rel r] [is_total α r] [is_trans α r] (l : list α)","doc_string":"The list `list.insertion_sort r l` is `list.sorted` with respect to `r`.","type":"list.sorted r (list.insertion_sort r l)"},{"name":"function.inv_on_fixed_pts_comp","kind":"theorem","statement":"theorem function.inv_on_fixed_pts_comp {α : Type u} {β : Type v} (f : α → β) (g : β → α) : set.inv_on f g (function.fixed_points (f ∘ g)) (function.fixed_points (g ∘ f))","theorem":"{α : Type u} {β : Type v} (f : α → β) (g : β → α) : set.inv_on f g (function.fixed_points (f ∘ g)) (function.fixed_points (g ∘ f))","args":"{α : Type u} {β : Type v} (f : α → β) (g : β → α)","doc_string":" Any two maps `f : α → β` and `g : β → α` are inverse of each other on the sets of fixed points of `f ∘ g` and `g ∘ f`, respectively.","type":"set.inv_on f g (function.fixed_points (f ∘ g)) (function.fixed_points (g ∘ f))"},{"name":"int.dvd_sub_of_mod_eq","kind":"theorem","statement":"theorem int.dvd_sub_of_mod_eq {a b c : ℤ} (h : a % b = c) : b ∣ a - c","theorem":"{a b c : ℤ} (h : a % b = c) : b ∣ a - c","args":"{a b c : ℤ} (h : a % b = c)","doc_string":"If `a % b = c` then `b` divides `a - c`.","type":"b ∣ a - c"},{"name":"composition.sigma_eq_iff_blocks_eq","kind":"theorem","statement":"theorem composition.sigma_eq_iff_blocks_eq {c c' : Σ (n : ℕ), composition n} : c = c' ↔ c.snd.blocks = c'.snd.blocks","theorem":"{c c' : Σ (n : ℕ), composition n} : c = c' ↔ c.snd.blocks = c'.snd.blocks","args":"{c c' : Σ (n : ℕ), composition n}","doc_string":" Two compositions (possibly of different integers) coincide if and only if they have the same sequence of blocks.","type":"c = c' ↔ c.snd.blocks = c'.snd.blocks"},{"name":"has_dvd.dvd.nat_cast","kind":"theorem","statement":"theorem has_dvd.dvd.nat_cast {α : Type u_1} [semiring α] {m n : ℕ} (h : m ∣ n) : ↑m ∣ ↑n","theorem":"{α : Type u_1} [semiring α] {m n : ℕ} (h : m ∣ n) : ↑m ∣ ↑n","args":"{α : Type u_1} [semiring α] {m n : ℕ} (h : m ∣ n)","doc_string":"**Alias** of nat.coe_nat_dvd`.","type":"↑m ∣ ↑n"},{"name":"add_submonoid.add_mem","kind":"theorem","statement":"theorem add_submonoid.add_mem {M : Type u_1} [add_zero_class M] (S : add_submonoid M) {x y : M} : x ∈ S → y ∈ S → x + y ∈ S","theorem":"{M : Type u_1} [add_zero_class M] (S : add_submonoid M) {x y : M} : x ∈ S → y ∈ S → x + y ∈ S","args":"{M : Type u_1} [add_zero_class M] (S : add_submonoid M) {x y : M}","doc_string":"An `add_submonoid` is closed under addition.","type":"x ∈ S → y ∈ S → x + y ∈ S"},{"name":"is_of_fin_add_order.neg","kind":"theorem","statement":"theorem is_of_fin_add_order.neg {G : Type u} [add_group G] {x : G} (hx : is_of_fin_add_order x) : is_of_fin_add_order (-x)","theorem":"{G : Type u} [add_group G] {x : G} (hx : is_of_fin_add_order x) : is_of_fin_add_order (-x)","args":"{G : Type u} [add_group G] {x : G} (hx : is_of_fin_add_order x)","doc_string":"Inverses of elements of finite additive order have finite additive order.","type":"is_of_fin_add_order (-x)"},{"name":"submonoid.multiset_prod_mem","kind":"theorem","statement":"theorem submonoid.multiset_prod_mem {M : Type u_1} [comm_monoid M] (S : submonoid M) (m : multiset M) (hm : ∀ (a : M), a ∈ m → a ∈ S) : m.prod ∈ S","theorem":"{M : Type u_1} [comm_monoid M] (S : submonoid M) (m : multiset M) (hm : ∀ (a : M), a ∈ m → a ∈ S) : m.prod ∈ S","args":"{M : Type u_1} [comm_monoid M] (S : submonoid M) (m : multiset M) (hm : ∀ (a : M), a ∈ m → a ∈ S)","doc_string":"Product of a multiset of elements in a submonoid of a `comm_monoid` is in the submonoid.","type":"m.prod ∈ S"},{"name":"is_unit_iff_not_dvd_char","kind":"theorem","statement":"theorem is_unit_iff_not_dvd_char (R : Type u_1) [comm_ring R] [fintype R] (p : ℕ) [fact (nat.prime p)] : is_unit ↑p ↔ ¬p ∣ ring_char R","theorem":"(R : Type u_1) [comm_ring R] [fintype R] (p : ℕ) [fact (nat.prime p)] : is_unit ↑p ↔ ¬p ∣ ring_char R","args":"(R : Type u_1) [comm_ring R] [fintype R] (p : ℕ) [fact (nat.prime p)]","doc_string":" A prime `p` is a unit in a finite commutative ring `R` iff it does not divide the characteristic.","type":"is_unit ↑p ↔ ¬p ∣ ring_char R"},{"name":"dense.of_closure","kind":"theorem","statement":"theorem dense.of_closure {α : Type u} [topological_space α] {s : set α} : dense (closure s) → dense s","theorem":"{α : Type u} [topological_space α] {s : set α} : dense (closure s) → dense s","args":"{α : Type u} [topological_space α] {s : set α}","doc_string":"**Alias** of the forward direction of dense_closure`.","type":"dense (closure s) → dense s"},{"name":"is_locally_constant.desc","kind":"theorem","statement":"theorem is_locally_constant.desc {X : Type u_1} [topological_space X] {α : Type u_2} {β : Type u_3} (f : X → α) (g : α → β) (h : is_locally_constant (g ∘ f)) (inj : function.injective g) : is_locally_constant f","theorem":"{X : Type u_1} [topological_space X] {α : Type u_2} {β : Type u_3} (f : X → α) (g : α → β) (h : is_locally_constant (g ∘ f)) (inj : function.injective g) : is_locally_constant f","args":"{X : Type u_1} [topological_space X] {α : Type u_2} {β : Type u_3} (f : X → α) (g : α → β) (h : is_locally_constant (g ∘ f)) (inj : function.injective g)","doc_string":" If a composition of a function `f` followed by an injection `g` is locally constant, then the locally constant property descends to `f`.","type":"is_locally_constant f"},{"name":"int.dvd_of_dvd_mul_right_of_gcd_one","kind":"theorem","statement":"theorem int.dvd_of_dvd_mul_right_of_gcd_one {a b c : ℤ} (habc : a ∣ b * c) (hab : a.gcd b = 1) : a ∣ c","theorem":"{a b c : ℤ} (habc : a ∣ b * c) (hab : a.gcd b = 1) : a ∣ c","args":"{a b c : ℤ} (habc : a ∣ b * c) (hab : a.gcd b = 1)","doc_string":" Euclid's lemma: if `a ∣ b * c` and `gcd a b = 1` then `a ∣ c`. Compare with `is_coprime.dvd_of_dvd_mul_right` and `unique_factorization_monoid.dvd_of_dvd_mul_right_of_no_prime_factors`","type":"a ∣ c"},{"name":"real.sq_sin_pi_div_three","kind":"theorem","statement":"theorem real.sq_sin_pi_div_three  : real.sin (real.pi / 3) ^ 2 = 3 / 4","theorem":" : real.sin (real.pi / 3) ^ 2 = 3 / 4","args":"","doc_string":" The square of the sine of `π / 3` is `3 / 4` (this is sometimes more convenient than the result for cosine itself).","type":"real.sin (real.pi / 3) ^ 2 = 3 / 4"},{"name":"quaternion_group.quaternion_group_one_is_cyclic","kind":"theorem","statement":"theorem quaternion_group.quaternion_group_one_is_cyclic  : is_cyclic (quaternion_group 1)","theorem":" : is_cyclic (quaternion_group 1)","args":"","doc_string":"In the special case `n = 1`, `quaternion 1` is a cyclic group (of order `4`).","type":"is_cyclic (quaternion_group 1)"},{"name":"commute.mul_left","kind":"theorem","statement":"theorem commute.mul_left {S : Type u_1} [semigroup S] {a b c : S} (hac : commute a c) (hbc : commute b c) : commute (a * b) c","theorem":"{S : Type u_1} [semigroup S] {a b c : S} (hac : commute a c) (hbc : commute b c) : commute (a * b) c","args":"{S : Type u_1} [semigroup S] {a b c : S} (hac : commute a c) (hbc : commute b c)","doc_string":"If both `a` and `b` commute with `c`, then their product commutes with `c`.","type":"commute (a * b) c"},{"name":"left.add_pos_of_pos_of_nonneg","kind":"theorem","statement":"theorem left.add_pos_of_pos_of_nonneg {α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α has_add.add has_le.le] {a b : α} (ha : 0 < a) (hb : 0 ≤ b) : 0 < a + b","theorem":"{α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α has_add.add has_le.le] {a b : α} (ha : 0 < a) (hb : 0 ≤ b) : 0 < a + b","args":"{α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α has_add.add has_le.le] {a b : α} (ha : 0 < a) (hb : 0 ≤ b)","doc_string":"Assumes left covariance. The lemma assuming right covariance is `right.add_pos_of_pos_of_nonneg`.","type":"0 < a + b"},{"name":"real.cos_pi_div_six","kind":"theorem","statement":"theorem real.cos_pi_div_six  : real.cos (real.pi / 6) = real.sqrt 3 / 2","theorem":" : real.cos (real.pi / 6) = real.sqrt 3 / 2","args":"","doc_string":"The cosine of `π / 6` is `√3 / 2`.","type":"real.cos (real.pi / 6) = real.sqrt 3 / 2"},{"name":"surjective_quot_mk","kind":"theorem","statement":"theorem surjective_quot_mk {α : Sort u_1} (r : α → α → Prop) : function.surjective (quot.mk r)","theorem":"{α : Sort u_1} (r : α → α → Prop) : function.surjective (quot.mk r)","args":"{α : Sort u_1} (r : α → α → Prop)","doc_string":"`quot.mk r` is a surjective function.","type":"function.surjective (quot.mk r)"},{"name":"is_add_monoid_hom.is_add_monoid_hom_mul_left","kind":"theorem","statement":"theorem is_add_monoid_hom.is_add_monoid_hom_mul_left {γ : Type u_1} [non_unital_non_assoc_semiring γ] (x : γ) : is_add_monoid_hom (λ (y : γ), x * y)","theorem":"{γ : Type u_1} [non_unital_non_assoc_semiring γ] (x : γ) : is_add_monoid_hom (λ (y : γ), x * y)","args":"{γ : Type u_1} [non_unital_non_assoc_semiring γ] (x : γ)","doc_string":"Left multiplication in a ring is an additive monoid morphism.","type":"is_add_monoid_hom (λ (y : γ), x * y)"},{"name":"add_neg_of_nonpos_of_neg","kind":"theorem","statement":"theorem add_neg_of_nonpos_of_neg {α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α has_add.add has_lt.lt] {a b : α} (ha : a ≤ 0) (hb : b < 0) : a + b < 0","theorem":"{α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α has_add.add has_lt.lt] {a b : α} (ha : a ≤ 0) (hb : b < 0) : a + b < 0","args":"{α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α has_add.add has_lt.lt] {a b : α} (ha : a ≤ 0) (hb : b < 0)","doc_string":"**Alias** of `left.add_neg_of_nonpos_of_neg`.","type":"a + b < 0"},{"name":"is_clopen.frontier_eq","kind":"theorem","statement":"theorem is_clopen.frontier_eq {α : Type u} [topological_space α] {s : set α} : is_clopen s → frontier s = ∅","theorem":"{α : Type u} [topological_space α] {s : set α} : is_clopen s → frontier s = ∅","args":"{α : Type u} [topological_space α] {s : set α}","doc_string":"**Alias** of the forward direction of is_clopen_iff_frontier_eq_empty`.","type":"is_clopen s → frontier s = ∅"},{"name":"lie_algebra.is_engelian_of_is_noetherian","kind":"theorem","statement":"theorem lie_algebra.is_engelian_of_is_noetherian {R : Type u₁} {L : Type u₂} [comm_ring R] [lie_ring L] [lie_algebra R L] [is_noetherian R L] : lie_algebra.is_engelian R L","theorem":"{R : Type u₁} {L : Type u₂} [comm_ring R] [lie_ring L] [lie_algebra R L] [is_noetherian R L] : lie_algebra.is_engelian R L","args":"{R : Type u₁} {L : Type u₂} [comm_ring R] [lie_ring L] [lie_algebra R L] [is_noetherian R L]","doc_string":" *Engel's theorem*.  Note that this implies all traditional forms of Engel's theorem via `lie_module.nontrivial_max_triv_of_is_nilpotent`, `lie_module.is_nilpotent_iff_forall`, `lie_algebra.is_nilpotent_iff_forall`.","type":"lie_algebra.is_engelian R L"},{"name":"matrix.det_fin_one","kind":"theorem","statement":"theorem matrix.det_fin_one {R : Type v} [comm_ring R] (A : matrix (fin 1) (fin 1) R) : A.det = A 0 0","theorem":"{R : Type v} [comm_ring R] (A : matrix (fin 1) (fin 1) R) : A.det = A 0 0","args":"{R : Type v} [comm_ring R] (A : matrix (fin 1) (fin 1) R)","doc_string":"Determinant of 1x1 matrix","type":"A.det = A 0 0"},{"name":"exists_open_nhds_zero_add_subset","kind":"theorem","statement":"theorem exists_open_nhds_zero_add_subset {M : Type u_4} [topological_space M] [add_monoid M] [has_continuous_add M] {U : set M} (hU : U ∈ nhds 0) : ∃ (V : set M), is_open V ∧ 0 ∈ V ∧ V + V ⊆ U","theorem":"{M : Type u_4} [topological_space M] [add_monoid M] [has_continuous_add M] {U : set M} (hU : U ∈ nhds 0) : ∃ (V : set M), is_open V ∧ 0 ∈ V ∧ V + V ⊆ U","args":"{M : Type u_4} [topological_space M] [add_monoid M] [has_continuous_add M] {U : set M} (hU : U ∈ nhds 0)","doc_string":"Given a open neighborhood `U` of `0` there is a open neighborhood `V` of `0`   such that `V + V ⊆ U`.","type":"∃ (V : set M), is_open V ∧ 0 ∈ V ∧ V + V ⊆ U"},{"name":"real.sinh_strict_mono","kind":"theorem","statement":"theorem real.sinh_strict_mono  : strict_mono real.sinh","theorem":" : strict_mono real.sinh","args":"","doc_string":"`sinh` is strictly monotone.","type":"strict_mono real.sinh"},{"name":"free_group.reduce.red","kind":"theorem","statement":"theorem free_group.reduce.red {α : Type u} {L : list (α × bool)} [decidable_eq α] : free_group.red L (free_group.reduce L)","theorem":"{α : Type u} {L : list (α × bool)} [decidable_eq α] : free_group.red L (free_group.reduce L)","args":"{α : Type u} {L : list (α × bool)} [decidable_eq α]","doc_string":" The first theorem that characterises the function `reduce`: a word reduces to its maximal reduction.","type":"free_group.red L (free_group.reduce L)"},{"name":"fin.coe_coe_eq_self","kind":"theorem","statement":"theorem fin.coe_coe_eq_self {n : ℕ} (a : fin (n + 1)) : ↑↑a = a","theorem":"{n : ℕ} (a : fin (n + 1)) : ↑↑a = a","args":"{n : ℕ} (a : fin (n + 1))","doc_string":" Converting a `fin (n + 1)` to `ℕ` and back results in the same value.","type":"↑↑a = a"},{"name":"reflexive.rel_of_ne_imp","kind":"theorem","statement":"theorem reflexive.rel_of_ne_imp {α : Type u_1} {r : α → α → Prop} (h : reflexive r) {x y : α} (hr : x ≠ y → r x y) : r x y","theorem":"{α : Type u_1} {r : α → α → Prop} (h : reflexive r) {x y : α} (hr : x ≠ y → r x y) : r x y","args":"{α : Type u_1} {r : α → α → Prop} (h : reflexive r) {x y : α} (hr : x ≠ y → r x y)","doc_string":" To show a reflexive relation `r : α → α → Prop` holds over `x y : α`, it suffices to show it holds when `x ≠ y`.","type":"r x y"},{"name":"smul_zero'","kind":"theorem","statement":"theorem smul_zero' {R : Type u_1} (M : Type u_3) [has_zero R] [has_zero M] [smul_with_zero R M] (r : R) : r • 0 = 0","theorem":"{R : Type u_1} (M : Type u_3) [has_zero R] [has_zero M] [smul_with_zero R M] (r : R) : r • 0 = 0","args":"{R : Type u_1} (M : Type u_3) [has_zero R] [has_zero M] [smul_with_zero R M] (r : R)","doc_string":"Note that this lemma has different typeclass assumptions to `smul_zero`.","type":"r • 0 = 0"},{"name":"subgroup.div_mem","kind":"theorem","statement":"theorem subgroup.div_mem {G : Type u_1} [group G] (H : subgroup G) {x y : G} (hx : x ∈ H) (hy : y ∈ H) : x / y ∈ H","theorem":"{G : Type u_1} [group G] (H : subgroup G) {x y : G} (hx : x ∈ H) (hy : y ∈ H) : x / y ∈ H","args":"{G : Type u_1} [group G] (H : subgroup G) {x y : G} (hx : x ∈ H) (hy : y ∈ H)","doc_string":"A subgroup is closed under division.","type":"x / y ∈ H"},{"name":"gold_irrational","kind":"theorem","statement":"theorem gold_irrational  : irrational golden_ratio","theorem":" : irrational golden_ratio","args":"","doc_string":"The golden ratio is irrational.","type":"irrational golden_ratio"},{"name":"eq.trans_lt","kind":"theorem","statement":"theorem eq.trans_lt {α : Type u} [preorder α] {a b c : α} (hab : a = b) (hbc : b < c) : a < c","theorem":"{α : Type u} [preorder α] {a b c : α} (hab : a = b) (hbc : b < c) : a < c","args":"{α : Type u} [preorder α] {a b c : α} (hab : a = b) (hbc : b < c)","doc_string":"**Alias** of lt_of_eq_of_lt`.","type":"a < c"},{"name":"list.length_le_sum_of_one_le","kind":"theorem","statement":"theorem list.length_le_sum_of_one_le (L : list ℕ) (h : ∀ (i : ℕ), i ∈ L → 1 ≤ i) : L.length ≤ L.sum","theorem":"(L : list ℕ) (h : ∀ (i : ℕ), i ∈ L → 1 ≤ i) : L.length ≤ L.sum","args":"(L : list ℕ) (h : ∀ (i : ℕ), i ∈ L → 1 ≤ i)","doc_string":" If all elements in a list are bounded below by `1`, then the length of the list is bounded by the sum of the elements.","type":"L.length ≤ L.sum"},{"name":"le_inv_of_le_inv","kind":"theorem","statement":"theorem le_inv_of_le_inv {α : Type u} [group α] [has_le α] [covariant_class α α has_mul.mul has_le.le] [covariant_class α α (function.swap has_mul.mul) has_le.le] {a b : α} : a ≤ b⁻¹ → b ≤ a⁻¹","theorem":"{α : Type u} [group α] [has_le α] [covariant_class α α has_mul.mul has_le.le] [covariant_class α α (function.swap has_mul.mul) has_le.le] {a b : α} : a ≤ b⁻¹ → b ≤ a⁻¹","args":"{α : Type u} [group α] [has_le α] [covariant_class α α has_mul.mul has_le.le] [covariant_class α α (function.swap has_mul.mul) has_le.le] {a b : α}","doc_string":"**Alias** of the forward direction of le_inv'`.","type":"a ≤ b⁻¹ → b ≤ a⁻¹"},{"name":"is_add_group_hom.neg","kind":"theorem","statement":"theorem is_add_group_hom.neg {α : Type u_1} {β : Type u_2} [add_group α] [add_comm_group β] {f : α → β} (hf : is_add_group_hom f) : is_add_group_hom (λ (a : α), -f a)","theorem":"{α : Type u_1} {β : Type u_2} [add_group α] [add_comm_group β] {f : α → β} (hf : is_add_group_hom f) : is_add_group_hom (λ (a : α), -f a)","args":"{α : Type u_1} {β : Type u_2} [add_group α] [add_comm_group β] {f : α → β} (hf : is_add_group_hom f)","doc_string":"The negation of an additive group homomorphism is an additive group homomorphism if the target is commutative.","type":"is_add_group_hom (λ (a : α), -f a)"},{"name":"left.one_le_mul","kind":"theorem","statement":"theorem left.one_le_mul {α : Type u_1} [mul_one_class α] [preorder α] [covariant_class α α has_mul.mul has_le.le] {a b : α} (ha : 1 ≤ a) (hb : 1 ≤ b) : 1 ≤ a * b","theorem":"{α : Type u_1} [mul_one_class α] [preorder α] [covariant_class α α has_mul.mul has_le.le] {a b : α} (ha : 1 ≤ a) (hb : 1 ≤ b) : 1 ≤ a * b","args":"{α : Type u_1} [mul_one_class α] [preorder α] [covariant_class α α has_mul.mul has_le.le] {a b : α} (ha : 1 ≤ a) (hb : 1 ≤ b)","doc_string":" Assumes left covariance. The lemma assuming right covariance is `right.one_le_mul`.","type":"1 ≤ a * b"},{"name":"has_btw.btw.not_sbtw","kind":"theorem","statement":"theorem has_btw.btw.not_sbtw {α : Type u_1} [circular_preorder α] {a b c : α} (h : has_btw.btw a b c) : ¬has_sbtw.sbtw c b a","theorem":"{α : Type u_1} [circular_preorder α] {a b c : α} (h : has_btw.btw a b c) : ¬has_sbtw.sbtw c b a","args":"{α : Type u_1} [circular_preorder α] {a b c : α} (h : has_btw.btw a b c)","doc_string":"**Alias** of not_sbtw_of_btw`.","type":"¬has_sbtw.sbtw c b a"},{"name":"left.add_pos'","kind":"theorem","statement":"theorem left.add_pos' {α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α has_add.add has_le.le] {a b : α} (ha : 0 < a) (hb : 0 < b) : 0 < a + b","theorem":"{α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α has_add.add has_le.le] {a b : α} (ha : 0 < a) (hb : 0 < b) : 0 < a + b","args":"{α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α has_add.add has_le.le] {a b : α} (ha : 0 < a) (hb : 0 < b)","doc_string":"Assumes left covariance. The lemma assuming right covariance is `right.add_pos'`.","type":"0 < a + b"},{"name":"category_theory.limits.has_finite_wide_pushouts_of_has_finite_limits","kind":"theorem","statement":"theorem category_theory.limits.has_finite_wide_pushouts_of_has_finite_limits (C : Type u) [category_theory.category C] [category_theory.limits.has_finite_colimits C] : category_theory.limits.has_finite_wide_pushouts C","theorem":"(C : Type u) [category_theory.category C] [category_theory.limits.has_finite_colimits C] : category_theory.limits.has_finite_wide_pushouts C","args":"(C : Type u) [category_theory.category C] [category_theory.limits.has_finite_colimits C]","doc_string":"Finite wide pushouts are finite colimits, so if `C` has all finite colimits, it also has finite wide pushouts","type":"category_theory.limits.has_finite_wide_pushouts C"},{"name":"add_subsemigroup.add_mem","kind":"theorem","statement":"theorem add_subsemigroup.add_mem {M : Type u_1} [has_add M] (S : add_subsemigroup M) {x y : M} : x ∈ S → y ∈ S → x + y ∈ S","theorem":"{M : Type u_1} [has_add M] (S : add_subsemigroup M) {x y : M} : x ∈ S → y ∈ S → x + y ∈ S","args":"{M : Type u_1} [has_add M] (S : add_subsemigroup M) {x y : M}","doc_string":"An `add_subsemigroup` is closed under addition.","type":"x ∈ S → y ∈ S → x + y ∈ S"},{"name":"int.le_self_pow_two","kind":"theorem","statement":"theorem int.le_self_pow_two (b : ℤ) : b ≤ b ^ 2","theorem":"(b : ℤ) : b ≤ b ^ 2","args":"(b : ℤ)","doc_string":"**Alias** of int.le_self_sq`.","type":"b ≤ b ^ 2"},{"name":"category_theory.limits.initial_mono_class_of_disjoint_coproducts","kind":"theorem","statement":"theorem category_theory.limits.initial_mono_class_of_disjoint_coproducts {C : Type u} [category_theory.category C] [category_theory.limits.coproducts_disjoint C] : category_theory.limits.initial_mono_class C","theorem":"{C : Type u} [category_theory.category C] [category_theory.limits.coproducts_disjoint C] : category_theory.limits.initial_mono_class C","args":"{C : Type u} [category_theory.category C] [category_theory.limits.coproducts_disjoint C]","doc_string":" If `C` has disjoint coproducts, any morphism out of initial is mono. Note it isn't true in general that `C` has strict initial objects, for instance consider the category of types and partial functions.","type":"category_theory.limits.initial_mono_class C"},{"name":"category_theory.preadditive.has_coequalizers_of_has_cokernels","kind":"theorem","statement":"theorem category_theory.preadditive.has_coequalizers_of_has_cokernels {C : Type u} [category_theory.category C] [category_theory.preadditive C] [category_theory.limits.has_cokernels C] : category_theory.limits.has_coequalizers C","theorem":"{C : Type u} [category_theory.category C] [category_theory.preadditive C] [category_theory.limits.has_cokernels C] : category_theory.limits.has_coequalizers C","args":"{C : Type u} [category_theory.category C] [category_theory.preadditive C] [category_theory.limits.has_cokernels C]","doc_string":"If a preadditive category has all cokernels, then it also has all coequalizers.","type":"category_theory.limits.has_coequalizers C"},{"name":"order_top.bdd_above","kind":"theorem","statement":"theorem order_top.bdd_above {γ : Type w} [preorder γ] [order_top γ] (s : set γ) : bdd_above s","theorem":"{γ : Type w} [preorder γ] [order_top γ] (s : set γ) : bdd_above s","args":"{γ : Type w} [preorder γ] [order_top γ] (s : set γ)","doc_string":"When there is a global maximum, every set is bounded above.","type":"bdd_above s"},{"name":"one_le_mul","kind":"theorem","statement":"theorem one_le_mul {α : Type u_1} [mul_one_class α] [preorder α] [covariant_class α α has_mul.mul has_le.le] {a b : α} (ha : 1 ≤ a) (hb : 1 ≤ b) : 1 ≤ a * b","theorem":"{α : Type u_1} [mul_one_class α] [preorder α] [covariant_class α α has_mul.mul has_le.le] {a b : α} (ha : 1 ≤ a) (hb : 1 ≤ b) : 1 ≤ a * b","args":"{α : Type u_1} [mul_one_class α] [preorder α] [covariant_class α α has_mul.mul has_le.le] {a b : α} (ha : 1 ≤ a) (hb : 1 ≤ b)","doc_string":"**Alias** of left.one_le_mul`.","type":"1 ≤ a * b"},{"name":"subgroup.ext","kind":"theorem","statement":"theorem subgroup.ext {G : Type u_1} [group G] {H K : subgroup G} (h : ∀ (x : G), x ∈ H ↔ x ∈ K) : H = K","theorem":"{G : Type u_1} [group G] {H K : subgroup G} (h : ∀ (x : G), x ∈ H ↔ x ∈ K) : H = K","args":"{G : Type u_1} [group G] {H K : subgroup G} (h : ∀ (x : G), x ∈ H ↔ x ∈ K)","doc_string":"Two subgroups are equal if they have the same elements.","type":"H = K"},{"name":"has_lt.lt.ne","kind":"theorem","statement":"theorem has_lt.lt.ne {α : Type u} [preorder α] {a b : α} (h : a < b) : a ≠ b","theorem":"{α : Type u} [preorder α] {a b : α} (h : a < b) : a ≠ b","args":"{α : Type u} [preorder α] {a b : α} (h : a < b)","doc_string":"**Alias** of ne_of_lt`.","type":"a ≠ b"},{"name":"cardinal.bdd_above_range","kind":"theorem","statement":"theorem cardinal.bdd_above_range {ι : Type u} (f : ι → cardinal) : bdd_above (set.range f)","theorem":"{ι : Type u} (f : ι → cardinal) : bdd_above (set.range f)","args":"{ι : Type u} (f : ι → cardinal)","doc_string":"The range of an indexed cardinal function, whose outputs live in a higher universe than the    inputs, is always bounded above.","type":"bdd_above (set.range f)"},{"name":"add_semiconj_by.eq","kind":"theorem","statement":"theorem add_semiconj_by.eq {S : Type u} [has_add S] {a x y : S} (h : add_semiconj_by a x y) : a + x = y + a","theorem":"{S : Type u} [has_add S] {a x y : S} (h : add_semiconj_by a x y) : a + x = y + a","args":"{S : Type u} [has_add S] {a x y : S} (h : add_semiconj_by a x y)","doc_string":"Equality behind `add_semiconj_by a x y`; useful for rewriting.","type":"a + x = y + a"},{"name":"real.real_sqrt_le_nat_sqrt_succ","kind":"theorem","statement":"theorem real.real_sqrt_le_nat_sqrt_succ {a : ℕ} : real.sqrt ↑a ≤ ↑(nat.sqrt a) + 1","theorem":"{a : ℕ} : real.sqrt ↑a ≤ ↑(nat.sqrt a) + 1","args":"{a : ℕ}","doc_string":"The real square root is at most the natural square root plus one","type":"real.sqrt ↑a ≤ ↑(nat.sqrt a) + 1"},{"name":"is_open_map_quotient_mk_mul","kind":"theorem","statement":"theorem is_open_map_quotient_mk_mul {Γ : Type u_4} [group Γ] {T : Type u_5} [topological_space T] [mul_action Γ T] [has_continuous_const_smul Γ T] : is_open_map quotient.mk","theorem":"{Γ : Type u_4} [group Γ] {T : Type u_5} [topological_space T] [mul_action Γ T] [has_continuous_const_smul Γ T] : is_open_map quotient.mk","args":"{Γ : Type u_4} [group Γ] {T : Type u_5} [topological_space T] [mul_action Γ T] [has_continuous_const_smul Γ T]","doc_string":"The quotient map by a group action is open.","type":"is_open_map quotient.mk"},{"name":"pythagorean_triple.mul_iff","kind":"theorem","statement":"theorem pythagorean_triple.mul_iff {x y z : ℤ} (k : ℤ) (hk : k ≠ 0) : pythagorean_triple (k * x) (k * y) (k * z) ↔ pythagorean_triple x y z","theorem":"{x y z : ℤ} (k : ℤ) (hk : k ≠ 0) : pythagorean_triple (k * x) (k * y) (k * z) ↔ pythagorean_triple x y z","args":"{x y z : ℤ} (k : ℤ) (hk : k ≠ 0)","doc_string":" `(k*x, k*y, k*z)` is a Pythagorean triple if and only if `(x, y, z)` is also a triple.","type":"pythagorean_triple (k * x) (k * y) (k * z) ↔ pythagorean_triple x y z"},{"name":"fin.coe_val_of_lt","kind":"theorem","statement":"theorem fin.coe_val_of_lt {n a : ℕ} (h : a < n + 1) : ↑a.val = a","theorem":"{n a : ℕ} (h : a < n + 1) : ↑a.val = a","args":"{n a : ℕ} (h : a < n + 1)","doc_string":" Converting an in-range number to `fin (n + 1)` produces a result whose value is the original number.","type":"↑a.val = a"},{"name":"cardinal.ord_aleph_eq_enum_card","kind":"theorem","statement":"theorem cardinal.ord_aleph_eq_enum_card  : cardinal.ord ∘ cardinal.aleph = ordinal.enum_ord {b : ordinal | b.card.ord = b ∧ ordinal.omega ≤ b}","theorem":" : cardinal.ord ∘ cardinal.aleph = ordinal.enum_ord {b : ordinal | b.card.ord = b ∧ ordinal.omega ≤ b}","args":"","doc_string":"`ord ∘ aleph` enumerates the infinite ordinals that are cardinals.","type":"cardinal.ord ∘ cardinal.aleph = ordinal.enum_ord {b : ordinal | b.card.ord = b ∧ ordinal.omega ≤ b}"},{"name":"category_theory.limits.has_finite_biproducts.of_has_finite_coproducts","kind":"theorem","statement":"theorem category_theory.limits.has_finite_biproducts.of_has_finite_coproducts {C : Type u} [category_theory.category C] [category_theory.preadditive C] [category_theory.limits.has_finite_coproducts C] : category_theory.limits.has_finite_biproducts C","theorem":"{C : Type u} [category_theory.category C] [category_theory.preadditive C] [category_theory.limits.has_finite_coproducts C] : category_theory.limits.has_finite_biproducts C","args":"{C : Type u} [category_theory.category C] [category_theory.preadditive C] [category_theory.limits.has_finite_coproducts C]","doc_string":"A preadditive category with finite coproducts has finite biproducts.","type":"category_theory.limits.has_finite_biproducts C"},{"name":"nnreal.tendsto_tsum_compl_at_top_zero","kind":"theorem","statement":"theorem nnreal.tendsto_tsum_compl_at_top_zero {α : Type u_1} (f : α → nnreal) : filter.tendsto (λ (s : finset α), ∑' (b : {x // x ∉ s}), f ↑b) filter.at_top (nhds 0)","theorem":"{α : Type u_1} (f : α → nnreal) : filter.tendsto (λ (s : finset α), ∑' (b : {x // x ∉ s}), f ↑b) filter.at_top (nhds 0)","args":"{α : Type u_1} (f : α → nnreal)","doc_string":" The sum over the complement of a finset tends to `0` when the finset grows to cover the whole space. This does not need a summability assumption, as otherwise all sums are zero.","type":"filter.tendsto (λ (s : finset α), ∑' (b : {x // x ∉ s}), f ↑b) filter.at_top (nhds 0)"},{"name":"zmod.int_cast_zmod_cast","kind":"theorem","statement":"theorem zmod.int_cast_zmod_cast {n : ℕ} (a : zmod n) : ↑↑a = a","theorem":"{n : ℕ} (a : zmod n) : ↑↑a = a","args":"{n : ℕ} (a : zmod n)","doc_string":" So-named because the outer coercion is `int.cast` into `zmod`. For `int.cast` into an arbitrary ring, see `zmod.int_cast_cast`.","type":"↑↑a = a"},{"name":"is_regular.ne_zero","kind":"theorem","statement":"theorem is_regular.ne_zero {R : Type u_1} {a : R} [mul_zero_class R] [nontrivial R] (la : is_regular a) : a ≠ 0","theorem":"{R : Type u_1} {a : R} [mul_zero_class R] [nontrivial R] (la : is_regular a) : a ≠ 0","args":"{R : Type u_1} {a : R} [mul_zero_class R] [nontrivial R] (la : is_regular a)","doc_string":"A regular element of a `nontrivial` `mul_zero_class` is non-zero.","type":"a ≠ 0"},{"name":"topological_add_group.continuous_conj'","kind":"theorem","statement":"theorem topological_add_group.continuous_conj' {G : Type w} [topological_space G] [has_neg G] [has_add G] [has_continuous_add G] [has_continuous_neg G] (h : G) : continuous (λ (g : G), g + h + -g)","theorem":"{G : Type w} [topological_space G] [has_neg G] [has_add G] [has_continuous_add G] [has_continuous_neg G] (h : G) : continuous (λ (g : G), g + h + -g)","args":"{G : Type w} [topological_space G] [has_neg G] [has_add G] [has_continuous_add G] [has_continuous_neg G] (h : G)","doc_string":"Conjugation acting on fixed element of the additive group is continuous when both   `add` and `neg` are continuous.","type":"continuous (λ (g : G), g + h + -g)"},{"name":"is_open_map_fst","kind":"theorem","statement":"theorem is_open_map_fst {α : Type u} {β : Type v} [topological_space α] [topological_space β] : is_open_map prod.fst","theorem":"{α : Type u} {β : Type v} [topological_space α] [topological_space β] : is_open_map prod.fst","args":"{α : Type u} {β : Type v} [topological_space α] [topological_space β]","doc_string":"The first projection in a product of topological spaces sends open sets to open sets.","type":"is_open_map prod.fst"},{"name":"category_theory.preadditive.has_equalizers_of_has_kernels","kind":"theorem","statement":"theorem category_theory.preadditive.has_equalizers_of_has_kernels {C : Type u} [category_theory.category C] [category_theory.preadditive C] [category_theory.limits.has_kernels C] : category_theory.limits.has_equalizers C","theorem":"{C : Type u} [category_theory.category C] [category_theory.preadditive C] [category_theory.limits.has_kernels C] : category_theory.limits.has_equalizers C","args":"{C : Type u} [category_theory.category C] [category_theory.preadditive C] [category_theory.limits.has_kernels C]","doc_string":"If a preadditive category has all kernels, then it also has all equalizers.","type":"category_theory.limits.has_equalizers C"},{"name":"is_regular_of_cancel_monoid","kind":"theorem","statement":"theorem is_regular_of_cancel_monoid {R : Type u_1} [cancel_monoid R] (g : R) : is_regular g","theorem":"{R : Type u_1} [cancel_monoid R] (g : R) : is_regular g","args":"{R : Type u_1} [cancel_monoid R] (g : R)","doc_string":"Elements of a cancel monoid are regular.  Cancel semigroups do not appear to exist.","type":"is_regular g"},{"name":"is_add_monoid_hom.neg","kind":"theorem","statement":"theorem is_add_monoid_hom.neg {α : Type u_1} {β : Type u_2} [add_zero_class α] [add_comm_group β] {f : α → β} (hf : is_add_monoid_hom f) : is_add_monoid_hom (λ (a : α), -f a)","theorem":"{α : Type u_1} {β : Type u_2} [add_zero_class α] [add_comm_group β] {f : α → β} (hf : is_add_monoid_hom f) : is_add_monoid_hom (λ (a : α), -f a)","args":"{α : Type u_1} {β : Type u_2} [add_zero_class α] [add_comm_group β] {f : α → β} (hf : is_add_monoid_hom f)","doc_string":"The negation of a map which preserves addition, preserves addition when the target is commutative.","type":"is_add_monoid_hom (λ (a : α), -f a)"},{"name":"dense_inducing.separable_space","kind":"theorem","statement":"theorem dense_inducing.separable_space {α : Type u_1} {β : Type u_2} [topological_space α] [topological_space β] {i : α → β} (di : dense_inducing i) [topological_space.separable_space α] : topological_space.separable_space β","theorem":"{α : Type u_1} {β : Type u_2} [topological_space α] [topological_space β] {i : α → β} (di : dense_inducing i) [topological_space.separable_space α] : topological_space.separable_space β","args":"{α : Type u_1} {β : Type u_2} [topological_space α] [topological_space β] {i : α → β} (di : dense_inducing i) [topological_space.separable_space α]","doc_string":"If the domain of a `dense_inducing` map is a separable space, then so is the codomain.","type":"topological_space.separable_space β"},{"name":"funext","kind":"theorem","statement":"theorem funext {α : Sort u} {β : α → Sort v} {f₁ f₂ : Π (x : α), β x} (h : ∀ (x : α), f₁ x = f₂ x) : f₁ = f₂","theorem":"{α : Sort u} {β : α → Sort v} {f₁ f₂ : Π (x : α), β x} (h : ∀ (x : α), f₁ x = f₂ x) : f₁ = f₂","args":"{α : Sort u} {β : α → Sort v} {f₁ f₂ : Π (x : α), β x} (h : ∀ (x : α), f₁ x = f₂ x)","doc_string":"Function extensionality, proven using quotients.","type":"f₁ = f₂"},{"name":"zmod.legendre_sym_eq_pow","kind":"theorem","statement":"theorem zmod.legendre_sym_eq_pow (p : ℕ) (a : ℤ) [hp : fact (nat.prime p)] : ↑(zmod.legendre_sym p a) = ↑a ^ (p / 2)","theorem":"(p : ℕ) (a : ℤ) [hp : fact (nat.prime p)] : ↑(zmod.legendre_sym p a) = ↑a ^ (p / 2)","args":"(p : ℕ) (a : ℤ) [hp : fact (nat.prime p)]","doc_string":"We have the congruence `legendre_sym p a ≡ a ^ (p / 2) mod p`.","type":"↑(zmod.legendre_sym p a) = ↑a ^ (p / 2)"},{"name":"right.one_lt_mul_of_lt_of_le","kind":"theorem","statement":"theorem right.one_lt_mul_of_lt_of_le {α : Type u_1} [mul_one_class α] [preorder α] [covariant_class α α (function.swap has_mul.mul) has_lt.lt] {a b : α} (ha : 1 < a) (hb : 1 ≤ b) : 1 < a * b","theorem":"{α : Type u_1} [mul_one_class α] [preorder α] [covariant_class α α (function.swap has_mul.mul) has_lt.lt] {a b : α} (ha : 1 < a) (hb : 1 ≤ b) : 1 < a * b","args":"{α : Type u_1} [mul_one_class α] [preorder α] [covariant_class α α (function.swap has_mul.mul) has_lt.lt] {a b : α} (ha : 1 < a) (hb : 1 ≤ b)","doc_string":" Assumes right covariance. The lemma assuming left covariance is `left.one_lt_mul_of_lt_of_le`.","type":"1 < a * b"},{"name":"neg_le_self","kind":"theorem","statement":"theorem neg_le_self {α : Type u} [add_group α] [preorder α] [covariant_class α α has_add.add has_le.le] {a : α} (h : 0 ≤ a) : -a ≤ a","theorem":"{α : Type u} [add_group α] [preorder α] [covariant_class α α has_add.add has_le.le] {a : α} (h : 0 ≤ a) : -a ≤ a","args":"{α : Type u} [add_group α] [preorder α] [covariant_class α α has_add.add has_le.le] {a : α} (h : 0 ≤ a)","doc_string":"**Alias** of left.neg_le_self`.","type":"-a ≤ a"},{"name":"padic_val_nat.zero","kind":"theorem","statement":"theorem padic_val_nat.zero {p : ℕ} : padic_val_nat p 0 = 0","theorem":"{p : ℕ} : padic_val_nat p 0 = 0","args":"{p : ℕ}","doc_string":"`padic_val_nat p 0` is 0 for any `p`.","type":"padic_val_nat p 0 = 0"},{"name":"subgroup.subset_closure","kind":"theorem","statement":"theorem subgroup.subset_closure {G : Type u_1} [group G] {k : set G} : k ⊆ ↑(subgroup.closure k)","theorem":"{G : Type u_1} [group G] {k : set G} : k ⊆ ↑(subgroup.closure k)","args":"{G : Type u_1} [group G] {k : set G}","doc_string":"The subgroup generated by a set includes the set.","type":"k ⊆ ↑(subgroup.closure k)"},{"name":"category_theory.exact_inr_fst","kind":"theorem","statement":"theorem category_theory.exact_inr_fst {𝒜 : Type u_1} [category_theory.category 𝒜] [category_theory.preadditive 𝒜] [category_theory.limits.has_kernels 𝒜] [category_theory.limits.has_images 𝒜] [category_theory.limits.has_binary_biproducts 𝒜] (A B : 𝒜) : category_theory.exact category_theory.limits.biprod.inr category_theory.limits.biprod.fst","theorem":"{𝒜 : Type u_1} [category_theory.category 𝒜] [category_theory.preadditive 𝒜] [category_theory.limits.has_kernels 𝒜] [category_theory.limits.has_images 𝒜] [category_theory.limits.has_binary_biproducts 𝒜] (A B : 𝒜) : category_theory.exact category_theory.limits.biprod.inr category_theory.limits.biprod.fst","args":"{𝒜 : Type u_1} [category_theory.category 𝒜] [category_theory.preadditive 𝒜] [category_theory.limits.has_kernels 𝒜] [category_theory.limits.has_images 𝒜] [category_theory.limits.has_binary_biproducts 𝒜] (A B : 𝒜)","doc_string":"The sequence `B ⟶ A ⊞ B ⟶ A` is exact.","type":"category_theory.exact category_theory.limits.biprod.inr category_theory.limits.biprod.fst"},{"name":"eq.subset'","kind":"theorem","statement":"theorem eq.subset' {α : Type u} [has_subset α] {a b : α} [is_refl α has_subset.subset] : a = b → a ⊆ b","theorem":"{α : Type u} [has_subset α] {a b : α} [is_refl α has_subset.subset] : a = b → a ⊆ b","args":"{α : Type u} [has_subset α] {a b : α} [is_refl α has_subset.subset]","doc_string":"**Alias** of subset_of_eq`.","type":"a = b → a ⊆ b"},{"name":"module.subsingleton","kind":"theorem","statement":"theorem module.subsingleton (R : Type u_1) (M : Type u_2) [semiring R] [subsingleton R] [add_comm_monoid M] [module R M] : subsingleton M","theorem":"(R : Type u_1) (M : Type u_2) [semiring R] [subsingleton R] [add_comm_monoid M] [module R M] : subsingleton M","args":"(R : Type u_1) (M : Type u_2) [semiring R] [subsingleton R] [add_comm_monoid M] [module R M]","doc_string":" A module over a `subsingleton` semiring is a `subsingleton`. We cannot register this as an instance because Lean has no way to guess `R`.","type":"subsingleton M"},{"name":"has_lt.lt.not_lt","kind":"theorem","statement":"theorem has_lt.lt.not_lt {α : Type u} [preorder α] {a b : α} (h : a < b) : ¬b < a","theorem":"{α : Type u} [preorder α] {a b : α} (h : a < b) : ¬b < a","args":"{α : Type u} [preorder α] {a b : α} (h : a < b)","doc_string":"**Alias** of lt_asymm`.","type":"¬b < a"},{"name":"polynomial.cyclotomic_ne_zero","kind":"theorem","statement":"theorem polynomial.cyclotomic_ne_zero (n : ℕ) (R : Type u_1) [ring R] [nontrivial R] : polynomial.cyclotomic n R ≠ 0","theorem":"(n : ℕ) (R : Type u_1) [ring R] [nontrivial R] : polynomial.cyclotomic n R ≠ 0","args":"(n : ℕ) (R : Type u_1) [ring R] [nontrivial R]","doc_string":"`cyclotomic n R` is different from `0`.","type":"polynomial.cyclotomic n R ≠ 0"},{"name":"neg_neg_iff_pos","kind":"theorem","statement":"theorem neg_neg_iff_pos {α : Type u} [add_group α] [has_lt α] [covariant_class α α has_add.add has_lt.lt] {a : α} : -a < 0 ↔ 0 < a","theorem":"{α : Type u} [add_group α] [has_lt α] [covariant_class α α has_add.add has_lt.lt] {a : α} : -a < 0 ↔ 0 < a","args":"{α : Type u} [add_group α] [has_lt α] [covariant_class α α has_add.add has_lt.lt] {a : α}","doc_string":"**Alias** of left.inv_lt_one_iff`.","type":"-a < 0 ↔ 0 < a"},{"name":"is_add_left_regular.of_add","kind":"theorem","statement":"theorem is_add_left_regular.of_add {R : Type u_1} {a b : R} [add_semigroup R] (ab : is_add_left_regular (a + b)) : is_add_left_regular b","theorem":"{R : Type u_1} {a b : R} [add_semigroup R] (ab : is_add_left_regular (a + b)) : is_add_left_regular b","args":"{R : Type u_1} {a b : R} [add_semigroup R] (ab : is_add_left_regular (a + b))","doc_string":"If an element `b` becomes add-left-regular after adding to it on the left a add-left-regular element, then `b` is add-left-regular.","type":"is_add_left_regular b"},{"name":"nat.exists_strict_anti","kind":"theorem","statement":"theorem nat.exists_strict_anti (α : Type u) [preorder α] [nonempty α] [no_min_order α] : ∃ (f : ℕ → α), strict_anti f","theorem":"(α : Type u) [preorder α] [nonempty α] [no_min_order α] : ∃ (f : ℕ → α), strict_anti f","args":"(α : Type u) [preorder α] [nonempty α] [no_min_order α]","doc_string":" If `α` is a nonempty preorder with no minimal elements, then there exists a strictly antitone function `ℕ → α`.","type":"∃ (f : ℕ → α), strict_anti f"},{"name":"free_group.red.church_rosser","kind":"theorem","statement":"theorem free_group.red.church_rosser {α : Type u} {L₁ L₂ L₃ : list (α × bool)} : free_group.red L₁ L₂ → free_group.red L₁ L₃ → relation.join free_group.red L₂ L₃","theorem":"{α : Type u} {L₁ L₂ L₃ : list (α × bool)} : free_group.red L₁ L₂ → free_group.red L₁ L₃ → relation.join free_group.red L₂ L₃","args":"{α : Type u} {L₁ L₂ L₃ : list (α × bool)}","doc_string":" **Church-Rosser theorem** for word reduction: If `w1 w2 w3` are words such that `w1` reduces to `w2` and `w3` respectively, then there is a word `w4` such that `w2` and `w3` reduce to `w4` respectively. This is also known as Newman's diamond lemma.","type":"free_group.red L₁ L₂ → free_group.red L₁ L₃ → relation.join free_group.red L₂ L₃"},{"name":"is_left_regular.mul","kind":"theorem","statement":"theorem is_left_regular.mul {R : Type u_1} {a b : R} [semigroup R] (lra : is_left_regular a) (lrb : is_left_regular b) : is_left_regular (a * b)","theorem":"{R : Type u_1} {a b : R} [semigroup R] (lra : is_left_regular a) (lrb : is_left_regular b) : is_left_regular (a * b)","args":"{R : Type u_1} {a b : R} [semigroup R] (lra : is_left_regular a) (lrb : is_left_regular b)","doc_string":"In a semigroup, the product of left-regular elements is left-regular.","type":"is_left_regular (a * b)"},{"name":"affine_subspace.top_coe","kind":"theorem","statement":"theorem affine_subspace.top_coe (k : Type u_1) (V : Type u_2) (P : Type u_3) [ring k] [add_comm_group V] [module k V] [S : add_torsor V P] : ↑⊤ = set.univ","theorem":"(k : Type u_1) (V : Type u_2) (P : Type u_3) [ring k] [add_comm_group V] [module k V] [S : add_torsor V P] : ↑⊤ = set.univ","args":"(k : Type u_1) (V : Type u_2) (P : Type u_3) [ring k] [add_comm_group V] [module k V] [S : add_torsor V P]","doc_string":"`⊤`, coerced to a set, is the whole set of points.","type":"↑⊤ = set.univ"},{"name":"is_left_regular_of_left_cancel_semigroup","kind":"theorem","statement":"theorem is_left_regular_of_left_cancel_semigroup {R : Type u_1} [left_cancel_semigroup R] (g : R) : is_left_regular g","theorem":"{R : Type u_1} [left_cancel_semigroup R] (g : R) : is_left_regular g","args":"{R : Type u_1} [left_cancel_semigroup R] (g : R)","doc_string":"Elements of a left cancel semigroup are left regular.","type":"is_left_regular g"},{"name":"is_topological_fiber_bundle.is_open_map_proj","kind":"theorem","statement":"theorem is_topological_fiber_bundle.is_open_map_proj {B : Type u_2} {F : Type u_3} {Z : Type u_4} [topological_space B] [topological_space F] {proj : Z → B} [topological_space Z] (h : is_topological_fiber_bundle F proj) : is_open_map proj","theorem":"{B : Type u_2} {F : Type u_3} {Z : Type u_4} [topological_space B] [topological_space F] {proj : Z → B} [topological_space Z] (h : is_topological_fiber_bundle F proj) : is_open_map proj","args":"{B : Type u_2} {F : Type u_3} {Z : Type u_4} [topological_space B] [topological_space F] {proj : Z → B} [topological_space Z] (h : is_topological_fiber_bundle F proj)","doc_string":"The projection from a topological fiber bundle to its base is an open map.","type":"is_open_map proj"},{"name":"category_theory.limits.has_binary_biproducts.of_has_binary_products","kind":"theorem","statement":"theorem category_theory.limits.has_binary_biproducts.of_has_binary_products {C : Type u} [category_theory.category C] [category_theory.preadditive C] [category_theory.limits.has_binary_products C] : category_theory.limits.has_binary_biproducts C","theorem":"{C : Type u} [category_theory.category C] [category_theory.preadditive C] [category_theory.limits.has_binary_products C] : category_theory.limits.has_binary_biproducts C","args":"{C : Type u} [category_theory.category C] [category_theory.preadditive C] [category_theory.limits.has_binary_products C]","doc_string":"In a preadditive category, if all binary products exist, then all binary biproducts exist.","type":"category_theory.limits.has_binary_biproducts C"},{"name":"add_neg'","kind":"theorem","statement":"theorem add_neg' {α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α has_add.add has_le.le] {a b : α} (ha : a < 0) (hb : b < 0) : a + b < 0","theorem":"{α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α has_add.add has_le.le] {a b : α} (ha : a < 0) (hb : b < 0) : a + b < 0","args":"{α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α has_add.add has_le.le] {a b : α} (ha : a < 0) (hb : b < 0)","doc_string":"**Alias** of `left.add_neg'`.","type":"a + b < 0"},{"name":"charted_space_self_atlas","kind":"theorem","statement":"theorem charted_space_self_atlas {H : Type u_1} [topological_space H] {e : local_homeomorph H H} : e ∈ charted_space.atlas H H ↔ e = local_homeomorph.refl H","theorem":"{H : Type u_1} [topological_space H] {e : local_homeomorph H H} : e ∈ charted_space.atlas H H ↔ e = local_homeomorph.refl H","args":"{H : Type u_1} [topological_space H] {e : local_homeomorph H H}","doc_string":" In the trivial charted_space structure of a space modelled over itself through the identity, the atlas members are just the identity","type":"e ∈ charted_space.atlas H H ↔ e = local_homeomorph.refl H"},{"name":"category_theory.limits.has_finite_wide_pullbacks_of_has_finite_limits","kind":"theorem","statement":"theorem category_theory.limits.has_finite_wide_pullbacks_of_has_finite_limits (C : Type u) [category_theory.category C] [category_theory.limits.has_finite_limits C] : category_theory.limits.has_finite_wide_pullbacks C","theorem":"(C : Type u) [category_theory.category C] [category_theory.limits.has_finite_limits C] : category_theory.limits.has_finite_wide_pullbacks C","args":"(C : Type u) [category_theory.category C] [category_theory.limits.has_finite_limits C]","doc_string":"Finite wide pullbacks are finite limits, so if `C` has all finite limits, it also has finite wide pullbacks","type":"category_theory.limits.has_finite_wide_pullbacks C"},{"name":"finset.nat.mem_antidiagonal","kind":"theorem","statement":"theorem finset.nat.mem_antidiagonal {n : ℕ} {x : ℕ × ℕ} : x ∈ finset.nat.antidiagonal n ↔ x.fst + x.snd = n","theorem":"{n : ℕ} {x : ℕ × ℕ} : x ∈ finset.nat.antidiagonal n ↔ x.fst + x.snd = n","args":"{n : ℕ} {x : ℕ × ℕ}","doc_string":"A pair (i, j) is contained in the antidiagonal of `n` if and only if `i + j = n`.","type":"x ∈ finset.nat.antidiagonal n ↔ x.fst + x.snd = n"},{"name":"is_regular_iff_subsingleton","kind":"theorem","statement":"theorem is_regular_iff_subsingleton {R : Type u_1} [mul_zero_class R] : is_regular 0 ↔ subsingleton R","theorem":"{R : Type u_1} [mul_zero_class R] : is_regular 0 ↔ subsingleton R","args":"{R : Type u_1} [mul_zero_class R]","doc_string":"The element `0` is regular if and only if `R` is trivial.","type":"is_regular 0 ↔ subsingleton R"},{"name":"category_theory.limits.has_finite_products_of_has_products","kind":"theorem","statement":"theorem category_theory.limits.has_finite_products_of_has_products (C : Type u) [category_theory.category C] [category_theory.limits.has_products C] : category_theory.limits.has_finite_products C","theorem":"(C : Type u) [category_theory.category C] [category_theory.limits.has_products C] : category_theory.limits.has_finite_products C","args":"(C : Type u) [category_theory.category C] [category_theory.limits.has_products C]","doc_string":"If a category has all products then in particular it has finite products.","type":"category_theory.limits.has_finite_products C"},{"name":"dense_range.separable_space","kind":"theorem","statement":"theorem dense_range.separable_space {α : Type u_1} {β : Type u_2} [topological_space α] [topological_space.separable_space α] [topological_space β] {f : α → β} (h : dense_range f) (h' : continuous f) : topological_space.separable_space β","theorem":"{α : Type u_1} {β : Type u_2} [topological_space α] [topological_space.separable_space α] [topological_space β] {f : α → β} (h : dense_range f) (h' : continuous f) : topological_space.separable_space β","args":"{α : Type u_1} {β : Type u_2} [topological_space α] [topological_space.separable_space α] [topological_space β] {f : α → β} (h : dense_range f) (h' : continuous f)","doc_string":" If `α` is a separable space and `f : α → β` is a continuous map with dense range, then `β` is a separable space as well. E.g., the completion of a separable uniform space is separable.","type":"topological_space.separable_space β"},{"name":"topological_add_group.continuous_conj_sum","kind":"theorem","statement":"theorem topological_add_group.continuous_conj_sum {G : Type w} [topological_space G] [has_neg G] [has_add G] [has_continuous_add G] [has_continuous_neg G] : continuous (λ (g : G × G), g.fst + g.snd + -g.fst)","theorem":"{G : Type w} [topological_space G] [has_neg G] [has_add G] [has_continuous_add G] [has_continuous_neg G] : continuous (λ (g : G × G), g.fst + g.snd + -g.fst)","args":"{G : Type w} [topological_space G] [has_neg G] [has_add G] [has_continuous_add G] [has_continuous_neg G]","doc_string":"Conjugation is jointly continuous on `G × G` when both `mul` and `inv` are continuous.","type":"continuous (λ (g : G × G), g.fst + g.snd + -g.fst)"},{"name":"apply_ite","kind":"theorem","statement":"theorem apply_ite {α : Sort u_1} {β : Sort u_2} (f : α → β) (P : Prop) [decidable P] (a b : α) : f (ite P a b) = ite P (f a) (f b)","theorem":"{α : Sort u_1} {β : Sort u_2} (f : α → β) (P : Prop) [decidable P] (a b : α) : f (ite P a b) = ite P (f a) (f b)","args":"{α : Sort u_1} {β : Sort u_2} (f : α → β) (P : Prop) [decidable P] (a b : α)","doc_string":"A function applied to a `ite` is a `ite` of that function applied to each of the branches.","type":"f (ite P a b) = ite P (f a) (f b)"},{"name":"padic_norm.padic_norm_p","kind":"theorem","statement":"theorem padic_norm.padic_norm_p {p : ℕ} (hp : 1 < p) : padic_norm p ↑p = 1 / ↑p","theorem":"{p : ℕ} (hp : 1 < p) : padic_norm p ↑p = 1 / ↑p","args":"{p : ℕ} (hp : 1 < p)","doc_string":"The p-adic norm of `p` is `1/p` if `p > 1`.  See also `padic_norm.padic_norm_p_of_prime` for a version that assumes `p` is prime.","type":"padic_norm p ↑p = 1 / ↑p"},{"name":"add_commute.symm","kind":"theorem","statement":"theorem add_commute.symm {S : Type u_1} [has_add S] {a b : S} (h : add_commute a b) : add_commute b a","theorem":"{S : Type u_1} [has_add S] {a b : S} (h : add_commute a b) : add_commute b a","args":"{S : Type u_1} [has_add S] {a b : S} (h : add_commute a b)","doc_string":"If `a` commutes with `b`, then `b` commutes with `a`.","type":"add_commute b a"},{"name":"dense_range_pure","kind":"theorem","statement":"theorem dense_range_pure {α : Type u} : dense_range has_pure.pure","theorem":"{α : Type u} : dense_range has_pure.pure","args":"{α : Type u}","doc_string":"The range of `pure : α → ultrafilter α` is dense in `ultrafilter α`.","type":"dense_range has_pure.pure"},{"name":"nat.sum_two_pow_lt","kind":"theorem","statement":"theorem nat.sum_two_pow_lt {k : ℕ} {A : finset ℕ} (h₁ : ∀ {x : ℕ}, x ∈ A → x < k) : A.sum (has_pow.pow 2) < 2 ^ k","theorem":"{k : ℕ} {A : finset ℕ} (h₁ : ∀ {x : ℕ}, x ∈ A → x < k) : A.sum (has_pow.pow 2) < 2 ^ k","args":"{k : ℕ} {A : finset ℕ} (h₁ : ∀ {x : ℕ}, x ∈ A → x < k)","doc_string":"If everything in `A` is less than `k`, we can bound the sum of powers.","type":"A.sum (has_pow.pow 2) < 2 ^ k"},{"name":"has_sbtw.sbtw.not_sbtw","kind":"theorem","statement":"theorem has_sbtw.sbtw.not_sbtw {α : Type u_1} [circular_preorder α] {a b c : α} (h : has_sbtw.sbtw a b c) : ¬has_sbtw.sbtw c b a","theorem":"{α : Type u_1} [circular_preorder α] {a b c : α} (h : has_sbtw.sbtw a b c) : ¬has_sbtw.sbtw c b a","args":"{α : Type u_1} [circular_preorder α] {a b c : α} (h : has_sbtw.sbtw a b c)","doc_string":"**Alias** of sbtw_asymm`.","type":"¬has_sbtw.sbtw c b a"},{"name":"nat.factorization_eq_zero_iff","kind":"theorem","statement":"theorem nat.factorization_eq_zero_iff (n : ℕ) : n.factorization = 0 ↔ n = 0 ∨ n = 1","theorem":"(n : ℕ) : n.factorization = 0 ↔ n = 0 ∨ n = 1","args":"(n : ℕ)","doc_string":"The only numbers with empty prime factorization are `0` and `1`","type":"n.factorization = 0 ↔ n = 0 ∨ n = 1"},{"name":"order.succ_ne_succ","kind":"theorem","statement":"theorem order.succ_ne_succ {α : Type u_1} [partial_order α] [succ_order α] {a b : α} [no_max_order α] : a ≠ b → order.succ a ≠ order.succ b","theorem":"{α : Type u_1} [partial_order α] [succ_order α] {a b : α} [no_max_order α] : a ≠ b → order.succ a ≠ order.succ b","args":"{α : Type u_1} [partial_order α] [succ_order α] {a b : α} [no_max_order α]","doc_string":"**Alias** of the reverse direction of order.succ_ne_succ_iff`.","type":"a ≠ b → order.succ a ≠ order.succ b"},{"name":"tsub_tsub_le","kind":"theorem","statement":"theorem tsub_tsub_le {α : Type u_1} [preorder α] [add_comm_semigroup α] [has_sub α] [has_ordered_sub α] {a b : α} : b - (b - a) ≤ a","theorem":"{α : Type u_1} [preorder α] [add_comm_semigroup α] [has_sub α] [has_ordered_sub α] {a b : α} : b - (b - a) ≤ a","args":"{α : Type u_1} [preorder α] [add_comm_semigroup α] [has_sub α] [has_ordered_sub α] {a b : α}","doc_string":"See `tsub_tsub_cancel_of_le` for the equality.","type":"b - (b - a) ≤ a"},{"name":"sigma.subtype_ext","kind":"theorem","statement":"theorem sigma.subtype_ext {α : Type u_1} {β : Type u_2} {p : α → β → Prop} {x₀ x₁ : Σ (a : α), subtype (p a)} : x₀.fst = x₁.fst → ↑(x₀.snd) = ↑(x₁.snd) → x₀ = x₁","theorem":"{α : Type u_1} {β : Type u_2} {p : α → β → Prop} {x₀ x₁ : Σ (a : α), subtype (p a)} : x₀.fst = x₁.fst → ↑(x₀.snd) = ↑(x₁.snd) → x₀ = x₁","args":"{α : Type u_1} {β : Type u_2} {p : α → β → Prop} {x₀ x₁ : Σ (a : α), subtype (p a)}","doc_string":"A specialized ext lemma for equality of sigma types over an indexed subtype.","type":"x₀.fst = x₁.fst → ↑(x₀.snd) = ↑(x₁.snd) → x₀ = x₁"},{"name":"bornology.is_bounded.bounded_space_subtype","kind":"theorem","statement":"theorem bornology.is_bounded.bounded_space_subtype {α : Type u_1} [bornology α] {p : α → Prop} : bornology.is_bounded {x : α | p x} → bounded_space (subtype p)","theorem":"{α : Type u_1} [bornology α] {p : α → Prop} : bornology.is_bounded {x : α | p x} → bounded_space (subtype p)","args":"{α : Type u_1} [bornology α] {p : α → Prop}","doc_string":"**Alias** of the reverse direction of bounded_space_subtype_iff`.","type":"bornology.is_bounded {x : α | p x} → bounded_space (subtype p)"},{"name":"zero_ne_one_or_forall_eq_0","kind":"theorem","statement":"theorem zero_ne_one_or_forall_eq_0 {M₀ : Type u_1} [mul_zero_one_class M₀] : 0 ≠ 1 ∨ ∀ (a : M₀), a = 0","theorem":"{M₀ : Type u_1} [mul_zero_one_class M₀] : 0 ≠ 1 ∨ ∀ (a : M₀), a = 0","args":"{M₀ : Type u_1} [mul_zero_one_class M₀]","doc_string":"In a monoid with zero, either zero and one are nonequal, or zero is the only element.","type":"0 ≠ 1 ∨ ∀ (a : M₀), a = 0"},{"name":"dense_embedding.separable_space","kind":"theorem","statement":"theorem dense_embedding.separable_space {α : Type u_1} {β : Type u_2} [topological_space α] [topological_space β] {e : α → β} (de : dense_embedding e) [topological_space.separable_space α] : topological_space.separable_space β","theorem":"{α : Type u_1} {β : Type u_2} [topological_space α] [topological_space β] {e : α → β} (de : dense_embedding e) [topological_space.separable_space α] : topological_space.separable_space β","args":"{α : Type u_1} {β : Type u_2} [topological_space α] [topological_space β] {e : α → β} (de : dense_embedding e) [topological_space.separable_space α]","doc_string":"If the domain of a `dense_embedding` is a separable space, then so is its codomain.","type":"topological_space.separable_space β"},{"name":"nat.cast_desc_factorial_two","kind":"theorem","statement":"theorem nat.cast_desc_factorial_two (S : Type u_1) [ring S] (a : ℕ) : ↑(a.desc_factorial 2) = ↑a * (↑a - 1)","theorem":"(S : Type u_1) [ring S] (a : ℕ) : ↑(a.desc_factorial 2) = ↑a * (↑a - 1)","args":"(S : Type u_1) [ring S] (a : ℕ)","doc_string":" Convenience lemma. The `a - 1` is not using truncated substraction, as opposed to the definition of `nat.desc_factorial` as a natural.","type":"↑(a.desc_factorial 2) = ↑a * (↑a - 1)"},{"name":"has_sbtw.sbtw.trans_right","kind":"theorem","statement":"theorem has_sbtw.sbtw.trans_right {α : Type u_1} [circular_preorder α] {a b c d : α} (hbc : has_sbtw.sbtw a b c) (hcd : has_sbtw.sbtw a c d) : has_sbtw.sbtw a b d","theorem":"{α : Type u_1} [circular_preorder α] {a b c d : α} (hbc : has_sbtw.sbtw a b c) (hcd : has_sbtw.sbtw a c d) : has_sbtw.sbtw a b d","args":"{α : Type u_1} [circular_preorder α] {a b c d : α} (hbc : has_sbtw.sbtw a b c) (hcd : has_sbtw.sbtw a c d)","doc_string":"**Alias** of sbtw_trans_right`.","type":"has_sbtw.sbtw a b d"},{"name":"function.is_periodic_id","kind":"theorem","statement":"theorem function.is_periodic_id {α : Type u_1} (n : ℕ) (x : α) : function.is_periodic_pt id n x","theorem":"{α : Type u_1} (n : ℕ) (x : α) : function.is_periodic_pt id n x","args":"{α : Type u_1} (n : ℕ) (x : α)","doc_string":"For the identity map, all points are periodic.","type":"function.is_periodic_pt id n x"},{"name":"right.add_neg","kind":"theorem","statement":"theorem right.add_neg {α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α (function.swap has_add.add) has_lt.lt] {a b : α} (ha : a < 0) (hb : b < 0) : a + b < 0","theorem":"{α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α (function.swap has_add.add) has_lt.lt] {a b : α} (ha : a < 0) (hb : b < 0) : a + b < 0","args":"{α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α (function.swap has_add.add) has_lt.lt] {a b : α} (ha : a < 0) (hb : b < 0)","doc_string":"Assumes right covariance. The lemma assuming left covariance is `left.add_neg`.","type":"a + b < 0"},{"name":"add_submonoid.multiset_sum_mem","kind":"theorem","statement":"theorem add_submonoid.multiset_sum_mem {M : Type u_1} [add_comm_monoid M] (S : add_submonoid M) (m : multiset M) (hm : ∀ (a : M), a ∈ m → a ∈ S) : m.sum ∈ S","theorem":"{M : Type u_1} [add_comm_monoid M] (S : add_submonoid M) (m : multiset M) (hm : ∀ (a : M), a ∈ m → a ∈ S) : m.sum ∈ S","args":"{M : Type u_1} [add_comm_monoid M] (S : add_submonoid M) (m : multiset M) (hm : ∀ (a : M), a ∈ m → a ∈ S)","doc_string":"Sum of a multiset of elements in an `add_submonoid` of an `add_comm_monoid` is in the `add_submonoid`.","type":"m.sum ∈ S"},{"name":"gold_conj_irrational","kind":"theorem","statement":"theorem gold_conj_irrational  : irrational golden_conj","theorem":" : irrational golden_conj","args":"","doc_string":"The conjugate of the golden ratio is irrational.","type":"irrational golden_conj"},{"name":"finsupp.lt_wf","kind":"theorem","statement":"theorem finsupp.lt_wf (ι : Type u_3) : well_founded has_lt.lt","theorem":"(ι : Type u_3) : well_founded has_lt.lt","args":"(ι : Type u_3)","doc_string":"The order on `ι →₀ ℕ` is well-founded.","type":"well_founded has_lt.lt"},{"name":"antisymm_rel.eq","kind":"theorem","statement":"theorem antisymm_rel.eq {α : Type u_1} {r : α → α → Prop} [is_refl α r] [is_antisymm α r] {a b : α} : antisymm_rel r a b → a = b","theorem":"{α : Type u_1} {r : α → α → Prop} [is_refl α r] [is_antisymm α r] {a b : α} : antisymm_rel r a b → a = b","args":"{α : Type u_1} {r : α → α → Prop} [is_refl α r] [is_antisymm α r] {a b : α}","doc_string":"**Alias** of the forward direction of antisymm_rel_iff_eq`.","type":"antisymm_rel r a b → a = b"},{"name":"fin.coe_fin_le","kind":"theorem","statement":"theorem fin.coe_fin_le {n : ℕ} {a b : fin n} : ↑a ≤ ↑b ↔ a ≤ b","theorem":"{n : ℕ} {a b : fin n} : ↑a ≤ ↑b ↔ a ≤ b","args":"{n : ℕ} {a b : fin n}","doc_string":"`a ≤ b` as natural numbers if and only if `a ≤ b` in `fin n`.","type":"↑a ≤ ↑b ↔ a ≤ b"},{"name":"pred_lt_pred","kind":"theorem","statement":"theorem pred_lt_pred {α : Type u_1} [preorder α] [pred_order α] {a b : α} [no_min_order α] : a < b → order.pred a < order.pred b","theorem":"{α : Type u_1} [preorder α] [pred_order α] {a b : α} [no_min_order α] : a < b → order.pred a < order.pred b","args":"{α : Type u_1} [preorder α] [pred_order α] {a b : α} [no_min_order α]","doc_string":"**Alias** of the reverse direction of order.pred_lt_pred_iff`.","type":"a < b → order.pred a < order.pred b"},{"name":"is_of_fin_order_zero","kind":"theorem","statement":"theorem is_of_fin_order_zero {G : Type u} [add_monoid G] : is_of_fin_add_order 0","theorem":"{G : Type u} [add_monoid G] : is_of_fin_add_order 0","args":"{G : Type u} [add_monoid G]","doc_string":"0 is of finite order in any additive monoid.","type":"is_of_fin_add_order 0"},{"name":"is_add_left_regular.add","kind":"theorem","statement":"theorem is_add_left_regular.add {R : Type u_1} {a b : R} [add_semigroup R] (lra : is_add_left_regular a) (lrb : is_add_left_regular b) : is_add_left_regular (a + b)","theorem":"{R : Type u_1} {a b : R} [add_semigroup R] (lra : is_add_left_regular a) (lrb : is_add_left_regular b) : is_add_left_regular (a + b)","args":"{R : Type u_1} {a b : R} [add_semigroup R] (lra : is_add_left_regular a) (lrb : is_add_left_regular b)","doc_string":"In an additive semigroup, the sum of add-left-regular elements is add-left.regular.","type":"is_add_left_regular (a + b)"},{"name":"ordinal.induction","kind":"theorem","statement":"theorem ordinal.induction {p : ordinal → Prop} (i : ordinal) (h : ∀ (j : ordinal), (∀ (k : ordinal), k < j → p k) → p j) : p i","theorem":"{p : ordinal → Prop} (i : ordinal) (h : ∀ (j : ordinal), (∀ (k : ordinal), k < j → p k) → p j) : p i","args":"{p : ordinal → Prop} (i : ordinal) (h : ∀ (j : ordinal), (∀ (k : ordinal), k < j → p k) → p j)","doc_string":" Reformulation of well founded induction on ordinals as a lemma that works with the `induction` tactic, as in `induction i using ordinal.induction with i IH`.","type":"p i"},{"name":"real.sinh_injective","kind":"theorem","statement":"theorem real.sinh_injective  : function.injective real.sinh","theorem":" : function.injective real.sinh","args":"","doc_string":"`sinh` is injective, `∀ a b, sinh a = sinh b → a = b`.","type":"function.injective real.sinh"},{"name":"right.neg_pos_iff","kind":"theorem","statement":"theorem right.neg_pos_iff {α : Type u} [add_group α] [has_lt α] [covariant_class α α (function.swap has_add.add) has_lt.lt] {a : α} : 0 < -a ↔ a < 0","theorem":"{α : Type u} [add_group α] [has_lt α] [covariant_class α α (function.swap has_add.add) has_lt.lt] {a : α} : 0 < -a ↔ a < 0","args":"{α : Type u} [add_group α] [has_lt α] [covariant_class α α (function.swap has_add.add) has_lt.lt] {a : α}","doc_string":"Uses `right` co(ntra)variant.","type":"0 < -a ↔ a < 0"},{"name":"surjective_quotient_mk","kind":"theorem","statement":"theorem surjective_quotient_mk (α : Sort u_1) [s : setoid α] : function.surjective quotient.mk","theorem":"(α : Sort u_1) [s : setoid α] : function.surjective quotient.mk","args":"(α : Sort u_1) [s : setoid α]","doc_string":"`quotient.mk` is a surjective function.","type":"function.surjective quotient.mk"},{"name":"commute.refl","kind":"theorem","statement":"theorem commute.refl {S : Type u_1} [has_mul S] (a : S) : commute a a","theorem":"{S : Type u_1} [has_mul S] (a : S) : commute a a","args":"{S : Type u_1} [has_mul S] (a : S)","doc_string":"Any element commutes with itself.","type":"commute a a"},{"name":"right.neg_neg_iff","kind":"theorem","statement":"theorem right.neg_neg_iff {α : Type u} [add_group α] [has_lt α] [covariant_class α α (function.swap has_add.add) has_lt.lt] {a : α} : -a < 0 ↔ 0 < a","theorem":"{α : Type u} [add_group α] [has_lt α] [covariant_class α α (function.swap has_add.add) has_lt.lt] {a : α} : -a < 0 ↔ 0 < a","args":"{α : Type u} [add_group α] [has_lt α] [covariant_class α α (function.swap has_add.add) has_lt.lt] {a : α}","doc_string":"Uses `right` co(ntra)variant.","type":"-a < 0 ↔ 0 < a"},{"name":"add_neg_of_neg_of_nonpos","kind":"theorem","statement":"theorem add_neg_of_neg_of_nonpos {α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α has_add.add has_le.le] {a b : α} (ha : a < 0) (hb : b ≤ 0) : a + b < 0","theorem":"{α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α has_add.add has_le.le] {a b : α} (ha : a < 0) (hb : b ≤ 0) : a + b < 0","args":"{α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α has_add.add has_le.le] {a b : α} (ha : a < 0) (hb : b ≤ 0)","doc_string":"**Alias** of `left.add_neg_of_neg_of_nonpos`.","type":"a + b < 0"},{"name":"one_lt_mul''","kind":"theorem","statement":"theorem one_lt_mul'' {α : Type u_1} [mul_one_class α] [preorder α] [covariant_class α α has_mul.mul has_le.le] {a b : α} (ha : 1 < a) (hb : 1 < b) : 1 < a * b","theorem":"{α : Type u_1} [mul_one_class α] [preorder α] [covariant_class α α has_mul.mul has_le.le] {a b : α} (ha : 1 < a) (hb : 1 < b) : 1 < a * b","args":"{α : Type u_1} [mul_one_class α] [preorder α] [covariant_class α α has_mul.mul has_le.le] {a b : α} (ha : 1 < a) (hb : 1 < b)","doc_string":"**Alias** of left.one_lt_mul'`.","type":"1 < a * b"},{"name":"one_lt_mul_of_lt_of_le'","kind":"theorem","statement":"theorem one_lt_mul_of_lt_of_le' {α : Type u_1} [mul_one_class α] [preorder α] [covariant_class α α has_mul.mul has_le.le] {a b : α} (ha : 1 < a) (hb : 1 ≤ b) : 1 < a * b","theorem":"{α : Type u_1} [mul_one_class α] [preorder α] [covariant_class α α has_mul.mul has_le.le] {a b : α} (ha : 1 < a) (hb : 1 ≤ b) : 1 < a * b","args":"{α : Type u_1} [mul_one_class α] [preorder α] [covariant_class α α has_mul.mul has_le.le] {a b : α} (ha : 1 < a) (hb : 1 ≤ b)","doc_string":"**Alias** of left.one_lt_mul_of_lt_of_le`.","type":"1 < a * b"},{"name":"left.add_neg","kind":"theorem","statement":"theorem left.add_neg {α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α has_add.add has_lt.lt] {a b : α} (ha : a < 0) (hb : b < 0) : a + b < 0","theorem":"{α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α has_add.add has_lt.lt] {a b : α} (ha : a < 0) (hb : b < 0) : a + b < 0","args":"{α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α has_add.add has_lt.lt] {a b : α} (ha : a < 0) (hb : b < 0)","doc_string":"Assumes left covariance. The lemma assuming right covariance is `right.add_neg`.","type":"a + b < 0"},{"name":"is_add_left_regular_of_left_cancel_add_semigroup","kind":"theorem","statement":"theorem is_add_left_regular_of_left_cancel_add_semigroup {R : Type u_1} [add_left_cancel_semigroup R] (g : R) : is_add_left_regular g","theorem":"{R : Type u_1} [add_left_cancel_semigroup R] (g : R) : is_add_left_regular g","args":"{R : Type u_1} [add_left_cancel_semigroup R] (g : R)","doc_string":"Elements of an add left cancel semigroup are add-left-regular.","type":"is_add_left_regular g"},{"name":"set.interval_subset_interval_union_interval","kind":"theorem","statement":"theorem set.interval_subset_interval_union_interval {α : Type u} [linear_order α] {a b c : α} : set.interval a c ⊆ set.interval a b ∪ set.interval b c","theorem":"{α : Type u} [linear_order α] {a b c : α} : set.interval a c ⊆ set.interval a b ∪ set.interval b c","args":"{α : Type u} [linear_order α] {a b c : α}","doc_string":"A sort of triangle inequality.","type":"set.interval a c ⊆ set.interval a b ∪ set.interval b c"},{"name":"add_neg","kind":"theorem","statement":"theorem add_neg {α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α has_add.add has_lt.lt] {a b : α} (ha : a < 0) (hb : b < 0) : a + b < 0","theorem":"{α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α has_add.add has_lt.lt] {a b : α} (ha : a < 0) (hb : b < 0) : a + b < 0","args":"{α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α has_add.add has_lt.lt] {a b : α} (ha : a < 0) (hb : b < 0)","doc_string":"**Alias** of `left.add_neg`.","type":"a + b < 0"},{"name":"neg_of_neg_pos","kind":"theorem","statement":"theorem neg_of_neg_pos {α : Type u} [add_group α] [has_lt α] [covariant_class α α has_add.add has_lt.lt] {a : α} : 0 < -a → a < 0","theorem":"{α : Type u} [add_group α] [has_lt α] [covariant_class α α has_add.add has_lt.lt] {a : α} : 0 < -a → a < 0","args":"{α : Type u} [add_group α] [has_lt α] [covariant_class α α has_add.add has_lt.lt] {a : α}","doc_string":"**Alias** of the forward direction of left.one_lt_inv_iff`.","type":"0 < -a → a < 0"},{"name":"is_topological_fiber_bundle_snd","kind":"theorem","statement":"theorem is_topological_fiber_bundle_snd {B : Type u_2} {F : Type u_3} [topological_space B] [topological_space F] : is_topological_fiber_bundle F prod.snd","theorem":"{B : Type u_2} {F : Type u_3} [topological_space B] [topological_space F] : is_topological_fiber_bundle F prod.snd","args":"{B : Type u_2} {F : Type u_3} [topological_space B] [topological_space F]","doc_string":"The second projection in a product is a topological fiber bundle.","type":"is_topological_fiber_bundle F prod.snd"},{"name":"tendsto_rpow_div","kind":"theorem","statement":"theorem tendsto_rpow_div  : filter.tendsto (λ (x : ℝ), x ^ (1 / x)) filter.at_top (nhds 1)","theorem":" : filter.tendsto (λ (x : ℝ), x ^ (1 / x)) filter.at_top (nhds 1)","args":"","doc_string":"The function `x ^ (1 / x)` tends to `1` at `+∞`.","type":"filter.tendsto (λ (x : ℝ), x ^ (1 / x)) filter.at_top (nhds 1)"},{"name":"category_theory.has_finite_products_of_has_binary_and_terminal","kind":"theorem","statement":"theorem category_theory.has_finite_products_of_has_binary_and_terminal {C : Type u} [category_theory.category C] [category_theory.limits.has_binary_products C] [category_theory.limits.has_terminal C] : category_theory.limits.has_finite_products C","theorem":"{C : Type u} [category_theory.category C] [category_theory.limits.has_binary_products C] [category_theory.limits.has_terminal C] : category_theory.limits.has_finite_products C","args":"{C : Type u} [category_theory.category C] [category_theory.limits.has_binary_products C] [category_theory.limits.has_terminal C]","doc_string":"If `C` has a terminal object and binary products, then it has finite products.","type":"category_theory.limits.has_finite_products C"},{"name":"has_le.le.lt_of_not_le","kind":"theorem","statement":"theorem has_le.le.lt_of_not_le {α : Type u} [preorder α] {a b : α} : a ≤ b → ¬b ≤ a → a < b","theorem":"{α : Type u} [preorder α] {a b : α} : a ≤ b → ¬b ≤ a → a < b","args":"{α : Type u} [preorder α] {a b : α}","doc_string":"**Alias** of lt_of_le_not_le`.","type":"a ≤ b → ¬b ≤ a → a < b"},{"name":"filter.tendsto_at_bot_at_bot_of_monotone'","kind":"theorem","statement":"theorem filter.tendsto_at_bot_at_bot_of_monotone' {ι : Type u_1} {α : Type u_3} [preorder ι] [linear_order α] {u : ι → α} (h : monotone u) (H : ¬bdd_below (set.range u)) : filter.tendsto u filter.at_bot filter.at_bot","theorem":"{ι : Type u_1} {α : Type u_3} [preorder ι] [linear_order α] {u : ι → α} (h : monotone u) (H : ¬bdd_below (set.range u)) : filter.tendsto u filter.at_bot filter.at_bot","args":"{ι : Type u_1} {α : Type u_3} [preorder ι] [linear_order α] {u : ι → α} (h : monotone u) (H : ¬bdd_below (set.range u))","doc_string":" If `u` is a monotone function with linear ordered codomain and the range of `u` is not bounded below, then `tendsto u at_bot at_bot`.","type":"filter.tendsto u filter.at_bot filter.at_bot"},{"name":"has_btw.btw.cyclic_right","kind":"theorem","statement":"theorem has_btw.btw.cyclic_right {α : Type u_1} [circular_preorder α] {a b c : α} (h : has_btw.btw a b c) : has_btw.btw c a b","theorem":"{α : Type u_1} [circular_preorder α] {a b c : α} (h : has_btw.btw a b c) : has_btw.btw c a b","args":"{α : Type u_1} [circular_preorder α] {a b c : α} (h : has_btw.btw a b c)","doc_string":"**Alias** of btw_cyclic_right`.","type":"has_btw.btw c a b"},{"name":"lt_of_tsub_lt_tsub_right","kind":"theorem","statement":"theorem lt_of_tsub_lt_tsub_right {α : Type u_1} {a b c : α} [linear_order α] [add_comm_semigroup α] [has_sub α] [has_ordered_sub α] (h : a - c < b - c) : a < b","theorem":"{α : Type u_1} {a b c : α} [linear_order α] [add_comm_semigroup α] [has_sub α] [has_ordered_sub α] (h : a - c < b - c) : a < b","args":"{α : Type u_1} {a b c : α} [linear_order α] [add_comm_semigroup α] [has_sub α] [has_ordered_sub α] (h : a - c < b - c)","doc_string":"See `lt_of_tsub_lt_tsub_right_of_le` for a weaker statement in a partial order.","type":"a < b"},{"name":"real.tendsto_log_at_top","kind":"theorem","statement":"theorem real.tendsto_log_at_top  : filter.tendsto real.log filter.at_top filter.at_top","theorem":" : filter.tendsto real.log filter.at_top filter.at_top","args":"","doc_string":"The real logarithm function tends to `+∞` at `+∞`.","type":"filter.tendsto real.log filter.at_top filter.at_top"},{"name":"finset.not_mem_map_subtype_of_not_property","kind":"theorem","statement":"theorem finset.not_mem_map_subtype_of_not_property {α : Type u_1} {p : α → Prop} (s : finset {x // p x}) {a : α} (h : ¬p a) : a ∉ finset.map (function.embedding.subtype (λ (x : α), p x)) s","theorem":"{α : Type u_1} {p : α → Prop} (s : finset {x // p x}) {a : α} (h : ¬p a) : a ∉ finset.map (function.embedding.subtype (λ (x : α), p x)) s","args":"{α : Type u_1} {p : α → Prop} (s : finset {x // p x}) {a : α} (h : ¬p a)","doc_string":" If a `finset` of a subtype is converted to the main type with `embedding.subtype`, the result does not contain any value that does not satisfy the property of the subtype.","type":"a ∉ finset.map (function.embedding.subtype (λ (x : α), p x)) s"},{"name":"padic_val_nat.div","kind":"theorem","statement":"theorem padic_val_nat.div {p : ℕ} [p_prime : fact (nat.prime p)] {b : ℕ} (dvd : p ∣ b) : padic_val_nat p (b / p) = padic_val_nat p b - 1","theorem":"{p : ℕ} [p_prime : fact (nat.prime p)] {b : ℕ} (dvd : p ∣ b) : padic_val_nat p (b / p) = padic_val_nat p b - 1","args":"{p : ℕ} [p_prime : fact (nat.prime p)] {b : ℕ} (dvd : p ∣ b)","doc_string":"Dividing out by a prime factor reduces the padic_val_nat by 1.","type":"padic_val_nat p (b / p) = padic_val_nat p b - 1"},{"name":"function.antiperiodic.periodic","kind":"theorem","statement":"theorem function.antiperiodic.periodic {α : Type u_1} {β : Type u_2} {f : α → β} {c : α} [semiring α] [add_group β] (h : function.antiperiodic f c) : function.periodic f (2 * c)","theorem":"{α : Type u_1} {β : Type u_2} {f : α → β} {c : α} [semiring α] [add_group β] (h : function.antiperiodic f c) : function.periodic f (2 * c)","args":"{α : Type u_1} {β : Type u_2} {f : α → β} {c : α} [semiring α] [add_group β] (h : function.antiperiodic f c)","doc_string":"If a function is `antiperiodic` with antiperiod `c`, then it is also `periodic` with period  `2 * c`.","type":"function.periodic f (2 * c)"},{"name":"option.subsingleton_iff_is_empty","kind":"theorem","statement":"theorem option.subsingleton_iff_is_empty {α : Type u_1} : subsingleton (option α) ↔ is_empty α","theorem":"{α : Type u_1} : subsingleton (option α) ↔ is_empty α","args":"{α : Type u_1}","doc_string":"`option α` is a `subsingleton` if and only if `α` is empty.","type":"subsingleton (option α) ↔ is_empty α"},{"name":"cardinal.sum_lt_prod","kind":"theorem","statement":"theorem cardinal.sum_lt_prod {ι : Type u_1} (f g : ι → cardinal) (H : ∀ (i : ι), f i < g i) : cardinal.sum f < cardinal.prod g","theorem":"{ι : Type u_1} (f g : ι → cardinal) (H : ∀ (i : ι), f i < g i) : cardinal.sum f < cardinal.prod g","args":"{ι : Type u_1} (f g : ι → cardinal) (H : ∀ (i : ι), f i < g i)","doc_string":"**König's theorem**","type":"cardinal.sum f < cardinal.prod g"},{"name":"add_pos'","kind":"theorem","statement":"theorem add_pos' {α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α has_add.add has_le.le] {a b : α} (ha : 0 < a) (hb : 0 < b) : 0 < a + b","theorem":"{α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α has_add.add has_le.le] {a b : α} (ha : 0 < a) (hb : 0 < b) : 0 < a + b","args":"{α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α has_add.add has_le.le] {a b : α} (ha : 0 < a) (hb : 0 < b)","doc_string":"**Alias** of `left.add_pos'`.","type":"0 < a + b"},{"name":"rack.assoc_iff_id","kind":"theorem","statement":"theorem rack.assoc_iff_id {R : Type u_1} [rack R] {x y z : R} : shelf.act x (shelf.act y z) = shelf.act (shelf.act x y) z ↔ shelf.act x z = z","theorem":"{R : Type u_1} [rack R] {x y z : R} : shelf.act x (shelf.act y z) = shelf.act (shelf.act x y) z ↔ shelf.act x z = z","args":"{R : Type u_1} [rack R] {x y z : R}","doc_string":"Associative racks are uninteresting.","type":"shelf.act x (shelf.act y z) = shelf.act (shelf.act x y) z ↔ shelf.act x z = z"},{"name":"not_not","kind":"theorem","statement":"theorem not_not {a : Prop} : ¬¬a ↔ a","theorem":"{a : Prop} : ¬¬a ↔ a","args":"{a : Prop}","doc_string":" The Double Negation Theorem: `¬ ¬ P` is equivalent to `P`. The left-to-right direction, double negation elimination (DNE), is classically true but not constructively.","type":"¬¬a ↔ a"},{"name":"topological_space.exists_dense_seq","kind":"theorem","statement":"theorem topological_space.exists_dense_seq (α : Type u) [t : topological_space α] [topological_space.separable_space α] [nonempty α] : ∃ (u : ℕ → α), dense_range u","theorem":"(α : Type u) [t : topological_space α] [topological_space.separable_space α] [nonempty α] : ∃ (u : ℕ → α), dense_range u","args":"(α : Type u) [t : topological_space α] [topological_space.separable_space α] [nonempty α]","doc_string":" A nonempty separable space admits a sequence with dense range. Instead of running `cases` on the conclusion of this lemma, you might want to use `topological_space.dense_seq` and `topological_space.dense_range_dense_seq`.  If `α` might be empty, then `exists_countable_dense` is the main way to use separability of `α`.","type":"∃ (u : ℕ → α), dense_range u"},{"name":"is_of_fin_order_inv_iff","kind":"theorem","statement":"theorem is_of_fin_order_inv_iff {G : Type u} [group G] {x : G} : is_of_fin_order x⁻¹ ↔ is_of_fin_order x","theorem":"{G : Type u} [group G] {x : G} : is_of_fin_order x⁻¹ ↔ is_of_fin_order x","args":"{G : Type u} [group G] {x : G}","doc_string":"Inverses of elements of finite order have finite order.","type":"is_of_fin_order x⁻¹ ↔ is_of_fin_order x"},{"name":"finsupp.single_injective","kind":"theorem","statement":"theorem finsupp.single_injective {α : Type u_1} {M : Type u_5} [has_zero M] (a : α) : function.injective (finsupp.single a)","theorem":"{α : Type u_1} {M : Type u_5} [has_zero M] (a : α) : function.injective (finsupp.single a)","args":"{α : Type u_1} {M : Type u_5} [has_zero M] (a : α)","doc_string":" `finsupp.single a b` is injective in `b`. For the statement that it is injective in `a`, see `finsupp.single_left_injective`","type":"function.injective (finsupp.single a)"},{"name":"not_bdd_above_iff'","kind":"theorem","statement":"theorem not_bdd_above_iff' {α : Type u} [preorder α] {s : set α} : ¬bdd_above s ↔ ∀ (x : α), ∃ (y : α) (H : y ∈ s), ¬y ≤ x","theorem":"{α : Type u} [preorder α] {s : set α} : ¬bdd_above s ↔ ∀ (x : α), ∃ (y : α) (H : y ∈ s), ¬y ≤ x","args":"{α : Type u} [preorder α] {s : set α}","doc_string":" A set `s` is not bounded above if and only if for each `x` there exists `y ∈ s` such that `x` is not greater than or equal to `y`. This version only assumes `preorder` structure and uses `¬(y ≤ x)`. A version for linear orders is called `not_bdd_above_iff`.","type":"¬bdd_above s ↔ ∀ (x : α), ∃ (y : α) (H : y ∈ s), ¬y ≤ x"},{"name":"pythagorean_triple_comm","kind":"theorem","statement":"theorem pythagorean_triple_comm {x y z : ℤ} : pythagorean_triple x y z ↔ pythagorean_triple y x z","theorem":"{x y z : ℤ} : pythagorean_triple x y z ↔ pythagorean_triple y x z","args":"{x y z : ℤ}","doc_string":" Pythagorean triples are interchangable, i.e `x * x + y * y = y * y + x * x = z * z`. This comes from additive commutativity.","type":"pythagorean_triple x y z ↔ pythagorean_triple y x z"},{"name":"nat.le_induction","kind":"theorem","statement":"theorem nat.le_induction {P : ℕ → Prop} {m : ℕ} (h0 : P m) (h1 : ∀ (n : ℕ), m ≤ n → P n → P (n + 1)) (n : ℕ) : m ≤ n → P n","theorem":"{P : ℕ → Prop} {m : ℕ} (h0 : P m) (h1 : ∀ (n : ℕ), m ≤ n → P n → P (n + 1)) (n : ℕ) : m ≤ n → P n","args":"{P : ℕ → Prop} {m : ℕ} (h0 : P m) (h1 : ∀ (n : ℕ), m ≤ n → P n → P (n + 1)) (n : ℕ)","doc_string":"Induction principle starting at a non-zero number. For maps to a `Sort*` see `le_rec_on`.","type":"m ≤ n → P n"},{"name":"is_of_fin_order_neg_iff","kind":"theorem","statement":"theorem is_of_fin_order_neg_iff {G : Type u} [add_group G] {x : G} : is_of_fin_add_order (-x) ↔ is_of_fin_add_order x","theorem":"{G : Type u} [add_group G] {x : G} : is_of_fin_add_order (-x) ↔ is_of_fin_add_order x","args":"{G : Type u} [add_group G] {x : G}","doc_string":"Inverses of elements of finite additive order have finite additive order.","type":"is_of_fin_add_order (-x) ↔ is_of_fin_add_order x"},{"name":"formal_multilinear_series.comp_partial_sum_target_tendsto_at_top","kind":"theorem","statement":"theorem formal_multilinear_series.comp_partial_sum_target_tendsto_at_top  : filter.tendsto (λ (N : ℕ), formal_multilinear_series.comp_partial_sum_target 0 N N) filter.at_top filter.at_top","theorem":" : filter.tendsto (λ (N : ℕ), formal_multilinear_series.comp_partial_sum_target 0 N N) filter.at_top filter.at_top","args":"","doc_string":" The auxiliary set corresponding to the composition of partial sums asymptotically contains all possible compositions.","type":"filter.tendsto (λ (N : ℕ), formal_multilinear_series.comp_partial_sum_target 0 N N) filter.at_top filter.at_top"},{"name":"fin.coe_fin_lt","kind":"theorem","statement":"theorem fin.coe_fin_lt {n : ℕ} {a b : fin n} : ↑a < ↑b ↔ a < b","theorem":"{n : ℕ} {a b : fin n} : ↑a < ↑b ↔ a < b","args":"{n : ℕ} {a b : fin n}","doc_string":"`a < b` as natural numbers if and only if `a < b` in `fin n`.","type":"↑a < ↑b ↔ a < b"},{"name":"subgroup.closure_le","kind":"theorem","statement":"theorem subgroup.closure_le {G : Type u_1} [group G] (K : subgroup G) {k : set G} : subgroup.closure k ≤ K ↔ k ⊆ ↑K","theorem":"{G : Type u_1} [group G] (K : subgroup G) {k : set G} : subgroup.closure k ≤ K ↔ k ⊆ ↑K","args":"{G : Type u_1} [group G] (K : subgroup G) {k : set G}","doc_string":"A subgroup `K` includes `closure k` if and only if it includes `k`.","type":"subgroup.closure k ≤ K ↔ k ⊆ ↑K"},{"name":"is_add_monoid_hom.is_add_monoid_hom_mul_right","kind":"theorem","statement":"theorem is_add_monoid_hom.is_add_monoid_hom_mul_right {γ : Type u_1} [non_unital_non_assoc_semiring γ] (x : γ) : is_add_monoid_hom (λ (y : γ), y * x)","theorem":"{γ : Type u_1} [non_unital_non_assoc_semiring γ] (x : γ) : is_add_monoid_hom (λ (y : γ), y * x)","args":"{γ : Type u_1} [non_unital_non_assoc_semiring γ] (x : γ)","doc_string":"Right multiplication in a ring is an additive monoid morphism.","type":"is_add_monoid_hom (λ (y : γ), y * x)"},{"name":"has_le.le.lt_or_eq","kind":"theorem","statement":"theorem has_le.le.lt_or_eq {α : Type u} [partial_order α] {a b : α} : a ≤ b → a < b ∨ a = b","theorem":"{α : Type u} [partial_order α] {a b : α} : a ≤ b → a < b ∨ a = b","args":"{α : Type u} [partial_order α] {a b : α}","doc_string":"**Alias** of lt_or_eq_of_le`.","type":"a ≤ b → a < b ∨ a = b"},{"name":"continuous_map.continuous_eval_const'","kind":"theorem","statement":"theorem continuous_map.continuous_eval_const' {α : Type u_1} {β : Type u_2} [topological_space α] [topological_space β] [locally_compact_space α] (a : α) : continuous (λ (f : C(α, β)), ⇑f a)","theorem":"{α : Type u_1} {β : Type u_2} [topological_space α] [topological_space β] [locally_compact_space α] (a : α) : continuous (λ (f : C(α, β)), ⇑f a)","args":"{α : Type u_1} {β : Type u_2} [topological_space α] [topological_space β] [locally_compact_space α] (a : α)","doc_string":"See also `continuous_map.continuous_eval_const`","type":"continuous (λ (f : C(α, β)), ⇑f a)"},{"name":"order.lt_of_pred_lt_pred","kind":"theorem","statement":"theorem order.lt_of_pred_lt_pred {α : Type u_1} [preorder α] [pred_order α] {a b : α} [no_min_order α] : order.pred a < order.pred b → a < b","theorem":"{α : Type u_1} [preorder α] [pred_order α] {a b : α} [no_min_order α] : order.pred a < order.pred b → a < b","args":"{α : Type u_1} [preorder α] [pred_order α] {a b : α} [no_min_order α]","doc_string":"**Alias** of the forward direction of order.pred_lt_pred_iff`.","type":"order.pred a < order.pred b → a < b"},{"name":"vadd_comm_class.symm","kind":"theorem","statement":"theorem vadd_comm_class.symm (M : Type u_1) (N : Type u_2) (α : Type u_3) [has_vadd M α] [has_vadd N α] [vadd_comm_class M N α] : vadd_comm_class N M α","theorem":"(M : Type u_1) (N : Type u_2) (α : Type u_3) [has_vadd M α] [has_vadd N α] [vadd_comm_class M N α] : vadd_comm_class N M α","args":"(M : Type u_1) (N : Type u_2) (α : Type u_3) [has_vadd M α] [has_vadd N α] [vadd_comm_class M N α]","doc_string":" Commutativity of additive actions is a symmetric relation. This lemma can't be an instance because this would cause a loop in the instance search graph.","type":"vadd_comm_class N M α"},{"name":"finset.property_of_mem_map_subtype","kind":"theorem","statement":"theorem finset.property_of_mem_map_subtype {α : Type u_1} {p : α → Prop} (s : finset {x // p x}) {a : α} (h : a ∈ finset.map (function.embedding.subtype (λ (x : α), p x)) s) : p a","theorem":"{α : Type u_1} {p : α → Prop} (s : finset {x // p x}) {a : α} (h : a ∈ finset.map (function.embedding.subtype (λ (x : α), p x)) s) : p a","args":"{α : Type u_1} {p : α → Prop} (s : finset {x // p x}) {a : α} (h : a ∈ finset.map (function.embedding.subtype (λ (x : α), p x)) s)","doc_string":" If a `finset` of a subtype is converted to the main type with `embedding.subtype`, all elements of the result have the property of the subtype.","type":"p a"},{"name":"subsemigroup.ext","kind":"theorem","statement":"theorem subsemigroup.ext {M : Type u_1} [has_mul M] {S T : subsemigroup M} (h : ∀ (x : M), x ∈ S ↔ x ∈ T) : S = T","theorem":"{M : Type u_1} [has_mul M] {S T : subsemigroup M} (h : ∀ (x : M), x ∈ S ↔ x ∈ T) : S = T","args":"{M : Type u_1} [has_mul M] {S T : subsemigroup M} (h : ∀ (x : M), x ∈ S ↔ x ∈ T)","doc_string":"Two subsemigroups are equal if they have the same elements.","type":"S = T"},{"name":"padic_val_rat.of_int_multiplicity","kind":"theorem","statement":"theorem padic_val_rat.of_int_multiplicity {p : ℕ} (z : ℤ) (hp : p ≠ 1) (hz : z ≠ 0) : padic_val_rat p ↑z = ↑((multiplicity ↑p z).get _)","theorem":"{p : ℕ} (z : ℤ) (hp : p ≠ 1) (hz : z ≠ 0) : padic_val_rat p ↑z = ↑((multiplicity ↑p z).get _)","args":"{p : ℕ} (z : ℤ) (hp : p ≠ 1) (hz : z ≠ 0)","doc_string":"The p-adic value of an integer `z ≠ 0` is the multiplicity of `p` in `z`.","type":"padic_val_rat p ↑z = ↑((multiplicity ↑p z).get _)"},{"name":"dense.inter_of_open_left","kind":"theorem","statement":"theorem dense.inter_of_open_left {α : Type u} [topological_space α] {s t : set α} (hs : dense s) (ht : dense t) (hso : is_open s) : dense (s ∩ t)","theorem":"{α : Type u} [topological_space α] {s t : set α} (hs : dense s) (ht : dense t) (hso : is_open s) : dense (s ∩ t)","args":"{α : Type u} [topological_space α] {s t : set α} (hs : dense s) (ht : dense t) (hso : is_open s)","doc_string":"The intersection of an open dense set with a dense set is a dense set.","type":"dense (s ∩ t)"},{"name":"add_semiconj_by.zero_right","kind":"theorem","statement":"theorem add_semiconj_by.zero_right {M : Type u} [add_zero_class M] (a : M) : add_semiconj_by a 0 0","theorem":"{M : Type u} [add_zero_class M] (a : M) : add_semiconj_by a 0 0","args":"{M : Type u} [add_zero_class M] (a : M)","doc_string":"Any element additively semiconjugates `0` to `0`.","type":"add_semiconj_by a 0 0"},{"name":"right.add_nonneg","kind":"theorem","statement":"theorem right.add_nonneg {α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α (function.swap has_add.add) has_le.le] {a b : α} (ha : 0 ≤ a) (hb : 0 ≤ b) : 0 ≤ a + b","theorem":"{α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α (function.swap has_add.add) has_le.le] {a b : α} (ha : 0 ≤ a) (hb : 0 ≤ b) : 0 ≤ a + b","args":"{α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α (function.swap has_add.add) has_le.le] {a b : α} (ha : 0 ≤ a) (hb : 0 ≤ b)","doc_string":"Assumes right covariance. The lemma assuming left covariance is `left.add_nonneg`.","type":"0 ≤ a + b"},{"name":"submonoid.one_mem","kind":"theorem","statement":"theorem submonoid.one_mem {M : Type u_1} [mul_one_class M] (S : submonoid M) : 1 ∈ S","theorem":"{M : Type u_1} [mul_one_class M] (S : submonoid M) : 1 ∈ S","args":"{M : Type u_1} [mul_one_class M] (S : submonoid M)","doc_string":"A submonoid contains the monoid's 1.","type":"1 ∈ S"},{"name":"tactic.ring2.correctness","kind":"theorem","statement":"theorem tactic.ring2.correctness {α : Type u_1} [comm_semiring α] (t : tree α) (r₁ r₂ : tactic.ring2.csring_expr) (H : tactic.ring2.horner_expr.of_csexpr r₁ = tactic.ring2.horner_expr.of_csexpr r₂) : tactic.ring2.csring_expr.eval t r₁ = tactic.ring2.csring_expr.eval t r₂","theorem":"{α : Type u_1} [comm_semiring α] (t : tree α) (r₁ r₂ : tactic.ring2.csring_expr) (H : tactic.ring2.horner_expr.of_csexpr r₁ = tactic.ring2.horner_expr.of_csexpr r₂) : tactic.ring2.csring_expr.eval t r₁ = tactic.ring2.csring_expr.eval t r₂","args":"{α : Type u_1} [comm_semiring α] (t : tree α) (r₁ r₂ : tactic.ring2.csring_expr) (H : tactic.ring2.horner_expr.of_csexpr r₁ = tactic.ring2.horner_expr.of_csexpr r₂)","doc_string":" The main proof-by-reflection theorem. Given reflected csring expressions `r₁` and `r₂` plus a storage `t` of atoms, if both expressions go to the same Horner normal form, then the original non-reflected expressions are equal. `H` follows from kernel reduction and is therefore `rfl`.","type":"tactic.ring2.csring_expr.eval t r₁ = tactic.ring2.csring_expr.eval t r₂"},{"name":"ring.two_ne_zero","kind":"theorem","statement":"theorem ring.two_ne_zero {R : Type u_1} [non_assoc_semiring R] [nontrivial R] (hR : ring_char R ≠ 2) : 2 ≠ 0","theorem":"{R : Type u_1} [non_assoc_semiring R] [nontrivial R] (hR : ring_char R ≠ 2) : 2 ≠ 0","args":"{R : Type u_1} [non_assoc_semiring R] [nontrivial R] (hR : ring_char R ≠ 2)","doc_string":"We have `2 ≠ 0` in a nontrivial ring whose characteristic is not `2`.","type":"2 ≠ 0"},{"name":"list.of_fn_zero","kind":"theorem","statement":"theorem list.of_fn_zero {α : Type u} (f : fin 0 → α) : list.of_fn f = list.nil","theorem":"{α : Type u} (f : fin 0 → α) : list.of_fn f = list.nil","args":"{α : Type u} (f : fin 0 → α)","doc_string":"`of_fn` on an empty domain is the empty list.","type":"list.of_fn f = list.nil"},{"name":"add_subgroup.ext","kind":"theorem","statement":"theorem add_subgroup.ext {G : Type u_1} [add_group G] {H K : add_subgroup G} (h : ∀ (x : G), x ∈ H ↔ x ∈ K) : H = K","theorem":"{G : Type u_1} [add_group G] {H K : add_subgroup G} (h : ∀ (x : G), x ∈ H ↔ x ∈ K) : H = K","args":"{G : Type u_1} [add_group G] {H K : add_subgroup G} (h : ∀ (x : G), x ∈ H ↔ x ∈ K)","doc_string":"Two `add_subgroup`s are equal if they have the same elements.","type":"H = K"},{"name":"real.not_summable_nat_cast_inv","kind":"theorem","statement":"theorem real.not_summable_nat_cast_inv  : ¬summable (λ (n : ℕ), (↑n)⁻¹)","theorem":" : ¬summable (λ (n : ℕ), (↑n)⁻¹)","args":"","doc_string":"Harmonic series is not unconditionally summable.","type":"¬summable (λ (n : ℕ), (↑n)⁻¹)"},{"name":"category_theory.limits.has_pushouts_of_has_binary_coproducts_of_has_coequalizers","kind":"theorem","statement":"theorem category_theory.limits.has_pushouts_of_has_binary_coproducts_of_has_coequalizers (C : Type u) [𝒞 : category_theory.category C] [category_theory.limits.has_binary_coproducts C] [category_theory.limits.has_coequalizers C] : category_theory.limits.has_pushouts C","theorem":"(C : Type u) [𝒞 : category_theory.category C] [category_theory.limits.has_binary_coproducts C] [category_theory.limits.has_coequalizers C] : category_theory.limits.has_pushouts C","args":"(C : Type u) [𝒞 : category_theory.category C] [category_theory.limits.has_binary_coproducts C] [category_theory.limits.has_coequalizers C]","doc_string":"If a category has all binary coproducts and all coequalizers, then it also has all pushouts.    As usual, this is not an instance, since there may be a more direct way to construct    pushouts.","type":"category_theory.limits.has_pushouts C"},{"name":"is_group_hom.inv","kind":"theorem","statement":"theorem is_group_hom.inv {α : Type u_1} {β : Type u_2} [group α] [comm_group β] {f : α → β} (hf : is_group_hom f) : is_group_hom (λ (a : α), (f a)⁻¹)","theorem":"{α : Type u_1} {β : Type u_2} [group α] [comm_group β] {f : α → β} (hf : is_group_hom f) : is_group_hom (λ (a : α), (f a)⁻¹)","args":"{α : Type u_1} {β : Type u_2} [group α] [comm_group β] {f : α → β} (hf : is_group_hom f)","doc_string":"The inverse of a group homomorphism is a group homomorphism if the target is commutative.","type":"is_group_hom (λ (a : α), (f a)⁻¹)"},{"name":"list.prod_pos","kind":"theorem","statement":"theorem list.prod_pos {R : Type u_8} [ordered_semiring R] [nontrivial R] (l : list R) (h : ∀ (a : R), a ∈ l → 0 < a) : 0 < l.prod","theorem":"{R : Type u_8} [ordered_semiring R] [nontrivial R] (l : list R) (h : ∀ (a : R), a ∈ l → 0 < a) : 0 < l.prod","args":"{R : Type u_8} [ordered_semiring R] [nontrivial R] (l : list R) (h : ∀ (a : R), a ∈ l → 0 < a)","doc_string":" The product of a list of positive natural numbers is positive, and likewise for any nontrivial ordered semiring.","type":"0 < l.prod"},{"name":"subgroup.is_open_of_one_mem_interior","kind":"theorem","statement":"theorem subgroup.is_open_of_one_mem_interior {G : Type u_1} [group G] [topological_space G] [topological_group G] {H : subgroup G} (h_1_int : 1 ∈ interior ↑H) : is_open ↑H","theorem":"{G : Type u_1} [group G] [topological_space G] [topological_group G] {H : subgroup G} (h_1_int : 1 ∈ interior ↑H) : is_open ↑H","args":"{G : Type u_1} [group G] [topological_space G] [topological_group G] {H : subgroup G} (h_1_int : 1 ∈ interior ↑H)","doc_string":"If a subgroup of a topological group has `1` in its interior, then it is open.","type":"is_open ↑H"},{"name":"function.not_surjective_Type","kind":"theorem","statement":"theorem function.not_surjective_Type {α : Type u} (f : α → Type (max u v)) : ¬function.surjective f","theorem":"{α : Type u} (f : α → Type (max u v)) : ¬function.surjective f","args":"{α : Type u} (f : α → Type (max u v))","doc_string":"There is no surjection from `α : Type u` into `Type u`. This theorem  demonstrates why `Type : Type` would be inconsistent in Lean.","type":"¬function.surjective f"},{"name":"is_mul_hom.inv","kind":"theorem","statement":"theorem is_mul_hom.inv {α : Type u_1} {β : Type u_2} [has_mul α] [comm_group β] {f : α → β} (hf : is_mul_hom f) : is_mul_hom (λ (a : α), (f a)⁻¹)","theorem":"{α : Type u_1} {β : Type u_2} [has_mul α] [comm_group β] {f : α → β} (hf : is_mul_hom f) : is_mul_hom (λ (a : α), (f a)⁻¹)","args":"{α : Type u_1} {β : Type u_2} [has_mul α] [comm_group β] {f : α → β} (hf : is_mul_hom f)","doc_string":" The inverse of a map which preserves multiplication, preserves multiplication when the target is commutative.","type":"is_mul_hom (λ (a : α), (f a)⁻¹)"},{"name":"powers.is_submonoid","kind":"theorem","statement":"theorem powers.is_submonoid {M : Type u_1} [monoid M] (x : M) : is_submonoid (powers x)","theorem":"{M : Type u_1} [monoid M] (x : M) : is_submonoid (powers x)","args":"{M : Type u_1} [monoid M] (x : M)","doc_string":"The set of natural number powers of an element of a monoid `M` is a submonoid of `M`.","type":"is_submonoid (powers x)"},{"name":"add_semiconj_by.zero_left","kind":"theorem","statement":"theorem add_semiconj_by.zero_left {M : Type u} [add_zero_class M] (x : M) : add_semiconj_by 0 x x","theorem":"{M : Type u} [add_zero_class M] (x : M) : add_semiconj_by 0 x x","args":"{M : Type u} [add_zero_class M] (x : M)","doc_string":"Zero additively semiconjugates any element to itself.","type":"add_semiconj_by 0 x x"},{"name":"bdd_below.inter_of_right","kind":"theorem","statement":"theorem bdd_below.inter_of_right {α : Type u} [preorder α] {s t : set α} (h : bdd_below t) : bdd_below (s ∩ t)","theorem":"{α : Type u} [preorder α] {s t : set α} (h : bdd_below t) : bdd_below (s ∩ t)","args":"{α : Type u} [preorder α] {s t : set α} (h : bdd_below t)","doc_string":"If `t` is bounded, then so is `s ∩ t`","type":"bdd_below (s ∩ t)"},{"name":"category_theory.is_subterminal.mono_terminal_from","kind":"theorem","statement":"theorem category_theory.is_subterminal.mono_terminal_from {C : Type u₁} [category_theory.category C] {A : C} [category_theory.limits.has_terminal C] (hA : category_theory.is_subterminal A) : category_theory.mono (category_theory.limits.terminal.from A)","theorem":"{C : Type u₁} [category_theory.category C] {A : C} [category_theory.limits.has_terminal C] (hA : category_theory.is_subterminal A) : category_theory.mono (category_theory.limits.terminal.from A)","args":"{C : Type u₁} [category_theory.category C] {A : C} [category_theory.limits.has_terminal C] (hA : category_theory.is_subterminal A)","doc_string":"If `A` is subterminal, the unique morphism from it to the terminal object is a monomorphism. The converse of `is_subterminal_of_mono_terminal_from`.","type":"category_theory.mono (category_theory.limits.terminal.from A)"},{"name":"nat.count_eq_card_fintype","kind":"theorem","statement":"theorem nat.count_eq_card_fintype (p : ℕ → Prop) [decidable_pred p] (n : ℕ) : nat.count p n = fintype.card {k // k < n ∧ p k}","theorem":"(p : ℕ → Prop) [decidable_pred p] (n : ℕ) : nat.count p n = fintype.card {k // k < n ∧ p k}","args":"(p : ℕ → Prop) [decidable_pred p] (n : ℕ)","doc_string":"`count p n` can be expressed as the cardinality of `{k // k < n ∧ p k}`.","type":"nat.count p n = fintype.card {k // k < n ∧ p k}"},{"name":"range.is_add_submonoid","kind":"theorem","statement":"theorem range.is_add_submonoid {M : Type u_1} [add_monoid M] {γ : Type u_2} [add_monoid γ] {f : M → γ} (hf : is_add_monoid_hom f) : is_add_submonoid (set.range f)","theorem":"{M : Type u_1} [add_monoid M] {γ : Type u_2} [add_monoid γ] {f : M → γ} (hf : is_add_monoid_hom f) : is_add_submonoid (set.range f)","args":"{M : Type u_1} [add_monoid M] {γ : Type u_2} [add_monoid γ] {f : M → γ} (hf : is_add_monoid_hom f)","doc_string":"The image of an `add_monoid` hom is an `add_submonoid` of the codomain.","type":"is_add_submonoid (set.range f)"},{"name":"nat.dvd_left_injective","kind":"theorem","statement":"theorem nat.dvd_left_injective  : function.injective has_dvd.dvd","theorem":" : function.injective has_dvd.dvd","args":"","doc_string":"`dvd` is injective in the left argument","type":"function.injective has_dvd.dvd"},{"name":"seq_closure_subset_closure","kind":"theorem","statement":"theorem seq_closure_subset_closure {X : Type u_1} [topological_space X] (s : set X) : seq_closure s ⊆ closure s","theorem":"{X : Type u_1} [topological_space X] (s : set X) : seq_closure s ⊆ closure s","args":"{X : Type u_1} [topological_space X] (s : set X)","doc_string":" The sequential closure of a set is contained in the closure of that set. The converse is not true.","type":"seq_closure s ⊆ closure s"},{"name":"dense_range.quotient","kind":"theorem","statement":"theorem dense_range.quotient {α : Type u} {β : Type v} [setoid α] [topological_space α] {f : β → α} (hf : dense_range f) : dense_range (quotient.mk ∘ f)","theorem":"{α : Type u} {β : Type v} [setoid α] [topological_space α] {f : β → α} (hf : dense_range f) : dense_range (quotient.mk ∘ f)","args":"{α : Type u} {β : Type v} [setoid α] [topological_space α] {f : β → α} (hf : dense_range f)","doc_string":"The composition of `quotient.mk` and a function with dense range has dense range.","type":"dense_range (quotient.mk ∘ f)"},{"name":"add_pos_of_nonneg_of_pos","kind":"theorem","statement":"theorem add_pos_of_nonneg_of_pos {α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α has_add.add has_lt.lt] {a b : α} (ha : 0 ≤ a) (hb : 0 < b) : 0 < a + b","theorem":"{α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α has_add.add has_lt.lt] {a b : α} (ha : 0 ≤ a) (hb : 0 < b) : 0 < a + b","args":"{α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α has_add.add has_lt.lt] {a b : α} (ha : 0 ≤ a) (hb : 0 < b)","doc_string":"**Alias** of `left.add_pos_of_nonneg_of_pos`.","type":"0 < a + b"},{"name":"max_chain_spec","kind":"theorem","statement":"theorem max_chain_spec {α : Type u_1} {r : α → α → Prop} : is_max_chain r (max_chain r)","theorem":"{α : Type u_1} {r : α → α → Prop} : is_max_chain r (max_chain r)","args":"{α : Type u_1} {r : α → α → Prop}","doc_string":" **Hausdorff's maximality principle**  There exists a maximal totally ordered set of `α`. Note that we do not require `α` to be partially ordered by `r`.","type":"is_max_chain r (max_chain r)"},{"name":"padic_val_rat.of_nat","kind":"theorem","statement":"theorem padic_val_rat.of_nat {p n : ℕ} : padic_val_rat p ↑n = ↑(padic_val_nat p n)","theorem":"{p n : ℕ} : padic_val_rat p ↑n = ↑(padic_val_nat p n)","args":"{p n : ℕ}","doc_string":"The p-adic value of an integer `z ≠ 0` is its p-adic_value as a rational","type":"padic_val_rat p ↑n = ↑(padic_val_nat p n)"},{"name":"order.pfilter.ext","kind":"theorem","statement":"theorem order.pfilter.ext {P : Type u_1} [preorder P] (s t : order.pfilter P) (h : ↑s = ↑t) : s = t","theorem":"{P : Type u_1} [preorder P] (s t : order.pfilter P) (h : ↑s = ↑t) : s = t","args":"{P : Type u_1} [preorder P] (s t : order.pfilter P) (h : ↑s = ↑t)","doc_string":"Two filters are equal when their underlying sets are equal.","type":"s = t"},{"name":"left.add_nonneg","kind":"theorem","statement":"theorem left.add_nonneg {α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α has_add.add has_le.le] {a b : α} (ha : 0 ≤ a) (hb : 0 ≤ b) : 0 ≤ a + b","theorem":"{α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α has_add.add has_le.le] {a b : α} (ha : 0 ≤ a) (hb : 0 ≤ b) : 0 ≤ a + b","args":"{α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α has_add.add has_le.le] {a b : α} (ha : 0 ≤ a) (hb : 0 ≤ b)","doc_string":"Assumes left covariance. The lemma assuming right covariance is `right.add_nonneg`.","type":"0 ≤ a + b"},{"name":"multiset.nat.mem_antidiagonal","kind":"theorem","statement":"theorem multiset.nat.mem_antidiagonal {n : ℕ} {x : ℕ × ℕ} : x ∈ multiset.nat.antidiagonal n ↔ x.fst + x.snd = n","theorem":"{n : ℕ} {x : ℕ × ℕ} : x ∈ multiset.nat.antidiagonal n ↔ x.fst + x.snd = n","args":"{n : ℕ} {x : ℕ × ℕ}","doc_string":"A pair (i, j) is contained in the antidiagonal of `n` if and only if `i + j = n`.","type":"x ∈ multiset.nat.antidiagonal n ↔ x.fst + x.snd = n"},{"name":"ordinal.bdd_above_range","kind":"theorem","statement":"theorem ordinal.bdd_above_range {ι : Type u} (f : ι → ordinal) : bdd_above (set.range f)","theorem":"{ι : Type u} (f : ι → ordinal) : bdd_above (set.range f)","args":"{ι : Type u} (f : ι → ordinal)","doc_string":"The range of any family of ordinals is bounded above. See also `lsub_not_mem_range`.","type":"bdd_above (set.range f)"},{"name":"extend_partial_order","kind":"theorem","statement":"theorem extend_partial_order {α : Type u} (r : α → α → Prop) [is_partial_order α r] : ∃ (s : α → α → Prop) (_x : is_linear_order α s), r ≤ s","theorem":"{α : Type u} (r : α → α → Prop) [is_partial_order α r] : ∃ (s : α → α → Prop) (_x : is_linear_order α s), r ≤ s","args":"{α : Type u} (r : α → α → Prop) [is_partial_order α r]","doc_string":"Any partial order can be extended to a linear order.","type":"∃ (s : α → α → Prop) (_x : is_linear_order α s), r ≤ s"},{"name":"commute.mul_right","kind":"theorem","statement":"theorem commute.mul_right {S : Type u_1} [semigroup S] {a b c : S} (hab : commute a b) (hac : commute a c) : commute a (b * c)","theorem":"{S : Type u_1} [semigroup S] {a b c : S} (hab : commute a b) (hac : commute a c) : commute a (b * c)","args":"{S : Type u_1} [semigroup S] {a b c : S} (hab : commute a b) (hac : commute a c)","doc_string":"If `a` commutes with both `b` and `c`, then it commutes with their product.","type":"commute a (b * c)"},{"name":"finsum_mem_empty","kind":"theorem","statement":"theorem finsum_mem_empty {α : Type u_1} {M : Type u_5} [add_comm_monoid M] {f : α → M} : finsum (λ (i : α), finsum (λ (H : i ∈ ∅), f i)) = 0","theorem":"{α : Type u_1} {M : Type u_5} [add_comm_monoid M] {f : α → M} : finsum (λ (i : α), finsum (λ (H : i ∈ ∅), f i)) = 0","args":"{α : Type u_1} {M : Type u_5} [add_comm_monoid M] {f : α → M}","doc_string":"The sum of any function over an empty set is `0`.","type":"finsum (λ (i : α), finsum (λ (H : i ∈ ∅), f i)) = 0"},{"name":"pythagorean_triple.zero","kind":"theorem","statement":"theorem pythagorean_triple.zero  : pythagorean_triple 0 0 0","theorem":" : pythagorean_triple 0 0 0","args":"","doc_string":"The zeroth Pythagorean triple is all zeros.","type":"pythagorean_triple 0 0 0"},{"name":"is_coprime.ne_zero","kind":"theorem","statement":"theorem is_coprime.ne_zero {R : Type u} [comm_semiring R] [nontrivial R] {p : fin 2 → R} (h : is_coprime (p 0) (p 1)) : p ≠ 0","theorem":"{R : Type u} [comm_semiring R] [nontrivial R] {p : fin 2 → R} (h : is_coprime (p 0) (p 1)) : p ≠ 0","args":"{R : Type u} [comm_semiring R] [nontrivial R] {p : fin 2 → R} (h : is_coprime (p 0) (p 1))","doc_string":"If a 2-vector `p` satisfies `is_coprime (p 0) (p 1)`, then `p ≠ 0`.","type":"p ≠ 0"},{"name":"is_simple_group_of_prime_card","kind":"theorem","statement":"theorem is_simple_group_of_prime_card {α : Type u} [group α] [fintype α] {p : ℕ} [hp : fact (nat.prime p)] (h : fintype.card α = p) : is_simple_group α","theorem":"{α : Type u} [group α] [fintype α] {p : ℕ} [hp : fact (nat.prime p)] (h : fintype.card α = p) : is_simple_group α","args":"{α : Type u} [group α] [fintype α] {p : ℕ} [hp : fact (nat.prime p)] (h : fintype.card α = p)","doc_string":"A finite group of prime order is simple.","type":"is_simple_group α"},{"name":"bool.apply_apply_apply","kind":"theorem","statement":"theorem bool.apply_apply_apply (f : bool → bool) (x : bool) : f (f (f x)) = f x","theorem":"(f : bool → bool) (x : bool) : f (f (f x)) = f x","args":"(f : bool → bool) (x : bool)","doc_string":"**Kaminski's Equation**","type":"f (f (f x)) = f x"},{"name":"has_le.le.antisymm'","kind":"theorem","statement":"theorem has_le.le.antisymm' {α : Type u} [partial_order α] {a b : α} : a ≤ b → b ≤ a → b = a","theorem":"{α : Type u} [partial_order α] {a b : α} : a ≤ b → b ≤ a → b = a","args":"{α : Type u} [partial_order α] {a b : α}","doc_string":"**Alias** of ge_antisymm`.","type":"a ≤ b → b ≤ a → b = a"},{"name":"one_lt_mul_of_le_of_lt'","kind":"theorem","statement":"theorem one_lt_mul_of_le_of_lt' {α : Type u_1} [mul_one_class α] [preorder α] [covariant_class α α has_mul.mul has_lt.lt] {a b : α} (ha : 1 ≤ a) (hb : 1 < b) : 1 < a * b","theorem":"{α : Type u_1} [mul_one_class α] [preorder α] [covariant_class α α has_mul.mul has_lt.lt] {a b : α} (ha : 1 ≤ a) (hb : 1 < b) : 1 < a * b","args":"{α : Type u_1} [mul_one_class α] [preorder α] [covariant_class α α has_mul.mul has_lt.lt] {a b : α} (ha : 1 ≤ a) (hb : 1 < b)","doc_string":"**Alias** of left.one_lt_mul_of_le_of_lt`.","type":"1 < a * b"},{"name":"inv_le_one'","kind":"theorem","statement":"theorem inv_le_one' {α : Type u} [group α] [has_le α] [covariant_class α α has_mul.mul has_le.le] {a : α} : a⁻¹ ≤ 1 ↔ 1 ≤ a","theorem":"{α : Type u} [group α] [has_le α] [covariant_class α α has_mul.mul has_le.le] {a : α} : a⁻¹ ≤ 1 ↔ 1 ≤ a","args":"{α : Type u} [group α] [has_le α] [covariant_class α α has_mul.mul has_le.le] {a : α}","doc_string":"**Alias** of left.inv_le_one_iff`.","type":"a⁻¹ ≤ 1 ↔ 1 ≤ a"},{"name":"is_right_regular.of_mul","kind":"theorem","statement":"theorem is_right_regular.of_mul {R : Type u_1} {a b : R} [semigroup R] (ab : is_right_regular (b * a)) : is_right_regular b","theorem":"{R : Type u_1} {a b : R} [semigroup R] (ab : is_right_regular (b * a)) : is_right_regular b","args":"{R : Type u_1} {a b : R} [semigroup R] (ab : is_right_regular (b * a))","doc_string":"  If an element `b` becomes right-regular after multiplying it on the right by a right-regular element, then `b` is right-regular.","type":"is_right_regular b"},{"name":"nat.pow_le_iff_le_log","kind":"theorem","statement":"theorem nat.pow_le_iff_le_log {b : ℕ} (hb : 1 < b) {x y : ℕ} (hy : 0 < y) : b ^ x ≤ y ↔ x ≤ nat.log b y","theorem":"{b : ℕ} (hb : 1 < b) {x y : ℕ} (hy : 0 < y) : b ^ x ≤ y ↔ x ≤ nat.log b y","args":"{b : ℕ} (hb : 1 < b) {x y : ℕ} (hy : 0 < y)","doc_string":"`pow b` and `log b` (almost) form a Galois connection.","type":"b ^ x ≤ y ↔ x ≤ nat.log b y"},{"name":"le_implies_le_of_le_of_le","kind":"theorem","statement":"theorem le_implies_le_of_le_of_le {α : Type u} {a b c d : α} [preorder α] (hca : c ≤ a) (hbd : b ≤ d) : a ≤ b → c ≤ d","theorem":"{α : Type u} {a b c d : α} [preorder α] (hca : c ≤ a) (hbd : b ≤ d) : a ≤ b → c ≤ d","args":"{α : Type u} {a b c d : α} [preorder α] (hca : c ≤ a) (hbd : b ≤ d)","doc_string":"monotonicity of `≤` with respect to `→`","type":"a ≤ b → c ≤ d"},{"name":"filter.comap_cocompact_le","kind":"theorem","statement":"theorem filter.comap_cocompact_le {α : Type u} {β : Type v} [topological_space α] [topological_space β] {f : α → β} (hf : continuous f) : filter.comap f (filter.cocompact β) ≤ filter.cocompact α","theorem":"{α : Type u} {β : Type v} [topological_space α] [topological_space β] {f : α → β} (hf : continuous f) : filter.comap f (filter.cocompact β) ≤ filter.cocompact α","args":"{α : Type u} {β : Type v} [topological_space α] [topological_space β] {f : α → β} (hf : continuous f)","doc_string":" The comap of the cocompact filter on `β` by a continuous function `f : α → β` is less than or equal to the cocompact filter on `α`. This is a reformulation of the fact that images of compact sets are compact.","type":"filter.comap f (filter.cocompact β) ≤ filter.cocompact α"},{"name":"has_btw.btw.sbtw_of_not_btw","kind":"theorem","statement":"theorem has_btw.btw.sbtw_of_not_btw {α : Type u_1} [circular_preorder α] {a b c : α} (habc : has_btw.btw a b c) (hcba : ¬has_btw.btw c b a) : has_sbtw.sbtw a b c","theorem":"{α : Type u_1} [circular_preorder α] {a b c : α} (habc : has_btw.btw a b c) (hcba : ¬has_btw.btw c b a) : has_sbtw.sbtw a b c","args":"{α : Type u_1} [circular_preorder α] {a b c : α} (habc : has_btw.btw a b c) (hcba : ¬has_btw.btw c b a)","doc_string":"**Alias** of sbtw_of_btw_not_btw`.","type":"has_sbtw.sbtw a b c"},{"name":"finset.subtype_map_of_mem","kind":"theorem","statement":"theorem finset.subtype_map_of_mem {α : Type u_1} {s : finset α} {p : α → Prop} [decidable_pred p] (h : ∀ (x : α), x ∈ s → p x) : finset.map (function.embedding.subtype p) (finset.subtype p s) = s","theorem":"{α : Type u_1} {s : finset α} {p : α → Prop} [decidable_pred p] (h : ∀ (x : α), x ∈ s → p x) : finset.map (function.embedding.subtype p) (finset.subtype p s) = s","args":"{α : Type u_1} {s : finset α} {p : α → Prop} [decidable_pred p] (h : ∀ (x : α), x ∈ s → p x)","doc_string":" If all elements of a `finset` satisfy the predicate `p`, `s.subtype p` converts back to `s` with `embedding.subtype`.","type":"finset.map (function.embedding.subtype p) (finset.subtype p s) = s"},{"name":"odd.exists_bit1","kind":"theorem","statement":"theorem odd.exists_bit1 {α : Type u_2} [semiring α] {a : α} : odd a → (∃ (b : α), a = bit1 b)","theorem":"{α : Type u_2} [semiring α] {a : α} : odd a → (∃ (b : α), a = bit1 b)","args":"{α : Type u_2} [semiring α] {a : α}","doc_string":"**Alias** of the forward direction of odd_iff_exists_bit1`.","type":"odd a → (∃ (b : α), a = bit1 b)"},{"name":"padic_val_nat.mul","kind":"theorem","statement":"theorem padic_val_nat.mul (p : ℕ) [p_prime : fact (nat.prime p)] {q r : ℕ} (hq : q ≠ 0) (hr : r ≠ 0) : padic_val_nat p (q * r) = padic_val_nat p q + padic_val_nat p r","theorem":"(p : ℕ) [p_prime : fact (nat.prime p)] {q r : ℕ} (hq : q ≠ 0) (hr : r ≠ 0) : padic_val_nat p (q * r) = padic_val_nat p q + padic_val_nat p r","args":"(p : ℕ) [p_prime : fact (nat.prime p)] {q r : ℕ} (hq : q ≠ 0) (hr : r ≠ 0)","doc_string":"A rewrite lemma for `padic_val_nat p (q * r)` with conditions `q ≠ 0`, `r ≠ 0`.","type":"padic_val_nat p (q * r) = padic_val_nat p q + padic_val_nat p r"},{"name":"add_subgroup.neg_mem","kind":"theorem","statement":"theorem add_subgroup.neg_mem {G : Type u_1} [add_group G] (H : add_subgroup G) {x : G} : x ∈ H → -x ∈ H","theorem":"{G : Type u_1} [add_group G] (H : add_subgroup G) {x : G} : x ∈ H → -x ∈ H","args":"{G : Type u_1} [add_group G] (H : add_subgroup G) {x : G}","doc_string":"An `add_subgroup` is closed under inverse.","type":"x ∈ H → -x ∈ H"},{"name":"category_theory.limits.initial_mono_class.of_initial","kind":"theorem","statement":"theorem category_theory.limits.initial_mono_class.of_initial {C : Type u₁} [category_theory.category C] [category_theory.limits.has_initial C] (h : ∀ (X : C), category_theory.mono (category_theory.limits.initial.to X)) : category_theory.limits.initial_mono_class C","theorem":"{C : Type u₁} [category_theory.category C] [category_theory.limits.has_initial C] (h : ∀ (X : C), category_theory.mono (category_theory.limits.initial.to X)) : category_theory.limits.initial_mono_class C","args":"{C : Type u₁} [category_theory.category C] [category_theory.limits.has_initial C] (h : ∀ (X : C), category_theory.mono (category_theory.limits.initial.to X))","doc_string":" To show a category is a `initial_mono_class` it suffices to show every morphism out of the initial object is a monomorphism.","type":"category_theory.limits.initial_mono_class C"},{"name":"structure_groupoid.id_mem_maximal_atlas","kind":"theorem","statement":"theorem structure_groupoid.id_mem_maximal_atlas {H : Type u} [topological_space H] (G : structure_groupoid H) : local_homeomorph.refl H ∈ structure_groupoid.maximal_atlas H G","theorem":"{H : Type u} [topological_space H] (G : structure_groupoid H) : local_homeomorph.refl H ∈ structure_groupoid.maximal_atlas H G","args":"{H : Type u} [topological_space H] (G : structure_groupoid H)","doc_string":"In the model space, the identity is in any maximal atlas.","type":"local_homeomorph.refl H ∈ structure_groupoid.maximal_atlas H G"},{"name":"function.is_fixed_pt.is_periodic_pt","kind":"theorem","statement":"theorem function.is_fixed_pt.is_periodic_pt {α : Type u_1} {f : α → α} {x : α} (hf : function.is_fixed_pt f x) (n : ℕ) : function.is_periodic_pt f n x","theorem":"{α : Type u_1} {f : α → α} {x : α} (hf : function.is_fixed_pt f x) (n : ℕ) : function.is_periodic_pt f n x","args":"{α : Type u_1} {f : α → α} {x : α} (hf : function.is_fixed_pt f x) (n : ℕ)","doc_string":"A fixed point of `f` is a periodic point of `f` of any prescribed period.","type":"function.is_periodic_pt f n x"},{"name":"left.inv_lt_one_iff","kind":"theorem","statement":"theorem left.inv_lt_one_iff {α : Type u} [group α] [has_lt α] [covariant_class α α has_mul.mul has_lt.lt] {a : α} : a⁻¹ < 1 ↔ 1 < a","theorem":"{α : Type u} [group α] [has_lt α] [covariant_class α α has_mul.mul has_lt.lt] {a : α} : a⁻¹ < 1 ↔ 1 < a","args":"{α : Type u} [group α] [has_lt α] [covariant_class α α has_mul.mul has_lt.lt] {a : α}","doc_string":"Uses `left` co(ntra)variant.","type":"a⁻¹ < 1 ↔ 1 < a"},{"name":"subtype.range_coe_subtype","kind":"theorem","statement":"theorem subtype.range_coe_subtype {α : Type u_1} {p : α → Prop} : set.range coe = {x : α | p x}","theorem":"{α : Type u_1} {p : α → Prop} : set.range coe = {x : α | p x}","args":"{α : Type u_1} {p : α → Prop}","doc_string":"We make this the simp lemma instead of `range_coe`. The reason is that if we write  for `s : set α` the function `coe : s → α`, then the inferred implicit arguments of `coe` are  `coe α (λ x, x ∈ s)`.","type":"set.range coe = {x : α | p x}"},{"name":"is_add_regular_add_and_add_iff","kind":"theorem","statement":"theorem is_add_regular_add_and_add_iff {R : Type u_1} {a b : R} [add_semigroup R] : is_add_regular (a + b) ∧ is_add_regular (b + a) ↔ is_add_regular a ∧ is_add_regular b","theorem":"{R : Type u_1} {a b : R} [add_semigroup R] : is_add_regular (a + b) ∧ is_add_regular (b + a) ↔ is_add_regular a ∧ is_add_regular b","args":"{R : Type u_1} {a b : R} [add_semigroup R]","doc_string":"Two elements `a` and `b` are add-regular if and only if both sums `a + b` and `b + a` are add-regular.","type":"is_add_regular (a + b) ∧ is_add_regular (b + a) ↔ is_add_regular a ∧ is_add_regular b"},{"name":"lt_add_of_neg_add_lt","kind":"theorem","statement":"theorem lt_add_of_neg_add_lt {α : Type u} [add_group α] [has_lt α] [covariant_class α α has_add.add has_lt.lt] {a b c : α} : -b + a < c → a < b + c","theorem":"{α : Type u} [add_group α] [has_lt α] [covariant_class α α has_add.add has_lt.lt] {a b c : α} : -b + a < c → a < b + c","args":"{α : Type u} [add_group α] [has_lt α] [covariant_class α α has_add.add has_lt.lt] {a b c : α}","doc_string":"**Alias** of the forward direction of inv_mul_lt_iff_lt_mul`.","type":"-b + a < c → a < b + c"},{"name":"pow_two_sub_pow_two","kind":"theorem","statement":"theorem pow_two_sub_pow_two {R : Type u₁} [comm_ring R] (a b : R) : a ^ 2 - b ^ 2 = (a + b) * (a - b)","theorem":"{R : Type u₁} [comm_ring R] (a b : R) : a ^ 2 - b ^ 2 = (a + b) * (a - b)","args":"{R : Type u₁} [comm_ring R] (a b : R)","doc_string":"**Alias** of sq_sub_sq`.","type":"a ^ 2 - b ^ 2 = (a + b) * (a - b)"},{"name":"has_le.le.eq_of_not_gt","kind":"theorem","statement":"theorem has_le.le.eq_of_not_gt {α : Type u} [partial_order α] {a b : α} (hab : a ≤ b) (hba : ¬a < b) : b = a","theorem":"{α : Type u} [partial_order α] {a b : α} (hab : a ≤ b) (hba : ¬a < b) : b = a","args":"{α : Type u} [partial_order α] {a b : α} (hab : a ≤ b) (hba : ¬a < b)","doc_string":"**Alias** of eq_of_ge_of_not_gt`.","type":"b = a"},{"name":"add_subgroup.multiset_sum_mem","kind":"theorem","statement":"theorem add_subgroup.multiset_sum_mem {G : Type u_1} [add_comm_group G] (K : add_subgroup G) (g : multiset G) : (∀ (a : G), a ∈ g → a ∈ K) → g.sum ∈ K","theorem":"{G : Type u_1} [add_comm_group G] (K : add_subgroup G) (g : multiset G) : (∀ (a : G), a ∈ g → a ∈ K) → g.sum ∈ K","args":"{G : Type u_1} [add_comm_group G] (K : add_subgroup G) (g : multiset G)","doc_string":"Sum of a multiset of elements in an `add_subgroup` of an `add_comm_group` is in the `add_subgroup`.","type":"(∀ (a : G), a ∈ g → a ∈ K) → g.sum ∈ K"},{"name":"real.tendsto_exp_div_pow_at_top","kind":"theorem","statement":"theorem real.tendsto_exp_div_pow_at_top (n : ℕ) : filter.tendsto (λ (x : ℝ), real.exp x / x ^ n) filter.at_top filter.at_top","theorem":"(n : ℕ) : filter.tendsto (λ (x : ℝ), real.exp x / x ^ n) filter.at_top filter.at_top","args":"(n : ℕ)","doc_string":"The function `exp(x)/x^n` tends to `+∞` at `+∞`, for any natural number `n`","type":"filter.tendsto (λ (x : ℝ), real.exp x / x ^ n) filter.at_top filter.at_top"},{"name":"con.ext'","kind":"theorem","statement":"theorem con.ext' {M : Type u_1} [has_mul M] {c d : con M} (H : setoid.r = setoid.r) : c = d","theorem":"{M : Type u_1} [has_mul M] {c d : con M} (H : setoid.r = setoid.r) : c = d","args":"{M : Type u_1} [has_mul M] {c d : con M} (H : setoid.r = setoid.r)","doc_string":"The map sending a congruence relation to its underlying binary relation is injective.","type":"c = d"},{"name":"pow_two_nonneg","kind":"theorem","statement":"theorem pow_two_nonneg {R : Type u_4} [linear_ordered_ring R] (a : R) : 0 ≤ a ^ 2","theorem":"{R : Type u_4} [linear_ordered_ring R] (a : R) : 0 ≤ a ^ 2","args":"{R : Type u_4} [linear_ordered_ring R] (a : R)","doc_string":"**Alias** of sq_nonneg`.","type":"0 ≤ a ^ 2"},{"name":"composition.sigma_composition_eq_iff","kind":"theorem","statement":"theorem composition.sigma_composition_eq_iff {n : ℕ} (i j : Σ (a : composition n), composition a.length) : i = j ↔ i.fst.blocks = j.fst.blocks ∧ i.snd.blocks = j.snd.blocks","theorem":"{n : ℕ} (i j : Σ (a : composition n), composition a.length) : i = j ↔ i.fst.blocks = j.fst.blocks ∧ i.snd.blocks = j.snd.blocks","args":"{n : ℕ} (i j : Σ (a : composition n), composition a.length)","doc_string":" Rewriting equality in the dependent type `Σ (a : composition n), composition a.length)` in non-dependent terms with lists, requiring that the blocks coincide.","type":"i = j ↔ i.fst.blocks = j.fst.blocks ∧ i.snd.blocks = j.snd.blocks"},{"name":"lower_central_series_is_descending_central_series","kind":"theorem","statement":"theorem lower_central_series_is_descending_central_series {G : Type u_1} [group G] : is_descending_central_series (lower_central_series G)","theorem":"{G : Type u_1} [group G] : is_descending_central_series (lower_central_series G)","args":"{G : Type u_1} [group G]","doc_string":"The lower central series of a group is a descending central series.","type":"is_descending_central_series (lower_central_series G)"},{"name":"is_compact.diff","kind":"theorem","statement":"theorem is_compact.diff {α : Type u} [topological_space α] {s t : set α} (hs : is_compact s) (ht : is_open t) : is_compact (s  t)","theorem":"{α : Type u} [topological_space α] {s t : set α} (hs : is_compact s) (ht : is_open t) : is_compact (s  t)","args":"{α : Type u} [topological_space α] {s t : set α} (hs : is_compact s) (ht : is_open t)","doc_string":"The set difference of a compact set and an open set is a compact set.","type":"is_compact (s  t)"},{"name":"sbtw_cyclic","kind":"theorem","statement":"theorem sbtw_cyclic {α : Type u_1} [circular_preorder α] {a b c : α} : has_sbtw.sbtw a b c ↔ has_sbtw.sbtw c a b","theorem":"{α : Type u_1} [circular_preorder α] {a b c : α} : has_sbtw.sbtw a b c ↔ has_sbtw.sbtw c a b","args":"{α : Type u_1} [circular_preorder α] {a b c : α}","doc_string":" The order of the `↔` has been chosen so that `rw sbtw_cyclic` cycles to the right while `rw ←sbtw_cyclic` cycles to the left (thus following the prepended arrow).","type":"has_sbtw.sbtw a b c ↔ has_sbtw.sbtw c a b"},{"name":"polynomial.cyclotomic_injective","kind":"theorem","statement":"theorem polynomial.cyclotomic_injective {R : Type u_1} [comm_ring R] [char_zero R] : function.injective (λ (n : ℕ), polynomial.cyclotomic n R)","theorem":"{R : Type u_1} [comm_ring R] [char_zero R] : function.injective (λ (n : ℕ), polynomial.cyclotomic n R)","args":"{R : Type u_1} [comm_ring R] [char_zero R]","doc_string":"Over a ring `R` of characteristic zero, `λ n, cyclotomic n R` is injective.","type":"function.injective (λ (n : ℕ), polynomial.cyclotomic n R)"},{"name":"finset.up_shadow_empty","kind":"theorem","statement":"theorem finset.up_shadow_empty {α : Type u_1} [decidable_eq α] [fintype α] : ∅.up_shadow = ∅","theorem":"{α : Type u_1} [decidable_eq α] [fintype α] : ∅.up_shadow = ∅","args":"{α : Type u_1} [decidable_eq α] [fintype α]","doc_string":"The upper shadow of the empty set is empty.","type":"∅.up_shadow = ∅"},{"name":"padic_val_int.zero","kind":"theorem","statement":"theorem padic_val_int.zero {p : ℕ} : padic_val_int p 0 = 0","theorem":"{p : ℕ} : padic_val_int p 0 = 0","args":"{p : ℕ}","doc_string":"`padic_val_int p 0` is 0 for any `p`.","type":"padic_val_int p 0 = 0"},{"name":"add_con.coe_zero","kind":"theorem","statement":"theorem add_con.coe_zero {M : Type u_1} [add_zero_class M] {c : add_con M} : ↑0 = 0","theorem":"{M : Type u_1} [add_zero_class M] {c : add_con M} : ↑0 = 0","args":"{M : Type u_1} [add_zero_class M] {c : add_con M}","doc_string":"The 0 of the quotient of an `add_monoid` by an additive congruence relation is the equivalence class of the `add_monoid`'s 0.","type":"↑0 = 0"},{"name":"int.dvd_of_dvd_mul_left_of_gcd_one","kind":"theorem","statement":"theorem int.dvd_of_dvd_mul_left_of_gcd_one {a b c : ℤ} (habc : a ∣ b * c) (hab : a.gcd c = 1) : a ∣ b","theorem":"{a b c : ℤ} (habc : a ∣ b * c) (hab : a.gcd c = 1) : a ∣ b","args":"{a b c : ℤ} (habc : a ∣ b * c) (hab : a.gcd c = 1)","doc_string":" Euclid's lemma: if `a ∣ b * c` and `gcd a c = 1` then `a ∣ b`. Compare with `is_coprime.dvd_of_dvd_mul_left` and `unique_factorization_monoid.dvd_of_dvd_mul_left_of_no_prime_factors`","type":"a ∣ b"},{"name":"eq_zero_of_zero_eq_one","kind":"theorem","statement":"theorem eq_zero_of_zero_eq_one {M₀ : Type u_1} [mul_zero_one_class M₀] (h : 0 = 1) (a : M₀) : a = 0","theorem":"{M₀ : Type u_1} [mul_zero_one_class M₀] (h : 0 = 1) (a : M₀) : a = 0","args":"{M₀ : Type u_1} [mul_zero_one_class M₀] (h : 0 = 1) (a : M₀)","doc_string":"In a monoid with zero, if zero equals one, then zero is the only element.","type":"a = 0"},{"name":"continuous.snd'","kind":"theorem","statement":"theorem continuous.snd' {α : Type u} {β : Type v} {γ : Type u_1} [topological_space α] [topological_space β] [topological_space γ] {f : β → γ} (hf : continuous f) : continuous (λ (x : α × β), f x.snd)","theorem":"{α : Type u} {β : Type v} {γ : Type u_1} [topological_space α] [topological_space β] [topological_space γ] {f : β → γ} (hf : continuous f) : continuous (λ (x : α × β), f x.snd)","args":"{α : Type u} {β : Type v} {γ : Type u_1} [topological_space α] [topological_space β] [topological_space γ] {f : β → γ} (hf : continuous f)","doc_string":"Precomposing `f` with `prod.snd` is continuous","type":"continuous (λ (x : α × β), f x.snd)"},{"name":"Compactum_to_CompHaus.faithful","kind":"theorem","statement":"theorem Compactum_to_CompHaus.faithful  : category_theory.faithful Compactum_to_CompHaus","theorem":" : category_theory.faithful Compactum_to_CompHaus","args":"","doc_string":"The functor Compactum_to_CompHaus is faithful.","type":"category_theory.faithful Compactum_to_CompHaus"},{"name":"and_or_distrib_right","kind":"theorem","statement":"theorem and_or_distrib_right {a b c : Prop} : a ∧ b ∨ c ↔ (a ∨ c) ∧ (b ∨ c)","theorem":"{a b c : Prop} : a ∧ b ∨ c ↔ (a ∨ c) ∧ (b ∨ c)","args":"{a b c : Prop}","doc_string":"`∨` distributes over `∧` (on the right).","type":"a ∧ b ∨ c ↔ (a ∨ c) ∧ (b ∨ c)"},{"name":"powers.self_mem","kind":"theorem","statement":"theorem powers.self_mem {M : Type u_1} [monoid M] {x : M} : x ∈ powers x","theorem":"{M : Type u_1} [monoid M] {x : M} : x ∈ powers x","args":"{M : Type u_1} [monoid M] {x : M}","doc_string":"An element of a monoid is in the set of that element's natural number powers.","type":"x ∈ powers x"},{"name":"matrix.det_fin_zero","kind":"theorem","statement":"theorem matrix.det_fin_zero {R : Type v} [comm_ring R] {A : matrix (fin 0) (fin 0) R} : A.det = 1","theorem":"{R : Type v} [comm_ring R] {A : matrix (fin 0) (fin 0) R} : A.det = 1","args":"{R : Type v} [comm_ring R] {A : matrix (fin 0) (fin 0) R}","doc_string":"Determinant of 0x0 matrix","type":"A.det = 1"},{"name":"add_units.is_add_unit_add_add_units","kind":"theorem","statement":"theorem add_units.is_add_unit_add_add_units {M : Type u_1} [add_monoid M] (a : M) (u : add_units M) : is_add_unit (a + ↑u) ↔ is_add_unit a","theorem":"{M : Type u_1} [add_monoid M] (a : M) (u : add_units M) : is_add_unit (a + ↑u) ↔ is_add_unit a","args":"{M : Type u_1} [add_monoid M] (a : M) (u : add_units M)","doc_string":"Addition of a `u : add_units M` on the right doesn't affect `is_add_unit`.","type":"is_add_unit (a + ↑u) ↔ is_add_unit a"},{"name":"cardinal.cantor","kind":"theorem","statement":"theorem cardinal.cantor (a : cardinal) : a < 2 ^ a","theorem":"(a : cardinal) : a < 2 ^ a","args":"(a : cardinal)","doc_string":"**Cantor's theorem**","type":"a < 2 ^ a"},{"name":"div_eq_mul_inv","kind":"theorem","statement":"theorem div_eq_mul_inv {G : Type u_1} [div_inv_monoid G] (a b : G) : a / b = a * b⁻¹","theorem":"{G : Type u_1} [div_inv_monoid G] (a b : G) : a / b = a * b⁻¹","args":"{G : Type u_1} [div_inv_monoid G] (a b : G)","doc_string":" Dividing by an element is the same as multiplying by its inverse.  This is a duplicate of `div_inv_monoid.div_eq_mul_inv` ensuring that the types unfold better.","type":"a / b = a * b⁻¹"},{"name":"le_sub_right_of_add_le","kind":"theorem","statement":"theorem le_sub_right_of_add_le {α : Type u} [add_group α] [has_le α] [covariant_class α α (function.swap has_add.add) has_le.le] {a b c : α} : a + b ≤ c → a ≤ c - b","theorem":"{α : Type u} [add_group α] [has_le α] [covariant_class α α (function.swap has_add.add) has_le.le] {a b c : α} : a + b ≤ c → a ≤ c - b","args":"{α : Type u} [add_group α] [has_le α] [covariant_class α α (function.swap has_add.add) has_le.le] {a b c : α}","doc_string":"**Alias** of the reverse direction of le_sub_iff_add_le`.","type":"a + b ≤ c → a ≤ c - b"},{"name":"is_mul_hom.id","kind":"theorem","statement":"theorem is_mul_hom.id {α : Type u} [has_mul α] : is_mul_hom id","theorem":"{α : Type u} [has_mul α] : is_mul_hom id","args":"{α : Type u} [has_mul α]","doc_string":"The identity map preserves multiplication.","type":"is_mul_hom id"},{"name":"function.surjective.dense_range","kind":"theorem","statement":"theorem function.surjective.dense_range {β : Type u_2} [topological_space β] {κ : Type u_5} {f : κ → β} (hf : function.surjective f) : dense_range f","theorem":"{β : Type u_2} [topological_space β] {κ : Type u_5} {f : κ → β} (hf : function.surjective f) : dense_range f","args":"{β : Type u_2} [topological_space β] {κ : Type u_5} {f : κ → β} (hf : function.surjective f)","doc_string":"A surjective map has dense range.","type":"dense_range f"},{"name":"add_nonneg","kind":"theorem","statement":"theorem add_nonneg {α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α has_add.add has_le.le] {a b : α} (ha : 0 ≤ a) (hb : 0 ≤ b) : 0 ≤ a + b","theorem":"{α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α has_add.add has_le.le] {a b : α} (ha : 0 ≤ a) (hb : 0 ≤ b) : 0 ≤ a + b","args":"{α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α has_add.add has_le.le] {a b : α} (ha : 0 ≤ a) (hb : 0 ≤ b)","doc_string":"**Alias** of `left.add_nonneg`.","type":"0 ≤ a + b"},{"name":"colex.singleton_lt_iff_lt","kind":"theorem","statement":"theorem colex.singleton_lt_iff_lt {α : Type u_1} [linear_order α] {r s : α} : {r}.to_colex < {s}.to_colex ↔ r < s","theorem":"{α : Type u_1} [linear_order α] {r s : α} : {r}.to_colex < {s}.to_colex ↔ r < s","args":"{α : Type u_1} [linear_order α] {r s : α}","doc_string":"Colex is an extension of the base ordering on α.","type":"{r}.to_colex < {s}.to_colex ↔ r < s"},{"name":"dihedral_group.card","kind":"theorem","statement":"theorem dihedral_group.card {n : ℕ} [fact (0 < n)] : fintype.card (dihedral_group n) = 2 * n","theorem":"{n : ℕ} [fact (0 < n)] : fintype.card (dihedral_group n) = 2 * n","args":"{n : ℕ} [fact (0 < n)]","doc_string":"If `0 < n`, then `dihedral_group n` has `2n` elements.","type":"fintype.card (dihedral_group n) = 2 * n"},{"name":"exists_compact_superset","kind":"theorem","statement":"theorem exists_compact_superset {α : Type u} [topological_space α] [locally_compact_space α] {K : set α} (hK : is_compact K) : ∃ (K' : set α), is_compact K' ∧ K ⊆ interior K'","theorem":"{α : Type u} [topological_space α] [locally_compact_space α] {K : set α} (hK : is_compact K) : ∃ (K' : set α), is_compact K' ∧ K ⊆ interior K'","args":"{α : Type u} [topological_space α] [locally_compact_space α] {K : set α} (hK : is_compact K)","doc_string":"In a locally compact space, every compact set is contained in the interior of a compact set.","type":"∃ (K' : set α), is_compact K' ∧ K ⊆ interior K'"},{"name":"category_theory.limits.limits_from_equalizers_and_products","kind":"theorem","statement":"theorem category_theory.limits.limits_from_equalizers_and_products {C : Type u} [category_theory.category C] [category_theory.limits.has_products C] [category_theory.limits.has_equalizers C] : category_theory.limits.has_limits C","theorem":"{C : Type u} [category_theory.category C] [category_theory.limits.has_products C] [category_theory.limits.has_equalizers C] : category_theory.limits.has_limits C","args":"{C : Type u} [category_theory.category C] [category_theory.limits.has_products C] [category_theory.limits.has_equalizers C]","doc_string":"Any category with products and equalizers has all limits.  See <https://stacks.math.columbia.edu/tag/002N>.","type":"category_theory.limits.has_limits C"},{"name":"category_theory.limits.has_binary_products_of_has_limit_pair","kind":"theorem","statement":"theorem category_theory.limits.has_binary_products_of_has_limit_pair (C : Type u) [category_theory.category C] [∀ {X Y : C}, category_theory.limits.has_limit (category_theory.limits.pair X Y)] : category_theory.limits.has_binary_products C","theorem":"(C : Type u) [category_theory.category C] [∀ {X Y : C}, category_theory.limits.has_limit (category_theory.limits.pair X Y)] : category_theory.limits.has_binary_products C","args":"(C : Type u) [category_theory.category C] [∀ {X Y : C}, category_theory.limits.has_limit (category_theory.limits.pair X Y)]","doc_string":"If `C` has all limits of diagrams `pair X Y`, then it has all binary products","type":"category_theory.limits.has_binary_products C"},{"name":"topological_space.subset_trans","kind":"theorem","statement":"theorem topological_space.subset_trans {X : Type u_1} [tX : topological_space X] {s t : set X} (ts : t ⊆ s) : subtype.topological_space = topological_space.induced (set.inclusion ts) subtype.topological_space","theorem":"{X : Type u_1} [tX : topological_space X] {s t : set X} (ts : t ⊆ s) : subtype.topological_space = topological_space.induced (set.inclusion ts) subtype.topological_space","args":"{X : Type u_1} [tX : topological_space X] {s t : set X} (ts : t ⊆ s)","doc_string":" Let `X` be a topological space and let `s, t ⊆ X` be two subsets.  If there is an inclusion `t ⊆ s`, then the topological space structure on `t` induced by `X` is the same as the one obtained by the induced topological space structure on `s`.","type":"subtype.topological_space = topological_space.induced (set.inclusion ts) subtype.topological_space"},{"name":"finset.filter_false_of_mem","kind":"theorem","statement":"theorem finset.filter_false_of_mem {α : Type u_1} {p : α → Prop} [decidable_pred p] {s : finset α} (h : ∀ (x : α), x ∈ s → ¬p x) : finset.filter p s = ∅","theorem":"{α : Type u_1} {p : α → Prop} [decidable_pred p] {s : finset α} (h : ∀ (x : α), x ∈ s → ¬p x) : finset.filter p s = ∅","args":"{α : Type u_1} {p : α → Prop} [decidable_pred p] {s : finset α} (h : ∀ (x : α), x ∈ s → ¬p x)","doc_string":"If all elements of a `finset` fail to satisfy the predicate `p`, `s.filter p` is `∅`.","type":"finset.filter p s = ∅"},{"name":"nat.eq_zero_of_dvd_of_lt","kind":"theorem","statement":"theorem nat.eq_zero_of_dvd_of_lt {a b : ℕ} (w : a ∣ b) (h : b < a) : b = 0","theorem":"{a b : ℕ} (w : a ∣ b) (h : b < a) : b = 0","args":"{a b : ℕ} (w : a ∣ b) (h : b < a)","doc_string":" If a small natural number is divisible by a larger natural number, the small number is zero.","type":"b = 0"},{"name":"add_commute.eq","kind":"theorem","statement":"theorem add_commute.eq {S : Type u_1} [has_add S] {a b : S} (h : add_commute a b) : a + b = b + a","theorem":"{S : Type u_1} [has_add S] {a b : S} (h : add_commute a b) : a + b = b + a","args":"{S : Type u_1} [has_add S] {a b : S} (h : add_commute a b)","doc_string":"Equality behind `add_commute a b`; useful for rewriting.","type":"a + b = b + a"},{"name":"has_sbtw.sbtw.cyclic_left","kind":"theorem","statement":"theorem has_sbtw.sbtw.cyclic_left {α : Type u_1} [circular_preorder α] {a b c : α} (h : has_sbtw.sbtw a b c) : has_sbtw.sbtw b c a","theorem":"{α : Type u_1} [circular_preorder α] {a b c : α} (h : has_sbtw.sbtw a b c) : has_sbtw.sbtw b c a","args":"{α : Type u_1} [circular_preorder α] {a b c : α} (h : has_sbtw.sbtw a b c)","doc_string":"**Alias** of sbtw_cyclic_left`.","type":"has_sbtw.sbtw b c a"},{"name":"neg_lt_of_neg_lt","kind":"theorem","statement":"theorem neg_lt_of_neg_lt {α : Type u} [add_group α] [has_lt α] [covariant_class α α has_add.add has_lt.lt] [covariant_class α α (function.swap has_add.add) has_lt.lt] {a b : α} : -a < b → -b < a","theorem":"{α : Type u} [add_group α] [has_lt α] [covariant_class α α has_add.add has_lt.lt] [covariant_class α α (function.swap has_add.add) has_lt.lt] {a b : α} : -a < b → -b < a","args":"{α : Type u} [add_group α] [has_lt α] [covariant_class α α has_add.add has_lt.lt] [covariant_class α α (function.swap has_add.add) has_lt.lt] {a b : α}","doc_string":"**Alias** of the forward direction of inv_lt'`.","type":"-a < b → -b < a"},{"name":"subsingleton_iff_zero_eq_one","kind":"theorem","statement":"theorem subsingleton_iff_zero_eq_one {M₀ : Type u_1} [mul_zero_one_class M₀] : 0 = 1 ↔ subsingleton M₀","theorem":"{M₀ : Type u_1} [mul_zero_one_class M₀] : 0 = 1 ↔ subsingleton M₀","args":"{M₀ : Type u_1} [mul_zero_one_class M₀]","doc_string":" In a monoid with zero, zero equals one if and only if all elements of that semiring are equal.","type":"0 = 1 ↔ subsingleton M₀"},{"name":"finset.mem_shadow_iff_exists_mem_card_add_one","kind":"theorem","statement":"theorem finset.mem_shadow_iff_exists_mem_card_add_one {α : Type u_1} [decidable_eq α] {𝒜 : finset (finset α)} {s : finset α} : s ∈ 𝒜.shadow ↔ ∃ (t : finset α) (H : t ∈ 𝒜), s ⊆ t ∧ t.card = s.card + 1","theorem":"{α : Type u_1} [decidable_eq α] {𝒜 : finset (finset α)} {s : finset α} : s ∈ 𝒜.shadow ↔ ∃ (t : finset α) (H : t ∈ 𝒜), s ⊆ t ∧ t.card = s.card + 1","args":"{α : Type u_1} [decidable_eq α] {𝒜 : finset (finset α)} {s : finset α}","doc_string":"`s ∈ ∂ 𝒜` iff `s` is exactly one element less than something from `𝒜`","type":"s ∈ 𝒜.shadow ↔ ∃ (t : finset α) (H : t ∈ 𝒜), s ⊆ t ∧ t.card = s.card + 1"},{"name":"function.is_fixed_pt.to_left_inverse","kind":"theorem","statement":"theorem function.is_fixed_pt.to_left_inverse {α : Type u} {f g : α → α} {x : α} (hf : function.is_fixed_pt f x) (h : function.left_inverse g f) : function.is_fixed_pt g x","theorem":"{α : Type u} {f g : α → α} {x : α} (hf : function.is_fixed_pt f x) (h : function.left_inverse g f) : function.is_fixed_pt g x","args":"{α : Type u} {f g : α → α} {x : α} (hf : function.is_fixed_pt f x) (h : function.left_inverse g f)","doc_string":" If `x` is a fixed point of `f` and `g` is a left inverse of `f`, then `x` is a fixed point of `g`.","type":"function.is_fixed_pt g x"},{"name":"subtype.forall'","kind":"theorem","statement":"theorem subtype.forall' {α : Sort u_1} {p : α → Prop} {q : Π (x : α), p x → Prop} : (∀ (x : α) (h : p x), q x h) ↔ ∀ (x : {a // p a}), q ↑x _","theorem":"{α : Sort u_1} {p : α → Prop} {q : Π (x : α), p x → Prop} : (∀ (x : α) (h : p x), q x h) ↔ ∀ (x : {a // p a}), q ↑x _","args":"{α : Sort u_1} {p : α → Prop} {q : Π (x : α), p x → Prop}","doc_string":"An alternative version of `subtype.forall`. This one is useful if Lean cannot figure out `q`  when using `subtype.forall` from right to left.","type":"(∀ (x : α) (h : p x), q x h) ↔ ∀ (x : {a // p a}), q ↑x _"},{"name":"is_of_fin_order_one","kind":"theorem","statement":"theorem is_of_fin_order_one {G : Type u} [monoid G] : is_of_fin_order 1","theorem":"{G : Type u} [monoid G] : is_of_fin_order 1","args":"{G : Type u} [monoid G]","doc_string":"1 is of finite order in any monoid.","type":"is_of_fin_order 1"},{"name":"matrix.inv_eq_left_inv","kind":"theorem","statement":"theorem matrix.inv_eq_left_inv {n : Type u'} {α : Type v} [fintype n] [decidable_eq n] [comm_ring α] {A B : matrix n n α} (h : B.mul A = 1) : A⁻¹ = B","theorem":"{n : Type u'} {α : Type v} [fintype n] [decidable_eq n] [comm_ring α] {A B : matrix n n α} (h : B.mul A = 1) : A⁻¹ = B","args":"{n : Type u'} {α : Type v} [fintype n] [decidable_eq n] [comm_ring α] {A B : matrix n n α} (h : B.mul A = 1)","doc_string":"If matrix A is left invertible, then its inverse equals its left inverse.","type":"A⁻¹ = B"},{"name":"zero_mul_eq_const","kind":"theorem","statement":"theorem zero_mul_eq_const {M₀ : Type u_1} [mul_zero_class M₀] : has_mul.mul 0 = function.const M₀ 0","theorem":"{M₀ : Type u_1} [mul_zero_class M₀] : has_mul.mul 0 = function.const M₀ 0","args":"{M₀ : Type u_1} [mul_zero_class M₀]","doc_string":"To match `one_mul_eq_id`.","type":"has_mul.mul 0 = function.const M₀ 0"},{"name":"one_pos","kind":"theorem","statement":"theorem one_pos {α : Type u} [ordered_semiring α] [nontrivial α] : 0 < 1","theorem":"{α : Type u} [ordered_semiring α] [nontrivial α] : 0 < 1","args":"{α : Type u} [ordered_semiring α] [nontrivial α]","doc_string":"**Alias** of zero_lt_one`.","type":"0 < 1"},{"name":"submonoid.subset_closure","kind":"theorem","statement":"theorem submonoid.subset_closure {M : Type u_1} [mul_one_class M] {s : set M} : s ⊆ ↑(submonoid.closure s)","theorem":"{M : Type u_1} [mul_one_class M] {s : set M} : s ⊆ ↑(submonoid.closure s)","args":"{M : Type u_1} [mul_one_class M] {s : set M}","doc_string":"The submonoid generated by a set includes the set.","type":"s ⊆ ↑(submonoid.closure s)"},{"name":"add_subsemigroup.closure_le","kind":"theorem","statement":"theorem add_subsemigroup.closure_le {M : Type u_1} [has_add M] {s : set M} {S : add_subsemigroup M} : add_subsemigroup.closure s ≤ S ↔ s ⊆ ↑S","theorem":"{M : Type u_1} [has_add M] {s : set M} {S : add_subsemigroup M} : add_subsemigroup.closure s ≤ S ↔ s ⊆ ↑S","args":"{M : Type u_1} [has_add M] {s : set M} {S : add_subsemigroup M}","doc_string":"An additive subsemigroup `S` includes `closure s` if and only if it includes `s`","type":"add_subsemigroup.closure s ≤ S ↔ s ⊆ ↑S"},{"name":"finset.nat.antidiagonal_zero","kind":"theorem","statement":"theorem finset.nat.antidiagonal_zero  : finset.nat.antidiagonal 0 = {(0, 0)}","theorem":" : finset.nat.antidiagonal 0 = {(0, 0)}","args":"","doc_string":"The antidiagonal of `0` is the list `[(0, 0)]`","type":"finset.nat.antidiagonal 0 = {(0, 0)}"},{"name":"free_group.red.nil_iff","kind":"theorem","statement":"theorem free_group.red.nil_iff {α : Type u} {L : list (α × bool)} : free_group.red list.nil L ↔ L = list.nil","theorem":"{α : Type u} {L : list (α × bool)} : free_group.red list.nil L ↔ L = list.nil","args":"{α : Type u} {L : list (α × bool)}","doc_string":"The empty word `[]` only reduces to itself.","type":"free_group.red list.nil L ↔ L = list.nil"},{"name":"one_le_inv'","kind":"theorem","statement":"theorem one_le_inv' {α : Type u} [group α] [has_le α] [covariant_class α α has_mul.mul has_le.le] {a : α} : 1 ≤ a⁻¹ ↔ a ≤ 1","theorem":"{α : Type u} [group α] [has_le α] [covariant_class α α has_mul.mul has_le.le] {a : α} : 1 ≤ a⁻¹ ↔ a ≤ 1","args":"{α : Type u} [group α] [has_le α] [covariant_class α α has_mul.mul has_le.le] {a : α}","doc_string":"**Alias** of left.one_le_inv_iff`.","type":"1 ≤ a⁻¹ ↔ a ≤ 1"},{"name":"neg_lt_zero","kind":"theorem","statement":"theorem neg_lt_zero {α : Type u} [add_group α] [has_lt α] [covariant_class α α has_add.add has_lt.lt] {a : α} : -a < 0 ↔ 0 < a","theorem":"{α : Type u} [add_group α] [has_lt α] [covariant_class α α has_add.add has_lt.lt] {a : α} : -a < 0 ↔ 0 < a","args":"{α : Type u} [add_group α] [has_lt α] [covariant_class α α has_add.add has_lt.lt] {a : α}","doc_string":"**Alias** of left.inv_lt_one_iff`.","type":"-a < 0 ↔ 0 < a"},{"name":"mul_action.to_perm_injective","kind":"theorem","statement":"theorem mul_action.to_perm_injective {α : Type u} {β : Type v} [group α] [mul_action α β] [has_faithful_smul α β] : function.injective mul_action.to_perm","theorem":"{α : Type u} {β : Type v} [group α] [mul_action α β] [has_faithful_smul α β] : function.injective mul_action.to_perm","args":"{α : Type u} {β : Type v} [group α] [mul_action α β] [has_faithful_smul α β]","doc_string":"`mul_action.to_perm` is injective on faithful actions.","type":"function.injective mul_action.to_perm"},{"name":"filter.tendsto.le_comap","kind":"theorem","statement":"theorem filter.tendsto.le_comap {α : Type u} {β : Type v} {f : α → β} {l₁ : filter α} {l₂ : filter β} : filter.tendsto f l₁ l₂ → l₁ ≤ filter.comap f l₂","theorem":"{α : Type u} {β : Type v} {f : α → β} {l₁ : filter α} {l₂ : filter β} : filter.tendsto f l₁ l₂ → l₁ ≤ filter.comap f l₂","args":"{α : Type u} {β : Type v} {f : α → β} {l₁ : filter α} {l₂ : filter β}","doc_string":"**Alias** of the forward direction of filter.tendsto_iff_comap`.","type":"filter.tendsto f l₁ l₂ → l₁ ≤ filter.comap f l₂"},{"name":"subgroup.list_prod_mem","kind":"theorem","statement":"theorem subgroup.list_prod_mem {G : Type u_1} [group G] (K : subgroup G) {l : list G} : (∀ (x : G), x ∈ l → x ∈ K) → l.prod ∈ K","theorem":"{G : Type u_1} [group G] (K : subgroup G) {l : list G} : (∀ (x : G), x ∈ l → x ∈ K) → l.prod ∈ K","args":"{G : Type u_1} [group G] (K : subgroup G) {l : list G}","doc_string":"Product of a list of elements in a subgroup is in the subgroup.","type":"(∀ (x : G), x ∈ l → x ∈ K) → l.prod ∈ K"},{"name":"real.nat_sqrt_le_real_sqrt","kind":"theorem","statement":"theorem real.nat_sqrt_le_real_sqrt {a : ℕ} : ↑(nat.sqrt a) ≤ real.sqrt ↑a","theorem":"{a : ℕ} : ↑(nat.sqrt a) ≤ real.sqrt ↑a","args":"{a : ℕ}","doc_string":"The natural square root is at most the real square root","type":"↑(nat.sqrt a) ≤ real.sqrt ↑a"},{"name":"nat.dvd_right_iff_eq","kind":"theorem","statement":"theorem nat.dvd_right_iff_eq {m n : ℕ} : (∀ (a : ℕ), m ∣ a ↔ n ∣ a) ↔ m = n","theorem":"{m n : ℕ} : (∀ (a : ℕ), m ∣ a ↔ n ∣ a) ↔ m = n","args":"{m n : ℕ}","doc_string":"Two natural numbers are equal if and only if the have the same multiples.","type":"(∀ (a : ℕ), m ∣ a ↔ n ∣ a) ↔ m = n"},{"name":"eq.superset","kind":"theorem","statement":"theorem eq.superset {α : Type u} [has_subset α] {a b : α} [is_refl α has_subset.subset] : a = b → b ⊆ a","theorem":"{α : Type u} [has_subset α] {a b : α} [is_refl α has_subset.subset] : a = b → b ⊆ a","args":"{α : Type u} [has_subset α] {a b : α} [is_refl α has_subset.subset]","doc_string":"**Alias** of superset_of_eq`.","type":"a = b → b ⊆ a"},{"name":"is_group_hom.id","kind":"theorem","statement":"theorem is_group_hom.id {α : Type u} [group α] : is_group_hom id","theorem":"{α : Type u} [group α] : is_group_hom id","args":"{α : Type u} [group α]","doc_string":"The identity is a group homomorphism.","type":"is_group_hom id"},{"name":"function.injective.pairwise_ne","kind":"theorem","statement":"theorem function.injective.pairwise_ne {α : Type u_1} {ι : Type u_2} {f : ι → α} : function.injective f → pairwise (ne on f)","theorem":"{α : Type u_1} {ι : Type u_2} {f : ι → α} : function.injective f → pairwise (ne on f)","args":"{α : Type u_1} {ι : Type u_2} {f : ι → α}","doc_string":"**Alias** of the forward direction of function.injective_iff_pairwise_ne`.","type":"function.injective f → pairwise (ne on f)"},{"name":"sym.map_id'","kind":"theorem","statement":"theorem sym.map_id' {α : Type u_1} {n : ℕ} (s : sym α n) : sym.map (λ (x : α), x) s = s","theorem":"{α : Type u_1} {n : ℕ} (s : sym α n) : sym.map (λ (x : α), x) s = s","args":"{α : Type u_1} {n : ℕ} (s : sym α n)","doc_string":"Note: `sym.map_id` is not simp-normal, as simp ends up unfolding `id` with `sym.map_congr`","type":"sym.map (λ (x : α), x) s = s"},{"name":"eq.trans_ge","kind":"theorem","statement":"theorem eq.trans_ge {α : Type u} [preorder α] {a b c : α} : b = c → a ≤ b → a ≤ c","theorem":"{α : Type u} [preorder α] {a b c : α} : b = c → a ≤ b → a ≤ c","args":"{α : Type u} [preorder α] {a b c : α}","doc_string":"**Alias** of le_of_eq_of_le'`.","type":"b = c → a ≤ b → a ≤ c"},{"name":"matrix.is_unit_diagonal","kind":"theorem","statement":"theorem matrix.is_unit_diagonal {n : Type u'} {α : Type v} [fintype n] [decidable_eq n] [comm_ring α] {v : n → α} : is_unit (matrix.diagonal v) ↔ is_unit v","theorem":"{n : Type u'} {α : Type v} [fintype n] [decidable_eq n] [comm_ring α] {v : n → α} : is_unit (matrix.diagonal v) ↔ is_unit v","args":"{n : Type u'} {α : Type v} [fintype n] [decidable_eq n] [comm_ring α] {v : n → α}","doc_string":"When lowered to a prop, `matrix.diagonal_invertible_equiv_invertible` forms an `iff`.","type":"is_unit (matrix.diagonal v) ↔ is_unit v"},{"name":"ordered_add_comm_group.lt_of_add_lt_add_left","kind":"theorem","statement":"theorem ordered_add_comm_group.lt_of_add_lt_add_left {α : Type u_1} [has_add α] [has_lt α] [contravariant_class α α has_add.add has_lt.lt] {a b c : α} (bc : a + b < a + c) : b < c","theorem":"{α : Type u_1} [has_add α] [has_lt α] [contravariant_class α α has_add.add has_lt.lt] {a b c : α} (bc : a + b < a + c) : b < c","args":"{α : Type u_1} [has_add α] [has_lt α] [contravariant_class α α has_add.add has_lt.lt] {a b c : α} (bc : a + b < a + c)","doc_string":"**Alias** of lt_of_mul_lt_mul_left'`.","type":"b < c"},{"name":"dvd_add_self_right","kind":"theorem","statement":"theorem dvd_add_self_right {α : Type u} [ring α] {a b : α} : a ∣ b + a ↔ a ∣ b","theorem":"{α : Type u} [ring α] {a b : α} : a ∣ b + a ↔ a ∣ b","args":"{α : Type u} [ring α] {a b : α}","doc_string":"An element a divides the sum b + a if and only if a divides b.","type":"a ∣ b + a ↔ a ∣ b"},{"name":"dense.inter_of_open_right","kind":"theorem","statement":"theorem dense.inter_of_open_right {α : Type u} [topological_space α] {s t : set α} (hs : dense s) (ht : dense t) (hto : is_open t) : dense (s ∩ t)","theorem":"{α : Type u} [topological_space α] {s t : set α} (hs : dense s) (ht : dense t) (hto : is_open t) : dense (s ∩ t)","args":"{α : Type u} [topological_space α] {s t : set α} (hs : dense s) (ht : dense t) (hto : is_open t)","doc_string":"The intersection of a dense set with an open dense set is a dense set.","type":"dense (s ∩ t)"},{"name":"left.add_nonpos","kind":"theorem","statement":"theorem left.add_nonpos {α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α has_add.add has_le.le] {a b : α} (ha : a ≤ 0) (hb : b ≤ 0) : a + b ≤ 0","theorem":"{α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α has_add.add has_le.le] {a b : α} (ha : a ≤ 0) (hb : b ≤ 0) : a + b ≤ 0","args":"{α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α has_add.add has_le.le] {a b : α} (ha : a ≤ 0) (hb : b ≤ 0)","doc_string":"Assumes left covariance. The lemma assuming right covariance is `right.add_nonpos`.","type":"a + b ≤ 0"},{"name":"submonoid.closure_le","kind":"theorem","statement":"theorem submonoid.closure_le {M : Type u_1} [mul_one_class M] {s : set M} {S : submonoid M} : submonoid.closure s ≤ S ↔ s ⊆ ↑S","theorem":"{M : Type u_1} [mul_one_class M] {s : set M} {S : submonoid M} : submonoid.closure s ≤ S ↔ s ⊆ ↑S","args":"{M : Type u_1} [mul_one_class M] {s : set M} {S : submonoid M}","doc_string":"A submonoid `S` includes `closure s` if and only if it includes `s`.","type":"submonoid.closure s ≤ S ↔ s ⊆ ↑S"},{"name":"function.cantor_surjective","kind":"theorem","statement":"theorem function.cantor_surjective {α : Type u_1} (f : α → set α) : ¬function.surjective f","theorem":"{α : Type u_1} (f : α → set α) : ¬function.surjective f","args":"{α : Type u_1} (f : α → set α)","doc_string":" **Cantor's diagonal argument** implies that there are no surjective functions from `α` to `set α`.","type":"¬function.surjective f"},{"name":"is_open.is_Gδ","kind":"theorem","statement":"theorem is_open.is_Gδ {α : Type u_1} [topological_space α] {s : set α} (h : is_open s) : is_Gδ s","theorem":"{α : Type u_1} [topological_space α] {s : set α} (h : is_open s) : is_Gδ s","args":"{α : Type u_1} [topological_space α] {s : set α} (h : is_open s)","doc_string":"An open set is a Gδ set.","type":"is_Gδ s"},{"name":"list.exists_of_mem_map","kind":"theorem","statement":"theorem list.exists_of_mem_map {α : Type u} {β : Type v} {f : α → β} {b : β} {l : list α} : b ∈ list.map f l → (∃ (a : α), a ∈ l ∧ f a = b)","theorem":"{α : Type u} {β : Type v} {f : α → β} {b : β} {l : list α} : b ∈ list.map f l → (∃ (a : α), a ∈ l ∧ f a = b)","args":"{α : Type u} {β : Type v} {f : α → β} {b : β} {l : list α}","doc_string":"**Alias** of the forward direction of list.mem_map`.","type":"b ∈ list.map f l → (∃ (a : α), a ∈ l ∧ f a = b)"},{"name":"is_add_right_regular.add","kind":"theorem","statement":"theorem is_add_right_regular.add {R : Type u_1} {a b : R} [add_semigroup R] (rra : is_add_right_regular a) (rrb : is_add_right_regular b) : is_add_right_regular (a + b)","theorem":"{R : Type u_1} {a b : R} [add_semigroup R] (rra : is_add_right_regular a) (rrb : is_add_right_regular b) : is_add_right_regular (a + b)","args":"{R : Type u_1} {a b : R} [add_semigroup R] (rra : is_add_right_regular a) (rrb : is_add_right_regular b)","doc_string":"In an additive semigroup, the sum of add-right-regular elements is add-right-regular.","type":"is_add_right_regular (a + b)"},{"name":"filter.tendsto.germ_tendsto","kind":"theorem","statement":"theorem filter.tendsto.germ_tendsto {α : Type u_1} {β : Type u_2} {l : filter α} {f : α → β} {lb : filter β} : filter.tendsto f l lb → ↑f.tendsto lb","theorem":"{α : Type u_1} {β : Type u_2} {l : filter α} {f : α → β} {lb : filter β} : filter.tendsto f l lb → ↑f.tendsto lb","args":"{α : Type u_1} {β : Type u_2} {l : filter α} {f : α → β} {lb : filter β}","doc_string":"**Alias** of the reverse direction of filter.germ.coe_tendsto`.","type":"filter.tendsto f l lb → ↑f.tendsto lb"},{"name":"add_tsub_le_right","kind":"theorem","statement":"theorem add_tsub_le_right {α : Type u_1} [preorder α] [has_add α] [has_sub α] [has_ordered_sub α] {a b : α} : a + b - b ≤ a","theorem":"{α : Type u_1} [preorder α] [has_add α] [has_sub α] [has_ordered_sub α] {a b : α} : a + b - b ≤ a","args":"{α : Type u_1} [preorder α] [has_add α] [has_sub α] [has_ordered_sub α] {a b : α}","doc_string":"See `add_tsub_cancel_right` for the equality if `contravariant_class α α (+) (≤)`.","type":"a + b - b ≤ a"},{"name":"exists_prime_order_of_dvd_card","kind":"theorem","statement":"theorem exists_prime_order_of_dvd_card {G : Type u_1} [group G] [fintype G] (p : ℕ) [hp : fact (nat.prime p)] (hdvd : p ∣ fintype.card G) : ∃ (x : G), order_of x = p","theorem":"{G : Type u_1} [group G] [fintype G] (p : ℕ) [hp : fact (nat.prime p)] (hdvd : p ∣ fintype.card G) : ∃ (x : G), order_of x = p","args":"{G : Type u_1} [group G] [fintype G] (p : ℕ) [hp : fact (nat.prime p)] (hdvd : p ∣ fintype.card G)","doc_string":" For every prime `p` dividing the order of a finite group `G` there exists an element of order `p` in `G`. This is known as Cauchy's theorem.","type":"∃ (x : G), order_of x = p"},{"name":"lt_sub_right_of_add_lt","kind":"theorem","statement":"theorem lt_sub_right_of_add_lt {α : Type u} [add_group α] [has_lt α] [covariant_class α α (function.swap has_add.add) has_lt.lt] {a b c : α} : a + b < c → a < c - b","theorem":"{α : Type u} [add_group α] [has_lt α] [covariant_class α α (function.swap has_add.add) has_lt.lt] {a b c : α} : a + b < c → a < c - b","args":"{α : Type u} [add_group α] [has_lt α] [covariant_class α α (function.swap has_add.add) has_lt.lt] {a b c : α}","doc_string":"**Alias** of the reverse direction of lt_sub_iff_add_lt`.","type":"a + b < c → a < c - b"},{"name":"ordinal.eq_enum_ord","kind":"theorem","statement":"theorem ordinal.eq_enum_ord {S : set ordinal} (f : ordinal → ordinal) (hS : set.unbounded has_lt.lt S) : strict_mono f ∧ set.range f = S ↔ f = ordinal.enum_ord S","theorem":"{S : set ordinal} (f : ordinal → ordinal) (hS : set.unbounded has_lt.lt S) : strict_mono f ∧ set.range f = S ↔ f = ordinal.enum_ord S","args":"{S : set ordinal} (f : ordinal → ordinal) (hS : set.unbounded has_lt.lt S)","doc_string":"A characterization of `enum_ord`: it is the unique strict monotonic function with range `S`.","type":"strict_mono f ∧ set.range f = S ↔ f = ordinal.enum_ord S"},{"name":"is_regular_mul_and_mul_iff","kind":"theorem","statement":"theorem is_regular_mul_and_mul_iff {R : Type u_1} {a b : R} [semigroup R] : is_regular (a * b) ∧ is_regular (b * a) ↔ is_regular a ∧ is_regular b","theorem":"{R : Type u_1} {a b : R} [semigroup R] : is_regular (a * b) ∧ is_regular (b * a) ↔ is_regular a ∧ is_regular b","args":"{R : Type u_1} {a b : R} [semigroup R]","doc_string":"  Two elements `a` and `b` are regular if and only if both products `a * b` and `b * a` are regular.","type":"is_regular (a * b) ∧ is_regular (b * a) ↔ is_regular a ∧ is_regular b"},{"name":"padic_norm.padic_norm_of_prime_of_ne","kind":"theorem","statement":"theorem padic_norm.padic_norm_of_prime_of_ne {p q : ℕ} [p_prime : fact (nat.prime p)] [q_prime : fact (nat.prime q)] (neq : p ≠ q) : padic_norm p ↑q = 1","theorem":"{p q : ℕ} [p_prime : fact (nat.prime p)] [q_prime : fact (nat.prime q)] (neq : p ≠ q) : padic_norm p ↑q = 1","args":"{p q : ℕ} [p_prime : fact (nat.prime p)] [q_prime : fact (nat.prime q)] (neq : p ≠ q)","doc_string":"The p-adic norm of `q` is `1` if `q` is prime and not equal to `p`.","type":"padic_norm p ↑q = 1"},{"name":"finset.min'_lt_max'_of_card","kind":"theorem","statement":"theorem finset.min'_lt_max'_of_card {α : Type u_1} [linear_order α] (s : finset α) (h₂ : 1 < s.card) : s.min' _ < s.max' _","theorem":"{α : Type u_1} [linear_order α] (s : finset α) (h₂ : 1 < s.card) : s.min' _ < s.max' _","args":"{α : Type u_1} [linear_order α] (s : finset α) (h₂ : 1 < s.card)","doc_string":"If there's more than 1 element, the min' is less than the max'. An alternate version of `min'_lt_max'` which is sometimes more convenient.","type":"s.min' _ < s.max' _"},{"name":"is_totally_disconnected_of_clopen_set","kind":"theorem","statement":"theorem is_totally_disconnected_of_clopen_set {X : Type u_1} [topological_space X] (hX : ∀ {x y : X}, x ≠ y → (∃ (U : set X) (h_clopen : is_clopen U), x ∈ U ∧ y ∉ U)) : is_totally_disconnected set.univ","theorem":"{X : Type u_1} [topological_space X] (hX : ∀ {x y : X}, x ≠ y → (∃ (U : set X) (h_clopen : is_clopen U), x ∈ U ∧ y ∉ U)) : is_totally_disconnected set.univ","args":"{X : Type u_1} [topological_space X] (hX : ∀ {x y : X}, x ≠ y → (∃ (U : set X) (h_clopen : is_clopen U), x ∈ U ∧ y ∉ U))","doc_string":"Let `X` be a topological space, and suppose that for all distinct `x,y ∈ X`, there  is some clopen set `U` such that `x ∈ U` and `y ∉ U`. Then `X` is totally disconnected.","type":"is_totally_disconnected set.univ"},{"name":"right.one_lt_mul_of_le_of_lt","kind":"theorem","statement":"theorem right.one_lt_mul_of_le_of_lt {α : Type u_1} [mul_one_class α] [preorder α] [covariant_class α α (function.swap has_mul.mul) has_le.le] {a b : α} (ha : 1 ≤ a) (hb : 1 < b) : 1 < a * b","theorem":"{α : Type u_1} [mul_one_class α] [preorder α] [covariant_class α α (function.swap has_mul.mul) has_le.le] {a b : α} (ha : 1 ≤ a) (hb : 1 < b) : 1 < a * b","args":"{α : Type u_1} [mul_one_class α] [preorder α] [covariant_class α α (function.swap has_mul.mul) has_le.le] {a b : α} (ha : 1 ≤ a) (hb : 1 < b)","doc_string":" Assumes right covariance. The lemma assuming left covariance is `left.one_lt_mul_of_le_of_lt`.","type":"1 < a * b"},{"name":"decidable.em","kind":"theorem","statement":"theorem decidable.em (p : Prop) [decidable p] : p ∨ ¬p","theorem":"(p : Prop) [decidable p] : p ∨ ¬p","args":"(p : Prop) [decidable p]","doc_string":"Law of Excluded Middle.","type":"p ∨ ¬p"},{"name":"add_submonoid.list_sum_mem","kind":"theorem","statement":"theorem add_submonoid.list_sum_mem {M : Type u_1} [add_monoid M] (s : add_submonoid M) {l : list M} (hl : ∀ (x : M), x ∈ l → x ∈ s) : l.sum ∈ s","theorem":"{M : Type u_1} [add_monoid M] (s : add_submonoid M) {l : list M} (hl : ∀ (x : M), x ∈ l → x ∈ s) : l.sum ∈ s","args":"{M : Type u_1} [add_monoid M] (s : add_submonoid M) {l : list M} (hl : ∀ (x : M), x ∈ l → x ∈ s)","doc_string":"Sum of a list of elements in an `add_submonoid` is in the `add_submonoid`.","type":"l.sum ∈ s"},{"name":"subgroup.one_mem","kind":"theorem","statement":"theorem subgroup.one_mem {G : Type u_1} [group G] (H : subgroup G) : 1 ∈ H","theorem":"{G : Type u_1} [group G] (H : subgroup G) : 1 ∈ H","args":"{G : Type u_1} [group G] (H : subgroup G)","doc_string":"A subgroup contains the group's 1.","type":"1 ∈ H"},{"name":"right.add_neg'","kind":"theorem","statement":"theorem right.add_neg' {α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α (function.swap has_add.add) has_le.le] {a b : α} (ha : a < 0) (hb : b < 0) : a + b < 0","theorem":"{α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α (function.swap has_add.add) has_le.le] {a b : α} (ha : a < 0) (hb : b < 0) : a + b < 0","args":"{α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α (function.swap has_add.add) has_le.le] {a b : α} (ha : a < 0) (hb : b < 0)","doc_string":"Assumes right covariance. The lemma assuming left covariance is `left.add_neg'`.","type":"a + b < 0"},{"name":"finset.card_le_one_of_subsingleton","kind":"theorem","statement":"theorem finset.card_le_one_of_subsingleton {α : Type u_1} [subsingleton α] (s : finset α) : s.card ≤ 1","theorem":"{α : Type u_1} [subsingleton α] (s : finset α) : s.card ≤ 1","args":"{α : Type u_1} [subsingleton α] (s : finset α)","doc_string":"A `finset` of a subsingleton type has cardinality at most one.","type":"s.card ≤ 1"},{"name":"is_add_right_regular_of_add_eq_zero","kind":"theorem","statement":"theorem is_add_right_regular_of_add_eq_zero {R : Type u_1} {a b : R} [add_monoid R] (h : a + b = 0) : is_add_right_regular a","theorem":"{R : Type u_1} {a b : R} [add_monoid R] (h : a + b = 0) : is_add_right_regular a","args":"{R : Type u_1} {a b : R} [add_monoid R] (h : a + b = 0)","doc_string":"An element admitting a right additive opposite is add-right-regular.","type":"is_add_right_regular a"},{"name":"empty_wf","kind":"theorem","statement":"theorem empty_wf {α : Sort u} : well_founded empty_relation","theorem":"{α : Sort u} : well_founded empty_relation","args":"{α : Sort u}","doc_string":"Empty relation is well-founded","type":"well_founded empty_relation"},{"name":"pnat.xgcd_type.step_v","kind":"theorem","statement":"theorem pnat.xgcd_type.step_v (u : pnat.xgcd_type) (hr : u.r ≠ 0) : u.step.v = u.v.swap","theorem":"(u : pnat.xgcd_type) (hr : u.r ≠ 0) : u.step.v = u.v.swap","args":"(u : pnat.xgcd_type) (hr : u.r ≠ 0)","doc_string":"The reduction step does not change the product vector.","type":"u.step.v = u.v.swap"},{"name":"subset_span_points","kind":"theorem","statement":"theorem subset_span_points (k : Type u_1) {V : Type u_2} {P : Type u_3} [ring k] [add_comm_group V] [module k V] [add_torsor V P] (s : set P) : s ⊆ span_points k s","theorem":"(k : Type u_1) {V : Type u_2} {P : Type u_3} [ring k] [add_comm_group V] [module k V] [add_torsor V P] (s : set P) : s ⊆ span_points k s","args":"(k : Type u_1) {V : Type u_2} {P : Type u_3} [ring k] [add_comm_group V] [module k V] [add_torsor V P] (s : set P)","doc_string":"A set is contained in its `span_points`.","type":"s ⊆ span_points k s"},{"name":"order.lt_of_succ_lt_succ","kind":"theorem","statement":"theorem order.lt_of_succ_lt_succ {α : Type u_1} [preorder α] [succ_order α] {a b : α} [no_max_order α] : order.succ a < order.succ b → a < b","theorem":"{α : Type u_1} [preorder α] [succ_order α] {a b : α} [no_max_order α] : order.succ a < order.succ b → a < b","args":"{α : Type u_1} [preorder α] [succ_order α] {a b : α} [no_max_order α]","doc_string":"**Alias** of the forward direction of order.succ_lt_succ_iff`.","type":"order.succ a < order.succ b → a < b"},{"name":"turing.list_blank.cons_head_tail","kind":"theorem","statement":"theorem turing.list_blank.cons_head_tail {Γ : Type u_1} [inhabited Γ] (l : turing.list_blank Γ) : turing.list_blank.cons l.head l.tail = l","theorem":"{Γ : Type u_1} [inhabited Γ] (l : turing.list_blank Γ) : turing.list_blank.cons l.head l.tail = l","args":"{Γ : Type u_1} [inhabited Γ] (l : turing.list_blank Γ)","doc_string":" The `cons` and `head`/`tail` functions are mutually inverse, unlike in the case of `list` where this only holds for nonempty lists.","type":"turing.list_blank.cons l.head l.tail = l"},{"name":"ordinal.opow_le_iff_le_log","kind":"theorem","statement":"theorem ordinal.opow_le_iff_le_log {b x c : ordinal} (b1 : 1 < b) (x0 : 0 < x) : b ^ c ≤ x ↔ c ≤ ordinal.log b x","theorem":"{b x c : ordinal} (b1 : 1 < b) (x0 : 0 < x) : b ^ c ≤ x ↔ c ≤ ordinal.log b x","args":"{b x c : ordinal} (b1 : 1 < b) (x0 : 0 < x)","doc_string":"`opow b` and `log b` (almost) form a Galois connection.","type":"b ^ c ≤ x ↔ c ≤ ordinal.log b x"},{"name":"fin_injective","kind":"theorem","statement":"theorem fin_injective  : function.injective fin","theorem":" : function.injective fin","args":"","doc_string":" `fin` as a map from `ℕ` to `Type` is injective. Note that since this is a statement about equality of types, using it should be avoided if possible.","type":"function.injective fin"},{"name":"submodule.torsion_by_set_eq_torsion_by_span","kind":"theorem","statement":"theorem submodule.torsion_by_set_eq_torsion_by_span {R : Type u_1} {M : Type u_2} [comm_semiring R] [add_comm_monoid M] [module R M] (s : set R) : submodule.torsion_by_set R M s = submodule.torsion_by_set R M ↑(ideal.span s)","theorem":"{R : Type u_1} {M : Type u_2} [comm_semiring R] [add_comm_monoid M] [module R M] (s : set R) : submodule.torsion_by_set R M s = submodule.torsion_by_set R M ↑(ideal.span s)","args":"{R : Type u_1} {M : Type u_2} [comm_semiring R] [add_comm_monoid M] [module R M] (s : set R)","doc_string":"Torsion by a set is torsion by the ideal generated by it.","type":"submodule.torsion_by_set R M s = submodule.torsion_by_set R M ↑(ideal.span s)"},{"name":"con.mk'_ker","kind":"theorem","statement":"theorem con.mk'_ker {M : Type u_1} [mul_one_class M] (c : con M) : con.ker c.mk' = c","theorem":"{M : Type u_1} [mul_one_class M] (c : con M) : con.ker c.mk' = c","args":"{M : Type u_1} [mul_one_class M] (c : con M)","doc_string":"The kernel of the natural homomorphism from a monoid to its quotient by a congruence    relation `c` equals `c`.","type":"con.ker c.mk' = c"},{"name":"list.nat.mem_antidiagonal","kind":"theorem","statement":"theorem list.nat.mem_antidiagonal {n : ℕ} {x : ℕ × ℕ} : x ∈ list.nat.antidiagonal n ↔ x.fst + x.snd = n","theorem":"{n : ℕ} {x : ℕ × ℕ} : x ∈ list.nat.antidiagonal n ↔ x.fst + x.snd = n","args":"{n : ℕ} {x : ℕ × ℕ}","doc_string":"A pair (i, j) is contained in the antidiagonal of `n` if and only if `i + j = n`.","type":"x ∈ list.nat.antidiagonal n ↔ x.fst + x.snd = n"},{"name":"matrix.fin.circulant_ite","kind":"theorem","statement":"theorem matrix.fin.circulant_ite (α : Type u_1) [has_zero α] [has_one α] (n : ℕ) : matrix.circulant (λ (i : fin n), ite (↑i = 0) 1 0) = 1","theorem":"(α : Type u_1) [has_zero α] [has_one α] (n : ℕ) : matrix.circulant (λ (i : fin n), ite (↑i = 0) 1 0) = 1","args":"(α : Type u_1) [has_zero α] [has_one α] (n : ℕ)","doc_string":" Note we use `↑i = 0` instead of `i = 0` as `fin 0` has no `0`. This means that we cannot state this with `pi.single` as we did with `matrix.circulant_single`.","type":"matrix.circulant (λ (i : fin n), ite (↑i = 0) 1 0) = 1"},{"name":"sq","kind":"theorem","statement":"theorem sq {M : Type u} [monoid M] (a : M) : a ^ 2 = a * a","theorem":"{M : Type u} [monoid M] (a : M) : a ^ 2 = a * a","args":"{M : Type u} [monoid M] (a : M)","doc_string":"**Alias** of pow_two`.","type":"a ^ 2 = a * a"},{"name":"exists_compact_mem_nhds","kind":"theorem","statement":"theorem exists_compact_mem_nhds {α : Type u} [topological_space α] [locally_compact_space α] (x : α) : ∃ (K : set α), is_compact K ∧ K ∈ nhds x","theorem":"{α : Type u} [topological_space α] [locally_compact_space α] (x : α) : ∃ (K : set α), is_compact K ∧ K ∈ nhds x","args":"{α : Type u} [topological_space α] [locally_compact_space α] (x : α)","doc_string":"In a locally compact space every point has a compact neighborhood.","type":"∃ (K : set α), is_compact K ∧ K ∈ nhds x"},{"name":"left.one_lt_mul_of_lt_of_le","kind":"theorem","statement":"theorem left.one_lt_mul_of_lt_of_le {α : Type u_1} [mul_one_class α] [preorder α] [covariant_class α α has_mul.mul has_le.le] {a b : α} (ha : 1 < a) (hb : 1 ≤ b) : 1 < a * b","theorem":"{α : Type u_1} [mul_one_class α] [preorder α] [covariant_class α α has_mul.mul has_le.le] {a b : α} (ha : 1 < a) (hb : 1 ≤ b) : 1 < a * b","args":"{α : Type u_1} [mul_one_class α] [preorder α] [covariant_class α α has_mul.mul has_le.le] {a b : α} (ha : 1 < a) (hb : 1 ≤ b)","doc_string":" Assumes left covariance. The lemma assuming right covariance is `right.one_lt_mul_of_lt_of_le`.","type":"1 < a * b"},{"name":"list.Ico.trichotomy","kind":"theorem","statement":"theorem list.Ico.trichotomy (n a b : ℕ) : n < a ∨ b ≤ n ∨ n ∈ list.Ico a b","theorem":"(n a b : ℕ) : n < a ∨ b ≤ n ∨ n ∈ list.Ico a b","args":"(n a b : ℕ)","doc_string":"For any natural numbers n, a, and b, one of the following holds: 1. n < a 2. n ≥ b 3. n ∈ Ico a b","type":"n < a ∨ b ≤ n ∨ n ∈ list.Ico a b"},{"name":"category_theory.over.construct_products.over_finite_products_of_finite_wide_pullbacks","kind":"theorem","statement":"theorem category_theory.over.construct_products.over_finite_products_of_finite_wide_pullbacks {C : Type u} [category_theory.category C] [category_theory.limits.has_finite_wide_pullbacks C] {B : C} : category_theory.limits.has_finite_products (category_theory.over B)","theorem":"{C : Type u} [category_theory.category C] [category_theory.limits.has_finite_wide_pullbacks C] {B : C} : category_theory.limits.has_finite_products (category_theory.over B)","args":"{C : Type u} [category_theory.category C] [category_theory.limits.has_finite_wide_pullbacks C] {B : C}","doc_string":"Given all finite wide pullbacks in `C`, construct finite products in `C/B`.","type":"category_theory.limits.has_finite_products (category_theory.over B)"},{"name":"is_monoid_hom.id","kind":"theorem","statement":"theorem is_monoid_hom.id {α : Type u} [mul_one_class α] : is_monoid_hom id","theorem":"{α : Type u} [mul_one_class α] : is_monoid_hom id","args":"{α : Type u} [mul_one_class α]","doc_string":"The identity map is a monoid homomorphism.","type":"is_monoid_hom id"},{"name":"padic_norm.padic_norm_p_of_prime","kind":"theorem","statement":"theorem padic_norm.padic_norm_p_of_prime (p : ℕ) [fact (nat.prime p)] : padic_norm p ↑p = 1 / ↑p","theorem":"(p : ℕ) [fact (nat.prime p)] : padic_norm p ↑p = 1 / ↑p","args":"(p : ℕ) [fact (nat.prime p)]","doc_string":"The p-adic norm of `p` is `1/p` if `p` is prime.  See also `padic_norm.padic_norm_p` for a version that assumes `1 < p`.","type":"padic_norm p ↑p = 1 / ↑p"},{"name":"nat.prime.sq_add_sq","kind":"theorem","statement":"theorem nat.prime.sq_add_sq {p : ℕ} [fact (nat.prime p)] (hp : p % 4 = 1) : ∃ (a b : ℕ), a ^ 2 + b ^ 2 = p","theorem":"{p : ℕ} [fact (nat.prime p)] (hp : p % 4 = 1) : ∃ (a b : ℕ), a ^ 2 + b ^ 2 = p","args":"{p : ℕ} [fact (nat.prime p)] (hp : p % 4 = 1)","doc_string":" **Fermat's theorem on the sum of two squares**. Every prime congruent to 1 mod 4 is the sum of two squares. Also known as **Fermat's Christmas theorem**.","type":"∃ (a b : ℕ), a ^ 2 + b ^ 2 = p"},{"name":"commute.symm","kind":"theorem","statement":"theorem commute.symm {S : Type u_1} [has_mul S] {a b : S} (h : commute a b) : commute b a","theorem":"{S : Type u_1} [has_mul S] {a b : S} (h : commute a b) : commute b a","args":"{S : Type u_1} [has_mul S] {a b : S} (h : commute a b)","doc_string":"If `a` commutes with `b`, then `b` commutes with `a`.","type":"commute b a"},{"name":"pos_of_neg_neg","kind":"theorem","statement":"theorem pos_of_neg_neg {α : Type u} [add_group α] [has_lt α] [covariant_class α α has_add.add has_lt.lt] {a : α} : -a < 0 → 0 < a","theorem":"{α : Type u} [add_group α] [has_lt α] [covariant_class α α has_add.add has_lt.lt] {a : α} : -a < 0 → 0 < a","args":"{α : Type u} [add_group α] [has_lt α] [covariant_class α α has_add.add has_lt.lt] {a : α}","doc_string":"**Alias** of the forward direction of left.inv_lt_one_iff`.","type":"-a < 0 → 0 < a"},{"name":"category_theory.limits.colimits_from_coequalizers_and_coproducts","kind":"theorem","statement":"theorem category_theory.limits.colimits_from_coequalizers_and_coproducts {C : Type u} [category_theory.category C] [category_theory.limits.has_coproducts C] [category_theory.limits.has_coequalizers C] : category_theory.limits.has_colimits C","theorem":"{C : Type u} [category_theory.category C] [category_theory.limits.has_coproducts C] [category_theory.limits.has_coequalizers C] : category_theory.limits.has_colimits C","args":"{C : Type u} [category_theory.category C] [category_theory.limits.has_coproducts C] [category_theory.limits.has_coequalizers C]","doc_string":"Any category with coproducts and coequalizers has all colimits.  See <https://stacks.math.columbia.edu/tag/002P>.","type":"category_theory.limits.has_colimits C"},{"name":"one_le_of_inv_le_one","kind":"theorem","statement":"theorem one_le_of_inv_le_one {α : Type u} [group α] [has_le α] [covariant_class α α has_mul.mul has_le.le] {a : α} : a⁻¹ ≤ 1 → 1 ≤ a","theorem":"{α : Type u} [group α] [has_le α] [covariant_class α α has_mul.mul has_le.le] {a : α} : a⁻¹ ≤ 1 → 1 ≤ a","args":"{α : Type u} [group α] [has_le α] [covariant_class α α has_mul.mul has_le.le] {a : α}","doc_string":"**Alias** of the forward direction of left.inv_le_one_iff`.","type":"a⁻¹ ≤ 1 → 1 ≤ a"},{"name":"list.eq_iff_join_eq","kind":"theorem","statement":"theorem list.eq_iff_join_eq {α : Type u_1} (L L' : list (list α)) : L = L' ↔ L.join = L'.join ∧ list.map list.length L = list.map list.length L'","theorem":"{α : Type u_1} (L L' : list (list α)) : L = L' ↔ L.join = L'.join ∧ list.map list.length L = list.map list.length L'","args":"{α : Type u_1} (L L' : list (list α))","doc_string":" Two lists of sublists are equal iff their joins coincide, as well as the lengths of the sublists.","type":"L = L' ↔ L.join = L'.join ∧ list.map list.length L = list.map list.length L'"},{"name":"setoid.eqv_gen_of_setoid","kind":"theorem","statement":"theorem setoid.eqv_gen_of_setoid {α : Type u_1} (r : setoid α) : eqv_gen.setoid setoid.r = r","theorem":"{α : Type u_1} (r : setoid α) : eqv_gen.setoid setoid.r = r","args":"{α : Type u_1} (r : setoid α)","doc_string":"The equivalence closure of an equivalence relation r is r.","type":"eqv_gen.setoid setoid.r = r"},{"name":"add_commute.add_right","kind":"theorem","statement":"theorem add_commute.add_right {S : Type u_1} [add_semigroup S] {a b c : S} (hab : add_commute a b) (hac : add_commute a c) : add_commute a (b + c)","theorem":"{S : Type u_1} [add_semigroup S] {a b c : S} (hab : add_commute a b) (hac : add_commute a c) : add_commute a (b + c)","args":"{S : Type u_1} [add_semigroup S] {a b c : S} (hab : add_commute a b) (hac : add_commute a c)","doc_string":"If `a` commutes with both `b` and `c`, then it commutes with their sum.","type":"add_commute a (b + c)"},{"name":"real.sinh_surjective","kind":"theorem","statement":"theorem real.sinh_surjective  : function.surjective real.sinh","theorem":" : function.surjective real.sinh","args":"","doc_string":"`sinh` is surjective, `∀ b, ∃ a, sinh a = b`. In this case, we use `a = arsinh b`.","type":"function.surjective real.sinh"},{"name":"mem_residual","kind":"theorem","statement":"theorem mem_residual {α : Type u_1} [topological_space α] [baire_space α] {s : set α} : s ∈ residual α ↔ ∃ (t : set α) (H : t ⊆ s), is_Gδ t ∧ dense t","theorem":"{α : Type u_1} [topological_space α] [baire_space α] {s : set α} : s ∈ residual α ↔ ∃ (t : set α) (H : t ⊆ s), is_Gδ t ∧ dense t","args":"{α : Type u_1} [topological_space α] [baire_space α] {s : set α}","doc_string":"A set is residual (comeagre) if and only if it includes a dense `Gδ` set.","type":"s ∈ residual α ↔ ∃ (t : set α) (H : t ⊆ s), is_Gδ t ∧ dense t"},{"name":"le_nhds_iff","kind":"theorem","statement":"theorem le_nhds_iff {α : Type u} [topological_space α] {f : filter α} {a : α} : f ≤ nhds a ↔ ∀ (s : set α), a ∈ s → is_open s → s ∈ f","theorem":"{α : Type u} [topological_space α] {f : filter α} {a : α} : f ≤ nhds a ↔ ∀ (s : set α), a ∈ s → is_open s → s ∈ f","args":"{α : Type u} [topological_space α] {f : filter α} {a : α}","doc_string":"A filter lies below the neighborhood filter at `a` iff it contains every open set around `a`.","type":"f ≤ nhds a ↔ ∀ (s : set α), a ∈ s → is_open s → s ∈ f"},{"name":"add_con.ext'_iff","kind":"theorem","statement":"theorem add_con.ext'_iff {M : Type u_1} [has_add M] {c d : add_con M} : setoid.r = setoid.r ↔ c = d","theorem":"{M : Type u_1} [has_add M] {c d : add_con M} : setoid.r = setoid.r ↔ c = d","args":"{M : Type u_1} [has_add M] {c d : add_con M}","doc_string":"Two additive congruence relations are equal iff their underlying binary relations are equal.","type":"setoid.r = setoid.r ↔ c = d"},{"name":"sub_nonpos_of_le","kind":"theorem","statement":"theorem sub_nonpos_of_le {α : Type u} [add_group α] [has_le α] [covariant_class α α (function.swap has_add.add) has_le.le] {a b : α} : a ≤ b → a - b ≤ 0","theorem":"{α : Type u} [add_group α] [has_le α] [covariant_class α α (function.swap has_add.add) has_le.le] {a b : α} : a ≤ b → a - b ≤ 0","args":"{α : Type u} [add_group α] [has_le α] [covariant_class α α (function.swap has_add.add) has_le.le] {a b : α}","doc_string":"**Alias** of the reverse direction of sub_nonpos`.","type":"a ≤ b → a - b ≤ 0"},{"name":"is_add_unit.is_add_regular","kind":"theorem","statement":"theorem is_add_unit.is_add_regular {R : Type u_1} {a : R} [add_monoid R] (ua : is_add_unit a) : is_add_regular a","theorem":"{R : Type u_1} {a : R} [add_monoid R] (ua : is_add_unit a) : is_add_regular a","args":"{R : Type u_1} {a : R} [add_monoid R] (ua : is_add_unit a)","doc_string":"An additive unit in an additive monoid is add-regular.","type":"is_add_regular a"},{"name":"add_submonoid.closure_le","kind":"theorem","statement":"theorem add_submonoid.closure_le {M : Type u_1} [add_zero_class M] {s : set M} {S : add_submonoid M} : add_submonoid.closure s ≤ S ↔ s ⊆ ↑S","theorem":"{M : Type u_1} [add_zero_class M] {s : set M} {S : add_submonoid M} : add_submonoid.closure s ≤ S ↔ s ⊆ ↑S","args":"{M : Type u_1} [add_zero_class M] {s : set M} {S : add_submonoid M}","doc_string":"An additive submonoid `S` includes `closure s` if and only if it includes `s`","type":"add_submonoid.closure s ≤ S ↔ s ⊆ ↑S"},{"name":"matrix.cons_val_one","kind":"theorem","statement":"theorem matrix.cons_val_one {α : Type u} {m : ℕ} (x : α) (u : fin m.succ → α) : matrix.vec_cons x u 1 = matrix.vec_head u","theorem":"{α : Type u} {m : ℕ} (x : α) (u : fin m.succ → α) : matrix.vec_cons x u 1 = matrix.vec_head u","args":"{α : Type u} {m : ℕ} (x : α) (u : fin m.succ → α)","doc_string":"`![a, b, ...] 1` is equal to `b`.   The simplifier needs a special lemma for length `≥ 2`, in addition to  `cons_val_succ`, because `1 : fin 1 = 0 : fin 1`.","type":"matrix.vec_cons x u 1 = matrix.vec_head u"},{"name":"function.injective.nontrivial","kind":"theorem","statement":"theorem function.injective.nontrivial {α : Type u_1} {β : Type u_2} [nontrivial α] {f : α → β} (hf : function.injective f) : nontrivial β","theorem":"{α : Type u_1} {β : Type u_2} [nontrivial α] {f : α → β} (hf : function.injective f) : nontrivial β","args":"{α : Type u_1} {β : Type u_2} [nontrivial α] {f : α → β} (hf : function.injective f)","doc_string":"Pushforward a `nontrivial` instance along an injective function.","type":"nontrivial β"},{"name":"nat.choose_le_middle","kind":"theorem","statement":"theorem nat.choose_le_middle (r n : ℕ) : n.choose r ≤ n.choose (n / 2)","theorem":"(r n : ℕ) : n.choose r ≤ n.choose (n / 2)","args":"(r n : ℕ)","doc_string":"`choose n r` is maximised when `r` is `n/2`.","type":"n.choose r ≤ n.choose (n / 2)"},{"name":"is_add_monoid_hom.id","kind":"theorem","statement":"theorem is_add_monoid_hom.id {α : Type u} [add_zero_class α] : is_add_monoid_hom id","theorem":"{α : Type u} [add_zero_class α] : is_add_monoid_hom id","args":"{α : Type u} [add_zero_class α]","doc_string":"The identity map is an additive monoid homomorphism.","type":"is_add_monoid_hom id"},{"name":"function.injective.nat_tendsto_at_top","kind":"theorem","statement":"theorem function.injective.nat_tendsto_at_top {f : ℕ → ℕ} (hf : function.injective f) : filter.tendsto f filter.at_top filter.at_top","theorem":"{f : ℕ → ℕ} (hf : function.injective f) : filter.tendsto f filter.at_top filter.at_top","args":"{f : ℕ → ℕ} (hf : function.injective f)","doc_string":"An injective sequence `f : ℕ → ℕ` tends to infinity at infinity.","type":"filter.tendsto f filter.at_top filter.at_top"},{"name":"vector.singleton_tail","kind":"theorem","statement":"theorem vector.singleton_tail {α : Type u_1} (v : vector α 1) : v.tail = vector.nil","theorem":"{α : Type u_1} (v : vector α 1) : v.tail = vector.nil","args":"{α : Type u_1} (v : vector α 1)","doc_string":"The `tail` of a vector made up of one element is `nil`.","type":"v.tail = vector.nil"},{"name":"finset.exists_intermediate_set","kind":"theorem","statement":"theorem finset.exists_intermediate_set {α : Type u_1} {A B : finset α} (i : ℕ) (h₁ : i + B.card ≤ A.card) (h₂ : B ⊆ A) : ∃ (C : finset α), B ⊆ C ∧ C ⊆ A ∧ C.card = i + B.card","theorem":"{α : Type u_1} {A B : finset α} (i : ℕ) (h₁ : i + B.card ≤ A.card) (h₂ : B ⊆ A) : ∃ (C : finset α), B ⊆ C ∧ C ⊆ A ∧ C.card = i + B.card","args":"{α : Type u_1} {A B : finset α} (i : ℕ) (h₁ : i + B.card ≤ A.card) (h₂ : B ⊆ A)","doc_string":" Given a set `A` and a set `B` inside it, we can shrink `A` to any appropriate size, and keep `B` inside it.","type":"∃ (C : finset α), B ⊆ C ∧ C ⊆ A ∧ C.card = i + B.card"},{"name":"is_add_regular_zero","kind":"theorem","statement":"theorem is_add_regular_zero {R : Type u_1} [add_zero_class R] : is_add_regular 0","theorem":"{R : Type u_1} [add_zero_class R] : is_add_regular 0","args":"{R : Type u_1} [add_zero_class R]","doc_string":"If adding `0` on either side is the identity, `0` is regular.","type":"is_add_regular 0"},{"name":"not_is_regular_zero","kind":"theorem","statement":"theorem not_is_regular_zero {R : Type u_1} [mul_zero_class R] [nontrivial R] : ¬is_regular 0","theorem":"{R : Type u_1} [mul_zero_class R] [nontrivial R] : ¬is_regular 0","args":"{R : Type u_1} [mul_zero_class R] [nontrivial R]","doc_string":"In a non-trivial ring, the element `0` is not regular -- with typeclasses.","type":"¬is_regular 0"},{"name":"left.add_pos_of_nonneg_of_pos","kind":"theorem","statement":"theorem left.add_pos_of_nonneg_of_pos {α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α has_add.add has_lt.lt] {a b : α} (ha : 0 ≤ a) (hb : 0 < b) : 0 < a + b","theorem":"{α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α has_add.add has_lt.lt] {a b : α} (ha : 0 ≤ a) (hb : 0 < b) : 0 < a + b","args":"{α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α has_add.add has_lt.lt] {a b : α} (ha : 0 ≤ a) (hb : 0 < b)","doc_string":"Assumes left covariance. The lemma assuming right covariance is `right.add_pos_of_nonneg_of_pos`.","type":"0 < a + b"},{"name":"implies.trans","kind":"theorem","statement":"theorem implies.trans {p q r : Prop} (h₁ : implies p q) (h₂ : implies q r) : implies p r","theorem":"{p q r : Prop} (h₁ : implies p q) (h₂ : implies q r) : implies p r","args":"{p q r : Prop} (h₁ : implies p q) (h₂ : implies q r)","doc_string":"Implication `→` is transitive. If `P → Q` and `Q → R` then `P → R`.","type":"implies p r"},{"name":"has_le.le.lt_or_eq_dec","kind":"theorem","statement":"theorem has_le.le.lt_or_eq_dec {α : Type u} [partial_order α] [decidable_rel has_le.le] {a b : α} (hab : a ≤ b) : a < b ∨ a = b","theorem":"{α : Type u} [partial_order α] [decidable_rel has_le.le] {a b : α} (hab : a ≤ b) : a < b ∨ a = b","args":"{α : Type u} [partial_order α] [decidable_rel has_le.le] {a b : α} (hab : a ≤ b)","doc_string":"**Alias** of decidable.lt_or_eq_of_le`.","type":"a < b ∨ a = b"},{"name":"lt_of_sub_neg","kind":"theorem","statement":"theorem lt_of_sub_neg {α : Type u} [add_group α] [has_lt α] [covariant_class α α (function.swap has_add.add) has_lt.lt] {a b : α} : a - b < 0 → a < b","theorem":"{α : Type u} [add_group α] [has_lt α] [covariant_class α α (function.swap has_add.add) has_lt.lt] {a b : α} : a - b < 0 → a < b","args":"{α : Type u} [add_group α] [has_lt α] [covariant_class α α (function.swap has_add.add) has_lt.lt] {a b : α}","doc_string":"**Alias** of the forward direction of sub_neg`.","type":"a - b < 0 → a < b"},{"name":"has_le.le.trans_eq","kind":"theorem","statement":"theorem has_le.le.trans_eq {α : Type u} [preorder α] {a b c : α} (hab : a ≤ b) (hbc : b = c) : a ≤ c","theorem":"{α : Type u} [preorder α] {a b c : α} (hab : a ≤ b) (hbc : b = c) : a ≤ c","args":"{α : Type u} [preorder α] {a b c : α} (hab : a ≤ b) (hbc : b = c)","doc_string":"**Alias** of le_of_le_of_eq`.","type":"a ≤ c"},{"name":"category_theory.limits.has_binary_biproduct.of_has_binary_coproduct","kind":"theorem","statement":"theorem category_theory.limits.has_binary_biproduct.of_has_binary_coproduct {C : Type u} [category_theory.category C] [category_theory.preadditive C] (X Y : C) [category_theory.limits.has_binary_coproduct X Y] : category_theory.limits.has_binary_biproduct X Y","theorem":"{C : Type u} [category_theory.category C] [category_theory.preadditive C] (X Y : C) [category_theory.limits.has_binary_coproduct X Y] : category_theory.limits.has_binary_biproduct X Y","args":"{C : Type u} [category_theory.category C] [category_theory.preadditive C] (X Y : C) [category_theory.limits.has_binary_coproduct X Y]","doc_string":"In a preadditive category, if the coproduct of `X` and `Y` exists, then the    binary biproduct of `X` and `Y` exists.","type":"category_theory.limits.has_binary_biproduct X Y"},{"name":"category_theory.limits.has_binary_coproducts_of_has_colimit_pair","kind":"theorem","statement":"theorem category_theory.limits.has_binary_coproducts_of_has_colimit_pair (C : Type u) [category_theory.category C] [∀ {X Y : C}, category_theory.limits.has_colimit (category_theory.limits.pair X Y)] : category_theory.limits.has_binary_coproducts C","theorem":"(C : Type u) [category_theory.category C] [∀ {X Y : C}, category_theory.limits.has_colimit (category_theory.limits.pair X Y)] : category_theory.limits.has_binary_coproducts C","args":"(C : Type u) [category_theory.category C] [∀ {X Y : C}, category_theory.limits.has_colimit (category_theory.limits.pair X Y)]","doc_string":"If `C` has all colimits of diagrams `pair X Y`, then it has all binary coproducts","type":"category_theory.limits.has_binary_coproducts C"},{"name":"finset.nat.antidiagonal_congr","kind":"theorem","statement":"theorem finset.nat.antidiagonal_congr {n : ℕ} {p q : ℕ × ℕ} (hp : p ∈ finset.nat.antidiagonal n) (hq : q ∈ finset.nat.antidiagonal n) : p = q ↔ p.fst = q.fst","theorem":"{n : ℕ} {p q : ℕ × ℕ} (hp : p ∈ finset.nat.antidiagonal n) (hq : q ∈ finset.nat.antidiagonal n) : p = q ↔ p.fst = q.fst","args":"{n : ℕ} {p q : ℕ × ℕ} (hp : p ∈ finset.nat.antidiagonal n) (hq : q ∈ finset.nat.antidiagonal n)","doc_string":"A point in the antidiagonal is determined by its first co-ordinate.","type":"p = q ↔ p.fst = q.fst"},{"name":"quaternion_group.order_of_xa","kind":"theorem","statement":"theorem quaternion_group.order_of_xa {n : ℕ} [hpos : fact (0 < n)] (i : zmod (2 * n)) : order_of (quaternion_group.xa i) = 4","theorem":"{n : ℕ} [hpos : fact (0 < n)] (i : zmod (2 * n)) : order_of (quaternion_group.xa i) = 4","args":"{n : ℕ} [hpos : fact (0 < n)] (i : zmod (2 * n))","doc_string":"If `0 < n`, then `xa i` has order 4.","type":"order_of (quaternion_group.xa i) = 4"},{"name":"is_add_regular_add_iff","kind":"theorem","statement":"theorem is_add_regular_add_iff {R : Type u_1} {a b : R} [add_comm_semigroup R] : is_add_regular (a + b) ↔ is_add_regular a ∧ is_add_regular b","theorem":"{R : Type u_1} {a b : R} [add_comm_semigroup R] : is_add_regular (a + b) ↔ is_add_regular a ∧ is_add_regular b","args":"{R : Type u_1} {a b : R} [add_comm_semigroup R]","doc_string":"A sum is add-regular if and only if the summands are.","type":"is_add_regular (a + b) ↔ is_add_regular a ∧ is_add_regular b"},{"name":"left.one_lt_mul_of_le_of_lt","kind":"theorem","statement":"theorem left.one_lt_mul_of_le_of_lt {α : Type u_1} [mul_one_class α] [preorder α] [covariant_class α α has_mul.mul has_lt.lt] {a b : α} (ha : 1 ≤ a) (hb : 1 < b) : 1 < a * b","theorem":"{α : Type u_1} [mul_one_class α] [preorder α] [covariant_class α α has_mul.mul has_lt.lt] {a b : α} (ha : 1 ≤ a) (hb : 1 < b) : 1 < a * b","args":"{α : Type u_1} [mul_one_class α] [preorder α] [covariant_class α α has_mul.mul has_lt.lt] {a b : α} (ha : 1 ≤ a) (hb : 1 < b)","doc_string":" Assumes left covariance. The lemma assuming right covariance is `right.one_lt_mul_of_le_of_lt`.","type":"1 < a * b"},{"name":"function.is_fixed_pt.left_of_comp","kind":"theorem","statement":"theorem function.is_fixed_pt.left_of_comp {α : Type u} {f g : α → α} {x : α} (hfg : function.is_fixed_pt (f ∘ g) x) (hg : function.is_fixed_pt g x) : function.is_fixed_pt f x","theorem":"{α : Type u} {f g : α → α} {x : α} (hfg : function.is_fixed_pt (f ∘ g) x) (hg : function.is_fixed_pt g x) : function.is_fixed_pt f x","args":"{α : Type u} {f g : α → α} {x : α} (hfg : function.is_fixed_pt (f ∘ g) x) (hg : function.is_fixed_pt g x)","doc_string":"If `x` is a fixed point of `f ∘ g` and `g`, then it is a fixed point of `f`.","type":"function.is_fixed_pt f x"},{"name":"free_group.reduce.eq_of_red","kind":"theorem","statement":"theorem free_group.reduce.eq_of_red {α : Type u} {L₁ L₂ : list (α × bool)} [decidable_eq α] (H : free_group.red L₁ L₂) : free_group.reduce L₁ = free_group.reduce L₂","theorem":"{α : Type u} {L₁ L₂ : list (α × bool)} [decidable_eq α] (H : free_group.red L₁ L₂) : free_group.reduce L₁ = free_group.reduce L₂","args":"{α : Type u} {L₁ L₂ : list (α × bool)} [decidable_eq α] (H : free_group.red L₁ L₂)","doc_string":" If a word reduces to another word, then they have a common maximal reduction.","type":"free_group.reduce L₁ = free_group.reduce L₂"},{"name":"lt_inv_of_lt_inv","kind":"theorem","statement":"theorem lt_inv_of_lt_inv {α : Type u} [group α] [has_lt α] [covariant_class α α has_mul.mul has_lt.lt] [covariant_class α α (function.swap has_mul.mul) has_lt.lt] {a b : α} : a < b⁻¹ → b < a⁻¹","theorem":"{α : Type u} [group α] [has_lt α] [covariant_class α α has_mul.mul has_lt.lt] [covariant_class α α (function.swap has_mul.mul) has_lt.lt] {a b : α} : a < b⁻¹ → b < a⁻¹","args":"{α : Type u} [group α] [has_lt α] [covariant_class α α has_mul.mul has_lt.lt] [covariant_class α α (function.swap has_mul.mul) has_lt.lt] {a b : α}","doc_string":"**Alias** of the forward direction of lt_inv'`.","type":"a < b⁻¹ → b < a⁻¹"},{"name":"nat.dvd_left_iff_eq","kind":"theorem","statement":"theorem nat.dvd_left_iff_eq {m n : ℕ} : (∀ (a : ℕ), a ∣ m ↔ a ∣ n) ↔ m = n","theorem":"{m n : ℕ} : (∀ (a : ℕ), a ∣ m ↔ a ∣ n) ↔ m = n","args":"{m n : ℕ}","doc_string":"Two natural numbers are equal if and only if the have the same divisors.","type":"(∀ (a : ℕ), a ∣ m ↔ a ∣ n) ↔ m = n"},{"name":"vector.reverse_nth_zero","kind":"theorem","statement":"theorem vector.reverse_nth_zero {n : ℕ} {α : Type u_1} {v : vector α (n + 1)} : v.reverse.head = v.last","theorem":"{n : ℕ} {α : Type u_1} {v : vector α (n + 1)} : v.reverse.head = v.last","args":"{n : ℕ} {α : Type u_1} {v : vector α (n + 1)}","doc_string":"The `last` element of a vector is the `head` of the `reverse` vector.","type":"v.reverse.head = v.last"},{"name":"has_le.le.trans","kind":"theorem","statement":"theorem has_le.le.trans {α : Type u} [preorder α] {a b c : α} : a ≤ b → b ≤ c → a ≤ c","theorem":"{α : Type u} [preorder α] {a b c : α} : a ≤ b → b ≤ c → a ≤ c","args":"{α : Type u} [preorder α] {a b c : α}","doc_string":"**Alias** of le_trans`.","type":"a ≤ b → b ≤ c → a ≤ c"},{"name":"is_add_group_hom.id","kind":"theorem","statement":"theorem is_add_group_hom.id {α : Type u} [add_group α] : is_add_group_hom id","theorem":"{α : Type u} [add_group α] : is_add_group_hom id","args":"{α : Type u} [add_group α]","doc_string":"The identity is an additive group homomorphism.","type":"is_add_group_hom id"},{"name":"is_submonoid.multiset_prod_mem","kind":"theorem","statement":"theorem is_submonoid.multiset_prod_mem {M : Type u_1} [comm_monoid M] {s : set M} (hs : is_submonoid s) (m : multiset M) : (∀ (a : M), a ∈ m → a ∈ s) → m.prod ∈ s","theorem":"{M : Type u_1} [comm_monoid M] {s : set M} (hs : is_submonoid s) (m : multiset M) : (∀ (a : M), a ∈ m → a ∈ s) → m.prod ∈ s","args":"{M : Type u_1} [comm_monoid M] {s : set M} (hs : is_submonoid s) (m : multiset M)","doc_string":" The product of a multiset of elements of a submonoid of a `comm_monoid` is an element of the submonoid.","type":"(∀ (a : M), a ∈ m → a ∈ s) → m.prod ∈ s"},{"name":"ordered_semiring.to_char_zero","kind":"theorem","statement":"theorem ordered_semiring.to_char_zero {R : Type u_1} [ordered_semiring R] [nontrivial R] : char_zero R","theorem":"{R : Type u_1} [ordered_semiring R] [nontrivial R] : char_zero R","args":"{R : Type u_1} [ordered_semiring R] [nontrivial R]","doc_string":" Note this is not an instance as `char_zero` implies `nontrivial`, and this would risk forming a loop.","type":"char_zero R"},{"name":"dense_inducing_pure","kind":"theorem","statement":"theorem dense_inducing_pure {α : Type u} : dense_inducing has_pure.pure","theorem":"{α : Type u} : dense_inducing has_pure.pure","args":"{α : Type u}","doc_string":"`pure : α → ultrafilter α` defines a dense inducing of `α` in `ultrafilter α`.","type":"dense_inducing has_pure.pure"},{"name":"exp_neg_inv_glue.f_aux_zero_eq","kind":"theorem","statement":"theorem exp_neg_inv_glue.f_aux_zero_eq  : exp_neg_inv_glue.f_aux 0 = exp_neg_inv_glue","theorem":" : exp_neg_inv_glue.f_aux 0 = exp_neg_inv_glue","args":"","doc_string":"The `0`-th auxiliary function `f_aux 0` coincides with `exp_neg_inv_glue`, by definition.","type":"exp_neg_inv_glue.f_aux 0 = exp_neg_inv_glue"},{"name":"set.sized.union","kind":"theorem","statement":"theorem set.sized.union {α : Type u_1} {A B : set (finset α)} {r : ℕ} : set.sized r A ∧ set.sized r B → set.sized r (A ∪ B)","theorem":"{α : Type u_1} {A B : set (finset α)} {r : ℕ} : set.sized r A ∧ set.sized r B → set.sized r (A ∪ B)","args":"{α : Type u_1} {A B : set (finset α)} {r : ℕ}","doc_string":"**Alias** of the reverse direction of set.sized_union`.","type":"set.sized r A ∧ set.sized r B → set.sized r (A ∪ B)"},{"name":"dihedral_group.order_of_sr","kind":"theorem","statement":"theorem dihedral_group.order_of_sr {n : ℕ} (i : zmod n) : order_of (dihedral_group.sr i) = 2","theorem":"{n : ℕ} (i : zmod n) : order_of (dihedral_group.sr i) = 2","args":"{n : ℕ} (i : zmod n)","doc_string":"If `0 < n`, then `sr i` has order 2.","type":"order_of (dihedral_group.sr i) = 2"},{"name":"equiv.coe_fn_injective","kind":"theorem","statement":"theorem equiv.coe_fn_injective {α : Sort u} {β : Sort v} : function.injective coe_fn","theorem":"{α : Sort u} {β : Sort v} : function.injective coe_fn","args":"{α : Sort u} {β : Sort v}","doc_string":"The map `coe_fn : (r ≃ s) → (r → s)` is injective.","type":"function.injective coe_fn"},{"name":"order.le_of_succ_le_succ","kind":"theorem","statement":"theorem order.le_of_succ_le_succ {α : Type u_1} [preorder α] [succ_order α] {a b : α} [no_max_order α] : order.succ a ≤ order.succ b → a ≤ b","theorem":"{α : Type u_1} [preorder α] [succ_order α] {a b : α} [no_max_order α] : order.succ a ≤ order.succ b → a ≤ b","args":"{α : Type u_1} [preorder α] [succ_order α] {a b : α} [no_max_order α]","doc_string":"**Alias** of the forward direction of order.succ_le_succ_iff`.","type":"order.succ a ≤ order.succ b → a ≤ b"},{"name":"nat.dvd_add_self_right","kind":"theorem","statement":"theorem nat.dvd_add_self_right {m n : ℕ} : m ∣ n + m ↔ m ∣ n","theorem":"{m n : ℕ} : m ∣ n + m ↔ m ∣ n","args":"{m n : ℕ}","doc_string":"A natural number `m` divides the sum `n + m` if and only if `m` divides `n`.","type":"m ∣ n + m ↔ m ∣ n"},{"name":"le_of_sub_nonneg","kind":"theorem","statement":"theorem le_of_sub_nonneg {α : Type u} [add_group α] [has_le α] [covariant_class α α (function.swap has_add.add) has_le.le] {a b : α} : 0 ≤ a - b → b ≤ a","theorem":"{α : Type u} [add_group α] [has_le α] [covariant_class α α (function.swap has_add.add) has_le.le] {a b : α} : 0 ≤ a - b → b ≤ a","args":"{α : Type u} [add_group α] [has_le α] [covariant_class α α (function.swap has_add.add) has_le.le] {a b : α}","doc_string":"**Alias** of the forward direction of sub_nonneg`.","type":"0 ≤ a - b → b ≤ a"},{"name":"count_succ_eq_succ_count","kind":"theorem","statement":"theorem count_succ_eq_succ_count {p : ℕ → Prop} [decidable_pred p] {n : ℕ} : p n → nat.count p (n + 1) = nat.count p n + 1","theorem":"{p : ℕ → Prop} [decidable_pred p] {n : ℕ} : p n → nat.count p (n + 1) = nat.count p n + 1","args":"{p : ℕ → Prop} [decidable_pred p] {n : ℕ}","doc_string":"**Alias** of the reverse direction of nat.count_succ_eq_succ_count_iff`.","type":"p n → nat.count p (n + 1) = nat.count p n + 1"},{"name":"nat.sub_succ'","kind":"theorem","statement":"theorem nat.sub_succ' (a b : ℕ) : a - b.succ = a - b - 1","theorem":"(a b : ℕ) : a - b.succ = a - b - 1","args":"(a b : ℕ)","doc_string":"A version of `nat.sub_succ` in the form `_ - 1` instead of `nat.pred _`.","type":"a - b.succ = a - b - 1"},{"name":"zmod.nat_cast_zmod_val","kind":"theorem","statement":"theorem zmod.nat_cast_zmod_val {n : ℕ} [fact (0 < n)] (a : zmod n) : ↑(a.val) = a","theorem":"{n : ℕ} [fact (0 < n)] (a : zmod n) : ↑(a.val) = a","args":"{n : ℕ} [fact (0 < n)] (a : zmod n)","doc_string":" So-named because the coercion is `nat.cast` into `zmod`. For `nat.cast` into an arbitrary ring, see `zmod.nat_cast_val`.","type":"↑(a.val) = a"},{"name":"list.prod_eq_zero_iff","kind":"theorem","statement":"theorem list.prod_eq_zero_iff {M₀ : Type u_6} [monoid_with_zero M₀] [nontrivial M₀] [no_zero_divisors M₀] {L : list M₀} : L.prod = 0 ↔ 0 ∈ L","theorem":"{M₀ : Type u_6} [monoid_with_zero M₀] [nontrivial M₀] [no_zero_divisors M₀] {L : list M₀} : L.prod = 0 ↔ 0 ∈ L","args":"{M₀ : Type u_6} [monoid_with_zero M₀] [nontrivial M₀] [no_zero_divisors M₀] {L : list M₀}","doc_string":" Product of elements of a list `L` equals zero if and only if `0 ∈ L`. See also `list.prod_eq_zero` for an implication that needs weaker typeclass assumptions.","type":"L.prod = 0 ↔ 0 ∈ L"},{"name":"right.one_lt_mul'","kind":"theorem","statement":"theorem right.one_lt_mul' {α : Type u_1} [mul_one_class α] [preorder α] [covariant_class α α (function.swap has_mul.mul) has_le.le] {a b : α} (ha : 1 < a) (hb : 1 < b) : 1 < a * b","theorem":"{α : Type u_1} [mul_one_class α] [preorder α] [covariant_class α α (function.swap has_mul.mul) has_le.le] {a b : α} (ha : 1 < a) (hb : 1 < b) : 1 < a * b","args":"{α : Type u_1} [mul_one_class α] [preorder α] [covariant_class α α (function.swap has_mul.mul) has_le.le] {a b : α} (ha : 1 < a) (hb : 1 < b)","doc_string":" Assumes right covariance. The lemma assuming left covariance is `left.one_lt_mul'`.","type":"1 < a * b"},{"name":"is_right_regular_of_right_cancel_semigroup","kind":"theorem","statement":"theorem is_right_regular_of_right_cancel_semigroup {R : Type u_1} [right_cancel_semigroup R] (g : R) : is_right_regular g","theorem":"{R : Type u_1} [right_cancel_semigroup R] (g : R) : is_right_regular g","args":"{R : Type u_1} [right_cancel_semigroup R] (g : R)","doc_string":"Elements of a right cancel semigroup are right regular.","type":"is_right_regular g"},{"name":"le_nhds_of_cauchy_adhp","kind":"theorem","statement":"theorem le_nhds_of_cauchy_adhp {α : Type u} [uniform_space α] {f : filter α} {x : α} (hf : cauchy f) (adhs : cluster_pt x f) : f ≤ nhds x","theorem":"{α : Type u} [uniform_space α] {f : filter α} {x : α} (hf : cauchy f) (adhs : cluster_pt x f) : f ≤ nhds x","args":"{α : Type u} [uniform_space α] {f : filter α} {x : α} (hf : cauchy f) (adhs : cluster_pt x f)","doc_string":" If `x` is an adherent (cluster) point for a Cauchy filter `f`, then it is a limit point for `f`.","type":"f ≤ nhds x"},{"name":"real.summable_one_div_nat_pow","kind":"theorem","statement":"theorem real.summable_one_div_nat_pow {p : ℕ} : summable (λ (n : ℕ), 1 / ↑n ^ p) ↔ 1 < p","theorem":"{p : ℕ} : summable (λ (n : ℕ), 1 / ↑n ^ p) ↔ 1 < p","args":"{p : ℕ}","doc_string":" Test for convergence of the `p`-series: the real-valued series `∑' n : ℕ, 1 / n ^ p` converges if and only if `1 < p`.","type":"summable (λ (n : ℕ), 1 / ↑n ^ p) ↔ 1 < p"},{"name":"no_min_order.infinite","kind":"theorem","statement":"theorem no_min_order.infinite {α : Type u_1} [preorder α] [nonempty α] [no_min_order α] : infinite α","theorem":"{α : Type u_1} [preorder α] [nonempty α] [no_min_order α] : infinite α","args":"{α : Type u_1} [preorder α] [nonempty α] [no_min_order α]","doc_string":" A nonempty preorder with no minimal element is infinite. This is not an instance to avoid a cycle with `infinite α → nontrivial α → nonempty α`.","type":"infinite α"},{"name":"filter.at_top_le_cofinite","kind":"theorem","statement":"theorem filter.at_top_le_cofinite {α : Type u_2} [preorder α] [no_max_order α] : filter.at_top ≤ filter.cofinite","theorem":"{α : Type u_2} [preorder α] [no_max_order α] : filter.at_top ≤ filter.cofinite","args":"{α : Type u_2} [preorder α] [no_max_order α]","doc_string":"If `α` is a preorder with no maximal element, then `at_top ≤ cofinite`.","type":"filter.at_top ≤ filter.cofinite"},{"name":"nat.upto.wf","kind":"theorem","statement":"theorem nat.upto.wf {p : ℕ → Prop} : (∃ (x : ℕ), p x) → well_founded (nat.upto.gt p)","theorem":"{p : ℕ → Prop} : (∃ (x : ℕ), p x) → well_founded (nat.upto.gt p)","args":"{p : ℕ → Prop}","doc_string":" The \"greater than\" relation on `upto p` is well founded if (and only if) there exists a value satisfying `p`.","type":"(∃ (x : ℕ), p x) → well_founded (nat.upto.gt p)"},{"name":"list.drop_append_eq_append_drop","kind":"theorem","statement":"theorem list.drop_append_eq_append_drop {α : Type u} {l₁ l₂ : list α} {n : ℕ} : list.drop n (l₁ ++ l₂) = list.drop n l₁ ++ list.drop (n - l₁.length) l₂","theorem":"{α : Type u} {l₁ l₂ : list α} {n : ℕ} : list.drop n (l₁ ++ l₂) = list.drop n l₁ ++ list.drop (n - l₁.length) l₂","args":"{α : Type u} {l₁ l₂ : list α} {n : ℕ}","doc_string":" Dropping the elements up to `n` in `l₁ ++ l₂` is the same as dropping the elements up to `n` in `l₁`, dropping the elements up to `n - l₁.length` in `l₂`, and appending them.","type":"list.drop n (l₁ ++ l₂) = list.drop n l₁ ++ list.drop (n - l₁.length) l₂"},{"name":"add_subgroup.zero_mem","kind":"theorem","statement":"theorem add_subgroup.zero_mem {G : Type u_1} [add_group G] (H : add_subgroup G) : 0 ∈ H","theorem":"{G : Type u_1} [add_group G] (H : add_subgroup G) : 0 ∈ H","args":"{G : Type u_1} [add_group G] (H : add_subgroup G)","doc_string":"An `add_subgroup` contains the group's 0.","type":"0 ∈ H"},{"name":"finset.exists_smaller_set","kind":"theorem","statement":"theorem finset.exists_smaller_set {α : Type u_1} (A : finset α) (i : ℕ) (h₁ : i ≤ A.card) : ∃ (B : finset α), B ⊆ A ∧ B.card = i","theorem":"{α : Type u_1} (A : finset α) (i : ℕ) (h₁ : i ≤ A.card) : ∃ (B : finset α), B ⊆ A ∧ B.card = i","args":"{α : Type u_1} (A : finset α) (i : ℕ) (h₁ : i ≤ A.card)","doc_string":"We can shrink `A` to any smaller size.","type":"∃ (B : finset α), B ⊆ A ∧ B.card = i"},{"name":"dense_range_stone_cech_unit","kind":"theorem","statement":"theorem dense_range_stone_cech_unit {α : Type u} [topological_space α] : dense_range stone_cech_unit","theorem":"{α : Type u} [topological_space α] : dense_range stone_cech_unit","args":"{α : Type u} [topological_space α]","doc_string":"The image of stone_cech_unit is dense. (But stone_cech_unit need  not be an embedding, for example if α is not Hausdorff.)","type":"dense_range stone_cech_unit"},{"name":"category_theory.is_connected_zigzag","kind":"theorem","statement":"theorem category_theory.is_connected_zigzag {J : Type u₁} [category_theory.category J] [category_theory.is_connected J] (j₁ j₂ : J) : category_theory.zigzag j₁ j₂","theorem":"{J : Type u₁} [category_theory.category J] [category_theory.is_connected J] (j₁ j₂ : J) : category_theory.zigzag j₁ j₂","args":"{J : Type u₁} [category_theory.category J] [category_theory.is_connected J] (j₁ j₂ : J)","doc_string":"In a connected category, any two objects are related by `zigzag`.","type":"category_theory.zigzag j₁ j₂"},{"name":"right.one_le_inv_iff","kind":"theorem","statement":"theorem right.one_le_inv_iff {α : Type u} [group α] [has_le α] [covariant_class α α (function.swap has_mul.mul) has_le.le] {a : α} : 1 ≤ a⁻¹ ↔ a ≤ 1","theorem":"{α : Type u} [group α] [has_le α] [covariant_class α α (function.swap has_mul.mul) has_le.le] {a : α} : 1 ≤ a⁻¹ ↔ a ≤ 1","args":"{α : Type u} [group α] [has_le α] [covariant_class α α (function.swap has_mul.mul) has_le.le] {a : α}","doc_string":"Uses `right` co(ntra)variant.","type":"1 ≤ a⁻¹ ↔ a ≤ 1"},{"name":"matrix.mul_nonsing_inv","kind":"theorem","statement":"theorem matrix.mul_nonsing_inv {n : Type u'} {α : Type v} [fintype n] [decidable_eq n] [comm_ring α] (A : matrix n n α) (h : is_unit A.det) : A.mul A⁻¹ = 1","theorem":"{n : Type u'} {α : Type v} [fintype n] [decidable_eq n] [comm_ring α] (A : matrix n n α) (h : is_unit A.det) : A.mul A⁻¹ = 1","args":"{n : Type u'} {α : Type v} [fintype n] [decidable_eq n] [comm_ring α] (A : matrix n n α) (h : is_unit A.det)","doc_string":"The `nonsing_inv` of `A` is a right inverse.","type":"A.mul A⁻¹ = 1"},{"name":"is_glb.bdd_below","kind":"theorem","statement":"theorem is_glb.bdd_below {α : Type u} [preorder α] {s : set α} {a : α} (h : is_glb s a) : bdd_below s","theorem":"{α : Type u} [preorder α] {s : set α} {a : α} (h : is_glb s a) : bdd_below s","args":"{α : Type u} [preorder α] {s : set α} {a : α} (h : is_glb s a)","doc_string":"If `s` has a greatest lower bound, then it is bounded below.","type":"bdd_below s"},{"name":"padic_norm.one","kind":"theorem","statement":"theorem padic_norm.one (p : ℕ) : padic_norm p 1 = 1","theorem":"(p : ℕ) : padic_norm p 1 = 1","args":"(p : ℕ)","doc_string":"The p-adic norm of 1 is 1.","type":"padic_norm p 1 = 1"},{"name":"sub_eq_add_neg","kind":"theorem","statement":"theorem sub_eq_add_neg {G : Type u_1} [sub_neg_monoid G] (a b : G) : a - b = a + -b","theorem":"{G : Type u_1} [sub_neg_monoid G] (a b : G) : a - b = a + -b","args":"{G : Type u_1} [sub_neg_monoid G] (a b : G)","doc_string":"Subtracting an element is the same as adding by its negative.  This is a duplicate of `sub_neg_monoid.sub_eq_mul_neg` ensuring that the types unfold better.","type":"a - b = a + -b"},{"name":"psigma.subtype_ext","kind":"theorem","statement":"theorem psigma.subtype_ext {α : Sort u_1} {β : Sort u_2} {p : α → β → Prop} {x₀ x₁ : Σ' (a : α), subtype (p a)} : x₀.fst = x₁.fst → ↑(x₀.snd) = ↑(x₁.snd) → x₀ = x₁","theorem":"{α : Sort u_1} {β : Sort u_2} {p : α → β → Prop} {x₀ x₁ : Σ' (a : α), subtype (p a)} : x₀.fst = x₁.fst → ↑(x₀.snd) = ↑(x₁.snd) → x₀ = x₁","args":"{α : Sort u_1} {β : Sort u_2} {p : α → β → Prop} {x₀ x₁ : Σ' (a : α), subtype (p a)}","doc_string":"A specialized ext lemma for equality of psigma types over an indexed subtype.","type":"x₀.fst = x₁.fst → ↑(x₀.snd) = ↑(x₁.snd) → x₀ = x₁"},{"name":"category_theory.over.construct_products.over_binary_product_of_pullback","kind":"theorem","statement":"theorem category_theory.over.construct_products.over_binary_product_of_pullback {C : Type u} [category_theory.category C] [category_theory.limits.has_pullbacks C] {B : C} : category_theory.limits.has_binary_products (category_theory.over B)","theorem":"{C : Type u} [category_theory.category C] [category_theory.limits.has_pullbacks C] {B : C} : category_theory.limits.has_binary_products (category_theory.over B)","args":"{C : Type u} [category_theory.category C] [category_theory.limits.has_pullbacks C] {B : C}","doc_string":"Given a pullback in `C`, construct a binary product in `C/B`.","type":"category_theory.limits.has_binary_products (category_theory.over B)"},{"name":"group_topology.continuous_inv'","kind":"theorem","statement":"theorem group_topology.continuous_inv' {α : Type u} [group α] (g : group_topology α) : continuous has_inv.inv","theorem":"{α : Type u} [group α] (g : group_topology α) : continuous has_inv.inv","args":"{α : Type u} [group α] (g : group_topology α)","doc_string":"A version of the global `continuous_inv` suitable for dot notation.","type":"continuous has_inv.inv"},{"name":"add_pos_of_pos_of_nonneg","kind":"theorem","statement":"theorem add_pos_of_pos_of_nonneg {α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α has_add.add has_le.le] {a b : α} (ha : 0 < a) (hb : 0 ≤ b) : 0 < a + b","theorem":"{α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α has_add.add has_le.le] {a b : α} (ha : 0 < a) (hb : 0 ≤ b) : 0 < a + b","args":"{α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α has_add.add has_le.le] {a b : α} (ha : 0 < a) (hb : 0 ≤ b)","doc_string":"**Alias** of `left.add_pos_of_pos_of_nonneg`.","type":"0 < a + b"},{"name":"nat.eq_prime_pow_of_dvd_least_prime_pow","kind":"theorem","statement":"theorem nat.eq_prime_pow_of_dvd_least_prime_pow {a p k : ℕ} (pp : nat.prime p) (h₁ : ¬a ∣ p ^ k) (h₂ : a ∣ p ^ (k + 1)) : a = p ^ (k + 1)","theorem":"{a p k : ℕ} (pp : nat.prime p) (h₁ : ¬a ∣ p ^ k) (h₂ : a ∣ p ^ (k + 1)) : a = p ^ (k + 1)","args":"{a p k : ℕ} (pp : nat.prime p) (h₁ : ¬a ∣ p ^ k) (h₂ : a ∣ p ^ (k + 1))","doc_string":"If `p` is prime, and `a` doesn't divide `p^k`, but `a` does divide `p^(k+1)` then `a = p^(k+1)`.","type":"a = p ^ (k + 1)"},{"name":"zero_ne_one","kind":"theorem","statement":"theorem zero_ne_one {M₀ : Type u_1} [mul_zero_one_class M₀] [nontrivial M₀] : 0 ≠ 1","theorem":"{M₀ : Type u_1} [mul_zero_one_class M₀] [nontrivial M₀] : 0 ≠ 1","args":"{M₀ : Type u_1} [mul_zero_one_class M₀] [nontrivial M₀]","doc_string":"In a nontrivial monoid with zero, zero and one are different.","type":"0 ≠ 1"},{"name":"finset.subtype_map","kind":"theorem","statement":"theorem finset.subtype_map {α : Type u_1} {s : finset α} (p : α → Prop) [decidable_pred p] : finset.map (function.embedding.subtype p) (finset.subtype p s) = finset.filter p s","theorem":"{α : Type u_1} {s : finset α} (p : α → Prop) [decidable_pred p] : finset.map (function.embedding.subtype p) (finset.subtype p s) = finset.filter p s","args":"{α : Type u_1} {s : finset α} (p : α → Prop) [decidable_pred p]","doc_string":" `s.subtype p` converts back to `s.filter p` with `embedding.subtype`.","type":"finset.map (function.embedding.subtype p) (finset.subtype p s) = finset.filter p s"},{"name":"nat.le_pow_iff_clog_le","kind":"theorem","statement":"theorem nat.le_pow_iff_clog_le {b : ℕ} (hb : 1 < b) {x y : ℕ} : x ≤ b ^ y ↔ nat.clog b x ≤ y","theorem":"{b : ℕ} (hb : 1 < b) {x y : ℕ} : x ≤ b ^ y ↔ nat.clog b x ≤ y","args":"{b : ℕ} (hb : 1 < b) {x y : ℕ}","doc_string":"`clog b` and `pow b` form a Galois connection.","type":"x ≤ b ^ y ↔ nat.clog b x ≤ y"},{"name":"uniform_inducing.uniform_embedding","kind":"theorem","statement":"theorem uniform_inducing.uniform_embedding {α : Type u_1} {β : Type u_2} [uniform_space α] [uniform_space β] [separated_space α] {f : α → β} (hf : uniform_inducing f) : uniform_embedding f","theorem":"{α : Type u_1} {β : Type u_2} [uniform_space α] [uniform_space β] [separated_space α] {f : α → β} (hf : uniform_inducing f) : uniform_embedding f","args":"{α : Type u_1} {β : Type u_2} [uniform_space α] [uniform_space β] [separated_space α] {f : α → β} (hf : uniform_inducing f)","doc_string":" If the domain of a `uniform_inducing` map `f` is a `separated_space`, then `f` is injective, hence it is a `uniform_embedding`.","type":"uniform_embedding f"},{"name":"nat.exists_strict_mono","kind":"theorem","statement":"theorem nat.exists_strict_mono (α : Type u) [preorder α] [nonempty α] [no_max_order α] : ∃ (f : ℕ → α), strict_mono f","theorem":"(α : Type u) [preorder α] [nonempty α] [no_max_order α] : ∃ (f : ℕ → α), strict_mono f","args":"(α : Type u) [preorder α] [nonempty α] [no_max_order α]","doc_string":" If `α` is a nonempty preorder with no maximal elements, then there exists a strictly monotone function `ℕ → α`.","type":"∃ (f : ℕ → α), strict_mono f"},{"name":"is_square.inv","kind":"theorem","statement":"theorem is_square.inv {α : Type u_2} [division_monoid α] {a : α} : is_square a → is_square a⁻¹","theorem":"{α : Type u_2} [division_monoid α] {a : α} : is_square a → is_square a⁻¹","args":"{α : Type u_2} [division_monoid α] {a : α}","doc_string":"**Alias** of the reverse direction of is_square_inv`.","type":"is_square a → is_square a⁻¹"},{"name":"finset.sized_slice","kind":"theorem","statement":"theorem finset.sized_slice {α : Type u_1} {𝒜 : finset (finset α)} {r : ℕ} : set.sized r ↑(𝒜.slice r)","theorem":"{α : Type u_1} {𝒜 : finset (finset α)} {r : ℕ} : set.sized r ↑(𝒜.slice r)","args":"{α : Type u_1} {𝒜 : finset (finset α)} {r : ℕ}","doc_string":"Everything in the `r`-th slice of `𝒜` has size `r`.","type":"set.sized r ↑(𝒜.slice r)"},{"name":"polynomial.cyclotomic_one","kind":"theorem","statement":"theorem polynomial.cyclotomic_one (R : Type u_1) [ring R] : polynomial.cyclotomic 1 R = polynomial.X - 1","theorem":"(R : Type u_1) [ring R] : polynomial.cyclotomic 1 R = polynomial.X - 1","args":"(R : Type u_1) [ring R]","doc_string":"The first cyclotomic polyomial is `X - 1`.","type":"polynomial.cyclotomic 1 R = polynomial.X - 1"},{"name":"padic_norm.zero","kind":"theorem","statement":"theorem padic_norm.zero (p : ℕ) : padic_norm p 0 = 0","theorem":"(p : ℕ) : padic_norm p 0 = 0","args":"(p : ℕ)","doc_string":"The p-adic norm of 0 is 0.","type":"padic_norm p 0 = 0"},{"name":"has_sbtw.sbtw.cyclic_right","kind":"theorem","statement":"theorem has_sbtw.sbtw.cyclic_right {α : Type u_1} [circular_preorder α] {a b c : α} (h : has_sbtw.sbtw a b c) : has_sbtw.sbtw c a b","theorem":"{α : Type u_1} [circular_preorder α] {a b c : α} (h : has_sbtw.sbtw a b c) : has_sbtw.sbtw c a b","args":"{α : Type u_1} [circular_preorder α] {a b c : α} (h : has_sbtw.sbtw a b c)","doc_string":"**Alias** of sbtw_cyclic_right`.","type":"has_sbtw.sbtw c a b"},{"name":"is_right_regular_iff","kind":"theorem","statement":"theorem is_right_regular_iff {R : Type u_1} [has_mul R] {a : R} : is_right_regular a ↔ is_smul_regular R (mul_opposite.op a)","theorem":"{R : Type u_1} [has_mul R] {a : R} : is_right_regular a ↔ is_smul_regular R (mul_opposite.op a)","args":"{R : Type u_1} [has_mul R] {a : R}","doc_string":"Right-regular multiplication on `R` is equivalent to `Rᵐᵒᵖ`-regularity of `R` itself.","type":"is_right_regular a ↔ is_smul_regular R (mul_opposite.op a)"},{"name":"order_of_pos","kind":"theorem","statement":"theorem order_of_pos {G : Type u} [fintype G] [left_cancel_monoid G] (x : G) : 0 < order_of x","theorem":"{G : Type u} [fintype G] [left_cancel_monoid G] (x : G) : 0 < order_of x","args":"{G : Type u} [fintype G] [left_cancel_monoid G] (x : G)","doc_string":"This is the same as `order_of_pos' but with one fewer explicit assumption since this is  automatic in case of a finite cancellative monoid.","type":"0 < order_of x"},{"name":"int.exists_least_of_bdd","kind":"theorem","statement":"theorem int.exists_least_of_bdd {P : ℤ → Prop} (Hbdd : ∃ (b : ℤ), ∀ (z : ℤ), P z → b ≤ z) (Hinh : ∃ (z : ℤ), P z) : ∃ (lb : ℤ), P lb ∧ ∀ (z : ℤ), P z → lb ≤ z","theorem":"{P : ℤ → Prop} (Hbdd : ∃ (b : ℤ), ∀ (z : ℤ), P z → b ≤ z) (Hinh : ∃ (z : ℤ), P z) : ∃ (lb : ℤ), P lb ∧ ∀ (z : ℤ), P z → lb ≤ z","args":"{P : ℤ → Prop} (Hbdd : ∃ (b : ℤ), ∀ (z : ℤ), P z → b ≤ z) (Hinh : ∃ (z : ℤ), P z)","doc_string":" If `P : ℤ → Prop` is a predicate such that the set `{m : P m}` is bounded below and nonempty, then this set has the least element. This lemma uses classical logic to avoid assumption `[decidable_pred P]`. See `int.least_of_bdd` for a constructive counterpart.","type":"∃ (lb : ℤ), P lb ∧ ∀ (z : ℤ), P z → lb ≤ z"},{"name":"left.one_lt_mul'","kind":"theorem","statement":"theorem left.one_lt_mul' {α : Type u_1} [mul_one_class α] [preorder α] [covariant_class α α has_mul.mul has_le.le] {a b : α} (ha : 1 < a) (hb : 1 < b) : 1 < a * b","theorem":"{α : Type u_1} [mul_one_class α] [preorder α] [covariant_class α α has_mul.mul has_le.le] {a b : α} (ha : 1 < a) (hb : 1 < b) : 1 < a * b","args":"{α : Type u_1} [mul_one_class α] [preorder α] [covariant_class α α has_mul.mul has_le.le] {a b : α} (ha : 1 < a) (hb : 1 < b)","doc_string":" Assumes left covariance. The lemma assuming right covariance is `right.one_lt_mul'`.","type":"1 < a * b"},{"name":"fintype.exists_ne_map_eq_of_infinite","kind":"theorem","statement":"theorem fintype.exists_ne_map_eq_of_infinite {α : Type u_1} {β : Type u_2} [infinite α] [fintype β] (f : α → β) : ∃ (x y : α), x ≠ y ∧ f x = f y","theorem":"{α : Type u_1} {β : Type u_2} [infinite α] [fintype β] (f : α → β) : ∃ (x y : α), x ≠ y ∧ f x = f y","args":"{α : Type u_1} {β : Type u_2} [infinite α] [fintype β] (f : α → β)","doc_string":"The pigeonhole principle for infinitely many pigeons in finitely many pigeonholes. If there are infinitely many pigeons in finitely many pigeonholes, then there are at least two pigeons in the same pigeonhole.  See also: `fintype.exists_ne_map_eq_of_card_lt`, `fintype.exists_infinite_fiber`.","type":"∃ (x y : α), x ≠ y ∧ f x = f y"},{"name":"finsupp.coe_fn_injective","kind":"theorem","statement":"theorem finsupp.coe_fn_injective {α : Type u_1} {M : Type u_5} [has_zero M] : function.injective coe_fn","theorem":"{α : Type u_1} {M : Type u_5} [has_zero M] : function.injective coe_fn","args":"{α : Type u_1} {M : Type u_5} [has_zero M]","doc_string":"Deprecated. Use `fun_like.coe_injective` instead.","type":"function.injective coe_fn"},{"name":"has_subset.subset.trans","kind":"theorem","statement":"theorem has_subset.subset.trans {α : Type u} [has_subset α] [is_trans α has_subset.subset] {a b c : α} : a ⊆ b → b ⊆ c → a ⊆ c","theorem":"{α : Type u} [has_subset α] [is_trans α has_subset.subset] {a b c : α} : a ⊆ b → b ⊆ c → a ⊆ c","args":"{α : Type u} [has_subset α] [is_trans α has_subset.subset] {a b c : α}","doc_string":"**Alias** of subset_trans`.","type":"a ⊆ b → b ⊆ c → a ⊆ c"},{"name":"fin.strict_mono_unique","kind":"theorem","statement":"theorem fin.strict_mono_unique {n : ℕ} {α : Type u_1} [preorder α] {f g : fin n → α} (hf : strict_mono f) (hg : strict_mono g) (h : set.range f = set.range g) : f = g","theorem":"{n : ℕ} {α : Type u_1} [preorder α] {f g : fin n → α} (hf : strict_mono f) (hg : strict_mono g) (h : set.range f = set.range g) : f = g","args":"{n : ℕ} {α : Type u_1} [preorder α] {f g : fin n → α} (hf : strict_mono f) (hg : strict_mono g) (h : set.range f = set.range g)","doc_string":" Two strictly monotone functions from `fin n` are equal provided that their ranges are equal.","type":"f = g"},{"name":"is_square_of_char_two'","kind":"theorem","statement":"theorem is_square_of_char_two' {R : Type u_1} [fintype R] [comm_ring R] [is_reduced R] [char_p R 2] (a : R) : is_square a","theorem":"{R : Type u_1} [fintype R] [comm_ring R] [is_reduced R] [char_p R 2] (a : R) : is_square a","args":"{R : Type u_1} [fintype R] [comm_ring R] [is_reduced R] [char_p R 2] (a : R)","doc_string":" If `ring_char R = 2`, where `R` is a finite reduced commutative ring, then every `a : R` is a square.","type":"is_square a"},{"name":"real.tendsto_sum_range_one_div_nat_succ_at_top","kind":"theorem","statement":"theorem real.tendsto_sum_range_one_div_nat_succ_at_top  : filter.tendsto (λ (n : ℕ), (finset.range n).sum (λ (i : ℕ), 1 / (↑i + 1))) filter.at_top filter.at_top","theorem":" : filter.tendsto (λ (n : ℕ), (finset.range n).sum (λ (i : ℕ), 1 / (↑i + 1))) filter.at_top filter.at_top","args":"","doc_string":"**Divergence of the Harmonic Series**","type":"filter.tendsto (λ (n : ℕ), (finset.range n).sum (λ (i : ℕ), 1 / (↑i + 1))) filter.at_top filter.at_top"},{"name":"topological_fiber_bundle_core.is_topological_fiber_bundle","kind":"theorem","statement":"theorem topological_fiber_bundle_core.is_topological_fiber_bundle {ι : Type u_1} {B : Type u_2} {F : Type u_3} [topological_space B] [topological_space F] (Z : topological_fiber_bundle_core ι B F) : is_topological_fiber_bundle F Z.proj","theorem":"{ι : Type u_1} {B : Type u_2} {F : Type u_3} [topological_space B] [topological_space F] (Z : topological_fiber_bundle_core ι B F) : is_topological_fiber_bundle F Z.proj","args":"{ι : Type u_1} {B : Type u_2} {F : Type u_3} [topological_space B] [topological_space F] (Z : topological_fiber_bundle_core ι B F)","doc_string":"A topological fiber bundle constructed from core is indeed a topological fiber bundle.","type":"is_topological_fiber_bundle F Z.proj"},{"name":"charted_space.locally_compact","kind":"theorem","statement":"theorem charted_space.locally_compact (H : Type u) (M : Type u_2) [topological_space H] [topological_space M] [charted_space H M] [locally_compact_space H] : locally_compact_space M","theorem":"(H : Type u) (M : Type u_2) [topological_space H] [topological_space M] [charted_space H M] [locally_compact_space H] : locally_compact_space M","args":"(H : Type u) (M : Type u_2) [topological_space H] [topological_space M] [charted_space H M] [locally_compact_space H]","doc_string":" If a topological space admits an atlas with locally compact charts, then the space itself is locally compact.","type":"locally_compact_space M"},{"name":"not_or_distrib","kind":"theorem","statement":"theorem not_or_distrib {a b : Prop} : ¬(a ∨ b) ↔ ¬a ∧ ¬b","theorem":"{a b : Prop} : ¬(a ∨ b) ↔ ¬a ∧ ¬b","args":"{a b : Prop}","doc_string":" One of de Morgan's laws: the negation of a disjunction is logically equivalent to the conjunction of the negations.","type":"¬(a ∨ b) ↔ ¬a ∧ ¬b"},{"name":"set.sized.shadow","kind":"theorem","statement":"theorem set.sized.shadow {α : Type u_1} [decidable_eq α] {𝒜 : finset (finset α)} {r : ℕ} (h𝒜 : set.sized r ↑𝒜) : set.sized (r - 1) ↑(𝒜.shadow)","theorem":"{α : Type u_1} [decidable_eq α] {𝒜 : finset (finset α)} {r : ℕ} (h𝒜 : set.sized r ↑𝒜) : set.sized (r - 1) ↑(𝒜.shadow)","args":"{α : Type u_1} [decidable_eq α] {𝒜 : finset (finset α)} {r : ℕ} (h𝒜 : set.sized r ↑𝒜)","doc_string":"The shadow of a family of `r`-sets is a family of `r - 1`-sets.","type":"set.sized (r - 1) ↑(𝒜.shadow)"},{"name":"is_add_submonoid.list_sum_mem","kind":"theorem","statement":"theorem is_add_submonoid.list_sum_mem {M : Type u_1} [add_monoid M] {s : set M} (hs : is_add_submonoid s) {l : list M} : (∀ (x : M), x ∈ l → x ∈ s) → l.sum ∈ s","theorem":"{M : Type u_1} [add_monoid M] {s : set M} (hs : is_add_submonoid s) {l : list M} : (∀ (x : M), x ∈ l → x ∈ s) → l.sum ∈ s","args":"{M : Type u_1} [add_monoid M] {s : set M} (hs : is_add_submonoid s) {l : list M}","doc_string":"The sum of a list of elements of an `add_submonoid` is an element of the `add_submonoid`.","type":"(∀ (x : M), x ∈ l → x ∈ s) → l.sum ∈ s"},{"name":"is_left_regular.ne_zero","kind":"theorem","statement":"theorem is_left_regular.ne_zero {R : Type u_1} {a : R} [mul_zero_class R] [nontrivial R] (la : is_left_regular a) : a ≠ 0","theorem":"{R : Type u_1} {a : R} [mul_zero_class R] [nontrivial R] (la : is_left_regular a) : a ≠ 0","args":"{R : Type u_1} {a : R} [mul_zero_class R] [nontrivial R] (la : is_left_regular a)","doc_string":"A left-regular element of a `nontrivial` `mul_zero_class` is non-zero.","type":"a ≠ 0"},{"name":"subsingleton_or_nontrivial","kind":"theorem","statement":"theorem subsingleton_or_nontrivial (α : Type u_1) : subsingleton α ∨ nontrivial α","theorem":"(α : Type u_1) : subsingleton α ∨ nontrivial α","args":"(α : Type u_1)","doc_string":"A type is either a subsingleton or nontrivial.","type":"subsingleton α ∨ nontrivial α"},{"name":"function.injective.cod_restrict","kind":"theorem","statement":"theorem function.injective.cod_restrict {α : Type u} {β : Type v} {t : set β} {f : α → β} (h : ∀ (x : α), f x ∈ t) : function.injective f → function.injective (set.cod_restrict f t h)","theorem":"{α : Type u} {β : Type v} {t : set β} {f : α → β} (h : ∀ (x : α), f x ∈ t) : function.injective f → function.injective (set.cod_restrict f t h)","args":"{α : Type u} {β : Type v} {t : set β} {f : α → β} (h : ∀ (x : α), f x ∈ t)","doc_string":"**Alias** of the reverse direction of set.injective_cod_restrict`.","type":"function.injective f → function.injective (set.cod_restrict f t h)"},{"name":"is_smul_regular.one","kind":"theorem","statement":"theorem is_smul_regular.one {R : Type u_1} (M : Type u_3) [monoid R] [mul_action R M] : is_smul_regular M 1","theorem":"{R : Type u_1} (M : Type u_3) [monoid R] [mul_action R M] : is_smul_regular M 1","args":"{R : Type u_1} (M : Type u_3) [monoid R] [mul_action R M]","doc_string":"One is `M`-regular always.","type":"is_smul_regular M 1"},{"name":"reflexive_ne_imp_iff","kind":"theorem","statement":"theorem reflexive_ne_imp_iff {α : Type u_1} {r : α → α → Prop} [is_refl α r] {x y : α} : x ≠ y → r x y ↔ r x y","theorem":"{α : Type u_1} {r : α → α → Prop} [is_refl α r] {x y : α} : x ≠ y → r x y ↔ r x y","args":"{α : Type u_1} {r : α → α → Prop} [is_refl α r] {x y : α}","doc_string":" If a reflexive relation `r : α → α → Prop` holds over `x y : α`, then it holds whether or not `x ≠ y`. Unlike `reflexive.ne_imp_iff`, this uses `[is_refl α r]`.","type":"x ≠ y → r x y ↔ r x y"},{"name":"div_eq_one_of_eq","kind":"theorem","statement":"theorem div_eq_one_of_eq {G : Type u_2} [group G] {a b : G} : a = b → a / b = 1","theorem":"{G : Type u_2} [group G] {a b : G} : a = b → a / b = 1","args":"{G : Type u_2} [group G] {a b : G}","doc_string":"**Alias** of the reverse direction of div_eq_one`.","type":"a = b → a / b = 1"},{"name":"has_le.le.trans_lt","kind":"theorem","statement":"theorem has_le.le.trans_lt {α : Type u} [preorder α] {a b c : α} : a ≤ b → b < c → a < c","theorem":"{α : Type u} [preorder α] {a b c : α} : a ≤ b → b < c → a < c","args":"{α : Type u} [preorder α] {a b c : α}","doc_string":"**Alias** of lt_of_le_of_lt`.","type":"a ≤ b → b < c → a < c"},{"name":"lt_add_of_sub_left_lt","kind":"theorem","statement":"theorem lt_add_of_sub_left_lt {α : Type u} [add_comm_group α] [has_lt α] [covariant_class α α has_add.add has_lt.lt] {a b c : α} : a - b < c → a < b + c","theorem":"{α : Type u} [add_comm_group α] [has_lt α] [covariant_class α α has_add.add has_lt.lt] {a b c : α} : a - b < c → a < b + c","args":"{α : Type u} [add_comm_group α] [has_lt α] [covariant_class α α has_add.add has_lt.lt] {a b c : α}","doc_string":"**Alias** of the forward direction of sub_lt_iff_lt_add'`.","type":"a - b < c → a < b + c"},{"name":"dfinsupp.coe_fn_injective","kind":"theorem","statement":"theorem dfinsupp.coe_fn_injective {ι : Type u} {β : ι → Type v} [Π (i : ι), has_zero (β i)] : function.injective coe_fn","theorem":"{ι : Type u} {β : ι → Type v} [Π (i : ι), has_zero (β i)] : function.injective coe_fn","args":"{ι : Type u} {β : ι → Type v} [Π (i : ι), has_zero (β i)]","doc_string":"Deprecated. Use `fun_like.coe_injective` instead.","type":"function.injective coe_fn"},{"name":"list.prod_eq_zero","kind":"theorem","statement":"theorem list.prod_eq_zero {M₀ : Type u_6} [monoid_with_zero M₀] {L : list M₀} (h : 0 ∈ L) : L.prod = 0","theorem":"{M₀ : Type u_6} [monoid_with_zero M₀] {L : list M₀} (h : 0 ∈ L) : L.prod = 0","args":"{M₀ : Type u_6} [monoid_with_zero M₀] {L : list M₀} (h : 0 ∈ L)","doc_string":" If zero is an element of a list `L`, then `list.prod L = 0`. If the domain is a nontrivial monoid with zero with no divisors, then this implication becomes an `iff`, see `list.prod_eq_zero_iff`.","type":"L.prod = 0"},{"name":"function.bij_on_fixed_pts_comp","kind":"theorem","statement":"theorem function.bij_on_fixed_pts_comp {α : Type u} {β : Type v} (f : α → β) (g : β → α) : set.bij_on g (function.fixed_points (f ∘ g)) (function.fixed_points (g ∘ f))","theorem":"{α : Type u} {β : Type v} (f : α → β) (g : β → α) : set.bij_on g (function.fixed_points (f ∘ g)) (function.fixed_points (g ∘ f))","args":"{α : Type u} {β : Type v} (f : α → β) (g : β → α)","doc_string":" Given two maps `f : α → β` and `g : β → α`, `g` is a bijective map between the fixed points of `f ∘ g` and the fixed points of `g ∘ f`. The inverse map is `f`, see `inv_on_fixed_pts_comp`.","type":"set.bij_on g (function.fixed_points (f ∘ g)) (function.fixed_points (g ∘ f))"},{"name":"fin_succ_equiv'_zero","kind":"theorem","statement":"theorem fin_succ_equiv'_zero {n : ℕ} : fin_succ_equiv' 0 = fin_succ_equiv n","theorem":"{n : ℕ} : fin_succ_equiv' 0 = fin_succ_equiv n","args":"{n : ℕ}","doc_string":"The equiv version of `fin.pred_above_zero`.","type":"fin_succ_equiv' 0 = fin_succ_equiv n"},{"name":"free_group.of_injective","kind":"theorem","statement":"theorem free_group.of_injective {α : Type u} : function.injective free_group.of","theorem":"{α : Type u} : function.injective free_group.of","args":"{α : Type u}","doc_string":"The canonical injection from the type to the free group is an injection.","type":"function.injective free_group.of"},{"name":"padic_norm.padic_norm_p_lt_one","kind":"theorem","statement":"theorem padic_norm.padic_norm_p_lt_one {p : ℕ} (hp : 1 < p) : padic_norm p ↑p < 1","theorem":"{p : ℕ} (hp : 1 < p) : padic_norm p ↑p < 1","args":"{p : ℕ} (hp : 1 < p)","doc_string":"The p-adic norm of `p` is less than 1 if `1 < p`.  See also `padic_norm.padic_norm_p_lt_one_of_prime` for a version assuming `prime p`.","type":"padic_norm p ↑p < 1"},{"name":"is_chain.exists_max_chain","kind":"theorem","statement":"theorem is_chain.exists_max_chain {α : Type u_1} {r : α → α → Prop} {c : set α} (hc : is_chain r c) : ∃ (M : set α), is_max_chain r M ∧ c ⊆ M","theorem":"{α : Type u_1} {r : α → α → Prop} {c : set α} (hc : is_chain r c) : ∃ (M : set α), is_max_chain r M ∧ c ⊆ M","args":"{α : Type u_1} {r : α → α → Prop} {c : set α} (hc : is_chain r c)","doc_string":"Every chain is contained in a maximal chain. This generalizes Hausdorff's maximality principle.","type":"∃ (M : set α), is_max_chain r M ∧ c ⊆ M"},{"name":"category_theory.limits.has_finite_biproducts.of_has_finite_products","kind":"theorem","statement":"theorem category_theory.limits.has_finite_biproducts.of_has_finite_products {C : Type u} [category_theory.category C] [category_theory.preadditive C] [category_theory.limits.has_finite_products C] : category_theory.limits.has_finite_biproducts C","theorem":"{C : Type u} [category_theory.category C] [category_theory.preadditive C] [category_theory.limits.has_finite_products C] : category_theory.limits.has_finite_biproducts C","args":"{C : Type u} [category_theory.category C] [category_theory.preadditive C] [category_theory.limits.has_finite_products C]","doc_string":"A preadditive category with finite products has finite biproducts.","type":"category_theory.limits.has_finite_biproducts C"},{"name":"ordinal.principal_mul_iff_le_two_or_omega_opow_opow","kind":"theorem","statement":"theorem ordinal.principal_mul_iff_le_two_or_omega_opow_opow {o : ordinal} : ordinal.principal has_mul.mul o ↔ o ≤ 2 ∨ ∃ (a : ordinal), o = ordinal.omega ^ ordinal.omega ^ a","theorem":"{o : ordinal} : ordinal.principal has_mul.mul o ↔ o ≤ 2 ∨ ∃ (a : ordinal), o = ordinal.omega ^ ordinal.omega ^ a","args":"{o : ordinal}","doc_string":"The main characterization theorem for multiplicative principal ordinals.","type":"ordinal.principal has_mul.mul o ↔ o ≤ 2 ∨ ∃ (a : ordinal), o = ordinal.omega ^ ordinal.omega ^ a"},{"name":"function.semiconj.maps_to_fixed_pts","kind":"theorem","statement":"theorem function.semiconj.maps_to_fixed_pts {α : Type u} {β : Type v} {fa : α → α} {fb : β → β} {g : α → β} (h : function.semiconj g fa fb) : set.maps_to g (function.fixed_points fa) (function.fixed_points fb)","theorem":"{α : Type u} {β : Type v} {fa : α → α} {fb : β → β} {g : α → β} (h : function.semiconj g fa fb) : set.maps_to g (function.fixed_points fa) (function.fixed_points fb)","args":"{α : Type u} {β : Type v} {fa : α → α} {fb : β → β} {g : α → β} (h : function.semiconj g fa fb)","doc_string":" If `g` semiconjugates `fa` to `fb`, then it sends fixed points of `fa` to fixed points of `fb`.","type":"set.maps_to g (function.fixed_points fa) (function.fixed_points fb)"},{"name":"right.one_le_mul","kind":"theorem","statement":"theorem right.one_le_mul {α : Type u_1} [mul_one_class α] [preorder α] [covariant_class α α (function.swap has_mul.mul) has_le.le] {a b : α} (ha : 1 ≤ a) (hb : 1 ≤ b) : 1 ≤ a * b","theorem":"{α : Type u_1} [mul_one_class α] [preorder α] [covariant_class α α (function.swap has_mul.mul) has_le.le] {a b : α} (ha : 1 ≤ a) (hb : 1 ≤ b) : 1 ≤ a * b","args":"{α : Type u_1} [mul_one_class α] [preorder α] [covariant_class α α (function.swap has_mul.mul) has_le.le] {a b : α} (ha : 1 ≤ a) (hb : 1 ≤ b)","doc_string":" Assumes right covariance. The lemma assuming left covariance is `left.one_le_mul`.","type":"1 ≤ a * b"},{"name":"inv_le_of_inv_le'","kind":"theorem","statement":"theorem inv_le_of_inv_le' {α : Type u} [group α] [has_le α] [covariant_class α α has_mul.mul has_le.le] [covariant_class α α (function.swap has_mul.mul) has_le.le] {a b : α} : a⁻¹ ≤ b → b⁻¹ ≤ a","theorem":"{α : Type u} [group α] [has_le α] [covariant_class α α has_mul.mul has_le.le] [covariant_class α α (function.swap has_mul.mul) has_le.le] {a b : α} : a⁻¹ ≤ b → b⁻¹ ≤ a","args":"{α : Type u} [group α] [has_le α] [covariant_class α α has_mul.mul has_le.le] [covariant_class α α (function.swap has_mul.mul) has_le.le] {a b : α}","doc_string":"**Alias** of the forward direction of inv_le'`.","type":"a⁻¹ ≤ b → b⁻¹ ≤ a"},{"name":"vector.map_id","kind":"theorem","statement":"theorem vector.map_id {α : Type u_1} {n : ℕ} (v : vector α n) : vector.map id v = v","theorem":"{α : Type u_1} {n : ℕ} (v : vector α n) : vector.map id v = v","args":"{α : Type u_1} {n : ℕ} (v : vector α n)","doc_string":"Mapping under `id` does not change a vector.","type":"vector.map id v = v"},{"name":"is_submonoid.list_prod_mem","kind":"theorem","statement":"theorem is_submonoid.list_prod_mem {M : Type u_1} [monoid M] {s : set M} (hs : is_submonoid s) {l : list M} : (∀ (x : M), x ∈ l → x ∈ s) → l.prod ∈ s","theorem":"{M : Type u_1} [monoid M] {s : set M} (hs : is_submonoid s) {l : list M} : (∀ (x : M), x ∈ l → x ∈ s) → l.prod ∈ s","args":"{M : Type u_1} [monoid M] {s : set M} (hs : is_submonoid s) {l : list M}","doc_string":"The product of a list of elements of a submonoid is an element of the submonoid.","type":"(∀ (x : M), x ∈ l → x ∈ s) → l.prod ∈ s"},{"name":"is_group_hom.map_one","kind":"theorem","statement":"theorem is_group_hom.map_one {α : Type u} {β : Type v} [group α] [group β] {f : α → β} (hf : is_group_hom f) : f 1 = 1","theorem":"{α : Type u} {β : Type v} [group α] [group β] {f : α → β} (hf : is_group_hom f) : f 1 = 1","args":"{α : Type u} {β : Type v} [group α] [group β] {f : α → β} (hf : is_group_hom f)","doc_string":"A group homomorphism sends 1 to 1.","type":"f 1 = 1"},{"name":"nonneg_of_neg_nonpos","kind":"theorem","statement":"theorem nonneg_of_neg_nonpos {α : Type u} [add_group α] [has_le α] [covariant_class α α has_add.add has_le.le] {a : α} : -a ≤ 0 → 0 ≤ a","theorem":"{α : Type u} [add_group α] [has_le α] [covariant_class α α has_add.add has_le.le] {a : α} : -a ≤ 0 → 0 ≤ a","args":"{α : Type u} [add_group α] [has_le α] [covariant_class α α has_add.add has_le.le] {a : α}","doc_string":"**Alias** of the forward direction of left.inv_le_one_iff`.","type":"-a ≤ 0 → 0 ≤ a"},{"name":"add_subgroup.list_sum_mem","kind":"theorem","statement":"theorem add_subgroup.list_sum_mem {G : Type u_1} [add_group G] (K : add_subgroup G) {l : list G} : (∀ (x : G), x ∈ l → x ∈ K) → l.sum ∈ K","theorem":"{G : Type u_1} [add_group G] (K : add_subgroup G) {l : list G} : (∀ (x : G), x ∈ l → x ∈ K) → l.sum ∈ K","args":"{G : Type u_1} [add_group G] (K : add_subgroup G) {l : list G}","doc_string":"Sum of a list of elements in an `add_subgroup` is in the `add_subgroup`.","type":"(∀ (x : G), x ∈ l → x ∈ K) → l.sum ∈ K"},{"name":"category_theory.essentially_small_iff","kind":"theorem","statement":"theorem category_theory.essentially_small_iff (C : Type u) [category_theory.category C] : category_theory.essentially_small C ↔ small (category_theory.skeleton C) ∧ category_theory.locally_small C","theorem":"(C : Type u) [category_theory.category C] : category_theory.essentially_small C ↔ small (category_theory.skeleton C) ∧ category_theory.locally_small C","args":"(C : Type u) [category_theory.category C]","doc_string":"A category is essentially small if and only if the underlying type of its skeleton (i.e. the \"set\" of isomorphism classes) is small, and it is locally small.","type":"category_theory.essentially_small C ↔ small (category_theory.skeleton C) ∧ category_theory.locally_small C"},{"name":"lt_neg_add_of_add_lt","kind":"theorem","statement":"theorem lt_neg_add_of_add_lt {α : Type u} [add_group α] [has_lt α] [covariant_class α α has_add.add has_lt.lt] {a b c : α} : a + b < c → b < -a + c","theorem":"{α : Type u} [add_group α] [has_lt α] [covariant_class α α has_add.add has_lt.lt] {a b c : α} : a + b < c → b < -a + c","args":"{α : Type u} [add_group α] [has_lt α] [covariant_class α α has_add.add has_lt.lt] {a b c : α}","doc_string":"**Alias** of the reverse direction of lt_inv_mul_iff_mul_lt`.","type":"a + b < c → b < -a + c"},{"name":"btw_cyclic","kind":"theorem","statement":"theorem btw_cyclic {α : Type u_1} [circular_preorder α] {a b c : α} : has_btw.btw a b c ↔ has_btw.btw c a b","theorem":"{α : Type u_1} [circular_preorder α] {a b c : α} : has_btw.btw a b c ↔ has_btw.btw c a b","args":"{α : Type u_1} [circular_preorder α] {a b c : α}","doc_string":" The order of the `↔` has been chosen so that `rw btw_cyclic` cycles to the right while `rw ←btw_cyclic` cycles to the left (thus following the prepended arrow).","type":"has_btw.btw a b c ↔ has_btw.btw c a b"},{"name":"dihedral_group.order_of_r_one","kind":"theorem","statement":"theorem dihedral_group.order_of_r_one {n : ℕ} : order_of (dihedral_group.r 1) = n","theorem":"{n : ℕ} : order_of (dihedral_group.r 1) = n","args":"{n : ℕ}","doc_string":"If `0 < n`, then `r 1` has order `n`.","type":"order_of (dihedral_group.r 1) = n"},{"name":"function.surjective.nontrivial","kind":"theorem","statement":"theorem function.surjective.nontrivial {α : Type u_1} {β : Type u_2} [nontrivial β] {f : α → β} (hf : function.surjective f) : nontrivial α","theorem":"{α : Type u_1} {β : Type u_2} [nontrivial β] {f : α → β} (hf : function.surjective f) : nontrivial α","args":"{α : Type u_1} {β : Type u_2} [nontrivial β] {f : α → β} (hf : function.surjective f)","doc_string":"Pullback a `nontrivial` instance along a surjective function.","type":"nontrivial α"},{"name":"dense.closure","kind":"theorem","statement":"theorem dense.closure {α : Type u} [topological_space α] {s : set α} : dense s → dense (closure s)","theorem":"{α : Type u} [topological_space α] {s : set α} : dense s → dense (closure s)","args":"{α : Type u} [topological_space α] {s : set α}","doc_string":"**Alias** of the reverse direction of dense_closure`.","type":"dense s → dense (closure s)"},{"name":"finset.card_powerset","kind":"theorem","statement":"theorem finset.card_powerset {α : Type u_1} (s : finset α) : s.powerset.card = 2 ^ s.card","theorem":"{α : Type u_1} (s : finset α) : s.powerset.card = 2 ^ s.card","args":"{α : Type u_1} (s : finset α)","doc_string":"**Number of Subsets of a Set**","type":"s.powerset.card = 2 ^ s.card"},{"name":"is_unit.dvd","kind":"theorem","statement":"theorem is_unit.dvd {α : Type u_1} [monoid α] {a u : α} (hu : is_unit u) : u ∣ a","theorem":"{α : Type u_1} [monoid α] {a u : α} (hu : is_unit u) : u ∣ a","args":"{α : Type u_1} [monoid α] {a u : α} (hu : is_unit u)","doc_string":"Units of a monoid divide any element of the monoid.","type":"u ∣ a"},{"name":"is_square_zero","kind":"theorem","statement":"theorem is_square_zero (M : Type u_1) [monoid_with_zero M] : is_square 0","theorem":"(M : Type u_1) [monoid_with_zero M] : is_square 0","args":"(M : Type u_1) [monoid_with_zero M]","doc_string":"`0` is always a square (in a monoid with zero).","type":"is_square 0"},{"name":"category_theory.is_subterminal_of_mono_terminal_from","kind":"theorem","statement":"theorem category_theory.is_subterminal_of_mono_terminal_from {C : Type u₁} [category_theory.category C] {A : C} [category_theory.limits.has_terminal C] [category_theory.mono (category_theory.limits.terminal.from A)] : category_theory.is_subterminal A","theorem":"{C : Type u₁} [category_theory.category C] {A : C} [category_theory.limits.has_terminal C] [category_theory.mono (category_theory.limits.terminal.from A)] : category_theory.is_subterminal A","args":"{C : Type u₁} [category_theory.category C] {A : C} [category_theory.limits.has_terminal C] [category_theory.mono (category_theory.limits.terminal.from A)]","doc_string":"If the unique morphism from `A` to the terminal object is a monomorphism, `A` is subterminal. The converse of `is_subterminal.mono_terminal_from`.","type":"category_theory.is_subterminal A"},{"name":"real.cos_pi_div_three","kind":"theorem","statement":"theorem real.cos_pi_div_three  : real.cos (real.pi / 3) = 1 / 2","theorem":" : real.cos (real.pi / 3) = 1 / 2","args":"","doc_string":"The cosine of `π / 3` is `1 / 2`.","type":"real.cos (real.pi / 3) = 1 / 2"},{"name":"nat.pow_two_sub_pow_two","kind":"theorem","statement":"theorem nat.pow_two_sub_pow_two (a b : ℕ) : a ^ 2 - b ^ 2 = (a + b) * (a - b)","theorem":"(a b : ℕ) : a ^ 2 - b ^ 2 = (a + b) * (a - b)","args":"(a b : ℕ)","doc_string":"**Alias** of nat.sq_sub_sq`.","type":"a ^ 2 - b ^ 2 = (a + b) * (a - b)"},{"name":"function.injective.comap_cofinite_eq","kind":"theorem","statement":"theorem function.injective.comap_cofinite_eq {α : Type u_2} {β : Type u_3} {f : α → β} (hf : function.injective f) : filter.comap f filter.cofinite = filter.cofinite","theorem":"{α : Type u_2} {β : Type u_3} {f : α → β} (hf : function.injective f) : filter.comap f filter.cofinite = filter.cofinite","args":"{α : Type u_2} {β : Type u_3} {f : α → β} (hf : function.injective f)","doc_string":" The pullback of the `filter.cofinite` under an injective function is equal to `filter.cofinite`. See also `filter.comap_cofinite_le` and `function.injective.tendsto_cofinite`.","type":"filter.comap f filter.cofinite = filter.cofinite"},{"name":"add_submonoid.closure_eq","kind":"theorem","statement":"theorem add_submonoid.closure_eq {M : Type u_1} [add_zero_class M] (S : add_submonoid M) : add_submonoid.closure ↑S = S","theorem":"{M : Type u_1} [add_zero_class M] (S : add_submonoid M) : add_submonoid.closure ↑S = S","args":"{M : Type u_1} [add_zero_class M] (S : add_submonoid M)","doc_string":"Additive closure of an additive submonoid `S` equals `S`","type":"add_submonoid.closure ↑S = S"},{"name":"category_theory.limits.has_pullbacks_of_has_binary_products_of_has_equalizers","kind":"theorem","statement":"theorem category_theory.limits.has_pullbacks_of_has_binary_products_of_has_equalizers (C : Type u) [𝒞 : category_theory.category C] [category_theory.limits.has_binary_products C] [category_theory.limits.has_equalizers C] : category_theory.limits.has_pullbacks C","theorem":"(C : Type u) [𝒞 : category_theory.category C] [category_theory.limits.has_binary_products C] [category_theory.limits.has_equalizers C] : category_theory.limits.has_pullbacks C","args":"(C : Type u) [𝒞 : category_theory.category C] [category_theory.limits.has_binary_products C] [category_theory.limits.has_equalizers C]","doc_string":"If a category has all binary products and all equalizers, then it also has all pullbacks.    As usual, this is not an instance, since there may be a more direct way to construct    pullbacks.","type":"category_theory.limits.has_pullbacks C"},{"name":"category_theory.limits.has_limits_of_size_shrink","kind":"theorem","statement":"theorem category_theory.limits.has_limits_of_size_shrink (C : Type u) [category_theory.category C] [category_theory.limits.has_limits_of_size C] : category_theory.limits.has_limits_of_size C","theorem":"(C : Type u) [category_theory.category C] [category_theory.limits.has_limits_of_size C] : category_theory.limits.has_limits_of_size C","args":"(C : Type u) [category_theory.category C] [category_theory.limits.has_limits_of_size C]","doc_string":"`has_limits_of_size_shrink.{v u} C` tries to obtain `has_limits_of_size.{v u} C` from some other `has_limits_of_size C`.","type":"category_theory.limits.has_limits_of_size C"},{"name":"lt_tsub_iff_right","kind":"theorem","statement":"theorem lt_tsub_iff_right {α : Type u_1} {a b c : α} [linear_order α] [add_comm_semigroup α] [has_sub α] [has_ordered_sub α] : a < b - c ↔ a + c < b","theorem":"{α : Type u_1} {a b c : α} [linear_order α] [add_comm_semigroup α] [has_sub α] [has_ordered_sub α] : a < b - c ↔ a + c < b","args":"{α : Type u_1} {a b c : α} [linear_order α] [add_comm_semigroup α] [has_sub α] [has_ordered_sub α]","doc_string":"See `lt_tsub_iff_right_of_le` for a weaker statement in a partial order.","type":"a < b - c ↔ a + c < b"},{"name":"has_lt.lt.le","kind":"theorem","statement":"theorem has_lt.lt.le {α : Type u} [preorder α] {a b : α} : a < b → a ≤ b","theorem":"{α : Type u} [preorder α] {a b : α} : a < b → a ≤ b","args":"{α : Type u} [preorder α] {a b : α}","doc_string":"**Alias** of le_of_lt`.","type":"a < b → a ≤ b"},{"name":"is_add_regular_of_cancel_add_monoid","kind":"theorem","statement":"theorem is_add_regular_of_cancel_add_monoid {R : Type u_1} [add_cancel_monoid R] (g : R) : is_add_regular g","theorem":"{R : Type u_1} [add_cancel_monoid R] (g : R) : is_add_regular g","args":"{R : Type u_1} [add_cancel_monoid R] (g : R)","doc_string":"Elements of an add cancel monoid are regular.  Add cancel semigroups do not appear to exist.","type":"is_add_regular g"},{"name":"zsmul_right_injective","kind":"theorem","statement":"theorem zsmul_right_injective {α : Type u_1} [linear_ordered_add_comm_group α] {n : ℤ} (hn : n ≠ 0) : function.injective (λ (_x : α), n • _x)","theorem":"{α : Type u_1} [linear_ordered_add_comm_group α] {n : ℤ} (hn : n ≠ 0) : function.injective (λ (_x : α), n • _x)","args":"{α : Type u_1} [linear_ordered_add_comm_group α] {n : ℤ} (hn : n ≠ 0)","doc_string":"See also `smul_right_injective`. TODO: provide a `no_zero_smul_divisors` instance. We can't do that here because importing that definition would create import cycles.","type":"function.injective (λ (_x : α), n • _x)"},{"name":"right.add_neg_of_nonpos_of_neg","kind":"theorem","statement":"theorem right.add_neg_of_nonpos_of_neg {α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α (function.swap has_add.add) has_le.le] {a b : α} (ha : a ≤ 0) (hb : b < 0) : a + b < 0","theorem":"{α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α (function.swap has_add.add) has_le.le] {a b : α} (ha : a ≤ 0) (hb : b < 0) : a + b < 0","args":"{α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α (function.swap has_add.add) has_le.le] {a b : α} (ha : a ≤ 0) (hb : b < 0)","doc_string":"Assumes right covariance. The lemma assuming left covariance is `left.add_neg_of_nonpos_of_neg`.","type":"a + b < 0"},{"name":"inv_of_one_lt_inv","kind":"theorem","statement":"theorem inv_of_one_lt_inv {α : Type u} [group α] [has_lt α] [covariant_class α α has_mul.mul has_lt.lt] {a : α} : 1 < a⁻¹ → a < 1","theorem":"{α : Type u} [group α] [has_lt α] [covariant_class α α has_mul.mul has_lt.lt] {a : α} : 1 < a⁻¹ → a < 1","args":"{α : Type u} [group α] [has_lt α] [covariant_class α α has_mul.mul has_lt.lt] {a : α}","doc_string":"**Alias** of the forward direction of left.one_lt_inv_iff`.","type":"1 < a⁻¹ → a < 1"},{"name":"directed_on.directed_coe","kind":"theorem","statement":"theorem directed_on.directed_coe {α : Type u} {r : α → α → Prop} {s : set α} : directed_on r s → directed r coe","theorem":"{α : Type u} {r : α → α → Prop} {s : set α} : directed_on r s → directed r coe","args":"{α : Type u} {r : α → α → Prop} {s : set α}","doc_string":"**Alias** of the forward direction of directed_on_iff_directed`.","type":"directed_on r s → directed r coe"},{"name":"is_right_regular_zero_iff_subsingleton","kind":"theorem","statement":"theorem is_right_regular_zero_iff_subsingleton {R : Type u_1} [mul_zero_class R] : is_right_regular 0 ↔ subsingleton R","theorem":"{R : Type u_1} [mul_zero_class R] : is_right_regular 0 ↔ subsingleton R","args":"{R : Type u_1} [mul_zero_class R]","doc_string":"The element `0` is right-regular if and only if `R` is trivial.","type":"is_right_regular 0 ↔ subsingleton R"},{"name":"left.add_neg'","kind":"theorem","statement":"theorem left.add_neg' {α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α has_add.add has_le.le] {a b : α} (ha : a < 0) (hb : b < 0) : a + b < 0","theorem":"{α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α has_add.add has_le.le] {a b : α} (ha : a < 0) (hb : b < 0) : a + b < 0","args":"{α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α has_add.add has_le.le] {a b : α} (ha : a < 0) (hb : b < 0)","doc_string":"Assumes left covariance. The lemma assuming right covariance is `right.add_neg'`.","type":"a + b < 0"},{"name":"right.one_lt_mul","kind":"theorem","statement":"theorem right.one_lt_mul {α : Type u_1} [mul_one_class α] [preorder α] [covariant_class α α (function.swap has_mul.mul) has_lt.lt] {a b : α} (ha : 1 < a) (hb : 1 < b) : 1 < a * b","theorem":"{α : Type u_1} [mul_one_class α] [preorder α] [covariant_class α α (function.swap has_mul.mul) has_lt.lt] {a b : α} (ha : 1 < a) (hb : 1 < b) : 1 < a * b","args":"{α : Type u_1} [mul_one_class α] [preorder α] [covariant_class α α (function.swap has_mul.mul) has_lt.lt] {a b : α} (ha : 1 < a) (hb : 1 < b)","doc_string":" Assumes right covariance. The lemma assuming left covariance is `left.one_lt_mul`.","type":"1 < a * b"},{"name":"left.add_neg_of_neg_of_nonpos","kind":"theorem","statement":"theorem left.add_neg_of_neg_of_nonpos {α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α has_add.add has_le.le] {a b : α} (ha : a < 0) (hb : b ≤ 0) : a + b < 0","theorem":"{α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α has_add.add has_le.le] {a b : α} (ha : a < 0) (hb : b ≤ 0) : a + b < 0","args":"{α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α has_add.add has_le.le] {a b : α} (ha : a < 0) (hb : b ≤ 0)","doc_string":"Assumes left covariance. The lemma assuming right covariance is `right.add_neg_of_neg_of_nonpos`.","type":"a + b < 0"},{"name":"category_theory.is_subterminal_of_is_iso_diag","kind":"theorem","statement":"theorem category_theory.is_subterminal_of_is_iso_diag {C : Type u₁} [category_theory.category C] {A : C} [category_theory.limits.has_binary_product A A] [category_theory.is_iso (category_theory.limits.diag A)] : category_theory.is_subterminal A","theorem":"{C : Type u₁} [category_theory.category C] {A : C} [category_theory.limits.has_binary_product A A] [category_theory.is_iso (category_theory.limits.diag A)] : category_theory.is_subterminal A","args":"{C : Type u₁} [category_theory.category C] {A : C} [category_theory.limits.has_binary_product A A] [category_theory.is_iso (category_theory.limits.diag A)]","doc_string":"If the diagonal morphism of `A` is an isomorphism, then it is subterminal. The converse of `is_subterminal.is_iso_diag`.","type":"category_theory.is_subterminal A"},{"name":"category_theory.is_subterminal.is_iso_diag","kind":"theorem","statement":"theorem category_theory.is_subterminal.is_iso_diag {C : Type u₁} [category_theory.category C] {A : C} (hA : category_theory.is_subterminal A) [category_theory.limits.has_binary_product A A] : category_theory.is_iso (category_theory.limits.diag A)","theorem":"{C : Type u₁} [category_theory.category C] {A : C} (hA : category_theory.is_subterminal A) [category_theory.limits.has_binary_product A A] : category_theory.is_iso (category_theory.limits.diag A)","args":"{C : Type u₁} [category_theory.category C] {A : C} (hA : category_theory.is_subterminal A) [category_theory.limits.has_binary_product A A]","doc_string":"If `A` is subterminal, its diagonal morphism is an isomorphism. The converse of `is_subterminal_of_is_iso_diag`.","type":"category_theory.is_iso (category_theory.limits.diag A)"},{"name":"one_lt_inv'","kind":"theorem","statement":"theorem one_lt_inv' {α : Type u} [group α] [has_lt α] [covariant_class α α has_mul.mul has_lt.lt] {a : α} : 1 < a⁻¹ ↔ a < 1","theorem":"{α : Type u} [group α] [has_lt α] [covariant_class α α has_mul.mul has_lt.lt] {a : α} : 1 < a⁻¹ ↔ a < 1","args":"{α : Type u} [group α] [has_lt α] [covariant_class α α has_mul.mul has_lt.lt] {a : α}","doc_string":"**Alias** of left.one_lt_inv_iff`.","type":"1 < a⁻¹ ↔ a < 1"},{"name":"irrational_sqrt_two","kind":"theorem","statement":"theorem irrational_sqrt_two  : irrational (real.sqrt 2)","theorem":" : irrational (real.sqrt 2)","args":"","doc_string":"**Irrationality of the Square Root of 2**","type":"irrational (real.sqrt 2)"},{"name":"filter.Coprod_cofinite","kind":"theorem","statement":"theorem filter.Coprod_cofinite {ι : Type u_1} {α : ι → Type u_2} [fintype ι] : filter.Coprod (λ (i : ι), filter.cofinite) = filter.cofinite","theorem":"{ι : Type u_1} {α : ι → Type u_2} [fintype ι] : filter.Coprod (λ (i : ι), filter.cofinite) = filter.cofinite","args":"{ι : Type u_1} {α : ι → Type u_2} [fintype ι]","doc_string":"Finite product of finite sets is finite","type":"filter.Coprod (λ (i : ι), filter.cofinite) = filter.cofinite"},{"name":"continuous_map.compact_open_eq_compact_convergence","kind":"theorem","statement":"theorem continuous_map.compact_open_eq_compact_convergence {α : Type u₁} {β : Type u₂} [topological_space α] [uniform_space β] : continuous_map.compact_open = continuous_map.compact_convergence_topology","theorem":"{α : Type u₁} {β : Type u₂} [topological_space α] [uniform_space β] : continuous_map.compact_open = continuous_map.compact_convergence_topology","args":"{α : Type u₁} {β : Type u₂} [topological_space α] [uniform_space β]","doc_string":"The compact-open topology is equal to the compact-convergence topology.","type":"continuous_map.compact_open = continuous_map.compact_convergence_topology"},{"name":"monotone.ne_of_lt_of_lt_int","kind":"theorem","statement":"theorem monotone.ne_of_lt_of_lt_int {α : Type u} [preorder α] {f : ℤ → α} (hf : monotone f) (n : ℤ) {x : α} (h1 : f n < x) (h2 : x < f (n + 1)) (a : ℤ) : f a ≠ x","theorem":"{α : Type u} [preorder α] {f : ℤ → α} (hf : monotone f) (n : ℤ) {x : α} (h1 : f n < x) (h2 : x < f (n + 1)) (a : ℤ) : f a ≠ x","args":"{α : Type u} [preorder α] {f : ℤ → α} (hf : monotone f) (n : ℤ) {x : α} (h1 : f n < x) (h2 : x < f (n + 1)) (a : ℤ)","doc_string":"If `f` is a monotone function from `ℤ` to a preorder and `x` lies between `f n` and  `f (n + 1)`, then `x` doesn't lie in the range of `f`.","type":"f a ≠ x"},{"name":"convex_independent.injective","kind":"theorem","statement":"theorem convex_independent.injective {𝕜 : Type u_1} {E : Type u_2} {ι : Type u_3} [ordered_semiring 𝕜] [add_comm_group E] [module 𝕜 E] {p : ι → E} (hc : convex_independent 𝕜 p) : function.injective p","theorem":"{𝕜 : Type u_1} {E : Type u_2} {ι : Type u_3} [ordered_semiring 𝕜] [add_comm_group E] [module 𝕜 E] {p : ι → E} (hc : convex_independent 𝕜 p) : function.injective p","args":"{𝕜 : Type u_1} {E : Type u_2} {ι : Type u_3} [ordered_semiring 𝕜] [add_comm_group E] [module 𝕜 E] {p : ι → E} (hc : convex_independent 𝕜 p)","doc_string":"A convex independent family is injective.","type":"function.injective p"},{"name":"function.commute.right_bij_on_fixed_pts_comp","kind":"theorem","statement":"theorem function.commute.right_bij_on_fixed_pts_comp {α : Type u} {f g : α → α} (h : function.commute f g) : set.bij_on g (function.fixed_points (f ∘ g)) (function.fixed_points (f ∘ g))","theorem":"{α : Type u} {f g : α → α} (h : function.commute f g) : set.bij_on g (function.fixed_points (f ∘ g)) (function.fixed_points (f ∘ g))","args":"{α : Type u} {f g : α → α} (h : function.commute f g)","doc_string":" If self-maps `f` and `g` commute, then `g` is bijective on the set of fixed points of `f ∘ g`. This is a particular case of `function.bij_on_fixed_pts_comp`.","type":"set.bij_on g (function.fixed_points (f ∘ g)) (function.fixed_points (f ∘ g))"},{"name":"three_pos","kind":"theorem","statement":"theorem three_pos {α : Type u} [ordered_semiring α] [nontrivial α] : 0 < 3","theorem":"{α : Type u} [ordered_semiring α] [nontrivial α] : 0 < 3","args":"{α : Type u} [ordered_semiring α] [nontrivial α]","doc_string":"**Alias** of zero_lt_three`.","type":"0 < 3"},{"name":"finset.max'_singleton","kind":"theorem","statement":"theorem finset.max'_singleton {α : Type u_1} [linear_order α] (a : α) : {a}.max' _ = a","theorem":"{α : Type u_1} [linear_order α] (a : α) : {a}.max' _ = a","args":"{α : Type u_1} [linear_order α] (a : α)","doc_string":"`{a}.max' _` is `a`.","type":"{a}.max' _ = a"},{"name":"add_is_add_left_regular_iff","kind":"theorem","statement":"theorem add_is_add_left_regular_iff {R : Type u_1} {a : R} [add_semigroup R] (b : R) (ha : is_add_left_regular a) : is_add_left_regular (a + b) ↔ is_add_left_regular b","theorem":"{R : Type u_1} {a : R} [add_semigroup R] (b : R) (ha : is_add_left_regular a) : is_add_left_regular (a + b) ↔ is_add_left_regular b","args":"{R : Type u_1} {a : R} [add_semigroup R] (b : R) (ha : is_add_left_regular a)","doc_string":"An element is add-left-regular if and only if adding to it on the left a add-left-regular element is add-left-regular.","type":"is_add_left_regular (a + b) ↔ is_add_left_regular b"},{"name":"continuous_map.continuous_uncurry","kind":"theorem","statement":"theorem continuous_map.continuous_uncurry {α : Type u_1} {β : Type u_2} {γ : Type u_3} [topological_space α] [topological_space β] [topological_space γ] [locally_compact_space α] [locally_compact_space β] : continuous continuous_map.uncurry","theorem":"{α : Type u_1} {β : Type u_2} {γ : Type u_3} [topological_space α] [topological_space β] [topological_space γ] [locally_compact_space α] [locally_compact_space β] : continuous continuous_map.uncurry","args":"{α : Type u_1} {β : Type u_2} {γ : Type u_3} [topological_space α] [topological_space β] [topological_space γ] [locally_compact_space α] [locally_compact_space β]","doc_string":"The uncurrying process is a continuous map between function spaces.","type":"continuous continuous_map.uncurry"},{"name":"multiples.add_mem","kind":"theorem","statement":"theorem multiples.add_mem {M : Type u_1} [add_monoid M] {x y z : M} : y ∈ multiples x → z ∈ multiples x → y + z ∈ multiples x","theorem":"{M : Type u_1} [add_monoid M] {x y z : M} : y ∈ multiples x → z ∈ multiples x → y + z ∈ multiples x","args":"{M : Type u_1} [add_monoid M] {x y z : M}","doc_string":"The set of natural number multiples of an element of an `add_monoid` is closed under addition.","type":"y ∈ multiples x → z ∈ multiples x → y + z ∈ multiples x"},{"name":"left.one_le_inv_iff","kind":"theorem","statement":"theorem left.one_le_inv_iff {α : Type u} [group α] [has_le α] [covariant_class α α has_mul.mul has_le.le] {a : α} : 1 ≤ a⁻¹ ↔ a ≤ 1","theorem":"{α : Type u} [group α] [has_le α] [covariant_class α α has_mul.mul has_le.le] {a : α} : 1 ≤ a⁻¹ ↔ a ≤ 1","args":"{α : Type u} [group α] [has_le α] [covariant_class α α has_mul.mul has_le.le] {a : α}","doc_string":"Uses `left` co(ntra)variant.","type":"1 ≤ a⁻¹ ↔ a ≤ 1"},{"name":"nat.squarefree_mul","kind":"theorem","statement":"theorem nat.squarefree_mul {m n : ℕ} (hmn : m.coprime n) : squarefree (m * n) ↔ squarefree m ∧ squarefree n","theorem":"{m n : ℕ} (hmn : m.coprime n) : squarefree (m * n) ↔ squarefree m ∧ squarefree n","args":"{m n : ℕ} (hmn : m.coprime n)","doc_string":" `squarefree` is multiplicative. Note that the → direction does not require `hmn` and generalizes to arbitrary commutative monoids. See `squarefree.of_mul_left` and `squarefree.of_mul_right` above for auxiliary lemmas.","type":"squarefree (m * n) ↔ squarefree m ∧ squarefree n"},{"name":"category_theory.limits.has_finite_coproducts_of_has_coproducts","kind":"theorem","statement":"theorem category_theory.limits.has_finite_coproducts_of_has_coproducts (C : Type u) [category_theory.category C] [category_theory.limits.has_coproducts C] : category_theory.limits.has_finite_coproducts C","theorem":"(C : Type u) [category_theory.category C] [category_theory.limits.has_coproducts C] : category_theory.limits.has_finite_coproducts C","args":"(C : Type u) [category_theory.category C] [category_theory.limits.has_coproducts C]","doc_string":"If a category has all coproducts then in particular it has finite coproducts.","type":"category_theory.limits.has_finite_coproducts C"},{"name":"complete_space_of_is_complete_univ","kind":"theorem","statement":"theorem complete_space_of_is_complete_univ {α : Type u} [uniform_space α] (h : is_complete set.univ) : complete_space α","theorem":"{α : Type u} [uniform_space α] (h : is_complete set.univ) : complete_space α","args":"{α : Type u} [uniform_space α] (h : is_complete set.univ)","doc_string":"If `univ` is complete, the space is a complete space","type":"complete_space α"},{"name":"multiset.Ico_eq_zero","kind":"theorem","statement":"theorem multiset.Ico_eq_zero {α : Type u_1} [preorder α] [locally_finite_order α] {a b : α} : ¬a < b → multiset.Ico a b = 0","theorem":"{α : Type u_1} [preorder α] [locally_finite_order α] {a b : α} : ¬a < b → multiset.Ico a b = 0","args":"{α : Type u_1} [preorder α] [locally_finite_order α] {a b : α}","doc_string":"**Alias** of the reverse direction of multiset.Ico_eq_zero_iff`.","type":"¬a < b → multiset.Ico a b = 0"},{"name":"padic_val_rat.finite_int_prime_iff","kind":"theorem","statement":"theorem padic_val_rat.finite_int_prime_iff {p : ℕ} [p_prime : fact (nat.prime p)] {a : ℤ} : multiplicity.finite ↑p a ↔ a ≠ 0","theorem":"{p : ℕ} [p_prime : fact (nat.prime p)] {a : ℤ} : multiplicity.finite ↑p a ↔ a ≠ 0","args":"{p : ℕ} [p_prime : fact (nat.prime p)] {a : ℤ}","doc_string":"The multiplicity of `p : ℕ` in `a : ℤ` is finite exactly when `a ≠ 0`.","type":"multiplicity.finite ↑p a ↔ a ≠ 0"},{"name":"matrix.is_unit_iff_is_unit_det","kind":"theorem","statement":"theorem matrix.is_unit_iff_is_unit_det {n : Type u'} {α : Type v} [fintype n] [decidable_eq n] [comm_ring α] (A : matrix n n α) : is_unit A ↔ is_unit A.det","theorem":"{n : Type u'} {α : Type v} [fintype n] [decidable_eq n] [comm_ring α] (A : matrix n n α) : is_unit A ↔ is_unit A.det","args":"{n : Type u'} {α : Type v} [fintype n] [decidable_eq n] [comm_ring α] (A : matrix n n α)","doc_string":"When lowered to a prop, `matrix.invertible_equiv_det_invertible` forms an `iff`.","type":"is_unit A ↔ is_unit A.det"},{"name":"function.cantor_injective","kind":"theorem","statement":"theorem function.cantor_injective {α : Type u_1} (f : set α → α) : ¬function.injective f","theorem":"{α : Type u_1} (f : set α → α) : ¬function.injective f","args":"{α : Type u_1} (f : set α → α)","doc_string":" **Cantor's diagonal argument** implies that there are no injective functions from `set α` to `α`.","type":"¬function.injective f"},{"name":"order.lt_succ_of_not_is_max","kind":"theorem","statement":"theorem order.lt_succ_of_not_is_max {α : Type u_1} [preorder α] [succ_order α] {a : α} : ¬is_max a → a < order.succ a","theorem":"{α : Type u_1} [preorder α] [succ_order α] {a : α} : ¬is_max a → a < order.succ a","args":"{α : Type u_1} [preorder α] [succ_order α] {a : α}","doc_string":"**Alias** of the reverse direction of order.lt_succ_iff_not_is_max`.","type":"¬is_max a → a < order.succ a"},{"name":"add_order_of_pos","kind":"theorem","statement":"theorem add_order_of_pos {G : Type u} [fintype G] [add_left_cancel_monoid G] (x : G) : 0 < add_order_of x","theorem":"{G : Type u} [fintype G] [add_left_cancel_monoid G] (x : G) : 0 < add_order_of x","args":"{G : Type u} [fintype G] [add_left_cancel_monoid G] (x : G)","doc_string":"This is the same as `add_order_of_pos' but with one fewer explicit assumption since this is   automatic in case of a finite cancellative additive monoid.","type":"0 < add_order_of x"},{"name":"right.add_nonpos","kind":"theorem","statement":"theorem right.add_nonpos {α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α (function.swap has_add.add) has_le.le] {a b : α} (ha : a ≤ 0) (hb : b ≤ 0) : a + b ≤ 0","theorem":"{α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α (function.swap has_add.add) has_le.le] {a b : α} (ha : a ≤ 0) (hb : b ≤ 0) : a + b ≤ 0","args":"{α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α (function.swap has_add.add) has_le.le] {a b : α} (ha : a ≤ 0) (hb : b ≤ 0)","doc_string":"Assumes right covariance. The lemma assuming left covariance is `left.add_nonpos`.","type":"a + b ≤ 0"},{"name":"subsemigroup.subset_closure","kind":"theorem","statement":"theorem subsemigroup.subset_closure {M : Type u_1} [has_mul M] {s : set M} : s ⊆ ↑(subsemigroup.closure s)","theorem":"{M : Type u_1} [has_mul M] {s : set M} : s ⊆ ↑(subsemigroup.closure s)","args":"{M : Type u_1} [has_mul M] {s : set M}","doc_string":"The subsemigroup generated by a set includes the set.","type":"s ⊆ ↑(subsemigroup.closure s)"},{"name":"padic_val_rat.zero","kind":"theorem","statement":"theorem padic_val_rat.zero (m : ℕ) : padic_val_rat m 0 = 0","theorem":"(m : ℕ) : padic_val_rat m 0 = 0","args":"(m : ℕ)","doc_string":"`padic_val_rat p 0` is 0 for any `p`.","type":"padic_val_rat m 0 = 0"},{"name":"add_con.coe_add","kind":"theorem","statement":"theorem add_con.coe_add {M : Type u_1} [has_add M] {c : add_con M} (x y : M) : ↑(x + y) = ↑x + ↑y","theorem":"{M : Type u_1} [has_add M] {c : add_con M} (x y : M) : ↑(x + y) = ↑x + ↑y","args":"{M : Type u_1} [has_add M] {c : add_con M} (x y : M)","doc_string":"The coercion to the quotient of an additive congruence relation commutes with addition (by definition).","type":"↑(x + y) = ↑x + ↑y"},{"name":"subtype.exists'","kind":"theorem","statement":"theorem subtype.exists' {α : Sort u_1} {p : α → Prop} {q : Π (x : α), p x → Prop} : (∃ (x : α) (h : p x), q x h) ↔ ∃ (x : {a // p a}), q ↑x _","theorem":"{α : Sort u_1} {p : α → Prop} {q : Π (x : α), p x → Prop} : (∃ (x : α) (h : p x), q x h) ↔ ∃ (x : {a // p a}), q ↑x _","args":"{α : Sort u_1} {p : α → Prop} {q : Π (x : α), p x → Prop}","doc_string":"An alternative version of `subtype.exists`. This one is useful if Lean cannot figure out `q`  when using `subtype.exists` from right to left.","type":"(∃ (x : α) (h : p x), q x h) ↔ ∃ (x : {a // p a}), q ↑x _"},{"name":"is_preconnected.subset_closure","kind":"theorem","statement":"theorem is_preconnected.subset_closure {α : Type u} [topological_space α] {s t : set α} (H : is_preconnected s) (Kst : s ⊆ t) (Ktcs : t ⊆ closure s) : is_preconnected t","theorem":"{α : Type u} [topological_space α] {s t : set α} (H : is_preconnected s) (Kst : s ⊆ t) (Ktcs : t ⊆ closure s) : is_preconnected t","args":"{α : Type u} [topological_space α] {s t : set α} (H : is_preconnected s) (Kst : s ⊆ t) (Ktcs : t ⊆ closure s)","doc_string":" Theorem of bark and tree : if a set is within a (pre)connected set and its closure, then it is (pre)connected as well.","type":"is_preconnected t"},{"name":"is_add_group_hom.to_is_add_monoid_hom","kind":"theorem","statement":"theorem is_add_group_hom.to_is_add_monoid_hom {α : Type u} {β : Type v} [add_group α] [add_group β] {f : α → β} (hf : is_add_group_hom f) : is_add_monoid_hom f","theorem":"{α : Type u} {β : Type v} [add_group α] [add_group β] {f : α → β} (hf : is_add_group_hom f) : is_add_monoid_hom f","args":"{α : Type u} {β : Type v} [add_group α] [add_group β] {f : α → β} (hf : is_add_group_hom f)","doc_string":"An additive group homomorphism is an additive monoid homomorphism.","type":"is_add_monoid_hom f"},{"name":"real.coe_fib_eq'","kind":"theorem","statement":"theorem real.coe_fib_eq'  : (λ (n : ℕ), ↑(nat.fib n)) = λ (n : ℕ), (golden_ratio ^ n - golden_conj ^ n) / real.sqrt 5","theorem":" : (λ (n : ℕ), ↑(nat.fib n)) = λ (n : ℕ), (golden_ratio ^ n - golden_conj ^ n) / real.sqrt 5","args":"","doc_string":"Binet's formula as a function equality.","type":"(λ (n : ℕ), ↑(nat.fib n)) = λ (n : ℕ), (golden_ratio ^ n - golden_conj ^ n) / real.sqrt 5"},{"name":"inducing.is_open_map","kind":"theorem","statement":"theorem inducing.is_open_map {α : Type u_1} {β : Type u_2} [topological_space α] [topological_space β] {f : α → β} (hi : inducing f) (ho : is_open (set.range f)) : is_open_map f","theorem":"{α : Type u_1} {β : Type u_2} [topological_space α] [topological_space β] {f : α → β} (hi : inducing f) (ho : is_open (set.range f)) : is_open_map f","args":"{α : Type u_1} {β : Type u_2} [topological_space α] [topological_space β] {f : α → β} (hi : inducing f) (ho : is_open (set.range f))","doc_string":"An inducing map with an open range is an open map.","type":"is_open_map f"},{"name":"nat.fib_add_two_strict_mono","kind":"theorem","statement":"theorem nat.fib_add_two_strict_mono  : strict_mono (λ (n : ℕ), nat.fib (n + 2))","theorem":" : strict_mono (λ (n : ℕ), nat.fib (n + 2))","args":"","doc_string":"`fib (n + 2)` is strictly monotone.","type":"strict_mono (λ (n : ℕ), nat.fib (n + 2))"},{"name":"finset.mem_powerset_len","kind":"theorem","statement":"theorem finset.mem_powerset_len {α : Type u_1} {n : ℕ} {s t : finset α} : s ∈ finset.powerset_len n t ↔ s ⊆ t ∧ s.card = n","theorem":"{α : Type u_1} {n : ℕ} {s t : finset α} : s ∈ finset.powerset_len n t ↔ s ⊆ t ∧ s.card = n","args":"{α : Type u_1} {n : ℕ} {s t : finset α}","doc_string":"**Formula for the Number of Combinations**","type":"s ∈ finset.powerset_len n t ↔ s ⊆ t ∧ s.card = n"},{"name":"add_subgroup.sub_mem","kind":"theorem","statement":"theorem add_subgroup.sub_mem {G : Type u_1} [add_group G] (H : add_subgroup G) {x y : G} (hx : x ∈ H) (hy : y ∈ H) : x - y ∈ H","theorem":"{G : Type u_1} [add_group G] (H : add_subgroup G) {x y : G} (hx : x ∈ H) (hy : y ∈ H) : x - y ∈ H","args":"{G : Type u_1} [add_group G] (H : add_subgroup G) {x y : G} (hx : x ∈ H) (hy : y ∈ H)","doc_string":"An `add_subgroup` is closed under subtraction.","type":"x - y ∈ H"},{"name":"order_bot.bdd_below","kind":"theorem","statement":"theorem order_bot.bdd_below {γ : Type w} [preorder γ] [order_bot γ] (s : set γ) : bdd_below s","theorem":"{γ : Type w} [preorder γ] [order_bot γ] (s : set γ) : bdd_below s","args":"{γ : Type w} [preorder γ] [order_bot γ] (s : set γ)","doc_string":"When there is a global minimum, every set is bounded below.","type":"bdd_below s"},{"name":"subsingleton_of_zero_eq_one","kind":"theorem","statement":"theorem subsingleton_of_zero_eq_one {M₀ : Type u_1} [mul_zero_one_class M₀] : 0 = 1 → subsingleton M₀","theorem":"{M₀ : Type u_1} [mul_zero_one_class M₀] : 0 = 1 → subsingleton M₀","args":"{M₀ : Type u_1} [mul_zero_one_class M₀]","doc_string":"**Alias** of the forward direction of subsingleton_iff_zero_eq_one`.","type":"0 = 1 → subsingleton M₀"},{"name":"nat.even_pow","kind":"theorem","statement":"theorem nat.even_pow {m n : ℕ} : even (m ^ n) ↔ even m ∧ n ≠ 0","theorem":"{m n : ℕ} : even (m ^ n) ↔ even m ∧ n ≠ 0","args":"{m n : ℕ}","doc_string":" If `m` and `n` are natural numbers, then the natural number `m^n` is even if and only if `m` is even and `n` is positive.","type":"even (m ^ n) ↔ even m ∧ n ≠ 0"},{"name":"left.inv_le_one_iff","kind":"theorem","statement":"theorem left.inv_le_one_iff {α : Type u} [group α] [has_le α] [covariant_class α α has_mul.mul has_le.le] {a : α} : a⁻¹ ≤ 1 ↔ 1 ≤ a","theorem":"{α : Type u} [group α] [has_le α] [covariant_class α α has_mul.mul has_le.le] {a : α} : a⁻¹ ≤ 1 ↔ 1 ≤ a","args":"{α : Type u} [group α] [has_le α] [covariant_class α α has_mul.mul has_le.le] {a : α}","doc_string":"Uses `left` co(ntra)variant.","type":"a⁻¹ ≤ 1 ↔ 1 ≤ a"},{"name":"left.add_neg_of_nonpos_of_neg","kind":"theorem","statement":"theorem left.add_neg_of_nonpos_of_neg {α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α has_add.add has_lt.lt] {a b : α} (ha : a ≤ 0) (hb : b < 0) : a + b < 0","theorem":"{α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α has_add.add has_lt.lt] {a b : α} (ha : a ≤ 0) (hb : b < 0) : a + b < 0","args":"{α : Type u_1} [add_zero_class α] [preorder α] [covariant_class α α has_add.add has_lt.lt] {a b : α} (ha : a ≤ 0) (hb : b < 0)","doc_string":"Assumes left covariance. The lemma assuming right covariance is `right.add_neg_of_nonpos_of_neg`.","type":"a + b < 0"},{"name":"matrix.det_unique","kind":"theorem","statement":"theorem matrix.det_unique {R : Type v} [comm_ring R] {n : Type u_1} [unique n] [decidable_eq n] [fintype n] (A : matrix n n R) : A.det = A inhabited.default inhabited.default","theorem":"{R : Type v} [comm_ring R] {n : Type u_1} [unique n] [decidable_eq n] [fintype n] (A : matrix n n R) : A.det = A inhabited.default inhabited.default","args":"{R : Type v} [comm_ring R] {n : Type u_1} [unique n] [decidable_eq n] [fintype n] (A : matrix n n R)","doc_string":" If `n` has only one element, the determinant of an `n` by `n` matrix is just that element. Although `unique` implies `decidable_eq` and `fintype`, the instances might not be syntactically equal. Thus, we need to fill in the args explicitly.","type":"A.det = A inhabited.default inhabited.default"},{"name":"ascending_central_series_le_upper","kind":"theorem","statement":"theorem ascending_central_series_le_upper {G : Type u_1} [group G] (H : ℕ → subgroup G) (hH : is_ascending_central_series H) (n : ℕ) : H n ≤ upper_central_series G n","theorem":"{G : Type u_1} [group G] (H : ℕ → subgroup G) (hH : is_ascending_central_series H) (n : ℕ) : H n ≤ upper_central_series G n","args":"{G : Type u_1} [group G] (H : ℕ → subgroup G) (hH : is_ascending_central_series H) (n : ℕ)","doc_string":"Any ascending central series for a group is bounded above by the upper central series.","type":"H n ≤ upper_central_series G n"},{"name":"category_theory.abelian.pseudo_equal_trans","kind":"theorem","statement":"theorem category_theory.abelian.pseudo_equal_trans {C : Type u} [category_theory.category C] [category_theory.abelian C] {P : C} : transitive (category_theory.abelian.pseudo_equal P)","theorem":"{C : Type u} [category_theory.category C] [category_theory.abelian C] {P : C} : transitive (category_theory.abelian.pseudo_equal P)","args":"{C : Type u} [category_theory.category C] [category_theory.abelian C] {P : C}","doc_string":"Pseudoequality is transitive: Just take the pullback. The pullback morphisms will    be epimorphisms since in an abelian category, pullbacks of epimorphisms are epimorphisms.","type":"transitive (category_theory.abelian.pseudo_equal P)"},{"name":"con.con_gen_mono","kind":"theorem","statement":"theorem con.con_gen_mono {M : Type u_1} [has_mul M] {r s : M → M → Prop} (h : ∀ (x y : M), r x y → s x y) : con_gen r ≤ con_gen s","theorem":"{M : Type u_1} [has_mul M] {r s : M → M → Prop} (h : ∀ (x y : M), r x y → s x y) : con_gen r ≤ con_gen s","args":"{M : Type u_1} [has_mul M] {r s : M → M → Prop} (h : ∀ (x y : M), r x y → s x y)","doc_string":"Given binary relations `r, s` with `r` contained in `s`, the smallest congruence relation    containing `s` contains the smallest congruence relation containing `r`.","type":"con_gen r ≤ con_gen s"},{"name":"multiset.sub_le_iff_le_add","kind":"theorem","statement":"theorem multiset.sub_le_iff_le_add {α : Type u_1} [decidable_eq α] {s t u : multiset α} : s - t ≤ u ↔ s ≤ u + t","theorem":"{α : Type u_1} [decidable_eq α] {s t u : multiset α} : s - t ≤ u ↔ s ≤ u + t","args":"{α : Type u_1} [decidable_eq α] {s t u : multiset α}","doc_string":"This is a special case of `tsub_le_iff_right`, which should be used instead of this.  This is needed to prove `has_ordered_sub (multiset α)`.","type":"s - t ≤ u ↔ s ≤ u + t"},{"name":"continuous_map.continuous_coe'","kind":"theorem","statement":"theorem continuous_map.continuous_coe' {α : Type u_1} {β : Type u_2} [topological_space α] [topological_space β] [locally_compact_space α] : continuous coe_fn","theorem":"{α : Type u_1} {β : Type u_2} [topological_space α] [topological_space β] [locally_compact_space α] : continuous coe_fn","args":"{α : Type u_1} {β : Type u_2} [topological_space α] [topological_space β] [locally_compact_space α]","doc_string":"See also `continuous_map.continuous_coe`","type":"continuous coe_fn"},{"name":"has_dvd.dvd.mul_left","kind":"theorem","statement":"theorem has_dvd.dvd.mul_left {α : Type u_1} [comm_semigroup α] {a b : α} (h : a ∣ b) (c : α) : a ∣ c * b","theorem":"{α : Type u_1} [comm_semigroup α] {a b : α} (h : a ∣ b) (c : α) : a ∣ c * b","args":"{α : Type u_1} [comm_semigroup α] {a b : α} (h : a ∣ b) (c : α)","doc_string":"**Alias** of dvd_mul_of_dvd_right`.","type":"a ∣ c * b"},{"name":"count_succ_eq_count","kind":"theorem","statement":"theorem count_succ_eq_count {p : ℕ → Prop} [decidable_pred p] {n : ℕ} : ¬p n → nat.count p (n + 1) = nat.count p n","theorem":"{p : ℕ → Prop} [decidable_pred p] {n : ℕ} : ¬p n → nat.count p (n + 1) = nat.count p n","args":"{p : ℕ → Prop} [decidable_pred p] {n : ℕ}","doc_string":"**Alias** of the reverse direction of nat.count_succ_eq_count_iff`.","type":"¬p n → nat.count p (n + 1) = nat.count p n"},{"name":"neg.is_add_group_hom","kind":"theorem","statement":"theorem neg.is_add_group_hom {α : Type u} [add_comm_group α] : is_add_group_hom has_neg.neg","theorem":"{α : Type u} [add_comm_group α] : is_add_group_hom has_neg.neg","args":"{α : Type u} [add_comm_group α]","doc_string":"Negation is an `add_group` homomorphism if the `add_group` is commutative.","type":"is_add_group_hom has_neg.neg"},{"name":"has_dvd.dvd.mul_right","kind":"theorem","statement":"theorem has_dvd.dvd.mul_right {α : Type u_1} [semigroup α] {a b : α} (h : a ∣ b) (c : α) : a ∣ b * c","theorem":"{α : Type u_1} [semigroup α] {a b : α} (h : a ∣ b) (c : α) : a ∣ b * c","args":"{α : Type u_1} [semigroup α] {a b : α} (h : a ∣ b) (c : α)","doc_string":"**Alias** of dvd_mul_of_dvd_left`.","type":"a ∣ b * c"},{"name":"polynomial.of_finsupp_inj","kind":"theorem","statement":"theorem polynomial.of_finsupp_inj {R : Type u} [semiring R] {a b : add_monoid_algebra R ℕ} : {to_finsupp := a} = {to_finsupp := b} ↔ a = b","theorem":"{R : Type u} [semiring R] {a b : add_monoid_algebra R ℕ} : {to_finsupp := a} = {to_finsupp := b} ↔ a = b","args":"{R : Type u} [semiring R] {a b : add_monoid_algebra R ℕ}","doc_string":"A more convenient spelling of `polynomial.of_finsupp.inj_eq` in terms of `iff`.","type":"{to_finsupp := a} = {to_finsupp := b} ↔ a = b"},{"name":"is_add_submonoid.multiset_sum_mem","kind":"theorem","statement":"theorem is_add_submonoid.multiset_sum_mem {M : Type u_1} [add_comm_monoid M] {s : set M} (hs : is_add_submonoid s) (m : multiset M) : (∀ (a : M), a ∈ m → a ∈ s) → m.sum ∈ s","theorem":"{M : Type u_1} [add_comm_monoid M] {s : set M} (hs : is_add_submonoid s) (m : multiset M) : (∀ (a : M), a ∈ m → a ∈ s) → m.sum ∈ s","args":"{M : Type u_1} [add_comm_monoid M] {s : set M} (hs : is_add_submonoid s) (m : multiset M)","doc_string":"The sum of a multiset of elements of an `add_submonoid` of an `add_comm_monoid` is an element of the `add_submonoid`.","type":"(∀ (a : M), a ∈ m → a ∈ s) → m.sum ∈ s"},{"name":"padic_val_rat.self","kind":"theorem","statement":"theorem padic_val_rat.self {p : ℕ} (hp : 1 < p) : padic_val_rat p ↑p = 1","theorem":"{p : ℕ} (hp : 1 < p) : padic_val_rat p ↑p = 1","args":"{p : ℕ} (hp : 1 < p)","doc_string":"For `p ≠ 0, p ≠ 1, `padic_val_rat p p` is 1.","type":"padic_val_rat p ↑p = 1"},{"name":"list.take_append_eq_append_take","kind":"theorem","statement":"theorem list.take_append_eq_append_take {α : Type u} {l₁ l₂ : list α} {n : ℕ} : list.take n (l₁ ++ l₂) = list.take n l₁ ++ list.take (n - l₁.length) l₂","theorem":"{α : Type u} {l₁ l₂ : list α} {n : ℕ} : list.take n (l₁ ++ l₂) = list.take n l₁ ++ list.take (n - l₁.length) l₂","args":"{α : Type u} {l₁ l₂ : list α} {n : ℕ}","doc_string":" Taking the first `n` elements in `l₁ ++ l₂` is the same as appending the first `n` elements of `l₁` to the first `n - l₁.length` elements of `l₂`.","type":"list.take n (l₁ ++ l₂) = list.take n l₁ ++ list.take (n - l₁.length) l₂"},{"name":"nat.factorization_inj","kind":"theorem","statement":"theorem nat.factorization_inj  : set.inj_on nat.factorization {x : ℕ | x ≠ 0}","theorem":" : set.inj_on nat.factorization {x : ℕ | x ≠ 0}","args":"","doc_string":"Every nonzero natural number has a unique prime factorization","type":"set.inj_on nat.factorization {x : ℕ | x ≠ 0}"},{"name":"list.sorted.insertion_sort_eq","kind":"theorem","statement":"theorem list.sorted.insertion_sort_eq {α : Type uu} {r : α → α → Prop} [decidable_rel r] {l : list α} (h : list.sorted r l) : list.insertion_sort r l = l","theorem":"{α : Type uu} {r : α → α → Prop} [decidable_rel r] {l : list α} (h : list.sorted r l) : list.insertion_sort r l = l","args":"{α : Type uu} {r : α → α → Prop} [decidable_rel r] {l : list α} (h : list.sorted r l)","doc_string":" If `l` is already `list.sorted` with respect to `r`, then `insertion_sort` does not change it.","type":"list.insertion_sort r l = l"},{"name":"has_subset.subset.antisymm'","kind":"theorem","statement":"theorem has_subset.subset.antisymm' {α : Type u} [has_subset α] {a b : α} [is_antisymm α has_subset.subset] (h : a ⊆ b) (h' : b ⊆ a) : b = a","theorem":"{α : Type u} [has_subset α] {a b : α} [is_antisymm α has_subset.subset] (h : a ⊆ b) (h' : b ⊆ a) : b = a","args":"{α : Type u} [has_subset α] {a b : α} [is_antisymm α has_subset.subset] (h : a ⊆ b) (h' : b ⊆ a)","doc_string":"**Alias** of superset_antisymm`.","type":"b = a"},{"name":"nat.pow_dvd_pow_iff_le_right","kind":"theorem","statement":"theorem nat.pow_dvd_pow_iff_le_right {x k l : ℕ} (w : 1 < x) : x ^ k ∣ x ^ l ↔ k ≤ l","theorem":"{x k l : ℕ} (w : 1 < x) : x ^ k ∣ x ^ l ↔ k ≤ l","args":"{x k l : ℕ} (w : 1 < x)","doc_string":"If `1 < x`, then `x^k` divides `x^l` if and only if `k` is at most `l`.","type":"x ^ k ∣ x ^ l ↔ k ≤ l"},{"name":"fintype.univ_of_is_empty","kind":"theorem","statement":"theorem fintype.univ_of_is_empty {α : Type u_1} [is_empty α] : finset.univ = ∅","theorem":"{α : Type u_1} [is_empty α] : finset.univ = ∅","args":"{α : Type u_1} [is_empty α]","doc_string":" Note: this lemma is specifically about `fintype.of_is_empty`. For a statement about arbitrary `fintype` instances, use `finset.univ_eq_empty`.","type":"finset.univ = ∅"},{"name":"is_topological_fiber_bundle.surjective_proj","kind":"theorem","statement":"theorem is_topological_fiber_bundle.surjective_proj {B : Type u_2} {F : Type u_3} {Z : Type u_4} [topological_space B] [topological_space F] {proj : Z → B} [topological_space Z] [nonempty F] (h : is_topological_fiber_bundle F proj) : function.surjective proj","theorem":"{B : Type u_2} {F : Type u_3} {Z : Type u_4} [topological_space B] [topological_space F] {proj : Z → B} [topological_space Z] [nonempty F] (h : is_topological_fiber_bundle F proj) : function.surjective proj","args":"{B : Type u_2} {F : Type u_3} {Z : Type u_4} [topological_space B] [topological_space F] {proj : Z → B} [topological_space Z] [nonempty F] (h : is_topological_fiber_bundle F proj)","doc_string":" The projection from a topological fiber bundle with a nonempty fiber to its base is a surjective map.","type":"function.surjective proj"},{"name":"add_con.mk'_ker","kind":"theorem","statement":"theorem add_con.mk'_ker {M : Type u_1} [add_zero_class M] (c : add_con M) : add_con.ker c.mk' = c","theorem":"{M : Type u_1} [add_zero_class M] (c : add_con M) : add_con.ker c.mk' = c","args":"{M : Type u_1} [add_zero_class M] (c : add_con M)","doc_string":"The kernel of the natural homomorphism from an `add_monoid` to its quotient by an additive congruence relation `c` equals `c`.","type":"add_con.ker c.mk' = c"},{"name":"is_topological_fiber_bundle.quotient_map_proj","kind":"theorem","statement":"theorem is_topological_fiber_bundle.quotient_map_proj {B : Type u_2} {F : Type u_3} {Z : Type u_4} [topological_space B] [topological_space F] {proj : Z → B} [topological_space Z] [nonempty F] (h : is_topological_fiber_bundle F proj) : quotient_map proj","theorem":"{B : Type u_2} {F : Type u_3} {Z : Type u_4} [topological_space B] [topological_space F] {proj : Z → B} [topological_space Z] [nonempty F] (h : is_topological_fiber_bundle F proj) : quotient_map proj","args":"{B : Type u_2} {F : Type u_3} {Z : Type u_4} [topological_space B] [topological_space F] {proj : Z → B} [topological_space Z] [nonempty F] (h : is_topological_fiber_bundle F proj)","doc_string":" The projection from a topological fiber bundle with a nonempty fiber to its base is a quotient map.","type":"quotient_map proj"},{"name":"group_topology.continuous_mul'","kind":"theorem","statement":"theorem group_topology.continuous_mul' {α : Type u} [group α] (g : group_topology α) : continuous (λ (p : α × α), p.fst * p.snd)","theorem":"{α : Type u} [group α] (g : group_topology α) : continuous (λ (p : α × α), p.fst * p.snd)","args":"{α : Type u} [group α] (g : group_topology α)","doc_string":"A version of the global `continuous_mul` suitable for dot notation.","type":"continuous (λ (p : α × α), p.fst * p.snd)"},{"name":"is_regular.and_of_mul_of_mul","kind":"theorem","statement":"theorem is_regular.and_of_mul_of_mul {R : Type u_1} {a b : R} [semigroup R] (ab : is_regular (a * b)) (ba : is_regular (b * a)) : is_regular a ∧ is_regular b","theorem":"{R : Type u_1} {a b : R} [semigroup R] (ab : is_regular (a * b)) (ba : is_regular (b * a)) : is_regular a ∧ is_regular b","args":"{R : Type u_1} {a b : R} [semigroup R] (ab : is_regular (a * b)) (ba : is_regular (b * a))","doc_string":"The \"most used\" implication of `mul_and_mul_iff`, with split hypotheses, instead of `∧`.","type":"is_regular a ∧ is_regular b"},{"name":"sub_neg_of_lt","kind":"theorem","statement":"theorem sub_neg_of_lt {α : Type u} [add_group α] [has_lt α] [covariant_class α α (function.swap has_add.add) has_lt.lt] {a b : α} : a < b → a - b < 0","theorem":"{α : Type u} [add_group α] [has_lt α] [covariant_class α α (function.swap has_add.add) has_lt.lt] {a b : α} : a < b → a - b < 0","args":"{α : Type u} [add_group α] [has_lt α] [covariant_class α α (function.swap has_add.add) has_lt.lt] {a b : α}","doc_string":"**Alias** of the reverse direction of sub_neg`.","type":"a < b → a - b < 0"},{"name":"cardinal.mk_quaternion","kind":"theorem","statement":"theorem cardinal.mk_quaternion (R : Type u_1) [has_one R] [has_neg R] : cardinal.mk (quaternion R) = cardinal.mk R ^ 4","theorem":"(R : Type u_1) [has_one R] [has_neg R] : cardinal.mk (quaternion R) = cardinal.mk R ^ 4","args":"(R : Type u_1) [has_one R] [has_neg R]","doc_string":"The cardinality of the quaternions, as a type.","type":"cardinal.mk (quaternion R) = cardinal.mk R ^ 4"},{"name":"mt","kind":"theorem","statement":"theorem mt {a b : Prop} (h₁ : a → b) (h₂ : ¬b) : ¬a","theorem":"{a b : Prop} (h₁ : a → b) (h₂ : ¬b) : ¬a","args":"{a b : Prop} (h₁ : a → b) (h₂ : ¬b)","doc_string":"Modus tollens. If an implication is true, then so is its contrapositive.","type":"¬a"},{"name":"semiconj_by.one_right","kind":"theorem","statement":"theorem semiconj_by.one_right {M : Type u} [mul_one_class M] (a : M) : semiconj_by a 1 1","theorem":"{M : Type u} [mul_one_class M] (a : M) : semiconj_by a 1 1","args":"{M : Type u} [mul_one_class M] (a : M)","doc_string":"Any element semiconjugates `1` to `1`.","type":"semiconj_by a 1 1"},{"name":"le_neg_add_of_add_le","kind":"theorem","statement":"theorem le_neg_add_of_add_le {α : Type u} [add_group α] [has_le α] [covariant_class α α has_add.add has_le.le] {a b c : α} : a + b ≤ c → b ≤ -a + c","theorem":"{α : Type u} [add_group α] [has_le α] [covariant_class α α has_add.add has_le.le] {a b c : α} : a + b ≤ c → b ≤ -a + c","args":"{α : Type u} [add_group α] [has_le α] [covariant_class α α has_add.add has_le.le] {a b c : α}","doc_string":"**Alias** of the reverse direction of le_inv_mul_iff_mul_le`.","type":"a + b ≤ c → b ≤ -a + c"},{"name":"is_totally_separated.is_totally_disconnected","kind":"theorem","statement":"theorem is_totally_separated.is_totally_disconnected {α : Type u} [topological_space α] {s : set α} (H : is_totally_separated s) : is_totally_disconnected s","theorem":"{α : Type u} [topological_space α] {s : set α} (H : is_totally_separated s) : is_totally_disconnected s","args":"{α : Type u} [topological_space α] {s : set α} (H : is_totally_separated s)","doc_string":"**Alias** of is_totally_disconnected_of_is_totally_separated`.","type":"is_totally_disconnected s"},{"name":"lucas_lehmer.mersenne_coe_X","kind":"theorem","statement":"theorem lucas_lehmer.mersenne_coe_X (p : ℕ) : ↑(mersenne p) = 0","theorem":"(p : ℕ) : ↑(mersenne p) = 0","args":"(p : ℕ)","doc_string":"`q` is the minimum factor of `mersenne p`, so `M p = 0` in `X q`.","type":"↑(mersenne p) = 0"},{"name":"filter.tendsto_pow_at_top","kind":"theorem","statement":"theorem filter.tendsto_pow_at_top {α : Type u_3} [ordered_semiring α] {n : ℕ} (hn : 1 ≤ n) : filter.tendsto (λ (x : α), x ^ n) filter.at_top filter.at_top","theorem":"{α : Type u_3} [ordered_semiring α] {n : ℕ} (hn : 1 ≤ n) : filter.tendsto (λ (x : α), x ^ n) filter.at_top filter.at_top","args":"{α : Type u_3} [ordered_semiring α] {n : ℕ} (hn : 1 ≤ n)","doc_string":" The monomial function `x^n` tends to `+∞` at `+∞` for any positive natural `n`. A version for positive real powers exists as `tendsto_rpow_at_top`.","type":"filter.tendsto (λ (x : α), x ^ n) filter.at_top filter.at_top"},{"name":"list.length_pos_of_sum_pos","kind":"theorem","statement":"theorem list.length_pos_of_sum_pos {M : Type u_3} [add_monoid M] [preorder M] (L : list M) (h : 0 < L.sum) : 0 < L.length","theorem":"{M : Type u_3} [add_monoid M] [preorder M] (L : list M) (h : 0 < L.sum) : 0 < L.length","args":"{M : Type u_3} [add_monoid M] [preorder M] (L : list M) (h : 0 < L.sum)","doc_string":"A list with positive sum must have positive length.","type":"0 < L.length"},{"name":"padic_val_rat.of_int","kind":"theorem","statement":"theorem padic_val_rat.of_int {p : ℕ} {z : ℤ} : padic_val_rat p ↑z = ↑(padic_val_int p z)","theorem":"{p : ℕ} {z : ℤ} : padic_val_rat p ↑z = ↑(padic_val_int p z)","args":"{p : ℕ} {z : ℤ}","doc_string":"The p-adic value of an integer `z ≠ 0` is its p-adic_value as a rational","type":"padic_val_rat p ↑z = ↑(padic_val_int p z)"},{"name":"category_theory.over.construct_products.over_products_of_wide_pullbacks","kind":"theorem","statement":"theorem category_theory.over.construct_products.over_products_of_wide_pullbacks {C : Type u} [category_theory.category C] [category_theory.limits.has_wide_pullbacks C] {B : C} : category_theory.limits.has_products (category_theory.over B)","theorem":"{C : Type u} [category_theory.category C] [category_theory.limits.has_wide_pullbacks C] {B : C} : category_theory.limits.has_products (category_theory.over B)","args":"{C : Type u} [category_theory.category C] [category_theory.limits.has_wide_pullbacks C] {B : C}","doc_string":"Given all wide pullbacks in `C`, construct products in `C/B`.","type":"category_theory.limits.has_products (category_theory.over B)"},{"name":"is_of_fin_add_order.add","kind":"theorem","statement":"theorem is_of_fin_add_order.add {G : Type u} {x y : G} [add_comm_monoid G] (hx : is_of_fin_add_order x) (hy : is_of_fin_add_order y) : is_of_fin_add_order (x + y)","theorem":"{G : Type u} {x y : G} [add_comm_monoid G] (hx : is_of_fin_add_order x) (hy : is_of_fin_add_order y) : is_of_fin_add_order (x + y)","args":"{G : Type u} {x y : G} [add_comm_monoid G] (hx : is_of_fin_add_order x) (hy : is_of_fin_add_order y)","doc_string":"Elements of finite additive order are closed under addition.","type":"is_of_fin_add_order (x + y)"},{"name":"has_lt.lt.not_is_min","kind":"theorem","statement":"theorem has_lt.lt.not_is_min {α : Type u_1} [preorder α] {a b : α} (h : b < a) : ¬is_min a","theorem":"{α : Type u_1} [preorder α] {a b : α} (h : b < a) : ¬is_min a","args":"{α : Type u_1} [preorder α] {a b : α} (h : b < a)","doc_string":"**Alias** of not_is_min_of_lt`.","type":"¬is_min a"},{"name":"sub_nonneg_of_le","kind":"theorem","statement":"theorem sub_nonneg_of_le {α : Type u} [add_group α] [has_le α] [covariant_class α α (function.swap has_add.add) has_le.le] {a b : α} : b ≤ a → 0 ≤ a - b","theorem":"{α : Type u} [add_group α] [has_le α] [covariant_class α α (function.swap has_add.add) has_le.le] {a b : α} : b ≤ a → 0 ≤ a - b","args":"{α : Type u} [add_group α] [has_le α] [covariant_class α α (function.swap has_add.add) has_le.le] {a b : α}","doc_string":"**Alias** of the reverse direction of sub_nonneg`.","type":"b ≤ a → 0 ≤ a - b"},{"name":"multiset.Icc_eq_zero","kind":"theorem","statement":"theorem multiset.Icc_eq_zero {α : Type u_1} [preorder α] [locally_finite_order α] {a b : α} : ¬a ≤ b → multiset.Icc a b = 0","theorem":"{α : Type u_1} [preorder α] [locally_finite_order α] {a b : α} : ¬a ≤ b → multiset.Icc a b = 0","args":"{α : Type u_1} [preorder α] [locally_finite_order α] {a b : α}","doc_string":"**Alias** of the reverse direction of multiset.Icc_eq_zero_iff`.","type":"¬a ≤ b → multiset.Icc a b = 0"},{"name":"pnat.factor_multiset_of_prime","kind":"theorem","statement":"theorem pnat.factor_multiset_of_prime (p : nat.primes) : ↑p.factor_multiset = prime_multiset.of_prime p","theorem":"(p : nat.primes) : ↑p.factor_multiset = prime_multiset.of_prime p","args":"(p : nat.primes)","doc_string":"Factoring a prime gives the corresponding one-element multiset.","type":"↑p.factor_multiset = prime_multiset.of_prime p"},{"name":"add_lt_of_lt_sub_left","kind":"theorem","statement":"theorem add_lt_of_lt_sub_left {α : Type u} [add_comm_group α] [has_lt α] [covariant_class α α has_add.add has_lt.lt] {a b c : α} : b < c - a → a + b < c","theorem":"{α : Type u} [add_comm_group α] [has_lt α] [covariant_class α α has_add.add has_lt.lt] {a b c : α} : b < c - a → a + b < c","args":"{α : Type u} [add_comm_group α] [has_lt α] [covariant_class α α has_add.add has_lt.lt] {a b c : α}","doc_string":"**Alias** of the forward direction of lt_sub_iff_add_lt'`.","type":"b < c - a → a + b < c"},{"name":"set.sized.subset_powerset_len_univ","kind":"theorem","statement":"theorem set.sized.subset_powerset_len_univ {α : Type u_1} [fintype α] {𝒜 : finset (finset α)} {r : ℕ} : set.sized r ↑𝒜 → 𝒜 ⊆ finset.powerset_len r finset.univ","theorem":"{α : Type u_1} [fintype α] {𝒜 : finset (finset α)} {r : ℕ} : set.sized r ↑𝒜 → 𝒜 ⊆ finset.powerset_len r finset.univ","args":"{α : Type u_1} [fintype α] {𝒜 : finset (finset α)} {r : ℕ}","doc_string":"**Alias** of the reverse direction of finset.subset_powerset_len_univ_iff`.","type":"set.sized r ↑𝒜 → 𝒜 ⊆ finset.powerset_len r finset.univ"},{"name":"not_is_left_regular_zero_iff","kind":"theorem","statement":"theorem not_is_left_regular_zero_iff {R : Type u_1} [mul_zero_class R] : ¬is_left_regular 0 ↔ nontrivial R","theorem":"{R : Type u_1} [mul_zero_class R] : ¬is_left_regular 0 ↔ nontrivial R","args":"{R : Type u_1} [mul_zero_class R]","doc_string":"In a non-trivial `mul_zero_class`, the `0` element is not left-regular.","type":"¬is_left_regular 0 ↔ nontrivial R"},{"name":"dite_not","kind":"theorem","statement":"theorem dite_not {α : Sort u_1} (P : Prop) [decidable P] (x : ¬P → α) (y : ¬¬P → α) : dite (¬P) x y = dite P (λ (h : P), y _) x","theorem":"{α : Sort u_1} (P : Prop) [decidable P] (x : ¬P → α) (y : ¬¬P → α) : dite (¬P) x y = dite P (λ (h : P), y _) x","args":"{α : Sort u_1} (P : Prop) [decidable P] (x : ¬P → α) (y : ¬¬P → α)","doc_string":"Negation of the condition `P : Prop` in a `dite` is the same as swapping the branches.","type":"dite (¬P) x y = dite P (λ (h : P), y _) x"},{"name":"ite_not","kind":"theorem","statement":"theorem ite_not {α : Sort u_1} (P : Prop) [decidable P] (a b : α) : ite (¬P) a b = ite P b a","theorem":"{α : Sort u_1} (P : Prop) [decidable P] (a b : α) : ite (¬P) a b = ite P b a","args":"{α : Sort u_1} (P : Prop) [decidable P] (a b : α)","doc_string":"Negation of the condition `P : Prop` in a `ite` is the same as swapping the branches.","type":"ite (¬P) a b = ite P b a"},{"name":"is_chain.symm","kind":"theorem","statement":"theorem is_chain.symm {α : Type u_1} {r : α → α → Prop} {s : set α} (h : is_chain r s) : is_chain (flip r) s","theorem":"{α : Type u_1} {r : α → α → Prop} {s : set α} (h : is_chain r s) : is_chain (flip r) s","args":"{α : Type u_1} {r : α → α → Prop} {s : set α} (h : is_chain r s)","doc_string":"This can be used to turn `is_chain (≥)` into `is_chain (≤)` and vice-versa.","type":"is_chain (flip r) s"},{"name":"affine_subspace.coe_injective","kind":"theorem","statement":"theorem affine_subspace.coe_injective {k : Type u_1} {V : Type u_2} {P : Type u_3} [ring k] [add_comm_group V] [module k V] [add_torsor V P] : function.injective coe","theorem":"{k : Type u_1} {V : Type u_2} {P : Type u_3} [ring k] [add_comm_group V] [module k V] [add_torsor V P] : function.injective coe","args":"{k : Type u_1} {V : Type u_2} {P : Type u_3} [ring k] [add_comm_group V] [module k V] [add_torsor V P]","doc_string":"Two affine subspaces are equal if they have the same points.","type":"function.injective coe"},{"name":"dihedral_group.order_of_r","kind":"theorem","statement":"theorem dihedral_group.order_of_r {n : ℕ} [fact (0 < n)] (i : zmod n) : order_of (dihedral_group.r i) = n / n.gcd i.val","theorem":"{n : ℕ} [fact (0 < n)] (i : zmod n) : order_of (dihedral_group.r i) = n / n.gcd i.val","args":"{n : ℕ} [fact (0 < n)] (i : zmod n)","doc_string":"If `0 < n`, then `i : zmod n` has order `n / gcd n i`.","type":"order_of (dihedral_group.r i) = n / n.gcd i.val"},{"name":"category_theory.limits.has_binary_biproducts.of_has_binary_coproducts","kind":"theorem","statement":"theorem category_theory.limits.has_binary_biproducts.of_has_binary_coproducts {C : Type u} [category_theory.category C] [category_theory.preadditive C] [category_theory.limits.has_binary_coproducts C] : category_theory.limits.has_binary_biproducts C","theorem":"{C : Type u} [category_theory.category C] [category_theory.preadditive C] [category_theory.limits.has_binary_coproducts C] : category_theory.limits.has_binary_biproducts C","args":"{C : Type u} [category_theory.category C] [category_theory.preadditive C] [category_theory.limits.has_binary_coproducts C]","doc_string":"In a preadditive category, if all binary coproducts exist, then all binary biproducts exist.","type":"category_theory.limits.has_binary_biproducts C"},{"name":"prime_dvd_char_iff_dvd_card","kind":"theorem","statement":"theorem prime_dvd_char_iff_dvd_card {R : Type u_1} [comm_ring R] [fintype R] (p : ℕ) [fact (nat.prime p)] : p ∣ ring_char R ↔ p ∣ fintype.card R","theorem":"{R : Type u_1} [comm_ring R] [fintype R] (p : ℕ) [fact (nat.prime p)] : p ∣ ring_char R ↔ p ∣ fintype.card R","args":"{R : Type u_1} [comm_ring R] [fintype R] (p : ℕ) [fact (nat.prime p)]","doc_string":" The prime divisors of the characteristic of a finite commutative ring are exactly the prime divisors of its cardinality.","type":"p ∣ ring_char R ↔ p ∣ fintype.card R"},{"name":"neg_nonneg","kind":"theorem","statement":"theorem neg_nonneg {α : Type u} [add_group α] [has_le α] [covariant_class α α has_add.add has_le.le] {a : α} : 0 ≤ -a ↔ a ≤ 0","theorem":"{α : Type u} [add_group α] [has_le α] [covariant_class α α has_add.add has_le.le] {a : α} : 0 ≤ -a ↔ a ≤ 0","args":"{α : Type u} [add_group α] [has_le α] [covariant_class α α has_add.add has_le.le] {a : α}","doc_string":"**Alias** of left.one_le_inv_iff`.","type":"0 ≤ -a ↔ a ≤ 0"},{"name":"is_add_hom.neg","kind":"theorem","statement":"theorem is_add_hom.neg {α : Type u_1} {β : Type u_2} [has_add α] [add_comm_group β] {f : α → β} (hf : is_add_hom f) : is_add_hom (λ (a : α), -f a)","theorem":"{α : Type u_1} {β : Type u_2} [has_add α] [add_comm_group β] {f : α → β} (hf : is_add_hom f) : is_add_hom (λ (a : α), -f a)","args":"{α : Type u_1} {β : Type u_2} [has_add α] [add_comm_group β] {f : α → β} (hf : is_add_hom f)","doc_string":"The negation of a map which preserves addition, preserves addition when the target is commutative.","type":"is_add_hom (λ (a : α), -f a)"},{"name":"order.pred_ne_pred","kind":"theorem","statement":"theorem order.pred_ne_pred {α : Type u_1} [partial_order α] [pred_order α] {a b : α} [no_min_order α] : a ≠ b → order.pred a ≠ order.pred b","theorem":"{α : Type u_1} [partial_order α] [pred_order α] {a b : α} [no_min_order α] : a ≠ b → order.pred a ≠ order.pred b","args":"{α : Type u_1} [partial_order α] [pred_order α] {a b : α} [no_min_order α]","doc_string":"**Alias** of the reverse direction of order.pred_ne_pred_iff`.","type":"a ≠ b → order.pred a ≠ order.pred b"},{"name":"right_iff_left_not_left_of","kind":"theorem","statement":"theorem right_iff_left_not_left_of {α : Type u} (r s : α → α → Prop) [is_nonstrict_strict_order α r s] {a b : α} : s a b ↔ r a b ∧ ¬r b a","theorem":"{α : Type u} (r s : α → α → Prop) [is_nonstrict_strict_order α r s] {a b : α} : s a b ↔ r a b ∧ ¬r b a","args":"{α : Type u} (r s : α → α → Prop) [is_nonstrict_strict_order α r s] {a b : α}","doc_string":"A version of `right_iff_left_not_left` with explicit `r` and `s`.","type":"s a b ↔ r a b ∧ ¬r b a"},{"name":"lt_sub_left_of_add_lt","kind":"theorem","statement":"theorem lt_sub_left_of_add_lt {α : Type u} [add_comm_group α] [has_lt α] [covariant_class α α has_add.add has_lt.lt] {a b c : α} : a + b < c → b < c - a","theorem":"{α : Type u} [add_comm_group α] [has_lt α] [covariant_class α α has_add.add has_lt.lt] {a b c : α} : a + b < c → b < c - a","args":"{α : Type u} [add_comm_group α] [has_lt α] [covariant_class α α has_add.add has_lt.lt] {a b c : α}","doc_string":"**Alias** of the reverse direction of lt_sub_iff_add_lt'`.","type":"a + b < c → b < c - a"},{"name":"one_add_mul_le_pow'","kind":"theorem","statement":"theorem one_add_mul_le_pow' {R : Type u₁} [ordered_semiring R] {a : R} (Hsq : 0 ≤ a * a) (Hsq' : 0 ≤ (1 + a) * (1 + a)) (H : 0 ≤ 2 + a) (n : ℕ) : 1 + ↑n * a ≤ (1 + a) ^ n","theorem":"{R : Type u₁} [ordered_semiring R] {a : R} (Hsq : 0 ≤ a * a) (Hsq' : 0 ≤ (1 + a) * (1 + a)) (H : 0 ≤ 2 + a) (n : ℕ) : 1 + ↑n * a ≤ (1 + a) ^ n","args":"{R : Type u₁} [ordered_semiring R] {a : R} (Hsq : 0 ≤ a * a) (Hsq' : 0 ≤ (1 + a) * (1 + a)) (H : 0 ≤ 2 + a) (n : ℕ)","doc_string":" Bernoulli's inequality. This version works for semirings but requires additional hypotheses `0 ≤ a * a` and `0 ≤ (1 + a) * (1 + a)`.","type":"1 + ↑n * a ≤ (1 + a) ^ n"},{"name":"neg_le_of_neg_le","kind":"theorem","statement":"theorem neg_le_of_neg_le {α : Type u} [add_group α] [has_le α] [covariant_class α α has_add.add has_le.le] [covariant_class α α (function.swap has_add.add) has_le.le] {a b : α} : -a ≤ b → -b ≤ a","theorem":"{α : Type u} [add_group α] [has_le α] [covariant_class α α has_add.add has_le.le] [covariant_class α α (function.swap has_add.add) has_le.le] {a b : α} : -a ≤ b → -b ≤ a","args":"{α : Type u} [add_group α] [has_le α] [covariant_class α α has_add.add has_le.le] [covariant_class α α (function.swap has_add.add) has_le.le] {a b : α}","doc_string":"**Alias** of the forward direction of inv_le'`.","type":"-a ≤ b → -b ≤ a"},{"name":"category_theory.indecomposable_of_simple","kind":"theorem","statement":"theorem category_theory.indecomposable_of_simple {C : Type u} [category_theory.category C] [category_theory.preadditive C] [category_theory.limits.has_binary_biproducts C] (X : C) [category_theory.simple X] : category_theory.indecomposable X","theorem":"{C : Type u} [category_theory.category C] [category_theory.preadditive C] [category_theory.limits.has_binary_biproducts C] (X : C) [category_theory.simple X] : category_theory.indecomposable X","args":"{C : Type u} [category_theory.category C] [category_theory.preadditive C] [category_theory.limits.has_binary_biproducts C] (X : C) [category_theory.simple X]","doc_string":"Any simple object in a preadditive category is indecomposable.","type":"category_theory.indecomposable X"},{"name":"is_add_right_regular_of_right_cancel_add_semigroup","kind":"theorem","statement":"theorem is_add_right_regular_of_right_cancel_add_semigroup {R : Type u_1} [add_right_cancel_semigroup R] (g : R) : is_add_right_regular g","theorem":"{R : Type u_1} [add_right_cancel_semigroup R] (g : R) : is_add_right_regular g","args":"{R : Type u_1} [add_right_cancel_semigroup R] (g : R)","doc_string":"Elements of an add right cancel semigroup are add-right-regular","type":"is_add_right_regular g"},{"name":"add_subgroup.closure_le","kind":"theorem","statement":"theorem add_subgroup.closure_le {G : Type u_1} [add_group G] (K : add_subgroup G) {k : set G} : add_subgroup.closure k ≤ K ↔ k ⊆ ↑K","theorem":"{G : Type u_1} [add_group G] (K : add_subgroup G) {k : set G} : add_subgroup.closure k ≤ K ↔ k ⊆ ↑K","args":"{G : Type u_1} [add_group G] (K : add_subgroup G) {k : set G}","doc_string":"An additive subgroup `K` includes `closure k` if and only if it includes `k`","type":"add_subgroup.closure k ≤ K ↔ k ⊆ ↑K"},{"name":"finset.Ico_eq_empty","kind":"theorem","statement":"theorem finset.Ico_eq_empty {α : Type u_1} [preorder α] [locally_finite_order α] {a b : α} : ¬a < b → finset.Ico a b = ∅","theorem":"{α : Type u_1} [preorder α] [locally_finite_order α] {a b : α} : ¬a < b → finset.Ico a b = ∅","args":"{α : Type u_1} [preorder α] [locally_finite_order α] {a b : α}","doc_string":"**Alias** of the reverse direction of finset.Ico_eq_empty_iff`.","type":"¬a < b → finset.Ico a b = ∅"}]