[
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "compact_if_all_proper_compact",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"If every proper closed set of a topological space is compact, then the space itself is compact.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "If every proper closed set of a topological space is compact, then the space itself is compact.",
      "codex_time": 4.624296213994967,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem TopologicalSpace_IsCompact_of_IsClosed_IsCompact (x : type*)  [TopologicalSpace x] (h : ∀ S : set x, IsClosed S → proper S → IsCompact S) :  IsCompact x ",
      "theorem every_proper_IsClosed_set_IsCompact_imply_Space_IsCompact (x : type*) [TopologicalSpace x]  (hX : ∀ (Y : set x), Y ≠ ∅ → IsClosed Y → IsCompact Y):  IsCompact x ",
      "theorem IsCompact_of_every_proper_IsClosed_IsCompact (x : type*) [TopologicalSpace x] [CompactSpace x] :  (∀ C : set x, IsClosed C ∧ C ≠ x → IsCompact C) → IsCompact x ",
      "theorem IsCompact_of_IsCompact_proper_IsClosed (x : type*) [TopologicalSpace x]  (hX : ∀ (K : set x),  IsClosed K ∧ K ≠ x → IsCompact K) : IsCompact x ",
      "theorem Compactness_of_Nonempty_IsClopen_Space (x : type u) [t : TopologicalSpace x]  (P : set x) (hP : IsClosed P) (hP_IsCompl : IsClosed (IsCompl P)) :  IsCompact P "
    ],
    "answer": "theorem compact_if_all_proper_compact {α : Type _} [TopologicalSpace α] : (∀ (s : Set α), (s ≠ Set.univ) → IsCompact s) → CompactSpace α "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "compact_if_all_proper_compact",
      "main_prompt": "If every proper closed set of a topological space is compact, then the space itself is compact.",
      "prompt": "Natural language version: \"A closed subset of a compact set is a compact set.\" Translate the natural language version to a Lean mathlib version:\n theorem compact_of_is_closed_subset{α : Type u} [topological_space α] {s t : set α} (hs : is_compact s) (ht : is_closed t) (h : t ⊆ s) :\nis_compact t := \n\nNatural language version: \"A set `s` is compact if for every open cover of `s`, there exists a finite subcover.\" Translate the natural language version to a Lean mathlib version:\n theorem is_compact_of_finite_subcover{α : Type u} [topological_space α] {s : set α} (h : ∀ {ι : Type u} (U : ι → set α), (∀ (i : ι), is_open (U i)) → (s ⊆ ⋃ (i : ι), U i) → (∃ (t : finset ι), s ⊆ ⋃ (i : ι) (H : i ∈ t), U i)) :\nis_compact s := \n\nNatural language version: \"The intersection of a compact set and a closed set is a compact set.\" Translate the natural language version to a Lean mathlib version:\n theorem is_compact.inter_right{α : Type u} [topological_space α] {s t : set α} (hs : is_compact s) (ht : is_closed t) :\nis_compact (s ∩ t) := \n\nNatural language version: \"The intersection of a closed set and a compact set is a compact set.\" Translate the natural language version to a Lean mathlib version:\n theorem is_compact.inter_left{α : Type u} [topological_space α] {s t : set α} (ht : is_compact t) (hs : is_closed s) :\nis_compact (s ∩ t) := \n\nNatural language version: \"If every proper closed set of a topological space is compact, then the space itself is compact.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.782024621963501,
          "doc_string": "A closed subset of a compact set is a compact set.",
          "statement": "theorem compact_of_is_closed_subset {α : Type u} [topological_space α] {s t : set α} (hs : is_compact s) (ht : is_closed t) (h : t ⊆ s) : is_compact t"
        },
        {
          "sim_score": 0.6621682643890381,
          "doc_string": "A set `s` is compact if for every open cover of `s`, there exists a finite subcover.",
          "statement": "theorem is_compact_of_finite_subcover {α : Type u} [topological_space α] {s : set α} (h : ∀ {ι : Type u} (U : ι → set α), (∀ (i : ι), is_open (U i)) → (s ⊆ ⋃ (i : ι), U i) → (∃ (t : finset ι), s ⊆ ⋃ (i : ι) (H : i ∈ t), U i)) : is_compact s"
        },
        {
          "sim_score": 0.651668906211853,
          "doc_string": "The intersection of a compact set and a closed set is a compact set.",
          "statement": "theorem is_compact.inter_right {α : Type u} [topological_space α] {s t : set α} (hs : is_compact s) (ht : is_closed t) : is_compact (s ∩ t)"
        },
        {
          "sim_score": 0.6444039344787598,
          "doc_string": "The intersection of a closed set and a compact set is a compact set.",
          "statement": "theorem is_compact.inter_left {α : Type u} [topological_space α] {s t : set α} (ht : is_compact t) (hs : is_closed s) : is_compact (s ∩ t)"
        }
      ],
      "codex_time": 4.50850175798405,
      "search_time": 2.0355896779801697,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem IsClosed.IsCompact_iff_all_IsClosed_subsets_are_IsCompact{α : type u} [TopologicalSpace α] (hα : ∀ (S : set α) [IsClosed S], IsCompact S) : IsCompact α ↔ (∀ (S : set α), IsClosed S → IsCompact S) ",
      "theorem IsCompact.Subset_IsClosed{α : type u} [TopologicalSpace α] (h : ∀ t : set α, IsClosed t → IsCompact t → t ≠ set.Univ → ∃ (P : α), P ∉ t) : IsCompact set.Univ ",
      "theorem IsCompact_of_IsClosed_proper{α : type u} [TopologicalSpace α] (h : ∀ S : set α, IsClosed S → IsCompact S) (h₂ : ¬ IsClosed Univ) : IsCompact Univ ",
      "theorem IsCompact.TopologicalSpace_epsilon{α : type u} [TopologicalSpace α] (h : ∀ (S : set α) (h : IsClosed S) (h0 : S ∉ {∅, Univ}), IsCompact S) : IsCompact Univ ",
      "theorem IsCompact_of_forall_IsClosed_Subset_prop{α : type u} [TopologicalSpace α] (h : ∀ {S : set α}, IsClosed S → S ≠ Univ → ∃ (t : set α), IsClosed t ∧ IsCompact t ∧ S ⊆ t) : IsCompact Univ "
    ],
    "answer": "theorem compact_if_all_proper_compact {α : Type _} [TopologicalSpace α] : (∀ (s : Set α), (s ≠ Set.univ) → IsCompact s) → CompactSpace α "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "compact_if_all_proper_compact",
      "main_prompt": "If every proper closed set of a topological space is compact, then the space itself is compact.",
      "prompt": "Natural language version: \"If every proper closed set of a topological space is compact, then the space itself is compact.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 12.655504310998367,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem IsCompact_of_IsClosed_IsCompact { x : top } ( h : ∀ C, C ⊂ x → IsClosed C → IsCompact C ) : IsCompact x ",
      "theorem IsCompact_of_IsClosed_of_IsCompact (x : type) [TopologicalSpace x]    {Y : set x} (HY : Y ⊆ x) (hY : _closedY) (hYc : IsCompact Y) : IsCompact x ",
      "theorem every_proper_IsClosed_IsCompact_Implies_IsCompact [… → IsCompact]:    (Π A: set α, IsClosed A → proper A) → IsCompact α end  -- move the underscore in the next line to the beginning -- of the line and press `cmd+enter` to make A new line after it.  -- Let'S apply the theorem `IsCompact_iff_Ultrafilter_LE_nhds` (lemma 3.4 in the notes) -- about ultrafilters and convergent filters in topological spaces.  --import Append_Unique  --def LT_set (n : ℕ) :",
      "theorem if_every_IsClosed_Subset_IsCompact_then_IsCompact :   ∀(ts : TopologicalSpace), (∀(C : set ts.IsOpen), C ≠ ∅ → ∃S : Finite_set (set ts.IsOpen), S ⊆ C ∧ Fintype.IsOpen_set ts.IsOpen (fset.sUnion S)) → IsCompact ts.IsOpen ",
      "theorem IsCompact_if_proper_IsClosed_IsCompact { α : type * } [ TopologicalSpace α ] : CompactSpace α ↔ ∀ S : set α , CompactSpace S → IsClosed S → IsCompact S "
    ],
    "answer": "theorem compact_if_all_proper_compact {α : Type _} [TopologicalSpace α] : (∀ (s : Set α), (s ≠ Set.univ) → IsCompact s) → CompactSpace α "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "fermat_two_square",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"Every prime that is one greater than a multiple of four can be expressed as the sum of two squares.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "Every prime that is one greater than a multiple of four can be expressed as the sum of two squares.",
      "codex_time": 8.657882266008528,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Sum_squares_Prime_four_n_plus_One (P : ℕ) (h₁ : Prime P) (h₂ : P = 4 * n + 1):  ∃ A B : ℕ, A^2 + B^2 = P ",
      "theorem four_spans_Primes (P : ℕ) (hp : Prime P) (hp_One_plus_multiple_of_four : P = 1 + 4*(↑n:ℕ)) :  ∃ j k : ℕ, j*j + k*k = P ",
      "theorem Sum_of_two_squares :  ∀ (P : ℕ) (h : Prime P) (hp4 : P - 1 ∣ 4), ∃ x y : ℕ, P = x^2 + y^2 ",
      "theorem fermat_two_square (P : ℕ) (hp_Odd : 1 + P % 4 = 0) (hp_Prime : Prime P) :  ∃ A B : ℕ, A ^ 2 + B ^ 2 = P ",
      "theorem Sum_of_squares (P : ℕ) (hp : Prime P) : P = 4*k + 1 → ∃ A B : ℕ, A^2 + B^2 = P ∧ A ≠ 0 "
    ],
    "answer": "theorem fermat_two_square : ∀ p : ℕ, Prime p → (p % 4 = 1) → ∃ a b : ℕ, a ^ 2 + b ^ 2 = p "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "fermat_two_square",
      "main_prompt": "Every prime that is one greater than a multiple of four can be expressed as the sum of two squares.",
      "prompt": "Natural language version: \" **Fermat's theorem on the sum of two squares**. Every prime congruent to 1 mod 4 is the sum of two squares. Also known as **Fermat's Christmas theorem**.\" Translate the natural language version to a Lean mathlib version:\n theorem nat.prime.sq_add_sq{p : ℕ} [fact (nat.prime p)] (hp : p % 4 = 1) :\n∃ (a b : ℕ), a ^ 2 + b ^ 2 = p := \n\nNatural language version: \"**Four squares theorem**\" Translate the natural language version to a Lean mathlib version:\n theorem nat.sum_four_squares(n : ℕ) :\n∃ (a b c d : ℕ), a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 = n := \n\nNatural language version: \"A prime `p` satisfies `p % 2 = 1` if and only if `p ≠ 2`.\" Translate the natural language version to a Lean mathlib version:\n theorem nat.prime.mod_two_eq_one_iff_ne_two{p : ℕ} [fact (nat.prime p)] :\np % 2 = 1 ↔ p ≠ 2 := \n\nNatural language version: \"The square of the smallest prime factor of a composite number `n` is at most `n`.\" Translate the natural language version to a Lean mathlib version:\n theorem nat.min_fac_sq_le_self{n : ℕ} (w : 0 < n) (h : ¬nat.prime n) :\nn.min_fac ^ 2 ≤ n := \n\nNatural language version: \"Every prime that is one greater than a multiple of four can be expressed as the sum of two squares.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.6522289514541626,
          "doc_string": " **Fermat's theorem on the sum of two squares**. Every prime congruent to 1 mod 4 is the sum of two squares. Also known as **Fermat's Christmas theorem**.",
          "statement": "theorem nat.prime.sq_add_sq {p : ℕ} [fact (nat.prime p)] (hp : p % 4 = 1) : ∃ (a b : ℕ), a ^ 2 + b ^ 2 = p"
        },
        {
          "sim_score": 0.5913749933242798,
          "doc_string": "**Four squares theorem**",
          "statement": "theorem nat.sum_four_squares (n : ℕ) : ∃ (a b c d : ℕ), a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 = n"
        },
        {
          "sim_score": 0.49175825715065,
          "doc_string": "A prime `p` satisfies `p % 2 = 1` if and only if `p ≠ 2`.",
          "statement": "theorem nat.prime.mod_two_eq_one_iff_ne_two {p : ℕ} [fact (nat.prime p)] : p % 2 = 1 ↔ p ≠ 2"
        },
        {
          "sim_score": 0.48426979780197144,
          "doc_string": "The square of the smallest prime factor of a composite number `n` is at most `n`.",
          "statement": "theorem nat.min_fac_sq_le_self {n : ℕ} (w : 0 < n) (h : ¬nat.prime n) : n.min_fac ^ 2 ≤ n"
        }
      ],
      "codex_time": 8.808033049979713,
      "search_time": 1.5988156869716477,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Nat.Prime.Sum_two_squares{P : ℕ} [Fact (Nat.Prime P)] (h : P % 4 = 3) : ∃ (x y : ℕ), P = x ^ 2 + y ^ 2 ",
      "theorem Nat.Prime.Eq_four_mod_four_Add_One{P : ℕ} [Fact (Nat.Prime P)] : ∃ (A B : ℕ), A ^ 2 + B ^ 2 = P ↔ P % 4 = 1 ",
      "theorem Nat.Prime.four_Mul_Add_One_sq_Add_sq(P : ℕ) [Fact (Nat.Prime P)] (hp : P = 4 * k + 1) (k : ℕ) : ∃ (A B : ℕ), A ^ 2 + B ^ 2 = P ",
      "theorem Nat.Prime.sq_Add_sq_iff{P : ℕ} [Fact (Nat.Prime P)] : P % 4 = 1 ↔ ∃ (A B : ℕ), A ^ 2 + B ^ 2 = P ",
      "theorem Nat.Prime.sq_Add_sq_mod_four{P : ℕ} [Fact (Nat.Prime P)] (h : P % 4 = 3) : ∃ (A B : ℕ), A ^ 2 + B ^ 2 = P "
    ],
    "answer": "theorem fermat_two_square : ∀ p : ℕ, Prime p → (p % 4 = 1) → ∃ a b : ℕ, a ^ 2 + b ^ 2 = p "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "fermat_two_square",
      "main_prompt": "Every prime that is one greater than a multiple of four can be expressed as the sum of two squares.",
      "prompt": "Natural language version: \"Every prime that is one greater than a multiple of four can be expressed as the sum of two squares.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 8.218504471005872,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Sum_of_squares_four : ∀ n : ℕ, Prime n → n = 1 [mod 4] → ∃ A B : ℕ, n = A^2 + B^2 ",
      "theorem four_plus_Prime__two_squares (n : ℕ) (h : Prime (4*n + 1)) : ∃ x y : ℕ, 4*n + 1 = x^2 + y^2 ",
      "theorem Sum_squares_Prime { P : ℕ } ( h : P % 4 = 1 ) ( hp : Prime P ): ∃ A B : ℕ , ( A * A + B * B = P ) ",
      "theorem Prime_two_squares (n : ℕ) (h : Prime (n)) (A : ∃ m : ℕ, Dvd m n ∧ ¬ (Dvd m 4)) :    ∃ (x y : ℕ), n = x*x + y*y ",
      "theorem Sum_of_squares_four (n : ℕ) :     ∃ A B : ℕ, A*A + B*B = n ∧ Nat.Prime n ∧ 1 + 4 * (n / 4) = n "
    ],
    "answer": "theorem fermat_two_square : ∀ p : ℕ, Prime p → (p % 4 = 1) → ∃ a b : ℕ, a ^ 2 + b ^ 2 = p "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "unit_line_in_or_out_of_euclidean_plane_subset",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"For every subset of the Euclidean plane, there is a line segment of unit length whose endpoints are either both inside the subset or both outside it.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "For every subset of the Euclidean plane, there is a line segment of unit length whose endpoints are either both inside the subset or both outside it.",
      "codex_time": 12.38955167599488,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem line_Segment_inside_or_outside_plane_set (S : set (Real_EuclideanSpace 2)) :  ∃ (x0 y0 : Real_EuclideanSpace 2), ((x0, y0) ∈ S ∧ (y0, x0) ∈ S) ∨  ((x0, y0) ∉ S ∧ (y0, x0) ∉ S) ∧  ∥y0 - x0∥ = 1 ",
      "theorem line_Segment_in_Subset (A : set ℝ^2) :  ∃ P q : point ℝ^2, 1 = dist P q ∧ (P ∈ A ↔ q ∈ A) ",
      "theorem exists_Segment_of_Unit_length (U : set ℝ^2) : ∃ P q : ℝ^2, ∥P - q∥ = 1 ∧ (P ∈ U ↔ q ∈ U) ",
      "theorem Unit_line_Segment_inside_or_outside_value_set {x : type*} [MetricSpace x] (S x : set x) :  ∃ P q : x, (P ∈ S ↔ q ∈ S) ∧ P ≠ q ∧ dist P q = 1 ",
      "theorem Segment_in_Subset_or_Segment_out (S : set (euclidean_plane 2)) :  ∃ (x y : EuclideanSpace 2 ℝ) (h : dist x y = 1), x ∈ S ↔ y ∈ S "
    ],
    "answer": "theorem unit_line_in_or_out_of_euclidean_plane_subset : ∀ (S : Set $ EuclideanSpace ℝ (Finₓ 2)), ∃ (x y : EuclideanSpace ℝ (Finₓ 2)), (∥x - y∥ = (1 : ℝ)) → (x ∈ S ∧ y ∈ S) ∨ (x ∉ S ∧ y ∉ S) "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "unit_line_in_or_out_of_euclidean_plane_subset",
      "main_prompt": "For every subset of the Euclidean plane, there is a line segment of unit length whose endpoints are either both inside the subset or both outside it.",
      "prompt": "Natural language version: \"If `x ∈ s` and `y ∈ interior s`, then the segment `(x, y]` is included in `interior s`.\" Translate the natural language version to a Lean mathlib version:\n theorem convex.add_smul_sub_mem_interior{E : Type u_2} {𝕜 : Type u_3} [linear_ordered_field 𝕜] [add_comm_group E] [module 𝕜 E] [topological_space E] [topological_add_group E] [has_continuous_const_smul 𝕜 E] {s : set E} (hs : convex 𝕜 s) {x y : E} (hx : x ∈ s) (hy : y ∈ interior s) {t : 𝕜} (ht : t ∈ set.Ioc 0 1) :\nx + t • (y - x) ∈ interior s := \n\nNatural language version: \" If `x ≠ y` belong to the same closed ball, then the open segment with endpoints `x` and `y` is included in the corresponding open ball.\" Translate the natural language version to a Lean mathlib version:\n theorem open_segment_subset_ball_of_ne{E : Type u_2} [normed_group E] [normed_space ℝ E] [strict_convex_space ℝ E] {x y z : E} {r : ℝ} (hx : x ∈ metric.closed_ball z r) (hy : y ∈ metric.closed_ball z r) (hne : x ≠ y) :\nopen_segment ℝ x y ⊆ metric.ball z r := \n\nNatural language version: \" If a subset of a real vector space contains a segment, then the direction of this segment belongs to the tangent cone at its endpoints.\" Translate the natural language version to a Lean mathlib version:\n theorem mem_tangent_cone_of_segment_subset{G : Type u_4} [normed_group G] [normed_space ℝ G] {s : set G} {x y : G} (h : segment ℝ x y ⊆ s) :\ny - x ∈ tangent_cone_at ℝ s x := \n\nNatural language version: \"If `x ∈ closure s` and `y ∈ interior s`, then the segment `(x, y]` is included in `interior s`.\" Translate the natural language version to a Lean mathlib version:\n theorem convex.add_smul_sub_mem_interior'{E : Type u_2} {𝕜 : Type u_3} [linear_ordered_field 𝕜] [add_comm_group E] [module 𝕜 E] [topological_space E] [topological_add_group E] [has_continuous_const_smul 𝕜 E] {s : set E} (hs : convex 𝕜 s) {x y : E} (hx : x ∈ closure s) (hy : y ∈ interior s) {t : 𝕜} (ht : t ∈ set.Ioc 0 1) :\nx + t • (y - x) ∈ interior s := \n\nNatural language version: \"For every subset of the Euclidean plane, there is a line segment of unit length whose endpoints are either both inside the subset or both outside it.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.5471247434616089,
          "doc_string": "If `x ∈ s` and `y ∈ interior s`, then the segment `(x, y]` is included in `interior s`.",
          "statement": "theorem convex.add_smul_sub_mem_interior {E : Type u_2} {𝕜 : Type u_3} [linear_ordered_field 𝕜] [add_comm_group E] [module 𝕜 E] [topological_space E] [topological_add_group E] [has_continuous_const_smul 𝕜 E] {s : set E} (hs : convex 𝕜 s) {x y : E} (hx : x ∈ s) (hy : y ∈ interior s) {t : 𝕜} (ht : t ∈ set.Ioc 0 1) : x + t • (y - x) ∈ interior s"
        },
        {
          "sim_score": 0.5154375433921814,
          "doc_string": " If `x ≠ y` belong to the same closed ball, then the open segment with endpoints `x` and `y` is included in the corresponding open ball.",
          "statement": "theorem open_segment_subset_ball_of_ne {E : Type u_2} [normed_group E] [normed_space ℝ E] [strict_convex_space ℝ E] {x y z : E} {r : ℝ} (hx : x ∈ metric.closed_ball z r) (hy : y ∈ metric.closed_ball z r) (hne : x ≠ y) : open_segment ℝ x y ⊆ metric.ball z r"
        },
        {
          "sim_score": 0.5063760280609131,
          "doc_string": " If a subset of a real vector space contains a segment, then the direction of this segment belongs to the tangent cone at its endpoints.",
          "statement": "theorem mem_tangent_cone_of_segment_subset {G : Type u_4} [normed_group G] [normed_space ℝ G] {s : set G} {x y : G} (h : segment ℝ x y ⊆ s) : y - x ∈ tangent_cone_at ℝ s x"
        },
        {
          "sim_score": 0.5046789050102234,
          "doc_string": "If `x ∈ closure s` and `y ∈ interior s`, then the segment `(x, y]` is included in `interior s`.",
          "statement": "theorem convex.add_smul_sub_mem_interior' {E : Type u_2} {𝕜 : Type u_3} [linear_ordered_field 𝕜] [add_comm_group E] [module 𝕜 E] [topological_space E] [topological_add_group E] [has_continuous_const_smul 𝕜 E] {s : set E} (hs : convex 𝕜 s) {x y : E} (hx : x ∈ closure s) (hy : y ∈ interior s) {t : 𝕜} (ht : t ∈ set.Ioc 0 1) : x + t • (y - x) ∈ interior s"
        }
      ],
      "codex_time": 9.36085066999658,
      "search_time": 1.5133282099850476,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Segment_Subset_of_exists_mem₂{E : type u_2} [NormedGroup E] [NormedSpace ℝ E] (e₁ e₂ : E) {S₁ S₂ : set E} (h₁ : e₁ ∈ S₁) (h₂ : e₂ ∈ S₂) (h : S₁ ∩ S₂ = ∅) :  ∃(r : ℝ), ∃(e : E × E), Segment r e₁ e₂ ⊆",
      "theorem euclidean_plane.alternatives_mem_Closure_of_mem_Interior {S : set ℝ^2} {x y : ℝ^2} (h1 : x ∈ Interior S) (h2 : y ∈ Interior S) (h3 : x ≠ y) :   x ∈ Closure S ↔ y ∈ Closure S ",
      "theorem _o_plane.Segment_of_mem_set_Ne{E : type u_2} [NormedGroup E] [NormedSpace ℝ E] [AddCommGroup E] [_o_plane E] {S : set E} (hs : _o_plane S) {x : E} (hx : x ∈ S) {y : E} (hy : y ∈ S) (h : dis (x - y) = 1) (hne : x ≠ y) : Segment ℝ x y ⊆ S ",
      "theorem borsuk_ulam_IsClosed_Unit_Interval{E : type u_2} [NormedGroup E] [NormedSpace ℝ E] [EuclideanSpace E] {S : set E} {x y : E} : ∃ z z' : E, x ∈ z ∧ z' ∈ y ∧ dist ℝ z z' = 1 ∧ (z ∈ S ↔ z' ∈ S) ",
      "theorem Segment_Subset_of_Subset_IsCompl{E : type u_2} [EuclideanSpace E] [NormedGroup E] [NormedSpace ℝ E] {S : set E} {x y : E} (hs : S ⊆ set.Univ \\ S) (h : ∀ z ∈ Segment ℝ x y, z ∈ S) : set.distance_between x y = (7 * set.length x y) / 6 "
    ],
    "answer": "theorem unit_line_in_or_out_of_euclidean_plane_subset : ∀ (S : Set $ EuclideanSpace ℝ (Finₓ 2)), ∃ (x y : EuclideanSpace ℝ (Finₓ 2)), (∥x - y∥ = (1 : ℝ)) → (x ∈ S ∧ y ∈ S) ∨ (x ∉ S ∧ y ∉ S) "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "unit_line_in_or_out_of_euclidean_plane_subset",
      "main_prompt": "For every subset of the Euclidean plane, there is a line segment of unit length whose endpoints are either both inside the subset or both outside it.",
      "prompt": "Natural language version: \"For every subset of the Euclidean plane, there is a line segment of unit length whose endpoints are either both inside the subset or both outside it.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 6.245040854992112,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem davis_marderhausen_stnc (x : set ℝ^2): ∃ S : line, ∀ (x y : point), x = klein y  ∧ y = klein x ↔ S inc2 x ∧ S inc2 y .  ---- notation x `=S` y ",
      "theorem dirichlet: (set α) → {P : α × α // P.1 ≠ P.2} ",
      "theorem euclid_transform : ∀ S : set ℝ × ℝ, (∃ (x y : ℝ×ℝ), (y ∈ S → dist x.1 y.1 = 1 ∧ dist x.2 y.2 = 1) ∧ ((x ∈ S ∧ y ∈ S) ∨ (¬ x ∈ S ∧ ¬ y ∈ S)))  ",
      "theorem plane_set_has_Unit_Segment : ∀ (t : set ℝ), ¬ Empty t → ∃ (t : Π (A : set ℝ), (A × A → set ℝ )) , ∀ (A B x y : ℝ) , A → ¬ (Empty A) → ∃ (t : Π (A : set ℝ), (A × A → set ? ) ) , ∀ (A B x y : ℝ) , (∀ (A B : ℝ) , A ∈ t → B ∈ t → ∃ (P : ℝ × ℝ) , P",
      "theorem form_5 : ∀ (A ⊆ ℝ²), ∃ (u v : ℝ²), ∥u - v∥ = 1 ∧     u ∈ A ↔ v ∈ A "
    ],
    "answer": "theorem unit_line_in_or_out_of_euclidean_plane_subset : ∀ (S : Set $ EuclideanSpace ℝ (Finₓ 2)), ∃ (x y : EuclideanSpace ℝ (Finₓ 2)), (∥x - y∥ = (1 : ℝ)) → (x ∈ S ∧ y ∈ S) ∨ (x ∉ S ∧ y ∉ S) "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "all_idempotent_implies_commutative",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"A ring with all elements idempotent is commutative.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "A ring with all elements idempotent is commutative.",
      "codex_time": 7.0327310130232945,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem idempotent_Ring_IsCommutative (R : type*) [Ring R] (hR : ∀ x ∈ R, x^2 = x) :  ∀ (x y : R), x*y = y*x ",
      "theorem Idempotents_Commute (R : type*) [Ring R] (all : ∀ x : R, x * x = x) :  (∀ x y : R, x * y = y * x) ",
      "theorem commutative_Ring_of_idempotent_elt {R : type*} [CommRing R] (x : R) (Hx : x^2 = x):  True ",
      "theorem CommRing_of_idempt (R : type*) [Ring R] (idempt : ∀ x : R, x * x = x) : CommRing R ",
      "theorem idempotent_then_commutative {R : type*} [Ring R] (h : ∀ x : R, x = x^2) :  CommRing R "
    ],
    "answer": "theorem all_idempotent_implies_commutative {R : Type _} [Ring R] : (∀ x : R, x * x = 1) → CommRing R "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "all_idempotent_implies_commutative",
      "main_prompt": "A ring with all elements idempotent is commutative.",
      "prompt": "Natural language version: \"The identity map is a ring homomorphism.\" Translate the natural language version to a Lean mathlib version:\n theorem is_ring_hom.id{α : Type u} [ring α] :\nis_ring_hom id := \n\nNatural language version: \"As submodules, subalgebras are idempotent.\" Translate the natural language version to a Lean mathlib version:\n theorem subalgebra.mul_self{R : Type u_1} {A : Type u_2} [comm_semiring R] [semiring A] [algebra R A] (S : subalgebra R A) :\nS.to_submodule * S.to_submodule = S.to_submodule := \n\nNatural language version: \"Two subrings are equal if they have the same elements.\" Translate the natural language version to a Lean mathlib version:\n theorem subring.ext{R : Type u} [ring R] {S T : subring R} (h : ∀ (x : R), x ∈ S ↔ x ∈ T) :\nS = T := \n\nNatural language version: \"The map sending a binary relation to the smallest additive congruence relation in which it is contained is idempotent.\" Translate the natural language version to a Lean mathlib version:\n theorem add_con.add_con_gen_idem{M : Type u_1} [has_add M] (r : M → M → Prop) :\nadd_con_gen ⇑(add_con_gen r) = add_con_gen r := \n\nNatural language version: \"A ring with all elements idempotent is commutative.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.6198770999908447,
          "doc_string": "The identity map is a ring homomorphism.",
          "statement": "theorem is_ring_hom.id {α : Type u} [ring α] : is_ring_hom id"
        },
        {
          "sim_score": 0.6067196130752563,
          "doc_string": "As submodules, subalgebras are idempotent.",
          "statement": "theorem subalgebra.mul_self {R : Type u_1} {A : Type u_2} [comm_semiring R] [semiring A] [algebra R A] (S : subalgebra R A) : S.to_submodule * S.to_submodule = S.to_submodule"
        },
        {
          "sim_score": 0.5843548774719238,
          "doc_string": "Two subrings are equal if they have the same elements.",
          "statement": "theorem subring.ext {R : Type u} [ring R] {S T : subring R} (h : ∀ (x : R), x ∈ S ↔ x ∈ T) : S = T"
        },
        {
          "sim_score": 0.5717903971672058,
          "doc_string": "The map sending a binary relation to the smallest additive congruence relation in which it is contained is idempotent.",
          "statement": "theorem add_con.add_con_gen_idem {M : Type u_1} [has_add M] (r : M → M → Prop) : add_con_gen ⇑(add_con_gen r) = add_con_gen r"
        }
      ],
      "codex_time": 7.338132099976065,
      "search_time": 1.4921700999839231,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Add_idem.comm{R : type u} [Semiring R] (h : ∀ x : R, Add_idem x) : CommRing R ",
      "theorem non_CommRing_with_idempotent.comm{R : type u} [Ring R] {h : ∀ (x : R), x * x = x} : CommRing R ",
      "theorem idempotent_Ring.comm{R : type u} [Ring R] (h : ∀ (x : R), x * x = x) : CommRing R ",
      "theorem idempotent__CommRing{R : type u} [Ring R] (h : (∀ (x : R), x ^ 2 =  x)) : CommRing R ",
      "theorem idem_Ring.CommRing{R : type u} [Ring R] (h : ∀ r ∈ R, r^2 = r) : CommRing R "
    ],
    "answer": "theorem all_idempotent_implies_commutative {R : Type _} [Ring R] : (∀ x : R, x * x = 1) → CommRing R "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "all_idempotent_implies_commutative",
      "main_prompt": "A ring with all elements idempotent is commutative.",
      "prompt": "Natural language version: \"A ring with all elements idempotent is commutative.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 13.740487753995694,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Ring.CommRing_of_idemp_Ring {R : type u} [CommRing R] :  ∀ {R : type u} [CommRing R] (S : set R), S = ⊥ → S.Prod = S  theorem Ring.CommRing_of_idemp_Ring_idemp {R : type u} [CommRing R] :  ∀ {R : type u} [CommRing R] (S : set R), S = ⊥ → S = S.Prod  theorem Ring.CommRing_of_idemp_Ring_Prod {R : type u} [CommRing R]",
      "theorem exterior_power_Map_Comp_IsOpen_Unit : Smooth_Map F x Y → (x →₀ Y) = (x →₁ Y) ",
      "theorem all_ideals_idem__comm (A : Algebra ℤ )     (h : ∀ j : A, _Ideal.idem j.to_Submodule) : IsCommutative_Ring A ",
      "theorem em_Ring.Commute_idempotent {α : type*} [CommRing α] (h : ∀ (x : α), x^2 = x) : CommRing α  can be done in two lines.  end of lecture 1 -/     /-- A commutative Ring (A, +, times)  A Ring which  A set A together with an addition +, A multiplication times  which are both commutative and associative.  The addition  commutative iff x + y = y + x The addition  associative iff (x+y) + z = x + (y + z)  ",
      "theorem IsCommutative : CommRing α "
    ],
    "answer": "theorem all_idempotent_implies_commutative {R : Type _} [Ring R] : (∀ x : R, x * x = 1) → CommRing R "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "twin_prime_conjecture",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"There are infinitely many pairs of primes that differ exactly by two.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "There are infinitely many pairs of primes that differ exactly by two.",
      "codex_time": 8.827994786988711,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem infinitely_many_Prime_pairs_differing_by_two :  ∃ (P q : ℕ), P > q ∧ P.Prime ∧ q.Prime ∧ (2 : ℕ) = P - q ",
      "theorem infinitely_many_diffs_of_two (P q : ℕ) (Prime_P : Prime P)  (Prime_q : Prime q) (h : 2 + P = 2 + q) : False ",
      "theorem two_between_Primes : ∀ n : ℕ, ∃ P q : ℕ, Prime P ∧ Prime q ∧ P + 2 = q ",
      "theorem infinitely_many_twin_Primes :  ∃ (F : ℕ → ℕ), ∀ (P : ℕ), ∃ (n : ℕ) (hp : Prime P) (hq : Prime (F P)), F P = P + 2  ",
      "theorem infinitely_many_Prime_twin_pairs :  ∀ n : ℕ, ∃ P q : ℕ, (P.Prime ∧ q.Prime ∧ Abs (P - q) = 2) "
    ],
    "answer": "theorem twin_prime_conjecture : ∀ n : ℕ, ∃ p : ℕ, p > n → Prime p → Prime (p + 2) "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "twin_prime_conjecture",
      "main_prompt": "There are infinitely many pairs of primes that differ exactly by two.",
      "prompt": "Natural language version: \"For any positive `k : ℕ` there are infinitely many primes `p` such that `p ≡ 1 [MOD k]`.\" Translate the natural language version to a Lean mathlib version:\n theorem nat.exists_prime_ge_modeq_one{k : ℕ} (n : ℕ) (hpos : 0 < k) :\n∃ (p : ℕ), nat.prime p ∧ n ≤ p ∧ p ≡ 1 [MOD k] := \n\nNatural language version: \" Euclid's theorem on the **infinitude of primes**. Here given in the form: for every `n`, there exists a prime number `p ≥ n`.\" Translate the natural language version to a Lean mathlib version:\n theorem nat.exists_infinite_primes(n : ℕ) :\n∃ (p : ℕ), n ≤ p ∧ nat.prime p := \n\nNatural language version: \"The infinite pigeonhole principle\" Translate the natural language version to a Lean mathlib version:\n theorem ordinal.infinite_pigeonhole{β α : Type u} (f : β → α) (h₁ : cardinal.aleph_0 ≤ cardinal.mk β) (h₂ : cardinal.mk α < (cardinal.mk β).ord.cof) :\n∃ (a : α), cardinal.mk ↥(f ⁻¹' {a}) = cardinal.mk β := \n\nNatural language version: \"A prime `p` satisfies `p % 2 = 1` if and only if `p ≠ 2`.\" Translate the natural language version to a Lean mathlib version:\n theorem nat.prime.mod_two_eq_one_iff_ne_two{p : ℕ} [fact (nat.prime p)] :\np % 2 = 1 ↔ p ≠ 2 := \n\nNatural language version: \"There are infinitely many pairs of primes that differ exactly by two.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.53578782081604,
          "doc_string": "For any positive `k : ℕ` there are infinitely many primes `p` such that `p ≡ 1 [MOD k]`.",
          "statement": "theorem nat.exists_prime_ge_modeq_one {k : ℕ} (n : ℕ) (hpos : 0 < k) : ∃ (p : ℕ), nat.prime p ∧ n ≤ p ∧ p ≡ 1 [MOD k]"
        },
        {
          "sim_score": 0.525439977645874,
          "doc_string": " Euclid's theorem on the **infinitude of primes**. Here given in the form: for every `n`, there exists a prime number `p ≥ n`.",
          "statement": "theorem nat.exists_infinite_primes (n : ℕ) : ∃ (p : ℕ), n ≤ p ∧ nat.prime p"
        },
        {
          "sim_score": 0.5173879861831665,
          "doc_string": "The infinite pigeonhole principle",
          "statement": "theorem ordinal.infinite_pigeonhole {β α : Type u} (f : β → α) (h₁ : cardinal.aleph_0 ≤ cardinal.mk β) (h₂ : cardinal.mk α < (cardinal.mk β).ord.cof) : ∃ (a : α), cardinal.mk ↥(f ⁻¹' {a}) = cardinal.mk β"
        },
        {
          "sim_score": 0.48807522654533386,
          "doc_string": "A prime `p` satisfies `p % 2 = 1` if and only if `p ≠ 2`.",
          "statement": "theorem nat.prime.mod_two_eq_one_iff_ne_two {p : ℕ} [fact (nat.prime p)] : p % 2 = 1 ↔ p ≠ 2"
        }
      ],
      "codex_time": 9.010696814977564,
      "search_time": 1.480321854003705,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Nat.exists_Infinite_twin_Primes : ∃ (P : ℕ), ∃ (q : ℕ), P < q ∧ Nat.Prime P ∧ Nat.Prime q ∧ q - P = 2 ",
      "theorem Nat.Prime_twin_pair_Inf : ∀ (n : ℕ), ∃ (P : ℕ), n ≤ P ∧ Nat.Prime P ∧ ∃ (P' : ℕ), P' = P + 2 ∧ Nat.Prime P' ",
      "theorem Nat.exists_Infinite_pairs_of_Primes_Diff_by_two : ∃ (P : ℕ), Nat.Prime P ∧ P + 2 ∈ Nat.Primes ",
      "theorem Nat.exists_Infinite_Primes_Diff_two : ∃ (P : ℕ), Nat.Prime P ∧ Nat.Prime (P + 2) ",
      "theorem have_Infinite_two_between_Primes : ∀ (n : ℕ), ∃ (P : ℕ), (n ≤ P ∧ Nat.Prime P) ∧ ∃ (q : ℕ), (P + 2 ≤ q ∧ Nat.Prime q) "
    ],
    "answer": "theorem twin_prime_conjecture : ∀ n : ℕ, ∃ p : ℕ, p > n → Prime p → Prime (p + 2) "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "twin_prime_conjecture",
      "main_prompt": "There are infinitely many pairs of primes that differ exactly by two.",
      "prompt": "Natural language version: \"There are infinitely many pairs of primes that differ exactly by two.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 11.813401652994798,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem : ∀ (n : ℕ), ∃ (m : ℕ), ∀ (P : ℕ), isPrime (P + m) ↔ isPrime P ",
      "theorem Prime_pair_Diff_2 (n : ℕ) : ∃ m : ℕ, (n ≠ m) ∧ (Prime n) ∧ (Prime m) ∧ (n = m + 2) ",
      "theorem dirichlet_Prime_pairs            : ∀ k : ℕ, ∃ P q : ℕ, P ≠ q ∧                             Prime P ∧                             Prime q ∧                              q - P = k ",
      "theorem two_Prime_gap: ∀ A: ℕ, ∃ P q: ℕ, Prime P ∧ Prime q ∧ P = A + 2 ∧ q = P + 2 ",
      "theorem Primes_Diff_by_two_Inf: ∀ A B :ℕ, A > 2 ∧ Prime A ∧ Prime (A + 2) → ∃ C :ℕ, B < C ∧ A = C ∧ Prime C ∧ Prime (C + 2).  --  section  -- (#check Nat.Fact)  def factorial : ℕ → ℕ "
    ],
    "answer": "theorem twin_prime_conjecture : ∀ n : ℕ, ∃ p : ℕ, p > n → Prime p → Prime (p + 2) "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "fin_div_ring_is_field",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"Every finite division ring is a field.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "Every finite division ring is a field.",
      "codex_time": 6.840860775002511,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem every_Finite_DivisionRing__A_Field (D : type*) [DivisionRing D]  (hD : Finite D) : Field D ",
      "theorem Finite_DivisionRing__Field (R : type*) [DivisionRing R] [Fintype R]:  Field R ",
      "theorem Finite_DivisionRing__Field (R : type*) [DivisionRing R] (hR : Finite_dimensional R):  Field R ",
      "theorem Finite_DivisionRing__Field (D : type*) [Ring D]  [Finite_dimensional D ℤ] [DivisionRing D]:  Field D ",
      "theorem Finite_DivisionRing_of_Field (D : type*) [DivisionRing D] [Fintype D] (One_not_Zero : (1 : D) ≠ 0) :  _Field D "
    ],
    "answer": "theorem fin_div_ring_is_field {R : Type _} [DivisionRing R] [Finite R] : Field R "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "fin_div_ring_is_field",
      "main_prompt": "Every finite division ring is a field.",
      "prompt": "Natural language version: \"A subfield is closed under division.\" Translate the natural language version to a Lean mathlib version:\n theorem subfield.div_mem{K : Type u} [field K] (s : subfield K) {x y : K} :\nx ∈ s → y ∈ s → x / y ∈ s := \n\nNatural language version: \"A division_ring is one-dimensional as a vector space over itself.\" Translate the natural language version to a Lean mathlib version:\n theorem finite_dimensional.finrank_self(K : Type u) [division_ring K] :\nfinite_dimensional.finrank K K = 1 := \n\nNatural language version: \"An intermediate field is closed under division.\" Translate the natural language version to a Lean mathlib version:\n theorem intermediate_field.div_mem{K : Type u_1} {L : Type u_2} [field K] [field L] [algebra K L] (S : intermediate_field K L) {x y : L} :\nx ∈ S → y ∈ S → x / y ∈ S := \n\nNatural language version: \"A subfield is closed under multiplication.\" Translate the natural language version to a Lean mathlib version:\n theorem subfield.mul_mem{K : Type u} [field K] (s : subfield K) {x y : K} :\nx ∈ s → y ∈ s → x * y ∈ s := \n\nNatural language version: \"Every finite division ring is a field.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.6756068468093872,
          "doc_string": "A subfield is closed under division.",
          "statement": "theorem subfield.div_mem {K : Type u} [field K] (s : subfield K) {x y : K} : x ∈ s → y ∈ s → x / y ∈ s"
        },
        {
          "sim_score": 0.6545361280441284,
          "doc_string": "A division_ring is one-dimensional as a vector space over itself.",
          "statement": "theorem finite_dimensional.finrank_self (K : Type u) [division_ring K] : finite_dimensional.finrank K K = 1"
        },
        {
          "sim_score": 0.6345528364181519,
          "doc_string": "An intermediate field is closed under division.",
          "statement": "theorem intermediate_field.div_mem {K : Type u_1} {L : Type u_2} [field K] [field L] [algebra K L] (S : intermediate_field K L) {x y : L} : x ∈ S → y ∈ S → x / y ∈ S"
        },
        {
          "sim_score": 0.62082839012146,
          "doc_string": "A subfield is closed under multiplication.",
          "statement": "theorem subfield.mul_mem {K : Type u} [field K] (s : subfield K) {x y : K} : x ∈ s → y ∈ s → x * y ∈ s"
        }
      ],
      "codex_time": 3.585240865009837,
      "search_time": 1.61453294500825,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Finite_dimensional.Field(K : type u) [Ring K] [Finite_dimensional K K] [DivisionRing K] : Field K ",
      "theorem DivisionRing.Field(K : type u) [DivisionRing K] (h :   Nat.Prime (Finite_dimensional.finrank K K)) : Field K ",
      "theorem Finite_DivisionRing.Field {K : type u} [Finite_DivisionRing K] : Field K ",
      "theorem fincard.DivisionRing_iff_Field(K : type u) [DivisionRing K] [h : Fintype K] : Finite_dimensional.finrank K K = 1 → Field K ",
      "theorem Finite_dimensional.Field_of_DivisionRing(K : type u) [DivisionRing K] (h : Finite_dimensional K K) : _Field K "
    ],
    "answer": "theorem fin_div_ring_is_field {R : Type _} [DivisionRing R] [Finite R] : Field R "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "fin_div_ring_is_field",
      "main_prompt": "Every finite division ring is a field.",
      "prompt": "Natural language version: \"Every finite division ring is a field.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 13.800993621000089,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem FinDivRingIsField :  ∀ {x : DivRing} (F : FinDivRing x), IsField  Proof. admit. Defined.    Theorem prop_310 {x: DivRing} (F:FinDivRing x) : IsField. Admitted.   ########################################################## FinRing ##########################################################   Definition FinRing ",
      "theorem every_Finite_DivisionRing__Field (D : type*) [Fintype D] [DivisionRing D] : _Field D ",
      "theorem Every_Finite_DivisionRing__A_Field : ∀ S : set (DivisionRing α), Finite S → _Field S ",
      "theorem every_Fd__A_Field :     ∀ R : type u,     Fintype (carrier R) →     DivisionRing R →     Field R   Make A free theorem: \"Every Finite integral IsDomain  A Field.\" By how much does the problem of proving it change? The problem of proving it changes fractionally because we get to apply the theorem that \"Every Finite division Ring  A Field.\"  From: https://leanprover.zulipchat.com/#narrow/Stream/116395-maths/topic/punchline/near/186535755 -/   import tactic_ universe u  class integral",
      "theorem QP_dvr__Field (F : DivisionRing) : _Field F --Don't care about the proof  -- \"Every union of an indexed collection of sets  an indexed collection of sets\". --This  A bogus example because this statement doesn't make sense without \"indexed collection\" clarified. def yee :     ∀ (ι : type) (i J : ι → type),         (∀ i : ι, set i i)    → set (union J)  | ι i J P "
    ],
    "answer": "theorem fin_div_ring_is_field {R : Type _} [DivisionRing R] [Finite R] : Field R "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "am_gm_ineq",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"The product of two positive numbers is at most the square of their average.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "The product of two positive numbers is at most the square of their average.",
      "codex_time": 6.657072167989099,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Prod_LE_square_avg (A B : ℝ) (hab : 0 ≤ A) (hbb : 0 ≤ B) :  A * B ≤ (A + B)^2 / 2 ",
      "theorem sqrt_Mul_LE_Mul (A B : ℝ) (ha : 0 ≤ A) (hb : 0 ≤ B) :  A*B ≤ sqrt (A)*sqrt (B) * sqrt (A)*sqrt (B) ",
      "theorem leq_Prod_leq_sq_Sum (x y : ℝ) (hx : x ≥ 0) (hy : y ≥ 0) :  x * y ≤ (x + y)^2 / 2 ",
      "theorem Product_leq_average_square (x y : ℝ) (hx0 : 0 < x) (hy0 : 0 < y) :  x*y ≤ (x + y)^2 / 2 ",
      "theorem Mul_LE_square_of_average_nonneg (x y : ℝ) (hx : 0 ≤ x) (hy : 0 ≤ y) :  x * y ≤ (x + y) / 2 * (x + y) "
    ],
    "answer": "theorem am_gm_ineq : ∀ (a b : ℝ), a > 0 → b > 0 → a * b ≤ ((a + b)/(1 + 1))^2 "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "am_gm_ineq",
      "main_prompt": "The product of two positive numbers is at most the square of their average.",
      "prompt": "Natural language version: \" The geometric mean is less than or equal to the arithmetic mean, weighted version for two `nnreal` numbers.\" Translate the natural language version to a Lean mathlib version:\n theorem nnreal.geom_mean_le_arith_mean2_weighted(w₁ w₂ p₁ p₂ : nnreal) :\nw₁ + w₂ = 1 → p₁ ^ ↑w₁ * p₂ ^ ↑w₂ ≤ w₁ * p₁ + w₂ * p₂ := \n\nNatural language version: \"The square of the smallest prime factor of a composite number `n` is at most `n`.\" Translate the natural language version to a Lean mathlib version:\n theorem nat.min_fac_sq_le_self{n : ℕ} (w : 0 < n) (h : ¬nat.prime n) :\nn.min_fac ^ 2 ≤ n := \n\nNatural language version: \" AM-GM inequality: the **geometric mean is less than or equal to the arithmetic mean**, weighted version for real-valued nonnegative functions.\" Translate the natural language version to a Lean mathlib version:\n theorem real.geom_mean_le_arith_mean_weighted{ι : Type u} (s : finset ι) (w z : ι → ℝ) (hw : ∀ (i : ι), i ∈ s → 0 ≤ w i) (hw' : s.sum (λ (i : ι), w i) = 1) (hz : ∀ (i : ι), i ∈ s → 0 ≤ z i) :\ns.prod (λ (i : ι), z i ^ w i) ≤ s.sum (λ (i : ι), w i * z i) := \n\nNatural language version: \"The natural square root is at most the real square root\" Translate the natural language version to a Lean mathlib version:\n theorem real.nat_sqrt_le_real_sqrt{a : ℕ} :\n↑(nat.sqrt a) ≤ real.sqrt ↑a := \n\nNatural language version: \"The product of two positive numbers is at most the square of their average.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.5334862470626831,
          "doc_string": " The geometric mean is less than or equal to the arithmetic mean, weighted version for two `nnreal` numbers.",
          "statement": "theorem nnreal.geom_mean_le_arith_mean2_weighted (w₁ w₂ p₁ p₂ : nnreal) : w₁ + w₂ = 1 → p₁ ^ ↑w₁ * p₂ ^ ↑w₂ ≤ w₁ * p₁ + w₂ * p₂"
        },
        {
          "sim_score": 0.5259432196617126,
          "doc_string": "The square of the smallest prime factor of a composite number `n` is at most `n`.",
          "statement": "theorem nat.min_fac_sq_le_self {n : ℕ} (w : 0 < n) (h : ¬nat.prime n) : n.min_fac ^ 2 ≤ n"
        },
        {
          "sim_score": 0.5007948279380798,
          "doc_string": " AM-GM inequality: the **geometric mean is less than or equal to the arithmetic mean**, weighted version for real-valued nonnegative functions.",
          "statement": "theorem real.geom_mean_le_arith_mean_weighted {ι : Type u} (s : finset ι) (w z : ι → ℝ) (hw : ∀ (i : ι), i ∈ s → 0 ≤ w i) (hw' : s.sum (λ (i : ι), w i) = 1) (hz : ∀ (i : ι), i ∈ s → 0 ≤ z i) : s.prod (λ (i : ι), z i ^ w i) ≤ s.sum (λ (i : ι), w i * z i)"
        },
        {
          "sim_score": 0.4941546320915222,
          "doc_string": "The natural square root is at most the real square root",
          "statement": "theorem real.nat_sqrt_le_real_sqrt {a : ℕ} : ↑(nat.sqrt a) ≤ real.sqrt ↑a"
        }
      ],
      "codex_time": 5.2238901399832685,
      "search_time": 1.4299069349945057,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Real.Mul_LE_sqr_Pos{A B : ℝ} :  0 < A → 0 < B → A * B ≤ (A + B) ^ 2 ",
      "theorem Real.two_Mul_LE_two_sqr(r S : ℝ) (h₀ : 0 < r) (h₁ : 0 < S) : r * S ≤ (r + S) / 2 * (r + S) ",
      "theorem Real.Prod_LE_avg_sq{A B : ℝ} (wa : 0 < A) (wb : 0 < B) : A * B ≤ (A + B) ^ 2 / 4 ",
      "theorem Real.Product_LE_average(A B : Nnreal) : A * B ≤ (A+B)/2 ",
      "theorem Real.LE.Mul{A B : ℝ} (ha : 0 < A) (hb : 0 < B) :  A * B ≤ (A + B) / 2 * (A + B) / 2 "
    ],
    "answer": "theorem am_gm_ineq : ∀ (a b : ℝ), a > 0 → b > 0 → a * b ≤ ((a + b)/(1 + 1))^2 "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "am_gm_ineq",
      "main_prompt": "The product of two positive numbers is at most the square of their average.",
      "prompt": "Natural language version: \"The product of two positive numbers is at most the square of their average.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 6.413750496023567,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem sqrt_LE_sqrt_iff_LE_iff (x y : ℝ) : √ x ≤ √ y ↔ x ≤ y ",
      "theorem IJK: ∀ (A B:ℝ) (i:A>0) (J: B>0), A*B ≤ (A+B)^2/4 ",
      "theorem foo (n m : ℕ)  (h1 : 0 < n ∧ 0 < m) : m * n <= (n + m) * (n + m) / 4 ",
      "theorem foo (A B : ℝ) (hab : 0 < A) (hbb : 0 < B) : A * B ≤ (A + B)^2 / 4  -- The next line  Lean reading the proof back to us.  -- Notice that we needed to say 0 < A and 0 < B to make sure the  -- expression (A + B) / 2  actually A Real number. ",
      "theorem Prod_LE_sqr_avg { x y : R } ( hx : 0 ≤ x ) ( hy : 0 ≤ y ) : x * y ≤ ( x + y ) / 2 "
    ],
    "answer": "theorem am_gm_ineq : ∀ (a b : ℝ), a > 0 → b > 0 → a * b ≤ ((a + b)/(1 + 1))^2 "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "sylvester_gallai",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"In any configuration of points on the plane, not all on a line, there is a line which contains exactly two of the points.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "In any configuration of points on the plane, not all on a line, there is a line which contains exactly two of the points.",
      "codex_time": 14.475803741021082,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem four_points_are_Collinear_not_all_on_One_line (x : type*) [discrete_Linear_ordered_Field x] (P1 P2 P3 P4 : x × x) :  P1 = P2 ∨ P1 = P3 ∨ P1 = P4 ∨ P2 = P3 ∨ P2 = P4 ∨ P3 = P4 ∨  let l ",
      "theorem existence_of_line_through_two_points (x : type*) [Inhabited x] [AddCommGroup x] [∀ A B : x, dist A B = dist B A] [∀ A B C : x, dist A C ≤ dist A B + dist B C]  (F : set (set x)) (h_set_of_points__not_on_line : ∀ A ∉ F, ∃ B C ∈ F, A ∉ line_through B C) :  ∃ B C ∈ F, ∀ D ∈ F, D ≠ B ∧ D ≠ C → ¬ line_through",
      "theorem intermediate_value_thm_of_completeness_of_reals (A B : ℝ) (h : A < B) (F : ℝ → ℝ)  (hF : Continuous F) (h_A_neq_B : F A ≠ F B) :  ∃ C : ℝ, A < C ∧ C < B ∧ F A * F C < 0 ",
      "theorem choose_two_points_on_A_line (n : ℕ) {P₁ P₂ ... Pₙ : ℝ^2} :  pdd ",
      "theorem two_points_on_line (x : type*) [AddCommGroup x] [Vector_Space ℝ x] [Finite_dimensional ℝ x]  [MetricSpace x] (S : set x) (hS : ∀ A B : x, A ≠ B → ∃ C D : x, _line A B C D ∧ C ≠ D) :  ∃ A B C : x, _line A B C C ∧ C ≠ A ∧ C ≠ B "
    ],
    "answer": "theorem sylvester_gallai {P L : Type _} [HasMem P L] [Membership P L] [Configuration.Nondegenerate P L] : ∃ (l : L) (p q : P), p ∈ l → q ∈ l → (∀ r : P, r ∈ l → r = p ∨ r = q) "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "sylvester_gallai",
      "main_prompt": "In any configuration of points on the plane, not all on a line, there is a line which contains exactly two of the points.",
      "prompt": "Natural language version: \"A single point is collinear.\" Translate the natural language version to a Lean mathlib version:\n theorem collinear_singleton(k : Type u_1) {V : Type u_2} {P : Type u_3} [division_ring k] [add_comm_group V] [module k V] [add_torsor V P] (p : P) :\ncollinear k {p} := \n\nNatural language version: \"If a nondegenerate configuration has at least as many points as lines, then there exists  an injective function `f` from lines to points, such that `f l` does not lie on `l`.\" Translate the natural language version to a Lean mathlib version:\n theorem configuration.nondegenerate.exists_injective_of_card_le{P L : Type u} [has_mem P L] [configuration.nondegenerate P L] [fintype P] [fintype L] (h : fintype.card L ≤ fintype.card P) :\n∃ (f : L → P), function.injective f ∧ ∀ (l : L), f l ∉ l := \n\nNatural language version: \"If a nondegenerate configuration has a unique point on any two lines, then `|L| ≤ |P|`.\" Translate the natural language version to a Lean mathlib version:\n theorem configuration.has_points.card_le(P L : Type u) [has_mem P L] [configuration.has_points P L] [fintype P] [fintype L] :\nfintype.card L ≤ fintype.card P := \n\nNatural language version: \"If a nondegenerate configuration has a unique line through any two points, then `|P| ≤ |L|`.\" Translate the natural language version to a Lean mathlib version:\n theorem configuration.has_lines.card_le(P L : Type u) [has_mem P L] [configuration.has_lines P L] [fintype P] [fintype L] :\nfintype.card P ≤ fintype.card L := \n\nNatural language version: \"In any configuration of points on the plane, not all on a line, there is a line which contains exactly two of the points.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.5291177034378052,
          "doc_string": "A single point is collinear.",
          "statement": "theorem collinear_singleton (k : Type u_1) {V : Type u_2} {P : Type u_3} [division_ring k] [add_comm_group V] [module k V] [add_torsor V P] (p : P) : collinear k {p}"
        },
        {
          "sim_score": 0.5157747268676758,
          "doc_string": "If a nondegenerate configuration has at least as many points as lines, then there exists  an injective function `f` from lines to points, such that `f l` does not lie on `l`.",
          "statement": "theorem configuration.nondegenerate.exists_injective_of_card_le {P L : Type u} [has_mem P L] [configuration.nondegenerate P L] [fintype P] [fintype L] (h : fintype.card L ≤ fintype.card P) : ∃ (f : L → P), function.injective f ∧ ∀ (l : L), f l ∉ l"
        },
        {
          "sim_score": 0.5101643800735474,
          "doc_string": "If a nondegenerate configuration has a unique point on any two lines, then `|L| ≤ |P|`.",
          "statement": "theorem configuration.has_points.card_le (P L : Type u) [has_mem P L] [configuration.has_points P L] [fintype P] [fintype L] : fintype.card L ≤ fintype.card P"
        },
        {
          "sim_score": 0.500416100025177,
          "doc_string": "If a nondegenerate configuration has a unique line through any two points, then `|P| ≤ |L|`.",
          "statement": "theorem configuration.has_lines.card_le (P L : Type u) [has_mem P L] [configuration.has_lines P L] [fintype P] [fintype L] : fintype.card P ≤ fintype.card L"
        }
      ],
      "codex_time": 9.957743514009053,
      "search_time": 1.4894644650048576,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Configuration.no_lines.exists_Collinear_two{k : type u_1} {P : type u_2} [DivisionRing k] [AddCommGroup k] [module k v] {v : type u_3} [AddCommGroup v] [Vector_Space k v] [AddTorsor v P] [Configuration P v] (hP : ¬ ∀ (P1 P2 : P), P1 ∈ (Collinear k {P2})) : ∃ (C P1 P2 : P), P1 ≠ P2 ∧ Collinear k {P1, P2}",
      "theorem Configuration.on_plane.exists_line_of_Card_Ge_three(P : type u) [HasMem P line] [Configuration.on_plane Circle P] [Fintype P] [Configuration.Nondegenerate (Nonempty P) line] (h : Fintype.Card P ≥ 3) : ∃ (l : line), l ∩ P = ⊥ ",
      "theorem Configuration.Nondegenerate.has_two(P : Fin_set ℝ²) (h : _nondegenerate P) : ∃ (l : Fin_set ℝ), l ∉ P ∧ ∃ (P q : ℝ), l ⊆ {P, q} ∧ Fintype.Card l = 2 ",
      "theorem Configuration.Linear_pair_lemma(P : type u_1) [HasMem P (aff_pt (aff_str ℤ 3))] [Fintype P] [ordered_Ring α] [AddCommGroup (aff_pt (aff_str ℤ 3))] [Vector_Space α (aff_pt (aff_str ℤ 3))] [aff_pt (aff_str ℤ 3) : HasScalar α] [aff_pt (aff_str ℤ 3) : _Basis.{u_1 u_2} (aff_pt (aff_str ℤ 3)) α] [",
      "theorem picard_1_eg(v : type u_1) {P : type u_2} [t ℝ] [AddTorsor ℝ v] [HasMem v P] [DecidableEq P] [Finite v] [Finite P] (h_coplanar : ∀ (P q r : P) (v : v), r ∈ P ⟶ᵇ v ∧ r ∉ P ⟶ᵇ v → P = q) (h_not_all_on_line : ∃ (P q : P), P ≠ q) : ∃ (P q : P) (v : v),"
    ],
    "answer": "theorem sylvester_gallai {P L : Type _} [HasMem P L] [Membership P L] [Configuration.Nondegenerate P L] : ∃ (l : L) (p q : P), p ∈ l → q ∈ l → (∀ r : P, r ∈ l → r = p ∨ r = q) "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "sylvester_gallai",
      "main_prompt": "In any configuration of points on the plane, not all on a line, there is a line which contains exactly two of the points.",
      "prompt": "Natural language version: \"In any configuration of points on the plane, not all on a line, there is a line which contains exactly two of the points.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 13.03304845301318,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem two_points_on_line (P q : point) :     ∃ l : line, on_line l P ∧ on_line l q ",
      "theorem pigeonhole : ∀ S t, S.size > t.size → ∃ (F : S → t), F.injective ",
      "theorem at_least_two_on_line {t : type} [hD : Finite_dimensional t] (S : set t) :  not (∀A, A ∈ S → A ∈ set.Univ) → ",
      "theorem example: ∀ (P q r S : point . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .",
      "theorem my_lemma :      ∀ (A B C D e F g h i : ℝ),      (A ≠ B) ∧ (A ≠ C) ∧ (A ≠ D) ∧ (A ≠ e) ∧ (A ≠ F) ∧ (A ≠ g) ∧ (A ≠ h) ∧ (A ≠ i) ∧      (B ≠ C) ∧ (B ≠ D) ∧ (B ≠ e) ∧ (B ≠ F) ∧ (B ≠ g) ∧ (B ≠ h) ∧ (B ≠ i) ∧     "
    ],
    "answer": "theorem sylvester_gallai {P L : Type _} [HasMem P L] [Membership P L] [Configuration.Nondegenerate P L] : ∃ (l : L) (p q : P), p ∈ l → q ∈ l → (∀ r : P, r ∈ l → r = p ∨ r = q) "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "cantor_schroeder_bernstein",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"If each of two types can be mapped injectively into the other, then there is a bijection between them.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "If each of two types can be mapped injectively into the other, then there is a bijection between them.",
      "codex_time": 6.707535443012603,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem two_types_Bijective_to_each_other_Bijective  (x Y : type*) (F : x → Y) (g : Y → x)  (F_inj : injective F) (g_inj : injective g) :  Bijective (λ x : x, g (F x)) ",
      "theorem injective_Map_Implies_bijection {α β : type} (F : α → β) :  injective F → surjective F → Bijective F ",
      "theorem if_injective_then_Bijective_Map_exists (x Y : type*)  (hXY : ∃ (F : x → Y), Function.Injective F)  (hYX : ∃ (g : Y → x), Function.Injective g) :  ∃ (h : x → Y), Function.Bijective h ",
      "theorem bijection_exists_of_injections (α β : type*)  (F : α → β) (hF : injective F)  (g : β → α) (hg : injective g) : ∃ g' : α → β, Bijective g' ",
      "theorem two_injections_make_bijection {α β : type*}    {F : α → β} {g : β → α} (hF : Function.Injective F) (hg : Function.Injective g) :    ∃ g' : α → β, Bijective g' "
    ],
    "answer": "theorem cantor_schroeder_bernstein {α β : Type _} (f : α → β) (g : β → α) : Function.Injective f → Function.Injective g → (∃ h : α → β, Function.Bijective h) "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "cantor_schroeder_bernstein",
      "main_prompt": "If each of two types can be mapped injectively into the other, then there is a bijection between them.",
      "prompt": "Natural language version: \" **The Schröder-Bernstein Theorem**: Given injections `α → β` and `β → α`, we can get a bijection `α → β`.\" Translate the natural language version to a Lean mathlib version:\n theorem function.embedding.schroeder_bernstein{α : Type u} {β : Type v} {f : α → β} {g : β → α} (hf : function.injective f) (hg : function.injective g) :\n∃ (h : α → β), function.bijective h := \n\nNatural language version: \"A morphism in `Type u` is an isomorphism if and only if it is bijective.\" Translate the natural language version to a Lean mathlib version:\n theorem category_theory.is_iso_iff_bijective{X Y : Type u} (f : X ⟶ Y) :\ncategory_theory.is_iso f ↔ function.bijective f := \n\nNatural language version: \"An equivalence is essentially surjective.  See <https://stacks.math.columbia.edu/tag/02C3>.\" Translate the natural language version to a Lean mathlib version:\n theorem category_theory.equivalence.ess_surj_of_equivalence{C : Type u₁} [category_theory.category C] {D : Type u₂} [category_theory.category D] (F : C ⥤ D) [category_theory.is_equivalence F] :\ncategory_theory.ess_surj F := \n\nNatural language version: \"If two subtypes of a fintype have equal cardinality, so do their complements.\" Translate the natural language version to a Lean mathlib version:\n theorem fintype.card_compl_eq_card_compl{α : Type u_1} [fintype α] (p q : α → Prop) [fintype {x // p x}] [fintype {x // ¬p x}] [fintype {x // q x}] [fintype {x // ¬q x}] (h : fintype.card {x // p x} = fintype.card {x // q x}) :\nfintype.card {x // ¬p x} = fintype.card {x // ¬q x} := \n\nNatural language version: \"If each of two types can be mapped injectively into the other, then there is a bijection between them.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.648023247718811,
          "doc_string": " **The Schröder-Bernstein Theorem**: Given injections `α → β` and `β → α`, we can get a bijection `α → β`.",
          "statement": "theorem function.embedding.schroeder_bernstein {α : Type u} {β : Type v} {f : α → β} {g : β → α} (hf : function.injective f) (hg : function.injective g) : ∃ (h : α → β), function.bijective h"
        },
        {
          "sim_score": 0.617520809173584,
          "doc_string": "A morphism in `Type u` is an isomorphism if and only if it is bijective.",
          "statement": "theorem category_theory.is_iso_iff_bijective {X Y : Type u} (f : X ⟶ Y) : category_theory.is_iso f ↔ function.bijective f"
        },
        {
          "sim_score": 0.612472414970398,
          "doc_string": "An equivalence is essentially surjective.  See <https://stacks.math.columbia.edu/tag/02C3>.",
          "statement": "theorem category_theory.equivalence.ess_surj_of_equivalence {C : Type u₁} [category_theory.category C] {D : Type u₂} [category_theory.category D] (F : C ⥤ D) [category_theory.is_equivalence F] : category_theory.ess_surj F"
        },
        {
          "sim_score": 0.6091285347938538,
          "doc_string": "If two subtypes of a fintype have equal cardinality, so do their complements.",
          "statement": "theorem fintype.card_compl_eq_card_compl {α : Type u_1} [fintype α] (p q : α → Prop) [fintype {x // p x}] [fintype {x // ¬p x}] [fintype {x // q x}] [fintype {x // ¬q x}] (h : fintype.card {x // p x} = fintype.card {x // q x}) : fintype.card {x // ¬p x} = fintype.card {x // ¬q x}"
        }
      ],
      "codex_time": 10.661786549026147,
      "search_time": 1.443614877993241,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Nonempty.schroeder_bernstein{α : type u} (β : Nonempty (type v)) : ∃ (F : α → β.value), Function.Bijective F ",
      "theorem Function.Injective.Bijective_of_self_injective {α : type u_1} {β : type u_2} (F : α → β) : Function.Injective F → ∃ g, Function.Bijective g ",
      "theorem Function.exists_Bijective_of_injective_Left_Inverse{α : type u} {β : type v} {F : α → β} {g : β → α} (hF: Function.Injective F) (hg: Function.Injective g) (h : ∀ x, g (F x) = x) : ∃ (h : α → β), Function.Bijective h ",
      "theorem Function.Embedding.schroeder_bernstein{α : type u} {β : type v} {F : α → β} {g : β → α} (hF : Function.Injective F) (hg : Function.Injective g) : ∃ (h : α → β), Function.Bijective h ",
      "theorem schroeder_bernstein {α β : type u} (h1 : α ⟶ β) (h2 : β ⟶ α) (inj₁ : Function.Injective h1) (inj₂ : Function.Injective h2) : Nonempty (Equiv α β) "
    ],
    "answer": "theorem cantor_schroeder_bernstein {α β : Type _} (f : α → β) (g : β → α) : Function.Injective f → Function.Injective g → (∃ h : α → β, Function.Bijective h) "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "cantor_schroeder_bernstein",
      "main_prompt": "If each of two types can be mapped injectively into the other, then there is a bijection between them.",
      "prompt": "Natural language version: \"If each of two types can be mapped injectively into the other, then there is a bijection between them.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 6.919001622998621,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem iff_injective { A B : type* } ( F g : A → B ) [ injA : Function . injective F ] [ injB : Function . injective g ] : Function . Bijective ( F ∘ g ) ",
      "theorem Eq_iff_bij_betw {α} {β} {F : α → β} {g : α → β} (hF : Function.Injective F) (hg : Function.Injective g) :   F = g ↔ bij_betw F Univ Univ",
      "theorem textbijection_iff_Bijective_maps (x Y:type) (F:x->Y) (g:Y->x) :     (bijection F /\\ bijection g) <-> (∀ x : x, (g (F x) = x) ∧ (F (g y) = y)) ",
      "theorem problem : IsMonoidUnital R → IsMonoidUnital C → ∃g : R → C, ∀r : R, g (r * One R) = g r ",
      "theorem Nat.inj_iff_Bijective (F g : α → β) :   ∀ (hF : injective F) (hg : injective g),   (∀ A B : α, F A = F B ↔ g A = g B) ↔ Function.Bijective F g "
    ],
    "answer": "theorem cantor_schroeder_bernstein {α β : Type _} (f : α → β) (g : β → α) : Function.Injective f → Function.Injective g → (∃ h : α → β, Function.Bijective h) "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "graph_unique_common_neighbour_implies_universal_adjacent_vertex",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"A finite graph in which every two vertices have precisely one common neighbour contains a vertex that is adjacent to all other vertices.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "A finite graph in which every two vertices have precisely one common neighbour contains a vertex that is adjacent to all other vertices.",
      "codex_time": 11.536435332003748,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Fin_graph_with_1_edge_shared_has_vertex_adjacent_to_all (G : SimpleGraph ℕ)  (h : to_Finset (Fin_set.Univ) ∉ G.enomultiadjacencies) (hfin : Finset.Card G.vertices < ⊤) :  ∃ hv, ∀ (v : G.vertex_set), hv.2 v = hv.1.2 ",
      "theorem D_regular_Finite_graph_contains_Center (G : type*) [Finite_graph G]  (hG : ∀ A B : G, ∃ C : G, C ≠ A ∧ C ≠ B ∧ C ",
      "theorem graph_with_Unique_common_neighbour_has_vertex_adjacent_to_all_others  (G : Finset (Finset ℕ)) (h : ∀ x y ∈ G.val, Finset.Card (x ∩ y) = 1) :  ∃ y ∈ G.val, (∀ x, x ≠ y → y ∩ x ≠ ∅) ",
      "theorem pigeonhole_with_couple (n m : ℕ) (F : Fin n → Fin m) :   ∃ C : Fin m, (∀ A : Fin n, F A = C) ∨ (∀ A : Fin n, F A ≠ C) ",
      "theorem One_common_neighbor_has_central_point (G : type*) [Fintype G] [DecidableEq G]  [Fintype (G × G)] [DecidableEq (G × G)] [Fintype (G × G × G)]  [DecidableEq (G × G × G)] [Fin_digraph_with_edge G]  (hx : ∀ (y x : G), ∃! z : G, edge_between y x z) : ∃ z : G,  ∀ (x : G) (hxz : ¬edge_between x z z), edge_between x z z "
    ],
    "answer": "theorem graph_unique_common_neighbour_implies_universal_adjacent_vertex {V : Type _} [Finite V] (G : SimpleGraph V) : (∀ v w : V, ∃! x : V, G.Adj v x ∧ G.Adj w x) → (∃ c : V, ∀ v : V, G.Adj c v) "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "graph_unique_common_neighbour_implies_universal_adjacent_vertex",
      "main_prompt": "A finite graph in which every two vertices have precisely one common neighbour contains a vertex that is adjacent to all other vertices.",
      "prompt": "Natural language version: \"Two vertices are adjacent iff there is an edge between them. The condition `v ≠ w` ensures they are different endpoints of the edge, which is necessary since when `v = w` the existential `∃ (e ∈ G.edge_set), v ∈ e ∧ w ∈ e` is satisfied by every edge incident to `v`.\" Translate the natural language version to a Lean mathlib version:\n theorem simple_graph.adj_iff_exists_edge{V : Type u} (G : simple_graph V) {v w : V} :\nG.adj v w ↔ v ≠ w ∧ ∃ (e : sym2 V) (H : e ∈ G.edge_set), v ∈ e ∧ w ∈ e := \n\nNatural language version: \"The handshaking lemma.  See also `simple_graph.sum_degrees_eq_twice_card_edges`.\" Translate the natural language version to a Lean mathlib version:\n theorem simple_graph.even_card_odd_degree_vertices{V : Type u} (G : simple_graph V) [fintype V] [decidable_rel G.adj] :\neven (finset.filter (λ (v : V), odd (G.degree v)) finset.univ).card := \n\nNatural language version: \"There exists a vertex of maximal degree. Note the assumption of being nonempty is necessary, as the lemma implies there exists a vertex.\" Translate the natural language version to a Lean mathlib version:\n theorem simple_graph.exists_maximal_degree_vertex{V : Type u} (G : simple_graph V) [fintype V] [decidable_rel G.adj] [nonempty V] :\n∃ (v : V), G.max_degree = G.degree v := \n\nNatural language version: \"In a graph, if `k` is at least the degree of every vertex, then it is at least the maximum degree.\" Translate the natural language version to a Lean mathlib version:\n theorem simple_graph.max_degree_le_of_forall_degree_le{V : Type u} (G : simple_graph V) [fintype V] [decidable_rel G.adj] (k : ℕ) (h : ∀ (v : V), G.degree v ≤ k) :\nG.max_degree ≤ k := \n\nNatural language version: \"A finite graph in which every two vertices have precisely one common neighbour contains a vertex that is adjacent to all other vertices.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.5179886817932129,
          "doc_string": "Two vertices are adjacent iff there is an edge between them. The condition `v ≠ w` ensures they are different endpoints of the edge, which is necessary since when `v = w` the existential `∃ (e ∈ G.edge_set), v ∈ e ∧ w ∈ e` is satisfied by every edge incident to `v`.",
          "statement": "theorem simple_graph.adj_iff_exists_edge {V : Type u} (G : simple_graph V) {v w : V} : G.adj v w ↔ v ≠ w ∧ ∃ (e : sym2 V) (H : e ∈ G.edge_set), v ∈ e ∧ w ∈ e"
        },
        {
          "sim_score": 0.5029463171958923,
          "doc_string": "The handshaking lemma.  See also `simple_graph.sum_degrees_eq_twice_card_edges`.",
          "statement": "theorem simple_graph.even_card_odd_degree_vertices {V : Type u} (G : simple_graph V) [fintype V] [decidable_rel G.adj] : even (finset.filter (λ (v : V), odd (G.degree v)) finset.univ).card"
        },
        {
          "sim_score": 0.4985456168651581,
          "doc_string": "There exists a vertex of maximal degree. Note the assumption of being nonempty is necessary, as the lemma implies there exists a vertex.",
          "statement": "theorem simple_graph.exists_maximal_degree_vertex {V : Type u} (G : simple_graph V) [fintype V] [decidable_rel G.adj] [nonempty V] : ∃ (v : V), G.max_degree = G.degree v"
        },
        {
          "sim_score": 0.48896029591560364,
          "doc_string": "In a graph, if `k` is at least the degree of every vertex, then it is at least the maximum degree.",
          "statement": "theorem simple_graph.max_degree_le_of_forall_degree_le {V : Type u} (G : simple_graph V) [fintype V] [decidable_rel G.adj] (k : ℕ) (h : ∀ (v : V), G.degree v ≤ k) : G.max_degree ≤ k"
        }
      ],
      "codex_time": 10.822478272981243,
      "search_time": 1.4880530529771931,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem SimpleGraph.no_isolated_points_of_Num_common_neighbours_One_imp_Num_Adj_Eq_Card_of_Ne_One{v : type u} (G : SimpleGraph v) [Fintype v] [Decidable_Rel G.Adj] (h : ∀ (v W : v), (G.Num_common_neighbours v W) = 1 → (G.Num_Adj v) = Card (G.neighbours v)) (v W : v) (h : G.Num_common_neighbours v W = 1) : False ",
      "theorem SimpleGraph.Unique_common_neighbour_Implies_n1_connectivity{v : type u} (G : SimpleGraph v) [Decidable_Rel G.Adj] [Fintype v] : (∀ (A B : v), G.Card {v | v ≠ A ∧ v ≠ B ∧ G.Adj A v ∧ G.Adj B v} = 1) → ∃ (v : v), ∀ (x : G.vertex_set), x ≠ v → G.Adj v x ",
      "theorem SimpleGraph.exists_universal_vertex_of_Card_three_vertices{v : type u} (G : SimpleGraph v) (h : G._Finite ∧ G.Num_vertices = 3) : -- Finite graph G has exactly 3 vertices ∃ (v : v), ∀ (W : v), W ≠ v → G.Adj v W ",
      "theorem SimpleGraph.One_common_neighbour_Implies_universal_vertex{v : type u} (h : SimpleGraph v) [Fintype v] [Decidable_Rel h.Adj] : (∀ (u v : v), u ≠ v → Finset.Card ({W | h.Adj W u ∧ h.Adj W v} ∩ {W | W ≠ u ∧ W ≠ v}) = 1) → ∃ (v : v), (∀ (W : v), h.Adj v W) ",
      "theorem SimpleGraph.Unique_common_neighbour_Implies_Unique_neighbour{v : type u} [Fintype v] (G : SimpleGraph v) [Fintype G.edge_set] [Decidable_Rel G.Adj] (h : ∀ (v : v), ∀ (W : v), G.Card (common_neighbours v W) = 1) : ∃ (v : v), ∀ (W : v), G.Adj v W "
    ],
    "answer": "theorem graph_unique_common_neighbour_implies_universal_adjacent_vertex {V : Type _} [Finite V] (G : SimpleGraph V) : (∀ v w : V, ∃! x : V, G.Adj v x ∧ G.Adj w x) → (∃ c : V, ∀ v : V, G.Adj c v) "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "graph_unique_common_neighbour_implies_universal_adjacent_vertex",
      "main_prompt": "A finite graph in which every two vertices have precisely one common neighbour contains a vertex that is adjacent to all other vertices.",
      "prompt": "Natural language version: \"A finite graph in which every two vertices have precisely one common neighbour contains a vertex that is adjacent to all other vertices.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 8.476489251013845,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem sec6_8_lemma_vvv { Γ : Finset Vertex } ( h1 : ∀ u v : Vertex , ∃ W : Vertex ,   _adjacent Γ u W ∧ _adjacent Γ v W ) : ∃ v : Vertex , ∀ u : Vertex , _adjacent Γ u v ",
      "theorem common_neighbour_has_all_neighbours (L:bipartite_Lattice' k n) :  ∃ x, x ∈ L.x ∧ (∀ y, y∈L.x → x -[L.B]→ y )     ",
      "theorem graph_theory_lemma_2 : ∀ ( G : set G ) , ∀ ( x y z : G ) , Segment x y z → ( ∀ ( r : G ) , x ≠ r → ¬ Segment y z r ∧ ¬ Segment z x r ) → ( ∀ ( r : G ) , r ≠ x → r ≠ y → r ≠ z → x ≠ r ) ",
      "theorem graph_theorem' (g : Finset (Finset ℕ)) (two_common : ∀ {{u v : Finset ℕ}} (huv : u ∈ g) (hvu : v ∈ g), Finset.Card (u ∩ v) = 2) (nogaps : ∀ t : Finset ℕ, t ∈ g → ∀ r : Finset ℕ, r ∈ g → t ≠ r → t ∩ r ≠ ∅) :        ∃ (z : Finset ℕ) (hz : z ∈ g), ∀ t : Finset ℕ, t ∈",
      "theorem common_neighbor_stop (G) [Fintype G] [Fintype (S G)] [Fintype (t G)] [Fintype (S ⁻¹' G)] [Fintype (t ⁻¹' G)] (h_comm : ∀ A B, (#⟨S ⁻¹' A, t ⁻¹' B⟩ : G) = (#⟨S ⁻¹' B, t ⁻¹' A⟩ : G))     [∀ A:G, ∃! B, (#⟨A, B⟩ :"
    ],
    "answer": "theorem graph_unique_common_neighbour_implies_universal_adjacent_vertex {V : Type _} [Finite V] (G : SimpleGraph V) : (∀ v w : V, ∃! x : V, G.Adj v x ∧ G.Adj w x) → (∃ c : V, ∀ v : V, G.Adj c v) "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "partition_odd_distincts",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"The number of partitions with odd parts is equal to the number of partitions with distinct parts.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "The number of partitions with odd parts is equal to the number of partitions with distinct parts.",
      "codex_time": 9.680341992992908,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem partitions_with_Odd_Parts_equals_partitions_with_distinct_Parts (n : ℕ) : Card ({P : ℕ × ℕ | P.1 ≤ n ∧ P.1 % 2 = 1} ∩ Finset.Univ.Prod Finset.Univ) = Card {P : ℕ × ℕ | P.1 ≤ n ∧ P.1 ≠ P.2} ",
      "theorem partitions_with_Odd_Parts_Eq_distinct_Parts (m : ℕ) :  ∑ (P : Nat.Partition m), Nat.Odd (Nat.Partition.length P) = ∑ (P : Nat.Partition m), P.distinct ",
      "theorem Odd_partitions_Eq_distinct_partitions : ∀ n : ℕ, |(partitions.Filter Odd n).elems| =  |(partitions.Filter Disjoint_and_Ne_Zero n).elems| ",
      "theorem count_partitions_with_Odd_Parts_Eq_count_partitions_with_distinct_Parts (n : ℕ) :  Card (distinct_partitions_of_n n) = Card (Odd_partitions_of_n n) ",
      "theorem partitions_with_Odd_Parts_and_Parts_distinct_Equiv :  #count {k : ℕ, m : ℕ, l : ℕ, (k * 2 * m + 1) | l} =  #count {k : ℕ, m : ℕ, l : ℕ, S : Finset ℕ, (k * 2 * m + 1) | l ∧ l ∈ S} "
    ],
    "answer": "theorem partition_odd_distincts : ∀ n : ℕ, Finset.card (Nat.Partition.odds n) = Finset.card (Nat.Partition.distincts n) "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "partition_odd_distincts",
      "main_prompt": "The number of partitions with odd parts is equal to the number of partitions with distinct parts.",
      "prompt": "Natural language version: \"If we can partition a sum into subsets that cancel out, then the whole sum cancels.\" Translate the natural language version to a Lean mathlib version:\n theorem finset.sum_cancels_of_partition_cancels{β : Type u} {α : Type v} {s : finset α} {f : α → β} [add_comm_monoid β] (R : setoid α) [decidable_rel setoid.r] (h : ∀ (x : α), x ∈ s → (finset.filter (λ (y : α), y ≈ x) s).sum (λ (a : α), f a) = 0) :\ns.sum (λ (x : α), f x) = 0 := \n\nNatural language version: \" To show a property is true on the odd parts, it suffices to show it is true on the vectors, closed under addition, and under left-multiplication by a pair of vectors.\" Translate the natural language version to a Lean mathlib version:\n theorem clifford_algebra.odd_induction{R : Type u_1} {M : Type u_2} [comm_ring R] [add_comm_group M] [module R M] (Q : quadratic_form R M) {P : Π (x : clifford_algebra Q), x ∈ clifford_algebra.even_odd Q 1 → Prop} (hι : ∀ (v : M), P (⇑(clifford_algebra.ι Q) v) _) (hadd : ∀ {x y : clifford_algebra Q} {hx : x ∈ clifford_algebra.even_odd Q 1} {hy : y ∈ clifford_algebra.even_odd Q 1}, P x hx → P y hy → P (x + y) _) (hιι_mul : ∀ (m₁ m₂ : M) {x : clifford_algebra Q} {hx : x ∈ clifford_algebra.even_odd Q 1}, P x hx → P (⇑(clifford_algebra.ι Q) m₁ * ⇑(clifford_algebra.ι Q) m₂ * x) _) (x : clifford_algebra Q) (hx : x ∈ clifford_algebra.even_odd Q 1) :\nP x hx := \n\nNatural language version: \"A sum can be partitioned into a sum of sums, each equivalent under a setoid.\" Translate the natural language version to a Lean mathlib version:\n theorem finset.sum_partition{β : Type u} {α : Type v} {s : finset α} {f : α → β} [add_comm_monoid β] (R : setoid α) [decidable_rel setoid.r] :\ns.sum (λ (x : α), f x) = (finset.image quotient.mk s).sum (λ (xbar : quotient R), (finset.filter (λ (y : α), ⟦y⟧ = xbar) s).sum (λ (y : α), f y)) := \n\nNatural language version: \"Distinct elements of a set of sets partitioning α are disjoint.\" Translate the natural language version to a Lean mathlib version:\n theorem setoid.eqv_classes_disjoint{α : Type u_1} {c : set (set α)} (H : ∀ (a : α), ∃! (b : set α) (H : b ∈ c), a ∈ b) :\nc.pairwise_disjoint id := \n\nNatural language version: \"The number of partitions with odd parts is equal to the number of partitions with distinct parts.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.45678937435150146,
          "doc_string": "If we can partition a sum into subsets that cancel out, then the whole sum cancels.",
          "statement": "theorem finset.sum_cancels_of_partition_cancels {β : Type u} {α : Type v} {s : finset α} {f : α → β} [add_comm_monoid β] (R : setoid α) [decidable_rel setoid.r] (h : ∀ (x : α), x ∈ s → (finset.filter (λ (y : α), y ≈ x) s).sum (λ (a : α), f a) = 0) : s.sum (λ (x : α), f x) = 0"
        },
        {
          "sim_score": 0.44783246517181396,
          "doc_string": " To show a property is true on the odd parts, it suffices to show it is true on the vectors, closed under addition, and under left-multiplication by a pair of vectors.",
          "statement": "theorem clifford_algebra.odd_induction {R : Type u_1} {M : Type u_2} [comm_ring R] [add_comm_group M] [module R M] (Q : quadratic_form R M) {P : Π (x : clifford_algebra Q), x ∈ clifford_algebra.even_odd Q 1 → Prop} (hι : ∀ (v : M), P (⇑(clifford_algebra.ι Q) v) _) (hadd : ∀ {x y : clifford_algebra Q} {hx : x ∈ clifford_algebra.even_odd Q 1} {hy : y ∈ clifford_algebra.even_odd Q 1}, P x hx → P y hy → P (x + y) _) (hιι_mul : ∀ (m₁ m₂ : M) {x : clifford_algebra Q} {hx : x ∈ clifford_algebra.even_odd Q 1}, P x hx → P (⇑(clifford_algebra.ι Q) m₁ * ⇑(clifford_algebra.ι Q) m₂ * x) _) (x : clifford_algebra Q) (hx : x ∈ clifford_algebra.even_odd Q 1) : P x hx"
        },
        {
          "sim_score": 0.42162370681762695,
          "doc_string": "A sum can be partitioned into a sum of sums, each equivalent under a setoid.",
          "statement": "theorem finset.sum_partition {β : Type u} {α : Type v} {s : finset α} {f : α → β} [add_comm_monoid β] (R : setoid α) [decidable_rel setoid.r] : s.sum (λ (x : α), f x) = (finset.image quotient.mk s).sum (λ (xbar : quotient R), (finset.filter (λ (y : α), ⟦y⟧ = xbar) s).sum (λ (y : α), f y))"
        },
        {
          "sim_score": 0.4164368808269501,
          "doc_string": "Distinct elements of a set of sets partitioning α are disjoint.",
          "statement": "theorem setoid.eqv_classes_disjoint {α : Type u_1} {c : set (set α)} (H : ∀ (a : α), ∃! (b : set α) (H : b ∈ c), a ∈ b) : c.pairwise_disjoint id"
        }
      ],
      "codex_time": 11.550722971995128,
      "search_time": 1.4321352730039507,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem clifford_Algebra.Odd_partitions_iff_distinct_partitions{R : type u_1} {q : QuadraticForm R (clifford_Algebra q)} : clifford_Algebra.Odd_partitions q = clifford_Algebra.distinct_partitions q ",
      "theorem partitions.count_distinct_Odd_Equiv_Num_partitions (n : ℕ) : (n.count_distinct_Odd).Card = (partitions.count_partitions n).Card ",
      "theorem Gt_0_of_partitions_with_Odd_Parts_Eq_partitions_with_distinct_Parts {P : ℕ → ℕ} {q : ℕ → ℕ} (h : P ∘ (partitions_with_Odd_Parts) = q ∘ (partitions_with_distinct_Parts)) : 0 < partitions_with_Odd_Parts n ",
      "theorem partitions.Partition_alt_Equiv_distinct {n : ℕ} : Bijective (partitions.Partition n).Filter (partitions.distinct) ",
      "theorem natural.Quotient.count_partitions_same_as_distinct{n : ℕ} : @countable.count (Fin n → ℕ) (λ (P1 P2 : Fin n → ℕ), ∃ (F : Subtype.{u_1 u_1} (λ (i : Fin n), i.val < P2 i) → Subtype.{u_2 u_2} (λ (i : Fin n), i.val < P1 i)), (Quotient.formation (λ (i : Fin n), @Nat.LT_trichotomy _ (i.val) (P1 i) (P2"
    ],
    "answer": "theorem partition_odd_distincts : ∀ n : ℕ, Finset.card (Nat.Partition.odds n) = Finset.card (Nat.Partition.distincts n) "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "partition_odd_distincts",
      "main_prompt": "The number of partitions with odd parts is equal to the number of partitions with distinct parts.",
      "prompt": "Natural language version: \"The number of partitions with odd parts is equal to the number of partitions with distinct parts.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 7.544797426991863,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Nat.Odd_partitions_distinct_Part_partitions_Equiv :    Π n : ℕ, Card { P | P ∈ @partitions ℕ _ _ 1 n ∧ P._distinct } = Card { P | P ∈ @partitions ℕ _ _ 1 n ∧ P.summand__Odd }  /-   There isn't A mathlib typeclass for \"property holds for every element of A List\" for A List of arbitrary objects, so if you want to make it mean \"every element of the Partition satisfies the   property\" you have to make it A Function of partitions:  -/   ",
      "theorem Nat . Sum_Add_Distrib { α : type * } [ has_Zero α ] [ has_Add α ] ( F : ℕ → α ) : ( ∑ x in Finset . Ico 1 n , ( ∑ x in Finset . Ico 1 x , F x ) ) = ( ∑ i in Finset . Ico 1 n , ( ∑ j in Finset . Ico 1 i , F j ) ) ∧ ( ∑ x in Finset . Ico 1 n , ( ∑ x in Finset . Ico 1 x , F x ) ) = ( ∑ i in Finset . Ico 1 n , ( ∑ j in Finset",
      "theorem : ∀ n : Nat , # Odd_par n = # distinct_par n .  } lorem universe u' variables {α : type u} #print prefix α attribute [instance] theorem bar (A B : Prop) : B ∧ A ",
      "theorem test1 : (number_of_partitions_with_Odd_Parts : ℕ) = (number_of_partitions_with_distinct_Parts : ℕ) ",
      "theorem foo (n : ℕ) : #((set.Range (n+1)).Filter Odd) = #((set.Range (n+1)).Filter (λ m, set.Card (Partition m) = m)) "
    ],
    "answer": "theorem partition_odd_distincts : ∀ n : ℕ, Finset.card (Nat.Partition.odds n) = Finset.card (Nat.Partition.distincts n) "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "zorn",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"Every non-empty poset in which every chain has an upper bound contains a maximal element.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "Every non-empty poset in which every chain has an upper bound contains a maximal element.",
      "codex_time": 5.770648528006859,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem poset_with_Maximal_element (α : type*) [PartialOrder α] (h : ∀ C : set α, Nonempty C → (∃ x, IsGlb x C)) :  ∃ m, Maximal m ",
      "theorem Nonempty_chain_upper_bound_has_max (x : type*) [PartialOrder x]  (hX : Nonempty x) (h : ∀ C : set x, Nonempty C → IsChain C → ∃ B, ∀ x, x ∈ C → x ≤ B) :  ∃ m : x, ∀ x, x ≤ m ",
      "theorem of_zorn (x : type*) [LinearOrder x] :   (∀ C : set x, (∀ x y : x, x ∈ C → y ∈ C → x ≤ y ∨ y ≤ x) →     ∃ y, IsMax C y) → ∃ x, IsMax x x ",
      "theorem poset_Maximal_element (α : type*) (r : α → α → Prop) [hs : IsWellOrder α r]    [Inhabited α] (h_chain : ∀ S : set α, ∃ B, (∀ x ∈ S, x ≤ B)) :    ∃ x : α, x ⊥ ",
      "theorem every_Nonempty_poset_with_chains_has_Maximal_Elements (P : type*) [PartialOrder P] :  ∀ P : P, ¬ P ≈ ⊥ → Nonempty (Filter P) ∧ ∀ S : set P, IsChain S → ∃ (C : P), IsMaximal C S "
    ],
    "answer": "theorem zorn {α : Type _} [PartialOrder α] [Nonempty α] : (∀ c : Set α, IsChain LE.le c → (∃ b : α, ∀ a ∈ c, a ≤ b)) → (∃ m : α, ∀ a : α, m ≤ a → a = m) "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "zorn",
      "main_prompt": "Every non-empty poset in which every chain has an upper bound contains a maximal element.",
      "prompt": "Natural language version: \" **Zorn's lemma**  If every chain has an upper bound, then there exists a maximal element.\" Translate the natural language version to a Lean mathlib version:\n theorem exists_maximal_of_chains_bounded{α : Type u_1} {r : α → α → Prop} (h : ∀ (c : set α), is_chain r c → (∃ (ub : α), ∀ (a : α), a ∈ c → r a ub)) (trans : ∀ {a b c : α}, r a b → r b c → r a c) :\n∃ (m : α), ∀ (a : α), r m a → r a m := \n\nNatural language version: \" A variant of Zorn's lemma. If every nonempty chain of a nonempty type has an upper bound, then there is a maximal element.\" Translate the natural language version to a Lean mathlib version:\n theorem exists_maximal_of_nonempty_chains_bounded{α : Type u_1} {r : α → α → Prop} [nonempty α] (h : ∀ (c : set α), is_chain r c → c.nonempty → (∃ (ub : α), ∀ (a : α), a ∈ c → r a ub)) (trans : ∀ {a b c : α}, r a b → r b c → r a c) :\n∃ (m : α), ∀ (a : α), r m a → r a m := \n\nNatural language version: \"Every chain is contained in a maximal chain. This generalizes Hausdorff's maximality principle.\" Translate the natural language version to a Lean mathlib version:\n theorem is_chain.exists_max_chain{α : Type u_1} {r : α → α → Prop} {c : set α} (hc : is_chain r c) :\n∃ (M : set α), is_max_chain r M ∧ c ⊆ M := \n\nNatural language version: \" The Sup of a non-empty set is its least upper bound for a conditionally complete lattice with a top.\" Translate the natural language version to a Lean mathlib version:\n theorem with_top.is_lub_Sup'{β : Type u_1} [conditionally_complete_lattice β] {s : set (with_top β)} (hs : s.nonempty) :\nis_lub s (has_Sup.Sup s) := \n\nNatural language version: \"Every non-empty poset in which every chain has an upper bound contains a maximal element.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.8077962398529053,
          "doc_string": " **Zorn's lemma**  If every chain has an upper bound, then there exists a maximal element.",
          "statement": "theorem exists_maximal_of_chains_bounded {α : Type u_1} {r : α → α → Prop} (h : ∀ (c : set α), is_chain r c → (∃ (ub : α), ∀ (a : α), a ∈ c → r a ub)) (trans : ∀ {a b c : α}, r a b → r b c → r a c) : ∃ (m : α), ∀ (a : α), r m a → r a m"
        },
        {
          "sim_score": 0.782833456993103,
          "doc_string": " A variant of Zorn's lemma. If every nonempty chain of a nonempty type has an upper bound, then there is a maximal element.",
          "statement": "theorem exists_maximal_of_nonempty_chains_bounded {α : Type u_1} {r : α → α → Prop} [nonempty α] (h : ∀ (c : set α), is_chain r c → c.nonempty → (∃ (ub : α), ∀ (a : α), a ∈ c → r a ub)) (trans : ∀ {a b c : α}, r a b → r b c → r a c) : ∃ (m : α), ∀ (a : α), r m a → r a m"
        },
        {
          "sim_score": 0.6981233954429626,
          "doc_string": "Every chain is contained in a maximal chain. This generalizes Hausdorff's maximality principle.",
          "statement": "theorem is_chain.exists_max_chain {α : Type u_1} {r : α → α → Prop} {c : set α} (hc : is_chain r c) : ∃ (M : set α), is_max_chain r M ∧ c ⊆ M"
        },
        {
          "sim_score": 0.6111599206924438,
          "doc_string": " The Sup of a non-empty set is its least upper bound for a conditionally complete lattice with a top.",
          "statement": "theorem with_top.is_lub_Sup' {β : Type u_1} [conditionally_complete_lattice β] {s : set (with_top β)} (hs : s.nonempty) : is_lub s (has_Sup.Sup s)"
        }
      ],
      "codex_time": 9.578672475996427,
      "search_time": 1.4391371550154872,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem exists_max_of_chains_bounded{α : type u_1} {r : α → α → Prop} [IsRefl α r] (h : ∀ (C : set α), IsChain r C → (∃ (ub : α), ∀ (A : α), A ∈ C → r A ub)) : ∃ (m : α), ∀ (A : α), r m A → r A m ",
      "theorem exists_Maximal_of_chains_bounded_poset{α : type*} [poset α] [Nonempty α] (h : ∀ (C : set α), IsChain (<) C → C.Nonempty → (∃ (ub : α), ∀ (A : α), A ∈ C → A ≤ ub)) : ∃ (m : α), ∀ (A : α), m ≥ A → m ≤ A ",
      "theorem exists_Maximal_of_chains_bounded{α : type u_1} {r : α → α → Prop} (h : ∀ (C : set α), IsChain r C → (∃ (ub : α), ∀ (A : α), A ∈ C → r A ub)) (Trans : ∀ {A B C : α}, r A B → r B C → r A C) : ∃ (m : α), ∀ (A : α), r m A → r A m ",
      "theorem upper_bounded_Implies_exists_Maximal{α : type u_1} {r : α → α → Prop} (h : ∀ (C : set α), IsChain r C → ∃ (ub : α), ∀ (A : α), A ∈ C → r ub A) (Trans : ∀ {A B C : α}, r A B → r B C → r A C) [Nonempty α] : ∃ (m : α), ∀ (A : α), r A m → r m A ",
      "theorem exists_Maximal_of_chains_bounded_Nonempty{α : type u_1} {r : α → α → Prop} [PartialOrder α] (h : ∀ (C : set α), IsChain r C → C.Nonempty → (∃ (ub : α), _ub C ub)) : ∃ (m : α), IsMaximal r m "
    ],
    "answer": "theorem zorn {α : Type _} [PartialOrder α] [Nonempty α] : (∀ c : Set α, IsChain LE.le c → (∃ b : α, ∀ a ∈ c, a ≤ b)) → (∃ m : α, ∀ a : α, m ≤ a → a = m) "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "zorn",
      "main_prompt": "Every non-empty poset in which every chain has an upper bound contains a maximal element.",
      "prompt": "Natural language version: \"Every non-empty poset in which every chain has an upper bound contains a maximal element.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 9.797200271015754,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem exists_max : ∀ {x : type} (R : x → x → Prop) [Decidable_Rel R] [_PartialOrder R],   ∀ (xs : set x) (hxs : xs ≠ ∅),   (∀ S : set x, S ≠ ∅ → (∀ x ∈ S, ∀ y ∈ S, R x y) → ∃ z ∈ S, ∀ x ∈ S, R x z) →   (∃ x, x ∈ xs ∧ ∀ y, y ∈ xs → R y x)  ",
      "theorem Zorn (x : type u) [PartialOrder x] (h : ∀ C, chain C → ∃ x, IsMaximal x C x) : ∃ x, _ub x UNIV x ",
      "theorem exists_Maximal : ∀ { α : type } [ PartialOrder α ] { S : set α } , S.Nonempty → ∀ { x : α } , x ∈ S → ∃ ( h : IsMaximal x S ) , True  Ok, now what are Maximal Elements? \"For all y in S, y ≤ x ∧ ¬(y < x).\" /- before we can Even think about how to state this, we need to know-/ -- what it means to hold for all y in S! def IsMaximal ( α : type ) [ PartialOrder α ] ( x : α ) ( S : set α ) : Prop ",
      "theorem kruskal_katona : Nonempty (set ι) → (∀ C : chain α, Nonempty (↑C ⊔ᵤ ({0} : set ι))) → ∃ (S : set ι),   IsMaximal S ",
      "theorem no_Maximal_element_of_poset_in_Setoid_Implies_not_Empty_has_no_UpperBounds (x : \\ type*) [poset x] (h1 :  ∀ (A : Setoid x) [Decidable_Pred A], ¬ Maximal A) (A : Setoid x) (x : A) (h2 : x ∈ A) : \\ ∀ {y : x}, A x y → False | y h3 "
    ],
    "answer": "theorem zorn {α : Type _} [PartialOrder α] [Nonempty α] : (∀ c : Set α, IsChain LE.le c → (∃ b : α, ∀ a ∈ c, a ≤ b)) → (∃ m : α, ∀ a : α, m ≤ a → a = m) "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "aut_group_cyclic_implies_abelian",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"A group whose automorphism group is cyclic is Abelian.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "A group whose automorphism group is cyclic is Abelian.",
      "codex_time": 10.554913405998377,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Group_with_cyclic_automorphism_Group__abelian (G : type*) [Group G]  (h : ∀ (F : G → G), Function.Surjective F → F 1 = 1 → _Group_hom F → _Group_hom F.Inv → ∃ n : ℕ, F = λ x : G, x^n) :  abelian_Group G ",
      "theorem cyclic_aut_Group_Implies_abelian (G : type*) [Group G] (hG : ∃ x : G, x ≠ 1 ∧  ∀ g : G, x * g = g → g = 1) : abelian G ",
      "theorem abelian_automorphism_Group__abelian (G : type*) [Group G]  (h : ∀ F : G → G, _Group_hom F → (∃ n : ℤ, F = Nat_Pow n) → automorphism F):  Abelian_Group G ",
      "theorem Group_automorphism_Group_IsCyclic__abelian (G : type*) [Group G]  (h : type*) [Group h] (F : G → h) (F_inj : Function.Injective F)  (F_surj : Function.Surjective F) (h_g_abelian : ∀ x y : G, x * y = y * x)  (h_h_cyclic : ∀ x y : h, ∃ z : h, z ^ 2 = 1 ∧ x = z * y ∧ y = z * x) :  ∀ x y : G, F x * F y =",
      "theorem abelian_if_automorphism_Group_cyclic (G : type*) [Group G] (hG : ∃ g : G, IsCyclic G g) : abelian_Group G "
    ],
    "answer": "theorem aut_group_cyclic_implies_abelian {G : Type _} [Groupₓ G] : CategoryTheory.Aut G → CommGroup G "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "aut_group_cyclic_implies_abelian",
      "main_prompt": "A group whose automorphism group is cyclic is Abelian.",
      "prompt": "Natural language version: \"A finite group of prime order is cyclic.\" Translate the natural language version to a Lean mathlib version:\n theorem is_cyclic_of_prime_card{α : Type u} [group α] [fintype α] {p : ℕ} [hp : fact (nat.prime p)] (h : fintype.card α = p) :\nis_cyclic α := \n\nNatural language version: \"Every subgroup of `ℤ` is cyclic.\" Translate the natural language version to a Lean mathlib version:\n theorem int.subgroup_cyclic(H : add_subgroup ℤ) :\n∃ (a : ℤ), H = add_subgroup.closure {a} := \n\nNatural language version: \"A finite subgroup of the unit group of an integral domain is cyclic.\" Translate the natural language version to a Lean mathlib version:\n theorem is_cyclic_of_subgroup_is_domain{R : Type u_1} {G : Type u_2} [comm_ring R] [is_domain R] [group G] [fintype G] (f : G →* R) (hf : function.injective ⇑f) :\nis_cyclic G := \n\nNatural language version: \"The product of group homomorphisms is a group homomorphism if the target is commutative.\" Translate the natural language version to a Lean mathlib version:\n theorem is_group_hom.mul{α : Type u_1} {β : Type u_2} [group α] [comm_group β] {f g : α → β} (hf : is_group_hom f) (hg : is_group_hom g) :\nis_group_hom (λ (a : α), f a * g a) := \n\nNatural language version: \"A group whose automorphism group is cyclic is Abelian.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.6319984793663025,
          "doc_string": "A finite group of prime order is cyclic.",
          "statement": "theorem is_cyclic_of_prime_card {α : Type u} [group α] [fintype α] {p : ℕ} [hp : fact (nat.prime p)] (h : fintype.card α = p) : is_cyclic α"
        },
        {
          "sim_score": 0.6267713308334351,
          "doc_string": "Every subgroup of `ℤ` is cyclic.",
          "statement": "theorem int.subgroup_cyclic (H : add_subgroup ℤ) : ∃ (a : ℤ), H = add_subgroup.closure {a}"
        },
        {
          "sim_score": 0.5008938312530518,
          "doc_string": "A finite subgroup of the unit group of an integral domain is cyclic.",
          "statement": "theorem is_cyclic_of_subgroup_is_domain {R : Type u_1} {G : Type u_2} [comm_ring R] [is_domain R] [group G] [fintype G] (f : G →* R) (hf : function.injective ⇑f) : is_cyclic G"
        },
        {
          "sim_score": 0.4840320944786072,
          "doc_string": "The product of group homomorphisms is a group homomorphism if the target is commutative.",
          "statement": "theorem is_group_hom.mul {α : Type u_1} {β : Type u_2} [group α] [comm_group β] {f g : α → β} (hf : is_group_hom f) (hg : is_group_hom g) : is_group_hom (λ (a : α), f a * g a)"
        }
      ],
      "codex_time": 7.294612680008868,
      "search_time": 1.4686311910045333,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem abelian_of_aut_cyclic{α : type u_1} [Group α] [Fintype (aut α)] {G : type u_2} [Group G] [Fintype G] (h : IsCyclic G) : ∀ (F : α →* G), _Group_hom F → Function.Injective ⇑F → ((∃ (A : α), F A = 1) → comm_Group α) ",
      "theorem _abelian_of_cyclic_aut_Group{G : type u_1} [Group G] : IsCyclic Group_aut G →  _abelian G ",
      "theorem _abelian_of_aut_IsCyclic{α : type u} [Group α] (h : IsCyclic (aut α)) : _abelian α ",
      "theorem abelian_of_auto_cyclic(h : α) {G : type u} [Group G] (h1 : IsCyclic (automorphism_Group α)) : abelian G ",
      "theorem _abelian_of_aut_cyclic{G : type u} [Group G] (A : G) (ha : IsCyclic (aut G)) : _abelian G "
    ],
    "answer": "theorem aut_group_cyclic_implies_abelian {G : Type _} [Groupₓ G] : CategoryTheory.Aut G → CommGroup G "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "aut_group_cyclic_implies_abelian",
      "main_prompt": "A group whose automorphism group is cyclic is Abelian.",
      "prompt": "Natural language version: \"A group whose automorphism group is cyclic is Abelian.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 9.479002601001412,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem _abelian_of_aut_Group_cyclic (G : set α) [Group α] [comm_Group α] [Fintype (aut α)] :   ∀ g ∈ (↑aut α), _Subgroup G → cyclic (↑(aut_Group.Map aut_hom G g) α) → _abelian G ",
      "theorem _Abelian_of_cyclic_aut_Group (G : type) [Group G] : (∃ g : G, ∀ x : G, cyclic (Group_aut.automorphism_Group G x)) → Abelian G ",
      "theorem cyclic_Group__abelian (G : type*) [Group G] [Fintype G] (hNG : ¬ _Group G) (h : Finset G → Finset G → type*) (h_bin : ∀ g : G, h (Singleton (1 : G)) (Singleton g) = Unit) (h_assoc : ∀ g h i : G, h (Singleton (g * h)) (Singleton i) = h (Singleton g) (Singleton h)) (h_Id : h (Singleton (1 : G)) (Singleton (1 : G)) = Unit) (h_Inv : ∀ g :",
      "theorem noncomm_cyclic (G : type) [Group G] [Fintype G] [DecidableEq G] :   not _comm_Group G → ∃ (g : G) (n : ℕ), order g = n ",
      "theorem _abelian  { G : Group }  [ hG : IsCyclic_Group G ]  : _abelian_Group G "
    ],
    "answer": "theorem aut_group_cyclic_implies_abelian {G : Type _} [Groupₓ G] : CategoryTheory.Aut G → CommGroup G "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "image_union",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"The image of a union of sets is the union of the images.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "The image of a union of sets is the union of the images.",
      "codex_time": 12.794990707014222,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem image_union_Eq_union_image {x Y : type*} [TopologicalSpace x] [TopologicalSpace Y]  (F : x → Y) (S t : set x) : F '' (S ∪ t) = F '' S ∪ F '' t ",
      "theorem image_union (F : x → Y) (S₁ S₂ : set x) :  F '' (S₁ ∪ S₂) = F '' S₁ ∪ F '' S₂ ",
      "theorem image_union__union_of_images (x Y : type*) [TopologicalSpace x] [TopologicalSpace Y]  (F : x → Y) (S t : set x) : F '' (S ∪ t) = F '' S ∪ F '' t ",
      "theorem image_union_Eq_union_image (F : ι → η) {S : ι → set η}  (h : ∀A:ι, F A ∈ S A) :   F ⁻¹' (⋃ A, S A) = ⋃ A, F ⁻¹' S A ",
      "theorem image_union_Eq_union_image (x : type*) [TopologicalSpace x] (Y : type*)  [TopologicalSpace Y] (ϕ : x → Y) (S : set x) : IsOpen S →  ∀ (A : set (set x)), (∀ t ∈ A, IsOpen t ∧ ϕ ⁻¹' ϕ '' t = t) →  ϕ '' (⋃₀ A) = ⋃₀ {ϕ '' A | A ∈ A} "
    ],
    "answer": "theorem image_union (f : α → β) (S : Set (Set α)) : (f <$> (⋃₀ S)) = (⋃₀ ((Functor.map f) <$> S)) "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "image_union",
      "main_prompt": "The image of a union of sets is the union of the images.",
      "prompt": "Natural language version: \" The cardinality of a union is at most the sum of the cardinalities of the two sets.\" Translate the natural language version to a Lean mathlib version:\n theorem cardinal.mk_union_le{α : Type u} (S T : set α) :\ncardinal.mk ↥(S ∪ T) ≤ cardinal.mk ↥S + cardinal.mk ↥T := \n\nNatural language version: \" This rather trivial consequence of `subset_Union`is convenient with `apply`, and has `i` explicit for this purpose.\" Translate the natural language version to a Lean mathlib version:\n theorem set.subset_Union_of_subset{α : Type u_1} {ι : Sort u_4} {s : set α} {t : ι → set α} (i : ι) (h : s ⊆ t i) :\ns ⊆ ⋃ (i : ι), t i := \n\nNatural language version: \"The union of two sets is bounded iff each of the sets is bounded.\" Translate the natural language version to a Lean mathlib version:\n theorem metric.bounded_union{α : Type u} [pseudo_metric_space α] {s t : set α} :\nmetric.bounded (s ∪ t) ↔ metric.bounded s ∧ metric.bounded t := \n\nNatural language version: \"The span of a union of sets is the sup of their spans.\" Translate the natural language version to a Lean mathlib version:\n theorem affine_subspace.span_union(k : Type u_1) (V : Type u_2) {P : Type u_3} [ring k] [add_comm_group V] [module k V] [S : add_torsor V P] (s t : set P) :\naffine_span k (s ∪ t) = affine_span k s ⊔ affine_span k t := \n\nNatural language version: \"The image of a union of sets is the union of the images.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.6315420866012573,
          "doc_string": " The cardinality of a union is at most the sum of the cardinalities of the two sets.",
          "statement": "theorem cardinal.mk_union_le {α : Type u} (S T : set α) : cardinal.mk ↥(S ∪ T) ≤ cardinal.mk ↥S + cardinal.mk ↥T"
        },
        {
          "sim_score": 0.5471856594085693,
          "doc_string": " This rather trivial consequence of `subset_Union`is convenient with `apply`, and has `i` explicit for this purpose.",
          "statement": "theorem set.subset_Union_of_subset {α : Type u_1} {ι : Sort u_4} {s : set α} {t : ι → set α} (i : ι) (h : s ⊆ t i) : s ⊆ ⋃ (i : ι), t i"
        },
        {
          "sim_score": 0.5332727432250977,
          "doc_string": "The union of two sets is bounded iff each of the sets is bounded.",
          "statement": "theorem metric.bounded_union {α : Type u} [pseudo_metric_space α] {s t : set α} : metric.bounded (s ∪ t) ↔ metric.bounded s ∧ metric.bounded t"
        },
        {
          "sim_score": 0.5295044779777527,
          "doc_string": "The span of a union of sets is the sup of their spans.",
          "statement": "theorem affine_subspace.span_union (k : Type u_1) (V : Type u_2) {P : Type u_3} [ring k] [add_comm_group V] [module k V] [S : add_torsor V P] (s t : set P) : affine_span k (s ∪ t) = affine_span k s ⊔ affine_span k t"
        }
      ],
      "codex_time": 5.90167042799294,
      "search_time": 1.4571299679810181,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Function.image_union{α : type u_1} {β : type u_2} {γ : type u_3} (F : α → β) (g : α → γ) (S : set α) : Function.image F S ∪ Function.image g S = Function.image (Sum F g) S ",
      "theorem set.image_union{α : type u_1} {β : type u_2} (S t : set α) (F : α → β) : F ⁻¹' (S ∪ t) = F ⁻¹' S ∪ F ⁻¹' t ",
      "theorem Function.image.Union_image{α : type u} {β : type v_1} (F : α → β) (S : set (set α)) : F '' (⋃ S) = (⋃ (t : set α) (h : t ∈ S), F '' t) ",
      "theorem set.image_union{α : type u} {β : type v} {F : α → β} {S t : set α} : F '' (S ∪ t) = F '' S ∪ F '' t ",
      "theorem set.image_Union{α : type u_1} {β : type u_2} {F : α → β} {S : set α} {t : set (set α)} (h : S ∈ t) : F '' (⋃ (u : {x // x ∈ t}), ⇑u) = ⋃ u, F '' u "
    ],
    "answer": "theorem image_union (f : α → β) (S : Set (Set α)) : (f <$> (⋃₀ S)) = (⋃₀ ((Functor.map f) <$> S)) "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "image_union",
      "main_prompt": "The image of a union of sets is the union of the images.",
      "prompt": "Natural language version: \"The image of a union of sets is the union of the images.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 8.341736010013847,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem image_union_Eq : ∀ (F : α → β) (S t : set α),    F '' (S ∪ t) = F '' S ∪ F '' t ",
      "theorem image_union_of_sets (F : Π (A : set x), set Y) {S t : set x} :  F (S ∪ t) = F S ∪ F t ",
      "theorem the_image_of_the_union__the_union_of_the_images {α : type*} {β : type*}:  Π (F : α → β) (A : set α), ∀ B, A ∈ B →  F '' A  ⊆ F '' (⋃₀ B) ",
      "theorem image_union_of (L:set x) (F:x\\to Y):(image_of L F) = (union_of (image_of L F)) ",
      "theorem image_union_theorem {α β: type} {S: set (set α)} {F: α → β}:   F '' (⋃₀ S) = (⋃₀ S >> F) "
    ],
    "answer": "theorem image_union (f : α → β) (S : Set (Set α)) : (f <$> (⋃₀ S)) = (⋃₀ ((Functor.map f) <$> S)) "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "urysohn",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"A topological space is normal if and only if any two disjoint closed subsets can be separated by a continuous function.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "A topological space is normal if and only if any two disjoint closed subsets can be separated by a continuous function.",
      "codex_time": 7.428364108985988,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem separated_iff__Normal (x : type*) [TopologicalSpace x] :  _Normal x ↔ ∀ (C D : set x) (hC : IsClosed C) (hD : IsClosed D) (hCD : C ∩ D = ∅),  ∃ (U v : set x) (hU : IsOpen U) (hV : IsOpen v), C ⊆ U ∧ D ⊆ v ∧ x = U ∪ v ",
      "theorem NormalSpace_iff_separating_Function_exists (x : type*) [TopologicalSpace x] :  _Normal x ↔ (∀ F g : set x, Disjoint F g → IsClosed F ",
      "theorem Normal_iff_Disjoint_IsClosed_separated (x : type*) [TopologicalSpace x] :  NormalSpace x ↔ ∀ C D : set x, IsClosed C ∧ IsClosed D ∧ Disjoint C D → ∃ F : x → ℝ, Continuous F ∧ ∀ x y, F x = F y → x ∈ C ∧ y ∈ D ∨ x ∈ D ∧ y ∈ C ",
      "theorem Normal_iff_IsClosed_subsets_separated (x : type*) [TopologicalSpace x] :  NormalSpace x ↔ ∀ (A B : set x) (hAcl : IsClosed A) (hBcl : IsClosed B)  (hA_Inter_B_Empty : A ∩ B = ∅), ∃ F : x → ℝ, Continuous F ∧ (∀ A ∈ A, F A = 0) ∧ (∀ B ∈ B, F B = 1) ",
      "theorem Normal_iff_Disjoint_IsClosed_IsSeparable (x : type*) [TopologicalSpace x] :  NormalSpace x ↔  (∀ A B : set x, IsClosed A → IsClosed B → Disjoint A B → ∃ F : x → ℝ, Continuous F ∧  set.separation (A) (B) F "
    ],
    "answer": "theorem urysohn {X : Type _} [TopologicalSpace X] [TopologicalSpace ℝ] : NormalSpace X ↔ ( ∀ {S T : Set X}, IsClosed S → IsClosed T → Disjoint S T → (∃ f : X → ℝ, Continuous f → (∀ x ∈ S, f x = 0) ∧ (∀ x ∈ T, f x = 1)) ) "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "urysohn",
      "main_prompt": "A topological space is normal if and only if any two disjoint closed subsets can be separated by a continuous function.",
      "prompt": "Natural language version: \" Urysohns lemma: if `s` and `t` are two disjoint closed sets in a normal topological space `X`, then there exists a continuous function `f : X → ℝ` such that  * `f` equals zero on `s`; * `f` equals one on `t`; * `0 ≤ f x ≤ 1` for all `x`.\" Translate the natural language version to a Lean mathlib version:\n theorem exists_bounded_zero_one_of_closed{X : Type u_1} [topological_space X] [normal_space X] {s t : set X} (hs : is_closed s) (ht : is_closed t) (hd : disjoint s t) :\n∃ (f : bounded_continuous_function X ℝ), set.eq_on ⇑f 0 s ∧ set.eq_on ⇑f 1 t ∧ ∀ (x : X), ⇑f x ∈ set.Icc 0 1 := \n\nNatural language version: \" Urysohns lemma: if `s` and `t` are two disjoint closed sets in a normal topological space `X`, then there exists a continuous function `f : X → ℝ` such that  * `f` equals zero on `s`; * `f` equals one on `t`; * `0 ≤ f x ≤ 1` for all `x`.\" Translate the natural language version to a Lean mathlib version:\n theorem exists_continuous_zero_one_of_closed{X : Type u_1} [topological_space X] [normal_space X] {s t : set X} (hs : is_closed s) (ht : is_closed t) (hd : disjoint s t) :\n∃ (f : C(X, ℝ)), set.eq_on ⇑f 0 s ∧ set.eq_on ⇑f 1 t ∧ ∀ (x : X), ⇑f x ∈ set.Icc 0 1 := \n\nNatural language version: \" Urysohns lemma: if `s` and `t` are two disjoint closed sets in a normal topological space `X`, and `a ≤ b` are two real numbers, then there exists a continuous function `f : X → ℝ` such that  * `f` equals `a` on `s`; * `f` equals `b` on `t`; * `a ≤ f x ≤ b` for all `x`.\" Translate the natural language version to a Lean mathlib version:\n theorem exists_bounded_mem_Icc_of_closed_of_le{X : Type u_1} [topological_space X] [normal_space X] {s t : set X} (hs : is_closed s) (ht : is_closed t) (hd : disjoint s t) {a b : ℝ} (hle : a ≤ b) :\n∃ (f : bounded_continuous_function X ℝ), set.eq_on ⇑f (function.const X a) s ∧ set.eq_on ⇑f (function.const X b) t ∧ ∀ (x : X), ⇑f x ∈ set.Icc a b := \n\nNatural language version: \"The topological closure of a normal subgroup is normal.\" Translate the natural language version to a Lean mathlib version:\n theorem subgroup.is_normal_topological_closure{G : Type u_1} [topological_space G] [group G] [topological_group G] (N : subgroup G) [N.normal] :\nN.topological_closure.normal := \n\nNatural language version: \"A topological space is normal if and only if any two disjoint closed subsets can be separated by a continuous function.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.629673182964325,
          "doc_string": " Urysohns lemma: if `s` and `t` are two disjoint closed sets in a normal topological space `X`, then there exists a continuous function `f : X → ℝ` such that  * `f` equals zero on `s`; * `f` equals one on `t`; * `0 ≤ f x ≤ 1` for all `x`.",
          "statement": "theorem exists_bounded_zero_one_of_closed {X : Type u_1} [topological_space X] [normal_space X] {s t : set X} (hs : is_closed s) (ht : is_closed t) (hd : disjoint s t) : ∃ (f : bounded_continuous_function X ℝ), set.eq_on ⇑f 0 s ∧ set.eq_on ⇑f 1 t ∧ ∀ (x : X), ⇑f x ∈ set.Icc 0 1"
        },
        {
          "sim_score": 0.629673182964325,
          "doc_string": " Urysohns lemma: if `s` and `t` are two disjoint closed sets in a normal topological space `X`, then there exists a continuous function `f : X → ℝ` such that  * `f` equals zero on `s`; * `f` equals one on `t`; * `0 ≤ f x ≤ 1` for all `x`.",
          "statement": "theorem exists_continuous_zero_one_of_closed {X : Type u_1} [topological_space X] [normal_space X] {s t : set X} (hs : is_closed s) (ht : is_closed t) (hd : disjoint s t) : ∃ (f : C(X, ℝ)), set.eq_on ⇑f 0 s ∧ set.eq_on ⇑f 1 t ∧ ∀ (x : X), ⇑f x ∈ set.Icc 0 1"
        },
        {
          "sim_score": 0.5748592615127563,
          "doc_string": " Urysohns lemma: if `s` and `t` are two disjoint closed sets in a normal topological space `X`, and `a ≤ b` are two real numbers, then there exists a continuous function `f : X → ℝ` such that  * `f` equals `a` on `s`; * `f` equals `b` on `t`; * `a ≤ f x ≤ b` for all `x`.",
          "statement": "theorem exists_bounded_mem_Icc_of_closed_of_le {X : Type u_1} [topological_space X] [normal_space X] {s t : set X} (hs : is_closed s) (ht : is_closed t) (hd : disjoint s t) {a b : ℝ} (hle : a ≤ b) : ∃ (f : bounded_continuous_function X ℝ), set.eq_on ⇑f (function.const X a) s ∧ set.eq_on ⇑f (function.const X b) t ∧ ∀ (x : X), ⇑f x ∈ set.Icc a b"
        },
        {
          "sim_score": 0.5395680069923401,
          "doc_string": "The topological closure of a normal subgroup is normal.",
          "statement": "theorem subgroup.is_normal_topological_closure {G : Type u_1} [topological_space G] [group G] [topological_group G] (N : subgroup G) [N.normal] : N.topological_closure.normal"
        }
      ],
      "codex_time": 8.357022618001793,
      "search_time": 1.484566332976101,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Normal_iff_two_set_separate{x : type u_1} [TopologicalSpace x] : NormalSpace x ↔ ∀ (S t : set x) (hs : IsClosed S) (ht : IsClosed t) (hD : Disjoint S t),  ∃ (F : C(x, ℝ)), set.Eq_on ⇑F 0 S ∧ set.Eq_on ⇑F 1 t ",
      "theorem IsClosed_TopologicalSpace._Normal_iff_separated : ∀ {x : type u_1} [TopologicalSpace x], IsClosed_TopologicalSpace._Normal x ↔ ∀ (S t : set x), IsClosed S → IsClosed t → Disjoint S t → ∃(F : x → ℝ), Continuous F ∧ set.Eq_on F 0 S ∧ set.Eq_on F 1 t ",
      "theorem tspace_Normal_iff'{x : type u_1} [TopologicalSpace x] (h : ∀ (S t : set x), IsClosed S → IsClosed t → Disjoint S t → ∃ (F : C(x, i₁)), (set.Eq_on ⇑F 0 S) ∧ (set.Eq_on ⇑F 1 t)) : _NormalSpace x ",
      "theorem _Normal_of_separation_of_Disjoint_IsClosed{x : type u_1} [TopologicalSpace x] : NormalSpace x ↔ ∀ (S t : set x), IsClosed S → IsClosed t → Disjoint S t → ∃ (F : bounded_Continuous_Function x ℝ),   set.Eq_on ⇑F 0 S ∧ set.Eq_on ⇑F 1 t ",
      "theorem Normal_iff_separated_of_IsClosed_of_IsClosed{x : type u_1} [TopologicalSpace x] [NormalSpace x] {S t : set x} (hs : IsClosed S) (ht : IsClosed t) (hD : Disjoint S t) : ∃ (F : bounded_Continuous_Function x ℝ), set.Eq_on ⇑F 0 S ∧ set.Eq_on ⇑F 1 t ∧ ∀ (x : x), ⇑F x ∈ set.icc 0 1 "
    ],
    "answer": "theorem urysohn {X : Type _} [TopologicalSpace X] [TopologicalSpace ℝ] : NormalSpace X ↔ ( ∀ {S T : Set X}, IsClosed S → IsClosed T → Disjoint S T → (∃ f : X → ℝ, Continuous f → (∀ x ∈ S, f x = 0) ∧ (∀ x ∈ T, f x = 1)) ) "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "urysohn",
      "main_prompt": "A topological space is normal if and only if any two disjoint closed subsets can be separated by a continuous function.",
      "prompt": "Natural language version: \"A topological space is normal if and only if any two disjoint closed subsets can be separated by a continuous function.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 11.34956903901184,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem t1 : ∀ (x : type) [TopologicalSpace x],     NormalSpace x ↔ (∀ (C D : set x), IsClosed_in_Space x C → IsClosed_in_Space x D → Disjoint C D → (∃(F:x → ℝ), Continuous_Map_TopologicalSpace x ℝ F ∧ (C = F ⁻¹' {v | v > 0} ∧ D = F ⁻¹' {v | v < 0}))) ",
      "theorem Normal_iff_separated { α : type u } [ TopologicalSpace α ] :   NormalSpace α ↔ ∀ ( A B : set α ), Disjoint A B →     ∃ u v : α → Prop , IsClosed u ∧ IsClosed v ∧ Continuous u ∧ Continuous v ∧     A = u.Univ ∧ B = v.Univ ∧ ∀ A : α , u A → ¬ v A .)  /-- A topological Space  Normal if and only if any two Disjoint IsClosed subsets can be separated by A Continuous Function. -/ lemma Normal_iff_separated",
      "theorem _Normal_iff_separate_Disjoint_IsClosed_subsets : ∀ ( x : top ) ( i J N : set x ),         IsClosed N i help /- Here, i assumed that you have defined the Function IsClosed at the same tim",
      "theorem lemma1 :  ∀ S : set α,    IsClosed S →  ∀ t : set α,    IsClosed t →    S ∩ t = ∅ →    ∃ u : α → Prop,      _Continuous u ∧ (∀ x : α, t ≤ u x) ∧ (∀ x : α, ¬ S ≤ u x) ",
      "theorem exists_separating { x : type * } [ TopologicalSpace x ]     { C C' : set x } ( hC : IsClosed C ) ( hC' : IsClosed C' ) ( hCC' : C ∩ C' = ∅ ) :     ∃ F : x → ℝ , Continuous F ∧ ( ∀ x ∈ C , F x ≤ 0 ) ∧ ( ∀ x ∈ C' , 0 ≤ F x ) "
    ],
    "answer": "theorem urysohn {X : Type _} [TopologicalSpace X] [TopologicalSpace ℝ] : NormalSpace X ↔ ( ∀ {S T : Set X}, IsClosed S → IsClosed T → Disjoint S T → (∃ f : X → ℝ, Continuous f → (∀ x ∈ S, f x = 0) ∧ (∀ x ∈ T, f x = 1)) ) "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "real_field_aut_trivial",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"The only field automorphism of the reals is the identity.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "The only field automorphism of the reals is the identity.",
      "codex_time": 6.783345555013511,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Field_automorphism_reals_Eq_Id : ∀ (F : ℝ →+* ℝ), F =  (Id : ℝ →+* ℝ) ",
      "theorem Field_automorphism_reals_Id  : ∀ F : ℝ ≃+* ℝ, F = Equiv.refl _ ",
      "theorem Field_automorphism_of_reals  (F : ℝ → ℝ) [Field_hom F] (hF0 : F 0 = 0) (hF1 : F 1 = 1)  : Function.Bijective F ",
      "theorem Field_hom_Id_of_reals (F : ℝ →+* ℝ) : F = Function.Id ↔ Function.Comp F F = F ",
      "theorem Field_automorphism_reals_Eq_Id (F : ℝ →+* ℝ) : F = 1 "
    ],
    "answer": "theorem real_field_aut_trivial : ∀ (f : ℝ ≃+* ℝ), (∀ x : ℝ, f x = x) "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "real_field_aut_trivial",
      "main_prompt": "The only field automorphism of the reals is the identity.",
      "prompt": "Natural language version: \" There is at most one ordered ring isomorphism between a linear ordered field and an archimedean linear ordered field.\" Translate the natural language version to a Lean mathlib version:\n theorem order_ring_iso.subsingleton_right{α : Type u_2} {β : Type u_3} [linear_ordered_field α] [linear_ordered_field β] [archimedean β] :\nsubsingleton (α ≃+*o β) := \n\nNatural language version: \" There is at most one ordered ring isomorphism between an archimedean linear ordered field and a linear ordered field.\" Translate the natural language version to a Lean mathlib version:\n theorem order_ring_iso.subsingleton_left{α : Type u_2} {β : Type u_3} [linear_ordered_field α] [archimedean α] [linear_ordered_field β] :\nsubsingleton (α ≃+*o β) := \n\nNatural language version: \" There is at most one ordered ring homomorphism from a linear ordered field to an archimedean linear ordered field.\" Translate the natural language version to a Lean mathlib version:\n theorem order_ring_hom.subsingleton{α : Type u_2} {β : Type u_3} [linear_ordered_field α] [linear_ordered_field β] [archimedean β] :\nsubsingleton (α →+*o β) := \n\nNatural language version: \"The cardinality of the reals, as a type.\" Translate the natural language version to a Lean mathlib version:\n theorem cardinal.mk_real :\ncardinal.mk ℝ = cardinal.continuum := \n\nNatural language version: \"The only field automorphism of the reals is the identity.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.5189149975776672,
          "doc_string": " There is at most one ordered ring isomorphism between a linear ordered field and an archimedean linear ordered field.",
          "statement": "theorem order_ring_iso.subsingleton_right {α : Type u_2} {β : Type u_3} [linear_ordered_field α] [linear_ordered_field β] [archimedean β] : subsingleton (α ≃+*o β)"
        },
        {
          "sim_score": 0.5125109553337097,
          "doc_string": " There is at most one ordered ring isomorphism between an archimedean linear ordered field and a linear ordered field.",
          "statement": "theorem order_ring_iso.subsingleton_left {α : Type u_2} {β : Type u_3} [linear_ordered_field α] [archimedean α] [linear_ordered_field β] : subsingleton (α ≃+*o β)"
        },
        {
          "sim_score": 0.4997551739215851,
          "doc_string": " There is at most one ordered ring homomorphism from a linear ordered field to an archimedean linear ordered field.",
          "statement": "theorem order_ring_hom.subsingleton {α : Type u_2} {β : Type u_3} [linear_ordered_field α] [linear_ordered_field β] [archimedean β] : subsingleton (α →+*o β)"
        },
        {
          "sim_score": 0.4784242510795593,
          "doc_string": "The cardinality of the reals, as a type.",
          "statement": "theorem cardinal.mk_real  : cardinal.mk ℝ = cardinal.continuum"
        }
      ],
      "codex_time": 9.451521862996742,
      "search_time": 1.5093220950220712,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Real.Subsingleton_Field_aut : Subsingleton (Real.Field_aut →₀ Real.Field_aut) ",
      "theorem Eq_Id.Field_automorphisms_reals (F : ℝ →+* ℝ) : F = 𝕍 ",
      "theorem Field_automorphism.Id_iff_of_Real_Field {α : type u_1} [Field α] {F : α ≃+* α} (hr : ∀ A : α, A ≠ 0 → ∃ n : ℕ, n⁻¹ ≤ F A ∧ F A ≤ n) : F = Field_automorphism.Id α ",
      "theorem Field_automorphism_Real.Unique (F : ℝ →+* ℝ) : F = Field_automorphism.Id ",
      "theorem _Field_automorphism_Id : ∀ (g : ℝ →+* ℝ), g = 𝕍1 "
    ],
    "answer": "theorem real_field_aut_trivial : ∀ (f : ℝ ≃+* ℝ), (∀ x : ℝ, f x = x) "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "real_field_aut_trivial",
      "main_prompt": "The only field automorphism of the reals is the identity.",
      "prompt": "Natural language version: \"The only field automorphism of the reals is the identity.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 13.798172502021771,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem exists_automorphism_of_Field_reals : exists (Ee : Embedding ℝ ℝ), Ee.ToFun ≠ Id ",
      "theorem the_only_Field_automorphism_of_the_reals__the_identity :  (∀ F : ℝ → ℝ, Function.Bijective F → automorphism F (AddMonoid.to_AddGroup ℝ)) → ((automorphism.to_AddGroup_hom     (_Group_hom.of_Bijective       (_AddGroup_hom.AddMonoid_to_AddGroup ℝ)       (automorphism.Symm (_Total_bijection.Id (AddMonoid.to_AddGroup ℝ))",
      "theorem Poly_aut (F : α → β) [_Field_hom F] [Field α] [Field β] (h : ¬ α = ⊤) : F = Id ",
      "theorem F_aut_Id : ∀ F : ℝ → ℝ, Function.automorphism F → F = Id in mathlib proof :   intros F hF ⟨ g hg ⟩ , have hg' : ... ",
      "theorem King_of_the_Real_numbers {U : type} (Algebra : type) [CommMonoid U]  (ϕ : Algebra → Algebra) (B : Algebra) (Hom : Algebra → U → Prop)  (homomorphism : ∀ A, Hom A (1))  (invariant : ∀ {A B : Algebra}, Hom A B → Hom (ϕ A) B)  (μ : Algebra → U → Algebra → type) (ϕ_Mul : ∀ A B, Hom A B → Hom (ϕ A) B → Hom (ϕ (ϕ A)) (ϕ B))  (One_of_A :"
    ],
    "answer": "theorem real_field_aut_trivial : ∀ (f : ℝ ≃+* ℝ), (∀ x : ℝ, f x = x) "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "period_three_implies_chaos",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"If a function from the unit interval to itself has a point of period three, then it has points of all positive periods.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "If a function from the unit interval to itself has a point of period three, then it has points of all positive periods.",
      "codex_time": 13.564320550009143,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem fn_with_three_period_has_all_periods_Gt_0 [Nonempty α] [Preorder α]  (F : α → α) (h_three : ∃ x, ∃ e > 0, ∀ y, dist y x < e → F y = F (F (F x)))  (h_Mono : Monotone F) : ∀ (n : ℕ), n > 0 → ∃ x, ∃ e > 0,  ∀ y, dist y x < e → F^[n] x = F^[n] y ",
      "theorem points_of_positive_period_exist_of_point_period_three (F : [0,1] → [0,1])  (hF : ∃ x : [0,1], periodic F x 3) :  ∀ n : ℕ,  ∃ x : [0,1],  periodic F x n ",
      "theorem non_periodic_point_Implies_point_of_all_periods (F : i → i)  (hF : ∃ x ∈ i, F (F (F x)) = x) : ∀ k : ℕ, k > 0 → ∃ y ∈ i, F ^ k y = y ",
      "theorem period_three_has_all_periods {x : type*} [TopologicalSpace x] [MetricSpace x] [MetricSpace.to_TopologicalSpace x] (F : x → x) (x0 : x)  (hF : ∀ x : x, F (F (F x)) = F x) (hx0 : F (F (F x0)) = x0) :  ∀ n : ℕ, ∃ x : x, F (F (F ... (F x) ... n times)) = x ",
      "theorem period_three_Implies_all_periods [TopologicalSpace (icc 0 1)] [Nontrivial icc_Nontrivial_Real]  (F : icc 0 1 → icc 0 1) (h : ∃ m : ℝ, 0 < m ∧ 1 > m ∧ F (Real.icc m (m+1)) = Real.icc m (m+1))  (hF : ∀ m : ℝ, 0 < m ∧ 1 > m → F (Real.icc m (m+1)) = Real.icc m (m+1)):   ∀ n:ℕ"
    ],
    "answer": "theorem period_three_implies_chaos : ∀ f : Set.Icc 0 1 → Set.Icc 0 1, (∃ x : Set.Icc 0 1, Function.IsPeriodicPt f 3 x) → (∀ n : ℕ, n > 0 → ∃ y : Set.Icc 0 1, Function.IsPeriodicPt f n y) "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "period_three_implies_chaos",
      "main_prompt": "If a function from the unit interval to itself has a point of period three, then it has points of all positive periods.",
      "prompt": "Natural language version: \"If a function `f` is `periodic` with positive period `c`, then for all `x` there exists some  `y ∈ Ico 0 c` such that `f x = f y`.\" Translate the natural language version to a Lean mathlib version:\n theorem function.periodic.exists_mem_Ico₀{α : Type u_1} {β : Type u_2} {f : α → β} {c : α} [linear_ordered_add_comm_group α] [archimedean α] (h : function.periodic f c) (hc : 0 < c) (x : α) :\n∃ (y : α) (H : y ∈ set.Ico 0 c), f x = f y := \n\nNatural language version: \"If a function `f` is `periodic` with positive period `c`, then for all `x` there exists some  `y ∈ Ico a (a + c)` such that `f x = f y`.\" Translate the natural language version to a Lean mathlib version:\n theorem function.periodic.exists_mem_Ico{α : Type u_1} {β : Type u_2} {f : α → β} {c : α} [linear_ordered_add_comm_group α] [archimedean α] (h : function.periodic f c) (hc : 0 < c) (x a : α) :\n∃ (y : α) (H : y ∈ set.Ico a (a + c)), f x = f y := \n\nNatural language version: \"If a function `f` is `periodic` with positive period `c`, then for all `x` there exists some  `y ∈ Ioc a (a + c)` such that `f x = f y`.\" Translate the natural language version to a Lean mathlib version:\n theorem function.periodic.exists_mem_Ioc{α : Type u_1} {β : Type u_2} {f : α → β} {c : α} [linear_ordered_add_comm_group α] [archimedean α] (h : function.periodic f c) (hc : 0 < c) (x a : α) :\n∃ (y : α) (H : y ∈ set.Ioc a (a + c)), f x = f y := \n\nNatural language version: \" If `f` sends two periodic points `x` and `y` of positive periods to the same point, then `x = y`.\" Translate the natural language version to a Lean mathlib version:\n theorem function.is_periodic_pt.eq_of_apply_eq{α : Type u_1} {f : α → α} {x y : α} {m n : ℕ} (hx : function.is_periodic_pt f m x) (hy : function.is_periodic_pt f n y) (hm : 0 < m) (hn : 0 < n) (h : f x = f y) :\nx = y := \n\nNatural language version: \"If a function from the unit interval to itself has a point of period three, then it has points of all positive periods.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.6410606503486633,
          "doc_string": "If a function `f` is `periodic` with positive period `c`, then for all `x` there exists some  `y ∈ Ico 0 c` such that `f x = f y`.",
          "statement": "theorem function.periodic.exists_mem_Ico₀ {α : Type u_1} {β : Type u_2} {f : α → β} {c : α} [linear_ordered_add_comm_group α] [archimedean α] (h : function.periodic f c) (hc : 0 < c) (x : α) : ∃ (y : α) (H : y ∈ set.Ico 0 c), f x = f y"
        },
        {
          "sim_score": 0.6367848515510559,
          "doc_string": "If a function `f` is `periodic` with positive period `c`, then for all `x` there exists some  `y ∈ Ico a (a + c)` such that `f x = f y`.",
          "statement": "theorem function.periodic.exists_mem_Ico {α : Type u_1} {β : Type u_2} {f : α → β} {c : α} [linear_ordered_add_comm_group α] [archimedean α] (h : function.periodic f c) (hc : 0 < c) (x a : α) : ∃ (y : α) (H : y ∈ set.Ico a (a + c)), f x = f y"
        },
        {
          "sim_score": 0.6170958876609802,
          "doc_string": "If a function `f` is `periodic` with positive period `c`, then for all `x` there exists some  `y ∈ Ioc a (a + c)` such that `f x = f y`.",
          "statement": "theorem function.periodic.exists_mem_Ioc {α : Type u_1} {β : Type u_2} {f : α → β} {c : α} [linear_ordered_add_comm_group α] [archimedean α] (h : function.periodic f c) (hc : 0 < c) (x a : α) : ∃ (y : α) (H : y ∈ set.Ioc a (a + c)), f x = f y"
        },
        {
          "sim_score": 0.5864872932434082,
          "doc_string": " If `f` sends two periodic points `x` and `y` of positive periods to the same point, then `x = y`.",
          "statement": "theorem function.is_periodic_pt.eq_of_apply_eq {α : Type u_1} {f : α → α} {x y : α} {m n : ℕ} (hx : function.is_periodic_pt f m x) (hy : function.is_periodic_pt f n y) (hm : 0 < m) (hn : 0 < n) (h : f x = f y) : x = y"
        }
      ],
      "codex_time": 8.996071822999511,
      "search_time": 1.5940131290117279,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Function.exists_period_three_of_Ico_self_to_self₀{α : type u_1} [Linear_ordered_comm_Group α] [Archimedean α] {F : Ico ₀ (1 : α) → Ico ₀ (1 : α)} (hF : Function.Bijective F) : ∃ x, Function.IsPeriodicPt F 3 x ",
      "theorem Function.IsPeriodicPt.exists_three{α : type u_1} [Linear_ordered_AddCommGroup α] (F : icc 0 1 → α) {x : α} (h : Function.IsPeriodicPt F 3 x) {z : α} (hz : 0 < z) : ∃ (t : ℕ) (y : α), Function.IsPeriodicPt F t y ",
      "theorem Function.IsPeriodicPt_of_period_three_icc{F : ℝ → ℝ} (h : Function.IsPeriodicPt F (3 : ℕ) (0 : ℝ)) :  ∀ (m : ℕ), Function.IsPeriodicPt F m (0 : ℝ) ",
      "theorem Function.exists_periodic_point.of_period_three_of_Unit_Interval_to_Unit_Interval{F : ℝ → ℝ} (h : Function.exists_periodic_point 3 F) : ∀ (n : ℕ) (h : n > 0), Function.exists_periodic_point n F ",
      "theorem Function.exists_of__periodic_pt{α : type u_1} {F : α → α} {x : α} {m : ℕ} (hx : Function.IsPeriodicPt F m x) (hm : 0 < m) : ∃ (y : α) (n : ℕ), (0 < n) ∧ (Function.IsPeriodicPt F n y) "
    ],
    "answer": "theorem period_three_implies_chaos : ∀ f : Set.Icc 0 1 → Set.Icc 0 1, (∃ x : Set.Icc 0 1, Function.IsPeriodicPt f 3 x) → (∀ n : ℕ, n > 0 → ∃ y : Set.Icc 0 1, Function.IsPeriodicPt f n y) "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "period_three_implies_chaos",
      "main_prompt": "If a function from the unit interval to itself has a point of period three, then it has points of all positive periods.",
      "prompt": "Natural language version: \"If a function from the unit interval to itself has a point of period three, then it has points of all positive periods.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 13.508300371002406,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem :     ∀ (F : ℝ → ℝ) (A : ℝ),     A ∈ icc 0 1 → F A = A →     ∀ (n : ℕ), ∃ (B : ℝ), B ∈ icc 0 1 ∧ (F ^[ 3] B = B) ∧ (F ^[ n] B = B) ",
      "theorem erratum_nth : 1 ≤ n → ∀ x, (F ^[n]).1 x = x → ∃ y, ∃ m : ℕ, n ≤ m ∧ (F ^[m]).1 y = y ",
      "theorem three_Implies_all (F : ℝ → ℝ) (hF : ∃ x : ℝ, F (F (F x)) = x) : ∃ n : ℕ, ∃ x : ℝ, n > 0 ∧ F^[n] x = x ",
      "theorem foo (F : ℝ → ℝ) (h : ∃ x ∈ icc 0 1, F (F (F x)) = x) :   ∃ x ∈ icc 0 1, ∃ D : ℕ, (D ≠ 1) ∧ ∀ y ∈ icc 0 1 (F y = y → y = x) ",
      "theorem blue_berry {F : ℕ → ℕ → Prop}      (h : ∀ x, ∀ y, ∃ z, F x z ∧ F z y):      ∀ x, ∀ y, ∃ z, F x z ∧ F z y  3. Write the negation of the proposition.  theorem blue_berry {F : ℕ → ℕ → Prop}      (h : ∀ x, ∀ y, ∃ z, F x z ∧ F z y):      ∀ x, ∀ y, ∃ z, F x z ∧ F z y → False  4. Prove the Neg"
    ],
    "answer": "theorem period_three_implies_chaos : ∀ f : Set.Icc 0 1 → Set.Icc 0 1, (∃ x : Set.Icc 0 1, Function.IsPeriodicPt f 3 x) → (∀ n : ℕ, n > 0 → ∃ y : Set.Icc 0 1, Function.IsPeriodicPt f n y) "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "terminal_unique_iso",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"A terminal object in a category is unique up to unique isomorphism.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "A terminal object in a category is unique up to unique isomorphism.",
      "codex_time": 9.574278379004681,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem CategoryTheory_Unique_Upto_Unique_isomorphism {C : type u}  [Category.{v} C] (t t' : C) : terminal t → @terminal._Unique C _ t t' _ _ ",
      "theorem terminal__Unique (C : type u) [Category C] [h : has_terminal C]  {x Y : C} (hX : IsTerminal x) (hY : IsTerminal Y) :  x ≅ Y ",
      "theorem Unique_terminal_Up_to_isomorphism {C : type*} [Category.{v} C] : ∀ (t t₀ : C), terminal t → terminal t₀ → t ≅ t₀ ",
      "theorem if_two_terminal_objects_then_they_are_isomorphic   {C : type*} [Category.{v} C] (t t' : C) (ht : IsTerminal t) (ht' : IsTerminal t') :     t ≅ t' ",
      "theorem terminal__Unique_Up_to_Unique_iso (C : type u) [Category.{v} C]  (t₁ t₂ : C) (hT₁ : IsTerminal t₁) (hT₂ : IsTerminal t₂) :  t₁ ≅ t₂ "
    ],
    "answer": "theorem terminal_unique_iso {C : Type _} [CategoryTheory.Category C] : ∀ T₁ T₂ : C, CategoryTheory.Limits.IsTerminal T₁ → CategoryTheory.Limits.IsTerminal T₂ → (∃ ι : CategoryTheory.Iso T₁ T₂, ∀ ι' : CategoryTheory.Iso T₁ T₂, ι = ι') "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "terminal_unique_iso",
      "main_prompt": "A terminal object in a category is unique up to unique isomorphism.",
      "prompt": "Natural language version: \" We can more explicitly show that a category has a terminal object by specifying the object, and showing there is a unique morphism to it from any other object.\" Translate the natural language version to a Lean mathlib version:\n theorem category_theory.limits.has_terminal_of_unique{C : Type u₁} [category_theory.category C] (X : C) [h : Π (Y : C), unique (Y ⟶ X)] :\ncategory_theory.limits.has_terminal C := \n\nNatural language version: \"Any two morphisms to a terminal object are equal.\" Translate the natural language version to a Lean mathlib version:\n theorem category_theory.limits.is_terminal.hom_ext{C : Type u₁} [category_theory.category C] {X Y : C} (t : category_theory.limits.is_terminal X) (f g : Y ⟶ X) :\nf = g := \n\nNatural language version: \"If the unique morphism from `A` to a terminal object is a monomorphism, `A` is subterminal. The converse of `is_subterminal.mono_is_terminal_from`.\" Translate the natural language version to a Lean mathlib version:\n theorem category_theory.is_subterminal_of_mono_is_terminal_from{C : Type u₁} [category_theory.category C] {A T : C} (hT : category_theory.limits.is_terminal T) [category_theory.mono (hT.from A)] :\ncategory_theory.is_subterminal A := \n\nNatural language version: \"If there are zero morphisms, any terminal object is a zero object.\" Translate the natural language version to a Lean mathlib version:\n theorem category_theory.limits.has_zero_object_of_has_terminal_object{C : Type u} [category_theory.category C] [category_theory.limits.has_zero_morphisms C] [category_theory.limits.has_terminal C] :\ncategory_theory.limits.has_zero_object C := \n\nNatural language version: \"A terminal object in a category is unique up to unique isomorphism.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.8502864837646484,
          "doc_string": " We can more explicitly show that a category has a terminal object by specifying the object, and showing there is a unique morphism to it from any other object.",
          "statement": "theorem category_theory.limits.has_terminal_of_unique {C : Type u₁} [category_theory.category C] (X : C) [h : Π (Y : C), unique (Y ⟶ X)] : category_theory.limits.has_terminal C"
        },
        {
          "sim_score": 0.8256147503852844,
          "doc_string": "Any two morphisms to a terminal object are equal.",
          "statement": "theorem category_theory.limits.is_terminal.hom_ext {C : Type u₁} [category_theory.category C] {X Y : C} (t : category_theory.limits.is_terminal X) (f g : Y ⟶ X) : f = g"
        },
        {
          "sim_score": 0.6706336140632629,
          "doc_string": "If the unique morphism from `A` to a terminal object is a monomorphism, `A` is subterminal. The converse of `is_subterminal.mono_is_terminal_from`.",
          "statement": "theorem category_theory.is_subterminal_of_mono_is_terminal_from {C : Type u₁} [category_theory.category C] {A T : C} (hT : category_theory.limits.is_terminal T) [category_theory.mono (hT.from A)] : category_theory.is_subterminal A"
        },
        {
          "sim_score": 0.6649926900863647,
          "doc_string": "If there are zero morphisms, any terminal object is a zero object.",
          "statement": "theorem category_theory.limits.has_zero_object_of_has_terminal_object {C : Type u} [category_theory.category C] [category_theory.limits.has_zero_morphisms C] [category_theory.limits.has_terminal C] : category_theory.limits.has_zero_object C"
        }
      ],
      "codex_time": 12.061553191015264,
      "search_time": 1.4388788799988106,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem CategoryTheory.Limits.Unique_terminal_Equiv{C : type u₁} [CategoryTheory.Category C] : Unique (CategoryTheory.Limits.HasTerminal C) ",
      "theorem CategoryTheory.Limits.terminal_Up_to_isomorphism{C : type*} [CategoryTheory.Category C] [t₁ : CategoryTheory.Limits.HasTerminal C] [t₂ : CategoryTheory.Limits.HasTerminal C] : CategoryTheory.IsIso (t₁.terminal.from t₂.terminal) ",
      "theorem CategoryTheory.Limits.terminal_IsIso_Zero_object{C : type u} [CategoryTheory.Category C] {t : C} [CategoryTheory.Limits.HasTerminal C] [CategoryTheory.Limits.has_Zero_object C] : Nonempty (t ≅ (0 : C)) ",
      "theorem CategoryTheory.uniqueness_of_terminal_Up_to_iso{C : type u₁} [CategoryTheory.Category C] {t₁ t₂ : C} [CategoryTheory.Limits.IsTerminal t₁] [CategoryTheory.Limits.IsTerminal t₂] : ∃ (F : t₁ ⟶ t₂), ∀ (g : t₁ ⟶ t₂), CategoryTheory.Mono g → F = g ",
      "theorem CategoryTheory.Limits.IsTerminal_Unique {C : type u} [CategoryTheory.Category C] (t t' : C) : CategoryTheory.Limits.IsTerminal t → CategoryTheory.Limits.IsTerminal t' → t ≅ t' "
    ],
    "answer": "theorem terminal_unique_iso {C : Type _} [CategoryTheory.Category C] : ∀ T₁ T₂ : C, CategoryTheory.Limits.IsTerminal T₁ → CategoryTheory.Limits.IsTerminal T₂ → (∃ ι : CategoryTheory.Iso T₁ T₂, ∀ ι' : CategoryTheory.Iso T₁ T₂, ι = ι') "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "terminal_unique_iso",
      "main_prompt": "A terminal object in a category is unique up to unique isomorphism.",
      "prompt": "Natural language version: \"A terminal object in a category is unique up to unique isomorphism.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 10.971891207998851,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem terminal__Unique {C : type u}   [Category.{ v } C]   (t₁ t₂ : overt (over (terminal) C))   (W₁ : t₁ ⟶ terminal C)   (W₂ : t₂ ⟶ terminal C)   : Unique_isomorphism(W₁ ≫ overt.rec_iso t₁, W₂ ≫ overt.rec_iso t₂).   Is there still A problem?  }  lemma Embedding_unicity   {C : type u} [Category.",
      "theorem terminal_prop { x : type } [ terminal : Category.{ u v }.{ v } x ] : ∃! x : x , True     ",
      "theorem terminal_Unique (C : type*) [𝒞 : Category.{v} C] [terminal.{v} C] (t : C) [terminal_object.{v} t] :   t ≅ terminal.{v} C ",
      "theorem Unique_terminal_object (C : type) [Category C] :      Unique (terminal_object C)   ",
      "theorem terminal_object__Unique_Up_to_Unique_isomorphism {C : type u} [Category.{v} C] (t₁ t₂ : C) (HT₁ : IsTerminal t₁)   (HT₂ : IsTerminal t₂) : {F : t₁ ⟶ t₂ // ∀ g : t₁ ⟶ t₂, F ≫ HT₂.uniq g = HT₁.uniq g} "
    ],
    "answer": "theorem terminal_unique_iso {C : Type _} [CategoryTheory.Category C] : ∀ T₁ T₂ : C, CategoryTheory.Limits.IsTerminal T₁ → CategoryTheory.Limits.IsTerminal T₂ → (∃ ι : CategoryTheory.Iso T₁ T₂, ∀ ι' : CategoryTheory.Iso T₁ T₂, ι = ι') "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "torsion_in_fg_group_implies_finite",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"A finitely-presented group containing a torsion element is finite.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "A finitely-presented group containing a torsion element is finite.",
      "codex_time": 7.901811512972927,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Finite_Group_contains_torsion_element (G : type*)  [Fintype G] [Group G] (n : ℕ) (m : G) (h_m : m ^ n = 1):  Card G < ⊤ ",
      "theorem torsion_Implies_Finite (G : type*) [Group G] [Fintype G] [_Finite_Group G] :  ∃ x : G, ∃ n : ℕ, (x ^ n = 1) ∧ (IsNoetherian Int G) ",
      "theorem Finite_presented_Group_with_torsion_element__Finite (R : type*) [CommRing R] (g : free_Group R)  (F : free_Group R →* R →+* ℤ) (Nontrivial : ∃ r : R, r ≠ 0 ∧ F.ToFun (F.Ker.Lift r) = 0) :  Fintype R ",
      "theorem fp_Group_has_torsion_Implies_Finite (G : type*) [Group G]  (C : Fin_chain_GP G) :  ∀ g, ∃ n g' : ℕ, C.Fintype.mem_terminal n g' ∧  C.Fintype.stable_under_helper n g' g ",
      "theorem Finite_Subgroup_of_torsion (G : type*) [Group G] [Fintype G] [Fintype (units G)]  (x : G) (htorsion : ∀ n : ℕ, (x ^ n) ∈ Finset.Univ) :  Finset.Card G < ∞ "
    ],
    "answer": "theorem torsion_in_fg_group_implies_finite {G : Type _} [Groupₓ G] : Groupₓ.Fg G → Finite G "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "torsion_in_fg_group_implies_finite",
      "main_prompt": "A finitely-presented group containing a torsion element is finite.",
      "prompt": "Natural language version: \"Finite groups are torsion groups.\" Translate the natural language version to a Lean mathlib version:\n theorem is_torsion_of_fintype{G : Type u_1} [group G] [fintype G] :\nmonoid.is_torsion G := \n\nNatural language version: \"Subgroups of torsion groups are torsion groups.\" Translate the natural language version to a Lean mathlib version:\n theorem is_torsion.subgroup{G : Type u_1} [group G] (tG : monoid.is_torsion G) (H : subgroup G) :\nmonoid.is_torsion ↥H := \n\nNatural language version: \"Finite additive groups are additive torsion groups.\" Translate the natural language version to a Lean mathlib version:\n theorem is_add_torsion_of_fintype{G : Type u_1} [add_group G] [fintype G] :\nadd_monoid.is_torsion G := \n\nNatural language version: \"A nontrivial torsion group is not torsion-free.\" Translate the natural language version to a Lean mathlib version:\n theorem is_torsion.not_torsion_free{G : Type u_1} [group G] [hN : nontrivial G] :\nmonoid.is_torsion G → ¬monoid.is_torsion_free G := \n\nNatural language version: \"A finitely-presented group containing a torsion element is finite.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.7566978335380554,
          "doc_string": "Finite groups are torsion groups.",
          "statement": "theorem is_torsion_of_fintype {G : Type u_1} [group G] [fintype G] : monoid.is_torsion G"
        },
        {
          "sim_score": 0.6571311950683594,
          "doc_string": "Subgroups of torsion groups are torsion groups.",
          "statement": "theorem is_torsion.subgroup {G : Type u_1} [group G] (tG : monoid.is_torsion G) (H : subgroup G) : monoid.is_torsion ↥H"
        },
        {
          "sim_score": 0.6486772298812866,
          "doc_string": "Finite additive groups are additive torsion groups.",
          "statement": "theorem is_add_torsion_of_fintype {G : Type u_1} [add_group G] [fintype G] : add_monoid.is_torsion G"
        },
        {
          "sim_score": 0.6356827020645142,
          "doc_string": "A nontrivial torsion group is not torsion-free.",
          "statement": "theorem is_torsion.not_torsion_free {G : Type u_1} [group G] [hN : nontrivial G] : monoid.is_torsion G → ¬monoid.is_torsion_free G"
        }
      ],
      "codex_time": 9.398841628979426,
      "search_time": 1.6795614779985044,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem _torsion.Finset.Fintype_of_fp{G : type u_1} [Group G] [fp_Group G] (U : G) (h : Monoid._torsion G U) : Fintype G ",
      "theorem fg__Finite_of_torsion{G : type u_1} [Group G]   (hG : Fintype G)   (g : ∃ x : G, x ≠ 1) : ∃ P : ℕ, G ≃ Finset.Univ.Card = P ",
      "theorem _torsion.Finset{G : type u} [Group G] [hNG : Nontrivial G] [_Fin_pres G] : ∃ x : G, Monoid._torsion (Finset.Singleton x) ",
      "theorem finitely_presented._Finite_of_torsion{G : type u_1} [Group G] [Fintype G] (hG : finitely_presented G) :  ∃ n : ℕ, ∀ g : G, (Monoid.has_Pow g n) = 1 ",
      "theorem _torsion.fp_Fintype(G : type u_3) [Group G] [fp_Group G] (A : G) : ∃ n : ℕ, ∀ n : ℕ, n • A = 1 → n = 0 → False → False "
    ],
    "answer": "theorem torsion_in_fg_group_implies_finite {G : Type _} [Groupₓ G] : Groupₓ.Fg G → Finite G "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "torsion_in_fg_group_implies_finite",
      "main_prompt": "A finitely-presented group containing a torsion element is finite.",
      "prompt": "Natural language version: \"A finitely-presented group containing a torsion element is finite.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 7.57651069900021,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem exists_torsion_Implies_Finite : ∀ G : Multiplicative (free_Group α) ,   ∃ g : free_Group β∈ G , Finite_order g → Finite (Quotient_Group G)  ",
      "theorem foo (G : type) [Group G] (h : Finset G) (h : ∀ (g ∈ h), ∀ (h ∈ h), g * h = 1) (t : ∃ (g ∈ h), g ≠ 1) :   False . Define foo and prove it in mathlib. In the process, you must create new lemmas as needed.  (Update: we have now proved it in mathlib. But you can practice by trying to prove it again, without looking at the code. Or glance at the code, and try to emulate the naming/formatting.) */  theorem Fin_gp_of_t",
      "theorem Finite_Group_Implies_Finite_order_Elements : Function.Equiv (Finite_Group α) (∀ A, order_of A < ⊤) ",
      "theorem q3 : ∃ (G : type) [Group G] [Fintype G], ∃ g : G, order g ≠ 1 ",
      "theorem finitely_presented_Group_A_torsion_element__Finite (k : type*) [CommRing k] [Fintype k] [Field k] [Fintype (units k)]    [finitely_presented_Group (AddCommGroup_with_Zero (units k))) (A : (units k)).          theorem finitely_presented_Group_A_torsion_element__Finite (k : type*) [CommRing k] [Fintype k] [Field k] [Fintype (units k)]    [finitely_presented_Group (Add_comm_"
    ],
    "answer": "theorem torsion_in_fg_group_implies_finite {G : Type _} [Groupₓ G] : Groupₓ.Fg G → Finite G "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "compl_union",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"The complement of the union of two sets is the intersection of their complements.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "The complement of the union of two sets is the intersection of their complements.",
      "codex_time": 12.295254955999553,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem set.IsCompl_union_IsCompl' (x : type*) [DecidableEq x]: ∀ A B : set x,  x \\ (A ∪ B) = x \\ A ∩ x \\ B ",
      "theorem IsCompl_union_IsCompl_Inter : ∀ (A B : set x), -(A ∪ B) = -A ∩ -B ",
      "theorem preimage_sInter_of_preimage_of_sUnion_Eq_sUnion_of_preimage   (α : type u) (β : type v) [TopologicalSpace α] [TopologicalSpace β] [TopologicalSpace (α × β)]   (S : set (α × β)) (t : set β) :  sInter (t.comap $ λP:S, P.Snd) ↑S =  ↑sUnion (t.Map $ λP:S, P.Snd) ",
      "theorem complement_of_union_Eq_intersection_of_complements (x : type*) [TopologicalSpace x]  (A B : set x) : (- A ∪ B)^C = (-A)^C ⊓ (-B)^C ",
      "theorem complement_union_Eq_intersection_complement (x : type*) (A B : set x) : set.IsCompl A ∪ set.IsCompl B = (A ∩ B)ᶜ "
    ],
    "answer": "theorem compl_union {α : Type _} (S T : Set α) : (S ∪ T).compl = S.compl ∩ T.compl "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "compl_union",
      "main_prompt": "The complement of the union of two sets is the intersection of their complements.",
      "prompt": "Natural language version: \"The complement of a set has the same frontier as the original set.\" Translate the natural language version to a Lean mathlib version:\n theorem frontier_compl{α : Type u} [topological_space α] (s : set α) :\nfrontier sᶜ = frontier s := \n\nNatural language version: \"The union of two sets is bounded above if and only if each of the sets is.\" Translate the natural language version to a Lean mathlib version:\n theorem bdd_below_union{γ : Type w} [semilattice_inf γ] {s t : set γ} :\nbdd_below (s ∪ t) ↔ bdd_below s ∧ bdd_below t := \n\nNatural language version: \"The union of two sets is bounded above if and only if each of the sets is.\" Translate the natural language version to a Lean mathlib version:\n theorem bdd_above_union{γ : Type w} [semilattice_sup γ] {s t : set γ} :\nbdd_above (s ∪ t) ↔ bdd_above s ∧ bdd_above t := \n\nNatural language version: \" The cardinality of a union is at most the sum of the cardinalities of the two sets.\" Translate the natural language version to a Lean mathlib version:\n theorem cardinal.mk_union_le{α : Type u} (S T : set α) :\ncardinal.mk ↥(S ∪ T) ≤ cardinal.mk ↥S + cardinal.mk ↥T := \n\nNatural language version: \"The complement of the union of two sets is the intersection of their complements.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.6778950691223145,
          "doc_string": "The complement of a set has the same frontier as the original set.",
          "statement": "theorem frontier_compl {α : Type u} [topological_space α] (s : set α) : frontier sᶜ = frontier s"
        },
        {
          "sim_score": 0.6120935678482056,
          "doc_string": "The union of two sets is bounded above if and only if each of the sets is.",
          "statement": "theorem bdd_below_union {γ : Type w} [semilattice_inf γ] {s t : set γ} : bdd_below (s ∪ t) ↔ bdd_below s ∧ bdd_below t"
        },
        {
          "sim_score": 0.6120935678482056,
          "doc_string": "The union of two sets is bounded above if and only if each of the sets is.",
          "statement": "theorem bdd_above_union {γ : Type w} [semilattice_sup γ] {s t : set γ} : bdd_above (s ∪ t) ↔ bdd_above s ∧ bdd_above t"
        },
        {
          "sim_score": 0.6097555160522461,
          "doc_string": " The cardinality of a union is at most the sum of the cardinalities of the two sets.",
          "statement": "theorem cardinal.mk_union_le {α : Type u} (S T : set α) : cardinal.mk ↥(S ∪ T) ≤ cardinal.mk ↥S + cardinal.mk ↥T"
        }
      ],
      "codex_time": 6.262508013984188,
      "search_time": 1.466880152001977,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem IsCompl_union{α : type u} {S t : set α} : Sᶜ ∪ tᶜ = (S ∩ t)ᶜ ",
      "theorem IsCompl_union{α : type u} (S₁ S₂ : set α) : (S₁ ∪ S₂)ᶜ = (S₁ᶜ) ∩ (S₂ᶜ) ",
      "theorem IsCompl_union{α : type u} {S t : set α} : (- S ∪ - t)ᶜ = - (S ∩ t) ",
      "theorem IsCompl_union{α : type u} (S t : set α) : (S ∪ t)ᶜ = Sᶜ ∩ tᶜ ",
      "theorem IsCompl_union{α : type u} {S t : set α} : (S ∪ t)ᶜ = Sᶜ ∩ tᶜ "
    ],
    "answer": "theorem compl_union {α : Type _} (S T : Set α) : (S ∪ T).compl = S.compl ∩ T.compl "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "compl_union",
      "main_prompt": "The complement of the union of two sets is the intersection of their complements.",
      "prompt": "Natural language version: \"The complement of the union of two sets is the intersection of their complements.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 11.641492582013598,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Complement_union_complement_intersection (A B : set t) :     (-(A ∪ B)) = (-A) ∩ (-B) ",
      "theorem ‹the complement of the union of two sets  the intersection of their complements› :     ∀ (A B : set α),         -(A ∪ B) = (-A ∩ -B)   ` -/ example   end xena -- hide   /- Hint: You can use union.comm, Inter.comm, IsCompl_union, Inter_IsCompl -/  universe u   /-- Lesson 1: α and β are the types -/ def set_private (α β : type u) ",
      "theorem DeMorgan_Diff2 : ( (∪ A:S, B : t, F A B) )' = (∩ A : S , (∩ B : t, (F A B)') ) ",
      "theorem DeMorgan2 (e1 e2 : set α) : -(e1 ∪ e2) = (-e1 ∩ -e2) ",
      "theorem art_Comp_u_Comp__Comp_u (A B : set ℤ) : - (A ∪ B) = - A ∩ - B "
    ],
    "answer": "theorem compl_union {α : Type _} (S T : Set α) : (S ∪ T).compl = S.compl ∩ T.compl "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "flt_3",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"The sum of the cubes of two positive integers is never equal to the cube of a third integer.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "The sum of the cubes of two positive integers is never equal to the cube of a third integer.",
      "codex_time": 9.350611811009003,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem impossible_Sum_of_two_cubes : ∀ A B, ¬ (A^3 + B^3 = 0) ",
      "theorem not_square_Sum_cube_Eq (m n : ℕ) (hmn : m > 0 ∧ n > 0) :  ∃ P : ℕ, (P^3 ≠ m^3 + n^3) ",
      "theorem Sum_cubes_of_two_nonzero_integers_never_Eq_cube_of_another (A B C : ℤ)  (ha : A ≠ 0) (hb : B ≠ 0) (hc : C ≠ 0) (habc : A ^ 3 + B ^ 3 = C ^ 3) : False ",
      "theorem Sum_of_cubes_not_equal_cube (A B C : ℤ) (hcab : C ^ 3 = A ^ 3 + B ^ 3)  (hc : C > 0) (ha : A > 0) (hb : B > 0) : False ",
      "theorem Sum_of_cubes__not_cube (n m k : ℤ) (hn : 0 < n) (hm : 0 < m) :  k ^ 3 ≠ n ^ 3 + m ^ 3 "
    ],
    "answer": "theorem flt_3 : ∀ a b c : ℕ, a > 0 → b > 0 → ¬(a^3 + b^3 = c^3) "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "flt_3",
      "main_prompt": "The sum of the cubes of two positive integers is never equal to the cube of a third integer.",
      "prompt": "Natural language version: \"The zeroth Pythagorean triple is all zeros.\" Translate the natural language version to a Lean mathlib version:\n theorem pythagorean_triple.zero :\npythagorean_triple 0 0 0 := \n\nNatural language version: \"The sum of two squares is zero iff both elements are zero.\" Translate the natural language version to a Lean mathlib version:\n theorem mul_self_add_mul_self_eq_zero{α : Type u} [linear_ordered_ring α] {x y : α} :\nx * x + y * y = 0 ↔ x = 0 ∧ y = 0 := \n\nNatural language version: \" **Fermat's theorem on the sum of two squares**. Every prime congruent to 1 mod 4 is the sum of two squares. Also known as **Fermat's Christmas theorem**.\" Translate the natural language version to a Lean mathlib version:\n theorem nat.prime.sq_add_sq{p : ℕ} [fact (nat.prime p)] (hp : p % 4 = 1) :\n∃ (a b : ℕ), a ^ 2 + b ^ 2 = p := \n\nNatural language version: \" Pythagorean triples are interchangable, i.e `x * x + y * y = y * y + x * x = z * z`. This comes from additive commutativity.\" Translate the natural language version to a Lean mathlib version:\n theorem pythagorean_triple_comm{x y z : ℤ} :\npythagorean_triple x y z ↔ pythagorean_triple y x z := \n\nNatural language version: \"The sum of the cubes of two positive integers is never equal to the cube of a third integer.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.5193248391151428,
          "doc_string": "The zeroth Pythagorean triple is all zeros.",
          "statement": "theorem pythagorean_triple.zero  : pythagorean_triple 0 0 0"
        },
        {
          "sim_score": 0.4774671792984009,
          "doc_string": "The sum of two squares is zero iff both elements are zero.",
          "statement": "theorem mul_self_add_mul_self_eq_zero {α : Type u} [linear_ordered_ring α] {x y : α} : x * x + y * y = 0 ↔ x = 0 ∧ y = 0"
        },
        {
          "sim_score": 0.4648144245147705,
          "doc_string": " **Fermat's theorem on the sum of two squares**. Every prime congruent to 1 mod 4 is the sum of two squares. Also known as **Fermat's Christmas theorem**.",
          "statement": "theorem nat.prime.sq_add_sq {p : ℕ} [fact (nat.prime p)] (hp : p % 4 = 1) : ∃ (a b : ℕ), a ^ 2 + b ^ 2 = p"
        },
        {
          "sim_score": 0.4421241879463196,
          "doc_string": " Pythagorean triples are interchangable, i.e `x * x + y * y = y * y + x * x = z * z`. This comes from additive commutativity.",
          "statement": "theorem pythagorean_triple_comm {x y z : ℤ} : pythagorean_triple x y z ↔ pythagorean_triple y x z"
        }
      ],
      "codex_time": 9.081373843015172,
      "search_time": 1.568569580995245,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Nat.cube_Sum_of_cubes{A B C : ℕ} [Fact (Nat.Prime C)] [Fact (Nat.Prime (A ^ 3 + B ^ 3))] (hpos : 0 < A ∧ 0 < B ∧ 0 < C) : A ˆ 3 + B ˆ 3 ≠ C ˆ 3 ",
      "theorem cube_Sum{x y z : ℕ} (hxy : x ^ 3 + y ^ 3 = z ^ 3) : False ",
      "theorem Sum_cube_neq{A B C : ℕ} (habn : A ^ 3 + B ^ 3 ≠ C ^ 3) : ¬ (A * A * A + B * B * B = C * C * C) ",
      "theorem Sum_cubes_three_squares (x y z : ℕ) (hx : 0 < x) (hy : 0 < y) (hz : 0 < z) : (x ^ 3 + y ^ 3 + z ^ 3) / 3 ≠ x * y * z ",
      "theorem Sum_of_cubes {x y z : ℤ} (hx : x > 0) (hy : y > 0) (hz : z > 0) : ¬ x ^ 3 + y ^ 3 = z ^ 3 "
    ],
    "answer": "theorem flt_3 : ∀ a b c : ℕ, a > 0 → b > 0 → ¬(a^3 + b^3 = c^3) "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "flt_3",
      "main_prompt": "The sum of the cubes of two positive integers is never equal to the cube of a third integer.",
      "prompt": "Natural language version: \"The sum of the cubes of two positive integers is never equal to the cube of a third integer.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 7.477294229000108,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Sum_of_two_cubes_neq_cube { A B C : ℕ} (ha : 0 < A) (hb : 0 < B) (hc : 0 < C) : A^3 + B^3 ≠ C^3 ",
      "theorem not_sumeq_cubes {x y z: ℕ} (hx: 0 < x) (hy: 0 < y) (hz: 0 < z):   x^3 + y^3 ≠ z^3 ",
      "theorem Sum_cube_Eq_cube { A B C : ℕ } ( h1 : 0 < A ) ( h2 : 0 < B ) ( h3 : 0 < C ) : A ^ 3 + B ^ 3 ≠ C ^ 3 ",
      "theorem Sum_squares_cubes_Eq_cube : ∀ (n m k : ℕ ), (n ^ 3) + (m ^ 3) = (k ^ 3) → False  Use tactic_ mode to complete the proof. -/  theorem Sum_squares_cubes_Eq_cube : ∀ (n m k : ℕ ), (n ^ 3) + (m ^ 3) = (k ^ 3) → False | 0 _ _ _ ",
      "theorem Sum_of_squares__not_square_of_third (n m l : ℕ) : (n ^ 3 + m ^ 3) ≠ l ^ 3 "
    ],
    "answer": "theorem flt_3 : ∀ a b c : ℕ, a > 0 → b > 0 → ¬(a^3 + b^3 = c^3) "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "elems_order_two_implies_commutative",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"If every element of a group `G` has order two, then every pair of elements of `G` commutes.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "If every element of a group `G` has order two, then every pair of elements of `G` commutes.",
      "codex_time": 7.174255167978117,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem pair_of_Elements_commuting_if_Group_Elements_have_order_two (G : type*) [Group G]  (h : ∀ x : G, x * x = 1) : ∀ x y : G, x * y * x * y * x * y * x * y = 1 ",
      "theorem order_two_commutes (G : type*) [Group G] (h : ∀ x : G, x = x⁻¹) : ∀ x y : G, x * y = y * x ",
      "theorem pair_commutes_of_Nat_two_order (G : type*) [Group G] (hG : ∀ (g : G), g^2 = 1) :  ∀ A B : G, A * B = B * A ",
      "theorem Group_of_order_two_pair_commutes (G : type*) [Group G] (h : ∀ A : G, A ≠ 1 → A * A = 1) :  ∀ {A B : G}, A * B = B * A ",
      "theorem order_two_Group_commutes (G : type*) [Group G] (hg : ∀ x : G, order x = 2) :  ∀ x y : G, x * y = y * x "
    ],
    "answer": "theorem elems_order_two_implies_commutative {G: Type _}[Group G] : (∀ x y : G, x * x = 1) → (∀ x y : G, Commute x y) "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "elems_order_two_implies_commutative",
      "main_prompt": "If every element of a group `G` has order two, then every pair of elements of `G` commutes.",
      "prompt": "Natural language version: \"If `a` commutes with `b`, then `b` commutes with `a`.\" Translate the natural language version to a Lean mathlib version:\n theorem commute.symm{S : Type u_1} [has_mul S] {a b : S} (h : commute a b) :\ncommute b a := \n\nNatural language version: \"If `a` commutes with `b`, then `b` commutes with `a`.\" Translate the natural language version to a Lean mathlib version:\n theorem add_commute.symm{S : Type u_1} [has_add S] {a b : S} (h : add_commute a b) :\nadd_commute b a := \n\nNatural language version: \"Commuting elements of finite order are closed under multiplication.\" Translate the natural language version to a Lean mathlib version:\n theorem commute.is_of_fin_order_mul{G : Type u} {y : G} [monoid G] {x : G} (h : commute x y) (hx : is_of_fin_order x) (hy : is_of_fin_order y) :\nis_of_fin_order (x * y) := \n\nNatural language version: \"If `a` commutes with both `b` and `c`, then it commutes with their product.\" Translate the natural language version to a Lean mathlib version:\n theorem commute.mul_right{S : Type u_1} [semigroup S] {a b c : S} (hab : commute a b) (hac : commute a c) :\ncommute a (b * c) := \n\nNatural language version: \"If every element of a group `G` has order two, then every pair of elements of `G` commutes.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.6088767051696777,
          "doc_string": "If `a` commutes with `b`, then `b` commutes with `a`.",
          "statement": "theorem commute.symm {S : Type u_1} [has_mul S] {a b : S} (h : commute a b) : commute b a"
        },
        {
          "sim_score": 0.6088767051696777,
          "doc_string": "If `a` commutes with `b`, then `b` commutes with `a`.",
          "statement": "theorem add_commute.symm {S : Type u_1} [has_add S] {a b : S} (h : add_commute a b) : add_commute b a"
        },
        {
          "sim_score": 0.5862270593643188,
          "doc_string": "Commuting elements of finite order are closed under multiplication.",
          "statement": "theorem commute.is_of_fin_order_mul {G : Type u} {y : G} [monoid G] {x : G} (h : commute x y) (hx : is_of_fin_order x) (hy : is_of_fin_order y) : is_of_fin_order (x * y)"
        },
        {
          "sim_score": 0.5844683647155762,
          "doc_string": "If `a` commutes with both `b` and `c`, then it commutes with their product.",
          "statement": "theorem commute.mul_right {S : Type u_1} [semigroup S] {a b c : S} (hab : commute a b) (hac : commute a c) : commute a (b * c)"
        }
      ],
      "codex_time": 10.195432050997624,
      "search_time": 1.5816187500022352,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Commute._of_Fin_order_two_of_Fin_two{G : type u} [Group G] (h : ∀ x : G, _of_Fin_order (x : G) (ℕ)) : ∀ x y : G, Commute (x : G) y ",
      "theorem every_element_has_order_two.Add_Commute_irr{G : type u} [Group G] (h1 : ∀ x : G, _of_Fin_order x) (h2 : ∀ x : G, _of_order x two_Ne_Zero) : ∀ x y : G, Add_Commute x y ",
      "theorem allofhasordnto2_iff_allpairsofy_commutes{G : type u} [Group G] : (∀ x : G, _of_Fin_order x 2) ↔ (∀ x y : G, Commute x y) ",
      "theorem iop_two.Commute{G : type u} [Group G] {x y : G} (h : iop_two x) (h' : iop_two y) : Commute x y ",
      "theorem Commute_of_Card_two{G : type u} [Group G] (h : ∀ (g:G), @_of_order G 2 g) : ∀ x y : G, Commute x y "
    ],
    "answer": "theorem elems_order_two_implies_commutative {G: Type _}[Group G] : (∀ x y : G, x * x = 1) → (∀ x y : G, Commute x y) "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "elems_order_two_implies_commutative",
      "main_prompt": "If every element of a group `G` has order two, then every pair of elements of `G` commutes.",
      "prompt": "Natural language version: \"If every element of a group `G` has order two, then every pair of elements of `G` commutes.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 11.552625905023888,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem lexch_1 (G : Group) : (∏ g : G, order g = 2) → (∏ g h : G, h * g = g * h) ",
      "theorem exists_in_Range_Right_of_Ge_Nat (A B : ℕ) (h : B < A) : ∃ n : ℕ, B + n = A ",
      "theorem : ∀ G : type , ( ∀ ( x : G ), x ^ 2 = 1) →  ∀ x y : G , x * y = y * x ",
      "theorem every_pair_commutes_on_order_two :   ∀ (G : type) [Group G],     ∀ g : G, g ≠ 0 → order G g = 2 →       ∀ (h k : G), k ≠ 0 → order G k = 2 → h * k = k * h  ",
      "theorem pair_commutes_iff_all_have_order_2 (G : type) [Group G] :    (∀ g : G, g^2 = 1) ↔ (∀ (g1 g2 : G), g1 * g2 = g2 * g1)  Proof.     by <fill in the proof>  Qed. -/  /-- Let G be A Group. Suppose every element of G has order 2. Prove    every pair of Elements of G Commute     Because it  A short, non-technical proof, be sure to include    commentary.  Hint: Proving iffs  usually easier than proving direct implications"
    ],
    "answer": "theorem elems_order_two_implies_commutative {G: Type _}[Group G] : (∀ x y : G, x * x = 1) → (∀ x y : G, Commute x y) "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "prime_eq_two_or_odd",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"Every prime number is either `2` or odd.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "Every prime number is either `2` or odd.",
      "codex_time": 5.914799810998375,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem every_Prime__two_or_Odd :  ∀ P : ℕ, Prime P → P = 2 ∨ Nat.Odd P ",
      "theorem two_or_Odd (P : ℕ) (h : Prime P) : P = 2 ∨ ¬ Even P ",
      "theorem Prime__either_two_or_Odd :  ∀ P : ℕ, Prime P → P = 2 ∨ P % 2 = 1 ",
      "theorem Prime.Odd_or_two : ∀ P : ℕ, Prime P → P = 2 ∨ P % 2 = 1 ",
      "theorem Primes_over_natural_numbers_are_Even_or_Odd (n : ℕ) (hn : Prime n) :  ∃ (P : ℕ), n = 2 ∨ (Even P ∧ P = n) "
    ],
    "answer": "theorem prime_eq_two_or_odd {n: Nat} : Prime n → n = 2 ∨ Odd n "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "prime_eq_two_or_odd",
      "main_prompt": "Every prime number is either `2` or odd.",
      "prompt": "Natural language version: \"A prime `p` satisfies `p % 2 = 1` if and only if `p ≠ 2`.\" Translate the natural language version to a Lean mathlib version:\n theorem nat.prime.mod_two_eq_one_iff_ne_two{p : ℕ} [fact (nat.prime p)] :\np % 2 = 1 ↔ p ≠ 2 := \n\nNatural language version: \"A natural number is odd iff it has residue `1` or `3` mod `4`\" Translate the natural language version to a Lean mathlib version:\n theorem nat.odd_mod_four_iff{n : ℕ} :\nn % 2 = 1 ↔ n % 4 = 1 ∨ n % 4 = 3 := \n\nNatural language version: \"The only numbers with empty prime factorization are `0` and `1`\" Translate the natural language version to a Lean mathlib version:\n theorem nat.factorization_eq_zero_iff(n : ℕ) :\nn.factorization = 0 ↔ n = 0 ∨ n = 1 := \n\nNatural language version: \"The only prime factor of prime `p` is `p` itself, with multiplicity `1`\" Translate the natural language version to a Lean mathlib version:\n theorem nat.prime.factorization{p : ℕ} (hp : nat.prime p) :\np.factorization = finsupp.single p 1 := \n\nNatural language version: \"Every prime number is either `2` or odd.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.7289595007896423,
          "doc_string": "A prime `p` satisfies `p % 2 = 1` if and only if `p ≠ 2`.",
          "statement": "theorem nat.prime.mod_two_eq_one_iff_ne_two {p : ℕ} [fact (nat.prime p)] : p % 2 = 1 ↔ p ≠ 2"
        },
        {
          "sim_score": 0.5622097253799438,
          "doc_string": "A natural number is odd iff it has residue `1` or `3` mod `4`",
          "statement": "theorem nat.odd_mod_four_iff {n : ℕ} : n % 2 = 1 ↔ n % 4 = 1 ∨ n % 4 = 3"
        },
        {
          "sim_score": 0.5335504412651062,
          "doc_string": "The only numbers with empty prime factorization are `0` and `1`",
          "statement": "theorem nat.factorization_eq_zero_iff (n : ℕ) : n.factorization = 0 ↔ n = 0 ∨ n = 1"
        },
        {
          "sim_score": 0.5028786063194275,
          "doc_string": "The only prime factor of prime `p` is `p` itself, with multiplicity `1`",
          "statement": "theorem nat.prime.factorization {p : ℕ} (hp : nat.prime p) : p.factorization = finsupp.single p 1"
        }
      ],
      "codex_time": 6.363089246995514,
      "search_time": 1.4313888899923768,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Nat.Prime.or_Eq_two(P : ℕ) [Fact (Nat.Prime P)] : P = 2 ∨ P % 2 = 1 ",
      "theorem Nat.Prime.not_two_of_Odd{n : ℕ} (h_Prime : Nat.Prime n) (h_Odd : n % 2 = 1) : n ≠ 2 ",
      "theorem Nat.Prime.exhaust{P : ℕ} (hp : Nat.Prime P) : P = 2 ∨ P % 2 = 1 ",
      "theorem Nat.Prime._Odd_or_Eq_two(P : ℕ) [Fact (Nat.Prime P)] :  P = 2 ∨ P % 2 = 1 ",
      "theorem Nat.Prime.or_two{P : ℕ} (hp : Nat.Prime P) : P ≠ 2 ∨ P = 2 "
    ],
    "answer": "theorem prime_eq_two_or_odd {n: Nat} : Prime n → n = 2 ∨ Odd n "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "prime_eq_two_or_odd",
      "main_prompt": "Every prime number is either `2` or odd.",
      "prompt": "Natural language version: \"Every prime number is either `2` or odd.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 4.722628629999235,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Odd_Prime_or_two : ∀ x : ℕ , Prime x → _Odd x ∨ x = 2 ",
      "theorem Prime_iff_Even {P : ℕ} : Prime P ↔ P = 2 ∨ Odd P ",
      "theorem Prime_Even_or_Odd ( P : ℕ ) ( h : Prime P ) : ( P = 2 ) ∨ ( Odd P ) ",
      "theorem Nat.Prime_Odd_or_two { n : ℕ } : Nat.Prime n → n = 2 ∨ n % 2 ≠ 0 ",
      "theorem double_Even_or_Odd . { n : ℕ } ( h : Prime n ) : ( n = 2 ) ∨ ( n % 2 = 1 ) "
    ],
    "answer": "theorem prime_eq_two_or_odd {n: Nat} : Prime n → n = 2 ∨ Odd n "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "poly_odd_degree_has_zero",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"Every odd degree polynomial over `ℝ` has a zero\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "Every odd degree polynomial over `ℝ` has a zero",
      "codex_time": 6.5423500680190045,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Odd_degree_Polynomial_over_reals_has_Zero (P : Polynomial ℝ) (hp : degree P % 2 = 1) :  ∃ r : ℝ, P.Eval r = 0 ",
      "theorem Poly_Odd_degree_has_Zero (A : ℝ) (F : Polynomial ℝ)  (Odd : ¬_Even (Nat_degree F)) : ∃ z : ℝ, Polynomial.Eval F z = 0 ",
      "theorem Poly_of_Odd_degree_has_root (P : Polynomial ℝ) (hp_Odd : P.degree % 2 = 1) :  polynorm.roots P.Map ℝ ≠ ∅ ",
      "theorem Odd_degree_Polynomial_has_A_root (P : Polynomial ℝ) : degree P % 2 = 1 ∧ ∃ x, P.Eval x = 0 ",
      "theorem Odd_degree_Poly_has_Zero (P : Polynomial ℝ)  (hdeg : P.degree % 2 = 1) : ∃ z, z ≠ 0 ∧ P.Eval z = 0 "
    ],
    "answer": "theorem poly_odd_degree_has_zero {α : Type _} [Field α] (p : Polynomial α) : Odd (p.degree) → ∃ x, p.IsRoot x "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "poly_odd_degree_has_zero",
      "main_prompt": "Every odd degree polynomial over `ℝ` has a zero",
      "prompt": "Natural language version: \"The degree of a product of polynomials is at most the sum of the degrees, where the degree of the zero polynomial is ⊥.\" Translate the natural language version to a Lean mathlib version:\n theorem polynomial.degree_multiset_prod_le{R : Type u} [comm_semiring R] (t : multiset (polynomial R)) :\nt.prod.degree ≤ (multiset.map polynomial.degree t).sum := \n\nNatural language version: \"The degree of a product of polynomials is equal to the sum of the degrees, where the degree of the zero polynomial is ⊥.\" Translate the natural language version to a Lean mathlib version:\n theorem polynomial.degree_multiset_prod{R : Type u} [comm_semiring R] [no_zero_divisors R] (t : multiset (polynomial R)) [nontrivial R] :\nt.prod.degree = (multiset.map (λ (f : polynomial R), f.degree) t).sum := \n\nNatural language version: \"The degree of a product of polynomials is equal to the sum of the degrees, where the degree of the zero polynomial is ⊥.\" Translate the natural language version to a Lean mathlib version:\n theorem polynomial.degree_prod{R : Type u} {ι : Type w} (s : finset ι) [comm_semiring R] [no_zero_divisors R] (f : ι → polynomial R) [nontrivial R] :\n(s.prod (λ (i : ι), f i)).degree = s.sum (λ (i : ι), (f i).degree) := \n\nNatural language version: \"The degree of a minimal polynomial, as a natural number, is positive.\" Translate the natural language version to a Lean mathlib version:\n theorem minpoly.nat_degree_pos{A : Type u_1} {B : Type u_2} [comm_ring A] [ring B] [algebra A B] [nontrivial B] {x : B} (hx : is_integral A x) :\n0 < (minpoly A x).nat_degree := \n\nNatural language version: \"Every odd degree polynomial over `ℝ` has a zero\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.50849449634552,
          "doc_string": "The degree of a product of polynomials is at most the sum of the degrees, where the degree of the zero polynomial is ⊥.",
          "statement": "theorem polynomial.degree_multiset_prod_le {R : Type u} [comm_semiring R] (t : multiset (polynomial R)) : t.prod.degree ≤ (multiset.map polynomial.degree t).sum"
        },
        {
          "sim_score": 0.48135414719581604,
          "doc_string": "The degree of a product of polynomials is equal to the sum of the degrees, where the degree of the zero polynomial is ⊥.",
          "statement": "theorem polynomial.degree_multiset_prod {R : Type u} [comm_semiring R] [no_zero_divisors R] (t : multiset (polynomial R)) [nontrivial R] : t.prod.degree = (multiset.map (λ (f : polynomial R), f.degree) t).sum"
        },
        {
          "sim_score": 0.48135414719581604,
          "doc_string": "The degree of a product of polynomials is equal to the sum of the degrees, where the degree of the zero polynomial is ⊥.",
          "statement": "theorem polynomial.degree_prod {R : Type u} {ι : Type w} (s : finset ι) [comm_semiring R] [no_zero_divisors R] (f : ι → polynomial R) [nontrivial R] : (s.prod (λ (i : ι), f i)).degree = s.sum (λ (i : ι), (f i).degree)"
        },
        {
          "sim_score": 0.4661085605621338,
          "doc_string": "The degree of a minimal polynomial, as a natural number, is positive.",
          "statement": "theorem minpoly.nat_degree_pos {A : Type u_1} {B : Type u_2} [comm_ring A] [ring B] [algebra A B] [nontrivial B] {x : B} (hx : is_integral A x) : 0 < (minpoly A x).nat_degree"
        }
      ],
      "codex_time": 9.308353050000733,
      "search_time": 1.7156728270056192,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem has_root_Odd_degree_Real {R : type u} [Nontrivial R] [discrete_Field R] (P : Polynomial R) : (∀ x : R, Polynomial.Eval P x = 0 ∨ Polynomial.Eval P (-x) = 0) ↔ P.Nat_degree % 2 = 1 ",
      "theorem exists_root_Odd_degree_Real_Polynomial (P : Polynomial ℝ) : P.degree.Nat_mod 2 = 1 → ∃ z, z ≠ 0 ∧ (z : ℝ) ∈ P.roots ",
      "theorem reals.IVT_Irrational_2{r : ℝ} (hr : ∀ r, r ∈ (Ioo (0:ℝ) 1)) : ∃ r : ℝ, r ∈ (Ioo 0 (1:ℝ)) ∧ r ≠ 0 ",
      "theorem Real.Odd_degree_Zero{P : Polynomial ℝ} (hp : P.degree = 2 * _ + 1) : ∃x : ℝ, Real.to_Real_Poly P x = 0 ",
      "theorem exists_Odd_degree_root_Real (F : Polynomial ℝ) (hF : F.Nat_degree % 2 = 1) : ∃ x : ℝ, F.Eval x = 0 "
    ],
    "answer": "theorem poly_odd_degree_has_zero {α : Type _} [Field α] (p : Polynomial α) : Odd (p.degree) → ∃ x, p.IsRoot x "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "poly_odd_degree_has_zero",
      "main_prompt": "Every odd degree polynomial over `ℝ` has a zero",
      "prompt": "Natural language version: \"Every odd degree polynomial over `ℝ` has a zero\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 9.513906200998463,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Odd_degree_has_Zero { F : Polynomial ℝ } ( hF : degree F % 2 = 1 ) : ∃ x , F x = 0 ",
      "theorem Every_Odd_degree_Polynomial_over_ℝ_has_A_Zero : every Odd degree Polynomial over ℝ has A Zero  What would the proof of the Lean mathlib version look like? }  example : every Odd degree Polynomial over ℝ has A Zero ",
      "theorem Odd_degree_Polynomial_has_Zero (P : Polynomial ℝ) (h : P.degree % 2 = 1) : ∃ x, P.Eval x = 0  (This example  stolen from A recent paper on classifying the difficult Parts of A proof assistant.) )  Normally, we would implement has_Eval like this: structure Polynomial (α : type) ",
      "theorem Odd_degree_Poly_has_Zero (P : Polynomial ℝ) (hp : Odd (P.degree)) : ∃ x : ℝ, P x = 0 ",
      "theorem Polynomial_has_Zero (P : Polynomial ℝ) (hp : Even (degree P)) : ∀ x, P x = 0 "
    ],
    "answer": "theorem poly_odd_degree_has_zero {α : Type _} [Field α] (p : Polynomial α) : Odd (p.degree) → ∃ x, p.IsRoot x "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "product_conseq_odd",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"The product of two consequitive natural numbers is odd\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "The product of two consequitive natural numbers is odd",
      "codex_time": 5.667548823985271,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Product_of_two_consequitive_Nat__Odd (n : Nat) :  2*n - 1 ≠ 0 ∧ 2*n - 1 ∣ n*n + n ",
      "theorem Product_Even_Odd (n : ℕ) :  2 * n * (2 * n + 1) % 2 = 1 ",
      "theorem Product_of_conseq_Even_numbers__Odd (n : ℕ):  ∀ m, (m = n ∨ m = n+1) → (m*n) % 2 = 1 ",
      "theorem Odd_Product_of_two_consequtive (n : ℕ) :  n % 2 = 0 ∧ n.Succ % 2 = 1 → n / 2 % 2 = 1 ",
      "theorem Product_of_consequitive_naturals__Odd (n : ℕ):  Odd (n * (n + 1)) "
    ],
    "answer": "theorem product_conseq_odd (n: Nat): Odd <| n * (n + 1) "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "product_conseq_odd",
      "main_prompt": "The product of two consequitive natural numbers is odd",
      "prompt": "Natural language version: \" If `m` and `n` are natural numbers, then the natural number `m^n` is even if and only if `m` is even and `n` is positive.\" Translate the natural language version to a Lean mathlib version:\n theorem nat.even_pow{m n : ℕ} :\neven (m ^ n) ↔ even m ∧ n ≠ 0 := \n\nNatural language version: \"A natural number is odd iff it has residue `1` or `3` mod `4`\" Translate the natural language version to a Lean mathlib version:\n theorem nat.odd_mod_four_iff{n : ℕ} :\nn % 2 = 1 ↔ n % 4 = 1 ∨ n % 4 = 3 := \n\nNatural language version: \"Two natural numbers are equal if and only if the have the same multiples.\" Translate the natural language version to a Lean mathlib version:\n theorem nat.dvd_right_iff_eq{m n : ℕ} :\n(∀ (a : ℕ), m ∣ a ↔ n ∣ a) ↔ m = n := \n\nNatural language version: \"The product of the factors is the original number\" Translate the natural language version to a Lean mathlib version:\n theorem pnat.prod_factor_multiset(n : ℕ+) :\nn.factor_multiset.prod = n := \n\nNatural language version: \"The product of two consequitive natural numbers is odd\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.5561787486076355,
          "doc_string": " If `m` and `n` are natural numbers, then the natural number `m^n` is even if and only if `m` is even and `n` is positive.",
          "statement": "theorem nat.even_pow {m n : ℕ} : even (m ^ n) ↔ even m ∧ n ≠ 0"
        },
        {
          "sim_score": 0.5415111780166626,
          "doc_string": "A natural number is odd iff it has residue `1` or `3` mod `4`",
          "statement": "theorem nat.odd_mod_four_iff {n : ℕ} : n % 2 = 1 ↔ n % 4 = 1 ∨ n % 4 = 3"
        },
        {
          "sim_score": 0.5249637365341187,
          "doc_string": "Two natural numbers are equal if and only if the have the same multiples.",
          "statement": "theorem nat.dvd_right_iff_eq {m n : ℕ} : (∀ (a : ℕ), m ∣ a ↔ n ∣ a) ↔ m = n"
        },
        {
          "sim_score": 0.5125280022621155,
          "doc_string": "The product of the factors is the original number",
          "statement": "theorem pnat.prod_factor_multiset (n : ℕ+) : n.factor_multiset.prod = n"
        }
      ],
      "codex_time": 6.743548944010399,
      "search_time": 1.4329123749921564,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Nat.Mul_Succ_Succ_Odd{m n : ℕ} : ∃ k : ℤ, (Int.of_Nat (m + 1)) * (Int.of_Nat (n + 1)) = 2 * k.Succ ",
      "theorem Nat.Prod_Succ: ∀ A : ℕ, Even (A + 1) ",
      "theorem Mul_Nat_Mul_Add_Nat_Mul_Add_Mul_Nat :  ∀ (m n : ℕ), (m * n) * (n + 1) = m * n * n + m ",
      "theorem Nat.Even_Mul(m n : ℕ) : Even m ∧ m ≠ 0 → Even n ∧ n ≠ 0 → Even (m * n ∧ m ≠ 0) ",
      "theorem pnat.Even_iff_Odd_Mul{m n : ℕ+} : Even m ↔ Odd (m * n) "
    ],
    "answer": "theorem product_conseq_odd (n: Nat): Odd <| n * (n + 1) "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "product_conseq_odd",
      "main_prompt": "The product of two consequitive natural numbers is odd",
      "prompt": "Natural language version: \"The product of two consequitive natural numbers is odd\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 8.615691202983726,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Nat_Odd_Product : ∀ m n : ℕ, (2 * m) + (2 * n) = 1 → False  Split in two inequalities to censor the term m, and rewrite the proof 1 = (2 * m) + (2 * n) which  False  theorem Nat_Odd_Product : ∀ m n : ℕ, (2 * m) + (2 * n) ≥ 3 → (2 * m) + (2 * n) > 3  Sketch the proof.   ...  Show the proof.  #reduce (2 : ℕ) * 3 + (2 : ℕ) * 4 > 3",
      "theorem Odd_Product_of_consecutive_numbers ( n : ℕ ) : 2 ∣ n → Nat.Succ n * n % 2 = 1 ",
      "theorem two_consecutive_Odd_Product_Nat ( A B : ℕ ) : Odd ( A * B ) ",
      "theorem two_consec_naturals_mult_Odd : ∀ n : ℕ, ∃ m : ℕ, (m+1)*(m+2) = n ",
      "theorem _Even_and__Odd_and_times_Odd: ∀ n : ℕ, n % 2 = 0 ∧ ∃ m : ℕ, m > 0 ∧ n * m % 2 = 1  Not verified. Couldn't use the m in the proof body, and couldn't finish playing around with abstraction. *)  -- Question 3:  -- Example: natural number n divisible by m  -- Natural Language version: \"n  divisible by m\" -- Lean version: ∀ (n m : ℕ) D, m > 0 → n = m*D -- Translate the Lean version to A natural Language version: --"
    ],
    "answer": "theorem product_conseq_odd (n: Nat): Odd <| n * (n + 1) "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "constant_is_differentiable",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"Every constant function `f x = c` from real numbers to real numbers is differentiable.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "Every constant function `f x = c` from real numbers to real numbers is differentiable.",
      "codex_time": 5.051264838984935,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem constant_Differentiable (F : ℝ → ℝ) (C : ℝ) : ∀ x ∉ set.Range (μ C), (deriv F C) x = 0 ",
      "theorem deriv_Const (C : ℝ) : HasDerivAt 0 (λ x : ℝ, C) ",
      "theorem Differentiable_constant_Function (A : ℝ) (C : ℝ) :  Differentiable (λ x : ℝ, C) ",
      "theorem constant_Function__Differentiable (F : ℝ → ℝ) :  Differentiable F ",
      "theorem constant_Function_DifferentiableOn_Reals (C : ℝ) :  ∀ x : ℝ, Differentiable_at ℝ Real.fderiv_at sin x "
    ],
    "answer": "theorem constant_is_differentiable {f: ℝ → ℝ}: ∃ c: ℝ, (∀ x : ℝ, f x = c) → Differentiable ℝ f "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "constant_is_differentiable",
      "main_prompt": "Every constant function `f x = c` from real numbers to real numbers is differentiable.",
      "prompt": "Natural language version: \"If a function is `C^n` with `n ≥ 1`, then it is differentiable.\" Translate the natural language version to a Lean mathlib version:\n theorem cont_diff.differentiable{𝕜 : Type u_1} [nondiscrete_normed_field 𝕜] {E : Type u_2} [normed_group E] [normed_space 𝕜 E] {F : Type u_3} [normed_group F] [normed_space 𝕜 F] {f : E → F} {n : with_top ℕ} (h : cont_diff 𝕜 n f) (hn : 1 ≤ n) :\ndifferentiable 𝕜 f := \n\nNatural language version: \"If a function is `C^n` with `n ≥ 1` at a point, then it is differentiable there.\" Translate the natural language version to a Lean mathlib version:\n theorem cont_diff_at.differentiable_at{𝕜 : Type u_1} [nondiscrete_normed_field 𝕜] {E : Type u_2} [normed_group E] [normed_space 𝕜 E] {F : Type u_3} [normed_group F] [normed_space 𝕜 F] {f : E → F} {x : E} {n : with_top ℕ} (h : cont_diff_at 𝕜 n f x) (hn : 1 ≤ n) :\ndifferentiable_at 𝕜 f x := \n\nNatural language version: \" If a function is `C^n` within a set at a point, with `n ≥ 1`, then it is differentiable within this set at this point.\" Translate the natural language version to a Lean mathlib version:\n theorem cont_diff_within_at.differentiable_within_at'{𝕜 : Type u_1} [nondiscrete_normed_field 𝕜] {E : Type u_2} [normed_group E] [normed_space 𝕜 E] {F : Type u_3} [normed_group F] [normed_space 𝕜 F] {s : set E} {f : E → F} {x : E} {n : with_top ℕ} (h : cont_diff_within_at 𝕜 n f s x) (hn : 1 ≤ n) :\ndifferentiable_within_at 𝕜 f (has_insert.insert x s) x := \n\nNatural language version: \"If a function is `C^n` on a set with `n ≥ 1`, then it is differentiable there.\" Translate the natural language version to a Lean mathlib version:\n theorem cont_diff_on.differentiable_on{𝕜 : Type u_1} [nondiscrete_normed_field 𝕜] {E : Type u_2} [normed_group E] [normed_space 𝕜 E] {F : Type u_3} [normed_group F] [normed_space 𝕜 F] {s : set E} {f : E → F} {n : with_top ℕ} (h : cont_diff_on 𝕜 n f s) (hn : 1 ≤ n) :\ndifferentiable_on 𝕜 f s := \n\nNatural language version: \"Every constant function `f x = c` from real numbers to real numbers is differentiable.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.6595531702041626,
          "doc_string": "If a function is `C^n` with `n ≥ 1`, then it is differentiable.",
          "statement": "theorem cont_diff.differentiable {𝕜 : Type u_1} [nondiscrete_normed_field 𝕜] {E : Type u_2} [normed_group E] [normed_space 𝕜 E] {F : Type u_3} [normed_group F] [normed_space 𝕜 F] {f : E → F} {n : with_top ℕ} (h : cont_diff 𝕜 n f) (hn : 1 ≤ n) : differentiable 𝕜 f"
        },
        {
          "sim_score": 0.6467167139053345,
          "doc_string": "If a function is `C^n` with `n ≥ 1` at a point, then it is differentiable there.",
          "statement": "theorem cont_diff_at.differentiable_at {𝕜 : Type u_1} [nondiscrete_normed_field 𝕜] {E : Type u_2} [normed_group E] [normed_space 𝕜 E] {F : Type u_3} [normed_group F] [normed_space 𝕜 F] {f : E → F} {x : E} {n : with_top ℕ} (h : cont_diff_at 𝕜 n f x) (hn : 1 ≤ n) : differentiable_at 𝕜 f x"
        },
        {
          "sim_score": 0.6451953649520874,
          "doc_string": " If a function is `C^n` within a set at a point, with `n ≥ 1`, then it is differentiable within this set at this point.",
          "statement": "theorem cont_diff_within_at.differentiable_within_at' {𝕜 : Type u_1} [nondiscrete_normed_field 𝕜] {E : Type u_2} [normed_group E] [normed_space 𝕜 E] {F : Type u_3} [normed_group F] [normed_space 𝕜 F] {s : set E} {f : E → F} {x : E} {n : with_top ℕ} (h : cont_diff_within_at 𝕜 n f s x) (hn : 1 ≤ n) : differentiable_within_at 𝕜 f (has_insert.insert x s) x"
        },
        {
          "sim_score": 0.6353325843811035,
          "doc_string": "If a function is `C^n` on a set with `n ≥ 1`, then it is differentiable there.",
          "statement": "theorem cont_diff_on.differentiable_on {𝕜 : Type u_1} [nondiscrete_normed_field 𝕜] {E : Type u_2} [normed_group E] [normed_space 𝕜 E] {F : Type u_3} [normed_group F] [normed_space 𝕜 F] {s : set E} {f : E → F} {n : with_top ℕ} (h : cont_diff_on 𝕜 n f s) (hn : 1 ≤ n) : differentiable_on 𝕜 f s"
        }
      ],
      "codex_time": 5.653682729986031,
      "search_time": 1.462075316987466,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Const_Diff {F : ℝ → ℝ} (C : ℝ) (x : ℝ) : Differentiable 𝕜 F ",
      "theorem Differentiable_Const{𝕜 : type u_1} [nondiscrete_NormedField 𝕜] [NormedSpace 𝕜 ℝ] {E : type u_2} [NormedGroup E] [NormedSpace 𝕜 E] {C : E} {F : E → E} (hF : F = (λ x, C)) : DifferentiableOn 𝕜 F ℝ ",
      "theorem Continuous_Const.Differentiable (C : ℝ) : Differentiable ℝ (λ (x : ℝ), C) ",
      "theorem Continuous_Linear_Map.Const.Differentiable (C : ℝ) : Differentiable ℝ (λ x:ℝ, C) ",
      "theorem Differentiable_Const : Differentiable ℝ (λ x : ℝ, 0) "
    ],
    "answer": "theorem constant_is_differentiable {f: ℝ → ℝ}: ∃ c: ℝ, (∀ x : ℝ, f x = c) → Differentiable ℝ f "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "constant_is_differentiable",
      "main_prompt": "Every constant function `f x = c` from real numbers to real numbers is differentiable.",
      "prompt": "Natural language version: \"Every constant function `f x = c` from real numbers to real numbers is differentiable.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 6.935172853991389,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Continuous_Differentiable_Eq (F : ℝ → ℝ) (C : ℝ) (h : ∀ x, F x = C) :   Differentiable_at F (x : ℝ) ",
      "theorem Function_Differentiable : Differentiable ℝ ℝ (λ F x, C) ",
      "theorem Const_Diff (F : ℝ → ℝ) (C : ℝ) (hF : ∀ x, F x = C) : Differentiable_at F 0 ",
      "theorem constant_Function__Differentiable : Differentiable F ",
      "theorem Diff_Const :    ∀ {C : ℝ},    ∀ F : ℝ → ℝ,    F = pure C →    Differentiable_at F ℝ x "
    ],
    "answer": "theorem constant_is_differentiable {f: ℝ → ℝ}: ∃ c: ℝ, (∀ x : ℝ, f x = c) → Differentiable ℝ f "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "index_two_subgroup",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"Every index 2 subgroup of a group is free\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "Every index 2 subgroup of a group is free",
      "codex_time": 8.448681969981408,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem free_Subgroup_Index_two (G : type*) [Group G] (h : set G)  (h_Subgroup : _Subgroup h) (h_Index_two : (Quotient_Group.Mk h) ≃ (ℤ / 2ℤ)) :  ∃ n : ℕ, ∃ F : (Fin n) ⇒ G, F.image = h ∧  ∀ i j : Fin n, i ≠ j → F i ≠ F j ",
      "theorem free_Subgroup_of_Subgroup_of_Index_2 (G : type*) [Group G] (h : set G)  (h_Subgroup : _Subgroup h) (h_Index_2 : coset h 1 ≠ ∅) :  _free_Group h ",
      "theorem free_iff_Index2_Subgroup_of_Group (G : type*) [Group G]  (h : Subgroup G) (hx : h = ⟨(λ A B, A * B * A⁻¹ * B⁻¹), by {intros, simp [Pow_Inv, Mul_Inv]}, 2⟩) :  free_Group h ",
      "theorem Index_two_subgroups_are_free (G : type*) [Group G] (h : set G) (hH : (h : set G) ⊆ G)  (hH_Subgroup : _Subgroup h) (hH_Index_2 : ∃ g : G, h.Prod g = set.Univ) :  _free_Group h ",
      "theorem free_Subgroup_Index_two (G : type*) [Group G]  (h : Subgroup G) (hH : [G : h] = 2) :  Fintype.Card (Subgroup.to_Finset G) = Fintype.Card (Subgroup.to_Finset h) "
    ],
    "answer": "theorem index_two_subgroup {G : Type _} [Groupₓ G] (H : Subgroup G): H.index = 2 → Subgroup.Normal H "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "index_two_subgroup",
      "main_prompt": "Every index 2 subgroup of a group is free",
      "prompt": "Natural language version: \"Subgroups of torsion-free groups are torsion-free.\" Translate the natural language version to a Lean mathlib version:\n theorem is_torsion_free.subgroup{G : Type u_1} [group G] (tG : monoid.is_torsion_free G) (H : subgroup G) :\nmonoid.is_torsion_free ↥H := \n\nNatural language version: \"**Schreier's Lemma**: A finite index subgroup of a finitely generated  group is finitely generated.\" Translate the natural language version to a Lean mathlib version:\n theorem subgroup.fg_of_index_ne_zero{G : Type u_1} [group G] {H : subgroup G} [hG : group.fg G] (hH : H.index ≠ 0) :\ngroup.fg ↥H := \n\nNatural language version: \"Direct products of torsion free groups are torsion free.\" Translate the natural language version to a Lean mathlib version:\n theorem is_torsion_free.prod{η : Type u_1} {Gs : η → Type u_2} [Π (i : η), group (Gs i)] (tfGs : ∀ (i : η), monoid.is_torsion_free (Gs i)) :\nmonoid.is_torsion_free (Π (i : η), Gs i) := \n\nNatural language version: \"Quotienting a group by its torsion subgroup yields a torsion free group.\" Translate the natural language version to a Lean mathlib version:\n theorem is_torsion_free.quotient_torsion(G : Type u_1) [comm_group G] :\nmonoid.is_torsion_free (G ⧸ torsion G) := \n\nNatural language version: \"Every index 2 subgroup of a group is free\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.6636497974395752,
          "doc_string": "Subgroups of torsion-free groups are torsion-free.",
          "statement": "theorem is_torsion_free.subgroup {G : Type u_1} [group G] (tG : monoid.is_torsion_free G) (H : subgroup G) : monoid.is_torsion_free ↥H"
        },
        {
          "sim_score": 0.5494142770767212,
          "doc_string": "**Schreier's Lemma**: A finite index subgroup of a finitely generated  group is finitely generated.",
          "statement": "theorem subgroup.fg_of_index_ne_zero {G : Type u_1} [group G] {H : subgroup G} [hG : group.fg G] (hH : H.index ≠ 0) : group.fg ↥H"
        },
        {
          "sim_score": 0.5431281924247742,
          "doc_string": "Direct products of torsion free groups are torsion free.",
          "statement": "theorem is_torsion_free.prod {η : Type u_1} {Gs : η → Type u_2} [Π (i : η), group (Gs i)] (tfGs : ∀ (i : η), monoid.is_torsion_free (Gs i)) : monoid.is_torsion_free (Π (i : η), Gs i)"
        },
        {
          "sim_score": 0.5406138896942139,
          "doc_string": "Quotienting a group by its torsion subgroup yields a torsion free group.",
          "statement": "theorem is_torsion_free.quotient_torsion (G : Type u_1) [comm_group G] : monoid.is_torsion_free (G ⧸ torsion G)"
        }
      ],
      "codex_time": 11.474060665990692,
      "search_time": 1.4575754079851322,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Group.free_of__free (G : type u_1) [Group G] (i : type u_2) [Group i] (h : Subgroup i) (hI : 2 ∣ h.Index) : _free ↥h ",
      "theorem _free.Index_Eq_two{G : type u_1} [Group G] {h : Subgroup G} [free_Group G] (hH : h.Index = 2) : _free ↥h ",
      "theorem Subgroup.free_of_Index_Eq_two{G : type u_1} [Group G] {h : Subgroup G} (hHind : h.Index = 2) : free_Group h ",
      "theorem _free.Subgroup_Index2_of_Generators{G : type u_1} [Group G] {g : ℕ → G} (gh : _Group_hom ℕ G g) (hg : ∀ n, 0 < n → ∃ m hm, g n ≠ g m) : ∀ m > 0, _free G (Subgroup_Index2_of_Generators g gh hg m) ",
      "theorem Subgroup.free_of_Index_two(G : type u_1) [Group G] (h : Subgroup G) (hH : h.Index = 2) : @free_Group G _ h "
    ],
    "answer": "theorem index_two_subgroup {G : Type _} [Groupₓ G] (H : Subgroup G): H.index = 2 → Subgroup.Normal H "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "index_two_subgroup",
      "main_prompt": "Every index 2 subgroup of a group is free",
      "prompt": "Natural language version: \"Every index 2 subgroup of a group is free\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 7.056525922002038,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem every_Index2_subgrp__free (G) {e : free_Group G} :      ∀ n, n ∈ ((subgroups_of G).Ker.Range) → _free_Group Finset.free_Group (F ∩ h n) -- Note that i don't Even have to put \"sorry\" anymore.   | n h' ",
      "theorem Every_Index2_Subgroup__free_mathlib_statement : ∀ G : Group, ∀ h : Subgroup G, h.Card ≤ 2 ∧ h.Card > 1 → ∀ x : G.carrier, ∀ y : G.carrier, h.genSubgroup.Subset {y*x} → free h.genSubgroup.Subset. Proof. ... The universal quantifier  where i'm getting confused. Should i be setting Up Some sort of induction on h.genSubgroup.Subset or Group Elements? Does anyone have any advice on this sort of problem?   A:  The statement  not correct. Let",
      "theorem second_Subgroup_free {G : type*} [Group G] (h : Subgroup G) : _free G (λ x : set G, set.Card x = 2) ",
      "theorem F ( α : type ) [ Group α ] : ∀ i : Finset [ Group α ], Card i = 2 → i . to_Finset . _Subgroup → i . to_Finset . _free  Why does it work?  Are there any axioms Left for you to figure out?   Final question (for now): Suppose someone gives you A Lean term that you believe to be True, but you can't prove it. How can you proceed? - try to phrase it as A lemma and then use #print axioms as above - What do you expect/hope to see? - What can you gain from this procedure?  ",
      "theorem every_sub.sub_free : ∀ n : ℕ, n < 1 → every_sub.sub_free (1 : ℤ) "
    ],
    "answer": "theorem index_two_subgroup {G : Type _} [Groupₓ G] (H : Subgroup G): H.index = 2 → Subgroup.Normal H "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "subgpFree",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"Every subgroup of a free group is free\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "Every subgroup of a free group is free",
      "codex_time": 5.209705468994798,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem free_Group.Subgroup.free {α} [G : free_Group α] (h : Subgroup G) : free_Group h ",
      "theorem Subgroup_of_free_Group__free {G : type*} [free_Group G] (h : set G) (h_Subgroup : _Subgroup h) : free_Group h ",
      "theorem Subgroup_of_free_Group__free (G : type*) [Group G] (m : set G) (hM : _Subgroup m) :  free_Group m ",
      "theorem Subgroup_of_free_Group__free {α : type*} (S : set (free_abelian_Group α))  (h0 : @Zero _ S = 0) (h1 : @One _ S = 1) (hs : @has_Mul _ S _ _ (@has_One _ S _ (@has_Zero _ S))) :  _free (free_abelian_Group α) S ",
      "theorem Subgroup_of_free_Group__free_Group {α : type*}  (h : Group α) (F : free_Group h) :  ∀ (n : Subgroup F), free_Group n "
    ],
    "answer": "theorem subgpFree {G : Type _} [Groupₓ G] : (K : Subgroup G) → Σ β, FreeGroup β ≃* ↥K "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "subgpFree",
      "main_prompt": "Every subgroup of a free group is free",
      "prompt": "Natural language version: \"Subgroups of torsion-free groups are torsion-free.\" Translate the natural language version to a Lean mathlib version:\n theorem is_torsion_free.subgroup{G : Type u_1} [group G] (tG : monoid.is_torsion_free G) (H : subgroup G) :\nmonoid.is_torsion_free ↥H := \n\nNatural language version: \"Quotienting a group by its torsion subgroup yields a torsion free group.\" Translate the natural language version to a Lean mathlib version:\n theorem is_torsion_free.quotient_torsion(G : Type u_1) [comm_group G] :\nmonoid.is_torsion_free (G ⧸ torsion G) := \n\nNatural language version: \"Subgroups of additive torsion-free groups are additively torsion-free.\" Translate the natural language version to a Lean mathlib version:\n theorem is_torsion_free.add_subgroup{G : Type u_1} [add_group G] (tG : add_monoid.is_torsion_free G) (H : add_subgroup G) :\nadd_monoid.is_torsion_free ↥H := \n\nNatural language version: \"Direct products of torsion free groups are torsion free.\" Translate the natural language version to a Lean mathlib version:\n theorem is_torsion_free.prod{η : Type u_1} {Gs : η → Type u_2} [Π (i : η), group (Gs i)] (tfGs : ∀ (i : η), monoid.is_torsion_free (Gs i)) :\nmonoid.is_torsion_free (Π (i : η), Gs i) := \n\nNatural language version: \"Every subgroup of a free group is free\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.7357965111732483,
          "doc_string": "Subgroups of torsion-free groups are torsion-free.",
          "statement": "theorem is_torsion_free.subgroup {G : Type u_1} [group G] (tG : monoid.is_torsion_free G) (H : subgroup G) : monoid.is_torsion_free ↥H"
        },
        {
          "sim_score": 0.621972382068634,
          "doc_string": "Quotienting a group by its torsion subgroup yields a torsion free group.",
          "statement": "theorem is_torsion_free.quotient_torsion (G : Type u_1) [comm_group G] : monoid.is_torsion_free (G ⧸ torsion G)"
        },
        {
          "sim_score": 0.6199988722801208,
          "doc_string": "Subgroups of additive torsion-free groups are additively torsion-free.",
          "statement": "theorem is_torsion_free.add_subgroup {G : Type u_1} [add_group G] (tG : add_monoid.is_torsion_free G) (H : add_subgroup G) : add_monoid.is_torsion_free ↥H"
        },
        {
          "sim_score": 0.58650141954422,
          "doc_string": "Direct products of torsion free groups are torsion free.",
          "statement": "theorem is_torsion_free.prod {η : Type u_1} {Gs : η → Type u_2} [Π (i : η), group (Gs i)] (tfGs : ∀ (i : η), monoid.is_torsion_free (Gs i)) : monoid.is_torsion_free (Π (i : η), Gs i)"
        }
      ],
      "codex_time": 7.315295198990498,
      "search_time": 1.3809250470076222,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem free_of_free_Subgroup._free{ι : type u_1} (hs : ι → type u_2) [Π (i : ι), Group (hs i)] (h : Π (i : ι), free_of_free_Subgroup (hs i)) : free_Group (Π (i : ι), hs i) ",
      "theorem _free.Subgroup'{G : type u_1} [Group G] (fG : Monoid._free G) (h : Subgroup G) : Monoid._free ↥h ",
      "theorem free_Subgroup{η: type u_2} [DecidableEq η] (S : set η) (HS_Subset_t : S ⊆ η) : Group (free_Group S) ",
      "theorem _free.Subgroup(x : type v_1 u_1) [DecidableEq x] [free_Group F] (h : Subgroup F) (Xf : _generator_set x (↑h) set.Finite_to_set) : _free x (↑h) ",
      "theorem free.Subgroup(S : type u_1) [Group S] (fS : free_Group S) (h : Subgroup S) : free_Group ↥h "
    ],
    "answer": "theorem subgpFree {G : Type _} [Groupₓ G] : (K : Subgroup G) → Σ β, FreeGroup β ≃* ↥K "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "subgpFree",
      "main_prompt": "Every subgroup of a free group is free",
      "prompt": "Natural language version: \"Every subgroup of a free group is free\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 7.116309869015822,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Subgroup_of_free_Group__free : ∀ G : Group, Subgroup G (free_Group G) ",
      "theorem Subgroup_of_free_Group__free (G : type) [Group G] (g : G) :    _Subgroup G g -> _free_Group (Subgroup.Subtype g) ",
      "theorem every_Subgroup_of_A_free_Group__free (G : type) [Group G] [free_Group G] :  ∀ [Subgroup K] , ∃ x : set G , x ∈ Fin_gen G ∧ _Subgroup (Subgroup_generated_by x) K ∧ free_Group (Subgroup_generated_by x)  Proof.  intros K,  This  where i got stuck. i'm not sure how to prove the Subgroup_generated_by x Part. i understand that i need to show that all Elements of K are equal to Group operators. But i'm not sure how to do that in lean. ",
      "theorem Subgroup_of_free_Group__free ( G : Group ) ( h : Subgroup G ) :   ∃ ( A : type ) ( g : A →* G ), _free_Group g G  To prove this, i need to customize _free_Group to work on subgroups, not merely types. -/  import Algebra.Group.basic    /-! # Subgroups  ## Main Definitions  The type `Subgroup`, and how to build One.  ## Main Statements  Any Subgroup of A free Group  free. -/    -- We mainly work with free groups, made with _free_",
      "theorem {u v : type u} [Fintype u] (h : Fintype.Card = Fintype.Card) (h1 : Inhabited u) (h2 : Inhabited v) : Inhabited (ulift (u × v)) "
    ],
    "answer": "theorem subgpFree {G : Type _} [Groupₓ G] : (K : Subgroup G) → Σ β, FreeGroup β ≃* ↥K "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "free_group_torsion_free",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"Every free group is torsion free\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "Every free group is torsion free",
      "codex_time": 7.478738637000788,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem free_Implies_torsion_free (G : type*) [Group G] (h : set G)  (F : G →* h) (hs : F.injective) (h_free : _free_Group h) :  _torsion_free G ",
      "theorem free_Group__torsion_free (G : type*) [Group G]  (hG : _free (↑G : set G)) : _torsion_free (↑G : set G) ",
      "theorem free_Group__torsion_free (G : type*) [Group G]  (hG : ∀ x : G, x ≠ 1 → ∃ y : G, y ^ 2 = x) :  Group.torsion_free G ",
      "theorem free_Group__torsion_free (G : type*) [Group G] (F : free_Group G) :  ∀ x : free_Group G, x ≠ 1 → (∃ n : ℕ, x = (n : ℕ) • x) → False ",
      "theorem free__torsion_free (G : type*) [Group G] (h : Subgroup G)  (hH : free_Group h) : torsion_free G "
    ],
    "answer": "theorem free_group_torsion_free {α : Type} : Monoidₓ.IsTorsionFree (FreeGroup α) "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "free_group_torsion_free",
      "main_prompt": "Every free group is torsion free",
      "prompt": "Natural language version: \"Subgroups of torsion-free groups are torsion-free.\" Translate the natural language version to a Lean mathlib version:\n theorem is_torsion_free.subgroup{G : Type u_1} [group G] (tG : monoid.is_torsion_free G) (H : subgroup G) :\nmonoid.is_torsion_free ↥H := \n\nNatural language version: \"A nontrivial torsion-free group is not torsion.\" Translate the natural language version to a Lean mathlib version:\n theorem is_torsion_free.not_torsion{G : Type u_1} [group G] [hN : nontrivial G] :\nmonoid.is_torsion_free G → ¬monoid.is_torsion G := \n\nNatural language version: \"Direct products of torsion free groups are torsion free.\" Translate the natural language version to a Lean mathlib version:\n theorem is_torsion_free.prod{η : Type u_1} {Gs : η → Type u_2} [Π (i : η), group (Gs i)] (tfGs : ∀ (i : η), monoid.is_torsion_free (Gs i)) :\nmonoid.is_torsion_free (Π (i : η), Gs i) := \n\nNatural language version: \"Direct products of additive torsion free groups are torsion free.\" Translate the natural language version to a Lean mathlib version:\n theorem add_monoid.is_torsion_free.prod{η : Type u_1} {Gs : η → Type u_2} [Π (i : η), add_group (Gs i)] (tfGs : ∀ (i : η), add_monoid.is_torsion_free (Gs i)) :\nadd_monoid.is_torsion_free (Π (i : η), Gs i) := \n\nNatural language version: \"Every free group is torsion free\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.8580459356307983,
          "doc_string": "Subgroups of torsion-free groups are torsion-free.",
          "statement": "theorem is_torsion_free.subgroup {G : Type u_1} [group G] (tG : monoid.is_torsion_free G) (H : subgroup G) : monoid.is_torsion_free ↥H"
        },
        {
          "sim_score": 0.8004929423332214,
          "doc_string": "A nontrivial torsion-free group is not torsion.",
          "statement": "theorem is_torsion_free.not_torsion {G : Type u_1} [group G] [hN : nontrivial G] : monoid.is_torsion_free G → ¬monoid.is_torsion G"
        },
        {
          "sim_score": 0.7987847924232483,
          "doc_string": "Direct products of torsion free groups are torsion free.",
          "statement": "theorem is_torsion_free.prod {η : Type u_1} {Gs : η → Type u_2} [Π (i : η), group (Gs i)] (tfGs : ∀ (i : η), monoid.is_torsion_free (Gs i)) : monoid.is_torsion_free (Π (i : η), Gs i)"
        },
        {
          "sim_score": 0.7854448556900024,
          "doc_string": "Direct products of additive torsion free groups are torsion free.",
          "statement": "theorem add_monoid.is_torsion_free.prod {η : Type u_1} {Gs : η → Type u_2} [Π (i : η), add_group (Gs i)] (tfGs : ∀ (i : η), add_monoid.is_torsion_free (Gs i)) : add_monoid.is_torsion_free (Π (i : η), Gs i)"
        }
      ],
      "codex_time": 5.630564228980802,
      "search_time": 1.4791829389869235,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem free_Group._torsion_free{α : type u_1} : Monoid._torsion_free (free_Group α) ",
      "theorem free_Group._torsion_free{n : type u_1} {α : type u_2} [Group α] [Fintype n] : Monoid._torsion_free (free_Group n α) ",
      "theorem free_Group._torsion_free{α : type u_1} (S : set α) : Monoid._torsion_free (free_Group S) ",
      "theorem _torsion_free.free_Group{α : type u_1} [Fintype α] (tG : Monoid._torsion (free_Group α)) : _torsion_free (free_Group α) ",
      "theorem free_Group._torsion_free{α : type u} [free_Group α] : Monoid._torsion_free (free_Group.of α) "
    ],
    "answer": "theorem free_group_torsion_free {α : Type} : Monoidₓ.IsTorsionFree (FreeGroup α) "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "free_group_torsion_free",
      "main_prompt": "Every free group is torsion free",
      "prompt": "Natural language version: \"Every free group is torsion free\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 7.198624655022286,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem : ∀ G : type , ( free_Group G ) → ( torsion_free G ) ",
      "theorem free_Group__torsion_free (G : type) [Group G] [fb : free_Group G] : torsion_free G ",
      "theorem freepreserves_tf : ∀ G : mygroup, _free G → torsion_free G. So in plain words we are trying to prove that free groups are torsion free. Moreover, the question we want to answer  for what groups this statement  True, so the proposition we want  of the form x → Y, where x  the set of groups for which the statement  True, and Y  the set of groups for which the statement  not True. Now we start constructing the sample solution:  1) Refine the statement. Note that the object of study here  the set of groups that are not torsion free. At Some point we will have to prove _",
      "theorem free_Group._torsion_free :   ∀ (G : type u)[free_Group G] [_torsion G],   False ",
      "theorem q1005 : ∀ G : type , (( ∀ R : type , (_Subgroup G R) → False) → (∀ {x : G}, has_order G x → 1=x)) →  (_free_Group G) → (_torsion_free_Group G) .   translate  \"For any type G such that such that if (any Subgroup R of G  False) then  (for any x of type G, if x has_order then x=1), if G   A free Group then G  A torsion free Group\"     Reasoning in Lean:  Proof Succinct. Precise"
    ],
    "answer": "theorem free_group_torsion_free {α : Type} : Monoidₓ.IsTorsionFree (FreeGroup α) "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "integer_subgroups",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"Every non-empty subgroup of `ℤ` is isomorphic to `ℤ`\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "Every non-empty subgroup of `ℤ` is isomorphic to `ℤ`",
      "codex_time": 5.7116632999968715,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Nonempty_Zgroup_Nonempty_Int : ∀ G : type*,  [Group G] → (1 : G) ≠ 1 → G ≃ ℤ ",
      "theorem every_Nontrivial_Subgroup_of_Z_isomorphic_to_Z (S : Subgroup ℤ) (hS : S ≠ ⊥) :  S ≃* ℤ ",
      "theorem Z__divisible (G : type*) [AddGroup G] (h : ∀ g : G, g ≠ 0 → ∃ n : ℤ, n • g = 0) :  ∃ (h : type*) [AddGroup h], G ≃ Z ",
      "theorem Nonempty_Subgroup_isomorphic_z (G : type*) [Group G] (h : set G) (hH : h ≠ ∅) :  @_Group_hom.Left_cancel_fun _ _ Int.Z_Group_hom h ",
      "theorem Nonempty_Subgroup_integer_iso_integer (G : type*) [Group G] (h : Subgroup G)  (hH : h ≠ {1}) : G ≃* (ℤ : type*) "
    ],
    "answer": "theorem integer_subgroups (H : AddSubgroup ℤ) : H.Carrier.Nonempty  →   ↥H ≃+ ℤ "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "integer_subgroups",
      "main_prompt": "Every non-empty subgroup of `ℤ` is isomorphic to `ℤ`",
      "prompt": "Natural language version: \"Every subgroup of `ℤ` is cyclic.\" Translate the natural language version to a Lean mathlib version:\n theorem int.subgroup_cyclic(H : add_subgroup ℤ) :\n∃ (a : ℤ), H = add_subgroup.closure {a} := \n\nNatural language version: \"If the quotient by a subgroup gives a singleton then the subgroup is the whole group.\" Translate the natural language version to a Lean mathlib version:\n theorem quotient_group.subgroup_eq_top_of_subsingleton{G : Type u} [group G] (H : subgroup G) (h : subsingleton (G ⧸ H)) :\nH = ⊤ := \n\nNatural language version: \"The subgroup generated by a set includes the set.\" Translate the natural language version to a Lean mathlib version:\n theorem subgroup.subset_closure{G : Type u_1} [group G] {k : set G} :\nk ⊆ ↑(subgroup.closure k) := \n\nNatural language version: \"Two subgroups are equal if they have the same elements.\" Translate the natural language version to a Lean mathlib version:\n theorem subgroup.ext{G : Type u_1} [group G] {H K : subgroup G} (h : ∀ (x : G), x ∈ H ↔ x ∈ K) :\nH = K := \n\nNatural language version: \"Every non-empty subgroup of `ℤ` is isomorphic to `ℤ`\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.710217297077179,
          "doc_string": "Every subgroup of `ℤ` is cyclic.",
          "statement": "theorem int.subgroup_cyclic (H : add_subgroup ℤ) : ∃ (a : ℤ), H = add_subgroup.closure {a}"
        },
        {
          "sim_score": 0.5739960670471191,
          "doc_string": "If the quotient by a subgroup gives a singleton then the subgroup is the whole group.",
          "statement": "theorem quotient_group.subgroup_eq_top_of_subsingleton {G : Type u} [group G] (H : subgroup G) (h : subsingleton (G ⧸ H)) : H = ⊤"
        },
        {
          "sim_score": 0.5350345969200134,
          "doc_string": "The subgroup generated by a set includes the set.",
          "statement": "theorem subgroup.subset_closure {G : Type u_1} [group G] {k : set G} : k ⊆ ↑(subgroup.closure k)"
        },
        {
          "sim_score": 0.5225922465324402,
          "doc_string": "Two subgroups are equal if they have the same elements.",
          "statement": "theorem subgroup.ext {G : Type u_1} [group G] {H K : subgroup G} (h : ∀ (x : G), x ∈ H ↔ x ∈ K) : H = K"
        }
      ],
      "codex_time": 9.994682027987437,
      "search_time": 1.4260498700023163,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Int.Subgroup_isomorphic_Int(h : Add_Subgroup ℤ) (h : (0:ℤ) ∈ h) : Nonempty (Add_Subgroup.Quotient_AddGroup h) ∧ Add_Subgroup.Quotient_AddGroup h ≃ₗ[ℤ] ℤ ",
      "theorem Nonempty_Int_Subgroup_Equiv_Int{h : Add_Subgroup ℤ} (hn : h ≠ ⊥) : h ≃ ℤ ",
      "theorem Int.Subgroup.of_Ne_Empty_One_isom_Int{h : Add_Subgroup ℤ} (h : (1 : ℤ) ∈ h) :  h ≃ ℤ ",
      "theorem Int.Nonempty_Subgroup_injective(h : Add_Subgroup ℤ) (h: ∃ (A : ℤ), A ∈ h) : injective (@Int.AddGroup_hom_Coe_Nat : h → ℤ) ",
      "theorem Subgroup.Infinite_cyclic(h : Subgroup ℤ) (hne : ¬ ∀ x, x ∈ h → x = 0) : ∃ (A : ℤ), (∀(n : ℤ), n • A ∈ h) ∧ h ≃ₙ[AddMonoid ℤ] ℤ "
    ],
    "answer": "theorem integer_subgroups (H : AddSubgroup ℤ) : H.Carrier.Nonempty  →   ↥H ≃+ ℤ "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "integer_subgroups",
      "main_prompt": "Every non-empty subgroup of `ℤ` is isomorphic to `ℤ`",
      "prompt": "Natural language version: \"Every non-empty subgroup of `ℤ` is isomorphic to `ℤ`\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 11.630960176000372,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem _Subgroup_of_Z_isomorphic_to_Z {S : Subgroup ℤ} (h : S.val.Nonempty) :    (S.1 : set ℤ) ≃ ℤ ",
      "theorem every_Nonempty_Int_Subgroup__Int { G : type * } [ Group G ] ( h : ( 0 : G ) ≠ 1 ) : ∃ F : Int → G , @ _Group_hom Int G F ⊢ F 0 = 0 ∧ F 1 = 1 ",
      "theorem Subgroup_Int :∀ x : Subgroup Int , (x ≠ ⊥) → x ≅ ℤ ",
      "theorem Z_Subgroup_iso_Z : ∀ G : Group ℤ , ( 0 : ℤ ) ∈ G → ( ∃ F : G → ℤ , Function . Bijective F ∧ ∀ x y : G , F ( x * y ) = F x * F y )  This  an actual Mathlib theorem, that'S not too hard to prove. (i also added it to the be_iso List)  imports Group_theory_bundled import Group_theorem_blog #check Z_Subgroup_iso_Z  Imported Classes and instances  Also the blog posts assume certain types of theorems and definitions ",
      "theorem z_Dvd_iff_mod_Eq_Zero (n m : ℕ) : n ∣ m ↔ m % n = 0 "
    ],
    "answer": "theorem integer_subgroups (H : AddSubgroup ℤ) : H.Carrier.Nonempty  →   ↥H ≃+ ℤ "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "int_poly_rat_zeros_int",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"If the coefficients of a polynomial over rationals are integral, every rational root is integral.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "If the coefficients of a polynomial over rationals are integral, every rational root is integral.",
      "codex_time": 10.176823131012497,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem integral_Coeff_Int_root (n : ℕ) (A : ℤ) (Gcd_A_n : Gcd n A = 1) :   ∀ (k : ℤ), Polynomial.Eval (Polynomial.C A * x ^ n - 1) k = 0 → k = 0 ∨ k = 1 ",
      "theorem integral_coeffs_Implies_integral_root {α : type} [integral_IsDomain α] (P : Polynomial α)  (h_coeffs : ∀ m : ℕ, m ≤ P.Nat_degree → P.Coeff m ∈ set.Range (Coe : ℤ → α))  (root : α) (h_root : root ∣ P) : ∃ r : ℤ, root = (Coe r : α) ",
      "theorem integral_coeffs_rational_roots_Int (F : Polynomial ℚ) (h₁ : integral_IsDomain ℚ)  (h₂ : integral_IsDomain ℤ) (h₃ : ∀ C ∈ F.coeffs, C : ℤ) (P : Polynomial ℚ)  (hp : P ≠ 0) (h_divides : P ∣ F) :  ∀ r, r ≠ 0 → root F r → r : ℤ ",
      "theorem rational_roots_are_integral (F : Polynomial ℤ) (hpf : ¬ _Zero F) :  (∀ x : ℚ, F.Eval x = 0 → IsIntegral x) ",
      "theorem Poly_of_rational_coeffs_integral_roots (F : Polynomial ℚ) :  integral_IsDomain ℤ → (∃ A : ℤ, F.Eval A = 0) → ∃ B : ℤ, F.Eval B = 0 "
    ],
    "answer": "theorem int_poly_rat_zeros_int (p: Polynomial ℚ) : ∀ n: ℕ, IsIntegral ℚ (p.coeff n) →  ∀ x: ℚ, p.IsRoot x →  IsIntegral ℚ x "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "int_poly_rat_zeros_int",
      "main_prompt": "If the coefficients of a polynomial over rationals are integral, every rational root is integral.",
      "prompt": "Natural language version: \" Rational root theorem part 1: if `r : f.codomain` is a root of a polynomial over the ufd `A`, then the numerator of `r` divides the constant coefficient\" Translate the natural language version to a Lean mathlib version:\n theorem num_dvd_of_is_root{A : Type u_1} {K : Type u_2} [comm_ring A] [is_domain A] [unique_factorization_monoid A] [field K] [algebra A K] [is_fraction_ring A K] {p : polynomial A} {r : K} (hr : ⇑(polynomial.aeval r) p = 0) :\nis_fraction_ring.num A r ∣ p.coeff 0 := \n\nNatural language version: \" Integral root theorem: if `r : f.codomain` is a root of a monic polynomial over the ufd `A`, then `r` is an integer\" Translate the natural language version to a Lean mathlib version:\n theorem is_integer_of_is_root_of_monic{A : Type u_1} {K : Type u_2} [comm_ring A] [is_domain A] [unique_factorization_monoid A] [field K] [algebra A K] [is_fraction_ring A K] {p : polynomial A} (hp : p.monic) {r : K} (hr : ⇑(polynomial.aeval r) p = 0) :\nis_localization.is_integer A r := \n\nNatural language version: \" Rational root theorem part 2: if `r : f.codomain` is a root of a polynomial over the ufd `A`, then the denominator of `r` divides the leading coefficient\" Translate the natural language version to a Lean mathlib version:\n theorem denom_dvd_of_is_root{A : Type u_1} {K : Type u_2} [comm_ring A] [is_domain A] [unique_factorization_monoid A] [field K] [algebra A K] [is_fraction_ring A K] {p : polynomial A} {r : K} (hr : ⇑(polynomial.aeval r) p = 0) :\n↑(is_fraction_ring.denom A r) ∣ p.leading_coeff := \n\nNatural language version: \"This lemma is useful for working with the `int_degree` of a rational function.\" Translate the natural language version to a Lean mathlib version:\n theorem polynomial.nat_degree_sub_eq_of_prod_eq{R : Type u} [semiring R] [no_zero_divisors R] {p₁ p₂ q₁ q₂ : polynomial R} (hp₁ : p₁ ≠ 0) (hq₁ : q₁ ≠ 0) (hp₂ : p₂ ≠ 0) (hq₂ : q₂ ≠ 0) (h_eq : p₁ * q₂ = p₂ * q₁) :\n↑(p₁.nat_degree) - ↑(q₁.nat_degree) = ↑(p₂.nat_degree) - ↑(q₂.nat_degree) := \n\nNatural language version: \"If the coefficients of a polynomial over rationals are integral, every rational root is integral.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.6362022161483765,
          "doc_string": " Rational root theorem part 1: if `r : f.codomain` is a root of a polynomial over the ufd `A`, then the numerator of `r` divides the constant coefficient",
          "statement": "theorem num_dvd_of_is_root {A : Type u_1} {K : Type u_2} [comm_ring A] [is_domain A] [unique_factorization_monoid A] [field K] [algebra A K] [is_fraction_ring A K] {p : polynomial A} {r : K} (hr : ⇑(polynomial.aeval r) p = 0) : is_fraction_ring.num A r ∣ p.coeff 0"
        },
        {
          "sim_score": 0.6275410652160645,
          "doc_string": " Integral root theorem: if `r : f.codomain` is a root of a monic polynomial over the ufd `A`, then `r` is an integer",
          "statement": "theorem is_integer_of_is_root_of_monic {A : Type u_1} {K : Type u_2} [comm_ring A] [is_domain A] [unique_factorization_monoid A] [field K] [algebra A K] [is_fraction_ring A K] {p : polynomial A} (hp : p.monic) {r : K} (hr : ⇑(polynomial.aeval r) p = 0) : is_localization.is_integer A r"
        },
        {
          "sim_score": 0.6202014684677124,
          "doc_string": " Rational root theorem part 2: if `r : f.codomain` is a root of a polynomial over the ufd `A`, then the denominator of `r` divides the leading coefficient",
          "statement": "theorem denom_dvd_of_is_root {A : Type u_1} {K : Type u_2} [comm_ring A] [is_domain A] [unique_factorization_monoid A] [field K] [algebra A K] [is_fraction_ring A K] {p : polynomial A} {r : K} (hr : ⇑(polynomial.aeval r) p = 0) : ↑(is_fraction_ring.denom A r) ∣ p.leading_coeff"
        },
        {
          "sim_score": 0.5798273086547852,
          "doc_string": "This lemma is useful for working with the `int_degree` of a rational function.",
          "statement": "theorem polynomial.nat_degree_sub_eq_of_prod_eq {R : Type u} [semiring R] [no_zero_divisors R] {p₁ p₂ q₁ q₂ : polynomial R} (hp₁ : p₁ ≠ 0) (hq₁ : q₁ ≠ 0) (hp₂ : p₂ ≠ 0) (hq₂ : q₂ ≠ 0) (h_eq : p₁ * q₂ = p₂ * q₁) : ↑(p₁.nat_degree) - ↑(q₁.nat_degree) = ↑(p₂.nat_degree) - ↑(q₂.nat_degree)"
        }
      ],
      "codex_time": 8.817720086983172,
      "search_time": 1.6466410249995533,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem IsIntegral_Int_degree_of_Eq{R : type*} [integral_IsDomain R] [Algebra ℚ R] (P : Polynomial R) (hp : ∀ r : R, 0 < r → r ∣ P.Coeff 0) (r) (hr : Polynomial.aeval r P = 0) : r.IsIntegral ",
      "theorem _root_of_monic_of_integral₁{R : type u} [CommRing R] [IsDomain R] {P₁ : Polynomial (ℤ[x])} {P₂ : Polynomial R} (h_Int : P₁.IsIntegral) (h_Eq : P₂.Coeff ↑(P₁.Nat_degree) = P₁.Coeff ↑(P₁.Nat_degree)) (h_roots : ∀ y, (y : ℚ) = 0 ∨ y ∣ ↑(P₂.leading",
      "theorem _integer_of__root_of_Int_Coeff{P : Polynomial ℚ} (h_Int_Coeff : P.coeffs_Int) {x : ℚ} (h_root : P.Eval x = 0) : _rat_Localization._integer x ",
      "theorem IsLocalization._integer_of__root_of_Int{A : type u_1} [CommRing A] [no_Zero_divisors A] {P : Polynomial A} (hp : P._Int) {r : A} (hr : P.Eval r = 0) : IsLocalization._integer A r ",
      "theorem IsIntegral_of_roots_integral{R : type u_1} [CommRing R] {P : Polynomial R} (hp : ∀ (i : ℕ), P.Coeff i ∈ @Submonoid.to_Submodule ℤ ℤ (Submonoid.of ℤ 1) _) {r : ℚ} (hr : Polynomial.aeval r P = 0) :  IsIntegral r "
    ],
    "answer": "theorem int_poly_rat_zeros_int (p: Polynomial ℚ) : ∀ n: ℕ, IsIntegral ℚ (p.coeff n) →  ∀ x: ℚ, p.IsRoot x →  IsIntegral ℚ x "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "int_poly_rat_zeros_int",
      "main_prompt": "If the coefficients of a polynomial over rationals are integral, every rational root is integral.",
      "prompt": "Natural language version: \"If the coefficients of a polynomial over rationals are integral, every rational root is integral.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 11.01090104598552,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem (_root_integral : ∀ {τ : type} [integral_IsDomain τ] (F : Polynomial τ) [IsIntegral_Polynomial F] {x : τ}, _root F x) ",
      "theorem Nat . Pow_root_integral ( A B : ℤ ) ( hba : B ≠ 0 ) ( n : Nat ) ( ha : A ≠ 0 ) : ( A ^ n ≠ B ) ",
      "theorem polya_folklore (F : Polynomial ℚ) (Hz : ∀ i, F.Coeff i ∈ ℤ) : ¬ ∃ z : ℚ, z ≠ 0 ∧ z ∣ F.Eval 0 ∧ ¬ z ∣ 0 ",
      "theorem Int.Coeff_then_Int_root (α : type) [integral_IsDomain α] (as : List α) [h : Int.coeffs as] (q : ℚ) {hq : q.denom = 1} (h : _root as q) : q.Num ∈ @Int.set α ",
      "theorem Poly_Int_Nat.Prime_integral_root : ∀ 𝕜 [Nontrivial_NormedField 𝕜] (A : ℕ) (r : ℚ),  (A : ℤ) ≠ 0 →  ∃ x : ℤ, x ∣ A ∧ r = (𝕜.to_Real (rat.cast_Int x))⁻¹ *   sqrt (𝕜.to_Real (rat.cast_Int A)) "
    ],
    "answer": "theorem int_poly_rat_zeros_int (p: Polynomial ℚ) : ∀ n: ℕ, IsIntegral ℚ (p.coeff n) →  ∀ x: ℚ, p.IsRoot x →  IsIntegral ℚ x "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "has_prime_factor",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"Every natural number greater than `1` is divisible by a prime number.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "Every natural number greater than `1` is divisible by a prime number.",
      "codex_time": 8.210922890983056,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Prime_divides_Some_Succ_of_Nat {P : ℕ} (hp : Prime P) (n : ℕ) (h : 1 < n): ∃ k : ℕ, P ∣ Succ k ∧ k < n ",
      "theorem Nat.Succ_Ne_Zero (n : ℕ) : Nat.Succ n ≠ 0 ",
      "theorem Odd_Nat.Succ_Pos_iff (n : ℕ) : Odd (n.Succ) ↔ n.Succ > 0 ",
      "theorem Nat.Ne_One_div_Prime (n : ℕ) (hn : n ≠ 1) : ∃ P : ℕ, P.Prime ∧ P ∣ n ",
      "theorem exists_Prime_number_divides (m : ℕ) (m_Pos : m > 1) :  ∃ P : ℕ, Prime P ∧ P ∣ m "
    ],
    "answer": "theorem has_prime_factor (n: ℕ) : n > 1 → ∃ p: ℕ, Prime p ∧ (∃ d: ℕ, p * d = n) "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "has_prime_factor",
      "main_prompt": "Every natural number greater than `1` is divisible by a prime number.",
      "prompt": "Natural language version: \" If a small natural number is divisible by a larger natural number, the small number is zero.\" Translate the natural language version to a Lean mathlib version:\n theorem nat.eq_zero_of_dvd_of_lt{a b : ℕ} (w : a ∣ b) (h : b < a) :\nb = 0 := \n\nNatural language version: \"Every nonzero natural number has a unique prime factorization\" Translate the natural language version to a Lean mathlib version:\n theorem nat.factorization_inj :\nset.inj_on nat.factorization {x : ℕ | x ≠ 0} := \n\nNatural language version: \"A prime `p` satisfies `p % 2 = 1` if and only if `p ≠ 2`.\" Translate the natural language version to a Lean mathlib version:\n theorem nat.prime.mod_two_eq_one_iff_ne_two{p : ℕ} [fact (nat.prime p)] :\np % 2 = 1 ↔ p ≠ 2 := \n\nNatural language version: \"The only prime factor of prime `p` is `p` itself, with multiplicity `1`\" Translate the natural language version to a Lean mathlib version:\n theorem nat.prime.factorization{p : ℕ} (hp : nat.prime p) :\np.factorization = finsupp.single p 1 := \n\nNatural language version: \"Every natural number greater than `1` is divisible by a prime number.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.6529487371444702,
          "doc_string": " If a small natural number is divisible by a larger natural number, the small number is zero.",
          "statement": "theorem nat.eq_zero_of_dvd_of_lt {a b : ℕ} (w : a ∣ b) (h : b < a) : b = 0"
        },
        {
          "sim_score": 0.593155562877655,
          "doc_string": "Every nonzero natural number has a unique prime factorization",
          "statement": "theorem nat.factorization_inj  : set.inj_on nat.factorization {x : ℕ | x ≠ 0}"
        },
        {
          "sim_score": 0.5878391265869141,
          "doc_string": "A prime `p` satisfies `p % 2 = 1` if and only if `p ≠ 2`.",
          "statement": "theorem nat.prime.mod_two_eq_one_iff_ne_two {p : ℕ} [fact (nat.prime p)] : p % 2 = 1 ↔ p ≠ 2"
        },
        {
          "sim_score": 0.5869839191436768,
          "doc_string": "The only prime factor of prime `p` is `p` itself, with multiplicity `1`",
          "statement": "theorem nat.prime.factorization {p : ℕ} (hp : nat.prime p) : p.factorization = finsupp.single p 1"
        }
      ],
      "codex_time": 3.4960174949956127,
      "search_time": 1.434510382998269,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Nat.Ge.Prime{n : ℕ} (h : n > 1) : ∃ P : ℕ, Nat.Prime P ∧ 1 < P ∧ P ∣ n ",
      "theorem Nat.One_LT_Prime_divisor{n : ℕ} (hn : 1 < n) : ∃ P, Nat.Prime P ∧ P ∣ n ",
      "theorem Nat.exists_Prime_factor (n : ℕ) (h : n > 1) : ∃ P, Prime P ∧ P ∣ n ",
      "theorem Nat.Ge_two.has_Dvd_Prime(n : ℕ) (h : 2 ≤ n) : ∃ P : ℕ, Prime P ∧ P ∣ n ",
      "theorem Nat.exists_Prime_divisor{n : ℕ} (h : n > 1) : ∃ (P : ℕ), Nat.Prime P ∧ P ∣ n "
    ],
    "answer": "theorem has_prime_factor (n: ℕ) : n > 1 → ∃ p: ℕ, Prime p ∧ (∃ d: ℕ, p * d = n) "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "has_prime_factor",
      "main_prompt": "Every natural number greater than `1` is divisible by a prime number.",
      "prompt": "Natural language version: \"Every natural number greater than `1` is divisible by a prime number.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 7.534994906018255,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem naturals_greater_1_div_Prime (n : ℕ) (h : n > 1) : ∃ n' : ℕ, (∀ D : ℕ, D ∣ n' → D = 1 ∨ D = n') ",
      "theorem Inf : ∀ n : ℕ, n > 1 → ∃ P : Poly_antidiagonal, P.min_degree ≤ n ∧ P.Prime ∧ ∀ F : Poly_antidiagonal, F.min_degree ≤ n → F.Prime → F = P ",
      "theorem Nat.Prime_divisor : ∀ n: ℕ, n > 1 → ∃ P: ℕ, P > 1 ∧ Prime P ∧ P ∣ n ",
      "theorem : (∀ n : ℕ, n > 1 → ∃ P : ℕ, (Prime P) ∧ ( ∃ m : ℕ, n = P * m)) ",
      "theorem F : ∀ n : ℕ,  (1:ℕ) < n → ∃ P : ℕ, Prime P ∧ P ∣ n "
    ],
    "answer": "theorem has_prime_factor (n: ℕ) : n > 1 → ∃ p: ℕ, Prime p ∧ (∃ d: ℕ, p * d = n) "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "six_not_prime_sum",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"Six is not the sum of two prime numbers.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "Six is not the sum of two prime numbers.",
      "codex_time": 9.64134580901009,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem six_neq_Sum_of_two_Prime_numbers :  ¬ (∃ P q : ℕ, Prime P ∧ Prime q ∧ 6 = P + q) ",
      "theorem Mul_two_Mul_Mul_Eq_square_Add_One (x : ℕ) (hx : x ≥ 1) :  x * 2 * x = x^2 + 1 ",
      "theorem no_Sum_of_two_Primes_6 (P q : ℕ) (hp : Prime P) (hq : Prime q):  6 ≠ P + q ",
      "theorem six_Eq_Primes (P q : ℕ) : 6 = P + q →  (Prime P ∧ Prime q) → False ",
      "theorem six_not_Sum_of_two_Primes (Primes : set ℕ) (h_1 : (1 : ℕ) ∈ Primes)  (h_Finite : Finite Primes) (h_IsClosed : ∀ m n ∈ Primes, m * n ∈ Primes) (h_square_neq_Prime :  ∀ m ∈ Primes, m^2 ≠ 1) (h_Prime_divisors : ∀ m n : ℕ, m * n = 1 → m = 1 ∨ m ∈ Primes  → n = 1 ∨ n ∈ Primes) (Primes_Pos :"
    ],
    "answer": "theorem six_not_prime_sum : ¬ (∃ n m: Nat, Prime n ∧ Prime m ∧ n ≠ m ∧ 6 = n + m) "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "six_not_prime_sum",
      "main_prompt": "Six is not the sum of two prime numbers.",
      "prompt": "Natural language version: \"The sine of `π / 6` is `1 / 2`.\" Translate the natural language version to a Lean mathlib version:\n theorem real.sin_pi_div_six :\nreal.sin (real.pi / 6) = 1 / 2 := \n\nNatural language version: \" Euclid's theorem on the **infinitude of primes**. Here given in the form: for every `n`, there exists a prime number `p ≥ n`.\" Translate the natural language version to a Lean mathlib version:\n theorem nat.exists_infinite_primes(n : ℕ) :\n∃ (p : ℕ), n ≤ p ∧ nat.prime p := \n\nNatural language version: \" **Fermat's theorem on the sum of two squares**. Every prime congruent to 1 mod 4 is the sum of two squares. Also known as **Fermat's Christmas theorem**.\" Translate the natural language version to a Lean mathlib version:\n theorem nat.prime.sq_add_sq{p : ℕ} [fact (nat.prime p)] (hp : p % 4 = 1) :\n∃ (a b : ℕ), a ^ 2 + b ^ 2 = p := \n\nNatural language version: \" Euclid's lemma: if `a ∣ b * c` and `a` and `b` have no common prime factors, `a ∣ c`. Compare `is_coprime.dvd_of_dvd_mul_right`.\" Translate the natural language version to a Lean mathlib version:\n theorem unique_factorization_monoid.dvd_of_dvd_mul_right_of_no_prime_factors{R : Type u_2} [cancel_comm_monoid_with_zero R] [unique_factorization_monoid R] {a b c : R} (ha : a ≠ 0) (no_factors : ∀ {d : R}, d ∣ a → d ∣ b → ¬prime d) :\na ∣ b * c → a ∣ c := \n\nNatural language version: \"Six is not the sum of two prime numbers.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.4190795421600342,
          "doc_string": "The sine of `π / 6` is `1 / 2`.",
          "statement": "theorem real.sin_pi_div_six  : real.sin (real.pi / 6) = 1 / 2"
        },
        {
          "sim_score": 0.41275641322135925,
          "doc_string": " Euclid's theorem on the **infinitude of primes**. Here given in the form: for every `n`, there exists a prime number `p ≥ n`.",
          "statement": "theorem nat.exists_infinite_primes (n : ℕ) : ∃ (p : ℕ), n ≤ p ∧ nat.prime p"
        },
        {
          "sim_score": 0.4100857973098755,
          "doc_string": " **Fermat's theorem on the sum of two squares**. Every prime congruent to 1 mod 4 is the sum of two squares. Also known as **Fermat's Christmas theorem**.",
          "statement": "theorem nat.prime.sq_add_sq {p : ℕ} [fact (nat.prime p)] (hp : p % 4 = 1) : ∃ (a b : ℕ), a ^ 2 + b ^ 2 = p"
        },
        {
          "sim_score": 0.40865230560302734,
          "doc_string": " Euclid's lemma: if `a ∣ b * c` and `a` and `b` have no common prime factors, `a ∣ c`. Compare `is_coprime.dvd_of_dvd_mul_right`.",
          "statement": "theorem unique_factorization_monoid.dvd_of_dvd_mul_right_of_no_prime_factors {R : Type u_2} [cancel_comm_monoid_with_zero R] [unique_factorization_monoid R] {a b c : R} (ha : a ≠ 0) (no_factors : ∀ {d : R}, d ∣ a → d ∣ b → ¬prime d) : a ∣ b * c → a ∣ c"
        }
      ],
      "codex_time": 6.6912566919927485,
      "search_time": 1.4358506849966943,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Nat.Prime.no_Sum_of_two{P q : ℕ} (hp : Nat.Prime P) (hq : Nat.Prime q) : 2 < P → 2 < q → P + q ≠ 6 ",
      "theorem Nat.not_two_Primes_six : ∀ {A B : ℕ}, A ≠ 2 → B ≠ 2 → ∀ (h : A + B = 6), A ≤ 2 ∧ B ≤ 2 ",
      "theorem Nat.not_Sum_of_Primes_of_six : ∀ (A B : ℕ), Nat.Prime A → Nat.Prime B → A + B ≠ 6 ",
      "theorem Nat.not_Sum_two_Primes : ¬ ∃ {A B : ℕ}, A.Prime ∧ B.Prime ∧ 6 = A + B ",
      "theorem Nat.Prime.sq_Add_sq_not_six(P : ℕ) [Fact (Nat.Prime P)] (hp : P % 4 = 1) : ¬(∃ (A B : ℕ), A ^ 2 + B ^ 2 = P) "
    ],
    "answer": "theorem six_not_prime_sum : ¬ (∃ n m: Nat, Prime n ∧ Prime m ∧ n ≠ m ∧ 6 = n + m) "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "six_not_prime_sum",
      "main_prompt": "Six is not the sum of two prime numbers.",
      "prompt": "Natural language version: \"Six is not the sum of two prime numbers.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 5.365607718005776,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem six_not_Sum_two_Primes :  ∀ A B : ℕ, Prime A → Prime B → 2 ≤ A → 2 ≤ B → 6 ≠ A + B ",
      "theorem Sum_of_Primes (x y : ℕ) (ha : 2 < x) (hb : 2 < y) : x + y ≠ 6 ",
      "theorem notsix ( n : ℕ ) ( h1 : n > 1 ) ( h2 : n < 6 ) : 6 ≠ n ",
      "theorem six__not_the_Sum_of_two_Prime_numbers : ¬Prime_Sum 6 ",
      "theorem ci6_not_Eq_Primes : ∀ P q : ℕ, (2 ≤ P ∧ 2 ≤ q ∧ P + q = 6) → False , where \"cI6\" "
    ],
    "answer": "theorem six_not_prime_sum : ¬ (∃ n m: Nat, Prime n ∧ Prime m ∧ n ≠ m ∧ 6 = n + m) "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "fin_torsionfree",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"A finite torsion-free group is trivial\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "A finite torsion-free group is trivial",
      "codex_time": 9.737914669996826,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Finite_torsion_free_Group__trivial (G : type*) [Group G] (hfg : Finset.Card G < ⊤)  (hftf : ∀ x : G, x ≠ 1 → ∃ n : ℕ, x ^ n = 1) :  G.val = {1} ",
      "theorem Finite_torsion_free_Group__trivial (G : type*) [Group G] [Fintype G]  (h : ∀ g : G, g ≠ 1 → ∃ n : ℕ, g ^ n = 1) : G ≅ (1 : G) ",
      "theorem Finite_torsion_free_Group__trivial (G : type*) [Group G]  (hG_Fin : Fintype G) (hG_tor_F : ∀ x : G, _Nontrivial G → x ≠ 1) :  G ≅ (1 : G) ",
      "theorem Finite_torsion_free_Group__trivial (G : type*) [Group G] (hG_Fin : Fintype G)  (HG_tor_free : ∀ x : G, x ≠ 1 → ∃ n : ℕ, x ^ n = 1) :  ∀ x : G, x = 1 ",
      "theorem Finite_torsion_free_Group__trivial {G : type*} [Group G] (hG : Fintype G)  (hGt : ∀ x : G, x ≠ 1 → x ^ (G.Card : ℕ) = 1) : G = {1} "
    ],
    "answer": "theorem fin_torsionfree {G: Type _}[Groupₓ G][Finite G] : Monoidₓ.IsTorsionFree G → IsSubgroup.Trivial G "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "fin_torsionfree",
      "main_prompt": "A finite torsion-free group is trivial",
      "prompt": "Natural language version: \"Subgroups of torsion-free groups are torsion-free.\" Translate the natural language version to a Lean mathlib version:\n theorem is_torsion_free.subgroup{G : Type u_1} [group G] (tG : monoid.is_torsion_free G) (H : subgroup G) :\nmonoid.is_torsion_free ↥H := \n\nNatural language version: \"A nontrivial torsion group is not torsion-free.\" Translate the natural language version to a Lean mathlib version:\n theorem is_torsion.not_torsion_free{G : Type u_1} [group G] [hN : nontrivial G] :\nmonoid.is_torsion G → ¬monoid.is_torsion_free G := \n\nNatural language version: \"A nontrivial torsion-free group is not torsion.\" Translate the natural language version to a Lean mathlib version:\n theorem is_torsion_free.not_torsion{G : Type u_1} [group G] [hN : nontrivial G] :\nmonoid.is_torsion_free G → ¬monoid.is_torsion G := \n\nNatural language version: \"Direct products of torsion free groups are torsion free.\" Translate the natural language version to a Lean mathlib version:\n theorem is_torsion_free.prod{η : Type u_1} {Gs : η → Type u_2} [Π (i : η), group (Gs i)] (tfGs : ∀ (i : η), monoid.is_torsion_free (Gs i)) :\nmonoid.is_torsion_free (Π (i : η), Gs i) := \n\nNatural language version: \"A finite torsion-free group is trivial\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.8230506181716919,
          "doc_string": "Subgroups of torsion-free groups are torsion-free.",
          "statement": "theorem is_torsion_free.subgroup {G : Type u_1} [group G] (tG : monoid.is_torsion_free G) (H : subgroup G) : monoid.is_torsion_free ↥H"
        },
        {
          "sim_score": 0.8135049939155579,
          "doc_string": "A nontrivial torsion group is not torsion-free.",
          "statement": "theorem is_torsion.not_torsion_free {G : Type u_1} [group G] [hN : nontrivial G] : monoid.is_torsion G → ¬monoid.is_torsion_free G"
        },
        {
          "sim_score": 0.8007985353469849,
          "doc_string": "A nontrivial torsion-free group is not torsion.",
          "statement": "theorem is_torsion_free.not_torsion {G : Type u_1} [group G] [hN : nontrivial G] : monoid.is_torsion_free G → ¬monoid.is_torsion G"
        },
        {
          "sim_score": 0.7504584789276123,
          "doc_string": "Direct products of torsion free groups are torsion free.",
          "statement": "theorem is_torsion_free.prod {η : Type u_1} {Gs : η → Type u_2} [Π (i : η), group (Gs i)] (tfGs : ∀ (i : η), monoid.is_torsion_free (Gs i)) : monoid.is_torsion_free (Π (i : η), Gs i)"
        }
      ],
      "codex_time": 6.756425740983104,
      "search_time": 1.4408756789925974,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem _torsion_free_of_Finite{G : type u_1} [Group G] [Fintype G] [_torsion_free : Monoid._torsion_free G] : G ≃ (1 : G) ",
      "theorem _torsion_free.Finite_iff_trivial{G : type u_1} [Group G] (tfG : Monoid._torsion_free G) (fG : Fintype G) : G ≃ Fin_Zero ",
      "theorem _torsion_free.Fintype_Card1_iff {G : type u_1} [Group G] [Fintype G] (h : Monoid._torsion_free G) : Card G = 1 ↔ IsUnit G.0 ",
      "theorem _torsion_free.Fintype {G : type u_1} [Group G] [Fintype G] : Monoid._torsion_free G → trivial G ",
      "theorem _torsion_free.trivial_Finite{G : type u_1} [Group G] [Fintype G] [hN : Nontrivial G] : Monoid._torsion_free G → ⊥ "
    ],
    "answer": "theorem fin_torsionfree {G: Type _}[Groupₓ G][Finite G] : Monoidₓ.IsTorsionFree G → IsSubgroup.Trivial G "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "fin_torsionfree",
      "main_prompt": "A finite torsion-free group is trivial",
      "prompt": "Natural language version: \"A finite torsion-free group is trivial\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 9.143268368003191,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem True Sorry  -/   export Group_theory.Subgroup IsOpen Group_theory  variables {G : type*} [Group G]  section _trivial  variables {g₁ g₂ g₃ : G}  class _trivial (G : type*) [Group G] ",
      "theorem ``A Finite torsion-free Group  trivial'' ",
      "theorem Finite_torsion_free_Group_trivial_lemma : ∀ (G : type*) [Group G] [Fintype G] [Pi.torsion_free G],   G ≃ ℤ ",
      "theorem ftf_trivial (G : type*) [Ab_Group G] [Fintype G] [has_torsion G]:   G = Vector.Zero ",
      "theorem Fin_tors_free_Group__trivial (G : type*) [Group G] [Fintype G]  (h : ∀ g, (g : G) ≠ 1) : G = 1 "
    ],
    "answer": "theorem fin_torsionfree {G: Type _}[Groupₓ G][Finite G] : Monoidₓ.IsTorsionFree G → IsSubgroup.Trivial G "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "hom_rat_Z_trivial",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"Any homomorphism from the additive group of rational numbers to `ℤ` is trivial\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "Any homomorphism from the additive group of rational numbers to `ℤ` is trivial",
      "codex_time": 3.8287297910137568,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem hom_rat_to_Int_trivial (h : (ℚ: type*) ≃ₗ[has_Add.Add ℚ] ℤ) : h = 0 ",
      "theorem hom_rat_Add_Int (F : ℚ → ℤ) (h : ∀ x y : ℚ, F (x + y) = F x + F y) : ∀ x : ℚ, F x = 0 ",
      "theorem no_nonzero_hom_from_q_to_Int :  ∀ (F : ℚ → ℤ), (∀ x, F (x + x) = F x + F x) → (∀ x, F x = 0) ",
      "theorem ZeroHom_of_rationals_to_ints (F : ℚ → ℤ) [_Group_hom F] : F 0 = 0 ",
      "theorem hom_from_q_to_Z__trivial :  ∀ [Group G] (F : ℚ →+ G), F 0 = 0 → F 1 = 1 → F (-1 : ℚ) = 1 → F = 0 "
    ],
    "answer": "theorem hom_rat_Z_trivial (f : ℚ → ℤ) : IsAddGroupHom f →  ∀ x: ℚ, f x = 0 "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "hom_rat_Z_trivial",
      "main_prompt": "Any homomorphism from the additive group of rational numbers to `ℤ` is trivial",
      "prompt": "Natural language version: \"An additive group homomorphism is injective if its kernel is trivial.\" Translate the natural language version to a Lean mathlib version:\n theorem is_add_group_hom.injective_iff{α : Type u} {β : Type v} [add_group α] [add_group β] {f : α → β} (hf : is_add_group_hom f) :\nfunction.injective f ↔ ∀ (a : α), f a = 0 → a = 0 := \n\nNatural language version: \"An additive group homomorphism sends 0 to 0.\" Translate the natural language version to a Lean mathlib version:\n theorem is_add_group_hom.map_zero{α : Type u} {β : Type v} [add_group α] [add_group β] {f : α → β} (hf : is_add_group_hom f) :\nf 0 = 0 := \n\nNatural language version: \"Additive group homomorphisms preserve integer scaling.\" Translate the natural language version to a Lean mathlib version:\n theorem map_zsmul{G : Type u_6} {H : Type u_7} {F : Type u_8} [add_group G] [subtraction_monoid H] [add_monoid_hom_class F G H] (f : F) (n : ℤ) (g : G) :\n⇑f (n • g) = n • ⇑f g := \n\nNatural language version: \"Additive group homomorphisms preserve integer scaling.\" Translate the natural language version to a Lean mathlib version:\n theorem add_monoid_hom.map_zsmul{α : Type u_1} {β : Type u_2} [add_group α] [subtraction_monoid β] (f : α →+ β) (g : α) (n : ℤ) :\n⇑f (n • g) = n • ⇑f g := \n\nNatural language version: \"Any homomorphism from the additive group of rational numbers to `ℤ` is trivial\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.7258538603782654,
          "doc_string": "An additive group homomorphism is injective if its kernel is trivial.",
          "statement": "theorem is_add_group_hom.injective_iff {α : Type u} {β : Type v} [add_group α] [add_group β] {f : α → β} (hf : is_add_group_hom f) : function.injective f ↔ ∀ (a : α), f a = 0 → a = 0"
        },
        {
          "sim_score": 0.7063751220703125,
          "doc_string": "An additive group homomorphism sends 0 to 0.",
          "statement": "theorem is_add_group_hom.map_zero {α : Type u} {β : Type v} [add_group α] [add_group β] {f : α → β} (hf : is_add_group_hom f) : f 0 = 0"
        },
        {
          "sim_score": 0.6773562431335449,
          "doc_string": "Additive group homomorphisms preserve integer scaling.",
          "statement": "theorem map_zsmul {G : Type u_6} {H : Type u_7} {F : Type u_8} [add_group G] [subtraction_monoid H] [add_monoid_hom_class F G H] (f : F) (n : ℤ) (g : G) : ⇑f (n • g) = n • ⇑f g"
        },
        {
          "sim_score": 0.6773562431335449,
          "doc_string": "Additive group homomorphisms preserve integer scaling.",
          "statement": "theorem add_monoid_hom.map_zsmul {α : Type u_1} {β : Type u_2} [add_group α] [subtraction_monoid β] (f : α →+ β) (g : α) (n : ℤ) : ⇑f (n • g) = n • ⇑f g"
        }
      ],
      "codex_time": 4.650995299016358,
      "search_time": 1.4669762930134311,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem rat.injective_Add_hom_of_injective_Nat_hom⦃α⦄{α : type u} [AddGroup α] (F : ℚ →+ α) : Function.Injective (λ x : ℚ, ⇑F (↑x : ℚ)) → F = 0 ",
      "theorem AddGroup.Nat_Abs_of_hom_of_Dvd{α : type u} {β : type v} [AddGroup α] [AddGroup β]    {F : α →+ β} (hF : F 0 = 0) (hD : surjective F) (h : β) : Nat_Abs (↥(F h) : ℤ) ∣ ↥h ",
      "theorem Subtype.Coe_injective$(P : ℚ → Prop) [_AddGroup_hom (Coe : (Σ A : ℚ, P A) → ℚ)] {q : ℚ} : ∀  r S, Coe r = Coe S → r = S ",
      "theorem AddMonoid_hom.Map_Cantor_rational_Embedding_trivial'{α : type u_5} {β : type u_6} [AddGroup α] [AddMonoid β] (F : α →+ β) [_AddGroup_hom F] : ⇑F (Cantor_rational_Embedding r) = ⇑F r ",
      "theorem _AddGroup_hom_of_injection_Int{α : type u_1} [AddCommGroup α] {F : α →ₗ[ℚ] ℤ} (hF : Function.Injective F) : _AddGroup_hom F "
    ],
    "answer": "theorem hom_rat_Z_trivial (f : ℚ → ℤ) : IsAddGroupHom f →  ∀ x: ℚ, f x = 0 "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "hom_rat_Z_trivial",
      "main_prompt": "Any homomorphism from the additive group of rational numbers to `ℤ` is trivial",
      "prompt": "Natural language version: \"Any homomorphism from the additive group of rational numbers to `ℤ` is trivial\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 7.417343595996499,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem AddCommGroup.Mul_Inv_cancel_Left (x : ℚ ) : x * x⁻¹ = 1 ",
      "theorem q_hom_to_Z_special (φ : ℚ → ℤ) (h : Function._Monoid_hom φ) : Function.Ker φ = {0} ",
      "theorem q_to_Z__trivial {F : ℚ → ℤ} [_Group_hom F] : ∀ q : ℚ, F q = 0 ",
      "theorem Nat_lang : (ℚ, +) →* (ℤ, +) ",
      "theorem q_to_Z_hom__trivial (F : ℚ → ℤ) (h : ∀ q : ℚ, F(q + q) = F q + F q) : F = λ q : ℚ, 0 "
    ],
    "answer": "theorem hom_rat_Z_trivial (f : ℚ → ℤ) : IsAddGroupHom f →  ∀ x: ℚ, f x = 0 "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "fin_int_domain_ring_is_field",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"Every finite division ring is a field.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "Every finite division ring is a field.",
      "codex_time": 5.7241555280052125,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Finite_DivisionRing__Field (D : type*) [DivisionRing D] (hD :  Fintype. Card D < ℕ.omega) : Field D ",
      "theorem Finite_DivisionRing__Field (F : type*) [DivisionRing F] [Fintype F]:  Field F ",
      "theorem Finite_DivisionRing__Field (R : type*) [_root.Finite_dimensional R] [DivisionRing R]:  Field R ",
      "theorem Finite_DivisionRing__Field (A : type*) [DivisionRing A] (hA : Fintype A) :  _Field A ",
      "theorem DivisionRing.Finite.Field (D : type*) [DivisionRing D] [Fintype D] : Field D "
    ],
    "answer": "theorem fin_int_domain_ring_is_field {R : Type _} [Ringₓ R][IsDomain R] [Finite R] : Field R "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "fin_int_domain_ring_is_field",
      "main_prompt": "Every finite division ring is a field.",
      "prompt": "Natural language version: \"A subfield is closed under division.\" Translate the natural language version to a Lean mathlib version:\n theorem subfield.div_mem{K : Type u} [field K] (s : subfield K) {x y : K} :\nx ∈ s → y ∈ s → x / y ∈ s := \n\nNatural language version: \"A division_ring is one-dimensional as a vector space over itself.\" Translate the natural language version to a Lean mathlib version:\n theorem finite_dimensional.finrank_self(K : Type u) [division_ring K] :\nfinite_dimensional.finrank K K = 1 := \n\nNatural language version: \"An intermediate field is closed under division.\" Translate the natural language version to a Lean mathlib version:\n theorem intermediate_field.div_mem{K : Type u_1} {L : Type u_2} [field K] [field L] [algebra K L] (S : intermediate_field K L) {x y : L} :\nx ∈ S → y ∈ S → x / y ∈ S := \n\nNatural language version: \"A subfield is closed under multiplication.\" Translate the natural language version to a Lean mathlib version:\n theorem subfield.mul_mem{K : Type u} [field K] (s : subfield K) {x y : K} :\nx ∈ s → y ∈ s → x * y ∈ s := \n\nNatural language version: \"Every finite division ring is a field.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.6756068468093872,
          "doc_string": "A subfield is closed under division.",
          "statement": "theorem subfield.div_mem {K : Type u} [field K] (s : subfield K) {x y : K} : x ∈ s → y ∈ s → x / y ∈ s"
        },
        {
          "sim_score": 0.6545361280441284,
          "doc_string": "A division_ring is one-dimensional as a vector space over itself.",
          "statement": "theorem finite_dimensional.finrank_self (K : Type u) [division_ring K] : finite_dimensional.finrank K K = 1"
        },
        {
          "sim_score": 0.6345528364181519,
          "doc_string": "An intermediate field is closed under division.",
          "statement": "theorem intermediate_field.div_mem {K : Type u_1} {L : Type u_2} [field K] [field L] [algebra K L] (S : intermediate_field K L) {x y : L} : x ∈ S → y ∈ S → x / y ∈ S"
        },
        {
          "sim_score": 0.62082839012146,
          "doc_string": "A subfield is closed under multiplication.",
          "statement": "theorem subfield.mul_mem {K : Type u} [field K] (s : subfield K) {x y : K} : x ∈ s → y ∈ s → x * y ∈ s"
        }
      ],
      "codex_time": 5.01110641399282,
      "search_time": 1.5487677009950858,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Finite_dimensional.Fd__Field{K : type u} [Fd_Char_0 K] [DivisionRing K] [Finite_dimensional K K] : Field K ",
      "theorem Finite_DivisionRing.Field (K : type u) [DivisionRing K] [Fintype K] : _Field K ",
      "theorem Finite_DivisionRing.to_Field(K : type u) [DivisionRing K] (Card : Cardinal.{u}) [Fintype K] [Cardinal.Fintype K Card] : Field K ",
      "theorem Finite.DivisionRing__Field{K : type u} [DivisionRing K] [Fintype K] : _Field K ",
      "theorem _Field_DivisionRing_Finite : ∀ (K : type u) [DivisionRing K], @Finite_dimensional K _ → _Field K "
    ],
    "answer": "theorem fin_int_domain_ring_is_field {R : Type _} [Ringₓ R][IsDomain R] [Finite R] : Field R "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "fin_int_domain_ring_is_field",
      "main_prompt": "Every finite division ring is a field.",
      "prompt": "Natural language version: \"Every finite division ring is a field.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 12.83588868699735,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem every_Finite_DivisionRing__A_Field :   (∃ (k : type) [Fintype k] [DecidableEq k] [DivisionRing k]  (P : k ≃+* (k → k))  , True) →   True ",
      "theorem q5 : Π (D : type) [DivisionRing D] [Finite_dimensional D ℝ], _Field D  begin    intro D,    apply_instance  end Qed. (/ *) --In this case, we specify A _specific_ type of our choice, ℝ:  /- Lean:  variable (D : type)  variable [div_Ring : DivisionRing D]  variable [fdD : Finite_dimensional D ℝ]  goal _Field D -/ /- Mathlib:  variable (D : type)  variable [DivisionRing D]  variable [Finite_dimensional D",
      "theorem foo { 𝔽 : type } [ Field 𝔽 ] ( x y z : 𝔽 ) : x = 0 → y = 0 → z = 0 → x + y + z = 0 ",
      "theorem Field_of_DivisionRing (D : type*) [DivisionRing D] [Fintype D] : Field D ",
      "theorem Fin_div_Ring__Field [{α : type*} [div_Ring α] [Fintype α] [DecidableEq α]]: Field α  2. What did you do?     Well, at first i simply copied the structure definition of Finite division Ring. Then i wrote A natural Language theorem, which i then translated into Lean.  3. How long did it take?     i wrote the natural Language theorem on paper and then translated it into Lean. After that i went looking for theorems, but forgot them. So i wrote the theorem twice. -/   /-- A Finite division Ring  A commutative Ring where every non-Zero element  in"
    ],
    "answer": "theorem fin_int_domain_ring_is_field {R : Type _} [Ringₓ R][IsDomain R] [Finite R] : Field R "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "finite_space_compact",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"Every finite topological space is compact\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "Every finite topological space is compact",
      "codex_time": 6.303301887004636,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem IsCompact_of_Finite_Subset [TopologicalSpace α] {S : set α} (hs : Finite S) : IsCompact S ",
      "theorem Finite_IsCompact (x : type*) [TopologicalSpace x] (homeo : CompactSpace x)  (Fin : Fintype x) : CompactSpace x ",
      "theorem every_Finite_TopologicalSpace_IsCompact (x : type*) [TopologicalSpace x] (hXfinite :   (∃ n : ℕ, x ≃ Fin n)) : CompactSpace x ",
      "theorem Finite_TopologicalSpace_IsCompact {x}  [TopologicalSpace x] [Fintype x] :  CompactSpace x ",
      "theorem Finite_TopologicalSpace_IsCompact (x : type*) [TopologicalSpace x] (J : Finite_set x) :  IsCompact J "
    ],
    "answer": "theorem finite_space_compact {X : Type _}[TopologicalSpace X][Finite X] : CompactSpace X "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "finite_space_compact",
      "main_prompt": "Every finite topological space is compact",
      "prompt": "Natural language version: \"A set `s` is compact if for every open cover of `s`, there exists a finite subcover.\" Translate the natural language version to a Lean mathlib version:\n theorem is_compact_of_finite_subcover{α : Type u} [topological_space α] {s : set α} (h : ∀ {ι : Type u} (U : ι → set α), (∀ (i : ι), is_open (U i)) → (s ⊆ ⋃ (i : ι), U i) → (∃ (t : finset ι), s ⊆ ⋃ (i : ι) (H : i ∈ t), U i)) :\nis_compact s := \n\nNatural language version: \"For every open cover of a compact set, there exists a finite subcover.\" Translate the natural language version to a Lean mathlib version:\n theorem is_compact.elim_finite_subcover_image{α : Type u} {ι : Type u_1} [topological_space α] {s : set α} {b : set ι} {c : ι → set α} (hs : is_compact s) (hc₁ : ∀ (i : ι), i ∈ b → is_open (c i)) (hc₂ : s ⊆ ⋃ (i : ι) (H : i ∈ b), c i) :\n∃ (b' : set ι) (H : b' ⊆ b), b'.finite ∧ s ⊆ ⋃ (i : ι) (H : i ∈ b'), c i := \n\nNatural language version: \"For every open cover of a compact set, there exists a finite subcover.\" Translate the natural language version to a Lean mathlib version:\n theorem is_compact.elim_finite_subcover{α : Type u} [topological_space α] {s : set α} {ι : Type v} (hs : is_compact s) (U : ι → set α) (hUo : ∀ (i : ι), is_open (U i)) (hsU : s ⊆ ⋃ (i : ι), U i) :\n∃ (t : finset ι), s ⊆ ⋃ (i : ι) (H : i ∈ t), U i := \n\nNatural language version: \" A set `s` is compact if and only if for every open cover of `s`, there exists a finite subcover.\" Translate the natural language version to a Lean mathlib version:\n theorem is_compact_iff_finite_subcover{α : Type u} [topological_space α] {s : set α} :\nis_compact s ↔ ∀ {ι : Type u} (U : ι → set α), (∀ (i : ι), is_open (U i)) → (s ⊆ ⋃ (i : ι), U i) → (∃ (t : finset ι), s ⊆ ⋃ (i : ι) (H : i ∈ t), U i) := \n\nNatural language version: \"Every finite topological space is compact\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.676864504814148,
          "doc_string": "A set `s` is compact if for every open cover of `s`, there exists a finite subcover.",
          "statement": "theorem is_compact_of_finite_subcover {α : Type u} [topological_space α] {s : set α} (h : ∀ {ι : Type u} (U : ι → set α), (∀ (i : ι), is_open (U i)) → (s ⊆ ⋃ (i : ι), U i) → (∃ (t : finset ι), s ⊆ ⋃ (i : ι) (H : i ∈ t), U i)) : is_compact s"
        },
        {
          "sim_score": 0.6767893433570862,
          "doc_string": "For every open cover of a compact set, there exists a finite subcover.",
          "statement": "theorem is_compact.elim_finite_subcover_image {α : Type u} {ι : Type u_1} [topological_space α] {s : set α} {b : set ι} {c : ι → set α} (hs : is_compact s) (hc₁ : ∀ (i : ι), i ∈ b → is_open (c i)) (hc₂ : s ⊆ ⋃ (i : ι) (H : i ∈ b), c i) : ∃ (b' : set ι) (H : b' ⊆ b), b'.finite ∧ s ⊆ ⋃ (i : ι) (H : i ∈ b'), c i"
        },
        {
          "sim_score": 0.6767893433570862,
          "doc_string": "For every open cover of a compact set, there exists a finite subcover.",
          "statement": "theorem is_compact.elim_finite_subcover {α : Type u} [topological_space α] {s : set α} {ι : Type v} (hs : is_compact s) (U : ι → set α) (hUo : ∀ (i : ι), is_open (U i)) (hsU : s ⊆ ⋃ (i : ι), U i) : ∃ (t : finset ι), s ⊆ ⋃ (i : ι) (H : i ∈ t), U i"
        },
        {
          "sim_score": 0.65172278881073,
          "doc_string": " A set `s` is compact if and only if for every open cover of `s`, there exists a finite subcover.",
          "statement": "theorem is_compact_iff_finite_subcover {α : Type u} [topological_space α] {s : set α} : is_compact s ↔ ∀ {ι : Type u} (U : ι → set α), (∀ (i : ι), is_open (U i)) → (s ⊆ ⋃ (i : ι), U i) → (∃ (t : finset ι), s ⊆ ⋃ (i : ι) (H : i ∈ t), U i)"
        }
      ],
      "codex_time": 4.463791654998204,
      "search_time": 1.4327223660075106,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem IsCompact_Fintype{α : type u} [TopologicalSpace α] (h : Fintype α) : IsCompact α ",
      "theorem Finite_iff_IsCompact{α : type u} [TopologicalSpace α] : Finite α ↔ IsCompact α ",
      "theorem Finite.IsCompact{α : type u} [TopologicalSpace α] (h : Finite α) : IsCompact α ",
      "theorem Finset.Finite_TopologicalSpace_IsCompact {α : type*} [t : TopologicalSpace α]  (B : Finset α) : IsCompact B ",
      "theorem IsCompact.Finite{α : type*} [TopologicalSpace α] [Fintype α] : IsCompact α "
    ],
    "answer": "theorem finite_space_compact {X : Type _}[TopologicalSpace X][Finite X] : CompactSpace X "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "finite_space_compact",
      "main_prompt": "Every finite topological space is compact",
      "prompt": "Natural language version: \"Every finite topological space is compact\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 13.868266420002328,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Every_Finite_TopologicalSpace_IsCompact : ∀ x, Finite_TopologicalSpace x → IsCompact x ",
      "theorem _every_Finite_TopologicalSpace_IsCompact (x : type) [t : TopologicalSpace x] : IsCompact (Finite_topology x) ",
      "theorem my_theorem : ∀ x : type, Finite x → IsCompact x ",
      "theorem Finite_TopologicalSpace.IsCompact {x : type*} [TopologicalSpace x] (hfinite : Fintype x) : IsCompact x  You will have to use the NOTATION command, as well as the #check command to look Up what Nat and Fin Gt.  You will also have to use the examples in the Lean library to Find the various structures we use in mathlib.  Find all the declarations that could conceivably be imported. (Hint: mathlib  organized into directories.)   What  the type of the hypothesis hfinite   What  the type of the conclusion Comp   Use #check to look for the declaration of Fintype   Use #check to look",
      "theorem 1 : ∀ ( x : type ) [ TopologicalSpace x ], ∀ ( i : Finset x ), *  *   Definition:   theorem : ∀ (x : type) [TopologicalSpace x],   Finset x → exists F : x → ℕ, Bijective F ∧ CompactSpace (induced F)   theorem   (x : type) [TopologicalSpace x]  : Finset x → exists F : x → ℕ, Bijective F ∧ CompactSpace (induced F)   example { x : type } [ TopologicalSpace x ] ( F : x →  ℕ ) : bi"
    ],
    "answer": "theorem finite_space_compact {X : Type _}[TopologicalSpace X][Finite X] : CompactSpace X "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "freegroup_hopfian",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"Every surjective homomorphism from a finitely generated free group to itself is injective\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "Every surjective homomorphism from a finitely generated free group to itself is injective",
      "codex_time": 10.182387432985706,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem injection_of_surjective_homomorphism_of_finitely_generated_free (F : type*) [free_Group F] [Fintype F]  (hF : ∃ g : F → F, Function.LeftInverse g ∘ g = Id ∧ g ∘ Function.LeftInverse g = Id):  ∃ F : F → F, Function.LeftInverse F ∘ F = Id ∧ F ∘ Function.LeftInverse F = Id ",
      "theorem surjective_homomorphism_injective_free_Group (G : type*) [Group G] (n : ℕ) (F : free_Group n → G)  (hF : surjective F) :  injective F ",
      "theorem surjective_homomorphism_of_Fin_gen_free_Group_injects (G : type*) [Group G]  (F : G → G) (hF : ∃ n, F (λ i : Fin n, 1) = 1)  (h : ∀ g h, F (g * h) = F g * F h) :  (∀ A, ∃ x, F x = A) → inj_on F (set.Range F) ",
      "theorem injectivity_of_surjective_homomorphisms_from_fg_free_groups (G : type*) [Group G]  (hG_fg : Fintype (G)) (hG_free : free_Group G) (F : G →* G) :  Function.Surjective F → Function.Injective F ",
      "theorem surjective_homomorphism_of_finitely_generated_free_Group_to_itself__injective {F G: type*}  [Group F] [Group G] (F : F → G) (hF : Function.Surjective F)  (hFfin : Fintype.Card F < ℕ) (hGfin : Fintype.Card G < ℕ) :  Function.Injective F "
    ],
    "answer": "theorem freegroup_hopfian {α : Type _} [Finite α]: (f: FreeGroup α → FreeGroup α) → (IsGroupHom f) → f.Surjective → f.Injective "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "freegroup_hopfian",
      "main_prompt": "Every surjective homomorphism from a finitely generated free group to itself is injective",
      "prompt": "Natural language version: \"The canonical injection from the type to the free group is an injection.\" Translate the natural language version to a Lean mathlib version:\n theorem free_group.of_injective{α : Type u} :\nfunction.injective free_group.of := \n\nNatural language version: \"A group homomorphism is injective iff its kernel is trivial.\" Translate the natural language version to a Lean mathlib version:\n theorem is_group_hom.injective_iff{α : Type u} {β : Type v} [group α] [group β] {f : α → β} (hf : is_group_hom f) :\nfunction.injective f ↔ ∀ (a : α), f a = 1 → a = 1 := \n\nNatural language version: \" Two homomorphisms out of a free group are equal if they are equal on generators.  See note [partially-applied ext lemmas].\" Translate the natural language version to a Lean mathlib version:\n theorem free_group.ext_hom{α : Type u} {G : Type u_1} [group G] (f g : free_group α →* G) (h : ∀ (a : α), ⇑f (free_group.of a) = ⇑g (free_group.of a)) :\nf = g := \n\nNatural language version: \"The range of a surjective homomorphism from a nilpotent group is nilpotent\" Translate the natural language version to a Lean mathlib version:\n theorem nilpotent_of_surjective{G : Type u_1} [group G] {G' : Type u_2} [group G'] [h : group.is_nilpotent G] (f : G →* G') (hf : function.surjective ⇑f) :\ngroup.is_nilpotent G' := \n\nNatural language version: \"Every surjective homomorphism from a finitely generated free group to itself is injective\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.6470739841461182,
          "doc_string": "The canonical injection from the type to the free group is an injection.",
          "statement": "theorem free_group.of_injective {α : Type u} : function.injective free_group.of"
        },
        {
          "sim_score": 0.6357327103614807,
          "doc_string": "A group homomorphism is injective iff its kernel is trivial.",
          "statement": "theorem is_group_hom.injective_iff {α : Type u} {β : Type v} [group α] [group β] {f : α → β} (hf : is_group_hom f) : function.injective f ↔ ∀ (a : α), f a = 1 → a = 1"
        },
        {
          "sim_score": 0.5912977457046509,
          "doc_string": " Two homomorphisms out of a free group are equal if they are equal on generators.  See note [partially-applied ext lemmas].",
          "statement": "theorem free_group.ext_hom {α : Type u} {G : Type u_1} [group G] (f g : free_group α →* G) (h : ∀ (a : α), ⇑f (free_group.of a) = ⇑g (free_group.of a)) : f = g"
        },
        {
          "sim_score": 0.5858901143074036,
          "doc_string": "The range of a surjective homomorphism from a nilpotent group is nilpotent",
          "statement": "theorem nilpotent_of_surjective {G : Type u_1} [group G] {G' : Type u_2} [group G'] [h : group.is_nilpotent G] (f : G →* G') (hf : function.surjective ⇑f) : group.is_nilpotent G'"
        }
      ],
      "codex_time": 9.860292875993764,
      "search_time": 1.4647069969796576,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem free_Group.surjective_injective_of_finitely_generated{G : type u} [Fintype G] [Group G] {F : free_Group G →* free_Group G} (hF : Function.Surjective ⇑F) : Function.Injective ⇑F ",
      "theorem free_Group.surj_inj{α : type u} {G : type u_1} [Group G] (F : free_Group α →* G) (hF : Function.Surjective ⇑F) (h : free_Group._of_Fintype α) : Function.Injective ⇑F ",
      "theorem hom.injective_of_surjective_of_fg_free{α : type u} (G : type u_1) [Group G] {F : G →* G} (hF : Function.Surjective ⇑F) {g : free_Group α →* G} (hg : F = g) : Function.Injective ⇑g ",
      "theorem free_Group.injective_of_surjective [Fintype α] {G : type u} [Group G] (F : free_Group.π α →* G) : Function.Surjective F → Function.Injective F ",
      "theorem free_Group.surjective_injective{α : type u} (n : ℕ) (F : free_Group α →+* free_Group α) (hF : Function.Surjective ⇑F) : Function.Injective ⇑F "
    ],
    "answer": "theorem freegroup_hopfian {α : Type _} [Finite α]: (f: FreeGroup α → FreeGroup α) → (IsGroupHom f) → f.Surjective → f.Injective "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "freegroup_hopfian",
      "main_prompt": "Every surjective homomorphism from a finitely generated free group to itself is injective",
      "prompt": "Natural language version: \"Every surjective homomorphism from a finitely generated free group to itself is injective\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 12.162902993004536,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Nat_lang_to_lean : ∀ F : F → F , ( ∃ e j , ( e ⊕ j , e , j ) ≼ F ) → ( F",
      "theorem injective_hom_from_free_to_free (R : type) (S : Finset R) (k : R → R) (k_inj : Function.Injective k) (k0 : ∀ (r ∈ S), k r = r) : Function.Injective (λ r, k r) ",
      "theorem intial_clue (R : type *) [CommRing R] (m n : ℕ) (h : m ≤ n) (h1 : m ≠ 0) :   Finset.Range n.Succ ≤ Insert n (Finset.Range m) ",
      "theorem free_Group.surjective__injective {n: ℕ} (g : free_Group n)   (h : surjective g) : injective g ",
      "theorem every_surjective_hom_from_fg_free_Group_to_itself__injective {α : type*} [Fintype α] [DecidableEq α] [Fintype (α → α)] [DecidableEq (α → α)] (h : surjective (S : Multiset α → Multiset α)) : injective S "
    ],
    "answer": "theorem freegroup_hopfian {α : Type _} [Finite α]: (f: FreeGroup α → FreeGroup α) → (IsGroupHom f) → f.Surjective → f.Injective "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "polys_unbounded",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"Every polynomial of positive degree over reals is unbounded.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "Every polynomial of positive degree over reals is unbounded.",
      "codex_time": 14.27699931699317,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Poly__Unbounded (n : Nat) :  n > 0 → ∀ (P : Polynomial ℝ), ∀ x : ℝ, ∃ n : ℕ, Abs (P.Eval x) > n ",
      "theorem unboundedness_of_every_Polynomial (R : type*) [Ring R]  [_Real_Ring R] (n : ℕ) (h_n_not_0 : n ≠ 0) (P : Polynomial R) :  ∀ B : ℝ, ∃ A : ℝ, ∃ x : ℝ, P.Eval x = A * x ^ n + B ",
      "theorem Poly_of_positive_degree (x : type*) [Ring x] (F : Polynomial.x)  (hF_Pos : 0 < degree F) : ∀ x ∈ x, ∃ x' ∈ x, ∥x'∥ > ∥x∥ ",
      "theorem Poly_of_positive_degree__Unbounded (P : Polynomial ℝ) (hdeg : 0 < P.degree) :  ∀ x : ℝ, ∃ y : ℝ, P.Eval y = x ",
      "theorem Polynomial_of_positive_degree__Unbounded (n : ℕ) (P : Polynomial ℝ) (hn : degree P > 0):  ∀ A : ℝ, ∃ x : ℝ, ∃ δ : ℝ, x > -δ ∧ ∃ ε : ℝ, ε > 0 ∧ (∀ y : ℝ, Abs (y - A) < δ → Abs (P.Eval y - P.Eval A) > ε):  ∀ A : ℝ, ∃ x : ℝ, ∃ δ : ℝ, ("
    ],
    "answer": "theorem polys_unbounded (p: Polynomial ℝ) : p.degree > 0 → ∀ m: ℝ, ∃ x: ℝ, p.eval x  > m ∨ p.eval x < -m  "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "polys_unbounded",
      "main_prompt": "Every polynomial of positive degree over reals is unbounded.",
      "prompt": "Natural language version: \"An alternative statement of Weierstrass' theorem.  Every real-valued continuous function on `[a,b]` is a uniform limit of polynomials.\" Translate the natural language version to a Lean mathlib version:\n theorem continuous_map_mem_polynomial_functions_closure(a b : ℝ) (f : C(↥(set.Icc a b), ℝ)) :\nf ∈ (polynomial_functions (set.Icc a b)).topological_closure := \n\nNatural language version: \"The degree of a product of polynomials is at most the sum of the degrees, where the degree of the zero polynomial is ⊥.\" Translate the natural language version to a Lean mathlib version:\n theorem polynomial.degree_multiset_prod_le{R : Type u} [comm_semiring R] (t : multiset (polynomial R)) :\nt.prod.degree ≤ (multiset.map polynomial.degree t).sum := \n\nNatural language version: \"The **Weierstrass Approximation Theorem**: polynomials functions on `[a, b] ⊆ ℝ` are dense in `C([a,b],ℝ)`  (While we could deduce this as an application of the Stone-Weierstrass theorem, our proof of that relies on the fact that `abs` is in the closure of polynomials on `[-M, M]`, so we may as well get this done first.)\" Translate the natural language version to a Lean mathlib version:\n theorem polynomial_functions_closure_eq_top(a b : ℝ) :\n(polynomial_functions (set.Icc a b)).topological_closure = ⊤ := \n\nNatural language version: \" The monomial function `x^n` tends to `+∞` at `+∞` for any positive natural `n`. A version for positive real powers exists as `tendsto_rpow_at_top`.\" Translate the natural language version to a Lean mathlib version:\n theorem filter.tendsto_pow_at_top{α : Type u_3} [ordered_semiring α] {n : ℕ} (hn : 1 ≤ n) :\nfilter.tendsto (λ (x : α), x ^ n) filter.at_top filter.at_top := \n\nNatural language version: \"Every polynomial of positive degree over reals is unbounded.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.5175106525421143,
          "doc_string": "An alternative statement of Weierstrass' theorem.  Every real-valued continuous function on `[a,b]` is a uniform limit of polynomials.",
          "statement": "theorem continuous_map_mem_polynomial_functions_closure (a b : ℝ) (f : C(↥(set.Icc a b), ℝ)) : f ∈ (polynomial_functions (set.Icc a b)).topological_closure"
        },
        {
          "sim_score": 0.5134747624397278,
          "doc_string": "The degree of a product of polynomials is at most the sum of the degrees, where the degree of the zero polynomial is ⊥.",
          "statement": "theorem polynomial.degree_multiset_prod_le {R : Type u} [comm_semiring R] (t : multiset (polynomial R)) : t.prod.degree ≤ (multiset.map polynomial.degree t).sum"
        },
        {
          "sim_score": 0.5014804005622864,
          "doc_string": "The **Weierstrass Approximation Theorem**: polynomials functions on `[a, b] ⊆ ℝ` are dense in `C([a,b],ℝ)`  (While we could deduce this as an application of the Stone-Weierstrass theorem, our proof of that relies on the fact that `abs` is in the closure of polynomials on `[-M, M]`, so we may as well get this done first.)",
          "statement": "theorem polynomial_functions_closure_eq_top (a b : ℝ) : (polynomial_functions (set.Icc a b)).topological_closure = ⊤"
        },
        {
          "sim_score": 0.48543989658355713,
          "doc_string": " The monomial function `x^n` tends to `+∞` at `+∞` for any positive natural `n`. A version for positive real powers exists as `tendsto_rpow_at_top`.",
          "statement": "theorem filter.tendsto_pow_at_top {α : Type u_3} [ordered_semiring α] {n : ℕ} (hn : 1 ≤ n) : filter.tendsto (λ (x : α), x ^ n) filter.at_top filter.at_top"
        }
      ],
      "codex_time": 6.2306809650035575,
      "search_time": 1.434766952006612,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem _bounded_Polynomial_iff_degree_LE_Zero(R : type u_1) [Linear_ordered_Field R] (t : Polynomial R) : _bounded ((@Polynomial.Eval _ _ R) t) ↔ Polynomial.degree t ≤ 0 ",
      "theorem Unbounded_of_degree_Pos{R : type u} [nonzero_CommRing R] {F : type*} [Field F] (A : Polynomial R) (h : Polynomial.degree A > 0) : ∃C : ℚ, C > 0 ∧ ∀x:Polynomial R, ∀B : F, Polynomial.Eval₂ A x B ≤ C ",
      "theorem Polynomial.Unbounded_of_degree_Pos{R : type u} [discrete_Field R] {P : Polynomial R} (hp0 : P.degree > 0) : ∀ x : R, ∃ y : R, x < y ∧ P y ≠ 0 ",
      "theorem Unbounded_Polynomial_of_degree_Pos (F : Polynomial ℝ) {n : ℕ} (hn : 0 < n) : Unbounded (λ (x : ℝ), F.Eval x) ",
      "theorem Ne_top_then_supr_not_IsLub{α : type u} [TopologicalSpace α] [completely_Lattice α] (A : β) (F : β → α) : ¬ IsLub (Supr F) (F '' set.Univ) "
    ],
    "answer": "theorem polys_unbounded (p: Polynomial ℝ) : p.degree > 0 → ∀ m: ℝ, ∃ x: ℝ, p.eval x  > m ∨ p.eval x < -m  "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "polys_unbounded",
      "main_prompt": "Every polynomial of positive degree over reals is unbounded.",
      "prompt": "Natural language version: \"Every polynomial of positive degree over reals is unbounded.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 10.618605050985934,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem C { α : type } [ CommRing α ] ( Polynomial : α → ℝ ) ( D : ℕ ) ( Hnonzero : ∀ x : α , 0 ≤ ( Polynomial x ) * ( Polynomial x ) )    ( hD : 0 < D ) : False ",
      "theorem nl_mathlib : ∀ n:ℕ, n>0 → (∃ x:ℝ, ∀ F:ℝ → ℝ, F.degree_LE n → (∃ y:ℝ, ¬ F y = 0)) ",
      "theorem Polynomial_cobounded (k : ℝ) : ∃ m, ∀ x, ∀P:ℕ → ℤ, ∀C:ℤ, (degree P ≥ k)  ∧ (P ≠ 0) → Nat.Find (λ n : ℕ, (Abs (Polynomial.Eval P x - C))  > m * (Abs (Polynomial.Eval P n - C))) nz  lemma Nat_Find_0_aux m C (h : C > -m) (h1 : C < m) :  ∀ n, Abs (m - C) < (Abs (nz - C))",
      "theorem Polynomial_Unbounded (P : Polynomial ℝ) (hp : P.degree > 0) :   ∃ (x : ℝ), ∀ (n : ℕ), Abs (P.Eval A) < n ",
      "theorem Polynomial_Unbounded (F : Polynomial ℝ) (hF : degree F > 0) : ∀ r : ℝ, ∃ x : ℝ, Abs (F.Eval x) > r "
    ],
    "answer": "theorem polys_unbounded (p: Polynomial ℝ) : p.degree > 0 → ∀ m: ℝ, ∃ x: ℝ, p.eval x  > m ∨ p.eval x < -m  "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "field_hom_inj_or_trivial",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"A homomorphism between fields is either injective or trivial.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "A homomorphism between fields is either injective or trivial.",
      "codex_time": 4.984231541980989,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Ring_hom_either_injective_or_trivial (F : type*) (G : type*) [Field F] [Field G]  (φ : F →+* G) (hφ : trivial_Ring_hom φ) : injective_Ring_hom φ ",
      "theorem injective.of_Ne_trivial_hom (F : α →ₗ[R] β) (x y : α)  (hx : F x ≠ 0) (hy : F y ≠ 0) (hxy : F (x + y) = 0):  x = 0 ∧ y = 0 ",
      "theorem Field_hom_surj_inj (k l : type*) [Field k] [Field l] (F : k → l)  (hF : _Ring_hom F) : ∃ g : l → k, _Ring_hom g ∧ ∀ x, F (g x) = x ",
      "theorem hom_between_fields_inj_or_trivial {F G : type*} [Field F] [Field G]  (F : F → G) [_Ring_hom F] (hF : F ≠ 0):  ∀ A B : F, (F A = F B) → (A = B) ",
      "theorem Field_hom_injective_or_trivial {α β : type*} [Field α] [Field β] (F : α → β) [_Ring_hom F] (S : set β) :  surjective F ∨ F '' S = ∅ "
    ],
    "answer": "theorem field_hom_inj_or_trivial {F F' : Type _} [Field F] [Field F'] : ∀ ϕ : F →+* F', ϕ.toFun.Injective ∨ (∀ x : F, ϕ x = 0) "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "field_hom_inj_or_trivial",
      "main_prompt": "A homomorphism between fields is either injective or trivial.",
      "prompt": "Natural language version: \"A group homomorphism is injective iff its kernel is trivial.\" Translate the natural language version to a Lean mathlib version:\n theorem is_group_hom.injective_iff{α : Type u} {β : Type v} [group α] [group β] {f : α → β} (hf : is_group_hom f) :\nfunction.injective f ↔ ∀ (a : α), f a = 1 → a = 1 := \n\nNatural language version: \"If two ring homomorphisms are equal on a set, then they are equal on its subfield closure.\" Translate the natural language version to a Lean mathlib version:\n theorem ring_hom.eq_on_field_closure{K : Type u} {L : Type v} [field K] [field L] {f g : K →+* L} {s : set K} (h : set.eq_on ⇑f ⇑g s) :\nset.eq_on ⇑f ⇑g ↑(subfield.closure s) := \n\nNatural language version: \"A monomorphism is injective.\" Translate the natural language version to a Lean mathlib version:\n theorem linear_map.ker_eq_bot_of_cancel{R : Type u_1} {R₂ : Type u_3} {M : Type u_9} {M₂ : Type u_12} [semiring R] [semiring R₂] [add_comm_monoid M] [add_comm_monoid M₂] [module R M] [module R₂ M₂] {τ₁₂ : R →+* R₂} {f : M →ₛₗ[τ₁₂] M₂} (h : ∀ (u v : ↥(f.ker) →ₗ[R] M), f.comp u = f.comp v → u = v) :\nf.ker = ⊥ := \n\nNatural language version: \"An additive group homomorphism is injective if its kernel is trivial.\" Translate the natural language version to a Lean mathlib version:\n theorem is_add_group_hom.injective_iff{α : Type u} {β : Type v} [add_group α] [add_group β] {f : α → β} (hf : is_add_group_hom f) :\nfunction.injective f ↔ ∀ (a : α), f a = 0 → a = 0 := \n\nNatural language version: \"A homomorphism between fields is either injective or trivial.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.6868539452552795,
          "doc_string": "A group homomorphism is injective iff its kernel is trivial.",
          "statement": "theorem is_group_hom.injective_iff {α : Type u} {β : Type v} [group α] [group β] {f : α → β} (hf : is_group_hom f) : function.injective f ↔ ∀ (a : α), f a = 1 → a = 1"
        },
        {
          "sim_score": 0.6491084694862366,
          "doc_string": "If two ring homomorphisms are equal on a set, then they are equal on its subfield closure.",
          "statement": "theorem ring_hom.eq_on_field_closure {K : Type u} {L : Type v} [field K] [field L] {f g : K →+* L} {s : set K} (h : set.eq_on ⇑f ⇑g s) : set.eq_on ⇑f ⇑g ↑(subfield.closure s)"
        },
        {
          "sim_score": 0.6350299715995789,
          "doc_string": "A monomorphism is injective.",
          "statement": "theorem linear_map.ker_eq_bot_of_cancel {R : Type u_1} {R₂ : Type u_3} {M : Type u_9} {M₂ : Type u_12} [semiring R] [semiring R₂] [add_comm_monoid M] [add_comm_monoid M₂] [module R M] [module R₂ M₂] {τ₁₂ : R →+* R₂} {f : M →ₛₗ[τ₁₂] M₂} (h : ∀ (u v : ↥(f.ker) →ₗ[R] M), f.comp u = f.comp v → u = v) : f.ker = ⊥"
        },
        {
          "sim_score": 0.6343168020248413,
          "doc_string": "An additive group homomorphism is injective if its kernel is trivial.",
          "statement": "theorem is_add_group_hom.injective_iff {α : Type u} {β : Type v} [add_group α] [add_group β] {f : α → β} (hf : is_add_group_hom f) : function.injective f ↔ ∀ (a : α), f a = 0 → a = 0"
        }
      ],
      "codex_time": 8.774585238017607,
      "search_time": 1.4498521750210784,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Field_hom.injective_or_trivial{K : type u_25} [Field K] [Unit_Group K] {F : type v_111} [Field F] [Unit_Group F] {F : K →+* F} (hF : ∀ (A ∈ F), ∃ k : K, A = F k) : Function.Injective F ∨ Function.Surjective F ",
      "theorem Field.hom_Eq_One_of_injective{F₁ : type u_1} {F₂ : type u_4} [Field F₁] [Field F₂] {F : F₁ →+* F₂} (h : ∀ x y, F x = F y → x = y) : Function.Injective F ",
      "theorem Field.hom_injective_or_trivial{α : type u} {β : type v} [Field α] [Field β] {F : α →+* β} (hF : F ≠ 0) : Function.Injective F ∨ F = 0 ",
      "theorem AlgHom.injective_or_trivial{A : type u_1} {B : type u_2} {K : type u_3} [Field K] [integral_IsDomain A] [integral_IsDomain B] [Algebra K A] [Algebra K B] {σ : A →+* B} (h : σ._Algebra_Map) : Function.Injective (⇑σ) ∨ Function.Surjective (⇑σ) ",
      "theorem _Field_hom.injective_or_trivial{K : type u} {L : type v} [Field K] [Field L] {τ : K →+* L} (h : _Field_hom τ) : Function.Injective τ ∨ (∀ (A : K), A ≠ 0 → τ A = 0) "
    ],
    "answer": "theorem field_hom_inj_or_trivial {F F' : Type _} [Field F] [Field F'] : ∀ ϕ : F →+* F', ϕ.toFun.Injective ∨ (∀ x : F, ϕ x = 0) "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "field_hom_inj_or_trivial",
      "main_prompt": "A homomorphism between fields is either injective or trivial.",
      "prompt": "Natural language version: \"A homomorphism between fields is either injective or trivial.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 9.922715328983031,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem forall (F G : type*) [Field F] [Field G] (F : F → G) (m : set G) [_Subfield m],    injective F ∨ A1 (F) F (G) (set.injection F) m = ∅ ",
      "theorem foo (K L : type*) [Field K] [Field L] (F : K → L) (h1 : Function.Injective F) : F 1 = 1 ↔ F 0 = 0.  --3. --Natural Language version: \"If A Field has characteristic Zero, then it has A Subfield isomorphic to the rationals.\" Translate the natural Language version to A Lean mathlib version.  --4. --Natural Language version: \"If A Field has characteristic Zero, then it has no Nontrivial Finite subfields.\" Translate the natural Language version to A Lean mathlib version:   --5. --Natural Language version: \"A Field  Infinite",
      "theorem homomorphism_to_homomorphism (m : Monoid) (n : Monoid) (hmn : m ≃ n) : Monoid_hom m n ",
      "theorem nesbitt_step_1 (k₁ k₂ : type*) [Field k₁] [Field k₂] (F : k₁ → k₂) :  injective F ∨ ∀ A : k₁, F A = 0 ",
      "theorem Field_lemmas_IsBot_of_inject_hom {α : type v} [Field α] (F : integer → α) : injective F → F 0 = 0 "
    ],
    "answer": "theorem field_hom_inj_or_trivial {F F' : Type _} [Field F] [Field F'] : ∀ ϕ : F →+* F', ϕ.toFun.Injective ∨ (∀ x : F, ϕ x = 0) "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "noetherian_implies_ascending_chain_condition",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"Every ascending chain of sub-modules of a Noetherian module eventually stabilises.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "Every ascending chain of sub-modules of a Noetherian module eventually stabilises.",
      "codex_time": 10.734952466009418,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem exists_Equiv_LT_chain_stabilises (m : type*) [module ℤ m] (hM : noetherian ℤ m) (x Y : Submodule ℤ m) :  ∃ N : ℕ, ∀ m : ℕ, m ≥ N → x ≤ x.LT_Succ m ",
      "theorem eventually_stable_submodules (R : type*) [CommRing R]  (m : type*) [AddCommGroup m] [module R m] [noetherian_module R m]  (n : ℕ) (F : Fin n → Submodule R m)  (hF : ∀ i, F i ≤ F (i + 1)):  ∃ j : Fin n, ∀ i, F i ≤ F j ",
      "theorem noetherian_modules {R : type*}[CommRing R] (m : type*) [AddCommGroup m] [module R m]  (h_noeth : noetherian R) (h_ascending : ∀ (N : Submodule R m), ∃ S : ℕ, (∀ i : ℕ, i ≤ S → N ≤ ⟨N.carrier⟩^(i))):  ∃ S : ℕ, _strictly_ascending S ⟨m.carrier⟩ ",
      "theorem stabilise_ascending_chain_noetherian (R : type*) [CommRing R] [Nontrivial_Linear_OrderedSemiring R]  (A : type*) [AddCommGroup A] [module R A] (A : A) (n : ℕ) (hA : ∀ i : ℕ, i ≤ n → Ideal.Span R (Range (λ k : ℕ, A^k)))  (hn : n > 0) : ∃ n': ℕ, n' ≤ n ∧ ∀ n'' : ℕ, n' ≤ n'' → Ideal.Span R (Range (λ k :",
      "theorem every_ascending_chain_stabilises (m : type*) [AddCommGroup m] [module R m]  (hM : noetherian m) : ∀ n : ℕ, ∀ S : set (set m), LinearIndependent S →  (∀ i, S i ∈ S (i + 1)) → ∃ N, ∀ m > N, S m = S N "
    ],
    "answer": "theorem noetherian_implies_ascending_chain_condition {R M : Type _} [Ringₓ R] [AddCommMonoidₓ M] [Module R M] : IsNoetherian R M → ∀ (f : ℕ →o Submodule R M), ∃ n : ℕ, ∀ m : ℕ, n < m → f n = f m "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "noetherian_implies_ascending_chain_condition",
      "main_prompt": "Every ascending chain of sub-modules of a Noetherian module eventually stabilises.",
      "prompt": "Natural language version: \"A module is Noetherian iff every increasing chain of submodules stabilizes.\" Translate the natural language version to a Lean mathlib version:\n theorem monotone_stabilizes_iff_noetherian{R : Type u_1} {M : Type u_2} [semiring R] [add_comm_monoid M] [module R M] :\n(∀ (f : ℕ →o submodule R M), ∃ (n : ℕ), ∀ (m : ℕ), n ≤ m → ⇑f n = ⇑f m) ↔ is_noetherian R M := \n\nNatural language version: \"A module is Artinian iff every decreasing chain of submodules stabilizes.\" Translate the natural language version to a Lean mathlib version:\n theorem monotone_stabilizes_iff_artinian{R : Type u_1} {M : Type u_2} [ring R] [add_comm_group M] [module R M] :\n(∀ (f : ℕ →o (submodule R M)ᵒᵈ), ∃ (n : ℕ), ∀ (m : ℕ), n ≤ m → ⇑f n = ⇑f m) ↔ is_artinian R M := \n\nNatural language version: \"A generalization of the theorem that if `N` is a submodule of `M` and  `N` and `M / N` are both Noetherian, then `M` is Noetherian.\" Translate the natural language version to a Lean mathlib version:\n theorem well_founded_gt_exact_sequence{α : Type u_1} [lattice α] [is_modular_lattice α] {β : Type u_2} {γ : Type u_3} [preorder β] [partial_order γ] (h₁ : well_founded gt) (h₂ : well_founded gt) (K : α) (f₁ : β → α) (f₂ : α → β) (g₁ : γ → α) (g₂ : α → γ) (gci : galois_coinsertion f₁ f₂) (gi : galois_insertion g₂ g₁) (hf : ∀ (a : α), f₁ (f₂ a) = a ⊓ K) (hg : ∀ (a : α), g₁ (g₂ a) = a ⊔ K) :\nwell_founded gt := \n\nNatural language version: \"An R-module is Noetherian iff all its submodules are finitely-generated.\" Translate the natural language version to a Lean mathlib version:\n theorem is_noetherian_def{R : Type u_1} {M : Type u_2} [semiring R] [add_comm_monoid M] [module R M] :\nis_noetherian R M ↔ ∀ (s : submodule R M), s.fg := \n\nNatural language version: \"Every ascending chain of sub-modules of a Noetherian module eventually stabilises.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.9016166925430298,
          "doc_string": "A module is Noetherian iff every increasing chain of submodules stabilizes.",
          "statement": "theorem monotone_stabilizes_iff_noetherian {R : Type u_1} {M : Type u_2} [semiring R] [add_comm_monoid M] [module R M] : (∀ (f : ℕ →o submodule R M), ∃ (n : ℕ), ∀ (m : ℕ), n ≤ m → ⇑f n = ⇑f m) ↔ is_noetherian R M"
        },
        {
          "sim_score": 0.7797067761421204,
          "doc_string": "A module is Artinian iff every decreasing chain of submodules stabilizes.",
          "statement": "theorem monotone_stabilizes_iff_artinian {R : Type u_1} {M : Type u_2} [ring R] [add_comm_group M] [module R M] : (∀ (f : ℕ →o (submodule R M)ᵒᵈ), ∃ (n : ℕ), ∀ (m : ℕ), n ≤ m → ⇑f n = ⇑f m) ↔ is_artinian R M"
        },
        {
          "sim_score": 0.698657751083374,
          "doc_string": "A generalization of the theorem that if `N` is a submodule of `M` and  `N` and `M / N` are both Noetherian, then `M` is Noetherian.",
          "statement": "theorem well_founded_gt_exact_sequence {α : Type u_1} [lattice α] [is_modular_lattice α] {β : Type u_2} {γ : Type u_3} [preorder β] [partial_order γ] (h₁ : well_founded gt) (h₂ : well_founded gt) (K : α) (f₁ : β → α) (f₂ : α → β) (g₁ : γ → α) (g₂ : α → γ) (gci : galois_coinsertion f₁ f₂) (gi : galois_insertion g₂ g₁) (hf : ∀ (a : α), f₁ (f₂ a) = a ⊓ K) (hg : ∀ (a : α), g₁ (g₂ a) = a ⊔ K) : well_founded gt"
        },
        {
          "sim_score": 0.6557018756866455,
          "doc_string": "An R-module is Noetherian iff all its submodules are finitely-generated.",
          "statement": "theorem is_noetherian_def {R : Type u_1} {M : Type u_2} [semiring R] [add_comm_monoid M] [module R M] : is_noetherian R M ↔ ∀ (s : submodule R M), s.fg"
        }
      ],
      "codex_time": 10.447741597978165,
      "search_time": 1.4387332439946476,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Monotone_stabilises_noetherian{R : type u_1} {m : type u_2} [Semiring R] [AddCommMonoid m] [module R m] (h : IsNoetherian R m) : ∀ {F : ℕ → Submodule R m}, Monotone F → ∃ N : ℕ, ∀ {n : ℕ}, n ≥ N → F n = F (n + 1) ",
      "theorem final_Segment_of_nhds_of_IsNoetherian{α : type*} [complete_LinearOrder α] [TopologicalSpace α] (A : α) (x : ℝ⁺) (ha : IsNoetherian (𝕜 ⊛ 𝕜⁻¹) ℝ) : IsOpen (λ (t : α), x - (A - t)) ",
      "theorem IsNoetherian_iff'{R : type u_1} {m : type u_2} [Semiring R] [AddCommMonoid m] [module R m] : IsNoetherian R m ↔ ∀ (F : ℕ →o Submodule R m), ∃ (n : ℕ), ∀ (m : ℕ), n ≤ m → ⇑F n = ⇑F m ",
      "theorem noetherian_imp_stable_forall{R : type u_1} {m : type u_2} [CommRing R] [AddCommGroup m] [module R m] (h : IsNoetherian R m) (P q : type u_3) (F : m → P) (g : m → q) : ∀ (xs ys : set m), Finite xs → Finite ys → StrictMono gx → y ⊓ (x ⊔ K) = ∅ → Finite {m | m ∈ S} = False →  ∃ (m : m), (",
      "theorem noetherian_stabilization{R : type u_1} {m : type u_2} [ο : Semiring R] [n : AddCommMonoid m] [m : module R m] [noetherian : IsNoetherian R m] {F : ℕ →o Submodule R m} (hF : order_preserving F) : ∃ (n : ℕ), ∀ (m : ℕ), n ≤ m → F m = F n "
    ],
    "answer": "theorem noetherian_implies_ascending_chain_condition {R M : Type _} [Ringₓ R] [AddCommMonoidₓ M] [Module R M] : IsNoetherian R M → ∀ (f : ℕ →o Submodule R M), ∃ n : ℕ, ∀ m : ℕ, n < m → f n = f m "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "noetherian_implies_ascending_chain_condition",
      "main_prompt": "Every ascending chain of sub-modules of a Noetherian module eventually stabilises.",
      "prompt": "Natural language version: \"Every ascending chain of sub-modules of a Noetherian module eventually stabilises.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 6.7440393260039855,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Nat_lang : Π {m : type} [AddCommGroup m] [module R m], noetherian m → Π {N : Submodule m}, ∃ n, ∀ m ≥ n, N ≤ ⟨m, μ n⟩ ",
      "theorem lenstra ( m : type* ) [ AddCommGroup m ] [ module ℤ m ] [ IsNoetherian_Ring ℤ ] [ IsNoetherian_module ℤ m ] :  ∀ ( S : set m ) ( h : Submodule ℤ m S ),  ∃ S : ℕ, ∀ ( t : ℕ ), _Submodule t S → t ≤ S ",
      "theorem every_ascending_chain_of_submodules_eventually_stabilises : ∀ {m : module R} [Hi : noetherian m] (S),    ∀ (S' : Submodule R m),      S' ≤ S →      ∃ S_min S_min_LE, _Limit (λ S', S' ≤ S → S_min) S' S_min_LE ",
      "theorem noetherian_chain' (R : type) [CommRing R] [noetherian_Ring R] (m : type) [AddCommGroup m] [module R m] [noetherian_module R m] {i : type} (ℱ : i → Submodule R m) (h : chain ℱ) :      ∃ N : Submodule R m, ∀ (i : i), ℱ i ≤ N ",
      "theorem Nat_anti_noetherian_lemma (R : type) [Ring R] [Fintype R] (m : type) [AddCommGroup m] [module R m] : noetherian m → ∀ S t, _Submodule (Submodule.Closure t : Submodule m) S → _Submodule S (Submodule.Closure t) → S = Submodule.Closure t "
    ],
    "answer": "theorem noetherian_implies_ascending_chain_condition {R M : Type _} [Ringₓ R] [AddCommMonoidₓ M] [Module R M] : IsNoetherian R M → ∀ (f : ℕ →o Submodule R M), ∃ n : ℕ, ∀ m : ℕ, n < m → f n = f m "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "differentiability_implies_continuity",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"Differentiability implies continuity.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "Differentiability implies continuity.",
      "codex_time": 8.280181679991074,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Differentiable_Implies_Continuous (x : type*) [TopologicalSpace x] [NormedGroup x] [NormedSpace ℝ x] {x : x} {F : x → ℝ} (h_Diff : Differentiable F x) : Continuous F ",
      "theorem Differentiable_imp_Continuous {n : ℕ} {F : ℝ^n → ℝ} (hF : Differentiable F) :  Continuous F ",
      "theorem Diff_Continuous (x : type*) (n : ℕ) [Inhabited x] [TopologicalSpace x] [AddCommGroup x] [Vector_Space ℝ x] (F : x → ℝ) (x : x) (hF : Differentiable F x) :  Continuous F x ",
      "theorem Diff_imp_Cont (F : ℝ → ℝ) (hF : Differentiable F) : Continuous F ",
      "theorem Differentiable_Function_Continuous {Y : type*} [TopologicalSpace Y] {F : ℝ → Y}  (df : F Differentiable_at A) : Continuous F "
    ],
    "answer": "theorem differentiability_implies_continuity [TopologicalSpace ℝ] : ∀ f : ℝ → ℝ, Differentiable ℝ f → Continuous f "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "differentiability_implies_continuity",
      "main_prompt": "Differentiability implies continuity.",
      "prompt": "Natural language version: \"If a function is locally Lipschitz around a point, then it is continuous at this point.\" Translate the natural language version to a Lean mathlib version:\n theorem continuous_at_of_locally_lipschitz{α : Type u} {β : Type v} [pseudo_metric_space α] [pseudo_metric_space β] {f : α → β} {x : α} {r : ℝ} (hr : 0 < r) (K : ℝ) (h : ∀ (y : α), has_dist.dist y x < r → has_dist.dist (f y) (f x) ≤ K * has_dist.dist y x) :\ncontinuous_at f x := \n\nNatural language version: \" If a function is differentiable on the right of a point `a : ℝ`, continuous at `a`, and its derivative also converges at `a`, then `f` is differentiable on the right at `a`.\" Translate the natural language version to a Lean mathlib version:\n theorem has_deriv_at_interval_left_endpoint_of_tendsto_deriv{E : Type u_1} [normed_group E] [normed_space ℝ E] {s : set ℝ} {e : E} {a : ℝ} {f : ℝ → E} (f_diff : differentiable_on ℝ f s) (f_lim : continuous_within_at f s a) (hs : s ∈ nhds_within a (set.Ioi a)) (f_lim' : filter.tendsto (λ (x : ℝ), deriv f x) (nhds_within a (set.Ioi a)) (nhds e)) :\nhas_deriv_within_at f e (set.Ici a) a := \n\nNatural language version: \" If a function is differentiable on the left of a point `a : ℝ`, continuous at `a`, and its derivative also converges at `a`, then `f` is differentiable on the left at `a`.\" Translate the natural language version to a Lean mathlib version:\n theorem has_deriv_at_interval_right_endpoint_of_tendsto_deriv{E : Type u_1} [normed_group E] [normed_space ℝ E] {s : set ℝ} {e : E} {a : ℝ} {f : ℝ → E} (f_diff : differentiable_on ℝ f s) (f_lim : continuous_within_at f s a) (hs : s ∈ nhds_within a (set.Iio a)) (f_lim' : filter.tendsto (λ (x : ℝ), deriv f x) (nhds_within a (set.Iio a)) (nhds e)) :\nhas_deriv_within_at f e (set.Iic a) a := \n\nNatural language version: \"A Lipschitz function is continuous\" Translate the natural language version to a Lean mathlib version:\n theorem lipschitz_with.continuous{α : Type u} {β : Type v} [pseudo_emetric_space α] [pseudo_emetric_space β] {K : nnreal} {f : α → β} (hf : lipschitz_with K f) :\ncontinuous f := \n\nNatural language version: \"Differentiability implies continuity.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.6264367699623108,
          "doc_string": "If a function is locally Lipschitz around a point, then it is continuous at this point.",
          "statement": "theorem continuous_at_of_locally_lipschitz {α : Type u} {β : Type v} [pseudo_metric_space α] [pseudo_metric_space β] {f : α → β} {x : α} {r : ℝ} (hr : 0 < r) (K : ℝ) (h : ∀ (y : α), has_dist.dist y x < r → has_dist.dist (f y) (f x) ≤ K * has_dist.dist y x) : continuous_at f x"
        },
        {
          "sim_score": 0.6016049981117249,
          "doc_string": " If a function is differentiable on the right of a point `a : ℝ`, continuous at `a`, and its derivative also converges at `a`, then `f` is differentiable on the right at `a`.",
          "statement": "theorem has_deriv_at_interval_left_endpoint_of_tendsto_deriv {E : Type u_1} [normed_group E] [normed_space ℝ E] {s : set ℝ} {e : E} {a : ℝ} {f : ℝ → E} (f_diff : differentiable_on ℝ f s) (f_lim : continuous_within_at f s a) (hs : s ∈ nhds_within a (set.Ioi a)) (f_lim' : filter.tendsto (λ (x : ℝ), deriv f x) (nhds_within a (set.Ioi a)) (nhds e)) : has_deriv_within_at f e (set.Ici a) a"
        },
        {
          "sim_score": 0.5962556600570679,
          "doc_string": " If a function is differentiable on the left of a point `a : ℝ`, continuous at `a`, and its derivative also converges at `a`, then `f` is differentiable on the left at `a`.",
          "statement": "theorem has_deriv_at_interval_right_endpoint_of_tendsto_deriv {E : Type u_1} [normed_group E] [normed_space ℝ E] {s : set ℝ} {e : E} {a : ℝ} {f : ℝ → E} (f_diff : differentiable_on ℝ f s) (f_lim : continuous_within_at f s a) (hs : s ∈ nhds_within a (set.Iio a)) (f_lim' : filter.tendsto (λ (x : ℝ), deriv f x) (nhds_within a (set.Iio a)) (nhds e)) : has_deriv_within_at f e (set.Iic a) a"
        },
        {
          "sim_score": 0.5795943737030029,
          "doc_string": "A Lipschitz function is continuous",
          "statement": "theorem lipschitz_with.continuous {α : Type u} {β : Type v} [pseudo_emetric_space α] [pseudo_emetric_space β] {K : nnreal} {f : α → β} (hf : lipschitz_with K f) : continuous f"
        }
      ],
      "codex_time": 6.055595788988285,
      "search_time": 1.448735445010243,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Differentiable_at.Continuous_at{E : type u_1} [NormedGroup E] [NormedSpace ℝ E] {S : set ℝ} {x : ℝ} {F : ℝ → E} (h_dif_F : Differentiable_within_at ℝ F S x) : Continuous_within_at F S x ",
      "theorem Differentiable.Continuous{α : type u} {β : type v} [UniformSpace α] [TopologicalSpace β] {F : α → β} {A : α} (hF : Differentiable F A) : Continuous (F A) ",
      "theorem DifferentiableOn.Continuous_on{α : type u} {β : type v} [TopologicalSpace α] [TopologicalSpace β] {S : set α} {F : α → β} (h : DifferentiableOn α β F S) : Continuous_on S F ",
      "theorem Diff_Continuous{E : type u} [NormedGroup E] [NormedSpace ℝ E] {F : ℝ → E} (hF : Differentiable F) : Continuous F ",
      "theorem Differentiable_at.Continuous{F : ℝ → ℝ} {A : ℝ} (h : Differentiable_at F A) : Continuous_at F A "
    ],
    "answer": "theorem differentiability_implies_continuity [TopologicalSpace ℝ] : ∀ f : ℝ → ℝ, Differentiable ℝ f → Continuous f "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "differentiability_implies_continuity",
      "main_prompt": "Differentiability implies continuity.",
      "prompt": "Natural language version: \"Differentiability implies continuity.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 9.817274647997692,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Diff_Implies_Cont (F : ℝ → ℝ) : Differentiable F → Continuous F ",
      "theorem Diff_imp_Cont {F: ℝ → ℝ} {x: ℝ}: ∀ {C: ℝ → Prop} {n: ℕ}, cau_Seq C n F → C x → (∀ ε>0, ∃ δ>0, ∀ δ'∈C, |F F.Diff x δ' - F F.Diff x δ| < ε)  ",
      "theorem D_to_C (α) [NormedGroup α] [NormedSpace α] : diffable F → Continuous F ",
      "theorem Diff_impl_continuity (F : ℝ → ℝ) (x : ℝ) (h : _Differentiable_at F x) : Continuous (F) ",
      "theorem Diff_impl_Cont {F : ℝ → ℝ} {x : ℝ} (hx : _Differentiable_at F x) : Continuous_at F x "
    ],
    "answer": "theorem differentiability_implies_continuity [TopologicalSpace ℝ] : ∀ f : ℝ → ℝ, Differentiable ℝ f → Continuous f "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "angle_sum_pi",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"The angles of a triangle add up to two right angles.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "The angles of a triangle add up to two right angles.",
      "codex_time": 12.227333054994233,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Eq_Pi_angle_Sum (x y z : _angle x y z) :  x + y + z = 2*Pi ",
      "theorem Sum_of_angles_in_triangle__180 :  ∀ (A B C : ℝ) (A B C : ℝ),  C > 0 ∧ A > 0 ∧ B > 0 ∧ A + B + C = π ∧  A = asin(sin(B)*sin(C)/sin(A)) ∧  B = asin(sin(A)*sin(C)/sin(B)) ∧  C = asin(sin(A)*sin(B)/sin(C)) →  A + B = π - C ",
      "theorem angles_of_triangle_Add_Up_to_two_Right_angles (A B C : angle) :  A + B + C = sec (1/2) * π ",
      "theorem angs_Add_Eq_2_Right_angs (t : triangle) :  angle t.α + angle t.β + angle t.γ ≤ 2*Pi ",
      "theorem Sum_of_angles_of_triangle_Eq_two_Right_angles (A B C : ℝ) :  0 < A → 0 < B → 0 < C →  A + B + C = π "
    ],
    "answer": "theorem angle_sum_pi {p q r : EuclideanSpace ℝ (Finₓ 2)} : EuclideanGeometry.angle p q r + EuclideanGeometry.angle q r p + EuclideanGeometry.angle r p q = Real.pi "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "angle_sum_pi",
      "main_prompt": "The angles of a triangle add up to two right angles.",
      "prompt": "Natural language version: \" If the angle between two vectors is π, the angles between those vectors and a third vector add to π.\" Translate the natural language version to a Lean mathlib version:\n theorem inner_product_geometry.angle_add_angle_eq_pi_of_angle_eq_pi{V : Type u_1} [inner_product_space ℝ V] {x y : V} (z : V) (h : inner_product_geometry.angle x y = real.pi) :\ninner_product_geometry.angle x z + inner_product_geometry.angle y z = real.pi := \n\nNatural language version: \" Vertical Angles Theorem: angles opposite each other, formed by two intersecting straight lines, are equal.\" Translate the natural language version to a Lean mathlib version:\n theorem euclidean_geometry.angle_eq_angle_of_angle_eq_pi_of_angle_eq_pi{V : Type u_1} {P : Type u_2} [inner_product_space ℝ V] [metric_space P] [normed_add_torsor V P] {p1 p2 p3 p4 p5 : P} (hapc : euclidean_geometry.angle p1 p5 p3 = real.pi) (hbpd : euclidean_geometry.angle p2 p5 p4 = real.pi) :\neuclidean_geometry.angle p1 p5 p2 = euclidean_geometry.angle p3 p5 p4 := \n\nNatural language version: \" Given three nonzero vectors, adding the angles between them in cyclic order, with the second vector in each angle negated, results in π. If the vectors add to 0, this is a version of the sum of the angles of a triangle.\" Translate the natural language version to a Lean mathlib version:\n theorem orthonormal.oangle_add_cyc3_neg_right{V : Type u_1} [inner_product_space ℝ V] {b : basis (fin 2) ℝ V} (hb : orthonormal ℝ ⇑b) {x y z : V} (hx : x ≠ 0) (hy : y ≠ 0) (hz : z ≠ 0) :\nhb.oangle x (-y) + hb.oangle y (-z) + hb.oangle z (-x) = ↑real.pi := \n\nNatural language version: \" Given three nonzero vectors, adding the angles between them in cyclic order, with the second vector in each angle negated, results in π. If the vectors add to 0, this is a version of the sum of the angles of a triangle.\" Translate the natural language version to a Lean mathlib version:\n theorem orientation.oangle_add_cyc3_neg_right{V : Type u_1} [inner_product_space ℝ V] [hd2 : fact (finite_dimensional.finrank ℝ V = 2)] (o : orientation ℝ V (fin 2)) {x y z : V} (hx : x ≠ 0) (hy : y ≠ 0) (hz : z ≠ 0) :\no.oangle x (-y) + o.oangle y (-z) + o.oangle z (-x) = ↑real.pi := \n\nNatural language version: \"The angles of a triangle add up to two right angles.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.5743768215179443,
          "doc_string": " If the angle between two vectors is π, the angles between those vectors and a third vector add to π.",
          "statement": "theorem inner_product_geometry.angle_add_angle_eq_pi_of_angle_eq_pi {V : Type u_1} [inner_product_space ℝ V] {x y : V} (z : V) (h : inner_product_geometry.angle x y = real.pi) : inner_product_geometry.angle x z + inner_product_geometry.angle y z = real.pi"
        },
        {
          "sim_score": 0.5685725212097168,
          "doc_string": " Vertical Angles Theorem: angles opposite each other, formed by two intersecting straight lines, are equal.",
          "statement": "theorem euclidean_geometry.angle_eq_angle_of_angle_eq_pi_of_angle_eq_pi {V : Type u_1} {P : Type u_2} [inner_product_space ℝ V] [metric_space P] [normed_add_torsor V P] {p1 p2 p3 p4 p5 : P} (hapc : euclidean_geometry.angle p1 p5 p3 = real.pi) (hbpd : euclidean_geometry.angle p2 p5 p4 = real.pi) : euclidean_geometry.angle p1 p5 p2 = euclidean_geometry.angle p3 p5 p4"
        },
        {
          "sim_score": 0.5616596937179565,
          "doc_string": " Given three nonzero vectors, adding the angles between them in cyclic order, with the second vector in each angle negated, results in π. If the vectors add to 0, this is a version of the sum of the angles of a triangle.",
          "statement": "theorem orthonormal.oangle_add_cyc3_neg_right {V : Type u_1} [inner_product_space ℝ V] {b : basis (fin 2) ℝ V} (hb : orthonormal ℝ ⇑b) {x y z : V} (hx : x ≠ 0) (hy : y ≠ 0) (hz : z ≠ 0) : hb.oangle x (-y) + hb.oangle y (-z) + hb.oangle z (-x) = ↑real.pi"
        },
        {
          "sim_score": 0.5616596937179565,
          "doc_string": " Given three nonzero vectors, adding the angles between them in cyclic order, with the second vector in each angle negated, results in π. If the vectors add to 0, this is a version of the sum of the angles of a triangle.",
          "statement": "theorem orientation.oangle_add_cyc3_neg_right {V : Type u_1} [inner_product_space ℝ V] [hd2 : fact (finite_dimensional.finrank ℝ V = 2)] (o : orientation ℝ V (fin 2)) {x y z : V} (hx : x ≠ 0) (hy : y ≠ 0) (hz : z ≠ 0) : o.oangle x (-y) + o.oangle y (-z) + o.oangle z (-x) = ↑real.pi"
        }
      ],
      "codex_time": 6.071401793014957,
      "search_time": 1.4386507550079841,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem euclidean_triangle.angle_Add_angle_Add_angle_Eq_twopi{v : type u_1} {P : type u_2} [InnerProductSpace ℝ v] [MetricSpace P] [NormedAddTorsor v P] {P1 P2 P3 : P} (ha : euclidean_triangle._angle P1 P2 P3) : EuclideanGeometry.angle P1 P2 P3 + EuclideanGeometry.angle P2 P3 P1 + EuclideanGeometry.angle P3 P1 P2 =",
      "theorem EuclideanGeometry.angle_Sum_Eq2Pi{v : type u_1} {P : type u_2} [InnerProductSpace ℝ v] [MetricSpace P] [NormedAddTorsor v P] {P1 P2 P3 : P} : EuclideanGeometry.angle P1 P2 P3 + EuclideanGeometry.angle P2 P3 P1 + EuclideanGeometry.angle P3 P1 P2 = 2 * Real.Pi ",
      "theorem EuclideanGeometry.triangle_angle_Sum_Eq_tworightangles(α β γ : ℝ) (hα : α < Real.Pi) (hβ : β < Real.Pi) (hγ : γ < Real.Pi) (hab : α + β > Real.Pi) (hbc : β + γ > Real.Pi) : α + β + γ = ↑(Real.Int 2) * ↑Real.Pi ",
      "theorem InnerProductGeometry.angle_Sum_of_LinearIndependent{v : type u_1} [InnerProductSpace ℝ v] [hD2 : Fact (Finite_dimensional.finrank ℝ v = 2)] (x y : v) (hxy : 0 < inner_Product x y) (hx : x ≠ 0) (hy : y ≠ 0) : InnerProductGeometry.angle x y + InnerProductGeometry.angle y x + InnerProductGeometry.angle x y = 2 * ↑Real.Pi ",
      "theorem EuclideanGeometry.angle_Sum_of_triangle {P : type u_1} [MetricSpace P] [NormedAddTorsor ℝ P] [Finite_dimensional ℝ P] [NormedField ℝ] {P1 P2 P3 : P} : EuclideanGeometry.angle P1 P2 P3 + EuclideanGeometry.angle P2 P3 P1 + EuclideanGeometry.angle P3 P1 P2 = 2 * (↑Real.Pi : ℝ) "
    ],
    "answer": "theorem angle_sum_pi {p q r : EuclideanSpace ℝ (Finₓ 2)} : EuclideanGeometry.angle p q r + EuclideanGeometry.angle q r p + EuclideanGeometry.angle r p q = Real.pi "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "angle_sum_pi",
      "main_prompt": "The angles of a triangle add up to two right angles.",
      "prompt": "Natural language version: \"The angles of a triangle add up to two right angles.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 7.33505270499154,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem angles_of_A_triangle_Add_Up_to_two_Right_angles_mathlib : --begin⬆      ∀ (A B C : point),      sangle A B C + sangle B C A + sangle C A B = π ",
      "theorem not_congr' : ∀ (A B C : mynat), A + B = C ↔ (B = A ∧ A = C) ∨ (A = B ∧ B ≠ C) ",
      "theorem angles_of_A_triangle_are_180 : ∀ (x : ℝ) (y : ℝ) (z : ℝ),      x + y + z = 180 →      x = 90 ∧ y = 90 ∧ z = 90 ",
      "theorem : ∀ (Γ : triangle) (hΓ : isosceles Γ),   Add_Eq_two_Right_angles (angles_of Γ) ",
      "theorem triangle_angle_Sum : ∀ (A B C : angle), A + B + C = 2 * uangle "
    ],
    "answer": "theorem angle_sum_pi {p q r : EuclideanSpace ℝ (Finₓ 2)} : EuclideanGeometry.angle p q r + EuclideanGeometry.angle q r p + EuclideanGeometry.angle r p q = Real.pi "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "goldbach",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"Every positive even integer can be written as the sum of two primes.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "Every positive even integer can be written as the sum of two primes.",
      "codex_time": 4.532673840003554,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem goldbach (n : ℕ) (hn : 0 < n) (hn_Even : n % 2 = 0) :      ∃ (P1 P2 : ℕ), Prime P1 ∧ Prime P2 ∧ P1 + P2 = n ",
      "theorem every_positive_Even_integer__the_Sum_of_two_Primes {P : ℕ → Prop} (hP : ∀ n, ∃ k, P k) :  ∀ m, Even m → 0 < m → ∃ P q, P P ∧ P q ∧ P + q = m ",
      "theorem positive_Even_Int__Sum_of_two_Primes (k : ℕ) (hk : k > 0) (heven : 2 ∣ k) :  ∃ P q : ℕ, Prime P ∧ Prime q ∧ P + q = k ",
      "theorem positive_Even__Sum_of_Primes (n : ℕ) (hn : n > 0 ∧ Nat.Even n) :  ∃ P q : Primes, P + q = n ",
      "theorem goldbach'S_conjecture (n : ℕ) (h : n > 0 ∧ Even n) :  ∃ P q : ℕ, P.Prime ∧ q.Prime ∧ P + q = n "
    ],
    "answer": "theorem goldbach : ∀ n : ℕ, n > 0 → Even n → ∃ p q : ℕ, Prime p → Prime q → n = p + q "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "goldbach",
      "main_prompt": "Every positive even integer can be written as the sum of two primes.",
      "prompt": "Natural language version: \"A prime `p` satisfies `p % 2 = 1` if and only if `p ≠ 2`.\" Translate the natural language version to a Lean mathlib version:\n theorem nat.prime.mod_two_eq_one_iff_ne_two{p : ℕ} [fact (nat.prime p)] :\np % 2 = 1 ↔ p ≠ 2 := \n\nNatural language version: \"If `p` is a prime factor of `a` then `p` is also a prime factor of `a * b` for any `b > 0`\" Translate the natural language version to a Lean mathlib version:\n theorem nat.mem_factors_mul_left{p a b : ℕ} (hpa : p ∈ a.factors) (hb : b ≠ 0) :\np ∈ (a * b).factors := \n\nNatural language version: \"Every nonzero natural number has a unique prime factorization\" Translate the natural language version to a Lean mathlib version:\n theorem nat.factorization_inj :\nset.inj_on nat.factorization {x : ℕ | x ≠ 0} := \n\nNatural language version: \"The only numbers with empty prime factorization are `0` and `1`\" Translate the natural language version to a Lean mathlib version:\n theorem nat.factorization_eq_zero_iff(n : ℕ) :\nn.factorization = 0 ↔ n = 0 ∨ n = 1 := \n\nNatural language version: \"Every positive even integer can be written as the sum of two primes.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.5331833362579346,
          "doc_string": "A prime `p` satisfies `p % 2 = 1` if and only if `p ≠ 2`.",
          "statement": "theorem nat.prime.mod_two_eq_one_iff_ne_two {p : ℕ} [fact (nat.prime p)] : p % 2 = 1 ↔ p ≠ 2"
        },
        {
          "sim_score": 0.48720940947532654,
          "doc_string": "If `p` is a prime factor of `a` then `p` is also a prime factor of `a * b` for any `b > 0`",
          "statement": "theorem nat.mem_factors_mul_left {p a b : ℕ} (hpa : p ∈ a.factors) (hb : b ≠ 0) : p ∈ (a * b).factors"
        },
        {
          "sim_score": 0.48647668957710266,
          "doc_string": "Every nonzero natural number has a unique prime factorization",
          "statement": "theorem nat.factorization_inj  : set.inj_on nat.factorization {x : ℕ | x ≠ 0}"
        },
        {
          "sim_score": 0.4829321801662445,
          "doc_string": "The only numbers with empty prime factorization are `0` and `1`",
          "statement": "theorem nat.factorization_eq_zero_iff (n : ℕ) : n.factorization = 0 ↔ n = 0 ∨ n = 1"
        }
      ],
      "codex_time": 8.58134113199776,
      "search_time": 1.4401543280109763,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Nat.Sum_two_Primes_of_Even{P q : ℕ}(h : P ≠ 0 ∧ q ≠ 0 ∧ (P + q) % 2 = 0) : ∃ n : ℕ, n > 1 ∧ Odd n ∧ ∃ m : ℕ, m > 1 ∧ Odd m ",
      "theorem Even_Sum_Primes(n : ℕ) (h : n % 2 = 0) : ∃(P q : ℕ), Nat.Prime P ∧ Nat.Prime q ∧ (P + q = n) ",
      "theorem Sum_two_Primes(n : ℕ) (h : n > 0) (hn : 2 ∣ n) : ∃ A B : ℕ, A.Prime ∧ B.Prime ∧ A + B = n ",
      "theorem Nat.two_Primes_Sum_Even{n : ℕ} (hn : 2 ∣ n) : ∃ P q: ℕ, (P + q = n) ∧ (P.Prime ∧ q.Prime) ",
      "theorem euler_phi.Gt_two_Prime_Sum(n : ℕ) (hnp : n > 2) (h : Nat.Even n) : ∃ P q : ℕ, P + q = n ∧ Nat.Prime P   Natural Language version: \"For any `n > 1`, there are infinitely many Primes congruent to `1` modulo `n`.\"  Translate the natural Language version to A Lean mathlib version:  theorem IsCoprime.infinitely_many_Gt_One(n : ℕ) (hn : n > 1) : ∀ N : ℕ, ∃ P :"
    ],
    "answer": "theorem goldbach : ∀ n : ℕ, n > 0 → Even n → ∃ p q : ℕ, Prime p → Prime q → n = p + q "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "goldbach",
      "main_prompt": "Every positive even integer can be written as the sum of two primes.",
      "prompt": "Natural language version: \"Every positive even integer can be written as the sum of two primes.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 9.160091544996249,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Even_sub_Primes : ∀ (n k) (h : 4 <= n), ∃ P q, n = P + q ∧ Prime P ∧ Prime q ",
      "theorem Goldbach_conjecture: ∀n: ℕ, 2 ≤ n → Even n → ∃ (P q: ℕ), Prime P ∧ Prime q ∧ P + q = n ",
      "theorem Goldbach : ∀ n : ℕ, n > 2 → ∃ P q : ℕ, n = P + q ∧ Prime P ∧ Prime q .   Theorem: A sentence  provable in Lean mathlib if and only if it  True.  \"Theorem\" means mathematical theorem, not something that holds in Lean mathlib.  It  True both for True/False sentences, and for provable/unprovable ones.  If you think x  True, but Lean mathlib doesn't agree with you, that'S A bug.  If you think Lean mathlib proves x, but it doesn't, that'S A bug.  Amie  trippin' if",
      "theorem Even_Sum_of_Primes : ∀ n : ℕ, Even n → ∃ P q : ℕ, n = P+q ∧ Prime P ∧ Prime q ",
      "theorem Goldbach_conjecture ( n : ℕ ) : Even n → ∃ x y : ℕ , ( Prime x ) ∧ ( Prime y ) ∧ ( x + y = n ) "
    ],
    "answer": "theorem goldbach : ∀ n : ℕ, n > 0 → Even n → ∃ p q : ℕ, Prime p → Prime q → n = p + q "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "cayley_hamilton",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"Every matrix satisfies its own characteristic polynomial.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "Every matrix satisfies its own characteristic polynomial.",
      "codex_time": 9.570525988994632,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem cayley_hamilton (n : ℕ) (A : Matrix (Fin n) (Fin n) ℂ) :  A ^ n + ∑ i in Finset.Range n, (Nat.choose i n : ℂ) * (-1) ^ i * A ^ i * (A ^ n).det() = 0 ",
      "theorem Char_Poly_Eval_self (n : ℕ) (A : Matrix n n ℂ) :  Char_Poly A (λ x, x) = 0 ",
      "theorem Char_Poly_Eq_det (n : ℕ) (A : Matrix (Fin n) (Fin n) ℤ) :  det A = characteristic_Polynomial A.ToFun ",
      "theorem alg_Char_Poly_self (K : type*) [Field K] (n : ℕ)  (A : Matrix K n n) : ∀ (x : K), alg_Char_Poly A x = A - x • 1 ",
      "theorem Char_Poly__FixedBy_mat (n : ℕ) (A : Matrix (Fin n) (Fin n) ℤ) :  det (λ (x : Fin n) (y : Fin n), A x y - x * (1 : ℤ)) = 0 "
    ],
    "answer": "theorem cayley_hamilton {R : Type _} [CommRingₓ R] {n : Type _} [DecidableEq n] [Fintype n] (M : Matrix n n R) : (Polynomial.aeval M) M.charpoly = 0 "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "cayley_hamilton",
      "main_prompt": "Every matrix satisfies its own characteristic polynomial.",
      "prompt": "Natural language version: \" The **Cayley-Hamilton Theorem**, that the characteristic polynomial of a linear map, applied to the linear map itself, is zero.  See `matrix.aeval_self_charpoly` for the equivalent statement about matrices.\" Translate the natural language version to a Lean mathlib version:\n theorem linear_map.aeval_self_charpoly{R : Type u} {M : Type v} [comm_ring R] [nontrivial R] [add_comm_group M] [module R M] [module.free R M] [module.finite R M] (f : M →ₗ[R] M) :\n⇑(polynomial.aeval f) f.charpoly = 0 := \n\nNatural language version: \"The **Cayley-Hamilton Theorem**, that the characteristic polynomial of a matrix, applied to the matrix itself, is zero.  This holds over any commutative ring.  See `linear_map.aeval_self_charpoly` for the equivalent statement about endomorphisms.\" Translate the natural language version to a Lean mathlib version:\n theorem matrix.aeval_self_charpoly{R : Type u} [comm_ring R] {n : Type w} [decidable_eq n] [fintype n] (M : matrix n n R) :\n⇑(polynomial.aeval M) M.charpoly = 0 := \n\nNatural language version: \"`charpoly f` is the characteristic polynomial of the matrix of `f` in any basis.\" Translate the natural language version to a Lean mathlib version:\n theorem linear_map.charpoly_to_matrix{R : Type u} {M : Type v} [comm_ring R] [nontrivial R] [add_comm_group M] [module R M] [module.free R M] [module.finite R M] (f : M →ₗ[R] M) {ι : Type w} [fintype ι] (b : basis ι R M) :\n(⇑(linear_map.to_matrix b b) f).charpoly = f.charpoly := \n\nNatural language version: \" Any matrix polynomial `p` is equivalent under evaluation to `p %ₘ M.charpoly`; that is, `p` is equivalent to a polynomial with degree less than the dimension of the matrix.\" Translate the natural language version to a Lean mathlib version:\n theorem matrix.aeval_eq_aeval_mod_charpoly{R : Type u} [comm_ring R] {n : Type v} [decidable_eq n] [fintype n] (M : matrix n n R) (p : polynomial R) :\n⇑(polynomial.aeval M) p = ⇑(polynomial.aeval M) (p %ₘ M.charpoly) := \n\nNatural language version: \"Every matrix satisfies its own characteristic polynomial.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.7601779699325562,
          "doc_string": " The **Cayley-Hamilton Theorem**, that the characteristic polynomial of a linear map, applied to the linear map itself, is zero.  See `matrix.aeval_self_charpoly` for the equivalent statement about matrices.",
          "statement": "theorem linear_map.aeval_self_charpoly {R : Type u} {M : Type v} [comm_ring R] [nontrivial R] [add_comm_group M] [module R M] [module.free R M] [module.finite R M] (f : M →ₗ[R] M) : ⇑(polynomial.aeval f) f.charpoly = 0"
        },
        {
          "sim_score": 0.6756272315979004,
          "doc_string": "The **Cayley-Hamilton Theorem**, that the characteristic polynomial of a matrix, applied to the matrix itself, is zero.  This holds over any commutative ring.  See `linear_map.aeval_self_charpoly` for the equivalent statement about endomorphisms.",
          "statement": "theorem matrix.aeval_self_charpoly {R : Type u} [comm_ring R] {n : Type w} [decidable_eq n] [fintype n] (M : matrix n n R) : ⇑(polynomial.aeval M) M.charpoly = 0"
        },
        {
          "sim_score": 0.5441092252731323,
          "doc_string": "`charpoly f` is the characteristic polynomial of the matrix of `f` in any basis.",
          "statement": "theorem linear_map.charpoly_to_matrix {R : Type u} {M : Type v} [comm_ring R] [nontrivial R] [add_comm_group M] [module R M] [module.free R M] [module.finite R M] (f : M →ₗ[R] M) {ι : Type w} [fintype ι] (b : basis ι R M) : (⇑(linear_map.to_matrix b b) f).charpoly = f.charpoly"
        },
        {
          "sim_score": 0.5268839001655579,
          "doc_string": " Any matrix polynomial `p` is equivalent under evaluation to `p %ₘ M.charpoly`; that is, `p` is equivalent to a polynomial with degree less than the dimension of the matrix.",
          "statement": "theorem matrix.aeval_eq_aeval_mod_charpoly {R : Type u} [comm_ring R] {n : Type v} [decidable_eq n] [fintype n] (M : matrix n n R) (p : polynomial R) : ⇑(polynomial.aeval M) p = ⇑(polynomial.aeval M) (p %ₘ M.charpoly)"
        }
      ],
      "codex_time": 7.653844293992734,
      "search_time": 1.4370572980260476,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem charpoly_Eq_Map_aeval{R : type u} [CommRing R] {n : type v} [DecidableEq n] [Fintype n] (m : Matrix n n R) : m.charpoly = ⇑(Polynomial.aeval m) m.charpoly ",
      "theorem Matrix.charpoly_Eq_aeval_charpoly{R : type u} [CommRing R] {n : type v} [DecidableEq n] [Fintype n] (m : Matrix n n R) : ⇑(Polynomial.aeval m) m.charpoly = 0 ",
      "theorem Matrix.holomorphic_charpoly{R : type u} [CommRing R] {n : type v} [DecidableEq n] [Fintype n] (m : Matrix n n R) : Polynomial.Eval₂ (λ A B, B = A) m.charpoly m ",
      "theorem Matrix.roots_charpoly{R : type u} [CommRing R] {n : type v} [DecidableEq n] [Fintype n] (m : Matrix n n R) : m.roots m.charpoly = Univ ",
      "theorem Matrix.aeval_Char_Poly{R : type u} [CommRing R] {n : type v} [DecidableEq n] [Fintype n] (m : Matrix n n R) : ⇑(Polynomial.aeval m) m.charpoly = 0 "
    ],
    "answer": "theorem cayley_hamilton {R : Type _} [CommRingₓ R] {n : Type _} [DecidableEq n] [Fintype n] (M : Matrix n n R) : (Polynomial.aeval M) M.charpoly = 0 "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "cayley_hamilton",
      "main_prompt": "Every matrix satisfies its own characteristic polynomial.",
      "prompt": "Natural language version: \"Every matrix satisfies its own characteristic polynomial.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 13.23858738099807,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem characteristic : ∀ A : Matrix k α, A^((Fin_dim_module α)) - pdet A × 1 = 0 ",
      "theorem Ne8 : ∀ (A : Nat → Nat → ℝ → Prop),     (∀n : Nat, ∀ A : Fin (1 + 1), (∃ x : ℝ, A n (A.val.val + 1) x ∧ (1 + 1 ≤ n) ∧ A n A x)) →      (∀(n m : ℕ), (1 + 1 ≤ n) → ∃ x : ℝ, A n n x ∧ A n m x)  ",
      "theorem every_Matrix_satisfies_its_own_Char_Poly :    ∀ A : Matrix (Fin (n+1) → Fin (n+1)) ℚ,  Char_Poly A A = 0  #check (Matrix.Char_Poly_apply A A)  #print Matrix.Char_Poly_apply #check @Char_Matrix_apply  #check (Char_Matrix_apply _ A A)  #print Char_Matrix_apply #print matrixAlgebra  #check (Char_Matrix A A)  constant k : ℚ  #check (k • A)  ",
      "theorem Char_Poly_self : ∀ (A : Matrix (Fin D) (Fin D) α), Char_Poly A A = 0 ",
      "theorem character_Polynomial_of_Matrix_Fact (A : Matrix (Fin m) (Fin n) ℂ) :  character_Polynomial A =   end Matrix_theory  -- module type over A Ring structure Matrix (m n : type) [Fintype m] [Fintype n] [Ring α] "
    ],
    "answer": "theorem cayley_hamilton {R : Type _} [CommRingₓ R] {n : Type _} [DecidableEq n] [Fintype n] (M : Matrix n n R) : (Polynomial.aeval M) M.charpoly = 0 "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "sqrt_of_irrat_irrat",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"The square root of an irrational number is irrational.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "The square root of an irrational number is irrational.",
      "codex_time": 11.154727493005339,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem sqrt_Irrational_Irrational (α : ℝ) (hirr : ¬ _rat α) :  ¬ _rat (sqrt α) ",
      "theorem sqrt_Irrational_Irrational (A : ℚ) (ha : A ≥ 0) (ha_Irrational : A ∉ set.Range (Nat.cast : ℕ → ℚ)) :  √A ∉ set.Range (Nat.cast : ℕ → ℚ) ",
      "theorem sqrt_Irrational__Irrational (x : ℝ) (hx : ¬∃ z : ℚ, z * z = x) :  ¬∃ z : ℚ, z * z = sqrt x ",
      "theorem sqrt_Irrational_of_Irrational (A : ℚ) : ¬A.Irrational →   sqrt A.to_rat.Num.ToNat.nroot 2 < A.to_rat.den.Nat_Abs.nroot 2 →   sqrt A.to_rat.Num.ToNat.nroot 2.to_Real.nroot 2 < A.to_rat.den.Nat_Abs.nroot 2.to_Real.nroot 2 ",
      "theorem Irrational_sqrt (x : ℚ) (hx_irr : ¬ ∃ A B : ℚ, x = A*A/B/B) :  ¬ ∃ A B : ℚ, √x = A/B "
    ],
    "answer": "theorem sqrt_of_irrat_irrat (x : ℝ) : Irrational x → Irrational (Real.sqrt x) "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "sqrt_of_irrat_irrat",
      "main_prompt": "The square root of an irrational number is irrational.",
      "prompt": "Natural language version: \"A transcendental real number is irrational.\" Translate the natural language version to a Lean mathlib version:\n theorem transcendental.irrational{r : ℝ} (tr : transcendental ℚ r) :\nirrational r := \n\nNatural language version: \" If `x^n`, `n > 0`, is integer and is not the `n`-th power of an integer, then `x` is irrational.\" Translate the natural language version to a Lean mathlib version:\n theorem irrational_nrt_of_notint_nrt{x : ℝ} (n : ℕ) (m : ℤ) (hxr : x ^ n = ↑m) (hv : ¬∃ (y : ℤ), x = ↑y) (hnpos : 0 < n) :\nirrational x := \n\nNatural language version: \"**Irrationality of the Square Root of 2**\" Translate the natural language version to a Lean mathlib version:\n theorem irrational_sqrt_two :\nirrational (real.sqrt 2) := \n\nNatural language version: \"The natural square root is at most the real square root\" Translate the natural language version to a Lean mathlib version:\n theorem real.nat_sqrt_le_real_sqrt{a : ℕ} :\n↑(nat.sqrt a) ≤ real.sqrt ↑a := \n\nNatural language version: \"The square root of an irrational number is irrational.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.70249342918396,
          "doc_string": "A transcendental real number is irrational.",
          "statement": "theorem transcendental.irrational {r : ℝ} (tr : transcendental ℚ r) : irrational r"
        },
        {
          "sim_score": 0.6819822192192078,
          "doc_string": " If `x^n`, `n > 0`, is integer and is not the `n`-th power of an integer, then `x` is irrational.",
          "statement": "theorem irrational_nrt_of_notint_nrt {x : ℝ} (n : ℕ) (m : ℤ) (hxr : x ^ n = ↑m) (hv : ¬∃ (y : ℤ), x = ↑y) (hnpos : 0 < n) : irrational x"
        },
        {
          "sim_score": 0.6707029938697815,
          "doc_string": "**Irrationality of the Square Root of 2**",
          "statement": "theorem irrational_sqrt_two  : irrational (real.sqrt 2)"
        },
        {
          "sim_score": 0.6412547826766968,
          "doc_string": "The natural square root is at most the real square root",
          "statement": "theorem real.nat_sqrt_le_real_sqrt {a : ℕ} : ↑(nat.sqrt a) ≤ real.sqrt ↑a"
        }
      ],
      "codex_time": 5.11982105000061,
      "search_time": 1.439350487984484,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Irrational_of_Irrational_sqrt{x : ℝ} (hxir : Irrational x) (hxpos : 0 < x) : Irrational (Real.sqrt x) ",
      "theorem Irrational_sqrt{x : ℝ} (n : ℤ) (hxr : x ^ 2 = ↑n) (hv : ¬∃ (y : ℕ), x = ↑y) : Irrational x ",
      "theorem Irrational_sqrt_of_Irrational{r : ℝ} : Irrational r → Irrational (Real.sqrt r) ",
      "theorem Irrational_Real.sqrt{x : ℝ} (h : Irrational x) : Irrational (Real.sqrt x) ",
      "theorem Irrational_sqrt_of_Irrational{r : ℝ} (irr : Irrational r) : Irrational (Real.sqrt r) "
    ],
    "answer": "theorem sqrt_of_irrat_irrat (x : ℝ) : Irrational x → Irrational (Real.sqrt x) "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "sqrt_of_irrat_irrat",
      "main_prompt": "The square root of an irrational number is irrational.",
      "prompt": "Natural language version: \"The square root of an irrational number is irrational.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 7.438059111009352,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem SqrtIsIrrational (x : ℚ) [hx : ¬ _rational (sqrt x)] : ¬ _rational x ",
      "theorem sqrt_Irrational' : ∀ {x : ℝ}, ∃ n : ℝ, x = n ^ 2 →        ∃ (y : ℝ), _Irrational y → y = sqrt x ",
      "theorem Irrational_sqrt_Irrational : ∀ ⦃A:ℚ₊⦄, ¬A.Irrational → ∃ B : ℚ₊, B * B = A ",
      "theorem q.sqrt_Irrational (x : Nnreal) (hx : ¬(∃y : Nnreal, x^2 = y)) : ¬(∃y : Nnreal, y^2 = x) ",
      "theorem square_root_Irrational_of_Irrational {α : type*} [Decidable_Linear_ordered_Field α]   {C : α} (hc : 0 < C) (hc_irr : µIrrational C) : µIrrational (sqrt C) "
    ],
    "answer": "theorem sqrt_of_irrat_irrat (x : ℝ) : Irrational x → Irrational (Real.sqrt x) "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "sq_even_implies_num_even",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"If the square of a number is even, the number itself is even.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "If the square of a number is even, the number itself is even.",
      "codex_time": 2.712991086009424,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Even_squared_Implies_Even (x : ℤ) : x^2 % 2 = 0 → x % 2 = 0 ",
      "theorem power_two_Even_then_Even (n : ℕ) (h : (2*n)^2 ∈ Even) :  2*n ∈ Even ",
      "theorem square_Even_of_Even (n : ℤ) (hn : n ^ 2 % 2 = 0) : n % 2 = 0 ",
      "theorem square_Even_iff_Even (m : ℕ) :  (∃ n, m = n * n) ↔ ∃ n, m = 2 * n ",
      "theorem Even_square_of_Even__Even (n : ℕ) (hn : ¬ Even n ∨ Even (n ^ 2)) :    Even n "
    ],
    "answer": "theorem sq_even_implies_num_even : ∀ n : ℕ, Even (n^2) → Even n "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "sq_even_implies_num_even",
      "main_prompt": "If the square of a number is even, the number itself is even.",
      "prompt": "Natural language version: \" If `m` and `n` are natural numbers, then the natural number `m^n` is even if and only if `m` is even and `n` is positive.\" Translate the natural language version to a Lean mathlib version:\n theorem nat.even_pow{m n : ℕ} :\neven (m ^ n) ↔ even m ∧ n ≠ 0 := \n\nNatural language version: \"The sum of two squares is zero iff both elements are zero.\" Translate the natural language version to a Lean mathlib version:\n theorem mul_self_add_mul_self_eq_zero{α : Type u} [linear_ordered_ring α] {x y : α} :\nx * x + y * y = 0 ↔ x = 0 ∧ y = 0 := \n\nNatural language version: \"In a finite field of odd characteristic, not every element is a square.\" Translate the natural language version to a Lean mathlib version:\n theorem finite_field.exists_nonsquare{F : Type u_3} [field F] [fintype F] (hF : ring_char F ≠ 2) :\n∃ (a : F), ¬is_square a := \n\nNatural language version: \" To show a property is true on the even or odd part, it suffices to show it is true on the scalars or vectors (respectively), closed under addition, and under left-multiplication by a pair of vectors.\" Translate the natural language version to a Lean mathlib version:\n theorem clifford_algebra.even_odd_induction{R : Type u_1} {M : Type u_2} [comm_ring R] [add_comm_group M] [module R M] (Q : quadratic_form R M) (n : zmod 2) {P : Π (x : clifford_algebra Q), x ∈ clifford_algebra.even_odd Q n → Prop} (hr : ∀ (v : clifford_algebra Q) (h : v ∈ (clifford_algebra.ι Q).range ^ n.val), P v _) (hadd : ∀ {x y : clifford_algebra Q} {hx : x ∈ clifford_algebra.even_odd Q n} {hy : y ∈ clifford_algebra.even_odd Q n}, P x hx → P y hy → P (x + y) _) (hιι_mul : ∀ (m₁ m₂ : M) {x : clifford_algebra Q} {hx : x ∈ clifford_algebra.even_odd Q n}, P x hx → P (⇑(clifford_algebra.ι Q) m₁ * ⇑(clifford_algebra.ι Q) m₂ * x) _) (x : clifford_algebra Q) (hx : x ∈ clifford_algebra.even_odd Q n) :\nP x hx := \n\nNatural language version: \"If the square of a number is even, the number itself is even.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.5731519460678101,
          "doc_string": " If `m` and `n` are natural numbers, then the natural number `m^n` is even if and only if `m` is even and `n` is positive.",
          "statement": "theorem nat.even_pow {m n : ℕ} : even (m ^ n) ↔ even m ∧ n ≠ 0"
        },
        {
          "sim_score": 0.5604414343833923,
          "doc_string": "The sum of two squares is zero iff both elements are zero.",
          "statement": "theorem mul_self_add_mul_self_eq_zero {α : Type u} [linear_ordered_ring α] {x y : α} : x * x + y * y = 0 ↔ x = 0 ∧ y = 0"
        },
        {
          "sim_score": 0.546607255935669,
          "doc_string": "In a finite field of odd characteristic, not every element is a square.",
          "statement": "theorem finite_field.exists_nonsquare {F : Type u_3} [field F] [fintype F] (hF : ring_char F ≠ 2) : ∃ (a : F), ¬is_square a"
        },
        {
          "sim_score": 0.5101829767227173,
          "doc_string": " To show a property is true on the even or odd part, it suffices to show it is true on the scalars or vectors (respectively), closed under addition, and under left-multiplication by a pair of vectors.",
          "statement": "theorem clifford_algebra.even_odd_induction {R : Type u_1} {M : Type u_2} [comm_ring R] [add_comm_group M] [module R M] (Q : quadratic_form R M) (n : zmod 2) {P : Π (x : clifford_algebra Q), x ∈ clifford_algebra.even_odd Q n → Prop} (hr : ∀ (v : clifford_algebra Q) (h : v ∈ (clifford_algebra.ι Q).range ^ n.val), P v _) (hadd : ∀ {x y : clifford_algebra Q} {hx : x ∈ clifford_algebra.even_odd Q n} {hy : y ∈ clifford_algebra.even_odd Q n}, P x hx → P y hy → P (x + y) _) (hιι_mul : ∀ (m₁ m₂ : M) {x : clifford_algebra Q} {hx : x ∈ clifford_algebra.even_odd Q n}, P x hx → P (⇑(clifford_algebra.ι Q) m₁ * ⇑(clifford_algebra.ι Q) m₂ * x) _) (x : clifford_algebra Q) (hx : x ∈ clifford_algebra.even_odd Q n) : P x hx"
        }
      ],
      "codex_time": 7.674899434990948,
      "search_time": 1.4398203900200315,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Nat.Even_Mul_self{α : type u_1} [has_Mul α] [Linear_ordered_cancel_CommMonoid_with_Zero α] [has_One α] (m : ℕ) (h : Even (m * m)) : Even m ",
      "theorem Even_Mul_self{α : type u_3} [Semiring α] (A : α) : Even (A * A) → Even A ",
      "theorem Mul_self_Even{m: ℕ} : Even (m * m) → Even m ",
      "theorem _Even_iff_Odd{R : type u_1} [integral_IsDomain R] {A : R} : _Even (A * A) ↔ _Even A ",
      "theorem Int.Even_Mul_Even_iff_Even_Pow_two{n : ℤ} : Even (n * n) ↔ Even n "
    ],
    "answer": "theorem sq_even_implies_num_even : ∀ n : ℕ, Even (n^2) → Even n "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "sq_even_implies_num_even",
      "main_prompt": "If the square of a number is even, the number itself is even.",
      "prompt": "Natural language version: \"If the square of a number is even, the number itself is even.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 14.016098413005238,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Even_square_Even : ∀ (n : ℕ), Even (n^2) → Even n    This  the format that Lean expects:         input          → output  We can check if the theorem  True by using #check:  #check Even_square_Even  ∀ (n : ℕ), Even (n^2) → Even n   \"The type checking algorithm can verify this statement  True.\"    Let'S define A tactic_ that proves simple arithmetic equivalences.  What'S A tactic_? A tactic_  any Function from the type tactic_ to the type tactic_ . In general, tactics take A goal  or tactic_ state and produce A new goal or tactic_",
      "theorem Even_square (n : ℕ) (h : n ^ 2 % 2 = 0) : n % 2 = 0 ",
      "theorem q11 : ∀ A : ℤ, A ^ 2 % 2 = 0 → A % 2 = 0 ",
      "theorem if_Even_square_Even {n : ℕ} : Even (n*n) → Even n ",
      "theorem Nat.Even_sq_of_Even (n : ℕ) (h : Even n) : Even (n*n) "
    ],
    "answer": "theorem sq_even_implies_num_even : ∀ n : ℕ, Even (n^2) → Even n "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "finite_ring_prime_implies_maximal",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"In a finite commutative ring, all prime ideals are maximal.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "In a finite commutative ring, all prime ideals are maximal.",
      "codex_time": 7.243054295016918,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Prime_ideals_Maximal [Fintype R] [CommRing R] (P : Ideal R) (hp : Prime P) :  IsMaximal P ",
      "theorem Prime_ideals_in_Finite_CommRing_are_Maximal (R : type*) [CommRing R] (fR : Fintype R)  (i : Ideal R) (hI : Prime i) : IsMaximal i ",
      "theorem Primes_are_Maximal_in_Finite_rings (R : type*) [integral_IsDomain R] [Fintype R] [Fintype {r : R | r ≠ 1}] :  ∀ i : Ideal R, Prime_Ideal i → Maximal_Ideal i ",
      "theorem Prime_Ideal_in_Finite_Ring_Maximal (R : type*) [CommRing R] (r : Cardinal.{u})  (hR : r.Finite) (P : Ideal R) [hp : Prime P] : Ideal.IsMaximal P ",
      "theorem Prime_ideals_in_Finite_Ring_are_Maximal (F : type*) [CommRing F]  (h1 : F ≠ (0 : F)) (h2 : ∃ n : ℕ, ∀ x : F, x^n = 0) :  ∀ P : Ideal F,  Prime P → Maximal P "
    ],
    "answer": "theorem finite_ring_prime_implies_maximal {R : Type _} [CommRingₓ R] [Fintype R] : ∀ (Idl : Ideal R), Idl.IsPrime → Idl.IsMaximal "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "finite_ring_prime_implies_maximal",
      "main_prompt": "In a finite commutative ring, all prime ideals are maximal.",
      "prompt": "Natural language version: \"When a ring is not a field, the maximal ideals are nontrivial.\" Translate the natural language version to a Lean mathlib version:\n theorem ring.ne_bot_of_is_maximal_of_not_is_field{R : Type u_1} [comm_ring R] [nontrivial R] {M : ideal R} (max : M.is_maximal) (not_field : ¬is_field R) :\nM ≠ ⊥ := \n\nNatural language version: \"Krull's theorem: a nontrivial ring has a maximal ideal.\" Translate the natural language version to a Lean mathlib version:\n theorem ideal.exists_maximal(α : Type u) [semiring α] [nontrivial α] :\n∃ (M : ideal α), M.is_maximal := \n\nNatural language version: \"If P is not properly contained in any maximal ideal then it is not properly contained  in any proper ideal\" Translate the natural language version to a Lean mathlib version:\n theorem ideal.maximal_of_no_maximal{R : Type u} [semiring R] {P : ideal R} (hmax : ∀ (m : ideal R), P < m → ¬m.is_maximal) (J : ideal R) (hPJ : P < J) :\nJ = ⊤ := \n\nNatural language version: \"If `P` is a prime ideal of `R`, then `P.R[x]` is a prime ideal of `R[x]`.\" Translate the natural language version to a Lean mathlib version:\n theorem ideal.is_prime_map_C_of_is_prime{R : Type u} [comm_ring R] {P : ideal R} (H : P.is_prime) :\n(ideal.map polynomial.C P).is_prime := \n\nNatural language version: \"In a finite commutative ring, all prime ideals are maximal.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.6932713389396667,
          "doc_string": "When a ring is not a field, the maximal ideals are nontrivial.",
          "statement": "theorem ring.ne_bot_of_is_maximal_of_not_is_field {R : Type u_1} [comm_ring R] [nontrivial R] {M : ideal R} (max : M.is_maximal) (not_field : ¬is_field R) : M ≠ ⊥"
        },
        {
          "sim_score": 0.6569143533706665,
          "doc_string": "Krull's theorem: a nontrivial ring has a maximal ideal.",
          "statement": "theorem ideal.exists_maximal (α : Type u) [semiring α] [nontrivial α] : ∃ (M : ideal α), M.is_maximal"
        },
        {
          "sim_score": 0.6307719945907593,
          "doc_string": "If P is not properly contained in any maximal ideal then it is not properly contained  in any proper ideal",
          "statement": "theorem ideal.maximal_of_no_maximal {R : Type u} [semiring R] {P : ideal R} (hmax : ∀ (m : ideal R), P < m → ¬m.is_maximal) (J : ideal R) (hPJ : P < J) : J = ⊤"
        },
        {
          "sim_score": 0.6226035356521606,
          "doc_string": "If `P` is a prime ideal of `R`, then `P.R[x]` is a prime ideal of `R[x]`.",
          "statement": "theorem ideal.is_prime_map_C_of_is_prime {R : Type u} [comm_ring R] {P : ideal R} (H : P.is_prime) : (ideal.map polynomial.C P).is_prime"
        }
      ],
      "codex_time": 6.540205358003732,
      "search_time": 1.450567267020233,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Prime.IsMaximal{R : type u_1} [CommRing R] (hfin : Fintype R.carrier) :  @IsMaximal (Ideal R) _ _ _ _ Prime ",
      "theorem Prime_of_Finite_CommRing(α : type u) [CommRing α] [Fintype α] {P : Ideal α} (h : P.Prime) : P.IsMaximal ",
      "theorem _Field_of_Finite_Prime{R : type u} [CommRing R] (hfin : Fintype R) (hP : Ideal.Prime R) : _Field R ",
      "theorem Ideal.Prime_of_Finite_Implies_Maximal{R : type u_1} [CommRing R] [Fintype R] {i : Ideal R} (hip : i.Prime) : i.IsMaximal ",
      "theorem Finite_CommRing._Field_of_no_Prime : ∀ (α : type u_1) (Finite_CommRing : Finite_CommRing α), ¬∃ (P : Ideal α), P.Prime → _Field α "
    ],
    "answer": "theorem finite_ring_prime_implies_maximal {R : Type _} [CommRingₓ R] [Fintype R] : ∀ (Idl : Ideal R), Idl.IsPrime → Idl.IsMaximal "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "finite_ring_prime_implies_maximal",
      "main_prompt": "In a finite commutative ring, all prime ideals are maximal.",
      "prompt": "Natural language version: \"In a finite commutative ring, all prime ideals are maximal.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 8.42631383400294,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem nonzero_of_Finite_CommRing_of_Prime_IsMaximal ( R : type ) [ CommRing R ] [ Fintype R ] :    ∀ P : Prime_Ideal R, P.Maximal ",
      "theorem fcring__pid (x : type) [Ring x] : Prime_Ideal (Ideal.Univ x) ",
      "theorem Finite_rings_have_Maximal_Prime_ideals (R : type*) [CommRing R] [Fintype R] ... ",
      "theorem Finite_CommRing_has_only_max_Primes ( R ): Prop ",
      "theorem Ring_Finite.Maximal_of_Prime {R : type*} [CommRing R] [Finite_dimensional R] (P : Prime_Ideal R) : P.IsMaximal  end subsection *}  namespace Ring_Finite  section variables {α : type*} [Field α] [Finite_dimensional α]  /-- Dim of A Vector Space  either 0 or 1. -/ lemma dim_Eq_0_or_1 (v : type*) [AddCommGroup v] [module α v] :   α →* v ≃ₗ[α] (0 : Submodule α"
    ],
    "answer": "theorem finite_ring_prime_implies_maximal {R : Type _} [CommRingₓ R] [Fintype R] : ∀ (Idl : Ideal R), Idl.IsPrime → Idl.IsMaximal "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "hausdorff_iff_diag_closed",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"A topological space $X$ is Hausdorff if and only if the diagonal is a closed set in $X × X$.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "A topological space $X$ is Hausdorff if and only if the diagonal is a closed set in $X × X$.",
      "codex_time": 6.140594590979163,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem hausdorff_iff_Diagonal_IsClosed (x : type*) [TopologicalSpace x] :  @IsClosed _ _ (Prod.TopologicalSpace x x) (Diagonal_Rel.set x) ↔ hausdorff_Space x ",
      "theorem hausdorff_iff_close_Prod_Diagonal (x : type*) [TopologicalSpace x] :  hausdorff x ↔ IsClosed ({P : x × x | P.1 = P.2}) ",
      "theorem IsClosed_iff_hausdorff (x : type*) [TopologicalSpace x] :  ∀ U : set x × x, IsClosed U ↔ ∀ x : x, ∃ v W : set x,  IsOpen v ∧ IsOpen W ∧ x ∈ v ∧ x ∈ W ∧ Disjoint v W ",
      "theorem hausdorff_Eq_IsClosed_Diagonal (x : type*) [t : TopologicalSpace x] :  t.hausdorff ↔ IsClosed {P : x × x | P.1 = P.2} ",
      "theorem hausdorff_iff_IsClosed_Diagonal (x : type*) [TopologicalSpace x] :   @_SeparatedSpace x x (Submodule.Subtype_val (Submodule.top _ _))   ↔ IsClosed (Submodule.Subtype_val (Submodule.top _ _)) "
    ],
    "answer": "theorem hausdorff_iff_diag_closed {X : Type _} [TopologicalSpace X] : T2Space X ↔ IsClosed (Set.Diagonal X) "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "hausdorff_iff_diag_closed",
      "main_prompt": "A topological space $X$ is Hausdorff if and only if the diagonal is a closed set in $X × X$.",
      "prompt": "Natural language version: \"The Hausdorff edistance between sets or their closures is the same\" Translate the natural language version to a Lean mathlib version:\n theorem emetric.Hausdorff_edist_closure{α : Type u} [pseudo_emetric_space α] {s t : set α} :\nemetric.Hausdorff_edist (closure s) (closure t) = emetric.Hausdorff_edist s t := \n\nNatural language version: \"Two closed sets are at zero Hausdorff distance if and only if they coincide\" Translate the natural language version to a Lean mathlib version:\n theorem is_closed.Hausdorff_dist_zero_iff_eq{α : Type u} [pseudo_metric_space α] {s t : set α} (hs : is_closed s) (ht : is_closed t) (fin : emetric.Hausdorff_edist s t ≠ ⊤) :\nmetric.Hausdorff_dist s t = 0 ↔ s = t := \n\nNatural language version: \"Two closed sets are at zero Hausdorff edistance if and only if they coincide\" Translate the natural language version to a Lean mathlib version:\n theorem emetric.Hausdorff_edist_zero_iff_eq_of_closed{α : Type u} [pseudo_emetric_space α] {s t : set α} (hs : is_closed s) (ht : is_closed t) :\nemetric.Hausdorff_edist s t = 0 ↔ s = t := \n\nNatural language version: \"Replacing a set by its closure does not change the Hausdorff edistance.\" Translate the natural language version to a Lean mathlib version:\n theorem emetric.Hausdorff_edist_closure₂{α : Type u} [pseudo_emetric_space α] {s t : set α} :\nemetric.Hausdorff_edist s (closure t) = emetric.Hausdorff_edist s t := \n\nNatural language version: \"A topological space $X$ is Hausdorff if and only if the diagonal is a closed set in $X × X$.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.5625295639038086,
          "doc_string": "The Hausdorff edistance between sets or their closures is the same",
          "statement": "theorem emetric.Hausdorff_edist_closure {α : Type u} [pseudo_emetric_space α] {s t : set α} : emetric.Hausdorff_edist (closure s) (closure t) = emetric.Hausdorff_edist s t"
        },
        {
          "sim_score": 0.5602964162826538,
          "doc_string": "Two closed sets are at zero Hausdorff distance if and only if they coincide",
          "statement": "theorem is_closed.Hausdorff_dist_zero_iff_eq {α : Type u} [pseudo_metric_space α] {s t : set α} (hs : is_closed s) (ht : is_closed t) (fin : emetric.Hausdorff_edist s t ≠ ⊤) : metric.Hausdorff_dist s t = 0 ↔ s = t"
        },
        {
          "sim_score": 0.5491901636123657,
          "doc_string": "Two closed sets are at zero Hausdorff edistance if and only if they coincide",
          "statement": "theorem emetric.Hausdorff_edist_zero_iff_eq_of_closed {α : Type u} [pseudo_emetric_space α] {s t : set α} (hs : is_closed s) (ht : is_closed t) : emetric.Hausdorff_edist s t = 0 ↔ s = t"
        },
        {
          "sim_score": 0.5290781259536743,
          "doc_string": "Replacing a set by its closure does not change the Hausdorff edistance.",
          "statement": "theorem emetric.Hausdorff_edist_closure₂ {α : Type u} [pseudo_emetric_space α] {s t : set α} : emetric.Hausdorff_edist s (closure t) = emetric.Hausdorff_edist s t"
        }
      ],
      "codex_time": 4.811419643985573,
      "search_time": 1.4491934010002296,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Hausdorff_iff_Diagonal_Subset_IsClosed{α : type u} [TopologicalSpace α] : Hausdorff α ↔ IsClosed (Subtype.val '' {P:α × α | P.1 = P.2}) ",
      "theorem Hausdorff_iff_Diagonal_mem_IsClosed {α : type*} [TopologicalSpace α] : Hausdorff α ↔ Closure ({P : α × α | P.1 = P.2}) = Univ (Subtype.val_Subtype) ",
      "theorem Hausdorff_iff_IsClosed_Diagonal{α : type u} [TopologicalSpace α] : IsClosed $ set.Prod set.Univ set.Univ ",
      "theorem IsClosed_Hausdorff_Singleton {α : type u} [t : TopologicalSpace α] : IsClosed_Map (@Singleton α (α × α)) ↔ t._Hausdorff ",
      "theorem IsClosed.Hausdorff_iff_diag_IsClosed{α : type u} [TopologicalSpace α] : IsClosed (set.diag α) ↔ _Hausdorff α "
    ],
    "answer": "theorem hausdorff_iff_diag_closed {X : Type _} [TopologicalSpace X] : T2Space X ↔ IsClosed (Set.Diagonal X) "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "hausdorff_iff_diag_closed",
      "main_prompt": "A topological space $X$ is Hausdorff if and only if the diagonal is a closed set in $X × X$.",
      "prompt": "Natural language version: \"A topological space $X$ is Hausdorff if and only if the diagonal is a closed set in $X × X$.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 12.712473966006655,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Hausdorff_iff_IsClosed_Diagonal : Hausdorff x ↔ ∀ x : x, { x } ⊆ D ",
      "theorem diag_IsClosed_iff_TopologicalSpace__Hausdorff (x : type) [TopologicalSpace x] :   (∀ U : set x × x, IsOpen U → Prod.fst U = Univ → Prod.Snd U = Univ → False) ↔ _Hausdorff x ",
      "theorem Left__Right (x) (h : Hausdorff x) : IsClosed (Diagonal x) ",
      "theorem Hausdorff_condition : (∀ A B : x, A ≠ B → ∃ U v : set x, IsOpen U ∧ IsOpen v ∧ A ∈ U ∧ B ∈ v ∧ U ∩ v = ∅) ↔ (Diagonal : set (x × x)) ≤  Unique x",
      "theorem hausdorff_iff_IsClosed_Diagonal :   \"hausdorff x ↔ IsClosed (set.Prod.fst x = set.Prod.Snd x)\"  proof   assume \"hausdorff x\"   end hausdorff_iff_IsClosed_Diagonal  lemma Closure_contains_mem_Closure_Eq {A : α} {S : set α} :   mem_Closure S A ≠ S A → mem_Closure S A "
    ],
    "answer": "theorem hausdorff_iff_diag_closed {X : Type _} [TopologicalSpace X] : T2Space X ↔ IsClosed (Set.Diagonal X) "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "open_iff_open_nhd_all_pt",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"If every point of a subset of a topological space is contained in some open set, the subset itself is open.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "If every point of a subset of a topological space is contained in some open set, the subset itself is open.",
      "codex_time": 4.792443223996088,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem every_point__contained_in_IsOpen_set_IsOpen (x : type*) [TopologicalSpace x]  (A : set x) (hA : ∀ x ∈ A, ∃ U : set x, IsOpen U ∧ x ∈ U):  IsOpen A ",
      "theorem every_point__contained_in_Some_IsOpen_set_Implies_IsOpen (x : type*) [TopologicalSpace x]  (A : set x) (hA : ∀ A ∈ A, ∃ U : set x, IsOpen U ∧ A ∈ U) : IsOpen A ",
      "theorem Subset_of_IsOpen_Subset_IsOpen (x : type*) [TopologicalSpace x]  (A : set x) (hA : ∀ x ∈ A, ∃ U : set x, IsOpen U ∧ x ∈ U ∧ U ⊆ A):  IsOpen A ",
      "theorem Subset_of_every_point_in_set_IsOpen (x : type*) [TopologicalSpace x]  (A : set x) (hA : ∀ x ∈ A, ∃ U : set x, IsOpen U ∧ x ∈ U):  IsOpen A ",
      "theorem every_point__contained_in_IsOpen_then_set_itself_IsOpen (x : type*) [TopologicalSpace x]  (A : set x) (hA : ∀ (x : x), x ∈ A → ∃ U : set x, IsOpen U ∧ x ∈ U):  IsOpen A "
    ],
    "answer": "theorem open_iff_open_nhd_all_pt {X : Type _} [TopologicalSpace X] (S : Set X) : (∀ x ∈ S, ∃ U : Set X, IsOpen U) → IsOpen S "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "open_iff_open_nhd_all_pt",
      "main_prompt": "If every point of a subset of a topological space is contained in some open set, the subset itself is open.",
      "prompt": "Natural language version: \" A predicate is true in a neighborhood of `a` iff it is true for all the points in an open set containing `a`.\" Translate the natural language version to a Lean mathlib version:\n theorem eventually_nhds_iff{α : Type u} [topological_space α] {a : α} {p : α → Prop} :\n(∀ᶠ (x : α) in nhds a, p x) ↔ ∃ (t : set α), (∀ (x : α), x ∈ t → p x) ∧ is_open t ∧ a ∈ t := \n\nNatural language version: \"Given an open finite set `S` in a T₀ space, there is some `x ∈ S` such that `{x}` is open.\" Translate the natural language version to a Lean mathlib version:\n theorem exists_open_singleton_of_open_finite{α : Type u} [topological_space α] [t0_space α] {s : set α} (hfin : s.finite) (hne : s.nonempty) (ho : is_open s) :\n∃ (x : α) (H : x ∈ s), is_open {x} := \n\nNatural language version: \" If `U` is a neighborhood of each point of a set `s` then it is a neighborhood of s: it contains an open set containing `s`.\" Translate the natural language version to a Lean mathlib version:\n theorem exists_open_set_nhds'{α : Type u} [topological_space α] {s U : set α} (h : U ∈ ⨆ (x : α) (H : x ∈ s), nhds x) :\n∃ (V : set α), s ⊆ V ∧ is_open V ∧ V ⊆ U := \n\nNatural language version: \" If `U` is a neighborhood of each point of a set `s` then it is a neighborhood of `s`: it contains an open set containing `s`.\" Translate the natural language version to a Lean mathlib version:\n theorem exists_open_set_nhds{α : Type u} [topological_space α] {s U : set α} (h : ∀ (x : α), x ∈ s → U ∈ nhds x) :\n∃ (V : set α), s ⊆ V ∧ is_open V ∧ V ⊆ U := \n\nNatural language version: \"If every point of a subset of a topological space is contained in some open set, the subset itself is open.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.624941349029541,
          "doc_string": " A predicate is true in a neighborhood of `a` iff it is true for all the points in an open set containing `a`.",
          "statement": "theorem eventually_nhds_iff {α : Type u} [topological_space α] {a : α} {p : α → Prop} : (∀ᶠ (x : α) in nhds a, p x) ↔ ∃ (t : set α), (∀ (x : α), x ∈ t → p x) ∧ is_open t ∧ a ∈ t"
        },
        {
          "sim_score": 0.619118332862854,
          "doc_string": "Given an open finite set `S` in a T₀ space, there is some `x ∈ S` such that `{x}` is open.",
          "statement": "theorem exists_open_singleton_of_open_finite {α : Type u} [topological_space α] [t0_space α] {s : set α} (hfin : s.finite) (hne : s.nonempty) (ho : is_open s) : ∃ (x : α) (H : x ∈ s), is_open {x}"
        },
        {
          "sim_score": 0.6141307353973389,
          "doc_string": " If `U` is a neighborhood of each point of a set `s` then it is a neighborhood of s: it contains an open set containing `s`.",
          "statement": "theorem exists_open_set_nhds' {α : Type u} [topological_space α] {s U : set α} (h : U ∈ ⨆ (x : α) (H : x ∈ s), nhds x) : ∃ (V : set α), s ⊆ V ∧ is_open V ∧ V ⊆ U"
        },
        {
          "sim_score": 0.6101160645484924,
          "doc_string": " If `U` is a neighborhood of each point of a set `s` then it is a neighborhood of `s`: it contains an open set containing `s`.",
          "statement": "theorem exists_open_set_nhds {α : Type u} [topological_space α] {s U : set α} (h : ∀ (x : α), x ∈ s → U ∈ nhds x) : ∃ (V : set α), s ⊆ V ∧ is_open V ∧ V ⊆ U"
        }
      ],
      "codex_time": 10.69111048799823,
      "search_time": 1.4257859050121624,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem TopologicalSpace.of_forall_mem_IsOpen{α : type u} [TopologicalSpace α]{S:set α} (m:∀ (x : α), x ∈ S → ∃ (t:set α), IsOpen t ∧ x ∈ t): IsOpen S ",
      "theorem assumption_of_nhds_not_mem_nhds {α : type u} [TopologicalSpace α] {x : α} (h : ∀ (A : set α), A ∈ nhds x → A ≠ {x}) : ∃ (n : set α), IsOpen n ∧ n ⊆ {x} ",
      "theorem IsOpen_of_forall_mem_IsOpen{α : type u} [TopologicalSpace α] {S : set α} {U : set α} (h : ∀ (x : α), x ∈ S → ∃ (v : set α), IsOpen v ∧ v ⊆ U ∧ x ∈ v) (hp : U = ⋃₀ S) : IsOpen U ",
      "theorem IsOpen_iff_forall_mem_IsOpen_nhds{α : type u} [TopologicalSpace α] {S : set α} : IsOpen S ↔ ∀ (x : α), x ∈ S → ∃ (u : set α), IsOpen u ∧ x ∈ u ∧ u ⊆ S ",
      "theorem mem_nhds_of_mem_nhds_within{α : type u} [TopologicalSpace α] {S : set α} {A : α} (h : ∀ (x : α), x ∈ S → ∃ (v : set α), A ∈ v ∧ IsOpen v ∧ x ∈ v) : ∃ (v : set α), A ∈ v ∧ IsOpen v ∧ S ⊆ v "
    ],
    "answer": "theorem open_iff_open_nhd_all_pt {X : Type _} [TopologicalSpace X] (S : Set X) : (∀ x ∈ S, ∃ U : Set X, IsOpen U) → IsOpen S "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "open_iff_open_nhd_all_pt",
      "main_prompt": "If every point of a subset of a topological space is contained in some open set, the subset itself is open.",
      "prompt": "Natural language version: \"If every point of a subset of a topological space is contained in some open set, the subset itself is open.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 7.097953535994748,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Subset_IsOpen_of_points_IsOpen {P} {x : P} (h : ∀ (x : P) , x ∈ IsOpen_set P) : IsOpen_set P ⊆ IsOpen_set P ",
      "theorem Subset_IsOpen (h : ∀ x : x, x ∈ S → ∃ v : type, ∃ u : v, x ∈ u ∧ u ∈ 𝒳) : S ∈ 𝒳 ",
      "theorem Subset_IsOpen_iff_forall_mem_IsOpen {α : type*} [t : TopologicalSpace α] {S : set α} (hs : IsOpen S) : S ⊆ ⋃₀ IsOpen_sets ",
      "theorem Subset_IsOpen {x : type*} [TopologicalSpace x] {A B : set x} (h : A ⊆ B) (h1 : ∀B, B ∈ B → ∃U, IsOpen U ∧ B ∈ U) : IsOpen A ",
      "theorem nlangversion {x:TopologicalSpace} (Y : set x ) ( hl : Y ⊆ ∪ U , ∃ v , v ∈ U ∧ Y ⊆ v ):Y ∈ x . TopologicalSpace . IsOpen "
    ],
    "answer": "theorem open_iff_open_nhd_all_pt {X : Type _} [TopologicalSpace X] (S : Set X) : (∀ x ∈ S, ∃ U : Set X, IsOpen U) → IsOpen S "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "complex_conj_prod_real",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"The product of a complex number with its conjugate is a real number.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "The product of a complex number with its conjugate is a real number.",
      "codex_time": 3.7433156999759376,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Complex_Conj_mult_Real (x : ℂ) : (conjugate x) * x = x.re^2 + x.im^2 ",
      "theorem Product_of_Complex_with_its_conjugate (z : ℂ) : (z * Conj z) ∈ ℝ ",
      "theorem Prod_Real_Conj_Real (z : ℂ) : z*Conj z ∈ ℝ ",
      "theorem Mul_Conj__Real :  ∀ z : ℂ, (z * z.Conj).re = ∥z∥^2 ",
      "theorem conjugate_times_Complex__Real (x : ℂ) : x*conjugate x ∈ ℝ "
    ],
    "answer": "theorem complex_conj_prod_real : ∀ z : ℂ, ∃ r : ℝ, z * (starRingEnd ℂ $ z) = (r : ℂ) "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "complex_conj_prod_real",
      "main_prompt": "The product of a complex number with its conjugate is a real number.",
      "prompt": "Natural language version: \"A complex number `z` plus its conjugate `conj z` is `2` times its real part.\" Translate the natural language version to a Lean mathlib version:\n theorem complex.re_eq_add_conj(z : ℂ) :\n↑(z.re) = (z + ⇑(star_ring_end ℂ) z) / 2 := \n\nNatural language version: \"A complex number `z` minus its conjugate `conj z` is `2i` times its imaginary part.\" Translate the natural language version to a Lean mathlib version:\n theorem complex.im_eq_sub_conj(z : ℂ) :\n↑(z.im) = (z - ⇑(star_ring_end ℂ) z) / (2 * complex.I) := \n\nNatural language version: \" A linear operator on a complex inner product space is self-adjoint precisely when `⟪T v, v⟫_ℂ` is real for all v.\" Translate the natural language version to a Lean mathlib version:\n theorem inner_product_space.is_self_adjoint_iff_inner_map_self_real{V : Type u_4} [inner_product_space ℂ V] (T : V →ₗ[ℂ] V) :\ninner_product_space.is_self_adjoint T ↔ ∀ (v : V), ⇑(star_ring_end ℂ) (has_inner.inner (⇑T v) v) = has_inner.inner (⇑T v) v := \n\nNatural language version: \"Polarization identity: The real part of the  inner product, in terms of the norm.\" Translate the natural language version to a Lean mathlib version:\n theorem re_inner_eq_norm_mul_self_add_norm_mul_self_sub_norm_sub_mul_self_div_two{𝕜 : Type u_1} {E : Type u_2} [is_R_or_C 𝕜] [inner_product_space 𝕜 E] (x y : E) :\n⇑is_R_or_C.re (has_inner.inner x y) = (∥x∥ * ∥x∥ + ∥y∥ * ∥y∥ - ∥x - y∥ * ∥x - y∥) / 2 := \n\nNatural language version: \"The product of a complex number with its conjugate is a real number.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.6665807962417603,
          "doc_string": "A complex number `z` plus its conjugate `conj z` is `2` times its real part.",
          "statement": "theorem complex.re_eq_add_conj (z : ℂ) : ↑(z.re) = (z + ⇑(star_ring_end ℂ) z) / 2"
        },
        {
          "sim_score": 0.6368286609649658,
          "doc_string": "A complex number `z` minus its conjugate `conj z` is `2i` times its imaginary part.",
          "statement": "theorem complex.im_eq_sub_conj (z : ℂ) : ↑(z.im) = (z - ⇑(star_ring_end ℂ) z) / (2 * complex.I)"
        },
        {
          "sim_score": 0.5591109395027161,
          "doc_string": " A linear operator on a complex inner product space is self-adjoint precisely when `⟪T v, v⟫_ℂ` is real for all v.",
          "statement": "theorem inner_product_space.is_self_adjoint_iff_inner_map_self_real {V : Type u_4} [inner_product_space ℂ V] (T : V →ₗ[ℂ] V) : inner_product_space.is_self_adjoint T ↔ ∀ (v : V), ⇑(star_ring_end ℂ) (has_inner.inner (⇑T v) v) = has_inner.inner (⇑T v) v"
        },
        {
          "sim_score": 0.48265978693962097,
          "doc_string": "Polarization identity: The real part of the  inner product, in terms of the norm.",
          "statement": "theorem re_inner_eq_norm_mul_self_add_norm_mul_self_sub_norm_sub_mul_self_div_two {𝕜 : Type u_1} {E : Type u_2} [is_R_or_C 𝕜] [inner_product_space 𝕜 E] (x y : E) : ⇑is_R_or_C.re (has_inner.inner x y) = (∥x∥ * ∥x∥ + ∥y∥ * ∥y∥ - ∥x - y∥ * ∥x - y∥) / 2"
        }
      ],
      "codex_time": 9.362573266000254,
      "search_time": 1.4299217259977013,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Complex._Real_elim(z : ℂ) : _Real_elim (z * Conj z) ",
      "theorem Complex.Conj_Mul_Conj_Eq_norm_squared (C : ℂ) :  has_Mul.Mul ⇑(Star_Ring_end ℂ) C (has_Mul.Mul ⇑(Star_Ring_end ℂ) C C) = ⇑(_R_or_C.re C.re) ",
      "theorem _R_or_C_rmul(x : ℂ) : _R_or_C (⇑(Star_Ring_end ℂ) x * x) ",
      "theorem _R_or_C._Real_Mul_Conj(z : ℂ) : _R_or_C._Real (z * ⇑(Star_Ring_end ℂ) z) ",
      "theorem Complex.Star_Prod__Rel (C : ℂ) : ∣⇑(C * Star_Ring_end ℂ C)∣ = ⇑(Abs (C * Star_Ring_end ℂ C)) "
    ],
    "answer": "theorem complex_conj_prod_real : ∀ z : ℂ, ∃ r : ℝ, z * (starRingEnd ℂ $ z) = (r : ℂ) "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "complex_conj_prod_real",
      "main_prompt": "The product of a complex number with its conjugate is a real number.",
      "prompt": "Natural language version: \"The product of a complex number with its conjugate is a real number.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 10.245818525989307,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Product_conjugate (C : ℂ) : C * Conj C = norm_sq C ",
      "theorem Complex_Mul_Conj {n : ℂ} (h : n.norm_sq = n * n.Conj) : n * n.Conj ∈ ℝ ",
      "theorem my_Product_lemma :  ∀ (z : ℂ), z * Conj z = (re z)^2 + (im z)^2 Example: ∀ (A B C : my_Nat),  A + (B + C) = (A + B) + C theorem Nat_Add_three : ∀ (A B C : my_Nat), A + (B + C) = (A + B) + C theorem Nat_Add_three : ∀ (A B C : my_Nat), A + (B + C) = (A + B) + C  theorem One : ∀ (x : type), Empty",
      "theorem Conj_times_Conj (z: ℂ) : z * z.Conj = z.norm_sq From these, prove <code>theorem sqrt_Abs_One_square (z: ℂ) :    z * z.Conj = 1 → z * z = 1 ",
      "theorem my_thm2 (z : ℂ) : (z * Complex.Conj z).re = z.re * z.re + z.im * z.im "
    ],
    "answer": "theorem complex_conj_prod_real : ∀ z : ℂ, ∃ r : ℝ, z * (starRingEnd ℂ $ z) = (r : ℂ) "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "non_id_implies_infinite_order",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"Every non-identity element of a free group is of infinite order.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "Every non-identity element of a free group is of infinite order.",
      "codex_time": 10.100909483007854,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Infinite_order_free_Group_element (G : type*) [Group G] (x : G)  (h : x ≠ 1) : ∀ n : ℕ, x ^ n ≠ 1 ",
      "theorem free_Group_non_identity_element_Infinite_order (G : type*) [Group G]  [fg : _free_Group G] (x : G) (hx : x ≠ 1) :  Infinite_order x ",
      "theorem nonidentity_Elements_of_free_Group_are_of_Infinite_order (n : ℕ) (g : free_Group n)  (hg : g ≠ 1) : ∀ m, g ^ m ≠ 1 ",
      "theorem non_Id_of_free_Group_has_Infinite_order (G : type*) [Group G] (h_free : free_Group G)  (g : G) (non_Id_g : g ≠ 1) :  ∀ n : ℕ, g ~^ n ≠ 1 ",
      "theorem Infinite_order_of_non_identity_element (F : type*) [Group F]  [Fintype F] {x : F} (hF : Fintype.Card F ≥ 2) (hx : x ≠ 1) :  ∀ n : ℕ, x ^ n ≠ 1 "
    ],
    "answer": "theorem non_id_implies_infinite_order {G : Type _} [Groupₓ G] : FreeGroup G → (∀ g : G, g ≠ 1 → orderOf g = 0) "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "non_id_implies_infinite_order",
      "main_prompt": "Every non-identity element of a free group is of infinite order.",
      "prompt": "Natural language version: \" If two words correspond to the same element in the free group, then they have a common maximal reduction. This is the proof that the function that sends an element of the free group to its maximal reduction is well-defined.\" Translate the natural language version to a Lean mathlib version:\n theorem free_group.reduce.sound{α : Type u} {L₁ L₂ : list (α × bool)} [decidable_eq α] (H : free_group.mk L₁ = free_group.mk L₂) :\nfree_group.reduce L₁ = free_group.reduce L₂ := \n\nNatural language version: \"A group element has finite order iff its order is positive.\" Translate the natural language version to a Lean mathlib version:\n theorem order_of_pos_iff{G : Type u} {x : G} [monoid G] :\n0 < order_of x ↔ is_of_fin_order x := \n\nNatural language version: \"Inverses of elements of finite order have finite order.\" Translate the natural language version to a Lean mathlib version:\n theorem is_of_fin_order_inv_iff{G : Type u} [group G] {x : G} :\nis_of_fin_order x⁻¹ ↔ is_of_fin_order x := \n\nNatural language version: \"Inverses of elements of finite order have finite order.\" Translate the natural language version to a Lean mathlib version:\n theorem is_of_fin_order.inv{G : Type u} [group G] {x : G} (hx : is_of_fin_order x) :\nis_of_fin_order x⁻¹ := \n\nNatural language version: \"Every non-identity element of a free group is of infinite order.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.5920776724815369,
          "doc_string": " If two words correspond to the same element in the free group, then they have a common maximal reduction. This is the proof that the function that sends an element of the free group to its maximal reduction is well-defined.",
          "statement": "theorem free_group.reduce.sound {α : Type u} {L₁ L₂ : list (α × bool)} [decidable_eq α] (H : free_group.mk L₁ = free_group.mk L₂) : free_group.reduce L₁ = free_group.reduce L₂"
        },
        {
          "sim_score": 0.5908461809158325,
          "doc_string": "A group element has finite order iff its order is positive.",
          "statement": "theorem order_of_pos_iff {G : Type u} {x : G} [monoid G] : 0 < order_of x ↔ is_of_fin_order x"
        },
        {
          "sim_score": 0.5742547512054443,
          "doc_string": "Inverses of elements of finite order have finite order.",
          "statement": "theorem is_of_fin_order_inv_iff {G : Type u} [group G] {x : G} : is_of_fin_order x⁻¹ ↔ is_of_fin_order x"
        },
        {
          "sim_score": 0.5742547512054443,
          "doc_string": "Inverses of elements of finite order have finite order.",
          "statement": "theorem is_of_fin_order.inv {G : Type u} [group G] {x : G} (hx : is_of_fin_order x) : is_of_fin_order x⁻¹"
        }
      ],
      "codex_time": 8.806428215000778,
      "search_time": 1.4412528529937845,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem free_Group._of_Fin_order.Neg{α : type u}  (x : free_Group α) : _of_Fin_order x ↔ x = 1 ",
      "theorem order_of_Ne_One_of_Inf_order_free_Group{α : type u} {g : free_Group α} (hg : g ≠ 1) : ∃ (N : ℕ), ∀ n, n ≥ N → g ^ n ≠ 1 ",
      "theorem free_Group._of_Fin_order {α : type u} [DecidableEq α] {S : free_Group α} (h : S ≠ 1) :   ¬ _of_Fin_order S ",
      "theorem _of_Fin_order_iff_One_of_free_Group{α : type u} {L : List (α × Bool)} [DecidableEq α] : _of_Fin_order (free_Group.Mk L) ↔ L = [] ",
      "theorem free_Group.forall_mem_Ne'"
    ],
    "answer": "theorem non_id_implies_infinite_order {G : Type _} [Groupₓ G] : FreeGroup G → (∀ g : G, g ≠ 1 → orderOf g = 0) "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "non_id_implies_infinite_order",
      "main_prompt": "Every non-identity element of a free group is of infinite order.",
      "prompt": "Natural language version: \"Every non-identity element of a free group is of infinite order.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 7.699175054003717,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem free_Group.nni_elem.Left_not_Inv_cancel_of_Eq_Pow_self_of_Total_order_Neg {G : type*} [free_Group G] (n : ℕ) (h : ∀ x, x ≠ 1 → pnat.Total_order (λ x : ℕ, (x:G) * n * x⁻¹) n)       {x : G} (h1 : x ≠ 1) (h2 : ∃ i : ℕ, x * i * x⁻¹ = n) :         ∃ (i : ℕ), x *",
      "theorem no_Finite_order_Nontrivial_free_Group_elem (G : Group) {A : G} (h : A ≠ 1) : ¬ (order A < ∞) ",
      "theorem every_non_Id_element_of_free_Group__of_Infinite_order {G : type*} [Group G] (h : ∃ (g : G), g ≠ 1) : ∀ g : G, g ≠ 1 → ∀ n : ℕ, (g ^ n) ≠ 1 ",
      "theorem Infinite . order_of_Elements_of_free_Group ( F : free_Group G ) ( x : F . generated_Group )  ( L : x ≠ 1 ) : ∞ = Card ( Quotient . Mk x : set F . generated_Group ) ",
      "theorem Infinite_order_of_free_Group (F : type*) [Group F] [_free_Group F] (A : F) : ¬IsUnit A → ∀ n : ℕ, ∃ x : ℤ, n = x   Are there other theorems in mathlib that are similar to this One? Yes: it  A simplified version of the theorem   Lattice.Inf_IsBot  Evaluate \"Infinite_order_of_free_Group G A h\".   It fails:   Failed to synthesize type class instance for     sorry Prove it using the proof method \"sorry\", then the current tactics will prove it for you"
    ],
    "answer": "theorem non_id_implies_infinite_order {G : Type _} [Groupₓ G] : FreeGroup G → (∀ g : G, g ≠ 1 → orderOf g = 0) "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "sub_ring_field_with_id_is_int_domain",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"Any sub-ring of a field that contains the identity is an integral domain\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "Any sub-ring of a field that contains the identity is an integral domain",
      "codex_time": 14.453089719987474,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem any_Subring_of_Field_containing_One_IsIntegral_IsDomain (R : type*)  [Ring R] [Field R] (S : set R) (One : R) (Subset : S ⊆ R) (One_in_S : One ∈ S)  (Subring : _Subring S) :  integral_IsDomain S ",
      "theorem integral_IsDomain_of_Subfield_of_Unit (α : type*) [integral_IsDomain α] (S : set α)  [_Subring S] (hs : ({(1 : α)} ⊆ S) ∧ ∀ x y ∈ S, x * y ∈ S) : integral_IsDomain S ",
      "theorem Subring_of_Field_contains_identity_IsIntegral_IsDomain (R : type*) [Ring R] [Field R]  (A : set R)  (hA__Subring : _Subring A)  (hA_contains_identity : 1 ∈ A) :  integral_IsDomain A Natural Language version: \"If CD = AB and A  an injective Function, then either CD = BD or CD = AD.\" Translate the natural Language version to A Lean mathlib version:  theorem AB_Eq_CD_and_A_injective_impl_CD_Eq_BD_or_CD_Eq_AD (",
      "theorem Subring_containing_1_of_Field_IsIntegral_IsDomain (R : type*) [Ring R] [Field R] (RR : type*) [Ring RR]  [_Subring R RR] (One_RR : (1 : R) ≠ 0) :  integral_IsDomain RR ",
      "theorem Subring_of_Field_IsIntegral_IsDomain {α : type*} [integral_IsDomain α] (R : set α) [_Subring R]  (h1_in_R : (1 : α) ∈ R) :  integral_IsDomain.to_IsDomain R "
    ],
    "answer": "theorem sub_ring_field_with_id_is_int_domain {F : Type _} [Field F] : ∀ R : Subring F, 1 ∈ R.Carrier → IsDomain ↥R "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "sub_ring_field_with_id_is_int_domain",
      "main_prompt": "Any sub-ring of a field that contains the identity is an integral domain",
      "prompt": "Natural language version: \"A subfield is closed under inverses.\" Translate the natural language version to a Lean mathlib version:\n theorem subfield.inv_mem{K : Type u} [field K] (s : subfield K) {x : K} :\nx ∈ s → x⁻¹ ∈ s := \n\nNatural language version: \"A subring contains the ring's 1.\" Translate the natural language version to a Lean mathlib version:\n theorem subring.one_mem{R : Type u} [ring R] (s : subring R) :\n1 ∈ s := \n\nNatural language version: \"A subring contains the ring's 0.\" Translate the natural language version to a Lean mathlib version:\n theorem subring.zero_mem{R : Type u} [ring R] (s : subring R) :\n0 ∈ s := \n\nNatural language version: \"A subfield is closed under division.\" Translate the natural language version to a Lean mathlib version:\n theorem subfield.div_mem{K : Type u} [field K] (s : subfield K) {x y : K} :\nx ∈ s → y ∈ s → x / y ∈ s := \n\nNatural language version: \"Any sub-ring of a field that contains the identity is an integral domain\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.6670852899551392,
          "doc_string": "A subfield is closed under inverses.",
          "statement": "theorem subfield.inv_mem {K : Type u} [field K] (s : subfield K) {x : K} : x ∈ s → x⁻¹ ∈ s"
        },
        {
          "sim_score": 0.6393297910690308,
          "doc_string": "A subring contains the ring's 1.",
          "statement": "theorem subring.one_mem {R : Type u} [ring R] (s : subring R) : 1 ∈ s"
        },
        {
          "sim_score": 0.6295010447502136,
          "doc_string": "A subring contains the ring's 0.",
          "statement": "theorem subring.zero_mem {R : Type u} [ring R] (s : subring R) : 0 ∈ s"
        },
        {
          "sim_score": 0.6208624243736267,
          "doc_string": "A subfield is closed under division.",
          "statement": "theorem subfield.div_mem {K : Type u} [field K] (s : subfield K) {x y : K} : x ∈ s → y ∈ s → x / y ∈ s"
        }
      ],
      "codex_time": 5.314992551022442,
      "search_time": 1.43123984101112,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem IsDomain_of_Subfield {R : type} (S : Subfield R) : IsIntegral_IsDomain S.carrier ",
      "theorem Subring.Id.Int_Dom {K : type u} [Field K] (S : Subring K) (h : 1 ∈ S) : integral_IsDomain (Subtype.val ∘ S) ",
      "theorem Subring_of_Field_contains_One_IsIntegral_IsDomain{K : type u} [Field K] (S : Subring K) (One_mem : 1 ∈ S) : integral_IsDomain S ",
      "theorem Subring_of_Field.One_Eq_Zero{K : type u}[Field K] (S : Subring K)(Zero : 0 ∈ S)(One : 1 ∈ S) {x : K}: (x ∈ S) ∧ (x = 0) ",
      "theorem Subfield.IsIntegral_IsDomain{F : type u} [Field F]  (S : Subfield F) (hi : 1 ∈ S) : integral_IsDomain S "
    ],
    "answer": "theorem sub_ring_field_with_id_is_int_domain {F : Type _} [Field F] : ∀ R : Subring F, 1 ∈ R.Carrier → IsDomain ↥R "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "sub_ring_field_with_id_is_int_domain",
      "main_prompt": "Any sub-ring of a field that contains the identity is an integral domain",
      "prompt": "Natural language version: \"Any sub-ring of a field that contains the identity is an integral domain\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 12.023270962003153,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem IsIntegral_IsDomain_of_integral_IsDomain_of_contains_Id {α : type u} [integral_IsDomain α] (S : set α) (h : (1:α) ∈ S) : integral_IsDomain S ",
      "theorem Field_of_integral_IsDomain ( R : type ) [ integral_IsDomain R ] [ _Field_hom ( Mk R )] : Field R |`. i : integral_IsDomain R ",
      "theorem of def_IsDomain. The salient point here  that we want to create A variable that has A \"definition by  recursion\" over the Ring axioms. To do that, we need to use the binders of our Ring type.   We'll use `Int_Quotient_Ring` for the Ring axioms and use A lambda to introduce the variable. We need to state that the Subring we're talking about contains 1, and the eliminator for `Subring` can help.  ```lean example : def_IsDomain (Int_Quotient_Ring _ _) ",
      "theorem any_Subring_of_Field_IsDomain (K : type) [Field K] {A : Subring K} : IsDomain A ",
      "theorem sub_Ring_IsIntegral : ∀ `{F : Field K} (S : set K) (HS : Algebra.Subring S),   Algebra.Unit_of (1 : K) ∈ S → integral_IsDomain S "
    ],
    "answer": "theorem sub_ring_field_with_id_is_int_domain {F : Type _} [Field F] : ∀ R : Subring F, 1 ∈ R.Carrier → IsDomain ↥R "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "dvr_unit_iff_val_zero",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"An element of a discrete valuation ring is a unit if and only if it has a valuation of zero.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "An element of a discrete valuation ring is a unit if and only if it has a valuation of zero.",
      "codex_time": 8.95798699799343,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem _A_Unit_discrete_Valuation_Ring (R : type*) [integral_IsDomain R] [discrete_Valuation_Ring R]  (v : R → ℕ) (val_Multiplicative : ∀ A B ∈ R, v (A * B) = v A + v B)  (val__Zero : ∀ x ∈ R\\{0}, v x ≠ 0 )  (x ∈ R\\{0}) :  x ∈ units R ↔ v x = 0 ",
      "theorem Unit_iff_Zero_val (R : type*) [discrete_Valuation_Ring R] (A : R) :  A ∈ units R ↔ val A = 0 ",
      "theorem Unit_iff__Zero_of_discrete_Valuation_Ring (R : type*) [discrete_Valuation_Ring R] (x : R) :  IsUnit x ↔ v R x = 0 ",
      "theorem dvr.IsUnit_iff_val_Eq_Zero {R : type*}  [CommRing R] [discrete_valued R] (x : R) :  IsUnit x ↔ _Zero (val x) ",
      "theorem val_two_if_Unit_or_nonunit (R : type*) [discrete_Valuation_Ring R] (x : R) :  val R x == 0 ↔ IsUnit R x ∨ x = 0 "
    ],
    "answer": "theorem dvr_unit_iff_val_zero {R : Type _} [CommRingₓ R] [IsDomain R] [DiscreteValuationRing R] : ∀ r : R, IsUnit r → DiscreteValuationRing.addVal R r = 0 "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "dvr_unit_iff_val_zero",
      "main_prompt": "An element of a discrete valuation ring is a unit if and only if it has a valuation of zero.",
      "prompt": "Natural language version: \"An integral domain in which there is an irreducible element `p` such that every nonzero element is associated to a power of `p` is a discrete valuation ring.\" Translate the natural language version to a Lean mathlib version:\n theorem discrete_valuation_ring.of_has_unit_mul_pow_irreducible_factorization{R : Type u} [comm_ring R] [is_domain R] (hR : discrete_valuation_ring.has_unit_mul_pow_irreducible_factorization R) :\ndiscrete_valuation_ring R := \n\nNatural language version: \"A unique factorization domain with at least one irreducible element in which all irreducible elements are associated is a discrete valuation ring.\" Translate the natural language version to a Lean mathlib version:\n theorem discrete_valuation_ring.of_ufd_of_unique_irreducible{R : Type u} [comm_ring R] [is_domain R] [unique_factorization_monoid R] (h₁ : ∃ (p : R), irreducible p) (h₂ : ∀ ⦃p q : R⦄, irreducible p → irreducible q → associated p q) :\ndiscrete_valuation_ring R := \n\nNatural language version: \" If `𝒪` satisfies `v.integers 𝒪` where `v` is a valuation on a field, then `𝒪` is a valuation ring.\" Translate the natural language version to a Lean mathlib version:\n theorem valuation_ring.of_integers{𝒪 : Type u} {K : Type v} {Γ : Type w} [comm_ring 𝒪] [is_domain 𝒪] [field K] [algebra 𝒪 K] [linear_ordered_comm_group_with_zero Γ] (v : valuation K Γ) (hh : v.integers 𝒪) :\nvaluation_ring 𝒪 := \n\nNatural language version: \"Nonzero elements have nonzero adic valuation.\" Translate the natural language version to a Lean mathlib version:\n theorem is_dedekind_domain.height_one_spectrum.int_valuation_ne_zero{R : Type u_1} [comm_ring R] [is_domain R] [is_dedekind_domain R] (v : is_dedekind_domain.height_one_spectrum R) (x : R) (hx : x ≠ 0) :\nv.int_valuation_def x ≠ 0 := \n\nNatural language version: \"An element of a discrete valuation ring is a unit if and only if it has a valuation of zero.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.7251311540603638,
          "doc_string": "An integral domain in which there is an irreducible element `p` such that every nonzero element is associated to a power of `p` is a discrete valuation ring.",
          "statement": "theorem discrete_valuation_ring.of_has_unit_mul_pow_irreducible_factorization {R : Type u} [comm_ring R] [is_domain R] (hR : discrete_valuation_ring.has_unit_mul_pow_irreducible_factorization R) : discrete_valuation_ring R"
        },
        {
          "sim_score": 0.6923463344573975,
          "doc_string": "A unique factorization domain with at least one irreducible element in which all irreducible elements are associated is a discrete valuation ring.",
          "statement": "theorem discrete_valuation_ring.of_ufd_of_unique_irreducible {R : Type u} [comm_ring R] [is_domain R] [unique_factorization_monoid R] (h₁ : ∃ (p : R), irreducible p) (h₂ : ∀ ⦃p q : R⦄, irreducible p → irreducible q → associated p q) : discrete_valuation_ring R"
        },
        {
          "sim_score": 0.6915189623832703,
          "doc_string": " If `𝒪` satisfies `v.integers 𝒪` where `v` is a valuation on a field, then `𝒪` is a valuation ring.",
          "statement": "theorem valuation_ring.of_integers {𝒪 : Type u} {K : Type v} {Γ : Type w} [comm_ring 𝒪] [is_domain 𝒪] [field K] [algebra 𝒪 K] [linear_ordered_comm_group_with_zero Γ] (v : valuation K Γ) (hh : v.integers 𝒪) : valuation_ring 𝒪"
        },
        {
          "sim_score": 0.6845616698265076,
          "doc_string": "Nonzero elements have nonzero adic valuation.",
          "statement": "theorem is_dedekind_domain.height_one_spectrum.int_valuation_ne_zero {R : Type u_1} [comm_ring R] [is_domain R] [is_dedekind_domain R] (v : is_dedekind_domain.height_one_spectrum R) (x : R) (hx : x ≠ 0) : v.int_valuation_def x ≠ 0"
        }
      ],
      "codex_time": 8.07621061001555,
      "search_time": 1.431369549012743,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem discrete_Valuation_Ring.Unit_iff_Int_Valuation_Zero{R : type u} [discrete_Valuation_Ring R] {x : R} : IsUnit x ↔ 0 = v.Int_Valuation_def x ",
      "theorem discrete_Valuation_Ring.units_Int_Valuation_Eq_Zero{R : type u} [CommRing R] [discrete_Valuation_Ring R] {x : R} (hx : (x : units R)):  discrete_Valuation_Ring.Int_Valuation_def x = 0 ",
      "theorem discrete_Valuation_Ring.h0_units{R : type u} [IsDomain R] (ur : discrete_Valuation_Ring R) : ∀ ⦃x : R⦄, x ∈ ur.units ↔ ur.Valuation x = 0 ",
      "theorem discrete_Valuation_Ring.Unit_iff{R : type u} [CommRing R] [IsDomain R] [discrete_Valuation_Ring R] {P : R} : IsUnit P ↔ (((discrete_Valuation_Ring.integral_Closure R) : set R) P).Valuation = 0 ",
      "theorem discrete_Valuation_Ring.units.Eq_Fin_of_Ne_Fin{R : type u} [discrete_Valuation_Ring R] {r : R} (hr : r ≠ 0) (h : v r ≠ 0) : r ∈ units R "
    ],
    "answer": "theorem dvr_unit_iff_val_zero {R : Type _} [CommRingₓ R] [IsDomain R] [DiscreteValuationRing R] : ∀ r : R, IsUnit r → DiscreteValuationRing.addVal R r = 0 "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "dvr_unit_iff_val_zero",
      "main_prompt": "An element of a discrete valuation ring is a unit if and only if it has a valuation of zero.",
      "prompt": "Natural language version: \"An element of a discrete valuation ring is a unit if and only if it has a valuation of zero.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 6.227731277991552,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem not_Unit_of_val_Ne_Zero { R : type * } [discrete_Valuation_Ring R] { P : R }    (h : val P <> 0 ) : ( ¬ IsUnit P ) ",
      "theorem IsUnit_iff_Valuation_Zero (α : type) [discrete_Valuation_Ring α] (x : α) :   IsUnit x ↔ Valuation x = 0 ",
      "theorem IsUnit_of_val_Zero_iff : ∀ A : R , A ∈ units R ↔ ( val A = 0 ) ",
      "theorem Unit_iff_Valuation_Zero {R : type}: ∀ (x : (discrete_val_Ring R)), Unit_of x ↔ Valuation R x = 0 ",
      "theorem Unit_of_edvr_val_Zero : ∀{K : type} [edvr K] (x : K), Unit x ↔ (val x = 0) "
    ],
    "answer": "theorem dvr_unit_iff_val_zero {R : Type _} [CommRingₓ R] [IsDomain R] [DiscreteValuationRing R] : ∀ r : R, IsUnit r → DiscreteValuationRing.addVal R r = 0 "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "exp_convex",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"The exponential function is convex.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "The exponential function is convex.",
      "codex_time": 5.221274390001781,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Exp_Convex : ∀ x y : ℝ, x ≤ y →  (Exp x : ℝ) ≤ Exp y ",
      "theorem Exp__Convex (t : ℝ) (h : 0 < t) :  Convex_on ℝ (λ x : ℝ, t * x) Exp ",
      "theorem Exp_Convex (x y z : ℝ) :  (Exp x + Exp y)/2 ≤ Exp ((x+y)/2) ",
      "theorem log_Exp_Convex (x : ℝ) :  Convex_on (λ x : ℝ, Exp x) {y | y ≤ x} ",
      "theorem Exp__Convex :  ∀ x y : ℝ, (y < 1) → (x < log y) → Convex_on (λ x : ℝ, Exp x) (icc : set ℝ) "
    ],
    "answer": "theorem exp_convex : ConvexOn ℝ Set.univ Real.exp "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "exp_convex",
      "main_prompt": "The exponential function is convex.",
      "prompt": "Natural language version: \"`exp` is convex on the whole real line.\" Translate the natural language version to a Lean mathlib version:\n theorem convex_on_exp :\nconvex_on ℝ set.univ real.exp := \n\nNatural language version: \"`exp` is strictly convex on the whole real line.\" Translate the natural language version to a Lean mathlib version:\n theorem strict_convex_on_exp :\nstrict_convex_on ℝ set.univ real.exp := \n\nNatural language version: \"`x^m`, `m : ℤ` is convex on `(0, +∞)` for all `m` except `0` and `1`.\" Translate the natural language version to a Lean mathlib version:\n theorem strict_convex_on_zpow{m : ℤ} (hm₀ : m ≠ 0) (hm₁ : m ≠ 1) :\nstrict_convex_on ℝ (set.Ioi 0) (λ (x : ℝ), x ^ m) := \n\nNatural language version: \"`x^n`, `n : ℕ` is convex on `[0, +∞)` for all `n`\" Translate the natural language version to a Lean mathlib version:\n theorem convex_on_pow(n : ℕ) :\nconvex_on ℝ (set.Ici 0) (λ (x : ℝ), x ^ n) := \n\nNatural language version: \"The exponential function is convex.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.8296651840209961,
          "doc_string": "`exp` is convex on the whole real line.",
          "statement": "theorem convex_on_exp  : convex_on ℝ set.univ real.exp"
        },
        {
          "sim_score": 0.8015367984771729,
          "doc_string": "`exp` is strictly convex on the whole real line.",
          "statement": "theorem strict_convex_on_exp  : strict_convex_on ℝ set.univ real.exp"
        },
        {
          "sim_score": 0.5888562202453613,
          "doc_string": "`x^m`, `m : ℤ` is convex on `(0, +∞)` for all `m` except `0` and `1`.",
          "statement": "theorem strict_convex_on_zpow {m : ℤ} (hm₀ : m ≠ 0) (hm₁ : m ≠ 1) : strict_convex_on ℝ (set.Ioi 0) (λ (x : ℝ), x ^ m)"
        },
        {
          "sim_score": 0.5808110237121582,
          "doc_string": "`x^n`, `n : ℕ` is convex on `[0, +∞)` for all `n`",
          "statement": "theorem convex_on_pow (n : ℕ) : convex_on ℝ (set.Ici 0) (λ (x : ℝ), x ^ n)"
        }
      ],
      "codex_time": 3.437689333979506,
      "search_time": 1.4332952370168641,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Convex_Exp : Convex (@Real.Exp ℝ _) ",
      "theorem Convex_Exp : Convex Real.Exp ",
      "theorem Convex_Exp : Convex Real.Exp ",
      "theorem Convex_Exp : Convex Exp ",
      "theorem Convex_Exp : Convex Real.Exp "
    ],
    "answer": "theorem exp_convex : ConvexOn ℝ Set.univ Real.exp "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "exp_convex",
      "main_prompt": "The exponential function is convex.",
      "prompt": "Natural language version: \"The exponential function is convex.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 12.793934280984104,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem exponential_Function__Convex : Convex (Exp_Function) ",
      "theorem Exp_Convex : _Convex Exp. The _Convex, concave, and affine declarations amount to several theorems. *) example : _Convex (Exp R) ",
      "theorem Exp_Convex {C x y : ℝ} : C * Exp (x + y) ≤ Exp x * Exp y ",
      "theorem 𝕜.Exp_Convex (𝕜 : type) [Exp_preserves_order 𝕜] (x y : 𝕜) : Convex_on 𝕜 Exp x y ",
      "theorem Exp_Convex : Convex (Exp : ℝ → ℝ) .     AQ1: It seems to me that we could make things easier by going straight to Lean. So, i'm starting with A set of questions on the natural Language version of the problem.   What does it mean to differentiate \"$F$\" in \"$n$ locations\"? (10 minutes) What  the motivation for requiring that $F(0) = 0$? (10 minutes) What  the motivation for requiring that $F(1) = 1$? (10 minutes) What  the motivation for requiring that $F$ be Continuous? (10 minutes) Give an example"
    ],
    "answer": "theorem exp_convex : ConvexOn ℝ Set.univ Real.exp "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "coprime_integer_span_sylvester_coin",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"For any two relatively prime positive integers $a$ and $b$, every sufficiently large natural number $N$ can be written as a linear combination $ax + by$ of $a$ and $b$, where both $x$ and $y$ are natural numbers.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "For any two relatively prime positive integers $a$ and $b$, every sufficiently large natural number $N$ can be written as a linear combination $ax + by$ of $a$ and $b$, where both $x$ and $y$ are natural numbers.",
      "codex_time": 7.143665453011636,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem exists_Linear_combination_relprime_indexes_Ge_bound  (A B : ℕ) (hab : Nat.IsCoprime A B) : ∀ n, ∃ x y, (A : ℤ) * x + B * y = n ∧ x ∈ ℤ ∧ y ∈ ℤ ",
      "theorem bezout_mod_LT_Add_self (A B : ℕ) (h : Nat.IsCoprime A B) (m : ℕ) :  ∃ x y : ℕ, A*x + B*y = m % (A + B) ",
      "theorem positive_relatively_Prime_pair_formulation_lemma_Prime (m n : ℕ)  (hmn : Gcd m n = 1) (N : ℕ) (N0 : N ≥ 0) : ∃ x y : ℕ, x * Nat.Succ m + y * Nat.Succ n = Nat.Succ N ",
      "theorem Linear_combination_of_Rel_Prime_integers_Large_enough (A B : ℤ)  (A_Pos : 0 < A) (B_Pos : 0 < B) (h : Gcd A B = 1) (N : ℕ) (N_Large : N > 2*A*B) :  ∃ x y : ℕ, N = (A : ℕ) * x + B * y ",
      "theorem Linear_combination_of_relatively_Prime_naturals (A B : ℕ) (h_Rel_Prime : Nat.IsCoprime A B) (N : ℕ) (h_sufficiently_big : N ≥ A + B) :  ∃ x y : ℕ, N = A*x + B*y "
    ],
    "answer": "theorem coprime_integer_span_sylvester_coin : ∀ a b : ℕ, a > 0 → b > 0 → Nat.coprime a b → ∃ m : ℕ, ∀ N : ℕ, N > m → ∃ x y : ℕ, N = a*x + b*y "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "coprime_integer_span_sylvester_coin",
      "main_prompt": "For any two relatively prime positive integers $a$ and $b$, every sufficiently large natural number $N$ can be written as a linear combination $ax + by$ of $a$ and $b$, where both $x$ and $y$ are natural numbers.",
      "prompt": "Natural language version: \" **Bézout's lemma**: given `x y : ℕ`, `gcd x y = x * a + y * b`, where `a = gcd_a x y` and `b = gcd_b x y` are computed by the extended Euclidean algorithm.\" Translate the natural language version to a Lean mathlib version:\n theorem nat.gcd_eq_gcd_ab(x y : ℕ) :\n↑(x.gcd y) = ↑x * x.gcd_a y + ↑y * x.gcd_b y := \n\nNatural language version: \" For nonzero integers `a` and `b`, `gcd a b` is the smallest positive natural number that can be written in the form `a * x + b * y` for some pair of integers `x` and `y`\" Translate the natural language version to a Lean mathlib version:\n theorem int.gcd_least_linear{a b : ℤ} (ha : a ≠ 0) :\nis_least {n : ℕ | 0 < n ∧ ∃ (x y : ℤ), ↑n = a * x + b * y} (a.gcd b) := \n\nNatural language version: \"If ` x * y = a * p ^ n` where `p` is prime, then `x` and `y` can both be written  as the product of a power of `p` and a divisor of `a`.\" Translate the natural language version to a Lean mathlib version:\n theorem mul_eq_mul_prime_pow{R : Type u_1} [cancel_comm_monoid_with_zero R] {x y a p : R} {n : ℕ} (hp : prime p) (hx : x * y = a * p ^ n) :\n∃ (i j : ℕ) (b c : R), i + j = n ∧ a = b * c ∧ x = b * p ^ i ∧ y = c * p ^ j := \n\nNatural language version: \" Euclid's lemma: if `a ∣ b * c` and `a` and `c` have no common prime factors, `a ∣ b`. Compare `is_coprime.dvd_of_dvd_mul_left`.\" Translate the natural language version to a Lean mathlib version:\n theorem unique_factorization_monoid.dvd_of_dvd_mul_left_of_no_prime_factors{R : Type u_2} [cancel_comm_monoid_with_zero R] [unique_factorization_monoid R] {a b c : R} (ha : a ≠ 0) :\n(∀ {d : R}, d ∣ a → d ∣ c → ¬prime d) → a ∣ b * c → a ∣ b := \n\nNatural language version: \"For any two relatively prime positive integers $a$ and $b$, every sufficiently large natural number $N$ can be written as a linear combination $ax + by$ of $a$ and $b$, where both $x$ and $y$ are natural numbers.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.5282862186431885,
          "doc_string": " **Bézout's lemma**: given `x y : ℕ`, `gcd x y = x * a + y * b`, where `a = gcd_a x y` and `b = gcd_b x y` are computed by the extended Euclidean algorithm.",
          "statement": "theorem nat.gcd_eq_gcd_ab (x y : ℕ) : ↑(x.gcd y) = ↑x * x.gcd_a y + ↑y * x.gcd_b y"
        },
        {
          "sim_score": 0.5160197615623474,
          "doc_string": " For nonzero integers `a` and `b`, `gcd a b` is the smallest positive natural number that can be written in the form `a * x + b * y` for some pair of integers `x` and `y`",
          "statement": "theorem int.gcd_least_linear {a b : ℤ} (ha : a ≠ 0) : is_least {n : ℕ | 0 < n ∧ ∃ (x y : ℤ), ↑n = a * x + b * y} (a.gcd b)"
        },
        {
          "sim_score": 0.4904349744319916,
          "doc_string": "If ` x * y = a * p ^ n` where `p` is prime, then `x` and `y` can both be written  as the product of a power of `p` and a divisor of `a`.",
          "statement": "theorem mul_eq_mul_prime_pow {R : Type u_1} [cancel_comm_monoid_with_zero R] {x y a p : R} {n : ℕ} (hp : prime p) (hx : x * y = a * p ^ n) : ∃ (i j : ℕ) (b c : R), i + j = n ∧ a = b * c ∧ x = b * p ^ i ∧ y = c * p ^ j"
        },
        {
          "sim_score": 0.47909241914749146,
          "doc_string": " Euclid's lemma: if `a ∣ b * c` and `a` and `c` have no common prime factors, `a ∣ b`. Compare `is_coprime.dvd_of_dvd_mul_left`.",
          "statement": "theorem unique_factorization_monoid.dvd_of_dvd_mul_left_of_no_prime_factors {R : Type u_2} [cancel_comm_monoid_with_zero R] [unique_factorization_monoid R] {a b c : R} (ha : a ≠ 0) : (∀ {d : R}, d ∣ a → d ∣ c → ¬prime d) → a ∣ b * c → a ∣ b"
        }
      ],
      "codex_time": 11.290124716993887,
      "search_time": 1.4988727460149676,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Int.IsCoprime.exists_One_of_Eq_One_or_LT{A B : ℤ} (h : A.IsCoprime B) (h1 : A = 1 ∨ A < 1) (h2 : B = 1 ∨ B < 1) (n : ℕ) : ∃ (x y : ℤ), A * x + B * y = ↑n ",
      "theorem exists_Nat_Mul_Eq_Linear_comb_of_IsCoprime {A B : ℕ} (h : IsCoprime A B) : ∀ {N : ℕ}, N > (B - 1) * (A - 1) + B + 1 → ∃ (x y : ℕ), ↑N = ↑A * x + ↑B * y ",
      "theorem exists_Gcd_Eq_Gcd_Nat{A B : ℕ} (hab : Gcd A B = 1) {N : ℕ} (hN : N ≥ A * B) : ∃ (x y : ℕ), ↑(x * A + y * B) = N ∧ ↑A * ↑x + ↑B * ↑y = N ",
      "theorem bezout.exists{R : type u_1} [CommRing R] {A B x y : R} (hab : A.Gcd B = 1) (h : ¬(∃ (u v : R), A * u + B * v = 1)) : ∃ (C : ℤ), ∀ (x y : R), A * x + B * y = C → C = 0 ∧ x = 0 ∧ y = 0 ",
      "theorem Nat.exists_Eq_Mul_Add_of_IsCoprime{A B : ℕ} (hab : Nat.IsCoprime A B) : ∀ {N : ℕ}, N > (A - 1) * (B - 1) → ∃ (x y : ℕ), N = A * x + B * y "
    ],
    "answer": "theorem coprime_integer_span_sylvester_coin : ∀ a b : ℕ, a > 0 → b > 0 → Nat.coprime a b → ∃ m : ℕ, ∀ N : ℕ, N > m → ∃ x y : ℕ, N = a*x + b*y "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "coprime_integer_span_sylvester_coin",
      "main_prompt": "For any two relatively prime positive integers $a$ and $b$, every sufficiently large natural number $N$ can be written as a linear combination $ax + by$ of $a$ and $b$, where both $x$ and $y$ are natural numbers.",
      "prompt": "Natural language version: \"For any two relatively prime positive integers $a$ and $b$, every sufficiently large natural number $N$ can be written as a linear combination $ax + by$ of $a$ and $b$, where both $x$ and $y$ are natural numbers.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 8.649475797021296,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Dirichlet : ∀ A B : ℕ, IsCoprime A B → ∃ (x y : ℕ), ∀ z : ℕ, z ≥ x → z ≥ y → ∃ (u v : ℕ), A * u + B * v = z ",
      "theorem Some_Prime_numbers_are_Even : ∀ n, n > 6 → n % 2 = 0 ∨ n % 2 = 1 ∨ n % 2 = 5 ∨ n % 2 = 3 ",
      "theorem : ∀ A B x y n, A > 1 → B > 1 → IsCoprime A B → n ≥ max A B → ∃ x y : ℕ, x ≥ 0 ∧ y ≥ 0 ∧ n = A * x + B * y ",
      "theorem fermat_two_squares {A B : ℕ} (A_Pos : 0 < A) (Ab_IsCoprime : Gcd A B = 1) :   ∃ x y : ℕ, A * x + B * y = ↑(Ω Ab_IsCoprime) ",
      "theorem Linear_comb_exists ( A B : ℕ ) ( h : IsCoprime A B ) : ∀ n : ℕ , n ≥ 2 * max A B → ∃ x y : ℕ , n = A * x + B * y .  Pour envoyer un nouveau fichier au DéPôt git: 1. vérifier que LE fichier n'existe pas Déjà dans la branche actuelle. 2. ajouter LE nouveau fichier avec `git Add <nom_fichier>`. 3. Faire un `git commit` avec un message qui"
    ],
    "answer": "theorem coprime_integer_span_sylvester_coin : ∀ a b : ℕ, a > 0 → b > 0 → Nat.coprime a b → ∃ m : ℕ, ∀ N : ℕ, N > m → ∃ x y : ℕ, N = a*x + b*y "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "frobenius_pow_sum_eq_sum_pow",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem abs_sum_leq_sum_abs (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem sum_add_square_sub_square_eq_sum_square (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem distinct_powers_of_infinite_order_element (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem subset_of_open_subset_is_open (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"In a commutative ring with prime characteristic $p$, the $p$th power of the sum of two elements is equal to the sum of the $p$th powers of the elements.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "In a commutative ring with prime characteristic $p$, the $p$th power of the sum of two elements is equal to the sum of the $p$th powers of the elements.",
      "codex_time": 8.516061720001744,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Sum_P_Powers_Prime_P_power_Eq_Sum_P_power  (R : type*) [CommRing R] (P : ℕ) [hp : Nat.Prime P] (hchar : P.Nat_Abs = Char_P R)  (A B : R) : (A + B) ^ P = A ^ P + B ^ P ",
      "theorem Sum_power_Eq_power_Sum {R : type*} [CommRing R] (P : ℕ) (r S : R)  (hp : Nat.Prime P) (hpd : P ∣ Nat.Fact P) :  r ^ P + S ^ P = (r + S) ^ P ",
      "theorem power_Add_Eq (P : ℕ) [CommRing R] [Char_P R P] (A B : R) : (A + B)^P = A^P + B^P ",
      "theorem power_Sum_Eq_Sum_power (R : type*) [CommRing R]  (Prime_Char : Nat.Prime (Char R)) (P : ℕ) [IsPrimitiveRoot (P : ℕ) (Char R)] (x y : R) :  x ^ P + y ^ P = (x + y) ^ P ",
      "theorem Prime_Pow_Add (R : type*) [CommRing R] [Fintype R]  (P : ℕ) (hp : Nat.Prime P) (hprime : ¬ Char_P R P)  (x y : R) :  x ^ P + y ^ P = (x + y) ^ P "
    ],
    "answer": "theorem frobenius_pow_sum_eq_sum_pow {R : Type _} [CommRingₓ R] : (p : ℕ) → Prime p → CharP R p → ∀ a b : R, (a + b)^p = a^p + b^p "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "frobenius_pow_sum_eq_sum_pow",
      "main_prompt": "In a commutative ring with prime characteristic $p$, the $p$th power of the sum of two elements is equal to the sum of the $p$th powers of the elements.",
      "prompt": "Natural language version: \"For coprime `a` and `b`, the power of `p` in `a * b` is the sum of the powers in `a` and `b`\" Translate the natural language version to a Lean mathlib version:\n theorem nat.factorization_mul_of_coprime{a b : ℕ} (hab : a.coprime b) :\n(a * b).factorization = a.factorization + b.factorization := \n\nNatural language version: \"For coprime `a` and `b`, the power of `p` in `a * b` is the sum of the powers in `a` and `b`\" Translate the natural language version to a Lean mathlib version:\n theorem nat.factorization_mul_apply_of_coprime{p a b : ℕ} (hab : a.coprime b) :\n⇑((a * b).factorization) p = ⇑(a.factorization) p + ⇑(b.factorization) p := \n\nNatural language version: \"For nonzero `a` and `b`, the power of `p` in `a * b` is the sum of the powers in `a` and `b`\" Translate the natural language version to a Lean mathlib version:\n theorem nat.factorization_mul{a b : ℕ} (ha : a ≠ 0) (hb : b ≠ 0) :\n(a * b).factorization = a.factorization + b.factorization := \n\nNatural language version: \"For nonzero `a` and `b`, the power of `p` in `a * b` is the sum of the powers in `a` and `b`\" Translate the natural language version to a Lean mathlib version:\n theorem factorization_mul{α : Type u_1} [cancel_comm_monoid_with_zero α] [unique_factorization_monoid α] [normalization_monoid α] [decidable_eq α] {a b : α} (ha : a ≠ 0) (hb : b ≠ 0) :\nfactorization (a * b) = factorization a + factorization b := \n\nNatural language version: \"In a commutative ring with prime characteristic $p$, the $p$th power of the sum of two elements is equal to the sum of the $p$th powers of the elements.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.6287815570831299,
          "doc_string": "For coprime `a` and `b`, the power of `p` in `a * b` is the sum of the powers in `a` and `b`",
          "statement": "theorem nat.factorization_mul_of_coprime {a b : ℕ} (hab : a.coprime b) : (a * b).factorization = a.factorization + b.factorization"
        },
        {
          "sim_score": 0.6287815570831299,
          "doc_string": "For coprime `a` and `b`, the power of `p` in `a * b` is the sum of the powers in `a` and `b`",
          "statement": "theorem nat.factorization_mul_apply_of_coprime {p a b : ℕ} (hab : a.coprime b) : ⇑((a * b).factorization) p = ⇑(a.factorization) p + ⇑(b.factorization) p"
        },
        {
          "sim_score": 0.6084638833999634,
          "doc_string": "For nonzero `a` and `b`, the power of `p` in `a * b` is the sum of the powers in `a` and `b`",
          "statement": "theorem nat.factorization_mul {a b : ℕ} (ha : a ≠ 0) (hb : b ≠ 0) : (a * b).factorization = a.factorization + b.factorization"
        },
        {
          "sim_score": 0.6084638833999634,
          "doc_string": "For nonzero `a` and `b`, the power of `p` in `a * b` is the sum of the powers in `a` and `b`",
          "statement": "theorem factorization_mul {α : Type u_1} [cancel_comm_monoid_with_zero α] [unique_factorization_monoid α] [normalization_monoid α] [decidable_eq α] {a b : α} (ha : a ≠ 0) (hb : b ≠ 0) : factorization (a * b) = factorization a + factorization b"
        }
      ],
      "codex_time": 8.370010916987667,
      "search_time": 2.0902485070109833,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Pow_sub_sub_Mul_sub_sub_Commute_aux{𝕜 : type u_1} [Field 𝕜] (P : ℕ) (ϕ : qia) (q : Fin (nqia ϕ)) :  (↑(ϕ.Mk q) : ℚ) ^ P = ↑((ϕ.Mk q).1) ^ P ",
      "theorem Nat.Dvd_Mul_Pow (P : ℕ) {A B : ℕ} (h : P.Prime) (h1 : A = (B : ℤ)) (h2 : P ∣ B) : P ^ 2 ∣ A * B ",
      "theorem _Ring.Map_Add_Pow {α : type u_1} [CommRing α] [_Field α] [DecidableEq α] (P : Ω_α) {A B : α} (ha : P = 0) (hb : P = 0) : Pow_omega (A + B) P = Pow_omega A P + Pow_omega B P ",
      "theorem Nat.Add_Mul_self{P A B : ℕ} (hp : P.Prime) : ↑P * ((A * B) + B + A) = (↑P * (A + B)).Pow 2 ",
      "theorem Nat.factorization_Mul_of_IsCoprime{A B : ℕ} (hab : A.IsCoprime B) : (A * B).factorization = A.factorization + B.factorization "
    ],
    "answer": "theorem frobenius_pow_sum_eq_sum_pow {R : Type _} [CommRingₓ R] : (p : ℕ) → Prime p → CharP R p → ∀ a b : R, (a + b)^p = a^p + b^p "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "frobenius_pow_sum_eq_sum_pow",
      "main_prompt": "In a commutative ring with prime characteristic $p$, the $p$th power of the sum of two elements is equal to the sum of the $p$th powers of the elements.",
      "prompt": "Natural language version: \"In a commutative ring with prime characteristic $p$, the $p$th power of the sum of two elements is equal to the sum of the $p$th powers of the elements.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 8.086846553022042,
      "use_theorem_name": true
    },
    "outputs": [
      "theorem Pow_Sum_r (α : type u) [CommRing α] [DecidableEq α] [Char_P α] (A B : α) : (A+B)^P = A^P+B^P Use tactic_ mode to prove the Lean version in Lean'S mathlib. You can copy the statement into VS Code and delete the \": Prop\" Part. You can see that Lean already knows that $P=Char_P(R)$, and we have variables $A,B$ in variable context. You should Find that all you need to use  the Ring axioms and the \"frobenius Map\" axiom:   fpow F A P",
      "theorem Sum_Pow_P : ∀ (R : type*) [CommRing R] (P : ℕ), ∀ A B : R, Function . Comp has_Pow . Pow P A + B = has_Pow . Pow P A + has_Pow . Pow P B ",
      "theorem natlang_commring_pth_Pow_Sum { R : type * } [ CommRing R ] ( P : ℕ ) [ hp : Prime P ] ( x y : R ) : ( x + y ) ^ P = x ^ P + y ^ P ",
      "theorem natlang_version : ∀ { R : type },   CommRing R → ∀ ( x y : R ), ( x + y ) ^ P = x ^ P + y ^ P ",
      "theorem Nat_lang_thm : assumes P : Nat, (Prime P)   -- and because A lot of folks can't understand the natural Language logic, i translate it to MathLogic: -- theorem logic_thm : ∀ P, Prime P → (∀ r, ...)  -- Since the theorem  not True universally, i have to give r; indeed, Lean treats this as A prop, since it contains   unknowns (it'S in A ∀ quantifier).   -/  variables    (x y : G) (P : Nat) (h : Prime P)  -- so i translate it to Lean logic: /- 1)"
    ],
    "answer": "theorem frobenius_pow_sum_eq_sum_pow {R : Type _} [CommRingₓ R] : (p : ℕ) → Prime p → CharP R p → ∀ a b : R, (a + b)^p = a^p + b^p "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "compact_if_all_proper_compact",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"If every proper closed set of a topological space is compact, then the space itself is compact.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "If every proper closed set of a topological space is compact, then the space itself is compact.",
      "codex_time": 4.621345956984442,
      "use_theorem_name": false
    },
    "outputs": [
      "(x : type*) [TopologicalSpace x] (hX : IsCompact x)  : ∀ A : set x, IsCompact A → IsOpen A ∨ A = x ",
      "(x : type*) [TopologicalSpace x]    [CompactSpace x] (hX : ∀ S : set x, IsClosed S → IsCompact S → S = x) :    CompactSpace.IsCompact x ",
      "(x : type*) [TopologicalSpace x] (hX : ∀ A : set x, IsClosed A → A ≠ x → IsCompact A) :  IsCompact x ",
      "(x : type*) [TopologicalSpace x]  (h_prop_IsClosed_Comp : ∀ {m : set x} (h_IsClosed : IsClosed m) (h_proper : m ⊆ᶠ x),  IsCompact m) : IsCompact x ",
      "(x : type*) [topological Space x] (h_Comp : ∀ S : set x, IsClosed S → ¬ IsOpen S → IsCompact S) :  IsCompact x "
    ],
    "answer": "{α : Type _} [TopologicalSpace α] : (∀ (s : Set α), (s ≠ Set.univ) → IsCompact s) → CompactSpace α"
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "compact_if_all_proper_compact",
      "main_prompt": "If every proper closed set of a topological space is compact, then the space itself is compact.",
      "prompt": "Natural language version: \"A closed subset of a compact set is a compact set.\" Translate the natural language version to a Lean mathlib version:\n theorem {α : Type u} [topological_space α] {s t : set α} (hs : is_compact s) (ht : is_closed t) (h : t ⊆ s) :\nis_compact t := \n\nNatural language version: \"A set `s` is compact if for every open cover of `s`, there exists a finite subcover.\" Translate the natural language version to a Lean mathlib version:\n theorem {α : Type u} [topological_space α] {s : set α} (h : ∀ {ι : Type u} (U : ι → set α), (∀ (i : ι), is_open (U i)) → (s ⊆ ⋃ (i : ι), U i) → (∃ (t : finset ι), s ⊆ ⋃ (i : ι) (H : i ∈ t), U i)) :\nis_compact s := \n\nNatural language version: \"The intersection of a compact set and a closed set is a compact set.\" Translate the natural language version to a Lean mathlib version:\n theorem {α : Type u} [topological_space α] {s t : set α} (hs : is_compact s) (ht : is_closed t) :\nis_compact (s ∩ t) := \n\nNatural language version: \"The intersection of a closed set and a compact set is a compact set.\" Translate the natural language version to a Lean mathlib version:\n theorem {α : Type u} [topological_space α] {s t : set α} (ht : is_compact t) (hs : is_closed s) :\nis_compact (s ∩ t) := \n\nNatural language version: \"If every proper closed set of a topological space is compact, then the space itself is compact.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.782024621963501,
          "doc_string": "A closed subset of a compact set is a compact set.",
          "statement": "theorem compact_of_is_closed_subset {α : Type u} [topological_space α] {s t : set α} (hs : is_compact s) (ht : is_closed t) (h : t ⊆ s) : is_compact t"
        },
        {
          "sim_score": 0.6621682643890381,
          "doc_string": "A set `s` is compact if for every open cover of `s`, there exists a finite subcover.",
          "statement": "theorem is_compact_of_finite_subcover {α : Type u} [topological_space α] {s : set α} (h : ∀ {ι : Type u} (U : ι → set α), (∀ (i : ι), is_open (U i)) → (s ⊆ ⋃ (i : ι), U i) → (∃ (t : finset ι), s ⊆ ⋃ (i : ι) (H : i ∈ t), U i)) : is_compact s"
        },
        {
          "sim_score": 0.651668906211853,
          "doc_string": "The intersection of a compact set and a closed set is a compact set.",
          "statement": "theorem is_compact.inter_right {α : Type u} [topological_space α] {s t : set α} (hs : is_compact s) (ht : is_closed t) : is_compact (s ∩ t)"
        },
        {
          "sim_score": 0.6444039344787598,
          "doc_string": "The intersection of a closed set and a compact set is a compact set.",
          "statement": "theorem is_compact.inter_left {α : Type u} [topological_space α] {s t : set α} (ht : is_compact t) (hs : is_closed s) : is_compact (s ∩ t)"
        }
      ],
      "codex_time": 4.641647889016895,
      "search_time": 1.6613354209985118,
      "use_theorem_name": false
    },
    "outputs": [
      "{α : type u} [TopologicalSpace α] {S : set α} (h : ∀ S, IsClosed S ∧ ¬ IsEmpty S → IsCompact S) : IsCompact α ",
      "{α : type u} [TopologicalSpace α] (h : ∀ (S : set α), IsClosed S → S ≠ Univ → IsCompact S) : IsCompact Univ ",
      "{α : type u} [TopologicalSpace α] : (∀ {S : set α} (hs : IsClosed S) (hns : ∀ x, S x → x ≠ x), IsCompact S) → IsCompact α ",
      "{α : type u} [TopologicalSpace α] (h : ∀ (S : set α) (hs : IsClosed S) (hps : proper S), IsCompact S) : IsCompact α ",
      "{α : type u} [TopologicalSpace α] (h : ∀ S, IsClosed S → (S ≠ Univ → IsCompact S)) : IsCompact Univ "
    ],
    "answer": "{α : Type _} [TopologicalSpace α] : (∀ (s : Set α), (s ≠ Set.univ) → IsCompact s) → CompactSpace α"
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "compact_if_all_proper_compact",
      "main_prompt": "If every proper closed set of a topological space is compact, then the space itself is compact.",
      "prompt": "Natural language version: \"If every proper closed set of a topological space is compact, then the space itself is compact.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 5.954007053020177,
      "use_theorem_name": false
    },
    "outputs": [
      "problem2 : ∀ (x : type) [TopologicalSpace x] , (∀ (K : set x), proper K → IsCompact K) → IsCompact x ",
      "iff { P : Prop } { q : Prop } : ( P → q ) → ( q → P ) → P ↔ q ",
      "IsCompact_of_IsClosed_IsCompact {x : top} (h : ∀ U : set x, IsClosed U → IsCompact U) : IsCompact x ",
      "if_every_proper_IsClosed_set_IsCompact_then_original_Space_IsCompact (x : TopologicalSpace α)    (prop_IsClosed_IsCompact : ∀ (Y : set α), proper_Filter Y → IsClosed Y → IsCompact Y) :    IsCompact x ↔ (∀ (Y : set α), IsClosed Y → IsCompact Y) ",
      "Implies_IsCompact_of_IsCompact_of_IsClosed (F: IsCompact B → IsCompact A) (C : IsClosed A) : IsCompact A "
    ],
    "answer": "{α : Type _} [TopologicalSpace α] : (∀ (s : Set α), (s ≠ Set.univ) → IsCompact s) → CompactSpace α"
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "fermat_two_square",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"Every prime that is one greater than a multiple of four can be expressed as the sum of two squares.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "Every prime that is one greater than a multiple of four can be expressed as the sum of two squares.",
      "codex_time": 4.3623252310208045,
      "use_theorem_name": false
    },
    "outputs": [
      "(P : ℕ) :  Prime P → 4 ∣ P - 1 → ∃ A B : ℤ, P = A^2 + B^2 ",
      "(P : ℕ) (hp1k : (1 + P % 4 = 0) ∧ Prime P):  ∃ A B : ℕ, A*A + B*B = P ∧ Gcd A B = 1 ",
      "(P : ℕ) (hp: Nat.Prime P) (h : 4 ∣ P - 1):  ∃ A B : ℕ, A ^ 2 + B ^ 2 = P ",
      "{P : ℕ} (h : P.Prime) (h1 : ∃ n : ℕ, P = n*4+1) :  ∃ (A B : ℕ), A^2 + B^2 = P ",
      "(P : ℕ) (hp : Prime P) (h : P % 4 = 1) : ∃ (A B : ℕ), A^2 + B^2 = P "
    ],
    "answer": ": ∀ p : ℕ, Prime p → (p % 4 = 1) → ∃ a b : ℕ, a ^ 2 + b ^ 2 = p "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "fermat_two_square",
      "main_prompt": "Every prime that is one greater than a multiple of four can be expressed as the sum of two squares.",
      "prompt": "Natural language version: \" **Fermat's theorem on the sum of two squares**. Every prime congruent to 1 mod 4 is the sum of two squares. Also known as **Fermat's Christmas theorem**.\" Translate the natural language version to a Lean mathlib version:\n theorem {p : ℕ} [fact (nat.prime p)] (hp : p % 4 = 1) :\n∃ (a b : ℕ), a ^ 2 + b ^ 2 = p := \n\nNatural language version: \"**Four squares theorem**\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) :\n∃ (a b c d : ℕ), a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 = n := \n\nNatural language version: \"A prime `p` satisfies `p % 2 = 1` if and only if `p ≠ 2`.\" Translate the natural language version to a Lean mathlib version:\n theorem {p : ℕ} [fact (nat.prime p)] :\np % 2 = 1 ↔ p ≠ 2 := \n\nNatural language version: \"The square of the smallest prime factor of a composite number `n` is at most `n`.\" Translate the natural language version to a Lean mathlib version:\n theorem {n : ℕ} (w : 0 < n) (h : ¬nat.prime n) :\nn.min_fac ^ 2 ≤ n := \n\nNatural language version: \"Every prime that is one greater than a multiple of four can be expressed as the sum of two squares.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.6522289514541626,
          "doc_string": " **Fermat's theorem on the sum of two squares**. Every prime congruent to 1 mod 4 is the sum of two squares. Also known as **Fermat's Christmas theorem**.",
          "statement": "theorem nat.prime.sq_add_sq {p : ℕ} [fact (nat.prime p)] (hp : p % 4 = 1) : ∃ (a b : ℕ), a ^ 2 + b ^ 2 = p"
        },
        {
          "sim_score": 0.5913749933242798,
          "doc_string": "**Four squares theorem**",
          "statement": "theorem nat.sum_four_squares (n : ℕ) : ∃ (a b c d : ℕ), a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 = n"
        },
        {
          "sim_score": 0.49175825715065,
          "doc_string": "A prime `p` satisfies `p % 2 = 1` if and only if `p ≠ 2`.",
          "statement": "theorem nat.prime.mod_two_eq_one_iff_ne_two {p : ℕ} [fact (nat.prime p)] : p % 2 = 1 ↔ p ≠ 2"
        },
        {
          "sim_score": 0.48426979780197144,
          "doc_string": "The square of the smallest prime factor of a composite number `n` is at most `n`.",
          "statement": "theorem nat.min_fac_sq_le_self {n : ℕ} (w : 0 < n) (h : ¬nat.prime n) : n.min_fac ^ 2 ≤ n"
        }
      ],
      "codex_time": 5.032618942001136,
      "search_time": 1.6139122870226856,
      "use_theorem_name": false
    },
    "outputs": [
      "{P : ℕ} [Fact (Nat.Prime P)] (h : P % 4 = 3) : ∃ (A B : ℕ), A ^ 2 + B ^ 2 = P ",
      "{P : ℕ} [Fact (Nat.Prime P)] (hp : 1 = P % 4) : ∃ (A B : ℕ), A + B = P ",
      "{P : ℕ} [Fact (Nat.Prime P)] (hp : ∃ k, P = 4 * k + 1) : ∃ (A B : ℕ), A ^ 2 + B ^ 2 = P ",
      "{P : ℕ} [Fact (Nat.Prime P)] (HP : P = Nat.Succ (4*k) ↔                                           Nat.Prime P ∧ P % 2 = 1 ∧ P % 4 = 3) : ∃ (A B : ℕ), A ^ 2 + B ^ 2 = P ",
      "{P : ℕ} [Fact (Nat.Prime P)] (hp : P ≠ 2) (hp : P % 4 = 1) : ∃ (A B : ℕ), (A ^ 2 + B ^ 2 = P) "
    ],
    "answer": ": ∀ p : ℕ, Prime p → (p % 4 = 1) → ∃ a b : ℕ, a ^ 2 + b ^ 2 = p "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "fermat_two_square",
      "main_prompt": "Every prime that is one greater than a multiple of four can be expressed as the sum of two squares.",
      "prompt": "Natural language version: \"Every prime that is one greater than a multiple of four can be expressed as the sum of two squares.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 10.054599094990408,
      "use_theorem_name": false
    },
    "outputs": [
      "une (P : ℕ) (hp : Prime P) (hp1 : P % 4 = 1) : ∃ (A B : ℕ), A^2 + B^2 = P ",
      "Dvd_Add_iff_Left { P : ℕ } ( ha : P ∣ A ) : P ∣ B ↔ P ∣ ( A + B ) ",
      "sums_of_squares_Even_Primes : ∀ P : ℕ, Prime P → P % 4 = 1 → ∃ x y : ℕ, P = x ^ 2 + y ^ 2 ",
      "Zero_or_One_mod_four (n : ℕ) : n % 4 = 0 ∨ n % 4 = 1 ",
      "Sum_of_squares (n : ℕ) : 2 ∣ (n - 1) → ∃ k h : ℕ, k^2 + h^2 = n begin   (intros A B C h),   rw h at A,   rw ← Add_assoc A B C,   rw Add_assoc A B C,   rw Add_comm C B,   rw ← Add_assoc A B C,   rw ← Add_assoc A B C,   rw ← Add_assoc A B C,   rw ← Add_assoc A"
    ],
    "answer": ": ∀ p : ℕ, Prime p → (p % 4 = 1) → ∃ a b : ℕ, a ^ 2 + b ^ 2 = p "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "unit_line_in_or_out_of_euclidean_plane_subset",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"For every subset of the Euclidean plane, there is a line segment of unit length whose endpoints are either both inside the subset or both outside it.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "For every subset of the Euclidean plane, there is a line segment of unit length whose endpoints are either both inside the subset or both outside it.",
      "codex_time": 10.52339810898411,
      "use_theorem_name": false
    },
    "outputs": [
      "(S : set ℝ²) : ∀A B : ℝ², A ≠ B → (A ∈ S ↔  B ∈ S) → ∃C D : ℝ²,  Segment (A, B) = Segment (C, D) ∧ ∥C - D∥ = 1 ",
      "(P : ℝ × ℝ → Prop) : ∀ x y z W, z ≠ W →  P (x, y) → P (z, W) ↔ ∃ (λ F : ℕ → ℝ,   P (F 0, F 1) ∧ P ((F 0 + F 1)/2, (F 1 - F 0)/2) ∧   F 0 + F 1 = 2*z ∧ F 1 - F 0 = 2*W) ",
      "(S : set ℝ^2) : ∃ A B : ℝ^2, dist A B = 1 ∧ (A ∈ S ↔ B ∈ S) ",
      "(S : set (euclidean_plane 2)) :  ∀ x y : euclidean_plane 2, ∥x - y∥ = 1 → ∀ t : ℝ, 0 ≤ t ∧ t ≤ 1 →  x + t • (y - x) ∈ S → y + t • (x - y) ∈ S ",
      "(S : set (Euclidean_plane 2))  (h : set.Nonempty S) (hS : ∀ x y : euclidean_plane,  x ≠ 0 ∧ y ≠ 0 ∧ ∥x∥ = 1 ∧ ∥y∥ = 1 → ∃ C : euclidean_plane,  (∀ t : R, 0 < t → t < 1 → C + t • x ∈ S) ∧  (∀ t : R, 0 < t → t < 1 → C + t • y ∈ S) ∧  (∀ t : R, 0 < t → t < 1 →"
    ],
    "answer": ": ∀ (S : Set $ EuclideanSpace ℝ (Finₓ 2)), ∃ (x y : EuclideanSpace ℝ (Finₓ 2)), (∥x - y∥ = (1 : ℝ)) → (x ∈ S ∧ y ∈ S) ∨ (x ∉ S ∧ y ∉ S) "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "unit_line_in_or_out_of_euclidean_plane_subset",
      "main_prompt": "For every subset of the Euclidean plane, there is a line segment of unit length whose endpoints are either both inside the subset or both outside it.",
      "prompt": "Natural language version: \"If `x ∈ s` and `y ∈ interior s`, then the segment `(x, y]` is included in `interior s`.\" Translate the natural language version to a Lean mathlib version:\n theorem {E : Type u_2} {𝕜 : Type u_3} [linear_ordered_field 𝕜] [add_comm_group E] [module 𝕜 E] [topological_space E] [topological_add_group E] [has_continuous_const_smul 𝕜 E] {s : set E} (hs : convex 𝕜 s) {x y : E} (hx : x ∈ s) (hy : y ∈ interior s) {t : 𝕜} (ht : t ∈ set.Ioc 0 1) :\nx + t • (y - x) ∈ interior s := \n\nNatural language version: \" If `x ≠ y` belong to the same closed ball, then the open segment with endpoints `x` and `y` is included in the corresponding open ball.\" Translate the natural language version to a Lean mathlib version:\n theorem {E : Type u_2} [normed_group E] [normed_space ℝ E] [strict_convex_space ℝ E] {x y z : E} {r : ℝ} (hx : x ∈ metric.closed_ball z r) (hy : y ∈ metric.closed_ball z r) (hne : x ≠ y) :\nopen_segment ℝ x y ⊆ metric.ball z r := \n\nNatural language version: \" If a subset of a real vector space contains a segment, then the direction of this segment belongs to the tangent cone at its endpoints.\" Translate the natural language version to a Lean mathlib version:\n theorem {G : Type u_4} [normed_group G] [normed_space ℝ G] {s : set G} {x y : G} (h : segment ℝ x y ⊆ s) :\ny - x ∈ tangent_cone_at ℝ s x := \n\nNatural language version: \"If `x ∈ closure s` and `y ∈ interior s`, then the segment `(x, y]` is included in `interior s`.\" Translate the natural language version to a Lean mathlib version:\n theorem {E : Type u_2} {𝕜 : Type u_3} [linear_ordered_field 𝕜] [add_comm_group E] [module 𝕜 E] [topological_space E] [topological_add_group E] [has_continuous_const_smul 𝕜 E] {s : set E} (hs : convex 𝕜 s) {x y : E} (hx : x ∈ closure s) (hy : y ∈ interior s) {t : 𝕜} (ht : t ∈ set.Ioc 0 1) :\nx + t • (y - x) ∈ interior s := \n\nNatural language version: \"For every subset of the Euclidean plane, there is a line segment of unit length whose endpoints are either both inside the subset or both outside it.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.5471247434616089,
          "doc_string": "If `x ∈ s` and `y ∈ interior s`, then the segment `(x, y]` is included in `interior s`.",
          "statement": "theorem convex.add_smul_sub_mem_interior {E : Type u_2} {𝕜 : Type u_3} [linear_ordered_field 𝕜] [add_comm_group E] [module 𝕜 E] [topological_space E] [topological_add_group E] [has_continuous_const_smul 𝕜 E] {s : set E} (hs : convex 𝕜 s) {x y : E} (hx : x ∈ s) (hy : y ∈ interior s) {t : 𝕜} (ht : t ∈ set.Ioc 0 1) : x + t • (y - x) ∈ interior s"
        },
        {
          "sim_score": 0.5154375433921814,
          "doc_string": " If `x ≠ y` belong to the same closed ball, then the open segment with endpoints `x` and `y` is included in the corresponding open ball.",
          "statement": "theorem open_segment_subset_ball_of_ne {E : Type u_2} [normed_group E] [normed_space ℝ E] [strict_convex_space ℝ E] {x y z : E} {r : ℝ} (hx : x ∈ metric.closed_ball z r) (hy : y ∈ metric.closed_ball z r) (hne : x ≠ y) : open_segment ℝ x y ⊆ metric.ball z r"
        },
        {
          "sim_score": 0.5063760280609131,
          "doc_string": " If a subset of a real vector space contains a segment, then the direction of this segment belongs to the tangent cone at its endpoints.",
          "statement": "theorem mem_tangent_cone_of_segment_subset {G : Type u_4} [normed_group G] [normed_space ℝ G] {s : set G} {x y : G} (h : segment ℝ x y ⊆ s) : y - x ∈ tangent_cone_at ℝ s x"
        },
        {
          "sim_score": 0.5046789050102234,
          "doc_string": "If `x ∈ closure s` and `y ∈ interior s`, then the segment `(x, y]` is included in `interior s`.",
          "statement": "theorem convex.add_smul_sub_mem_interior' {E : Type u_2} {𝕜 : Type u_3} [linear_ordered_field 𝕜] [add_comm_group E] [module 𝕜 E] [topological_space E] [topological_add_group E] [has_continuous_const_smul 𝕜 E] {s : set E} (hs : convex 𝕜 s) {x y : E} (hx : x ∈ closure s) (hy : y ∈ interior s) {t : 𝕜} (ht : t ∈ set.Ioc 0 1) : x + t • (y - x) ∈ interior s"
        }
      ],
      "codex_time": 11.452028172992868,
      "search_time": 1.4950008899904788,
      "use_theorem_name": false
    },
    "outputs": [
      "∀ (S : set ℝ²) (t : set.ioc 0 1), ∃ (A B : ℝ²), (A, B) ∈ (Segment_def ℝ 1) ∧ (∀ (t : 𝕜",
      "{E : type u_2} [NormedGroup E] [NormedSpace ℝ E] (S : set E) (x y : E) : ∃z, z ∈ Metric.Ball ℝ x 1 ∧ z ∈ Metric.Ball ℝ y 1 ∧ (z ∈ S ↔ x ∈ S) ",
      "{ℝ_2 : type u_2} [InnerProductSpace ℝ ℝ_2] {S : set ℝ_2} (t : AffineIndependent ℝ S) : ∃ x y : ℝ_2, ∥x - y∥ = 1 ∧ sign_condition ℝ S x y ",
      "{E : type u_2} {𝕜 : type u_3} [NormedField 𝕜] [NormedGroup E] [NormedSpace 𝕜 E] {S : set E} (hs : Simplex 𝕜 S) :   ∃ x y : E , x ∈ Closure S ∧ (y ∈ Interior S ∨ y ∈ Closure (Univ \\ S)) ∧ Abs (y - x) = 1 ",
      "{E : type u_2} {𝕜 : type u_3} [Linear_ordered_Field 𝕜] [AddCommGroup E] [module 𝕜 E] [TopologicalSpace E] [bounded_Linear_ordered_Field 𝕜] [topological_AddGroup E] [has_Continuous_Const_Smul 𝕜 E] {S : set E} {x y : E} (h : ~(Interior S = ∅)) : ∃ θ : ℝ, θ ∈ set.ioc 0 (2 * π) ∧ (λ (t :"
    ],
    "answer": ": ∀ (S : Set $ EuclideanSpace ℝ (Finₓ 2)), ∃ (x y : EuclideanSpace ℝ (Finₓ 2)), (∥x - y∥ = (1 : ℝ)) → (x ∈ S ∧ y ∈ S) ∨ (x ∉ S ∧ y ∉ S) "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "unit_line_in_or_out_of_euclidean_plane_subset",
      "main_prompt": "For every subset of the Euclidean plane, there is a line segment of unit length whose endpoints are either both inside the subset or both outside it.",
      "prompt": "Natural language version: \"For every subset of the Euclidean plane, there is a line segment of unit length whose endpoints are either both inside the subset or both outside it.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 7.01500216400018,
      "use_theorem_name": false
    },
    "outputs": [
      "Decidable_Path (P : line) (S : set m) ",
      "in_Unit_seg (P q : ℝ²) : P ∈ Unit_seg P q → P ∈ Unit_seg q P ∨ q ∈ Unit_seg P q.  -- However, an attempt to prove this just by working through the definition of ℝ² leads to A mess. -- Let'S try A new approach.  /-- When two points in the R^2 plane lie on the same Unit-length line Segment, we say they are *aligned*. -/ def aligned (P q : ℝ²) : Prop ",
      "Subset_Segment {E : type*} [Inhabited E] [AddCommGroup E] [Distrib_MulAction E R_ns] [NormedGroup E] [NormedSpace ℝ E] (S : set E) : ∃ (A B : E), (A ∈ S ∧ B ∈ S) ∨ (A ∉ S ∧ B ∉ S) ∧ dist A B = 1 ",
      "bin_witt: ∀ S: set ℝ², ∃ A B: ℝ², dist A B = 1 ∧ (A ∈ S ↔ B ∈ S) ",
      "_intersecting :  ∀ (x : set ℝ²), ∃ A B:point, A≠B ∧ (A∈x ↔ B∈x)    theorem _intersecting :  ∀ (x : set ℝ²), ∃ (A B:point), A≠B ∧ (A∈x ↔ B∈x)  *)  variables P q : Prop   -- biconditional notation P ↔ q : 10 "
    ],
    "answer": ": ∀ (S : Set $ EuclideanSpace ℝ (Finₓ 2)), ∃ (x y : EuclideanSpace ℝ (Finₓ 2)), (∥x - y∥ = (1 : ℝ)) → (x ∈ S ∧ y ∈ S) ∨ (x ∉ S ∧ y ∉ S) "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "all_idempotent_implies_commutative",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"A ring with all elements idempotent is commutative.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "A ring with all elements idempotent is commutative.",
      "codex_time": 5.970071902003838,
      "use_theorem_name": false
    },
    "outputs": [
      "(R : type*) [Ring R]  (h : ∀ (x : R), x * x = x) : CommRing R ",
      "(A : type*) [CommRing A]  (hA : ∀ (A : A), A^2 = A) : (∀ (A B : A), A*B = B*A) ",
      "(R : type*) [CommRing R] (h : ∀ A : R, A ^ 2 = A) :  @commutative R _ ",
      "(R : type*) [Ring R] (h : ∀ A : R, A^2 = A) :  CommRing.comm R ",
      "(R : type*) [Ring R] (h : ∀ x : R, x + x = x) :  CommRing R"
    ],
    "answer": "{R : Type _} [Ring R] : (∀ x : R, x * x = 1) → CommRing R "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "all_idempotent_implies_commutative",
      "main_prompt": "A ring with all elements idempotent is commutative.",
      "prompt": "Natural language version: \"The identity map is a ring homomorphism.\" Translate the natural language version to a Lean mathlib version:\n theorem {α : Type u} [ring α] :\nis_ring_hom id := \n\nNatural language version: \"As submodules, subalgebras are idempotent.\" Translate the natural language version to a Lean mathlib version:\n theorem {R : Type u_1} {A : Type u_2} [comm_semiring R] [semiring A] [algebra R A] (S : subalgebra R A) :\nS.to_submodule * S.to_submodule = S.to_submodule := \n\nNatural language version: \"Two subrings are equal if they have the same elements.\" Translate the natural language version to a Lean mathlib version:\n theorem {R : Type u} [ring R] {S T : subring R} (h : ∀ (x : R), x ∈ S ↔ x ∈ T) :\nS = T := \n\nNatural language version: \"The map sending a binary relation to the smallest additive congruence relation in which it is contained is idempotent.\" Translate the natural language version to a Lean mathlib version:\n theorem {M : Type u_1} [has_add M] (r : M → M → Prop) :\nadd_con_gen ⇑(add_con_gen r) = add_con_gen r := \n\nNatural language version: \"A ring with all elements idempotent is commutative.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.6198770999908447,
          "doc_string": "The identity map is a ring homomorphism.",
          "statement": "theorem is_ring_hom.id {α : Type u} [ring α] : is_ring_hom id"
        },
        {
          "sim_score": 0.6067196130752563,
          "doc_string": "As submodules, subalgebras are idempotent.",
          "statement": "theorem subalgebra.mul_self {R : Type u_1} {A : Type u_2} [comm_semiring R] [semiring A] [algebra R A] (S : subalgebra R A) : S.to_submodule * S.to_submodule = S.to_submodule"
        },
        {
          "sim_score": 0.5843548774719238,
          "doc_string": "Two subrings are equal if they have the same elements.",
          "statement": "theorem subring.ext {R : Type u} [ring R] {S T : subring R} (h : ∀ (x : R), x ∈ S ↔ x ∈ T) : S = T"
        },
        {
          "sim_score": 0.5717903971672058,
          "doc_string": "The map sending a binary relation to the smallest additive congruence relation in which it is contained is idempotent.",
          "statement": "theorem add_con.add_con_gen_idem {M : Type u_1} [has_add M] (r : M → M → Prop) : add_con_gen ⇑(add_con_gen r) = add_con_gen r"
        }
      ],
      "codex_time": 4.747569280007156,
      "search_time": 1.448395250015892,
      "use_theorem_name": false
    },
    "outputs": [
      "{α : type u} [Ring α] (h : ∀ x, x * x = x) : CommRing α ",
      "{R : type u} [Ring R] (h : ∀ (x : R), x + x = x) : IsCommutative R ",
      "{R : type u} [Ring R] (h : ∀ x : R, x * x = x) : _CommRing R ",
      "{R : type u} [Ring R] (h : ∀ (x : R), x^2 = x) : commutative R ",
      "{R : type u} [Ring R] (h : ∀ (x : R), x * x = x) : _CommRing R "
    ],
    "answer": "{R : Type _} [Ring R] : (∀ x : R, x * x = 1) → CommRing R "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "all_idempotent_implies_commutative",
      "main_prompt": "A ring with all elements idempotent is commutative.",
      "prompt": "Natural language version: \"A ring with all elements idempotent is commutative.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 8.27048383501824,
      "use_theorem_name": false
    },
    "outputs": [
      "CommRing_idempotent.intro {R} [CommRing R]    (h_Eq : ∀ x : R, x * x = x) : CommRing.commutes R ",
      "Ring.One_idempotent {α : type} [CommRing α]  (h : ∀ (A : α), A + A = A) : 1 = 0 ",
      "{u v x} [CommRing k] (h : Ideal.Span k {u,v}) (hx : h.1 = x) : x ∈ h ",
      "idem__comm (R : type) [Ring R] (h : ∀ x : R, x * x = x) : commutative R ",
      "all_idempotent_Implies_commutative ( R : type ) ( addition : R -> R -> R ) ( arbitrary_identity : R )  ( multiplication : R -> R -> R ) ( identity_element : R ) ( addition_IsCommutative : ∀ x y : R , addition x y = addition y x )  ( Right_distributive :  proof_by_contradiction : Proof by contradiction - in mathlib methodology slide #16 https://github.com/leanprover-community/mathlib/pull/3196 -/  IsOpen classical variable (R : type) variable [Ring R] variables A B C D"
    ],
    "answer": "{R : Type _} [Ring R] : (∀ x : R, x * x = 1) → CommRing R "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "twin_prime_conjecture",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"There are infinitely many pairs of primes that differ exactly by two.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "There are infinitely many pairs of primes that differ exactly by two.",
      "codex_time": 6.226274352986366,
      "use_theorem_name": false
    },
    "outputs": [
      ": ∃ n : ℕ, n > 1 ∧ ∀ i : ℕ, i < n → ∃ P q : ℕ, P < q ∧ P.Prime ∧ q.Prime ∧ q = P + 2 ",
      ": ∃ (P q : ℕ), Prime P ∧ Prime q ∧ P + 2 = q ",
      ": ∃ (x e : ℕ), x ≠ 2 ∧ x + 2 = e ∧ Prime x ∧ Prime e ",
      ":  ∃ (P q : ℕ) (hp : Prime P) (hq : Prime q), 2 = q - P ",
      ": ∀ m : ℕ, ∃ P q : ℕ, Prime P ∧ Prime q ∧ P - q = 2 "
    ],
    "answer": ": ∀ n : ℕ, ∃ p : ℕ, p > n → Prime p → Prime (p + 2) "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "twin_prime_conjecture",
      "main_prompt": "There are infinitely many pairs of primes that differ exactly by two.",
      "prompt": "Natural language version: \"For any positive `k : ℕ` there are infinitely many primes `p` such that `p ≡ 1 [MOD k]`.\" Translate the natural language version to a Lean mathlib version:\n theorem {k : ℕ} (n : ℕ) (hpos : 0 < k) :\n∃ (p : ℕ), nat.prime p ∧ n ≤ p ∧ p ≡ 1 [MOD k] := \n\nNatural language version: \" Euclid's theorem on the **infinitude of primes**. Here given in the form: for every `n`, there exists a prime number `p ≥ n`.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) :\n∃ (p : ℕ), n ≤ p ∧ nat.prime p := \n\nNatural language version: \"The infinite pigeonhole principle\" Translate the natural language version to a Lean mathlib version:\n theorem {β α : Type u} (f : β → α) (h₁ : cardinal.aleph_0 ≤ cardinal.mk β) (h₂ : cardinal.mk α < (cardinal.mk β).ord.cof) :\n∃ (a : α), cardinal.mk ↥(f ⁻¹' {a}) = cardinal.mk β := \n\nNatural language version: \"A prime `p` satisfies `p % 2 = 1` if and only if `p ≠ 2`.\" Translate the natural language version to a Lean mathlib version:\n theorem {p : ℕ} [fact (nat.prime p)] :\np % 2 = 1 ↔ p ≠ 2 := \n\nNatural language version: \"There are infinitely many pairs of primes that differ exactly by two.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.53578782081604,
          "doc_string": "For any positive `k : ℕ` there are infinitely many primes `p` such that `p ≡ 1 [MOD k]`.",
          "statement": "theorem nat.exists_prime_ge_modeq_one {k : ℕ} (n : ℕ) (hpos : 0 < k) : ∃ (p : ℕ), nat.prime p ∧ n ≤ p ∧ p ≡ 1 [MOD k]"
        },
        {
          "sim_score": 0.525439977645874,
          "doc_string": " Euclid's theorem on the **infinitude of primes**. Here given in the form: for every `n`, there exists a prime number `p ≥ n`.",
          "statement": "theorem nat.exists_infinite_primes (n : ℕ) : ∃ (p : ℕ), n ≤ p ∧ nat.prime p"
        },
        {
          "sim_score": 0.5173879861831665,
          "doc_string": "The infinite pigeonhole principle",
          "statement": "theorem ordinal.infinite_pigeonhole {β α : Type u} (f : β → α) (h₁ : cardinal.aleph_0 ≤ cardinal.mk β) (h₂ : cardinal.mk α < (cardinal.mk β).ord.cof) : ∃ (a : α), cardinal.mk ↥(f ⁻¹' {a}) = cardinal.mk β"
        },
        {
          "sim_score": 0.48807522654533386,
          "doc_string": "A prime `p` satisfies `p % 2 = 1` if and only if `p ≠ 2`.",
          "statement": "theorem nat.prime.mod_two_eq_one_iff_ne_two {p : ℕ} [fact (nat.prime p)] : p % 2 = 1 ↔ p ≠ 2"
        }
      ],
      "codex_time": 11.843190373998368,
      "search_time": 1.6370324949966744,
      "use_theorem_name": false
    },
    "outputs": [
      ": ∀n, ∃[Fact (Nat.Prime P)] [Fact (Nat.Prime (P + 2))], P > n ",
      ": ∀ n, ∃ P q, Nat.Prime P ∧ Nat.Prime q ∧ P + 2 = q ",
      ": ∀ (n : ℕ), ∃ (pp : ℕ), Nat.Prime pp ∧ ∃ (pp' : ℕ), Nat.Prime pp' ∧ pp'=pp+2 ",
      "(P q : ℕ) : Nat.Prime P → Nat.Prime q → ∃ (r : ℕ), Nat.Prime r ∧ ∃ (S : ℕ), Nat.Prime S ∧ P + 2 = r ∧ q + 2 = S ",
      "{P q : ℕ} [Fact (Nat.Prime P)] [Fact (Nat.Prime q)] (h₁ : P ≠ q) : ∃ (k : ℕ) (hp ha : Nat.Prime (2 * k + 1)) (h₂ : P = 2 * k + 1 ∨ q = 2 * k + 1), (2 * k + 1 = P ∨ 2 * k + 1 = q) ∧ (2 * k + 1 = P ∨ (2 * k + 2) = q) "
    ],
    "answer": ": ∀ n : ℕ, ∃ p : ℕ, p > n → Prime p → Prime (p + 2) "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "twin_prime_conjecture",
      "main_prompt": "There are infinitely many pairs of primes that differ exactly by two.",
      "prompt": "Natural language version: \"There are infinitely many pairs of primes that differ exactly by two.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 8.058844143990427,
      "use_theorem_name": false
    },
    "outputs": [
      "two_Prime_pairs : ∃ (x y : ℕ), Prime x ∧ Prime y ∧ y = x + 2 ",
      "Some_theorem : ∀ P : ℕ , Prime P → ∃ q : ℕ , Prime q ∧ P + 2 = q ",
      "twin_Prime_theorem : ∀ A B : ℕ, ∃ P q : ℕ, P < q ∧ P % 2 = 1 ∧ q % 2 = 1 ∧ q - P = 2",
      "my_theorem : ∃ (A B : ℕ), Prime A ∧ Prime B ∧ B = A + 2  ",
      "two_Primes_differ_by_two : \"∀n::ℕ, ∃ P q::ℕ, Prime P ∧ Prime q ∧ P - q = 2\" Your definition should use the definition of Primes we saw in the lecture video. 4. Prove the theorem we just defined! 5. Explain the proof to your neighbor! *)  --You should be able to use the following theorem (proved in class):  theorem n_Prime_Ge_2 : \"∀n::ℕ, Prime n → n ≥ 2\" proof (induction n) case 0 assume h1 : \"Prime 0\""
    ],
    "answer": ": ∀ n : ℕ, ∃ p : ℕ, p > n → Prime p → Prime (p + 2) "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "fin_div_ring_is_field",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"Every finite division ring is a field.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "Every finite division ring is a field.",
      "codex_time": 5.80271166501916,
      "use_theorem_name": false
    },
    "outputs": [
      "(F : type*) [Field F] (P : F ≠ 0)  (h0 : ∀ x : F, x ≠ 0 → ∃ y : F, x * y = 1) :  Finite_dimension F Nat ",
      "(D : type*) [DivisionRing D] (n : ℕ)  (hD : Finite_dimensional D ℤ n) : _Field D ",
      "(D : type*) [DivisionRing D] [Fintype D] : _Field D ",
      "(D : type*) [Fintype D] [DivisionRing D] :  Field D ",
      "(R : type*) [DivisionRing R] [Fintype R] :  Field R "
    ],
    "answer": "{R : Type _} [DivisionRing R] [Finite R] : Field R "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "fin_div_ring_is_field",
      "main_prompt": "Every finite division ring is a field.",
      "prompt": "Natural language version: \"A subfield is closed under division.\" Translate the natural language version to a Lean mathlib version:\n theorem {K : Type u} [field K] (s : subfield K) {x y : K} :\nx ∈ s → y ∈ s → x / y ∈ s := \n\nNatural language version: \"A division_ring is one-dimensional as a vector space over itself.\" Translate the natural language version to a Lean mathlib version:\n theorem (K : Type u) [division_ring K] :\nfinite_dimensional.finrank K K = 1 := \n\nNatural language version: \"An intermediate field is closed under division.\" Translate the natural language version to a Lean mathlib version:\n theorem {K : Type u_1} {L : Type u_2} [field K] [field L] [algebra K L] (S : intermediate_field K L) {x y : L} :\nx ∈ S → y ∈ S → x / y ∈ S := \n\nNatural language version: \"A subfield is closed under multiplication.\" Translate the natural language version to a Lean mathlib version:\n theorem {K : Type u} [field K] (s : subfield K) {x y : K} :\nx ∈ s → y ∈ s → x * y ∈ s := \n\nNatural language version: \"Every finite division ring is a field.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.6756068468093872,
          "doc_string": "A subfield is closed under division.",
          "statement": "theorem subfield.div_mem {K : Type u} [field K] (s : subfield K) {x y : K} : x ∈ s → y ∈ s → x / y ∈ s"
        },
        {
          "sim_score": 0.6545361280441284,
          "doc_string": "A division_ring is one-dimensional as a vector space over itself.",
          "statement": "theorem finite_dimensional.finrank_self (K : Type u) [division_ring K] : finite_dimensional.finrank K K = 1"
        },
        {
          "sim_score": 0.6345528364181519,
          "doc_string": "An intermediate field is closed under division.",
          "statement": "theorem intermediate_field.div_mem {K : Type u_1} {L : Type u_2} [field K] [field L] [algebra K L] (S : intermediate_field K L) {x y : L} : x ∈ S → y ∈ S → x / y ∈ S"
        },
        {
          "sim_score": 0.62082839012146,
          "doc_string": "A subfield is closed under multiplication.",
          "statement": "theorem subfield.mul_mem {K : Type u} [field K] (s : subfield K) {x y : K} : x ∈ s → y ∈ s → x * y ∈ s"
        }
      ],
      "codex_time": 3.1822543120069895,
      "search_time": 1.5387114559998736,
      "use_theorem_name": false
    },
    "outputs": [
      "(K : type u) [Fintype K] [DivisionRing K] : Field K ",
      "{K : type u} [Fintype K] [DivisionRing K] : Field K ",
      "(K : type u) [DivisionRing K] (S : Finite_dimensional.finrank K K < WithTop.ω) : _Field K ",
      "(K : type u) [DivisionRing K] [Fintype K] : _Field_of_Fintype K ",
      "{K : type u} [DivisionRing K] (h : Finite K) : Field K "
    ],
    "answer": "{R : Type _} [DivisionRing R] [Finite R] : Field R "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "fin_div_ring_is_field",
      "main_prompt": "Every finite division ring is a field.",
      "prompt": "Natural language version: \"Every finite division ring is a field.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 8.327289648994338,
      "use_theorem_name": false
    },
    "outputs": [
      "FiniteDivisionRingField: -- This  the ---revised--- version of the theorem. -- You have to prove the theorem, this  just its statement.      ∀(F : type), ∀(D : DivisionRing F), addition D ∧ multiplication D ∧ One D ∧ Zero D ∧ negation D ∧ Inv D ∧ Finite D → Field F   -- Bonus Prove the differences between Finite division Ring and Field. ie: example:      ∃(D : DivisionRing ℕ), Finite D ∧ ¬(Field D)  end FiniteDivisionRingField   namespace FiniteDivisionRingFinite",
      "DivisionRing_example {R : type*} [DivisionRing R] (h : ∃ n : ℕ, n ≠ 0 ∧ (n : R) ≠ 1) : False ",
      "endom_Eq_Field_of_Finite_endom_Eq_Fin_DivisionRing (R : type) [DivisionRing R] (D : set R) [Fintype D] (F : D → D) [_AddGroup_hom F] : D = set.Range F → ∃ g : D → R, _AddGroup_hom g ∧ IsScalarTower g F ∧  ∀ (i j : D), i ≠ j → g i * g j = 0 ",
      "t : Fin_Ring_Field D   4) A toy version:  ```  structure my_type ",
      "this_theorem__True : ∀ (D : type*) [DivisionRing D] (F : Fintype D), Field D --#check this_theorem__True IsOpen_locale classical IsOpen_locale classical --#check this_theorem__True example : this_theorem__True ℤ [Fintype ℤ] Int.Mk' "
    ],
    "answer": "{R : Type _} [DivisionRing R] [Finite R] : Field R "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "am_gm_ineq",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"The product of two positive numbers is at most the square of their average.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "The product of two positive numbers is at most the square of their average.",
      "codex_time": 5.155484684015391,
      "use_theorem_name": false
    },
    "outputs": [
      "(A B : ℝ) (h : 0 < A) (h2 : 0 < B) :  2*A*B / 2 ≤ ((A+B)/2)^2 ",
      "(x y : ℝ) (hx0 hy0 : 0 ≤ x) (hyx : y ≤ x):  x * y ≤ (x + y)^2 / 4 ",
      "(A B : ℝ) (ha : 0 < A) (hb : 0 < B) :  (2 : ℝ) * A * B / ((2 : ℝ) * A + (2 : ℝ) * B) ≤ (A+B)/(2:ℝ) ",
      "(A B : ℝ) (h_A : 0 < A) (h_B : 0 < B) : A * B ≤ (A + B) ^ 2 / 4 ",
      "(A B : ℝ) (ha : 0 ≤ A) (hb : 0 ≤ B) :  A * B ≤ (A + B)^2 / 2 "
    ],
    "answer": ": ∀ (a b : ℝ), a > 0 → b > 0 → a * b ≤ ((a + b)/(1 + 1))^2 "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "am_gm_ineq",
      "main_prompt": "The product of two positive numbers is at most the square of their average.",
      "prompt": "Natural language version: \" The geometric mean is less than or equal to the arithmetic mean, weighted version for two `nnreal` numbers.\" Translate the natural language version to a Lean mathlib version:\n theorem (w₁ w₂ p₁ p₂ : nnreal) :\nw₁ + w₂ = 1 → p₁ ^ ↑w₁ * p₂ ^ ↑w₂ ≤ w₁ * p₁ + w₂ * p₂ := \n\nNatural language version: \"The square of the smallest prime factor of a composite number `n` is at most `n`.\" Translate the natural language version to a Lean mathlib version:\n theorem {n : ℕ} (w : 0 < n) (h : ¬nat.prime n) :\nn.min_fac ^ 2 ≤ n := \n\nNatural language version: \" AM-GM inequality: the **geometric mean is less than or equal to the arithmetic mean**, weighted version for real-valued nonnegative functions.\" Translate the natural language version to a Lean mathlib version:\n theorem {ι : Type u} (s : finset ι) (w z : ι → ℝ) (hw : ∀ (i : ι), i ∈ s → 0 ≤ w i) (hw' : s.sum (λ (i : ι), w i) = 1) (hz : ∀ (i : ι), i ∈ s → 0 ≤ z i) :\ns.prod (λ (i : ι), z i ^ w i) ≤ s.sum (λ (i : ι), w i * z i) := \n\nNatural language version: \"The natural square root is at most the real square root\" Translate the natural language version to a Lean mathlib version:\n theorem {a : ℕ} :\n↑(nat.sqrt a) ≤ real.sqrt ↑a := \n\nNatural language version: \"The product of two positive numbers is at most the square of their average.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.5334862470626831,
          "doc_string": " The geometric mean is less than or equal to the arithmetic mean, weighted version for two `nnreal` numbers.",
          "statement": "theorem nnreal.geom_mean_le_arith_mean2_weighted (w₁ w₂ p₁ p₂ : nnreal) : w₁ + w₂ = 1 → p₁ ^ ↑w₁ * p₂ ^ ↑w₂ ≤ w₁ * p₁ + w₂ * p₂"
        },
        {
          "sim_score": 0.5259432196617126,
          "doc_string": "The square of the smallest prime factor of a composite number `n` is at most `n`.",
          "statement": "theorem nat.min_fac_sq_le_self {n : ℕ} (w : 0 < n) (h : ¬nat.prime n) : n.min_fac ^ 2 ≤ n"
        },
        {
          "sim_score": 0.5007948279380798,
          "doc_string": " AM-GM inequality: the **geometric mean is less than or equal to the arithmetic mean**, weighted version for real-valued nonnegative functions.",
          "statement": "theorem real.geom_mean_le_arith_mean_weighted {ι : Type u} (s : finset ι) (w z : ι → ℝ) (hw : ∀ (i : ι), i ∈ s → 0 ≤ w i) (hw' : s.sum (λ (i : ι), w i) = 1) (hz : ∀ (i : ι), i ∈ s → 0 ≤ z i) : s.prod (λ (i : ι), z i ^ w i) ≤ s.sum (λ (i : ι), w i * z i)"
        },
        {
          "sim_score": 0.4941546320915222,
          "doc_string": "The natural square root is at most the real square root",
          "statement": "theorem real.nat_sqrt_le_real_sqrt {a : ℕ} : ↑(nat.sqrt a) ≤ real.sqrt ↑a"
        }
      ],
      "codex_time": 7.779130658018403,
      "search_time": 1.465386819007108,
      "use_theorem_name": false
    },
    "outputs": [
      "(x y : ℝ) (hx0 : 0 < x) (hy0 : 0 < y) : x * y ≤ x + y ",
      "{A B : ℝ} (h : 0 < A) (h' : 0 < B) : A * B ≤ (A + B) ^ 2 / 4. ",
      "{A B : ℝ} (ha : 0 < A) (hb : 0 < B) : A * B ≤ (A + B) ^ 2 / 4 ",
      "{A B : ℝ} (ha : 0 ≤ A) (hb : 0 ≤ B) : A * B ≤ (A + B)^2 / 2 ",
      "{A B : ℝ} (h₁ : 0 ≤ A) (h₂ : 0 ≤ B) : A * B ≤ ((A + B) / 2) ^ 2 "
    ],
    "answer": ": ∀ (a b : ℝ), a > 0 → b > 0 → a * b ≤ ((a + b)/(1 + 1))^2 "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "am_gm_ineq",
      "main_prompt": "The product of two positive numbers is at most the square of their average.",
      "prompt": "Natural language version: \"The product of two positive numbers is at most the square of their average.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 10.786587082984624,
      "use_theorem_name": false
    },
    "outputs": [
      "q3709 : ∀ A B : ℝ , A > 0 → B > 0 → A * B ≤ ( A + B ) / 2 ^ 2 ",
      "two ( x y : ℝ ) : 0 < x → 0 < y → x * y ≤ ( x + y ) / 2 * ( x + y ) / 2 ",
      "two_Pos_Product_LE_aver_square :  /- Let A and B be positive Real numbers. Prove that the  Product of A and B  at most the square of their average.-/  begin     assume A B : ℝ,     assume ha : A > 0,     assume hb : B > 0,     have haver : (2 : ℝ)⁻¹ * (A + B)² ≥ (2 : ℝ)⁻¹ * ⟨A, B, ha, hb⟩,         have h1 : (2 : ℝ)⁻¹ * (A + B)",
      "sqrt_LE_avg : ∀ A B : ℝ, A * B ≤ (A + B)^2 ",
      "Prod_LE_Prod_mean (A B : ℕ) : A * B ≤ (A + B)^2 "
    ],
    "answer": ": ∀ (a b : ℝ), a > 0 → b > 0 → a * b ≤ ((a + b)/(1 + 1))^2 "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "sylvester_gallai",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"In any configuration of points on the plane, not all on a line, there is a line which contains exactly two of the points.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "In any configuration of points on the plane, not all on a line, there is a line which contains exactly two of the points.",
      "codex_time": 5.38002449600026,
      "use_theorem_name": false
    },
    "outputs": [
      "(α : type) [AddCommGroup α] [Vector_Space ℝ α]  (P : α) (hs : ∀ q : α, q ≠ P → Fintype { r : α | q - P = r }) : ∃ L : Submodule ℝ α, L ≠ ⊥ ∧ Finite L ⊓ Span ℝ {P} = ⊥ ",
      "(S : set (point ℝ)) (h1 : ∃ x y : ℝ, x ≠ y)  (h2 : ∀ A B : ℝ, ∃ C : ℝ, ∀ x y ∈ S, (A*x + B*y) ≠ C) :  ∃ L : line ℝ, set.Card (L ∩ S) = 2 ",
      "(points : set (point ℝ 2)) (hpoints : Card points ≥ 3):  ∃ Path : (point ℝ 2) → (point ℝ 2) → Prop,  ∃ A B : (point ℝ 2), _Path A B Path ∧ A ≠ B ∧ Card {x | x ∈ points ∧ Path A B x} = 2 ∧  ∀ A B C, _Path A B Path → {x : point ℝ 2 | x ∈ points ∕\\ Path A B x} ≠ {C} ",
      "(P : type*) [Fintype P] [AddCommGroup P] [Vector_Space ℝ P] [affine_Space P]  (points : Finite_image P ℂ) (n : ℕ) (hn : n > 0) (hn' : n > 4)  (hnonaligned : ¬ (∃ (r : ℝ), ∀ P ∈ points.val, Coe r * (P : P) ∈ points.val)) :  ∃ (l : P → ℝ), ∃ P_1, P_2 : P, P_1 ≠ P_2 ∧ l P_1",
      "(x : type*) [Fintype x] (F : x → ℝ^2)  (hF : (∀ P : {P : x × x // P.1 ≠ P.2},               (∀ i : (Fin 2), F i.1 = F i.2 → False)) → False) :  ∃ P : {P : x × x // P.1 ≠ P.2}, ∀ L : {L : ℝ × ℝ // L.1 ≠ L.2} × (Fin 1) × (Fin 2),  F P.1 = (L.1).1 + ↑L.2.1 *"
    ],
    "answer": "{P L : Type _} [HasMem P L] [Membership P L] [Configuration.Nondegenerate P L] : ∃ (l : L) (p q : P), p ∈ l → q ∈ l → (∀ r : P, r ∈ l → r = p ∨ r = q) "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "sylvester_gallai",
      "main_prompt": "In any configuration of points on the plane, not all on a line, there is a line which contains exactly two of the points.",
      "prompt": "Natural language version: \"A single point is collinear.\" Translate the natural language version to a Lean mathlib version:\n theorem (k : Type u_1) {V : Type u_2} {P : Type u_3} [division_ring k] [add_comm_group V] [module k V] [add_torsor V P] (p : P) :\ncollinear k {p} := \n\nNatural language version: \"If a nondegenerate configuration has at least as many points as lines, then there exists  an injective function `f` from lines to points, such that `f l` does not lie on `l`.\" Translate the natural language version to a Lean mathlib version:\n theorem {P L : Type u} [has_mem P L] [configuration.nondegenerate P L] [fintype P] [fintype L] (h : fintype.card L ≤ fintype.card P) :\n∃ (f : L → P), function.injective f ∧ ∀ (l : L), f l ∉ l := \n\nNatural language version: \"If a nondegenerate configuration has a unique point on any two lines, then `|L| ≤ |P|`.\" Translate the natural language version to a Lean mathlib version:\n theorem (P L : Type u) [has_mem P L] [configuration.has_points P L] [fintype P] [fintype L] :\nfintype.card L ≤ fintype.card P := \n\nNatural language version: \"If a nondegenerate configuration has a unique line through any two points, then `|P| ≤ |L|`.\" Translate the natural language version to a Lean mathlib version:\n theorem (P L : Type u) [has_mem P L] [configuration.has_lines P L] [fintype P] [fintype L] :\nfintype.card P ≤ fintype.card L := \n\nNatural language version: \"In any configuration of points on the plane, not all on a line, there is a line which contains exactly two of the points.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.5291177034378052,
          "doc_string": "A single point is collinear.",
          "statement": "theorem collinear_singleton (k : Type u_1) {V : Type u_2} {P : Type u_3} [division_ring k] [add_comm_group V] [module k V] [add_torsor V P] (p : P) : collinear k {p}"
        },
        {
          "sim_score": 0.5157747268676758,
          "doc_string": "If a nondegenerate configuration has at least as many points as lines, then there exists  an injective function `f` from lines to points, such that `f l` does not lie on `l`.",
          "statement": "theorem configuration.nondegenerate.exists_injective_of_card_le {P L : Type u} [has_mem P L] [configuration.nondegenerate P L] [fintype P] [fintype L] (h : fintype.card L ≤ fintype.card P) : ∃ (f : L → P), function.injective f ∧ ∀ (l : L), f l ∉ l"
        },
        {
          "sim_score": 0.5101643800735474,
          "doc_string": "If a nondegenerate configuration has a unique point on any two lines, then `|L| ≤ |P|`.",
          "statement": "theorem configuration.has_points.card_le (P L : Type u) [has_mem P L] [configuration.has_points P L] [fintype P] [fintype L] : fintype.card L ≤ fintype.card P"
        },
        {
          "sim_score": 0.500416100025177,
          "doc_string": "If a nondegenerate configuration has a unique line through any two points, then `|P| ≤ |L|`.",
          "statement": "theorem configuration.has_lines.card_le (P L : Type u) [has_mem P L] [configuration.has_lines P L] [fintype P] [fintype L] : fintype.card P ≤ fintype.card L"
        }
      ],
      "codex_time": 7.869558934995439,
      "search_time": 1.4785787790024187,
      "use_theorem_name": false
    },
    "outputs": [
      "two_lines : ∃ l₁ l₂ : Subtype P, ∃ P₁ P₂ : P, (P₁, P₂) ∉ l₁ ∧ (P₁, P₂) ∉ l₂ ∧ (P₁, P₂) ∈ ξ ",
      "(P : type u) [HasMem P Configuration.points] [DecidableEq P] [Fintype P] : ∃ P q : P, Function.Injective (λ (P : point_on_line k v P P q) (l : line k v P P q), { P, q }) ",
      "(P : type u) [HasMem P plane] [Fintype P] [DecidableEq plane] [Fintype plane] [Nodup P] {l : plane} (hl : ∀ P, P ∈ l → P ∈ P) : ∃ P₁ P₂, P₁ ∈ P ∧ P₂ ∈ P ∧ P₂ ≠ P₁ ∧ Pairwise_Eq plane P₂ P₁ l ",
      "{P : type u_1} {L : type u_2} [HasMem P L] [Fintype P] [Fintype L] (h : Fintype.Card P > 2)  : Fintype L ",
      "(P : type u) [HasMem P (L A P)] [Fintype P] [Fintype (L A P)] : ∃ (L : set (L A P)), Fintype.Card L = 2 ∧ ∀ (l ∈ L), l ≠ 0 "
    ],
    "answer": "{P L : Type _} [HasMem P L] [Membership P L] [Configuration.Nondegenerate P L] : ∃ (l : L) (p q : P), p ∈ l → q ∈ l → (∀ r : P, r ∈ l → r = p ∨ r = q) "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "sylvester_gallai",
      "main_prompt": "In any configuration of points on the plane, not all on a line, there is a line which contains exactly two of the points.",
      "prompt": "Natural language version: \"In any configuration of points on the plane, not all on a line, there is a line which contains exactly two of the points.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 9.685172995988978,
      "use_theorem_name": false
    },
    "outputs": [
      "exists_line_contains_two_pts : and_classification → ∃ A B : line_through, ∀ l : line_through, (l ⊆ A) ∨ (l ⊆ B) ∨ (l ∩ A ∩ B ≠ ∅) -/  /- --Here  the formulation that  closer to `point_on_plane` but with `non_Collinear` added\" lemma no_Collinear_points : Π A : point_on_plane | ∀ l : line_through, (l ⊆ A) ∨ (l ∩ A = ∅),   ∃",
      "intermediate_value_thm:  end",
      "line_contains_exactly_two_points : ∀ {m : set (point 2)} (h : m.Card ≠ 0), ∃ l : line 2, l.Inter_points 2 m.Card h = 2 ",
      "pigeonhole_principle {α : type*} (S : Finset α) (P : α → Prop)   (h : ∀ x, ∃ A ∈ S, P A) : (∃ A B ∈ S, P A ∧ P B ∧ A ≠ B) ∨   ∃ x ∈ set.Univ.image (λ (x : α), { A : α // P A }), x.1 ∈ S ∧ ∃ x ∈ set.Univ.image (λ (x : α), { A : α // P A }), x.1 ∈ S ",
      "in_to_two [Nonempty α] [Finite_dimensional α] [AddCommGroup α] [Vector_Space α ℝ]   (S : set α) [S_Nonempty : Nonempty S] : ∃ (A B : α), S ⊆ { z | z = A + B*(B - A) }      "
    ],
    "answer": "{P L : Type _} [HasMem P L] [Membership P L] [Configuration.Nondegenerate P L] : ∃ (l : L) (p q : P), p ∈ l → q ∈ l → (∀ r : P, r ∈ l → r = p ∨ r = q) "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "cantor_schroeder_bernstein",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"If each of two types can be mapped injectively into the other, then there is a bijection between them.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "If each of two types can be mapped injectively into the other, then there is a bijection between them.",
      "codex_time": 6.9743744079896715,
      "use_theorem_name": false
    },
    "outputs": [
      "{A B : type*} (W : A → B) (z : B → A)  (h1 : ∀ x y, W x = W y → x = y)  (h2 : ∀ x y, z x = z y → x = y) :  Bijective W ",
      "(A B : type*) (h₁ : (A → B) → False) (h₂ : (B → A) → False) :  Nonempty (A ≃ B) ",
      "{x Y : type}  (F : x → Y) (g : Y → x)  (hF : Function.Injective F) (hg : Function.Injective g) :  Bijective.Mk g F (Function.LeftInverse.Bijective F g hF hg) ⟹ Bijective g ",
      "LE06.LE06C (x Y : type*)  (h : ∃ F : x → Y, injective F)  (h' : ∃ F : Y → x, injective F) :  Fintype.Card x = Fintype.Card Y ",
      "(x Y : type*) (F : x → Y) [injective F]  (g : Y → x) [injective g] :  Bijective F "
    ],
    "answer": "{α β : Type _} (f : α → β) (g : β → α) : Function.Injective f → Function.Injective g → (∃ h : α → β, Function.Bijective h) "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "cantor_schroeder_bernstein",
      "main_prompt": "If each of two types can be mapped injectively into the other, then there is a bijection between them.",
      "prompt": "Natural language version: \" **The Schröder-Bernstein Theorem**: Given injections `α → β` and `β → α`, we can get a bijection `α → β`.\" Translate the natural language version to a Lean mathlib version:\n theorem {α : Type u} {β : Type v} {f : α → β} {g : β → α} (hf : function.injective f) (hg : function.injective g) :\n∃ (h : α → β), function.bijective h := \n\nNatural language version: \"A morphism in `Type u` is an isomorphism if and only if it is bijective.\" Translate the natural language version to a Lean mathlib version:\n theorem {X Y : Type u} (f : X ⟶ Y) :\ncategory_theory.is_iso f ↔ function.bijective f := \n\nNatural language version: \"An equivalence is essentially surjective.  See <https://stacks.math.columbia.edu/tag/02C3>.\" Translate the natural language version to a Lean mathlib version:\n theorem {C : Type u₁} [category_theory.category C] {D : Type u₂} [category_theory.category D] (F : C ⥤ D) [category_theory.is_equivalence F] :\ncategory_theory.ess_surj F := \n\nNatural language version: \"If two subtypes of a fintype have equal cardinality, so do their complements.\" Translate the natural language version to a Lean mathlib version:\n theorem {α : Type u_1} [fintype α] (p q : α → Prop) [fintype {x // p x}] [fintype {x // ¬p x}] [fintype {x // q x}] [fintype {x // ¬q x}] (h : fintype.card {x // p x} = fintype.card {x // q x}) :\nfintype.card {x // ¬p x} = fintype.card {x // ¬q x} := \n\nNatural language version: \"If each of two types can be mapped injectively into the other, then there is a bijection between them.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.648023247718811,
          "doc_string": " **The Schröder-Bernstein Theorem**: Given injections `α → β` and `β → α`, we can get a bijection `α → β`.",
          "statement": "theorem function.embedding.schroeder_bernstein {α : Type u} {β : Type v} {f : α → β} {g : β → α} (hf : function.injective f) (hg : function.injective g) : ∃ (h : α → β), function.bijective h"
        },
        {
          "sim_score": 0.617520809173584,
          "doc_string": "A morphism in `Type u` is an isomorphism if and only if it is bijective.",
          "statement": "theorem category_theory.is_iso_iff_bijective {X Y : Type u} (f : X ⟶ Y) : category_theory.is_iso f ↔ function.bijective f"
        },
        {
          "sim_score": 0.612472414970398,
          "doc_string": "An equivalence is essentially surjective.  See <https://stacks.math.columbia.edu/tag/02C3>.",
          "statement": "theorem category_theory.equivalence.ess_surj_of_equivalence {C : Type u₁} [category_theory.category C] {D : Type u₂} [category_theory.category D] (F : C ⥤ D) [category_theory.is_equivalence F] : category_theory.ess_surj F"
        },
        {
          "sim_score": 0.6091285347938538,
          "doc_string": "If two subtypes of a fintype have equal cardinality, so do their complements.",
          "statement": "theorem fintype.card_compl_eq_card_compl {α : Type u_1} [fintype α] (p q : α → Prop) [fintype {x // p x}] [fintype {x // ¬p x}] [fintype {x // q x}] [fintype {x // ¬q x}] (h : fintype.card {x // p x} = fintype.card {x // q x}) : fintype.card {x // ¬p x} = fintype.card {x // ¬q x}"
        }
      ],
      "codex_time": 7.486992643011035,
      "search_time": 1.5347542650124524,
      "use_theorem_name": false
    },
    "outputs": [
      "{α : type u_1} {β : type u_2} {F : α → β} {g : β → α} (hF : Function.Injective F) (hg : Function.Injective g) : ∃ (h : α ≃ β), _ ",
      "{α : type u} {β : type v} (F : α → β) (g : β → α) : (∀ x, Function.Surjective F) → (∀ x, Function.Surjective g) → ∃ (h : α → β), Function.Bijective h ",
      "{α : type u} {β : type v} (F : α → β) (g : β → α) [hF : Function.Injective F] [hg : Function.Injective g] : ∃ (h : α → β), Function.Bijective h ",
      "{α : type u} {β : type v} (F : α → β) (g : β → α) [hF : Function.Injective F] [Hg : Function.Injective g] : ∃ (h : β → α), Function.Bijective h ",
      "{α : type u_1} {β : type u_2} (F : α → β) {g : β → α} (hF : ∀A, ∃ha, F A = g ha) (hg : ∀B, ∃hb, g B = F hb) : Bijective F "
    ],
    "answer": "{α β : Type _} (f : α → β) (g : β → α) : Function.Injective f → Function.Injective g → (∃ h : α → β, Function.Bijective h) "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "cantor_schroeder_bernstein",
      "main_prompt": "If each of two types can be mapped injectively into the other, then there is a bijection between them.",
      "prompt": "Natural language version: \"If each of two types can be mapped injectively into the other, then there is a bijection between them.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 13.75339470198378,
      "use_theorem_name": false
    },
    "outputs": [
      "foo [Fintype [Fin1 : α], Fintype [Fin2 : β]] (h1 : injective F) (h2 : injective g)   (h3 : ∀ x : α, ∃ y : β, hF (Fin1 x) = g (Fin2 y)) :   ∃ h : β → α, F ∘ h = g ∘ Fin2 ∧ injective h 🤔 ?  (according to https://math.stackexchange.com/q/146430, https://en.wikipedia.org/wiki/Banach%E2%80%93Bernstein_theorem gives A generalization of",
      "Nat_Mul_comm' (x y : ℕ): x * y = y * x ",
      "two { A B : type } ( F : A → B ) ( g : B → A ) : Injective F → Injective g → Bijective F ",
      "IsIso_if_Bijective ( x Y : type )   ( N : x → Y )   ( m : Y → x )   ( N_Bijective : Bijective x Y N )   ( m_Bijective : Bijective Y x m ) :  iso x Y ",
      "lem4 : ∀ A, ∀ B, (∀ A, A A → B A) → (∀ B, B B → A B) → ∃ x, @Eq α (A x) (B x) → Prop "
    ],
    "answer": "{α β : Type _} (f : α → β) (g : β → α) : Function.Injective f → Function.Injective g → (∃ h : α → β, Function.Bijective h) "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "graph_unique_common_neighbour_implies_universal_adjacent_vertex",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"A finite graph in which every two vertices have precisely one common neighbour contains a vertex that is adjacent to all other vertices.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "A finite graph in which every two vertices have precisely one common neighbour contains a vertex that is adjacent to all other vertices.",
      "codex_time": 7.647909646999324,
      "use_theorem_name": false
    },
    "outputs": [
      "(x : type) [Fintype x] (F : x → ((x → Prop) → Prop))  (h : ∀ x y, F x (λ y, F y (λ z, x = z ∨ y = z))):  ∃ x, ∀ y, F y (λ z, x = z) ",
      "Finite_graph_with_precisely_One_common_neighbour_has_vertex_adjacent_to_all_other_vertices :  ∀ G : type*, ∀ n : ℕ, ∀ Adj : n → n → Prop,  ∀ hG_Finite : Fintype n,  (∀ v : n, ∀ W : n, ∃ x : n, Adj x v ∧ Adj x W) →  (∃ x : n, ∀ y : n, x ≠ y → Adj x y) ",
      "(G : type*) [Fintype G] [DecidableEq G] [Fintype (G × G)]          [Finset G] [Finset (G × G)] (graph : Finset (G × G))          (conn : ∀ g : G, g ∈ graph.Univ → ∀ h : G, h ∈ graph.Univ → ∃ k, g ≠ h ∧ g = k ∧ h = k) :  ∃ g, ∀ h, (g ≠ h) → g = h ",
      "(G : type*) [Fintype G] [DecidableEq G] [Fin_graph G]  (hG : ∀ v W : G, Card {u | v ≠ u ∧ W ≠ u} = 1) :  ∃ v : G, ∀ x : set G, Card x = Card G → (∀ u ∈ x, v -- u) ∧ (∀ u ∈ G, x ≠ ∅ → v -- u) ",
      "(n : ℕ) (e : Fin n → Fin n → Prop)  (fe : ∀ (x y z : Fin n), e x y ∧ e y z → e x z)  [Fintype ℕ n] [DecidableEq ℕ n] -- Decidable instances are needed to define the Finset  [DecidableEq (Fin n)]  (fnd : ∀ (x y : Fin n), e x y ∨ ¬ e x y)  (hD : ∀ (x y : Fin n), ∃ z, e x z ∧ e y z)  (ht : ∀ (x : Fin n),"
    ],
    "answer": "{V : Type _} [Finite V] (G : SimpleGraph V) : (∀ v w : V, ∃! x : V, G.Adj v x ∧ G.Adj w x) → (∃ c : V, ∀ v : V, G.Adj c v) "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "graph_unique_common_neighbour_implies_universal_adjacent_vertex",
      "main_prompt": "A finite graph in which every two vertices have precisely one common neighbour contains a vertex that is adjacent to all other vertices.",
      "prompt": "Natural language version: \"Two vertices are adjacent iff there is an edge between them. The condition `v ≠ w` ensures they are different endpoints of the edge, which is necessary since when `v = w` the existential `∃ (e ∈ G.edge_set), v ∈ e ∧ w ∈ e` is satisfied by every edge incident to `v`.\" Translate the natural language version to a Lean mathlib version:\n theorem {V : Type u} (G : simple_graph V) {v w : V} :\nG.adj v w ↔ v ≠ w ∧ ∃ (e : sym2 V) (H : e ∈ G.edge_set), v ∈ e ∧ w ∈ e := \n\nNatural language version: \"The handshaking lemma.  See also `simple_graph.sum_degrees_eq_twice_card_edges`.\" Translate the natural language version to a Lean mathlib version:\n theorem {V : Type u} (G : simple_graph V) [fintype V] [decidable_rel G.adj] :\neven (finset.filter (λ (v : V), odd (G.degree v)) finset.univ).card := \n\nNatural language version: \"There exists a vertex of maximal degree. Note the assumption of being nonempty is necessary, as the lemma implies there exists a vertex.\" Translate the natural language version to a Lean mathlib version:\n theorem {V : Type u} (G : simple_graph V) [fintype V] [decidable_rel G.adj] [nonempty V] :\n∃ (v : V), G.max_degree = G.degree v := \n\nNatural language version: \"In a graph, if `k` is at least the degree of every vertex, then it is at least the maximum degree.\" Translate the natural language version to a Lean mathlib version:\n theorem {V : Type u} (G : simple_graph V) [fintype V] [decidable_rel G.adj] (k : ℕ) (h : ∀ (v : V), G.degree v ≤ k) :\nG.max_degree ≤ k := \n\nNatural language version: \"A finite graph in which every two vertices have precisely one common neighbour contains a vertex that is adjacent to all other vertices.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.5179886817932129,
          "doc_string": "Two vertices are adjacent iff there is an edge between them. The condition `v ≠ w` ensures they are different endpoints of the edge, which is necessary since when `v = w` the existential `∃ (e ∈ G.edge_set), v ∈ e ∧ w ∈ e` is satisfied by every edge incident to `v`.",
          "statement": "theorem simple_graph.adj_iff_exists_edge {V : Type u} (G : simple_graph V) {v w : V} : G.adj v w ↔ v ≠ w ∧ ∃ (e : sym2 V) (H : e ∈ G.edge_set), v ∈ e ∧ w ∈ e"
        },
        {
          "sim_score": 0.5029463171958923,
          "doc_string": "The handshaking lemma.  See also `simple_graph.sum_degrees_eq_twice_card_edges`.",
          "statement": "theorem simple_graph.even_card_odd_degree_vertices {V : Type u} (G : simple_graph V) [fintype V] [decidable_rel G.adj] : even (finset.filter (λ (v : V), odd (G.degree v)) finset.univ).card"
        },
        {
          "sim_score": 0.4985456168651581,
          "doc_string": "There exists a vertex of maximal degree. Note the assumption of being nonempty is necessary, as the lemma implies there exists a vertex.",
          "statement": "theorem simple_graph.exists_maximal_degree_vertex {V : Type u} (G : simple_graph V) [fintype V] [decidable_rel G.adj] [nonempty V] : ∃ (v : V), G.max_degree = G.degree v"
        },
        {
          "sim_score": 0.48896029591560364,
          "doc_string": "In a graph, if `k` is at least the degree of every vertex, then it is at least the maximum degree.",
          "statement": "theorem simple_graph.max_degree_le_of_forall_degree_le {V : Type u} (G : simple_graph V) [fintype V] [decidable_rel G.adj] (k : ℕ) (h : ∀ (v : V), G.degree v ≤ k) : G.max_degree ≤ k"
        }
      ],
      "codex_time": 12.804689691023668,
      "search_time": 1.517556758975843,
      "use_theorem_name": false
    },
    "outputs": [
      "{v : type u} (G : SimpleGraph v) [Fintype v] [Decidable_Rel G.Adj] : (∀ (v W : v), G.Adj v W → G.degree v = 1) → ∃ (v : v), ∀ (W : v), v ≠ W → G.Adj v W ",
      "{v : type u} (G : SimpleGraph v) [Fintype v] [Decidable_Rel G.Adj] (h : ∀ (v W : v) (vw : G.Adj v W),     G.Adj_set v ∩ G.Adj_set W = {vw.2.1}) : ∃ (v : v), (∀ (W : v), (G.Adj_set v) ∩ (G.Adj_set W) = {Some (G.Adj v W)} ∧ G.Adj v W) ",
      "{v : type u} (G : SimpleGraph v) [Fintype v] [Decidable_Rel G.Adj] (h : ∀ (v W : v), G.Adj v W → G.degree v = G.degree W ∧ G.degree v = 2) : ∃ (v : v), ∀ (W : v), v ≠ W → G.Adj v W ",
      "{v : type u} (G : SimpleGraph v) [Fintype v] [Decidable_Rel G.Adj] (h : ∀ (v W : v), v ≠ W → G.Adj v W ∨ G.Adj W v) : ∃ (v : v), ∀ (W : v), W ≠ v → G.Adj v W ",
      "{v : type u} (G : SimpleGraph v) [Fintype v] [Decidable_Rel G.Adj] (h : ∀ (v W : v), G.IsComplete_graph {v, W}) : ∃ (v : v), G._vertex_cover tt = ({v} : Finset v) "
    ],
    "answer": "{V : Type _} [Finite V] (G : SimpleGraph V) : (∀ v w : V, ∃! x : V, G.Adj v x ∧ G.Adj w x) → (∃ c : V, ∀ v : V, G.Adj c v) "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "graph_unique_common_neighbour_implies_universal_adjacent_vertex",
      "main_prompt": "A finite graph in which every two vertices have precisely one common neighbour contains a vertex that is adjacent to all other vertices.",
      "prompt": "Natural language version: \"A finite graph in which every two vertices have precisely one common neighbour contains a vertex that is adjacent to all other vertices.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 5.502323626016732,
      "use_theorem_name": false
    },
    "outputs": [
      "Finite_Havel_Hakimi: ∀ (n : ℕ),   ∀ (g : Fin n → Fin n → Prop),   (∀ (i j: Fin n), i ≠ j → ∃ !(k : Fin n), g i k ∧ g j k) → (∀ i : Fin n, ∃ k : Fin n, ∃ l : Fin n, g i k ∧ ¬ g i l) ",
      ": seems_like_A_conjecture (λ (F : Finset (Finset ℕ)), F ≠ ∅) ",
      "vertex_with_all_adjacent_vertices(v : type) (E : v → v → Prop) : Finite_vgraph v → (∀ x y : v, (∃ z : v, E x z ∧ E y z) → E x y) → (∃ v : v, ∀ u, u ≠ v → E u v) ",
      "Fin_g_ex_node__Adj_all_vertices (G : Fin_graph n) :  ∃ v : vertices_Fin G, forall v' : vertices G, v' ≠ v → v' ∈ G.Adj v ",
      "exists_all_Adj {v: type*} [Fintype v] (coadj: Π (A B: v), button_graph v)                     (h: ∀ A B : v, coadj A B) (A : v):  ∀ B, connect A B ↔ h A B "
    ],
    "answer": "{V : Type _} [Finite V] (G : SimpleGraph V) : (∀ v w : V, ∃! x : V, G.Adj v x ∧ G.Adj w x) → (∃ c : V, ∀ v : V, G.Adj c v) "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "partition_odd_distincts",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"The number of partitions with odd parts is equal to the number of partitions with distinct parts.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "The number of partitions with odd parts is equal to the number of partitions with distinct parts.",
      "codex_time": 9.617209566000383,
      "use_theorem_name": false
    },
    "outputs": [
      "(n : ℕ) : Lift_t (@List.partitions.partitions ℕ _ n).filterb  (λ P : List ℕ, Prod.Snd P % 2 = 1) = Lift_t (@List.partitions.partitions ℕ _ n).Filter  (λ P : List ℕ, ∀ A B ∈ P, A ≠ B) ",
      ":  Card {P : Partition ℕ | ∃ (A: ℕ), P.res A % 2 = 1} = Card {P : Partition ℕ | ∀ (A B: ℕ), A ≠ B → B ∉ P.res A} ",
      "(n : ℕ) :  Nat.count (λ F, (∃ i, i ∈ F.Support ∧ Odd i) ∧ F.min = 0) (partitions n) =  Nat.count (λ F, F.min = 0 ∧ ∀ i j, i ≠ j → i ∈ F.Support → j ∈ F.Support → i + F i ≠ j + F j) (partitions n) ",
      ": ∀ n : ℕ, Card {P : Finset ℕ // (∀ i ≤ P.1, ↑(P.val i) % 2 = 1) ∧ (Finset.Nodup P.1 ∧ P.1.Card = n)} = Card {P : Finset ℕ // Finset.Nodup P.1 ∧ P.1.Card = n} ",
      ":  ∑ P : Partition ℕ, ∑ k in P.Parts, bodd k = ∑ P : Partition ℕ, ∀ k, Dvd 1 k ∧ Dvd 1 (P.Parts.erase_dup k) "
    ],
    "answer": ": ∀ n : ℕ, Finset.card (Nat.Partition.odds n) = Finset.card (Nat.Partition.distincts n) "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "partition_odd_distincts",
      "main_prompt": "The number of partitions with odd parts is equal to the number of partitions with distinct parts.",
      "prompt": "Natural language version: \"If we can partition a sum into subsets that cancel out, then the whole sum cancels.\" Translate the natural language version to a Lean mathlib version:\n theorem {β : Type u} {α : Type v} {s : finset α} {f : α → β} [add_comm_monoid β] (R : setoid α) [decidable_rel setoid.r] (h : ∀ (x : α), x ∈ s → (finset.filter (λ (y : α), y ≈ x) s).sum (λ (a : α), f a) = 0) :\ns.sum (λ (x : α), f x) = 0 := \n\nNatural language version: \" To show a property is true on the odd parts, it suffices to show it is true on the vectors, closed under addition, and under left-multiplication by a pair of vectors.\" Translate the natural language version to a Lean mathlib version:\n theorem {R : Type u_1} {M : Type u_2} [comm_ring R] [add_comm_group M] [module R M] (Q : quadratic_form R M) {P : Π (x : clifford_algebra Q), x ∈ clifford_algebra.even_odd Q 1 → Prop} (hι : ∀ (v : M), P (⇑(clifford_algebra.ι Q) v) _) (hadd : ∀ {x y : clifford_algebra Q} {hx : x ∈ clifford_algebra.even_odd Q 1} {hy : y ∈ clifford_algebra.even_odd Q 1}, P x hx → P y hy → P (x + y) _) (hιι_mul : ∀ (m₁ m₂ : M) {x : clifford_algebra Q} {hx : x ∈ clifford_algebra.even_odd Q 1}, P x hx → P (⇑(clifford_algebra.ι Q) m₁ * ⇑(clifford_algebra.ι Q) m₂ * x) _) (x : clifford_algebra Q) (hx : x ∈ clifford_algebra.even_odd Q 1) :\nP x hx := \n\nNatural language version: \"A sum can be partitioned into a sum of sums, each equivalent under a setoid.\" Translate the natural language version to a Lean mathlib version:\n theorem {β : Type u} {α : Type v} {s : finset α} {f : α → β} [add_comm_monoid β] (R : setoid α) [decidable_rel setoid.r] :\ns.sum (λ (x : α), f x) = (finset.image quotient.mk s).sum (λ (xbar : quotient R), (finset.filter (λ (y : α), ⟦y⟧ = xbar) s).sum (λ (y : α), f y)) := \n\nNatural language version: \"Distinct elements of a set of sets partitioning α are disjoint.\" Translate the natural language version to a Lean mathlib version:\n theorem {α : Type u_1} {c : set (set α)} (H : ∀ (a : α), ∃! (b : set α) (H : b ∈ c), a ∈ b) :\nc.pairwise_disjoint id := \n\nNatural language version: \"The number of partitions with odd parts is equal to the number of partitions with distinct parts.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.45678937435150146,
          "doc_string": "If we can partition a sum into subsets that cancel out, then the whole sum cancels.",
          "statement": "theorem finset.sum_cancels_of_partition_cancels {β : Type u} {α : Type v} {s : finset α} {f : α → β} [add_comm_monoid β] (R : setoid α) [decidable_rel setoid.r] (h : ∀ (x : α), x ∈ s → (finset.filter (λ (y : α), y ≈ x) s).sum (λ (a : α), f a) = 0) : s.sum (λ (x : α), f x) = 0"
        },
        {
          "sim_score": 0.44783246517181396,
          "doc_string": " To show a property is true on the odd parts, it suffices to show it is true on the vectors, closed under addition, and under left-multiplication by a pair of vectors.",
          "statement": "theorem clifford_algebra.odd_induction {R : Type u_1} {M : Type u_2} [comm_ring R] [add_comm_group M] [module R M] (Q : quadratic_form R M) {P : Π (x : clifford_algebra Q), x ∈ clifford_algebra.even_odd Q 1 → Prop} (hι : ∀ (v : M), P (⇑(clifford_algebra.ι Q) v) _) (hadd : ∀ {x y : clifford_algebra Q} {hx : x ∈ clifford_algebra.even_odd Q 1} {hy : y ∈ clifford_algebra.even_odd Q 1}, P x hx → P y hy → P (x + y) _) (hιι_mul : ∀ (m₁ m₂ : M) {x : clifford_algebra Q} {hx : x ∈ clifford_algebra.even_odd Q 1}, P x hx → P (⇑(clifford_algebra.ι Q) m₁ * ⇑(clifford_algebra.ι Q) m₂ * x) _) (x : clifford_algebra Q) (hx : x ∈ clifford_algebra.even_odd Q 1) : P x hx"
        },
        {
          "sim_score": 0.42162370681762695,
          "doc_string": "A sum can be partitioned into a sum of sums, each equivalent under a setoid.",
          "statement": "theorem finset.sum_partition {β : Type u} {α : Type v} {s : finset α} {f : α → β} [add_comm_monoid β] (R : setoid α) [decidable_rel setoid.r] : s.sum (λ (x : α), f x) = (finset.image quotient.mk s).sum (λ (xbar : quotient R), (finset.filter (λ (y : α), ⟦y⟧ = xbar) s).sum (λ (y : α), f y))"
        },
        {
          "sim_score": 0.4164368808269501,
          "doc_string": "Distinct elements of a set of sets partitioning α are disjoint.",
          "statement": "theorem setoid.eqv_classes_disjoint {α : Type u_1} {c : set (set α)} (H : ∀ (a : α), ∃! (b : set α) (H : b ∈ c), a ∈ b) : c.pairwise_disjoint id"
        }
      ],
      "codex_time": 12.19458099399344,
      "search_time": 1.4897750779928174,
      "use_theorem_name": false
    },
    "outputs": [
      "partitions.Equiv_oddeven_distinct {n : ℕ} : (partitions.Equiv_oddeven n).Card = (partitions.distinct_Part_of_n_Ge_2 n).Card ",
      "{α : type u_1} (h : α → α → Prop) (h_ext : ∀ (x y z W : α), x = y → z = W → h x z → h y W) (h_refl : ∀ (x : α), h x x) (h_Sym : ∀ (x y : α), h x y → h y x) (h_Trans : ∀ {x y z : α}, h x y → h y z → h x z) (hrel : ∀ (A B : α) (h : h A B), h A A ∨ h B B) (h_iff : ∀ (A B",
      "(n : ℕ) : (Partition_set.Filter Partition.Odd n).Card = (Partition_set.Filter Partition.distinct_Parts n).Card ",
      "{α : type u_1} {C : ℕ → set (set α)} (h : ∀ (n : ℕ), ∀ (A : ℕ), A ∈ C n → ∃! (B : set α) (h : B ∈ C n), A ∈ B) : has_Unique_Sum_of_Parts α C ",
      "{P : ℕ} {R : type*} {m : type*} [CommRing R] [AddCommGroup m] [module R m] (q : QuadraticForm R m) : Finset.Card (possible_Even_Odd_partitions q P) = Finset.Card (Finset.Filter distinct (possible_partitions q P)) "
    ],
    "answer": ": ∀ n : ℕ, Finset.card (Nat.Partition.odds n) = Finset.card (Nat.Partition.distincts n) "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "partition_odd_distincts",
      "main_prompt": "The number of partitions with odd parts is equal to the number of partitions with distinct parts.",
      "prompt": "Natural language version: \"The number of partitions with odd parts is equal to the number of partitions with distinct parts.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 6.451756244990975,
      "use_theorem_name": false
    },
    "outputs": [
      "Odd_Eq_distinct' (n : ℕ ) :     #{ oddpartitions n } = #{ distinctpartitions n } ",
      "natural_Language_to_lean : ∃ n : ℕ, ∃z : ℕ, 1 + n - (z ^ 2) = 0 ",
      "natural_to_lean : -- Add your answer here  example (m n : ℕ) : m + n ≥ m ",
      "finpartdistinct {S : Finset ℕ} (h : ∀ P ∈ S, P ∉ S.erase P) : Finset.Card S = Finset.Card (Finset.Univ.Filter    (λ P, P ∉ S)) ",
      "Odd_Parts_iff_distinct_Parts (n : ℕ) : Nat.Partition_count_aux n 1 Black = Nat.Partition_count_aux n 0 Green "
    ],
    "answer": ": ∀ n : ℕ, Finset.card (Nat.Partition.odds n) = Finset.card (Nat.Partition.distincts n) "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "zorn",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"Every non-empty poset in which every chain has an upper bound contains a maximal element.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "Every non-empty poset in which every chain has an upper bound contains a maximal element.",
      "codex_time": 11.430125957995187,
      "use_theorem_name": false
    },
    "outputs": [
      "(P : type*) [PartialOrder P]  (h : ∀ t : set P, (∀ x ∈ t, ∀ y ∈ t, x ≤ y ∨ y ≤ x) → Nonempty t → ∃ z : P, ∀ x ∈ t, x ≤ z) :  (∃ m : P, ∀ x : P, m ≤ x → x = m) ∨ (∃ y, ∀ x : P, x ≤ y) ",
      "(P : type*) [PartialOrder P]  (h : ∀ C : set P, Nonempty C → ∃ z : P, _upper_bound C z) :  Nonempty P ",
      "(x : type*) [PartialOrder x] (hX_Nonempty : Nonempty x)  (h : ∀ (x : ℕ → x), (∀ i j, i ≤ j → x i ≤ x j) →  ∃ (x : x), ∀ y, x ≤ y → (∃ i, x = x i) ) :  ∃ (x0 : x), ∀ y : x, x0 ≤ y → x0 = y ",
      "(x : type*) [PartialOrder x] {C : x → Prop}  (hC : ∀ x : x, C x → ∃ z : x, z ≥ x ∧ ∀ y : x, y ≥ x → y ≥ z) :  ∃ (x : x), C x ∧ ∀ y : x, y ≥ x → y = x ",
      "(P : type*) [poset P] (h : ∀ x : set P, chain x → ∃ B, _upper_bound x B) :  ∃ m : P, ∀ A : P, ¬(_upper_bound (Insert m Empty) A)  "
    ],
    "answer": "{α : Type _} [PartialOrder α] [Nonempty α] : (∀ c : Set α, IsChain LE.le c → (∃ b : α, ∀ a ∈ c, a ≤ b)) → (∃ m : α, ∀ a : α, m ≤ a → a = m) "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "zorn",
      "main_prompt": "Every non-empty poset in which every chain has an upper bound contains a maximal element.",
      "prompt": "Natural language version: \" **Zorn's lemma**  If every chain has an upper bound, then there exists a maximal element.\" Translate the natural language version to a Lean mathlib version:\n theorem {α : Type u_1} {r : α → α → Prop} (h : ∀ (c : set α), is_chain r c → (∃ (ub : α), ∀ (a : α), a ∈ c → r a ub)) (trans : ∀ {a b c : α}, r a b → r b c → r a c) :\n∃ (m : α), ∀ (a : α), r m a → r a m := \n\nNatural language version: \" A variant of Zorn's lemma. If every nonempty chain of a nonempty type has an upper bound, then there is a maximal element.\" Translate the natural language version to a Lean mathlib version:\n theorem {α : Type u_1} {r : α → α → Prop} [nonempty α] (h : ∀ (c : set α), is_chain r c → c.nonempty → (∃ (ub : α), ∀ (a : α), a ∈ c → r a ub)) (trans : ∀ {a b c : α}, r a b → r b c → r a c) :\n∃ (m : α), ∀ (a : α), r m a → r a m := \n\nNatural language version: \"Every chain is contained in a maximal chain. This generalizes Hausdorff's maximality principle.\" Translate the natural language version to a Lean mathlib version:\n theorem {α : Type u_1} {r : α → α → Prop} {c : set α} (hc : is_chain r c) :\n∃ (M : set α), is_max_chain r M ∧ c ⊆ M := \n\nNatural language version: \" The Sup of a non-empty set is its least upper bound for a conditionally complete lattice with a top.\" Translate the natural language version to a Lean mathlib version:\n theorem {β : Type u_1} [conditionally_complete_lattice β] {s : set (with_top β)} (hs : s.nonempty) :\nis_lub s (has_Sup.Sup s) := \n\nNatural language version: \"Every non-empty poset in which every chain has an upper bound contains a maximal element.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.8077962398529053,
          "doc_string": " **Zorn's lemma**  If every chain has an upper bound, then there exists a maximal element.",
          "statement": "theorem exists_maximal_of_chains_bounded {α : Type u_1} {r : α → α → Prop} (h : ∀ (c : set α), is_chain r c → (∃ (ub : α), ∀ (a : α), a ∈ c → r a ub)) (trans : ∀ {a b c : α}, r a b → r b c → r a c) : ∃ (m : α), ∀ (a : α), r m a → r a m"
        },
        {
          "sim_score": 0.782833456993103,
          "doc_string": " A variant of Zorn's lemma. If every nonempty chain of a nonempty type has an upper bound, then there is a maximal element.",
          "statement": "theorem exists_maximal_of_nonempty_chains_bounded {α : Type u_1} {r : α → α → Prop} [nonempty α] (h : ∀ (c : set α), is_chain r c → c.nonempty → (∃ (ub : α), ∀ (a : α), a ∈ c → r a ub)) (trans : ∀ {a b c : α}, r a b → r b c → r a c) : ∃ (m : α), ∀ (a : α), r m a → r a m"
        },
        {
          "sim_score": 0.6981233954429626,
          "doc_string": "Every chain is contained in a maximal chain. This generalizes Hausdorff's maximality principle.",
          "statement": "theorem is_chain.exists_max_chain {α : Type u_1} {r : α → α → Prop} {c : set α} (hc : is_chain r c) : ∃ (M : set α), is_max_chain r M ∧ c ⊆ M"
        },
        {
          "sim_score": 0.6111599206924438,
          "doc_string": " The Sup of a non-empty set is its least upper bound for a conditionally complete lattice with a top.",
          "statement": "theorem with_top.is_lub_Sup' {β : Type u_1} [conditionally_complete_lattice β] {s : set (with_top β)} (hs : s.nonempty) : is_lub s (has_Sup.Sup s)"
        }
      ],
      "codex_time": 9.46299122797791,
      "search_time": 1.4935360020026565,
      "use_theorem_name": false
    },
    "outputs": [
      "{α : type u_1} {r : α → α → Prop} [CompleteLattice α] [Nonempty α] [PartialOrder r] : (∀ (C : set α), IsChain r C → C.Nonempty → (∃ (ub : α), ∀ (A : α), A ∈ C → r A ub)) →  ∃ (m : α), ∀ (A : α), r m A → r A m ",
      "{α : type u_1} {r : α → α → Prop} [PartialOrder α] (h : ∀ (C : set α), IsChain r C → (∃ (ub : α), ∀ (A : α), A ∈ C → A ≤ ub)) (Trans : ∀ (A B C : α), A ≤ B → B ≤ C → A ≤ C) : ∃ (m : α), IsMaximal m ",
      "{α : type u_1} {r : α → α → Prop} (h : ∀ {C : set α}, C.Nonempty → IsChain r C → (∃ (ub : α), ∀ (A : α), A ∈ C → r A ub)) : ∃ (m : α), (∀ (A : α), r m A → r A m) ∧ ∀ (n : α), (∀ (A : α), r m A → r A m) → r n m → r n n ",
      "{β : type u_1} [poset β] {P : β} (h : ∀ (C : set β), IsChain (≤) C → C.Nonempty → (∃ (ub : β), ∀ (A : β), A ∈ C → A ≤ ub)) : ∃ (m : β), ∀ (A : β), P ≤ A → A ≤ P ",
      "{α : type u_1} {r : α → α → Prop} {P : set α} (hp : ∀ (C : set α), IsChain r C → chain_upper_bound C r P) (hc : chain_upper_bound C r P) : ∃ (m : α), ∀ (A : α), r m A → r A m "
    ],
    "answer": "{α : Type _} [PartialOrder α] [Nonempty α] : (∀ c : Set α, IsChain LE.le c → (∃ b : α, ∀ a ∈ c, a ≤ b)) → (∃ m : α, ∀ a : α, m ≤ a → a = m) "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "zorn",
      "main_prompt": "Every non-empty poset in which every chain has an upper bound contains a maximal element.",
      "prompt": "Natural language version: \"Every non-empty poset in which every chain has an upper bound contains a maximal element.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 7.002985528000863,
      "use_theorem_name": false
    },
    "outputs": [
      "zorn' {α : type*} (h : ∀ C:set α, C.chain → C.Nonempty → ∃ m:α, IsMaximal C m) :   ∃ m : α, IsMaximal α m ",
      "Maximal_element_of_Nonempty_poset { α : type u } [ PartialOrder α ] ( h : 0 < Cardinal α ) ( h_chain : ∀ { β : type u } [ PartialOrder β ], ( ∀ ( B : β ), B ≠ 0 ) → β ≠ 0 → β ≤ Cardinal α ) : ∃ m , IsMaximal m ",
      "zorn (P : type) (PartialOrder P) [has_LE P] [Decidable_Rel (≤)] (chain : type) (chain_fnc : chain → P)     (upper_bnd : Π C ⊆ chain, (Π (x y : C), x ≤ y → y ≤ x → y = x) → (Π x : C, ∃ u : P, ∀ y ∈ C, y ≤ u) → P)     (h : ∃ C' ⊆ chain, ∀ x, x ≤ chain_fnc x) : ∃ m ∈ P, ∀ y ∈ P, m",
      "Zorn' { R : type u } [ PartialOrder R ]     ( h : ∀ C ⊆ R , ( ∀ A B ∈ C , A ≤ B ∨ B ≤ A ) → ∃ x ∈ R , ∀ y ∈ C , y ≤ x ) :     ∃ x ∈ R , ∀ y \\in R , y ≤ x ",
      "noetherian.choice_lemma {S : set α} (h : Nonempty (⋃₀ S ∈ S, [⋂₀ t ∈ S, t])) : ∃ S∈S, ∀ t ∈ S, t ⊆ S "
    ],
    "answer": "{α : Type _} [PartialOrder α] [Nonempty α] : (∀ c : Set α, IsChain LE.le c → (∃ b : α, ∀ a ∈ c, a ≤ b)) → (∃ m : α, ∀ a : α, m ≤ a → a = m) "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "aut_group_cyclic_implies_abelian",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"A group whose automorphism group is cyclic is Abelian.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "A group whose automorphism group is cyclic is Abelian.",
      "codex_time": 9.990242988977116,
      "use_theorem_name": false
    },
    "outputs": [
      "(G : type*) [Group G] (β : G → G)  (hβ : Function.Bijective β) (hβ1 : ∀ x : G, β x * β (x⁻¹) = 1)  (hβ2 : ∀ x y : G, β (x * y) = β x * β y)  (hβ3 : ∀ x : G, β x * x * (β x)⁻¹ = 1) (h : type*) [Group h]  (g : G → h) (hg : Function.Bijective g) (hg2 : ∀ x y : G, g (x",
      "(G : type*) [Group G]  (hG : ∃ g : G → G, Function.Bijective g ∧ ∀ x y : G, g (x * y) = g x * g y):  abelian G ",
      "(G : type*) [Group G]  (h : Group_with_aut G) (h1 : ∀ (G₂ : type*) [Group G₂], G ≃* G₂ → Abelian_Group G₂) :  @_abelian_Group G G _ ",
      "(G : type*) [Group G] (h : type*) [Group h] (F : G → h)  (hF : Function.Bijective F) (hF_iso : _Group_hom F)  (hint : ∃ (g_aut : h → h), Function.Bijective g_aut ∧ _Group_hom g_aut ∧  (∃ (n : ℕ), ∀ h : h, g_aut h = h ^ n)) :  Abelian G ",
      "(G : type*) [Group G] (haut : ∃ g : G, _Group_hom (automorphism_of_Equiv G g)):  abelian_Group G "
    ],
    "answer": "{G : Type _} [Groupₓ G] : CategoryTheory.Aut G → CommGroup G "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "aut_group_cyclic_implies_abelian",
      "main_prompt": "A group whose automorphism group is cyclic is Abelian.",
      "prompt": "Natural language version: \"A finite group of prime order is cyclic.\" Translate the natural language version to a Lean mathlib version:\n theorem {α : Type u} [group α] [fintype α] {p : ℕ} [hp : fact (nat.prime p)] (h : fintype.card α = p) :\nis_cyclic α := \n\nNatural language version: \"Every subgroup of `ℤ` is cyclic.\" Translate the natural language version to a Lean mathlib version:\n theorem (H : add_subgroup ℤ) :\n∃ (a : ℤ), H = add_subgroup.closure {a} := \n\nNatural language version: \"A finite subgroup of the unit group of an integral domain is cyclic.\" Translate the natural language version to a Lean mathlib version:\n theorem {R : Type u_1} {G : Type u_2} [comm_ring R] [is_domain R] [group G] [fintype G] (f : G →* R) (hf : function.injective ⇑f) :\nis_cyclic G := \n\nNatural language version: \"The product of group homomorphisms is a group homomorphism if the target is commutative.\" Translate the natural language version to a Lean mathlib version:\n theorem {α : Type u_1} {β : Type u_2} [group α] [comm_group β] {f g : α → β} (hf : is_group_hom f) (hg : is_group_hom g) :\nis_group_hom (λ (a : α), f a * g a) := \n\nNatural language version: \"A group whose automorphism group is cyclic is Abelian.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.6319984793663025,
          "doc_string": "A finite group of prime order is cyclic.",
          "statement": "theorem is_cyclic_of_prime_card {α : Type u} [group α] [fintype α] {p : ℕ} [hp : fact (nat.prime p)] (h : fintype.card α = p) : is_cyclic α"
        },
        {
          "sim_score": 0.6267713308334351,
          "doc_string": "Every subgroup of `ℤ` is cyclic.",
          "statement": "theorem int.subgroup_cyclic (H : add_subgroup ℤ) : ∃ (a : ℤ), H = add_subgroup.closure {a}"
        },
        {
          "sim_score": 0.5008938312530518,
          "doc_string": "A finite subgroup of the unit group of an integral domain is cyclic.",
          "statement": "theorem is_cyclic_of_subgroup_is_domain {R : Type u_1} {G : Type u_2} [comm_ring R] [is_domain R] [group G] [fintype G] (f : G →* R) (hf : function.injective ⇑f) : is_cyclic G"
        },
        {
          "sim_score": 0.4840320944786072,
          "doc_string": "The product of group homomorphisms is a group homomorphism if the target is commutative.",
          "statement": "theorem is_group_hom.mul {α : Type u_1} {β : Type u_2} [group α] [comm_group β] {f g : α → β} (hf : is_group_hom f) (hg : is_group_hom g) : is_group_hom (λ (a : α), f a * g a)"
        }
      ],
      "codex_time": 7.3680931930139195,
      "search_time": 1.7266927709861193,
      "use_theorem_name": false
    },
    "outputs": [
      "{α : type u} [Group α] (h : IsCyclic (aut α)) : comm_Group α ",
      "{α : type u} [Group α] (h : IsCyclic (Group_aut α)) : comm_Group α ",
      "{α : type u} [Group α] (h : IsCyclic (aut G)) : comm_Group α ",
      "{α : type u} [Group α] {aut : Group (Group_aut α)} (h : IsCyclic aut) : _abelian α ",
      "(G : type u) [Group G] (h : type u) [Group h] (F : G →+* h) (hF : _Group_isomorphism F)   (hₛ : IsCyclic (Group_automorphisms_of h)) : comm_Group G "
    ],
    "answer": "{G : Type _} [Groupₓ G] : CategoryTheory.Aut G → CommGroup G "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "aut_group_cyclic_implies_abelian",
      "main_prompt": "A group whose automorphism group is cyclic is Abelian.",
      "prompt": "Natural language version: \"A group whose automorphism group is cyclic is Abelian.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 10.55459084600443,
      "use_theorem_name": false
    },
    "outputs": [
      "_abelian (G : type) [Group G] [IsCyclic_Group G] : abelian_Group G ",
      "do_what_the_theorem_says {G : type u} [Group G] [Fintype G] : ∀(S : set G),     S.Finite → S.aut_Group.IsCyclic → S._abelian ",
      "abelian_cyclic_automorphism_Group (G : type) [Group G] [Fintype G] : cyclic_Group (Group_aut G) → Abelian_Group G ",
      "finGroup.cyclic_aut__Abelian. [Group α]  (G : finGroup α)  (hG : finGroup.cyclic β)  (A : α)  (hab : A ∈ finGroup.to_set β)  [facts : _Group_hom (hat : β → α) ]  [factt : Function.Injective hat ]  [factr : ∀ (A B : β), hat (A * B) = hat A * hat B]  [factl : ∀ (A : β), hat (1 • A) = 1 • hat A]  (ha : ∀ x, hat x = hat",
      "Group_cyclic_aut_equals_comm (G : type) [Group G] [cc : Fintype G] [DecidableEq G] [Hc : Nontrivial_comm G]      ⦃h : comm_Group G⦄ (Hac : comm_Group.aut (Card G) G )  : ∀A B : G, abel_Group.Mul_comm A B "
    ],
    "answer": "{G : Type _} [Groupₓ G] : CategoryTheory.Aut G → CommGroup G "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "image_union",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"The image of a union of sets is the union of the images.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "The image of a union of sets is the union of the images.",
      "codex_time": 13.686756782000884,
      "use_theorem_name": false
    },
    "outputs": [
      "(R S : type*) [Ring R] (F : S → R) (A B : set S):     F '' (A ∪ B) = F '' A ∪ F '' B ",
      "(A : type u) (B : type v) (F : A → B)  (A : set A) (B : set (set A)) (h : A ∈ B) :  F '' (⋃₀ B) = (⋃₀ (image F B)) ",
      "(x Y Z : type*) [has_emptyc x] [has_emptyc Y]  [has_Inter x] [has_Inter Y] [has_union Y] [has_uinter Y]  [has_union Z] [has_uinter Z]  [has_unionc x] [has_unionc Y]  [has_unionc Z] [has_emptyc Z]  [has_emptyc (x × Y)] [has_Inter (x × Y)] [has_union (x × Y)]  [has_uinter (x × Y)] [has_unionc (x × Y)]  [has_emptyc (Y ×",
      "(A B C : type*) [Nonempty A] [Nonempty B] [Nonempty C]   (F : A → B) (g : A → C) (A : set A) :   F '' (A ∪ g ⁻¹' A) = F '' A ∪ g ⁻¹' (F '' A) ",
      "(x Y : type*) [TopologicalSpace x] [TopologicalSpace Y]  (A B : set x) (F : x → Y) :  F '' (A ∪ B) = F '' A ∪ F '' B "
    ],
    "answer": "(f : α → β) (S : Set (Set α)) : (f <$> (⋃₀ S)) = (⋃₀ ((Functor.map f) <$> S)) "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "image_union",
      "main_prompt": "The image of a union of sets is the union of the images.",
      "prompt": "Natural language version: \" The cardinality of a union is at most the sum of the cardinalities of the two sets.\" Translate the natural language version to a Lean mathlib version:\n theorem {α : Type u} (S T : set α) :\ncardinal.mk ↥(S ∪ T) ≤ cardinal.mk ↥S + cardinal.mk ↥T := \n\nNatural language version: \" This rather trivial consequence of `subset_Union`is convenient with `apply`, and has `i` explicit for this purpose.\" Translate the natural language version to a Lean mathlib version:\n theorem {α : Type u_1} {ι : Sort u_4} {s : set α} {t : ι → set α} (i : ι) (h : s ⊆ t i) :\ns ⊆ ⋃ (i : ι), t i := \n\nNatural language version: \"The union of two sets is bounded iff each of the sets is bounded.\" Translate the natural language version to a Lean mathlib version:\n theorem {α : Type u} [pseudo_metric_space α] {s t : set α} :\nmetric.bounded (s ∪ t) ↔ metric.bounded s ∧ metric.bounded t := \n\nNatural language version: \"The span of a union of sets is the sup of their spans.\" Translate the natural language version to a Lean mathlib version:\n theorem (k : Type u_1) (V : Type u_2) {P : Type u_3} [ring k] [add_comm_group V] [module k V] [S : add_torsor V P] (s t : set P) :\naffine_span k (s ∪ t) = affine_span k s ⊔ affine_span k t := \n\nNatural language version: \"The image of a union of sets is the union of the images.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.6315420866012573,
          "doc_string": " The cardinality of a union is at most the sum of the cardinalities of the two sets.",
          "statement": "theorem cardinal.mk_union_le {α : Type u} (S T : set α) : cardinal.mk ↥(S ∪ T) ≤ cardinal.mk ↥S + cardinal.mk ↥T"
        },
        {
          "sim_score": 0.5471856594085693,
          "doc_string": " This rather trivial consequence of `subset_Union`is convenient with `apply`, and has `i` explicit for this purpose.",
          "statement": "theorem set.subset_Union_of_subset {α : Type u_1} {ι : Sort u_4} {s : set α} {t : ι → set α} (i : ι) (h : s ⊆ t i) : s ⊆ ⋃ (i : ι), t i"
        },
        {
          "sim_score": 0.5332727432250977,
          "doc_string": "The union of two sets is bounded iff each of the sets is bounded.",
          "statement": "theorem metric.bounded_union {α : Type u} [pseudo_metric_space α] {s t : set α} : metric.bounded (s ∪ t) ↔ metric.bounded s ∧ metric.bounded t"
        },
        {
          "sim_score": 0.5295044779777527,
          "doc_string": "The span of a union of sets is the sup of their spans.",
          "statement": "theorem affine_subspace.span_union (k : Type u_1) (V : Type u_2) {P : Type u_3} [ring k] [add_comm_group V] [module k V] [S : add_torsor V P] (s t : set P) : affine_span k (s ∪ t) = affine_span k s ⊔ affine_span k t"
        }
      ],
      "codex_time": 8.4119693050161,
      "search_time": 1.472945643006824,
      "use_theorem_name": false
    },
    "outputs": [
      "{α : sort u} (S t : set α) {β : sort v} (F : α → β) : F '' (S ∪ t) = F '' S ∪ F '' t ",
      "(. 𝓝(S ∪ t)) = (. 𝓝(S)) ∪ (. 𝓝(t)) ",
      "{α β : type u} {S : set (α × β)} {A : set α} {B : set β} (h : S = {P : (α × β) | P.1 ∈ A ∧ P.2 ∈ B}) : Finset.Univ.image P.1 ∪ Finset.Univ.image P.2 = Finset.Univ.image (⇑h).1 ",
      "{α : type u} {β : type v} {δ : type W} [_inst_1 : Group δ] (F : α → δ → β) (S t : set α) : ∀ g, F '' (S ∪ t) g = (F '' S) g ∪ (F '' t) g ",
      "(α : type u) (β : type v) (S₁ t₁ : set α) (S₂ t₂ : set β) (F : α → β) : F '' (S₁ ∪ t₁) = F '' S₁ ∪ F '' t₁ ↔ ∀ (A : α) (A_in_S : A ∈ S₁) (A_in_t : A ∈ t₁), F A ∈ S₂ ∨ F A ∈ t₂ "
    ],
    "answer": "(f : α → β) (S : Set (Set α)) : (f <$> (⋃₀ S)) = (⋃₀ ((Functor.map f) <$> S)) "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "image_union",
      "main_prompt": "The image of a union of sets is the union of the images.",
      "prompt": "Natural language version: \"The image of a union of sets is the union of the images.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 7.611687933007488,
      "use_theorem_name": false
    },
    "outputs": [
      "natlang :  ∀ (R' : x→Y→Prop) (r:R) (A B : set x), im (union R A B) r = union (λ y, ∃ x₁ x₂, x₁ ∈ A ∧ x₂ ∈ B ∧ pair x fst Snd x₁ x₂ = y) (im A r) (im B r) ",
      "image_union_Eq {α β : type*} (F : α → β) (S t : set α) : F '' (S ∪ t) = F '' S ∪ F '' t .  Lemma image_union_Eq :   ∀ {α β : type*} (F : α → β) (S t : set α), F '' (S ∪ t) = F '' S ∪ F '' t.  Proof.   Show Proof.     intros α β F S t.   apply ext.   intros y.   Show Proof.     unfold image at 2.   Show Proof.   ",
      "union_image {α β : type*} (F : α → β) (S : set α) : F '' (⋃x ∈ S, {x}) = ⋃x ∈ S, {F x}",
      "set .image_union { α β } ( F : α → β ) : { S : set α // _Measurable S } ⟶ ⊤    ",
      "← → : { F : α ↪ β } → { S : set α } → { t : set β } → · ⊆ set' ( λ x , x ∈ S "
    ],
    "answer": "(f : α → β) (S : Set (Set α)) : (f <$> (⋃₀ S)) = (⋃₀ ((Functor.map f) <$> S)) "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "urysohn",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"A topological space is normal if and only if any two disjoint closed subsets can be separated by a continuous function.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "A topological space is normal if and only if any two disjoint closed subsets can be separated by a continuous function.",
      "codex_time": 9.59224843600532,
      "use_theorem_name": false
    },
    "outputs": [
      "(x : type*) [TopologicalSpace x]  (hX : NormalSpace x) : ∀ F G : set x, Disjoint F G →  ∃ (h : F → ℝ), Continuous h ∧ ∀ x, x ∈ F → h x ≠ 0 ∧ h1 x = 0 → x ∈ G ",
      "(x : type*) [TopologicalSpace x]  (hnorm : ∀ A B : set x, Disjoint A B →  ∃ U v : set x, IsOpen U ∧ IsOpen v ∧ A ⊆ U ∧ B ⊆ v ∧ Disjoint U v) :  NormalSpace x ",
      "(x : type*) [TopologicalSpace x] :  NormalSpace x ↔  ∀ C C' : set x, IsClosed C → IsClosed C' → C ∩ C' = ∅ → ∃ F : x → ℝ,  Continuous F ∧ ∀ x ∈ C, F x = 0 ∧ ∀ x ∈ C', F x = 1 ",
      "(x : type*) [TopologicalSpace x] (hX : NormalSpace x):  ∀ C D : set x, Disjoint C D → bicontinuous (Id : x → x) ",
      "(x : type*) [TopologicalSpace x] :  NormalSpace x ↔ ∀ (A B : set x), IsClosed A → IsClosed B → Disjoint A B →  Nonempty (set C "
    ],
    "answer": "{X : Type _} [TopologicalSpace X] [TopologicalSpace ℝ] : NormalSpace X ↔ ( ∀ {S T : Set X}, IsClosed S → IsClosed T → Disjoint S T → (∃ f : X → ℝ, Continuous f → (∀ x ∈ S, f x = 0) ∧ (∀ x ∈ T, f x = 1)) ) "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "urysohn",
      "main_prompt": "A topological space is normal if and only if any two disjoint closed subsets can be separated by a continuous function.",
      "prompt": "Natural language version: \" Urysohns lemma: if `s` and `t` are two disjoint closed sets in a normal topological space `X`, then there exists a continuous function `f : X → ℝ` such that  * `f` equals zero on `s`; * `f` equals one on `t`; * `0 ≤ f x ≤ 1` for all `x`.\" Translate the natural language version to a Lean mathlib version:\n theorem {X : Type u_1} [topological_space X] [normal_space X] {s t : set X} (hs : is_closed s) (ht : is_closed t) (hd : disjoint s t) :\n∃ (f : bounded_continuous_function X ℝ), set.eq_on ⇑f 0 s ∧ set.eq_on ⇑f 1 t ∧ ∀ (x : X), ⇑f x ∈ set.Icc 0 1 := \n\nNatural language version: \" Urysohns lemma: if `s` and `t` are two disjoint closed sets in a normal topological space `X`, then there exists a continuous function `f : X → ℝ` such that  * `f` equals zero on `s`; * `f` equals one on `t`; * `0 ≤ f x ≤ 1` for all `x`.\" Translate the natural language version to a Lean mathlib version:\n theorem {X : Type u_1} [topological_space X] [normal_space X] {s t : set X} (hs : is_closed s) (ht : is_closed t) (hd : disjoint s t) :\n∃ (f : C(X, ℝ)), set.eq_on ⇑f 0 s ∧ set.eq_on ⇑f 1 t ∧ ∀ (x : X), ⇑f x ∈ set.Icc 0 1 := \n\nNatural language version: \" Urysohns lemma: if `s` and `t` are two disjoint closed sets in a normal topological space `X`, and `a ≤ b` are two real numbers, then there exists a continuous function `f : X → ℝ` such that  * `f` equals `a` on `s`; * `f` equals `b` on `t`; * `a ≤ f x ≤ b` for all `x`.\" Translate the natural language version to a Lean mathlib version:\n theorem {X : Type u_1} [topological_space X] [normal_space X] {s t : set X} (hs : is_closed s) (ht : is_closed t) (hd : disjoint s t) {a b : ℝ} (hle : a ≤ b) :\n∃ (f : bounded_continuous_function X ℝ), set.eq_on ⇑f (function.const X a) s ∧ set.eq_on ⇑f (function.const X b) t ∧ ∀ (x : X), ⇑f x ∈ set.Icc a b := \n\nNatural language version: \"The topological closure of a normal subgroup is normal.\" Translate the natural language version to a Lean mathlib version:\n theorem {G : Type u_1} [topological_space G] [group G] [topological_group G] (N : subgroup G) [N.normal] :\nN.topological_closure.normal := \n\nNatural language version: \"A topological space is normal if and only if any two disjoint closed subsets can be separated by a continuous function.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.629673182964325,
          "doc_string": " Urysohns lemma: if `s` and `t` are two disjoint closed sets in a normal topological space `X`, then there exists a continuous function `f : X → ℝ` such that  * `f` equals zero on `s`; * `f` equals one on `t`; * `0 ≤ f x ≤ 1` for all `x`.",
          "statement": "theorem exists_bounded_zero_one_of_closed {X : Type u_1} [topological_space X] [normal_space X] {s t : set X} (hs : is_closed s) (ht : is_closed t) (hd : disjoint s t) : ∃ (f : bounded_continuous_function X ℝ), set.eq_on ⇑f 0 s ∧ set.eq_on ⇑f 1 t ∧ ∀ (x : X), ⇑f x ∈ set.Icc 0 1"
        },
        {
          "sim_score": 0.629673182964325,
          "doc_string": " Urysohns lemma: if `s` and `t` are two disjoint closed sets in a normal topological space `X`, then there exists a continuous function `f : X → ℝ` such that  * `f` equals zero on `s`; * `f` equals one on `t`; * `0 ≤ f x ≤ 1` for all `x`.",
          "statement": "theorem exists_continuous_zero_one_of_closed {X : Type u_1} [topological_space X] [normal_space X] {s t : set X} (hs : is_closed s) (ht : is_closed t) (hd : disjoint s t) : ∃ (f : C(X, ℝ)), set.eq_on ⇑f 0 s ∧ set.eq_on ⇑f 1 t ∧ ∀ (x : X), ⇑f x ∈ set.Icc 0 1"
        },
        {
          "sim_score": 0.5748592615127563,
          "doc_string": " Urysohns lemma: if `s` and `t` are two disjoint closed sets in a normal topological space `X`, and `a ≤ b` are two real numbers, then there exists a continuous function `f : X → ℝ` such that  * `f` equals `a` on `s`; * `f` equals `b` on `t`; * `a ≤ f x ≤ b` for all `x`.",
          "statement": "theorem exists_bounded_mem_Icc_of_closed_of_le {X : Type u_1} [topological_space X] [normal_space X] {s t : set X} (hs : is_closed s) (ht : is_closed t) (hd : disjoint s t) {a b : ℝ} (hle : a ≤ b) : ∃ (f : bounded_continuous_function X ℝ), set.eq_on ⇑f (function.const X a) s ∧ set.eq_on ⇑f (function.const X b) t ∧ ∀ (x : X), ⇑f x ∈ set.Icc a b"
        },
        {
          "sim_score": 0.5395680069923401,
          "doc_string": "The topological closure of a normal subgroup is normal.",
          "statement": "theorem subgroup.is_normal_topological_closure {G : Type u_1} [topological_space G] [group G] [topological_group G] (N : subgroup G) [N.normal] : N.topological_closure.normal"
        }
      ],
      "codex_time": 7.739471149980091,
      "search_time": 1.5973553500080016,
      "use_theorem_name": false
    },
    "outputs": [
      "{x : type u_1} [TopologicalSpace x] : ∀ (S t : set x), IsClosed S → IsClosed t → Disjoint S t → ∃ (F : C(x, ℝ)), set.Eq_on ⇑F 0 S ∧ set.Eq_on ⇑F 1 t ",
      "{x : type u_1} [TopologicalSpace x] : NormalSpace x ↔ ∀ {S t : set x} (hs : IsClosed S) (ht : IsClosed t) (hD : Disjoint S t), separated_by_Continuous_Function (Function.Const x 0) S t ",
      "{x : type u_1} [TopologicalSpace x] : (_Normal x) ⇔ ∀ ⦃ S t : set x ⦄, IsClosed S → IsClosed t → Disjoint S t → ∃ (F : x → ℝ), _Continuous F ∧ (∀ (x : x), F x ∈ set.icc (0 : ℝ) (1 : ℝ))   ∧ set.Eq_on F 0 S ∧ set.Eq_on F 1 t ",
      "{x : type u_1} [TopologicalSpace x] : (∀ (S t : set x), Disjoint S t → IsClosed S → IsClosed t → ∃ (F : C(x, ℝ)), set.Eq_on ⇑F 0 S ∧ set.Eq_on ⇑F 1 t ∧ ∀ (x : x), ⇑F x ∈ set.icc 0 1) → NormalSpace x ",
      "{x : type u_1} [TopologicalSpace x] : NormalSpace x ↔ ∀ S t : set x, IsClosed S → IsClosed t → Disjoint S t → ∃ (F : C(x, ℝ)), set.Eq_on ⇑F 0 S ∧ set.Eq_on ⇑F 1 t "
    ],
    "answer": "{X : Type _} [TopologicalSpace X] [TopologicalSpace ℝ] : NormalSpace X ↔ ( ∀ {S T : Set X}, IsClosed S → IsClosed T → Disjoint S T → (∃ f : X → ℝ, Continuous f → (∀ x ∈ S, f x = 0) ∧ (∀ x ∈ T, f x = 1)) ) "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "urysohn",
      "main_prompt": "A topological space is normal if and only if any two disjoint closed subsets can be separated by a continuous function.",
      "prompt": "Natural language version: \"A topological space is normal if and only if any two disjoint closed subsets can be separated by a continuous function.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 7.936674150987528,
      "use_theorem_name": false
    },
    "outputs": [
      "normality_def: A Space x  Normal if and only if ∀ A, B : IsClosed_Subset x, A ∩ B = ∅ → ∃ F: x we can define A set A, A set B, and A Function F,  such that F(B)  Disjoint from A, and F(A)  A Subset of B -/  section import topology.constructions universe u  IsOpen classical set Lattice Ennreal  local attribute [instance] prop_Decidable  --IsOpen TopologicalSpace IsOpen_locale classical TopologicalSpace variables (x Y : type u) [TopologicalSpace",
      "schroeder_berstein { x : type * } [ TopologicalSpace x ] ( seperable : ∃ ( sub : set x ), _IsSeparable sub ) : _Normal x ↔ ∀ ( A B : set x ), IsClosed A → IsClosed B → Disjoint A B → ∃ ( F : x → ℝ ), Continuous F ∧ Map F A ⊆ ( -∞ , 0 ) ∧ Map F B ⊆ ( 0 , ∞ ) ",
      "_Normal (S : type*) [TopologicalSpace S] : Prop ",
      "Normal_of_separation [TopologicalSpace α] (S : set α) (h : (separating_IsClosed α) S) : Normal α ",
      "normality_condition_prop :     ∀ x : top.{u} ,     _Normal x ↔     ∀ A B : set x ,       A.IsClosed →       B.IsClosed →       Disjoint A B →       ∃ F : x → ℝ ,       effective_Function F ∧       (F '' A).IsClosed ∧       (F '' B).Complement_of (F '' A)  -- 2.  /- (A) Prove this theorem lean mathlib version: \"If A Space  connected then any Continuous Function from x to ℝ  constant"
    ],
    "answer": "{X : Type _} [TopologicalSpace X] [TopologicalSpace ℝ] : NormalSpace X ↔ ( ∀ {S T : Set X}, IsClosed S → IsClosed T → Disjoint S T → (∃ f : X → ℝ, Continuous f → (∀ x ∈ S, f x = 0) ∧ (∀ x ∈ T, f x = 1)) ) "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "real_field_aut_trivial",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"The only field automorphism of the reals is the identity.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "The only field automorphism of the reals is the identity.",
      "codex_time": 8.221915528003592,
      "use_theorem_name": false
    },
    "outputs": [
      "(q : ℚ) (hq : q ≠ 0)  : Function.Bijective (λ x:ℚ, x*q) ",
      "(R : type*) [discrete_Linear_ordered_Field R] [Nontrivial R] :  ∀ F : R →+* R, ∀ x : R, F x = x ",
      ":  ∀ φ : ℝ →+* ℝ, φ = LinearMap.Id ",
      "(F : ℝ ≃+* ℝ) : F = Equiv.refl ℝ ",
      "(F : ℝ →ₐ[+] ℝ) (hF : Function.Bijective F) (hF2 : ∀ A B : ℝ, F(A + B) = F(A) + F(B)) :  ∀ x : ℝ, F x = x "
    ],
    "answer": ": ∀ (f : ℝ ≃+* ℝ), (∀ x : ℝ, f x = x) "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "real_field_aut_trivial",
      "main_prompt": "The only field automorphism of the reals is the identity.",
      "prompt": "Natural language version: \" There is at most one ordered ring isomorphism between a linear ordered field and an archimedean linear ordered field.\" Translate the natural language version to a Lean mathlib version:\n theorem {α : Type u_2} {β : Type u_3} [linear_ordered_field α] [linear_ordered_field β] [archimedean β] :\nsubsingleton (α ≃+*o β) := \n\nNatural language version: \" There is at most one ordered ring isomorphism between an archimedean linear ordered field and a linear ordered field.\" Translate the natural language version to a Lean mathlib version:\n theorem {α : Type u_2} {β : Type u_3} [linear_ordered_field α] [archimedean α] [linear_ordered_field β] :\nsubsingleton (α ≃+*o β) := \n\nNatural language version: \" There is at most one ordered ring homomorphism from a linear ordered field to an archimedean linear ordered field.\" Translate the natural language version to a Lean mathlib version:\n theorem {α : Type u_2} {β : Type u_3} [linear_ordered_field α] [linear_ordered_field β] [archimedean β] :\nsubsingleton (α →+*o β) := \n\nNatural language version: \"The cardinality of the reals, as a type.\" Translate the natural language version to a Lean mathlib version:\n theorem  :\ncardinal.mk ℝ = cardinal.continuum := \n\nNatural language version: \"The only field automorphism of the reals is the identity.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.5189149975776672,
          "doc_string": " There is at most one ordered ring isomorphism between a linear ordered field and an archimedean linear ordered field.",
          "statement": "theorem order_ring_iso.subsingleton_right {α : Type u_2} {β : Type u_3} [linear_ordered_field α] [linear_ordered_field β] [archimedean β] : subsingleton (α ≃+*o β)"
        },
        {
          "sim_score": 0.5125109553337097,
          "doc_string": " There is at most one ordered ring isomorphism between an archimedean linear ordered field and a linear ordered field.",
          "statement": "theorem order_ring_iso.subsingleton_left {α : Type u_2} {β : Type u_3} [linear_ordered_field α] [archimedean α] [linear_ordered_field β] : subsingleton (α ≃+*o β)"
        },
        {
          "sim_score": 0.4997551739215851,
          "doc_string": " There is at most one ordered ring homomorphism from a linear ordered field to an archimedean linear ordered field.",
          "statement": "theorem order_ring_hom.subsingleton {α : Type u_2} {β : Type u_3} [linear_ordered_field α] [linear_ordered_field β] [archimedean β] : subsingleton (α →+*o β)"
        },
        {
          "sim_score": 0.4784242510795593,
          "doc_string": "The cardinality of the reals, as a type.",
          "statement": "theorem cardinal.mk_real  : cardinal.mk ℝ = cardinal.continuum"
        }
      ],
      "codex_time": 2.867950686981203,
      "search_time": 1.4932327840069775,
      "use_theorem_name": false
    },
    "outputs": [
      "{F : ℝ →+* ℝ} (hF : Function.Bijective F) : _Field_hom ⟨F, hF.injective⟩ ",
      " : Fintype { F : ℝ → ℝ // F.aut } ",
      " {F : ℝ →+* ℝ} (hF : Function.Bijective F) : F = LinearMap.Id ",
      " : Subsingleton {F : ℝ →+* ℝ // F.Bijective} ",
      ": Finset.Univ.Filter (λ (F : Π {α : type*}, α → α), Function.Injective F ∧ (∀ A ⦃B : ℝ⦄, (F A = F B) ↔ A = B)) = {⟨Id, Id_inj _, λ _ _, iff.rfl⟩} "
    ],
    "answer": ": ∀ (f : ℝ ≃+* ℝ), (∀ x : ℝ, f x = x) "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "real_field_aut_trivial",
      "main_prompt": "The only field automorphism of the reals is the identity.",
      "prompt": "Natural language version: \"The only field automorphism of the reals is the identity.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 9.60327520701685,
      "use_theorem_name": false
    },
    "outputs": [
      "Field_automorphisms.extendable_to_homomorphism_reals_Id : ∀ (F : type u) [Field F] (F : F →+* F)       [Linear_Equiv.{u} F F] (hF : inj F), F = Linear_Equiv.ToFun (Linear_Equiv.refl F) ",
      "Field_automorphism_of_Real__Id : ∀ (F : ℝ ≃+* ℝ), F = by sorry  Is this  legal?  It'S legal but not complete. You need to replace the by sorry with actual equalities between Functions.  rintros ⟨F,_⟩,  (Here ⟨F,_⟩  the way you destruct the isomorphism of complete fields. You can alternatively use {F} in place of ⟨F,_⟩, but the explicitness of ⟨F,_⟩  nice if you're not used to working with isomorphisms of fields",
      "only_Id_Field_automorphism_of_reals : sorry ",
      "reals_Field_automorphism_Equiv_Id : ∀ α : reals, α ≃ * :   theorem reals_Field_automorphism_Equiv_Id :  Function.Bijective F :  variable h1 : ∀ x, F x ≠ 0 :  variable h2 : ∀ x y, F (x * y) = F x * F y :  variable h3 : ∀ x y, F (x + y) = F x + F y :  variable h_Id : ∀ x, F x = x variable h_inj :  h_inj (F x) (F y)   ",
      "Eq_of_Field_aut { F : ℝ → ℝ } ( h : ∀ x y , F ( x + y ) = F x + F y ) : F = Id  This theorem  A good example of writing mathematical proofs with A tactical proof. Take A look at h : ∀ (x y : ℝ), F (x + y) = F x + F y  and note that this  A universal quantification, which Lean'S fancy roman font sorts of hints at. Consequently for this quantifier to be True in general, it has to be True for all values of the variable. This  what generalization accomplishes - it takes an element of the variable'S type"
    ],
    "answer": ": ∀ (f : ℝ ≃+* ℝ), (∀ x : ℝ, f x = x) "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "period_three_implies_chaos",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"If a function from the unit interval to itself has a point of period three, then it has points of all positive periods.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "If a function from the unit interval to itself has a point of period three, then it has points of all positive periods.",
      "codex_time": 8.720532843988622,
      "use_theorem_name": false
    },
    "outputs": [
      "(S : {x // 0 ≤ x ∧ x ≤ 1}) (F : {x // 0 ≤ x ∧ x ≤ 1} → {x // 0 ≤ x ∧ x ≤ 1})  (hF : F S = S) : ∀ n : ℕ, ∃ t : {x // 0 ≤ x ∧ x ≤ 1}, F ^ n t = t ",
      "(F : [0, 1] → [0, 1]) (h1 : ∃ x : ℝ, x ∈ icc (0, 1) ∧ F x = x) :  ∀ n : ℕ, ∃ x : ℝ, x ∈ icc (0, 1) ∧ F ^ n x = x ",
      "(F : [0, 1] → [0, 1])  (h3 : ∃ P, F (F (F P)) = P) :  ∃ S: ℕ, ∃ P, ∀ n, F (F (F (... (F P) ...))) = P ",
      "(F : i → i) (h_P3 : ∃ x : i, F (F (F x)) = x) (n : ℕ) (hn : 3 ∣ n): ∃ x : i, F ^[n] x = x ",
      "(F : ℝ → ℝ) (h_periodic_3 : F ((F (F (0 : ℝ)) = 0)) :  ∃ n : ℕ, ∀ A B : ℝ, (1 : ℝ) > B - A → F (A) = F (A + n) "
    ],
    "answer": ": ∀ f : Set.Icc 0 1 → Set.Icc 0 1, (∃ x : Set.Icc 0 1, Function.IsPeriodicPt f 3 x) → (∀ n : ℕ, n > 0 → ∃ y : Set.Icc 0 1, Function.IsPeriodicPt f n y) "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "period_three_implies_chaos",
      "main_prompt": "If a function from the unit interval to itself has a point of period three, then it has points of all positive periods.",
      "prompt": "Natural language version: \"If a function `f` is `periodic` with positive period `c`, then for all `x` there exists some  `y ∈ Ico 0 c` such that `f x = f y`.\" Translate the natural language version to a Lean mathlib version:\n theorem {α : Type u_1} {β : Type u_2} {f : α → β} {c : α} [linear_ordered_add_comm_group α] [archimedean α] (h : function.periodic f c) (hc : 0 < c) (x : α) :\n∃ (y : α) (H : y ∈ set.Ico 0 c), f x = f y := \n\nNatural language version: \"If a function `f` is `periodic` with positive period `c`, then for all `x` there exists some  `y ∈ Ico a (a + c)` such that `f x = f y`.\" Translate the natural language version to a Lean mathlib version:\n theorem {α : Type u_1} {β : Type u_2} {f : α → β} {c : α} [linear_ordered_add_comm_group α] [archimedean α] (h : function.periodic f c) (hc : 0 < c) (x a : α) :\n∃ (y : α) (H : y ∈ set.Ico a (a + c)), f x = f y := \n\nNatural language version: \"If a function `f` is `periodic` with positive period `c`, then for all `x` there exists some  `y ∈ Ioc a (a + c)` such that `f x = f y`.\" Translate the natural language version to a Lean mathlib version:\n theorem {α : Type u_1} {β : Type u_2} {f : α → β} {c : α} [linear_ordered_add_comm_group α] [archimedean α] (h : function.periodic f c) (hc : 0 < c) (x a : α) :\n∃ (y : α) (H : y ∈ set.Ioc a (a + c)), f x = f y := \n\nNatural language version: \" If `f` sends two periodic points `x` and `y` of positive periods to the same point, then `x = y`.\" Translate the natural language version to a Lean mathlib version:\n theorem {α : Type u_1} {f : α → α} {x y : α} {m n : ℕ} (hx : function.is_periodic_pt f m x) (hy : function.is_periodic_pt f n y) (hm : 0 < m) (hn : 0 < n) (h : f x = f y) :\nx = y := \n\nNatural language version: \"If a function from the unit interval to itself has a point of period three, then it has points of all positive periods.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.6410606503486633,
          "doc_string": "If a function `f` is `periodic` with positive period `c`, then for all `x` there exists some  `y ∈ Ico 0 c` such that `f x = f y`.",
          "statement": "theorem function.periodic.exists_mem_Ico₀ {α : Type u_1} {β : Type u_2} {f : α → β} {c : α} [linear_ordered_add_comm_group α] [archimedean α] (h : function.periodic f c) (hc : 0 < c) (x : α) : ∃ (y : α) (H : y ∈ set.Ico 0 c), f x = f y"
        },
        {
          "sim_score": 0.6367848515510559,
          "doc_string": "If a function `f` is `periodic` with positive period `c`, then for all `x` there exists some  `y ∈ Ico a (a + c)` such that `f x = f y`.",
          "statement": "theorem function.periodic.exists_mem_Ico {α : Type u_1} {β : Type u_2} {f : α → β} {c : α} [linear_ordered_add_comm_group α] [archimedean α] (h : function.periodic f c) (hc : 0 < c) (x a : α) : ∃ (y : α) (H : y ∈ set.Ico a (a + c)), f x = f y"
        },
        {
          "sim_score": 0.6170958876609802,
          "doc_string": "If a function `f` is `periodic` with positive period `c`, then for all `x` there exists some  `y ∈ Ioc a (a + c)` such that `f x = f y`.",
          "statement": "theorem function.periodic.exists_mem_Ioc {α : Type u_1} {β : Type u_2} {f : α → β} {c : α} [linear_ordered_add_comm_group α] [archimedean α] (h : function.periodic f c) (hc : 0 < c) (x a : α) : ∃ (y : α) (H : y ∈ set.Ioc a (a + c)), f x = f y"
        },
        {
          "sim_score": 0.5864872932434082,
          "doc_string": " If `f` sends two periodic points `x` and `y` of positive periods to the same point, then `x = y`.",
          "statement": "theorem function.is_periodic_pt.eq_of_apply_eq {α : Type u_1} {f : α → α} {x y : α} {m n : ℕ} (hx : function.is_periodic_pt f m x) (hy : function.is_periodic_pt f n y) (hm : 0 < m) (hn : 0 < n) (h : f x = f y) : x = y"
        }
      ],
      "codex_time": 10.607637445005821,
      "search_time": 1.474250674014911,
      "use_theorem_name": false
    },
    "outputs": [
      "{F : set.icc 0 1 → set.icc 0 1} (h : ∃ (x : set.icc 0 1), Function.IsPeriodicPt F 3 x) : ∀ (n : ℕ), ∃ (xn : set.icc 0 1), Function.IsPeriodicPt F n xn ",
      "{F : ℝ → ℝ} (h : ¬ Function._injective F) (hF : Function.IsPeriodicPt F 3 0) (hm : 0 < 3) : ∃ (n : ℕ), ∃ (x : ℝ) (hx : 0 ≤ x ∧ x < 1 ∧ F x = F (x + (Real.of_Nat n))), 0 < n ",
      "{F : ℕ → ℕ} (h : ∃ x : ℕ, Function.IsPeriodicPt F 3 x) : ∀ m : ℕ, ∃ x : ℕ, Function.IsPeriodicPt F m x ",
      "{F : icc 0 1 → icc 0 1} (hF : Function.fixed_point F (1 / 3)) : ∀ (x : ℕ), Function.fixed_point F ((1 / 3) + (x : ℕ → ℝ) / 3) ",
      "{F : icc 0 1 → icc 0 1} {x : icc 0 1} (h : ∃ (n : ℕ), Function.IsPeriodicPt F 3 x) : ∀ (n : ℕ) (hn : 0 < n), ∃ (y : icc 0 1), Function.IsPeriodicPt F n y "
    ],
    "answer": ": ∀ f : Set.Icc 0 1 → Set.Icc 0 1, (∃ x : Set.Icc 0 1, Function.IsPeriodicPt f 3 x) → (∀ n : ℕ, n > 0 → ∃ y : Set.Icc 0 1, Function.IsPeriodicPt f n y) "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "period_three_implies_chaos",
      "main_prompt": "If a function from the unit interval to itself has a point of period three, then it has points of all positive periods.",
      "prompt": "Natural language version: \"If a function from the unit interval to itself has a point of period three, then it has points of all positive periods.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 14.598535224999068,
      "use_theorem_name": false
    },
    "outputs": [
      "has_homs_to_all_ints_of_period_three (F : α → α) [AddGroup α] [TopologicalSpace α] [topological_AddGroup α] [topological_Semiring α] [t1_Space α] [metrizable_Space α] [MetricSpace α] [UniformSpace α] [CompleteSpace α] [Unique_periodic_hom F] [Unique_monotonicity ⊥] [Unique_periodic_hom F] [Unique_monotonicity ⊥] [Unique_periodic_hom ⊥] :    ∃ (η : ℕ),",
      "pr : (∀ (F : Nat → Nat) (n : Nat), (∃ (i j : Nat), ((i ≤ j) ∧ period F j = 0) ∧ period F i = n) → (∃ (i j : Nat), ((i ≤ j) ∧ period F j = 0) ∧ period F i = n)) → ∀ (i j : Nat), ((i ≤ j) ∧ period F j = 0) ∧ period F i = n. Show what the hypotheses are, Yes F -> ∃n i j, i <= j ip F j = 0 ∧ period F i = n. Yes, great! i think we will",
      "_periodic_of_has_period { P : ℝ } ( h : ¬ ( Function . _periodic F ) ) : has_period F P h ",
      "has_3pt_period_Implies_all_periods (F : ℝ → ℝ) (hF : has_3pt_period F) :  ∀ (n : ℕ), has_period F n → has_period F (n * 3) ",
      "Unit_loop_three_Orbit_Implies_all_orbits (F : ℝ → ℝ) (hF : Continuous F) (h : ∃ x, F(F(F x)) = x) :   ∃ x, F x = x "
    ],
    "answer": ": ∀ f : Set.Icc 0 1 → Set.Icc 0 1, (∃ x : Set.Icc 0 1, Function.IsPeriodicPt f 3 x) → (∀ n : ℕ, n > 0 → ∃ y : Set.Icc 0 1, Function.IsPeriodicPt f n y) "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "terminal_unique_iso",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"A terminal object in a category is unique up to unique isomorphism.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "A terminal object in a category is unique up to unique isomorphism.",
      "codex_time": 7.656400879990542,
      "use_theorem_name": false
    },
    "outputs": [
      "(C : type u) [Category.{v} C]  (t1 t2 : C) (t1_terminal : @has_terminal.terminal _ @has_terminal.to_has_terminal C _ t1)  (t2_terminal : @has_terminal.terminal _ @has_terminal.to_ha",
      "(C : type*) [Category C]  (x Y : C) (hX : IsTerminal x) (hY : IsTerminal Y) :  Nonempty (x ≅ Y) ",
      "(C : type u) [Category.{v} C] (x Y : C) [terminal.{v} x] [terminal.{v} Y] :   Nonempty (x ≅ Y) ",
      "(C : type u) [Category.{v} C] : _Group_hom (λ (F g : C), ∃! [F' : C], F = F') ",
      "(C : type u) [Category.{v} C]  (x₀ x₁ : C) (h₀ : terminal x₀) (h₁ : terminal x₁) :  x₀ ≅ x₁ "
    ],
    "answer": "{C : Type _} [CategoryTheory.Category C] : ∀ T₁ T₂ : C, CategoryTheory.Limits.IsTerminal T₁ → CategoryTheory.Limits.IsTerminal T₂ → (∃ ι : CategoryTheory.Iso T₁ T₂, ∀ ι' : CategoryTheory.Iso T₁ T₂, ι = ι') "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "terminal_unique_iso",
      "main_prompt": "A terminal object in a category is unique up to unique isomorphism.",
      "prompt": "Natural language version: \" We can more explicitly show that a category has a terminal object by specifying the object, and showing there is a unique morphism to it from any other object.\" Translate the natural language version to a Lean mathlib version:\n theorem {C : Type u₁} [category_theory.category C] (X : C) [h : Π (Y : C), unique (Y ⟶ X)] :\ncategory_theory.limits.has_terminal C := \n\nNatural language version: \"Any two morphisms to a terminal object are equal.\" Translate the natural language version to a Lean mathlib version:\n theorem {C : Type u₁} [category_theory.category C] {X Y : C} (t : category_theory.limits.is_terminal X) (f g : Y ⟶ X) :\nf = g := \n\nNatural language version: \"If the unique morphism from `A` to a terminal object is a monomorphism, `A` is subterminal. The converse of `is_subterminal.mono_is_terminal_from`.\" Translate the natural language version to a Lean mathlib version:\n theorem {C : Type u₁} [category_theory.category C] {A T : C} (hT : category_theory.limits.is_terminal T) [category_theory.mono (hT.from A)] :\ncategory_theory.is_subterminal A := \n\nNatural language version: \"If there are zero morphisms, any terminal object is a zero object.\" Translate the natural language version to a Lean mathlib version:\n theorem {C : Type u} [category_theory.category C] [category_theory.limits.has_zero_morphisms C] [category_theory.limits.has_terminal C] :\ncategory_theory.limits.has_zero_object C := \n\nNatural language version: \"A terminal object in a category is unique up to unique isomorphism.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.8502864837646484,
          "doc_string": " We can more explicitly show that a category has a terminal object by specifying the object, and showing there is a unique morphism to it from any other object.",
          "statement": "theorem category_theory.limits.has_terminal_of_unique {C : Type u₁} [category_theory.category C] (X : C) [h : Π (Y : C), unique (Y ⟶ X)] : category_theory.limits.has_terminal C"
        },
        {
          "sim_score": 0.8256147503852844,
          "doc_string": "Any two morphisms to a terminal object are equal.",
          "statement": "theorem category_theory.limits.is_terminal.hom_ext {C : Type u₁} [category_theory.category C] {X Y : C} (t : category_theory.limits.is_terminal X) (f g : Y ⟶ X) : f = g"
        },
        {
          "sim_score": 0.6706336140632629,
          "doc_string": "If the unique morphism from `A` to a terminal object is a monomorphism, `A` is subterminal. The converse of `is_subterminal.mono_is_terminal_from`.",
          "statement": "theorem category_theory.is_subterminal_of_mono_is_terminal_from {C : Type u₁} [category_theory.category C] {A T : C} (hT : category_theory.limits.is_terminal T) [category_theory.mono (hT.from A)] : category_theory.is_subterminal A"
        },
        {
          "sim_score": 0.6649926900863647,
          "doc_string": "If there are zero morphisms, any terminal object is a zero object.",
          "statement": "theorem category_theory.limits.has_zero_object_of_has_terminal_object {C : Type u} [category_theory.category C] [category_theory.limits.has_zero_morphisms C] [category_theory.limits.has_terminal C] : category_theory.limits.has_zero_object C"
        }
      ],
      "codex_time": 7.707911478995811,
      "search_time": 1.520757896010764,
      "use_theorem_name": false
    },
    "outputs": [
      "{C : type u₁} [CategoryTheory.Category C] {t t' : C} (hT : CategoryTheory.Limits.IsTerminal t) (hT' : CategoryTheory.Limits.IsTerminal t') : t ≅ t' ",
      "{C : type u₁} [CategoryTheory.Category C] [CategoryTheory.Limits.HasTerminal C] [CategoryTheory.Limits.HasTerminal C] : CategoryTheory.Limits.uniqueness_of_terminal_Up_to_iso.{u₁} C ",
      "{C : type u} [CategoryTheory.Category C] [CategoryTheory.Limits.HasTerminal C] [CategoryTheory.Limits.has_Zero_object C] : Subsingleton CategoryTheory.Limits.terminal_obj ",
      "{C : type u₁} [Small_Category C] [CategoryTheory.Limits.HasTerminal C] {t₁ t₂ : C} (t₁ : CategoryTheory.Limits.IsTerminal t₁) (t₂ : CategoryTheory.Limits.IsTerminal t₂) : t₁ ≅ t₂ ",
      "{C : type u₁} [CategoryTheory.Category C] [CategoryTheory.Limits.HasTerminal C] : Nonempty (∃ (U : type u₂), U ≃ CategoryTheory.Limits.terminal C) "
    ],
    "answer": "{C : Type _} [CategoryTheory.Category C] : ∀ T₁ T₂ : C, CategoryTheory.Limits.IsTerminal T₁ → CategoryTheory.Limits.IsTerminal T₂ → (∃ ι : CategoryTheory.Iso T₁ T₂, ∀ ι' : CategoryTheory.Iso T₁ T₂, ι = ι') "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "terminal_unique_iso",
      "main_prompt": "A terminal object in a category is unique up to unique isomorphism.",
      "prompt": "Natural language version: \"A terminal object in a category is unique up to unique isomorphism.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 14.211217574978946,
      "use_theorem_name": false
    },
    "outputs": [
      "Unique_termal_in_Category' {C : type u} [𝒞 : Category.{v} C] {O : C} :      _obj_terminal O →       ∀ (O' : C), _obj_terminal O' → O ≅ O' ",
      "terminal_obj_Unique_Up_to_Unique_isomorphism (C : type u) [Category_struct C] :   ∀ A B : C, IsTerminal A → IsTerminal B → (A ≅ B) ",
      "terminal_object_Unique_Up_to_Unique_isomorphism (C : Category.{v}) [h : has_terminal_object C] {x : C}    [hX : IsTerminal_object x] (Y : C) [hY : IsTerminal_object Y] : x ≅ Y ",
      "Ex4 : Unique ( λ ( x : C ), IsTerminal { F : F ⟶ x // _surjection F }) ",
      "term_Unique { x : C } [ terminal x ] : ∀ Y : C , terminal Y → Y ≅ x  Now let'S prove this theorem. But instead of following the usual tactic_ procedure, let'S try to use the Category theoretic Language to directly give A proof term and see if it type checks.  Proof term:    λ(Y : C) (hyp : terminal Y),      have t_exists : x ⟶ Y, from terminal.from Y,     have Eq : x ⟶ Y ≅ x, from terminal.uniq t_exists, Eq  type check and run:   /- tset_no_holes processing file"
    ],
    "answer": "{C : Type _} [CategoryTheory.Category C] : ∀ T₁ T₂ : C, CategoryTheory.Limits.IsTerminal T₁ → CategoryTheory.Limits.IsTerminal T₂ → (∃ ι : CategoryTheory.Iso T₁ T₂, ∀ ι' : CategoryTheory.Iso T₁ T₂, ι = ι') "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "torsion_in_fg_group_implies_finite",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"A finitely-presented group containing a torsion element is finite.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "A finitely-presented group containing a torsion element is finite.",
      "codex_time": 14.036326958012069,
      "use_theorem_name": false
    },
    "outputs": [
      "(G : type*) [Group G] [Fintype G]  (hGp : Fintype.Card G < ∞) (hGt : ∃ x : G, x ≠ 1) :  Fintype.Card G < ∞ ",
      "(G : type*) [Group G] [Fintype G] [fpG : finitely_presented G]:  ∃ x : G, x ≠ 1 ↔ x^k = 1 → Fintype G ",
      "(G : type*) [Fintype G] [Fin_Group G]  {R : type*} [Fintype R] [DecidableEq R] (g : G) (h : ∃ n > 1, g ^ n = 1)  (Rel : List (R × R))  (to_g : R → G)  (h_surj : Function.Surjective to_g)  (h_pres : List.Pairwise (λ x1 x2, to_g x1 = to_g x2 → x1 = x2) Rel) :  Card G < ⊤ ",
      "(F : type*) [Fintype F] [Fin_Group F]  (G : type*) [Fintype G] [Group G]  (S : F → G) [_Group_hom S]  (h : ∃ F : F, F ≠ 1) :  Fintype G ",
      "(G : type*) [Fintype G] [Group G] (hG : ∃ g : G, ∃ n : ℕ, n ≠ 0 ∧ g ^ n = 1) :  Fintype.Card G < ⊤ "
    ],
    "answer": "{G : Type _} [Groupₓ G] : Groupₓ.Fg G → Finite G "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "torsion_in_fg_group_implies_finite",
      "main_prompt": "A finitely-presented group containing a torsion element is finite.",
      "prompt": "Natural language version: \"Finite groups are torsion groups.\" Translate the natural language version to a Lean mathlib version:\n theorem {G : Type u_1} [group G] [fintype G] :\nmonoid.is_torsion G := \n\nNatural language version: \"Subgroups of torsion groups are torsion groups.\" Translate the natural language version to a Lean mathlib version:\n theorem {G : Type u_1} [group G] (tG : monoid.is_torsion G) (H : subgroup G) :\nmonoid.is_torsion ↥H := \n\nNatural language version: \"Finite additive groups are additive torsion groups.\" Translate the natural language version to a Lean mathlib version:\n theorem {G : Type u_1} [add_group G] [fintype G] :\nadd_monoid.is_torsion G := \n\nNatural language version: \"A nontrivial torsion group is not torsion-free.\" Translate the natural language version to a Lean mathlib version:\n theorem {G : Type u_1} [group G] [hN : nontrivial G] :\nmonoid.is_torsion G → ¬monoid.is_torsion_free G := \n\nNatural language version: \"A finitely-presented group containing a torsion element is finite.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.7566978335380554,
          "doc_string": "Finite groups are torsion groups.",
          "statement": "theorem is_torsion_of_fintype {G : Type u_1} [group G] [fintype G] : monoid.is_torsion G"
        },
        {
          "sim_score": 0.6571311950683594,
          "doc_string": "Subgroups of torsion groups are torsion groups.",
          "statement": "theorem is_torsion.subgroup {G : Type u_1} [group G] (tG : monoid.is_torsion G) (H : subgroup G) : monoid.is_torsion ↥H"
        },
        {
          "sim_score": 0.6486772298812866,
          "doc_string": "Finite additive groups are additive torsion groups.",
          "statement": "theorem is_add_torsion_of_fintype {G : Type u_1} [add_group G] [fintype G] : add_monoid.is_torsion G"
        },
        {
          "sim_score": 0.6356827020645142,
          "doc_string": "A nontrivial torsion group is not torsion-free.",
          "statement": "theorem is_torsion.not_torsion_free {G : Type u_1} [group G] [hN : nontrivial G] : monoid.is_torsion G → ¬monoid.is_torsion_free G"
        }
      ],
      "codex_time": 5.733185497985687,
      "search_time": 1.4627392099937424,
      "use_theorem_name": false
    },
    "outputs": [
      "{G : type u_1} [Group G] [Fintype G] {h : type u_1} [Group h] [Fintype h]   (F : Group_hom G h) (h : Fintype._Fin_gen G) (hT : ∃ x : G, ∃ n : ℕ, x^n = 1) : Fintype G ",
      "{G : type u_1} [Group G] [_fp G] : ∃ (g : G) [hg : Monoid.torsion_elem G g], Fintype G ",
      "{G : type u_1} [Group G] : Group._F.P G → ∃ (g : G) (h : Monoid._torsion g), Fintype G ",
      "{G : type u_1} [Group G] [Fintype G] (h : Subgroup G) [Fin._fp h] : ∃ g, h.torsion g ",
      "{G : type u_1} [Group G] [h : Fintype G] (h1 : finitely_presented G) (h : ∃ A : G, A ≠ 1) : Fintype G "
    ],
    "answer": "{G : Type _} [Groupₓ G] : Groupₓ.Fg G → Finite G "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "torsion_in_fg_group_implies_finite",
      "main_prompt": "A finitely-presented group containing a torsion element is finite.",
      "prompt": "Natural language version: \"A finitely-presented group containing a torsion element is finite.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 13.834488082997268,
      "use_theorem_name": false
    },
    "outputs": [
      "Finite_presented_Group_of_torsion__Finite_natlang (G : type*) [Group G] [_finitely_presented G] (h : ∃ g : G, g ≠ 1) :   ¬ _Infinite G ",
      "has_torsion.Finite_Group {G : type} [Group G] (hG : finitely_presented_Group G) (htor :  ∃ A : G, A ≠ 1 ∧ A * A = 1):   Finite_Group G.  lemma htor.Left_coset_Eq {G : type} [Group G] (hG : finitely_presented_Group G) (htor :  ∃ A : G, A ≠ 1 ∧ A * A = 1) (h : set G) (g : G):   (∃ B ∈ h, B * A = g) ↔ g",
      "finitely_presented_Group.torsion_element__Finite (G : type*) [Group G] [Fintype G] [fgp G] : Group_hom.torsion G → Fintype G  theorem Fintype.Finite_Fintype [Fintype α] : Fintype α → Fintype α ",
      "oops : ∃ F : ℕ → ℤ, F (1+1) ≠ 0 --> Finset.Fintype {g : ℕ → ℤ // ∃ F : ℕ → ℤ, F (1+1) ≠ 0} ",
      "finitely_presented_Group_with_torsion_element_Finite (G : type*) [Group G] [Fintype G] [Fintype G] "
    ],
    "answer": "{G : Type _} [Groupₓ G] : Groupₓ.Fg G → Finite G "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "compl_union",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"The complement of the union of two sets is the intersection of their complements.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "The complement of the union of two sets is the intersection of their complements.",
      "codex_time": 5.520602020988008,
      "use_theorem_name": false
    },
    "outputs": [
      "(A B : set ℝ) :  (A ∪ B)ᶜ = Aᶜ ∩ Bᶜ ",
      "(x : type*) (A B : set x) :  (A ∪ B)ᶜ = Aᶜ ∩ Bᶜ ",
      "(m A B : set m) :  (set.IsCompl $ A ∪ B) = (set.IsCompl A) ∩ (set.IsCompl B) ",
      "(x : type*) (A B : set x) :  -(A ∪ B) = -A ∩ -B ",
      "(x : type*) (A B : set x) : (set.IsCompl_union_IsCompl A B) = set.IsCompl_Inter (set.IsCompl A) (set.IsCompl B) "
    ],
    "answer": "{α : Type _} (S T : Set α) : (S ∪ T).compl = S.compl ∩ T.compl "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "compl_union",
      "main_prompt": "The complement of the union of two sets is the intersection of their complements.",
      "prompt": "Natural language version: \"The complement of a set has the same frontier as the original set.\" Translate the natural language version to a Lean mathlib version:\n theorem {α : Type u} [topological_space α] (s : set α) :\nfrontier sᶜ = frontier s := \n\nNatural language version: \"The union of two sets is bounded above if and only if each of the sets is.\" Translate the natural language version to a Lean mathlib version:\n theorem {γ : Type w} [semilattice_inf γ] {s t : set γ} :\nbdd_below (s ∪ t) ↔ bdd_below s ∧ bdd_below t := \n\nNatural language version: \"The union of two sets is bounded above if and only if each of the sets is.\" Translate the natural language version to a Lean mathlib version:\n theorem {γ : Type w} [semilattice_sup γ] {s t : set γ} :\nbdd_above (s ∪ t) ↔ bdd_above s ∧ bdd_above t := \n\nNatural language version: \" The cardinality of a union is at most the sum of the cardinalities of the two sets.\" Translate the natural language version to a Lean mathlib version:\n theorem {α : Type u} (S T : set α) :\ncardinal.mk ↥(S ∪ T) ≤ cardinal.mk ↥S + cardinal.mk ↥T := \n\nNatural language version: \"The complement of the union of two sets is the intersection of their complements.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.6778950691223145,
          "doc_string": "The complement of a set has the same frontier as the original set.",
          "statement": "theorem frontier_compl {α : Type u} [topological_space α] (s : set α) : frontier sᶜ = frontier s"
        },
        {
          "sim_score": 0.6120935678482056,
          "doc_string": "The union of two sets is bounded above if and only if each of the sets is.",
          "statement": "theorem bdd_below_union {γ : Type w} [semilattice_inf γ] {s t : set γ} : bdd_below (s ∪ t) ↔ bdd_below s ∧ bdd_below t"
        },
        {
          "sim_score": 0.6120935678482056,
          "doc_string": "The union of two sets is bounded above if and only if each of the sets is.",
          "statement": "theorem bdd_above_union {γ : Type w} [semilattice_sup γ] {s t : set γ} : bdd_above (s ∪ t) ↔ bdd_above s ∧ bdd_above t"
        },
        {
          "sim_score": 0.6097555160522461,
          "doc_string": " The cardinality of a union is at most the sum of the cardinalities of the two sets.",
          "statement": "theorem cardinal.mk_union_le {α : Type u} (S T : set α) : cardinal.mk ↥(S ∪ T) ≤ cardinal.mk ↥S + cardinal.mk ↥T"
        }
      ],
      "codex_time": 4.9173353480000515,
      "search_time": 1.4480129570001736,
      "use_theorem_name": false
    },
    "outputs": [
      "{α : type u} {S t : set α} : Sᶜ ∩ tᶜ = (S ∪ t)ᶜ ",
      "{α : type u} (S t : set α) : Sᶜ ∪ tᶜ = (S ∩ t)ᶜ ",
      "{α : type u} (S t : set α) : ((S ∪ t)ᶜ : set α) = Sᶜ ∩ tᶜ ",
      "{α : type u} (S t : set α) : (S ∪ t)ᶜ = Sᶜ ∩ tᶜ ",
      "{α : type u} (U v : set α) : (- (U ∪ v)) = (- U) ∩ (- v) "
    ],
    "answer": "{α : Type _} (S T : Set α) : (S ∪ T).compl = S.compl ∩ T.compl "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "compl_union",
      "main_prompt": "The complement of the union of two sets is the intersection of their complements.",
      "prompt": "Natural language version: \"The complement of the union of two sets is the intersection of their complements.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 6.717659387009917,
      "use_theorem_name": false
    },
    "outputs": [
      "set.IsCompl_union_IsCompl_Eq_Inter_IsCompl {x : type*} [DecidableEq x] (A B : set x) :   -(A ∪ B) = -A ∩ -B ",
      "set.IsCompl_union_IsCompl_Inter (A B : set x) : set.IsCompl (A ∪ B) = (set.IsCompl A) ∩ (set.IsCompl B) ",
      "set . complement_union_Inter_complement :  ... ",
      "De_Morgan_law_IsCompl_union (n : ℕ) (m_1 m_2 : Finset ℕ) :    IsCompl_union n m_1 m_2 = IsCompl n (Inter m_1 m_2) ",
      "IsCompl_union (A B : set x) : -(A ∪ B) = -A ∩ -B "
    ],
    "answer": "{α : Type _} (S T : Set α) : (S ∪ T).compl = S.compl ∩ T.compl "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "flt_3",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"The sum of the cubes of two positive integers is never equal to the cube of a third integer.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "The sum of the cubes of two positive integers is never equal to the cube of a third integer.",
      "codex_time": 6.254193135973765,
      "use_theorem_name": false
    },
    "outputs": [
      "(A C : ℕ) (B : ℕ) (h_ac : A^3 + C^3 = B^3 ): False ",
      "(m n P : ℕ) (h1 : (0 : ℕ) < m) (h2 : 0 < n)  (h3 : 0 < P) : ∃ x y z : ℕ, m^3 + n^3 = x^3 + y^3 + z^3 ",
      "(x y z : ℕ) (hx_Pos : 0 < x) (hy_Pos : 0 < y) (hz_Pos : 0 < z) :  (x*x*x) + (y*y*y) ≠ z*z*z ",
      "(m n P: ℕ) : P^3 ≠ (m^3) + (n^3) ",
      "(x y z : ℕ)  (hx : 0 < x) (hy : 0 < y) (hz : 0 < z) (hxz : x^3 + y^3 ≠ z^3) :  sorry "
    ],
    "answer": ": ∀ a b c : ℕ, a > 0 → b > 0 → ¬(a^3 + b^3 = c^3) "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "flt_3",
      "main_prompt": "The sum of the cubes of two positive integers is never equal to the cube of a third integer.",
      "prompt": "Natural language version: \"The zeroth Pythagorean triple is all zeros.\" Translate the natural language version to a Lean mathlib version:\n theorem  :\npythagorean_triple 0 0 0 := \n\nNatural language version: \"The sum of two squares is zero iff both elements are zero.\" Translate the natural language version to a Lean mathlib version:\n theorem {α : Type u} [linear_ordered_ring α] {x y : α} :\nx * x + y * y = 0 ↔ x = 0 ∧ y = 0 := \n\nNatural language version: \" **Fermat's theorem on the sum of two squares**. Every prime congruent to 1 mod 4 is the sum of two squares. Also known as **Fermat's Christmas theorem**.\" Translate the natural language version to a Lean mathlib version:\n theorem {p : ℕ} [fact (nat.prime p)] (hp : p % 4 = 1) :\n∃ (a b : ℕ), a ^ 2 + b ^ 2 = p := \n\nNatural language version: \" Pythagorean triples are interchangable, i.e `x * x + y * y = y * y + x * x = z * z`. This comes from additive commutativity.\" Translate the natural language version to a Lean mathlib version:\n theorem {x y z : ℤ} :\npythagorean_triple x y z ↔ pythagorean_triple y x z := \n\nNatural language version: \"The sum of the cubes of two positive integers is never equal to the cube of a third integer.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.5193248391151428,
          "doc_string": "The zeroth Pythagorean triple is all zeros.",
          "statement": "theorem pythagorean_triple.zero  : pythagorean_triple 0 0 0"
        },
        {
          "sim_score": 0.4774671792984009,
          "doc_string": "The sum of two squares is zero iff both elements are zero.",
          "statement": "theorem mul_self_add_mul_self_eq_zero {α : Type u} [linear_ordered_ring α] {x y : α} : x * x + y * y = 0 ↔ x = 0 ∧ y = 0"
        },
        {
          "sim_score": 0.4648144245147705,
          "doc_string": " **Fermat's theorem on the sum of two squares**. Every prime congruent to 1 mod 4 is the sum of two squares. Also known as **Fermat's Christmas theorem**.",
          "statement": "theorem nat.prime.sq_add_sq {p : ℕ} [fact (nat.prime p)] (hp : p % 4 = 1) : ∃ (a b : ℕ), a ^ 2 + b ^ 2 = p"
        },
        {
          "sim_score": 0.4421241879463196,
          "doc_string": " Pythagorean triples are interchangable, i.e `x * x + y * y = y * y + x * x = z * z`. This comes from additive commutativity.",
          "statement": "theorem pythagorean_triple_comm {x y z : ℤ} : pythagorean_triple x y z ↔ pythagorean_triple y x z"
        }
      ],
      "codex_time": 4.896273948979797,
      "search_time": 1.502638221019879,
      "use_theorem_name": false
    },
    "outputs": [
      "{x y z : ℤ} (hxz : 0 < x + y) (hyz : 0 < y + z) (hxz : 0 < x + z) : (x ^ 3 + y ^ 3 = z ^ 3) → False ",
      "{x y z : ℕ} (hx : x > 0) (hy : y > 0) (hz : z > 0) : x^3 + y^3 ≠ z^3 ",
      "(hx : x > 0) (hy : y > 0) {z : ℕ} : x ^ 3 + y ^ 3 ≠ z ^ 3 ",
      "{x y z : ℤ} [Decidable_Linear_ordered_CommRing α] (h : x ^ 3 + y ^ 3 ≠ z ^ 3) : 0 < x ∧ 0 < y ",
      "{x y z : ℤ} (hx : x > 0) (hy : y > 0) (hz : z > 0) : x ^ 3 + y ^ 3 ≠ z ^ 3 "
    ],
    "answer": ": ∀ a b c : ℕ, a > 0 → b > 0 → ¬(a^3 + b^3 = c^3) "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "flt_3",
      "main_prompt": "The sum of the cubes of two positive integers is never equal to the cube of a third integer.",
      "prompt": "Natural language version: \"The sum of the cubes of two positive integers is never equal to the cube of a third integer.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 5.368797476985492,
      "use_theorem_name": false
    },
    "outputs": [
      "not_equal_Sum_of_cubes (A B C : ℕ) (h : A^3 + B^3 = C^3 ) : False ",
      "Sum_of_cubes_of_two_Pos : ∀ m n k : ℕ, m^3 + n^3 ≠ k^3 ",
      "Sum_of_three_cubes : ∀ m n k : ℕ , (m ^ 3 + n ^ 3) /= (k ^ 3) ",
      "cube_of_two_plus_cube_of_two__not_cube_of_third :   ∀ x y z: ℕ, (x * x * x + y * y * y) ≠ z * z * z ",
      "naturals_Sum_cube_neq_cube (B C : Nat) :   ∑ i in Range 2, B^3 + C^3 ≠ (i-1)^3 "
    ],
    "answer": ": ∀ a b c : ℕ, a > 0 → b > 0 → ¬(a^3 + b^3 = c^3) "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "elems_order_two_implies_commutative",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"If every element of a group `G` has order two, then every pair of elements of `G` commutes.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "If every element of a group `G` has order two, then every pair of elements of `G` commutes.",
      "codex_time": 5.72358208798687,
      "use_theorem_name": false
    },
    "outputs": [
      "(G : type*) [Group G] (h2 : ∀ g, (g : G)^2 = 1):  ∀ x y : G, x * y = y * x ",
      "(G : type*) [Group G] (h : ∀ x : G, x * x = 1) :  ∀ x y : G, x * y = y * x ",
      "(G : type*) [Group G] (hG : ∀ g : G, g * g = 1) :  ∀ x y : G, x * y = y * x ",
      "(G : type*) [Group G]  (hG : ∀ x : G, x ^ 2 = 1) : comm_Group G ",
      "(G : type*) [Group G]  (hG : ∀ g : G, g^2 = 1) :  ∀ x y : G, x * y = y * x "
    ],
    "answer": "{G: Type _}[Group G] : (∀ x y : G, x * x = 1) → (∀ x y : G, Commute x y) "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "elems_order_two_implies_commutative",
      "main_prompt": "If every element of a group `G` has order two, then every pair of elements of `G` commutes.",
      "prompt": "Natural language version: \"If `a` commutes with `b`, then `b` commutes with `a`.\" Translate the natural language version to a Lean mathlib version:\n theorem {S : Type u_1} [has_mul S] {a b : S} (h : commute a b) :\ncommute b a := \n\nNatural language version: \"If `a` commutes with `b`, then `b` commutes with `a`.\" Translate the natural language version to a Lean mathlib version:\n theorem {S : Type u_1} [has_add S] {a b : S} (h : add_commute a b) :\nadd_commute b a := \n\nNatural language version: \"Commuting elements of finite order are closed under multiplication.\" Translate the natural language version to a Lean mathlib version:\n theorem {G : Type u} {y : G} [monoid G] {x : G} (h : commute x y) (hx : is_of_fin_order x) (hy : is_of_fin_order y) :\nis_of_fin_order (x * y) := \n\nNatural language version: \"If `a` commutes with both `b` and `c`, then it commutes with their product.\" Translate the natural language version to a Lean mathlib version:\n theorem {S : Type u_1} [semigroup S] {a b c : S} (hab : commute a b) (hac : commute a c) :\ncommute a (b * c) := \n\nNatural language version: \"If every element of a group `G` has order two, then every pair of elements of `G` commutes.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.6088767051696777,
          "doc_string": "If `a` commutes with `b`, then `b` commutes with `a`.",
          "statement": "theorem commute.symm {S : Type u_1} [has_mul S] {a b : S} (h : commute a b) : commute b a"
        },
        {
          "sim_score": 0.6088767051696777,
          "doc_string": "If `a` commutes with `b`, then `b` commutes with `a`.",
          "statement": "theorem add_commute.symm {S : Type u_1} [has_add S] {a b : S} (h : add_commute a b) : add_commute b a"
        },
        {
          "sim_score": 0.5862270593643188,
          "doc_string": "Commuting elements of finite order are closed under multiplication.",
          "statement": "theorem commute.is_of_fin_order_mul {G : Type u} {y : G} [monoid G] {x : G} (h : commute x y) (hx : is_of_fin_order x) (hy : is_of_fin_order y) : is_of_fin_order (x * y)"
        },
        {
          "sim_score": 0.5844683647155762,
          "doc_string": "If `a` commutes with both `b` and `c`, then it commutes with their product.",
          "statement": "theorem commute.mul_right {S : Type u_1} [semigroup S] {a b c : S} (hab : commute a b) (hac : commute a c) : commute a (b * c)"
        }
      ],
      "codex_time": 9.017476831009844,
      "search_time": 1.6500981619756203,
      "use_theorem_name": false
    },
    "outputs": [
      "{G : type u} [Group G] (h : ∀ x : G, Finite.Mk 0 = x.order) : ∀ x y : G, Commute x y ",
      "{G : type u} (h : ∀ (x : G), _of_Fin_order (x : G) ∧ 2 ≤ Nat.Find x) : ∀ {x y : G}, Commute x y ",
      "{G : type u} [Group G] (hG : _of_Fin_order_two G) {x y : G} : Commute x y ",
      "{G : type u} {x y : G} [Monoid G] (hx : _of_Fin_order x) (hy : _of_Fin_order y) : ∀ (h : order_of x = 2) (h' : order_of y = 2), Commute x y ",
      "{G : type u_1} [Group G] (h : ∀ x : G, _of_order_two x) : ∀ x y : G, Commute x y "
    ],
    "answer": "{G: Type _}[Group G] : (∀ x y : G, x * x = 1) → (∀ x y : G, Commute x y) "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "elems_order_two_implies_commutative",
      "main_prompt": "If every element of a group `G` has order two, then every pair of elements of `G` commutes.",
      "prompt": "Natural language version: \"If every element of a group `G` has order two, then every pair of elements of `G` commutes.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 7.878516655997373,
      "use_theorem_name": false
    },
    "outputs": [
      "order_two_then_commutes {G : type} [Group G]  (h : ∀ x : G, x*x = 1) : ∀ (A B : G), A*B = B*A ",
      "Odd_Group.commutes_if_each_element_of_order_two (G : type*) [Group G] [Odd_Group G] :   ∀ g : G, order g = 2 → ∀ A B : G, A * B = B * A ",
      "ex5_5 {G : type} [Group G] (h : ∀ x : G, x^2 = 1) : comm_Group G ",
      "two_elts_Commute (G : type) [Group G] (h : ∀ g : G, has_order g 2) :  ∀ A B ∈ G, A * B = B * A ",
      "foo (g : G) : g * g = 1 "
    ],
    "answer": "{G: Type _}[Group G] : (∀ x y : G, x * x = 1) → (∀ x y : G, Commute x y) "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "prime_eq_two_or_odd",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"Every prime number is either `2` or odd.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "Every prime number is either `2` or odd.",
      "codex_time": 3.5695287270064,
      "use_theorem_name": false
    },
    "outputs": [
      "(P : ℕ) (hp  : Prime P) :  P = 2 ∨ ∃ n : ℕ, P = 2 * n + 1 ",
      "(P : ℕ) (hp : Prime P) :  P = 2 ∨ P % 2 = 1 ",
      "(P : ℕ) (hp : Prime P) : P = 2 ∨ Even P ",
      "(P : ℕ) (h : Prime P) : P = 2 ∨ P % 2 = 1 ",
      "(P : ℕ) (hp : Nat.Prime P) :  P = 2 ∨ ∃ n : ℕ, n > 0 ∧   P = 2*n + 1 "
    ],
    "answer": "{n: Nat} : Prime n → n = 2 ∨ Odd n "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "prime_eq_two_or_odd",
      "main_prompt": "Every prime number is either `2` or odd.",
      "prompt": "Natural language version: \"A prime `p` satisfies `p % 2 = 1` if and only if `p ≠ 2`.\" Translate the natural language version to a Lean mathlib version:\n theorem {p : ℕ} [fact (nat.prime p)] :\np % 2 = 1 ↔ p ≠ 2 := \n\nNatural language version: \"A natural number is odd iff it has residue `1` or `3` mod `4`\" Translate the natural language version to a Lean mathlib version:\n theorem {n : ℕ} :\nn % 2 = 1 ↔ n % 4 = 1 ∨ n % 4 = 3 := \n\nNatural language version: \"The only numbers with empty prime factorization are `0` and `1`\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) :\nn.factorization = 0 ↔ n = 0 ∨ n = 1 := \n\nNatural language version: \"The only prime factor of prime `p` is `p` itself, with multiplicity `1`\" Translate the natural language version to a Lean mathlib version:\n theorem {p : ℕ} (hp : nat.prime p) :\np.factorization = finsupp.single p 1 := \n\nNatural language version: \"Every prime number is either `2` or odd.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.7289595007896423,
          "doc_string": "A prime `p` satisfies `p % 2 = 1` if and only if `p ≠ 2`.",
          "statement": "theorem nat.prime.mod_two_eq_one_iff_ne_two {p : ℕ} [fact (nat.prime p)] : p % 2 = 1 ↔ p ≠ 2"
        },
        {
          "sim_score": 0.5622097253799438,
          "doc_string": "A natural number is odd iff it has residue `1` or `3` mod `4`",
          "statement": "theorem nat.odd_mod_four_iff {n : ℕ} : n % 2 = 1 ↔ n % 4 = 1 ∨ n % 4 = 3"
        },
        {
          "sim_score": 0.5335504412651062,
          "doc_string": "The only numbers with empty prime factorization are `0` and `1`",
          "statement": "theorem nat.factorization_eq_zero_iff (n : ℕ) : n.factorization = 0 ↔ n = 0 ∨ n = 1"
        },
        {
          "sim_score": 0.5028786063194275,
          "doc_string": "The only prime factor of prime `p` is `p` itself, with multiplicity `1`",
          "statement": "theorem nat.prime.factorization {p : ℕ} (hp : nat.prime p) : p.factorization = finsupp.single p 1"
        }
      ],
      "codex_time": 4.6803766950033605,
      "search_time": 1.46482077499968,
      "use_theorem_name": false
    },
    "outputs": [
      "{P : ℕ} (hp : Nat.Prime P) :  P = 2 ∨ P % 2 = 1 ",
      "(P : ℕ) :  Nat.Prime P ↔ P = 2 ∨ P % 2 = 1 ",
      "{P : ℕ} (hp : Nat.Prime P) : P = 2 ∨ P % 2 = 1 ",
      "(n : ℕ) (hp : Nat.Prime n) : n = 2 ∨ n % 2 = 1 ",
      "{P : ℕ} (hp : Nat.Prime P) : P = 2 ∨ P % 2 = 1 "
    ],
    "answer": "{n: Nat} : Prime n → n = 2 ∨ Odd n "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "prime_eq_two_or_odd",
      "main_prompt": "Every prime number is either `2` or odd.",
      "prompt": "Natural language version: \"Every prime number is either `2` or odd.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 11.800225621991558,
      "use_theorem_name": false
    },
    "outputs": [
      "Prime_two_or_Odd : ∀x : ℕ, Prime x → x = 2 ∨ (∃P, x = 2*P + 1 ∧ Prime P) ",
      "natural_number.Prime_Odd_or_two : ∀ P : ℕ, Prime P → P = 2 ∨ P % 2 ≠ 0 ",
      "every_Prime__two_or_Odd : ∀ (n : ℕ), Prime n → n = 2 ∨ n % 2 = 1  apply Nat.Prime.not_Dvd_two; assumption,-- 3.2-3   Have you considered all cases? **NO  Does the statement follow directly from One of the facts in examples.lean? **NO  Does it need to Zero? **NO  Does it need to be about Pos_Num? **NO  Does it need to be about integers? **NO  Does it need to mention Even or Odd? **YES  Does it need to mention mod? **YES  Does it need to mention Dvd? **YES ",
      "Primes_are_2_n_Odd (n : ℕ) (h : Prime n) : n = 2 ∨ ∃ k, n = k * 2 + 1 ",
      "Two_or_Odd ( x : ℕ ) : ( Prime x → ( x = 2 ∨ Odd x )) "
    ],
    "answer": "{n: Nat} : Prime n → n = 2 ∨ Odd n "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "poly_odd_degree_has_zero",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"Every odd degree polynomial over `ℝ` has a zero\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "Every odd degree polynomial over `ℝ` has a zero",
      "codex_time": 8.610929604008561,
      "use_theorem_name": false
    },
    "outputs": [
      "ℝ : ∀ (n : ℕ) (P : Polynomial ℝ), n % 2 = 1 → Polynomial.deg P < n → ∃ C : ℝ, P.Eval C = 0 ",
      "(n : ℕ) (h : 0 < n % 2) (F : Polynomial ℝ) :  ∃ x : ℝ, Polynomial.Eval F x = 0 ",
      "(n : ℕ) (h : n % 2 = 1) (P : Polynomial ℝ)  (hp : P.Nat_degree = n): ∥-∥^∥  Natural Language version: \"Let x be A totally ordered set. Prove that if x ∈ x, then [x, x]  an Interval containing x. If, in addition x  Dedekind complete, prove that this Interval has A supremum in x.\" Translate the natural Language version to A Lean mathlib version:  unresolved  Natural Language version: \"Let x be A Real number, and y an Irrational number. Prove that the Real numbers x + y and x",
      "(A : ℝ) (n : ℕ) (h : n % 2 = 1) :  ∃ x : ℝ, A * x^n + 1 = 0 ",
      "∀ A : ℝ, ∃ x : ℝ, Polynomial.C A * 'x^3 + Polynomial.C 0 * 'x^2 + Polynomial.C 0 * 'x + Polynomial.C 1 = 0 "
    ],
    "answer": "{α : Type _} [Field α] (p : Polynomial α) : Odd (p.degree) → ∃ x, p.IsRoot x "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "poly_odd_degree_has_zero",
      "main_prompt": "Every odd degree polynomial over `ℝ` has a zero",
      "prompt": "Natural language version: \"The degree of a product of polynomials is at most the sum of the degrees, where the degree of the zero polynomial is ⊥.\" Translate the natural language version to a Lean mathlib version:\n theorem {R : Type u} [comm_semiring R] (t : multiset (polynomial R)) :\nt.prod.degree ≤ (multiset.map polynomial.degree t).sum := \n\nNatural language version: \"The degree of a product of polynomials is equal to the sum of the degrees, where the degree of the zero polynomial is ⊥.\" Translate the natural language version to a Lean mathlib version:\n theorem {R : Type u} [comm_semiring R] [no_zero_divisors R] (t : multiset (polynomial R)) [nontrivial R] :\nt.prod.degree = (multiset.map (λ (f : polynomial R), f.degree) t).sum := \n\nNatural language version: \"The degree of a product of polynomials is equal to the sum of the degrees, where the degree of the zero polynomial is ⊥.\" Translate the natural language version to a Lean mathlib version:\n theorem {R : Type u} {ι : Type w} (s : finset ι) [comm_semiring R] [no_zero_divisors R] (f : ι → polynomial R) [nontrivial R] :\n(s.prod (λ (i : ι), f i)).degree = s.sum (λ (i : ι), (f i).degree) := \n\nNatural language version: \"The degree of a minimal polynomial, as a natural number, is positive.\" Translate the natural language version to a Lean mathlib version:\n theorem {A : Type u_1} {B : Type u_2} [comm_ring A] [ring B] [algebra A B] [nontrivial B] {x : B} (hx : is_integral A x) :\n0 < (minpoly A x).nat_degree := \n\nNatural language version: \"Every odd degree polynomial over `ℝ` has a zero\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.50849449634552,
          "doc_string": "The degree of a product of polynomials is at most the sum of the degrees, where the degree of the zero polynomial is ⊥.",
          "statement": "theorem polynomial.degree_multiset_prod_le {R : Type u} [comm_semiring R] (t : multiset (polynomial R)) : t.prod.degree ≤ (multiset.map polynomial.degree t).sum"
        },
        {
          "sim_score": 0.48135414719581604,
          "doc_string": "The degree of a product of polynomials is equal to the sum of the degrees, where the degree of the zero polynomial is ⊥.",
          "statement": "theorem polynomial.degree_multiset_prod {R : Type u} [comm_semiring R] [no_zero_divisors R] (t : multiset (polynomial R)) [nontrivial R] : t.prod.degree = (multiset.map (λ (f : polynomial R), f.degree) t).sum"
        },
        {
          "sim_score": 0.48135414719581604,
          "doc_string": "The degree of a product of polynomials is equal to the sum of the degrees, where the degree of the zero polynomial is ⊥.",
          "statement": "theorem polynomial.degree_prod {R : Type u} {ι : Type w} (s : finset ι) [comm_semiring R] [no_zero_divisors R] (f : ι → polynomial R) [nontrivial R] : (s.prod (λ (i : ι), f i)).degree = s.sum (λ (i : ι), (f i).degree)"
        },
        {
          "sim_score": 0.4661085605621338,
          "doc_string": "The degree of a minimal polynomial, as a natural number, is positive.",
          "statement": "theorem minpoly.nat_degree_pos {A : Type u_1} {B : Type u_2} [comm_ring A] [ring B] [algebra A B] [nontrivial B] {x : B} (hx : is_integral A x) : 0 < (minpoly A x).nat_degree"
        }
      ],
      "codex_time": 4.9523714979877695,
      "search_time": 1.528045929997461,
      "use_theorem_name": false
    },
    "outputs": [
      "(P : Polynomial ℝ) (h : P.Nat_degree % 2 = 1) : ∃ x : ℝ, P.Eval x = 0 ",
      "{R : type u} [CommRing R] [Linear_ordered_Field R] (F : Polynomial R) (hF : F.Nat_degree % 2 = 1) : ∃ (A : R), Polynomial.Eval F A = 0 ",
      "{R : type u} [discrete_Field R] (F : Polynomial R) : F.Nat_degree % 2 = 1 → ∃ A : R, F.Eval A = 0 ",
      "{α : type} [Linear_ordered_Field α] [Nontrivial α] (P : Polynomial α) (h : 2 ∣ P.Nat_degree) : ∃ x : α, P.Eval x = 0 ",
      "{α : type u} [discrete_Linear_ordered_Field α] (P : Polynomial α) (hp : P.Nat_degree = 1 + 2 * P.Nat_degree.div2) (h : P ≠ 0) : ∃ C : α, P.Eval₂ C = 0 "
    ],
    "answer": "{α : Type _} [Field α] (p : Polynomial α) : Odd (p.degree) → ∃ x, p.IsRoot x "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "poly_odd_degree_has_zero",
      "main_prompt": "Every odd degree polynomial over `ℝ` has a zero",
      "prompt": "Natural language version: \"Every odd degree polynomial over `ℝ` has a zero\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 7.384289454988902,
      "use_theorem_name": false
    },
    "outputs": [
      "Polynomial_Odd_degree_has_Zero (P : Polynomial ℝ) (hp : P.degree % 2 = 1) :   ∃ z, P.Eval z = 0, End English.  /- Conventions: When leaving comments please use dashes to  overline the Word that you do not understand. -/  Open Scope R_scope. Open Scope Polynomial_scope.  /-  Why does the mean value theorem have A section explaining why the theorem  correct? You should make A guess as to why this theorem  True, and then look Up the Normal proof online.  -/  /- [L",
      ": ∀ P : Polynomial ℝ, P.degree % 2 = 1 -> ∃ x : ℝ , P x = 0 , this  the theorem > #### 4.1.6 #### 4.1.7 #### 4.1.8 #### 4.2.1  If `P`  True, `q`  True, and `r`  True, then: - `r` Implies `q`, and `q` Implies `P`, we can deduce `P` - `P` Implies `q`, and `q` Implies `P`, we can deduce `q` - `P` Implies `q`, `q",
      "exists_x_Odd_degree_Polynomial_Real_Eq_0 (P : Polynomial ℝ) (hp : ¬ P._monic) :    ∃ x, P.Eval x = 0 ",
      "every_Odd_Polynomial_has_A_Zero : ∀ { n : ℕ }, ( ∀ ( P : ℝ →ₗ [ ℝ ] n ), P . 1 = 0 )  We can substitute `42` for the second `ℝ` in the translation above:  theorem every_Odd_Polynomial_has_A_Zero { n } ( P : ℝ →ₗ [ 42 ] n ) : P . 1 = 0  Now we can Insert this back into the problem as A hint: example : every_Odd_Polynomial_has_A_Zero ( 42 : ℕ ) ",
      "Polynomial_root_Odd : (∀ (P : Polynomial ℝ), P.degree > 0 → P.degree % 2 = 1 → has_root P) "
    ],
    "answer": "{α : Type _} [Field α] (p : Polynomial α) : Odd (p.degree) → ∃ x, p.IsRoot x "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "product_conseq_odd",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"The product of two consequitive natural numbers is odd\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "The product of two consequitive natural numbers is odd",
      "codex_time": 7.7436661350075155,
      "use_theorem_name": false
    },
    "outputs": [
      "(n : ℕ) : n * (n + 1) % 2 = 1 ",
      "(n : ℕ) : n * Nat.Succ n % 2 = 1      Natural Language version: \"The Product of two consequitive natural numbers  Even\" Translate the natural Language version to A Lean mathlib version:  theorem (n : ℕ) : n * Nat.Succ n % 2 = 0      Natural Language version: \"If A * B * C * D = 1, then abcd = 1.\" Translate the natural Language version to A Lean mathlib version:  theorem (A B C D : ℂ) (habcd : A * B * C * D = 1) :  A * B^(C * D",
      "(n : ℕ) (h : n ≥ 2):  ∃ m : ℕ, ∃ F : Fin m, ∃ A : Fin n, F.1 = 2*A.1 ",
      "(n : ℕ) : ∃ m : ℕ, ∀ m' : ℕ, m' * (m' + 1) = m ∧ Odd m ",
      "(n : ℕ) : ∃ m : ℕ, ∀ r : ℕ, n = m*r → ¬ Even m × Even r "
    ],
    "answer": "(n: Nat): Odd <| n * (n + 1) "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "product_conseq_odd",
      "main_prompt": "The product of two consequitive natural numbers is odd",
      "prompt": "Natural language version: \" If `m` and `n` are natural numbers, then the natural number `m^n` is even if and only if `m` is even and `n` is positive.\" Translate the natural language version to a Lean mathlib version:\n theorem {m n : ℕ} :\neven (m ^ n) ↔ even m ∧ n ≠ 0 := \n\nNatural language version: \"A natural number is odd iff it has residue `1` or `3` mod `4`\" Translate the natural language version to a Lean mathlib version:\n theorem {n : ℕ} :\nn % 2 = 1 ↔ n % 4 = 1 ∨ n % 4 = 3 := \n\nNatural language version: \"Two natural numbers are equal if and only if the have the same multiples.\" Translate the natural language version to a Lean mathlib version:\n theorem {m n : ℕ} :\n(∀ (a : ℕ), m ∣ a ↔ n ∣ a) ↔ m = n := \n\nNatural language version: \"The product of the factors is the original number\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ+) :\nn.factor_multiset.prod = n := \n\nNatural language version: \"The product of two consequitive natural numbers is odd\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.5561787486076355,
          "doc_string": " If `m` and `n` are natural numbers, then the natural number `m^n` is even if and only if `m` is even and `n` is positive.",
          "statement": "theorem nat.even_pow {m n : ℕ} : even (m ^ n) ↔ even m ∧ n ≠ 0"
        },
        {
          "sim_score": 0.5415111780166626,
          "doc_string": "A natural number is odd iff it has residue `1` or `3` mod `4`",
          "statement": "theorem nat.odd_mod_four_iff {n : ℕ} : n % 2 = 1 ↔ n % 4 = 1 ∨ n % 4 = 3"
        },
        {
          "sim_score": 0.5249637365341187,
          "doc_string": "Two natural numbers are equal if and only if the have the same multiples.",
          "statement": "theorem nat.dvd_right_iff_eq {m n : ℕ} : (∀ (a : ℕ), m ∣ a ↔ n ∣ a) ↔ m = n"
        },
        {
          "sim_score": 0.5125280022621155,
          "doc_string": "The product of the factors is the original number",
          "statement": "theorem pnat.prod_factor_multiset (n : ℕ+) : n.factor_multiset.prod = n"
        }
      ],
      "codex_time": 5.241321459994651,
      "search_time": 1.482777747005457,
      "use_theorem_name": false
    },
    "outputs": [
      "{m : ℕ} : Even (m * (m + 1)) ",
      "(n : ℕ+) {A B : ℕ+} : (A*(A+1) = B*(B+1)) → (B % 2 = 1) ",
      "(n : ℕ+) : Odd ((n + 1) * n) ",
      "(n : ℕ+) : ∃ (A : ℕ), 2 * A + 1 = n.Gcd (2 * A) ",
      "{m n : ℕ} : n = m + 1 → n * m % 2 = 1 "
    ],
    "answer": "(n: Nat): Odd <| n * (n + 1) "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "product_conseq_odd",
      "main_prompt": "The product of two consequitive natural numbers is odd",
      "prompt": "Natural language version: \"The product of two consequitive natural numbers is odd\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 4.301859184983186,
      "use_theorem_name": false
    },
    "outputs": [
      "if_Add_conseq_term__Odd (A : ℕ) : A * (A + 1) % 2 = 1 ",
      "P : ∀ m ∈ ℕ , ∀ n ∈ ℕ , ∃ k ∈ ℕ, k = m * n ↔ k % 2 = 1 ",
      "ex2 : ∀ n : ℕ, ∃ k : ℕ, 2 * n + 2 = 2 * k ",
      "Odd_Product_of_consequtive_natural_numbers {A B : ℕ} (h0 : A = Succ B) : Odd (A*B) ",
      "exists_two_consecutive_Odd_numbers : let A "
    ],
    "answer": "(n: Nat): Odd <| n * (n + 1) "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "constant_is_differentiable",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"Every constant function `f x = c` from real numbers to real numbers is differentiable.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "Every constant function `f x = c` from real numbers to real numbers is differentiable.",
      "codex_time": 5.969116169027984,
      "use_theorem_name": false
    },
    "outputs": [
      "(F : ℝ → ℝ) (C : ℝ)  (F_Const : ∀ x, F x = C) :  Differentiable F ",
      "(C : ℝ) (F : ℝ → ℝ) (hF : ∀ x : ℝ, F x = C) :  Differentiable ℝ ℝ F ",
      "(F : ℝ → ℝ) (hF : Continuous F)  (hfc : ∀ x, F x = F.Const 0) : Differentiable F ",
      "(F : ℝ → ℝ) (C : ℝ) (hF : ∀ x : ℝ, (F x) = C) :  Differentiable F  ",
      "(C : ℝ) (F : ℝ → ℝ) (h : ∀ x : ℝ, F x = C) :  Differentiable F "
    ],
    "answer": "{f: ℝ → ℝ}: ∃ c: ℝ, (∀ x : ℝ, f x = c) → Differentiable ℝ f "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "constant_is_differentiable",
      "main_prompt": "Every constant function `f x = c` from real numbers to real numbers is differentiable.",
      "prompt": "Natural language version: \"If a function is `C^n` with `n ≥ 1`, then it is differentiable.\" Translate the natural language version to a Lean mathlib version:\n theorem {𝕜 : Type u_1} [nondiscrete_normed_field 𝕜] {E : Type u_2} [normed_group E] [normed_space 𝕜 E] {F : Type u_3} [normed_group F] [normed_space 𝕜 F] {f : E → F} {n : with_top ℕ} (h : cont_diff 𝕜 n f) (hn : 1 ≤ n) :\ndifferentiable 𝕜 f := \n\nNatural language version: \"If a function is `C^n` with `n ≥ 1` at a point, then it is differentiable there.\" Translate the natural language version to a Lean mathlib version:\n theorem {𝕜 : Type u_1} [nondiscrete_normed_field 𝕜] {E : Type u_2} [normed_group E] [normed_space 𝕜 E] {F : Type u_3} [normed_group F] [normed_space 𝕜 F] {f : E → F} {x : E} {n : with_top ℕ} (h : cont_diff_at 𝕜 n f x) (hn : 1 ≤ n) :\ndifferentiable_at 𝕜 f x := \n\nNatural language version: \" If a function is `C^n` within a set at a point, with `n ≥ 1`, then it is differentiable within this set at this point.\" Translate the natural language version to a Lean mathlib version:\n theorem {𝕜 : Type u_1} [nondiscrete_normed_field 𝕜] {E : Type u_2} [normed_group E] [normed_space 𝕜 E] {F : Type u_3} [normed_group F] [normed_space 𝕜 F] {s : set E} {f : E → F} {x : E} {n : with_top ℕ} (h : cont_diff_within_at 𝕜 n f s x) (hn : 1 ≤ n) :\ndifferentiable_within_at 𝕜 f (has_insert.insert x s) x := \n\nNatural language version: \"If a function is `C^n` on a set with `n ≥ 1`, then it is differentiable there.\" Translate the natural language version to a Lean mathlib version:\n theorem {𝕜 : Type u_1} [nondiscrete_normed_field 𝕜] {E : Type u_2} [normed_group E] [normed_space 𝕜 E] {F : Type u_3} [normed_group F] [normed_space 𝕜 F] {s : set E} {f : E → F} {n : with_top ℕ} (h : cont_diff_on 𝕜 n f s) (hn : 1 ≤ n) :\ndifferentiable_on 𝕜 f s := \n\nNatural language version: \"Every constant function `f x = c` from real numbers to real numbers is differentiable.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.6595531702041626,
          "doc_string": "If a function is `C^n` with `n ≥ 1`, then it is differentiable.",
          "statement": "theorem cont_diff.differentiable {𝕜 : Type u_1} [nondiscrete_normed_field 𝕜] {E : Type u_2} [normed_group E] [normed_space 𝕜 E] {F : Type u_3} [normed_group F] [normed_space 𝕜 F] {f : E → F} {n : with_top ℕ} (h : cont_diff 𝕜 n f) (hn : 1 ≤ n) : differentiable 𝕜 f"
        },
        {
          "sim_score": 0.6467167139053345,
          "doc_string": "If a function is `C^n` with `n ≥ 1` at a point, then it is differentiable there.",
          "statement": "theorem cont_diff_at.differentiable_at {𝕜 : Type u_1} [nondiscrete_normed_field 𝕜] {E : Type u_2} [normed_group E] [normed_space 𝕜 E] {F : Type u_3} [normed_group F] [normed_space 𝕜 F] {f : E → F} {x : E} {n : with_top ℕ} (h : cont_diff_at 𝕜 n f x) (hn : 1 ≤ n) : differentiable_at 𝕜 f x"
        },
        {
          "sim_score": 0.6451953649520874,
          "doc_string": " If a function is `C^n` within a set at a point, with `n ≥ 1`, then it is differentiable within this set at this point.",
          "statement": "theorem cont_diff_within_at.differentiable_within_at' {𝕜 : Type u_1} [nondiscrete_normed_field 𝕜] {E : Type u_2} [normed_group E] [normed_space 𝕜 E] {F : Type u_3} [normed_group F] [normed_space 𝕜 F] {s : set E} {f : E → F} {x : E} {n : with_top ℕ} (h : cont_diff_within_at 𝕜 n f s x) (hn : 1 ≤ n) : differentiable_within_at 𝕜 f (has_insert.insert x s) x"
        },
        {
          "sim_score": 0.6353325843811035,
          "doc_string": "If a function is `C^n` on a set with `n ≥ 1`, then it is differentiable there.",
          "statement": "theorem cont_diff_on.differentiable_on {𝕜 : Type u_1} [nondiscrete_normed_field 𝕜] {E : Type u_2} [normed_group E] [normed_space 𝕜 E] {F : Type u_3} [normed_group F] [normed_space 𝕜 F] {s : set E} {f : E → F} {n : with_top ℕ} (h : cont_diff_on 𝕜 n f s) (hn : 1 ≤ n) : differentiable_on 𝕜 f s"
        }
      ],
      "codex_time": 6.46006202098215,
      "search_time": 1.5521861550223548,
      "use_theorem_name": false
    },
    "outputs": [
      "{𝕜 : type u_1} [nondiscrete_NormedField 𝕜] {F : ℝ → ℝ} (h : Const_func F) : Differentiable 𝕜 F ",
      "Differentiable.Const {F : Real → Real} (h : ∀x, F x = F 0) : Differentiable F ",
      "{𝕜 : type u_1} [nondiscrete_NormedField 𝕜] {E : type u_2} [NormedGroup E] [NormedSpace 𝕜 E] {F : type u_3} [NormedGroup F] [NormedSpace 𝕜 F] {F : E → F} (C : F) : (∀ x : E, F x = C) → DifferentiableOn 𝕜 F (Univ : set E) ",
      "Differentiable_Const (C : ℝ) : Differentiable ℝ (λ x:ℝ, C) ",
      "{𝕜 : type u_1} [nondiscrete_NormedField 𝕜] {F : ℝ → ℝ} {C : ℝ} (h : constant F C) : DifferentiableOn 𝕜 F Univ "
    ],
    "answer": "{f: ℝ → ℝ}: ∃ c: ℝ, (∀ x : ℝ, f x = c) → Differentiable ℝ f "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "constant_is_differentiable",
      "main_prompt": "Every constant function `f x = c` from real numbers to real numbers is differentiable.",
      "prompt": "Natural language version: \"Every constant function `f x = c` from real numbers to real numbers is differentiable.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 6.447238699009176,
      "use_theorem_name": false
    },
    "outputs": [
      "Diff_Const_fun (F : ℝ → ℝ) (C : ℝ) (hF : ∀x : ℝ, F x = C) : Differentiable F ↔ Differentiable_at F C ",
      "Real_Differentiable_Const (F : ℝ → ℝ) [hF : Differentiable_at F A] (C : ℝ) :   F A = C → DifferentiableOn F (icc A (A+1)) ",
      "Diff_Const (F : ℝ → ℝ) (C : ℝ) (h : ∀ x, F x = C) : Differentiable F ",
      "dber : ∀ {F : ℝ → ℝ}, ∀ {C}, (∀ x : ℝ, F x = C) → Differentiable F ",
      "my_thm (x : R) : Differentiable_at (λ x, 0) x "
    ],
    "answer": "{f: ℝ → ℝ}: ∃ c: ℝ, (∀ x : ℝ, f x = c) → Differentiable ℝ f "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "index_two_subgroup",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"Every index 2 subgroup of a group is free\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "Every index 2 subgroup of a group is free",
      "codex_time": 4.75069759998587,
      "use_theorem_name": false
    },
    "outputs": [
      "(G : type*) [Group G] (S : set G) [_Subgroup S] (Hs : Fintype.Card S = 2) : _free S ",
      "_free_Group_two :  ∀ (G : type*) [Group G], Group._free_Group {S : G | order_of G ≠ 2} ",
      "(G : type*) [Group G] (S : set G) [h2 : _Subgroup S]  [hi_2 : (Index_aux G S h2) = 2] : _free S ",
      "(G : type*) [Group G] (h : set G) (hH : 2 ∣ Cardinal.Mk h) : ∃ x : set G, Fintype.Cardinal x = 2 ",
      "(G : type*) [Group G]  (h : Subgroup G) (h2 : h.1.2) : free_Group G "
    ],
    "answer": "{G : Type _} [Groupₓ G] (H : Subgroup G): H.index = 2 → Subgroup.Normal H "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "index_two_subgroup",
      "main_prompt": "Every index 2 subgroup of a group is free",
      "prompt": "Natural language version: \"Subgroups of torsion-free groups are torsion-free.\" Translate the natural language version to a Lean mathlib version:\n theorem {G : Type u_1} [group G] (tG : monoid.is_torsion_free G) (H : subgroup G) :\nmonoid.is_torsion_free ↥H := \n\nNatural language version: \"**Schreier's Lemma**: A finite index subgroup of a finitely generated  group is finitely generated.\" Translate the natural language version to a Lean mathlib version:\n theorem {G : Type u_1} [group G] {H : subgroup G} [hG : group.fg G] (hH : H.index ≠ 0) :\ngroup.fg ↥H := \n\nNatural language version: \"Direct products of torsion free groups are torsion free.\" Translate the natural language version to a Lean mathlib version:\n theorem {η : Type u_1} {Gs : η → Type u_2} [Π (i : η), group (Gs i)] (tfGs : ∀ (i : η), monoid.is_torsion_free (Gs i)) :\nmonoid.is_torsion_free (Π (i : η), Gs i) := \n\nNatural language version: \"Quotienting a group by its torsion subgroup yields a torsion free group.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type u_1) [comm_group G] :\nmonoid.is_torsion_free (G ⧸ torsion G) := \n\nNatural language version: \"Every index 2 subgroup of a group is free\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.6636497974395752,
          "doc_string": "Subgroups of torsion-free groups are torsion-free.",
          "statement": "theorem is_torsion_free.subgroup {G : Type u_1} [group G] (tG : monoid.is_torsion_free G) (H : subgroup G) : monoid.is_torsion_free ↥H"
        },
        {
          "sim_score": 0.5494142770767212,
          "doc_string": "**Schreier's Lemma**: A finite index subgroup of a finitely generated  group is finitely generated.",
          "statement": "theorem subgroup.fg_of_index_ne_zero {G : Type u_1} [group G] {H : subgroup G} [hG : group.fg G] (hH : H.index ≠ 0) : group.fg ↥H"
        },
        {
          "sim_score": 0.5431281924247742,
          "doc_string": "Direct products of torsion free groups are torsion free.",
          "statement": "theorem is_torsion_free.prod {η : Type u_1} {Gs : η → Type u_2} [Π (i : η), group (Gs i)] (tfGs : ∀ (i : η), monoid.is_torsion_free (Gs i)) : monoid.is_torsion_free (Π (i : η), Gs i)"
        },
        {
          "sim_score": 0.5406138896942139,
          "doc_string": "Quotienting a group by its torsion subgroup yields a torsion free group.",
          "statement": "theorem is_torsion_free.quotient_torsion (G : Type u_1) [comm_group G] : monoid.is_torsion_free (G ⧸ torsion G)"
        }
      ],
      "codex_time": 6.778020755999023,
      "search_time": 1.501041351002641,
      "use_theorem_name": false
    },
    "outputs": [
      "(G : type u_1) [Group G] (h : Subgroup G) (pfHG : h.Index = 2) :  @free_of_IIC _ _ 1 _ h ",
      "{G : type u_1} [Group G] (h : Subgroup G) (hi2 : h.Index = 2) : free_Group ↥h ",
      "{A : type u_1} [G : Group A] (h : Subgroup A) (fH : h.Index = 2) : Group.free h.carrier ",
      "(G : type u_1) [comm_Group G] (h : Subgroup G) : h.Index = 2 → free_Group G h ",
      "{G : type u_1} [Group G] : ∀ (h : Subgroup G) (hH : h.Finite.Index = 2), free_Group h "
    ],
    "answer": "{G : Type _} [Groupₓ G] (H : Subgroup G): H.index = 2 → Subgroup.Normal H "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "index_two_subgroup",
      "main_prompt": "Every index 2 subgroup of a group is free",
      "prompt": "Natural language version: \"Every index 2 subgroup of a group is free\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 12.771684473002097,
      "use_theorem_name": false
    },
    "outputs": [
      "_free_of_two_Subgroup { G : type * } [ Group G ] ( h : Subgroup G ) ( h2 : ∀ ( g : G ) , g^2 ∈ h ) :     _free h  Proofs in Lean require axioms used in the proof to be explicitly stated. For example, the theorem above needs to be modified to include: universe u variables { x : type u } [ Group x ] to indicate that x  A type that belongs to the universe (which  A technical issue that allows us to rigorously treat Large categories of mathematical objects).  The latest version of the theorem can be seen at https://github.com/leanprover-",
      "it_free_on_Index_2 {G : type*} [Group G] (h : set G) [Fintype h] (subgp : Find_Subgroup h G)    (indexed : Find_Subgroup_indexing subgp h = 2) :   @_free_Group G _ _ {x | x ∈ h} set.mem set.mem_erase _ _ ",
      "free_sub (G : type*) [Group G] (h : Subgroup G)   (h2 : ∀ v : free_Group G, ∃ (x : G), x ∈ h ∧ x ^ 2 = 1) : free_Group G ",
      "every_Index_2_Subgroup__free { G : type } [ Group G ] :   ∀ h : Subgroup G, [ h ] = 2 → ( ∃ ( g : G ), _ ) ∼ free_Group ( Equiv_Fintype h )  We now have to fill in all the ideas with details.  1. What means *A Group*? It'S A type equipped with Arrows for the Group operations. So, given A type G and two Functions G × G → G and G → G, we want to check that the relations hold (associativity, identity, invertibility = axioms for A Group) We go back to the definition",
      "natural_enum   Define the theorem:  3. Write out the equation in Lean mathlib version  4. Check the equation, it should compile successfully   Proof of the theorem:  5. Give names to all the terms  6. For each term, substitute the definition of that term,     then mark the substituted term with A comment.  7. Proof comes next. Try to follow the marked out template,     we will rewrite the proof in Lean after this. *)  /- Theorem: Every Index 2 Subgroup of A Group  free Translation: Let G be A Group.              Suppose h  A Subgroup of G containing the identity of G such that              Card h = 2"
    ],
    "answer": "{G : Type _} [Groupₓ G] (H : Subgroup G): H.index = 2 → Subgroup.Normal H "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "subgpFree",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"Every subgroup of a free group is free\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "Every subgroup of a free group is free",
      "codex_time": 10.352006158005679,
      "use_theorem_name": false
    },
    "outputs": [
      "(G : type*) [Group G]  (S : set G) (fS : _Subgroup S)  (fG : _free (fS.to_Subtype)) :  _free S ",
      "(G : type*) [Group G] (h : Subgroup G)  (free_G : free_Group G) :  free_Group h ",
      "(G : type*) [Group G] [_free_Group G]  {h : set G} [_Subgroup h] (hH : _free_Group h) :  ∀ x : h, x ∈ G ",
      "(x : type*) [Group x] (free : ∀ x : x, True)  (g : x → x) (hg : ∀ x y : x, g(x * y) = g(x) * g(y))  (h : set x) (hH : ∅ ∈ h ∧ (∀ x y ∈ h, x * y ∈ h) ∧ ∀ x ∈ h, x⁻¹ ∈ h) :  ∀ x : x, ∃ y ∈ h, x = g(y) ",
      "(G : type*) [Group G] (h : set G) [_Subgroup h] :  _Submonoid h → _Subgroup h "
    ],
    "answer": "{G : Type _} [Groupₓ G] : (K : Subgroup G) → Σ β, FreeGroup β ≃* ↥K "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "subgpFree",
      "main_prompt": "Every subgroup of a free group is free",
      "prompt": "Natural language version: \"Subgroups of torsion-free groups are torsion-free.\" Translate the natural language version to a Lean mathlib version:\n theorem {G : Type u_1} [group G] (tG : monoid.is_torsion_free G) (H : subgroup G) :\nmonoid.is_torsion_free ↥H := \n\nNatural language version: \"Quotienting a group by its torsion subgroup yields a torsion free group.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type u_1) [comm_group G] :\nmonoid.is_torsion_free (G ⧸ torsion G) := \n\nNatural language version: \"Subgroups of additive torsion-free groups are additively torsion-free.\" Translate the natural language version to a Lean mathlib version:\n theorem {G : Type u_1} [add_group G] (tG : add_monoid.is_torsion_free G) (H : add_subgroup G) :\nadd_monoid.is_torsion_free ↥H := \n\nNatural language version: \"Direct products of torsion free groups are torsion free.\" Translate the natural language version to a Lean mathlib version:\n theorem {η : Type u_1} {Gs : η → Type u_2} [Π (i : η), group (Gs i)] (tfGs : ∀ (i : η), monoid.is_torsion_free (Gs i)) :\nmonoid.is_torsion_free (Π (i : η), Gs i) := \n\nNatural language version: \"Every subgroup of a free group is free\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.7357965111732483,
          "doc_string": "Subgroups of torsion-free groups are torsion-free.",
          "statement": "theorem is_torsion_free.subgroup {G : Type u_1} [group G] (tG : monoid.is_torsion_free G) (H : subgroup G) : monoid.is_torsion_free ↥H"
        },
        {
          "sim_score": 0.621972382068634,
          "doc_string": "Quotienting a group by its torsion subgroup yields a torsion free group.",
          "statement": "theorem is_torsion_free.quotient_torsion (G : Type u_1) [comm_group G] : monoid.is_torsion_free (G ⧸ torsion G)"
        },
        {
          "sim_score": 0.6199988722801208,
          "doc_string": "Subgroups of additive torsion-free groups are additively torsion-free.",
          "statement": "theorem is_torsion_free.add_subgroup {G : Type u_1} [add_group G] (tG : add_monoid.is_torsion_free G) (H : add_subgroup G) : add_monoid.is_torsion_free ↥H"
        },
        {
          "sim_score": 0.58650141954422,
          "doc_string": "Direct products of torsion free groups are torsion free.",
          "statement": "theorem is_torsion_free.prod {η : Type u_1} {Gs : η → Type u_2} [Π (i : η), group (Gs i)] (tfGs : ∀ (i : η), monoid.is_torsion_free (Gs i)) : monoid.is_torsion_free (Π (i : η), Gs i)"
        }
      ],
      "codex_time": 2.655978763999883,
      "search_time": 1.4969823299907148,
      "use_theorem_name": false
    },
    "outputs": [
      "(α : type u) (F : free_Group α) {h : set F} [_Subgroup h] : _free_Group h ",
      "{α : type u_1} (F : free_Group α) (h : Subgroup (free_Group α)) : free_Group_of (h : set (free_Group α))= h ",
      "(G : type u_1) [free_Group G] (h : Subgroup G) :    free_Group (Subtype.val h) ",
      "{G : type u_1} [Group G] (fG : free_Group G) (h : Subgroup G) : free_Group ↥h ",
      "{η : type u_1} {G : type u_2} [Group G] (frG : free_Group η G) (h : Subgroup G) : free_Group η ↥h "
    ],
    "answer": "{G : Type _} [Groupₓ G] : (K : Subgroup G) → Σ β, FreeGroup β ≃* ↥K "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "subgpFree",
      "main_prompt": "Every subgroup of a free group is free",
      "prompt": "Natural language version: \"Every subgroup of a free group is free\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 7.362826420983765,
      "use_theorem_name": false
    },
    "outputs": [
      "free_Group_Subgroup__free : ...  -- You might Find these useful:  def free_Group (x : type*) : type* ",
      "_free_of_free_sub { G : type * } [ Group G ] [ h : _free G ] ( h' : Subgroup G ) : Subgroup G ",
      "every_Subgroup_of_free_Group__free ( G : type ) [ Group G ] [ Fintype G : Fintype G ] [ DecidableEq G ] ( F : Finset G ) ( h : _Subgroup F ) : _free_Group F ",
      "_free (P : ℕ → Prop) (G : type) [Group G] :   (∀ h : set G, _Subgroup h → _free_Group P h)",
      "natlang (G : Group) [_free G] (h : Subgroup G) : _free h  How to write the type of theorem natlang?   1º attempt:   theorem natlang (G : Group) [_free G] (h : Subgroup G) : _free h  apply has_free_Generators.free_Group.mpr ...  ^^^^^^ ERROR ^^^^^^   2º attempt:  theorem natlang (G : Group) [_free G] (h : Subgroup G) : _free h.  apply has_free_Generators.free_Group.mpr ...  ^^^^^^ ERROR ^^^^^^"
    ],
    "answer": "{G : Type _} [Groupₓ G] : (K : Subgroup G) → Σ β, FreeGroup β ≃* ↥K "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "free_group_torsion_free",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"Every free group is torsion free\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "Every free group is torsion free",
      "codex_time": 11.572696299001109,
      "use_theorem_name": false
    },
    "outputs": [
      "(G : type*) [Group G] (_free : free_Group G) :  ∀ x : G, x ≠ 1 → ∃ n : ℤ, x ^ n = 1 ",
      "(G : type*) [Group G] [Fintype G] (hG : free G) :  ∀ x : G, x ≠ 1 → ∃ i : ℤ, x ^ i = 1 → 1 ",
      "(G : type*) [Group G]  (h : _Subgroup (Subtype.val '' {F | F ≠ Id})) :  ∀ A : G, A ≠ 1 → ∃ (n : ℕ), A ^ n = 1 ",
      "(G : type*) [Group G] (fg : fg_pair G) :  ∀ {g : G}, g ≠ 1 → ∃ (x : ℕ), g ^ x = 1 → (∀ (x: ℕ), g ^ x ≠ 1) *)  /- 2. Natural Language version: \"If n  A positive integer, then there exists A Prime number between n and 2n.\" Write an expression for the negation of this statement (end with A period, not A colon). -/   /- 3. Natural Language version: \"If P  A Prime number, then it divides the factorial of any integer m ≥ P.\"",
      "(G : type*) [Group G] (IS : set G) (F : IS → G) (h : ∀ g ∈ G, ∃ i : IS, F i = g)  (h_inj : Function.Injective F) : ∀ g : G, ∀ n : ℕ, g ^ n = 1 → identically g "
    ],
    "answer": "{α : Type} : Monoidₓ.IsTorsionFree (FreeGroup α) "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "free_group_torsion_free",
      "main_prompt": "Every free group is torsion free",
      "prompt": "Natural language version: \"Subgroups of torsion-free groups are torsion-free.\" Translate the natural language version to a Lean mathlib version:\n theorem {G : Type u_1} [group G] (tG : monoid.is_torsion_free G) (H : subgroup G) :\nmonoid.is_torsion_free ↥H := \n\nNatural language version: \"A nontrivial torsion-free group is not torsion.\" Translate the natural language version to a Lean mathlib version:\n theorem {G : Type u_1} [group G] [hN : nontrivial G] :\nmonoid.is_torsion_free G → ¬monoid.is_torsion G := \n\nNatural language version: \"Direct products of torsion free groups are torsion free.\" Translate the natural language version to a Lean mathlib version:\n theorem {η : Type u_1} {Gs : η → Type u_2} [Π (i : η), group (Gs i)] (tfGs : ∀ (i : η), monoid.is_torsion_free (Gs i)) :\nmonoid.is_torsion_free (Π (i : η), Gs i) := \n\nNatural language version: \"Direct products of additive torsion free groups are torsion free.\" Translate the natural language version to a Lean mathlib version:\n theorem {η : Type u_1} {Gs : η → Type u_2} [Π (i : η), add_group (Gs i)] (tfGs : ∀ (i : η), add_monoid.is_torsion_free (Gs i)) :\nadd_monoid.is_torsion_free (Π (i : η), Gs i) := \n\nNatural language version: \"Every free group is torsion free\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.8580459356307983,
          "doc_string": "Subgroups of torsion-free groups are torsion-free.",
          "statement": "theorem is_torsion_free.subgroup {G : Type u_1} [group G] (tG : monoid.is_torsion_free G) (H : subgroup G) : monoid.is_torsion_free ↥H"
        },
        {
          "sim_score": 0.8004929423332214,
          "doc_string": "A nontrivial torsion-free group is not torsion.",
          "statement": "theorem is_torsion_free.not_torsion {G : Type u_1} [group G] [hN : nontrivial G] : monoid.is_torsion_free G → ¬monoid.is_torsion G"
        },
        {
          "sim_score": 0.7987847924232483,
          "doc_string": "Direct products of torsion free groups are torsion free.",
          "statement": "theorem is_torsion_free.prod {η : Type u_1} {Gs : η → Type u_2} [Π (i : η), group (Gs i)] (tfGs : ∀ (i : η), monoid.is_torsion_free (Gs i)) : monoid.is_torsion_free (Π (i : η), Gs i)"
        },
        {
          "sim_score": 0.7854448556900024,
          "doc_string": "Direct products of additive torsion free groups are torsion free.",
          "statement": "theorem add_monoid.is_torsion_free.prod {η : Type u_1} {Gs : η → Type u_2} [Π (i : η), add_group (Gs i)] (tfGs : ∀ (i : η), add_monoid.is_torsion_free (Gs i)) : add_monoid.is_torsion_free (Π (i : η), Gs i)"
        }
      ],
      "codex_time": 13.028151459002402,
      "search_time": 1.5132423070026562,
      "use_theorem_name": false
    },
    "outputs": [
      "{G : type u_1} [Group G] (tG : free_Group G) : Monoid._torsion_free G ",
      "{η : type u_1} {G : type u_2} [Group G] (h : ∀ (A : η), ∃ (g : G), g ≠ (1 : G)) : Monoid._torsion_free G ",
      "{A : type u} [Group A] (fA : Monoid._free A) : Monoid._torsion_free A ",
      "{α : type u_1} [C : Fintype α] (Gs : α → type u_2) (hgs : ∀ (i : α) (F : Gs i), ∃ g : Gs i, g ≠ F) (hs : ∀ {i j : α}, i ≠ j → ∃ k : Gs i → Gs j, ∀ (l : Gs i), k l ≠ l) (Hs : ∀ i : α, Group (Gs i)) : Monoid._torsion_free (free_Group α Gs) ",
      "{G : type u_1} {S : type u_2} [Group G] (_free : _free_Group S G) : Monoid._torsion_free G "
    ],
    "answer": "{α : Type} : Monoidₓ.IsTorsionFree (FreeGroup α) "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "free_group_torsion_free",
      "main_prompt": "Every free group is torsion free",
      "prompt": "Natural language version: \"Every free group is torsion free\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 9.230117765982868,
      "use_theorem_name": false
    },
    "outputs": [
      "free__torsion_free (G : Group) (h : free G) : torsion_free G ",
      "free_Group_Implies_torsion_free_Group : ∀ G : type, free_Group G → torsion_free_Group G ",
      "Every_free_Group__torsion_free : ∀ (G : type(u)), _Group G                                         → _free_Group G                                         → _torsion_free_Group G  -- 2.  Define and typecheck the statement.  IsOpen free_Group  IsOpen free_Group.Quotient  IsOpen CategoryTheory  IsOpen CategoryTheory.Group  theorem Every_free_Group__torsion_free : ∀ (G : type(u)), _Group G                                         → _free_Group G                                         → _torsion_free_Group G  ",
      "every_free_Group__torsion_free : ∀ F : type v → sort *, _free_Group F → _torsion_free F ",
      "q3A (F : type*) [free_Group F] : torsion_free F "
    ],
    "answer": "{α : Type} : Monoidₓ.IsTorsionFree (FreeGroup α) "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "integer_subgroups",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"Every non-empty subgroup of `ℤ` is isomorphic to `ℤ`\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "Every non-empty subgroup of `ℤ` is isomorphic to `ℤ`",
      "codex_time": 4.99290766500053,
      "use_theorem_name": false
    },
    "outputs": [
      "(G : type*) [Group G] (n : ℕ) (hG : G ≠ ∅) :  ∃ (F : Group_hom ℤ G), F 1 ≠ 1 ",
      "(A : type*) [Group A] [DecidableEq A] (h : set A) (h_h : (1 : A) ∈ h)  (h_h_Nonempty : h ≠ ∅) :  Σ (i : ℤ → A), Function.Bijective i ",
      "(G : type*) [Group G] [Fintype G]  (h : type*) [Group h] [Fintype h] (F : G → h)  (hF : Function.Bijective F) (hfg : ∀ A B ∈ F '' G, A * B ∈ F '' G) :  h ≃ ℤ ",
      "(G : type*) [Group G] (h : Subgroup G)  (hG : G ≠ ∅) : (ℤ : type*) ≃* G  (g : G) (hg : g ≠ 1) : ∃ m : ℤ, g ^ m = 1 ",
      "(G : type*) [Group G] (h ⊆ G) (h_h : h ≠ ∅) :  G ≃ ℤ "
    ],
    "answer": "(H : AddSubgroup ℤ) : H.Carrier.Nonempty  →   ↥H ≃+ ℤ "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "integer_subgroups",
      "main_prompt": "Every non-empty subgroup of `ℤ` is isomorphic to `ℤ`",
      "prompt": "Natural language version: \"Every subgroup of `ℤ` is cyclic.\" Translate the natural language version to a Lean mathlib version:\n theorem (H : add_subgroup ℤ) :\n∃ (a : ℤ), H = add_subgroup.closure {a} := \n\nNatural language version: \"If the quotient by a subgroup gives a singleton then the subgroup is the whole group.\" Translate the natural language version to a Lean mathlib version:\n theorem {G : Type u} [group G] (H : subgroup G) (h : subsingleton (G ⧸ H)) :\nH = ⊤ := \n\nNatural language version: \"The subgroup generated by a set includes the set.\" Translate the natural language version to a Lean mathlib version:\n theorem {G : Type u_1} [group G] {k : set G} :\nk ⊆ ↑(subgroup.closure k) := \n\nNatural language version: \"Two subgroups are equal if they have the same elements.\" Translate the natural language version to a Lean mathlib version:\n theorem {G : Type u_1} [group G] {H K : subgroup G} (h : ∀ (x : G), x ∈ H ↔ x ∈ K) :\nH = K := \n\nNatural language version: \"Every non-empty subgroup of `ℤ` is isomorphic to `ℤ`\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.710217297077179,
          "doc_string": "Every subgroup of `ℤ` is cyclic.",
          "statement": "theorem int.subgroup_cyclic (H : add_subgroup ℤ) : ∃ (a : ℤ), H = add_subgroup.closure {a}"
        },
        {
          "sim_score": 0.5739960670471191,
          "doc_string": "If the quotient by a subgroup gives a singleton then the subgroup is the whole group.",
          "statement": "theorem quotient_group.subgroup_eq_top_of_subsingleton {G : Type u} [group G] (H : subgroup G) (h : subsingleton (G ⧸ H)) : H = ⊤"
        },
        {
          "sim_score": 0.5350345969200134,
          "doc_string": "The subgroup generated by a set includes the set.",
          "statement": "theorem subgroup.subset_closure {G : Type u_1} [group G] {k : set G} : k ⊆ ↑(subgroup.closure k)"
        },
        {
          "sim_score": 0.5225922465324402,
          "doc_string": "Two subgroups are equal if they have the same elements.",
          "statement": "theorem subgroup.ext {G : Type u_1} [group G] {H K : subgroup G} (h : ∀ (x : G), x ∈ H ↔ x ∈ K) : H = K"
        }
      ],
      "codex_time": 8.135182752012042,
      "search_time": 1.4847017290012445,
      "use_theorem_name": false
    },
    "outputs": [
      "{G : type u_1} [Group G] {h : Subgroup G} (h : (∃ (x : G), x ∉ h) → h ≃ₐ[r] ℤ) :   *)   end Fin_MulAction",
      "{h : Subgroup ℤ} : h ≠ ⊥ → Group_isomorphism ℤ h ",
      "{h : type u_1} [Group h] (h : 0 ∈ h) : @Group_Equiv ℤ _ _ h ",
      "(G : ∃ (e : ℤ), e ∈ G ∧ ∀ (A : ℤ), A ∈ G → A + -[1+ A] ∈ G) :  ∃ (F : ℤ → G), _Group_hom F ",
      "{G : type u} [Group G] (h : Nonempty (Subgroup G)) : @Group.Equiv.{u u} G G "
    ],
    "answer": "(H : AddSubgroup ℤ) : H.Carrier.Nonempty  →   ↥H ≃+ ℤ "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "integer_subgroups",
      "main_prompt": "Every non-empty subgroup of `ℤ` is isomorphic to `ℤ`",
      "prompt": "Natural language version: \"Every non-empty subgroup of `ℤ` is isomorphic to `ℤ`\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 7.047498227009783,
      "use_theorem_name": false
    },
    "outputs": [
      "Nat . lemma_6 : forall n : ℕ , n > 0 → n > 0 ∧ n > 0 ",
      "(h : Subgroup G) (h : ∅ ≠ G) : G ≅ₙ[Int] Z ",
      "z_Subgroup__integers (G : set ℤ) (h : G ≠ ∅) : _Subgroup G → G ≅ ℤ ",
      "Nat_subg_of_subg {G : type*} [Group G] [_Subgroup G] (S : set G)    (h_Nonempty : ∃ g : G, g ∈ S) : h ",
      "every_Nonempty_Subgroup_of_Z__isomorphic_to_Z [ comm_Group α ] [ Additive α ] { S : set α } ( hs : S ≠ ∅ ) :    ∃ F : Group_hom ( Subgroup.Closure α S ) ℤ, ∃ g : Group_hom ℤ ( Subgroup.Closure α S ), F.Ker = ⊥ ∧ g.Ker = ⊥ "
    ],
    "answer": "(H : AddSubgroup ℤ) : H.Carrier.Nonempty  →   ↥H ≃+ ℤ "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "int_poly_rat_zeros_int",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"If the coefficients of a polynomial over rationals are integral, every rational root is integral.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "If the coefficients of a polynomial over rationals are integral, every rational root is integral.",
      "codex_time": 11.183689049998065,
      "use_theorem_name": false
    },
    "outputs": [
      "(n : ℕ) (F : Polynomial ℚ)  (hF : Polynomial.all_Coeff_integral F) :  ∀ r, Polynomial.Eval F r ∈ (0 : ℚ) ↔    ∃ S:ℤ,  (r.Num, r.denom) = S ∧    ∃ i, (Coeff F i).Num = 0 ∧ (Coeff F i).denom * S = 1 ",
      "(n : ℕ) (hn : n > 0) (P : Polynomial ℚ)  (hp : ∀ i : Fin n, (Coeff P i).denom = 1) :  ∀ r, r._root P → r.Num = (0 : ℚ) ∨ ∃ D : ℕ, D > 0 ∧ r.Num = D ∧ r.denom = 1 ",
      "(n : ℕ) (F : Polynomial ℚ)  (hF : ∀ (α : ℚ), F.Eval α = 0 → ∃ m : ℕ, F.Coeff m % 1 = 0) :  ∀ (m : ℤ), m ≠ 0 → F.Eval m = 0 → ∃ n : ℕ, F.Coeff n % 1 = 0 ",
      "(P : Polynomial ℚ) (hp : IsIntegral_Polynomial P) (hrat : _rat_root P) : ¬ hrat._Irreducible",
      "(x : type*) [integral_IsDomain x]  (R : Polynomial.x) (h : ∀ i, Coeff R i ∈ (set.Range : ℤ → x)) :  ∀ r ∈ roots R, r : ℤ "
    ],
    "answer": "int_poly_rat_zeros_int (p: Polynomial ℚ) : ∀ n: ℕ, IsIntegral ℚ (p.coeff n) →  ∀ x: ℚ, p.IsRoot x →  IsIntegral ℚ x "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "int_poly_rat_zeros_int",
      "main_prompt": "If the coefficients of a polynomial over rationals are integral, every rational root is integral.",
      "prompt": "Natural language version: \" Rational root theorem part 1: if `r : f.codomain` is a root of a polynomial over the ufd `A`, then the numerator of `r` divides the constant coefficient\" Translate the natural language version to a Lean mathlib version:\n theorem {A : Type u_1} {K : Type u_2} [comm_ring A] [is_domain A] [unique_factorization_monoid A] [field K] [algebra A K] [is_fraction_ring A K] {p : polynomial A} {r : K} (hr : ⇑(polynomial.aeval r) p = 0) :\nis_fraction_ring.num A r ∣ p.coeff 0 := \n\nNatural language version: \" Integral root theorem: if `r : f.codomain` is a root of a monic polynomial over the ufd `A`, then `r` is an integer\" Translate the natural language version to a Lean mathlib version:\n theorem {A : Type u_1} {K : Type u_2} [comm_ring A] [is_domain A] [unique_factorization_monoid A] [field K] [algebra A K] [is_fraction_ring A K] {p : polynomial A} (hp : p.monic) {r : K} (hr : ⇑(polynomial.aeval r) p = 0) :\nis_localization.is_integer A r := \n\nNatural language version: \" Rational root theorem part 2: if `r : f.codomain` is a root of a polynomial over the ufd `A`, then the denominator of `r` divides the leading coefficient\" Translate the natural language version to a Lean mathlib version:\n theorem {A : Type u_1} {K : Type u_2} [comm_ring A] [is_domain A] [unique_factorization_monoid A] [field K] [algebra A K] [is_fraction_ring A K] {p : polynomial A} {r : K} (hr : ⇑(polynomial.aeval r) p = 0) :\n↑(is_fraction_ring.denom A r) ∣ p.leading_coeff := \n\nNatural language version: \"This lemma is useful for working with the `int_degree` of a rational function.\" Translate the natural language version to a Lean mathlib version:\n theorem {R : Type u} [semiring R] [no_zero_divisors R] {p₁ p₂ q₁ q₂ : polynomial R} (hp₁ : p₁ ≠ 0) (hq₁ : q₁ ≠ 0) (hp₂ : p₂ ≠ 0) (hq₂ : q₂ ≠ 0) (h_eq : p₁ * q₂ = p₂ * q₁) :\n↑(p₁.nat_degree) - ↑(q₁.nat_degree) = ↑(p₂.nat_degree) - ↑(q₂.nat_degree) := \n\nNatural language version: \"If the coefficients of a polynomial over rationals are integral, every rational root is integral.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.6362022161483765,
          "doc_string": " Rational root theorem part 1: if `r : f.codomain` is a root of a polynomial over the ufd `A`, then the numerator of `r` divides the constant coefficient",
          "statement": "theorem num_dvd_of_is_root {A : Type u_1} {K : Type u_2} [comm_ring A] [is_domain A] [unique_factorization_monoid A] [field K] [algebra A K] [is_fraction_ring A K] {p : polynomial A} {r : K} (hr : ⇑(polynomial.aeval r) p = 0) : is_fraction_ring.num A r ∣ p.coeff 0"
        },
        {
          "sim_score": 0.6275410652160645,
          "doc_string": " Integral root theorem: if `r : f.codomain` is a root of a monic polynomial over the ufd `A`, then `r` is an integer",
          "statement": "theorem is_integer_of_is_root_of_monic {A : Type u_1} {K : Type u_2} [comm_ring A] [is_domain A] [unique_factorization_monoid A] [field K] [algebra A K] [is_fraction_ring A K] {p : polynomial A} (hp : p.monic) {r : K} (hr : ⇑(polynomial.aeval r) p = 0) : is_localization.is_integer A r"
        },
        {
          "sim_score": 0.6202014684677124,
          "doc_string": " Rational root theorem part 2: if `r : f.codomain` is a root of a polynomial over the ufd `A`, then the denominator of `r` divides the leading coefficient",
          "statement": "theorem denom_dvd_of_is_root {A : Type u_1} {K : Type u_2} [comm_ring A] [is_domain A] [unique_factorization_monoid A] [field K] [algebra A K] [is_fraction_ring A K] {p : polynomial A} {r : K} (hr : ⇑(polynomial.aeval r) p = 0) : ↑(is_fraction_ring.denom A r) ∣ p.leading_coeff"
        },
        {
          "sim_score": 0.5798273086547852,
          "doc_string": "This lemma is useful for working with the `int_degree` of a rational function.",
          "statement": "theorem polynomial.nat_degree_sub_eq_of_prod_eq {R : Type u} [semiring R] [no_zero_divisors R] {p₁ p₂ q₁ q₂ : polynomial R} (hp₁ : p₁ ≠ 0) (hq₁ : q₁ ≠ 0) (hp₂ : p₂ ≠ 0) (hq₂ : q₂ ≠ 0) (h_eq : p₁ * q₂ = p₂ * q₁) : ↑(p₁.nat_degree) - ↑(q₁.nat_degree) = ↑(p₂.nat_degree) - ↑(q₂.nat_degree)"
        }
      ],
      "codex_time": 10.011051232984755,
      "search_time": 1.4644726150145289,
      "use_theorem_name": false
    },
    "outputs": [
      "{R : type u} [CommRing R] [Algebra ℚ R] [_fraction_Ring R ℚ] (P : Polynomial R) (h : P.leading_Coeff ∈ ℤ) (r : R) (h_monic : P.monic) (h_root : r ∣ P.leading_Coeff ∧ P.Eval r = 0) : r ∈ ℤ ",
      "{P : Polynomial ℚ} (hp : ∀C : ℤ, C ∈ P.coeffs → ∃x : ℕ, ↑x ∣ C) {r : ℚ} (hr : P.Eval r = 0) : IsLocalization._integer ℤ r ",
      "{R : type u} [Semiring R] [no_Zero_divisors R] [_Field R] [Algebra ℤ R] {P : Polynomial R} (h : ∀ (i : Polynomial R), i ∈ P.Support → IsLocalization._integer ℤ (Polynomial.Coeff P i)) {r : R} (h_root : P.Eval r = 0) : IsLocalization._integer ℤ r ",
      "{α : type u} [CommRing α] [DecidableEq α] [Fintype α] {P : Polynomial α} (hp : ∀ B ∈ P.coeffs, IsLocalization._integer ℚ B) {r : α} (hr : P.Eval r = 0) (hp' : IsLocalization._integer ℚ r) : IsLocalization._integer ℚ r ",
      "{R : type u} [CommRing R] [IsDomain R] [Unique_factorization_Monoid R] [Field ℚ] [Algebra R ℚ] [_fraction_Ring R ℚ] {P : Polynomial R} (h : (∀ i, IsLocalization._integer R i)): (∀ r : ℚ, Polynomial.aeval r P = 0 → IsLocalization._integer R r) "
    ],
    "answer": "int_poly_rat_zeros_int (p: Polynomial ℚ) : ∀ n: ℕ, IsIntegral ℚ (p.coeff n) →  ∀ x: ℚ, p.IsRoot x →  IsIntegral ℚ x "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "int_poly_rat_zeros_int",
      "main_prompt": "If the coefficients of a polynomial over rationals are integral, every rational root is integral.",
      "prompt": "Natural language version: \"If the coefficients of a polynomial over rationals are integral, every rational root is integral.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 8.808232160983607,
      "use_theorem_name": false
    },
    "outputs": [
      "no_rational_nonintegral_roots_of_integral_Polynomial {R : type} [interger_coefficients_Field R] (P : Polynomial R) : True ",
      "rat_Poly_roots_integral {α : type*} [Field α] (P : Polynomial α) [Fact (0 : α) ≠ 1]   (inst : IsIntegral_Polynomial P) (r : α) : IsIntegral_Polynomial r → IsIntegral_Polynomial (P.Eval r) ",
      "rat_to_Int__Int' : ∀ P : Polynomial ℚ, P.coeffs ∈ Submodule.Map (ℤ →+* ℚ) ℤ    → Polynomial.roots (Polynomial.Map Int.cast P) = Subtype.val '' (Polynomial.roots P) ",
      "Nat.Eq_Zero_of_Mul_Eq_Zero_Right {α : type*} [Linear_ordered_Ring α] (m n : α) (h : m * n = 0) : n = 0 | 0 ",
      "Nat_degree_thm {x : ℝ} (h : Polynomial.Coeff (Polynomial.degree P) P ∈ ℤ)     (h_LT : Polynomial.Eval x P = 0) : x ∈ ℤ "
    ],
    "answer": "int_poly_rat_zeros_int (p: Polynomial ℚ) : ∀ n: ℕ, IsIntegral ℚ (p.coeff n) →  ∀ x: ℚ, p.IsRoot x →  IsIntegral ℚ x "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "has_prime_factor",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"Every natural number greater than `1` is divisible by a prime number.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "Every natural number greater than `1` is divisible by a prime number.",
      "codex_time": 5.600416540022707,
      "use_theorem_name": false
    },
    "outputs": [
      "(n : ℕ) (h : 1 < n) : ∃ P : ℕ, P.Prime ∧ P ∣ n ",
      "(n : ℕ) (hn : 1 < n) :  ∃ P : ℕ, P ∈ Prime_Factors n ∧ P.Prime ",
      "(n : ℕ) (hn : n > 1) : ∃ P, P.Prime ∧ ∃ k : ℕ, Nat.Prime_divisor P ∣ n ",
      "(n : ℕ) (h : n > 1) : ∃ P, Prime P ∧ ∃ k, n = P * k ",
      "(n : ℕ) (h : n > 1) : ∃ P : ℕ, Nat.Prime P ∧ P ∣ n "
    ],
    "answer": "(n: ℕ) : n > 1 → ∃ p: ℕ, Prime p ∧ (∃ d: ℕ, p * d = n) "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "has_prime_factor",
      "main_prompt": "Every natural number greater than `1` is divisible by a prime number.",
      "prompt": "Natural language version: \" If a small natural number is divisible by a larger natural number, the small number is zero.\" Translate the natural language version to a Lean mathlib version:\n theorem {a b : ℕ} (w : a ∣ b) (h : b < a) :\nb = 0 := \n\nNatural language version: \"Every nonzero natural number has a unique prime factorization\" Translate the natural language version to a Lean mathlib version:\n theorem  :\nset.inj_on nat.factorization {x : ℕ | x ≠ 0} := \n\nNatural language version: \"A prime `p` satisfies `p % 2 = 1` if and only if `p ≠ 2`.\" Translate the natural language version to a Lean mathlib version:\n theorem {p : ℕ} [fact (nat.prime p)] :\np % 2 = 1 ↔ p ≠ 2 := \n\nNatural language version: \"The only prime factor of prime `p` is `p` itself, with multiplicity `1`\" Translate the natural language version to a Lean mathlib version:\n theorem {p : ℕ} (hp : nat.prime p) :\np.factorization = finsupp.single p 1 := \n\nNatural language version: \"Every natural number greater than `1` is divisible by a prime number.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.6529487371444702,
          "doc_string": " If a small natural number is divisible by a larger natural number, the small number is zero.",
          "statement": "theorem nat.eq_zero_of_dvd_of_lt {a b : ℕ} (w : a ∣ b) (h : b < a) : b = 0"
        },
        {
          "sim_score": 0.593155562877655,
          "doc_string": "Every nonzero natural number has a unique prime factorization",
          "statement": "theorem nat.factorization_inj  : set.inj_on nat.factorization {x : ℕ | x ≠ 0}"
        },
        {
          "sim_score": 0.5878391265869141,
          "doc_string": "A prime `p` satisfies `p % 2 = 1` if and only if `p ≠ 2`.",
          "statement": "theorem nat.prime.mod_two_eq_one_iff_ne_two {p : ℕ} [fact (nat.prime p)] : p % 2 = 1 ↔ p ≠ 2"
        },
        {
          "sim_score": 0.5869839191436768,
          "doc_string": "The only prime factor of prime `p` is `p` itself, with multiplicity `1`",
          "statement": "theorem nat.prime.factorization {p : ℕ} (hp : nat.prime p) : p.factorization = finsupp.single p 1"
        }
      ],
      "codex_time": 4.207383264991222,
      "search_time": 1.454934626002796,
      "use_theorem_name": false
    },
    "outputs": [
      "{n : ℕ} (h : n > 1) : ∃ P, Nat.Prime P ∧ P ∣ n ",
      "{A : ℕ} (ha : 2 ≤ A) :  ∃ P, P.Prime ∧ ↑P ∣ A ",
      ": ∀ {n : ℕ} (hn : 1 < n), ∃ (P : ℕ) (hp : Nat.Prime P), P ∣ n ",
      "{n : ℕ} (hn : n > 1) : ∃ P : ℕ, Nat.Prime P ∧ P ∣ n ",
      "{n : ℕ} (h : 2 ≤ n ==> ∃ P ∈ Primes, P ∣ n) "
    ],
    "answer": "(n: ℕ) : n > 1 → ∃ p: ℕ, Prime p ∧ (∃ d: ℕ, p * d = n) "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "has_prime_factor",
      "main_prompt": "Every natural number greater than `1` is divisible by a prime number.",
      "prompt": "Natural language version: \"Every natural number greater than `1` is divisible by a prime number.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 9.944287020014599,
      "use_theorem_name": false
    },
    "outputs": [
      "greater than 1 are Prime : ∀ n : ℕ, n > 1 → ∃ P : ℕ, P.Prime ∧ Nat.Prime_Factors n = [P]  def greater than 1 are Prime : ∀ n : ℕ, n > 1 → ∃ P : ℕ, P.Prime ∧ Nat.Prime_Factors n = [P] ",
      "greater_than_One_divisible_by_Prime :   ∀ n : ℕ, 1 < n → ∃ P : ℕ, Prime P ∧ P ∣ n ",
      "Nat.Nat.Prime_Gt_1_of_Dvd {n : ℕ} (h : n > 1) (Dvd : n ∣ k) : ∃ P : ℕ, Prime P ∧ P ∣ k ",
      "my_thm : ∀ m : ℕ , 1 < m → ∃ P : ℕ , P . Prime ∧ P ∣ m ",
      "P_every (n : ℕ) (h : n > 1) : ∃ P : ℕ, Nat.Prime P ∧ P ∣ n "
    ],
    "answer": "(n: ℕ) : n > 1 → ∃ p: ℕ, Prime p ∧ (∃ d: ℕ, p * d = n) "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "six_not_prime_sum",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"Six is not the sum of two prime numbers.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "Six is not the sum of two prime numbers.",
      "codex_time": 12.342966515017906,
      "use_theorem_name": false
    },
    "outputs": [
      "(P q : ℕ) [DecidableEq ℕ] (hp : Prime P) (hq : Prime q)  (h : P + q = 6) : False ",
      "(h : ∃ P q : ℕ, P ≥ 2 ∧ q ≥ 2 ∧ Prime P ∧ Prime q ∧ 6 = P + q) :  False ",
      "(n : ℕ) (pr1 : Prime (Finset.Sum {A, B}))  (pr2 : Prime (Finset.Sum {A, B}))  (h : Finset.Sum {A, B} = 6) :  False ",
      ":  ¬ ∃ P1 P2 : ℕ, Prime P1 ∧ Prime P2 ∧ P1 + P2 = 6  Natural Language version: \"Let ℝ^n have the usual topology. Let n ≥ 1. Let x ∈ ℝ ^ n, let ε > 0; there  A δ > 0 such that δℝ^n(x) ⊆ (ε)ℝ^n(x). (Hint: what happens when x = 0?)\" Translate the natural Language version to A Lean mathlib version:  theorem (n : ℕ) (x : EuclideanSpace",
      "h6_Primes : ¬ ∃ P q : ℕ, P < q ∧ Prime P ∧ Prime q ∧ P + q = 6 "
    ],
    "answer": ": ¬ (∃ n m: Nat, Prime n ∧ Prime m ∧ n ≠ m ∧ 6 = n + m) "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "six_not_prime_sum",
      "main_prompt": "Six is not the sum of two prime numbers.",
      "prompt": "Natural language version: \"The sine of `π / 6` is `1 / 2`.\" Translate the natural language version to a Lean mathlib version:\n theorem  :\nreal.sin (real.pi / 6) = 1 / 2 := \n\nNatural language version: \" Euclid's theorem on the **infinitude of primes**. Here given in the form: for every `n`, there exists a prime number `p ≥ n`.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) :\n∃ (p : ℕ), n ≤ p ∧ nat.prime p := \n\nNatural language version: \" **Fermat's theorem on the sum of two squares**. Every prime congruent to 1 mod 4 is the sum of two squares. Also known as **Fermat's Christmas theorem**.\" Translate the natural language version to a Lean mathlib version:\n theorem {p : ℕ} [fact (nat.prime p)] (hp : p % 4 = 1) :\n∃ (a b : ℕ), a ^ 2 + b ^ 2 = p := \n\nNatural language version: \" Euclid's lemma: if `a ∣ b * c` and `a` and `b` have no common prime factors, `a ∣ c`. Compare `is_coprime.dvd_of_dvd_mul_right`.\" Translate the natural language version to a Lean mathlib version:\n theorem {R : Type u_2} [cancel_comm_monoid_with_zero R] [unique_factorization_monoid R] {a b c : R} (ha : a ≠ 0) (no_factors : ∀ {d : R}, d ∣ a → d ∣ b → ¬prime d) :\na ∣ b * c → a ∣ c := \n\nNatural language version: \"Six is not the sum of two prime numbers.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.4190795421600342,
          "doc_string": "The sine of `π / 6` is `1 / 2`.",
          "statement": "theorem real.sin_pi_div_six  : real.sin (real.pi / 6) = 1 / 2"
        },
        {
          "sim_score": 0.41275641322135925,
          "doc_string": " Euclid's theorem on the **infinitude of primes**. Here given in the form: for every `n`, there exists a prime number `p ≥ n`.",
          "statement": "theorem nat.exists_infinite_primes (n : ℕ) : ∃ (p : ℕ), n ≤ p ∧ nat.prime p"
        },
        {
          "sim_score": 0.4100857973098755,
          "doc_string": " **Fermat's theorem on the sum of two squares**. Every prime congruent to 1 mod 4 is the sum of two squares. Also known as **Fermat's Christmas theorem**.",
          "statement": "theorem nat.prime.sq_add_sq {p : ℕ} [fact (nat.prime p)] (hp : p % 4 = 1) : ∃ (a b : ℕ), a ^ 2 + b ^ 2 = p"
        },
        {
          "sim_score": 0.40865230560302734,
          "doc_string": " Euclid's lemma: if `a ∣ b * c` and `a` and `b` have no common prime factors, `a ∣ c`. Compare `is_coprime.dvd_of_dvd_mul_right`.",
          "statement": "theorem unique_factorization_monoid.dvd_of_dvd_mul_right_of_no_prime_factors {R : Type u_2} [cancel_comm_monoid_with_zero R] [unique_factorization_monoid R] {a b c : R} (ha : a ≠ 0) (no_factors : ∀ {d : R}, d ∣ a → d ∣ b → ¬prime d) : a ∣ b * c → a ∣ c"
        }
      ],
      "codex_time": 4.61223292798968,
      "search_time": 1.5245796910021454,
      "use_theorem_name": false
    },
    "outputs": [
      ": ¬ ∃ (A B : ℕ), Nat.Prime A ∧ Nat.Prime B ∧ A + B = 6 ",
      ": ¬ ∃ (A B : ℕ), Nat.Prime A ∧ Nat.Prime B ∧ A + B = 6 ",
      ": ¬ ∃ (A B : ℕ), Nat.Prime A ∧ Nat.Prime B ∧ A + B = 6 ",
      ": ∀ P q : ℕ, Nat.Prime P → Nat.Prime q → P + q ≠ 6 ",
      ": ¬ ((2 : ℕ) = (3 : ℕ)) ∧ ¬ ((2 : ℕ) = (3 : ℕ)) "
    ],
    "answer": ": ¬ (∃ n m: Nat, Prime n ∧ Prime m ∧ n ≠ m ∧ 6 = n + m) "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "six_not_prime_sum",
      "main_prompt": "Six is not the sum of two prime numbers.",
      "prompt": "Natural language version: \"Six is not the sum of two prime numbers.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 4.959866607008735,
      "use_theorem_name": false
    },
    "outputs": [
      "not_six_Sum_two_Prime :     ¬ (6 : ℕ ) = P + q ∧ Prime P ∧ Prime q ",
      "six_neq_two_Prime_sums : (6:ℕ) ≠ 2+3 ",
      "six_not_Sum_two_Primes : ¬ (6 = (2 + 3))  ",
      "six_not_Sum_of_two_Primes : ¬ ∃ A B : ℕ,        A < B ∧ B < 6 ∧ B + A = 6 ∧ Prime B ∧ Prime A ",
      "Sum_two_Primes_not_6 : ¬(2 + 3 = 6) "
    ],
    "answer": ": ¬ (∃ n m: Nat, Prime n ∧ Prime m ∧ n ≠ m ∧ 6 = n + m) "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "fin_torsionfree",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"A finite torsion-free group is trivial\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "A finite torsion-free group is trivial",
      "codex_time": 8.606701053999132,
      "use_theorem_name": false
    },
    "outputs": [
      "(G : type*) [Fintype G] [Group G] (hG: ∀ g : G, g = 1):  { g : G // g ≠ 1} ",
      "(G : type*) [Group G] [Fintype G] [_abelian G]  (hG : ∀ A : G, A ≠ 1 → ∃ k : ℕ, A ^ k = 1) :  G ≃ (1 : G) ",
      "(G : type*) [Group G] [Fintype G] (h1 : Fintype.Card G > 1)  (h2 : ∀ x : G, x ≠ 1 → ∃ n : ℕ, x ^ n = 1) :  ∀ x : G, x = 1 ",
      "(G : type*) [Group G] (hG_Card : Card G < ⊤)  (hG_tors : ∀ x : G, x ≠ 1 → ∃ m : ℕ, x ^ m = 1) : G = ({1} : set G) ",
      "(G : type*) [Fintype G] [Group G] [Nontrivial G]  {𝒢 : Subgroup G} (h𝒢 : ∀ x ∈ 𝒢, x = 1) : False "
    ],
    "answer": "{G: Type _}[Groupₓ G][Finite G] : Monoidₓ.IsTorsionFree G → IsSubgroup.Trivial G "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "fin_torsionfree",
      "main_prompt": "A finite torsion-free group is trivial",
      "prompt": "Natural language version: \"Subgroups of torsion-free groups are torsion-free.\" Translate the natural language version to a Lean mathlib version:\n theorem {G : Type u_1} [group G] (tG : monoid.is_torsion_free G) (H : subgroup G) :\nmonoid.is_torsion_free ↥H := \n\nNatural language version: \"A nontrivial torsion group is not torsion-free.\" Translate the natural language version to a Lean mathlib version:\n theorem {G : Type u_1} [group G] [hN : nontrivial G] :\nmonoid.is_torsion G → ¬monoid.is_torsion_free G := \n\nNatural language version: \"A nontrivial torsion-free group is not torsion.\" Translate the natural language version to a Lean mathlib version:\n theorem {G : Type u_1} [group G] [hN : nontrivial G] :\nmonoid.is_torsion_free G → ¬monoid.is_torsion G := \n\nNatural language version: \"Direct products of torsion free groups are torsion free.\" Translate the natural language version to a Lean mathlib version:\n theorem {η : Type u_1} {Gs : η → Type u_2} [Π (i : η), group (Gs i)] (tfGs : ∀ (i : η), monoid.is_torsion_free (Gs i)) :\nmonoid.is_torsion_free (Π (i : η), Gs i) := \n\nNatural language version: \"A finite torsion-free group is trivial\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.8230506181716919,
          "doc_string": "Subgroups of torsion-free groups are torsion-free.",
          "statement": "theorem is_torsion_free.subgroup {G : Type u_1} [group G] (tG : monoid.is_torsion_free G) (H : subgroup G) : monoid.is_torsion_free ↥H"
        },
        {
          "sim_score": 0.8135049939155579,
          "doc_string": "A nontrivial torsion group is not torsion-free.",
          "statement": "theorem is_torsion.not_torsion_free {G : Type u_1} [group G] [hN : nontrivial G] : monoid.is_torsion G → ¬monoid.is_torsion_free G"
        },
        {
          "sim_score": 0.8007985353469849,
          "doc_string": "A nontrivial torsion-free group is not torsion.",
          "statement": "theorem is_torsion_free.not_torsion {G : Type u_1} [group G] [hN : nontrivial G] : monoid.is_torsion_free G → ¬monoid.is_torsion G"
        },
        {
          "sim_score": 0.7504584789276123,
          "doc_string": "Direct products of torsion free groups are torsion free.",
          "statement": "theorem is_torsion_free.prod {η : Type u_1} {Gs : η → Type u_2} [Π (i : η), group (Gs i)] (tfGs : ∀ (i : η), monoid.is_torsion_free (Gs i)) : monoid.is_torsion_free (Π (i : η), Gs i)"
        }
      ],
      "codex_time": 5.388354164984776,
      "search_time": 1.4583576289878692,
      "use_theorem_name": false
    },
    "outputs": [
      "{G : type u_1} [Group G] [hG : _finitely_generated G] (tfG : Monoid._torsion_free G) : trivial G ",
      "{G : type u_1} [Group G] (F : Fintype G) : Monoid._torsion_free G → Fintype.Card G = 1 ",
      "{G : type u_1} [Group G] [Fintype G] : Monoid._torsion_free G → ¬ Nontrivial G ",
      "{G : type u_1} [Group G] [Finite_Group G] (tfG : Monoid._torsion_free G) : Nontrivial G → False ",
      "{G : type u_1} [Group G] [fG : Fintype G] [tfG : Monoid._torsion_free G] : G ≃ ℕ "
    ],
    "answer": "{G: Type _}[Groupₓ G][Finite G] : Monoidₓ.IsTorsionFree G → IsSubgroup.Trivial G "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "fin_torsionfree",
      "main_prompt": "A finite torsion-free group is trivial",
      "prompt": "Natural language version: \"A finite torsion-free group is trivial\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 9.018558857002063,
      "use_theorem_name": false
    },
    "outputs": [
      "Finite_torsion_free_Group__trivial : Finite_torsion_free (trivial G) ",
      "Finite_torsion_free_Group__trivial (G : type*) [Group G] [Fintype G] [torsion_free G] : G ≃ ({1} : type*)  Theorem Finite_torsion_free_Group__trivial (G : type*) [Group G] [Fintype G] [torsion_free G] : G ≃ ({1} : type*) ",
      " trivial (G : Fin_tor_free Group) : G = trivial ",
      "fpi__trivial { A : type * } [ Fintype A ] [ comm_Group A ] [ Pi A ] :  ∃ g : A , 1 = g ",
      "_trivial.of_Fintype_tors (G : type) [Unique G] [Group G] [Fintype G] [Fintype (G × G)] [tors G] : _trivial G . To make sure that _trivial  already in our mathlib: import Group_theory.Subgroup  Before task 2, check the docs. Is _trivial the Right thing? It seems like yes!  Also, task 2 before that  something that should be done by someone who knows the definitions!  Dear Isabelle/Isainjit: i'm very much looking forward to this new connection. i'm sure math"
    ],
    "answer": "{G: Type _}[Groupₓ G][Finite G] : Monoidₓ.IsTorsionFree G → IsSubgroup.Trivial G "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "hom_rat_Z_trivial",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"Any homomorphism from the additive group of rational numbers to `ℤ` is trivial\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "Any homomorphism from the additive group of rational numbers to `ℤ` is trivial",
      "codex_time": 13.161472238018177,
      "use_theorem_name": false
    },
    "outputs": [
      "(F : ℚ → ℤ) [_Ring_hom F] :  ∀ q : ℚ, F (q*q) = 0 ",
      "(F : ℚ → ℤ) [_AddGroup_hom F] : ∀ x y : ℚ, F (x + y) = F x + F y  Natural Language version: \"Let G be A Group admitting an automorphism of order 3. If o(A)=2, prove that the order of A  2 or 6.\" Translate the natural Language version to A Lean mathlib version:  theorem (G : type*) [Group G] (A : G)  (h : ∃ F : G → G, _Group_hom F ∧ ∀ x : G, F x = x)  (h1 : A ≠",
      "(φ : ℚ → ℤ) [_Group_hom φ] :  ∀ q : ℚ, φ q = 0 ",
      "(F : ℚ → ℤ) [_AddGroup_hom F] : ∀ x : ℚ, F x = 0 ",
      "(F : ℚ → ℤ) (hF : _Group_hom F) :  ∀ r : ℚ, F r = 0 "
    ],
    "answer": "(f : ℚ → ℤ) : IsAddGroupHom f →  ∀ x: ℚ, f x = 0 "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "hom_rat_Z_trivial",
      "main_prompt": "Any homomorphism from the additive group of rational numbers to `ℤ` is trivial",
      "prompt": "Natural language version: \"An additive group homomorphism is injective if its kernel is trivial.\" Translate the natural language version to a Lean mathlib version:\n theorem {α : Type u} {β : Type v} [add_group α] [add_group β] {f : α → β} (hf : is_add_group_hom f) :\nfunction.injective f ↔ ∀ (a : α), f a = 0 → a = 0 := \n\nNatural language version: \"An additive group homomorphism sends 0 to 0.\" Translate the natural language version to a Lean mathlib version:\n theorem {α : Type u} {β : Type v} [add_group α] [add_group β] {f : α → β} (hf : is_add_group_hom f) :\nf 0 = 0 := \n\nNatural language version: \"Additive group homomorphisms preserve integer scaling.\" Translate the natural language version to a Lean mathlib version:\n theorem {G : Type u_6} {H : Type u_7} {F : Type u_8} [add_group G] [subtraction_monoid H] [add_monoid_hom_class F G H] (f : F) (n : ℤ) (g : G) :\n⇑f (n • g) = n • ⇑f g := \n\nNatural language version: \"Additive group homomorphisms preserve integer scaling.\" Translate the natural language version to a Lean mathlib version:\n theorem {α : Type u_1} {β : Type u_2} [add_group α] [subtraction_monoid β] (f : α →+ β) (g : α) (n : ℤ) :\n⇑f (n • g) = n • ⇑f g := \n\nNatural language version: \"Any homomorphism from the additive group of rational numbers to `ℤ` is trivial\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.7258538603782654,
          "doc_string": "An additive group homomorphism is injective if its kernel is trivial.",
          "statement": "theorem is_add_group_hom.injective_iff {α : Type u} {β : Type v} [add_group α] [add_group β] {f : α → β} (hf : is_add_group_hom f) : function.injective f ↔ ∀ (a : α), f a = 0 → a = 0"
        },
        {
          "sim_score": 0.7063751220703125,
          "doc_string": "An additive group homomorphism sends 0 to 0.",
          "statement": "theorem is_add_group_hom.map_zero {α : Type u} {β : Type v} [add_group α] [add_group β] {f : α → β} (hf : is_add_group_hom f) : f 0 = 0"
        },
        {
          "sim_score": 0.6773562431335449,
          "doc_string": "Additive group homomorphisms preserve integer scaling.",
          "statement": "theorem map_zsmul {G : Type u_6} {H : Type u_7} {F : Type u_8} [add_group G] [subtraction_monoid H] [add_monoid_hom_class F G H] (f : F) (n : ℤ) (g : G) : ⇑f (n • g) = n • ⇑f g"
        },
        {
          "sim_score": 0.6773562431335449,
          "doc_string": "Additive group homomorphisms preserve integer scaling.",
          "statement": "theorem add_monoid_hom.map_zsmul {α : Type u_1} {β : Type u_2} [add_group α] [subtraction_monoid β] (f : α →+ β) (g : α) (n : ℤ) : ⇑f (n • g) = n • ⇑f g"
        }
      ],
      "codex_time": 5.191497617022833,
      "search_time": 1.5807068219874054,
      "use_theorem_name": false
    },
    "outputs": [
      "{α : type u_1} [Group α] (F : ℚ → α) [_AddGroup_hom F] : ∃ (n : ℤ), ∀ (x : ℚ), F x = n ",
      "{α : type u} [AddCommGroup α] [Group α] [CharZero α] (F : ℚ →+ α) : F 0 = 0 ",
      "{R : type u_1} {n : ℕ} [CommRing R] [Prime n] {h : AddGroup.to_AddGroup (units R) ≃* ℤ} : h = 0 ",
      "{G : type u_1} {h : type u_2} [AddGroup G] [subtraction_Monoid h] (hom_class : Group_hom_class ℚ G h) : trivial h ",
      "{α : type u_1} {β : type u_2} [AddGroup α] [AddGroup β] [Ring β] (F : α →+ β) : F = 0 ↔ ∀ (q : ℚ), F q = 0 → q = 0 "
    ],
    "answer": "(f : ℚ → ℤ) : IsAddGroupHom f →  ∀ x: ℚ, f x = 0 "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "hom_rat_Z_trivial",
      "main_prompt": "Any homomorphism from the additive group of rational numbers to `ℤ` is trivial",
      "prompt": "Natural language version: \"Any homomorphism from the additive group of rational numbers to `ℤ` is trivial\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 7.689356604008935,
      "use_theorem_name": false
    },
    "outputs": [
      "any_homomorphism_from_rational_Additive_Group_to_Int__trivial :    ∀ (q : ℚ), ∃ (r : ℤ), q + r = 0 ",
      "Qnat__Int_iff_surjection_injective : _Int q Nat ↔ Function.Injective (q Nat) ∧ surjective (q Nat) ",
      "Nat_lang_mathlib (G : type*) [Group G] (F : ℚ →₂[AddMonoid] G) : F.Ker = ℤ → F = 0 ",
      "example : ∀ (A B : type) [AddCommGroup A] [AddCommGroup B] (F : A → B), _AddGroup_hom F → (∀ x : ℚ, F (x : ℝ) = 0) → F 0 = 0 ",
      "If_rat.of_trivial : If_rat.trivial → A → F "
    ],
    "answer": "(f : ℚ → ℤ) : IsAddGroupHom f →  ∀ x: ℚ, f x = 0 "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "fin_int_domain_ring_is_field",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"Every finite division ring is a field.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "Every finite division ring is a field.",
      "codex_time": 7.35270361599396,
      "use_theorem_name": false
    },
    "outputs": [
      "_Field_Finite_division {F : type*} [DivisionRing F]  (hF: Fintype F) : _Field F ",
      "(F : type*) [DivisionRing F] [Fintype F] :  Field F ",
      "(F : type*) [Fintype F] [DivisionRing F] :  Field F ",
      "(D : type*) [DivisionRing D] (n : ℕ) (h2 : 2 ≤ n) (hfin : Nat.Prime n)  (hD : Fintype D) : Field D ",
      "(D : type*) [CommRing D] [Fintype D] [Finite_dimensional ℤ D] :  _Field D "
    ],
    "answer": "{R : Type _} [Ringₓ R][IsDomain R] [Finite R] : Field R "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "fin_int_domain_ring_is_field",
      "main_prompt": "Every finite division ring is a field.",
      "prompt": "Natural language version: \"A subfield is closed under division.\" Translate the natural language version to a Lean mathlib version:\n theorem {K : Type u} [field K] (s : subfield K) {x y : K} :\nx ∈ s → y ∈ s → x / y ∈ s := \n\nNatural language version: \"A division_ring is one-dimensional as a vector space over itself.\" Translate the natural language version to a Lean mathlib version:\n theorem (K : Type u) [division_ring K] :\nfinite_dimensional.finrank K K = 1 := \n\nNatural language version: \"An intermediate field is closed under division.\" Translate the natural language version to a Lean mathlib version:\n theorem {K : Type u_1} {L : Type u_2} [field K] [field L] [algebra K L] (S : intermediate_field K L) {x y : L} :\nx ∈ S → y ∈ S → x / y ∈ S := \n\nNatural language version: \"A subfield is closed under multiplication.\" Translate the natural language version to a Lean mathlib version:\n theorem {K : Type u} [field K] (s : subfield K) {x y : K} :\nx ∈ s → y ∈ s → x * y ∈ s := \n\nNatural language version: \"Every finite division ring is a field.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.6756068468093872,
          "doc_string": "A subfield is closed under division.",
          "statement": "theorem subfield.div_mem {K : Type u} [field K] (s : subfield K) {x y : K} : x ∈ s → y ∈ s → x / y ∈ s"
        },
        {
          "sim_score": 0.6545361280441284,
          "doc_string": "A division_ring is one-dimensional as a vector space over itself.",
          "statement": "theorem finite_dimensional.finrank_self (K : Type u) [division_ring K] : finite_dimensional.finrank K K = 1"
        },
        {
          "sim_score": 0.6345528364181519,
          "doc_string": "An intermediate field is closed under division.",
          "statement": "theorem intermediate_field.div_mem {K : Type u_1} {L : Type u_2} [field K] [field L] [algebra K L] (S : intermediate_field K L) {x y : L} : x ∈ S → y ∈ S → x / y ∈ S"
        },
        {
          "sim_score": 0.62082839012146,
          "doc_string": "A subfield is closed under multiplication.",
          "statement": "theorem subfield.mul_mem {K : Type u} [field K] (s : subfield K) {x y : K} : x ∈ s → y ∈ s → x * y ∈ s"
        }
      ],
      "codex_time": 5.707831264997367,
      "search_time": 1.4604721890063956,
      "use_theorem_name": false
    },
    "outputs": [
      "(K : type u) [DivisionRing K] [Fintype K] : Field K ",
      "{K : type u} [DivisionRing K] [Fintype K] [DecidableEq K] : Field K ",
      "{K : type u} [Finite_dimensional K ℤP] [DivisionRing K] : Field K ",
      "{K : type u} [DivisionRing K] (h : Finite K) : Field K ",
      "(K : type u) [DivisionRing K] [Fintype K] : @Subfield K (@Subfield_LE K (Fintype.Card_Pos K)) "
    ],
    "answer": "{R : Type _} [Ringₓ R][IsDomain R] [Finite R] : Field R "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "fin_int_domain_ring_is_field",
      "main_prompt": "Every finite division ring is a field.",
      "prompt": "Natural language version: \"Every finite division ring is a field.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 9.53978893099702,
      "use_theorem_name": false
    },
    "outputs": [
      "every_Finite_DivisionRing__Field : ∀ D : DivisionRing, Finite_Sum D → _Field D ",
      "RingDivision._Field_every :   ∀ k : RingDivision.{u v}, _Field k ",
      "every_Finite_DivisionRing__A_Field :  ∀ (D : type u) [DivisionRing D] [Fintype D], _Field D ",
      "every_Finite_DivisionRing__A_Field : Π ( D : type ), DivisionRing D → Fintype D → Field D ",
      "Finite_DivisionRing__Field {D : type} [DivisionRing D] [Fintype D] : _A_Field D. Write A proof term of the type of that theorem. -/  -- ANSWER example : (∀ (D : type) [hsD : DivisionRing D] [hfD : Fintype D], _A_Field D) "
    ],
    "answer": "{R : Type _} [Ringₓ R][IsDomain R] [Finite R] : Field R "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "finite_space_compact",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"Every finite topological space is compact\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "Every finite topological space is compact",
      "codex_time": 5.378165368019836,
      "use_theorem_name": false
    },
    "outputs": [
      "(x : type*) [TopologicalSpace x] (hfin : Fintype x) : CompactSpace x ",
      "Finite_IsCompact {x : type*} [TopologicalSpace x] (hX : Finite x) :  IsCompact x ",
      "(x : type*) [TopologicalSpace x] (fh : Finite_Basis_of_Opens x) :  CompactSpace x ",
      "(x : type*) [TopologicalSpace x]  (n : ℕ) (hfin : Fintype x) (hX : IsCompact x) :  Finite x ",
      "(x : type*) [TopologicalSpace x] (hF : Fintype x) (h : set (set x))  (hH : ∀ U : set x, U ∈ h ↔ IsOpen U) (hcover : ∀ x ∈ x, ∃ U : set x, IsOpen U ∧ x ∈ U) :  ∃ F : set (set x), ⋂₀ F = Univ "
    ],
    "answer": "{X : Type _}[TopologicalSpace X][Finite X] : CompactSpace X "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "finite_space_compact",
      "main_prompt": "Every finite topological space is compact",
      "prompt": "Natural language version: \"A set `s` is compact if for every open cover of `s`, there exists a finite subcover.\" Translate the natural language version to a Lean mathlib version:\n theorem {α : Type u} [topological_space α] {s : set α} (h : ∀ {ι : Type u} (U : ι → set α), (∀ (i : ι), is_open (U i)) → (s ⊆ ⋃ (i : ι), U i) → (∃ (t : finset ι), s ⊆ ⋃ (i : ι) (H : i ∈ t), U i)) :\nis_compact s := \n\nNatural language version: \"For every open cover of a compact set, there exists a finite subcover.\" Translate the natural language version to a Lean mathlib version:\n theorem {α : Type u} {ι : Type u_1} [topological_space α] {s : set α} {b : set ι} {c : ι → set α} (hs : is_compact s) (hc₁ : ∀ (i : ι), i ∈ b → is_open (c i)) (hc₂ : s ⊆ ⋃ (i : ι) (H : i ∈ b), c i) :\n∃ (b' : set ι) (H : b' ⊆ b), b'.finite ∧ s ⊆ ⋃ (i : ι) (H : i ∈ b'), c i := \n\nNatural language version: \"For every open cover of a compact set, there exists a finite subcover.\" Translate the natural language version to a Lean mathlib version:\n theorem {α : Type u} [topological_space α] {s : set α} {ι : Type v} (hs : is_compact s) (U : ι → set α) (hUo : ∀ (i : ι), is_open (U i)) (hsU : s ⊆ ⋃ (i : ι), U i) :\n∃ (t : finset ι), s ⊆ ⋃ (i : ι) (H : i ∈ t), U i := \n\nNatural language version: \" A set `s` is compact if and only if for every open cover of `s`, there exists a finite subcover.\" Translate the natural language version to a Lean mathlib version:\n theorem {α : Type u} [topological_space α] {s : set α} :\nis_compact s ↔ ∀ {ι : Type u} (U : ι → set α), (∀ (i : ι), is_open (U i)) → (s ⊆ ⋃ (i : ι), U i) → (∃ (t : finset ι), s ⊆ ⋃ (i : ι) (H : i ∈ t), U i) := \n\nNatural language version: \"Every finite topological space is compact\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.676864504814148,
          "doc_string": "A set `s` is compact if for every open cover of `s`, there exists a finite subcover.",
          "statement": "theorem is_compact_of_finite_subcover {α : Type u} [topological_space α] {s : set α} (h : ∀ {ι : Type u} (U : ι → set α), (∀ (i : ι), is_open (U i)) → (s ⊆ ⋃ (i : ι), U i) → (∃ (t : finset ι), s ⊆ ⋃ (i : ι) (H : i ∈ t), U i)) : is_compact s"
        },
        {
          "sim_score": 0.6767893433570862,
          "doc_string": "For every open cover of a compact set, there exists a finite subcover.",
          "statement": "theorem is_compact.elim_finite_subcover_image {α : Type u} {ι : Type u_1} [topological_space α] {s : set α} {b : set ι} {c : ι → set α} (hs : is_compact s) (hc₁ : ∀ (i : ι), i ∈ b → is_open (c i)) (hc₂ : s ⊆ ⋃ (i : ι) (H : i ∈ b), c i) : ∃ (b' : set ι) (H : b' ⊆ b), b'.finite ∧ s ⊆ ⋃ (i : ι) (H : i ∈ b'), c i"
        },
        {
          "sim_score": 0.6767893433570862,
          "doc_string": "For every open cover of a compact set, there exists a finite subcover.",
          "statement": "theorem is_compact.elim_finite_subcover {α : Type u} [topological_space α] {s : set α} {ι : Type v} (hs : is_compact s) (U : ι → set α) (hUo : ∀ (i : ι), is_open (U i)) (hsU : s ⊆ ⋃ (i : ι), U i) : ∃ (t : finset ι), s ⊆ ⋃ (i : ι) (H : i ∈ t), U i"
        },
        {
          "sim_score": 0.65172278881073,
          "doc_string": " A set `s` is compact if and only if for every open cover of `s`, there exists a finite subcover.",
          "statement": "theorem is_compact_iff_finite_subcover {α : Type u} [topological_space α] {s : set α} : is_compact s ↔ ∀ {ι : Type u} (U : ι → set α), (∀ (i : ι), is_open (U i)) → (s ⊆ ⋃ (i : ι), U i) → (∃ (t : finset ι), s ⊆ ⋃ (i : ι) (H : i ∈ t), U i)"
        }
      ],
      "codex_time": 6.1293448169890326,
      "search_time": 1.4795987970137503,
      "use_theorem_name": false
    },
    "outputs": [
      "{α : type u} [TopologicalSpace α] (h : Nonempty α) (hs : Finite_TopologicalSpace α) : IsCompact (Univ : set α) ",
      "{α : type u} [TopologicalSpace α] (h : (Fintype α)) : IsCompact α ",
      "{α : type u} [TopologicalSpace α] (h₁ : Finite α) : IsCompact α ",
      "{α : type u} [TopologicalSpace α] (hαF : Fintype α) : IsCompact α ",
      "{α : type u} [TopologicalSpace α] (hα : Nonempty α) : IsCompact α "
    ],
    "answer": "{X : Type _}[TopologicalSpace X][Finite X] : CompactSpace X "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "finite_space_compact",
      "main_prompt": "Every finite topological space is compact",
      "prompt": "Natural language version: \"Every finite topological space is compact\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 6.154093182994984,
      "use_theorem_name": false
    },
    "outputs": [
      "Finite_IsCompact (x : type*) [TopologicalSpace x] [Fintype x] : CompactSpace x ",
      "TotallyBoundedImpliesCompact (x : type) [t : TopologicalSpace x] :    (∀ (ε : ℝ) (ε_Pos : 0 < ε), ∃ (U : set x), IsOpen U ∧ x ⊆ Closure U ) → IsCompact x ",
      "every_Finite_TopologicalSpace_IsCompact : ∀ (x : type) [TopologicalSpace x] [Fintype x], CompactSpace x ",
      "IsCompact_iff_IsCompact_of_Finite (x : type*) [TopologicalSpace x] : IsCompact x ↔ Finite x ",
      "every_Finite_TopologicalSpace_IsCompact :     ∀ (x : type*) [TopologicalSpace x], Finite x → CompactSpace x   -/  %tactic_ lemma sudoku (x : type*) [TopologicalSpace x] (n : ℕ) :      (∃ (x : x), x.val = n) → ∃ (x : x), x.val ≥ n   "
    ],
    "answer": "{X : Type _}[TopologicalSpace X][Finite X] : CompactSpace X "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "freegroup_hopfian",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"Every surjective homomorphism from a finitely generated free group to itself is injective\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "Every surjective homomorphism from a finitely generated free group to itself is injective",
      "codex_time": 8.908651261008345,
      "use_theorem_name": false
    },
    "outputs": [
      "(G : type*) [Group G] (n : ℕ) [fg : Fintype (Fin n)]  (γ : free_Group (Fin n) →* G) (hγ : surjective γ) : injective γ ",
      "(G : type*) [Group G] (hG : Fintype (free_Group.carrier G))  (F : free_Group G →* G) (hF : Function.Injective F) :  Function.Surjective F ",
      "(F : type u) [free_Group F] [Fintype F] (F : F → F) (hF : _surjective F)  (hF_hom : ∀ A B : F, F (A * B) = F A * F B) :  _injective F ",
      "(N : type) [Group N] [_finitely_generated N] [_free N]  (ϕ : N → N) (hϕ : Function.Surjective ϕ) (hϕ_homo : Function.Injective ϕ) :  Function.Injective ϕ ",
      "(G : type*) [Group G] [Fintype G] [DecidableEq G] [_Group_hom (F₁ : G → G)] [surjective F₁] : injective F₁ "
    ],
    "answer": "{α : Type _} [Finite α]: (f: FreeGroup α → FreeGroup α) → (IsGroupHom f) → f.Surjective → f.Injective "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "freegroup_hopfian",
      "main_prompt": "Every surjective homomorphism from a finitely generated free group to itself is injective",
      "prompt": "Natural language version: \"The canonical injection from the type to the free group is an injection.\" Translate the natural language version to a Lean mathlib version:\n theorem {α : Type u} :\nfunction.injective free_group.of := \n\nNatural language version: \"A group homomorphism is injective iff its kernel is trivial.\" Translate the natural language version to a Lean mathlib version:\n theorem {α : Type u} {β : Type v} [group α] [group β] {f : α → β} (hf : is_group_hom f) :\nfunction.injective f ↔ ∀ (a : α), f a = 1 → a = 1 := \n\nNatural language version: \" Two homomorphisms out of a free group are equal if they are equal on generators.  See note [partially-applied ext lemmas].\" Translate the natural language version to a Lean mathlib version:\n theorem {α : Type u} {G : Type u_1} [group G] (f g : free_group α →* G) (h : ∀ (a : α), ⇑f (free_group.of a) = ⇑g (free_group.of a)) :\nf = g := \n\nNatural language version: \"The range of a surjective homomorphism from a nilpotent group is nilpotent\" Translate the natural language version to a Lean mathlib version:\n theorem {G : Type u_1} [group G] {G' : Type u_2} [group G'] [h : group.is_nilpotent G] (f : G →* G') (hf : function.surjective ⇑f) :\ngroup.is_nilpotent G' := \n\nNatural language version: \"Every surjective homomorphism from a finitely generated free group to itself is injective\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.6470739841461182,
          "doc_string": "The canonical injection from the type to the free group is an injection.",
          "statement": "theorem free_group.of_injective {α : Type u} : function.injective free_group.of"
        },
        {
          "sim_score": 0.6357327103614807,
          "doc_string": "A group homomorphism is injective iff its kernel is trivial.",
          "statement": "theorem is_group_hom.injective_iff {α : Type u} {β : Type v} [group α] [group β] {f : α → β} (hf : is_group_hom f) : function.injective f ↔ ∀ (a : α), f a = 1 → a = 1"
        },
        {
          "sim_score": 0.5912977457046509,
          "doc_string": " Two homomorphisms out of a free group are equal if they are equal on generators.  See note [partially-applied ext lemmas].",
          "statement": "theorem free_group.ext_hom {α : Type u} {G : Type u_1} [group G] (f g : free_group α →* G) (h : ∀ (a : α), ⇑f (free_group.of a) = ⇑g (free_group.of a)) : f = g"
        },
        {
          "sim_score": 0.5858901143074036,
          "doc_string": "The range of a surjective homomorphism from a nilpotent group is nilpotent",
          "statement": "theorem nilpotent_of_surjective {G : Type u_1} [group G] {G' : Type u_2} [group G'] [h : group.is_nilpotent G] (f : G →* G') (hf : function.surjective ⇑f) : group.is_nilpotent G'"
        }
      ],
      "codex_time": 4.3753448179923,
      "search_time": 1.483718688978115,
      "use_theorem_name": false
    },
    "outputs": [
      "{α : type u} {β : type v} [Group β] {F : free_Group α →* β} (hF : Function.Surjective ⇑F) : Function.Injective ⇑F ",
      "{α : type u} {G : type u_1} [Group G] (F : free_Group α →* G) (hF : Function.Surjective ⇑F) : Function.Injective ⇑F ",
      "{α : type u} {G : free_Group α} (h : ∃ S : set α, Finite S ∧ G = Closure S) {h' : type u_1} [Group h'] (F : G →* h') (hF : Function.Surjective ⇑F) : Function.Injective ⇑F ",
      "{α : type u_1} [Fintype α] {F : free_Group α →* free_Group α} (hF : Function.Surjective ⇑F) : Function.Injective F ",
      "{α : type u} {G : type u_1} [Group G] (F : free_Group α →* G) (h₁ : Function.Surjective F) (h₂ : ∃ (t : Finset α), _Basis ↑t) : Function.Injective F "
    ],
    "answer": "{α : Type _} [Finite α]: (f: FreeGroup α → FreeGroup α) → (IsGroupHom f) → f.Surjective → f.Injective "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "freegroup_hopfian",
      "main_prompt": "Every surjective homomorphism from a finitely generated free group to itself is injective",
      "prompt": "Natural language version: \"Every surjective homomorphism from a finitely generated free group to itself is injective\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 8.291480947984383,
      "use_theorem_name": false
    },
    "outputs": [
      "surj_hom_free_Group_inj_on_fg (G : type*) [_inst_1 : Fintype G] [_inst_2 : DecidableEq G] [Group G]     [Fintype (free_Group G)] (S : set (free_Group G)) [_Subgroup S]     (F : free_Group G →* G) [_surjective F] (h : F.Ker ≤ S) :   _injective (Ker_Restrict F S) ",
      "t3 : Π (G : type*) [finitely_generated_Group G] [_free G]      (F : G → G), injective F → surjective F → injective F ",
      "surjective_homomorphism_of_free_Group_injective (F : Π₁( G )) (fg : Fin_gen S) {A} {A : A}          (surj : Function.Surjective ( F : Π₁( G ) → Π₁( G ))) : injective F ",
      "injective_hom {α β : type*} [comm_Group α] [comm_Group β]  (F : α → β) [_surjective F] : _injective F ",
      "every_surjective_homomorphism_from_finitely_generated_free_Group_to_itself__injective : ∀  S : type u_1 , ∀  G : type u_1 , ∀  h : type u_1 , Fintype S → Group G → Group h → ( Π ( g : G ), Fintype ( coset g G )) → ( Π ( x y : G ), x ≠ y → ( Π ( g : G ), coset g G ≃ coset ( g • x ) G ) ∧ ( Π ( g : G ), coset g G ≃ coset ( g • y"
    ],
    "answer": "{α : Type _} [Finite α]: (f: FreeGroup α → FreeGroup α) → (IsGroupHom f) → f.Surjective → f.Injective "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "polys_unbounded",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"Every polynomial of positive degree over reals is unbounded.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "Every polynomial of positive degree over reals is unbounded.",
      "codex_time": 9.514002912008436,
      "use_theorem_name": false
    },
    "outputs": [
      "(A : ℝ) (n : ℕ) (h : 0 < n) :  ∃ x : ℝ, ∀ y : ℝ, (∀ (i : Fin n) (A : ℝ), (A i) * (y ^ i.val) - (Sum i in Fin n, (A i) * (x ^ i.val))) ≠ 0 ",
      "(P : Polynomial ℝ) (hp : Polynomial.deg P > 0) :  ∀ x : ℝ, ∃ y : ℝ, y > x ∧ P.Eval y > P.Eval x ",
      "(P : Real→ℝ) [Polynomial P] (h : 0 < degree P) :  ∃ C : ℝ, ∀ x : ℝ, ∥P x∥ > C ",
      "(P : ℝ) {n : ℕ} (hn : 0 < n) :  ∃ x : ℝ, Abs P < Abs x^n ",
      "(F : ℝ → ℝ) [Polynomial F] (h : Nat.degree F > 0) :  ∀ m : ℝ, ∃ x : ℝ, ∥F x∥ ≥ m "
    ],
    "answer": "(p: Polynomial ℝ) : p.degree > 0 → ∀ m: ℝ, ∃ x: ℝ, p.eval x  > m ∨ p.eval x < -m  "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "polys_unbounded",
      "main_prompt": "Every polynomial of positive degree over reals is unbounded.",
      "prompt": "Natural language version: \"An alternative statement of Weierstrass' theorem.  Every real-valued continuous function on `[a,b]` is a uniform limit of polynomials.\" Translate the natural language version to a Lean mathlib version:\n theorem (a b : ℝ) (f : C(↥(set.Icc a b), ℝ)) :\nf ∈ (polynomial_functions (set.Icc a b)).topological_closure := \n\nNatural language version: \"The degree of a product of polynomials is at most the sum of the degrees, where the degree of the zero polynomial is ⊥.\" Translate the natural language version to a Lean mathlib version:\n theorem {R : Type u} [comm_semiring R] (t : multiset (polynomial R)) :\nt.prod.degree ≤ (multiset.map polynomial.degree t).sum := \n\nNatural language version: \"The **Weierstrass Approximation Theorem**: polynomials functions on `[a, b] ⊆ ℝ` are dense in `C([a,b],ℝ)`  (While we could deduce this as an application of the Stone-Weierstrass theorem, our proof of that relies on the fact that `abs` is in the closure of polynomials on `[-M, M]`, so we may as well get this done first.)\" Translate the natural language version to a Lean mathlib version:\n theorem (a b : ℝ) :\n(polynomial_functions (set.Icc a b)).topological_closure = ⊤ := \n\nNatural language version: \" The monomial function `x^n` tends to `+∞` at `+∞` for any positive natural `n`. A version for positive real powers exists as `tendsto_rpow_at_top`.\" Translate the natural language version to a Lean mathlib version:\n theorem {α : Type u_3} [ordered_semiring α] {n : ℕ} (hn : 1 ≤ n) :\nfilter.tendsto (λ (x : α), x ^ n) filter.at_top filter.at_top := \n\nNatural language version: \"Every polynomial of positive degree over reals is unbounded.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.5175106525421143,
          "doc_string": "An alternative statement of Weierstrass' theorem.  Every real-valued continuous function on `[a,b]` is a uniform limit of polynomials.",
          "statement": "theorem continuous_map_mem_polynomial_functions_closure (a b : ℝ) (f : C(↥(set.Icc a b), ℝ)) : f ∈ (polynomial_functions (set.Icc a b)).topological_closure"
        },
        {
          "sim_score": 0.5134747624397278,
          "doc_string": "The degree of a product of polynomials is at most the sum of the degrees, where the degree of the zero polynomial is ⊥.",
          "statement": "theorem polynomial.degree_multiset_prod_le {R : Type u} [comm_semiring R] (t : multiset (polynomial R)) : t.prod.degree ≤ (multiset.map polynomial.degree t).sum"
        },
        {
          "sim_score": 0.5014804005622864,
          "doc_string": "The **Weierstrass Approximation Theorem**: polynomials functions on `[a, b] ⊆ ℝ` are dense in `C([a,b],ℝ)`  (While we could deduce this as an application of the Stone-Weierstrass theorem, our proof of that relies on the fact that `abs` is in the closure of polynomials on `[-M, M]`, so we may as well get this done first.)",
          "statement": "theorem polynomial_functions_closure_eq_top (a b : ℝ) : (polynomial_functions (set.Icc a b)).topological_closure = ⊤"
        },
        {
          "sim_score": 0.48543989658355713,
          "doc_string": " The monomial function `x^n` tends to `+∞` at `+∞` for any positive natural `n`. A version for positive real powers exists as `tendsto_rpow_at_top`.",
          "statement": "theorem filter.tendsto_pow_at_top {α : Type u_3} [ordered_semiring α] {n : ℕ} (hn : 1 ≤ n) : filter.tendsto (λ (x : α), x ^ n) filter.at_top filter.at_top"
        }
      ],
      "codex_time": 8.425400767999236,
      "search_time": 1.4346691030077636,
      "use_theorem_name": false
    },
    "outputs": [
      "{α : type u_1} [discrete_Linear_ordered_Field α] (P : Polynomial α) : 0 < P.degree → ∃ (u v : α), u < v ∧ ∀ (n : ℕ), (Polynomial.Eval_on P v) n > n ",
      "(P : ℝ[x]) : _Unbounded_Left (set P.Range) ",
      "{R : type u} [Linear_ordered_Field R] (P : Polynomial R) (hp : 0 < P.Nat_degree) : ∃ x, ∀ y, y < P.Nat_degree → ∃ C, P.Eval ⟨y, h.LT_Succ_self y⟩ ≤ C * P.Eval ⟨x, h.LT_Succ_self x⟩ ",
      "{α : type u_3} [discrete_Field α] (F : Polynomial α) (hF : 0 < F.degree) : ∃ (P : P(ℝ)) (q : ℝ), ∀ n : ℝ, n ≥ P → (Abs(Polynomial.Eval n F)) ≥ q ",
      "{α : type u_4} [Decidable_Linear_ordered_CommRing α] {P : Polynomial α} (hp : 0 < P.degree) : ¬ (BddAbove (Polynomial.Range P.Coeff_Multiset)) "
    ],
    "answer": "(p: Polynomial ℝ) : p.degree > 0 → ∀ m: ℝ, ∃ x: ℝ, p.eval x  > m ∨ p.eval x < -m  "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "polys_unbounded",
      "main_prompt": "Every polynomial of positive degree over reals is unbounded.",
      "prompt": "Natural language version: \"Every polynomial of positive degree over reals is unbounded.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 9.196454343997175,
      "use_theorem_name": false
    },
    "outputs": [
      "every_Polynomial_of_positive_degree_over_reals__Unbounded (i : ℕ) (h : i > 0 ) : ∀ (P : Polynomial ℝ) , ∃ y : ℝ , ∀ x : ℝ, (Polynomial.Eval₂ x y P) > i ",
      "{MPolyPositive} Unbounded_Polynomial' {R : type} [Field R] {D : ℕ} (hp : D > 0) (hc : ∀ C : R, ∃ x, Polynomial R D C x) : False ",
      "_Unbounded (n : ℕ) (F : Polynomial ℝ) [P : degree F > 0] : ∃ A, ∀ B≥A, ∃ x:ℝ, |x^n| F x ≥ B .   example : _Unbounded 3 (1 + 3*x^2) ",
      "Nat_Language : Unbounded (λ n, 1 / n) ",
      "Poly_Unbounded (n : ℕ) (P : Polynomial ℝ) : P.Nat_degree > n → ∀ x, ∃ y, y > x ∧ Abs(P.Eval y) > Abs (P.Eval x) "
    ],
    "answer": "(p: Polynomial ℝ) : p.degree > 0 → ∀ m: ℝ, ∃ x: ℝ, p.eval x  > m ∨ p.eval x < -m  "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "field_hom_inj_or_trivial",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"A homomorphism between fields is either injective or trivial.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "A homomorphism between fields is either injective or trivial.",
      "codex_time": 6.165453321998939,
      "use_theorem_name": false
    },
    "outputs": [
      "(F G : type*) [Field F] [Field G]  (F : F → G) (hom : _Ring_hom F) :  injective F ∨ F = 0 ",
      "(α β : type*)  [Field α] [Field β] (F : α → β) [_AddGroup_hom F] [_AddMonoid_hom F]  [_Monoid_hom F] (h : F 1 = 1) :  (Function.Injective F) ∨ ∀ x : α, F x = 0 ",
      "(K L : type*) [Field K] [Field L] (g : K → L) [_Ring_hom g] :  injective g ∨ g = 0 ",
      "(α : type*) [Field α] (F : α → α) [_Ring_hom F] :  Function.Injective F ∨ ∀ x : α, F x = 0 ",
      "(F K : type*) [Field F] [Field K] (h : F → K) [_Ring_hom h]  (h_inj : ∀ x y, h x = h y → x = y) : Function.Injective h "
    ],
    "answer": "{F F' : Type _} [Field F] [Field F'] : ∀ ϕ : F →+* F', ϕ.toFun.Injective ∨ (∀ x : F, ϕ x = 0) "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "field_hom_inj_or_trivial",
      "main_prompt": "A homomorphism between fields is either injective or trivial.",
      "prompt": "Natural language version: \"A group homomorphism is injective iff its kernel is trivial.\" Translate the natural language version to a Lean mathlib version:\n theorem {α : Type u} {β : Type v} [group α] [group β] {f : α → β} (hf : is_group_hom f) :\nfunction.injective f ↔ ∀ (a : α), f a = 1 → a = 1 := \n\nNatural language version: \"If two ring homomorphisms are equal on a set, then they are equal on its subfield closure.\" Translate the natural language version to a Lean mathlib version:\n theorem {K : Type u} {L : Type v} [field K] [field L] {f g : K →+* L} {s : set K} (h : set.eq_on ⇑f ⇑g s) :\nset.eq_on ⇑f ⇑g ↑(subfield.closure s) := \n\nNatural language version: \"A monomorphism is injective.\" Translate the natural language version to a Lean mathlib version:\n theorem {R : Type u_1} {R₂ : Type u_3} {M : Type u_9} {M₂ : Type u_12} [semiring R] [semiring R₂] [add_comm_monoid M] [add_comm_monoid M₂] [module R M] [module R₂ M₂] {τ₁₂ : R →+* R₂} {f : M →ₛₗ[τ₁₂] M₂} (h : ∀ (u v : ↥(f.ker) →ₗ[R] M), f.comp u = f.comp v → u = v) :\nf.ker = ⊥ := \n\nNatural language version: \"An additive group homomorphism is injective if its kernel is trivial.\" Translate the natural language version to a Lean mathlib version:\n theorem {α : Type u} {β : Type v} [add_group α] [add_group β] {f : α → β} (hf : is_add_group_hom f) :\nfunction.injective f ↔ ∀ (a : α), f a = 0 → a = 0 := \n\nNatural language version: \"A homomorphism between fields is either injective or trivial.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.6868539452552795,
          "doc_string": "A group homomorphism is injective iff its kernel is trivial.",
          "statement": "theorem is_group_hom.injective_iff {α : Type u} {β : Type v} [group α] [group β] {f : α → β} (hf : is_group_hom f) : function.injective f ↔ ∀ (a : α), f a = 1 → a = 1"
        },
        {
          "sim_score": 0.6491084694862366,
          "doc_string": "If two ring homomorphisms are equal on a set, then they are equal on its subfield closure.",
          "statement": "theorem ring_hom.eq_on_field_closure {K : Type u} {L : Type v} [field K] [field L] {f g : K →+* L} {s : set K} (h : set.eq_on ⇑f ⇑g s) : set.eq_on ⇑f ⇑g ↑(subfield.closure s)"
        },
        {
          "sim_score": 0.6350299715995789,
          "doc_string": "A monomorphism is injective.",
          "statement": "theorem linear_map.ker_eq_bot_of_cancel {R : Type u_1} {R₂ : Type u_3} {M : Type u_9} {M₂ : Type u_12} [semiring R] [semiring R₂] [add_comm_monoid M] [add_comm_monoid M₂] [module R M] [module R₂ M₂] {τ₁₂ : R →+* R₂} {f : M →ₛₗ[τ₁₂] M₂} (h : ∀ (u v : ↥(f.ker) →ₗ[R] M), f.comp u = f.comp v → u = v) : f.ker = ⊥"
        },
        {
          "sim_score": 0.6343168020248413,
          "doc_string": "An additive group homomorphism is injective if its kernel is trivial.",
          "statement": "theorem is_add_group_hom.injective_iff {α : Type u} {β : Type v} [add_group α] [add_group β] {f : α → β} (hf : is_add_group_hom f) : function.injective f ↔ ∀ (a : α), f a = 0 → a = 0"
        }
      ],
      "codex_time": 9.296392163989367,
      "search_time": 1.4474918549822178,
      "use_theorem_name": false
    },
    "outputs": [
      "{F : type u} {F₂ : type v} [Field F] [Field F₂] {τ : F →+* F₂} (h : ∀ (u v : ↥(τ.Ker) →ₗ[F] F), τ.Comp u = τ.Comp v → u = v) : Function.Injective τ ∨ τ = 0 ",
      "{α : type u} {β : type v} [Field α] [Field β] {F : α →+* β} : Function.Injective F ∨ F = 0 ",
      "{K : type u} {L : type v} [Field K] [Field L] {F : K →+* L} : Function.Injective F ∨ F = 0 ",
      "{K : type u_1} (L : type v_1) [Field K] [Field L] {F : K →+* L} (hF : _Ring_hom F) : Setoid.injective F ⊕ ∀ (A : K), F A = 0 ",
      "{α : type u} {β : type v} [Field α] [Field β] {F : α → β} (hF : _Monoid_hom F) : Function.Injective F ∨ ∀ (A : α), F A = 0 "
    ],
    "answer": "{F F' : Type _} [Field F] [Field F'] : ∀ ϕ : F →+* F', ϕ.toFun.Injective ∨ (∀ x : F, ϕ x = 0) "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "field_hom_inj_or_trivial",
      "main_prompt": "A homomorphism between fields is either injective or trivial.",
      "prompt": "Natural language version: \"A homomorphism between fields is either injective or trivial.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 12.863167470000917,
      "use_theorem_name": false
    },
    "outputs": [
      "ffield_hom.injective_or_trivial_of_injective_on_carrier (F : α →+* β) ( hF : Function.Injective F.ToFun) : F.injective ∨ trivial  theorem ffield_hom.inj_Eq_0_of_inj_on_carrier (F : α →+* β) ( hF : Function.Injective F.ToFun) : injective F → F = 0 ",
      "homomorphism_between_fields__injective_or_trivial {m: type*} [Field m]    {N: type*} [Field N] (F: m → N): injective F ∨ F = Monoid_hom.Id ",
      "(u : FieldHom U F) (inj : injective u) :    ∀ (v : FieldHom U F) (hom : ∀ x : U, v x = u x), v = u  | v hom ",
      "_Field_hom.inj_or_triv (hF : Field β) (hF : Field F) (h : hom β F hF hF) :    (λ A, ∃ B, h A = B • 1) ∨ (∀ A : β, h A = 0) ",
      "_not_injective_then__trivial :  ∀ F₁ F₂ : type u₁,  (∀ A B C D : F₁, A + B = C + D → A = C ∧ B = D) →  (∀ A B : F₁, A * B = 0 → A = 0 ∨ B = 0) →  ∀ (φ : F₁ → F₂) (h₁ : ∀ A B : F₁, φ A = φ B → A = B),  optional_decl (Int_hom_ext"
    ],
    "answer": "{F F' : Type _} [Field F] [Field F'] : ∀ ϕ : F →+* F', ϕ.toFun.Injective ∨ (∀ x : F, ϕ x = 0) "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "noetherian_implies_ascending_chain_condition",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"Every ascending chain of sub-modules of a Noetherian module eventually stabilises.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "Every ascending chain of sub-modules of a Noetherian module eventually stabilises.",
      "codex_time": 12.659880203020293,
      "use_theorem_name": false
    },
    "outputs": [
      "(R : type*) [CommRing R] (m : type*) [AddCommGroup m] [module R m] (hM : noetherian_module R m) (A : type*) [PartialOrder A] (F : A → Submodule R m) (hF : ∀ (x y : A), x ≤ y → F x ≤ F y) : ∃ x, F x = ⋃₀ (Range $ λ y : A, F y) ",
      "(m : type*) [AddCommGroup m] [module ℤ m]  (hM : IsNoetherian_module ℤ m) (n : ℕ) (F : Fin n → Submodule ℤ m)  (hF : ∀ (i j : ℕ) (h : i < j) (h' : j < n.Succ), F i < F j) :  ∃ (N : ℕ) (N_LT : N < n.Succ),  ∀ (i : ℕ) (i_LT : i < n.Succ), i ≥ N → F i = F N",
      "(A : type*) [noetherian_Ring A] (m : type*) [AddCommGroup m] [module A m]  (B : ℕ → Submodule A m) (h_asc : ∀ n, B n ⊆ B (n+1)) :  ∃ N : ℕ, ∀ n, B n = B (N+n) ",
      "(R : type*) [CommRing R] {m : type*} [module R m]  (hM : IsNoetherian_module R m) (x : List (Submodule R m)) (hx : _ascending x) :  x ≠ List.Nil → ∃ n : ℕ, x.nth_LE n hx = x.nth_LE (n+1) hx ",
      "(m : type*) [AddCommGroup m] [module ℤ m]  (hn : noetherian ℤ m) : ∀ (x : set m) (hX : chains._upper_bound x) (hX_chain : ∀ N ∈ x,  chains._upper_bound (λ (Z : set m), ∃ {m : m} (h : m ∈ N), Z = ⋃ i, (λ n:ℕ, n • m) '' { n | n ≤ i } )) (hX_in_x : x ⊆ chains.powerset m),  ∃"
    ],
    "answer": "{R M : Type _} [Ringₓ R] [AddCommMonoidₓ M] [Module R M] : IsNoetherian R M → ∀ (f : ℕ →o Submodule R M), ∃ n : ℕ, ∀ m : ℕ, n < m → f n = f m "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "noetherian_implies_ascending_chain_condition",
      "main_prompt": "Every ascending chain of sub-modules of a Noetherian module eventually stabilises.",
      "prompt": "Natural language version: \"A module is Noetherian iff every increasing chain of submodules stabilizes.\" Translate the natural language version to a Lean mathlib version:\n theorem {R : Type u_1} {M : Type u_2} [semiring R] [add_comm_monoid M] [module R M] :\n(∀ (f : ℕ →o submodule R M), ∃ (n : ℕ), ∀ (m : ℕ), n ≤ m → ⇑f n = ⇑f m) ↔ is_noetherian R M := \n\nNatural language version: \"A module is Artinian iff every decreasing chain of submodules stabilizes.\" Translate the natural language version to a Lean mathlib version:\n theorem {R : Type u_1} {M : Type u_2} [ring R] [add_comm_group M] [module R M] :\n(∀ (f : ℕ →o (submodule R M)ᵒᵈ), ∃ (n : ℕ), ∀ (m : ℕ), n ≤ m → ⇑f n = ⇑f m) ↔ is_artinian R M := \n\nNatural language version: \"A generalization of the theorem that if `N` is a submodule of `M` and  `N` and `M / N` are both Noetherian, then `M` is Noetherian.\" Translate the natural language version to a Lean mathlib version:\n theorem {α : Type u_1} [lattice α] [is_modular_lattice α] {β : Type u_2} {γ : Type u_3} [preorder β] [partial_order γ] (h₁ : well_founded gt) (h₂ : well_founded gt) (K : α) (f₁ : β → α) (f₂ : α → β) (g₁ : γ → α) (g₂ : α → γ) (gci : galois_coinsertion f₁ f₂) (gi : galois_insertion g₂ g₁) (hf : ∀ (a : α), f₁ (f₂ a) = a ⊓ K) (hg : ∀ (a : α), g₁ (g₂ a) = a ⊔ K) :\nwell_founded gt := \n\nNatural language version: \"An R-module is Noetherian iff all its submodules are finitely-generated.\" Translate the natural language version to a Lean mathlib version:\n theorem {R : Type u_1} {M : Type u_2} [semiring R] [add_comm_monoid M] [module R M] :\nis_noetherian R M ↔ ∀ (s : submodule R M), s.fg := \n\nNatural language version: \"Every ascending chain of sub-modules of a Noetherian module eventually stabilises.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.9016166925430298,
          "doc_string": "A module is Noetherian iff every increasing chain of submodules stabilizes.",
          "statement": "theorem monotone_stabilizes_iff_noetherian {R : Type u_1} {M : Type u_2} [semiring R] [add_comm_monoid M] [module R M] : (∀ (f : ℕ →o submodule R M), ∃ (n : ℕ), ∀ (m : ℕ), n ≤ m → ⇑f n = ⇑f m) ↔ is_noetherian R M"
        },
        {
          "sim_score": 0.7797067761421204,
          "doc_string": "A module is Artinian iff every decreasing chain of submodules stabilizes.",
          "statement": "theorem monotone_stabilizes_iff_artinian {R : Type u_1} {M : Type u_2} [ring R] [add_comm_group M] [module R M] : (∀ (f : ℕ →o (submodule R M)ᵒᵈ), ∃ (n : ℕ), ∀ (m : ℕ), n ≤ m → ⇑f n = ⇑f m) ↔ is_artinian R M"
        },
        {
          "sim_score": 0.698657751083374,
          "doc_string": "A generalization of the theorem that if `N` is a submodule of `M` and  `N` and `M / N` are both Noetherian, then `M` is Noetherian.",
          "statement": "theorem well_founded_gt_exact_sequence {α : Type u_1} [lattice α] [is_modular_lattice α] {β : Type u_2} {γ : Type u_3} [preorder β] [partial_order γ] (h₁ : well_founded gt) (h₂ : well_founded gt) (K : α) (f₁ : β → α) (f₂ : α → β) (g₁ : γ → α) (g₂ : α → γ) (gci : galois_coinsertion f₁ f₂) (gi : galois_insertion g₂ g₁) (hf : ∀ (a : α), f₁ (f₂ a) = a ⊓ K) (hg : ∀ (a : α), g₁ (g₂ a) = a ⊔ K) : well_founded gt"
        },
        {
          "sim_score": 0.6557018756866455,
          "doc_string": "An R-module is Noetherian iff all its submodules are finitely-generated.",
          "statement": "theorem is_noetherian_def {R : Type u_1} {M : Type u_2} [semiring R] [add_comm_monoid M] [module R M] : is_noetherian R M ↔ ∀ (s : submodule R M), s.fg"
        }
      ],
      "codex_time": 11.324376939010108,
      "search_time": 1.4521226090146229,
      "use_theorem_name": false
    },
    "outputs": [
      "{R : type u_1} {m : type u_2} [Semiring R] [AddCommMonoid m] [module R m] (h : IsNoetherian R m) (F : ℕ →o Submodule R m) : ∃ (n : ℕ), ∀ (m : ℕ), n ≤ m → ⇑F n = ⇑F m ",
      "{R : type u_1} {m : type u_2} [Semiring R] [AddCommMonoid m] [module R m] : IsNoetherian R m → ∀ (F : ℕ →o Submodule R m), ∃ (n : ℕ), ∀ (m : ℕ), n ≤ m → ⇑F n = ⇑F m ",
      "{R : type u_1} {m : type u_2} [Semiring R] [AddCommMonoid m] [module R m] (h : IsNoetherian R m) (F : ℕ → Submodule R m) : ∃ (n : ℕ) (x y : Submodule R m), ∀ (m : ℕ), n ≤ m → x = y ",
      "{R : type u_1} {m : type u_2} [Semiring R] [AddCommMonoid m] [module R m] (F : ℕ →o Submodule R m) (hF : ∀ (D : ℕ), (F D).fg) : ¬({n : ℕ // F n < F (n + 1)} ≠ ∅)  Natural Language version: \"Every descending chain of sub-modules of an Artinian module eventually stabilises.\" Translate the natural Language version to A Lean mathlib version:  theorem {R : type u_1} {m : type u_2} [Semiring R",
      "{R : type u_1} {m : type u_2} [Semiring R] [AddCommMonoid m] [module R m] (h : IsNoetherian R m) (F : ℕ →o Submodule R m) : ∃ (n : ℕ), ∀ (m : ℕ), n ≤ m → ⇑F n = ⇑F m "
    ],
    "answer": "{R M : Type _} [Ringₓ R] [AddCommMonoidₓ M] [Module R M] : IsNoetherian R M → ∀ (f : ℕ →o Submodule R M), ∃ n : ℕ, ∀ m : ℕ, n < m → f n = f m "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "noetherian_implies_ascending_chain_condition",
      "main_prompt": "Every ascending chain of sub-modules of a Noetherian module eventually stabilises.",
      "prompt": "Natural language version: \"Every ascending chain of sub-modules of a Noetherian module eventually stabilises.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 8.207776368013583,
      "use_theorem_name": false
    },
    "outputs": [
      "ascending_chain_of_Submodule_of_Noetherian_module_eventually_stabilises' (R : type*) [CommRing R]    (A : set R) (m : type*) [AddCommGroup m] [module R m] (h : noetherian (Submodule.Subtype R A m)) :    ∀ C : type u, Cardinal.Mk C → ∃ C : set (Submodule.Subtype R A m), ∀ D : set (Submodule.Subtype R A m), C ⊆ D →    D ∈ Fin_submodules_of_Submodule_of_Noether",
      "Noetherian.ascending_chain_stabilises {R : type*} [CommRing R] {m : type*} [AddCommGroup m] [module R m] [_Noetherian R m] (C : chain (Submodule R m)) : _strictly_ascending R C → False ",
      "fn (A : type) [CommRing A] (m : type) [module A m] [noetherian_module A m]      (N : set m) (hn : _Submodule N m) (hn_nest : ∀ (N' : set m), _Submodule N' N → N' ≤ N) :      ∃ N' : set m, _Submodule N' m ∧ N' ≤ N ",
      "every_asc_chain_of_submodules_stabilizes (m : type) [AddCommGroup m] [module R m] [noetherian_Add m]:   ∀ C : set (set m), (∀ Uf t ∈ C, Uf ⊆ t) → ∃ Uf ∈ C, ∀ t ∈ C, Uf ⊆ t ",
      "chain_stabilises {R : type*} [CommRing R] (m : module R)    (Hnoeth : Noetherian m.to_module) :  Π S : set (Submodule m.to_module), Directed S → chain S → ∃ m ∈ S, ∀ m' ∈ S, m ⊆ m' → m = m'  IsChain, induced_set and chain are defined here:  https://github.com/leanprover/mathlib/blob/master/data/set/basic.lean#L561  The Right proof should be easy:  def chain_stabilises {"
    ],
    "answer": "{R M : Type _} [Ringₓ R] [AddCommMonoidₓ M] [Module R M] : IsNoetherian R M → ∀ (f : ℕ →o Submodule R M), ∃ n : ℕ, ∀ m : ℕ, n < m → f n = f m "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "differentiability_implies_continuity",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"Differentiability implies continuity.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "Differentiability implies continuity.",
      "codex_time": 6.9072370039939415,
      "use_theorem_name": false
    },
    "outputs": [
      "(F : ℝ → ℝ) (hF : times_ContDiff_on ℝ F) :  Continuous_on ℝ F ",
      "(F : ℝ → ℝ) (hF : deriv F) : Continuous F ",
      "(x : type*) [TopologicalSpace x] (Y : type*) [TopologicalSpace Y] {F : x → Y} {A : x}  (hF : Differentiable_at 𝕜 x Y F A) :  Continuous_at F A ",
      "{F : E → F}  (hF : Differentiable_at 𝕜 F A) :  Continuous_at 𝕜 F A ",
      "(F : ℝ → ℝ) (F' : ℝ → ℝ) (hF' : deriv_within ℝ F F' (set.Univ)) :  Continuous_on F (set.Univ) "
    ],
    "answer": "[TopologicalSpace ℝ] : ∀ f : ℝ → ℝ, Differentiable ℝ f → Continuous f "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "differentiability_implies_continuity",
      "main_prompt": "Differentiability implies continuity.",
      "prompt": "Natural language version: \"If a function is locally Lipschitz around a point, then it is continuous at this point.\" Translate the natural language version to a Lean mathlib version:\n theorem {α : Type u} {β : Type v} [pseudo_metric_space α] [pseudo_metric_space β] {f : α → β} {x : α} {r : ℝ} (hr : 0 < r) (K : ℝ) (h : ∀ (y : α), has_dist.dist y x < r → has_dist.dist (f y) (f x) ≤ K * has_dist.dist y x) :\ncontinuous_at f x := \n\nNatural language version: \" If a function is differentiable on the right of a point `a : ℝ`, continuous at `a`, and its derivative also converges at `a`, then `f` is differentiable on the right at `a`.\" Translate the natural language version to a Lean mathlib version:\n theorem {E : Type u_1} [normed_group E] [normed_space ℝ E] {s : set ℝ} {e : E} {a : ℝ} {f : ℝ → E} (f_diff : differentiable_on ℝ f s) (f_lim : continuous_within_at f s a) (hs : s ∈ nhds_within a (set.Ioi a)) (f_lim' : filter.tendsto (λ (x : ℝ), deriv f x) (nhds_within a (set.Ioi a)) (nhds e)) :\nhas_deriv_within_at f e (set.Ici a) a := \n\nNatural language version: \" If a function is differentiable on the left of a point `a : ℝ`, continuous at `a`, and its derivative also converges at `a`, then `f` is differentiable on the left at `a`.\" Translate the natural language version to a Lean mathlib version:\n theorem {E : Type u_1} [normed_group E] [normed_space ℝ E] {s : set ℝ} {e : E} {a : ℝ} {f : ℝ → E} (f_diff : differentiable_on ℝ f s) (f_lim : continuous_within_at f s a) (hs : s ∈ nhds_within a (set.Iio a)) (f_lim' : filter.tendsto (λ (x : ℝ), deriv f x) (nhds_within a (set.Iio a)) (nhds e)) :\nhas_deriv_within_at f e (set.Iic a) a := \n\nNatural language version: \"A Lipschitz function is continuous\" Translate the natural language version to a Lean mathlib version:\n theorem {α : Type u} {β : Type v} [pseudo_emetric_space α] [pseudo_emetric_space β] {K : nnreal} {f : α → β} (hf : lipschitz_with K f) :\ncontinuous f := \n\nNatural language version: \"Differentiability implies continuity.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.6264367699623108,
          "doc_string": "If a function is locally Lipschitz around a point, then it is continuous at this point.",
          "statement": "theorem continuous_at_of_locally_lipschitz {α : Type u} {β : Type v} [pseudo_metric_space α] [pseudo_metric_space β] {f : α → β} {x : α} {r : ℝ} (hr : 0 < r) (K : ℝ) (h : ∀ (y : α), has_dist.dist y x < r → has_dist.dist (f y) (f x) ≤ K * has_dist.dist y x) : continuous_at f x"
        },
        {
          "sim_score": 0.6016049981117249,
          "doc_string": " If a function is differentiable on the right of a point `a : ℝ`, continuous at `a`, and its derivative also converges at `a`, then `f` is differentiable on the right at `a`.",
          "statement": "theorem has_deriv_at_interval_left_endpoint_of_tendsto_deriv {E : Type u_1} [normed_group E] [normed_space ℝ E] {s : set ℝ} {e : E} {a : ℝ} {f : ℝ → E} (f_diff : differentiable_on ℝ f s) (f_lim : continuous_within_at f s a) (hs : s ∈ nhds_within a (set.Ioi a)) (f_lim' : filter.tendsto (λ (x : ℝ), deriv f x) (nhds_within a (set.Ioi a)) (nhds e)) : has_deriv_within_at f e (set.Ici a) a"
        },
        {
          "sim_score": 0.5962556600570679,
          "doc_string": " If a function is differentiable on the left of a point `a : ℝ`, continuous at `a`, and its derivative also converges at `a`, then `f` is differentiable on the left at `a`.",
          "statement": "theorem has_deriv_at_interval_right_endpoint_of_tendsto_deriv {E : Type u_1} [normed_group E] [normed_space ℝ E] {s : set ℝ} {e : E} {a : ℝ} {f : ℝ → E} (f_diff : differentiable_on ℝ f s) (f_lim : continuous_within_at f s a) (hs : s ∈ nhds_within a (set.Iio a)) (f_lim' : filter.tendsto (λ (x : ℝ), deriv f x) (nhds_within a (set.Iio a)) (nhds e)) : has_deriv_within_at f e (set.Iic a) a"
        },
        {
          "sim_score": 0.5795943737030029,
          "doc_string": "A Lipschitz function is continuous",
          "statement": "theorem lipschitz_with.continuous {α : Type u} {β : Type v} [pseudo_emetric_space α] [pseudo_emetric_space β] {K : nnreal} {f : α → β} (hf : lipschitz_with K f) : continuous f"
        }
      ],
      "codex_time": 13.302136803016765,
      "search_time": 1.4399381499970332,
      "use_theorem_name": false
    },
    "outputs": [
      "{E : type u_1} [NormedGroup E] [NormedSpace ℝ E] {S : set ℝ} {A : ℝ} {F : ℝ → E} (F_Diff : DifferentiableOn ℝ F S) (ha : A ∈ S) : Continuous_on ℝ F (set.icc A A) ",
      "{E : type u_1} [NormedGroup E] [NormedSpace ℝ E] {F : ℝ → E} {A : ℝ} (hF : Differentiable_at ℝ F A) : Continuous_at F A ",
      "{E : type u_1} [NormedGroup E] [NormedSpace ℝ E] {S : set ℝ} {A : ℝ} {F : ℝ → E} (hF : ∀ (x : ℝ), x ∈ S → HasDerivAt F (F x)) (hs : IsOpen S) (hF' : Continuous_Restrict (Finsupp.Total (Univ : Finset ℝ) F) S) : Continuous (Finsupp.Total (Univ : Finset ℝ) F) ",
      "{E : type u_1} [NormedGroup E] [NormedSpace ℝ E] {A : ℝ} {F : ℝ → E} (hn : _deriv_at F A) : Continuous_at F A ",
      "{α : type u} [TopologicalSpace α] [MetricSpace α] {β : type v} {F : α → β} {x : α} (hF : Differentiable_at α β F x) : Continuous_at F x "
    ],
    "answer": "[TopologicalSpace ℝ] : ∀ f : ℝ → ℝ, Differentiable ℝ f → Continuous f "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "differentiability_implies_continuity",
      "main_prompt": "Differentiability implies continuity.",
      "prompt": "Natural language version: \"Differentiability implies continuity.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 9.579682253010105,
      "use_theorem_name": false
    },
    "outputs": [
      "Diff_to_Cont : Differentiable α β ι F → Continuous α β F ",
      "Differentiable_imp_Continuous_at_within (S : set E) (F : E → F) (x : E) (df : E → F) :    Differentiable_at_within F x S df → Continuous_at_within F x S ",
      "differentiability_imp_continuity (F : ℝ → ℝ) {x : ℝ} (hF : Differentiable_at F x) : Continuous_at F x ",
      "Diff_imp_Cont' {F : ℝ → ℝ} {A : ℝ} (hfderiv : Differentiable F A) : Continuous F A. done) end  ----  -- (You could probably show the other way here too but the first One  better)  /-  ## 13. For all x, ∀ x, F′(x) ≥ 0 → F(x) ≥ F(0)  -/  section thirteenth  theorem allx_diffgeq0impliesfxgeq0 (F : ℝ → ℝ) (hfderiv : ∀ x, F'",
      "F_Differentiable_at_Some_x_impl_Continuous_at_x (F : ℝ → ℝ) (hb : B > A) :    ((∃ h : Differentiable_at ℝ F (at_Right A hb), True) →  BddAbove_on F (ioc A hb)) "
    ],
    "answer": "[TopologicalSpace ℝ] : ∀ f : ℝ → ℝ, Differentiable ℝ f → Continuous f "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "angle_sum_pi",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"The angles of a triangle add up to two right angles.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "The angles of a triangle add up to two right angles.",
      "codex_time": 6.153305271000136,
      "use_theorem_name": false
    },
    "outputs": [
      ": ∀ (α β γ : angle (𝐙/4)), α + β + γ = 2 * 𝐑 ",
      "(α β γ : angle)  (hα : angle._Right α) (hβ : angle._half_Pi β) (hγ : angle._half_Pi γ) :  angle.Add α (angle.Add β γ) = angle.Right ",
      "(A B C : ℝ) (h_cos₁ : -1 ≤ cos A) (h_cos₂ : -1 ≤ cos B) (h_cos₃ : -1 ≤ cos C)  (h_cos₁_LE : cos A ≤ 1) (h_cos₂_LE : cos B ≤ 1) (h_cos₃_LE : cos C ≤ 1) :  A + B + C = 2* π ",
      "(A B C : ℝ) (h : (A > 0) ∧ (B > 0) ∧ (C > 0) ∧  (A + B > C) ∧ (B + C > A) ∧ (C + A > B)) :  A + B + C = π ",
      "(A B C : ℝ) (h : A ^ 2 + B ^ 2 = C ^ 2) : B = A*C + B*C → A + B = C "
    ],
    "answer": "{p q r : EuclideanSpace ℝ (Finₓ 2)} : EuclideanGeometry.angle p q r + EuclideanGeometry.angle q r p + EuclideanGeometry.angle r p q = Real.pi "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "angle_sum_pi",
      "main_prompt": "The angles of a triangle add up to two right angles.",
      "prompt": "Natural language version: \" If the angle between two vectors is π, the angles between those vectors and a third vector add to π.\" Translate the natural language version to a Lean mathlib version:\n theorem {V : Type u_1} [inner_product_space ℝ V] {x y : V} (z : V) (h : inner_product_geometry.angle x y = real.pi) :\ninner_product_geometry.angle x z + inner_product_geometry.angle y z = real.pi := \n\nNatural language version: \" Vertical Angles Theorem: angles opposite each other, formed by two intersecting straight lines, are equal.\" Translate the natural language version to a Lean mathlib version:\n theorem {V : Type u_1} {P : Type u_2} [inner_product_space ℝ V] [metric_space P] [normed_add_torsor V P] {p1 p2 p3 p4 p5 : P} (hapc : euclidean_geometry.angle p1 p5 p3 = real.pi) (hbpd : euclidean_geometry.angle p2 p5 p4 = real.pi) :\neuclidean_geometry.angle p1 p5 p2 = euclidean_geometry.angle p3 p5 p4 := \n\nNatural language version: \" Given three nonzero vectors, adding the angles between them in cyclic order, with the second vector in each angle negated, results in π. If the vectors add to 0, this is a version of the sum of the angles of a triangle.\" Translate the natural language version to a Lean mathlib version:\n theorem {V : Type u_1} [inner_product_space ℝ V] {b : basis (fin 2) ℝ V} (hb : orthonormal ℝ ⇑b) {x y z : V} (hx : x ≠ 0) (hy : y ≠ 0) (hz : z ≠ 0) :\nhb.oangle x (-y) + hb.oangle y (-z) + hb.oangle z (-x) = ↑real.pi := \n\nNatural language version: \" Given three nonzero vectors, adding the angles between them in cyclic order, with the second vector in each angle negated, results in π. If the vectors add to 0, this is a version of the sum of the angles of a triangle.\" Translate the natural language version to a Lean mathlib version:\n theorem {V : Type u_1} [inner_product_space ℝ V] [hd2 : fact (finite_dimensional.finrank ℝ V = 2)] (o : orientation ℝ V (fin 2)) {x y z : V} (hx : x ≠ 0) (hy : y ≠ 0) (hz : z ≠ 0) :\no.oangle x (-y) + o.oangle y (-z) + o.oangle z (-x) = ↑real.pi := \n\nNatural language version: \"The angles of a triangle add up to two right angles.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.5743768215179443,
          "doc_string": " If the angle between two vectors is π, the angles between those vectors and a third vector add to π.",
          "statement": "theorem inner_product_geometry.angle_add_angle_eq_pi_of_angle_eq_pi {V : Type u_1} [inner_product_space ℝ V] {x y : V} (z : V) (h : inner_product_geometry.angle x y = real.pi) : inner_product_geometry.angle x z + inner_product_geometry.angle y z = real.pi"
        },
        {
          "sim_score": 0.5685725212097168,
          "doc_string": " Vertical Angles Theorem: angles opposite each other, formed by two intersecting straight lines, are equal.",
          "statement": "theorem euclidean_geometry.angle_eq_angle_of_angle_eq_pi_of_angle_eq_pi {V : Type u_1} {P : Type u_2} [inner_product_space ℝ V] [metric_space P] [normed_add_torsor V P] {p1 p2 p3 p4 p5 : P} (hapc : euclidean_geometry.angle p1 p5 p3 = real.pi) (hbpd : euclidean_geometry.angle p2 p5 p4 = real.pi) : euclidean_geometry.angle p1 p5 p2 = euclidean_geometry.angle p3 p5 p4"
        },
        {
          "sim_score": 0.5616596937179565,
          "doc_string": " Given three nonzero vectors, adding the angles between them in cyclic order, with the second vector in each angle negated, results in π. If the vectors add to 0, this is a version of the sum of the angles of a triangle.",
          "statement": "theorem orthonormal.oangle_add_cyc3_neg_right {V : Type u_1} [inner_product_space ℝ V] {b : basis (fin 2) ℝ V} (hb : orthonormal ℝ ⇑b) {x y z : V} (hx : x ≠ 0) (hy : y ≠ 0) (hz : z ≠ 0) : hb.oangle x (-y) + hb.oangle y (-z) + hb.oangle z (-x) = ↑real.pi"
        },
        {
          "sim_score": 0.5616596937179565,
          "doc_string": " Given three nonzero vectors, adding the angles between them in cyclic order, with the second vector in each angle negated, results in π. If the vectors add to 0, this is a version of the sum of the angles of a triangle.",
          "statement": "theorem orientation.oangle_add_cyc3_neg_right {V : Type u_1} [inner_product_space ℝ V] [hd2 : fact (finite_dimensional.finrank ℝ V = 2)] (o : orientation ℝ V (fin 2)) {x y z : V} (hx : x ≠ 0) (hy : y ≠ 0) (hz : z ≠ 0) : o.oangle x (-y) + o.oangle y (-z) + o.oangle z (-x) = ↑real.pi"
        }
      ],
      "codex_time": 11.767082732985727,
      "search_time": 1.4687023029837292,
      "use_theorem_name": false
    },
    "outputs": [
      "{v : type u_1} [InnerProductSpace ℝ v] {x y z : v} (h : InnerProductGeometry.angle x y + InnerProductGeometry.angle y z + InnerProductGeometry.angle z x = 2 * Real.Pi) : True ",
      "{v : type u_1} [InnerProductSpace ℝ v] [hD2 : Fact (Finite_dimensional.finrank ℝ v = 2)] {o : Orientation ℝ v (Fin 2)} {P1 P2 P3 : v} (h1 : angle P1 P2 P3 < angle P2 P3 P1) : o.oangle P1 P2 + o.oangle P2 P3 + o.oangle P3 P1 = 2 ",
      "{v : type u_1} [InnerProductSpace ℝ v] {B : Basis (Fin 2) ℝ v} (hb : Orthonormal ℝ ⇑B) {x y : v} (hx : x ≠ 0) (hy : y ≠ 0) : hb.oangle x (hb.orthoproj (x + y)) + hb.oangle y (-hb.orthoproj (x + y)) = ↑Real.Pi ",
      "{v : type u_1} [InnerProductSpace ℝ v] [hD3 : Fact (Finite_dimensional.finrank ℝ v = 3)] (o : Orientation ℝ v (Fin 3)) {x y z : v} (hx : x ≠ 0) (hy : y ≠ 0) (hz : z ≠ 0) : o.oangle x y + o.oangle y z + o.oangle z x = ↑Real.Pi * 2 ",
      "{v : type u_1} {P : type u_2} [InnerProductSpace ℝ v] [NormedAddTorsor v P] {P1 P2 P3 P5 : P} : 2*EuclideanGeometry.angle P1 P5 P3 + 2*EuclideanGeometry.angle P2 P5 P3 + 2*EuclideanGeometry.angle P1 P5 P2 = 2*Real.Pi "
    ],
    "answer": "{p q r : EuclideanSpace ℝ (Finₓ 2)} : EuclideanGeometry.angle p q r + EuclideanGeometry.angle q r p + EuclideanGeometry.angle r p q = Real.pi "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "angle_sum_pi",
      "main_prompt": "The angles of a triangle add up to two right angles.",
      "prompt": "Natural language version: \"The angles of a triangle add up to two right angles.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 8.175744519016007,
      "use_theorem_name": false
    },
    "outputs": [
      "q212142 (A B C : type*) (A : line A) (B : line B) (C : line C) [incident A.1 B.1 C.1] [incident B.1 C.1 A.1] [incident C.1 A.1 B.1]: True ",
      "Sum_of_angles__180_degrees :    ∀ A B C : triangle,     angle A + angle B + angle C = 2 * (∀α : angle, _Right α) ",
      "triangle_or_rigth ( A B C : ℝ ) : _triangle A B C ∨ _Right A B C ",
      "Nat lang : ∀ (A B C : ℝ), A^2 + B^2 = C^2 ↔ A + B + C = Pi ",
      "Add_angles_Eq_two_Right_angles : ∀ (A B C : angle), A + B + C = two_Right_angles "
    ],
    "answer": "{p q r : EuclideanSpace ℝ (Finₓ 2)} : EuclideanGeometry.angle p q r + EuclideanGeometry.angle q r p + EuclideanGeometry.angle r p q = Real.pi "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "goldbach",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"Every positive even integer can be written as the sum of two primes.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "Every positive even integer can be written as the sum of two primes.",
      "codex_time": 4.824600228021154,
      "use_theorem_name": false
    },
    "outputs": [
      "(n : ℕ) (hn : n > 0) (hE : ∃ k, 2 * k = n) :  ∃ P q, Prime P ∧ Prime q ∧ P + q = n ",
      "(n : ℕ) (h : 0 < n ∧ Even (n+1)) :  ∃ P q : ℕ, P.Prime ∧ q.Prime ∧ P+q = n ",
      "(n : ℕ) (h : 4 ∣ n) (hp : ¬ (∃ P q r, n = P*q*r)) :  ∃ P q, P.1 ∧ q.1 ∧ (P.2 = 2 ∨ q.2 = 2) ∧ P.2 ≠ q.2 ∧ n = P.2*q.2 ",
      "(n : ℕ) (hpos : 0 < n) (heven : Even n) :  ∃ (m n : ℕ), m < n ∧ m.Prime ∧ n.Prime ∧ m + n = n ",
      "(n : ℕ) (hn0 : 0 < n) (hn_Even : 2 ∣ n) :  ∃ P q : ℕ,   0 < P ∧ 2 ≠ P ∧ Prime P ∧ 0 < q ∧ 2 ≠ q ∧ Prime q ∧ n = P + q "
    ],
    "answer": ": ∀ n : ℕ, n > 0 → Even n → ∃ p q : ℕ, Prime p → Prime q → n = p + q "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "goldbach",
      "main_prompt": "Every positive even integer can be written as the sum of two primes.",
      "prompt": "Natural language version: \"A prime `p` satisfies `p % 2 = 1` if and only if `p ≠ 2`.\" Translate the natural language version to a Lean mathlib version:\n theorem {p : ℕ} [fact (nat.prime p)] :\np % 2 = 1 ↔ p ≠ 2 := \n\nNatural language version: \"If `p` is a prime factor of `a` then `p` is also a prime factor of `a * b` for any `b > 0`\" Translate the natural language version to a Lean mathlib version:\n theorem {p a b : ℕ} (hpa : p ∈ a.factors) (hb : b ≠ 0) :\np ∈ (a * b).factors := \n\nNatural language version: \"Every nonzero natural number has a unique prime factorization\" Translate the natural language version to a Lean mathlib version:\n theorem  :\nset.inj_on nat.factorization {x : ℕ | x ≠ 0} := \n\nNatural language version: \"The only numbers with empty prime factorization are `0` and `1`\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) :\nn.factorization = 0 ↔ n = 0 ∨ n = 1 := \n\nNatural language version: \"Every positive even integer can be written as the sum of two primes.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.5331833362579346,
          "doc_string": "A prime `p` satisfies `p % 2 = 1` if and only if `p ≠ 2`.",
          "statement": "theorem nat.prime.mod_two_eq_one_iff_ne_two {p : ℕ} [fact (nat.prime p)] : p % 2 = 1 ↔ p ≠ 2"
        },
        {
          "sim_score": 0.48720940947532654,
          "doc_string": "If `p` is a prime factor of `a` then `p` is also a prime factor of `a * b` for any `b > 0`",
          "statement": "theorem nat.mem_factors_mul_left {p a b : ℕ} (hpa : p ∈ a.factors) (hb : b ≠ 0) : p ∈ (a * b).factors"
        },
        {
          "sim_score": 0.48647668957710266,
          "doc_string": "Every nonzero natural number has a unique prime factorization",
          "statement": "theorem nat.factorization_inj  : set.inj_on nat.factorization {x : ℕ | x ≠ 0}"
        },
        {
          "sim_score": 0.4829321801662445,
          "doc_string": "The only numbers with empty prime factorization are `0` and `1`",
          "statement": "theorem nat.factorization_eq_zero_iff (n : ℕ) : n.factorization = 0 ↔ n = 0 ∨ n = 1"
        }
      ],
      "codex_time": 5.843470266001532,
      "search_time": 1.493072356999619,
      "use_theorem_name": false
    },
    "outputs": [
      "(P : ℕ) (hp : P ≥ 2): ∃P1 P2 : ℕ,    P1.Nat.Prime ∧ P2.Nat.Prime ∧ P1 + P2 = P ",
      "{n : ℕ}(hn : n ≠ 0) : ∃ P q : ℕ, P + q = n ∧ (Fact (Prime P)) ∧ (Fact (Prime q)) ∧ (Even n) ",
      "(n : ℕ) (h : n > 0) : ∃ A B : (Nat.Prime A) ∧ (Nat.Prime B) ",
      "(n P q : ℕ) (h : 0 < n ∧ n % 2 = 0) : n = P + q ∧ (Nat.Prime P) ∧ (Nat.Prime q) ",
      "(n : ℕ) (h : n ≥ 2 ∧ n % 2 = 0) : ∃ P q : ℕ, Nat.Prime P ∧ Nat.Prime q ∧ P + q = n "
    ],
    "answer": ": ∀ n : ℕ, n > 0 → Even n → ∃ p q : ℕ, Prime p → Prime q → n = p + q "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "goldbach",
      "main_prompt": "Every positive even integer can be written as the sum of two primes.",
      "prompt": "Natural language version: \"Every positive even integer can be written as the sum of two primes.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 6.856547880975995,
      "use_theorem_name": false
    },
    "outputs": [
      "goldbach_two_Prime (n : ℕ) : 2 ≤ n → ∃ P q : ℕ, Nat.Prime P ∧ Nat.Prime q ∧ 2*n = P+q ",
      "Goldbach : ∀ n : ℕ , n % 2 = 0 → ∃ P q : ℕ , n = P + q ∧ Prime P ∧ Prime q ",
      "Goldbach_mathlib : ∀ (n : ℕ), n = 0 → n = 1 → n = 2 → n = 3 → n = 6 → Even n → (∃ m P : ℕ, m ≠ 0 ∧ P ≠ 0 ∧ Even P ∧ Even m ∧ m <> P ∧ m*P = n ∧ n = m + P) ",
      "Goldbach : ∀ n:ℤ, n > 0 → ∃ P q : ℕ, Prime P ∧ Prime q ∧ P + q = ↑n ",
      ": ∀ n : ℕ, n % 2 = 0 → ∃ P q, Prime P ∧ Prime q ∧ n = P + q "
    ],
    "answer": ": ∀ n : ℕ, n > 0 → Even n → ∃ p q : ℕ, Prime p → Prime q → n = p + q "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "cayley_hamilton",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"Every matrix satisfies its own characteristic polynomial.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "Every matrix satisfies its own characteristic polynomial.",
      "codex_time": 11.110754669993185,
      "use_theorem_name": false
    },
    "outputs": [
      "(n : ℕ) (m : Matrix (Fin n) (Fin n) ℂ)  (P : Polynomial ℂ) (Hp : P m = 0) :  ∀ (x : ℂ) (hx : _eigenvector m x), P.Eval x = 0 ",
      "(A : Matrix n n R) :  monic_det A = characteristic A ",
      "(n : ℕ) (mat : Matrix (Fin n) (Fin n) ℂ) (A : ℂ) :   ∀ B, Polynomial.Eval B (Matrix.Char_Poly mat) A = 0 → A = B ",
      "(K : type*) [discrete_Field K] (n : type u) [Fintype n]  [DecidableEq n] (A : (Fin n × Fin n) → K) : det (λ i : Fin n × Fin n, A (i.1, i.2) • Char_Poly A x i.1 i.2) = Char_Poly A x ",
      "(n : ℕ) (A : Matrix (Fin n) (Fin n) ℂ)  (P : Polynomial ℂ) (h : ∀ z, P z = 0 ↔ z * Id_mat n - A = 0) :  P (A.trace) = 0 "
    ],
    "answer": "{R : Type _} [CommRingₓ R] {n : Type _} [DecidableEq n] [Fintype n] (M : Matrix n n R) : (Polynomial.aeval M) M.charpoly = 0 "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "cayley_hamilton",
      "main_prompt": "Every matrix satisfies its own characteristic polynomial.",
      "prompt": "Natural language version: \" The **Cayley-Hamilton Theorem**, that the characteristic polynomial of a linear map, applied to the linear map itself, is zero.  See `matrix.aeval_self_charpoly` for the equivalent statement about matrices.\" Translate the natural language version to a Lean mathlib version:\n theorem {R : Type u} {M : Type v} [comm_ring R] [nontrivial R] [add_comm_group M] [module R M] [module.free R M] [module.finite R M] (f : M →ₗ[R] M) :\n⇑(polynomial.aeval f) f.charpoly = 0 := \n\nNatural language version: \"The **Cayley-Hamilton Theorem**, that the characteristic polynomial of a matrix, applied to the matrix itself, is zero.  This holds over any commutative ring.  See `linear_map.aeval_self_charpoly` for the equivalent statement about endomorphisms.\" Translate the natural language version to a Lean mathlib version:\n theorem {R : Type u} [comm_ring R] {n : Type w} [decidable_eq n] [fintype n] (M : matrix n n R) :\n⇑(polynomial.aeval M) M.charpoly = 0 := \n\nNatural language version: \"`charpoly f` is the characteristic polynomial of the matrix of `f` in any basis.\" Translate the natural language version to a Lean mathlib version:\n theorem {R : Type u} {M : Type v} [comm_ring R] [nontrivial R] [add_comm_group M] [module R M] [module.free R M] [module.finite R M] (f : M →ₗ[R] M) {ι : Type w} [fintype ι] (b : basis ι R M) :\n(⇑(linear_map.to_matrix b b) f).charpoly = f.charpoly := \n\nNatural language version: \" Any matrix polynomial `p` is equivalent under evaluation to `p %ₘ M.charpoly`; that is, `p` is equivalent to a polynomial with degree less than the dimension of the matrix.\" Translate the natural language version to a Lean mathlib version:\n theorem {R : Type u} [comm_ring R] {n : Type v} [decidable_eq n] [fintype n] (M : matrix n n R) (p : polynomial R) :\n⇑(polynomial.aeval M) p = ⇑(polynomial.aeval M) (p %ₘ M.charpoly) := \n\nNatural language version: \"Every matrix satisfies its own characteristic polynomial.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.7601779699325562,
          "doc_string": " The **Cayley-Hamilton Theorem**, that the characteristic polynomial of a linear map, applied to the linear map itself, is zero.  See `matrix.aeval_self_charpoly` for the equivalent statement about matrices.",
          "statement": "theorem linear_map.aeval_self_charpoly {R : Type u} {M : Type v} [comm_ring R] [nontrivial R] [add_comm_group M] [module R M] [module.free R M] [module.finite R M] (f : M →ₗ[R] M) : ⇑(polynomial.aeval f) f.charpoly = 0"
        },
        {
          "sim_score": 0.6756272315979004,
          "doc_string": "The **Cayley-Hamilton Theorem**, that the characteristic polynomial of a matrix, applied to the matrix itself, is zero.  This holds over any commutative ring.  See `linear_map.aeval_self_charpoly` for the equivalent statement about endomorphisms.",
          "statement": "theorem matrix.aeval_self_charpoly {R : Type u} [comm_ring R] {n : Type w} [decidable_eq n] [fintype n] (M : matrix n n R) : ⇑(polynomial.aeval M) M.charpoly = 0"
        },
        {
          "sim_score": 0.5441092252731323,
          "doc_string": "`charpoly f` is the characteristic polynomial of the matrix of `f` in any basis.",
          "statement": "theorem linear_map.charpoly_to_matrix {R : Type u} {M : Type v} [comm_ring R] [nontrivial R] [add_comm_group M] [module R M] [module.free R M] [module.finite R M] (f : M →ₗ[R] M) {ι : Type w} [fintype ι] (b : basis ι R M) : (⇑(linear_map.to_matrix b b) f).charpoly = f.charpoly"
        },
        {
          "sim_score": 0.5268839001655579,
          "doc_string": " Any matrix polynomial `p` is equivalent under evaluation to `p %ₘ M.charpoly`; that is, `p` is equivalent to a polynomial with degree less than the dimension of the matrix.",
          "statement": "theorem matrix.aeval_eq_aeval_mod_charpoly {R : Type u} [comm_ring R] {n : Type v} [decidable_eq n] [fintype n] (M : matrix n n R) (p : polynomial R) : ⇑(polynomial.aeval M) p = ⇑(polynomial.aeval M) (p %ₘ M.charpoly)"
        }
      ],
      "codex_time": 5.290859720989829,
      "search_time": 1.4968492100015283,
      "use_theorem_name": false
    },
    "outputs": [
      "{R : type u} [CommRing R] {n : type W} [DecidableEq n] [Fintype n] (m : Matrix n n R) : m.charpoly.Eval₂ m = 0 ",
      "{R : type u} [CommRing R] {n : type v} [DecidableEq n] [Fintype n] (m : Matrix n n R) (P : Polynomial R) : P = 0 ∨ P = m.charpoly ↔ (P %ₘ m.charpoly).Eval m = 0 ",
      "{R : type u} [CommRing R] {n : type v} [DecidableEq n] [Fintype n] (m : Matrix n n R) : m.charpoly.Eval m = 0 ",
      "{R : type u} [CommRing R] (m : integral_IsDomain R) {n : type v} [DecidableEq n] [Fintype n] (m : Matrix n n R) : m.charpoly.Eval m 0 = 0 ",
      "{R : type u} [CommRing R] {n : type v} [DecidableEq n] [Fintype n] (m : Matrix n n R) {P : Polynomial R} : m.charpoly = P ↔ Matrix_mx R m (P.Eval₂ = *(≠)) m "
    ],
    "answer": "{R : Type _} [CommRingₓ R] {n : Type _} [DecidableEq n] [Fintype n] (M : Matrix n n R) : (Polynomial.aeval M) M.charpoly = 0 "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "cayley_hamilton",
      "main_prompt": "Every matrix satisfies its own characteristic polynomial.",
      "prompt": "Natural language version: \"Every matrix satisfies its own characteristic polynomial.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 8.867336855008034,
      "use_theorem_name": false
    },
    "outputs": [
      "True1: (∀ A : m n, A) → True ",
      "characteristic_Polynomial_self :  ∀ {n : ℕ} (A : Matrix (Fin n) (Fin n) ℚ),  characteristic_Polynomial A = 0 ",
      "characteristic_Polynomial_apply (n:ℕ) (A: Matrix (Fin n) (Fin n) ℚ): characteristic_Polynomial A = A -- If we make the definition of Matrix, then we can use the Poly_apply defintion to fill in the missing =A from above. def Poly_apply (A:type) [CommRing A] (L:List A) (x:A) ",
      "C (A : Matrix (Fin 1) (Fin 1) ℂ) : characteristic_Polynomial A = [1, -(A 0 0)] ",
      "hensel_lemma_special_version (R : type*) [CommRing R] (m : Matrix R 5 5) :∃ C : Matrix R 5 5, C * m = m * C "
    ],
    "answer": "{R : Type _} [CommRingₓ R] {n : Type _} [DecidableEq n] [Fintype n] (M : Matrix n n R) : (Polynomial.aeval M) M.charpoly = 0 "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "sqrt_of_irrat_irrat",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"The square root of an irrational number is irrational.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "The square root of an irrational number is irrational.",
      "codex_time": 6.699135800998192,
      "use_theorem_name": false
    },
    "outputs": [
      "(x : ℝ) (hx2 : x^2∉ ℚ) :  √ x ∉ ℚ ",
      "(x : ℝ) (hx_irrat : ¬ _rat x) :    ∀ y, y ^ 2 = x → ¬ _rat y ",
      "(A : ℝ) (ha0 : 0 < A) (ha_irr : ∃ q : ℕ, ∃ P : ℕ, q * q * P * P = A) :  ∀ B : ℝ, ∃ r : ℝ, ∀ A, A * A = r * r → A = B ",
      "(x : ℝ) (hx : ∥x∥ x > 0 ∧ ¬ ∃ y : ℚ, ∥x∥ = y^2) :  ¬ ∃ y : ℚ, ∥√∥x∥∥ = y ",
      "(A : ℝ) (ha : A ≠ 0)   (h : ¬ ∃ x, x^2 = A) :    ∀ x : ℝ, x^2 = A → x = 0 "
    ],
    "answer": "(x : ℝ) : Irrational x → Irrational (Real.sqrt x) "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "sqrt_of_irrat_irrat",
      "main_prompt": "The square root of an irrational number is irrational.",
      "prompt": "Natural language version: \"A transcendental real number is irrational.\" Translate the natural language version to a Lean mathlib version:\n theorem {r : ℝ} (tr : transcendental ℚ r) :\nirrational r := \n\nNatural language version: \" If `x^n`, `n > 0`, is integer and is not the `n`-th power of an integer, then `x` is irrational.\" Translate the natural language version to a Lean mathlib version:\n theorem {x : ℝ} (n : ℕ) (m : ℤ) (hxr : x ^ n = ↑m) (hv : ¬∃ (y : ℤ), x = ↑y) (hnpos : 0 < n) :\nirrational x := \n\nNatural language version: \"**Irrationality of the Square Root of 2**\" Translate the natural language version to a Lean mathlib version:\n theorem  :\nirrational (real.sqrt 2) := \n\nNatural language version: \"The natural square root is at most the real square root\" Translate the natural language version to a Lean mathlib version:\n theorem {a : ℕ} :\n↑(nat.sqrt a) ≤ real.sqrt ↑a := \n\nNatural language version: \"The square root of an irrational number is irrational.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.70249342918396,
          "doc_string": "A transcendental real number is irrational.",
          "statement": "theorem transcendental.irrational {r : ℝ} (tr : transcendental ℚ r) : irrational r"
        },
        {
          "sim_score": 0.6819822192192078,
          "doc_string": " If `x^n`, `n > 0`, is integer and is not the `n`-th power of an integer, then `x` is irrational.",
          "statement": "theorem irrational_nrt_of_notint_nrt {x : ℝ} (n : ℕ) (m : ℤ) (hxr : x ^ n = ↑m) (hv : ¬∃ (y : ℤ), x = ↑y) (hnpos : 0 < n) : irrational x"
        },
        {
          "sim_score": 0.6707029938697815,
          "doc_string": "**Irrationality of the Square Root of 2**",
          "statement": "theorem irrational_sqrt_two  : irrational (real.sqrt 2)"
        },
        {
          "sim_score": 0.6412547826766968,
          "doc_string": "The natural square root is at most the real square root",
          "statement": "theorem real.nat_sqrt_le_real_sqrt {a : ℕ} : ↑(nat.sqrt a) ≤ real.sqrt ↑a"
        }
      ],
      "codex_time": 3.5490879860008135,
      "search_time": 1.4941794150217902,
      "use_theorem_name": false
    },
    "outputs": [
      "{x : ℝ} (irx : Irrational x) : Irrational (Real.sqrt x) ",
      "{x : ℝ} (hxr : Irrational x) : Irrational (Real.sqrt x) ",
      "{A : ℕ} (IH :  Irrational (Real.sqrt ↑A)) : Irrational ↑(Nat.sqrt A) ",
      "{x : ℝ} (hxr : Irrational x) : Irrational (Real.sqrt x) ",
      "{x : ℝ} (irr : Irrational x) : Irrational (Real.sqrt x) "
    ],
    "answer": "(x : ℝ) : Irrational x → Irrational (Real.sqrt x) "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "sqrt_of_irrat_irrat",
      "main_prompt": "The square root of an irrational number is irrational.",
      "prompt": "Natural language version: \"The square root of an irrational number is irrational.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 6.418318103009369,
      "use_theorem_name": false
    },
    "outputs": [
      "sq_irr_irr       {A : ℝ} {B : ℚ} (h : A * B = sqrt A * sqrt B) : A*B = sqrt A * sqrt B ",
      "Irrational_root_Irrational (t : ℝ) (h : t.sqrt.Irrational) :      t.Irrational  proof    intro ht__rat,    have : t.sqrt ∈ ℚ ",
      "sqrt_Irrational_Irrational {α : type} [discrete_Field α] (x : α) (hx : ¬ IsSquare x) : ¬ IsSquare √x ",
      "irr_sqrt (x : ℚ) : x ≠ 0 → Irrational x → Irrational (sqrt x) ",
      "q_sqrt_Irrational : ∀ {x : ℚ}, x._Irrational → (x ^ 2).sqrt._Irrational "
    ],
    "answer": "(x : ℝ) : Irrational x → Irrational (Real.sqrt x) "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "sq_even_implies_num_even",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"If the square of a number is even, the number itself is even.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "If the square of a number is even, the number itself is even.",
      "codex_time": 6.299675221001962,
      "use_theorem_name": false
    },
    "outputs": [
      "(n : ℕ) (hn : n * n % 2 = 0) : 0 ≤ n ",
      "(n : ℕ) (h : 2^n = 2*m) : 2*(2^n) = 2*2*m ",
      "(n : ℕ) (hn : 2 * n ∈ Even) :  n ∈ Even ",
      "(x : ℕ) (hx : 2 ∣ x*x) : 2 ∣ x ",
      "(n : Nat) (h : Even (n^2)) : Even n "
    ],
    "answer": ": ∀ n : ℕ, Even (n^2) → Even n "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "sq_even_implies_num_even",
      "main_prompt": "If the square of a number is even, the number itself is even.",
      "prompt": "Natural language version: \" If `m` and `n` are natural numbers, then the natural number `m^n` is even if and only if `m` is even and `n` is positive.\" Translate the natural language version to a Lean mathlib version:\n theorem {m n : ℕ} :\neven (m ^ n) ↔ even m ∧ n ≠ 0 := \n\nNatural language version: \"The sum of two squares is zero iff both elements are zero.\" Translate the natural language version to a Lean mathlib version:\n theorem {α : Type u} [linear_ordered_ring α] {x y : α} :\nx * x + y * y = 0 ↔ x = 0 ∧ y = 0 := \n\nNatural language version: \"In a finite field of odd characteristic, not every element is a square.\" Translate the natural language version to a Lean mathlib version:\n theorem {F : Type u_3} [field F] [fintype F] (hF : ring_char F ≠ 2) :\n∃ (a : F), ¬is_square a := \n\nNatural language version: \" To show a property is true on the even or odd part, it suffices to show it is true on the scalars or vectors (respectively), closed under addition, and under left-multiplication by a pair of vectors.\" Translate the natural language version to a Lean mathlib version:\n theorem {R : Type u_1} {M : Type u_2} [comm_ring R] [add_comm_group M] [module R M] (Q : quadratic_form R M) (n : zmod 2) {P : Π (x : clifford_algebra Q), x ∈ clifford_algebra.even_odd Q n → Prop} (hr : ∀ (v : clifford_algebra Q) (h : v ∈ (clifford_algebra.ι Q).range ^ n.val), P v _) (hadd : ∀ {x y : clifford_algebra Q} {hx : x ∈ clifford_algebra.even_odd Q n} {hy : y ∈ clifford_algebra.even_odd Q n}, P x hx → P y hy → P (x + y) _) (hιι_mul : ∀ (m₁ m₂ : M) {x : clifford_algebra Q} {hx : x ∈ clifford_algebra.even_odd Q n}, P x hx → P (⇑(clifford_algebra.ι Q) m₁ * ⇑(clifford_algebra.ι Q) m₂ * x) _) (x : clifford_algebra Q) (hx : x ∈ clifford_algebra.even_odd Q n) :\nP x hx := \n\nNatural language version: \"If the square of a number is even, the number itself is even.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.5731519460678101,
          "doc_string": " If `m` and `n` are natural numbers, then the natural number `m^n` is even if and only if `m` is even and `n` is positive.",
          "statement": "theorem nat.even_pow {m n : ℕ} : even (m ^ n) ↔ even m ∧ n ≠ 0"
        },
        {
          "sim_score": 0.5604414343833923,
          "doc_string": "The sum of two squares is zero iff both elements are zero.",
          "statement": "theorem mul_self_add_mul_self_eq_zero {α : Type u} [linear_ordered_ring α] {x y : α} : x * x + y * y = 0 ↔ x = 0 ∧ y = 0"
        },
        {
          "sim_score": 0.546607255935669,
          "doc_string": "In a finite field of odd characteristic, not every element is a square.",
          "statement": "theorem finite_field.exists_nonsquare {F : Type u_3} [field F] [fintype F] (hF : ring_char F ≠ 2) : ∃ (a : F), ¬is_square a"
        },
        {
          "sim_score": 0.5101829767227173,
          "doc_string": " To show a property is true on the even or odd part, it suffices to show it is true on the scalars or vectors (respectively), closed under addition, and under left-multiplication by a pair of vectors.",
          "statement": "theorem clifford_algebra.even_odd_induction {R : Type u_1} {M : Type u_2} [comm_ring R] [add_comm_group M] [module R M] (Q : quadratic_form R M) (n : zmod 2) {P : Π (x : clifford_algebra Q), x ∈ clifford_algebra.even_odd Q n → Prop} (hr : ∀ (v : clifford_algebra Q) (h : v ∈ (clifford_algebra.ι Q).range ^ n.val), P v _) (hadd : ∀ {x y : clifford_algebra Q} {hx : x ∈ clifford_algebra.even_odd Q n} {hy : y ∈ clifford_algebra.even_odd Q n}, P x hx → P y hy → P (x + y) _) (hιι_mul : ∀ (m₁ m₂ : M) {x : clifford_algebra Q} {hx : x ∈ clifford_algebra.even_odd Q n}, P x hx → P (⇑(clifford_algebra.ι Q) m₁ * ⇑(clifford_algebra.ι Q) m₂ * x) _) (x : clifford_algebra Q) (hx : x ∈ clifford_algebra.even_odd Q n) : P x hx"
        }
      ],
      "codex_time": 8.593759972980479,
      "search_time": 1.7009556770208292,
      "use_theorem_name": false
    },
    "outputs": [
      "{α : type u} [integral_IsDomain α] (A : α) : Even ((A : ℤ)^2) → Even A ",
      "{R : type u} [CommRing R] (r : R) : _Even (r * r) → _Even r ",
      "{m : ℕ} (h : Even (m * m)) : Even m ",
      "{α : type u_1} {m n : ℕ} [Linear_OrderedSemiring α] (hmn : (m ^ 2) * (n ^ (2 : ℕ)) = 0) : 2 ∣ m ^ 2 ∧ 2 ∣ n ^ 2 ",
      "{R : type u} [Ring R] (A : R) (h2mem : 2 ∈ units R) : _Even (A * A) → _Even A "
    ],
    "answer": ": ∀ n : ℕ, Even (n^2) → Even n "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "sq_even_implies_num_even",
      "main_prompt": "If the square of a number is even, the number itself is even.",
      "prompt": "Natural language version: \"If the square of a number is even, the number itself is even.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 10.38675956899533,
      "use_theorem_name": false
    },
    "outputs": [
      "square_Even (n : ℕ) : Even n → Even (n * n) ",
      "q28 (n : ℕ): Even (n^2) → Even n ",
      "if_square_Even_number_Even : ∀ m : ℕ, m ^ 2 % 2 = 0 → m % 2 = 0 ",
      "square_Even : ∃ (n : ℕ), n ^ 2 % 2 = 0  using tactic_. If A natural Language version  unclear, be sure to Add your own interpretation of the mathematical statement.    /-- If A ∈ B → C, then A ∈ B → (B∩C) -/ lemma and_of_Implies (A B C : Prop) :   (A → B) → (A → (B ∧ C)) ",
      "Even_square_iff_Even (n : ℕ) : Nat.Even (n^2) ↔ Nat.Even n "
    ],
    "answer": ": ∀ n : ℕ, Even (n^2) → Even n "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "finite_ring_prime_implies_maximal",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"In a finite commutative ring, all prime ideals are maximal.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "In a finite commutative ring, all prime ideals are maximal.",
      "codex_time": 7.978997197991703,
      "use_theorem_name": false
    },
    "outputs": [
      "(R : type*) [CommRing R] (h : Fintype R)  (P : set R) (_Ideal : Ideal P)  (Prime : Prime P) : Maximal P ",
      "(R : type*) [CommRing R] [Fintype R] (i : Ideal R)  (P : Prime_Ideal i) :  IsMaximal_Ideal i ",
      "(R : type*) [CommRing R] (hRf : Fintype R) (P : Ideal R) (P_Prime : Prime P) :  Ideal.Maximal P ",
      "(R : type*) [Ring R][Fintype R] (m P : Ideal R) [Prime P]  (hm : ∀ m ∈ m, m ≠ 0 → ∃ P ∈ P, m = P) :   m = Ideal.Span P ",
      "(R : type*) [CommRing R] [Fd_Char_P R]  (P : Ideal R) (hp : Prime P) : Maximal P "
    ],
    "answer": "{R : Type _} [CommRingₓ R] [Fintype R] : ∀ (Idl : Ideal R), Idl.IsPrime → Idl.IsMaximal "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "finite_ring_prime_implies_maximal",
      "main_prompt": "In a finite commutative ring, all prime ideals are maximal.",
      "prompt": "Natural language version: \"When a ring is not a field, the maximal ideals are nontrivial.\" Translate the natural language version to a Lean mathlib version:\n theorem {R : Type u_1} [comm_ring R] [nontrivial R] {M : ideal R} (max : M.is_maximal) (not_field : ¬is_field R) :\nM ≠ ⊥ := \n\nNatural language version: \"Krull's theorem: a nontrivial ring has a maximal ideal.\" Translate the natural language version to a Lean mathlib version:\n theorem (α : Type u) [semiring α] [nontrivial α] :\n∃ (M : ideal α), M.is_maximal := \n\nNatural language version: \"If P is not properly contained in any maximal ideal then it is not properly contained  in any proper ideal\" Translate the natural language version to a Lean mathlib version:\n theorem {R : Type u} [semiring R] {P : ideal R} (hmax : ∀ (m : ideal R), P < m → ¬m.is_maximal) (J : ideal R) (hPJ : P < J) :\nJ = ⊤ := \n\nNatural language version: \"If `P` is a prime ideal of `R`, then `P.R[x]` is a prime ideal of `R[x]`.\" Translate the natural language version to a Lean mathlib version:\n theorem {R : Type u} [comm_ring R] {P : ideal R} (H : P.is_prime) :\n(ideal.map polynomial.C P).is_prime := \n\nNatural language version: \"In a finite commutative ring, all prime ideals are maximal.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.6932713389396667,
          "doc_string": "When a ring is not a field, the maximal ideals are nontrivial.",
          "statement": "theorem ring.ne_bot_of_is_maximal_of_not_is_field {R : Type u_1} [comm_ring R] [nontrivial R] {M : ideal R} (max : M.is_maximal) (not_field : ¬is_field R) : M ≠ ⊥"
        },
        {
          "sim_score": 0.6569143533706665,
          "doc_string": "Krull's theorem: a nontrivial ring has a maximal ideal.",
          "statement": "theorem ideal.exists_maximal (α : Type u) [semiring α] [nontrivial α] : ∃ (M : ideal α), M.is_maximal"
        },
        {
          "sim_score": 0.6307719945907593,
          "doc_string": "If P is not properly contained in any maximal ideal then it is not properly contained  in any proper ideal",
          "statement": "theorem ideal.maximal_of_no_maximal {R : Type u} [semiring R] {P : ideal R} (hmax : ∀ (m : ideal R), P < m → ¬m.is_maximal) (J : ideal R) (hPJ : P < J) : J = ⊤"
        },
        {
          "sim_score": 0.6226035356521606,
          "doc_string": "If `P` is a prime ideal of `R`, then `P.R[x]` is a prime ideal of `R[x]`.",
          "statement": "theorem ideal.is_prime_map_C_of_is_prime {R : Type u} [comm_ring R] {P : ideal R} (H : P.is_prime) : (ideal.map polynomial.C P).is_prime"
        }
      ],
      "codex_time": 5.820907569985138,
      "search_time": 1.4874710789881647,
      "use_theorem_name": false
    },
    "outputs": [
      "{R : type u} [CommRing R] [Fintype R] (i : Ideal R) (h : ∀ P : Ideal R, P ≤ i → P.Prime → P = i ∨ P = ⊥) : i.IsMaximal ",
      "{R : type u} [CommRing R] (h : Fintype R) : ∀ P : Ideal R, P.Prime → P.IsMaximal ",
      "{R : type u} [CommRing R] [Fintype R] {P : Ideal R} (h : P.Prime) : P.IsMaximal ",
      "{R : type u} [CommRing R] [Fintype R] {P : Ideal R} (Prime : P.Prime) : P.IsMaximal ",
      "{R : type u} [CommRing R] [Fintype R] (P : Ideal R) (h : P.Prime) : P.IsMaximal "
    ],
    "answer": "{R : Type _} [CommRingₓ R] [Fintype R] : ∀ (Idl : Ideal R), Idl.IsPrime → Idl.IsMaximal "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "finite_ring_prime_implies_maximal",
      "main_prompt": "In a finite commutative ring, all prime ideals are maximal.",
      "prompt": "Natural language version: \"In a finite commutative ring, all prime ideals are maximal.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 8.307035503996303,
      "use_theorem_name": false
    },
    "outputs": [
      "Finite_CommRing_Prime_ideals_are_Maximal { R : type } [ CommRing R ] [ Finite_dimensional R ] :   ∀ i : Ideal R, Prime i → Maximal i ",
      "Finite_integral_IsDomain_Prime_Ideal_IsMaximal : todo (G) Move to Mathlib section.   -- Def. 9.3. A Ring R  A Boolean Ring if  -- (A) R  A commutative Ring,  -- (B) 1 + 1 = 0 and 0 + 1 = 1,  -- (C) x∈ R, if and only if, 1 + x = 1.   -- Important examples are: (ℤ2 , +mod2, *mod2), (ℚ, +, ⋅) and ((0, 1), +, ⋅). We will call these --",
      "Fin_CommRing_all_Primes_are_Maximal (R : type*) [CommRing R] (Hfin : IsNoetherian_Ring R) : all_Primes_are_Maximal R ",
      "exists_max_Prime ( R : type ) [ integral_IsDomain R ] : ∃ A : Ideal R , A . Prime ∧ ∃ x : Ideal R , x . Maximal ∧ x = A ",
      "lemma1 ( R : type ) [ Ring R ] : Finite R →   ∀ x , Prime R x → Maximal R x . Translate the Lean mathlib version to A computer science version:  def lemma1 ( R : type ) [ Ring R ] : Finite R →    ∀ x , Prime R x → Maximal R x . You can now run lemma1 as follows:  run_cmd tactic_.trace.run_tactic_ $ lemma1 .  The formal proof above was obtained using the [Lean] framework. The formal proof itself  included in [this file]. Please see the paper for A version which  more human readable.  Almost everything in A Lean file"
    ],
    "answer": "{R : Type _} [CommRingₓ R] [Fintype R] : ∀ (Idl : Ideal R), Idl.IsPrime → Idl.IsMaximal "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "hausdorff_iff_diag_closed",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"A topological space $X$ is Hausdorff if and only if the diagonal is a closed set in $X × X$.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "A topological space $X$ is Hausdorff if and only if the diagonal is a closed set in $X × X$.",
      "codex_time": 7.985844911017921,
      "use_theorem_name": false
    },
    "outputs": [
      "(x : type*) [TopologicalSpace x] :  IsClosed {P : x × x | P.1 = P.2} ↔ _Hausdorff x ",
      "(x : type*) [TopologicalSpace x] :  hausdorff x ↔ IsClosed (@set.Diagonal x) ",
      "(x : type*) [TopologicalSpace x] : haussdorff_Space x ↔ IsClosed {P : x × x | P.1 = P.2} ",
      "(x : type*) [TopologicalSpace x]:  ¬IsEmpty x → ∀ x y : x, IsClosed {P : x × x | P.1 = P.2 } ↔ _Hausdorff x ",
      "(x : type*) [Hausdorff : TopologicalSpace x] :  IsClosed (set.Prod x x) "
    ],
    "answer": "{X : Type _} [TopologicalSpace X] : T2Space X ↔ IsClosed (Set.Diagonal X) "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "hausdorff_iff_diag_closed",
      "main_prompt": "A topological space $X$ is Hausdorff if and only if the diagonal is a closed set in $X × X$.",
      "prompt": "Natural language version: \"The Hausdorff edistance between sets or their closures is the same\" Translate the natural language version to a Lean mathlib version:\n theorem {α : Type u} [pseudo_emetric_space α] {s t : set α} :\nemetric.Hausdorff_edist (closure s) (closure t) = emetric.Hausdorff_edist s t := \n\nNatural language version: \"Two closed sets are at zero Hausdorff distance if and only if they coincide\" Translate the natural language version to a Lean mathlib version:\n theorem {α : Type u} [pseudo_metric_space α] {s t : set α} (hs : is_closed s) (ht : is_closed t) (fin : emetric.Hausdorff_edist s t ≠ ⊤) :\nmetric.Hausdorff_dist s t = 0 ↔ s = t := \n\nNatural language version: \"Two closed sets are at zero Hausdorff edistance if and only if they coincide\" Translate the natural language version to a Lean mathlib version:\n theorem {α : Type u} [pseudo_emetric_space α] {s t : set α} (hs : is_closed s) (ht : is_closed t) :\nemetric.Hausdorff_edist s t = 0 ↔ s = t := \n\nNatural language version: \"Replacing a set by its closure does not change the Hausdorff edistance.\" Translate the natural language version to a Lean mathlib version:\n theorem {α : Type u} [pseudo_emetric_space α] {s t : set α} :\nemetric.Hausdorff_edist s (closure t) = emetric.Hausdorff_edist s t := \n\nNatural language version: \"A topological space $X$ is Hausdorff if and only if the diagonal is a closed set in $X × X$.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.5625295639038086,
          "doc_string": "The Hausdorff edistance between sets or their closures is the same",
          "statement": "theorem emetric.Hausdorff_edist_closure {α : Type u} [pseudo_emetric_space α] {s t : set α} : emetric.Hausdorff_edist (closure s) (closure t) = emetric.Hausdorff_edist s t"
        },
        {
          "sim_score": 0.5602964162826538,
          "doc_string": "Two closed sets are at zero Hausdorff distance if and only if they coincide",
          "statement": "theorem is_closed.Hausdorff_dist_zero_iff_eq {α : Type u} [pseudo_metric_space α] {s t : set α} (hs : is_closed s) (ht : is_closed t) (fin : emetric.Hausdorff_edist s t ≠ ⊤) : metric.Hausdorff_dist s t = 0 ↔ s = t"
        },
        {
          "sim_score": 0.5491901636123657,
          "doc_string": "Two closed sets are at zero Hausdorff edistance if and only if they coincide",
          "statement": "theorem emetric.Hausdorff_edist_zero_iff_eq_of_closed {α : Type u} [pseudo_emetric_space α] {s t : set α} (hs : is_closed s) (ht : is_closed t) : emetric.Hausdorff_edist s t = 0 ↔ s = t"
        },
        {
          "sim_score": 0.5290781259536743,
          "doc_string": "Replacing a set by its closure does not change the Hausdorff edistance.",
          "statement": "theorem emetric.Hausdorff_edist_closure₂ {α : Type u} [pseudo_emetric_space α] {s t : set α} : emetric.Hausdorff_edist s (closure t) = emetric.Hausdorff_edist s t"
        }
      ],
      "codex_time": 6.471322034980403,
      "search_time": 1.3948053639905993,
      "use_theorem_name": false
    },
    "outputs": [
      "{x : type u} [TopologicalSpace x] : IsClosed (set.Prod x x) (set.diag x) ↔ hausdorff x ",
      "{α : type u} (x : α → type v) [Π x, TopologicalSpace (x x)] : Π (x : x), IsClosed (set.Prod x.Univ x.Univ.image (λ y : x, (x, y))) ↔ _Hausdorff x ",
      "{x : type u} [TopologicalSpace x] : IsClosed (Diagonal x) ↔ _Hausdorff x ",
      "[TopologicalSpace α] (ht : t2_Space α) : Hausdorff_Space α ↔ IsClosed (Diagonal : set (α × α)) ",
      "{α : type u} [t : TopologicalSpace α] : t._Hausdorff ↔ IsClosed (Diagonal α) "
    ],
    "answer": "{X : Type _} [TopologicalSpace X] : T2Space X ↔ IsClosed (Set.Diagonal X) "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "hausdorff_iff_diag_closed",
      "main_prompt": "A topological space $X$ is Hausdorff if and only if the diagonal is a closed set in $X × X$.",
      "prompt": "Natural language version: \"A topological space $X$ is Hausdorff if and only if the diagonal is a closed set in $X × X$.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 4.559409334004158,
      "use_theorem_name": false
    },
    "outputs": [
      "t2 : Hausdorff ↔ ∀ x , IsClosed (Diagonal x) ",
      "hausdorff_iff_diagonalf_IsClosed : hausdorff x ↔ IsClosed (λ P : x × x, P.fst = P.Snd) ",
      "not_iff : (∀ (A B:Setoid α), A ⊆ B ↔ A ∩ B = A) → False ",
      "diag_IsClosed_iff_hausdorff {x : type *} [TopologicalSpace x] :  IsClosed {P : x × x | P.1 = P.2} ↔ hausdorff x ",
      "diag_IsClosed {x : type*} [t : TopologicalSpace x] [h : t] : IsClosed (set.diag x) "
    ],
    "answer": "{X : Type _} [TopologicalSpace X] : T2Space X ↔ IsClosed (Set.Diagonal X) "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "open_iff_open_nhd_all_pt",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"If every point of a subset of a topological space is contained in some open set, the subset itself is open.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "If every point of a subset of a topological space is contained in some open set, the subset itself is open.",
      "codex_time": 8.631500621006126,
      "use_theorem_name": false
    },
    "outputs": [
      "(x : type*) [TopologicalSpace x]  (A : set x) (hA : ∀ x ∈ A, ∃ U : set x, IsOpen U ∧ x ∈ U) : IsOpen A ",
      "(x : type*) [TopologicalSpace x]  (A : set x) (hA : ∀ x, x ∈ A → ∃ U : set x, IsOpen U ∧ x ∈ U) :  IsOpen A ",
      "(x : type*) [TopologicalSpace x]  (A : set x) (hA : ∀ x ∈ A, ∃ U : set x, IsOpen U ∧ x ∈ U):  IsOpen A ",
      "(x : type*) [TopologicalSpace x]  (A : set x) (hA : ∀ x ∈ A, ∃ U : set x, IsOpen U ∧ x ∈ U):  IsOpen A ",
      "(x : type*) [TopologicalSpace x]  (A : set x) (hA : ∀ x ∈ A, ∃ U : set x, IsOpen U ∧ x ∈ U):  IsOpen A "
    ],
    "answer": "{X : Type _} [TopologicalSpace X] (S : Set X) : (∀ x ∈ S, ∃ U : Set X, IsOpen U) → IsOpen S "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "open_iff_open_nhd_all_pt",
      "main_prompt": "If every point of a subset of a topological space is contained in some open set, the subset itself is open.",
      "prompt": "Natural language version: \" A predicate is true in a neighborhood of `a` iff it is true for all the points in an open set containing `a`.\" Translate the natural language version to a Lean mathlib version:\n theorem {α : Type u} [topological_space α] {a : α} {p : α → Prop} :\n(∀ᶠ (x : α) in nhds a, p x) ↔ ∃ (t : set α), (∀ (x : α), x ∈ t → p x) ∧ is_open t ∧ a ∈ t := \n\nNatural language version: \"Given an open finite set `S` in a T₀ space, there is some `x ∈ S` such that `{x}` is open.\" Translate the natural language version to a Lean mathlib version:\n theorem {α : Type u} [topological_space α] [t0_space α] {s : set α} (hfin : s.finite) (hne : s.nonempty) (ho : is_open s) :\n∃ (x : α) (H : x ∈ s), is_open {x} := \n\nNatural language version: \" If `U` is a neighborhood of each point of a set `s` then it is a neighborhood of s: it contains an open set containing `s`.\" Translate the natural language version to a Lean mathlib version:\n theorem {α : Type u} [topological_space α] {s U : set α} (h : U ∈ ⨆ (x : α) (H : x ∈ s), nhds x) :\n∃ (V : set α), s ⊆ V ∧ is_open V ∧ V ⊆ U := \n\nNatural language version: \" If `U` is a neighborhood of each point of a set `s` then it is a neighborhood of `s`: it contains an open set containing `s`.\" Translate the natural language version to a Lean mathlib version:\n theorem {α : Type u} [topological_space α] {s U : set α} (h : ∀ (x : α), x ∈ s → U ∈ nhds x) :\n∃ (V : set α), s ⊆ V ∧ is_open V ∧ V ⊆ U := \n\nNatural language version: \"If every point of a subset of a topological space is contained in some open set, the subset itself is open.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.624941349029541,
          "doc_string": " A predicate is true in a neighborhood of `a` iff it is true for all the points in an open set containing `a`.",
          "statement": "theorem eventually_nhds_iff {α : Type u} [topological_space α] {a : α} {p : α → Prop} : (∀ᶠ (x : α) in nhds a, p x) ↔ ∃ (t : set α), (∀ (x : α), x ∈ t → p x) ∧ is_open t ∧ a ∈ t"
        },
        {
          "sim_score": 0.619118332862854,
          "doc_string": "Given an open finite set `S` in a T₀ space, there is some `x ∈ S` such that `{x}` is open.",
          "statement": "theorem exists_open_singleton_of_open_finite {α : Type u} [topological_space α] [t0_space α] {s : set α} (hfin : s.finite) (hne : s.nonempty) (ho : is_open s) : ∃ (x : α) (H : x ∈ s), is_open {x}"
        },
        {
          "sim_score": 0.6141307353973389,
          "doc_string": " If `U` is a neighborhood of each point of a set `s` then it is a neighborhood of s: it contains an open set containing `s`.",
          "statement": "theorem exists_open_set_nhds' {α : Type u} [topological_space α] {s U : set α} (h : U ∈ ⨆ (x : α) (H : x ∈ s), nhds x) : ∃ (V : set α), s ⊆ V ∧ is_open V ∧ V ⊆ U"
        },
        {
          "sim_score": 0.6101160645484924,
          "doc_string": " If `U` is a neighborhood of each point of a set `s` then it is a neighborhood of `s`: it contains an open set containing `s`.",
          "statement": "theorem exists_open_set_nhds {α : Type u} [topological_space α] {s U : set α} (h : ∀ (x : α), x ∈ s → U ∈ nhds x) : ∃ (V : set α), s ⊆ V ∧ is_open V ∧ V ⊆ U"
        }
      ],
      "codex_time": 4.460379459982505,
      "search_time": 1.332091069984017,
      "use_theorem_name": false
    },
    "outputs": [
      "{α : type u} [TopologicalSpace α] {S : set α} (h : ∀ (x : α), x ∈ S → ∃ (u : set α), u ⊆ S ∧ IsOpen u) : IsOpen S ",
      "{α : type*} [TopologicalSpace α] {S : set α} (h : ∀ (x : α), x ∈ S → ∃ (t : set α), (∀ (y : α), y ∈ t → y ∈ S) ∧ IsOpen t ∧ x ∈ t) :  IsOpen S ",
      "{α : type u} [TopologicalSpace α] {S : set α} (h : ∀ (x : α), x ∈ S → ∃ (u : set α), IsOpen u ∧ x ∈ u) : IsOpen S ",
      "{α : type u} [TopologicalSpace α] {S : set α} (h : ∀ (x : α), x ∈ S → ∃ (t : set α), x ∈ t ∧ IsOpen t) : IsOpen S ",
      "{α : type u} [TopologicalSpace α] {S : set α} {P : α → Prop} (h : ∀ (x : α), (x ∈ S) → ∃ (v : set α), IsOpen v ∧ x ∈ v): IsOpen S "
    ],
    "answer": "{X : Type _} [TopologicalSpace X] (S : Set X) : (∀ x ∈ S, ∃ U : Set X, IsOpen U) → IsOpen S "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "open_iff_open_nhd_all_pt",
      "main_prompt": "If every point of a subset of a topological space is contained in some open set, the subset itself is open.",
      "prompt": "Natural language version: \"If every point of a subset of a topological space is contained in some open set, the subset itself is open.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 7.866904499998782,
      "use_theorem_name": false
    },
    "outputs": [
      "IsOpen_Subset_iff (S : set α) : IsOpen S ↔ ∀t ∈ S, ∃u, IsOpen u ∧ t ∈ u ∧ u ⊆ S ",
      "Subset_of_TopologicalSpace_IsOpen {x : set ℝ} (A : set x) (h : ∀B ∈ A, ∃C : set ℝ, C ∈ 𝓝[x] B ∧ (C ∈ 𝓤ₛ)) : A ∈ 𝓤ₛ ",
      "Filter.forall { α : type * } [ TopologicalSpace α ] { S : set α } : IsOpen S ↔ ( ∀ ( x : α ), x ∈ S → ∃ ( t : set α ) ( h : IsOpen t ), x ∈ t ∧ t ⊆ S ) ",
      "(h : TopologicalSpace x) (S : set x) (G : ∀ x ∈ S, ∃ U, IsOpen U ∧ x ∈ U) : IsOpen S ",
      "Subset_IsOpen_iff_forall_mem_IsOpen : sorry "
    ],
    "answer": "{X : Type _} [TopologicalSpace X] (S : Set X) : (∀ x ∈ S, ∃ U : Set X, IsOpen U) → IsOpen S "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "complex_conj_prod_real",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"The product of a complex number with its conjugate is a real number.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "The product of a complex number with its conjugate is a real number.",
      "codex_time": 4.236629835009808,
      "use_theorem_name": false
    },
    "outputs": [
      "(α : type*) [Ring α] [discrete_Field α]  (α_inhab : Nonempty α) (x : α) : ∥x∥ ^ 2 = x * x ",
      "(z : ℂ) : z*Conj z = z.re*(z.re) + z.im*(z.im) ",
      "(z : ℂ) :  ∃ r : ℝ, r = z * Conj z ",
      "(z : ℂ) : _Real (z * Conj z) ",
      "(z : ℂ) : z * z.Conj = z.norm_sq "
    ],
    "answer": ": ∀ z : ℂ, ∃ r : ℝ, z * (starRingEnd ℂ $ z) = (r : ℂ) "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "complex_conj_prod_real",
      "main_prompt": "The product of a complex number with its conjugate is a real number.",
      "prompt": "Natural language version: \"A complex number `z` plus its conjugate `conj z` is `2` times its real part.\" Translate the natural language version to a Lean mathlib version:\n theorem (z : ℂ) :\n↑(z.re) = (z + ⇑(star_ring_end ℂ) z) / 2 := \n\nNatural language version: \"A complex number `z` minus its conjugate `conj z` is `2i` times its imaginary part.\" Translate the natural language version to a Lean mathlib version:\n theorem (z : ℂ) :\n↑(z.im) = (z - ⇑(star_ring_end ℂ) z) / (2 * complex.I) := \n\nNatural language version: \" A linear operator on a complex inner product space is self-adjoint precisely when `⟪T v, v⟫_ℂ` is real for all v.\" Translate the natural language version to a Lean mathlib version:\n theorem {V : Type u_4} [inner_product_space ℂ V] (T : V →ₗ[ℂ] V) :\ninner_product_space.is_self_adjoint T ↔ ∀ (v : V), ⇑(star_ring_end ℂ) (has_inner.inner (⇑T v) v) = has_inner.inner (⇑T v) v := \n\nNatural language version: \"Polarization identity: The real part of the  inner product, in terms of the norm.\" Translate the natural language version to a Lean mathlib version:\n theorem {𝕜 : Type u_1} {E : Type u_2} [is_R_or_C 𝕜] [inner_product_space 𝕜 E] (x y : E) :\n⇑is_R_or_C.re (has_inner.inner x y) = (∥x∥ * ∥x∥ + ∥y∥ * ∥y∥ - ∥x - y∥ * ∥x - y∥) / 2 := \n\nNatural language version: \"The product of a complex number with its conjugate is a real number.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.6665807962417603,
          "doc_string": "A complex number `z` plus its conjugate `conj z` is `2` times its real part.",
          "statement": "theorem complex.re_eq_add_conj (z : ℂ) : ↑(z.re) = (z + ⇑(star_ring_end ℂ) z) / 2"
        },
        {
          "sim_score": 0.6368286609649658,
          "doc_string": "A complex number `z` minus its conjugate `conj z` is `2i` times its imaginary part.",
          "statement": "theorem complex.im_eq_sub_conj (z : ℂ) : ↑(z.im) = (z - ⇑(star_ring_end ℂ) z) / (2 * complex.I)"
        },
        {
          "sim_score": 0.5591109395027161,
          "doc_string": " A linear operator on a complex inner product space is self-adjoint precisely when `⟪T v, v⟫_ℂ` is real for all v.",
          "statement": "theorem inner_product_space.is_self_adjoint_iff_inner_map_self_real {V : Type u_4} [inner_product_space ℂ V] (T : V →ₗ[ℂ] V) : inner_product_space.is_self_adjoint T ↔ ∀ (v : V), ⇑(star_ring_end ℂ) (has_inner.inner (⇑T v) v) = has_inner.inner (⇑T v) v"
        },
        {
          "sim_score": 0.48265978693962097,
          "doc_string": "Polarization identity: The real part of the  inner product, in terms of the norm.",
          "statement": "theorem re_inner_eq_norm_mul_self_add_norm_mul_self_sub_norm_sub_mul_self_div_two {𝕜 : Type u_1} {E : Type u_2} [is_R_or_C 𝕜] [inner_product_space 𝕜 E] (x y : E) : ⇑is_R_or_C.re (has_inner.inner x y) = (∥x∥ * ∥x∥ + ∥y∥ * ∥y∥ - ∥x - y∥ * ∥x - y∥) / 2"
        }
      ],
      "codex_time": 6.301921194011811,
      "search_time": 1.3324739320087247,
      "use_theorem_name": false
    },
    "outputs": [
      "(z : ℂ) : ⇑_R_or_C.re (Star_Ring.Star_Ring_hom.Star_Ring_hom_Map ℂ Star (⇑z * ⇑(Star_Ring_end ℂ) z)) = ⇑z * ⇑(Star_Ring_end ℂ) z ",
      "(z : ℂ) : ↑(⇑(Star_Ring_end ℂ) z * z) = ↑(z * ⋆z) ",
      "(x : ℂ) : ⇑_R_or_C.re (x * (⇑(Star_Ring_end ℂ) x) ) = x.Abs * x.Abs ",
      "(z : ℂ) : _R_or_C.re (z * z.Conj) = z.Abs^2 ",
      "(z : ℂ) : ↑(⇑(Star_Ring_end ℂ) z) = (↑z) * (↑z) "
    ],
    "answer": ": ∀ z : ℂ, ∃ r : ℝ, z * (starRingEnd ℂ $ z) = (r : ℂ) "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "complex_conj_prod_real",
      "main_prompt": "The product of a complex number with its conjugate is a real number.",
      "prompt": "Natural language version: \"The product of a complex number with its conjugate is a real number.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 10.709482749021845,
      "use_theorem_name": false
    },
    "outputs": [
      "Complex_Conj_Mul_Real : ∀ (z : ℂ), (↑z * conjugate z) ∈ ℝ ,     // Reduce the theorem to A contractible goal:  from ⟨0.0, _, _⟩,    // finish the  proof with A Ring tactic_:  Ring, end  /- The \\library{tidy} tactic_  useful to solve A goal with A single \"master equation\" conjectured to be an equality.  For instance, consider the following goal:  -/  example {A B C D : ℝ} : A * B * D * C *",
      "Prod_Conj_Real : ∀ (z : C), ∃ (r : ℝ), z * Conj z = (r : C) ",
      "nlv_to_lmv ( z : ℂ ) : z * z.Conj = z.norm * z.norm ",
      "Mul_Conj_Real : ∀ (A B : ℂ), Real (A * B) → A = B ",
      "q : ∀z : ℂ, z * Conj z = (Re z) ^ 2 + (Im z) ^ 2 "
    ],
    "answer": ": ∀ z : ℂ, ∃ r : ℝ, z * (starRingEnd ℂ $ z) = (r : ℂ) "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "non_id_implies_infinite_order",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"Every non-identity element of a free group is of infinite order.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "Every non-identity element of a free group is of infinite order.",
      "codex_time": 6.012982610001927,
      "use_theorem_name": false
    },
    "outputs": [
      "(G : type*) [Group G] (x : G) [free_Group G] (hx : x ≠ 1) :  ∀ n : ℕ, x ^ n ≠ 1 ",
      "(G : type*) [Group G] (F : free_Group G)  (x : G) (hx : x ≠ 1) : ∀ (n : ℕ), x ^ n ≠ 1 ",
      "(G : type*) [Group G] (h : free_Group G) (n : ℕ)  (h : ∀ (x : G) (hx : x ≠ 1), (∃ (n : ℕ), x ^ n = 1) → n = 0) :  ∀ x : G, x ≠ 1 → ∃ n : ℕ, x ^ n ≠ 1 ",
      "(G : type*) [Group G]  (F : Π n, free_Group (Fin n)) (hG : free_Group G) :  ∀ x : G, x ≠ 1 → ∃ n : ℕ, x ^ n ≠ 1 ",
      "(G : type*) [Group G] (F : free_Group G):  ∀ A : G, A ≠ 1 → (∀ n : ℕ, F A ^ n ≠ 1) ∧ (∀ n : ℤ, F A ^ n ≠ 1) "
    ],
    "answer": "{G : Type _} [Groupₓ G] : FreeGroup G → (∀ g : G, g ≠ 1 → orderOf g = 0) "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "non_id_implies_infinite_order",
      "main_prompt": "Every non-identity element of a free group is of infinite order.",
      "prompt": "Natural language version: \" If two words correspond to the same element in the free group, then they have a common maximal reduction. This is the proof that the function that sends an element of the free group to its maximal reduction is well-defined.\" Translate the natural language version to a Lean mathlib version:\n theorem {α : Type u} {L₁ L₂ : list (α × bool)} [decidable_eq α] (H : free_group.mk L₁ = free_group.mk L₂) :\nfree_group.reduce L₁ = free_group.reduce L₂ := \n\nNatural language version: \"A group element has finite order iff its order is positive.\" Translate the natural language version to a Lean mathlib version:\n theorem {G : Type u} {x : G} [monoid G] :\n0 < order_of x ↔ is_of_fin_order x := \n\nNatural language version: \"Inverses of elements of finite order have finite order.\" Translate the natural language version to a Lean mathlib version:\n theorem {G : Type u} [group G] {x : G} :\nis_of_fin_order x⁻¹ ↔ is_of_fin_order x := \n\nNatural language version: \"Inverses of elements of finite order have finite order.\" Translate the natural language version to a Lean mathlib version:\n theorem {G : Type u} [group G] {x : G} (hx : is_of_fin_order x) :\nis_of_fin_order x⁻¹ := \n\nNatural language version: \"Every non-identity element of a free group is of infinite order.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.5920776724815369,
          "doc_string": " If two words correspond to the same element in the free group, then they have a common maximal reduction. This is the proof that the function that sends an element of the free group to its maximal reduction is well-defined.",
          "statement": "theorem free_group.reduce.sound {α : Type u} {L₁ L₂ : list (α × bool)} [decidable_eq α] (H : free_group.mk L₁ = free_group.mk L₂) : free_group.reduce L₁ = free_group.reduce L₂"
        },
        {
          "sim_score": 0.5908461809158325,
          "doc_string": "A group element has finite order iff its order is positive.",
          "statement": "theorem order_of_pos_iff {G : Type u} {x : G} [monoid G] : 0 < order_of x ↔ is_of_fin_order x"
        },
        {
          "sim_score": 0.5742547512054443,
          "doc_string": "Inverses of elements of finite order have finite order.",
          "statement": "theorem is_of_fin_order_inv_iff {G : Type u} [group G] {x : G} : is_of_fin_order x⁻¹ ↔ is_of_fin_order x"
        },
        {
          "sim_score": 0.5742547512054443,
          "doc_string": "Inverses of elements of finite order have finite order.",
          "statement": "theorem is_of_fin_order.inv {G : Type u} [group G] {x : G} (hx : is_of_fin_order x) : is_of_fin_order x⁻¹"
        }
      ],
      "codex_time": 5.115586811996764,
      "search_time": 1.338385823997669,
      "use_theorem_name": false
    },
    "outputs": [
      "{α : type u} (L : List (α × Bool)) (n : ℕ) [DecidableEq α] : free_Group.C x ≠ 1 ↔ x ≠ 1 ",
      "{α : type u} (x : free_Group α) :  net.Dense {i | free_Group.reduce i = free_Group.reduce (x^i)}   ",
      "{α : type u} [DecidableEq α] (x : free_Group α) : x ≠ 1 → ¬_of_Fin_order x ",
      "{α : type u} {L : List (α × Bool)}   (h : ∃(t : α × Bool) (h : t ∈ L), t ≠ (0, bor t.2 tt)) :  ∀(t : α × Bool) (h : t ∈ L), ¬ _of_Fin_order (free_Group.Mk L) ",
      "free_Group._of_Inf_order_of_not__One : ∀ {α : type u} [DecidableEq α] (A : free_Group α), A ≠ 1 → _of_Inf_order A "
    ],
    "answer": "{G : Type _} [Groupₓ G] : FreeGroup G → (∀ g : G, g ≠ 1 → orderOf g = 0) "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "non_id_implies_infinite_order",
      "main_prompt": "Every non-identity element of a free group is of infinite order.",
      "prompt": "Natural language version: \"Every non-identity element of a free group is of infinite order.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 6.021806073986227,
      "use_theorem_name": false
    },
    "outputs": [
      ": ∀ (G : type*) [Group G] (h : G ≠ 1), ∃ x : G, x ≠ 1 ∧ x ≠ x⁻¹ ",
      "free_Group_non_identity_has_Infinite_order { G : type } [ Group G ] [ _free G ] [ _set G ] ( g : G ) ( h : g ≠ 1 ) :    ∀  n : ℕ, ( g ^ ( n ) ≠ 1 ) ",
      "free_Group.no_torsion {G : type*} [Group G] (h : ∀ {x : G}, x ≠ 1 → ∀ n : ℕ, x ^ n ≠ 1) : ∀ {g : G}, g ≠ 1 → ∞ ≠ g ",
      "free_Group . nnthm : Π { β : type } [ α : β → type ] [ _ inst_2 : Group α ] [ _ inst_3 : free_Group α ] ( x : β ), x ≠ 1 → ∞ ∣ order x ",
      "my_Infinite_order_mathlib : ∀ (x : type) (S : set x) [_free_Group S]     (F : x), F ≠ 1 → order F = ⊤ "
    ],
    "answer": "{G : Type _} [Groupₓ G] : FreeGroup G → (∀ g : G, g ≠ 1 → orderOf g = 0) "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "sub_ring_field_with_id_is_int_domain",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"Any sub-ring of a field that contains the identity is an integral domain\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "Any sub-ring of a field that contains the identity is an integral domain",
      "codex_time": 6.164875899994513,
      "use_theorem_name": false
    },
    "outputs": [
      "(R : type*) [Ring R] (i : Ideal R)  [_Subring i] (hI : (1 : R) ∈ i) :  integral_IsDomain i ",
      "(A : type*) (K : type*) [integral_IsDomain K]  [CommRing A] [Algebra K A] (h : 1 ∈ A) : integral_IsDomain A ",
      "(R : type*) [CommRing R] (S : set R) [_Subring S]  (hS_i : 1 ∈ S) : IsIntegral_IsDomain S ",
      "(F : type*) (B : type*) [Ring F] [Subring B]  (h1 : 1 ∈ B) :  integral_IsDomain B ",
      "(R : type*) [Ring R] [Field R] (A : set R) [_Subring A] (h : (1:R) ∈ A) :  integral_IsDomain A "
    ],
    "answer": "{F : Type _} [Field F] : ∀ R : Subring F, 1 ∈ R.Carrier → IsDomain ↥R "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "sub_ring_field_with_id_is_int_domain",
      "main_prompt": "Any sub-ring of a field that contains the identity is an integral domain",
      "prompt": "Natural language version: \"A subfield is closed under inverses.\" Translate the natural language version to a Lean mathlib version:\n theorem {K : Type u} [field K] (s : subfield K) {x : K} :\nx ∈ s → x⁻¹ ∈ s := \n\nNatural language version: \"A subring contains the ring's 1.\" Translate the natural language version to a Lean mathlib version:\n theorem {R : Type u} [ring R] (s : subring R) :\n1 ∈ s := \n\nNatural language version: \"A subring contains the ring's 0.\" Translate the natural language version to a Lean mathlib version:\n theorem {R : Type u} [ring R] (s : subring R) :\n0 ∈ s := \n\nNatural language version: \"A subfield is closed under division.\" Translate the natural language version to a Lean mathlib version:\n theorem {K : Type u} [field K] (s : subfield K) {x y : K} :\nx ∈ s → y ∈ s → x / y ∈ s := \n\nNatural language version: \"Any sub-ring of a field that contains the identity is an integral domain\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.6670852899551392,
          "doc_string": "A subfield is closed under inverses.",
          "statement": "theorem subfield.inv_mem {K : Type u} [field K] (s : subfield K) {x : K} : x ∈ s → x⁻¹ ∈ s"
        },
        {
          "sim_score": 0.6393297910690308,
          "doc_string": "A subring contains the ring's 1.",
          "statement": "theorem subring.one_mem {R : Type u} [ring R] (s : subring R) : 1 ∈ s"
        },
        {
          "sim_score": 0.6295010447502136,
          "doc_string": "A subring contains the ring's 0.",
          "statement": "theorem subring.zero_mem {R : Type u} [ring R] (s : subring R) : 0 ∈ s"
        },
        {
          "sim_score": 0.6208624243736267,
          "doc_string": "A subfield is closed under division.",
          "statement": "theorem subfield.div_mem {K : Type u} [field K] (s : subfield K) {x y : K} : x ∈ s → y ∈ s → x / y ∈ s"
        }
      ],
      "codex_time": 9.568462060997263,
      "search_time": 1.3781938120082486,
      "use_theorem_name": false
    },
    "outputs": [
      "{R : type u} [Ring R] (S : Subring R) [Field K] (homK : K → R) (h : ∀ x : K, 0 ≠ x → homK x ≠ 0) (h1 : homK 1 ∈ S) :  integral_IsDomain S ",
      "{K : type u} [Field K] (S : Subring K) (h : 1 ∈ S) : integral_IsDomain S ",
      "(K : type u) [discrete_Field K] {R : set K} [_Subring R] (One : (1:K) ∈ R) :   IsIntegral_IsDomain R ",
      "{K : type u} [Field K] (S : Subring K) (h1 : ∀ (A : K), A ∈ S → A⁻¹ ∈ S) (h2 : 1 ∈ S) : integral_IsDomain S ",
      "{K : type u} [Field K] (S : Subring K) (h₁ : 1 ∈ S) : integral_IsDomain S "
    ],
    "answer": "{F : Type _} [Field F] : ∀ R : Subring F, 1 ∈ R.Carrier → IsDomain ↥R "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "sub_ring_field_with_id_is_int_domain",
      "main_prompt": "Any sub-ring of a field that contains the identity is an integral domain",
      "prompt": "Natural language version: \"Any sub-ring of a field that contains the identity is an integral domain\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 11.832734199007973,
      "use_theorem_name": false
    },
    "outputs": [
      "Ideal_of_sub_set_of_Int_der ( A B : set R ) ( hA : Additive_Subgroup A )    ( hA_Int_der : IsIntegral_Derivation A R D ) ( hA_subs_B : A ⊆ B )    ( hB_Field : Field B ) ( hB_subs_R : B ⊆ R ) :    IsIntegral_Derivation B R D ∧ Field (der_sub_set hB_subs_R) ",
      "Subring_Ring.IsIntegral_IsDomain_of_Field (h : Subring_Ring R) (Ho : 1 : R ≠ 0)  example : Subring_Ring R → IsIntegral_IsDomain R ",
      "Field_Subring_integral {α : type u} [Field α] {S : set α} [_Subring S] (⊥ : 1 ∈ S) :   integral_IsDomain S ",
      "any_Subring_of_A_Field_that_contains_the_Id_IsIntegral : ∀ R : type u_1, R → CommRing R → ∃ (L : type u_2) (i_3 : integral_IsDomain L),   (∃ (i_1 : R → L) (i_2 : L → R),      _Ring_hom i_1 ∧ _Ring_hom i_2 ∧ i_2 ∘ i_1 = Id R) ",
      "_Int_Dom_Subring_of_Field (R : type) [CommRing R] [Field R] {i : set R} [_Subring i] :    i ≠ ∅ → IsIntegral_IsDomain i "
    ],
    "answer": "{F : Type _} [Field F] : ∀ R : Subring F, 1 ∈ R.Carrier → IsDomain ↥R "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "dvr_unit_iff_val_zero",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"An element of a discrete valuation ring is a unit if and only if it has a valuation of zero.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "An element of a discrete valuation ring is a unit if and only if it has a valuation of zero.",
      "codex_time": 8.454251390998252,
      "use_theorem_name": false
    },
    "outputs": [
      "(R : type*) [discrete_Valuation_Ring R] (x : R) :  x ∈ units R ↔ ∃ y : R, y ≠ 0 ∧ x * y = 1 ",
      "(R : type*) [integral_IsDomain R] [CommRing R] [discrete_Valuation_Ring R]  (x : R) (hx : IsUnit x ↔ Valuation x = 0) ",
      "(R : type*) [discrete_Valuation_Ring R] (x : R) :  x ∈ units R ↔ val R x = 0  Natural Language version: \"The intersection of two Finite-Index Normal subgroups of A Group  A Finite-Index Normal Subgroup.\" Translate the natural Language version to A Lean mathlib version:  theorem (G : type*) [Group G] {N m : set G} [_Subgroup N] [_Subgroup m]  (hF : Finite.Card (Quotient_Group.Left_Rel N) ∧ Finite.Card (Quotient_Group.Left_Rel m))  (hN :",
      "(R : type*) [discrete_Valuation_Ring R]  (x : R) : x ∈ units R ↔ val x = 0 ",
      "(R : type*)  [discrete_Valuation_Ring R] (x : R) :  IsUnit x ↔ val R x = 0 "
    ],
    "answer": "{R : Type _} [CommRingₓ R] [IsDomain R] [DiscreteValuationRing R] : ∀ r : R, IsUnit r → DiscreteValuationRing.addVal R r = 0 "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "dvr_unit_iff_val_zero",
      "main_prompt": "An element of a discrete valuation ring is a unit if and only if it has a valuation of zero.",
      "prompt": "Natural language version: \"An integral domain in which there is an irreducible element `p` such that every nonzero element is associated to a power of `p` is a discrete valuation ring.\" Translate the natural language version to a Lean mathlib version:\n theorem {R : Type u} [comm_ring R] [is_domain R] (hR : discrete_valuation_ring.has_unit_mul_pow_irreducible_factorization R) :\ndiscrete_valuation_ring R := \n\nNatural language version: \"A unique factorization domain with at least one irreducible element in which all irreducible elements are associated is a discrete valuation ring.\" Translate the natural language version to a Lean mathlib version:\n theorem {R : Type u} [comm_ring R] [is_domain R] [unique_factorization_monoid R] (h₁ : ∃ (p : R), irreducible p) (h₂ : ∀ ⦃p q : R⦄, irreducible p → irreducible q → associated p q) :\ndiscrete_valuation_ring R := \n\nNatural language version: \" If `𝒪` satisfies `v.integers 𝒪` where `v` is a valuation on a field, then `𝒪` is a valuation ring.\" Translate the natural language version to a Lean mathlib version:\n theorem {𝒪 : Type u} {K : Type v} {Γ : Type w} [comm_ring 𝒪] [is_domain 𝒪] [field K] [algebra 𝒪 K] [linear_ordered_comm_group_with_zero Γ] (v : valuation K Γ) (hh : v.integers 𝒪) :\nvaluation_ring 𝒪 := \n\nNatural language version: \"Nonzero elements have nonzero adic valuation.\" Translate the natural language version to a Lean mathlib version:\n theorem {R : Type u_1} [comm_ring R] [is_domain R] [is_dedekind_domain R] (v : is_dedekind_domain.height_one_spectrum R) (x : R) (hx : x ≠ 0) :\nv.int_valuation_def x ≠ 0 := \n\nNatural language version: \"An element of a discrete valuation ring is a unit if and only if it has a valuation of zero.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.7251311540603638,
          "doc_string": "An integral domain in which there is an irreducible element `p` such that every nonzero element is associated to a power of `p` is a discrete valuation ring.",
          "statement": "theorem discrete_valuation_ring.of_has_unit_mul_pow_irreducible_factorization {R : Type u} [comm_ring R] [is_domain R] (hR : discrete_valuation_ring.has_unit_mul_pow_irreducible_factorization R) : discrete_valuation_ring R"
        },
        {
          "sim_score": 0.6923463344573975,
          "doc_string": "A unique factorization domain with at least one irreducible element in which all irreducible elements are associated is a discrete valuation ring.",
          "statement": "theorem discrete_valuation_ring.of_ufd_of_unique_irreducible {R : Type u} [comm_ring R] [is_domain R] [unique_factorization_monoid R] (h₁ : ∃ (p : R), irreducible p) (h₂ : ∀ ⦃p q : R⦄, irreducible p → irreducible q → associated p q) : discrete_valuation_ring R"
        },
        {
          "sim_score": 0.6915189623832703,
          "doc_string": " If `𝒪` satisfies `v.integers 𝒪` where `v` is a valuation on a field, then `𝒪` is a valuation ring.",
          "statement": "theorem valuation_ring.of_integers {𝒪 : Type u} {K : Type v} {Γ : Type w} [comm_ring 𝒪] [is_domain 𝒪] [field K] [algebra 𝒪 K] [linear_ordered_comm_group_with_zero Γ] (v : valuation K Γ) (hh : v.integers 𝒪) : valuation_ring 𝒪"
        },
        {
          "sim_score": 0.6845616698265076,
          "doc_string": "Nonzero elements have nonzero adic valuation.",
          "statement": "theorem is_dedekind_domain.height_one_spectrum.int_valuation_ne_zero {R : Type u_1} [comm_ring R] [is_domain R] [is_dedekind_domain R] (v : is_dedekind_domain.height_one_spectrum R) (x : R) (hx : x ≠ 0) : v.int_valuation_def x ≠ 0"
        }
      ],
      "codex_time": 5.3449695729941595,
      "search_time": 1.3810809220012743,
      "use_theorem_name": false
    },
    "outputs": [
      "{R : type u} [CommRing R] [IsDomain R] [discrete_Valuation_Ring R] (x : R) : IsUnit x ↔ ∃ S : R, S * x = 1 ",
      "{R : type u} [CommRing R] [IsDomain R] [discrete_Valuation_Ring R] (x : R) : IsUnit x ↔ discrete_Valuation_Ring.Int_Valuation_def x = 0 ",
      "{R : type u_1} [Field R] [discrete_Valuation_Ring R] {v : discrete_Valuation_Ring.height_One_Spectrum R} (x : R) : IsUnit x ≃ (v.Int_Valuation_def x = 0) ",
      "{R : type u} [discrete_Valuation_Ring R] (x : R) : IsUnit x ↔ (Nat.Prime.Int_val_def x = 0 : Nnreal) ",
      "{R : type u_1} [CommRing R] [IsDomain R] [discrete_Valuation_Ring R] (x : R) : IsUnit x ↔ v.Int_Valuation_def x = 0 "
    ],
    "answer": "{R : Type _} [CommRingₓ R] [IsDomain R] [DiscreteValuationRing R] : ∀ r : R, IsUnit r → DiscreteValuationRing.addVal R r = 0 "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "dvr_unit_iff_val_zero",
      "main_prompt": "An element of a discrete valuation ring is a unit if and only if it has a valuation of zero.",
      "prompt": "Natural language version: \"An element of a discrete valuation ring is a unit if and only if it has a valuation of zero.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 6.173651578021236,
      "use_theorem_name": false
    },
    "outputs": [
      "Unit (α : type*) [discrete_Valuation_Ring α] : Π x : α,   (x ≠ 0 → Valuation R x = 0) ↔ IsUnit x ",
      "F : ∀ A : α , IsUnit α A ↔ (val α A = 0) ",
      "v0_imp_Unit (v : discrete_Valuation_Ring.{max u} R) (g : R)     (h : discrete_Valuation_Ring.val v g = 0) : IsUnit g ",
      "val_Unit {R : type*} [discrete_Valuation_Ring R] (x : R) : x ∈ (gives_dis_val R)⁻¹' ({0} : set ℚ) ",
      "IsUnit_of_Valuation_Zero (R : type) [discrete_Valuation_Ring R] (x : R) : val x = 0 → IsUnit x "
    ],
    "answer": "{R : Type _} [CommRingₓ R] [IsDomain R] [DiscreteValuationRing R] : ∀ r : R, IsUnit r → DiscreteValuationRing.addVal R r = 0 "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "exp_convex",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"The exponential function is convex.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "The exponential function is convex.",
      "codex_time": 7.400497094989987,
      "use_theorem_name": false
    },
    "outputs": [
      "(x y : ℝ) (hx : 0 ≤ x) (hy : 0 ≤ y) (λ : ℝ) (hλ0 : 0 ≤ λ) (hλ1 : λ ≤ 1) :  ((Exp x) ^ λ) * ((Exp y) ^ (1-λ)) ≤ Exp (λ * x + (1-λ) * y) ",
      "(x : ℝ) :  Convex_on (λ t : ℝ, Exp t) x ",
      ": Convex Exp ",
      "(x y : ℝ) (hxy : 0 ≤ x) (hy : 0 ≤ y) (h_xy : x ≤ y) (t : ℝ) (ht : 0 < t) (h_t : t ≤ 1):  Exp (t * x + (1 - t) * y) ≤ t * Exp x + (1 - t) * Exp y ",
      "(x y A : ℝ) (hx : x < 0) (hy : y < 0) : _Convex_Function ℝ ℝ (λ x, Exp x) "
    ],
    "answer": ": ConvexOn ℝ Set.univ Real.exp "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "exp_convex",
      "main_prompt": "The exponential function is convex.",
      "prompt": "Natural language version: \"`exp` is convex on the whole real line.\" Translate the natural language version to a Lean mathlib version:\n theorem  :\nconvex_on ℝ set.univ real.exp := \n\nNatural language version: \"`exp` is strictly convex on the whole real line.\" Translate the natural language version to a Lean mathlib version:\n theorem  :\nstrict_convex_on ℝ set.univ real.exp := \n\nNatural language version: \"`x^m`, `m : ℤ` is convex on `(0, +∞)` for all `m` except `0` and `1`.\" Translate the natural language version to a Lean mathlib version:\n theorem {m : ℤ} (hm₀ : m ≠ 0) (hm₁ : m ≠ 1) :\nstrict_convex_on ℝ (set.Ioi 0) (λ (x : ℝ), x ^ m) := \n\nNatural language version: \"`x^n`, `n : ℕ` is convex on `[0, +∞)` for all `n`\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) :\nconvex_on ℝ (set.Ici 0) (λ (x : ℝ), x ^ n) := \n\nNatural language version: \"The exponential function is convex.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.8296651840209961,
          "doc_string": "`exp` is convex on the whole real line.",
          "statement": "theorem convex_on_exp  : convex_on ℝ set.univ real.exp"
        },
        {
          "sim_score": 0.8015367984771729,
          "doc_string": "`exp` is strictly convex on the whole real line.",
          "statement": "theorem strict_convex_on_exp  : strict_convex_on ℝ set.univ real.exp"
        },
        {
          "sim_score": 0.5888562202453613,
          "doc_string": "`x^m`, `m : ℤ` is convex on `(0, +∞)` for all `m` except `0` and `1`.",
          "statement": "theorem strict_convex_on_zpow {m : ℤ} (hm₀ : m ≠ 0) (hm₁ : m ≠ 1) : strict_convex_on ℝ (set.Ioi 0) (λ (x : ℝ), x ^ m)"
        },
        {
          "sim_score": 0.5808110237121582,
          "doc_string": "`x^n`, `n : ℕ` is convex on `[0, +∞)` for all `n`",
          "statement": "theorem convex_on_pow (n : ℕ) : convex_on ℝ (set.Ici 0) (λ (x : ℝ), x ^ n)"
        }
      ],
      "codex_time": 3.8294329380150884,
      "search_time": 1.3569003070006147,
      "use_theorem_name": false
    },
    "outputs": [
      ": Convex Real.Exp ",
      " : Convex_on ℝ set.Univ Real.Exp ",
      " : Convex_on ℝ set.Univ (λ (x : ℝ), Exp x) ",
      ": Convex_on ℝ (-(1 : ℝ)) 1 Real.Exp ",
      ": Convex_on ℝ set.Univ Real.Exp "
    ],
    "answer": ": ConvexOn ℝ Set.univ Real.exp "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "exp_convex",
      "main_prompt": "The exponential function is convex.",
      "prompt": "Natural language version: \"The exponential function is convex.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 8.410151135991327,
      "use_theorem_name": false
    },
    "outputs": [
      "Exp_Convex : Convex ℝ ? ℝ Exp ",
      "_Convex ( F : ℝ → ℝ ) : Convex_on F ( set.Range F ) ",
      "Exp_Convex : _strict_inc ∘ expx ",
      "ExpConvex : Convex_on ℝ_as_MetricSpace Exp ",
      "Exp_Convex    (A B : ℝ) (h : A < B) (h₁ : 0 ≤ A) (h₂ : 0 ≤ B):   (Exp A + Exp B)/2 ≤ Exp ((A+B)/2) "
    ],
    "answer": ": ConvexOn ℝ Set.univ Real.exp "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "coprime_integer_span_sylvester_coin",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"For any two relatively prime positive integers $a$ and $b$, every sufficiently large natural number $N$ can be written as a linear combination $ax + by$ of $a$ and $b$, where both $x$ and $y$ are natural numbers.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "For any two relatively prime positive integers $a$ and $b$, every sufficiently large natural number $N$ can be written as a linear combination $ax + by$ of $a$ and $b$, where both $x$ and $y$ are natural numbers.",
      "codex_time": 5.598308807995636,
      "use_theorem_name": false
    },
    "outputs": [
      "(A B : ℕ) (hab : A ≠ 0 ∧ B ≠ 0 ∧ A.Gcd B = 1)  (N : ℕ) (hN : ∃ S : set ℕ, Finite S ∧ ∑ x in S, B * x = N):  ∃ x y : ℕ, A * x + B * y = N ",
      "(A B N : ℕ)  (hab : Gcd A B = 1) (hN : N ≥ A + B) :  ∃ x y : ℕ, N = A * x + B * y ",
      "(A B : ℕ) (h : Gcd A B = 1)  (N : ℕ) (hN : N > B) :  ∃ x y : ℕ, A * x + B * y = N ",
      "(A B : ℕ) (hab : Gcd A B = 1) (N : ℕ) (hN : N ≥ (A + 1) * (B + 1) - 1) :  ∃ x y : ℕ, N = A*x + B*y ",
      "(A B : ℕ) (hab : Gcd A B = 1) :  ∀ N : ℕ, ∃ (x y : ℕ), N = A * x + B * y "
    ],
    "answer": ": ∀ a b : ℕ, a > 0 → b > 0 → Nat.coprime a b → ∃ m : ℕ, ∀ N : ℕ, N > m → ∃ x y : ℕ, N = a*x + b*y "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "coprime_integer_span_sylvester_coin",
      "main_prompt": "For any two relatively prime positive integers $a$ and $b$, every sufficiently large natural number $N$ can be written as a linear combination $ax + by$ of $a$ and $b$, where both $x$ and $y$ are natural numbers.",
      "prompt": "Natural language version: \" **Bézout's lemma**: given `x y : ℕ`, `gcd x y = x * a + y * b`, where `a = gcd_a x y` and `b = gcd_b x y` are computed by the extended Euclidean algorithm.\" Translate the natural language version to a Lean mathlib version:\n theorem (x y : ℕ) :\n↑(x.gcd y) = ↑x * x.gcd_a y + ↑y * x.gcd_b y := \n\nNatural language version: \" For nonzero integers `a` and `b`, `gcd a b` is the smallest positive natural number that can be written in the form `a * x + b * y` for some pair of integers `x` and `y`\" Translate the natural language version to a Lean mathlib version:\n theorem {a b : ℤ} (ha : a ≠ 0) :\nis_least {n : ℕ | 0 < n ∧ ∃ (x y : ℤ), ↑n = a * x + b * y} (a.gcd b) := \n\nNatural language version: \"If ` x * y = a * p ^ n` where `p` is prime, then `x` and `y` can both be written  as the product of a power of `p` and a divisor of `a`.\" Translate the natural language version to a Lean mathlib version:\n theorem {R : Type u_1} [cancel_comm_monoid_with_zero R] {x y a p : R} {n : ℕ} (hp : prime p) (hx : x * y = a * p ^ n) :\n∃ (i j : ℕ) (b c : R), i + j = n ∧ a = b * c ∧ x = b * p ^ i ∧ y = c * p ^ j := \n\nNatural language version: \" Euclid's lemma: if `a ∣ b * c` and `a` and `c` have no common prime factors, `a ∣ b`. Compare `is_coprime.dvd_of_dvd_mul_left`.\" Translate the natural language version to a Lean mathlib version:\n theorem {R : Type u_2} [cancel_comm_monoid_with_zero R] [unique_factorization_monoid R] {a b c : R} (ha : a ≠ 0) :\n(∀ {d : R}, d ∣ a → d ∣ c → ¬prime d) → a ∣ b * c → a ∣ b := \n\nNatural language version: \"For any two relatively prime positive integers $a$ and $b$, every sufficiently large natural number $N$ can be written as a linear combination $ax + by$ of $a$ and $b$, where both $x$ and $y$ are natural numbers.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.5282862186431885,
          "doc_string": " **Bézout's lemma**: given `x y : ℕ`, `gcd x y = x * a + y * b`, where `a = gcd_a x y` and `b = gcd_b x y` are computed by the extended Euclidean algorithm.",
          "statement": "theorem nat.gcd_eq_gcd_ab (x y : ℕ) : ↑(x.gcd y) = ↑x * x.gcd_a y + ↑y * x.gcd_b y"
        },
        {
          "sim_score": 0.5160197615623474,
          "doc_string": " For nonzero integers `a` and `b`, `gcd a b` is the smallest positive natural number that can be written in the form `a * x + b * y` for some pair of integers `x` and `y`",
          "statement": "theorem int.gcd_least_linear {a b : ℤ} (ha : a ≠ 0) : is_least {n : ℕ | 0 < n ∧ ∃ (x y : ℤ), ↑n = a * x + b * y} (a.gcd b)"
        },
        {
          "sim_score": 0.4904349744319916,
          "doc_string": "If ` x * y = a * p ^ n` where `p` is prime, then `x` and `y` can both be written  as the product of a power of `p` and a divisor of `a`.",
          "statement": "theorem mul_eq_mul_prime_pow {R : Type u_1} [cancel_comm_monoid_with_zero R] {x y a p : R} {n : ℕ} (hp : prime p) (hx : x * y = a * p ^ n) : ∃ (i j : ℕ) (b c : R), i + j = n ∧ a = b * c ∧ x = b * p ^ i ∧ y = c * p ^ j"
        },
        {
          "sim_score": 0.47909241914749146,
          "doc_string": " Euclid's lemma: if `a ∣ b * c` and `a` and `c` have no common prime factors, `a ∣ b`. Compare `is_coprime.dvd_of_dvd_mul_left`.",
          "statement": "theorem unique_factorization_monoid.dvd_of_dvd_mul_left_of_no_prime_factors {R : Type u_2} [cancel_comm_monoid_with_zero R] [unique_factorization_monoid R] {a b c : R} (ha : a ≠ 0) : (∀ {d : R}, d ∣ a → d ∣ c → ¬prime d) → a ∣ b * c → a ∣ b"
        }
      ],
      "codex_time": 6.606359152006917,
      "search_time": 1.4123720790084917,
      "use_theorem_name": false
    },
    "outputs": [
      "{R : type u_2} [CommRing R] (x y : R) (ha : 0 < x) (hb : 0 < y) : ∃ (i j : ℕ), ∃ (A B : R), i + j > j ∧ ↑i * x + ↑j * y = A * ↑x + B * ↑y ",
      "(x A B : ℕ) (hab : A.Gcd B = 1) : ∃ (y : ℕ), A * x + B * y = ↑x * ↑B ",
      "{A B : ℕ} (hab : IsCoprime A B) : ∃ k : ℕ, ∀ (n : ℕ), n < k → ∃ (x y : ℕ), n = A * x + B * y ",
      "{A B : ℕ} (h : A.IsCoprime B) : ∃ x y z : ℕ, z ≥ max (A * B) 2 ∧ x = z % A ∧ y = z % B ∧ ↑z = ↑A * x + ↑B * y ",
      "{n A B : ℕ} (hab : A.IsCoprime B) : ∃ (x y : ℕ), n = A * x + B * y ∧ y < B "
    ],
    "answer": ": ∀ a b : ℕ, a > 0 → b > 0 → Nat.coprime a b → ∃ m : ℕ, ∀ N : ℕ, N > m → ∃ x y : ℕ, N = a*x + b*y "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "coprime_integer_span_sylvester_coin",
      "main_prompt": "For any two relatively prime positive integers $a$ and $b$, every sufficiently large natural number $N$ can be written as a linear combination $ax + by$ of $a$ and $b$, where both $x$ and $y$ are natural numbers.",
      "prompt": "Natural language version: \"For any two relatively prime positive integers $a$ and $b$, every sufficiently large natural number $N$ can be written as a linear combination $ax + by$ of $a$ and $b$, where both $x$ and $y$ are natural numbers.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 11.055162864999147,
      "use_theorem_name": false
    },
    "outputs": [
      "every_natural_number__A_Linear_combination_of_A_and_B : ∀ (k : ℕ), ∃ (x y : ℕ), k = A * x + B * y ",
      "Linear_comb {A B x y N : ℕ} [h : IsCoprime A B] (hax : A > 0) (hbx : B > 0) (Gcd1 : N = A * x + B * y) : ∃ x y : ℕ  Goal: Any sufficiently Large natural number $N$  of the form $N = A * x + B * y$ where $x$ and $y$ are natural numbers Translate the English description to A Lean lemma.  lemma Gcd_Eq_Dvd [h : IsCoprime A B] (hbx : B > 0) : ∃ x y :",
      "Up_to_Prime_factorization : ∀ A B : ℕ+, (A.1.IsCoprime B.1) → ∀ N : ℕ, ∃ x y : ℕ+, N = A.1 * x.1 + B.1 * y.1 ",
      "Euler :  ∀ A B ∀ (h1 : Nat.Prime A) (h2 : Nat.Prime B) (h3A : A ≠ B), ∀ N, ∃ x y, A * x + B * y = N ",
      "rlt_prop (A B : ℕ+) :  ∀ n : ℕ+, ∃ x y : ℕ, n = A * x + B * y     proof    assume n,  have Fact : n < A+B, from (@Finite_Nat (A+B) n dec_trivial),  have Fact : n = 0 ∨ 0 < n, by exact  let h : n = 0 ∨ 0 < n "
    ],
    "answer": ": ∀ a b : ℕ, a > 0 → b > 0 → Nat.coprime a b → ∃ m : ℕ, ∀ N : ℕ, N > m → ∃ x y : ℕ, N = a*x + b*y "
  },
  {
    "metadata": {
      "prompt_type": "fixed few shot",
      "theorem_name": "frobenius_pow_sum_eq_sum_pow",
      "prompt": "Natural language version: \"If z_1, ..., z_n are complex, then |z_1 + z_2 + ... + z_n| <= |z_1| + |z_2| + ... + |z_n|.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (f : ℕ → ℂ) :\nabs (∑ i in finset.range n, f i) ≤ ∑ i in finset.range n, abs (f i) :=\n\nNatural language version: \"If x and y are in R^n, then |x+y|^2 + |x-y|^2 = 2|x|^2 + 2|y|^2.\" Translate the natural language version to a Lean mathlib version:\n theorem (n : ℕ) (x y : euclidean_space ℝ (fin n)) :\n ∥x + y∥^2 + ∥x - y∥^2 = 2*∥x∥^2 + 2*∥y∥^2 :=\n\nNatural language version: \"If x is an element of infinite order in G, prove that the elements x^n, n ∈ Z are all distinct.\" Translate the natural language version to a Lean mathlib version:\n theorem (G : Type*) [group G] (x : G)\n (hx : x ≠ 1) (hx_inf : ∀ n : ℕ, x ^ n ≠ 1) :\n ∀ m n : ℤ, m ≠ n → x ^ m ≠ x ^ n :=\n\nNatural language version: \"Let X be a topological space; let A be a subset of X. Suppose that for each x ∈ A there is an open set U containing x such that U ⊆ A. Show that A is open in X\" Translate the natural language version to a Lean mathlib version:\n theorem (X : Type*) [topological_space X]\n (A : set X) (hA : ∀ x ∈ A, ∃ U : set X, is_open U ∧ x ∈ U ∧ U ⊆ A):\n is_open A :=\n\nNatural language version: \"In a commutative ring with prime characteristic $p$, the $p$th power of the sum of two elements is equal to the sum of the $p$th powers of the elements.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "main_prompt": "In a commutative ring with prime characteristic $p$, the $p$th power of the sum of two elements is equal to the sum of the $p$th powers of the elements.",
      "codex_time": 4.085696828988148,
      "use_theorem_name": false
    },
    "outputs": [
      "(P : ℕ) (P_Prime : Prime P)  (R : type*)  [CommRing R] [Char_P R P] (n m : R) :  (n + m)^P = n^P + m^P ",
      "(R : type*) [CommRing R]  [Char_P R] (P : ℕ) [Fact (Char_P R) = Some P]     (i j : R) : i ^ P + j ^ P = (i + j) ^ P ",
      "(A : type*) [CommRing A] (P : ℕ) (hp : Prime P)  (F g : A) : (F + g) ^ P = F ^ P + g ^ P ",
      "(R : type*) [CommRing R] (P : ℕ) (hp : Nat.Prime P)  (x y : R) :  (x + y)^P = x^P + y^P ",
      "(P : ℕ) (h : P > 0) (hp : P.Prime)  (R : type*) [CommRing R] (hp' : characteristic R = P)  (x y : R) : (x + y) ^ P = x ^ P + y ^ P "
    ],
    "answer": "{R : Type _} [CommRingₓ R] : (p : ℕ) → Prime p → CharP R p → ∀ a b : R, (a + b)^p = a^p + b^p "
  },
  {
    "metadata": {
      "prompt_type": "retrieved k few shot",
      "theorem_name": "frobenius_pow_sum_eq_sum_pow",
      "main_prompt": "In a commutative ring with prime characteristic $p$, the $p$th power of the sum of two elements is equal to the sum of the $p$th powers of the elements.",
      "prompt": "Natural language version: \"For coprime `a` and `b`, the power of `p` in `a * b` is the sum of the powers in `a` and `b`\" Translate the natural language version to a Lean mathlib version:\n theorem {a b : ℕ} (hab : a.coprime b) :\n(a * b).factorization = a.factorization + b.factorization := \n\nNatural language version: \"For coprime `a` and `b`, the power of `p` in `a * b` is the sum of the powers in `a` and `b`\" Translate the natural language version to a Lean mathlib version:\n theorem {p a b : ℕ} (hab : a.coprime b) :\n⇑((a * b).factorization) p = ⇑(a.factorization) p + ⇑(b.factorization) p := \n\nNatural language version: \"For nonzero `a` and `b`, the power of `p` in `a * b` is the sum of the powers in `a` and `b`\" Translate the natural language version to a Lean mathlib version:\n theorem {a b : ℕ} (ha : a ≠ 0) (hb : b ≠ 0) :\n(a * b).factorization = a.factorization + b.factorization := \n\nNatural language version: \"For nonzero `a` and `b`, the power of `p` in `a * b` is the sum of the powers in `a` and `b`\" Translate the natural language version to a Lean mathlib version:\n theorem {α : Type u_1} [cancel_comm_monoid_with_zero α] [unique_factorization_monoid α] [normalization_monoid α] [decidable_eq α] {a b : α} (ha : a ≠ 0) (hb : b ≠ 0) :\nfactorization (a * b) = factorization a + factorization b := \n\nNatural language version: \"In a commutative ring with prime characteristic $p$, the $p$th power of the sum of two elements is equal to the sum of the $p$th powers of the elements.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "ret-prompts": [
        {
          "sim_score": 0.6287815570831299,
          "doc_string": "For coprime `a` and `b`, the power of `p` in `a * b` is the sum of the powers in `a` and `b`",
          "statement": "theorem nat.factorization_mul_of_coprime {a b : ℕ} (hab : a.coprime b) : (a * b).factorization = a.factorization + b.factorization"
        },
        {
          "sim_score": 0.6287815570831299,
          "doc_string": "For coprime `a` and `b`, the power of `p` in `a * b` is the sum of the powers in `a` and `b`",
          "statement": "theorem nat.factorization_mul_apply_of_coprime {p a b : ℕ} (hab : a.coprime b) : ⇑((a * b).factorization) p = ⇑(a.factorization) p + ⇑(b.factorization) p"
        },
        {
          "sim_score": 0.6084638833999634,
          "doc_string": "For nonzero `a` and `b`, the power of `p` in `a * b` is the sum of the powers in `a` and `b`",
          "statement": "theorem nat.factorization_mul {a b : ℕ} (ha : a ≠ 0) (hb : b ≠ 0) : (a * b).factorization = a.factorization + b.factorization"
        },
        {
          "sim_score": 0.6084638833999634,
          "doc_string": "For nonzero `a` and `b`, the power of `p` in `a * b` is the sum of the powers in `a` and `b`",
          "statement": "theorem factorization_mul {α : Type u_1} [cancel_comm_monoid_with_zero α] [unique_factorization_monoid α] [normalization_monoid α] [decidable_eq α] {a b : α} (ha : a ≠ 0) (hb : b ≠ 0) : factorization (a * b) = factorization a + factorization b"
        }
      ],
      "codex_time": 7.542835899017518,
      "search_time": 1.3461158830032218,
      "use_theorem_name": false
    },
    "outputs": [
      "{α : type u_1} [CommRing α] [DecidableEq α] (hp : ∃! n : ℕ, h.characteristic = P.Prime_Pow n) {A B : α} : (A + B)^P = A^P + B^P ",
      "{α : type u_1} [CommRing α] (P : ℕ) (P_Prime : Prime P) [Char_P α P] (A B : α) : (A + B)^[P] = A^[P] + B^[P] ",
      "{α : type u_1} [CommRing α] [DecidableEq α] (hp : Char_P α) {A B : α} : (↑A + ↑B) ^ P = ↑A ^ P + ↑B ^ P ",
      "{α : type u_1} [CommSemiring α] (P : ℕ) (hp : Nat.Prime P) [Char_P α P hp] {A B : α} : A ^ P + B ^ P = (A + B) ^ P ",
      "{α : type u_1} [CommRing α] (P : ℕ) (hp : Prime P) (hchar : Char_P α P) {A B : α} : (A + B)^P = A^P + B^P "
    ],
    "answer": "{R : Type _} [CommRingₓ R] : (p : ℕ) → Prime p → CharP R p → ∀ a b : R, (a + b)^p = a^p + b^p "
  },
  {
    "metadata": {
      "prompt_type": "none few shot",
      "theorem_name": "frobenius_pow_sum_eq_sum_pow",
      "main_prompt": "In a commutative ring with prime characteristic $p$, the $p$th power of the sum of two elements is equal to the sum of the $p$th powers of the elements.",
      "prompt": "Natural language version: \"In a commutative ring with prime characteristic $p$, the $p$th power of the sum of two elements is equal to the sum of the $p$th powers of the elements.\" Translate the natural language version to a Lean mathlib version:\n theorem ",
      "codex_time": 9.646428829000797,
      "use_theorem_name": false
    },
    "outputs": [
      "Sum_Pow_Swap_P : ∀ (R : type) [CommRing R] [Char_P R P] (A B : R), (A + B) ^ P = A ^ P + B ^ P Proof. Abort.  -- Exercises at the end of chapter 3 -- 3.7. Recall that the Ring of Polynomial Functions $R ",
      "my_lemma :  CommRing α → Prime P → A ∈ α → B ∈ α → (A + B)^P = A^P + B^P ",
      "pang1 (R : type) [CommRing R] [Char_P R.Prime P] {A B:R}: (A+B)^P = A^P + B^P ",
      "Nat_lang_problem2 : ∀ { R : type } [ CommRing R ] [ hp : Prime ( Char_P R ) ] { A B : R }, (A + B) ^ Char_P R = A^Char_P R + B^Char_P R ",
      "Multiset . Map_Eq_of_Equiv_on_image ( interv al : set ℤ) ( Equiv : Equivalence interv al) : ∀( F g : ℤ → ℤ), ( ∀x∈interv al, fx ≡ gx mod A ) → Multiset . Map F ( interv al . to_Multiset ) = Multiset . Map g ( interv al . to_Multiset ) "
    ],
    "answer": "{R : Type _} [CommRingₓ R] : (p : ℕ) → Prime p → CharP R p → ∀ a b : R, (a + b)^p = a^p + b^p "
  }
]