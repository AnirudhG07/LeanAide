{"noDocExamples":[],"kind":"Lean.Parser.Term.app","examples":[{"type":"Set UpperHalfPlane","name":"ModularGroup.fd","isProp":false,"doc":"The standard (closed) fundamental domain of the action of `SL(2,ℤ)` on `ℍ`. ","depth":1},{"type":"Linarith.LinarithM Unit","name":"Linarith.elimAllVarsM","isProp":false,"doc":"`elimAllVarsM` eliminates all variables from the linarith state, leaving it with a set of\nground comparisons. If this succeeds without exception, the original `linarith` state is consistent.\n","depth":1},{"type":"Computability.FinEncoding ℕ","name":"Computability.finEncodingNatBool","isProp":false,"doc":"A binary fin_encoding of ℕ in bool. ","depth":1}],"count":209724}
{"noDocExamples":[],"kind":"Lean.Parser.Term.type","examples":[{"type":"Type (u + 1)","name":"SSet.Augmented","isProp":false,"doc":"The category of augmented simplicial sets, as a particular case of\naugmented simplicial objects. ","depth":0},{"type":"Type (max (u + 1) u (v + 1))","name":"CategoryTheory.QuivCat","isProp":false,"doc":"Category of quivers. ","depth":0},{"type":"Type (u_1 + 1)","name":"NatOrdinal","isProp":false,"doc":"A type synonym for ordinals with natural addition and multiplication. ","depth":0}],"count":185658}
{"noDocExamples":[],"kind":"Lean.Parser.Term.forall","examples":[{"type":"∀ {α : Prop}, α","name":"lcProof","isProp":true,"doc":"Auxiliary unsafe constant used by the Compiler when erasing proofs from code.\n\nIt may look strange to have an axiom that says \"every proposition is true\",\nsince this is obviously unsound, but the `unsafe` marker ensures that the\nkernel will not let this through into regular proofs. The lower levels of the\ncode generator don't need proofs in terms, so this is used to stub the proofs\nout.\n","depth":1},{"type":"∀ (n : ℕ), Int.NonNeg (Int.ofNat n)","name":"Int.NonNeg.mk","isProp":true,"doc":"Sole constructor, proving that `ofNat n` is positive. ","depth":3},{"type":"∀ (o : Ordinal.{u_1}), SetTheory.PGame.Numeric (Ordinal.toPGame o)","name":"SetTheory.PGame.numeric_toPGame","isProp":true,"doc":"Ordinal games are numeric. ","depth":3}],"count":175205}
{"noDocExamples":[],"kind":"«term_=_»","examples":[{"type":"Cardinal.mk ℂ = Cardinal.continuum","name":"mk_complex","isProp":true,"doc":"The cardinality of the complex numbers, as a type. ","depth":3},{"type":"Cardinal.mk ℝ = Cardinal.continuum","name":"Cardinal.mk_real","isProp":true,"doc":"The cardinality of the reals, as a type. ","depth":3},{"type":"Ordinal.lift.{max u v, u} = Ordinal.lift.{v, u}","name":"Ordinal.lift_umax","isProp":true,"doc":"`lift.{max u v, u}` equals `lift.{v, u}`. ","depth":4}],"count":102087}
{"noDocExamples":[],"kind":"Lean.Parser.Term.arrow","examples":[{"type":"AlgebraicGeometry.Scheme → Prop","name":"AlgebraicGeometry.IsReduced","isProp":false,"doc":"A scheme `X` is reduced if all `𝒪ₓ(U)` are reduced. ","depth":1},{"type":"Simps.Config → Bool","name":"Simps.Config.fullyApplied","isProp":false,"doc":"Generated lemmas that are fully applied, i.e. generates equalities between applied functions.\nSet this to `false` to generate equalities between functions. ","depth":1},{"type":"Lean.Expr → Lean.Expr","name":"SlimCheck.Decorations.addDecorations","isProp":false,"doc":"Traverse the syntax of a proposition to find universal quantifiers\nquantifiers and add `NamedBinder` annotations next to them. ","depth":1}],"count":95379}
{"noDocExamples":[],"kind":"coeNotation","examples":[{"type":"↑unitInterval → ℝ","name":"Path.Homotopy.transAssocReparamAux","isProp":false,"doc":"Auxiliary function for `trans_assoc_reparam`. ","depth":3},{"type":"↑unitInterval → ↑unitInterval","name":"unitInterval.symm","isProp":false,"doc":"Unit interval central symmetry. ","depth":3},{"type":"↑unitInterval → ℝ","name":"Path.Homotopy.transReflReparamAux","isProp":false,"doc":"Auxiliary function for `trans_refl_reparam`. ","depth":3}],"count":52144}
{"noDocExamples":[],"kind":"Lean.Parser.Term.depArrow","examples":[{"type":"{α : Sort u} → α","name":"lcUnreachable","isProp":false,"doc":"Auxiliary unsafe constant used by the Compiler to mark unreachable code.\n\nLike `lcProof`, this is an `unsafe axiom`, which means that even though it is\nnot sound, the kernel will not let us use it for regular proofs.\n\nExecuting this expression to actually synthesize a value of type `α` causes\n**immediate undefined behavior**, and the compiler does take advantage of this\nto optimize the code assuming that it is not called. If it is not optimized out,\nit is likely to appear as a print message saying \"unreachable code\", but this\nbehavior is not guaranteed or stable in any way.\n","depth":1},{"type":"{ι : Type u_5} → Type u_5","name":"VectorBundleCore.Index","isProp":false,"doc":"The index set of a vector bundle core, as a convenience function for dot notation ","depth":1},{"type":"{B : Type u_2} → Type u_2","name":"VectorBundleCore.Base","isProp":false,"doc":"The base space of a vector bundle core, as a convenience function for dot notation","depth":1}],"count":42864}
{"noDocExamples":[],"kind":"Lean.Parser.Term.proj","examples":[{"type":"(self : Pointed) → self.X","name":"Pointed.point","isProp":false,"doc":"the distinguished element ","depth":2},{"type":"{F : PFunctor} → PFunctor.M F → F.A","name":"PFunctor.M.head","isProp":false,"doc":"given a tree generated by `F`, `head` gives us the first piece of data\nit contains ","depth":3},{"type":"(self : PFunctor) → self.A → Type u","name":"PFunctor.B","isProp":false,"doc":"The child family of types ","depth":3}],"count":32972}
{"noDocExamples":[],"kind":"Lean.Parser.Term.explicitUniv","examples":[{"type":"Ordinal.{u}","name":"Ordinal.omega","isProp":false,"doc":"`ω` is the first infinite ordinal, defined as the order type of `ℕ`. ","depth":0},{"type":"Cardinal.{u}","name":"Cardinal.continuum","isProp":false,"doc":"Cardinality of continuum. ","depth":0},{"type":"PUnit.{u}","name":"PUnit.unit","isProp":false,"doc":"`PUnit.unit : PUnit` is the canonical element of the unit type. ","depth":0}],"count":27822}
{"noDocExamples":[],"kind":"Lean.Parser.Term.fun","examples":[{"type":"{α : Type u_1} → (s : Set α) → (fun x => ℕ) (Set.encard s)","name":"Set.ncard","isProp":false,"doc":"The cardinality of `s : Set α` . Has the junk value `0` if `s` is infinite ","depth":5},{"type":"{μ : YoungDiagram} → CoeFun (Ssyt μ) fun x => ℕ → ℕ → ℕ","name":"Ssyt.instCoeFunSsytForAllNat","isProp":false,"doc":"Helper instance for when there's too many metavariables to apply `CoeFun.coe` directly. ","depth":5},{"type":"Filter.Tendsto (fun n => Stirling.stirlingSeq n) Filter.atTop (nhds (Real.sqrt Real.pi))","name":"Stirling.tendsto_stirlingSeq_sqrt_pi","isProp":true,"doc":"**Stirling's Formula** ","depth":6}],"count":25585}
{"noDocExamples":[],"kind":"«term_∈_»","examples":[{"type":"¬Class.univ ∈ Class.univ","name":"Class.univ_not_mem_univ","isProp":true,"doc":"**There is no universal set.**\nThis is stated as `univ ∉ univ`, meaning that `univ` (the class of all sets) is proper (does not\nbelong to the class of all sets). ","depth":6},{"type":"∀ (A : Class), Class.iota A ∈ Class.univ","name":"Class.iota_ex","isProp":true,"doc":"Unlike the other set constructors, the `iota` definite descriptor\nis a set for any set input, but not constructively so, so there is no\nassociated `Class → Set` function. ","depth":6},{"type":"∀ {M : Type u_1} [inst : Monoid M] {x : M}, x ∈ powers x","name":"powers.self_mem","isProp":true,"doc":"An element of a monoid is in the set of that element's natural number powers. ","depth":8}],"count":24782}
{"noDocExamples":[],"kind":"termℕ","examples":[{"type":"ℕ","name":"System.Platform.numBits","isProp":false,"doc":"Gets the word size of the platform. That is, whether the platform is 64 or 32 bits. ","depth":0},{"type":"ℕ","name":"Nat.zero","isProp":false,"doc":"`Nat.zero`, normally written `0 : Nat`, is the smallest natural number.\nThis is one of the two constructors of `Nat`. ","depth":0},{"type":"ℕ","name":"Nat.Linear.fixedVar","isProp":false,"doc":"When encoding polynomials. We use `fixedVar` for encoding numerals.\nThe denotation of `fixedVar` is always `1`. ","depth":0}],"count":22643}
{"noDocExamples":[],"kind":"«term_≤_»","examples":[{"type":"∀ (L : List ℕ), List.headI L ≤ List.sum L","name":"List.headI_le_sum","isProp":true,"doc":"This relies on `default ℕ = 0`. ","depth":6},{"type":"∀ {p : ℝ}, p ≤ 0 → ENNReal.ofReal p = 0","name":"ENNReal.ofReal_of_nonpos","isProp":true,"doc":"**Alias** of the reverse direction of `ENNReal.ofReal_eq_zero`.","depth":6},{"type":"{x : SetTheory.PGame} →\n  x ≤ 0 → (i : SetTheory.PGame.LeftMoves x) → SetTheory.PGame.RightMoves (SetTheory.PGame.moveLeft x i)","name":"SetTheory.PGame.rightResponse","isProp":false,"doc":"Given a game won by the right player when they play second, provide a response to any move by\nleft. ","depth":6}],"count":20225}
{"noDocExamples":[],"kind":"«term_+_»","examples":[{"type":"∀ {a : ℕ}, Real.sqrt ↑a ≤ ↑(Nat.sqrt a) + 1","name":"Real.real_sqrt_le_nat_sqrt_succ","isProp":true,"doc":"The real square root is at most the natural square root plus one ","depth":8},{"type":"(n : ℕ) → Fin (n + 1)","name":"Fin.last","isProp":false,"doc":"The greatest value of `Fin (n+1)`. ","depth":8},{"type":"∀ (n : ℕ), List.length (List.Nat.antidiagonal n) = n + 1","name":"List.Nat.length_antidiagonal","isProp":true,"doc":"The length of the antidiagonal of `n` is `n + 1`. ","depth":8}],"count":18726}
{"noDocExamples":[],"kind":"«term_↔_»","examples":[{"type":"{a : Prop} → (b : Prop) → (a ↔ b) → [inst : Decidable b] → Decidable a","name":"decidable_of_iff'","isProp":false,"doc":"Transfer decidability of `b` to decidability of `a`, if the propositions are equivalent.\nThis is the same as `decidable_of_iff` but the iff is flipped. ","depth":5},{"type":"∀ (p : True → Prop), (∀ (x : True), p x) ↔ p True.intro","name":"forall_true_left","isProp":true,"doc":"See `IsEmpty.forall_iff` for the `False` version. ","depth":5},{"type":"∀ {a b : Prop}, (a ↔ b) → b → a","name":"Iff.mpr","isProp":true,"doc":"Modus ponens for if and only if, reversed. If `a ↔ b` and `b`, then `a`. ","depth":5}],"count":18359}
{"noDocExamples":[],"kind":"«term_*_»","examples":[{"type":"∀ (x : SetTheory.PGame), 0 * x ≈ 0","name":"SetTheory.PGame.zero_mul_equiv","isProp":true,"doc":"`0 * x` is equivalent to `0`. ","depth":9},{"type":"∀ {n : ℕ} [inst : NeZero n], Fintype.card (DihedralGroup n) = 2 * n","name":"DihedralGroup.card","isProp":true,"doc":"If `0 < n`, then `DihedralGroup n` has `2n` elements.\n","depth":9},{"type":"(x : SetTheory.PGame) → SetTheory.PGame.Relabelling (1 * x) x","name":"SetTheory.PGame.oneMulRelabelling","isProp":false,"doc":"`1 * x` has the same moves as `x`. ","depth":9}],"count":16520}
{"noDocExamples":[],"kind":"«term_⟶_»","examples":[{"type":"CategoryTheory.Limits.WalkingCospan.right ⟶ CategoryTheory.Limits.WalkingCospan.one","name":"CategoryTheory.Limits.WalkingCospan.Hom.inr","isProp":false,"doc":"The right arrow of the walking cospan. ","depth":5},{"type":"CategoryTheory.Limits.WalkingSpan.zero ⟶ CategoryTheory.Limits.WalkingSpan.left","name":"CategoryTheory.Limits.WalkingSpan.Hom.fst","isProp":false,"doc":"The left arrow of the walking span. ","depth":5},{"type":"CategoryTheory.Limits.WalkingSpan.zero ⟶ CategoryTheory.Limits.WalkingSpan.right","name":"CategoryTheory.Limits.WalkingSpan.Hom.snd","isProp":false,"doc":"The right arrow of the walking span. ","depth":5}],"count":14669}
{"noDocExamples":[],"kind":"«term_<_»","examples":[{"type":"∀ (x : ℝ), 0 < Real.cosh x","name":"Real.cosh_pos","isProp":true,"doc":"`Real.cosh` is always positive ","depth":6},{"type":"∀ {n : ℕ} (self : Fin n), ↑self < n","name":"Fin.isLt","isProp":true,"doc":"If `i : Fin n`, then `i.2` is a proof that `i.1 < n`. ","depth":6},{"type":"{a : ℕ} → 1 < a → ℕ → ℕ × ℕ","name":"Pell.pell","isProp":false,"doc":"The Pell sequences, i.e. the sequence of integer solutions to `x ^ 2 - d * y ^ 2 = 1`, where\n`d = a ^ 2 - 1`, defined together in mutual recursion. ","depth":7}],"count":10857}
{"noDocExamples":[],"kind":"termℝ","examples":[{"type":"ℝ","name":"Real.pi","isProp":false,"doc":"The number π = 3.14159265... Defined here using choice as twice a zero of cos in [1,2], from\nwhich one can derive all its properties. For explicit bounds on π, see `Data.Real.Pi.Bounds`. ","depth":0},{"type":"ℝ","name":"goldenRatio","isProp":false,"doc":"The golden ratio `φ := (1 + √5)/2`. ","depth":0},{"type":"ℝ","name":"goldenConj","isProp":false,"doc":"The conjugate of the golden ratio `ψ := (1 - √5)/2`. ","depth":0}],"count":9880}
{"noDocExamples":[],"kind":"Lean.Parser.Term.prop","examples":[{"type":"Prop","name":"UnivLE","isProp":false,"doc":"A class expressing a universe inequality. `UnivLE.{u, v}` expresses that `u ≤ v`.\n\nThere are (at least) two plausible definitions for `u ≤ v`:\n* strong: `∀ α : Type max u v, Small.{v} α`\n* weak: `∀ α : Type u, Small.{v} α`\n\nThe weak definition has the advantage of being transitive.\nHowever only under the strong definition do we have `Small.{v} ((α : Type u) → (β : Type v))`,\nwhich is essential for proving that `Type v` has `Type u`-indexed limits when `u ≤ v`.\n\nThe strong definition implies the weaker definition (see below),\nbut we can not prove the reverse implication.\nThis is because in Lean's type theory, while `max u v` is at least at big as `u` and `v`,\nit could be bigger than both!\n","depth":0},{"type":"Prop","name":"True","isProp":false,"doc":"`True` is a proposition and has only an introduction rule, `True.intro : True`.\nIn other words, `True` is simply true, and has a canonical proof, `True.intro`\nFor more information: [Propositional Logic](https://leanprover.github.io/theorem_proving_in_lean4/propositions_and_proofs.html#propositional-logic)\n","depth":0},{"type":"Prop","name":"False","isProp":false,"doc":"`False` is the empty proposition. Thus, it has no introduction rules.\nIt represents a contradiction. `False` elimination rule, `False.rec`,\nexpresses the fact that anything follows from a contradiction.\nThis rule is sometimes called ex falso (short for ex falso sequitur quodlibet),\nor the principle of explosion.\nFor more information: [Propositional Logic](https://leanprover.github.io/theorem_proving_in_lean4/propositions_and_proofs.html#propositional-logic)\n","depth":0}],"count":9679}
{"noDocExamples":[],"kind":"Lean.Parser.Term.hole","examples":[{"type":"(n : ℕ) → Finset ((_ : Fin n) × Fin n)","name":"Equiv.Perm.finPairsLT","isProp":false,"doc":"set of all pairs (⟨a, b⟩ : Σ a : fin n, fin n) such that b < a ","depth":5},{"type":"{α : Type u_7} → {β : Type u_8} → α × β → (_ : α) × β","name":"Prod.toSigma","isProp":false,"doc":"Convert a product type to a Σ-type. ","depth":5},{"type":"(α : Type u_1) → (_ : α) × PUnit.{u_2 + 1} ≃ α","name":"Equiv.sigmaPUnit","isProp":false,"doc":"`PUnit` is a right identity for dependent type product up to an equivalence. ","depth":5}],"count":8863}
{"noDocExamples":[],"kind":"«term{_:_//_}»","examples":[{"type":"∀ {α : Sort u_1}, IsEmpty { _a // False }","name":"Subtype.isEmpty_false","isProp":true,"doc":"subtypes by false are false. ","depth":4},{"type":"ZFSet ≃ { s // Small.{u, u + 1} ↑s }","name":"ZFSet.toSet_equiv","isProp":false,"doc":"`ZFSet.toSet` as an equivalence. ","depth":6},{"type":"{α : Type u_1} → {P : α → Prop} → (∃ x, P x) → { x // P x }","name":"Classical.subtype_of_exists","isProp":false,"doc":"A version of `Classical.indefiniteDescription` which is definitionally equal to a pair ","depth":6}],"count":8013}
{"noDocExamples":[],"kind":"«term_≠_»","examples":[{"type":"∀ (self : ℚ), self.den ≠ 0","name":"Rat.den_nz","isProp":true,"doc":"The denominator is nonzero. ","depth":5},{"type":"{α : Type u_3} → Nat.card α ≠ 0 → α ≃ Fin (Nat.card α)","name":"Nat.equivFinOfCardPos","isProp":false,"doc":"If the cardinality is positive, that means it is a finite type, so there is\nan equivalence between `α` and `Fin (Nat.card α)`. See also `Finite.equivFin`. ","depth":6},{"type":"∀ {α : Type u} {s : Set α}, Nonempty ↑s ↔ s ≠ ∅","name":"Set.nonempty_iff_ne_empty'","isProp":true,"doc":"See also `not_nonempty_iff_eq_empty'`. ","depth":7}],"count":7757}
{"noDocExamples":[],"kind":"«term_•_»","examples":[{"type":"∀ {M : Type u} [inst : AddMonoid M] (a : M), 2 • a = a + a","name":"two_nsmul","isProp":true,"doc":"","depth":11},{"type":"∀ (n k : ℕ), Nat.factorization (n ^ k) = k • Nat.factorization n","name":"Nat.factorization_pow","isProp":true,"doc":"For any `p`, the power of `p` in `n^k` is `k` times the power in `n` ","depth":11},{"type":"∀ {G : Type u_1} [inst : AddMonoid G] {x : G}, (Function.Injective fun n => n • x) → ¬IsOfFinAddOrder x","name":"not_isOfFinAddOrder_of_injective_nsmul","isProp":true,"doc":"See also `injective_nsmul_iff_not_isOfFinAddOrder`.","depth":12}],"count":7680}
{"noDocExamples":[],"kind":"Lean.Parser.Term.typeAscription","examples":[{"type":"∀ {μ : YoungDiagram},\n  YoungDiagram.ofRowLens (YoungDiagram.rowLens μ) (_ : List.Sorted (fun x x_1 => x ≥ x_1) (YoungDiagram.rowLens μ)) = μ","name":"YoungDiagram.ofRowLens_to_rowLens_eq_self","isProp":true,"doc":"The left_inv direction of the equivalence ","depth":6},{"type":"∀ {α : Type u_1} (r : Setoid α), Setoid.mkClasses (Setoid.classes r) (_ : ∀ (a : α), ∃! b x, a ∈ b) = r","name":"Setoid.mkClasses_classes","isProp":true,"doc":"The equivalence relation made from the equivalence classes of an equivalence\nrelation r equals r. ","depth":8},{"type":"∀ {n : ℕ},\n  Finset.map { toFun := Prod.swap, inj' := (_ : Function.Injective Prod.swap) } (Finset.Nat.antidiagonal n) =\n    Finset.Nat.antidiagonal n","name":"Finset.Nat.map_swap_antidiagonal","isProp":true,"doc":"See also `Finset.map.map_prodComm_antidiagonal`. ","depth":11}],"count":7623}
{"noDocExamples":[],"kind":"«term_∧_»","examples":[{"type":"∀ {a b : Prop}, a ∧ b → a","name":"And.left","isProp":true,"doc":"Extract the left conjunct from a conjunction. `h : a ∧ b` then\n`h.left`, also notated as `h.1`, is a proof of `a`. ","depth":5},{"type":"∀ {a b : Prop}, a ∧ b → b","name":"And.right","isProp":true,"doc":"Extract the right conjunct from a conjunction. `h : a ∧ b` then\n`h.right`, also notated as `h.2`, is a proof of `b`. ","depth":5},{"type":"∀ {a b : Prop}, a → b → a ∧ b","name":"And.intro","isProp":true,"doc":"`And.intro : a → b → a ∧ b` is the constructor for the And operation. ","depth":6}],"count":7247}
{"noDocExamples":[],"kind":"Lean.Parser.Term.structInst","examples":[{"type":"∀ {α : Sort u} (a : α), { down := a }.down = a","name":"PLift.down_up","isProp":true,"doc":"Bijection between `α` and `PLift α` ","depth":7},{"type":"∀ {α : Type u} (b : ULift.{v, u} α), { down := b.down } = b","name":"ULift.up_down","isProp":true,"doc":"Bijection between `α` and `ULift.{v} α` ","depth":7},{"type":"∀ {α : Sort u} (b : PLift α), { down := b.down } = b","name":"PLift.up_down","isProp":true,"doc":"Bijection between `α` and `PLift α` ","depth":7}],"count":7144}
{"noDocExamples":[],"kind":"«term∃_,_»","examples":[{"type":"∀ {p : ℕ → Prop}, (∃ x, p x) → WellFounded (Nat.Upto.GT p)","name":"Nat.Upto.wf","isProp":true,"doc":"The \"greater than\" relation on `Upto p` is well founded if (and only if) there exists a value\nsatisfying `p`. ","depth":5},{"type":"{p : ℕ+ → Prop} → [inst : DecidablePred p] → (∃ n, p n) → ℕ+","name":"PNat.find","isProp":false,"doc":"If `p` is a (decidable) predicate on `ℕ+` and `hp : ∃ (n : ℕ+), p n` is a proof that\nthere exists some positive natural number satisfying `p`, then `PNat.find hp` is the\nsmallest positive natural number satisfying `p`. Note that `PNat.find` is protected,\nmeaning that you can't just write `find`, even if the `PNat` namespace is open.\n\nThe API for `PNat.find` is:\n\n* `PNat.find_spec` is the proof that `PNat.find hp` satisfies `p`.\n* `PNat.find_min` is the proof that if `m < PNat.find hp` then `m` does not satisfy `p`.\n* `PNat.find_min'` is the proof that if `m` does satisfy `p` then `PNat.find hp ≤ m`.\n","depth":6},{"type":"∀ (p : True → Prop), (∃ x, p x) ↔ p True.intro","name":"exists_true_left","isProp":true,"doc":"See `IsEmpty.exists_iff` for the `False` version. ","depth":6}],"count":6862}
{"noDocExamples":[],"kind":"Lean.Parser.Term.sort","examples":[{"type":"Sort u","name":"PEmpty","isProp":false,"doc":"The universe-polymorphic empty type. Prefer `Empty` or `False` where\npossible.\n","depth":0},{"type":"Sort u","name":"PUnit","isProp":false,"doc":"The unit type, the canonical type with one element, named `unit` or `()`.\nThis is the universe-polymorphic version of `Unit`; it is preferred to use\n`Unit` instead where applicable.\nFor more information about universe levels: [Types as objects](https://leanprover.github.io/theorem_proving_in_lean4/dependent_type_theory.html#types-as-objects)\n","depth":0},{"type":"Sort u → Prop","name":"Countable","isProp":false,"doc":"A type `α` is countable if there exists an injective map `α → ℕ`. ","depth":1}],"count":6038}
{"noDocExamples":[],"kind":"«term_-_»","examples":[{"type":"∀ (L : List ℕ), List.sum (List.tail L) = List.sum L - List.headI L","name":"List.tail_sum","isProp":true,"doc":"This relies on `default ℕ = 0`. ","depth":8},{"type":"(fun τ => jacobiTheta τ - 1) =O[Filter.comap Complex.im Filter.atTop] fun τ => rexp (-Real.pi * τ.im)","name":"isBigO_at_im_infty_jacobiTheta_sub_one","isProp":true,"doc":"The norm of `jacobiTheta τ - 1` decays exponentially as `im τ → ∞`. ","depth":9},{"type":"∀ {a : ENNReal}, a - ⊤ = 0","name":"ENNReal.sub_top","isProp":true,"doc":"This is a special case of `WithTop.sub_top` in the `ENNReal` namespace ","depth":9}],"count":5899}
{"noDocExamples":[],"kind":"«term_^_»","examples":[{"type":"∀ {q : ℕ+}, Fintype.card (LucasLehmer.X q) = ↑q ^ 2","name":"LucasLehmer.X.card_eq","isProp":true,"doc":"The cardinality of `X` is `q^2`. ","depth":8},{"type":"LinearRecurrence.IsSolution fibRec fun x => goldenConj ^ x","name":"geom_goldConj_isSol_fibRec","isProp":true,"doc":"The geometric sequence `fun n ↦ ψ^n` is a solution of `fibRec`. ","depth":8},{"type":"∀ (a : ℤ), ↑(Int.natAbs a) ≤ a ^ 2","name":"Int.natAbs_le_self_pow_two","isProp":true,"doc":"**Alias** of `Int.natAbs_le_self_sq`.","depth":8}],"count":5633}
{"noDocExamples":[],"kind":"«term-_»","examples":[{"type":"goldenConj⁻¹ = -goldenRatio","name":"inv_goldConj","isProp":true,"doc":"The opposite of the golden ratio is the inverse of its conjugate. ","depth":5},{"type":"goldenRatio⁻¹ = -goldenConj","name":"inv_gold","isProp":true,"doc":"The inverse of the golden ratio is the opposite of its conjugate. ","depth":5},{"type":"{x : SetTheory.PGame} → SetTheory.PGame.RightMoves x ≃ SetTheory.PGame.LeftMoves (-x)","name":"SetTheory.PGame.toLeftMovesNeg","isProp":false,"doc":"Turns a right move for `x` into a left move for `-x` and vice versa.\n\nEven though these types are the same (not definitionally so), this is the preferred way to convert\nbetween them. ","depth":6}],"count":4815}
{"noDocExamples":[],"kind":"termℤ","examples":[{"type":"ℤ","name":"Int.zero","isProp":false,"doc":"The number `0 : ℤ`, as a standalone definition. ","depth":0},{"type":"ℤ","name":"Int.one","isProp":false,"doc":"The number `1 : ℤ`, as a standalone definition. ","depth":0},{"type":"ℤ → ZNum","name":"ZNum.ofInt'","isProp":false,"doc":"Converts an `Int` to a `ZNum`. ","depth":1}],"count":4747}
{"noDocExamples":[],"kind":"«term_×_»","examples":[{"type":"PNat.XgcdType → ℕ × ℕ","name":"PNat.XgcdType.vp","isProp":false,"doc":"The map `v` gives the product of the matrix\n[[w, x], [y, z]] = [[wp + 1, x], [y, zp + 1]]\nand the vector [a, b] = [ap + 1, bp + 1].  The map\n`vp` gives [sp, tp] such that v = [sp + 1, tp + 1].\n","depth":3},{"type":"ℂ ≃ ℝ × ℝ","name":"Complex.equivRealProd","isProp":false,"doc":"The equivalence between the complex numbers and `ℝ × ℝ`. ","depth":3},{"type":"ℕ × ℕ → ℕ × ℕ","name":"PNat.XgcdType.succ₂","isProp":false,"doc":"`succ₂ [t.1, t.2] = [t.1.succ, t.2.succ]` ","depth":3}],"count":4725}
{"noDocExamples":[],"kind":"«term_⊆_»","examples":[{"type":"∀ {x : ZFSet}, ZFSet.IsTransitive x → x ⊆ ZFSet.powerset x","name":"ZFSet.IsTransitive.subset_powerset","isProp":true,"doc":"**Alias** of the forward direction of `ZFSet.isTransitive_iff_subset_powerset`.","depth":6},{"type":"∀ {A : Class}, Class.powerset A ⊆ A → A = Class.univ","name":"Class.eq_univ_of_powerset_subset","isProp":true,"doc":"An induction principle for sets. If every subset of a class is a member, then the class is\nuniversal. ","depth":6},{"type":"∀ {x : ZFSet}, ZFSet.IsTransitive x → ⋃₀ x ⊆ x","name":"ZFSet.IsTransitive.sUnion_subset","isProp":true,"doc":"**Alias** of the forward direction of `ZFSet.isTransitive_iff_sUnion_subset`.","depth":6}],"count":4351}
{"noDocExamples":[],"kind":"«term⊤»","examples":[{"type":"{α : Type u_1} → Filter.Realizer ⊤","name":"Filter.Realizer.top","isProp":false,"doc":"`Unit` is a realizer for the top filter ","depth":5},{"type":"{C : EReal → Sort u_1} → C ⊥ → ((a : ℝ) → C ↑a) → C ⊤ → (a : EReal) → C a","name":"EReal.rec","isProp":false,"doc":"A recursor for `EReal` in terms of the coercion.\n\nA typical invocation looks like `induction x using EReal.rec`. Note that using `induction`\ndirectly will unfold `EReal` to `Option` which is undesirable.\n\nWhen working in term mode, note that pattern matching can be used directly. ","depth":7},{"type":"{α : Type u_1} → (x : WithTop α) → x ≠ ⊤ → α","name":"WithTop.untop","isProp":false,"doc":"Deconstruct a `x : WithTop α` to the underlying value in `α`, given a proof that `x ≠ ⊤`. ","depth":7}],"count":4315}
{"noDocExamples":[],"kind":"«term¬_»","examples":[{"type":"¬Small.{u, max (u + 1) (v + 1)} Ordinal.{max u v}","name":"not_small_ordinal","isProp":true,"doc":"The type of ordinals in universe `u` is not `Small.{u}`. This is the type-theoretic analog of\nthe Burali-Forti paradox. ","depth":2},{"type":"{p : Prop} → ¬p → Decidable p","name":"Decidable.isFalse","isProp":false,"doc":"Prove that `p` is decidable by supplying a proof of `¬p` ","depth":3},{"type":"¬Set.Countable Set.univ","name":"Cardinal.not_countable_real","isProp":true,"doc":"**Non-Denumerability of the Continuum**: The reals are not countable. ","depth":3}],"count":3704}
{"noDocExamples":[],"kind":"«term_/_»","examples":[{"type":"riemannZeta 0 = -1 / 2","name":"riemannZeta_zero","isProp":true,"doc":"We have `ζ(0) = -1 / 2`. ","depth":8},{"type":"¬Summable fun n => 1 / ↑n","name":"Real.not_summable_one_div_nat_cast","isProp":true,"doc":"Harmonic series is not unconditionally summable. ","depth":9},{"type":"Real.sin (Real.pi / 3) = Real.sqrt 3 / 2","name":"Real.sin_pi_div_three","isProp":true,"doc":"The sine of `π / 3` is `√3 / 2`. ","depth":10}],"count":3690}
{"noDocExamples":[],"kind":"«term_⁻¹»","examples":[{"type":"goldenConj⁻¹ = -goldenRatio","name":"inv_goldConj","isProp":true,"doc":"The opposite of the golden ratio is the inverse of its conjugate. ","depth":5},{"type":"goldenRatio⁻¹ = -goldenConj","name":"inv_gold","isProp":true,"doc":"The inverse of the golden ratio is the opposite of its conjugate. ","depth":5},{"type":"SetTheory.PGame.Relabelling 1⁻¹ 1","name":"SetTheory.PGame.invOne","isProp":false,"doc":"`1⁻¹` has exactly the same moves as `1`. ","depth":6}],"count":3040}
{"noDocExamples":[],"kind":"«term_∘_»","examples":[{"type":"Antitone (Stirling.stirlingSeq ∘ Nat.succ)","name":"Stirling.stirlingSeq'_antitone","isProp":true,"doc":"The sequence `stirlingSeq ∘ succ` is monotone decreasing ","depth":6},{"type":"Antitone (Real.log ∘ Stirling.stirlingSeq ∘ Nat.succ)","name":"Stirling.log_stirlingSeq'_antitone","isProp":true,"doc":"The sequence `log ∘ stirlingSeq ∘ succ` is monotone decreasing ","depth":7},{"type":"Cardinal.ord ∘ Cardinal.aleph' = Ordinal.enumOrd {b | Cardinal.ord (Ordinal.card b) = b}","name":"Cardinal.ord_aleph'_eq_enum_card","isProp":true,"doc":"`ord ∘ aleph'` enumerates the ordinals that are cardinals. ","depth":8}],"count":2926}
{"noDocExamples":[],"kind":"«term_→+*_»","examples":[{"type":"NNReal →+* ℝ","name":"NNReal.toRealHom","isProp":false,"doc":"Coercion `ℝ≥0 → ℝ` as a `RingHom`.\n\nPorting note: todo: what if we define `Coe ℝ≥0 ℝ` using this function? ","depth":4},{"type":"ℕ →+* ℤ","name":"Int.ofNatHom","isProp":false,"doc":"Coercion `ℕ → ℤ` as a `RingHom`. ","depth":4},{"type":"ℝ →+* ℂ","name":"Complex.ofReal","isProp":false,"doc":"The coercion `ℝ → ℂ` as a `RingHom`. ","depth":4}],"count":2858}
{"noDocExamples":[],"kind":"«term{_}»","examples":[{"type":"Multiset.Nat.antidiagonal 0 = {(0, 0)}","name":"Multiset.Nat.antidiagonal_zero","isProp":true,"doc":"The antidiagonal of `0` is the list `[(0, 0)]` ","depth":7},{"type":"Finset.Nat.antidiagonal 0 = {(0, 0)}","name":"Finset.Nat.antidiagonal_zero","isProp":true,"doc":"The antidiagonal of `0` is the list `[(0, 0)]` ","depth":7},{"type":"∀ {P : Type u_2} [inst : MetricSpace P] (p : P), EuclideanGeometry.Cospherical {p}","name":"EuclideanGeometry.cospherical_singleton","isProp":true,"doc":"A single point is cospherical. ","depth":8}],"count":2627}
{"noDocExamples":[],"kind":"«term_ᵒᵖ»","examples":[{"type":"(Δ : SimplexCategoryᵒᵖ) → SimplicialObject.Splitting.IndexSet Δ","name":"SimplicialObject.Splitting.IndexSet.id","isProp":false,"doc":"The distinguished element in `Splitting.IndexSet Δ` which corresponds to the\nidentity of `Δ`. ","depth":2},{"type":"SimplexCategoryᵒᵖ → Type","name":"SimplicialObject.Splitting.IndexSet","isProp":false,"doc":"The index set which appears in the definition of split simplicial objects. ","depth":2},{"type":"TopCatᵒᵖ → TopCommRingCat → CommRingCat","name":"TopCat.continuousFunctions","isProp":false,"doc":"The (bundled) commutative ring of continuous functions from a topological space\nto a topological commutative ring, with pointwise multiplication. ","depth":2}],"count":2558}
{"noDocExamples":[],"kind":"CategoryTheory.«term_≅_»","examples":[{"type":"(V : Type u) → ULift.{u, u} V ≅ V","name":"CategoryTheory.uliftTrivial","isProp":false,"doc":"The isomorphism between a `Type` which has been `ULift`ed to the same universe,\nand the original type.\n","depth":5},{"type":"(X : Type u) → CategoryTheory.Limits.IsTerminal X ≃ (X ≅ PUnit.{u + 1})","name":"CategoryTheory.Limits.Types.isTerminalEquivIsoPUnit","isProp":false,"doc":"A type is terminal if and only if it is isomorphic to `PUnit`. ","depth":6},{"type":"{X Y : Type u} → (X ≅ Y) → X ≃ Y","name":"CategoryTheory.Iso.toEquiv","isProp":false,"doc":"Any isomorphism between types gives an equivalence. ","depth":7}],"count":2529}
{"noDocExamples":[],"kind":"Lean.Parser.Term.tuple","examples":[{"type":"Multiset.Nat.antidiagonal 0 = {(0, 0)}","name":"Multiset.Nat.antidiagonal_zero","isProp":true,"doc":"The antidiagonal of `0` is the list `[(0, 0)]` ","depth":7},{"type":"Finset.Nat.antidiagonal 0 = {(0, 0)}","name":"Finset.Nat.antidiagonal_zero","isProp":true,"doc":"The antidiagonal of `0` is the list `[(0, 0)]` ","depth":7},{"type":"List.Nat.antidiagonal 0 = [(0, 0)]","name":"List.Nat.antidiagonal_zero","isProp":true,"doc":"The antidiagonal of `0` is the list `[(0, 0)]` ","depth":8}],"count":2516}
{"noDocExamples":[],"kind":"«term‖_‖»","examples":[{"type":"∀ {α : Type u_5} [self : NontriviallyNormedField α], ∃ x, 1 < ‖x‖","name":"NontriviallyNormedField.non_trivial","isProp":true,"doc":"The norm attains a value exceeding 1. ","depth":10},{"type":"∀ {α : Type u_5} [inst : Norm α] [inst_1 : One α] [self : NormOneClass α], ‖1‖ = 1","name":"NormOneClass.norm_one","isProp":true,"doc":"The norm of the multiplicative identity is 1. ","depth":10},{"type":"{R : Type u_1} → [inst : NormedRing R] → [inst_1 : CompleteSpace R] → (t : R) → ‖t‖ < 1 → Rˣ","name":"Units.oneSub","isProp":false,"doc":"In a complete normed ring, a perturbation of `1` by an element `t` of distance less than `1`\nfrom `1` is a unit.  Here we construct its `Units` structure.  ","depth":11}],"count":2491}
{"noDocExamples":[],"kind":"«term_≃_»","examples":[{"type":"ℕ+ ≃ ℕ","name":"Equiv.pnatEquivNat","isProp":false,"doc":"An equivalence between `ℕ+` and `ℕ` given by `PNat.natPred` and `Nat.succPNat`. ","depth":2},{"type":"ℤ ≃ ℕ","name":"Equiv.intEquivNat","isProp":false,"doc":"An equivalence between `ℤ` and `ℕ`, through `ℤ ≃ ℕ ⊕ ℕ` and `ℕ ⊕ ℕ ≃ ℕ`.\n","depth":2},{"type":"Prop ≃ Bool","name":"Equiv.propEquivBool","isProp":false,"doc":"`Prop` is noncomputably equivalent to `Bool`. ","depth":2}],"count":2468}
{"noDocExamples":[],"kind":"«term⊥»","examples":[{"type":"{α : Type u_1} → Filter.Realizer ⊥","name":"Filter.Realizer.bot","isProp":false,"doc":"`Unit` is a realizer for the bottom filter ","depth":6},{"type":"{α : Type u_1} → (x : WithBot α) → x ≠ ⊥ → α","name":"WithBot.unbot","isProp":false,"doc":"Deconstruct a `x : WithBot α` to the underlying value in `α`, given a proof that `x ≠ ⊥`. ","depth":7},{"type":"{C : EReal → Sort u_1} → C ⊥ → ((a : ℝ) → C ↑a) → C ⊤ → (a : EReal) → C a","name":"EReal.rec","isProp":false,"doc":"A recursor for `EReal` in terms of the coercion.\n\nA typical invocation looks like `induction x using EReal.rec`. Note that using `induction`\ndirectly will unfold `EReal` to `Option` which is undesirable.\n\nWhen working in term mode, note that pattern matching can be used directly. ","depth":7}],"count":2444}
{"noDocExamples":[],"kind":"«term_⊓_»","examples":[{"type":"∀ (m n : ℕ+), PNat.factorMultiset (PNat.gcd m n) = PNat.factorMultiset m ⊓ PNat.factorMultiset n","name":"PNat.factorMultiset_gcd","isProp":true,"doc":"The gcd and lcm operations on positive integers correspond\nto the inf and sup operations on multisets. ","depth":9},{"type":"{α : Type u_1} → {f g : Filter α} → Filter.Realizer f → Filter.Realizer g → Filter.Realizer (f ⊓ g)","name":"Filter.Realizer.inf","isProp":false,"doc":"Construct a realizer for the inf of two filters ","depth":11},{"type":"∀ {α : Type u_1} {m0 : MeasurableSpace α} {μ : MeasureTheory.Measure α} {f : Filter α},\n  MeasureTheory.Measure.FiniteAtFilter μ (f ⊓ MeasureTheory.Measure.ae μ) → MeasureTheory.Measure.FiniteAtFilter μ f","name":"MeasureTheory.Measure.FiniteAtFilter.of_inf_ae","isProp":true,"doc":"**Alias** of the forward direction of `MeasureTheory.Measure.FiniteAtFilter.inf_ae_iff`.","depth":11}],"count":2116}
{"noDocExamples":[],"kind":"Set.term_''_","examples":[{"type":"∀ {α : Type u_1} (s : Set α), (fun x => x) '' s = s","name":"Set.image_id'","isProp":true,"doc":"A variant of `image_id` ","depth":8},{"type":"∀ {α : Type u_1} {β : Type u_2} {s : Set α}, Set.Subsingleton s → ∀ (f : α → β), Set.Subsingleton (f '' s)","name":"Set.Subsingleton.image","isProp":true,"doc":"The image of a subsingleton is a subsingleton. ","depth":10},{"type":"∀ {α : Type u_1} {β : Type u_2} (f : α → β) (s : Set α), Set.Nontrivial (f '' s) → Set.Nontrivial s","name":"Set.nontrivial_of_image","isProp":true,"doc":"If the image of a set is nontrivial, the set is nontrivial. ","depth":10}],"count":2105}
{"noDocExamples":[],"kind":"«term_⊔_»","examples":[{"type":"∀ {L : Type u_1} [inst : TopologicalSpace L] [inst_1 : Sup L] [self : ContinuousSup L],\n  Continuous fun p => p.fst ⊔ p.snd","name":"ContinuousSup.continuous_sup","isProp":true,"doc":"The supremum is continuous ","depth":11},{"type":"∀ {α : Type u} [self : SemilatticeSup α] (a b : α), a ≤ a ⊔ b","name":"SemilatticeSup.le_sup_left","isProp":true,"doc":"The supremum is an upper bound on the first argument ","depth":11},{"type":"∀ {α : Type u} [self : SemilatticeSup α] (a b : α), b ≤ a ⊔ b","name":"SemilatticeSup.le_sup_right","isProp":true,"doc":"The supremum is an upper bound on the second argument ","depth":11}],"count":2040}
{"noDocExamples":[],"kind":"«term_∨_»","examples":[{"type":"∀ (p : Prop), p ∨ ¬p","name":"em","isProp":true,"doc":"**Alias** of `Classical.em`.\n\n---\n\nDiaconescu's theorem: excluded middle from choice, Function extensionality and propositional extensionality. ","depth":3},{"type":"∀ (p : Prop), p ∨ ¬p","name":"Classical.em","isProp":true,"doc":"Diaconescu's theorem: excluded middle from choice, Function extensionality and propositional extensionality. ","depth":3},{"type":"∀ (α : Type u_3), Subsingleton α ∨ Nontrivial α","name":"subsingleton_or_nontrivial","isProp":true,"doc":"A type is either a subsingleton or nontrivial. ","depth":4}],"count":1972}
{"noDocExamples":[],"kind":"«term_→ₗ[_]_»","examples":[{"type":"ℂ →ₗ[ℝ] ℝ","name":"Complex.reLm","isProp":false,"doc":"Linear map version of the real part function, from `ℂ` to `ℝ`. ","depth":11},{"type":"ℂ →ₗ[ℝ] ℝ","name":"Complex.imLm","isProp":false,"doc":"Linear map version of the imaginary part function, from `ℂ` to `ℝ`. ","depth":11},{"type":"{R : Type u} → [inst : Semiring R] → Polynomial R →ₗ[R] Polynomial R","name":"Polynomial.derivative","isProp":false,"doc":"`derivative p` is the formal derivative of the polynomial `p` ","depth":13}],"count":1903}
{"noDocExamples":[],"kind":"«term_∩_»","examples":[{"type":"∀ {α : Type u} [inst : Preorder α] {s t : Set α}, BddBelow s → BddBelow (s ∩ t)","name":"BddBelow.inter_of_left","isProp":true,"doc":"If `s` is bounded, then so is `s ∩ t` ","depth":11},{"type":"∀ {α : Type u} [inst : Preorder α] {s t : Set α}, BddAbove t → BddAbove (s ∩ t)","name":"BddAbove.inter_of_right","isProp":true,"doc":"If `t` is bounded, then so is `s ∩ t` ","depth":11},{"type":"∀ {α : Type u} [inst : Preorder α] {s t : Set α}, BddAbove s → BddAbove (s ∩ t)","name":"BddAbove.inter_of_left","isProp":true,"doc":"If `s` is bounded, then so is `s ∩ t` ","depth":11}],"count":1894}
{"noDocExamples":[],"kind":"Set.«term{_|_}»","examples":[{"type":"Set.Infinite {p | Nat.Prime p}","name":"Nat.infinite_setOf_prime","isProp":true,"doc":"A version of `Nat.exists_infinite_primes` using the `Set.Infinite` predicate. ","depth":4},{"type":"Dense {x | Liouville x}","name":"dense_liouville","isProp":true,"doc":"The set of Liouville numbers in dense. ","depth":5},{"type":"¬BddAbove {p | Nat.Prime p}","name":"Nat.not_bddAbove_setOf_prime","isProp":true,"doc":"A version of `Nat.exists_infinite_primes` using the `BddAbove` predicate. ","depth":6}],"count":1885}
{"noDocExamples":[],"kind":"Set.«term_⁻¹'_»","examples":[{"type":"∀ {s : Set ℂ}, Set.Countable s → Set.Countable (cexp ⁻¹' s)","name":"Set.Countable.preimage_cexp","isProp":true,"doc":"**Alias** of the reverse direction of `Complex.countable_preimage_exp`.","depth":7},{"type":"{α : Type u} → {β : Type v} → (s : Finset β) → (f : α → β) → Set.InjOn f (f ⁻¹' ↑s) → Finset α","name":"Finset.preimage","isProp":false,"doc":"Preimage of `s : Finset β` under a map `f` injective on `f ⁻¹' s` as a `Finset`.  ","depth":10},{"type":"{α : Type u_1} → {β : Type u_2} → (t : Set β) → (f : α → β) → ↑(f ⁻¹' t) → ↑t","name":"Set.restrictPreimage","isProp":false,"doc":"The restriction of a function onto the preimage of a set. ","depth":10}],"count":1872}
{"noDocExamples":[],"kind":"termℂ","examples":[{"type":"ℂ","name":"Complex.I","isProp":false,"doc":"The imaginary unit. ","depth":0},{"type":"ℂ → ℂ","name":"Complex.tan","isProp":false,"doc":"The complex tangent function, defined as `sin z / cos z` ","depth":1},{"type":"ℂ → ℂ","name":"Complex.GammaIntegral","isProp":false,"doc":"Euler's integral for the `Γ` function (of a complex variable `s`), defined as\n`∫ x in Ioi 0, exp (-x) * x ^ (s - 1)`.\n\nSee `Complex.GammaIntegral_convergent` for a proof of the convergence of the integral for\n`0 < re s`. ","depth":1}],"count":1822}
{"noDocExamples":[],"kind":"«term_∣_»","examples":[{"type":"Function.Injective fun x x_1 => x ∣ x_1","name":"Nat.dvd_left_injective","isProp":true,"doc":"`dvd` is injective in the left argument ","depth":7},{"type":"∀ {m n : ℕ}, Odd n → m ∣ n → m ≠ 2","name":"Odd.ne_two_of_dvd_nat","isProp":true,"doc":"`2` is not a factor of an odd natural number. ","depth":8},{"type":"∀ {a b : ℕ}, a ∣ b → b < a → b = 0","name":"Nat.eq_zero_of_dvd_of_lt","isProp":true,"doc":"If a small natural number is divisible by a larger natural number,\nthe small number is zero. ","depth":8}],"count":1431}
{"noDocExamples":[],"kind":"«term∅»","examples":[{"type":"CategoryTheory.Limits.IsInitial ∅","name":"AlgebraicGeometry.emptyIsInitial","isProp":false,"doc":"The empty scheme is the initial object in the category of schemes. ","depth":3},{"type":"∀ {α : Type u_7} (self : MeasurableSpace α), MeasurableSpace.MeasurableSet' self ∅","name":"MeasurableSpace.measurableSet_empty","isProp":true,"doc":"The empty set is a measurable set. Use `MeasurableSet.empty` instead. ","depth":6},{"type":"∀ {α : Type u_2} (self : MeasurableSpace.DynkinSystem α), MeasurableSpace.DynkinSystem.Has self ∅","name":"MeasurableSpace.DynkinSystem.has_empty","isProp":true,"doc":"A Dynkin system contains the empty set. ","depth":6}],"count":1427}
{"noDocExamples":[],"kind":"«term_∪_»","examples":[{"type":"∀ {α : Type u_1} (s : Set α) (a : α), 𝒫 insert a s = 𝒫 s ∪ insert a '' 𝒫 s","name":"Set.powerset_insert","isProp":true,"doc":"The powerset of `{a} ∪ s` is `𝒫 s` together with `{a} ∪ t` for each `t ∈ 𝒫 s`. ","depth":11},{"type":"∀ {α : Type u} (S T : Set α), Cardinal.mk ↑(S ∪ T) ≤ Cardinal.mk ↑S + Cardinal.mk ↑T","name":"Cardinal.mk_union_le","isProp":true,"doc":"The cardinality of a union is at most the sum of the cardinalities\nof the two sets. ","depth":12},{"type":"∀ {α : Type u} [inst : PseudoMetricSpace α] {s t : Set α}, Metric.Bounded s → Metric.Bounded t → Metric.Bounded (s ∪ t)","name":"Metric.Bounded.union","isProp":true,"doc":"The union of two bounded sets is bounded. ","depth":12}],"count":1362}
{"noDocExamples":[],"kind":"«term_→*_»","examples":[{"type":"Multiplicative ℝ →* ℝ","name":"Real.expMonoidHom","isProp":false,"doc":"the exponential function as a monoid hom from `Multiplicative ℝ` to `ℝ` ","depth":5},{"type":"Multiplicative ℝ →* CircleDeg1Liftˣ","name":"CircleDeg1Lift.translate","isProp":false,"doc":"The map `y ↦ x + y` as a `CircleDeg1Lift`. More precisely, we define a homomorphism from\n`Multiplicative ℝ` to `CircleDeg1Liftˣ`, so the translation by `x` is\n`translation (Multiplicative.ofAdd x)`. ","depth":5},{"type":"{α : Type u_2} → [inst : MulOneClass α] → α →* Set α","name":"Set.singletonMonoidHom","isProp":false,"doc":"The singleton operation as a `MonoidHom`. ","depth":6}],"count":1317}
{"noDocExamples":[],"kind":"«term_→₀_»","examples":[{"type":"ℕ → ℕ →₀ ℕ","name":"Nat.factorization","isProp":false,"doc":"`n.factorization` is the finitely supported function `ℕ →₀ ℕ`\nmapping each prime factor of `n` to its multiplicity in `n`. ","depth":4},{"type":"{α : Type u_1} → (α →₀ ℕ) → ℕ","name":"Finsupp.multinomial","isProp":false,"doc":"Alternative multinomial definition based on a finsupp, using the support\nfor the big operations\n","depth":5},{"type":"{α : Type u_13} → {M : Type u_14} → [inst : Zero M] → (α →₀ M) → α → M","name":"Finsupp.toFun","isProp":false,"doc":"The underlying function of a bundled finitely supported function (aka `Finsupp`). ","depth":7}],"count":1303}
{"noDocExamples":[],"kind":"«term_→+_»","examples":[{"type":"ℕ →+ PartENat","name":"PartENat.natCast_AddMonoidHom","isProp":false,"doc":"The coercion `ℕ → PartENat` preserves `0` and addition. ","depth":5},{"type":"{α : Type u_2} → [inst : AddZeroClass α] → α →+ Set α","name":"Set.singletonAddMonoidHom","isProp":false,"doc":"The singleton operation as an `AddMonoidHom`.","depth":6},{"type":"(α : Type u_3) → [inst : AddMonoidWithOne α] → ℕ →+ α","name":"Nat.castAddMonoidHom","isProp":false,"doc":"`Nat.cast : ℕ → α` as an `AddMonoidHom`. ","depth":6}],"count":1286}
{"noDocExamples":[],"kind":"«term_ᵐᵒᵖ»","examples":[{"type":"{α : Type u_1} → α → αᵐᵒᵖ","name":"MulOpposite.op","isProp":false,"doc":"The element of `MulOpposite α` that represents `x : α`. ","depth":3},{"type":"{α : Type u_1} → αᵐᵒᵖ → α","name":"MulOpposite.unop","isProp":false,"doc":"The element of `α` represented by `x : αᵐᵒᵖ`. ","depth":3},{"type":"{α : Type u_1} → α ≃ αᵐᵒᵖ","name":"MulOpposite.opEquiv","isProp":false,"doc":"The canonical bijection between `α` and `αᵐᵒᵖ`. ","depth":3}],"count":1183}
{"noDocExamples":[],"kind":"«term_→L[_]_»","examples":[{"type":"ℝ →L[ℝ] ℂ","name":"Complex.ofRealClm","isProp":false,"doc":"Continuous linear map version of the canonical embedding of `ℝ` in `ℂ`. ","depth":13},{"type":"ℂ →L[ℝ] ℝ","name":"Complex.imClm","isProp":false,"doc":"Continuous linear map version of the imaginary part function, from `ℂ` to `ℝ`. ","depth":14},{"type":"ℂ →L[ℝ] ℝ","name":"Complex.reClm","isProp":false,"doc":"Continuous linear map version of the real part function, from `ℂ` to `ℝ`. ","depth":14}],"count":1148}
{"noDocExamples":[],"kind":"Set.«term⋃_,_»","examples":[{"type":"∀ {α : Type u_7} (self : MeasurableSpace α) (f : ℕ → Set α),\n  (∀ (i : ℕ), MeasurableSpace.MeasurableSet' self (f i)) → MeasurableSpace.MeasurableSet' self (⋃ (i : ℕ), f i)","name":"MeasurableSpace.measurableSet_iUnion","isProp":true,"doc":"The union of a sequence of measurable sets is a measurable set. Use a more general\n`MeasurableSet.iUnion` instead. ","depth":8},{"type":"{α : Type u_1} → {β : Type u_2} → (t : α → Set β) → (i : α) × ↑(t i) → ↑(⋃ (i : α), t i)","name":"Set.sigmaToiUnion","isProp":false,"doc":"If `t` is an indexed family of sets, then there is a natural map from `Σ i, t i` to `⋃ i, t i`\nsending `⟨i, x⟩` to `x`. ","depth":8},{"type":"∀ {α : Type u} {β : Type v} (f : α → Finset β), Set.Finite (Set.range f) → Set.Finite (⋃ (a : α), ↑(f a))","name":"Set.union_finset_finite_of_range_finite","isProp":true,"doc":"A finite union of finsets is finite. ","depth":9}],"count":1115}
{"noDocExamples":[],"kind":"«termC(_,_)»","examples":[{"type":"C(NNReal, ℝ)","name":"ContinuousMap.coeNNRealReal","isProp":false,"doc":"Embedding of `ℝ≥0` to `ℝ` as a bundled continuous map. ","depth":4},{"type":"(α : Type u_1) → [inst : TopologicalSpace α] → C(α, α)","name":"ContinuousMap.id","isProp":false,"doc":"The identity as a continuous map. ","depth":6},{"type":"(α : Type u_1) → {β : Type u_2} → [inst : TopologicalSpace β] → C(β, α → β)","name":"ContinuousMap.constPi","isProp":false,"doc":"`Function.const α b` as a bundled continuous function of `b`. ","depth":7}],"count":1068}
{"noDocExamples":[],"kind":"«term_ᶜ»","examples":[{"type":"↑{⊥, ⊤}ᶜ ≃ ℝ","name":"EReal.neTopBotEquivReal","isProp":false,"doc":"The set of numbers in `EReal` that are not equal to `±∞` is equivalent to `ℝ`. ","depth":9},{"type":"∀ {α : Type u} [inst : TopologicalSpace α] {s : Set α} [self : IsClosed s], IsOpen sᶜ","name":"IsClosed.isOpen_compl","isProp":true,"doc":"The complement of a closed set is an open set. ","depth":10},{"type":"∀ {α : Type u_2} (self : MeasurableSpace.DynkinSystem α) {a : Set α},\n  MeasurableSpace.DynkinSystem.Has self a → MeasurableSpace.DynkinSystem.Has self aᶜ","name":"MeasurableSpace.DynkinSystem.has_compl","isProp":true,"doc":"A Dynkin system is closed under complementation. ","depth":10}],"count":1046}
{"noDocExamples":[],"kind":"«term_ᵒᵈ»","examples":[{"type":"{α : Type u_1} → α ≃ αᵒᵈ","name":"OrderDual.toDual","isProp":false,"doc":"`toDual` is the identity function to the `OrderDual` of a linear order.  ","depth":3},{"type":"{α : Type u_1} → WithTop α ≃ WithBot αᵒᵈ","name":"WithTop.toDual","isProp":false,"doc":"`WithTop.toDual` is the equivalence sending `⊤` to `⊥` and any `a : α` to `toDual a : αᵒᵈ`.\nSee `WithTop.toDualBotEquiv` for the related order-iso.\n","depth":4},{"type":"{α : Type u_1} → αᵒᵈ ≃ α","name":"OrderDual.ofDual","isProp":false,"doc":"`ofDual` is the identity function from the `OrderDual` of a linear order.  ","depth":4}],"count":1029}
{"noDocExamples":[],"kind":"«term[_]»","examples":[{"type":"∀ {α : Type u_1}, List.Sublist [] []","name":"List.Sublist.slnil","isProp":true,"doc":"the base case: `[]` is a sublist of `[]` ","depth":4},{"type":"∀ {α : Type u_1} {R : α → α → Prop}, List.Pairwise R []","name":"List.Pairwise.nil","isProp":true,"doc":"All elements of the empty list are vacuously pairwise related. ","depth":5},{"type":"Lean.Expr → optParam (List (List ℕ)) [] → Lean.MetaM Lean.Expr","name":"ToAdditive.reorderLambda","isProp":false,"doc":"Reorder lambda-binders. See doc of `reorderAttr` for the interpretation of the argument ","depth":6}],"count":1027}
{"noDocExamples":[],"kind":"termIfThenElse","examples":[{"type":"∀ {α : Sort u_2} (P : Prop) [inst : Decidable P] (a b : α), (if x : P then a else b) = if P then a else b","name":"dite_eq_ite","isProp":true,"doc":"A `dite` whose results do not actually depend on the condition may be reduced to an `ite`. ","depth":12},{"type":"∀ {α : Sort u_1} (P : Prop) [inst : Decidable P] (x y : α), (if ¬P then x else y) = if P then y else x","name":"ite_not","isProp":true,"doc":"Negation of the condition `P : Prop` in a `ite` is the same as swapping the branches. ","depth":12},{"type":"{α : Sort u_1} →\n  {c : Prop} →\n    [inst : Decidable c] →\n      {motive : α → Sort u_2} → {t e : α} → (c → motive t) → (¬c → motive e) → motive (if c then t else e)","name":"iteInduction","isProp":false,"doc":"Split an if-then-else into cases. The `split` tactic is generally easier to use than this theorem. ","depth":14}],"count":999}
{"noDocExamples":[],"kind":"«term_⧸_»","examples":[{"type":"{α : Type u_1} → [inst : Group α] → (s : Subgroup α) → Quotient (QuotientGroup.rightRel s) ≃ α ⧸ s","name":"QuotientGroup.quotientRightRelEquivQuotientLeftRel","isProp":false,"doc":"Right cosets are in bijection with left cosets. ","depth":9},{"type":"{α : Type u_1} → [inst : Group α] → {s : Subgroup α} → α → α ⧸ s","name":"QuotientGroup.mk","isProp":false,"doc":"The canonical map from a group `α` to the quotient `α ⧸ s`. ","depth":9},{"type":"{α : Type u_1} → [inst : AddGroup α] → {s : AddSubgroup α} → α → α ⧸ s","name":"QuotientAddGroup.mk","isProp":false,"doc":"The canonical map from an `AddGroup` `α` to the quotient `α ⧸ s`.","depth":9}],"count":973}
{"noDocExamples":[],"kind":"«term_+ᵥ_»","examples":[{"type":"∀ {M : Type u_1} (c : M) (X : Type u_2) [inst : VAdd M X] [inst_1 : TopologicalSpace X] [h : ProperConstVAdd M X],\n  IsProperMap fun x => c +ᵥ x","name":"isProperMap_vadd","isProp":true,"doc":"`(c +ᵥ ·)` is a proper map.","depth":14},{"type":"∀ {M : Type u_1} {X : Type u_2} [inst : VAdd M X] [inst_1 : TopologicalSpace M] [inst_2 : TopologicalSpace X]\n  [self : ContinuousVAdd M X], Continuous fun p => p.fst +ᵥ p.snd","name":"ContinuousVAdd.continuous_vadd","isProp":true,"doc":"The additive action `(+ᵥ)` is continuous. ","depth":14},{"type":"∀ {M : Type u_1} {X : Type u_2} [inst : VAdd M X] [inst_1 : TopologicalSpace X] [self : ProperConstVAdd M X] (c : M),\n  IsProperMap fun x => c +ᵥ x","name":"ProperConstVAdd.isProperMap_vadd","isProp":true,"doc":"`(c +ᵥ ·)` is a proper map. ","depth":14}],"count":947}
{"noDocExamples":[],"kind":"Rat.termℚ","examples":[{"type":"Div ℚ","name":"Rat.instDivRat","isProp":false,"doc":"Division of rational numbers. Note: `div a 0 = 0`.  Written with a separate function `Rat.div`\nas a wrapper so that the definition is not unfolded at `.instance` transparency. ","depth":1},{"type":"Denumerable ℚ","name":"Rat.instDenumerableRat","isProp":false,"doc":"**Denumerability of the Rational Numbers** ","depth":1},{"type":"ℚ → ℕ+","name":"Rat.pnatDen","isProp":false,"doc":"Denominator as `ℕ+`. ","depth":1}],"count":891}
{"noDocExamples":[],"kind":"«term_ˣ»","examples":[{"type":"{n : ℕ} → Equiv.Perm (Fin n) → ℤˣ","name":"Equiv.Perm.signAux","isProp":false,"doc":"`signAux σ` is the sign of a permutation on `Fin n`, defined as the parity of the number of\npairs `(x₁, x₂)` such that `x₂ < x₁` but `σ x₁ ≤ σ x₂` ","depth":4},{"type":"{M : Type u_6} → [inst : Monoid M] → Mˣ → Equiv.Perm M","name":"Units.mulRight","isProp":false,"doc":"Right multiplication by a unit of a monoid is a permutation of the underlying type. ","depth":5},{"type":"{α : Type u} → [inst : Monoid α] → Inv αˣ","name":"Units.instInv","isProp":false,"doc":"The inverse of a unit in a `Monoid`. ","depth":5}],"count":875}
{"noDocExamples":[],"kind":"«term⨅_,_»","examples":[{"type":"∀ {α : Type u_1} {γ : Type u_3} {ι : Type u_4} {u : ι → UniformSpace γ},\n  UniformFun.uniformSpace α γ = ⨅ (i : ι), UniformFun.uniformSpace α γ","name":"UniformFun.iInf_eq","isProp":true,"doc":"If `u` is a family of uniform structures on `γ`, then\n`𝒰(α, γ, (⨅ i, u i)) = ⨅ i, 𝒰(α, γ, u i)`. ","depth":12},{"type":"{α : Type u_1} → [inst : Group α] → {ι : Type u_2} → (f : ι → Subgroup α) → α ⧸ ⨅ (i : ι), f i ↪ (i : ι) → α ⧸ f i","name":"Subgroup.quotientiInfEmbedding","isProp":false,"doc":"The natural embedding `α ⧸ (⨅ i, f i) ↪ Π i, α ⧸ f i`. ","depth":13},{"type":"{α : Type u_1} → [inst : AddGroup α] → {ι : Type u_2} → (f : ι → AddSubgroup α) → α ⧸ ⨅ (i : ι), f i ↪ (i : ι) → α ⧸ f i","name":"AddSubgroup.quotientiInfEmbedding","isProp":false,"doc":"The natural embedding `α ⧸ (⨅ i, f i) ↪ Π i, α ⧸ f i`.","depth":13}],"count":857}
{"noDocExamples":[],"kind":"«term⨆_,_»","examples":[{"type":"∀ {ι : Sort u_1} {f : ι → ℝ}, (∀ (i : ι), 0 ≤ f i) → 0 ≤ ⨆ (i : ι), f i","name":"Real.iSup_nonneg","isProp":true,"doc":"As `0` is the default value for `Real.sSup` of the empty set or sets which are not bounded above, it\nsuffices to show that `f i` is nonnegative to show that `0 ≤ ⨆ i, f i`.\n","depth":9},{"type":"{α : Type u_1} →\n  {β : Type u_2} → {f : α → Filter β} → ((i : α) → Filter.Realizer (f i)) → Filter.Realizer (⨆ (i : α), f i)","name":"Filter.Realizer.iSup","isProp":false,"doc":"Construct a realizer for indexed supremum ","depth":12},{"type":"∀ {ι : Type v} {f : ι → Cardinal.{w}},\n  BddAbove (Set.range f) → Cardinal.lift.{u, w} (iSup f) = ⨆ (i : ι), Cardinal.lift.{u, w} (f i)","name":"Cardinal.lift_iSup","isProp":true,"doc":"The lift of a supremum is the supremum of the lifts. ","depth":13}],"count":854}
{"noDocExamples":[],"kind":"«term_\\_»","examples":[{"type":"∀ {α : Type u_4} [self : CoheytingAlgebra α] (a : α), ⊤ \\ a = ￢a","name":"CoheytingAlgebra.top_sdiff","isProp":true,"doc":"`⊤ \\ a` is `￢a` ","depth":11},{"type":"∀ {α : Type u_4} [self : BiheytingAlgebra α] (a : α), ⊤ \\ a = ￢a","name":"BiheytingAlgebra.top_sdiff","isProp":true,"doc":"`⊤ \\ a` is `￢a` ","depth":12},{"type":"{α : Type u_1} →\n  [inst : GeneralizedBooleanAlgebra α] →\n    [inst_1 : DecidableEq α] → {a : α} → Finpartition a → (b : α) → Finpartition (a \\ b)","name":"Finpartition.avoid","isProp":false,"doc":"Restricts a finpartition to avoid a given element. ","depth":12}],"count":854}
{"noDocExamples":[],"kind":"«term_⊕_»","examples":[{"type":"ℕ ≃ ℕ ⊕ PUnit.{u_1 + 1}","name":"Equiv.natEquivNatSumPUnit","isProp":false,"doc":"The set of natural numbers is equivalent to `ℕ ⊕ PUnit`. ","depth":3},{"type":"ℤ ≃ ℕ ⊕ ℕ","name":"Equiv.intEquivNatSumNat","isProp":false,"doc":"The type of integer numbers is equivalent to `ℕ ⊕ ℕ`. ","depth":3},{"type":"Bool ≃ PUnit.{u + 1} ⊕ PUnit.{v + 1}","name":"Equiv.boolEquivPUnitSumPUnit","isProp":false,"doc":"`Bool` is equivalent the sum of two `PUnit`s. ","depth":3}],"count":828}
{"noDocExamples":[],"kind":"«term_×ˢ_»","examples":[{"type":"∀ {α : Type u_1} {f : Filter α} {p : α × α → Prop}, (∀ᶠ (i : α × α) in f ×ˢ f, p i) → ∀ᶠ (i : α) in f, p (i, i)","name":"Filter.Eventually.diag_of_prod","isProp":true,"doc":"A fact that is eventually true about all pairs `l ×ˢ l` is eventually true about\nall diagonal pairs `(i, i)` ","depth":12},{"type":"{α : Type u_1} → {β : Type u_2} → (s : Set α) → (t : Set β) → ↑(s ×ˢ t) ≃ ↑s × ↑t","name":"Equiv.Set.prod","isProp":false,"doc":"The set product of two sets is equivalent to the type product of their coercions to types. ","depth":14},{"type":"∀ {α : Type u_1} {Ixx : α → α → Set α} {l₁ : Filter α} {l₂ : outParam (Filter α)}\n  [self : Filter.TendstoIxxClass Ixx l₁ l₂], Filter.Tendsto (fun p => Ixx p.fst p.snd) (l₁ ×ˢ l₁) (Filter.smallSets l₂)","name":"Filter.TendstoIxxClass.tendsto_Ixx","isProp":true,"doc":"`Function.uncurry Ixx` tends to `l₂.smallSets` along `l₁ ×ˢ l₁`. In other words, for any\n`s ∈ l₂` there exists `t ∈ l₁` such that `Ixx x y ⊆ s` whenever `x ∈ t` and `y ∈ t`.\n\nUse lemmas like `Filter.Tendsto.Icc` instead. ","depth":14}],"count":815}
{"noDocExamples":[],"kind":"«term_→ₐ[_]_»","examples":[{"type":"ℝ →ₐ[ℝ] ℂ","name":"Complex.ofRealAm","isProp":false,"doc":"`ℝ`-algebra morphism version of the canonical embedding of `ℝ` in `ℂ`. ","depth":8},{"type":"ℂ →ₐ[ℝ] Quaternion ℝ","name":"Quaternion.ofComplex","isProp":false,"doc":"Coercion `ℂ →ₐ[ℝ] ℍ` as an algebra homomorphism. ","depth":9},{"type":"{R : Type u_1} → [inst : CommSemiring R] → Polynomial R →ₐ[R] LaurentPolynomial R","name":"Polynomial.toLaurentAlg","isProp":false,"doc":"The `R`-algebra map, taking a polynomial with coefficients in `R` to a Laurent polynomial\nwith coefficients in `R`. ","depth":12}],"count":803}
{"noDocExamples":[],"kind":"«term_::_»","examples":[{"type":"∀ {α : Type u} {a : α} (as : List α), List.Mem a (a :: as)","name":"List.Mem.head","isProp":true,"doc":"The head of a list is a member: `a ∈ a :: as`. ","depth":7},{"type":"∀ {α : Type u} [inst : LT α] (b : α) (bs : List α), List.lt [] (b :: bs)","name":"List.lt.nil","isProp":true,"doc":"`[]` is the smallest element in the order. ","depth":8},{"type":"∀ {α : Type u_1} {l₁ l₂ : List α} (a : α), List.Sublist l₁ l₂ → List.Sublist l₁ (a :: l₂)","name":"List.Sublist.cons","isProp":true,"doc":"If `l₁` is a subsequence of `l₂`, then it is also a subsequence of `a :: l₂`. ","depth":9}],"count":800}
{"noDocExamples":[],"kind":"Filter.«term_=ᶠ[_]_»","examples":[{"type":"∀ {α : Type u_1} {m : MeasurableSpace α} {μ : MeasureTheory.Measure α} {f g : MeasureTheory.SimpleFunc α ENNReal},\n  ↑f =ᶠ[MeasureTheory.Measure.ae μ] ↑g → MeasureTheory.SimpleFunc.lintegral f μ = MeasureTheory.SimpleFunc.lintegral g μ","name":"MeasureTheory.SimpleFunc.lintegral_congr","isProp":true,"doc":"If two simple functions are equal a.e., then their `lintegral`s are equal. ","depth":12},{"type":"∀ {α : Type u_1} {β : Type u_2} {l : Filter α} {f g : α → β}, f =ᶠ[l] g → ↑f = ↑g","name":"Filter.EventuallyEq.germ_eq","isProp":true,"doc":"**Alias** of the reverse direction of `Filter.Germ.coe_eq`.","depth":12},{"type":"∀ {α : Type u} {β : Type v} {m₁ m₂ : α → β} {f : Filter α}, m₁ =ᶠ[f] m₂ → Filter.map m₁ f = Filter.map m₂ f","name":"Filter.map_congr","isProp":true,"doc":"If functions `m₁` and `m₂` are eventually equal at a filter `f`, then\nthey map this filter to the same filter. ","depth":12}],"count":765}
{"noDocExamples":[],"kind":"«termℕ∞»","examples":[{"type":"ℕ∞ → PartENat","name":"PartENat.ofENat","isProp":false,"doc":"Coercion from `ℕ∞` to `PartENat`. ","depth":1},{"type":"ℕ∞ → ENNReal","name":"ENat.toENNReal","isProp":false,"doc":"Coercion from `ℕ∞` to `ℝ≥0∞`. ","depth":1},{"type":"PartENat ≃ ℕ∞","name":"PartENat.withTopEquiv","isProp":false,"doc":"`Equiv` between `PartENat` and `ℕ∞` (for the order isomorphism see\n`withTopOrderIso`). ","depth":2}],"count":754}
{"noDocExamples":[],"kind":"«term_×__1»","examples":[{"type":"(n : ℕ) → Finset ((_ : Fin n) × Fin n)","name":"Equiv.Perm.finPairsLT","isProp":false,"doc":"set of all pairs (⟨a, b⟩ : Σ a : fin n, fin n) such that b < a ","depth":5},{"type":"{α : Type u_7} → {β : Type u_8} → α × β → (_ : α) × β","name":"Prod.toSigma","isProp":false,"doc":"Convert a product type to a Σ-type. ","depth":5},{"type":"(α : Type u_1) → (_ : α) × PUnit.{u_2 + 1} ≃ α","name":"Equiv.sigmaPUnit","isProp":false,"doc":"`PUnit` is a right identity for dependent type product up to an equivalence. ","depth":5}],"count":735}
{"noDocExamples":[],"kind":"Filter.«term∀ᶠ_In_,_»","examples":[{"type":"∀ᶠ (x : ℝ) in residual ℝ, Liouville x","name":"eventually_residual_liouville","isProp":true,"doc":"The set of Liouville numbers is a residual set. ","depth":5},{"type":"∀ {α : Type u} {f : Ultrafilter α} {p : α → Prop}, (∃ᶠ (x : α) in ↑f, p x) → ∀ᶠ (x : α) in ↑f, p x","name":"Filter.Frequently.eventually","isProp":true,"doc":"**Alias** of the forward direction of `Ultrafilter.frequently_iff_eventually`.","depth":8},{"type":"∀ {α : Type u} [inst : TopologicalSpace α] {p : α → Prop} {a : α}, (∀ᶠ (y : α) in nhds a, p y) → p a","name":"Filter.Eventually.self_of_nhds","isProp":true,"doc":"If a predicate is true in a neighborhood of `a`, then it is true for `a`. ","depth":9}],"count":714}
{"noDocExamples":[],"kind":"«term|___|»","examples":[{"type":"∀ (c : ℂ) (R : ℝ), Set.range (circleMap c R) = Metric.sphere c |R|","name":"range_circleMap","isProp":true,"doc":"The range of `circleMap c R` is the circle with center `c` and radius `|R|`. ","depth":11},{"type":"∀ (x : ℝ), 0 < x → x ≤ 1 → |Real.log x * x| < 1","name":"Real.abs_log_mul_self_lt","isProp":true,"doc":"Bound for `|log x * x|` in the interval `(0, 1]`. ","depth":12},{"type":"∀ {α : Type u_1} {l : Filter α} {f : α → ℝ},\n  ((fun x => rexp (f x)) =Θ[l] fun x => 1) ↔ Filter.IsBoundedUnder (fun x x_1 => x ≤ x_1) l fun x => |f x|","name":"Real.isTheta_exp_comp_one","isProp":true,"doc":"`Real.exp (f x)` is bounded away from zero and infinity along a filter `l` if and only if\n`|f x|` is bounded from above along this filter. ","depth":13}],"count":673}
{"noDocExamples":[],"kind":"«termℕ+»","examples":[{"type":"ℚ → ℕ+","name":"Rat.pnatDen","isProp":false,"doc":"Denominator as `ℕ+`. ","depth":1},{"type":"ℕ+ → Type","name":"LucasLehmer.X","isProp":false,"doc":"We construct the ring `X q` as ℤ/qℤ + √3 ℤ/qℤ. ","depth":1},{"type":"ℕ → ℕ+","name":"LucasLehmer.q","isProp":false,"doc":"`q` is defined as the minimum factor of `mersenne p`, bundled as an `ℕ+`. ","depth":1}],"count":644}
{"noDocExamples":[],"kind":"«term_ᵃᵒᵖ»","examples":[{"type":"{α : Type u_1} → α ≃ αᵃᵒᵖ","name":"AddOpposite.opEquiv","isProp":false,"doc":"The canonical bijection between `α` and `αᵃᵒᵖ`.","depth":3},{"type":"{α : Type u_1} → α → αᵃᵒᵖ","name":"AddOpposite.op","isProp":false,"doc":"The element of `αᵃᵒᵖ` that represents `x : α`.","depth":3},{"type":"{α : Type u_1} → αᵃᵒᵖ → α","name":"AddOpposite.unop","isProp":false,"doc":"The element of `α` represented by `x : αᵃᵒᵖ`.","depth":3}],"count":592}
{"noDocExamples":[],"kind":"«term_++_»","examples":[{"type":"∀ {a b : ℕ}, Nat.coprime a b → Nat.factors (a * b) ~ Nat.factors a ++ Nat.factors b","name":"Nat.perm_factors_mul_of_coprime","isProp":true,"doc":"For coprime `a` and `b`, the prime factors of `a * b` are the union of those of `a` and `b` ","depth":12},{"type":"∀ {a b : ℕ}, a ≠ 0 → b ≠ 0 → Nat.factors (a * b) ~ Nat.factors a ++ Nat.factors b","name":"Nat.perm_factors_mul","isProp":true,"doc":"For positive `a` and `b`, the prime factors of `a * b` are the union of those of `a` and `b` ","depth":13},{"type":"∀ {α : Type u} {l₁ l₂ : List α} {n : ℕ}, List.drop n (l₁ ++ l₂) = List.drop n l₁ ++ List.drop (n - List.length l₁) l₂","name":"List.drop_append_eq_append_drop","isProp":true,"doc":"Dropping the elements up to `n` in `l₁ ++ l₂` is the same as dropping the elements up to `n`\nin `l₁`, dropping the elements up to `n - l₁.length` in `l₂`, and appending them. ","depth":14}],"count":576}
{"noDocExamples":[],"kind":"«term_≃ₗ[_]_»","examples":[{"type":"ℂ ≃ₗ[ℝ] ℝ × ℝ","name":"Complex.equivRealProdLm","isProp":false,"doc":"The natural `LinearEquiv` from `ℂ` to `ℝ × ℝ`. ","depth":14},{"type":"Nonempty (ℂ ≃ₗ[ℚ] ℝ)","name":"Complex.nonempty_linearEquiv_real","isProp":true,"doc":"`ℂ` and `ℝ` are isomorphic as vector spaces over `ℚ`, or equivalently,\nas additive groups. ","depth":15},{"type":"{cd : Fin 2 → ℤ} → IsCoprime (cd 0) (cd 1) → Matrix (Fin 2) (Fin 2) ℝ ≃ₗ[ℝ] Matrix (Fin 2) (Fin 2) ℝ","name":"ModularGroup.lcRow0Extend","isProp":false,"doc":"Linear map sending the matrix [a, b; c, d] to the matrix [ac₀ + bd₀, - ad₀ + bc₀; c, d], for\nsome fixed `(c₀, d₀)`. ","depth":16}],"count":559}
{"noDocExamples":[],"kind":"«term_≃o_»","examples":[{"type":"ℝ ≃o ℝ","name":"Real.sinhOrderIso","isProp":false,"doc":"`Real.sinh` as an `OrderIso`. ","depth":4},{"type":"EReal ≃o ERealᵒᵈ","name":"EReal.negOrderIso","isProp":false,"doc":"Negation as an order reversing isomorphism on `EReal`. ","depth":5},{"type":"(α : Type u_6) → [inst : LE α] → α ≃o α","name":"OrderIso.refl","isProp":false,"doc":"Identity order isomorphism. ","depth":6}],"count":559}
{"noDocExamples":[],"kind":"«termΠ₀_,_»","examples":[{"type":"{ι : Type u_1} → {M : Type u_3} → [inst : Zero M] → (ι →₀ M) → Π₀ (x : ι), M","name":"Finsupp.toDFinsupp","isProp":false,"doc":"Interpret a `Finsupp` as a homogenous `DFinsupp`. ","depth":7},{"type":"{ι : Type u_1} → {α : ι → Type u_2} → [inst : (i : ι) → Zero (α i)] → (Π₀ (i : ι), α i) → Π₀ (i : ι), Finset (α i)","name":"DFinsupp.singleton","isProp":false,"doc":"Pointwise `Finset.singleton` bundled as a `DFinsupp`. ","depth":9},{"type":"{ι : Type u} → {β : ι → Type v} → [inst : (i : ι) → Zero (β i)] → CoeFun (Π₀ (i : ι), β i) fun x => (i : ι) → β i","name":"DFinsupp.instCoeFunDFinsuppForAll","isProp":false,"doc":"Helper instance for when there are too many metavariables to apply `FunLike.coeFunForall`\ndirectly. ","depth":9}],"count":545}
{"noDocExamples":[],"kind":"Set.«term⋂_,_»","examples":[{"type":"∀ {ι : Type u} {f : ι → Ordinal.{max u v} → Ordinal.{max u v}},\n  (∀ (i : ι), Ordinal.IsNormal (f i)) → Ordinal.derivFamily f = Ordinal.enumOrd (⋂ (i : ι), Function.fixedPoints (f i))","name":"Ordinal.derivFamily_eq_enumOrd","isProp":true,"doc":"For a family of normal functions, `Ordinal.derivFamily` enumerates the common fixed points. ","depth":9},{"type":"∀ {α : Type u_1} {ι : Type u_4} [inst : TopologicalSpace α] [inst_1 : Encodable ι] {s : ι → Set α},\n  (∀ (i : ι), IsGδ (s i)) → IsGδ (⋂ (i : ι), s i)","name":"isGδ_iInter","isProp":true,"doc":"The intersection of an encodable family of Gδ sets is a Gδ set. ","depth":10},{"type":"∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : BaireSpace α] {f : ℕ → Set α},\n  (∀ (n : ℕ), IsOpen (f n)) → (∀ (n : ℕ), Dense (f n)) → Dense (⋂ (n : ℕ), f n)","name":"dense_iInter_of_open_nat","isProp":true,"doc":"Definition of a Baire space. ","depth":10}],"count":520}
{"noDocExamples":[],"kind":"CategoryTheory.«term_≌_»","examples":[{"type":"DistLatCat ≌ DistLatCat","name":"DistLatCat.dualEquiv","isProp":false,"doc":"The equivalence between `DistLatCat` and itself induced by `OrderDual` both ways. ","depth":4},{"type":"SemilatSupCat ≌ SemilatInfCat","name":"SemilatSupCatEquivSemilatInfCat","isProp":false,"doc":"The equivalence between `SemilatSupCat` and `SemilatInfCat` induced by `OrderDual` both ways. ","depth":4},{"type":"TwoP ≌ TwoP","name":"TwoP.swapEquiv","isProp":false,"doc":"The equivalence between `TwoP` and itself induced by `Prod.swap` both ways. ","depth":4}],"count":514}
{"noDocExamples":[],"kind":"«term∑'_,_»","examples":[{"type":"∀ {α : Type u_1} {f : α → ENNReal}, ∑' (i : α), f i ≠ ⊤ → Set.Countable (Function.support f)","name":"Summable.countable_support_ennreal","isProp":true,"doc":"Finitely summable non-negative functions have countable support ","depth":12},{"type":"∀ {s : ℂ}, 1 < s.re → riemannZeta s = ∑' (n : ℕ), 1 / ↑n ^ s","name":"zeta_eq_tsum_one_div_nat_cpow","isProp":true,"doc":"Alternate formulation of `zeta_eq_tsum_one_div_nat_add_one_cpow` without the `+ 1`, using the\nfact that for `s ≠ 0` we define `0 ^ s = 0`.  ","depth":13},{"type":"∀ {s : ℂ}, 1 < s.re → riemannZeta s = ∑' (n : ℕ), 1 / (↑n + 1) ^ s","name":"zeta_eq_tsum_one_div_nat_add_one_cpow","isProp":true,"doc":"The Riemann zeta function agrees with the naive Dirichlet-series definition when the latter\nconverges. (Note that this is false without the assumption: when `re s ≤ 1` the sum is divergent,\nand we use a different definition to obtain the analytic continuation to all `s`.) ","depth":14}],"count":495}
{"noDocExamples":[],"kind":"«term‖_‖₊»","examples":[{"type":"∀ {E : Type u_6} [inst : SeminormedAddGroup E] (a b : E), nndist a b = ‖a - b‖₊","name":"nndist_eq_nnnorm","isProp":true,"doc":"**Alias** of `nndist_eq_nnnorm_sub`.","depth":14},{"type":"∀ {E : Type u_6} [inst : SeminormedAddGroup E] (a b : E), ‖b‖₊ ≤ ‖a‖₊ + ‖a - b‖₊","name":"nnnorm_le_insert","isProp":true,"doc":"**Alias** of `nnnorm_le_nnnorm_add_nnnorm_sub`.","depth":15},{"type":"∀ {ι : Type u_1} {E : Type u_3} [inst : SeminormedAddCommGroup E] {f : ι → E},\n  (Summable fun i => ‖f i‖₊) → ‖∑' (i : ι), f i‖₊ ≤ ∑' (i : ι), ‖f i‖₊","name":"nnnorm_tsum_le","isProp":true,"doc":"If `∑' i, ‖f i‖₊` is summable, then `‖∑' i, f i‖₊ ≤ ∑' i, ‖f i‖₊`. Note that\nwe do not assume that `∑' i, f i` is summable, and it might not be the case if `α` is not a complete\nspace. ","depth":15}],"count":490}
{"noDocExamples":[],"kind":"«term_≃ₐ[_]_»","examples":[{"type":"ℂ ≃ₐ[ℝ] ℂ","name":"Complex.conjAe","isProp":false,"doc":"`ℝ`-algebra isomorphism version of the complex conjugation function from `ℂ` to `ℂ` ","depth":8},{"type":"(k : Type u) → [inst : Field k] → AlgebraicClosure k ≃ₐ[k] AlgebraicClosureAux k","name":"AlgebraicClosure.algEquivAlgebraicClosureAux","isProp":false,"doc":"The equivalence between `AlgebraicClosure` and `AlgebraicClosureAux`, which we use to transfer\nproperties of `AlgebraicClosureAux` to `AlgebraicClosure` ","depth":11},{"type":"{R : Type u_2} → [inst : CommSemiring R] → LaurentPolynomial R ≃ₐ[R] LaurentPolynomial R","name":"LaurentPolynomial.invert","isProp":false,"doc":"The map which substitutes `T ↦ T⁻¹` into a Laurent polynomial. ","depth":12}],"count":479}
{"noDocExamples":[],"kind":"«term_%_»","examples":[{"type":"∀ {n a : ℕ}, Even n → Even a → Even (n % a)","name":"Even.mod_even","isProp":true,"doc":"If `n` is even and `a` is even, then `n % a` is even. ","depth":11},{"type":"∀ {n a : ℕ}, Odd n → Even a → Odd (n % a)","name":"Odd.mod_even","isProp":true,"doc":"If `n` is odd and `a` is even, then `n % a` is odd. ","depth":11},{"type":"∀ {n : ℕ}, n % 4 = 1 → (-1) ^ (n / 2) = 1","name":"ZMod.neg_one_pow_div_two_of_one_mod_four","isProp":true,"doc":"If `n % 4 = 1`, then `(-1)^(n/2) = 1`. ","depth":11}],"count":477}
{"noDocExamples":[],"kind":"«term_≈_»","examples":[{"type":"∀ (G : SetTheory.PGame) [inst : SetTheory.PGame.Impartial G], G ≈ SetTheory.PGame.nim (SetTheory.PGame.grundyValue G)","name":"SetTheory.PGame.equiv_nim_grundyValue","isProp":true,"doc":"The Sprague-Grundy theorem which states that every impartial game is equivalent to a game of\nnim, namely the game of nim corresponding to the games Grundy value ","depth":7},{"type":"∀ {x y : SetTheory.PGame}, SetTheory.PGame.Relabelling x y → x ≈ y","name":"SetTheory.PGame.Relabelling.equiv","isProp":true,"doc":"A relabelling lets us prove equivalence of games. ","depth":8},{"type":"∀ (x : SetTheory.PGame), 0 * x ≈ 0","name":"SetTheory.PGame.zero_mul_equiv","isProp":true,"doc":"`0 * x` is equivalent to `0`. ","depth":9}],"count":458}
{"noDocExamples":[],"kind":"CategoryTheory.«term_⊣_»","examples":[{"type":"pointedToBipointedSnd ⊣ bipointedToPointedSnd","name":"pointedToBipointedSndBipointedToPointedSndAdjunction","isProp":false,"doc":"The free/forgetful adjunction between `PointedToBipointed_snd` and `BipointedToPointed_snd`.\n","depth":6},{"type":"TopCat.discrete ⊣ CategoryTheory.forget TopCat","name":"TopCat.adj₁","isProp":false,"doc":"Equipping a type with the discrete topology is left adjoint to the forgetful functor\n`Top ⥤ Type`. ","depth":6},{"type":"Compactum.free ⊣ Compactum.forget","name":"Compactum.adj","isProp":false,"doc":"The adjunction between `free` and `forget`. ","depth":6}],"count":447}
{"noDocExamples":[],"kind":"«term_≃+_»","examples":[{"type":"ℂ ≃+ ℝ × ℝ","name":"Complex.equivRealProdAddHom","isProp":false,"doc":"The natural `AddEquiv` from `ℂ` to `ℝ × ℝ`. ","depth":5},{"type":"{α : Type u} → [inst : Add α] → α ≃+ αᵐᵒᵖ","name":"MulOpposite.opAddEquiv","isProp":false,"doc":"The function `MulOpposite.op` is an additive equivalence. ","depth":6},{"type":"(M : Type u_12) → [inst : Add M] → M ≃+ M","name":"AddEquiv.refl","isProp":false,"doc":"The identity map is an additive isomorphism.","depth":6}],"count":446}
{"noDocExamples":[],"kind":"«term_>_»","examples":[{"type":"∀ (R : Type u_1) [inst : CommRing R] {P : Prop},\n  (∀ (p : ℕ), p > 0 → MixedCharZero R p → P) ↔ ∀ (p : ℕ), Nat.Prime p → MixedCharZero R p → P","name":"MixedCharZero.reduce_to_p_prime","isProp":true,"doc":"Reduction to `p` prime: When proving any statement `P` about mixed characteristic rings we\ncan always assume that `p` is prime.\n","depth":11},{"type":"∀ (R : Type u_1) [inst : CommRing R] [inst_1 : CharZero R], IsEmpty (Algebra ℚ R) ↔ ∃ p, p > 0 ∧ MixedCharZero R p","name":"isEmpty_algebraRat_iff_mixedCharZero","isProp":true,"doc":"A ring of characteristic zero is not a `ℚ`-algebra iff it has mixed characteristic for some `p`.\n","depth":12},{"type":"∀ (b o : Ordinal.{u_1}), List.Sorted (fun x x_1 => x > x_1) (List.map Prod.fst (Ordinal.CNF b o))","name":"Ordinal.CNF_sorted","isProp":true,"doc":"The exponents of the Cantor normal form are decreasing. ","depth":12}],"count":438}
{"noDocExamples":[],"kind":"«term_≃+*_»","examples":[{"type":"FreeRing PEmpty.{u + 1} ≃+* ℤ","name":"freeRingPemptyEquivInt","isProp":false,"doc":"The free ring on the empty type is isomorphic to `ℤ`. ","depth":9},{"type":"(R : Type u_4) → [inst : Mul R] → [inst_1 : Add R] → R ≃+* R","name":"RingEquiv.refl","isProp":false,"doc":"The identity map is a ring isomorphism. ","depth":9},{"type":"{α : Type u} → [inst : NonUnitalNonAssocSemiring α] → ULift.{u_1, u} α ≃+* α","name":"ULift.ringEquiv","isProp":false,"doc":"The ring equivalence between `ULift α` and `α`.","depth":9}],"count":438}
{"noDocExamples":[],"kind":"«term_≃*_»","examples":[{"type":"(M : Type u_12) → [inst : Mul M] → M ≃* M","name":"MulEquiv.refl","isProp":false,"doc":"The identity map is a multiplicative isomorphism. ","depth":6},{"type":"{α : Type u} → [inst : Mul α] → α ≃* αᵃᵒᵖ","name":"AddOpposite.opMulEquiv","isProp":false,"doc":"The function `AddOpposite.op` is a multiplicative equivalence. ","depth":6},{"type":"{α : Type u} → [inst : Mul α] → ULift.{u_2, u} α ≃* α","name":"MulEquiv.ulift","isProp":false,"doc":"The multiplicative equivalence between `ULift α` and `α`.\n","depth":7}],"count":433}
{"noDocExamples":[],"kind":"MeasureTheory.«term∀ᵐ_∂_,_»","examples":[{"type":"∀ {α : Type u_1} {m0 : MeasurableSpace α} {μ : MeasureTheory.Measure α} {s t : α → Prop},\n  s =ᶠ[MeasureTheory.Measure.ae μ] t →\n    ∀ {p : α → Prop},\n      (∀ᵐ (x : α) ∂MeasureTheory.Measure.restrict μ s, p x) → ∀ᵐ (x : α) ∂MeasureTheory.Measure.restrict μ t, p x","name":"MeasureTheory.ae_restrict_of_ae_eq_of_ae_restrict","isProp":true,"doc":"If two measurable sets are ae_eq then any proposition that is almost everywhere true on one\nis almost everywhere true on the other ","depth":14},{"type":"∀ {α : Type u_1} {m0 : MeasurableSpace α} {μ : MeasureTheory.Measure α} {s t : α → Prop},\n  s =ᶠ[MeasureTheory.Measure.ae μ] t →\n    ∀ {p : α → Prop},\n      (∀ᵐ (x : α) ∂MeasureTheory.Measure.restrict μ s, p x) ↔ ∀ᵐ (x : α) ∂MeasureTheory.Measure.restrict μ t, p x","name":"MeasureTheory.ae_restrict_congr_set","isProp":true,"doc":"If two measurable sets are ae_eq then any proposition that is almost everywhere true on one\nis almost everywhere true on the other ","depth":15},{"type":"∀ {α : Type u_1} {m0 : MeasurableSpace α} {μ : MeasureTheory.Measure α} {s : ℕ → Set α},\n  ∑' (i : ℕ), ↑↑μ (s i) ≠ ⊤ → ∀ᵐ (x : α) ∂μ, ∀ᶠ (n : ℕ) in Filter.atTop, ¬x ∈ s n","name":"MeasureTheory.ae_eventually_not_mem","isProp":true,"doc":"A version of the **Borel-Cantelli lemma**: if `sᵢ` is a sequence of sets such that\n`∑ μ sᵢ` exists, then for almost all `x`, `x` does not belong to almost all `sᵢ`. ","depth":17}],"count":423}
{"noDocExamples":[],"kind":"«term_≃ₜ_»","examples":[{"type":"EReal ≃ₜ EReal","name":"EReal.negHomeo","isProp":false,"doc":"Negation on `EReal` as a homeomorphism ","depth":4},{"type":"ℝ ≃ₜ ℝ","name":"Real.sinhHomeomorph","isProp":false,"doc":"`Real.sinh` as a `Homeomorph`. ","depth":5},{"type":"(α : Type u_5) → [inst : TopologicalSpace α] → α ≃ₜ α","name":"Homeomorph.refl","isProp":false,"doc":"Identity map as a homeomorphism. ","depth":6}],"count":397}
{"noDocExamples":[],"kind":"«term_^[_]»","examples":[{"type":"∀ {α : Type u} {f : α → α} {x : α}, Function.IsFixedPt f x → ∀ (n : ℕ), Function.IsFixedPt f^[n] x","name":"Function.IsFixedPt.iterate","isProp":true,"doc":"If `x` is a fixed point of `f`, then it is a fixed point of `f^[n]`. ","depth":10},{"type":"∀ {α : Type u_1} (f : α → α) (x : α),\n  Function.periodicOrbit f x = Cycle.map (fun n => f^[n] x) ↑(List.range (Function.minimalPeriod f x))","name":"Function.periodicOrbit_eq_cycle_map","isProp":true,"doc":"The definition of a periodic orbit, in terms of `Cycle.map`. ","depth":11},{"type":"∀ {α : Type u_2} [inst : MeasurableSpace α] {f : α → α} {μ : MeasureTheory.Measure α},\n  MeasureTheory.Conservative f μ → ∀ (n : ℕ), MeasureTheory.Conservative f^[n] μ","name":"MeasureTheory.Conservative.iterate","isProp":true,"doc":"Iteration of a conservative system is a conservative system. ","depth":11}],"count":389}
{"noDocExamples":[],"kind":"«term_→o_»","examples":[{"type":"ℕ →o ℕ","name":"rothNumberNat","isProp":false,"doc":"The Roth number of a natural `N` is the largest integer `m` for which there is a subset of\n`range N` of size `m` with no arithmetic progression of length 3.\nTrivially, `rothNumberNat N ≤ N`, but Roth's theorem (proved in 1953) shows that\n`rothNumberNat N = o(N)` and the construction by Behrend gives a lower bound of the form\n`N * exp(-C sqrt(log(N))) ≤ rothNumberNat N`.\nA significant refinement of Roth's theorem by Bloom and Sisask announced in 2020 gives\n`rothNumberNat N = O(N / (log N)^(1+c))` for an absolute constant `c`. ","depth":5},{"type":"{α : Type u_2} → [inst : Preorder α] → α →o α","name":"OrderHom.id","isProp":false,"doc":"The identity function as bundled monotone function. ","depth":6},{"type":"{α : Type u_2} → [inst : Preorder α] → α →o α × α","name":"OrderHom.diag","isProp":false,"doc":"Diagonal embedding of `α` into `α × α` as an `OrderHom`. ","depth":7}],"count":384}
{"noDocExamples":[],"kind":"«term_→ₛₗ[_]_»","examples":[{"type":"{R : Type u_1} → {S : Type u_6} → [inst : Semiring R] → [inst_1 : Semiring S] → (f : R →+* S) → R →ₛₗ[f] S","name":"RingHom.toSemilinearMap","isProp":false,"doc":"Interpret a `RingHom` `f` as an `f`-semilinear map. ","depth":16},{"type":"{R : Type u_1} →\n  {M : Type u_9} →\n    [inst : Semiring R] →\n      [inst_1 : AddCommMonoid M] → [inst_2 : Module R M] → {σ : R →+* R} → [inst_3 : RingHomId σ] → M →ₛₗ[σ] M","name":"LinearMap.id'","isProp":false,"doc":"A generalisation of `LinearMap.id` that constructs the identity function\nas a `σ`-semilinear map for any ring homomorphism `σ` which we know is the identity. ","depth":18},{"type":"{R₁ : Type u_2} →\n  {R₂ : Type u_3} →\n    {M : Type u_9} →\n      {M₂ : Type u_11} →\n        [inst : Semiring R₁] →\n          [inst_1 : Semiring R₂] →\n            [inst_2 : AddCommMonoid M] →\n              [inst_3 : AddCommMonoid M₂] →\n                [inst_4 : Module R₁ M] → [inst_5 : Module R₂ M₂] → {σ₁₂ : R₁ →+* R₂} → Zero (M →ₛₗ[σ₁₂] M₂)","name":"LinearMap.instZeroLinearMap","isProp":false,"doc":"The constant 0 map is linear. ","depth":23}],"count":383}
{"noDocExamples":[],"kind":"Function.«term_↪_»","examples":[{"type":"{α : Type u_1} → α ↪ WithTop α","name":"Function.Embedding.coeWithTop","isProp":false,"doc":"Embedding into `WithTop α`. ","depth":3},{"type":"{α : Type u_1} → α ↪ Option α","name":"Function.Embedding.some","isProp":false,"doc":"Embedding into `Option α` using `some`. ","depth":3},{"type":"ℕ → ℕ ↪ ℕ","name":"Polynomial.revAt","isProp":false,"doc":"If `i ≤ N`, then `revAt N i` returns `N - i`, otherwise it returns `i`.\nEssentially, this embedding is only used for `i ≤ N`.\nThe advantage of `revAt N i` over `N - i` is that `revAt` is an involution.\n","depth":3}],"count":374}
{"noDocExamples":[],"kind":"«term_-ᵥ_»","examples":[{"type":"∀ {G : Type u_1} [inst : AddGroup G] (g1 g2 : G), g1 -ᵥ g2 = g1 - g2","name":"vsub_eq_sub","isProp":true,"doc":"Simplify subtraction for a torsor for an `AddGroup G` over\nitself. ","depth":13},{"type":"∀ {G : Type u_1} {P : Type u_2} [inst : AddGroup G] [T : AddTorsor G P] (p : P), Function.Injective fun x => p -ᵥ x","name":"vsub_right_injective","isProp":true,"doc":"Subtracting a point from the point `p` is an injective\nfunction. ","depth":14},{"type":"∀ {G : Type u_1} {P : Type u_2} [inst : AddGroup G] [T : AddTorsor G P] (p : P), p -ᵥ p = 0","name":"vsub_self","isProp":true,"doc":"Subtracting a point from itself produces 0. ","depth":14}],"count":365}
{"noDocExamples":[],"kind":"«term⁅_,_⁆»","examples":[{"type":"∀ {L : Type v} [self : LieRing L] (x : L), ⁅x, x⁆ = 0","name":"LieRing.lie_self","isProp":true,"doc":"A Lie ring bracket vanishes on the diagonal in L × L. ","depth":12},{"type":"∀ {L : Type v} [self : LieRing L] (x y z : L), ⁅x, ⁅y, z⁆⁆ = ⁅⁅x, y⁆, z⁆ + ⁅y, ⁅x, z⁆⁆","name":"LieRing.leibniz_lie","isProp":true,"doc":"A Lie ring bracket satisfies a Leibniz / Jacobi identity. ","depth":17},{"type":"∀ {η : Type u_4} [inst : Finite η] {Gs : η → Type u_5} [inst : (i : η) → Group (Gs i)]\n  (H K : (i : η) → Subgroup (Gs i)),\n  ⁅Subgroup.pi Set.univ H, Subgroup.pi Set.univ K⁆ = Subgroup.pi Set.univ fun i => ⁅H i, K i⁆","name":"Subgroup.commutator_pi_pi_of_finite","isProp":true,"doc":"The commutator of a finite direct product is contained in the direct product of the commutators.\n","depth":18}],"count":359}
{"noDocExamples":[],"kind":"MeasureTheory.«term∫⁻_,_∂_»","examples":[{"type":"∀ {α : Type u_1} {m : MeasurableSpace α} {μ : MeasureTheory.Measure α} {f : α → ℝ},\n  MeasureTheory.Integrable f →\n    ∫ (a : α), f a ∂μ =\n      ENNReal.toReal (∫⁻ (a : α), ENNReal.ofReal (f a) ∂μ) - ENNReal.toReal (∫⁻ (a : α), ENNReal.ofReal (-f a) ∂μ)","name":"MeasureTheory.integral_eq_lintegral_pos_part_sub_lintegral_neg_part","isProp":true,"doc":"The Bochner integral of a real-valued function `f : α → ℝ` is the difference between the\nintegral of the positive part of `f` and the integral of the negative part of `f`.  ","depth":14},{"type":"∀ {α : Type u_1} {β : Type u_3} [inst : MeasurableSpace α] [inst_1 : MeasurableSpace β] {μ : MeasureTheory.Measure α}\n  [inst_2 : MeasureTheory.SigmaFinite μ] {f : α → β → ENNReal},\n  Measurable (Function.uncurry f) → Measurable fun y => ∫⁻ (x : α), f x y ∂μ","name":"Measurable.lintegral_prod_left","isProp":true,"doc":"The Lebesgue integral is measurable. This shows that the integrand of (the right-hand-side of)\nthe symmetric version of Tonelli's theorem is measurable.\nThis version has the argument `f` in curried form. ","depth":15},{"type":"∀ {α : Type u_1} {β : Type u_3} [inst : MeasurableSpace α] [inst_1 : MeasurableSpace β] {ν : MeasureTheory.Measure β}\n  [inst_2 : MeasureTheory.SigmaFinite ν] {f : α → β → ENNReal},\n  Measurable (Function.uncurry f) → Measurable fun x => ∫⁻ (y : β), f x y ∂ν","name":"Measurable.lintegral_prod_right","isProp":true,"doc":"The Lebesgue integral is measurable. This shows that the integrand of (the right-hand-side of)\nTonelli's theorem is measurable.\nThis version has the argument `f` in curried form. ","depth":15}],"count":359}
{"noDocExamples":[],"kind":"MeasureTheory.«term∫_,_∂_»","examples":[{"type":"∀ {α : Type u_1} {m : MeasurableSpace α} {μ : MeasureTheory.Measure α} {f : α → ℝ},\n  MeasureTheory.Integrable f →\n    ∫ (a : α), f a ∂μ =\n      ENNReal.toReal (∫⁻ (a : α), ENNReal.ofReal (f a) ∂μ) - ENNReal.toReal (∫⁻ (a : α), ENNReal.ofReal (-f a) ∂μ)","name":"MeasureTheory.integral_eq_lintegral_pos_part_sub_lintegral_neg_part","isProp":true,"doc":"The Bochner integral of a real-valued function `f : α → ℝ` is the difference between the\nintegral of the positive part of `f` and the integral of the negative part of `f`.  ","depth":14},{"type":"∀ {α : Type u_1} {m0 : MeasurableSpace α} {μ : MeasureTheory.Measure α} {f : α → ℝ}\n  [inst : MeasureTheory.IsProbabilityMeasure μ], MeasureTheory.Integrable f → ∃ x, f x ≤ ∫ (a : α), f a ∂μ","name":"MeasureTheory.exists_le_integral","isProp":true,"doc":"**First moment method**. The minimum of an integrable function is smaller than its integral. ","depth":16},{"type":"∀ {α : Type u_1} {m0 : MeasurableSpace α} {μ : MeasureTheory.Measure α} {f : α → ℝ}\n  [inst : MeasureTheory.IsProbabilityMeasure μ], MeasureTheory.Integrable f → ∃ x, ∫ (a : α), f a ∂μ ≤ f x","name":"MeasureTheory.exists_integral_le","isProp":true,"doc":"**First moment method**. The maximum of an integrable function is greater than its integral. ","depth":17}],"count":330}
{"noDocExamples":[],"kind":"termRexp","examples":[{"type":"Filter.Tendsto rexp Filter.atTop Filter.atTop","name":"Real.tendsto_exp_atTop","isProp":true,"doc":"The real exponential function tends to `+∞` at `+∞`. ","depth":5},{"type":"Filter.Tendsto rexp (nhds 0) (nhds 1)","name":"Real.tendsto_exp_nhds_0_nhds_1","isProp":true,"doc":"The real exponential function tends to `1` at `0`. ","depth":7},{"type":"Filter.Tendsto (fun x => rexp (-x)) Filter.atTop (nhds 0)","name":"Real.tendsto_exp_neg_atTop_nhds_0","isProp":true,"doc":"The real exponential function tends to `0` at `-∞` or, equivalently, `exp(-x)` tends to `0`\nat `+∞` ","depth":8}],"count":298}
{"noDocExamples":[],"kind":"«term⨁_,_»","examples":[{"type":"{ι : Type v} →\n  {β : ι → Type w} → [inst : (i : ι) → AddCommMonoid (β i)] → [inst_1 : IsEmpty ι] → Unique (⨁ (i : ι), β i)","name":"DirectSum.uniqueOfIsEmpty","isProp":false,"doc":"A direct sum over an empty type is trivial. ","depth":9},{"type":"{ι : Type u_1} →\n  [inst : DecidableEq ι] →\n    (A : ι → Type u_2) →\n      [inst : (i : ι) → AddCommMonoid (A i)] →\n        [inst_1 : AddCommMonoid ι] → [inst_2 : DirectSum.GCommSemiring A] → CommSemiring (⨁ (i : ι), A i)","name":"DirectSum.commSemiring","isProp":false,"doc":"The `CommSemiring` structure derived from `GCommSemiring A`. ","depth":11},{"type":"{ι : Type u_1} →\n  [inst : DecidableEq ι] →\n    (A : ι → Type u_2) →\n      [inst : (i : ι) → AddCommMonoid (A i)] →\n        [inst_1 : AddMonoid ι] → [inst_2 : DirectSum.GSemiring A] → Semiring (⨁ (i : ι), A i)","name":"DirectSum.semiring","isProp":false,"doc":"The `Semiring` structure derived from `GSemiring A`. ","depth":11}],"count":296}
{"noDocExamples":[],"kind":"«term_≥_»","examples":[{"type":"∀ {μ : YoungDiagram},\n  YoungDiagram.ofRowLens (YoungDiagram.rowLens μ) (_ : List.Sorted (fun x x_1 => x ≥ x_1) (YoungDiagram.rowLens μ)) = μ","name":"YoungDiagram.ofRowLens_to_rowLens_eq_self","isProp":true,"doc":"The left_inv direction of the equivalence ","depth":6},{"type":"∀ {w : List ℕ} {hw : List.Sorted (fun x x_1 => x ≥ x_1) w} (i : Fin (List.length w)),\n  YoungDiagram.rowLen (YoungDiagram.ofRowLens w hw) ↑i = List.get w i","name":"YoungDiagram.rowLen_ofRowLens","isProp":true,"doc":"The length of the `i`th row in `ofRowLens w hw` is the `i`th entry of `w` ","depth":10},{"type":"∀ {w : List ℕ} {hw : List.Sorted (fun x x_1 => x ≥ x_1) w},\n  (∀ (x : ℕ), x ∈ w → 0 < x) → YoungDiagram.rowLens (YoungDiagram.ofRowLens w hw) = w","name":"YoungDiagram.rowLens_ofRowLens_eq_self","isProp":true,"doc":"The right_inv direction of the equivalence ","depth":10}],"count":292}
{"noDocExamples":[],"kind":"Lean.Parser.Term.match","examples":[{"type":"∀ {α : Type u_1} [inst : Preorder α] {a : Thunk α} {ε : Type u_2} [self : Estimator a ε] (e : ε),\n  match EstimatorData.improve a e with\n  | none => EstimatorData.bound a e = Thunk.get a\n  | some e' => EstimatorData.bound a e < EstimatorData.bound a e'","name":"Estimator.improve_spec","isProp":true,"doc":"Calling `improve` either gives a strictly better bound,\nor a proof that the current bound is exact. ","depth":18},{"type":"{C : Type u_1} →\n  [inst : CategoryTheory.Category.{u_2, u_1} C] →\n    {B X : C} →\n      (f : X ⟶ B) →\n        [inst_1 : CategoryTheory.EffectiveEpi f] →\n          CategoryTheory.EffectiveEpiFamilyStruct (fun x => X) fun x =>\n            match x with\n            | PUnit.unit => f","name":"CategoryTheory.EffectiveEpi_familyStruct","isProp":false,"doc":"An `EffectiveEpiFamily` consisting of a single `EffectiveEpi`\n","depth":18},{"type":"∀ {α : Type u_2} [inst : PartialOrder α] {ε : Type u_1} (a : Thunk α) (p : α → Bool) [inst_1 : Estimator a ε]\n  [inst_2 : WellFoundedGT ↑(Set.range (EstimatorData.bound a))] (e : ε),\n  match Estimator.improveUntil a p e with\n  | Except.error a_1 => ¬p (Thunk.get a) = true\n  | Except.ok e' => p (EstimatorData.bound a e') = true","name":"Estimator.improveUntil_spec","isProp":true,"doc":"If `Estimator.improveUntil a p e` returns `some e'`, then `bound a e'` satisfies `p`.\nOtherwise, that value `a` must not satisfy `p`.\n","depth":21}],"count":286}
{"noDocExamples":[],"kind":"«term_→ₙ*_»","examples":[{"type":"(M : Type u_9) → [inst : Mul M] → M →ₙ* M","name":"MulHom.id","isProp":false,"doc":"The identity map from a type with multiplication to itself. ","depth":6},{"type":"{α : Type u_2} → [inst : Mul α] → α →ₙ* Filter α","name":"Filter.pureMulHom","isProp":false,"doc":"`pure` operation as a `MulHom`. ","depth":6},{"type":"{α : Type u_2} → [inst : Mul α] → α →ₙ* Set α","name":"Set.singletonMulHom","isProp":false,"doc":"The singleton operation as a `MulHom`. ","depth":6}],"count":272}
{"noDocExamples":[],"kind":"Asymptotics.«term_=O[_]_»","examples":[{"type":"(fun τ => jacobiTheta τ - 1) =O[Filter.comap Complex.im Filter.atTop] fun τ => rexp (-Real.pi * τ.im)","name":"isBigO_at_im_infty_jacobiTheta_sub_one","isProp":true,"doc":"The norm of `jacobiTheta τ - 1` decays exponentially as `im τ → ∞`. ","depth":9},{"type":"zetaKernel₁ =O[Filter.atTop] fun t => rexp (-Real.pi * t)","name":"isBigO_atTop_zetaKernel₁","isProp":true,"doc":"Bound for `zetaKernel₁` for large `t`. ","depth":9},{"type":"zetaKernel₂ =O[Filter.atTop] fun t => rexp (-Real.pi * t)","name":"isBigO_atTop_zetaKernel₂","isProp":true,"doc":"Bound for `zetaKernel₂` for large `t`. ","depth":9}],"count":267}
{"noDocExamples":[],"kind":"termDepIfThenElse","examples":[{"type":"∀ {α : Sort u_2} (P : Prop) [inst : Decidable P] (a b : α), (if x : P then a else b) = if P then a else b","name":"dite_eq_ite","isProp":true,"doc":"A `dite` whose results do not actually depend on the condition may be reduced to an `ite`. ","depth":12},{"type":"∀ {α : Sort u_1} {β : Sort u_2} (f : α → β) (P : Prop) [inst : Decidable P] (x : P → α) (y : ¬P → α),\n  f (dite P x y) = if h : P then f (x h) else f (y h)","name":"apply_dite","isProp":true,"doc":"A function applied to a `dite` is a `dite` of that function applied to each of the branches. ","depth":15},{"type":"∀ {α : Sort u_2} {σ : α → Sort u_1} (P : Prop) [inst : Decidable P] (f : P → (a : α) → σ a) (g : ¬P → (a : α) → σ a)\n  (a : α), dite P f g a = if h : P then f h a else g h a","name":"dite_apply","isProp":true,"doc":"A 'dite' producing a `Pi` type `Π a, σ a`, applied to a value `a : α` is a `dite` that applies\neither branch to `a`. ","depth":17}],"count":264}
{"noDocExamples":[],"kind":"«term_<$>_»","examples":[{"type":"∀ {α β γ : Type u_1} (f : α → β → γ) (a : Option α) (b : Option β), Option.map₂ f a b = Seq.seq (f <$> a) fun x => b","name":"Option.map₂_def","isProp":true,"doc":"`Option.map₂` in terms of monadic operations. Note that this can't be taken as the definition\nbecause of the lack of universe polymorphism. ","depth":15},{"type":"∀ {α β γ : Type u_1} (f : α → β → γ) (s : Set α) (t : Set β), Set.image2 f s t = Seq.seq (f <$> s) fun x => t","name":"Set.image2_def","isProp":true,"doc":"`Set.image2` in terms of monadic operations. Note that this can't be taken as the definition\nbecause of the lack of universe polymorphism. ","depth":15},{"type":"∀ {m : Type u_1 → Type u_2} {α α_1 : Type u_1} {p : α_1 → Prop} {f : α → α_1} [inst : Functor m]\n  [inst_1 : LawfulFunctor m] {x : m α}, SatisfiesM (fun a => p (f a)) x → SatisfiesM p (f <$> x)","name":"SatisfiesM.map_pre","isProp":true,"doc":"`SatisfiesM` distributes over `<$>`, weakest precondition version.\n(Use this for reasoning backward from the goal.)\n","depth":16}],"count":241}
{"noDocExamples":[],"kind":"Function.term_On_","examples":[{"type":"∀ {α : Type u_1} {ι : Type u_4} {f : ι → α}, Function.Injective f → Pairwise ((fun x x_1 => x ≠ x_1) on f)","name":"Function.Injective.pairwise_ne","isProp":true,"doc":"**Alias** of the forward direction of `Function.injective_iff_pairwise_ne`.","depth":12},{"type":"∀ {α : Type u_1} {ι : Type u_3} [inst : CompleteLattice α] {t : ι → α},\n  CompleteLattice.Independent t → Pairwise (Disjoint on t)","name":"CompleteLattice.Independent.pairwiseDisjoint","isProp":true,"doc":"If the elements of a set are independent, then any pair within that set is disjoint. ","depth":16},{"type":"∀ {α : Type u_1} [inst : GeneralizedBooleanAlgebra α] {f d : ℕ → α},\n  Pairwise (Disjoint on d) → partialSups d = partialSups f → d = disjointed f","name":"disjointed_unique","isProp":true,"doc":"`disjointed f` is the unique sequence that is pairwise disjoint and has the same partial sups\nas `f`. ","depth":16}],"count":233}
{"noDocExamples":[],"kind":"List.«term_~_»","examples":[{"type":"{α : Type u} → (xs ys : List α) → xs ~ ys → List.Nodup ys → SlimCheck.InjectiveFunction α","name":"SlimCheck.InjectiveFunction.mk","isProp":false,"doc":"Create an injective function from one list and a permutation of that list. ","depth":7},{"type":"∀ {α : Type uu} {a : α} {l : List α}, l ~ [a] → l = [a]","name":"List.Perm.eq_singleton","isProp":true,"doc":"**Alias** of the forward direction of `List.perm_singleton`.","depth":8},{"type":"{α : Type u} → (xs : List α) → SlimCheck.Gen { ys // xs ~ ys }","name":"SlimCheck.Gen.permutationOf","isProp":false,"doc":"Generate a random permutation of a given list. ","depth":8}],"count":231}
{"noDocExamples":[],"kind":"Asymptotics.«term_=o[_]_»","examples":[{"type":"∀ (s : ℝ), (fun x => x ^ s) =o[Filter.atTop] rexp","name":"isLittleO_rpow_exp_atTop","isProp":true,"doc":"`x ^ s = o(exp x)` as `x → ∞` for any real `s`. ","depth":10},{"type":"∀ (k : ℤ) {b : ℝ}, 0 < b → (fun x => x ^ ↑k) =o[Filter.atTop] fun x => rexp (b * x)","name":"isLittleO_zpow_exp_pos_mul_atTop","isProp":true,"doc":"`x ^ k = o(exp(b * x))` as `x → ∞` for any integer `k` and positive `b`. ","depth":12},{"type":"∀ {R : Type u_4} [inst : NormedRing R] {r : ℝ}, 1 < r → Nat.cast =o[Filter.atTop] fun n => r ^ n","name":"isLittleO_coe_const_pow_of_one_lt","isProp":true,"doc":"For a real `r > 1` we have `n = o(r ^ n)` as `n → ∞`. ","depth":12}],"count":229}
{"noDocExamples":[],"kind":"«term_→ᵃ[_]_»","examples":[{"type":"(k : Type u_1) →\n  {V1 : Type u_2} →\n    (P1 : Type u_3) →\n      [inst : Ring k] → [inst_1 : AddCommGroup V1] → [inst_2 : Module k V1] → [inst_3 : AddTorsor V1 P1] → P1 →ᵃ[k] P1","name":"AffineMap.id","isProp":false,"doc":"Identity map as an affine map. ","depth":19},{"type":"{k : Type u_1} →\n  {V1 : Type u_2} →\n    {P1 : Type u_3} →\n      [inst : Ring k] →\n        [inst_1 : AddCommGroup V1] → [inst_2 : Module k V1] → [inst_3 : AddTorsor V1 P1] → P1 → P1 → k →ᵃ[k] P1","name":"AffineMap.lineMap","isProp":false,"doc":"The affine map from `k` to `P1` sending `0` to `p₀` and `1` to `p₁`. ","depth":21},{"type":"{ι : Type u_1} →\n  {k : Type u_3} →\n    {V : Type u_4} →\n      {P : Type u_5} →\n        [inst : AddCommGroup V] →\n          [inst_1 : AddTorsor V P] → [inst_2 : Ring k] → [inst_3 : Module k V] → AffineBasis ι k P → P →ᵃ[k] ι → k","name":"AffineBasis.coords","isProp":false,"doc":"Barycentric coordinates as an affine map. ","depth":21}],"count":220}
{"noDocExamples":[],"kind":"MeasureTheory.«term∫_In_,_∂_»","examples":[{"type":"∀ {α : Type u_1} {m0 : MeasurableSpace α} {μ : MeasureTheory.Measure α} {f : α → ℝ},\n  MeasureTheory.StronglyMeasurable f →\n    MeasureTheory.Integrable f →\n      (∀ (s : Set α), MeasurableSet s → ↑↑μ s < ⊤ → 0 ≤ ∫ (x : α) in s, f x ∂μ) → 0 ≤ᶠ[MeasureTheory.Measure.ae μ] f","name":"MeasureTheory.ae_nonneg_of_forall_set_integral_nonneg_of_stronglyMeasurable","isProp":true,"doc":"Don't use this lemma. Use `ae_nonneg_of_forall_set_integral_nonneg`. ","depth":20},{"type":"∀ {α : Type u_1} {E : Type u_3} [inst : MeasurableSpace α] [inst_1 : NormedAddCommGroup E] {f : α → E} {s : Set α}\n  {μ : MeasureTheory.Measure α} [inst_2 : NormedSpace ℝ E],\n  (∀ (x : α), ¬x ∈ s → f x = 0) → ∫ (x : α) in s, f x ∂μ = ∫ (x : α), f x ∂μ","name":"MeasureTheory.set_integral_eq_integral_of_forall_compl_eq_zero","isProp":true,"doc":"If a function vanishes on `sᶜ`, then its integral on `s` coincides with its integral on the\nwhole space. ","depth":21},{"type":"∀ {α : Type u_1} [inst : MeasurableSpace α] {μ : MeasureTheory.Measure α} {f g : α → ℝ} {s : Set α}\n  [inst_1 : MeasureTheory.SigmaFinite μ],\n  MeasureTheory.IntegrableOn f s →\n    MeasureTheory.IntegrableOn g s →\n      MeasurableSet s →\n        (∀ (x : α), x ∈ s → f x ≤ g x) →\n          ↑↑(MeasureTheory.Measure.prod μ MeasureTheory.volume) (regionBetween f g s) =\n            ENNReal.ofReal (∫ (y : α) in s, (g - f) y ∂μ)","name":"volume_regionBetween_eq_integral","isProp":true,"doc":"If two functions are integrable on a measurable set, and one function is less than\nor equal to the other on that set, then the volume of the region\nbetween the two functions can be represented as an integral. ","depth":23}],"count":220}
{"noDocExamples":[],"kind":"«term_→._»","examples":[{"type":"(α : Type u_7) → α →. α","name":"PFun.id","isProp":false,"doc":"The identity as a partial function ","depth":3},{"type":"Nat.Partrec.Code → ℕ →. ℕ","name":"Nat.Partrec.Code.eval","isProp":false,"doc":"The interpretation of a `Nat.Partrec.Code` as a partial function.\n* `Nat.Partrec.Code.zero`: The constant zero function.\n* `Nat.Partrec.Code.succ`: The successor function.\n* `Nat.Partrec.Code.left`: Left unpairing of a pair of ℕ (encoded by `Nat.pair`)\n* `Nat.Partrec.Code.right`: Right unpairing of a pair of ℕ (encoded by `Nat.pair`)\n* `Nat.Partrec.Code.pair`: Pairs the outputs of argument codes using `Nat.pair`.\n* `Nat.Partrec.Code.comp`: Composition of two argument codes.\n* `Nat.Partrec.Code.prec`: Primitive recursion. Given an argument of the form `Nat.pair a n`:\n  * If `n = 0`, returns `eval cf a`.\n  * If `n = succ k`, returns `eval cg (pair a (pair k (eval (prec cf cg) (pair a k))))`\n* `Nat.Partrec.Code.rfind'`: Minimization. For `f` an argument of the form `Nat.pair a m`,\n  `rfind' f m` returns the least `a` such that `f a m = 0`, if one exists and `f b m` terminates\n  for `b < a`\n","depth":3},{"type":"Turing.ToPartrec.Code → List ℕ →. List ℕ","name":"Turing.ToPartrec.Code.eval","isProp":false,"doc":"The semantics of the `Code` primitives, as partial functions `List ℕ →. List ℕ`. By convention\nwe functions that return a single result return a singleton `[n]`, or in some cases `n :: v` where\n`v` will be ignored by a subsequent function.\n\n* `zero'` appends a `0` to the input. That is, `zero' v = 0 :: v`.\n* `succ` returns the successor of the head of the input, defaulting to zero if there is no head:\n  * `succ [] = [1]`\n  * `succ (n :: v) = [n + 1]`\n* `tail` returns the tail of the input\n  * `tail [] = []`\n  * `tail (n :: v) = v`\n* `cons f fs` calls `f` and `fs` on the input and conses the results:\n  * `cons f fs v = (f v).head :: fs v`\n* `comp f g` calls `f` on the output of `g`:\n  * `comp f g v = f (g v)`\n* `case f g` cases on the head of the input, calling `f` or `g` depending on whether it is zero or\n  a successor (similar to `Nat.casesOn`).\n  * `case f g [] = f []`\n  * `case f g (0 :: v) = f v`\n  * `case f g (n+1 :: v) = g (n :: v)`\n* `fix f` calls `f` repeatedly, using the head of the result of `f` to decide whether to call `f`\n  again or finish:\n  * `fix f v = []` if `f v = []`\n  * `fix f v = w` if `f v = 0 :: w`\n  * `fix f v = fix f w` if `f v = n+1 :: w` (the exact value of `n` is discarded)\n","depth":4}],"count":209}
{"noDocExamples":[],"kind":"MeasureTheory.«term_→ₘ[_]_»","examples":[{"type":"{α : Type u_1} → [inst : MeasurableSpace α] → {μ : MeasureTheory.Measure α} → (α →ₘ[μ] ENNReal) → ENNReal","name":"MeasureTheory.AEEqFun.lintegral","isProp":false,"doc":"For `f : α → ℝ≥0∞`, define `∫ [f]` to be `∫ f` ","depth":9},{"type":"{α : Type u_1} →\n  {β : Type u_2} →\n    [inst : MeasurableSpace α] → {μ : MeasureTheory.Measure α} → [inst_1 : TopologicalSpace β] → (α →ₘ[μ] β) → α → β","name":"MeasureTheory.AEEqFun.cast","isProp":false,"doc":"Coercion from a space of equivalence classes of almost everywhere strongly measurable\nfunctions to functions. ","depth":11},{"type":"(α : Type u_1) →\n  {β : Type u_2} →\n    [inst : MeasurableSpace α] → {μ : MeasureTheory.Measure α} → [inst_1 : TopologicalSpace β] → β → α →ₘ[μ] β","name":"MeasureTheory.AEEqFun.const","isProp":false,"doc":"The equivalence class of a constant function: `[fun _ : α => b]`, based on the equivalence\nrelation of being almost everywhere equal ","depth":11}],"count":209}
{"noDocExamples":[],"kind":"TensorProduct.«term_⊗ₜ[_]_»","examples":[{"type":"∀ (R : Type u) (S : Type v) [inst : CommRing R] [inst_1 : CommRing S] [inst_2 : Algebra R S],\n  Submodule.span S (Set.range fun s => 1 ⊗ₜ[R] s - s ⊗ₜ[R] 1) =\n    Submodule.restrictScalars S (KaehlerDifferential.ideal R S)","name":"KaehlerDifferential.submodule_span_range_eq_ideal","isProp":true,"doc":"The kernel of `S ⊗[R] S →ₐ[R] S` is generated by `1 ⊗ s - s ⊗ 1` as a `S`-module. ","depth":27},{"type":"∀ (R : Type u_1) [inst : CommSemiring R] (M : Type u_4) (N : Type u_5) [inst_1 : AddCommMonoid M]\n  [inst_2 : AddCommMonoid N] [inst_3 : Module R M] [inst_4 : Module R N],\n  Submodule.span R {t | ∃ m n, m ⊗ₜ[R] n = t} = ⊤","name":"TensorProduct.span_tmul_eq_top","isProp":true,"doc":"The simple (aka pure) elements span the tensor product. ","depth":29},{"type":"∀ {R : Type u_1} [inst : CommSemiring R] {R' : Type u_2} [inst_1 : Monoid R'] {M : Type u_4} {N : Type u_5}\n  [inst_2 : AddCommMonoid M] [inst_3 : AddCommMonoid N] [inst_4 : Module R M] [inst_5 : Module R N]\n  [inst_6 : DistribMulAction R' M] [inst_7 : DistribMulAction R' N] [inst_8 : TensorProduct.CompatibleSMul R R' M N]\n  (r : R') (m : M) (n : N), (r • m) ⊗ₜ[R] n = m ⊗ₜ[R] (r • n)","name":"TensorProduct.smul_tmul","isProp":true,"doc":"`smul` can be moved from one side of the product to the other .","depth":31}],"count":208}
{"noDocExamples":[],"kind":"«term∫_In_.._,_»","examples":[{"type":"∀ (n : ℕ), ∫ (x : ℝ) in 0 ..Real.pi / 2, Real.cos x ^ n = 1 / 2 * ∫ (x : ℝ) in 0 ..Real.pi, Real.sin x ^ n","name":"EulerSine.integral_cos_pow_eq","isProp":true,"doc":"Relate the integral `cos x ^ n` over `[0, π/2]` to the integral of `sin x ^ n` over `[0, π]`,\nwhich is studied in `Data.Real.Pi.Wallis` and other places. ","depth":14},{"type":"∀ {a b : ℝ}, ∫ (x : ℝ) in a..b, Real.sin x * Real.cos x = (Real.cos a ^ 2 - Real.cos b ^ 2) / 2","name":"integral_sin_mul_cos₂","isProp":true,"doc":"The integral of `sin x * cos x`, given in terms of cos².\nSee `integral_sin_mul_cos₁` above for the integral given in terms of sin². ","depth":15},{"type":"∀ {a b : ℝ}, ∫ (x : ℝ) in a..b, Real.sin x * Real.cos x = (Real.sin b ^ 2 - Real.sin a ^ 2) / 2","name":"integral_sin_mul_cos₁","isProp":true,"doc":"The integral of `sin x * cos x`, given in terms of sin².\nSee `integral_sin_mul_cos₂` below for the integral given in terms of cos². ","depth":15}],"count":204}
{"noDocExamples":[],"kind":"«term_→ₗ.[_]_»","examples":[{"type":"{R : Type u_1} →\n  [inst : Ring R] →\n    {E : Type u_2} →\n      [inst_1 : AddCommGroup E] →\n        [inst_2 : Module R E] →\n          {F : Type u_3} → [inst_3 : AddCommGroup F] → [inst_4 : Module R F] → (E →ₗ.[R] F) → F →ₗ.[R] E","name":"LinearPMap.inverse","isProp":false,"doc":"The inverse of a `LinearPMap`. ","depth":17},{"type":"{R : Type u_1} →\n  [inst : Ring R] →\n    {E : Type u_2} →\n      [inst_1 : AddCommGroup E] →\n        [inst_2 : Module R E] →\n          {F : Type u_3} → [inst_3 : AddCommGroup F] → [inst_4 : Module R F] → (E →ₗ.[R] F) → Submodule R (E × F)","name":"LinearPMap.graph","isProp":false,"doc":"The graph of a `LinearPMap` viewed as a submodule on `E × F`. ","depth":18},{"type":"{R : Type u_1} →\n  [inst : Ring R] →\n    {E : Type u_2} →\n      [inst_1 : AddCommGroup E] →\n        [inst_2 : Module R E] →\n          {F : Type u_3} → [inst_3 : AddCommGroup F] → [inst_4 : Module R F] → Submodule R (E × F) → E →ₗ.[R] F","name":"Submodule.toLinearPMap","isProp":false,"doc":"Define a `LinearPMap` from its graph.\n\nIn the case that the submodule is not a graph of a `LinearPMap` then the underlying linear map\nis just the zero map. ","depth":18}],"count":196}
{"noDocExamples":[],"kind":"Filter.«term_≤ᶠ[_]_»","examples":[{"type":"∀ {α : Type u_1} {_m0 : MeasurableSpace α} ⦃s s' : Set α⦄ ⦃μ ν : MeasureTheory.Measure α⦄,\n  s ≤ᶠ[MeasureTheory.Measure.ae μ] s' → μ ≤ ν → MeasureTheory.Measure.restrict μ s ≤ MeasureTheory.Measure.restrict ν s'","name":"MeasureTheory.Measure.restrict_mono'","isProp":true,"doc":"Restriction of a measure to a subset is monotone both in set and in measure. ","depth":16},{"type":"∀ {α : Type u_1} {m : MeasurableSpace α} {μ : MeasureTheory.Measure α} {f : MeasureTheory.SimpleFunc α ℝ},\n  MeasureTheory.Integrable ↑f →\n    0 ≤ᶠ[MeasureTheory.Measure.ae μ] ↑f →\n      MeasureTheory.SimpleFunc.integral μ f = ENNReal.toReal (∫⁻ (a : α), ENNReal.ofReal (↑f a) ∂μ)","name":"MeasureTheory.SimpleFunc.integral_eq_lintegral","isProp":true,"doc":"`SimpleFunc.bintegral` and `SimpleFunc.integral` agree when the integrand has type\n`α →ₛ ℝ≥0∞`. But since `ℝ≥0∞` is not a `NormedSpace`, we need some form of coercion. ","depth":16},{"type":"∀ {α : Type u_1} [inst : MeasurableSpace α] {μ : MeasureTheory.Measure α} {s t : Set α},\n  s ≤ᶠ[MeasureTheory.Measure.ae μ] t → ↑↑μ s ≤ ↑↑μ t","name":"MeasureTheory.measure_mono_ae","isProp":true,"doc":"If `s ⊆ t` modulo a set of measure `0`, then `μ s ≤ μ t`. ","depth":16}],"count":192}
{"noDocExamples":[],"kind":"«term_→ₗ⁅_⁆_»","examples":[{"type":"{R : Type u} → {L₁ : Type v} → [inst : CommRing R] → [inst_1 : LieRing L₁] → [inst_2 : LieAlgebra R L₁] → L₁ →ₗ⁅R⁆ L₁","name":"LieHom.id","isProp":false,"doc":"The identity map is a morphism of Lie algebras. ","depth":13},{"type":"{R : Type u} →\n  {L₁ : Type v} → [inst : CommRing R] → [inst_1 : LieRing L₁] → [inst_2 : LieAlgebra R L₁] → One (L₁ →ₗ⁅R⁆ L₁)","name":"LieHom.instOneLieHom","isProp":false,"doc":"The identity map is a Lie algebra morphism. ","depth":14},{"type":"(R : Type u₁) →\n  {L : Type u₂} →\n    [inst : CommRing R] → [inst_1 : LieRing L] → [inst_2 : LieAlgebra R L] → L →ₗ⁅R⁆ UniversalEnvelopingAlgebra R L","name":"UniversalEnvelopingAlgebra.ι","isProp":false,"doc":"The natural Lie algebra morphism from a Lie algebra to its universal enveloping algebra. ","depth":16}],"count":188}
{"noDocExamples":[],"kind":"Matrix.vecNotation","examples":[{"type":"(α β : Type u) → α × β ≃ ((i : Fin 2) → Matrix.vecCons α ![β] i)","name":"prodEquivPiFinTwo","isProp":false,"doc":"A product space `α × β` is equivalent to the space `Π i : Fin 2, γ i`, where\n`γ = Fin.cons α (Fin.cons β finZeroElim)`. See also `piFinTwoEquiv` and\n`finTwoArrowEquiv`. ","depth":12},{"type":"∀ (k : Type u_1) {V : Type u_2} {P : Type u_3} [inst : DivisionRing k] [inst_1 : AddCommGroup V] [inst_2 : Module k V]\n  [inst_3 : AddTorsor V P] {p₁ p₂ : P}, p₁ ≠ p₂ → AffineIndependent k ![p₁, p₂]","name":"affineIndependent_of_ne","isProp":true,"doc":"Two different points are affinely independent. ","depth":19},{"type":"∀ {V : Type u_1} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V]\n  [inst_2 : Fact (FiniteDimensional.finrank ℝ V = 2)] (o : Orientation ℝ V (Fin 2)) {x y : V},\n  Orientation.oangle o x y ≠ 0 ∧ Orientation.oangle o x y ≠ ↑Real.pi ↔ LinearIndependent ℝ ![x, y]","name":"Orientation.oangle_ne_zero_and_ne_pi_iff_linearIndependent","isProp":true,"doc":"The oriented angle between two vectors is not zero or `π` if and only if those two vectors\nare linearly independent. ","depth":21}],"count":184}
{"noDocExamples":[],"kind":"«term⅟_»","examples":[{"type":"{α : Type u} → [inst : One α] → [inst_1 : Mul α] → {a : α} → [inst_2 : Invertible a] → Invertible ⅟a","name":"invertibleInvOf","isProp":false,"doc":"`a` is the inverse of `⅟a`. ","depth":11},{"type":"∀ {α : Type u} [inst : MonoidWithZero α] (x : α) [inst_1 : Invertible x], Ring.inverse x = ⅟x","name":"Ring.inverse_invertible","isProp":true,"doc":"A variant of `Ring.inverse_unit`. ","depth":13},{"type":"∀ {α : Type u} [inst : Mul α] [inst_1 : One α] {a : α} [self : Invertible a], a * ⅟a = 1","name":"Invertible.mul_invOf_self","isProp":true,"doc":"`invOf a` is a right inverse of `a` ","depth":13}],"count":181}
{"noDocExamples":[],"kind":"«term_⊂_»","examples":[{"type":"∀ {α : Type u} {s : Set α}, Set.Nonempty s → ∅ ⊂ s","name":"Set.Nonempty.empty_ssubset","isProp":true,"doc":"**Alias** of the reverse direction of `Set.empty_ssubset`.","depth":8},{"type":"∀ {α : Type u_1} {s : Finset α}, Finset.Nonempty s → ∅ ⊂ s","name":"Finset.Nonempty.empty_ssubset","isProp":true,"doc":"**Alias** of the reverse direction of `Finset.empty_ssubset`.","depth":8},{"type":"∀ {α : Type u} [inst : HasSSubset α] [inst_1 : IsIrrefl α fun x x_1 => x ⊂ x_1] {a b : α}, a ⊂ b → a ≠ b","name":"HasSSubset.SSubset.ne","isProp":true,"doc":"**Alias** of `ne_of_ssubset`.","depth":10}],"count":175}
{"noDocExamples":[],"kind":"Lean.Parser.Term.let","examples":[{"type":"{α : Type u} →\n  {β : Type v} →\n    (e : α ≃ β) →\n      [inst : Add β] →\n        let mul := Equiv.add e;\n        α ≃+ β","name":"Equiv.addEquiv","isProp":false,"doc":"An equivalence `e : α ≃ β` gives an additive equivalence `α ≃+ β` where\nthe additive structure on `α` is the one obtained by transporting an additive structure\non `β` back along `e`.","depth":9},{"type":"{α : Type u} →\n  {β : Type v} →\n    (e : α ≃ β) →\n      [inst : Mul β] →\n        let mul := Equiv.mul e;\n        α ≃* β","name":"Equiv.mulEquiv","isProp":false,"doc":"An equivalence `e : α ≃ β` gives a multiplicative equivalence `α ≃* β` where\nthe multiplicative structure on `α` is the one obtained by transporting a multiplicative structure\non `β` back along `e`. ","depth":9},{"type":"{u : Lean.Level} →\n  {α :\n      let u := u;\n      Q(Type u)} →\n    Q(AddMonoid «$α») → List Q(«$α») → Q(«$α»)","name":"Linarith.addExprs'","isProp":false,"doc":"A type-safe analogue of `addExprs`. ","depth":10}],"count":175}
{"noDocExamples":[],"kind":"«term∃!_,_»","examples":[{"type":"{α : Type u_1} → [inst : Fintype α] → (p : α → Prop) → [inst : DecidablePred p] → (∃! a, p a) → { a // p a }","name":"Fintype.chooseX","isProp":false,"doc":"Given a fintype `α` and a predicate `p`, associate to a proof that there is a unique element of\n`α` satisfying `p` this unique element, as an element of the corresponding subtype. ","depth":8},{"type":"{α : Type u_1} → [inst : Fintype α] → (p : α → Prop) → [inst : DecidablePred p] → (∃! a, p a) → α","name":"Fintype.choose","isProp":false,"doc":"Given a fintype `α` and a predicate `p`, associate to a proof that there is a unique element of\n`α` satisfying `p` this unique element, as an element of `α`. ","depth":8},{"type":"∀ {α : Type u_1} (r : Setoid α), Setoid.mkClasses (Setoid.classes r) (_ : ∀ (a : α), ∃! b x, a ∈ b) = r","name":"Setoid.mkClasses_classes","isProp":true,"doc":"The equivalence relation made from the equivalence classes of an equivalence\nrelation r equals r. ","depth":8}],"count":171}
{"noDocExamples":[],"kind":"«termℤ√_»","examples":[{"type":"{d : ℤ} → ℤ√d","name":"Zsqrtd.sqrtd","isProp":false,"doc":"The representative of `√d` in the ring ","depth":2},{"type":"{d : ℤ} → ℤ√d → Prop","name":"Pell.IsPell","isProp":false,"doc":"The property of being a solution to the Pell equation, expressed\nas a property of elements of `ℤ√d`. ","depth":3},{"type":"{d : ℤ} → One (ℤ√d)","name":"Zsqrtd.instOneZsqrtd","isProp":false,"doc":"The one of the ring ","depth":3}],"count":170}
{"noDocExamples":[],"kind":"Complex.termCexp","examples":[{"type":"∀ {s : Set ℂ}, Set.Countable s → Set.Countable (cexp ⁻¹' s)","name":"Set.Countable.preimage_cexp","isProp":true,"doc":"**Alias** of the reverse direction of `Complex.countable_preimage_exp`.","depth":7},{"type":"Filter.Tendsto cexp (Filter.comap Complex.re Filter.atBot) (nhds 0)","name":"Complex.tendsto_exp_comap_re_atBot","isProp":true,"doc":"`Complex.exp z → 0` as `Complex.re z → -∞`.","depth":10},{"type":"∀ (x : ℂ), HasDerivAt cexp (cexp x) x","name":"Complex.hasDerivAt_exp","isProp":true,"doc":"The complex exponential is everywhere differentiable, with the derivative `exp x`. ","depth":10}],"count":166}
{"noDocExamples":[],"kind":"Set.«term⋃₀_»","examples":[{"type":"∀ {α : Type u} [t : TopologicalSpace α] {s : Set (Set α)}, TopologicalSpace.IsTopologicalBasis s → ⋃₀ s = Set.univ","name":"TopologicalSpace.IsTopologicalBasis.sUnion_eq","isProp":true,"doc":"The sets from `s` cover the whole space. ","depth":8},{"type":"∀ {α : Type u_1} {S T : Set (Set α)}, S ⊆ T → ⋃₀ S ⊆ ⋃₀ T","name":"Set.sUnion_mono","isProp":true,"doc":"**Alias** of `Set.sUnion_subset_sUnion`.","depth":10},{"type":"∀ {α : Type u_1} {S : Set (Set α)}, S ⊆ {∅, Set.univ} → ⋃₀ S ∈ {∅, Set.univ}","name":"Set.sUnion_mem_empty_univ","isProp":true,"doc":"If all sets in a collection are either `∅` or `Set.univ`, then so is their union. ","depth":10}],"count":159}
{"noDocExamples":[],"kind":"Lean.Parser.Term.explicit","examples":[{"type":"RingHom.LocalizationPreserves @RingHom.Finite","name":"localization_finite","isProp":true,"doc":"If `S` is a finite `R`-algebra, then `S' = M⁻¹S` is a finite `R' = M⁻¹R`-algebra. ","depth":1},{"type":"CategoryTheory.UnbundledHom @UniformContinuous","name":"UniformSpaceCat.instUnbundledHomTypeUniformSpaceUniformContinuous","isProp":true,"doc":"The information required to build morphisms for `UniformSpace`. ","depth":4},{"type":"∀ {α : Type u_1} {γ : Type u_3}, Monotone (@UniformFun.uniformSpace α γ)","name":"UniformFun.mono","isProp":true,"doc":"If `u₁` and `u₂` are two uniform structures on `γ` and `u₁ ≤ u₂`, then\n`𝒰(α, γ, u₁) ≤ 𝒰(α, γ, u₂)`. ","depth":9}],"count":155}
{"noDocExamples":[],"kind":"«term_∆_»","examples":[{"type":"∀ {α : Type u_1} [inst : MeasurableSpace α] {s : MeasureTheory.SignedMeasure α} {u v : Set α},\n  MeasurableSet u →\n    MeasurableSet v →\n      MeasureTheory.VectorMeasure.restrict 0 u ≤ MeasureTheory.VectorMeasure.restrict s u →\n        MeasureTheory.VectorMeasure.restrict 0 v ≤ MeasureTheory.VectorMeasure.restrict s v →\n          ↑s (u ∆ v) = 0 → ↑s (u \\ v) = 0 ∧ ↑s (v \\ u) = 0","name":"MeasureTheory.SignedMeasure.of_diff_eq_zero_of_symmDiff_eq_zero_positive","isProp":true,"doc":"If the symmetric difference of two positive sets is a null-set, then so are the differences\nbetween the two sets. ","depth":25},{"type":"∀ {α : Type u_1} [inst : MeasurableSpace α] {s : MeasureTheory.SignedMeasure α} {u v : Set α},\n  MeasurableSet u →\n    MeasurableSet v →\n      MeasureTheory.VectorMeasure.restrict s u ≤ MeasureTheory.VectorMeasure.restrict 0 u →\n        MeasureTheory.VectorMeasure.restrict s v ≤ MeasureTheory.VectorMeasure.restrict 0 v →\n          ↑s (u ∆ v) = 0 → ↑s (u \\ v) = 0 ∧ ↑s (v \\ u) = 0","name":"MeasureTheory.SignedMeasure.of_diff_eq_zero_of_symmDiff_eq_zero_negative","isProp":true,"doc":"If the symmetric difference of two negative sets is a null-set, then so are the differences\nbetween the two sets. ","depth":25},{"type":"∀ {α : Type u_1} [inst : MeasurableSpace α] {s : MeasureTheory.SignedMeasure α} {i j : Set α},\n  MeasurableSet i →\n    MeasurableSet j →\n      MeasureTheory.VectorMeasure.restrict 0 i ≤ MeasureTheory.VectorMeasure.restrict s i ∧\n          MeasureTheory.VectorMeasure.restrict s iᶜ ≤ MeasureTheory.VectorMeasure.restrict 0 iᶜ →\n        MeasureTheory.VectorMeasure.restrict 0 j ≤ MeasureTheory.VectorMeasure.restrict s j ∧\n            MeasureTheory.VectorMeasure.restrict s jᶜ ≤ MeasureTheory.VectorMeasure.restrict 0 jᶜ →\n          ↑s (i ∆ j) = 0 ∧ ↑s (iᶜ ∆ jᶜ) = 0","name":"MeasureTheory.SignedMeasure.of_symmDiff_compl_positive_negative","isProp":true,"doc":"The symmetric difference of two Hahn decompositions has measure zero. ","depth":26}],"count":152}
{"noDocExamples":[],"kind":"«term_⋖_»","examples":[{"type":"∀ {a b : ℕ}, a ⋖ b → ↑a ⋖ ↑b","name":"Covby.cast_int","isProp":true,"doc":"**Alias** of the reverse direction of `Nat.cast_int_covby_iff`.","depth":8},{"type":"∀ {n : ℕ} {a b : Fin n}, a ⋖ b → ↑a ⋖ ↑b","name":"Covby.coe_fin","isProp":true,"doc":"**Alias** of the reverse direction of `Fin.coe_covby_iff`.","depth":9},{"type":"∀ {α : Type u_1} [inst : LT α] {a b : α} [inst_1 : DenselyOrdered α], ¬a ⋖ b","name":"not_covby","isProp":true,"doc":"In a dense order, nothing covers anything. ","depth":10}],"count":152}
{"noDocExamples":[],"kind":"«term∑ᶠ_,_»","examples":[{"type":"∀ (G : Type u) [inst : Group G] [inst_1 : Finite G],\n  ∑ᶠ (x : ConjClasses G), Set.ncard (ConjClasses.carrier x) = Nat.card G","name":"Group.sum_card_conj_classes_eq_card","isProp":true,"doc":"Conjugacy classes form a partition of G, stated in terms of cardinality. ","depth":13},{"type":"∀ {α : Type u_1} {β : Type u_2} {M : Type u_5} [inst : AddCommMonoid M] {g : β → M} (e : α → β),\n  Function.Bijective e → ∑ᶠ (i : α), g (e i) = ∑ᶠ (j : β), g j","name":"finsum_comp","isProp":true,"doc":"See also `finsum_eq_of_bijective`, `Fintype.sum_bijective` and `Finset.sum_bij`.","depth":13},{"type":"∀ {α : Type u_1} {β : Type u_2} {M : Type u_5} [inst : AddCommMonoid M] {f : α → M} {g : β → M} (e : α → β),\n  Function.Bijective e → (∀ (x : α), f x = g (e x)) → ∑ᶠ (i : α), f i = ∑ᶠ (j : β), g j","name":"finsum_eq_of_bijective","isProp":true,"doc":"See `finsum_comp`, `Fintype.sum_bijective` and `Finset.sum_bij`.","depth":15}],"count":150}
{"noDocExamples":[],"kind":"«term_≃L[_]_»","examples":[{"type":"ℂ ≃L[ℝ] ℂ","name":"Complex.conjCle","isProp":false,"doc":"Continuous linear equiv version of the conj function, from `ℂ` to `ℂ`. ","depth":16},{"type":"ℂ ≃L[ℝ] ℝ × ℝ","name":"Complex.equivRealProdClm","isProp":false,"doc":"The natural `ContinuousLinearEquiv` from `ℂ` to `ℝ × ℝ`. ","depth":16},{"type":"{K : Type u_1} → [inst : IsROrC K] → K ≃L[ℝ] K","name":"IsROrC.conjCle","isProp":false,"doc":"Conjugate as a continuous linear equivalence ","depth":18}],"count":150}
{"noDocExamples":[],"kind":"«term_⇨_»","examples":[{"type":"∀ {α : Type u_4} [self : HeytingAlgebra α] (a : α), a ⇨ ⊥ = aᶜ","name":"HeytingAlgebra.himp_bot","isProp":true,"doc":"`a ⇨` is right adjoint to `a ⊓` ","depth":11},{"type":"∀ {α : Type u} [self : BooleanAlgebra α] (x y : α), x ⇨ y = y ⊔ xᶜ","name":"BooleanAlgebra.himp_eq","isProp":true,"doc":"`x ⇨ y` is equal to `y ⊔ xᶜ` ","depth":13},{"type":"∀ {α : Type u_2} [inst : GeneralizedHeytingAlgebra α] {a b : α}, a ⇨ b = ⊤ ↔ a ≤ b","name":"himp_eq_top_iff","isProp":true,"doc":"The **deduction theorem** in the Heyting algebra model of intuitionistic logic:\nan implication holds iff the conclusion follows from the hypothesis. ","depth":14}],"count":148}
{"noDocExamples":[],"kind":"«term_→SL[_]_»","examples":[{"type":"{R : Type u_1} →\n  {R₂ : Type u_2} →\n    {E : Type u_5} →\n      {E₂ : Type u_6} →\n        [inst : Semiring R] →\n          [inst_1 : Semiring R₂] →\n            {σ₁₂ : R →+* R₂} →\n              [inst_2 : SeminormedAddCommGroup E] →\n                [inst_3 : SeminormedAddCommGroup E₂] →\n                  [inst_4 : Module R E] → [inst_5 : Module R₂ E₂] → (E →ₛₗᵢ[σ₁₂] E₂) → E →SL[σ₁₂] E₂","name":"LinearIsometry.toContinuousLinearMap","isProp":false,"doc":"Interpret a linear isometry as a continuous linear map. ","depth":25},{"type":"{R₁ : Type u_1} →\n  {R₂ : Type u_2} →\n    [inst : Semiring R₁] →\n      [inst_1 : Semiring R₂] →\n        {σ₁₂ : R₁ →+* R₂} →\n          {M₁ : Type u_4} →\n            [inst_2 : TopologicalSpace M₁] →\n              [inst_3 : AddCommMonoid M₁] →\n                {M₂ : Type u_6} →\n                  [inst_4 : TopologicalSpace M₂] →\n                    [inst_5 : AddCommMonoid M₂] →\n                      [inst_6 : Module R₁ M₁] → [inst_7 : Module R₂ M₂] → (M₁ →SL[σ₁₂] M₂) → M₁ → M₂","name":"ContinuousLinearMap.Simps.apply","isProp":false,"doc":"See Note [custom simps projection]. We need to specify this projection explicitly in this case,\nbecause it is a composition of multiple projections. ","depth":27},{"type":"{R₁ : Type u_1} →\n  {R₂ : Type u_2} →\n    [inst : Semiring R₁] →\n      [inst_1 : Semiring R₂] →\n        {σ₁₂ : R₁ →+* R₂} →\n          {M₁ : Type u_4} →\n            [inst_2 : TopologicalSpace M₁] →\n              [inst_3 : AddCommMonoid M₁] →\n                {M₂ : Type u_6} →\n                  [inst_4 : TopologicalSpace M₂] →\n                    [inst_5 : AddCommMonoid M₂] →\n                      [inst_6 : Module R₁ M₁] → [inst_7 : Module R₂ M₂] → (M₁ →SL[σ₁₂] M₂) → M₁ →ₛₗ[σ₁₂] M₂","name":"ContinuousLinearMap.Simps.coe","isProp":false,"doc":"See Note [custom simps projection]. ","depth":27}],"count":147}
{"noDocExamples":[],"kind":"Multiset.«term_::ₘ_»","examples":[{"type":"{α : Type u_1} →\n  [inst : DecidableEq α] →\n    {δ : α → Sort v} → (m : Multiset α) → (a : α) → δ a → ((a : α) → a ∈ m → δ a) → (a' : α) → a' ∈ a ::ₘ m → δ a'","name":"Multiset.Pi.cons","isProp":false,"doc":"Given `δ : α → Type*`, a multiset `m` and a term `a`, as well as a term `b : δ a` and a\nfunction `f` such that `f a' : δ a'` for all `a'` in `m`, `Pi.cons m a b f` is a function `g` such\nthat `g a'' : δ a''` for all `a''` in `a ::ₘ m`. ","depth":14},{"type":"{α : Type u_1} →\n  {C : Multiset α → Sort u_4} →\n    C 0 →\n      (C_cons : (a : α) → (m : Multiset α) → C m → C (a ::ₘ m)) →\n        (∀ (a a' : α) (m : Multiset α) (b : C m),\n            HEq (C_cons a (a' ::ₘ m) (C_cons a' m b)) (C_cons a' (a ::ₘ m) (C_cons a m b))) →\n          (m : Multiset α) → C m","name":"Multiset.rec","isProp":false,"doc":"Dependent recursor on multisets.\nTODO: should be @[recursor 6], but then the definition of `Multiset.pi` fails with a stack\noverflow in `whnf`.\n","depth":18},{"type":"∀ {A : Type u_2} [inst : CommRing A] [inst_1 : IsDomain A] [inst_2 : IsDedekindDomain A],\n  ¬IsField A →\n    ∀ {I M : Ideal A},\n      I ≠ ⊥ →\n        I ≤ M →\n          ∀ [hM : Ideal.IsMaximal M],\n            ∃ Z,\n              Multiset.prod (M ::ₘ Multiset.map PrimeSpectrum.asIdeal Z) ≤ I ∧\n                ¬Multiset.prod (Multiset.map PrimeSpectrum.asIdeal Z) ≤ I","name":"exists_multiset_prod_cons_le_and_prod_not_le","isProp":true,"doc":"Specialization of `exists_primeSpectrum_prod_le_and_ne_bot_of_domain` to Dedekind domains:\nLet `I : Ideal A` be a nonzero ideal, where `A` is a Dedekind domain that is not a field.\nThen `exists_primeSpectrum_prod_le_and_ne_bot_of_domain` states we can find a product of prime\nideals that is contained within `I`. This lemma extends that result by making the product minimal:\nlet `M` be a maximal ideal that contains `I`, then the product including `M` is contained within `I`\nand the product excluding `M` is not contained within `I`. ","depth":29}],"count":145}
{"noDocExamples":[],"kind":"«term_→ₙ+*_»","examples":[{"type":"(α : Type u_5) → [inst : NonUnitalNonAssocSemiring α] → α →ₙ+* α","name":"NonUnitalRingHom.id","isProp":false,"doc":"The identity non-unital ring homomorphism from a non-unital semiring to itself. ","depth":6},{"type":"(α : Type u_1) → (β : Type u_2) → [inst : NonUnitalNonAssocSemiring β] → β →ₙ+* α → β","name":"Pi.constNonUnitalRingHom","isProp":false,"doc":"`Function.const` as a `NonUnitalRingHom`. ","depth":7},{"type":"{R : Type u} →\n  {S : Type v} → [inst : NonUnitalNonAssocRing R] → [inst_1 : NonUnitalNonAssocRing S] → (R →ₙ+* S) → NonUnitalSubring S","name":"NonUnitalRingHom.range","isProp":false,"doc":"The range of a ring homomorphism, as a `NonUnitalSubring` of the target.\nSee Note [range copy pattern]. ","depth":9}],"count":143}
{"noDocExamples":[],"kind":"Filter.«term∃ᶠ_In_,_»","examples":[{"type":"∀ {α : Type u} {f : Ultrafilter α} {p : α → Prop}, (∃ᶠ (x : α) in ↑f, p x) → ∀ᶠ (x : α) in ↑f, p x","name":"Filter.Frequently.eventually","isProp":true,"doc":"**Alias** of the forward direction of `Ultrafilter.frequently_iff_eventually`.","depth":8},{"type":"∀ {n : ℕ}, n ≠ 0 → ∀ (d : ℕ), ∃ᶠ (m : ℕ) in Filter.atTop, m ≡ d [MOD n]","name":"Nat.frequently_modEq","isProp":true,"doc":"Infinitely many natural numbers are equal to `d` mod `n`. ","depth":9},{"type":"∀ {α : Type u} [inst : TopologicalSpace α] {s : Set α} {a : α}, (∃ᶠ (x : α) in nhds a, x ∈ s) → a ∈ closure s","name":"Filter.Frequently.mem_closure","isProp":true,"doc":"**Alias** of the reverse direction of `mem_closure_iff_frequently`.","depth":13}],"count":141}
{"noDocExamples":[],"kind":"MeasureTheory.«term∫⁻_In_,_∂_»","examples":[{"type":"∀ {α : Type u_1} {mα : MeasurableSpace α} (ρ : MeasureTheory.Measure (α × ℝ)) [inst : MeasureTheory.IsFiniteMeasure ρ]\n  (r : ℚ) {s : Set α},\n  MeasurableSet s →\n    ∫⁻ (a : α) in s, ENNReal.ofReal (↑(ProbabilityTheory.condCdf ρ a) ↑r) ∂MeasureTheory.Measure.fst ρ =\n      ↑↑ρ (s ×ˢ Set.Iic ↑r)","name":"ProbabilityTheory.set_lintegral_condCdf_rat","isProp":true,"doc":"Auxiliary lemma for `set_lintegral_cond_cdf`. ","depth":18},{"type":"∀ {α : Type u_1} {m : MeasurableSpace α} {μ : MeasureTheory.Measure α} {ι : Type u_5} {f : α → ENNReal},\n  ∫⁻ (x : α), f x ∂μ ≠ ⊤ →\n    ∀ {l : Filter ι} {s : ι → Set α},\n      Filter.Tendsto (↑↑μ ∘ s) l (nhds 0) → Filter.Tendsto (fun i => ∫⁻ (x : α) in s i, f x ∂μ) l (nhds 0)","name":"MeasureTheory.tendsto_set_lintegral_zero","isProp":true,"doc":"If `f` has finite integral, then `∫⁻ x in s, f x ∂μ` is absolutely continuous in `s`: it tends\nto zero as `μ s` tends to zero. ","depth":19},{"type":"∀ {α : Type u_1} [inst : MeasurableSpace α] {μ : MeasureTheory.Measure α} [inst_1 : MeasureTheory.SigmaFinite μ]\n  (C : ENNReal) {f : α → ENNReal},\n  AEMeasurable f → (∀ (s : Set α), MeasurableSet s → ↑↑μ s ≠ ⊤ → ∫⁻ (x : α) in s, f x ∂μ ≤ C) → ∫⁻ (x : α), f x ∂μ ≤ C","name":"MeasureTheory.lintegral_le_of_forall_fin_meas_le","isProp":true,"doc":"If the Lebesgue integral of a function is bounded by some constant on all sets with finite\nmeasure and the measure is σ-finite, then the integral over the whole space is bounded by that same\nconstant. ","depth":21}],"count":135}
{"noDocExamples":[],"kind":"«term_↪o_»","examples":[{"type":"Cardinal.{v} ↪o Cardinal.{max v u}","name":"Cardinal.liftOrderEmbedding","isProp":false,"doc":"`Cardinal.lift` as an `OrderEmbedding`. ","depth":4},{"type":"Cardinal.{u_3} ↪o Ordinal.{u_3}","name":"Cardinal.ord.orderEmbedding","isProp":false,"doc":"The ordinal corresponding to a cardinal `c` is the least ordinal\nwhose cardinal is `c`. This is the order-embedding version. For the regular function, see `ord`.\n","depth":4},{"type":"Ordinal.{u} ↪o SetTheory.PGame","name":"Ordinal.toPGameEmbedding","isProp":false,"doc":"The order embedding version of `toPGame`. ","depth":5}],"count":134}
{"noDocExamples":[],"kind":"«term_≃ᵢ_»","examples":[{"type":"(α : Type u_2) → [inst : PseudoEMetricSpace α] → α ≃ᵢ α","name":"IsometryEquiv.refl","isProp":false,"doc":"The identity isometry of a space. ","depth":6},{"type":"{α : Type u} → [inst : PseudoEMetricSpace α] → Group (α ≃ᵢ α)","name":"IsometryEquiv.instGroupIsometryEquiv","isProp":false,"doc":"The group of isometries. ","depth":7},{"type":"{α : Type u} → {β : Type v} → [inst : PseudoEMetricSpace α] → [inst_1 : PseudoEMetricSpace β] → α ≃ᵢ β → β ≃ᵢ α","name":"IsometryEquiv.symm","isProp":false,"doc":"The inverse of an isometric isomorphism, as an isometric isomorphism. ","depth":9}],"count":132}
{"noDocExamples":[],"kind":"«term_[Λ^_]→L[_]_»","examples":[{"type":"(R : Type u_1) →\n  (M : Type u_2) →\n    {ι : Type u_6} →\n      [inst : Semiring R] →\n        [inst_1 : AddCommMonoid M] →\n          [inst_2 : Module R M] → [inst_3 : TopologicalSpace M] → [inst_4 : Subsingleton ι] → ι → M[Λ^ι]→L[R]M","name":"ContinuousAlternatingMap.ofSubsingleton","isProp":false,"doc":"The evaluation map from `ι → M` to `M` is alternating at a given `i` when `ι` is subsingleton.\n","depth":20},{"type":"{R : Type u_1} →\n  {M : Type u_2} →\n    {N : Type u_3} →\n      {ι : Type u_4} →\n        [inst : Semiring R] →\n          [inst_1 : AddCommMonoid M] →\n            [inst_2 : Module R M] →\n              [inst_3 : TopologicalSpace M] →\n                [inst_4 : AddCommMonoid N] →\n                  [inst_5 : Module R N] →\n                    [inst_6 : TopologicalSpace N] → M[Λ^ι]→L[R]N → ContinuousMultilinearMap R (fun x => M) N","name":"ContinuousAlternatingMap.toContinuousMultilinearMap","isProp":false,"doc":"Projection to `ContinuousMultilinearMap`s. ","depth":23},{"type":"{R : Type u_1} →\n  {M : Type u_2} →\n    {N : Type u_3} →\n      {ι : Type u_4} →\n        [inst : Semiring R] →\n          [inst_1 : AddCommMonoid M] →\n            [inst_2 : Module R M] →\n              [inst_3 : TopologicalSpace M] →\n                [inst_4 : AddCommMonoid N] →\n                  [inst_5 : Module R N] → [inst_6 : TopologicalSpace N] → M[Λ^ι]→L[R]N → AlternatingMap R M N ι","name":"ContinuousAlternatingMap.toAlternatingMap","isProp":false,"doc":"Projection to `AlternatingMap`s. ","depth":23}],"count":129}
{"noDocExamples":[],"kind":"«term_≃ᵐ_»","examples":[{"type":"ENNReal ≃ᵐ NNReal ⊕ Unit","name":"ENNReal.ennrealEquivSum","isProp":false,"doc":"`ℝ≥0∞` is `MeasurableEquiv` to `ℝ≥0 ⊕ Unit`. ","depth":5},{"type":"ℂ ≃ᵐ ℝ × ℝ","name":"Complex.measurableEquivRealProd","isProp":false,"doc":"Measurable equivalence between `ℂ` and `ℝ × ℝ`. ","depth":5},{"type":"(α : Type u_6) → [inst : MeasurableSpace α] → α ≃ᵐ α","name":"MeasurableEquiv.refl","isProp":false,"doc":"Any measurable space is equivalent to itself. ","depth":6}],"count":128}
{"noDocExamples":[{"type":"∀ {C : Type u} [inst : CategoryTheory.Category.{v, u} C] {X Y : C} (α : X ≅ Y), α ≪≫ CategoryTheory.Iso.refl Y = α","name":"CategoryTheory.Iso.trans_refl","isProp":true,"depth":14}],"kind":"CategoryTheory.Iso.«term_≪≫_»","examples":[{"type":"∀ {B : Type u} [inst : CategoryTheory.Bicategory B] {a b : B} (self : CategoryTheory.Bicategory.Equivalence a b),\n  CategoryTheory.Bicategory.leftZigzagIso self.unit self.counit =\n    CategoryTheory.Bicategory.leftUnitor self.hom ≪≫ (CategoryTheory.Bicategory.rightUnitor self.hom).symm","name":"CategoryTheory.Bicategory.Equivalence.left_triangle","isProp":true,"doc":"The composition of the unit and the counit is equal to the identity up to unitors. ","depth":19},{"type":"∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] {D : Type u₂} [inst_1 : CategoryTheory.Category.{v₂, u₂} D]\n  {F G H : CategoryTheory.Functor C D} (e : F ≅ G) (e' : G ≅ H) (hF : CategoryTheory.IsEquivalence F),\n  CategoryTheory.IsEquivalence.ofIso e' (CategoryTheory.IsEquivalence.ofIso e hF) =\n    CategoryTheory.IsEquivalence.ofIso (e ≪≫ e') hF","name":"CategoryTheory.IsEquivalence.ofIso_trans","isProp":true,"doc":"Compatibility of `ofIso` with the composition of isomorphisms of functors ","depth":24}],"count":128}
{"noDocExamples":[{"type":"{M : Type u_1} → [inst : Group Mᵐᵒᵖ] → Group Mᵈᵐᵃ","name":"DomMulAct.instGroupDomMulAct","isProp":false,"depth":4},{"type":"{M : Type u_1} → [inst : Inv Mᵐᵒᵖ] → Inv Mᵈᵐᵃ","name":"DomMulAct.instInvDomMulAct","isProp":false,"depth":4}],"kind":"«term_ᵈᵐᵃ»","examples":[{"type":"{M : Type u_1} → M ≃ Mᵈᵐᵃ","name":"DomMulAct.mk","isProp":false,"doc":"Equivalence between `M` and `Mᵈᵐᵃ`. ","depth":3}],"count":127}
{"noDocExamples":[],"kind":"«term∏ᶠ_,_»","examples":[{"type":"∀ {α : Type u_1} {β : Type u_2} {M : Type u_5} [inst : CommMonoid M] {g : β → M} (e : α → β),\n  Function.Bijective e → ∏ᶠ (i : α), g (e i) = ∏ᶠ (j : β), g j","name":"finprod_comp","isProp":true,"doc":"See also `finprod_eq_of_bijective`, `Fintype.prod_bijective` and `Finset.prod_bij`. ","depth":13},{"type":"∀ {α : Type u_1} {β : Type u_2} {M : Type u_5} [inst : CommMonoid M] {f : α → M} {g : β → M} (e : α → β),\n  Function.Bijective e → (∀ (x : α), f x = g (e x)) → ∏ᶠ (i : α), f i = ∏ᶠ (j : β), g j","name":"finprod_eq_of_bijective","isProp":true,"doc":"See `finprod_comp`, `Fintype.prod_bijective` and `Finset.prod_bij`. ","depth":15},{"type":"∀ {α : Type u_1} {M : Type u_5} [inst : CommMonoid M] (s : Set α), ∏ᶠ (i : α) (_ : i ∈ s), 1 = 1","name":"finprod_mem_one","isProp":true,"doc":"The product of the constant function `1` over any set equals `1`. ","depth":16}],"count":127}
{"noDocExamples":[],"kind":"CategoryTheory.Limits.«term⊤__»","examples":[{"type":"{C : Type u₁} →\n  [inst : CategoryTheory.Category.{v₁, u₁} C] →\n    [inst_1 : CategoryTheory.Limits.HasTerminal C] → CategoryTheory.Limits.IsTerminal (⊤_ C)","name":"CategoryTheory.Limits.terminalIsTerminal","isProp":false,"doc":"A terminal object is terminal. ","depth":7},{"type":"⊤_ TopCat ≅ TopCat.of PUnit.{u + 1}","name":"TopCat.terminalIsoPUnit","isProp":false,"doc":"The terminal object of `Top` is `PUnit`. ","depth":8},{"type":"{C : Type u₁} →\n  [inst : CategoryTheory.Category.{v₁, u₁} C] →\n    [inst_1 : CategoryTheory.Limits.HasTerminal C] → {P : C} → CategoryTheory.Limits.IsTerminal P → (⊤_ C ≅ P)","name":"CategoryTheory.Limits.terminalIsoIsTerminal","isProp":false,"doc":"The (unique) isomorphism between the chosen terminal object and any other terminal object. ","depth":10}],"count":126}
{"noDocExamples":[],"kind":"«term_→ₗ⁅_,_⁆_»","examples":[{"type":"{R : Type u} →\n  {L : Type v} →\n    {M : Type w} →\n      [inst : CommRing R] →\n        [inst_1 : LieRing L] →\n          [inst_2 : AddCommGroup M] → [inst_3 : Module R M] → [inst_4 : LieRingModule L M] → M →ₗ⁅R,L⁆ M","name":"LieModuleHom.id","isProp":false,"doc":"The identity map is a morphism of Lie modules. ","depth":20},{"type":"{R : Type u} →\n  {L : Type v} →\n    {M : Type w} →\n      [inst : CommRing R] →\n        [inst_1 : LieRing L] →\n          [inst_2 : AddCommGroup M] → [inst_3 : Module R M] → [inst_4 : LieRingModule L M] → One (M →ₗ⁅R,L⁆ M)","name":"LieModuleHom.instOneLieModuleHom","isProp":false,"doc":"The identity map is a Lie module morphism. ","depth":21},{"type":"{R : Type u} →\n  {L : Type v} →\n    {M : Type w} →\n      {N : Type w₁} →\n        [inst : CommRing R] →\n          [inst_1 : LieRing L] →\n            [inst_2 : AddCommGroup M] →\n              [inst_3 : Module R M] →\n                [inst_4 : LieRingModule L M] →\n                  [inst_5 : AddCommGroup N] →\n                    [inst_6 : Module R N] → [inst_7 : LieRingModule L N] → (M →ₗ⁅R,L⁆ N) → LieSubmodule R L N","name":"LieModuleHom.range","isProp":false,"doc":"The range of a morphism of Lie modules `f : M → N` is a Lie submodule of `N`.\nSee Note [range copy pattern]. ","depth":25}],"count":126}
{"noDocExamples":[],"kind":"«term_→ₙₐ[_]_»","examples":[{"type":"(R : Type u_1) →\n  (A : Type u_2) →\n    [inst : Monoid R] → [inst_1 : NonUnitalNonAssocSemiring A] → [inst_2 : DistribMulAction R A] → A →ₙₐ[R] A","name":"NonUnitalAlgHom.id","isProp":false,"doc":"The identity map as a `NonUnitalAlgHom`. ","depth":13},{"type":"(R : Type u) →\n  {X : Type v} → [inst : CommRing R] → FreeNonUnitalNonAssocAlgebra R X →ₙₐ[R] CommutatorRing (FreeLieAlgebra R X)","name":"FreeLieAlgebra.mk","isProp":false,"doc":"The quotient map as a `NonUnitalAlgHom`. ","depth":15},{"type":"(R : Type u_1) →\n  (A : Type u_2) →\n    [inst : CommSemiring R] → [inst_1 : NonUnitalSemiring A] → [inst_2 : Module R A] → A →ₙₐ[R] Unitization R A","name":"Unitization.inrNonUnitalAlgHom","isProp":false,"doc":"The coercion from a non-unital `R`-algebra `A` to its unitization `Unitization R A`\nrealized as a non-unital algebra homomorphism. ","depth":16}],"count":126}
{"noDocExamples":[],"kind":"«term_→*₀_»","examples":[{"type":"NNReal →*₀ NNReal","name":"NNReal.sqrtHom","isProp":false,"doc":"`NNReal.sqrt` as a `MonoidWithZeroHom`. ","depth":5},{"type":"ℝ →*₀ NNReal","name":"Real.nnabs","isProp":false,"doc":"The absolute value on `ℝ` as a map to `ℝ≥0`. ","depth":5},{"type":"ℤ →*₀ ℕ","name":"Int.natAbsHom","isProp":false,"doc":"`Int.natAbs` as a bundled monoid with zero hom. ","depth":5}],"count":125}
{"noDocExamples":[],"kind":"Prefunctor.«term_⥤q_»","examples":[{"type":"{V : Type u_2} → [inst : Quiver V] → V ⥤q Quiver.Symmetrify V","name":"Quiver.Symmetrify.of","isProp":false,"doc":"The inclusion of a quiver in its symmetrification ","depth":6},{"type":"{B : Type u} → [inst : Quiver B] → B ⥤q CategoryTheory.FreeBicategory B","name":"CategoryTheory.FreeBicategory.of","isProp":false,"doc":"Canonical prefunctor from `B` to `free_bicategory B`. ","depth":6},{"type":"(V : Type u_1) → [inst : Quiver V] → V ⥤q V","name":"Prefunctor.id","isProp":false,"doc":"The identity morphism between quivers. ","depth":6}],"count":124}
{"noDocExamples":[],"kind":"«term_↪r_»","examples":[{"type":"{α : Type u_1} → (r : α → α → Prop) → r ↪r r","name":"RelEmbedding.refl","isProp":false,"doc":"Identity map is a relation embedding. ","depth":6},{"type":"{α : Type u_1} → (r : α → α → Prop) → (p : Set α) → Subrel r p ↪r r","name":"Subrel.relEmbedding","isProp":false,"doc":"The relation embedding from the inherited relation on a subset. ","depth":9},{"type":"{α : Type u_1} → {β : Type u_2} → (r : α → α → Prop) → (s : β → β → Prop) → s ↪r Sum.Lex r s","name":"RelEmbedding.sumLexInr","isProp":false,"doc":"`Sum.inr` as a relation embedding into `Sum.Lex r s`. ","depth":9}],"count":121}
{"noDocExamples":[],"kind":"CategoryTheory.Limits.«term_⨯_»","examples":[{"type":"{C : Type u} →\n  [inst : CategoryTheory.Category.{v, u} C] →\n    (X : C) → [inst_1 : CategoryTheory.Limits.HasBinaryProduct X X] → X ⟶ X ⨯ X","name":"CategoryTheory.Limits.diag","isProp":false,"doc":"diagonal arrow of the binary product in the category `fam I` ","depth":10},{"type":"(X Y : Type u) → X ⨯ Y ≅ X × Y","name":"CategoryTheory.Limits.Types.binaryProductIso","isProp":false,"doc":"The categorical binary product in `Type u` is cartesian product. ","depth":12},{"type":"(X Y : TopCat) → X ⨯ Y ≅ TopCat.of (↑X × ↑Y)","name":"TopCat.prodIsoProd","isProp":false,"doc":"The homeomorphism between `X ⨯ Y` and the set-theoretic product of `X` and `Y`,\nequipped with the product topology.\n","depth":12}],"count":120}
{"noDocExamples":[],"kind":"«termℤ_[_]»","examples":[{"type":"{p : ℕ} → [inst : Fact (Nat.Prime p)] → Add ℤ_[p]","name":"PadicInt.instAddPadicInt","isProp":false,"doc":"Addition on `ℤ_[p]` is inherited from `ℚ_[p]`. ","depth":5},{"type":"{p : ℕ} → [hp_prime : Fact (Nat.Prime p)] → ℤ_[p] → ℕ","name":"PadicInt.zmodRepr","isProp":false,"doc":"`zmod_repr x` is the unique natural number smaller than `p`\nsatisfying `‖(x - zmod_repr x : ℤ_[p])‖ < 1`.\n","depth":5},{"type":"{p : ℕ} → [inst : Fact (Nat.Prime p)] → Mul ℤ_[p]","name":"PadicInt.instMulPadicInt","isProp":false,"doc":"Multiplication on `ℤ_[p]` is inherited from `ℚ_[p]`. ","depth":5}],"count":120}
{"noDocExamples":[],"kind":"«term_⤳_»","examples":[{"type":"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : RegularSpace α] {a b : α}, a ⤳ b → b ⤳ a","name":"Specializes.symm","isProp":true,"doc":"**Alias** of the forward direction of `specializes_comm`.","depth":10},{"type":"∀ {X : Type u_1} [inst : TopologicalSpace X] {x y : X}, x ⤳ y → y ∈ closure {x}","name":"Specializes.mem_closure","isProp":true,"doc":"**Alias** of the forward direction of `specializes_iff_mem_closure`.","depth":11},{"type":"∀ {X : Type u_1} [inst : TopologicalSpace X] {x y : X}, x ⤳ y → pure x ≤ nhds y","name":"Specializes.pure_le_nhds","isProp":true,"doc":"**Alias** of the forward direction of `specializes_iff_pure`.","depth":12}],"count":118}
{"noDocExamples":[],"kind":"«term_≃ₗᵢ[_]_»","examples":[{"type":"ℂ ≃ₗᵢ[ℝ] ℂ","name":"Complex.conjLie","isProp":false,"doc":"The complex-conjugation function from `ℂ` to itself is an isometric linear equivalence. ","depth":14},{"type":"(ℂ ≃ₗᵢ[ℝ] ℂ) → { x // x ∈ circle }","name":"rotationOf","isProp":false,"doc":"Takes an element of `ℂ ≃ₗᵢ[ℝ] ℂ` and checks if it is a rotation, returns an element of the\nunit circle. ","depth":15},{"type":"{K : Type u_1} → [inst : IsROrC K] → K ≃ₗᵢ[ℝ] K","name":"IsROrC.conjLie","isProp":false,"doc":"Conjugate as a linear isometry ","depth":16}],"count":118}
{"noDocExamples":[],"kind":"Hyperreal.«termℝ*»","examples":[{"type":"ℝ*","name":"Hyperreal.epsilon","isProp":false,"doc":"A sample infinitesimal hyperreal","depth":0},{"type":"ℝ*","name":"Hyperreal.omega","isProp":false,"doc":"A sample infinite hyperreal","depth":0},{"type":"ℝ* → Prop","name":"Hyperreal.InfiniteNeg","isProp":false,"doc":"A hyperreal number is negative infinite if it is smaller than all real numbers ","depth":1}],"count":117}
{"noDocExamples":[],"kind":"CategoryTheory.Limits.«term⨁_»","examples":[{"type":"{J : Type} → [inst : Fintype J] → (f : J → AddCommGroupCat) → ⨁ f ≅ AddCommGroupCat.of ((j : J) → ↑(f j))","name":"AddCommGroupCat.biproductIsoPi","isProp":false,"doc":"We verify that the biproduct we've just defined is isomorphic to the `AddCommGroupCat` structure\non the dependent function type.\n","depth":14},{"type":"{J : Type w} →\n  {C : Type u} →\n    [inst : CategoryTheory.Category.{v, u} C] →\n      [inst_1 : CategoryTheory.Limits.HasZeroMorphisms C] →\n        (f : J → C) → [inst_2 : CategoryTheory.Limits.HasBiproduct f] → (b : J) → f b ⟶ ⨁ f","name":"CategoryTheory.Limits.biproduct.ι","isProp":false,"doc":"The inclusion into a summand of a biproduct. ","depth":14},{"type":"{J : Type w} →\n  {C : Type u} →\n    [inst : CategoryTheory.Category.{v, u} C] →\n      [inst_1 : CategoryTheory.Limits.HasZeroMorphisms C] →\n        (f : J → C) → [inst_2 : CategoryTheory.Limits.HasBiproduct f] → ⨁ f ≅ ∏ f","name":"CategoryTheory.Limits.biproduct.isoProduct","isProp":false,"doc":"The canonical isomorphism between the chosen biproduct and the chosen product. ","depth":14}],"count":116}
{"noDocExamples":[],"kind":"Nat.«term_≡_[MOD_]»","examples":[{"type":"∀ {n : ℕ}, n ≠ 0 → ∀ (d : ℕ), ∃ᶠ (m : ℕ) in Filter.atTop, m ≡ d [MOD n]","name":"Nat.frequently_modEq","isProp":true,"doc":"Infinitely many natural numbers are equal to `d` mod `n`. ","depth":9},{"type":"∀ {k : ℕ}, k ≠ 0 → Set.Infinite {p | Nat.Prime p ∧ p ≡ 1 [MOD k]}","name":"Nat.infinite_setOf_prime_modEq_one","isProp":true,"doc":"For any positive `k : ℕ` there are infinitely many primes `p` such that `p ≡ 1 [MOD k]`. ","depth":10},{"type":"∀ {n a b : ℕ}, a ≡ b [MOD n] → ↑n ∣ ↑b - ↑a","name":"Nat.ModEq.dvd","isProp":true,"doc":"**Alias** of the forward direction of `Nat.modEq_iff_dvd`.","depth":11}],"count":110}
{"noDocExamples":[],"kind":"Submodule.«term_ᗮ»","examples":[{"type":"∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  {K : Submodule 𝕜 E} [inst_3 : CompleteSpace E], Kᗮᗮᗮ = Kᗮ","name":"Submodule.triorthogonal_eq_orthogonal","isProp":true,"doc":"The orthogonal complement satisfies `Kᗮᗮᗮ = Kᗮ`. ","depth":20},{"type":"∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  (K : Submodule 𝕜 E) [inst_3 : HasOrthogonalProjection K], Kᗮᗮ = K","name":"Submodule.orthogonal_orthogonal","isProp":true,"doc":"If `K` admits an orthogonal projection, then the orthogonal complement of its orthogonal\ncomplement is itself. ","depth":20},{"type":"∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  (K : Submodule 𝕜 E), IsClosed ↑Kᗮ","name":"Submodule.isClosed_orthogonal","isProp":true,"doc":"The orthogonal complement of any submodule `K` is closed. ","depth":21}],"count":109}
{"noDocExamples":[],"kind":"Int.«term⌊_⌋»","examples":[{"type":"∀ (ξ : ℝ), Real.convergent ξ 0 = ↑⌊ξ⌋","name":"Real.convergent_zero","isProp":true,"doc":"The zeroth convergent of `ξ` is `⌊ξ⌋`. ","depth":7},{"type":"∀ (ξ : ℝ) (n : ℕ), Real.convergent ξ (n + 1) = ↑⌊ξ⌋ + (Real.convergent (Int.fract ξ)⁻¹ n)⁻¹","name":"Real.convergent_succ","isProp":true,"doc":"The `(n+1)`th convergent of `ξ` is the `n`th convergent of `1/(fract ξ)`. ","depth":12},{"type":"∀ {K : Type u_1} [inst : LinearOrderedField K] [inst_1 : FloorRing K] {v : K},\n  (GeneralizedContinuedFraction.of v).h = ↑⌊v⌋","name":"GeneralizedContinuedFraction.of_h_eq_floor","isProp":true,"doc":"The head term of the gcf of `v` is `⌊v⌋`. ","depth":13}],"count":106}
{"noDocExamples":[],"kind":"«termℚ_[_]»","examples":[{"type":"{p : ℕ} → [hp : Fact (Nat.Prime p)] → ℚ_[p] → ℚ","name":"padicNormE.ratNorm","isProp":false,"doc":"`ratNorm q`, for a `p`-adic number `q` is the `p`-adic norm of `q`, as rational number.\n\nThe lemma `padicNormE.eq_ratNorm` asserts `‖q‖ = ratNorm q`. ","depth":5},{"type":"{p : ℕ} → [hp : Fact (Nat.Prime p)] → ℚ_[p] → WithTop ℤ","name":"Padic.addValuationDef","isProp":false,"doc":"The additive `p`-adic valuation on `ℚ_[p]`, with values in `WithTop ℤ`. ","depth":5},{"type":"{p : ℕ} → [hp : Fact (Nat.Prime p)] → ℚ_[p] → ℤ","name":"Padic.valuation","isProp":false,"doc":"`Padic.valuation` lifts the `p`-adic valuation on rationals to `ℚ_[p]`. ","depth":5}],"count":102}
{"noDocExamples":[],"kind":"«term∫_In_.._,_∂_»","examples":[{"type":"∀ {E : Type u_3} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] {f g : ℝ → E} {μ : MeasureTheory.Measure ℝ}\n  {a b : ℝ}, Set.EqOn f g (Set.uIcc a b) → ∫ (x : ℝ) in a..b, f x ∂μ = ∫ (x : ℝ) in a..b, g x ∂μ","name":"intervalIntegral.integral_congr","isProp":true,"doc":"If two functions are equal in the relevant interval, their interval integrals are also equal. ","depth":18},{"type":"∀ {f : ℝ → ℝ} {a b : ℝ} {μ : MeasureTheory.Measure ℝ},\n  0 ≤ᶠ[MeasureTheory.Measure.ae (MeasureTheory.Measure.restrict μ (Ι a b))] f →\n    IntervalIntegrable f μ a b → (0 < ∫ (x : ℝ) in a..b, f x ∂μ ↔ a < b ∧ 0 < ↑↑μ (Function.support f ∩ Set.Ioc a b))","name":"intervalIntegral.integral_pos_iff_support_of_nonneg_ae'","isProp":true,"doc":"If `f` is nonnegative and integrable on the unordered interval `Set.uIoc a b`, then its\nintegral over `a..b` is positive if and only if `a < b` and the measure of\n`Function.support f ∩ Set.Ioc a b` is positive. ","depth":19},{"type":"∀ {f : ℝ → ℝ} {a b : ℝ} {μ : MeasureTheory.Measure ℝ},\n  0 ≤ᶠ[MeasureTheory.Measure.ae μ] f →\n    IntervalIntegrable f μ a b → (0 < ∫ (x : ℝ) in a..b, f x ∂μ ↔ a < b ∧ 0 < ↑↑μ (Function.support f ∩ Set.Ioc a b))","name":"intervalIntegral.integral_pos_iff_support_of_nonneg_ae","isProp":true,"doc":"If `f` is nonnegative a.e.-everywhere and it is integrable on the unordered interval\n`Set.uIoc a b`, then its integral over `a..b` is positive if and only if `a < b` and the\nmeasure of `Function.support f ∩ Set.Ioc a b` is positive. ","depth":19}],"count":101}
{"noDocExamples":[],"kind":"«term_×'_»","examples":[{"type":"{α : Type u_2} → (β : α → Type u_1) → (i : α) ×' β i ≃ (i : α) × β i","name":"Equiv.psigmaEquivSigma","isProp":false,"doc":"A `PSigma`-type is equivalent to the corresponding `Sigma`-type. ","depth":7},{"type":"{α : Type v} → (P : α → Prop) → (i : α) ×' P i ≃ Subtype P","name":"Equiv.psigmaEquivSubtype","isProp":false,"doc":"A `PSigma` with `Prop` fibers is equivalent to the subtype.  ","depth":7},{"type":"(G : Type u_1) → [inst : Group G] → ℕ → (H : Subgroup G) ×' Subgroup.Normal H","name":"upperCentralSeriesAux","isProp":false,"doc":"An auxiliary type-theoretic definition defining both the upper central series of\na group, and a proof that it is normal, all in one go. ","depth":8}],"count":101}
{"noDocExamples":[],"kind":"«term_≃r_»","examples":[{"type":"{α : Type u_1} → (r : α → α → Prop) → r ≃r r","name":"RelIso.refl","isProp":false,"doc":"Identity map is a relation isomorphism. ","depth":6},{"type":"{α : Type u_1} → {β : Type u_2} → {r : α → α → Prop} → {s : β → β → Prop} → r ≃r s → r ↪r s","name":"RelIso.toRelEmbedding","isProp":false,"doc":"Convert a `RelIso` to a `RelEmbedding`. This function is also available as a coercion\nbut often it is easier to write `f.toRelEmbedding` than to write explicitly `r` and `s`\nin the target type. ","depth":9},{"type":"{α : Type u_1} → {β : Type u_2} → {r : α → α → Prop} → {s : β → β → Prop} → r ≃r s → r ≼i s","name":"InitialSeg.ofIso","isProp":false,"doc":"An order isomorphism is an initial segment ","depth":9}],"count":97}
{"noDocExamples":[],"kind":"FirstOrder.Language.«term_→ᴸ_»","examples":[{"type":"(L : FirstOrder.Language) → L →ᴸ L","name":"FirstOrder.Language.LHom.id","isProp":false,"doc":"The identity language homomorphism. ","depth":3},{"type":"(L : FirstOrder.Language) → [inst : FirstOrder.Language.IsOrdered L] → FirstOrder.Language.order →ᴸ L","name":"FirstOrder.Language.orderLHom","isProp":false,"doc":"The language homomorphism sending the unique symbol `≤` of `Language.order` to `≤` in an ordered\nlanguage. ","depth":4},{"type":"{L : FirstOrder.Language} → {L' : FirstOrder.Language} → (L →ᴸ L') → Prop","name":"FirstOrder.Language.LHom.Injective","isProp":false,"doc":"A language homomorphism is injective when all the maps between symbol types are. ","depth":5}],"count":96}
{"noDocExamples":[],"kind":"Set.«term⋂₀_»","examples":[{"type":"∀ {α : Type u_2} {l : Filter α} [inst : Filter.IsCountablyGenerated l], Filter.cofinite ≤ l → Set.Countable (⋂₀ l.sets)ᶜ","name":"Filter.countable_compl_sInter_sets","isProp":true,"doc":"If `l ≥ Filter.cofinite` is a countably generated filter, then `⋂₀ l.sets` is cocountable. ","depth":11},{"type":"∀ {α : Type u_1} [inst : TopologicalSpace α] {S : Set (Set α)},\n  (∀ (s : Set α), s ∈ S → IsGδ s) → Set.Countable S → IsGδ (⋂₀ S)","name":"isGδ_sInter","isProp":true,"doc":"A countable intersection of Gδ sets is a Gδ set. ","depth":12},{"type":"∀ {α : Type u_2} {β : Type u_3} {f : α → β} {l : Filter β} [inst : Filter.IsCountablyGenerated l],\n  Filter.Tendsto f Filter.cofinite l → Set.Countable (f ⁻¹' ⋂₀ l.sets)ᶜ","name":"Filter.Tendsto.countable_compl_preimage_sInter_sets","isProp":true,"doc":"If `f` tends to a countably generated filter `l` along `Filter.cofinite`,\nthen for all but countably many elements, `f x ∈ ⋂₀ l.sets`. ","depth":12}],"count":95}
{"noDocExamples":[],"kind":"«term_→⋆ₐ[_]_»","examples":[{"type":"(R : Type u_2) →\n  (A : Type u_3) →\n    [inst : CommSemiring R] → [inst_1 : Semiring A] → [inst_2 : Algebra R A] → [inst_3 : Star A] → A →⋆ₐ[R] A","name":"StarAlgHom.id","isProp":false,"doc":"The identity as a `StarAlgHom`. ","depth":16},{"type":"{R : Type u_2} →\n  {A : Type u_3} →\n    {B : Type u_4} →\n      [inst : CommSemiring R] →\n        [inst_1 : Semiring A] →\n          [inst_2 : Algebra R A] →\n            [inst_3 : Star A] →\n              [inst_4 : Semiring B] → [inst_5 : Algebra R B] → [inst_6 : Star B] → (A →⋆ₐ[R] B) → A → B","name":"StarAlgHom.Simps.apply","isProp":false,"doc":"See Note [custom simps projection] ","depth":21},{"type":"{R : Type u_1} →\n  {A : Type u_2} →\n    {B : Type u_3} →\n      [inst : CommSemiring R] →\n        [inst_1 : Semiring A] →\n          [inst_2 : Algebra R A] →\n            [inst_3 : Star A] →\n              [inst_4 : Semiring B] → [inst_5 : Algebra R B] → [inst_6 : Star B] → (A →⋆ₐ[R] B) → A →ₐ[R] B","name":"StarAlgHom.toAlgHom","isProp":false,"doc":"Reinterpret a unital star algebra homomorphism as a unital algebra homomorphism\nby forgetting the interaction with the star operation. ","depth":21}],"count":95}
{"noDocExamples":[],"kind":"«term_≃ᵃ[_]_»","examples":[{"type":"(k : Type u_1) →\n  (P₁ : Type u_2) →\n    {V₁ : Type u_6} →\n      [inst : Ring k] → [inst_1 : AddCommGroup V₁] → [inst_2 : Module k V₁] → [inst_3 : AddTorsor V₁ P₁] → P₁ ≃ᵃ[k] P₁","name":"AffineEquiv.refl","isProp":false,"doc":"Identity map as an `AffineEquiv`. ","depth":19},{"type":"(k : Type u_1) →\n  {P₁ : Type u_2} →\n    {V₁ : Type u_6} →\n      [inst : Ring k] →\n        [inst_1 : AddCommGroup V₁] → [inst_2 : Module k V₁] → [inst_3 : AddTorsor V₁ P₁] → P₁ → V₁ ≃ᵃ[k] P₁","name":"AffineEquiv.vaddConst","isProp":false,"doc":"The map `v ↦ v +ᵥ b` as an affine equivalence between a module `V` and an affine space `P` with\ntangent space `V`. ","depth":20},{"type":"(k : Type u_1) →\n  (P₁ : Type u_2) →\n    {V₁ : Type u_6} →\n      [inst : Ring k] →\n        [inst_1 : AddCommGroup V₁] → [inst_2 : Module k V₁] → [inst_3 : AddTorsor V₁ P₁] → V₁ → P₁ ≃ᵃ[k] P₁","name":"AffineEquiv.constVAdd","isProp":false,"doc":"The map `p ↦ v +ᵥ p` as an affine automorphism of an affine space.\n\nNote that there is no need for an `AffineMap.constVAdd` as it is always an equivalence.\nThis is roughly to `DistribMulAction.toLinearEquiv` as `+ᵥ` is to `•`. ","depth":20}],"count":95}
{"noDocExamples":[],"kind":"term!_","examples":[{"type":"∀ {α : Type u} {L : List (α × Bool)} {x : α} {b : Bool},\n  FreeAddGroup.Red ((x, b) :: L) [] ↔ FreeAddGroup.Red L [(x, !b)]","name":"FreeAddGroup.Red.cons_nil_iff_singleton","isProp":true,"doc":"If `x` is a letter and `w` is a word such that `x + w` reduces to the empty word, then `w`\nreduces to `-x`.","depth":14},{"type":"∀ {α : Type u} {L : List (α × Bool)} {x : α} {b : Bool}, FreeGroup.Red ((x, b) :: L) [] ↔ FreeGroup.Red L [(x, !b)]","name":"FreeGroup.Red.cons_nil_iff_singleton","isProp":true,"doc":"If `x` is a letter and `w` is a word such that `xw` reduces to the empty word, then `w` reduces\nto `x⁻¹` ","depth":14},{"type":"∀ {α : Type u} {L₁ L₂ : List (α × Bool)} {x1 : α} {b1 : Bool} {x2 : α} {b2 : Bool},\n  (x1, b1) ≠ (x2, b2) → FreeGroup.Red ((x1, b1) :: L₁) ((x2, b2) :: L₂) → FreeGroup.Red L₁ ((x1, !b1) :: (x2, b2) :: L₂)","name":"FreeGroup.Red.inv_of_red_of_ne","isProp":true,"doc":"If `x` and `y` are distinct letters and `w₁ w₂` are words such that `xw₁` reduces to `yw₂`, then\n`w₁` reduces to `x⁻¹yw₂`. ","depth":17}],"count":94}
{"noDocExamples":[],"kind":"Lean.Parser.Term.subst","examples":[{"type":"{α : Sort u_1} →\n  {C : Trunc α → Sort u_3} →\n    (f : (a : α) → C (Trunc.mk a)) → (∀ (a b : α), (_ : Trunc.mk a = Trunc.mk b) ▸ f a = f b) → (q : Trunc α) → C q","name":"Trunc.rec","isProp":false,"doc":"Recursion/induction principle for `Trunc`. ","depth":15},{"type":"{α : Sort u} →\n  {s : Setoid α} →\n    {motive : Quotient s → Sort v} →\n      (f : (a : α) → motive (Quotient.mk s a)) →\n        (∀ (a b : α) (p : a ≈ b), (_ : Quotient.mk s a = Quotient.mk s b) ▸ f a = f b) → (q : Quotient s) → motive q","name":"Quotient.rec","isProp":false,"doc":"The analogue of `Quot.rec` for `Quotient`. See `Quot.rec`. ","depth":18},{"type":"{α : Sort u} →\n  {r : α → α → Prop} →\n    {motive : Quot r → Sort v} →\n      (f : (a : α) → motive (Quot.mk r a)) →\n        (∀ (a b : α) (p : r a b), (_ : Quot.mk r a = Quot.mk r b) ▸ f a = f b) → (q : Quot r) → motive q","name":"Quot.rec","isProp":false,"doc":"Dependent recursion principle for `Quot`. This constructor can be tricky to use,\nso you should consider the simpler versions if they apply:\n* `Quot.lift`, for nondependent functions\n* `Quot.ind`, for theorems / proofs of propositions about quotients\n* `Quot.recOnSubsingleton`, when the target type is a `Subsingleton`\n* `Quot.hrecOn`, which uses `HEq (f a) (f b)` instead of a `sound p ▸ f a = f b` assummption\n","depth":18}],"count":93}
{"noDocExamples":[],"kind":"«term_>>=_»","examples":[{"type":"{α β : Type u_1} →\n  [inst : DecidableEq β] →\n    (s : Set α) → [inst : Fintype ↑s] → (f : α → Set β) → ((a : α) → a ∈ s → Fintype ↑(f a)) → Fintype ↑(s >>= f)","name":"Set.fintypeBind","isProp":false,"doc":"If `s : Set α` is a set with `Fintype` instance and `f : α → Set β` is a function such that\neach `f a`, `a ∈ s`, has a `Fintype` structure, then `s >>= f` has a `Fintype` structure. ","depth":16},{"type":"∀ {m : Type u_1 → Type u_2} {α β : Type u_1} {q : β → Prop} {x : m α} [inst : Monad m] [inst_1 : LawfulMonad m]\n  {f : α → m β}, SatisfiesM (fun a => SatisfiesM q (f a)) x → SatisfiesM q (x >>= f)","name":"SatisfiesM.bind_pre","isProp":true,"doc":"`SatisfiesM` distributes over `>>=`, weakest precondition version. ","depth":18},{"type":"∀ {m : Type u_1 → Type u_2} {α β : Type u_1} {p : α → Prop} {x : m α} {q : β → Prop} [inst : Monad m]\n  [inst_1 : LawfulMonad m] {f : α → m β},\n  SatisfiesM p x → (∀ (a : α), p a → SatisfiesM q (f a)) → SatisfiesM q (x >>= f)","name":"SatisfiesM.bind","isProp":true,"doc":"`SatisfiesM` distributes over `>>=`, general version. ","depth":19}],"count":88}
{"noDocExamples":[],"kind":"«term_→A[_]_»","examples":[{"type":"{𝕜 : Type u_1} →\n  {V : Type u_3} →\n    {W : Type u_4} →\n      [inst : NormedAddCommGroup V] →\n        [inst_1 : NormedAddCommGroup W] →\n          [inst_2 : NontriviallyNormedField 𝕜] →\n            [inst_3 : NormedSpace 𝕜 V] → [inst_4 : NormedSpace 𝕜 W] → Norm (V →A[𝕜] W)","name":"ContinuousAffineMap.hasNorm","isProp":false,"doc":"Note that unlike the operator norm for linear maps, this norm is _not_ submultiplicative:\nwe do _not_ necessarily have `‖f.comp g‖ ≤ ‖f‖ * ‖g‖`. See `norm_comp_le` for what we can say. ","depth":23},{"type":"{R : Type u_1} →\n  {V : Type u_2} →\n    {W : Type u_3} →\n      [inst : Ring R] →\n        [inst_1 : AddCommGroup V] →\n          [inst_2 : Module R V] →\n            [inst_3 : TopologicalSpace V] →\n              [inst_4 : AddCommGroup W] →\n                [inst_5 : Module R W] → [inst_6 : TopologicalSpace W] → (V →L[R] W) → V →A[R] W","name":"ContinuousLinearMap.toContinuousAffineMap","isProp":false,"doc":"A continuous linear map can be regarded as a continuous affine map. ","depth":25},{"type":"{R : Type u_1} →\n  {V : Type u_2} →\n    {W : Type u_3} →\n      {P : Type u_4} →\n        {Q : Type u_5} →\n          [inst : Ring R] →\n            [inst_1 : AddCommGroup V] →\n              [inst_2 : Module R V] →\n                [inst_3 : TopologicalSpace P] →\n                  [inst_4 : AddTorsor V P] →\n                    [inst_5 : AddCommGroup W] →\n                      [inst_6 : Module R W] →\n                        [inst_7 : TopologicalSpace Q] → [inst_8 : AddTorsor W Q] → (P →A[R] Q) → C(P, Q)","name":"ContinuousAffineMap.toContinuousMap","isProp":false,"doc":"Forgetting its algebraic properties, a continuous affine map is a continuous map. ","depth":29}],"count":86}
{"noDocExamples":[{"type":"∀ {X Y : Type u} {x : X} {y : Y}, (β_ X Y).hom (x, y) = (y, x)","name":"CategoryTheory.braiding_hom_apply","isProp":true,"depth":15},{"type":"∀ {X Y : Type u} {x : X} {y : Y}, (β_ X Y).inv (y, x) = (x, y)","name":"CategoryTheory.braiding_inv_apply","isProp":true,"depth":15}],"kind":"CategoryTheory.termβ_","examples":[{"type":"{C : Type u_1} →\n  {D : Type u_2} →\n    [inst : CategoryTheory.Category.{u_3, u_1} C] →\n      [inst_1 : CategoryTheory.Category.{u_4, u_2} D] →\n        [inst_2 : CategoryTheory.MonoidalCategory C] →\n          [inst_3 : CategoryTheory.MonoidalCategory D] →\n            (F : CategoryTheory.MonoidalFunctor C D) →\n              [inst_4 : CategoryTheory.Faithful F.toFunctor] →\n                [inst_5 : CategoryTheory.BraidedCategory D] →\n                  (β :\n                      (X Y : C) →\n                        CategoryTheory.MonoidalCategory.tensorObj X Y ≅ CategoryTheory.MonoidalCategory.tensorObj Y X) →\n                    (∀ (X Y : C),\n                        CategoryTheory.CategoryStruct.comp\n                            (CategoryTheory.LaxMonoidalFunctor.μ F.toLaxMonoidalFunctor X Y) (F.map (β X Y).hom) =\n                          CategoryTheory.CategoryStruct.comp (β_ (F.obj X) (F.obj Y)).hom\n                            (CategoryTheory.LaxMonoidalFunctor.μ F.toLaxMonoidalFunctor Y X)) →\n                      CategoryTheory.BraidedCategory C","name":"CategoryTheory.braidedCategoryOfFaithful","isProp":false,"doc":"Verifying the axioms for a braiding by checking that the candidate braiding is sent to a braiding\nby a faithful monoidal functor.\n","depth":33}],"count":82}
{"noDocExamples":[],"kind":"«term_≃ᵤ_»","examples":[{"type":"CompareReals.Bourbakiℝ ≃ᵤ ℝ","name":"CompareReals.compareEquiv","isProp":false,"doc":"The uniform bijection between Bourbaki and Cauchy reals. ","depth":4},{"type":"(α : Type u_4) → [inst : UniformSpace α] → α ≃ᵤ α","name":"UniformEquiv.refl","isProp":false,"doc":"Identity map as a uniform isomorphism. ","depth":6},{"type":"(α : Type u) → [inst : UniformSpace α] → ULift.{v, u} α ≃ᵤ α","name":"UniformEquiv.ulift","isProp":false,"doc":"Uniform equivalence between `ULift α` and `α`. ","depth":7}],"count":82}
{"noDocExamples":[],"kind":"FirstOrder.Language.«term_⊨__1»","examples":[{"type":"(V : Type w') →\n  [inst : FirstOrder.Language.Structure FirstOrder.Language.graph V] →\n    [inst : V ⊨ FirstOrder.Language.Theory.simpleGraph] → SimpleGraph V","name":"FirstOrder.Language.simpleGraphOfStructure","isProp":false,"doc":"Any model of the theory of simple graphs represents a simple graph. ","depth":7},{"type":"{L : FirstOrder.Language} →\n  (T : FirstOrder.Language.Theory L) →\n    (M : Type w) →\n      [inst : FirstOrder.Language.Structure L M] →\n        [inst : M ⊨ T] → [inst : Nonempty M] → FirstOrder.Language.Theory.ModelType T","name":"FirstOrder.Language.Theory.ModelType.of","isProp":false,"doc":"The object in the category of R-algebras associated to a type equipped with the appropriate\ntypeclasses. ","depth":9},{"type":"{L : FirstOrder.Language} →\n  {T : FirstOrder.Language.Theory L} →\n    {M : Type w} →\n      [LM : FirstOrder.Language.Structure L M] → [ne : Nonempty M] → M ⊨ T → FirstOrder.Language.Theory.ModelType T","name":"FirstOrder.Language.Theory.Model.bundled","isProp":false,"doc":"Bundles `M ⊨ T` as a `T.ModelType`. ","depth":10}],"count":81}
{"noDocExamples":[],"kind":"CategoryTheory.Limits.«term_⊞_»","examples":[{"type":"(G H : AddCommGroupCat) → G ⊞ H ≅ AddCommGroupCat.of (↑G × ↑H)","name":"AddCommGroupCat.biprodIsoProd","isProp":false,"doc":"We verify that the biproduct in `AddCommGroupCat` is isomorphic to\nthe cartesian product of the underlying types:\n","depth":12},{"type":"{C : Type u} →\n  [inst : CategoryTheory.Category.{v, u} C] →\n    [inst_1 : CategoryTheory.Limits.HasZeroMorphisms C] →\n      {X Y : C} → [inst_2 : CategoryTheory.Limits.HasBinaryBiproduct X Y] → Y ⟶ X ⊞ Y","name":"CategoryTheory.Limits.biprod.inr","isProp":false,"doc":"The inclusion into the second summand of a binary biproduct. ","depth":13},{"type":"{C : Type u} →\n  [inst : CategoryTheory.Category.{v, u} C] →\n    [inst_1 : CategoryTheory.Limits.HasZeroMorphisms C] →\n      {X Y : C} → [inst_2 : CategoryTheory.Limits.HasBinaryBiproduct X Y] → X ⟶ X ⊞ Y","name":"CategoryTheory.Limits.biprod.inl","isProp":false,"doc":"The inclusion into the first summand of a binary biproduct. ","depth":13}],"count":81}
{"noDocExamples":[],"kind":"SimpleGraph.«term_→g_»","examples":[{"type":"{V : Type u} → {G : SimpleGraph V} → G →g G","name":"SimpleGraph.Hom.id","isProp":false,"doc":"The identity homomorphism from a graph to itself. ","depth":6},{"type":"{V : Type u} → {G : SimpleGraph V} → (x : SimpleGraph.Subgraph G) → SimpleGraph.Subgraph.spanningCoe x →g G","name":"SimpleGraph.Subgraph.spanningHom","isProp":false,"doc":"There is an induced injective homomorphism of a subgraph of `G` as\na spanning subgraph into `G`. ","depth":8},{"type":"{V : Type u} →\n  {V' : Type v} →\n    {G : SimpleGraph V} →\n      {G' : SimpleGraph V'} → G →g G' → SimpleGraph.ConnectedComponent G → SimpleGraph.ConnectedComponent G'","name":"SimpleGraph.ConnectedComponent.map","isProp":false,"doc":"The map on connected components induced by a graph homomorphism. ","depth":9}],"count":81}
{"noDocExamples":[],"kind":"AddCommGroup.«term_≡_[PMOD_]»","examples":[{"type":"∀ {α : Type u_1} [inst : AddCommGroup α] {p a b : α}, a ≡ b [PMOD p] → b ≡ a [PMOD p]","name":"AddCommGroup.ModEq.symm","isProp":true,"doc":"**Alias** of the forward direction of `AddCommGroup.modEq_comm`.","depth":11},{"type":"∀ {α : Type u_1} [inst : AddCommGroupWithOne α] [inst_1 : CharZero α] {a b z : ℤ}, a ≡ b [PMOD z] → ↑a ≡ ↑b [PMOD ↑z]","name":"AddCommGroup.ModEq.int_cast","isProp":true,"doc":"**Alias** of the reverse direction of `AddCommGroup.int_cast_modEq_int_cast`.","depth":14},{"type":"∀ {α : Type u_1} [inst : AddCommGroupWithOne α] [inst_1 : CharZero α] {a b n : ℕ}, a ≡ b [MOD n] → ↑a ≡ ↑b [PMOD ↑n]","name":"AddCommGroup.ModEq.nat_cast","isProp":true,"doc":"**Alias** of the reverse direction of `AddCommGroup.nat_cast_modEq_nat_cast`.","depth":14}],"count":80}
{"noDocExamples":[{"type":"∀ {α : Type u_2} [inst : Inf α] [inst_1 : HImp α] (a b : α), a ⇔ b = (b ⇨ a) ⊓ (a ⇨ b)","name":"bihimp_def","isProp":true,"depth":12},{"type":"∀ {α : Type u_2} [inst : GeneralizedHeytingAlgebra α] (a : α), ⊤ ⇔ a = a","name":"top_bihimp","isProp":true,"depth":12},{"type":"∀ {α : Type u_1} [inst : GeneralizedHeytingAlgebra α], IsCommutative α fun x x_1 => x ⇔ x_1","name":"bihimp_isCommutative.proof_1","isProp":true,"depth":12}],"kind":"«term_⇔_»","examples":[],"count":77}
{"noDocExamples":[],"kind":"«term_⩿_»","examples":[{"type":"∀ {α : Type u_1} [inst : Preorder α] {a b : α}, a ≤ b → b ≤ a → a ⩿ b","name":"LE.le.wcovby_of_le","isProp":true,"doc":"**Alias** of `wcovby_of_le_of_le`.","depth":11},{"type":"∀ {α : Type u_1} [inst : PartialOrder α] {a b : α}, a ⩿ b → a = b ∨ a ⋖ b","name":"Wcovby.eq_or_covby","isProp":true,"doc":"**Alias** of the forward direction of `wcovby_iff_eq_or_covby`.","depth":12},{"type":"∀ {α : Type u_1} [inst : PartialOrder α] {a b : α}, a ⩿ b → a ⋖ b ∨ a = b","name":"Wcovby.covby_or_eq","isProp":true,"doc":"**Alias** of the forward direction of `wcovby_iff_covby_or_eq`.","depth":13}],"count":77}
{"noDocExamples":[],"kind":"«term_ˢʸᵐ»","examples":[{"type":"{α : Type u_1} → α ≃ αˢʸᵐ","name":"SymAlg.sym","isProp":false,"doc":"The element of `SymAlg α` that represents `a : α`. ","depth":3},{"type":"{α : Type u_1} → αˢʸᵐ ≃ α","name":"SymAlg.unsym","isProp":false,"doc":"The element of `α` represented by `x : αˢʸᵐ`. ","depth":4},{"type":"{α : Type u_1} → [inst : Ring α] → [inst : Invertible 2] → NonAssocRing αˢʸᵐ","name":"SymAlg.instNonAssocRingSymAlg","isProp":false,"doc":"The symmetrization of a real (unital, associative) algebra is a non-associative ring. ","depth":10}],"count":77}
{"noDocExamples":[{"type":"∀ {α : Type u_1} (a : Array α) (i : Fin (Array.size a)), Array.get a i = a[↑i]","name":"Array.get_eq_getElem","isProp":true,"depth":15}],"kind":"«term__[_]»","examples":[{"type":"∀ {α : Type u_1} (self : Array.PrefixTable α) {i : ℕ} (h : i < Array.size self.toArray), self.toArray[i].snd ≤ i","name":"Array.PrefixTable.valid","isProp":true,"doc":"Validity condition to help with termination proofs ","depth":19},{"type":"∀ {α β δ : Type} [inst : CanonicallyLinearOrderedAddMonoid δ] {C : Levenshtein.Cost α β δ} {xs : List α} {ys : List β}\n  (self : LevenshteinEstimator' C xs ys),\n  self.bound =\n    match self.pre_rev, (_ : List.reverse self.pre_rev ++ self.suff = ys) with\n    | [], split => ((↑self.distances)[0], List.length ys)\n    | x, split => (List.minimum_of_length_pos (_ : 0 < List.length ↑self.distances), List.length self.suff)","name":"LevenshteinEstimator'.bound_eq","isProp":true,"doc":"Predicate describing the current bound. ","depth":27}],"count":77}
{"noDocExamples":[],"kind":"CategoryTheory.Limits.«term⊥__»","examples":[{"type":"{C : Type u₁} →\n  [inst : CategoryTheory.Category.{v₁, u₁} C] →\n    [inst_1 : CategoryTheory.Limits.HasInitial C] → CategoryTheory.Limits.IsInitial (⊥_ C)","name":"CategoryTheory.Limits.initialIsInitial","isProp":false,"doc":"An initial object is initial. ","depth":7},{"type":"⊥_ TopCat ≅ TopCat.of PEmpty.{u + 1}","name":"TopCat.initialIsoPEmpty","isProp":false,"doc":"The initial object of `Top` is `PEmpty`. ","depth":8},{"type":"⊥_ Type u ≅ PEmpty.{u + 1}","name":"CategoryTheory.Limits.Types.initialIso","isProp":false,"doc":"The initial object in `Type u` is `PEmpty`. ","depth":8}],"count":76}
{"noDocExamples":[{"type":"∀ {α : Type u_1} [inst : SemilatticeSup α] {t : Set α}, ∅ ⊻ t = ∅","name":"Set.empty_sups","isProp":true,"depth":10},{"type":"∀ {α : Type u_1} [inst : SemilatticeSup α] {s : Set α}, s ⊻ ∅ = ∅","name":"Set.sups_empty","isProp":true,"depth":10},{"type":"∀ {α : Type u_1} [inst : SemilatticeSup α] {s t : Set α}, Set.Nonempty (s ⊻ t) → Set.Nonempty s","name":"Set.Nonempty.of_sups_left","isProp":true,"depth":11}],"kind":"«term_⊻_»","examples":[],"count":76}
{"noDocExamples":[],"kind":"CategoryTheory.Limits.«term_⨿_»","examples":[{"type":"(X Y : Type u) → X ⨿ Y ≅ X ⊕ Y","name":"CategoryTheory.Limits.Types.binaryCoproductIso","isProp":false,"doc":"The categorical binary coproduct in `Type u` is the sum `X ⊕ Y`. ","depth":10},{"type":"{C : Type u} →\n  [inst : CategoryTheory.Category.{v, u} C] →\n    {X Y : C} → [inst_1 : CategoryTheory.Limits.HasBinaryCoproduct X Y] → Y ⟶ X ⨿ Y","name":"CategoryTheory.Limits.coprod.inr","isProp":false,"doc":"The inclusion map from the second component of the coproduct. ","depth":11},{"type":"{C : Type u} →\n  [inst : CategoryTheory.Category.{v, u} C] →\n    {X Y : C} → [inst_1 : CategoryTheory.Limits.HasBinaryCoproduct X Y] → X ⟶ X ⨿ Y","name":"CategoryTheory.Limits.coprod.inl","isProp":false,"doc":"The inclusion map from the first component of the coproduct. ","depth":11}],"count":76}
{"noDocExamples":[{"type":"∀ {α : Type u_1} [inst : SemilatticeInf α] {t : Set α}, ∅ ⊼ t = ∅","name":"Set.empty_infs","isProp":true,"depth":10},{"type":"∀ {α : Type u_1} [inst : SemilatticeInf α] {s : Set α}, s ⊼ ∅ = ∅","name":"Set.infs_empty","isProp":true,"depth":10},{"type":"∀ {α : Type u_1} [inst : SemilatticeInf α] {s t : Set α}, Set.Nonempty (s ⊼ t) → Set.Nonempty t","name":"Set.Nonempty.of_infs_right","isProp":true,"depth":11}],"kind":"«term_⊼_»","examples":[],"count":75}
{"noDocExamples":[],"kind":"«term_≃ₛₗ[_]_»","examples":[{"type":"{R : Type u_1} →\n  {M : Type u_7} →\n    [inst : Semiring R] →\n      [inst_1 : AddCommMonoid M] →\n        {σ σ' : R →+* R} →\n          [inst_2 : RingHomInvPair σ σ'] →\n            [inst_3 : RingHomInvPair σ' σ] → {x : Module R M} → (f : M →ₛₗ[σ] M) → Function.Involutive ↑f → M ≃ₛₗ[σ] M","name":"LinearEquiv.ofInvolutive","isProp":false,"doc":"An involutive linear map is a linear equivalence. ","depth":28},{"type":"{R : Type u_17} →\n  {S : Type u_18} →\n    [inst : Semiring R] →\n      [inst_1 : Semiring S] →\n        {σ : R →+* S} →\n          {σ' : S →+* R} →\n            [inst_2 : RingHomInvPair σ σ'] →\n              [inst_3 : RingHomInvPair σ' σ] →\n                {M : Type u_19} →\n                  {M₂ : Type u_20} →\n                    [inst_4 : AddCommMonoid M] →\n                      [inst_5 : AddCommMonoid M₂] →\n                        [inst_6 : Module R M] → [inst_7 : Module S M₂] → (M ≃ₛₗ[σ] M₂) → M₂ → M","name":"LinearEquiv.Simps.symm_apply","isProp":false,"doc":"See Note [custom simps projection] ","depth":29},{"type":"{R : Type u_1} →\n  {S : Type u_6} →\n    {M : Type u_7} →\n      {M₂ : Type u_9} →\n        [inst : Semiring R] →\n          [inst_1 : Semiring S] →\n            [inst_2 : AddCommMonoid M] →\n              [inst_3 : AddCommMonoid M₂] →\n                [inst_4 : Module R M] →\n                  [inst_5 : Module S M₂] →\n                    {σ : R →+* S} →\n                      {σ' : S →+* R} →\n                        [inst_6 : RingHomInvPair σ σ'] → [inst_7 : RingHomInvPair σ' σ] → (M ≃ₛₗ[σ] M₂) → M ≃ M₂","name":"LinearEquiv.toEquiv","isProp":false,"doc":"The equivalence of types underlying a linear equivalence. ","depth":29}],"count":73}
{"noDocExamples":[],"kind":"«term_→⋆ₙₐ[_]_»","examples":[{"type":"(R : Type u_1) →\n  (A : Type u_2) →\n    [inst : Monoid R] →\n      [inst_1 : NonUnitalNonAssocSemiring A] → [inst_2 : DistribMulAction R A] → [inst_3 : Star A] → A →⋆ₙₐ[R] A","name":"NonUnitalStarAlgHom.id","isProp":false,"doc":"The identity as a non-unital ⋆-algebra homomorphism. ","depth":16},{"type":"(R : Type u_1) →\n  (A : Type u_2) →\n    [inst : CommSemiring R] →\n      [inst_1 : StarAddMonoid R] →\n        [inst_2 : NonUnitalSemiring A] → [inst_3 : Star A] → [inst_4 : Module R A] → A →⋆ₙₐ[R] Unitization R A","name":"Unitization.inrNonUnitalStarAlgHom","isProp":false,"doc":"The coercion from a non-unital `R`-algebra `A` to its unitization `unitization R A`\nrealized as a non-unital star algebra homomorphism. ","depth":19},{"type":"(R : Type u_1) →\n  (A : Type u_2) →\n    (B : Type u_3) →\n      [inst : Monoid R] →\n        [inst_1 : NonUnitalNonAssocSemiring A] →\n          [inst_2 : DistribMulAction R A] →\n            [inst_3 : StarAddMonoid A] →\n              [inst_4 : NonUnitalNonAssocSemiring B] →\n                [inst_5 : DistribMulAction R B] → [inst_6 : StarAddMonoid B] → A →⋆ₙₐ[R] A × B","name":"NonUnitalStarAlgHom.inl","isProp":false,"doc":"The left injection into a product is a non-unital algebra homomorphism. ","depth":20}],"count":73}
{"noDocExamples":[],"kind":"TypeVec.«term_:::_»","examples":[{"type":"{n : ℕ} →\n  {C : TypeVec (n + 1) → Sort u} → ((α : TypeVec n) → (β : Type u_1) → C (α ::: β)) → (γ : TypeVec (n + 1)) → C γ","name":"TypeVec.append1Cases","isProp":false,"doc":"cases on `(n+1)-length` vectors ","depth":11},{"type":"{n : ℕ} → {α : TypeVec (n + 1)} → TypeVec.Arrow (TypeVec.drop α ::: TypeVec.last α) α","name":"TypeVec.fromAppend1DropLast","isProp":false,"doc":"stitch two bits of a vector back together ","depth":11},{"type":"{n : ℕ} → {α : TypeVec (n + 1)} → TypeVec.Arrow α (TypeVec.drop α ::: TypeVec.last α)","name":"TypeVec.toAppend1DropLast","isProp":false,"doc":"decompose a vector into its prefix appended with its last element ","depth":11}],"count":71}
{"noDocExamples":[],"kind":"«DistribMulActionHomLocal≺»","examples":[{"type":"(M : Type u_5) →\n  [inst : Monoid M] → {A : Type u_6} → [inst_1 : AddMonoid A] → [inst_2 : DistribMulAction M A] → A →+[M] A","name":"DistribMulActionHom.id","isProp":false,"doc":"The identity map as an equivariant additive monoid homomorphism. ","depth":13},{"type":"{M : Type u_5} →\n  [inst : Monoid M] →\n    {A : Type u_6} →\n      [inst_1 : AddMonoid A] →\n        [inst_2 : DistribMulAction M A] →\n          {B : Type u_8} → [inst_3 : AddMonoid B] → [inst_4 : DistribMulAction M B] → (A →+[M] B) → A →+ B","name":"DistribMulActionHom.toAddMonoidHom","isProp":false,"doc":"Reinterpret an equivariant additive monoid homomorphism as an additive monoid homomorphism. ","depth":17},{"type":"{M : Type u_18} →\n  (N : Type u_16) →\n    (A : Type u_17) →\n      [inst : Monoid N] →\n        [inst_1 : AddMonoid A] →\n          [inst_2 : DistribSMul M A] → [inst_3 : DistribMulAction N A] → [inst_4 : SMulCommClass M N A] → M → A →+[N] A","name":"SMulCommClass.toDistribMulActionHom","isProp":false,"doc":"If `DistribMulAction` of `M` and `N` on `A` commute, then for each `c : M`, `(c • ·)` is an\n`N`-action additive homomorphism. ","depth":17}],"count":71}
{"noDocExamples":[],"kind":"CategoryTheory.Limits.«term∐_»","examples":[{"type":"{J : Type u} → (F : J → Type u) → ∐ F ≅ (j : J) × F j","name":"CategoryTheory.Limits.Types.coproductIso","isProp":false,"doc":"The categorical coproduct in `Type u` is the type theoretic coproduct `Σ j, F j`. ","depth":10},{"type":"{α : Type} → [inst : Fintype α] → (X : α → Stonean) → Stonean.finiteCoproduct X ≅ ∐ X","name":"Stonean.coproductIsoCoproduct","isProp":false,"doc":"The isomorphism from the explicit finite coproducts to the abstract coproduct. ","depth":12},{"type":"{α : Type} → [inst : Fintype α] → (X : α → CompHaus) → CompHaus.finiteCoproduct X ≅ ∐ X","name":"CompHaus.coproductIsoCoproduct","isProp":false,"doc":"The isomorphism from the explicit finite coproducts to the abstract coproduct. ","depth":12}],"count":70}
{"noDocExamples":[],"kind":"«term_≃ᵃⁱ[_]_»","examples":[{"type":"(𝕜 : Type u_1) →\n  {V : Type u_2} →\n    (P : Type u_8) →\n      [inst : NormedField 𝕜] →\n        [inst_1 : SeminormedAddCommGroup V] →\n          [inst_2 : NormedSpace 𝕜 V] → [inst_3 : PseudoMetricSpace P] → [inst_4 : NormedAddTorsor V P] → P ≃ᵃⁱ[𝕜] P","name":"AffineIsometryEquiv.refl","isProp":false,"doc":"Identity map as an `AffineIsometryEquiv`. ","depth":22},{"type":"(𝕜 : Type u_1) →\n  {V : Type u_2} →\n    {P : Type u_8} →\n      [inst : NormedField 𝕜] →\n        [inst_1 : SeminormedAddCommGroup V] →\n          [inst_2 : NormedSpace 𝕜 V] → [inst_3 : PseudoMetricSpace P] → [inst_4 : NormedAddTorsor V P] → P → P ≃ᵃⁱ[𝕜] P","name":"AffineIsometryEquiv.pointReflection","isProp":false,"doc":"Point reflection in `x` as an affine isometric automorphism. ","depth":23},{"type":"{𝕜 : Type u_1} →\n  {V : Type u_2} →\n    {P : Type u_8} →\n      [inst : NormedField 𝕜] →\n        [inst_1 : SeminormedAddCommGroup V] →\n          [inst_2 : NormedSpace 𝕜 V] →\n            [inst_3 : PseudoMetricSpace P] → [inst_4 : NormedAddTorsor V P] → Group (P ≃ᵃⁱ[𝕜] P)","name":"AffineIsometryEquiv.instGroupAffineIsometryEquiv","isProp":false,"doc":"The group of affine isometries of a `NormedAddTorsor`, `P`. ","depth":23}],"count":70}
{"noDocExamples":[],"kind":"«term_≃ₗ⁅_⁆_»","examples":[{"type":"{R : Type u} → {L₁ : Type v} → [inst : CommRing R] → [inst_1 : LieRing L₁] → [inst_2 : LieAlgebra R L₁] → L₁ ≃ₗ⁅R⁆ L₁","name":"LieEquiv.refl","isProp":false,"doc":"Lie algebra equivalences are reflexive. ","depth":13},{"type":"{R : Type u} →\n  {L₁ : Type v} →\n    {L₂ : Type w} →\n      [inst : CommRing R] →\n        [inst_1 : LieRing L₁] →\n          [inst_2 : LieRing L₂] → [inst_3 : LieAlgebra R L₁] → [inst_4 : LieAlgebra R L₂] → (L₁ ≃ₗ⁅R⁆ L₂) → L₂ ≃ₗ⁅R⁆ L₁","name":"LieEquiv.symm","isProp":false,"doc":"Lie algebra equivalences are symmetric. ","depth":17},{"type":"{R : Type u} →\n  {L : Type v} →\n    {L' : Type w} →\n      [inst : CommRing R] →\n        [inst_1 : LieRing L] →\n          [inst_2 : LieAlgebra R L] → [inst_3 : LieRing L'] → [inst_4 : LieAlgebra R L'] → (L ≃ₗ⁅R⁆ L') → L' → L","name":"LieEquiv.invFun","isProp":false,"doc":"The inverse function of an equivalence of Lie algebras ","depth":17}],"count":69}
{"noDocExamples":[],"kind":"TopCat.Presheaf.«term__*_»","examples":[{"type":"{C : Type u} →\n  [inst : CategoryTheory.Category.{v, u} C] →\n    {X : TopCat} → (ℱ : TopCat.Presheaf C X) → CategoryTheory.CategoryStruct.id X _* ℱ ≅ ℱ","name":"TopCat.Presheaf.Pushforward.id","isProp":false,"doc":"The natural isomorphism between the pushforward of a presheaf along the identity continuous map\nand the original presheaf. ","depth":12},{"type":"∀ {C : Type u} [inst : CategoryTheory.Category.{v, u} C] {X Y : TopCat} (f : X ⟶ Y) {F : TopCat.Presheaf C X},\n  TopCat.Presheaf.IsSheaf F → TopCat.Presheaf.IsSheaf (f _* F)","name":"TopCat.Sheaf.pushforward_sheaf_of_sheaf","isProp":true,"doc":"The pushforward of a sheaf (by a continuous map) is a sheaf.\n","depth":14},{"type":"{C : Type u_1} →\n  [inst : CategoryTheory.Category.{u_2, u_1} C] →\n    {X Y : AlgebraicGeometry.PresheafedSpace C} → (H : X ≅ Y) → Y.presheaf ≅ H.hom.base _* X.presheaf","name":"AlgebraicGeometry.PresheafedSpace.sheafIsoOfIso","isProp":false,"doc":"Isomorphic `PresheafedSpace`s have naturally isomorphic presheaves. ","depth":16}],"count":69}
{"noDocExamples":[],"kind":"Int.«term_≡_[ZMOD_]»","examples":[{"type":"∀ {n a b : ℤ}, a ≡ b [ZMOD n] → n ∣ b - a","name":"Int.ModEq.dvd","isProp":true,"doc":"**Alias** of the forward direction of `Int.modEq_iff_dvd`.","depth":11},{"type":"∀ {n a b : ℤ}, n ∣ b - a → a ≡ b [ZMOD n]","name":"Int.modEq_of_dvd","isProp":true,"doc":"**Alias** of the reverse direction of `Int.modEq_iff_dvd`.","depth":11},{"type":"∀ {p : ℕ}, Nat.Prime p → ∀ {n : ℤ}, IsCoprime n ↑p → n ^ (p - 1) ≡ 1 [ZMOD ↑p]","name":"Int.ModEq.pow_card_sub_one_eq_one","isProp":true,"doc":"**Fermat's Little Theorem**: for all `a : ℤ` coprime to `p`, we have\n`a ^ (p - 1) ≡ 1 [ZMOD p]`. ","depth":13}],"count":68}
{"noDocExamples":[],"kind":"Asymptotics.«term_=Θ[_]_»","examples":[{"type":"∀ {α : Type u_1} {l : Filter α} {f : α → ℝ},\n  ((fun x => rexp (f x)) =Θ[l] fun x => 1) ↔ Filter.IsBoundedUnder (fun x x_1 => x ≤ x_1) l fun x => |f x|","name":"Real.isTheta_exp_comp_one","isProp":true,"doc":"`Real.exp (f x)` is bounded away from zero and infinity along a filter `l` if and only if\n`|f x|` is bounded from above along this filter. ","depth":13},{"type":"∀ {α : Type u_1} {E : Type u_3} {F' : Type u_7} [inst : Norm E] [inst_1 : SeminormedAddCommGroup F'] {f : α → E}\n  {g' : α → F'} {l : Filter α}, (f =Θ[l] fun x => ‖g' x‖) → f =Θ[l] g'","name":"Asymptotics.IsTheta.of_norm_right","isProp":true,"doc":"**Alias** of the forward direction of `Asymptotics.isTheta_norm_right`.","depth":17},{"type":"∀ {α : Type u_1} {F : Type u_4} {E' : Type u_6} [inst : Norm F] [inst_1 : SeminormedAddCommGroup E'] {g : α → F}\n  {f' : α → E'} {l : Filter α}, f' =Θ[l] g → (fun x => ‖f' x‖) =Θ[l] g","name":"Asymptotics.IsTheta.norm_left","isProp":true,"doc":"**Alias** of the reverse direction of `Asymptotics.isTheta_norm_left`.","depth":17}],"count":68}
{"noDocExamples":[],"kind":"CategoryTheory.Limits.«term∏_»","examples":[{"type":"(J : Type u) → (f : J → CategoryTheory.Grpd) → CategoryTheory.Grpd.of ((j : J) → ↑(f j)) ≅ ∏ f","name":"CategoryTheory.Grpd.piIsoPi","isProp":false,"doc":"The product of a family of groupoids is isomorphic\nto the product object in the category of Groupoids ","depth":10},{"type":"{J : Type v} → (F : J → Type u) → [inst : UnivLE.{v, u}] → ∏ F ≅ Shrink ((j : J) → F j)","name":"CategoryTheory.Limits.Types.UnivLE.productIso","isProp":false,"doc":"The categorical product in `Type u` indexed in `Type v`\nis the type theoretic product `Π j, F j`, after shrinking back to `Type u`. ","depth":11},{"type":"{J : Type v} → (F : J → TypeMax) → ∏ F ≅ (j : J) → F j","name":"CategoryTheory.Limits.Types.productIso","isProp":false,"doc":"The categorical product in `TypeMax.{v, u}` is the type theoretic product `Π j, F j`. ","depth":12}],"count":67}
{"noDocExamples":[],"kind":"«term_→ₗᵢ[_]_»","examples":[{"type":"ℝ →ₗᵢ[ℝ] ℂ","name":"Complex.ofRealLi","isProp":false,"doc":"Linear isometry version of the canonical embedding of `ℝ` in `ℂ`. ","depth":11},{"type":"{K : Type u_1} → [inst : IsROrC K] → ℝ →ₗᵢ[ℝ] K","name":"IsROrC.ofRealLi","isProp":false,"doc":"The ℝ → K coercion, as a linear isometry ","depth":13},{"type":"{E : Type u_1} →\n  [inst : NormedAddCommGroup E] →\n    [inst_1 : InnerProductSpace ℝ E] →\n      [inst_2 : Fact (FiniteDimensional.finrank ℝ E = 2)] → Orientation ℝ E (Fin 2) → E →ₗᵢ[ℝ] E","name":"Orientation.rightAngleRotationAux₂","isProp":false,"doc":"Auxiliary construction for `Orientation.rightAngleRotation`, rotation by 90 degrees in an\noriented real inner product space of dimension 2. ","depth":16}],"count":66}
{"noDocExamples":[],"kind":"Nat.«term⌊_⌋₊»","examples":[{"type":"∀ {α : Type u_2} [inst : LinearOrderedSemifield α] [inst_1 : FloorSemiring α] (m n : ℕ), ⌊↑m / ↑n⌋₊ = m / n","name":"Nat.floor_div_eq_div","isProp":true,"doc":"Natural division is the floor of field division. ","depth":18},{"type":"∀ (u : ℕ → ℝ) (l : ℝ),\n  Monotone u →\n    ∀ (c : ℕ → ℝ),\n      (∀ (k : ℕ), 1 < c k) →\n        Filter.Tendsto c Filter.atTop (nhds 1) →\n          (∀ (k : ℕ), Filter.Tendsto (fun n => u ⌊c k ^ n⌋₊ / ↑⌊c k ^ n⌋₊) Filter.atTop (nhds l)) →\n            Filter.Tendsto (fun n => u n / ↑n) Filter.atTop (nhds l)","name":"tendsto_div_of_monotone_of_tendsto_div_floor_pow","isProp":true,"doc":"If a monotone sequence `u` is such that `u ⌊c^n⌋₊ / ⌊c^n⌋₊` converges to a limit `l` for all\n`c > 1`, then `u n / n` tends to `l`. It is even enough to have the assumption for a sequence of\n`c`s converging to `1`. ","depth":22},{"type":"∀ (N : ℕ) {j : ℝ},\n  0 < j →\n    ∀ {c : ℝ},\n      1 < c →\n        (Finset.sum (Finset.filter (fun x => j < ↑⌊c ^ x⌋₊) (Finset.range N)) fun i => 1 / ↑⌊c ^ i⌋₊ ^ 2) ≤\n          c ^ 5 * (c - 1)⁻¹ ^ 3 / j ^ 2","name":"sum_div_nat_floor_pow_sq_le_div_sq","isProp":true,"doc":"The sum of `1/⌊c^i⌋₊^2` above a threshold `j` is comparable to `1/j^2`, up to a multiplicative\nconstant. ","depth":22}],"count":66}
{"noDocExamples":[],"kind":"OmegaCompletePartialOrder.«term_→𝒄_»","examples":[{"type":"{α : Type u} → [inst : OmegaCompletePartialOrder α] → α →𝒄 α","name":"OmegaCompletePartialOrder.ContinuousHom.id","isProp":false,"doc":"The identity as a continuous function. ","depth":6},{"type":"{α : Type u} →\n  {β : Type v} → [inst : OmegaCompletePartialOrder α] → [inst_1 : OmegaCompletePartialOrder β] → (α →𝒄 β) → α → β","name":"OmegaCompletePartialOrder.ContinuousHom.Simps.apply","isProp":false,"doc":"See Note [custom simps projection]. We specify this explicitly because we don't have a FunLike\ninstance.\n","depth":9},{"type":"{α : Type u} → {β : Type v} → [inst : OmegaCompletePartialOrder α] → [inst_1 : OmegaCompletePartialOrder β] → β → α →𝒄 β","name":"OmegaCompletePartialOrder.ContinuousHom.const","isProp":false,"doc":"`Function.const` is a continuous function. ","depth":9}],"count":66}
{"noDocExamples":[{"type":"{M : Type u_1} → [inst : SubtractionMonoid Mᵃᵒᵖ] → SubtractionMonoid Mᵈᵃᵃ","name":"DomAddAct.instDivisionAddMonoidDomAddAct","isProp":false,"depth":4},{"type":"{M : Type u_1} → [inst : Add Mᵃᵒᵖ] → Add Mᵈᵃᵃ","name":"DomAddAct.instAddDomAddAct","isProp":false,"depth":4}],"kind":"«term_ᵈᵃᵃ»","examples":[{"type":"{M : Type u_1} → M ≃ Mᵈᵃᵃ","name":"DomAddAct.mk","isProp":false,"doc":"Equivalence between `M` and `Mᵈᵐᵃ`.","depth":3}],"count":65}
{"noDocExamples":[{"type":"∀ {α : Type u_2} [inst : LinearOrderedRing α] [inst_1 : FloorRing α] (a : α), ⌊a⌋ ≤ ⌈a⌉","name":"Int.floor_le_ceil","isProp":true,"depth":10},{"type":"∀ {α : Type u_2} [inst : LinearOrderedRing α] [inst_1 : FloorRing α] (a : α), ⌈a⌉ ≤ ⌊a⌋ + 1","name":"Int.ceil_le_floor_add_one","isProp":true,"depth":11}],"kind":"Int.«term⌈_⌉»","examples":[{"type":"∀ {ξ q : ℚ}, |ξ - q| < 1 / ↑q.den ^ 2 → q.den ≤ ξ.den ∧ ⌈ξ * ↑q.den⌉ - 1 ≤ q.num ∧ q.num ≤ ⌊ξ * ↑q.den⌋ + 1","name":"Rat.den_le_and_le_num_le_of_sub_lt_one_div_den_sq","isProp":true,"doc":"If `ξ` is rational, then the good rational approximations to `ξ` have bounded\nnumerator and denominator. ","depth":17}],"count":65}
{"noDocExamples":[],"kind":"Relator.«term_⇒_»","examples":[{"type":"{α : Sort u_1} →\n  {β : Sort u_2} →\n    {s₁ : Setoid α} → {s₂ : Setoid β} → (f : α → β) → (Setoid.r ⇒ Setoid.r) f f → Quotient s₁ → Quotient s₂","name":"Quotient.map'","isProp":false,"doc":"Map a function `f : α → β` that sends equivalent elements to equivalent elements\nto a function `Quotient sa → Quotient sb`. Useful to define unary operations on quotients. ","depth":14},{"type":"{α : Sort u_1} →\n  {β : Sort u_2} → {ra : α → α → Prop} → {rb : β → β → Prop} → (f : α → β) → (ra ⇒ rb) f f → Quot ra → Quot rb","name":"Quot.map","isProp":false,"doc":"Map a function `f : α → β` such that `ra x y` implies `rb (f x) (f y)`\nto a map `Quot ra → Quot rb`. ","depth":14},{"type":"{α : Type u_1} →\n  {β : Type u_2} →\n    {l : Filter α} →\n      {γ : Sort u_5} → Filter.Germ l β → (F : (α → β) → γ) → (Filter.EventuallyEq l ⇒ fun x x_1 => x = x_1) F F → γ","name":"Filter.Germ.liftOn","isProp":false,"doc":"Given a germ `f : Germ l β` and a function `F : (α → β) → γ` sending eventually equal functions\nto the same value, returns the value `F` takes on functions having germ `f` at `l`. ","depth":16}],"count":64}
{"noDocExamples":[],"kind":"«term￢_»","examples":[{"type":"∀ {α : Type u_4} [self : CoheytingAlgebra α] (a : α), ⊤ \\ a = ￢a","name":"CoheytingAlgebra.top_sdiff","isProp":true,"doc":"`⊤ \\ a` is `￢a` ","depth":11},{"type":"∀ {α : Type u_4} [self : BiheytingAlgebra α] (a : α), ⊤ \\ a = ￢a","name":"BiheytingAlgebra.top_sdiff","isProp":true,"doc":"`⊤ \\ a` is `￢a` ","depth":12},{"type":"∀ {α : Type u_2} [inst : CoheytingAlgebra α] {a b : α}, Codisjoint b a → ￢a ≤ b","name":"Codisjoint.hnot_le_left","isProp":true,"doc":"**Alias** of the reverse direction of `hnot_le_iff_codisjoint_left`.","depth":17}],"count":64}
{"noDocExamples":[{"type":"∀ (n : ℕ), Nat.div2 (Nat.succ n) = bif Nat.bodd n then Nat.succ (Nat.div2 n) else Nat.div2 n","name":"Nat.div2_succ","isProp":true,"depth":6},{"type":"∀ {α : Type u} (b : Bool) (a : α), (bif b then a else a) = a","name":"Bool.cond_self","isProp":true,"depth":9}],"kind":"boolIfThenElse","examples":[{"type":"∀ (p : ENNReal) (h : p ≤ 1), Pmf.binomial p h 1 = Pmf.map (fun x => bif x then 1 else 0) (Pmf.bernoulli p h)","name":"Pmf.binomial_one_eq_bernoulli","isProp":true,"doc":"The binomial distribution on one coin is the bernoully distribution. ","depth":18}],"count":63}
{"noDocExamples":[],"kind":"Lean.Parser.Term.let_fun","examples":[{"type":"(V W : SemiNormedGroupCat) →\n  let_fun this := fun V W => inferInstanceAs (AddGroup (NormedAddGroupHom ↑V ↑W));\n  (V ⟶ W) →+ (SemiNormedGroupCat.completion.obj V ⟶ SemiNormedGroupCat.completion.obj W)","name":"SemiNormedGroupCat.completion.mapHom","isProp":false,"doc":"Given a normed group hom `V ⟶ W`, this defines the associated morphism\nfrom the completion of `V` to the completion of `W`.\nThe difference from the definition obtained from the functoriality of completion is in that the\nmap sending a morphism `f` to the associated morphism of completions is itself additive. ","depth":20},{"type":"∀ {ι : Type u_1} {B : Type u_2} {F : Type u_3} [inst : TopologicalSpace B] [inst_1 : TopologicalSpace F]\n  (Z : FiberBundleCore ι B F) (v : F),\n  (∀ (i j : ι) (x : B),\n      x ∈ FiberBundleCore.baseSet Z i ∩ FiberBundleCore.baseSet Z j → FiberBundleCore.coordChange Z i j x v = v) →\n    Continuous\n      (let_fun this := fun x => { proj := x, snd := v };\n      this)","name":"FiberBundleCore.continuous_const_section","isProp":true,"doc":"If an element of `F` is invariant under all coordinate changes, then one can define a\ncorresponding section of the fiber bundle, which is continuous. This applies in particular to the\nzero section of a vector bundle. Another example (not yet defined) would be the identity\nsection of the endomorphism bundle of a vector bundle. ","depth":24},{"type":"{R : Type u₁} →\n  {S : Type u₂} →\n    [inst : CommRing R] →\n      [inst_1 : CommRing S] →\n        (f : R →+* S) →\n          {X : ModuleCat R} →\n            {Y : ModuleCat S} →\n              S →\n                (X ⟶ (CategoryTheory.ModuleCat.restrictScalars f).obj Y) →\n                  let_fun this := Module.compHom (↑Y) f;\n                  ↑X →ₗ[R] ↑Y","name":"CategoryTheory.ModuleCat.ExtendRestrictScalarsAdj.HomEquiv.evalAt","isProp":false,"doc":"The map `S → X →ₗ[R] Y` given by `fun s x => s • (g x)`\n","depth":24}],"count":63}
{"noDocExamples":[],"kind":"«term_≺i_»","examples":[{"type":"EmptyRelation ≺i EmptyRelation","name":"PrincipalSeg.pemptyToPunit","isProp":false,"doc":"Principal segment from the empty relation on `PEmpty` to the empty relation on `PUnit`. ","depth":4},{"type":"{α : Type u_4} → {β : Type u_5} → {r : α → α → Prop} → {s : β → β → Prop} → r ≺i s → β","name":"PrincipalSeg.top","isProp":false,"doc":"The supremum of the principal segment ","depth":9},{"type":"(fun x x_1 => x < x_1) ≺i fun x x_1 => x < x_1","name":"Ordinal.lift.principalSeg","isProp":false,"doc":"Principal segment version of the lift operation on ordinals, embedding `ordinal.{u}` in\n`ordinal.{v}` as a principal segment when `u < v`. ","depth":10}],"count":62}
{"noDocExamples":[],"kind":"Lean.Parser.Term.do","examples":[{"type":"∀ (cf cg : Nat.Partrec.Code) (a k : ℕ),\n  Nat.Partrec.Code.eval (Nat.Partrec.Code.prec cf cg) (Nat.pair a (Nat.succ k)) = do\n    let ih ← Nat.Partrec.Code.eval (Nat.Partrec.Code.prec cf cg) (Nat.pair a k)\n    Nat.Partrec.Code.eval cg (Nat.pair a (Nat.pair k ih))","name":"Nat.Partrec.Code.eval_prec_succ","isProp":true,"doc":"Helper lemma for the evaluation of `prec` in the recursive case. ","depth":12},{"type":"∀ (m : Type u → Type v) [inst : Monad m],\n  (∀ {α : Type u} (x : m α), id <$> x = x) →\n    (∀ {α β : Type u} (x : α) (f : α → m β), pure x >>= f = f x) →\n      (∀ {α β γ : Type u} (x : m α) (f : α → m β) (g : β → m γ), x >>= f >>= g = x >>= fun x => f x >>= g) →\n        autoParam (∀ {α β : Type u} (x : α) (y : m β), Functor.mapConst x y = Function.const β x <$> y) _auto✝ →\n          autoParam\n              (∀ {α β : Type u} (x : m α) (y : m β),\n                (SeqLeft.seqLeft x fun x => y) = do\n                  let a ← x\n                  let _ ← y\n                  pure a)\n              _auto✝¹ →\n            autoParam\n                (∀ {α β : Type u} (x : m α) (y : m β),\n                  (SeqRight.seqRight x fun x => y) = do\n                    let _ ← x\n                    y)\n                _auto✝² →\n              autoParam\n                  (∀ {α β : Type u} (f : α → β) (x : m α),\n                    (do\n                        let y ← x\n                        pure (f y)) =\n                      f <$> x)\n                  _auto✝³ →\n                autoParam\n                    (∀ {α β : Type u} (f : m (α → β)) (x : m α),\n                      (do\n                          let x_1 ← f\n                          x_1 <$> x) =\n                        Seq.seq f fun x_1 => x)\n                    _auto✝⁴ →\n                  LawfulMonad m","name":"LawfulMonad.mk'","isProp":true,"doc":"An alternative constructor for `LawfulMonad` which has more\ndefaultable fields in the common case.\n","depth":28},{"type":"Bool →\n  List Lean.Expr →\n    optParam Linarith.LinarithConfig\n        {\n          discharger := do\n            let __do_lift ←\n              do\n                let info ← Lean.MonadRef.mkInfoFromRefPos\n                let _ ← Lean.getCurrMacroScope\n                let _ ← Lean.getMainModule\n                pure { raw := Lean.Syntax.node1 info `Mathlib.Tactic.RingNF.ring (Lean.Syntax.atom info \"ring\") }\n            Lean.Elab.Tactic.evalTactic __do_lift.raw,\n          exfalso := true, transparency := Lean.Meta.TransparencyMode.reducible, splitHypotheses := true,\n          splitNe := false, preprocessors := none, oracle := none } →\n      Lean.MVarId → Lean.MetaM Unit","name":"Linarith.linarith","isProp":false,"doc":"`linarith only_on hyps cfg` tries to close the goal using linear arithmetic. It fails\nif it does not succeed at doing this.\n\n* `hyps` is a list of proofs of comparisons to include in the search.\n* If `only_on` is true, the search will be restricted to `hyps`. Otherwise it will use all\n  comparisons in the local context.\n* If `cfg.transparency := semireducible`,\n  it will unfold semireducible definitions when trying to match atomic expressions.\n","depth":33}],"count":62}
{"noDocExamples":[],"kind":"«term_→ₛₗᵢ[_]_»","examples":[{"type":"{R : Type u_1} →\n  {R₂ : Type u_2} →\n    [inst : Semiring R] →\n      [inst_1 : Semiring R₂] →\n        (σ₁₂ : R →+* R₂) →\n          (E : Type u_11) →\n            (E₂ : Type u_12) →\n              [inst_2 : SeminormedAddCommGroup E] →\n                [inst_3 : SeminormedAddCommGroup E₂] →\n                  [inst_4 : Module R E] → [inst_5 : Module R₂ E₂] → (E →ₛₗᵢ[σ₁₂] E₂) → E → E₂","name":"LinearIsometry.Simps.apply","isProp":false,"doc":"See Note [custom simps projection]. We need to specify this projection explicitly in this case,\nbecause it is a composition of multiple projections. ","depth":23},{"type":"{R : Type u_1} →\n  {R₂ : Type u_2} →\n    {E : Type u_5} →\n      {E₂ : Type u_6} →\n        [inst : Semiring R] →\n          [inst_1 : Semiring R₂] →\n            {σ₁₂ : R →+* R₂} →\n              [inst_2 : SeminormedAddCommGroup E] →\n                [inst_3 : SeminormedAddCommGroup E₂] →\n                  [inst_4 : Module R E] → [inst_5 : Module R₂ E₂] → (E →ₛₗᵢ[σ₁₂] E₂) → E →SL[σ₁₂] E₂","name":"LinearIsometry.toContinuousLinearMap","isProp":false,"doc":"Interpret a linear isometry as a continuous linear map. ","depth":25},{"type":"{R : Type u_1} →\n  {R₂ : Type u_2} →\n    {E : Type u_5} →\n      {E₂ : Type u_6} →\n        [inst : Semiring R] →\n          [inst_1 : Semiring R₂] →\n            {σ₁₂ : R →+* R₂} →\n              {σ₂₁ : R₂ →+* R} →\n                [inst_2 : RingHomInvPair σ₁₂ σ₂₁] →\n                  [inst_3 : RingHomInvPair σ₂₁ σ₁₂] →\n                    [inst_4 : SeminormedAddCommGroup E] →\n                      [inst_5 : SeminormedAddCommGroup E₂] →\n                        [inst_6 : Module R E] → [inst_7 : Module R₂ E₂] → (E ≃ₛₗᵢ[σ₁₂] E₂) → E →ₛₗᵢ[σ₁₂] E₂","name":"LinearIsometryEquiv.toLinearIsometry","isProp":false,"doc":"Reinterpret a `LinearIsometryEquiv` as a `LinearIsometry`. ","depth":29}],"count":62}
{"noDocExamples":[],"kind":"Vector.«term_::ᵥ_»","examples":[{"type":"∀ {α : Type u} {n : ℕ} (a : α) (v : Vector α n), Vector.toList (a ::ᵥ v) = a :: Vector.toList v","name":"Vector.toList_cons","isProp":true,"doc":"`toList` of `cons` of a vector and an element is\nthe `cons` of the list obtained by `toList` and the element ","depth":11},{"type":"∀ {α : Type u} {n : ℕ} (a : α) (v : Vector α n), Vector.head (a ::ᵥ v) = a","name":"Vector.head_cons","isProp":true,"doc":"The head of a vector obtained by prepending is the element prepended. ","depth":11},{"type":"∀ {α : Type u_1} {ix : Fin 1} (x : α), Vector.get (x ::ᵥ Vector.nil) ix = x","name":"Vector.get_cons_nil","isProp":true,"doc":"Accessing the nth element of a vector made up\nof one element `x : α` is `x` itself. ","depth":13}],"count":60}
{"noDocExamples":[],"kind":"«term_≃._»","examples":[{"type":"(α : Type u_1) → α ≃. α","name":"PEquiv.refl","isProp":false,"doc":"The identity map as a partial equivalence. ","depth":3},{"type":"{α : Type u} → {β : Type v} → (α ≃. β) → α → Option β","name":"PEquiv.toFun","isProp":false,"doc":"The underlying partial function of a `PEquiv` ","depth":5},{"type":"{α : Type u_1} → {β : Type u_2} → α ≃ β → α ≃. β","name":"Equiv.toPEquiv","isProp":false,"doc":"Turns an `Equiv` into a `PEquiv` of the whole type. ","depth":5}],"count":59}
{"noDocExamples":[],"kind":"«term_≃ₛₗᵢ[_]_»","examples":[{"type":"{R : Type u_1} →\n  {R₂ : Type u_2} →\n    {E : Type u_5} →\n      {E₂ : Type u_6} →\n        [inst : Semiring R] →\n          [inst_1 : Semiring R₂] →\n            {σ₁₂ : R →+* R₂} →\n              {σ₂₁ : R₂ →+* R} →\n                [inst_2 : RingHomInvPair σ₁₂ σ₂₁] →\n                  [inst_3 : RingHomInvPair σ₂₁ σ₁₂] →\n                    [inst_4 : SeminormedAddCommGroup E] →\n                      [inst_5 : SeminormedAddCommGroup E₂] →\n                        [inst_6 : Module R E] → [inst_7 : Module R₂ E₂] → (E ≃ₛₗᵢ[σ₁₂] E₂) → E₂ ≃ₛₗᵢ[σ₂₁] E","name":"LinearIsometryEquiv.symm","isProp":false,"doc":"The inverse `LinearIsometryEquiv`. ","depth":29},{"type":"{R : Type u_1} →\n  {R₂ : Type u_2} →\n    [inst : Semiring R] →\n      [inst_1 : Semiring R₂] →\n        (σ₁₂ : R →+* R₂) →\n          {σ₂₁ : R₂ →+* R} →\n            [inst_2 : RingHomInvPair σ₁₂ σ₂₁] →\n              [inst_3 : RingHomInvPair σ₂₁ σ₁₂] →\n                (E : Type u_11) →\n                  (E₂ : Type u_12) →\n                    [inst_4 : SeminormedAddCommGroup E] →\n                      [inst_5 : SeminormedAddCommGroup E₂] →\n                        [inst_6 : Module R E] → [inst_7 : Module R₂ E₂] → (E ≃ₛₗᵢ[σ₁₂] E₂) → E₂ → E","name":"LinearIsometryEquiv.Simps.symm_apply","isProp":false,"doc":"See Note [custom simps projection] ","depth":29},{"type":"{R : Type u_1} →\n  {R₂ : Type u_2} →\n    {E : Type u_5} →\n      {E₂ : Type u_6} →\n        [inst : Semiring R] →\n          [inst_1 : Semiring R₂] →\n            {σ₁₂ : R →+* R₂} →\n              {σ₂₁ : R₂ →+* R} →\n                [inst_2 : RingHomInvPair σ₁₂ σ₂₁] →\n                  [inst_3 : RingHomInvPair σ₂₁ σ₁₂] →\n                    [inst_4 : SeminormedAddCommGroup E] →\n                      [inst_5 : SeminormedAddCommGroup E₂] →\n                        [inst_6 : Module R E] → [inst_7 : Module R₂ E₂] → (E ≃ₛₗᵢ[σ₁₂] E₂) → E →ₛₗᵢ[σ₁₂] E₂","name":"LinearIsometryEquiv.toLinearIsometry","isProp":false,"doc":"Reinterpret a `LinearIsometryEquiv` as a `LinearIsometry`. ","depth":29}],"count":58}
{"noDocExamples":[],"kind":"«FreimanHomLocal≺»","examples":[{"type":"{α : Type u_2} → [inst : CommMonoid α] → (A : Set α) → (n : ℕ) → A →*[n] α","name":"FreimanHom.id","isProp":false,"doc":"The identity map from a commutative monoid to itself. ","depth":10},{"type":"{α : Type u_2} →\n  {β : Type u_3} → [inst : CommMonoid α] → [inst_1 : CommMonoid β] → {A : Set α} → {n : ℕ} → CommMonoid (A →*[n] β)","name":"FreimanHom.commMonoid","isProp":false,"doc":"`A →*[n] β` is a `CommMonoid`. ","depth":13},{"type":"{α : Type u_2} →\n  {β : Type u_3} → [inst : CommMonoid α] → [inst_1 : CommMonoid β] → {A : Set α} → {n : ℕ} → Mul (A →*[n] β)","name":"FreimanHom.instMulFreimanHom","isProp":false,"doc":"`f * g` is the Freiman homomorphism sends `x` to `f x * g x`. ","depth":13}],"count":58}
{"noDocExamples":[],"kind":"Set.termΙ","examples":[{"type":"∀ {E : Type u_3} [inst : NormedAddCommGroup E] {f : ℝ → E} {a b : ℝ} {μ : MeasureTheory.Measure ℝ},\n  IntervalIntegrable f μ a b → MeasureTheory.IntegrableOn f (Ι a b)","name":"IntervalIntegrable.def","isProp":true,"doc":"If a function is interval integrable with respect to a given measure `μ` on `a..b` then\nit is integrable on `uIoc a b` with respect to `μ`. ","depth":14},{"type":"∀ {E : Type u_3} [inst : NormedAddCommGroup E] {f : ℝ → E} {a b : ℝ} {μ : MeasureTheory.Measure ℝ},\n  IntervalIntegrable f μ a b ↔ MeasureTheory.IntegrableOn f (Ι a b)","name":"intervalIntegrable_iff","isProp":true,"doc":"A function is interval integrable with respect to a given measure `μ` on `a..b` if and\nonly if it is integrable on `uIoc a b` with respect to `μ`. This is an equivalent\ndefinition of `IntervalIntegrable`. ","depth":14},{"type":"∀ {a b : ℝ} (n : ℕ), ∫ (x : ℝ) in Ι a b, |x - a| ^ n = |b - a| ^ (n + 1) / (↑n + 1)","name":"integral_pow_abs_sub_uIoc","isProp":true,"doc":"Integral of `|x - a| ^ n` over `Ι a b`. This integral appears in the proof of the\nPicard-Lindelöf/Cauchy-Lipschitz theorem. ","depth":16}],"count":58}
{"noDocExamples":[],"kind":"termℙ","examples":[{"type":"{K : Type u_1} →\n  {V : Type u_2} → [inst : DivisionRing K] → [inst_1 : AddCommGroup V] → [inst_2 : Module K V] → ℙ K V → V","name":"Projectivization.rep","isProp":false,"doc":"Choose a representative of `v : Projectivization K V` in `V`. ","depth":11},{"type":"{K : Type u_1} →\n  {V : Type u_2} → [inst : DivisionRing K] → [inst_1 : AddCommGroup V] → [inst_2 : Module K V] → ℙ K V → Submodule K V","name":"Projectivization.submodule","isProp":false,"doc":"Consider an element of the projectivization as a submodule of `V`. ","depth":12},{"type":"{K : Type u_1} →\n  {V : Type u_2} →\n    [inst : Field K] → [inst_1 : AddCommGroup V] → [inst_2 : Module K V] → Set (ℙ K V) → Projectivization.Subspace K V","name":"Projectivization.Subspace.span","isProp":false,"doc":"The span of a set of points in projective space is a subspace. ","depth":12}],"count":58}
{"noDocExamples":[],"kind":"«term_≼i_»","examples":[{"type":"{α : Type u_1} → (r : α → α → Prop) → r ≼i r","name":"InitialSeg.refl","isProp":false,"doc":"The identity function shows that `≼i` is reflexive ","depth":6},{"type":"{α : Type u_1} → {β : Type u_2} → (r : α → α → Prop) → (s : β → β → Prop) → r ≼i Sum.Lex r s","name":"InitialSeg.leAdd","isProp":false,"doc":"Initial segment embedding of an order `r` into the disjoint union of `r` and `s`. ","depth":9},{"type":"{α : Type u_1} → {β : Type u_2} → (r : α → α → Prop) → (s : β → β → Prop) → [inst : IsEmpty α] → r ≼i s","name":"InitialSeg.ofIsEmpty","isProp":false,"doc":"Initial segment from an empty type. ","depth":9}],"count":57}
{"noDocExamples":[],"kind":"«AddFreimanHomLocal≺»","examples":[{"type":"{α : Type u_2} → [inst : AddCommMonoid α] → (A : Set α) → (n : ℕ) → A →+[n] α","name":"AddFreimanHom.id","isProp":false,"doc":"The identity map from an additive commutative monoid to itself.","depth":10},{"type":"{α : Type u_2} →\n  [inst : AddCommMonoid α] →\n    {A : Set α} → {n : ℕ} → {β : Type u_7} → [inst_1 : AddCommGroup β] → AddCommGroup (A →+[n] β)","name":"AddFreimanHom.addCommGroup","isProp":false,"doc":"If `β` is an additive commutative group, then `A →*[n] β` is an additive commutative\ngroup too.","depth":13},{"type":"{α : Type u_2} →\n  {β : Type u_3} → [inst : AddCommMonoid α] → [inst_1 : AddCommMonoid β] → (A : Set α) → (n : ℕ) → (α →+ β) → A →+[n] β","name":"AddMonoidHom.toAddFreimanHom","isProp":false,"doc":"An `AddMonoidHom` is naturally an `AddFreimanHom`","depth":13}],"count":57}
{"noDocExamples":[],"kind":"«term_≃ᵈ_»","examples":[{"type":"(X : Type u_4) → [inst : PseudoEMetricSpace X] → X ≃ᵈ X","name":"DilationEquiv.refl","isProp":false,"doc":"Identity map as a `DilationEquiv`. ","depth":6},{"type":"{X : Type u_1} → {Y : Type u_2} → [inst : PseudoEMetricSpace X] → [inst_1 : PseudoEMetricSpace Y] → X ≃ᵈ Y → Y ≃ᵈ X","name":"DilationEquiv.symm","isProp":false,"doc":"Inverse `DilationEquiv`. ","depth":9},{"type":"{X : Type u_1} → {Y : Type u_2} → [inst : PseudoEMetricSpace X] → [inst_1 : PseudoEMetricSpace Y] → X ≃ᵈ Y → Y → X","name":"DilationEquiv.Simps.symm_apply","isProp":false,"doc":"See Note [custom simps projection]. ","depth":9}],"count":55}
{"noDocExamples":[],"kind":"«term_→+*o_»","examples":[{"type":"(α : Type u_2) → [inst : NonAssocSemiring α] → [inst_1 : Preorder α] → α →+*o α","name":"OrderRingHom.id","isProp":false,"doc":"The identity as an ordered ring homomorphism. ","depth":9},{"type":"{α : Type u_6} →\n  {β : Type u_7} →\n    [inst : NonAssocSemiring α] →\n      [inst_1 : Preorder α] → [inst_2 : NonAssocSemiring β] → [inst_3 : Preorder β] → α →+*o β → α →+* β","name":"OrderRingHom.toRingHom","isProp":false,"doc":"Reinterpret an ordered ring homomorphism as a ring homomorphism. ","depth":13},{"type":"{α : Type u_2} →\n  {β : Type u_3} →\n    [inst : NonAssocSemiring α] →\n      [inst_1 : Preorder α] → [inst_2 : NonAssocSemiring β] → [inst_3 : Preorder β] → α →+*o β → α →*₀o β","name":"OrderRingHom.toOrderMonoidWithZeroHom","isProp":false,"doc":"Reinterpret an ordered ring homomorphism as an order homomorphism. ","depth":13}],"count":53}
{"noDocExamples":[],"kind":"IntermediateField.«term_⟮_,,⟯»","examples":[{"type":"∀ {F : Type u_1} [inst : Field F] {E : Type u_2} [inst_1 : Field E] [inst_2 : Algebra F E] (x : E),\n  CompleteLattice.IsCompactElement F⟮x⟯","name":"IntermediateField.adjoin_simple_isCompactElement","isProp":true,"doc":"Adjoining a single element is compact in the lattice of intermediate fields. ","depth":14},{"type":"∀ (F : Type u_1) [inst : Field F] (E : Type u_2) [inst_1 : Field E] [inst_2 : Algebra F E] [inst_3 : Finite E],\n  ∃ α, F⟮α⟯ = ⊤","name":"Field.exists_primitive_element_of_finite_top","isProp":true,"doc":"**Primitive element theorem** assuming E is finite. ","depth":17},{"type":"∀ (F : Type u_1) (E : Type u_2) [inst : Field F] [inst_1 : Field E] [inst_2 : Algebra F E]\n  [inst_3 : FiniteDimensional F E] [inst_4 : IsSeparable F E], ∃ α, F⟮α⟯ = ⊤","name":"Field.exists_primitive_element","isProp":true,"doc":"Primitive element theorem: a finite separable field extension `E` of `F` has a\nprimitive element, i.e. there is an `α ∈ E` such that `F⟮α⟯ = (⊤ : Subalgebra F E)`.","depth":18}],"count":51}
{"noDocExamples":[],"kind":"«term_→ᵃⁱ[_]_»","examples":[{"type":"{𝕜 : Type u_1} →\n  {V : Type u_2} →\n    {P : Type u_8} →\n      [inst : NormedField 𝕜] →\n        [inst_1 : SeminormedAddCommGroup V] →\n          [inst_2 : NormedSpace 𝕜 V] → [inst_3 : PseudoMetricSpace P] → [inst_4 : NormedAddTorsor V P] → P →ᵃⁱ[𝕜] P","name":"AffineIsometry.id","isProp":false,"doc":"The identity affine isometry. ","depth":22},{"type":"{𝕜 : Type u_1} →\n  {V : Type u_2} →\n    {V₂ : Type u_4} →\n      [inst : NormedField 𝕜] →\n        [inst_1 : SeminormedAddCommGroup V] →\n          [inst_2 : SeminormedAddCommGroup V₂] →\n            [inst_3 : NormedSpace 𝕜 V] → [inst_4 : NormedSpace 𝕜 V₂] → (V →ₗᵢ[𝕜] V₂) → V →ᵃⁱ[𝕜] V₂","name":"LinearIsometry.toAffineIsometry","isProp":false,"doc":"Reinterpret a linear isometry as an affine isometry. ","depth":23},{"type":"{𝕜 : Type u_1} →\n  {V : Type u_2} →\n    {V₂ : Type u_4} →\n      {P : Type u_8} →\n        {P₂ : Type u_9} →\n          [inst : NormedField 𝕜] →\n            [inst_1 : SeminormedAddCommGroup V] →\n              [inst_2 : SeminormedAddCommGroup V₂] →\n                [inst_3 : NormedSpace 𝕜 V] →\n                  [inst_4 : NormedSpace 𝕜 V₂] →\n                    [inst_5 : PseudoMetricSpace P] →\n                      [inst_6 : PseudoMetricSpace P₂] →\n                        [inst_7 : NormedAddTorsor V P] → [inst_8 : NormedAddTorsor V₂ P₂] → (P ≃ᵃⁱ[𝕜] P₂) → P →ᵃⁱ[𝕜] P₂","name":"AffineIsometryEquiv.toAffineIsometry","isProp":false,"doc":"Reinterpret an `AffineIsometryEquiv` as an `AffineIsometry`. ","depth":29}],"count":51}
{"noDocExamples":[],"kind":"SimpleGraph.«term_≃g_»","examples":[{"type":"{V : Type u} → {G : SimpleGraph V} → G ≃g G","name":"SimpleGraph.Iso.refl","isProp":false,"doc":"The identity isomorphism of a graph with itself. ","depth":6},{"type":"{α : Type u_1} → [inst : Preorder α] → SimpleGraph.hasse αᵒᵈ ≃g SimpleGraph.hasse α","name":"SimpleGraph.hasseDualIso","isProp":false,"doc":"`αᵒᵈ` and `α` have the same Hasse diagram. ","depth":7},{"type":"{V : Type u} → (G : SimpleGraph V) → SimpleGraph.induce Set.univ G ≃g G","name":"SimpleGraph.induceUnivIso","isProp":false,"doc":"The graph induced on `Set.univ` is isomorphic to the original graph. ","depth":8}],"count":50}
{"noDocExamples":[],"kind":"«term⨂[_]_,_»","examples":[{"type":"{ι : Type u_1} →\n  (R : Type u_4) →\n    [inst : CommSemiring R] →\n      {s : ι → Type u_7} →\n        [inst_1 : (i : ι) → AddCommMonoid (s i)] →\n          [inst_2 : (i : ι) → Module R (s i)] → R → ((i : ι) → s i) → ⨂[R] (i : ι), s i","name":"PiTensorProduct.tprodCoeff","isProp":false,"doc":"`tprodCoeff R r f` with `r : R` and `f : ∀ i, s i` is the tensor product of the vectors `f i`\nover all `i : ι`, multiplied by the coefficient `r`. Note that this is meant as an auxiliary\ndefinition for this file alone, and that one should use `tprod` defined below for most purposes. ","depth":14},{"type":"{ι : Type u_1} →\n  (R : Type u_4) →\n    [inst : CommSemiring R] →\n      {s : ι → Type u_7} →\n        [inst_1 : (i : ι) → AddCommMonoid (s i)] →\n          [inst_2 : (i : ι) → Module R (s i)] → MultilinearMap R s (⨂[R] (i : ι), s i)","name":"PiTensorProduct.tprod","isProp":false,"doc":"The canonical `MultilinearMap R s (⨂[R] i, s i)`. ","depth":18},{"type":"{ι : Type u_1} →\n  {R : Type u_4} →\n    [inst : CommSemiring R] →\n      {s : ι → Type u_7} →\n        [inst_1 : (i : ι) → AddCommMonoid (s i)] →\n          [inst_2 : (i : ι) → Module R (s i)] →\n            {E : Type u_9} →\n              [inst_3 : AddCommMonoid E] → [inst_4 : Module R E] → MultilinearMap R s E → (⨂[R] (i : ι), s i) →+ E","name":"PiTensorProduct.liftAux","isProp":false,"doc":"Auxiliary function to constructing a linear map `(⨂[R] i, s i) → E` given a\n`MultilinearMap R s E` with the property that its composition with the canonical\n`MultilinearMap R s (⨂[R] i, s i)` is the given multilinear map. ","depth":21}],"count":50}
{"noDocExamples":[],"kind":"«term_→*₀o_»","examples":[{"type":"(α : Type u_2) → [inst : Preorder α] → [inst_1 : MulZeroOneClass α] → α →*₀o α","name":"OrderMonoidWithZeroHom.id","isProp":false,"doc":"The identity map as an ordered monoid with zero homomorphism. ","depth":9},{"type":"{α : Type u_2} →\n  {β : Type u_3} →\n    [inst : NonAssocSemiring α] →\n      [inst_1 : Preorder α] → [inst_2 : NonAssocSemiring β] → [inst_3 : Preorder β] → α →+*o β → α →*₀o β","name":"OrderRingHom.toOrderMonoidWithZeroHom","isProp":false,"doc":"Reinterpret an ordered ring homomorphism as an order homomorphism. ","depth":13},{"type":"{α : Type u_2} →\n  {β : Type u_3} →\n    [inst : Preorder α] →\n      [inst_1 : Preorder β] → [inst_2 : MulZeroOneClass α] → [inst_3 : MulZeroOneClass β] → (α →*₀o β) → α →*o β","name":"OrderMonoidWithZeroHom.toOrderMonoidHom","isProp":false,"doc":"Reinterpret an ordered monoid with zero homomorphism as an order monoid homomorphism. ","depth":13}],"count":49}
{"noDocExamples":[],"kind":"«termΩ[_⁄_]»","examples":[{"type":"(R : Type u) → (S : Type v) → [inst : CommRing R] → [inst_1 : CommRing S] → [inst_2 : Algebra R S] → S →ₗ[R] Ω[S⁄R]","name":"KaehlerDifferential.DLinearMap","isProp":false,"doc":"(Implementation) The underlying linear map of the derivation into `Ω[S⁄R]`. ","depth":17},{"type":"(R : Type u) →\n  (S : Type v) → [inst : CommRing R] → [inst_1 : CommRing S] → [inst_2 : Algebra R S] → Derivation R S (Ω[S⁄R])","name":"KaehlerDifferential.D","isProp":false,"doc":"The universal derivation into `Ω[S⁄R]`. ","depth":17},{"type":"{R : Type u} →\n  {S : Type v} →\n    [inst : CommRing R] →\n      [inst_1 : CommRing S] →\n        [inst_2 : Algebra R S] →\n          {M : Type u_1} →\n            [inst_3 : AddCommGroup M] →\n              [inst_4 : Module R M] →\n                [inst_5 : Module S M] → [inst_6 : IsScalarTower R S M] → Derivation R S M → Ω[S⁄R] →ₗ[S] M","name":"Derivation.liftKaehlerDifferential","isProp":false,"doc":"The linear map from `Ω[S⁄R]`, associated with a derivation. ","depth":23}],"count":48}
{"noDocExamples":[],"kind":"«term_→+o_»","examples":[{"type":"Surreal →+o SetTheory.Game","name":"Surreal.toGame","isProp":false,"doc":"Casts a `Surreal` number into a `Game`. ","depth":7},{"type":"(α : Type u_2) → [inst : Preorder α] → [inst_1 : AddZeroClass α] → α →+o α","name":"OrderAddMonoidHom.id","isProp":false,"doc":"The identity map as an ordered additive monoid homomorphism.","depth":9},{"type":"{α : Type u_2} → {β : Type u_3} → [inst : OrderedAddCommMonoid α] → [inst_1 : OrderedAddCommMonoid β] → Add (α →+o β)","name":"OrderAddMonoidHom.instAddOrderAddMonoidHomToPreorderToPartialOrderToPreorderToPartialOrderToAddZeroClassToAddMonoidToAddCommMonoidToAddZeroClassToAddMonoidToAddCommMonoid","isProp":false,"doc":"For two ordered additive monoid morphisms `f` and `g`, their product is the ordered\nadditive monoid morphism sending `a` to `f a + g a`.","depth":12}],"count":48}
{"noDocExamples":[],"kind":"«term_→*o_»","examples":[{"type":"(α : Type u_2) → [inst : Preorder α] → [inst_1 : MulOneClass α] → α →*o α","name":"OrderMonoidHom.id","isProp":false,"doc":"The identity map as an ordered monoid homomorphism. ","depth":9},{"type":"{α : Type u_2} → {β : Type u_3} → [inst : OrderedCommMonoid α] → [inst_1 : OrderedCommMonoid β] → Mul (α →*o β)","name":"OrderMonoidHom.instMulOrderMonoidHomToPreorderToPartialOrderToPreorderToPartialOrderToMulOneClassToMonoidToCommMonoidToMulOneClassToMonoidToCommMonoid","isProp":false,"doc":"For two ordered monoid morphisms `f` and `g`, their product is the ordered monoid morphism\nsending `a` to `f a * g a`. ","depth":12},{"type":"{α : Type u_2} →\n  {β : Type u_3} →\n    [inst : Preorder α] →\n      [inst_1 : Preorder β] → [inst_2 : MulOneClass α] → [inst_3 : MulOneClass β] → (α →*o β) → α →o β","name":"OrderMonoidHom.toOrderHom","isProp":false,"doc":"Reinterpret an ordered monoid homomorphism as an order homomorphism. ","depth":13}],"count":48}
{"noDocExamples":[],"kind":"Lean.Parser.Term.quotedName","examples":[{"type":"CongrState → List (Lean.TSyntax `rcasesPat)","name":"CongrState.patterns","isProp":false,"doc":"Patterns to use when doing intro. ","depth":6},{"type":"CongrMetaM (Option (Lean.TSyntax `rcasesPat))","name":"CongrMetaM.nextPattern","isProp":false,"doc":"Pop the next pattern from the current state. ","depth":6},{"type":"Lean.TSyntaxArray `Lean.Parser.Term.bracketedBinder → Lean.TSyntaxArray `Lean.Parser.Term.bracketedBinder","name":"Mathlib.Command.Variable.cleanBinders","isProp":false,"doc":"Strip off whitespace and comments. ","depth":8}],"count":47}
{"noDocExamples":[{"type":"∀ (b : Bool), (true && b) = b","name":"Bool.true_and","isProp":true,"depth":5},{"type":"∀ (b : Bool), (false && b) = false","name":"Bool.false_and","isProp":true,"depth":5},{"type":"∀ (b : Bool), (b && false) = false","name":"Bool.and_false","isProp":true,"depth":5}],"kind":"«term_&&_»","examples":[],"count":46}
{"noDocExamples":[],"kind":"«term_≃⋆ₐ[_]_»","examples":[{"type":"{R : Type u_2} →\n  {A : Type u_3} → [inst : Add A] → [inst_1 : Mul A] → [inst_2 : SMul R A] → [inst_3 : Star A] → A ≃⋆ₐ[R] A","name":"StarAlgEquiv.refl","isProp":false,"doc":"Star algebra equivalences are reflexive. ","depth":17},{"type":"{R : Type u_2} →\n  {A : Type u_3} →\n    {B : Type u_4} →\n      [inst : Add A] →\n        [inst_1 : Add B] →\n          [inst_2 : Mul A] →\n            [inst_3 : Mul B] →\n              [inst_4 : SMul R A] → [inst_5 : SMul R B] → [inst_6 : Star A] → [inst_7 : Star B] → (A ≃⋆ₐ[R] B) → B → A","name":"StarAlgEquiv.Simps.symm_apply","isProp":false,"doc":"See Note [custom simps projection] ","depth":23},{"type":"{R : Type u_1} →\n  {A : Type u_2} →\n    {B : Type u_3} →\n      [inst : Add A] →\n        [inst_1 : Add B] →\n          [inst_2 : Mul A] →\n            [inst_3 : Mul B] →\n              [inst_4 : SMul R A] → [inst_5 : SMul R B] → [inst_6 : Star A] → [inst_7 : Star B] → (A ≃⋆ₐ[R] B) → A ≃+* B","name":"StarAlgEquiv.toRingEquiv","isProp":false,"doc":"Reinterpret a star algebra equivalence as a `RingEquiv` by forgetting the interaction with\nthe star operation and scalar multiplication. ","depth":23}],"count":46}
{"noDocExamples":[],"kind":"List.«term_<+:_»","examples":[{"type":"∀ {α : Type u_1} {l : List α}, l <+: [] → l = []","name":"List.eq_nil_of_prefix_nil","isProp":true,"doc":"**Alias** of the forward direction of `List.prefix_nil`.","depth":7},{"type":"∀ {α : Type u_1} {l₁ l₂ : List α}, l₁ <:+ l₂ → List.reverse l₁ <+: List.reverse l₂","name":"List.isSuffix.reverse","isProp":true,"doc":"**Alias** of the reverse direction of `List.reverse_prefix`.","depth":8},{"type":"∀ {α : Type u_1} {l₁ l₂ : List α}, l₁ <+: l₂ → List.reverse l₁ <:+ List.reverse l₂","name":"List.isPrefix.reverse","isProp":true,"doc":"**Alias** of the reverse direction of `List.reverse_suffix`.","depth":8}],"count":45}
{"noDocExamples":[],"kind":"«term_⁻¹'o_»","examples":[{"type":"{α : Type u_1} → {β : Type u_2} → (f : α → β) → (s : β → β → Prop) → f ⁻¹'o s →r s","name":"RelHom.preimage","isProp":false,"doc":"A function is a relation homomorphism from the preimage relation of `s` to `s`. ","depth":10},{"type":"{α : Sort u_3} → {β : Sort u_4} → (f : α → β) → (s : β → β → Prop) → [H : DecidableRel s] → DecidableRel (f ⁻¹'o s)","name":"Order.Preimage.decidable","isProp":false,"doc":"The preimage of a decidable order is decidable. ","depth":10},{"type":"{X : Type u_5} → (r : X → X → Prop) → (p : X → Prop) → Subtype.val ⁻¹'o r ↪r r","name":"Subtype.relEmbedding","isProp":false,"doc":"The induced relation on a subtype is an embedding under the natural inclusion. ","depth":11}],"count":45}
{"noDocExamples":[],"kind":"«term_≃+*o_»","examples":[{"type":"(α : Type u_2) → [inst : Mul α] → [inst_1 : Add α] → [inst_2 : LE α] → α ≃+*o α","name":"OrderRingIso.refl","isProp":false,"doc":"The identity map as an ordered ring isomorphism. ","depth":12},{"type":"{α : Type u_2} →\n  {β : Type u_3} →\n    [inst : NonAssocSemiring α] →\n      [inst_1 : Preorder α] → [inst_2 : NonAssocSemiring β] → [inst_3 : Preorder β] → α ≃+*o β → α →+*o β","name":"OrderRingIso.toOrderRingHom","isProp":false,"doc":"Reinterpret an ordered ring isomorphism as an ordered ring homomorphism. ","depth":16},{"type":"{α : Type u_2} →\n  {β : Type u_3} →\n    [inst : Mul α] →\n      [inst_1 : Add α] → [inst_2 : LE α] → [inst_3 : Mul β] → [inst_4 : Add β] → [inst_5 : LE β] → α ≃+*o β → β → α","name":"OrderRingIso.Simps.symm_apply","isProp":false,"doc":"See Note [custom simps projection] ","depth":17}],"count":44}
{"noDocExamples":[],"kind":"«term_→ᵈ_»","examples":[{"type":"(α : Type u_6) → [inst : PseudoEMetricSpace α] → α →ᵈ α","name":"Dilation.id","isProp":false,"doc":"The identity is a dilation ","depth":6},{"type":"{α : Type u_1} → [inst : PseudoEMetricSpace α] → (α →ᵈ α) →* NNReal","name":"Dilation.ratioHom","isProp":false,"doc":"`Dilation.ratio` as a monoid homomorphism from `α →ᵈ α` to `ℝ≥0`. ","depth":10},{"type":"{α : Type u_1} →\n  {β : Type u_2} →\n    {γ : Type u_3} →\n      [inst : PseudoEMetricSpace α] →\n        [inst_1 : PseudoEMetricSpace β] → [inst_2 : PseudoEMetricSpace γ] → β →ᵈ γ → α →ᵈ β → α →ᵈ γ","name":"Dilation.comp","isProp":false,"doc":"The composition of dilations is a dilation ","depth":12}],"count":44}
{"noDocExamples":[],"kind":"Sigma.Lex.«termΣₗ_,_»","examples":[{"type":"{ι : Type u_1} → {α : ι → Type u_2} → [inst : LT ι] → [inst : (i : ι) → LT (α i)] → LT (Σₗ (i : ι), α i)","name":"Sigma.Lex.LT","isProp":false,"doc":"The lexicographical `<` on a sigma type. ","depth":9},{"type":"{ι : Type u_1} →\n  {α : ι → Type u_2} → [inst : Preorder ι] → [inst : (i : ι) → Preorder (α i)] → Preorder (Σₗ (i : ι), α i)","name":"Sigma.Lex.preorder","isProp":false,"doc":"The lexicographical preorder on a sigma type. ","depth":9},{"type":"{ι : Type u_1} →\n  {α : ι → Type u_2} → [inst : Preorder ι] → [inst : (i : ι) → PartialOrder (α i)] → PartialOrder (Σₗ (i : ι), α i)","name":"Sigma.Lex.partialOrder","isProp":false,"doc":"The lexicographical partial order on a sigma type. ","depth":9}],"count":42}
{"noDocExamples":[],"kind":"«term_⁺»","examples":[{"type":"∀ {α : Type u} [inst : Lattice α] [inst_1 : Group α] (a : α), 1 ≤ a → a⁺ = a","name":"LatticeOrderedGroup.pos_of_one_le","isProp":true,"doc":"If `a` is positive, then it is equal to its positive component `a⁺`. ","depth":14},{"type":"∀ {α : Type u} [inst : Lattice α] [inst_1 : AddGroup α] (a : α), 0 ≤ a → a⁺ = a","name":"LatticeOrderedGroup.pos_of_nonneg","isProp":true,"doc":"If `a` is positive, then it is equal to its positive component `a⁺`.","depth":14},{"type":"∀ {Ω : Type u_1} {m0 : MeasurableSpace Ω} {μ : MeasureTheory.Measure Ω} {f : ℕ → Ω → ℝ}\n  {ℱ : MeasureTheory.Filtration ℕ m0} [inst : MeasureTheory.IsFiniteMeasure μ] (a b : ℝ),\n  MeasureTheory.Submartingale f ℱ μ →\n    ENNReal.ofReal (b - a) * ∫⁻ (ω : Ω), MeasureTheory.upcrossings a b f ω ∂μ ≤\n      ⨆ (N : ℕ), ∫⁻ (ω : Ω), ENNReal.ofReal (f N ω - a)⁺ ∂μ","name":"MeasureTheory.Submartingale.mul_lintegral_upcrossings_le_lintegral_pos_part","isProp":true,"doc":"A variant of Doob's upcrossing estimate obtained by taking the supremum on both sides. ","depth":24}],"count":42}
{"noDocExamples":[],"kind":"MeasureTheory.«term∫_,_»","examples":[{"type":"∀ {b : ℂ}, 0 < b.re → (∫ (x : ℝ), cexp (-b * ↑x ^ 2)) ^ 2 = ↑Real.pi / b","name":"integral_gaussian_sq_complex","isProp":true,"doc":"The *square* of the Gaussian integral `∫ x:ℝ, exp (-b * x^2)` is equal to `π / b`. ","depth":18},{"type":"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] (t : ℝ) (f : UnitAddCircle → E),\n  ∫ (a : ℝ) in Set.Ioc t (t + 1), f ↑a = ∫ (b : UnitAddCircle), f b","name":"UnitAddCircle.integral_preimage","isProp":true,"doc":"The integral of an almost-everywhere strongly measurable function over `UnitAddCircle` is\nequal to the integral over an interval (t, t + 1] in `ℝ` of its lift to `ℝ`. ","depth":18},{"type":"∀ {Ω : Type u_1} [inst : MeasureTheory.MeasureSpace Ω]\n  [inst_1 : MeasureTheory.IsProbabilityMeasure MeasureTheory.volume] (X : ℕ → Ω → ℝ),\n  MeasureTheory.Integrable (X 0) →\n    (∀ (i : ℕ), ProbabilityTheory.IdentDistrib (X i) (X 0)) →\n      (fun n =>\n          (∫ (a : Ω), Finset.sum (Finset.range n) (fun i => ProbabilityTheory.truncation (X i) ↑i) a) -\n            ↑n * ∫ (a : Ω), X 0 a) =o[Filter.atTop]\n        Nat.cast","name":"ProbabilityTheory.strong_law_aux3","isProp":true,"doc":"The expectation of the truncated version of `Xᵢ` behaves asymptotically like the whole\nexpectation. This follows from convergence and Cesàro averaging. ","depth":20}],"count":42}
{"noDocExamples":[{"type":"∀ (x : ℕ) (r : ℝ), Metric.closedBall x r = Set.Icc ⌈↑x - r⌉₊ ⌊↑x + r⌋₊","name":"Nat.closedBall_eq_Icc","isProp":true,"depth":12},{"type":"∀ {α : Type u_2} [inst : LinearOrderedSemiring α] [inst_1 : FloorSemiring α], ⌈1⌉₊ = 1","name":"Nat.ceil_one","isProp":true,"depth":12}],"kind":"Nat.«term⌈_⌉₊»","examples":[{"type":"∀ {Fq : Type u_1} [inst : Fintype Fq] [inst_1 : Field Fq] {b : Polynomial Fq},\n  b ≠ 0 →\n    ∀ {ε : ℝ},\n      0 < ε →\n        ∀ (A : Fin (Nat.succ (Fintype.card Fq ^ ⌈-Real.log ε / Real.log ↑(Fintype.card Fq)⌉₊)) → Polynomial Fq),\n          ∃ i₀ i₁, i₀ ≠ i₁ ∧ ↑(↑Polynomial.cardPowDegree (A i₁ % b - A i₀ % b)) < ↑Polynomial.cardPowDegree b • ε","name":"Polynomial.exists_approx_polynomial","isProp":true,"doc":"If `A` is a family of enough low-degree polynomials over a finite field,\nthere is a pair of elements in `A` (with different indices but not necessarily\ndistinct), such that the difference of their remainders is close together. ","depth":35}],"count":42}
{"noDocExamples":[],"kind":"«term∮_InC(_,_),_»","examples":[{"type":"∀ {c w : ℂ} {R : ℝ}, w ∈ Metric.ball c R → (∮ (z : ℂ) in C(c, R), (z - w)⁻¹) = 2 * ↑Real.pi * Complex.I","name":"circleIntegral.integral_sub_inv_of_mem_ball","isProp":true,"doc":"Integral $\\oint_{|z-c|=R} \\frac{dz}{z-w} = 2πi$ whenever $|w-c| < R$. ","depth":17},{"type":"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] (f : (Fin 1 → ℂ) → E) (c : Fin 1 → ℂ)\n  (R : Fin 1 → ℝ), (∯ (x : Fin 1 → ℂ) in T(c, R), f x) = ∮ (z : ℂ) in C(c 0, R 0), f fun x => z","name":"torusIntegral_dim1","isProp":true,"doc":"In dimension one, `torusIntegral` is the same as `circleIntegral`\n(up to the natural equivalence between `ℂ` and `Fin 1 → ℂ`). ","depth":18},{"type":"∀ {n : ℤ}, n ≠ -1 → ∀ (c w : ℂ) (R : ℝ), (∮ (z : ℂ) in C(c, R), (z - w) ^ n) = 0","name":"circleIntegral.integral_sub_zpow_of_ne","isProp":true,"doc":"If `n ≠ -1` is an integer number, then the integral of `(z - w) ^ n` over the circle equals\nzero. ","depth":20}],"count":42}
{"noDocExamples":[],"kind":"«MulSemiringActionHomLocal≺»","examples":[{"type":"(M : Type u_5) →\n  [inst : Monoid M] → {R : Type u_11} → [inst_1 : Semiring R] → [inst_2 : MulSemiringAction M R] → R →+*[M] R","name":"MulSemiringActionHom.id","isProp":false,"doc":"The identity map as an equivariant ring homomorphism. ","depth":13},{"type":"{M : Type u_5} →\n  [inst : Monoid M] →\n    {R : Type u_11} →\n      [inst_1 : Semiring R] →\n        [inst_2 : MulSemiringAction M R] →\n          {S : Type u_13} → [inst_3 : Semiring S] → [inst_4 : MulSemiringAction M S] → (R →+*[M] S) → R →+* S","name":"MulSemiringActionHom.toRingHom","isProp":false,"doc":"Reinterpret an equivariant ring homomorphism as a ring homomorphism. ","depth":17},{"type":"{M : Type u_1} →\n  [inst : Monoid M] →\n    {P : Type u_2} →\n      [inst_1 : CommSemiring P] →\n        [inst_2 : MulSemiringAction M P] →\n          {Q : Type u_3} →\n            [inst_3 : CommSemiring Q] →\n              [inst_4 : MulSemiringAction M Q] → (P →+*[M] Q) → Polynomial P →+*[M] Polynomial Q","name":"MulSemiringActionHom.polynomial","isProp":false,"doc":"An equivariant map induces an equivariant map on polynomials. ","depth":18}],"count":41}
{"noDocExamples":[],"kind":"PSigma.«termΣₗ'_,_»","examples":[{"type":"{ι : Type u_1} →\n  {α : ι → Type u_2} → [inst : LinearOrder ι] → [inst : (i : ι) → LinearOrder (α i)] → LinearOrder (Σₗ' (i : ι), α i)","name":"PSigma.Lex.linearOrder","isProp":false,"doc":"Dictionary / lexicographic linear_order for pairs. ","depth":9},{"type":"{ι : Type u_1} →\n  {α : ι → Type u_2} → [inst : PartialOrder ι] → [inst : (i : ι) → PartialOrder (α i)] → PartialOrder (Σₗ' (i : ι), α i)","name":"PSigma.Lex.partialOrder","isProp":false,"doc":"Dictionary / lexicographic partial_order for dependent pairs. ","depth":9},{"type":"{ι : Type u_1} → {α : ι → Type u_2} → [inst : LT ι] → [inst : (i : ι) → LT (α i)] → LT (Σₗ' (i : ι), α i)","name":"PSigma.Lex.lt","isProp":false,"doc":"The lexicographical `<` on a sigma type. ","depth":9}],"count":41}
{"noDocExamples":[],"kind":"«term_⋊[_]_»","examples":[{"type":"{N : Type u_1} → {G : Type u_2} → [inst : Group N] → [inst_1 : Group G] → {φ : G →* MulAut N} → N ⋊[φ] G → N","name":"SemidirectProduct.left","isProp":false,"doc":"The element of N ","depth":16},{"type":"{N : Type u_1} → {G : Type u_2} → [inst : Group N] → [inst_1 : Group G] → {φ : G →* MulAut N} → N →* N ⋊[φ] G","name":"SemidirectProduct.inl","isProp":false,"doc":"The canonical map `N →* N ⋊[φ] G` sending `n` to `⟨n, 1⟩` ","depth":16},{"type":"{N : Type u_1} → {G : Type u_2} → [inst : Group N] → [inst_1 : Group G] → {φ : G →* MulAut N} → N ⋊[φ] G → G","name":"SemidirectProduct.right","isProp":false,"doc":"The element of G ","depth":16}],"count":41}
{"noDocExamples":[],"kind":"List.«term_<:+_»","examples":[{"type":"∀ {α : Type u_1} {l : List α}, l <:+ [] → l = []","name":"List.eq_nil_of_suffix_nil","isProp":true,"doc":"**Alias** of the forward direction of `List.suffix_nil`.","depth":7},{"type":"∀ {α : Type u_1} {l₁ l₂ : List α}, l₁ <:+ l₂ → List.reverse l₁ <+: List.reverse l₂","name":"List.isSuffix.reverse","isProp":true,"doc":"**Alias** of the reverse direction of `List.reverse_prefix`.","depth":8},{"type":"∀ {α : Type u_1} {l₁ l₂ : List α}, l₁ <+: l₂ → List.reverse l₁ <:+ List.reverse l₂","name":"List.isPrefix.reverse","isProp":true,"doc":"**Alias** of the reverse direction of `List.reverse_suffix`.","depth":8}],"count":40}
{"noDocExamples":[],"kind":"OreLocalization.«term_/ₒ_»","examples":[{"type":"∀ {R : Type u_1} [inst : Monoid R] {S : Submonoid R} [inst_1 : OreLocalization.OreSet S] {r r' r₁ r₂ : R}\n  {s t : { x // x ∈ S }}, r * ↑t = r' * ↑t → r₁ * r * r₂ /ₒ s = r₁ * r' * r₂ /ₒ s","name":"OreLocalization.eq_of_num_factor_eq","isProp":true,"doc":"Fractions which differ by a factor of the numerator can be proven equal if\nthose factors expand to equal elements of `R`. ","depth":25},{"type":"∀ {R : Type u_1} [inst : Monoid R] {S : Submonoid R} [inst_1 : OreLocalization.OreSet S] (r : R) (s : { x // x ∈ S })\n  (t : R) (hst : ↑s * t ∈ S), r /ₒ s = r * t /ₒ { val := ↑s * t, property := hst }","name":"OreLocalization.expand","isProp":true,"doc":"A fraction `r /ₒ s` is equal to its expansion by an arbitrary factor `t` if `s * t ∈ S`. ","depth":25},{"type":"∀ {R : Type u_1} [inst : Monoid R] {S : Submonoid R} [inst_1 : OreLocalization.OreSet S] (r : R)\n  (s s' : { x // x ∈ S }), r /ₒ s = r * ↑s' /ₒ (s * s')","name":"OreLocalization.expand'","isProp":true,"doc":"A fraction is equal to its expansion by a factor from s. ","depth":26}],"count":38}
{"noDocExamples":[{"type":"∀ {α : Type u} [inst : Lattice α] [inst_1 : AddGroup α] (a : α), -a ≤ a⁻","name":"LatticeOrderedGroup.neg_le_neg","isProp":true,"depth":13},{"type":"∀ {α : Type u} [inst : Lattice α] [inst_1 : AddGroup α], 0⁻ = 0","name":"LatticeOrderedGroup.neg_zero","isProp":true,"depth":13},{"type":"∀ {α : Type u} [inst : Lattice α] [inst_1 : AddGroup α] (a : α), 0 ≤ a⁻","name":"LatticeOrderedGroup.neg_nonneg","isProp":true,"depth":13}],"kind":"«term_⁻»","examples":[],"count":38}
{"noDocExamples":[],"kind":"List.«term_<+~_»","examples":[{"type":"∀ {α : Type uu} (a : α) {l₁ l₂ : List α}, l₁ <+~ l₂ → a :: l₁ <+~ a :: l₂","name":"List.subperm.cons","isProp":true,"doc":"**Alias** of the reverse direction of `List.subperm_cons`.","depth":10},{"type":"∀ {α : Type uu} (a : α) {l₁ l₂ : List α}, a :: l₁ <+~ a :: l₂ → l₁ <+~ l₂","name":"List.subperm.of_cons","isProp":true,"doc":"**Alias** of the forward direction of `List.subperm_cons`.","depth":10},{"type":"∀ {α : Type uu} [inst : DecidableEq α] {l₁ l₂ : List α},\n  l₁ <+~ l₂ ↔ ∀ (x : α), x ∈ l₁ → List.count x l₁ ≤ List.count x l₂","name":"List.subperm_ext_iff","isProp":true,"doc":"The list version of `Multiset.le_iff_count`. ","depth":17}],"count":38}
{"noDocExamples":[],"kind":"MeasureTheory.«term∫_In_,_»","examples":[{"type":"∀ {s : ℂ},\n  0 < s.re → HasDerivAt Complex.GammaIntegral (∫ (t : ℝ) in Set.Ioi 0, ↑t ^ (s - 1) * (↑(Real.log t) * ↑(rexp (-t)))) s","name":"Complex.hasDerivAt_GammaIntegral","isProp":true,"doc":"The derivative of the `Γ` integral, at any `s ∈ ℂ` with `1 < re s`, is given by the Melllin\ntransform of `log t * exp (-t)`. ","depth":15},{"type":"∀ {a b : ℝ} (n : ℕ), ∫ (x : ℝ) in Ι a b, |x - a| ^ n = |b - a| ^ (n + 1) / (↑n + 1)","name":"integral_pow_abs_sub_uIoc","isProp":true,"doc":"Integral of `|x - a| ^ n` over `Ι a b`. This integral appears in the proof of the\nPicard-Lindelöf/Cauchy-Lipschitz theorem. ","depth":16},{"type":"∀ {g g' : ℝ → ℝ} {a l : ℝ},\n  (∀ (x : ℝ), x ∈ Set.Ici a → HasDerivAt g (g' x) x) →\n    (∀ (x : ℝ), x ∈ Set.Ioi a → 0 ≤ g' x) →\n      Filter.Tendsto g Filter.atTop (nhds l) → ∫ (x : ℝ) in Set.Ioi a, g' x = l - g a","name":"MeasureTheory.integral_Ioi_of_hasDerivAt_of_nonneg'","isProp":true,"doc":"When a function has a limit at infinity `l`, and its derivative is nonnegative, then the\nintegral of the derivative on `(a, +∞)` is `l - g a` (and the derivative is integrable, see\n`integrable_on_Ioi_deriv_of_nonneg'`). Version assuming differentiability on `[a, +∞)`. ","depth":18}],"count":38}
{"noDocExamples":[],"kind":"«term_≃ₗ⁅_,_⁆_»","examples":[{"type":"{R : Type u} →\n  {L : Type v} →\n    {M : Type w} →\n      [inst : CommRing R] →\n        [inst_1 : LieRing L] →\n          [inst_2 : AddCommGroup M] → [inst_3 : Module R M] → [inst_4 : LieRingModule L M] → M ≃ₗ⁅R,L⁆ M","name":"LieModuleEquiv.refl","isProp":false,"doc":"Lie module equivalences are reflexive. ","depth":20},{"type":"{R : Type u} →\n  {L : Type v} →\n    {M : Type w} →\n      {N : Type w₁} →\n        [inst : CommRing R] →\n          [inst_1 : LieRing L] →\n            [inst_2 : AddCommGroup M] →\n              [inst_3 : AddCommGroup N] →\n                [inst_4 : Module R M] →\n                  [inst_5 : Module R N] →\n                    [inst_6 : LieRingModule L M] → [inst_7 : LieRingModule L N] → (M ≃ₗ⁅R,L⁆ N) → N ≃ₗ⁅R,L⁆ M","name":"LieModuleEquiv.symm","isProp":false,"doc":"Lie module equivalences are symmetric. ","depth":25},{"type":"{R : Type u} →\n  {L : Type v} →\n    {M : Type w} →\n      {N : Type w₁} →\n        [inst : CommRing R] →\n          [inst_1 : LieRing L] →\n            [inst_2 : AddCommGroup M] →\n              [inst_3 : AddCommGroup N] →\n                [inst_4 : Module R M] →\n                  [inst_5 : Module R N] →\n                    [inst_6 : LieRingModule L M] → [inst_7 : LieRingModule L N] → (M ≃ₗ⁅R,L⁆ N) → M ≃ N","name":"LieModuleEquiv.toEquiv","isProp":false,"doc":"View an equivalence of Lie modules as a type level equivalence. ","depth":25}],"count":37}
{"noDocExamples":[],"kind":"«MulActionHomLocal≺»","examples":[{"type":"(M' : Type u_1) → {X : Type u_2} → [inst : SMul M' X] → X →[M'] X","name":"MulActionHom.id","isProp":false,"doc":"The identity map as an equivariant map. ","depth":8},{"type":"{M' : Type u_1} → {X : Type u_2} → [inst : SMul M' X] → {Y : Type u_3} → [inst_1 : SMul M' Y] → (X →[M'] Y) → X → Y","name":"MulActionHom.toFun","isProp":false,"doc":"The underlying function. ","depth":11},{"type":"{M : Type u_18} →\n  (N : Type u_16) →\n    (α : Type u_17) → [inst : SMul M α] → [inst_1 : SMul N α] → [inst : SMulCommClass M N α] → M → α →[N] α","name":"SMulCommClass.toMulActionHom","isProp":false,"doc":"If actions of `M` and `N` on `α` commute, then for `c : M`, `(c • · : α → α)` is an `N`-action\nhomomorphism. ","depth":12}],"count":37}
{"noDocExamples":[{"type":"∀ (b : Bool), (b || false) = b","name":"Bool.or_false","isProp":true,"depth":5},{"type":"∀ (x : Bool), (x || !x) = true","name":"Bool.or_not_self","isProp":true,"depth":5},{"type":"∀ (b : Bool), (b || true) = true","name":"Bool.or_true","isProp":true,"depth":5}],"kind":"«term_||_»","examples":[],"count":36}
{"noDocExamples":[],"kind":"Submodule.«term_⟂_»","examples":[{"type":"∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  {U V : Submodule 𝕜 E}, U ⟂ V → Disjoint U V","name":"Submodule.IsOrtho.disjoint","isProp":true,"doc":"Orthogonal submodules are disjoint. ","depth":25},{"type":"∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]\n  [inst_3 : NormedAddTorsor V P] {n : ℕ} (s : Affine.Simplex ℝ P (n + 1)) (i : Fin (n + 2)),\n  vectorSpan ℝ (s.points '' ↑(Finset.erase Finset.univ i)) ⟂ AffineSubspace.direction (Affine.Simplex.altitude s i)","name":"Affine.Simplex.vectorSpan_isOrtho_altitude_direction","isProp":true,"doc":"The vector span of the opposite face lies in the direction\northogonal to an altitude. ","depth":28},{"type":"∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  {ι : Type u_4} {V : ι → Submodule 𝕜 E},\n  (OrthogonalFamily 𝕜 (fun i => { x // x ∈ V i }) fun i => Submodule.subtypeₗᵢ (V i)) →\n    Pairwise ((fun x x_1 => x ⟂ x_1) on V)","name":"OrthogonalFamily.pairwise","isProp":true,"doc":"**Alias** of the forward direction of `orthogonalFamily_iff_pairwise`.","depth":31}],"count":36}
{"noDocExamples":[{"type":"∀ {α : Type u} (l : List α), l ~r l","name":"List.IsRotated.refl","isProp":true,"depth":5},{"type":"∀ {α : Type u} {l : List α}, [] ~r l ↔ [] = l","name":"List.isRotated_nil_iff'","isProp":true,"depth":7},{"type":"∀ {α : Type u} {l l' : List α}, l ~r l' → l ~ l'","name":"List.IsRotated.perm","isProp":true,"depth":7}],"kind":"List.«term_~r_»","examples":[],"count":36}
{"noDocExamples":[],"kind":"MeasureTheory.«term⨍_,_∂_»","examples":[{"type":"∀ {α : Type u_1} {m0 : MeasurableSpace α} {μ : MeasureTheory.Measure α} {f : α → ℝ}\n  [inst : MeasureTheory.IsFiniteMeasure μ], μ ≠ 0 → MeasureTheory.Integrable f → ∃ x, f x ≤ ⨍ (a : α), f a ∂μ","name":"MeasureTheory.exists_le_average","isProp":true,"doc":"**First moment method**. The minimum of an integrable function is smaller than its mean. ","depth":17},{"type":"∀ {α : Type u_1} {m0 : MeasurableSpace α} {μ : MeasureTheory.Measure α} {f : α → ℝ}\n  [inst : MeasureTheory.IsFiniteMeasure μ], μ ≠ 0 → MeasureTheory.Integrable f → ∃ x, ⨍ (a : α), f a ∂μ ≤ f x","name":"MeasureTheory.exists_average_le","isProp":true,"doc":"**First moment method**. The maximum of an integrable function is greater than its mean. ","depth":18},{"type":"∀ {α : Type u_1} {m0 : MeasurableSpace α} {μ : MeasureTheory.Measure α} {f : α → ℝ}\n  [inst : MeasureTheory.IsFiniteMeasure μ], μ ≠ 0 → MeasureTheory.Integrable f → 0 < ↑↑μ {x | f x ≤ ⨍ (a : α), f a ∂μ}","name":"MeasureTheory.measure_le_average_pos","isProp":true,"doc":"**First moment method**. An integrable function is smaller than its mean on a set of positive\nmeasure. ","depth":19}],"count":35}
{"noDocExamples":[],"kind":"«term_→Co_»","examples":[{"type":"(α : Type u_2) → [inst : TopologicalSpace α] → [inst_1 : Preorder α] → α →Co α","name":"ContinuousOrderHom.id","isProp":false,"doc":"`id` as a `ContinuousOrderHom`. ","depth":9},{"type":"{α : Type u_2} →\n  {β : Type u_3} →\n    [inst : TopologicalSpace α] →\n      [inst_1 : Preorder α] → [inst_2 : TopologicalSpace β] → [inst_3 : Preorder β] → (α →Co β) → C(α, β)","name":"ContinuousOrderHom.toContinuousMap","isProp":false,"doc":"Reinterpret a `ContinuousOrderHom` as a `ContinuousMap`. ","depth":13},{"type":"{F : Type u_1} →\n  {α : Type u_2} →\n    {β : Type u_3} →\n      [inst : Preorder α] →\n        [inst_1 : Preorder β] →\n          [inst_2 : TopologicalSpace α] →\n            [inst_3 : TopologicalSpace β] → [inst_4 : ContinuousOrderHomClass F α β] → F → α →Co β","name":"ContinuousOrderHomClass.toContinuousOrderHom","isProp":false,"doc":"Turn an element of a type `F` satisfying `ContinuousOrderHomClass F α β` into an actual\n`ContinuousOrderHom`. This is declared as the default coercion from `F` to `α →Co β`. ","depth":15}],"count":35}
{"noDocExamples":[],"kind":"«term_⊕'_»","examples":[{"type":"(α : Type u_4) → Fintype α ⊕' Infinite α","name":"fintypeOrInfinite","isProp":false,"doc":"Any type is (classically) either a `Fintype`, or `Infinite`.\n\nOne can obtain the relevant typeclasses via `cases fintypeOrInfinite α`.\n","depth":4},{"type":"{α : Sort u} → {β : Sort v} → α → α ⊕' β","name":"PSum.inl","isProp":false,"doc":"Left injection into the sum type `α ⊕' β`. If `a : α` then `.inl a : α ⊕' β`. ","depth":5},{"type":"(α : Type u_3) → [inst : Inhabited α] → Nontrivial α ⊕' Unique α","name":"nontrivialPSumUnique","isProp":false,"doc":"An inhabited type is either nontrivial, or has a unique element. ","depth":5}],"count":35}
{"noDocExamples":[],"kind":"TypeVec.«term_:::__1»","examples":[{"type":"(n : ℕ) →\n  {β : (v : TypeVec (n + 1)) → (v' : TypeVec (n + 1)) → TypeVec.Arrow v v' → Sort u_1} →\n    ((t : Type u_2) →\n        (t' : Type u_3) →\n          (f : t → t') →\n            (v : TypeVec n) → (v' : TypeVec n) → (fs : TypeVec.Arrow v v') → β (v ::: t) (v' ::: t') (fs ::: f)) →\n      (v : TypeVec (n + 1)) → (v' : TypeVec (n + 1)) → (fs : TypeVec.Arrow v v') → β v v' fs","name":"TypeVec.typevecCasesCons₃","isProp":false,"doc":"cases distinction for an arrow in the category of (n+1)-length type vectors ","depth":17},{"type":"(n : ℕ) →\n  (t : Type u_1) →\n    (t' : Type u_2) →\n      (v : TypeVec n) →\n        (v' : TypeVec n) →\n          {β : TypeVec.Arrow (v ::: t) (v' ::: t') → Sort u_3} →\n            ((f : t → t') → (fs : TypeVec.Arrow v v') → β (fs ::: f)) →\n              (fs : TypeVec.Arrow (v ::: t) (v' ::: t')) → β fs","name":"TypeVec.typevecCasesCons₂","isProp":false,"doc":"specialized cases distinction for an arrow in the category of (n+1)-length type vectors ","depth":17},{"type":"{n : ℕ} →\n  {F : TypeVec (n + 1) → Type u} →\n    [inst : MvFunctor F] →\n      [q : MvQPF F] →\n        {α : TypeVec n} →\n          {β : MvQPF.Fix F α → Type u} →\n            ((x : F (α ::: Sigma β)) → β (MvQPF.Fix.mk (MvFunctor.map (TypeVec.id ::: Sigma.fst) x))) →\n              (x : MvQPF.Fix F α) → β x","name":"MvQPF.Fix.drec","isProp":false,"doc":"Dependent recursor for `fix F` ","depth":23}],"count":35}
{"noDocExamples":[],"kind":"SimpleGraph.«term_↪g_»","examples":[{"type":"{V : Type u} → {G : SimpleGraph V} → G ↪g G","name":"SimpleGraph.Embedding.refl","isProp":false,"doc":"The identity embedding from a graph to itself. ","depth":6},{"type":"{V : Type u} → {s : Set V} → (G : SimpleGraph ↑s) → G ↪g SimpleGraph.spanningCoe G","name":"SimpleGraph.Embedding.spanningCoe","isProp":false,"doc":"Graphs on a set of vertices embed in their `spanningCoe`. ","depth":9},{"type":"{V : Type u} → {W : Type v} → (f : V ↪ W) → (G : SimpleGraph V) → G ↪g SimpleGraph.map f G","name":"SimpleGraph.Embedding.map","isProp":false,"doc":"Given an injective function, there is an embedding from a graph into the mapped graph. ","depth":9}],"count":34}
{"noDocExamples":[],"kind":"Polynomial.«term_%ₘ_»","examples":[{"type":"∀ {R : Type u} [inst : CommRing R] {n : Type v} [inst_1 : DecidableEq n] [inst_2 : Fintype n] (M : Matrix n n R)\n  (k : ℕ), M ^ k = ↑(Polynomial.aeval M) (Polynomial.X ^ k %ₘ Matrix.charpoly M)","name":"Matrix.pow_eq_aeval_mod_charpoly","isProp":true,"doc":"Any matrix power can be computed as the sum of matrix powers less than `Fintype.card n`.\n\nTODO: add the statement for negative powers phrased with `zpow`. ","depth":34},{"type":"∀ {R : Type u} [inst : CommRing R] {n : Type v} [inst_1 : DecidableEq n] [inst_2 : Fintype n] (M : Matrix n n R)\n  (p : Polynomial R), ↑(Polynomial.aeval M) p = ↑(Polynomial.aeval M) (p %ₘ Matrix.charpoly M)","name":"Matrix.aeval_eq_aeval_mod_charpoly","isProp":true,"doc":"Any matrix polynomial `p` is equivalent under evaluation to `p %ₘ M.charpoly`; that is, `p`\nis equivalent to a polynomial with degree less than the dimension of the matrix. ","depth":35},{"type":"∀ {R : Type u} {M : Type v} [inst : CommRing R] [inst_1 : AddCommGroup M] [inst_2 : Module R M]\n  [inst_3 : Module.Free R M] [inst_4 : Module.Finite R M] (f : M →ₗ[R] M) (k : ℕ),\n  f ^ k = ↑(Polynomial.aeval f) (Polynomial.X ^ k %ₘ LinearMap.charpoly f)","name":"LinearMap.pow_eq_aeval_mod_charpoly","isProp":true,"doc":"Any endomorphism power can be computed as the sum of endomorphism powers less than the\ndimension of the module. ","depth":43}],"count":34}
{"noDocExamples":[{"type":"∀ {M : Type w'} [inst : LE M] [h : NoTopOrder M], M ⊨ FirstOrder.Language.noTopOrderSentence FirstOrder.Language.order","name":"FirstOrder.Language.realize_noTopOrder","isProp":true,"depth":7},{"type":"∀ {M : Type w'} [inst : LE M] [h : NoBotOrder M], M ⊨ FirstOrder.Language.noBotOrderSentence FirstOrder.Language.order","name":"FirstOrder.Language.realize_noBotOrder","isProp":true,"depth":7}],"kind":"FirstOrder.Language.«term_⊨_»","examples":[{"type":"∀ {α : Type u_1} {M : α → Type u_2} {u : Ultrafilter α} {L : FirstOrder.Language}\n  [inst : (a : α) → FirstOrder.Language.Structure L (M a)] [inst_1 : ∀ (a : α), Nonempty (M a)]\n  (φ : FirstOrder.Language.Sentence L), Filter.Product (↑u) M ⊨ φ ↔ ∀ᶠ (a : α) in ↑u, M a ⊨ φ","name":"FirstOrder.Language.Ultraproduct.sentence_realize","isProp":true,"doc":"Łoś's Theorem : A sentence is true in an ultraproduct if and only if the set of structures it is\ntrue in is in the ultrafilter. ","depth":16}],"count":34}
{"noDocExamples":[],"kind":"FirstOrder.Language.«term_≃ᴸ_»","examples":[{"type":"(L : FirstOrder.Language) → L ≃ᴸ L","name":"FirstOrder.Language.LEquiv.refl","isProp":false,"doc":"The identity equivalence from a first-order language to itself. ","depth":3},{"type":"{L : FirstOrder.Language} → {L' : FirstOrder.Language} → (L ≃ᴸ L') → (L' ≃ᴸ L)","name":"FirstOrder.Language.LEquiv.symm","isProp":false,"doc":"The inverse of an equivalence of first-order languages. ","depth":5},{"type":"{L : FirstOrder.Language} →\n  {L' : FirstOrder.Language} → (L ≃ᴸ L') → FirstOrder.Language.Sentence L ≃ FirstOrder.Language.Sentence L'","name":"FirstOrder.Language.LEquiv.onSentence","isProp":false,"doc":"Maps a sentence's symbols along a language equivalence. ","depth":6}],"count":34}
{"noDocExamples":[],"kind":"«term_/ₚ_»","examples":[{"type":"∀ {α : Type u} [inst : Monoid α] (u : αˣ), ↑u⁻¹ = 1 /ₚ u","name":"inv_eq_one_divp","isProp":true,"doc":"Used for `field_simp` to deal with inverses of units. ","depth":11},{"type":"∀ {α : Type u} [inst : Monoid α] (x y : α) (u : αˣ), x * (y /ₚ u) = x * y /ₚ u","name":"divp_assoc'","isProp":true,"doc":"`field_simp` needs the reverse direction of `divp_assoc` to move all `/ₚ` to the right. ","depth":15},{"type":"∀ {α : Type u} [inst : Monoid α] (u₁ u₂ : αˣ), ↑(u₁ / u₂) = ↑u₁ /ₚ u₂","name":"val_div_eq_divp","isProp":true,"doc":"`field_simp` moves division inside `αˣ` to the right, and this lemma\nlifts the calculation to `α`.\n","depth":16}],"count":34}
{"noDocExamples":[],"kind":"MeasureTheory.«term⨍_In_,_∂_»","examples":[{"type":"∀ {α : Type u_1} {m0 : MeasurableSpace α} {μ : MeasureTheory.Measure α} {s : Set α} {f : α → ℝ},\n  ↑↑μ s ≠ 0 → ↑↑μ s ≠ ⊤ → MeasureTheory.IntegrableOn f s → ∃ x, x ∈ s ∧ f x ≤ ⨍ (a : α) in s, f a ∂μ","name":"MeasureTheory.exists_le_setAverage","isProp":true,"doc":"**First moment method**. The minimum of an integrable function is smaller than its mean. ","depth":19},{"type":"∀ {α : Type u_1} {m0 : MeasurableSpace α} {μ : MeasureTheory.Measure α} {s : Set α} {f : α → ℝ},\n  ↑↑μ s ≠ 0 → ↑↑μ s ≠ ⊤ → MeasureTheory.IntegrableOn f s → ∃ x, x ∈ s ∧ ⨍ (a : α) in s, f a ∂μ ≤ f x","name":"MeasureTheory.exists_setAverage_le","isProp":true,"doc":"**First moment method**. The maximum of an integrable function is greater than its mean. ","depth":20},{"type":"∀ {α : Type u_1} {m0 : MeasurableSpace α} {μ : MeasureTheory.Measure α} {s : Set α} {f : α → ℝ},\n  ↑↑μ s ≠ 0 → ↑↑μ s ≠ ⊤ → MeasureTheory.IntegrableOn f s → 0 < ↑↑μ {x | x ∈ s ∧ f x ≤ ⨍ (a : α) in s, f a ∂μ}","name":"MeasureTheory.measure_le_setAverage_pos","isProp":true,"doc":"**First moment method**. An integrable function is smaller than its mean on a set of positive\nmeasure. ","depth":21}],"count":33}
{"noDocExamples":[],"kind":"CategoryTheory.exp.«term_⟹_»","examples":[{"type":"{C : Type u} →\n  [inst : CategoryTheory.Category.{v, u} C] →\n    {A Y : C} →\n      [inst_1 : CategoryTheory.Limits.HasFiniteProducts C] →\n        [inst_2 : CategoryTheory.Exponentiable A] → (A ⟶ Y) → (⊤_ C ⟶ A ⟹ Y)","name":"CategoryTheory.internalizeHom","isProp":false,"doc":"The internal element which points at the given morphism. ","depth":16},{"type":"{C : Type u} →\n  [inst : CategoryTheory.Category.{v, u} C] →\n    {A X Y : C} →\n      [inst_1 : CategoryTheory.Limits.HasFiniteProducts C] →\n        [inst_2 : CategoryTheory.Exponentiable A] → (A ⨯ Y ⟶ X) → (Y ⟶ A ⟹ X)","name":"CategoryTheory.CartesianClosed.curry","isProp":false,"doc":"Currying in a cartesian closed category. ","depth":18},{"type":"{C : Type u} →\n  [inst : CategoryTheory.Category.{v, u} C] →\n    {A X Y : C} →\n      [inst_1 : CategoryTheory.Limits.HasFiniteProducts C] →\n        [inst_2 : CategoryTheory.Exponentiable A] → (Y ⟶ A ⟹ X) → (A ⨯ Y ⟶ X)","name":"CategoryTheory.CartesianClosed.uncurry","isProp":false,"doc":"Uncurrying in a cartesian closed category. ","depth":18}],"count":33}
{"noDocExamples":[],"kind":"«term_≃SL[_]_»","examples":[{"type":"{R : Type u_1} →\n  {R₂ : Type u_2} →\n    {E : Type u_5} →\n      {E₂ : Type u_6} →\n        [inst : Semiring R] →\n          [inst_1 : Semiring R₂] →\n            {σ₁₂ : R →+* R₂} →\n              {σ₂₁ : R₂ →+* R} →\n                [inst_2 : RingHomInvPair σ₁₂ σ₂₁] →\n                  [inst_3 : RingHomInvPair σ₂₁ σ₁₂] →\n                    [inst_4 : SeminormedAddCommGroup E] →\n                      [inst_5 : SeminormedAddCommGroup E₂] →\n                        [inst_6 : Module R E] → [inst_7 : Module R₂ E₂] → CoeTC (E ≃ₛₗᵢ[σ₁₂] E₂) (E ≃SL[σ₁₂] E₂)","name":"LinearIsometryEquiv.instCoeTCLinearIsometryEquivContinuousLinearEquivToTopologicalSpaceToUniformSpaceToPseudoMetricSpaceToAddCommMonoidToAddCommGroupToTopologicalSpaceToUniformSpaceToPseudoMetricSpaceToAddCommMonoidToAddCommGroup","isProp":false,"doc":"Reinterpret a `LinearIsometryEquiv` as a `ContinuousLinearEquiv`. ","depth":31},{"type":"{R : Type u_1} →\n  {R₂ : Type u_2} →\n    {E : Type u_5} →\n      {E₂ : Type u_6} →\n        [inst : Semiring R] →\n          [inst_1 : Semiring R₂] →\n            {σ₁₂ : R →+* R₂} →\n              {σ₂₁ : R₂ →+* R} →\n                [inst_2 : RingHomInvPair σ₁₂ σ₂₁] →\n                  [inst_3 : RingHomInvPair σ₂₁ σ₁₂] →\n                    [inst_4 : SeminormedAddCommGroup E] →\n                      [inst_5 : SeminormedAddCommGroup E₂] →\n                        [inst_6 : Module R E] → [inst_7 : Module R₂ E₂] → (E ≃ₛₗᵢ[σ₁₂] E₂) → E ≃SL[σ₁₂] E₂","name":"LinearIsometryEquiv.toContinuousLinearEquiv","isProp":false,"doc":"Interpret a `LinearIsometryEquiv` as a `ContinuousLinearEquiv`. ","depth":31},{"type":"{R₁ : Type u_1} →\n  {R₂ : Type u_2} →\n    [inst : Semiring R₁] →\n      [inst_1 : Semiring R₂] →\n        {σ₁₂ : R₁ →+* R₂} →\n          {σ₂₁ : R₂ →+* R₁} →\n            [inst_2 : RingHomInvPair σ₁₂ σ₂₁] →\n              [inst_3 : RingHomInvPair σ₂₁ σ₁₂] →\n                {M₁ : Type u_4} →\n                  [inst_4 : TopologicalSpace M₁] →\n                    [inst_5 : AddCommMonoid M₁] →\n                      {M₂ : Type u_6} →\n                        [inst_6 : TopologicalSpace M₂] →\n                          [inst_7 : AddCommMonoid M₂] →\n                            [inst_8 : Module R₁ M₁] → [inst_9 : Module R₂ M₂] → (M₁ ≃SL[σ₁₂] M₂) → M₁ →SL[σ₁₂] M₂","name":"ContinuousLinearEquiv.toContinuousLinearMap","isProp":false,"doc":"A continuous linear equivalence induces a continuous linear map. ","depth":33}],"count":32}
{"noDocExamples":[],"kind":"AlgebraicGeometry.«term_∣__»","examples":[{"type":"∀ {P : CategoryTheory.MorphismProperty AlgebraicGeometry.Scheme},\n  AlgebraicGeometry.PropertyIsLocalAtTarget P →\n    ∀ {X Y : AlgebraicGeometry.Scheme} (f : X ⟶ Y) (U : TopologicalSpace.Opens ↑↑Y.toPresheafedSpace), P f → P (f ∣_ U)","name":"AlgebraicGeometry.PropertyIsLocalAtTarget.restrict","isProp":true,"doc":"If `P` holds for `f : X ⟶ Y`, then `P` holds for `f ∣_ U` for any `U`. ","depth":34},{"type":"{X Y U : AlgebraicGeometry.Scheme} →\n  (f : X ⟶ Y) →\n    (g : U ⟶ Y) →\n      [hg : AlgebraicGeometry.IsOpenImmersion g] →\n        CategoryTheory.Arrow.mk (f ∣_ AlgebraicGeometry.Scheme.Hom.opensRange g) ≅\n          CategoryTheory.Arrow.mk CategoryTheory.Limits.pullback.snd","name":"AlgebraicGeometry.morphismRestrictOpensRange","isProp":false,"doc":"Restricting a morphism onto the image of an open immersion is isomorphic to the base change\nalong the immersion. ","depth":35},{"type":"{X Y : AlgebraicGeometry.Scheme} →\n  (f : X ⟶ Y) →\n    {U V : TopologicalSpace.Opens ↑↑Y.toPresheafedSpace} →\n      U = V → (CategoryTheory.Arrow.mk (f ∣_ U) ≅ CategoryTheory.Arrow.mk (f ∣_ V))","name":"AlgebraicGeometry.morphismRestrictEq","isProp":false,"doc":"The restrictions onto two equal open sets are isomorphic. This currently has bad defeqs when\nunfolded, but it should not matter for now. Replace this definition if better defeqs are needed. ","depth":35}],"count":32}
{"noDocExamples":[{"type":"∀ {V : Type u} [inst : Quiver V],\n  CategoryTheory.Groupoid.Free.of V =\n    Quiver.Symmetrify.of ⋙q CategoryTheory.Paths.of ⋙q\n      (CategoryTheory.Quotient.functor CategoryTheory.Groupoid.Free.redStep).toPrefunctor","name":"CategoryTheory.Groupoid.Free.of_eq","isProp":true,"depth":14},{"type":"∀ {U : Type u_1} {V : Type u_2} [inst : Quiver U] [inst_1 : Quiver V] (F : U ⥤q V), 𝟭q U ⋙q F = F","name":"Prefunctor.id_comp","isProp":true,"depth":15}],"kind":"Prefunctor.«term_⋙q_»","examples":[{"type":"∀ {V : Type u_2} [inst : Quiver V] {V' : Type u_4} [inst_1 : Quiver V'] [inst_2 : Quiver.HasReverse V'] (φ : V ⥤q V')\n  (Φ : Quiver.Symmetrify V ⥤q V'),\n  Quiver.Symmetrify.of ⋙q Φ = φ →\n    (∀ {X Y : Quiver.Symmetrify V} (f : X ⟶ Y), Φ.map (Quiver.reverse f) = Quiver.reverse (Φ.map f)) →\n      Φ = Quiver.Symmetrify.lift φ","name":"Quiver.Symmetrify.lift_unique","isProp":true,"doc":"`lift φ` is the only prefunctor extending `φ` and preserving reverses. ","depth":24}],"count":30}
{"noDocExamples":[],"kind":"Polynomial.«term_/ₘ_»","examples":[{"type":"∀ {R : Type u} [inst : CommRing R] {p q : Polynomial R},\n  Polynomial.Monic q →\n    Polynomial.degree q ≤ Polynomial.degree p → Polynomial.leadingCoeff (p /ₘ q) = Polynomial.leadingCoeff p","name":"Polynomial.leadingCoeff_divByMonic_of_monic","isProp":true,"doc":"Division by a monic polynomial doesn't change the leading coefficient. ","depth":14},{"type":"∀ {R : Type u_1} [inst : CommRing R] {n : ℕ},\n  0 < n →\n    Polynomial.cyclotomic n R =\n      (Polynomial.X ^ n - 1) /ₘ Finset.prod (Nat.properDivisors n) fun i => Polynomial.cyclotomic i R","name":"Polynomial.cyclotomic_eq_X_pow_sub_one_div","isProp":true,"doc":"We have\n`cyclotomic n R = (X ^ k - 1) /ₘ (∏ i in Nat.properDivisors k, cyclotomic i K)`. ","depth":21},{"type":"∀ {K : Type u_2} [inst : CommRing K] [inst_1 : IsDomain K] {ζ : K} {n : ℕ},\n  0 < n →\n    IsPrimitiveRoot ζ n →\n      Polynomial.cyclotomic' n K =\n        (Polynomial.X ^ n - 1) /ₘ Finset.prod (Nat.properDivisors n) fun i => Polynomial.cyclotomic' i K","name":"Polynomial.cyclotomic'_eq_X_pow_sub_one_div","isProp":true,"doc":"If there is a primitive `n`-th root of unity in `K`, then\n`cyclotomic' n K = (X ^ k - 1) /ₘ (∏ i in Nat.properDivisors k, cyclotomic' i K)`. ","depth":24}],"count":30}
{"noDocExamples":[{"type":"∀ {α : Type u_1} (l : List α), [] <:+: l","name":"List.nil_infix","isProp":true,"depth":5}],"kind":"List.«term_<:+:_»","examples":[{"type":"∀ {α : Type u_1} {l : List α}, l <:+: [] → l = []","name":"List.eq_nil_of_infix_nil","isProp":true,"doc":"**Alias** of the forward direction of `List.infix_nil`.","depth":7},{"type":"∀ {α : Type u_1} {l₁ l₂ : List α}, l₁ <:+: l₂ → List.reverse l₁ <:+: List.reverse l₂","name":"List.isInfix.reverse","isProp":true,"doc":"**Alias** of the reverse direction of `List.reverse_infix`.","depth":8}],"count":29}
{"noDocExamples":[],"kind":"«term_==_»","examples":[{"type":"∀ {α : Type u} [inst : BEq α] [self : LawfulBEq α] {a : α}, (a == a) = true","name":"LawfulBEq.rfl","isProp":true,"doc":"`==` is reflexive, that is, `(a == a) = true`. ","depth":10},{"type":"∀ {α : Type u} [inst : BEq α] [self : LawfulBEq α] {a b : α}, (a == b) = true → a = b","name":"LawfulBEq.eq_of_beq","isProp":true,"doc":"If `a == b` evaluates to `true`, then `a` and `b` are equal in the logic. ","depth":12},{"type":"∀ {α : Type u_1} [inst : BEq α] [self : PartialEquivBEq α] {a b : α}, (a == b) = true → (b == a) = true","name":"PartialEquivBEq.symm","isProp":true,"doc":"Symmetry for `BEq`. If `a == b` then `b == a`. ","depth":12}],"count":28}
{"noDocExamples":[{"type":"∀ {C : Type uC} [inst : CategoryTheory.Category.{uC', uC} C] {W : CategoryTheory.MorphismProperty C} {D : Type uD}\n  [inst_1 : CategoryTheory.Category.{uD', uD} D]\n  {F G : CategoryTheory.Functor (CategoryTheory.MorphismProperty.Localization W) D}\n  (τ :\n    CategoryTheory.Functor.comp (CategoryTheory.MorphismProperty.Q W) F ⟶\n      CategoryTheory.Functor.comp (CategoryTheory.MorphismProperty.Q W) G),\n  CategoryTheory.CategoryStruct.id (CategoryTheory.MorphismProperty.Q W) ◫\n      CategoryTheory.Localization.Construction.natTransExtension τ =\n    τ","name":"CategoryTheory.Localization.Construction.natTransExtension_hcomp","isProp":true,"depth":23},{"type":"∀ {C : Type uC} [inst : CategoryTheory.Category.{uC', uC} C] {W : CategoryTheory.MorphismProperty C} {D : Type uD}\n  [inst_1 : CategoryTheory.Category.{uD', uD} D]\n  {F G : CategoryTheory.Functor (CategoryTheory.MorphismProperty.Localization W) D} {τ₁ τ₂ : F ⟶ G},\n  CategoryTheory.CategoryStruct.id (CategoryTheory.MorphismProperty.Q W) ◫ τ₁ =\n      CategoryTheory.CategoryStruct.id (CategoryTheory.MorphismProperty.Q W) ◫ τ₂ →\n    τ₁ = τ₂","name":"CategoryTheory.Localization.Construction.natTrans_hcomp_injective","isProp":true,"depth":26},{"type":"∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] {D : Type u₂} [inst_1 : CategoryTheory.Category.{v₂, u₂} D]\n  {E : Type u₃} [inst_2 : CategoryTheory.Category.{v₃, u₃} E] {F G : CategoryTheory.Functor C D}\n  {H I : CategoryTheory.Functor D E} (α : F ≅ G) (β : H ≅ I), (CategoryTheory.NatIso.hcomp α β).hom = α.hom ◫ β.hom","name":"CategoryTheory.NatIso.hcomp_hom","isProp":true,"depth":27}],"kind":"CategoryTheory.NatTrans.«term_◫_»","examples":[],"count":27}
{"noDocExamples":[{"type":"∀ {α : Type u} (s : Stream'.WSeq α), s ~ʷ s","name":"Stream'.WSeq.Equiv.refl","isProp":true,"depth":5},{"type":"∀ {α : Type u} (s : Stream'.WSeq α), Stream'.WSeq.think s ~ʷ s","name":"Stream'.WSeq.think_equiv","isProp":true,"depth":6},{"type":"∀ {α : Type u} {s t : Stream'.WSeq α}, s ~ʷ t → t ~ʷ s","name":"Stream'.WSeq.Equiv.symm","isProp":true,"depth":7}],"kind":"Stream'.WSeq.«term_~ʷ_»","examples":[],"count":27}
{"noDocExamples":[],"kind":"«term_→CO_»","examples":[{"type":"(α : Type u_2) → [inst : TopologicalSpace α] → α →CO α","name":"ContinuousOpenMap.id","isProp":false,"doc":"`id` as a `ContinuousOpenMap`. ","depth":6},{"type":"{α : Type u_2} →\n  {β : Type u_3} →\n    {γ : Type u_4} →\n      [inst : TopologicalSpace α] →\n        [inst_1 : TopologicalSpace β] → [inst_2 : TopologicalSpace γ] → (β →CO γ) → (α →CO β) → α →CO γ","name":"ContinuousOpenMap.comp","isProp":false,"doc":"Composition of `ContinuousOpenMap`s as a `ContinuousOpenMap`. ","depth":12},{"type":"{α : Type u_2} →\n  {β : Type u_3} →\n    [inst : TopologicalSpace α] → [inst_1 : TopologicalSpace β] → (f : α →CO β) → (f' : α → β) → f' = ↑f → α →CO β","name":"ContinuousOpenMap.copy","isProp":false,"doc":"Copy of a `ContinuousOpenMap` with a new `ContinuousMap` equal to the old one. Useful to fix\ndefinitional equalities. ","depth":21}],"count":26}
{"noDocExamples":[],"kind":"SimpleGraph.«term_□_»","examples":[{"type":"{α : Type u_1} → {β : Type u_2} → (G : SimpleGraph α) → (H : SimpleGraph β) → G □ H ≃g H □ G","name":"SimpleGraph.boxProdComm","isProp":false,"doc":"The box product is commutative up to isomorphism. `Equiv.prodComm` as a graph isomorphism. ","depth":10},{"type":"{α : Type u_1} → {β : Type u_2} → (G : SimpleGraph α) → (H : SimpleGraph β) → β → G ↪g G □ H","name":"SimpleGraph.boxProdLeft","isProp":false,"doc":"The embedding of `G` into `G □ H` given by `b`. ","depth":10},{"type":"{α : Type u_1} → {β : Type u_2} → (G : SimpleGraph α) → (H : SimpleGraph β) → α → H ↪g G □ H","name":"SimpleGraph.boxProdRight","isProp":false,"doc":"The embedding of `H` into `G □ H` given by `a`. ","depth":10}],"count":26}
{"noDocExamples":[],"kind":"«term_→r_»","examples":[{"type":"{α : Type u_1} → (r : α → α → Prop) → r →r r","name":"RelHom.id","isProp":false,"doc":"Identity map is a relation homomorphism. ","depth":6},{"type":"{α : Type u_1} → {β : Type u_2} → {r : α → α → Prop} → {s : β → β → Prop} → r ↪r s → r →r s","name":"RelEmbedding.toRelHom","isProp":false,"doc":"A relation embedding is also a relation homomorphism ","depth":9},{"type":"{α : Type u_5} → {β : Type u_6} → {r : α → α → Prop} → {s : β → β → Prop} → r →r s → α → β","name":"RelHom.toFun","isProp":false,"doc":"The underlying function of a `RelHom` ","depth":9}],"count":25}
{"noDocExamples":[],"kind":"Function.«term↿_»","examples":[{"type":"∀ {α : Type u_1} {β : Type u_2} {γ : Type u_3} [inst : UniformSpace α] [inst_1 : UniformSpace β]\n  [inst_2 : WeaklyLocallyCompactSpace α] [inst_3 : CompactSpace β] [inst_4 : UniformSpace γ] (f : α → β → γ),\n  Continuous ↿f → ∀ (x : α), TendstoUniformly f (f x) (nhds x)","name":"Continuous.tendstoUniformly","isProp":true,"doc":"A continuous family of functions `α → β → γ` tends uniformly to its value at `x`\nif `α` is weakly locally compact and `β` is compact. ","depth":18},{"type":"∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {p : Filter ι} {c : β},\n  Filter.Tendsto (↿F) (p ×ˢ ⊤) (nhds c) ↔ TendstoUniformly F (fun x => c) p","name":"tendsto_prod_top_iff","isProp":true,"doc":"Uniform convergence to a constant function is equivalent to convergence in `p ×ˢ ⊤`. ","depth":19},{"type":"∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {F : ι → α → β} {s : Set α} {p : Filter ι} {c : β},\n  Filter.Tendsto (↿F) (p ×ˢ Filter.principal s) (nhds c) ↔ TendstoUniformlyOn F (fun x => c) p s","name":"tendsto_prod_principal_iff","isProp":true,"doc":"Uniform convergence on a set `s` to a constant function is equivalent to convergence in\n`p ×ˢ 𝓟 s`. ","depth":20}],"count":24}
{"noDocExamples":[{"type":"∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] [inst_1 : CategoryTheory.MonoidalCategory C] (X Y : C)\n  [inst_2 : CategoryTheory.ExactPairing X Y],\n  CategoryTheory.CategoryStruct.comp\n      (CategoryTheory.MonoidalCategory.tensorHom (η_ X Y) (CategoryTheory.CategoryStruct.id X))\n      (CategoryTheory.CategoryStruct.comp (CategoryTheory.MonoidalCategory.associator X Y X).hom\n        (CategoryTheory.MonoidalCategory.tensorHom (CategoryTheory.CategoryStruct.id X) (ε_ X Y))) =\n    CategoryTheory.CategoryStruct.comp (CategoryTheory.MonoidalCategory.leftUnitor X).hom\n      (CategoryTheory.MonoidalCategory.rightUnitor X).inv","name":"CategoryTheory.ExactPairing.evaluation_coevaluation","isProp":true,"depth":21},{"type":"∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] [inst_1 : CategoryTheory.MonoidalCategory C] {X Y : C}\n  [inst_2 : CategoryTheory.HasLeftDual X] [inst_3 : CategoryTheory.HasLeftDual Y] (f : X ⟶ Y),\n  CategoryTheory.CategoryStruct.comp\n      (CategoryTheory.MonoidalCategory.tensorHom (CategoryTheory.CategoryStruct.id X) (ᘁf)) (ε_ (ᘁX) X) =\n    CategoryTheory.CategoryStruct.comp\n      (CategoryTheory.MonoidalCategory.tensorHom f (CategoryTheory.CategoryStruct.id ᘁY)) (ε_ (ᘁY) Y)","name":"CategoryTheory.leftAdjointMate_comp_evaluation","isProp":true,"depth":21}],"kind":"CategoryTheory.ExactPairing.termε_","examples":[{"type":"{C : Type u_1} →\n  {D : Type u_2} →\n    [inst : CategoryTheory.Category.{u_3, u_1} C] →\n      [inst_1 : CategoryTheory.Category.{u_4, u_2} D] →\n        [inst_2 : CategoryTheory.MonoidalCategory C] →\n          [inst_3 : CategoryTheory.MonoidalCategory D] →\n            (F : CategoryTheory.MonoidalFunctor C D) →\n              [inst_4 : CategoryTheory.Faithful F.toFunctor] →\n                {X Y : C} →\n                  (eval :\n                      CategoryTheory.MonoidalCategory.tensorObj Y X ⟶ CategoryTheory.MonoidalCategory.tensorUnit C) →\n                    (coeval :\n                        CategoryTheory.MonoidalCategory.tensorUnit C ⟶ CategoryTheory.MonoidalCategory.tensorObj X Y) →\n                      [inst_5 : CategoryTheory.ExactPairing (F.obj X) (F.obj Y)] →\n                        F.map eval =\n                            CategoryTheory.CategoryStruct.comp\n                              (CategoryTheory.inv (CategoryTheory.LaxMonoidalFunctor.μ F.toLaxMonoidalFunctor Y X))\n                              (CategoryTheory.CategoryStruct.comp (ε_ (F.obj X) (F.obj Y)) F.ε) →\n                          F.map coeval =\n                              CategoryTheory.CategoryStruct.comp (CategoryTheory.inv F.ε)\n                                (CategoryTheory.CategoryStruct.comp (η_ (F.obj X) (F.obj Y))\n                                  (CategoryTheory.LaxMonoidalFunctor.μ F.toLaxMonoidalFunctor X Y)) →\n                            CategoryTheory.ExactPairing X Y","name":"CategoryTheory.exactPairingOfFaithful","isProp":false,"doc":"Given candidate data for an exact pairing,\nwhich is sent by a faithful monoidal functor to an exact pairing,\nthe equations holds automatically. ","depth":34}],"count":24}
{"noDocExamples":[],"kind":"CategoryTheory.MonoidalOpposite.«term_ᴹᵒᵖ»","examples":[{"type":"{C : Type u₁} → Cᴹᵒᵖ → C","name":"CategoryTheory.MonoidalOpposite.unmop","isProp":false,"doc":"Think of an object of `Cᴹᵒᵖ` as an object of `C`. ","depth":3},{"type":"{C : Type u₁} → C → Cᴹᵒᵖ","name":"CategoryTheory.MonoidalOpposite.mop","isProp":false,"doc":"Think of an object of `C` as an object of `Cᴹᵒᵖ`. ","depth":3},{"type":"{C : Type u₁} →\n  [inst : CategoryTheory.Category.{v₁, u₁} C] →\n    {X Y : Cᴹᵒᵖ} → (X ⟶ Y) → (CategoryTheory.MonoidalOpposite.unmop X ⟶ CategoryTheory.MonoidalOpposite.unmop Y)","name":"Quiver.Hom.unmop","isProp":false,"doc":"We can think of a morphism `f : mop X ⟶ mop Y` as a morphism `X ⟶ Y`. ","depth":12}],"count":24}
{"noDocExamples":[{"type":"∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] [inst_1 : CategoryTheory.MonoidalCategory C] {X Y : C}\n  [inst_2 : CategoryTheory.HasRightDual X] [inst_3 : CategoryTheory.HasRightDual Y] (f : X ⟶ Y),\n  CategoryTheory.CategoryStruct.comp (η_ Y Yᘁ)\n      (CategoryTheory.MonoidalCategory.tensorHom (CategoryTheory.CategoryStruct.id Y) (fᘁ)) =\n    CategoryTheory.CategoryStruct.comp (η_ X Xᘁ)\n      (CategoryTheory.MonoidalCategory.tensorHom f (CategoryTheory.CategoryStruct.id Xᘁ))","name":"CategoryTheory.coevaluation_comp_rightAdjointMate","isProp":true,"depth":20},{"type":"∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] [inst_1 : CategoryTheory.MonoidalCategory C] (X Y : C)\n  [inst_2 : CategoryTheory.ExactPairing X Y],\n  CategoryTheory.CategoryStruct.comp\n      (CategoryTheory.MonoidalCategory.tensorHom (η_ X Y) (CategoryTheory.CategoryStruct.id X))\n      (CategoryTheory.CategoryStruct.comp (CategoryTheory.MonoidalCategory.associator X Y X).hom\n        (CategoryTheory.MonoidalCategory.tensorHom (CategoryTheory.CategoryStruct.id X) (ε_ X Y))) =\n    CategoryTheory.CategoryStruct.comp (CategoryTheory.MonoidalCategory.leftUnitor X).hom\n      (CategoryTheory.MonoidalCategory.rightUnitor X).inv","name":"CategoryTheory.ExactPairing.evaluation_coevaluation","isProp":true,"depth":21}],"kind":"CategoryTheory.ExactPairing.termη_","examples":[{"type":"{C : Type u_1} →\n  {D : Type u_2} →\n    [inst : CategoryTheory.Category.{u_3, u_1} C] →\n      [inst_1 : CategoryTheory.Category.{u_4, u_2} D] →\n        [inst_2 : CategoryTheory.MonoidalCategory C] →\n          [inst_3 : CategoryTheory.MonoidalCategory D] →\n            (F : CategoryTheory.MonoidalFunctor C D) →\n              [inst_4 : CategoryTheory.Faithful F.toFunctor] →\n                {X Y : C} →\n                  (eval :\n                      CategoryTheory.MonoidalCategory.tensorObj Y X ⟶ CategoryTheory.MonoidalCategory.tensorUnit C) →\n                    (coeval :\n                        CategoryTheory.MonoidalCategory.tensorUnit C ⟶ CategoryTheory.MonoidalCategory.tensorObj X Y) →\n                      [inst_5 : CategoryTheory.ExactPairing (F.obj X) (F.obj Y)] →\n                        F.map eval =\n                            CategoryTheory.CategoryStruct.comp\n                              (CategoryTheory.inv (CategoryTheory.LaxMonoidalFunctor.μ F.toLaxMonoidalFunctor Y X))\n                              (CategoryTheory.CategoryStruct.comp (ε_ (F.obj X) (F.obj Y)) F.ε) →\n                          F.map coeval =\n                              CategoryTheory.CategoryStruct.comp (CategoryTheory.inv F.ε)\n                                (CategoryTheory.CategoryStruct.comp (η_ (F.obj X) (F.obj Y))\n                                  (CategoryTheory.LaxMonoidalFunctor.μ F.toLaxMonoidalFunctor X Y)) →\n                            CategoryTheory.ExactPairing X Y","name":"CategoryTheory.exactPairingOfFaithful","isProp":false,"doc":"Given candidate data for an exact pairing,\nwhich is sent by a faithful monoidal functor to an exact pairing,\nthe equations holds automatically. ","depth":34}],"count":24}
{"noDocExamples":[{"type":"∀ {R : Type u_1} [inst : Ring R] {M : Type u_2} [inst_1 : AddCommGroup M] [inst_2 : Module R M] {U : Submodule R M}\n  {x : M}, x ≡ x [SMOD U]","name":"SModEq.rfl","isProp":true,"depth":15},{"type":"∀ {R : Type u_1} [inst : Ring R] {M : Type u_2} [inst_1 : AddCommGroup M] [inst_2 : Module R M] {U : Submodule R M}\n  (x : M), x ≡ x [SMOD U]","name":"SModEq.refl","isProp":true,"depth":15},{"type":"∀ {R : Type u_4} [inst : CommRing R] {I : Ideal R} {x y : R},\n  x ≡ y [SMOD I] → ∀ (f : Polynomial R), Polynomial.eval x f ≡ Polynomial.eval y f [SMOD I]","name":"SModEq.eval","isProp":true,"depth":16}],"kind":"«term_≡_[SMOD_]»","examples":[],"count":23}
{"noDocExamples":[],"kind":"Matrix.termGL","examples":[{"type":"{n : Type u} →\n  [inst : DecidableEq n] →\n    [inst_1 : Fintype n] → {R : Type v} → [inst_2 : CommRing R] → CoeFun (GL n R) fun x => n → n → R","name":"Matrix.GeneralLinearGroup.instCoeFun","isProp":false,"doc":"This instance is here for convenience, but is not the simp-normal form. ","depth":14},{"type":"{n : Type u} →\n  [inst : DecidableEq n] →\n    [inst_1 : Fintype n] → {R : Type v} → [inst_2 : CommRing R] → Matrix.SpecialLinearGroup n R → GL n R","name":"Matrix.SpecialLinearGroup.coeToGL","isProp":false,"doc":"The map from SL(n) to GL(n) underlying the coercion, forgetting the value of the determinant.\n","depth":14},{"type":"{n : Type u} →\n  [inst : DecidableEq n] →\n    [inst_1 : Fintype n] → {R : Type v} → [inst_2 : CommRing R] → (A : Matrix n n R) → IsUnit (Matrix.det A) → GL n R","name":"Matrix.GeneralLinearGroup.mk''","isProp":false,"doc":"Given a matrix with unit determinant we get an element of `GL n R`","depth":17}],"count":23}
{"noDocExamples":[],"kind":"Complex.«term_×ℂ_»","examples":[{"type":"∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] (f : ℂ → E)\n  (z w : ℂ),\n  DifferentiableOn ℂ f (Set.uIcc z.re w.re ×ℂ Set.uIcc z.im w.im) →\n    (((∫ (x : ℝ) in z.re..w.re, f (↑x + ↑z.im * Complex.I)) - ∫ (x : ℝ) in z.re..w.re, f (↑x + ↑w.im * Complex.I)) +\n          Complex.I • ∫ (y : ℝ) in z.im..w.im, f (↑w.re + ↑y * Complex.I)) -\n        Complex.I • ∫ (y : ℝ) in z.im..w.im, f (↑z.re + ↑y * Complex.I) =\n      0","name":"Complex.integral_boundary_rect_eq_zero_of_differentiableOn","isProp":true,"doc":"**Cauchy-Goursat theorem** for a rectangle: the integral of a complex differentiable function\nover the boundary of a rectangle equals zero. More precisely, if `f` is complex differentiable on a\nclosed rectangle, then its integral over the boundary of the rectangle equals zero. ","depth":29},{"type":"∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] (f : ℂ → E)\n  (z w : ℂ),\n  ContinuousOn f (Set.uIcc z.re w.re ×ℂ Set.uIcc z.im w.im) →\n    DifferentiableOn ℂ f (Set.Ioo (min z.re w.re) (max z.re w.re) ×ℂ Set.Ioo (min z.im w.im) (max z.im w.im)) →\n      (((∫ (x : ℝ) in z.re..w.re, f (↑x + ↑z.im * Complex.I)) - ∫ (x : ℝ) in z.re..w.re, f (↑x + ↑w.im * Complex.I)) +\n            Complex.I • ∫ (y : ℝ) in z.im..w.im, f (↑w.re + ↑y * Complex.I)) -\n          Complex.I • ∫ (y : ℝ) in z.im..w.im, f (↑z.re + ↑y * Complex.I) =\n        0","name":"Complex.integral_boundary_rect_eq_zero_of_continuousOn_of_differentiableOn","isProp":true,"doc":"**Cauchy-Goursat theorem for a rectangle**: the integral of a complex differentiable function\nover the boundary of a rectangle equals zero. More precisely, if `f` is continuous on a closed\nrectangle and is complex differentiable on the corresponding open rectangle, then its integral over\nthe boundary of the rectangle equals zero. ","depth":30},{"type":"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {f : ℂ → E},\n  DiffContOnCl ℂ f (Set.Iio 0 ×ℂ Set.Iio 0) →\n    (∃ c,\n        c < 2 ∧\n          ∃ B,\n            f =O[Filter.comap (↑Complex.abs) Filter.atTop ⊓ Filter.principal (Set.Iio 0 ×ℂ Set.Iio 0)] fun z =>\n              rexp (B * ↑Complex.abs z ^ c)) →\n      (∀ (x : ℝ), x ≤ 0 → f ↑x = 0) →\n        (∀ (x : ℝ), x ≤ 0 → f (↑x * Complex.I) = 0) → Set.EqOn f 0 {z | z.re ≤ 0 ∧ z.im ≤ 0}","name":"PhragmenLindelof.eq_zero_on_quadrant_III","isProp":true,"doc":"**Phragmen-Lindelöf principle** in the third quadrant. Let `f : ℂ → E` be a function such that\n\n* `f` is differentiable in the open third quadrant and is continuous on its closure;\n* `‖f z‖` is bounded from above by `A * exp(B * (abs z) ^ c)` on the open third quadrant\n  for some `A`, `B`, and `c < 2`;\n* `f` is equal to zero on the boundary of the third quadrant.\n\nThen `f` is equal to zero on the closed third quadrant. ","depth":31}],"count":22}
{"noDocExamples":[{"type":"∀ {C : Type u} {X Y X' Y' : C} [inst : CategoryTheory.Category.{v, u} C] [inst_1 : CategoryTheory.MonoidalCategory C]\n  (f : X ≅ Y) (g : X' ≅ Y'), (f ⊗ g).inv = CategoryTheory.MonoidalCategory.tensorHom f.inv g.inv","name":"CategoryTheory.tensorIso_inv","isProp":true,"depth":21},{"type":"∀ {C : Type u} {X Y X' Y' : C} [inst : CategoryTheory.Category.{v, u} C] [inst_1 : CategoryTheory.MonoidalCategory C]\n  (f : X ≅ Y) (g : X' ≅ Y'), (f ⊗ g).hom = CategoryTheory.MonoidalCategory.tensorHom f.hom g.hom","name":"CategoryTheory.tensorIso_hom","isProp":true,"depth":21},{"type":"∀ {C : Type u_1} [inst : CategoryTheory.Category.{u_2, u_1} C] [inst_1 : CategoryTheory.MonoidalCategory C]\n  {W X Y Z : C} (f : W ⟶ X) [inst_2 : CategoryTheory.IsIso f] (g : Y ⟶ Z) [inst_3 : CategoryTheory.IsIso g],\n  CategoryTheory.IsIso (CategoryTheory.asIso f ⊗ CategoryTheory.asIso g).hom","name":"CategoryTheory.MonoidalCategory.tensor_isIso.proof_1","isProp":true,"depth":22}],"kind":"CategoryTheory.«term_⊗_»","examples":[],"count":21}
{"noDocExamples":[],"kind":"MeasureTheory.«term∀ᵐ_,_»","examples":[{"type":"∀ (f : StieltjesFunction),\n  ∀ᵐ (x : ℝ),\n    HasDerivAt (↑f)\n      (ENNReal.toReal (MeasureTheory.Measure.rnDeriv (StieltjesFunction.measure f) MeasureTheory.volume x)) x","name":"StieltjesFunction.ae_hasDerivAt","isProp":true,"doc":"A Stieltjes function is almost everywhere differentiable, with derivative equal to the\nRadon-Nikodym derivative of the associated Stieltjes measure with respect to Lebesgue. ","depth":13},{"type":"∀ {f : ℝ → ℝ} (hf : Monotone f),\n  ∀ᵐ (x : ℝ),\n    HasDerivAt f\n      (ENNReal.toReal\n        (MeasureTheory.Measure.rnDeriv (StieltjesFunction.measure (Monotone.stieltjesFunction hf)) MeasureTheory.volume\n          x))\n      x","name":"Monotone.ae_hasDerivAt","isProp":true,"doc":"A monotone function is almost everywhere differentiable, with derivative equal to the\nRadon-Nikodym derivative of the associated Stieltjes measure with respect to Lebesgue. ","depth":14},{"type":"∀ {f : ℝ → ℝ}, Monotone f → ∀ᵐ (x : ℝ), DifferentiableAt ℝ f x","name":"Monotone.ae_differentiableAt","isProp":true,"doc":"A monotone real function is differentiable Lebesgue-almost everywhere. ","depth":16}],"count":21}
{"noDocExamples":[],"kind":"MeasureTheory.«term⨍⁻_,_∂_»","examples":[{"type":"∀ {α : Type u_1} {m0 : MeasurableSpace α} {μ : MeasureTheory.Measure α} {f : α → ENNReal},\n  μ ≠ 0 → ∫⁻ (a : α), f a ∂μ ≠ ⊤ → ∃ x, ⨍⁻ (a : α), f a ∂μ ≤ f x","name":"MeasureTheory.exists_laverage_le","isProp":true,"doc":"**First moment method**. The maximum of a measurable function is greater than its mean. ","depth":18},{"type":"∀ {α : Type u_1} {m0 : MeasurableSpace α} {μ : MeasureTheory.Measure α} {f : α → ENNReal}\n  [inst : MeasureTheory.IsFiniteMeasure μ], μ ≠ 0 → AEMeasurable f → ∃ x, f x ≤ ⨍⁻ (a : α), f a ∂μ","name":"MeasureTheory.exists_le_laverage","isProp":true,"doc":"**First moment method**. The minimum of a measurable function is smaller than its mean. ","depth":19},{"type":"∀ {α : Type u_1} {m0 : MeasurableSpace α} {μ : MeasureTheory.Measure α} {f : α → ENNReal},\n  μ ≠ 0 → ∫⁻ (a : α), f a ∂μ ≠ ⊤ → 0 < ↑↑μ {x | ⨍⁻ (a : α), f a ∂μ ≤ f x}","name":"MeasureTheory.measure_laverage_le_pos","isProp":true,"doc":"**First moment method**. A measurable function is greater than its mean on a set of positive\nmeasure. ","depth":20}],"count":20}
{"noDocExamples":[{"type":"∀ {α : Type u_1} {a : α} {n : ℕ}, Sym.replicate (Nat.succ n) a = a ::ₛ Sym.replicate n a","name":"Sym.replicate_succ","isProp":true,"depth":8},{"type":"∀ {α : Type u_1} {n : ℕ} (a : α) (v : Vector α n), a ::ₛ Sym.ofVector v = Sym.ofVector (a ::ᵥ v)","name":"Sym.cons_of_coe_eq","isProp":true,"depth":10},{"type":"∀ {α : Type u_1} {n : ℕ} (a : α) (s : Sym α n), a ∈ a ::ₛ s","name":"Sym.mem_cons_self","isProp":true,"depth":10}],"kind":"Sym.«term_::ₛ_»","examples":[],"count":20}
{"noDocExamples":[],"kind":"«term_→L⋆[_]_»","examples":[{"type":"(𝕜 : Type u_1) →\n  {E : Type u_2} →\n    [inst : IsROrC 𝕜] → [inst_1 : NormedAddCommGroup E] → [inst_2 : InnerProductSpace 𝕜 E] → E →L[𝕜] E →L⋆[𝕜] 𝕜","name":"innerSLFlip","isProp":false,"doc":"The inner product as a continuous sesquilinear map, with the two arguments flipped. ","depth":29},{"type":"(𝕜 : Type u_1) →\n  {E : Type u_2} →\n    [inst : IsROrC 𝕜] → [inst_1 : NormedAddCommGroup E] → [inst_2 : InnerProductSpace 𝕜 E] → E →L⋆[𝕜] E →L[𝕜] 𝕜","name":"innerSL","isProp":false,"doc":"The inner product as a continuous sesquilinear map. Note that `toDualMap` (resp. `toDual`)\nin `InnerProductSpace.Dual` is a version of this given as a linear isometry (resp. linear\nisometric equivalence). ","depth":29},{"type":"{𝕜 : Type u_1} →\n  {E : Type u_2} →\n    [inst : IsROrC 𝕜] →\n      [inst_1 : NormedAddCommGroup E] →\n        [inst_2 : InnerProductSpace 𝕜 E] → [inst_3 : CompleteSpace E] → (E →L⋆[𝕜] E →L[𝕜] 𝕜) → E →L[𝕜] E","name":"InnerProductSpace.continuousLinearMapOfBilin","isProp":false,"doc":"Maps a bounded sesquilinear form to its continuous linear map,\ngiven by interpreting the form as a map `B : E →L⋆[𝕜] NormedSpace.Dual 𝕜 E`\nand dualizing the result using `toDual`.\n","depth":31}],"count":19}
{"noDocExamples":[],"kind":"Set.term𝒫_","examples":[{"type":"{α : Type u_1} → (S : Set α) → ↑(𝒫 S) ≃ Set ↑S","name":"Equiv.Set.powerset","isProp":false,"doc":"The set `𝒫 S := {x | x ⊆ S}` is equivalent to the type `Set S`. ","depth":7},{"type":"∀ {α : Type u} (x : α), 𝒫{x} = {∅, {x}}","name":"Set.powerset_singleton","isProp":true,"doc":"The powerset of a singleton contains only `∅` and the singleton itself. ","depth":9},{"type":"∀ {α : Type u_1} (s : Set α) (a : α), 𝒫 insert a s = 𝒫 s ∪ insert a '' 𝒫 s","name":"Set.powerset_insert","isProp":true,"doc":"The powerset of `{a} ∪ s` is `𝒫 s` together with `{a} ∪ t` for each `t ∈ 𝒫 s`. ","depth":11}],"count":18}
{"noDocExamples":[],"kind":"MeasureTheory.«term⨍⁻_In_,_∂_»","examples":[{"type":"∀ {α : Type u_1} {m0 : MeasurableSpace α} {μ : MeasureTheory.Measure α} {s : Set α} {f : α → ENNReal},\n  ↑↑μ s ≠ 0 → ↑↑μ s ≠ ⊤ → AEMeasurable f → ∃ x, x ∈ s ∧ f x ≤ ⨍⁻ (a : α) in s, f a ∂μ","name":"MeasureTheory.exists_le_setLaverage","isProp":true,"doc":"**First moment method**. The minimum of a measurable function is smaller than its mean. ","depth":21},{"type":"∀ {α : Type u_1} {m0 : MeasurableSpace α} {μ : MeasureTheory.Measure α} {s : Set α} {f : α → ENNReal},\n  ↑↑μ s ≠ 0 →\n    MeasureTheory.NullMeasurableSet s → ∫⁻ (a : α) in s, f a ∂μ ≠ ⊤ → ∃ x, x ∈ s ∧ ⨍⁻ (a : α) in s, f a ∂μ ≤ f x","name":"MeasureTheory.exists_setLaverage_le","isProp":true,"doc":"**First moment method**. The maximum of a measurable function is greater than its mean. ","depth":21},{"type":"∀ {α : Type u_1} {m0 : MeasurableSpace α} {μ : MeasureTheory.Measure α} {s : Set α} {f : α → ENNReal},\n  ↑↑μ s ≠ 0 →\n    MeasureTheory.NullMeasurableSet s →\n      ∫⁻ (a : α) in s, f a ∂μ ≠ ⊤ → 0 < ↑↑μ {x | x ∈ s ∧ ⨍⁻ (a : α) in s, f a ∂μ ≤ f x}","name":"MeasureTheory.measure_setLaverage_le_pos","isProp":true,"doc":"**First moment method**. A measurable function is greater than its mean on a set of positive\nmeasure. ","depth":23}],"count":18}
{"noDocExamples":[],"kind":"CategoryTheory.«term_⥤ₑ_»","examples":[{"type":"(C : Type u₁) →\n  [inst : CategoryTheory.Category.{v₁, u₁} C] →\n    (D : Type u₂) → [inst_1 : CategoryTheory.Category.{v₂, u₂} D] → CategoryTheory.Functor (C ⥤ₑ D) (C ⥤ₗ D)","name":"CategoryTheory.LeftExactFunctor.ofExact","isProp":false,"doc":"Turn an exact functor into a left exact functor. ","depth":12},{"type":"{C : Type u₁} →\n  [inst : CategoryTheory.Category.{v₁, u₁} C] →\n    {D : Type u₂} →\n      [inst_1 : CategoryTheory.Category.{v₂, u₂} D] →\n        (F : CategoryTheory.Functor C D) →\n          [inst_2 : CategoryTheory.Limits.PreservesFiniteLimits F] →\n            [inst_3 : CategoryTheory.Limits.PreservesFiniteColimits F] → C ⥤ₑ D","name":"CategoryTheory.ExactFunctor.of","isProp":false,"doc":"Turn an exact functor into an object of the category `ExactFunctor C D`. ","depth":12},{"type":"(C : Type u₁) →\n  [inst : CategoryTheory.Category.{v₁, u₁} C] →\n    (D : Type u₂) →\n      [inst_1 : CategoryTheory.Category.{v₂, u₂} D] → CategoryTheory.Functor (C ⥤ₑ D) (CategoryTheory.Functor C D)","name":"CategoryTheory.ExactFunctor.forget","isProp":false,"doc":"An exact functor is in particular a functor. ","depth":12}],"count":18}
{"noDocExamples":[],"kind":"«term_⊇_»","examples":[{"type":"∀ {α : Type u} [inst : TopologicalSpace α] {ι : Type v} [hι : Nonempty ι] (Z : ι → Set α),\n  Directed (fun x x_1 => x ⊇ x_1) Z →\n    (∀ (i : ι), Set.Nonempty (Z i)) →\n      (∀ (i : ι), IsCompact (Z i)) → (∀ (i : ι), IsClosed (Z i)) → Set.Nonempty (⋂ (i : ι), Z i)","name":"IsCompact.nonempty_iInter_of_directed_nonempty_compact_closed","isProp":true,"doc":"Cantor's intersection theorem:\nthe intersection of a directed family of nonempty compact closed sets is nonempty. ","depth":15},{"type":"∀ {α : Type u} [inst : TopologicalSpace α] {ι : Type u_3} [inst_1 : Nonempty ι] {V : ι → Set α},\n  Directed (fun x x_1 => x ⊇ x_1) V →\n    (∀ (i : ι), IsCompact (V i)) →\n      (∀ (i : ι), IsClosed (V i)) → ∀ {U : Set α}, (∀ (x : α), x ∈ ⋂ (i : ι), V i → U ∈ nhds x) → ∃ i, V i ⊆ U","name":"exists_subset_nhds_of_isCompact'","isProp":true,"doc":"If `V : ι → Set α` is a decreasing family of closed compact sets then any neighborhood of\n`⋂ i, V i` contains some `V i`. We assume each `V i` is compact *and* closed because `α` is\nnot assumed to be Hausdorff. See `exists_subset_nhd_of_compact` for version assuming this. ","depth":18},{"type":"∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : T2Space α] {ι : Type u_2} [inst_2 : Nonempty ι] {V : ι → Set α},\n  Directed (fun x x_1 => x ⊇ x_1) V →\n    (∀ (i : ι), IsCompact (V i)) → ∀ {U : Set α}, (∀ (x : α), x ∈ ⋂ (i : ι), V i → U ∈ nhds x) → ∃ i, V i ⊆ U","name":"exists_subset_nhds_of_isCompact","isProp":true,"doc":"If `V : ι → Set α` is a decreasing family of compact sets then any neighborhood of\n`⋂ i, V i` contains some `V i`. This is a version of `exists_subset_nhds_of_isCompact'` where we\ndon't need to assume each `V i` closed because it follows from compactness since `α` is\nassumed to be Hausdorff. ","depth":18}],"count":17}
{"noDocExamples":[],"kind":"CategoryTheory.LaxMonoidalFunctor.«term_⊗⋙_»","examples":[{"type":"{C : Type u₁} →\n  [inst : CategoryTheory.Category.{v₁, u₁} C] →\n    [inst_1 : CategoryTheory.MonoidalCategory C] →\n      {D : Type u₂} →\n        [inst_2 : CategoryTheory.Category.{v₂, u₂} D] →\n          (e : C ≌ D) →\n            CategoryTheory.LaxMonoidalFunctor.id C ≅\n              CategoryTheory.Monoidal.laxToTransported e ⊗⋙\n                (CategoryTheory.Monoidal.fromTransported e).toLaxMonoidalFunctor","name":"CategoryTheory.Monoidal.transportedMonoidalUnitIso","isProp":false,"doc":"The unit isomorphism upgrades to a monoidal isomorphism. ","depth":20},{"type":"{C : Type u₁} →\n  [inst : CategoryTheory.Category.{v₁, u₁} C] →\n    [inst_1 : CategoryTheory.MonoidalCategory C] →\n      {D : Type u₂} →\n        [inst_2 : CategoryTheory.Category.{v₂, u₂} D] →\n          [inst_3 : CategoryTheory.MonoidalCategory D] →\n            (F : CategoryTheory.MonoidalFunctor C D) →\n              [inst_4 : CategoryTheory.IsEquivalence F.toFunctor] →\n                CategoryTheory.LaxMonoidalFunctor.id C ⟶\n                  F.toLaxMonoidalFunctor ⊗⋙ (CategoryTheory.monoidalInverse F).toLaxMonoidalFunctor","name":"CategoryTheory.monoidalUnit","isProp":false,"doc":"The unit of a monoidal equivalence can be upgraded to a monoidal natural transformation. ","depth":20},{"type":"{C : Type u₁} →\n  [inst : CategoryTheory.Category.{v₁, u₁} C] →\n    [inst_1 : CategoryTheory.MonoidalCategory C] →\n      {D : Type u₂} →\n        [inst_2 : CategoryTheory.Category.{v₂, u₂} D] →\n          [inst_3 : CategoryTheory.MonoidalCategory D] →\n            (F : CategoryTheory.MonoidalFunctor C D) →\n              [inst_4 : CategoryTheory.IsEquivalence F.toFunctor] →\n                (CategoryTheory.monoidalInverse F).toLaxMonoidalFunctor ⊗⋙ F.toLaxMonoidalFunctor ⟶\n                  CategoryTheory.LaxMonoidalFunctor.id D","name":"CategoryTheory.monoidalCounit","isProp":false,"doc":"The counit of a monoidal equivalence can be upgraded to a monoidal natural transformation. ","depth":21}],"count":17}
{"noDocExamples":[{"type":"{C : Type u₁} →\n  [inst : CategoryTheory.Category.{v₁, u₁} C] →\n    [inst_1 : CategoryTheory.MonoidalCategory C] →\n      {X : C} → [inst_2 : CategoryTheory.HasLeftDual X] → CategoryTheory.HasRightDual ᘁX","name":"CategoryTheory.hasRightDualLeftDual","isProp":false,"depth":11},{"type":"{C : Type u₁} →\n  [inst : CategoryTheory.Category.{v₁, u₁} C] →\n    [inst_1 : CategoryTheory.MonoidalCategory C] →\n      {Y : C} → [self : CategoryTheory.HasLeftDual Y] → CategoryTheory.ExactPairing (ᘁY) Y","name":"CategoryTheory.HasLeftDual.exact","isProp":false,"depth":12}],"kind":"CategoryTheory.«termᘁ_»","examples":[{"type":"{C : Type u₁} →\n  [inst : CategoryTheory.Category.{v₁, u₁} C] →\n    [inst_1 : CategoryTheory.MonoidalCategory C] →\n      {X Y : C} →\n        [inst_2 : CategoryTheory.HasLeftDual X] → [inst_3 : CategoryTheory.HasLeftDual Y] → (X ⟶ Y) → (ᘁY ⟶ ᘁX)","name":"CategoryTheory.leftAdjointMate","isProp":false,"doc":"The left adjoint mate `ᘁf : ᘁY ⟶ ᘁX` of a morphism `f : X ⟶ Y`. ","depth":15}],"count":16}
{"noDocExamples":[],"kind":"«term#[_,]»","examples":[{"type":"Lean.Name →\n  List (Bool × Lean.Expr) →\n    optParam (Array Lean.Expr) #[] → optParam (Array Lean.Expr) #[] → Lean.Elab.TermElabM Lean.Expr","name":"Mathlib.Deriving.Traversable.traverseConstructor.mkFunCtor","isProp":false,"doc":"`mkFunCtor ctor [(true, (arg₁ : m type₁)), (false, (arg₂ : type₂)), (true, (arg₃ : m type₃)),\n(false, (arg₄ : type₄))]` makes `fun (x₁ : type₁) (x₃ : type₃) => ctor x₁ arg₂ x₃ arg₄`. ","depth":7},{"type":"Lean.Expr → Lean.Meta.FunInfo → optParam Bool false → optParam (Array Bool) #[] → Lean.MetaM (Lean.Expr × Lean.Expr)","name":"Congr!.mkHCongrThm","isProp":false,"doc":"Create a congruence lemma to prove that `HEq (f a₁ ... aₙ) (f' a₁' ... aₙ')`.\nEach argument produces a `HEq aᵢ aᵢ'` hypothesis, but we also supply these hypotheses the\nhypotheses that the preceding equalities have been proved (unlike in `mkHCongrWithArity`).\nThe first two arguments of the resulting theorem are for `f` and `f'`, followed by a proof\nof `f = f'`.\n\nWhen including hypotheses about previous hypotheses, we make use of dependency information\nand only include relevant equalities.\n\nThe argument `fty` denotes the type of `f`. Returns `(congrThmType, congrThmProof)`.\n\nFor the purpose of generating nicer lemmas that have a better chance at something like\n`to_additive` rewriting, this function supports generating lemmas where certain parameters\nare meant to be fixed.\n\n* If `fixedFun` is `false` (the default) then the lemma starts with three arguments for `f`, `f'`,\nand `h : f = f'`. Otherwise, if `fixedFun` is `true` then the lemma starts with just `f`.\n\n* If the `fixedParams` argument has `true` for a particular argument index, then this is a hint\nthat the congruence lemma may use the same parameter for both sides of the equality. There is\nno guarantee -- it respects it if the types are equal for that parameter (i.e., if the parameter\ndoes not depend on non-fixed parameters).\n","depth":7},{"type":"Lean.Syntax →\n  Lean.Name →\n    optParam Bool false →\n      optParam (Array Simps.ProjectionRule) #[] →\n        optParam Bool false → Lean.CoreM (List Lean.Name × Array Simps.ProjectionData)","name":"Simps.getRawProjections","isProp":false,"doc":"Get the projections used by `simps` associated to a given structure `str`.\n\nThe returned information is also stored in the environment extension `Simps.structureExt`, which\nis given to `str`. If `str` already has this attribute, the information is read from this\nextension instead. See the documentation for this extension for the data this tactic returns.\n\nThe returned universe levels are the universe levels of the structure. For the projections there\nare three cases\n* If the declaration `{StructureName}.Simps.{projectionName}` has been declared, then the value\n  of this declaration is used (after checking that it is definitionally equal to the actual\n  projection. If you rename the projection name, the declaration should have the *new* projection\n  name.\n* You can also declare a custom projection that is a composite of multiple projections.\n* Otherwise, for every class with the `notation_class` attribute, and the structure has an\n  instance of that notation class, then the projection of that notation class is used for the\n  projection that is definitionally equal to it (if there is such a projection).\n  This means in practice that coercions to function types and sorts will be used instead of\n  a projection, if this coercion is definitionally equal to a projection. Furthermore, for\n  notation classes like `Mul` and `Zero` those projections are used instead of the\n  corresponding projection.\n  Projections for coercions and notation classes are not automatically generated if they are\n  composites of multiple projections (for example when you use `extend` without the\n  `oldStructureCmd` (does this exist?)).\n* Otherwise, the projection of the structure is chosen.\n  For example: ``getRawProjections env `Prod`` gives the default projections.\n```\n  ([u, v], [(`fst, `(Prod.fst.{u v}), [0], true, false),\n     (`snd, `(@Prod.snd.{u v}), [1], true, false)])\n```\n\nOptionally, this command accepts three optional arguments:\n* If `traceIfExists` the command will always generate a trace message when the structure already\n  has an entry in `structureExt`.\n* The `rules` argument specifies whether projections should be added, renamed, used as prefix, and\n  not used by default.\n* if `trc` is true, this tactic will trace information just as if\n  `set_option trace.simps.verbose true` was set.\n","depth":9}],"count":16}
{"noDocExamples":[{"type":"{C : Type u₁} →\n  [inst : CategoryTheory.Category.{v₁, u₁} C] →\n    [inst_1 : CategoryTheory.MonoidalCategory C] →\n      {X : C} → [inst_2 : CategoryTheory.HasRightDual X] → CategoryTheory.HasLeftDual Xᘁ","name":"CategoryTheory.hasLeftDualRightDual","isProp":false,"depth":11},{"type":"{C : Type u₁} →\n  [inst : CategoryTheory.Category.{v₁, u₁} C] →\n    [inst_1 : CategoryTheory.MonoidalCategory C] →\n      {X : C} → [self : CategoryTheory.HasRightDual X] → CategoryTheory.ExactPairing X Xᘁ","name":"CategoryTheory.HasRightDual.exact","isProp":false,"depth":11}],"kind":"CategoryTheory.«term_ᘁ»","examples":[{"type":"{C : Type u₁} →\n  [inst : CategoryTheory.Category.{v₁, u₁} C] →\n    [inst_1 : CategoryTheory.MonoidalCategory C] →\n      {X Y : C} →\n        [inst_2 : CategoryTheory.HasRightDual X] → [inst_3 : CategoryTheory.HasRightDual Y] → (X ⟶ Y) → (Yᘁ ⟶ Xᘁ)","name":"CategoryTheory.rightAdjointMate","isProp":false,"doc":"The right adjoint mate `fᘁ : Xᘁ ⟶ Yᘁ` of a morphism `f : X ⟶ Y`. ","depth":15}],"count":16}
{"noDocExamples":[],"kind":"Bundle.«term_*ᵖ_»","examples":[{"type":"{B : Type u_1} →\n  {F : Type u_2} →\n    {E : B → Type u_3} → {B' : Type u_4} → (f : B' → B) → Bundle.TotalSpace F (f *ᵖ E) → B' × Bundle.TotalSpace F E","name":"Bundle.pullbackTotalSpaceEmbedding","isProp":false,"doc":"Natural embedding of the total space of `f *ᵖ E` into `B' × TotalSpace F E`. ","depth":11},{"type":"{B : Type u_1} →\n  {F : Type u_2} →\n    {E : B → Type u_3} → {B' : Type u_4} → (f : B' → B) → Bundle.TotalSpace F (f *ᵖ E) → Bundle.TotalSpace F E","name":"Bundle.Pullback.lift","isProp":false,"doc":"The base map `f : B' → B` lifts to a canonical map on the total spaces. ","depth":11},{"type":"{B : Type u} →\n  (F : Type v) →\n    (E : B → Type w₁) →\n      {B' : Type w₂} →\n        (f : B' → B) →\n          [inst : TopologicalSpace B'] →\n            [inst : TopologicalSpace (Bundle.TotalSpace F E)] → TopologicalSpace (Bundle.TotalSpace F (f *ᵖ E))","name":"Pullback.TotalSpace.topologicalSpace","isProp":false,"doc":"The topology on the total space of a pullback bundle is the coarsest topology for which both\nthe projections to the base and the map to the original bundle are continuous. ","depth":13}],"count":16}
{"noDocExamples":[{"type":"∀ {L : FirstOrder.Language} {T : FirstOrder.Language.Theory L} {φ : FirstOrder.Language.Sentence L}, φ ∈ T → T ⊨ᵇ φ","name":"FirstOrder.Language.Theory.models_sentence_of_mem","isProp":true,"depth":10},{"type":"∀ {L : FirstOrder.Language} {T : FirstOrder.Language.Theory L},\n  FirstOrder.Language.Theory.IsMaximal T → ∀ {φ : FirstOrder.Language.Sentence L}, T ⊨ᵇ φ → φ ∈ T","name":"FirstOrder.Language.Theory.IsMaximal.mem_of_models","isProp":true,"depth":11}],"kind":"FirstOrder.Language.Theory.«term_⊨ᵇ_»","examples":[{"type":"∀ {L : FirstOrder.Language} {T : FirstOrder.Language.Theory L} {φ : FirstOrder.Language.Sentence L},\n  T ⊨ᵇ φ ↔ ∃ T0, ↑T0 ⊆ T ∧ ↑T0 ⊨ᵇ φ","name":"FirstOrder.Language.Theory.models_iff_finset_models","isProp":true,"doc":"An alternative statement of the Compactness Theorem. A formula `φ` is modeled by a\ntheory iff there is a finite subset `T0` of the theory such that `φ` is modeled by `T0` ","depth":14}],"count":14}
{"noDocExamples":[{"type":"∀ (m : ℕ), m <<< 0 = m","name":"Nat.shiftLeft_zero","isProp":true,"depth":9},{"type":"∀ (n : ℕ), 0 <<< n = 0","name":"Nat.zero_shiftLeft","isProp":true,"depth":9}],"kind":"«term_<<<_»","examples":[{"type":"∀ (m n : ℕ), Nat.shiftLeft m n = m <<< n","name":"Nat.shiftLeft_eq'","isProp":true,"doc":"Std4 takes the unprimed name for `Nat.shiftLeft_eq m n : m <<< n = m * 2 ^ n`. ","depth":9}],"count":14}
{"noDocExamples":[{"type":"∀ {α : Type u_1} [inst : Primcodable α] (p : α → Prop), p ≤₀ p","name":"manyOneReducible_refl","isProp":true,"depth":9},{"type":"∀ {α : Type u} [inst : Primcodable α] [inst_1 : Inhabited α] {p : Set α}, p ≤₀ toNat p","name":"manyOneReducible_toNat","isProp":true,"depth":10},{"type":"∀ {α : Type u} [inst : Primcodable α] [inst_1 : Inhabited α] {p : Set α}, toNat p ≤₀ p","name":"toNat_manyOneReducible","isProp":true,"depth":10}],"kind":"«term_≤₀_»","examples":[],"count":14}
{"noDocExamples":[{"type":"∀ {α : Type u_1} (a : Array α) (i : ℕ), Array.get? a i = a[i]?","name":"Array.get?_eq_getElem?","isProp":true,"depth":15},{"type":"∀ {α : Type u_1} (a : Array α) (i : ℕ), a[i]? = List.get? a.data i","name":"Array.getElem?_eq_data_get?","isProp":true,"depth":16},{"type":"∀ {α : Type u_1} (l : List α) (i : ℕ), l[i]? = List.get? l i","name":"List.getElem?_eq_get?","isProp":true,"depth":16}],"kind":"«term__[_]_?»","examples":[],"count":14}
{"noDocExamples":[{"type":"∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] [inst_1 : CategoryTheory.MonoidalCategory C] {X : C}\n  [inst_2 : CategoryTheory.HasRightDual X], CategoryTheory.CategoryStruct.id Xᘁ = CategoryTheory.CategoryStruct.id Xᘁ","name":"CategoryTheory.rightAdjointMate_id","isProp":true,"depth":15},{"type":"∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] [inst_1 : CategoryTheory.MonoidalCategory C] {X Y : C}\n  [inst_2 : CategoryTheory.HasRightDual X] [inst_3 : CategoryTheory.HasRightDual Y] (f : X ⟶ Y),\n  CategoryTheory.CategoryStruct.comp (η_ Y Yᘁ)\n      (CategoryTheory.MonoidalCategory.tensorHom (CategoryTheory.CategoryStruct.id Y) (fᘁ)) =\n    CategoryTheory.CategoryStruct.comp (η_ X Xᘁ)\n      (CategoryTheory.MonoidalCategory.tensorHom f (CategoryTheory.CategoryStruct.id Xᘁ))","name":"CategoryTheory.coevaluation_comp_rightAdjointMate","isProp":true,"depth":20}],"kind":"CategoryTheory.«term_ᘁ_1»","examples":[{"type":"∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] [inst_1 : CategoryTheory.MonoidalCategory C] {X Y Z : C}\n  [inst_2 : CategoryTheory.HasRightDual X] [inst_3 : CategoryTheory.HasRightDual Y]\n  [inst_4 : CategoryTheory.HasRightDual Z] {f : X ⟶ Y} {g : Y ⟶ Z},\n  CategoryTheory.CategoryStruct.comp f gᘁ = CategoryTheory.CategoryStruct.comp (gᘁ) (fᘁ)","name":"CategoryTheory.comp_rightAdjointMate","isProp":true,"doc":"The composition of right adjoint mates is the adjoint mate of the composition. ","depth":22}],"count":13}
{"noDocExamples":[{"type":"∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] [inst_1 : CategoryTheory.MonoidalCategory C] {X : C}\n  [inst_2 : CategoryTheory.HasLeftDual X], (ᘁCategoryTheory.CategoryStruct.id X) = CategoryTheory.CategoryStruct.id ᘁX","name":"CategoryTheory.leftAdjointMate_id","isProp":true,"depth":15},{"type":"∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] [inst_1 : CategoryTheory.MonoidalCategory C] {X Y : C}\n  [inst_2 : CategoryTheory.HasLeftDual X] [inst_3 : CategoryTheory.HasLeftDual Y] (f : X ⟶ Y),\n  CategoryTheory.CategoryStruct.comp\n      (CategoryTheory.MonoidalCategory.tensorHom (CategoryTheory.CategoryStruct.id X) (ᘁf)) (ε_ (ᘁX) X) =\n    CategoryTheory.CategoryStruct.comp\n      (CategoryTheory.MonoidalCategory.tensorHom f (CategoryTheory.CategoryStruct.id ᘁY)) (ε_ (ᘁY) Y)","name":"CategoryTheory.leftAdjointMate_comp_evaluation","isProp":true,"depth":21}],"kind":"CategoryTheory.«termᘁ__1»","examples":[{"type":"∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] [inst_1 : CategoryTheory.MonoidalCategory C] {X Y Z : C}\n  [inst_2 : CategoryTheory.HasLeftDual X] [inst_3 : CategoryTheory.HasLeftDual Y]\n  [inst_4 : CategoryTheory.HasLeftDual Z] {f : X ⟶ Y} {g : Y ⟶ Z},\n  (ᘁCategoryTheory.CategoryStruct.comp f g) = CategoryTheory.CategoryStruct.comp (ᘁg) (ᘁf)","name":"CategoryTheory.comp_leftAdjointMate","isProp":true,"doc":"The composition of left adjoint mates is the adjoint mate of the composition. ","depth":22}],"count":13}
{"noDocExamples":[{"type":"∀ {x : ZFSet}, ZFSet.IsTransitive x → ZFSet.IsTransitive (⋃₀ x)","name":"ZFSet.IsTransitive.sUnion","isProp":true,"depth":4},{"type":"∀ (x : ZFSet), ↑(⋃₀ x) = ⋃₀ ↑x","name":"Class.coe_sUnion","isProp":true,"depth":5}],"kind":"ZFSet.«term⋃₀_»","examples":[{"type":"∀ {x : ZFSet}, ZFSet.IsTransitive x → ⋃₀ x ⊆ x","name":"ZFSet.IsTransitive.sUnion_subset","isProp":true,"doc":"**Alias** of the forward direction of `ZFSet.isTransitive_iff_sUnion_subset`.","depth":6}],"count":12}
{"noDocExamples":[{"type":"∀ (m n : ℕ), Nat.shiftRight m n = m >>> n","name":"Nat.shiftRight_eq","isProp":true,"depth":9},{"type":"∀ (n : ℕ), 0 >>> n = 0","name":"Nat.zero_shiftRight","isProp":true,"depth":9},{"type":"∀ {n : ℕ}, n >>> 0 = n","name":"Nat.shiftRight_zero","isProp":true,"depth":9}],"kind":"«term_>>>_»","examples":[],"count":12}
{"noDocExamples":[{"type":"∀ (a : Cardinal.{u_1}), Monotone fun c => a ^< c","name":"Cardinal.powerlt_mono_left","isProp":true,"depth":6},{"type":"∀ {c : Cardinal.{u_1}}, Cardinal.aleph0 ≤ c → c ^< Cardinal.aleph0 = c","name":"Cardinal.powerlt_aleph0","isProp":true,"depth":6},{"type":"∀ (c : Cardinal.{u_1}), c ^< Cardinal.aleph0 ≤ max c Cardinal.aleph0","name":"Cardinal.powerlt_aleph0_le","isProp":true,"depth":7}],"kind":"Cardinal.«term_^<_»","examples":[],"count":11}
{"noDocExamples":[{"type":"∀ {x y : CategoryTheory.Limits.WalkingParallelFamily (ULift.{w, 0} Bool)} (h : x ⟶ y),\n  CategoryTheory.Limits.walkingParallelFamilyEquivWalkingParallelPair.functor.map h =\n    match x, y, h with\n    | x, .(x), CategoryTheory.Limits.WalkingParallelFamily.Hom.id .(x) =>\n      CategoryTheory.CategoryStruct.id\n        (CategoryTheory.Limits.WalkingParallelFamily.rec CategoryTheory.Limits.WalkingParallelPair.zero\n          CategoryTheory.Limits.WalkingParallelPair.one x)\n    | .(CategoryTheory.Limits.WalkingParallelFamily.zero), .(CategoryTheory.Limits.WalkingParallelFamily.one),\n      CategoryTheory.Limits.WalkingParallelFamily.Hom.line j =>\n      bif j.down then CategoryTheory.Limits.WalkingParallelPairHom.left\n      else CategoryTheory.Limits.WalkingParallelPairHom.right","name":"CategoryTheory.Limits.walkingParallelFamilyEquivWalkingParallelPair_functor_map","isProp":true,"depth":22},{"type":"∀ {X Y : CategoryTheory.Limits.WalkingParallelPair} (h : X ⟶ Y),\n  CategoryTheory.Limits.walkingParallelFamilyEquivWalkingParallelPair.inverse.map h =\n    match X, Y, h with\n    | x, .(x), CategoryTheory.Limits.WalkingParallelPairHom.id .(x) =>\n      CategoryTheory.CategoryStruct.id\n        (match x with\n        | CategoryTheory.Limits.WalkingParallelPair.zero => CategoryTheory.Limits.WalkingParallelFamily.zero\n        | CategoryTheory.Limits.WalkingParallelPair.one => CategoryTheory.Limits.WalkingParallelFamily.one)\n    | .(CategoryTheory.Limits.WalkingParallelPair.zero), .(CategoryTheory.Limits.WalkingParallelPair.one),\n      CategoryTheory.Limits.WalkingParallelPairHom.left =>\n      CategoryTheory.Limits.WalkingParallelFamily.Hom.line { down := true }\n    | .(CategoryTheory.Limits.WalkingParallelPair.zero), .(CategoryTheory.Limits.WalkingParallelPair.one),\n      CategoryTheory.Limits.WalkingParallelPairHom.right =>\n      CategoryTheory.Limits.WalkingParallelFamily.Hom.line { down := false }","name":"CategoryTheory.Limits.walkingParallelFamilyEquivWalkingParallelPair_inverse_map","isProp":true,"depth":23},{"type":"∀ {ι α : Type u_1} (U : ι → α) [inst : SemilatticeInf α] (X : CategoryTheory.Pairwise ι),\n  (match X, X, CategoryTheory.CategoryStruct.id X with\n    | .(CategoryTheory.Pairwise.single i), .(CategoryTheory.Pairwise.single i),\n      CategoryTheory.Pairwise.Hom.id_single i => CategoryTheory.CategoryStruct.id (U i)\n    | .(CategoryTheory.Pairwise.pair i j), .(CategoryTheory.Pairwise.pair i j),\n      CategoryTheory.Pairwise.Hom.id_pair i j => CategoryTheory.CategoryStruct.id (U i ⊓ U j)\n    | .(CategoryTheory.Pairwise.pair i j), .(CategoryTheory.Pairwise.single i), CategoryTheory.Pairwise.Hom.left i j =>\n      CategoryTheory.homOfLE (_ : U i ⊓ U j ≤ U i)\n    | .(CategoryTheory.Pairwise.pair i j), .(CategoryTheory.Pairwise.single j), CategoryTheory.Pairwise.Hom.right i j =>\n      CategoryTheory.homOfLE (_ : U i ⊓ U j ≤ U j)) =\n    CategoryTheory.CategoryStruct.id\n      (match X with\n      | CategoryTheory.Pairwise.single i => U i\n      | CategoryTheory.Pairwise.pair i j => U i ⊓ U j)","name":"CategoryTheory.Pairwise.diagram.proof_1","isProp":true,"depth":28}],"kind":"Lean.Parser.Term.inaccessible","examples":[],"count":11}
{"noDocExamples":[],"kind":"«term∯_InT(_,_),_»","examples":[{"type":"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] (f : (Fin 1 → ℂ) → E) (c : Fin 1 → ℂ)\n  (R : Fin 1 → ℝ), (∯ (x : Fin 1 → ℂ) in T(c, R), f x) = ∮ (z : ℂ) in C(c 0, R 0), f fun x => z","name":"torusIntegral_dim1","isProp":true,"doc":"In dimension one, `torusIntegral` is the same as `circleIntegral`\n(up to the natural equivalence between `ℂ` and `Fin 1 → ℂ`). ","depth":18},{"type":"∀ {n : ℕ} {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {f : (Fin n → ℂ) → E} {c : Fin n → ℂ}\n  {R : Fin n → ℝ} {C : ℝ},\n  (∀ (θ : Fin n → ℝ), ‖f (torusMap c R θ)‖ ≤ C) →\n    ‖∯ (x : Fin n → ℂ) in T(c, R), f x‖ ≤ ((2 * Real.pi) ^ n * Finset.prod Finset.univ fun i => |R i|) * C","name":"norm_torusIntegral_le_of_norm_le_const","isProp":true,"doc":"If for all `θ : ℝⁿ`, `‖f (torusMap c R θ)‖` is less than or equal to a constant `C : ℝ`, then\n`‖∯ x in T(c, R), f x‖` is less than or equal to `(2 * π)^n * (∏ i, |R i|) * C`","depth":24},{"type":"∀ {n : ℕ} {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E]\n  {f : (Fin (n + 1) → ℂ) → E} {c : Fin (n + 1) → ℂ} {R : Fin (n + 1) → ℝ},\n  TorusIntegrable f c R →\n    (∯ (x : Fin (n + 1) → ℂ) in T(c, R), f x) =\n      ∮ (x : ℂ) in C(c 0, R 0), ∯ (y : Fin n → ℂ) in T(c ∘ Fin.succ, R ∘ Fin.succ), f (Fin.cons x y)","name":"torusIntegral_succ","isProp":true,"doc":"Recurrent formula for `torusIntegral`, see also `torusIntegral_succAbove`. ","depth":30}],"count":11}
{"noDocExamples":[{"type":"∀ {α : Type u_1} [inst : Primcodable α] (p : α → Prop), p ≤₁ p","name":"oneOneReducible_refl","isProp":true,"depth":9},{"type":"∀ {α : Type u_1} {β : Type u_2} [inst : Primcodable α] [inst_1 : Primcodable β] {p : α → Prop} {q : β → Prop},\n  p ≤₁ Sum.elim p q","name":"OneOneReducible.disjoin_left","isProp":true,"depth":13},{"type":"∀ {α : Type u_1} {β : Type u_2} [inst : Primcodable α] [inst_1 : Primcodable β] {p : α → Prop} {q : β → Prop},\n  p ≤₁ q → p ≤₀ q","name":"OneOneReducible.to_many_one","isProp":true,"depth":13}],"kind":"«term_≤₁_»","examples":[],"count":11}
{"noDocExamples":[],"kind":"CategoryTheory.«term_⥤ₗ_»","examples":[{"type":"{C : Type u₁} →\n  [inst : CategoryTheory.Category.{v₁, u₁} C] →\n    {D : Type u₂} →\n      [inst_1 : CategoryTheory.Category.{v₂, u₂} D] →\n        (F : CategoryTheory.Functor C D) → [inst_2 : CategoryTheory.Limits.PreservesFiniteLimits F] → C ⥤ₗ D","name":"CategoryTheory.LeftExactFunctor.of","isProp":false,"doc":"Turn a left exact functor into an object of the category `LeftExactFunctor C D`. ","depth":11},{"type":"(C : Type u₁) →\n  [inst : CategoryTheory.Category.{v₁, u₁} C] →\n    (D : Type u₂) → [inst_1 : CategoryTheory.Category.{v₂, u₂} D] → CategoryTheory.Functor (C ⥤ₑ D) (C ⥤ₗ D)","name":"CategoryTheory.LeftExactFunctor.ofExact","isProp":false,"doc":"Turn an exact functor into a left exact functor. ","depth":12},{"type":"(C : Type u₁) →\n  [inst : CategoryTheory.Category.{v₁, u₁} C] →\n    (D : Type u₂) →\n      [inst_1 : CategoryTheory.Category.{v₂, u₂} D] → CategoryTheory.Functor (C ⥤ₗ D) (CategoryTheory.Functor C D)","name":"CategoryTheory.LeftExactFunctor.forget","isProp":false,"doc":"A left exact functor is in particular a functor. ","depth":12}],"count":11}
{"noDocExamples":[],"kind":"CategoryTheory.«term_⥤ᵣ_»","examples":[{"type":"{C : Type u₁} →\n  [inst : CategoryTheory.Category.{v₁, u₁} C] →\n    {D : Type u₂} →\n      [inst_1 : CategoryTheory.Category.{v₂, u₂} D] →\n        (F : CategoryTheory.Functor C D) → [inst_2 : CategoryTheory.Limits.PreservesFiniteColimits F] → C ⥤ᵣ D","name":"CategoryTheory.RightExactFunctor.of","isProp":false,"doc":"Turn a right exact functor into an object of the category `RightExactFunctor C D`. ","depth":11},{"type":"(C : Type u₁) →\n  [inst : CategoryTheory.Category.{v₁, u₁} C] →\n    (D : Type u₂) →\n      [inst_1 : CategoryTheory.Category.{v₂, u₂} D] → CategoryTheory.Functor (C ⥤ᵣ D) (CategoryTheory.Functor C D)","name":"CategoryTheory.RightExactFunctor.forget","isProp":false,"doc":"A right exact functor is in particular a functor. ","depth":12},{"type":"(C : Type u₁) →\n  [inst : CategoryTheory.Category.{v₁, u₁} C] →\n    (D : Type u₂) → [inst_1 : CategoryTheory.Category.{v₂, u₂} D] → CategoryTheory.Functor (C ⥤ₑ D) (C ⥤ᵣ D)","name":"CategoryTheory.RightExactFunctor.ofExact","isProp":false,"doc":"Turn an exact functor into a left exact functor. ","depth":12}],"count":11}
{"noDocExamples":[{"type":"∀ {U : Type u_1} [inst : Quiver U] [inst_1 : Quiver.HasReverse U], Prefunctor.MapReverse (𝟭q U)","name":"Prefunctor.mapReverseId","isProp":true,"depth":10},{"type":"∀ {U : Type u_1} [inst : Quiver U] [inst_1 : Quiver.HasReverse U], Prefunctor.MapReverse (𝟭q U)","name":"Prefunctor.mapReverseId.proof_1","isProp":true,"depth":10},{"type":"∀ {V : Type u} [inst : Quiver V],\n  CategoryTheory.freeGroupoidFunctor (𝟭q V) = CategoryTheory.Functor.id (CategoryTheory.FreeGroupoid V)","name":"CategoryTheory.Groupoid.Free.freeGroupoidFunctor_id","isProp":true,"depth":11}],"kind":"Prefunctor.«term𝟭q»","examples":[],"count":11}
{"noDocExamples":[{"type":"∀ {α : Type u} (s : Stream' α), [] ++ₛ s = s","name":"Stream'.nil_append_stream","isProp":true,"depth":7},{"type":"∀ {α : Type u} (l : List α) (h : l ≠ []), Stream'.cycle l h = l ++ₛ Stream'.cycle l h","name":"Stream'.cycle_eq","isProp":true,"depth":8},{"type":"∀ {α : Type u} (l : List α) (s : Stream' α), ↑(l ++ₛ s) = Stream'.Seq.append ↑l ↑s","name":"Stream'.Seq.ofStream_append","isProp":true,"depth":9}],"kind":"Stream'.«term_++ₛ_»","examples":[],"count":11}
{"noDocExamples":[],"kind":"CategoryTheory.«term_⥤+_»","examples":[{"type":"{C : Type u_1} →\n  {D : Type u_2} →\n    [inst : CategoryTheory.Category.{u_3, u_1} C] →\n      [inst_1 : CategoryTheory.Category.{u_4, u_2} D] →\n        [inst_2 : CategoryTheory.Preadditive C] →\n          [inst_3 : CategoryTheory.Preadditive D] →\n            (F : CategoryTheory.Functor C D) → [inst_4 : CategoryTheory.Functor.Additive F] → C ⥤+ D","name":"CategoryTheory.AdditiveFunctor.of","isProp":false,"doc":"Turn an additive functor into an object of the category `AdditiveFunctor C D`. ","depth":15},{"type":"(C : Type u_1) →\n  (D : Type u_2) →\n    [inst : CategoryTheory.Category.{u_3, u_1} C] →\n      [inst_1 : CategoryTheory.Category.{u_4, u_2} D] →\n        [inst_2 : CategoryTheory.Preadditive C] →\n          [inst_3 : CategoryTheory.Preadditive D] → CategoryTheory.Functor (C ⥤+ D) (CategoryTheory.Functor C D)","name":"CategoryTheory.AdditiveFunctor.forget","isProp":false,"doc":"An additive functor is in particular a functor. ","depth":16},{"type":"(C : Type u₁) →\n  (D : Type u₂) →\n    [inst : CategoryTheory.Category.{v₁, u₁} C] →\n      [inst_1 : CategoryTheory.Category.{v₂, u₂} D] →\n        [inst_2 : CategoryTheory.Preadditive C] →\n          [inst_3 : CategoryTheory.Preadditive D] →\n            [inst_4 : CategoryTheory.Limits.HasZeroObject C] →\n              [inst_5 : CategoryTheory.Limits.HasZeroObject D] →\n                [inst_6 : CategoryTheory.Limits.HasBinaryBiproducts C] → CategoryTheory.Functor (C ⥤ₗ D) (C ⥤+ D)","name":"CategoryTheory.AdditiveFunctor.ofLeftExact","isProp":false,"doc":"Turn a left exact functor into an additive functor. ","depth":17}],"count":11}
{"noDocExamples":[],"kind":"MeasureTheory.«term∫⁻_In_,_»","examples":[{"type":"∀ (t : ℝ) (f : UnitAddCircle → ENNReal), ∫⁻ (a : ℝ) in Set.Ioc t (t + 1), f ↑a = ∫⁻ (b : UnitAddCircle), f b","name":"UnitAddCircle.lintegral_preimage","isProp":true,"doc":"The integral of a measurable function over `UnitAddCircle` is equal to the integral over an\ninterval (t, t + 1] in `ℝ` of its lift to `ℝ`. ","depth":15},{"type":"∀ (T : ℝ) [hT : Fact (0 < T)] (t : ℝ) (f : AddCircle T → ENNReal),\n  ∫⁻ (a : ℝ) in Set.Ioc t (t + T), f ↑a = ∫⁻ (b : AddCircle T), f b","name":"AddCircle.lintegral_preimage","isProp":true,"doc":"The lower integral of a function over `AddCircle T` is equal to the lower integral over an\ninterval (t, t + T] in `ℝ` of its lift to `ℝ`. ","depth":17},{"type":"∀ {α : Type u_1} [inst : MeasurableSpace α] {f : α → ℝ} (μ : MeasureTheory.Measure α)\n  [inst_1 : MeasureTheory.SigmaFinite μ],\n  0 ≤ f → Measurable f → ∫⁻ (ω : α), ENNReal.ofReal (f ω) ∂μ = ∫⁻ (t : ℝ) in Set.Ioi 0, ↑↑μ {a | t < f a}","name":"lintegral_eq_lintegral_meas_lt","isProp":true,"doc":"The standard case of the layer cake formula / Cavalieri's principle / tail probability formula:\n\nFor a nonnegative function `f` on a sigma-finite measure space, the Lebesgue integral of `f` can\nbe written (roughly speaking) as: `∫⁻ f ∂μ = ∫⁻ t in (0).. ∞, μ {ω | f(ω) > t}`.\n\nSee `lintegral_eq_lintegral_meas_le` for a version with sets of the form `{ω | f(ω) ≥ t}`\ninstead. ","depth":17}],"count":10}
{"noDocExamples":[{"type":"∀ {α : Type u} (s₁ : Stream' α), Stream'.even s₁ ⋈ Stream'.odd s₁ = s₁","name":"Stream'.interleave_even_odd","isProp":true,"depth":8},{"type":"∀ {α : Type u} (s₁ s₂ : Stream' α), Stream'.tail s₁ ⋈ Stream'.tail s₂ = Stream'.tail (Stream'.tail (s₁ ⋈ s₂))","name":"Stream'.interleave_tail_tail","isProp":true,"depth":9},{"type":"∀ {α : Type u} (s₁ s₂ : Stream' α), Stream'.tail (s₁ ⋈ s₂) = s₂ ⋈ Stream'.tail s₁","name":"Stream'.tail_interleave","isProp":true,"depth":9}],"kind":"Stream'.«term_⋈_»","examples":[],"count":9}
{"noDocExamples":[{"type":"∀ {R : Type u_1} {M : Type u_2} [inst : CommSemiring R] [inst_1 : AddCommMonoid M] [inst_2 : Module R M] (x : M),\n  ↑TensorAlgebra.toDirectSum (↑(TensorAlgebra.ι R) x) =\n    ↑(DirectSum.of (fun n => TensorPower R n M) 1) (⨂ₜ[R] (x_1 : Fin 1), x)","name":"TensorAlgebra.toDirectSum_ι","isProp":true,"depth":39},{"type":"∀ {ι : Type u_1} {ι₂ : Type u_2} {R : Type u_4} [inst : CommSemiring R] {M : Type u_8} [inst_1 : AddCommMonoid M]\n  [inst_2 : Module R M] (e : ι ≃ ι₂) (f : ι → M),\n  ↑(PiTensorProduct.reindex R M e) (↑(PiTensorProduct.tprod R) f) = ⨂ₜ[R] (i : ι₂), f (↑e.symm i)","name":"PiTensorProduct.reindex_tprod","isProp":true,"depth":43}],"kind":"PiTensorProduct.«term⨂ₜ[_]_,_»","examples":[{"type":"∀ {R : Type u_1} {M : Type u_2} [inst : CommSemiring R] [inst_1 : AddCommMonoid M] [inst_2 : Module R M] (n : ℕ)\n  (x : Fin n → M),\n  List.prod (List.map (fun a => GradedMonoid.mk 1 (⨂ₜ[R] (x_1 : Fin 1), x a)) (List.finRange n)) =\n    GradedMonoid.mk n (↑(PiTensorProduct.tprod R) x)","name":"TensorPower.list_prod_gradedMonoid_mk_single","isProp":true,"doc":"The product of tensor products made of a single vector is the same as a single product of\nall the vectors. ","depth":36}],"count":7}
{"noDocExamples":[{"type":"⋂₀ ∅ = ∅","name":"ZFSet.sInter_empty","isProp":true,"depth":5},{"type":"∀ {x : ZFSet}, ZFSet.Nonempty x → ↑(⋂₀ x) = ⋂₀ ↑x","name":"Class.coe_sInter","isProp":true,"depth":6},{"type":"∀ {x : ZFSet}, ⋂₀ {x} = x","name":"ZFSet.sInter_singleton","isProp":true,"depth":8}],"kind":"ZFSet.«term⋂₀_»","examples":[],"count":7}
{"noDocExamples":[],"kind":"«term_≃ₗᵢ⋆[_]_»","examples":[{"type":"(𝕜 : Type u_1) →\n  {E : Type u_2} →\n    [inst : CommSemiring 𝕜] →\n      [inst_1 : StarRing 𝕜] →\n        [inst_2 : SeminormedAddCommGroup E] →\n          [inst_3 : StarAddMonoid E] →\n            [inst_4 : NormedStarGroup E] → [inst_5 : Module 𝕜 E] → [inst_6 : StarModule 𝕜 E] → E ≃ₗᵢ⋆[𝕜] E","name":"starₗᵢ","isProp":false,"doc":"`star` bundled as a linear isometric equivalence ","depth":23},{"type":"(𝕜 : Type u_1) →\n  (E : Type u_2) →\n    [inst : IsROrC 𝕜] →\n      [inst_1 : NormedAddCommGroup E] →\n        [inst_2 : InnerProductSpace 𝕜 E] → [inst_3 : CompleteSpace E] → E ≃ₗᵢ⋆[𝕜] NormedSpace.Dual 𝕜 E","name":"InnerProductSpace.toDual","isProp":false,"doc":"Fréchet-Riesz representation: any `ℓ` in the dual of a Hilbert space `E` is of the form\n`fun u => ⟪y, u⟫` for some `y : E`, i.e. `toDualMap` is surjective.\n","depth":25},{"type":"∀ {M : Type u} [inst : NormedRing M] [inst_1 : StarRing M] [inst_2 : CstarRing M] [inst_3 : Module ℂ M]\n  [inst_4 : NormedAlgebra ℂ M] [inst_5 : StarModule ℂ M] [self : WStarAlgebra M],\n  ∃ X x x_1 x_2, Nonempty (NormedSpace.Dual ℂ X ≃ₗᵢ⋆[ℂ] M)","name":"WStarAlgebra.exists_predual","isProp":true,"doc":"There is a Banach space `X` whose dual is isometrically (conjugate-linearly) isomorphic\nto the `WStarAlgebra`. ","depth":31}],"count":5}
{"noDocExamples":[{"type":"∀ {Ω : Type u_1} [inst : MeasureTheory.MeasureSpace Ω]\n  [inst_1 : MeasureTheory.IsProbabilityMeasure MeasureTheory.volume] {X : Ω → ℝ},\n  MeasureTheory.AEStronglyMeasurable X MeasureTheory.volume →\n    ProbabilityTheory.evariance X MeasureTheory.volume =\n      (∫⁻ (ω : Ω), ↑(‖X ω‖₊ ^ 2)) - ENNReal.ofReal ((∫ (a : Ω), X a) ^ 2)","name":"ProbabilityTheory.evariance_def'","isProp":true,"depth":22}],"kind":"MeasureTheory.«term∫⁻_,_»","examples":[{"type":"∀ (t : ℝ) (f : UnitAddCircle → ENNReal), ∫⁻ (a : ℝ) in Set.Ioc t (t + 1), f ↑a = ∫⁻ (b : UnitAddCircle), f b","name":"UnitAddCircle.lintegral_preimage","isProp":true,"doc":"The integral of a measurable function over `UnitAddCircle` is equal to the integral over an\ninterval (t, t + 1] in `ℝ` of its lift to `ℝ`. ","depth":15},{"type":"∀ (T : ℝ) [hT : Fact (0 < T)] (t : ℝ) (f : AddCircle T → ENNReal),\n  ∫⁻ (a : ℝ) in Set.Ioc t (t + T), f ↑a = ∫⁻ (b : AddCircle T), f b","name":"AddCircle.lintegral_preimage","isProp":true,"doc":"The lower integral of a function over `AddCircle T` is equal to the lower integral over an\ninterval (t, t + T] in `ℝ` of its lift to `ℝ`. ","depth":17}],"count":5}
{"noDocExamples":[{"type":"∀ {α : Type u} [inst : Lattice α] [inst_1 : AddGroup α] (a : α), |(-a)| = |a|","name":"LatticeOrderedGroup.abs_neg","isProp":true,"depth":15}],"kind":"Lean.Parser.Term.paren","examples":[{"type":"∀ {α : Type u} [inst : Lattice α] [inst_1 : AddGroup α]\n  [inst_2 : CovariantClass α α (fun x x_1 => x + x_1) fun x x_1 => x ≤ x_1]\n  [inst_3 : CovariantClass α α (Function.swap fun x x_1 => x + x_1) fun x x_1 => x ≤ x_1] (a : α), |(|a|)| = |a|","name":"LatticeOrderedGroup.abs_abs","isProp":true,"doc":"The unary operation of taking the absolute value is idempotent.","depth":19},{"type":"∀ {α : Type u} [inst : Lattice α] [inst_1 : Group α]\n  [inst_2 : CovariantClass α α (fun x x_1 => x * x_1) fun x x_1 => x ≤ x_1]\n  [inst_3 : CovariantClass α α (Function.swap fun x x_1 => x * x_1) fun x x_1 => x ≤ x_1] (a : α), |(|a|)| = |a|","name":"LatticeOrderedGroup.mabs_mabs","isProp":true,"doc":"The unary operation of taking the absolute value is idempotent. ","depth":19}],"count":5}
{"noDocExamples":[{"type":"∀ {α : Type u_1} [inst : MeasurableSpace α] {μ : MeasureTheory.Measure α} {p : α → Prop},\n  (∃ᵐ (a : α) ∂μ, p a) ↔ ↑↑μ {a | p a} ≠ 0","name":"MeasureTheory.frequently_ae_iff","isProp":true,"depth":12},{"type":"∀ {α : Type u_1} [inst : MeasurableSpace α] {μ : MeasureTheory.Measure α} {s : Set α},\n  (∃ᵐ (a : α) ∂μ, a ∈ s) ↔ ↑↑μ s ≠ 0","name":"MeasureTheory.frequently_ae_mem_iff","isProp":true,"depth":14}],"kind":"MeasureTheory.«term∃ᵐ_∂_,_»","examples":[{"type":"∀ {α : Type u_2} [inst : MeasurableSpace α] {f : α → α} {s : Set α} {μ : MeasureTheory.Measure α},\n  MeasureTheory.Conservative f μ →\n    MeasurableSet s → ↑↑μ s ≠ 0 → ∃ᵐ (x : α) ∂μ, x ∈ s ∧ ∃ᶠ (n : ℕ) in Filter.atTop, f^[n] x ∈ s","name":"MeasureTheory.Conservative.frequently_ae_mem_and_frequently_image_mem","isProp":true,"doc":"If `f` is a conservative self-map and `s` is a measurable set of positive measure, then\n`μ.ae`-frequently we have `x ∈ s` and `s` returns to `s` under infinitely many iterations of `f`. ","depth":21}],"count":5}
{"noDocExamples":[{"type":"⋂₀ ∅ = Class.univ","name":"Class.sInter_empty","isProp":true,"depth":5},{"type":"∀ {x : ZFSet}, ZFSet.Nonempty x → ↑(⋂₀ x) = ⋂₀ ↑x","name":"Class.coe_sInter","isProp":true,"depth":6},{"type":"∀ {x : Class} {y : ZFSet}, (⋂₀ x) y ↔ ∀ (z : ZFSet), x z → y ∈ z","name":"Class.sInter_apply","isProp":true,"depth":10}],"kind":"Class.«term⋂₀_»","examples":[],"count":5}
{"noDocExamples":[{"type":"∀ {α : Type u} (s : Stream' α), Stream'.pure id ⊛ s = s","name":"Stream'.identity","isProp":true,"depth":9},{"type":"∀ {α : Type u} {β : Type v} (f : α → β) (s : Stream' α), Stream'.map f s = Stream'.pure f ⊛ s","name":"Stream'.map_eq_apply","isProp":true,"depth":10},{"type":"∀ {α : Type u} {β : Type v} (f : α → β) (a : α), Stream'.pure f ⊛ Stream'.pure a = Stream'.pure (f a)","name":"Stream'.homomorphism","isProp":true,"depth":11}],"kind":"Stream'.«term_⊛_»","examples":[],"count":5}
{"noDocExamples":[{"type":"∀ {m : Type u → Type v} [inst : Monad m] [inst_1 : LawfulMonad m] {α : Type u_1} {β : Type u} (f : α → m β),\n  f >=> pure = f","name":"fish_pure","isProp":true,"depth":15},{"type":"∀ (m : Type u_1 → Type u_1) [inst : Monad m] [inst_1 : LawfulMonad m] {X Y : CategoryTheory.KleisliCat m} (f : X ⟶ Y),\n  f >=> pure = pure >=> f","name":"CategoryTheory.eq.proof_5","isProp":true,"depth":15},{"type":"∀ {m : Type u → Type v} [inst : Monad m] [inst_1 : LawfulMonad m] {α β : Type u} (f : α → m β), pure >=> f = f","name":"fish_pipe","isProp":true,"depth":15}],"kind":"«term_>=>_»","examples":[],"count":4}
{"noDocExamples":[{"type":"∀ (x : ZFSet), ↑(⋃₀ x) = ⋃₀ ↑x","name":"Class.coe_sUnion","isProp":true,"depth":5},{"type":"⋃₀ ∅ = ∅","name":"Class.sUnion_empty","isProp":true,"depth":5},{"type":"∀ {x : Class} {y : ZFSet}, (⋃₀ x) y ↔ ∃ z, x z ∧ y ∈ z","name":"Class.sUnion_apply","isProp":true,"depth":11}],"kind":"Class.«term⋃₀_»","examples":[],"count":4}
{"noDocExamples":[{"type":"∀ (x : PSet), PSet.toSet (⋃₀ x) = ⋃₀ (PSet.toSet '' PSet.toSet x)","name":"PSet.toSet_sUnion","isProp":true,"depth":7},{"type":"∀ (x x_1 : PSet), PSet.Equiv x x_1 → PSet.Arity.Equiv (⋃₀ x) (⋃₀ x_1)","name":"ZFSet.sUnion.proof_1","isProp":true,"depth":8},{"type":"∀ {x y : PSet}, y ∈ ⋃₀ x ↔ ∃ z, z ∈ x ∧ y ∈ z","name":"PSet.mem_sUnion","isProp":true,"depth":12}],"kind":"PSet.«term⋃₀_»","examples":[],"count":4}
{"noDocExamples":[{"type":"∀ {α : Type u_1} [inst : BEq α] [inst_1 : LawfulBEq α] (a : α), (a != a) = false","name":"bne_self_eq_false","isProp":true,"depth":10},{"type":"∀ {α : Type u_1} [inst : DecidableEq α] (a : α), (a != a) = false","name":"bne_self_eq_false'","isProp":true,"depth":13},{"type":"∀ {α : Type u_1} [inst : BEq α] [inst_1 : LawfulBEq α] (a b : α), (a != b) = true ↔ a ≠ b","name":"bne_iff_ne","isProp":true,"depth":13}],"kind":"«term_!=_»","examples":[],"count":3}
{"noDocExamples":[{"type":"∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] [inst_1 : CategoryTheory.MonoidalCategory C] {D : Type u₂}\n  [inst_2 : CategoryTheory.Category.{v₂, u₂} D] [inst_3 : CategoryTheory.MonoidalCategory D] {E : Type u₃}\n  [inst_4 : CategoryTheory.Category.{v₃, u₃} E] [inst_5 : CategoryTheory.MonoidalCategory E]\n  (F : CategoryTheory.MonoidalFunctor C D) (G : CategoryTheory.MonoidalFunctor D E),\n  (F ⊗⋙ G).toLaxMonoidalFunctor = F.toLaxMonoidalFunctor ⊗⋙ G.toLaxMonoidalFunctor","name":"CategoryTheory.MonoidalFunctor.comp_toLaxMonoidalFunctor","isProp":true,"depth":25}],"kind":"CategoryTheory.MonoidalFunctor.«term_⊗⋙_»","examples":[{"type":"{M : Type u} →\n  [inst : Monoid M] →\n    {N : Type u} →\n      [inst_1 : Monoid N] →\n        {K : Type u} →\n          [inst_2 : Monoid K] →\n            (F : M →* N) →\n              (G : N →* K) →\n                CategoryTheory.Discrete.monoidalFunctor F ⊗⋙ CategoryTheory.Discrete.monoidalFunctor G ≅\n                  CategoryTheory.Discrete.monoidalFunctor (MonoidHom.comp G F)","name":"CategoryTheory.Discrete.monoidalFunctorComp","isProp":false,"doc":"The monoidal natural isomorphism corresponding to composing two multiplicative morphisms.\n","depth":22},{"type":"{M : Type u} →\n  [inst : AddMonoid M] →\n    {N : Type u} →\n      [inst_1 : AddMonoid N] →\n        {K : Type u} →\n          [inst_2 : AddMonoid K] →\n            (F : M →+ N) →\n              (G : N →+ K) →\n                CategoryTheory.Discrete.addMonoidalFunctor F ⊗⋙ CategoryTheory.Discrete.addMonoidalFunctor G ≅\n                  CategoryTheory.Discrete.addMonoidalFunctor (AddMonoidHom.comp G F)","name":"CategoryTheory.Discrete.addMonoidalFunctorComp","isProp":false,"doc":"The monoidal natural isomorphism corresponding to\ncomposing two additive morphisms.","depth":22}],"count":3}
{"noDocExamples":[{"type":"∀ (F A : Class), F ′ A ∈ Class.univ","name":"Class.fval_ex","isProp":true,"depth":7},{"type":"∀ (x : ZFSet), ¬∅ ∈ x → ∀ (y : ZFSet), y ∈ x → ↑(ZFSet.choice x) ′ ↑y ∈ ↑y","name":"ZFSet.choice_mem","isProp":true,"depth":10},{"type":"∀ {f : ZFSet → ZFSet} [H : PSet.Definable 1 f] {x y : ZFSet}, y ∈ x → ↑(ZFSet.map f x) ′ ↑y = ↑(f y)","name":"ZFSet.map_fval","isProp":true,"depth":13}],"kind":"Class.«term_′_»","examples":[],"count":3}
{"noDocExamples":[{"type":"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] (f : ℝ → E) (a b : ℝ),\n  ⨍ (x : ℝ) in a..b, f x = ⨍ (x : ℝ) in b..a, f x","name":"interval_average_symm","isProp":true,"depth":15},{"type":"∀ (f : ℝ → ℝ) (a b : ℝ), ⨍ (x : ℝ) in a..b, f x = (∫ (x : ℝ) in a..b, f x) / (b - a)","name":"interval_average_eq_div","isProp":true,"depth":16},{"type":"∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] (f : ℝ → E) (a b : ℝ),\n  ⨍ (x : ℝ) in a..b, f x = (b - a)⁻¹ • ∫ (x : ℝ) in a..b, f x","name":"interval_average_eq","isProp":true,"depth":22}],"kind":"«term⨍_In_.._,_»","examples":[],"count":3}
{"noDocExamples":[],"kind":"«term_≃ₗ⋆[_]_»","examples":[{"type":"(R : Type u_1) →\n  {A : Type u_2} →\n    [inst : CommSemiring R] →\n      [inst_1 : StarRing R] →\n        [inst_2 : AddCommMonoid A] →\n          [inst_3 : StarAddMonoid A] → [inst_4 : Module R A] → [inst_5 : StarModule R A] → A ≃ₗ⋆[R] A","name":"starLinearEquiv","isProp":false,"doc":"If `A` is a module over a commutative `R` with compatible actions,\nthen `star` is a semilinear equivalence. ","depth":22},{"type":"(m : Type u_2) →\n  (n : Type u_3) →\n    (R : Type u_7) →\n      (α : Type v) →\n        [inst : CommSemiring R] →\n          [inst_1 : StarRing R] →\n            [inst_2 : AddCommMonoid α] →\n              [inst_3 : StarAddMonoid α] →\n                [inst_4 : Module R α] → [inst_5 : StarModule R α] → Matrix m n α ≃ₗ⋆[R] Matrix n m α","name":"Matrix.conjTransposeLinearEquiv","isProp":false,"doc":"`Matrix.conjTranspose` as a `LinearMap` ","depth":24},{"type":"{𝕜 : Type u_1} →\n  {E : Type u_2} →\n    {F : Type u_3} →\n      [inst : IsROrC 𝕜] →\n        [inst_1 : NormedAddCommGroup E] →\n          [inst_2 : NormedAddCommGroup F] →\n            [inst_3 : InnerProductSpace 𝕜 E] →\n              [inst_4 : InnerProductSpace 𝕜 F] →\n                [inst_5 : FiniteDimensional 𝕜 E] → [inst_6 : FiniteDimensional 𝕜 F] → (E →ₗ[𝕜] F) ≃ₗ⋆[𝕜] F →ₗ[𝕜] E","name":"LinearMap.adjoint","isProp":false,"doc":"The adjoint of an operator from the finite-dimensional inner product space `E` to the\nfinite-dimensional inner product space `F`. ","depth":32}],"count":3}
{"noDocExamples":[],"kind":"«term_→ₗ⋆[_]_»","examples":[{"type":"{𝕜 : Type u_1} →\n  {E : Type u_2} →\n    [inst : IsROrC 𝕜] → [inst_1 : NormedAddCommGroup E] → [inst_2 : InnerProductSpace 𝕜 E] → E →ₗ[𝕜] E →ₗ⋆[𝕜] 𝕜","name":"sesqFormOfInner","isProp":false,"doc":"The inner product as a sesquilinear form.\n\nNote that in the case `𝕜 = ℝ` this is a bilinear form. ","depth":26},{"type":"(𝕜 : Type u_1) →\n  {E : Type u_2} →\n    [inst : IsROrC 𝕜] → [inst_1 : NormedAddCommGroup E] → [inst_2 : InnerProductSpace 𝕜 E] → E →ₗ⋆[𝕜] E →ₗ[𝕜] 𝕜","name":"innerₛₗ","isProp":false,"doc":"The inner product as a sesquilinear map. ","depth":26}],"count":2}
{"noDocExamples":[],"kind":"«term_→ₗᵢ⋆[_]_»","examples":[{"type":"(𝕜 : Type u_1) →\n  (E : Type u_2) →\n    [inst : IsROrC 𝕜] →\n      [inst_1 : NormedAddCommGroup E] → [inst_2 : InnerProductSpace 𝕜 E] → E →ₗᵢ⋆[𝕜] NormedSpace.Dual 𝕜 E","name":"InnerProductSpace.toDualMap","isProp":false,"doc":"An element `x` of an inner product space `E` induces an element of the dual space `Dual 𝕜 E`,\nthe map `fun y => ⟪x, y⟫`; moreover this operation is a conjugate-linear isometric embedding of `E`\ninto `Dual 𝕜 E`.\nIf `E` is complete, this operation is surjective, hence a conjugate-linear isometric equivalence;\nsee `toDual`.\n","depth":21}],"count":1}
{"noDocExamples":[],"kind":"«term_≃L⋆[_]_»","examples":[{"type":"(R : Type u_1) →\n  {A : Type u_2} →\n    [inst : CommSemiring R] →\n      [inst_1 : StarRing R] →\n        [inst_2 : AddCommMonoid A] →\n          [inst_3 : StarAddMonoid A] →\n            [inst_4 : Module R A] →\n              [inst_5 : StarModule R A] → [inst_6 : TopologicalSpace A] → [inst_7 : ContinuousStar A] → A ≃L⋆[R] A","name":"starL","isProp":false,"doc":"If `A` is a topological module over a commutative `R` with compatible actions,\nthen `star` is a continuous semilinear equivalence. ","depth":26}],"count":1}
{"noDocExamples":[{"type":"∀ {Cont : Type u_1} {Elem : Type u_2} {Dom : Cont → ℕ → Prop} {n : ℕ} [inst : GetElem Cont ℕ Elem Dom] (a : Cont)\n  (i : Fin n) [inst_1 : Decidable (Dom a ↑i)] [inst_2 : Inhabited Elem], a[i]! = a[↑i]!","name":"getElem!_fin","isProp":true,"depth":22}],"kind":"«term__[_]_!»","examples":[],"count":1}
