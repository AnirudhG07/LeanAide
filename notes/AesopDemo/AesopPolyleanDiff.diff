- intro ((p, q, r), x)
-  cases x using Q.rec <;>
-  rw [s, square_mul, Pmul] <;> reduceGoal <;> simp only [id, DirectSum.add, add_zero, add_neg_self] <;> rfl
+   | ((p, q, r), x) =>
+    match x with 
+    | .e | .a | .b | .c => by
+      aesop (rule_sets [P])

-  intro ⟨(p, q, r), x⟩
-  cases x using Q.rec <;>
-  rw [P.one, s_square, s] <;> simp only [subType.val, prod_eq, zero_of_double_zero, and_false, and_true, true_and]
-  <;> try (first | apply odd_ne_zero | apply id)    
+   | ((p, q, r), x) => by
+    match x with
+    | .e => aesop (rule_sets [P]) (add norm [Int.zero_of_twice_zero])
+    | .a | .b | .c => aesop (rule_sets [P]) (add norm [Int.odd_ne_zero])