strict digraph { 
	"Complex.Complex.addGroupWithOne.proof_9" -> {"Eq.mpr" [color=green] "Complex" [color=green] "OfNat.ofNat" [color=green] "neg_add_rev" [color=green] "Complex.ext" [color=green] "congrFun" [color=green] "Complex.im" [color=green] "Eq" [color=green] "Nat.cast" [color=green] "Nat" [color=green] "Complex.re" [color=green] "Real.instNegReal" [color=green] "propext" [color=green] "Nat.cast_add" [color=green] "Eq.trans" [color=green] "Int.cast_negSucc" [color=green] "Real" [color=green] "HAdd.hAdd" [color=green] "Neg.neg" [color=green] "congrArg" [color=green] "Nat.cast_one" [color=green] "zero_eq_neg" [color=green] "id" [color=green] "Complex.mk" [color=green]}
	"Eq.mpr" -> {"Eq.symm" [color=green]}
	"neg_add_rev" -> {"SubtractionMonoid.neg_add_rev" [color=green]}
	"Complex.ext" -> {"HEq.refl" [color=green] "Eq" [color=green] "rfl" [color=green] "Eq.refl" [color=green] "eq_of_heq" [color=green] "Complex" [color=green] "Eq.symm" [color=green] "Real" [color=green] "Complex.mk" [color=green] "Complex.re" [color=green] "Complex.im" [color=green]}
	"congrFun" -> {"rfl" [color=green]}
	"Nat.cast" -> {"NatCast.natCast" [color=green]}
	"Real.instNegReal" -> {"Real" [color=green] "Neg.mk" [color=green]}
	"Nat.cast_add" -> {"congrFun" [color=green] "True" [color=green] "Nat.cast_zero" [color=green] "Eq" [color=green] "Nat.cast_succ" [color=green] "HAdd.hAdd" [color=green] "eq_self" [color=green] "add_assoc" [color=green] "Eq.trans" [color=green] "congrArg" [color=green] "Nat.cast" [color=green] "OfNat.ofNat" [color=green] "add_zero" [color=green] "congr" [color=green] "Nat" [color=green] "of_eq_true" [color=green]}
	"Int.cast_negSucc" -> {"AddGroupWithOne.intCast_negSucc" [color=green]}
	"congrArg" -> {"rfl" [color=green]}
	"Nat.cast_one" -> {"Nat.cast_succ" [color=green] "Nat.cast_zero" [color=green] "Eq" [color=green] "HAdd.hAdd" [color=green] "Eq.mpr" [color=green] "Eq.refl" [color=green] "Nat.cast" [color=green] "id" [color=green] "OfNat.ofNat" [color=green] "Nat" [color=green] "zero_add" [color=green]}
	"zero_eq_neg" -> {"neg_eq_zero" [color=green] "Iff.trans" [color=green] "eq_comm" [color=green]}
	"Nat.cast" -> {"NatCast.natCast" [color=green]}
	"Eq.symm" -> {"rfl" [color=green]}
	"rfl" -> {"rfl.proof_1" [color=green]}
	"Eq.symm" -> {"rfl" [color=green]}
	"rfl" -> {"rfl.proof_1" [color=green]}
	"congrFun" -> {"rfl" [color=green]}
	"Nat.cast_zero" -> {"AddMonoidWithOne.natCast_zero" [color=green]}
	"Nat.cast_succ" -> {"AddMonoidWithOne.natCast_succ" [color=green]}
	"eq_self" -> {"eq_true" [color=green] "rfl" [color=green]}
	"add_assoc" -> {"AddSemigroup.add_assoc" [color=green]}
	"congrArg" -> {"rfl" [color=green]}
	"Nat.cast" -> {"NatCast.natCast" [color=green]}
	"add_zero" -> {"AddZeroClass.add_zero" [color=green]}
	"congr" -> {"rfl" [color=green]}
	"of_eq_true" -> {"Eq.symm" [color=green] "True" [color=green] "trivial" [color=green]}
	"rfl" -> {"rfl.proof_1" [color=green]}
	"Nat.cast_succ" -> {"AddMonoidWithOne.natCast_succ" [color=green]}
	"Nat.cast_zero" -> {"AddMonoidWithOne.natCast_zero" [color=green]}
	"Eq.mpr" -> {"Eq.symm" [color=green]}
	"Nat.cast" -> {"NatCast.natCast" [color=green]}
	"zero_add" -> {"AddZeroClass.zero_add" [color=green]}
	"neg_eq_zero" -> {"neg_zero" [color=green] "neg_injective" [color=green] "Function.Injective.eq_iff'" [color=green]}
	"Iff.trans" -> {"Iff.mp" [color=green] "Iff.intro" [color=green] "Iff.mpr" [color=green]}
	"eq_comm" -> {"Eq.symm" [color=green] "Iff.intro" [color=green]}
	"rfl" -> {"rfl.proof_1" [color=green]}
	"rfl.proof_1" -> {"Eq.refl" [color=green]}
	"rfl" -> {"rfl.proof_1" [color=green]}
	"rfl.proof_1" -> {"Eq.refl" [color=green]}
	"rfl" -> {"rfl.proof_1" [color=green]}
	"eq_true" -> {"propext" [color=green] "True" [color=green] "Iff.intro" [color=green] "trivial" [color=green]}
	"rfl" -> {"rfl.proof_1" [color=green]}
	"rfl" -> {"rfl.proof_1" [color=green]}
	"rfl" -> {"rfl.proof_1" [color=green]}
	"Eq.symm" -> {"rfl" [color=green]}
	"trivial" -> {"True.intro" [color=green]}
	"rfl.proof_1" -> {"Eq.refl" [color=green]}
	"Eq.symm" -> {"rfl" [color=green]}
	"neg_zero" -> {"NegZeroClass.neg_zero" [color=green]}
	"neg_injective" -> {"Function.Involutive.injective" [color=green] "neg_involutive" [color=green]}
	"Function.Injective.eq_iff'" -> {"Function.Injective.eq_iff" [color=green]}
	"Eq.symm" -> {"rfl" [color=green]}
	"rfl.proof_1" -> {"Eq.refl" [color=green]}
	"rfl.proof_1" -> {"Eq.refl" [color=green]}
	"rfl.proof_1" -> {"Eq.refl" [color=green]}
	"trivial" -> {"True.intro" [color=green]}
	"rfl.proof_1" -> {"Eq.refl" [color=green]}
	"rfl.proof_1" -> {"Eq.refl" [color=green]}
	"rfl.proof_1" -> {"Eq.refl" [color=green]}
	"rfl" -> {"rfl.proof_1" [color=green]}
	"rfl" -> {"rfl.proof_1" [color=green]}
	"Function.Involutive.injective" -> {"Function.LeftInverse.injective" [color=green] "Function.Involutive.leftInverse" [color=green]}
	"neg_involutive" -> {"neg_neg" [color=green]}
	"Function.Injective.eq_iff" -> {"Iff.intro" [color=green] "congr_arg" [color=green]}
	"rfl" -> {"rfl.proof_1" [color=green]}
	"rfl.proof_1" -> {"Eq.refl" [color=green]}
	"rfl.proof_1" -> {"Eq.refl" [color=green]}
	"Function.LeftInverse.injective" -> {"rfl" [color=green]}
	"neg_neg" -> {"InvolutiveNeg.neg_neg" [color=green]}
	"congr_arg" -> {"congrArg" [color=green]}
	"rfl.proof_1" -> {"Eq.refl" [color=green]}
	"rfl" -> {"rfl.proof_1" [color=green]}
	"congrArg" -> {"rfl" [color=green]}
	"rfl.proof_1" -> {"Eq.refl" [color=green]}
	"rfl" -> {"rfl.proof_1" [color=green]}
	"rfl.proof_1" -> {"Eq.refl" [color=green]}
	"Complex.Complex.addGroupWithOne.proof_9" -> {"Eq" [color=blue] "HAdd.hAdd" [color=blue] "Neg.neg" [color=blue] "Complex" [color=blue] "Int.negSucc" [color=blue] "IntCast.intCast" [color=blue] "Nat.cast" [color=blue] "OfNat.ofNat" [color=blue] "Nat" [color=blue]}
	"neg_add_rev" -> {"Eq" [color=blue] "HAdd.hAdd" [color=blue] "Neg.neg" [color=blue]}
	"Complex.ext" -> {"Eq" [color=blue] "Complex" [color=blue]}
	"congrFun" -> {"Eq" [color=blue]}
	"Complex.im" -> {"Real" [color=blue]}
	"Complex.re" -> {"Real" [color=blue]}
	"Real.instNegReal" -> {"Neg" [color=blue] "Real" [color=blue]}
	"propext" -> {"Eq" [color=blue]}
	"Nat.cast_add" -> {"Nat" [color=blue] "Nat.cast" [color=blue] "Eq" [color=blue] "HAdd.hAdd" [color=blue]}
	"Eq.trans" -> {"Eq" [color=blue]}
	"Int.cast_negSucc" -> {"Eq" [color=blue] "Int.cast" [color=blue] "HAdd.hAdd" [color=blue] "Neg.neg" [color=blue] "Int.negSucc" [color=blue] "Nat.cast" [color=blue] "OfNat.ofNat" [color=blue] "Nat" [color=blue]}
	"congrArg" -> {"Eq" [color=blue]}
	"Nat.cast_one" -> {"Nat.cast" [color=blue] "Eq" [color=blue] "Nat" [color=blue] "OfNat.ofNat" [color=blue]}
	"zero_eq_neg" -> {"Neg.neg" [color=blue] "Eq" [color=blue] "Iff" [color=blue] "OfNat.ofNat" [color=blue]}
	"Complex.mk" -> {"Complex" [color=blue]}
	"Int.negSucc" -> {"Int" [color=blue]}
	"Eq.symm" -> {"Eq" [color=blue]}
	"SubtractionMonoid.neg_add_rev" -> {"Eq" [color=blue] "HAdd.hAdd" [color=blue] "Neg.neg" [color=blue]}
	"HEq.refl" -> {"HEq" [color=blue]}
	"rfl" -> {"Eq" [color=blue]}
	"Eq.refl" -> {"Eq" [color=blue]}
	"eq_of_heq" -> {"Eq" [color=blue]}
	"Eq.symm" -> {"Eq" [color=blue]}
	"Complex.mk" -> {"Complex" [color=blue]}
	"Complex.re" -> {"Real" [color=blue]}
	"Complex.im" -> {"Real" [color=blue]}
	"rfl" -> {"Eq" [color=blue]}
	"Neg.mk" -> {"Neg" [color=blue]}
	"congrFun" -> {"Eq" [color=blue]}
	"Nat.cast_zero" -> {"Nat.cast" [color=blue] "Eq" [color=blue] "Nat" [color=blue] "OfNat.ofNat" [color=blue]}
	"Nat.cast_succ" -> {"Eq" [color=blue] "Nat.succ" [color=blue] "HAdd.hAdd" [color=blue] "Nat.cast" [color=blue] "OfNat.ofNat" [color=blue]}
	"eq_self" -> {"True" [color=blue] "Eq" [color=blue]}
	"add_assoc" -> {"Eq" [color=blue] "HAdd.hAdd" [color=blue]}
	"Eq.trans" -> {"Eq" [color=blue]}
	"congrArg" -> {"Eq" [color=blue]}
	"add_zero" -> {"Eq" [color=blue] "HAdd.hAdd" [color=blue] "OfNat.ofNat" [color=blue]}
	"congr" -> {"Eq" [color=blue]}
	"AddGroupWithOne.intCast_negSucc" -> {"Eq" [color=blue] "HAdd.hAdd" [color=blue] "Neg.neg" [color=blue] "Int.negSucc" [color=blue] "IntCast.intCast" [color=blue] "Nat.cast" [color=blue] "OfNat.ofNat" [color=blue] "Nat" [color=blue]}
	"rfl" -> {"Eq" [color=blue]}
	"Nat.cast_succ" -> {"Eq" [color=blue] "Nat.succ" [color=blue] "HAdd.hAdd" [color=blue] "Nat.cast" [color=blue] "OfNat.ofNat" [color=blue]}
	"Nat.cast_zero" -> {"Nat.cast" [color=blue] "Eq" [color=blue] "Nat" [color=blue] "OfNat.ofNat" [color=blue]}
	"Eq.refl" -> {"Eq" [color=blue]}
	"zero_add" -> {"Eq" [color=blue] "HAdd.hAdd" [color=blue] "OfNat.ofNat" [color=blue]}
	"neg_eq_zero" -> {"Neg.neg" [color=blue] "Eq" [color=blue] "Iff" [color=blue] "OfNat.ofNat" [color=blue]}
	"Iff.trans" -> {"Iff" [color=blue]}
	"eq_comm" -> {"Eq" [color=blue] "Iff" [color=blue]}
	"rfl" -> {"Eq" [color=blue]}
	"rfl.proof_1" -> {"Eq" [color=blue]}
	"rfl" -> {"Eq" [color=blue]}
	"rfl.proof_1" -> {"Eq" [color=blue]}
	"rfl" -> {"Eq" [color=blue]}
	"AddMonoidWithOne.natCast_zero" -> {"NatCast.natCast" [color=blue] "Eq" [color=blue] "Nat" [color=blue] "OfNat.ofNat" [color=blue]}
	"AddMonoidWithOne.natCast_succ" -> {"Eq" [color=blue] "HAdd.hAdd" [color=blue] "NatCast.natCast" [color=blue] "OfNat.ofNat" [color=blue] "Nat" [color=blue]}
	"eq_true" -> {"True" [color=blue] "Eq" [color=blue]}
	"rfl" -> {"Eq" [color=blue]}
	"AddSemigroup.add_assoc" -> {"Eq" [color=blue] "HAdd.hAdd" [color=blue]}
	"rfl" -> {"Eq" [color=blue]}
	"AddZeroClass.add_zero" -> {"Eq" [color=blue] "HAdd.hAdd" [color=blue] "OfNat.ofNat" [color=blue]}
	"rfl" -> {"Eq" [color=blue]}
	"Eq.symm" -> {"Eq" [color=blue]}
	"trivial" -> {"True" [color=blue]}
	"rfl.proof_1" -> {"Eq" [color=blue]}
	"AddMonoidWithOne.natCast_succ" -> {"Eq" [color=blue] "HAdd.hAdd" [color=blue] "NatCast.natCast" [color=blue] "OfNat.ofNat" [color=blue] "Nat" [color=blue]}
	"AddMonoidWithOne.natCast_zero" -> {"NatCast.natCast" [color=blue] "Eq" [color=blue] "Nat" [color=blue] "OfNat.ofNat" [color=blue]}
	"Eq.symm" -> {"Eq" [color=blue]}
	"AddZeroClass.zero_add" -> {"Eq" [color=blue] "HAdd.hAdd" [color=blue] "OfNat.ofNat" [color=blue]}
	"neg_zero" -> {"Eq" [color=blue] "Neg.neg" [color=blue] "OfNat.ofNat" [color=blue]}
	"neg_injective" -> {"Function.Injective" [color=blue] "Neg.neg" [color=blue]}
	"Function.Injective.eq_iff'" -> {"Eq" [color=blue] "Iff" [color=blue]}
	"Iff.intro" -> {"Iff" [color=blue]}
	"Eq.symm" -> {"Eq" [color=blue]}
	"Iff.intro" -> {"Iff" [color=blue]}
	"rfl.proof_1" -> {"Eq" [color=blue]}
	"Eq.refl" -> {"Eq" [color=blue]}
	"rfl.proof_1" -> {"Eq" [color=blue]}
	"Eq.refl" -> {"Eq" [color=blue]}
	"rfl.proof_1" -> {"Eq" [color=blue]}
	"propext" -> {"Eq" [color=blue]}
	"Iff.intro" -> {"Iff" [color=blue]}
	"trivial" -> {"True" [color=blue]}
	"rfl.proof_1" -> {"Eq" [color=blue]}
	"rfl.proof_1" -> {"Eq" [color=blue]}
	"rfl.proof_1" -> {"Eq" [color=blue]}
	"rfl" -> {"Eq" [color=blue]}
	"True.intro" -> {"True" [color=blue]}
	"Eq.refl" -> {"Eq" [color=blue]}
	"rfl" -> {"Eq" [color=blue]}
	"NegZeroClass.neg_zero" -> {"Eq" [color=blue] "Neg.neg" [color=blue] "OfNat.ofNat" [color=blue]}
	"Function.Involutive.injective" -> {"Function.Injective" [color=blue]}
	"neg_involutive" -> {"Function.Involutive" [color=blue] "Neg.neg" [color=blue]}
	"Function.Injective.eq_iff" -> {"Eq" [color=blue] "Iff" [color=blue]}
	"rfl" -> {"Eq" [color=blue]}
	"Eq.refl" -> {"Eq" [color=blue]}
	"Eq.refl" -> {"Eq" [color=blue]}
	"Eq.refl" -> {"Eq" [color=blue]}
	"True.intro" -> {"True" [color=blue]}
	"Eq.refl" -> {"Eq" [color=blue]}
	"Eq.refl" -> {"Eq" [color=blue]}
	"Eq.refl" -> {"Eq" [color=blue]}
	"rfl.proof_1" -> {"Eq" [color=blue]}
	"rfl.proof_1" -> {"Eq" [color=blue]}
	"Function.LeftInverse.injective" -> {"Function.Injective" [color=blue]}
	"Function.Involutive.leftInverse" -> {"Function.LeftInverse" [color=blue]}
	"neg_neg" -> {"Eq" [color=blue] "Neg.neg" [color=blue]}
	"Iff.intro" -> {"Iff" [color=blue]}
	"congr_arg" -> {"Eq" [color=blue]}
	"rfl.proof_1" -> {"Eq" [color=blue]}
	"Eq.refl" -> {"Eq" [color=blue]}
	"Eq.refl" -> {"Eq" [color=blue]}
	"rfl" -> {"Eq" [color=blue]}
	"InvolutiveNeg.neg_neg" -> {"Eq" [color=blue] "Neg.neg" [color=blue]}
	"congrArg" -> {"Eq" [color=blue]}
	"Eq.refl" -> {"Eq" [color=blue]}
	"rfl.proof_1" -> {"Eq" [color=blue]}
	"rfl" -> {"Eq" [color=blue]}
	"Eq.refl" -> {"Eq" [color=blue]}
	"rfl.proof_1" -> {"Eq" [color=blue]}
	"Eq.refl" -> {"Eq" [color=blue]}
	}